<div class="post-text" itemprop="text">
<p>I have a class called Pattern, and within it two methods, equates and setwildcard. Equates returns the index in which a substring first appears in a string, and setwildcard sets a wild card character in a substring</p>
<p>So</p>
<pre><code>p = Pattern('xyz')
t = 'xxxxxyz'
p.equates(t)
</code></pre>
<p>Returns 4</p>
<p>Also</p>
<pre><code>p = Pattern('x*z', '*')
t = 'xxxxxgzx'
p.equates(t)
</code></pre>
<p>Returns 4, because * is the wildcard and can match any letter within t, as long as x and z match.
What's the best way to implement this?</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you're essentially implementing a subset of regular expressions. Luckily, Python has a library for that built-in! If you're not familiar with how regular expressions (or, as their friends call them, regexes) work, I highly recommend you read through the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">documentation for them</a>.</p>
<p>In any event, the function <code>re.search</code> is, I think, exactly what you're looking for. It takes, as its first argument, a pattern to match, and, as its second argument, the string to match it in. If the pattern is matched, <code>search</code> returns an <code>SRE_Match</code> object, which, conveniently, has a <code>#start()</code> method that returns the index at which the match starts.</p>
<p>To use the data from your example:</p>
<pre class="lang-py prettyprint-override"><code> import re
 start_index = re.search(r'x.z', 'xxxxxgzg').start()
</code></pre>
<p>Note that, in regexes, <code>.</code> - not <code>*</code> -- is the wildcard, so you'll have to replace them in the pattern you're using.</p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/on-topic">on topic</a> and <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a> apply here.  In general, the "correct" way to address such a question is to implement <i>some</i> solution, and then ask for improvements on CodeReview.StackExchange.com</span>
