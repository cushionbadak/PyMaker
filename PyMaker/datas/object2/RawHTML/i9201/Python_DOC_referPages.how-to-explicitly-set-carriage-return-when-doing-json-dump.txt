<div class="post-text" itemprop="text">
<p>My python script generates json file. And I have to support this python file working on windows and linux. The problem is a difference carriage return on windows and linux. When I run this code on windows, it outputs CRLF json. And it outputs LF json when I run this on linux.</p>
<p>So how to explicitly set carriage return when doing json dump in python3.5? I couln</p>
<pre><code>import json
fpath = "hoge.json"
data = {"AGE": 12, "HOGE": [{"GUA": 3}]}
with open(fpath, 'wt', encoding="utf-8") as outfile:
    json.dump(data, outfile, indent=4, sort_keys=True, ensure_ascii=False)
</code></pre>
<p><a href="http://docs.python.jp/3/library/json.html" rel="nofollow noreferrer">http://docs.python.jp/3/library/json.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you insist on consistent CRLF behavior (the JSON spec requires parsers to handle both, but opening it in certain plain text readers like Notepad might be easier with consistent CRLF), the solution is in <a href="https://docs.python.org/3/library/functions.html#open" rel="noreferrer">the <code>open</code> function</a>, not the <code>json</code> module.</p>
<p>Just pass <code>newline='\r\n'</code> to <code>open</code>, and it will translate any <code>\n</code> written by <code>json</code> to <code>\r\n</code> seamlessly on all systems, rather than the default behavior of translating to <code>os.linesep</code> (which is <code>\r\n</code> on Windows and <code>\n</code> on most other OSes):</p>
<pre><code>with open(fpath, 'w', encoding="utf-8", newline='\r\n') as outfile:
    json.dump(data, outfile, indent=4, sort_keys=True, ensure_ascii=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>line endings are white space in the json spec (<a href="https://tools.ietf.org/html/rfc7159" rel="nofollow noreferrer">https://tools.ietf.org/html/rfc7159</a> section 2 at the bottom):</p>
<blockquote>
<p>Insignificant whitespace is allowed before or after any of the six 
  structural characters.</p>
<pre><code>  ws = *(
          %x20 /              ; Space
          %x09 /              ; Horizontal tab
          %x0A /              ; Line feed or New line
          %x0D )              ; Carriage return
</code></pre>
</blockquote>
<p>meaning that every reader must handle both CR and LF to be conformant.</p>
</div>
<span class="comment-copy">It probably makes more sense to convert the line endings separately after creating the file.  Or, even better, just use line-ending-aware code to read it on the other end; most software that reads JSON should be able to cope with an unfamiliar line ending in some way or other.</span>
<span class="comment-copy">In JSON whitespace characters including <code>\n</code> and <code>\r</code> and ignored outside of tokens and disallowed (except of space) inside of tokens. So using Windows or UNIX linefeeds does not make a difference.</span>
<span class="comment-copy">Indeed! I want to set LF, so I could realized it with newline='\n\'</span>
<span class="comment-copy">@jef: Ah, your question made it sound like you <i>wanted</i> the carriage return. Yeah, if you just want the line feed, use <code>newline=''</code> or <code>newline='\n'</code>, either of which disable line ending translation (the latter explicitly says "translate LF to LF", the former says "don't translate", but those are logically equivalent behaviors).</span>
<span class="comment-copy">I did want the CR so thank you for this. Although "the JSON spec requires parsers to handle both" it is often advantageous to have the JSON file human readable and this fixes that for me. Also fixed an problem I was having with 'smart quotes'</span>
