<div class="post-text" itemprop="text">
<p>I have a python module which defines a multi-line string constant. I want to have the multi-line string display nicely in the Sphinx-based documentation.</p>
<p>Below, is some example Python code, RST, and how it renders with <code>sphinx-build</code>. However, I would rather get something like the "desired sphinx docs".</p>
<p>Is this possible?</p>
<p><strong>mymodule.py</strong></p>
<pre><code>#: Default configuration
DEFAULT_CONFIG = r"""
{ "foo": "bar",
  "baz": "rex" }
"""
</code></pre>
<p><strong>mydocs.rst</strong></p>
<pre><code>...

--------------
Default Config
--------------

.. autodata:: mymodule.DEFAULT_CONFIG
</code></pre>
<p><strong>Resulting Sphinx Docs</strong></p>
<pre><code>mymodule.DEFAULT_CONFIG
= "{ \"foo\": \"bar\",\n  \"bar\": \"rex\" }"

str(object=’‘) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str

Create a new string object from the given object.
If encoding or errors is specified, then the object
must expose a data buffer that will be decoded using
the given encoding and error handler. Otherwise, returns
the result of object.__str__() (if defined) or repr(object).
encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.
</code></pre>
<p><strong>Desired Sphinx Docs</strong></p>
<pre><code>mymodule.DEFAULT_CONFIG = Default configuration
{ "foo": "bar",
  "baz": "rex" }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This cannot be supported directly, but since you're using Sphinx and Python the following hack is what I decided to go with:</p>
<ol>
<li><p>In this example, it is important that you can <code>import</code> the variable you desire.  This should already be working, since <code>autodoc</code> is able to produce output.</p></li>
<li><p>This hack will enable you to have a more human friendly output, <strong>but</strong> you will <strong>also</strong> still have the value of the variable (as far as sphinx is concerned) in the undesireable (with a bunch of <code>\n</code> characters).</p></li>
</ol>
<p>I will be reusing my own project for this, but using your variable / value.  My package name is <code>exhale</code> and the file I'm putting this in is <code>exhale/configs.py</code>, so that's where that stuff is coming from.  So this is the layout:</p>
<h3>File: <code>exhale/configs.py</code></h3>
<p>This is your actual python code.  It looks like this:</p>
<pre><code>__name__ = "configs"
__docformat__ = "reStructuredText"

DEFAULT_CONFIG = r"""
{ "foo": "bar",
  "baz": "rex" }
"""
'''
This is some description of the use of / intended purpose of the variable.

The contents of this variable are a multi-line string with value:

.. include:: DEFAULT_CONFIG_value.rst

.. note::

   The above value is presented for readability, take special care in use of
   this variable that the real value has both a leading and trailing ``\\n``.
'''
</code></pre>
<h3>In your sphinx documentation</h3>
<p>In whatever file you had the <code>autodata</code> above (I used <code>automodule</code>, it doesn't matter).  The docs look like this (to be clear, you've already got this, and <strong>do not need to change it</strong>).  The things you need to change are your actual python docstring, and the next section.  This is here for completeness of the answer.</p>
<pre><code>Exhale Configs Module
=====================

.. automodule:: exhale.configs
   :members:
   :undoc-members:
</code></pre>
<h3>Modify your <code>conf.py</code></h3>
<p>This is the fancy part, and a huge benefit to using Sphinx -- Python is so freaking convenient when it comes to writing files.  In the above docstring, you'll see that I deliberately have a <code>.. include</code> directive.  The crazy part about this is we can write this file dynamically.  At the bottom of your <code>conf.py</code>, you can just add something like</p>
<pre><code># Import the variable from wherever it lives
from exhale.configs import DEFAULT_CONFIG
default_parts = DEFAULT_CONFIG.strip().splitlines()
# Because I am deliberately putting this underneath a '.. code-block:: py',
# we need to indent by **THREE** spaces.
#
# Similarly, when writing to the file, the "\n\n   " before
# {default_config_value} (the three spaces) is also important ;)
default_config_value = "\n   ".join(p for p in default_parts)
with open("DEFAULT_CONFIG_value.rst", "w") as dcv:
    dcv.write(".. code-block:: py\n\n   {default_config_value}\n\n".format(
        default_config_value=default_config_value
    ))
</code></pre>
<p>If you are using Python <strong>3</strong>, instead of splitting and joining, just use <a href="https://docs.python.org/3/library/textwrap.html#textwrap.indent" rel="nofollow noreferrer"><code>textwrap.indent</code></a>.  I did the above just to make sure Python 2 users can replicate.</p>
<h3>KABOOM</h3>
<p>When you run <code>make html</code>, it will regenerate the file <code>DEFAULT_CONFIG_value.rst</code> every time!  So even if you change the value of the variable, it should be good to go.  For reference, the generated file for me looks like this</p>
<pre><code>.. code-block:: py

   { "foo": "bar",
     "baz": "rex" }
</code></pre>
<p><strong>Note</strong>: this is not a standalone reStructuredText document, it should only every be used via <code>.. include::</code>!</p>
<p>Last but not least, the rendered output looks like this:</p>
<p><a href="https://i.stack.imgur.com/MCPjM.jpg" rel="nofollow noreferrer"><img alt="sphinx generated docs" src="https://i.stack.imgur.com/MCPjM.jpg"/></a></p>
<p>As stated in the preamble, Sphinx <strong>is</strong> going to include the <code>\n</code> version in the value.  We are just putting this in the docstring.  It's very useful to have <strong>both</strong>.  The reason is because with the <code>.. code-block:: py</code> approach, Sphinx will strip leading / trailing newlines (hence the <code>.. note::</code> in the docstring).  So it is very helpful to have the human-readable version, but it's also useful to know the raw value.</p>
<p>The only other thing worth mentioning here is that the sky is the limit!  I chose to use <code>.. code-block:: py</code> for my purposes, but since you're literally writing the file yourself you can do whatever you want.  You could write the file so that it instead produces</p>
<pre><code>.. code-block:: py

   DEFAULT_CONFIG = r"""
   { "foo": "bar",
     "baz": "rex" }
   """
</code></pre>
<p>by changing the part in <code>conf.py</code>.  It's up to you!  When changing the output you may get bugs, open up the generated <code>.rst</code> document and make sure it's valid :)</p>
</div>
