<div class="post-text" itemprop="text">
<p>I  want to find consecutive digits in a string that sum to a given number.  </p>
<p>Example:</p>
<p><code>a="23410212"</code> number <code>is=5</code> — output <code>23,41,410,0212,212</code>.</p>
<p>This code is not working.  What do I need to fix?</p>
<pre><code>def find_ten_sstrsum():
    num1="2825302"
    n=0;
    total=0;
    alist=[];
    ten_str="";
    nxt=1;
    for n in range(len(num1)):
        for n1 in range(nxt,len(num1)):
            print(total)
            if(total==0):
                total=int(num1[n])+int(num1[n1])
                ten_str=num1[n]+num1[n1]
            else:
                total+=int(num1[n1])
                ten_str+=num1[n1]
            if(total==10):
                alist.append(ten_str)
                ten_str=""
                total=0
                nxt+=1
                break
            elif(total&lt;10):
                nxt+=1
     return alist 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This (sort-of) one-liner will work:</p>
<pre><code>def find_ten_sstrsum(s, n):
  return list(  # list call only in Python 3 if you don't want an iterator
    filter(
      lambda y: sum(map(int, y))==n, 
      (s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))
  )

&gt;&gt;&gt; find_ten_sstrsum('23410212', 5)
['23', '41', '410', '0212', '212']
</code></pre>
<p>This uses a nested <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow noreferrer">generator expression</a> over all possible <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="nofollow noreferrer">slices</a> and <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filters</a> out the ones with the correct digit-sum.
This is, of course, far from optimal (especially for long strings) because the inner loop should be stopped as soon as the digit-sum exceeds <code>n</code>, but should give you an idea.</p>
<p>A more performant and readable solution would be a <a href="https://docs.python.org/2/reference/expressions.html#generator-iterator-methods" rel="nofollow noreferrer">generator function</a>:</p>
<pre><code>def find_ten_sstrsum(s, n):
  for start in range(len(s)):
    for end in range(start+1, len(s)+1):
      val = sum(map(int, s[start:end]))
      if val &gt; n:
        break
      if val == n:
        yield s[start:end]

&gt;&gt;&gt; list(find_ten_sstrsum('23410212', 5))
['23', '41', '410', '0212', '212']
</code></pre>
<p>Definitely read up on <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum</a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a>, as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function has several problems.  Most of all, you have no way to give it different data to work on.  You have it hard-coded to handle <em>one</em> particular string and a total of 10.  You've even written variable names with "ten" in them, even though your example uses n=5.  Your function should have two input parameters: the given string and the <strong>target</strong> sum.</p>
<p><em>NOTE: schwobaseggl just posted a lovely, Pythonic solution.  However, I'll keep writing this, in case you need a function closer to your present learning level.</em></p>
<p>You have several logic paths, making it hard to follow how you handle your data.  I recommend a slightly different approach, so that you can treat each partial sum cleanly:</p>
<pre><code>for start in range(len(num1)):
    total = 0     # Start at 0 each time you get a new starting number.
    sum_str = ""
    for last in num1[start:]:
        print(total)
        # Don't create separate cases for the first and other additions.
        this_digit = num1[last]
        total += int(this_digit)
        ten_str += this_digit

        # If we hit the target, save the solution and
        #   start at the next digit
        if(total == target):
            alist.append(ten_str)
            break

        # If we passed the target, just
        #   start at the next digit
        elif(total &gt; target):
            break

 return alist 
</code></pre>
<p>Now, this doesn't solve <em>quite</em> all of your problems, and I haven't done some of the accounting work for you (variable initializations, <strong>def</strong> line, etc.).  However, I think it moves you in the right direction and preserves the spirit of your code.</p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem.  In particular, "it is not working" is not a problem specification.</span>
