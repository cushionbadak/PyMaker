<div class="post-text" itemprop="text">
<p>My setup is the following. I have a nested dictionary</p>
<pre><code>dic1 = { 0 : 'a', dic2: { 2 : 'b', 3: 'c' } }
</code></pre>
<p>and a string</p>
<pre><code>s = 'The first letter is %(0)s and the third is %(dic2[2])s'
</code></pre>
<p>Of course, the following doesn't work :</p>
<pre><code>print (s % dic1)
</code></pre>
<p>What's then the proper way of doing that?</p>
<hr/>
<p><em>Note:</em> I'm aware of the question <a href="https://stackoverflow.com/q/33161690/4003761">String formating with nested dictionary</a>, but I believe my problem cannot be solved by looping over the dictionaries. The above is of course a very simplified version of my actual problem, and I need both to respect the formatting of <code>dic1</code> and call the print statement only once.</p>
<hr/>
<p><strong>EDIT</strong>:</p>
<p>As pointed out in the comments, I was indeed a bit hasty about my simplifications...</p>
<pre><code>dic2 = { 2: 'b', 3: 'c'}
dic1 = { 0: 'a', 'dic2': dic2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the keys are strings, this could work:</p>
<pre><code>&gt;&gt;&gt; dic2 = { 'b': 2, 'c': 3}
&gt;&gt;&gt; dic1 = { 'a': 1, 'dic2': dic2}
&gt;&gt;&gt; s = 'The first number is {a} and the third is {dic2[c]}'
&gt;&gt;&gt; s.format(**dic1)
'The first number is 1 and the third is 3'
</code></pre>
<p>If not, this works (I just discovered this actually):</p>
<pre><code>&gt;&gt;&gt; dic2 = { 2: 'b', 3: 'c'}
&gt;&gt;&gt; dic1 = { 0: 'a', 'dic2': dic2}
&gt;&gt;&gt; s = 'The first number is {dic1[0]} and the third is {dic1[dic2][3]}'
&gt;&gt;&gt; s.format(dic1=dic1)
'The first number is a and the third is c'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you didn't specify a version, I'm going to assume the lastest version of Python (3.6). It's simple:</p>
<pre><code>dic1 = { 0 : 'a', 'dic2': { 2 : 'b', 3: 'c' } }

print(f"The first letter is {dic1[0]} and the third is {dic1['dic2'][2]}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on <code>@juanpa.arrivillaga's</code> answer:</p>
<p>With</p>
<pre><code> In [884]: dic2 = { 2: 'b', 3: 'c'}
 ...: dic1 = { 0: 'a', 'dic2': dic2}

In [894]: '{d[0]}, {d[dic2][3]}'.format(d=dic1)
Out[894]: 'a, c'
In [895]: dic1[0]
Out[895]: 'a'
In [896]: dic1['dic2'][3]
Out[896]: 'c'
</code></pre>
<p>The <code>format</code> method in 894 gets a reference to <code>dic1</code>, and names it <code>d</code>.  Then expressions in the <code>{}</code> are evaluated using that dictionary.</p>
<p>Alternatively the dictionary accessing could be done on the right, and strings passed to the format string:</p>
<pre><code>In [897]: '{}, {}'.format(dic1[0], dic1['dic2'][3])
Out[897]: 'a, c'
</code></pre>
<p>This works with the old style formatting, which takes a tuple of values:</p>
<pre><code>In [898]: '%s, %s'%(dic1[0], dic1['dic2'][3])
Out[898]: 'a, c'
</code></pre>
<p>==============</p>
<p>The dictionary can also be referenced by position:</p>
<pre><code>'{0[0]}, {1[dic2][3]}'.format(dic1,dic1)
</code></pre>
<p><a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">str format examples</a></p>
</div>
<span class="comment-copy">where is <code>dic2</code>  defined ?</span>
<span class="comment-copy">Your <code>dic1</code> is not valid, unless <code>dic2</code> is some variable name for a hashable type.</span>
<span class="comment-copy">Have you considered using <code>str.format</code> instead of the old-fashioned <code>%</code> mechanism?</span>
<span class="comment-copy">@Jean-FrançoisFabre see edit.</span>
<span class="comment-copy">Have you read the docs or a tutorial? They'd show you.</span>
<span class="comment-copy">VERY good. I don't understand how this works. It <i>has</i> to use <code>eval</code> right?</span>
<span class="comment-copy">@Jean-FrançoisFabre I assume it's some sort of dark sorcery. My experience with Python is, if you are hoping something will work, it just might.</span>
<span class="comment-copy">I've attempted to explain that sorcery.</span>
