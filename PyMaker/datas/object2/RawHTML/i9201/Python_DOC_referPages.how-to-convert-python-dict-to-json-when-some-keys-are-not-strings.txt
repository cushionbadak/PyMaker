<div class="post-text" itemprop="text">
<p>The JSON equivalent of a Python dict is a JSON object. However its keys must be strings, that's a well-known limitation.</p>
<p>I need to support also boolean and numeric keys. I could make a simple Python value &lt;--&gt; JSON string one-to-one translation:</p>
<pre><code>False &lt;--&gt; "bool:False"
42 &lt;--&gt; "int:42"
"Foo" &lt;--&gt; "str:Foo"
</code></pre>
<p>But I'd like to ask if there is some existing recommendation or some kind of standard for this. Simply anything that it is worth to be compatible with.</p>
</div>
<div class="post-text" itemprop="text">
<p>JSON isn't able to do that and I don't know of any widely-used extensions of JSON that allow you to do this. You'd have to write the serializer and deserializer yourself, which probably wouldn't be that difficult if you subclass <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder" rel="nofollow noreferrer"><code>json.JSONEncoder</code></a> and <a href="https://docs.python.org/3/library/json.html#json.JSONDecoder" rel="nofollow noreferrer"><code>json.JSONDecoder</code></a>.</p>
<p>If you're able to switch protocols, there are JSON-ish protocols that support non-string keys. <a href="http://msgpack.org/index.html" rel="nofollow noreferrer">MessagePack</a> is one:</p>
<pre><code>&gt;&gt;&gt; import msgpack
&gt;&gt;&gt; msgpack.loads(msgpack.dumps({'1': 12, False: 3, 2: 8}))
{False: 3, 2: 8, '1': 12}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This would achieve what you want:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = {False: 'this data', 42: 'answer', 'foo': 'bar'}
&gt;&gt;&gt; json.dumps({"%s:%s" % (type(k).__name__, k): v for k, v in data.items()})
'{"int:42": "answer", "str:foo": "bar", "bool:False": "this data"}'
</code></pre>
<p>You'd then have to de-serialize this, and it would only work for basic types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you cannot issue standard JSON, why don't you just use <code>str</code> to serialize and <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> (standard package) to deserialize?</p>
<pre><code>&gt;&gt;&gt; d = {'a': 33, 23:(4,5), False: 10, 4: "foo"}
&gt;&gt;&gt; a = str(d)   # convert the python structure to a string
&gt;&gt;&gt; d2 = ast.literal_eval(a)
&gt;&gt;&gt; print(d2)  # evaluate the a literal to a python structure
{False: 10, 4: 'foo', 'a': 33, 23: (4, 5)}
&gt;&gt;&gt; d2 == d   # are those the same before &amp; after evaluation ?
True
</code></pre>
</div>
<span class="comment-copy">i think you can just omit bool:, int:, str: to make it simpler.</span>
<span class="comment-copy">I suppose that you could do <code>bool(False)</code>, <code>int(42)</code> and use <code>eval</code>.</span>
<span class="comment-copy">can you just do <code>{str(k): v for k, v in d.items()}</code></span>
<span class="comment-copy">For JSON, not that I know of. You could instead use msgpack or some other format that works the way you want.</span>
<span class="comment-copy">Here's some discussion that you may find valuable <a href="http://stackoverflow.com/q/1450957/1916449">stackoverflow.com/q/1450957/1916449</a></span>
<span class="comment-copy">Thank you for your suggestion.This time I need to make a change as small as possible to an existing system, so I must stay with JSON. +1 because I learned someting new.</span>
<span class="comment-copy">"<i>I don't know of any widely-used extensions of JSON that allow you to do this</i>" is accepted as a direct answer to my question.</span>
<span class="comment-copy">Yes, something like this will do. However there are many possible variations. I just wanted to know, if some format is already in use or otherwise preferred. It looks like the answer is negative, but that's a valid answer.</span>
<span class="comment-copy">Thank you for your suggestion.This time I need to make a change as small as possible to an existing system, so I must stay with JSON.</span>
