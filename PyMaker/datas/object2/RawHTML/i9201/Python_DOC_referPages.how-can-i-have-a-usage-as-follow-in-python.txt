<div class="post-text" itemprop="text">
<p>I was wondering how I could I have a usage like this:</p>
<p><code>Usage: httpclient get [-v] [-h key: value] URL</code></p>
<p>Basically, right now, I named my file httpclient.py so that I can call it by httpclient, and the rest is as follow:</p>
<pre><code>def main():
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("arg1", nargs='?')
    parser.add_argument("arg2", nargs='?')
    parser.add_argument("-v",  nargs='?')
    parser.add_argument("-h", '--h', nargs='?', action='append')
    args = parser.parse_args()
    if args.arg1 == "help" and (args.arg2 == "get" or args.arg2 == "post"):
        if args.arg2 == "get":
            gethelp()
        elif args.arg2 == "post":
            posthelp()
    elif args.arg1 == "help":
        help()
    elif args.arg1 == "get":
        if args.v:
            print(sys.argv[-1])
            get(args.v,1,args.h)
        else:
            get(sys.argv[2],0,args.h)
</code></pre>
<p>so right now if I do something as follow on the command line:</p>
<pre><code>Py -3 httpclient.py get -v "http://google.com" -h "key: value"
</code></pre>
<p>however as you can see the url is place just after -v, where as in the task it is asked to be placed at the end, and exactly one url. </p>
<p>So everytime I write:</p>
<pre><code>Py -3 httpclient.py get -v -h "key: value" "http://google.com"
</code></pre>
<p>I get an error:</p>
<pre><code>usage: httpclient.py [-v [V]] [-h [H]] [arg1] [arg2]
httpc.py: error: unrecognized arguments: http://google.com
</code></pre>
<p>So how can I put the URL at the end of my cmd line arguments</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not clear why you're using <code>nargs='?'</code> for a <code>-v</code>erbosity flag - you shouldn't expect <em>any</em> value to get passed for that, let alone <em>multiple</em> values. </p>
<hr/>
<p>Also it's odd to combine both <code>nargs='?'</code> and <code>action='append'</code>; do you want the user to do e.g. <code>-h one two</code> (<code>nargs='?'</code>) or <code>-h one -h two</code> (<code>action='append')</code> for the resulting <code>parsed_args.h == ['one', 'two']</code>? </p>
<p>Alternatively, if what you want for <code>-h</code> is to allow the user to set it multiple times, each time with a separate <code>key</code> and <code>value</code>, then what you want is:</p>
<pre><code>parser.add_argument('-h', nargs=2, metavar=('key', 'value'), action='append')
</code></pre>
<hr/>
<p>It's pretty straightforward to take two optional arguments followed by a positional argument, and configure the display:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('-v', action='store_true')
parser.add_argument('-h', metavar='key: value', action='append')
parser.add_argument('URL')

print(parser.parse_args())
</code></pre>
<p>Gets you:</p>
<pre><code>$ python test.py
usage: test.py [-v] [-h key: value] URL
test.py: error: too few arguments
$ python test.py -h one -h two three
Namespace(URL='three', h=['one', 'two'], v=False)
$ python test.py hello -v
Namespace(URL='hello', h=None, v=True)
</code></pre>
<p>To add the separate <code>get</code> and <code>post</code> subcommands, look into using <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer"><code>add_subparsers</code></a>; this will be much more effective than just allowing the user to give random input and comparing <code>== 'get'</code> etc.</p>
<p>However, it's not clear what you actually want the user interface to be, so it's hard to say precisely how you should implement it.</p>
</div>
<div class="post-text" itemprop="text">
<p>With:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument("arg1", nargs='?')
parser.add_argument("arg2", nargs='?')
parser.add_argument("-v",  nargs='?')
parser.add_argument("-h", '--h', nargs='?', action='append')

args = parser.parse_args()

parser.print_help()

print(args)
</code></pre>
<p>test runs:</p>
<pre><code>1438:~/mypy$ python stack41863442.py 
usage: stack41863442.py [-v [V]] [-h [H]] [arg1] [arg2]

positional arguments:
  arg1
  arg2

optional arguments:
  -v [V]
  -h [H], --h [H]
Namespace(arg1=None, arg2=None, h=None, v=None)

1526:~/mypy$ python stack41863442.py get -v -h "key: value"
....
Namespace(arg1='get', arg2=None, h=['key: value'], v=None)

1527:~/mypy$ python stack41863442.py get -v -h "key: value" google
usage: stack41863442.py [-v [V]] [-h [H]] [arg1] [arg2]
stack41863442.py: error: unrecognized arguments: google
</code></pre>
<p>Putting the 2nd positional argument right after the first works:</p>
<pre><code>1528:~/mypy$ python stack41863442.py get google -v -h "key: value" 
...
Namespace(arg1='get', arg2='google', h=['key: value'], v=None)
</code></pre>
<p>A <code>nargs='?'</code> Action is satisfied by an empty list.  So <code>arg2</code> is parsed right after <code>arg1</code>, leaving nothing to handle the <code>google</code>.</p>
<pre><code>python stack41863442.py -v -h "key: value" get google
</code></pre>
<p>creates the same namespace.</p>
<p>Be careful with multiple variable nargs arguments.  They don't always work together well.</p>
<p>The <code>-v</code> will be a lot more useful if give it <code>const</code> and <code>default</code> values.   e.g. with defaults for the postionals as well:</p>
<pre><code>1536:~/mypy$ python stack41863442.py 
Namespace(arg1='def1', arg2='def2', h=None, v='vdef')
1536:~/mypy$ python stack41863442.py -v
Namespace(arg1='def1', arg2='def2', h=None, v='vconst')
1536:~/mypy$ python stack41863442.py -v fpp
Namespace(arg1='def1', arg2='def2', h=None, v='fpp')
</code></pre>
<p>Here <code>get</code> is assigned to <code>-v</code>:</p>
<pre><code>1538:~/mypy$ python stack41863442.py -v get google
Namespace(arg1='google', arg2='def2', h=None, v='get')
</code></pre>
<p>For a <code>verbosity</code> 'switch', a <code>store_true</code> action might be better.  <code>count</code> action also is used if you want to use <code>-vvv</code> to signal extra verbose'.</p>
<p>I didn't notice <code>-h</code> 'append', but I agree with the other answer.  That's an odd combination.  What is <code>-h</code> without any following argument supposed to mean?  In this test, the bare <code>-h</code> puts a <code>None</code> (default) in the <code>h</code> list.</p>
<pre><code>1540:~/mypy$ python stack41863442.py -h test -h -h 'other;x'
Namespace(arg1='def1', arg2='def2', h=['test', None, 'other;x'], v='vdef')
</code></pre>
</div>
<span class="comment-copy">It's not clear to me what you're asking, but it looks like you should be using subparsers for <code>get</code> and <code>post</code> and <code>action='store_true'</code> for whatever <code>-v</code> is (verbose?) Why does it matter if the flags come before or after the URL?</span>
<span class="comment-copy">-v is basically verbosity, if we add '-v' the output is going to show the headers of our get request, if you don't put '-v' then you will only the html response...</span>
<span class="comment-copy">Yes for -h I want to be able to do either <code>-h hello: World -h world: hello</code> and <code>-h hello: world world:hello</code> and for the rest thank you, it all makes sense now</span>
<span class="comment-copy">@puzzle don't allow either, that is going to add a lot of overhead to the parsing. If you make the interface <code>-h hello world -h world hello</code> then <code>argparse</code> can do all of the work for you, giving <code>[['hello', 'world'], ['world', 'hello']]</code> without you having to intervene. Also, note <a href="http://stackoverflow.com/help/someone-answers">stackoverflow.com/help/someone-answers</a></span>
<span class="comment-copy">I was wondering, as my first argument I can have help, get and post, if I have help I can only have get or post after, such that   <code>httpclient help</code> would give a broad help section  and  <code>httpclient help get</code> or <code>httpclient help post</code> would give a much more precise help.   this is possible with subparsers? if so how would I implement that?</span>
<span class="comment-copy">@puzzle yes, you can nest them; each one can have its own <code>help</code>.</span>
<span class="comment-copy">thank you for the explanation, as this explain very well the issues that I was having</span>
