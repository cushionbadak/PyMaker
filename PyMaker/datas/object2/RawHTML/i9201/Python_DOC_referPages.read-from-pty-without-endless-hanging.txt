<div class="post-text" itemprop="text">
<p>I have a script, that prints colored output if it is on tty. A bunch of them executes in parallel, so I can't put their stdout to tty. I don't have control over the script code either (to force coloring), so I want to fake it via pty. My code:</p>
<pre><code>invocation = get_invocation()
master, slave = pty.openpty()
subprocess.call(invocation, stdout=slave)
print string_from_fd(master)
</code></pre>
<p>And I can't figure out, what should be in <code>string_from_fd</code>. For now, I have something like </p>
<pre><code>def string_from_fd(fd):
  return os.read(fd, 1000)
</code></pre>
<p>It works, but that number <code>1000</code> looks strange . I think output can be quiet large, and any number there could be not sufficient. I tried a lot of solutions from stack overflow, but none of them works (it prints nothing or hanging forever).</p>
<p>I am not very familiar with file descriptors and all that, so any clarification if I'm doing something wrong would be much appreciated.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This won't work for long outputs: <code>subprocess.call</code> will block once the PTY's buffer is full. That's why <a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>subprocess.communicate</code></a> exists, but that won't work with a PTY.</p>
<p>The standard/easiest solution is to use the external module <a href="https://pexpect.readthedocs.io/en/stable/" rel="nofollow noreferrer">pexpect</a>, which uses PTYs internally: For example,</p>
<pre><code>pexpect.spawn("/bin/ls --color=auto").read()
</code></pre>
<p>will give you the <code>ls</code> output with color codes.</p>
<p>If you'd like to stick to <code>subprocess</code>, then you must use <code>subprocess.Popen</code> for the reason stated above. You are right in your assumption that by passing <code>1000</code>, you read at most 1000 bytes, so you'll have to use a loop. <code>os.read</code> blocks if there is nothing to read and waits for data to appear. The catch is how to recognize when the process terminated: In this case, you <em>know</em> that no more data will arrive. The next call to <code>os.read</code> will block forever. Luckily, the operating system helps you detect this situation: If all file descriptors to the pseudo terminal that could be used for writing are closed, then <code>os.read</code> will either return an empty string or return an error, depending on the OS. You can check for this condition and exit the loop when this happens. Now the final piece to understanding the following code is to understand how open file descriptors and <code>subprocess</code> go together: <code>subprocess.Popen</code> internally calls <code>fork()</code>, which duplicates the current process including all open file descriptors, and then within one of the two execution paths calls <code>exec()</code>, which terminates the current process in favour of a new one. In the other execution path, control returns to your Python script. So after calling <code>subprocess.Popen</code> there are <em>two</em> valid file descriptors for the slave end of the PTY: One belongs to the spawned process, one to your Python script. If you close yours, then the only file descriptor that could be used to send data to the master end belongs to the spawned process. Upon its termination, it is closed, and the PTY enters the state where calls to <code>read</code> on the master end fail.</p>
<p>Here's the code:</p>
<pre><code>import os
import pty
import subprocess

master, slave = pty.openpty()
process = subprocess.Popen("/bin/ls --color", shell=True, stdout=slave,
                           stdin=slave, stderr=slave, close_fds=True)
os.close(slave)

output = []
while True:
    try:
        data = os.read(master, 1024)
    except OSError:
        break
    if not data:
        break
    output.append(data) # In Python 3, append ".decode()" to os.read()
output = "".join(output)
</code></pre>
</div>
<span class="comment-copy">hmm, i tried and it doesn't work. It just goes <code>while True:</code> forever.</span>
<span class="comment-copy">I've updated the <code>Popen</code> call such that the spawned process <i>only</i> sees the PTY. If this doesn't change things, then: What OS are you using? Are you certain that the script you're trying to run terminates / isn't deadlocking because it expects user input? Does my example as-is terminate, or does it loop forever as well? Can you come up with an example command you're willing to share where the loop does not terminate? Using which Python version? (For debugging purposes, try adding a <code>print repr(output[-1])</code> inside the <code>while</code> loop.)</span>
<span class="comment-copy">I'm running OS X 10.12, Python 2.7.10. Even with your example, <code>/bin/ls --color</code> it stucks. <code>print repr(output[-1])</code> writes endlessly <code>''</code> â€“ just empty string.</span>
<span class="comment-copy">I made a condition in loop, <code>t = os.read(master, 1024); if len(t) = 0: break</code> and that way it is working.</span>
<span class="comment-copy">You've got to do that to ensure that there are no open file descriptors that could be used for writing data to master after the child program exited. I've extended that part of the answer.</span>
