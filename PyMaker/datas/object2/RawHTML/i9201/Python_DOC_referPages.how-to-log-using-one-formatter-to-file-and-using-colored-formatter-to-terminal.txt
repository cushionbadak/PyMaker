<div class="post-text" itemprop="text">
<p>I wish to log to file as well as show the same information in the terminal window, but with nice colors (using <a href="https://github.com/borntyping/python-colorlog" rel="nofollow noreferrer">colorlog</a> or other cross-platform log colorizer). This is what I have:</p>
<pre><code>import logging
import os

import colorlog


def logger(log_filepath='my_app.log', logger_name='myAppLogger'):
    """Log plain text to file and to terminal with colors"""

    logger = logging.getLogger(logger_name)

    # Log to file (but not to terminal)
    logfile_handler = logging.FileHandler(log_filepath)
    plain_formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    logfile_handler.setFormatter(plain_formatter)
    logfile_handler.setLevel(logging.DEBUG)

    # Logging info level to stdout with colors
    terminal_handler = colorlog.StreamHandler()
    color_formatter = colorlog.ColoredFormatter(
        "%(log_color)s%(levelname)-8s%(reset)s %(asctime)s %(blue)s%(message)s",
        datefmt=None,
        reset=True,
        log_colors={
            'DEBUG':    'cyan',
            'INFO':     'green',
            'WARNING':  'yellow',
            'ERROR':    'red',
            'CRITICAL': 'red,bg_white',
        },
        secondary_log_colors={},
        style='%'
    )
    terminal_handler.setLevel(logging.DEBUG)
    terminal_handler.setFormatter(color_formatter)

    # Add handlers to logger
    logger.addHandler(logfile_handler)
    logger.addHandler(terminal_handler)

    return logger


my_logger = logger()

my_logger.debug('Testing debug')
my_logger.info('Testing info')
my_logger.warning('Testing warning')
my_logger.error('Testing error')
my_logger.critical('Testing critical')
</code></pre>
<p>This gives me the following in the terminal (with colors):</p>
<pre><code>WARNING  2017-01-23 20:30:55,180 Testing warning
ERROR    2017-01-23 20:30:55,180 Testing error
CRITICAL 2017-01-23 20:30:55,181 Testing critical
</code></pre>
<p>...and this in the log file (no colors, just plain text):</p>
<pre><code>2017-01-23 20:30:55,180 WARNING Testing warning
2017-01-23 20:30:55,180 ERROR Testing error
2017-01-23 20:30:55,181 CRITICAL Testing critical
</code></pre>
<p>Why is the level not right though?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two issues in your (original) code. The first was a minor error in which you assigned <code>color_formatter</code> to the log handler instead of the terminal handler.</p>
<p>The second issue - that you weren't seeing logs below <code>WARNING</code> level in your terminal - was caused by the fact that you were setting the minimum logging level on the terminal <em>handler</em> but not the <em>logger itself</em>. You need to replace:</p>
<pre><code>terminal_handler.setLevel(logging.DEBUG)
</code></pre>
<p>With:</p>
<pre><code>logger.setLevel(logging.DEBUG)
</code></pre>
<p>According to <a href="https://docs.python.org/3/howto/logging.html" rel="nofollow noreferrer">the documentation</a>, loggers are set to <code>WARNING</code> log level by default, and if my intuition is correct then setting only the handler to a lower log level would not work because the handler can only process what the logger feeds it anyway - <code>WARNING</code>-level logs and above.</p>
</div>
<span class="comment-copy">Why is <code>logfile_handler</code> using <code>color_formatter</code> and not <code>terminal_handler</code>?</span>
<span class="comment-copy">Thanks - that was it. But what about the level? (updated the question)</span>
<span class="comment-copy">As for the level, you need to set <code>logger.setLevel(logging.DEBUG)</code> instead of <code>terminal_handler.setLevel...</code>. I've got an idea why this might be the case but I'll confirm and then post as an answer.</span>
