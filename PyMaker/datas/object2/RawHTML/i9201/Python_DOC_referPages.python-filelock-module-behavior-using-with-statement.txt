<div class="post-text" itemprop="text">
<p>I was just wondering about the specifics of python's module filelock and its behavior in a few circumstances. </p>
<p>First, how exactly is the <code>with:</code> statement handled by threads. If multiple threads call <code>with:</code> is it locked on a thread by thread basis? Is it also possible that two threads could acquire the lock at the same time?</p>
<p>Second, when I use <code>with:</code> do I have to clear the lock after its use? Is the lock automatically cleared after the <code>with:</code> statement is done?</p>
<p>Third, I have an instance in my code where I believe a file must be created then locked immediately. Currently I am using this:</p>
<pre><code>channel_file = open(os.path.join('channels', username), 'w+')
with filelock.FileLock(os.path.join('channels', username)):
  channel_file.write(json.dumps({'rate': reobj.group(1),'time': reobj.group(2)}))
</code></pre>
<p>If there were a possibility that another thread could read the file since the time it was created, would this protect against that? </p>
<p>This also brings up a forth point. Does filelock lock read access while using <code>with:</code>?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>The FileLock maintains a lock counter, which is shared across all threads in the process, and is protected behind a thread-wise lock. Every call to <code>acquire()</code> will increase the lock counter, and additionally will obtain the OS-level file lock when the counter was zero. Similarly, every call to <code>release()</code> will decrease the lock counter and unlock the file when the counter reaches zero.</p>
<p>Therefore, if two threads acquires the lock at the same time, the file will be locked <em>once</em> by this process in the OS level, and the lock counter will be increased by 2. <strong>The two threads will not block each other.</strong></p></li>
<li><p>The point of <code>with:</code> is to automatically acquire and release the lock after its scope exits. See <a href="https://stackoverflow.com/questions/3012488/what-is-the-python-with-statement-designed-for">What is the python "with" statement designed for?</a>.</p></li>
<li><p>The file lock is used to protect against file access outside of the current process. It is not used for thread-wise locking. Use a regular <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer"><code>threading.Lock</code></a> for thread-wise locking.</p>
<pre><code># in __main__ or somewhere before we start the threads.
channel_lock = threading.Lock()

# in the worker thread
with channel_lock:
    with open(...) as channel_file:
        channel_file.write(...)
</code></pre></li>
</ol>
<p>For implementation detail you could refer to the <a href="https://github.com/benediktschmitt/py-filelock/blob/22154286b6014021d68f1e25bfa81c7b50e9a71c/filelock.py#L192" rel="nofollow noreferrer">source code of <code>py-filelock</code></a>.</p>
</div>
