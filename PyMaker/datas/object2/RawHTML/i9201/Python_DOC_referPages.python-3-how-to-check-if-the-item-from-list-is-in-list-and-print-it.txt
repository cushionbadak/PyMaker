<div class="post-text" itemprop="text">
<p>I have a list of lists, which contains coordinates</p>
<pre><code>points = [[5821, 293], [3214, 872], [4218, 820], [1223, 90], [7438, 820]]
</code></pre>
<p>and I need to find <em>pair of lists</em> with the same <strong>point[i][1]</strong> and then print both of them. This coordinates are given just for instance. In the code they're given randomly.
How to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a> to create a series of pairs between each two items, and filter out only those with the same second item:</p>
<pre><code>from itertools import combinations
result = [x for x in combinations(points, 2) if x[0][1] == x[1][1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no easy and efficient way to do what you want with your current data structure.</p>
<p>You can either use an inefficient method (<code>O(N**2)</code>), or convert your data to another format where you can use a more efficient algorithm.</p>
<p><a href="https://stackoverflow.com/a/41912344/1405065">Mureinik's answer</a> is a good way to do an <code>O(N**2)</code> search, so I'll offer a solution that uses a dictionary to make the checking fast:</p>
<pre><code>def find_matches(points):
    dct = {}
    for x, y in points:
        for other_x in dct.setdefault(y, []):
            yield (x, y), (other_x, y)
        dct[y].append(x)
</code></pre>
<p>This is a generator, which will <code>yield</code> pairs of points with matching <code>y</code> values. It should use <code>O(N)</code> space and <code>O(N+R)</code> time (for <code>N</code> input points and <code>R</code> pairs of matches).</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure I understand the question correctly, but here is my approach.</p>
<p>I use <strong>python 3.5.2</strong>, by the way.</p>
<p>If your intent is to capture all lists with [1] or y-coordinate (depending on how you look at it) with a value of 820, then the code could be:</p>
<pre><code>for i in points:
    if i[1] == 820:
        print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is code that will work for you:</p>
<pre><code> second_list = [] 
 the_list = [[5821, 293], [3214, 872], [4218, 820], [1223, 90], 
 [7438, 820]]
 for i in the_list:
      second_list.append(i[1])

 repeated = []
 the_new_list = sorted(second_list, key=int)
 for i in range(len(the_new_list)):
     if i + 1 &lt; len(the_new_list):
          if the_new_list[i] == the_new_list[i+1]:
               repeated.append(the_new_list[i])

 for i in the_list:
      if i[1] in repeated:
          print(i)
</code></pre>
<p>second_list stores the y-coordinates of your list. Then, the program sorts the list of y-coordinates in ascending order and appends them to the_new_list. Finally, we loop over the_new_list and see if any numbers after each other are equal, and if so, append them to the list repeated. Then, we loop over the_list and see if any points are in repeated. If so, we print the entire thing. I hope that helps.</p>
</div>
<span class="comment-copy">Can you clarify your intent a little?</span>
<span class="comment-copy">You're trying to find all coordinates with the same y value, then print them?</span>
<span class="comment-copy">@BrandonIbbotson yes. I'm new in programming don't know a lot yet</span>
<span class="comment-copy">Your question should give the answer for the example you show.  Then it should some code that constitutes a serious attempt but does not work.  SO is not a code-writing service, especially not for what looks like a homework problem.  To get started, imagine you have a stack of cards, each with one pair of coordinates.  What would you do to solve the problem.  There are two different possible approaches.</span>
<span class="comment-copy">There cannot be more than two occurrences of a same Y value right?</span>
<span class="comment-copy">And if I'm not allowed to use itertools?</span>
<span class="comment-copy">You can do the same thing with a pair of nested loops and a regular <code>if</code> statement.</span>
<span class="comment-copy">I'm guessing OP doesn't want to just capture y-coordinates that are 820. It should probably be more general.</span>
<span class="comment-copy">or something like this:  for i in points:     for j in points:         if i[1] == j[1] and i != j:             print(j)</span>
