<div class="post-text" itemprop="text">
<p>I'm trying to use an <code>OrderedDict</code>, but it keeps being created out of order. For example,</p>
<pre><code>from collections import OrderedDict
OrderedDict(a=1,b=2,c=3)
</code></pre>
<p>yields </p>
<pre><code>OrderedDict([('a', 1), ('c', 3), ('b', 2)])
</code></pre>
<p>rather than the expected</p>
<pre><code>OrderedDict([('a', 1), ('b', 2), ('c', 3)])
</code></pre>
<p>How can I make sure it's created in the proper order I intend?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>collections.OrderedDict</code> keeps track of the order in which elements were added to it. This would work fine in a loop:</p>
<pre><code>c = collections.OrderedDict()
for a,b in zip('abc', (1,2,3)):
    c[a] = b
</code></pre>
<p>However, the expression <code>OrderedDict(a=1,b=2,c=3)</code> creates an <code>OrderedDict</code> by passing several keyword arguments to its constructor. In Python 2.7, the order of keyword arguments is not guaranteed. If you want that, you'll have to move to Python 3.6, which implements PEP 468, <a href="https://www.python.org/dev/peps/pep-0468/">Preserving the order of **kwargs in a function</a>.</p>
<blockquote>
<p>The <code>**kwargs</code> syntax in a function definition indicates that the interpreter should collect all keyword arguments that do not correspond to other named parameters. However, Python does not preserved the order in which those collected keyword arguments were passed to the function. In some contexts the order matters. This PEP dictates that the collected keyword arguments be exposed in the function body as an ordered mapping.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It's weird that it hasn't been mentioned already but the representation of <code>OrderedDict</code> shows you how to create it so that the order is kept:</p>
<pre><code>OrderedDict([('a', 1), ('b', 2), ('c', 3)])
</code></pre>
<p>it's not meant as an obstacle that the representation is like that - it's because <strong>that representation</strong> can be used to create an identical ordered <code>OrderedDict</code>.</p>
<hr/>
<p>Just for completeness (it has been mentioned already), the order is lost because <code>OrderedDict(a=1, b=2, c=3)</code> catches these arguments as <code>**kwargs</code>, which is a normal unordered-<code>dict</code>. At least until python 3.6 came along and made the <a href="https://docs.python.org/3.6/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order">promise</a> that the order of the <code>kwargs</code> will be kept when you pass it in as you did:</p>
<blockquote>
<h1>What’s New In Python 3.6</h1>
<h2>PEP 468: Preserving Keyword Argument Order</h2>
<p><code>**kwargs</code> in a function signature is now guaranteed to be an insertion-order-preserving mapping.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Read <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>The OrderedDict constructor and update() method both accept keyword arguments, but their order is lost because Python’s function call semantics pass-in keyword arguments using a regular unordered dictionary.</p>
</blockquote>
<p>You <em>must</em> pass the input as a sequence of tuples (or an existing ordered dict type) to preserve ordering.</p>
<p>Note that Python 3.6 now <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep468" rel="nofollow noreferrer">provides a guarantee that keyword arguments are passed in the same order they appear in the code (from left to right)</a>, thanks to <a href="https://www.python.org/dev/peps/pep-0468/" rel="nofollow noreferrer">PEP 468</a>, so on Python 3.6 and later, your code will just work.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is because the keyword arguments <code>(variable = value, )</code> that you pass will be consolidated into a Python dictionary first. And Python dictionaries are unordered. <code>kwds</code>  will be that dictionary as you can see in the Init signature.</p>
<pre><code>Init signature: OrderedDict(self, *args, **kwds)
</code></pre>
<p>This is how the <strong>OrderedDict</strong> will be initialized internally when you pass the keyword arguments:</p>
<pre><code>for key, value in kwds.items():
   self[key] = value
</code></pre>
<p>Since <code>kwds</code> is unordered, you will get an unordered OrderedDict.</p>
<p>You may create the ordered dict like so:</p>
<pre><code>from collections import OrderedDict
from string import ascii_lowercase

d = OrderedDict()
for a,b in enumerate(ascii_lowercase[:3], 1):
    d[b] = a
</code></pre>
<p>Or:</p>
<pre><code>n=3
d = OrderedDict(zip(ascii_lowercase[:n], range(1,n+1))) 
print d 
</code></pre>
<p>Output:</p>
<pre><code>OrderedDict([('a', 1), ('b', 2), ('c', 3)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create the desired mapping by using <code>sorted()</code>:</p>
<pre><code>dict = {"a":"some_value", "b":"other_value", "c":"foo"}
ordered = OrderedDict(sorted(dict.items(), key=lambda t: t[0]))
</code></pre>
<p>This sorts the items prior to passing them to the <code>OrderedDict</code> constructor.</p>
<p>The <code>key=</code> section sets the sorting, and <code>t[0]</code> sorts by the dictionary key.</p>
</div>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/questions/8977594/in-python-what-determines-the-order-while-iterating-through-kwargs" title="in python what determines the order while iterating through kwargs">stackoverflow.com/questions/8977594/…</a> and <a href="http://stackoverflow.com/questions/26748097/using-an-ordereddict-in-kwargs" title="using an ordereddict in kwargs">stackoverflow.com/questions/26748097/…</a></span>
<span class="comment-copy">Huh. Didn't realize they actually decided to document that behavior and guarantee it. Good to know.</span>
<span class="comment-copy">this <code>OrderedDict( zip("abc",(1,2,3)) )</code> also work</span>
<span class="comment-copy">@ShadowRanger - There's <a href="https://www.python.org/dev/peps/pep-0468/#performance" rel="nofollow noreferrer">some ambiguity</a> about <a href="https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation" rel="nofollow noreferrer">whether</a> the base <code>dict</code> type is ordered as anything but a CPython implementation detail, but, yes, keyword arguments are officially part of the language as of 3.6.</span>
<span class="comment-copy">@Copperfield - Yes, that sends a single argument to the constructor, which then iterates over that argument in a manner similar to the demonstrated loop. That argument is never sent to an arbitrarily-ordered container, and it's a sequence, so its order is guaranteed.</span>
<span class="comment-copy">It's probably worth mentioning that <a href="https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation" rel="nofollow noreferrer">the following item in that docs link</a> says that the plain <code>dict</code> in Python 3.6 now maintains insertion order, but currently that should be  "considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations"</span>
<span class="comment-copy">@PM2Ring Actually the <code>Preserving Keyword Argument Order</code> in 3.6 is not an implementation detail. That all <b>other</b> <code>dict</code>s are ordered in 3.6 is an implementation detail. :-) But it's good to have that comment below the post, it's <b>important information</b>. Thanks.</span>
<span class="comment-copy">@Agreed! In my previous comment I wasn't implying that <code>Preserving Keyword Argument Order</code> is an implementation detail. But of course, having plain dict maintain insertion order certainly makes preserving keyword arg order a lot easier. :)</span>
<span class="comment-copy">Ordering guaranteed in Python 3.6</span>
<span class="comment-copy">Okay, but how does one create the <code>OrderedDict</code> desired then?</span>
<span class="comment-copy">@wogsland should use ascii_lowercase? :)</span>
<span class="comment-copy">The key= isunnecessary - simply sorting by the tuple (key, value) will result in a key-sorted dictionary anyway.</span>
