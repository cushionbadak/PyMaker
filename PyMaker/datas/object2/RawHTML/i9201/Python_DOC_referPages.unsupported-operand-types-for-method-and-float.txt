<div class="post-text" itemprop="text">
<pre><code>class Coffee:
    def __init__(self):
        self._price=4.0

    def price(self):
        return self._price


    def __str__(self):
        return "Coffee with price "+ str(self._price)


class CoffeeWithMilk:
    def __init__(self, coffee):
        self.price+=coffee.price+0.5

    def price(self):
        return self.price


coffee=Coffee()

x=CoffeeWithMilk(coffee)
coffeeWithMilk=CoffeeWithMilk(x)
print(coffeeWithMilk)
</code></pre>
<p>How to fix this? Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>coffee.price</code> is a <em>method</em>, so <code>coffee.price + 0.5</code> gives you that error.</p>
<p>If you wanted to get the result of that method instead, <em>call</em> the method:</p>
<pre><code>self._price = coffee.price() + 0.5
</code></pre>
<p>Note, I replaced <code>+=</code> with <code>=</code> here, you are setting a new attribute after all. I also <em>renamed</em> the attribute, because otherwise your <code>CoffeeWithMilk.price</code> method will get really confused too, causing a <em>second</em> error that looks a lot the same, as <code>self.price</code> is still a method too. This necessitates fixing the <code>def price(self)</code> method to:</p>
<pre><code>def price(self):
    return self._price
</code></pre>
<p>So the completed code looks like this:</p>
<pre><code>class Coffee:
    def __init__(self):
        self._price = 4.0

    def price(self):
        return self._price

    def __str__(self):
        return "Coffee with price " + str(self._price)


class CoffeeWithMilk:
    def __init__(self, coffee):
        self._price = coffee.price() + 0.5

    def price(self):
        return self._price
</code></pre>
<p>You can avoid re-defining the <code>price</code> method altogether by using <em>class inheritance</em>; make <code>CoffeeWithMilk</code> a specialised version of <code>Coffee</code>:</p>
<pre><code>class Coffee:
    name = 'Coffee'

    def __init__(self):
        self._price = 4.0

    def price(self):
        return self._price

    def __str__(self):
        return "{} with price {}".format(self.name, self._price)


class CoffeeWithMilk(Coffee):
    name = 'Coffee with milk'

    def __init__(self, coffee):
        self._price = coffee.price() + 0.5
</code></pre>
<p>You get the <code>__str__</code> implementation along too, so your final <code>print(coffeeWithMilk)</code> will output something a little more interesting.</p>
<p>You could also make <code>Coffee.price</code> a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><em>property</em></a>; properties are methods that are automatically called for you each time you access the attribute:</p>
<pre><code>class Coffee:
    name = 'Coffee'

    def __init__(self):
        self._price = 4.0

    @property
    def price(self):
        return self._price

    def __str__(self):
        return "{} with price {}".format(self.name, self._price)


class CoffeeWithMilk(Coffee):
    name = 'Coffee with milk'

    def __init__(self, coffee):
        self._price = coffee.price + 0.5
</code></pre>
<p>In this case, I'd not use either a method or a property however. There is no need to make <code>_price</code> hidden here. Just replace it with a direct attribute:</p>
<pre><code>class Coffee:
    name = 'Coffee'

    def __init__(self):
        self.price = 4.0

    def __str__(self):
        return "{} with price {}".format(self.name, self.price)


class CoffeeWithMilk(Coffee):
    name = 'Coffee with milk'

    def __init__(self, coffee):
        self.price = coffee.price + 0.5
</code></pre>
<p>That's because neither the method nor the property do anything more than pass along the <code>_price</code> attribute. You may as well just directly access it.    </p>
<p>Last but not least, you create a <code>CoffeeWithMilk</code> instance from a <code>Coffee</code> instance, then <em>another</em> <code>CoffeeWithMilk</code> instance from the first <code>CoffeeWithMilk</code> instance, so your final instance has added 0.5 to 4 <em>twice</em>:</p>
<pre><code>&gt;&gt;&gt; coffee = Coffee()
&gt;&gt;&gt; x = CoffeeWithMilk(coffee)  # first instance, from coffee
&gt;&gt;&gt; print(x)
Coffee with milk with price 4.5
&gt;&gt;&gt; coffeeWithMilk = CoffeeWithMilk(x)  # second instance, from x
&gt;&gt;&gt; print(coffeeWithMilk)
Coffee with milk with price 5.0
</code></pre>
</div>
<span class="comment-copy">Why are you doing an in place addition? You can also see that <code>price</code> is a method</span>
<span class="comment-copy">self.price=coffee.price()+0.5</span>
