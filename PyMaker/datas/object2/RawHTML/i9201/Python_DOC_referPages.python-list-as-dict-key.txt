<div class="post-text" itemprop="text">
<p>I have the following:
I see the following object has <code>__hash__</code> attribute</p>
<pre><code>a=[1,2,3]

&gt;&gt;&gt; dir(a)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delsli
ce__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getit
em__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__',
 '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__r
educe__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__'
, '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'a
ppend', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'
]

&gt;&gt;&gt; dict1={a:'55'}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>
<p>Q:even though it has <code>__hash__</code> attribute, still it cannot be used as key.Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you try looking at the <em>value</em> of the attribute?</p>
<pre><code>&gt;&gt;&gt; print(a.__hash__)
None
</code></pre>
<p>Just because something <em>has</em> a <code>__hash__</code> attribute doesn't mean it's hashable; the <code>__hash__</code> attribute has to be a callable that actually hashes it (instead of, e.g., raising an exception).</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/19371358/python-typeerror-unhashable-type-list">Python, TypeError: unhashable type: 'list'</a></span>
<span class="comment-copy">Hint: <code>print(a.__hash__)</code></span>
<span class="comment-copy">The question that Sangeon Park linked isn't an exact dupe of this question, but I think it contains a lot of very relevant information. For further info, please see the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code> docs</a>.</span>
<span class="comment-copy">You might be wondering "why does <code>list</code> even have a <code>__hash__</code> attribute if it's not hashable?". Well, it inherits that attribute from the <code>object</code> class, and to remove an inherited attribute violates the <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" rel="nofollow noreferrer">Liskov substitution principle</a>, the 'L' in <a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29" rel="nofollow noreferrer">SOLID</a>.</span>
<span class="comment-copy">FWIW, it is actually possible to create your own mutable object that implements <code>__hash__</code>, but if that hash method depends on any of the mutable attributes of the instance then you <b>must not</b> mutate those attributes if you use the instance as a dict key (or set element), otherwise Bad Things happen.</span>
