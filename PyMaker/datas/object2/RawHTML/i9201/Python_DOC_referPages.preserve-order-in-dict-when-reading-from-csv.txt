<div class="post-text" itemprop="text">
<p>I have .csv file, I want to csv convert to dict. 
Below my code:</p>
<pre><code>testo = []
with open('dTest.csv', 'r') as f:
    reader = csv.DictReader(f)
    for row in reader:
        testo.append(row) 
print testo[4]
teo = json.dumps(testo[4])
</code></pre>
<p>My .csv file:</p>
<pre><code>c2:9f:db:67:12:48   c2:9f:db:e7:85:ad   06:27:22:fd:6b:50
      -67                 -51                 -110
</code></pre>
<p>But my dictionary results is random:</p>
<pre><code>{u'c2:9f:db:e7:85:ad': u'-51', u'c2:9f:db:67:12:48': u'-67',u'06:27:22:fd:6b:50': u'-110'}
</code></pre>
<p>I want my dictionary result is not random:</p>
<pre><code>{u'c2:9f:db:67:12:48': u'-67', u'c2:9f:db:e7:85:ad': u'-51', u'06:27:22:fd:6b:50': u'-110'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to preserver order within a dict you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>:</p>
<pre><code>import csv
from collections import OrderedDict
testo = []
with open('dTest.csv', 'r') as f:
    reader = csv.reader(f)
    headers = next(reader)
    for row in reader:
        testo.append(OrderedDict(zip(headers, row)))

print(testo[0])
</code></pre>
<p>this is guaranteed to always have this output:</p>
<pre><code>OrderedDict([('c2:9f:db:67:12:48', '-67'), ('c2:9f:db:e7:85:ad', '-51'), ('06:27:22:fd:6b:50', '-110')])
</code></pre>
<p>Other than the order, an <code>OrderedDict</code> has the same properties as a normal <code>Dict</code> so you can e.g. loop over it with <code>for key in test[0]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.6, dictionaries will preserve their insertion order: <a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/python-dev/2016-September/146327.html</a></p>
<blockquote>
<p>A nice "side effect" of compact dict is that the dictionary now
  preserves the insertion order.</p>
</blockquote>
<p>It is a "side effect", however, and not in the official spec so its probably not guaranteed to always work that way in future versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>By definition, dictionaries in Python are <strong>not ordered</strong>, so you cannot maintain (or rely on) any specific ordering of the elements you grab from the CSV file.</p>
<p><a href="https://stackoverflow.com/questions/526125/why-is-python-ordering-my-dictionary-like-so">Why is python ordering my dictionary like so?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to do what you want. By definition, <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionaries in Python are unordered</a>. As the documentation says,</p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). </p>
</blockquote>
<p>Whether the entry is accomplished by reading a file or typing in on the keyboard, Python does not care what order you enter the key-value pairs into the dictionary, as long as each key is unique. The key-value pairs will be stored in arbitrary order. </p>
<p>Why is this? It's because dictionaries are stored in a hash table. The unique key is hashed and the key-value pair is stored at the resultant location. A good enough hash algorithm should be <em>designed</em> for the hash value to be unpredictable. So the desire to keep the dictionary sorted by key all the time is antithetical to the way a dictionary is built. </p>
</div>
<span class="comment-copy">What do you mean random?</span>
<span class="comment-copy">the structure is different from my .csv file @StephenRauch</span>
<span class="comment-copy">dictionaries are unordered containers. That means that the information stored within a dictionary is not ordered. So you can't ask for <code>row[2]</code>, but you can ask for <code>row['c2:9f:db:67:12:48']</code>. If you want an ordered container, you're better off with a <code>list</code> (<code>csv.reader</code> instead of <code>csv.DictReader</code>). If you really <i>really</i> want an ordered dictionary, you could try something with <code>collections.OrderedDict</code>, but you'd have to put in some effort to read your csv files with such a structure</span>
<span class="comment-copy">If upgrading your Python version is an option, <a href="https://docs.python.org/3.6/library/csv.html#csv.DictReader" rel="nofollow noreferrer">Python 3.6's <code>csv.DictReader</code> is documented</a> as returning instances of <code>OrderedDict</code> rather than normal <code>dict</code> instances which don't have any particular order.</span>
<span class="comment-copy">The docs for the <code>csv.DictReader</code> class have actually been updated to say that it returns <code>OrderedDict</code> instances, so for this specific situation, relying upon the order is guaranteed to be supported even on implementations of Python where normal dictionaries are still unordered.</span>
