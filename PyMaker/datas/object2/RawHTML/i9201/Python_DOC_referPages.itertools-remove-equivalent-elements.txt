<div class="post-text" itemprop="text">
<p>I'm generating all <a href="http://lampx.tugraz.at/~hadley/ss1/bzones/fcc.php" rel="nofollow noreferrer">vectors respecting some symmetry groups</a> using itertools in python.</p>
<p>Basically all is just permutation of x,y,z axis and sign. I'm just not sure what is the best way to ensure that equivalent vectors are not duplicated E.g. </p>
<ol>
<li>0 = -0 therefore sign permuations of <code>[1, 2, 0]</code> should be just <code>[[1, 2, 0], [1, -2, 0], [-1, 2, 0], [-1, -2, 0]]</code></li>
<li><code>itertools.permutations( 'AAB'  )</code> should produce <code>[('A', 'B', 'A'), ('B', 'A', 'A'), ('A', 'A', 'B')]</code> i.e. not duplicating each elements by exchange of equvalent <code>A</code></li>
</ol>
<hr/>
<p><strong>My current solution:</strong></p>
<p>to remove dumplicate I pass it through a <code>set</code> like <code>lst = list(set(lst))</code>. But I don't like to create a lot of garbage which is filtered out later. Also it arbitrarily change order of elements. Also it set can be created just form hashable elements (e.g. tuples, but not lists or numpy arrays ) which requires conversion.</p>
<pre><code># using itertools.product and set filer
def signPermut( t ):
    lst = []
    n = len(t)
    for signs in itertools.product( [-1,1], repeat=n):
        p = [ ti*si for ti,si in zip(t,signs) ]
        lst.append(tuple(p))
    #return lst
    return list(set(lst))
</code></pre>
<p>This function does the sign permutation with checking for zeros, but it is probably very inefficient:</p>
<pre><code>def permutSign( t ):
    lst = [ [] ]
    for c in t:
        lst_ = []
        if c != 0:
            for p in lst:
                lst_.append(p+[ c]) 
                lst_.append(p+[-c])
        else:
            for p in lst:
                lst_.append( p+[c])
        lst = lst_
    return lst
</code></pre>
<p>It is working, but I was thinking maybe there is something prefabricated ... more efficient, simple and <em>pythonic</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe this is a bit more Pythonic:</p>
<pre><code>import itertools

def signProducts(vector):
    svector = [[x,-x] if x != 0 else [x] for x in vector]
    return itertools.product(*svector)

#test:
v = [1,2,0]
for w in signProducts(v): print(w)
</code></pre>
<p>Output:</p>
<pre><code>(1, 2, 0)
(1, -2, 0)
(-1, 2, 0)
(-1, -2, 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>how about creating a list with the signs and using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> over that:</p>
<pre><code>from itertools import product

lst = [1, 2, 0]

signs = [(1, -1) if item != 0 else (1, ) for item in lst]
print(signs)  # [(1, -1), (1, -1), (1,)]

res = []
for sign in product(*signs):
    res.append([s*n for s, n in zip(sign, lst)])

print(res)  # [[1, 2, 0], [1, -2, 0], [-1, 2, 0], [-1, -2, 0]]
</code></pre>
<p>or in one go:</p>
<pre><code>from itertools import product

sgn_lst =  [(n, -n) if n != 0 else (0, ) for n in lst]
print(sgn_lst)  # [(1, -1), (2, -2), (0,)]

res = []
for item in product(*sgn_lst):
    res.append(item)

print(res)  # [(1, 2, 0), (1, -2, 0), (-1, 2, 0), (-1, -2, 0)]
</code></pre>
<p>this way there is a lot less work to do inside the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think no matter how smart you are about using itertools, sets or iterators - the most important thing is to write code in a way that is easy to understand e.g. it won't hurt to name vars better and make it obvious that you multiply vectors:</p>
<pre><code>import itertools
import operator

def genAxes(n):
    return itertools.product((-1, 1), repeat=n)

def multiplyVectors(x, y):
    return itertools.imap(operator.mul, x, y)

def signPermutation(v):
    n = len(v)
    axes = genAxes(n)
    permut = map(lambda a: tuple(multiplyVectors(v, a)), axes)
    return list(set(permut))

v = [0, 1, 2]
print signPermutation(v)
</code></pre>
<p>This is just an example how to make it easier to follow IMHO.</p>
</div>
