<div class="post-text" itemprop="text">
<p>I have a String that looks like</p>
<pre><code>test = '20170125NBCNightlyNews'
</code></pre>
<p>I am trying to split it into two parts, the digits, and the name. <strong>The format will always be [date][show]</strong> the date is stripped of format and is digit only in the direction of YYYYMMDD (dont think that matters)</p>
<p>I am trying to use <code>re</code>. I have a working version by writing.</p>
<pre><code>re.split('(\d+)',test)
</code></pre>
<p>Simple enough, this gives me the values I need in a list. </p>
<p><code>['', '20170125', 'NBCNightlyNews']</code></p>
<p>However, as you will note, there is an empty string in the first position. I could theoretically just ignore it, but I want to learn why it is there in the first place, and if/how I can avoid it.</p>
<p>I also tried telling it to match the begininning of the string as well, and got the same results. </p>
<pre><code>&gt;&gt;&gt; re.split('(^\d+)',test)
['', '20170125', 'NBCNightlyNews']
&gt;&gt;&gt; re.split('^(\d+)',test)
['', '20170125', 'NBCNightlyNews']
&gt;&gt;&gt;
</code></pre>
<p>Does anyone have any input as to why this is there / how I can avoid the empty string? </p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers have explained why what you're doing does what it does, but if you have a constant format for the date, there is no reason to abuse a <code>re.split</code> to parse this data:</p>
<pre><code>test[:8], test[8:]
</code></pre>
<p>Will split your strings just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are actually doing by entering <code>re.split('(^\d+)', test)</code> is, that your test string is splitted on any occurence of a number with at least one character.</p>
<p>So, if you have</p>
<pre><code>test = '20170125NBCNightlyNews'
</code></pre>
<p>This is happening:</p>
<pre><code> 20170125 NBCNightlyNews
 ^^^^^^^^
</code></pre>
<p>The string is split into three parts, everything before the number, the number itself and everything after the number.</p>
<hr/>
<p>Maybe it is easier to understand if you have a sentence of words, separated by a whitespace character.</p>
<pre><code>re.split(' ', 'this is a house')
=&gt; ['this', 'is', 'a', 'house']

re.split(' ', ' is a house')
=&gt; ['', 'is', 'a', 'house']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're getting an empty result in the beginning because your input string starts with digits and you're splitting it by digits only. Hence you get an empty string which is before first set of digits.</p>
<p>To avoid that you can use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>:</p>
<pre><code>&gt;&gt;&gt; print filter(None, re.split('(\d+)',test))
['20170125', 'NBCNightlyNews']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why <code>re.split</code> when you can just match and get the groups?...</p>
<pre><code>import re
test = '20170125NBCNightlyNews'
pattern = re.compile('(\d+)(\w+)')

result = re.match(pattern, test)
result.groups()[0]  # for the date part
result.groups()[1]  # for the show name
</code></pre>
<p>I realize now the intention was to parse the text, not fix the regex usage.  I'm with the others, you shouldn't use regex for this simple task when you already know the format won't change and the date is fixed size and will always be first.  Just use string indexing.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3.7/library/re.html#re.split" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string. That way, separator components are always found at the same relative indices within the result list.</p>
</blockquote>
<p>So if you have:</p>
<pre><code>test = 'test20170125NBCNightlyNews'
</code></pre>
<p>The indexes would remain unaffected:</p>
<pre><code>&gt;&gt;&gt;re.split('(\d+)',test)
['test', '20170125', 'NBCNightlyNews']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the date is always 8 digits long, I would access the substrings directly (without using regex):</p>
<pre><code>&gt;&gt;&gt; [test[:8], test[8:]]
['20170125', 'NBCNightlyNews']
</code></pre>
<p>If the length of the date might vary, I would use:</p>
<pre><code>&gt;&gt;&gt; s = re.search('^(\d*)(.*)$', test)
&gt;&gt;&gt; [s.group(1), s.group(2)]
['20170125', 'NBCNightlyNews']
</code></pre>
</div>
<span class="comment-copy">Did you try reading the <a href="https://docs.python.org/2/library/re.html#re.split" rel="nofollow noreferrer">docs</a>? They explain this.</span>
<span class="comment-copy">I did, I was confused as to why it would create a group, I understand better now on ssc answer. thank you</span>
<span class="comment-copy">you are right. This is seemingly my best approach. I've been looking for chances to practice and use <code>re</code> but I guess I overthought this one a llittle bit.</span>
<span class="comment-copy">@Busturdust It's a really common approach, just gotta remember <a href="https://en.wikipedia.org/wiki/KISS_principle" rel="nofollow noreferrer">KISS</a></span>
<span class="comment-copy">This made sense to me thank you. The way the docs are written I thought maybe there was like an invisible "digit" before the string, but the expression "before, the number, and after" helped me understand thank you</span>
<span class="comment-copy">@Busturdust I've added an example with a whitespace character, maybe it is even more clear with that :)</span>
<span class="comment-copy">Fixing the output from abusing the <code>re.split</code> function would not be my recommended fix.</span>
<span class="comment-copy">This was a good visualization for me, thank you</span>
