<div class="post-text" itemprop="text">
<p>I'm trying to learn how to automatically compile all members of a class into a list. This segment of code is not part of a real project, but just an example to help me explain my objective. I can't seem to find any reading material on this, and I don't even know if it is possible or not. Thanks in advance for your answers! =)</p>
<pre><code>class question:
    def __init__(self,question,answer,list_of_answers):
        self.question=question
        self.answer=answer
        self.list_of_answers=list_of_answers

question_01=question('''
Which of these fruits is red?
A). Banana
B). Orange
C). Apple
D). Peach
''',"C",("A","B","C","D"))

question_02=question('''
Which of these is both a fruit and a vegetable?
A). Cauliflower
B). Tomato
C). Brocolli
D). Okrah
''',"B",("A","B","C","D"))

'''My objective is to write code that can automatically compile my questions (the
members of my question class) into a list,even if I have hundreds of them, without
having to manually write them into a list.'''

#If there are only two questions, final output should automatically become:
all_questions=[question_01,question_02]

#If there are one hundred questions, final output should automatically become:
all_questions=[question_01,question_02, ... ,question_99,question_100]

#Without having to manually type all of the one hundred questions (or members
#of the question class) to the list.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a way of doing what you wanted: obtain a list of all the objects of a given type from a module (or file). I present two solutions:</p>
<h2>Option one, from a different module (file):</h2>
<p>Say you have the following file:</p>
<p>QuestionModule.py</p>
<pre><code> class question:
    def __init__(self,question,answer,list_of_answers):
    self.question=question
    self.answer=answer
    self.list_of_answers=list_of_answers

 question_01=question('''
 Which of these fruits is red?
 A). Banana
 B). Orange
 C). Apple
 D). Peach
 ''',"C",("A","B","C","D"))

 question_02=question('''
 Which of these is both a fruit and a vegetable?
 A). Cauliflower
 B). Tomato
 C). Brocolli
 D). Okrah
 ''',"B",("A","B","C","D"))
</code></pre>
<p>Then you can get all questions by:</p>
<p>GetQuestions.py</p>
<pre><code>import QuestionModule
def get():
    r = []
    for attribute in dir(QuestionModule):
        #print(attribute,"  ",type(getattr(QuestionModule,attribute)))
        if type(getattr(QuestionModule,attribute)) == QuestionModule.question:
            r.append(getattr(QuestionModule,attribute))  
    return r

l_questions = get()
</code></pre>
<p>Or:</p>
<pre><code>import GetQuestions
l_questions = GetQuestions.get()
</code></pre>
<h2>Option two, from the same module (file):</h2>
<p>If you want to do the same from the same file, you can do:</p>
<pre><code> class question:
    def __init__(self,question,answer,list_of_answers):
    self.question=question
    self.answer=answer
    self.list_of_answers=list_of_answers

 question_01=question('''
 Which of these fruits is red?
 A). Banana
 B). Orange
 C). Apple
 D). Peach
 ''',"C",("A","B","C","D"))
 question_02=question('''
 Which of these is both a fruit and a vegetable?
 A). Cauliflower
 B). Tomato
 C). Brocolli
 D). Okrah
 ''',"B",("A","B","C","D"))

def getQuestions():
    import sys
    l = dir(sys.modules[__name__])
    r = []
    for e in l:
        if sys.modules[__name__].question==type(getattr(sys.modules[__name__],e)):
            r.append(getattr(sys.modules[__name__], e))
    return r

L = getQuestions()
for i in L :
    print(i)
    print(i.question)
</code></pre>
<p>You can take out the <code>import sys</code> from the method and put it at the top if you are to call <code>getQuestions</code> multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't have 100 <code>question_01</code> through <code>question_100</code> variables in the first place. You're going to have a bad time when you want to reorder the questions, or delete one, or add one in the middle. Do you really want to have to rename 98 variables when you want to put a new question between <code>question_02</code> and <code>question_03</code>?</p>
<p>At this point, you should strongly consider putting your questions into a data file separate from your source code and reading questions from the file. Even if you don't do that, though, you should eliminate the numbered variables. Put the questions in the list to start with. (Also, classes should be named in CamelCase):</p>
<pre><code>questions = [
    Question('''
Which of these fruits is red?
A). Banana
B). Orange
C). Apple
D). Peach
''', "C", ("A","B","C","D")),
    Question('''
Which of these is both a fruit and a vegetable?
A). Cauliflower
B). Tomato
C). Brocolli
D). Okrah
''', "B", ("A","B","C","D")),
    ...
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both answers were very good. I wish that I could select both of them as the main answer. I gave it to mm_ because his answer most closely fit my objectives, but I really like user2357112's answer too.</p>
<p>Thanks for the answers everyone!</p>
</div>
<span class="comment-copy">Why don't you just create a list and append the objects?</span>
<span class="comment-copy">I don think "compile" is the right word.</span>
<span class="comment-copy">Can I assume your input is a list of questions like : [q1, q2, ... q100] where q1 = "Which of these fruits is red?",q2 = "Which of these is both a fruit and a vegetable?", etc; and [a1,a2, ... an] where a1 =["Banana", "Orange", "Apple", "Peach"], ... etc. Not clear what is your input and what output you are looking for.</span>
<span class="comment-copy">@juanpa.arrivillaga Good work! That will be perfect for me!</span>
<span class="comment-copy">@mm_ Actually, what I was looking for was a list as an output. Basically, I want to tell the program "Take every object that is a part of this specific class, and make a list out of it. I could append each object separately as juanpa.arrivillaga recommends, and it will work great, but I am also hoping to create a list of all objects for that class with a single command. =)</span>
<span class="comment-copy">Wow! Your code is more advanced than my current understanding of Python, but after tinkering with it, I can tell that you found the solution. Now I just have to figure out how it works LOL. Thanks buddy!</span>
<span class="comment-copy">Good information! I'm not very knowledgeable about creating and reading text files, but I think I'll take up the challenge and learn how. Thanks for the advice! By the way, I'll wait a little while, and then vote your answer as the best if nobody can top it! =)</span>
<span class="comment-copy">If you send me an e-mail address, I can tell you how it works. If you are still interested.</span>
