<div class="post-text" itemprop="text">
<p>I have a function called <code>def get_scraped_data():</code>that is essentially a web scrapper. It returns a DataFrame called newlaw with all my desired data. The entire code is below.</p>
<pre><code>def get_scraped_data():
    from bs4 import BeautifulSoup
    import requests
    import pandas as pd

    urlh = 'http://solicitors.lawsociety.org.uk/search/results?Type=1&amp;IncludeNlsp=True&amp;Pro=True&amp;parameters=%2C1%3BAPL%2C0%3B%2C1%3BPUB%2C0%3B%2C1%3BADV%2C0%3B%2C1%3BAGR%2C0%3B%2C1%3BAVI%2C0%3B%2C1%3BBAN%2C1%3B%2C1%3BBEN%2C0%3B%2C1%3BCHA%2C0%3B%2C1%3BCHI%2C0%3B%2C1%3BCLI%2C0%3B%2C1%3BCOL%2C1%3B%2C1%3BPCO%2C1%3B%2C1%3BCCL%2C0%3B%2C1%3BCOS%2C1%3B%2C1%3BCOM%2C1%3B%2C1%3BCON%2C1%3B%2C1%3BCSU%2C0%3B%2C1%3BCSF%2C0%3B%2C1%3BCSG%2C0%3B%2C1%3BCUT%2C0%3B%2C1%3BCTR%2C1%3B%2C1%3BPRE%2C0%3B%2C1%3BCFI%2C1%3B%2C1%3BCRD%2C0%3B%2C1%3BCRF%2C0%3B%2C1%3BCRG%2C0%3B%2C1%3BCRJ%2C0%3B%2C1%3BCRL%2C0%3B%2C1%3BCRM%2C0%3B%2C1%3BCRS%2C0%3B%2C1%3BCRO%2C1%3B%2C1%3BDEB%2C0%3B%2C1%3BDTR%2C1%3B%2C1%3BDEF%2C0%3B%2C1%3BDRC%2C0%3B%2C1%3BDRO%2C1%3B%2C1%3BEDU%2C0%3B%2C1%3BELC%2C0%3B%2C1%3BELH%2C0%3B%2C1%3BEMP%2C1%3B%2C1%3BENE%2C0%3B%2C1%3BENV%2C0%3B%2C1%3BEUN%2C0%3B%2C1%3BFDS%2C0%3B%2C1%3BFAM%2C0%3B%2C1%3BFAL%2C0%3B%2C1%3BFMC%2C0%3B%2C1%3BFME%2C0%3B%2C1%3BFML%2C0%3B%2C1%3BFPL%2C0%3B%2C1%3BFIS%2C0%3B%2C1%3BHRI%2C0%3B%2C1%3BIMA%2C0%3B%2C1%3BIML%2C0%3B%2C1%3BIMM%2C0%3B%2C1%3BIMG%2C0%3B%2C1%3BIMN%2C0%3B%2C1%3BITE%2C1%3B%2C1%3BINS%2C1%3B%2C1%3BIUR%2C1%3B%2C1%3BIPR%2C1%3B%2C1%3BJRW%2C0%3B%2C1%3BJRL%2C0%3B%2C1%3BLCO%2C1%3B%2C1%3BLRE%2C0%3B%2C1%3BPOA%2C0%3B%2C1%3BLIC%2C1%3B%2C1%3BLIV%2C0%3B%2C1%3BLIS%2C0%3B%2C1%3BLIT%2C0%3B%2C1%3BLPH%2C0%3B%2C1%3BLPP%2C0%3B%2C1%3BMAR%2C0%3B%2C1%3BMED%2C1%3B%2C1%3BMHE%2C0%3B%2C1%3BMHL%2C0%3B%2C1%3BMAA%2C1%3B%2C1%3BMIL%2C0%3B%2C1%3BNDI%2C0%3B%2C1%3BPEN%2C1%3B%2C1%3BPIN%2C0%3B%2C1%3BPIR%2C0%3B%2C1%3BPLA%2C0%3B%2C1%3BPRZ%2C0%3B%2C1%3BPRP%2C0%3B%2C1%3BPRT%2C0%3B%2C1%3BPRW%2C0%3B%2C1%3BPCI%2C0%3B%2C1%3BPCP%2C0%3B%2C1%3BPCT%2C0%3B%2C1%3BPCW%2C0%3B%2C1%3BPNE%2C0%3B%2C1%3BTAX%2C0%3B%2C1%3BTAC%2C1%3B%2C1%3BTAE%2C0%3B%2C1%3BTAH%2C1%3B%2C1%3BTAM%2C0%3B%2C1%3BTAP%2C0%3B%2C1%3BTAT%2C0%3B+'
    r = requests.get(urlh)
    soup = BeautifulSoup(r.content, 'html.parser')

    names = []
    roles = []
    offices = []
    locations = []

    for i in range(1,2):
        url = 'http://solicitors.lawsociety.org.uk/search/results?Type=1&amp;IncludeNlsp=True&amp;Pro=True&amp;parameters=%2C1%3BAPL%2C0%3B%2C1%3BPUB%2C0%3B%2C1%3BADV%2C0%3B%2C1%3BAGR%2C0%3B%2C1%3BAVI%2C0%3B%2C1%3BBAN%2C1%3B%2C1%3BBEN%2C0%3B%2C1%3BCHA%2C0%3B%2C1%3BCHI%2C0%3B%2C1%3BCLI%2C0%3B%2C1%3BCOL%2C1%3B%2C1%3BPCO%2C1%3B%2C1%3BCCL%2C0%3B%2C1%3BCOS%2C1%3B%2C1%3BCOM%2C1%3B%2C1%3BCON%2C1%3B%2C1%3BCSU%2C0%3B%2C1%3BCSF%2C0%3B%2C1%3BCSG%2C0%3B%2C1%3BCUT%2C0%3B%2C1%3BCTR%2C1%3B%2C1%3BPRE%2C0%3B%2C1%3BCFI%2C1%3B%2C1%3BCRD%2C0%3B%2C1%3BCRF%2C0%3B%2C1%3BCRG%2C0%3B%2C1%3BCRJ%2C0%3B%2C1%3BCRL%2C0%3B%2C1%3BCRM%2C0%3B%2C1%3BCRS%2C0%3B%2C1%3BCRO%2C1%3B%2C1%3BDEB%2C0%3B%2C1%3BDTR%2C1%3B%2C1%3BDEF%2C0%3B%2C1%3BDRC%2C0%3B%2C1%3BDRO%2C1%3B%2C1%3BEDU%2C0%3B%2C1%3BELC%2C0%3B%2C1%3BELH%2C0%3B%2C1%3BEMP%2C1%3B%2C1%3BENE%2C0%3B%2C1%3BENV%2C0%3B%2C1%3BEUN%2C0%3B%2C1%3BFDS%2C0%3B%2C1%3BFAM%2C0%3B%2C1%3BFAL%2C0%3B%2C1%3BFMC%2C0%3B%2C1%3BFME%2C0%3B%2C1%3BFML%2C0%3B%2C1%3BFPL%2C0%3B%2C1%3BFIS%2C0%3B%2C1%3BHRI%2C0%3B%2C1%3BIMA%2C0%3B%2C1%3BIML%2C0%3B%2C1%3BIMM%2C0%3B%2C1%3BIMG%2C0%3B%2C1%3BIMN%2C0%3B%2C1%3BITE%2C1%3B%2C1%3BINS%2C1%3B%2C1%3BIUR%2C1%3B%2C1%3BIPR%2C1%3B%2C1%3BJRW%2C0%3B%2C1%3BJRL%2C0%3B%2C1%3BLCO%2C1%3B%2C1%3BLRE%2C0%3B%2C1%3BPOA%2C0%3B%2C1%3BLIC%2C1%3B%2C1%3BLIV%2C0%3B%2C1%3BLIS%2C0%3B%2C1%3BLIT%2C0%3B%2C1%3BLPH%2C0%3B%2C1%3BLPP%2C0%3B%2C1%3BMAR%2C0%3B%2C1%3BMED%2C1%3B%2C1%3BMHE%2C0%3B%2C1%3BMHL%2C0%3B%2C1%3BMAA%2C1%3B%2C1%3BMIL%2C0%3B%2C1%3BNDI%2C0%3B%2C1%3BPEN%2C1%3B%2C1%3BPIN%2C0%3B%2C1%3BPIR%2C0%3B%2C1%3BPLA%2C0%3B%2C1%3BPRZ%2C0%3B%2C1%3BPRP%2C0%3B%2C1%3BPRT%2C0%3B%2C1%3BPRW%2C0%3B%2C1%3BPCI%2C0%3B%2C1%3BPCP%2C0%3B%2C1%3BPCT%2C0%3B%2C1%3BPCW%2C0%3B%2C1%3BPNE%2C0%3B%2C1%3BTAX%2C0%3B%2C1%3BTAC%2C1%3B%2C1%3BTAE%2C0%3B%2C1%3BTAH%2C1%3B%2C1%3BTAM%2C0%3B%2C1%3BTAP%2C0%3B%2C1%3BTAT%2C0%3B+' + '=&amp;Page=' + str(i)
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        hp_sol_data = soup.find_all('section', {'class':'solicitor'})

        for sol in hp_sol_data:
            try:
                addy = sol.contents[7].find_all('dd', {'class':'feature highlight'})[0].text
                locations.append(addy)
            except IndexError:
                locations.append('None Found')
            try:
                office_names = sol.contents[7].find_all('dd', {'class':'highlight'})[0].text
                offices.append(office_names)
            except IndexError:
                offices.append('None Found')

        for link in soup.find_all('a', href=True):
            if link.get('href').startswith('/person/'):
                tags = (link.get('href'))

                url2 = 'http://solicitors.lawsociety.org.uk' + str(tags)
                r2 = requests.get(url2)
                soup = BeautifulSoup(r2.content, 'html.parser')

                s_data = soup.find_all('article', {'class':'solicitor solicitor-type-individual details'})

                for item in s_data:
                    solicitor_names = (item.contents[3].find_all('h1')[0].text)
                    names.append(solicitor_names)

                    try:
                        role = (item.find_all('div', {'class':'panel-half'})[1].find('dd').get_text(''))
                        roles.append(role)
                    except IndexError:
                        roles.append('Role not specified')

    tls_solicitors = pd.DataFrame({'Solicitor_Name': names,
                                'Role': roles,
                                'Office': offices,
                                'Address': locations},
                                columns = ['Solicitor_Name', 'Office', 'Address', 'Role'])

    law = tls_solicitors
    newd = law['Role'].str.split('\n', n=3, expand = True)
    law['Primary_Role'] = newd[0]
    law['Secondary_Role'] = newd[1]
    law['Other_Role'] = newd[2]
    law['Other_Role_1'] = newd[3]
    law['Other_Role_2'] = ''
    law['Other_Role_3'] = ''
    law['Other_Role_4'] = ''
    newlaw = law.drop('Role', axis=1)
    return newlaw
</code></pre>
<p>I then edited my views.py to call the function and save it as a variable data (data = get_scraped_data()).</p>
<pre><code>from django.shortcuts import render
from .tls import get_scraped_data
from django.http import HttpResponse


def law_view(request, *args, **kwargs):
     data = get_scraped_data()
     return render(request, "law.html", {'data': data})
</code></pre>
<p>Moving forward in my attempt to display the data I created a template 'law.html' and inserted this code.</p>
<pre><code>&lt;table class="table table-striped"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
          {% for row in data %}
        &lt;th&gt;{{ row }}&lt;/th&gt;
            {% endfor %}
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt; 
            {% for data in data %}
        &lt;td&gt;{{ data }}&lt;/td&gt;
            {% endfor %}
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p>The problem here is that only the header of DataFrame newlaw displays.
For ex.</p>
<p>Solicitor_name , Office, Address, etc..</p>
<p>I also tried a {{ data }} and this displays exactly what I desire but I cannot seem to find a way to manipulate the data and put it into a table so that it is more pleasing to the eye.</p>
<p>I would love some assistance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should wrap all the code in <em>tls.py</em> in a function, which returns <code>newlaw</code> (assuming that's the output you want). So:</p>
<pre><code>def get_scraped_data():
    # all your code here
    return newlaw
</code></pre>
<p>Then in your view you can do this:</p>
<pre><code>from tls import get_scraped_data

def law_view(request, *args, **kwargs):
    data = get_scraped_data()
    return render(request, "tls.html", {'data': data})
</code></pre>
<p>And in your template (tls.html) you can then loop through the data:</p>
<pre><code>{% for row in data %}
    {{ row }}
{% endfor %}
</code></pre>
<p>Of course you'll probably want to display this in a nicer way, e.g. in a <code>&lt;table&gt;</code>. For that just wrap everything in a <code>&lt;table&gt;</code>, display the header row, then loop through the rows wrapping them in <code>&lt;tr&gt;</code> and looping through each column wrapping them in <code>&lt;td&gt;</code>.</p>
<p>I think <code>DataFrame</code> also has lots of methods to render itself, so you could also do:</p>
<pre><code>{{ data.as_html|safe }}
</code></pre>
<p>which will render the data as a HTML table.</p>
</div>
<span class="comment-copy">It is very difficult to watch the code in pictures.</span>
<span class="comment-copy">how should i display the code. Typed out?</span>
<span class="comment-copy">Read this: <a href="http://idownvotedbecau.se/imageofcode" rel="nofollow noreferrer">idownvotedbecau.se/imageofcode</a></span>
<span class="comment-copy">@juangonzalez, yes of course! Only if you do not write code in pictures.</span>
<span class="comment-copy">Okay I have edited the question, hopefully this is better</span>
<span class="comment-copy">Okay, I have took your advice but for some reason the html page only renders the titles of the columns solicitor_names, office, address etc... I am not sure why</span>
<span class="comment-copy">I don't know much about <code>DataFrame</code>. Did you use <code>as_html</code> or the for loop? You should open up a console, check what <code>data = get_scraped_data()</code> returns, play around with it to see how to extract the information your need. There are literally more than <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html" rel="nofollow noreferrer">one hundred methods</a> that <code>DataFrame</code> supports, explore.</span>
