<div class="post-text" itemprop="text">
<p>I have these three lists of strings:</p>
<pre><code>st1=["a","b"]
st2=["likes"]
st3=["programming","math"]
</code></pre>
<p>I want to have output like:</p>
<pre><code>a likes programming
b likes math
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.cycle</code></p>
<pre><code>from itertools import cycle

st1=["a","b"]
st2=["likes"]
st3=["programming","math"]

for i,j,k in zip(st1, cycle(st2), st3):

    print(i+" "+j+" "+k)
</code></pre>
<p>Output:</p>
<pre><code>a likes programming                                                                                                                   
b likes math  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>zip_longest</code> with a <code>for</code> loop:</p>
<pre><code>for x,y,z in zip_longest(st1,st2*2,st3):
     print(x,y,z)
</code></pre>
<p>Or:</p>
<pre><code>print('\n'.join([' '.join(i) for i in zip_longest(st1,st2*2,st3)]))
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>from itertools import zip_longest
st1=["a","b"]
st2=["likes"]
st3=["programming","math"]
for x,y,z in zip_longest(st1,st2*2,st3):
     print(x,y,z)
</code></pre>
<p><strong>Other demo:</strong></p>
<pre><code>from itertools import zip_longest
st1=["a","b"]
st2=["likes"]
st3=["programming","math"]
print('\n'.join([' '.join(i) for i in zip_longest(st1,st2*2,st3)]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this if you have <code>st1</code> and <code>st3</code> of same length :</p>
<pre><code>print(*[st1[i]+" "+st2[0]+" "+st3[i] for i in range(len(st1))], sep = '\n')
</code></pre>
<p><strong>OUTPUT</strong> :</p>
<pre><code>a likes programming
b likes math
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understood well:</p>
<pre><code>st1=["a","b","c"]
st2=["likes","dislikes","loves"]
st3=["programming","math","bio"]

for i in range(len(st1)):
    print(st1[i], end = " ")
    print(st2[i], end = " ")
    print(st3[i])
</code></pre>
<p>Using <code>list-comprehension</code>:</p>
<pre><code>print([st1[i] + ' ' + st2[i] + ' ' + st3[i] for i in range(len(st1))])
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>a likes programming
b dislikes math
c loves bio
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A completely dynamic solution where you can give as many arrays as you want of different sizes: </p>
<pre><code>def generate_output(*args):
  max_length = max([len(arg) for arg in args])
  for i in range(max_length):
    tmp = ""
    for arg in args:
      if len(arg) &lt; max_length:
        arg = arg + [arg[-1]] * (max_length - len(arg))
      tmp += arg[i] + " "
    print tmp

st1 = ['a','b']
st2 = ['likes']
st3 = ['programming','math','Bio']
st4 = ['and','or']
st5 = ['he']
st6 = ['loves']
st7 = ['piano','games', 'sport', 'reading']

generate_output(st1,st2,st3)
print('***')
generate_output(st1,st2,st3,st4,st5,st6,st7)
</code></pre>
<p>Output:</p>
<pre><code>a likes programming 
b likes math 
b likes Bio 
***
a likes programming and he loves piano 
b likes math or he loves games 
b likes Bio or he loves sport 
b likes Bio or he loves reading 
</code></pre>
<p>As shown in the OP example the last element of the array will be used when the computation goes past the total length of the array to join it with other longer arrays.</p>
</div>
<span class="comment-copy">If we have answered your question, could you please accept an answer/upvote as detailed in: <a href="https://stackoverflow.com/help/someone-answers">stackoverflow.com/help/someone-answers</a></span>
<span class="comment-copy">@Allan This solution will fail if for example len(st2) &gt; len(st1)</span>
<span class="comment-copy">@MykolaZotko: you are right</span>
<span class="comment-copy">@MykolaZotko you always apply <code>cycle</code> on list with lower length.</span>
<span class="comment-copy">@AkshayNevrekar You solution is made for one special case. If all lists have different lengths it will fail as well. I donâ€˜t know what OP wants. Maybe he/she needs only this special case.</span>
<span class="comment-copy">@MykolaZotko kind of True. It assumes list 2 has fewer elements than others while remaining lists are of equal length. With little details provided in question, I assumed that is the only case here.</span>
<span class="comment-copy">Would fail for: <code>st3=["programming","math","bio"]</code></span>
<span class="comment-copy">yup, I guess op would have <code>st1</code> and <code>st3</code> of same legth.</span>
<span class="comment-copy">what if the order of the 3 lists is different and that <code>st1</code> is shorter?</span>
<span class="comment-copy">Yeah I understand this part but what do you do if you have lists of size <code>4</code>, <code>2</code>, <code>4</code>?  <code>['a','b','c','d']</code> and <code>['likes','loves']</code> and <code>['programming', 'math', 'french','bio']</code></span>
<span class="comment-copy">@Allan It would always take the first item of <code>st2</code>. There would be total <code>8</code> possible combinations for your example : <code>a likes ...</code> to <code>d likes ...</code> and <code>a loves ...</code> to <code>d loves ...</code> op didn't mention all possible variations of length of the lists.</span>
<span class="comment-copy">This works only if the 3 list have the same size...</span>
