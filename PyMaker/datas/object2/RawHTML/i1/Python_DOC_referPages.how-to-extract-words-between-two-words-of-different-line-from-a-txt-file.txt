<div class="post-text" itemprop="text">
<p>I have a .txt file which contains few lines and I wanted to extract specific words from each line </p>
<p><strong>Example:<br/>
 the txt file contains</strong> </p>
<blockquote>
<p>Part A: <strong>12</strong> 10*2 = 20<br/>
  Part B: <strong>6</strong>  4*5 = 20<br/>
  Part C: <strong>5</strong> 3*10 = 30</p>
</blockquote>
<p>I wanted to extract 12 into a variable similarly 6 and 5 to different variables<br/>
(the 1st digits after the colon or the digits between two spaces after the colon) )</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use a regular expression to pick the first number from each line (after the colon and space):</p>
<pre><code>import re
with open("filename.txt") as file:   
    fileText = file.read()
x, y, z = [int(n) for n in re.findall(": (\d+)", fileText)]
print(x)
print(y)
print(z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just read the text, split, extract and store in an array like this!    </p>
<pre><code>file=open("filename.txt","r+")    
fileText=file.read()
file.close()
linesArr=fileText.split('\n')
x=linesArr[0].split(': ')[1].split(' ')[0]
y=linesArr[1].split(': ')[1].split(' ')[0]
z=linesArr[2].split(': ')[1].split(' ')[0]
print(x)
print(y)
print(z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could loop through each line of the file and <code>split</code> it by space (<code></code>), and get the third element (<code>third element &lt;=&gt; index = 2</code>), which is the number you want:</p>
<pre><code>numbers = []

with open('file.txt', 'r') as f:
  for line in f:
    numbers.append(int(line.split()[2]))

print(numbers) # ==&gt; [12, 6, 5]
</code></pre>
</div>
<span class="comment-copy">good answer.....</span>
<span class="comment-copy">can you also extract the "Part A", "Part B" ..... into variables using this method?</span>
<span class="comment-copy">Yes, it would be even simpler given that the returned values are strings: <code>a,b,c = re.findall("(.*):",fileText)</code></span>
<span class="comment-copy">cool works well...... can we able to skip the &lt;space&gt; example if it starts with "Part A :" (has space after 'A') the output to return only 'Part A' something like if there is a space before ":" (colon) so n so... else so n so</span>
<span class="comment-copy">Use "(.*) *:"  to allow any number of spaces between the last character and the colon.  You might also want to lookup the capabilities of regular expressions.  They are really useful when parsing text.</span>
<span class="comment-copy">I wanted to initialize the numbers into variables like 12 -&gt; x, 6 -&gt; y, 5-&gt; z</span>
<span class="comment-copy">Edited. Check now!</span>
<span class="comment-copy">great working.......... could you also tell get how the 1st word that is "part A" with this syntax : <code>x=linesArr[0].split(': ')[1].split(' ')[0]</code> can be obtained</span>
<span class="comment-copy">Yes. linesArr[0].split(': ') splits your line into two parts with : and space in middle. So 0th index of this array is your 'Part A'. The 1st index is the text after partA, : and space. So we split it by spaces, and detect 0th index, which is the first number in this later part of string.</span>
<span class="comment-copy">Use linesArr[0].split(': ')[0] to access part.</span>
<span class="comment-copy">I wanted to initialize the numbers into variables like 12 -&gt; x, 6 -&gt; y, 5-&gt; z</span>
