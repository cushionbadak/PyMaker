<div class="post-text" itemprop="text">
<p>As with regards to python, when it comes to a for loop, will it re-evaluate the upper bound before re-iteration?</p>
<p>Say I have the following scenario:</p>
<pre><code>def remove(self,list,element):
     for x in range(0,len(list)):
           if somecondition:
               list.pop(x)
</code></pre>
<p>Will the <code>len(list)</code> condition be re-evaluated before executing the next iteration of the <code>for</code> loop? (As done in some languages such as Objective-C I believe) As otherwise if a number of elements is popped, an out of bounds error would arise if say 1 element was removed, and the last iteration would try to access <code>list[len(list)-1]</code>.</p>
<p>I've tried to investigate this myself however the results are muddled each time. </p>
<p><strong>Edit</strong>: I believe that my question is different to the one flagged as a duplicate, as my question is regarding the condition for the loop to continue to the next iteration, it could easily ba adding an element instead of removing an element.</p>
<p>For clarification, my question asks whether or not the for loop condition will recheck the conditions posed before the next iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation about <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="noreferrer">The for statement</a> is clear about this:</p>
<blockquote>
<p>The for statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other
  iterable object:</p>
<p>for_stmt ::=  "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]</p>
<p><strong>The expression list is evaluated once</strong>; it should yield an iterable object. An iterator is created for
  the result of the expression_list. The suite is then executed once for
  each item provided by the iterator, in the order returned by the
  iterator.</p>
</blockquote>
<p>[emphasis mine]</p>
<p>So, in your case, <code>range(0,len(list))</code> will only be evaluated once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can see an <code>out of range</code> error if you try the following:</p>
<pre><code>my_list = [0,1,2,3,4,5]
for x in range(0, len(my_list)):
    print("Length of my_list:", len(my_list))
    my_list.pop(x)
</code></pre>
<p>(You should also avoid using a variable name like <code>list</code> as it will shadow Python's built in <code>list</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>i = 3

def test():
  global i ;
  i = i + 1
  return i

for x in range(0,test()):
  print( x, i )
</code></pre>
<p>Every time <code>test() is called</code>i<code>is incremented, so the loop woul be endless if</code>test()` were evaluated on each iteration.  The output however is :</p>
<pre><code>0 4
1 4
2 4
3 4
</code></pre>
<p>Clearly therefore <code>test()</code> is evaluated once.</p>
</div>
<span class="comment-copy">A quick check suggests that <code>len(some_list)</code> will not be re-evaluated if you append during the iteration. OTOH, if you loop over the list itself and append (<code>for x in some_list:</code>) then the iterator gets confused.  Mutating collections whilst iterating over them is usually avoided in Python, unless you know what you're doing.</span>
<span class="comment-copy">What investigation did you try - it is easy enough to demonstrate.</span>
<span class="comment-copy">You should read about generators in python. The for loop is just a wrapper for try, iter=next(gen) do loop, catch. This provides a deeper understanding</span>
<span class="comment-copy">I see,am I correct in assuming that this would also be true for range(0,Y)? Given Y is modified inside the loop</span>
<span class="comment-copy">You are, it would be the case for any expression. The <code>range</code> object is created once and for all, then it will be iterated on.</span>
<span class="comment-copy">It was more of a generic example rather than an actual code.</span>
<span class="comment-copy">What are you saying "Yes" to?  The answer to the question in the title is clearly "No".  This does not demonstrate the <code>range()</code> is reevaluated on each iteration - quite the contrary (because it is not).  Rather when <code>x</code> becomes 3, there are only 3 elements left in <code>my_list</code> so the pop is out of range.  The iteration is fixed at 6, the iteration is terminated by the error, not by the reevaluation of the length. Answering "yes" or "no" should be avoided - the question could easily be change to reverse the sense.  It is safer to clearly state what you are asserting.</span>
<span class="comment-copy">Thank you @clifford, good lesson.</span>
