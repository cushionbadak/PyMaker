<div class="post-text" itemprop="text">
<p>I was practicing Fibonacci sequence generating in python and following example of memoization from <a href="https://stackoverflow.com/questions/15820601/how-do-i-print-a-fibonacci-sequence-to-the-nth-number-in-python">How do I print a fibonacci sequence to the nth number in Python?</a>.</p>
<p>Then I encountered one interesting difference using return one-liner and not. For example, the example code is given below. In the first example, we do not use return one-liner and it runs very fast, however, in the second example we use return one-liner and it runs very slow.</p>
<p>Aren't they supposed to be the same?</p>
<h1>Without one-liner</h1>
<pre><code>def memoize(func):
    memo = dict()
    def decorated(n):
        if n not in memo:
            memo[n] = func(n)
        return memo[n]

    return decorated

@memoize
def fib(n):
    if n&lt;=1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print([ fib(i) for i in range(100,110)]) # runs very fast
</code></pre>
<h1>With one-liner return</h1>
<pre><code>def memoize(func):
    memo = dict()
    def decorated(n):
        return func(n) if n not in memo else memo[n]

    return decorated

@memoize
def fib(n):
    if n&lt;=1:
        return 1
    else:
        return fib(n-1) + fib(n-2)

print([ fib(i) for i in range(100,110)]) # very slow
</code></pre>
<p><strong>Question</strong><br/>
Aren't they supposed to be the same?<br/>
Why the return one-liner is much much slower than another one?<br/>
Can we write one-liner with different wordings so that it is equally fast? </p>
</div>
<div class="post-text" itemprop="text">
<p>This </p>
<pre><code>    if n not in memo:
        memo[n] = func(n)
    return memo[n]
</code></pre>
<p>Is not the same as </p>
<pre><code>    return func(n) if n not in memo else memo[n]
</code></pre>
<p>The one-liner does not modify the contents of memo. If you want to compare apples to apples then try:</p>
<pre><code>    if n not in memo:
        return func(n)
    return memo[n]
</code></pre>
<p>For optimizing your one liner, and saving the dictionary value, you should change the one-liner to: </p>
<pre><code>    return memo[n] if n in memo else memo.setdefault(n, func(n))
</code></pre>
<p>Beyond learning how memoize works, you should look into using <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">functools lru_cache's</a> memoize, which is "written in C and will be much faster than anything you can reproduce in Python."</p>
<p>Hat tip to meowgoesthedog, chepner, &amp; FHTMitchell.</p>
</div>
<span class="comment-copy">The one-liner does not modify the contents of <code>memo</code>.</span>
<span class="comment-copy">2. The second one is slower because you're never saving anything in <code>memo</code>, presumably.</span>
<span class="comment-copy">A correct one-liner would look something like <code>return memo[n] if n in memo else memo.setdefault(n, func(n))</code>. (The conditional expression prevents <code>func(n)</code> from being evaluated if the lookup would, in fact, succeed.)</span>
<span class="comment-copy">If you care about lines of code I can compress your entire <code>memorize</code> function to one line: <code>from functools import lru_cache as memorize</code>. This is written in c and will be much faster than anything you can reproduce in python. <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.lru_cache</a></span>
<span class="comment-copy">@astro123 the documentation says you must use <code>@lru_cache(maxsize=&lt;integer value or None&gt;)</code> instead of simply <code>@lru_cache</code>.</span>
<span class="comment-copy">lol, instead of showing how to optimize the one-liner properly, you show how to de-optimize the 3-liner.</span>
<span class="comment-copy">@Barmar This is python. Aggressively lowering line count is discouraged.</span>
<span class="comment-copy">@FHTMitchell And the point of writing a <code>memoize</code> function is that you write it once and forget about it -- there's nothing gained from writing it tersely.</span>
