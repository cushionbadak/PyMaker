<div class="post-text" itemprop="text">
<p>I have a custom 'loading' image which I need to be able to start/stop a rotation animation while some action is occurring. I'm looking for code that will show me how to do this but I can't find anything specific to rotation in PyQt. I already have the following code which causes the image to rotate at the click of a button: </p>
<pre><code>import os
import sys

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

class myApplication(QWidget):

def __init__(self, parent=None):
    super(myApplication, self).__init__(parent)

    self.imgPath = os.path.join('path/to/image','image.svg')
    pixmap = QPixmap(self.imgPath)
    diag = (pixmap.width()**2 + pixmap.height()**2)**0.5

    self.label = QLabel()
    self.label.setMinimumSize(diag, diag)
    self.label.setAlignment(Qt.AlignCenter)
    self.label.setPixmap(pixmap)

    #---- Prepare a Layout ----

    grid = QGridLayout()

    button = QPushButton('Rotate 15 degrees')
    button.clicked.connect(self.rotate_pixmap)

    grid.addWidget(self.label, 0, 0)
    grid.addWidget(button, 1, 0)

    self.setLayout(grid)

    self.rotation = 0

def rotate_pixmap(self):

    pixmap = QPixmap(self.imgPath)
    self.rotation += 15
    transform = QTransform().rotate(self.rotation)
    pixmap = pixmap.transformed(transform, Qt.SmoothTransformation)

    #---- update label ----

    self.label.setPixmap(pixmap)

if __name__ == '__main__':

app = QApplication(sys.argv)

instance = myApplication()  
instance.show()    

sys.exit(app.exec_())
</code></pre>
<p>I found <a href="https://stackoverflow.com/questions/50286919/qpropertyanimation-for-rotating-qwidget">this C++ code</a> which shows how to create a rotation animation using <code>QVariantAnimation</code> and <code>QTransform</code>:</p>
<pre><code>class RotateMe : public QLabel {

    Q_OBJECT
public:
    explicit RotateMe(QWidget* parent = Q_NULLPTR) :
        QLabel(parent),
        pixmap(100, 100),
        animation(new QVariantAnimation )
    {
        resize(200, 200);
        pixmap.fill(Qt::red);

        animation-&gt;setDuration(10000);
        animation-&gt;setStartValue(0.0f);
        animation-&gt;setEndValue(90.0f);
        connect(animation, &amp;QVariantAnimation::valueChanged, [=](const QVariant &amp;value){
            qDebug()&lt;&lt;value;
            QTransform t;
            t.rotate(value.toReal());
            setPixmap(pixmap.transformed(t));
        });
        animation-&gt;start();
    }
private:
    QPixmap             pixmap;
    QVariantAnimation  *animation;
};
</code></pre>
<p>How can I re-write this in python? I can't find any examples which show how <code>QVariantAnimation</code> is used in PyQT. </p>
</div>
<div class="post-text" itemprop="text">
<p>The logic is similar as I show below:</p>
<pre><code>import os
from PyQt5 import QtCore, QtGui, QtWidgets

class RotateMe(QtWidgets.QLabel):
    def __init__(self, *args, **kwargs):
        super(RotateMe, self).__init__(*args, **kwargs)
        self._pixmap = QtGui.QPixmap()
        self._animation = QtCore.QVariantAnimation(
            self,
            startValue=0.0,
            endValue=360.0,
            duration=1000,
            valueChanged=self.on_valueChanged
        )

    def set_pixmap(self, pixmap):
        self._pixmap = pixmap
        self.setPixmap(self._pixmap)

    def start_animation(self):
        if self._animation.state() != QtCore.QAbstractAnimation.Running:
            self._animation.start()

    @QtCore.pyqtSlot(QtCore.QVariant)
    def on_valueChanged(self, value):
        t = QtGui.QTransform()
        t.rotate(value)
        self.setPixmap(self._pixmap.transformed(t))

class Widget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(Widget, self).__init__(parent)
        label = RotateMe(alignment=QtCore.Qt.AlignCenter)
        img_path = os.path.join('path/to/image','image.svg')
        label.set_pixmap(QtGui.QPixmap(img_path))
        button = QtWidgets.QPushButton('Rotate')

        button.clicked.connect(label.start_animation)

        lay = QtWidgets.QVBoxLayout(self)
        lay.addWidget(label)
        lay.addWidget(button)


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = Widget()
    w.show()
    sys.exit(app.exec_())
</code></pre>
</div>
<span class="comment-copy">Perfect. Thanks very much!</span>
