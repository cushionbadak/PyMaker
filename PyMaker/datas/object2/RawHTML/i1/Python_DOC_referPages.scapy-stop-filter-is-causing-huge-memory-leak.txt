<div class="post-text" itemprop="text">
<p>I have an app which launches virtual hosts. I noticed that memory is building up quickly overtime. After many many trials of trying to find the cause, it turns out that the cause is using <code>stop_filter</code> in <code>scapy</code>.</p>
<p>The following simplified code is runnable, you can just copy/paste:</p>
<pre><code>from scapy.all import *
import threading
from time import sleep

def stopFilter(packet):
    if ICMP in packet:
        if packet[1].dst == '192.168.0.70':
            print('packet found')
            return True
def host():
    while True:
        sniff(iface="Intel(R) PRO/1000 PT Dual Port Server Adapter #2", timeout=2, stop_filter=stopFilter, store=0)
        sleep(2)

for i in range(200):
    print(i)
    t = threading.Thread(target=host)
    t.start()
    sleep(0.1)
</code></pre>
<p>Of course, you need to change the adapter and the IP. Also, use <code>ping -t</code> to IP while running the code so the <code>stopFilter()</code> works. After only a few moments you can see the memory is building up. <a href="https://stackoverflow.com/questions/41553309/libpcap-pcap-breakloop-causing-memory-leak">I think similar issue in C with libpcap.</a></p>
<p><strong><em>Any idea how to solve this?</em></strong></p>
<p><strong>Environment:</strong> Python 3.6.0, Win 7, Scapy 2.4.0 (same issue in Scapy 2.4.2)</p>
</div>
<div class="post-text" itemprop="text">
<p>I fixed the issue myself. Simply go to <code>~Lib\site-packages\scapy\sendrecv.py</code> and under</p>
<p><code>if stop_filter and stop_filter(p):</code> replace: </p>
<pre><code>sniff_sockets = []
break
</code></pre>
<p>with:</p>
<pre><code>for s in sniff_sockets:
     s.close()
del sniff_sockets
return   
</code></pre>
<p>and now the memory problem is gone.</p>
<p><strong>Update:</strong></p>
<p>The above mentioned solution, only helps in 2.4.0 (no memory leaks), but doesn't help in 2.4.1 nor 2.4.2</p>
</div>
