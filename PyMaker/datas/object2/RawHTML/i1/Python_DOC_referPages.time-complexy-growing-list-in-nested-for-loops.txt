<div class="post-text" itemprop="text">
<p>In this code:     </p>
<pre><code>test = [1] * 10
result = []
for i in test:
    if not result:
        result = [i,i,i]
    else:
        new_result = []
        for j in result:
            for k in range(3):
                new_result.append(i + k)
        result = new_result
</code></pre>
<p>The outer loop runs n times.
The inner loop, if I'm not wrong, runs 3^n</p>
<p>The Big O of this algorithm is 3^n * n. Am I right? </p>
</div>
<div class="post-text" itemprop="text">
<p>It's just <code>3^n</code>. if you try this after your execution:</p>
<pre><code>print(len(result)) #result: 59049
print(3**len(test)) #result: 59049
</code></pre>
<p>So yes it grows exponentially relative to the size of <code>n</code> as the output of <code>result</code> will grow as follows by each iteration:</p>
<pre><code>3
9
27
81
243
729
2187
6561
19683
59049
</code></pre>
<p>I used <code>timeit</code> to print out the execution time as <code>n</code> grows</p>
<pre><code>n = 10 # Time:  0.020012678000000002
n = 11 # Time:  0.057932331000000004
n = 12 # Time:  0.15807880600000002
</code></pre>
<p>You see where it's going in terms of time. </p>
<p>here is the code I used:</p>
<pre><code>import timeit
test = [1] * 12
result = []
start = timeit.default_timer()

print(test)
for i in test:
    if not result:
        result = [i,i,i]
        print(result)
    else:
        new_result = []
        print(len(result))
        for j in result:
            for k in range(3):
                new_result.append(i + k)
        result = new_result

stop = timeit.default_timer()

print('Time: ', stop - start) 
</code></pre>
</div>
<span class="comment-copy">It's just <code>O(3^n)</code>. As sum: <code>1 + 3 + 3^2 + ... + 3^n = O(3^n)</code>.</span>
