<div class="post-text" itemprop="text">
<p>So I have an application that uses MongoDB as a database. The application makes use of a few collections.</p>
<p>When and how should I go about defining the "schema" of the database which includes setting up all the collections as well as indexes needed?</p>
<p>AFAIK, you are unable to define empty collections in MongoDB (correct me if I am wrong, if I can do this it will basically answer this question). Should I insert a dummy value for each collection and use that to setup all my indexes? </p>
<p>What is the best practice for this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You don't create collections in MongoDB.<br/>
You just start using them immediately whether they “exist” or not.</p>
<p>Now to defining the “schema”. As I said, you just start using a collection, so, if you need to ensure an index, just go ahead and do this. No collection creation. Any collection will effectively be created when you first modify it (creating an index counts).</p>
<pre class="lang-js prettyprint-override"><code>&gt; db.no_such_collection.getIndices()
[ ]
&gt; db.no_such_collection.ensureIndex({whatever: 1})
&gt; db.no_such_collection.getIndices()
[
        {
                "v" : 1,
                "key" : {
                        "_id" : 1
                },
                "ns" : "test.no_such_collection",
                "name" : "_id_"
        },
        {
                "v" : 1,
                "key" : {
                        "whatever" : 1
                },
                "ns" : "test.no_such_collection",
                "name" : "whatever_1"
        }
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2> Create empty collection </h2>
<p>First of all this is how you can create empty collection in MongoDB using build in interactive terminal, so you can do it,</p>
<pre><code>db.createCollection('someName'); // create empty collection
</code></pre>
<p>just you don't have to because as someone said before they will get created in real time once you start interact with database. </p>
<h2>MongoDB is schema-less end of story but ...</h2>
<p>You could create your own class that interacts with mongo Database. In that class you could define rules that have to fulfilled before it can insert data to mongo collection other wise throw custom exception.</p>
<p>Or if you using node.js server-side you could install <strong>mongoose</strong> node package which allows you to interact with database in OOP style (Why bother to reinvent the wheel, right?). </p>
<blockquote>
<p>Mongoose provides a straight-forward, schema-based solution to model
  your application data. It includes built-in type casting, validation,
  query building, business logic hooks and more, out of the box.</p>
</blockquote>
<p><strong>docs:</strong> mongoose npm installation and basic usage
<a href="https://www.npmjs.com/package/mongoose" rel="noreferrer">https://www.npmjs.com/package/mongoose</a>
mongoose full documentation <a href="http://mongoosejs.com" rel="noreferrer">http://mongoosejs.com</a></p>
<h2>Mongoose use example (defining schema and inserting data)</h2>
<pre><code>var personSchema = new Schema({
    name: { type: String, default: 'anonymous' },
    age: { type: Number, min: 18, index: true },
    bio: { type: String, match: /[a-zA-Z ]/ },
    date: { type: Date, default: Date.now },
});

var personModel = mongoose.model('Person', personSchema);
var comment1 = new personModel({
    name: 'Witkor',
    age: '29',
    bio: 'Description',
});

comment1.save(function (err, comment) {
    if (err) console.log(err);
    else console.log('fallowing comment was saved:', comment);
});
</code></pre>
<h2>Bla bla bla...</h2>
<p>Being able to set schema along with restriction in our code desn't change the fact that MongoDB itself is schema-less which in some scenarios is actuality an advantage. This way if you ever decide to make changes to schema but you don't bother about backward compatibility just edit schema in your script and you are done. This is the basic idea behind the mongodb to be able to store different sets of data in each document with in same collection. However some restriction in code base logic are always desirable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have already been taught that MongoDB is schemaless. However, in practice, we have a kind of "schema", and that is the object space of the object, whose relations a MongoDB database represents. With the ceveat that Ruby is my go-to language, and that I make no claims about exhaustiveness of this answer, I recommend to try two pieces of software:</p>
<pre><code>1. ActiveRecord (part of Rails)
2. Mongoid (standalone MongoDB "schema", or rather, object persistence system in Ruby)
</code></pre>
<p>Expect a learning curve, though. I hope that others will point you to solutions in other great languages outside my expertise, such as Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of version 3.2, mongodb now provides schema validation at the collection  level:</p>
<p><a href="https://docs.mongodb.com/manual/core/schema-validation/" rel="nofollow noreferrer">https://docs.mongodb.com/manual/core/schema-validation/</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>1.Install mongoose: 
        npm install mongoose

2. Set-up connection string and call-backs

 // getting-started.js 

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/test');


//call-backs

var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

db.once('open', function() {
  // we're connected!
});

3. Write your schema

var kittySchema = new mongoose.Schema({
  name: String
});

4. Model the schema

var Kitten = mongoose.model('Kitten', kittySchema);

5. Create a document

var silence = new Kitten({ name: 'Tom' });

console.log(silence.name); // Prints 'Tom' to console

// NOTE: methods must be added to the schema before compiling it with mongoose.model()
kittySchema.methods.speak = function () {
  var greeting = this.name
    ? "Meow name is " + this.name
    : "I don't have a name";
  console.log(greeting);
}

    enter code here

var Kitten = mongoose.model('Kitten', kittySchema);
Functions added to the methods property of a schema get compiled into the Model prototype and exposed on each document instance:

var fluffy = new Kitten({ name: 'fluffy' });
fluffy.speak(); // "Meow name is fluffy"
</code></pre>
</div>
<span class="comment-copy">The idea of MongoDB is that is it completely schemaless. Every record can have completely different data in it.</span>
<span class="comment-copy">1) You can create a empty collection, almost every driver + mongo shell provides that command. (2) You can create the indexes without the collection being created, the time you create the index, the collection is also created</span>
<span class="comment-copy">@AbhishekKumar Thanks! 2) was especially helpful, didn't realize that. If you would like to convert your comment into an answer, I'll upvote/accept it. :)</span>
<span class="comment-copy">@TerryChia Leave it :)</span>
<span class="comment-copy">Thanks! Accepting this since it's basically what @AbhishekKumar mentioned in the comments and what I am going with. :)</span>
<span class="comment-copy">@TerryChia Yeah, I was going to remove my answer after noticed that this was already amwsered in comments, but since that author didn't want to post an answer, I've decided to leave it here just for future readers who don't read comments.</span>
<span class="comment-copy">Those attributes are specific to languages and not all provide those abilities by default, since no language is specified and the question talks more about in general I would consider this answer a bit odd.</span>
<span class="comment-copy">It is incomplete. Notice my sentence "With the caveat..." The answer by @kirelagin is more direct. This is a proffesional deformation of mine, since in my application field, I am writing a zz structure domain model riding on MongoDB. Feel free to provide more alternatives.</span>
<span class="comment-copy">Sure Shanteshwar. I am new here and will follow those guidelines. :)</span>
