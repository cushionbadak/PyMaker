<div class="post-text" itemprop="text">
<p>Is this expected behaviour? I thought to raise an issue with Spark, but this seems such a basic functionality, that it's hard to imagine that there's a bug here. What am I missing?</p>
<p><strong>Python</strong></p>
<pre class="lang-python prettyprint-override"><code>import numpy as np

&gt;&gt;&gt; np.nan &lt; 0.0
False

&gt;&gt;&gt; np.nan &gt; 0.0
False
</code></pre>
<p><strong>PySpark</strong></p>
<pre class="lang-python prettyprint-override"><code>from pyspark.sql.functions import col

df = spark.createDataFrame([(np.nan, 0.0),(0.0, np.nan)])
df.show()
#+---+---+
#| _1| _2|
#+---+---+
#|NaN|0.0|
#|0.0|NaN|
#+---+---+

df.printSchema()
#root
# |-- _1: double (nullable = true)
# |-- _2: double (nullable = true)

df.select(col("_1")&gt; col("_2")).show()
#+---------+
#|(_1 &gt; _2)|
#+---------+
#|     true|
#|    false|
#+---------+
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That is both expected and documented behavior. To quote <a href="https://spark.apache.org/docs/latest/sql-reference.html#nan-semantics" rel="nofollow noreferrer">NaN Semantics</a> section of the official <a href="https://spark.apache.org/docs/latest/sql-programming-guide.html" rel="nofollow noreferrer">Spark SQL Guide</a> (emphasis mine):</p>
<blockquote>
<p>There is specially handling for not-a-number (NaN) when dealing with float or double types that does not exactly match standard floating point semantics. Specifically:</p>
<ul>
<li>NaN = NaN returns true.</li>
<li>In aggregations, all NaN values are grouped together.</li>
<li>NaN is treated as a normal value in join keys.</li>
<li><strong>NaN values go last when in ascending order, larger than any other numeric value</strong>.</li>
</ul>
</blockquote>
<p>AdAs you see ordering behavior is not the only difference, compared to Python NaN. In particular Spark considers NaN's equal:</p>
<pre><code>spark.sql("""
    WITH table AS (SELECT CAST('NaN' AS float) AS x, cast('NaN' AS float) AS y) 
    SELECT x = y, x != y FROM table
""").show()
</code></pre>
<pre class="lang-none prettyprint-override"><code>+-------+-------------+
|(x = y)|(NOT (x = y))|
+-------+-------------+
|   true|        false|
+-------+-------------+
</code></pre>
<p>while plain Python</p>
<pre><code>float("NaN") == float("NaN"), float("NaN") != float("NaN")
</code></pre>
<pre class="lang-none prettyprint-override"><code>(False, True)
</code></pre>
<p>and NumPy</p>
<pre><code>np.nan == np.nan, np.nan != np.nan
</code></pre>
<pre class="lang-none prettyprint-override"><code>(False, True)
</code></pre>
<p>don't.</p>
<p>You can check <a href="https://github.com/apache/spark/blob/7043aee1ba95e92e1cbd0ebafcc5b09b69ee3082/python/pyspark/sql/column.py#L180-L229" rel="nofollow noreferrer"><code>eqNullSafe</code> docstring</a> for additional examples.</p>
<p>So to get desired result you'll have to explicitly check for NaN's</p>
<pre><code>from pyspark.sql.functions import col, isnan, when

when(isnan("_1") | isnan("_2"), False).otherwise(col("_1") &gt; col("_2"))
</code></pre>
</div>
<span class="comment-copy">It seems likely that they're using something like <code>Double.compare</code> to make sorting work in the presence of NaNs, resulting in the <code>true</code> value you see, but I haven't found any documentation on the matter.</span>
<span class="comment-copy"><code>np.nan</code> and <code>float("NaN")</code> - aren't they the same thing (even they aren't technically equal to each other)?</span>
