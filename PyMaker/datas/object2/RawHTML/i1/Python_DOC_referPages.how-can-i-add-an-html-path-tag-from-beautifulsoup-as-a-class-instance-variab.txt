<div class="post-text" itemprop="text">
<p>I'm trying to use BeautifulSoup to process html data pulled from websites online. I've created a class 'Websites', with a couple of functions that parse the html scripts based on instance variables like header, class, etc. for my target bit of text. e.g. </p>
<pre><code>class Websites:

    def __init__(self, url, header, class_):
        self.url = url
        self.header = header
        self.class_ = class_

    def html(self):
        url = self.url
        webpage = urlopen(url)
        page_html = webpage.read()
        webpage.close()
        page_soup = bs(page_html, 'html.parser')
        return page_soup
</code></pre>
<p>It's been simple to convert those variables (header, class) to instance variables in the class, but there is one variable that I'm struggling to convert into a class instance variable. I believe in BeautifulSoup lingo it's referred to as the 'tag'. If I call the html function shown above on an instance of the class, I get a block of html text I can save as a variable (page_soup), to which I can add a tag, e.g. like this:</p>
<pre><code>page_soup.div.h1.p
</code></pre>
<p>This specifies the exact part of the html script that I want to access. Is there any way I could modify the class <strong>init</strong> function displayed above so that it could take an input, e.g.:</p>
<pre><code>amazon = Websites(url = 'Amazon.co.uk', tag = '.div.h1.p')
</code></pre>
<p>and use it as an instance variable in a class method, as self.tag?</p>
</div>
<div class="post-text" itemprop="text">
<p>Accessing a tag in that way is the same as using BeautifulSoup's <code>find()</code> function, which returns the first matching tag. So you could write your own function to emulate this approach as follows:</p>
<pre><code>from bs4 import BeautifulSoup

def get_tag(tag, text_attr):
    for attr in text_attr.split('.'):
        if attr:
            tag = tag.find(attr)

    return tag


html = """&lt;html&gt;&lt;h2&gt;test1&lt;/h2&gt;&lt;div&gt;&lt;h1&gt;test2&lt;p&gt;display this&lt;/p&gt;&lt;/h1&gt;&lt;/div&gt;&lt;/html&gt;"""
soup = BeautifulSoup(html, "html.parser")

print(soup.div.h1.p)
print(get_tag(soup, '.div.h1.p'))
</code></pre>
<p>This would display:</p>
<pre class="lang-html prettyprint-override"><code>&lt;p&gt;display this&lt;/p&gt;
&lt;p&gt;display this&lt;/p&gt;
</code></pre>
<p>An alternative approach would be to use the <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors" rel="nofollow noreferrer"><code>.select()</code></a> function, which returns a list of matching tags:</p>
<pre><code>print(soup.select('div &gt; h1 &gt; p')[0])    
</code></pre>
</div>
