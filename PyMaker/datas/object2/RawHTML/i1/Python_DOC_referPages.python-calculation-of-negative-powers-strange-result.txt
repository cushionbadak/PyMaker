<div class="post-text" itemprop="text">
<p>Does anyone know why the output of the bellow calculations returns different results, as it should be the same. </p>
<pre><code>(-0.99)**(-0.99)
</code></pre>
<p>returns <code>(-1.0095011228760993-0.03172485085856595j)</code></p>
<p>and </p>
<pre><code>-0.99**-0.99
</code></pre>
<p>returns <code>-1.0099994966583417</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, so let's assemble the partial answers that are elsewhere, and also provide more complete context.</p>
<p>First of all, the premise that these should be equivalent expressions is incorrect.  <code>-x**y</code> is <em>not</em> <code>(-x)**y</code> but rather is <code>-(x**y)</code>.</p>
<p>Admittedly this is odd.  If you write <code>-2</code> on paper, you likely think of the <code>-</code> as part of the number, rather than as an operator whose precedence could be questioned.  And yet if you write -2<sup>2</sup> it is standard to say this is -4, while (-2)<sup>2</sup> is of course 4.</p>
<p>Here is an article on the subject: <a href="http://mathforum.org/library/drmath/view/61633.html" rel="nofollow noreferrer">http://mathforum.org/library/drmath/view/61633.html</a></p>
<p>Anyway, that's the short answer as to why they're not the same expression.  Given that, it's just a matter of understanding each expression.</p>
<pre><code>-.99**-.99
</code></pre>
<p>could be written</p>
<pre><code>-1 * (.99**-.99)
-1 / (.99**.99)
</code></pre>
<p>The denominator can then be read "the hundredth root of .99 to the 99th power", and then it's just a matter of running through a pain-in-the-arse calculation.</p>
<p>On the other hand,</p>
<pre><code>(-0.99)**(-0.99)
</code></pre>
<p>can also be simplified, but eventually we're going to take an even root of a negative number; so the answer must be a complex number.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>
(-0.99)**(-0.99) yields a complex number, while -0.99**-0.99 yields a float.

</code></pre>
</div>
<span class="comment-copy">Due to the order of operations, the exponentiation is done before the first minus sign. Therefore the second calculation has an implied parenthesis in a different place (around everything except the first minus sign) than the explicit parenthesis of the first calculation (around  <code>-0.99</code>). This particular order of operations is the mathematical standard and is used in Python.</span>
<span class="comment-copy">For more details on Python's order of operations (also called operator precedence), <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">see here</a>. Note that exponentiation is lower in the table than "negative," so exponentiation is done before negation.</span>
<span class="comment-copy">You only restated that the two results are different. The questioner already knows that. The question is <i>why</i> those results are different.</span>
<span class="comment-copy">For that I would point to your comment to the original question. :) Just wanted to add that the output types are different, too.</span>
