<div class="post-text" itemprop="text">
<p>I am working with Tkinter to make a user interface.
I do not understand the difference between "master" and "root".</p>
<p>I found some information here: <a href="https://docs.python.org/2/library/tkinter.html" rel="nofollow noreferrer">Python interface to Tcl/Tk¶</a></p>
<blockquote>
<p>To get at the toplevel window that contains a given widget, you can often just refer to the widget’s master. Of course if the widget has been packed inside of a frame, the master won’t represent a toplevel window. To get at the toplevel window that contains an arbitrary widget, you can call the _root() method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality.</p>
</blockquote>
<p>But I still do not understand. So I made some code, but I do not see any difference in the results obtained (***).</p>
<p>USING "MASTER"</p>
<pre><code>from tkinter import *
master = Tk()   ***
Canvas = Canvas(master)   ***
Canvas.pack()

def create_circle(x, y, r, canvas): 
    x0 = x - r
    y0 = y - r
    x1 = x + r
    y1 = y + r
    return canvas.create_oval(x0, y0, x1, y1)

create_circle(100, 100, 20, Canvas)
master.mainloop()   ***
</code></pre>
<p>USING "ROOT"</p>
<pre><code>from tkinter import *
root = Tk()   ***
Canvas = Canvas(root)   ***
Canvas.pack()

def create_circle(x, y, r, canvas): 
    x0 = x - r
    y0 = y - r
    x1 = x + r
    y1 = y + r
    return canvas.create_oval(x0, y0, x1, y1)

create_circle(100, 100, 20, Canvas)
root.mainloop()   ***
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am working with Tkinter to make a user interface. I do not understand the difference between "master" and "root".</p>
</blockquote>
<p>There is no difference. It's just a name, you can call it whatever you want. </p>
<p>Since tkinter widgets exist in a tree which has a single widget as its root, <code>root</code> is the official name of this widget. Because of that, <code>root</code> has become the most common name for the variable used to access this widget. However, you are free to give it any name you want, because the name is only a convenience for you. Tkinter doesn't care what you call it.</p>
<p>Tkinter documentation also sometimes refers to masters and slaves, and sometimes parents and children. With the exception of the root window, all widgets have a master (or parent). This terminology is used mostly in the context of the geometry managers <code>pack</code>, <code>place</code>, and <code>grid</code> as a way to describe how to put one widget inside another. </p>
</div>
<div class="post-text" itemprop="text">
<p>I would just be carefull to use master, see below ;)</p>
<p>Here the entire story....<a href="https://mail.python.org/pipermail/tutor/2010-June/076444.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/tutor/2010-June/076444.html</a></p>
<pre><code>from tkinter import *
root = Tk()

Canvas = Canvas(root)

print(dir(Canvas.master))

Canvas.pack()

def create_circle(x, y, r, canvas): 
     x0 = x - r
     y0 = y - r
     x1 = x + r
     y1 = y + r
     return canvas.create_oval(x0, y0, x1, y1)

create_circle(100, 100, 20, Canvas)

root.mainloop()
</code></pre>
</div>
<span class="comment-copy"><code>master</code> seems to be just the parent of the current widget, while <code>root</code> is the root widget. If your current widget is deep in the three, master and root will be different.</span>
<span class="comment-copy">Ah, in your code you are using the variable name <code>master</code> to refer to the root widget, hence the confusion. Every widget has a <code>master</code> property that will give you its parent. When you have one deep in the tree, it's parent will not be the root widget.</span>
