<div class="post-text" itemprop="text">
<p>I have the following model for my students to upload their tasks to an application that I am creating, but I have a problem, I need to pass an instance of the model between views, but since it is not serializable, I can not save it in a session attribute. Keep in mind that in one view I create the object without saving it in the database and in the other I perform operations with the object and finally I save it. Any idea how I can do this?</p>
<pre><code>from gdstorage.storage import GoogleDriveStorage

gd_storage = GoogleDriveStorage()

class Homework(models.Model):
    code = models.AutoField(primary_key=True)
    student = models.ForeignKey('Student', on_delete=models.PROTECT)
    title = models.CharField(unique=True, max_length=100)
    attached_file = models.FileField(upload_to='files/homeworks/', validators=[validate_file_size], storage=gd_storage)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @dirkgroten says, you can add an additional field to your model that is called status and by default assign it the value of temporary. In addition to this you can review the <a href="https://github.com/torre76/django-googledrive-storage/blob/master/gdstorage/storage.py" rel="nofollow noreferrer">package code</a>.</p>
<p>Finally to delete a file in Google Drive as a storage backend is very simple. Use the following</p>
<pre><code>gd_storage.delete(name_file)
</code></pre>
<p>So change in the code of @dirkgroten</p>
<pre><code>from django.core.files.storage import default_storage

@receiver (post_delete, sender=Homework)
def remove_file (sender, instance, **kwargs):
    if instance.attached_file is not None:
        gd_storage.delete(instance.attached_file.name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only way to keep "state" between views is to save to the database (or other permanent storage). That's what the session does for you. </p>
<p>If you can't serialise to save in the session, then you have no alternative but to save a temporary object to the database. You could mark it as temporary and add a timestamp. And in the next view mark it as committed. And if needed clean up once in a while, removing old temporary objects.</p>
<p>To remove the associated file with old temporary objects, you can add a signal handler for the <code>post_delete</code> signal:</p>
<pre><code>from django.core.files.storage import default_storage

@receiver(post_delete, sender=Homework)
def remove_file(sender, instance, **kwargs)
    path = instance.attached_file.name
    if path:
        default_storage.delete(path)
</code></pre>
</div>
<span class="comment-copy">They saved my week. I had been trying something similar for days without getting anything. Thanks you.</span>
<span class="comment-copy">I thought about that solution but that would automatically create a file in Google Drive Storage and I have not found a way to delete the files saved there, which would compromise the storage space.</span>
<span class="comment-copy">I don't understand why you can't delete. It's true that <a href="https://docs.djangoproject.com/en/2.1/ref/models/fields/#django.db.models.fields.files.FieldFile.delete" rel="nofollow noreferrer">django doesn't automatically delete associated files when the model is deleted</a> but nothing stops you from doing it.</span>
<span class="comment-copy">I have tried to delete one but the file is still there. This is what to save the files. <a href="https://django-googledrive-storage.readthedocs.io/en/latest/" rel="nofollow noreferrer">Django Google Drive Storage</a> Although it has given me an idea to create a model of temporary homeworks where the storage site is different and then create them in the other model by storing in google drive</span>
<span class="comment-copy">Ah Google Drive Storage, not Google Cloud Storage. I have no experience with Google Drive as a storage backend so Iâ€™d suggest you dive in the source code of your package to see how it deletes files.</span>
<span class="comment-copy">Thanks for your approach, I'll use it by adding what they indicate in the other answer.</span>
