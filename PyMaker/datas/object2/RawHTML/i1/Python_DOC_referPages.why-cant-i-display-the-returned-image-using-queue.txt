<div class="post-text" itemprop="text">
<p>I am trying to capture a frame from the webcam with the help of a thread, and then returning it through a queue. When I run the code, I get the return type as a np.array but when I display it I get a callback warning and not output.</p>
<pre><code>import cv2
cap = cv2.VideoCapture(0)
import queue
import threading

def capture(out_queue):
  while(True):
     frame = cap.read()[1]
     cv2.imshow('window', frame)
     if cv2.waitKey(1) &amp; 0xFF == ord('q'):
        out_queue.put(frame)
        break

my_queue_1 = queue.Queue()
t1 = threading.Thread(target=capture, args=(my_queue_1,))
t1.start()
t1.join()
ret1 = my_queue_1.get()
print(type(ret1))
cv2.imshow('returned', ret1)
cv2.destroyAllWindows()
cap.release()
</code></pre>
<p>I get the type as class 'numpy.ndarray' &amp; 
[ WARN:0] terminating async callback</p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: forgot to include cv2.waitkey(). problem solved</p>
</div>
<span class="comment-copy">could you add the stacktrace please</span>
<span class="comment-copy">I'm not sure I can verbalise the situation exactly, but my experience is that OpenCV <i>"is picky about having multiple threads accessing the screen and keyboard"</i>. I think <code>cv2.imshow()</code> is not thread-safe, so I have tended to do all display and keyboard interactions from a single thread. Hopefully someone else will nail down the limitations (or correct me wholesale) so we all learn.</span>
