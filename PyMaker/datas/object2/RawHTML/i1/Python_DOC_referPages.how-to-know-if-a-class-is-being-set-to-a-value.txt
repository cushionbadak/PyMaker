<div class="post-text" itemprop="text">
<p>So, I have made a little program that basically does this:</p>
<pre><code>class Prop(object):
    def __init__(self, name, val):
        self.Name = name;
        self.Value = val;

class Obj(object):
    def __init__(self, prop):
        self._props = [prop];

    def __getattribute__(self, name):
        if name != "_props":
            f = None;

            for p in self._props:
                if p.Name == name:
                    f = p;

            return f;
        else:
            return object.__getattribute__(self, name);

cl = Prop("Name", "foo");
o = Obj(cl);

print(o.Name.Value); # by changing "f = p;" to "f = p[1]", I would simply do o.Name instead of o.Name.Value
</code></pre>
<p>This would return the name of the object, with no problems.</p>
<p>The problem comes when I want to set the value, but witheout actually doing .Value</p>
<p>The reason why I want to achieve that are many, such as making it simpler to edit objects, etc.</p>
<p>So, if I did something like</p>
<pre><code>o.Name = "boo";
</code></pre>
<p>I wouldn't be able to, since I would have to do something like</p>
<pre><code>o.Name.Value = "boo"; 
</code></pre>
<p>Even if I changed this piece</p>
<pre><code>            for p in self._props:
                if p.Name == name:
                    f = p;
</code></pre>
<p>to something like</p>
<pre><code>            for p in self._props:
                if p.Name == name:
                    f = p.Value;
</code></pre>
<p>I still wouldn't be able to do things like</p>
<pre><code>o.Name = "";
</code></pre>
<p>Is there any <strong>underscore</strong> (double _) function I can use for this? Or is there any solution?</p>
<p>If so, how would I implement it to this system?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <code>__setattr__</code>:</p>
<pre><code>class Obj(object):
    ...

    def __setattr__(self, name, value):
        if name != "_props":
            for p in self._props:
                if p.Name == name:
                    p.Value = value
        else:
            object.__setattr__(self, name, value)            

cl = Prop("Name", "foo");
o = Obj(cl);
print(o.Name.Value); # foo
o.Name = "boo"
print(o.Name.Value); # boo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of ways for you to do this.</p>
<p>1) Define this relationship on the <code>__init__</code> method of <code>Obj</code>:</p>
<pre><code>class Obj(object):

    def __init__(self, prop):
        self._props = [prop]
        self.Name = prop.Name
</code></pre>
<p>2) Create a method called <code>Name</code> for <code>Obj</code> using a property decorator. This allows you to access the return value of a method as if it were a property:</p>
<pre><code>class Obj(object):

    @property
    def Name(self): 
        return self._props[0].Name
</code></pre>
<p>3) Turn <code>Obj</code> into a subclass of <code>Prop</code>:</p>
<pre><code>class Obj(Prop):

    def __init__(self, prop, name, val):
        self._props = [prop];
        super().__init__(name, val)
</code></pre>
<p>Number 3) is probably the best way to work with such an interaction between classes without losing your sanity, but it also means that the <code>prop</code> argument is probably useless (or at least confusing in this case), and probably means that you'll need to change the most code (where this logic is affected).</p>
</div>
<span class="comment-copy">Python isn't C/C++, so you don't need to end statements with a <code>;</code>. In English, what <i>is</i> your code basically doingâ€”and what doesn't it do that you would like? I ask because this seems like it might be an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>.</span>
