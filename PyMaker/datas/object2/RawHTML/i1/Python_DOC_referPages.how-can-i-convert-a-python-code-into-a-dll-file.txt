<div class="post-text" itemprop="text">
<p>Well, I have a Python package. I need to compile it as dll before distribute it in a way easily importable. <strong>How?</strong> You may suggest that <code>*.pyc</code>. But I read somewhere any <code>*.pyc</code> can be easily decompiled!</p>
<p><strong>Update:</strong>
Follow these:<br/>
1) I wrote a python package<br/>
2) want to distribute it<br/>
3) do NOT want distribute the source<br/>
4) *.pyc is decompilable &gt;&gt; source can be extracted!<br/>
5) dll is standard  </p>
</div>
<div class="post-text" itemprop="text">
<p>Write everything you want to hide in Cython, and compile it to <code>pyd</code>. That's as close as you can get to making compiled python code. </p>
<p>Also, dll is not a standard, not in Python world. They're not portable, either.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://www.py2exe.org/" rel="noreferrer">py2exe.org</a> to convert python scripts into windows executables. Granted this will only work on windows, but it's better then nothing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can <a href="http://docs.python.org/extending/" rel="nofollow noreferrer">embed python inside C</a>. The real trick is converting between C values and Python values. Once you've done that, though, making a DLL is <a href="https://stackoverflow.com/questions/847396/compile-a-dll-in-c-c-then-call-it-from-another-program">pretty straightforward</a>.</p>
<p>However, why do you need to make a dll? Do you need to use this from a non-python program?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://cffi.readthedocs.io/en/latest/overview.html#embedding" rel="nofollow noreferrer">Python embedding is supported in CFFI version 1.5</a>, you can create a <code>.dll</code> file which can be used by a Windows C application.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would also using <a href="http://docs.cython.org/src/reference/compilation.html" rel="nofollow noreferrer">Cython</a> to generate <code>pyd</code> files, like Dikei wrote. 
But if you really want to secure your code, you should better write the important stuff in C++. The best would be to combine both <strong>C++</strong> and <strong>Python</strong>. The idea: you would leave the python code open for adjustments, so that you don't have to compile everything over and over again. That means, you would write the "core" in C++ (which is the most secure solution these days) and use those <code>dll</code> files in your python code. It really depends what kind of tool or program you are building and how you want to execute it. I create mostly an execution file (<code>exe</code>,<code>app</code>) once I finish a tool or a program, but this is more for the end user. This could be done with <code>py2exe</code> and <code>py2app</code> (both 64 bit compatible). If you implement the interpreter, the end user's machine doesn't have to have python installed on the system.  </p>
<blockquote>
<p>A <code>pyd</code> file is the same like a <code>dll</code> and fully supported inside python. So you can normally import your module. You can find more information about it <a href="https://docs.python.org/2/faq/windows.html#is-a-pyd-file-the-same-as-a-dll" rel="nofollow noreferrer">here</a>. </p>
</blockquote>
<p>Using and generating <code>pyd</code> files is the fastest and easiest way to create safe and portable python code.</p>
<p>You could also write real <code>dll</code> files in <a href="https://docs.python.org/2/extending/" rel="nofollow noreferrer">C++</a> and import them with <code>ctypes</code> to use them (here a good <a href="https://stackoverflow.com/questions/252417/how-can-i-use-a-dll-from-python">post</a> and here the <a href="https://docs.python.org/2/library/ctypes.html?highlight=ctypes#module-ctypes" rel="nofollow noreferrer">python description</a> of how it works)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>To expand on the answer by Nick ODell</p>
</blockquote>
<p><strong>You must be on Windows for DLLs to work, they are not portable.</strong></p>
<p><em>However the code below is cross platform and all platforms support run-times so this can be re-compiled for each platform you need it to work on.</em></p>
<p>Python does not (yet) provide an easy tool to create a dll, however you can do it in C/C++</p>
<hr/>
<p>First you will need a compiler (Windows does not have one by default) notably Cygwin, MinGW or Visual Studio.  </p>
<p>A basic knowledge of C is also necessary (since we will be coding mainly in C).</p>
<p><em>You will also need to include the necessary headers, I will skip this so it does not become horribly long, and will assume everything is set up correctly.</em></p>
<hr/>
<p>For this demonstration I will print a traditional hello world:</p>
<p><strong>Python code we will be converting to a DLL:</strong></p>
<pre><code>def foo(): print("hello world")
</code></pre>
<p><strong>C code:</strong></p>
<pre><code>#include "Python.h" // Includes everything to use the Python-C API

int foo(void); // Declare foo

int foo(void) { // Name of our function in our DLL

    Py_Initialize(); // Initialise Python

    PyRun_SimpleString("print('hello world')"); // Run the Python commands

    return 0; // Finish execution
}
</code></pre>
<p>Here is the <a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">tutorial</a> for embedding Python.  There are a few extra things that should be added here, but for brevity I have left those out.</p>
<p>Compile it and you should have a DLL. :)</p>
<hr/>
<p>That is not all.  You will need to distribute whatever dependencies are needed,  that will mean the <code>python36.dll</code> run-time and some other components to run the Python script.</p>
<blockquote>
<p>My C coding is not perfect, so if anyone can spot any improvements please comment and I will do my best to fix the it. </p>
</blockquote>
<hr/>
<p>It might also be possible in C# from this answer <a href="https://stackoverflow.com/questions/13231913/how-do-i-call-a-specific-method-from-a-python-script-in-c">How do I call a specific Method from a Python Script in C#?</a>, since C# can create DLLs, and you can call Python functions from C#.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://www.pyinstaller.org/" rel="nofollow noreferrer">pyinstaller</a> for converting the .py files into executable with all required packages into .dll format.</p>
<p>Step 1. pip install pyinstaller, </p>
<p>step 2. new python file let's name it code.py . </p>
<p>step 3. Write some lines of code i.e print("Hello World") </p>
<p>step 4. Open Command Prompt in the same location and write pyinstaller code.py hit enter. Last Step see in the same location two folders name build, dist will be created. inside dist folder there is folder code and inside that folder there is an exe file code.exe along with required .dll files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Grab Visual Studio Express and IronPython and do it that way? You'll be in Python 2.7.6 world though.</p>
</div>
<span class="comment-copy">All a .pyc is is a python script compiled to bytecode so it loads in the interpreter faster. It's not an executable. Why do you need the python package "compiled as a dll"?</span>
<span class="comment-copy">All your answer is already given in the question! dll is not de-compilable to source code compared to *.pyc, right?</span>
<span class="comment-copy">You know, I have a module written in Python. If I import it in another script there will be a *.pyc. So it is simple however people can convert *.pyc to the source code which I don't want to allow them. Rewriting the module in Cython shouldn't be easy task, am I right? BTW, in Windows dll is rigid standard, my client uses only Windows.</span>
<span class="comment-copy">Do you know how to use a dll from Python ?</span>
<span class="comment-copy">Tricky question! I know there are difficulties there. Oh, my gosh, I need just to not deliver the source. How to do!? I know *.pyc is just ready to import, no headache. I can imagine how difficult is going to be a dll, now.</span>
<span class="comment-copy">using something like py2exe wouldn't make it any harder to reverse engineer than just shipping a .pyc file</span>
<span class="comment-copy">But dlls are standard in the Windows world.</span>
<span class="comment-copy">from package I mean a package (module) which means I may distribute some Python codes but for some modules I want only distribute dll files.</span>
<span class="comment-copy">I could be wrong so don't quote me on this, but .exe files can be used just like a dll module. so use py2exe to create the .exe, then just rename it to a .dll so your users don't try to "run" a package.</span>
<span class="comment-copy">I think your idea is worth to try. Thanks</span>
<span class="comment-copy">exe files are not DLLs unfortunately, they are different things.  In C/C++ coding DLL files lack the <code>main()</code> function</span>
<span class="comment-copy">Given in the question: 1) dll is portable, 2) no source code distributed.</span>
<span class="comment-copy">This idea, the first part doesn't look easy. Is there any application that automatically embed my Python module and give me an importable dll?</span>
<span class="comment-copy">What do you mean by 'importable' dll? Importable from where? C++? Python? INTERCAL?</span>
<span class="comment-copy">Well, I meant from Python.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/261638/how-do-i-protect-python-code" title="how do i protect python code">stackoverflow.com/questions/261638/how-do-i-protect-python-code</a></span>
<span class="comment-copy">interesting - can you provide some code to show how it's done?</span>
<span class="comment-copy"><b>Step 1.</b> <code>pip install pyinstaller</code>, <b>step 2.</b> new python file let's name it <code>code.py</code> . <b>step 3.</b> Write some lines of code i.e <code>print("Hello World")</code> <b>step 4.</b> Open Command Prompt in the same location and write <code>pyinstaller code.py</code> hit enter. <b>Last Step</b> see in the same location two folders name <code>build, dist</code> will be created. inside dist folder there is folder <code>code</code> and inside that folder there is an exe file <code>code.exe</code> along with required .dll files.</span>
<span class="comment-copy">That creates an exe not a DLL, the DLL are used to run the exe</span>
