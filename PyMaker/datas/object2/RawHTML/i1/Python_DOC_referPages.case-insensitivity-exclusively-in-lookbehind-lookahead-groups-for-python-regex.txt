<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1455160/how-to-set-ignorecase-flag-for-part-of-regular-expression-in-python">How to set ignorecase flag for part of regular expression in Python?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I understand how to make matching case in-sensitive in Python, and I understand how to use lookahead / lookbehinds, but how do I combine the two?</p>
<p>For instance, my text is </p>
<pre><code>mytext = I LOVE EATING popsicles at home.
</code></pre>
<p>I want to extract <code>popsicles</code> from this text (my target food item). This regex works great:</p>
<pre><code>import re
regex = r'(?&lt;=I\sLOVE\sEATING\s)[a-z0-9]*(?=\sat\shome)'
re.search(regex, mytext)
</code></pre>
<p>However, I'd like to account for the scenario where someone writes</p>
<pre><code>i LOVE eating apples at HOME.
</code></pre>
<p>That should match. But <code>"I LOVE eating Apples at home"</code> should NOT match, since <code>Apples</code> is uppercase.</p>
<p>Thus, I'd like to have <strong>local case insensitivity</strong> in my two lookahead <code>(?=\sat\shome)</code>and lookbehind <code>(?&lt;=I\sLOVE\sEATING\s)</code> groups. I know I can use <code>re.IGNORECASE</code> flags for global case insensitivity, but I just want the lookahead/behind groups to be case insensitive, not my actual target expression.</p>
<p>Traditionally, I'd prepend <code>(?i:I LOVE EATING)</code> to create a case-insensitive non-capturing group that is capable of matching both <code>I LOVE EATING</code> and <code>I love eating</code>. However, If I try to combine the two together:</p>
<p><code>(?i:&lt;=I\sLOVE\sEATING\s)</code> </p>
<p>I get no matches, since it now interprets the <code>i:</code> as a literal expression to match. Is there a way to combine lookaheads/behinds with case sensitivity?</p>
<p><strong>Edit:</strong> I don’t think this is a duplicate of the marked question. That question specifically asks about a part of a group- I’m asking for a specific subset- look ahead and behinds. The syntax is different here.  The answers in that other post do not directly apply. As the answers on this post suggest, you need to apply some work arounds to achieve this functionality that don’t apply to the supposed duplicate SO post. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can set the regex to case-insensitive globally with <code>(?i)</code> and switch a group to case-sensitive with <code>(?-i:groupcontent)</code>:</p>
<pre><code>regex = r'(?i)(?&lt;=I\sLOVE\sEATING\s)(?-i:[a-z0-9]*)(?=\sat\shome)'
</code></pre>
<p>Instead of <code>(?i)</code>, you can also use <code>re.I</code> in the search. The following is equivalent to the regex above:</p>
<pre><code>regex = r'(?&lt;=I\sLOVE\sEATING\s)(?-i:[a-z0-9]*)(?=\sat\shome)'
re.search(regex, mytext, re.I)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately <a href="https://www.regular-expressions.info/modifiers.html" rel="nofollow noreferrer">python <code>re</code> module doesn't allow inline use of mode modifiers in the middle of a regex</a>.</p>
<p>As a workaround, you may use this regex:</p>
<pre><code>reg = re.compile(r'(?&lt;=[Ii]\s[Ll][Oo][Vv][Ee]\s[Ee][Aa][Tt][Ii][Nn][Gg]\s)[a-z0-9]*(?=\s[Aa][Tt]\s[Hh][Oo][Mm][Ee])')

print "Case 1: ", reg.findall('I LOVE Eating popsicles at HOME.')

print "Case 2: ", reg.findall('I LOVE EATING popsicles at home.')

print "Case 3: ", reg.findall('I LOVE Eating Popsicles at HOME.')
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Case 1:  ['popsicles']
Case 2:  ['popsicles']
Case 3:  []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>(?i:...)</code> you can set a regex a flag (in this case <code>i</code>)
<strong>locally</strong> (inline) for some part of the regex.</p>
<p>Such a local flag setting is allowed also within lookbehind or
lookahead, while keeping the rest of the regex without any option.</p>
<p>I modified your code, so it compliles the regex once and then
calls is 2 times for different strings:</p>
<pre><code>mytext1 = 'i LOVE eating Apples at HOME.'
mytext2 = 'i LOVE eating apples at HOME.'
pat = re.compile(r'(?&lt;=(?i:I\sLOVE\sEATING\s))[a-z0-9]+(?=(?i:\sAT\sHOME))')
m = pat.search(mytext1)
print('1:', m.group() if m else '** Not found **')
m = pat.search(mytext2)
print('2:', m.group() if m else '** Not found **')
</code></pre>
<p>It prints:</p>
<pre><code>1: ** Not found **
2: apples
</code></pre>
<p>so the match is only for the second source string.</p>
</div>
<span class="comment-copy">Hmmm... given the conversation that's likely been moved to chat, I think you should change the title to something like, <b><code>Use case insensitivity exclusively inside of lookarounds.</code></b> I can only imagine that you're bound to get several answers where people will misunderstand your question.</span>
<span class="comment-copy">Good point, will do so now.</span>
<span class="comment-copy">@wiktor-stribiżew got a request for re-opening this quest in my queue. Seems the asker got an answer worthwhile of acceptance and another participant gave a comment suggesting to leave this open after reformulating the quest. As you seem to be an expert in RegEx, thought it would be good to pong this back to you: Can this be re-opened?</span>
<span class="comment-copy">@IdaEbkes These are the same issues. Lookbehinds <i>are</i> part of regex patterns. The answers <a href="https://stackoverflow.com/questions/1455160/how-to-set-ignorecase-flag-for-part-of-regular-expression-in-python">there</a> fully address the issue, show workarounds for older versions and provide the solutions for Python versions from 3.6 up.</span>
<span class="comment-copy">@WiktorStribiżew thanks for your feedback, leaving closed as dup. Suppose more answers may be considered to be added to the dup, then.</span>
<span class="comment-copy">No, It won;'t work in <code>python 2</code>. <code>re.compile(r'(?i)(?&lt;=I\sLOVE\sEATING\s)(?-i:[a-z0-9]*)(?=\sat\shome)')</code> will give errors.</span>
<span class="comment-copy">@anubhava In Python 2 you can use the <a href="https://pypi.org/project/regex/" rel="nofollow noreferrer">regex</a> library (tested with 2.7.8).</span>
