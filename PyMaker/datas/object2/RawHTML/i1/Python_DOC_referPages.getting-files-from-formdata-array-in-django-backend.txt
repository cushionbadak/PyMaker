<div class="post-text" itemprop="text">
<p>I try to send POST request.</p>
<p>I try to post data (FormData) from javascript which contains array of images
The <strong>print(request.data)</strong> command in my console shows this:</p>
<pre><code> &lt;QueryDict: 
     {'title': ['testTitle'], 'text': ['testText'], 
      'images': [&lt;InMemoryUploadedFile: 486217.jpg (image/jpeg)&gt;, 
                 &lt;InMemoryUploadedFile: 344611.jpg (image/jpeg)&gt;, 
                 &lt;InMemoryUploadedFile: default.png (image/png)&gt;]
              }&gt;
</code></pre>
<p>code in django :models.py</p>
<pre><code>class Article(models.Model):

title = models.CharField(max_length=120)
text = models.TextField()
create_time = models.DateTimeField(default=datetime.utcnow, blank=True, 
              null=True)

def __str__(self):
    return self.title     

class ArticleImage(models.Model):
    article = models.ForeignKey(Article, related_name='images', 
              on_delete=models.CASCADE)
    img = models.ImageField(upload_to='article_images/')
    is_main = models.BooleanField(default=False,blank=True,null=True)
    create_time = models.DateTimeField(default=datetime.utcnow, blank=True, 
                  null=True)

def __str__(self):
    return  self.article.title
</code></pre>
<p>views.py</p>
<pre><code>class ArticleMixinView(generics.GenericAPIView,
                    mixins.ListModelMixin,
                    mixins.CreateModelMixin,
                    ...)
serializer_class = ArticleSerializer
queryset = Article.objects.all()
lookup_field = 'id'


def post(self, request):
    print(request.data)
    new_article = Article.objects.create(title=request.data.get('title'), 
                  text=request.data.get('text'))
    new_article.save()
    for img in request.data.get('images'):
        # article_img = ArticleImage(article=new_article,img=File(img), 
        #                             is_main=False )
        # article_img.save()

    return Response({
            'article': ArticleSerializer(new_article, 
                       context=self.get_serializer_context()).data

    }) 
</code></pre>
<p>Creation of Article object works fine, but I got some problems with this array. What is wrong, or how I can get images from <strong><em>InMemoryUploadedFile</em></strong> objects ????
Please any help. Thank you in forward)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are sending <code>images</code> as an array from your front-end. You can format them a little better so that each object of array match your <code>ArticleImage</code> model. For example, each object of <code>images</code> key should have the file against <code>img</code> key (because that is name of your field in model):</p>
<pre><code>&lt;QueryDict: 
   {'title': ['testTitle'], 
    'text': ['testText'], 
    'images': [{'img': &lt;InMemoryUploadedFile: 486217.jpg (image/jpeg)&gt;},
             {'img': &lt;InMemoryUploadedFile: 344611.jpg (image/jpeg)&gt;}]
   }&gt;
</code></pre>
<p>Now you can use a <code>ModelSerializer</code> with <code>many=True</code> to do the job for you.</p>
<p>For example, create a serializer for <code>ArticleImage</code> model:</p>
<pre><code>class ArticleImageSerializer(serializers.ModelSerializer):
    class Meta:
        model = ArticleImage
        fields = ('article', 'img', 'is_main', 'create_time')
        read_only_fields = ('article', 'is_main', 'create_time') # so that only `img` field comes from input
</code></pre>
<p>Now use that to save your images in your model:</p>
<pre><code>def post(self, request):
    print(request.data)
    images = request.data.pop('images')

    serializer = self.get_serializer_class(data=request.data) # why not use ArticleSerializer?
    serializer.is_valid(raise_exception=True)                 # this lets you validate if something is wrong with user's input
    new_article = serializer.save()                           # similar to Article.objects.create

    images_serializer = ArticleImageSerializer(data=images, many=True)  # only `img` comes from data
    images_serializer.is_valid(raise_exception=True)
    images_serializer.save(article=new_article, is_main=False) # adding additional fileds

    return Response(serializer.data) 
</code></pre>
<p>This code is not tested, let me know if something doesn't work properly. Hope it helps.</p>
</div>
<span class="comment-copy">I think I do something wrong in my FormData creating method                                    let data = new FormData();          const {imgList}=this.state;                  data.append('title', event.target.elements.title.value,);         data.append('text',event.target.elements.content.value,);         imgList.forEach(i=&gt;{           data.append('images[]', i);         })                                                                                                                                 Is this ok?</span>
