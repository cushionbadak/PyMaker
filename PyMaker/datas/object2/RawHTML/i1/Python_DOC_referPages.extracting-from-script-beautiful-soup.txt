<div class="post-text" itemprop="text">
<p>How would the value for the "tier1Category" be extracted from the source of this page? 
<a href="https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product" rel="nofollow noreferrer">https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product</a></p>
<pre><code>soup.find('script') 
</code></pre>
<p>returns only a subset of the source, and the following returns another source within that code. </p>
<pre><code>json.loads(soup.find("script", type="application/ld+json").text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Bitto and I have similar approaches to this, however I prefer to not rely on knowing which script contains the matching pattern, nor the structure of the script. </p>
<pre><code>import requests
from collections import abc
from bs4 import BeautifulSoup as bs

def nested_dict_iter(nested):
    for key, value in nested.items():
        if isinstance(value, abc.Mapping):
            yield from nested_dict_iter(value)
        else:
            yield key, value

r = requests.get('https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour allergy-tablets/ID=prod6205762-product')
soup = bs(r.content, 'lxml')
for script in soup.find_all('script'):
    if 'tier1Category' in script.text:
        j = json.loads(script.text[str(script.text).index('{'):str(script.text).rindex(';')])
        for k,v in list(nested_dict_iter(j)):
             if k == 'tier1Category':
                 print(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are the steps I used to get the output</p>
<ul>
<li><p>use <em>find_all</em> and get the 10th script tag. This script tag contains the  <code>tier1Category</code> value.</p></li>
<li><p>Get the script text from the first occurrence of <code>{</code> and till last occurrence of <code>;</code> . This will give us a proper <em>json</em> text.</p></li>
<li><p>Load the text using <code>json.loads</code> </p></li>
<li><p>Understand the structure of the <em>json</em> to find how to get the <code>tier1Category</code> value.</p></li>
</ul>
<p>Code:</p>
<pre><code>import json
import requests
from bs4 import BeautifulSoup
r = requests.get('https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product')
soup = BeautifulSoup(r.text, 'html.parser')
script_text=soup.find_all('script')[9].text
start=str(script_text).index('{')
end=str(script_text).rindex(';')
proper_json_text=script_text[start:end]
our_json=json.loads(proper_json_text)
print(our_json['product']['results']['productInfo']['tier1Category'])
</code></pre>
<p>Output:</p>
<pre><code>Medicines &amp; Treatments
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use an id. I assume tier 1 is after <code>shop</code> in the navigation tree. Otherwise, I don't see that value in that script tag. I see it in an ordinary script (without the script[type="application/ld+json"] ) tag but there are a lot of regex matches for tier 1</p>
<pre><code>import requests
from bs4 import BeautifulSoup as bs

r = requests.get('https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product')
soup = bs(r.content, 'lxml')
data = soup.select_one("#bdCrumbDesktopUrls_0").text
print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what exact data elements related to the <code>&lt;script&gt;</code> tag you need, this does locate tier1Category and extracts these 3 elements:</p>
<ul>
<li>"tier1Category":"Medicines &amp; Treatments",</li>
<li>"tier1CategoryId":"359438"</li>
<li><p>"tier1url":"/store/c/medicines-and-treatments/ID=359438-tier1"</p>
<pre><code>import re
from urllib import request
from bs4 import BeautifulSoup

crawlRequest = request.urlopen('https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product')

raw_html = crawlRequest
soup = BeautifulSoup(raw_html, 'lxml')

for i,tag in enumerate(soup.findAll('script')):
   # There is a JSON, which could be parsed
   if 'tier1Category' in tag.text:
     tier_1_pattern = re.compile('(("tier1Category":"Medicines &amp; Treatments".*)("tier1CategoryId".*)("tier1url":.*-tier1))', re.IGNORECASE|re.MULTILINE)
     extract_tier_1 = re.search(tier_1_pattern, tag.text)
     if extract_tier_1:

       print (extract_tier_1.group(2))
       # outputs
       "tier1Category":"Medicines &amp; Treatments",

       print (extract_tier_1.group(3))
       # outputs
       "tier1CategoryId":"359438",

       print (extract_tier_1.group(4))
       # outputs
       "tier1url":"/store/c/medicines-and-treatments/ID=359438-tier1
</code></pre></li>
</ul>
<p>As I mention in my previous post, the script section in question has a JSON object, so this focuses on extracting the elements listed above from the JSON. 
I'm curious about the difference between the tier1CategoryId and the prodID in the URL. </p>
<pre><code>    from urllib import request
    from bs4 import BeautifulSoup
    import json

    crawlRequest = 
    request.urlopen('https://www.walgreens.com/store/c/walgreens-wal-zyr-24-hour-allergy-tablets/ID=prod6205762-product')

    raw_html = crawlRequest
    soup = BeautifulSoup(raw_html, 'lxml')

    for i,tag in enumerate(soup.findAll('script')):
      if 'tier1Category' in tag.text:
        json_data = json.loads(tag.text[str(tag.text).index('{'):str(tag.text).rindex(';')])
        category_type = json_data['product']['results']['productInfo']['tier1Category']
        category_id = json_data['product']['results']['productInfo']['tier1CategoryId']
        category_url = json_data['product']['results']['productInfo']['tier1url']
</code></pre>
</div>
<span class="comment-copy">what would be the expected return value?</span>
<span class="comment-copy">Medicines &amp; Treatments</span>
<span class="comment-copy">I haven't seen the function nested_dict_iter() used before.  Thanks for teaching me about this function.  I had to upvote this answer, because it was the cleanest.</span>
<span class="comment-copy">I have found this method to be useful, but my question is about extracting from the script tag. thanks!</span>
<span class="comment-copy">It isn't in the json script tag. See my comment.</span>
<span class="comment-copy">so there would be no way to get that value with bs?</span>
<span class="comment-copy">I see it in an ordinary script tag but there are a lot of regex matches for tier 1</span>
<span class="comment-copy">So, I would have thought my way is likely more reliable and easier.</span>
