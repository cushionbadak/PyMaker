<div class="post-text" itemprop="text">
<p>I have the following code to one-hot-encode 2 columns I have.</p>
<pre><code># encode city labels using one-hot encoding scheme
city_ohe = OneHotEncoder(categories='auto')
city_feature_arr = city_ohe.fit_transform(df[['city']]).toarray()
city_feature_labels = city_ohe.categories_
city_features = pd.DataFrame(city_feature_arr, columns=city_feature_labels)

phone_ohe = OneHotEncoder(categories='auto')
phone_feature_arr = phone_ohe.fit_transform(df[['phone']]).toarray()
phone_feature_labels = phone_ohe.categories_
phone_features = pd.DataFrame(phone_feature_arr, columns=phone_feature_labels)
</code></pre>
<p>What I'm wondering is how I do this in 4 lines while getting properly named columns in the output. That is, I can create a properly one-hot-encoded array by include both columns names in <code>fit_transform</code> but when I try and name the resulting dataframe's columns, it tells me that there is a mismatch between the shape of the indices:</p>
<pre><code>ValueError: Shape of passed values is (6, 50000), indices imply (3, 50000)
</code></pre>
<p>For background, both phone and city have 3 values. </p>
<pre><code>    city    phone
0   CityA   iPhone
1   CityB Android
2   CityB iPhone
3   CityA   iPhone
4   CityC   Android
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You you are almost there... Like you said you can add all the columns you want to encode in <code>fit_transform</code> directly.</p>
<pre><code>ohe = OneHotEncoder(categories='auto')
feature_arr = ohe.fit_transform(df[['phone','city']]).toarray()
feature_labels = ohe.categories_
</code></pre>
<p>And then you just need to do the following:</p>
<pre><code>feature_labels = np.array(feature_labels).ravel()
</code></pre>
<p>Which enables you to name your columns like you wanted:</p>
<pre><code>features = pd.DataFrame(feature_arr, columns=feature_labels)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you take a look at <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html" rel="nofollow noreferrer">pd.get_dummies</a>?
Here's how you can encode:</p>
<pre><code>df['city'] = df['city'].astype('category')
df['phone'] = df['phone'].astype('category')
df = pd.get_dummies(df)
</code></pre>
</div>
<span class="comment-copy">thanks! I should have found that ravel() function. it's super helpful.</span>
<span class="comment-copy">Glad it helped, yes it's a quite handy function!</span>
<span class="comment-copy">Thanks panktijk. I ended up doing that, but I was wondering if it could be done in sklearn.</span>
