<div class="post-text" itemprop="text">
<p>I am trying to make a POST request in Python 2, using urllib2. My code is currently as follows;</p>
<pre><code>url = 'http://' + server_url + '/playlists/upload?'
data = urllib.urlencode(OrderedDict([("sectionID", section_id), ("path", current_playlist), ("X-Plex-Token", plex_token)]))


req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
d = response.read()
print(d)
</code></pre>
<p>'url' and 'data' return correctly formatted with the variables, I know this because I can copy their output into Postman for checking and the POST works fine (see example url below)</p>
<pre><code>http://192.168.1.96:32400/playlists/upload?sectionID=11&amp;path=D%3A%5CMedia%5CPPP%5Ctmp%5Cplex%5CAmbient.m3u&amp;X-Plex-Token=XXXXXXXXX
</code></pre>
<p>When I run my Python code I get a 401 error returned, presumably meaning the X-Plex-Token parameter was not correctly sent, hence I am not allowed access.</p>
<p>Can anyone tell me where I'm going wrong? Help is greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried removing the question mark and not using OrderedDict (no idea why you would need that) ?</p>
<pre><code>url = 'http://' + server_url + '/playlists/upload'
data = urllib.urlencode({"sectionID":section_id), "path":current_playlist,"X-Plex-Token":plex_token})


req = urllib2.Request(url, data)
response = urllib2.urlopen(req)
d = response.read()
print(d)
</code></pre>
<p>Of course you should be using requests instead anyway:</p>
<pre><code>import requests
r = requests.post('http://{}/playlists/upload'.format(server_url), data = {"sectionID":section_id), "path":current_playlist,"X-Plex-Token":plex_token})
print r.url
print r.text
print r.json
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've ended up switching to Python 3, as I didn't realise that the requests module was included by default. Still no idea why the above wasn't working, but maybe something to do with the lack of headers</p>
<pre><code>headers = {'cache-control': "no-cache"}
</code></pre>
<p>edit:
This is what I'm using now, as mentioned above I probably don't need OrderedDict.</p>
<pre><code>import requests

url = 'http://' + server_url + '/playlists/upload'
headers = {'cache-control': "no-cache"}
querystring = urllib.parse.urlencode(OrderedDict([("sectionID", section_id), ("path", current_playlist), ("X-Plex-Token", plex_token)]))

response = requests.request("POST", url, data = "", headers = headers, params = querystring)
print(response.text)
</code></pre>
</div>
<span class="comment-copy">Yep the question mark made no difference either way, OrderedDict was to make sure the token was the last parameter, otherwise it sorted them so section id was at the end and I thought that might be causing issues.</span>
<span class="comment-copy">That's not how API's work.  The order of the keys won't matter.  You should also try using <code>requests</code> as well.  I use that for all API's that are not SSL and it works great.</span>
<span class="comment-copy">I added a requests example.</span>
<span class="comment-copy">Thanks for updating, I used a slightly different method still using requests, I've posted that above just incase one works and the other doesn't for any use cases</span>
<span class="comment-copy">I'm confused... did yours or mine work?  What have you found?</span>
<span class="comment-copy">I think both work - my posted worked and I've since switched to a similar code to yours - it seems like there are just several ways to do achieve this.</span>
