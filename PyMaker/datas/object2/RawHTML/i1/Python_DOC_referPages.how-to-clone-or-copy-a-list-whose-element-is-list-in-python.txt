<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17873384/how-to-deep-copy-a-list">How to deep copy a list?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>How to copy a list which is consisted of list type elements? I have used the method described in a similar question <a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list">how to clone a list?</a> But it still doesn't work, as shown in picture below
<a href="https://i.stack.imgur.com/6Bt6m.png" rel="nofollow noreferrer"><img alt="output of the original code" src="https://i.stack.imgur.com/6Bt6m.png"/></a></p>
<p>Original code is </p>
<pre><code>asd
a = [[]]
b = list(a)
for i in [1,2]:
    for j in b:
        j.append(i)
    print a
</code></pre>
<p>why would <code>a</code> change when <code>b</code> was changed? But I want to keep <code>a</code> from being changed.</p>
<p>Requirements: cannot import package such as <code>copy</code> since I met this problem in leetcode.com.</p>
<hr/>
<p>Finally, the answer is that I need a deep copy of list, that is 
<code>b = [c[:] for c in a]</code>. Notice: as @PM2Ring mentioned below at comment area, <code>b = [c[:] for c in a]</code> is only suited for a single level of nesting. For more complicated deep copy, look for phrase "deep copy". Thanks for all your help.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import copy

lis = [[1], [2]]

deep_list = copy.deepcopy(lis)
copy_list = copy.copy(lis)

print(deep_list is lis)
print(deep_list[0] is lis[0])
print(deep_list[1] is lis[1])

print(copy_list is lis)
print(copy_list[0] is lis[0])
print(copy_list[1] is lis[1])
</code></pre>
<p>In the above code <code>deepcopy()</code> creates a deep copy of the <code>list</code> so you and <code>copy()</code> creates a shallow copy. In case of <code>deepcopy()</code> the list's within the list will also be copied.</p>
<p>OUTPUT:</p>
<pre><code>False
False
False
False
True
True
</code></pre>
<p><strong>EDIT:</strong> Since you cant import library may be you can try below approach:</p>
<pre><code>lis = [[1], [2]]

deep_list = []

for item in lis:
    deep_list.append(item[:])

print(deep_list is lis)
print(deep_list[0] is lis[0])
print(deep_list[1] is lis[1])
</code></pre>
<p>OUTPUT:</p>
<pre><code>False
False
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>copy</code>:</p>
<pre><code>import copy

a = [[]]
b = copy.copy(a)    # b = a[:] using slicing is a lot faster
for i in [1,2]:
    for j in b:
        j.append(i)
print(a)
print(b)
</code></pre>
<p>Without package, using <code>slicing</code>:</p>
<pre><code>a = [[]]
b = a[:]        # b = a.copy() Could also come in handy
for i in [1,2]:
    for j in b:
        j.append(i)
print(a)
print(b)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>[[1, 2]]
[[1, 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import copy
....
b = copy.copy(a)
...
</code></pre>
</div>
<span class="comment-copy">You're making a shallow copy. It's only copying the outer list, not the inner lists. Read the question you linked to again. Look for the phrase "deep copy".</span>
<span class="comment-copy">if you print <code>print(a==b)</code> you will see that <code>a</code> and <code>b</code> are the same object. Like pointed above, you made a shallow copy.</span>
<span class="comment-copy">The duplicate I linked (which is also the same post that you included in your question) features the deepcopy option as its fifth bullet point.</span>
<span class="comment-copy">@Carcigenicate I just know from you that there is something called deep copy!! seems like I am still new to python....</span>
<span class="comment-copy">@Arne No, it's not exactly the same, maybe as they said I need deep copy.</span>
<span class="comment-copy">Correctly, I find this answer gives my desired outputs. But combined with @DirtyBit's slicing method, here I got a simple deep copy of list:<code>b = [c[:] for c in a]</code>.</span>
<span class="comment-copy">No, I met this problem from leetcode.com, so import new package is not allowed!!</span>
<span class="comment-copy">Welcome to Stack Overflow! While this code may solve the question, <a href="//meta.stackexchange.com/q/114762">including an explanation</a> of how and why this solves the problem would really help to improve the quality of your post, and probably result in more up-votes. Remember that you are answering the question for readers in the future, not just the person asking now. Please <a href="https://stackoverflow.com/posts/55241036/edit">edit</a> your answer to add explanations and give an indication of what limitations and assumptions apply.</span>
