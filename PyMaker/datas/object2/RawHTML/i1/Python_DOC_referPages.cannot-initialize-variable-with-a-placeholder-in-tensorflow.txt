<div class="post-text" itemprop="text">
<p>How does one go about creating variables with placeholders as initializers? The following graph breaks down with:</p>
<pre><code>InvalidArgumentError: You must feed a value for placeholder tensor 'Placeholder_1' with dtype float
     [[node Placeholder_1 (defined at &lt;ipython-input-10-b8d54264dc85&gt;:3)  = Placeholder[dtype=DT_FLOAT, shape=[], _device="/job:localhost/replica:0/task:0/device:CPU:0"]()]]
</code></pre>
<p>My code:</p>
<pre><code>tf.reset_default_graph()
a = tf.placeholder(dtype=tf.float32,shape=())
d = tf.placeholder(dtype=tf.float32,shape=())
b = tf.get_variable(name='b',initializer=d)
c=a+d
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(sess.run(c, feed_dict={a:5.,d:10.}))
</code></pre>
<p>The documentation on initializers in tensorflow says:</p>
<blockquote>
<p>Initializer for the variable if one is created. Can either be an initializer object or a Tensor. If it's a Tensor, its shape must be known unless validate_shape is False.</p>
</blockquote>
<p>However if i comment out the line where i create b the code seems to run. My fetch is not even dependent upon b.</p>
<p>How do i go about creating variables that initialize according to some placeholder?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think your problem is described in <a href="https://github.com/tensorflow/tensorflow/issues/4920" rel="nofollow noreferrer">https://github.com/tensorflow/tensorflow/issues/4920</a></p>
<p>My workaround would be to use <code>tf.assign</code> which would act like a lazy initializer, the shape would be before infered from <code>d</code> with <code>tf.zeros_like</code>. To get idea how does it work I made <code>b</code> a resource variable so it maintains state between <code>sess.run</code> calls.</p>
<pre><code>tf.reset_default_graph()
a = tf.placeholder(dtype=tf.float32,shape=(), name='a')
d = tf.placeholder(dtype=tf.float32,shape=(), name='d')
b = tf.get_variable(name='b', initializer=tf.zeros_like(d), use_resource=True)
b_init = tf.assign(b, d)
c=a+d
add_one = tf.assign(b,tf.add(b,tf.ones_like(b)))
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())   
    print(sess.run([c, b_init], feed_dict={a:5.,d:10.}))    
    for i in range(10): 
        sess.run(add_one)
        print(sess.run([c,b], feed_dict={a:5.,d:10.}))
</code></pre>
<p>The output</p>
<pre><code>[15.0, 10.0]
[15.0, 11.0]
[15.0, 12.0]
[15.0, 13.0]
[15.0, 14.0]
[15.0, 15.0]
[15.0, 16.0]
[15.0, 17.0]
[15.0, 18.0]
[15.0, 19.0]
[15.0, 20.0]
</code></pre>
</div>
<span class="comment-copy">Thank you for the suggestion. Could you help me by confirming if the solution at <a href="https://github.com/tensorflow/tensorflow/issues/13351" rel="nofollow noreferrer">github.com/tensorflow/tensorflow/issues/13351</a> works. i am unable to make it work</span>
<span class="comment-copy">your solution assigns b equal to d on each iteration which is not the behavior intended.</span>
<span class="comment-copy">I've edited the code to illustrate how you should use it. Split the <code>assign</code> and <code>get_variable</code> and use <code>assign</code> only before the loop. I've added <code>add_one</code> op that adds one to <code>b</code> and assigns it the value of addition to illustrate that it works. Moreover, I had to use resource variable so it maintains state between <code>sess.run</code> calls. Hope it clarifies things.</span>
<span class="comment-copy">Bring your cheeks over here my man!! Thank you, it works!!</span>
