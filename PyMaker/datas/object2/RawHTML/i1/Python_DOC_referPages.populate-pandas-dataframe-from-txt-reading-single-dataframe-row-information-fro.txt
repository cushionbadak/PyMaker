<div class="post-text" itemprop="text">
<p>I want to read into a pandas dataframe information from a large .txt which is arranged in the following form:</p>
<pre><code>    elm1 x1 x2 x3 
    cont x4 x5 x6
    cont x7 x8
    elm2 x9 x10 x11
    cont x12 x13 x14
    cont x15 x16 
....
</code></pre>
<p>the dataframe should be arranged in the following manner:</p>
<pre><code>elm_ID col1 col2 col3 col4 col5 col6 col7 col8
elm_1 x1 x2 x3 x4 x5 x6 x7 x8
elm_2 x9 x10 x11 x12 x13 x14 x15 x16
.......
</code></pre>
<p>Does somebody have some idea? 
Thanks a lot in advance.</p>
<p>J.A.</p>
</div>
<div class="post-text" itemprop="text">
<p>yes you can easily convert the data to the dataframe. first we create the list of data we need to convert to the dataframe by reading the data from text file line-by-line:</p>
<pre><code>import re

df_list = [] #as you want these as your headers 
with open(infile) as f:
    for line in f:
        # remove whitespace at the start and the newline at the end
        line = line.strip()
        # split each column on whitespace
        columns = re.split('\s+', line, maxsplit=4)
        df_list.append(columns)

</code></pre>
<p>and then we can simply convert this list to dataframe by using</p>
<pre><code>import pandas as pd
df = pd.DataFrame(df_list,columns=[elm_ID col1 col2 col3 col4 col5 col6 col7 col8])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, read in the txt file via <code>pd.read_csv(path_to_file, sep='\t')</code>.</p>
<p>Then, assuming we have this dataframe:</p>
<pre><code>      a    b    c
0  elm1   x1   x2
1  cont   x4   x5
2  cont   x7   x8
3  elm2   x9  x10
4  cont  x12  x13
5  cont  x15  x16
</code></pre>
<p>And we want this output:</p>
<pre><code>       0    1    2    3    4    5                      
elm1  x1   x4   x7   x2   x5   x8
elm2  x9  x12  x15  x10  x13  x16
</code></pre>
<p>I tried to solve it completely using pandas functions:</p>
<pre><code>df = pd.DataFrame([("elm1", "x1", "x2" ),
    ("cont", "x4", "x5"),
    ("cont", "x7", "x8"),
    ("elm2", "x9", "x10"),
    ("cont", "x12", "x13"),
    ("cont", "x15", "x16")] , columns=list('abc'))
df['d'] = df['a'] != 'cont'
df['e'] = df['a']
df['e'][~df['d']] = np.nan
df['e'] = df['e'].fillna(method='ffill')
df2 = df.groupby('e').apply(lambda x: pd.concat([x['b'], x['c']])).to_frame().reset_index()
df2['ct'] = df2.reset_index().groupby('e').cumcount()
df3 = df2.pivot(index='e', values=[0], columns='ct')
df3.columns = range(len(df3.columns))
df3.index.name = ''
</code></pre>
</div>
<span class="comment-copy">Do you have fixed number of data items for every row(8 as per your example)?</span>
<span class="comment-copy">the question specified reading data from a txt file and converting it to a df</span>
<span class="comment-copy">I added <code>pd.read_csv</code>. The difficult part is however retransforming the dataframe, not reading it from txt file. Parsing a large file by yourself in python code is incredibly slow.</span>
