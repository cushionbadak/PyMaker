<div class="post-text" itemprop="text">
<p>Here is my program,</p>
<pre><code>item_no = []
max = 0
for i in range(5):
    input_no = int(input("Enter an item number: "))
    item_no.append(input_no)
for i in item_no:
    if i &gt; max:
       max = i
high = item_no.index(max)
print (item_no[high])
</code></pre>
<p>Example input: <code>[5, 6, 7, 8, 8]</code></p>
<p>Example output: <code>8</code></p>
<p>How can I change my program to output the same highest numbers in an array?</p>
<p>Expected output: <code>[8, 8]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just get the maximum using <code>max</code> and then its <code>count</code> and combine the two in a list-comprehension.</p>
<pre><code>item_no = [5, 6, 7, 8, 8]

max_no = max(item_no)
highest = [max_no for _ in range(item_no.count(max_no))]
print(highest)  # -&gt; [8, 8]
</code></pre>
<p>Note that this will return a list of a single item in case your maximum value appears only once.</p>
<hr/>
<p>A solution closer to your current programming style would be the following:</p>
<pre><code>item_no = [5, 6, 7, 8, 8]
max_no = 0  # Note 1 
for i in item_no:
    if i &gt; max_no:
        max_no = i
        high = [i]
    elif i == max_no:
        high.append(i)
</code></pre>
<p>with the same results as above of course. </p>
<p>Notes</p>
<ol>
<li>I am assuming that you are dealing with N* (<em>1, 2, ...</em>) numbers only. If that is not the case, initializing with <code>-math.inf</code> should be used instead.</li>
</ol>
<hr/>
<p><strong>Note that the second code snippet is less efficient than the first by quite a margin. Python allows you to be more efficient than these explicit, fortran-like loops and it is more efficient itself when you use it properly.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it even shorter:</p>
<pre><code>item_no = [5, 6, 7, 8, 8]
#compute once - use many
max_item = max(item_no)
print(item_no.count(max_item) * [max_item])
</code></pre>
<p>output:</p>
<pre><code>[8, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>list</code> comprehension for that task following way:</p>
<pre><code>numbers = [5, 6, 7, 8, 8]
maxnumbers = [i for i in numbers if i==max(numbers)]
print(*maxnumbers,sep=',')
</code></pre>
<p>output:</p>
<pre><code>8,8
</code></pre>
<p><code>*</code> operator in <code>print</code> is used to unpack values, <code>sep</code> is used to inform <code>print</code> what seperator to use: <code>,</code> in this case.</p>
<p>EDIT: If you want to get indices of biggest value and call <code>max</code> only once then do:</p>
<pre><code>numbers = [5, 6, 7, 8, 8]
biggest = max(numbers)
positions = [inx for inx,i in enumerate(numbers) if i==biggest]
print(*positions,sep=',')
</code></pre>
<p>Output:</p>
<pre><code>3,4
</code></pre>
<p>As you might check <code>numbers[3]</code> is equal to <code>biggest</code> and <code>numbers[4]</code> is equal to <code>biggest</code>.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Count the occurrence of max number</p></li>
<li><p>iterate over the list to print the max number for the range of the count (1)</p></li>
</ol>
<p><strong>Hence</strong>:</p>
<pre><code>item_no = [5, 6, 7, 8, 8]
counter = item_no.count(max(item_no))      # 2
print([max(item_no) for x in range(counter)])   
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>[8, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This issue can be solved in one line, by finding an item which is equal to the maximum value:
To improve performance store max in var
 Mvalue=max(item_no)
<code>[i for i in item_no if i==Mvalue]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I think it would be better if we evaluate the <code>max</code> in the array and its <code>count</code> in one iteration</p>
<pre><code>def maxs(iterable):
    max = None
    count = 0
    for index, value in enumerate(iterable):
        if index == 0 or value &gt;= max:
            if value != max:
                count = 0
            max = value
            count += 1
    return count * [max]


print (maxs([5, 6, 7, 8, 8]))   # [8, 8]
print (maxs([3, 2, 4, 5, 1, 2, 4, 5, 2, 5, 0])) # [5, 5, 5]
print (maxs([])) # []
</code></pre>
<p>Give it a Try!!</p>
</div>
<span class="comment-copy">Band indent at line 8</span>
<span class="comment-copy">You can use Dictionary to store the maximum number and its count as item_no = {}, if you max is different then original in item_no, reinitialize it and add that item and add count =1</span>
<span class="comment-copy">("Band" probably is a misspelling for "Bad")</span>
<span class="comment-copy">@tripleee Indeed. bulls-eye!</span>
<span class="comment-copy">As answers show, it's more Pythonic to do it with list comprehensions, rather than loops. But if you use loops to iterate over the list, a style tip: don't use the same variable name <code>i</code> both for indices <code>i in range(5)</code> then also for items/values: <code>for i in item_no</code>. Better to do <code>for no in item_no</code></span>
<span class="comment-copy">Actually, I would love to use the first code, but since this part of my school project, I am not allowed to use inbuilt functions, therefore I need to use the second code.</span>
<span class="comment-copy">@user11206537 I kinda saw this coming. Knowing what a better way would be is still of some value. Have fun!</span>
<span class="comment-copy">One last question, how do you find the index of the result (high) in item_no?</span>
<span class="comment-copy">@user11206537 To get the index as well, you can modify the code slightly and use <code>enumerate</code> on <code>item_no</code>. As you loop through, store the index in a 2nd list as you do for the max. Take a look at <a href="https://repl.it/repls/BlaringDarkblueDegree" rel="nofollow noreferrer">this</a></span>
<span class="comment-copy">@Drew Yes, you're right; if <code>item_no[0] == 0</code>, the code crashes as <code>high</code> isn't defined when reaching <code>high.append(i)</code>.</span>
<span class="comment-copy">One last question, how do you find the index of the result in item_no?</span>
<span class="comment-copy">note that your solution calls <code>max</code> a total of <code>len(numbers)</code> times. Storing it outside the list and then using that would be better.</span>
<span class="comment-copy">How do you find the index of the result in item_no?</span>
<span class="comment-copy">@Ev.Kounis I assume the Python interpreter optimizes this, no?</span>
<span class="comment-copy">@user1717828 No it does not.</span>
<span class="comment-copy">@Ev.Kounis, Oh man, I didn't believe this so I tested it out.  <code>python -m timeit "numbers = [5, 6, 7, 8, 8]; max_number = max(numbers); maxnumbers = [i for i in numbers if i==max_number]"</code> is twice as fast as when the max calculation is in the comprehension.  I've gotten very spoiled from using languages with compilers.</span>
<span class="comment-copy">How do you find the index of the result in item_no?</span>
<span class="comment-copy">How do you find the index of the result in item_no?</span>
<span class="comment-copy">By using enumerate function, we can get index position: [i for i, val in enumerate(item_no) if val in result]</span>
<span class="comment-copy">But isn't <code>max</code> called n times? Not efficient.</span>
<span class="comment-copy">I did! And it worked! That's a very efficient solution.</span>
<span class="comment-copy">@user11206537 Did you measure and compared the efficiency among the solutions. Can you share with us?</span>
<span class="comment-copy">This kind of solution was the one that was actually needed as a part of my school project and my teacher thought of it as a very efficient solution. This code is also written along the lines of my current programming style, which is exactly what I wanted.</span>
