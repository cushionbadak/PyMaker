<div class="post-text" itemprop="text">
<p>I'm running inside an anacoda environment with pyopencl installed: </p>
<pre><code>$&gt; conda list | grep pyopencl
pyopencl                  2018.2.5         py37h9888f84_0    conda-forge
</code></pre>
<p>And from that same window I launch: </p>
<pre><code>$&gt; anaconda3/bin/jupyter_mac.command
</code></pre>
<p>Which is:</p>
<pre><code>cat /Anaconda3/bin/jupyter_mac.command

DIR=$(dirname $0)

$DIR/jupyter-notebook
</code></pre>
<p>So, now we're running a notebook. When I attempt to import pyopencl:</p>
<pre><code>import pyopencl as cl
</code></pre>
<p>I get the following error:</p>
<pre><code>ModuleNotFoundError: No module named 'pyopencl'
</code></pre>
<p>I am able to run the examples locally in the same shell w/out any errors via:</p>
<pre><code>$&gt; python test6.py
Choose platform:
[0] &lt;pyopencl.Platform 'Portable Computing Language' at 0x11512cf00&gt;
[1] &lt;pyopencl.Platform 'Apple' at 0x7f984cd1e010&gt;
Choice [0]:1
Choose device(s):
[0] &lt;pyopencl.Device 'Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz' on 'Apple' at 0x7f984cc1f090&gt;
[1] &lt;pyopencl.Device 'Intel(R) UHD Graphics 630' on 'Apple' at 0x7f984cc19370&gt;
[2] &lt;pyopencl.Device 'AMD Radeon Pro 560X Compute Engine' on 'Apple' at 0x7f984cc19390&gt;
Choice, comma-separated [0]:2
Set the environment variable PYOPENCL_CTX='1:2' to avoid being asked again.
PASSED
[-0.13433748]
[-0.13433748]
</code></pre>
<p>Any help is appreciated! Thanks. </p>
</div>
<div class="post-text" itemprop="text">
<h2>Background</h2>
<p>I managed to reproduce the behavior:</p>
<ul>
<li>On <em>Win</em> - but this shouldn't be a problem since (I assume that) things are the same on <em>OSX</em></li>
<li>The <em>Python</em> from the (current) <em>Anaconda</em> environment and <em>Anaconda</em>'s default one (which corresponds to <em>base</em> environment) are distinct. If this is not the case, the answer (or parts of it) <strong>might be</strong> incorrect. Note that there are the only 2 <em>Python</em>s that I'm going to reference, <strong>they are both internal to <em>Anaconda</em></strong> (even if the <em>Anaconda</em> "keyword" will not be present)</li>
<li>I used <em>PyGraphviz</em> in my test scenarios (instead of <em>PyOpenCL</em>)</li>
</ul>
<p><em>code0.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import os
import pprint


print(f"Python Executable: {sys.executable}")
print(f"Version {sys.version} on {sys.platform}\n")

conda_env_var = "CONDA_DEFAULT_ENV"
conda_env = os.environ[conda_env_var]
print(f"{conda_env_var}: {conda_env}\n")

sys_path = pprint.pformat(sys.path)
print(f"sys.path: {sys_path}\n")

path_var = "PATH"
env_path = pprint.pformat([item for item in os.environ[path_var].split(os.pathsep) if item.find(conda_env) &gt; -1])
print(f"os.environ[\"{path_var}\"] (relevant): {env_path}\n")

import pygraphviz
print(pygraphviz)
</code></pre>
<p><strong>Output</strong>:</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; python code0.py
Python Executable: E:\Install\x64\Anaconda\Anaconda\2018.12\envs\py_064_030701_test0\python.exe
Version 3.7.1 (default, Dec 10 2018, 22:54:23) [MSC v.1915 64 bit (AMD64)] on win32

CONDA_DEFAULT_ENV: py_064_030701_test0

sys.path: ['e:\\Work\\Dev\\StackOverflow\\q055251357',
 'E:\\Work\\Dev\\Utils',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\python37.zip',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\DLLs',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\lib',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\lib\\site-packages']

os.environ["PATH"] (relevant): ['E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\Library\\mingw-w64\\bin',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\Library\\usr\\bin',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\Library\\bin',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\Scripts',
 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\bin']

&lt;module 'pygraphviz' from 'E:\\Install\\x64\\Anaconda\\Anaconda\\2018.12\\envs\\py_064_030701_test0\\lib\\site-packages\\pygraphviz\\__init__.py'&gt;


(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; where jupyter-notebook
E:\Install\x64\Anaconda\Anaconda\2018.12\Scripts\jupyter-notebook.exe

(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; jupyter-notebook
[I 01:16:10.345 NotebookApp] JupyterLab extension loaded from E:\Install\x64\Anaconda\Anaconda\2018.12\lib\site-packages\jupyterlab
[I 01:16:10.346 NotebookApp] JupyterLab application directory is E:\Install\x64\Anaconda\Anaconda\2018.12\share\jupyter\lab
[I 01:16:10.349 NotebookApp] Serving notebooks from local directory: e:\Work\Dev\StackOverflow\q055251357
[I 01:16:10.350 NotebookApp] The Jupyter Notebook is running at:
[I 01:16:10.352 NotebookApp] http://localhost:8888/?token=14412a6d6d0c895d059a86bcd71e10cbface4a479c5843c2
[I 01:16:10.353 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 01:16:10.437 NotebookApp]

    To access the notebook, open this file in a browser:
        file:///C:/Users/cfati/AppData/Roaming/jupyter/runtime/nbserver-24700-open.html
    Or copy and paste one of these URLs:
        http://localhost:8888/?token=14412a6d6d0c895d059a86bcd71e10cbface4a479c5843c2
[I 01:17:18.569 NotebookApp] 302 GET /?token=14412a6d6d0c895d059a86bcd71e10cbface4a479c5843c2 (::1) 0.98ms
[I 01:17:25.161 NotebookApp] Creating new notebook in
[I 01:17:26.147 NotebookApp] Kernel started: 8b702b2d-97d0-40e3-bbca-42107efd1de5
[I 01:17:27.186 NotebookApp] Adapting to protocol v5.1 for kernel 8b702b2d-97d0-40e3-bbca-42107efd1de5
</code></pre>
</blockquote>
<p>And the same script ran into the <em>Jupyter Notebook</em>:</p>
<p><a href="https://i.stack.imgur.com/cicR2.jpg" rel="nofollow noreferrer"><img alt="Img0" src="https://i.stack.imgur.com/cicR2.jpg"/></a></p>
<p>As seen, it fails and that is because it's ran by <em>Anaconda</em>'s default <em>Python</em> (which doesn't have the package installed). Took a look and noticed that the <em>jupyter-notebook</em> executable launches (<em>Anaconda</em>'s default) <em>Python</em> on <em>jupyter-notebook-script.py</em> (from the same dir).</p>
<p>Possible solutions:</p>
<h2>1. Install the missing package(s) in the main <em>Python</em></h2>
<p>This was the 1<sup>st</sup> that came to my mind: installing <em>PyGraphviz</em> (and all the other required ones). <strong>Didn't try it, but it should work</strong>. The reason why I didn't try it, is because I am against polluting the main <em>Python</em> with packages. But, since it already contains an awful amount of <em>site-packages</em>, things are debatable.</p>
<h2>2. Register the current environment <em>Python</em> as a kernel</h2>
<p>I tried to make <em>jupyter-notebook</em> launching the current environment <em>Python</em> installation instead, using its configuration, or altering <em>%CONDA_PYTHON_EXE%</em>, but no success (note that it's my 1<sup>st</sup> time working with <em>Jupyter</em>). Anyway after some investigations, I realized that <em>jupyter-notebook</em> executable launches the <em>Python</em> that <em>Jupyter</em> is installed in. This is a common technique, and it's done by hardcoding the <em>Python</em> path into the executables (although strangely, looking at it with a <em>hex</em> editor didn't find it).</p>
<p>While searching, I ran into <a href="https://stackoverflow.com/questions/46270435/changing-python-executable/46270547#46270547">[SO]: Changing Python Executable (@Matt's answer)</a> and from there to <a href="https://ipython.readthedocs.io/en/stable/install/kernel_install.html" rel="nofollow noreferrer">[ReadTheDocs.IPython]: Installing the IPython kernel</a>, and gave that a shot:</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; where pip
E:\Install\x64\Anaconda\Anaconda\2018.12\envs\py_064_030701_test0\Scripts\pip.exe
E:\Install\x64\Anaconda\Anaconda\2018.12\Scripts\pip.exe

(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; pip freeze
certifi==2019.3.9
pygraphviz==1.5
wincertstore==0.2

(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; pip install ipykernel
Collecting ipykernel

...
# Some pip useless output
...

Installing collected packages: tornado, colorama, six, ipython-genutils, decorator, traitlets, backcall, pygments, pickleshare, wcwidth, prompt-toolkit, parso, jedi, ipython, jupyter-core, python-dateutil, pyzmq, jupyter-client, ipykernel
Successfully installed backcall-0.1.0 colorama-0.4.1 decorator-4.4.0 ipykernel-5.1.0 ipython-7.4.0 ipython-genutils-0.2.0 jedi-0.13.3 jupyter-client-5.2.4 jupyter-core-4.4.0 parso-0.3.4 pickleshare-0.7.5 prompt-toolkit-2.0.9 pygments-2.3.1 python-dateutil-2.8.0 pyzmq-18.0.1 six-1.12.0 tornado-6.0.2 traitlets-4.3.2 wcwidth-0.1.7

(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; where python
E:\Install\x64\Anaconda\Anaconda\2018.12\envs\py_064_030701_test0\python.exe
E:\Install\x64\Anaconda\Anaconda\2018.12\python.exe

(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; python -m ipykernel install --name %CONDA_DEFAULT_ENV%
Installed kernelspec py_064_030701_test0 in C:\ProgramData\jupyter\kernels\py_064_030701_test0
</code></pre>
</blockquote>
<p>After launching it, <strong>and selecting the newly created kernel</strong> (like in the image below) things went fine.</p>
<p><a href="https://i.stack.imgur.com/p1P8o.jpg" rel="nofollow noreferrer"><img alt="Img1" src="https://i.stack.imgur.com/p1P8o.jpg"/></a></p>
<p>This is basically what @AndrásNagy also explained in his answer.</p>
<p>Although this was my 1<sup>st</sup> choice at the beginning, using current environment <em>Python</em> to write its metadata in a location where main <em>Python</em> (and other <em>Python</em>s not necessarily inside <em>Anaconda</em>) could read it from, doesn't seem so straightforward to me (although it might be the recommended approach).</p>
<h2>3. Install <em>Jupyter</em> in the current environment <em>Python</em></h2>
<p>I also thought of this from the beginning, but I didn't get to it right away because of the previous approach. I thought that <em>Jupyter</em> has a lot of dependencies (which it's true), but so does <em>IPyKernel</em>. However, now I think it's the the simplest way.</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; pip install jupyter
Collecting jupyter

...
# Some pip useless output
...

Installing collected packages: qtconsole, testpath, defusedxml, entrypoints, webencodings, bleach, mistune, MarkupSafe, jinja2, pandocfilters, attrs, pyrsistent, jsonschema, nbformat, nbconvert, Send2Trash, prometheus-client, pywinpty, terminado, notebook, widgetsnbextension, ipywidgets, jupyter-console, jupyter
Successfully installed MarkupSafe-1.1.1 Send2Trash-1.5.0 attrs-19.1.0 bleach-3.1.0 defusedxml-0.5.0 entrypoints-0.3 ipywidgets-7.4.2 jinja2-2.10 jsonschema-3.0.1 jupyter-1.0.0 jupyter-console-6.0.0 mistune-0.8.4 nbconvert-5.4.1 nbformat-4.4.0 notebook-5.7.8 pandocfilters-1.4.2 prometheus-client-0.6.0 pyrsistent-0.14.11 pywinpty-0.5.5 qtconsole-4.4.3 terminado-0.8.2 testpath-0.4.2 webencodings-0.5.1 widgetsnbextension-3.4.2


(py_064_030701_test0) [cfati@CFATI-5510-0:e:\Work\Dev\StackOverflow\q055251357]&gt; where jupyter-notebook
E:\Install\x64\Anaconda\Anaconda\2018.12\envs\py_064_030701_test0\Scripts\jupyter-notebook.exe
E:\Install\x64\Anaconda\Anaconda\2018.12\Scripts\jupyter-notebook.exe
</code></pre>
</blockquote>
<p>Needless to say that launching <em>jupyter-notebook</em> (<strong>notice that it's a different executable</strong>) did the trick (as installing <em>Jupyter</em> also registers the <em>Python</em> installation as a kernel).</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I had the same problem as you!
I had a problem that the anaconda environment kernel did not show up in my jupyter notebook when I started that jupyter notebook from my conda environment!</p>
<p>Please consider the following:</p>
<pre><code>conda activate YourEnvironmentName
pip install ipykernel 
python -m ipykernel install --user --name=YourEnvironmentName
</code></pre>
<p>Hopefully after this you will be able to start your Jupyter notebook with</p>
<pre><code>jupyter notebook --ip=0.0.0.0 --port=8080
</code></pre>
<p>And select the conda environment from the list of kernels where you have installed pyopencl</p>
</div>
<span class="comment-copy">I would suggest to you to "print (sys.path)" in the Jupyter notebook and check the module you are trying to import indeed is there in one of the folders identified by the sys.path . Of course you need to "import sys" first.</span>
<span class="comment-copy">So...it looks like my conda environment (/anaconda3/envs/openCL37/) isn't in the path. So I tried to add sys.path.append("/anaconda3/envs/openCL37/") but that didn't work. How do I find out where the pyopencl is actually installed in part of anaconda? Like, what path should I be including?</span>
<span class="comment-copy">In your environment, try doing "conda install pyopencl"</span>
<span class="comment-copy">Yes, tried that already. No dice.</span>
<span class="comment-copy">Did you try running <i>jupyter_mac.command</i> from the <i>Anaconda Prompt</i>?</span>
