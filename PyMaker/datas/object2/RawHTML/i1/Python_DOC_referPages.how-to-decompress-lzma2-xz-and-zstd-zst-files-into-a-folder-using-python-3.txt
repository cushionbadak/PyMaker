<div class="post-text" itemprop="text">
<p>I have been working for a long time with <code>.bz2</code> files. To unpack/decompress <code>.bz2</code> files into a specific folder I have been using the following function: </p>
<pre><code>destination_folder = 'unpacked/'
def decompress_bz2_to_folder(input_file):
    unpackedfile = bz2.BZ2File(input_file)
    data = unpackedfile.read()
    open(destination_folder, 'wb').write(data)
</code></pre>
<p>Recently I obtained a list of files with the <code>.xz</code> (not <code>.tar.xz</code>) and <code>.zst</code> extensions. My poor research skills told me that the former is <code>lzma2</code> compression and the latter is <code>Zstandard</code>. </p>
<p>However, I couldn't find of an easy way to unpack the contents of these archives into a folder (like I do with the <code>.bz2</code> files). </p>
<p>How can I: </p>
<ol>
<li>Unpack the contents of an <code>.xz</code> (<code>lzma2</code>) file into a folder using
Python 3? </li>
<li>Unpack the contents of a <code>.zst</code> (<code>Zstandard</code>) file into a folder using Python 3?</li>
</ol>
<p><strong>Important Note:</strong> I'm unpacking <a href="https://files.pushshift.io/reddit/comments/" rel="nofollow noreferrer">very large files</a>, so it would be great if the solution takes into consideration any potential <strong><em>Memory Errors</em></strong>. </p>
</div>
<div class="post-text" itemprop="text">
<p>The LZMA data can be decompressed using the <a href="https://docs.python.org/3/library/lzma.html" rel="nofollow noreferrer"><code>lzma</code> module</a>, simply open the file with that module, then use <a href="https://docs.python.org/3/library/shutil.html#shutil.copyfileobj" rel="nofollow noreferrer"><code>shutil.copyfileobj()</code></a> to efficiently copy the decompressed data to an output file without running into memory issues:</p>
<pre><code>import lzma
import pathlib
import shutil

def decompress_lzma_to_folder(input_file):
    input_file = pathlib.Path(input_file)
    with lzma.open(input_file) as compressed:
        output_path = pathlib.Path(destination_dir) / input_file.stem
        with open(output_path, 'wb') as destination:
            shutil.copyfileobj(compressed, destination)
</code></pre>
<p>The Python standard library doesn't have any support for Zstandard compression yet, you can use either the <a href="https://pypi.org/project/zstandard/" rel="nofollow noreferrer"><code>zstandard</code></a> (by IndyGreg from Mozilla and the Mercurial project) or <a href="https://pypi.org/project/zstd/" rel="nofollow noreferrer"><code>zstd</code></a>; the latter is perhaps too basic for your needs, while <code>zstandard</code> offers a streaming API specifically suited for reading files.</p>
<p>I'm using the <code>zstandard</code> library here to benefit from the copying API it implements, which lets you decompress and copy at the same time, similar to how <code>shutil.copyfileobj()</code> works:</p>
<pre><code>import zstandard
import pathlib
import shutil

def decompress_zstandard_to_folder(input_file):
    input_file = pathlib.Path(input_file)
    with open(input_file, 'rb') as compressed:
        decomp = zstandard.ZstdDecompressor()
        output_path = pathlib.Path(destination_dir) / input_file.stem
        with open(output_path, 'wb') as destination:
            decomp.copy_stream(compressed, destination)
</code></pre>
</div>
<span class="comment-copy">The <code>zstd</code> cli can decompress both <code>.xz</code> and <code>.zst</code> files, if built with appropriate options. This can be checked with <code>zstd -vV</code>. Example : <code>zstd -vV</code>, <code>*** zstd command line interface 64-bits v1.3.2, by Yann Collet ***</code>, <code>*** supports: zstd, zstd legacy v0.4+, gzip, lz4, lzma, xz</code></span>
<span class="comment-copy">@Cyan That's good to know. How can it be done in Python 3 though? :)</span>
<span class="comment-copy">By invoking the CLI as an external command line utility ?  If you have to use tighter integration instead, you may be interested in a <a href="https://pypi.org/project/zstandard/" rel="nofollow noreferrer">python wrapper</a>.</span>
<span class="comment-copy">+1 tested with 4GB example file, speed is 3/1 of 7Zip but working fine without memory issues. Great Job!</span>
<span class="comment-copy">Amazing answer! Once I confirm that it works for both very large <code>lzma</code> and <code>zstandard</code> files I will mark as it correct and award the bounty. Can you add a few comments however? Specifically, I don't know at all how <code>input_file.stem</code> operates. What does <code>.stem</code> do?</span>
<span class="comment-copy">@Aventinus thatâ€™s that base filename without the last extension. So the stem of <code>/path/to/basename.ext.zst</code> is <code>basename.ext</code>.</span>
<span class="comment-copy">@MartijnPieters I feel I should have known that already. Thanks!</span>
