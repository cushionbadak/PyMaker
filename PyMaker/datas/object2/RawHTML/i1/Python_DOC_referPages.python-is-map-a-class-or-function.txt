<div class="post-text" itemprop="text">
<p>It's used as a function, but why:</p>
<pre><code>&gt;&gt;&gt; help(map)
Help on class map in module builtins:

class map(object)
 |  map(func, *iterables) --&gt; map object
 |
 |  Make an iterator that computes the function using arguments from
 |  each of the iterables.  Stops when the shortest iterable is exhausted.
 |
 |  Methods defined here:
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
...
</code></pre>
<p>How to understand the above output, where it shows a class and some methods?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The misunderstanding is due to poor documentation that doesn't catch a major change in specs, or due to the CPython implementation which <em>dare</em> to write a class for what is listed as a <em>built-in function</em> in the specs.</p>
<p>In Python 2, it <em>is</em> a function that returns a list. In the online documentation of Python 2, it is listed under <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">Built-in Functions</a>. The first line of <code>help(map)</code> on CPython 2.7.10 reads</p>
<blockquote>
<p>Help on built-in function map in module <strong>builtin</strong></p>
</blockquote>
<p>correctly calling it a function. </p>
<p>In Python 3, they changed the specs that it returns an iterator instead of a list. As @RafaelC noted, it has an advantage of lazy loading. Althiugh it is still under "Built-n Functions", the CPython implementation decided to make it a class. This change is reflected in <code>help(map)</code>, which you have seen and quoted in the question.</p>
<p>What you are doing when you call <code>map()</code> in CPython 3 is, you are creating an object of class <code>map</code> with the parameters you throw. This is clearly shown when you try to print what <code>map()</code> returns.</p>
<p>CPython 2.7.10:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; map(int, "12345")
[1, 2, 3, 4, 5]
</code></pre>
<p>CPython 3.7.2:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; map(int, "12345")
&lt;map object at 0x1023454e0&gt;
</code></pre>
<p>So you are clearly creating an object of class <code>map</code>, which makes what you've seen in <code>help(map)</code> sound very fine.</p>
<p>So it seems that, to the CPython core developers, <em>a class can be a "function"</em> with some definiton of a "function". This is clearly misleading. Anyway, it implements the necessary methods that enables it to be used as an iterator. (as the docs says, if you ignore that it's listed under builtin functions.)</p>
<hr/>
<blockquote>
<p>It's used as a function</p>
</blockquote>
<p>That's because the syntax of calling a function and fetching its return value is identical to creating a class object (by calling its initializer) and fetching the object.</p>
<p>For example, using a function <code>my_function()</code> as in <code>return_value = my_function()</code> is syntactically no different from creating a class object of <code>my_class()</code> as in <code>my_object = my_class()</code>. When you call <code>map()</code> in CPython 3, you are creating an object of class <code>map</code>. But you would write the same even if <code>map</code> were a function. That's why you're confused.</p>
<hr/>
<p>So in short,</p>
<ol>
<li><p><code>map</code> <em>was</em> a function in CPython 2, but <em>is</em> a class in CPython 3. That is clear from <code>help(map)</code> on both versions, and that's what the CPython implementation does.</p></li>
<li><p>The documentation keeps it under "Built-in functions" while CPython implementation finds liberty to write a class for it, causing confusion.</p></li>
<li><p>It's a shame that the two aren't clearly distinguished in the docs.</p></li>
</ol>
</div>
<span class="comment-copy">"It's used as a function" says who?</span>
<span class="comment-copy">@coldspeed Common intuition and usage...? Consider that it's lowercased and (seemingly) easily implementable as a generator function.</span>
<span class="comment-copy">A lot of Python builtin/stdlib "functions" are implemented as classes. <code>itertools.groupby()</code> was another one that surprised me.</span>
<span class="comment-copy">I think you're asking the wrong question, "how to understand the above output." It clearly says <code>map</code> is a class and it has methods, and that's not what you don't understand. You are confused between your previous belief that <code>map</code> was a function and the given fact that it is a class. (And I don't think it's your fault, as even <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">the official documentation</a> list it as a built-in function.)</span>
<span class="comment-copy">In python2, <code>map</code> is indeed a function which returns a list. In python3, <code>map</code> returns a <code>map</code> object, and the interface looks like that of a class. Main reason for that is advantages of <i>lazy loading</i></span>
<span class="comment-copy">The fact that it's a class is an implementation detail with no bearing on normal usage of <code>map</code>, and not a documented guarantee. As far as duck typing goes, it's a thing that supports the function call operator, so it's a function. This is the primary way the concept of "function" is used in Python documentation; plenty of things that aren't instances of <code>types.FunctionType</code> or <code>types.BuiltinFunctionType</code> are documented as functions (and plenty of things that <i>are</i> instances of <code>types.BuiltinFunctionType</code> are actually methods).</span>
<span class="comment-copy">@user2357112 Yeah, after reading the "Built-in Functions" page a couple more times, I agree that it doesn't <i>need</i> to be a class. But I still think listing it under "Built-in functions" is misleading. They could have had a list of "Built-in callables" or whatever..</span>
<span class="comment-copy">And I revised my answer, admitting that I mixed up with implentation details and spec requirements.</span>
<span class="comment-copy">Thanks for the info.</span>
