<div class="post-text" itemprop="text">
<p>I planned to validate if my Python 3.6 code has any cyclic reference.</p>
<p>Given an object, get_referrers <a href="https://docs.python.org/3/library/gc.html#gc.get_referrers" rel="nofollow noreferrer">https://docs.python.org/3/library/gc.html#gc.get_referrers</a> returns all objects that refer to the object. However, the following returns []</p>
<pre><code>[o for o in gc.get_objects() if not bool(gc.get_referrers(o))]
</code></pre>
<p>which means all objects have at least one referrer.</p>
<p>I also found <a href="https://mg.pov.lt/objgraph/objgraph.html#objgraph.is_proper_module" rel="nofollow noreferrer">https://mg.pov.lt/objgraph/objgraph.html#objgraph.is_proper_module</a> that uses modules as roots.</p>
<pre><code>[o for o in gc.get_objects() if objgraph.is_proper_module(o)]
</code></pre>
<p>although the modules can still refer to each other... Is this the correct way to find roots?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's pretty easy to have a GC-tracked object with no referrers known to the GC. For example,</p>
<pre><code>&gt;&gt;&gt; gc.get_referrers([1, 2, 3])
[]
</code></pre>
<p>No referrers returned. The GC doesn't know about references on a frame object's value stack (except for frames of suspended generators and coroutines), which is where the reference to the <code>[1, 2, 3]</code> list comes from.</p>
<p>Other cases include objects whose only references live in C global or local variables.</p>
</div>
