<div class="post-text" itemprop="text">
<p>I have a list of variables that I have defined so far in my program (I got it via dir() command). The list contains strings that are the names of those variables.</p>
<p>I want to find the type of each one of them. The <code>type()</code> command returns <code>"str"</code>. Which is what they are (literally speaking), but I want what the variable type really is, before converting its name to a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>If these variables are local, you can use <code>locals()['name']</code> or <code>vars()['name']</code> to access them (see section "Some more explanation" about their difference)</p>
<p>For global variables, use <code>globals()['name']</code></p>
<pre><code>a = 'some string'
b = 123
c = 1.234
d = [1, 2, 3, 4]

print(type(locals()['a']))
print(type(locals()['b']))
print(type(locals()['c']))
print(type(locals()['d']))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>&lt;class 'str'&gt;
&lt;class 'int'&gt;
&lt;class 'float'&gt;
&lt;class 'list'&gt;
</code></pre>
<hr/>
<p><strong>Some more explanation:</strong></p>
<ul>
<li><code>globals()</code> <em>always</em> returns the dictionary of the <em>module</em> namespace</li>
<li><code>locals()</code> <em>always</em> returns <em>a</em> dictionary of the <em>current</em> namespace</li>
<li><code>vars()</code> returns <em>either a</em> dictionary of the current namespace (if called with no argument) or <em>the</em> dictionary of the argument.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>&gt;&gt;&gt; b = 3
&gt;&gt;&gt; for var in dir():
    print(var, type(vars()[var]))


__annotations__ &lt;class 'dict'&gt;
__builtins__ &lt;class 'module'&gt;
__doc__ &lt;class 'NoneType'&gt;
__loader__ &lt;class 'type'&gt;
__name__ &lt;class 'str'&gt;
__package__ &lt;class 'NoneType'&gt;
__spec__ &lt;class 'NoneType'&gt;
b &lt;class 'int'&gt;
var &lt;class 'str'&gt;
</code></pre>
</div>
<span class="comment-copy">Out of curiosity, what use do you have, other than debugging purposes, to retrieve the type of every variable in scope?</span>
