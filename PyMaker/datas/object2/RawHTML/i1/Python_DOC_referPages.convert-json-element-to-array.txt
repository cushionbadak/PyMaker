<div class="post-text" itemprop="text">
<p>I'm new to Python and haven't been coding for a while. Is there a way to convert a element in a JSON structure to an array?</p>
<p><strong>Example</strong></p>
<p>Given: </p>
<pre><code>{
    "persons": 
        {
            "city": "Seattle", 
            "name": "Brian"
        }
}
</code></pre>
<p>Required: </p>
<pre><code>{
    "persons": [
        {
            "city": "Seattle", 
            "name": "Brian"
        }
    ]
}
</code></pre>
<p>Background: 
I want to insert a JSON into a Big Query Table using repeating records. 
But the fields are not required to be repeating, it just happens in some cases. As soon I have a array everything works fine, if the array is missing, an error is returned. 
Now I'm looking for some python function where I just can say make my persons element an array with one element. </p>
<p>Best regards</p>
<p>Edit: </p>
<p>to get a bit more concrete: 
My structure looks like following. </p>
<pre><code>{
"a" : {
    "b" : [
        {
            "c" : {
                "foo" : "bar",
                ...
            },
            "d" : {
                "foo" : "bar",
                ...
            },
            "e" : "bar"
        },
        {
            "c" : [
                {
                    "foo" : "bar",
                    ...
                },
                {
                    "foo" : "bar",
                    ...
                },
                {
                    "foo" : "bar",
                    ...
                },
                {
                    "foo" : "bar",
                    ...
                },
                {
                    "foo" : "bar",
                    ...
                }
            ],
            "d" : {
                "foo" : "bar",
                    ...
            },
            "e" : "bar"
        },
        {
            "c" : {
                "foo" : "bar",
                ...
            },
            "d" : {
                "foo" : "bar",
                ...
            },
            "e" : "bar"
        }
    ]
},
"f" : {
    "foo" : "bar",
    ....
}
</code></pre>
<p>}</p>
<p>b and c can be repeated but they don't have to. Anyway I need both of the elements as an array. Best way would be a reusable function with the JSON, b and c as input as we have different JSON files with different structures. </p>
<p>Currently I try to use @ajrwhite approach to achieve my requierements but I'm struggeling a bit. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is a common issue with working with deeply-nested JSON-style structures in Python (e.g. with MongoDB extracts).</p>
<p>Here is a recursive approach which wraps all <code>dicts</code> contained within one large <code>dict</code> in <code>[]</code>:</p>
<pre><code>def listify_dict(var):
    if isinstance(var, dict):
        output_dict = var.copy()
        for k, v in var.items():
            output_dict[k] = listify_dict(v)
        return [output_dict]
    elif isinstance(var, list):
        output_list = var.copy()
        for i, v in enumerate(output_list):
            output_list[i] = listify_dict(v)
        return output_list
    else:
        return var
</code></pre>
<p>Example:</p>
<pre><code>test = {
    "persons": 
        {
            "city": "Seattle", 
            "name": "Brian"
        }
}
listify_dict(test)
</code></pre>
<p>Output:</p>
<pre><code>[{'persons': [{'city': 'Seattle', 'name': 'Brian'}]}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change the particular element to list and re-assign:</p>
<pre><code>j_data = {
    "persons":
        {
            "city": "Seattle",
            "name": "Brian"
        }
}

j_data['persons'] = [j_data['persons']]
print(j_data)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>{'persons': [{'city': 'Seattle', 'name': 'Brian'}]}
</code></pre>
<p><strong>Pretty printing with the <code>indent</code> parameter</strong>:</p>
<pre><code>j_data = {
    "persons":
        {
            "city": "Seattle",
            "name": "Brian"
        }
}

j_data['persons'] = [j_data['persons']]
import json
print(json.dumps(j_data, indent=4, sort_keys=True))
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>{
    "persons": [
        {
            "city": "Seattle",
            "name": "Brian"
        }
    ]
}
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>Incase you want to convert all the elements to list, a simple loop would do it:</p>
<pre><code>j_data = {
    "persons":
        {
            "city": "Seattle",
            "name": "Brian"
        },
    "cars":
        {
            "car1": "Tesla",
            "car2": "Toyota"
        }
}

for elem in j_data:
    j_data[elem] = [j_data[elem]]
# print(j_data)
import json
print(json.dumps(j_data, indent=4, sort_keys=True))
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>{      
    "persons": [
        {
            "city": "Seattle",
            "name": "Brian"
        }
    ],
     "cars": [
        {
            "car1": "Tesla",
            "car2": "Toyota"
        }
    ]
}
</code></pre>
</div>
<span class="comment-copy">show us what have you done till now. Your piece of code.</span>
<span class="comment-copy">use <code>json</code> module</span>
<span class="comment-copy">in your example "persons" is a list with a single item, a dictionary. is this what you want? you can convert the JSON to a python object and mess with it however you want, use the <a href="https://docs.python.org/3.6/library/json.html" rel="nofollow noreferrer">JSON</a> module</span>
<span class="comment-copy">You can cast the dictionnary into an array such as <code>value = [value]</code></span>
<span class="comment-copy">Are you just after - <code>d['persons'] = [d['persons']]</code> ?</span>
<span class="comment-copy">This is the manual approach, but I think user needs something that can be automated across a larger structure?</span>
<span class="comment-copy">@ajrwhite Edited for it :)</span>
<span class="comment-copy">Yes this works on the example, but JSON structures are often deeply nested, so a top-level loop over the items won't work. See my answer for a recursive approach <a href="https://stackoverflow.com/a/55241895/5447172">stackoverflow.com/a/55241895/5447172</a></span>
<span class="comment-copy">@ajrwhite Indeed, but it looks like the top-level element manipulation from the question. Awaiting OP's response.</span>
<span class="comment-copy">sure - not criticising your answer. I may be assuming too much from the question. My experience of JSON is that in practice you are often trying to apply this cleaning at varying levels of depth, and it often makes sense to use recursion.</span>
