<div class="post-text" itemprop="text">
<p>I have multiple columns in a data frame that have numerical data. I want to quartile each column, changing each value to either q1, q2, q3 or q4. </p>
<p>I currently loop through each column and change them using the pandas qcut function:</p>
<pre><code>for column_name in df.columns:
    df[column_name] = pd.qcut(df[column_name].astype('float'), 4, ['q1','q2','q3','q4'])
</code></pre>
<p>This is very slow! Is there a faster way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Played around with the the following example a little.  Looks like converting to float from a string is increasing the time.  Though a working example was not provided, so the original type can't be known.  <code>df[column].astype(copy=)</code> appears to be performant if copying or not.  Not much else to go after.</p>
<pre><code>import pandas as pd
import numpy as np
import random
import time

random.seed(2)

indexes = [i for i in range(1,10000) for _ in range(10)]
df = pd.DataFrame({'A': indexes, 'B': [str(random.randint(1,99)) for e in indexes], 'C':[str(random.randint(1,99)) for e in indexes], 'D':[str(random.randint(1,99)) for e in indexes]})
#df = pd.DataFrame({'A': indexes, 'B': [random.randint(1,99) for e in indexes], 'C':[random.randint(1,99) for e in indexes], 'D':[random.randint(1,99) for e in indexes]})

df_result = pd.DataFrame({'A': indexes, 'B': [random.randint(1,99) for e in indexes], 'C':[random.randint(1,99) for e in indexes], 'D':[random.randint(1,99) for e in indexes]})

def qcut(copy, x):
    for i, column_name in enumerate(df.columns):
        s = pd.qcut(df[column_name].astype('float', copy=copy), 4, ['q1','q2','q3','q4'])
        df_result["col %d %d"%(x, i)] = s.values

times = []
for x in range(0,10):
    a = time.clock()
    qcut(True, x)
    b = time.clock()
    times.append(b-a)

print np.mean(times)

for x in range(10, 20):
    a = time.clock()
    qcut(False, x)
    b = time.clock()
    times.append(b-a)
print np.mean(times)

</code></pre>
</div>
<span class="comment-copy">What is the shape of your <code>DataFrame</code>, and how long is it taking?</span>
<span class="comment-copy">@ALollz At most, 1100 columns by 48000 rows</span>
<span class="comment-copy">df[column_name].astype() has a copy parameter and is copy true on default</span>
<span class="comment-copy">what is the type of the original dataframe columns? If not numerical, that astype() might hurt a little.  Please supply an mcve  <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">@RichAndrews I think that might have been it and it looks to be running faster now. I'll edit questions thought later perhaps as it would be good to run it faster than qcut. Maybe labels make it slow?</span>
