<div class="post-text" itemprop="text">
<p>I have a piece of code that is in charge of spawning new independent processes (which should live after the main process terminates).</p>
<p>When I run this code using 'run' from <code>PyCharm</code> they do get spawned independently and stay alive even after their parent terminates.</p>
<p>The problem is when running from a cmd shell (in windows), they get spawned but it seems as if they are bound to the spawning shell (Not the python script), so the main script finishes but the shell stays active and once I close it the processes gets terminated. </p>
<pre><code>service_path = "some_service_path"
service_arguments = "some arguments"
python_execution_location = os.path.join(os.environ["PYTHON3_ROOT"], "python.exe")
execution_value = "{} {} {}".format(python_execution_location, service_path, service_arguments)
my_process = subprocess.Popen(execution_value, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In windows, you could make use of <code>creationflags</code> option of <code>Popen</code>.</p>
<pre class="lang-py prettyprint-override"><code>DETACHED_PROCESS = 8 # bit mask taken from the linked doc below
subprocess.Popen(executable, creationflags=DETACHED_PROCESS, close_fds=True)
</code></pre>
<p>Which will create a detached process (demon process). </p>
<p><a href="https://docs.microsoft.com/en-us/windows/desktop/ProcThread/process-creation-flags" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/windows/desktop/ProcThread/process-creation-flags</a></p>
<blockquote>
<p>For console processes, the new process does not inherit its parent's
  console (the default). The new process can call the AllocConsole
  function at a later time to create a console. For more information,
  see Creation of a Console.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You might need to send a creationflags arg to make it a seperate process altogether</p>
<pre><code>subprocess.Popen(executable, creationflags=subprocess.CREATE_NEW_PROCESS_GROUP, close_fds=True)
</code></pre>
<p><a href="https://docs.python.org/3.6/library/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP" rel="nofollow noreferrer">python.org link </a></p>
</div>
<span class="comment-copy">@Abhineet Why should that change anything? According to the documentation setting shell=true sets the CREATE_NEW_CONSOLE flag to true by default, meaning it should be completley independent.</span>
<span class="comment-copy">okay, I read about that. Are you trying to run some service code using Python.exe? And when you say, the child terminates, you mean the Python.exe and service, both of them terminates on closing the console, right?</span>
<span class="comment-copy">The python scripts are "services" which need to get raised by the main python script (main process). When I close the shell all processes terminate.</span>
<span class="comment-copy">@Rohi - Does this help? <a href="https://stackoverflow.com/questions/32808730/running-python-script-as-a-windows-background-process" title="running python script as a windows background process">stackoverflow.com/questions/32808730/…</a></span>
<span class="comment-copy">@ScottSkiles I wasn’t aware of the pythonw.exe so I learned something new. But unfortunately it doesn’t help me because I do want the console to be visible. I just want the spawned processes to not be bound to it.</span>
