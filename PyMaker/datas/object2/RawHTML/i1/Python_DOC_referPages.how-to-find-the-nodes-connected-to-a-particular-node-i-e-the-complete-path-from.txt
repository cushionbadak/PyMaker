<div class="post-text" itemprop="text">
<p>I wrote a program which, by giving the <code>source</code> and <code>end</code> nodes, gives the complete path in a graph. now I need to find the <code>start</code> to <code>end</code> path if I provide any intermediate node. </p>
<pre><code># function to find path 
def find_path(graph, start, end, path =[]): 
    path = path + [start] 
    if start == end: 
    return path 
    for node in graph[start]: 
        #print(start)
        #print(graph[start])
        print(node)
        if node not in path: 
            newpath = find_path(graph, node, end, path)
            print(newpath)
            if newpath:  
            return newpath 
        return None


graph ={ 
'a':['c'], 
'b':['d'], 
'c':['e'], 
'd':['a', 'd'], 
'e':['b', 'c'] 
} 
# Driver function call to print the path 
print(find_path(graph, 'd', 'c'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fixed a few bugs:</p>
<pre><code>def find_path(graph, start, end, path=None):
    if path is None:
        path = []
    path += start
    if start == end:
        return path
    for node in graph[start]:
        if node not in path:
            newpath = find_path(graph, node, end, path)
            if newpath:
                return newpath
    return None


graph = {'a': ['c'], 'b': ['d'], 'c': ['e'], 'd': ['a', 'd'], 'e': ['b', 'c']}
answer = find_path(graph, 'd', 'b')
print(answer)
</code></pre>
<p>Another version:</p>
<pre><code>def find_path(graph, start, end, nodes_visited=None):
    path_answer = []
    if start == end:
        path_answer = [start]
        return path_answer
    if nodes_visited is None:
        nodes_visited = []
    nodes_visited.append(start)
    for neighbour in graph[start]:
        if neighbour == end or neighbour not in nodes_visited:
            neighbour_path = find_path(graph, neighbour, end, nodes_visited)
            if neighbour_path:
                path_answer = [start] + neighbour_path
                break
    return path_answer


graph = {'a': ['c'], 'b': ['d'], 'c': ['e'], 'd': ['a', 'd'], 'e': ['b', 'c']}
answer = find_path(graph, 'd', 'b')
print(answer)
</code></pre>
</div>
<span class="comment-copy">Provide a sample I/O?</span>
<span class="comment-copy"><code>find_path(graph, start, end, **path =[]** ):</code> this is a very bad idea, path will stay between iterations</span>
<span class="comment-copy">@DirtyBit suppose i give an input as node A i should obtain the path as E,B,D,A,C</span>
<span class="comment-copy">you misunderstood my meaning, what i meant is that in YOUR function definition you did <code>path = []</code> this is bad design. the second time you run this function it will still contain the values from the first time, <b>that list is only created ONCE</b> and is maintained between calls</span>
<span class="comment-copy">See the <code>Mutable default arguments</code> section <a href="https://docs.python-guide.org/writing/gotchas/" rel="nofollow noreferrer">here</a> for more on what @Nullman said.</span>
<span class="comment-copy">can you suggest any way to find the complete path if any intermediate node is given as input.</span>
