<div class="post-text" itemprop="text">
<p>in Python 3.6, I use <code>unittest.mock.patch</code> to patch a function like this:</p>
<pre><code>class SampleTest(TestCase):

    @mock.patch('some_module.f')
    def test_f(self, mocked_f):
        f()
        mocked_f.assert_called()

</code></pre>
<p>This passes a <code>mock.MagicMock()</code> as <code>mocked_f</code> and everything works fine. However, when I want to use a custom mock object instead of the default <code>mock.MagicMock()</code> using <code>new</code> argument, the patch decorator does not pass the mocked object to the <code>test_f</code> method. Running this code will raise a <code>TypeError</code>:</p>
<pre><code>class SampleTest(TestCase):

    @mock.patch('some_module.f', new=lambda: 8)
    def test_f(self, mocked_f):
        f()
        mocked_f.assert_called()
</code></pre>
<pre><code>TypeError: test_f() missing 1 required positional argument: 'mocked_f'
</code></pre>
<p>My question is: why is this happening? </p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation (emphasis mine):</p>
<blockquote>
<p>If <code>patch()</code> is used as a decorator <strong>and <em>new</em> is omitted</strong>, the created mock is passed in as an extra argument to the decorated function. </p>
</blockquote>
<p>With <code>new</code> being used explicitly, the decorator does not pass the mocked object as a parameter (presumably because it expects you to already have a reference that you could use without needing an argument).</p>
<p>In this case, a workaround would be to configure the mock <em>after</em> it has been passed to your test:</p>
<pre><code>class SampleTest(TestCase):

    @mock.patch('tests.f')
    def test_f(self, mocked_f):
        mocked_f.return_value = 8
        # or
        # mocked_f.side_effect = lambda: 8
        f()
        mocked_f.assert_called()
</code></pre>
</div>
<span class="comment-copy">Thanks for the answer. I had noticed the documentation you mentioned before, but I am not convinced with this presumption. Your solution perfectly fits for my example, but there are situations where <code>return_value</code> or <code>side_effect</code> does not provide a convenient workaround. This is the blog I was reading when I encountered the problem: <a href="https://blog.miguelgrinberg.com/post/unit-testing-asyncio-code" rel="nofollow noreferrer">blog.miguelgrinberg.com/post/unit-testing-asyncio-code</a> I could update my question with the example in the blog, but it is too long.</span>
