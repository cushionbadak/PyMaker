<div class="post-text" itemprop="text">
<p>I am able to fetch different tweet parameteres from tweet. </p>
<pre><code>    keyword = tweepy.Cursor(api.search, val,tweet_mode='extended',lang='en').items(2)
    tweetdone = 0
    all_tweet = []
    for tweet in keyword:
        tweet_record = {} 
        tweet_record['tweet.text'] = tweet.full_text
        tweet_record['tweet.user.name'] = tweet.user.name
        tweet_record['tweet.user.location'] = tweet.user.location
        tweet_record['tweet.user.verified'] = tweet.user.verified
        tweet_record['tweet.lang'] = tweet.lang
        tweet_record['tweet.created_at'] = tweet.created_at
        tweet_record['tweet.user'] = tweet.user
        tweet_record['tweet.retweet_count'] = tweet.retweet_count
        tweet_record['tweet.favorite_count'] = tweet.favorite_count
</code></pre>
<p>My problem is. I want to parse <code>media</code> objects from tweet. But <code>extended_entities</code> in which media url is present is not available in all tweets. 
so if I try to fetch it like this</p>
<pre><code>tweet_record['media_url'] = tweet.extended_entities.media_url
</code></pre>
<p>It gives error because extended entities may not be present in few tweets.</p>
<p>How to deal this issue and fetch media content correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a couple of options here, you can check whether the key exists, or use some try/excepts. </p>
<p><strong>Check whether key exists:</strong></p>
<p>You can do this because tweepy returns a status object, which acts similarly to a json file, or python dictionary, and thus you essentially have a key:value pair. You should be able to use (going by your above code)</p>
<pre><code>if 'extended_entities' in tweet:
    tweet_record['media_url'] = tweet.extended_entities.media_url
</code></pre>
<p>of course, the reverse is also possible</p>
<pre><code>if 'extended_entities' not in tweet:
    #whatever you want to do
</code></pre>
<p>This could lead to problems though, what if the extended_entities exists, but for some reason media_url doesn't? And what if you want to get even more from within that (there isn't for a status object, but hey, I'm just trying to future proof here!) You'll have to do long, or multi nested if statements, which won't look the best</p>
<pre><code>if 'extended_entities' in tweet:
    if 'media_url' in tweet['extended_entities']
        #etc
</code></pre>
<p>so it might be easier to just <strong>throw it in a try except...</strong></p>
<pre><code>try:
    tweet_record['media_url'] = tweet.extended_entities.media_url
except AttributeError:
    #etc
</code></pre>
<p>this means the program won't error when particular elements aren't found. AttributeError is for accessing an invalid attribute of an object. You of course may want to re-order this for readability. Keep in mind though, that while doing this is <a href="https://docs.python.org/2/glossary.html#term-eafp" rel="nofollow noreferrer">pythonic</a> it can be a bit hard to read if used too often in my opinion.</p>
<p>I referred to <a href="https://stackoverflow.com/questions/43491287/elegant-way-to-check-if-a-nested-key-exists-in-a-python-dict">this question</a> when looking up things for this answer. Gives some good ideas for this sort of thing if you need further help.</p>
<p>Hope that helps.</p>
</div>
