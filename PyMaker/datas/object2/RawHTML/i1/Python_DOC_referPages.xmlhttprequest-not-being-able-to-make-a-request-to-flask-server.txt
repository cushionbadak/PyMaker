<div class="post-text" itemprop="text">
<p>I have setup a simple flask server using the following code:</p>
<pre><code>from flask import Flask
from flask_cors import CORS
app = Flask(__name__)
CORS(app)

@app.route("/")
def helloWorld():
    return "Hello, cross-origin-world!"

if __name__ == '__main__':
    app.run(host = '0.0.0.0', port='5000')
</code></pre>
<p>From js I am making a request to the address using the follwing code</p>
<pre><code>    const theUrl="&lt;myip&gt;:5000/";
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", theUrl, false); 
    xmlHttp.send();
    console.log(xmlHttp.response);
</code></pre>
<p>The console shows </p>
<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt; &lt;title&gt;404 Not Found&lt;/title&gt; &lt;h1&gt;Not Found&lt;/h1&gt; &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;
</code></pre>
<p>When I try to access the same url from the browser, it returns</p>
<pre><code>Hello, cross-origin-world!
</code></pre>
<p>Is there something wrong I am doing with the server? I have tried the js code on a dummy address and I am able to get the contents of that website. There is something wrong with the Flask server.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just wrote something for file uploads.</p>
<p>Hope this helps.</p>
<pre><code>$('.custom-file-input').change(function () {
    console.log($(this)[0].files[0].name);
    $('.custom-file-label').text($(this)[0].files[0].name);
    var formData = new FormData();
    formData.append('file', $(this)[0].files[0]);
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '/', true);
    xhr.send(formData)
</code></pre>
<p>I don't understand why one would use XHR for get requests, couldn't you just use Ajax instead?</p>
<p>The last parameter is whether the connection is asynchronous. Perhaps that's what wrong?</p>
<p>Also, don't use Flask built-in webserver for production environment, it just isn't made to cope with more than one user testing for example.</p>
<p>Furthermore, perhaps someone can tell me why not, however, I think you would be better off simply having url as the section of the url after the port declaration, in my example, notice that I only tell jquery or js to post data to <code>/</code> and this is because that means local server, or is interpreted to mean itself, so by default is prepended with your server IP and in this case the port 5000 aswell</p>
</div>
