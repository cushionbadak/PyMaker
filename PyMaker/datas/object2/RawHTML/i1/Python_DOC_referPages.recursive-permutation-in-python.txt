<div class="post-text" itemprop="text">
<p>I need create permutations of list from 3 numbers <code>[0, 1, -1]</code> in expanding list.</p>
<p><em>My output</em>:</p>
<pre><code>0
0,0  0,1  0,-1
0,0,0  0,0,1  0,0,-1
0,0,0,0  0,0,0,1  0,0,0,-1
</code></pre>
<p><em>Expected output</em>: all possible permutations of list size <code>N</code> but in my code only last 3 numbers are change </p>
<pre><code>def rec(alist):
    print(alist)
    if len(alist) == 4:
        return (alist)
    if alist[-1] == 0 or len(alist) == 0:
        alist.append(1)
        return(rec(alist))
    if alist[-1] == 1:
        alist[-1] = -1
        return(rec(alist))
    if alist[-1] == -1:
        alist[-1] = 0
        return(rec(alist))  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code only advances to the next length of sequence when the last value of the current sequence is zero. That means you never extend a sequence that has any other value in its prefix. You need to change that behavior, so you recurse on all values.</p>
<p>There are a bunch of different ways to do what you're looking for. It seems you are trying to be tail recursive (even though that doesn't offer any benefit in Python). We can make it work though, using an extra argument to tell the code if it should be expanding the list or not (it should not when the list is full, or when we are backtracking):</p>
<pre><code>def rec(lst, expand=True):
    if len(lst) == 4:
        print(lst)
        expand = False

    if expand:
        lst.append(1)
    elif lst[-1] == 1: # expand is False here and in the other elif/else clauses
        lst[-1] = -1
        expand = True
    elif lst[-1] == -1:
        lst[-1] = 0
        expand = True
    else: # lst[-1] == 0
        lst.pop()  # backtracking step
        # leave expand as False

    if lst:
        rec(lst, expand)
</code></pre>
<p>A more natural approach would be to make several recursive calls when appropriate, and let the call stack take care of most of the backtracking logic:</p>
<pre><code>def rec(lst):
    if len(lst) == 4:
        print(lst)
        return

    lst.append(1)
    rec(lst)

    lst[-1] = -1
    rec(lst)

    lst[-1] = 0
    rec(lst)

    lst.pop()
</code></pre>
<p>Note that in both of these solutions, I'm returning nothing (which is equivalent to <code>return None</code>), and only <code>print</code>ing the results as we find them. If you want to get the results returned, you need more complicated logic. A generator is an easy way to do it, just change <code>print(lst)</code> to <code>yield lst</code> and make all the recursive calls be <code>yield from rec(lst)</code>.</p>
<p>Getting a list of lists as the result is a little bit more fiddly. One reason for that is that you'll need to copy the list of values every time you want to add a solution to the results. Otherwise you'd end up with many references to the same (empty) inner list at the end. You also need to figure out how to merge the results all together, which can be a little bit awkward.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
for p in itertools.product([0,1,-1], repeat=3):
    print (p)
</code></pre>
<p>It is the cartesian product of the set with itself</p>
</div>
<span class="comment-copy">Is there a reason you need to do this yourself? Have you looked at <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a>?</span>
<span class="comment-copy">Can you post your expected output?</span>
<span class="comment-copy">Chris no i take a look</span>
<span class="comment-copy">expected output are all posible combinations for list that have numbers[0,1-1] so for list length 3 it will be [0,0,1]     [0,1,0]     [1,0,0]    [0,1,1]       [1,0,1]    [1,1,1] [0,0-1]     [1,-1,0]  and more</span>
<span class="comment-copy">Do you want to <code>return</code> all the combinations (as a list of lists, perhaps) or do you just want to print them? If you only care about printing the results, I think you can remove most of the <code>return</code> statementst, but there are a few other options if you want to return values in some way. Making a recursive generator is pretty nifty if you understand how they work!</span>
