<div class="post-text" itemprop="text">
<p>Following <a href="https://stackoverflow.com/questions/33170016/how-to-use-django-1-8-5-orm-without-creating-a-django-project">this</a> guide, I am able to use models outside of Django with the following file structure by calling <code>python main.py</code>.</p>
<pre><code>├── data
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   └── models.py
├── main.py
├── manage.py
└── settings.py
</code></pre>
<p>where main.py looks like this:</p>
<pre><code>import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')

django.setup()
from data.models import Foo, Bar #...

print(Foo.objects.all()) #this works fine
</code></pre>
<p>What I want to do is turn this into a "package" called <code>db</code> that looks like this:</p>
<pre><code>    ├── data
    │   ├── __init__.py
    │   ├── migrations
    │   │   └── __init__.py
    │   └── models.py
    ├── __init__.py 
    ├── manage.py
    └── settings.py
</code></pre>
<p>And in the <code>__init__.py</code> of the <code>db</code> package, I want to do this:</p>
<pre><code>import os, django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')

django.setup()
from data.models import Foo, Bar # ...
from django.db import connection

__all__ = [
    'connection',
    'Foo',
    'Bar', 
    #...
]
</code></pre>
<p>So I can call the <code>db</code> package from <code>test.py</code> (which is in the same directory as <code>db</code>) like this:</p>
<pre><code>import db

print(db.Foo.objects.all()) #this throws an error "no module named data"
</code></pre>
<p>or like this:</p>
<pre><code>from db import Foo

print(Foo.objects.all()) # this throws an error "no module named settings"
</code></pre>
<p>Is there a way I can use Django's models without having to call:
<code>os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')</code>
<code>django.setup()</code></p>
<p>on every page that uses a model?</p>
<p>What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you check out how <a href="https://docs.djangoproject.com/en/dev/ref/applications/#django.setup" rel="nofollow noreferrer">Django apps are loaded</a> I think you need to run your setup in your application’s <code>models.py</code> or <code>models/init.py</code> and not in <code>db/__init__.py</code></p>
<blockquote>
<p><strong>When Django starts, django.setup() is responsible for populating the
  application registry.</strong></p>
<p>setup(set_prefix=True) Configures Django by:</p>
<p>Loading the settings. Setting up logging. If set_prefix is True,
  setting the URL resolver script prefix to FORCE_SCRIPT_NAME if
  defined, or / otherwise. Initializing the application registry. This
  function is called automatically:</p>
<p>When running an HTTP server via Django’s WSGI support. When invoking a
  management command. It must be called explicitly in other cases, for
  instance in plain Python scripts.</p>
<p>The application registry is initialized in three stages. At each
  stage, Django processes all applications in the order of
  INSTALLED_APPS.</p>
<p>First Django imports each item in INSTALLED_APPS.</p>
<p>If it’s an application configuration class, Django imports the root
  package of the application, defined by its name attribute. If it’s a
  Python package, Django creates a default application configuration.</p>
<p><strong><em>At this stage, your code shouldn’t import any models!</em></strong></p>
<p>In other words, your applications’ root packages and the modules that
  define your application configuration classes shouldn’t import any
  models, even indirectly.</p>
<p><strong>Strictly speaking, Django allows importing models once their
  application configuration is loaded.</strong> However, in order to avoid
  needless constraints on the order of INSTALLED_APPS, it’s strongly
  recommended not import any models at this stage.</p>
<p>Once this stage completes, APIs that operate on application
  configurations such as get_app_config() become usable.</p>
<p>Then Django attempts to import the models submodule of each
  application, if there is one.</p>
<p><strong>You must define or import all models in your application’s models.py
  or models/__init__.py. Otherwise, the application registry may not be
  fully populated at this point, which could cause the ORM to
  malfunction.</strong></p>
<p>Once this stage completes, APIs that operate on models such as
  get_model() become usable.</p>
<p>Finally Django runs the ready() method of each application
  configuration.</p>
</blockquote>
</div>
