<div class="post-text" itemprop="text">
<p>I'm trying to generate a linear regression on a scatter plot I have generated, however my data is in list format, and all of the examples I can find of using <code>polyfit</code> require using <code>arange</code>. <code>arange</code> doesn't accept lists though. I have searched high and low about how to convert a list to an array and nothing seems clear. Am I missing something?</p>
<p>Following on, how best can I use my list of integers as inputs to the <code>polyfit</code>?</p>
<p>here is the polyfit example I am following:</p>
<pre><code>from pylab import * 

x = arange(data) 
y = arange(data) 

m,b = polyfit(x, y, 1) 

plot(x, y, 'yo', x, m*x+b, '--k') 
show() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>arange</code> <em>generates</em> lists (well, numpy arrays); type <code>help(np.arange)</code> for the details.  You don't need to call it on existing lists.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; y = [3,5,7,9] 
&gt;&gt;&gt; 
&gt;&gt;&gt; m,b = np.polyfit(x, y, 1)
&gt;&gt;&gt; m
2.0000000000000009
&gt;&gt;&gt; b
0.99999999999999833
</code></pre>
<p>I should add that I tend to use <code>poly1d</code> here rather than write out "m*x+b" and the higher-order equivalents, so my version of your code would look something like this:</p>
<pre class="lang-py prettyprint-override"><code>import numpy as np
import matplotlib.pyplot as plt

x = [1,2,3,4]
y = [3,5,7,10] # 10, not 9, so the fit isn't perfect

fit = np.polyfit(x,y,1)
fit_fn = np.poly1d(fit) 
# fit_fn is now a function which takes in x and returns an estimate for y

plt.plot(x,y, 'yo', x, fit_fn(x), '--k')
plt.xlim(0, 5)
plt.ylim(0, 12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code:</p>
<pre><code>from scipy.stats import linregress

linregress(x,y) #x and y are arrays or lists.
</code></pre>
<p>gives out a list with the following:</p>
<blockquote>
<p>slope : float<br/>
  slope of the regression line<br/>
  intercept : float<br/>
  intercept of the regression line<br/>
  r-value : float<br/>
  correlation coefficient<br/>
  p-value : float<br/>
  two-sided p-value for a hypothesis test whose null hypothesis is that the slope is zero<br/>
  stderr : float<br/>
  Standard error of the estimate</p>
</blockquote>
<p><a href="http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.linregress.html">Source</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
import matplotlib.pyplot as plt 
from scipy import stats

x = np.array([1.5,2,2.5,3,3.5,4,4.5,5,5.5,6])
y = np.array([10.35,12.3,13,14.0,16,17,18.2,20,20.7,22.5])
gradient, intercept, r_value, p_value, std_err = stats.linregress(x,y)
mn=np.min(x)
mx=np.max(x)
x1=np.linspace(mn,mx,500)
y1=gradient*x1+intercept
plt.plot(x,y,'ob')
plt.plot(x1,y1,'-r')
plt.show()
</code></pre>
<p><strong><em>USe this ..</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Another quick and dirty answer is that you can just convert your list to an array using: </p>
<pre><code>import numpy as np
arr = np.asarray(listname)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from pylab import * 

import numpy as np
x1 = arange(data) #for example this is a list
y1 = arange(data) #for example this is a list 
x=np.array(x) #this will convert a list in to an array
y=np.array(y)
m,b = polyfit(x, y, 1) 

plot(x, y, 'yo', x, m*x+b, '--k') 
show()
</code></pre>
</div>
<span class="comment-copy">Try <code>regplot</code> from <code>seaborn</code>: <a href="https://stackoverflow.com/a/42263217/911945">stackoverflow.com/a/42263217/911945</a></span>
<span class="comment-copy">This doesn't add a new way to tackle the problem - it has already been suggested <a href="https://stackoverflow.com/a/27363639/8881141">in this popular answer</a>.</span>
<span class="comment-copy">do u want to convert generated list into an array?</span>
<span class="comment-copy">I don't want anything specific, this is not my question. I am just saying that repeating an already established answer is not really, what SO is looking for. Please read the link, I posted.</span>
<span class="comment-copy">I see, you have written some comments, but you should consider adding a few sentences of explanation, this increases the value of your answer ;-)</span>
<span class="comment-copy">Please note that while a code snippet <i>can</i> be a useful answer on its own, it's preferable to leave some commentary for future readers about why this solves the problem. Thanks!</span>
<span class="comment-copy">@blue-phoenox well i thought people are genius here but i guess i will explain next time ..</span>
