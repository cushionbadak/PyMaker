<div class="post-text" itemprop="text">
<p>I am running JanusGraph 0.3.1 and using gremlin python 3.3.4 and python3.7</p>
<blockquote>
<p>In the test case below, I created 65 vertices. When I use
  g.V(list_of_ids).valueMap(true).toList(). JanusGraph returns only 64
  results instead of 65.</p>
</blockquote>
<p>As a workaround I am currently passing 64 ids at a time when I have more than 64 ids to pass in g.V(list_of_ids).</p>
<blockquote>
<p>Am I doing something wrong or is there a limitation on the script
  method when used along with query bindings in gremlin python?</p>
</blockquote>
<p><strong>Schema and code to insert data</strong></p>
<pre><code>// schema creation for graph named newg and traversal source g1

mgmt = newg.openManagement()

//make properties
type = mgmt.makePropertyKey('type').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make()
id_tx = mgmt.makePropertyKey('id_tx').dataType(String.class).cardinality(org.janusgraph.core.Cardinality.SINGLE).make()

// make vertex label
identity = mgmt.makeVertexLabel('identity').make()
mgmt.addProperties(identity, type, id_tx)

mgmt.commit()

// insert 65 vertices of the label identity

g1.addV('identity').property('id_tx','1').property('type','ecn')
g1.addV('identity').property('id_tx','2').property('type','ecn')
g1.addV('identity').property('id_tx','3').property('type','ecn')
g1.addV('identity').property('id_tx','4').property('type','ecn')
g1.addV('identity').property('id_tx','5').property('type','ecn')
g1.addV('identity').property('id_tx','6').property('type','ecn')
g1.addV('identity').property('id_tx','7').property('type','ecn')
g1.addV('identity').property('id_tx','8').property('type','ecn')
g1.addV('identity').property('id_tx','9').property('type','ecn')
g1.addV('identity').property('id_tx','10').property('type','ecn')
g1.addV('identity').property('id_tx','11').property('type','ecn')
g1.addV('identity').property('id_tx','12').property('type','ecn')
g1.addV('identity').property('id_tx','13').property('type','ecn')
g1.addV('identity').property('id_tx','14').property('type','ecn')
g1.addV('identity').property('id_tx','15').property('type','ecn')
g1.addV('identity').property('id_tx','16').property('type','ecn')
g1.addV('identity').property('id_tx','17').property('type','ecn')
g1.addV('identity').property('id_tx','18').property('type','ecn')
g1.addV('identity').property('id_tx','19').property('type','ecn')
g1.addV('identity').property('id_tx','20').property('type','ecn')
g1.addV('identity').property('id_tx','21').property('type','ecn')
g1.addV('identity').property('id_tx','22').property('type','ecn')
g1.addV('identity').property('id_tx','23').property('type','ecn')
g1.addV('identity').property('id_tx','24').property('type','ecn')
g1.addV('identity').property('id_tx','25').property('type','ecn')
g1.addV('identity').property('id_tx','26').property('type','ecn')
g1.addV('identity').property('id_tx','27').property('type','ecn')
g1.addV('identity').property('id_tx','28').property('type','ecn')
g1.addV('identity').property('id_tx','29').property('type','ecn')
g1.addV('identity').property('id_tx','30').property('type','ecn')
g1.addV('identity').property('id_tx','31').property('type','ecn')
g1.addV('identity').property('id_tx','32').property('type','ecn')
g1.addV('identity').property('id_tx','33').property('type','ecn')
g1.addV('identity').property('id_tx','34').property('type','ecn')
g1.addV('identity').property('id_tx','35').property('type','ecn')
g1.addV('identity').property('id_tx','36').property('type','ecn')
g1.addV('identity').property('id_tx','37').property('type','ecn')
g1.addV('identity').property('id_tx','38').property('type','ecn')
g1.addV('identity').property('id_tx','39').property('type','ecn')
g1.addV('identity').property('id_tx','40').property('type','ecn')
g1.addV('identity').property('id_tx','41').property('type','ecn')
g1.addV('identity').property('id_tx','42').property('type','ecn')
g1.addV('identity').property('id_tx','43').property('type','ecn')
g1.addV('identity').property('id_tx','44').property('type','ecn')
g1.addV('identity').property('id_tx','45').property('type','ecn')
g1.addV('identity').property('id_tx','46').property('type','ecn')
g1.addV('identity').property('id_tx','47').property('type','ecn')
g1.addV('identity').property('id_tx','48').property('type','ecn')
g1.addV('identity').property('id_tx','49').property('type','ecn')
g1.addV('identity').property('id_tx','50').property('type','ecn')
g1.addV('identity').property('id_tx','51').property('type','ecn')
g1.addV('identity').property('id_tx','52').property('type','ecn')
g1.addV('identity').property('id_tx','53').property('type','ecn')
g1.addV('identity').property('id_tx','54').property('type','ecn')
g1.addV('identity').property('id_tx','55').property('type','ecn')
g1.addV('identity').property('id_tx','56').property('type','ecn')
g1.addV('identity').property('id_tx','57').property('type','ecn')
g1.addV('identity').property('id_tx','58').property('type','ecn')
g1.addV('identity').property('id_tx','59').property('type','ecn')
g1.addV('identity').property('id_tx','60').property('type','ecn')
g1.addV('identity').property('id_tx','61').property('type','ecn')
g1.addV('identity').property('id_tx','62').property('type','ecn')
g1.addV('identity').property('id_tx','63').property('type','ecn')
g1.addV('identity').property('id_tx','64').property('type','ecn')
g1.addV('identity').property('id_tx','65').property('type','ecn')

gremlin&gt; g1.tx().commit()
==&gt;null
gremlin&gt; g1.V().count()
==&gt;65
</code></pre>
<p><strong>Now I try to query from python using GLV and Script methods. GLV method seems to work fine.</strong></p>
<pre><code>(py371local) bash-3.2$ python
Python 3.7.2 (v3.7.2:9a3ffc0492, Dec 24 2018, 02:44:43) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
# GLV method
&gt;&gt;&gt; from gremlin_python import statics
&gt;&gt;&gt; from gremlin_python.structure.graph import Graph
&gt;&gt;&gt; from gremlin_python.process.graph_traversal import __
&gt;&gt;&gt; from gremlin_python.process.strategies import *
&gt;&gt;&gt; from gremlin_python.driver.driver_remote_connection import DriverRemoteConnection
&gt;&gt;&gt; graph = Graph()
&gt;&gt;&gt; g1 = graph.traversal().withRemote(DriverRemoteConnection('ws://localhost:8182/gremlin', 'g1', username='&lt;&lt;user_id&gt;&gt;', password='&lt;&lt;password&gt;&gt;'))
&gt;&gt;&gt; id_list = g1.V().id().toList()
&gt;&gt;&gt; len(id_list)
65
&gt;&gt;&gt; result = g1.V(id_list).valueMap(True).toList()
&gt;&gt;&gt; result
[{'type': ['ecn'], &lt;T.id: 1&gt;: 28672, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['31']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32792, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['57']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28760, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['52']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32768, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['35']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12400, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['41']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8344, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['44']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8304, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['19']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 45192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['49']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28808, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['32']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4160, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['25']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24688, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['51']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 49288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['56']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4184, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['8']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8328, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['6']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['30']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24600, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['33']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20576, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['34']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12312, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['7']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8216, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['5']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20616, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['27']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16408, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['10']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4120, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['3']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20504, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['18']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24728, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['17']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 53384, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['59']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['2']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32856, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['61']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4096, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['9']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24712, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['29']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 41096, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['46']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 36952, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['64']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28696, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['48']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32904, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['36']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 36864, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['37']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24672, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['45']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 49152, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['50']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8256, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['38']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24664, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['28']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16496, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['43']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 57344, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['65']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 53248, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['58']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 57480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['62']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8280, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['16']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['13']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4232, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['1']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12376, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['20']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16536, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['55']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16520, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['21']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['12']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 45056, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['42']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16472, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['23']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 37000, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['40']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 40960, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['39']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20632, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['60']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20568, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['26']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12424, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['15']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12440, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['53']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20592, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['47']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4248, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['14']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4208, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['4']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['11']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24576, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['24']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12352, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['63']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['22']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28768, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['54']}]
&gt;&gt;&gt; len(result)
65
&gt;&gt;&gt; query = "g1.V(id_list).valueMap(True).toList()"
&gt;&gt;&gt; query_bindings = {"id_list": id_list}

#  Now Try using the script method
&gt;&gt;&gt; from gremlin_python.driver import client
&gt;&gt;&gt; from gremlin_python.driver.serializer import GraphSONSerializersV3d0
&gt;&gt;&gt; db_session = client.Client('ws://localhost:8182/gremlin', 'g1', message_serializer=GraphSONSerializersV3d0(), username="&lt;&lt;user_id&gt;&gt;", password="&lt;&lt;password&gt;&gt;")
&gt;&gt;&gt; query = "g1.V(id_list).valueMap(true).toList()"
&gt;&gt;&gt; result = db_session.submit(query, query_bindings).all().result()
&gt;&gt;&gt; result
[{'type': ['ecn'], &lt;T.id: 1&gt;: 28672, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['31']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32792, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['57']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28760, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['52']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32768, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['35']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12400, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['41']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8344, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['44']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8304, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['19']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 45192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['49']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28808, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['32']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4160, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['25']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24688, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['51']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 49288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['56']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4184, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['8']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8328, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['6']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['30']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24600, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['33']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20576, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['34']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12312, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['7']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8216, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['5']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20616, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['27']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16408, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['10']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4120, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['3']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20504, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['18']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24728, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['17']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 53384, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['59']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['2']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32856, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['61']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4096, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['9']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24712, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['29']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 41096, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['46']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 36952, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['64']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 28696, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['48']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 32904, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['36']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 36864, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['37']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24672, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['45']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 49152, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['50']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8256, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['38']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24664, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['28']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16496, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['43']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 57344, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['65']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 53248, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['58']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 57480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['62']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8280, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['16']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['13']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4232, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['1']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12376, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['20']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16536, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['55']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16520, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['21']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8288, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['12']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 45056, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['42']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 16472, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['23']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 37000, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['40']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 40960, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['39']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20632, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['60']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20568, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['26']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12424, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['15']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12440, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['53']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20592, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['47']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4248, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['14']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 4208, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['4']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 8192, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['11']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 24576, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['24']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 12352, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['63']}, {'type': ['ecn'], &lt;T.id: 1&gt;: 20480, &lt;T.label: 3&gt;: 'identity', 'id_tx': ['22']}]
&gt;&gt;&gt; len(result)
64
&gt;&gt;&gt; 
# We see only 64 returned instead of 65
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The number 64 is interesting because that is the default batch iteration size <a href="https://github.com/apache/tinkerpop/blob/e900e8d6ae2c0c071420d4f44e647057b067f219/gremlin-server/conf/gremlin-server.yaml#L51" rel="nofollow noreferrer">defined by the server</a>: <code>resultIterationBatchSize</code>. I would try to bump that number up to 100, restart the server and see if you get all 65 of your results. </p>
<p>That said, you should not need to do that - if your results exceed the <code>resultIterationBatchSize</code> the server should automatically proceed to producing the next batch and streaming that down to your client. I seem to remember a problem with this from a long time ago. I couldn't pinpoint the change in the code, but I remember adding this test:</p>
<p><a href="https://github.com/apache/tinkerpop/commit/425bcd032adc9967a6b575da8042df3806671825" rel="nofollow noreferrer">https://github.com/apache/tinkerpop/commit/425bcd032adc9967a6b575da8042df3806671825</a></p>
<p>which deals with large results that would need to be streamed. Please consider bumping to <code>gremlinpython</code> 3.3.5 to see if that resolves the issue. If that doesn't work, try to recreate the problem in Gremlin Server with TinkerGraph and once you have good reproduction steps, submit an issue to <a href="https://issues.apache.org/jira/projects/TINKERPOP/" rel="nofollow noreferrer">JIRA</a>.</p>
</div>
<span class="comment-copy">Thanks Stephen. Changing resultIterationBatchSize worked out sweet. Now I get all the 65. I bumped the number to 500. As that is the size we plan to page on the UI.</span>
