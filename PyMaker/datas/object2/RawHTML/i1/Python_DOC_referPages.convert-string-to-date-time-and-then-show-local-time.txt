<div class="post-text" itemprop="text">
<p>How can I convert a DataFrame column of strings (in dd/mm/yyyy format) to datetimes?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html"><code>to_datetime</code></a>:</p>
<pre><code>df['col'] = pd.to_datetime(df['col'])
</code></pre>
<p>It also offers a <code>dayfirst</code> argument for European times (but beware <a href="https://github.com/pydata/pandas/issues/3341">this isn't strict</a>).</p>
<p>Here it is in action:</p>
<pre><code>In [11]: pd.to_datetime(pd.Series(['05/23/2005']))
Out[11]:
0   2005-05-23 00:00:00
dtype: datetime64[ns]
</code></pre>
<p>You can pass a specific <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">format</a>:</p>
<pre><code>In [12]: pd.to_datetime(pd.Series(['05/23/2005']), format="%m/%d/%Y")
Out[12]:
0   2005-05-23
dtype: datetime64[ns]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your date column is a string of the format '2017-01-01'
you can use pandas astype to convert it to datetime.</p>
<p><code>df['date'] = df['date'].astype('datetime64[ns]')</code></p>
<p>or use datetime64[D] if you want Day precision and not nanoseconds</p>
<p><code>print(type(df_launath['date'].iloc[0]))</code></p>
<p>yields</p>
<p><code>&lt;class 'pandas._libs.tslib.Timestamp'&gt;</code>
the same as when you use pandas.to_datetime</p>
<p>You can try it with other formats then '%Y-%m-%d' but at least this works.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following if you want to specify tricky formats:</p>
<pre><code>df['date_col'] =  pd.to_datetime(df['date_col'], format='%d/%m/%Y')
</code></pre>
<p>More details on <code>format</code> here:</p>
<ul>
<li>Python 2 <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior</a></li>
<li>Python 3 <a href="https://docs.python.org/3.7/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3.7/library/datetime.html#strftime-strptime-behavior</a></li>
</ul>
</div>
<span class="comment-copy">@shootingstars maybe see <a href="http://stackoverflow.com/questions/13703720/converting-between-datetime-timestamp-and-datetime64" title="converting between datetime timestamp and datetime64">stackoverflow.com/questions/13703720/â€¦</a></span>
<span class="comment-copy">@shootingstars passing the array <code>DatetimeIndex(df['col']).to_pydatetime()</code> should work.</span>
<span class="comment-copy">When I try this approach in python 352, I see <code>C:\Python352\lib\site-packages\ipykernel\__main__.py:1: SettingWithCopyWarning:  A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead</code>. I see a similar message when I try the approach suggested in the warn message too. Any idea why?</span>
<span class="comment-copy">Nvm, I commented too early. Searching for <code>SettingWithCopyWarning</code> gives enough material</span>
<span class="comment-copy">@daneshjai double-braces makes a DataFrame (with just one column) compared to single-braces which gets the column as a Series.</span>
