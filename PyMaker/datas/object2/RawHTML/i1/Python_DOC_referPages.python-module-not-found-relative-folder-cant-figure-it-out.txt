<div class="post-text" itemprop="text">
<p>There are a million answers for this on Google but I can't seem to apply any of the fixes and get the expected result! Hopefully someone can help me here?</p>
<p>I have used Python in the past but it's been a while, I am re-writing an old project from last year using SQLAlchemy and SQLite3.</p>
<p>Problem is, I can't seem to get my tests to play nice. I am trying to separate my test database from production database, so I have the following file structure:</p>
<pre><code>    .
├── fleet_manager
│   ├── controller
│   │   └── customer_controller.py
│   ├── database.db
│   ├── fleet_manager.py
│   ├── model
│   │   ├── __init__.py
│   │   ├── models.py
│   └── view
├── Pipfile
├── Pipfile.lock
└── tests
    ├── context.py
    ├── __init__.py
    ├── test_customer_controller.py
    ├── test.db
    └── test_models.py
</code></pre>
<p>So I have created a context.py file and in here I have my SQLAlchemy engine/session factory. It is this file that my test files can't find.</p>
<pre class="lang-py prettyprint-override"><code># test_models.py

from mamba import description, context, it, before
from expects import expect, equal, be_a, be_none
from sqlalchemy import create_engine, Table
from sqlalchemy.engine import Engine
from sqlalchemy.orm import sessionmaker


from context import Session # &lt; this mofo here
from fleet_manager.model.models import (
    Equipment,
    EquipmentType,
    Discipline,
    Size,
    Make,
    Model,
    Customer,
    Base)
</code></pre>
<p>So basically the above file is not finding context at all</p>
<pre class="lang-py prettyprint-override"><code># context.py

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

engine = create_engine('sqlite:///tests/test.db', echo=True)
Session = sessionmaker(bind=engine)
</code></pre>
<p>This is the error I get (omitted the excess trace):</p>
<pre><code>ModuleNotFoundError: No module named 'tests/test_models'
</code></pre>
<p>I have tried a bunch of stuff so far. I have tried modifying the path using os.path, as well as using .context as opposed to context but still nothing.
Originally I had this problem when trying to access my models.py but that's because I forgot to put <strong>init</strong>.py in the folder!</p>
<p>Can anyone help me here? Ripping my hair out.</p>
</div>
<div class="post-text" itemprop="text">
<p>one quick way tosave you from ripping hair out</p>
<pre><code>import sys
sys.path.append("/path/to/your/package_or_module")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that your tests directory is not in your python path. And it wont be by default. You are trying to import from that directory using</p>
<pre><code>from context import Session
</code></pre>
<p>and it fails. As you would be executing from your base directory, you can do absolute import from that directory using</p>
<pre><code>from tests.context import Session
</code></pre>
<p>Or use relative imports like this.</p>
<pre><code>from .context import Session
</code></pre>
</div>
<span class="comment-copy">how do you launch test_models.py ?  maybe it could work with <code>from .context import Session</code> or <code>from tests.context import Session</code> ?</span>
<span class="comment-copy">Currently running it using <code>pipenv run mamba test_models.py</code></span>
<span class="comment-copy">That worked...wtf, I already done that before! So that was easy, what are the cons? Must be plenty.</span>
<span class="comment-copy">use it all the time, con if the import is from another project then things can get messy, and sharing code between people</span>
