<div class="post-text" itemprop="text">
<p>We have a NamedTuple in the code like:</p>
<pre><code>from typing import NamedTuple

class StandardParameters(NamedTuple):
    offset: int
    limit: int
    locale: str
</code></pre>
<p>This works fine on our local machines using Python 3.6.6 importing this file under <code>./manage shell</code>, and works fine on the local server (macOS) using <code>./manage runserver</code>.</p>
<p>This also works fine on the Ubuntu production server, using <code>./manage shell</code> and importing this file. But if we use the production server's Django HTTP server, it fails on this class definition with:</p>
<pre><code>function() argument 1 must be code, not str 
</code></pre>
<p>The Django error response indicates it's the same version of Python we're using locally, and via <code>./manage shell</code>, 3.6.6. But it's unable to evaluate <code>NamedTuple</code> as a class.</p>
<p>Sure enough, if I add <code>raise Exception(str(NamedTuple))</code>, then on our local systems, it logs "class NamedTuple" but on the Ubuntu HTTP server it logs "function NamedTuple". This makes us feel that we're using an older version of Python, but again, the returned DEBUG response indicates 3.6.6.</p>
<p>We only have one other NamedTuple anywhere in the code, and it is working on the Ubuntu server. It's being used in the "backward compatibility" form:</p>
<pre><code>from typing import NamedTuple

ClientInfo = NamedTuple('ClientInfo', [
    ('client', Client),
    ('clientVersion', str),
    ('device', str),
    ('platform', Platform),
    ('platformVersion', str),
])
</code></pre>
<p>Will these interact with each other? Even so, would it behave one way on 3.6.6 on Mac, and through <code>./manage shell</code> on Ubuntu, but a different way on Ubuntu through the HTTP interface?</p>
</div>
<div class="post-text" itemprop="text">
<p>The error messages and diagnostic output you've provided indicate that you're not using the Python 3.6 standard library version of the <code>typing</code> module. You've somehow gotten an old version of the <a href="https://pypi.org/project/typing/" rel="nofollow noreferrer"><code>typing</code> backport</a> installed on the virtualenv your Django server is using. Uninstalling the backport should unhide the standard library version of <code>typing</code>, allowing you to use features introduced in Python 3.6.</p>
</div>
<span class="comment-copy">That sounds like the Python 3.5 version of <code>typing.NamedTuple</code>. Are you <i>sure</i> you're on Python 3.6? If you are, perhaps you've somehow accidentally installed an old version of the <code>typing</code> backport.</span>
<span class="comment-copy">See what <code>print(typing.__file__)</code> shows in the environment where <code>typing.NamedTuple</code> is a function.</span>
<span class="comment-copy">@user2357112 I know, it sounds exactly like 3.5. The path is /home/ubuntu/.pyenv/versions/api-3.6.6/lib/python3.6/site-packages/typing.py.  Butâ€¦ I'm looking at the source code, and I'm thinking this virtualenv is wrong?</span>
<span class="comment-copy">site-packages indicates you've got the typing backport installed. Uninstalling the backport should unhide the stdlib typing module. You might also want to figure out why you had that installed, and why such an old version - maybe the version was pinned in a requirements.txt or in some package's dependencies somewhere.</span>
<span class="comment-copy">@user2357112 You're completely right. We've been installing new packages into that directory with pip, but we haven't been removing one that are no longer used. We've switched to pip-sync, and it resolved the issue. Thank you for the help! If you turn it into an answer, I'd be happy to accept it and close this.</span>
