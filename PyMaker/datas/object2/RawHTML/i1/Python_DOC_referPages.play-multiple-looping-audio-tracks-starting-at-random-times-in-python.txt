<div class="post-text" itemprop="text">
<p>I have a list of sound samples of various lengths saved as .wav files.  I want to play the fist sample and have it loop forever.  As some point in time after an event or a state change I want the 2nd sample to begin playing with the first sample.  Both samples would then loop forever.</p>
<p>After the next event the third sample would be added to the mix.  All three samples would loop forever.  Thatwould continue for all samples.  </p>
<p>I have successfully played multiple track at the same time but have not been able to add a new track to a previously looping track.  I have tried with PyAudio and PyDub.</p>
<p>Is there a way to have a continuous looping stream that additional tracks are added to it?  I am a bit stuck.  Thank you in advance.  </p>
<pre><code>from pydub import AudioSegment
from pydub.playback import play

audio1 = AudioSegment.from_file("zipper.wav") 
audio2 = AudioSegment.from_file("jar.wav") 
audio3 = AudioSegment.from_file("dribble.wav") 

mixed = audio1.overlay(audio2)          
mixed1  = mixed.overlay(audio3)

mixed1.export("mixed.wav", format='wav')

play(mixed1)   
</code></pre>
<p><strong>EDIT #1</strong> </p>
<p>With continued experimentation it seems that pydub is a blocking function so I will not be able to use it since I will combine this audio mixing with thermal camera analysis with OpenCV and a LED light matrix.</p>
<p>Not sure where to go from here.</p>
<p><strong>Edit #2</strong>
I found some non blocking pyaudio code at this <a href="https://gist.github.com/THeK3nger/3624478" rel="nofollow noreferrer">link</a>.  It allows me to play one .wav file on an infinite loop.  I tried to add a second player but it threw an error.</p>
<p>Code for non blocking looping .wav</p>
<pre><code>import os
import time
import wave
import threading
import sys

# PyAudio Library
import pyaudio

class WavePlayerLoop(threading.Thread) :
  """
  A simple class based on PyAudio to play wave loop.
  It's a threading class. You can play audio while your application
  continues to do its stuff. :)
  """

  CHUNK = 1024

  def __init__(self,filepath,loop=True) :
    """
    Initialize `WavePlayerLoop` class.
    PARAM:
        -- filepath (String) : File Path to wave file.
        -- loop (boolean)    : True if you want loop playback. 
                               False otherwise.
    """
    super(WavePlayerLoop, self).__init__()
    self.filepath = os.path.abspath(filepath)
    self.loop = loop

  def run(self):
    # Open Wave File and start play!
    wf = wave.open(self.filepath, 'rb')
    player = pyaudio.PyAudio()

    # Open Output Stream (basen on PyAudio tutorial)
    stream = player.open(format = player.get_format_from_width(wf.getsampwidth()),
        channels = wf.getnchannels(),
        rate = wf.getframerate(),
        output = True)

    # PLAYBACK LOOP
    data = wf.readframes(self.CHUNK)
    while self.loop :
      stream.write(data)
      data = wf.readframes(self.CHUNK)
      if data == b'' : # If file is over then rewind.
        wf.rewind()
        data = wf.readframes(self.CHUNK)

    stream.close()
    player.terminate()


  def play(self) :
    """
    Just another name for self.start()
    """
    self.start()

  def stop(self) :
    """
    Stop playback. 
    """
    self.loop = False


player = WavePlayerLoop("zipper.wav", loop=True)
player.play()
</code></pre>
<p>Also, if I put the function call in a while true: loop, then nothing happens.  Not sure why.</p>
<pre><code> # Main program logic follows:
    try:

        while True:
            player = WavePlayerLoop("zipper.wav", loop=True)
            player.play()
    except KeyboardInterrupt:
        player.terminate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After digging around and multiple attempts I found a way to do it using the pygame module. I originally did not investigate this module because I thought it was limited to 8 simultaneous sounds.  That is just the default setting. </p>
<pre><code>pygame.mixer.set_num_channels(26)
</code></pre>
<p>I changed the number of channels to 26.</p>
<pre><code>import pygame
import time

pygame.mixer.init()
pygame.init()

pygame.mixer.set_num_channels(26)

sound1 = pygame.mixer.Sound("sound1.ogg")
sound2 = pygame.mixer.Sound("sound2.ogg")

sound1.play(loops = -1)
time.sleep (2)

sound2.play(loop = -1)
</code></pre>
</div>
