<div class="post-text" itemprop="text">
<p>I am writing a small command line utility for my script and I can't figure out how to properly get the full path from the argument.</p>
<p>Here's what I mean.</p>
<pre><code>parser = ArgumentParser()
parser.add_argument("-src",
                    required = True, help="path to some folder")
args = parser.parse_args()
print(args.src)
</code></pre>
<p>If the user pass the full path, e.g. <code>"/home/username/projectname/folder"</code>, everything is fine. </p>
<p>But if the user runs the script from let's say <code>"projectname"</code> folder and pass the relative path <code>"./folder"</code> I get exactly the same string <code>"./folder"</code> while parsing the arguments instead of the full path <code>"/home/username/projectname/folder"</code>.</p>
<p>So, I have been wondering if there is some kind of inbuilt functionality in <code>Argparse</code> that allows to get the full path from the relative path?</p>
</div>
<div class="post-text" itemprop="text">
<p>To add onto Tryph's answer, you can specify the <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer"><code>type</code></a> parameter in the argument declaration. It can take any callable that takes a single string argument and returns the converted value:</p>
<pre><code>parser.add_argument("-src",
                    required=True,
                    help="path to some folder",
                    type=os.path.abspath)
</code></pre>
<p>This returns a string with the absolute path, you could specify your own function as well:</p>
<pre><code>def my_full_path(string):
    script_dir = os.path.dirname(__file__)
    return  os.path.normpath(os.path.join(script_dir, string))


parser = ArgumentParser()
parser.add_argument("-src",
                    required=True,
                    help="path to some folder",
                    type=my_full_path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT</strong>: The <a href="https://stackoverflow.com/a/55258475/2696355">Alex's answer</a> shows how to make <code>argparse</code> manage relative-to-absolute path conversion by simply filling the <code>add_argument</code>'s <code>type</code> parameter.</p>
<hr/>
<p>I do not think argparse provides such feature but you can achieve it using <a href="https://docs.python.org/3.7/library/os.path.html#os.path.abspath" rel="nofollow noreferrer">os.path.abspath</a>:</p>
<pre><code>abs_src = os.path.abspath(args.src)
</code></pre>
<p>Keep in mind that this will make an absolute path by concatenating the working directory with the relative path. Thus the path is considered relative to working directory.</p>
<hr/>
<p>If you want to make the path relative to the script directory, you can use <a href="https://docs.python.org/3.7/library/os.path.html#os.path.dirname" rel="nofollow noreferrer">os.path.dirname</a> on the <code>__file__</code> variable and <a href="https://docs.python.org/3.7/library/os.path.html#os.path.join" rel="nofollow noreferrer">os.path.join</a> to build an absolute path from a path relative to your Python script:</p>
<pre><code>script_dir = os.path.dirname(__file__)
abs_src = os.path.join(script_dir, args.src)
</code></pre>
<p>Finally, since joined path can contain tokens such as <code>.</code> and <code>..</code>, you can "prettify" your built path with <a href="https://docs.python.org/3.7/library/os.path.html#os.path.normpath" rel="nofollow noreferrer">os.path.normpath</a>:</p>
<pre><code>abs_path = os.path.normpath(os.path.join(script_dir, args.src))
</code></pre>
</div>
<span class="comment-copy">try <code>os.path.abspath(args.src)</code></span>
<span class="comment-copy">@user3051029 see answer from Alex. regarding your question, I think it should be the accepted answer</span>
<span class="comment-copy">@Tryph sure, if you don't mind it, I'll change the accepted answer.</span>
<span class="comment-copy">very nice trick. linked it in my answer</span>
<span class="comment-copy">Thanks, it works pretty well for my scenario. Didn't know about this function.</span>
