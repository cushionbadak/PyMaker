<div class="post-text" itemprop="text">
<p>So, I've been using Ruby on Rails for some time, and I'm wondering if there is something like <code>.presence</code> in Python/Django.</p>
<p><strong>Presence</strong> returns the receiver if it is present otherwise returns <code>nil</code>.</p>
<p><strong>object.presence</strong> is equivalent to:</p>
<pre><code>object.present? ? object : nil
</code></pre>
<p>For example, something like:</p>
<pre><code>state   = params[:state]   if params[:state].present?
country = params[:country] if params[:country].present?
region  = state || country || 'US'
becomes

region = params[:state].presence || params[:country].presence || 'US'
</code></pre>
<p>Anthony</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, you can achieve this by doing the following, assuming <code>params</code> is a <code>dict</code>:</p>
<pre><code>state = params.get('state')
country = params.get('country')
region = 'US' if (state and country) else None
</code></pre>
<p>The method <code>dict.get(key)</code> will return the value associated to the key that has been passed. If no such key exists, it returns <code>None</code>.</p>
<p>If you need to replace the empty values with actual empty strings, you may do this instead:</p>
<pre><code>state = params.get('state', '')
country = params.get('country', '')
region = 'US' if (state and country) else ''
</code></pre>
<p>Overall, the "Pythonic" way of doing this is to use a Form:</p>
<pre><code>class Address(Model):
    state = ...
    country = ...
    region = ...

AddressForm = modelform_factory(Address)

#inside view
def view(request):
    if request.method == 'POST':
        form = AddressForm(request.POST, request.FILES)

        if form.is_valid():
            address = form.save(commit=False)
            address.region = 'US' if address.state and address.country
            address.save()
</code></pre>
<p>By creating a custom AddressForm class you can do this processing automatically on the instance before saving it. This is the precise role of Form classes.</p>
</div>
<span class="comment-copy"><code>d = {'foo': 'asad', 'bar': 'asdfsfs'}; d.get('foo'); d.get('foobar')</code>. The former will return <code>asad</code> and the latter will return <code>None</code></span>
<span class="comment-copy">Describe the purpose of the function here. And have you checked the list of Python built-ins?</span>
<span class="comment-copy">For the sake of clarity, <code>presence</code> and <code>present?</code> are not built-in Ruby methods; they're <a href="https://api.rubyonrails.org/classes/Object.html#method-i-presence" rel="nofollow noreferrer">defined by Rails</a>.</span>
<span class="comment-copy">I don't think it's necessary, becase python's truthiness criteria is the same as rails' <code>present?</code>. In ruby, only nil and false are "falsey" whereas in Python, empty strings/arrays/objects are also "falsey" (see <a href="https://docs.python.org/2.4/lib/truth.html" rel="nofollow noreferrer">docs.python.org/2.4/lib/truth.html</a>). So, you could just say <code>params = {"state": "", "country": ""}; result = params.get("state") or params.get("country") or "US"</code> and result would equal "US".</span>
<span class="comment-copy">For the sake of clarity, this question provides an overview of <code>present?</code>: <a href="https://stackoverflow.com/a/20663389/1779477">stackoverflow.com/a/20663389/1779477</a></span>
<span class="comment-copy">Disclaimer, I haven't used Django in a while and I have based this answer by reading the documentation, without actually testing this.</span>
