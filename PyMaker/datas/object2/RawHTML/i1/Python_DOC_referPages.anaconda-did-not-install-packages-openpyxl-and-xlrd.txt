<div class="post-text" itemprop="text">
<p>After installing a new Python 3.6 environment with pandas, numpy, etc. when I tried to use the following pandas method I got the following errors:</p>
<pre><code>&gt;&gt;&gt; df.to_excel(filename)
ModuleNotFoundError: No module named 'openpyxl'
</code></pre>
<p>Similar issue occurred earlier when I used the <code>pd.read_excel</code> method.</p>
<p>In both cases the problem was solved by installing <code>openpyxl</code> / <code>xlrd</code> with <code>conda install</code> but I would like to know if this is intentional behaviour and why openpyxl/xlrd wouldn't be considered a dependencies of pandas and installed from the beginning.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is intentional. If you read <a href="https://pandas.pydata.org/pandas-docs/stable/install.html#optional-dependencies" rel="nofollow noreferrer">the Optional Dependencies section of the Pandas documentation</a>, you can see that Excel I/O is included in there. </p>
<p>A couple arguments I can think of for why this is a good thing: </p>
<ol>
<li>There are so many features incorporated into Pandas that including everything by default would really bloat installs. </li>
<li>There are multiple compatible alternatives for Excel I/O, so it may not be fair to impose a particular choice on people, especially if they already have one installed for another dependency.</li>
</ol>
<p>However, I do think the error handling here could be improved. For example, it would have been better to provide a message saying that this functionality isn't available without one of the packages, rather than hitting a hard <code>ModuleNotFoundError</code>.</p>
</div>
<span class="comment-copy">Thanks for explaining.  I thought that might be the case and it does make sense.</span>
