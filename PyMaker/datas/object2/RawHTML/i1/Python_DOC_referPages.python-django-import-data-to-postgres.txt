<div class="post-text" itemprop="text">
<p>I am new to Django and wondering how to insert the data from a excel/csv/txt file into Postgres using Django. I was able to successfully connect to database and create a table but ca you guys help me with how to import and export data using Django models</p>
<p>Edit:</p>
<pre><code>csv_filepathname= "C:/Users/Desktop/MF.csv"
djang_proj_folder= "C:/Users/"

import sys,os
sys.path.append(djang_proj_folder)
os.environ['DJANGO_SETTINGS_MODULE'] ='cartel_app.settings'

from cartel_app.models import mf


import csv
datareader = csv.reader(open(csv_filepathname), delimiter='|')

for row in datareader:
    record_type = row[0]
    unique_system_identifier = row[1]
    uls_file_number=row[2]
    ebf_number=row[3]
    call_sign=row[4]
    partition_area_idnumeric=row[5]
    lower_frequency=row[6]
    upper_frequency=row[7]
    def_und_indicator=row[8]
    defined_partition_area=row[9]
</code></pre>
<p>was successfully able to load the data into table, but was only able to load 2 rows, it has more than 1000 rows, where am i doing wrong ?? Please suggest</p>
</div>
<div class="post-text" itemprop="text">
<p>It would be helpful if you post some more details but I think this will not change the method you take. For example, you have to import Book data from csv (use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">native csv reader</a>) / excel (use <a href="https://openpyxl.readthedocs.io/en/stable/" rel="nofollow noreferrer">openpyxl</a>), which has fields, like title, isbn, page_count and etc.</p>
<p>First of all, my recommendations would be to rely on django's ORM and create model (Book) with corresponding fields. Then just read the source file and do the main job - insert (for efficiency reasons, I recommend to use <a href="https://docs.djangoproject.com/en/2.1/ref/models/querysets/#bulk-create" rel="nofollow noreferrer">bulk_create</a>):</p>
<pre><code>entries = []
for line in source:
    entries.append(Book(title=line['title'], ... etc
Book.objects.bulk_create(entries)
</code></pre>
<p>In addition, for dumping data based on model, please use <a href="https://docs.djangoproject.com/en/2.1/ref/django-admin/#dumpdata" rel="nofollow noreferrer">built-in capability</a> of django:</p>
<pre><code>python manage.py dumpdata AppName.ModelName --format json
</code></pre>
<p>and voila. Hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>This depends heavily on your models, and how the csv needs to be processed before saving.</p>
<p>For example purposes, I'll be using this model:</p>
<pre class="lang-py prettyprint-override"><code># students/models.py
from django.db import models

class Student(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    grade = models.IntegerField()

    def __str__(self):
        return f"{self.first_name} {self.last_name} (grade={self.grade})"
</code></pre>
<p>To import the csv, we can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module from the stdlib</a>.</p>
<pre class="lang-py prettyprint-override"><code># students/data_import.py
import csv
from students.models import Student

def load_csv_file(path):
    with open(path) as file_obj:
        reader = csv.reader(file_obj)

        for row in reader:
            Student.objects.create(
                first_name=row[0],
                last_name=row[1],
                grade=int(row[2]),
            )
</code></pre>
<p>Now, we can test by importing a properly formatted csv:</p>
<pre class="lang-py prettyprint-override"><code># There are no products in the database to start
&gt;&gt;&gt; Student.objects.count()
0

# Here's a csv with some example data:
&gt;&gt;&gt; print(open("students.csv").read())
first_name,last_name,grade
John,Doe,5
Jane,Doe,8

&gt;&gt;&gt; from students.data_import import load_csv_file
&gt;&gt;&gt; load_csv_file("students.csv")
&gt;&gt;&gt; Student.objects.count()
2
&gt;&gt;&gt; Student.objects.values()
[
    {"first_name": "John", "last_name": "Doe", "grade": 5},
    {"first_name": "Jane", "last_name": "Doe", "grade": 8}
]
</code></pre>
</div>
<span class="comment-copy">Thank you for your reply, will try it and let you know if i see further issues</span>
<span class="comment-copy">I've just added another comment in the question above, can you please help with that?</span>
<span class="comment-copy">i fixed it. Thanks</span>
<span class="comment-copy">Thank you for your reply, will give it a shot and let you know if i see further issues</span>
<span class="comment-copy">I have added a new comment, can you please check and let me know what wrong am i doing</span>
<span class="comment-copy">i fixed it. Thanks</span>
<span class="comment-copy">@BharatGuda can you please explain how you fixed your issue so that future visitors to this question understand the problem and how to fix it? Once you've done that, please select one of the replies as the correct answer.</span>
<span class="comment-copy">above code worked fine for me, i just had to refresh the database. it took sometime to load all the records.</span>
