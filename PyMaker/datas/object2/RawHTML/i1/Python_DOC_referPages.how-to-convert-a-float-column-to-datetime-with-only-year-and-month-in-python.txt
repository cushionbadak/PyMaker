<div class="post-text" itemprop="text">
<p>I have a DATE column like this,</p>
<pre><code>    DATE   CÓDIGO  ...          UNIDADE  VALOR
0  2009.06  10000.0  ...              NaN    NaN
1  2009.06  10100.0  ...    NÃO SE APLICA      .
2  2009.06  10101.0  ...               M2   0.46
3  2009.06  10102.0  ...               UN  15.15
</code></pre>
<p>I want to convert it to date format <code>%Y%m</code>. </p>
<p>Applying the code,</p>
<pre><code>df['DATA'] = pd.to_datetime(df['DATA'], format='%Y.%m')
</code></pre>
<p>I get this,</p>
<pre><code>0   1970-01-01 00:00:00.000002009
1   1970-01-01 00:00:00.000002009
2   1970-01-01 00:00:00.000002009
3   1970-01-01 00:00:00.000002009
4   1970-01-01 00:00:00.000002009
Name: DATA, dtype: datetime64[ns]
</code></pre>
<p>Thanks for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert to string first:</p>
<pre><code>df['DATA'] = pd.to_datetime(df['DATA'].map('{:.2f}'.format), format='%Y.%m')
</code></pre>
<p>As it is, <code>pd.to_datetime</code> considers the float value is milliseconds since 1970.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding <code>astype(str)</code></p>
<pre><code>pd.to_datetime(df['DATE'].astype(str), format='%Y.%m')
Out[710]: 
0   2009-06-01
1   2009-06-01
2   2009-06-01
3   2009-06-01
Name: DATE, dtype: datetime64[ns]
</code></pre>
</div>
<span class="comment-copy">Thank you so much!</span>
<span class="comment-copy">I thought of that but I think controlling the format of the string conversion is safer :)</span>
