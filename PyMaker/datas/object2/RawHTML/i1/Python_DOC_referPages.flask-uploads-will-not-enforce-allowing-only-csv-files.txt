<div class="post-text" itemprop="text">
<p>I'm using Flask, Flask-Bootstrap and Flask-Uploads with Python 3.7.1 to create a very simple application that accepts a csv file containing raw data.</p>
<p>The 'upload' page must allow only .csv files to be uploaded. I have tried to implement the answer given on <a href="https://stackoverflow.com/questions/48370533/flask-uploads-define-which-files-are-allowed">this post.</a></p>
<p>Upload attempts with .csv work as expected, but other file types (eg .jpg) still appear to be accepted. Am I missing something obvious here?</p>
<p>'details.html' simply renders the filename on the page for now.</p>
<p>Python Code:</p>
<pre><code>import os  
from flask import Flask, render_template, url_for, request
from flask_bootstrap import Bootstrap
from flask_uploads import UploadSet, configure_uploads

app = Flask(__name__)
Bootstrap(app)

# Upload files configuration
csv_file = UploadSet('files', ('csv'))
app.config['UPLOADED_FILES_DEST'] = 'static/uploadstorage'
configure_uploads(app, csv_file)

# index
@app.route('/')
def index():
    return render_template('index.html')

# if csv file, show the data in a table. if not csv file, reload index page
@app.route('/datauploads', methods=['GET', 'POST'])
def datauploads():

    if request.method == 'POST' and 'csv_data' in request.files:

        file = request.files['csv_data']
        filename = file.filename
        file.save(os.path.join('static/uploadstorage', filename))
        return render_template('details.html', filename=filename)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are ignoring the upload set when you accept files. You need to use the <a href="https://pythonhosted.org/Flask-Uploads/#flaskext.uploads.UploadSet.save" rel="nofollow noreferrer"><code>UploadSet.save()</code> method</a> for extension checking to kick in.</p>
<p>You also need to pass in a sequence of extensions, currently you pass in a string, add a comma to make it a tuple:</p>
<pre><code>csv_file = UploadSet('files', ('csv',))
</code></pre>
<p>and in your view use:</p>
<pre><code>@app.route('/datauploads', methods=['GET', 'POST'])
def datauploads():
    if request.method == 'POST' and 'csv_data' in request.files:
        filename = csv_file.save(request.files['csv_data'])
        return render_template('details.html', filename=filename)

    return render_template('index.html')
</code></pre>
<p>You probably want to catch the <code>UploadNotAllowed</code> exception, however, as you'd otherwise get a 500 error:</p>
<pre><code>from flask_uploads import UploadSet, configure_uploads, UploadNotAllowed
from flask import flash

@app.route('/datauploads', methods=['GET', 'POST'])
def datauploads():
    if request.method == 'POST' and 'csv_data' in request.files:
        try:
            filename = csv_file.save(request.files['csv_data'])
            return render_template('details.html', filename=filename)
        except UploadNotAllowed:
            flash('Only CSV files can be uploaded, please correct', 'error')

    return render_template('index.html')
</code></pre>
<p>I used <a href="http://flask.pocoo.org/docs/1.0/patterns/flashing/" rel="nofollow noreferrer">message flashing</a> (which <a href="https://pythonhosted.org/Flask-Bootstrap/macros.html#flashed_messages" rel="nofollow noreferrer">Flask-Bootstrap can support directly</a>), but your <code>index.html</code> could also be altered to accept an error message.</p>
</div>
<span class="comment-copy">one attempt block in client side for example html5 <code>&lt;input type="file" accept=".csv" /&gt;</code></span>
<span class="comment-copy">This causes the browser dialog box to default to only showing .csv files, which is nice feature (thanks), but it's still possible for me to upload other file types.</span>
<span class="comment-copy">Tested this and the app will now prevent different file types from uploading - thank you Martijn. It was necessary to set the Secret Key for this to work.</span>
