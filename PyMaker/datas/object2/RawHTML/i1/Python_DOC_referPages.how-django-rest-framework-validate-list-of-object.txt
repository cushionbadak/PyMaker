<div class="post-text" itemprop="text">
<p>I already know that drf has an interface to add a validator to obejct, I have a view that can create multiple Param objects with one request, I want to verify if there are two or more objects whose <code>name</code> and <code>value</code> fields are the same, How can I validate the list of object in serializer?  </p>
<p>models.py</p>
<pre><code>class Param(models.Model):
    name = models.CharField(max_length=256)
    value = models.CharField(max_length=256)

    class Meta:
        unique_together = ('name', 'value')
</code></pre>
<p>serializers.py</p>
<pre><code>class ParamSerializer(serializers.ModelSerializer):

    class Meta:
        model = models.ParamKey
        fields = ['name', 'value']
        extra_kwargs = {
            'id': {
                'required': False,
            },
            'name': {
                'required': False,
            }
        }
</code></pre>
<p>views.py</p>
<pre><code>class ParamViewSet(viewsets.ViewSet):

    def create(self, request):

        serializer = serializer.ParamKeySerializer(
            data=request.data, many=True)
        if serializer.is_valid():
            return Response()
        return Response()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>ListSerializer</code> for this kind of functionality.</p>
<p>The ListSerializer class provides the behavior for serializing and validating multiple objects at once. You won't typically need to use <code>ListSerializer</code> directly, but should instead simply pass <code>many=True</code> when instantiating a serializer.</p>
<p>For reference visit <a href="https://www.django-rest-framework.org/api-guide/serializers/#listserializer" rel="nofollow noreferrer">https://www.django-rest-framework.org/api-guide/serializers/#listserializer</a></p>
<pre><code>class ParamListSerializer(serializers.ListSerializer):
    def validate(self, attrs):
        # Here attrs contains list of Params You can validate it here
        pass

    def create(self, validated_data):
        books = [Book(**item) for item in validated_data]
        return Book.objects.bulk_create(books)

class ParamSerializer(serializers.ModelSerializer):

    class Meta:
        model = models.ParamKey
        fields = ['name', 'value']
        list_serializer_class = ParamListSerializer  # This specifies which list serializer class to user
        extra_kwargs = {
            'id': {
                'required': False,
            },
            'name': {
                'required': False,
            }
        }

    def validate(self, attrs):
        # enter your validations here
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to do like this, may be it will help</p>
<pre><code>class ParamSerializer(serializers. ModelSerializer):
    class Meta:
        model = Param
        fields = ['name', 'value']
        extra_kwargs = {
            'id': {
                'required': False,
            },
            'name': {
                'required': False,
            }
        }

    def validate(self, attrs):
        # your validatator code here

    def create(self, validated_data):
       paramkeys = validated_data.pop('your_list')
       for p in paramkeys:
           param, _ = Param.objects.get_or_create(name=p.name, value=p.value)

</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/22621060/django-rest-framework-unique-together-validation-on-serializers" title="django rest framework unique together validation on serializers">stackoverflow.com/questions/22621060/…</a></span>
<span class="comment-copy">can you provide a minimal example of it? @Rhys</span>
<span class="comment-copy">This may be a more elegant solution. thanks a lot</span>
<span class="comment-copy">Can this way validate a list of object？</span>
