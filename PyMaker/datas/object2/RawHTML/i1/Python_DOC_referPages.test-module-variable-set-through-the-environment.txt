<div class="post-text" itemprop="text">
<p>Lets say that we fave a foo module that sets up a variable based on the environment, as follows:</p>
<pre class="lang-py prettyprint-override"><code>def get_foo():
    global FOO
    return FOO


def set_foo(val):
    global FOO
    FOO = val


def init_foo():
    import os
    if 'FOO' in os.environ:
        return os.environ['FOO']
    else:
        return 'foo'

try:
    FOO
except NameError:
    FOO = init_foo()
finally:
    print('module foo sets FOO: ', FOO)
</code></pre>
<p>how can we make a test that deletes the module variable <code>FOO</code> and reloads the module to set it properly?</p>
<pre class="lang-py prettyprint-override"><code>from foo import get_foo
import pytest
import os
import importlib


def test_default():
    assert get_foo() == 'foo'

@pytest.mark.parametrize('value', ['foo', 'bar', 'baz'])
def test_foo_env_setup(value, monkeypatch):
    monkeypatch.setenv('FOO', value)
    assert 'FOO' in os.environ
    assert os.environ['FOO']
    import foo
    importlib.reload(foo)
    assert foo.get_foo() == value
</code></pre>
<p>do I need to setup a context manager somehow with a <code>mocker</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>The module can be treated as an object, so the FOO attribute can be deleted in the test and do <code>importlib.reload</code>. </p>
<pre class="lang-py prettyprint-override"><code>@pytest.fixture
def foo_mocker():
    import foo
    assert foo.FOO == 'foo'
    del foo.FOO
    yield
    foo.FOO = 'foo'


@pytest.mark.parametrize('value', ['foo', 'bar', 'baz'])
def test_foo_env_setup(value, monkeypatch, foo_mocker):
    monkeypatch.setenv('FOO', value)
    assert 'FOO' in os.environ
    assert os.environ['FOO']
    import foo
    importlib.reload(foo)
    assert foo.get_foo() == value

</code></pre>
</div>
<span class="comment-copy">why not setting the environment variables you need in the test environment? I do that all the time.</span>
<span class="comment-copy">@PedroRodrigues the goal is not to set the variable perse but to test the different configs.</span>
