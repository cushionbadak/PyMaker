<div class="post-text" itemprop="text">
<p>I have the following string</p>
<pre><code>[(net, asset), (amount, asset), (connect, asset), (net, asset), (check, asset), (service, asset), (adapt, asset)] | [(part, asset)] 
</code></pre>
<p>I want to extract only the first words after the open bracket. My output should be - </p>
<pre><code>net amount connect net check service adapt part
</code></pre>
<p>data </p>
<pre><code>[(net, asset), (amount, asset), (connect, asset), (net, asset), (check, asset), (service, asset), (adapt, asset)] | [(part, asset)]
</code></pre>
<p>I tried the following.</p>
<pre><code>p=re.compile("'('(.*)','")
result = p.search(data)
result.group(1)
</code></pre>
<p>But this pattern matching is not working. Any help please</p>
</div>
<div class="post-text" itemprop="text">
<p>Analysis of regex here: <a href="https://regex101.com/r/kAXpNA/1" rel="nofollow noreferrer">https://regex101.com/r/kAXpNA/1</a>.</p>
<pre><code>re.findall('\((.*?),', '[(net, asset), (amount, asset), (connect, asset), (net, asset), (check, asset), (service, asset), (adapt, asset)] | [(part, asset)]')
#['net', 'amount', 'connect', 'net', 'check', 'service', 'adapt', 'part']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Change your code to:</p>
<pre><code>p = re.compile(r'\((\w+),')
result = p.search(data)
result.group(1)
</code></pre>
<p>Or if you want to have <strong>all</strong> first words after a <code>(</code>, write:</p>
<pre><code>[ m.group(1) for m in re.finditer(p, data)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A couple issues with your current pattern:</p>
<pre><code>p=re.compile("'('(.*)','")
</code></pre>
<ul>
<li>The single quotes in your pattern are literal single quote chars that it's searching your string for. Your data doesn't have any single quotes, so it's not matching.</li>
<li>You haven't escaped the parenthesis at the beginning. <code>(</code> and <code>)</code> are special chars in regexes that are used to create <a href="https://docs.python.org/3/howto/regex.html#grouping" rel="nofollow noreferrer">regex groups</a>. To literally match a parenthesis you need to do <code>\(</code>.</li>
<li>Also <code>.*</code> matches any char, and the regex will end up trying to match as many characters as it can, meaning it will span multiple pairs in your string. (as something like <code>"(net, asset), (amount, asset), (connect,"</code> does in fact satisfy that pattern) If you know the elements you're looking for instead are all word chars, as they are in your example, you could try doing <code>\w*</code> instead.</li>
</ul>
<p>Finally <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>search</code></a> only looks for the first match that it encounters. You instead want to use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>findall</code></a> to get every instance of your pattern in the string. So the result would be:</p>
<pre><code>p=re.compile("\((\w*),")
result = p.findall(data)
result
# ['net', 'amount', 'connect', 'net', 'check', 'service', 'adapt', 'part']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your pattern tries to match single quotes which are not present in the example data and you have to escape the opening parenthesis to match it literally.</p>
<p>The <code>.*</code> is greedy which will first match until the end of the string and then will backtrack matching the last comma to fulfill the whole pattern. You might turn that into a lazy quantifier <code>.+?</code> and use a plus to match it 1+ times.</p>
<p>Another way to get your matches if you want to match more than only word characters and you don't want to match an opening parenthesis of a comma is to  use a negated character class:</p>
<pre><code>\(([^,(]+)
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li><code>\(</code> Match <code>(</code> literally</li>
<li><code>(</code> Start capturing group

<ul>
<li><code>[^,(]+</code> Negated character class, match 1+ times not <code>,</code> or <code>(</code></li>
</ul></li>
<li><code>)</code> Close capturing group</li>
</ul>
<p>For example</p>
<pre><code>import re
regex = r"\(([^,(]+)"
data = "[(net, asset), (amount, asset), (connect, asset), (net, asset), (check, asset), (service, asset), (adapt, asset)] | [(part, asset)]"
print(re.findall(regex, data))

# ['net', 'amount', 'connect', 'net', 'check', 'service', 'adapt', 'part']
</code></pre>
<p><a href="https://regex101.com/r/OWkWOa/1" rel="nofollow noreferrer">Regex demo</a> | <a href="https://ideone.com/wrNiOX" rel="nofollow noreferrer">Python demo</a></p>
</div>
<span class="comment-copy"><code>p=re.compile("'('(\w*)','")</code> or <code>p=re.compile("'('(.*?)','")</code></span>
<span class="comment-copy">re.findall(r'(\w+),', text)</span>
<span class="comment-copy">thanks Joe,Pranav and Asterisk. Xgord - thanks a lot for the detailed explanation</span>
