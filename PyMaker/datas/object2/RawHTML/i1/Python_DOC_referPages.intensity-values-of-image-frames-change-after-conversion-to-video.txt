<div class="post-text" itemprop="text">
<p>I am using openCV to create videos of particular patterns. One of my patterns of size 35x35 looks like this </p>
<p><a href="https://i.stack.imgur.com/38vkK.png" rel="nofollow noreferrer"><img alt="pattern" src="https://i.stack.imgur.com/38vkK.png"/></a></p>
<p>and the corresponding numerical entries in the underlying matrix look like this </p>
<p><a href="https://i.stack.imgur.com/v0PKm.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/v0PKm.png"/></a> </p>
<p>My idea is to overlay the pattern onto a white background of size 260x346 and create a video where the pattern moves horizontally. The first frame would look something like this</p>
<p><a href="https://i.stack.imgur.com/1i2WM.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/1i2WM.jpg"/></a></p>
<p>I create the video using openCV with the following function</p>
<pre><code>def move_square(pattern, background):
    '''
    The function creates a video of the pattern moving horizontally over a given background

    Parameters:
    -----------
    pattern: &lt;np.array, 35x35&gt;
        The pattern supposed to move over the background
    background: &lt;np.array, 260x346&gt;
        A white background of the given size 
    '''
    fourcc = VideoWriter_fourcc(*'MP42')
    video = VideoWriter('./videos/moving_pattern_for_sampling_exp.avi', fourcc, 30, (346, 260))
    background[112:147, 0:35] = pattern
    frame = background

    for _ in range(0, 346-30):
        video.write(cv2.cvtColor(frame,cv2.COLOR_GRAY2RGB))
        shifted_frame =  np.roll(frame, 1, axis=1)
        frame = shifted_frame
        video.write(frame)

    cv2.destroyAllWindows()
    video.release()
</code></pre>
<p>However if I read the frames of the above video using the following snippet</p>
<pre><code>vidcap = cv2.VideoCapture('videos/moving_pattern_for_sampling_exp.avi')
success,image = vidcap.read()
count = 0

while success:
  cv2.imwrite("test/frame%d.jpg" % count, image)     # save frame as JPEG file      
  success,image = vidcap.read()
  print('Read a new frame: ', success)
  count += 1

im = cv2.imread('test/frame1.jpg')
img = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
np.savetxt("image.csv", np.asarray(img),fmt='%i', delimiter=",")
</code></pre>
<p>and now view the frames, the values of the pattern in the frame are different from what they originally were. </p>
<p><a href="https://i.stack.imgur.com/T5bxi.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/T5bxi.png"/></a></p>
<p>Also the locations which were supposed to be white with a value of 255, have now been set to 252 throughout. What could be the reason for these discrepancies?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you save an image with JPEG format, you lose quality, hence precision.
Here is an example of JPEG compression (you can find the full image <a href="https://d2dybsqaihwlah.cloudfront.net/wp-content/uploads/2017/03/18071917/compression.jpg" rel="nofollow noreferrer">here</a>):</p>
<p><a href="https://i.stack.imgur.com/2aa52.png" rel="nofollow noreferrer"><img alt="No compression" src="https://i.stack.imgur.com/2aa52.png"/></a>
<a href="https://i.stack.imgur.com/smoqI.png" rel="nofollow noreferrer"><img alt="Compression" src="https://i.stack.imgur.com/smoqI.png"/></a></p>
<p>You can observe the quality deterioration for the bird and the wood (in the full image).</p>
<p>As @Mark Setchell suggested, you can use PNG to avoid that, but beware that the more you have color variations in your image, the bigger will be your file.</p>
<p>If it an help, <a href="https://en.wikipedia.org/wiki/Image_file_formats" rel="nofollow noreferrer">this wikipedia article</a> briefly decribes the common file formats.</p>
</div>
<span class="comment-copy">JPEG is lossy. It is allowed to change your data to make your file smaller. Use PNG if you want lossless compression.</span>
<span class="comment-copy">Most video codecs will do you in, i.e. <i>"adjust"</i> your data, just the same as JPEG, by the way.</span>
<span class="comment-copy">Yeah, I realised that the video codec was not right. I replaced my old codec with one of those lossless codecs and my problem was solved. Thanks for your inputs.</span>
<span class="comment-copy">Thanks for your inputs. While the png/jpeg issue might be true in general, it doesn't seem to be helping here. I modified the above functions to write and read everything in terms of png images instead of jpeg. However, I ended up getting the same discrepancy. Could some kind of loss be happening due to the video codecs?</span>
<span class="comment-copy">I found that the problem also was in the video codec I'd used earlier. A lossless codec along with replacing .jpg with .png in the functions above solves the problem. Thanks for your help</span>
<span class="comment-copy">Glad it helps, the codec issue might be tough to find, well done.</span>
