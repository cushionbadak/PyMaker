<div class="post-text" itemprop="text">
<p>First-time question. I am writing a Python application for personal use, which reads metadata from MP3 files I've collected on CD-ROMs and inserts it into a MySQL database. At least, it should--but when it comes to the actual INSERT statement, the program is throwing a ProgrammingError: "1064: You have an error in your SQL syntax," etc.</p>
<p>In trying to write this program, I've learned how to create parameterized queries, instantiate the cursor object with <strong>cursor_class = MySQLCursorPrepared</strong>, and instantiate the database connection with <strong>use_pure = True</strong>. I've searched the Web for similar problems but come up dry.</p>
<p>Here is the offending code (it's the cursor.execute line specifically that throws the exception; for debugging purposes I've temporarily removed the try/except blocks):</p>
<pre><code>table = "mp3_t"
# Parameterized query for SQL INSERT statement
query = '''
INSERT INTO %s
(track_num, title, artist, album, album_year, genre, discname)
VALUES
(%s, '%s', '%s', '%s', %s, '%s', '%s')
'''

conn = self.opendb(self.config)
cursor = conn.cursor(cursor_class = MySQLCursorPrepared)
for track in tracklist:
    print("Counter: {}".format(counter))
    # Tuple for parameterized query
    input = (table, track['track_num'], track['title'],
             track['artist'], track['album'], track['album_year'],
             track['genre'], track['discname'])
    print(query % input) # What is the actual query?
    cursor.execute(query, input)
</code></pre>
<p>The database table is defined with the following SQL:</p>
<pre><code>CREATE TABLE mp3_t (
    id int NOT NULL PRIMARY KEY AUTO_INCREMENT,
    track_num int NOT NULL,
    title VARCHAR(255) NOT NULL,
    artist VARCHAR(255) NOT NULL,
    album VARCHAR(255) NOT NULL,
    album_year int NOT NULL,
    genre VARCHAR(255) NOT NULL,
    discname VARCHAR(255) NOT NULL);
</code></pre>
<p>For debugging, I've got a print statement that outputs the query that's being sent to MySQL (the error message is particularly unhelpful for trying to pinpoint the cause of the problem), for example:</p>
<pre><code>INSERT INTO mp3_t
    (track_num, title, artist, album, album_year, genre, discname)
    VALUES
    (1, 'Moribund the Burgermeister', 'Peter Gabriel', 'I', 1977, 'Rock', 'Rock 19')
</code></pre>
<p>I don't see any error visually, and if I paste directly into the MySQL CLI and add the required semicolon, it inserts a row into the table as expected.</p>
<p>I'm completely stymied where the problem lies.</p>
<p>If it's any help, I'm running Python 3.6.7 and MariaDB 10.1.37 with Connector/Python 8.0.15, on Ubuntu 18.04 64-bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>Table name should not be replaced by <code>%s</code>. I think your error message should like:</p>
<pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near "mp3_t"
</code></pre>
<p>So just use table name in your query template.</p>
<pre><code>INSERT INTO mp3_t
(track_num, title, artist, album, album_year, genre, discname)
VALUES
(%s, %s, %s, %s, %s, %s, %s)
</code></pre>
<p>If you want to know the query will be executed, you should use these codes:</p>
<pre><code>conn = connect()
cur = conn.cursor()
print(query % cur._get_db().literal(params))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use %s for table name. Use the table name directly.</p>
</div>
<span class="comment-copy">OK, I've replaced the %s with the table name (and removed the table variable from the input tuple).  That solved the immediate problem (thanks!): I'm not getting error 1064 anymore (huzzah!). But now I'm getting a ProgrammingError: 1210: "Incorrect number of arguments executing prepared statement." Again I don't see the problem; there are now 7 placeholders and 7 values.</span>
<span class="comment-copy">@RansomOttawa And also please don't quote <code>%s</code>. The single quote will be added automatically.</span>
<span class="comment-copy">Thanks again! Removing the quotes from around the %s placeholders did the trick. I take it that where a literal query would require quotes (e.g. around a string), the library supplies them for me? The documentation and examples I found on the Net weren't entirely clear on that.</span>
<span class="comment-copy">@RansomOttawa Ummmm... Yes, quotes should around a string, but not a placeholders. I edited my answer again, if you want to know the query will be executed, please use code above.</span>
