<div class="post-text" itemprop="text">
<p>For example, Data Frame is:</p>
<pre><code>df = pd.DataFrame(data = {'id': ['393848', '30495'],
                         'text' : ['This is Gabanna. @RT Her human Jose rushed past firefighters into his burning home to rescue her. She suffered burns on her nose and paws, but will be just fine. The family lost everything else. You can help them rebuild below. 14/10 for both (via @KUSINews)',
                                  'Meet Milo. He’s a smiley boy who tore a ligament in his back left zoomer. The surgery to fix it went well, but he’s still at the hospital being monitored. He’s going to work very hard to fetch at full speed again, and you can help him do it below. 13/10']
                         })
</code></pre>
<p>I wrote some functions:</p>
<pre><code>def tokenize(df): 
    def process_tokens(df): #return column with lists of tokens
        def process_reg(text): #return plain text
            return " ".join([i for i in re.sub(r'[^a-zA-Z\s]', "", str(text)).split()])
        df['tokens'] = [process_reg(text).split() for text in df['text']]
    return process_tokens(df) 

tokenize(df)

def process(df): #return column with dicts
    def process_group(token): #convert list of tokens into dictionery
            return pd.DataFrame(token, columns=["term"]).groupby('term').size().to_dict()
    df['dic'] = [process_group(token) for token in df['tokens']]

process(df)
</code></pre>
<p>They work great one by one and I got what expected:</p>
<p>I looking for the solution to nest all functions into one to be able to pass data frame just once. </p>
<p>Can't find. </p>
<p>Please, help</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def ad (df):
    def tokenize(df): #return column with dicts
        def process_tokens(df): #return column with lists of tokens
            def process_reg(text): #return plain text
                return " ".join([i for i in re.sub(r'[^a-zA-Z\s]', "", str(text)).split()])
            df['tokens'] = [process_reg(text).split() for text in df['text']]
        return process_tokens(df)

    tokenize(df)

    def process (df):
        def process_dic(df): #return column with dicts
            def process_group(token): #convert list of tokens into dictionery
                return pd.DataFrame(token, columns=["term"]).groupby('term').size().to_dict()
            df['dic'] = [process_group(token) for token in df['tokens']]
        return process_dic(df)

    return process(df)
</code></pre>
<p>then...</p>
<pre><code>ad(df)
</code></pre>
<p>works well. Though I have an idea that another way of writing this will perform faster.... a challenge for another day.</p>
<p>Thank you for your support, @Goyo!</p>
</div>
<span class="comment-copy"><code>process(tokenize(df))</code>?</span>
<span class="comment-copy"><code>--------------------------------------------------------------------------- TypeError                                 Traceback (most recent call last) &lt;ipython-input-20-4af9fb28a669&gt; in &lt;module&gt;() ----&gt; 1 process(tokenize(df))  &lt;ipython-input-15-ae9d3f8238ed&gt; in process(df)       2     def process_group(token): #convert list of tokens into dictionery       3             return pd.DataFrame(token, columns=["term"]).groupby('term').size().to_dict() ----&gt; 4     df['dic'] = [process_group(token) for token in df['tokens']]  TypeError: 'NoneType' object is not subscriptable</code></span>
<span class="comment-copy">Write a function that calls <code>tokenize</code> and then <code>process</code>.</span>
<span class="comment-copy">so I need one more function? could you show an example, please? and how to nest all of them into one container?</span>
<span class="comment-copy">Well it looks to me that you want a function that you do not have yet, hence you need one more function to get what you want. Now you don't know how to put <code>tokenize(df);process(df)</code> inside a function?</span>
<span class="comment-copy">You do not need to put the definitions of <code>tokenize</code> and <code>process</code>inside <code>ad</code>. <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Flat is better than nested.</a></span>
<span class="comment-copy">Agree technically, but this one for my own use and I personally want one function for all this stuff. I tried to put one inside another but fail and came up here with the question. I know that it is not perfect for now )</span>
