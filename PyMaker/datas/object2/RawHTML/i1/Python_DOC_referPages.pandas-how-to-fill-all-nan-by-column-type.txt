<div class="post-text" itemprop="text">
<p>In DataFrane.to_csv, I managed to write csv files removing <code>nan</code> values with</p>
<pre><code>df = df.replace('None','')
df = df.replace('nan','')
</code></pre>
<p>but my issue is that with this approach is that every nan values will be replaced with qoutes: <code>''</code></p>
<p>is it possible to replace nan values depending on type? </p>
<pre><code>if the nan dataframe == int dont add qoutes
if str set to ''
if float set to 0.0
</code></pre>
<p>etc.</p>
<p>tried this code but failed </p>
<pre><code>df['myStringColumn'].replace('None', '')
</code></pre>
<p>edit: here is the sample data frame i have</p>
<pre><code>      aTest    Vendor     name     price    qty
 0    y        NewVend             21.20    nan
 1    y        OldMakes            11.20    3
 2    nan      nan        sample   9.20     1
 3    n        nan        make     nan      0
</code></pre>
<p>here is my goal</p>
<pre><code>'y','NewVend','',21.20,,     
'y','OldMakes','',11.20,3,
'','','sample',9.20,1,
'n','','make',0.0,0,
</code></pre>
<p>here is the full script</p>
<pre><code>dtype_dic= {'price': float, 'qty': float}
df = pd.read_excel(os.path.join(sys.path[0], d.get('csv')), dtype=str)
for col, col_type in dtype_dic.items():
    df[col] = df[col].astype(col_type)
df = df.replace('None','')
df = df.replace('nan','')
df.to_csv('test.csv', index=False, header=False, quotechar='"', quoting=csv.QUOTE_NONNUMERIC)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can select the columns with required type using select_dtypes and then use fillna if the nan is np.nan, it works for None as well</p>
<pre><code>float_cols = df.select_dtypes(include=['float64']).columns
str_cols = df.select_dtypes(include=['object']).columns

df.loc[:, float_cols] = df.loc[:, float_cols].fillna(0)
df.loc[:, str_cols] = df.loc[:, str_cols].fillna('')
</code></pre>
<p>You get</p>
<pre><code>    aTest   Vendor      name    price   qty
0   y       NewVend             21.2    0.0
1   y       OldMakes            11.2    3.0
2                       sample  9.2     1.0
3   n                   make    0.0     0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try this!!</strong></p>
<pre><code>data = pd.read_csv("dataset/pokemon.csv")
data.head(7)


#   Name    Type 1  Type 2  HP  Attack  Defense Sp. Atk Sp. Def Speed   Generation  Legendary
0   1   Bulbasaur   Grass   Poison  45  49  49  65  65  45  1   False
1   2   Ivysaur Grass   Poison  60  62  63  80  80  60  1   False
2   3   Venusaur    Grass   Poison  80  82  83  100 100 80  1   False
3   4   Mega Venusaur   Grass   Poison  80  100 123 122 120 80  1   False
4   5   Charmander  Fire    NaN 39  52  43  60  50  65  1   False
5   6   Charmeleon  Fire    NaN 58  64  58  80  65  80  1   False
6   7   Charizard   Fire    Flying  78  84  78  109 85  100 1   False
</code></pre>
<p><strong>To know string type columns:</strong></p>
<pre><code>types = list(data.iloc[0])

str_types=[]
i=0
for a in l1:
    if type(a) == str:
        str_types.append(i)
    i+=1 

print str_types 
[1, 2, 3] #columns with string values
</code></pre>
<p><strong>Replace NaN with " ":</strong></p>
<pre><code>for a in str_types:
    data.iloc[:,a].fillna(" ",inplace =True)

data


#   Name    Type 1  Type 2  HP  Attack  Defense Sp. Atk Sp. Def Speed   Generation  Legendary
0   1   Bulbasaur   Grass   Poison  45  49  49  65  65  45  1   False
1   2   Ivysaur Grass   Poison  60  62  63  80  80  60  1   False
2   3   Venusaur    Grass   Poison  80  82  83  100 100 80  1   False
3   4   Mega Venusaur   Grass   Poison  80  100 123 122 120 80  1   False
4   5   Charmander  Fire        39  52  43  60  50  65  1   False
5   6   Charmeleon  Fire        58  64  58  80  65  80  1   False
6   7   Charizard   Fire    Flying  78  84  78  109 85  100 1   False
7   8   Mega Charizard X    Fire    Dragon  78  130 111 130 85  100 1   False
8   9   Mega Charizard Y    Fire    Flying  78  104 78  159 115 100 1   False
9   10  Squirtle    Water       44  48  65  50  64  43  1   False
10  11  Wartortle   Water       59  63  80  65  80  58  1   False
</code></pre>
</div>
<span class="comment-copy">Any series with strings <code>"None"</code> or <code>"nan"</code> must be <code>object</code>, as no other type supports strings. So it's not clear how you determine each type of series.</span>
<span class="comment-copy">Rather than going with the type you may approach replace function using columns. <code>df.column1.str.replace('None','')</code></span>
<span class="comment-copy">@mad_ got  Invalid "to_replace" type: 'str' error</span>
<span class="comment-copy">You may have to show the data as well. Please do not assume that we know what is contained in the data. Edit the post with the results of <code>df.head(5)</code>. Also, I gave a suggestion and not an answer as your post was related to the type of the column.</span>
<span class="comment-copy">thank you for your reply, I have updated the question.</span>
<span class="comment-copy">i tested yours and it works but I choose Vaishali's answer because she/he was first. I loled at the pokemon reference :)</span>
