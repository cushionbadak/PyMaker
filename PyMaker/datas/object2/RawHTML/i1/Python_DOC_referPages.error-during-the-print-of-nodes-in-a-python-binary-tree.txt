<div class="post-text" itemprop="text">
<p>When I run this program there are two same errors created by the existence of nodes <strong>left_left_right_node = (6)</strong> and <strong>right_right_left_left_node = (31)</strong>. When I call the function that print the tree <code>print(m_tree.print_values(root))</code> is present an <em>Traceback (most recent call last):</em> with the lines <code>self.print_values(root.left)</code> and <code>self.print_values(root.right)</code>. How can I resolve this problem?</p>
<pre><code>class Tree:
    def __init__(self, root=None):
        self.root = root

    def print_values(self, root):
        if root != None:
            print(root.data)
            self.print_values(root.left)
            self.print_values(root.right)


class Node:
    def __init__(self, data=0, left=None, right=None):
        self.data = data
        self.left=left
        self.right=right

#Create a root node
root = Node(0)

#Create a tree with the root node
m_tree = Tree(root)


#Add a left and right node to the root
left_node = Node(3)
right_node = Node(4)
root.left = left_node
root.right = right_node

# Add left and right nodes that are present in subtree blow root.left and root.right nodes
left_left_node = Node (5)
left_left_left_node = Node (7)
left_left_right_node = (6)
right_right_node = Node (20)
right_right_left_node = Node (30)
right_right_right_node = Node (35)
right_right_right_right_node = Node (47)
right_right_left_left_node = (31)

root.left.left = left_left_node
root.right.right = right_right_node
root.left.left.left = left_left_left_node
root.left.left.right = left_left_right_node
root.right.right.left = right_right_left_node
root.right.right.right = right_right_right_node
root.right.right.right.right = right_right_right_right_node
root.right.right.left.left = right_right_left_left_node

print(m_tree.print_values(root))
</code></pre>
<p>The form of this tree should be:</p>
<pre><code>                                                  0
                                                /    \
                                               /      \
                                             3          4
                                            /            \
                                           5              20
                                        /    \          /    \
                                       7      6        30     35
                                                      /         \
                                                    31           47   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>left_left_right_node = (6)
right_right_left_left_node = (31)
</code></pre>
<p>Nodes must be Node objects, not integers.</p>
<pre><code>left_left_right_node = Node(6)
right_right_left_left_node = Node(31)
</code></pre>
</div>
<span class="comment-copy">Welcome to Stack Overflow! Just a quick note, using <code>is not</code> with <code>None</code> instead of testing for inequality is the preferred way to go.</span>
<span class="comment-copy"><code>right_right_left_left_node</code> is an integer, not a <code>Node</code>. Just add <code>Node</code> in front of the parenthesis. Happy coding!</span>
<span class="comment-copy">That type of output is far more complicated to produce than simply printing the root and recursing. You need to know how "wide" the tree is at each level in order to space the children of each node properly.</span>
