<div class="post-text" itemprop="text">
<p>I need to check if some constant strings are used by a function, I'll call it <code>SpecialFunc</code> in my example, but this becomes extremely complicated beyond the trivial case.</p>
<p>Let's say we have two files:</p>
<p>Foo.h:</p>
<pre><code>class Foo {                                                                    
public:                                                                        
    void RandomFunc();                                                         
private:                                                                       
    static constexpr auto SomeConst {"Buzz"};                                  
}; 
</code></pre>
<p>Foo.cpp:</p>
<pre><code>#include "Foo.h"                                                            

#include &lt;string&gt;                                                           

void Foo::RandomFunc() {                                                    

   SpecialFunc("Fizz");                                                     
   SpecialFunc(SomeConst);                                                  

   const std::string otherConst = "Bar";                                    
   SpecialFunc(otherConst);                                                 
}
</code></pre>
<p>I'm looking to get <code>Fizz</code>, <code>Buzz</code>, and <code>Bar</code> as my output.</p>
<p>Currently I've tried implementing this in Python using regular expressions to find <code>SpecialFunc</code>, but this implementation becomes very messy and hard to deal with when you have to go about searching for constants, and gets even more confusing with scoping issues. Clang was my next option to try and parse everything, but I wasn't sure if there was a better way.</p>
<p>What is the best way of going about this? Python's the current language I've been trying to use for this, but I'm open to jumping to a different language as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, since you do not want to use RegEx and you formulated your question like you want to do in deep code analysis I will now suggests to use (part of a) compiler to do lexical analysis. This way is very hard and time consuming. But you can analyze practically everything about your code. And you will learn a lot.</p>
<p>So the basic idea is that a compiler takes your C/C++ code and first brings it into a graph called AST (abstract syntax tree). In that graph you can find so called tokens that represent your different "parts" of the program.</p>
<p>The idea is simple: if you tell the compiler that you do not wish for optimization before the lexer builds the AST then you will find either your strings or the variables which will contain the strings. So you have to take the AST, seek all the relevant functions and then check the parameters whether they are strings or variables of strings.</p>
<p>I have done something similar with the python package "pycparser" a few years ago. </p>
<p>However I have to warn you that this will be a lot of work. I strongly suggest that you ask yourself why you want to do this in the first place and check if there are not tools available to do what you want to do.</p>
</div>
<span class="comment-copy">Why do you want to do this? I looked into preprocessor dircetives and I think that Python might be your best bet.</span>
<span class="comment-copy">Collecting all of the values is part of what I need to do this for static analysis purposes.</span>
<span class="comment-copy">Forget the preprocessor, that was a dumb idea. I would suggest that you either take a actual compiler that is doing the function searching for you (hell of a project) or you use python. Don't think it can be done easier.</span>
<span class="comment-copy">What I now suggest is the following: stupidly difficult, really time consuming and probably not what you need.  But if you really want to do analysis of a program than the "proper" way is called "Lexical Analysis". Basically you use part of a compiler to put the code into different parts called tokens which you can use to analyze it.</span>
