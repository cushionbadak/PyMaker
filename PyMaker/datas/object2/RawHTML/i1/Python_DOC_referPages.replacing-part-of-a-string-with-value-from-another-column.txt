<div class="post-text" itemprop="text">
<p>A pandas DataFrame contains a column with descriptions and placeholders in curly braces:</p>
<pre><code>descr                        replacement
This: {should be replaced}   with this
</code></pre>
<p>The task is to replace the text in the curly braces with text from another column in the same row. It's unfortunately not as easy as:</p>
<pre><code>df["descr"] = df["descr"].str.replace(r"{*?}", df["replacement"])

~/anaconda3/lib/python3.6/site-packages/pandas/core/strings.py in replace(self, pat, repl, n, case, flags, regex)
   2532     def replace(self, pat, repl, n=-1, case=None, flags=0, regex=True):
   2533         result = str_replace(self._parent, pat, repl, n=n, case=case,
-&gt; 2534                              flags=flags, regex=regex)
   2535         return self._wrap_result(result)
   2536 

~/anaconda3/lib/python3.6/site-packages/pandas/core/strings.py in str_replace(arr, pat, repl, n, case, flags, regex)
    548     # Check whether repl is valid (GH 13438, GH 15055)
    549     if not (is_string_like(repl) or callable(repl)):
--&gt; 550         raise TypeError("repl must be a string or callable")
    551 
    552     is_compiled_re = is_re(pat)

TypeError: repl must be a string or callable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is using the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.replace.html" rel="nofollow noreferrer">Pandas.Series.str.replace()</a> and it expects two strings to perform the replacement operation, but the second parameter is a Series.</p>
<blockquote>
<p><strong>Series.str.replace(pat, repl, n=-1, case=None, flags=0,
  regex=True)[source]</strong></p>
<p>Replace occurrences of pattern/regex in the
  Series/Index with some other string. Equivalent to str.replace() or
  re.sub(). Parameters:  </p>
<p>pat : string or compiled regex </p>
<p>repl : string or callable
  ...</p>
</blockquote>
<p>You can correct it using directly the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.replace.html" rel="nofollow noreferrer">Pandas.Series.replace()</a> method:</p>
<pre><code>df = pd.DataFrame({'descr': ['This: {should be replaced}'],
                   'replacement': 'with this'
                  })
&gt;&gt; df["descr"].replace(r"{.+?}", df["replacement"], regex = True)
0    This: with this
</code></pre>
<p><strong>Observation:</strong></p>
<p>I changed a bit of your regexp.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension with <code>re.sub</code>, especially if performance is important:</p>
<pre><code>import re

df['new'] = [re.sub(r"{.*?}", b, a) for a, b in zip(df['descr'], df['replacement'])]
print (df)
                        descr replacement              new
0  This: {should be replaced}   with this  This: with this
1                This: {data}         aaa        This: aaa
</code></pre>
</div>
<span class="comment-copy">You'd better use a <code>r"{.+?}"</code> or <code>r"{[^{}]*}"</code> pattern.</span>
<span class="comment-copy">Thanks, @WiktorStribi≈ºew, you are correct! I haven't given so much emphasis on the regexp part. Just edited.</span>
<span class="comment-copy">Does leaving pandas for list comprehension have better performance than using pandas.Series.replace ?</span>
<span class="comment-copy">@clstaudt - sure, best test it, <code>str</code> operation in pandas are slow.</span>
