<div class="post-text" itemprop="text">
<p>I need to return the date format from a string. Currently I am using parser to parse a string as a date, then replacing the year with a yyyy or yy. Similarly for other dates items. Is there some function I could use that would return mm-dd-yyyy when I send 12-05-2018?</p>
</div>
<div class="post-text" itemprop="text">
<p>Technically, it is an impossible question. If you send in 12-05-2018, there is no way for me to know whether you are sending in a mm-dd-yyyy (Dec 5, 2018) or dd-mm-yyyy (May 12, 2018). </p>
</div>
<div class="post-text" itemprop="text">
<p>One approach might be to do a regex replacement of anything which matches your expected date pattern, e.g.</p>
<pre><code>date = "Here is a date: 12-05-2018 and here is another one: 10-31-2010"
date_masked = re.sub(r'\b\d{2}-\d{2}-\d{4}\b', 'mm-dd-yyyy', date)
print(date)
print(date_masked)

Here is a date: 12-05-2018 and here is another one: 10-31-2010
Here is a date: mm-dd-yyyy and here is another one: mm-dd-yyyy
</code></pre>
<p>Of course, the above script makes no effort to check whether the dates are actually valid.  If you require that, you may use one of the date libraries available in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't really understand what you plan to do with the format. There are two reasons I can think of why you might want it. (1) You want at some future point to convert a normalized <code>datetime</code> back into the original string. If that is what you want you would be better off just storing the normalized <code>datetime</code> and the original string. Or (2) you want to draw (dodgy) conclusions about person sending the data, because different nationalities will tend to use different formats. But, whatever you want it for, you can do it this way:</p>
<pre><code>from dateutil import parser

def get_date_format(date_input):
    date = parser.parse(date_input)
    for date_format in ("%m-%d-%Y", "%d-%m-%Y", "%Y-%m-%d"):
        # You can extend the list above to include formats with %y in addition to %Y, etc, etc
        if date.strftime(date_format) == date_input:
            return date_format

&gt;&gt;&gt; date_input =  "12-05-2018"
&gt;&gt;&gt; get_date_format(date_input)
'%m-%d-%Y'
</code></pre>
<p>You mention in a comment you are prepared to make assumptions about ambiguous dates like 12-05-2018 (could be May or December) and 05-12-18 (could be 2018 or 2005). You can pass those assumptions to <code>dateutil.parser.parse</code>. It accepts boolean keyword parameters <code>dayfirst</code> and <code>yearfirst</code> which it will use in ambiguous cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the datetime library. There you will find the function strptime(), which is exactly what you are looking for.</p>
<p>Here is the documentation: <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</a></p>
</div>
<span class="comment-copy">Not really. I can convert it easily, what I need is the format string. I need strings like mm-dd-yyyy as output when I pass a string</span>
<span class="comment-copy">Agreed. however, it is possible using some assumptions. Such as month would appear before the day. Also, I am planning on looking at a large dataset to resolve ambiguity, even if one value doesn't resolve correctly the final result would have a higher probability of being correct</span>
<span class="comment-copy">Thanks, this should help resolve a few of my use case and would surely help reduce the amount of code. I should have made it more clear. I am looking at a varied dataset. Formats could be mm/dd/yyyy, m/</span>
<span class="comment-copy">Previous comment got posted from my phone before I could finish typing. M/d/yy. HH:MM, 13-jan-2018, 20190324 etc</span>
<span class="comment-copy">Parser is able to resolve most of these dates with little or no additional parameters. I then search for 2 digit date followed by 4 digit date. Then 2 digit month, 1 digit month, month code, month name, 1 digit date,2 digit date, (hour, mins ,secs, pm appropriately) to form the string.</span>
<span class="comment-copy">Thanks for the answer. I am working with an org in our company that has a few decades worth of research data stored as some form of text format. I am currently trying to identify the structure of all these files. Which is step one to create a data model for these. So find out if the file had headers lines, columns names, column separators, data types, possible formats for dates. Properties that can help identify keys. Etc.  I posted the code in the code review site under the title identify structure of a text file using python. After some manual modification of the format file we can forward e</span>
<span class="comment-copy">Engineer the code to load the data into some sort of a structured database</span>
<span class="comment-copy">@UttaranBanerjee I suggest doing the date conversion at preload stage rather than deducing a format and leaving conversion to the load step. If you already have the date there is no point in postponing the conversion. If you do, your assumptions about mdy, dmy, ymd will be baked into the specification with no reliable way to review them. So convert to a date as best guess at preload, and also retain the original string representation so that it can be reviewed.</span>
<span class="comment-copy">No, <code>strptime</code> takes a string <i>and</i> a format and produces a data structure. It does not take a string and return a format.</span>
<span class="comment-copy">Thanks for your input Carlos, however I am looking for the format as output. Not a string representation of the date in a particular format. Am I missing something?</span>
<span class="comment-copy">Then I misunderstood the question, sorry. I don't know of any library that returns the format. Also, I don't see how that could work, as identifying the date and the month would be impossible if the day is lower or equal to 12.</span>
