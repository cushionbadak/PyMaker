<div class="post-text" itemprop="text">
<p>Let's say, I have a pre-existing mapping as a dictionary:</p>
<pre class="lang-py prettyprint-override"><code>value_map = {'a': 1, 'b': 2}
</code></pre>
<p>I can create an enum class from this like so:</p>
<pre class="lang-py prettyprint-override"><code>from enum import Enum
MyEnum = Enum('MyEnum', value_map)
</code></pre>
<p>and use it like so</p>
<pre class="lang-py prettyprint-override"><code>a = MyEnum.a
print(a.value)
&gt;&gt;&gt; 1
print(a.name)
&gt;&gt;&gt; 'a'
</code></pre>
<p>But then I want to define some methods to my new enum class:</p>
<pre class="lang-py prettyprint-override"><code>def double_value(self):
    return self.value * 2
</code></pre>
<p>Of course, i can do this:</p>
<pre class="lang-py prettyprint-override"><code>class MyEnum(Enum):
    a = 1
    b = 2
    @property
    def double_value(self):
        return self.value * 2
</code></pre>
<p>But as I said, I have to use a pre-defined value mapping dictionary, so I cannot do this.
How can this be achieved? I tried to inherit from another class defining this method like a mixin, but I could'nt figure it out.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass in a base type with mixin methods into the functional API, with the <code>type</code> argument:</p>
<pre><code>&gt;&gt;&gt; import enum
&gt;&gt;&gt; value_map = {'a': 1, 'b': 2}
&gt;&gt;&gt; class DoubledEnum:
...     @property
...     def double_value(self):
...         return self.value * 2
...
&gt;&gt;&gt; MyEnum = enum.Enum('MyEnum', value_map, type=DoubledEnum)
&gt;&gt;&gt; MyEnum.a.double_value
2
</code></pre>
<p>For a fully functional approach that never uses a <code>class</code> statement, you can create the base mix-in with the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code> function</a>:</p>
<pre><code>DoubledEnum = type('DoubledEnum', (), {'double_value': property(double_value)})
MyEnum = enum.Enum('MyEnum', value_map, type=DoubledEnum)
</code></pre>
<p>You can also use <code>enum.EnumMeta()</code> metaclass the same way, the way Python would when you create a <code>class MyEnum(enum.Enum): ...</code> subclass:</p>
<ol>
<li>Create a class dictionary using the metaclass <a href="https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace" rel="nofollow noreferrer"><code>__prepare__</code> hook</a></li>
<li>Call the metaclass, passing in the class name, the bases (<code>(enum.Enum,)</code> here), and the class dictionary created in step 1.</li>
</ol>
<p>The custom dictionary subclass that <code>enum.EnumMeta</code> uses isn't really designed for easy reuse; it implements a <code>__setitem__</code> hook to record metadata, but doesn't override the <code>dict.update()</code> method, so we need to use a little care when using your <code>value_map</code> dictionary:</p>
<pre><code>import enum

def enum_with_extras(name, value_map, bases=enum.Enum, **extras):
    if not isinstance(bases, tuple):
        bases = bases,
    if not any(issubclass(b, enum.Enum) for b in bases):
        bases += enum.Enum,
    classdict = enum.EnumMeta.__prepare__(name, bases)
    for key, value in {**value_map, **extras}.items():
        classdict[key] = value
    return enum.EnumMeta(name, bases, classdict)
</code></pre>
<p>Then pass in <code>double_value=property(double_value)</code> to that function (together with the enum name and <code>value_map</code> dictionary):</p>
<pre><code>&gt;&gt;&gt; def double_value(self):
...     return self.value * 2
...
&gt;&gt;&gt; MyEnum = enum_with_extras('MyEnum', value_map, double_value=property(double_value))
&gt;&gt;&gt; MyEnum.a
&lt;MyEnum.a: 1&gt;
&gt;&gt;&gt; MyEnum.a.double_value
2
</code></pre>
<p>You are otherwise allowed to create subclasses of an enum without members (anything that's a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a> is not a member, so functions, properties, classmethods, etc.), so you <em>can</em> define an enum without members first:</p>
<pre><code>class DoubledEnum(enum.Enum):
    @property
    def double_value(self):
        return self.value * 2
</code></pre>
<p>which is an acceptable base class for both in the functional API (e.g. <code>enum.Enum(..., type=DoubledEnum)</code>) and for the metaclass approach I encoded as <code>enum_with_extras()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a new meta class (Either using a meta-metaclass or a factory function, like I do below) that derives from <code>enum.EnumMeta</code> (The metaclass for enums) and just adds the members before creating the class</p>
<pre><code>import enum
import collections.abc


def enum_metaclass_with_default(default_members):
    """Creates an Enum metaclass where `default_members` are added"""
    if not isinstance(default_members, collections.abc.Mapping):
        default_members = enum.Enum('', default_members).__members__

    default_members = dict(default_members)

    class EnumMetaWithDefaults(enum.EnumMeta):
        def __new__(mcs, name, bases, classdict):
            """Updates classdict adding the default members and
            creates a new Enum class with these members
            """

            # Update the classdict with default_members
            # if they don't already exist
            for k, v in default_members.items():
                if k not in classdict:
                    classdict[k] = v

            # Add `enum.Enum` as a base class

            # Can't use `enum.Enum` in `bases`, because
            # that uses `==` instead of `is`
            bases = tuple(bases)
            for base in bases:
                if base is enum.Enum:
                    break
            else:
                bases = (enum.Enum,) + bases

            return super(EnumMetaWithDefaults, mcs).__new__(mcs, name, bases, classdict)

    return EnumMetaWithDefaults


value_map = {'a': 1, 'b': 2}


class MyEnum(metaclass=enum_metaclass_with_default(value_map)):
    @property
    def double_value(self):
        return self.value * 2


assert MyEnum.a.double_value == 2
</code></pre>
<hr/>
<p>A different solution was to directly try and update <code>locals()</code>, as it is replaced with a mapping that creates enum values when you try to assign values.</p>
<pre><code>import enum


value_map = {'a': 1, 'b': 2}


def set_enum_values(locals, value_map):
    # Note that we can't use `locals.update(value_map)`
    # because it's `locals.__setitem__(k, v)` that
    # creates the enum value, and `update` doesn't
    # call `__setitem__`.
    for k, v in value_map:
        locals[k] = v


class MyEnum(enum.Enum):
    set_enum_values(locals(), value_map)

    @property
    def double_value(self):
        return self.value * 2


assert MyEnum.a.double_value == 2
</code></pre>
<p>This seems well defined enough, and <code>a = 1</code> is most likely going to be the same as <code>locals()['a'] = 1</code>, but it might change in the future. The first solution is more robust and less hacky (And I haven't tested it in other Python implementations, but it probably works the same)</p>
</div>
<span class="comment-copy">Can't you just do <code>Enum('MyEnum', {k: v * 2 for k, v in value_map.items()})</code>?</span>
<span class="comment-copy">I can, but this double_value is just a dummy example, I would like to be able to define any methods.</span>
<span class="comment-copy">I'm not sure what is stopping you from defining such methods? please provide an example of what you are actually trying to achieve</span>
<span class="comment-copy">I don't understand, how you can just use <code>self.value</code> on that method. Since there is no instance variable named <code>value</code> :/</span>
<span class="comment-copy">@DeepSpace What stopps me, is that if I use this: <code>MyEnum = Enum('MyEnum', value_map)</code>, then I cannot define methods. But if I use this <code>class MyEnum(Enum): ...</code>, then I must write all values explicitely, and cannot use my pre-defined dict.</span>
<span class="comment-copy">That's nice, thanks! Any possibility to do this without having to use this <code>enum_with_extras</code> function? I mean as a class definition somehow?</span>
<span class="comment-copy">@waszil: I took a guess at what you might want and added that as an option: adding in a base enum class without members.</span>
<span class="comment-copy">This type argument method is what I thought of, thank you very much!</span>
<span class="comment-copy">One more question: if I would like to use this schema for IntEnum, I get: TypeError: object.__new__(MyEnum) is not safe, use int.__new__()</span>
<span class="comment-copy">Got it, DoubledEnum has to be subclassed from enum.IntEnum as well.</span>
