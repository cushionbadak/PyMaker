<div class="post-text" itemprop="text">
<p>I have a dataframe</p>
<pre><code>   state   country
0  tx      us
1  ab      ca
2  fl      
3          
4  qc      ca
5  dawd    
</code></pre>
<p>I'm trying to create a function that will check if there is a value in the <code>country</code> column. If there is NO value in <code>country</code> then check whether the value in <code>state</code> is a Canadian or American abbreviation. If it is a Canadian/American abbreviation, then assign the correct country name to the <code>country</code> column for that row.</p>
<p>For instance, in the sample DF above the function would see that in <code>row 2</code>, <code>country</code> is blank. Then it would see that the <code>state</code>, <code>fl</code> is part of the us. It would then assign the country to be <code>us</code>.</p>
<p>I'm thinking that this can be done with <code>pd.apply()</code> but I'm having trouble with the execution.</p>
<p>I've been playing around with the code below, but I'm doing something wrong...</p>
<pre><code>def country_identifier(country):
    states = ["AK", "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", 
              "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", 
              "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
    provinces = ["ON", "BC", "AB", "MB", "NB", "QC", "NL", "NT", "NS", "PE", "YT", "NU", "SK"]
    if country["country"] not None:
        if country["state"] in states:
            return "us"
        elif country["state"] in provinces:
            return "ca"
    else:
        return country

df2 = df[["country", "state"]].apply(country_identifier)
df2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use nested <code>np.where</code> conditions because that gives a hard limit on the conditions that can be checked. Use <code>df.loc</code> unless your list of conditions expands quite dramatically; it will be faster than <code>apply</code></p>
<pre><code>import pandas as pd
import numpy as np

states = ["AK", "AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", 
              "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", 
              "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"]
provinces = ["ON", "BC", "AB", "MB", "NB", "QC", "NL", "NT", "NS", "PE", "YT", "NU", "SK"]

df = pd.DataFrame({'country': {0: 'us', 1: 'ca', 2: np.nan, 3: np.nan, 4: 'ca', 5: np.nan},
                   'state': {0: 'tx', 1: 'ab', 2: 'fl', 3: np.nan, 4: 'qc', 5: 'dawd'}})

df.loc[(df['country'].isnull()) 
       &amp; (df['state'].str.upper().isin(states)), 'country'] = 'us'

df.loc[(df['country'].isnull()) 
       &amp; (df['state'].str.upper().isin(provinces)), 'country'] = 'ca'
</code></pre>
<p>It is extensible because there's a variety of methods I could use to produce a dictionary and then generalise the replacements.</p>
<pre><code>conditions = {'ca': provinces, 'us': states}

for country, values in conditions.items():
    df.loc[(df['country'].isnull()) 
           &amp; (df['state'].str.upper().isin(values)), 'country'] = country
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested np.where,</p>
<pre><code>df['country'] = np.where(df['state'].str.upper().isin(states), 'us', np.where(df['state'].str.upper().isin(provinces), 'ca', np.nan))

    state   country
0   tx      us
1   ab      ca
2   fl      us
3   None    nan
4   qc      ca
</code></pre>
<p>Edit: Include the check for country first,</p>
<pre><code>cond1 = df.loc[df['country'].isnull(), 'state'].str.upper().isin(states)
cond2 = df.loc[df['country'].isnull(), 'state'].str.upper().isin(provinces)
df.loc[df['country'].isnull(), 'country'] = np.where(cond1, 'us', np.where(cond2, 'ca', np.nan))



    state   country
0   tx      us
1   ab      ca
2   fl      us
3   NaN     nan
4   qc      ca
5   dawd    nan
</code></pre>
<p>Another way using numpy select; one liner and scales well with multiple conditions,</p>
<pre><code>df.loc[df['country'].isnull(), 'country'] = np.select([cond1, cond2], ['us', 'ca'], np.nan)
</code></pre>
</div>
<span class="comment-copy">You are almost there. You just need to add the <code>axis</code> parameter. <code>df[["country", "state"]].apply(country_identifier, axis=1)</code></span>
<span class="comment-copy">Very clean. That was a great explanation. Thanks!</span>
<span class="comment-copy">I think this almost works, but the reason I first check whether country is blank, rather than checking by state first is because there are other countries listed besides <code>ca</code> and <code>us</code>. I don't want to overwrite those countries with <code>np.nan</code>, but rather just replace blank values where possible</span>
<span class="comment-copy">@Matt, that would be a minor tweak to the existing code, you can see the edit</span>
