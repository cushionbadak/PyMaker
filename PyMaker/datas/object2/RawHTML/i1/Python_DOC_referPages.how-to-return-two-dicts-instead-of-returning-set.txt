<div class="post-text" itemprop="text">
<pre><code>def foo():
    dict_1 = dict()
    dict_2 = dict()

    return dict_1, dict_2

print(foo())
</code></pre>
<p>result: <code>({}, {})</code></p>
<p>But I need <code>{}, {}</code></p>
<p>How to do it?</p>
<p>I am trying to return data from function but getting:</p>
<p>See:</p>
<pre><code>[{
        'root': {
            'id': '17958765',

        }
    }, ({
        'lots': [{
                'purchaseNumber': '0873500000818004164'
            }
        ]
    }, {
        'PurchaseObjects': [{
            {
                'OKPD2_code': '123',
                'OKPD2_name': 'ffff'
            }
        ]
    })]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Those are the same thing, only <code>({}, {})</code> is printed in a non-ambiguous way.</p>
<p>The function is returning a <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuple</a> (more closely 2-tuple), not a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> as your title says.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>foo()</code> will give you a 2-tuple of two dictionaries. Fetch the return value, and index or unpack the tuple to get individual access to your two dictionaries.</p>
<pre class="lang-py prettyprint-override"><code>def foo():
    dict_1 = dict()
    dict_2 = dict()

    return dict_1, dict_2

# Do either one of the following (indexing or unpacking)

# Indexing a tuple
return_value = foo()
dict_1 = return_value[0]
dict_2 = return_value[1]

# Unpacking a tuple
dict_1, dict_2 = foo()
</code></pre>
<p>In the example you gave, unpacking is apparently the better way to go, but in some cases you might want to keep the returned tuple and access its elements later with indexing.</p>
</div>
<span class="comment-copy"><code>{}, {}</code> is <code>({}, {})</code>. What exactly are you trying to do?</span>
<span class="comment-copy"><code>print(*foo())</code> use this</span>
<span class="comment-copy">this now returns a <i>list</i> of a <i>dict</i> and a <i>tuple</i> containing two <i>dict</i> ... and the inner dicts have a value that contains a 1-element list containing another dict...</span>
<span class="comment-copy">What code gave you the list you gave with 'See:'? Definitely not the return value of your <code>foo()</code>.</span>
<span class="comment-copy">You can not return <i>two</i> values from a function - you can only ever return one. This returned element can be a container - f.e. a tuple or a list that contains other things. (*) simplified - not going into yield and generators</span>
