<div class="post-text" itemprop="text">
<p>I am trying to clean up my code a bit and basically have as little if statements as possible. In the code below, if in the message the code detects a certain word, I want it to initiate a specific function based on that word. I want to just have to make a new function for every new "command" to fire, and not have to make an accompanying if statement. Here's a sample code of the process</p>
<pre><code>message = 'goo'

#Commands
def foo():
    print('bar')

def goo():
    print('ber')

def swoo():
    print('bat')

#Detect if word in message
if 'foo' in message:
    foo()
if 'goo' in message:
    goo()
if 'swoo' in message:
    swoo()
</code></pre>
<p>What's the best way to achieve having the least amount of if statements and when I want to add a new function it doesn't need any additional code for it to work upon running?</p>
</div>
<div class="post-text" itemprop="text">
<p>this is a perfect use case for python decorators. First make a decorator (and a global dict) to remember your function:</p>
<pre><code>ALLCOMMANDS = {}
def commandfunction(function):
    ALLCOMMANDS[function.__name__] = function
    return function
</code></pre>
<p>Then make your functions with decorators:</p>
<pre><code>@commandfunction
def foo():
    print("bar")
</code></pre>
<p>and you use the dict to find the command:</p>
<pre><code>command = read_from_user()
if command in ALLCOMMANDS:
    ALLCOMMANDS[command]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>names = 'foo goo swoo'.split()

for name in names:
    if not (name in message):
        continue

    try:
        function = globals()[name] # get the function that has this name
    except KeyError:
        ... # if it's not there, do something
    else:
        function() # the function has been found, so call it!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ideally, you want to prefix these functions and explicit include them. For simplicity, I excluded the builtins.</p>
<pre><code>fns = {f:globals()[f] for f in dir() if not f.startswith('__')}
rets = [v() for k,v in fns.items() if k in message]
</code></pre>
</div>
<span class="comment-copy">so if the message is <code>'goofoo'</code> it would run both functions?</span>
<span class="comment-copy">@zipa Not within the scope of what i'm trying to do. I have parsing function for my actual code to make sure the word is actually not something like goofoo</span>
<span class="comment-copy">That's exactly what I needed! Works great, I wasn't very familiar with decorators but I guess I should have done some brushing up haha.</span>
