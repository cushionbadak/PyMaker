<div class="post-text" itemprop="text">
<p>Not sure how to use this editor, and I can't find this anywhere, so I figured I'd ask. I'm making a DND character creator in python. I have a list of the various skills, and want to be able to say "If the character is this class, they have the objects in this list." ex.</p>
<pre><code>Appraise, Balance, Bluff, Climb, Concentration, Craft, DecipherScript, Diplomacy,  DisableDevice, Disguise, EscapeArtist, Forgery, GatherInformation, HandleAnimal,  Heal, Hide, Intimidate, Jump, Knowledge, Listen, MoveSilently, OpenLock, Perform,  Profession, Ride, Search, SenseMotive, SleightOfHand, SpeakLanguage, Spellcraft,  Spot, Survival, Swim, Tumble, UseMagicDevice, UseRope = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

ClassSkills=[Appraise, Balance, Bluff, Climb, Concentration, Craft, DecipherScript, Diplomacy, DisableDevice, Disguise, EscapeArtist, Forgery, GatherInformation, HandleAnimal, Heal, Hide, Intimidate, Jump, Knowledge, Listen, MoveSilently, OpenLock, Perform,  Profession, Ride, Search, SenseMotive, SleightOfHand, SpeakLanguage, Spellcraft, Spot, Survival, Swim, Tumble, UseMagicDevice, UseRope]

if class=wizard:
ClassSkills= [Concentration, Craft, DecipherScript, Knowledge, Proffesion, Spellcraft]

if var in ClassSkills:
    SkillPoints= math.floor(Ranks)
else:
    SkillPoints= math.floor(Ranks/2)
</code></pre>
<p>there would be other things assigned by having the class wizard, but you probably get the point.</p>
<p>I'm pretty new to programming, and this is my first major program. I basically just want it to detect if the skill is a class skill, and run a different algorithm based on whether it is or not.</p>
<p>I'll also do some tweaking to have different skillpoints variables so I can individually modify the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think using if statements is the best approach here. Why not just define what skills a character class has as a class attributes and then make a property to sum their skill points? I love this project that you're working on by the way, what a great way to get into programming.</p>
<pre class="lang-py prettyprint-override"><code>from collections import namedtuple

Skill = namedtuple('Skill', ['name', 'skill_points'])

Appraise = Skill('Appraise', 2)
Balance = Skill('Balance', 3)

class Character():
    def __init__(self, name, skills=None):
        self.name = name
        self.skills = skills

    @property
    def skill_points(self):
        return sum([skill.skill_points for skill in self.skills])

class Wizard(Character):
    def __init__(self, name):
        super().__init__(name, skills=[Appraise, Balance])

bob_the_wizard = Wizard('Bob')
print(bob_the_wizard.skill_points) # 5

</code></pre>
</div>
<span class="comment-copy">Welcome to Stackoverflow. You could use a dictionary in which the keys would be the character classes and the values would be the list of objects.</span>
<span class="comment-copy">I haven't learned much about classes yet.</span>
<span class="comment-copy">I haven't done classes yet. What is the self.name? are any of these placeholder variables? What is namedtuple? What is the self tag used for? the @property? I'm really basic, so sorry if this all sounds dumb.</span>
<span class="comment-copy">This definitely seems like a good problem to use classes and object oriented programming for, but you could do it with just lists and dictionaries it would just be a lot messier. Here's a <a href="https://realpython.com/python3-object-oriented-programming/" rel="nofollow noreferrer">good tutorial</a> to learn some object oriented programming (classes) in Python.</span>
