<div class="post-text" itemprop="text">
<p>I have a problem with order view of my Django application. </p>
<p>The whole error:  </p>
<pre><code>Value Error: Cannot assign "SimpleLazyObject: User: wad2": "OrderItem.order"    
must be a "Order" instance.
</code></pre>
<p>This is the order view: </p>
<pre><code>@login_required
def my_order(request):
    user = request.user
    context = {}
    cart = Cart(request)
    if request.method == 'POST':
        form = OrderCreateForm(request.POST or None, instance=user)
        if form.is_valid():
            order = form.save()
            for item in cart:
                OrderItem.objects.create(
                    order=order,
                    product=item['product'],
                    price=item['price'],
                    quantity=item['quantity'])
            cart.clear()
            context['order'] = order
    else:
        form = OrderCreateForm()
        context['form']=form
    return render(request, 'iFood/my-order.html', context)
</code></pre>
<p>The form:</p>
<pre><code>class OrderCreateForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ('createdâ€™,)
</code></pre>
<p>The models for OrderItem and Order: </p>
<pre><code>class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.PROTECT, related_name='orders')  
    created = models.DateField(default=datetime.date.today())
    def __str__(self):
            return 'Order {}'.format(self.id)

    def get_total_cost(self):
            return sum(item.get_cost() for item in self.items.all())


class OrderItem(models.Model):
        order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
        product = models.ForeignKey(Product, related_name='order_items', on_delete=models.CASCADE)
        price = models.DecimalField(max_digits=10, decimal_places=2)
        quantity = models.PositiveIntegerField(default=1)
        def __str__(self):
            return '{}'.format(self.id)

        def get_cost(self):
            return self.price * self.quantity
</code></pre>
<p>The reason I'm using the form is just to confirm the user wants to create the order. I know there's something wrong with the way I create the <code>OrderItem</code> and reference order there but I don't know how to resolve it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You use <code>instance</code> in a model form when you want to edit an existing instance. If the model form is for <code>Order</code>, then the instance must be an order. You are passing a <code>User</code> instance, so you get the error.</p>
<p>In your case, you are creating a new order so you don't have to pass an instance. You can save the form with <code>commit=False</code>, and then set the user:</p>
<pre><code>if request.method == 'POST':
    form = OrderCreateForm(request.POST or None)
    if form.is_valid():
        order = form.save(commit=False)
        order.user = request.user
        order.save()
        ...
</code></pre>
<p>Since you don't get the user to fill in any fields in the form, you could get rid of the form completely. You can still check <code>request.method</code>, and that way you will only create the order for <code>POST</code> requests.</p>
<pre><code>if request.method == 'POST':
    order = Order.objects.create(user=request.user)
    ...
</code></pre>
</div>
