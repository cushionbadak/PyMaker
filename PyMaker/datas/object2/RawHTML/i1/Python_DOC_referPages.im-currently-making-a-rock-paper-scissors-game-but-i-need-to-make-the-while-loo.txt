<div class="post-text" itemprop="text">
<p>I am writing a program that must accept input from the user.</p>
<pre><code>#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`
age = int(input("Please enter your age: "))
if age &gt;= 18: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
<p>This works as expected if the user enters sensible data. </p>
<pre class="lang-none prettyprint-override"><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: 23
You are able to vote in the United States!
</code></pre>
<p>But if they make a mistake, then it crashes:</p>
<pre class="lang-none prettyprint-override"><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Traceback (most recent call last):
  File "canyouvote.py", line 1, in &lt;module&gt;
    age = int(input("Please enter your age: "))
ValueError: invalid literal for int() with base 10: 'dickety six'
</code></pre>
<p>Instead of crashing, I would like it to try getting the input again. Like this:</p>
<pre class="lang-none prettyprint-override"><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Sorry, I didn't understand that.
Please enter your age: 26
You are able to vote in the United States!
</code></pre>
<p>How can I accomplish this? What if I also wanted to reject values like <code>-1</code>, which is a valid <code>int</code>, but nonsensical in this context?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to accomplish this would be to put the <code>input</code> method in a while loop. Use <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="noreferrer"><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>
<h2>When Your Input Might Raise an Exception</h2>
<p>Use <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer">try and catch</a> to detect when the user enters data that can't be parsed.</p>
<pre><code>while True:
    try:
        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input
        age = int(input("Please enter your age: "))
    except ValueError:
        print("Sorry, I didn't understand that.")
        #better try again... Return to the start of the loop
        continue
    else:
        #age was successfully parsed!
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
<h2>Implementing Your Own Validation Rules</h2>
<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>
<pre><code>while True:
    data = input("Please enter a loud message (must be all caps): ")
    if not data.isupper():
        print("Sorry, your response was not loud enough.")
        continue
    else:
        #we're happy with the value given.
        #we're ready to exit the loop.
        break

while True:
    data = input("Pick an answer from A to D:")
    if data.lower() not in ('a', 'b', 'c', 'd'):
        print("Not an appropriate choice.")
    else:
        break
</code></pre>
<h2>Combining Exception Handling and Custom Validation</h2>
<p>Both of the above techniques can be combined into one loop.</p>
<pre><code>while True:
    try:
        age = int(input("Please enter your age: "))
    except ValueError:
        print("Sorry, I didn't understand that.")
        continue

    if age &lt; 0:
        print("Sorry, your response must not be negative.")
        continue
    else:
        #age was successfully parsed, and we're happy with its value.
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
<h2>Encapsulating it All in a Function</h2>
<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>
<pre><code>def get_non_negative_int(prompt):
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print("Sorry, I didn't understand that.")
            continue

        if value &lt; 0:
            print("Sorry, your response must not be negative.")
            continue
        else:
            break
    return value

age = get_non_negative_int("Please enter your age: ")
kids = get_non_negative_int("Please enter the number of children you have: ")
salary = get_non_negative_int("Please enter your yearly earnings, in dollars: ")
</code></pre>
<h3>Putting It All Together</h3>
<p>You can extend this idea to make a very generic input function:</p>
<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):
    if min_ is not None and max_ is not None and max_ &lt; min_:
        raise ValueError("min_ must be less than or equal to max_.")
    while True:
        ui = input(prompt)
        if type_ is not None:
            try:
                ui = type_(ui)
            except ValueError:
                print("Input type must be {0}.".format(type_.__name__))
                continue
        if max_ is not None and ui &gt; max_:
            print("Input must be less than or equal to {0}.".format(max_))
        elif min_ is not None and ui &lt; min_:
            print("Input must be greater than or equal to {0}.".format(min_))
        elif range_ is not None and ui not in range_:
            if isinstance(range_, range):
                template = "Input must be between {0.start} and {0.stop}."
                print(template.format(range_))
            else:
                template = "Input must be {0}."
                if len(range_) == 1:
                    print(template.format(*range_))
                else:
                    print(template.format(" or ".join((", ".join(map(str,
                                                                     range_[:-1])),
                                                       str(range_[-1])))))
        else:
            return ui
</code></pre>
<p>With usage such as:</p>
<pre><code>age = sanitised_input("Enter your age: ", int, 1, 101)
answer = sanitised_input("Enter your answer: ", str.lower, range_=('a', 'b', 'c', 'd'))
</code></pre>
<h2>Common Pitfalls, and Why you Should Avoid Them</h2>
<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>
<p>This method works but is generally considered poor style:</p>
<pre><code>data = input("Please enter a loud message (must be all caps): ")
while not data.isupper():
    print("Sorry, your response was not loud enough.")
    data = input("Please enter a loud message (must be all caps): ")
</code></pre>
<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>
<h3>Recursion Will Blow Your Stack</h3>
<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>
<pre><code>def get_non_negative_int(prompt):
    try:
        value = int(input(prompt))
    except ValueError:
        print("Sorry, I didn't understand that.")
        return get_non_negative_int(prompt)

    if value &lt; 0:
        print("Sorry, your response must not be negative.")
        return get_non_negative_int(prompt)
    else:
        return value
</code></pre>
<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think "no fool would make 1000 mistakes in a row", but you're underestimating the ingenuity of fools!</p>
</div>
<div class="post-text" itemprop="text">
<p>Why would you do a <code>while True</code> and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?</p>
<pre><code>age = None
while age is None:
    input_value = input("Please enter your age: ")
    try:
        # try and convert the string input to a number
        age = int(input_value)
    except ValueError:
        # tell the user off
        print("{input} is not a number, please enter a number only".format(input=input_value))
if age &gt;= 18:
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
<p>This would result in the following:</p>
<pre><code>Please enter your age: *potato*
potato is not a number, please enter a number only
Please enter your age: *5*
You are not able to vote in the United States.
</code></pre>
<p>this will work since age will never have a value that will not make sense and the code follows the logic of your "business process"</p>
</div>
<div class="post-text" itemprop="text">
<p>Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) </p>
<pre><code>f=lambda age: (age.isdigit() and ((int(age)&gt;=18  and "Can vote" ) or "Cannot vote")) or \
f(input("invalid input. Try again\nPlease enter your age: "))
print(f(input("Please enter your age: ")))
</code></pre>
<p>P.S. This code is for python 3.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it's even checked in any logical way.</p>
<p><code>read_single_keypress()</code> courtesy <a href="https://stackoverflow.com/a/6599441/4532996">https://stackoverflow.com/a/6599441/4532996</a></p>
<pre><code>def read_single_keypress() -&gt; str:
    """Waits for a single keypress on stdin.
    -- from :: https://stackoverflow.com/a/6599441/4532996
    """

    import termios, fcntl, sys, os
    fd = sys.stdin.fileno()
    # save old state
    flags_save = fcntl.fcntl(fd, fcntl.F_GETFL)
    attrs_save = termios.tcgetattr(fd)
    # make raw - the way to do this comes from the termios(3) man page.
    attrs = list(attrs_save) # copy the stored version to update
    # iflag
    attrs[0] &amp;= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK
                  | termios.ISTRIP | termios.INLCR | termios. IGNCR
                  | termios.ICRNL | termios.IXON )
    # oflag
    attrs[1] &amp;= ~termios.OPOST
    # cflag
    attrs[2] &amp;= ~(termios.CSIZE | termios. PARENB)
    attrs[2] |= termios.CS8
    # lflag
    attrs[3] &amp;= ~(termios.ECHONL | termios.ECHO | termios.ICANON
                  | termios.ISIG | termios.IEXTEN)
    termios.tcsetattr(fd, termios.TCSANOW, attrs)
    # turn off non-blocking
    fcntl.fcntl(fd, fcntl.F_SETFL, flags_save &amp; ~os.O_NONBLOCK)
    # read a single keystroke
    try:
        ret = sys.stdin.read(1) # returns a single character
    except KeyboardInterrupt:
        ret = 0
    finally:
        # restore old state
        termios.tcsetattr(fd, termios.TCSAFLUSH, attrs_save)
        fcntl.fcntl(fd, fcntl.F_SETFL, flags_save)
    return ret

def until_not_multi(chars) -&gt; str:
    """read stdin until !(chars)"""
    import sys
    chars = list(chars)
    y = ""
    sys.stdout.flush()
    while True:
        i = read_single_keypress()
        _ = sys.stdout.write(i)
        sys.stdout.flush()
        if i not in chars:
            break
        y += i
    return y

def _can_you_vote() -&gt; str:
    """a practical example:
    test if a user can vote based purely on keypresses"""
    print("can you vote? age : ", end="")
    x = int("0" + until_not_multi("0123456789"))
    if not x:
        print("\nsorry, age can only consist of digits.")
        return
    print("your age is", x, "\nYou can vote!" if x &gt;= 18 else "Sorry! you can't vote")

_can_you_vote()
</code></pre>
<p>You can find the complete module <a href="https://github.com/catb0t/input_constrain" rel="nofollow noreferrer">here</a>.</p>
<p>Example:</p>
<pre><code>$ ./input_constrain.py
can you vote? age : a
sorry, age can only consist of digits.
$ ./input_constrain.py 
can you vote? age : 23&lt;RETURN&gt;
your age is 23
You can vote!
$ _
</code></pre>
<p>Note that the nature of this implementation is it closes stdin as soon as something that isn't a digit is read. I didn't hit enter after <code>a</code>, but I needed to after the numbers.</p>
<p>You could merge this with the <code>thismany()</code> function in the same module to only allow, say, three digits.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def validate_age(age):
    if age &gt;=0 :
        return True
    return False

while True:
    try:
        age = int(raw_input("Please enter your age:"))
        if validate_age(age): break
    except ValueError:
        print "Error: Invalid age."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this one:- </p>
<pre><code>def takeInput(required):
  print 'ooo or OOO to exit'
  ans = raw_input('Enter: ')

  if not ans:
      print "You entered nothing...!"
      return takeInput(required) 

      ##  FOR Exit  ## 
  elif ans in ['ooo', 'OOO']:
    print "Closing instance."
    exit()

  else:
    if ans.isdigit():
      current = 'int'
    elif set('[~!@#$%^&amp;*()_+{}":/\']+$').intersection(ans):
      current = 'other'
    elif isinstance(ans,basestring):
      current = 'str'        
    else:
      current = 'none'

  if required == current :
    return ans
  else:
    return takeInput(required)

## pass the value in which type you want [str/int/special character(as other )]
print "input: ", takeInput('str')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To edit your code and fix the error:</p>
<pre><code>while True:
    try:
       age = int(input("Please enter your age: "))
       if age &gt;= 18: 
           print("You are able to vote in the United States!")
           break
       else:
           print("You are not able to vote in the United States.")
           break
    except ValueError:
       print("Please enter a valid response")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.</p>
<pre><code>def getValidInt(iMaxAttemps = None):
  iCount = 0
  while True:
    # exit when maximum attempt limit has expired
    if iCount != None and iCount &gt; iMaxAttemps:
       return 0     # return as default value

    i = raw_input("Enter no")
    try:
       i = int(i)
    except ValueError as e:
       print "Enter valid int value"
    else:
       break

    return i

age = getValidInt()
# do whatever you want to do.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use "while" statement till user enter a true value and if the input value is not a number or it's a null value skip it and try to ask again and so on. 
In example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it's a wrong value.
For terminating program, the user can use 0 key and enter it as a value.</p>
<blockquote>
<p>Note: Read comments top of code.</p>
</blockquote>
<pre><code># If your input value is only a number then use "Value.isdigit() == False".
# If you need an input that is a text, you should remove "Value.isdigit() == False".
def Input(Message):
    Value = None
    while Value == None or Value.isdigit() == False:
        try:        
            Value = str(input(Message)).strip()
        except InputError:
            Value = None
    return Value

# Example:
age = 0
# If we suppose that our age is between 1 and 150 then input value accepted,
# else it's a wrong value.
while age &lt;=0 or age &gt;150:
    age = int(Input("Please enter your age: "))
    # For terminating program, the user can use 0 key and enter it as an a value.
    if age == 0:
        print("Terminating ...")
        exit(0)

if age &gt;= 18 and age &lt;=150: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building upon Daniel Q's and Patrick Artner's excellent suggestions,
here is an even more generalized solution.</p>
<pre><code># Assuming Python3
import sys

class ValidationError(ValueError):  # thanks Patrick Artner
    pass

def validate_input(prompt, cast=str, cond=(lambda x: True), onerror=None):
    if onerror==None: onerror = {}
    while True:
        try:
            data = cast(input(prompt))
            if not cond(data): raise ValidationError
            return data
        except tuple(onerror.keys()) as e:  # thanks Daniel Q
            print(onerror[type(e)], file=sys.stderr)
</code></pre>
<p>I opted for explicit <code>if</code> and <code>raise</code> statements instead of an <code>assert</code>,
because assertion checking may be turned off,
whereas validation should always be on to provide robustness.</p>
<p>This may be used to get different kinds of input,
with different validation conditions.
For example:</p>
<pre><code># No validation, equivalent to simple input:
anystr = validate_input("Enter any string: ")

# Get a string containing only letters:
letters = validate_input("Enter letters: ",
    cond=str.isalpha,
    onerror={ValidationError: "Only letters, please!"})

# Get a float in [0, 100]:
percentage = validate_input("Percentage? ",
    cast=float, cond=lambda x: 0.0&lt;=x&lt;=100.0,
    onerror={ValidationError: "Must be between 0 and 100!",
             ValueError: "Not a number!"})
</code></pre>
<p>Or, to answer the original question:</p>
<pre><code>age = validate_input("Please enter your age: ",
        cast=int, cond=lambda a:0&lt;=a&lt;150,
        onerror={ValidationError: "Enter a plausible age, please!",
                 ValueError: "Enter an integer, please!"})
if age &gt;= 18: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While a <code>try</code>/<code>except</code> block will work, a much faster and cleaner way to accomplish this task would be to use <code>str.isdigit()</code>.</p>
<pre><code>while True:
    age = input("Please enter your age: ")
    if age.isdigit():
        age = int(age)
        break
    else:
        print("Invalid number '{age}'. Try again.".format(age=age))

if age &gt;= 18: 
    print("You are able to vote in the United States!")
else:
    print("You are not able to vote in the United States.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.</p>
<pre><code>while True:

    var = True

    try:
        age = int(input("Please enter your age: "))

    except ValueError:
        print("Invalid input.")
        var = False

    if var == True:
        if age &gt;= 18:
                print("You are able to vote in the United States.")
                break
        else:
            print("You are not able to vote in the United States.")
</code></pre>
<p>The var variable is just so that if the user enters a string instead of a integer the program wont return "You are not able to vote in the United States."</p>
</div>
<div class="post-text" itemprop="text">
<p>Use try catch with never ending while loop. To check for blank string use IF statement to check if string is empty.</p>
<pre><code>while True:
    name = input("Enter Your Name\n")
    if not name:
        print("I did not understood that")
        continue
    else:
        break

while True:
    try:
        salary = float(input("whats ur salary\n"))
    except ValueError:
        print("I did not understood that")
        continue
    else:
        break

while True:
    try:
        print("whats ur age?")
        age = int(float(input()))
    except ValueError:
        print("I did not understood that")
        continue
    else:
        break

print("Hello "+ name +  "\nYour salary is " + str(salary) + '\nand you will be ' + str(age+1) +' in a Year')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will continue ask user to input the number until they input a valid number:</p>
<pre><code>#note: Python 2.7 users should use raw_input, the equivalent of 3.X's input
while(1):
    try:
        age = int(input("Please enter your age: "))
        if age &gt;= 18: 
            print("You are able to vote in the United States!")
            break()
        else:
            print("You are not able to vote in the United States.")
            break()
    except:
        print("Please only enter numbers ")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more solution for using input validation using a customized <code>ValidationError</code> and a (optional) range validation for integer inputs:</p>
<pre><code>class ValidationError(ValueError): 
    """Special validation error - its message is supposed to be printed"""
    pass

def RangeValidator(text,num,r):
    """Generic validator - raises 'text' as ValidationError if 'num' not in range 'r'."""
    if num in r:
        return num
    raise ValidationError(text)

def ValidCol(c): 
    """Specialized column validator providing text and range."""
    return RangeValidator("Columns must be in the range of 0 to 3 (inclusive)", 
                          c, range(4))

def ValidRow(r): 
    """Specialized row validator providing text and range."""
    return RangeValidator("Rows must be in the range of 5 to 15(exclusive)",
                          r, range(5,15))
</code></pre>
<p>Usage:</p>
<pre><code>def GetInt(text, validator=None):
    """Aks user for integer input until a valid integer is given. If provided, 
    a 'validator' function takes the integer and either raises a 
    ValidationError to be printed or returns the valid number. 
    Non integers display a simple error message."""
    print()
    while True:
        n = input(text)
        try:
            n = int(n)

            return n if validator is None else validator(n)

        except ValueError as ve:
            # prints ValidationErrors directly - else generic message:
            if isinstance(ve, ValidationError):
                print(ve)
            else:
                print("Invalid input: ", n)


column = GetInt("Pleased enter column: ", ValidCol)
row = GetInt("Pleased enter row: ", ValidRow)
print( row, column)
</code></pre>
<p>Output:</p>
<pre><code>Pleased enter column: 22
Columns must be in the range of 0 to 3 (inclusive)
Pleased enter column: -2
Columns must be in the range of 0 to 3 (inclusive)
Pleased enter column: 2
Pleased enter row: a
Invalid input:  a
Pleased enter row: 72
Rows must be in the range of 5 to 15(exclusive)
Pleased enter row: 9  

9, 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a cleaner, more generalized solution that avoids repetitive if/else blocks: write a function that takes (Error, error prompt) pairs in a dictionary and do all your value-checking with assertions.</p>
<pre><code>def validate_input(prompt, error_map):
    while True:
        try:
            data = int(input(prompt))
            # Insert your non-exception-throwing conditionals here
            assert data &gt; 0
            return data
        # Print whatever text you want the user to see
        # depending on how they messed up
        except tuple(error_map.keys()) as e:
            print(error_map[type(e)])
</code></pre>
<p>Usage:</p>
<pre><code>d = {ValueError: 'Integers only', AssertionError: 'Positive numbers only', 
     KeyboardInterrupt: 'You can never leave'}
user_input = validate_input("Positive number: ", d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Good question! You can try the following code for this. =)</p>
<p>This code uses <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">ast.literal_eval()</a> to <strong>find the data type of the input</strong> (<code>age</code>). Then it follows the following algorithm:</p>
<blockquote>
<ol>
<li><p>Ask user to input her/his <code>age</code>.</p>
<p>1.1. If <code>age</code> is <code>float</code> or <code>int</code> data type:</p>
<ul>
<li><p>Check if <code>age&gt;=18</code>. If <code>age&gt;=18</code>, print appropriate output and exit.</p></li>
<li><p>Check if <code>0&lt;age&lt;18</code>. If <code>0&lt;age&lt;18</code>, print appropriate output and exit.</p></li>
<li><p>If <code>age&lt;=0</code>, ask the user to input a valid number for age again, (<em>i.e.</em> go back to step 1.) </p></li>
</ul>
<p>1.2. If <code>age</code> is not <code>float</code> or <code>int</code> data type, then ask user to input her/his age again (<em>i.e.</em> go back to step 1.) </p></li>
</ol>
</blockquote>
<p>Here is the code.</p>
<pre><code>from ast import literal_eval

''' This function is used to identify the data type of input data.'''
def input_type(input_data):
    try:
        return type(literal_eval(input_data))
    except (ValueError, SyntaxError):
        return str

flag = True

while(flag):
    age = raw_input("Please enter your age: ")

    if input_type(age)==float or input_type(age)==int:
        if eval(age)&gt;=18: 
            print("You are able to vote in the United States!") 
            flag = False 
        elif eval(age)&gt;0 and eval(age)&lt;18: 
            print("You are not able to vote in the United States.") 
            flag = False
        else: print("Please enter a valid number as your age.")

    else: print("Sorry, I didn't understand that.") 
</code></pre>
</div>
<span class="comment-copy">PS. Some may think it's wrong that I'm answering my own question right after posting it. Before downvoting, please read <a href="http://blog.stackoverflow.com/2011/07/its-ok-to-ask-and-answer-your-own-questions/">It's OK to Ask and Answer Your Own Questions</a>. See also <a href="http://blog.stackoverflow.com/2014/04/putting-the-community-back-in-wiki/?cb=1">Putting the Community back in Wiki</a>, which says "Compiling a canonical reference" is "something wonderful". Questions like this one are asked often enough to justify writing a post that can concisely answer all of them.</span>
<span class="comment-copy">Its fun reading it with many examples, kudos. Underrated lesson: "Don't underestimate the ingenuity of fools!"</span>
<span class="comment-copy">Not only would I have upvoted both the Q&amp;A anyway, as they're great, but you sealed the deal with "dickety six". Well done, @Kevin.</span>
<span class="comment-copy">Note that this code is recursive, but recursion isn't necessary here, and as Kevin said, it can blow your stack.</span>
<span class="comment-copy">@PM2Ring - you are right. But my purpose here was just to show how "short circuiting" can minimise (beautify) long pieces of code.</span>
<span class="comment-copy">Why would you assign a lambda to a variable, just use <code>def</code> instead. <code>def f(age):</code> is far clearer than <code>f = lambda age:</code></span>
<span class="comment-copy">In some cases, you may need the age just once and then there is no use of that function. One may want to use a function and throw it away after the job is done. Also, this may not be the best way, but it definitely is a different way of doing it (which was the purpose of my solution).</span>
<span class="comment-copy">you forget to increase the iCount value after each loop</span>
<span class="comment-copy"><code>str.isnumeric</code> is only available in Python 3 and does not return true for all valid integers. Like <code>str.isdigit</code> it is testing properties of the characters, and <code>-</code> is not a numeric character.</span>
