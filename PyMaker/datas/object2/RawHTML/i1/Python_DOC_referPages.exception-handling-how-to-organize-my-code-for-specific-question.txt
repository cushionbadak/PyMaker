<div class="post-text" itemprop="text">
<p>So, I'm currently taking an intro to programming class and we started learning about files and exception handling. I'm having trouble with a question that is based on exception handling. </p>
<p>This question is asking me to read the data from <code>population.txt</code>, checks to make sure the file exists and is in the right format (if it isnâ€™t throw an appropriate exception), calculates the combined population of the countries in the text file and prints that total.</p>
<p>This is how the file looks like</p>
<pre><code>Afghanistan:32738376
Albania:3619778
Algeria:33769669
Jamaica:2804332
Japan:127288419
Paraguay:6831306
Peru:29180899
Philippines:92681453
Pitcairn Islands:48
Tajikistan:7211884
Turkmenistan:5179571
Zambia:11669534
Zimbabwe:12382920
</code></pre>
<p>I did something like this. As you can see, I am confused as to how to organize my code, but I know I am onto something. Should I have put the if statements under the except clause? How would you guys have done this?</p>
<pre><code>try:
    infile=open("population..txt","r")
    for line in infile:
        line=line.rstrip()
        wordList=line.split(":")
        if type(word[0])!=str:
            raise ValueError("This is not a string")
        elif type(word[1])!=int:
            raise ValueError("This not an integer")
        else:
            pass
except IOError as e:
    print(e)
else:
finally:
    infile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions need to be raised inside a <code>try</code> block to be catched. That part of the code is correct. You need however to catch all the different exceptions that may be raised and definitely in this case <em>you do not need to raise them by yourself:</em></p>
<pre><code>try:
    totpopulation = 0

    with open("population.txt","r") as infile:
        for line in infile:
            line=line.rstrip()
            wordList=line.split(":")
            popul = int(wordList[1])
            totpopulation += popul
    print("Total population:", totpopulation)

except (OSError, ValueError, IndexError) as e:
    print(e)
</code></pre>
<p>As you see here the <code>raise</code> statement is not used explicitly: exceptions are raised by the built-in functions when their argument is not valid:</p>
<ul>
<li><code>OSError</code> is the class of the exception raised by <code>open</code> if the file does not exists.</li>
<li><code>ValueError</code> is the class of the exception raised by <code>int(wordList[1])</code> if the string <code>wordList[1]</code> cannot be converted to an integer.</li>
<li><code>IndexError</code> is raised by <code>wordlist[1]</code> if the length of <code>wordlist</code> is 0, hence Index out of range. It may happen if a line is not splitted because <code>':'</code> is missing.</li>
</ul>
<p>It seems to me that you do not need other exception classes in this code. However the list of all the built-in exceptions is in the <a href="https://docs.python.org/3/library/exceptions.html#OSError" rel="nofollow noreferrer">docs</a>, if you wish to know what other exceptions are available.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">With Statement Context Managers</a> to avoid exceptions while reading data from the file.</p>
<pre><code>with open('text_file', 'r') as f:
    # pass your code there
</code></pre>
</div>
<span class="comment-copy">The with statement does not "avoid" exceptions. They are still raised if something goes wrong, and need to be catched.</span>
