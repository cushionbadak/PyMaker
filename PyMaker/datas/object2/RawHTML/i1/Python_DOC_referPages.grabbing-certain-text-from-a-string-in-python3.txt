<div class="post-text" itemprop="text">
<p>I'm currently starting to script more in Python and could use some help! I have a function that returns some stats from a server. Currently my function:</p>
<pre><code>def get_free_memory(ssh_obj):
stdin, stdout, stderr = ssh_obj.exec_command('free -h')
mem_stats = stdout.readlines()[1]
mem_stats_formatted = " ".join(mem_stats.split())
return mem_stats_formatted
</code></pre>
<p>returns</p>
<pre><code>Mem: 991M 71M 757M 12M 162M 751M
</code></pre>
<p>I'd like to further parse useful info from this output and get the total memory (991M) and the available memory (757M). What would be the best way to do this?</p>
<p>Also would it be better to return both or have two separate functions. One called get_free_memory and get_available_memory?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>str.split()</code> and assign to variables, also a second argument with default can help you with the only total/free avail scenario</p>
<pre><code>def get_free_memory(ssh_obj, raw=True):
    stdin, stdout, stderr = ssh_obj.exec_command('free -h')
    mem_stats = stdout.readlines()[1]

    if raw:
        mem_stats_formatted = " ".join(mem_stats.split())
        return mem_stats_formatted
    else:
        _, total, used, free, shared, cache, avail = mem_stats_formatted.split()
        return total, avail  # You may format this to a string if you wish
</code></pre>
<p>Edit:
I don't know what you do with this info but it seems more useful to me to return a dictionary of all the data and consume it later</p>
<pre><code>def get_free_memory(ssh_obj):
    stdin, stdout, stderr = ssh_obj.exec_command('free -h')
    mem_stats = stdout.readlines()[1]
    _, total, used, free, shared, cache, avail = mem_stats_formatted.split()
    memory_info = {
                      'total': total,
                      'used': used, 
                      'free': free,
                      'shared': shared,
                      'cache': cache,
                      'available': avail
                  }

    return memory_info
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>mem_stats.split()</code> you get all the whitespace-separated values from the <code>mem_stats</code> string into a list.</p>
<p>So, if the values of interest for you are the 2nd and 4th element (considering that 'Mem:' is also part of your initial string) you can just access them from that list:</p>
<pre><code>mem_fields = mem_stats.split()

total_mem = mem_fields[1] 
avail_mem = mem_fields[3]
</code></pre>
<p>Based on what you've said I can't see why you should do any string parsing to get the fields you need.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need <code>total</code> and <code>free</code> columns, you can return a tuple.</p>
<pre><code>def get_free_memory(ssh_obj):
    stdin, stdout, stderr = ssh_obj.exec_command('free -h')
    mem_stats = stdout.readlines()[1]
    mem_stats_splitted = mem_stats.split()
    return (mem_stats_splitted[1], mem_stats_splitted[3])
</code></pre>
</div>
<span class="comment-copy">Can you also show us a sample input?</span>
<span class="comment-copy">You seem to already know <code>split()</code> - what are you asking exactly? (Although I admittedly do not really get the meaning of <code>mem_stats_formatted = " ".join(mem_stats.split())</code>)</span>
<span class="comment-copy">I like your idea of returning a dictionary actually! I'm going to use this instead. Appreciate the help!</span>
<span class="comment-copy">This worked perfectly thank you!</span>
<span class="comment-copy"><code>mem_stats_splitted[0]</code> is <code>Mem:</code>, which makes <code>total</code> value is <code>mem_stats_splitted[1]</code></span>
