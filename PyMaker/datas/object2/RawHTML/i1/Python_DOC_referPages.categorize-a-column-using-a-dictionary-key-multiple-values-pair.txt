<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>'Consulting': {'Deloitte', 'EY', 'KPMG', 'PwC'},
'Education': {'.edu', 'College', 'University'},
'Government':{'state','.gov','city'},
'Corporate':{'corpor','consumer','care'},
 ...... etc.
</code></pre>
<p>I have a dataframe:</p>
<pre><code> Sno  Text            column1    column2 ......
  1   Deloitte.com
  2   Texas.gov
  3   smi@EY.com
  4   UTD.edu
  5   rapper@corporate.com

 ..... etc.
</code></pre>
<p>I want to use the dictionary to categorize the dataframe and build a column Category, like this:</p>
<pre><code> Sno  Text                   Category       column1    column2 ......
  1   Deloitte.com           Consulting
  2   Texas.gov              Government
  3   smi@EY.com             Consulting
  4   UTD.edu                Education
  5   rapper@corporate.com   Corporate
 ..... etc.
</code></pre>
<p>How can I utilize the dictionary with multiple values in python to find full phrase or part of the phrase in the Text column and categorize it? Can we also use the same logic in case 2 matches exist? What will happen then?</p>
<p>Also, 
Might sound vague, but the reason I am using Dictionary is because we can map multiple values to one category, is there a better way to do it without the dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC after re-create your <code>dict</code>  do with <code>findall</code>, then map it back </p>
<pre><code>newdict = {i: k for k, v in d.items() for i in v}
df.Text.str.findall('|'.join(newdict.keys())).str[0].map(newdict)
Out[431]: 
0    Consulting
1    Government
2    Consulting
3     Education
4     Corporate
Name: Text, dtype: object

df['cate']=df.Text.str.findall('|'.join(newdict.keys())).str[0].map(newdict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can also be done using <code>re</code> and <code>np.vectorize</code>:</p>
<pre><code>cat = re.compile('|'.join(f"(?P&lt;{k}&gt;{'|'.join(v)})" for k,v in categories.items()))
df['category'] = np.vectorize(lambda x: cat.search(x).lastgroup)(df.text)
</code></pre>
<p>This gave me:</p>
<pre><code>                   text    category
0          Deloitte.com  Consulting
1             Texas.gov  Government
2            smi@EY.com  Consulting
3               UTD.edu   Education
4  rapper@corporate.com   Corporate
</code></pre>
<p>Basically I create a regex string consisting of the category dict keys as group names, and values as a pattern delimited by <code>|</code> <sub>meaning <code>or</code></sub>. Then vectorize is used to map this regex search to each item getting the cooresponding group name found</p>
</div>
<span class="comment-copy">[k for k, v in dictionary.items() if v in col_value] should get all the matches. Assuming only one match exists, get the 0th index. You can then use df[“text”].apply(lambda ...). Forgive typos - I’m on my phone</span>
<span class="comment-copy">Can you edit the code to find wildcards? For example, instead of Corporate we have Corpor, I still want to tag that as corporate. Some thing in the terms of ".str.contains()"</span>
<span class="comment-copy">@KshitijYadav this is involved natural language process , you may need find what type of abbreviation you have in your real data</span>
<span class="comment-copy">Got it. One last question, what about a time when given name satisfy two condition? Like it has corporate.edu which means it would satisfy condition for both Corporate and Education. How would we deal with that</span>
<span class="comment-copy">@KshitijYadav<code>[newdict[y] for y in x ]for x in df.Text.str.findall('|'.join(newdict.keys()))]</code></span>
<span class="comment-copy">Hey Jab, what about a time when given name satisfy two condition? Like it has corporate.edu which means it would satisfy condition for both Corporate and Education. How would we deal with that</span>
