<div class="post-text" itemprop="text">
<p>I have a script named <code>requests.py</code> that imports the requests package.  The script either can't access attributes from the package, or can't import them.  Why isn't this working and how do I fix it?</p>
<p>The following code raises an <code>AttributeError</code>.</p>
<pre><code>import requests

res = requests.get('http://www.google.ca')
print(res)
</code></pre>
<pre><code>Traceback (most recent call last):
  File "/Users/me/dev/rough/requests.py", line 1, in &lt;module&gt;
    import requests
  File "/Users/me/dev/rough/requests.py", line 3, in &lt;module&gt;
    requests.get('http://www.google.ca')
AttributeError: module 'requests' has no attribute 'get'
</code></pre>
<p>The following code raises an <code>ImportError</code>.</p>
<pre><code>from requests import get

res = get('http://www.google.ca')
print(res)
</code></pre>
<pre><code>Traceback (most recent call last):
  File "requests.py", line 1, in &lt;module&gt;
    from requests import get
  File "/Users/me/dev/rough/requests.py", line 1, in &lt;module&gt;
    from requests import get
ImportError: cannot import name 'get'
</code></pre>
<p>Or code that imports from a module inside the <code>requests</code> package:</p>
<pre><code>from requests.auth import AuthBase
</code></pre>
<pre><code>Traceback (most recent call last):
  File "requests.py", line 1, in &lt;module&gt;
    from requests.auth import AuthBase
  File "/Users/me/dev/rough/requests.py", line 1, in &lt;module&gt;
    from requests.auth import AuthBase
ImportError: No module named 'requests.auth'; 'requests' is not a package
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This happens because your local module named <code>requests.py</code> shadows the installed <code>requests</code> module you are trying to use.  The current directory is prepended to <code>sys.path</code>, so the local name takes precedence over the installed name.</p>
<p>An extra debugging tip when this comes up is to look at the Traceback carefully, and realize that the name of your script in question is matching the module you are trying to import: </p>
<p>Notice the name you used in your script:</p>
<pre><code>File "/Users/me/dev/rough/requests.py", line 1, in &lt;module&gt;
</code></pre>
<p>The module you are trying to import: <code>requests</code></p>
<p>Rename your module to something else to avoid the name collision.</p>
<p>Python may generate a <code>requests.pyc</code> file next to your <code>requests.py</code> file (in the <code>__pycache__</code> directory in Python 3).  Remove that as well after your rename, as the interpreter will still reference that file, re-producing the error. However, the <code>pyc</code> file in <code>__pycache__</code> <em>should</em> not affect your code if the <code>py</code> file has been removed.</p>
<p>In the example, renaming the file to <code>my_requests.py</code>, removing <code>requests.pyc</code>, and running again successfully prints <code>&lt;Response [200]&gt;</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the writer of the original question, and for those people searching on the “AttributeError: module has no attribute” string, then the common explanation as per the accepted answer, is that a user-created script has a name-clash with a library filename. Note, however, that the trouble might not be in the name of the script that generates the error (as it was in the above case), nor in any of the names of the library modules explicitly imported by that script. It might take a little detective work to figure out which file is causing the problem. </p>
<p>As an example to illustrate the problem, imagine that you are creating a script that uses the "decimal" library for accurate floating-point calculations with decimal numbers, and you name your script "<code>mydecimal.py</code>" that contains the line "<code>import decimal</code>". There's no problem with any of that but you find that it raises this error:</p>
<pre><code>AttributeError: 'module' object has no attribute 'Number'
</code></pre>
<p>This would happen if you had <em>previously</em> written a script called "<code>numbers.py</code>" because the "decimal" library calls on the standard library "numbers" but finds your old script instead. Even if you had deleted that, it might not end the problem because python might have converted that into bytecode and stored it in a cache as "<code>numbers.pyc</code>", so you'd have to hunt that down as well.</p>
</div>
<span class="comment-copy">Please note that this is intended as a canonical answer to a common question ... please don't close as duplicate unless you're sure the other question has a better, more complete answer.</span>
