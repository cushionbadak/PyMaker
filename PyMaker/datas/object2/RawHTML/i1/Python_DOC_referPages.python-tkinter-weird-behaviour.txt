<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/29754714/error-when-configuring-tkinter-widget-nonetype-object-has-no-attribute">Error when configuring tkinter widget: 'NoneType' object has no attribute</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have the below code in Python (v3.7 installed):</p>
<pre><code>import datetime
import tkinter as tk

class Person:
    def __init__(self, name, birthdate):
        self.name = name
        self.birthdate = birthdate

    def age(self):
        today = datetime.date.today()
        age = today.year - self.birthdate.year
        return age

window = tk.Tk()  # Create frame
window.geometry("400x400")  # Create frame geometry
window.title("Age Calculator App")  # Set title of the frame

# Add Labels
year_label = tk.Label(master=window, text="Year").grid(column=0, row=1)
month_label = tk.Label(master=window, text="Month").grid(column=0, row=2)
day_label = tk.Label(master=window, text="Day").grid(column=0, row=3)

# Add Entries
year_entry = tk.Entry()
year_entry.grid(column=1, row=1)
month_entry = tk.Entry()
month_entry.grid(column=1, row=2)
day_entry = tk.Entry()
day_entry.grid(column=1, row=3)

def calculate_age():
    print(year_entry.get())
    print(month_entry.get())
    print(day_entry.get())
    print("Button was clicked!!")

calculate_button = tk.Button(text="Calculate now", command=calculate_age).grid(column=1, row=4)  # Add calculate button
</code></pre>
<p>The code works fine and runs as expected, however, if I change these lines:</p>
<pre><code># Add Entries
year_entry = tk.Entry()
year_entry.grid(column=1, row=1)
month_entry = tk.Entry()
month_entry.grid(column=1, row=2)
day_entry = tk.Entry()
day_entry.grid(column=1, row=3)
</code></pre>
<p>And make them one-liners like so:</p>
<pre><code># Add Entries
year_entry = tk.Entry().grid(column=1, row=1)
month_entry = tk.Entry().grid(column=1, row=2)
day_entry = tk.Entry().grid(column=1, row=3)
</code></pre>
<p>I am getting the below error:</p>
<blockquote>
<p>Exception in Tkinter callback Traceback (most recent call last):<br/>
  File "Python/lib/tkinter/<strong>init</strong>.py", line 1705, in <strong>call</strong>
      return self.func(*args)   File "person_class.py", line 42, in
  calculate_age
      print(year_entry.get()) AttributeError: 'NoneType' object has no attribute 'get'</p>
</blockquote>
<p>How is this possible? Shouldn't this be doable on a one-liner instead of having to split the entries into different lines?</p>
<p>Can someone explain me why is this weird behavior happening and how can I better make use of the one-liners when declaring stuff in Python 3.x?</p>
<p>Please note that I am a beginner in Python. In Java or Groovy, the one-liners would simply work as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>because for reasons to me obscure tkinter loses the reference to the object</p>
<p>try it</p>
<pre><code># Add Labels
year_label = tk.Label(master=window, text="Year")
year_label.grid(column=0, row=1)
month_label = tk.Label(master=window, text="Month")
month_label.grid(column=0, row=2)
day_label = tk.Label(master=window, text="Day")
day_label.grid(column=0, row=3)

# Add Entries
  year_entry = tk.Entry()
  year_entry.grid(column=1, row=1)
  month_entry = tk.Entry().grid(column=1, row=2)
  day_entry = tk.Entry().grid(column=1, row=3)

def calculate_age():
    print(type(year_entry))
    print(type(month_entry))
    return
</code></pre>
<p>that return</p>
<p>class 'NoneType' for month_entry that is in line</p>
<p>class 'tkinter.Entry' for year_entry that isn't</p>
</div>
<span class="comment-copy">Your one-liners are not equivalent to the originals. When your code does <code>year_entry = tk.Entry()</code> you have a reference to a new <code>tk.Entry</code> object. The next line calls <code>.grid()</code> on that object. When your code does <code>year_entry = tk.Entry().grid(column=1, row=1)</code> it creates a new <code>tk.Entry</code> object, calls <code>.grid()</code> on it and <i>then throws away the reference to the <code>tk.Entry</code> object</i> and assigns the result of the <code>.grid()</code> call (which is <code>None</code>) to <code>year_entry</code>.</span>
<span class="comment-copy">@BoarGules Thank you for being explicit. Would there be a chance you know if there is a particular reason for this poor design of ditching references like that? Or better yet, do you happen to know how I can force it to keep reference? Otherwise, kindly submit it as an answer so that I can mark it.</span>
<span class="comment-copy">Note that this isn't a tkinter problem per se. In python, when you do <code>x().y()</code> no matter what <code>x()</code> and <code>y()</code> do, python will return the result of <code>y()</code>. In tkinter, <code>grid(...)</code> is defined to return <code>None</code>.</span>
<span class="comment-copy">In Python (and Python is not alone in this) an assignment of an expression that is a chain of attributes, as in <code>a = b.c.d</code> will assign the value of <code>d</code> to <code>a</code>. I can't concur with you that it is poor design. If I do <code>a = os.path.exists('myfile')</code> I expect <code>a</code> to receive a boolean value reflecting the existence of <code>myfile</code>, <i>not</i> a reference to the module <code>os.path</code>. If PEP 572 makes it into Python 3.8 you will soon be able to do what you want this way: <code>(year_entry := tk.Entry()).grid(column=1, row=1)</code> but I still think your original formulation is better than any one-liner.</span>
