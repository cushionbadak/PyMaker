<div class="post-text" itemprop="text">
<p>I'm using Django and Python 3.7 along with PostGres 9.5.  I have a column in my PostGres table of type text, which records URLs for articles.  I want to run a query that compares everything before the query string, e.g.</p>
<pre><code>SELECT * FROM article where regexp_replace(url, '\?.*$', '') = :url_wo_query_info
</code></pre>
<p>but I'm not sure how to pull this off in Django.  Normally if I want to straigh tup query on just a URL, I could write</p>
<pre><code>Article.objects.filter(url=url)
</code></pre>
<p>BUt I'm unsure how to do the above in Django's lingo because there is a more complicated function involved.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>Func</strong> with F expressions to use database functions on model fields. Your query would look like this in Django ORM:</p>
<pre><code>Article.objects.all().annotate(
    processed_url=Func(
        F('url'),
        Value('\?.*$'), Value(''),
        function='regexp_replace',
    )
).filter(processed_url=url_wo_query_info)
</code></pre>
</div>
<span class="comment-copy">Thanks for this.  Does the "Article.objects.all()" part of the statement actually run a query against the db pulling in all its records and then a second query is run based on the function?</span>
<span class="comment-copy">No, in Django, a query is executed only when you try to use it, i.e read its value or convert it to a list etc. Only the most recent version of the query, after taking all filter, annotate, exclude etc. statements into account, is executed</span>
