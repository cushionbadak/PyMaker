<div class="post-text" itemprop="text">
<p>I am writing a script that can encrypt and decrypt an image using the RSA algorithm. My public key is (7, 187) and the private key is (23,187) now the calculation for the encryption is correct like for an entry in the matrix of the image, 41 the encrypted value is 46. But when the decryption is happening it is not giving the appropriate result like for 46 it is giving 136 and for every entry of 46 in the encrypt matrix the result I am getting is 136 in the decrypt matrix. And I don't know why this is happening. When I am doing the same calculation in the python prompt(or shell) it is giving the correct answer. </p>
<p>In the script, I am first converting the RGB image into grayscale and then converting it to a 2d numpy array, then for each element, I am applying the RSA algo(the keys) and then saving it as an image. Then I am applying the decryption key in the encrypted matrix and then the problem is occurring. Heres the code:</p>
<pre><code>from PIL import Image
import numpy as np
from pylab import * 
#encryption

img1 = (Image.open('image.jpeg').convert('L')) 
img1.show()

img = array((Image.open('image.jpeg').convert('L')))
a,b = img.shape #saving the no of rows and col in a tuple
print('\n\nOriginal image: ')
print(img)
print((a,b))
tup = a,b

for i in range (0, tup[0]):
    for j in range (0, tup[1]):
        img[i][j]= (pow(img[i][j],7)%187)


print('\n\nEncrypted image: ')
print(img)
imgOut = Image.fromarray(img)
imgOut.show()
imgOut.save('img.bmp')

#decryption

img2 = (Image.open('img.bmp'))
img2.show()
img3 = array(Image.open('img.bmp'))
print('\n\nEncrypted image: ')
print(img3)
a1,b1 = img3.shape
print((a1,b1))
tup1 = a1,b1

for i1 in range (0, tup1[0]):
    for j1 in range (0, tup1[1]):
        img3[i1][j1]= ((pow(img3[i1][j1], 23))%187) 
print('\n\nDecrypted image: ')
print(img3)
imgOut1 = Image.fromarray(img3)
imgOut1.show()
print(type(img))  
</code></pre>
<p>The values of the matrices: </p>
<p>Original image: </p>
<p>[[41 42 45 ... 47 41 33]</p>
<p>[41 43 45 ... 44 38 30]</p>
<p>[41 42 46 ... 41 36 30]
 ...</p>
<p>[43 43 44 ... 56 56 55]</p>
<p>[45 44 45 ... 55 55 54]</p>
<p>[46 46 46 ... 53 54 54]]</p>
<p>Encrypted image: </p>
<p>[[ 46  15 122 ... 174  46  33]</p>
<p>[ 46  87 122 ...  22  47 123]</p>
<p>[ 46  15   7 ...  46   9 123]
 ...</p>
<p>[ 87  87  22 ...  78  78 132]</p>
<p>[122  22 122 ... 132 132 164]</p>
<p>[  7   7   7 ...  26 164 164]]</p>
<p>Decrypted image: </p>
<p>[[136  70  24 ... 178 136 164]</p>
<p>[136 111  24 ... 146 141  88]</p>
<p>[136  70  96 ... 136 100  88]
 ...</p>
<p>[111 111 146 ... 140 140   1]</p>
<p>[ 24 146  24 ...   1   1  81]</p>
<p>[ 96  96  96 ...  52  81  81]]</p>
<p>Any help will be greatly appreciated. Thank You.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you will get on better using the 3rd parameter to the <code>pow()</code> function which does the modulus internally for you.</p>
<p>Here is a little example without the complexity of loading images - just imagine it is a greyscale gradient from black to white.</p>
<pre><code># Make single row greyscale gradient from 0..255
img = [ x for x in range(256) ]

# Create encrypted version
enc = [ pow(x,7,187) for x in img ]

# Decrypt back to plaintext
dec = [ pow(x,23,187) for x in enc ]
</code></pre>
<p>It seems to decrypt back into the original values from 0..187, where it goes wrong - presumably because of overflow? Maybe someone cleverer than me will be able to explain that - please add comment for me if you know!</p>
</div>
<span class="comment-copy">It is weird that you are getting <code>46</code> as the encrypted value because your original image should have dtype <code>uint8</code> and <code>pow(np.uint8(41),7)%187</code> evaluates to <code>86</code>, not <code>46</code>.</span>
<span class="comment-copy">Then how to resolve the problem ?</span>
<span class="comment-copy">I cannot even reproduce the problem, let alone solve it. I get 86 instead of 46 in the encrypted image when I run your code. Are you sure you get 46?</span>
<span class="comment-copy">yes I'm pretty sure. btw this is written in python 3.7.</span>
<span class="comment-copy">Then I am at a loss. Can you provide a sample image?</span>
<span class="comment-copy">This will not work in this script as the <code>img[i][j]</code> is a <code>numpy.ndarray</code> and to use the 3rd parameter of the <code>pow()</code> i need to have all the parameter as <code>int</code></span>
<span class="comment-copy">For this to work i need to take each and every value of <code>img</code> into a <code>int</code> data type like <code>temp</code> then only i can use this.</span>
<span class="comment-copy">You can make a Numpy array into a list easily with <code>img.tolist()</code> However, my point is to use the 3rd parameter to <code>pow()</code> not to make you use a list.</span>
