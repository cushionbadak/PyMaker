<div class="post-text" itemprop="text">
<p>I wanted to make a for loop in python with a variable upper bound which is the length of list, the size of which is modified inside the loop. </p>
<p>like this :</p>
<pre><code>l = [1,2,3,4,5,6]
for i in range(len(l)):
    del l[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = [1,2,3,4,5,6]
for i in range(len(l)):
    del l[0]
</code></pre>
<p>Your code makes the list 1 element shorter each iteration.
When you reach element 4, your code attempts to delete the fourth element of a list that is only 3 elements long. This results in an out of bounds error.</p>
<p><strong>EDIT</strong>
To your question if your upper bound is constant: yes it is.</p>
<pre><code>from random import randint
def upper_bound():
    print("Generate Range")
    return randint(0,9)

for i in range(upper_bound()):
    print("Iteration")
    pass
</code></pre>
<p>That piece of code prints:</p>
<pre><code>Generate Range
Iteration
Iteration
...
Iteration
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1207406/how-to-remove-items-from-a-list-while-iterating">How to remove items from a list while iterating?</a></span>
<span class="comment-copy">@Dataholic: Any particular reason for not using a <code>while</code> loop? A <code>while</code> loop offers you the control you are looking for.</span>
<span class="comment-copy">yes it worked with a while loop, i just want to know if the upperbound of a for loop is updated in every iteration or not ?</span>
<span class="comment-copy">If you still want to do it with a for loop, you can use a variation of my answer given here <a href="https://stackoverflow.com/questions/54870055/how-to-reset-a-loop-that-iterates-over-a-set/55105308#55105308" title="how to reset a loop that iterates over a set">stackoverflow.com/questions/54870055/â€¦</a>. That answer gives a technique for re-setting the iterable. You can modify that technique to set a new limit for the iteration.</span>
<span class="comment-copy">The important things to understand in the case of a <code>for</code> loop are: <b>(a)</b> the evaluation of the expression happens only once. <b>(b)</b> The only chance for you to "intercept" or "intervene" is if <b>you</b> implement the iterator that is used by the <code>for</code> loop, at the start of each iteration. (My answer in that post was to illustrate how a custom iterator can be re-set or re-initialized to start iterating from the beginning again)</span>
<span class="comment-copy">is the the upper bound constant, or is it constantly updated ?</span>
<span class="comment-copy">i did update my answer. Next time try to tell us what you want to know, what you tried to achieve your result, what you expected to happen and what happend unexpectedly. Helps against downvotes.</span>
