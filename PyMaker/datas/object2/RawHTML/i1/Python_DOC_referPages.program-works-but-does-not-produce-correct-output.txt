<div class="post-text" itemprop="text">
<p>I made a program which finds prime number below n number.<br/>
Here is the code :-</p>
<pre><code>import time
n = 10000
start = time.time()

primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 
149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 
229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 
313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 
409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 
499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 
601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 
691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 
809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 
907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
if n &gt; 1000000:
    for j in range(1,n+1):
        for i in range(0,len(primes)):
            if j % primes[i] == 0:
                break
        else:
            primes[:25].append(j)
    print primes
else:
    for j in range(1,n+1):
        for i in range(0,len(primes[:25])):
            if j % primes[i] == 0:
                break
        else:
            primes[:25].append(j)
    print primes

end = time.time() - start
print end
</code></pre>
<p>I know that the code works as time taken to find first 1000, and 1 million prime numbers is vastly different.<br/>
But it prints only prime numbers up to 1000 i.e it does not print the appended list. Where am I wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Duplicating and changing your code to test it seems like a bad idea as the two versions will drift apart.  Instead, modify the initial conditions and run the same code:</p>
<pre><code>import time

start = time.time()

n = 10000000

primes = [ \
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, \
    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, \
    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, \
    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, \
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, \
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, \
    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, \
    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, \
    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, \
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, \
    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, \
]

# for testing:
n = 10000
primes = primes[:25]

for j in range(3, n + 1, 2):
    for prime in primes:
        if j % prime == 0:
            break  # skip composites and primes in list
    else:  # no break
        primes.append(j)

print primes

end = time.time() - start
print end
</code></pre>
<p>Even if this is not just for testing, you can turn this into a conditional:</p>
<pre><code>if n &lt;= 1000000:
     primes = primes[:25]
</code></pre>
<p>and still avoid the code duplication.</p>
<blockquote>
<p>I just wanted to find the prime numbers in the least time</p>
</blockquote>
<p>If that's the case, shouldn't you only check primes in your list up to the square root of <code>j</code> and no further?  Of course, you'll need to change your prime list management logic as well.</p>
</div>
<span class="comment-copy">I know it is technically cheating but I just wanted to find the prime numbers in the least time, hence this weird code.</span>
<span class="comment-copy">slicing a list returns a copy. you're appending values to <code>primes[:25]</code>, it will not modify <code>primes</code>.</span>
<span class="comment-copy">@ParitoshSingh Yes your method worked but then it prints prime numbers below 1000 twice. How to avoid it?</span>
<span class="comment-copy">dont add numbers below 1000 to the list since you had them there already. Sounds like an <code>if</code> condition to me. (Also, as an aside, theres probably better ways of finding primes than this. Its a topic that's extensively covered)</span>
<span class="comment-copy">The title of your question is an oxymoron. The fact that it took longer to produce the incorrect output indicates only that it took longer to execute.</span>
