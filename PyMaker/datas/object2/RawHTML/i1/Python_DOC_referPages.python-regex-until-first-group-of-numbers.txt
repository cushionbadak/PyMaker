<div class="post-text" itemprop="text">
<p>I have the following text:</p>
<blockquote>
<p>Coast Repair,* Norfolk, Virginia, is awarded a not-to-exceed $212,967,725 firm-fixed-price, indefinite-delivery/indefinite-quantity (IDIQ) multiple award contract (MAC) for ship repair, maintenance, and modernization of surface combatants (DDG and CG) class ships and amphibious (LSD, LPD and LHD) class ships homeported in Mayport, Florida, under Lot 1.  This award was made under rolling admissions of the current IDIQ-MAC Lot 1.  This contract includes options which, if exercised, would bring the cumulative value of this contract to $376,964,825.</p>
</blockquote>
<p>I am trying to capture the text to the left of the first comma, second comma, third comma, and the amount $212,967,725.</p>
<p>My regex so far is: <code>(.*)(?:, )(?:.*)(?:\$([0-9,]+)</code></p>
<p>However, this is capturing pretty much everything that matches that expression. Is there a way or flag that can stop the match after the last group of numbers captured and then a space occurs?</p>
<p>So my end goal is to get:</p>
<pre><code>('Coast Repair,* Norfolk, Virginia', '212,967,725')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of trying to capture a particular number of commas, let's try a regex to get "everything up until the last comma before the 0-9 string". That regex would be</p>
<pre><code>([^$]*),.*?\$([0-9,]+)
</code></pre>
<p>So basically, in steps,</p>
<ul>
<li><code>([^$]*)</code> Capture every non-<code>$</code> character. <code>[^$]</code> rather than <code>.</code> is important to get the thing to stop at the <em>first</em> dollar sign instead of the <em>last</em> one.</li>
<li><code>\$([0-9,]+)</code> Capture a number with commas, prefaced immediately by a dollar sign</li>
<li><code>,.*?</code> effectively matches the last comma prior to the dollar sign, and then lazily eats all the characters between the comma and the first dollar sign.</li>
</ul>
<p><a href="https://regex101.com/r/5MTL3Y/6" rel="nofollow noreferrer">Here's a regex101 link to show it works</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Take a 2-step approach:</p>
<ul>
<li>Find the text before the amount (up to the first <code>$</code> char - group #1)
and the amount itself (group #2).</li>
<li>Divide group #1 by commas.</li>
</ul>
<p>So the pattern to use in the first step is:</p>
<pre><code>pat1 = re.compile(r'^([^$]+)(\$[\d,]+)')
</code></pre>
<p>Then use the pattern:</p>
<pre><code>m = pat1.search(txt)
</code></pre>
<p>and save both capturing groups:</p>
<pre><code>g1 = m.group(1)
g2 = m.group(2)
</code></pre>
<p>Then find parts of text before each comma (step 2):</p>
<pre><code>g1.split(',')
</code></pre>
<p>getting:</p>
<pre><code>['Coast Repair', '* Norfolk', ' Virginia', ' is awarded a not-to-exceed ']
</code></pre>
<p>(the text before the first comma (<code>Coast Repair</code>), second comma (<code>* Norfolk</code>),
third comma (<code>Virginia</code>) and finally before the amount
(<code>is awarded a not-to-exceed</code>)).</p>
<p>Of course, the amount is in <code>g2</code> variable, so you can print it too.</p>
</div>
<span class="comment-copy">Try <code>([^,]*,[^,]*),.*?\$([0-9,]+)</code></span>
<span class="comment-copy">@WiktorStribiżew close but misses 'virginia'</span>
<span class="comment-copy">I added the other part in to make it work, ([^,]*,[^,]*,[^,]), but I'm not sure there will only be  3 commas. There may be a case that there is 4 commas before the dollar value. Is there a way to put a variable as to trying 3 or 4 times?</span>
<span class="comment-copy">Can we guarantee there will be no digits? Then use  <code>([^,]*(?:,[^,\d]*){2,3}),.*?\$([0-9,]+)</code> or <code>([^,]*(?:,[^,]*){2}(?:,[^,\d]*)?),.*?\$([0-9,]+)</code></span>
<span class="comment-copy">Check the other logics in the answer below. It may work out for you.</span>
<span class="comment-copy">would it be simple to get the numbers without commas ?</span>
<span class="comment-copy">Ideally you'd take the string <code>num</code> you got from matching, and then just get rid of the commas (<code>num.replace(',', '')</code>) and cast it to an integer if you want to</span>
<span class="comment-copy">I thought that would be easier as well, but wasn't sure if it made sense to do within regex. Thank you again for your help, I appreciate your time!</span>
