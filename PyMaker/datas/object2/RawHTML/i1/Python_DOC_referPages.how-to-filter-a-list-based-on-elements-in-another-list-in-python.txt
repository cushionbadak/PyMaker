<div class="post-text" itemprop="text">
<p>I have a list A of about 62,000 numbers, and another list B of about 370,000. I would like to filter B so that it contains only elements from A. I tried something like this:</p>
<pre><code>A=[0,3,5,73,88,43,2,1]
B=[0,5,10,42,43,56,83,88,892,1089,3165]
C=[item for item in A if item in set(B)] 
</code></pre>
<p>Which works, but is obviously very slow for such large lists because (I think?) the search continues through the entire B, even when the element has already been found in B. So the script is going through a list of 370,000 elements 62,000 times.</p>
<p>The elements in A and B are unique (B contains a list of unique values between 0 and 700,000 and A contains a unique subset of those) so once A[i] is found in B, the search can stop. The values are also in ascending order, if that means anything.</p>
<p>Is there some way to do this more quickly?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is creating a new <code>set(B)</code> for every item in A.  Instead, use the built-in <code>set.intersection</code>:</p>
<pre><code>C = set(A).intersection(B)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To be really sure what I've done is the fastest possible, I would have done that :</p>
<pre><code>A=[0,3,5,73,88,43,2,1]
B=[0,5,10,42,43,56,83,88,892,1089,3165]

B_filter = B.copy()
C = []
for item in A:
    if filter in B_filter:
        C.append(item)
        B_filter.pop(0) # B_filter is a list, and it's in ascending order so always the first
</code></pre>
<p>If you don't care about losing your <code>B</code> list, you can just use <code>B</code> instead of <code>B_filter</code> and not declare <code>B_filter</code>, so you don't have to copy a 370k large list.</p>
</div>
<span class="comment-copy">Nice! +1. What about <code>set(a)</code> &amp; <code>set(B)</code>? Just seems a bit cleaner.</span>
<span class="comment-copy">@ChristianDean That requires a third set to be created, <code>set(B)</code>.  In the above, only <code>set(A)</code> and <code>C</code> are created as new objects, <code>B</code> is just iterated over.</span>
<span class="comment-copy">Ah, I missed that. Good point.</span>
<span class="comment-copy">This is extremely fast (and bonus points for simplicity). Exactly what I was looking for. Thank you.</span>
