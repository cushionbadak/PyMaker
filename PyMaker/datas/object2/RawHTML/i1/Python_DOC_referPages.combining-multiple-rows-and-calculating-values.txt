<div class="post-text" itemprop="text">
<p>Consider the following MVCE:</p>
<pre><code>import pandas as pd

data_in = [
  { 'company': 'A', 'time': 1552521600, 'interval': 'hour', 'violations': 0, 'handled': 400 },
  { 'company': 'A', 'time': 1552525200, 'interval': 'hour', 'violations': 2, 'handled': 300 },
  { 'company': 'A', 'time': 1552528800, 'interval': 'hour', 'violations': 0, 'handled': 20 },
  { 'company': 'A', 'time': 1552521600, 'interval': 'day', 'violations': 3, 'handled': 1800 },

  { 'company': 'B', 'time': 1552521600, 'interval': 'hour', 'violations': 1, 'handled': 200 },
  { 'company': 'B', 'time': 1552525200, 'interval': 'hour', 'violations': 1, 'handled': 200 },
  { 'company': 'B', 'time': 1552528800, 'interval': 'hour', 'violations': 2, 'handled': 400 },
  { 'company': 'B', 'time': 1552521600, 'interval': 'day', 'violations': 4, 'handled': 1400 },
]

df = pd.DataFrame(data_in).set_index(['company', 'time'])
df.sort_index(axis=0, inplace=True)
</code></pre>
<p>What I'm wanting to accomplish here is, for each company, to compare the number of violations in a given hour to the daily total violations, as well as the number of violations relative to the number of units handled.</p>
<p>One step that appears to get me closer is using a pivot table:</p>
<pre><code>pv = df.pivot_table(index=['company', 'time'], columns='interval')
print(df)
</code></pre>
<p>results in</p>
<pre><code>                   handled        violations
interval               day   hour        day hour
company time
A       1552521600  1800.0  400.0        3.0  0.0
        1552525200     NaN  300.0        NaN  2.0
        1552528800     NaN   20.0        NaN  0.0
B       1552521600  1400.0  200.0        4.0  1.0
        1552525200     NaN  200.0        NaN  1.0
        1552528800     NaN  400.0        NaN  2.0
</code></pre>
<p>I believe what I'm trying to get is</p>
<pre><code>                   handled        violations
interval               day   hour        day hour
company time
A       1552521600  1800.0  400.0        3.0  0.0
        1552525200  1800.0  300.0        3.0  2.0
        1552528800  1800.0   20.0        3.0  0.0
B       1552521600  1400.0  200.0        4.0  1.0
        1552525200  1400.0  200.0        4.0  1.0
        1552528800  1400.0  400.0        4.0  2.0
</code></pre>
<p>The calculations I'm trying to do will be something along the line:</p>
<pre><code>pv['hv_ratio'] = pv['handled.hour'] / pv['violations.hour']
pv['v_ratio'] = pv['violations.hour'] / pv['violations.day']
</code></pre>
<p>I have tried a few things over the past few hours, but come up dry on how to approach this problem.</p>
<p>How can I accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you just need to use <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ffill.html" rel="nofollow noreferrer">ffill</a> and then calculate your <strong><em>hv_ratio</em></strong> and <strong><em>v_ratio</em></strong> columns as below:</p>
<pre><code>pv.ffill(inplace=True)
pv['hv_ratio'] = pv['handled']['hour'] / pv['violations']['hour']
pv['v_ratio'] = pv['violations']['hour'] / pv['violations']['day']
</code></pre>
</div>
<span class="comment-copy">Apparently, your expected output is just what you have + <code>.ffil()</code></span>
<span class="comment-copy"><code>pv = df.pivot_table(index=['company', 'time'], columns='interval').ffill()</code></span>
<span class="comment-copy">Problem with <code>ffill()</code> is that it does not seem to respect the boundary of the index. While it worked for this test case, it's giving weird results for another. Give me a few to update the question.</span>
<span class="comment-copy">Actually, logically I should have just applied <code>ffill</code> in a groupby for that purpose - my bad.</span>
