<div class="post-text" itemprop="text">
<p>I wrote a function to create the <code>VALUES</code> part of a SQL query:</p>
<pre><code>def query_values(data_iterator):
    return ',\n'.join('\n({})\n'.format(',\n'.join('"{}"'.format(value) for value in data_row)
                                     ) for data_row in data_iterator
                      ),
</code></pre>
<p>When I call this function and <code>print</code> the result, I get is:</p>
<pre><code>query_values:
('\n("801",\n"printer",\n"barcode printer")\n,\n\n("844",\n"laptop",\n"windows")\n,\n\n("997",\n"printer",\n"barcode printer")\n',)
</code></pre>
<p>All in one line. Instead of breaking the line, the <code>\n</code> are displayed.</p>
<p>Originally I had one <code>\n</code>, but then I inserted multiple, just to see if they would get displayed.</p>
<p>The second problem was that there are parentheses around the entire thing, which I didn't want.</p>
<p>I was puzzling over the two issues, and I figured the solution for the second one:</p>
<p>I had a comma at the end of the function. The comma caused the function to return a tuple, instead of a single string.</p>
<p>I removed the comma:</p>
<pre><code>def query_values(data_iterator):
    return ',\n'.join('\n({})\n'.format(',\n'.join('"{}"'.format(value) for value in data_row)
                                     ) for data_row in data_iterator
                      )
</code></pre>
<p>and that fixed <strong>both</strong> problems. The output was now:</p>
<pre><code>query_values:

("801",
"printer",
"barcode printer")
,

("844",
"laptop",
"windows")
,

("997",
"printer",
"barcode printer")
</code></pre>
<p>I put the comma back, and the <code>\n</code> were displayed. I removed the comma, and I have multiple lines again.</p>
<p>I have removed extraneous <code>\n</code>, so now I get what I wanted:</p>
<pre><code>query_values:

("801","printer","barcode printer"),
("844","laptop","windows"),
("997","printer","barcode printer")
</code></pre>
<p>So, my code works correctly, but I'm totally confused about the <code>\n</code> characters displayed in the old version of the code. Why was that happening?</p>
<p>UPDATE:
A couple answers to this question focused on why I was getting a tuple. That's not my question. Why are <code>/n</code> displayed?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that this is the behavior of tuples. When a tuple is printed, print calls <code>__repr()__</code> on each element. The same is also true for lists.</p>
<p>I tried this:</p>
<pre><code>tup = "xxx\nxx",
lst =["xxx\nxx"]
for t in tup,lst:
    print('t      :', t)
    for s in t:
        print('element:',s)
        print('   repr:',s.__repr__())
    print('---')
</code></pre>
<p>and the output is:</p>
<pre><code>t      : ('xxx\nxx',)
element: xxx
xx
   repr: 'xxx\nxx'
---
t      : ['xxx\nxx']
element: xxx
xx
   repr: 'xxx\nxx'
---
</code></pre>
<p>So, the same behavior for both tuples and lists.</p>
<p>When we have a string, calling <code>__repr__()</code> doesn't expand <code>\n</code> characters, and puts quotes around it:</p>
<pre><code>s = "xxx\nxx"
print('s           :', s)
print('s.__repr__():', s.__repr__())
</code></pre>
<p>outputs:</p>
<pre><code>s           : xxx
xx
s.__repr__(): 'xxx\nxx'
</code></pre>
<p>This tuple behavior was mentioned in comments by <a href="https://stackoverflow.com/users/2018369/running-t">running.t</a>, <a href="https://stackoverflow.com/users/189205/interjay">interjay</a> and <a href="https://stackoverflow.com/users/104349/daniel-roseman">Daniel Roseman</a>, but not in answers, that's why I'm posting this answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Writing <code>return something,</code> is the same as <code>return (something,)</code>: It returns a tuple containing one element. When you <code>print</code> this, it will show the outer parentheses for the tuple, and the string inside will be printed as its source code representation, i.e. with escape codes and inside quotes.</p>
<p>However, <code>return something</code> simply returns that value, which can then be printed normally.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that's the behavior for tuples in Python.
You can test this with a simpler case like so:</p>
<pre><code>&gt;&gt;&gt; print ("xxx\n\nx",)
('xxx\n\nx',)
</code></pre>
<p>Seems like Python helps you with debugging and escapes all the command sequences in strings when printing, so that strings appear the same way they were defined. </p>
<p>It did confuse you though, funny case. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>A tuple can be denoted with or without parenthesis, its the comma decides the type.</p>
<pre><code>&gt;&gt;&gt; t = 1, 'a', 'abc'
&gt;&gt;&gt; type(t)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; t
(1, 'a', 'abc')
&gt;&gt;&gt; 
</code></pre>
<p>In the above case, you added a trailing comma after the string and python interpreted it as a tuple.</p>
<p>Check this <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">link</a>.</p>
<pre><code>&gt;&gt;&gt; t= 'a',
&gt;&gt;&gt; type(t)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; t
('a',)
&gt;&gt;&gt; t = 'a'
&gt;&gt;&gt; type(t)
&lt;type 'str'&gt;
&gt;&gt;&gt; t
'a'
</code></pre>
</div>
<span class="comment-copy">More precisely, <code>tuple</code>'s <code>__repr__</code> (<a href="https://github.com/python/cpython/blob/fc96e5474a7bda1c5dec66420e4467fc9f7ca968/Objects/object.c#L552" rel="nofollow noreferrer">which is used if <code>__str__</code> is not defined</a>) <a href="https://github.com/python/cpython/blob/fc96e5474a7bda1c5dec66420e4467fc9f7ca968/Objects/tupleobject.c#L298" rel="nofollow noreferrer">calls <code>__repr__</code> on its elements</a>.</span>
<span class="comment-copy">Are you saying tuples don't have <code>__str__</code> defined?  For a tuple <code>t</code>, I tried <code>t.__str__()</code>, and I get the same as <code>t.__repr__()</code>. I don't know how to check whether <code>__str__()</code> is undefined, or defined to be the same as <code>__repr__</code></span>
<span class="comment-copy"><a href="https://github.com/python/cpython/blob/fc96e5474a7bda1c5dec66420e4467fc9f7ca968/Objects/tupleobject.c#L842" rel="nofollow noreferrer">It is marked as undefined in the C code.</a> I don't think the difference is externally visible, however.</span>
<span class="comment-copy">@SolomonUcko There's no visible difference <i>for C types</i>, because you can't actually look up the true attributes in the type's <code>struct</code>. For Python types there is a visible difference.</span>
<span class="comment-copy">@wizzwizz4 Yep. At least in CPython, magic methods on C types show up as <code>slot wrapper</code>s.</span>
<span class="comment-copy">I know why I was getting a tuple. My question is <b>why were the <code>\n</code> displayed</b>.</span>
<span class="comment-copy">@GrannyAching: and you have an answer to your question here. <b>\n is displayed because you print tuple of string instead of single string</b> and in case of printing tuples this is the default behaviour.</span>
<span class="comment-copy">@GrannyAching Printing a tuple calls <code>repr</code> on the elements inside. <code>repr</code> gives a representation of the object which is usually similar to how it's displayed in the source code, so for strings will contain quotes and escape codes.</span>
<span class="comment-copy">I know why I was getting a tuple. My question is <b>why were the <code>\n</code> displayed</b>.</span>
<span class="comment-copy">Because printing a tuple calls <code>repr</code> on its elements.</span>
