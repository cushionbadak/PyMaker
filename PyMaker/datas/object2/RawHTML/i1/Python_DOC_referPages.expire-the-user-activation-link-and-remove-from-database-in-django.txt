<div class="post-text" itemprop="text">
<p>I have an user signup, where the user's account is activated after link with a token send to their email address is clicked. I want to expire the link and delete their data from the database if the specific link is not clicked within 24 hours. </p>
<p>I have read it in one place, that the link is expired after 48 hours, is that correct? </p>
<p><strong>Here is my question</strong> - </p>
<p>How can I automatically remove those users who do not click on the activation link with in 24 hours? </p>
<p>(So far I can do that by going to admin panel and by checking email is confirmed or not)</p>
<p>Here is my activate function, </p>
<pre><code>def activate(request, uidb64, token):
    try:
       uid = force_text(urlsafe_base64_decode(uidb64))
       user = User.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, ObjectDoesNotExist):
       user = None

    if user is not None and account_activation_token.check_token(user, token):
       user.is_active = True
       user.email_confirmed = True
       user.save()
       login(request, user)
       return redirect('home')
    else:
       return render(request, 'user/account_activation_invalid.html')
</code></pre>
<p>This is my tokens.py to create token, </p>
<pre><code>from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.utils import six

class AccountActivationTokenGenerator(PasswordResetTokenGenerator):
   def _make_hash_value(self, user, timestamp):
       return (
           six.text_type(user.pk) + 
           six.text_type(timestamp) + 
           six.text_type(user.email_confirmed)
           )

 account_activation_token = AccountActivationTokenGenerator()
</code></pre>
<p>What should I change to achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The default expiration time of the token is 3 days (72 hours). </p>
<p>You don't need to save the token in database. The token already contains the timestamp of creation time. So all you need to do is override the <code>check_token</code> method in your custom class and check if the timestamp is 24 hours old or not.</p>
<p>Most of the code can be copied verbatim from the the original method. See the <a href="https://github.com/django/django/blob/master/django/contrib/auth/tokens.py#L23-L52" rel="nofollow noreferrer">source code on github</a>.</p>
<p>All you have to do is change <a href="https://github.com/django/django/blob/master/django/contrib/auth/tokens.py#L41" rel="nofollow noreferrer">line 41</a></p>
<p>Sample code:</p>
<pre><code>class AccountActivationTokenGenerator(...):
    ...
    def check_token(self, user, token):

        ...
        if (self._num_days(self._today()) - ts) &gt; 1: # 1 day = 24 hours
            return False

        ...
</code></pre>
<p><strong>UPDATE:</strong></p>
<p>To delete unverified users after 24 hours, you can create a cron job which runs every 24 hours and checks your database for unverified users and deletes them if they are more than 24 hours old.</p>
<p>Here's an answer which gives an outline of the process: <a href="https://stackoverflow.com/a/573659/1925257">Django - Set Up A Scheduled Job?</a>. For creating a cron job, see your operating system's documentation. </p>
<p>Another method of adding cron jobs is by using django apps such as <a href="https://github.com/Tivix/django-cron" rel="nofollow noreferrer">django-cron</a> and <a href="https://github.com/kraiz/django-crontab" rel="nofollow noreferrer">django-crontab</a>. They are specifically created for making this task easier, but the general principle stays the same as described in the linked answer.</p>
</div>
<span class="comment-copy">One general approach would be to create a <code>crontab</code> that executes a django <code>command</code> to remove any activation link that fits the criteria of <code>filter(timestamp &lt; now - 1 day)</code>.</span>
<span class="comment-copy">That will expire in one day. But that does not remove user automatically. Anything on that regards?</span>
<span class="comment-copy">@BidhanMajhi Ah! The title of your question title got me confused. I've updated the answer with more info.</span>
