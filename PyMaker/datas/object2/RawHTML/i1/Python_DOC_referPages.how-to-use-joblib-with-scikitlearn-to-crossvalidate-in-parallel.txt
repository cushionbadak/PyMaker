<div class="post-text" itemprop="text">
<p>I am trying to execute cross validation folds in parallel with the joblib library in python.</p>
<p>I have the following sample code:</p>
<pre><code>from sklearn.model_selection import KFold
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix, f1_score
from sklearn import svm
from sklearn import datasets
from sklearn.model_selection import StratifiedKFold
from sklearn.svm import LinearSVC

iris = datasets.load_iris()
X, Y = iris.data, iris.target

skf = StratifiedKFold(n_splits=5)

#clf = svm.LinearSVC()
clf = svm.SVC(kernel='rbf')
#clf = svm.SVC(kernel='linear')

f1_list = []

for train_index, test_index in skf.split(X, Y):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = Y[train_index], Y[test_index]
    clf.fit(X_train, y_train)
    Y_predict = clf.predict(X_test)
    f1 = f1_score(y_test, Y_predict, average='weighted')
    print(f1)
    conf_mat = confusion_matrix(y_test, Y_predict)
    print(conf_mat)
    f1_list.append(f1)
print(f1_list)
</code></pre>
<p>I would like to execute the for loop in parallel to obtain accuracy scores in parallel for each of the folds.</p>
<p>I believe the joblib library has to be used in the following way:</p>
<pre><code>from math import sqrt
from joblib import Parallel, delayed
def producer():
     for i in range(6):
        print('Produced %s' % i)
        yield i
out = Parallel(n_jobs=2, verbose=100, pre_dispatch='1.5*n_jobs')(
                delayed(sqrt)(i) for i in producer())
</code></pre>
<p>any suggestions on how to accomplish the parallel task integration?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>Parallel</code> constructor you use the <code>delayed</code> argument to designate the function you want to run in parallel. <code>delayed</code> returns a new function that wraps your function. You can then call the newly wrapped function with arguments that'll be passed to your original function.</p>
<p>In your example, the <code>sqrt</code> function is being wrapped by <code>delayed</code> and is then being sent <code>i</code> from a <code>range(6)</code> in parallel.</p>
<p>What we need to do is pass <code>delayed</code> a function that can train on a chunk of data and then pass that newly wrapped function the indices for the kfold split. Here's an example of doing that:</p>
<pre><code>from sklearn.model_selection import KFold
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix, f1_score
from sklearn import svm
from sklearn import datasets
from sklearn.model_selection import StratifiedKFold
from sklearn.svm import LinearSVC
from joblib import Parallel, delayed

iris = datasets.load_iris()
X, Y = iris.data, iris.target

skf = StratifiedKFold(n_splits=5)
clf = svm.SVC(kernel='rbf')

def train(train_index, test_index):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = Y[train_index], Y[test_index]

    clf.fit(X_train, y_train)
    Y_predict = clf.predict(X_test)

    f1 = f1_score(y_test, Y_predict, average='weighted')
    conf_mat = confusion_matrix(y_test, Y_predict)

    return dict(f1=f1, conf_mat=conf_mat)


out = Parallel(n_jobs=2, verbose=100, pre_dispatch='1.5*n_jobs')(
    delayed(train)(train_index, test_index) for train_index, test_index in skf.split(X, Y))

f1_scores = [d['f1'] for d in out]
conf_mats = [d['conf_mat'] for d in out]

print('f1_scores:', f1_scores)
print('confusion matrices:', conf_mats)
</code></pre>
<p>Out:</p>
<pre><code>f1_scores: [0.9665831244778613, 1.0, 0.9665831244778613, 0.9665831244778613, 1.0]
confusion matrices: [array([[10,  0,  0],
       [ 0, 10,  0],
       [ 0,  1,  9]], dtype=int64), array([[10,  0,  0],
       [ 0, 10,  0],
       [ 0,  0, 10]], dtype=int64), array([[10,  0,  0],
       [ 0,  9,  1],
       [ 0,  0, 10]], dtype=int64), array([[10,  0,  0],
       [ 0,  9,  1],
       [ 0,  0, 10]], dtype=int64), array([[10,  0,  0],
       [ 0, 10,  0],
       [ 0,  0, 10]], dtype=int64)]
</code></pre>
<p><code>out</code> contains the returned metrics from the <code>train</code> function, so we can just split out the f1 scores and confusion matrices separately if we need to.</p>
</div>
<span class="comment-copy">thanks a lot. Just wanted to ask what is the relationship between fold and parallel processes for examples if I have 5, 10, 15 folds how are they assigned to X number of processors (1, 2, 4, etc)</span>
<span class="comment-copy">The <code>n_jobs</code> argument will dictate how many processor cores will be used. A value of -1 will use all cores available. Each fold will be put into a task queue to be picked up by a processor. So if you have 4 cores and 10 folds then 4 folds will be mapped to 4 cores and the remaining folds will wait for the next available core.</span>
<span class="comment-copy">Great thanks for the answer. Exactly what I needed</span>
