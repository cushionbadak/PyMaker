<div class="post-text" itemprop="text">
<p>def main():</p>
<pre><code>class BMI:

    def __init__(self, firstName, lastName, age, height, weight):
        self.firstName = firstName
        self.lastName = lastName
        self.fullName = firstName + " " + lastName
        self.age = age
        self.height = (height * 0.025) ** 2
        self.weight = weight * 0.45

    def setFullName(self, firstName, lastName):
        self.firstName = firstName
        self.lastName = lastName
        self.fullName = firstName + " " + lastName

        print(self.fullName)

    def setAge(self, age):
        self.age = age

    def setHeight(self, height):
        self.height = (height * 0.025) ** 2

    def setWeight(self, weight):
        self.weight = weight * 0.45

    def getBMI(self):
        bmi = self.weight // self.height
        return bmi

    def getStatus(self):

        getBMI()

        if bmi &lt; 19:
            print("You have an unhealthy BMI, gain some weight!")
        elif bmi &gt; 19 and bmi &lt; 25:
            print("You have a healthy BMI")
        else:
            print("You have an unhealthy BMI, lose some weight!")


firstName = input("Enter your first name: ")

lastName = input("Enter your last name: ")

age = int(input("Enter your age: "))

height = int(input("Enter your height in inches: "))

weight = int(input("Enter your weight in lbs: "))

userInputBMI = BMI(firstName, lastName, age, height, weight)


print(userInputBMI.setFullName(firstName, lastName))

print("Your BMI is:", userInputBMI.getBMI())

print(userInputBMI.getStatus())
</code></pre>
<p>main()</p>
<p>My problem is printing the status of the user based on the inputs they provide. The problem is coming from the method being run within the "getStatus" method. </p>
<p>My thoughts are that from that method within the "getStatus" it gets the bmi that is measured within the if-elif-else statements. The computer says that "getBMI" is not defined. If someone could teach me the right way to use methods how I am trying that would be awesome!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to tell Python that, inside your <code>getStatus</code> method, you want to access your <code>getBMI</code> method from the same class, and not a function (or any other callable object) named <code>getBMI</code> that's defined outside of your class. You do this by referencing the method as <code>self.getBMI</code> inside your class, like this:</p>
<pre><code>def getStatus(self): 

    bmi = self.getBMI()
</code></pre>
<p>Notice that I also caught the return value of <code>getBMI</code>, because otherwise that value is lost. <code>bmi</code> is just a local variable inside the <code>getBMI</code> method which will be forgotten once it ends, unless you either:</p>
<ul>
<li>return that value and catch the return with another variable upon executing the method;</li>
<li>save it as an instance attribute, writing (at some point) <code>self.bmi = bmi</code> inside your <code>getBMI</code> method.</li>
</ul>
<p>I'd go with the first option, since it makes sense for a method named <code>getBMI</code> to return the bmi. It's also a bit easier to mess up and forget which attribute is which if you constantly write and rewrite the instance attributes - tho sometimes that's exactly why you would use objects and classes in the first place.</p>
</div>
<div class="post-text" itemprop="text">
<p>change the line:</p>
<pre><code>    getBMI()
</code></pre>
<p>to</p>
<pre><code>    bmi = self.getBMI()
</code></pre>
<p>I have years of experience in programming, but I am learning Python as a new language as you too. Correct me anybody, please, if I am wrong or you have something to add. Here are my suggestion of the right way to use methods and the language:</p>
<ol>
<li>Read about Python naming convention: function names and variables are lowercase, method and instance variables too.</li>
<li>No need to pre-calculate and have instance variable full_name: just calculate and return it when you need one.</li>
<li>Don’t convert height to some part of the square height formula and keep it under name  height. Just calculate BMI from height and weight when you need it and by BMI formula from inches and pounds.</li>
<li>Keep the calculation result in float since they use not 19, but 18.5 as threshold value.</li>
<li>No need to provide setAge, setHeight, setWeight in your code question, since you don’t need and don’t use it in the program yet. Actually, if you think: set_height, and set_weight (Python naming) you don’t need to provide at all. You create the person instance and it stays constant. Same probably with set_age, until you not creating some simulation game when your instances will age.</li>
<li>Print should be outside your class. You ask for value or string to be returned if you need something to display or print.</li>
<li>Last, but not least: think immediately about testing and write test function first. It is very boring to enter a first name, last name, age,  height, and weight ... again, and again … QA will reuse your test later for unit testing.</li>
</ol>
<p>Here is my suggestion in the form of code (I left one bug intentionally - I think it will be easy to catch. Sorry, if more than one - nobody is perfect):</p>
<pre><code>class BodyMassIndex:

    BMI_STATUS_LOSE = 0
    BMI_STATUS_HEALTHY = 1
    BMI_STATUS_GAIN = 2

    def __init__(self, first_name, last_name, age, height, weight):
        self._first_name = first_name
        self._last_name = last_name
        self._age = age
        self._height = height
        self._weight = weight

    def get_full_name(self):
        return self._first_name + " " + self._last_name

    def get_bmi(self):
        return (self._weight * 703) / self._height ** 2

    def get_status(self):
        bmi = self.get_bmi()
        if bmi &lt; 18.5:
            status = BodyMassIndex.BMI_STATUS_LOSE
        elif bmi &lt; 25.0:
            status = BodyMassIndex.BMI_STATUS_HEALTHY
        else:
            status = BodyMassIndex.BMI_STATUS_GAIN
        return status

    def get_report(self):
        a = self.get_full_name()
        b = "Your BMI is: {0:.1f}".format(self.get_bmi())
        status_name = ['n unhealthy BMI, lose some weight!',
                       ' healthy BMI',
                       'n unhealthy BMI, gain some weight!']
        c = 'You have a' + status_name[self.get_status()]
        return a + '\n' + b + '\n' + c


if __name__ == '__main__':

    def first_test():
        user_test_list = [
            ("Alex", "Fat",    21, 69, 170, 2),
            ("Josh", "Smart",  17, 69, 169, 1),
            ("Ann", "Full",    19, 69, 126, 1),
            ("Mary", "Skinny", 19, 69, 125, 0),
        ]
        for first, last, age, height, weight, expected in user_test_list:
            user = BodyMassIndex(first, last, age, height, weight)
            print(user.get_report())
            print()

    first_test()

    while True:
        first = input("Enter your first name: ")
        if not first:
            break
        last = input("Enter your last name: ")
        age = int(input("Enter your age: "))
        height = int(input("Enter your height in inches: "))
        weight = int(input("Enter your weight in lbs: "))
        user = BodyMassIndex(first, last, age, height, weight)
        print(user.get_report())
</code></pre>
</div>
<span class="comment-copy">You can write in Python '19 &lt; bmi &lt; 25' instead 'bmi &gt; 19 and bmi &lt; 25' Also, when you think about this expression and the number 19 then instead of healthy this person is recommended to lose some weight. Should be bmi &gt;= 19 and if you think about this again then the comparison with 19 is redundant here since in elif clause the value of bmi always &gt;= 19.</span>
