<div class="post-text" itemprop="text">
<p>I have the following sitemap that I am trying to parse:</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
  &lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;
    &lt;url&gt; 
      &lt;loc&gt;https://www.example.com/examplea&lt;/loc&gt; 
      &lt;priority&gt;0.5&lt;/priority&gt; 
      &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
      &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
   &lt;url&gt; 
     &lt;loc&gt;https://www.example.com/exampleb&lt;/loc&gt; 
     &lt;priority&gt;0.5&lt;/priority&gt; 
     &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
     &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
&lt;/urlset&gt;
</code></pre>
<p>Whats the fastest way to obtain the url links within the loc tags using Python?</p>
<p>I tried using ElementTree, but I think it didnt work because of namespaces.</p>
<p>I need to get "<a href="https://www.example.com/examplea" rel="nofollow noreferrer">https://www.example.com/examplea</a>" and "<a href="https://www.example.com/exampleab" rel="nofollow noreferrer">https://www.example.com/exampleab</a>"</p>
</div>
<div class="post-text" itemprop="text">
<p>You can consider to use regular expression.</p>
<p>For your example, your demand can be met by code as follow:</p>
<pre class="lang-py prettyprint-override"><code>import re

string = '''
&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
  &lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;
    &lt;url&gt; 
      &lt;loc&gt;https://www.example.com/examplea&lt;/loc&gt; 
      &lt;priority&gt;0.5&lt;/priority&gt; 
      &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
      &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
   &lt;url&gt; 
     &lt;loc&gt;https://www.example.com/exampleb&lt;/loc&gt; 
     &lt;priority&gt;0.5&lt;/priority&gt; 
     &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
     &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
&lt;/urlset&gt;
'''

pattern = '(?&lt;=&lt;loc&gt;)[a-zA-z]+://[^\s]*(?=&lt;/loc&gt;)'

re.findall(pattern,string)
</code></pre>
<p>The result is <code>['https://www.example.com/examplea', 'https://www.example.com/exampleb']</code></p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>import re

str = """
&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
  &lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;
    &lt;url&gt; 
      &lt;loc&gt;https://www.example.com/examplea&lt;/loc&gt; 
      &lt;priority&gt;0.5&lt;/priority&gt; 
      &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
      &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
   &lt;url&gt; 
     &lt;loc&gt;https://www.example.com/exampleb&lt;/loc&gt; 
     &lt;priority&gt;0.5&lt;/priority&gt; 
     &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
     &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
&lt;/urlset&gt;
"""  
url = re.findall("&lt;loc&gt;(.*?)&lt;/loc&gt;", str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers said, you can use regex. But if you are a bit uncomfortable in using regular expressions, you can also use xmltodict module in python which converts the xml into a dictionary, and you can easily obtain any kind of data you need from the xml.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using XML but bypassing namespace</p>
<pre><code>from StringIO import StringIO
import xml.etree.ElementTree as ET

xml = '''&lt;?xml version="1.0" encoding="UTF-8"?&gt; 
  &lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;
    &lt;url&gt; 
      &lt;loc&gt;https://www.example.com/examplea&lt;/loc&gt; 
      &lt;priority&gt;0.5&lt;/priority&gt; 
      &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
      &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
   &lt;url&gt; 
     &lt;loc&gt;https://www.example.com/exampleb&lt;/loc&gt; 
     &lt;priority&gt;0.5&lt;/priority&gt; 
     &lt;lastmod&gt;2019-03-14&lt;/lastmod&gt; 
     &lt;changefreq&gt;daily&lt;/changefreq&gt; 
   &lt;/url&gt; 
&lt;/urlset&gt;'''

it = ET.iterparse(StringIO(xml))
for _, el in it:
    if '}' in el.tag:
        el.tag = el.tag.split('}', 1)[1]  # strip all namespaces
    for at in el.attrib.keys(): # strip namespaces of attributes too
        if '}' in at:
            newat = at.split('}', 1)[1]
            el.attrib[newat] = el.attrib[at]
            del el.attrib[at]
root = it.root

urls = [u.text for u in root.findall('.//loc')]
print(urls)
</code></pre>
<p>Output</p>
<pre><code>['https://www.example.com/examplea', 'https://www.example.com/exampleb']
</code></pre>
</div>
<span class="comment-copy">If your xml file structure is stable, regex is good enough for you.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14853243/parsing-xml-with-namespace-in-python-via-elementtree">Parsing XML with namespace in Python via 'ElementTree'</a></span>
<span class="comment-copy">You should really have it depend on the <code>&lt;loc&gt;</code> and <code>&lt;/loc&gt;</code> tags. If other bits of information appear with URLs, that will be captured in your regex</span>
<span class="comment-copy">Thank you for your suggest. I changed my pattern.</span>
<span class="comment-copy">Nice. Thanks for the edit. Great solution.</span>
<span class="comment-copy">Excellent. If you can, rewrite the string as a multiline string by placing it between <code>'''</code> and <code>'''</code> so it is easier to see</span>
<span class="comment-copy">Like @Clarmy Lee did in his answer below</span>
