<div class="post-text" itemprop="text">
<p>Is there a LightGraph function in Julia which is equivalent to <strong><em>ancestors</em></strong> function in Networkx? </p>
</div>
<div class="post-text" itemprop="text">
<p>A possibly faster way:</p>
<pre><code>function ancestors(g::SimpleDiGraph{T}, src) where T &lt;: Integer
    reverse!(g)
    a = Vector{T}()
    for (v, d) in enumerate(gdistances(g, src))
        if d &lt; typemax(T)
            push!(a, v)
        end
    end
    reverse!(g)
    return a
end
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not natively, but it should be easy to approximate:</p>
<pre><code>function ancestors(g, src)
    reverse!(g)
    a = reduce(union, enumerate_paths(dijkstra_shortest_paths(g, src))
    reverse!(g)
    return a
end
</code></pre>
<p>This will need verification and it's a bit risky in the event the function exits before the second <code>reverse!</code> but it's much more efficient than the non-mutating <code>reverse()</code>.</p>
</div>
