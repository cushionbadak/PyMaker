<div class="post-text" itemprop="text">
<p>Excuse me, what the heck?</p>
<pre><code>&gt;&gt;&gt; import urllib.parse
&gt;&gt;&gt; base = 'http://example.com'
&gt;&gt;&gt; urllib.parse.urljoin(base, 'abc:123')
'http://example.com/abc:123'
&gt;&gt;&gt; urllib.parse.urljoin(base, '123:abc')
'123:abc'
&gt;&gt;&gt; urllib.parse.urljoin(base + '/', './123:abc')
'http://example.com/123:abc'
</code></pre>
<p><em>python3.7</em> documentation says: </p>
<blockquote>
<p>Changed in version 3.5: Behaviour updated to match the semantics defined in RFC 3986.</p>
</blockquote>
<p>Which part of that RFC enforces such madness, and whether it should be considered a bug?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Which part of that RFC enforces such madness?</h3>
<p>This behavior is <em>correct</em> and <em>consistent</em> with other implementations, as indicated by <a href="https://tools.ietf.org/html/rfc3986#section-4.2" rel="nofollow noreferrer">RFC3986</a>:</p>
<blockquote>
<p>A path segment that contains a colon character (e.g., "this:that") cannot be used as the first segment of a <em>relative-path reference</em>, as it would be mistaken for a scheme name.  Such a segment <em>must be preceded by a dot-segment (e.g., "./this:that")</em> to make a relative-path reference.</p>
</blockquote>
<p>It's been already discussed in another <a href="https://stackoverflow.com/a/1737589/6238076">post</a>:</p>
<blockquote>
<p>Colons are allowed in the URI path. But you need to be careful when writing relative URI paths with a colon since it is not allowed when used like this:</p>
<pre><code>&lt;a href="tag:sample"&gt;
</code></pre>
<p>In this case tag would be interpreted as the URIâ€™s scheme. Instead you need to write it like this:</p>
<pre><code>&lt;a href="./tag:sample"&gt;
</code></pre>
</blockquote>
<h3>Usage of <code>urljoin</code></h3>
<p>The function <code>urljoin</code> simply treats both arguments as URL (without any presumption). It requires that their schemes to be identical or the second one to represent a <em>relative URI path</em>. Otherwise, it only returns the second argument (although, IMHO, it should raise an error). You can better understand the logic by looking into the <a href="https://github.com/python/cpython/blob/9a3ffc0492d1310ead9ce8f5ee678c26b20a338d/Lib/urllib/parse.py#L493" rel="nofollow noreferrer">source of urljoin</a>.</p>
<pre><code>def urljoin(base, url, allow_fragments=True):
    """Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."""
    ...
    bscheme, bnetloc, bpath, bparams, bquery, bfragment = \
            urlparse(base, '', allow_fragments)
    scheme, netloc, path, params, query, fragment = \
            urlparse(url, bscheme, allow_fragments)

    if scheme != bscheme or scheme not in uses_relative:
        return _coerce_result(url)
</code></pre>
<p>The results of the parser routine <code>urlparse</code> are as follow:</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import urlparse
&gt;&gt;&gt; urlparse('123:abc')
ParseResult(scheme='123', netloc='', path='abc', params='', query='', fragment='')
&gt;&gt;&gt; urlparse('abc:123')
ParseResult(scheme='', netloc='', path='abc:123', params='', query='', fragment='')
&gt;&gt;&gt; urlparse('abc:a123')
ParseResult(scheme='abc', netloc='', path='a123', params='', query='', fragment='')
</code></pre>
</div>
<span class="comment-copy">That does indeed look like a bug to me. RFC 3986 states <i>"Scheme names consist of a sequence of characters beginning with a letter"</i>, which <code>123</code> clearly does not and thus isn't a valid scheme. So, as far as I can tell, <code>urllib.parse.urljoin(base, '123:abc')</code> should actually return <code>'http://example.com/123:abc'</code> and <code>urllib.parse.urljoin(base, 'abc:123')</code> should return <code>'abc:123'</code>. But then again, while that's a valid URI, it's not a valid URL...</span>
<span class="comment-copy">@gdlmx specifically, Python 3.7.2</span>
<span class="comment-copy">getting the same with 2.7.15 as well</span>
<span class="comment-copy">I have tested in <code>3.7.2</code> and got this behavior. But the last line in your post is wrong: <code>'http://example.com/path/123:abc'</code>.</span>
<span class="comment-copy">@gdlmx fixed the last line.  Indeed, I've played with it for a while and basically forgot to strip the example.</span>
<span class="comment-copy">Sooo... basically what you are saying is: it's rather a problem with <code>urlparse</code>, and rather an unfixable one because it deals with sneaky edge cases.</span>
<span class="comment-copy">No. I don't think it's a problem of either <code>urlparse</code> or <code>urljoin</code>. It's a problem of your usage of them. Please use <a href="http://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow noreferrer">urllib.parse.quote</a> to escape colon in your path!</span>
