<div class="post-text" itemprop="text">
<p>Just recently I noticed a new concept: <code>class function</code> in python3.</p>
<p>(<strong>NOTE: not ask class method, but class function like <code>fun</code> in next code.</strong>)</p>
<pre><code>class A:
    def fun():
        print("fun")

    @staticmethod
    def fun2():
        print("fun2")

A.fun()
A.fun2()

# updated
print(A.__dict__)
# {'__module__': '__main__', 'fun': &lt;function A.fun at 0x0000014C658F30D0&gt;, 'fun2': &lt;staticmethod object at 0x0000014C658E1C50&gt;, '__dict__': &lt;attribute '__dict__' of 'A' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;, '__doc__': None}    
</code></pre>
<p>If execute above code:</p>
<p><strong>python2 output:</strong> </p>
<blockquote>
<p>Traceback (most recent call last):   File "a.py", line 9, in <br/>
      A.fun() TypeError: unbound method fun() must be called with A instance as first argument (got nothing instead)</p>
</blockquote>
<p><strong>python3 output:</strong></p>
<blockquote>
<p>fun<br/>
  fun2</p>
</blockquote>
<p>And, in python3, it seems been called as class function, it's no longer a method.</p>
<p>So, my question is: why this changes? As we could already define some utility function in class using <code>@staticmethod</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p><s>This is because all functions in python 3 classes have static behaviour by default</s>. Python 3 drops the concept of <em>unbound</em> methods. All member methods of a class can be called using the class object itself, as you have done.</p>
<p>Therefore, in addition to your code, this code is permitted too:</p>
<pre><code>class A:
    def func(self):
        print('Hello')

A.func(123)
</code></pre>
<p>This was possibly done for convenience, saving you from having to write <code>@staticmethod</code> in some cases, and also to let you reuse instance methods with other types of objects, as you see in the above snippet.</p>
<p>The function is not shown as a staticmethod, because it isn't. A parameter-less static method <em>can</em> still be called on an instance of the class, as @Aran-Fey pointed out, and that is why we have <code>@staticmethod</code> in Python 3.</p>
<p>(Please check the edit history for the older, incorrect version of this answer)</p>
</div>
<span class="comment-copy">Of course, I can still use staticmethod, just I'm afraid I will miss some new feature just like the old question about the compare for "class method &amp; static method". Finally, we all know we can use class method to create factory methods which static method can't. So how will be this compare now?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/48103889/why-can-instance-methods-be-called-as-class-methods-in-python-3">Why can instance methods be called as class methods in Python 3?</a></span>
<span class="comment-copy">Seems reasonable, but see update, I print the dict of this class. If just for convenience, why <code>fun</code>'s type is not <code>staticmethod</code>? Could you share some link I can reference which can prove your idea?</span>
<span class="comment-copy">Edited :). Unfortunately, I cannot find any documentation to back this up.</span>
<span class="comment-copy">parameterless functions in python 3 classes are not <code>staticmethods</code> by default.. can you include a code example where you show what you mean?</span>
<span class="comment-copy"><i>"If no self parameter is specified, it effectively makes the function the same as a static method."</i> False. <code>A().fun()</code> will throw an exception, but <code>A().fun2()</code> will not. <i>"The decorator @staticmethod likely hasn't been removed for backwards compatibility reasons."</i> Wrong again. It hasn't been removed because it has a purpose.</span>
<span class="comment-copy">@Aran-Fey But what purpose does having <code>@staticmethod</code> serve in python3? Is it only to allow invocation through class instances?</span>
