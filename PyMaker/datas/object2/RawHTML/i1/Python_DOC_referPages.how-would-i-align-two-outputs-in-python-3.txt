<div class="post-text" itemprop="text">
<p>How do I align two different outputs to be side-by-side in Python 3?</p>
<p>input:</p>
<pre><code>def Pokemon_Output(user_pkmn):

print("ID#",pkmn[user_pkmn][0])
print("Name:",pkmn[user_pkmn][1])
print("Type 1:",pkmn[user_pkmn][2])`
print("Type 2:",pkmn[user_pkmn][3])
print("Total:",pkmn[user_pkmn][4])
print("HP:",pkmn[user_pkmn][5])
print("Attack:",pkmn[user_pkmn][6])
print("Defense:",pkmn[user_pkmn][7])
print("Sp. Atk:",pkmn[user_pkmn][8])
print("Sp. Def:",pkmn[user_pkmn][9])
print("Speed:",pkmn[user_pkmn][10])
print("Legendary:",pkmn[user_pkmn][12])

def Second_Pokemon_Output(second_user_pkmn):
print("ID#",pkmn[second_user_pkmn][0])
print("Name:",pkmn[second_user_pkmn][1])
print("Type 1:",pkmn[second_user_pkmn][2])
print("Type 2:",pkmn[second_user_pkmn][3])
print("Total:",pkmn[second_user_pkmn][4])
print("HP:",pkmn[second_user_pkmn][5])
print("Attack:",pkmn[second_user_pkmn][6])
print("Defense:",pkmn[second_user_pkmn][7])
print("Sp. Atk:",pkmn[second_user_pkmn][8])
print("Sp. Def:",pkmn[second_user_pkmn][9])
print("Speed:",pkmn[second_user_pkmn][10])
print("Legendary:",pkmn[second_user_pkmn][12])
</code></pre>
<p>current output: </p>
<pre><code>ID# 4
Name: Charmander
Type 1: Fire
Type 2:
Total: 309
HP: 39
Attack: 52
Defense: 43
Sp. Atk: 60
Sp. Def: 50
Speed: 65
Legendary: Not Legendary

ID# 1
Name: Bulbasaur
Type 1: Grass
Type 2: Poison
Total: 318
HP: 45
Attack: 49
Defense: 49
Sp. Atk: 65
Sp. Def: 65
Speed: 45
Legendary: Not Legendary
</code></pre>
<p>My idea was to align both outputs to side by side regardless of what the inputs were. Something like this: </p>
<pre><code>ID# 4                       ID# 1
Name: Charmander            Name: Bulbasaur
Type 1: Fire                Type 1: Grass
Type 2:                     Type 2: Poison
Total: 309                  Total: 318
HP: 39                      HP: 45
Attack: 52                  Attack: 49
Defense: 43                 Defense: 49
Sp. Atk: 60                 Sp. Atk: 65
Sp. Def: 50                 Sp. Def: 65
Speed: 65                   Speed: 45
Legendary: Not Legendary    Legendary: Not Legendary
</code></pre>
<p>After that I was planning on doing some kind of analysis comparing the stats between the two Pokemon, but really what I'm trying to do is just align everything. Thanks for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to print both in one function.</p>
<p>Something like this is what you need:</p>
<pre><code>def Pokemon_Output(first_pkmn, second_pkmn):
    column1 = "ID#" + pkmn[user_pkmn][0]
    column2 = "ID#" + pkmn[second_user_pkmn][0]
    print_line(column1, column2)
    column1 = "Name:" + pkmn[user_pkmn][1]
    column2 = "Name:" + pkmn[second_user_pkmn][1]
    print_line(column1, column2)
    .
    .
    .

def print_line(column1, column2):   
    print('{:&lt;25s}{:&lt;25s}'.format(column1, column2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend you to use the property names of your dataset as the index of a pandas dataframe <code>pkmn</code>, like:</p>
<pre><code>                    user1           user2
ID                      4               1
Name           Charmander       Bulbasaur                   
Type 1               Fire           Grass                   
Type 2                NaN          Poison                   
Total                 309             318                   
HP                     39              45                   
Attack                 52              49                   
Defense                43              49                   
Sp. Atk                60              65                   
Sp. Def                50              65                   
Speed                  65              45                   
Legendary   Not Legendary   Not Legendary
</code></pre>
<p>This done, your print function shrinks down to</p>
<pre><code>print(df.loc[:, users])
</code></pre>
<p>with e.g.</p>
<pre><code>users = ['user1', 'user2']
</code></pre>
</div>
<span class="comment-copy">Opinion corner: as soon as your output needs become more sophisticated than "print text on sequential rows", it's time to switch to a GUI. You'd be better off with a window with two text areas, than trying to convince a console to print multiple columns.</span>
<span class="comment-copy"><code>format</code> function offers all you need for this. Your question is probably a duplicate though. Searching for  "formatting output" should give a lot of hits on stackoverflow.</span>
<span class="comment-copy">@Kevin Neighbour opinion corner: I can imagine that one would still be ok with a console output even for some simple tables. format or f-strings used with space filled minimum length variables would do. I find the two separate functions with all those print statements more debatable. One with two dataframes as parameters would be the first step in the (imo) right direction</span>
<span class="comment-copy">@SpghttCd I had a ton of formatted console output as you describe... an example convoluted base format string was <code>"%-9s %-{}s %8.4f%% (%{}i/%{}i)"</code> which was passed to <code>.format</code> after calculating the proper lengths for the variable fields, then to <code>%</code> to populate with the data. Boom, automatically sized tables that are variable width and it takes ~15 LOC in a function that got reused a dozen times. Could I have writen a GUI for the tool? Sure, but given most of the output ended up in the bug tracker, which only supported monospaced text: it produced tables which can be directly copy pasted.</span>
