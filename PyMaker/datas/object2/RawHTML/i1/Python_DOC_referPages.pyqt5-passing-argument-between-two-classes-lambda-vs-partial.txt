<div class="post-text" itemprop="text">
<p>I am trying to pass an argument between two PyQt5 classes. I used three methods: </p>
<ol>
<li>Using lambda functions.</li>
<li>Wrapper function (similar to lambda function).</li>
<li><code>partial</code> from <code>functools</code> module.</li>
</ol>
<p>In the example below, I have two windows:</p>
<ul>
<li>MainWindow has QLineEdit <code>mw_line_edit</code> and a QPushButton <code>mw_open_new_dialog_button</code>.</li>
<li>Dialog: has a QLineEdit <code>line_edit</code> and aQPushButton <code>push_button</code>. </li>
</ul>
<p>When I click the button <code>push_button</code>, I want it to insert the content of <code>line_edit</code> to <code>mw_line_edit</code>.</p>
<p>Here is a minimal example:</p>
<pre><code>import sys
from functools import partial

from PyQt5 import QtWidgets, QtGui, QtCore


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.central_widget = QtWidgets.QWidget(self)
        self.setCentralWidget(self.central_widget)
        self.mw_open_new_dialog_button = QtWidgets.QPushButton('Open New dialog', self)
        self.mw_line_edit = QtWidgets.QLineEdit(self)
        self.hlayout = QtWidgets.QHBoxLayout(self)
        self.hlayout.addWidget(self.mw_open_new_dialog_button)
        self.hlayout.addWidget(self.mw_line_edit)
        self.central_widget.setLayout(self.hlayout)

        self.mw_open_new_dialog_button.clicked.connect(self.open_new_dialog)


    def open_new_dialog(self):
        self.dlg = Dialog()
        #self.dlg.clicked.connect(partial(self.write_something, self.dlg.line_edit.text())) # &lt;&lt;&lt;&lt;&lt;&lt;&lt; This does not work
        self.dlg.clicked.connect(lambda: self.write_something(self.dlg.line_edit.text())) # this works
        #self.dlg.clicked.connect(self.wrapper(self.dlg.line_edit.text()))# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;This does not work 
        self.dlg.exec()

    @QtCore.pyqtSlot()
    def write_something(self, text):
        self.mw_line_edit.setText(text)

    def wrapper(self, text):
        return lambda: self.write_something(text)



class Dialog(QtWidgets.QDialog):

    clicked = QtCore.pyqtSignal()
    def __init__(self, parent=None):
        super(QtWidgets.QDialog, self).__init__(parent)
        self.hlayout = QtWidgets.QHBoxLayout(self)
        self.line_edit = QtWidgets.QLineEdit(self)
        self.push_button = QtWidgets.QPushButton('Click me', self)
        self.hlayout.addWidget(self.line_edit)
        self.hlayout.addWidget(self.push_button)
        self.label = QtWidgets.QLabel('I am a Qlabel', self)
        self.hlayout.addWidget(self.label)
        self.setLayout(self.hlayout)
        self.push_button.clicked.connect(self.clicked)

    def write_something(self, text):
        print(text)



app = QtWidgets.QApplication(sys.argv)

main_window = MainWindow()
main_window.show()
sys.exit(app.exec())
</code></pre>
<p>As you can see in the commented lines, only the following method works:</p>
<p><code>self.dlg.clicked.connect(lambda: self.write_something(self.dlg.line_edit.text()))</code></p>
<p>Why the other two do not work, i.e:</p>
<p><code>self.dlg.clicked.connect(partial(self.write_something, self.dlg.line_edit.text())) # &lt;&lt;&lt;&lt;&lt;&lt;&lt; This does not work</code></p>
<p><code>self.dlg.clicked.connect(self.wrapper(self.dlg.line_edit.text()))# &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;This does not work</code></p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<h1>1) functools.partial()</h1>
<p><strong>What arguments are you passing to partial?</strong> You are passing the method <code>write_something</code> and the text of <code>self.dlg.line_edit</code> at the time the connection is made.</p>
<p><strong>And what is the value of that text?</strong> it is an empty string, this explains the failure.</p>
<p><strong>Is there any solution for this case?</strong> Yes, instead of passing the text, pass the QLineEdit, and in the method write_something get the text and set it in the other QLineEdit:</p>
<pre><code>def open_new_dialog(self):
    self.dlg = Dialog()
    self.dlg.clicked.connect(partial(self.write_something, self.dlg.line_edit))
    self.dlg.exec()

def write_something(self, le):
    self.mw_line_edit.setText(le.text())
</code></pre>
<h1>2) wrapper</h1>
<p>It is the same problem, you are passing the empty text that you have at the moment of the connection</p>
<p><strong>Is there any solution?</strong> Yes, the same solution as the previous one.</p>
<pre><code>def open_new_dialog(self):
    self.dlg = Dialog()
    self.dlg.clicked.connect(self.wrapper(self.dlg.line_edit))
    self.dlg.exec()

def write_something(self, text):
    self.mw_line_edit.setText(text)

def wrapper(self, line):
    return lambda: self.write_something(line.text())
</code></pre>
<hr/>
<p><strong>Will there be a clean solution?</strong> Yes, create a signal that transports the text when you click.</p>
<pre><code>from PyQt5 import QtWidgets, QtGui, QtCore

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        central_widget = QtWidgets.QWidget()
        self.setCentralWidget(central_widget)
        self.mw_open_new_dialog_button = QtWidgets.QPushButton('Open New dialog')
        self.mw_line_edit = QtWidgets.QLineEdit()
        hlayout = QtWidgets.QHBoxLayout(central_widget)
        hlayout.addWidget(self.mw_open_new_dialog_button)
        hlayout.addWidget(self.mw_line_edit)
        self.mw_open_new_dialog_button.clicked.connect(self.open_new_dialog)

    @QtCore.pyqtSlot()
    def open_new_dialog(self):
        self.dlg = Dialog()
        self.dlg.textSignal.connect(self.mw_line_edit.setText)
        self.dlg.exec()

class Dialog(QtWidgets.QDialog):
    textSignal = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(QtWidgets.QDialog, self).__init__(parent)
        hlayout = QtWidgets.QHBoxLayout(self)
        self.line_edit = QtWidgets.QLineEdit()
        self.push_button = QtWidgets.QPushButton('Click me')
        hlayout.addWidget(self.line_edit)
        hlayout.addWidget(self.push_button)
        self.label = QtWidgets.QLabel('I am a Qlabel')
        hlayout.addWidget(self.label)
        self.push_button.clicked.connect(self.sendText)

    @QtCore.pyqtSlot()
    def sendText(self):
        self.textSignal.emit(self.line_edit.text())

if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec())
</code></pre>
</div>
<span class="comment-copy">what is your question?</span>
<span class="comment-copy">@eyllanesc: I asked the question: Why partial and wrapper do not work</span>
<span class="comment-copy">@eyllanesc: If I am trying to pass extra arguments to a slot in the same class, <code>partial</code> and <code>wrapper</code> both work but in my case with two classes why they do not work?</span>
<span class="comment-copy">the <code>@QtCore.pyqtSlot()</code> decorator of <code>sendText</code> is necessary? I removed it and the program still work properly</span>
<span class="comment-copy">@IamNotaMathematician read <a href="https://www.riverbankcomputing.com/static/Docs/PyQt5/signals_slots.html#the-pyqtslot-decorator" rel="nofollow noreferrer">riverbankcomputing.com/static/Docs/PyQt5/â€¦</a></span>
