<div class="post-text" itemprop="text">
<p>When having multiple call of the same function on the same line. Is it possible for troubleshooting purpose, to use the traceback or the sys library to identify which one is currently executing ?</p>
<p><em>Edit : Please do not provide work around. I know all I need to know about how to work around this problem. What I'd like to know, is if there is a way to find a more precise information about the parsing/execution state, than just the line number of the calling instruction.</em></p>
<p>Let's take this example:</p>
<pre><code>#!/usr/bin/python3
# coding: UTF-8


def fn(var):
    import traceback
    print(repr(traceback.extract_stack()[-2]))
    return var+1

a = b = 4
print(fn(a)+fn(b))
</code></pre>
<p>Running this in idle will write : </p>
<pre><code> RESTART: /.../python/framesummary.py 
&lt;FrameSummary file /.../python/framesummary.py, line 11 in &lt;module&gt;&gt;
&lt;FrameSummary file /.../python/framesummary.py, line 11 in &lt;module&gt;&gt;
10
</code></pre>
<p>Is there any way to know inside the <code>fn</code> function if it is currently executing <code>fn(a)</code> or <code>fn(b)</code> ?</p>
<hr/>
<p><em>Edit2 :</em> </p>
<p>I have added a case which shows that the calling order cannot be used</p>
<pre><code>#!/usr/bin/python3
# coding: UTF-8

def fn(var):
    import traceback
    stack = traceback.extract_stack()
    print(repr(stack[-2]))
    print("code = '"+stack[-2][-1]+"'")

    import sys
    calling_frame = sys._getframe(1)
    print("lasti =", calling_frame.f_lasti)
    print()

    return var+1

a = b = 4
print("case = sum", fn(a)+fn(b), "\n")
for boole in False, True:
    print("case =", boole, fn(a) if boole else fn(b), "\n")
</code></pre>
<p>will print:</p>
<pre><code> RESTART: /.../python/framesummary cleaned.py 
&lt;FrameSummary file /.../python/framesummary cleaned.py, line 18 in &lt;module&gt;&gt;
code = 'print("case = sum", fn(a)+fn(b), "\n")'
lasti = 34

&lt;FrameSummary file /.../python/framesummary cleaned.py, line 18 in &lt;module&gt;&gt;
code = 'print("case = sum", fn(a)+fn(b), "\n")'
lasti = 43

case = sum 10 

&lt;FrameSummary file /.../python/framesummary cleaned.py, line 20 in &lt;module&gt;&gt;
code = 'print("case =", boole, fn(a) if boole else fn(b), "\n")'
lasti = 100

case = False 5 

&lt;FrameSummary file /.../python/framesummary cleaned.py, line 20 in &lt;module&gt;&gt;
code = 'print("case =", boole, fn(a) if boole else fn(b), "\n")'
lasti = 88

case = True 5 
</code></pre>
<p>what would be nice, would be to have an indication of the first character of the call, or a way to recompile the code in order to get the values of lasti corresponding with each call.</p>
<p>Obviously, analysing the result shows that values of lasti correlate with the position, but up to now, I have found no way to know this relationship before executing the program : </p>
<pre><code>lasti =  34 =&gt; (line, column) = (18, 33) (or pos=29 in unindented string⁽¹⁾)
lasti =  43 =&gt; (line, column) = (18, 39) (or pos=35 in unindented string⁽¹⁾)
lasti =  88 =&gt; (line, column) = (20, 40) (or pos=32 in unindented string⁽¹⁾)
lasti = 100 =&gt; (line, column) = (20, 60) (or pos=52 in unindented string⁽¹⁾)
</code></pre>
<p>(1) as given by stack[-2][-1]</p>
</div>
<div class="post-text" itemprop="text">
<p>You can send an ID which is unique and random as an extra parameter and add that to the logs.</p>
<p>The identifier will help you trace back to the origin.</p>
<pre><code>a = b = 4
id1 = some random no.
id2 = some random no.
print(fn(a, id1)+fn(b, id2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think your best bet would be to learn how to use <a href="https://docs.python.org/3.6/library/pdb.html" rel="nofollow noreferrer">pdb</a>. While you could alter the code to give you some kind of limited introspection into the running code. It will be easier and ultimately more valuable to get a running debugger to allow you to observer the state of the code while it's being evaluated.</p>
<p>try <a href="https://docs.python.org/3.6/library/pdb.html" rel="nofollow noreferrer">pdb</a></p>
<pre><code>def fn(var):
    import pdb; pdb.set_trace()
    return var+1

a = b = 4
print(fn(a)+fn(b)
</code></pre>
<p>this will open the python debugger and allow you to do things like use <code>w</code> which stands for where and in pdb prints a stack trace. Or <code>l</code> which show the source at the current line of execution, etc.</p>
<p>It'll look something like this</p>
<pre><code>owen@lettuce:~ python temp.py
&gt; /home/owen/temp.py(3)fn()
-&gt; return var+1
(Pdb) w
  /home/owen/temp.py(6)&lt;module&gt;()
-&gt; print(fn(a)+fn(b))
&gt; /home/owen/temp.py(3)fn()
-&gt; return var+1
(Pdb) l
  1     def fn(var):
  2         import pdb; pdb.set_trace()
  3  -&gt;     return var+1
  4
  5     a = b = 4
  6     print(fn(a)+fn(b))
[EOF]
(Pdb)

</code></pre>
<p>Good luck. Hope this helps.</p>
</div>
<span class="comment-copy">You could add an additional superficial argument that you pass all the way down (or a modified version of it). So you would call it like this: <code>fn(a, 'a')</code> where your fbn is  defined as <code>def fn(varval, varname):...</code> This could be useful for debugging, but why do you really need this? Inspecting a stack frame inside a simple function would make your program run much slower.</span>
<span class="comment-copy">How would you distinguish them at all? <code>a</code> and <code>b</code> are aliases to the exact same variable. Python <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">guarantees left-to-right evaluation order</a>, so <code>fn(a)</code> is always run first, and <code>f_lasti</code> of a frame object can tell you the bytecode index being executed at any given frame level, but I'm not sure how you want to distinguish these things visually.</span>
<span class="comment-copy">@leonid, I'd like to make a clean function to help student watch variables in a readable way, but without distracting them from the real task.</span>
<span class="comment-copy">You're using CPython. You just don't recognize it.</span>
<span class="comment-copy">@Camion: CPython is the reference Python interpreter (the one you get from <a href="https://www.python.org/downloads/" rel="nofollow noreferrer">python.org/downloads</a> , and the one installed by default on most Linux/BSD distros). IDLE ships with it, to provide a simple IDE, that's all. Unless you explicitly installed PyPy, IronPython or Jython, you're using CPython.</span>
<span class="comment-copy">I'd like to know if there is a way to do that only on basis of of the pythons inner structures.</span>
<span class="comment-copy">Hi @Owen. Do you believe I could use pdb to get the kind of information i'm looking for, from inside my code ?</span>
<span class="comment-copy">@Camion, I'm not really sure what kind of information you're trying to get? Could you elaborate? Also I'm not really sure what you mean by <code>inside my code</code></span>
<span class="comment-copy">I wan't to be able to pin-point from inside fn(), which call was responsible for the current execution, without having to change it's calling syntax (i.e. not adding a disambiguation parameter). Up to now, the only related value I can find, is lasti, but I haven't found (yet) a way to correlate lasti with a pair (line, column)</span>
<span class="comment-copy">I have added more details in the post</span>
<span class="comment-copy">While I'm not overly familiar with the internal structure of stack frames, using pdb and dir you can take a look at the objects and try to get some useful information out of them. For example:  dir(calling_frame) = [ ... default python builtinds ...,  'f_back',  'f_builtins',  'f_code',  'f_exc_traceback',  'f_exc_type',  'f_exc_value',  'f_globals',  'f_lasti',  'f_lineno',  'f_locals',  'f_restricted',  'f_trace']</span>
