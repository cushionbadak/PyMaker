<div class="post-text" itemprop="text">
<p>I'm trying to make a mapping from a tensor of shape <code>[I, B, num_topics, vocab_size_1]</code> to <code>[I, B, vocab_size_2]</code>, using a mapping tensor of shape <code>[num_topics, vocab_size_1]</code> where each entry points to the index in vocab_size_2 where the entry from vocab_size_1 should go.</p>
<p>Here's an example:</p>
<pre><code># Our mapping file of shape [num_topics=2, vocab_size_1=2]
mapping = [[0, 2], [1, 3]]  # ie. the [0, 1] entry should go into index 2 
mapping = np.asarray(mapping)


# Our source file of shape [I=1, B=1, num_topics=2, vocab_size_1=2]
source = np.arange(4).reshape((1, 1, 2, 2))


# Our target should have shape [I=1, B=1, vocab_size_2=4]
...
</code></pre>
<p>If I understood correctly, then I can use <code>tf.scatter_nd</code> with <code>tf.meshgrid</code> to generate the appropriate mapping:</p>
<pre><code># In this example the indices tensor should look like this:
# [[[[[ [0, 0, 0] vocab=0], [[0, 0, 2] vocab=1] topic=0], [ [ [0, 0, 1] vocab=0], [[0, 0, 3] vocab=1] topic=1] b=0] i=0]]

# Of shape [I=1, B=1, num_topics=2, vocab_size_1=2, 3]

target = tf.scatter_nd(source, indices, shape=[1, 1, 4])
</code></pre>
<p>I've tried to generate the mapping with tf.meshgrid but I'm having problems making the indices file. Does anybody have an idea how to solve this? I'm also very open to other possibilities to manage this mapping.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>So I found the solutions using meshgrid, stack and tf.scatter_nd. I'm posting the numpy version, though it is directly translatable to tensorflow by just replacing "np" with "tf". Note that <code>topic_vocab_size = vocab_size_1</code> and <code>full_vocab_size = vocab_size_2</code>:</p>
<pre><code>import numpy as np
import tensorflow as tf

I = 1
B = 1
NUM_TOPICS = 2
TOPIC_VOCAB_SIZE = 2
FULL_VOCAB_SIZE = 4

# mapping of shape [num_topics=2, topic_vocab_size=2]
mapping = np.arange(NUM_TOPICS * TOPIC_VOCAB_SIZE)
np.random.shuffle(mapping)
mapping = mapping.reshape((NUM_TOPICS, TOPIC_VOCAB_SIZE))

mapping[0, 0] = 0
mapping[1, 0] = 0

print("Mapping:")
print(mapping)

# Source of shape [I=2, B=1, num_topics=2, topic_vocab_size=2]
source = np.arange(I * B * NUM_TOPICS * TOPIC_VOCAB_SIZE).reshape((I, B, NUM_TOPICS, TOPIC_VOCAB_SIZE))

print("Source:")
print(source)
# Now we want to project the source into shape [I=1, B=1, full_vocab_size=4] using mapping
# For tf.scatter_nd, mapping has to be [I=1, B=1, num_topic=2, topic_vocab_size=2, [I=2, B=1, full_vocab=4]]
# So our aim is to have a tensor:
# [[[[[ [0, 0, 0] vocab=0], [[0, 0, 2] vocab=1] topic=0], [ [ [0, 0, 1] vocab=0], [[0, 0, 3] vocab=1] topic=1] b=0] i=0]


ii, bb, _, _ = np.meshgrid(np.arange(I), np.arange(B), np.arange(NUM_TOPICS), np.arange(TOPIC_VOCAB_SIZE), indexing='ij')
# shape: [I, B, num_topics, topic_vocab_size]

mapping = np.expand_dims(np.expand_dims(mapping, axis=0), axis=0)
mapping = np.tile(mapping, [I, B, 1, 1])  # Make mapping of shape [I, B, num_topics, topic_vocab_size]

print(mapping.shape)
print(ii.shape)
print(bb.shape)


idx = np.stack([ii, bb, mapping], axis=-1)

print(idx)

print(idx.shape)

target = tf.scatter_nd(idx, source, shape=[I, B, FULL_VOCAB_SIZE])  # Shape is [I, B, FULL_VOCAB_SIZE]

sess = tf.Session()
with sess.as_default():
    print(target.eval())
</code></pre>
</div>
<span class="comment-copy">I can't understand the mapping you defined. Why do your target shape  <code>vocab_size_2</code> is 4 instead of 2? Can you give an output example?</span>
<span class="comment-copy">So each entry in source (which is a tuple) needs to be mapped to a single number in <code>vocab_size_2</code>, e.g. [0, 0] -&gt; 1, [1, 0] -&gt; 2, ...</span>
