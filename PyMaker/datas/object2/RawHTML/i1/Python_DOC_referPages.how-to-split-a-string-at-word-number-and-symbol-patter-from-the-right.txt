<div class="post-text" itemprop="text">
<p>I am trying to split a string that may look like this :</p>
<pre><code>A Fool (SEVEN000) (and His Money are S00n) Parted 
</code></pre>
<p>Into :
 <code>A Fool (7000) (and His Money are</code> and <code>S00n) Parted</code> using Python</p>
<p>The <code>)</code> will always be present at the end of the string and will always be preceded by a word/number. 
I was thinking splitting it from the right using a <code>[word/number])</code> pattern would work.</p>
<p><strong>Edit :</strong></p>
<p>As requested here are a few more examples</p>
<pre><code>Right (Out of the) Gate 
</code></pre>
<p>Expected Output : <code>Right (Out of</code> <code>the) Gate</code></p>
<pre><code>Right (Out) (of the Gate at 12PM)
</code></pre>
<p>Expected Output :  <code>Right (Out of the Gate at</code> <code>12PM)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be splitting your string from the last space present in your parenthesis. You can use this regex,</p>
<pre><code> (?=[^()]*\))(?=\S*\))
</code></pre>
<p><strong><a href="https://regex101.com/r/DNmzNH/1" rel="nofollow noreferrer">Demo</a></strong></p>
<p>Check this Python code,</p>
<pre><code>import re

s = 'A Fool (SEVEN000) (and His Money are S00n) Parted'
arr = re.split(r' (?=[^()]*\))(?=\S*\))', s)
print(arr)
</code></pre>
<p>Prints like you wanted,</p>
<pre><code>['A Fool (SEVEN000) (and His Money are', 'S00n) Parted']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is one option using <code>re.split</code> with a positive lookahead.  The pattern I use is:</p>
<pre><code>\s+(?=\w+\)(?:\s|$))
</code></pre>
<p>This pattern says to split and consume any amount of whitespace, when what follows is one or more word characters which itself is followed by a closing parenthesis and whitespace or the end of the input.</p>
<pre><code>input = "A Fool (SEVEN000) (and His Money are S00n) Parted"
parts = re.split(r'\s+(?=\w+\)(?:\s|$))', input)
print(parts)

['A Fool (SEVEN000) (and His Money are', 'S00n) Parted']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the following regular expression, and substring at the index:</p>
<pre><code>\b[A-Za-z0-9]+\) [A-Za-z0-9]+$
</code></pre>
<p>(this assumes that after the closing bracket there is only a single word, you would need to give more information so I can update the answer if that's not true)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do it following way:</p>
<pre><code>import re
text = 'A Fool (SEVEN000) (and His Money are S00n) Parted'
parted = re.findall(r'(.+)\s+(\S+\)[^\)]*$)',text)[0]
print(parted)
</code></pre>
<p>Output is following 2-tuple:</p>
<pre><code>('A Fool (SEVEN000) (and His Money are', 'S00n) Parted')
</code></pre>
<p>To understand my regular expression it might be breaked into:</p>
<p>1st group: <code>.+</code></p>
<p>seperator: <code>\s+</code></p>
<p>2nd group: <code>\S+\)[^\)]*$</code></p>
<p>First group match at least <code>1</code> characters not being newline <code>\n</code>, seperator match at least <code>1</code> whitespace character (this mean not only space, but also carriage return <code>\r</code>, tab <code>\t</code> and so on), lastly but most importantly second group consist of at least one non-whitespace character followed by <code>)</code> followed by <code>0</code> or more not-<code>)</code> (i.e. any character which is not <code>)</code>) which spans to end of string as denoted by <code>$</code>.
If you want solely spaces instead whitespace characters then replace <code>\s</code> with <code></code> (space) and <code>\S</code> with <code>[^ ]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If the separator is only a whitespace, we can do it without regex. May be like this, using <code>rfind()</code>:</p>
<pre><code>def splitter(a_string):
    idx1 = a_string.rfind(')')
    idx2 = a_string.rfind(' ', 0, idx1)
    idx3 = a_string.rfind('(', 0, idx1)
    if (idx2 &gt; -1) and (idx3 &lt; idx2):
         return (a_string[:idx2], a_string[idx2:])
    else:
         return None

splitter('Right (Out) (of the Gate at 12PM)')

output: ('Right (Out) (of the Gate at', ' 12PM)')

splitter('Right (Out)')

output: None   
</code></pre>
</div>
<span class="comment-copy">I don't quite get by what pattern you want to match. Could you possibly elaborate and give some more examples?</span>
<span class="comment-copy">Do you want to split your string with the last space in your parenthesis? Do you have some other rationale too for splitting your string? Can you also add some more samples and expected output?</span>
<span class="comment-copy">Why do it this way? This really makes readability kind of difficult. Why not <code>re.split(r' (?![()]+)(?=[\S]*?\))', s)</code>?</span>
<span class="comment-copy">This seems like a good solution. However it wouldn't split if the word "Parted" didn't exist. I edited my question to add in a few more examples. Appreciate your answer either way.</span>
<span class="comment-copy">@HinEge I have updated my answer to cover your other examples.</span>
