<div class="post-text" itemprop="text">
<p>If I have a dynamically defined class such as this:</p>
<pre><code>&lt;Foo@BoxLayout&gt;:
    orientation: "vertical"

    ...some other child widgets...

    BoxLayout:
        id: target
        orientation: "horizontal"

        ...other children...
</code></pre>
<p>How do I create a class that inherits from this, with the only change being an additional widget added to the <code>BoxLayout</code> with <code>id: target</code>?</p>
<p>I attempted to change the dynamic classes into rules and define the classes in the python:</p>
<pre><code>class Foo(BoxLayout):
    pass

class EditedFoo(Foo):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.ids["target"].add_widget(&lt;the widget I want to add&gt;, index=0)
</code></pre>
<p>however ids was empty from the <code>__init__</code> function (and from the <code>on_parent</code> function).</p>
<p>Is there any way to do this without redefining the whole class?</p>
<p>Edit: </p>
<pre class="lang-py prettyprint-override"><code>from kivy.app import App
from kivy.lang.builder import Builder
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout

kv = """
BoxLayout:
    EditedFoo:

&lt;Foo&gt;:
    orientation: "vertical"

    BoxLayout:
        id: target
        orientation: "horizontal"
"""

class TestApp(App):
    def build(self):
        return Builder.load_string(kv)

class Foo(BoxLayout):
    pass

class EditedFoo(Foo):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.ids["target"].add_widget(Button(text="hello"), index=0)

TestApp().run()
</code></pre>
<p>Here is a complete verified example of it not working</p>
</div>
<div class="post-text" itemprop="text">
<p>The .kv code implements the class created in Python so it is understood that it will be added after the constructor finishes executing, and consequently the ids will be empty in the constructor, a trick is to use Clock that will call a function a moment after rendering the whole window since at that moment the ids will not be empty:</p>
<pre><code># ...
from kivy.clock import Clock
# ...

class EditedFoo(Foo):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        Clock.schedule_once(self.callback)

    def callback(self, *args):
        self.ids["target"].add_widget(Button(text="hello"), index=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The codes in <code>.kv</code> file get initialized after the Python codes are executed.</p>
<p>Therefore, your <code>EditedFoo(Foo)</code> will inherit the <code>Foo(BoxLayout)</code> from the Python codes first, then <code>Foo</code> in <code>.kv</code> file will be re-declared.</p>
<p>Best way is to put initial attributes of <code>Foo(BoxLayout)</code> in Python codes, then inherit <code>Foo</code> in <code>.kv</code> such as <code>&lt;EditedFoo@Foo&gt;</code></p>
<p>For example,</p>
<p>In <code>.py</code>:</p>
<pre><code>class Foo(BoxLayout):
    greeting = "hi"
</code></pre>
<p>In <code>.kv</code>:</p>
<pre><code>&lt;EditedFoo@Foo&gt;
    greeting: "Goodbye World"

Foo:
    id: root_foo
    Button:
        text: root_foo.greeting
    EditedFoo:
        id: foo1
        Label:
            text: foo1.greeting
    EditedFoo:
        id: foo2
        greeting: "Hello Another World"
        Button:
            text: foo2.greeting
</code></pre>
<p>In this way, you can use <code>EditedFoo</code> class in <code>.kv</code> inherited from <code>Foo</code>.</p>
<p><a href="https://i.stack.imgur.com/ThHnE.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ThHnE.png"/></a></p>
</div>
<span class="comment-copy">Usually I see / use <code>super</code> as <code>super(EditedFoo, self).__init__()</code>. Perhaps that's your problem?</span>
<span class="comment-copy">I have created a test with what you point out and I do not observe that problem, obviously my test can be very different from yours, generating that it works for me and not you, so I recommend you provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">@Erik In python3 both methods are equivalent for this case</span>
<span class="comment-copy">@eyllanesc Thanks for pointing out the problem not manifesting. I managed to get it to occur in the code snippet above by making the <code>EditedFoo</code> not be the root</span>
