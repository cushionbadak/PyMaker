<div class="post-text" itemprop="text">
<p>I have a pre-existing berkeley database written to and read from a program written in C++. I need to sidestep using this program and write to the database directly using python.</p>
<p>I can do this, but am having a heck of a time trying to encode my data properly such that it is in the proper form and can then be read by the original C++ program. In fact, I can't figure out how to decode the existing data when I know what the values are.</p>
<p>The keys of the key value pairs in the database should be timestamps in the form YYYYMMDDHHmmSS. The values should be five doubles and an int mashed together, by which I mean (from the source code of the C++ program), the following structure(?) DVALS</p>
<pre><code>typedef struct
{
  double d1;
  double d2;
  double d3;
  double d4;
  double d5;
  int i1;
} DVALS;
</code></pre>
<p>is written to the database as the value of the key value pair like so:</p>
<pre><code>DBT data;
memset(&amp;data, 0, sizeof(DBT));

DVALS dval;
memset(&amp;dval, 0, sizeof(DVALS));
data.data = &amp;dval;
data.size = sizeof(DVALS);

db-&gt;put(db, NULL, &amp;key, &amp;data, 0);
</code></pre>
<p>Luckily, I can know what the values are. So if I run from the command line</p>
<pre><code>db_dump myfile
</code></pre>
<p>the final record is:</p>
<pre><code>323031393033313431353533303000
ae47e17a140e4040ae47e17a140e4040ae47e17a140e4040ae47e17a140e40400000000000b6a4400000000000000000
</code></pre>
<p>Using python's bsddb3 module I can pull this record out also:</p>
<pre><code>from bsddb3 import db
myDB = db.DB()
myDB.open('myfile', None, db.DB_BTREE)
cur = myDB.cursor()
kvpair = cur.last()
</code></pre>
<p>With kvpair now holding the following information:</p>
<pre><code>(b'20190314155300\x00', b'\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\x00\x00\x00\x00\x00\xb6\xa4@\x00\x00\x00\x00\x00\x00\x00\x00')
</code></pre>
<p>The timestamp is easy to read and in this case the actual values are as follows:</p>
<pre><code>d1 = d2 = d3 = d4 = 32.11
d5 = 2651
i1 = 0
</code></pre>
<p>As the '\xaeG\xe1z\x14\x0e@@' sequence is repeated 4 times I think it corresponds to the value 32.11</p>
<p>So I think my question may just be about encoding/decoding, but perhaps there is more to it, hence the backstory.</p>
<pre><code>kvpair[1].decode('utf-8')
</code></pre>
<p>Using a variety of encodings just gives errors similar to this:</p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xae in position 0: invalid start byte
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The value data is binary so it may be unpacked using Python's <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module.</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; bs = b'\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\xaeG\xe1z\x14\x0e@@\x00\x00\x00\x00\x00\xb6\xa4@\x00\x00\x00\x00\x00\x00\x00\x00'
&gt;&gt;&gt; len(bs)
48
&gt;&gt;&gt; struct.unpack('&lt;5di4x', bs)
(32.11, 32.11, 32.11, 32.11, 2651.0, 0)
</code></pre>
<p><a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack</code></a> takes two arguments: a <a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow noreferrer">format specifier</a> that defines the data format and types and the data to be unpacked.  The format <code>'&lt;5di4x'</code> describes:</p>
<ul>
<li><code>&lt;</code>: little endian order</li>
<li><code>5d</code>: five doubles (8 bytes each)</li>
<li><code>i</code>: one signed int (4 bytes; <code>I</code> for unsigned)</li>
<li><code>4x</code>: four pad bytes</li>
</ul>
<p>Data can be packed in the same way, using <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer"><code>struct.pack</code></a>.</p>
<pre><code>&gt;&gt;&gt; nums = [32.11, 32.11, 32.11, 32.11, 2651, 0]
&gt;&gt;&gt; format_ = '5di4x'
&gt;&gt;&gt; packed = struct.pack(format_, *nums)
&gt;&gt;&gt; packed == bs
True
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">you should keep your questions precise and leave out back stories</span>
