<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/55223093/pandas-finding-the-exact-word-and-before-word-in-a-column-of-string-and-append-t">PANDAS Finding the exact word and before word in a column of string and append that new column in python (pandas) column</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p><strong>Dataframe looks like this</strong></p>
<pre><code>col_a
Python PY is a general purpose PY language

Programming PY language in Python PY 

Its easier to understand  PY

The syntax of the language is clean PY
</code></pre>
<p>This code I have tried to achive this functionality but not able to get the expected output. if any help appreciated.</p>
<p>Here is the below code I approach with regular expressions:</p>
<pre><code>df['col_a'].str.extract(r"([a-zA-Z'-]+\s+PY)\b")
</code></pre>
<p><strong>Desired output:</strong></p>
<pre><code>col_a                                       col_b_PY     
Python PY is a general purpose language         Python PY purpose PY
Programming PY language in Python PY            Python PY Programming PY     
Its easier to understand  PY                    understand PY 
The syntax of the language is clean PY          clean  PY
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple pattern would extract desired strings: <code>\w+\s+PY</code></p>
<p>Explanation: <code>\w+</code> matches one or more word characters, then <code>\s+</code> matches one or more white spaces followed by <code>PY</code>.</p>
<p><a href="https://regex101.com/r/fwYTSS/2" rel="nofollow noreferrer">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Using @Michal's regex:</p>
<pre><code>import re
def app(row):
    return ' '.join(re.findall(r'\w+\s+PY', row.col_a))

df['col_b_PY'] = df.apply(app, axis=1)
</code></pre>
<p>You need to concatenate all the matches for each row in the applied function. It's possible to do this using <code>extractall</code> too, but I find this simpler and more straightforward.</p>
</div>
<span class="comment-copy">@Balu Weird, on demo it's showing that it captures as needed. Just see the demo.</span>
<span class="comment-copy">@Balu, the problem is not the regex, but your code regarding capturing the second pattern.</span>
<span class="comment-copy">just use.. df['col_a'].apply(lambda x: ' '.join(re.findall('\w+\s+PY',x)))  @Balu</span>
<span class="comment-copy">The regex is correct, but you need to concatenate all the matches together</span>
<span class="comment-copy">@Balu You can optionally upvote answer if you find it helpful.</span>
