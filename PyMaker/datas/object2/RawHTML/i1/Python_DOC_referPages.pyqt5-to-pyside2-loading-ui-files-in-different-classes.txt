<div class="post-text" itemprop="text">
<p>I have a python application which runs under python3.6 and is using PyQt5 for loading Ui windows. These windows were created with Qt Designer 5.9.4. The Code below shows a working example with PyQt5.</p>
<p>Now i want to have exactly the same functionality but with PySide2. For now, I couldn't work out how to load an Ui File and use its objects (buttons, tables etc.) in a separate class. For example: by clicking a button in the first window/class, a second window apears which functions are defined in a separate class, see example. All examples that I found, just load an Ui-Window but don't show how to work with it. Can anyone help?</p>
<pre><code>#!/usr/bin/env python
# -*- coding:utf-8 -*-

from PyQt5.uic import loadUiType  
from PyQt5 import QtGui, QtCore

Ui_FirstWindow, QFirstWindow = loadUiType('first_window.ui')
Ui_SecondWindow, QSecondWindow = loadUiType('second_window.ui')


class First(Ui_FirstWindow, QFirstWindow):

    def __init__(self):  
        super(First, self).__init__()
        self.setupUi(self)

        self.button.clicked.connect(self.show_second_window)

    def show_second_window(self):

        self.Second = Second()
        self.Second.show()


class Second(Ui_SecondWindow, QSecondWindow):

    def __init__(self):  
        super(Second, self).__init__()
        self.setupUi(self)


if __name__ == '__main__':

    app = QtWidgets.QApplication(sys.argv)

    main = First()
    main.show()

    sys.exit(app.exec_())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>PySide does not offer these methods, but one solution is to modify the source code of the PyQt uic module by changing the imports from PyQt5 to PySide2, for legal terms do not modify the license, in addition to the code that will keep the PyQt licenses.</p>
<p>To do this, download the source code from the following <a href="https://www.riverbankcomputing.com/software/pyqt/download5" rel="nofollow noreferrer">link</a> and unzip it.</p>
<p>And execute the following script:</p>
<p><strong>convert_pyqt5_to_pyside2.py</strong></p>
<pre><code>import os
import fileinput
import argparse
import shutil

def modify_source_code(directory, text_to_search, replacement_text):
    for path, subdirs, files in os.walk(directory):
        for name in files:
            filename = os.path.join(path, name)
            with fileinput.FileInput(filename, inplace=True) as file:
                for line in file:
                    if line.startswith('#'):
                        # not change on comments
                        print(line, end='')
                    else:
                        print(line.replace(text_to_search, replacement_text), end='')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="Input directory")
    parser.add_argument("-o", "--output", help="Output directory")
    args = parser.parse_args()
    if args.input and args.output:
        input_dir = os.path.join(os.path.abspath(args.input), "pyuic", "uic")
        output_dir = os.path.abspath(args.output)
        shutil.copytree(input_dir, output_dir)
        modify_source_code(output_dir, 'PyQt5', 'PySide2')

if __name__ == '__main__':
    main()
</code></pre>
<p>Using the following command:</p>
<pre><code>python convert_pyqt5_to_pyside2.py -i /path/of/PyQt5-folder -o fakeuic
</code></pre>
<p>Then you can use the loadUiType method from fakeuic:</p>
<pre><code>from fakeuic import loadUiType  
from PySide2 import QtCore, QtGui, QtWidgets

Ui_FirstWindow, QFirstWindow = loadUiType('first_window.ui')
Ui_SecondWindow, QSecondWindow = loadUiType('second_window.ui')

class First(QFirstWindow, Ui_FirstWindow):
    def __init__(self):  
        super(First, self).__init__()
        self.setupUi(self)
        self.button.clicked.connect(self.show_second_window)

    def show_second_window(self):
        self.Second = Second()
        self.Second.show()

class Second(QSecondWindow, Ui_SecondWindow):
    def __init__(self):  
        super(Second, self).__init__()
        self.setupUi(self)

if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    main = First()
    main.show()
    sys.exit(app.exec_())
</code></pre>
<p>You can find the complete example <a href="https://github.com/eyllanesc/stackoverflow/tree/master/questions/55241644" rel="nofollow noreferrer">here</a></p>
</div>
<span class="comment-copy">No, what I need ist a code example which does the above things but is based on PySide2.</span>
<span class="comment-copy">It seems PySide doesn't have a loadUiType function, but you could try this one: <a href="https://stackoverflow.com/a/14195313/154762">stackoverflow.com/a/14195313/154762</a> or see the other answers in that question for alternatives.</span>
<span class="comment-copy">If everything you're doing is replacing PyQt5 by PySide2, then <code>find . -name '*.py' | xargs sed 's/PyQt5/PySide2/g' -i.bpk </code> would suffice</span>
<span class="comment-copy">@geckos that's true but if you have the <code>find</code> command installed, and for windows users it can be a problem.</span>
