<div class="post-text" itemprop="text">
<p>I'm trying to mock out the return value of a dependent method but the return value is different between using the <code>return_value</code> and adding an additional argument to the <code>mock.patch</code>. Please help me figure out why. I tried searching online but couldn't find an answer to this.</p>
<p>library/abc.py:</p>
<pre><code>from tools.operating_system import os_name

class ABC(object):    
    def get_os_info(self):
        return os_name()
</code></pre>
<p>tools/operating_system.py:</p>
<pre><code>import os

def os_name():
    return os.name
</code></pre>
<p>library/test_abc.py:</p>
<pre><code>from unittest import TestCase, mock
from library.abc import ABC

class TestMain(TestCase):
    # This works because the name method returns `test`
    def test_mocking_os_name(self):
        with mock.patch('tools.operating_system.os.name', 'test'):
            abc = ABC()
            res = abc.get_os_info()
            self.assertEqual(res, 'test')

    # The test fails because the name method returns `&lt;MagicMock name='name' id='4515046400'&gt;`
    def test_mocking_os_name(self):
        with mock.patch('tools.operating_system.os.name') as mock_name:
            mock_name.return_value = 'test'
            abc = ABC()
            res = abc.get_os_info()
            self.assertEqual(res, 'test')
</code></pre>
<p>Note: This example is somewhat contrived because I could mock the <code>os_name</code> method. That is not the main concern. I'm trying to learn python test mocking and I want to be able to mock <code>os.name</code>. Thanks! This is for Python 3.7.2 but I have the same problem with Python 2.7.15</p>
</div>
<div class="post-text" itemprop="text">
<p>See the documentation for <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">mock.patch</a>: when you call this</p>
<pre class="lang-py prettyprint-override"><code>with mock.patch('tools.operating_system.os.name', 'test')
</code></pre>
<p>you're doing this:</p>
<pre class="lang-py prettyprint-override"><code>with mock.patch('tools.operating_system.os.name', NEW='test')
</code></pre>
<p>You're replacing <code>os.name</code> with the string <code>test</code>, so that works as you'd expect.</p>
<p>When you call this</p>
<pre class="lang-py prettyprint-override"><code>with mock.patch('tools.operating_system.os.name') as mock_name:
</code></pre>
<p>you're doing this:</p>
<pre class="lang-py prettyprint-override"><code>with mock.patch('tools.operating_system.os.name', NEW=DEFAULT) as mock_name:
</code></pre>
<p>You're leaving <code>NEW</code> as <code>NEW=DEFAULT</code> so <code>os.name</code> is set to <code>MagicMock</code> object (as the documentation says). Setting <code>mock_name.return_value='test'</code> does not work, because you're not calling the function <code>os.name()</code> anywhere in your code, and of course you should not be, because <code>os.name</code> is a string and not a function.</p>
<p>Like you said, in real code you would want to be patching <code>os_name</code> function instead of <code>os.name</code>:</p>
<pre class="lang-py prettyprint-override"><code>def test_patching_os_name(self):
    with mock.patch('library.abc.os_name') as mock_os_name:
        mock_os_name.return_value = 'test'
        abc = ABC()
        res = abc.get_os_info()
        self.assertEqual(res, 'test')
</code></pre>
<p>This test is not depending on the <em>internal implementation</em> of <code>os_name</code> function. If the correct behaviour of <code>ABC</code> class depended on <code>os_name</code> always returning <code>os.name</code> (which is what the tests are asserting), then the class could just as well use <code>os.name</code> itself and not depend on <code>tools.operating_system</code> at all.</p>
<p>A little personal preference for the end: I prefer injecting dependencies instead of patching whenever possible, see, for example, the article <a href="http://mauveweb.co.uk/posts/2014/09/every-mock-patch-is-a-little-smell.html" rel="nofollow noreferrer">"Every mock.patch() is a little smell"</a>.</p>
</div>
<span class="comment-copy">look here --&gt; <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> the second argument supplied to <code>patch</code> is not <code>return_value</code> so these two should not behave the same</span>
