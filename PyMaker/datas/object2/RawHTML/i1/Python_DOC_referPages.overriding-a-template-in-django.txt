<div class="post-text" itemprop="text">
<p>I'm using <a href="https://github.com/Bouke/django-user-sessions/blob/master/user_sessions/views.py" rel="nofollow noreferrer">this library</a> to add a sessions tab on my django project. I'm calling the module's template from my project using this line:</p>
<pre><code>&lt;li&gt;&lt;a href="{% url 'user_sessions:session_list' %}"&gt;Sessions&lt;/a&gt;&lt;/li&gt;
</code></pre>
<p>It works, but now I'd like to style the page, and to do that I need to override the module's template with my own template. So, as the module says <a href="https://github.com/Bouke/django-user-sessions/blob/master/user_sessions/views.py" rel="nofollow noreferrer">here</a>, I inherited the module's <code>SessionListView</code> on my own <code>views.py</code> to overrode the template:</p>
<pre><code>from user_sessions.views import SessionListView

class MySessionList(SessionListView):
    template_name = 'user_sessions/session_list.html'
</code></pre>
<p>Then I added the url to my <code>urls.py</code></p>
<pre><code>    url(
        regex=r'^account/sessions/$',
        view=MySessionList.as_view(),
        name='sessions',
        ),
</code></pre>
<p>And then I created my template on my own project which is located like this:
<code>templates/user_sessions/session_list</code>.</p>
<p>But for some reason, I still can't see <strong>MY</strong> template appearing, the module's template keeps appearing instead. Can anyone help me finding what I'm doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>SessionListView</code> already uses <code>user_sessions/session_list.html</code> by default, so your custom view isn't required.</p>
<p>It sounds like Django is finding the <code>user_sessions/session_list.html</code> template in the <code>user_sessions</code> app before your template. If your template is in an app's <code>templates</code> directory, then you can fix this by moving your app above <code>user_sessions</code> in your <code>INSTALLED_APPS</code> setting.</p>
<p>Alternatively, if you move your template to a directory in the <code>'DIRS'</code> list in the <code>TEMPLATES</code> setting, then Django will find your template before it checks the app templates directories. This is cleaner if your overridden template doesn't really belong to any of your apps, and another advantage is that you don't have to re-order the <code>INSTALLED_APPS</code> list.</p>
<p>See the docs on <a href="https://docs.djangoproject.com/en/2.1/howto/overriding-templates/" rel="nofollow noreferrer">overriding templates</a> for more information.</p>
</div>
<span class="comment-copy">The code doesn't at all say to provide your own view. It says to provide your own template. Where is your <code>templates</code> directory in relation to the rest of your project? And please show your TEMPLATES setting.</span>
<span class="comment-copy">Read <a href="https://docs.djangoproject.com/en/2.1/howto/overriding-templates/" rel="nofollow noreferrer">this</a> to understand how to override templates.</span>
<span class="comment-copy">Looks like the issue was on my Settings.py file, i had to move my import some lines below. Thanks for your help! Yes, i need to learn a bit more about overriding templates in django :)</span>
<span class="comment-copy">Incredible, i have been looking for the issue everywhere, but i only had to literally move a single line on my settings file to solve this, i did not think about that. This is awesome, thank you!</span>
<span class="comment-copy">the more appropriate way is to have <code>'APP_DIRS': True</code> in your <code>TEMPLATES</code> settings, so you don't have to re-order the apps. Or to create a directory at top-level  where you override the templates and set it using the <code>'DIRS': &lt;path&gt;</code> directive. I don't really like having 3rd party apps after my apps in <code>INSTALLED_APPS</code>, that doesn't always work for certain types of apps.</span>
<span class="comment-copy">I did not know about this, thank you @dirkgroten!</span>
<span class="comment-copy">@dirkgroten I'm not sure what you mean by <i>the more appropriate way is to have <code>'APP_DIRS': True</code></i> - my suggestion to re-order the apps will only work if it's already <code>True</code> (unless the app directories loader is manually enabled in <code>TEMPLATES</code>). I agree that creating a project's templates directory and setting <code>DIRS</code> might be better. Nice link to the docs on how to override templates, I've never seen that page before.</span>
<span class="comment-copy">@dirkgroten setting <code>'APP_DIRS': True</code> (the default for a new project) enables the <code>app_directories</code> loader. The docs for <a href="https://docs.djangoproject.com/en/2.2/ref/templates/api/#django.template.loaders.app_directories.Loader" rel="nofollow noreferrer">the app directories loader</a> says that the the order of <code>INSTALLED_APPS</code> is significant and gives examples. For the app directories loader It doesn't matter whether it's a <code>django.contrib</code> app, a third party app installed using <code>pip</code>, or an app in the project directory.</span>
