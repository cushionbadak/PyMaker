<div class="post-text" itemprop="text">
<p>I have a <code>try except</code> block where I am checking the file permissions and my <code>except</code> block should return the appropriate error message when the file permissions are too open.</p>
<pre><code>if oct(os.stat(self.file_path).st_mode &amp; 0o700):
    try:
        # do something with file path
    except MyError as err:
        return {'1': 'Permissions on the .bsm file is too opened'}
</code></pre>
<p>I tried searching for an <code>IOError</code> but I didn't find it quite relevant for my use-case and the <code>MyError</code> that I have defined throws <code>unresolved reference</code> error.</p>
<p>What is the more appropriate exception to define here?
My exception should return me a dictionary with <code>1</code> as the <code>key</code> and error message as <code>value</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It should be <code>PermissionError</code> in your exception:</p>
<pre><code>   if oct(os.stat(self.file_path).st_mode &amp; 0o700):
        try:
        # do something with file path
        except PermissionError as err:
            return {'1': str(err)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a custom exception class extending the Base <code>Exception</code> class. 
Maybe something like this.</p>
<pre><code>class MyError(Exception):
    """
    A common exception class
    """
    message = 'Some default message'

    def __init__(self, message=None):
        self.message = message or self.message
        super(MyError, self).__init__(self.message)

def is_file_readable():
    return False

try:
    if not is_file_readable():
        raise MyError(message={'cause': 'File not readable'})

except MyError as e:
    print(e.message)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can write this function like this
<strong>Solution 1:</strong></p>
<pre><code>if oct(os.stat(self.file_path).st_mode &amp; 0o700):
  try:
    # do something with file path
  except Exception as err:
    print(err) #if you want to see the error message
    return {'1': 'Permissions on the .bsm file is too opened'}
</code></pre>
<p><strong>Solution 2:</strong>
If you also want to know the file open exception . then try this:</p>
<pre><code>try:
  fileopen = oct(os.stat(self.file_path).st_mode &amp; 0o700)
  if fileopen:
    try:
      # do something with file path
    except Exception as err:
      print(err) #if you want to see the error message
      return {'1': 'Permissions on the .bsm file is too opened'}

except Exception as e:
  print("File open error",e)
</code></pre>
</div>
<span class="comment-copy">Wouldn't that be <code>except PermissionError as e: print (e)</code>?</span>
<span class="comment-copy">You haven't defined <code>MyError</code>. Also, exceptions don't return anything, although a <code>return</code> statement can be executed in an <code>except</code> block.</span>
<span class="comment-copy">@poobear, were you able to solve this?</span>
