<div class="post-text" itemprop="text">
<p>so I was asked to come up with some automated possibility to check python code (provided by devs) for adherence to crypto best practices according to different recommendations (mostly German BSI). Most of the time this boils down to looking for usage of e.g., MD5, SHA1 or the keylength in RSA and such stuff. </p>
<p>I could do this somehow with regex but this seems a bit cumbersome and tbh I don't know all the necessary libs and how the function calls look like (to create the regex). I do know that the bandit sast tool has rules to find MD5/SHA1/... but these are not really sufficient (although a good start).</p>
<p>What would be a good possibility to identify usage of such insecure functions? Just Regex, writing my own bandit rules or something different?</p>
<p>Thx</p>
</div>
<div class="post-text" itemprop="text">
<p>First I would like to rephrase. You need static analysis tool that will do some custom checks, like for security problems. </p>
<p>I would start with <code>pylint</code>, with its <a href="https://pylint.readthedocs.io/en/latest/technical_reference/extensions.html" rel="nofollow noreferrer">extensions</a>. There is sample checker at <a href="https://github.com/PyCQA/pylint/blob/master/examples/custom.py" rel="nofollow noreferrer">github</a>. Good point here is that, you can incorporate that into CI/CD tools without much work. Issue here can be that linker can be informed not to treat something as a problem. On one hand that is perfect, since md5 can be used in some areas, but that can lead to having that leak... Looking that way - all you can do is to inform. </p>
<p>Other option is security checker that is able to deal with python code. I'm using <a href="https://github.com/CISOfy/lynis" rel="nofollow noreferrer">lynis</a> at my server. They are using plain Linux shell. In practice you can <code>grep</code> python code to see if something is fishy there. I would advise to go there and check what they are looking for, and how it is done. If not to go that way - than maybe for inspiration. False-positives should be also addressed here. So question is if you wish to deal with it for your own, or you really on developers... </p>
<p>I would start with some checks - like that md5/sha1, and then expand. Be sure it is clear what is checked, and what is wrong. That looks really tricky, but I would give it a try. Maybe open source extension to <code>pylint</code>, on <code>github</code>? That way you can get support from others! If so - let me know :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a small database or dictionary ('library name' : [method1, method2]) of popular crypto libraries and from those libraries, the methods which are attributed to insecure use cases. </p>
<p>Then you would first search to see if the library (key) is infact being used by the project and if its also using insecure methods (value). You wouldn't need to use regex, just think of how you would search for a single string in a text file. But if you wanted efficiency, it might be recommended :) and something fun to develop, that's just my thoughts.</p>
<p>You could however use Sonarqube and integrate that into your build pipeline, it supports python and I know first hand it checks for weak crypto usage within C# projects, it's free and completely automated so it's perfect for small/large teams :)</p>
<p><a href="https://www.sonarqube.org" rel="nofollow noreferrer">https://www.sonarqube.org</a></p>
<p>Good luck buddy!</p>
</div>
<span class="comment-copy">Hundreds of libraries makes this too hard, certainly too broad of a question for stackoverflow. I've always found similar tools to be worse than useless because the goal becomes making the tool stop complaining. There are still common usages of SHA1 are that actually more secure than non-usage, namely the most widely supported form of OAEP padding versus PKCS1.5 padding.</span>
<span class="comment-copy">Then again, searching for uses of MD5, ECB, DES can certainly be used to start checking for cryptographic <i>bad</i> practices. However, if you're not an organization that specializes in security, then you should not have <i>that</i> much to review. If you are, you might want to create documentation which protocol is used where.</span>
<span class="comment-copy">The answer is simple; If you your crypto method encrypts what you want to encrypt with salt, then your regex code will have to find the salt before it can decrypt anything.</span>
<span class="comment-copy">Hi - thank you for this tips. I already tried sonarqube because we are using it for some java projects. IMO the security part of SonarQube for Python is really bad :)</span>
<span class="comment-copy">:( Sorry to hear that buddy, I was hoping that wouldn't be the case because we've had such good outcomes over on C#. Perhaps bandit's the way forward on this one</span>
<span class="comment-copy">Yea bandit seems to work better - but I had no change to check for false positives until now. Thx !</span>
