<div class="post-text" itemprop="text">
<p>I have an issue that I can't seem to resolve.</p>
<p>I am building in a numpy array of shape (100, 30) from lines of a file (100 lines of 30 values each), and I need to make this array into a shape (100, ) with as values the mean of the <em>n</em> last values from each line of the original array.</p>
<p>I have as a goal to do this in one line, so I tried nested list comprehensions but I feel totally lost in there and I'm not sure of what I am doing. </p>
<p>This is what I got so far, this gives me a correctly shape array but with (I believe) the wrong values.</p>
<pre><code>def perf_n_last(n):
    a = np.array([np.mean([i for j in range(len(i)-1, len(i)-(n+1), -1)]) for i in np.loadtxt('myfile.txt')])
    print(a.shape) #outputs (100, )
</code></pre>
<p>The input and output should look like:</p>
<pre><code>input_f = [[1. 2. 3. 4. 5.]
           [2. 3. 4. 5. 6.]
           [3. 4. 5. 6. 7.]]
#We assume n = 2
output_f = [4.5 5.5 6.5]
</code></pre>
<p>I am also open to suggestions about list slices. Thank you for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding your question correctly, this can actually be done very quickly with numpy, assuming each row in the 2d array is the same length:</p>
<pre><code>def perf_n_last(n):
    return np.loadtxt("myfile.txt")[:,-n:].mean(1)
</code></pre>
<p>which loads the file, slices to include all rows but only the <code>n</code> last columns, and takes the mean of each resulting row.</p>
</div>
<span class="comment-copy">Could you share a smaller sized data sample and an expected output so it can be reproduced?</span>
<span class="comment-copy">Why would you demand this to only use up one line? What you have is much less easily legible than it would be if you were to unwrap it.</span>
<span class="comment-copy">Why not just make the (100,30) array from the file then take its mean ?</span>
<span class="comment-copy">@acdr you are totally right, it was a challenge from a classmate and not a good idea.</span>
<span class="comment-copy">Thank you very much, I got carried away by list comprehensions and didn't see this solution</span>
<span class="comment-copy">Can't you just write <code>np.mean(np.loadtxt("myfile.txt")[:,-n:])</code>?</span>
<span class="comment-copy">@Bazingaa, that will take the overall mean of the array rather than the mean of each row.</span>
<span class="comment-copy">@mackenziedg: You can pass <code>axis=1</code> I think for the row wise mean</span>
