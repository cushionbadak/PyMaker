<div class="post-text" itemprop="text">
<p>Context, I'm trying to port a Perl code into Python from <a href="https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/normalize-punctuation.perl#L87" rel="nofollow noreferrer">https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/normalize-punctuation.perl#L87</a> and there is this regex here in Perl:</p>
<pre><code>s/(\d) (\d)/$1.$2/g;
</code></pre>
<p>If I try it with the Perl script given the input text <code>123 45</code>, it returns the same string with a dot. As a sanity check, I've tried on the command line too:</p>
<pre><code>echo "123 45" | perl -pe 's/(\d) (\d)/$1.$2/g;' 
</code></pre>
<p>[out]:</p>
<pre><code>123.45
</code></pre>
<p>And it does so too when I convert the regex to Python, </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; r, s = r'(\d) (\d)', '\g&lt;1&gt;.\g&lt;2&gt;'
&gt;&gt;&gt; print(re.sub(r, s, '123 45'))
123.45
</code></pre>
<p>But when I use the Moses script:</p>
<pre><code>$ wget https://raw.githubusercontent.com/moses-smt/mosesdecoder/master/scripts/tokenizer/normalize-punctuation.perl
--2019-03-19 12:33:09--  https://raw.githubusercontent.com/moses-smt/mosesdecoder/master/scripts/tokenizer/normalize-punctuation.perl
Resolving raw.githubusercontent.com... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...
Connecting to raw.githubusercontent.com|151.101.0.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 905 [text/plain]
Saving to: 'normalize-punctuation.perl'

normalize-punctuation.perl    100%[================================================&gt;]     905  --.-KB/s    in 0s      

2019-03-19 12:33:09 (8.72 MB/s) - 'normalize-punctuation.perl' saved [1912]

$ echo "123 45" &gt; foobar

$ perl normalize-punctuation.perl &lt; foobar
123 45
</code></pre>
<p>Even when we try to print the string before and after the regex in the <a href="https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/normalize-punctuation.perl#L87" rel="nofollow noreferrer">Moses code</a>, i.e. </p>
<pre><code>if ($language eq "de" || $language eq "es" || $language eq "cz" || $language eq "cs" || $language eq "fr") {
    s/(\d) (\d)/$1,$2/g;
    }
else {
    print $_;
    s/(\d) (\d)/$1.$2/g;
    print $_;
    }
</code></pre>
<p>[out]:</p>
<pre><code>123 45
123 45
123 45
</code></pre>
<p>We see that before and after the regex, there's no change in the string.</p>
<p>My question in parts are:</p>
<ul>
<li>Is the Python <code>\g&lt;1&gt;.\g&lt;2&gt;</code> regex equivalent to the Perl's <code>$1.$2</code>?</li>
<li>Why is it that the Perl regex didn't add the full stop <code>.</code> between the two digit groups in Moses? </li>
<li>How to replicate Perl's behavior in Moses in Python regex?</li>
<li>How to replicate Python's behavior in Perl regex in Moses?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The reason why this code from moose doesn't work is because it search for non-breaking space, not just space. It is not easy to see, but <code>hexdump</code> could help you with that:</p>
<pre><code>fe-laptop-p:moose fe$ head -n87 normalize-punctuation.perl | tail -n1 | hexdump -C
00000000  09 73 2f 28 5c 64 29 c2  a0 28 5c 64 29 2f 24 31  |.s/(\d)..(\d)/$1|
00000010  2e 24 32 2f 67 3b 0a                              |.$2/g;.|
00000017
fe-laptop-p:moose fe$ head -n87 normalize-punctuation.perl.with_space | tail -n1 | hexdump -C
00000000  09 73 2f 28 5c 64 29 20  28 5c 64 29 2f 24 31 2e  |.s/(\d) (\d)/$1.|
00000010  24 32 2f 67 3b 0a                                 |$2/g;.|
00000016
</code></pre>
<p>See the difference: <code>c2 a0</code> vs <code>20</code>?</p>
<p>p.s.
as for comments about adding plus sign to regex: it is not needed here, as it is enough to put dot sign between two adjacent digits and no need to find full numbers</p>
</div>
<span class="comment-copy"><code>sed</code> doesn't understand <code>\d</code>, and it uses <code>\(...\)</code> for grouping. Also, you should put the argument in single quotes, because <code>$1</code> and <code>$2</code> are shell variables.</span>
<span class="comment-copy">It doesn't do what you say. Perl does replace a space with a dot. Demo: <a href="https://ideone.com/iWxTub" rel="nofollow noreferrer">ideone.com/iWxTub</a></span>
<span class="comment-copy">tripleee barmar zhim Thanks for catching the mistakes in the comments!</span>
<span class="comment-copy">@zdim, yes but the original perl script didnt seem to budge.</span>
<span class="comment-copy">Why use <code>'\g&lt;1&gt;.\g&lt;2&gt;'</code>? Use <code>r'\1.\2'</code>. However, to match any whitespace, you need <code>\s</code>. And if you have consecutive numbers, you must use a lookahead: <code>re.sub(r'(\d)\s(?=\d)', r'\1.\2', '123 45')</code></span>
<span class="comment-copy">LOL, non-breaking space! Thanks Fedor for catching that!</span>
