<div class="post-text" itemprop="text">
<p>I know this question has been asked multiple times but I cannot seem to apply any of the resolutions to my own situation. </p>
<p>I am scraping a website for certain values, however, the values exist on different profiles on the website. Therefore, I log in, retrieve a value, log out, log back in under a new profile, retrieve a value, log out etc. </p>
<p>The issue is on one of the hover menu items which seem to be generating a stale element reference. I assume this is due to me logging out and back in again? Is this possible to fix or should I rather just start a new WebDriver instance?</p>
<p>Here is my code so far, bear in my that I am very new to Python so forgive any silly errors or assumptions:</p>
<pre><code>from selenium import webdriver
from selenium.webdriver.support import ui
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver import ActionChains
from selenium.common.exceptions import StaleElementReferenceException

options = Options()
options.add_argument("start-maximized")
driver = webdriver.Chrome(options=options, executable_path=r'C:/Users/SChogle/Downloads/chromedriver.exe')
actions = ActionChains(driver)

driver.get("xxxxx")

iframe = ui.WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.TAG_NAME, "iframe")))

driver.switch_to.frame(iframe)

driver.find_element_by_id("Username").send_keys("xxxx")
driver.find_element_by_id("Password").send_keys("xxxx")
driver.find_element_by_id("submit_button").click()

driver.switch_to.default_content()

Investment = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))
actions.move_to_element(Investment).perform()

Investment_Summary = (WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR,"li:nth-child(3) &gt; div &gt; div:nth-child(1) &gt; a")))).click()

Imp_Prov = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div#product-UT td.portfolioProductContractFundHeaderValueRight"))).get_attribute('innerHTML').strip()
print(Imp_Prov)

#log-out
log_out = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a#btnLogoff"))).click()

#log back in

iframe = ui.WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.TAG_NAME, "iframe")))

driver.switch_to.frame(iframe)

driver.find_element_by_id("Username").send_keys("xxxx")
driver.find_element_by_id("Password").send_keys("xxxx")
driver.find_element_by_id("submit_button").click()

driver.switch_to.default_content()

tries = 0
while tries &lt; 3:
    try:
        Investment = WebDriverWait(driver, 10,).until(EC.element_to_be_clickable((By.CSS_SELECTOR,  "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))
        actions.move_to_element(Investment).perform()
        tries = 3

    except StaleElementReferenceException:
        tries += 1

Investment_Summary1 = (WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,"li:nth-child(3) &gt; div &gt; div:nth-child(1) &gt; a")))).click()

Imp_Pen = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div#product-UT td.portfolioProductContractFundHeaderValueRight"))).get_attribute('innerHTML').strip()
print(Imp_Pen)
</code></pre>
<p>See stacktrace below:</p>
<pre><code>174,256,175.68 ZAR
Traceback (most recent call last):
  File "C:/Users/SChogle/PycharmProjects/test1/venv/Web Scraping - BCI.py", line 60, in &lt;module&gt;
    Investment_Summary1 = (WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CSS_SELECTOR,"li:nth-child(3) &gt; div &gt; div:nth-child(1) &gt; a")))).click()
  File "C:\Users\SChogle\PycharmProjects\test1\venv\lib\site-packages\selenium\webdriver\support\wait.py", line 80, in until
    raise TimeoutException(message, screen, stacktrace)
selenium.common.exceptions.TimeoutException: Message: 


Process finished with exit code 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the <a href="https://seleniumhq.github.io/selenium/docs/api/py/_modules/selenium/webdriver/support/expected_conditions.html#element_to_be_clickable" rel="nofollow noreferrer">source code</a></p>
<pre><code>class element_to_be_clickable(object):
    """ An Expectation for checking an element is visible and enabled such that you can click it."""
    def __init__(self, locator):
        self.locator = locator

    def __call__(self, driver):
        element = visibility_of_element_located(self.locator)(driver)
        if element and element.is_enabled():
            return element
        else:
            return False
</code></pre>
<p>The element probably became stale before <code>if element and element.is_enabled():</code> after being located in the previous line (<code>visibility_of_element_located</code> handles <code>StaleElementReferenceException</code>). You can add <code>ignored_exceptions=[StaleElementReferenceException]</code> to the deceleration of <code>WebDriverWait</code> to solve this</p>
<pre><code>Investment1 = WebDriverWait(driver, 10, ignored_exceptions=[StaleElementReferenceException]).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))
</code></pre>
<p>Some more points:</p>
<ol>
<li>There is expected condition <code>frame_to_be_available_and_switch_to_it</code> to handle frames</li>
<li>Python variables should be all lower case</li>
<li><p>You have code repetition, you can use functions instead</p>
<pre><code>options = Options()
options.add_argument("start-maximized")
driver = webdriver.Chrome(options=options, 
executable_path=r'C:/Users/SChogle/Downloads/chromedriver.exe')
actions = ActionChains(driver)

driver.get("xxxxxxx")

def do_login():
    WebDriverWait(driver, 10).until(EC.frame_to_be_available_and_switch_to_it((By.TAG_NAME, "iframe")))

    driver.find_element_by_id("Username").send_keys("xxxxx")
    driver.find_element_by_id("Password").send_keys("xxxxx")
    driver.find_element_by_id("submit_button").click()

    driver.switch_to.default_content()

def print_content():
    investment = WebDriverWait(driver, 10, ignored_exceptions=[StaleElementReferenceException]).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))
    actions.move_to_element(investment).perform()

    investment_summary = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR,"li:nth-child(3) &gt; div &gt; div:nth-child(1) &gt; a"))).click()

    imp_prov = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div#product-UT td.portfolioProductContractFundHeaderValueRight"))).get_attribute('innerHTML').strip()
    print(imp_prov)

do_login()
print_content()
driver.find_element_by_css_selector("a#btnLogoff").click()

do_login()
print_content()
</code></pre></li>
</ol>
<p><strong>Edit:</strong></p>
<p>According to the stacktrace you added the exception is actually on <code>actions.move_to_element(Investment1).perform()</code>. It can be solved by simple loop and retry</p>
<pre><code>tries = 0
while tries &lt; 3:
    try:
        investment = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))
        actions.move_to_element(investment).perform()
        tries = 3
    except StaleElementReferenceException:
        tries += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using - </p>
<ol>
<li>Check element is present at that location.</li>
<li>If yes then you can use javascript click</li>
<li>If no then find element again and click.</li>
</ol>
</div>
<span class="comment-copy">Those are two lines. Which one is it? post the stacktrace.</span>
<span class="comment-copy">apologies, it is this line: Investment1 = WebDriverWait(driver,  10).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))</span>
<span class="comment-copy">Thanks so much for your pointers, however, when adding the line of code (Investment1) I am still getting the same error</span>
<span class="comment-copy">@Saadiq Did you add the ignore? <code>Investment1 = WebDriverWait(driver, 10, ignored_exceptions=[StaleElementReferenceException]).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))</code></span>
<span class="comment-copy">Yup I did. This is what I have: <code>Investment1 = WebDriverWait(driver, 10, ignored_exceptions=[StaleElementReferenceException]).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "div.menu.menuTopCenter &gt; ul &gt; li:nth-child(3) &gt; a")))</code></span>
<span class="comment-copy">I also added the below: <code>from selenium.common.exceptions import StaleElementReferenceException</code> because I was getting a name not defined error on <code>StaleElementReferenceException</code></span>
<span class="comment-copy">@Saadiq Edited my answer</span>
<span class="comment-copy">how would i go about using javascript click?</span>
<span class="comment-copy">Would this be correct? <code>driver.execute_script("arguments[0].click();", Investment_Summary1</code></span>
<span class="comment-copy">yes, if you are not imported javascript executor then try this -'getJsExecutor().executeScript("arguments[0].scrollIntoView();", "your element here");'</span>
