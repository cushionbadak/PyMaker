<div class="post-text" itemprop="text">
<p>Using pandas 0.24.2.  The <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html#database-style-dataframe-or-named-series-joining-merging" rel="nofollow noreferrer">Merge, join &amp; concatenate doc</a> implies the merge method is calling concat() function.  I am joining two DataFrames with a M:M relationship and want to better understand how the concat() function works.  This code calls the merge() method and returns the expected results:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; left = pd.DataFrame([['001', 4123],
...                      ['001', 4855],
...                      ['001', 4761],
...                      ['002', 4991],
...                      ['003', 5001],
...                      ['004', 3999],
...                      ['004', 4175],
...                      ['004', 4101]],
...         columns=['ID', 'Value_l'])
&gt;&gt;&gt; right = pd.DataFrame([['004', 1111],
...                       ['004', 1234],
...                       ['004', 1133],
...                       ['002', 1921],
...                       ['003', 2001],
...                       ['001', 2222]],
...         columns=['ID', 'Value_r'])

&gt;&gt;&gt; merge_lr = pd.merge(left, right, how='outer', sort=True)
&gt;&gt;&gt; print(merge_lr)
     ID  Value_l  Value_r
0   001     4123     2222
1   001     4855     2222
2   001     4761     2222
3   002     4991     1921
4   003     5001     2001
5   004     3999     1111
6   004     3999     1234
7   004     3999     1133
8   004     4175     1111
9   004     4175     1234
10  004     4175     1133
11  004     4101     1111
12  004     4101     1234
13  004     4101     1133
</code></pre>
<p>How do I assemble the same output DataFrame calling the concat() funtion?  Clearly, this example is incorrect:</p>
<pre><code>&gt;&gt;&gt; merge_lr2 = pd.concat([left, right], axis=0, join='outer', sort=True, ignore_index=True)
&gt;&gt;&gt; print(merge_lr2)
     ID  Value_l  Value_r
0   001   4123.0      NaN
1   001   4855.0      NaN
2   001   4761.0      NaN
3   002   4991.0      NaN
4   003   5001.0      NaN
5   004   3999.0      NaN
6   004   4175.0      NaN
7   004   4101.0      NaN
8   004      NaN   1111.0
9   004      NaN   1234.0
10  004      NaN   1133.0
11  002      NaN   1921.0
12  003      NaN   2001.0
13  001      NaN   2222.0
</code></pre>
<p>Can I perform a full outer join with DataFrames having a M:M relationship with the concat() function?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure I quite understand the question. The two methods are intended to do different things and give different results. If you want to combine the dataframes on common keys, you use <code>merge()</code>. If you want to add all data from one onto another, you use <code>concat()</code>. The closest I can get you to the merged dataframe is below, but not the duplicated and/or missing IDs between left and right, and the different values based on sorting:</p>
<pre><code>merge_lr2 = pd.concat([left, right], axis=0, join='outer', sort=True, ignore_index=True)\
            .sort_values(['ID','Value_l','Value_r'])\
            .fillna(method='ffill')\
            .fillna(method='bfill')
print(merge_lr2)

     ID  Value_l  Value_r
0   001   4123.0   2222.0
2   001   4761.0   2222.0
1   001   4855.0   2222.0
13  001   4855.0   2222.0
3   002   4991.0   2222.0 &lt;&lt;&lt;
11  002   4991.0   1921.0
4   003   5001.0   1921.0 &lt;&lt;&lt;
12  003   5001.0   2001.0
5   004   3999.0   2001.0
7   004   4101.0   2001.0
6   004   4175.0   2001.0
8   004   4175.0   1111.0
10  004   4175.0   1133.0
9   004   4175.0   1234.0
</code></pre>
</div>
<span class="comment-copy">what is your expected output, can you post that too?? Thanks</span>
<span class="comment-copy">Scanning through the docs, where does it imply that it uses the <code>concat()</code> function? I don't see that anywhere in the docs or in the source code</span>
<span class="comment-copy">Thank you for this, I was reading 'too much' into the sentence: "The concat() function (in the main pandas namespace) does all of the heavy lifting of performing concatenation operations along an axis while performing optional set logic (union or intersection) of the indexes (if any) on the other axes".</span>
<span class="comment-copy">And thanks for the example.  It helps me understand the concat() and merge methods are indeed different</span>
<span class="comment-copy">Glad I could help clarify. If this answered your question, don't forget to accept the answer with the check mark</span>
