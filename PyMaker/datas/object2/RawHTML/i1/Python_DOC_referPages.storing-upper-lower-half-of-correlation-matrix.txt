<div class="post-text" itemprop="text">
<p>What is the <strong>most { (1) memory efficient (2) time efficient (3) easy-to-access* } way</strong> to store the upper/lower half of the correlation matrix to a file in <strong>python</strong> ?<br/>
(By "easy-to-access" I mean- to be able to read from the file and plot the correlation matrix using matplotlib/seaborn)
Example, for a correlation matrix below:</p>
<pre><code>    C1   C2   C3   C4
C1  1.0  0.6  0.7  0.5  
C2  0.6  1.0  0.4  0.9  
C3  0.7  0.4  1.0  0.3
C4  0.5  0.9  0.3  1.0
</code></pre>
<p>I want to store the below numbers to a file.</p>
<pre><code>    C2   C3   C4
C1  0.6  0.7  0.5
C2       0.4  0.9
C3            0.3
</code></pre>
<p>OR</p>
<pre><code>    C1   C2   C3  
C2  0.6
C3  0.7  0.4
C4  0.5  0.9  0.3
</code></pre>
<p>(I thought of storing it as a csv/tsv file but it will still eat up memory for blank characters which will be there for the other half of the matrix.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need somthing like this:</p>
<pre><code>matrix = np.array([[1, 0.6, 0.7, 0.5],
          [0.6, 1, 0.4, 0.9],
          [0.7, 0.4, 1, 0.3],
          [0.5, 0.9, 0.3, 1]])

ut = np.triu(matrix, k=1)
lt = np.tril(matrix, k=-1)

ut = np.where(ut==0, np.nan, ut)
lt = np.where(lt==0, np.nan, lt)

np.savetxt("upper.csv", ut, delimiter=",")
np.savetxt("lower.csv", lt, delimiter=",")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the second representation. Its just the transpose of the first and you don't need to store any blank characters for the other half. If blanks characters is your concern, write a custom file writer/reader for your matrix.</p>
<p>Example:</p>
<pre class="lang-py prettyprint-override"><code>mat = []

mat.append(["C1", "C2", "C3"])
mat.append(["C2", 0.6])
mat.append(["C3", 0.7, 0.4])
mat.append(["C4", 0.5, 0.9, 0.3])

print(mat)

with open("correlation.txt", "w") as _file:
    for row in mat:
        _file.write("\t".join(str(val) for val in row))
        _file.write("\n") # you will not have blank characters

with open("correlation.txt", "r") as _file:
    for line in _file.readlines():
        print(len(line.split()))
</code></pre>
<p>Result:</p>
<blockquote>
<p>[['C1', 'C2', 'C3'], ['C2', 0.6], ['C3', 0.7, 0.4], ['C4', 0.5, 0.9, 0.3]]<br/>
  3<br/>
  2<br/>
  3<br/>
  4<br/></p>
</blockquote>
</div>
<span class="comment-copy">So your matrix is a <code>list</code> or  <code>numpy array</code> ?</span>
<span class="comment-copy">Use the second representation. You don't need the blanks in than case.</span>
<span class="comment-copy">@AkshayNevrekar its in a list of lists form but can be converted to np-array.</span>
<span class="comment-copy">@HariUserX sorry there is a edit, I want to store column names also along with values.</span>
<span class="comment-copy">Numpy has <code>tri</code> and <code>triu</code> <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.triu.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy-1.13.0/reference/generated/â€¦</a></span>
<span class="comment-copy">Yeah, saving it as a CSV was an option for me already. The purpose of this question is to ask how to prevent the unnecessary zeroes in the matrix.</span>
<span class="comment-copy">it should be <code>np.savetxt</code></span>
<span class="comment-copy">@flyingDope I have converted 0's into nans. Writing it as <code>.txt</code> might help</span>
<span class="comment-copy">Ohh, yes NANs did reduce the size of the csv file. Thanks!</span>
<span class="comment-copy">Upvote for the "memory efficient" way of storage.</span>
