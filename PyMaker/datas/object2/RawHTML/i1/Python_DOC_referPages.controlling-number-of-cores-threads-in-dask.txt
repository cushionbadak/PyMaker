<div class="post-text" itemprop="text">
<p>I have a workstation with these specifications:</p>
<pre><code>Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
Address sizes:       46 bits physical, 48 bits virtual
CPU(s):              16
On-line CPU(s) list: 0-15
Thread(s) per core:  2
Core(s) per socket:  8
Socket(s):           1
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               79
Model name:          Intel(R) Xeon(R) CPU E5-1660 v4 @ 3.20GHz
Stepping:            1
CPU MHz:             1200.049
CPU max MHz:         3800.0000
CPU min MHz:         1200.0000
BogoMIPS:            6400.08
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            256K
L3 cache:            20480K
NUMA node0 CPU(s):   0-15
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti intel_ppin ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts flush_l1d
</code></pre>
<p>I have implemented dask to distribute some calculations and I am setting a <code>Client()</code> this way:</p>
<pre><code>if __name__ == '__main__':
    cluster = LocalCluster()
    client = Client(cluster, asyncronous=True, n_workers=8,
                    threads_per_worker=2)
    train()
</code></pre>
<p>It definitely seems that dask is using all resources when I call my <code>delayed</code> functions with <code>dask.compute(*computations, scheduler='distributed')</code>. The dashboard looks like:</p>
<p><a href="https://i.stack.imgur.com/vqTVB.png" rel="nofollow noreferrer"><img alt="Dashboard to show all resources are used" src="https://i.stack.imgur.com/vqTVB.png"/></a></p>
<p>Now, if I go ahead and change my <code>Client()</code> to:</p>
<pre><code>if __name__ == '__main__':
    cluster = LocalCluster()
    client = Client(cluster, asyncronous=True, n_workers=4,
                    threads_per_worker=2)
    train()
</code></pre>
<p>I would expect to be using the half of my resources, but as you can see on my dashboard that is not the case.</p>
<p><a href="https://i.stack.imgur.com/NAcoK.png" rel="nofollow noreferrer"><img alt="Half resources not being used" src="https://i.stack.imgur.com/NAcoK.png"/></a></p>
<p>Why dask <code>Client()</code> is still using all resources? I would appreciate any input on this. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Client</code> class will make a cluster for you in the case that you haven't already specified one. Thos keywords only have an effect when <em>not</em> passing an existing cluster instance. You should instead put them into your call to <code>LocalCluster</code>: </p>
<pre><code>cluster = LocalCluster(n_workers=4, threads_per_worker=2)
client = Client(cluster, asynchronous=True)
</code></pre>
<p>or you can simply skip making the cluster</p>
<pre><code>client = Client(cluster, asynchronous=True, n_workers=4,
                threads_per_worker=2)
</code></pre>
</div>
<span class="comment-copy">that worked. Thanks for clarifying this. I suspected it was something very easy to solve. Still too new to dask.</span>
