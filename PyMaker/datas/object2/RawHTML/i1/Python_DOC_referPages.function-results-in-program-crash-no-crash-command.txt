<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15446560/main-function-doesnt-run-when-running-script">main() function doesn't run when running script</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have written a script that is pretty temperamental with indentation so I decided to make functions. I'm pretty new to python and now that I've created these functions nothing works!</p>
<pre><code>def main ():
    wiki_scrape()
    all_csv()
    wiki_set = scraped_set('locations.csv')
    country_set = all_set('all.csv')
    print wiki_set
</code></pre>
<p>I'm just wondering if this is the correct way to call functions from the main() function? I've been debating if an indentation issue is occurring within the called functions, python seems to be very reliant on proper indentations even though it doesn't come up with an error!</p>
<p>Full Code - <a href="http://pastebin.com/gJGdHLgr" rel="nofollow">http://pastebin.com/gJGdHLgr</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you need to do this: </p>
<pre><code>def main():
    wiki_scrape()
    all_csv()
    wiki_set = scraped_set('locations.csv')
    country_set = all_set('all.csv')
    print wiki_set

main() # this calls your main function
</code></pre>
<p>Even better: </p>
<pre><code>def main():
    wiki_scrape()
    all_csv()
    wiki_set = scraped_set('locations.csv')
    country_set = all_set('all.csv')
    print wiki_set

if __name__ == '__main__':
    main() # this calls your main function
</code></pre>
<p>Then run it from the command line like this: </p>
<pre><code>python file_name.py
</code></pre>
<p>The built-in variable <code>__name__</code> is the current contextual namespace. If you run a script from the command line, it will be equivalent to <code>'__main__'</code>. If you run/import the .py file as a module from somewhere else, including from inside the interpreter, the namespace (inside of the context of the module) will be the .py file name, or the package name if it is part of a package. For example: </p>
<pre><code>## my_file.py ##
print('__name__ is {0}'.format(__name__))
if __name__ = '__main__':
    print("Hello World!")
</code></pre>
<p>If you do this from command line:</p>
<pre><code>python my_file.py
</code></pre>
<p>You will get: </p>
<pre><code>__name__ is __main__
Hello World!
</code></pre>
<p>If you import it from the interpreter, however, you can see that <code>__name__</code> is not <code>__main__</code>: </p>
<pre><code>&gt;&gt;&gt; from my_file import *
&gt;&gt;&gt; __name__ is my_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't call any functions on starting unless explicitly asked to (including <code>main</code>).</p>
<p>Instead Python names the files being run, with the main file being run called <code>__main__</code>.</p>
<p>If you want to simply call the main function you can use Rick's answer.</p>
<p>However in Python best practice it is better to do the following:</p>
<pre><code>if __name__ == '__main__':
    wiki_scrape()
    all_csv()
    wiki_set = scraped_set('locations.csv')
    country_set = all_set('all.csv')
    print wiki_set
</code></pre>
<p>This ensures that if you are running this python file as the main file (the file you click on, or run from the cmd) then these functions will be run. </p>
<p>If this is instead used as an imported module, you can still use the functions in the script importing the module, but they will not be called automatically and thus won't interfere with the calling script.</p>
</div>
<span class="comment-copy">If all your functions look like <code>main()</code> then you have no problems.</span>
<span class="comment-copy">Do you call <code>main</code>? Python isn't Java where the main object is called on running.</span>
<span class="comment-copy">Make sure you call <code>main</code>. You call it like this: <code>main()</code>.</span>
<span class="comment-copy">so I would have to call main() at the start of main() ?</span>
<span class="comment-copy">"nothing works" is not a precise definition of an issue</span>
<span class="comment-copy">That's pretty weird, why does python allow for code outwith the functions? I've noticed this wehn trying things but I've never understood it.</span>
<span class="comment-copy">This allow you to run python files as scripts (like <code>python myscript.py</code> from the commandline).  It also allows there to be setup code that is run when the file is imported as a module.</span>
<span class="comment-copy"><code>main</code> doesn't mean anything in Python like it does in other languages. You can call your main program anything you like. You just have to call it.</span>
<span class="comment-copy">@Gaddi, that's a big question. RickTeachey definitely started on it, procedural is very much based on a linear algorithm (do this then that). If you want to get more into it you'll need to read around. there's a decent comparison between functional and OOP on SO here: <a href="http://stackoverflow.com/questions/2078978/functional-programming-vs-object-oriented-programming" title="functional programming vs object oriented programming">stackoverflow.com/questions/2078978/â€¦</a></span>
<span class="comment-copy">"why does python allow for code outwith the functions?" : because even the <code>def</code> and <code>class</code> statements are executable statements, and are indeed executed when the module is imported or executed. In fact except for byte-code compilation everything in Python happens at runtime.</span>
<span class="comment-copy">Using this you put <code>wiki_set</code> and <code>country_set</code> in the global namespace, so I'd prefer the usage of an extra main function.</span>
<span class="comment-copy">I would question whether that's best practice or stylistic preference.  I've seen well-written code that does it both ways, depending on whether the intention of the author is that a user <i>may</i> want to call the <code>main()</code> function from another script or not.</span>
<span class="comment-copy">@Doug, I've certainly done it using main as a function to be called. But normally only when I have a module dedicated to a function which will only be used elsewhere. I have rarely seen someone using a main function in a script which is standalone - but that might just be the people I work with.</span>
<span class="comment-copy">@Scironic - You may well be right.  I know that when I learned to program Python (and before that even...gasp...Perl), I was always taught that it's desirable to put that code in a standalone <code>main()</code> function so that it could be imported as a module and used in the way that I intended even if I can't think of a use case for it.  This is so ingrained in me that I even do it if I'm hammering out VBS or Javascript.</span>
<span class="comment-copy">@Doug Either way I reckon you are probably right that it is more stylistic than best practice.</span>
