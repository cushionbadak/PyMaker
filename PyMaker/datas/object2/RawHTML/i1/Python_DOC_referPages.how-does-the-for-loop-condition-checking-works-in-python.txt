<div class="post-text" itemprop="text">
<p>Consider this script in Python :</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]
&gt;&gt;&gt; for i in range(len(raw_data)):
...     print(i, raw_data[i])
...     if math.isnan(raw_data[i]):
...         del raw_data[i]
</code></pre>
<p>As you can see we will get index out of range error, so I conclude that Python does not check the condition after each iteration because otherwise if it does, when <code>i</code> becomes <code>5</code> the length of list is <code>5</code> too so it should not enter the loop body at the first place since <code>5</code> is not lesser than <code>5</code>. </p>
<p>So I conclude that Python saves <code>len(raw_data) = 7</code> at first iteration and it checks whether <code>i &lt; 7</code> after each iteration and does not call the <code>len()</code> function each time. Am I right ?</p>
</div>
<div class="post-text" itemprop="text">
<p>range() is a generator function that is evaluated once at the beginning of the for loop giving an iterable: <code>[0, 1, 2, 3, 4, 5, 6]</code> The for loop then runs once for each item in the iterable. To achieve what you are trying to do it would be better to use <code>enumerate()</code> ie.</p>
<pre><code>for index, datum in enumerate(raw_data):
    if math.isnan(datum):
        del raw_data[index]
</code></pre>
<p>This will work (in python 2 and 3), however, it is generally considered to be bad practice to edit a list that you are iterating over - you might get some strange behaviour if you try to do other operations by index in the same loop so you might also consider storing the indexes of items you wish to delete and then doing the deletions all at once afterwards to make your code more robust. ie.</p>
<pre><code>indexes_to_delete = []
for index, datum in enumerate(raw_data):
    if math.isnan(datum):
        indexes_to_delete.append(index)
# go through the indexes in reverse, to make sure the deletions don't affect earlier indices
for index in sorted(indexes_to_delete, reverse=True):
    del raw_data[index]
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">"The expression list is evaluated once"</a></span>
<span class="comment-copy">But you would never write code like this in Python anyway. Always iterate over the thing itself, not a range of the len of the thing. Not to mention, don't modify a list you're iterating over.</span>
<span class="comment-copy">@JETM thanks a lot .</span>
<span class="comment-copy">@DanielRoseman yeah I know that , I was just trying to understand what is happening behind the scenes .</span>
