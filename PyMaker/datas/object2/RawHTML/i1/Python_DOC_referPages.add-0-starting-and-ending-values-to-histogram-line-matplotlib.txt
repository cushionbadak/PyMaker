<div class="post-text" itemprop="text">
<p>I'd like to have the line superimposed over this histogram to go to zero at both ends. I assumed that adding 0 values to the start and end of the data arrays would suffice, but this doesn't seem to work.</p>
<p><a href="https://i.stack.imgur.com/TlQOq.png" rel="nofollow noreferrer"><img alt="plot" src="https://i.stack.imgur.com/TlQOq.png"/></a></p>
<pre><code>plt.style.use('seaborn-white')
data = np.array(sizes_)
n, bins, _ = plt.hist(data, bins=bins, alpha=0.2, density=True)
plt.grid(axis='y', alpha=0.5)
plt.xlim([0, 500])
bin_centers = 0.5 * (bins[1:] + bins[:-1])

## Tried this but doesn't work
np.insert(bin_centers, 0, 0)
np.append(bin_centers, 500)
np.insert(n, 0, 0)
np.append(n, 0)
##

plt.plot(bin_centers, n)
plt.xlabel('length (nts)')
plt.ylabel('frequency')
plt.title('Length Distribution')
plt.savefig(outfile)
</code></pre>
<p>Any ideas how I can do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to save the arrays after inserting. Moreover, you need to append one pair of x-y values at the end of the arrays. Following is one way of doing it using a sample data set since you did not provide a MCVE</p>
<pre><code>plt.style.use('seaborn-white')
np.random.seed(121)
sizes_ = np.random.randint(2, 100, 50)
data = np.array(sizes_)
n, bins, _ = plt.hist(data, bins=20, alpha=0.2, density=True)
plt.grid(axis='y', alpha=0.5)
bin_centers = 0.5 * (bins[1:] + bins[:-1])

bin_diff = np.diff(bin_centers)[-1]

bin_centers = np.insert(bin_centers, 0, 0)
bin_centers = np.insert(bin_centers, len(bin_centers), bin_centers[-1] + bin_diff)

n = np.insert(n, 0, 0)
n = np.insert(n, len(n), 0)

plt.plot(bin_centers, n)
plt.xlabel('length (nts)')
plt.ylabel('frequency')
plt.title('Length Distribution')
</code></pre>
<p><a href="https://i.stack.imgur.com/slgvP.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/slgvP.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>np.append()</code> and <code>np.insert()</code> are not in-place functions, they return the result and you should assign that to your variable (<code>bin_centers = np.insert(bin_centers, 0, bins[0])</code>)</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt

plt.style.use('seaborn-white')
data = np.array([15, 20, 14, 10, 20, 21, 18, 8])
n, bins, _ = plt.hist(data, alpha=0.2, density=True)
plt.grid(axis='y', alpha=0.5)
plt.xlim([0, 30])
bin_centers = 0.5 * (bins[1:] + bins[:-1])

bin_centers = np.insert(bin_centers, 0, bins[0])
bin_centers = np.append(bin_centers, bins[-1])
n = np.insert(n, 0, 0)
n = np.append(n, 0)

plt.plot(bin_centers, n)
plt.xlabel('length (nts)')
plt.ylabel('frequency')
plt.title('Length Distribution')
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/9mtOK.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/9mtOK.png"/></a></p>
</div>
<span class="comment-copy">neither <code>numpy.append</code> nor <code>numpy.insert</code> modify any of the original arrays. Instead they return a newly created array. You would want to plot this new array, <code>newarray = np.append(oldarray, furthervalues)</code></span>
<span class="comment-copy">Boom. That's it!</span>
