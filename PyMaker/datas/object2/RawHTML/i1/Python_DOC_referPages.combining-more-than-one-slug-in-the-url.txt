<div class="post-text" itemprop="text">
<p>I'm trying to use two slug for generate the urls of a type of post. My site is divided in category and everyone of these have one or more post.</p>
<p><strong>views.py</strong></p>
<pre><code>def singlePost(request, slug_post):
    blogpost = get_object_or_404(BlogPost, slug_post=slug_post)
    context = {"blogpost": blogpost}
    return render(request, "blog/single_post.html", context)


def singleCategory_postList(request, slug_category):
    category = get_object_or_404(Category, slug_category=slug_category)
    blogpost = BlogPost.objects.filter(category=category)
    context = {
            "category": category,
            "blogpost": blogpost,
            }
    return render(request, "blog/single_category.html", context)
</code></pre>
<p><strong>urls.py that I use</strong></p>
<pre><code>path("category/&lt;slug:slug_category&gt;/", views.singleCategory_postList, name="single_category"),
path("&lt;slug:slug_post&gt;/", views.singlePost, name='single_blog_post'),
</code></pre>
<p><strong>urls.py that I would like to use</strong></p>
<pre><code>path("&lt;slug:slug_category&gt;/", views.singleCategory_postList, name="single_category"),
path("&lt;slug:slug_category&gt;/&lt;slug:slug_post&gt;/", views.singlePost, name='single_blog_post'),
</code></pre>
<p>When I use the second couple of path it's shown to me this:</p>
<blockquote>
<p>NoReverseMatch at /blog/gis/</p>
<p>Reverse for 'single_blog_post' with keyword arguments '{'slug_post':
  'rete-dei-sottoservizi-quadro-normativo'}' not found. 1 pattern(s)
  tried:
  ['blog\/(?P[-a-zA-Z0-9_]+)\/(?P[-a-zA-Z0-9_]+)\/$']</p>
</blockquote>
<p><strong>models.py</strong></p>
<pre><code>class Category(models.Model):
    category_name = models.CharField(
                        max_length=50,
                        verbose_name="Categorie",
                        help_text="Every category must be not longer then 50 characters",
                        unique=True,
                        )
    slug_category = models.SlugField(
                verbose_name="Slug",
                unique=True,
                help_text="Slug is a field in autocomplete mode, but if you want you can modify its contents",
                )
....

    def __str__(self):
        return self.category_name

    def get_absolute_url(self): 
        return reverse("single_category", kwargs={"slug_category": self.slug_category})


class BlogPost(ModelPost, TimeManager):
    category = models.ForeignKey(
                    Category,
                    on_delete=models.CASCADE,
                    related_name="category_set",
                    verbose_name="Categorie",
                    help_text="Select a category for this article.You can select only one category.",
                    )
    keyconcepts = models.ManyToManyField(
                    KeyConcept,
                    related_name="keyconcept_blog_set",
                    help_text="Select a key concept for this article. You can select one or more key concepts.",
                    verbose_name="Concetti chiave",
                    )
.....

    def get_absolute_url(self): 
        return reverse("single_blog_post", kwargs={"slug_post": self.slug_post})
</code></pre>
<p>In <a href="https://stackoverflow.com/questions/52246161/is-it-possible-to-add-2nd-slug-to-url-path-in-django">this answer</a> is explained how is possible to do the same thing that I try to do, but for my case don't work fine and I don't understand why.</p>
</div>
<div class="post-text" itemprop="text">
<p>But just like you said, the URL contains two slugs, so you need to pass them both in the reverse call. And you need to use the same names you have used in the URL pattern itself.</p>
<pre><code>return reverse("single_blog_post", kwargs={"slug": self.slug_post, "slug_category": self.category.slug_category})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to the indication of Daniel Roseman I've solved my problem with a little further change.</p>
<p>This is the new singlePost function:</p>
<pre><code>def singlePost(request, slug_post, slug_category):
    category = get_object_or_404(Category, slug_category=slug_category)
    blogpost = get_object_or_404(BlogPost, slug_post=slug_post)
    category_blogpost = BlogPost.objects.filter(category=category)
    context = {"category": category, "blogpost": blogpost, "category_blogpost": category_blogpost}
    return render(request, "blog/single_post.html", context)
</code></pre>
<p>With the code of Daniel Roseman below:</p>
<pre><code>return reverse("single_blog_post", kwargs={"slug_post": self.slug_post, "slug_category": self.category.slug_category})
</code></pre>
<p>Now I can use two slugs in my website</p>
</div>
<span class="comment-copy">Yes! Clearly I've lost something! :( I've need to a little change on my singlePost, in the next post I put the complete solution :)</span>
