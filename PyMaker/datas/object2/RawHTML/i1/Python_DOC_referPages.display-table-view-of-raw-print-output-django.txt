<div class="post-text" itemprop="text">
<p>I have a raw output from a print function which looks something like the below:</p>
<pre><code>b'\r\nsw-dektec#\r\nsw-dektec#terminal length 0\r\nsw-dektec#sh mvr members\r\nMVR Group IP        Status         Member          Membership \r\n-------------------------------------------------------------\r\n232.235.000.001     ACTIVE/UP      Gi1/0/21        Dynamic    \r\n232.235.000.002     ACTIVE/UP      Gi1/0/21        Dynamic    \r\n232.235.000.003     ACTIVE/UP      Gi1/0/21        Dynamic
</code></pre>
<p>I want to parse the above txt and only display 232.235.000.x when i click a button on my webpage. </p>
<p>And am checking if we can display the output in the below format:</p>
<pre><code>Multicast IP
------------
232.235.000.001

232.235.000.002

232.235.000.003
</code></pre>
<p>Here is my view.py so far:</p>
<p>if 'RETRIEVE' in request.POST:</p>
<pre><code>  remote_conn_pre = paramiko.SSHClient()
  remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())
  remote_conn_pre.connect(hostname='172.31.255.4', port=22, username='admin',
                        password='******',
                        look_for_keys=False, allow_agent=False)

  remote_conn = remote_conn_pre.invoke_shell()


  remote_conn.send("\n")


  remote_conn.send("terminal length 0\n")
  remote_conn.send("sh mvr members\n")
  time.sleep(1)
  iptv = remote_conn.recv(65535)
  print (iptv)
  for line in iptv:

      remote_conn.send("end\n")
      remote_conn.send("exit\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way you could parse the command output:</p>
<pre><code>iptv = remote_conn.recv(65535)

ips, rec = [], False
for line in iptv.decode('utf-8').split('\r\n'):
    if '---' in line:
        rec = True
    elif rec:
        ip, *_ = line.split() 
        ips.append(ip)

remote_conn.send("end\n")
remote_conn.send("exit\n")
</code></pre>
<p>If you're looking to render that on your web page, then you'd need to send the parsed IP addresses to a template where you could construct a simple HTML table.</p>
<pre><code>return render(request, 'ip_address_template.html', {
    'ips': ips
})
</code></pre>
<p>The <code>ip_address_template.html</code> template may look something like this:</p>
<pre><code>&lt;table&gt;
    &lt;th&gt;Multicast IP&lt;/th&gt;
    {% for ip in ips %}
        &lt;tr&gt;&lt;td&gt;{{ ip }}&lt;/td&gt;&lt;/tr&gt;
    {% endfor %}
&lt;/table&gt;
</code></pre>
</div>
