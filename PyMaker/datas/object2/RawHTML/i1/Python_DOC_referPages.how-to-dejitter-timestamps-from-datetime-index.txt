<div class="post-text" itemprop="text">
<p>I am dealing with jittered timeseries, and I'd like to use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.snap.html" rel="nofollow noreferrer">pandas.DatetimeIndex.snap</a> method to snap time stamps to the nominal frequency. 
Here is a code to generate jittered data: </p>
<pre><code> import pandas as pd
 import numpy as np 

 start_date='2018-01-01'
 rate = 10
 jitter=.05
 num_rows=100
 num_cols = 3

 frequency = 1 / rate
 indices = pd.date_range(
            start=start_date,
            periods=num_rows,
            freq=pd.DateOffset(seconds=frequency))
 jitter = frequency * jitter
 deltas = pd.to_timedelta(
            np.random.uniform(-jitter, jitter, num_rows), unit='s')
 indices = indices + deltas
 rows = np.random.rand(num_rows, num_cols)
 data = pd.DataFrame(rows, indices)
</code></pre>
<p>I got: </p>
<pre><code> data =
                                   0         1         2
2018-01-01 00:00:00.001242896  0.156529  0.366638  0.619121
2018-01-01 00:00:00.101054078  0.159395  0.968022  0.914749
2018-01-01 00:00:00.192294840  0.166950  0.121155  0.085408
2018-01-01 00:00:00.292522754  0.909444  0.193624  0.416285
2018-01-01 00:00:00.400590672  0.448851  0.599011  0.071735
2018-01-01 00:00:00.495377230  0.226759  0.931490  0.908410
</code></pre>
<p>I'd like to do something like <code>data.snap("10Hz")</code> ... but:</p>
<ul>
<li>data.freq is None</li>
<li>I cannot specify a frequency in method snap</li>
</ul>
<p>The expected output is the dataframe dejittered, ie. </p>
<pre><code>                                   0         1         2
2018-01-01 00:00:00.000000000  0.156529  0.366638  0.619121
2018-01-01 00:00:00.100000000  0.159395  0.968022  0.914749
2018-01-01 00:00:00.200000000  0.166950  0.121155  0.085408
2018-01-01 00:00:00.300000000  0.909444  0.193624  0.416285
2018-01-01 00:00:00.400000000  0.448851  0.599011  0.071735
2018-01-01 00:00:00.500000000  0.226759  0.931490  0.908410
</code></pre>
<p>Any idea ? </p>
<p>Many thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you need <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.round.html" rel="nofollow noreferrer"><code>DatetimeIndex.round</code></a> by <code>100ms</code>:</p>
<pre><code>data.index = data.index.round('100L')
print (data.head(10))

                                0         1         2
2018-01-01 00:00:00.000  0.875417  0.786886  0.299583
2018-01-01 00:00:00.100  0.671108  0.295735  0.482092
2018-01-01 00:00:00.200  0.685071  0.795047  0.420373
2018-01-01 00:00:00.300  0.487898  0.919015  0.815932
2018-01-01 00:00:00.400  0.004191  0.085291  0.919271
2018-01-01 00:00:00.500  0.529557  0.380357  0.903027
2018-01-01 00:00:00.600  0.470609  0.225200  0.504134
2018-01-01 00:00:00.700  0.685757  0.648768  0.510639
2018-01-01 00:00:00.800  0.016022  0.301982  0.432702
2018-01-01 00:00:00.900  0.681281  0.910646  0.519735
</code></pre>
<p>I try function <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DatetimeIndex.snap.html" rel="nofollow noreferrer"><code>DatetimeIndex.snap</code></a>, but not possible set <code>freq</code>, it return always same output (maybe default <code>freq='S'</code> is not possible changed or bug)</p>
<pre><code>rate = 10
jitter=.05
num_rows=100
num_cols = 3
start_date = '2018-01-01'

np.random.seed(123)
frequency = 1 / rate
indices = pd.date_range(
        start=start_date,
        periods=num_rows,
        freq=pd.DateOffset(seconds=frequency))
jitter = frequency * jitter
deltas = pd.to_timedelta(
        np.random.uniform(-jitter, jitter, num_rows), unit='s')
indices = indices + deltas
rows = np.random.rand(num_rows, num_cols)
data = pd.DataFrame(rows, indices)
print (data.head())
</code></pre>
<hr/>
<pre><code>print (data.index.snap(freq='S')[:10])
DatetimeIndex(['2018-01-01 00:00:00.001964', '2018-01-01 00:00:00.097861',
               '2018-01-01 00:00:00.197268', '2018-01-01 00:00:00.300513',
               '2018-01-01 00:00:00.402194', '2018-01-01 00:00:00.499231',
               '2018-01-01 00:00:00.604807', '2018-01-01 00:00:00.701848',
               '2018-01-01 00:00:00.799809', '2018-01-01 00:00:00.898921'],
              dtype='datetime64[ns]', freq='100L')

print (data.index.snap(freq='100S')[:10])
DatetimeIndex(['2018-01-01 00:00:00.001964', '2018-01-01 00:00:00.097861',
               '2018-01-01 00:00:00.197268', '2018-01-01 00:00:00.300513',
               '2018-01-01 00:00:00.402194', '2018-01-01 00:00:00.499231',
               '2018-01-01 00:00:00.604807', '2018-01-01 00:00:00.701848',
               '2018-01-01 00:00:00.799809', '2018-01-01 00:00:00.898921'],
              dtype='datetime64[ns]', freq='100L')

print (data.index.snap(freq='100L')[:10])
DatetimeIndex(['2018-01-01 00:00:00.001964', '2018-01-01 00:00:00.097861',
               '2018-01-01 00:00:00.197268', '2018-01-01 00:00:00.300513',
               '2018-01-01 00:00:00.402194', '2018-01-01 00:00:00.499231',
               '2018-01-01 00:00:00.604807', '2018-01-01 00:00:00.701848',
               '2018-01-01 00:00:00.799809', '2018-01-01 00:00:00.898921'],
              dtype='datetime64[ns]', freq='100L')
</code></pre>
</div>
<span class="comment-copy">What is expected output?</span>
<span class="comment-copy">see edited version!</span>
