<div class="post-text" itemprop="text">
<p>I have a dictionary in python with several lists, and what I try to do is get a list of tuples (or lists) where the lists are grouped with the same elements regardless of whether they are ordered. For example:</p>
<pre><code>dict_1 = {
    "pv_0": [1, 2, 3, 4, 5],
    "pv_1": [2, 4, 6, 8, 10],
    "pv_2": [1, 3, 5, 7, 9],
    "pv_3": [3, 4, 1, 2, 5],
    "pv_4": [2, 3, 4, 5, 6],
    "pv_5": [3, 4, 5, 6, 2],
    "pv_6": [1, 2, 3, 5, 4],
    "pv_7": [5, 9, 7, 3, 1],
    "pv_8": [2, 4, 6, 8, 10],
    "pv_9": [1, 3, 5, 6, 7],
}
</code></pre>
<p>I wish to obtain the following result:</p>
<pre><code>Result = [
    ("pv_0", "pv_3", "pv_6"),
    ("pv_2", "pv_7"),
    ("pv_1", "pv_8"),
    ("pv_4", "pv_5"),
    ("pv_9"),
]
</code></pre>
<p>How do I solve this problem?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from operator import itemgetter
from itertools import groupby

# create a new dictionary where the value is a hashed immutable set
d = {k: hash(frozenset(v)) for k, v in dict_.items()}

{'pv_0': -3779889356588604112,
 'pv_1': 2564111202014126800,
 'pv_2': 777379418226018803,
 'pv_3': -3779889356588604112,
 'pv_4': 8713515799959436501,
 'pv_5': 8713515799959436501,
 'pv_6': -3779889356588604112,
 'pv_7': 777379418226018803,
 'pv_8': 2564111202014126800,
 'pv_9': -6160949303479789752}

first = itemgetter(0) # operator to grab first item of iterable
second = itemgetter(1) # operator to grab second item of iterable

[list(map(first, v)) for _, v in groupby(sorted(d.items(), key=second), key=second)]

[['pv_9'],
 ['pv_0', 'pv_3', 'pv_6'],
 ['pv_2', 'pv_7'],
 ['pv_1', 'pv_8'],
 ['pv_4', 'pv_5']]
</code></pre>
<p>The final list comprehension grabs all the key/value pairs from the dictionary and sorts them by the value. It then passes that in to the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> function from itertools and tells it to group by the value of the dictionary. The output of this is then fed in to a map function which grabs the first item from each pair in the group which would be the corresponding key.</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I can tell, you want a tuple of keys where each value is the same. </p>
<pre><code>def get_matching_keys(data: dict) -&gt; list: 
    # first, make everything a set
    for key in data: 
        data [key] = set (data [key])  # makes order irrelevant
    results = []
    duplicates = []
    for key, value in data.items():
        if key in duplicates: continue  # we already did this
        result = [key]
        duplicates.append (key)
        for key2, value2 in data.items():
            if key == key2: continue  # skip the same key
            else: 
                if value == value2: 
                    result.append (key2)
                    duplicates.append (key2)  # make sure we don't do it again
        results.append (result)
    return results
</code></pre>
</div>
<span class="comment-copy">What have you tried and what exactly is the problem with it?</span>
<span class="comment-copy">You might consider using sets instead of lists since it seems like order doesn't matter here. Also, your dictionary should not be named <code>dict</code> since that has a specific meaning in python.</span>
<span class="comment-copy">does the final output have to be sorted the way you specified?</span>
<span class="comment-copy">don't use <code>dict</code> as the variable name because you override this class</span>
<span class="comment-copy">Look into using <code>itertools.groupby</code>.</span>
<span class="comment-copy">i would use itertools for this, the solution becomes a 2 liner</span>
