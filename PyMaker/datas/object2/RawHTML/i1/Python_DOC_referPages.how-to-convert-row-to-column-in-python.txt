<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5954603/transposing-a-numpy-array">Transposing a NumPy array</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have data like below. </p>
<pre><code>[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.
 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34.] &lt;br&gt;

(34,)
</code></pre>
<p>But I want to make this (1,34).<br/>
When I use np.reshape like</p>
<pre><code>np.reshape(data, (1,34))
</code></pre>
<p>I get data like below.</p>
<pre><code>[[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.
  19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34.]]

(1, 34)
</code></pre>
<p>But it looks weird for me. Could you recommend a solution?
<br/>
%np.transpose does not change anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>So with numpy's reshape(), it will change the dimensions of the array.  And those dimensions must be factors of the sum of elements.  In your case your arrary has 34 values, so you only have 4 options.  Either you have a dimension of (1,34) or (2,17), which look like:</p>
<pre><code>    array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
        33, 34]])
</code></pre>
<p>and</p>
<pre><code>array([[ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17],
       [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34]])
</code></pre>
<p>Or you can do the reverse of the above with (34, 1):</p>
<pre><code>array([[ 1],
       [ 2],
       [ 3],
       [ 4],
       [ 5],
         .
         .
       [34]
</code></pre>
<p>or finally (17, 2) which looks like :</p>
<pre><code>array([[ 1,  2],
       [ 3,  4],
       [ 5,  6],
       [ 7,  8],
       [ 9, 10],
       [11, 12],
       [13, 14],
       [15, 16],
       [17, 18],
       [19, 20],
       [21, 22],
       [23, 24],
       [25, 26],
       [27, 28],
       [29, 30],
       [31, 32],
       [33, 34]])
</code></pre>
<p>This is because 34 only breaks down to 2 * 17 or 17 * 2.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the transpose of the array to (df.T) to get the desired output.</p>
</div>
<span class="comment-copy">It is not clear to me what exactly you are asking. You should elaborate with better examples.</span>
<span class="comment-copy">From what I understand, you want the rows to become columns, and the columns to become rows. Assuming your data is stored in <code>data</code>, try using <code>data.T</code>. Like @Leonid said, your question is not very clear.</span>
<span class="comment-copy"><i>"But it looks weird for me."</i>  It looks correct to me, and it is what you say you wanted.</span>
<span class="comment-copy">@hridayns, <code>data</code> is a one-dimensional array with shape (34,).  In numpy, the transpose operation <i>swaps</i> existing dimensions; it doesn't create new dimensions. So on a one-dimensional array, the transpose operation doesn't do anything.</span>
<span class="comment-copy">A (1,34) shape array displays like a list with 1 element - that element is itself a list - a list with 34 elements.  That's what the weird display shows, right?  By convention we think of the first dimension of a 2d array, as the number of rows, and the second as the number columns.  A 1d array just has elements (no rows or columns).</span>
