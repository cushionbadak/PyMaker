<div class="post-text" itemprop="text">
<p>If I have some example data as:</p>
<pre><code>dic = {'common': {'value': 18, 'attr': 20, 'param': 22},
       'fuzzy': {'value': 14, 'attr': 21, 'param': 24},
       'adhead': {'value': 13, 'attr': 20, 'param': 29}}
</code></pre>
<p>Executing <code>pd.DataFrame(dic)</code> I get:</p>
<pre><code>       common  fuzzy  adhead
attr       20     21      20
param      22     24      29
value      18     14      13
</code></pre>
<p>And here, 'external' columns are ok, but 'internal' are sorted, this is what I need to avoid. How to do it quick? (Need to keep ordering - here rows are sorted)</p>
<p>Hint: I've got a message on the colsole:</p>
<blockquote>
<p><strong>main</strong>:95: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version of pandas will change to not sort by
  default.</p>
<p>To accept the future behavior, pass 'sort=True'.</p>
<p>To retain the current behavior and silence the warning, pass
  sort=False</p>
</blockquote>
<p>but don;t know what's for. Passing this argument to <code>pd.DataFrame(dic, sort=False)</code> returns:
<code>TypeError: __init__() got an unexpected keyword argument 'sort'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Then using <code>reindex</code> as protection </p>
<pre><code>pd.DataFrame(dic).reindex(index=['value','attr','param'])
Out[553]: 
       common  fuzzy  adhead
value      18     14      13
attr       20     21      20
param      22     24      29
</code></pre>
</div>
<span class="comment-copy">Please refer <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a></span>
<span class="comment-copy">dictionaries are not ordered, so there is no order to mantain.</span>
<span class="comment-copy">@ecortazar Don't you think OrderedDict would work?</span>
<span class="comment-copy">Ok, but I've tried 'OrderedDict' and nothing changed.</span>
<span class="comment-copy">Since the sub-dict's order seems to be important, a dictionary is clearly not the right data-structure for them. I would have recommended starting from lists. If a dictionary is what you receive, there is no way for pandas to guess what the correct order should be, so you'd need to reindex after.</span>
