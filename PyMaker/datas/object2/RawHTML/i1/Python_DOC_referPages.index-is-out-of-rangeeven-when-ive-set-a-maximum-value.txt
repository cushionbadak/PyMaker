<div class="post-text" itemprop="text">
<p>Trying to create the game of life. When looping through the list of cells, although I only scan for (abs(1-j)) or set a maximum value of j so that it can't go above the number of cells within the program. Here's my code:</p>
<pre><code>from graphics import *  #Using zelle graphics module for Python
S=20 #Size of each cell. The bigger the number the bigger it is
class Cell: #Cell is a rectangular box. Can be alive or dead
    def __init__(self,window,x,y,alive):
        self.window=window
        self.alive=alive
        self.x=x
        self.y=y
        self.rectangle=Rectangle(Point(x*S,(y*S)+S),Point((x*S)+S,y*S))
        self.draw(x,y,self.window) 

    def __str__(self):
        return str(self.getX())+" "+str(self.getY())

    def draw(self,x,y,window):
        self.rectangle.setFill("black")
        self.rectangle.draw(window)

    def getX(self):
        return self.x*S

    def getY(self):
        return self.y*S+S

    def die(self):
        self.rectangle.setFill("black")
        self.alive=False

    def becomeAlive(self,window):
        self.rectangle.setFill("white")
        self.alive=True

    def isAlive(self):
        return self.alive

    def clickedOn(self,mouseX,mouseY):
        if (mouseX&gt;self.getX() and mouseX&lt;self.getX()+S and mouseY&lt;self.getY()+S and mouseY&lt;self.getY()):
            return True
        else:
            return False

    def totalNeighbours(self,cell0,cell1,cell2,cell3,cell4,cell5,cell6,cell7):
        localNeighbourhood=[cell0,cell1,cell2,cell3,cell4,cell5,cell6,cell7]
        livingNeigbour=0
        for cell in localNeighbourhood:
            if cell.isAlive():
                livingNeigbour+=1
            return livingNeigbour



def createGraphics():    
    win=GraphWin("Game of Life!",1000,1000)
    return win

def createGrid(window):   #Creating the grid of cell objects
    cellList=[]
    for x in range(150):
        for y in range(150):
            cell=Cell(window,x,y,alive=False)
            cellList.append(cell)

    for i in range(10):
        getM=window.getMouse()
        j=0
        for cells in cellList:
            if cellList[j].clickedOn(getM.getX(),getM.getY()): #Checking whether the cell has been clicked.

                cellList[j].becomeAlive(window) 
                break
            else:
                j=j+1

    return cellList


def runSimulation(window,cellList):  
    j=0

    for cell in cellList:

            if cell.isAlive():
                while j&lt;849: #Making sure j+150 doesn't go above 1000 or the program will crash
                    if cell.totalNeighbours(cellList[abs(j-1)],cellList[j+1],cellList[j+150]
                    ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])&gt;3:
                        cellList[j].die()

                    if cell.totalNeighbours(cellList[j-1],cellList[j+1],cellList[j+150]
                    ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])==3:
                        pass  
                    if cell.totalNeighbours(cellList[j-1],cellList[j+1],cellList[j+150]
                    ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])==2:
                        pass  
                    if cell.totalNeighbours(cellList[j-1],cellList[j+1],cellList[j+150]
                    ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])&lt;2:
                        cellList[j].die()
                    j=j+1
                    #debug(cellList,j)

            else:
                #debug(cellList,j) #Attempting to debug what's wrong

                if cell.totalNeighbours(cellList[abs(j-1)],cellList[j+1],cellList[j+150]
                ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])==3:
                    cell[j].becomeAlive()  
                if cell.totalNeighbours(cellList[abs(j-1)],cellList[j+1],cellList[j+150]
                ,cellList[abs(j-150)],cellList[j+151],cellList[abs(j-149)],cellList[j+149],cellList[abs(j-151)])==2:
                    cell[j].becomeAlive() 
                j=j+1


def main():
    window=createGraphics()
    cellList=createGrid(window)
    runSimulation(window,cellList)

def debug(cellList,j):
    print(j)

main()
</code></pre>
<p>So why is my 'index' out of range? What's the logic here? I'm using zelle python graphics for my program.</p>
<p>Edit: In the runSimulation function, it loops through all the cells in the list and returns all its immediate neighbors. It does this by passing in j+1,j-1,j+150 etc... to totalNeighbours in the Cell Class. j+1, for example, would be the cell below it, j-1 would be the cell on top of it, j+150 would be the cell next to it in the next column. Each of these neighbor cells are then used by passing them into the 'total neighbors' method, and the neighbour valuie increases by oone every time a live cell is found</p>
</div>
<div class="post-text" itemprop="text">
<p>A quick try, except showed me what value of <code>j</code> leads to IndexError:</p>
<pre><code>else:
    # debug(cellList,j) #Attempting to debug what's wrong

    try:
        if cell.totalNeighbours(cellList[abs(j-1)], cellList[j+1], cellList[j+150], cellList[abs(j-150)], cellList[j+151], cellList[abs(j-149)], cellList[j+149], cellList[abs(j-151)]) == 3:
            cell[j].becomeAlive()
        if cell.totalNeighbours(cellList[abs(j-1)], cellList[j+1], cellList[j+150], cellList[abs(j-150)], cellList[j+151], cellList[abs(j-149)], cellList[j+149], cellList[abs(j-151)]) == 2:
            cell[j].becomeAlive()
        j = j+1
    except IndexError as ie:
        print("Index error on j=", j)
        exit()
</code></pre>
<p>On the 10th click I am able to reproduce the issue. This is the error.</p>
<pre><code>Index error on j= 22349
</code></pre>
<p>You have a logical error in your code. You need to fix it. Hint: check the size of <code>cellList</code> and calculate <code>j+150</code> (you are feeding it as an index to the list).</p>
</div>
