<div class="post-text" itemprop="text">
<p>I'm having trouble fixing the error. New to python.I need to use a priority queue in my Python code. Looking around for something efficient
I'm trying to generate 10 random numbers and apply it to the priority queue provide below.  I ran the code and got this: TypeError: unhashable type: 'list'  </p>
<pre><code>import heapq
import itertools
import random

class PQ_Heap(object):

    def __init__(self):
        print ("creates a min heap from passed in list")
        self.heap = []
        self.entries = {}
        self.counter = itertools.count()

    def enQueue(self, item, priority):
        print ("adds an item to the PQ and reheapifies")
        if item in self.entries:
            self.remove(item)

        count = next(self.counter)
        # weight = -priority since heap is a min-heap
        entry = [-priority, count, item]
        self.entries[item] = entry
        heapq.heappush(self.heap, entry)
        pass

    #Add an item to the PQ and reheapify. Print out parent and children (if applicable) or n/a if not          
    def deQueue(self):
        print("removes the highest priority item from the PQ and    reheapifies")
        while self.heap:
            weight, count, item = heapq.heappop(self.heap)
            if item is not PriorityQueue._REMOVED:
                del self.entries[item]
                return -weight, item
        raise KeyError("The priority queue is empty")

    #Remove the highest priority item from the PQ and reheapify
    def sneakAPeek(self):
        print ("returns the highest priority in the PQ, but does not remove it") 
        while self.heap:
            weight, count, item = self.heap[0]
            if item is PriorityQueue._REMOVED:
                heapq.heappop(self.heap)
            else:
                return -weight, item

        return None

#       Return the highest priority item from the PQ, but don't remove it 

    def isEmpty(self):
        print ("returns T if PQ is empty, F if PQ has entries")
        if len (self.heap) == 0:
            return 'T'
        return 'F'
#       Return a T if PQ is empty, F if PQ is not empty 
#
    def size(self):
        print ("returns number of items in queue")
        return len (self.heap)


#       Return the number of items in the queue 

q = PQ_Heap()
item1 = [random.randrange(50000) for _ in range(10)]
q.enQueue(item1, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>This is because your en queue expects hash-able entity but you are passing the entire list as argument whereas you should pass the items of the list as arguments. See below</em></p>
<pre><code>    q = PQ_Heap()
    item1 = [random.randrange(50000) for _ in range(10)]
    for item in item1:
        q.enQueue(item, 1)
</code></pre>
</div>
<span class="comment-copy">Where exactly does that error occur?</span>
<span class="comment-copy">The goal is to enqueue item1. I try using q.enQueue(item1, 1), which produced the error. If you better option or advice, it will be appreciated.</span>
<span class="comment-copy">Most of the time it is best to post an <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> instead of your whole code. This way people can focus on the problem at hand.</span>
