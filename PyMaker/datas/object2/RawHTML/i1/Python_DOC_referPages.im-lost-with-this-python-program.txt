<div class="post-text" itemprop="text">
<pre><code>import sys
import pathlib
import os
def GetAndSplitCommand(line, file):
    if line is 1:
        line = 0
    f=open(file)
    lines=f.readlines()
    unsplit=lines[line]
    split=unsplit.split()
    return split

def ExecuteCode(*args):
    lists = [item for item in args]
    print(lists)
    parameters = args
    if lists[0] == "hi":
        HelloWorld()
        return
    elif lists[0] == "bye":
        GoodbyeWorld()
        return

def HelloWorld():
    print(" Hello World!")
    return
def GoodbyeWorld():
    print(" Bye World!")
    return
command = GetAndSplitCommand(1, "food.txt")
ExecuteCode(command)
</code></pre>
<p>In food.txt I have the word "hi", so, with this code it should print out "Hello World!", however it simply prints out [['hi']]. I have tried many times to reformat the code and I need advice as to what I need to do.</p>
<p>Also, its not a indentation issue, stackoverflow just isn't nice with my code.</p>
<p>Another note, this program is essentially meant to read the line of a file, split the line into separate "parameters", and using the ExecuteCode() function, do something ifthe first parameter is X.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks to me like you've misunderstood what <code>*args</code> does in a function declaration.</p>
<p>When you write <code>def ExecuteCode(*args):</code>, you're staying that you want to allow <code>ExecuteCode</code> to be called with a variable number of arguments. For instance, other code could call <code>ExecuteCode("foo", "bar", "baz")</code> (three arguments) or <code>ExecuteCode()</code> (zero arguments). The <code>args</code> variable in the function will be a list of those argument values (so <code>["foo", "bar", "baz"]</code> or <code>[]</code> for my two example calls).</p>
<p>In your code, you're calling the function with one argument <code>ExecuteCode(command)</code>. If <code>command</code> is the list <code>['hi']</code>, then inside <code>ExecuteCode</code>, <code>args</code> will be <code>[['hi']]</code>, since it always puts the arguments in a list, since there might be several of them.</p>
<p>You probably don't need to use <code>*args</code> here. Instead, just use:</p>
<pre><code>def ExecuteCode(lists):
    if lists[0] == "hi":
        ...
</code></pre>
<p>Note that there are a few other style issues with your code (that won't prevent it from running, but do make it more complicated or confusing that it needs to be). One issue is naming. A common Python convention is to use <code>lowercase_names_with_underscores</code> for most functions, and reserve <code>CapitalizedNames</code> for classes. Another issue is picking names that are clear about what they do. The <code>lists</code> variable in <code>ExecuteCode</code> is an example of this. In your current buggy code it's a list of lists, so that name <em>might</em> make some sense (if that was what you wanted), but if you change it as I suggest above to be a list of strings, you should rename it something else, since it's no longer a list of lists.</p>
</div>
<span class="comment-copy">Are you executing the script with some arg ? If you don't, it won't enter in 'hi' or 'bye'</span>
<span class="comment-copy">For starters, you can remove the first three lines from <code>ExecuteCode</code> and replace <code>lists</code> with <code>args</code>, to the same effect. Also, are you aware that the first line in a file is line #0, not #1?</span>
<span class="comment-copy">Learn logging and how to <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">debug small programs</a>... these are crucial skills every developer needs.</span>
<span class="comment-copy">It prints <code>[['hi']]</code> because you have <code>print(lists)</code>. The <code>if</code> block is not getting executed.</span>
<span class="comment-copy">One more thing: <code>line is 1</code> must be <code>line==1</code>.</span>
