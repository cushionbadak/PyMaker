<div class="post-text" itemprop="text">
<p>im only student so please bear with me. I already posted another topic about this but in function view. now i want to how do i convert this try exception to a class view and also add that comment form.</p>
<p>here's my views.py def</p>
<pre><code>def BookDetail(request, id):
    most_recent = Book.objects.order_by('-timestamp')[:3]
    book= get_object_or_404(Book, id=id)
    form = CommentForm(request.POST or None)
    if request.method == "POST":
        if form.is_valid():
            form.instance.user = request.user
            form.instance.post = book
            form.save()
            return redirect(reverse("book-detail", kwargs={
                'id': book.pk
            }))

    if request.user.is_anonymous:
        user_membership = None
    else:
        try:
            user_membership = Customer.objects.get(user=request.user)
        except Customer.DoesNotExist:
            user_membership = None

    context = {
        'user_membership': user_membership,
        'form': form,
        'book': book,
        'most_recent': most_recent,

    }
    return render(request, 'catalog/book_detail.html', context)
</code></pre>
<p>here is my new class view</p>
<pre><code>class BookDetailView(NeverCacheMixin, generic.DetailView):
    model = Book
</code></pre>
<p><strong>UPDATE POST</strong></p>
<p>here's my models.py.. </p>
<pre><code>class Book(models.Model):
    slug = models.SlugField(unique=True, help_text="Enter BIC Code", null=True)
    title = models.CharField(max_length=200) #more fields after this

    timestamp = models.DateTimeField(default=timezone.now)


    activeReference = models.ManyToManyField(Membership)


    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('book-detail', kwargs={'slug': self.slug})

    @property
    def get_comments(self):
        return self.comments.all().order_by('-timestamp')

    @property
    def pages(self):
        return self.page_set.all()

class Page(models.Model):
    slug = models.SlugField(max_length=50)
    book = models.ForeignKey(Book, on_delete=models.SET_NULL, null=True)
    preview = models.FileField(upload_to='book_content', validators=[pdf_file_extension], help_text="PDF File Only")

    def __str__(self):
        return self.slug

    def get_absolute_url(self):
        return reverse('page-detail',
                       kwargs={
                           'book_slug': self.book.slug,
                           'page_slug': self.slug
                       })
</code></pre>
<p>here's my URL pattern</p>
<pre><code>urlpatterns = [
path('', views.index, name='index'),
path('books/', views.BookListView.as_view(), name='book-list'),
path('book-detail/&lt;slug&gt;', views.BookDetailView.as_view(), name='book-detail'),
path('book-detail/&lt;book_slug&gt;/&lt;page_slug&gt;', views.PageDetailView.as_view(), name='page-detail'),


path('search/', views.Search, name='search'),
</code></pre>
<p>]</p>
<p>and my book_detail.html</p>
<pre><code>        {% for content in book.pages %}
            &lt;a href="{{ content.get_absolute_url }}" class="site-btn"&gt;Read&lt;/a&gt;
        {% endfor %}

      {% else %} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>CBV are good when you need inheritance or need to deal with different HTTP methods to have the same route. If that is not the case, a FBV is a better choice. That being said, for what you are trying to do, you should just a <code>FormView</code> that will handle everything about a post and forms.</p>
<p>Something like:</p>
<pre><code>class BookViewSet(FormView):
form = CommentForm
template_name = 'catalog/book_detail.html'

def form_valid(self, form):
    self.send_mail(form.cleaned_data)
    return super(BookViewSet, self).form_valid(form)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are handling forms, you should be using CreateView or FormView not DetailView. Here is an implementation example, as you can see is a little complex for someone new to Django:</p>
<pre><code>from django.views.generic import CreateView


class BookDetailView(NeverCacheMixin, CreateView):
    form_class = CommentForm
    template_name = 'catalog/book_detail.html'

    def dispatch(self, request, *args, **kwargs):
        book_slug = self.kwargs.get('slug')  # url variables are stored in self.kwargs
        self.book = get_object_or_404(Book, slug=book_slug)  # attach book to your view
        return super().dispatch(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        # context data passed to template
        kwargs['book'] = self.book
        kwargs['most_recent'] = Book.objects.order_by('-timestamp')[:3]

        if request.user.is_anonymous:
            user_membership = None
        else:
            try:
                user_membership = Customer.objects.get(user=self.request.user)
            except Customer.DoesNotExist:
                user_membership = None
        kwargs['user_membership'] = user_membership
        return super().get_context_data(**kwargs)

    def form_valid(self, form):
        instance = form.save(commit=False)
        instance.user = self.request.user
        instance.post = self.book
        instance.save()
        return redirect(self.book.get_absolute_url())
</code></pre>
</div>
<span class="comment-copy">Class based views are not always better that function based views. If you understand how the function based view works, then it might be better to stick with that rather than switching to a class based view.</span>
<span class="comment-copy">If you are handling forms, you should be using CreateView or FormView not DetailView</span>
<span class="comment-copy">i updated my post.. thanks</span>
<span class="comment-copy">uhm, should i just delete my detailview and paste this instead?</span>
<span class="comment-copy">i've tried this and i got no reverse error.. can you help me more?</span>
<span class="comment-copy">@GiranyxPornasdoro it's probably this line of code <code>return redirect(reverse("book-detail", kwargs={ 'id': self.book.pk }))</code> check that the url name and kwargs are correct.</span>
<span class="comment-copy">updated my post. im using slug just like from the tutorial that i watch.</span>
<span class="comment-copy">Just use the method <code>get_absolute_url()</code> to get the book url. I updated the answer</span>
<span class="comment-copy">im sorry for much question. but there's new error.. No Book matches the given query.</span>
