<div class="post-text" itemprop="text">
<p>I have a dataframe where one column consists of strings that have three patterns: </p>
<p>1) Upper case letters only: <code>APPLE COMPANY</code></p>
<p>2) Upper case letters and ends with the letters AS: <code>CAR COMPANY AS</code></p>
<p>3) Upper and lower case letters: <code>John Smith</code> </p>
<pre><code>df = pd.DataFrame({'NAME': ['APPLE COMPANY', 'CAR COMPANY AS', 'John Smith']})

             NAME ...
0   APPLE COMPANY ...
1  CAR COMPANY AS ...
2      John Smith ...
3             ... ...
</code></pre>
<p>How can I take out those rows that do not meet the conditions of 2) and 3), i.e. 1)? In other words, how can I take out rows that only have UPPER case letters, does not end with <code>AS</code> or have both UPPER and LOWER letters in the string?</p>
<p>I came up with this:</p>
<pre><code>df['NAME'].str.findall(r"(^[A-Z ':]+$)")
df['NAME'].str.findall('AS')
</code></pre>
<p>The first one extract strings with only upper letters, but second one only finds <code>AS</code>. If there are other methods than regex than I happy to try that as well.</p>
<p>Expected outcome is:</p>
<pre><code>             NAME ...
1  CAR COMPANY AS ...
2      John Smith ...
3             ... ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also you can try:</p>
<pre><code>df_new = df[~df['NAME'].str.isupper()|df['NAME'].str.endswith('AS')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>one way would be,</p>
<pre><code>df['temp']=df['NAME'].str.extract("(^[A-Z ':]+$)")
s1=df['temp']==df["NAME"]
s2=~df['NAME'].str.endswith('AS')

print(df.loc[~(s1&amp;s2), 'NAME'])
</code></pre>
<p>O/P:</p>
<pre><code>1    CAR COMPANY AS
2        John Smith
Name: NAME, dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This regex should work:</p>
<pre><code>^(?:[A-Z ':]+ AS|.*[a-z].*)$
</code></pre>
<p>It matches either one of these:</p>
<ul>
<li><code>[A-Z ':]+ AS</code> - The case of all uppercase letters followed by AS</li>
<li><code>.*[a-z].*</code> - The case of lowercase letters</li>
</ul>
<h3><a href="https://regex101.com/r/CuvHaD/1" rel="nofollow noreferrer">Demo</a></h3>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>apply</code> and different patterns that you may want to check:</p>
<pre><code>import re
def myfilter(x):
    patterns = ['[A-Z]*AS$','[A-Z][a-z]{1,}']
    for p in patterns:
        if len(re.findall(p, x.NAME)):
            return True
    return False

selector = df.apply(myfilter, axis=1)

filtered_df = df[selector]

</code></pre>
</div>
<span class="comment-copy">Your answer is best :), for pandas based solution <code>df['NAME'] = df['NAME'].str.extract("(^(?:[A-Z ':]+ AS|.*[a-z].*)$)")</code></span>
