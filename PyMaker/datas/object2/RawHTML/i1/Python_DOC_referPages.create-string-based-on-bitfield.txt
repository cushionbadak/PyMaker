<div class="post-text" itemprop="text">
<p>I am using a 5-bit bitfield to track status of an alarm system in a python script. For example, 0 in the MSB indicates "Not Armed", while 1 in the MSB indicates "Armed", etc.  This enables XOR on the previous state and current state to yield quickly which bits have changed:</p>
<pre><code>previous = 0b11001
current =  0b10011
delta = current ^ previous   # delta = 0b01010
</code></pre>
<p>The next step in my code is to generate a string that describes what changed, based on <code>delta</code>. There are 10 possible states with descriptions. I'm wondering about the best way to create this string. What I have below works, but seems clunky:</p>
<pre><code>statusKey = {
         0: ' * Disarmed',
        10: ' * No Alarm',
        20: ' * No Fire',
        30: ' * No Check',
        40: ' * No AC',
         1: ' * Armed',
        11: ' * Alarm',
        21: ' * Fire',
        31: ' * Check',
        41: ' * AC'
         }

alert = ''
for i in range (5):
    if (0b10000 &amp; (delta &lt;&lt; i)):
         alert = ''.join((alert,statusKey[(10*i) + (0b01 &amp; (current &gt;&gt; (4-i)))]))

#alert = 'No Alarm * Check'
</code></pre>
<p>Is there a better way to structure the data in <code>statusKey</code> ? 
And is there a better way to generate the <code>alert</code> string based on that structure?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try to use as little bitwise math operators as possible because it makes your code very unreadable. A simple list comprehension is all you really need. Also, you want your bit status data structure to be <em>self-descriptive</em>. Someone reading it for the first time should immediately understand the logic.</p>
<pre><code>bit_status = {
    0: ("Disarmed", "Armed"),
    1: ("No Alarm", "Alarm"),
    2: ("No Fire", "Fire"),
    3: ("No Check", "Check"),
    4: ("No AC", "AC")
}

previous = 0b11001
current =  0b10011

current_bits = [current &gt;&gt; i &amp; 1 for i in reversed(range(5))]
delta_bits = [(current ^ previous) &gt;&gt; i &amp; 1 for i in reversed(range(5))]

status = [bit_status[index][current_bits[index]] 
    for index, delta_bit in enumerate(delta_bits) if delta_bit == 1]

print(" * ".join(status))
# No Alarm * Check
</code></pre>
</div>
<span class="comment-copy">you could use <code>numpy.bitwise_and</code> over a column but it's a little excessive for so little data.  Your method isn't terrible.</span>
<span class="comment-copy">@stevedc this question might be better suited for <a href="https://codereview.stackexchange.com">Code Review</a> if you want to ask over there.</span>
