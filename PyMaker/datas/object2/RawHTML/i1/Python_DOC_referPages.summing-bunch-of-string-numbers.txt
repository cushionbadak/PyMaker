<div class="post-text" itemprop="text">
<p>I have a file which has bunch of numbers(35463) in it. I want to find the sum of all the numbers, but all the numbers are defined as strings.
I know that strings can be turned into an number by float() but as it has 35463 strings, it will be so much work to turn all the strings to numbers, each by each.
I wrote this so far:</p>
<pre><code>def main():
    with open ("file", "r") as myfile:
        data = myfile.read().splitlines()

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your file just has a number on each line, e.g. </p>
<pre><code>0.7506097252963208
0.9176088653062778
0.6762574457637649
0.9782545470065891
...
</code></pre>
<p>You can loop through the lines of the file by looping over the open file object.  Here I use <code>map</code> to apply <code>float</code> to every line of the file</p>
<pre><code>with open('filename') as f:
    result = sum(map(float, f))
</code></pre>
<p>I tried with 350000 entries and it took about 145 milliseconds (on a not very good computer).</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's say you have create a file of numbers like this:</p>
<pre class="lang-sh prettyprint-override"><code>echo "1234\n2545353\n123245\n3254657687\n8976857463\n" &gt;&gt; numbers.txt
</code></pre>
<p>looks like this:</p>
<pre class="lang-sh prettyprint-override"><code>cat numbers.txt                                                                             
1234
2545353
123245
3254657687
8976857463
</code></pre>
<p>one possible solution:</p>
<pre class="lang-py prettyprint-override"><code># read the lines and trim them
lines = list(map(str.strip, open('numbers.txt').readlines()))
# ['1234', '2545353', '123245', '3254657687', '8976857463', '']

# remove line ending, empty lines
lines = list(filter(lambda item: len(item), nums))
# ['1234', '2545353', '123245', '3254657687', '8976857463']

# convert to numbers
nums = list(map(float, lines))
# [1234.0, 2545353.0, 123245.0, 3254657687.0, 8976857463.0]

# and now we simply sum 'em
total = sum(nums)
# 12234184982.0
</code></pre>
</div>
<span class="comment-copy">You cant add strings like numbers, you have to convert them or write your own custom string adding function</span>
<span class="comment-copy"><i>"it will be so much work to turn all the strings to numbers"</i> I assure you the computer will finish it in a flash.</span>
<span class="comment-copy">yes. Is there any way I can convert all the strings in one function and then sum all of them?</span>
<span class="comment-copy">Are your files in a DataFrame format?</span>
<span class="comment-copy">I meant, if i tried to convert all the strings to numbers by writing single codes like a = float(file[0]), b = float(file[1])... it would be a hard work to do, because there are so many strings. And I wanted to know if there was any code that could do all the work</span>
<span class="comment-copy">Oh yes that is what I was trying to say. And it worked, thank you so much.</span>
<span class="comment-copy">It works thank you so much</span>
