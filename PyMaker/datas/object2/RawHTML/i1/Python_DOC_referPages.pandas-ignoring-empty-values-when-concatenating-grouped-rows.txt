<div class="post-text" itemprop="text">
<p>I'm trying to group a dataframe based on a column value, and I want to concatenate (join) the values in the other columns.</p>
<p>I'm doing something like - </p>
<pre><code>df_combined = df_combined.groupby('UC').agg({'LO Number': ', '.join,
                                             'K Code': ', '.join})
</code></pre>
<p>But, this gives me some <code>nan</code> values where the <code>K Code</code> columns has no values. So the result looks like</p>
<pre><code>K Code

K0016, K0068, nan, nan, A0046

nan, nan, nan
</code></pre>
<p>How can I get rid of these nan values in the <code>K Code</code> column? Also, is there a way to get a third column that has the number of values present in <code>K Code</code> column. For eg. for the above, </p>
<pre><code>Count

3   

0
</code></pre>
<p>Edit: Sample Data - </p>
<pre><code>UC      LO Number      K Code
C001     C001.1        K0068
C001     C001.2        K0372
C002     C002.1        
C002     C002.3        K0032
C002     C002.5          
</code></pre>
<p>Thanks! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using <code>lambda</code> with <code>agg</code>, however this will create the multiple index </p>
<p>Since you nan is <code>nan</code> do replace before run below </p>
<pre><code>df=df.replace({'nan':np.nan})


df_combined.groupby('UC').agg({'LO Number': ', '.join,
                                             'K Code': [lambda x : ', '.join(y for y in x if y==y),'count']})
</code></pre>
<p>If you do not want the multiple index</p>
<pre><code>df_combined.assign(count=df_combined['K Code']).
         groupby('UC').agg({'LO Number': ', '.join,
                           'K Code': lambda x : ', '.join(y for y in x if y==y),
                            'count':'count'})
</code></pre>
</div>
<span class="comment-copy">Would you like show us your sample data ?</span>
<span class="comment-copy">my output still shows <code>nan</code> values. :(</span>
<span class="comment-copy">@harry04 make sure your nan is np.nan not “nan” which is string</span>
<span class="comment-copy">I think it's "nan" and not np.nan (which is displayed as NaN if I'm not wrong).</span>
<span class="comment-copy">@harry04 adding this before my code df = df. replace({‘nan’:np.nan})</span>
<span class="comment-copy">thanks! :) That worked well!</span>
