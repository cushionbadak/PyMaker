<div class="post-text" itemprop="text">
<p>I am trying to construct regular expression for the bellow path.Can you help me to construct regex for it?</p>
<pre><code>path  = "root-dir/document/2018/02/29/14/02-sample.txt"
pattern = '((a-z)+(-)(a-z)+/(a-z)+/(\d{4})/(\d{2})/(\d{2})/(\d{2})/(\d{2)(-)(a-z)+(.)(a-z)+)'
bool(re.match(pattern,path))

"root-dir/document/2015/01/25/13/01-sample.txt" //this should be accepted
"root-dir/2015/01/25/13/01-sample.txt" //this should not be accepted
"root-dir/document/201/01/25/13/01-sample.txt" //this should not be accepted as 201 part should be 4 digit
"root-dir/document/2015/01/2/13/01-sample.txt" //this should be not accepted as 2 part should be 2 digit
"root-dir/document/2015/01/25/13/sample.txt" //this should not be accepted as the last part should be something like this 03-sample.txt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are few problems with your pattern, correct usage is:</p>
<pre><code>import re
pattern = r'([a-z]+(-)[a-z]+/[a-z]+/(\d{4})/(\d{2})/(\d{2})/(\d{2})/(\d{2})(-)[a-z]+(\.)[a-z]+)'
print(bool(re.match(pattern,path))) #True
</code></pre>
<p>Your pattern <code>'((a-z)+(-)(a-z)+/(a-z)+/(\d{4})/(\d{2})/(\d{2})/(\d{2})/(\d{2)(-)(a-z)+(.)(a-z)+)'</code> do not work because:</p>
<ul>
<li><code>\d{2)</code> - you should close <code>{</code> with <code>}</code> not <code>)</code></li>
<li><code>a-z</code> - this is equivalent to any lowercase letter inside and only inside <code>[</code> <code>]</code> not <code>(</code> <code>)</code></li>
<li><code>.</code> - you should use <code>\.</code> if you mean character <code>.</code> (ASCII: 46) as in <code>re</code> it means any character which is not newline, also remember to use raw-string rather than common string</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you only need to see if that path is valid in the sense that you want to know if it exists, then just use:</p>
<pre><code>import os

os.path.exists(path) # return true if the path exists
</code></pre>
</div>
<span class="comment-copy">What are the variations possible in path and which one you would want to match and which ones you want to reject?</span>
<span class="comment-copy">Seems you are wanting to get separate path between '/'?</span>
<span class="comment-copy">Provide some examples of paths you want to reject.</span>
<span class="comment-copy">You should add context, and more examples of what is accepted and what not.</span>
<span class="comment-copy">Instead of using regexes for that, Python 3's <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> standard module is a better and the recommended option.</span>
