<div class="post-text" itemprop="text">
<p>I want to understand how to <code>@patch</code> a function from an imported module.</p>
<p>This is where I am so far.</p>
<p><strong>app/mocking.py:</strong></p>
<pre><code>from app.my_module import get_user_name

def test_method():
  return get_user_name()

if __name__ == "__main__":
  print "Starting Program..."
  test_method()
</code></pre>
<p><strong>app/my_module/__init__.py:</strong></p>
<pre><code>def get_user_name():
  return "Unmocked User"
</code></pre>
<p><strong>test/mock-test.py:</strong></p>
<pre><code>import unittest
from app.mocking import test_method 

def mock_get_user():
  return "Mocked This Silly"

@patch('app.my_module.get_user_name')
class MockingTestTestCase(unittest.TestCase):

  def test_mock_stubs(self, mock_method):
    mock_method.return_value = 'Mocked This Silly')
    ret = test_method()
    self.assertEqual(ret, 'Mocked This Silly')

if __name__ == '__main__':
  unittest.main()
</code></pre>
<p>This does <strong>not</strong> work as I would expect. The "patched" module simply returns the unmocked value of <code>get_user_name</code>. How do I mock methods from other packages that I am importing into a namespace under test?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are using the <code>patch</code> decorator from the <code>unittest.mock</code> package you are <strong>not</strong> patching the namespace the module is imported from (in this case <code>app.my_module.get_user_name</code>) you are patching it in the namespace under test <code>app.mocking.get_user_name</code>.</p>
<p>To do the above with <code>Mock</code> try something like the below: </p>
<pre><code>from mock import patch
from app.mocking import test_method 

class MockingTestTestCase(unittest.TestCase):

    @patch('app.mocking.get_user_name')
    def test_mock_stubs(self, test_patch):
        test_patch.return_value = 'Mocked This Silly'
        ret = test_method()
        self.assertEqual(ret, 'Mocked This Silly')
</code></pre>
<p>The standard library documentation includes a useful <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="noreferrer">section</a> describing this.</p>
</div>
<div class="post-text" itemprop="text">
<p>While Matti John's answer solves your issue (and helped me too, thanks!), I would, however, suggest localizing the replacement of the original 'get_user_name' function with the mocked one. This will allow you to control when the function is replaced and when it isn't. Also, this will allow you to make several replacements in the same test. In order to do so, use the 'with' statment in a pretty simillar manner:</p>
<pre><code>from mock import patch

class MockingTestTestCase(unittest.TestCase):

    def test_mock_stubs(self):
        with patch('app.mocking.get_user_name', return_value = 'Mocked This Silly'):
            ret = test_method()
            self.assertEqual(ret, 'Mocked This Silly')
</code></pre>
</div>
<span class="comment-copy">The question is about "mocking best practices" or whether or not what you are doing makes sense? Regarding the first I'd say to use a mocking library such as <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow noreferrer"><code>Mock</code></a>, which is included in python3.3+ as <a href="http://docs.python.org/dev/library/unittest.mock" rel="nofollow noreferrer"><code>unittest.mock</code></a>.</span>
<span class="comment-copy">I am asking if I am going about this right. I looked at Mock, but I don't see a way to solve this particular problem. Is there a way to recreate what I did above in Mock?</span>
<span class="comment-copy">this gets to my problem. <code>get_user_name</code> is in a different module than <code>test_method</code>. Is there a way to mock something in a sub_module? I fixed it in an ugly way below.</span>
<span class="comment-copy">It doesn't matter that <code>get_user_name</code> is in a different module than <code>test_method</code> since you are importing the function into <code>app.mocking</code> they are in the same namespace.</span>
<span class="comment-copy">got ya. Yeah that works thanks!</span>
<span class="comment-copy">Where did test_patch come from, what is it exactly?</span>
<span class="comment-copy">test_patch is passed in by the patch decorator and is the mocked get_user_name object (i.e. an instance of the MagicMock class). It might be clearer if it was named something like <code>get_user_name_patch</code>.</span>
<span class="comment-copy">This is sort of immaterial to the posed question. Whether you use <code>patch</code> as a decorator or context manager is specific to the use case.  For instance you can use <code>patch</code> as a decorator to mock a value for all tests in an <code>xunit</code> or <code>pytest</code> class while in other cases its useful to have the fine grained control afforded by the context manager.</span>
