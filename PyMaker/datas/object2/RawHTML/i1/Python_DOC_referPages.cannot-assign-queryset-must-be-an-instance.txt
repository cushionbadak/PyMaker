<div class="post-text" itemprop="text">
<p>I am getting this value error: <br/></p>
<blockquote>
<p>ValueError at /shop/items/buy/now/
  Cannot assign "QuerySet Product: mcloth2, Product: watch, Product: Watch": <br/>"Buyer.product" must be a "Product" instance.<br/>
  Request Method: POST
  Request URL:    <a href="http://127.0.0.1:8004/shop/items/buy/now/" rel="nofollow noreferrer">http://127.0.0.1:8004/shop/items/buy/now/</a>
  Django Version: 2.1.5
  Exception Type: ValueError
  Exception Value:<br/>
  Cannot assign ", , ]&gt;": "Buyer.product" must be a "Product" instance.</p>
</blockquote>
<p>buyer.product = product </p>
<blockquote>
<p>views.py</p>
</blockquote>
<pre><code>    def items_buy_now(request):
    if not request.user.is_authenticated:
        messages.info(request, 'You have to logged in first.')
        return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path))
    sess = request.session.get("data", {"items": []})
    product = Product.objects.filter(active=True, slug__in=sess["items"])
    if request.method == "POST":
        form = BuyerDeliveryForm(request.POST)
        if form.is_valid():
            buyer = form.save(commit=False)
            buyer.product = product
            buyer.save()
            return redirect('shop:payment')
    else:
        form = BuyerDeliveryForm()
    return render(request, 'shop/delivery_form.html', {'form': form})



def cart(request,slug):
    product = Product.objects.get(slug=slug)
    initial = {"items":[],"price":0.0,"count":0}
    session = request.session.get('data',initial)
    if slug in session['items']:
        messages.error(request,'Already added.')
    else:
        session["items"].append(slug)
        session["price"] += float(product.price)
        if product.shipping_fee:
            session['price'] += float(product.shipping_fee)
        session["count"] += 1
        request.session["data"] = session
        messages.success(request,'Added to Cart.')
    return redirect('shop:detail',slug)


def mycart(request):
    sess = request.session.get("data", {"items": []})
    products = Product.objects.filter(active=True, slug__in=sess["items"])
    if not products:
        return render(request,'shop/empty_cart.html')
    context = {"products": products,
               "categories": categories}
    return render(request,'shop/cart_item.html',context)
</code></pre>
<blockquote>
<p>models.py</p>
</blockquote>
<pre><code>class Buyer(models.Model):
full_name = models.CharField(max_length=250)
phone = models.CharField(max_length=20)
city = models.CharField(max_length=250,choices=city_choices)
address = models.CharField(max_length=250,default="123Area , House#123 , Street#123")
product = models.ForeignKey(Product,on_delete=CASCADE)

def __str__(self):
    return self.full_name




class Product(models.Model):
name = models.CharField(max_length=250)
image = models.ImageField(upload_to='products')
seller = models.ForeignKey(User,on_delete=CASCADE)
slug = AutoSlugField(populate_from='name')
category = models.ForeignKey(Category,on_delete=CASCADE)
description = models.TextField(blank=True,default="Description Field")
brand = models.CharField(max_length=250)
quantity = models.PositiveIntegerField(default=1)
price = models.DecimalField(max_digits=10,default=0.0,decimal_places=2)
shipping_fee = models.DecimalField(max_digits=10,default=0.0,decimal_places=2)
featured = models.BooleanField(default=False)
active = models.BooleanField(default=True)
created = models.DateTimeField(auto_now_add=True)
modified = models.DateTimeField(auto_now=True)

def __str__(self):
    return self.name
</code></pre>
<blockquote>
<p>forms.py</p>
</blockquote>
<pre><code>    class SellProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name','image','category', 'description', 'brand', 'quantity', 'price', 'shipping_fee']


class BuyerDeliveryForm(forms.ModelForm):
    class Meta:
        model = Buyer
        fields = ['full_name','phone','city','address']
</code></pre>
<blockquote>
<p>urls.py`</p>
</blockquote>
<pre><code>  path('items/buy/now/',views.items_buy_now,name='items_buy_now'),
  path('mycart/', views.mycart, name='mycart'),
  path('&lt;slug&gt;/cart/', views.cart, name='cart'),
</code></pre>
<p>`</p>
<blockquote>
<p>templates</p>
</blockquote>
<pre><code> {% extends "shop/base.html" %}
{% load bootstrap4 %}
&lt;title&gt;{% block title %}Cart Items{% endblock  %}&lt;/title&gt;

{% block content %}
&lt;center&gt;
  {% bootstrap_messages %}
        {% for item in products %}
       &lt;div class="col-lg-4 col-md-4 mb-4"&gt;
              &lt;div class="card h-50"&gt;
                &lt;div class="card-body"&gt;
                    &lt;a href="{% url 'shop:detail' item.slug %}"&gt;&lt;img src="/media/{{ item.image }}" width=200 height="100" alt=""&gt;&lt;/a&gt;
                    &lt;div class="card-body"&gt;
                      &lt;h4 class="card-title"&gt;
                        &lt;a href="{% url 'shop:detail' item.slug %}"&gt;{{ item.name|title }}&lt;/a&gt;
                      &lt;/h4&gt;
                      &lt;h5&gt;Rs. {{ item.price|floatformat:"2" }}&lt;/h5&gt;
                        &lt;h5&gt;Shipping fee:{{item.shipping_fee}}&lt;/h5&gt;
                    &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
     {% endfor %}
          &lt;b&gt;Items({{request.session.data.items|length}})&lt;/b&gt;&lt;br&gt;
              {% for item in products %}
             {{item.name}}: Rs.{{item.price}}
              &lt;br&gt;
              {% endfor %}
          &lt;br&gt;
              &lt;h5&gt;Shipping Fee:&lt;/h5&gt;
             {% for item in products %}
              {{item.name}}: Rs{{item.shipping_fee }} &lt;br&gt;
              {% endfor %}
              &lt;br&gt;
              &lt;h5&gt;Total Price:&lt;b style="color:blue;"&gt;Rs
              {{request.session.data.price}}&lt;/b&gt;&lt;/h5&gt;
               &lt;a class="btn btn-success" href="{% url 'shop:items_buy_now' %}"&gt;PROCEED TO CHECKOUT&lt;/a&gt;



              &lt;br&gt;&lt;br&gt;

      &lt;/div&gt;



    &lt;/center&gt;
{% endblock %}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>filter returns multiple objects, you will have to choose one.</p>
<pre><code>product = Product.objects.filter(active=True, slug__in=sess["items"])
if request.method == "POST":
   buyer.product = product.first()
</code></pre></li>
<li><p>You can use get method in such cases.</p>
<pre><code>product = Product.objects.get(active=True, slug__in=sess["items"])
</code></pre></li>
</ol>
<p>for more <a href="https://stackoverflow.com/questions/3221938/difference-between-djangos-filter-and-get-methods?noredirect=1&amp;lq=1">Difference between Django's filter() and get() methods</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Basically Django's ORM is expecting an object not just a key or queryset.</p>
<p><strong>Note:</strong> That you must save an object before it can be assigned to a foreign key relationship</p>
<p>try this</p>
<p>in views.py</p>
<pre><code>def items_buy_now(request):
    if not request.user.is_authenticated:
        messages.info(request, 'You have to logged in first.')
        return redirect('%s?next=%s' % (settings.LOGIN_URL, request.path))
    sess = request.session.get("data", {"items": []})
    product = Product.objects.filter(active=True, slug__in=sess["items"])
    if request.method == "POST":
        form = BuyerDeliveryForm(request.POST)
        if form.is_valid():
            buyer = form.save(commit=False)
            buyer.product = Product.objects.get(active=True, slug=sess["items"])
            buyer.save()
            return redirect('shop:payment')
    else:
        form = BuyerDeliveryForm()
    return render(request, 'shop/delivery_form.html', {'form': form})
</code></pre>
<p>for more details refer <a href="https://docs.djangoproject.com/en/2.1/topics/db/examples/many_to_one/#many-to-one-relationships" rel="nofollow noreferrer">this</a></p>
</div>
<span class="comment-copy">Exception Type:	MultipleObjectsReturned Exception Value:	 get() returned more than one Product -- it returned 2!  I got this exception while using get method</span>
<span class="comment-copy">@Peter, In that case, use filter. get is used for a unique object.</span>
