<div class="post-text" itemprop="text">
<p>Could anyone recommend some improvements to the following script such that if the Application.exe file fails, the script ends rather than just becoming hanging indefinitely?</p>
<pre><code>application = r'.\Application.exe'
input_params = '-i Input_1 -j Input_2

process = (application,input_params)
p = subprocess.Popen(" ".join(process),shell= True, stderr=subprocess.STDOUT, stdout = subprocess.PIPE)
p.communicate()
</code></pre>
<p>When the application file failed there was no exception thrown, is it possible to have subprocess throw one in such an event?</p>
<hr/>
<p>Edit: Implemented the p.returncode statement.</p>
<p>To revise my original question, when the Application.exe program fails it displays the following window</p>
<p><a href="https://i.stack.imgur.com/AWaKA.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/AWaKA.png"/></a></p>
<p>It is only after I close this window does the program proceed (eg: p.returncode will return the value 255).</p>
<p>Is there a way to either have this window not be displayed or automatically closed or have the program proceed despite having this window displayed?</p>
<p>Regards</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/24849998/how-to-catch-exception-output-from-python-subprocess-check-output">How to catch exception output from Python subprocess.check_output()?</a></p>
<pre><code>try:
    subprocess.check_output(...)
except subprocess.CalledProcessError as e:
    print e.output
</code></pre>
<pre><code>from subprocess import Popen, PIPE

p = Popen(['bitcoin', 'sendtoaddress', ..], stdout=PIPE, stderr=PIPE)
output, error = p.communicate()
if p.returncode != 0: 
   print("bitcoin failed %d %s %s" % (p.returncode, output, error))
</code></pre>
</div>
<span class="comment-copy">Thanks for the link! I implemented the changes and will need to make some changes to my original post.</span>
