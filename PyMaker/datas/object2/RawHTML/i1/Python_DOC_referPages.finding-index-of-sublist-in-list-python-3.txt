<div class="post-text" itemprop="text">
<p>I have a list, which is initially empty, but the user appends sublists into the list. </p>
<p>I then need to search for the index of the specific sublist, using the first 2 elements of the sublist. this works if the first two elements are the only two elements but not when the user has appended more details into the sublist. </p>
<p>I need a way to search for the index of the sublist using only the first two elements. Any ideas? </p>
<pre><code>database=[] 
fn=input("Enter the students first name:")
sn=input("Please enter the students surname:")

rr=(any(fn and sn in i for i in database))        

if rr==True:
 print("true")
 pos=(database.index([fn, sn]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to find specific sublist to give it to <code>index</code> function for example by modifying checker to return sublist</p>
<pre><code>for sublist in database:
  if fn in sublist and sn in sublist:
    index_sublist = sublist
    break
</code></pre>
<p>then search index by found sublist</p>
<pre><code>pos = (database.index(index_sublist))
</code></pre>
<p>by the way check this</p>
<pre><code>fn and sn in i for i in database
</code></pre>
<p>in that case you check if fn exists and sn is in i. Try</p>
<pre><code>fn in i and sn in i for i in database
</code></pre>
<p>furthermore there are more time efficient ways to store your task values for example in dict that have <code>tuple(sublist[:2])</code> as a keys and sublists as values </p>
</div>
<div class="post-text" itemprop="text">
<p>switch:</p>
<pre><code>pos=(database.index([fn, sn]))
</code></pre>
<p>with this:</p>
<pre><code>pos=[i for i in range(len(database)) if database[i][0]==sn and database[i][1]==fn]
</code></pre>
<p>This returns positions of all sublists in the list for which the first item is <code>fn</code> and the second item is <code>sn</code></p>
</div>
<span class="comment-copy">Please give input and expected output.</span>
<span class="comment-copy">I suggest using namedtuples or dictionaries to store this kind of data. Lists are going to be hard to handle because they're not the right data structure for contents intended for random (rather than sequential/iterative) access.</span>
