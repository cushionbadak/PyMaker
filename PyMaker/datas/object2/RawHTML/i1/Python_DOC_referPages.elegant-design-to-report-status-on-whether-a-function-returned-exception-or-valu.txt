<div class="post-text" itemprop="text">
<p>I have this code structure:</p>
<pre><code>#########file1.py#############

def newsCSVwriter(fileName): 

    try:
        newsCleaner(fileName)

    except Exception as e:
        print "Exception: ", e
########file1.py#############
def newsCleaner(newsFile):
....
#########file2.py###########
try:
    df1['newsFile'].apply(newsCSVwriter)
except Exception as e:
    print "exception:",e
</code></pre>
<p>I want to write a csv that has a <code>status</code> column value of <code>yes</code> or <code>no</code> depending on whether <code>newsCleaner(fileName)</code> returns a value or exception. Should I implement the logic in <code>file1</code> or <code>file2</code>? Also, an example will be great. </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you don't actually need the returned value, in your newCSVWriter function do this:</p>
<pre><code>try:
    newsCleaner(fileName)
except:
    return 'no'
else:
    return 'yes'
</code></pre>
<p>How you structure your code in terms of files is dependant on what all of it does, but you've only posted part of it.</p>
<p>Stylistically I would rename them to something more informative than 'file1' and 'file2'. I would also have the function return a bool (True or False) instead, but that's up to you.</p>
</div>
<span class="comment-copy">I'd like to return both the exception and the <code>no</code></span>
<span class="comment-copy">You can return both together as a tuple e.g. <code>except Exception, e:     return e, 'no' else:     return None, 'yes' </code> You need to return the None so that you can unpack the tuple properly. However, since you want asked about design decisions, remove the try..except..else block from inside newCSVWriter and add the 'else' clause to the try block in your file2.</span>
