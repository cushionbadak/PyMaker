<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5228158/cartesian-product-of-a-dictionary-of-lists">Cartesian product of a dictionary of lists</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I'm sorry if it's a duplicate of another question. I've looked for it but couldn't find anything close to this one.</p>
<p>I need to convert a dictionary :</p>
<pre><code>{'id': ['001', '002', '003'], 'tag1': ['val1']}
</code></pre>
<p>to a list of dictionaries:</p>
<pre><code>[{'id': '001', 'tag1': 'val1'}, {'id': '002', 'tag1': 'val1'}, {'id': '003', 'tag1': 'val1'}]
</code></pre>
<p>Note that this dictionary is taken as an example and I can't assume the number nor the name of keys inside the dictionary.</p>
<p>I already solved my problem using this code:</p>
<pre><code>pfilter = dict()
pfilter["id"] = ["001", "002", "003"]
pfilter["tag1"] = ["val1"]
print(pfilter)

all_values = list(itertools.product(*pfilter.values()))
all_keys = [pfilter.keys()]*len(all_values)
all_dict = [zip(keys, values) for keys, values in zip(all_keys, all_values)]
all_dict = [{k:v for k, v in item} for item in all_dict]
print(all_dict)
</code></pre>
<p>I can have more than 2 keys and I don't know their names in advance.</p>
<p>I am looking for a more elegant way of solving this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Building on the answer of my brother you could to a generic solution this way:</p>
<pre><code>from itertools import product

d = {'id': ['001', '002', '003'], 'tag1': ['val1'], 'other_key': ['o1','o2']}
all_dict = [dict([(k,v) for k,v in zip(d.keys(), item)]) for item in product(*d.values()) ]

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: This only answers OPs original wording of the question. </p>
<p>Product is your friend:</p>
<pre><code>from itertools import product

d = {'id': ['001', '002', '003'], 'tag1': ['val1']}
[ {'id':id, 'tag1': tag1 } for id,tag1 in product(d['id'],d['tag1']) ]
</code></pre>
</div>
<span class="comment-copy">Thanks, It does the jobs !  But we could replace <code>[d[key] for key in d.keys()]</code> by <code>d.values()</code></span>
<span class="comment-copy">Actually, it does not do the jobs because: with this dictionnary :  <code>d = {'id': ['001', '002', '003'], 'tag1': ['val1']}</code>   your function return: <code>[[{'id': '001'}, {'tag1': 'val1'}], [{'id': '002'}, {'tag1': 'val1'}], [{'id': '003'}, {'tag1': 'val1'}]]</code>  and it's not the outcome I need.</span>
<span class="comment-copy">@ThomasJalabert I have updated the code so that it produces the correct output.</span>
<span class="comment-copy">Thanks but this work only with 2 known keys, and I don't have this information. I will update my question accordingly</span>
