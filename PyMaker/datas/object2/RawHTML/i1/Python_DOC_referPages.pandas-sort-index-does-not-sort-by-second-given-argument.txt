<div class="post-text" itemprop="text">
<p>Here is a MWE:</p>
<pre><code>import pandas as pd

pd.np.random.seed(0)
(
    pd.DataFrame(pd.np.random.rand(10, 5), columns=['a', 'b', 'c', 'd', 'e'])
    .assign(b=lambda df: (df.b*10).astype(int))
    .set_index(['a', 'b', 'c'])
    .sort_index(axis=0, level=['b', 'a'])
)

Out[96]: 
                            d         e
a        b c                           
0.087129 0 0.832620  0.778157  0.870012
0.639921 1 0.944669  0.521848  0.414662
0.670638 2 0.128926  0.315428  0.363711
0.359508 4 0.697631  0.060225  0.666767
0.645894 4 0.891773  0.963663  0.383442
0.791725 5 0.568045  0.925597  0.071036
0.617635 6 0.616934  0.943748  0.681820
0.264556 7 0.456150  0.568434  0.018790
0.978618 7 0.461479  0.780529  0.118274
0.548814 7 0.602763  0.544883  0.423655
</code></pre>
<p>I don't understand why the <code>a</code> index is not sorted (see the <code>b=7</code> rows).</p>
<p>Expected results (but not acceptable solution):</p>
<pre><code>pd.np.random.seed(0)
(
    pd.DataFrame(pd.np.random.rand(10, 5), columns=['a', 'b', 'c', 'd', 'e'])
    .assign(b=lambda df: (df.b*10).astype(int))
    .sort_values(['b', 'a'])
    .set_index(['a', 'b', 'c'])
)

Out[104]: 
                            d         e
a        b c                           
0.087129 0 0.832620  0.778157  0.870012
0.639921 1 0.944669  0.521848  0.414662
0.670638 2 0.128926  0.315428  0.363711
0.359508 4 0.697631  0.060225  0.666767
0.645894 4 0.891773  0.963663  0.383442
0.791725 5 0.568045  0.925597  0.071036
0.617635 6 0.616934  0.943748  0.681820
0.264556 7 0.456150  0.568434  0.018790
0.548814 7 0.602763  0.544883  0.423655
0.978618 7 0.461479  0.780529  0.118274
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When setting your multi-index you need to provide <code>b</code> as the first level of your index:</p>
<pre><code>...
.set_index(['b', 'a', 'c'])
...
</code></pre>
<p>Output:</p>
<pre><code>                            d           e
b   a           c       
0   0.087129    0.832620    0.778157    0.870012
1   0.639921    0.944669    0.521848    0.414662
2   0.670638    0.128926    0.315428    0.363711
4   0.359508    0.697631    0.060225    0.666767
    0.645894    0.891773    0.963663    0.383442
5   0.791725    0.568045    0.925597    0.071036
6   0.617635    0.616934    0.943748    0.681820
7   0.264556    0.456150    0.568434    0.018790
    0.548814    0.602763    0.544883    0.423655
    0.978618    0.461479    0.780529    0.118274
</code></pre>
<p>Multi-index in pandas works as a nested structure of indexes: rows are grouped first by the 1st-level index, then the 2nd-level etc.</p>
<p>So, when you provide <code>a</code> as your first level it tries to find other rows that have the same value (e.g. <code>0.264556</code>) in the same index level. Since, your <code>a</code>-values seem to be unique in general, each group has just one member eventually, which means there's nothing to sort in each group.</p>
</div>
<span class="comment-copy">I noticed there were something with the order of the columns in index, but why is it so? Is it a bug?</span>
<span class="comment-copy">I have now added an explanation for that in my reply.</span>
<span class="comment-copy">but still <code>b</code> is sorted (see the <code>df</code> without sorting, <code>b</code> should be unordered)</span>
<span class="comment-copy">what do you mean? <code>b</code> should be unordered in the output? Why do you provide it to the <code>sort_index</code> function then?</span>
<span class="comment-copy">I don't understand your explanation. If it was like in a <code>groupby</code> then <code>b</code> would not be sorted, though it is. If I just <code>sort_index(['a'])</code> then the sort works.</span>
