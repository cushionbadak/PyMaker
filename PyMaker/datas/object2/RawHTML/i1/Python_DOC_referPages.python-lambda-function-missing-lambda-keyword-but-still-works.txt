<div class="post-text" itemprop="text">
<p>I am using python library <code>tinydb</code> to store data.</p>
<p>According to <code>tinydb</code> documentation, the proper syntax for an example query is:</p>
<pre><code>User = Query()
db.search(User.birthday.year == 1990)
</code></pre>
<p>Why don't we need:</p>
<pre><code>User = Query()
db.search(lambda User: User.birthday.year == 1990)
</code></pre>
<p><code>db.search</code> is a function that is only called <strong>once</strong>. This means that the function is receiving a fixed value (the result of a comparison) as an input, not a function to serve as a comparator?</p>
<p>How does the <code>tinydb</code> library achieve this weird syntax?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>User.birthday.year</code> isn't really an <code>int</code>; it's an object that represents a <em>query</em> to retrieve an <code>int</code>. The type of this object likewise defines <code>__eq__</code> to return not a Boolean value, but a <em>function</em> that will return the result of comparing the fetched <code>int</code> to 1990.</p>
<hr/>
<p>Digging into the code confirms this.</p>
<p><code>Query.__getattr__</code> <a href="https://github.com/msiemens/tinydb/blob/master/tinydb/queries.py#L122" rel="nofollow noreferrer">returns a new <code>Query</code> object</a>, so <code>User.birthday.year</code> is <em>also</em> a <code>Query</code>.</p>
<p>The definitions of <a href="https://github.com/msiemens/tinydb/blob/master/tinydb/queries.py#L157" rel="nofollow noreferrer"><code>Query.__eq__</code></a> and <a href="https://github.com/msiemens/tinydb/blob/master/tinydb/queries.py#L144" rel="nofollow noreferrer"><code>Query._generate_test</code></a> confirm that <code>==</code> also builds a new query.</p>
</div>
<span class="comment-copy">So are you saying that the way it achieves this is by using __eq__ dunder magic to (essentially) override/overload the "==" operator?</span>
<span class="comment-copy">Not just essentially; <code>__eq__</code> <i>defines</i> what <code>==</code> means for all types. If you don't override it, you inherit its definition from a parent class, which often means going back to <code>object.__eq__</code>, which simply checks for object identity.</span>
