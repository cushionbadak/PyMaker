<div class="post-text" itemprop="text">
<p>I'm currently teaching myself Python and was just wondering (In reference to my example below) in simplified terms what the sys.argv[1] represents. Is it simply asking for an input?</p>
<pre><code>#!/usr/bin/python3.1

# import modules used here -- sys is a very standard one
import sys

# Gather our code in a main() function
def main():
  print ('Hello there', sys.argv[1])
  # Command line args are in sys.argv[1], sys.argv[2] ..
  # sys.argv[0] is the script name itself and can be ignored

# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
  main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>I would like to note that previous answers made many assumptions about the user's knowledge. This answer attempts to answer the question at a more tutorial level.</em></p>
<p>For every invocation of Python, <code>sys.argv</code> is automatically a list of strings representing the arguments (as separated by spaces) on the command-line. The name comes from the <a href="http://www.crasseux.com/books/ctutorial/argc-and-argv.html" rel="noreferrer">C programming convention</a> in which argv and argc represent the command line arguments.</p>
<p>You'll want to learn more about lists and strings as you're familiarizing yourself with Python, but in the meantime, here are a few things to know.</p>
<p>You can simply create a script that prints the arguments as they're represented. It also prints the number of arguments, using the <code>len</code> function on the list.</p>
<pre><code>from __future__ import print_function
import sys
print(sys.argv, len(sys.argv))
</code></pre>
<p>The script requires Python 2.6 or later. If you call this script <code>print_args.py</code>, you can invoke it with different arguments to see what happens.</p>
<pre><code>&gt; python print_args.py
['print_args.py'] 1

&gt; python print_args.py foo and bar
['print_args.py', 'foo', 'and', 'bar'] 4

&gt; python print_args.py "foo and bar"
['print_args.py', 'foo and bar'] 2

&gt; python print_args.py "foo and bar" and baz
['print_args.py', 'foo and bar', 'and', 'baz'] 4
</code></pre>
<p>As you can see, the command-line arguments include the script name but not the interpreter name. In this sense, Python treats the script <em>as</em> the executable. If you need to know the name of the executable (python in this case), you can use <code>sys.executable</code>.</p>
<p>You can see from the examples that it is possible to receive arguments that do contain spaces if the user invoked the script with arguments encapsulated in quotes, so what you get is the list of arguments as supplied by the user.</p>
<p>Now in your Python code, you can use this list of strings as input to your program. Since lists are indexed by zero-based integers, you can get the individual items using the list[0] syntax. For example, to get the script name:</p>
<pre><code>script_name = sys.argv[0] # this will always work.
</code></pre>
<p>Although interesting, you rarely need to know your script name. To get the first argument after the script for a filename, you could do the following:</p>
<pre><code>filename = sys.argv[1]
</code></pre>
<p>This is a very common usage, but note that it will fail with an IndexError if no argument was supplied.</p>
<p>Also, Python lets you reference a slice of a list, so to get <em>another list</em> of just the user-supplied arguments (but without the script name), you can do</p>
<pre><code>user_args = sys.argv[1:] # get everything after the script name
</code></pre>
<p>Additionally, Python allows you to assign a sequence of items (including lists) to variable names. So if you expect the user to always supply two arguments, you can assign those arguments (as strings) to two variables:</p>
<pre><code>user_args = sys.argv[1:]
fun, games = user_args # len(user_args) had better be 2
</code></pre>
<p>So, to answer your specific question, <code>sys.argv[1]</code> represents the first command-line argument (as a <code>string</code>) supplied to the script in question. It will not prompt for input, but it will fail with an IndexError if no arguments are supplied on the command-line following the script name.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/sys.html#sys.argv" rel="noreferrer">sys.argv[1]</a> contains the first <a href="http://en.wikipedia.org/wiki/Command-line_interface" rel="noreferrer">command line</a> <a href="http://en.wikipedia.org/wiki/Command-line_argument" rel="noreferrer">argument</a> passed to your script.</p>
<p>For example, if your script is named <code>hello.py</code> and you issue:</p>
<pre>$ python3.1 hello.py foo</pre>
<p>or:</p>
<pre><code>$ chmod +x hello.py  # make script executable
$ ./hello.py foo
</code></pre>
<p>Your script will print:</p>
<pre>Hello there foo</pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> is a list.</p>
<p>This list is created by your command line, it's a list of your command line arguments.</p>
<p>For example:</p>
<p>in your command line you input something like this,</p>
<pre><code>python3.2 file.py something
</code></pre>
<p><code>sys.argv</code> will become a list ['file.py', 'something']</p>
<p>In this case <code>sys.argv[1] = 'something'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Just adding to Frederic's answer, for example if you call your script as follows:</p>
<p><code> ./myscript.py foo bar </code></p>
<p><code>sys.argv[0]</code> would be "./myscript.py" 
<code>sys.argv[1]</code> would be "foo" and
<code>sys.argv[2]</code> would be "bar" ... and so forth.</p>
<p>In your example code, if you call the script as follows <code> ./myscript.py foo </code> , the script's output will be "Hello there foo".</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding a few more points to Jason's Answer : </p>
<p>For taking all user provided arguments :  <code>user_args = sys.argv[1:]</code></p>
<p>Consider the sys.argv as a list of strings as (mentioned by Jason). So all the list manipulations will apply here. This is called "List Slicing". For more info visit <a href="https://stackoverflow.com/questions/509211/pythons-slice-notation">here</a>.</p>
<p>The syntax is like this : list[start:end:step]. If you omit start, it will default to 0, and if you omit end, it will default to length of list.</p>
<p>Suppose you only want to take all the arguments after 3rd argument, then : </p>
<pre><code>user_args = sys.argv[3:]
</code></pre>
<p>Suppose you only want the first two arguments, then : </p>
<pre><code>user_args = sys.argv[0:2]  or  user_args = sys.argv[:2]
</code></pre>
<p>Suppose you want arguments 2 to 4 :</p>
<pre><code>user_args = sys.argv[2:4]
</code></pre>
<p>Suppose you want the last argument (last argument is always -1, so what is happening here is we start the count from back. So start is last, no end, no step) :</p>
<pre><code>user_args = sys.argv[-1]
</code></pre>
<p>Suppose you want the second last argument :</p>
<pre><code>user_args = sys.argv[-2]
</code></pre>
<p>Suppose you want the last two arguments :</p>
<pre><code>user_args = sys.argv[-2:]
</code></pre>
<p>Suppose you want the last two arguments. Here, start is -2, that is second last item and then to the end (denoted by ":") :</p>
<pre><code>user_args = sys.argv[-2:]
</code></pre>
<p>Suppose you want the everything except last two arguments. Here, start is 0 (by default),  and end is second last item :</p>
<pre><code>user_args = sys.argv[:-2]
</code></pre>
<p>Suppose you want the arguments in reverse order :</p>
<pre><code>user_args = sys.argv[::-1]
</code></pre>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>sys.argv is a list containing the script path and command line arguments; i.e. sys.argv[0] is the path of the script you're running and all following members are arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>To pass arguments to your python script 
while running a script via command line</p>
<blockquote>
<blockquote>
<p>python create_thumbnail.py test1.jpg test2.jpg</p>
</blockquote>
</blockquote>
<p>here,
script name - create_thumbnail.py,
argument 1 - test1.jpg,
argument 2 - test2.jpg</p>
<p>With in the create_thumbnail.py script i use</p>
<pre><code>sys.argv[1:]
</code></pre>
<p>which give me the list of arguments i passed in command line as 
['test1.jpg', 'test2.jpg']</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sys.html" rel="nofollow noreferrer">sys</a> .argv will display the command line args passed when running a script or you can say sys.argv will store the command line arguments passed in python while running from terminal. </p>
<p>Just try this: </p>
<pre><code>import sys
print sys.argv
</code></pre>
<p>argv stores all the arguments passed in a python list. The above will print all arguments passed will running the script.</p>
<p>Now try this running your filename.py like this:</p>
<pre><code>python filename.py example example1
</code></pre>
<p>this will print 3 arguments in a list.</p>
<pre><code>sys.argv[0] #is the first argument passed, which is basically the filename. 
</code></pre>
<p>Similarly, argv<a href="https://docs.python.org/2/library/sys.html" rel="nofollow noreferrer">1</a> is the first argument passed, in this case 'example'</p>
<p>A similar question has been asked already <a href="https://stackoverflow.com/a/39359625/5893695">here</a> btw. Hope this helps!  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> is a attribute of the <code>sys</code> module. It says the arguments passed into the file in the command line. <code>sys.argv[0]</code> catches the directory where the file is located. <code>sys.argv[1]</code> returns the first argument passed in the command line. Think like we have a example.py file.</p>
<h1>example.py</h1>
<pre><code>import sys # Importing the main sys module to catch the arguments
print(sys.argv[1]) # Printing the first argument
</code></pre>
<p>Now here in the command prompt when we do this:</p>
<pre><code>python example.py
</code></pre>
<p>It will throw a index error at line 2. Cause there is no argument passed yet. You can see the length of the arguments passed by user using <code>if len(sys.argv) &gt;= 1: # Code</code>.
If we run the example.py with passing a argument</p>
<pre><code>python example.py args
</code></pre>
<p>It prints:</p>
<pre><code>args
</code></pre>
<p>Because it was the first arguement! Let's say we have made it a executable file using PyInstaller. We would do this:</p>
<pre><code>example argumentpassed
</code></pre>
<p>It prints:</p>
<pre><code>argumentpassed
</code></pre>
<p>It's really helpful when you are making a command in the terminal. First check the length of the arguments. If no arguments passed, do the help text.</p>
</div>
<span class="comment-copy">This, is not part of the question, and it is very old but the module <a href="https://docs.python.org/2/library/argparse.html#module-argparse" rel="nofollow noreferrer">argparse</a>, probably is better for what you are trying to do, according to <a href="http://stackoverflow.com/q/1009860/2886003">this</a></span>
<span class="comment-copy">When you show the list of strings <code>sys.argv</code>, I wonder what the line <code>from __future__ import print_function</code> does. Is it something I must add if I am <b>NOT</b> running on Python 3 but Python 2? @Jason R. Coombs</span>
<span class="comment-copy">@NicholasLiu, you need not add it if you're on Python 3. I added it for completeness. Try running without it on Python 2 and you'll get different results than what I described. Give it a try.</span>
<span class="comment-copy">@JasonR.Coombs I'm confuse with this one: <code>sys.argv **is** automatically a list of strings</code>. Do you mean "gives" or "return"?</span>
<span class="comment-copy">@Guillaume: It's a subtle semantic difference, but in Python, names such as sys.argv hold references to objects. So technically, the <code>argv</code> attribute of the <code>sys</code> module is a reference to a list object containing the strings of the arguments. To use <code>gives</code> or <code>returns</code> would suggest a function invocation or generator or another construct. <code>references</code> or <code>represents</code> might be more precise terms, but <code>is</code> is close enough.</span>
<span class="comment-copy">@JasonR.Coombs what happens if I directly call <code>main</code> by importing the module (lets say the module name is <code>moduleA.py</code>) and call the function as in <code>import moduleA; moduleA.main()</code>. In that case, there is no command-line arguments.. so is <code>sys.argv[0]</code> still supposed to represent the <code>filename</code> ie. it should print out <code>moduleA.py</code>?</span>
