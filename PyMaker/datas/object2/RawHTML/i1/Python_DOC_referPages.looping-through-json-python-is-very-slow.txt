<div class="post-text" itemprop="text">
<p>Can someone help me understand what I'm doing wrong in the following code:</p>
<pre><code>        def matchTrigTohost(gtriggerids,gettriggers):
            mylist = []
            for eachid in gettriggers:
                gtriggerids['params']['triggerids'] = str(eachid)
                hgetjsonObject = updateitem(gtriggerids,processor)
                hgetjsonObject = json.dumps(hgetjsonObject)
                hgetjsonObject = json.loads(hgetjsonObject)
                hgetjsonObject = eval(hgetjsonObject)
                hostid = hgetjsonObject["result"][0]["hostid"]
                hname = hgetjsonObject["result"][0]["name"]
                endval = hostid + "--" + hname
                mylist.append(endval)
            return(hgetjsonObject)
</code></pre>
<p>The variable <code>gettriggers</code> contain a lot of ids (~3500):</p>
<pre><code>
[ "26821", "26822", "26810", ..... ]

</code></pre>
<p>I'm looping through the ids in the variable and assigning them to a json object.  </p>
<pre><code>
gtriggerids = {
        "jsonrpc": "2.0",
        "method": "host.get",
        "params": {
                "output": ["hostid", "name"],
                "triggerids": "26821"
        },
        "auth": mytoken,
        "id": 2
}

</code></pre>
<p>When I run the code against the above json variable, it is very slow. It is taking several minutes to check each ID.  I'm sure I'm doing many things wrong here or at least not in the pythonic way. Can anyone help me speed this up?  I'm very new to python.</p>
<p><strong>NOTE:</strong></p>
<p>The <code>dump()</code> , <code>load()</code>, <code>eval()</code> were used to convert the <code>str</code> produced to json. </p>
</div>
<div class="post-text" itemprop="text">
<p>You asked for help knowing what you're doing wrong. Happy to oblige :-)</p>
<ol>
<li>At the lowest level—why your function is running slowly—you're running many unnecessary operations. Specifically, you're moving data between formats (python dictionaries and JSON strings) <em>and back again</em> which accomplishes nothing but wasting CPU cycles.</li>
</ol>
<p>You mentioned this is only way you could get the data in the format you needed. That brings me to the second thing you're doing wrong.</p>
<ol start="2">
<li>You're throwing code at the wall instead of understanding what's happening.</li>
</ol>
<p>I'm quite sure (and several of your commenters appear to agree) that your code is <em>not</em> the only way to arrange your data into a usable structure. What you should do instead is:</p>
<ul>
<li>Understand as much as you can about the data you're being given. I suspect the output of <code>updateitem()</code> should be your first target of learning.</li>
<li>Understand the right/typical way to interact with that data. Your data doesn't <em>have</em> to be a dictionary before you can use it. Maybe it's not the best approach.</li>
<li>Understand what regularities and irregularities the data may have. Part of your problem may not be with types or dictionaries, but with an unpredictable/dirty data source.</li>
<li>Armed with all this new knowledge, manipulate your as simply as you can.</li>
</ul>
<p>I can pretty much guarantee the result will run faster.</p>
<hr/>
<p>More detail! Some things you wrote suggest misconceptions:</p>
<blockquote>
<p>I'm looping through the ids in the variable and assigning them to a json object.</p>
</blockquote>
<p>No, you can't assign to a JSON object. In python, JSON data is always a string. You probably mean that you're assigning to a python dictionary, which (sometimes!) can be converted to a JSON object, represented as a string. Make sure you have all those concepts clear before you move forward.</p>
<blockquote>
<p>The dump() , load(), eval() were used to convert the str produced to json. </p>
</blockquote>
<p>Again, you don't call <code>dumps()</code> on a string. You use that to convert a python object <em>to</em> a string. Run this code in a REPL, go step by step, and inspect or play with each output to understand what it is.</p>
</div>
<span class="comment-copy"><code>dump()</code>, <code>load()</code> and <code>eval()</code>? Why <i>wouldn't</i> that be slow? (And what's the purpose of the <code>eval</code>? It's generally a risky operation that should be avoided where possible).</span>
<span class="comment-copy">What is the point of calling <code>json.dumps()</code> immediately followed by <code>json.loads()</code>?</span>
<span class="comment-copy">but, err, yes, this <i>is</i> very obviously a slow set of operations, and without context, many of those operations look not just slow but pointless.</span>
<span class="comment-copy">that was the only reliable way I could convert the str produced to a  dictionary.</span>
<span class="comment-copy">String produced <i>by what</i>? <code>dumps()</code> creates a string (which you then convert back to its original form by <code>loads()</code>), but if you don't do the <code>dumps()</code>, you don't need the <code>loads()</code>. As for the <code>eval()</code>, we'd need to know what your data looks like to better speak to how to replace it.</span>
