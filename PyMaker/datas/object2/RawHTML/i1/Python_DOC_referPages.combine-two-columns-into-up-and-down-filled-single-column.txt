<div class="post-text" itemprop="text">
<p>I have a data frame that tracks the movement of objects between people. Each row contains an update to the state of this object and are sorted ascending by time stamp.</p>
<p>I have two columns that represent a state change from one owner to another owner. I’d like to collapse these columns into one column that represents the ‘current state’ of the owner at every update row. Unfortunately, I only get state changes, so I have to be able to fill up and down.</p>
<p>Here’s a sample data frame:</p>
<pre><code>test_df = pd.DataFrame([
    (0, '', ''),
    (1, '', ''),
    (2, 'person1', 'person2'),
    (3, '', ''),
    (4, '', ''),
    (5, 'person2', 'person3'),
    (6, 'person3', 'person4'),
    (7, '', ''),
    (8, '', ''),
], columns = ['entry_id', 'original_owner', 'new_owner'])
</code></pre>
<p>And this is what I would like it to look like:</p>
<pre><code>entry_id    original_owner   new_owner    current_owner
0                                         person1
1                                         person1
2           person 1         person 2     person2
3                                         person2
4                                         person2
5           person 2         person 3     person3
6           person 3         person 4     person4
7                                         person4
8                                         person4
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a <code>.ffill</code> on <code>'new_owner'</code>, with a little extra filling to get the first few rows. Because of this, I suggest having missing values represented by <code>NaN</code> as <code>''</code> is not a null value recognized by pandas:</p>
<pre><code>import numpy as np

test_df = test_df.replace('', np.NaN)
test_df['current_owner'] = test_df.new_owner.ffill().fillna(test_df.original_owner.bfill())

   entry_id original_owner new_owner current_owner
0         0            NaN       NaN       person1
1         1            NaN       NaN       person1
2         2        person1   person2       person2
3         3            NaN       NaN       person2
4         4            NaN       NaN       person2
5         5        person2   person3       person3
6         6        person3   person4       person4
7         7            NaN       NaN       person4
8         8            NaN       NaN       person4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>df.fillna</code> with <code>method='ffill'</code> to get what you want:</p>
<pre><code>df = test_df.copy()
df['owner'] = df.new_owner
df.owner = df.owner.replace('', np.nan, regex=True)
df.owner = df.owner.fillna(method='ffill')
df.owner = df.owner.fillna('person1')
print(df)

       entry_id original_owner new_owner    owner
    0         0                           person1
    1         1                           person1
    2         2        person1   person2  person2
    3         3                           person2
    4         4                           person2
    5         5        person2   person3  person3
    6         6        person3   person4  person4
    7         7                           person4
    8         8                           person4
</code></pre>
</div>
<span class="comment-copy">better if you provide sample output you want to have.</span>
<span class="comment-copy">This was exactly it! Thank you!</span>
