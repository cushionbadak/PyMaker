<div class="post-text" itemprop="text">
<p>I don't really understand regular expressions.  Can you explain them to me in an easy-to-follow manner?  If there are any online tools or books, could you also link to them?</p>
</div>
<div class="post-text" itemprop="text">
<p>The most important part is the concepts. Once you understand how the building blocks work, differences in syntax amount to little more than mild dialects. A layer on top of your regular expression engine's syntax is the syntax of the programming language you're using. Languages such as Perl remove most of this complication, but you'll have to keep in mind other considerations if you're using regular expressions in a C program.</p>
<p>If you think of regular expressions as building blocks that you can mix and match as you please, it helps you learn how to write and debug your own patterns but also how to understand patterns written by others.</p>
<h2>Start simple</h2>
<p>Conceptually, the simplest regular expressions are literal characters. The pattern <code>N</code> matches the character 'N'.</p>
<p>Regular expressions next to each other match sequences. For example, the pattern <code>Nick</code> matches the sequence 'N' followed by 'i' followed by 'c' followed by 'k'.</p>
<p>If you've ever used <code>grep</code> on Unix—even if only to search for ordinary looking strings—you've already been using regular expressions! (The <code>re</code> in <code>grep</code> refers to regular expressions.)</p>
<h2>Order from the menu</h2>
<p>Adding just a little complexity, you can match either 'Nick' or 'nick' with the pattern <code>[Nn]ick</code>. The part in square brackets is a <em>character class</em>, which means it matches exactly one of the enclosed characters. You can also use ranges in character classes, so <code>[a-c]</code> matches either 'a' or 'b' or 'c'.</p>
<p>The pattern <code>.</code> is special: rather than matching a literal dot only, it matches <em>any</em> character<sup>†</sup>. It's the same conceptually as the really big character class <code>[-.?+%$A-Za-z0-9...]</code>.</p>
<p>Think of character classes as menus: pick just one.</p>
<h2>Helpful shortcuts</h2>
<p>Using <code>.</code> can save you lots of typing, and there are other shortcuts for common patterns. Say you want to match a digit: one way to write that is <code>[0-9]</code>. Digits are a frequent match target, so you could instead use the shortcut <code>\d</code>. Others are <code>\s</code> (whitespace) and <code>\w</code> (word characters: alphanumerics or underscore).</p>
<p>The uppercased variants are their complements, so <code>\S</code> matches any <em>non</em>-whitespace character, for example.</p>
<h2>Once is not enough</h2>
<p>From there, you can repeat parts of your pattern with <em>quantifiers</em>. For example, the pattern <code>ab?c</code> matches 'abc' or 'ac' because the <code>?</code> quantifier makes the subpattern it modifies optional. Other quantifiers are</p>
<ul>
<li><code>*</code> (zero or more times)</li>
<li><code>+</code> (one or more times)</li>
<li><code>{n}</code> (exactly <em>n</em> times)</li>
<li><code>{n,}</code> (at least <em>n</em> times)</li>
<li><code>{n,m}</code> (at least <em>n</em> times but no more than <em>m</em> times)</li>
</ul>
<p>Putting some of these blocks together, the pattern <code>[Nn]*ick</code> matches all of</p>
<ul>
<li>ick</li>
<li>Nick</li>
<li>nick</li>
<li>Nnick</li>
<li>nNick</li>
<li>nnick</li>
<li><em>(and so on)</em></li>
</ul>
<p>The first match demonstrates an important lesson: <em><code>*</code> always succeeds!</em> Any pattern can match zero times.</p>
<p>A few other useful examples:</p>
<ul>
<li><code>[0-9]+</code> (and its equivalent <code>\d+</code>) matches any non-negative integer</li>
<li><code>\d{4}-\d{2}-\d{2}</code> matches dates formatted like 2019-01-01</li>
</ul>
<h2>Grouping</h2>
<p>A quantifier modifies the pattern to its immediate left. You might expect <code>0abc+0</code> to match '0abc0', '0abcabc0', and so forth, but the pattern <em>immediately</em> to the left of the plus quantifier is <code>c</code>. This means <code>0abc+0</code> matches '0abc0', '0abcc0', '0abccc0', and so on.</p>
<p>To match one or more sequences of 'abc' with zeros on the ends, use <code>0(abc)+0</code>. The parentheses denote a subpattern that can be quantified as a unit. It's also common for regular expression engines to save or "capture" the portion of the input text that matches a parenthesized group. Extracting bits this way is much more flexible and less error-prone than counting indices and <code>substr</code>.</p>
<h2>Alternation</h2>
<p>Earlier, we saw one way to match either 'Nick' or 'nick'. Another is with alternation as in <code>Nick|nick</code>. Remember that alternation includes everything to its left and everything to its right. Use grouping parentheses to limit the scope of <code>|</code>, <em>e.g.</em>, <code>(Nick|nick)</code>.</p>
<p>For another example, you could equivalently write <code>[a-c]</code> as <code>a|b|c</code>, but this is likely to be suboptimal because many implementations assume alternatives will have lengths greater than 1.</p>
<h2>Escaping</h2>
<p>Although some characters match themselves, others have special meanings. The pattern <code>\d+</code> doesn't match backslash followed by lowercase D followed by a plus sign: to get that, we'd use <code>\\d\+</code>. A backslash removes the special meaning from the following character.</p>
<h2>Greediness</h2>
<p>Regular expression quantifiers are greedy. This means they match as much text as they possibly can while allowing the entire pattern to match successfully.</p>
<p>For example, say the input is</p>
<blockquote>
<p>"Hello," she said, "How are you?"</p>
</blockquote>
<p>You might expect <code>".+"</code> to match only 'Hello,' and will then be surprised when you see that it matched from 'Hello' all the way through 'you?'.</p>
<p>To switch from greedy to what you might think of as cautious, add an extra <code>?</code> to the quantifier. Now you understand how <code>\((.+?)\)</code>, the example from your question works. It matches the sequence of a literal left-parenthesis, followed by one or more characters, and terminated by a right-parenthesis.</p>
<p>If your input is '(123) (456)', then the first capture will be '123'. Non-greedy quantifiers want to allow the rest of the pattern to start matching as soon as possible.</p>
<p>(As to your confusion, I don't know of any regular-expression dialect where <code>((.+?))</code> would do the same thing. I suspect something got lost in transmission somewhere along the way.)</p>
<h2>Anchors</h2>
<p>Use the special pattern <code>^</code> to match only at the beginning of your input and <code>$</code> to match only at the end. Making "bookends" with your patterns where you say, "I know what's at the front and back, but give me everything between" is a useful technique.</p>
<p>Say you want to match comments of the form</p>
<blockquote>
<p><code>-- This is a comment --</code></p>
</blockquote>
<p>you'd write <code>^--\s+(.+)\s+--$</code>.</p>
<h2>Build your own</h2>
<p>Regular expressions are recursive, so now that you understand these basic rules, you can combine them however you like.</p>
<h2>Tools for writing and debugging regexes:</h2>
<ul>
<li><a href="http://www.regexr.com/" rel="noreferrer">RegExr</a> (for JavaScript)</li>
<li>Perl: <a href="http://search.cpan.org/dist/YAPE-Regex-Explain/" rel="noreferrer">YAPE: Regex Explain</a></li>
<li><a href="http://weitz.de/regex-coach/" rel="noreferrer">Regex Coach</a> (engine backed by <a href="http://weitz.de/cl-ppcre/" rel="noreferrer">CL-PPCRE</a>)</li>
<li><a href="http://regexpal.com" rel="noreferrer">RegexPal</a> (for JavaScript)</li>
<li><a href="http://www.regular-expressions.info/" rel="noreferrer">Regular Expressions Online Tester</a> </li>
<li><a href="http://www.regexbuddy.com/" rel="noreferrer">Regex Buddy</a></li>
<li><a href="http://www.regex101.com/" rel="noreferrer">Regex 101</a> (for PCRE, JavaScript, Python, Golang)</li>
<li><a href="http://laurent.riesterer.free.fr/regexp/" rel="noreferrer">Visual RegExp</a></li>
<li><a href="http://www.ultrapico.com/Expresso.htm" rel="noreferrer">Expresso</a> (for .NET)</li>
<li><a href="http://www.rubular.com/" rel="noreferrer">Rubular</a> (for Ruby)</li>
<li><a href="http://regexlib.com/Default.aspx" rel="noreferrer">Regular Expression Library</a> (Predefined Regexes for common scenarios)</li>
<li><a href="http://www.txt2re.com/" rel="noreferrer">Txt2RE</a></li>
<li><a href="http://www.regextester.com/" rel="noreferrer">Regex Tester</a> (for JavaScript)</li>
<li><a href="http://regexstorm.net/" rel="noreferrer">Regex Storm</a> (for .NET)</li>
<li><a href="https://www.debuggex.com/" rel="noreferrer">Debuggex</a> (visual regex tester and helper)</li>
</ul>
<h2>Books</h2>
<ul>
<li><a href="http://oreilly.com/catalog/9780596528126/" rel="noreferrer">Mastering Regular Expressions</a>, the <a href="http://oreilly.com/catalog/9780596002893" rel="noreferrer">2nd Edition</a>, and the <a href="http://shop.oreilly.com/product/9780596528126.do" rel="noreferrer">3rd edition</a>.</li>
<li><a href="http://www.addedbytes.com/cheat-sheets/regular-expressions-cheat-sheet/" rel="noreferrer">Regular Expressions Cheat Sheet</a></li>
<li><a href="http://rads.stackoverflow.com/amzn/click/1449319432" rel="noreferrer">Regex Cookbook</a></li>
<li><a href="http://rads.stackoverflow.com/amzn/click/0672325667" rel="noreferrer">Teach Yourself Regular Expressions</a></li>
</ul>
<h2>Free resources</h2>
<ul>
<li><a href="http://neverfear.org/blog/view/Regex_tutorial_for_people_who_should_know_Regex__but_do_not___Part_1" rel="noreferrer">Regular Expressions - Everything you should know</a> (PDF Series)</li>
<li><a href="http://www.greenend.org.uk/rjk/2002/06/regexp.html" rel="noreferrer">Regex Syntax Summary</a></li>
<li><a href="http://perl.plover.com/Regex/" rel="noreferrer">How Regexes Work</a></li>
</ul>
<h2>Footnote</h2>
<p><strong>†:</strong> The statement above that <code>.</code> matches any character is a simplification for pedagogical purposes that is not strictly true. Dot matches any character except newline, <code>"\n"</code>, but in practice you rarely expect a pattern such as <code>.+</code> to cross a newline boundary. Perl regexes have a <a href="http://perldoc.perl.org/perlre.html#s" rel="noreferrer"><code>/s</code> switch</a> and Java <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Pattern.html#DOTALL" rel="noreferrer"><code>Pattern.DOTALL</code></a>, for example, to make <code>.</code> match any character at all. For languages that don't have such a feature, you can use something like <code>[\s\S]</code> to match "any whitespace or any non-whitespace", in other words anything.</p>
</div>
<span class="comment-copy">You can also use trial and error method and than following online regex tester and debugger can be a huge help:  <a href="https://regex101.com/" rel="nofollow noreferrer">regex101.com</a></span>
<span class="comment-copy">It would be worth mentioning that, despite being a similar pattern, <code>a{,m}</code> isn't a thing, at least in Javascript, Perl, and Python.</span>
<span class="comment-copy">It would be very worth to mention that there are different kind of regular expression engines with all have different feature set's and syntactic rules.</span>
<span class="comment-copy"><a href="https://hackr.io/tutorials/learn-regular-expressions-regex" rel="nofollow noreferrer">hackr.io/tutorials/learn-regular-expressions-regex</a> is a great place to find best online regex tutorials. All the tutorials here are submitted and recommended (upvoted like SO) by the programming community.</span>
<span class="comment-copy">Appreciate your efforts to bring it all here in a nutshell.</span>
