<div class="post-text" itemprop="text">
<p>I am trying to understand <a href="https://en.wikipedia.org/wiki/Kalman_filter" rel="nofollow noreferrer">Kalman Filter</a> and there are some terms that I cannot understand.</p>
<p>I was reading about Dynamics Model transition matrix (4x4). It says that this matrix will map the equations below to the state components. The equations are simple physics equations:</p>
<pre><code>xt = x(t-1) + vx(dt)
yt = y(t-1) + vy(dt)
dt = 1
</code></pre>
<p>The code that represents this is as follows:</p>
<pre><code>dt = 0.1
DT = np.matrix([[1.,0.,dt,0],[0.,1.,0.,dt],[0.,0.,1.,0.],[0.,0.,0.,1.]])
</code></pre>
<p>Can someone help me understand this? What exactly is this representation?</p>
</div>
<div class="post-text" itemprop="text">
<p>So the transition matrix is describing the spontaneous transition from one time point <em>i</em> to the next <em>i+1</em>. Say, you have a little robot that drives through your house. Then sometimes it will slide a little bit on the floor because it will not always have good traction. The transition matrix tries to model it.</p>
<p>The transition model is then used in several parts in the Kalman filter. First, to describe the variance and the position of your robot at time point i. And it is part of formulating the prediction error (Kalman gain) of your sensor model to minimize the variance of your next measure. </p>
<p>Basically, it is a big part of the Kalman filter, but also a trivial one. It just tries to model a spontaneous transition over time (a.k.a sliding, slipping, being pushed by wind...)</p>
<p>Please ask more if this didn't help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The state transition matrix describes how your states propagate with time given an initial state. For a Linear Time-Invariant (LTI)system, this is a constant matrix. </p>
<p>For example, assuming I have a 2-dimensional discrete-time LTI model given below:</p>
<p><em>x(k+1) = x(k)</em> ---- (1)</p>
<p><em>y(k+1) = y(k) + 2x(k)</em> ----- (2)</p>
<p>This can be written in matrix form by looking at the coefficients of the states in each equation as shown below:</p>
<p>[x(k+1), y(k+1)] = [[1.0, 0.0],[2.0, 1.0]]*
[x(k),y(k)]</p>
<p><strong>The matrix [[1.0, 0.0],[2.0, 1.0]] is known as the state transition matrix.</strong> Take note, this is similar to how you write linear systems of equations in matrix form to solve them simultaneously using the Cramer's rule or matrix inversion.</p>
<p>As you can see, only x(k) appears in (1) with a coefficient of 1 hence the first row of the transition matrix is [1.0, 0.0]. Similarly, the second row is [2.0, 1.0].</p>
<p>Taking a look at the structure of your matrix </p>
<p>DT = np.matrix(<strong>[[1.,0.,dt,0],[0.,1.,0.,dt],[0.,0.,1.,0.],[0.,0.,0.,1.]]</strong>)</p>
<p>I can tell you have 4 variables [x(t-1), y(t-1), vx, vy]. You have shown only two state equations (x(t) and y(t)) and the first 2 rows of your matrix correspond well with the coefficient of the variables in the equations.</p>
<p>From your matrix, I can infer that the last two equations are </p>
<p>vx(t) = vx(t-1) and vy(t) = vy(t-1).</p>
<p>I'd suggest you read more on state space models (LTI should be sufficient). <a href="https://en.wikipedia.org/wiki/State-space_representation" rel="nofollow noreferrer">https://en.wikipedia.org/wiki/State-space_representation</a></p>
<p>Note: For continuous-time models, getting the state transition matrix will require finding the matrix exponential. </p>
</div>
<span class="comment-copy">How to define this matrix? Could you show a small code example?</span>
<span class="comment-copy">I was going through the code at <a href="https://stackoverflow.com/questions/13901997/kalman-2d-filter-in-python" title="kalman 2d filter in python">stackoverflow.com/questions/13901997/kalman-2d-filter-in-python</a> Does it define the transition matrix?</span>
<span class="comment-copy">So F seems to be the transition matrix. As it is described so in Wikipedia. I have another book at hand that uses other variables and uses a matrix full of ones. I think it depends on your assumption about the model. Assuming n = state vector (x_position ,y_position ,velocity_x, velocity_y) then the size of you transition matrix should be n x n.</span>
<span class="comment-copy">I had some code for reference which defines the transition matrix as <code>np.matrix([[1.,0.,0.1,0],[0.,1.,0.,0.1],[0.,0.,1.,0.],[0.,0.,0.,1.]])</code> which is a 4x4 matrix. I could not understand what <code>0.1</code> meant here. Any ideas?</span>
<span class="comment-copy">Unfortunalty not. I just left a message because I know that you can define this matrix as you want and what it means (according to my book). Why my author chose a matrix of ones and your code example contains a 0.1 I cannot tell. The code assumes a smaller value for the velocity. But why? I donâ€™t know.</span>
