<div class="post-text" itemprop="text">
<p>I have a simple GUI app and I want to connect <code>Alt+M</code> to restore the window when it's minimized. Relevant code goes like that:</p>
<pre><code>from pynput import keyboard
import sys, os, _thread
from PyQt5 import QtCore
from PyQt5.QtWidgets import QApplication, QWidget

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        _thread.start_new_thread(self.hotkeyLoop, (self,))

        self.setWindowFlags(self.windowFlags() | QtCore.Qt.CustomizeWindowHint)
        self.setWindowFlags(self.windowFlags() &amp; ~QtCore.Qt.WindowCloseButtonHint)

        self.show()

    def hotkeyLoop(self, window):
        COMBINATIONS = [
            {keyboard.Key.alt_l, keyboard.KeyCode(char='m')},
            {keyboard.Key.alt_l, keyboard.KeyCode(char='M')}
        ]

        # The currently active modifiers
        current = set()

        def execute():
            print('alt+m')
            self.setWindowState(QtCore.Qt.WindowActive)

        def on_press(key):
            if any([key in COMBO for COMBO in COMBINATIONS]):
                current.add(key)
                if any(all(k in current for k in COMBO) for COMBO in COMBINATIONS):
                    execute()

        def on_release(key):
            if any([key in COMBO for COMBO in COMBINATIONS]):
                current.remove(key)

        with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
            listener.join()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    sys.exit(app.exec_())
</code></pre>
<p>The Code in <code>hotkeyLoop</code> is actually a copy-paste code I use to catch hotkeys. I know this code actually works because I used it in the same app to <code>window.show()</code> the window when it was closed. That worked perfect. But I decided to make the window unclosable and to use the hotkey to show it when it was minimized. But whenever I press the hotkey combination The window comes up but it's completely white and stops responding. then I have no choice but to terminate it.</p>
<p>Like this:</p>
<p><img alt="" src="https://i.stack.imgur.com/4dYWB.jpg"/></p>
<p>Why does this happen and how can I solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, if your code has an infinite loop other than the GUI's mainloop, your GUI will stop responding. <code>keyboard.Listener.join()</code> is effectively an infinite loop - it blocks indefinitely as long as the listener is alive.</p>
<p>You could just not call join, in which case the main thread will continue to execute the GUI mainloop as desired. Just be sure to keep a permanent reference to the listener thread so it doesn't get garbage collected prematurely.</p>
<p>Change:</p>
<pre><code>with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:
    listener.join()
</code></pre>
<p>To:</p>
<pre><code>self.listener = keyboard.Listener(on_press=on_press, on_release=on_release)
</code></pre>
</div>
<span class="comment-copy">Thanks for your answer. But this way <code>keyboard.Listener</code>won't catch the hotkey. I might as well delete the code then.</span>
<span class="comment-copy">Strange, I would expect the Listener to catch the hotkey even if you don't call join. I will test further.</span>
<span class="comment-copy">I'd like to point out again that this code worked like a charm when I only had <code>window.show()</code> in <code>execute()</code>.</span>
<span class="comment-copy">Oops, I misunderstood the structure of the code. I was under the impression that <code>hotkeyLoop</code> was being called in the main thread, but now I see it's being called by <code>start_new_thread</code>. Since it's typically fine to have two infinite loops as long as they're in separate threads, I no longer believe that the <code>join</code> is the cause of the problem.</span>
<span class="comment-copy">Now I'm not really sure what the problem might be... I know that some GUIs behave strangely if you try to issue commands to it in a thread other than the thread that created the GUI. I would like to test the problem locally, but I'm having trouble getting the program to run at all on my machine. Partly this is because the code in the question has omitted some of its import statements and the code that creates the MainWindow instance. A <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> would really help here.</span>
