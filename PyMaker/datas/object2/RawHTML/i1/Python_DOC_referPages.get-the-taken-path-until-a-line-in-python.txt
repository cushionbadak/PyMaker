<div class="post-text" itemprop="text">
<p>Given a python function with nested if-else statements, how can we get the path we have taken to arrive to a line.</p>
<pre><code>def function():
   if condition1:
      if condition2:
         sth
      else:
         get_path()
   else:
      sth
</code></pre>
<p>In this case, when the function <code>function</code> runs, <code>get_path()</code> should return something like <code>function.condition1.not(condition2)</code></p>
<p>I dont' want to build the path myself, I thought about using the module <code>inspect</code> and seeing what is being stored in the stack frame, but I think it will require some treatment to get the path. Is there any easier way ?</p>
</div>
<div class="post-text" itemprop="text">
<p>This simple method ,convenient for small paths only and user-defined, requires no library .You can create a list and append to that list the corresponding tags for if-conditions( which would append only if the condition satisfies).So any time you feel you can print the list in the order the events happened!</p>
</div>
<div class="post-text" itemprop="text">
<p>You basically want to trace what happened throughout execution of the function; you can simply use <code>trace</code> (<a href="https://docs.python.org/3/library/trace.html" rel="nofollow noreferrer">read more here</a>) as shown below:</p>
<pre><code>import sys
import trace

# create a Trace object, telling it what to ignore, and whether to
# do tracing or line-counting or both.
tracer = trace.Trace(
    ignoredirs=[sys.prefix, sys.exec_prefix],
    trace=0,
    count=1)

def test():
    if True:
        if False:
            print('one')
        else:
            print('two')

# run the new command using the given tracer
tracer.run('test()')

# make a report, placing output in the current directory
r = tracer.results()
r.write_results(show_missing=True, coverdir=".")
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt;&gt;&gt;&gt; import sys
&gt;&gt;&gt;&gt;&gt;&gt; import trace

       # create a Trace object, telling it what to ignore, and whether to
       # do tracing or line-counting or both.
&gt;&gt;&gt;&gt;&gt;&gt; tracer = trace.Trace(
&gt;&gt;&gt;&gt;&gt;&gt;     ignoredirs=[sys.prefix, sys.exec_prefix],
&gt;&gt;&gt;&gt;&gt;&gt;     trace=0,
&gt;&gt;&gt;&gt;&gt;&gt;     count=1)

&gt;&gt;&gt;&gt;&gt;&gt; def test():
           if True:
               if False:
                   print('here')
               else:
    1:             print('here2')

       # run the new command using the given tracer
&gt;&gt;&gt;&gt;&gt;&gt; tracer.run('test()')

       # make a report, placing output in the current directory
&gt;&gt;&gt;&gt;&gt;&gt; r = tracer.results()
&gt;&gt;&gt;&gt;&gt;&gt; r.write_results(show_missing=True, coverdir=".")
</code></pre>
<p>The above will produce a <code>.cover</code> file with the tracing results; or you'll have to play around with strings and/or a list of actions and use that as the path taken.</p>
<p>Easiest way of doing it:</p>
<pre><code>def function():
    path = 'function'

    if condition1:
        path += '.condition1'

        if condition2:
            path += '.condition2'
        else:
            path += '.not(condition2)'
    else:
        path += '.not(condition1)'
</code></pre>
<p>This is an example; its not scale-able but will satisfy a tiny need.</p>
</div>
<span class="comment-copy">Maybe you can use some prints...</span>
<span class="comment-copy">I don't want to create the path myself, this way if the code changes, I don't have to update anything. I would like to use what the interpreter already knows and delegate this task to it.</span>
<span class="comment-copy">Thank you for the response, but I need the path to be retrieved in real-time; while the function runs.</span>
<span class="comment-copy">Then the easiest way is to generate your own path.</span>
<span class="comment-copy">@TorTor added the example of playing around with strings for you.</span>
