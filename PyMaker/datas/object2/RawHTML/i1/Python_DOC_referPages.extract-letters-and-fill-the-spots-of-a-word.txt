<div class="post-text" itemprop="text">
<p>I'm trying to make a script where there is a word ("administrator") and there is an extraction of the letters that compose
the word.</p>
<p>The output I'm looking for after each loop is something like this:</p>
<p>1st loop: the letter "d" is extracted</p>
<p>_ d _ _ _ _ _ _ _ _ _ _ _ </p>
<p>2nd loop: the letter "m" is extracted</p>
<p>_ d m _ _ _ _ _ _ _ _ _ _ </p>
<p>3rd loop: the letter "a" is extracted</p>
<p>a d m _ _ _ _ _ _ a _ _ _ </p>
<p>Now, the problem is that I want to fill just one spot at a time. As you can see with the letter "a", when a letter appears more than once in a 
word, the script will fill all the spots where the letter is located.</p>
<p>Probably the solution is based on the fact that the script should extract indexes and not words, and fill the spot corrisponding
to each index through a dictionary. I tried to do it, but I didn't manage to make it work.</p>
<p>Do you have any ideas on how I could make it work?</p>
<p>The code:</p>
<pre><code>import time
import random


word = 'administrator'
letters_extracted = []

def string_word(word, letters_extracted):
    string = ''
    for letter in word:
        print("\nletter:", letter)
        print("letters_extracted:", letters_extracted)            
        if letter in letters_extracted:
            string += letter + " "
        else:
            string += ' _ '
    return string

letters_in_word = []
for letter in word:
    letters_in_word.append(letter)
    print("letters_in_word", letters_in_word)

while True:
    print(string_word(word, letters_extracted))
    new_letter = random.choice(letters_in_word)
    print("\nnew letter = ", new_letter)
    #in order to avoid to extract the same letter twice.
    letters_in_word.remove(new_letter)
    letters_extracted.append(new_letter)
    time.sleep(1)
    print(string_word(word, letters_extracted))
    if len(letters_in_word)==0:
        break
</code></pre>
<p>The following is my attempt using the dictionary. In order to extract random letters I reshuffled the word "administrator" and I put it in a dictionary called "word_dictionary_shuffled". The problem is that when the for loop starts, it follows the order of the letters in the reshuffled dictionary (word_dictionary_shuffled). So the letters don't come out in the order of the original word ("administrator"). The order is that of the reshuffled word. Moreover, the underscores don't come out.</p>
<pre><code>import time
import random

word = 'administrator'
word_shuffled = ''.join(random.sample(word, len(word)))

word_dictionary = dict(enumerate(word))
word_dictionary_shuffled = dict(enumerate(word_shuffled))

print("word_dictionary", dict(enumerate(word)))
print("word_dictionary_shuffled", dict(enumerate(word_shuffled)))



def string_word(word_dictionary, word_dictionary_shuffled):
    string = ''
    for index,value in word_dictionary_shuffled.items():
        if index in word_dictionary_shuffled:
            string += value + " "
        else:
            string += ' _ '
        print("\nindex", index)
        print("string = ", string)
    return string


while True:
    print(string_word(word_dictionary, word_dictionary_shuffled))

    time.sleep(1)

    print(string_word(word_dictionary, word_dictionary_shuffled))    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need a dict to map indices to letters. The string itself can be indexed by letter indices already. You should shuffle indices instead of letters so you can iterate through shuffled indices to unmask the corresponding letters one by one:</p>
<pre><code>import time
import random

word = 'administrator'

indices_shuffled = list(range(len(word)))
random.shuffle(indices_shuffled)
letters = ['_'] * len(word)
for i in indices_shuffled:
    letters[i] = word[i]
    print(''.join(letters))
    time.sleep(1)
</code></pre>
<p>Sample output:</p>
<pre><code>_d___________
_d_____t_____
_dm____t_____
_dm__i_t_____
_dm__ist_____
_dm__ist_a___
_dm__ist_a_o_
adm__ist_a_o_
admi_ist_a_o_
admi_istra_o_
admi_istra_or
administra_or
administrator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution:</p>
<pre><code>import random

word = 'administrator'
result = [[x, '_'] for x in word]
for i in result:
    res = random.choice([x for x in result if x[1] == '_'])
    index = result.index(res)
    result[index][1] = result[index][0]
    print(''.join([x[1] for x in result]))
</code></pre>
<p>Output:</p>
<pre><code>____n________
____n___r____
____n_s_r____
____n_s_r__o_
____n_s_r__or
___in_s_r__or
a__in_s_r__or
a__in_str__or
ad_in_str__or
ad_in_stra_or
ad_inistra_or
ad_inistrator
administrator
</code></pre>
</div>
<span class="comment-copy">So you want to show letters one-by-one in random order?</span>
<span class="comment-copy">You could <code>count</code> the occurrence of the letter and can use <code>index</code> to find the index</span>
<span class="comment-copy">"Probably the solution is based on the fact that the script should extract indexes and not words, and fill the spot corrisponding to each index through a dictionary. I tried to do it, but I didn't manage to make it work." Yes that's exactly what the solution should be, so please show us your non-working attempt at the right solution so we can help fix.</span>
<span class="comment-copy">I added my attempt to solve the problem using the dictionary.</span>
