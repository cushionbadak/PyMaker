<div class="post-text" itemprop="text">
<h2> Example: </h2>
<pre><code>last_names = ['Bakir','Jose','Jose','Pierce']

university = ['Davis', 'Stanford', 'George Town', 'Berkeley']
</code></pre>
<h3> Desire the Following </h3>
<pre><code>resulting_dictionary = {'Bakir':'Davis', 'Jose': ['Stanford', 'George Town'], 'Pierce':'Berkeley'}
</code></pre>
<h3> I've tried the following </h3>
<pre><code>dictionary = {key:value for key, value in zip(last_names, university)}
</code></pre>
<p>But obtained the following:</p>
<pre><code>{'Bakir': 'Davis', 'Jose': 'George Town', 'Pierce': 'Berkeley'}
</code></pre>
<p>Due to duplicate key value in last name list. </p>
<p>Thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>defaultdict</code></p>
<pre><code>from collections import defaultdict

d = defaultdict(list)
for k, v in zip(last_names, university):
    d[k].append(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>dict.setdefault</code> method to initialize new keys with sub-lists:</p>
<pre><code>dictionary = {}
for k, v in zip(last_names, university):
    dictionary.setdefault(k, []).append(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to set the value to a list, and check whether the key already exists and append to it.</p>
<pre><code>dictionary = {}
for key, value in zip(last_names, university):
    if key in dictionary:
        dictionary[key].append(value)
    else:
        dictionary[key] = [value]
</code></pre>
<p>This will make all the values lists. It's generally easier if you're consistent about your data format, not mixing strings and lists. So the result will be:</p>
<pre><code>{'Bakir':['Davis'], 'Jose': ['Stanford', 'George Town']], 'Pierce':['Berkeley']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming, as the question seems to imply, that a list is not desired if only one value is present for a key, a simple flattening post-step can be used to achieve the specified result.</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)
for k, v in zip(last_names, university):
   d[k].append(v)

# flatten single entry lists back to a string
d = { k: v[0] if len(v) == 1 else v for k, v in d.items() }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>my_dict = {}
for key, value in zip(last_names, university):
    if key in my_dict:
        old_value = my_dict[key]
        if isinstance (old_value, str):
            my_dict[key] = [old_value, value]
        else:
            old_value.add (value)
    else:
        my_dict[key] = value
</code></pre>
</div>
<span class="comment-copy">Do you really want nested lists, not <code>['Stanford', 'George Town']</code>?</span>
<span class="comment-copy">I don’t see the point in a list of lists for Jose.  Wouldn’t <code>['Stanford', 'George Town']</code> suffice?</span>
<span class="comment-copy">I agree, no need for nested lists for Jose. That was a fluke on my behalf.</span>
<span class="comment-copy">@MBakir You should edit your question, not add requirements/clarifications as comments.</span>
