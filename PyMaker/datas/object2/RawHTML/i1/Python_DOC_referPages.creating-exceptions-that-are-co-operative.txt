<div class="post-text" itemprop="text">
<p>The Python <a href="https://docs.python.org/3.7/tutorial/errors.html#user-defined-exceptions" rel="nofollow noreferrer">docs</a> state:</p>
<blockquote>
<p>Programs may name their own exceptions by creating a new exception
  class (see Classes for more about Python classes). Exceptions should
  typically be derivedfrom the Exception class, either directly or
  indirectly.</p>
</blockquote>
<p>...</p>
<blockquote>
<p>When creating a module that can raise several distinct errors, a
  common practice is to create a base class for exceptions defined by
  that module, and subclass that to create specific exception classes
  for different error conditions.</p>
</blockquote>
<p>From <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">Pythonâ€™s super() considered super!</a>:</p>
<blockquote>
<p>Each level strips-off the keyword arguments that it needs so that the
  final empty dict can be sent to a method that expects no arguments at
  all (for example, object.<strong>init</strong> expects zero arguments)</p>
</blockquote>
<p>Suppose I have the following <code>StudentValueError</code> and <code>MissingStudentValue</code> exceptions.</p>
<pre><code>class StudentValueError(Exception):
    """Base class exceptions for Student Values"""
    def __init__(self, message, **kwargs):
        super().__init__(**kwargs)
        self.message = message # You must provide at least an error message.


class MissingStudentValue(StudentValueError):
    def __init__(self, expression, message, **kwargs):
        super().__init__(message, **kwargs)
        self.expression = expression

    def __str__(self):
        return "Message: {0} Parameters: {1}".format(self.message, self.expression)
</code></pre>
<p>I want to create exceptions that are co-operative. I have two questions: </p>
<ol>
<li>In that case, the <code>Exception</code> class constructor expects zero arguments (empty <code>dict</code>), correct?</li>
<li>Does my example violate LSP?</li>
</ol>
<p>The accepted answer provided <a href="https://stackoverflow.com/a/26938914/11217210">here</a> inherits from <code>ValueError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Exception</code> takes no keyword arguments, it takes only variable amount of positional parameters via <code>*args</code>, so you need to change <code>**kwargs</code> to <code>*args</code>. Also I would recommend to pass <code>message</code> and <code>expression</code> together with <code>*args</code> to <code>super()</code> call. After all, the example, which probably doesn't violate LSP:</p>
<pre><code>class StudentValueError(Exception):
    """Base class exceptions for Student Values"""
    def __init__(self, message='', *args):
        super().__init__(message, *args)
        self.message = message 


class MissingStudentValue(StudentValueError):
    def __init__(self, message='', expression='', *args):
        super().__init__(message, expression, *args)
        self.expression = expression

    def __str__(self):
        return "Message: {0} Parameters: {1}".format(self.message, self.expression)


e = Exception('message', 'expression', 'yet_another_argument')
print(e)
e = StudentValueError('message', 'expression', 'yet_another_argument')
print(e)
e = MissingStudentValue('message', 'expression', 'yet_another_argument')
print(e)
e = MissingStudentValue()
print(e)
</code></pre>
</div>
<span class="comment-copy">Thanks for your answer. Does it say anywhere in the documentation that <code>Exception</code> takes <code>*args</code>? Because even the linked answer uses <code>**kwargs</code>. Does my example in my question violate LSP?</span>
<span class="comment-copy">Unfortunately, I can't find info about it in the doc. I tested it at runtime: trying to pass a keyword argument like <code>e = MissingStudentValue('message', 'expression', something='something')</code> leads to an error: <code>TypeError: Exception does not take keyword arguments</code> when calling <code>super()</code></span>
<span class="comment-copy">I see, but does my example violate LSP as it is?</span>
<span class="comment-copy">Yes, and I realized that my answer also vilotes it. It is needed to pass a default value to all arguments, because base class <code>Exception</code> can be instanciated without any arguments like <code>e = Exception()</code>. I updated my answer and now custom exceptions also can be initialized without passing any arguments (see last example).</span>
<span class="comment-copy">So, your code violates because <code>e = Exception()</code> can be done but <code>e = MissingStudentValue()</code> can not, it will raise <code>TypeError: __init__() missing 2 required positional arguments: 'message' and 'expression'</code></span>
