<div class="post-text" itemprop="text">
<p>I have two lists which contain terms in strings format. Those terms belong to two categories: fruits and vehicles. I am trying to display a dataframe only containing pairs of terms from conflicting categories. What would be the best approach to do that? Below is an example of my list and a dataframe. Any help would be greatly appreciated!</p>
<pre><code>  dataframe:

         col 1                 
  ['apple', 'truck' ]
  ['truck', 'orange']
  ['pear',  'motorcycle']
  ['pear', 'orange' ]
  ['apple', 'pear'  ]
  ['truck', 'car'   ]


  vehicles = ['car', 'truck', 'motorcycle']
  fruits = ['apple', 'orange', 'pear']


  desired output:

        col 2

  ['apple', 'truck' ]
  ['pear', 'motorcycle']
  ['truck', 'orange']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create <code>DataFrame</code> from lists column, test membership by <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.isin.html" rel="nofollow noreferrer"><code>DataFrame.isin</code></a>, then invert masks by <code>~</code>, check at least one <code>True</code> per row with <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.any.html" rel="nofollow noreferrer"><code>DataFrame.any</code></a> for both lists and last chain conditions by bitwise AND - <code>&amp;</code> with filtering by <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#boolean-indexing" rel="nofollow noreferrer"><code>boolean indexing</code></a>:</p>
<pre><code>df1 = pd.DataFrame(df['col 1'].values.tolist())
df = df[(~df1.isin(vehicles)).any(axis=1) &amp; (~df1.isin(fruits)).any(axis=1)]
print (df)
                col 1
0      [apple, truck]
1     [truck, orange]
2  [pear, motorcycle]
</code></pre>
<p>Another solution with intersection of <code>set</code>s chained by <code>and</code> (because scalars) and cast to <code>bool</code> - empty sets are converted to <code>False</code>:</p>
<pre><code>def func(x):
    s = set(x)
    v = set(vehicles)
    f = set(fruits)
    return bool((s &amp; v) and (s &amp; f))

df = df[df['col 1'].apply(func)]
print (df)
                col 1
0      [apple, truck]
1     [truck, orange]
2  [pear, motorcycle]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May be <code>np.isin</code> could be useful for you!</p>
<pre><code>super_set = np.array([vehicles,fruits])

def f(x):
    return all(np.isin(super_set,x).sum(axis=1))

df[df.col1.apply(f)]

#
col1
0   [apple, truck]
1   [truck, orange]
2   [pear, motorcycle]
</code></pre>
</div>
<span class="comment-copy">What have you tried so far?</span>
