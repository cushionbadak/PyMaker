<div class="post-text" itemprop="text">
<p>Here is my code. I cannot seem to pick a different color for each branch. It just chooses randomly from the list that I presented. </p>
<pre class="lang-python prettyprint-override"><code># Multi-color Snowflake Turtle

import turtle

# Assign a name to your turtle
snow = turtle.Turtle()
snow.shape("turtle")

colors = ["blue", "red", "yellow", "green"]

# Declare the function, snowflake
def snowflake(size, pensize, x, y):
    # turtle.pen(pensize=10)
    snow.penup()
    snow.goto(x, y)
    snow.forward(10*size)
    snow.left(45)
    snow.pendown()
    for color in colors:
        snow.color(color)

    for i in range(8):
        branch(size)
        snow.left(45)

# Create the branches
def branch(size):
    for i in range(3):
        for i in range(3):
            snow.forward(10.0*size/3)
            snow.backward(10.0*size/3)
            snow.right(45)
        snow.left(90)
        snow.backward(10.0*size/3)
        snow.left(45)
    snow.right(90)
    snow.forward(10.0*size)


snowflake(8, 6, 0, 0)
</code></pre>
<p>I'm still unfamiliar with all the different things you can do with Python. I don't know if there's maybe a way to do multi-color. I would do each branch separately but the whole goal is to use a function. I just can't seem to figure out how to incorporate multiple colors into a function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your current code always draws your snowflakes in green because your loop setting colors runs before the loop drawing the branches of the snowflake. If you want to be selecting a color as you draw, you need to merge the two loops into one.</p>
<p>Here's on simple way, which will give each branch a separate color, repeating when they've all been used:</p>
<pre><code>for i in range(8):
    snow.color(colors[i%4])
    branch(size)
    snow.left(45)
</code></pre>
<p>That's rather deterministic though, it will always go through the color list in the order you wrote it in. You could mix things up by shuffling the list for each snowflake, using <code>random.shuffle</code> (you'll need to <code>import random</code> first). Or there are lots of other options, depending on the effect you want. You could use <code>random.choice</code> to pick a random color for each branch, for example.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following up on @Blckknght's excellent introduction (+1) to this issue, this is more complicated than one might expect.  If we use the modulus (%) approach, even if we shuffle colors, we get repeated patterns, e.g. the first and fifth branch are always the same color, whatever that color may be, etc.</p>
<p>The number of colors is less than the number of branches, we truly want random, and we don't want adjacent branches the same color.  That last criteria seems easy until we realize we don't want the final branch the same color as the first one as we come back around!  So, we might try something like:</p>
<pre><code>first_color = random.choice(colors)
snow.pencolor(first_color)

for flag in range(-6, 2):

    branch(distance)
    snow.left(45)

    new_color = old_color = snow.pencolor()

    while new_color == old_color or (not flag and new_color == first_color):
        new_color = random.choice(colors)

    snow.pencolor(new_color)
</code></pre>
<p>The weird <code>range(-6, 2)</code> looping construct is to allow <code>flag</code> to go <code>False</code> (0) only the one iteration where we need to make sure the first and last branches don't match color-wise.  The complete code:</p>
<pre><code># Multi-color Snowflake Turtle

from turtle import Screen, Turtle
from random import choice

COLORS = ["blue", "red", "yellow", "green"]

# Declare the function, snowflake
def snowflake(size, pensize, x, y):
    snow.width(pensize)

    distance = 10 * size

    snow.penup()
    snow.goto(x, y)
    snow.forward(distance)
    snow.left(45)
    snow.pendown()

    first_color = choice(COLORS)
    snow.pencolor(first_color)

    for flag in range(-6, 2):

        branch(distance)
        snow.left(45)

        new_color = old_color = snow.pencolor()

        while new_color == old_color or (not flag and new_color == first_color):
            new_color = choice(COLORS)

        snow.pencolor(new_color)

    snow.hideturtle()

# Create the branches
def branch(distance):

    for _ in range(3):
        for _ in range(3):
            snow.forward(distance / 3)
            snow.backward(distance / 3)
            snow.right(45)
        snow.left(90)
        snow.backward(distance / 3)
        snow.left(45)

    snow.right(90)
    snow.penup()
    snow.forward(distance)
    snow.pendown()

# Assign a name to your turtle
snow = Turtle("turtle")

screen = Screen()

snowflake(8, 6, 0, 0)

screen.exitonclick()
</code></pre>
<p><a href="https://i.stack.imgur.com/bN1NY.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/bN1NY.png"/></a></p>
</div>
