<div class="post-text" itemprop="text">
<p>The following code works well in Python 2:</p>
<pre><code>import ctypes

def test():
    OpenSCManager      = ctypes.windll.advapi32.OpenSCManagerA
    CloseServiceHandle = ctypes.windll.advapi32.CloseServiceHandle

    handle = OpenSCManager(None, None, 0)
    print(hex(handle))
    assert handle, ctypes.GetLastError()
    assert CloseServiceHandle(handle), ctypes.GetLastError()

test()
</code></pre>
<p>It does not work in Python 3:</p>
<pre><code>0x40d88f90
Traceback (most recent call last):
  File ".\test1.py", line 12, in &lt;module&gt;
    test()
  File ".\test1.py", line 10, in test
    assert CloseServiceHandle(handle), ctypes.GetLastError()
AssertionError: 6
</code></pre>
<p>6 means invalid handle.</p>
<p>It seems that in addition, the handles retrieved in Python 2 are smaller numbers, such as 0x100ffc0. It isn't something specific with <code>CloseServiceHandle</code>. This handle cannot be used with any service function.</p>
<p>Both Python versions are 64 bit native Windows Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>argtypes</code> and <code>restype</code> otherwise all argument default to int and are truncated in 64-bit. Also you shouldn't call <code>GetLastError</code> directly but use <code>ctypes.get_last_error()</code>which cache the last error code (there might have been windows APIs called by the interpreter after you perform a call, you can't be sure).</p>
<p>Here's a working example:</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import ctypes


def test():
    advapi32 = ctypes.WinDLL("advapi32", use_last_error=True)
    OpenSCManager = advapi32.OpenSCManagerA
    OpenSCManager.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_ulong]
    OpenSCManager.restype = ctypes.c_void_p

    CloseServiceHandle = advapi32.CloseServiceHandle
    CloseServiceHandle.argtypes = [ctypes.c_void_p]
    CloseServiceHandle.restype = ctypes.c_long

    handle = OpenSCManager(None, None, 0)
    if not handle:
        raise ctypes.WinError(ctypes.get_last_error())
    print(f"handle: {handle:#x}")

    result = CloseServiceHandle(handle)
    if result == 0:
        raise ctypes.WinError(ctypes.get_last_error())

def main():
    test()


if __name__ == "__main__":
    sys.exit(main())
</code></pre>
</div>
<span class="comment-copy">Seems much more likely that the real difference is 32 and 64 bit. Anyway, make sure you specify argtypes and restype.</span>
