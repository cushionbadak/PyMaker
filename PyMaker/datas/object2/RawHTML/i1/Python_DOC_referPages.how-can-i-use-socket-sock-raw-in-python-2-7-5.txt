<div class="post-text" itemprop="text">
<p>I am trying to open a raw socket with Python under linux.</p>
<p>My simple code:</p>
<pre><code>s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
s.bind((HOST, 5454))
</code></pre>
<p>And I got this error:</p>
<pre><code>[ERROR] Protocol not supported
</code></pre>
<p>By the way, I am using python 2.7.3 under linux 12.04, and I used root to run the code.</p>
<p>Does anyone have a clue?</p>
<p>Update: My soultion,
The solution given by dstromberg is correct. If you want all the packet, then use his solution.
However, there is another combination, </p>
<pre><code>s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
</code></pre>
<p>also works.</p>
<p>In this case, you will receive all the TCP packet with IP and TCP header on it.
If your use dstromberg's solution, you will also see the ethernet header. So it depends on how 'raw' you want your packet be~~</p>
</div>
<div class="post-text" itemprop="text">
<p>Try socket.AF_PACKET instead of socket.AF_INET.</p>
</div>
<div class="post-text" itemprop="text">
<p>This runs without error as root:</p>
<pre><code>#!/usr/local/cpython-3.3/bin/python

import socket as socket_mod

#s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_IP)
socket = socket_mod.socket(socket_mod.AF_PACKET, socket_mod.SOCK_RAW, socket_mod.IPPROTO_IP)
#socket.bind(('localhost', 5454))
socket.bind(('lo', 5454))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try socket.AF_UNIX, it can solve your problem, good luck.</p>
</div>
<span class="comment-copy">FYI I get the same error when running it as root.</span>
<span class="comment-copy">Try <code>AF_UNIX</code>, instead of <code>AF_INET</code>.</span>
<span class="comment-copy">@Anthony, It seems work. I got new error, though. Let me do some test and see whether it works. Thanks for advice~~~</span>
<span class="comment-copy">Are you trying to receive all IP packets? All packets? Or all packets of a specific IP protocol?</span>
<span class="comment-copy">@Robᵩ,All Packets. We have conversation in another post. And this is the way for me to bypass the TCP part. If I can receive all the packet then I can acheive the goal: one socket send, one socket receive.</span>
<span class="comment-copy">I tried, and I got "[ERROR] No such device". It confused me, actually.</span>
<span class="comment-copy">@JerryMeng - What OS are you running on? On Ubuntu 12.04, with root privileges, <code>socket.socket(socket.AF_PACKET, socket.SOCK_RAW)</code> worked for me.</span>
<span class="comment-copy">@Robᵩ then how do you bind your socket to a host? like s.bind((HOST, 5454))? I got  "[ERROR] No such device". And by the way, If I use AF_PACKET, why I don't need to specify the proto argument?</span>
<span class="comment-copy">@JerryMeng 1) You don't bind raw sockets to hosts. You are bypassing IP, so you don't get any of its features. 2) I  didn't specify a protocol because you said "All Packets".</span>
<span class="comment-copy">@JerryMeng - You can bind raw sockets to a specific device &amp; protocol. So, you might try <code>s.bind(("eth0", 0x0800))</code>.</span>
<span class="comment-copy">In fact, I have figured it out. And the second line is not right. 5454 won't give your error, neither any packet. 0x0800 is the correct port to use. Thanks for answering~~</span>
