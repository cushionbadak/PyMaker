<div class="post-text" itemprop="text">
<p>I was using boost and QuantLib to produce a 'Array' containing random numbers (standard normal distributed). However, I noticed that the computation performance was not very desirable, and the speed was much slower than simply using numpy of python. Can anyone give me some suggestions?
Many thanks.</p>
<p>Here is my c++ code:</p>
<pre><code>using namespace QuantLib;
Array generateRandNumbers(unsigned long seed, Size n) { 
    Array res(n);
    boost::mt19937 rnd(seed); 
    boost::normal_distribution&lt;&gt; normDist(0, 1); 
    boost::variate_generator&lt;boost::mt19937&amp;, boost::normal_distribution&lt;&gt;&gt; generator_norm(rnd, normDist); 
    BOOST_FOREACH(Real&amp; x, res) x = generator_norm();

    return res;
}

int main() 
{
    unsigned long seed = 1; 
    Size n = 1e6;
    boost::timer timer;
    Array randNumbers = generateRandNumbers(seed, n); 
    std::cout &lt;&lt; timer.elapsed() &lt;&lt; std::endl; 
    return 0
}
</code></pre>
<p>And this is my python code:</p>
<pre><code>import numpy as np
import time

ts = time.time()
res = np.random.normal(0, 1, 1000000); 
print(time.time() - ts)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>You asked:</strong> </p>
<blockquote>
<p>Can anyone give me some suggestions?</p>
</blockquote>
<p>The programing language isn't likely to be play a major factor here. Therefore this questions comes down to other parameters:</p>
<ol>
<li>Random number algorithm used (eg. Mersenne Twister)</li>
<li>Implementation details of algorithm that may affect perfomance</li>
<li>How the code is compiled, linked and run. (release, debugging session, compiler optimizations)</li>
</ol>
<p>As for the last point - make sure that when making comparison you always use an optimized release build.</p>
</div>
<span class="comment-copy">Hello to stack overflow (SO).  We here at SO are eager to help you, but please play along our rules, to make it easier for us.  Consider reading through the <a href="https://stackoverflow.com/help">Help</a> and  taking the <a href="https://stackoverflow.com/tour">Tour</a>.  Especially consider reading through  <a href="https://stackoverflow.com/help/how-to-ask">How do I ask a good question?</a> and  <a href="https://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Did you compile the C++ code with optimizations turned on?  What were the results of each program?</span>
<span class="comment-copy">@Caleth in this case we lack the crucial information regarding the compiler, release/debug build type, optimisations flags, specific benchmark results and the hardware.</span>
<span class="comment-copy">In my tests with slightly modified <code>C++</code> code (using <code>std::</code> not boost) they run about the same speed with <code>C++</code> being slightly faster.</span>
<span class="comment-copy">@Caleth i do not want to be mean or something... i just want to point out, that we cant find an answer, without the supported details</span>
<span class="comment-copy">"We all know that c++ is as fast or potential faster than Python can be." citation needed. One of numpy's great strengths is that it is <i>heavily optimised</i></span>
<span class="comment-copy">@Caleth ..and implemented in c/c++ if im not mistaken ?</span>
<span class="comment-copy">My main point is that <i>languages</i> are not fast or slow. <i>language implementations</i> are. <code>c/c++</code> is not a thing. C is a distinctly different language to C++</span>
<span class="comment-copy">@Caleth to me darune is not implying that there are implementations in the language called <code>C/C++</code>. He is implying that it's implemented in either of those. I know that "<code>C/C++</code>" is a sensitive topic, but don't forget that the <code>/</code> <i>can</i> also represent logical <i>or</i> in sentence construction. But I do fully agree on <i>implementations</i> being the key, not the <i>languages</i> themselves.</span>
<span class="comment-copy">@Caleth It's just that, a lot of times, many mainstream python libraries are implemented using c/c++ as a goto language because implementing in the language itself (Python) would be too slow- and that the OP seem to imply that somehow the python example is faster.</span>
