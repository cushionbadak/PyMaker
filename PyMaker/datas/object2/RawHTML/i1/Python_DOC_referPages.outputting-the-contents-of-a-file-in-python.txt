<div class="post-text" itemprop="text">
<p>I'm trying to do something simple but having issues.</p>
<p>I want to read in a file and export each word to different columns in an excel spreadsheet.  I have the spreadsheet portion, just having a hard time on what should be the simple part.</p>
<p>What I have happening is each character is placed on a new line.</p>
<p>I have a file called server_list.  That file has contents as shown below.</p>
<pre><code>Linux RHEL64 35
Linux RHEL78 24
Linux RHEL76 40
</code></pre>
<p>I want to read each line in the file and assign each word a variable so I can output it to the spreadsheet.</p>
<pre><code>File = open("server_list", "r")
FileContent = File.readline()

for Ser, Ver, Up value in FileContent:
    worksheet.write(row, col,     Ser)
    worksheet.write(row, col +1,     Ver)
    worksheet.write(row, col +1,     Up)
    row += 1
</code></pre>
<p>I'm getting the following error for this example</p>
<pre><code>Traceback (most recent call last):
  File "excel.py", line 47, in &lt;module&gt;
    for Files, Ver, Uptime in FileContent:
ValueError: not enough values to unpack (expected 3, got 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>FileContent</code> is a string object that contains a single line of your file:</p>
<pre><code>Out[4]: 'Linux RHEL64 35\n'
</code></pre>
<p>What you want to do with this string is <code>strip</code> the ending tag <code>\n</code> then <code>split</code> into single words. Only at this point you can do the item assignment that currently leads to your <code>ValueError</code> in your <code>for</code>-statement.
In python this means:</p>
<pre><code>ser, ver, up = line.strip().split()  # line is what you called FileContent, I'm allergic to caps in variable names
</code></pre>
<p>Now note that this is just one single line we are talking about. Probably you want to do this for all lines in the file, right?
So best is to iterate over the lines:</p>
<pre><code>myfile = "server_list"
with open(myfile, 'r') as fobj:
    for row, line in enumerate(fobj):
        ser, ver, up = line.strip().split()
        # do stuff with row, ser, ver, up
</code></pre>
<p>Note that you do not need to track the <code>row</code> yourself you can use the <code>enumerate</code> iterator to do so.</p>
<p>Also note, and <strong>this is crucial</strong>: the <code>with</code> statement I used here makes sure that you do not leave the file open. Using the <code>with</code>-clause whenever you are working with files is a good habit!</p>
</div>
<span class="comment-copy">Change <code>FileContent()</code> to <code>FileContent</code> in the for loop</span>
<span class="comment-copy">Make it <code>for Ser, Ver, Up value in File:</code>, scrap the whole <code>readline</code> thing. (And do not start variable names with a capital letter.)</span>
<span class="comment-copy">Please tag your question with the name of the library you're using to write the Excel file / worksheet.</span>
<span class="comment-copy">try <code>for ser, ver, up in file.readline().strip().split():</code></span>
<span class="comment-copy">not sure if its appropriate to mention style here but capital letters at the start of names are usually only reserved for classes.</span>
<span class="comment-copy">This looks like it might work and I do appreciate the time you took to do it.  I will give it a shot.</span>
<span class="comment-copy">@AzCactusJack did it work for you?</span>
<span class="comment-copy">I did incorporate your changes and they work like a charm, thank you.</span>
<span class="comment-copy">@AzCactusJack cool! glad to help! Please consider accepting my answer then :)</span>
<span class="comment-copy">I clicked on the check mark, I hope that means I accepted your answer.  Sorry for the delay.</span>
