<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/43498841/combine-nested-for-loops-in-python">Combine nested for loops in python</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>So I have this problem:
Imagine having a variable "N" which is an integer.
What I want is to make all combinations of values for this number of "spaces", an example to make it easier:</p>
<pre><code>N = 2
result = []
for i in range(0,100,25):
    for j in range(0,100,25):
        result.append((i,j))
print(result)
</code></pre>
<p>this will give<br/>
<code>result = [(0, 0), (0, 25), (0, 50), (0, 75), (25, 0), (25, 25), (25, 50), (25, 75), (50, 0), (50, 25), (50, 50), (50, 75), (75, 0), (75, 25), (75, 50), (75, 75)]</code></p>
<p>The objective is to give all the combinations between 0 and 100 with a 25 step.<br/>
The same would go for 3 variables... <code>[(0,0,0),(0,0,25),...,(25,50,50),...]</code><br/>
 If I wanted N = 3 I had to use 3 for cycles. I want to know how can I program this in a different way so that I can input any N and it gives the proper result.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want is a cartesian product of several lists, and there is function <code>product</code> in module <code>itertools</code> which does just that:</p>
<pre><code>from itertools import product
result = list(product(range(0,100,25),
                      range(0,100,25)))
#[(0, 0), (0, 25), (0, 50), (0, 75), (25, 0), (25, 25), 
# (25, 50), (25, 75), (50, 0), (50, 25), (50, 50), 
# (50, 75), (75, 0), (75, 25), (75, 50), (75, 75)]
</code></pre>
<p>You can pass as many ranges as you want, and they don't have to be the same.</p>
<p>If you later plan to use the generated tuples in a loop, do not coerce the result of <code>product</code> into a list:</p>
<pre><code>for tup in product(range(0,100,25), ...):
    do_something_with(tup)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import product

N = 2
START = 0
END = 100
STEP = 25

rng = range(START, END, STEP)

for tup in product(rng, repeat = N):
    print(tup)
</code></pre>
</div>
<span class="comment-copy">is this homework? are there any restrictions?</span>
<span class="comment-copy">No, this isn't homework., it's to create a state space. The range is the same for every variable which should make it easier.</span>
<span class="comment-copy">Maybe try thinking about it like you are counting in quarter-nary (with 4 digits). First you count up to 100 in the least significant place, going up by a step of 25 each time. Then, when you hit 100, you add 25 to the next least significant place, etc. Doing something like this should be easy to generalize.</span>
<span class="comment-copy">I see, that would be a good hand made alternative @agaidis . From the answers I've seen that there is the module product from itertools that's literally made to do this. Thanks for the input!</span>
<span class="comment-copy">Why wouldn't I still save it in a list to use later?</span>
<span class="comment-copy">To save space, as a cartesian product may be quite large.</span>
