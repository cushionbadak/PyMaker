<div class="post-text" itemprop="text">
<p>I have the following Python metaclass that adds a <code>deco_with_args</code> decorator to each class:</p>
<pre><code>def deco_with_args(baz):
    def decorator(func):
        ...
        return func
    return decorator

class Foo(type):
    def __prepare__(name, bases):    
        return {'deco_with_args': deco_with_args}
</code></pre>
<p>This allows me to use the decorator like this:</p>
<pre><code>class Bar(metaclass=Foo):
    @deco_with_args('baz')
    def some_function(self):
        ...
</code></pre>
<p>How do I make the <code>deco_with_args</code> decorator behave like an <code>@classmethod</code> so that I can access the <code>Bar</code> class (or whatever other class) from within the <code>decorator</code> function?</p>
<p>I have tried using <code>@classmethod</code> on the <code>deco_with_args</code> function with no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two interpretations on your question - if you need <code>cls</code> to be available when the function named <code>decorator</code> in your example is called (i.e. you need your decorated methods to become class methods), it suffices that itself is transformed into a classmethod:</p>
<pre><code>def deco_with_args(baz):
    def decorator(func):
        ...
        return classmethod(func)
    return decorator
</code></pre>
<p>The second one is if you need <code>cls</code> to be available when <code>deco_with_args</code> itself is called, when creating the decorated function itself, at class creation. The answer that is listed as accepted right now lists the straightforward problem with that: <strong>The class does not exist yet when the class body is run</strong>, so, there is no way that at the end of parsing the class body you can have methods that would have known of the class itself.</p>
<p>However, unlike that answer tries to imply, that is not a real deal. All you have to do is to run your decorator code (the code that needs the <code>cls</code>) lazily, at the end of the class creation process. You already have a metaclass setup, so doing this is almost trivial, by just adding another callable layer around your decorator-code:</p>
<pre><code>def deco_with_args(baz):
    def outter_decorator(func):
        def decorator(cls):
            # Code that needs cls at class creation time goes here
            ...

            return func
        return decorator
    outter_decorator._deco_with_args = True
    return outter_decorator

class Foo(type):
    def __prepare__(name, bases):    
        return {'deco_with_args': deco_with_args}

    def __init__(cls, cls_name, bases, namespace, **kwds):
        for name, method in cls.__dict__.items():
            if getattr(method, '_deco_with_args', False):
                cls.__dict__[name] = method(cls)

        super().__init__(cls_name, bases, namespace, **kwds)
</code></pre>
<p>This will be run, of course, after the class body execution is complete, but before any other Python statement after the <code>class</code> is run. 
If your decorator would affect other elements that are executed inside the class body itself, all you need to do is to wrap those around to warrant a lazy-execution as well.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>@classmethod</code> does nothing useful for your decorator because it's not invoked through a class or instance. <code>classmethod</code> is a <a href="https://docs.python.org/3/glossary.html#term-descriptor" rel="nofollow noreferrer">descriptor</a>, and descriptors only take effect on <em>attribute access</em>. In other words, it would only help if the decorator was called like <code>@Bar.deco_with_args('baz')</code>.</p>
<p>The next problem is that the class <em>does not exist yet</em> at the time the decorator is executed. Python executes all of the code in the function body <em>before</em> creating the class. So it's impossible to access the class in <code>deco_with_args</code> or <code>decorator</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.7/howto/descriptor.html#descriptor-protocol" rel="nofollow noreferrer">descriptor protocol</a> to capture your calls to the method and add the class as parameter on the fly:</p>
<pre class="lang-py prettyprint-override"><code>def another_classmethod(baz):

  class decorator:
    def __init__(self, func):
      self.func = func
    def __get__(self, instance, owner):
      def new_call(*args, **kwargs):
        print(baz, self.func(owner, *args, **kwargs))
      return new_call

  return decorator


class Bar():
    @another_classmethod('baz')
    def some_function(cls):
        return f"test {cls.__name__}"

Bar.some_function()
</code></pre>
<p>This prints: </p>
<pre><code>baz test Bar
</code></pre>
<p>The main "trick" here is that the protocol when calling <code>Bar.some_function()</code> is to first call <code>__get__</code> then <code>__call__</code> on the function returned by <code>__get__</code>. </p>
<p>Note that <code>__get__</code> is also called when you just do <code>Bar.some_function</code> that's what is used in decorators like <code>@property</code>. </p>
<p>One small remark, when using classmethod you are not supposed to name your first parameter <code>self</code> as it is confusing (it would make people think that the first parameter is an instance instead of a class object/type).</p>
</div>
<span class="comment-copy">Are you sure you want to use a metaclass just to define a decorator?</span>
<span class="comment-copy">@DeepSpace There are reasons for it. It's a follow-up for <a href="https://stackoverflow.com/q/55190574/1222951">this question</a>.</span>
<span class="comment-copy">Welp, I just realized that this isn't possible. Time to rewrite my 60%-finished answer...</span>
<span class="comment-copy">To clarify: Do you need access to the class in <code>test</code> or in <code>decorator</code>?</span>
<span class="comment-copy">Just inside <code>decorator</code>.</span>
<span class="comment-copy">Still broken. <code>decorator</code> is never executed. <code>outter_decorator._deco_with_args = True</code> needs to be changed to <code>decorator._deco_with_args = True</code> and <code>cls.__dict__[name] = method(cls)</code> needs to be <code>setattr(cls, name, method(cls))</code>.</span>
<span class="comment-copy">This is more what I was looking for. Is it right for me to change the accepted answer?</span>
<span class="comment-copy">I think so - I even commented of the possibility with the author of the original answer, and he expressed that he preferred to keep it that way. So, if this works better, it makes sense for this to be accepted.</span>
<span class="comment-copy">I know I'm probably getting on your nerves at this point, but why didn't you fix that one last bug?</span>
<span class="comment-copy">It was about having two "name" variables, right? I did not fix it when you spotted, but yes, it is fixed by now.</span>
<span class="comment-copy">"impossible" things are exactly what metaclasses where designed to overcome.</span>
<span class="comment-copy">@jsbueno Well, it's true that whatever the OP is trying to achieve can probably be done with a metaclass. But it's undeniable that there's no way to access the class within this decorator. I'm not sure if I want to expand my answer to include a generic "You can write a decorator that marks functions and then post-process the marked functions in your metaclass's <code>__init__</code>" hack that people will likely use to create horrible code. 9 times out of 10, there's no real need for something like that.</span>
<span class="comment-copy">@Aran-Fey I actually wanted access to the class in order to mark the functions: <code>cls.marked_functions.append(func)</code>. How would you do it without the class?</span>
<span class="comment-copy">@DavidCallanan I'd just set an attribute like <code>func.marked = True</code>.</span>
<span class="comment-copy">I don't think the OP wanted to turn <code>some_function</code> into a classmethod. That would be easy. Just slap on a <code>@classmethod</code> and you're done. Implementing your own descriptor for this looks like overkill to me.</span>
<span class="comment-copy">That's what the question says, I'm not even reading between the lines "How do I make the deco_with_args decorator behave like an @classmethod"</span>
<span class="comment-copy">My point exactly. It doesn't say "How do I make <code>some_function</code> behave like a classmethod".</span>
<span class="comment-copy">I don't get your point, the goal here is to have a decorator, that behave like classmethod, with arguments added to the decorator .</span>
<span class="comment-copy">It's not overkill as the <code>classmethod</code> decorator takes no parameter and even if it did it wouldn't call something like <code>print(baz, func())</code>.</span>
