<div class="post-text" itemprop="text">
<p>So I am writing up a project that checks for errors in email characters. I have searched here without something that was helpful, as well as on duckduckgo. It runs okay, but I am seeing the following on shell:</p>
<pre><code>e mail: abc @ xyz.com   *** ERROR: 2. The number of @'s in your email is suspect. ***
e mail: .abc@xyz.com    *** ERROR: 2. The number of @'s in your email is suspect. ***
e mail: abc@xyz.c   *** ERROR: 2. The number of @'s in your email is suspect. ***
</code></pre>
<p>Notice the <code>testAtsign</code> function (<code>2. The number of @'s in your email is suspect.</code>) is kind of taking over space where other errors should be shown such as unallowed special chars?</p>
<p>I think there is an issue with my <code>testSpecialChars</code> function that is allowing the <code>testAtsign</code> function to take over. Could it be an issue with the unallowable list?</p>
<p>Any ideas are greatly appreciated.</p>
<pre><code>emailList = ["abc@xyz.com",
             "abc@@xyz.com",
             "@xyz.com",
             "abc.xyz.com",
             "abc@x.yz",
             "abc@xyz.c",
             "a@b.c",
             "abc@xyz..com",
             "abc.@xyz.com",
             "abc@.xyz.com",
             "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@aaaaaa.aaaaa",
             "' or 1=1 '==",
             "abc@xyz.$%",
             "abc@xyz.()",
             "abc'@xyz.com",
             "aaaaa@aaaaa",
             "abc @ xyz.com",
             ".abc@xyz.com",
             "abc@xyz.c"]



def errorMessage(email, error):
    print("e mail: {} \t*** ERROR: {} ***".format(email, error))

def testAtsign (email):
    if "@" in email:
        #should be 1 @
        #are there more?
        atCount = 0
        for character in email:
            if character == "@":
                atCount += 1

            if atCount != 1:
                errorMessage(email, "2. The number of @'s in your email is suspect.")
                return True
            elif email[0] == "0":
                errorMessage(email, "3.The @ is not in a valid position.")
                return True
            else:
                testLast5 = email[-5]
                if "@" in testLast5:
                    errorMEssage(email, "4. Okay, your @ is not in the last 5 characters, whats up with you?")
                    return True
                else:
                    return False
    else:
        errorMessage(email, "5. your @ is missing")
        return True


def testDot(email):
    if "." in email:
        #has to be at least ONE

        if email[0] == ".":
            errorMessage(email, "10. Your '.' is in the first position.")
            return True
        testLast2 = email[-2:]
        if "." in testLast2:
            errorMessage(email, "11. Your '.' is in the last position.")
            return True
        #should not be doubled or next to @
        elif ".." in email or ".@" in email or "..@" in email or "@." in email or "@.." in email:
            errorMessage(email, "6. Were sensing an erorr in your '.' config.")
            return True

    else:
        errorMessage(email, "7. Where is the '.'?")
        return True

def testSpecialChars(email) :
    #first test for spaces
    if " " in email:
        errorMessage(email, "8. We dont allow spaces in our emails here.")
        return True

    #create list of unallowables
    unallowable = "! # $ % ^ &amp; * ( ) : ; &lt; &gt; ? / { } =".split()
    #add quotes
    unallowable.append('"')
    unallowable.append("'")

    for character in email:
        if character in unallowable:
            errorMEssage(email, "9. Character {} is not allowed".format(character))
            return True









for email in emailList:
    foundError = False
    if len(email) &lt; 7 or len(email) &gt; 30:
        errorMessage(email, "1. Invalid Length")  #labeling the errors with numbers to keep track
        foundError = True

    if not foundError:
        foundError = testAtsign(email)

    if not foundError:
        foundError = testDot(email)
    if not foundError:
        foundError = testSpecialChars(email)

    if not foundError:
        print("Rad, your email seems valid.".format(email))

    print("flag")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this function the <code>testAtsign</code> the code loops over the email address to count "@" characters, and performs checks on the count <em>inside the loop</em>.  Consequently, unless the first character in the address is "@" the function will always return <code>True</code> because the count of "@" is not equal to one.</p>
<p>Fix this by moving the checks outside the loop; in fact, the loop can be removed altogether by using Python strings' <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow noreferrer">count</a> method to get the number of "@" characters in each address.</p>
<p>The fixed function would look like this:</p>
<pre><code>def testAtsign(email):
    if "@" in email:
        # should be 1 @
        # are there more?
        atCount = email.count("@")

        if atCount != 1:
            errorMessage(email, "2. The number of @'s in your email is suspect.")
            return True
        elif email[0] == "0":  # &lt;- this might need fixing?
            errorMessage(email, "3.The @ is not in a valid position.")
            return True
        else:
            testLast5 = email[-5]  # &lt;- this only gets a single character
            if "@" in testLast5:
                errorMessage(
                    email,
                    "4. Okay, your @ is not in the last 5 characters, whats up with you?",
                )
                return True
            else:
                return False
    else:
        errorMessage(email, "5. your @ is missing")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are checking for testAtsign() first. Inside the function, if any error is detected you are changing the value of foundError to 'True'. Since the value of foundError is updated to True, all other 'if' conditions (for testDot() and testSpecialChars()) fail and don't execute at all. It is the same with the if statement <code>if len(email) &lt; 7 or len(email) &gt; 30</code>. The moment this is true, and foundError is updated to True inside it, even testAtSign() will not execute.</p>
</div>
