<div class="post-text" itemprop="text">
<p>Basically, I am wondering what is <strong>the most efficient method</strong> to find the elements of a python list with a value of greater than, say, n.</p>
<p>I believe, the easiest, yet not so efficient, way is as below,</p>
<pre><code>for i in range(len(theList)):
    if theList[i] &gt; n:
        subList.append(theList[i])
</code></pre>
<p>Moreover, we have the single line <code>for</code> as below,</p>
<pre><code>(subList for subList in theList if sublist &gt; n)
</code></pre>
<p>(Please correct me if there is anything wrong with the above syntax)</p>
<p>Finally, we can use <code>filter()</code> function, which is not pleasant to use, at least for me.</p>
<p>The above methods were all the ways that I know. If you know any better method please tell me. Otherwise, please explain which one is the best, in the sense of efficiency and <strong>run-time</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <em>always right</em> answer to this and there have been a few SO posts about the speed of different approaches when handling list, see e.g.  <a href="https://stackoverflow.com/questions/3013449/list-comprehension-vs-lambda-filter">here</a>, <a href="https://stackoverflow.com/questions/1247486/list-comprehension-vs-map">here</a> or <a href="https://stackoverflow.com/questions/1632902/lambda-versus-list-comprehension-performance">here</a>.</p>
<p>What is the fastest way might depend a lot on your list.
This said, let's just have a look at how fast the suggested approaches are.</p>
<p>For simple comparisons like this you can use <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">timeit</a>:</p>
<p><strong>1. Case: The for-loop</strong></p>
<pre><code>for_case = """newList=[]
for x in theList:
    if x &gt; n:
            newList.append(x)"""
</code></pre>
<p><strong>2. Case: List comprehension</strong></p>
<pre><code>list_comp = '[x for x in theList if x &gt; n]'
</code></pre>
<p><strong>3. Case: The filter (somehow unliked)</strong></p>
<pre><code>filtering = 'list(filter(lambda x: x &gt; n, theList))'
</code></pre>
<p><em>Some preparation:</em></p>
<pre><code>import timeit
si = 'theList=range(2000);n=1000;'  # using list(range(2000)) has no effect on the ranking
</code></pre>
<p><strong>So let's see:</strong></p>
<pre><code>timeit.timeit(si+list_comp, number=10000)
Out[21]: 1.3985847820003983
timeit.timeit(si+filtering, number=10000)
Out[22]: 3.315784254024038
timeit.timeit(si+for_case, number=10000)
Out[23]: 2.0093530920275953
</code></pre>
<p>So, at least on my machine, the list comprehension takes it away, followed by the <code>for</code>-loop and, at least in this case the unliked <code>filter</code> is indeed the slowest.</p>
</div>
<div class="post-text" itemprop="text">
<p>list comprehension version:</p>
<pre><code>sublist = [ i for i in the_list if i &gt; n ]
</code></pre>
<p>Generator expression: ( if the list is huge size)</p>
<pre><code>sublist = ( i for i in the_list if i &gt; n )
</code></pre>
</div>
<span class="comment-copy">Why isn't <code>filter</code> pleasant to use for you?</span>
<span class="comment-copy">If you are just trying to return a list with only elements where the value is greater than <code>n</code>, then your comprehension is a good way to go. If you mean to return a list rather than a generator, you can modify it as <code>[elem for elem in elems if elem &gt; n]</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4587915/return-list-of-items-in-list-greater-than-some-value">Return list of items in list greater than some value</a></span>
<span class="comment-copy">@benvc I am asking about a comparison of run-times. The mentioned question is just pointing out the method.</span>
<span class="comment-copy">Thank you. I believe this is the ultimate answer :) The only question left to be settled now is if there are any other ways to do so?</span>
<span class="comment-copy">@HosseinRahimi You are welcome. There are a few question about speed here on SO, e.g. <a href="https://stackoverflow.com/questions/3013449/list-comprehension-vs-lambda-filter">here</a>, <a href="https://stackoverflow.com/questions/1247486/list-comprehension-vs-map">here</a> or <a href="https://stackoverflow.com/questions/1632902/lambda-versus-list-comprehension-performance">here</a>. All are a good read if you are interested in this subject!</span>
<span class="comment-copy">How this answer is different from the one posted already? is there a need for for loop ? or filter?</span>
<span class="comment-copy">@HosseinRahimi there are certainly other ways, but when it comes to the fastest ones, then those 3 are about it I think.</span>
