<div class="post-text" itemprop="text">
<p>When placing the legend outside of the axes using <code>bbox_to_anchor</code> as in <a href="https://stackoverflow.com/a/4701285/1529178">this</a> answer, the space between the axes and the legend changes when the figure is resized. For static exported plots this is fine; you can simply tweak the numbers until you get it right. But for interactive plots that you might want to resize, this is a problem. As can be seen in this example:</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt

x = np.arange(5)
y = np.random.randn(5)

fig, ax = plt.subplots(tight_layout=True)
ax.plot(x, y, label='data1')
ax.plot(x, y-1, label='data2')
legend = ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05), ncol=2)
plt.show()
</code></pre>
<p>Result:</p>
<p><a href="https://i.stack.imgur.com/ZLb4p.png" rel="nofollow noreferrer"><img alt="legend placement ruined by resize" src="https://i.stack.imgur.com/ZLb4p.png"/></a></p>
<p>How can I make sure that the legend keeps the same distance from the axes even when the figure is resized?</p>
</div>
<div class="post-text" itemprop="text">
<p>The distance of a legend from the bounding box edge is set by the <code>borderaxespad</code> argument. The <code>borderaxespad</code> is in units of multiples of the fontsize - making it automatically independent of the axes size.
So in this case, </p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np
x = np.arange(5)
y = np.random.randn(5)

fig, ax = plt.subplots(constrained_layout=True)
ax.plot(x, y, label='data1')
ax.plot(x, y-1, label='data2')
legend = ax.legend(loc="upper center", bbox_to_anchor=(0.5,0), borderaxespad=2)

plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/2oMBi.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2oMBi.png"/></a>
<a href="https://i.stack.imgur.com/h4MtD.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/h4MtD.png"/></a></p>
<hr/>
<p>A similar question about showing a title below the axes at a constant distance is being asked in <a href="https://stackoverflow.com/questions/55239332/place-title-at-the-bottom-of-the-figure-of-an-axes/55240511#55240511">Place title at the bottom of the figure of an axes?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the resize events of the canvas to update the values in <code>bbox_to_anchor</code> with each update. To calculate the new values you can use the inverse of the axes transformation (<code>Bbox.inverse_transformed(ax.transAxes)</code>), which translates from screen coordinates in pixels to the axes coordinates which are normally used in <code>bbox_to_anchor</code>.</p>
<p>Here is an example with support for putting the legend on all four sides of the axes:</p>
<pre><code>import numpy as np
from matplotlib import pyplot as plt
from matplotlib.transforms import Bbox


class FixedOutsideLegend:
    """A legend placed at a fixed offset (in pixels) from the axes."""

    def __init__(self, ax, location, pixel_offset, **kwargs):
        self._pixel_offset = pixel_offset

        self.location = location
        if location == 'right':
            self._loc = 'center left'
        elif location == 'left':
            self._loc = 'center right'
        elif location == 'upper':
            self._loc = 'lower center'
        elif location == 'lower':
            self._loc = 'upper center'
        else:
            raise ValueError('Unknown location: {}'.format(location))

        self.legend = ax.legend(
            loc=self._loc, bbox_to_anchor=self._get_bbox_to_anchor(), **kwargs)
        ax.figure.canvas.mpl_connect('resize_event', self.on_resize)

    def on_resize(self, event):
        self.legend.set_bbox_to_anchor(self._get_bbox_to_anchor())

    def _get_bbox_to_anchor(self):
        """
        Find the lengths in axes units that correspond to the specified
        pixel_offset.
        """
        screen_bbox = Bbox.from_bounds(
            0, 0, self._pixel_offset, self._pixel_offset)
        try:
            ax_bbox = screen_bbox.inverse_transformed(ax.transAxes)
        except np.linagl.LinAlgError:
            ax_width = 0
            ax_height = 0
        else:
            ax_width = ax_bbox.width
            ax_height = ax_bbox.height

        if self.location == 'right':
            return (1 + ax_width, 0.5)
        elif self.location == 'left':
            return (-ax_width, 0.5)
        elif self.location == 'upper':
            return (0.5, 1 + ax_height)
        elif self.location == 'lower':
            return (0.5, -ax_height)


x = np.arange(5)
y = np.random.randn(5)

fig, ax = plt.subplots(tight_layout=True)
ax.plot(x, y, label='data1')
ax.plot(x, y-1, label='data2')
legend = FixedOutsideLegend(ax, 'lower', 20, ncol=2)
plt.show()
</code></pre>
<p>Result:</p>
<p><a href="https://i.stack.imgur.com/uxFnc.png" rel="nofollow noreferrer"><img alt="legend spacing still good after resize" src="https://i.stack.imgur.com/uxFnc.png"/></a></p>
</div>
<span class="comment-copy">Nice! I didn't know of <code>borderaxespad</code>. This is much simpler than my answer.</span>
<span class="comment-copy">This seems very complicated for the simple use case from the question. Cf. the other answer.</span>
