<div class="post-text" itemprop="text">
<p>I have a function in python which returns a tuple of a given key for the Natural-Sort/Human algorithm.</p>
<p>See <a href="https://stackoverflow.com/a/5254534/6622587">fake _human_key</a>.</p>
<p>But I need this to change this to replace German umlauts by their standard alphabetical characters.</p>
<p>Long story short, I want to get rid of <code>Ä, Ö, Ü, ß</code> for the sorting.</p>
<p>Also, the case should <strong>not</strong> be considered. A small <code>d</code> should have the same priority as a capital <code>D</code>...</p>
<p>For the umlauts I am utilizing the replace-function which seems a pretty awkward way to do it... :-/ I have no better idea... Any suggestions?</p>
<p>Also I am not able to rewrite this to get rid of the case sensitiveness...</p>
<p>So far I have:</p>
<pre><code>def _human_key(key):
    key = key.replace("Ä", "A").replace("Ö", "O").replace("Ü", "U")\
          .replace("ä", "a").replace("ö", "o").replace("ü", "u")\
          .replace("ß", "s")
    parts = re.split(r'(\d*\.\d+|\d+)', key)   
    return tuple((e.swapcase() if i % 2 == 0 else float(e))
            for i, e in enumerate(parts))
    return parts
</code></pre>
<p>Examples: I have the values</p>
<pre><code> Zabel
 Schneider
 anabel
 Arachno
 Öztürk
 de 'Hahn
</code></pre>
<p>which I want to sort; currently this puts:</p>
<pre><code>anabel
de 'Hahn
Arachno
Öztürk
Schneider
Zabel
</code></pre>
<p>because the small characters a treated with priority...</p>
<p>Expectation:</p>
<pre><code>anabel
Arachno
de 'Hahn   ( &lt;-- because "d" comes after "a")
Öztürk
Schneider
</code></pre>
<p>I feel the replace is not the right way to achieve the problem with the umlauts, but can't find a better solution.</p>
<p>Update/Background information:</p>
<p>I am calling this from outside, from the class "QSortFilterProxyModel",
I need this for sorting rows according to their clicked columns.
I have a QTreeView whichs displays a result set from the database, and one column contains german family names, that's the background.</p>
<pre><code>class HumanProxyModel(QtCore.QSortFilterProxyModel):
    def lessThan(self, source_left, source_right):
        data_left = source_left.data()
        data_right = source_right.data()
        if type(data_left) == type(data_right) == str:            
            return _human_key(data_left) &lt; _human_key(data_right)            
        return super(HumanProxyModel, self).lessThan(source_left, source_right)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't mind using third-party modules, you can use <a href="https://github.com/SethMMorton/natsort" rel="nofollow noreferrer"><code>natsort</code></a> (full disclosure, I am the author).  For the data you give, it returns what you want out-of-the-box.</p>
<pre><code>&gt;&gt;&gt; from natsort import natsorted, ns
&gt;&gt;&gt; data = ['Zabel', 'Schneider', 'anabel', 'Arachno', 'Öztürk', 'de Hahn']
&gt;&gt;&gt; natsorted(data, alg=ns.LOCALE)  # ns.LOCALE turns on locale-aware handling
['anabel', 'Arachno', 'de Hahn', 'Öztürk', 'Schneider', 'Zabel']
&gt;&gt;&gt; from natsort import humansorted
&gt;&gt;&gt; humansorted(data)  # shortcut for using LOCALE
['anabel', 'Arachno', 'de Hahn', 'Öztürk', 'Schneider', 'Zabel']
</code></pre>
<p>If you need a sorting key, you can use <code>natsort</code>'s key-generator:</p>
<pre><code>&gt;&gt;&gt; from natsort import natsort_keygen, ns
&gt;&gt;&gt; humansort_key = natsort_keygen(alg=ns.LOCALE)
&gt;&gt;&gt; humansort_key(this) &lt; humansort_key(that)
</code></pre>
<hr/>
<p>Note, you don't necessarily need to use locale... you just need to properly normalize the unicode, which <code>natsort</code> automatically does under the hood. In your case, it looks like you want both capital and lower case letters grouped together with the lowercase first, so you could use this instead</p>
<pre><code>&gt;&gt;&gt; natsorted(data, alg=ns.GROUPLETTERS | ns.LOWERCASEFIRST)  # or ns.G | ns.LF
['anabel', 'Arachno', 'de Hahn', 'Öztürk', 'Schneider', 'Zabel']
</code></pre>
<p>I suggest this because trying to deal with locale is a nightmare, and if it is not needed then you are much better off.</p>
</div>
<div class="post-text" itemprop="text">
<p>does that help ?</p>
<pre><code>import locale
locale.setlocale(locale.LC_ALL, "")

lst = ['Zabel', 'Schneider', 'anabel', 'Arachno', 'Öztürk', 'de Hahn']

print(sorted(lst, key=locale.strxfrm))
</code></pre>
<p>gave me :</p>
<pre><code>['anabel', 'Arachno', 'de Hahn', 'Öztürk', 'Schneider', 'Zabel']
</code></pre>
<p>To go further I've been on : <a href="http://code.activestate.com/recipes/576507-sort-strings-containing-german-umlauts-in-correct-/" rel="nofollow noreferrer">http://code.activestate.com/recipes/576507-sort-strings-containing-german-umlauts-in-correct-/</a></p>
<p><strong>UPDATE</strong></p>
<p>Ok so if you want to keep your method and get rid of umlauts you can do something like this, there are tons of better way to do it, but that's a start:</p>
<pre><code>import locale
locale.setlocale(locale.LC_ALL, "")

lst = ['Zabel', 'Schneider', 'anabel', 'Arachno', 'Öztürk', 'de Hahn']

def _human_key(your_list):
    your_list.sort(key=locale.strxfrm)
    res = []
    for item in your_list:
        word = item.replace("Ä", "A").replace("Ö", "O").replace("Ü", "U")\
              .replace("ä", "a").replace("ö", "o").replace("ü", "u")\
              .replace("ß", "s")
        res.append(word)
    return res

print(_human_key(lst))
</code></pre>
<p>gave me :</p>
<p><code>['anabel', 'Arachno', 'de Hahn', 'Ozturk', 'Schneider', 'Zabel']</code></p>
<p>Nothing mean, but using Regex doesn't seem to be an appropriate tag and/or approach on your problem if you could not implement the previous code in your method.
Hope it helped</p>
</div>
<span class="comment-copy">Why not go with something like <a href="https://stackoverflow.com/a/25057291/3820185">stackoverflow.com/a/25057291/3820185</a></span>
<span class="comment-copy">Why do you want to replace unicode characters? They are characters after all.</span>
<span class="comment-copy">There is a difference between upper and lower case. You could avoid this by converting all keys to one case within the function.</span>
<span class="comment-copy">Are you sure what you doing is right? You replace 'ä' by 'a' while it should be 'ae', you replace 'ö' by 'o' while it should be 'oe'. See "<a href="https://en.wikipedia.org/wiki/Diaeresis_(diacritic)" rel="nofollow noreferrer">en.wikipedia.org/wiki/Diaeresis_(diacritic)</a>", "Printing conventions in German".</span>
<span class="comment-copy">You should use "custom sort" to define your sort logic</span>
<span class="comment-copy">thank you, this seems to do the job how I want it to:  from natsort import natsort_keygen, ns humansort_key = natsort_keygen(alg=ns.LOCALE)          class HumanProxyModel(QtCore.QSortFilterProxyModel):             def lessThan(self, source_left, source_right):             data_left = source_left.data()             data_right = source_right.data()             if type(data_left) == type(data_right) == str:                             return humansort_key(data_left) &lt; humansort_key(data_right)             return super(HumanProxyModel, self).lessThan(source_left, source_right)</span>
<span class="comment-copy">looks good, but how to work this into the _human_key() function? I have no idea... :-/</span>
<span class="comment-copy">@ProfP30 You do not need the function <code>_human_key</code> anymore. You can use <code>lst.sort(key=locale.strxfrm)</code>... @Nqsir When I use this solution "Öztürk" comes before "de Hahn"</span>
<span class="comment-copy">@ProfP30, check my update</span>
<span class="comment-copy">@Sven Krüger, which version of python do you have ? I have 3.7.2</span>
<span class="comment-copy">I have 3.7.1 but I am afraid with the solution <code>locale.setlocale(locale.LC_ALL, "")</code> the clients local settings comes into affect, so you could get different results, depending on the machine... which is what I would like to avoid...  With the <code>key=locale.strxfrm</code> solution I also get undesired results.</span>
