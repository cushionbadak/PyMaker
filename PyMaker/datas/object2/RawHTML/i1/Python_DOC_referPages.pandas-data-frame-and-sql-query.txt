<div class="post-text" itemprop="text">
<p>I'm trying to translate the SQL query to pandas. However, after trying a lot I have now a knot in my head...</p>
<pre><code>SELECT
 ID, Date1, Date2, Value
FROM
 data t1
WHERE
 t1.ID = 100 AND Date2 BETWEEN '2010-01-01 00:00:00.0' AND '2010-01-31 23:59:59.0' AND t1.Date1 =
 (
  SELECT
   max(t2.Date1)
  FROM
   data t2
  WHERE
   t2.Date1 &lt;= '2010-02-01 00:00:00.0' AND t2.ID = t1.ID AND t2.Date2 = t1.Date2
 ) 
ORDER BY
 t1.Date2
</code></pre>
<p>Does anyone have a clever idea?</p>
<p>Many Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can load data by using the read_sql_query method.</p>
<pre><code>import pandas as pd


df = pd.read_sql_query(your_sql_statement, your_db_connection)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks. But that is not what I was looking for because to query in this way takes long. The way I'm looking for should be like</p>
<pre><code>df[(df['Date2'] &gt;= '2010-01-01 00:00:00.0') &amp; (df['Date2'] &lt;= '2010-01-31 23:59:59.0') &amp; ??????????? &amp; df['Date1'] &lt;= '2010-02-01 00:00:00.0' ?????????????
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't show any example data, so an answer cannot easily be checked.</p>
<p>The inner part of your query</p>
<pre><code> SELECT
   max(t2.Date1)
  FROM
   data t2
  WHERE
   t2.Date1 &lt;= '2010-02-01 00:00:00.0' AND t2.ID = t1.ID AND t2.Date2 = t1.Date2
</code></pre>
<p>becomes</p>
<pre><code>mask = df.Date1 &lt;= '2010-02-01'
inner = df.loc[mask, :].groupby(['Date2', 'ID'], as_index=False)['Date1'].agg('max')
</code></pre>
<p>This DataFrame can now be joined with your initial <code>df</code>:</p>
<pre><code>mask = (df.ID == 100) &amp; (df.Date2 &gt;= '2010-01-01 00:00:00.0') &amp; (df.Date2 &lt; '2010-01-31 23:59:59.0')
df.loc[mask, ['ID', 'Date2', 'Value']].merge(inner, on=['ID', 'Date2'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm trying to use smart logics to filter data from a dataframe.</p>
<p>So, the dataframe looks like this:</p>
<pre><code>Date1               Date2               Value
01.03.2019 01:00    02.03.2019 00:00    0,824778017
01.03.2019 01:00    03.03.2019 00:00    0,235332219
01.03.2019 01:00    04.03.2019 00:00    0,0545149
01.03.2019 01:00    05.03.2019 00:00    0,088324545
01.03.2019 01:00    06.03.2019 00:00    0,011294991
01.03.2019 19:00    02.03.2019 00:00    0,184424959
01.03.2019 19:00    03.03.2019 00:00    0,610644963
01.03.2019 19:00    04.03.2019 00:00    0,777668521
01.03.2019 19:00    05.03.2019 00:00    0,922268093
01.03.2019 19:00    06.03.2019 00:00    0,654392958
02.03.2019 01:00    03.03.2019 00:00    0,388756252
02.03.2019 01:00    04.03.2019 00:00    0,561393704
02.03.2019 01:00    05.03.2019 00:00    0,761488545
02.03.2019 01:00    06.03.2019 00:00    0,831463861
02.03.2019 01:00    07.03.2019 00:00    0,981502269
02.03.2019 19:00    03.03.2019 00:00    0,277360792
02.03.2019 19:00    04.03.2019 00:00    0,502428364
02.03.2019 19:00    05.03.2019 00:00    0,241836513
02.03.2019 19:00    06.03.2019 00:00    0,118992825
02.03.2019 19:00    07.03.2019 00:00    0,584641587
03.03.2019 01:00    04.03.2019 00:00    0,236813627
03.03.2019 01:00    05.03.2019 00:00    0,53616114
03.03.2019 01:00    06.03.2019 00:00    0,959270138
03.03.2019 01:00    07.03.2019 00:00    0,856270711
03.03.2019 01:00    08.03.2019 00:00    0,537138196
03.03.2019 19:00    04.03.2019 00:00    0,298802098
03.03.2019 19:00    05.03.2019 00:00    0,850840681
03.03.2019 19:00    06.03.2019 00:00    0,268404466
03.03.2019 19:00    07.03.2019 00:00    0,472132954
03.03.2019 19:00    08.03.2019 00:00    0,189761554
</code></pre>
<p>My objective is the following:</p>
<p><code>Date2</code> is given between <code>02.03.2019 00:00:00</code> and <code>07.03.2019 00:00:00</code>.</p>
<p>First: for given <code>Date2</code>, retrun <code>Value</code> where <code>Date1</code> is the latest date</p>
<pre><code>Date1               Date2               Value
01.03.2019 19:00    02.03.2019 00:00    0,184424959
02.03.2019 19:00    03.03.2019 00:00    0,277360792
03.03.2019 19:00    04.03.2019 00:00    0,298802098
03.03.2019 19:00    05.03.2019 00:00    0,850840681
03.03.2019 19:00    06.03.2019 00:00    0,268404466
03.03.2019 19:00    07.03.2019 00:00    0,472132954
</code></pre>
<p>Second: for given <code>Date2</code>, return <code>Value</code> where <code>Date1</code> does not go beyond a specific date</p>
<pre><code>Date1               Date2               Value
01.03.2019 19:00    02.03.2019 00:00    0,184424959
02.03.2019 01:00    03.03.2019 00:00    0,388756252
02.03.2019 01:00    04.03.2019 00:00    0,561393704
02.03.2019 01:00    05.03.2019 00:00    0,761488545
02.03.2019 01:00    06.03.2019 00:00    0,831463861
02.03.2019 01:00    07.03.2019 00:00    0,981502269
</code></pre>
<p>My approach is to filter first <code>Date2</code> and then <code>Date1</code></p>
<pre><code>is_date2 = (df ['Date2']&gt; = '02.03.2019 00:00:00 ') &amp; (df [' Date2 '] &lt;'07.03.2019 23:59:59')
df = df.loc [is_date2]

is_date1 = (df ['Date1'] &lt;= '07.03.2019 19:00:00 ') &amp; ... ???
df = df.loc [is_date1]
</code></pre>
<p>The answer from JoergVanAken is helpful, but has not yet reached my goal.</p>
<p>You can also interpert <code>Date1</code> as a forecast date and <code>Date2</code> as a value date</p>
<p>Thanks in advance</p>
</div>
<span class="comment-copy">What do you mean with "translate the SQL query to pandas"? Do you want to load the data into a dataframe?</span>
<span class="comment-copy">Can you provide more detail like what was the initial query and what do you want to achieve(the problem statement)?</span>
<span class="comment-copy">Thanks. But that is not what I was looking for because to query in this way takes long. The way I'm looking for should be like df[(df['Date2'] &gt;= '2010-01-01 00:00:00.0') &amp; (df['Date2'] &lt;= '2010-01-31 23:59:59.0') &amp; ??????????? &amp; df['Date1'] &lt;= '2010-02-01 00:00:00.0' ?????????????</span>
<span class="comment-copy">So you want to translate sql oprations into pandas operations?</span>
<span class="comment-copy">Google does not show much so you will probably need to write your own translator</span>
<span class="comment-copy">Thanks. That is helping a lot. However, I got the error: ValueError: cannot reindex from a duplicate axis</span>
<span class="comment-copy">At which point does this error occur? Please create a minimal, complete, and verifiable example <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
