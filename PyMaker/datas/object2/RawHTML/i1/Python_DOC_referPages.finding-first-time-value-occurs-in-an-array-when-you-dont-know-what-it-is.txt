<div class="post-text" itemprop="text">
<p>I have a very long array (over 2 million values) with repeating value. It looks something like this:</p>
<pre><code>array  = [1,1,1,1,......,2,2,2.....3,3,3.....]
</code></pre>
<p>With a bunch of different values. I want to create individual arrays for each group of points.  IE: an array for the ones, an array for the twos, and so forth. So something that would look like:</p>
<pre><code>array1 = [1,1,1,1...]
array2 = [2,2,2,2.....]
array3 = [3,3,3,3....]
.
.
.
.


None of the values occur an equal amount of time however, and I don't know how many times each value occurs.  Any advice?

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that repeated values are grouped together (otherwise you simply need to <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sort</a> the list), you can create a nested list (rather than a new list for every different value) using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby
array  = [1,1,1,1,2,2,2,3,3]

[list(v) for k,v in groupby(array)]
[[1, 1, 1, 1], [2, 2, 2], [3, 3]]
</code></pre>
<hr/>
<p>Note that this will be more convenient than creating <code>n</code> new lists created dinamically as shown for instance in <a href="https://stackoverflow.com/questions/18098326/dynamically-declare-create-lists-in-python">this</a> post, as you have no idea of how many lists will be created, and you will have to refer to each list by its name rather by simply indexing a nested list</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_left" rel="nofollow noreferrer"><code>bisect.bisect_left</code></a> to find the indices of the first occurence of each element.  This works only if the list is sorted:</p>
<pre><code>from bisect import bisect_left

def count_values(l, values=None):
    if values is None:
        values = range(1, l[-1]+1)  # Default assume list is [1..n]
    counts = {}
    consumed = 0
    val_iter = iter(values)
    curr_value = next(val_iter)
    next_value = next(val_iter)
    while True:
        ind = bisect_left(l, next_value, consumed)
        counts[curr_value] = ind - consumed
        consumed = ind
        try:
            curr_value, next_value = next_value, next(val_iter)
        except StopIteration:
            break
    counts[next_value] = len(l) - consumed
    return counts

l = [1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3]

print(count_values(l))
# {1: 9, 2: 8, 3: 7}
</code></pre>
<p>This avoids scanning the entire list, trading that for a binary search for each value.  Expect this to be more performant where there are very many of each element, and less performant where there are few of each element. </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, it seems to be wasteful and redundant to create all those arrays, each of which just stores repeating values.</p>
<p>You might want to just create a dictionary of unique values and their respective counts.</p>
<p>From this dictionary, you can always selectively create any of the individual arrays easily, whenever you want, and whichever particular one you want.</p>
<p>To create such a dictionary, you can use:</p>
<pre><code>from collections import Counter

my_counts_dict = Counter(my_array)
</code></pre>
<p>Once you have this dict, you can get the number of <code>23</code>'s, for example, with <code>my_counts_dict[23]</code>.</p>
<p>And if this returns <code>200</code>, you can create your list of <code>200</code> <code>23</code>'s with:</p>
<pre><code>my_list23 = [23]*200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>****Use this code ****</p>
<pre><code>&lt;?php 
$arrayName =  array(2,2,5,1,1,1,2,3,3,3,4,5,4,5,4,6,6,6,7,8,9,7,8,9,7,8,9);
$arr = array();
foreach ($arrayName as $value) {
 $arr[$value][] = $value;
 }
  sort($arr);
 print_r($arr);
 ?&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Solution with no helper functions:</p>
<pre><code>array  = [1,1,2,2,2,3,4]

result = [[array[0]]]
for i in array[1:]:
    if i == result[-1][-1]:
        result[-1].append(i)
    else:
        result.append([i])

print(result)
# [[1, 1], [2, 2, 2], [3], [4]]
</code></pre>
</div>
<span class="comment-copy">awesome, and would there be a way to see how many groups there are then? would len() tell you the length?</span>
<span class="comment-copy">Yes just take the <code>len</code> of the list @wilada. Don't forget you can upvote/accept if it helped :)</span>
