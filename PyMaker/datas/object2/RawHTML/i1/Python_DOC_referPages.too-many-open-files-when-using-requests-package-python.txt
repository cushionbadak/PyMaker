<div class="post-text" itemprop="text">
<p>I'm using the Python requests package to make a large number of requests to an API. At some point my program however crashes due to 'too many open files'. As I explicitely close my session I do not really know how this can be.</p>
<p>I use the following code:</p>
<pre><code>import requests
import multiprocessing
import numpy as np

s = requests.session()
s.keep_alive = False

def request(i, mapId, minx, maxx, miny, maxy):
print(i)
try:
    with requests.Session() as s:
        r = s.post(url + 'metadata/polygons', timeout=10,
             json = {"mapId":  mapId, 'layer': 'percelen' , 'xMin': minx ,'xMax':maxx, 'yMin':miny, 'yMax':maxy })
        out = r.json()
        s.close()

except:
    print('something went wrong with: ' + str(i))

for i in np.aragne(10000):
    time.sleep(1)
    multiprocessing.Process(target = request, args = argsList[i])
</code></pre>
<p>Any help or insights would be greatly appreciated as I'm out of ideas.</p>
</div>
<div class="post-text" itemprop="text">
<p>"Too many open files" is likely a reference to the fact that each <code>Session</code> and its single POST request hogs a TCP socket and therefore a file descriptor.</p>
<p><strong>First solution:</strong></p>
<p>Use a single <code>Session</code> instance with <a href="https://stackoverflow.com/a/53890776/7954504">a customized <code>HTTPAdapter</code></a> and pass a beefed up argument to its <code>pool_connections</code> parameter.</p>
<p>Side note 1: you don't need to call <code>s.close()</code>.  That's already called when the context manager calls <code>.__exit__()</code>.</p>
<p>Side note 2: consider using <code>threading</code> or <code>asyncio</code>/<code>aiohttp</code>.  Multiprocessing is not ideal for an IO-bound task like this.</p>
<p><strong>Second solution:</strong></p>
<p>Increase the number of open files permitted.  On Linux, you'll need to do something like:</p>
<pre><code>sudo vim /etc/security/limits.conf
# Add these lines
root    soft    nofile  100000
root    hard    nofile  100000
ubuntu    soft    nofile  100000
ubuntu    hard    nofile  100000

sudo vim /etc/sysctl.conf
# Add this line
fs.file-max = 2097152

sudo sysctl -p

sudo vim /etc/pam.d/commmon_session
# Add this line
session required pam_limits.so

sudo reboot
</code></pre>
<p>I think this second solution could be characterized as "fixing the symptom rather than the problem," but try it if you must and are feeling bold.</p>
</div>
