<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.getsizeof(int()))
12
&gt;&gt;&gt; print(sys.getsizeof(str()))
25
&gt;&gt;&gt; mylist = [1,2,3,4,5,'ab']
&gt;&gt;&gt; print(id(mylist))
50204144
&gt;&gt;&gt; print(id(mylist[0]))
1849873456
&gt;&gt;&gt; print(id(mylist[1]))
1849873472
&gt;&gt;&gt; print(id(mylist[2]))
1849873488
&gt;&gt;&gt; print(id(mylist[3]))
1849873504
&gt;&gt;&gt; print(id(mylist[4]))
1849873520
&gt;&gt;&gt; print(id(mylist[5]))
50209152
</code></pre>
<p>I don't know why the difference is 16:</p>
<p>64-bit operating system</p>
</div>
<div class="post-text" itemprop="text">
<p>Because they are <strong>int</strong> inside a list the location in memory of a integer goes <strong>16 to 16</strong> bits I truly recommend you to see this post: <a href="https://stackoverflow.com/questions/15667189/what-is-the-id-function-used-for">What is the id( ) function used for?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like your question is: <em>If <code>sys.getsizeof(int())</code> is 12, then why are some of the the <code>id()</code> values 16 bytes apart instead of 12?</em> </p>
<p>And it looks like you are expecting newly allocated <code>int</code>s to be 12 bytes away from one another because an <code>int</code> takes 12 bytes of storage. </p>
<p>If you are expecting that, it is because you are expecting a Python list to be like a C array, a chunk of contiguous memory where an array of five 8-byte objects takes exactly 40 bytes. But Python lists are not arrays, and list elements are not necessarily allocated in ascending memory order (let alone packed together). And so you can't expect the values of <code>id()</code> to be predictable from the amount of memory the object takes up.</p>
<p>By all means learn about the way Python's data structures are really allocated, if that really interests you. But it is a topic so advanced that few outside the CPython core team ever need to think about it. The rest of us are just content that it works. Which is why you are getting comments like <em>it's an implementation detail</em> and <em>why do you care?</em> </p>
<p>It is important to know how a C array is allocated because in C you manipulate memory pointers directly and getting that wrong can be catastrophic. But Python takes care of memory allocation for you, so knowing all the details of how it works is unlikely to make you a better Python programmer. </p>
</div>
<span class="comment-copy">import sys print(sys.getsizeof(int())) print(sys.getsizeof(str()))  mylist = [1,2,3,4,5,'ab'] print(id(mylist)) print(id(mylist[0])) print(id(mylist[1])) print(id(mylist[2])) print(id(mylist[3])) print(id(mylist[4])) print(id(mylist[5]))</span>
<span class="comment-copy">Please do NOT post images of your code. Instead, post directly your code in code format (Ctr+K).</span>
<span class="comment-copy">This is an implementation detail of CPython.</span>
<span class="comment-copy">it would be better if you put your code here and not pasting the screenshot. Describe what exactly you wanted and what you are getting. You can refer to this <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a></span>
<span class="comment-copy">Why do you care about the distance anyway? It's an implementation detail, completely unspecified and arbitrary. The difference is what it is because, well, that's how CPython was written.</span>
