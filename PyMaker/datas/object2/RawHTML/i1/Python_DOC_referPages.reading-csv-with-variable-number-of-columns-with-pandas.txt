<div class="post-text" itemprop="text">
<p>I have a csv file with a variable number of columns.</p>
<p>Pandas can handle the situation fairly easily with the <code>name</code> parameter. This works if the first row of the file is either the same length or shorter of <code>names</code>, but fails if it's longer.</p>
<h2>Examples</h2>
<h3>Case 1</h3>
<p>First row has the same number of elements as <code>names</code> </p>
<pre><code>from io import StringIO
import pandas as pd

file = StringIO(
        '''1, 2, 3,
           1, 2
           1, 2, 3, 4, 
           1, 2, 3,''')

df = pd.read_csv(file, names=['A','B','C'], index_col=False)
df

# Out[0]:
#    A  B    C
# 0  1  2  3.0
# 1  1  2  NaN
# 2  1  2  3.0
# 3  1  2  3.0
</code></pre>
<p>This <strong>works</strong>.</p>
<h3>Case 2</h3>
<p>First row has less elements than <code>names</code> </p>
<pre><code>from io import StringIO
import pandas as pd

file = StringIO(
        '''1, 2,
           1, 2
           1, 2, 3, 4, 
           1, 2, 3,''')

df = pd.read_csv(file, names=['A','B','C'], index_col=False)
df

# Out[0]:
#    A  B    C
# 0  1  2  NaN
# 1  1  2  NaN
# 2  1  2  3.0
# 3  1  2  3.0
</code></pre>
<p>This <strong>works</strong> too.</p>
<h3>Case 3</h3>
<p>First row has <strong>more</strong> elements than <code>names</code> </p>
<pre><code>from io import StringIO
import pandas as pd

file = StringIO(
        '''1, 2, 3, 4,
           1, 2
           1, 2, 3, 4, 
           1, 2, 3,''')

df = pd.read_csv(file, names=['A','B','C'], index_col=False)
df

# Expected output:
#    A  B    C
# 0  1  2  3.0
# 1  1  2  NaN
# 2  1  2  3.0
# 3  1  2  3.0
#
# Instead I get:
# IndexError: list index out of range
</code></pre>
<p>This <strong>doesn't work!!!</strong></p>
<h3>Question</h3>
<p>Is there a way to make this script more robust so that it handles also Case 3 without generating an error? 
Doesn't this looks a bit like a bug</p>
<p>I'm running pandas version 0.23.4</p>
<h2>EDIT:</h2>
<h3>Case 3b</h3>
<p>First row has <strong>more</strong> elements than <code>names</code> </p>
<pre><code>from io import StringIO
import pandas as pd

file = StringIO(
        '''1, 2, 3, 4
           1, 2
           1, 2, 3, 4, 
           1, 2, 3,''') # NOTE: No comma after the first "4"!!

df = pd.read_csv(file, names=['A','B','C'], index_col=False)
df

#Out[0]:
#    A  B    C
# 0  1  2  3.0
# 1  1  2  NaN
# 2  1  2  3.0
# 3  1  2  3.0
</code></pre>
<p>This <strong>works!!!</strong></p>
<p>What the hell is going on?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just make use of the <code>usecols</code> params, instead of the <code>names</code> one. <code>names</code> assume that you're listing all the columns' name, whereas <code>usecols</code>assume a subample of the columns.</p>
<pre><code>from io import StringIO
import pandas as pd

file = StringIO(
        '''1, 2, 3, 4,
           1, 2
           1, 2, 3, 4, 
           1, 2, 3,''')

df = pd.read_csv(file, usecols =[0,1,2], header = None)
df
0   1   2
0   1   2   3.0
1   1   2   NaN
2   1   2   3.0
3   1   2   3.0
</code></pre>
</div>
