<div class="post-text" itemprop="text">
<p>I need to split a time lapse into evenly sized chunks every an amount of minutes. E.g. the time between now and 1 hour ago in 12 chunks of 5 minutes each. How could I achieve this in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>you can use timedelta in datetime module.</p>
<pre><code>from datetime import datetime
from datetime import timedelta

start = datetime.now()
end = datetime(2019, 3, 19, 18, 00, 00)
while start &lt; end:
    print(start)
    start += timedelta(minutes=5)    # add 5 minutes to start time
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dateutil.rrule</code> will probably be easiest long-term way to do this though the API is a bit complex:</p>
<pre class="lang-py prettyprint-override"><code>rrule(dtstart=datetime.now() - timedelta(hours=1), until=datetime.now(), freq=MINUTELY, interval=5)
</code></pre>
<p>Alternatively, you can pretty easily do this by hand, just take the start and stop datetimes, and increment the start by the proper timedelta until it exceeds the end bound. If you want a specific number of chunks rather than a specific chunk length, compute the difference between the start and end and divide by your number.</p>
<pre class="lang-py prettyprint-override"><code>occurrences = []
end = datetime.now()
st = datetime.now() - timedelta(hours=1)
while st &lt; end: 
    occurrences.append(st)
    st += timedelta(minutes=5)
</code></pre>
<p>both are going to be slower than working directly on timestamps.</p>
</div>
<span class="comment-copy">What is it that you've tried so far?</span>
<span class="comment-copy">Sounds like something that could be done with division and modulo. e.G. tmin / tchunk, tmin % tchunk</span>
<span class="comment-copy">In numeric representation I can have the difference of both times and then divide by the number of chunks. After that, just add the difference as a sequence to the initial time. But I think this is not efficient.</span>
