<div class="post-text" itemprop="text">
<p>I'm trying to initialize SQLAlchemy with existing DB connection, but I would like it to completely stop managing it (opening, closing, rolling back etc). This is because I use it alongside a different ORM (django) and SQLAlchemy is really only a way to perform more complicated queries. It's gonna be used for reads only and I just want it to take a connection, use it and leave as it is.</p>
<p>What I tried so far:</p>
<pre><code>from sqlalchemy.pool import NullPool
from sqlalchemy import create_engine
from django.db import connection

class DummyNullPool(NullPool):
    def _do_return_conn(self, conn):
        # avoid closing the connection as it belongs to django
        # orm, sql alchemy is only a tool to read

        pass

def get_engine(dummy=True):
    kwargs = {}
    if dummy:
        kwargs['poolclass'] = DummyNullPool
        kwargs['creator'] = lambda: connection.connection

    return create_engine(conn_string, **kwargs)
</code></pre>
<p>This almost works, but it hangs (not always though) on</p>
<pre><code> def _create_connection(self):
     return _ConnectionRecord(self, False)
</code></pre>
<p>So i guess there must be some kind of race condition.</p>
<p>The reason why I want to reuse the same connection is because I would like it to have an access to records created inside the current transaction.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I think I've found a way that "works":</p>
<pre><code>from django.conf import settings
from django.db import connection
from sqlalchemy.pool import NullPool
from sqlalchemy import create_engine as sa_create_engine

def do_nothing(dbapi_connection):
    return

def create_engine(db_name='default'):
    db = settings.DATABASES[db_name]

    conn_string = 'postgresql://{}{}@{}:{}/{}'.format(
        db['USER'],
        ':' + db['PASSWORD'] if db['PASSWORD'] else '',
        db['HOST'],
        db['PORT'],
        db['NAME']
    )

    engine = sa_create_engine(
        conn_string,
        poolclass=NullPool,
        creator=lambda: connection.connection
    )
    engine.dialect.do_close = do_nothing
    engine.dialect.do_commit = do_nothing
    engine.dialect.do_rollback = do_nothing
    return engine
</code></pre>
<p>Please note that it hasn't been fully tested, its more kind of experimental code. It assumes that <code>connection.connection</code> was initialised and is open. Any comments much appreciated.</p>
</div>
