<div class="post-text" itemprop="text">
<p>I'm trying to test a very simple function (as a result of multiple failed attempts at testing a more complicated function which uses the argument parser as a parameter).</p>
<blockquote>
<p><em># from ./runfile.py</em></p>
</blockquote>
<pre><code>import argparse
import os


def get_input_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--priv_raw_name', default='private_data.csv', type=str,
                    help='Set raw private/source datafile name')
    args = parser.parse_args()
    return args
</code></pre>
<blockquote>
<p><em># from ./tests/test_args.py</em></p>
</blockquote>
<pre><code>import pytest
from runfile import get_input_args

def test_parser():
    parser = get_input_args()
    assert 1
</code></pre>
<p>When I run the script <code>runfile.py</code> all works as expected, however when I call <code>pytest tests/test_args.py</code> I get the unrecognised arguments error message below.</p>
<p>I've tried setting up a <code>conftest.py</code> file and using addoption but I just seem to be encountering more errors far beyond my experience to fix. Can anyone point me in the right direction of how to run the test using the default arguments from the core script but not have <code>tests/test_args.py</code> being called as an argument for the actual test itself?</p>
<pre><code>    (Project_Cascade) ➜  Project_Cascade git:(WIP) ✗ pytest tests/test_args.py
========================================================================= test session starts =========================================================================
platform darwin -- Python 3.6.5, pytest-4.3.1, py-1.8.0, pluggy-0.9.0
rootdir: /Users/davidmellor/Code/Spend_Network/Data_Projects/Project_Cascade, inifile:
collected 1 item

tests/test_args.py F                                                                                                                                            [100%]

============================================================================== FAILURES ===============================================================================
_____________________________________________________________________________ test_parser _____________________________________________________________________________

    def test_parser():
&gt;       parser = get_input_args()

tests/test_args.py:5:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
runfile.py:50: in get_input_args
    args = parser.parse_args()
/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/argparse.py:1733: in parse_args
    self.error(msg % ' '.join(argv))
/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/argparse.py:2389: in error
    self.exit(2, _('%(prog)s: error: %(message)s\n') % args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = ArgumentParser(prog='pytest', usage=None, description=None, formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, conflict_handler='error', add_help=True)
status = 2, message = 'pytest: error: unrecognized arguments: tests/test_args.py\n'

    def exit(self, status=0, message=None):
        if message:
            self._print_message(message, _sys.stderr)
&gt;       _sys.exit(status)
E       SystemExit: 2

/usr/local/Cellar/python/3.6.5_1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/argparse.py:2376: SystemExit
------------------------------------------------------------------------ Captured stderr call -------------------------------------------------------------------------
usage: pytest [-h] [--priv_raw_name PRIV_RAW_NAME]
pytest: error: unrecognized arguments: tests/test_args.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem comes from the <a href="https://docs.python.org/3/library/argparse.html#the-parse-args-method" rel="nofollow noreferrer"><code>parser.parse_args</code></a> call which accepts an optional <code>args</code> argument. If this argument is not provided, args are taken from <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a>.</p>
<p>When you execute <code>pytest tests/test_args.py</code>, <code>sys.argv</code> contains <code>['pytest', 'tests/test_args.py']</code>. The first element of the list is the called program and the second is the first argument.</p>
<p>Thus, <code>parser.parse_args</code> called without its <code>args</code> argument considers <em>tests/test_args.py</em> as the value for the first declared argument of the parser. Fortunately, it is unable to parse it and an error occurs with the explicit message <em>unrecognized arguments: tests/test_args.py</em>.</p>
<p>To check it, you can add a breakpoint in your test before calling <code>parser.parse_args</code> and inspect <code>sys.argv</code></p>
<p>Invoking <code>pytest</code> without specifying the file to run (just <code>pytest</code>) should pass with no problem.</p>
<p>Anyway, your test should pass whatever the manner it is ran. All you have to do for this is specifying explicit <code>args</code> for your <code>parser.parse_args</code> call in your test.</p>
<p>For example, passing an empty list will work:</p>
<pre><code>parser.parse_args([])
</code></pre>
<p>But you will probably want to test it with values for the <code>priv_raw_name</code> option:</p>
<pre><code>parser:parse_args(['--priv_raw_name', 'any/test/path'])
</code></pre>
</div>
<span class="comment-copy">beautifully explained, thank you so much. I ended up amending <code>def get_input_args()</code> to take 'args=None' as a parameter, and then amending the <code>parse_args()</code> line to  <code>parse_args(args)</code>, and then in the test function passing <code>[]</code> to the call to <code>get_input_args()</code>.</span>
