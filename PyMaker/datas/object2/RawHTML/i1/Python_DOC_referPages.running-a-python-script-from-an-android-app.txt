<div class="post-text" itemprop="text">
<p>We are working on an <a href="http://en.wikipedia.org/wiki/S60_%28software_platform%29" rel="noreferrer">S60</a> version and this platform has a nice Python API..</p>
<p>However, there is nothing official about Python on Android, but since <a href="http://en.wikipedia.org/wiki/Jython" rel="noreferrer">Jython</a> exists, is there a way to let the snake and the robot work together??</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use <a href="http://kivy.org/" rel="noreferrer">Kivy</a>:</p>
<blockquote>
<p>Open source Python library for rapid development of applications
  that make use of innovative user interfaces, such as multi-touch apps.</p>
</blockquote>
<p></p>
<blockquote>
<p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>
</blockquote>
<p><a href="https://play.google.com/store/apps/details?id=org.kivy.showcase" rel="noreferrer">Kivy Showcase app</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>There is also the new <a href="http://www.talkandroid.com/1225-android-scripting-environment/" rel="noreferrer">Android Scripting Environment</a> (ASE/SL4A) project. It looks awesome, and it has some integration with native Android components. </p>
<p>Note: no longer under "active development", but some forks may be.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes! : <a href="http://google-opensource.blogspot.com/2009/06/introducing-android-scripting.html" rel="nofollow noreferrer">Android Scripting Environment</a></p>
<p>An example <a href="http://www.mattcutts.com/blog/android-barcode-scanner/" rel="nofollow noreferrer">via Matt Cutts</a> via SL4A -- "hereâ€™s a barcode scanner written in six lines of Python code:</p>
<pre><code>import android
droid = android.Android()
code = droid.scanBarcode()
isbn = int(code['result']['SCAN_RESULT'])
url = "http://books.google.com?q=%d" % isbn
droid.startActivity('android.intent.action.VIEW', url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's also <a href="https://github.com/damonkohler/sl4a" rel="noreferrer">SL4A</a> written in large by Google employees.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>"The <a href="https://www.renpy.org" rel="noreferrer">Pygame Subset for Android</a> is a port of a subset of Pygame functionality to the Android platform. The goal of the project is to allow the creation of Android-specific games, and to ease the porting of games from PC-like platforms to Android."</em></p>
<p>The examples include a complete game packaged in an APK, which is pretty interesting. </p>
</div>
<div class="post-text" itemprop="text">
<p>I've posted instructions and a patch for cross compiling Python 2.7.2 for Android, you can get it at my blog here: <a href="http://mdqinc.com/blog/2011/09/cross-compiling-python-for-android/" rel="noreferrer">http://mdqinc.com/blog/2011/09/cross-compiling-python-for-android/</a></p>
<p>EDIT: I've open sourced <a href="http://ignifuga.org" rel="noreferrer">Ignifuga</a>, my 2D Game Engine, it's Python/SDL based and it cross compiles for Android. Even if you don't use it for games, you might get useful ideas from the code and the builder utility (named Schafer, after Tim...you know who).</p>
</div>
<div class="post-text" itemprop="text">
<h1>Scripting Layer for Android</h1>
<p><a href="https://github.com/damonkohler/sl4a" rel="noreferrer">SL4A</a> does what you want. You can easily install it directly onto your device from their site, and do not need root.</p>
<p>It supports a range of languages. Python is the most mature. By default, it uses Python 2.6, but there is a <a href="https://code.google.com/p/python-for-android/wiki/Python3" rel="noreferrer">3.2 port</a> you can use instead. I have used that port for all kinds of things on a Galaxy S2 and it worked fine.</p>
<h2>API</h2>
<p>SL4A provides a port of their <code>android</code> library for each supported language. The library provides an interface to the underlying Android API through a single <code>Android</code> object.</p>
<pre><code>from android import Android

droid = Android()
droid.ttsSpeak('hello world') # example using the text to speech facade
</code></pre>
<p>Each language has pretty much the same API. You can even use the JavaScript API inside webviews.</p>
<pre><code>let droid = new Android();
droid.ttsSpeak("hello from js");
</code></pre>
<h2>User Interfaces</h2>
<p>For user interfaces, you have three options:</p>
<ul>
<li>You can easily use the generic, native dialogues and menus through the
API. This is good for confirmation dialogues and other basic user inputs.</li>
<li>You can also open a webview from inside a Python script, then use HTML5
for the user interface. When you use webviews from Python, you can pass
messages back and forth, between the webview and the Python process that
spawned it. The UI will not be native, but it is still a good option to
have.</li>
<li>There is <em>some</em> support for native Android user interfaces, but I am not
sure how well it works; I just haven't ever used it.</li>
</ul>
<p>You can mix options, so you can have a webview for the main interface, and still use native dialogues.</p>
<h2>QPython</h2>
<p>There is a third party project named <a href="http://qpython.com" rel="noreferrer">QPython</a>. It builds on SL4A, and throws in some other useful stuff.</p>
<p>QPython gives you a nicer UI to manage your installation, and includes a little, touchscreen code editor, a Python shell, and a PIP shell for package management. They also have a Python 3 port. Both versions are available from the Play Store, free of charge. QPython also bundles libraries from a bunch of Python on Android projects, including Kivy, so it is not just SL4A.</p>
<p>Note that QPython still develop their fork of SL4A (though, not much to be honest). The main SL4A project itself is pretty much dead.</p>
<h2>Useful Links</h2>
<ul>
<li>SL4A Project (now on GitHub): <a href="https://github.com/damonkohler/sl4a" rel="noreferrer">https://github.com/damonkohler/sl4a</a></li>
<li>SL4A Python 3 Port: <a href="https://code.google.com/p/python-for-android/wiki/Python3" rel="noreferrer">https://code.google.com/p/python-for-android/wiki/Python3</a></li>
<li>QPython Project: <a href="http://qpython.com" rel="noreferrer">http://qpython.com</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As a <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a> lover and Android programmer, I am sad to say this is not really a good way to go. There are two problems.</p>
<p>One problem is that there is a lot more than just a programming language to the Android development tools. A lot of the Android graphics involve XML files to configure the display, similar to HTML. The built-in java objects are really integrated with this XML layout, and it's a lot easier than writing your own code to go from logic to bitmap.</p>
<p>The other problem is that the G1 (and probably other Android devices for the near future) are really not that fast. 200 MHz processors, and RAM is very limited. Even in Java you have to do a decent amount of rewriting-to-avoid-more-object-creation if you want to make your app perfectly smooth. Python is going to be too slow for a while still on mobile devices.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Kivy</h1>
<hr/>
<p>I want to post this as an extension of what <strong>@JohnMudd</strong> has already answered (<em>but please bear with me as English isn't my first language</em>)</p>
<p>It has been years since then, and Kivy has evolved to v1.9-dev. The biggest selling point of Kivy, in my opinion, is its cross-platform compatibility. You can code and test under your local environment (Windows/*nix etc.), you can also build, debug and package your app to run on your Android/iOS/Mac/Windows devices.</p>
<p>With Kivy's own <a href="http://kivy.org/docs/guide/lang.html#kv-language" rel="noreferrer">KV</a> language, you can code and build the GUI interface easily (it's just like Java XML, but rather than TextView etc., KV has its own <code>ui.widgets</code> for the similar translation), which is in my opinion quite easy to adopt.</p>
<p>Currently <a href="https://github.com/kivy/buildozer" rel="noreferrer">Buildozer</a> and <a href="http://python-for-android.readthedocs.org/en/latest/prerequisites/" rel="noreferrer">python-for-android</a> are the most recommended tools to build/package your apps. I have tried them both and can firmly say that they make building Android apps with Python a breeze. Users who feel comfortable in their console/terminal/command prompt should have no problems using them, and their guides are well documented, too.</p>
<p>Furthermore, iOS is another big selling point of Kivy, provided that you can use the same code base with little changes required to test-run on your iOS device, via <a href="http://kivy.org/docs/guide/packaging-ios.html#create-a-package-for-ios" rel="noreferrer">kivy-ios</a> Homebrew tools, although Xcode is required for the build before running on their devices (AFAIK the iOS Simulator in Xcode currently doesn't work for the x86-architecture build). There are also some dependency issues which must be manually compiled and fiddled around with in Xcode to have a successful build, but they wouldn't be too difficult to resolve and people in <a href="https://groups.google.com/forum/#!forum/kivy-users" rel="noreferrer">Kivy Google Group</a> are really helpful too.</p>
<p>With all being said, users with good Python knowledge should have no problem picking up the basics in weeks (if not days) to build some simple apps.</p>
<p>Also worth mentioning is that you can bundle (build recipes) your Python modules with the build so users can really make use of many existing libraries Python bring us, like <a href="http://docs.python-requests.org/en/latest/" rel="noreferrer">Requests</a> &amp; <a href="http://www.pythonware.com/products/pil/" rel="noreferrer">PIL</a> etc. through <a href="http://kivy.org/docs/api-kivy.ext.html#module-kivy.ext" rel="noreferrer">Kivy's extension support</a>.</p>
<blockquote>
<p>Sometimes your application requires functionality that is beyond the
  scope of what Kivy can deliver. In those cases, it is necessary to
  resort to external software libraries. Given the richness of the
  Python ecosystem, there is already a lot of software
  libraries that you can simply import and use right away.</p>
</blockquote>
<p>The last but not the least, if you are going to use Kivy for more serious/commercial projects, you may find existing modules not satisfactory. There are some workable solutions though, with the "work in progress" of <a href="https://github.com/kivy/pyjnius" rel="noreferrer">pyjnius</a> for Android, and <a href="https://github.com/kivy/pyobjus" rel="noreferrer">pyobjus</a>. Users can now access Java/Objective-C classes through those modules to control some of the native APIs.</p>
<p>My experience in Kivy is that it will find its best fit with seasoned Python programmers and some serious programmers who want rapid development or simple code base maintenance. It runs well on multiple platforms, albeit not really with the <em>native</em> feeling. </p>
<p><strong>I do hope some Python app programmers find this information useful and start taking a look at Kivy. It can only get better (with more support and as libraries/modules get ported) if there is great interest from the community.</strong></p>
<p><em>P.S. I have no relationship with Kivy whatsoever, I'm merely a programmer who really likes the idea of bringing Python coding fun to mobile/cross-platform development.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Not at the moment and you would be lucky to get Jython to work soon. If you're planning to start your development now you would be better off with just sticking to Java for now on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using SL4A (which has already been mentioned by itself in other answers) you can <a href="http://groups.google.com/group/web2py/browse_thread/thread/f227e93fe802a902" rel="noreferrer">run</a> a full-blown <a href="http://web2py.com/" rel="noreferrer">web2py</a> instance (other <a href="http://wiki.python.org/moin/WebFrameworks" rel="noreferrer">python web frameworks</a> are likely candidates as well).  SL4A doesn't allow you to do native UI components (buttons, scroll bars, and the like), but it does support <a href="http://code.google.com/p/android-scripting/wiki/UsingWebView" rel="noreferrer">WebViews</a>.  A WebView is basically nothing more than a striped down web browser pointed at a fixed address. I believe the native Gmail app uses a WebView instead of going the regular widget route.  </p>
<p>This route would have some interesting features:</p>
<ul>
<li>In the case of most python web frameworks, you could actually develop and test without using an android device or android emulator.</li>
<li>Whatever Python code you end up writing for the phone could also be put on a public webserver with very little (if any)  modification.</li>
<li>You could take advantage of all of the crazy web stuff out there: query, HTML5, CSS3, etc.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I use the QPython application. It has an editor, a console, and you can run your Python programs with it. The application is free, and the link is <a href="http://qpython.com/">http://qpython.com/</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://github.com/kivy/python-for-android">Python for android</a> site:</p>
<blockquote>
<p>Python for android is a project to create your own Python distribution including the modules you want, and create an apk including python, libs, and your application.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://play.google.com/store/apps/details?id=com.termux&amp;hl=ro" rel="noreferrer">Termux</a> application:</p>
<p>Note that apt install python install python 3.
for python 2 you shoud call apt install python2.</p>
<p>Some demos here: <a href="https://www.youtube.com/watch?v=fqqsl72mASE" rel="noreferrer">https://www.youtube.com/watch?v=fqqsl72mASE</a></p>
<p>And also the github page: <a href="https://github.com/termux" rel="noreferrer">https://github.com/termux</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yet another attempt: <a href="https://code.google.com/p/android-python27/">https://code.google.com/p/android-python27/</a></p>
<p>This one embed directly the Python interpretter in your app apk.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can run your Python code using <a href="http://code.google.com/p/android-scripting/">sl4a</a>. sl4a supports Python, <a href="http://en.wikipedia.org/wiki/Perl">Perl</a>, <a href="http://en.wikipedia.org/wiki/JRuby">JRuby</a>, <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29">Lua</a>, BeanShell, JavaScript, <a href="http://en.wikipedia.org/wiki/Tcl">Tcl</a>, and shell script.</p>
<p>You can learn sl4a <a href="http://code.google.com/p/android-scripting/wiki/Tutorials">Python Examples</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's also python-on-a-chip possibly running mosync: <a href="http://groups.google.com/group/python-on-a-chip/browse_thread/thread/df1c837bae2200f2/02992219b9c0003e?lnk=gst&amp;q=mosync#02992219b9c0003e" rel="noreferrer">google group</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Chaquopy</h2>
<p><a href="https://chaquo.com/chaquopy" rel="noreferrer">Chaquopy</a> is a plugin for Android Studio's Gradle-based build system. It focuses on <a href="https://chaquo.com/chaquopy/doc/current/android.html" rel="noreferrer">close integration</a> with the standard Android development tools.</p>
<ul>
<li><p>It provides complete APIs to call <a href="https://chaquo.com/chaquopy/doc/current/python.html" rel="noreferrer">Java from Python</a> or <a href="https://chaquo.com/chaquopy/doc/current/java.html" rel="noreferrer">Python from Java</a>, allowing the developer to use whichever language is best for each component of their app.</p></li>
<li><p>It can automatically download <a href="https://chaquo.com/chaquopy/doc/current/android.html#requirements" rel="noreferrer">PyPI packages</a> and build them into an app, including selected native packages such as NumPy.</p></li>
<li><p>It enables full access to all Android APIs from Python, including the native user interface toolkit (<a href="https://github.com/chaquo/chaquopy/blob/master/app/src/main/python/chaquopy/demo/ui_demo.py" rel="noreferrer">example pure-Python activity</a>).</p></li>
</ul>
<p>This is a commercial product, but it's free for open-source use and will always remain that way.</p>
<p>(I am the creator of this product.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <strong>QPython</strong>:</p>
<p>It has a Python Console, Editor, as well as Package Management / Installers</p>
<p><a href="http://qpython.com/" rel="noreferrer">http://qpython.com/</a></p>
<p>It's an open source project with both Python 2 and Python 3 implementations. You can download the source and the Android .apk files directly from github.</p>
<p>QPython 2: <a href="https://github.com/qpython-android/qpython/releases" rel="noreferrer">https://github.com/qpython-android/qpython/releases</a></p>
<p>QPython 3: <a href="https://github.com/qpython-android/qpython3/releases" rel="noreferrer">https://github.com/qpython-android/qpython3/releases</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There is an app called QPython3 in playstore which can be used for both editing and running python script.</p>
<p><a href="https://play.google.com/store/apps/details?id=org.qpython.qpy3" rel="nofollow noreferrer">Playstore link</a></p>
<p>Another app called Termux in which you can install python using command</p>
<pre><code>pkg install python
</code></pre>
<p><a href="https://play.google.com/store/apps/details?id=com.termux&amp;hl=en" rel="nofollow noreferrer">Playstore Link</a></p>
<p>If you want develop apps , there is <a href="https://www.pythoncentral.io/python-for-android-the-scripting-layer-sl4a/" rel="nofollow noreferrer">Python Android Scripting Layer (SL4A)</a> .</p>
<p><code>The Scripting Layer for Android, SL4A, is an open source application that allows programs written in a range of interpreted languages to run on Android. It also provides a high level API that allows these programs to interact with the Android device, making it easy to do stuff like accessing sensor data, sending an SMS, rendering user interfaces and so on.</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Didn't see this posted here, but you can do it with Pyside and Qt now that Qt works on Android thanks to Necessitas.</p>
<p>It seems like quite a kludge at the moment but could be a viable route eventually...</p>
<p><a href="http://qt-project.org/wiki/PySide_for_Android_guide" rel="noreferrer">http://qt-project.org/wiki/PySide_for_Android_guide</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Another option if you are looking for 3.4.2 or 3.5.1 is this archive on GitHub.  </p>
<p><a href="https://github.com/rave-engine/python3-android" rel="noreferrer">Python3-Android 3.4.2</a> or <a href="https://github.com/GRRedWings/python3-android" rel="noreferrer">Python3-Android 3.5.1</a></p>
<p>It currently supports Python 3.4.2 or 3.5.1 and the 10d version of the NDK.  It can also support 3.3 and 9c, 11c and 12</p>
<p>It's nice in that you simply download it, run make and you get the .so or the .a</p>
<p>I currently use this to run raw Python on android devices. With a couple modifications to the build files you can also make x86 and armeabi 64 bit</p>
</div>
<div class="post-text" itemprop="text">
<p>One more option seems to be <a href="http://pyqt.sourceforge.net/Docs/pyqtdeploy/index.html" rel="nofollow noreferrer">pyqtdeploy</a> which citing the docs is:</p>
<blockquote>
<p>a tool that, in conjunction with other tools provided with Qt, enables
  the deployment of PyQt4 and PyQt5 applications written with Python
  v2.7 or Python v3.3 or later. It supports deployment to desktop
  platforms (Linux, Windows and OS X) and to mobile platforms (iOS and
  Android).</p>
</blockquote>
<p>According to <a href="https://stackoverflow.com/questions/24239684/deploying-pyqt5-application-to-android-via-pyqtdeploy-and-qt5">Deploying PyQt5 application to Android via pyqtdeploy and Qt5</a> it is actively developed, although it is difficult to find examples of working Android apps or tutorial on how to cross-compile all the required libraries to Android. It is an interesting project to keep in mind though!</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://pybee.org/" rel="nofollow noreferrer">BeeWare</a>. At the moment of answering this question it is still in early development. It's aim is to be able to create native apps with Python for all supported operating systems, including Android.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="https://github.com/codelv/enaml-native" rel="nofollow noreferrer">enaml-native</a> which takes the react-native concept and applies it to python. </p>
<p>It lets users build apps with native Android widgets and provides APIs to use android and java libraries from python. </p>
<p>It also integrates with android-studio and shares a few of react's nice dev features like code reloading and remote debugging.</p>
</div>
<span class="comment-copy">Let's test Joel's theory about the possibility of updates for well-google-ranked SO posts.  See below or this: <a href="http://google-opensource.blogspot.com/2009/06/introducing-android-scripting.html" rel="nofollow noreferrer">google-opensource.blogspot.com/2009/06/â€¦</a></span>
<span class="comment-copy">I mean the contrary. Given the little content of this post, if it's well ranked, it must be a huge expectation. I strongly hope the best for this project, I'm myself more a pythonista than a Java guy and coding Android with this language would sky rock the prototyping phase.</span>
<span class="comment-copy">@e-satis you right. I'm new to python and its technicality, Im used to compiled languages C/C++. But still a virtual machine inside a virtual machine is not going to be the fastest thing ever, and can probably compete to be the slowest ever way to execute code. For sure its has its utility. I don't hate on Python nor Android, but ...</span>
<span class="comment-copy">@user457015 I think you should really read up on how modern JVMs are implemented, they're <b>nowhere near</b> to "scripting" or "interpretation" by now. If anything, Java is now only ~ 10-25% slower than <b>well / perfectly written</b> C/C++ code. And there's way less place to screw up writing in Java...</span>
<span class="comment-copy">@Carlos if we're being pedantric, Android was named after its creator, Andy Rubin, and his nickname. Also, the logo for Python is a picture of two snakes (cf <a href="https://www.python.org/community/logos/" rel="nofollow noreferrer">python.org/community/logos</a>) and the logo for Android is a picture of a robot. Since logos are often seen as an embodiment of the thing they represent, I think we can let this one slide.</span>
<span class="comment-copy">If you use Kivy, here is a tool to help package your project into an APK: <a href="https://github.com/kivy/python-for-android" rel="nofollow noreferrer">github.com/kivy/python-for-android</a></span>
<span class="comment-copy">@e-satis did <b>Kivy</b> work out for you? was it useful? I would be really thankful if you could post your experiences with Kivy in my <a href="http://stackoverflow.com/questions/8962386">question</a> :)</span>
<span class="comment-copy">I've been playing around with Kivy this past week attempting to write a game. Their main developers were very quick to answer questions on IRC however if you've programmed a GUI before Kivy will make you say WTF quite a bit. Some examples of undocumented things that were weird for me: All widgets get every on_touch_down event even if the event occurred outside their region, No widget has a draw() method, almost everything happens via a custom observer pattern on custom Properties they made up (note these share the name with Python's property, but are not the same)</span>
<span class="comment-copy">Now, almost a full year later, is support any better? Has here been any notable improvements?</span>
<span class="comment-copy">And another year, damn google, with all the python they seem to love with websites, there's no love for python in Android.</span>
<span class="comment-copy">True, but they have to have ASE installed, it's not a solution that lets you write an Android app in python without anything already installed (normal user will be all "wtf is this ASE thing?)</span>
<span class="comment-copy">Further, ASE is a restricted environment; you cannot write full-blown Android apps even if ASE is pre-installed. See <a href="http://stackoverflow.com/questions/2076381">stackoverflow.com/questions/2076381</a></span>
<span class="comment-copy">I think it was renamed to SL4A.</span>
<span class="comment-copy">You can write apps, package them, and even sell them on Play Store if you like, with SL4A now days. It's come along well since the comments above were posted. If you want Python on Android, then PY4A, which runs on SL4A is probably the best choice.</span>
<span class="comment-copy">I confirme, SL4A now permits to write packages of application ready to use, I tried with perl it works</span>
<span class="comment-copy">s/YES/meh. maybe/ ...it's extremely limited. anything graphical or multi touch? a big NO.</span>
<span class="comment-copy">@gcb you can't use the normal android widget set, but you can use "webviews" (which is what the native gmail application uses, for example).</span>
<span class="comment-copy">golfed: <code>import android as a;d=a.Android();d.startActivity('android.intent.action.VIEW',"http://books.google.com?q=%d"%int(d.scanBarcode()['result']['SCAN_RESULT']))</code></span>
<span class="comment-copy">@gdw2, surely the native Gmail app only uses WebViews to parse emails though, not for the actual UI. That makes the comparison a bit absurd.</span>
<span class="comment-copy">Several aspects were broken on my Droid X (buttons, or touchscreen, can't remember), so I didn't get very far with this route.</span>
<span class="comment-copy">Impressive. +1 for this. Not accepted because you can't possibly write anything for the public with this.</span>
<span class="comment-copy">If you mean you can not do graphic apps with it, you most definitely can, of course, more work is needed. I actually use this port combined with SDL 1.3, it's not trivial to go from the python interpreter to an interactive app, but it can be done.</span>
<span class="comment-copy">Can you use any of those to run python script from terminal or tasker? I can't find a way :(</span>
<span class="comment-copy">You can launch an SL4A script from Tasker. There are some examples on <a href="http://tasker.wikidot.com/sl4a" rel="nofollow noreferrer">this page</a> that have snippets of Python being launched from Tasker. It is really a whole different question though.</span>
<span class="comment-copy">There is not a single java word on an Android phone, it's compiled to byte code during the packaging process. Speed is not the issue : Google could provide tools producing the right byte code from a python code (like for Jython). BTW, Dalvik is not  the Java VM so this is not about Java VS Python.</span>
<span class="comment-copy">JAVA bytecode still needs to be processed by a JVM, and the Java language requires a garbage collector anyway. Actual speed could only come from C++.</span>
<span class="comment-copy">@Touzen 2 more years later, we are running Intel Atom processor or octa-core processors now. ;)</span>
<span class="comment-copy">Due to the difference in the power they are able to draw, phones will always be an order of magnitude slower than desktops. However, don't give up on Python for the mobile device, because typically only a fraction of the code is responsible for the processor-intensive work, and this fraction can be optimised by rewriting it in another language.</span>
<span class="comment-copy">By the way Google pushes Kotlin these days - which is a pretty unknown language to most users - it is clear that it's possible to support other languages than Java (I'm a Java dev and a Python fan). So I think the answer is rather a political one than a practical one.</span>
<span class="comment-copy">I just downloaded Kivy from its site. Shows support for Python 3.4 32 and 64-bit, and a demo of touch input working.</span>
<span class="comment-copy">@codeReview, I have been using Kivy with Python2 only and have no experience in it with Python3, is everything running smoothly?</span>
<span class="comment-copy">I will let you know hopefully soon. But I have no experience with Python outside of CPython 3.4 command shell .py files for quickly solving computation or algorithmic problems. This will be my first app with a GUI. I'd need to read more documentation, to understand the Kivy language, and to carefully follow installation steps, so I know how to install Kivi to my <a href="https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s#other-ides" rel="nofollow noreferrer">Python IDE of choice</a> and packaging the APK to push to Android. The is a many-step process, so it's may not be incredibly soon when I can say.</span>
<span class="comment-copy">@codeReview, good luck for your journey. If this is your first app, I strongly recommend to use <i>.kv</i> as layout file. It's like a yaml or simply tree file to define the layout widgets. If your app is multi-screen/layouts, use <code>ScreenManager</code> as this will save you tons of time. Also a piece of advice is to read their mailing list, a bunch of knowledgeable people there willing to help you.</span>
<span class="comment-copy">@codeReview, also, instead of learning from Kivy's demo app, you may gain more insights searching for some existing kivy apps and see how people manage the "widgets" and callbacks in a real-world scenario. Kivy isn't hard to learn at all, I'll say much easier in terms of learning curve than say, in Java+Android or objective-C+iOS</span>
<span class="comment-copy">Cherrypy works well, with ws4py websocket support. Bottle is also fine on SL4A.</span>
<span class="comment-copy">Now qpython added Django support! That's all that I need! Amazing!</span>
<span class="comment-copy">@e-satis: Thanks for your comment.  I don't see which answer I'm duplicating.  I can only guess that you think PFA is the same as Kivy.  Though it's hosted under the Kivy project, you don't even have to use Kivy to use PFA.</span>
<span class="comment-copy">Check @tito's deleted answer at the bottom point to PFA. Plus, there is little interest is running PFA without kivy since it's the only toolkit you got.</span>
<span class="comment-copy">It's not because kivy is currently the only toolkit available (some people are working to intregrate others) than it's a duplicate. Please consider the others options as-it, and not merge all into one post :|</span>
<span class="comment-copy">+1 for Termux. Absolutely wonderful environment to work in. Great package selection in the repos, handy volume button shortcuts. It's the closest thing to Debian on a phone I've ever found.</span>
<span class="comment-copy">using Termux you can install python 2 as well $ apt install python2</span>
