<div class="post-text" itemprop="text">
<p>I want to delete adjacent repeating characters in a string in Python 3. For ex if the input is <code>AABBC</code> the output is <code>ABC</code> or if the input is <code>AAABBBCC</code> the output is <code>ABC</code>. I made two attempts to solve this problem. </p>
<p>Attempt #1</p>
<pre><code>string = input()

for i in range (len(string) - 1):
    if string[i] == string[i+1]:
        string.replace(string[i],"")

print(string)
</code></pre>
<p>The above code returns the same string that is entered. If I enter <code>AABBC</code> it simply returns the same string. Not knowing what I was doing wrong, I tried another attempt.</p>
<p>Attempt #2</p>
<pre><code>string = input()

new = []

for i in string:
    new.append(i)

for i in range (len(new) - 3):
    """in the above line, if I set the range to (len(new)-2), it gives me an 
    error saying "list index out of range"."""
    if new[i] == new[i+1]:
        new.pop(i)

print(new)
</code></pre>
<p>The above code works for double repeating characters, but fails when there are 3 or more repeating characters. If I input <code>AABBC</code> it returns the list <code>['A','B','C']</code> which is perfectly fine, but with the input <code>AAABBCC</code> it returns <code>['A', 'A', 'B', 'C']</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using Regex:</p>
<pre><code>import re

s = ["AABBC", "AAABBBCC"]
for i in s:
    print( re.sub(r"(.)\1+", r"\1", i) )
</code></pre>
<hr/>
<p><strong>Or:</strong></p>
<pre><code>s = ["AABBC", "AAABBBCC"]
for i in s:
    temp = []
    for j in i:
        if not temp:
            temp.append(j)
        else:
            if temp[-1] != j:
                temp.append(j)
    print("".join(temp))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>ABC
ABC
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools</code> to group the <code>char</code>acters like,</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [x[0] for x in itertools.groupby('AABBCC')]
['A', 'B', 'C']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = 'AAABBBCC'

result = ''

for letter in string:
    if len(result) &gt; 0:
        if result[-1] != letter:    # [-1] is the last letter
            result += letter
    else:
        result = letter    # the first letter will always be included

print(result)    # ABC
</code></pre>
<p>That is, only append the letter if it is not already at the end of the result string.</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy to understand short solution :</p>
<pre><code> mot = 'AABBBCC'
 a = [mot[0]] + [mot[i] if mot[i]!=mot[i-1] else '' for i in range(1, len(mot))]
 &gt;&gt;&gt; ['A', '', 'B', '', '', 'C', '']

 result = ''
 for lettre in a:
     result += lettre
 result
 &gt;&gt;&gt; 'ABC'
</code></pre>
<p>You first create a list of the letters which respects a certain condition, then you convert this list into a string. This algorithm can be used for many different conditions.</p>
<p>Note that you don't need to import any new library.</p>
</div>
