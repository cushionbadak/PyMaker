<div class="post-text" itemprop="text">
<p>I have an image of a puzzle piece that i need to resize in order for both the pieces I need to compare to have the same size. I have used the following codes to resize my image. The problem is the length of the line in the image 1 is 187 and after resizing the length of the line in image 2 is 194. intended output is for them to be same</p>
<pre><code>ratio = math.hypot(x2 - x1, y2 - y1) / math.hypot(x4 - x3, y4 - y3)
print("img1", math.hypot(x2 - x1, y2 - y1),"img 2", math.hypot(x4 - x3, y4 - y3)*ratio)

n = int(ratio * new_img_2.shape[0])
img = cv2.resize(new_img_2, (n, n), cv2.INTER_CUBIC)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not entirely sure what you're asking but it seems like you want to resize two images and maintain aspect ratio between the two. If so, here's a function to resize a image and maintain aspect ratio to any width or height.</p>
<p><a href="https://i.stack.imgur.com/UPqXf.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/UPqXf.jpg"/></a></p>
<pre><code>import cv2

# Resizes a image and maintains aspect ratio
def maintain_aspect_ratio_resize(image, width=None, height=None, inter=cv2.INTER_AREA):
    # Grab the image size and initialize dimensions
    dim = None
    (h, w) = image.shape[:2]

    # Return original image if no need to resize
    if width is None and height is None:
        return image

    # We are resizing height if width is none
    if width is None:
        # Calculate the ratio of the height and construct the dimensions
        r = height / float(h)
        dim = (int(w * r), height)
    # We are resizing width if height is none
    else:
        # Calculate the ratio of the 0idth and construct the dimensions
        r = width / float(w)
        dim = (width, int(h * r))

    # Return the resized image
    return cv2.resize(image, dim, interpolation=inter)

if __name__ == '__main__':
    image = cv2.imread('../color_palette.jpg')
    cv2.imshow('image', image)
    cv2.waitKey(0)

    resized = maintain_aspect_ratio_resize(image, width=400)
    cv2.imshow('resized', resized)
    cv2.waitKey(0)
</code></pre>
<p>You may want to rephrase your question to be more clear.</p>
</div>
<span class="comment-copy">You resized your images so that their diagonals have the same length, but they probably didn't have the same shape (width/height ratio) to begin with.</span>
<span class="comment-copy">@ThierryLathuille they do have the same width and height. the outer size of the image is a perfect square</span>
<span class="comment-copy">Is it possible that this is the result of a rounding error? n = int(ratio * ...) leads to some data lose. You should take this in account and add one more computing step.</span>
<span class="comment-copy">@xMutzelx this maximum that this error can be is a difference of 1 right, there its a lot more than that</span>
