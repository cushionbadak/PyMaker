<div class="post-text" itemprop="text">
<p>Under normal circumstance, external python modules such as scipy and numpy are compiled into shared objects when being installed (The part written in C). When python calls import scipy, it will dynamically load these shared objects.
Now I am working on a platform which does not support any dynamic loading function. As a result, I have to link those modules statically with python.
My current approach is to compile all source code of scipy/numpy with python, and call the module initialization function when python initializes. </p>
<pre><code>Py_initializeEx(){
    ...
    //init scipy modules statically
    //below are scipy modules init functions
    init_comb();
    init_cython_special();
    ...
} 
</code></pre>
<p>However, this brings me another problem. I found in many python module initialization functions, especially when they are auto generated from cython, they contain codes to import its parent packages. For example, the cython_special() calls import scipy, but when it is being called, the scipy initialization is not completed yet.</p>
<p>My question is, is there an easy way I can linked these modules statically? What is your suggestions to solve this problem?
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/c-api/import.html#c.PyImport_AppendInittab" rel="nofollow noreferrer"><code>PyImport_AppendInittab</code></a> - this tells Python in advance of a module initialization function associated with a specific name. You'd identify all the modules you need to use that are compiled, link them statically, and then before <code>Py_Initialize</code> you add them to the <code>Inittab</code>.</p>
<p>Nothing happens until the module is imported at runtime when the correct initialization function is run.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I got you right, what you could do is add a path to a dir where the modules will be located at.</p>
<pre><code>import sys
sys.path.insert(0,'/path/to/modules')
from module1 import *
from module2 import * 
</code></pre>
<p>etc.</p>
</div>
<span class="comment-copy">Hi RanAB. Thanks for your reply. But I am afraid this approach can not solve my problem. I think this solution only specifies the path of the module. When python calls from module 1 import *, it will still try to find .so or .dll files under the given path to dynamically load it.</span>
