<div class="post-text" itemprop="text">
<p>I would like to disable all buttons that they are present into the submit-row (save, save and edits, delete, etc...) after the click on one of they.</p>
<p>I started to try to override the change_form for admin model. Something
 like this:</p>
<pre><code>class MyAdmin(admin.ModelAdmin):
    change_form_template = 'admin/reports/models/change_form.html'
</code></pre>
<p>into the <em>admin/reports/models/change_form.html</em> file I added this code:</p>
<pre><code>{% extends "admin/change_form.html" %}

{% load i18n admin_urls %}
&lt;div class="submit-row"&gt;
{% block submit-row %}
{% if show_save %}&lt;input type="submit" value="{% trans 'Save' %}" class="default" name="_save"&gt;{% endif %}
{% if show_delete_link %}
    {% url opts|admin_urlname:'delete' original.pk|admin_urlquote as delete_url %}
    &lt;p class="deletelink-box"&gt;&lt;a href="{% add_preserved_filters delete_url %}" class="deletelink"&gt;{% trans "Delete" %}&lt;/a&gt;&lt;/p&gt;
{% endif %}
{% if show_save_as_new %}&lt;input class="myclass" type="submit" value="{% trans 'Save as new' %}" name="_saveasnew"&gt;{% endif %}
{% if show_save_and_add_another %}&lt;input class="myclass" type="submit" value="{% trans 'Save and add another' %}" name="_addanother"&gt;{% endif %}
{% if show_save_and_continue %}&lt;input class="myclass" type="submit" value="{% if can_change %}{% trans 'Save and continue editing' %}{% else %}{% trans 'Save and view' %}{% endif %}" name="_continue"&gt;{% endif %}
{% if show_close %}&lt;a href="{% url opts|admin_urlname:'changelist' %}" class="closelink"&gt;{% trans 'Close' %}&lt;/a&gt;{% endif %}
{% endblock %}
&lt;/div&gt;
</code></pre>
<p>But I not see any changes (class="<em>myclass</em>" there aren't).</p>
<p>My next changes will be the js code to disable all buttons at on click... but now I'm blocked on this first problem.</p>
<p>I use python 3 and Django 2</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are trying to add classes to the inputs just so you can use JavaScript to disable them upon click, that's not necessary. You should be able to select the buttons pretty easily without adding classes to them. For example, using jQuery included in the Django admin:</p>
<pre><code>django.jQuery(".submit-row :submit").attr("disabled", "disabled")
</code></pre>
<p>If you truly need to override the rendering of the button HTML, you should look at overriding the blocks <code>submit_buttons_bottom</code> and <code>submit_buttons_top</code>:</p>
<pre><code>{% extends "admin/change_form.html" %}
{% if save_on_top %}your submit buttons here{% booking_submit_row %}{% endblock %}{% endif %}
{% block submit_buttons_bottom %}your submit buttons here{% endblock %}
</code></pre>
<p>If you want to avoid repeating yourself with this approach, consider using a custom <code>submit-line.html</code> and building a custom templatetag to output your submit buttons in the above template, like so:</p>
<pre class="lang-py prettyprint-override"><code>from django.contrib.admin.templatetags.admin_modify import submit_row
from django.template import Library


register = Library()

@register.inclusion_tag("admin/&lt;your app&gt;/&lt;your model&gt;/submit_line.html", takes_context=True)
def custom_submit_row(context):
    ctx = submit_row(context)
    original = context["original"] if "original" in context else None
    # adjust as you need based on your context
    return ctx
</code></pre>
<p>Now in your custom <code>change_form.html</code> you can use:</p>
<pre><code>{% extends "admin/change_form.html" %}
{% load custom_admin_modify %}
{% if save_on_top %}{% custom_submit_row %}{% booking_submit_row %}{% endblock %}{% endif %}
{% block submit_buttons_bottom %}{% custom_submit_row %}{% endblock %}
</code></pre>
<p>Hope that helps - good luck!</p>
</div>
