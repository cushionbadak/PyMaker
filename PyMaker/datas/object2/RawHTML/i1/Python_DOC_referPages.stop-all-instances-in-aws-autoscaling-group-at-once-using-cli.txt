<div class="post-text" itemprop="text">
<p>I'm using this code to detach instances from an Auto Scaling group</p>
<pre><code>import os, subprocess
CMD = "aws autoscaling --region us-east-1 describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(Tags[?Key==`Test_Tag_1`].Value,`SBX_Min_Det`)].Instances[*].[InstanceId]' --output text"
output = subprocess.check_output(CMD, shell=True)
lst = []
for char in output:
   lst.append(char)
lst = ''.join(lst).split('\n')
lst.remove("")

print (lst)
for l in lst:
   l = '"'+str(l)+'"'
   new_cmd = "aws autoscaling --region us-east-1 detach-instances --auto-scaling-group-name Test_Group --should-decrement-desired-capacity --instance-ids "+l
   subprocess.check_output(new_cmd, shell=True)
</code></pre>
<p>But, I want to be able to detach multiple instances from multiple groups using one single script.  I'm pretty new to Python and AWS CLI commands.  Any help will be appreciated.  Thanks.</p>
<p>I did some changes to the previous script as below and currently stuck here.</p>
<pre><code>import os, subprocess
CMD = "aws autoscaling --region us-east-1 describe-auto-scaling-groups --query 'AutoScalingGroups[?contains(Tags[?Key==`Name`].Value,`test_asg`)].[AutoScalingGroupName]' --output text"
output = subprocess.check_output(CMD, shell=True)
lst = []
for char in output:
   lst.append(char)
lst = ''.join(lst).split('\n')
lst.remove("")

print (lst)
for l in lst:
   l = '"'+str(l)+'"'
   new_cmd = "aws autoscaling --region us-east-1 describe-auto-scaling-groups --query 'AutoScalingGroups[].Instances[*].[InstanceId]' --output text --auto-scaling-group-name "+l
   output2 = subprocess.check_output(new_cmd, shell=True)
   lst2 = []
   for char in output2:
      lst2.append(char)
   lst2 = ''.join(lst2).split('\n')
   lst2.remove("")

   print(lst2)
   for l2 in lst2:
      l2 = '"'+str(l2)+'"'
      new_cmd_2 = "aws autoscaling --region us-east-1 detach-instances --auto-scaling-group-name $CMD --should-decrement-desired-capacity --instance-ids "+l
      subprocess.check_output(new_cmd_2, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An Amazon EC2 Auto Scaling group can be used to automatically provision a number of Amazon EC2 instances based upon need.</p>
<p>For example, when the intances are busy, a <strong>scaling policy</strong> can automatically launch additional instances ("scale-out"). Then, at night, when the instances are under-utilized, Auto Scaling can automatically remove instances ("scale-in").</p>
<p>Auto Scaling also monitors the health of instances in an Auto Scaling group and will automatically replace any instances that have failed.</p>
<p>This is done by specifying a <strong>Launch Configuration</strong> that defines how to launch a new instance, including Instance Type, AMI and Security Group.</p>
<p><a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/scaling_plan.html#scaling_typesof" rel="nofollow noreferrer">Types of scaling</a> include:</p>
<ul>
<li>Maintain current instance levels at all times (eg replace failed instances)</li>
<li>Manual scaling</li>
<li>Scale based on a schedule</li>
<li>Scale based on demand</li>
</ul>
<p><a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html" rel="nofollow noreferrer">Dynamic Scaling for Amazon EC2 Auto Scaling - Amazon EC2 Auto Scaling</a> can be controlled via:</p>
<ul>
<li><strong>Target tracking scaling</strong>: Increase or decrease the current capacity of the group based on a target value for a specific metric. This is similar to the way that your thermostat maintains the temperature of your home â€“ you select a temperature and the thermostat does the rest.</li>
<li><strong>Step scaling</strong>: Increase or decrease the current capacity of the group based on a set of scaling adjustments, known as step adjustments, that vary based on the size of the alarm breach.</li>
<li><strong>Simple scaling</strong>: Increase or decrease the current capacity of the group based on a single scaling adjustment.</li>
</ul>
<p>The simplest method is to use <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html" rel="nofollow noreferrer">Target Tracking Scaling Policies for Amazon EC2 Auto Scaling</a>:</p>
<blockquote>
<p>With target tracking scaling policies, you select a scaling metric and set a target value. Amazon EC2 Auto Scaling creates and manages the CloudWatch alarms that trigger the scaling policy and calculates the scaling adjustment based on the metric and the target value. The scaling policy adds or removes capacity as required to keep the metric at, or close to, the specified target value. In addition to keeping the metric close to the target value, a target tracking scaling policy also adjusts to the changes in the metric due to a changing load pattern.</p>
</blockquote>
<p><strong>Bottom line:</strong> You should <em>not</em> be detaching and attaching instances to an Auto Scaling group. Rather, you should configure scaling policies for this to happen automatically, based upon a nominated metric (eg CPU Utilization, number of users, work backlog, etc).</p>
<p>Please note that Auto Scaling <strong>launches new instances</strong> or <strong>terminates instances</strong>. It does <em>not</em> start/stop instances.</p>
</div>
<span class="comment-copy"><i>Why</i> do you wish to do this? Normally, detaching instances is used to perform forensic analysis on a troublesome instance. It is strange to want to do this to <i>all</i> instances. Is your intention simply to scale-in?</span>
<span class="comment-copy">Hello John, Thanks so much for the response.  Here's the situation.  We want to stop the servers in the lower environments (which we have 100+ running) during nights and weekends to save cost.  But, these servers are in the Auto Scaling Groups.  So, if I stop a server the ASG will bring up another instance and terminate this as this will show unhealthy.  To avoid that, we want to detach it from ASG and then stop it.  And start it back and attach back to the ASG.  Trying to find the best solution for this.</span>
<span class="comment-copy">This is the <i>exact</i> purpose of having Auto <b>Scaling</b> groups. This is traditionally done <b>automatically by using Scaling Policies</b>. What Scaling Policies have you created? Are they not successfully scaling-in the number of instances when traffic is low?</span>
<span class="comment-copy">Firstly sorry for delayed response John. I'm kind of new to the cloud and trying to learn and do my tasks. When I checked we currently don't have a scaling policy attached to our groups. When I explored the Scaling Policies, I couldn't find anything that does what I need (stopping and starting of servers overnights and weekends).  Am I missing something?</span>
<span class="comment-copy">Thanks a lot John.  I'll check this option.  Thanks again.</span>
