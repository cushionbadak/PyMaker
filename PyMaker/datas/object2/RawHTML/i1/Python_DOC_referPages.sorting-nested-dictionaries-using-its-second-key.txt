<div class="post-text" itemprop="text">
<p>I am trying to sort a nested dictionary using its second key where my dictionary looks like:</p>
<pre><code>my_dictionary = {
    "char": {
        "3": {
            "genman": [
                "motion"
            ]
        }
    }, 
    "fast": {
        "2": {
            "empty": []
        }
    }, 
    "EMPT": {
        "0": {}
    }, 
    "veh": {
        "1": {
            "tankers": [
                "varA", 
                "varB"
            ]
        }
    }
}
</code></pre>
<p>And my expected output will be:</p>
<pre><code>my_dictionary = {
    "EMPT": {
        "0": {}
    }, 
    "veh": {
        "1": {
            "tankers": [
                "varA", 
                "varB"
            ]
        }
    },
    "fast": {
        "2": {
            "empty": []
        }
    },
    "char": {
        "3": {
            "genman": [
                "motion"
            ]
        }
    }
}
</code></pre>
<p>Tried using the following code:</p>
<pre><code>new_dict = {}
for k, v in my_dictionary.items():
    for s in sorted(my_dictionary.itervalues()):
        if not s.keys()[0]:
            new_val = my_dictionary[k].get(s.keys()[0])
            my_dictionary[s.keys()[0]] = new_val
            my_dictionary.update(new_dict)
</code></pre>
<p>It fails badly, and I am getting the same result as my initial dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>actually there is no order for a dict, however you can use OrderedDIct instead.</p>
<pre><code>from collections import OrderedDict
my_dictionary = {
    "char": {
        "3": {
            "genman": [
                "motion"
            ]
        }
    }, 
    "fast": {
        "2": {
            "empty": []
        }
    }, 
    "EMPT": {
        "0": {}
    }, 
    "veh": {
        "1": {
            "tankers": [
                "varA", 
                "varB"
            ]
        }
    }
}
s = sorted((list(v.keys())[0], k) for k, v in my_dictionary.items())
new_dic = OrderedDict([(k,my_dictionary[k]) for _, k in s])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>sorted(my_dictionary.items(), key=lambda x: list(x[1].keys())[0])
</code></pre>
<p>Returns:</p>
<pre><code>[('EMPT', {'0': {}}),
 ('veh', {'1': {'tankers': ['varA', 'varB']}}),
 ('fast', {'2': {'empty': []}}),
 ('char', {'3': {'genman': ['motion']}})]
</code></pre>
<p>Sorted receives a list of key-value pairs, we sort using the result of <code>lambda x: list(x[1].keys())[0]</code> which takes a list of the keys in the inner dict, then grabs the first key (need to do this because dict_keys directly is not indexable).</p>
<p>Edit: the result is a list of key, value pairs but it can be fed into an OrderedDict to use it as a dict.</p>
</div>
<span class="comment-copy">Try using OrderedDict</span>
<span class="comment-copy">@solarc 's answer is a better one, I think.</span>
