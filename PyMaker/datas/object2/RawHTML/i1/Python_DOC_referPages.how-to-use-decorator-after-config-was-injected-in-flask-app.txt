<div class="post-text" itemprop="text">
<p>First my project looks like this:</p>
<pre><code>├───api
│   ├───config
│   │   └───config.json
│   ├───namespace
│   │   └───routes.py
│   └───auth.py (where the decorator is)
│   │   
│   └───__init__.py (where the config is injected with flask injector)
├───core
    └───example_service.py
</code></pre>
<p>I have been trying to refactor some existing code on a flask app to avoid having the validation url hardwritten in the code. The idea is to create a decorator @authorize used on every route handler of the app to check if the request header Authorization is set and working. </p>
<p>Right now the decorator looks like this: </p>
<pre><code>def authorize(func):
    def decorator(*args, **kwargs):
        get_token_info()
        return func(*args, **kwargs)
    return decorator
</code></pre>
<p>And the validation function looks like this:</p>
<pre><code>def get_token_info():
    session = requests.Session()
    res = session.get('my_auth_url', headers={'Authorization' : request.headers['Authorization']}
    if r.status_code != requests.codes.ok:
        abort(401)
</code></pre>
<p>Now, i have an <strong>init</strong> file for my app, where i'm using a flask injector to inject my app's config in my different services classes. The thing is, I would like to also inject the 'my_auth_url' and not write it directly into the code. But it seems flask injector can only inject into classes.</p>
<p>I tried to use the flask global context to make the url accessible everywhere in the app with i figured out that's not it's purpose and I don't really know how to do. (i'm new to python actually)</p>
<p>Thank you very much for your help, and sorry if it's not clear, the project is quite big and it's hard to be clear and concise as the same time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the <code>my_auth_url</code> value from your environment variables.</p>
<pre><code>def get_token_info():
    my_auth_url = os.getenv('AUTHORIZATION_SERVICE_ENDPOINT')
    session = requests.Session()
    res = session.get(my_auth_url, headers={'Authorization' : request.headers['Authorization']}
    if r.status_code != requests.codes.ok:
        abort(401)
</code></pre>
</div>
<span class="comment-copy">Thx for your answer, I'm using requests cause i need to send a request to my auth service to check if the user token is valid.</span>
<span class="comment-copy">what he is saying is that the flask method will receive a request (OBJECT, not library) that already contains what you are looking for so probably requests (LIBRARY not object) is incorrect</span>
<span class="comment-copy">So, I suggest you to get the 'my_auth_url' value from your environment variables. you can use <code>os.getenv('KEY', 'DEFAULT_VALUE')</code></span>
<span class="comment-copy">now you need to configure the server environment to fulfill this requirement.</span>
