<div class="post-text" itemprop="text">
<p>I want to keep asking the user to enter the file name if the input entered is incorrect. I've tested the program with incorrect input (misspelt file name) but instead of asking the user to try again an error message is prompted and the program terminates. The unsuccessful code (part of if) is below. Can anyone help me to detect what's wrong?</p>
<pre><code>import nltk
from nltk.tokenize import word_tokenize
import re
import os
import sys




def main():
    while True:
        try:

            file_to_open =  input("insert the file you would like to use with its extension: ")

        except FileNotFoundError:

            print("File not found.Better try again")
            continue
        else:
            break


    with open(file_to_open) as f:
        words = word_tokenize(f.read().lower())

    with open ('Fr-dictionary2.txt') as fr:
        dic = word_tokenize(fr.read().lower())

        l=[ ]
        errors=[ ]
        for n,word in enumerate (words):
            l.append(word)
            if word == "*":
                exp = words[n-1] + words[n+1]
                print("\nconcatenation trials:", exp)
                if exp in dic:
                    l.append(exp)
                    l.append("$")
                    errors.append(words[n-1])
                    errors.append(words[n+1])
                else:
                    continue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are "protecting" the while loop where the name is simply asked. You could instead put the reading also inside the <code>try</code>/<code>except</code> to handle the problem:</p>
<pre><code>while True:
   try:
       file_to_open =  input("insert the file you would like to use with its extension: ")
       with open(file_to_open) as f:
           words = word_tokenize(f.read().lower())
       break
   except FileNotFoundError:
       print("File not found.Better try again")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's possible to create a Path object even if the path itself does not exist in your filesystem. At some point, you need to ask the Path object if the path inside it exists in the filesystem, before exiting the while loop. You won't need the try/except block doing it like this:</p>
<pre><code>while True:
    p = Path(input("please input the path: "))
    if p.exists():
        break
    print("path does not exist, try again")
</code></pre>
</div>
<span class="comment-copy">Welcome to SO. Add the error message to the post please.</span>
<span class="comment-copy">Actually no exceptions are raised with <code>pathlib.Path("random string")</code></span>
<span class="comment-copy">Instead of ValueError shall I write: "except FileNotFound"?</span>
<span class="comment-copy">@NataliaResende no. Using <code>pathlib</code>, you won't need to catch any exceptions. You should be manually calling <code>path.exists()</code> to check if the file exists. If you want to catch a file not found exception, you can attempt to open the file with <code>open(input("type in path"))</code>, then it will raise a <code>FileNotFoundError</code>.</span>
<span class="comment-copy">@darksky, I've tried to remove pathLib, but still, the code does not work if I type incorrect path. The error message is prompted and the program terminates.</span>
<span class="comment-copy">Can't recommend this, because all of her code has to be indented twice, once inside  <code>while True</code> and another inside <code>try</code>. And it makes it difficult to tell what part of the entire block is causing the <code>FileNotFoundError</code>. Was it <code>input("insert the file...")</code> or something else? It's better to handle the exception close to its generating source, and modularly separate from the rest of the code.</span>
<span class="comment-copy">@darksky, code suggestion worked well. I added one more except  to handle directory error IsADirectoryError. Thanks for all the clarifications</span>
<span class="comment-copy">One problem with the "check-before" approach is that you may successfully check that the file exists, but the file could be gone when you open it for reading.</span>
<span class="comment-copy">@6502 that's like maybe a few micro-second window. Hard to imagine that could be a problem given what the script is doing.</span>
<span class="comment-copy">great! Thanks, but @6502 is better for my case.</span>
