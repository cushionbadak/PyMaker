<div class="post-text" itemprop="text">
<p>I have the following code that seeks to search the list of usernames, and simply return the output "Found in index i" or "Sorry username not found", on first output. </p>
<pre><code>usernames=["u1","u2","u3"]
found=False

while found==False:
  username=input("Enter username:")
  for i in range(len(usernames)):
    if username==usernames[i]:
      found=True
      break

if found==True:
  print("Username found in index:",i)
else:
  print("Sorry,username not found")
</code></pre>
<p>The current code seems to work if the username is right but if erroneous data is used e.g 23234, then it repeats the question and does not jump to the if statement at the bottom of the code (that's what I want).</p>
<p>Could someone please correct this code with an explanation on the most efficient way to solve this problem. It is likely something to do with the boolean flag 'found', and I do not understand why it is not breaking out and going to the bottom if statement. Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you really need the <code>while</code> block?</p>
<pre><code>usernames=["u1","u2","u3"]
index = 0
found = False

username = input("Enter username:")
for i in range(len(usernames)):
  if username == usernames[i]:
    found = True
    index = i
    break

if found:
  print("Username found in index:",index)
else:
  print("Sorry,username not found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not need those boolean flags, range based loops or extra if conditions:</p>
<pre><code>usernames=["u1","u2","u3"]

while True:
  user = input("Enter username: ")    
  if user in usernames:
    print("Username found at Index: {}".format(usernames.index(user)))
    break
  else:
    print("Sorry, username not found. Try again")
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>But if you must continue with your current approach of using for-loop, put an else block on the outer for loop and break if found:</p>
<pre><code>usernames = ["u1","u2","u3"]
found = False

while found == False:
  username = input("Enter username: ")
  for i in range(len(usernames)):
    if username == usernames[i]:
        print("Username found at Index: {}".format(i))
        break
  else: # not and indentation error
        print("Sorry, username not found. Try again")
</code></pre>
<p><strong>EDIT 2</strong>: (without boolean flags)</p>
<pre><code>usernames = ["u1","u2","u3"]

while True:
  username = input("Enter username: ")
  for i in range(len(usernames)):
    if username == usernames[i]:
        print("Username found at Index: {}".format(i))
        break
  else: # not and indentation error
        print("Sorry, username not found. Try again")
</code></pre>
<p><strong>OUTPUT</strong> (in all cases):</p>
<pre><code>Enter username: 2334
Sorry, username not found. Try again
Enter username: u2
Username found at Index: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code will simply never reach the second if because it is designed to only reach the second <code>if</code> if a correct username is entered.</p>
<p>You have to decide to either keep asking for a username until a correct one is entered (that's what you are doing in the <code>while found == true</code> bit).</p>
<p>Or you ask only once and see if it is found, for that you need to remove the <code>while found == true</code> part.</p>
<p>I see that what you meant was probably what DirtyBit did: <a href="https://stackoverflow.com/a/55183057">https://stackoverflow.com/a/55183057</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>while found==False:</code> makes it loop until <code>found</code> becomes <code>True</code>.
So if it doesn't find the username you are looking for, it loops around and asks you again.</p>
<p>Also, if you want to see if a string exists in a list, just use <code>list.index()</code> <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">method</a>:</p>
<pre><code>username=input("Enter username:")
try:
    i = usernames.index(username)
except ValueError:
    print("Sorry,username not found")
else:
    print("Username found in index:",i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better version is this one</p>
<pre><code>usernames = ["u1", "u2", "u3"]

while True:
    username = input("Enter username:")

    if username in usernames:
        print("Username found in index:", usernames.index(username))
        break
    else:
        print("Sorry,username not found")
</code></pre>
<p>Edit on request:</p>
<pre><code>usernames = ["u1", "u2", "u3"]
found = False

while found is False:
    found = False
    username = input("Enter username:")

    for i in range(len(usernames)):
        if usernames[i] == username:
            print("Username found in index:", i)
            found = True
            break

    if found is False:
        print("Sorry,username not found")
</code></pre>
</div>
<span class="comment-copy">put an else block to handle the error data</span>
<span class="comment-copy">"Indentation error"?</span>
<span class="comment-copy">This doesn't answer your question about breaking out of nested loops, but consider an easier way to determine if a string is in a list: <code>if username in usernames:</code></span>
<span class="comment-copy">remove the outer while loop...?</span>
<span class="comment-copy">You don't need the while loop at all, just set found to true if there's a match and thats it.</span>
<span class="comment-copy">That doesn't work. NameError: name 'found' is not defined</span>
<span class="comment-copy">forgot to declare it, now I edited</span>
<span class="comment-copy"><code>for index, candidate in enumerate(usernames): if username == candidate:...</code> would be more idiomatic than iterating over a range.</span>
<span class="comment-copy"><code>if found:</code>, not <code>if found == True:</code>.</span>
<span class="comment-copy">Yes, works! but it makes me wonder if the most efficient way is without a flag at all. Can it be done without the found=false and just the if statement inside a for loop!?</span>
<span class="comment-copy">I'm stumped! - Thank you - this works, but I do not understand it all. How come the 'else' is on the indentation level of the 'for' and not the original 'if'. I clearly don't understand python indentation. I had tried the exact same thing so was logically correct, but my else was on the same line was the 'if' and it repeated blocks</span>
<span class="comment-copy">That's an indentation error infact @MissComputing</span>
<span class="comment-copy">@MilesDavis No that's not an error. Python has for/else constructs. Read about it here <a href="http://book.pythontips.com/en/latest/for_-_else.html" rel="nofollow noreferrer">book.pythontips.com/en/latest/for_-_else.html</a></span>
<span class="comment-copy">@MissComputing Think of it like this, if the <code>else</code> block is on the <code>if</code> level, it would be true if the username is not placed on the first index. for loops also have an else clause!</span>
<span class="comment-copy">My bad, never used for/else statement.</span>
<span class="comment-copy">Thank you  - not sure if it answers the question though. Can you correct the code and post a solution such that it does what the question asks i.e "If the username is present, it prints "present in index.." and if not "sorry no username". I do not wish to use "if username in usernames" as we need to use a for loop to demonstrate</span>
<span class="comment-copy">Yes, and it become 'true' - on the code above, when the username is found. (that bit works). What doesn't work, is that in the other case (when it is not found), I want it to jump to the code below (if statement)and say "Sorry, username not found in list"</span>
<span class="comment-copy">Like I said, the <code>while found==False:</code> statement makes it loop like that. If you don't want it to loop, just get rid of this while cycle!</span>
<span class="comment-copy">Yes, this is good - but as mentioned I want to use the for loop. I want to solve the problem using a for loop please. (this is for teaching algorithmic purposes)</span>
<span class="comment-copy">@MissComputing I updated the answer using for loop</span>
<span class="comment-copy">It does not work - it repeats the "username found or sorry username" unnecessarily</span>
<span class="comment-copy">@MissComputing Sorry, wrong copy - paste. Try it now</span>
