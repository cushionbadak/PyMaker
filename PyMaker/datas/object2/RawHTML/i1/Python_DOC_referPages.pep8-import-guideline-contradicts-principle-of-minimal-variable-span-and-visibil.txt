<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 08</a> states:</p>
<blockquote>
<p>Imports are always put at the top of the file, just after any module
  comments and docstrings, and before module globals and constants.</p>
</blockquote>
<p>However it is a known best practice to minimize the span of variables (lines between declaration and the use), as well as to minimize their visibility. This is explained in <a href="http://aroma.vn/web/wp-content/uploads/2016/11/code-complete-2nd-edition-v413hav.pdf" rel="nofollow noreferrer">Code Complete 2. ed. by Steve McConnell</a>, p.246 for example.</p>
<p>I recognize two types of imports in much of my code. First there are imports of key libraries (e.g. <code>import numpy as np</code>) which I will be using throughout the whole file. Those indeed belong on top!
But there also are imports of specific objects, frequently from my own code, that is often only used at one place.</p>
<p>For the second type I see drawbacks to importing it at the top of the module - firstly, at the place I am using this, I don't see where the object is coming from and must look it up. Also IDE will prompt me to use it at all other locations, which I might prefer not to happen by importing it only inside the routine where I use it (clearly if I will want this routine to be performance optimized I will not do it, but in other cases readability is more important).</p>
<p>Is it time to change this convention? or am I missing some good reasons for having also these one-time-needed imports at the top?</p>
</div>
<div class="post-text" itemprop="text">
<p>Having these one-time-needed imports at the top of the file is more pythonic than having them inside functions, classes, etc. Making your code more pythonic is more important than making minimal variable span and visibility.</p>
</div>
<span class="comment-copy">imports go in the beggining not inside routines, anyone reading your first lines of code will have an idea of what you are using. The conventions make it so that numpy == np so anyone can assume you are calling numpy when saying np. whatever. I don't see the point you are trying to make here, if you can not tel, what np is don't give aliases to libraries/modules you are using</span>
<span class="comment-copy">And by the way, one thing is module globals (numpy packages etc) another is constants, and another is variables which you want to declare with the minimum span and scope, the numpy poackage should NEVER  be a variable for you unless you are doing monkey-patching which you should not be doing</span>
<span class="comment-copy">@E.Serra You have missed my point.</span>
<span class="comment-copy">But there also are imports of specific objects, frequently from my own code, that is often only used at one place. &lt;&lt; I assume you mean these ones, if you are not setting your code as packages then do so, and use objects explicitly whenever you need them, e.g. fun1 uses your_package.routine_1 , fun2 uses your_package.routine2 but you import ALL of them as as import your_package</span>
<span class="comment-copy">Right, but 'pythonic' sounds here like a religions thing. It still makes sense to look for the real reasons one option is preferred over the other.</span>
<span class="comment-copy">You can read <a href="https://stackoverflow.com/questions/25011078/what-does-pythonic-mean">here</a> what does <i>pythonic</i> mean.</span>
<span class="comment-copy">In few words, when writing Python code, PEP8 and other conventions related to Python are preferred to be used over general conventions and conventions related to other programming languages. So, PEP8 is the real reason.</span>
