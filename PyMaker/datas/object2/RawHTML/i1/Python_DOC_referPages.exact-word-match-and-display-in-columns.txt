<div class="post-text" itemprop="text">
<p>I have the following dataframe (df)</p>
<pre><code>   Comments                       ID
0        10         Looking for help
1        11  Look at him but be nice
2        12                  Be calm
3        13               Being good
4        14              Him and Her
5        15                  Himself
</code></pre>
<p>and some words in a list which I need to search for an EXACT match</p>
<pre><code>word_list = ['look','be','him']
</code></pre>
<p>This is my desired output</p>
<pre><code>   Comments                       ID Word_01 Word_02 Word_03
0        10         Looking for help                        
1        11  Look at him but be nice    look     be      him
2        12                  Be calm    be                
3        13               Being good                        
4        14              Him and Her    him                
5        15                  Himself  
</code></pre>
<p>I've tried a few things like str.findall </p>
<pre><code>str.findall(r"\b" + '|'.join(word_list) + r"\b",flags = re.I)
</code></pre>
<p>and a few others but I can't seem to get EXACT matches for my words.</p>
<p>Any help to solve this would be greatly appreciated.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You need word boundaries for each word. One possible solution with <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extractall.html" rel="nofollow noreferrer"><code>Series.str.extractall</code></a>, <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.add_prefix.html" rel="nofollow noreferrer"><code>DataFrame.add_prefix</code></a> and <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html" rel="nofollow noreferrer"><code>DataFrame.join</code></a> to original <code>DataFrame</code>:</p>
<pre><code>word_list = ['look','be','him']

pat = '|'.join(r"\b{}\b".format(x) for x in word_list)
df1 = df['ID'].str.extractall('(' + pat + ')', flags = re.I)[0].unstack().add_prefix('Word_')
</code></pre>
<p>For lowercase data in output add <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.lower.html" rel="nofollow noreferrer"><code>Series.str.lower</code></a>:</p>
<pre><code>df1 = (df['ID'].str.lower()
               .str.extractall('(' + pat + ')')[0]
               .unstack()
               .add_prefix('Word_'))
</code></pre>
<hr/>
<pre><code>df = df.join(df1).fillna('')
print (df)
   Comments                       ID Word_0 Word_1 Word_2
0        10         Looking for help                     
1        11  Look at him but be nice   Look    him     be
2        12                  Be calm     Be              
3        13               Being good                     
4        14              Him and Her    Him              
5        15                  Himself              
</code></pre>
<p>Your solution should be changed by same pattern, the convert values to <code>list</code>s and <code>join</code> to original:</p>
<pre><code>pat = '|'.join(r"\b{}\b".format(x) for x in word_list)
df1 = (pd.DataFrame(df['ID']
        .str.findall(pat, flags = re.I).values.tolist())
        .add_prefix('Word_')
        .fillna(''))   
</code></pre>
<p>Or use list comprehension (should be fastest):</p>
<pre><code>df1 = (pd.DataFrame([re.findall(pat, x, flags = re.I) for x in df['ID']])
       .add_prefix('Word_')
       .fillna(''))
</code></pre>
<p>For lowercase add <code>.lower()</code>:</p>
<pre><code>pat = '|'.join(r"\b{}\b".format(x) for x in word_list)
df1 = (pd.DataFrame([re.findall(pat, x.lower(), flags = re.I) for x in df['ID']])
           .add_prefix('Word_')
           .fillna(''))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use the pandasâ€™ <code>apply</code> function.
Example:</p>
<pre><code>import pandas as pd

my_dataframe = pd.DataFrame({'Comments': [10, 11, 12, 13, 14, 15],
                             'ID': [
                                 'Looking for help',
                                 'Look at him but be nice',
                                 'Be calm',
                                 'Being good',
                                 'Him and Her',
                                 'Himself']
                             })

print(my_dataframe)

word_list = ['look','be','him']


word_list = ['look','be','him']
for index, word in enumerate(word_list):
    def match_word(val):
        """
        Under-optimized pattern matching
        :param val:
        :type val:
        :return:
        :rtype:
        """
        if word.lower() in val.lower():
            return word
        return None
    my_dataframe['Word_{}'.format(index)] = my_dataframe['ID'].apply(match_word)

print(my_dataframe)
</code></pre>
<p>Outputs:</p>
<pre><code>   Comments                       ID
0        10         Looking for help
1        11  Look at him but be nice
2        12                  Be calm
3        13               Being good
4        14              Him and Her
5        15                  Himself

   Comments                       ID Word_0 Word_1 Word_2
0        10         Looking for help   look   None   None
1        11  Look at him but be nice   look     be    him
2        12                  Be calm   None     be   None
3        13               Being good   None     be   None
4        14              Him and Her   None   None    him
5        15                  Himself   None   None    him
</code></pre>
</div>
<span class="comment-copy">What do you mean by an "exact" match? What part of the result from the <code>str.findall</code> method was unsuitable?</span>
<span class="comment-copy">Brilliant. Thanks for your help</span>
<span class="comment-copy">This is not valid Python.</span>
<span class="comment-copy">Not on a computer right now, having difficulties to find the correct quote character. Feel free to edit my post if it does not suits.</span>
<span class="comment-copy">Edited, thanks for your support.</span>
