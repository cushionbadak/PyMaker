<div class="post-text" itemprop="text">
<p>I have a number like below:</p>
<pre><code>0100.8900.0033
</code></pre>
<p>Below is the sample code used to remove earlier dot and white space:</p>
<pre><code>file1 = open('sysid.txt', 'r')
file2 = open('sysip.txt', 'w')
file1_cont = file1.readlines()
for line in file1_cont:
    line = line.replace('.', '')
    file2.write(line)
</code></pre>
<p>I have to convert above number to <code>010089000033</code> by removing dot and white space. </p>
<p>How can I remove unwanted zero '0' and set dot '.' so that it can finally be seen as an IP address.</p>
<p>Example input:</p>
<pre><code>010.089.000.033
</code></pre>
<p>Final result as an IP address below:</p>
<pre><code>10.89.0.33
</code></pre>
<p>Please advise further. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just remove the dots, split the string into 3-digit chunks, and rejoin those with dots.</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; f = itemgetter(slice(0,3), slice(3,6), slice(6,9), slice(9,12))
&gt;&gt;&gt; s = "0100.8900.0033"
&gt;&gt;&gt; '.'.join(f(s.replace('.','')))
'010.089.000.033'
</code></pre>
<p>If the leading zeros are really a problem, I'm not sure there's an efficient way to remove them. I'd go with</p>
<pre><code>&gt;&gt;&gt; '.'.join(['0' if octet == '000' else octet.lstrip("0") for octet in f(s.replace('.', ''))])
'10.89.0.33'
</code></pre>
<p>Or, treat each string as an <code>int</code>. (I'm not sure which is more time- or space-efficient; working with strings, or round tripping from <code>str</code> to <code>int</code> and back to <code>str</code>):</p>
<pre><code>&gt;&gt;&gt; '{}.{}.{}.{}'.format(*map(int, f(s.replace('.', ''))))
'10.89.0.33'
</code></pre>
</div>
<span class="comment-copy">Your question is not clear. What are the rules to convert from the three-numbers-with-two-dots in the input to four-numbers-with-three-dots in the output? How do you know which of the zeros are "unwanted" and which are wanted?</span>
<span class="comment-copy">Specify the rules of this conversion</span>
<span class="comment-copy">Hi...IPv4 address have 4 octet and each octet have max 3 digit and cannot be more than 254. My first step is to remove all the dotted and convert it to a list of digit without any dotted as my description above... from the first step...than need to divide it by adding dotted for every each 3 digit and it will become 4 octet with max 3 digit and not more than 254. The first and second '0' on each octet (if available) must be removed.</span>
<span class="comment-copy">Are you saying that you want to move the dots from separating three 4-digit numbers in the input to separating four 3-digit numbers, then remove leading zeros from those 3-digit numbers? What should be done if any of the output numbers are more than 254? (The usual maximum in IP addresses is 255, not 254.) What if the input is not three 4-digit numbers separated by dots?</span>
<span class="comment-copy">@RoryDaulton 255 is allowed in an address; it just may not be a <i>routable</i> address. ( <code>x.y.z.255</code> in a /24, for example, is reserved as the broadcast address.)</span>
<span class="comment-copy">Yup, just added <i>a</i> way to do that; I'm not sure it's the best way.</span>
<span class="comment-copy">@chepner Why not just convert it to <code>int</code> ?</span>
<span class="comment-copy">@hansolo Just looking into that. For some reason, I was thinking <code>int</code> would read the leading 0 as an octal number.</span>
<span class="comment-copy">@chepner Okay. I see :)</span>
