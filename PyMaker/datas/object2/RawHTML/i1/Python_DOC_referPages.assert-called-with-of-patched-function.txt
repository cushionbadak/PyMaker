<div class="post-text" itemprop="text">
<p>I'm trying to assert the input of a patched request.get() call which is wrapped inside another function. </p>
<pre><code>def get_data(*args):
    # logic to define url, based on '*args'
    url = 'some_url?arg1&amp;arg3'

    # call I want to patch and assert the url of
    response = request.get(url)

    # process response
    stuff = 'processed_response'
    return stuff
</code></pre>
<p>test script:</p>
<pre><code>def mock_response_200(url):
    response = mock.MagicMock()
    response.status_code = 200
    response.json = mock.Mock(return_value={  
        0: {'key1': 'value1', 'key2': 'value2'}
    })
    return response

@mock.patch('request.get', new=mock_response_200)
def test_get_data():
    arg1 = 'arg1'
    arg2 = None
    arg3 = 'arg3'

    stuff = get_data(arg1, arg2, arg3)
    # &lt;assert input arguments of patched function here&gt;
</code></pre>
<p>How do I assert the url which was passed to mocked_response_200? mocked_response_200 isn't 'known' within test_get_data.<br/>
I've checked other posts on here <a href="https://stackoverflow.com/questions/30718346/mocking-assert-called-with-in-python">This one comes close</a> but the answer uses a different patch method. Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are patching an unknown <code>get</code> object in the <code>request</code> module. You probably don't have such a module or object.</p>
<p>You need to address the <code>request</code> object <em>in the module under test</em>. If <code>get_data</code> lives in the module <code>views</code>, then you need to patch <code>views.request.get</code> here:</p>
<pre><code>@mock.patch('views.request.get', new=mock_response_200)
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>mock.patch()</code> documentation</a>:</p>
<blockquote>
<p><em>target</em> should be a string in the form <code>'package.module.ClassName'</code>. The target is imported and the specified object replaced with the new object, so the target must be importable from the environment you are calling <code>patch()</code> from. The target is imported when the decorated function is executed, not at decoration time.</p>
</blockquote>
<p>I'd not use a function here <em>at all</em> however. Just let mock patch the <code>get()</code> method for you, then configure that mock object. You can of course delegate that to a helper function:</p>
<pre><code>def config_response_200_mock(request_get):
    response = request_get.return_value
    response.status_code = 200
    response.json.return_value = {  
        0: {'key1': 'value1', 'key2': 'value2'}
    }
    return response

@mock.patch('views.request.get')
def test_get_data(request_get):
    response_mock = config_response_200_mock(request_get)

    arg1 = 'arg1'
    arg2 = None
    arg3 = 'arg3'

    stuff = get_data(arg1, arg2, arg3)
</code></pre>
<p>You can also create a magic mock object in such a function, then pass in the function to <code>new_callable</code> on <code>mock.patch()</code>:</p>
<pre><code>def response_200_mock():
    get_mock = mock.MagicMock()
    response = get_mock.return_value
    response.status_code = 200
    response.json.return_value = {  
        0: {'key1': 'value1', 'key2': 'value2'}
    }
    return get_mock

@mock.patch('views.request.get', new_callable=response_200_mock)
def test_get_data(request_get):
    arg1 = 'arg1'
    arg2 = None
    arg3 = 'arg3'

    stuff = get_data(arg1, arg2, arg3)
</code></pre>
<p>Either way, the object used to patch <code>request.get</code> with is passed into <code>test_get_data</code> as an argument.</p>
<p>Demo of either approach (using <code>patch</code> as a context manager instead of a decorator, but the principle is the same:</p>
<pre><code>&gt;&gt;&gt; def config_response_200_mock(request_get):
...     response = request_get.return_value
...     response.status_code = 200
...     response.json.return_value = {
...         0: {'key1': 'value1', 'key2': 'value2'}
...     }
...     return response
...
&gt;&gt;&gt; with mock.patch('__main__.request.get') as request_get:
...     response_mock = config_response_200_mock(request_get)
...     arg1 = 'arg1'
...     arg2 = None
...     arg3 = 'arg3'
...     stuff = get_data(arg1, arg2, arg3)
...
&gt;&gt;&gt; stuff
'processed_response'
&gt;&gt;&gt; response_mock.json()
{0: {'key1': 'value1', 'key2': 'value2'}}
&gt;&gt;&gt; request_get.mock_calls
[call('some_url?arg1&amp;arg3')]
&gt;&gt;&gt; def response_200_mock():
...     get_mock = mock.MagicMock()
...     response = get_mock.return_value
...     response.status_code = 200
...     response.json.return_value = {
...         0: {'key1': 'value1', 'key2': 'value2'}
...     }
...     return get_mock
...
&gt;&gt;&gt; with mock.patch('__main__.request.get', new_callable=response_200_mock) as request_get:
...     arg1 = 'arg1'
...     arg2 = None
...     arg3 = 'arg3'
...     stuff = get_data(arg1, arg2, arg3)
...
&gt;&gt;&gt; stuff
'processed_response'
&gt;&gt;&gt; request_get.return_value.json()
{0: {'key1': 'value1', 'key2': 'value2'}}
&gt;&gt;&gt; request_get.mock_calls
[call('some_url?arg1&amp;arg3')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, many thanks to @Ja8zyjits and @Martijn Pieters for their help.<br/>
The solution which worked for me looks as follows:</p>
<pre><code>@mock.patch('request.get', side_effect=mock_response_200)
def test_get_data(mock_get):
    arg1 = 'arg1'
    arg2 = None
    arg3 = 'arg3'
    expected_url = 'some_url?arg1&amp;arg3'

    stuff = get_data(arg1, arg2, arg3)

    mock_get.assert_called_with(url)
</code></pre>
<p>I can't say I fully understand the interaction between passing <code>mock_response_200</code> as <code>'side_effect'</code> and passing <code>mock_get</code> to <code>test_get_data</code> yet. But using this combination I was able to both assert the input of the patched request.get and return the desired response to prevent raising any errors during processing of the response.</p>
<p>edit: code formatting</p>
</div>
<div class="post-text" itemprop="text">
<p>Unittest is to test one basic component at a time. So every other component called within needs to be tested in other tests.</p>
<p>If you only want to assert <code>url</code> was passed properly then I would suggest not to use <code>new</code> keyword</p>
<pre><code>@mock.patch('module.process_response')
@mock.patch('module.request.get')
def test_get_data(mock_get, mock_process_response):
    arg1 = 'arg1'
    arg2 = None
    arg3 = 'arg3'
    url = "what ever url"

    stuff = get_data(arg1, arg2, arg3)
    mock_get.assert_called_with(url)
</code></pre>
<p>This will help you to identify if it was called properly. In the later tests use the <code>new</code> keyword to check if the response returned was processed_properly.</p>
<p>The <code>mock_process_response</code> is a <code>MagicMock</code> object and will prevent <code>process_response</code> from being called and hence wont require the <code>mock_get</code> to define <code>json</code> or <code>status_code</code> to be defined.</p>
<p>edits: added mock for <code>process_response</code>.</p>
</div>
<span class="comment-copy">so what is the problem?</span>
<span class="comment-copy">updated the question</span>
<span class="comment-copy">You are probably getting an exception. Please include the full traceback of the exception if you do get one.</span>
<span class="comment-copy">The patch itself seems to go fine, it's determining the input arguments to the patched function which is the challenge. There's no specific error trace at the moment</span>
<span class="comment-copy">@Koen: Is there any reason you are using a function to produce the mock?</span>
<span class="comment-copy">In previous tests I patched using functions because it allowed for better readability of producing complex data structures which where returned by the patched function. I'm getting closer to my solution, arguments of expected input and actual input are reversed but otherwise the same. I'll post an update once finished</span>
<span class="comment-copy">The distinction between just asserting the input in one test (like in your answer) and asserting the response was really informative. Unfortunately the get_data function tries to process the response and raises an error without the proper status_code and json body. That is why I used the 'new' keyword. I've tried setting mock_get.status_code = 200 in your example but that doesn't seem to work</span>
<span class="comment-copy">@Koen then patch it too. Edited the answer.</span>
<span class="comment-copy">Can any1 point out what was wrong to mark negative in the answer. I would like to rectify the error?</span>
<span class="comment-copy">Didn't downvote personally, appreciate the help. request.get returns an object which contains status_code and json, patching the processing does not work as it's not a separate function (which will probably open up a whole new discussion). In your example, when checking the status_code returned by the patched function, there isn't any as it's not defined. Trying to define it as I mentioned above did not seem to work for me</span>
<span class="comment-copy">@Koen well <code>mock_get</code> will return nothing for <code>json</code> and other <code>response</code> related functions. But the fact <code>process_response</code> itself would not be called instead the patched function will be called is the catch here. The principle of unittest is to test only one function at a time. So every other function called within can be <code>patched</code>.</span>
