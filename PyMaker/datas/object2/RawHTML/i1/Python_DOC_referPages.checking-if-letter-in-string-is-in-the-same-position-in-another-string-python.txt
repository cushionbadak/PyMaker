<div class="post-text" itemprop="text">
<p>I have a list of six words:</p>
<pre><code>words = ['alone', 'algae', 'caper', 'plane', 'flyer', 'tooth']
</code></pre>
<p>and I want to check if a letter in a word is in the same place in any other word. For example, "a" is the first letter in alone, and the first letter in algae, so that would be a match. However, "e" is the fifth letter in plane, and the fourth letter in flyer, so that wouldn't match. I would then want to have a count of how many matches I have total.</p>
<p>Is there a better way to do this than iterating through each letter in each word and checking if that letter appears in the same place in another word? I currently have this code:</p>
<pre><code>match_cnt = 0
for i in words:
    for index, j in enumerate(i):
        for k in range(len(words)):
            if j == words[i][index]:
                match_cnt += 1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your words will have the same length, you can use zip. My one-liner solution without indexing:</p>
<pre><code>match_cnt = sum(sum(1 for x in e if e.count(x)&gt;1)for e in zip(*words))
</code></pre>
<p>It will count all the characters which appear minimum twice in the same index.</p>
</div>
<span class="comment-copy">are you using <code>i</code> twice on purpose? It doesn't seem to be a problem in your case, but it makes the code confusing. It also seems like your code goes over the entire list every time again, whereas you can save on iterations by only looking 'forward' since any match from previously checked works will be already counted</span>
<span class="comment-copy">What do you mean by looking forward? Also, yes, I hadn't noticed the duplicate i, thanks for pointing that out.</span>
<span class="comment-copy">I mean that when you go over all the letters of 'alone' , you will have to go over all other words, but when you check the letters in 'algae', you no longer need to go back and check 'alone' again. You can achieve this by having you second loop (<code>k</code> it seems now) start from <code>i</code>'s index+1, rather than 0.</span>
