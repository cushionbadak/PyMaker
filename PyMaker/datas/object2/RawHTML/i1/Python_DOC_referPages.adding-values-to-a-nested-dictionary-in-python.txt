<div class="post-text" itemprop="text">
<p>I have the following dictionary</p>
<pre><code>d1 = {
  "Completely Agree": {
    "child": {
      "Male": {
        "child": {
          "Greater than 54": {
            "child": {},
            "value": 4,
            "label": "Greater than 54"
          },
          "Between 35 to 39": {
            "child": {},
            "value": 1,
            "label": "Between 35 to 39"
          }
        },
        "value": 5,
        "label": "Male"
      }
    },
    "value": 5,
    "label": "Completely Agree"
  },
  "Somewhat Agree": {
    "child": {
      "Male": {
        "child": {
          "Greater than 54": {
            "child": {},
            "value": 1,
            "label": "Greater than 54"
          },
          "Between 45 to 49": {
            "child": {},
            "value": 2,
            "label": "Between 45 to 49"
          },
          "Between 25 to 29": {
            "child": {},
            "value": 1,
            "label": "Between 25 to 29"
          },
          "Between 35 to 39": {
            "child": {},
            "value": 1,
            "label": "Between 35 to 39"
          },
          "Between 50 to 54": {
            "child": {},
            "value": 3,
            "label": "Between 50 to 54"
          },
          "Between 40 to 44": {
            "child": {},
            "value": 1,
            "label": "Between 40 to 44"
          }
        },
        "value": 9,
        "label": "Male"
      },
      "Female": {
        "child": {
          "Between 25 to 29": {
            "child": {},
            "value": 2,
            "label": "Between 25 to 29"
          },
          "Between 30 to 34": {
            "child": {},
            "value": 1,
            "label": "Between 30 to 34"
          },
          "Greater than 54": {
            "child": {},
            "value": 1,
            "label": "Greater than 54"
          }
        },
        "value": 4,
        "label": "Female"
      }
    },
    "value": 13,
    "label": "Somewhat Agree"
  },
  "Neither Agree nor Disagree": {
    "child": {
      "Male": {
        "child": {
          "Between 25 to 29": {
            "child": {},
            "value": 1,
            "label": "Between 25 to 29"
          },
          "Between 35 to 39": {
            "child": {},
            "value": 1,
            "label": "Between 35 to 39"
          },
          "Between 30 to 34": {
            "child": {},
            "value": 1,
            "label": "Between 30 to 34"
          },
          "Between 45 to 49": {
            "child": {},
            "value": 1,
            "label": "Between 45 to 49"
          },
          "Between 50 to 54": {
            "child": {},
            "value": 1,
            "label": "Between 50 to 54"
          }
        },
        "value": 5,
        "label": "Male"
      },
      "Female": {
        "child": {
          "Less than 25": {
            "child": {},
            "value": 1,
            "label": "Less than 25"
          }
        },
        "value": 1,
        "label": "Female"
      }
    },
    "value": 6,
    "label": "Neither Agree nor Disagree"
  }
</code></pre>
<p>I want to insert another key lets say 'data_recs' on the same level where child is an empty dictionary {}. So the result should be</p>
<pre><code>d1 =  {
  "Completely Agree": {
    "child": {
      "Male": {
        "child": {
          "Greater than 54": {
            "child": {},
            "value": 4,
            "label": "Greater than 54",
            "data_recs": [1,2,3,4]
          },
          "Between 35 to 39": {
            "child": {},
            "value": 1,
            "label": "Between 35 to 39",
            "data_recs": [1,2,3,4]
          }
        },
        "value": 5,
        "label": "Male"
      }
    },
    "value": 5,
    "label": "Completely Agree"
  },
  "Somewhat Agree": {
    "child": {
      "Male": {
        "child": {
          "Greater than 54": {
            "child": {},
            "value": 1,
            "label": "Greater than 54",
            "data_recs": [1,2,3,4]
          },
          "Between 45 to 49": {
            "child": {},
            "value": 2,
            "label": "Between 45 to 49"
          },
          "Between 25 to 29": {
            "child": {},
            "value": 1,
            "label": "Between 25 to 29",
            "data_recs": [1,2,3,4]
          },
          "Between 35 to 39": {
            "child": {},
            "value": 1,
            "label": "Between 35 to 39",
            "data_recs": [1,2,3,4]
          },
          "Between 50 to 54": {
            "child": {},
            "value": 3,
            "label": "Between 50 to 54",
            "data_recs": [1,2,3,4]
          },
          "Between 40 to 44": {
            "child": {},
            "value": 1,
            "label": "Between 40 to 44",
            "data_recs": [1,2,3,4]
          }
        },
        "value": 9,
        "label": "Male"
      },
      "Female": {
        "child": {
          "Between 25 to 29": {
            "child": {},
            "value": 2,
            "label": "Between 25 to 29",
            "data_recs": [1,2,3,4]
          },
          "Between 30 to 34": {
            "child": {},
            "value": 1,
            "label": "Between 30 to 34",
            "data_recs": [1,2,3,4]
          },
          "Greater than 54": {
            "child": {},
            "value": 1,
            "label": "Greater than 54",
            "data_recs": [1,2,3,4]
          }
        },
        "value": 4,
        "label": "Female"
      }
    },
    "value": 13,
    "label": "Somewhat Agree"
  }
</code></pre>
<p>The dictionary can have n number of hierarchy. I have written the following code to implement this but I think I am missing something out here. </p>
<pre><code>def parse_master_dict(data, recs_map):
    for k,v in data.items():
        print k, v
        if v.get('child', None):
            child = v['child']
            if not child:
                print "here", k
                v['data_recs'] = recs_map.get(k, [])
            else:
                #if child can have further children
                parse_master_dict(child, recs_map)
</code></pre>
<p>Please advise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>if v.get('child', None):</code> statement is preventing you from proceeding to update the dict when the child dict is empty since the condition would be evaluated as <code>False</code>. Remove the <code>if</code> statement and your code should work:</p>
<pre><code>def parse_master_dict(data, recs_map):
    for k,v in data.items():
        child = v['child']
        if not child:
            v['data_recs'] = recs_map.get(k, [])
        else:
            parse_master_dict(child, recs_map)
</code></pre>
</div>
