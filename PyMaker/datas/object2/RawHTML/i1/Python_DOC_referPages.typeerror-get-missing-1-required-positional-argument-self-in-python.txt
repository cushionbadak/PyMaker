<div class="post-text" itemprop="text">
<p>I am new to python and have hit a wall. I followed several tutorials but cant get past the error:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Dom\Desktop\test\test.py", line 7, in &lt;module&gt;
    p = Pump.getPumps()
TypeError: getPumps() missing 1 required positional argument: 'self'
</code></pre>
<p>I examined several tutorials but there doesn't seem to be anything different from my code. The only thing I can think of is that python 3.3 requires different syntax.</p>
<p>main scipt:</p>
<pre><code># test script

from lib.pump import Pump

print ("THIS IS A TEST OF PYTHON") # this prints

p = Pump.getPumps()

print (p)
</code></pre>
<p>Pump class:</p>
<pre><code>import pymysql

class Pump:

    def __init__(self):
        print ("init") # never prints


    def getPumps(self):
                # Open database connection
                # some stuff here that never gets executed because of error
</code></pre>
<p>If I understand correctly "self" is passed to the constructor and methods automatically. What am I doing wrong here?</p>
<p>I am using windows 8 with python 3.3.2</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to instantiate a class instance here.</p>
<p>Use</p>
<pre><code>p = Pump()
p.getPumps()
</code></pre>
<p>Small example - </p>
<pre><code>&gt;&gt;&gt; class TestClass:
        def __init__(self):
            print("in init")
        def testFunc(self):
            print("in Test Func")


&gt;&gt;&gt; testInstance = TestClass()
in init
&gt;&gt;&gt; testInstance.testFunc()
in Test Func
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to initialize it first:</p>
<pre><code>p = Pump().getPumps()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also get this error by prematurely taking PyCharm's advice to annotate a method @staticmethod.  Remove the annotation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>'self'</em> keyword in python is analogous to <em>'this'</em> keyword in c++ / java / c#.</p>
<p>In python 2 it is done implicitly by the compiler <code>(yes python does compilation internally)</code>. 
It's just that in python 3 you need to mention it <code>explicitly</code> in the constructor and member functions. example:</p>
<pre><code> class Pump():
 //member variable
 account_holder
 balance_amount

   // constructor
   def __init__(self,ah,bal):
   |    self.account_holder = ah
   |    self.balance_amount = bal

   def getPumps(self):
   |    print("The details of your account are:"+self.account_number + self.balance_amount)

 //object = class(*passing values to constructor*)
 p = Pump("Tahir",12000)
 p.getPumps()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had a similar problem. A piece of my code looked like this:</p>
<pre><code>class player(object):
    def update(self):
        if self.score == game.level:
            game.level_up()

class game(object):
    def level_up(self):
        self.level += 1
</code></pre>
<p>It also gave me that error about missing <code>self</code>. I solved it by typing <code>game.level_up(game)</code> instead of <code>game.level_up()</code>.</p>
<p>It should work for you too, but I'm not sure if that's the reccomended way.</p>
</div>
<span class="comment-copy">Tried that before but was missing "()". Is that new in python 3.x?</span>
<span class="comment-copy">Oops. Didn't realise. Fixing it. Sorry.</span>
<span class="comment-copy">@DominicM : Nope, that has always been there.</span>
<span class="comment-copy">Yup, looking back at tutorials I followed, my brain must have just blacked out the brackets :)</span>
<span class="comment-copy">class names should be upper case, i.e., 'testClass' should be 'TestClass'</span>
<span class="comment-copy">Simplicity is often under-rated.</span>
<span class="comment-copy">Doing this would make p equal to the method getPumps(), whilst this would run p wouldn't be 'usable' as a variable for the Pump() class. This isn't great practice imo as itsjust creating a useless variable. If the only goal is to run the getPumps function, then it would work just running Pump().getPumps() instead of creating a variable for the function.</span>
<span class="comment-copy">This is changing the class level attribute of the game object, not the instance - it will be changed on all other game objects which have not levelled up (have not redefined the attribute to be instance level). <b>Do not</b> do this. Please instantiate the class first.</span>
