<div class="post-text" itemprop="text">
<p>Following is the Dataframe I am starting from:</p>
<pre><code>import pandas as pd
import numpy as np

d= {'PX_LAST':[1,2,3,3,3,1,2,1,1,1,3,3],'ma':[2,2,2,2,2,2,2,2,2,2,2,2],'action':[0,0,1,0,0,-1,0,1,0,0,-1,0]}
df_zinc = pd.DataFrame(data=d)

df_zinc
</code></pre>
<h3>Now, I need to add a column called 'buy_sell', which:</h3>
<ul>
<li>when 'action'==1, populates with 1 if 'PX_LAST' &gt;'ma', and with -1 if 'PX_LAST'&lt;'ma'</li>
<li>when 'action'==-1, populates with the opposite of the previous non-zero value that was populated</li>
</ul>
<p>FYI: in my data, the row that needs to be filled with the opposite of the previous non-zero item is always at the same distance from the previous non-zero item (i.e., 2 in the current example). This should facilitate making the code.</p>
<h3>the code that I made so far is the following. It seems right to me. Do you have any fixes to propose?</h3>
<pre><code> while index &lt; df_zinc.shape[0]:
    if df_zinc['action'][index] == 1:
        if df_zinc['PX_LAST'][index]&lt;df_zinc['ma'][index]:
            df_zinc.loc[index,'buy_sell'] = -1
        else:
            df_zinc.loc[index,'buy_sell'] = 1
    elif df_zinc['action'][index] == -1:
            df_zinc['buy_sell'][index] = df_zinc['buy_sell'][index-3]*-1 
    index=index+1
df_zinc
</code></pre>
<h3>the resulting dataframe would look like this:</h3>
<pre><code>    df_zinc['buy_sell'] = [0,0,1,0,0,-1,0,-1,0,0,1,0]

    df_zinc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, this would be my suggestion according to the example output (and assuming I understood the question properly:</p>
<pre><code>def buy_sell(row):
   if row['action'] == 0:
      return 0
   if row['PX_LAST'] &gt; row['ma']:
      return 1 * (-1 if row['action'] == 0 else 1)
   else:
      return -1 * (-1 if row['action'] == 0 else 1)
   return 0

df_zinc = df_zinc.assign(buy_sell=df_zinc.apply(buy_sell, axis=1))      
df_zinc
</code></pre>
<p>This should behave as expected by the rules. It does not take into account the possibility of 'PX_LAST' being equal to 'ma', returning 0 by default, as it was not clear what rule to follow in that scenario.</p>
<p><strong>EDIT</strong></p>
<p>Ok, after the new logic explained, I think this should do the trick:</p>
<pre><code>def assign_buysell(df):
    last_nonzero = None
    def buy_sell(row):
        nonlocal last_nonzero
        if row['action'] == 0:
            return 0
        if row['action'] == 1:
            if row['PX_LAST'] &lt; row['ma']:
                last_nonzero = -1
            elif row['PX_LAST'] &gt; row['ma']:
                last_nonzero = 1
        elif row['action'] == -1:
            last_nonzero = last_nonzero * -1
        return last_nonzero
    return df.assign(buy_sell=df.apply(buy_sell, axis=1))
df_zinc = assign_buysell(df_zinc)
</code></pre>
<p>This solution is independent of how long ago the nonzero value was seen, it simply remembers the last nonzero value and pipes the opposite wen action is -1.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html" rel="nofollow noreferrer"><code>np.select</code></a>, and use <code>np.nan</code> as a label for the rows that satisfy the third condition:</p>
<pre><code>c1 = df_zinc.action.eq(1) &amp; df_zinc.PX_LAST.gt(df_zinc.ma)
c2 = df_zinc.action.eq(1) &amp; df_zinc.PX_LAST.lt(df_zinc.ma)
c3 = df_zinc.action.eq(-1)

df_zinc['buy_sell'] = np.select([c1,c2, c3], [1, -1, np.nan])
</code></pre>
<p>Now in order to fill <code>NaNs</code> with the value from <code>n</code> rows above (in this case <code>3</code>), you can <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html" rel="nofollow noreferrer"><code>fillna</code></a> with a shifted version of the dataframe:</p>
<pre><code>df_zinc['buy_sell'] = df_zinc.buy_sell.fillna(df_zinc.buy_sell.shift(3)*-1)
</code></pre>
<p><b> Output </b></p>
<pre><code>   PX_LAST  ma  action  buy_sell
0         1   2       0       0.0
1         2   2       0       0.0
2         3   2       1       1.0
3         3   2       0       0.0
4         3   2       0       0.0
5         1   2      -1      -1.0
6         2   2       0       0.0
7         1   2       1      -1.0
8         1   2       0       0.0
9         1   2       0       0.0
10        3   2      -1       1.0
11        3   2       0       0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html" rel="nofollow noreferrer"><code>np.select</code></a> for this, since you have multiple conditions:</p>
<pre><code>conditions = [
    (df_zinc['action'] == 1) &amp; (df_zinc['PX_LAST'] &gt; df_zinc['ma']),
    (df_zinc['action'] == 1) &amp; (df_zinc['PX_LAST'] &lt; df_zinc['ma']),
    (df_zinc['action'] == -1) &amp; (df_zinc['PX_LAST'] &gt; df_zinc['ma']),
    (df_zinc['action'] == -1) &amp; (df_zinc['PX_LAST'] &lt; df_zinc['ma'])
]

choices = [1, -1, 1, -1]

df_zinc['buy_sell'] = np.select(conditions, choices, default=0)
</code></pre>
<p><strong>result</strong></p>
<pre><code>print(df_zinc)
    PX_LAST  ma  action  buy_sell
0         1   2       0         0
1         2   2       0         0
2         3   2       1         1
3         3   2       0         0
4         3   2       0         0
5         1   2      -1        -1
6         2   2       0         0
7         1   2       1        -1
8         1   2       0         0
9         1   2       0         0
10        3   2      -1         1
11        3   2       0         0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here my solution using the function shift() to trap the data of 3th up row:</p>
<pre><code>df_zinc['buy_sell'] = 0
df_zinc.loc[(df_zinc['action'] == 1) &amp; (df_zinc['PX_LAST'] &lt; df_zinc['ma']), 'buy_sell'] = -1
df_zinc.loc[(df_zinc['action'] == 1) &amp; (df_zinc['PX_LAST'] &gt; df_zinc['ma']), 'buy_sell'] = 1
df_zinc.loc[df_zinc['action'] == -1, 'buy_sell'] = -df_zinc['buy_sell'].shift(3)
df_zinc['buy_sell'] = df_zinc['buy_sell'].astype(int)

print(df_zinc)
</code></pre>
<p>output:</p>
<pre><code>    PX_LAST  ma  action  buy_sell 
0         1   2       0          0
1         2   2       0          0
2         3   2       1          1
3         3   2       0          0
4         3   2       0          0
5         1   2      -1         -1
6         2   2       0          0
7         1   2       1         -1
8         1   2       0          0
9         1   2       0          0
10        3   2      -1          1
11        3   2       0          0
</code></pre>
</div>
<span class="comment-copy">Please include an example of the output you expect. It is hard for me to follow your logic here.</span>
<span class="comment-copy">sure. here it is</span>
<span class="comment-copy">shouldn't the line after <code>elif df_zinc['action'][index] == -1:</code> be <code>df_zinc.loc[index,'buy_sell'] = = df_zinc['PX_LAST'][index-3]*-1</code>? Otherwise you are overwriting PX_LAST instead of adding a new value to the 'buy_sell' column.</span>
<span class="comment-copy">good spot! I changed it (check the new question), and now it seems to work actually. Do you spot any mistakes?</span>
<span class="comment-copy">Your goal is to update the 'PX_LAST', 'buy_sell' or both?</span>
<span class="comment-copy">thanks a lot for the help. This does not respect my logic unfortunately, though. I added my code on the question to clarify what I am trying to do. Do you know how I can fix it?</span>
<span class="comment-copy">thanks a lot for the help. This does not respect my logic unfortunately, though. I added my code on the question to clarify what I am trying to do. Do you know how I can fix it?</span>
<span class="comment-copy">Updated @gianluca , that makes it much simpler :-)</span>
<span class="comment-copy">thanks a lot for the help. This does not respect my logic unfortunately, though. I added my code on the question to clarify what I am trying to do. Do you know how I can fix it?</span>
<span class="comment-copy">Could you clarify where it differs, since im getting the same output.</span>
<span class="comment-copy">'buy_sell' should be zero by default. That said, when it is in the same row where action=1, it should = 1 if PX_LAST&gt;ma, and it should =-1 if PX_LAST&lt;ma. When instead it is in the same row where action=-1, it should have the same value it had 3 rows before. In your code, the cases in which action=-1 do no link to buy_sell's previous value (the one 3 rows before).   In my opinion, you can only execute this logic through a loop. Which is what I am trying to do (check my question - I edited it to include my current code).</span>
