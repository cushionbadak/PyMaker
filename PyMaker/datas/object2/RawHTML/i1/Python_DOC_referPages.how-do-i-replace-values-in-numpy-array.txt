<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19766757/replacing-numpy-elements-if-condition-is-met">Replacing Numpy elements if condition is met</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I want to replace elements in a np.array, for instance:</p>
<pre><code>arr = np.array([4,5,6,7,3])
</code></pre>
<p>I want to replace every element which meets my condition with a given value, for example 3&lt;=x&lt;=5. And replace it with a random number such as randint(90, 99).</p>
<p>Therefore, my expected output is:</p>
<pre><code>[91 94  6  7 92]
</code></pre>
<p>I tried something like this:</p>
<pre><code>out = np.where(arr&gt;4, randint(90, 99), arr)
</code></pre>
<p>But I have 2 probelms: <br/>
1) I can't specity an interval<br/>
2) I can't get 3 random numbers - but only one</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a loop, it's simple:</p>
<pre><code>j=0
for i in arr:
    if(3&lt;=i and i&lt;=5)
        arr[j]=99
        j+=1
</code></pre>
</div>
<span class="comment-copy">What was your attempt? This kind of thing is bread and butter of numpy and would be covered in most tutorials</span>
<span class="comment-copy">I'm not really familiar with numpy, but this seems pretty simple. Can you please show what you've tried?</span>
<span class="comment-copy">Second answer solves your problem</span>
<span class="comment-copy">Use this: <code>arr[np.argwhere((3&lt;=arr)&amp;(arr&lt;=5))] = 99</code></span>
<span class="comment-copy">@vlad no need for <code>np.argwhere</code>. <code>arr[(3 &lt;= arr) &amp; (arr &lt;= 5)] = 99</code>. The OP has now decided to change the assigned value to some random number; the question continues to expand even after being closed</span>
<span class="comment-copy">I though there was some build-in function for this..</span>
<span class="comment-copy">No, <i>don't</i> use a python loop for this. If you do that, you may as well be using python lists. This defeats the purpose of arrays. The whole point of numpy is being able to vectorize this kind of thing and get orders of magnitude speed up over regular python.</span>
<span class="comment-copy">Neither simple nor appropriate for numpy...</span>
<span class="comment-copy">Just because you will not use <i>explict</i> loops, doesn't mean you will not use it at all.</span>
<span class="comment-copy">No, but I'd rather my loop runs in C code that can also duck under the GIL and runs several hundred times faster.</span>
