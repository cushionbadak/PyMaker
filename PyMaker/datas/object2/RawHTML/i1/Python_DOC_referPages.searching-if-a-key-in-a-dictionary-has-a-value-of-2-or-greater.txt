<div class="post-text" itemprop="text">
<p>The function histogram returns a dictionary where the keys are letters and the values are the number of times that letter appears in the argument passed to it.</p>
<pre><code>def histogram(s):
    d = dict()
        for c in s:
            if c not in d:
                d[c] = 1
            else:
                d[c] += 1
    return d
</code></pre>
<p>I would like the function <code>has_duplicates</code> to use histogram.  Then search the dictionary that is returned to check for any values that are greater than 1, returning either <code>True</code> or <code>False</code>.</p>
<pre><code>def has_duplicates(t):
     histogram(t)
</code></pre>
<p>I am having difficulty accessing the values within the dictionary that's been returned by histogram.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>You are not assigning <code>histogram(t)</code> to anything in your <code>has_duplicates</code> function.</p></li>
<li><p>You don't need to reinvent a wheel: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> will do it for you.</p></li>
</ul>
<p>So... something like this?</p>
<pre><code>from collections import Counter

def has_duplicates(s):
    counter = Counter(s)
    return {key: value &gt; 1 for key, value in counter.items()}

has_duplicates([1, 2, 7, 2, 2])
# =&gt; {1: False, 2: True, 7: False}
</code></pre>
<p>If you meant a single <code>True</code> if any duplicates are detected,</p>
<pre><code>def has_duplicates(s):
    counter = Counter(s)
    return any(value &gt; 1 for value in counter.values())

has_duplicates([1, 2, 7, 2, 2])
# =&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>like so:</p>
<pre><code>def has_duplicates(t):
   d = histogram(t)
   duplicates = [key for key, value in d.items() if value &gt; 1]
   return True if duplicates else False
   # or just: return bool(duplicates)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming its python 3</p>
<pre class="lang-py prettyprint-override"><code>s = {"a": 1, "b":3, "c":2, "d":4, "e":1}

s_new = {k:v for k,v in s.items() if v &gt; 1}

print(s_new)
</code></pre>
<p>Result:</p>
<blockquote>
<p>{'d': 4, 'b': 3, 'c': 2}</p>
</blockquote>
<p>For Python 2, use <code>iteritems()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you're only interested in whether or not there are duplicates, there is no reason to loop over the entire dictionary when you've found a duplicate earlier:</p>
<pre><code>def has_duplicates(t):
    for v in t.values():
        if v &gt; 1:
            return True
    return False
</code></pre>
<p><code>collections.Counter</code> however is useful for counting the characters in <code>histogram()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You find good answers to your question in the posts, above.</p>
<p>But here's another approach with little code that you might think about, if your goal is just to check for any duplicate characters (or objects):</p>
<pre><code>def has_dupes(t):
    return len(t) != len(set(t))
</code></pre>
<p><em>set(t)</em> converts the string in <em>t</em> into a set of chars. During conversion, all duplicates are automatically removed, because sets can hold every object only once. Comparing the length of the initial string with the number of items in the created set will return True if there are no duplicates, but False if at least one duplicate has been removed during set creation. That works with other sequences as well.</p>
<p><strong>Note:</strong> Negative comparison '!=' was used to make the function a positive check for dupes, instead of a negative check for no dupes.</p>
<p>Michael</p>
</div>
<span class="comment-copy">add this to your has_duplicates function <code>return len([v for k,v in histogram(t).items() if v&gt;1]) &gt; 1</code></span>
<span class="comment-copy">@John Jefferson Bautista Is there a special reason for iterating over the items? If you only want to check the values, you can use the dict's method .values().</span>
<span class="comment-copy">@pistol2myhead This is not an answer to your question, but an advice: If your sole target is to check and do some action, if at least one char appears twice, then you might use short circuit. That is, put a break into the ELSE block of your IF condition, as the result is clear as soon as you encounter the second occurance.</span>
<span class="comment-copy">@MichaelS. You could have tagged op. I just edited the question for better format.</span>
<span class="comment-copy"><code>Counter</code> makes sense for counting in <code>histogram</code>, not for finding duplicates after counting is done, no?</span>
<span class="comment-copy">@EndreBoth <code>Counter</code> is a replacement for <code>histogram</code> - they do the same thing. It is not for use “inside” <code>histogram</code>.</span>
<span class="comment-copy">You're right that Counter obviates the need for a separate function altogether.</span>
<span class="comment-copy">Exactly what I was after, thank you.</span>
<span class="comment-copy">There is so much overhead for just having to check one by one and stop immediately when the first number &gt; 1 is found.</span>
<span class="comment-copy">Well, yes, but: 1. the code is very clear and concise, and 2.: usually, for this kind of problem you notice rather soon that you might want to report <i>which</i> items are duplicate, and then you need the full list anyway.</span>
