<div class="post-text" itemprop="text">
<p>For a bachelors thesis, I need to count people using a video camera, and this as correct as possible. For this problem I make use of Python together with OpenCV. I know the neural networks like a CNN is the best solution to try and do this. Now the problem here is that for my thesis, I should not use Neural Networks.</p>
<p>I have been researching this topic quite often, but I keep finding object detection and tracking with Neural Network models on Tensorflow and Keras (Yolo, Mobilenet).
The only 'old school' methods that I have found is: background subtraction with mean width and height of a person and a method using HOG with SVM.
Are there any other algorithms I can use? (like knn or random forest instead of SVM)</p>
<p>Another question I still have and can't find a real answer too is how to use this in a video instead of an image. Do you split up the video frame by frame and then detect the person? Or is there another approach for this that I haven't found yet? I feel like doing the object recognition and detection for each frame will be pretty intensive for the machine it's running on. </p>
<p>Will it also be possible to detect multiple people in one frame?</p>
<p>I really hope somebody can help me with this matter, as I have been stuck on this part of my thesis for quite some time now. I want to make some progress again! Many thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>The first method - HAAR cascades as features + AdaBoost as classifier. Faster but worst - LBP instead HAAR.</p></li>
<li><p>HOG + linear SVM. And more: CoHOG, DPM,...</p></li>
<li><p>ICF (integral channel features) + forest.</p></li>
</ol>
<p>This is all the most important.</p>
<p><strong>Edit 1</strong>: 
And you can use more features (colors, symmetry features) and reduction technique: PCA, PLS etc. For example linear SVM is very fast but not robust for noise. Some researchers used reduction for feature vector size and gave the better results. A good paper "Vehicle Detection using Partial Least Squares": <a href="https://anikem.github.io/papers/Kembhavi_VehicleDetection_PAMI2011.pdf" rel="nofollow noreferrer">https://anikem.github.io/papers/Kembhavi_VehicleDetection_PAMI2011.pdf</a>
But DNNs showed much better results.</p>
</div>
<span class="comment-copy">There's a lot of literature on crowd density estimation from pre-CNN times - try to search for "crowd density estimation survey" on Google Scholar for a starting point. Articles earlier than 2010 are probably not using neural networks. I've skimmed over a few surveys, and it looks as if there were a lot of different approaches, e.g. using texture analysis, but I would guess that none of them can outperform a state of the art net like Faster-RCNN or Yolo</span>
<span class="comment-copy">I will look at them! Thanks a lot</span>
<span class="comment-copy">I am so sorry to bother you again, but I have found out about these algorithms. The only thing I can't find is why to use these 'combos'. Why not use HOG as feature extraction with forest as classifier? Why is it always HOG with a support vector classifier? why not HAAR + SVM. What am I not seeing?</span>
<span class="comment-copy">It's evolution. Only the most stable combinations remain. HAAR with integral image or LBP + AdaBoost is very fast,  it was a revolution in computer vision: smiles, faces, eyes detection in photo cameras. HOG + linear SVM was very robust for objects with structure: faces (in dlib library), pedestrians, license plates etc. CoHOG was used in Toshiba for automotive vision. ICF was very good for GPU before  DNN expansion.</span>
