<div class="post-text" itemprop="text">
<p>How to express by using list comprehension? Newbie needs help. Thanks a lot.
code below:</p>
<pre><code>lst = ['chen3gdu',2,['chengdu','suzhou']]
result = []
for elem in lst:
    if type(elem) == list:
        for num in elem:
            result.append(num)
    else:
        result.append(elem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't that suitable for a list comprehension, but you can achieve it by special-casing when you don't have a list, wrapping such elements in a list for iteration:</p>
<pre><code>result = [num for elem in lst for num in ([elem] if not isinstance(elem, list) else elem)]
</code></pre>
<p>which, written out to the same for you were using, plus an extra variable to call out the conditional expression I used, is the equivalent of:</p>
<pre><code>result = []
for elem in lst:
    _nested = [elem] if not isinstance(elem, list) else elem
    for num in _nested:
        result.append(num)
</code></pre>
<p>You might want to encapsulate flattening the irregular structure, in a generator function:</p>
<pre><code>def flatten(irregular_list):
    for elem in irregular_list:
        if isinstance(elem, list):
            yield from elem
        else:
            yield elem
</code></pre>
<p>and then use that in list comprehensions and such, with additional operations. For just flattening, passing the generator function to <code>list()</code> is cleaner, e.g. <code>result = list(flatten(lst))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>the answer from Martin Pieters<a href="https://stackoverflow.com/a/55197018/10474298">(here)</a> is great however i would like to suggest that in the final code sample of that answer which is </p>
<pre><code>def flatten(irregular_list):
    for elem in irregular_list:
        if isinstance(elem, list):
            yield from elem
        else:
            yield elem
</code></pre>
<p>if we tweak this to </p>
<pre><code>def flatten(irregular_list):
    for elem in irregular_list:
        if isinstance(elem, list):
            yield from flatten(elem)
        else:
            yield elem
</code></pre>
<p>then it can flatten to give the result of list containing only non-list elements even if the question list contain multiple list or "lists in a list" element.</p>
<p>PS: i was going to just comment this thing but i found out that i donâ€™t have enough reputation.</p>
</div>
<span class="comment-copy">You could use lst.extend(elem) instead of the nested loop. I would also recommend using isinstance(elem, list) instead of type(elem) == list... Or even use itertools.flatten() for the whole operation.</span>
