<div class="post-text" itemprop="text">
<p>In python the "_" variable stores the result of the last expression...</p>
<p>However, for some reason in my copy of jupyter notebook, this feature suddenly stopped working when using sympy.  Anybody have any ideas what would cause the "_" to stop updating between commands?</p>
<p><a href="https://i.stack.imgur.com/XmPCD.png" rel="nofollow noreferrer"><img alt="picture of problem" src="https://i.stack.imgur.com/XmPCD.png"/></a></p>
<p>So far I'm tried: </p>
<p>*reinstalling "active state python"
*restarting the jupyter server
*restarting kernal and rerun all.</p>
<p>Actually the reason why i'm wondering, because i tried this once below and then suddenly stopped working.. however, the ability to string together more than one command and see their output on each stop using '_' is too handy to stop using it just because it suddenly stops working... i'm wondering how to fix it...</p>
<pre><code>import sympy as sp
sp.init_printing()

N=a*b*100 - (a**2) * (b**2)
D=2*(a-b)

V = N / D
V.diff(a)
_.simplify()
_.expand(numer=True)
_.expand(denom=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I doubt there's anything wrong with your Jupyter Notebook. There's simply a misunderstanding with how the interactive console works.</p>
<p>Let's investigate this funky <code>_</code>.</p>
<pre><code>&gt;&gt;&gt; 1+1
2                #  output printed stored in _
&gt;&gt;&gt; _
2
&gt;&gt;&gt; a = 10+10    #  output not printed and therefore not stored in _
&gt;&gt;&gt; _
2            
&gt;&gt;&gt; a
20               #  output stored in _
&gt;&gt;&gt; _
20
</code></pre>
<p>This leads one to believe that if nothing is printed into the console, then the value isn't stored in <code>_</code>. But now...</p>
<pre><code>&gt;&gt;&gt; print(1)
1
&gt;&gt;&gt; _
20               #  gives previous output
</code></pre>
<p>This then suggests that if nothing is <em>returned</em>, then the value isn't stored in <code>_</code>. (Remember, the <code>print</code> function returns <code>None</code>.)</p>
<p>So what's going on in your code?</p>
<pre><code>N=a*b*100 - (a**2) * (b**2)    #  assignment, no result returned =&gt; nothing stored in _    
D=2*(a-b)                      #    ditto

V = N / D                      #    ditto
V.diff(a)                      #  returns an instance of &lt;class sympy.core.add.Add&gt; =&gt; stored in _    
_.simplify()                   #  returns an instance of &lt;class sympy.core.mul.Mul&gt; =&gt; stored in _    
_.expand(numer=True)           #    ditto
_.expand(denom=True)           #    ditto
</code></pre>
<p>I think you can see what's up with your first snippet now...</p>
<pre><code>N=a*b*100 - (a**2) * (b**2)    #  blunder! nothing is returned =&gt; nothing stored in _    
display(_)                     #    oops
D=2*(a+b)                      #  blunder!
display(_)                     #    oops
V = N / D                      #  blunder!
display(_)                     #    oops
</code></pre>
<p>Instead, make sure that a value is returned.</p>
<pre><code>a*b*100 - (a**2) * (b**2)      #  result returned =&gt; value stored in _
display(_)                     #  ok
N = _                          #  ok, retained N
</code></pre>
<p>The foolproof way to <em>fix</em> this would be to do use <code>N</code>, <code>D</code>, and <code>V</code> in lieu of <code>_</code>:</p>
<pre><code>N=a*b*100 - (a**2) * (b**2)
display(N)                     #  ok
D=2*(a+b)
display(D)                     #  ok
V = N / D
display(V)                     #  ok
</code></pre>
<p>Time to stop being lax and time to start using those variable names. ᕕ(◔ω◔)ᕗ</p>
</div>
<div class="post-text" itemprop="text">
<p>If you had ever written to (assigned to) "_", you would be effectively creating one more variable with the same name, which thereafter "hides" or takes precedence over the pre-defined variable "_". And of course, the "_" that you define doesn't get the magical behavior of storing the last computed expression value, as happens with the predefined "_".</p>
<p>If this is what had happened, this might get corrected by performing one or both of the following:</p>
<ol>
<li>del _ # Deletes the "_" that you had defined.</li>
<li>Re-starting the kernel in your notebook.</li>
</ol>
</div>
<span class="comment-copy">"Stopped working" is far too vague to diagnose.</span>
<span class="comment-copy">I don't really understand why you would try use <code>_</code> that way at all anyway, but <code>sp.init_printing()</code> has a suspiciously apt name here; did you look at what that does?</span>
<span class="comment-copy">I don't use Jupyter Notebooks, but on REPL, if nothing was printed from the previous statement, then nothing is stored in <code>_</code>. Assignments don't print anything... On another note, what's wrong with doing <code>display(N)</code>, <code>display(D)</code>, and <code>display(V)</code>?</span>
<span class="comment-copy">ok... I get it... I'm misunderstanding how python "_" variable works... it only stores it in this variable if you haven't already save it to a variable....  the act of assigning it to a variable redirects the object to the variable and doesn't display it.</span>
<span class="comment-copy">@roganjosh: When I type an underscore between double-quotes, and submitted to SO, the underscore mysteriously vanishes, leaving just the double-quotes. I realized that after the submission. Tried escaping the underscore with a backslash - thankfully that worked.</span>
<span class="comment-copy">Surrounding text with underscores on either side will italicize it. I guess that's what's going on and very unfortunate for writing this answer :P</span>
