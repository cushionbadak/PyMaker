<div class="post-text" itemprop="text">
<p>I'm a JS dev trying to learn a bit of Python while working on a Raspberry-Pi3 project that reads data from a Bluetooth temperature sensor.</p>
<p>I need to write the data to my file.txt every 10 seconds, how could I do that please? I found similar topic here (<a href="https://stackoverflow.com/questions/3393612/run-certain-code-every-n-seconds">Run certain code every n seconds</a> ), but I don't know how to make it work in my current scenario.   </p>
<pre><code>#!/usr/bin/env python3

import argparse
import re
import logging
import sys
import time

from btlewrap import available_backends, BluepyBackend, GatttoolBackend, PygattBackend
from mitemp_bt.mitemp_bt_poller import MiTempBtPoller, \
    MI_TEMPERATURE, MI_HUMIDITY, MI_BATTERY

def valid_mitemp_mac(mac, pat=re.compile(r"4C:65:A8:[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}")):
    """Check for valid mac adresses."""
    if not pat.match(mac.upper()):
        raise argparse.ArgumentTypeError('The MAC address "{}" seems to be in the wrong format'.format(mac))
    return mac

def poll(args):
    """Poll data from the sensor."""
    backend = _get_backend(args)
    poller = MiTempBtPoller(args.mac, backend)
    line1 = "Temperature: {}".format(poller.parameter_value(MI_TEMPERATURE))
    line2 = "Humidity: {}".format(poller.parameter_value(MI_HUMIDITY))
    print("Getting data from Mi Temperature and Humidity Sensor")
    print("FW: {}".format(poller.firmware_version()))
    print("Name: {}".format(poller.name()))
    print("Battery: {}".format(poller.parameter_value(MI_BATTERY)))
    print(line1)
    print(line2)
    f = open('file.txt', 'w')
    f.write("%s \n %s \n" % (line1, line2))
    f.close()

def _get_backend(args):
    """Extract the backend class from the command line arguments."""
    if args.backend == 'gatttool':
        backend = GatttoolBackend
    elif args.backend == 'bluepy':
        backend = BluepyBackend
    elif args.backend == 'pygatt':
        backend = PygattBackend
    else:
        raise Exception('unknown backend: {}'.format(args.backend))
    return backend


def list_backends(_):
    """List all available backends."""
    backends = [b.__name__ for b in available_backends()]
    print('\n'.join(backends))

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--backend', choices=['gatttool', 'bluepy', 'pygatt'], default='gatttool')
    parser.add_argument('-v', '--verbose', action='store_const', const=True)
    subparsers = parser.add_subparsers(help='sub-command help', )

    parser_poll = subparsers.add_parser('poll', help='poll data from a sensor')
    parser_poll.add_argument('mac', type=valid_mitemp_mac)
    parser_poll.set_defaults(func=poll)

    parser_scan = subparsers.add_parser('backends', help='list the available backends')
    parser_scan.set_defaults(func=list_backends)

    args = parser.parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)

    if not hasattr(args, "func"):
        parser.print_help()
        sys.exit(0)

    args.func(args)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>time</code> module to pause the program for 10 seconds on each iteration;</p>
<pre><code>from time import sleep

def func(n):
    print(n+1)

for i in range(5):
    func(i)
    sleep(10)

&gt;1
&gt;2
&gt;3
&gt;4
&gt;5

# (every 10 seconds)
</code></pre>
<p>However this will block the rest of the program running, although a simple multi-threading script to call the writing function would suffice.</p>
<p>And in relation to the code you are using, insert the <code>sleep</code> call within the <code>poll</code> function and wrap what you have there. If you want to loop the program 10 times then;</p>
<pre><code>def poll(args):
    """Poll data from the sensor."""
    for _ in range(10):
        # code things
        f = open('file.txt', 'a') # &lt;&lt; Use append here or you will keep overwriting file contents
        f.write('hello')
        f.close()
        sleep(10)
</code></pre>
<p>Or if you want it to run forever until you <code>KeyboardInterrupt</code> or exit somehow:</p>
<pre><code>def poll(args):
    """Poll data from the sensor."""
    while True:
        # code things
        f = open('file.txt', 'a') # &lt;&lt; Use append here or you will keep overwriting file contents
        f.write('hello')
        f.close()
        sleep(10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>you need some kind of loop that polls your sensor - I do not see one glancing over your code. You got while and for loops in JS as well - look them up in <a href="http://docs.python.org/3/tutorial" rel="nofollow noreferrer">http://docs.python.org/3/tutorial</a> if you are unsure about the syntax. </p></li>
<li><p>store the time you wrote to a variable , sleep a bit poll the next value, check if 10s passed, write if, else not. (or simply sleep 10s between polls if you do not want intermediate values printed  </p></li>
</ol>
<p>Readup about loops:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer"><em>for</em> statement</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">looping techniques</a></li>
</ul>
<hr/>
<pre><code>import time

def poll():
    return time.time(), 42

last_write = None    # when did we record to file last?

# loop for as long as you want - while True would loop endlessly
for _ in range(7):
    t,c = poll()     # call poll() to get time and temperature from mocked data reader

    # check if enough time has passed
    if last_write is None or (t-last_write) &gt; 2:  # check if new reading needed
        with open("t.txt","a") as f:
            f.write(f"{t}    {c}\n")
        last_write=t
        print("in file ", t,c)            
    else:
        print("just output ", t,c)
    time.sleep(0.7)                               # sleep some
</code></pre>
<p>Output:</p>
<pre><code>in file  1552978725.5224085 42                # ...25.5
just output  1552978726.2232893 42            # ...26.2  - not 2s passed 
just output  1552978726.9241226 42            # ...26.9  - not 2s passed
in file  1552978727.6249442 42                # ...27.6  - 2.1s passed 
just output  1552978728.3259027 42            # ...28.3  - not 2s passed
just output  1552978729.0267787 42            # ...29.0  - not 2s passed 
in file  1552978729.7275977 42                # ...29.7  - 2.1s passed
</code></pre>
<p>More remarks:</p>
<ul>
<li><p>use <code>with open(filename,mode) as f:</code> and scope the file opeations below it - it will autoclose your file after scope and handle exceptions by closing the filehandle as well. </p></li>
<li><p>Using mode "w" will truncate the file before writing to it - you might want to use append instead: <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">reading and writing files</a></p></li>
</ul>
</div>
<span class="comment-copy">Where is your specific problem?</span>
<span class="comment-copy">@PatrickArtner the poll function in where i'm writing the data to the file, but it's only doing it once and then program ends. I would like to keep it running every 10 seconds.</span>
<span class="comment-copy">I added this before/after the poll function, and it seems to ignore the rest of my code. It's only doing print1,2,3.. How can i use it to also make use of the <code>poll</code> function?</span>
<span class="comment-copy">@PatrickArtner yes, but for the moment i'm fine with that. I will just use that file and pick-up from there using Node (which i know better for now). I couldn't find any node package that would read the sensor, so i'm forced to use python.</span>
<span class="comment-copy">I stripped the code out and just leaving the 'example'</span>
<span class="comment-copy">I will use my node server to read whatever is in that file at a particular time and that will be my data.</span>
<span class="comment-copy">Matt B. i will use with you solution for now, since it's easier to use and closer to my level. Thanks!</span>
