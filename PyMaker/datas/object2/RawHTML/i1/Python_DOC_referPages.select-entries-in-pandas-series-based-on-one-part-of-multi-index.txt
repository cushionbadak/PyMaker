<div class="post-text" itemprop="text">
<p>I have a Pandas series constructed like this</p>
<pre><code>import itertools
import pandas as pd

combos = list(itertools.permutations(['BB', 'BW', 'WW'], 2))

combo_values = pd.Series([2,4,0,2,0,0], combos)

</code></pre>
<p>So <code>combo_values</code> looks like this</p>
<pre><code>(BB, BW)    2
(BB, WW)    4
(BW, BB)    0
(BW, WW)    2
(WW, BB)    0
(WW, BW)    0
dtype: int64
</code></pre>
<p>I know you can extract one entry like this</p>
<pre><code>combo_values['BB', 'BW']
</code></pre>
<p>So I was thinking to extract the first two entries I would like to do something like this:</p>
<pre><code>combo_values['BB',]

#or this

combo_values['BB',:]
</code></pre>
<p>Neither works, and the first option generates the following errors (I am chopping out the traces)</p>
<pre><code>TypeError: 'tuple' object cannot be interpreted as an integer

KeyError: ('BB',)
</code></pre>
<p>I know that this alternative solution works:</p>
<pre><code>combo_df = pd.DataFrame(combos, columns = ['A', 'B'])
combo_df['combo_values'] = [2,4,0,2,0,0]
combo_df.loc[combo_df['A'] == 'BB', :]
</code></pre>
<p>But is there a way to do this with my <code>combo_values</code> series?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to do this is to use a multi-index, rather than a tuple-index:</p>
<pre><code>import itertools
import pandas as pd

combos = list(itertools.permutations(['BB', 'BW', 'WW'], 2))

multi = pd.MultiIndex.from_tuples(combos)

combo_values = pd.Series([2,4,0,2,0,0], multi)
</code></pre>
<p><code>combo_values</code> now looks like this:</p>
<pre><code>BB  BW    0.25
    WW    0.50
BW  BB    0.00
    WW    0.25
WW  BB    0.00
    BW    0.00
dtype: float64
</code></pre>
<p>And it can be filtered like this:</p>
<pre><code>combo_values['BB',]
</code></pre>
<p>To yield</p>
<pre><code>BW    0.25
WW    0.50
</code></pre>
</div>
<span class="comment-copy">can you consider to replace the index of combo_values with a <code>MultiIndex</code>? If it is possible, then slicing kind of the way you tried should work</span>
<span class="comment-copy">This worked perfectly, I just wasn't familiar with <code>pd.MultiIndex</code>. Thanks!</span>
<span class="comment-copy">Don't forget to accept your answer to close the question :)</span>
<span class="comment-copy">I can't until March 20th 2019, presumably to stop people from farming their own questions?</span>
<span class="comment-copy">I did not know that, you probably right then :)</span>
