<div class="post-text" itemprop="text">
<p>I am trying to be able to return a boolean when part of a string is present from a list of strings, so for example here a data set:</p>
<pre><code>"issues": [
    {
      "id": "1",
      "fields": {
        "labels": [
          "customer:asdf",
          "hello"
        ]
      }
    },
    {
      "id": "2",
      "fields": {
        "labels": [
         "icanthearyou",
         "hellotoyou"
        ]
      }
    },
     "id": "3",
     "fields": {
       "labels": [
         "customer:num2",
         "hellotoyou"
        ]
      }
    }
]
</code></pre>
<p>i am currently grabbing data from this set like so:</p>
<pre><code>def grab_data(self, data):
    created_values = list((item['id'],
                           # key
                           True if "customer:" is in item['fields']['labels'] else false 
                           #fromcustomer boolean
                          ) for item in data['issues'])
</code></pre>
<p>But obviously the above line <code>True if "customer:" is in item['fields']['labels'] else false</code> only works if one of the labels is only "customer:"</p>
<p>So to be clear how would I grab data <strong>in this format</strong> i have above <code>list((item['labels']) for item in data['issues']</code> to see that one of the <code>labels</code> has this string "customer:" within any entry and return true... </p>
<p>id 1 and 3 should return True and id 2 return False.</p>
<p>So expected value should be [True, False, True]</p>
</div>
<div class="post-text" itemprop="text">
<p>I changed your original list a little bit to make it a valid Python list variable, but one way to solve this is to <code>join</code> all of your labels together into one string, then search that string for "customer:".</p>
<pre><code>def filter_issues(issues):
    return [ "customer:" in ' '.join(d["fields"]["labels"]) for d in issues]


issues = [{"id": "1", "fields": {"labels": ["customer:asdf", "hello"]}},
          {"id": "2", "fields": {"labels": ["icanthearyou", "hellotoyou"]}},
          {"id": "3", "fields": {"labels": ["customer:num2","hellotoyou"]}} ]

print(filter_issues(issues))
# Prints: [True, False, True]
</code></pre>
<p>The reason I used a space in the join instead of just an empty string, is because otherwise something like <code>["abccust", "omer:foo"]</code> would pass. </p>
</div>
<span class="comment-copy">Show expected value</span>
<span class="comment-copy">Note that code of the form <code>True if a in b else False</code> is really just a long way to write <code>a in b</code>. That's already True or False.</span>
