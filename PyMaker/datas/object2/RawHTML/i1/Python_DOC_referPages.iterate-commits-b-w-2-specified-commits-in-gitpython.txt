<div class="post-text" itemprop="text">
<pre><code>import git
repo = git.Repo(repo_dir)
ref_name = 'master'
for commit in repo.iter_commits(rev=ref_name):
     &lt;some code here&gt;
</code></pre>
<p>This code iterates through all the commits. I want to iterate b/w 2 commits.
Just like <code>git log commit1...commit2</code></p>
<p>How can I do the same using GitPython's iter_commits() method.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you to use <a href="https://github.com/ishepard/pydriller" rel="nofollow noreferrer">PyDriller</a> (a wrapper around GitPython, to make things easier). What you asked can be done like this:</p>
<pre><code>for commit in RepositoryMining("path_to_repo", from_commit="first", to_commit="second").traverse_commits():
    # your code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, make a function to run the <code>git</code> command.</p>
<pre><code>from git import *
from subprocess import Popen, PIPE

def execute_gitcmd(cmd, repo):
    pipe = subprocess.Popen(cmd, shell=True, cwd=repo, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (out, error) = pipe.communicate()
    return out, error
    pipe.wait()
</code></pre>
<p>Then write any <code>git</code> command as you use on terminal, for example:</p>
<pre><code>gitcmd = "git log -n1 --oneline"
</code></pre>
<p>Finally, call your function:</p>
<pre><code>log = (execute_gitcmd(gitcmd, your_repository))
</code></pre>
<p>Hope this can help.</p>
</div>
<span class="comment-copy">But do you know the code to execute the <code>git</code> command on terminal? If yes, you can create a function using <code>subprocess</code>. Then you can call the function to run the <code>git</code> command.</span>
<span class="comment-copy">Yes, I can do that. But I don't want go that way. I want to use this GitPython Lib</span>
<span class="comment-copy"><a href="https://gitpython.readthedocs.io/en/stable/reference.html#git.objects.commit.Commit.iter_items" rel="nofollow noreferrer">gitpython.readthedocs.io/en/stable/…</a> .  From <code>Commit.iter_items()</code> accepts a revision specifier, for which I believe Revision Range is also part of it.  Just pass <code>'commit1...commit2'</code>  should do the work.</span>
<span class="comment-copy">If your question is exclusively about "how do I do thing X in gitpython", the gitpython tag is appropriate, but none of the other tags are appropriate as you'll get answers like the one from @Yusufsn. Note that <a href="https://stackoverflow.com/questions/tagged/commit">commit</a> is about database transactions, not about Git commits.</span>
<span class="comment-copy">1. The question was about GitPython. 2. The function has a major bug — <code>return</code> before <code>pipe.wait()</code>.</span>
