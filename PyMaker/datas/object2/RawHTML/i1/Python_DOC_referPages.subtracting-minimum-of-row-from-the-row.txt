<div class="post-text" itemprop="text">
<p>I know that </p>
<p>a - a.min(axis=0)</p>
<p>will subtract the minimum of each column from every element in the column. I want to subtract the minimum in each row from every element in the row. I know that </p>
<p>a.min(axis=1) </p>
<p>specifies the minimum within a row, but how do I tell the subtraction to go by rows instead of columns? (How do I specify the axis of the subtraction?)</p>
<p>edit: For my question, a is a 2d array in NumPy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>a</code> is a numpy array, you can use this:</p>
<pre><code>new_a = a - np.min(a, axis=1)[:,None]
</code></pre>
<p><strong>Try it out:</strong></p>
<pre><code>import numpy as np

a = np.arange(24).reshape((4,6))
print (a)
new_a = a - np.min(a, axis=1)[:,None]
print (new_a)
</code></pre>
<p><strong>Result:</strong></p>
<pre><code>[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]
[[0 1 2 3 4 5]
 [0 1 2 3 4 5]
 [0 1 2 3 4 5]
 [0 1 2 3 4 5]]
</code></pre>
<p>Note that <code>np.min(a, axis=1)</code> returns a 1d array of row-wise minimum values.</p>
<p>We than add an extra dimension to it using <code>[:,None]</code>. It then looks like this 2d array:</p>
<pre><code>array([[ 0],
       [ 6],
       [12],
       [18]])
</code></pre>
<p>When this 2d array participates in the subtraction, it gets broadcasted into a shape of <code>(4,6)</code>, which looks like this:</p>
<pre><code>array([[ 0,  0,  0,  0,  0,  0],
       [ 6,  6,  6,  6,  6,  6],
       [12, 12, 12, 12, 12, 12],
       [18, 18, 18, 18, 18, 18]])
</code></pre>
<p>Now, element-wise subtraction happens between the two <code>(4,6)</code> arrays.</p>
</div>
<div class="post-text" itemprop="text">
<p>Specify <code>keepdims=True</code> to preserve a length-1 dimension in place of the dimension that <code>min</code> collapses, allowing broadcasting to work out naturally:</p>
<pre><code>a - a.min(axis=1, keepdims=True)
</code></pre>
<p>This is especially convenient when <code>axis</code> is determined at runtime, but still probably clearer than manually reintroducing the squashed dimension even when the <code>1</code> value is fixed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use only <code>pandas</code> you can just apply a lambda to every column using <code>min(row)</code></p>
<pre><code>new_df = pd.DataFrame()
for i, col in enumerate(df.columns):
    new_df[col] = df.apply(lambda row: row[i] - min(row))
</code></pre>
</div>
<span class="comment-copy">What type of object is <code>a</code>?</span>
<span class="comment-copy">2d numpy array.</span>
<span class="comment-copy">ValueError: the 'keepdims' parameter is not supported in the pandas implementation of min()</span>
<span class="comment-copy">I getthe following ValueError</span>
<span class="comment-copy">@AlessandroSolbiati: If you've got a Pandas dataframe, then yeah, you'd get an error like that, but this kind of operation doesn't make much sense on a Pandas dataframe. My answer was written for NumPy arrays. The questioner really should have specified what the heck <code>a</code> is.</span>
