<div class="post-text" itemprop="text">
<p>Recently, I gave Neural Compute Stick 2 from my professor,</p>
<p>After a lot of trial and error, I have configured the environment.</p>
<p>I got all the information from Intel official site.</p>
<pre><code>sudo python3 mo_tf.py 
\ --input_model /home/leehanbeen/PycharmProjects/TypeClassifier/inference_graph_type.pb 
\ --input_shape "[1, 64, 128, 3]" --input "input"
</code></pre>
<p>I have successfully converted the pb file to the IR (.xml, .bin) file via model_optimizer and wanted to apply it to the raspberry pi.</p>
<pre class="lang-py prettyprint-override"><code>import tensorflow as tf
import cv2
import numpy as np
BIN_PATH = '/home/pi/Downloads/inference_graph_type.bin'
XML_PATH = '/home/pi/Downloads/inference_graph_type.xml'
IMAGE_PATH = '/home/pi/Downloads/plate(110).jpg_2.jpg' #naming miss.. :(
net = cv2.dnn.readNet(XML_PATH, BIN_PATH)
net.setPreferableTarget(cv2.dnn.DNN_TARGET_MYRIAD)
frame = cv2.imread(IMAGE_PATH)
frame = cv2.resize(frame, (128, 64))
blob = cv2.dnn.blobFromImage(frame, size=(128, 64), ddepth=cv2.CV_8U)
net.setInput(blob)
out = net.forward()
out = out.reshape(-1)
print(out)
print(np.max(out))
print(np.argmax(out))
</code></pre>
<p>This source works very well, but It's too slow.
When I give (128, 64, 3) image as input to model, inference time is 4.7 seconds</p>
<pre><code>[0.0128479 0.2097168 0.76416016 0.00606918 0.00246811 0.00198746 0.00129604 0.00117588]
0.76416016
2
</code></pre>
<p>When I gave a smaller image(40, 40, 1) than this image, the time was rather infinitely slow.</p>
<p>I followed all the procedures as well as on the official Intel home page. Why is the inference time so slow? It's just a very simple classification model using CNN</p>
</div>
<div class="post-text" itemprop="text">
<p>Resolved.
Instead of using IE as a backend in OpenCV,
Using IE directly, the inference time was shortened from 4.7 seconds to 0.01 seconds.
But there is still a problem. The inference for color images (128, 64) is normal, while the grayscale image is still ending at the end of infinite time.</p>
<p>I have written the relevant source code on my <a href="https://github.com/DeepLearningHB/NCS2Guide/blob/master/README.md" rel="nofollow noreferrer">GITHUB</a></p>
<p>It is in Korean, but you can see only the source at the bottom.</p>
</div>
