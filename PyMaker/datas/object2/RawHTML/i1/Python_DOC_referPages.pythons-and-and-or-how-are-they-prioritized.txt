<div class="post-text" itemprop="text">
<p>Does Python support short-circuiting in boolean expressions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yep, both <code>and</code> and <code>or</code> operators short-circuit -- see <a href="http://docs.python.org/library/stdtypes.html?highlight=short%20circuit#boolean-operations-and-or-not" rel="noreferrer">the docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Short-circuiting behavior in operator <code>and</code>, <code>or</code>:</h3>
<p>Let's first define a useful function to determine if something is executed or not. A simple function that accepts an argument, prints a message and returns the input, unchanged. </p>
<pre><code>&gt;&gt;&gt; def fun(i):
...     print "executed"
...     return i
... 
</code></pre>
<p>One can observe the <a href="https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="noreferrer">Python's short-circuiting behavior</a> of <code>and</code>, <code>or</code> operators in the following example:</p>
<pre><code>&gt;&gt;&gt; fun(1)
executed
1
&gt;&gt;&gt; 1 or fun(1)    # due to short-circuiting  "executed" not printed
1
&gt;&gt;&gt; 1 and fun(1)   # fun(1) called and "executed" printed 
executed
1
&gt;&gt;&gt; 0 and fun(1)   # due to short-circuiting  "executed" not printed 
0
</code></pre>
<p><strong>Note:</strong> The following values are considered by the interpreter to mean false:</p>
<pre><code>        False    None    0    ""    ()    []     {}
</code></pre>
<h3>Short-circuiting behavior in function: <code>any()</code>, <code>all()</code>:</h3>
<p>Python's <a href="http://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any()</code></a> and <a href="http://docs.python.org/2/library/functions.html#all" rel="noreferrer"><code>all()</code></a> functions also support short-circuiting. As shown in the docs; they evaluate each element of a sequence in-order, until finding a result that allows an early exit in the evaluation. Consider examples below to understand both. </p>
<p>The function <a href="http://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any()</code></a> checks if any element is True. It stops executing as soon as a True is encountered and returns True. </p>
<pre><code>&gt;&gt;&gt; any(fun(i) for i in [1, 2, 3, 4])   # bool(1) = True
executed
True
&gt;&gt;&gt; any(fun(i) for i in [0, 2, 3, 4])   
executed                               # bool(0) = False
executed                               # bool(2) = True
True
&gt;&gt;&gt; any(fun(i) for i in [0, 0, 3, 4])
executed
executed
executed
True
</code></pre>
<p>The function <a href="http://docs.python.org/2/library/functions.html#all" rel="noreferrer"><code>all()</code></a> checks all elements are True and stops executing as soon as a False is encountered:</p>
<pre><code>&gt;&gt;&gt; all(fun(i) for i in [0, 0, 3, 4])
executed
False
&gt;&gt;&gt; all(fun(i) for i in [1, 0, 3, 4])
executed
executed
False
</code></pre>
<h3>Short-circuiting behavior in Chained Comparison:</h3>
<p>Additionally, in Python </p>
<blockquote>
<p><a href="https://docs.python.org/2/library/stdtypes.html#comparisons" rel="noreferrer">Comparisons can be chained arbitrarily</a>; for example, <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y and y &lt;= z</code>, except that <code>y</code> is evaluated only once (but in both cases <code>z</code> is not evaluated at all when <code>x &lt; y</code> is found to be false). </p>
</blockquote>
<pre><code>&gt;&gt;&gt; 5 &gt; 6 &gt; fun(3)    # same as:  5 &gt; 6 and 6 &gt; fun(3)
False                 # 5 &gt; 6 is False so fun() not called and "executed" NOT printed
&gt;&gt;&gt; 5 &lt; 6 &gt; fun(3)    # 5 &lt; 6 is True 
executed              # fun(3) called and "executed" printed
True
&gt;&gt;&gt; 4 &lt;= 6 &gt; fun(7)   # 4 &lt;= 6 is True  
executed              # fun(3) called and "executed" printed
False
&gt;&gt;&gt; 5 &lt; fun(6) &lt; 3    # only prints "executed" once
executed
False
&gt;&gt;&gt; 5 &lt; fun(6) and fun(6) &lt; 3 # prints "executed" twice, because the second part executes it again
executed
executed
False
</code></pre>
<p><strong>Edit:</strong><br/>
One more interesting point to note <strong>:-</strong> Logical <a href="https://docs.python.org/2/library/stdtypes.html#boolean-operations-and-or-not" rel="noreferrer"><code>and</code>, <code>or</code></a> operators in Python returns an operand's <strong>value</strong> instead of a Boolean (<code>True</code> or <code>False</code>). For example:</p>
<blockquote>
<p>Operation <code>x and y</code> gives the result <code>if x is false, then x, else y</code></p>
</blockquote>
<p><sup>Unlike in other languages e.g. <code>&amp;&amp;</code>, <code>||</code> operators in C that return either 0 or 1.</sup></p>
<p>Examples: </p>
<pre><code>&gt;&gt;&gt; 3 and 5    # Second operand evaluated and returned 
5                   
&gt;&gt;&gt; 3  and ()
()
&gt;&gt;&gt; () and 5   # Second operand NOT evaluated as first operand () is  false
()             # so first operand returned 
</code></pre>
<p>Similarly <code>or</code> operator return left most value for which <code>bool(value)</code> == <code>True</code> else right most false value (according to short-circuiting behavior), examples:  </p>
<pre><code>&gt;&gt;&gt; 2 or 5    # left most operand bool(2) == True
2    
&gt;&gt;&gt; 0 or 5    # bool(0) == False and bool(5) == True
5
&gt;&gt;&gt; 0 or ()
()
</code></pre>
<p>So, how is this useful? One example use given in <a href="http://books.google.co.in/books?id=KmKoNJ2OoOYC&amp;pg=PA114&amp;lpg=PA114&amp;dq=zip%28range%285%29,%20xrange%28100000000%29%29&amp;source=bl&amp;ots=-BxWZinKHq&amp;sig=O9G4mskHmYDljCCQv8v7alVUy_M&amp;hl=en&amp;sa=X&amp;ei=0mMPUoa9LsXJrAe7p4DABA&amp;ved=0CD0Q6AEwAw#v=onepage&amp;q=zip%28range%285%29,%20xrange%28100000000%29%29&amp;f=false" rel="noreferrer">Practical Python</a> By Magnus Lie Hetland:<br/>
Let’s say a user is supposed to enter his or her name, but may opt to enter nothing, in which case you want to use the default value <code>'&lt;unknown&gt;'</code>. You could use an if statement, but you could also state things very succinctly:</p>
<pre><code>In [171]: name = raw_input('Enter Name: ') or '&lt;Unkown&gt;'
Enter Name: 

In [172]: name
Out[172]: '&lt;Unkown&gt;'
</code></pre>
<p>In other words, if the return value from raw_input is true (not an empty string), it is assigned to name (nothing changes); otherwise, the default <code>'&lt;unknown&gt;'</code> is assigned to <code>name</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Try the following in your python interpreter:</p>
<p>and</p>
<pre><code>&gt;&gt;&gt;False and 3/0
False
&gt;&gt;&gt;True and 3/0
ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt;True or 3/0
True
&gt;&gt;&gt;False or 3/0
ZeroDivisionError: integer division or modulo by zero
</code></pre>
</div>
<span class="comment-copy">Closely related: <a href="https://stackoverflow.com/questions/47007680/strange-use-of-and-or-operator">Strange use of “and” / “or” operator</a></span>
