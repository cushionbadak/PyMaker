<div class="post-text" itemprop="text">
<p>What I mean to ask is:</p>
<ul>
<li>TLDR:  <strong>how do I have my package's help include all underlying docstrings?</strong></li>
<li>I have created a package. That package has all the proper <code>__init__.py</code> files and all the proper docstrings (module, function, class, and method level docstrings). However, when I perform <code>help(mypackage)</code>, the only help provided is the help provided at that top level <code>__init__.py</code> module.</li>
</ul>
<p>Often <em>package-level</em> help does not include all of the underlying docstrings, but <em>sometimes it does</em>.</p>
<p>I want to make sure that I am embedding all of the underlying docstrings.</p>
<hr/>
<p>For instance, within the <a href="https://github.com/numpy/numpy/blob/master/numpy/__init__.py" rel="noreferrer"><code>numpy</code> package</a> all underlying docstrings are available in the help at the command prompt, even though they are not provided at the top-level <code>__init__.py</code>.</p>
<p>I.e., I can type</p>
<pre><code>&gt;&gt;&gt; help(numpy)
</code></pre>
<p>and see all of the documentation, including documentation defined outside of the dunder init module.</p>
<p>However, many other packages, including popular ones like the <a href="https://github.com/pandas-dev/pandas/blob/master/pandas/__init__.py" rel="noreferrer"><code>pandas</code> package</a> do not capture all of the underlying documentation.</p>
<p>I.e., typing</p>
<pre><code>&gt;&gt;&gt; help(pandas)
</code></pre>
<p>only provides me the documentation defined in <code>__init__.py</code>.</p>
<p><strong>I want to create package-level documentation mirroring how <code>numpy</code> does it.</strong></p>
<hr/>
<p>I have tried to look through <code>numpy</code> to see how it is performing this magic, with no luck. I have performed Google searches, but it seems there is no way to phrase this question and get any decent links back.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy</code> shows you documentation on classes and functions defined outside <code>__init__.py</code> module because of adding their names to <code>__all__</code> variable in <code>__init__.py</code>. Try to comment lines 169-173 (don't forget to uncomment!):</p>
<pre><code>#__all__.extend(['__version__', 'show_config'])
#__all__.extend(core.__all__)
#__all__.extend(_mat.__all__)
#__all__.extend(lib.__all__)
#__all__.extend(['linalg', 'fft', 'random', 'ctypeslib', 'ma'])
</code></pre>
<p>After doing this output of <code>help(numpy)</code> will be very limited.</p>
<p>Also let's reproduce this behaviour. Starting from <code>'/some/path'</code>, create folder <code>folder</code>, file named <code>file.py</code> inside it with the following content:</p>
<pre><code>class Class:
    """Class docstring"""
</code></pre>
<p>And <code>__init__.py</code>:</p>
<pre><code>from .file import *
</code></pre>
<p>Now let's see the help:</p>
<pre><code>/some/path$ python3.5
&gt;&gt;&gt; import folder
&gt;&gt;&gt; help(folder)

Help on package folder:

NAME
    folder

PACKAGE CONTENTS
    file

FILE
    /some/path/folder/__init__.py
</code></pre>
<p>And now add this line to <code>__init__.py</code>:</p>
<pre><code>__all__ = ['Class']
</code></pre>
<p>After reimporting <code>folder</code> the command <code>help(folder)</code> will contain information about <code>class Class</code> which includes your docstring:</p>
<pre><code>Help on package folder:

NAME
    folder

PACKAGE CONTENTS
    file

CLASSES
    builtins.object
        folder.file.Class

    class Class(builtins.object)
     |  Class docstring
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

DATA
    __all__ = ['Class']

FILE
    /some/path/folder/__init__.py
</code></pre>
</div>
