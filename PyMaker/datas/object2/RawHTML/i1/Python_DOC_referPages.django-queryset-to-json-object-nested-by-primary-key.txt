<div class="post-text" itemprop="text">
<p>I'm trying to parse a queryset into a JSON object, so that each key is the primary key of the model, and each value is a JSON object containing all other fields.</p>
<pre><code>myjson = {
           apple:  { color: "r", calories: 10},
           banana: { color: "w", calories: 50}
​         }
</code></pre>
<p>Here is the model and Django view collecting the data (based on this <a href="https://simpleisbetterthancomplex.com/tutorial/2016/07/27/how-to-return-json-encoded-response.html" rel="nofollow noreferrer">blog post</a>):</p>
<pre><code>class Fruit(models.Model):
    fruit_id = models.CharField(primary_key=True)
    color = models.CharField(max_length=50)
    calories = models.IntegerField()

def get_FruitsTableDjango(request):
    fruits_table = Fruit.objects.all().values()
    fruits_table_list = list(fruits_table )  # important: convert the QuerySet to a list object
    return JsonResponse(fruits_table_list , safe=False)
</code></pre>
<p>But on the client's side (via AJAX), this returns an array of objects:</p>
<pre><code>mydata = [
           0: { fruit_id: "apple", color: "r", calories: 10},
           1: { fruit_id: "banana", color: "w", calories: 50}
]
</code></pre>
<p>I found also <a href="https://stackoverflow.com/questions/42011597/restructuring-json-data">here</a> how I can rework this array as expected :</p>
<pre><code>//Restructure JSON by fruit_id name
fruits= {},
mydata.forEach(function (a) {
    var temp = {};
    Object.keys(a).forEach(function (k) {
        if (k === 'fruit_id') {
            fruits[a[k]] = temp; //gets fruit_id
            return;
        }
        temp[k] = a[k]; //fill the temp variable with elements
    });
});
mydata=fruits; //overwrite initial array with nicely-rearranged-by-fruitId object
</code></pre>
<p>I have basically two questions: </p>
<ol>
<li>Is there a more direct way to obtain the desired JSON (nested by primary keys)?</li>
<li>If not, where is objectively the best place to perform the object-parsing logic: on the client's side in Javascript (like above), or on the server side, e.g. in the Django view?</li>
</ol>
<p>​​</p>
</div>
<div class="post-text" itemprop="text">
<p>In DRF,</p>
<p>Let's say I have model.py as below</p>
<pre><code>from django.db import models


class OrganisationalUnitGrouper(models.Model):
    name = models.CharField(max_length=255)

    def __str__(self):
        return self.name

    @property
    def unit(self):
        return self.organisationalunit_set.all()


class OrganisationalUnit(models.Model):
    unit_id = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    display = models.CharField(max_length=255)
    description = models.CharField(max_length=255)
    path = models.CharField(max_length=255)
    ou_group = models.ForeignKey(OrganisationalUnitGrouper, on_delete=models.PROTECT)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name_plural = "OU Unit"
</code></pre>
<p>Serializer you can define like </p>
<pre><code>from rest_framework import serializers

from .models import OrganisationalUnitGrouper, OrganisationalUnit


class OUSerializer(serializers.ModelSerializer):
    # id = serializers.IntegerField(required=False)

    class Meta:
        model = OrganisationalUnit
        fields = ("unit_id", "name", "display", "description", "path")


class OUGroupSerializer(serializers.ModelSerializer):
    unit = OUSerializer(many=True)

    class Meta:
        model = OrganisationalUnitGrouper
        fields = ("name", "unit")
</code></pre>
<p>And viewset could be</p>
<pre><code>from rest_framework import viewsets

from .serializers import OUSerializer, OUGroupSerializer
from .models import OrganisationalUnitGrouper, OrganisationalUnit


class OUGroupViewSet(viewsets.ModelViewSet):

    queryset = OrganisationalUnitGrouper.objects.all()
    serializer_class = OUGroupSerializer


class OUViewSet(viewsets.ModelViewSet):

    queryset = OrganisationalUnit.objects.all()
    serializer_class = OUSerializer
</code></pre>
<p>This will give you nested API.</p>
</div>
<span class="comment-copy">Use django rest framework. Very easy to achieve it</span>
<span class="comment-copy">@webbyfox Thanks, I was considering exploring this option but have still limited knowledge about it. Could you briefly elaborate on how this could be "easily" achieved with DRF?</span>
<span class="comment-copy">Thanks, but for me this still returns an "un-nested" array, e.g. <code>http://127.0.0.1:8000/api/fruit/</code> returns: <code>[ { "fruit_id": "apple", "color": "r", "calories": "10"}, {...} ]</code>. Do you really get a nested JS object, e.g. <code>{ apple:  { color: "r", calories: 10}, banana: { color: "w", calories: 50} }</code>?</span>
<span class="comment-copy">share your code</span>
