<div class="post-text" itemprop="text">
<p>Given only the coordinates of the vertices of an acute triangle, how can I efficiently and quickly find the coordinates of the point at which the altitude from a particular vertex meets the opposite base? </p>
<p>A solution using only math, numpy, or scipy would be incredibly helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Needed point is orthogonal projection of vertex point (say vertex C) onto the line containing opposite side (say AB).</p>
<p><a href="https://i.stack.imgur.com/vaK46.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/vaK46.png"/></a></p>
<p>To find projection point, get vectors for AB and AC</p>
<pre><code> AB = (B - A)    //in coordinates ab.x = b.x-a.x, ab.y = b.y-a.y
 AC = (C - A)
</code></pre>
<p>and find parameter using scalar product of AB and AC</p>
<pre><code>t =(AB * AC) / (AB * AB) 
t =((b.x-a.x)*(c.x-a.x) + (b.y-a.y)*(c.y-a.y)) / ((b.x-a.x)*(b.x-a.x) + (b.y-a.y)*(b.y-a.y))
</code></pre>
<p>Projection point coordinates</p>
<pre><code> P = A + AB * t
 p.x = a.x + (b.x-a.x) * t
 p.y = a.y + (b.y-a.y) * t
</code></pre>
<p>That's all</p>
<pre><code>def orthoProjection(ax, ay, bx, by, cx, cy):
    abx = bx - ax
    aby = by - ay
    acx = cx - ax
    acy = cy - ay
    t = (abx * acx + aby * acy) / (abx * abx + aby * aby)
    px = ax + t * abx
    py = ay + t * aby
    return px, py

print(orthoProjection(0, 0, 4, 4, -1, 5))
&gt;&gt;(2.0, 2.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider the triangle with vertices at points A, B and C, and you wish to find where the altitude extending from vertex C intersects the line AB.</p>
<p>So first, you can determine the equation for line AB. You have points A and B (<code>Ax, Ay</code>; and <code>Bx, By</code>). Given that you can calculate the slope_AB as <code>(By-Ay)/(Bx-Ax)</code>.</p>
<p>Now the format of a line is <code>Y = MX+B</code> where M is the slope just calculated, and B is the Y intercept, so: <code>Y_intercept_AB = Ay - slope_AB * Ax</code>. So the equation for AB is <code>Y = slope_AB*X + Y_intercept_AB</code>.</p>
<p>OK, so now, the slope of the altitude from C to where it intersects line AB (let's call that point D, and the altitude line CD) is the negative reciprocal of the slope of AB; so <code>slope_CD = -(1/slope_AB)</code>.</p>
<p>So now, given that you have one point (C) on line CD and its slope, you can get the equation for CD the same way as you did for AB. First, find its Y-intercept:  <code>Y_intercept_CD = Cy - slope_CD * Cx</code></p>
<p>So the equation for CD is <code>Y = slope_CD * X + Y_intercept_CD</code>.</p>
<p>So now you have equations for line AB and line CD:</p>
<pre><code>Y = slope_AB * X + Y_intercept_AB
Y = slope_CD * X + Y_intercept_CD
</code></pre>
<p>And your problem is simplified to finding where those lines intersect, which is point D.</p>
<p>From the above equations, since both right-hand sides are equal to <code>Y</code> we can set them equal to each other:</p>
<pre><code>slope_AB * X + Y_intercept_AB = slope_CD * X + Y_intercept_CD
</code></pre>
<p>and now it's just a matter of solving for <code>X</code>.</p>
<pre><code>slope_AB * X - slope_CD*X = Y_intercept_CD - Y_intercept_AB 
(slope_AB - slope_CD)*X = Y_intercept_CD - Y_intercept_AB
X = (Y_intercept_CD - Y_intercept_AB)/(slope_AB - slope_CD)
</code></pre>
<p>That will give you the X-value for D (<code>Dx</code>). For the Y-value, use either line equation. Let's use the one for AB:</p>
<pre><code>Dy = slope_AB * Dx + Y_intercept_AB
</code></pre>
<p>Putting it all together, assume a triangle of <code>A=(-4, 2)</code>, <code>B=(0, 6)</code>, <code>C=(6, -4)</code>:</p>
<pre><code>#Points A, B,C:
Ax = -4; Ay = 2
Bx =  0; By = 6
Cx =  6; Cy = -4

#Line AB:
slope_AB = (By - Ay)/(Bx - Ax)
Y_intercept_AB = Ay - slope_AB*Ax
print("AB: slope: %s, intercept: %s" % (slope_AB, Y_intercept_AB))

#Line CD:
slope_CD = -(1/slope_AB)
Y_intercept_CD = Cy - slope_CD*Cx
print("CD: slope: %s, intercept: %s" % (slope_CD, Y_intercept_CD))

#Find the intersection of the two lines AB &amp; CD:
Dx = (Y_intercept_CD - Y_intercept_AB)/(slope_AB - slope_CD)
Dy = slope_AB*Dx + Y_intercept_AB
print("Intersection at (%s, %s)" % (Dx, Dy))
</code></pre>
<p>Prints:</p>
<pre><code>AB: slope: 1.0, intercept: 6.0
CD: slope: -1.0, intercept: 2.0
Intersection at (-2.0, 4.0)
</code></pre>
<p>One more thing: this will divide-by-zero and fail where points A &amp; B have the same X-value (because it divides by <code>Ax-Bx</code>, which would be zero); but it's a start.</p>
</div>
<span class="comment-copy">What have you tried so far, and what was wrong with your attempt?</span>
<span class="comment-copy">I've calculated the length of the altitude, but am having difficulty getting the coordinates of the point where it meets the base. I'm mostly wondering if there is an algorithm for finding those coordinates. I'm trying to create a solution generalized for any triangle.</span>
<span class="comment-copy">I think I can use the length of the altitude and the 90 deg angle to find the line from the point where the altitude meets the base from one of the vertices and then use the sides of the right triangle of that line to find my coords.</span>
