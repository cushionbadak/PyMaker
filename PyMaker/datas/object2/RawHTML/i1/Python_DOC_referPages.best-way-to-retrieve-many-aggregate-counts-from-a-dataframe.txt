<div class="post-text" itemprop="text">
<p>I have a dataframe that I need to retrieve many metrics from. Dataframe columns are the following:</p>
<pre><code>Consumer_ID|Client|Campaign|Date
</code></pre>
<p>I am trying to get the unique count of the consumer_ID column for various combinations of the Client, Campaign, and Date columns. So far I have come up with two solutions:</p>
<ol>
<li>Groupby statements with count as the agg function for every combination of client, campaign, and date.</li>
<li>Writing for loops and filtering on every combination of the client, campaign and date columns and then using the nunique() function to get the final count.</li>
</ol>
<p>My question: is there a cleaner more Pythonic way of getting the unique count of one column for all available combinations of other columns?</p>
<p>Example (annoying) solution using groupbys:
    Yes understood, but is there a more pythonic way to get every combination of the groupby columns? For example, right now to get all combinations I'd have to write:</p>
<pre><code>df.groupby(['Client']).Consumer_ID.nunique()
df.groupby(['Client', 'Campaign']).Consumer_ID.nunique()
df.groupby(['Client', 'Campaign', 'Date']).Consumer_ID.nunique()
df.groupby(['Client', 'Date'].Consumer_ID.nunique()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly:</p>
<pre><code>df.groupby(df.columns.drop(Consumer_ID).tolist(), as_index=False).nunique()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe what you're looking for is:</p>
<pre><code>df.groupby(['Client', 'Campaign', 'Date']).Consumer_ID.nunique()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a pivot table, as below:</p>
<p>import pandas as pd
pd.pivot_table(df, index=['Client', 'Campaign', 'Date'], values = 'Consumer_ID', aggfunc=pd.Series.nunique)</p>
</div>
<div class="post-text" itemprop="text">
<p>Answered my own question. I used itertools combinations to create all possible combinations of columns that are then used to complete all groupby aggregations. Example code below:</p>
<pre><code>from itertools import combinations
cols = df.columns
combinations = [j for i in range(len(cols)) for j in combinations(cols, i+1)]
</code></pre>
<p>I can then use the different combinations of columns within the "combinations" list to complete all groupby aggregations without having to write the groupby statement multiple times. </p>
<p>Thanks!</p>
</div>
<span class="comment-copy">Could you please post sample <i>input</i> and <i>output</i> data sets (5-7 rows in CSV/dict/JSON/Python code format <b>as text</b>, so one could use it when coding) and describe what do you want to do with the input data in order to get output data set? <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">@MaxU Apologies, I can see how it's confusing. Solved my own question and answered it below if you're interested!</span>
<span class="comment-copy">I will try this, I'm not sure it is grouping by every single combination of columns. Edit to explain this contained in the question above.</span>
<span class="comment-copy">I've a bit different case but I tried to adopt your solution and now it works just fine for me, thanks.</span>
<span class="comment-copy">Yes understood, but is there a more pythonic way to get every combination of the groupby columns? For example, right now to get all combinations I'd have to write:  df.groupby(['Client']).Consumer_ID.nunique() df.groupby(['Client', 'Campaign']).Consumer_ID.nunique() df.groupby(['Client', 'Campaign', 'Date']).Consumer_ID.nunique() df.groupby(['Client', 'Date'].Consumer_ID.nunique()</span>
<span class="comment-copy">Please see my edit to the question @Nidal</span>
<span class="comment-copy">What kind of Data structure would you store this in? Perhaps you can provide a sample output? My initial thoughts are that you aren't going to do a lot better than 4 lines. If your challenge is scaling this up to n columns, then you could write the groupby inside a combinatorial loop but I'd want to see what you want your output to look like.</span>
<span class="comment-copy">Apologies, I can see how my question was confusing. I figured out the answer and posted above if interested!</span>
