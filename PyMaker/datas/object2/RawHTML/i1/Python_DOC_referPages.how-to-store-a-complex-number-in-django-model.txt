<div class="post-text" itemprop="text">
<p>I need to store a complex number in a Django model. For those who forget, that simply means <code>Z=R+jX</code> where R and X are real numbers representing the real and imaginary components of the complex. There will be individual numbers, as well as lists that need to be stored. My searches so far haven't provided a good solution for lists, so I intend to let the database handle the list as individual records.</p>
<p>I see two options for storing a complex number:</p>
<p>1) create a custom field: <code>class Complex(models.CharField)</code>
This would allow me to customize all aspects of the field, but that is a lot of extra work for validation if it is to be done properly. The major upside is that a single number is represented by a single field in the table.</p>
<p>2) let each complex number be represented by a row, with a <code>float</code> field for the real part, R, and another <code>float</code> field for the imaginary part, X. The downside to this approach is that I would need to write some converters that will create a complex number from the components, and vice versa. The upside is that the database will just see it as another record.</p>
<p>Surely this issue has been resolved in the past, but I can't find any good references, never mind one particular to Django.</p>
<p>This is my first crack at the field, it is based on another example I found that involved a few string manipulations. What isn't clear to me is how and where various validations should be performed (such as coercing a simple float into a complex number by adding +0j). I intend to add form functionality as well, so that the field behaves like a float field, but with additional restrictions or requirements.</p>
<p>I have not tested this code yet, so there may be issues with it. It is based on the code from an answer in this SO question. It appears after running the code that some changes took place in method names.</p>
<p><a href="https://stackoverflow.com/questions/1110153/what-is-the-most-efficient-way-to-store-a-list-in-the-django-models">What is the most efficient way to store a list in the Django models?</a></p>
<pre><code>class ComplexField(models.CharField):

    description = 'A complex number represented as a string'

    def __init__(self, *args, **kwargs):
        kwargs['verbose_name'] = 'Complex Number'
        kwargs['max_length'] = 64
        kwargs['default'] = '0+0j'

        super().__init__(*args, **kwargs)

    def to_python(self, value):
        if not value: return
        if isinstance(value, complex):
            return value
        return complex(value)

    def get_db_prep_value(self, value):
        if not value: return
        assert(isinstance(value, complex))
        return str(item)[1:-1]

    def value_to_string(self, obj):
        value = self._get_val_from_obj(obj)
        return self.get_db_prep_value(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your expression every time like R + jX you can make the following class</p>
<pre><code>class ComplexNumber(models.Model):
    real_number = models.FloatField('Real number part')
    img_number = models.FloatFoeld('Img number part')

    def __str__(self):
        return complex(self.real_number, self.img_number)
</code></pre>
<p>and handle the outcome string with python <a href="https://stackoverflow.com/a/8370696/4098053">see here</a></p>
<p>If you have multiple real and img part you can handle this with foreign keys or ManyToMany Fields. This maybe depend on your need.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding custom fields, you've probably found the relevant part in the <a href="https://docs.djangoproject.com/en/2.1/howto/custom-model-fields/" rel="nofollow noreferrer">Django documentation</a> already. </p>
<p>Whether a custom field (or a custom database type, see below) is worth the trouble really depends on what you need to do with the stored numbers. For storage and some occasional pushing around, you can go with the easiest sane solution (your number two as enhanced by Tobit).</p>
<p>With PostgreSQL, you have to possibility to implement custom types directly in the database, including <a href="https://www.postgresql.org/docs/11/xoper.html" rel="nofollow noreferrer">operators</a>. Here's the relevant part in the <a href="https://www.postgresql.org/docs/11/xtypes.html" rel="nofollow noreferrer">Postgres docs</a>, complete with a complex numbers example, no less.</p>
<p>Of course you then need to expose the new type and the operators to Django. Quite a bit of work, but then you could do arithmetics with individual fields right in the database using Django ORM.</p>
</div>
<div class="post-text" itemprop="text">
<p>To be honest, I'd just split the complex number into two float/decimal fields and add a property for reading and writing as a single complex number.</p>
<p>I came up with this custom field that ends up as a split field on the actual model and injects the aforementioned property too.</p>
<ul>
<li><p><code>contribute_to_class</code> is called <a href="https://github.com/django/django/blob/418263c457636d3301f2068c47f09a0f42e15c52/django/db/models/base.py#L318-L322" rel="nofollow noreferrer">deep in the Django model machinery</a> for all the fields that are declared on the model. Generally, they might just add the field itself to the model, and maybe additional methods like <code>get_latest_by_...</code>, but here we're hijacking that mechanism to instead add two fields we construct within, and not the actual "self" field itself at all, as it does not need to exist as a database column. <sub>(This might break something, who knows...)</sub> Some of this mechanism is explained <a href="https://code.djangoproject.com/wiki/DevModelCreation" rel="nofollow noreferrer">here</a> in the Django wiki.</p></li>
<li><p>The <code>ComplexProperty</code> class is a <a href="https://docs.python.org/3.7/reference/datamodel.html#descriptors" rel="nofollow noreferrer">property descriptor</a>, which allows customization of what happens when the property it's "attached as" into an instance is accessed (read or written). (How descriptors work is a little bit beyond the scope of this answer, but there's a <a href="https://docs.python.org/3/howto/descriptor.html#id1" rel="nofollow noreferrer">how-to guide in the Python docs</a>.)</p></li>
</ul>
<p>NB: I did not test this beyond running migrations, so things may be broken in unexpected ways, but at least the theory is sound. :)</p>
<pre class="lang-py prettyprint-override"><code>from django.db import models


class ComplexField(models.Field):
    def __init__(self, **kwargs):
        self.field_class = kwargs.pop('field_class', models.FloatField)
        self.field_kwargs = kwargs.pop('field_kwargs', {})
        super().__init__(**kwargs)

    def contribute_to_class(self, cls, name, private_only=False):
        for field in (
            self.field_class(name=name + '_real', **self.field_kwargs),
            self.field_class(name=name + '_imag', **self.field_kwargs),
        ):
            field.contribute_to_class(cls, field.name)

        setattr(cls, name, ComplexProperty(name))


class ComplexProperty:
    def __init__(self, name):
        self.name = name

    def __get__(self, instance, owner):
        if not instance:
            return self
        real = getattr(instance, self.name + '_real')
        imag = getattr(instance, self.name + '_imag')
        return complex(real, imag)

    def __set__(self, instance, value: complex):
        setattr(instance, self.name + '_real', value.real)
        setattr(instance, self.name + '_imag', value.imag)


class Test(models.Model):
    num1 = ComplexField()
    num2 = ComplexField()
    num3 = ComplexField()


</code></pre>
<p>The migration for this looks like </p>
<pre class="lang-py prettyprint-override"><code>migrations.CreateModel(
    name="Test",
    fields=[
        (
            "id",
            models.AutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        ("num1_real", models.FloatField()),
        ("num1_imag", models.FloatField()),
        ("num2_real", models.FloatField()),
        ("num2_imag", models.FloatField()),
        ("num3_real", models.FloatField()),
        ("num3_imag", models.FloatField()),
    ],
)
</code></pre>
<p>so as you can see, the three <code>ComplexField</code>s are broken down into six <code>FloatField</code>s.</p>
</div>
<span class="comment-copy">It sounds like you're describing exactly the scenario that a custom field is meant to address. It's better to have the to/from conversion as close to the database as possible so you don't have to remember to convert a string to a complex number in your templates or views.</span>
<span class="comment-copy">Okay, I'll need to find a good example for custom fields. I'm surprised nothing has popped up yet in my searches. Most of what is returned for "complex" are things perceived as "difficult" so it doesn't make it easy.</span>
<span class="comment-copy">So long as you don't need to query the ComplexField in any other way than as strings, your approach looks good. It gets hairier if you need to query in a more complex way.</span>
<span class="comment-copy">Thanks for expanding on that @Tobit. Each record would be a number, so the only ForeignKey that should be required is the one tying it to the owner object. De-duplication seems like an idea as well, but I'm not going to touch that for a while.</span>
<span class="comment-copy">@Brian, glad to help you. Maybe you can show us the finale solution or mark my answer as correct.</span>
<span class="comment-copy">This would incur an extra lookup for every ComplexNumber, which sounds kinda unfortunate.</span>
<span class="comment-copy">@AKX can you explain what you mean? If you try to store something in a database you have to get it from the database? The class stores the full complex number. Otherwise you can use filter, annotations or something else to have only one lookup for multiple ComplexNumbers. I do not understand your comment.</span>
<span class="comment-copy">I assume the OP's intention is to be able to store complex numbers in a model the same way they would store, say, floats or decimals, i.e. in columns, not as foreign key references to another table.</span>
<span class="comment-copy">I'm using MariaDB, and would like to keep things DB agnostic for the moment. I'm looking for a solution that balances up front effort, with being able to get far enough in the project to redesign some things if needed (I'm still learning about Django, I feel like I've only scratched the surface). I'm leaning towards what @Tobit expanded on. I need to understand model methods a little more.</span>
<span class="comment-copy">Can you provide a little more verbose description? That sounds like my option 2) but I'm not at all familiar with properties, attributes in the sense of reading/writing them (in particular the <code>contribute_to_class</code> method).  I understand for the property that you're just defining the setter and getter. Also, does this method of setter/getter extend well for form/input validation?</span>
<span class="comment-copy">@Brian There – hope that helps.</span>
<span class="comment-copy">I want to learn, so I appreciate the extra detail. I see the migration produces the <code>_real</code> and <code>_imag</code> columns, and the admin interface produced the two form fields. Is this due to the <code>contribute_to_class</code> method, or the property, or both?</span>
<span class="comment-copy">The <code>contribute_to_class</code> method adds the two fields. To be honest, I didn't even really think about admin and other autogenerated UIs (such as ModelForms) ending up with the two separate fields, so this solution is definitely a little clunky in that sense.</span>
<span class="comment-copy">To be honest, there will be few instances where the data will be in a form for display or editing. The view or model itself will be reading and writing to the DB as part of saving settings or results to the DB. Entering data as real and imaginary fields also avoids much other validation for spaces, valid digits, etc. which is a significant improvement over having to validate an entire string in a CharField or something like that.</span>
