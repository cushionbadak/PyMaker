<div class="post-text" itemprop="text">
<p>I have a string of ndarray. I want to convert it back to ndarray.
I tried  <code>newval = np.fromstring(val, dtype=float)</code>. But it gives <code>ValueError: string size must be a multiple of element size</code></p>
<p>Also I tried <code>newval = ast.literal_eval(val)</code>. This gives </p>
<pre><code>File "&lt;unknown&gt;", line 1
[-1.45181984e-01  1.51671678e-01  1.59053639e-01 -1.02861412e-01
                               ^
SyntaxError: invalid syntax
</code></pre>
<blockquote>
<p>String of ndarray</p>
</blockquote>
<pre><code> '[-1.45181984e-01  1.51671678e-01  1.59053639e-01 -1.02861412e-01
 -9.70948339e-02 -1.75551832e-01 -7.24434480e-02  1.19182713e-01
 -4.54084426e-02 -9.23779532e-02  8.87222588e-02  1.05331177e-02
 -1.31792471e-01  3.50326337e-02 -6.58577830e-02  1.02670217e+00
 -5.29987812e-02  2.09167395e-02 -1.19845152e-01  2.30511073e-02
  2.89404951e-02  4.17387672e-02 -2.08203331e-01  2.34342851e-02]'
</code></pre>
<p>How can I convert this back to ndarray?</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand upon my comment:</p>
<p>If you're trying to parse a human-readable string representation of a NumPy array you've acquired from somewhere, you're already doing something you shouldn't.</p>
<p>Instead use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html" rel="nofollow noreferrer"><code>numpy.save()</code></a> and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.load.html#numpy.load" rel="nofollow noreferrer"><code>numpy.load()</code></a> to persist NumPy arrays in an efficient binary format.</p>
<p>Maybe use <code>.savetxt()</code> if you need human readability at the expense of precision and processing speed... but never consider <code>str(arr)</code> to be something you can ever parse again.</p>
<p>However, to answer your question, if you're absolutely desperate and don't have a way to get the array into a better format...</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; data = '''
... [-1.45181984e-01  1.51671678e-01  1.59053639e-01 -1.02861412e-01
...  -9.70948339e-02 -1.75551832e-01 -7.24434480e-02  1.19182713e-01
...  -4.54084426e-02 -9.23779532e-02  8.87222588e-02  1.05331177e-02
...  -1.31792471e-01  3.50326337e-02 -6.58577830e-02  1.02670217e+00
...  -5.29987812e-02  2.09167395e-02 -1.19845152e-01  2.30511073e-02
...   2.89404951e-02  4.17387672e-02 -2.08203331e-01  2.34342851e-02]
... '''.strip()
&gt;&gt;&gt; list_of_floats = [float(x) for x in data.strip('[]').split(None)]
[-0.145181984, 0.151671678, 0.159053639, -0.102861412, -0.0970948339, -0.175551832, -0.072443448, 0.119182713, -0.0454084426, -0.0923779532, 0.0887222588, 0.0105331177, -0.131792471, 0.0350326337, -0.065857783, 1.02670217, -0.0529987812, 0.0209167395, -0.119845152, 0.0230511073, 0.0289404951, 0.0417387672, -0.208203331, 0.0234342851]
</code></pre>
<p><em>EDIT:</em> For the case OP mentioned in the comments,</p>
<blockquote>
<p>I am storing these arrays in LevelDB as key value pairs. The arrays are fasttext vectors. In levelDB vector (value) for each ngram (key) are stored. Is what you mentioned above applicable here?</p>
</blockquote>
<p>Yes â€“ you'd use <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>BytesIO</code> from the <code>io</code> module</a> to emulate an in-memory "file" NumPy can write into, then put that buffer into LevelDB, and reverse the process (read from LevelDB into an empty BytesIO and pass it to NumPy) to read:</p>
<pre class="lang-py prettyprint-override"><code>bio = io.BytesIO()
np.save(bio, my_array)
ldb.put('my-key', bio.getvalue())
# ...
bio = io.BytesIO(ldb.get('my-key'))
my_array = np.load(bio)
</code></pre>
</div>
<span class="comment-copy">Honestly, by not having something like that in the first place. (You're already losing information since numbers are being rounded there.) Please serialize your arrays into a machine-readable format instead of trying to go through a string meant for human consumption.</span>
<span class="comment-copy">Is keeping this in byte format fine?</span>
<span class="comment-copy">If you're saving to disk to solely use the data with NumPy, use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.save.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/numpy.save.html</a> and <code>numpy.load</code>.</span>
<span class="comment-copy">I am storing these arrays in LevelDB as key value pairs. The arrays are fasttext vectors. In levelDB vector (value) for each ngram (key) are stored. Is what you mentioned above applicable here?</span>
<span class="comment-copy">Yes. You'd use something like <code>bio = io.BytesIO(); np.save(bio, my_array); ldb.put('my-key', bio.getvalue())</code> to save and <code>bio = io.BytesIO(ldb.get('my-key')); arr = np.load(bio);</code> to load.</span>
