<div class="post-text" itemprop="text">
<p>If I have list like <code>[1,2,3,4,5,1,2,3,4,6]</code> in this list both duplicate values and existing duplicate values also.</p>
<p>Here is my code.</p>
<pre><code>l=[1,2,3,4,5,1,2,3,4,6]
l1=[]
for i in l:
    if i not in l1:
         l1.append(i)
print(l1)
</code></pre>
<p>Output:</p>
<pre><code>[1,2,3,4,5,6]
</code></pre>
<p>But,my required output should be  like this:   <code>[5,6]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a></p>
<pre><code>from collections import Counter
l=[1,2,3,4,5,1,2,3,4,6]

new_l = Counter(l)
print([k for k,v in new_l.items() if v==1])
</code></pre>
<p>Output:</p>
<pre><code>[5,6]
</code></pre>
<p><strong>With only loops</strong></p>
<pre><code>new_list = []

for i in l:
    if i not in new_list:
        new_list.append(i)
    else:
        new_list.remove(i)

print(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here we can use the count method with list comprehension</p>
<pre><code>l=[1,2,3,4,5,1,2,3,4,6]
print [x  for x in l if l.count(x) == 1 ]
</code></pre>
<p>Output</p>
<pre><code>[5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can find all duplicates and then build a new list without duplicates:</p>
<pre><code>l = [1, 2, 3, 4, 5, 1, 2, 3, 4, 6]

temp = set()
dupes = set()
for i in l:
    if i in temp:
        dupes.add(i)
    else:
        temp.add(i)

[i for i in l if i not in dupes]
# [5, 6]
</code></pre>
</div>
<span class="comment-copy">can we write without using built in methods. only using loop concept like.</span>
<span class="comment-copy">@BrahmaReddy Check my edited answer</span>
<span class="comment-copy">thank you @mr.akshay.it's working fine.</span>
<span class="comment-copy"><code>append</code> is a built-in method. So is <code>remove</code>. The <code>in</code> operator invokes <code>__contains__</code>, another built-in method. <code>for</code> invokes <code>__iter__</code>. <code>new_list.append</code> and <code>new_list.remove</code> both need <code>__getattr__</code> (or something similar, I can't remember) to even recognise it's a method. And <code>print(new_list)</code> will call <code>__str__</code>. It is utterly impossible to do anything in Python "without using built in methods".</span>
