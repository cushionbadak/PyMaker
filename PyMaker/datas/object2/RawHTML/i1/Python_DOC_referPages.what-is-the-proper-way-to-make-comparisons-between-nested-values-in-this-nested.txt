<div class="post-text" itemprop="text">
<p>Over our engineer week, my school gave out code challenges. You are not allowed to use libraries that solves a major chunk of the problem. Here is my problem.</p>
<pre><code>[&gt;][ ][&lt;]
[ ][^][ ]
[ ][&lt;][ ]
</code></pre>
<p>Given an ASCII art of an airfield in any size, with any number of planes, in any steps, parse the text file and do three things.</p>
<p>1) Given a step find out which plane will crash into each other, mark the plane with 'x'</p>
<p>2) Given a step find out which plane will fly off the grid without crashing into each other, make it with an 'o'. eg <code>[ ][ ][&lt;]</code> will fly off given step size of 3.</p>
<p>3) Given a step, if the plane doesn't fly off the grid and doesn't crash replace it in the next landing spot</p>
<p>I wrote something that can turn the above text file into a nested list and also grab its current AND future coordinates of all the planes that go horizontally.</p>
<p>I am currently working on a function called updating_airfield where I get to mark the planes with 'x' or 'o' or move them to another spot. This logic part of the puzzle is killing me. Below is the input for my update_airfield function based on the above ASCII airfield after given step size of 2.</p>
<pre><code># ROW 1 [&gt;][ ][&lt;] or ('&gt;', 0, 0)(' ', 0, 1)('&lt;', 0, 2)
# AFTER adding the step and formatting the output

[('&gt;', 2), ('&lt;', 0)]

# I took the 2nd element because its blank and I also removed the x_axis 
# because we only need to go along the horizontal line. 
</code></pre>
<p>The next step I can then do is to do a mathematical comparison between the numbered position values. If the result is &gt;= 0 then I know they either both lands on the same spot or they went through each other, so they crashed. I then can change '&gt;' and '&lt;' to 'x' and finally repeat for each row. This logic should work but breaks if I make the rows longer and add more planes. </p>
<p>This is where I am stuck trying to compensate for an airfield in any size, with any number of planes, in any given steps. So how do you even start solving a problem like this? Are there data structures in standard python that can help me track which plane will crash into each other? I have to do the same thing for planes going up and down in the verticle direction too. I was thinking of mapping everything with an ordered dictionary but not sure how to proceed. Any help is greatly appreciated. I hope I made my self clear enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't really have to compare arrays. Unless you have huge number of steps or fields, the simplest approach is to simulate each step by playing the the directions. Btw, which symbol denotes down? </p>
<pre><code>Initial state
[&gt;][ ][&lt;]
[ ][^][ ]
[ ][&lt;][ ]

Step +1
[ ][X][ ]
[ ][ ][ ]
[&lt;][ ][ ]

Step +2
[ ][X][ ]
[ ][ ][ ]
[L][ ][ ]
</code></pre>
<p>and so on. You have to be careful to not move the same plane during one step. To avoid that and keep the things relatively simple, you can create a structure to hold airplane state, and an array to hold positions to check for collisions (that is just an optimization).</p>
<p>I will go for pseudo code.</p>
<p>you plane class can contain:</p>
<pre><code> originalX; 
 originalY;
 currentX; 
 currentY;
 state # on the field, left, collided
 stepNoLeft;
 stepNoCollided;
 ListcollidedWith  - optional
</code></pre>
<p>put the planes in a list, which will be used as a queue.
Create a 2 dimensional array to hold the current positions (just to look back the airplane you have collided with). If the field is really sparse (thousands of cells and just a few airplanes, you might consider a different structure. Probably a map of lists or a multi-map, in this case the only arrays you will have will be the list of airplanes, and with whom they have collided. So the field could be a multi-map (map of lists) with the keys being x/y position. Let's use a multimap since that will be more generic.</p>
<p>clean the field map(for the next step)
iterate over the airplane list and put the airplanes on "the field"/ in  the map. For the first step you should not have coordinate collisions.
If the airplane is in collision probably it should not move or fly away. You can skip the plains that have already flew away (they don't change directions, so once off the fields they are safe. The map still could track those, but we don't have to)
Note that the following case could be valid: the planes follow each other in a single file:</p>
<pre><code>step 0 [ ][&lt;][&lt;][ ]
step 1 [&lt;][&lt;][ ][ ]
</code></pre>
<p>Update current X,Y and put it in the multimap or if it is getting off the field flag it as off-field. (you can check at this point for the target cell being occupied but can wait for the end of the step)
At the end of the step iterate over the map and flag cells with multiple airplanes for collision.</p>
<p>rinse and repeat</p>
<p>example: </p>
<pre><code> For the Initial state
[&gt;][ ][&lt;]
[ ][^][ ]
[ ][&lt;][ ]
</code></pre>
<p>it would look like this:</p>
<pre><code>tuple: (x,y,direction,id)
step 0: airplanes( (0,0,'&gt;', 'A') , (0,2,'&lt;', 'B') , (1,1,'^', 'C') ,(2,1,'&lt;', 'D')
step 1: airplanes( (0,1,'&gt;', 'A') , (0,1,'&lt;', 'B') , (0,1,'^', 'C') ,(2,0,'&lt;', 'D')

map step1:
key: 0-1 : A,B,C – collided at step1
key:2-0: D
</code></pre>
<p>step 2: airplanes( (0,1,'&gt;', 'A') , (0,1,'&lt;', 'B') , (0,1,'^', 'C') ,(2,-1,'&lt;', 'D')</p>
<pre><code>airplanse A,B,C don't move  (let's assume that once there was a collision they don't move)
airplane D – has left the field

map step1:
key: 0-1 : A,B,C – collided at step1
 D is not in the map
</code></pre>
<p>Since python has nice built-in lists and maps you don't need any library.</p>
</div>
<span class="comment-copy">Thank you. I just finished writing the "future outlook" method for my airplane class. I then tried to compare the outcome by checking if '&gt;' is always less than '&lt;' for a crash. I am currently dealing with WAY too many logics and inner loops. You ways sound simple enough but I am not familiar with maps. I guess I have to go with this approach and learn more about maps. Thanks a lot of the long detailed reply I really appreciated!</span>
