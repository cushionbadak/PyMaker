<div class="post-text" itemprop="text">
<p>I get the following basic setting:</p>
<pre><code>model.X = ['A','B']
model.stage = range(1,3)
model.Y = ['C','D']
model.area = pyo.Var(model.X, model.stage, model.Y, initialize = 2, bounds=(0,100))
</code></pre>
<p>but I wish the variable area can be initialized with different value, like</p>
<pre><code>model.area['A',1,'C'] initialize = 1
model.area['A',1,'D'] initialize = 1
model.area['B',1,'C'] initialize = 2
model.area['B',1,'D'] initialize = 2
model.area['A',2,'C'] initialize = 1
model.area['A',2,'D'] initialize = 1
model.area['B',2,'C'] initialize = 2
model.area['B',2,'D'] initialize = 2
</code></pre>
<p>I get no idea how to iterate the defined variable area with different sub index, can anyone share some ideas ?
Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>If the <code>model</code> object is a <code>ConcreteModel</code> you can simply write</p>
<pre><code>model.area['A',1,'C'].value = 1
model.area['B',1,'C'].value = 2
</code></pre>
<p>If it is an <code>AbstractModel</code> you can either do the same on the constructed instance or you can define a rule and assign it to the initialize keyword:</p>
<pre><code>def area_init(m,i,j,k):
    if (i,j,k) in [('A',1,'C'),...]:
        return 1
    elif ...:
        return 2
model.area = pyo.Var(model.X,model.stage,model.Y,initialize=area_init,bounds=(0,100))
</code></pre>
</div>
<span class="comment-copy">Yeah, it is ConcreteModel, and it founctions well when I put them directly after the declare of model.area.</span>
