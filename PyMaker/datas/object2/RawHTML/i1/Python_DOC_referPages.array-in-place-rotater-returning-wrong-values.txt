<div class="post-text" itemprop="text">
<p>I wish to define a function to rotate a matrix by 90 degrees in place </p>
<pre><code>def rotate_matrix(matrix):
        for i in range(len(matrix)//2):
            for j in range(i, len(matrix)-i-1):
                matrix[~j][i], matrix[i][j], matrix[j][~i], matrix[~i][~j] = matrix[i][j], matrix[j][~i], matrix[~i][~j], matrix[~j][i]
        return matrix
</code></pre>
<p>When inserting :</p>
<pre><code>[
 [a, b],
 [c, d]
]
</code></pre>
<p>it returns:</p>
<pre><code>[
 [b, d],
 [a, c]
]
</code></pre>
<p>instead of:</p>
<pre><code>[
 [c, a],
 [d, b]
]
</code></pre>
<p>and I'm unsure why. </p>
</div>
<div class="post-text" itemprop="text">
<p>You were on the right track! Your code performs a <em>counterclockwise rotation</em> instead of <em>clockwise</em>. <br/>
To solve it you have to make a few small changes to the assignment logic:</p>
<pre><code>def rotate_matrix(matrix):
        for i in range(len(matrix)//2):
            for j in range(i, len(matrix)-i-1):
                matrix[~j][i], matrix[i][j], matrix[j][~i], matrix[~i][~j] = \
                matrix[~i][~j], matrix[~j][i], matrix[i][j], matrix[j][~i]
        return matrix
</code></pre>
<p>does what you are looking for.</p>
<hr/>
<p>However, I would use <strong>numpy</strong>, as it has a <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.rot90.html" rel="nofollow noreferrer">built in method</a> for rotating matrices:  </p>
<pre><code>import numpy as np
mat = np.array([['a','b'],
         ['c','d']])

def rotate_matrix(matrix):
    return np.rot90(matrix, 3) // * SEE NOTE

print(rotate_matrix(mat))
</code></pre>
<p>Returns:</p>
<pre><code>[['c' 'a']
 ['d' 'b']]
</code></pre>
<p><br/></p>
<p><strong>NOTE:</strong> the rot90 method offers <em>counterclockwise</em> rotation. Since you request <em>clockwise</em> rotation, you must specify an argument of 3 to specify the amount of counterclockwise rotations that should be made to achieve a clockwise rotation.</p>
</div>
<div class="post-text" itemprop="text">
<p>this is the solution of your problem, you have to use the assignment value proper</p>
<p>try to see the assignment you are doing,</p>
<p>in term of index : (0,0) --&gt; (0,1) , (0,1) --&gt; (1,1), (1,0) --&gt;(0,0) and 
(1,1) --&gt; (1,0) this is wrong . </p>
<p>that is why you are getting the wrong solution</p>
<p>what you should do was  match index as </p>
<p>(0,0) --&gt;(0,1) , (0,1)--&gt;(0,0) , (1,1)--&gt;(0,1),(1,0)--&gt;(1,1)</p>
<p>below is the correct solution.</p>
<pre><code>def rotate_matrix(matrix):
        for i in range(len(matrix)//2):
            for j in range(i, len(matrix)-i-1):
               matrix[i][j], matrix[~i][j], matrix[i][~j], matrix[~i][~j]= matrix[~i][j],matrix[i][~j],matrix[i][j],matrix[~i][~j]
        return matrix

a = [
 ['a','b'],
 ['c', 'd']
]

print(rotate_matrix(a))
# output [['c', 'a'], ['b', 'd']]
</code></pre>
<p>this is the solution of the problem you are trying to solve, ie rotation of a matrix 
at 90 degree 
    # Python program to rotate a matrix </p>
<pre><code># Function to rotate a matrix 
def rotateMatrix(mat): 

    if not len(mat): 
        return

    """ 
        top : starting row index 
        bottom : ending row index 
        left : starting column index 
        right : ending column index 
    """

    top = 0
    bottom = len(mat)-1

    left = 0
    right = len(mat[0])-1

    while left &lt; right and top &lt; bottom: 

        # Store the first element of next row, 
        # this element will replace first element of 
        # current row 
        prev = mat[top+1][left] 

        # Move elements of top row one step right 
        for i in range(left, right+1): 
            curr = mat[top][i] 
            mat[top][i] = prev 
            prev = curr 

        top += 1

        # Move elements of rightmost column one step downwards 
        for i in range(top, bottom+1): 
            curr = mat[i][right] 
            mat[i][right] = prev 
            prev = curr 

        right -= 1

        # Move elements of bottom row one step left 
        for i in range(right, left-1, -1): 
            curr = mat[bottom][i] 
            mat[bottom][i] = prev 
            prev = curr 

        bottom -= 1

        # Move elements of leftmost column one step upwards 
        for i in range(bottom, top-1, -1): 
            curr = mat[i][left] 
            mat[i][left] = prev 
            prev = curr 

        left += 1

    return mat 

# Utility Function 
def printMatrix(mat): 
    for row in mat: 
        print row 


# Test case 1 
matrix = [
 ['a','b'],
 ['c', 'd']
]



matrix = rotateMatrix(matrix) 
# Print modified matrix 
printMatrix(matrix) 

# output [['c', 'a'], ['b', 'd']]
</code></pre>
<p>ps second solution coping from <a href="https://www.geeksforgeeks.org/rotate-matrix-elements/" rel="nofollow noreferrer">geeksforgeets</a></p>
</div>
<span class="comment-copy">@DanielPahor I posted an edit with a fix to your original algorithm. Your assignment logic is reversed, which is why the matrices are being rotated the wrong way. If this is insufficient, please edit your question to make a clearer request.</span>
<span class="comment-copy">@DanielPahor try to see the assignment you are doing, in term of index ( 0,0) with (0,1) , (0,1)-&gt; (1,1), (1,0) -&gt;(0,0) and (1,1) -&gt; (1,0) this is wrong . that is why you are getting wrong solution</span>
