<div class="post-text" itemprop="text">
<p>I want to calculate something in C++ and return result to python. This is part of the C++ code:</p>
<pre><code>const Mat&amp; flow_map_x, flow_map_y;
std::vector&lt;unchar&gt; encoded_x, encoded_y;

flow_map_x = ...;
flow_map_y = ...;

Mat flow_img_x(flow_map_x.size(), CV_8UC1);
Mat flow_img_y(flow_map_y.size(), CV_8UC1);

encoded_x.resize(flow_img_x.total());
encoded_y.resize(flow_img_y.total());

memcpy(encoded_x.data(), flow_img_x.data, flow_img_x.total());
memcpy(encoded_y.data(), flow_img_y.data, flow_img_y.total());

bp::str tmp = bp::str((const char*) encoded_x.data())
</code></pre>
<p>The error when running python script is: </p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 0: invalid start byte
</code></pre>
<p>After debugging, I found that the error comes from this line:</p>
<pre><code>bp::str tmp = bp::str((const char*) encoded_x.data())
</code></pre>
<p>I'm not good at C++. Could anyone tell me how to fix the error? Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't because <code>encoded_x.data()</code> is not UTF-8. You probably want <a href="https://docs.python.org/3/c-api/bytes.html" rel="nofollow noreferrer"><code>bytes</code></a> for a copy of the raw data:</p>
<p>Using <code><a href="https://docs.python.org/3/c-api/structures.html#c.PyObject" rel="nofollow noreferrer">PyObject</a>* <a href="https://docs.python.org/3/c-api/bytes.html#c.PyBytes_FromStringAndSize" rel="nofollow noreferrer">PyBytes_FromStringAndSize</a>(const char *<em>v</em>, Py_ssize_t <em>len</em>)</code>. Or you can use <a href="https://docs.python.org/dev/c-api/bytearray.html#c.PyByteArray_FromStringAndSize" rel="nofollow noreferrer"><code>PyByteArray_FromStringAndSize</code></a> for a <code>bytearray</code> with the same arguments.</p>
<pre><code>bp::object tmp(bp::handle&lt;&gt;(PyBytes_FromStringAndSize(
    // Data to make `bytes` object from
    reinterpret_cast&lt;const char*&gt;(encoded_x.data()),
    // Amount of data to read
    static_cast&lt;Py_ssize_t&gt;(encoded_x.size())
)));
</code></pre>
<p>In this case, you can get rid of the vector and use <code>flow_img_x.data</code> and <code>flow_img_x.total()</code> directly.</p>
<hr/>
<p>Or a <a href="https://docs.python.org/3/c-api/memoryview.html" rel="nofollow noreferrer"><code>memoryview</code></a> to not copy the data, but just access the <code>std::vector</code>s data</p>
<p>Using <code>PyObject* <a href="https://docs.python.org/3/c-api/memoryview.html#c.PyMemoryView_FromMemory" rel="nofollow noreferrer">PyMemoryView_FromMemory</a>(char *<em>mem</em>, Py_ssize_t <em>size</em>, int <em>flags</em>)</code></p>
<pre><code>bp::object tmp(bp::handle&lt;&gt;(PyMemoryView_FromMemory(
    reinterpret_cast&lt;char*&gt;(encoded_x.data()),
    static_cast&lt;Py_ssize_t&gt;(encoded_x.size()),
    PyBUF_WRITE  // Or `PyBUF_READ` i if you want a read-only view
)));
</code></pre>
<p>(If the vector was const, you would <code>const_cast&lt;char*&gt;(reinterpret_cast&lt;const char*&gt;(encoded_x.data()))</code> and only use <code>PyBUF_READ</code>)</p>
<p>You have to make sure the vector stays alive in this case though, but it won't create an unnecessary copy.</p>
</div>
<span class="comment-copy">This answer perfectly solved the problem! Thank you!</span>
