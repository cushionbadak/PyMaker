<div class="post-text" itemprop="text">
<p>Is there any algorithm to find the indexes of the k smallest  numbers in an unsorted array in python? I know how this can be achieved using numpy module, but I am not looking for that. One direction that immediately comes to my mind is that it has to with sorting algorithms. So lets say that I have an algo to sort an array in python using bubble sort:</p>
<pre><code>def bubbleSort(arr):
n = len(arr)

# Traverse through all array elements
for i in range(n):

    for j in range(0, n-i-1):
        # Swap if the element found is greater
        # than the next element
        if arr[j] &gt; arr[j+1] :
            arr[j], arr[j+1] = arr[j+1], arr[j]
</code></pre>
<p>I am not sure how to modify this algorithm to <strong>just return the indexes of the k smallest number in the array.</strong> Any help using sorting algorithm or selecting algorithm like quickselect, quicksort shall be appreciated.</p>
<p>EDIT 1 : So say array is:</p>
<pre><code>a = [12, 11, 0, 35, 16, 17, 23, 21, 5]
</code></pre>
<p>Then it must just return an array:
    <code>index_of_least_k = [2,8,1]</code></p>
<p>for k = 3.</p>
<p>If I had to modify the sorting algorithm say bubble sort, I understand how to change so that it swaps the indexes this time, say:</p>
<pre><code>def modified_bubbleSort(arr, index):
      n = len(arr)

      # Traverse through all array elements
      for i in range(n):

           for j in range(0, n-i-1):
                  # Swap if the element found is greater
                  # than the next element
                  if arr[j] &gt; arr[j+1] :
                         index[j], index[j+1] = index[j+1], index[j]
      return index


array = [12, 11, 0, 35, 16, 17, 23, 21, 5]
index = [0, 1, 2, 3, 4, 5, 6, 7, 8]

indexOfAllsorted = modified_bubblesort(array, index)
</code></pre>
<p>In this case it returns me:</p>
<pre><code>indexOfAllsorted = [2,8,1,0,4,5,7,6]
</code></pre>
<p>I do not want that because there are extra 5 values, to avoid the memory overhead my algorithm should just have:</p>
<pre><code>index_of_least_k = [0, 0, 0]
</code></pre>
<p>in the memory for k =3 and then fill it as it proceeds. I hope I made it clear.</p>
<p>EDIT2: I am not looking for any library or modules to accomplish that in python. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.7/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><code>heapq.nsmallest</code></a> to get the <code>n</code> smallest items from an iterable.  So how do you create an iterable such that it measures the values of the input, but returns their indices?  One way is to use the <code>enumerate</code> function to get an iterable of <code>(index, value)</code> pairs, then use a key function to only use the values.</p>
<pre><code>from heapq import nsmallest
from operator import itemgetter

def indices_of_n_smallest(n, seq):
    smallest_with_indices = nsmallest(n, enumerate(seq), key=itemgetter(1))
    return [i for i, x in smallest_with_indices]

array = [12, 11, 0, 35, 16, 17, 23, 21, 5]
indices_of_n_smallest(3, array)
# [2, 8, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's the thing about bubble sort. Each time the inner loop finishes iterating, exactly one element finds its correct position. Your code for example, finds the ith largest element each time, as it's sorting in ascending order. Let's flip that &gt; sign to &lt;; now it'll find the ith smallest element every time the j loop finishes. So if you stop the sorting when i=k, you'll have your k smallest elements.</p>
<pre><code>def modified_bubbleSort(arr, index, k):
  n = len(arr)
  ans = []

  for i in range(k):

       for j in range(0, n-i-1):
              # Swap if the element found is smaller
              # than the next element
              if arr[index[j]] &lt; arr[index[j+1]] :
                     index[j], index[j+1] = index[j+1], index[j]
       ans.append(index[n-i-1])
  return ans
</code></pre>
</div>
<span class="comment-copy">Can you show an input and it's output you are expecting? Please edit them to question. Also, Python isn't like C/C++, where you will write whole lots of codes; it has got innumerable functions to make program easy.</span>
<span class="comment-copy">Hey, have you tested your function. Just check yourself for the <code>array, index</code> specified by me in the question it should yield  <code>index_of_least_k = [2,8,1]</code> for k =3.</span>
<span class="comment-copy">Sorry, yeah. Edited it, should work now. Use arr[index[j]] instead of just arr[j] in the loop; since you are actually swapping the indexes not the array itself.</span>
