<div class="post-text" itemprop="text">
<p>I found this python script that converts webcam input into ASCII into the command line and made a few changes to suit my needs. I would like to add a Unicode character to the output, but it currently only prints out a box instead of the proper Unicode whenever I actually run it. What do I need to change to make sure that it prints out the actual Unicode character?</p>
<pre><code>import cv2
from time import sleep, time
import sys

import curses
from curses import wrapper

import locale
locale.setlocale(locale.LC_ALL, '')
#stdscr.addstr(0, 0, mystring.encode('UTF-8'))

x = 160
sx = 4

chars = ['\u23FA', ".", ".", "  ", "  ", "  ", "  ", "  ", "  ", "  "]

size = x*sx, int(x*sx*.75)
operating = False
ongoing = True
#font.set_bold(True)
fpsa = 0

br = (255, 255, 255)
fr = (0, 0, 0)

lenc = len(chars)

visload = False
mt = False
aa = False

def toAscii(pic, scr):
    global operating
    m = 0
    for y in pic:
        tm = max(y)
        if tm &gt; m:
            m = tm

    fx = 0
    fy = 0

    h,w = scr.getmaxyx()

    #for y in pic:
        #for x in y:
    for _y in range(h-1):
        for _x in range(w-1):
            y = pic[int(_y/float(h) * len(pic))]
            x = y[int(_x/float(w) * len(y))]
            scr.addstr(_y, _x, chars[int(x/m*(lenc-1))].encode('UTF-8'), curses.color_pair(1))
            fx += 1
        fy += 1
        fx = 0
    operating = False


cap = cv2.VideoCapture(0)

def main(scr):

    global operating

    while True:
        ret, frame = cap.read()

        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)

        colored = cv2.resize(cv2.resize(cv2.cvtColor(frame, 0), (x, int(x*0.75))), (640, 480))
        colored = cv2.cvtColor(frame, 0)


        gray = cv2.resize(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), (x, int(x*.75)))

        if not operating:
            operating = True
            if mt:
                _thread.start_new_thread(toAscii, (gray, scr))
            else:
                toAscii(gray, scr)

        scr.refresh()


        #gray = cv2.resize(gray, (640, 480), interpolation = cv2.INTER_NEAREST)


        #cv2.imshow('frame',cv2.resize(gray, (640, 480)))

def _main(scr):
    try:
        main(scr)
    except KeyboardInterrupt:
        pass

wrapper(_main)

cap.release()
cv2.destroyAllWindows()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on the terminal emulator that you are using. The reason why the emoji character appears as a box in your terminal is that your terminal emulator doesn't support Unicode character.</p>
<p>I just tested your code on iTerm2, which support Unicode, and it works with no problem.</p>
</div>
<span class="comment-copy">Is anyone aware of a Windows terminal emulator that can go full screen as well?</span>
<span class="comment-copy">try conemu(<a href="https://conemu.github.io" rel="nofollow noreferrer">conemu.github.io</a>)</span>
<span class="comment-copy">Note: you need not just an emulator, but also a font which can print the wanted glyphs. Note: this is not so easy to find (or maybe it is impossible) good monospaced fonts with all glyphs.</span>
