<div class="post-text" itemprop="text">
<p>I want to write a code that will split the list (one time or more times) based on the mathematical condition . This is the list:</p>
<pre><code>full_list = [1,2,4,6,7,10,12,13,20,22,23,26,36,37,39]
</code></pre>
<p>I want to split this list on the place where difference between two neighbor elements are more than 6. So, based on list above, output should be:</p>
<pre><code>A_list = [1,2,4,6,7,10,12,13]
B_list = [20,22,23,26]
C_list = [36,37,39]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done quite easy with numpy:</p>
<pre><code>import numpy as np

full_list = [1,2,4,6,7,10,12,13,20,22,23,26,36,37,39]
a = np.array(full_list)

np.split(a,np.argwhere(np.roll(np.diff(a) &gt; 6,1)).reshape(-1))
</code></pre>
<p>This would yield:</p>
<pre><code> [array([ 1,  2,  4,  6,  7, 10, 12, 13]),
 array([20, 22, 23, 26]),
 array([36, 37, 39])]
</code></pre>
<p>If you want to go back to normal lists like this:</p>
<pre><code>list(map(list,result))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use numpy you can try the following:</p>
<pre><code>full_list = [1, 2, 4, 6, 7, 10, 12, 13, 20, 22, 23, 26, 36, 37, 39]
split_lists = []
prev_val = full_list[0]
last_split = 0
for idx, val in enumerate(full_list[1:]):
    if abs(prev_val - val) &gt; 6:
        split_lists.append(full_list[last_split:idx + 1])
        last_split = idx + 1
    prev_val = val
split_lists.append(full_list[last_split:])
print(split_lists)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pair adjacent items by zipping the list with itself but pad one of them with negative infinity so the difference with it is guaranteed to be greater than 6, and then build a list of lists accordingly:</p>
<pre><code>lists = []
for a, b in zip([float('-inf')] + full_list, full_list):
    if b - a &gt; 6:
        lists.append([])
    lists[-1].append(b)
</code></pre>
<p><code>lists</code> would become:</p>
<pre><code>[[1, 2, 4, 6, 7, 10, 12, 13], [20, 22, 23, 26], [36, 37, 39]]
</code></pre>
<p>And if you're sure that your list is always going to be splitted into exactly 3 lists, you can unpack them into 3 variables as you wish in the question:</p>
<pre><code>A_list, B_list, C_list = lists
</code></pre>
</div>
<span class="comment-copy">Have you tried anything so far?</span>
