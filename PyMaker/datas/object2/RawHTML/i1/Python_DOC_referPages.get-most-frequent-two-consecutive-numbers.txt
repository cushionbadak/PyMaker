<div class="post-text" itemprop="text">
<pre><code>import itertools, numpy as np

a = [1,2,3,4,5]
b = [5,2,3,6,7]
c = [5,2,3,8,9]
</code></pre>
<p>get most frequent numbers:</p>
<pre><code>data = np.array([a,b,c]).flatten()
print (data)

values, counts = np.unique(data, return_counts=True)

for value, frequency in zip(values, counts):
    print (value, frequency)
</code></pre>
<p>How can I get most frequent two consecutive numbers?
Answer is [2,3].
But how to get it by program?</p>
</div>
<div class="post-text" itemprop="text">
<p>you could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and iterate over <code>data</code> in consecutive pairs:</p>
<pre><code>import numpy as np
from collections import Counter

a = [1,2,3,4,5]
b = [5,2,3,6,7]
c = [5,2,3,8,9]

data = np.array([a,b,c]).flatten()

c = Counter(zip(data, data[1:]))
print(c.most_common(1))
# [((2, 3), 3)]
</code></pre>
<p>telling you that <code>(2, 3)</code> occurred 3 times.</p>
<hr/>
<p>a bit more detail:</p>
<pre><code>data[1:]
</code></pre>
<p>is your <code>data</code> without its first element.</p>
<pre><code>zip(data, data[1:])
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is then used to generate the consecutive pairs (as <code>tuples</code>)</p>
<pre><code>(1, 2), (2, 3), (3, 4), (4, 5), (5, 5), (5, 2), (2, 3), ...
</code></pre>
<p>the <code>Counter</code> then just counts how many times the appear and stores them <code>dict</code>-like:</p>
<pre><code>Counter({(2, 3): 3, (5, 2): 2, (1, 2): 1, (3, 4): 1, (4, 5): 1, (5, 5): 1, (3, 6): 1,
         (6, 7): 1, (7, 5): 1, (3, 8): 1, (8, 9): 1})
</code></pre>
<hr/>
<p>update: if you do not want pairs from different list, you can do this:</p>
<pre><code>data = (a, b, c)

c = Counter()
for d in data:
    c.update(zip(d, d[1:]))
print(c)
</code></pre>
<p>or directly:</p>
<pre><code>c = Counter(pair for d in data for pair in zip(d, d[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>Counter</code> as suggested by @hiro protagonist, but since you want to treat a one row at a time, you have to apply it along rows.</p>
<pre><code>from collections import Counter
</code></pre>
<p>Apply along rows using numpy:</p>
<pre><code>data = np.array([a,b,c])

np.apply_along_axis(lambda x: Counter(zip(x, x[1:])), 1, data).sum().most_common(1)
[((2, 3), 3)]
</code></pre>
<p>Or, if using pandas:</p>
<pre><code>import pandas as pd
data = np.array([a,b,c])
df = pd.DataFrame(data)
</code></pre>
<p>Now, apply Counter along rows:</p>
<pre><code>df.apply(lambda x: Counter(zip(x, x[1:])), axis = 1).sum().most_common(1)

[((2, 3), 3)]
</code></pre>
</div>
<span class="comment-copy">What does your current attempt give you?</span>
<span class="comment-copy">Your description would benefit from some more detail.</span>
<span class="comment-copy">could you explain me what <code>c = Counter(zip(data, data[1:]))</code> is doing?</span>
<span class="comment-copy">ok, added some explanation. hope that helps.</span>
<span class="comment-copy">ok, thanks, accepted. by the way, can it be modified for the case 3 consecutive numbers?</span>
<span class="comment-copy">thanks. and sure: <code>zip(data, data[1:], data[2:])</code>.</span>
<span class="comment-copy">Okay. However I do not want use <code>(5, 5)</code> as two consecutive numbers as they are in two different lists (a and b)</span>
<span class="comment-copy">Thanks. Why do you use .sum()?</span>
<span class="comment-copy">@skydriver see the output of ` np.apply_along_axis(lambda x: Counter(zip(x, x[1:])), 1, data)`</span>
