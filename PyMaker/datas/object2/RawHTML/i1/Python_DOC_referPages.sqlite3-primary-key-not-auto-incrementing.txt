<div class="post-text" itemprop="text">
<p>I tried writing this code hoping that it will auto increment, but somehow it is not working and the output entries in id column are set to 'None'.I have also tried other answers but none of them are working.Please help if possible.</p>
<p>Here is the code:</p>
<pre><code>import sqlite3

def connect():
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS book (id INTEGER PRIMARY KEY,title text,author text,year int,isbn int)")
    conn.commit()
    conn.close()

def insert(title,author,year,isbn):
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("INSERT INTO book VALUES (?,?,?,?)",(title,author,year,isbn))
    conn.commit()
    conn.close()

def view():
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("SELECT * FROM book ")
    rows=cur.fetchall()
    conn.close()
    return rows

connect()
insert("sample","abc",2003,123456)
insert("sample2","def",2003,123457)
print(view())
</code></pre>
<p>This is the output:</p>
<pre><code>[(None, 'sample', 'abc', 2003, 123456), (None, 'sample2', 'def', 2003, 123457)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First SQLLITE recommends that you not use auto increment as your primary, you should select fields that will define a unique record whenever possible. Second the data type you are passing in is “int” and requires the autoincrement keyword following primary key.  Third you should avoid using * in your select statement. If you simply need a row number back you can query the fields you need and add in the standard field “rowid”. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Answer Edited</strong>: Thanks to Shawn's comment I went back to play with the code and hunt down the problem It is true that AUTOINCREMENT is not needed and as such is not the problem (I learned something new about sqlite).</p>
<p>The following code does work. Notice, since you're not supplying data to all columns in the table that you must specify which columns you are inserting data into in your insert statement. I have removed the unnecessary AUTOINCREMENT, and modified the insert statement to work correctly.</p>
<p>Also note: As others have stated, you should not use * wild card for selecting all columns in production code, but instead list all columns individual.</p>
<pre><code>import sqlite3

def connect():
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS book (id INTEGER PRIMARY KEY,title text,author text,year int,isbn int)")
    conn.commit()
    conn.close()

def insert(title,author,year,isbn):
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("INSERT INTO book (title, author, year, isbn) VALUES (?,?,?,?)",(title,author,year,isbn))
    conn.commit()
    conn.close()

def view():
    conn=sqlite3.connect("books.db")
    cur=conn.cursor()
    cur.execute("SELECT * FROM book ")
    rows=cur.fetchall()
    conn.close()
    return rows

connect()
insert("sample","abc",2003,123456)
insert("sample2","def",2003,123457)
print(view())
</code></pre>
<p>The produced output is:</p>
<pre><code>[(1, 'sample', 'abc', 2003, 123456), (2, 'sample2', 'def', 2003, 123457)]
</code></pre>
</div>
<span class="comment-copy"><code>cur.execute("CREATE TABLE IF NOT EXISTS book (id INTEGER PRIMARY KEY AUTOINCREMENT,title text,author text,year int,isbn int)")</code>. Also it's a good practice to state what values you're inserting so <code>cur.execute("INSERT INTO book (title, author, year, isbn) VALUES (?,?,?,    ?)",(title,author,year,isbn))</code></span>
<span class="comment-copy">Your posted table definition and insert statements should cause sqlite to automatically assign values to the id column. Are you prehaps using a database with a different table definition? Can be easy to do with that <code>IF NOT EXISTS</code> hiding it. Maybe <code>INT PRIMARY KEY</code> instead?</span>
<span class="comment-copy">The problem is fixed now. instead of using <code>IF NOT EXISTS</code> , I used <code>DROP TABLE</code> first and then created table again using <code>CREATE TABLE</code> . Thanks for the suggestions.</span>
<span class="comment-copy">It's an unfortunate, very common misconception that you need <code>AUTOINCREMENT</code> with an <code>INTEGER PRIMARY KEY</code> column to automatically assign rowid numbers. The keyword actually just changes how those numbers are calculated, and tables work fine without it (and usually should not have it for better performance): <a href="https://www.sqlite.org/autoinc.html" rel="nofollow noreferrer">sqlite.org/autoinc.html</a></span>
<span class="comment-copy">You don't need <code>AUTOINCREMENT</code> with sqlite, btw: <a href="https://www.sqlite.org/autoinc.html" rel="nofollow noreferrer">sqlite.org/autoinc.html</a> has the details.</span>
