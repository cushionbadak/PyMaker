<div class="post-text" itemprop="text">
<p>I have a list of string. </p>
<pre><code>list=['cretd_dt','rcvd_dt']
</code></pre>
<p>The actual code is:</p>
<pre><code>query = table.update().values(
        cretd_dt = Join_All_Dates.iloc[index]['cretd_dt'],
        rcvd_dt= Join_All_Dates.iloc[index]['rcvd_dt'])
</code></pre>
<p>I want the <code>cretd_dt=</code> and <code>rcvd_dt=</code> to be used from inside the list. That is if the list has a,b, then inside the query it must be .<code>values( a=join[index]['a'])</code> etc.  </p>
<pre><code>list=['a','b']
query = table.update().values(
            a = Join_All_Dates.iloc[index]['a'],
            b= Join_All_Dates.iloc[index]['b'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Build a <code>dict</code> and unpack it as arguments to <code>values()</code>:</p>
<pre><code># Don't shadow builtins such as list
the_list = ['a', 'b']
query = table.update().values(**{k: Join_All_Dates.iloc[index][k] for k in the_list})
</code></pre>
<p>though you don't need to unpack, since <code>Update.values()</code> accepts a <code>dict</code> as a positional argument directly as well.</p>
</div>
<span class="comment-copy">Why can't you use index of list for that? like <code>a = Join_All_Dates.iloc[index]list[0],  b= Join_All_Dates.iloc[index]list[1])</code> will work if the size of the list going to remain same. And <code>list</code> is not supposed to use as a variable name in python.</span>
<span class="comment-copy">the list size can vary. and in a=Join_All_Dates, variable a can also change. it can be b or c</span>
<span class="comment-copy">does it work if there are more than 2 elements in the list?</span>
<span class="comment-copy">It'll work for any amount of items (as supported by your DBMS etc.) The dict-comprehension simply iterates over the list.</span>
