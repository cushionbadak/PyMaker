<div class="post-text" itemprop="text">
<p>I'm attempting to create a new column in a dataframe that spits out a 1 when two conditions are met: (1) The cell in neighboring column is greater than 0 and (2) The cell in the neighboring column, one row preceding is also greater than 0. Here is the code:</p>
<pre><code>def rule(x, y):
if x &gt; 0 and y &gt; 0:
     return 1
else:
     return 0

df = pd.DataFrame({ 'c1':[ 'high' ,'high', 'low', 'low'], 'c2': [0, 23, 17, 4]})
df['new'] = df.apply(lambda x: rule(x['c2'], x['c2']), axis =  1)
df.head()
</code></pre>
<p>I'm not sure how the array references in the lambda function should be written but this is more or less what I think the lambda function would look like.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>shift</code> functionality to construct a temp column and then use <code>apply</code> like this:</p>
<pre><code>df = pd.DataFrame({ 'c1':[ 'high' ,'high', 'low', 'low'], 'c2': [0, 23, 17, 4]})
df['c2_shifted'] = df['c2'].shift(1)

def rule(row):
    return row['c2']&gt;0 and row['c2_shifted'] &gt; 0

df['new'] = df.apply(rule, axis =  1)

</code></pre>
</div>
<span class="comment-copy">Thanks, but that still isn't quite what I'm looking for. df['new'] should return True only when two consecutive rows in 'C2' are positive.</span>
<span class="comment-copy">Yes. So its is True for rows 2, 3 and False for rows 0, 1. What's the problem?</span>
<span class="comment-copy">Oh yes, I see now. That should work. Thank you!</span>
