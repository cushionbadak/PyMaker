<div class="post-text" itemprop="text">
<p>this is my first attempt building something non-web and really touching <em>'logic-coding'</em>. So this question may come across as amateur-ish.</p>
<p>Anyways, please take a look at this god awful dictionary below:  </p>
<pre><code>  Messy_Dict=
    {
        'name': "['\\r\\n                  NASDAQ: BKEP\\r\\n          ']", 
        'underlying': "['1.12']", 
        'strike_prices_list': ["['2.50'", " '5.00'", " '7.50']"], 
        'call_bid': ["['\\r\\n0.05            '", " '\\r\\n0.00            '", " '\\r\\n0.00            ']"], 
        'put_ask': ["['\\r\\n2.10            '", " '\\r\\n4.50            '", " '\\r\\n7.00            ']"]
    }
</code></pre>
<p>Okay so what I want to do is clean up the unneccessary sub-strings within each dictionary value to get something like this:</p>
<pre><code>Clean_Dict=
    {
        'name': "BKEP", 
        'underlying': "1.12", 
        'strike_prices_list': ["2.50", "5.00", "7.50"], 
        'call_bid': ["0.05", "0.00", "0.00"], 
        'put_ask': ["2.10", "4.50", "7.00"]
    }
</code></pre>
<p>I have managed to get from <em>Messy_Dict</em> to <em>Clean_Dict</em> but I used very barbaric means to do so. I will just say that it included a for loop and multiple strip(), replace('', '') methods. And it pains me to look at that block of code in my .py file. </p>
<p>So I guess, is there a more elegant method in performing the desired task of converting Messy_Dict to Clean_Dict? I feel as if I'm missing something here in my fundamentals. Any response would be great, thanks!</p>
<p><strong>Edit:</strong></p>
<pre><code>def parse(self, response):
        strike_prices_main = response.css('.highlight , .aright .strike-col').css('::text').extract()
        if not strike_prices_main:
            pass
        else:
            name = response.css('#instrumentticker::text').extract()
            strike_prices_list = response.css('.aright .strike-col').css('::text').extract()
            call_bid = response.css('.aright td:nth-child(5)').css('::text').extract()
            put_ask = response.css('.aright td:nth-child(14)').css('::text').extract()
            underlying = response.css('.pricewrap .bgLast').css('::text').extract()
            file.write('%s|%s|%s|%s|%s\n'%(name,underlying,strike_prices_list,call_bid,put_ask))
</code></pre>
<p>Using spiders to crawl!</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe like this:</p>
<pre><code>import re
Messy_Dict= \
{
    'name': "['\\r\\n                  NASDAQ: BKEP\\r\\n          ']", 
    'underlying': "['1.12']", 
    'strike_prices_list': ["['2.50'", " '5.00'", " '7.50']"], 
    'call_bid': ["['\\r\\n0.05            '", " '\\r\\n0.00            '", " '\\r\\n0.00            ']"], 
    'put_ask': ["['\\r\\n2.10            '", " '\\r\\n4.50            '", " '\\r\\n7.00            ']"]
}
regexstr = "\\\\(r|n)|\s|\[|\]|\'|NASDAQ:"

dict_clean = {}
for k, v in Messy_Dict.items():
    if isinstance(v, list):
        list_clean = []
        for el in v:            
            el_clean = re.sub(regexstr, "", el)
            list_clean.append(el_clean)
        dict_clean[k] = list_clean
    else:
        dict_clean[k] = re.sub(regexstr, "", v)
dict_clean
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expressions.</p>
<p>Example:</p>
<pre><code>import re

messy_dict = {
    'name': "['\\r\\n                  NASDAQ: BKEP\\r\\n          ']", 
    'underlying': "['1.12']", 
    'strike_prices_list': ["['2.50'", " '5.00'", " '7.50']"], 
    'call_bid': ["['\\r\\n0.05            '", " '\\r\\n0.00            '", " '\\r\\n0.00            ']"], 
    'put_ask': ["['\\r\\n2.10            '", " '\\r\\n4.50            '", " '\\r\\n7.00            ']"]
}

for key in messy_dict:
    stripfunc = lambda x: re.sub('[^\d\.]', '', str(x))
    if type(messy_dict[key]) is list:
        messy_dict[key] = [stripfunc(x) for x in messy_dict[key]]
    else:
        messy_dict[key] = stripfunc(messy_dict[key])

print(messy_dict)
</code></pre>
<p>Explanation: [^ ] matches anything that is NOT in the set. \d is for numeric values and the backslash escapes the dot. Using str(val) to make strings out of the lists.</p>
<p>Output: <code>{'name': '', 'underlying': '1.12', 'strike_prices_list': ['2.50', '5.00', '7.50'], 'call_bid': ['0.05', '0.00', '0.00'], 'put_ask': ['2.10', '4.50', '7.00']}</code></p>
<p>Edit: just noticed that you also want to keep the dot. Updated the code.</p>
</div>
<span class="comment-copy">have you tried iterating the keys, and for each value use regex to replace all offending characters?</span>
<span class="comment-copy">the right question in this case is where "messy" dict comes from. It looks very much like JSON that was abused somehow to become this...Probably json response that was not handled properly?</span>
<span class="comment-copy">How many for loops and regex statements would it take?</span>
<span class="comment-copy">@buran i was scraping Yahoo Finance to get some data! And gosh, this got printed on my cmd prmt hahaha ouch</span>
<span class="comment-copy">@LowaiisTan, So my guess is right and best approach would be to show your code that query Yahoo finance and get help with it. As it stands this is XY problem. You can get perfect formated valid JSON response from yahoo finance</span>
<span class="comment-copy">Oh wow!! haha thats 50% of my code quantity...</span>
<span class="comment-copy">take my upvote!</span>
<span class="comment-copy">Hmmmm, have u tried your code?</span>
<span class="comment-copy">Woops, I haven't. Fixed.</span>
<span class="comment-copy">Would prefer a bit more accuracy in exchange for less concision!</span>
<span class="comment-copy">Huh, it generates the result you asked for?</span>
<span class="comment-copy">Woops, didnt see the edit!</span>
