<div class="post-text" itemprop="text">
<p>With Octave I am able to plot arrays to the terminal, for example, plotting an array with values for the function <code>x^2</code> gives this output in my terminal:</p>
<pre><code>   10000 ++---------+-----------+----------+-----------+---------++
         ++         +           +          +           +         ++
         |+         :           :          :           :         +|
         |++        :           :          :           :        ++|
         | +        :           :          :           :        + |
         | ++       :           :          :           :       ++ |
    8000 ++.+..................................................+.++
         |  ++      :           :          :           :      ++  |
         |   ++     :           :          :           :     ++   |
         |    +     :           :          :           :     +    |
         |    ++    :           :          :           :    ++    |
         |     +    :           :          :           :    +     |
    6000 ++....++..........................................++....++
         |      ++  :           :          :           :  ++      |
         |       +  :           :          :           :  +       |
         |       ++ :           :          :           : ++       |
         |        ++:           :          :           :++        |
    4000 ++........++..................................++........++
         |          +           :          :           +          |
         |          ++          :          :          ++          |
         |          :++         :          :         ++:          |
         |          : ++        :          :        ++ :          |
         |          :  ++       :          :       ++  :          |
    2000 ++.............++........................++.............++
         |          :    ++     :          :     ++    :          |
         |          :     +++   :          :   +++     :          |
         |          :       ++  :          :  ++       :          |
         |          :        +++:          :+++        :          |
         +          +          ++++      ++++          +          +
       0 ++---------+-----------+----------+-----------+---------++
         0        20000       40000      60000       80000     100000
</code></pre>
<p>Is there some way I can do something similar in Python, specifically with matplotlib? bashplotlib seems to offer some of this functionality but appears to be quite basic compared to Octave's offering.</p>
</div>
<div class="post-text" itemprop="text">
<p>As few answers already suggested the <code>gnuplot</code> is a great choice.</p>
<p>However, there is no need to call a gnuplot subprocess, it might be much easier to use a python <code>gnuplotlib</code> library.</p>
<p>Example (from: <a href="https://github.com/dkogan/gnuplotlib" rel="noreferrer">https://github.com/dkogan/gnuplotlib</a>):</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import gnuplotlib as gp

&gt;&gt;&gt; x = np.linspace(-5,5,100)

&gt;&gt;&gt; gp.plot( x, np.sin(x) )
[ graphical plot pops up showing a simple sinusoid ]


&gt;&gt;&gt; gp.plot( (x, np.sin(x), {'with': 'boxes'}),
...          (x, np.cos(x), {'legend': 'cosine'}),

...          _with    = 'lines',
...          terminal = 'dumb 80,40',
...          unset    = 'grid')

[ ascii plot printed on STDOUT]
   1 +-+---------+----------+-----------+-----------+----------+---------+-+
     +     +|||+ +          +         +++++   +++|||+          +           +
     |     |||||+                    +     +  +||||||       cosine +-----+ |
 0.8 +-+   ||||||                    +     + ++||||||+                   +-+
     |     ||||||+                  +       ++||||||||+                    |
     |     |||||||                  +       ++|||||||||                    |
     |     |||||||+                +        |||||||||||                    |
 0.6 +-+   ||||||||               +         +||||||||||+                 +-+
     |     ||||||||+              |        ++|||||||||||                   |
     |     |||||||||              +        |||||||||||||                   |
 0.4 +-+   |||||||||              |       ++||||||||||||+                +-+
     |     |||||||||             +        +||||||||||||||                  |
     |     |||||||||+            +        |||||||||||||||                  |
     |     ||||||||||+           |       ++||||||||||||||+           +     |
 0.2 +-+   |||||||||||          +        |||||||||||||||||           +   +-+
     |     |||||||||||          |        +||||||||||||||||+          |     |
     |     |||||||||||         +         ||||||||||||||||||         +      |
   0 +-+   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   +-+
     |       +        ||||||||||||||||||+         |       ++||||||||||     |
     |       |        +|||||||||||||||||          +        |||||||||||     |
     |       +        ++||||||||||||||||          |        +||||||||||     |
-0.2 +-+      +        |||||||||||||||||          +        |||||||||||   +-+
     |        |        ++||||||||||||||+           |       ++|||||||||     |
     |        +         |||||||||||||||            +        ++||||||||     |
     |         |        +||||||||||||||            +         |||||||||     |
-0.4 +-+       +        ++||||||||||||+             |        +||||||||   +-+
     |          +        |||||||||||||              +        |||||||||     |
     |          |        +|||||||||||+               +       ++|||||||     |
-0.6 +-+        +        ++||||||||||                |        +|||||||   +-+
     |           +        |||||||||||                +        ++||||||     |
     |           +        +|||||||||+                 +        |||||||     |
     |            +       ++||||||||                  +       +++|||||     |
-0.8 +-+          +      + ++||||||+                   +      + +|||||   +-+
     |             +    +   +||||||                     +    +  ++||||     |
     +           +  +  ++   ++|||++     +           +   ++  +  + ++|||     +
  -1 +-+---------+----------+-----------+-----------+----------+---------+-+
    -6          -4         -2           0           2          4           6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @Benjamin Barenblat pointed out, there is currently no way using matplotlib. If you really want to use a pure python library, you may check <a href="http://www.algorithm.co.il/blogs/ascii-plotter/" rel="nofollow noreferrer">ASCII Plotter</a>. However, as I commented above, I would use <a href="http://www.gnuplot.info/" rel="nofollow noreferrer">gnuplot</a> as suggested e.g. in <a href="https://stackoverflow.com/q/123378/2870069">this</a> question.</p>
<p>To use gnuplot directly from python you could either use <a href="http://gnuplot-py.sourceforge.net/" rel="nofollow noreferrer">Gnuplot.py</a> (I haven't tested this yet) or use gnuplot with the scripting interface. Latter can be realised (as suggested <a href="http://www.husser.de/2013/02/28/python-and-gnuplot/" rel="nofollow noreferrer">here</a>) like:</p>
<pre class="lang-py prettyprint-override"><code>import numpy as np
x=np.linspace(0,2*np.pi,10)
y=np.sin(x)
import subprocess
gnuplot = subprocess.Popen(["/usr/bin/gnuplot"], 
                           stdin=subprocess.PIPE)
gnuplot.stdin.write("set term dumb 79 25\n")
gnuplot.stdin.write("plot '-' using 1:2 title 'Line1' with linespoints \n")
for i,j in zip(x,y):
   gnuplot.stdin.write("%f %f\n" % (i,j))
gnuplot.stdin.write("e\n")
gnuplot.stdin.flush()
</code></pre>
<p>This gives a plot like</p>
<pre><code>    1 ++--------+---A******---------+--------+---------+---------+--------++
      +         + **      +A*       +        +         +      Line1 **A*** +
  0.8 ++        **           *                                            ++
      |       **              **                                           |
  0.6 ++     A                  *                                         ++
      |     *                    *                                         |
  0.4 ++   *                                                              ++
      |  **                       A                                        |
  0.2 ++*                          *                                      ++
      |*                            *                                      |
    0 A+                             *                              A     ++
      |                               *                            *       |
 -0.2 ++                               *                          *       ++
      |                                 A*                      **         |
 -0.4 ++                                  *                    *          ++
      |                                    **                 *            |
 -0.6 ++                                     *               A            ++
      |                                       *            **              |
 -0.8 ++                                                 **               ++
      +         +         +         +        + A****** **        +         +
   -1 ++--------+---------+---------+--------+--------A+---------+--------++
      0         1         2         3        4         5         6         7
</code></pre>
<p>Some styling options can be found e.g. <a href="http://people.duke.edu/~hpgavin/gnuplot.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also try Sympy's <code>TextBackend</code> for plots, see <a href="http://docs.sympy.org/latest/modules/plotting.html" rel="noreferrer">doc</a>. Or just use <code>textplot</code>.</p>
<p>Here it is an example</p>
<pre><code>from sympy import symbols
from sympy.plotting import textplot
x = symbols('x')
textplot(x**2,0,5)
</code></pre>
<p>with the output</p>
<pre><code>24.0992 |                                                      / 
        |                                                    ..  
        |                                                   /    
        |                                                 ..     
        |                                               ..       
        |                                              /         
        |                                            ..          
        |                                          ..            
12.0496 | ---------------------------------------..--------------
        |                                     ...                
        |                                   ..                   
        |                                 ..                     
        |                              ...                       
        |                           ...                          
        |                        ...                             
        |                   .....                                
        |              .....                                     
      0 | .............                                          
          0                      2.5                        5    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just need a quick overview and your x-axis is equally spaced, you could also just make some quick ascii output yourself.</p>
<pre><code>In [1]: y = [20, 26, 32, 37, 39, 40, 38, 35, 30, 23, 17, 10,  5,  2,  0,  1,  3,
   ....:         8, 14, 20]

In [2]: [' '*(d-1) + '*' for d in y]
Out[2]: 
['                   *',
 '                         *',
 '                               *',
 '                                    *',
 '                                      *',
 '                                       *',
 '                                     *',
 '                                  *',
 '                             *',
 '                      *',
 '                *',
 '         *',
 '    *',
 ' *',
 '*',
 '*',
 '  *',
 '       *',
 '             *',
 '                   *']
</code></pre>
<p>If your <code>y</code>-data are not integers, offset and scale them so they are in a range that works. For example, the above numbers are basically <code>( sin(x)+1 )*20</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just released <a href="https://github.com/nschloe/termiplot/" rel="nofollow noreferrer">termiplot</a> which should hopefully make your life a lot easier here. For line plots, you need to install gnuplot and termiplot,</p>
<pre><code>pip3 install termiplot
</code></pre>
<p>After this, line plots are generated with just</p>
<pre><code>import termiplot as tp
import numpy

x = numpy.linspace(0, 2 * numpy.pi, 10)
y = numpy.sin(x)

fig = tp.figure()
fig.plot(x, y, label="data", width=50, height=15)
fig.show()
</code></pre>
<pre><code>    1 +---------------------------------------+
  0.8 |    **     **                          |
  0.6 |   *         **           data ******* |
  0.4 | **                                    |
  0.2 |*              **                      |
    0 |                 **                    |
      |                                   *   |
 -0.2 |                   **            **    |
 -0.4 |                     **         *      |
 -0.6 |                              **       |
 -0.8 |                       **** **         |
   -1 +---------------------------------------+
      0     1    2     3     4     5    6     7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you’re constrained to matplotlib, the answer is currently no.  Currently, matplotlib has many <a href="https://github.com/matplotlib/matplotlib/tree/350320f03f41988d17933b8787c80e941665fff0/lib/matplotlib/backends" rel="noreferrer">backends</a>, but ASCII is not one of them.</p>
</div>
<div class="post-text" itemprop="text">
<p>See also: <a href="https://github.com/kroitor/asciichart" rel="nofollow noreferrer">asciichart</a> (implemented in Node.js, Python, Java, Go and Haskell)</p>
<p><a href="https://i.stack.imgur.com/jz9a0.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/jz9a0.png"/></a>
<a href="https://i.imgur.com/rRhfnPG.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.imgur.com/rRhfnPG.png"/></a></p>
</div>
<span class="comment-copy">Do you mind using gnuplot controlled with python?</span>
<span class="comment-copy">@Jakob I would be interested in how that works.</span>
<span class="comment-copy">I have not played with gnuplot's ascii mode, but  from this page it looks similar to what you want: <a href="http://www.cs.hmc.edu/~vrable/gnuplot/using-gnuplot.html" rel="nofollow noreferrer">cs.hmc.edu/~vrable/gnuplot/using-gnuplot.html</a>  If you want to use gnuplot from python, you could have python write a script file for gnuplot and then use subprocess to call gnuplot on the script file that you just wrote. Not too elegant, but it should work.</span>
<span class="comment-copy">The last line should be replaced with: <code>gnuplot.stdin.write("exit\n"); gnuplot.stdin.flush(); gnuplot.wait()</code></span>
<span class="comment-copy">In Python 3, it is necessary to wrap the strings passed to <code>gnuplot.stdin</code> in <i>bytes</i>, like this: <code>gnuplot.stdin.write(bytes("set term dumb 79 25\n", "utf-8"))</code></span>
<span class="comment-copy">You can also just use <code>gnuplot.stdin.write(b"set term dumb 79 25\n")</code> to encode the string as bytes — tested at MacOS High Sierra 10.3.3 using in interactive Ipython terminal and Python 3.6.</span>
<span class="comment-copy">This is sweet, but how would I plot a timeseries with this (or an arbitrary list of values) rather than a parametric function? Does sympy/texplot support such a thing?</span>
<span class="comment-copy">I don't know, I have never used that way. Probably, there is a workaround defining a function that returns the values that one has as "time series".</span>
<span class="comment-copy">This reminds me of my first C++ class plotting diamonds :D</span>
