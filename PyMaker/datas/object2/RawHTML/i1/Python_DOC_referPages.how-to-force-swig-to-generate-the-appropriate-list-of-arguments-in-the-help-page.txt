<div class="post-text" itemprop="text">
<p>The <code>help</code> page of a module generated with <code>SWIG</code> is not quite helpful. In fact, it doesn't even list the arguments of each function.</p>
<pre class="lang-py prettyprint-override"><code>Help on module example:

NAME
    example

FILE
    /home/anon/example.py

DESCRIPTION
    # This file was automatically generated by SWIG (http://www.swig.org).
    # Version 3.0.12
    #
    # Do not make changes to this file unless you know what you are doing--modify
    # the SWIG interface file instead.

FUNCTIONS
    fact(...)

    get_time(...)

    my_mod(...)

DATA
    cvar = &lt;Swig global variables&gt;

(END)
</code></pre>
<p><strong>Question:</strong> is there a way to tell <code>swig</code> --with some option-- to <em>at least</em> include the exact list of named arguments of each function?</p>
<p>I would like to get at least something as follows:</p>
<pre class="lang-py prettyprint-override"><code>...
fact(n)
...
my_mod(x, y)
...
</code></pre>
<p>A higher-quality level of documentation in general would also be welcome.</p>
<p>I know that I can obtain this result if I rename an original function <code>foo</code> as <code>_foo</code> and then I manually define a new <code>foo()</code>. But is there some other, systematic and built-in, approach that achieves the same purpose? </p>
<hr/>
<p>This is the list of commands I have executed, taken from this <a href="http://www.swig.org/tutorial.html" rel="nofollow noreferrer">tutorial</a>:</p>
<pre><code> ~$ swig -python example.i
 ~$ gcc -fPIC -c example.c example_wrap.c \
        -I/usr/include/python2.7
 ~$ ld -shared example.o example_wrap.o -o _example.so 
</code></pre>
<p>File <code>example.c</code>:</p>
<pre class="lang-c prettyprint-override"><code> /* File : example.c */

 #include &lt;time.h&gt;
 double My_variable = 3.0;

 int fact(int n) {
     if (n &lt;= 1) return 1;
     else return n*fact(n-1);
 }

 int my_mod(int x, int y) {
     return (x%y);
 }

 char *get_time()
 {
     time_t ltime;
     time(&amp;ltime);
     return ctime(&amp;ltime);
 }
</code></pre>
<p>File <code>example.i</code>:</p>
<pre class="lang-c prettyprint-override"><code> /* example.i */
 %module example
 %{
 /* Put header files here or function declarations like below */
 extern double My_variable;
 extern int fact(int n);
 extern int my_mod(int x, int y);
 extern char *get_time();
 %}

 extern double My_variable;
 extern int fact(int n);
 extern int my_mod(int x, int y);
 extern char *get_time();
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="http://www.swig.org/Doc3.0/SWIGDocumentation.html#Python_nn65" rel="nofollow noreferrer">36.10 Docstring Features</a> in the SWIG documentation.</p>
<p>In particular, the <code>autodoc</code> feature works well with your example.  Just use:</p>
<pre><code>swig -python -features autodoc example.i
</code></pre>
<p>Sample output:</p>
<pre><code>&gt;&gt;&gt; import example
&gt;&gt;&gt; help(example)
Help on module example:

NAME
    example

DESCRIPTION
    # This file was automatically generated by SWIG (http://www.swig.org).
    # Version 3.0.12
    #
    # Do not make changes to this file unless you know what you are doing--modify
    # the SWIG interface file instead.

FUNCTIONS
    fact(n)
        fact(int n) -&gt; int

    get_time()
        get_time() -&gt; char *

    my_mod(x, y)
        my_mod(int x, int y) -&gt; int

DATA
    cvar = &lt;Swig global variables&gt;

FILE
    c:\example\example.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative is to use <code>doxy2swig.py</code>, see e.g. <a href="http://github.com/m7thon/doxy2swig" rel="nofollow noreferrer">http://github.com/m7thon/doxy2swig</a> </p>
<p>Header using doxygen <code>example.h</code></p>
<pre><code>#pragma once

extern double My_variable; ///&lt; My variable for something

/**
 * Factorial function
 *
 * @param n
 *
 * @return n!
 */
extern int fact(int n);

/**
 * Module function
 *
 * @param x
 * @param y
 *
 * @return
 */
extern int my_mod(int x, int y);

/**
 * Get the current time
 *
 *
 * @return string representation of time
 */
extern char *get_time();
</code></pre>
<p>Interface file <code>example.i</code></p>
<pre><code> %module example
 %{
 /* Put header files here or function declarations like below */
 #include "example.h"
 %}

 %include "documentation.i"

 %include "example.h"
</code></pre>
<p>To SWIG and compile, do the following. This can of course be setup nicely using automake or CMake if one prefers.</p>
<pre><code>doxygen -g
sed -i 's/GENERATE_XML           = NO/GENERATE_XML = YES/g' Doxyfile
python doxy2swig.py -c -a ./xml/index.xml documentation.i
swig -python example.i
gcc -fPIC -c example.c example_wrap.c -I/usr/include/python2.7
ld -shared example.o example_wrap.o -o _example.so
</code></pre>
<p>In Python, the documentation appears like</p>
<pre><code>In [1]: import example
In [2]: help(example.get_time)

Help on function get_time in module example:

get_time()
    Get the current time

    Returns
    -------
    string representation of time

        get_time() -&gt; char *
</code></pre>
<p>It generalizes to documentation for classes and it is quite flexible.</p>
</div>
<span class="comment-copy">Another option is to use doxygen to generate <code>.xml</code> output and use <code>doxy2swig.pl</code> to generate a comprehensive documentation, which can be included in your <code>.i</code> file. See e.g. <a href="https://github.com/m7thon/doxy2swig" rel="nofollow noreferrer">github.com/m7thon/doxy2swig</a></span>
<span class="comment-copy">@JensMunk please post it as an answer, possibly with a mcve, so that I can upvote your suggestion and it can be more visible.</span>
<span class="comment-copy">I will do that, it is pretty nice</span>
