<div class="post-text" itemprop="text">
<p>My LAMP server is centos 7.4 with Apache 2.4,PHP 5.4 and python 3.6.  </p>
<p>I am newbie to python,migrate from R to python just now. I need some python package to do statistics then deliver output to PHP.  </p>
<p>I reviewed lots of similar questions,the answers are around <code>exec()</code> | <code>passthru()</code> | <code>system()</code> | <code>shell_exec()</code>.They are dangerous commands, should not enabled in PHP.  </p>
<p>In the <a href="https://wiki.python.org/moin/IntegratingPythonWithOtherLanguages#PHP" rel="nofollow noreferrer">python official manual "Integrating Python With Other Languages"</a>,mentioned only 2 tools, <code>ppython</code> and <code>PHP "Serialize" in Python</code>.<br/>
<a href="https://github.com/liuzhen153/php-python" rel="nofollow noreferrer">ppython</a> seemed no longer maintained.but that's what I need,just like <code>Rserve</code> when I use <code>R</code>.</p>
<p>I also read <a href="https://www.quora.com/How-do-I-integrate-Python-script-into-PHP-script" rel="nofollow noreferrer">this post</a>:  </p>
<blockquote>
<p>Simple and standard solution is using Socket or Webservice(API)</p>
</blockquote>
<p>Now,How to run python script in PHP without using <code>exec()</code>,<code>system()</code>...(maybe socket communication) ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Everything is dangerous (even a fork) if you don't know how to use it. Well, you have several options :</p>
<ol>
<li><p><strong>Standard</strong> :  Running Python interpreter in PHP with <code>exec()</code> / <code>shell_exec()</code>, etc. Plus will be a small latency and ability to run Python compiled byte-code, so performance wins here.</p></li>
<li><p><strong>Non-standard</strong> : If you are concerned a lot about security issues at hand I suggest better to insert Python commands into some batch table and run these regularly with CRON scheduler. After execution, fetch results with PHP. In this way PHP / Python execution will be de-coupled and you will have a better control on How / When to execute Python scripts.</p></li>
<li><p><em><strong>Non-standard</strong> (Avoid at all costs)</em> : Your mentioned project is moved to GIT at <a href="https://github.com/liuzhen153/php-python" rel="nofollow noreferrer">php-python</a>. It simply starts a new Python <code>server</code> on port 21230 and waits for Python commands from a PHP scripts. Now, <strong>THIS solutions is a most dangerous one</strong>, because of additional opened port in web server, which is a big headache to admins and thus highly not recommended. </p></li>
<li><p>Last option is to question an assumption that Python <em>is needed at all</em> in web development of PHP. The more different languages in company IT farm - the harder it will be to maintain all sources and harder to beat time-to-market of new features / bugs fixing. So before considering execution of Python script(s), at first think about <strong>re-writing them to plain PHP</strong>.<br/><br/>You can do it <a href="https://gist.github.com/reusee/1035975" rel="nofollow noreferrer">automatically</a>, but these type of translators are very error-prone and incomplete - for example this one doesn't supports <code>imports</code>. (What the hell ? Python without imports is like a bread without a flour). Second option is to learn Python and re-write code at hand into PHP. Or simply get a customer requirements and code these into PHP. Everything that can be done in Python, can be done in PHP too (at least in web development perspective).</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Covert your python script to django REST-API then call it using CURL.</p>
</div>
<span class="comment-copy">You need to have one of these commands. If you're worried that somebody may do things using that command, have it on an another environment and use an API call to execute it.</span>
<span class="comment-copy">They are only dangerous if you don't know where the command they are executing is coming from. If you construct the command in your own program, it is no different from executing that command yourself from a console. And why should you not do that?</span>
<span class="comment-copy">I agree that those methods are dangerous, but only when you don't do it the right way. Some application passes user input into those methods without sanitizing, then it's dangerous. If you just execute your script then it's OK. Also make sure your python script is safe as well.</span>
<span class="comment-copy">Is there any <code>socket</code> solution?maybe socket better than port.</span>
<span class="comment-copy">Socket is just a fancy name of <code>IP + port</code> pair. And <b>NO</b>, you have to open some port with sockets -  thus a big potential security breach</span>
<span class="comment-copy">how about this post,<a href="https://www.quora.com/How-do-I-integrate-Python-script-into-PHP-script" rel="nofollow noreferrer">Simple and standard solution is using Socket or Webservice(API)</a></span>
<span class="comment-copy">With webservice you can solve a problem of additional port, because many WS uses standard http port. But still you are left with another security breach - if user can pass to webservice arbitrary Python code for execution - then you lost, because hacker can pass in something like <code>shutil.rmtree('C:\Windows\')</code>. So you are forced to a very limited set of Python commands execution (error-prone too) or to a <code>pre-defined</code> scripts in a web server folder which is no different from executing them directly with <code>exec()</code>. Result is that you gain nothing with webservices here.</span>
<span class="comment-copy">Does <code>API</code> automatically convert <code>data type</code> between python and php?</span>
<span class="comment-copy">You can send receive data as json,  so the parameter having datatype before converting it to json will be preserved after receiving the json data.</span>
