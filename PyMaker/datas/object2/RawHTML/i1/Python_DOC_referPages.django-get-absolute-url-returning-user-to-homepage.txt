<div class="post-text" itemprop="text">
<p>When a user creates a post using the CreateView I want it so when a user submits the Post, they then see the post they just made. But for some reason my <code>get_absolute_url()</code> is not working.</p>
<p>Prior to this I started to work on slugifying the Post and Category models and haven't been able to see if they work due to the fact <code>get_absolute_url</code> won't work.</p>
<p>Models:</p>
<pre><code>class Category(models.Model):
    title = models.CharField(max_length=200)
    colorcode = models.CharField(max_length=20, blank=True, null=True)
    description = models.TextField()
    image = models.ImageField(blank=True, null=True)
    slug = models.SlugField(unique=True)

    def __str__(self):
        return self.title

class Post(models.Model):
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, blank=True, null=True)
    image = models.ImageField(blank=True, null=True)
    live = models.BooleanField(default=False)
    slug = models.SlugField(unique=True)

    def publish(self):
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('post-detail', kwargs={'slug': self.slug})

def create_slug(instance, new_slug=None):
    slug = slugify(instance.title)
    if new_slug is not None:
        slug = new_slug
    qs = Post.objects.filter(slug=slug).order_by("-pk")
    exists = qs.exists()
    if exists:
        new_slug = "%s-%s" %(slug, qs.first().pk)
        return create_slug(instance, new_slug=new_slug)
    return slug

def pre_save_post_reciever(sender, instance, *args, **kwargs):
    if not instance.slug:
        instance.slug = create_slug(instance)


pre_save.connect(pre_save_post_reciever, sender=Post)
</code></pre>
<p>Views:</p>
<pre><code>class IndexView(ListView):
    model = Post
    queryset = Post.objects.filter(live=True)
    template_name = "public/index.html"

class PostEdit(object):
    model = Post
    fields = '__all__'
    success_url = '/'

class PostCreateView(LoginRequiredMixin, PostEdit, CreateView):
    fields = ['title', 'text', 'category', 'image']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

class PostUpdateView(LoginRequiredMixin, PostEdit, UpdateView):
    fields = ['title', 'text', 'category', 'image']
</code></pre>
<p>If anyone has any idea on how to fix this that would be great!</p>
</div>
<div class="post-text" itemprop="text">
<p>If behaves according to this definition:</p>
<pre><code>class PostEdit(object):
    model = Post
    fields = '__all__'
    success_url = '/'    # &lt;&lt;&lt;---
</code></pre>
<p>In your case <code>success_url</code> is not static and cannot be defined as attribute. You have to override <a href="https://docs.djangoproject.com/en/2.1/ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.get_success_url" rel="nofollow noreferrer">get_success_url</a> instead like that:</p>
<pre><code>def get_success_url(self):
     return self.get_object().get_absolute_url()
</code></pre>
<p>also have a look at this <a href="https://stackoverflow.com/questions/26897050/django-success-url-using-kwargs">answer</a>.</p>
<h1>upd</h1>
<p>If the redirect is that simple then, as Daniel Roseman mentioned, you don't need to specify <code>success_url</code> at all - what you want is the <a href="https://docs.djangoproject.com/en/2.1/topics/class-based-views/generic-editing/#model-forms" rel="nofollow noreferrer">default behavior</a>.</p>
<blockquote>
<p>You donâ€™t even need to provide a success_url for CreateView or UpdateView - they will use get_absolute_url() on the model object if available.</p>
</blockquote>
</div>
<span class="comment-copy">Actually, if <code>success_url</code> is not defined at all then the view will use the <code>get_absolute_url</code> of the model, which is what OP was expecting. So the quick solution is just to delete that line altogether.</span>
