<div class="post-text" itemprop="text">
<h3>Problem:</h3>
<p>I have a stream of numbers that are not evenly spaced as inputs and I need to find a sequence of numbers using the one above that return as many number as possible for the first sequence, but evenly spaced. </p>
<h3>Example:</h3>
<pre><code>stream = [1,4,9,11,12,17,18,25,30,33,34,41,44,49,57,65,73,81,89,90,97,100]
</code></pre>
<p>I need to find a sequence that contains as many numbers as possible that are evenly separated</p>
<p>For instance I know that I can find:</p>
<blockquote>
<p>1,9,17,25,33,41,49,57,65,75,81,89,97 </p>
</blockquote>
<p>that are all separated by 8.</p>
<p>How do I solve this problem in general?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def find_seq(lst):
    running = []
    done = []
    so_far = []
    for element in sorted(lst):
        still_running = []
        for run in running:
            d, m = divmod(element - run[0], run[2])
            if m == 0:
                if d == run[1]:
                    run[1] += 1
                    still_running.append(run)
                else:
                    done.append(run)
            else:
                still_running.append(run)
        running = still_running + [[previous, 2, element - previous] for previous in so_far]
        so_far.append(element)
    return max(done + running, key=lambda run: run[1])

start, length, step = find_seq([1,4,9,11,12,17,18,25,30,33,34,41,44,49,57,65,73,81,89,90,97,100])
</code></pre>
<p>For each pair of elements, we assume they start a sequence (with assumed length of 2 to begin with). For any new element, we check if it would fit into a sequence (or more) that we're tracking; if it would, but a value was skipped, the sequence is finished; otherwise, we increase the length of the sequence. All sequences will finish at the end of the input. Then it is an easy matter to see which sequence ran the longest.</p>
</div>
<span class="comment-copy">@Taegyung: That question presupposes a subsequence (a contiguous run of numbers); in this question, there are intervening elements.</span>
<span class="comment-copy">Is it a stream (as in infinite source) or just a finite sequence (as in a list or 1d array)? If it is an infinite source, and if the numbers are truly random, there are infinite number of answers -- you will be able to find evenly spaced sequences of every possible step-size. On the other hand, if it is just a finite list, the fact that the numbers are "random" probably becomes irrelevant to your requirement.</span>
<span class="comment-copy">It seems pretty clear to me from his example what he's talking about.  I expect that by "random", he means "arbitrary".</span>
