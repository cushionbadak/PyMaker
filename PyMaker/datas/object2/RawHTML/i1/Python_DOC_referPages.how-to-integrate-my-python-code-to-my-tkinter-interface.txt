<div class="post-text" itemprop="text">
<p>I have made a program where the user enter's a target number and 4 other numbers to make that target number. Right now I am having trouble to intergrate my tkinter interface to my code. So I am hoping that some one can help me</p>
<h1>Tkinter interface:</h1>
<pre><code>window = Tk()
window.title("target number solution")
Label(window,image='', bg="white") .grid(row=0, column=0, sticky=W)
Label(window, text="Enter target number:",bg="black", fg="white", font="none 12 bold").grid(row=1, column=0, sticky=N)
textentry = Entry(window, width=20, bg="white")
textentry.grid(row=2, column=0, sticky=N)


Label(window, text="Enter first number:",bg="black", fg="white", font="none 12 bold").grid(row=4, column=0, sticky=N)
textentry = Entry(window, width=20, bg="white")
textentry.grid(row=5, column=0, sticky=N)


Label(window, text="Enter second number:",bg="black", fg="white", font="none 12 bold").grid(row=6, column=0, sticky=N)
textentry = Entry(window, width=20, bg="white")
textentry.grid(row=7, column=0, sticky=N)


Label(window, text="Enter third number:",bg="black", fg="white", font="none 12 bold").grid(row=8, column=0, sticky=N)
textentry = Entry(window, width=20, bg="white")
textentry.grid(row=9, column=0, sticky=N)


Label(window, text="Enter fourth number:",bg="black", fg="white", font="none 12 bold").grid(row=10, column=0, sticky=N)
textentry = Entry(window, width=20, bg="white")
textentry.grid(row=11, column=0, sticky=N)


Button(window, text="Solve", width=6, command=solver).grid(row=12, column=0, sticky=N)
output = Text(window, width=60, height=10, wrap=WORD, background="white")
output.grid(row=13, column=0, columnspan=1, sticky=N)


window.mainloop()
</code></pre>
<p><a href="https://i.stack.imgur.com/EEYqp.jpg" rel="nofollow noreferrer"><img alt="This is what the interface looks like" src="https://i.stack.imgur.com/EEYqp.jpg"/></a></p>
<p>This is the code that needs to be linked with the tkinter interface:</p>
<pre><code>from itertools import permutations,combinations_with_replacement
numbers   = []
target    = int(input())
operators = ["+","-","*","/"]
groups    = ['X+X+X+X', 'X+X+(X+X)', 'X+(X+X)+X', '(X+X+X)+X', '(X+X)+X+X', 'X+(X+X+X)', '((X+X)+X)+X', 'X+(X+(X+X))', 'X+((X+X)+X)', '(X+X)+(X+X)', '(X+(X+X))+X']
seen      = set()
for values in permutations(numbers,len(numbers)):
    for operCombo in combinations_with_replacement(operators,len(numbers)-1):
        for oper in permutations(operCombo,len(numbers)-1):
            formulaKey = "".join(oper+values)
            if formulaKey in seen: continue # ignore variations on parentheses alone
            for pattern in groups:
                formula = "".join(o+p for o,p in zip([""]+list(oper), pattern.split("+")))
                formula = "".join(v+p for v,p in zip([""]+list(values),formula.split("X")))
                try:
                    if eval(formula) == target:
                        global Answer
                        Answer = formula,"=",target
                        print(formula,"=",target)
                        seen.add(formulaKey)
                        break
                except: pass
</code></pre>
<p>All suggestions will be grealty appriciated</p>
</div>
<div class="post-text" itemprop="text">
<p>You can store the values for each number in seperate <code>IntVar</code> variables, then get the values of these variables inside the <code>solver</code> function and perform all the operations that are in your second code. The code should be modularised with the use of a class containing functions that create the widgets and run the <code>solver</code> code. To read more about class-based declarations in Tkinter, read <a href="https://docs.python.org/3/library/tkinter.html#a-simple-hello-world-program" rel="nofollow noreferrer">this</a>.</p>
<pre><code>from tkinter import Tk, Frame, Label, Button, IntVar, Entry, Text, W, N, WORD, INSERT
from itertools import permutations,combinations_with_replacement



class Application(Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets() 


    def create_widgets(self):

        self.target_num = IntVar()
        self.num1 = IntVar()
        self.num2 = IntVar()
        self.num3 = IntVar()
        self.num4 = IntVar()       
        # self.title("target number solution")

        Label(self,image='', bg="white").grid(row=0, column=0, sticky=W)
        Label(self, text="Enter target number:", bg="black", fg="white", font="none 12 bold").grid(row=1, column=0, sticky=N)
        self.textentry1 = Entry(self, textvariable=self.target_num, width=20, bg="white")
        self.textentry1.grid(row=2, column=0, sticky=N)


        Label(self, text="Enter first number:",bg="black", fg="white", font="none 12 bold").grid(row=4, column=0, sticky=N)
        self.textentry2 = Entry(self, textvariable=self.num1, width=20, bg="white")
        self.textentry2.grid(row=5, column=0, sticky=N)


        Label(self, text="Enter second number:",bg="black", fg="white", font="none 12 bold").grid(row=6, column=0, sticky=N)
        self.textentry3 = Entry(self, textvariable=self.num2, width=20, bg="white")
        self.textentry3.grid(row=7, column=0, sticky=N)


        Label(self, text="Enter third number:",bg="black", fg="white", font="none 12 bold").grid(row=8, column=0, sticky=N)
        self.textentry3 = Entry(self, textvariable=self.num3, width=20, bg="white")
        self.textentry3.grid(row=9, column=0, sticky=N)


        Label(self, text="Enter fourth number:",bg="black", fg="white", font="none 12 bold").grid(row=10, column=0, sticky=N)
        self.textentry4 = Entry(self, textvariable=self.num4, width=20, bg="white")
        self.textentry4.grid(row=11, column=0, sticky=N)


        Button(self, text="Solve", width=6, command=self.solver).grid(row=12, column=0, sticky=N)
        self.output = Text(self, width=60, height=10, wrap=WORD, background="white")
        self.output.grid(row=13, column=0, columnspan=1, sticky=N)

    def solver(self):
        target = self.target_num.get()
        number1 = self.num1.get()
        number2 = self.num2.get()
        number3 = self.num3.get()
        number4 = self.num4.get()
        numbers = [number1, number2, number3, number4]
        operators = ["+","-","*","/"]
        groups    = ['X+X+X+X', 'X+X+(X+X)', 'X+(X+X)+X', '(X+X+X)+X', '(X+X)+X+X', 'X+(X+X+X)', '((X+X)+X)+X', 'X+(X+(X+X))', 'X+((X+X)+X)', '(X+X)+(X+X)', '(X+(X+X))+X']
        seen = set()
        for values in permutations(numbers,len(numbers)):
            for operCombo in combinations_with_replacement(operators,len(numbers)-1):
                for oper in permutations(operCombo,len(numbers)-1):
                    formulaKey = "".join(str(oper+values))
                    if formulaKey in seen: continue # ignore variations on parentheses alone
                    for pattern in groups:
                        formula = "".join(str(o)+str(p) for o,p in zip([""]+list(oper), pattern.split("+")))
                        formula = "".join(str(v)+str(p) for v,p in zip([""]+list(values),formula.split("X")))
                        try:
                            if eval(formula) == target:                              
                                Answer = formula,"=",target
                                print(formula,"=",target)
                                seen.add(formulaKey)
                                #insert value in output Textbox
                                self.output.insert(INSERT, Answer) 
                                self.output.insert(END, '\n') 
                                break
                        except: pass

root = Tk()
app = Application(master=root)
app.master.title("target number solution")
app.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A few things that you can change/try:</p>
<ul>
<li>Keep the "Entry" variables unique. Then extract each number using .get() command.</li>
<li><p>Use lambda in the command options of the Button as follows:</p>
<p>command = lambda: solver(num1, num2, num3, num4)</p></li>
<li><p>And if you want to display your returned number from 'solver', grid a Label in your tkinter window. Then use <code>Label.config(text="Your number here")</code> to show it in your tkinter window</p></li>
</ul>
</div>
<span class="comment-copy">I'm getting this error: <code>Traceback (most recent call last):   File "C:\Users\bob\Desktop\24 solutions test.py", line 6, in &lt;module&gt;     target_num = IntVar()   File "C:\Users\bob\AppData\Local\Programs\Python\Python37\lib\tkinter\__init__.py", line 502, in __init__     Variable.__init__(self, master, value, name)   File "C:\Users\bob\AppData\Local\Programs\Python\Python37\lib\tkinter\__init__.py", line 317, in __init__     self._root = master._root() AttributeError: 'NoneType' object has no attribute '_root'</code></span>
<span class="comment-copy">The code has been edited and fully tested. You can try it out.</span>
<span class="comment-copy">it works but in the output box it gets shown in this format:<code>(1+1+1)*8 = 248*(1+1+1) = 24</code> I want it that each solution is shown on separate lines</span>
<span class="comment-copy">ok, i've edited to include newline('\n') for every <code>Answer</code> added to the output box.</span>
<span class="comment-copy">nope it still doesn't work it still gets showm in the format that I mentioned</span>
