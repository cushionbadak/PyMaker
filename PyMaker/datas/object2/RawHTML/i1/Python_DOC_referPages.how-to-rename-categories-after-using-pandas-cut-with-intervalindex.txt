<div class="post-text" itemprop="text">
<p>I discretized a column in my dataframe using <code>pandas.cut</code> with bins created by <code>IntervalIndex.from_tuples</code>.</p>
<p>The cut works as intended however the categories are shown as the tuples I specified in the <code>IntervalIndex</code>. Is there any way to rename the categories into a different label e.g. (Small, Medium, Large)?</p>
<p>Example:</p>
<pre><code>bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])
pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)
</code></pre>
<p>The resulting categories will be:</p>
<pre><code>[NaN, (0, 1], NaN, (2, 3], (4, 5]]
Categories (3, interval[int64]): [(0, 1] &lt; (2, 3] &lt; (4, 5]]
</code></pre>
<p>I am trying to change <code>[(0, 1] &lt; (2, 3] &lt; (4, 5]]</code> into something like <code>1, 2 ,3</code> or <code>small, medium ,large</code>. </p>
<p>Sadly, the labels parameter arguments of pd.cut is ignored when using IntervalIndex.</p>
<p>Thanks!</p>
<p><strong>UPDATE:</strong></p>
<p>Thanks to @SergeyBushmanov I noticed that this issue only exist when trying to change category labels inside a dataframe (which is what I am trying to do). Updated example:</p>
<pre><code>In [1]: df = pd.DataFrame([0, 0.5, 1.5, 2.5, 4.5], columns = ['col1'])
In [2]: bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])
In [3]: df['col1'] = pd.cut(df['col1'], bins)
In [4]: df['col1'].categories = ['small','med','large']

In [5]: df['col1']

Out [5]:
0       NaN
1    (0, 1]
2       NaN
3    (2, 3]
4    (4, 5]
Name: col1, dtype: category
Categories (3, interval[int64]): [(0, 1] &lt; (2, 3] &lt; (4, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's say we have happened to have some data:</p>
<pre><code>bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])
x = pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)
</code></pre>
<p>You may try re-assigning categories like :</p>
<pre><code>In [7]: x.categories = [1,2,3]

In [8]: x   
Out[8]: 
[NaN, 1, NaN, 2, 3]
Categories (3, int64): [1 &lt; 2 &lt; 3]
</code></pre>
<p>or:</p>
<pre><code>In [9]: x.categories = ["small", "medium", "big"]                         

In [10]: x                                             
Out[10]: 
[NaN, small, NaN, medium, big]
Categories (3, object): [small &lt; medium &lt; big]
</code></pre>
<p><strong>UPDATE</strong>:</p>
<pre><code>df = pd.DataFrame([0, 0.5, 1.5, 2.5, 4.5], columns = ['col1'])
bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])
x = pd.cut(df["col1"].to_list(),bins)
x.categories = [1,2,3]
df['col1'] = x
df.col1
0    NaN
1      1
2    NaN
3      2
4      3
Name: col1, dtype: category
Categories (3, int64): [1 &lt; 2 &lt; 3]
</code></pre>
</div>
<span class="comment-copy">that only works if it is of type "Categories (3, object)". In my case, because of using the IntervalIndex, it is "Categories (3, interval[int64])"</span>
<span class="comment-copy">This works for <code>Categories (3, interval[int64])</code>, <code>Categories (3, int64)</code>, and <code>Categories (3, object)</code></span>
<span class="comment-copy">I am guessing  that I am assigning the column inside the dataframe wrong then?</span>
<span class="comment-copy">@YaserBaqi Please see the <b>UPDATE</b></span>
<span class="comment-copy">Great! The only thing is, I am guessing because of different versions, tolist() must be used instead of to_list(). Thank you!</span>
