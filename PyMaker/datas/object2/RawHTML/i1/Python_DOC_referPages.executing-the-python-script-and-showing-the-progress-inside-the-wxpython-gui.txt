<div class="post-text" itemprop="text">
<p>How we can run the python script inside the WXPython GUI and show the log.
I have tried but it is not running it instead it opens a cmd and runs there.
previosly I was just running the Python script from the command line and it do his work but the new requirement is not to open the command prompt instead a GUI should open and execute the main python scripts.
I am new to python also(the reason on doing in python to make it platform independent). </p>
<pre><code>`
import wx, os, logging, sys, subprocess

logger = logging.getLogger(__name__)

class WxTextCtrlHandler(logging.Handler):

   def __init__(self, ctrl):
       logging.Handler.__init__(self)
       self.ctrl = ctrl

   def emit(self, record):
       s = self.format(record) + '\n'
       wx.CallAfter(self.ctrl.WriteText, s)`


class WindowClass(wx.Frame):

   def __init__(self):
       TITLE = "wxPython Logging To A Control"
       wx.Frame.__init__(self, None, wx.ID_ANY, TITLE)
       panel = wx.Panel(self, wx.ID_ANY)
       log = wx.TextCtrl(panel, wx.ID_ANY, size=(300,200), style = wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL)
       py = os.path.join(os.getcwd(), 'test1.py')
       log = subprocess.call([sys.executable, py])
       sizer = wx.BoxSizer(wx.VERTICAL)
       sizer.Add(log, 1, wx.ALL|wx.EXPAND, 5)
       panel.SetSizer(sizer)
       handler = WxTextCtrlHandler(log)
       logger.addHandler(handler)
       #self.Centre
       FORMAT = "%(asctime)s %(levelname)s %(message)s"
       handler.setFormatter(logging.Formatter(FORMAT))
       logger.log(1,"More? click again!")
       label = wx.StaticText(panel, label = "Hello World", pos = (100,50))
       self.Show()

app = wx.App(False)
WindowClass()
app.MainLoop()`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have never used <code>logging</code> but I suppose that you want something like below:<br/>
You will need to use <code>subprocess.Popen</code> rather than <code>subprocess.call</code> and then <code>poll</code> the results.<br/>
If the Gui is to remain "Active" you will also need to call <code>Yield</code> because you will be in a loop, so the wx <code>MainLoop</code> will be effectively frozen out.    </p>
<p><strong>Main Program</strong></p>
<pre><code>import wx
import subprocess
from signal import SIGKILL
import os

class MyFrame(wx.Frame):

    def __init__(self, parent, id=-1, title='External program test',
                 pos=wx.DefaultPosition, size=(600, 600)):
        wx.Frame.__init__(self, parent, id, title, pos, size)
        self.text1 = wx.TextCtrl(self, -1, '', wx.DefaultPosition, wx.Size(500,500),
                            wx.NO_BORDER | wx.TE_MULTILINE)
        stop_button = wx.Button(self, wx.ID_ANY, "&amp;Stop", pos=(400,520))
        self.Bind(wx.EVT_BUTTON, self.OnStop)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Show()
        #Call python with -u for unbuffer I/O
        p = subprocess.Popen(["python", "-u", "testp.py"], stdout=subprocess.PIPE, bufsize=-1)
        self.pid = p.pid
        #Poll process for output
        while p.poll() is None:
            x = p.stdout.readline().decode() #decode bytes but don't strip linefeeds
            self.text1.write(x)
            wx.GetApp().Yield() # Yield to MainLoop for interactive Gui
        self.text1.write("\nProcess has ended")

    def OnStop(self, event):
        try:
            os.kill(int(self.pid), SIGKILL)
            self.text1.write("\nProcess killed")
        except:
            self.text1.write("\nProcess has ended")

    def OnClose(self, event):
        self.Destroy()

if __name__ == '__main__':
    app = wx.App()
    frame = MyFrame(None)
    app.MainLoop()
</code></pre>
<p><strong>Called program</strong></p>
<pre><code>import time
counter = 0
while counter &lt; 40:
    print ("Counter:",counter)
    counter += 1
    time.sleep(0.5)
</code></pre>
<p><strong>Result</strong>
<a href="https://i.stack.imgur.com/rQcNo.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/rQcNo.png"/></a></p>
</div>
<span class="comment-copy">It worked for me... but while the subprocess.Popen runs, in the windows title it shows "External program test (Not Responding)" untill the execution stops and the cursor loading icon appears in the GUI.</span>
<span class="comment-copy">@amitkaushik You will have to edit your question and show the code that you are running, before I could comment or are you saying that that happens when you run my code. Perhaps mention the OS you are running on as well.</span>
