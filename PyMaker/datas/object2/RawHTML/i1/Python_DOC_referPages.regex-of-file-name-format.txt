<div class="post-text" itemprop="text">
<p>I'm trying to create a python regex of following string: <br/> <code>ABC--2000-01-10X13-11-44.237Z--572b3b7681572b3b7681572b3b7681572b3b7681</code><br/><br/>
This is what I managed: <br/> <code>^ABC\S\S[0-9A-T\S.]{24}\S\S[a-z0-9]{40}$</code></p>
<p>The problem is python keeps complaining about anomalous backslashes missing or r prefix, I've tried both suggestions without luck. I manage to make it stop cry about backslashes by replacing <code>\S</code> with <code>-</code> so the regex looks like this instead:
<code>^ABC--[0-9A-T-.]{24}--[a-z0-9]{40}$</code> <br/><br/>But now it doesn't match any longer and I think it's because of the punctuation <code>.</code>? I'm not sure and I hope someone is willing to help me fix this. </p>
</div>
<div class="post-text" itemprop="text">
<p>For your <strong>SECOND</strong> regex, Actually it is not matching because you've used the character range like <code>[0-9A-Z-.]{24}</code> but in your given input string you've a character called <strong>X</strong> so I think you need to modify your existing regex e.g <code>A-T</code> to <code>A-Z</code> then it will match your string perfectly.</p>
<pre><code>^ABC--[0-9A-Z-.]{24}--[a-z0-9]{40}$
</code></pre>
<p><strong>REGEX</strong> : <a href="https://regex101.com/r/fsp3FS/24" rel="nofollow noreferrer">https://regex101.com/r/fsp3FS/24</a></p>
<p><strong>Python Code:</strong></p>
<pre><code># coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"^ABC--[0-9A-Z-.]{24}--[a-z0-9]{40}$"

test_str = "ABC--2000-01-10X13-11-44.237Z--572b3b7681572b3b7681572b3b7681572b3b7681"

matches = re.search(regex, test_str, re.IGNORECASE)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))

    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1

        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Specify your regex as <strong>raw</strong> string (<em>r'...'</em>):</p>
<pre><code>pat = re.compile(r'^ABC\S\S[0-9A-T\S.]{24}\S\S[a-z0-9]{40}$')
</code></pre>
<p>Otherwise (in a "normal" string) backslashes must be doubled.</p>
<p>Example (working) code:</p>
<pre><code>import re

str = 'ABC--2000-01-10X13-11-44.237Z--572b3b7681572b3b7681572b3b7681572b3b7681'
pat = re.compile(r'^ABC\S\S[0-9A-T\S.]{24}\S\S[a-z0-9]{40}$')
print(pat.match(str).group())
</code></pre>
</div>
<span class="comment-copy">show us some of your input string that you want to match</span>
<span class="comment-copy">@AlwaysSunny The string is the first bold declaration, and the regular expression is the second.</span>
<span class="comment-copy">Do you know what <code>\S</code> matches? <code>[0-9A-T\S.]{24}</code> is strictly equivalent to <code>\S{24}</code></span>
<span class="comment-copy">@Toto of course it is supposed to march hyphen.</span>
<span class="comment-copy"><code>\S</code> matches any character that is not a space, it is the opposite of <code>\s</code>, so <code>0-9</code>, <code>A-T</code> and <code>.</code> are included in <code>\S</code></span>
<span class="comment-copy">Escape the dash in character class or put it at the beginning or at the end.</span>
<span class="comment-copy">I tried this, and it didn't match?</span>
<span class="comment-copy">I got result: <code>ABC--2000-01-10X13-11-44.237Z--572b3b7681572b3b7681572b3b7681572b3b7681</code>. Python 3.7 + Jupyter.</span>
