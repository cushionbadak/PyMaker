<div class="post-text" itemprop="text">
<p>I am a complete noob and have google made my first python script. </p>
<p>I am opening a 2 files and removing list 1 from list2.</p>
<p>Once list2 has been modified to remove what was in list 1, I want to sort the list by IP network. 
for example:</p>
<pre><code>1.1.1.1/24
1.1.1.1/32
5.5.5.5/20
10.10.11.12/26
10.11.10.4/32
</code></pre>
<p>currently it is sorting </p>
<pre><code>1.1.1.1/24
1.1.1.1/32
10.10.11.12/26
10.11.10.4/32
5.5.5.5/20
</code></pre>
<p>code:</p>
<pre><code>import os
import sys
import random
import re

text_file = open("D:/file/update2.txt", "rt")
lines = str(text_file.readlines())
text_file.close()
ip_address = r'(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d] 
{1,3}/\d{1,2})'
foundip = re.findall( ip_address, lines )


text_file2 = open("D:/file/Block.txt", "rt")
lines2 = str(text_file2.readlines())
text_file2.close()
foundip2 = re.findall( ip_address, lines2 )


test =(list(set(foundip2) - set(foundip)))

items = sorted(test)
print (*items, sep = "\n")
</code></pre>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>the default sort is alphanumeric sort. You need to generate integer tuples from your ip addresses to use as your sort key function. I use <code>re.findall</code> with "digits" expression then convert to int (but there are other solutions, with <code>split</code> for instance)</p>
<pre><code>import re

ip_list = """1.1.1.1/24
1.1.1.1/32
10.10.11.12/26
10.11.10.4/32
5.5.5.5/20""".splitlines()

print(sorted(ip_list,key=lambda x : [int(m) for m in re.findall("\d+",x)]))
</code></pre>
<p>prints:</p>
<pre><code>['1.1.1.1/24', '1.1.1.1/32', '5.5.5.5/20', '10.10.11.12/26', '10.11.10.4/32']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem stems from the fact that alphabetic sorting is not doing what you want it to do ( finding 10.x to be 'smaller' than 5.x ). Therefore you need to pass a function that will transform the ip address string into numbers, so that this function follows your intuition of what should come first.</p>
<p>Solution : I will first create a type for IP where I will parse the string into 4 groups and the port, and compare based on these tuples (see python tuple sorting).</p>
<pre><code>from collections import namedtuple
ip_type = namedtuple("IP", 'g1 g2 g3 g4 port')

def to_ip(string: str) -&gt; ip_type:
    groups, port = string.split('/')
    g1, g2, g3, g4 = [int(g) for g in groups.split('.')]
    return ip_type(g1, g2, g3, g4, int(port) )


array = [   '1.1.1.1/24',
            '1.1.1.1/32',
            '10.10.11.12/26',
            '10.11.10.4/32',
            '5.5.5.5/20'    ]

print(sorted(array, key=to_ip))
</code></pre>
</div>
<span class="comment-copy">IP addresses are <i>not</i> your text representation of them. IPv4 addresses are 32-bit unsigned integers, and they should be stored and treated that way, then you would not have that problem.</span>
