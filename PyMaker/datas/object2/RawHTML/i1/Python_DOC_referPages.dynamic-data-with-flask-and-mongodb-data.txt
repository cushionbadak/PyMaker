<div class="post-text" itemprop="text">
<p>I am a beginner in Flask. Instead of static data delivery (due to size) I would like to make database calls based on the interactions (queries) of the end-user in the frontend. 
I can't find any example on the net about how to proceed. I have been thinking about something like:</p>
<pre><code>@app.route("/")
def index():
    return render_template('index.html')


@app.before_first_request
def initialize_database():
    pass

@app.route('api/data')
def get_data_by_selecting_bounding_box():
    pass 
</code></pre>
<p>data are tweets and the user shall be able to select an area (bounding-box) on a map and get back a response retrieved from the Mongodb database of data included in the area. </p>
</div>
<div class="post-text" itemprop="text">
<p>So you have a few problems to solve:</p>
<ol>
<li>Manage the db connection.</li>
<li>Query the DB</li>
<li>Return the result</li>
</ol>
<p>Let's start with the mongo connection:</p>
<pre><code>from pymongo import MongoClient
client = MongoClient(URI_STRING)
</code></pre>
<p>Here you establish the mongodb client with pymongo. Now you can access your db on the mongodb service as:</p>
<pre><code>db = client["my-DB-name"]
</code></pre>
<p>From here, you can access collections like your collection of locations, which I will assume is called <code>locations</code>. You can access it like <code>db.locations.find(...)</code></p>
<p>Now you need to query the db. Your API needs to accept <code>lat1, lat2, long1, long2</code> to represent the bounds of the bounding box. Here I'm going to assume they are <code>.args</code> as described in the <a href="http://flask.pocoo.org/docs/0.12/quickstart/#the-request-object" rel="nofollow noreferrer">docs</a></p>
<pre><code>@app.route('api/data')
def get_data_by_selecting_bounding_box():
    cursor = db.locations.find(
    "$and":[
    {"lat": {"$gt": requests.args.get("lat1", 0)}},
    {"lat": {"$lt": requests.args.get("lat2", 0)}},
    {"long": {"$gt": requests.args.get("long1", 0)}},
    {"long": {"$lt": requests.args.get("long2", 0)}}
    ])
</code></pre>
<p>Now you can <code>return</code> the cursor at the end of this route handler, in whatever manner your <code>html</code> template calls for. It could be as simple as:</p>
<pre><code>    return [doc for docs in cursor]
</code></pre>
</div>
