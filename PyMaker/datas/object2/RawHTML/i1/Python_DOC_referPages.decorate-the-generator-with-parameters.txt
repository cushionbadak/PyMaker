<div class="post-text" itemprop="text">
<p>Here is my generator that takes an array input and iterates over it in a specific way:</p>
<pre><code>def array_gen(answer):
    n = len(answer)
    m = len(answer[0])
    elem=0
    i = n
    j = 0
    curr = 0
    steps = [(-1,0), (0,1), (1,0), (0,1)]
    while not (elem == n*m):
        if (((i == n - 1) and (j != 0)) or i == 0):
            curr += 1
        i += steps[curr % 4][0]
        j += steps[curr % 4][1]
        elem+=1
        yield answer[i][j]
</code></pre>
<p>Now, I want to write a decorator that returns pairs(current and the next one) of elements of the array, while I am iterating through the array. Can someone give me some idea for achieving this functionality?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>pairwise</code> recipe from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a> and make it a decorator:</p>
<blockquote>
<pre><code>from itertools import tee

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)
</code></pre>
</blockquote>
<pre><code>from functools import wraps

def pairwise_decorator(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        return pairwise(func(*args, **kwargs))
    return wrapper
</code></pre>
<p>This happily works with generators (as do all functions in the <code>itertools</code> module) and returns a <code>zip</code> object (a special kind of generator) in Python 3.</p>
<p>Example usage:</p>
<pre><code>@pairwise_decorator
def f(n):
    return range(n)

list(f(5))
# [(0, 1), (1, 2), (2, 3), (3, 4)]
</code></pre>
<p>To make this more general (call any function on the output of the decorated function), make this a decorator accepting an argument:</p>
<pre><code>def call_after(outer_func):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            return outer_func(func(*args, **kwargs))
        return wrapper
    return decorator

@call_after(pairwise)
def f(n):
    return range(n)

@call_after(lambda x: grouper(x, 3))
def g(n):
    return range(n)

list(f(5))
# [(0, 1), (1, 2), (2, 3), (3, 4)]
list(g(5))
# [(0, 1, 2), (3, 4, None)]
</code></pre>
</div>
