<div class="post-text" itemprop="text">
<p>Python 3.6 is about to be released. <a href="https://www.python.org/dev/peps/pep-0494/" rel="noreferrer">PEP 494 -- Python 3.6 Release Schedule</a> mentions the end of December, so I went through <a href="https://docs.python.org/3.6/whatsnew/3.6.html" rel="noreferrer">What's New in Python 3.6</a> to see they mention the <em>variable annotations</em>:</p>
<blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0484" rel="noreferrer">PEP 484</a> introduced standard for type annotations of function parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating the types of variables including class variables and instance variables:</p>
<pre><code>  primes: List[int] = []

  captain: str  # Note: no initial value!

  class Starship:
     stats: Dict[str, int] = {}
</code></pre>
<p>Just as for function annotations, the Python interpreter does not attach any particular meaning to variable annotations and only stores them in a special attribute <code>__annotations__</code> of a class or module. In contrast to variable declarations in statically typed languages, the goal of annotation syntax is to provide an easy way to specify structured type metadata for third party tools and libraries via the abstract syntax tree and the <code>__annotations__</code> attribute.</p>
</blockquote>
<p>So from what I read they are part of the type hints coming from Python 3.5, described in <a href="https://stackoverflow.com/q/32557920/1983854">What are Type hints in Python 3.5</a>.</p>
<p>I follow the <code>captain: str</code> and <code>class Starship</code> example, but not sure about the last one: How does <code>primes: List[int] = []</code> explain? Is it defining an empty list that will just allow integers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Everything between <code>:</code> and the <code>=</code> is a type hint, so <code>primes</code> is indeed defined as <code>List[int]</code>, and initially set to an empty list (and <code>stats</code> is an empty dictionary initially, defined as <code>Dict[str, int]</code>).</p>
<p><code>List[int]</code> and <code>Dict[str, int]</code> are not part of the next syntax however, these were already defined in the Python 3.5 typing hints PEP. The 3.6 <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 – <em>Syntax for Variable Annotations</em></a> proposal <em>only</em> defines the syntax to attach the same hints to variables; before you could only attach type hints to variables with comments (e.g. <code>primes = []  # List[int]</code>).</p>
<p>Both <code>List</code> and <code>Dict</code> are <em>Generic</em> types, indicating that you have a list or dictionary mapping with specific (concrete) contents. </p>
<p>For <code>List</code>, there is only one 'argument' (the elements in the <code>[...]</code> syntax), the type of every element in the list. For <code>Dict</code>, the first argument is the key type, and the second the value type. So <em>all</em> values in the <code>primes</code> list are integers, and <em>all</em> key-value pairs in the <code>stats</code> dictionary are <code>(str, int)</code> pairs, mapping strings to integers.</p>
<p>See the <a href="https://docs.python.org/3/library/typing.html#typing.List"><code>typing.List</code></a> and <a href="https://docs.python.org/3/library/typing.html#typing.Dict"><code>typing.Dict</code></a> definitions, the <a href="https://docs.python.org/3/library/typing.html#generics">section on <em>Generics</em></a>, as well as <a href="https://www.python.org/dev/peps/pep-0483">PEP 483 – <em>The Theory of Type Hints</em></a>.</p>
<p>Like type hints on functions, their use is optional and are also considered <em>annotations</em> (provided there is an object to attach these to, so globals in modules and attributes on classes, but not locals in functions) which you could introspect via the <code>__annotations__</code> attribute. You can attach arbitrary info to these annotations, you are not strictly limited to type hint information.</p>
<p>You may want to read the <a href="https://www.python.org/dev/peps/pep-0526/">full proposal</a>; it contains some additional functionality above and beyond the new syntax; it specifies when such annotations are evaluated, how to introspect them and how to declare something as a class attribute vs. instance attribute, for example.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>What are variable annotations?</em></p>
</blockquote>
<p>Variable annotations are just the next step from <code># type</code> comments, as they were defined in <code>PEP 484</code>; the rationale behind this change is highlighted in the <a href="https://www.python.org/dev/peps/pep-0526/#rationale" rel="noreferrer">respective section of PEP 526</a>. </p>
<p>So, instead of hinting the type with:</p>
<pre><code>primes = []  # type: List[int]
</code></pre>
<p><em>New syntax was introduced</em> to allow for directly annotating the type with an assignment of the form:</p>
<pre><code>primes: List[int] = []
</code></pre>
<p>which, as @Martijn pointed out, denotes a list of integers by using types available in <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing</code></a> and initializing it to an empty list.</p>
<blockquote>
<p><em>What changes does it bring?</em></p>
</blockquote>
<p>The first change introduced was <a href="https://docs.python.org/3.6/reference/simple_stmts.html#annotated-assignment-statements" rel="noreferrer">new syntax</a> that allows you to annotate a name with a type, either standalone after the <code>:</code> character or optionally annotate while also assigning a value to it:</p>
<pre><code>annotated_assignment_stmt ::=  augtarget ":" expression ["=" expression]
</code></pre>
<p>So the example in question:</p>
<pre><code>   primes: List[int] = [ ]
#    ^        ^         ^
#  augtarget  |         |
#         expression    |
#                  expression (optionally initialize to empty list)
</code></pre>
<p>Additional changes were also introduced along with the new syntax; modules and classes now have an <code>__annotations__</code> attribute (as functions have had since <em><a href="https://www.python.org/dev/peps/pep-3107/" rel="noreferrer">PEP 3107 -- Function Annotations</a></em>) in which the type metadata is attached:</p>
<pre><code>from typing import get_type_hints  # grabs __annotations__
</code></pre>
<p>Now <code>__main__.__annotations__</code> holds the declared types:</p>
<pre><code>&gt;&gt;&gt; from typing import List, get_type_hints
&gt;&gt;&gt; primes: List[int] = []
&gt;&gt;&gt; captain: str
&gt;&gt;&gt; import __main__
&gt;&gt;&gt; get_type_hints(__main__)
{'primes': typing.List&lt;~T&gt;[int]}
</code></pre>
<p><code>captain</code> won't currently show up through <a href="https://docs.python.org/3.6/library/typing.html#typing.get_type_hints" rel="noreferrer"><code>get_type_hints</code></a> because <code>get_type_hints</code> only returns types that can also be accessed on a module; i.e., it needs a value first:</p>
<pre><code>&gt;&gt;&gt; captain = "Picard"
&gt;&gt;&gt; get_type_hints(__main__)
{'primes': typing.List&lt;~T&gt;[int], 'captain': &lt;class 'str'&gt;}
</code></pre>
<p><sub> Using <code>print(__annotations__)</code> will show <code>'captain': &lt;class 'str'&gt;</code> but you really shouldn't be accessing <code>__annotations__</code> directly.</sub></p>
<p>Similarly, for classes:</p>
<pre><code>&gt;&gt;&gt; get_type_hints(Starship)
ChainMap({'stats': typing.Dict&lt;~KT, ~VT&gt;[str, int]}, {})
</code></pre>
<p>Where a <code>ChainMap</code> is used to grab the annotations for a given class (located in the first mapping) and all annotations defined in the base classes found in its <code>mro</code> (consequent mappings, <code>{}</code> for object).</p>
<p>Along with the new syntax, a new <a href="https://docs.python.org/3.6/library/typing.html#typing.ClassVar" rel="noreferrer"><code>ClassVar</code></a> type has been added to denote class variables. Yup, <code>stats</code> in your example is actually an <em>instance variable</em>, not a <code>ClassVar</code>.</p>
<blockquote>
<p><em>Will I be forced to use it?</em></p>
</blockquote>
<p>As with type hints from <code>PEP 484</code>, these are <strong><em>completely optional</em></strong> and are of main use for type checking tools (and whatever else you can build based on this information). It is to be provisional when the stable version of Python 3.6 is released so small tweaks might be added in the future.</p>
</div>
<span class="comment-copy">Type hints do <b>not</b> do any type checking. <code>primes: List[int] = []</code> is just an empty list as <code>primes = []</code>. The difference is that you are <i>claiming</i> that <code>primes</code> <i>is meant to</i> contain only <code>int</code>s and 3rd party applications might type check your program to verify this claim, but when you run the code in any python interpreter that's just the same as writing <code>primes = []</code>, and thus doing <code>primes: List[int] = []; primes.append("string")</code> is still valid.</span>
<span class="comment-copy">@Bakuriu yes, good point. As Jim Fasarakis-Hilliard describes in his answer to <a href="http://stackoverflow.com/a/32558710/1983854">What are Type hints in Python 3.5</a>, <i>why type hints</i> → <i>Helps type checkers, helps with documentation and Helps IDEs develop more accurate and robust tools</i>. Taken from <a href="https://www.python.org/dev/peps/pep-0526/" rel="nofollow noreferrer">PEP 526 -- Syntax for Variable Annotations</a>, <b>Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention</b>.</span>
<span class="comment-copy">May I consider type hints as a kind of "machine-readable" comments, since they do not affect how the code runs (except for an <code>obj.__annotations__</code> attribute)?</span>
<span class="comment-copy">@iBug: annotations are machine-readable comments, insofar that comments are human-readable annotations anyway. :-)</span>
