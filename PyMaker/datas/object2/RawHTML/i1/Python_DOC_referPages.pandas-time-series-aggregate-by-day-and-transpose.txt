<div class="post-text" itemprop="text">
<p>I have the following dataframe:</p>
<pre><code>dataframe = pd.DataFrame({'date':pd.to_datetime(['2018-05-27', '2018-05-27','2018-05-28','2018-06-1']), 
                         'code': ['1', '1', '1', '2']})
dataframe 
    date      code
0   2018-05-27  1
1   2018-05-27  1
2   2018-05-28  1
3   2018-06-01  2
</code></pre>
<p>And I want:</p>
<pre><code>dataframe = pd.DataFrame({'date':pd.to_datetime(['2018-05-27', '2018-05-28','2018-05-29','2018-05-30','2018-05-31', '2018-06-1']),
                          '1': [2, 1, 1, 0, 0, 0], 
                          '2': [0, 0, 0, 0, 0, 1]})
dataframe
    date        1   2
0   2018-05-27  2   0
1   2018-05-28  1   0
2   2018-05-29  0   0
3   2018-05-30  0   0
4   2018-05-31  0   0
5   2018-06-01  0   1
</code></pre>
<p>My first attempt is: </p>
<pre><code>dataframe.groupby([dataframe['code'], dataframe['date'].dt.month.rename('month'), dataframe['date'].dt.day.rename('day')]).agg({"count"})


code    month day    date count
1         5    27       2
               28       1
2         6     1       1
</code></pre>
<p>But gives me two problems: (1) the date is no longer in a date format, and (2) I don't know how to transpose it. I've been fighting with pandas time series and aggregate functions, with no much success. I also would like to have it just by months. Any idea of how to proceed?</p>
<p>I've already checked the following StackOverflow's questions. <a href="https://stackoverflow.com/questions/21954197/which-is-the-fastest-way-to-extract-day-month-and-year-from-a-given-date">Here</a> and
<a href="https://stackoverflow.com/questions/38792122/how-to-group-and-count-rows-by-month-and-year-using-pandas">here</a> but is not exactly the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pd.crosstab</code>:</p>
<pre><code>pd.crosstab(dataframe['date'], dataframe['code'])\
  .reindex(pd.date_range(dataframe['date'].min(), 
                         dataframe['date'].max()), fill_value=0)
</code></pre>
<p>Output:</p>
<pre><code>code        1  2
2018-05-27  2  0
2018-05-28  1  0
2018-05-29  0  0
2018-05-30  0  0
2018-05-31  0  0
2018-06-01  0  1
</code></pre>
<p>Option #2</p>
<pre><code>dataframe.groupby(['date','code']).size()\
         .unstack(1, fill_value=0)\
         .reindex(pd.date_range(dataframe['date'].min(), 
                                dataframe['date'].max()), 
                  fill_value=0)
</code></pre>
<p>Output:</p>
<pre><code>code        1  2
2018-05-27  2  0
2018-05-28  1  0
2018-05-29  0  0
2018-05-30  0  0
2018-05-31  0  0
2018-06-01  0  1
</code></pre>
</div>
<span class="comment-copy">Where did the 1 for 5/29/2018 come from?</span>
<span class="comment-copy">It was a typo. Thanks.</span>
<span class="comment-copy">this is really cool; reminds me of <code>Series.value_counts()</code> but useful for a <code>DataFrame</code>.  thanks!</span>
<span class="comment-copy">@jeschwar Thank you.</span>
