<div class="post-text" itemprop="text">
<p>I have a dataset that contains a lot of categorical variables which I would like to plot in a scatter graph without having to encode the variables.
This is my attempt:</p>
<pre><code>    fig = plt.figure(figsize=(18, 9))

    for column in df:

     if df[column].dtype != np.int64 and df[column].dtype != np.float64:

        ca = df.plot.scatter(x=df[column],y= df['log_prices'], ax = 

        fig.add_subplot(2,3,df[column]+1))

        plt.plot(df.iloc[:,df[column]].values, sm.OLS(df.iloc
        [:,df['log_prices'].values,sm.add_constant(df.iloc[:,df[column]].values)).fit().fittedvalues,'r-')
</code></pre>
<p>This is the error I'm getting at the moment:</p>
<pre><code>     ----&gt; 5             ca = df.plot.scatter(x=df[column],y=df['log_prices'], ax = fig.add_subplot(2,3,df_061[column]+1))

         cannot concatenate 'str' and 'int' objects
</code></pre>
<p>This has clearly something to do with log_prices.</p>
<p>Is there an easier way of doing this?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend making the following change:</p>
<pre><code>ca = df.plot.scatter(x = column, y = 'log_prices', ax = fig.add_subplot(2, 3, df[column] + 1))
</code></pre>
<p>When using the <code>df.plot()</code> method, you need to provide the column names to the x and y arguments, not the actual data. The data already resides in <code>df</code>, so you just need to give it the columns to use.</p>
<p>Here is a partial replication of your code using example data:</p>
<pre><code>import matplotlib.pyplot as plt

df = pd.DataFrame(np.random.rand(10,5), columns = ['A','B','C','D','E'])

fig = plt.figure(figsize=(18, 9))

idx = 0

for column in df:

#    if df[column].dtype != np.int64 and df[column].dtype != np.float64:
    idx += 1
    ca = df.plot.scatter(x = column, y = 'A', ax = fig.add_subplot(2,3,idx))

#    plt.plot(df.iloc[:,df[column]].values, sm.OLS(df.iloc[:,df['log_prices'].values,sm.add_constant(df.iloc[:,df[column]].values)).fit().fittedvalues,'r-')
</code></pre>
<p>This code produces the following plot:
<a href="https://i.stack.imgur.com/ixSZM.png" rel="nofollow noreferrer"><img alt="Subplots" src="https://i.stack.imgur.com/ixSZM.png"/></a></p>
</div>
<span class="comment-copy">For one thing, you can skip looping and use the built-in <code>select_dtypes</code> function in pandas, which is <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.select_dtypes.html" rel="nofollow noreferrer">just great</a> IMO</span>
<span class="comment-copy">I now just get this:                    &lt;matplotlib.figure.Figure at 0x115ff780&gt;, but not an actual graph</span>
<span class="comment-copy">Without having your data, it is difficult to test everything at once. There may be some improvements needed in the second plotting line as well. Perhaps a call of plt.show() might also be needed.</span>
<span class="comment-copy">@J.DF ... be sure to show plot at the end: <code>plt.show()</code> (and even close it <code>plt.clf()</code>, <code>plt.close()</code>).</span>
<span class="comment-copy">Thanks. I see you've commented out the if statement for columns containing categorical variables only. However, that's what I'm having trouble with. What's the best way plot categorical variables only?</span>
