<div class="post-text" itemprop="text">
<p>I'm working with the <a href="https://github.com/keleshev/schema" rel="nofollow noreferrer">schema</a> library and I'm trying to figure out how validate that the keys on a dictionary are in a defined set.</p>
<pre class="lang-py prettyprint-override"><code>MY_SET = {"a", "b"}
MY_SCHEMA = Schema({"parentkey": {"KEY I WANT TO VALIDATE": {"key": str}})
</code></pre>
<p>I attempted it w/ <code>Use</code> but that does not appear to behave as expected.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; v = Schema({"parentkey": {Use(lambda x: x in {"a", "b"}): {"key": str}})
&gt;&gt;&gt; v.is_valid({"parentkey": {"a": {"key": "hello"}}})
True
&gt;&gt;&gt; v.is_valid({"parentkey": {"c": {"key": "hello"}}})
True
</code></pre>
<p>This does not appear to be the correct use case for a <code>Hook</code> as that only fires when it finds a matching key.</p>
<p>Edit:</p>
<p>Basically what I want to test is that at least 1 key in a set of key's exists in the dictionary and each key has the same underlying data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>This appears to be the only way I can enforce this.</p>
<pre class="lang-py prettyprint-override"><code>def has_values(val):
    if len(val) == 0:
        raise SchemaError("values required")
    return val


sch = Schema(And(dict, Use(has_values), {Optional("a"): str, Optional("b") str})
</code></pre>
<p>This would guarantee that the key's have at least one of the desired values and no values outside those.</p>
</div>
