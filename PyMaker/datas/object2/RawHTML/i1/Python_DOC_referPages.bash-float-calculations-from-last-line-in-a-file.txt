<div class="post-text" itemprop="text">
<p>I have a file text.txt as follows:</p>
<pre><code>A       B        C    D      E    F   G   F 
1.1     2        3    4      5    6   7   8 
1.2    20        30   40     50   60  70  80 
6.3    70.5      10   20.5   10   20  10  30
</code></pre>
<p>I want read the last line res=[6.3    70.5      10   20.5   10   20  10  30] and do  float calculations such as sum all columns except the first two  sum([10   20.5   10   20  10  30]) so that ans=100.5;  multiple first column 6.3 by 10 and add 2 ans=65; and so on </p>
<pre><code>#!/bin/bash

# Input file name
echo -n "File Name: "
read SO

# Read data
res=$(tail -n 1  $SO) #Read last line 
res=($res)            #Convert string to number
echo $res

#Float calculations 
python -c "print sum($res[2:])"
python -c "print $res[0]*10+2)"
</code></pre>
<p>The code is working expect for the float calculations which give syntax error. My question is how to pass array $res to python? Or is there an easy way to do this float calculation given array $res ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Is it a necessity to run python for such simple calculations?</p>
<p>You can run <a href="https://en.wikipedia.org/wiki/Bc_(programming_language)" rel="nofollow noreferrer">bc</a> for that operation. It's the most common way to make calculations in bash, especially for float numbers.</p>
<p>You can do something like:</p>
<pre><code>res=(6.3 70.5 10 20.5 10 20 10 30)
echo ${res[@]:2} | tr ' ' + | bc
echo "${res[0]} * 10 + 2" | bc
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of things you could do to get the variable to Python. You can pass it as arguments or you could also have python read in that line via sys.stdin.</p>
<p>Pass the line as arguments to python:</p>
<pre><code>$ bar=$(tail -1 numbers.txt )
$ echo $bar
6.3 70.5 10 20.5 10 20 10 30
$ python -c "import sys; print sys.argv" $bar
['-c', '6.3', '70.5', '10', '20.5', '10', '20', '10', '30']
</code></pre>
<p>Pass the line via stdin:</p>
<pre><code>$ echo "$bar" | python -c "import sys; print sys.argv; print sys.stdin.read()" 
['-c']
6.3    70.5      10   20.5   10   20  10  30
</code></pre>
<p>Note that these values are strings and you'll need to convert them to a float() before attempting any math operations on them. Also with the second option you'll have to split the line and then convert them to a float.</p>
<p>For extra fun with the stdin route, have a look at: <a href="https://docs.python.org/3.7/library/fileinput.html" rel="nofollow noreferrer">https://docs.python.org/3.7/library/fileinput.html</a></p>
<p>I'd recommend that you write a python script instead of using <code>python -c</code> as it can get unruly fairly quick. Name the script: process_numbers.py,  with the following contents:</p>
<pre><code>#!/usr/bin/env python
import sys
# quick list comprehension to convert args to floats
numbers = [float(i) for i in sys.argv[1:]]
print numbers
print numbers[0]*10 + 2
</code></pre>
<p>Then, in your bash script:</p>
<pre><code>python process_numbers.py $(tail -1 numbers.txt)
[6.3, 70.5, 10.0, 20.5, 10.0, 20.0, 10.0, 30.0]
65.0
</code></pre>
</div>
<span class="comment-copy">bash doesn't support floating point arithmetics. Python variables are different to shell variables.</span>
<span class="comment-copy">awk could be much simpler for your task: <code>awk 'END{for(i=3; i&lt;=NF; i++) t+=$i; print t, $1*10+2}' text.txt</code></span>
<span class="comment-copy">Thanks for the answer, but I need to to save the output as array of numbers to perform many other calculations</span>
<span class="comment-copy">@BERKO Could you please tell me why you don’t want to write the whole script in python then? I showed how you can do your calcs in pure bash. Why don’t you want to use it in that case?</span>
<span class="comment-copy">Thanks for your answer. But when I try python -c "import sys; print sys.argv" $bar; float(bar) is gives an error.</span>
<span class="comment-copy">Sorry I should have been clearer, in short the float() needs to be in the python code not in bash. I've updated my answer to show how you would do that in a python script.</span>
