<div class="post-text" itemprop="text">
<pre><code>start = int(time.time())

while True:  

    if int(time.time()) % 2 == 0:
        img = ImageGrab.grab()
        saveas = 'screenshot' + str(int(time.time())) + '.png'
        img.save(saveas)

    elif start + 30 == int(time.time()):
        break
</code></pre>
<p>result : <a href="https://i.stack.imgur.com/Aqdv6.png" rel="nofollow noreferrer">https://i.stack.imgur.com/Aqdv6.png</a></p>
<p>Hi guys. It's a simple code but not working accurately.
I wanted to save a screenshot of my screen for every 2 seconds.
but in the result, I have some of those odd second files like 'screenshot1552893309.png'. What should I do to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>This happens because "time flies."</p>
<p>You are calling <code>time.time()</code> at most three times per iteration of the while loop.</p>
<p>Each call of <code>time.time()</code> returns the UNIX time at the given call. In your code, each call can be invoked at different seconds (thus returning different timestamps.)</p>
<p>For example, consider this situation: <code>time.time()</code> from <code>if int(time.time()) % 2 == 0:</code> returns <code>1552893308.0</code>, so the condition is satisfied, but the next call returns <code>1552893309.0</code>, which will leave its trace to the file name.</p>
<p>Instead, you might want to call <code>time.time()</code> only once per iteration, and then do what you want with that timestamp.</p>
<pre class="lang-py prettyprint-override"><code>start = int(time.time())

while True:  
    current_time = int(time.time())
    if current_time % 2 == 0:
        img = ImageGrab.grab()
        saveas = 'screenshot' + str(current_time) + '.png'
        # or you can also say
        # saveas = f'screenshot{current_time}.png'
        img.save(saveas)

    elif start + 30 &lt;= current_time:
        break
</code></pre>
<p>Note the change of the boolean operator in <code>elif</code>. <code>start + 30 == current_time</code> seems too vulnerable to making a infinite loop.</p>
<p>Also note the commented use of f-strings, which was introduced in Python 3.6</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>while True:  
    # save time into variable:
    start = int(time.time())    
    if start % 2 == 0:
        img = ImageGrab.grab()
        # use start time for file name:
        saveas = 'screenshot' + str(start) + '.png'
        img.save(saveas)
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>time</code>, where you check it for even and the <code>time</code> where you are using it to save image would be different since they are in <strong>different statement</strong>. You can save the current time in every iteration, and use the saved time in image files name if its even.</p>
<p><em>Sample code :</em> </p>
<pre><code>while True:  
    t = int(time.time())
    if t % 2 == 0:
        img = ImageGrab.grab()
        saveas = 'screenshot' + str(t) + '.png'
        img.save(saveas)
</code></pre>
</div>
<span class="comment-copy">That may be because <code>ImageGrab.grab()</code> taking time and calling <code>'screenshot' + str(int(time.time())) + '.png'</code> again will result in an odd second? If you store the value of <code>time.time()</code> in a variable and use that to check for oddity and file name, you should get consistent results.</span>
<span class="comment-copy">Don't call <code>time.time()</code> more than once per loop if you don't want to get potentially different results from each call.</span>
