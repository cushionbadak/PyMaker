<div class="post-text" itemprop="text">
<p>After watching a video on FFT and Frequencies, I tried to recreate the example code (as show below), however something went wrong. In the plot you can see that the peak is of by 0.0025Hz. I dont unterstand why.<br/>
The signal is <strong>2*sin(pi*x/8) == 0.0625Hz</strong>. However the plot shows 0.0600Hz.</p>
<pre><code>N = 100
f = lambda x : 2 * np.sin(np.pi * x/8)
X = range(N)
y = [f(x) for x in X]
fft = np.fft.fft(y)
fft_abs = 2*np.abs(fft/N)

freq = np.fft.fftfreq(N)
mask = freq &gt; 0

plot.figure(1)
plot.plot(y)
plot.show()

plot.figure(2)
plot.plot(freq[mask],fft_abs[mask])
plot.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a simple problem of not enough resolution. With <code>N</code> of 100, you have time steps of .01, so 0.0625 gets rounded to the nearest hundredth (0.06). If you use a higher number <code>N</code> 
 (1000 maybe) the time step will be smaller and the better you can calculate the answer. Technically you can pick any even multiple of 16, and it will happen to give the exact value because 1/16 = 0.0625.</p>
</div>
<span class="comment-copy">Can you actually distinguish 0.06 with 0.0625 on this plot?</span>
