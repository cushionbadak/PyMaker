<div class="post-text" itemprop="text">
<p>As per the documentation <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">here</a> iterpools.product doesn't hold intermediate results in memory (it computes Cartesian product of input lists). But the rough sketch of the algorithm given makes me believe it does. Notice how <strong>result</strong> keeps getting updated in every iteration by taking elements in <strong>result</strong> and appending more to it.</p>
<pre><code>def product(*args, repeat=1):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = [tuple(pool) for pool in args] * repeat
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</code></pre>
<p>I tried groking the underlying <strong>C</strong> code <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c" rel="nofollow noreferrer">here</a> but couldn't. I would like to understand how does the <strong>C</strong> code work without keeping the intermediate results in memory. I came across a recursive approach(reproduced below) which doesn't keep intermediate results in memory except the recursive call stack. <strong>Does the C code also use a recursive approach, else how is it able to work without keeping the intermediate results in memory?</strong></p>
<pre><code>// Recursive approach
def product(input, ans, i): 
    if i == len(input): 
        print(ans) 
        return 
    j = 0 
    while j &lt; len(input[i]): 
        ans.append(input[i][j]) 
        find(input, ans, i+1) 
        ans.pop() 
        j += 1

input = [] 
input.append(["hi", "hey"]) 
input.append(["there", "here"]) 
input.append(["cute", "handsome"])  

ans = [] 
print(product(input, ans, 0))

hi there cute
hi there handsome
....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It stores the inputs in memory (as <code>tuple</code>s), along with an index for each <code>tuple</code>, and repeatedly cycles all but the first one. Each time a new output value is requested, it:</p>
<ol>
<li>Advances the index into the rightmost <code>tuple</code></li>
<li>If it goes past the end, it resets it to zero, and advances the next rightmost index</li>
<li>Step 2 is repeated until an index is found that can be incremented without going past the end of its particular iterator</li>
<li>A new <code>tuple</code> is created by pulling the value at the current index for each data source</li>
</ol>
<p>It has a special case for the very first pull where it just pulls the 0th value from each <code>tuple</code>, but otherwise that pattern is followed every time.</p>
<p>For a really simple example, the internal state for:</p>
<pre><code>for x, y in product('ab', 'cd'):
</code></pre>
<p>would be to create tuples <code>('a', 'b')</code> and <code>('c', 'd')</code> up front, and an array of indices, <code>[0, 0]</code> initially. On the first pull, it yields <code>('a', 'b')[0], ('c', 'd')[0]</code> or <code>('a', 'c')</code>. On the next pull, it advances the indices array to <code>[0, 1]</code>, and yields <code>('a', 'b')[0], ('c', 'd')[1]</code> or <code>('a', 'd')</code>. The next pull advances the rightmost index to 2, realizes it has overflowed, puts it back to 0, and advances the next index making it <code>[1, 0]</code>, and yields <code>('a', 'b')[1], ('c', 'd')[0]</code> or <code>('b', 'c')</code>. This continues until the leftmost index overflows, at which point iteration is complete.</p>
<p>Actually equivalent Python code would look more like:</p>
<pre><code>def product(*iterables, repeat=1):
    tuples = [tuple(it) for it in iterables] * repeat
    if not all(tuples):
        return # A single empty input means nothing to yield
    indices = [0] * len(tuples)
    yield tuple(t[i] for i, t in zip(indices, tuples))
    while True:
        # Advance from rightmost index moving left until one of them
        # doesn't cycle back to 0
        for i in range(len(indices))[::-1]:
            indices[i] += 1
            if indices[i] &lt; len(tuples[i]):
                break  # Done advancing for this round
            indices[i] = 0  # Cycle back to 0, advance next
        else:
            # The above loop will break at some point unless
            # the leftmost index gets cycled back to 0
            # (because all the leftmost values have been used)
            # so if reach the else case, all products have been computed
            return

        yield tuple(t[i] for i, t in zip(indices, tuples))
</code></pre>
<p>but as you can see, it's far more complex than the simpler version provided.</p>
<p>As you can see, each output <code>tuple</code> is <code>yield</code>ed immediately upon being created; only the inputs and the current indices for those inputs must be preserved as iterator state. Thus, as long as the caller doesn't store the results, and just iterates live, very little memory is needed.</p>
</div>
<span class="comment-copy">Why the downvote?</span>
