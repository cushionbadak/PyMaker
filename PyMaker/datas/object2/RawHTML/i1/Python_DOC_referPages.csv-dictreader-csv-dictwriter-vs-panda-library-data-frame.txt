<div class="post-text" itemprop="text">
<p>I am trying to write a program in Python which would: </p>
<ul>
<li>Reads data from a CSV file, with data ordered by date</li>
<li>select some keys and values, by finding the last 365 days (past 365 days from the last data point's date in csv file) and </li>
<li>Export to another csv new_file</li>
<li>Plot a line-graph (export as an image file) from data written to the new_file</li>
</ul>
<p>I am new to Python and have been looking at:</p>
<ul>
<li><code>csv.DictReader(csv_file)</code> / <code>csv.DictWriter</code> </li>
<li>Panda library <code>DataFrame</code></li>
</ul>
<p>My question is which data structure most suitable to what I would like to achieve: Dictionaries or Panda DataFrames? </p>
<p>I found the Panda DataFrame structure quite cumbersome to work with so far. How would I select the last 365 days from the latest data point's date (and format).</p>
<p>Sample data input:</p>
<pre class="lang-none prettyprint-override"><code>date    txVolume(USD)   adjustedTxVolume(USD)   txCount marketcap(USD)  price(USD)  exchangeVolume(USD) generatedCoins  fees    activeAddresses averageDifficulty   paymentCount    medianTxValue(USD)  medianFee   blockSize   blockCount
04/05/2018  7837824038  4235399151  218931  1.65E+11    9695.5  8217829888  1725    39.37853649 695603  4.02E+12    395233  395.3934459 4.04E-05    134387026   138
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pandas has some learning curve, but once you are comfortable with them, you will love them. See one simple solution to your problem. Cheers.</p>
<pre><code>import pandas as pd
import matplotlib.pyplot as plt
from datetime import timedelta

df = pd.read_csv(r"your-folder\dates.csv", parse_dates=[0]) # assuming dates are in the first column
df.sort_values(by="date", ascending=False, inplace=True)
last_date = df["date"].max().date()
start_date = df["date"].max().date() - timedelta(days=365)
dfRange = df[(df["date"].dt.date &gt;= start_date) &amp; (df["date"].dt.date &lt;= last_date)]

plt.scatter(dfRange["txCount"],dfRange["txVolume(USD)"])
plt.xlabel("txCount")
plt.ylabel("txVolume(USD)")
plt.savefig(r"target-location\dates.png")
plt.close()
</code></pre>
</div>
<span class="comment-copy">Pandas uses the <code>csv</code> module under the hood to read and write CSV. However, it is far more powerful as it can trivially select the rows that match your criteria, and the library supports plotting, directly. Pandas is a whole new tool to learn, but worth it because it is so powerful; learn Python, <i>and</i> learn Pandas.</span>
<span class="comment-copy">.. get yourself Pandaat with... "Python Data Science Handbook" from vanderPlas. (hides because this is almost non-hidden advert ;p)</span>
<span class="comment-copy">Many thanks MartijnPieters. You are right Pandas is so much more powerful. As I am a newbie it is still overwhelming...  @ZF007 : many thanks, some bedtime reading... ;-)</span>
<span class="comment-copy">Thanks @griggy. This is wonderful and did the trick !</span>
<span class="comment-copy">forceorange, could you please rate the answer? thank you</span>
