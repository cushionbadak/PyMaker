<div class="post-text" itemprop="text">
<p>I am writing a Python function that converts a compound return rate into an annualised one:</p>
<pre><code>annual_rate = ((1 + ((1 + compound_rate) ** (1 / nb_days) - 1)) ** 365 - 1)
</code></pre>
<p>This works fine</p>
<pre><code>compound_rate = 0.1
nb_days = 100
&gt;&gt;0.41606536550485806
</code></pre>
<p>But in some cases, a complex number is returned</p>
<pre><code>compound_rate = -1.8536
nb_days = 362
&gt;&gt;(-1.852192062046392-0.022192088919279443j)
</code></pre>
<p>Here is a real-life example:</p>
<p>If I have a payment deposit table as per the following:</p>
<pre><code>03/03/2018  £1000
03/04/2018  £1000
03/05/2018  £1000
03/06/2018  £1000
03/07/2018  £1000
03/08/2018  £1000
03/09/2018  £1000
03/10/2018  £1000
03/11/2018  £1000
03/12/2018  £1000
03/01/2019  £1000
03/02/2019  £1000
</code></pre>
<p>.. and if I lose all the money and end up with £100 at the end of February 2019, I would have put in £12000, with a loss of £11900, over 362 days.</p>
<p>If I apply my formula from there, a complex number is returned (see second example above). </p>
<p>Is there something that I am not seeing here? Quite literally, this result does not feel real to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might be what you are looking for:</p>
<pre><code>import numpy as np
l = [-1000]*12
l.append(100)
print(l)
#[-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100]
print(np.irr(l))
#-0.9090909090908827
</code></pre>
</div>
<span class="comment-copy">You are raising a negative number (any <code>compound_rate</code> that is smaller than -1) to a fraction (any <code>nb_days</code> greater than 1). That's a complex number, because real numbers can't produce a negative number unless raised to a whole odd integer.</span>
<span class="comment-copy">@NicolasBerthier A complex number to the power of a real number can become real again (simplest example is i^2 = -1), and you have <code>** 365</code> in there. And what Mortz pointed out (since you add one to <code>compound_rate</code>)</span>
<span class="comment-copy">This does not answer your question - but are you trying to calculate the rate of return of these cash flows? You might want to take a look at <code>numpy.irr</code></span>
<span class="comment-copy">Thank you all, that makes sense. Any idea of how I could represent the annualised return rate of the example above with a real number?</span>
<span class="comment-copy">What would you expect a compound_rate below -1 to output? It does not make physical sense.</span>
<span class="comment-copy">Even though there might have been some confusion around the terms I've used to formulate the problem, this actually solves it, at the cost of approximating when the deposits are made during the month.</span>
<span class="comment-copy">You can get a better approximation by using an array or list that has the cash flows for 365 days instead of just 13 days (rest of the days will have a 0 cash flow). The improvement, however, will be very small</span>
<span class="comment-copy">good point. I'll continue with this approximation for now and keep that other solution in mind. Thank you for your help</span>
