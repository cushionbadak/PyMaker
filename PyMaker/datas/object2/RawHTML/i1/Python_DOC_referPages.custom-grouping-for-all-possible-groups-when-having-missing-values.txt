<div class="post-text" itemprop="text">
<p>I have a dictionary which represents a set of products. I need to find all duplicate products within these products. If products have same <code>product_type</code>,<code>color</code> and <code>size</code> -&gt; they are duplicates. I could easily group by ('product_type','color','size') if I did not have a problem: some values are missing. Now I have to find all possible groups of products that might be duplicates between themselves. <strong>This means that some elements can appear in multiple groups.</strong></p>
<p>Let me illustrate:</p>
<pre><code>import pandas as pd


def main():
    data= {'product_id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
         'product_type': ['shirt', 'shirt', 'shirt', 'shirt', 'shirt', 'hat', 'hat', 'hat', 'hat', 'hat', 'hat', ],
         'color': [None, None, None, 'red', 'blue', None, 'blue', 'blue', 'blue', 'red', 'red', ],
                       'size': [None, 's', 'xl', None, None, 's', None, 's', 'xl', None, 'xl', ],
                       }
    print(data)

if __name__ == '__main__':
    main()
</code></pre>
<p>for this data:</p>
<p><a href="https://i.stack.imgur.com/eNU4J.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/eNU4J.png"/></a></p>
<p>I need this result - list of possibly duplicate products for each possible group (take only the biggest super groups):</p>
<p><a href="https://i.stack.imgur.com/XU2D9.png" rel="nofollow noreferrer"><img alt="![enter image description here" src="https://i.stack.imgur.com/XU2D9.png"/></a></p>
<p>So for example, lets take "shirt" with <code>id=1</code>
this product does not have color or size so he can appear in a possible "duplicates group" together with shirt #2 (which has size "s" but does not have color) and shirt #4 (which has color "red" but does not have size). So these three shirts (1,2,4) are possibly duplicates with same color "red" and size "s".</p>
<p>I tried to implement it by looping through all possible combinations of missing values but it feels wrong and complex.</p>
<p>Is there a way to get the desired result?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create all possible keys that are not <code>None</code> and then check which item falls into what key - respecting the <code>None</code>s:</p>
<pre><code>data= {'product_id'  : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
       'product_type': ['shirt', 'shirt', 'shirt', 'shirt', 'shirt', 'hat',
                        'hat', 'hat', 'hat', 'hat', 'hat', ],
       'color'       : [None, None, None, 'red', 'blue', None, 'blue', 
                        'blue', 'blue', 'red', 'red', ],
       'size'        : [None, 's', 'xl', None, None, 's', None, 's', 'xl', None, 'xl', ]}



from itertools import product

# create all keys without None in it     
p = product((t for t in set(data['product_type']) if t), 
            (c for c in set(data['color']) if c), 
            (s for s in set(data['size']) if s))

# create the things you have in stock
inventar = list( zip(data['product_id'],data['product_type'],data['color'],data['size']))
d = {}

# order things into its categories
for cat in p:
    d.setdefault(cat,set())  # uses a set to collect the IDs
    for item in inventar:
        TY, CO, SI = cat
        ID, TYPE, COLOR, SIZE = item

        # the (TYPE or TY) will substitute TY for any TYPE that is None etc.
        if (TYPE or TY)==TY and (COLOR or CO)==CO and (SIZE or SI)==SI:
            d[cat].add(ID)

print(d)
</code></pre>
<p>Output:</p>
<pre><code># category-key            id's that match
{('shirt', 'blue', 's') : {1, 2, 5}, 
 ('shirt', 'blue', 'xl'): {1, 3, 5}, 
 ('shirt', 'red', 's')  : {1, 2, 4}, 
 ('shirt', 'red', 'xl') : {1, 3, 4}, 
 ('hat', 'blue', 's')   : {8, 6, 7}, 
 ('hat', 'blue', 'xl')  : {9, 7}, 
 ('hat', 'red', 's')    : {10, 6},
 ('hat', 'red', 'xl')   : {10, 11}}
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product(*iterables)</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip(*iterables)</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value testing</a></li>
</ul>
</div>
