<div class="post-text" itemprop="text">
<p>I have the following list of lists</p>
<pre><code>a = [[1,2,3],[4,5,6,7]]
</code></pre>
<p>trying to get the following result</p>
<pre><code>b = [[1,2],[1,3],[2,3],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7]]
</code></pre>
<p>I have tried to use </p>
<pre><code>b = list(itertools.product(a))
</code></pre>
<p>but I got a combination of the first with the second. Appreciate any help thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for a solution using the standard library, this uses a list comprehension to call <code>itertools.combinations</code> on each sublist.</p>
<pre><code>from itertools import combinations
b = [list(c) for l in a for c in combinations(l, r=2)]
b
# [[1, 2], [1, 3], [2, 3], [4, 5], [4, 6], [4, 7], [5, 6], [5, 7], [6, 7]]
</code></pre>
<hr/>
<p>Another very functional way of computing this is using <code>map</code>; this returns a list of tuples.</p>
<pre><code>from itertools import chain, combinations
from functools import partial

fn = partial(combinations, r=2)
b = list(chain.from_iterable(map(fn, a))) 
b 
# [(1, 2), (1, 3), (2, 3), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7)]
</code></pre>
</div>
<span class="comment-copy">I think that gives a list of tuples not a list of lists</span>
<span class="comment-copy">b = list(itertools.product(*a)) gives a combination of the first list with the second</span>
<span class="comment-copy">this has worked well.</span>
<span class="comment-copy">you can use itertools.chain to avoid a nested comprehension</span>
<span class="comment-copy">@Tryph Edited, but it isn't very readable.</span>
<span class="comment-copy">@coldspeed I was thinking about something like this: <code>list(chain(*(combinations(l, r=2) for l in a)))</code> just to avoid a <i>nested</i> comprehension. Single comprehension are readable enough IMO</span>
<span class="comment-copy">@Tryph I guess that's another option, although I don't usually enjoy mixing functional programming and comprehension syntax.</span>
