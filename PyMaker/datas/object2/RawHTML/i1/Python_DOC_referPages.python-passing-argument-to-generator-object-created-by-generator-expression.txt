<div class="post-text" itemprop="text">
<p>so i have this gen object:</p>
<pre><code>yld123cu = (x * u for x in range(1, 4))
</code></pre>
<p>which i can only use like so:</p>
<pre><code>u = 2  # some user given value
for i in yld123cu:
    print(i, end=' ')
</code></pre>
<p>is there any syntax to avoid the extra line with u=.. assignment?
any way to put the u value inside the for statement?</p>
<p>i'd want something similar to below but using gen expression, not function:</p>
<pre><code>def yld123u(u):
    for i in range(1, 4):
        yield i * u

for i in yld123u(2):
    print(i, end=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since a generator expression cannot have its own scope, the favored approach would be to define a generator function as you suggested.</p>
<pre><code>def yld123u(u):
    for i in range(1, 4):
        yield i * u
</code></pre>
<p>If you need to update <code>u</code> along the way and this is the reason you want to avoid the above, then know that you can <a href="https://stackoverflow.com/q/19302530/5079316"><code>send</code></a> a value to a generator.</p>
<pre><code>def yld123u(u):
    for i in range(1, 4):
        received = yield i * u # a sent value will be assigned to 'received'
        u = u if received is None else received
</code></pre>
<h2>Examples</h2>
<p>The generator still behaves the same if you do not use send.</p>
<pre><code>for x in yld123u(4):
    print(x)
</code></pre>
<h3>Output</h3>
<pre><code>4
8
12 
</code></pre>
<p>You can use <code>send</code> to update the value of <code>u</code>.</p>
<pre><code>gen = yld123u(4)
v0 = next(gen)
v1 = gen.send(0)
v2 = gen.send(4)
print(v0, v1, v2)
</code></pre>
<h3>Output</h3>
<pre><code>4 0 12
</code></pre>
<h2>Input loop</h2>
<p>If you need the generator to interact with user input, here is a past answer of mine which suggest a way to implement a <a href="https://stackoverflow.com/a/50918359/5079316">yield-receive generator usable in a for-loop</a>.</p>
<pre><code>class YieldReceive:
    stop_iteration = object()

    def __init__(self, gen):
        self.gen = gen
        self.next = next(gen, self.stop_iteration)

    def __iter__(self):
        return self

    def __next__(self):
        if self.next is self.stop_iteration:
            raise StopIteration
        else:
            return self.next

    def send(self, value):
        try:
            self.next = self.gen.send(value)
        except StopIteration:
            self.next = self.stop_iteration
</code></pre>
<h3>Usage</h3>
<pre><code>it = YieldReceive(yld123u(4))
for x in it:
    print(x)
    it.send(int(input('Enter next u value: ')))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>lambda</code>. This works for me:</p>
<pre><code>yld123cu = lambda u: (x * u for x in range(1, 4))

for i in yld123cu(2):
    print(i, end=' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try like this. </p>
<blockquote>
<p><strong>Note:</strong> Here, we don't have a problem of using named lambda function. </p>
</blockquote>
<pre><code>for i in (lambda u: (x * u for x in range(1, 4)))(u=2): 
    print(i, end=' ')
</code></pre>
<p>or</p>
<pre><code>for i in (lambda u: (x * u for x in range(1, 4)))(2): 
    print(i, end=' ')
</code></pre>
<blockquote>
<p>» Output</p>
</blockquote>
<pre><code>2 4 6 
</code></pre>
</div>
<span class="comment-copy">"id want something similar to below but using gen expression, not function:" -- why? It's a perfectly valid and working solution. And behind the scenes there is more or less no difference between the two</span>
<span class="comment-copy">thank you guys for every reply! learned something from each of them today.  really appreciate it, amazing website))</span>
<span class="comment-copy">hey Olivier, thank you so much for fantastic insight and details! and the link for the send method too. been playing all day with pycharm debugger wrapping my head around it.. so gen functions + send/next are the way to go, okey. i've only been studying python a few weeks now after c-family, just got to the oop part yesterday so really enjoyed stepping through your class sample too. its such noble work you're doing so generously helping people, all the best to you!!</span>
<span class="comment-copy">thank you Uli, but this still makes it into a function. i was more interested in keeping it a generator object and still be able to pass parameter to it with some function-call-like syntax</span>
<span class="comment-copy">A named lambda is considered <a href="https://stackoverflow.com/a/38381663/5079316">bad practice by PEP8</a></span>
<span class="comment-copy">Thank you @OlivierMelançon for this hint. +1</span>
