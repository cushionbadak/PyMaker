<div class="post-text" itemprop="text">
<p>I wondered if it is possible to access variables local to the function running at the time ctrl-C interrupts the flow.  Example, where main() is running when ctrl-C is pressed:</p>
<pre><code>def main(myInfo):
    signal.signal(signal.SIGINT, KeyboardBreak)
    reportOut(myInfo)

def KeyboardBreak(signum, frame):
    reportOut(myInfo)

def reportOut(myInfo):
    print myInfo
</code></pre>
<p>I would like reportOut() to run whether main() gets all the way down to where it calls reportOut(), or the flow is interrupted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your signal handler needs access to the variable <code>myInfo</code>. The easiest way to do this is to define <code>KeyboardBreak()</code> <em>inside</em> <code>main()</code> so that it has access to <code>myInfo</code> via closure.</p>
<pre><code>def main(myInfo):

    def KeyboardBreak(signum, frame):
        reportOut(myInfo)

    signal.signal(signal.SIGINT, KeyboardBreak)
    reportOut(myInfo)

def reportOut(myInfo):
    print myInfo
</code></pre>
<p>Alternatively, you can write a factory function that <em>creates</em> your signal handler, again using a closure to hold <code>myInfo</code>. This approach is probably best when either of these functions is complex.</p>
<pre><code>def main(myInfo):
    signal.signal(signal.SIGINT, KeyboardBreakFactory(myinfo))
    reportOut(myInfo)

def KeyboardBreakFactory(myinfo):

    def KeyboardBreak(signum, frame):
        reportOut(myInfo)

    return KeyboardBreak

def reportOut(myInfo):
    print myInfo
</code></pre>
</div>
<span class="comment-copy">Awesome, thank you, it works.  Helpful to see both the easiest way and the better way.</span>
