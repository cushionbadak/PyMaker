<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/104420/how-to-generate-all-permutations-of-a-list-in-python">How to generate all permutations of a list in Python</a>
<span class="question-originals-answer-count">
                    31 answers
                </span>
</li>
</ul>
</div>
<p>trying to make a function permutations(s) that takes a set of elemnts and returns a collection of all its permutations, where the permutations are of type tuple. 
Here is my code:</p>
<pre><code>def permutations(s):
str1 = list(s)
if len(str1) &lt;= 1:
    print(s)
else:
    for i in range(0, len(s)):
        str1[0], str1[i] = str1[i], str1[0]
        permutations(str1[1:])
        str1[0], str1[i] = str1[i], str1[0]
</code></pre>
<p>given this input</p>
<pre><code>print(sorted(permutations({1,2,3})))
</code></pre>
<p>it should return </p>
<pre><code>[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
</code></pre>
<p>but after alot of headache i can only seem to get </p>
<pre><code>[3][2][3][1][1][2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">permutations from itertools</a> in the standard library to compute all permutations</p>
<pre><code>from itertools import permutations
out = list(permutations({1,2,3}))
print(out)
#Output
[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably looking for an algorithm, e.g. recursive algorithm. Some times ago I wrote it (as exercise):</p>
<pre><code>def get_permutations(array):
    result = list()

    def permute(x, index, acc=[0] * len(array)):
        if index == len(array):
            result.append(acc[:])
            acc = list()
            return None
        for j in range(len(x)):
            acc[index] = x[j]
            _x = x[:]
            _x.pop(j)
            permute(_x, index + 1, acc)

    permute(array, 0)
    return result
</code></pre>
</div>
<span class="comment-copy">Your if statement checks that the length of s is 1, then prints it.  why do you expect it to have 3 elements?</span>
