<div class="post-text" itemprop="text">
<p>Newbie to Python here. I am trying to find the longest length of a value within a series of nested lists. Here is an example list type:</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]
</code></pre>
<p>The answer that I want here is <code>8</code>, but this could change if the list is updated.</p>
<p>When I use <code>print(len(tableData))</code> I get 3, the number of nested lists. I cannot get a loop working that solves this either.</p>
<p>Sorry for this being a really simple question, but I am at a loss. </p>
<p>Thanks in advance for the help. </p>
</div>
<div class="post-text" itemprop="text">
<p>As you note, <code>len(tableData)</code> gives the number of elements of <code>tableData</code>. What you want is the max of the lengths of the elements <em>of the elements</em> of <code>tableData</code>:</p>
<pre><code>l = max(len(x) for sublist in tableData for x in sublist)
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; print(l)
8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Iterate over each element and get its <code>len()</code> for comparison.</p>
<pre><code>tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]

maxCount = 0
for lst in tableData:
    for elem in lst:
        maxCount = max(maxCount, len(elem))

print(maxCount)
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import chain

chain.from_iterable(tableData)
</code></pre>
<p>This now behaves as if you had one long list of single values, instead of a list of lists of values. Now it's trivial to find the longest item in that flattened list:</p>
<pre><code>max(chain.from_iterable(tableData), key=len)
</code></pre>
<p>This returns <code>'cherries'</code>.</p>
<pre><code>max(map(len, chain.from_iterable(tableData)))
</code></pre>
<p>This returns <code>8</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data=np.array([['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]).reshape(-1)
&gt;&gt;&gt; max(data,key=len)
'cherries'
&gt;&gt;&gt; len(max(data,key=len))
8
</code></pre>
<p>Contributing my part to this answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try with loop...</p>
<pre><code>l = 0 
for row in tableData: 
     for col in row: 
         l = len(col) if l &lt; len(col) else l 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>maxLength = 0
for row in tableData:
    maxRowElementLength = len(max(row, key=len))
    if maxLength &lt; maxRowElementLength:
        maxLength = maxRowElementLength

print(maxLength)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps this will work for you:</p>
<pre><code>new_list = []
for sub_list in tableData:
    for item in sub_list:
        new_list.append(item)

max_element = max(new_list, key=len)

print(max_element) # this actually prints the item
print(len(max_element)) # this will give you the length
</code></pre>
</div>
<span class="comment-copy">If I may say so, this here is the fastest way to do it from all the versions on offer. It's about twice as fast as a double generator expression, and about three times as fast as two <code>for</code> loops. Not that it matters much for lists this size, but just sayingâ€¦</span>
<span class="comment-copy">Please edit your question so as to explain your code (you might also consider <a href="https://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">this post</a> explaining why it's useful to go beyond a code-only answer)</span>
<span class="comment-copy">Thanks for the edit, ukemi</span>
