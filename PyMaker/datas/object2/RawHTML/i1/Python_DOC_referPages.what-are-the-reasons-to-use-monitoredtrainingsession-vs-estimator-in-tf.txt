<div class="post-text" itemprop="text">
<p>I see many examples with either MonitoredTrainingSession or tf.Estimator as the training framework. However it's not clear why I would use one over the other. Both are configurable with SessionRunHooks. Both integrate with tf.data.Dataset iterators and can feed training/val datasets. I'm not sure what the benefits of one setup would be.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer is that <code>MonitoredTrainingSession</code> allows user to access Graph and Session objects, and training loop, while <code>Estimator</code> hides the details of graphs and sessions from the user, and generally, makes it easier to run training, especially, with <code>train_and_evaluate</code>, if you need to evaluate periodically. </p>
<p><code>MonitoredTrainingSession</code> different from plain tf.Session() in a way that it handles variables initialization, setting up file writers and also incorporates functionality for distributed training.</p>
<p><code>Estimator API</code>, on the other hand, is a high-level construct just like <code>Keras</code>. It's maybe used less in the examples because it was introduced later. It also allows to distribute training/evaluation with <code>DistibutedStrategy</code>, and it has several canned estimators which allow rapid prototyping. </p>
<p>In terms of model definition they are pretty equal, both allow to use either <code>keras.layers</code>, or define completely custom model from the ground up.  So, if, for whatever reason, you need to access graph construction or customize training loop, use <code>MonitoredTrainingSession</code>. If you just want to define model, train it, run validation and prediction without additional complexity and boilerplate code, use <code>Estimator</code></p>
</div>
