<div class="post-text" itemprop="text">
<blockquote>
<p>elis_client_example.py</p>
</blockquote>
<pre><code>from __future__ import division, print_function

import argparse
import json
import os
import csv
import requests
import polling

DEFAULT_API_URL='https://all.rir.rossum.ai/'

class ElisClient(object):

def __init__(self, secret_key, url=DEFAULT_API_URL):
    self.secret_key = secret_key
    self.url = url
    # we do not use requests.auth.HTTPBasicAuth
    self.headers = {'Authorization': 'secret_key ' + self.secret_key}

def send_document(self, document_path):

    with open(document_path, 'rb') as f:
        content_type = self._content_type(document_path)
        response = requests.post(
            self.url + '/document',
            files={'file': (os.path.basename(document_path), f, content_type)},
            headers=self.headers)
    return json.loads(response.text)

@staticmethod
def _content_type(document_path):
    return 'image/png' if document_path.lower().endswith('.png') else 'application/pdf'

def get_document_status(self, document_id):

    response = requests.get(self.url + '/document/' + document_id, headers=self.headers)
    response_json = json.loads(response.text)
    if response_json['status'] != 'ready':
        response_json = response_json
        #print(response_json)
    return response_json

def get_document(self, document_id, max_retries=30, sleep_secs=5):
    """
    Waits for document via polling.
    """
    def is_done(response_json):
        return response_json['status'] != 'processing'

    return polling.poll(
        lambda: self.get_document_status(document_id),
        check_success=is_done,
        step=sleep_secs,
        timeout=int(round(max_retries * sleep_secs)))

def parse_args():
parser = argparse.ArgumentParser(description='Elis API client example.')
parser.add_argument('document_path', metavar='DOCUMENT_PATH',
                    help='Document path (PDF/PNG)')
parser.add_argument('-s', '--secret-key', help='Secret API key')
parser.add_argument('-u', '--base-url', default=DEFAULT_API_URL, help='Base API URL')

return parser.parse_args()

def main():
args = parse_args()
client = ElisClient(args.secret_key, args.base_url)
#print('Submitting document:', args.document_path)

send_result = client.send_document(args.document_path)
document_id = send_result['id']
#print('Document id:', document_id)
extracted_document = client.get_document(document_id)
#print('Extracted data:')
#Extracted_data =(json.dumps(extracted_document, indent=4))
#print(json.dumps(extracted_document, indent=4))
with open('jfile.json', 'w') as jsonfile:
 json.dump(extracted_document, jsonfile, sort_keys = True, indent = 4,ensure_ascii = False)

if __name__ == '__main__':
main()
</code></pre>
<blockquote>
<p>Run the code in command propmt:  python elis_client_example.py input.pdf -s "authentication key"
  But while running the code in python3(script) directly error comes like document path is not defined.
  Run the code in command propmt:  python elis_client_example.py input.pdf -s "authentication key"
  But while running the code in python3(script) directly error comes like document path is not defined.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>this is a command line code, so when you run the same in command prompt, u pass the document name while u execute your program. But when u run in any ide you actually run as "<strong>python elis_client_example.py</strong>" and not like you ran in command prompt. hence the error.</p>
</div>
<span class="comment-copy">please someone help me...i am stuck here</span>
<span class="comment-copy">Are you getting an explicit error? Can you provide us with your traceback?</span>
<span class="comment-copy">I don't understand what <i>running the code in python3(script) directly</i> means. (Is it an IDE? Which one? IDLE, PythonWin, PyCharm, Jupyter Notebook...?) Your <code>add_argument</code> call says you have to supply the name of the file on the command line, and it's clear that when you <i>run the code in python3(script) directly</i> you are not doing that. It's a configuration setting in PythonWin and PyCharm, for example.</span>
