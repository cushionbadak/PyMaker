<div class="post-text" itemprop="text">
<p>I have a stream of user events. I've mapped them into KV{ userId, event }, and assigned timestamps.</p>
<p>This is to run in streaming mode. I would like to have be able to create the following input-output result:</p>
<p>session window gap=1</p>
<ul>
<li>input: <code>user=1, timestamp=1, event=a</code></li>
<li>input: <code>user=2, timestamp=2, event=a</code></li>
<li>input: <code>user=2, timestamp=3, event=a</code></li>
<li>input: <code>user=1, timestamp=2, event=b</code></li>
<li>time: <code>lwm=3</code></li>
<li>output: <code>user=1, [ { event=a, timestamp=1 }, { event=b, timestamp=2 } ]</code></li>
<li>time: <code>lwm=4</code></li>
<li>output: <code>user=2, [ { event=a, timestamp=2 }, { event=a, timestamp=3 } ]</code></li>
</ul>
<p>So that I can write my function to reduce thee list of events in the session window for the user as well as the start and end time of the session window.</p>
<p>How do I write this? (If you answer; "look at the examples", it's not a valid answer, because they never feed the list of events into the reducer with the window as a parameter)</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand this correctly, this would be a follow-up to this <a href="https://stackoverflow.com/questions/55219481/apache-beam-per-user-session-windows-are-unmerged/">question</a> and naturally accomplished by adding the Group By Key step as I propose in my solution there.</p>
<p>So, referring to my previous explanation and focusing here on the changes only, if we have a pipeline like this:</p>
<pre class="lang-py prettyprint-override"><code>events = (p
  | 'Create Events' &gt;&gt; beam.Create(user1_data + user2_data) \
  | 'Add Timestamps' &gt;&gt; beam.Map(lambda x: beam.window.TimestampedValue(x, x['timestamp'])) \
  | 'keyed_on_user_id'      &gt;&gt; beam.Map(lambda x: (x['user_id'], x))
  | 'user_session_window'   &gt;&gt; beam.WindowInto(window.Sessions(session_gap),
                                             timestamp_combiner=window.TimestampCombiner.OUTPUT_AT_EOW) \
  | 'Group' &gt;&gt; beam.GroupByKey() \
  | 'analyze_session'         &gt;&gt; beam.ParDo(AnalyzeSession()))
</code></pre>
<p>Now the elements are arranged as you describe in the question description so we can simply log them in <code>AnalyzeSession</code>:</p>
<pre class="lang-py prettyprint-override"><code>class AnalyzeSession(beam.DoFn):
  """Prints per session information"""
  def process(self, element, window=beam.DoFn.WindowParam):
    logging.info(element)
    yield element
</code></pre>
<p>to obtain the desired results: </p>
<pre class="lang-py prettyprint-override"><code>INFO:root:('Groot', [{'timestamp': 1554203778.904401, 'user_id': 'Groot', 'value': 'event_0'}, {'timestamp': 1554203780.904401, 'user_id': 'Groot', 'value': 'event_1'}])
INFO:root:('Groot', [{'timestamp': 1554203786.904402, 'user_id': 'Groot', 'value': 'event_2'}])
INFO:root:('Thanos', [{'timestamp': 1554203792.904399, 'user_id': 'Thanos', 'value': 'event_4'}])
INFO:root:('Thanos', [{'timestamp': 1554203784.904398, 'user_id': 'Thanos', 'value': 'event_3'}, {'timestamp': 1554203777.904395, 'user_id': 'Thanos', 'value': 'event_0'}, {'timestamp': 1554203778.904397, 'user_id': 'Thanos', 'value': 'event_1'}, {'timestamp': 1554203780.904398, 'user_id': 'Thanos', 'value': 'event_2'}])
</code></pre>
<p>If you want to avoid redundant information such as having the <code>user_id</code> and <code>timestamp</code> as part of the values they can be removed in the <code>Map</code> step. 
As per the complete use case (i.e. reducing the aggregated events on a per-session level) we can do stuff like counting the number of events or session duration with something like this:</p>
<pre class="lang-py prettyprint-override"><code>class AnalyzeSession(beam.DoFn):
  """Prints per session information"""
  def process(self, element, window=beam.DoFn.WindowParam):
    user = element[0]
    num_events = str(len(element[1]))
    window_end = window.end.to_utc_datetime()
    window_start = window.start.to_utc_datetime()
    session_duration = window_end - window_start

    logging.info("&gt;&gt;&gt; User %s had %s event(s) in %s session", user, num_events, session_duration)

    yield element
</code></pre>
<p>which, for my example, will output the following:</p>
<pre class="lang-py prettyprint-override"><code>INFO:root:&gt;&gt;&gt; User Groot had 2 event(s) in 0:00:07 session
INFO:root:&gt;&gt;&gt; User Groot had 1 event(s) in 0:00:05 session
INFO:root:&gt;&gt;&gt; User Thanos had 4 event(s) in 0:00:12 session
INFO:root:&gt;&gt;&gt; User Thanos had 1 event(s) in 0:00:05 session
</code></pre>
<p>Full code <a href="https://gist.github.com/gxercavins/522a7f71f7bd86916c6db80abb8e2a0b" rel="nofollow noreferrer">here</a></p>
</div>
