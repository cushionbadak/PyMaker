<div class="post-text" itemprop="text">
<p>I am new to Keras and the Siamese network architecture. I have developed a Siamese network with three inputs and one output as follows. </p>
<pre><code>def get_siamese_model(input_shape):


# Define the tensors for the three input phrases
anchor = Input(input_shape, name='anchor')
positive = Input(input_shape, name='positive')
negative = Input(input_shape, name='negative')

# Convolutional Neural Network
model = Sequential()
model.add(Conv2D(64, kernel_size=(2, 2), activation='relu', input_shape=input_shape, padding='same'))
model.add(Conv2D(32, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(Conv2D(16, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(Conv2D(8, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(Conv2D(4, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(Conv2D(2, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(Conv2D(1, kernel_size=(2, 2), activation='relu', padding='same'))
model.add(MaxPooling2D(pool_size=(2,1)))
model.add(Flatten())

# Generate the encodings (feature vectors) for the three phrases
anchor_out = model(anchor)
positive_out = model(positive)
negative_out = model(negative)

# Add a customized layer to combine individual output
concat = Lambda(lambda tensors:K.concatenate((tensors[0],tensors[1],tensors[2]),0))
output = concat([anchor_out, positive_out, negative_out])


# Connect the inputs with the outputs
siamese_net = Model(inputs=[anchor,positive,negative],outputs=output)

#plot the model
plot_model(siamese_net, to_file='siamese_net.png',show_shapes=True, show_layer_names=True)

#Error optimization
siamese_net.compile(optimizer=Adam(), 
 loss=triplet_loss)

# return the model
return siamese_net
</code></pre>
<p>while using <code>model.fit()</code> I have written following code:</p>
<pre><code>model = get_siamese_model(input_shape)
X = {
    'anchor' : anchor,
    'positive' : positive,
    'negative' : negative
}

model.fit(np.asarray(X), Y)
</code></pre>
<p>I am getting following error message:</p>
<pre class="lang-none prettyprint-override"><code>ValueError: Error when checking model input: 
The list of Numpy arrays that you are passing to your model is not the size the model expected. 
Expected to see 3 array(s), but instead got the following list of 1 arrays: [array({'anchor': array([[[[ 4.49218750e-02]...
</code></pre>
<p>Any help is appreciated. Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code works for me. Because your names are <code>(anchor, positive, negative)</code>, you can use those directly as the keys to your dictionary when passing input. Also, you should make use of the <code>concatenate</code> layer in Keras instead of defining a <code>Lambda</code>. Note that I changed the loss for purposes of this example.</p>
<pre><code>from keras.layers import Input, Conv2D, MaxPooling2D, Flatten, concatenate
from keras.models import Model, Sequential
from keras.optimizers import Adam
from keras.losses import mean_squared_error
import numpy as np

def get_siamese_model(input_shape):


    # Define the tensors for the three input phrases
    anchor = Input(input_shape, name='anchor')
    positive = Input(input_shape, name='positive')
    negative = Input(input_shape, name='negative')

    # Convolutional Neural Network
    model = Sequential()
    model.add(Conv2D(64, kernel_size=(2, 2), activation='relu', input_shape=input_shape, padding='same'))
    model.add(Conv2D(32, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(Conv2D(16, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(Conv2D(8, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(Conv2D(4, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(Conv2D(2, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(Conv2D(1, kernel_size=(2, 2), activation='relu', padding='same'))
    model.add(MaxPooling2D(pool_size=(2,1)))
    model.add(Flatten())

    # Generate the encodings (feature vectors) for the three phrases
    anchor_out = model(anchor)
    positive_out = model(positive)
    negative_out = model(negative)

    # Add a concatenate layer
    output = concatenate([anchor_out, positive_out, negative_out])

    # Connect the inputs with the outputs
    siamese_net = Model(inputs=[anchor,positive,negative],outputs=output)

    # Error optimization
    siamese_net.compile(optimizer=Adam(), loss=mean_squared_error)

    # Summarize model
    siamese_net.summary()

    # Return the model
    return siamese_net

input_shape = (100, 100, 1)
model = get_siamese_model(input_shape)
X = {'anchor': np.ones((5, 100, 100, 1)),   # define input as dictionary
     'positive': np.ones((5, 100, 100, 1)), 
     'negative': np.ones((5, 100, 100, 1))}
Y = np.ones((5, 15000))
model.fit(X, Y)                        # use a dictionary
model.fit([i for i in X.values()], Y)  # use a list
</code></pre>
</div>
<span class="comment-copy">Just pass in <code>X</code> as a dictionary assuming your inputs have the same names. Otherwise, you need to pass in your input as a list: <code>[i for i in X.values()]</code>. You're getting this error because <code>np.asarray(X)</code> returns a single array.</span>
<span class="comment-copy">@LukeDeLuccia thank you sir for your help. But when I am passing inputs with list, I am getting error: AttributeError: 'tuple' object has no attribute 'ndim' and if I am passing dictionary I am getting error: ValueError: No data provided for "input_4". Need data for each key in: ['input_4', 'input_5', 'input_6']</span>
<span class="comment-copy">You should include your model definition in the question. The dictionary error means that your inputs are not named <code>anchor, ...</code> but instead named <code>input_4, ...</code>. In addition, the first error means that you converted to a <code>tuple</code> instead of a <code>list</code>. If you want to get this to work temporarily, you can pass in a dictionary with <code>anchor, positive, negative</code> replaced by <code>input_4, input_5, input_6</code>, although this isn't a good solution. Your input names should be <code>anchor, positive, negative</code> when you define them.</span>
<span class="comment-copy">Thank you.. updated code with name.. but still getting error..Tuple has no attribute ndim. Updated question with model definition. Thank you..</span>
<span class="comment-copy">Thank you..It worked. I was passing Y as Y=shape(None,None) as I am working with embedding and triplet loss. That's why I was getting error tuple has   no attribute ndim.</span>
