<div class="post-text" itemprop="text">
<p>I rented MySQL database through Amazon's RDS service. I managed to get used to the database and can manipulate it in Python. I am trying to set the timeout time of my connection to the MySQL database, but am having no luck in doing so. My connection to the MySQL database through Python always times out at 10-11 minutes.</p>
<p>To edit your MySQL server's value for timeouts you need to access its config file. I took a look at the Amazon RDS documentation and learned with Amazon this is done through "Parameter groups". I created a new parameter group and set the values: "connect_timeout", "interactive_timeout", and "wait_timeout" each to 1000000. I associated my database with this parameter group, and then restarted it. I reconnected to my database in Python. After about 10 minutes of inactivity my connection still timed out.</p>
<p>I tried explicitly specifying the timeout in Python in addition to specifying it in my Parameter group, but still no luck. Here's the code I am trying to run:</p>
<pre><code>import time
import mysql.connector
DataBase = 'DataBase'
Username = 'Username'
Password = 'Password'
Host = 'mydb.randomstring.region.rds.amazonaws.com'
cnx = mysql.connector.connect(
    user=Username, 
    password=Password, 
    host=Host, 
    database=DataBase,
    connect_timeout=1000000
)
mycursor = cnx.cursor()
time.sleep(900)
if cnx.is_connected():
    print('Database did not time out.')
else:
    print('Database timed out.')

&gt;&gt;&gt; Database timed out.
</code></pre>
<p>Anyone have any ideas as to why this is happening?</p>
<p>Also, I get this timeout error if I try to run a command after a period of inactivity, instead of just asking Python if my connection is still open. This is the error I get if I try to issue a command after inactivity:</p>
<pre><code>&gt;&gt;&gt; # Establish a MySQL connection and do nothing for about 10 minutes.
&gt;&gt;&gt; sql = "INSERT INTO Table (value_1, value_2) VALUES (%s, %s)"
&gt;&gt;&gt; val = ('A', 'B')
&gt;&gt;&gt; mycursor.execute(sql, val)
Traceback (most recent call last):
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 691, in _read_bytes
    data = self._rfile.read(num_bytes)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\socket.py", line 589, in readinto
    return self._sock.recv_into(b)
ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 1, in &lt;module&gt;
    mycursor.execute(sql, val)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\cursors.py", line 170, in execute
    result = self._query(query)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\cursors.py", line 328, in _query
    conn.query(q)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 517, in query
    self._affected_rows = self._read_query_result(unbuffered=unbuffered)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 732, in _read_query_result
    result.read()
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 1075, in read
    first_packet = self.connection._read_packet()
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 657, in _read_packet
    packet_header = self._read_bytes(4)
  File "C:\Users\MyUsername\AppData\Local\Programs\Python\Python37\lib\site-packages\pymysql\connections.py", line 699, in _read_bytes
    "Lost connection to MySQL server during query (%s)" % (e,))
pymysql.err.OperationalError: (2013, 'Lost connection to MySQL server during query ([WinError 10054] An existing connection was forcibly closed by the remote host)')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found a solution. I am switching to PostgreSQL.</p>
</div>
<span class="comment-copy">Why do you need the database to stay connected in one <i>idle</i> session for that long, anyway? I'm pretty sure that if you change the script to do an occasional query, even just <code>SELECT 1</code> or something even more innocuous, it'll stay up. (If you really need it to.)</span>
<span class="comment-copy">I'm populating a table with data. I want to populate the table with data as fast as possible, so I don't want the overhead of opening a new connection each time. The data will come sporadically, so I don't want my connection to timeout in between, and I don't want to have to preform some action to keep from timing out. I figured it would just be easiest to set the timeout of my connection to some high number... but that's been proving difficult.</span>
<span class="comment-copy">This doesn't sound like a database-generated timeout.  It sounds like the network is tearing down idle connections.  Where is the python code running?  EC2?  External machine?</span>
<span class="comment-copy">Im just running it on my own PC at home. Standard Python 3.7.2 64 Bit, Standard Windows 10.</span>
<span class="comment-copy">You could just test whether the connection is up before doing the query when that new data comes in. It may be exceedingly difficult to have the connection stay up.</span>
<span class="comment-copy">if host is available timeout has no effect.</span>
<span class="comment-copy">Could you elaborate more on what you mean by that?</span>
