<div class="post-text" itemprop="text">
<p>This looks like it should be simple, but for some reason I can't get there.</p>
<p>I have dicts that could be in several possible formats:</p>
<pre><code>dict1 = {"repo": "val1", "org":"val2"}
dict2 = {"key1":"repo", "key2":"org"}
dict3 = {"key1":"org and stuff"}
dict4 = {"org and stuff":"value1"}
dict5 = {"key1":{"value1":"value2"}, "key2":{"1":"org"}}
dict6 = {"org":{"value1":"value2"}, "key2":{"value1":"value2"}}
dict7 = {"org":{"subkey1":{"value1":"value2"}}, "key2":{"value1":"value2"}}
dict8 = {"key1":{"subkey1":{"value1":"org"}}, "key2":{"value1":"value2"}}
</code></pre>
<p>I want to search for the string <code>'org'</code> and if it is anywhere in the dict (key, value, key[subkey][value], etc.), return true. I do not want partial string matches.</p>
<p>That is, I'm looking for the following result:</p>
<pre><code>True
True
False
False
True
True
True
True
</code></pre>
<p>I have read these questions, but none of them quite answer because I could have nested dicts:</p>
<p><a href="https://stackoverflow.com/questions/47359801/how-to-search-for-all-the-characters-from-a-string-in-all-dictionary-values?noredirect=1&amp;lq=1">How to search for all the characters from a string in all Dictionary.Values()</a></p>
<p><a href="https://stackoverflow.com/questions/49525777/generic-function-to-replace-value-of-a-key-in-a-dict-or-nested-dict-or-list-of-d">Generic Function to replace value of a key in a dict or nested dict or list of dicts</a></p>
<p><a href="https://stackoverflow.com/questions/10484261/find-dictionary-items-whose-key-matches-a-substring">Find dictionary items whose key matches a substring</a></p>
<p><a href="https://stackoverflow.com/questions/5992666/filter-a-dict-of-dict">Filter a dict of dict</a></p>
<p><a href="https://stackoverflow.com/questions/12771710/how-can-i-check-if-the-characters-in-a-string-are-in-a-dictionary-of-values">How can I check if the characters in a string are in a dictionary of values?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use recursion!</p>
<pre><code>def indict(thedict, thestring):
    if thestring in thedict:
        return True
    for val in thedict.values():
        if isinstance(val, dict) and indict(val, thestring):
            return True
        elif isinstance(val, str) and val == thestring:
            return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Technically you could just convert the dict to a string and search if the word exists using <code>re</code>. Plus this requires no loops and should be faster/simpler than using loops/recursion if your dicts happen to be very large. Also if you have sub lists or tuples and such</p>
<pre><code>import re

def indict(data, word):
    return bool(re.search(f"'{word}'", str(data)))
</code></pre>
<p>For proof of concept, using your dicts I tested and this returns your desired results. </p>
<pre><code>dicts = (dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8)

for d in dicts:
  print(indict(d, 'org'))
</code></pre>
<p>This prints:</p>
<pre><code>True
True
False
False
True
True
True
True
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like adrtam got here first, but I basically came up with the same thing</p>
<pre><code>def searcher(input_dict, search_item):
    for key, value in input_dict.items():
        if search_item == key or search_item == value:
            return True
        elif type(value) is dict:
            searcher(input_dict[key], search_item) #search recursively
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a recursive function that returns <code>True</code> if the search string is in any of the keys or values of the given dict, or if the given dict is actually not a dict, returns if the search string is equal to it:</p>
<pre><code>def is_in(d, s):
    return s in d or any(is_in(v, s) for v in d.values()) if isinstance(d, dict) else d == s
</code></pre>
<p>so that:</p>
<pre><code>for d in [
    {"repo": "val1", "org":"val2"},
    {"key1":"repo", "key2":"org"},
    {"key1":"org and stuff"},
    {"org and stuff":"value1"},
    {"key1":{"value1":"value2"}, "key2":{"1":"org"}},
    {"org":{"value1":"value2"}, "key2":{"value1":"value2"}},
    {"org":{"subkey1":{"value1":"value2"}}, "key2":{"value1":"value2"}},
    {"key1":{"subkey1":{"value1":"org"}}, "key2":{"value1":"value2"}}]:
    print(is_in(d, 'org'))
</code></pre>
<p>outputs:</p>
<pre><code>True
True
False
False
True
True
True
True
</code></pre>
</div>
<span class="comment-copy">Be aware that the general answer is "This isn't a great idea, change your data structure." It's not impossible though :)</span>
<span class="comment-copy">Not sure you need <code>isinstance(val, str)</code> in the second case because <code>val == thestring</code> necessarily means it will be True.</span>
<span class="comment-copy"><code>isinstance()</code> part is not need indeed, but I keep it for consistency with the previous one. However, don't <code>return val == thestring</code>! I need to check next one if it is false.</span>
<span class="comment-copy">Right deleted that 2nd horrible remark :)</span>
