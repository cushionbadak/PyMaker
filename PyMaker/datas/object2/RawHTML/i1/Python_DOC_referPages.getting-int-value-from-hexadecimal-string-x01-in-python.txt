<div class="post-text" itemprop="text">
<p>How do I get the <a href="http://en.wikipedia.org/wiki/ASCII" rel="noreferrer">ASCII</a> value of a character as an <code>int</code> in <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://mail.python.org/pipermail/python-win32/2005-April/003100.html" rel="noreferrer">here</a>:</p>
<blockquote>
<p>function ord() would get the int value
  of the char. And in case you want to
  convert back after playing with the
  number, function chr() does the trick.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(ord('a') + 3)
'd'
&gt;&gt;&gt;
</code></pre>
<p>In Python 2, there is also the <code>unichr</code> function, returning the <a href="http://en.wikipedia.org/wiki/Unicode" rel="noreferrer">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>
<pre><code>&gt;&gt;&gt; unichr(97)
u'a'
&gt;&gt;&gt; unichr(1234)
u'\u04d2'
</code></pre>
<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>
<hr/>
<p><a href="https://docs.python.org/3/library/functions.html#ord" rel="noreferrer">ord() - Python 3.6.5rc1 documentation</a></p>
<p><a href="https://docs.python.org/2/library/functions.html#ord" rel="noreferrer">ord() - Python 2.7.14 documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Note that <code>ord()</code> doesn't give you the ASCII value per se; it gives you the numeric value of the character in whatever encoding it's in. Therefore the result of <code>ord('ä')</code> can be 228 if you're using Latin-1, or it can raise a <code>TypeError</code> if you're using UTF-8. It can even return the Unicode codepoint instead if you pass it a unicode:</p>
<pre><code>&gt;&gt;&gt; ord(u'あ')
12354
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for:</p>
<pre><code>ord()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer is correct, but there is a more clever/efficient way to do this if you need to convert a whole bunch of ASCII characters to their ASCII codes at once. Instead of doing:      </p>
<pre><code>for ch in mystr:
    code = ord(ch)
</code></pre>
<p>or the slightly faster:</p>
<pre><code>for code in map(ord, mystr):
</code></pre>
<p>you convert to Python native types that iterate the codes directly. On Python 3, it's trivial:</p>
<pre><code>for code in mystr.encode('ascii'):
</code></pre>
<p>and on Python 2.6/2.7, it's only slightly more involved because it doesn't have a Py3 style <code>bytes</code> object (<code>bytes</code> is an alias for <code>str</code>, which iterates by character), but they do have <code>bytearray</code>:</p>
<pre><code># If mystr is definitely str, not unicode
for code in bytearray(mystr):

# If mystr could be either str or unicode
for code in bytearray(mystr, 'ascii'):
</code></pre>
<p>Encoding as a type that natively iterates by ordinal means the conversion goes much faster; in local tests on both Py2.7 and Py3.5, iterating a <code>str</code> to get its ASCII codes using <code>map(ord, mystr)</code> starts off taking about twice as long for a <code>len</code> 10 <code>str</code> than using <code>bytearray(mystr)</code> on Py2 or <code>mystr.encode('ascii')</code> on Py3, and as the <code>str</code> gets longer, the multiplier paid for <code>map(ord, mystr)</code> rises to ~6.5x-7x.</p>
<p>The only downside is that the conversion is all at once, so your first result might take a little longer, and a truly enormous <code>str</code> would have a proportionately large temporary <code>bytes</code>/<code>bytearray</code>, but unless this forces you into page thrashing, this isn't likely to matter.</p>
</div>
<span class="comment-copy">which encoding in chr using ?</span>
<span class="comment-copy">Note that chr also acts as unichr in Python 3.   <code>chr(31415) -&gt; '窷'</code></span>
<span class="comment-copy">@njzk2: it doesn't use any character encoding it returns a bytestring in Python 2. It is upto you to interpret it as a character e.g., <code>chr(ord(u'й'.encode('cp1251'))).decode('cp1251') == u'й'</code>. In Python 3 (or <code>unichr</code> in Python 2), the input number is interpreted as Unicode codepoint integer ordinal: <code>unichr(0x439) == '\u0439'</code> (the first 256 integers has the same mapping as latin-1: <code>unichr(0xe9) == b'\xe9'.decode('latin-1')</code>, the first 128 -- ascii: <code>unichr(0x0a) == b'\x0a'.decode('ascii')</code> it is a Unicode thing, not Python).</span>
<span class="comment-copy">Why is the function called "ord"?</span>
<span class="comment-copy">@eLymar: it's short for "ordinal," which has similar linguistic roots to "order" - i.e. the numeric rather than symbolic representation of the character</span>
<span class="comment-copy">How can you find out which encoding you are using in a given situation?</span>
