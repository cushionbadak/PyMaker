<div class="post-text" itemprop="text">
<p>I am trying to build simple Python application, which will add icon to Tray.
I am also adding 2 menuitems to this tray icon, one to show Windows 10 toast message, and another one to stop application.</p>
<p>Program is launching correctly, icon appears, menu also appears.
So, process, which I ran with <code>self.icon.run()</code> should wait, untill I will not call <code>self.icon.stop()</code></p>
<p>The problem is, when I press first menuitem ("Test Notification") - toast notification is shown correctly, but AFTER this process goes out of <code>self.icon.run()</code> loop, and program finishes itself.</p>
<p>And I do not understand why is it so. According to documentation <code>self.icon.run()</code> should wait untill stop() call.</p>
<p>Am I doing something incorrecly? Here is my code:</p>
<pre><code>from win10toast import ToastNotifier
from pystray import *
from PIL import Image

class SysTrayUI:
    def __init__(self):
        self.icon_path = "icon.png"

        self.menu_items = [
            MenuItem("Test Notification", lambda: toaster.show_toast("Test")),
            MenuItem("Exit", lambda: self.icon.stop()),
        ]
        self.menu = Menu(*self.menu_items)

        self.icon = Icon("Test Name", menu=self.menu)
        self.icon.icon = Image.open(self.icon_path)

        self.icon.run()

toaster = ToastNotifier()
app = SysTrayUI()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Found the solution</p>
<p><code>toaster.show_toast</code> function has <code>threaded</code> parameter, which allows to launch function in separate thread</p>
<p>So, if you write it like this:</p>
<pre><code>MenuItem("Test Notification", lambda: toaster.show_toast("Test", threaded=True)),
</code></pre>
<p>Then this will not influence execution of <code>self.icon.run()</code></p>
</div>
