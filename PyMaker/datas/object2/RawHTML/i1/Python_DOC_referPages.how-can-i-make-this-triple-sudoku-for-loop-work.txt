<div class="post-text" itemprop="text">
<p>I am having some trouble with this algorithm. I am only able to grab one sub grid. I've only included the sub grid part here as I've done checkRows and checkColumns on my own. How can I connect this code to capture the rest? Your help is greatly appreciated. Thanks.</p>
<pre><code>class Sudoku_Checker:
  def __init__(self,board):
    self.board = board

  def board_validater(self,board):
    self.checkSquares(board)

    return  self.checkSquares(board) == True

  def checkSquares(self,board):
      compare = [1,2,3,4,5,6,7,8,9]
      hold = []
      row = 0
      column = 0
      square = 0
      for p in range(square, square+3):
          for i in range(row, row + 3):
              for j in range(column, column + 3):
                  hold.append(board[i][j])
              if len(hold)==9:
                  if sorted(hold) == compare:
                      hold =[]
                      continue
                  else:
                    return False
          square +=3
          row += 3


      return True

board = [  [5, 3, 4, 6, 7, 8, 9, 1, 2],
          [6, 7, 2, 1, 9, 5, 3, 4, 8],
          [1, 9, 8, 3, 4, 2, 5, 6, 0],
          [8, 5, 9, 7, 6, 1, 4, 2, 3],
          [4, 2, 6, 8, 5, 3, 7, 9, 1],
          [7, 1, 3, 9, 2, 4, 8, 5, 6],
          [9, 6, 1, 5, 3, 7, 2, 8, 4],
          [2, 8, 7, 4, 1, 9, 6, 3, 5],
          [3, 4, 5, 2, 8, 6, 1, 7, 9]]
s = Sudoku_Checker(board)
s.board_validater(board)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So in my exemple with <code>line</code> and <code>column</code> variable i get the upper left corner of eaxh 3x3 matrix and then i iterate from there to construct the square.</p>
<p>Please let me know if this is what you are looking for.</p>
<pre><code>board = [
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 0],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9]
]

for line in range(0, 9, 3):
    for column in range(0, 9, 3):
        square = [[board[l][c] for c in range(column, column + 3)] for l in range(line, line + 3)]
        print(square)
</code></pre>
<p>Result: </p>
<pre><code>[[5, 3, 4], [6, 7, 2], [1, 9, 8]]
[[6, 7, 8], [1, 9, 5], [3, 4, 2]]
[[9, 1, 2], [3, 4, 8], [5, 6, 0]]
[[8, 5, 9], [4, 2, 6], [7, 1, 3]]
[[7, 6, 1], [8, 5, 3], [9, 2, 4]]
[[4, 2, 3], [7, 9, 1], [8, 5, 6]]
[[9, 6, 1], [2, 8, 7], [3, 4, 5]]
[[5, 3, 7], [4, 1, 9], [2, 8, 6]]
[[2, 8, 4], [6, 3, 5], [1, 7, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully someone finds this useful. I prefer this implementation because it is more readable and understandable to me. The other commentor also has a good solution except for the list comprehension which is too much of a loop.</p>
<pre><code>class Sudoku_Checker:
  def __init__(self,board):
    self.board = board

  def board_validater(self,board):
    return self.checkSquares(board) == True

  def checkSquares(self,board):
    compare = range(1,10)
    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            nums = board[i][j:j+3] + board[i+1][j:j+3] + board[i+2][j:j+3]
            if sorted(nums) == compare:
                continue
            else:
                return False
    return True

board = [  [5, 3, 4, 6, 7, 8, 9, 1, 2],
          [6, 7, 2, 1, 9, 5, 3, 4, 8],
          [1, 9, 8, 3, 4, 2, 5, 6, 0],
          [8, 5, 9, 7, 6, 1, 4, 2, 3],
          [4, 2, 6, 8, 5, 3, 7, 9, 1],
          [7, 1, 3, 9, 2, 4, 8, 5, 6],
          [9, 6, 1, 5, 3, 7, 2, 8, 4],
          [2, 8, 7, 4, 1, 9, 6, 3, 5],
          [3, 4, 5, 2, 8, 6, 1, 7, 9]]
s = Sudoku_Checker(board)
s.board_validater(board)

</code></pre>
</div>
<span class="comment-copy">It's unclear what your question is, or what problem you're encountering. Please <b>add more information, and a full code example</b>. Running this code as it is currently generates the exception: <code>AttributeError: 'Sudoku_Checker' object has no attribute 'checkRows'</code></span>
<span class="comment-copy">Please explain in more detail what your algorithm is supposed to do, and where that differs from what it actually does.</span>
<span class="comment-copy">So you actually want to get every 3x3 matrix from your sudoku board and then check if is correct. Am i right?</span>
<span class="comment-copy">^ people shouldn't have to guess like this</span>
<span class="comment-copy">Sorry for the confusion. I just removed the return for checkrows and check columns. Right now I am trying to solve the checkSquares() method. Yes I want to get every 3X3 but my code only grabs the first square. Every character needs to be unique from 1-9. Right now, only the 2 inner for loops are working as I want. I added the third to gram the other 8 subgrids.</span>
