<div class="post-text" itemprop="text">
<p>I am trying to read the following data</p>
<pre><code>     0      3177         5
 3.4275637990000E+33 7.7345239420000E+11 2.3294608630000E+21 2.0879655710000E+05
 1.9252063604938E+06 2.0037575941018E+06-1.0000000000000E+00 0.0000000000000E+00
 0.0000000000000E+00 1.1806662792899E+08 0.0000000000000E+00 1.6258263880000E+00
 0.0000000000000E+00 3.0000000000000E+00 8.7143739363190E-06 1.1806108844692E+08
 1.5216398828085E-04 1.5621014411210E+00 0.0000000000000E+00 2.9999238008221E+00
 1.0979515673726E-05 1.1805809220990E+08 2.4154974448797E-04 1.5621006577022E+00
 0.0000000000000E+00 2.9996256593782E+00 2.1960663497032E-05 1.1803176057951E+08
 9.6633451293816E-04 1.5620942285096E+00 0.0000000000000E+00 2.9994037831384E+00
 2.7670327547614E-05 1.1801096239579E+08 1.5341282126072E-03 1.5620891863088E+00
 0.0000000000000E+00 2.9990524870828E+00 3.4865681847029E-05 1.1797792540807E+08
 2.4357001431448E-03 1.5620811953515E+00 0.0000000000000E+00 2.9984939557312E+00
 4.3934518613971E-05 1.1792547175142E+08 3.8674871654846E-03 1.5620681038247E+00
 0.0000000000000E+00 2.9976271324793E+00
</code></pre>
<p>Where the first 3 lines are the header and the lines that follow are 6 variables that repeat over and over, in other words:</p>
<pre><code>#Header line1
#Header line2
#Header line3
 var1 var2 var3 var4
 var5 var6 var1 var2
 var3 var4 var5 var6
 var1 var2 var3 var4
 var5 var6 var1 var2
 var3 var4 var5 var6
 var1 var2 var3 var4
 var5 var6 var1 var2
 var3 var4 var5 var6
 var1 var2 var3 var4
 var5 var6
</code></pre>
<p>Which is the best way to collect all the <code>var1</code> in a single variable in Python?</p>
<p>Any idea is appreciated.</p>
<hr/>
<p>Edited:</p>
<p>Note that the numbers are not always separated by a space. This happens when the number to the right is negative, as it shows line 3 between columns 2 and 3.</p>
<p>What is always the same is the format <code>1.1234567890123E+12</code> and, in case of a negative number, <code>-1.2345678901234E+12</code>. That is 1 number before the dot, 13 after the dot and 2 in the exponent. </p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure how good is this solution in general, but it works in your case.</p>
<p>First, you should probably handle the header and the rest of the file separately. Here's the data part.</p>
<p>Read the data with pandas fixed-column file reader <code>read_fwf</code>, skip the first three rows:</p>
<pre><code>import pandas as pd
import numpy as np
data = pd.read_fwf("yourfile", skiprows=2, widths=[20,20,20,20])
</code></pre>
<p>Extract the values from the dataframe, flatten them:</p>
<pre><code>values = data.values.reshape(1,-1)[0]
</code></pre>
<p>Remove the empty cells, reshape to six columns:</p>
<pre><code>values[~np.isnan(values)].reshape(-1,6)
</code></pre>
</div>
<span class="comment-copy">I think the <code>csv</code> module could be useful if you specify a delimiter of a single space</span>
<span class="comment-copy">@Reedinationer - Thanks for the suggestion. However, as it happens in line number 3, there is no space between the numbers if the number to the right is negative. I have edited my question to add a bit more information about the format.</span>
<span class="comment-copy">So if each number has a set number of characters, just read the lines and then slice them at those locations!</span>
