<div class="post-text" itemprop="text">
<p>I am trying create a big file say 5/10 GB. But I need to show write speed at every second. some like this </p>
<pre><code>783441920 bytes (783 MB, 747 MiB) copied, 1 s, 783 MB/s
1088824320 bytes (1.1 GB, 1.0 GiB) copied, 2 s, 544 MB/s
1390494720 bytes (1.4 GB, 1.3 GiB) copied, 3 s, 462 MB/s
1602211840 bytes (1.6 GB, 1.5 GiB) copied, 4 s, 399 MB/s
1678894080 bytes (1.7 GB, 1.6 GiB) copied, 5 s, 312 MB/s
1850752000 bytes (1.9 GB, 1.7 GiB) copied, 6 s, 308 MB/s
2023480320 bytes (2.0 GB, 1.9 GiB) copied, 7 s, 288 MB/s
2195302400 bytes (2.2 GB, 2.0 GiB) copied, 8 s, 274 MB/s
2363176960 bytes (2.4 GB, 2.2 GiB) copied, 9 s, 262 MB/s
</code></pre>
<p>But I can not find any way to get the speed for every second. (I can not use <code>dd command</code> , I have to create the file manually in python or java)</p>
</div>
<div class="post-text" itemprop="text">
<p>Java does not offer any getWriteSpeed() or something like that. But assuming you write that file using a FileOutputStream, try to not write all data at once but break your data up to chunks of eg. 1024 bytes and get the time before the entire write Operation and after each write() (and if necessary flush()) call to the stream by System.currentTimeMillis()</p>
<p>Your write speed  would be (chunksWritten * 1024) / ((currentTime - writeStartTime) / 1000d) in bytes/sec. </p>
<p>Then each second you can output that value. 
To detect a new second you may save the result of currentTime % 1000 (remainder of Division by 1000) and check each write-cycle whether it is less than the previous one. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Java there is no method to get the write speed, you have to implement this on your own. Here is an example which <strong>writes a 5 GB file</strong> and outputs the process approximately every second.</p>
<p>It writes blocks of 1 KB, counts the written blocks and if one second or more has passed since beginning or the last output is prints the actual stats</p>
<pre><code>int blockCount = 1024 * 1024 * 5;
int blockSize = 1024;
// sums up to 5 GB
byte[] bytes = new byte[blockSize];
new SecureRandom().nextBytes(bytes); // generates some random data
FileOutputStream fos = new FileOutputStream(new File("/path/to/your/file"));
long blocksWritten = 0;
long blocksWrittenLastSecond = 0;
long timer = System.currentTimeMillis();
for (int i = 0; i &lt; blockCount; i++) {
    fos.write(bytes);
    blocksWrittenLastSecond++;
    long now = System.currentTimeMillis();
    long timerDelay = now - timer;
    if (timerDelay &gt;= 1000 || i == blockCount - 1) {
        blocksWritten += blocksWrittenLastSecond;
        long bytesWrittenTotal = blockSize * blocksWritten;
        long bytesWrittenLastSecond = blockSize * blocksWrittenLastSecond;
        double currentMegaBytesPerSecond = (double) (bytesWrittenLastSecond / (1024 * 1024)) / (timerDelay / 1000d);
        System.out.println(bytesWrittenTotal + " bytes written with " + Math.round(currentMegaBytesPerSecond) + " mb/s");
        // reset for next second
        blocksWrittenLastSecond = 0;
        timer = System.currentTimeMillis();
    }
}
fos.close();
</code></pre>
<p>This is the output for my old HDD:</p>
<pre><code>262943744 bytes written with 250 mb/s
638312448 bytes written with 357 mb/s
1021830144 bytes written with 365 mb/s
1395726336 bytes written with 356 mb/s
1425204224 bytes written with 10 mb/s
1459958784 bytes written with 6 mb/s
1512032256 bytes written with 49 mb/s
1876321280 bytes written with 347 mb/s
2250982400 bytes written with 357 mb/s
2563824640 bytes written with 298 mb/s
2879109120 bytes written with 300 mb/s
3191470080 bytes written with 297 mb/s
3417269248 bytes written with 215 mb/s
3644478464 bytes written with 215 mb/s
3674432512 bytes written with 6 mb/s
3776074752 bytes written with 22 mb/s
4130227200 bytes written with 337 mb/s
4482337792 bytes written with 335 mb/s
4830609408 bytes written with 332 mb/s
5181122560 bytes written with 334 mb/s
5368709120 bytes written with 221 mb/s
</code></pre>
<p>Another option would be to use a second Thread to poll the written bytes every second and doing the output. Hope that helps.</p>
</div>
<span class="comment-copy">In Java if you create the file by writing to an OutputStream of some sort, you can calculate cumulative MB/s after each write or after each n Bytes written. If you must log this approximately every second you can log the answer if &gt; 1s has passed. If that is too variable you can accumulate the values in a thread-safe structure and use a second thread with a timer (using Thread.sleep(1000)) or ScheduledThreadPoolExecutor.scheduleAtFixedRate(), for example, to log the values.</span>
<span class="comment-copy">wouldn't it be a average speed? Also, I will be grateful if you show an example</span>
<span class="comment-copy">Yes that would be the average Speed. To get the current speed you can just Update the writeStartTime and reset the chunksWritten after each write-cycle. (Or after a few ones to average over the last couple of cycles, just to get better readings)</span>
