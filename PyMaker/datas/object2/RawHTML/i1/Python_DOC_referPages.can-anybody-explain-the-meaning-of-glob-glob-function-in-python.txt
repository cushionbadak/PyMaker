<div class="post-text" itemprop="text">
<p>I try to understand it by reading the documentation, but I still don't understand the difference between <code>recursive=True|False</code> and why do I need to write '<code>*</code>' or '<code>**</code>' in path name. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>*</code> is a wildcard for file names, you can go <code>\path\*</code> to retrieve all items in <code>path</code> or <code>\path\*.txt</code> to retrieve all text files. You can also use <code>?</code> for a single character wildcard.</p>
<p>If <code>recursive</code> is set to true, <code>**</code> acts as a recursion indicator, if you use <code>\path\**\test?.*</code> it will look for any file that starts with <code>test</code> and has a single character after (e.g. test1, test2) with any extension, inside any subfolder of <code>path</code> recursively (thanks to <code>**</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>**</code> has recursive-directory-matching behavior when <code>recursive=True</code>. </p>
<p><code>recursive=True</code> is needed to switch <strong>ON</strong> the pattern. Otherwise, <code>**</code> is just two separate <code>*</code>, each matching zero or more characters.</p>
<p>Until recently the <code>glob</code> module did not support recursive matching and there's a lot of code out there that may have  used <code>**</code> in patterns thus the Python core developers didn't want to break such code.</p>
</div>
<div class="post-text" itemprop="text">
<p>if the path name contains only <code>*</code>, recursive is not useful; if recursive is False, <code>**</code> is no different from <code>*</code>. 
only if the path name contains <code>**</code> and recursive is True, <code>**</code> will match any files.</p>
</div>
<span class="comment-copy">glob â€” Unix style pathname pattern expansion. I would say you first need to understand unix style pathname to understand glob.</span>
