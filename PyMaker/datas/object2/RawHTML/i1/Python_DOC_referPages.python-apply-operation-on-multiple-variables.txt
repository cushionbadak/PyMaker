<div class="post-text" itemprop="text">
<p>I know that this is a rather silly question and there are similar ones already answered, but they don't quite fit, so...
How can I perform the same operation on multiple variables in an efficient way, while "keeping" the individual variables?
example:</p>
<pre><code>a = 3
b = 4
c = 5
a,b,c *= 2  #(obviously this does not work)
print(a,b,c) 
</code></pre>
<p>What I want as the output in this scenario is 6, 8, 10. It is rather important that I can still use changed variables. </p>
<p>Thank you very much for your answers!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use numpy or python lambda function combined with map to do the same.</p>
<p><strong>Using numpy:</strong></p>
<pre class="lang-py prettyprint-override"><code>In [17]: import numpy as np

In [18]: a = 3
    ...: b = 4
    ...: c = 5
    ...:

In [19]: a,b,c = np.multiply([a, b, c], 2)

In [20]: a
Out[20]: 6

In [21]: b
Out[21]: 8

In [22]: c
Out[22]: 10
</code></pre>
<p><strong>Using lambda:</strong></p>
<pre class="lang-py prettyprint-override"><code>In [23]: a, b, c = list(map(lambda x: x*2, [a, b, c]))

In [24]: a
Out[24]: 12

In [25]: b
Out[25]: 16

In [26]: c
Out[26]: 20

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to look into Python's map function. The following link may be helpful:<a href="https://www.w3schools.com/python/ref_func_map.asp" rel="nofollow noreferrer">https://www.w3schools.com/python/ref_func_map.asp</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Map is your friend here, but you also need to use 'implicit tuple unpacking':</p>
<pre><code>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; b = 4
&gt;&gt;&gt; c = 5
&gt;&gt;&gt; d, e, f = map(lambda x: x * 2, [a, b, c])
&gt;&gt;&gt; d
6
&gt;&gt;&gt; e
8
&gt;&gt;&gt; f
10
</code></pre>
<p>This way you can get the changed values back without modifying the original values</p>
</div>
<div class="post-text" itemprop="text">
<p>You can store them in a container, and then use <code>map</code> to apply one function on every element of the container<br/>
For example with a list:<br/></p>
<pre><code>def function_to_apply(element):
    return element*2

# Define variables and store them in a container
a,b,c = 1,2,3
container = (a,b,c)

# Apply the function on every element with map
container = tuple(map(function_to_apply, container))
a,b,c = container
</code></pre>
<p><br/>
This can also be done with <strong>lambda functions</strong> to avoid defining a new function every time<br/></p>
<pre><code># Define variables and store them in a container
a,b,c = 1,2,3
container = (a,b,c)

# Apply the function on every element with map
container = tuple(map(lambda x: x*2, container))
a,b,c = container
</code></pre>
<p>If you have a really large set of variables and you want to retrieve them automatically without having to type each one of them like in <code>a,b,c = container</code>,  you can use <em>dict</em> to store them with names or <em>exec</em> function to assign them dynamically.<br/>
<br/>
<em><code>map</code> documentation: <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#map</a><br/>
<code>lambda</code> documentation: <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-lambda-expr_" rel="nofollow noreferrer">https://docs.python.org/3/reference/expressions.html#grammar-token-lambda-expr</a></em></p></div>
<div class="post-text" itemprop="text">
<p>You can use the following generator expression:</p>
<pre><code>a, b, c = 3, 4, 5
a, b, c = (2 * i for i in (a, b, c))
print(a, b, c)
# 6 8 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use map to apply a function to every element of a list with a lambda function to perform your operation. Then use list unpacking to overwrite values in orginal variables.</p>
<pre><code>a = 1
b = 2
c = 3

a,b,c = list(map(lambda x: x*2, [a,b,c]))

print(a,b,c)

# prints: (2, 4, 6)
</code></pre>
<p>map returns a generator, that's why we need to explicit create the list to unpack.</p>
</div>
<span class="comment-copy">Any particular reason why you can't do it manually? i.e. <code>a *= 2</code>, etc</span>
<span class="comment-copy">because in a file that is already over 3000 lines long it gets quite messy writing the same command ten times. And also quite inefficient.</span>
<span class="comment-copy">a little bit of explanation of the code would help your answer stand out!</span>
