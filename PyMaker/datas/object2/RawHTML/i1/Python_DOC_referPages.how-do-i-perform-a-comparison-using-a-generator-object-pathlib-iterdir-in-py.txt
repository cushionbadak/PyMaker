<div class="post-text" itemprop="text">
<p>I have a ton of files in a directory named calls. All of these files contain <strong>in their filenames</strong> their creation date, ex: <strong>20181022</strong>_151012_kK029150d6.xml</p>
<p>I need to find all the files whose creation date is &gt;= 180 days old.
I'm using pathlib to collect the file names and can print the file names.
I want to do something like this:</p>
<pre><code>calls = Path('/Users/muh/Python/calls')
for fyle in calls.iterdir():
    datetime.strptime(fyle[:8], "%Y%m%d")
</code></pre>
<p>but I get <em>"PosixPath' object is not subscriptable"</em></p>
<p>I need to compare the YYYYMMDD in each filename to the current YYYYMMDD, is all.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <code>@juanpa.arrivillaga</code> suggested to use <code>fyle.name[:8]</code>, that is nice. </p>
<blockquote>
<p><strong>Suggestion:</strong> Whenever you are stuck in this kind of problem, just try to get the details of that object as follows (what are the defined attributes/methods for any object).</p>
</blockquote>
<pre><code>&gt;&gt;&gt; contents = calls.iterdir()
&gt;&gt;&gt; 
&gt;&gt;&gt; content = contents.next()
&gt;&gt;&gt; 
&gt;&gt;&gt; content
PosixPath('/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls/20181022_151012_kK029150d6.xml')
&gt;&gt;&gt; 
&gt;&gt;&gt; dir(content)
['__bytes__', '__class__', '__delattr__', '__div__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__rdiv__', '__reduce__', '__reduce_ex__', '__repr__', '__rtruediv__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', '__truediv__', '_accessor', '_cached_cparts', '_cparts', '_drv', '_flavour', '_format_parsed_parts', '_from_parsed_parts', '_from_parts', '_hash', '_init', '_make_child', '_make_child_relpath', '_opener', '_parse_args', '_parts', '_pparts', '_raw_open', '_root', '_str', 'absolute', 'anchor', 'as_posix', 'as_uri', 'chmod', 'cwd', 'drive', 'exists', 'glob', 'group', 'is_absolute', 'is_block_device', 'is_char_device', 'is_dir', 'is_fifo', 'is_file', 'is_reserved', 'is_socket', 'is_symlink', 'iterdir', 'joinpath', 'lchmod', 'lstat', 'match', 'mkdir', 'name', 'open', 'owner', 'parent', 'parents', 'parts', 'relative_to', 'rename', 'replace', 'resolve', 'rglob', 'rmdir', 'root', 'stat', 'stem', 'suffix', 'suffixes', 'symlink_to', 'touch', 'unlink', 'with_name', 'with_suffix']
&gt;&gt;&gt; 
</code></pre>
<p>In the above list, you will find the entry like <code>[..., 'mkdir', 'name', 'open', 'owner', 'parent', ...]</code> where you can see <code>'name'</code> is the part of it. So finally, you can try to access like <code>fyle.name</code> | <code>type(fyle.name)</code> etc. to check if it is a string or anything else. </p>
<h2>Solution:</h2>
<p>So, you can do like this.</p>
<pre><code>from pathlib import Path
from datetime import datetime

calls = Path("/Users/muh/Python/calls")
details = {}

i = 1
for fyle in calls.iterdir():
    date = datetime.strptime(fyle.name[:8], "%Y%m%d")

    # Write logic here 
</code></pre>
<h2>Detailed:</h2>
<p>In the below code, I've stored details into a dictionary so that you could have a look into the different states of object that changed in the code.</p>
<blockquote>
<p>In my case, the path to <code>calls</code> directory is <code>/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls</code>.</p>
</blockquote>
<p>I have stored each bit &amp; pieces to help you figuring out the problem. I did not try to introduce new variables except <strong>d</strong> &amp; <strong>details</strong> &amp; also reused your variable named <strong>fyle</strong> multiple times for different purpose (It is good if don't have any further use of that variable in simple programs &amp; it is also good to introduce meaningful variable names for big applications).</p>
<blockquote>
<p><strong>date</strong> is the actual datetime object that you can use for manipulation to achieve your final goal. </p>
</blockquote>
<pre><code>from pathlib import Path
from datetime import datetime

calls = Path("/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls")
details = {}

i = 1
for fyle in calls.iterdir():
    d = {}
    d["pathlib"] = fyle

    fyle = str(fyle)
    d["fullpath"] = fyle

    # fyle = fyle.split("/")[-1]
    fyle = fyle.name[:8]
    d["file_name"] = fyle

    date = datetime.strptime(fyle[:8], "%Y%m%d")
    d["date"] = date

    # Write your business logic here

    details["file" + str(i)] = d
    i += 1

print(details)
</code></pre>
<blockquote>
<p>Output</p>
</blockquote>
<pre><code>{'file2': {'date': datetime.datetime(2018, 10, 25, 0, 0), 'file_name': '20181025_151013_kK029150d7.xml', 'fullpath': '/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls/20181025_151013_kK029150d7.xml', 'pathlib': PosixPath('/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls/20181025_151013_kK029150d7.xml')}, 'file1': {'date': datetime.datetime(2018, 10, 22, 0, 0), 'file_name': '20181022_151012_kK029150d6.xml', 'fullpath': '/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls/20181022_151012_kK029150d6.xml', 'pathlib': PosixPath('/Users/hygull/Projects/django1.9.x-docs/Sfw/file_handling/calls/20181022_151012_kK029150d6.xml')}}
</code></pre>
</div>
<span class="comment-copy">use <code>fyle.name[:8]</code></span>
<span class="comment-copy">@mr.zog, please check my answer if it works for you. I have updated my answer after looking into the comments &amp; downvotes and now it is fine.</span>
<span class="comment-copy">As an aside, please always use the generic [python] tag for any python questions</span>
<span class="comment-copy">@mr.zog, again I have updated my answer with debug info, it will be useful for you.</span>
<span class="comment-copy"><code>os.path.basename(fyle)</code> why wouldn't you just use <code>pathlib</code>???</span>
<span class="comment-copy">@juanpa.arrivillaga, thank you very much for your great suggestion. I was blind, could not see if the question is related to using <code>pathlib</code> then why I suggested to use <code>os</code> here. I have commented that line and used the alternative to get base name from file path. Thank you again for pointing my mistake.</span>
<span class="comment-copy">I really don't understand the point of your <code>details</code> <code>dict</code></span>
<span class="comment-copy">No @juanpa.arrivillaga, there is not an actual use of that here. May be, it is little awkward as it is not the part of your problem. First time, when I was not aware of using <code>.name</code>, I presented to solve the problem in different way. At that time I thought to note &amp; store each details of transformation.</span>
<span class="comment-copy">Now, I updated my answer. I know you have already solved it. Just to clear the doubts I separated my answer in 2 parts. Consider 1st one as working. 2nd one is detailed (Useful for debugging this kind of problem). Thank you for writing back.</span>
