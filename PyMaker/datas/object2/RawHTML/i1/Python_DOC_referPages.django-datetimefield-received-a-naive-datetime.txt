<div class="post-text" itemprop="text">
<p>The problem I have is that I don't seem to be able to filter my data based on timestamp, i.e. both date and <strong>hour</strong>.  </p>
<p>My model looks as follows: </p>
<pre><code># Create your models here.
class HourlyTick(models.Model):
    id = models.IntegerField(primary_key=True)
    timestamp = models.DateTimeField(blank=True, null=True)
    symbol = models.TextField(blank=True, null=True)
    open = models.IntegerField(blank=True, null=True)
    high = models.IntegerField(blank=True, null=True)
    low = models.IntegerField(blank=True, null=True)
    close = models.IntegerField(blank=True, null=True)
    trades = models.IntegerField(blank=True, null=True)
    volume = models.IntegerField(blank=True, null=True)
    vwap = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'xbtusd_hourly'
</code></pre>
<p>My view: </p>
<pre><code>class HourlyTickList(ListAPIView):
    serializer_class = HourlyTickSerializer
    def get(self, request):
        start = request.GET.get('start', None)
        end = request.GET.get('end', None)
        tz = pytz.timezone("Europe/Paris")

        start_dt = datetime.datetime.fromtimestamp(int(start) / 1000, tz)
        end_dt = datetime.datetime.fromtimestamp(int(end) / 1000, tz)

        qs = HourlyTick.objects.filter(timestamp__range = (start_dt, end_dt))
        rawData = serializers.serialize('python', qs)
        fields = [d['fields'] for d in rawData]
        fieldsJson = json.dumps(fields, indent=4, sort_keys=True, default=str)

        return HttpResponse(fieldsJson, content_type='application/json')
</code></pre>
<p>The message I receive is: </p>
<blockquote>
<p>RuntimeWarning: DateTimeField HourlyTick.timestamp received a naive
  datetime (2017-01-15 06:00:00) while time zone support is active.<br/>
  RuntimeWarning)</p>
</blockquote>
<p>However, when I use <code>make_aware</code> to fix this error, I get the error: </p>
<blockquote>
<p>ValueError: Not naive datetime (tzinfo is already set)</p>
</blockquote>
<p>My database contains data that looks like this: </p>
<p><code>2017-01-06T12:00:00.000Z</code></p>
<p>For some reason, the first option returns results, but it totally ignores the time.  </p>
<p>How do I fix this? </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem was because Python couldn't interpret the format I had stored in the database. Two solutions possible: </p>
<ul>
<li>Writing a raw query with string transformation in Django </li>
<li>Storing the datetime fields in a different format </li>
</ul>
<p>I went with option 2 since it was an already automated script for retrieving the data and now it works fine.  </p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/18622007/runtimewarning-datetimefield-received-a-naive-datetime" title="runtimewarning datetimefield received a naive datetime">stackoverflow.com/questions/18622007/â€¦</a></span>
<span class="comment-copy">to your naive datetime do <code>import pytz</code> <code>mynaicedatetime.replace(tzinfo=pytz.UTC)</code></span>
<span class="comment-copy">@YugandharChaudhari This doesn't solve my problem.</span>
