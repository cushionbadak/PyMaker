<div class="post-text" itemprop="text">
<p>I have the following code that allows me to Push (put a known type into the stack), POP (remove the last added value from the stack), and iterate through the stack. </p>
<p>Code:</p>
<pre><code>class Node:
    def __init__(self):
        self.__value = 0
        self.__NEXT = None

    @property
    def value(self):
        return self.__value

    @value.setter
    def value(self, x):
        self.__value = x

    @property
    def NEXT(self):
        return self.__NEXT

    @NEXT.setter
    def NEXT(self, x):
        if type(x) is Node:
            self.__NEXT = x
        else:
            raise TypeError("Invalid DataType provided for NEXT Pointer, needs to be of type Node")

    def __str__(self):
        return "{}".format(self.__value)



class Stack:

    def __init__ (self):
        self.__START = None
        self.__END = None

    @property
    def START(self):
        return self.__START

    @property
    def END(self):
        return self.__END

    def PUSH(self, node):
        print(node)
        if type(node) is not Node:
            raise TypeError("Invalid DataType provided for NEXT Pointer, needs to be of type Node")

        if self.__START is None:
            self.__START = node
            self.__END = node
            return

        node.NEXT = self.__START
        self.__START = node
        #setting the top of the stack as self.__START

    def POP(self):
        if self.__START == None:
            raise ValueError("There are no nodes in the Linked List")

        self.__START = self.__START.NEXT
        print("POP completed")
        #setting the second to the top as the top

    def __iter__(self): 
        self.__ITERATOR = self.__START 
        return self 

    def __next__(self): 
        if self.__ITERATOR != None: 
            node = self.__ITERATOR 
            self.__ITERATOR = self.__ITERATOR.NEXT 
            return node 
        else: 
            raise StopIteration



myStack = Stack()

node1 = Node()
node1.value = 1
node2 = Node()
node2.value = 2
node3 = Node()
node3.value = 3
node4 = Node()
node4.value = 4

myStack.PUSH(node1)
myStack.PUSH(node2)
myStack.POP()
myStack.PUSH(node3)
myStack.PUSH(node4)
myStack.POP()

for node in myStack:
    print(node)
</code></pre>
<p>The output is:
1
2
POP completed
3
4
POP completed
3
1</p>
<p>This code works if the entries are of type Node. I want to replicate this, but entries can be of any datatype (generic type), not just Node (nodes). The issue that I continue to run into is that 'int' object has no attribute 'NEXT'.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well for starters I'd recommend you to have a constructor for the 'Node' class like the following:</p>
<pre><code>class Node:
    def __init__(self, value=0, next=None):
        self.__value = value
        self.__NEXT = next
</code></pre>
<p>Then, you have to keep in mind that in the 'Stack' class you're using the 'Node' class interface with:</p>
<pre><code>node.NEXT = self.__START
</code></pre>
<p>So, all the nodes you push onto the stack must either be an instance of the class 'Node' or belong to a class that inherits from the class 'Node'.</p>
<p>On inheritance, check the following <a href="https://docs.python.org/3.7/tutorial/classes.html#inheritance" rel="nofollow noreferrer">documentation</a>.</p>
</div>
<span class="comment-copy">Any template option or generic type to solve his problem?</span>
