<div class="post-text" itemprop="text">
<p>I have a list of objects with their counts associated after a semicolon. Trying to convert this list into a dictionary but some keys will be missing their values once converted. Tried using try/except but not sure how to store the value individually into the dictionary.</p>
<p>Example: </p>
<pre><code>t = ['Contact:10', 'Account:20','Campaign:', 'Country:', 'City:']
</code></pre>
<p>The Campaign and Country objects would have no values when converting. I would like to either pass or assign a <code>NaN</code> as the dictionary value.</p>
<p>I tried something like this but with no avail.</p>
<pre><code>for objects in t:
    try:
        dictionary = dict(objects.split(":") for objects in t)
    except:
        pass
</code></pre>
<p>Any suggestion is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You do not really need to try/catch:</p>
<pre><code>t = ['Contact:10', 'Account:20','Campaign:', 'Country:', 'City:']
{ a: b for a,b in (i.split(':') for i in t) }
</code></pre>
<p>this yields:</p>
<pre><code>{'Account': '20', 'Campaign': '', 'City': '', 'Contact': '10', 'Country': ''}
</code></pre>
<p>If you want <code>None</code> instead of empty string:</p>
<pre><code>{ a: b if b else None for a,b in (i.split(':') for i in t) }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator expression with a split of each item and pass the output to the <code>dict</code> constructor:</p>
<pre><code>dict(i.split(':') for i in t)
</code></pre>
<p>This returns:</p>
<pre><code>{'Contact': '10', 'Account': '20', 'Campaign': '', 'Country': '', 'City': ''}
</code></pre>
<p>If you would like the assign NaN as a default value you can do it with a dict comprehension instead:</p>
<pre><code>{a: b or float('nan') for i in t for a, b in (i.split(':'),)}
</code></pre>
<p>This returns:</p>
<pre><code>{'Contact': '10', 'Account': '20', 'Campaign': nan, 'Country': nan, 'City': nan}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the value is missing, it will be an empty string</p>
<pre><code>&gt;&gt;&gt; 'foo:'.split(':')
['foo', '']
</code></pre>
<p>So this leads us to</p>
<pre><code>data = {}
for pair in t:
    key, value = pair.split(':')
    data[key] = int(value) or float('nan')
</code></pre>
<p>This could be cleaned up a little with a dictionary comprehension.</p>
<pre><code>import string
pairs = map(string.split, t)
data = {key: int(value) or float('nan') for key, value in pairs}
</code></pre>
<p>You could also decline to put those keys in the dictionary like so</p>
<pre><code>data = {}
for pair in t:
    key, value = pair.split(':')
    if value:
        data[key] = int(value) or float('nan')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>t = ['Contact:10', 'Account:20','Campaign:', 'Country:', 'City:']
d = {}

for obj in t:
    field = obj.split(':') 
    d[field[0]] = field[1] if field[1] else None

print(d)
</code></pre>
<p>Output:</p>
<pre><code>{'Country': '', 'City': '', 'Campaign': '', 'Account': '20', 'Contact': '10'}
</code></pre>
</div>
<span class="comment-copy">Do the values need to be converted to int? Can you show your expected result dict. Just to be clear?</span>
<span class="comment-copy">Why <code>if len(field) &gt;= 1</code> and not just the falsey check against an empty string?</span>
<span class="comment-copy">Beginner clarity and making a possibly unwarranted assumption about the actual problem.  Revisited and amended; thanks.</span>
<span class="comment-copy">nm, the edit fixed it :)</span>
