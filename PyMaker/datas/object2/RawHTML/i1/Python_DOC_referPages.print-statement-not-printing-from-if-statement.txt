<div class="post-text" itemprop="text">
<p>Why are <code>x</code> and <code>y</code> strings instead of ints in the below code?  Everything on the web says to use <code>raw_input()</code>, but I read on Stack Overflow (on a thread that did not deal with integer input) that <code>raw_input()</code> was renamed to <code>input()</code> in Python 3.x.</p>
<pre><code>play = True

while play:

    x = input("Enter a number: ")
    y = input("Enter a number: ")

    print(x + y)
    print(x - y)
    print(x * y)
    print(x / y)
    print(x % y)

    if input("Play again? ") == "no":
        play = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>TLDR</strong></p>
<ul>
<li>Python 3 doesn't evaluate the data received with <code>input</code> function, but Python 2's <code>input</code> function does (read the next section to understand the implication).</li>
<li>Python 2's equivalent of Python 3's <code>input</code> is the <code>raw_input</code> function.</li>
</ul>
<p><strong>Python 2.x</strong></p>
<p>There were two functions to get user input, called <a href="https://docs.python.org/2/library/functions.html#input" rel="noreferrer"><code>input</code></a> and <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="noreferrer"><code>raw_input</code></a>. The difference between them is, <code>raw_input</code> doesn't evaluate the data and returns as it is, in string form. But, <code>input</code> will evaluate whatever you entered and the result of evaluation will be returned. For example,</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = input("Enter a number: ")
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
(22, &lt;type 'int'&gt;)
</code></pre>
<p>The data <code>5 + 17</code> is evaluated and the result is <code>22</code>. When it evaluates the expression <code>5 + 17</code>, it detects that you are adding two numbers and so the result will also be of the same <code>int</code> type. So, the type conversion is done for free and <code>22</code> is returned as the result of <code>input</code> and stored in <code>data</code> variable. You can think of <code>input</code> as the <code>raw_input</code> composed with an <a href="https://docs.python.org/2/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> call.</p>
<pre><code>&gt;&gt;&gt; data = eval(raw_input("Enter a number: "))
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
(22, &lt;type 'int'&gt;)
</code></pre>
<p><strong>Note:</strong> you should be careful when you are using <code>input</code> in Python 2.x. I explained why one should be careful when using it, in <a href="https://stackoverflow.com/a/21122817/1903116">this answer</a>.</p>
<p>But, <code>raw_input</code> doesn't evaluate the input and returns as it is, as a string.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'2.7.6 (default, Mar 22 2014, 22:59:56) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = raw_input("Enter a number: ")
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
('5 + 17', &lt;type 'str'&gt;)
</code></pre>
<p><strong>Python 3.x</strong></p>
<p>Python 3.x's <a href="https://docs.python.org/3/library/functions.html#input" rel="noreferrer"><code>input</code></a> and Python 2.x's <code>raw_input</code> are similar and <code>raw_input</code> is not available in Python 3.x. </p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.version
'3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2]'
&gt;&gt;&gt; data = input("Enter a number: ")
Enter a number: 5 + 17
&gt;&gt;&gt; data, type(data)
('5 + 17', &lt;class 'str'&gt;)
</code></pre>
<hr/>
<p><strong>Solution</strong></p>
<p>To answer your question, since Python 3.x doesn't evaluate and convert the data type, you have to explicitly convert to <code>int</code>s, with <a href="https://docs.python.org/3/library/functions.html#int" rel="noreferrer"><code>int</code></a>, like this</p>
<pre><code>x = int(input("Enter a number: "))
y = int(input("Enter a number: "))
</code></pre>
<p>You can accept numbers of any base and convert them directly to base-10 with the <code>int</code> function, like this</p>
<pre><code>&gt;&gt;&gt; data = int(input("Enter a number: "), 8)
Enter a number: 777
&gt;&gt;&gt; data
511
&gt;&gt;&gt; data = int(input("Enter a number: "), 16)
Enter a number: FFFF
&gt;&gt;&gt; data
65535
&gt;&gt;&gt; data = int(input("Enter a number: "), 2)
Enter a number: 10101010101
&gt;&gt;&gt; data
1365
</code></pre>
<p>The second parameter tells what is the base of the numbers entered and then internally it understands and converts it. If the entered data is wrong it will throw a <code>ValueError</code>.</p>
<pre><code>&gt;&gt;&gt; data = int(input("Enter a number: "), 2)
Enter a number: 1234
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 2: '1234'
</code></pre>
<p>For values that can have a fractional component, the type would be <code>float</code> rather than <code>int</code>:</p>
<pre><code>x = float(input("Enter a number:"))
</code></pre>
<hr/>
<p>Apart from that, your program can be changed a little bit, like this</p>
<pre><code>while True:
    ...
    ...
    if input("Play again? ") == "no":
        break
</code></pre>
<p>You can get rid of the <code>play</code> variable by using <code>break</code> and <code>while True</code>. </p>
<p><strong>PS</strong>: Python doesn't expect <code>;</code> at the end of the line :)</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, <code>raw_input</code> was renamed to <code>input</code> and the Python 2.x <code>input</code> was removed.  </p>
<p>This means that, just like <code>raw_input</code>, <a href="http://docs.python.org/3.2/library/functions.html#input" rel="noreferrer"><code>input</code></a> in Python 3.x always returns a string object.</p>
<p>To fix the problem, you need to explicitly make those inputs into integers by putting them in <a href="http://docs.python.org/3.2/library/functions.html#int" rel="noreferrer"><code>int</code></a>:</p>
<pre><code>x = int(input("Enter a number: "))
y = int(input("Enter a number: "))
</code></pre>
<p>Also, Python does not need/use semicolons to end lines.  So, having them doesn't do anything positive.</p>
</div>
<div class="post-text" itemprop="text">
<p>For multiple integer in a single line, <strong>map</strong> might be better.</p>
<pre><code>arr = map(int, raw_input().split())
</code></pre>
<p>If the number is already known, (like 2 integers), you can use</p>
<pre><code>num1, num2 = map(int, raw_input().split())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input()</code> (Python 3) and <code>raw_input()</code> (Python 2) <em>always</em> return strings. Convert the result to integer explicitly with <code>int()</code>.</p>
<pre><code>x = int(input("Enter a number: "))
y = int(input("Enter a number: "))
</code></pre>
<p>Pro tip: semi-colons are not needed in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Multiple questions require input for several integers on single line.  The best way is to input the whole string of numbers one one line and then split them to integers.</p>
<pre><code> p=raw_input()
    p=p.split()      
    for i in p:
        a.append(int(i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Convert to integers:</p>
<pre><code>my_number = int(input("enter the number"))
</code></pre>
<p>Similarly for floating point numbers:</p>
<pre><code>my_decimalnumber = float(input("enter the number"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Taking int as input in python:
we take a simple string input using:</p>
<pre><code>input()
</code></pre>
<p>now we want int as input.so we typecast this string to int. simply using:</p>
<pre><code>int(input())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.x has <code>input()</code> function which returns always string.So you must convert to <code>int</code><br/></p>
<p><strong>python 3.x</strong>
<br/></p>
<pre><code>x = int(input("Enter a number: "))
y = int(input("Enter a number: "))
</code></pre>
<p><strong>python 2.x</strong>
<br/></p>
<p>In python 2.x <code>raw_input()</code> and <code>input()</code> functions always return string so you must convert them to int too.</p>
<pre><code>x = int(raw_input("Enter a number: "))
y = int(input("Enter a number: "))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x.  By default the input function takes input  in string format . To convert  it into integer you need to include int(input())</p>
<pre><code>x=int(input("Enter the number"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I encountered a problem of taking integer input while solving a problem on <a href="http://www.codechef.com/problems/TLG" rel="nofollow">CodeChef</a>, where two integers - separated by space - should be read from one line.</p>
<p>While <code>int(input())</code> is sufficient for a single integer, I did not find a direct way to input two integers.  I tried this:</p>
<pre><code>num = input()
num1 = 0
num2 = 0

for i in range(len(num)):
    if num[i] == ' ':
        break

num1 = int(num[:i])
num2 = int(num[i+1:])
</code></pre>
<p>Now I use num1 and  num2 as integers.  Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def dbz():
    try:
        r = raw_input("Enter number:")
        if r.isdigit():
            i = int(raw_input("Enter divident:"))
            d = int(r)/i
            print "O/p is -:",d
        else:
            print "Not a number"
    except Exception ,e:
        print "Program halted incorrect data entered",type(e)
dbz()

Or 

num = input("Enter Number:")#"input" will accept only numbers
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While in your example, <code>int(input(...))</code> does the trick in any case, <code>python-future</code>'s <a href="http://python-future.org/compatible_idioms.html#input" rel="nofollow noreferrer"><code>builtins.input</code></a> is worth consideration since that makes sure your code works for both Python 2 and 3 <em>and</em> disables Python2's default behaviour of <code>input</code> trying to be "clever" about the input data type (<code>builtins.input</code> basically just behaves like <code>raw_input</code>).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>n=int(input())
for i in range(n):
    n=input()
    n=int(n)
    arr1=list(map(int,input().split()))
</code></pre>
<p>the for loop shall run 'n' number of times . the second 'n' is the length of the array.
the last statement maps the integers to a list and takes input in space separated form .
you can also return the array at the end of for loop.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>play = True

while play:

    #you can simply contain the input function inside an int function i.e int(input(""))
    #This will only accept int inputs
    # and can also convert any variable to 'int' form

    x = int(input("Enter a number: "))    
    y = int(input("Enter a number: "))

    print(x + y)
    print(x - y)
    print(x * y)
    print(x / y)
    print(x % y)

    if input("Play again? ") == "no":
        play = False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, in python 3.x, <code>raw_input</code> is replaced with <code>input</code>. In order to revert to old behavior of <code>input</code> use: </p>
<p><code>eval(input("Enter a number: "))</code></p>
<p>This will let python know that entered input is integer</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>x = int(input("Enter a number: "))
y = int(input("Enter a number: ")
</code></pre>
<p>int() is a built-in python function that converts any datatype to a integer.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>play = True

while play:

x = input("Enter a number: ")
y = input("Enter a number: ")

    print(int(x) + int(y))
    print(int(x) - int(y))
    print(int(x) * int(y))
    print(int(x) / int(y))
    print(int(x) % int(y))

    if input("Play again? ") == "no":
        play = False
</code></pre>
<p>this makes it know that the variable 'x' and 'y' are integers and therefore uses them like integers,
if you want it to be able to use decimals change 'int' to 'float'.</p>
<p>the output for the first function </p>
<pre><code>print(int(x) + int(y))
</code></pre>
<p>the output where x is 3 and y is 7 is 10</p>
</div>
<div class="post-text" itemprop="text">
<p>Lots of people like to do <code>int(input("etc"))</code>, but if you put in a string, it will raise an error. </p>
<p>What I like to do is this:</p>
<pre class="lang-py prettyprint-override"><code>s = input("integer: ")
integer = int(s)
</code></pre>
<p>Now use integer for whatever purpose!!</p>
<p>Plus, if s is an string, this doesn't raise an error!!!</p>
<p>At least, not immediately. </p>
</div>
<div class="post-text" itemprop="text">
<p>parse the input into an integer with int</p>
<pre><code>x = int(input("What is x?"))
</code></pre>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">asking-the-user-for-input-until-they-give-a-valid-response</a></span>
<span class="comment-copy">Is there any other way, like a function or something so that we dont need to convert to int in 3.x other than doing explicit conversion to int??</span>
<span class="comment-copy">Could you please add a tl;dr version to the beginning of the answer? It's a long answer, and I believe many will not bother to read it, and will just use <code>input()</code> and <code>eval(input())</code></span>
<span class="comment-copy">@thefourtheye at least use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> for that. It does not have the security concerns of <code>eval</code>.</span>
<span class="comment-copy">I use this Q&amp;A as a dupe target, but maybe you can add a TDLR with the python 3 solution, i.e. <code>int(input()</code>... at the top? Python 2 is nearing the end of it's life and the python 3 info is too buried IMO</span>
<span class="comment-copy">@Chris_Rands Sorry, it took a while. I updated with a TLDR now, PTAL.</span>
<span class="comment-copy">Nice short answer. There seems to be lots of confusion over what's in Py3x and what's not! Here are the docs for input() [link]<a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#input</a></span>
<span class="comment-copy">this works well, up to a point... if you enter an string (like 'foo') it'll raise ValueError:invalid literal for int() with base 10.... so you need to check before if it's actually an integer (or catch the exception).  My question is, what is a <i>pythonic</i> way to do this?</span>
<span class="comment-copy">This looks very interesting.  However, isn't <code>i</code> destroyed when the <code>for</code> loop is exited?</span>
<span class="comment-copy"><code>@hosch250</code> When a loop is exited, the value of the index variable (here, <code>i</code>) remains.  I tried this piece out, and it works correctly.</span>
<span class="comment-copy">For this kind of input manipulation, you can either <code>num1, num2 = map(int, input().split())</code> if you know how much integers you will encounter or <code>nums = list(map(int, input().split()))</code> if you don't.</span>
<span class="comment-copy">While this code block may answer the question, it would be best if you could provide a little explanation for why it does so. Please <a href="https://stackoverflow.com/posts/52802845/edit">edit</a> your answer to include such a description.</span>
<span class="comment-copy">Is this correct?</span>
<span class="comment-copy">Yes, you may try please</span>
<span class="comment-copy"><i>This will let python know that entered input is integer</i>, it could be much worse things than an integer.</span>
<span class="comment-copy"><code>eval()</code> just evaluates the input, the OP wants several things done with the two inputs.</span>
<span class="comment-copy">Welcome to <a href="https://stackoverflow.com">Stack Overflow</a>! Does this answer add anything new to the existing ones?</span>
<span class="comment-copy">Your code won't work. The indentation breaks the while loop</span>
<span class="comment-copy">Both forms throw the same error, "ValueError: invalid literal for int() with base 10"</span>
<span class="comment-copy">I know, but not immediately when the user types something different@cdlane</span>
<span class="comment-copy">it is highly encouraged for new users to attempt to give a relevant answers to questions and to share their knowledge, but please make sure to read the <a href="https://stackoverflow.com/help/how-to-answer">Stackoverflow: how to write a good answer?</a> guide before attempting to do so. Additionally, please check previous answers and make sure that your answer brings a new perspective or some sort of additional information to the answers that have already been given (and approved) and please include an explanation when sharing a block of code.</span>
