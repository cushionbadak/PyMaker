<div class="post-text" itemprop="text">
<p>None of these are <code>kill -9</code> or anything close. What's the answer?</p>
<pre><code>import sys 
import os

try:
        exit()
        sys.exit()
        os._exit()
        quit()
except:
        print("THIS SHOULD NOT RUN")
</code></pre>
<p>It's ridiculous of the Python language if any try-catch wrapping of an <code>abort()</code> or anything like it prevent's it from being able to die. </p>
<p>That's not something that exists in any other language that I know. <code>abort()</code> is an emergency safety measure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Continuing from what already has been explained by @Mike Scotty:</p>
<p>Picking one: (<code>sys.exit()</code>)</p>
<p><code>sys.exit()</code> raises an exception, namely <code>SystemExit</code>. That's why you land in the <code>except-block</code>.</p>
<p><strong>Example</strong>:</p>
<pre><code>import sys

try:
    sys.exit()
except:
    print(sys.exc_info()[0])
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>&lt;class 'SystemExit'&gt;
</code></pre>
<p><strong>In depth</strong>:</p>
<pre><code>import sys

try:
    sys.exit() # this always raises SystemExit
except SystemExit:
    print("sys.exit() worked as expected")
except:
    print("Something went horribly wrong") # some other exception got raised
</code></pre>
<p><strong>OUTPUT</strong>:</p>
<pre><code>sys.exit() worked as expected
</code></pre>
<p><a href="https://stackoverflow.com/questions/25905923/python-sys-exit-not-working-in-try"><strong>Source</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try CTRL+C while in the script, should do the trick</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, I don't like the way Python handles this but I've found a solution and it's actually <code>kill -9</code>:</p>
<p><strong>Disclaimer</strong>: Unfortunately, you have to start and run the process as root.</p>
<pre><code>os.system("sudo kill -9 " + str(os.getpid()))
</code></pre>
</div>
<span class="comment-copy">Please read: <a href="https://stackoverflow.com/a/730778/5378816">stackoverflow.com/a/730778/5378816</a></span>
<span class="comment-copy">If you read the docs on those methods, you'll see that they raise exceptions. That's intentionally, so you have a chance to actually clean up your stuff, even if the program wants to quit. So why do you expect the program to quit w/o honoring the exception block? It is up to you to decide how to handle <b>individual</b> exceptions.</span>
<span class="comment-copy">So a person that write's an <code>abort()</code> method as an emergency safety measure is suppose to know about any possible usage of that same piece of code (which is impossible)? That's a great reason never to use python for anything running machinery.</span>
<span class="comment-copy">If a person writes an <code>abort()</code> method, then whoever calls it (or calls code that may call it) is responsible for the behaviour that happens then. If the person calling it blindly catches all exception, it's that person's oversight. Python lets you handle individual exceptions. What if you're currently in a DB transaction and you need to undo some DB locking? If you just exit the program, the DB might stay locked forever. With exception handling, the caller has the chance to undo the locking and then quit gracefully.</span>
<span class="comment-copy">I don't like it but that answers my question.</span>
<span class="comment-copy">That's not the answer I was looking for. and also <code>CTRL+D</code> is better.</span>
<span class="comment-copy">Well, usually exit() works for me, but I'll upvote your question anyway in hopes someone can answer your question better. :) EDIT: CTRL+C stuck with me in the 10 years, always used it, it's just one of those things I guess</span>
<span class="comment-copy">Yeah, what about a script that's running without user input (like on a server) and needs to get out of a loop? I'm looking for a programmatic answer, obviously.</span>
<span class="comment-copy">Then usually I just bash CTRL+Z,X,C,D until it stops xD</span>
<span class="comment-copy">You don't need to be root to kill own process (on Linux/Unix). so you don't need sudo. You don't need <code>os.system</code> with its large overhead just to send a signal, see <code>os.kill</code>.</span>
