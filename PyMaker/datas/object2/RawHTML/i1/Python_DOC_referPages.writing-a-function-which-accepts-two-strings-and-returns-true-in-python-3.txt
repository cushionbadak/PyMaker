<div class="post-text" itemprop="text">
<p>Write a python function, check_anagram() which accepts two strings and returns True, if one string is an anagram of another string. Otherwise returns False.</p>
<p>The two strings are considered to be an anagram if they contain repeating characters but none of the characters repeat at the same position. The length of the strings should be the same.</p>
<p>Note: Perform case insensitive comparison wherever applicable.</p>
<p>This is my code:</p>
<pre><code>def check_anagram(data1,data2):
    first = data1.lower()
    second = data2.lower()

    d1 = []
    d2 = []

    for i in range(0, len(first)):
        d1.append(first[i])
    for i in range(0, len(second)):
        d2.append(second[i])

    for_check1 = sorted(d1)
    for_check2 = sorted(d2)
    if (for_check1 != for_check2):
        return False

    count = 0
    if (len(d1) == len(d2)):
        for i in d1:
            for j in d2:
                if(i == j):
                    a = d1.index(i)
                    b = d2.index(j)
                    if(a == b):
                        return False
                    else:
                        count += 1
    if(count == len(first)):
        return True
    else:
        return False

    print(check_anagram("Schoolmaster", "Theclassroom"))
</code></pre>
<p>The output I am getting is "False"</p>
<p>Although this program is giving relevant output for string values like {silent, listen}{Moonstarrer, Astronomer}{apple, mango} but not for the above two strings(in code)</p>
<p>What cases am I missing in this code?? How to rectify this thing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function could be simplified as:</p>
<pre><code>def check_anagram(data1, data2):
    data1 = data1.lower()
    data2 = data2.lower()
    if sorted(data1) != sorted(data2):
        return False
    return all(data1[i] != data2[i] for i in range(len(data1)))
</code></pre>
<p>Which actually works for the case you specified.</p>
</div>
<span class="comment-copy">with the caveat <code>none of the characters repeat at the same position</code> this code works for me(inefficient though), what seems to be the issue?</span>
<span class="comment-copy">I am having real trouble following your logic. Sorting the two strings makes the solution O(n * log n), which is unnecessary, it can be done in O(n). But, since you sort the two strings anyway on lines 13-14, why are not simply using those sorted strings? What is all the rest of the method doing?</span>
<span class="comment-copy">@DeepSpace: Technically, it is O(3 * min(length(data1), length(data2)) + 2* size(alphabet)) time and O(2 * size(alphabet)) space. Maybe that is already enough of a hint for you to figure it out? If not, here's the trick: count the number of occurrences of each character (O(n) traversal of each string, where n ~ length of the strings), then compare the two results (O(n) traversal of an array, where n ~ size of the alphabet). The strings are anagrams if they have the same number of each character. The added restriction which is not part of the normal definition of an anagram, can be checked …</span>
<span class="comment-copy">… with a separate third pass over the strings. Or, as I just realized, can be integrated into the counting pass.</span>
<span class="comment-copy">Can you explain, in words, what your algorithm is? -the process you are trying to use to determine if two strings are anagrams?</span>
