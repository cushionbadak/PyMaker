<div class="post-text" itemprop="text">
<p>I am in the process of implementing the Abstract Factory Design pattern. The scenario that I considered is given below. </p>
<p><a href="https://i.stack.imgur.com/IJcRv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/IJcRv.png"/></a>. The article and picture credits come from <a href="https://medium.com/@hitherejoe/design-patterns-abstract-factory-39a22985bdbf" rel="nofollow noreferrer">https://medium.com/@hitherejoe/design-patterns-abstract-factory-39a22985bdbf</a>. I am trying to implement in Python and I am stuck and couldn't move forward due to the below reason </p>
<p>When you define ThemeFactory as an interface in Python, then whatever the methods you define in ThemeFacory has to be implemented in concrete classes such as LightTheme and DarkTheme. </p>
<p>But my concern is, is there any necessity to provide an implementation to method <code>createLightTheme</code> in Concrete class <code>DarkTheme</code> vice-versa. Should I need to redesign the complete architecture? </p>
<pre><code> import abc

 class ThemeFactory(metaclass=abc.ABCMeta):

     @abc.abstractmethod
     def createdarktheme(self):
         pass

     @abc.abstractmethod
     def createlighttheme(self):
         pass


 class DarkTheme(ThemeFactory):

     def createdarktheme(self):
        print('Hello created dark theme')

     def createlighttheme(self):
        pass


if __name__== '__main__':

   dark = DarkTheme()
   dark.createdarktheme()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/55175686/221955">Ray's answer</a> is correct, in that the diagram you're referring to is not right.</p>
<p>The ThemeFactory should create Themes, and DarkTheme and LightTheme should be implementations of Theme.</p>
<p>The code would look roughly like:</p>
<pre><code>from abc import ABC, abstractmethod

class ThemeFactory(object):
     def createdarktheme(self) -&gt; Theme:
         return DarkTheme()

     def createlighttheme(self) -&gt; Theme:
         return LightTheme()

class Theme(ABC):
   @abstractmethod
   createToolbar() -&gt; ToolBar:
       pass

   @abstractmethod
   createDialog() -&gt; Dialog:
       pass

class DarkTheme(Theme):
   createToolbar() -&gt; ToolBar:
       return DarkToolbar()

   createDialog() -&gt; Dialog:
       return DarkDialog()


if __name__== '__main__':

   factory = ThemeFactory()
   dark = factory.createdarktheme()
</code></pre>
</div>
<span class="comment-copy">this doesn't look quite correct.</span>
