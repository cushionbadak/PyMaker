<div class="post-text" itemprop="text">
<p>So I have been working on this for a while and I cannot seem to find an answer to it or figure it out. So I am extracting data from steam and I need to figure out how to get the platforms, for example mac and turn it into a number (string number). For example if a game supports mac it will show up in my list as a "1" but if it does not it will show up as a "0". I am having the problem of the code only running once and making it all to "1". </p>
<pre><code>from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re
from datetime import timedelta
import datetime
import time
import csv
my_url = 'https://store.steampowered.com/search/?specials=1&amp;page=1'

#opening up connectin, grabbing the page
uClient = uReq(my_url)
page_html = uClient.read()
uClient.close()

#html parsing
page_soup = soup(page_html, "html.parser")

#grab products
containers = page_soup.findAll("div", {"class":"responsive_search_name_combined"})

filename = "products.csv"
f = open(filename, "w", encoding='UTF-8')
headers = "Titles, Release_date, Discount, Price before, Price after, Positive review, Reviewers, Win, Lin, Osx, Time \n"
f.write(headers)
#f.write(headers)
#len(containers)
#containers[1]
ts = time.time()
st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
print(st)

for container in containers:
    titles_container = container.findAll("span",{"class":"title"})
    titl = titles_container[0].text
    print(titl)

    product_container = container.findAll("div",{"class":"search_released"})
    product_date = product_container[0].text
    print(product_date)

    product_discount_container = container.findAll("div",{"class":"search_discount"})
    product_discount = product_discount_container[0].text
    print(product_discount)

    product_price_container_before = container.findAll("div",{"class":"search_price"})
    product_price_before = product_price_container_before[0].text
    test = re.findall('(\d+\W)',product_price_before)
    testing = test[0] + test[1]
    print(testing)

    product_price_container_after = container.findAll("div",{"class":"discounted"})
    for product_price_after in product_price_container_after:
        product_price_after.find("span").extract()
        print(product_price_after.text)

    product_review_container = container.findAll("span",{"class":"search_review_summary"})
    for product_review in product_review_container:
        prr = product_review.get('data-tooltip-html')
        a = re.findall('(\d+%)|(\d+\d+)',prr)
        c = a[1][1]
        print(c)


    product_platform_container = container.findAll("span",{"class":"platform_img"})
    for product_platform in product_platform_container:
        platform = product_platform.get('class')[1]
        platt = re.findall('(\Aw)',platform)
        plattt = re.findall('(\Am)',platform)
        platttt = re.findall('(\Al)',platform)
        print(platt)
        print(plattt)
        print(platttt)

        for p in plattt:
            if "m" in p:
                macken = "1"    
            elif "m" not in p:
                macken = "0"
            print(macken)


    f.write(titl + "," + product_date.replace(",","") + "," + product_discount.replace("\n", "") + "," + testing.replace(",", ".") + "," + product_price_after.text.replace("\n","").replace(" ", "").replace(",",".").replace("\t\t\t\t\t\t\t","") + "," + a[0][0] + "," + c.replace(",","") + "," + y + "," + macken + "," + "blah" + "," + st + "\n")

f.close()
pd.read_csv("products.csv", error_bad_lines=False)
</code></pre>
<p>I am also writing it over to csv file. So when I write it to the csv file it just say 1, 1, 1, 1, 1... </p>
<p>I am getting the data from this page: <a href="https://store.steampowered.com/search/?specials=1&amp;page=1" rel="nofollow noreferrer">'https://store.steampowered.com/search/?specials=1&amp;page=1'</a></p>
<p>I know this question is a little confusing so hopefully you can help, if there is any more code you need, let me know. </p>
</div>
<div class="post-text" itemprop="text">
<p>your statement was wrong that is why you getting 1, see the code below!</p>
<pre><code>import requests,csv
from bs4 import BeautifulSoup


req = requests.get('https://store.steampowered.com/search/?specials=1&amp;page=1')
soup = BeautifulSoup(req.content,'html.parser')
data = []
for platform in soup.find_all('div', attrs={'class':'col search_name ellipsis'}):
    title = platform.find('span',attrs={'class':'title'}).text
    if platform.find('span',attrs={'class':'win'}):
        win = '1'
    else:
        win = '0'

    if platform.find('span',attrs={'class':'mac'}):
        mac = '1'
    else:
        mac = '0'

    if platform.find('span',attrs={'class':'linux'}):
        linux = '1'
    else:
        linux = '0'

    data.append({
        'title':title.encode('utf-8'),
        'win':win,
        'mac':mac,
        'linux':linux})

with open('data.csv', 'w', newline='') as f:
    fields = ['title','win','mac','linux']
    writer = csv.DictWriter(f, fieldnames=fields)
    writer.writeheader()
    writer.writerows(data) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is how I would do it:</p>
<pre class="lang-py prettyprint-override"><code>import csv

# ...

rows = []
product_platform_container = container.findAll("span",{"class":"platform_img"})
for product_platform in product_platform_container:
    platform = product_platform.get('class')[1]
    win_p = re.findall('(\Aw)',platform)
    mac_p = re.findall('(\Am)',platform)
    linux_p = re.findall('(\Al)',platform)
    print(win_p)
    print(mac_p)
    print(linux_p)
    row = {
       "linux": 1 if linux_p else 0,
       "win": 1 if win_p else 0,
       "mac": 1 if mac_p else 0
    }
    rows.append(row)

# After you parsed all entries...
fieldnames = ['mac', 'win', 'linux']
writer = csv.DictWriter(f, fieldnames=fieldnames)

writer.writeheader()
for row in rows:
    writer.writerow(row)
</code></pre>
<p><strong>Explanation</strong>: After we identified platform with <code>re</code>,we create csv row where <code>mac</code>, <code>win</code> and <code>linux</code> will have 1 only if their corresponding matches (<code>mac_p</code>, <code>win_p</code> and <code>linux_p</code>) are not empty. Here <code>f</code> is your opened file object.
Checkout <a href="https://realpython.com/python-csv/#writing-csv-files-with-csv" rel="nofollow noreferrer">this</a> article which shows how to work with csv files in python.</p>
</div>
<span class="comment-copy">Usually csv files have data inserted according to postion of columns (<a href="https://people.sc.fsu.edu/~jburkardt/data/csv/addresses.csv" rel="nofollow noreferrer">example</a>). You should specify in question what data you need to have in your csv.</span>
<span class="comment-copy">Thought I did? :) I want to extract the platsforms, which I have, then say if a game supports mac put a "1" in the csv file, and if it does not support mac, put a "0". :) Right now the cvs file just spits out 1 on all games.</span>
<span class="comment-copy">Also you don't need to use regex to identify platform. You can identify platform by looking at first character of your <code>platform</code> variable.</span>
<span class="comment-copy">Well, my code for this might be completely wrong, this is just how I got the platforms to show. If you have a simple way to do it, please share ^_^</span>
<span class="comment-copy">Sorry this code doesnÂ´t work at all for me.</span>
<span class="comment-copy">what error you getting? can you please show me</span>
<span class="comment-copy">TypeError: a bytes-like object is required, not 'str'  on line 35 - writer.writeheader() on line 144 - self.writerow(header) on line  155 - return self.writer.writerow(self._dict_to_list(rowdict))</span>
<span class="comment-copy">i have edited my answer please check!</span>
<span class="comment-copy">Now it works, however it is only part of my code, now to figure out how to implement the rest :)</span>
<span class="comment-copy">The problem that I get with this code is that it breaks the rest of my code. My write actually looks like this in its full form:  f.write(titl + "," + product_date.replace(",","") + "," + product_discount.replace("\n", "") + "," + testing.replace(",", ".") + "," + product_price_after.text.replace("\n","").replace(" ", "").replace(",",".").replace("\t\t\t\t\t\t\t","") + "," + a[0][0] + "," + c.replace(",","") + "," + y + "," + macken + "," + "blah" + "," + st + "\n")</span>
<span class="comment-copy">I would not use <code>f.write</code> and instead use <code>csv.DictWriter</code>. My solution is simple and works only for code fragment you posted because I don't see all your code. Based on my solution you can get the idea and adjust your code according your needs.</span>
<span class="comment-copy">I cannot change f.write because then I would have to change my whole code. I can post my whole code if you like but there is quite a lot, which is mostly not needed for this part.</span>
<span class="comment-copy">If so then I don't quite get what is the original problem here.</span>
<span class="comment-copy">Your code works but it does not work with mine, so follow up question, how can I get them to work together? I posted my whole code :)</span>
