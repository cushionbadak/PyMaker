<div class="post-text" itemprop="text">
<p>I am trying to use SciPy and PyGame to create and display a <a href="https://en.wikipedia.org/wiki/Voronoi_diagram" rel="nofollow noreferrer">Voronoi Diagram</a> over my randomly generated world map. </p>
<p>The problem that I'm running into, is that there's always one point that has weird lines that ignore anything else and spread out across the map like a star or something. As can be seen on the top left and bottom left corners, they don't head off into infinity.</p>
<p>How can I get rid of it?</p>
<p><strong>What's Shown:</strong></p>
<p><a href="https://i.stack.imgur.com/tBqsJ.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/tBqsJ.jpg"/></a></p>
<p><strong>My Code:</strong></p>
<pre><code>import numpy
import random
import pygame
from scipy.spatial import Voronoi


def __generate_voronoi():
    """
    Randomly chooses various points within the x and y dimensions of the map.
    Then, uses SciPy to generate a voronoi diagram with them, and returns it.

    :return: SciPy voronoi diagram
    """

    point_arr = numpy.zeros([900, 2], numpy.uint16)

    for i in range(900):
        point_arr[i][0] = numpy.uint16(random.randint(0, 1600))
        point_arr[i][1] = numpy.uint16(random.randint(0, 900))

    return Voronoi(point_arr)


def draw_voronoi(pygame_surface):
    # generate voronoi diagram
    vor = __generate_voronoi()

    # draw all the edges
    for indx_pair in vor.ridge_vertices:
        start_pos = vor.vertices[indx_pair[0]]
        end_pos = vor.vertices[indx_pair[1]]

        pygame.draw.line(pygame_surface, (0, 0, 0), start_pos, end_pos)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to the patient commenters here, I have learned that <code>vor.vertices</code> will return -1 for the first index of a point that goes to infinity. This creates a problem, since python treats -1 as the index of the last element of a list or array. </p>
<p>The solution to my problem was not to draw any lines that had a -1 index from <code>vor.vertices</code>. </p>
<p>I implemented that by replacing the <code>draw_voronoi()</code> function with this code:</p>
<pre><code>def draw_voronoi(pygame_surface):

    # generate voronoi diagram
    vor = __generate_voronoi()

    # draw all the edges
    for indx_pair in vor.ridge_vertices:

        if -1 not in indx_pair:

            start_pos = vor.vertices[indx_pair[0]]
            end_pos = vor.vertices[indx_pair[1]]

            pygame.draw.line(pygame_surface, (0, 0, 0), start_pos, end_pos)
</code></pre>
<p>That produced this image:</p>
<p><a href="https://i.stack.imgur.com/CWv5J.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/CWv5J.png"/></a></p>
</div>
<span class="comment-copy">It's not a solution, but the code could check the line length <code>start_pos</code> -&gt; <code>end_pos</code> and discard any line longer than some calibrated maximum.</span>
<span class="comment-copy">@Kingsley thank you, but I'd like to see if I can find something that would work even if the point was near the border of the map.</span>
<span class="comment-copy">The indexes in <code>ridge_vertices</code> can include -1 values, indicating a line at the edge of the diagram that heads off to infinity, rather than connecting to another point in <code>vertices</code>.  You're blindly treating these values as indexes, resulting in a line to whatever vertex happened to be last in the list.  Generating a meaningful far endpoint to represent these infinite lines requires some additional calculation - I would suggest looking at the source code for <code>scipy.spatial.voronoi_plot_2d</code> as a starting point.</span>
<span class="comment-copy">@jasonharper Thank you, but I think you made a mistake about the infinity thing. The lines don't actually head off into infininity. Take a look at the top left and bottom left corners of the image.</span>
<span class="comment-copy">@LuminousNutria they are lines that <i>Should</i> be heading to infinity, so they are given an index of -1. In many languages this is a simple way to return an error rather than in index, but in python -1 is a valid index. Take a look at "<i>/python_location/Lib/site-packages/scipy/spatial/_plotutils.py</i>" line 173-188 to see how the builtin utility does is.</span>
<span class="comment-copy">This question (and answer) remind me slightly of <a href="https://stackoverflow.com/questions/28665491/getting-a-bounded-polygon-coordinates-from-voronoi-cells/33602171#33602171">This</a> answer to another question that helped me solve another <a href="https://stackoverflow.com/questions/55026022/integrating-2d-data-over-an-irregular-grid-in-python">question</a> as well. I believe they may help you in your understanding of voronoi charts a little bit, and might be of some use in your game.</span>
<span class="comment-copy">@Aaron I was going to try and figure out how to make those infinite lines appear to go off the edge of the map. Thanks again!</span>
<span class="comment-copy">that or you could re-implement the builtin scipy implementation I mentioned in my first comment.</span>
<span class="comment-copy">@Aaron I think we might have different versions of <code>_plotutils.py</code>. In mine line 173-188 are just part of the doc string of the <code>voronoi_plot_2d()</code> function. I'm not sure what they indicate in-particular. They say, "Specifies the size of points       Returns     -------     fig : matplotlib.figure.Figure instance         Figure for the plot      See Also     --------     Voronoi      Notes     -----     Requires Matplotlib. "</span>
<span class="comment-copy">Well, I was basically just trying to reference that function. I figured it wasn't something that changed that often. The relevant bits are how that function identifies <code>finite_segments</code> and <code>infinite_segments</code>, and how it calculates a finite point (fairly far away) to represent the infinite line.</span>
