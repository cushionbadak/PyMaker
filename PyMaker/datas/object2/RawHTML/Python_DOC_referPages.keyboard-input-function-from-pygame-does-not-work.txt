<div class="post-text" itemprop="text">
<p>I was looking for the reason for about 3 hours, but I could not find any solution.</p>
<p>There is no error but the program does not seem to detect my key input.
also, I don't see what is wrong with my code. </p>
<p>Additionally, I don't think I understood how event.key and pygame.event.get() is operating. I would be very appreciated if someone explains it to me.</p>
<p>And this is code from my Ascii game, and it's just a beginning of the code, which I've done so far.</p>
<pre><code>    class maingame:

    def __init__(self):
        exit = False

    def processkey(self):
        global hotkey,crazy

        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == K_SPACE:
                    crazy = 1
                if event.key == K_DOWN:
                    dir = 's'
                    y_option -= 1
                    hotkey  = 2
                if event.key == pygame.K_w:
                    dir = 'w'
                    y_option += 1
                    hotkey = 1
                if event.key == K_LEFT:
                    dir = 'a'

                if event.key == K_RIGHT:
                    dir = 'd'
            else:
                    hotkey = 1
                    y_option = 0
                    crazy = 0

    def displaymanu(self,hotkey):
        print("&gt;" if hotkey == 1 else " ","play")
        print("&gt;" if hotkey == 2 else " ","quit")
        if hotkey == 1 and crazy == 1:
            self.play()     
        elif hotkey == 2 and crazy == 1:
            exit = True
if __name__ == '__main__':
        while not quit:
            displayee = maingame()
            os.system('cls')
            displayee.processkey()
            displayee.processkey()
            displayee.displaymanu(hotkey)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>PyGame will <a href="https://stackoverflow.com/a/34360142/1730895">not work without a screen/window</a>.  So your code needs to first initialise PyGame, and then open a window (or full-screen display).</p>
<p>From my understanding of your code, it looks like it should display a menu:</p>
<pre><code>&gt; Play
  Quit
</code></pre>
<p>Where pressing <kbd>↑</kbd>/<kbd>↓</kbd> (or <kbd>w</kbd>/<kbd>s</kbd>) moves the <code>&gt;</code> cursor between the options, and then <kbd>space</kbd> runs the option.</p>
<p>One of the issues with your code, is your trying to interpret the key-strokes inside the <code>displaymanu()</code> function.  It's best to keep a function doing a singular thing, so all key handling in <code>processkey()</code> and <em>only</em> screen drawing in <code>displaymanu()</code>.</p>
<p>I patched your code to the point where it works.  This involved modifying the class so that it initialised the PyGame display.  The menu needed to be displayed in the window, so calls to a new function <code>drawTextAt()</code> were added in place of the <code>print()</code>.  Many of the member variables of class <code>Maingame</code> had scope issues, but simply specifying <code>self.</code>variable-name (which made them members of the class) fixed these.</p>
<p>I also added a game state to show how the key handling needs to change depending on what phase the game is currently in.  It starts in menu, where Up/Down simply changes the menu option.  But then later during the game play, Up/Down needs to do something entirely different.</p>
<pre><code>import pygame
import os

# Window size
WINDOW_WIDTH  = 400
WINDOW_HEIGHT = 400
# colours
DARK    = (  50, 50, 50 )
RED     = ( 255, 50, 50 )


class Maingame:

    def __init__(self):
        # Initialise PyGame
        pygame.init()
        pygame.font.init()
        # Initialise a window
        pygame.display.set_caption("Main Game")
        self.screen = pygame.display.set_mode( ( WINDOW_WIDTH, WINDOW_HEIGHT ), pygame.DOUBLEBUF )
        # menu font
        self.font   = pygame.font.SysFont(None, 20)

        self.hotkey     = 1
        self.crazy      = 0
        self.y_option   = 0
        self.game_state = 0  # state=0 -&gt; show menu, 1 =&gt; Game, 2-&gt; Game Over

    def processkey(self):
        # no key pressed yet
        self.crazy = 0
        dir_code   = ''  
        exit       = False

        # Detect keys pressed
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    dir_code = ' '
                    self.crazy = 1
                elif event.key == pygame.K_s or event.key == pygame.K_DOWN:
                    dir_code = 's'
                    self.y_option -= 1
                    self.hotkey  = 2
                elif event.key == pygame.K_w or event.key == pygame.K_UP:
                    dir_code = 'w'
                    self.y_option += 1
                    self.hotkey = 1
                elif event.key == pygame.K_LEFT:
                    dir_code = 'a'
                elif event.key == pygame.K_RIGHT:
                    dir_code = 'd'
                else:
                    self.hotkey = 1
                    self.y_option = 0
                    self.crazy = 0
                print( "DEBUG - game_state=[%d], dir_code is [%s], hotkey is [%d], crazy=[%d]" % ( self.game_state, dir_code, self.hotkey, self.crazy ) )

                # Act on the keys pressed (if any)
                if self.game_state == 0:  # menu mode
                    if self.hotkey == 1 and self.crazy == 1:
                        self.game_state = 1 # start the game
                    elif self.hotkey == 2 and self.crazy == 1:
                        exit = True
                elif self.game_state == 1:  # game mode
                    pass  # TODO
                elif self.game_state == 2:  # game-over mode
                    pass  # TODO

        return exit

    def drawTextAt( self, text, coord, foreground_colour=(255,255,255) ):
        """ Convert the specified text into a font-bitmap, and draw it
            onto the screen at the given co-ordinates """
        text_bitmap = self.font.render( text, True, foreground_colour )
        self.screen.blit( text_bitmap, coord )

    def displaymanu( self ):
        """ Draw the Menu """
        # MENU
        self.screen.fill( DARK )
        # Draw the menu options
        prefix = [ "  ", "  " ]
        prefix[ self.hotkey-1 ] = "&gt; "
        self.drawTextAt( prefix[0] + "Play", ( 30, 100 ) )
        self.drawTextAt( prefix[1] + "Quit", ( 30, 150 ) )


    def displaygame( self ):
        """ Draw the Game Screen """
        # GAME SCREEN
        self.screen.fill( RED )
        self.drawTextAt( "GAME - #TODO", ( 30, 180 ) )

    def displaygameover( self ):
        """ Draw the Game-Over Screen """
        # GAME OVER SCREEN
        self.screen.fill( RED )
        self.drawTextAt( "* GAME OVER *", ( 30, 180 ) )

if __name__ == '__main__':
    # Initialise PyGame and the window

    displayee = Maingame()
    quit = False
    while not quit:
        #os.system('cls')
        # Draw the correct display for the state
        if displayee.game_state == 0:
            displayee.displaymanu()
        elif displayee.game_state == 1:
            displayee.displaygame()
        elif displayee.game_state == 2:
            displayee.displaygameover()
        # Push all drawing to the screen
        pygame.display.flip()
        # Handle keys
        quit = displayee.processkey()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looks like you didn't put <code>pygame.</code> before some of the variables here:</p>
<pre><code>if event.key == K_SPACE: # Does not have pygame prefix
    crazy = 1
if event.key == K_DOWN: # Does not have pygame prefix
    dir = 's'
    y_option -= 1
    hotkey  = 2
if event.key == pygame.K_w: # Does have pygame prefix
    dir = 'w'
    y_option += 1
    hotkey = 1
if event.key == K_LEFT: # Does not have pygame prefix
    dir = 'a'

if event.key == K_RIGHT: # Does not have pygame prefix
    dir = 'd'
</code></pre>
<p>Add <code>pygame.</code> to those and it should detect after that. Strange how it didn't pull a <code>NameError</code> exception while it was running however.</p>
</div>
<span class="comment-copy">Sorry, I can't figure out what you're actually trying to do in your code..... Could you explain what you expect to happen?</span>
<span class="comment-copy">Where is your <code>pygame.init()</code>? And you shouldn't re-create your <code>maingame()</code> class every loop. That will break a lot of things.</span>
<span class="comment-copy">Further more, where do you setup your main screen? This code will give <code>pygame.error: video system not initialized</code>. And the reason why this isn't working is because Pygame is a <b>graphical library</b>. It won't do ASCII at all. <a href="https://stackoverflow.com/questions/3523174/raw-input-in-python-without-pressing-enter">here</a> is a alternative for ASCII stuff. If that's not to your liking - I can post a ASCII OpenGL version below where the ASCII appears in a graphical window. But you won't get what you need from Pygame in this case.</span>
<span class="comment-copy">Great answer! And a proper answer with a lot of work behind it. I can't decide if you're my nemesis for beating me to the punch in rewriting the code or you're a hero because it's so good haha. Good job, keep it up! :)</span>
<span class="comment-copy">That's not the problem IMHO. OP's code doesn't show the import statement, but they said that there are no errors, so it's safe to assume that <code>from pygame import *</code> is used.</span>
<span class="comment-copy">Good point, but that would make the usage of <code>pygame.K_w</code> a bit odd when they could have just used <code>K_w</code> like the rest of the if statements.</span>
<span class="comment-copy">OP expects key-detection in the console. Pygame won't support this. Since it will only trigger on key-down/key-up events in the graphical window. Which hasn't been setup in the code above at all. So there's not even a window to send key events into even if you wanted to.</span>
<span class="comment-copy">Ah. That makes sense, I was interpreting it in a different way.</span>
