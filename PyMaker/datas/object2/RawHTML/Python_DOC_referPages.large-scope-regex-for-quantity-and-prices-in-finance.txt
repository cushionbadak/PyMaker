<div class="post-text" itemprop="text">
<p>I am doing some data mining on a huge quantity of financial data and I need to find out two python regex that match:</p>
<p>Prices, such as:</p>
<pre><code>16 666 666.67
16 666 666,67
666 666.67
5 567.1
5 677,1
0.0
0,101
5,4
5.40
54.0
5.675674754747457
5980990.009345
16,000.45
234,234,657.108
</code></pre>
<p>There is always a coma or a dot in the price. But there could be spaces before the coma (spaces need to be consistent, not like <code>56 34.345</code> for instance)</p>
<p>Volume (quantity), such as:</p>
<pre><code>9898
5
450934
5,000
1,000
1,000,000
5,998
11
0
5 000
1 000 000
1 980 000 000
599
233 590
23 613
181 876 980
</code></pre>
<p>Quantity is never dot separated. It cannot have decimals basically.</p>
<p>Here is the one I tried for prices:
<code>(^[0-9]{0,}$)|(\d{1,}(?:[.,]\d{3})*(?:[.,]\d*))</code>
But I fail to handle spaces.</p>
<p>And for the volume, it is very complicated to me since there are also spaces everywhere !</p>
<p>Thank you so much.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend a bit more than just regex in this case.</p>
<p>First, normalizing each line is good, since there's lots of acceptable formats. We'll normalize so that <code>.</code> is always the decimal separator and <code></code> is always the thousand separator:</p>
<pre><code>if '.' not in line:
    # `,` is our separator, so replace with `.`
    line = line.replace(',', '.')
else:
    # `.` is our separator, so replace `,` with ` ` (does nothing if already space separated).
    line = line.replace(',', ' ')
</code></pre>
<p>Now, we can apply the regex to <code>line</code>:</p>
<p><code>^\d{1,3}(\s\d{3})*\.\d+$</code> will match anything with the thousands separated.
<code>^\d+\.\d+$</code> will match anything without the thousands separated.</p>
<p>Note that since we did a little pre-processing on the lines, our regex is waaaaay simpler. I'll leave the quantity one (should be easier) and capturing the appropriate pieces to you.</p>
<p>I'd also recommend capturing the whole string, and then calling <code>.replace(' ', '')</code> on it to strip out spaces, rather than trying to strip them out inside the regex.</p>
</div>
<span class="comment-copy">What is your "desired" output?</span>
<span class="comment-copy">Is there some context around these numbers in the string from which you are trying to match the expression or do you get the numbers just like in your examples? If there's more stuff around, then this would be nice to know to help.</span>
<span class="comment-copy">@FailSafe A boolean is ok, the entire volume or quantity captured is better, as you can !</span>
<span class="comment-copy">@TheKvist There could be <code>(</code>or things glued around, yes</span>
<span class="comment-copy">In the prices, are some of the commas decimal separators and some of them digit separators?</span>
<span class="comment-copy">I will use the method you suggested and try come back with a nice function. Thanks</span>
<span class="comment-copy">sure, let me know if it works (and if it does, please accept this answer).</span>
<span class="comment-copy">sure, give me some time to try it out !</span>
