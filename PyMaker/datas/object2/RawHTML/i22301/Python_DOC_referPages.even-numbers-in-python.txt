<div class="post-text" itemprop="text">
<p>Does anyone know if Python has an in-built function to work to print out even values. Like range() for example.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#func-range" rel="noreferrer">Range has three parameters.</a></p>
<p>You can write <code>range(0, 10, 2)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a step of 2:</p>
<pre><code>range(start, end, step)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>range( 0, 10, 2 )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know if this is what you want to hear, but it's pretty trivial to filter out odd values with list comprehension.</p>
<pre><code>evens = [x for x in range(100) if x%2 == 0]
</code></pre>
<p>or</p>
<pre><code>evens = [x for x in range(100) if x&amp;1 == 0]
</code></pre>
<p>You could also use the optional step size parameter for <code>range</code> to count up by 2.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; if 100 % 2 == 0 : print "even"
...
even
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are also a few ways to write a lazy, infinite iterators of even numbers. </p>
<p>We will use the <code>itertools</code> module and <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code></a><sup><a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.iterate" rel="nofollow noreferrer">1</a></sup> to make iterators that emulate <code>range()</code>.</p>
<pre><code>import itertools as it

import more_itertools as mit


# Infinite iterators
a = it.count(0, 2)
b = mit.tabulate(lambda x: 2 * x, 0)
c = mit.iterate(lambda x: x + 2, 0)
</code></pre>
<p>All of the latter options can generate an infinite sequence of even numbers, <code>0, 2, 4, 6, ...</code>.  </p>
<p>You can treat these like any generator by looping over them, or you can select <code>n</code> numbers from the sequence via <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> or <code>take</code> from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> e.g.:</p>
<pre><code>mit.take(10, a)
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
<p>This is equivalent to <code>list(range(0, 20, 2))</code>.  However, unlike <code>range()</code>, the iterator is paused and will yield the next batch of even numbers if run again:</p>
<pre><code>mit.take(10, a)
# [20, 22, 24, 26, 28, 30, 32, 34, 36, 38]
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>The options presented are all infinite iterators that <code>start</code> with an integer, i.e. <code>0</code>.</p>
<ul>
<li>a. <code>itertools.count</code> yields the next value incremented by a <code>step=2</code> (see <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">equivalent code</a>).</li>
<li>b. <code>more_itertools.tabulate</code> is an <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a> that maps a function to each value of a number line (see <a href="https://github.com/erikrose/more-itertools/blob/master/more_itertools/recipes.py#L95-L110" rel="nofollow noreferrer">source code</a>). </li>
<li>c. <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.iterate" rel="nofollow noreferrer"><code>more_itertools.iterate</code></a> yields the starting value (<code>0</code>).  It then applies a function to the last item (incrementing by 2), yields that result and repeats this process (see <a href="https://github.com/erikrose/more-itertools/blob/master/more_itertools/more.py#L391-L401" rel="nofollow noreferrer">source code</a>).</li>
</ul>
<p><sup><a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.iterate" rel="nofollow noreferrer">1</a><sub>A third-party package that implements many useful tools, including <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a> such as <code>take</code> and <code>tabulate</code>.</sub></sup></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#This is not suggestible way to code in Python, but it gives a better understanding


numbers = range(1,10)

even = []

for i in numbers:

     if i%2 == 0:

       even.append(i)
print (even)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

b = [i for i in a if i % 2 == 0]

print("Original List --&gt;", a,"\n")
print("and the Even Numbers--&gt;", b)
</code></pre>
</div>
<span class="comment-copy">As does xrange()</span>
<span class="comment-copy">+1 for actual links to docs... why do so few people bother?</span>
<span class="comment-copy">You could also write <code>map(lambda x: x * 2, range(0, 50))</code></span>
<span class="comment-copy">Complement that last comprehension to get odds:  odds = [x for x in range(100) if x&amp;1 !=0]</span>
<span class="comment-copy">If the filtering criteria were more complex this would be fine, but IMHO it's overkill when you can just pass <code>range</code> a <code>step</code> arg. Why create integer objects just to throw them away when you can avoid creating them in the first place?</span>
<span class="comment-copy">Thanks for your contribution. Note that this is a very old question that already contains many good answers. In particular, <a href="https://stackoverflow.com/a/2184774/2124834">the answer by Sapph</a> already contains the technique you are describing.</span>
