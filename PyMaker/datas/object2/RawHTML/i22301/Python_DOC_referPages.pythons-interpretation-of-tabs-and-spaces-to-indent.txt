<div class="post-text" itemprop="text">
<p>I decided, that I learn a bit of Python. The first introduction says that it uses indentation to group statements. While the best habit is clearly to use just one of these what happens if I interchange them? How many spaces will be considered equal to one tab? Or will it fail to work at all if tabs and spaces are mixed?</p>
</div>
<div class="post-text" itemprop="text">
<p>Spaces are not treated as equivalent to tab.  A line indented with a tab is at a different indentation from a line indented with 1, 2, 4 <s>or 8</s> spaces.</p>
<p>Proof by counter-example (<em>erroneous, or, at best, limited - tab != 4 spaces</em>):</p>
<pre><code>x = 1
if x == 1:
^Iprint "fff\n"
    print "yyy\n"
</code></pre>
<p>The '<code>^I</code>' shows a <kbd>TAB</kbd>.  When run through Python 2.5, I get the error:</p>
<pre><code>  File "xx.py", line 4
    print "yyy\n"
                ^
IndentationError: unindent does not match any outer indentation level
</code></pre>
<p>Thus showing that in Python 2.5, tabs are not equal to spaces (and in particular not equal to 4 spaces).</p>
<hr/>
<p>Oops - embarrassing; my proof by counter-example shows that tabs are not equivalent to 4 spaces.  As <a href="https://stackoverflow.com/users/95810/alex-martelli">Alex Martelli</a> points out in a <a href="https://stackoverflow.com/questions/2034517/pythons-interpretation-of-tabs-and-spaces-to-indent/2034527?noredirect=1#comment1958966_2034527">comment</a>, in Python 2, tabs are equivalent to 8 spaces, and adapting the example with a tab and 8 spaces shows that this is indeed the case.</p>
<pre><code>x = 1
if x != 1:
^Iprint "x is not 1\n"
        print "y is unset\n"
</code></pre>
<p>In Python 2, this code works, printing nothing.</p>
<hr/>
<p>In Python 3, the rules are slightly different (as <a href="https://stackoverflow.com/questions/2034517/pythons-interpretation-of-tabs-and-spaces-to-indent/2034527?noredirect=1#comment72036532_2034527">noted</a> by <a href="https://stackoverflow.com/users/918959/antti-haapala">Antti Haapala</a>).  Compare:</p>
<ul>
<li><a href="http://docs.python.org/2/reference/lexical_analysis.html#indentation" rel="noreferrer">Python 2 on Indentation</a></li>
<li><a href="http://docs.python.org/3/reference/lexical_analysis.html#indentation" rel="noreferrer">Python 3 on Indentation</a></li>
</ul>
<p>Python 2 says:</p>
<blockquote>
<p>First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line’s indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.</p>
</blockquote>
<p>Python 3 says:</p>
<blockquote>
<p>Tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight (this is intended to be the same rule as used by Unix). The total number of spaces preceding the first non-blank character then determines the line’s indentation. Indentation cannot be split over multiple physical lines using backslashes; the whitespace up to the first backslash determines the indentation.</p>
</blockquote>
<p>(Apart from the opening word "First," these are identical.)</p>
<p>Python 3 adds an extra paragraph:</p>
<blockquote>
<p>Indentation is rejected as inconsistent if a source file mixes tabs and spaces in a way that makes the meaning dependent on the worth of a tab in spaces; a TabError is raised in that case.</p>
</blockquote>
<p>This means that the <kbd>TAB</kbd> vs 8-space example that worked in Python 2 would generate a TabError in Python 3.  It is best — necessary in Python 3 — to ensure that the sequence of characters making up the indentation on each line in a block is identical.  <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a> says 'use 4 spaces per indentation level'.  (Google's coding standards say 'use 2 spaces'.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Follow <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> for Python style. PEP 8 says:
  Indentation</p>
<blockquote>
<p>Use 4 spaces per indentation level.</p>
<p>For really old code that you don't want to mess up, you can continue
  to use 8-space tabs.</p>
</blockquote>
<p>Tabs or Spaces?</p>
<blockquote>
<p>Never mix tabs and spaces.</p>
<p>The most popular way of indenting Python is with spaces only.  The
  second-most popular way is with tabs only.  Code indented with a
  mixture of tabs and spaces should be converted to using spaces
  exclusively.  When invoking the Python command line interpreter with
  the -t option, it issues warnings about code that illegally mixes tabs
  and spaces.  When using -tt these warnings become errors.  These
  options are highly recommended!</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, the interpretation of <kbd>TAB</kbd> is as if it is converted to spaces using 8-space tab stops (as provided by previous answers already); that is that each <kbd>TAB</kbd> furthers the indentation by 1 to 8 spaces so that the resulting indentation is divisible by 8.</p>
<p>However this does not apply to Python 3 anymore - in <a href="http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces" rel="nofollow noreferrer">Python 3 mixing of spaces and tabs are always an error</a> - tabs only match tabs and spaces only match other spaces in indentation; that is a line indented with <kbd>TAB</kbd><kbd>SPACE</kbd><kbd>SPACE</kbd> can contain also lines indented with <kbd>SPACE</kbd><kbd>SPACE</kbd><kbd>TAB</kbd>; and might contain an indented block indented with <kbd>TAB</kbd><kbd>SPACE</kbd><kbd>SPACE</kbd><kbd>TAB</kbd>, but if it the indented block contained <kbd>TAB</kbd><kbd>TAB</kbd>, it would be considered an 
indentation error, even though the block would seemingly extend further:</p>
<blockquote>
<p>Indentation is rejected as inconsistent if a source file mixes tabs and spaces in a way that makes the meaning dependent on the worth of a tab in spaces; a TabError is raised in that case.</p>
</blockquote>
<p>I.e. the algorithm works as follows:</p>
<ul>
<li><p>if both number of tabs <strong>and</strong> number of spaces matches the previous line (no matter the order), then this line belongs to the same block with the previous line</p></li>
<li><p>if the number of one of (tabs, spaces) is greater than on the previous line and number of the other is at least equal to those on the previous line, this is an indented block</p></li>
<li><p>the tuple <code>(tabs, spaces)</code> matches an indent from a previous block - this dedents to that block</p></li>
<li><p>otherwise an <code>IndentationError</code> or a <code>TabError</code> is raised.</p></li>
</ul>
<p>This is why mixing tabs and spaces, or even using tabs for indentation at all would be considered a very bad practice in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just don't interchange them :)<br/>
Set your IDE/editor to input 4 spaces upon pressing "tab" and you are good to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend that you go through <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 8</a> which is the 'official' Python style guide for Python code. It covers (among other things) the use of tabs/spaces.</p>
</div>
<div class="post-text" itemprop="text">
<p>Four spaces are one tab (in my setup), but as far as I know, they are not interchanged. You can use either spaces or tabs, not both.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that the tab character should simply never appear in source code under any circumstances. There's no advantage to it and it's an endless source of tiny errors.   - use a character string with \t if you need a tab, it has the advantage that it's self-documenting. </p>
<p><a href="http://www.jwz.org/doc/tabs-vs-spaces.html" rel="nofollow noreferrer">Here</a>'s the classic article about tabs vs spaces - I use a variant of jwz's elisp in my own .emacs file.</p>
<p>(I confess to personally breaking with PEP 8 by using only 2 characters' indentation - 4 characters is a lot when your lines are only 80 characters...)</p>
</div>
<span class="comment-copy">@JonathanLeffler yes, the addendum starting from "it is followed by a paragraph": means in particular that the size of tabs doesn't matter, one tab matches only one tab in indentation; one space matches only one space in indentation.</span>
<span class="comment-copy">Only, that the lines are displayed in tracebacks indented by 8 spaces.</span>
<span class="comment-copy">Not necessarily. That depends on your setup.</span>
<span class="comment-copy"><a href="https://www.youtube.com/watch?v=MBWAP_8zxaM" rel="nofollow noreferrer">Douglas Crockford agrees</a> (08 min 49 secs).</span>
<span class="comment-copy">Nice to be back up to zero on this comment, which for a while was my most downvoted comment here.  :-)</span>
