<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/82831/how-do-i-check-whether-a-file-exists-without-exceptions">How do I check whether a file exists without exceptions?</a>
<span class="question-originals-answer-count">
                    42 answers
                </span>
</li>
</ul>
</div>
<p>Which is the preferred way to check if a file exists and if not create it?</p>
</div>
<div class="post-text" itemprop="text">
<p>To check if a path is an existing file:</p>
<p><a href="http://docs.python.org/library/os.path.html#os.path.isfile" rel="noreferrer"><code>os.path.isfile(path)</code></a></p>
<blockquote>
<p>Return <code>True</code> if <em>path</em> is an existing
  regular file. This follows symbolic
  links, so both <code>islink()</code> and
  <code>isfile()</code> can be true for the same
  path.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Instead of <code>os.path.isfile</code>, suggested by others, I suggest using <code>os.path.exists</code>, which checks for anything with that name, not just whether it is a regular file.</p>
<p>Thus:</p>
<pre><code>if not os.path.exists(filename):
    file(filename, 'w').close()
</code></pre>
<p>Alternatively:</p>
<pre><code>file(filename, 'w+').close()
</code></pre>
<p>The latter will create the file if it exists, but not otherwise. It will, however, fail if the file exists, but you don't have permission to write to it. That's why I prefer the first solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems to me that all other answers here (so far) fail to address the race-condition that occurs with their proposed solutions.</p>
<p>Any code where you first check for the files existence, and then, a few lines later in your program, you create it, runs the risk of the file being created while you weren't looking and causing you problems (or you causing the owner of "that other file" problems).</p>
<p>If you want to avoid this sort of thing, I would suggest something like the following (untested):</p>
<pre><code>import os

def open_if_not_exists(filename):
    try:
        fd = os.open(filename, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
    except OSError, e:
        if e.errno == 17:
            print e
            return None
        else:
            raise
    else:
        return os.fdopen(fd, 'w')
</code></pre>
<p>This should open your file for writing if it doesn't exist already, and return a file-object. If it does exists, it will print "Ooops" and return None (untested, and based solely on reading <a href="http://docs.python.org/library/os.html#os.open" rel="noreferrer">the python documentation</a>, so might not be 100% correct).</p>
</div>
<div class="post-text" itemprop="text">
<p>If (when the file doesn't exist) you want to create it as empty, the simplest approach is</p>
<pre><code>with open(thepath, 'a'): pass
</code></pre>
<p>(in Python 2.6 or better; in 2.5, this requires an "import from the future" at the top of your module).</p>
<p>If, on the other hand, you want to leave the file alone if it exists, but put specific non-empty contents there otherwise, then more complicated approaches based on <code>if os.path.isfile(thepath):</code>/<code>else</code> statement blocks are probably more suitable.</p>
</div>
<div class="post-text" itemprop="text">
<p>This was the best way for me. You can retrieve all existing files (be it symbolic links or normal):</p>
<p><strong>os.path.lexists(path)</strong></p>
<pre><code>Return True if path refers to an existing path. Returns True for broken symbolic links. Equivalent to exists() on platforms lacking os.lstat().

New in version 2.4.
</code></pre>
</div>
<span class="comment-copy">Actual duplicate question: <a href="http://stackoverflow.com/q/10978869/3345375">Safely create a file if and only if it does not exist with python</a>. In Python 3.3+, use the 'x' flag when <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open()</code></a>ing a file to avoid race conditions.</span>
<span class="comment-copy">Of course, you can get into a race condition where the file doesn't exist when you check, but springs into existence before you can create it. Extremely unlikely, but possible.</span>
<span class="comment-copy">This will return true if a directory exists by the given name, in which case a subsequent creation of the file will fail.</span>
<span class="comment-copy">I think you are thinking of os.path.exists, which returns True if the path exists (i.e. is a file or a directory). As shown above, os.path.isfile returns True when the path is a regular file.</span>
<span class="comment-copy">For Python 3 need to replace <code>file</code> with <code>open</code>: <code>if not os.path.exists(filename):             open(filename, "w+").close()</code></span>
<span class="comment-copy">Did you mean to say, "The latter will create the file if it does not exist."?</span>
<span class="comment-copy">Note that <code>file(filename, 'w+').close()</code> will <a href="https://docs.python.org/2/library/functions.html#open" rel="nofollow noreferrer">truncate file if it exists</a>.</span>
<span class="comment-copy">This does work, but <code>fobj = os.fdopen(fd)</code> should be <code>fobj = os.fdopen(ds, 'w')</code> and after that <code>os.close(fd)</code>.</span>
<span class="comment-copy">Opps, scratch <code>os.close(fd)</code></span>
<span class="comment-copy">Actually the line needs to be <code>fobj = os.fdopen(fd, 'w')</code>. That's 'fd' not 'ds'</span>
<span class="comment-copy">That exception catches everything and handles it all the same... it would be better if you explicitly named what should be getting caught there.</span>
<span class="comment-copy">open() is not an ideal solution compared to os.isfile. Open does unnecessary actions if you just want to check the existence of the file (though it is true, open is the best way to read and write files), and requires read privileges of the file to verify the existence of the file.</span>
