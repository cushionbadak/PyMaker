<div class="post-text" itemprop="text">
<p>While other questions have tackled the broader category of <a href="https://stackoverflow.com/questions/659415/python-sequence-naming-convention">sequences</a> and <a href="https://stackoverflow.com/questions/711884/python-naming-conventions-for-modules">modules</a>, I ask this very specific question:</p>
<p><strong>"What naming convention do you use for dictionaries and why?"</strong></p>
<p>Some naming convention samples I have been considering:</p>
<pre><code># 'value' is the data type stored in the map, while 'key' is the type of key
value_for_key={key1:value1, key2,value2}
value_key={key1:value1, key2,value2}
v_value_k_key={key1:value1, key2,value2}
</code></pre>
<p>Don't bother answering the 'why' with "because my work tells me to", not very helpful. The reason driving the choice is more important. Are there any other good considerations for a dictionary naming convention aside from readability?</p>
<p><strong>EDIT:</strong></p>
<p><strong>Chosen answer:</strong> value_key_map</p>
<p><strong>Reason for chosen answer:</strong> Allows a code reviewer to quickly and easily figure out the key and value for a map, and the fact that it is a map without looking anywhere else.</p>
</div>
<div class="post-text" itemprop="text">
<p>I never seem to name them anything like what you proposed (i.e. keeping one way). It just seems to be much more clear when I can find a "proper name" for the hash. It might be "person_details" or "file_sizes" or "album_tracks" etc. (although the last 2 seem to have key_value names, first one a bit less). In rare cases, it will be <code>key_value_map</code>, or <code>value_key_map</code> if it's important that it's a map.</p>
<p>I would never assume any naming scheme for that. Sometimes the values are what you're after, sometimes the keys. My preference is "a natural name".</p>
</div>
<div class="post-text" itemprop="text">
<p><code>key_to_value</code>, for example <code>surname_to_salary</code> may be useful when there are closely interrelated maps in code: a to b, b to a, c to b etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it makes sense to name the dict after the values in the dict, and drop any mention of the key. After all, you are going to be using the dict in situations like <code>values[key]</code> which makes it perfectly clear what the keys are, assuming you named <code>key</code> well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I usually use &lt;something&gt;<code>map</code> since it's usually a map such as strings to functions, or numbers to classes, or whatnot. Unnamed dicts usually end up in a larger structure, so I don't worry about them.</p>
</div>
<div class="post-text" itemprop="text">
<p>In our projects, we adopted following convention:</p>
<ul>
<li><code>key_to_value_map</code> when it is a map </li>
<li><code>aname_dict</code> for larger more complex structure.</li>
</ul>
</div>
<span class="comment-copy">IMHO, many people with some math background may find <code>value_key_map</code> quite confusing as it may suggest that the dictionary maps values to keys (i.e. an inverted dictionary) which obviously is not intended.</span>
<span class="comment-copy">In python parlance, <code>dict</code> is the correct term to use. (<code>map</code> is a function <a href="https://docs.python.org/3/library/functions.html#map." rel="nofollow noreferrer">docs.python.org/3/library/functions.html#map.</a>) It would be better to name as <code>key_value_dict</code>, so for example <code>id_user_dict</code> has <code>id</code> as the key and <code>user</code> as the value.</span>
<span class="comment-copy">+1 value_key_map is straight to the point and very readable.</span>
<span class="comment-copy">Why not key_value_map? It is more natural, just search for "key_value_map" and "value_key_map" (with quotes) in google.</span>
<span class="comment-copy">@DSblizzard Honestly, I think it was just accidental because I saw @pokstad listing value in the first position in his proposals - a bit of subconscious suggestion. <code>key_value_map</code> is probably what I would use in my code too.</span>
<span class="comment-copy">@viraptor: I think you should edit your answer</span>
<span class="comment-copy">This is my approach too. The <i>_to_</i> naming convention quickly indicates that it's a dict, so no need for *_map. It also gives a nice little calculus to read. <code>apple = oranges_to_apples[my_orange]</code>.</span>
<span class="comment-copy">I recently came across a similar question for C# where <a href="http://stackoverflow.com/a/4330705/945456">an answer</a> suggested <code>values_by_key</code> which seems like another good option.</span>
<span class="comment-copy">Similar here. But instead of "oranges_to_apples[my_orange]" I would use "apple_per_orange[my_orange]" or "tel_per_person[Mueller]"</span>
<span class="comment-copy">That was my first instinct, but I feel like the naming convention between my lists and my dictionaries are too similar. When I come back to revisit old code I constantly have to find where something is initialized or accessed by key so that I know my dictionary is not a list or vice versa.</span>
<span class="comment-copy">@pokstad: Yes, I see what you're saying. However, if you look at the standard library, its dicts seem to be named after the <code>values</code>only, never the more wordy <code>values_key_map</code>. For example, <code>sys.modules</code>, or <code>locals()</code>. That seems to be the way at least the developers think is best. Perhaps a bit of documentation could help too.</span>
<span class="comment-copy">+1 Thanks for the concrete reference.</span>
<span class="comment-copy">+1 I like this naming convention because it makes it known very quickly that you are dealing with a dictionary and not a list. The only thing I don't like is that the entire word map seems like overkill, is there a popular standard that accomplishes this with some sort of shorthand for 'map'? Is there a Pythonic way to remind the code reviewer that the object is a map?</span>
