<div class="post-text" itemprop="text">
<pre><code>t = e['updated_parsed']
dt = datetime.datetime(t[0],t[1],t[2],t[3],t[4],t[5],t[6]
print dt
&gt;&gt;&gt;2010-01-28 08:39:49.000003
</code></pre>
<p>How do I turn that into a string?:</p>
<pre><code>"January 28, 2010"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The datetime class has a method strftime. The Python docs documents the different formats it accepts:</p>
<ul>
<li>Python 2: <a href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">strftime() Behavior</a></li>
<li>Python 3: <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">strftime() Behavior</a></li>
</ul>
<p>For this specific example, it would look something like:</p>
<pre><code>my_datetime.strftime("%B %d, %Y")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is how you can accomplish the same using python's general formatting function...</p>
<pre><code>&gt;&gt;&gt;from datetime import datetime
&gt;&gt;&gt;"{:%B %d, %Y}".format(datetime.now())
</code></pre>
<p>The formatting characters used here are the same as those used by <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">strftime</a>. Don't miss the leading <code>:</code>  in the format specifier.</p>
<p>Using format() instead of strftime() in most cases can make the code more readable, easier to write and consistent with the way formatted output is generated...</p>
<pre><code>&gt;&gt;&gt;"{} today's date is: {:%B %d, %Y}".format("Andre", datetime.now())
</code></pre>
<p>Compare the above with the following strftime() alternative...</p>
<pre><code>&gt;&gt;&gt;"{} today's date is {}".format("Andre", datetime.now().strftime("%B %d, %Y"))
</code></pre>
<p>Moreover, the following is not going to work...</p>
<pre><code>&gt;&gt;&gt;datetime.now().strftime("%s %B %d, %Y" % "Andre")
Traceback (most recent call last):
  File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;
    datetime.now().strftime("%s %B %d, %Y" % "Andre")
TypeError: not enough arguments for format string
</code></pre>
<p>And so on...</p>
</div>
<div class="post-text" itemprop="text">
<h2>Using f-strings, in Python 3.6+.</h2>
<pre><code>from datetime import datetime

date_string = f'{datetime.now():%Y-%m-%d %H:%M:%S%z}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>very old question, i know. but with the new <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">f-strings</a> (starting from python 3.6) there are fresh options. so here for completeness:</p>
<pre><code>from datetime import datetime

dt = datetime.now()

# str.format
strg = '{:%B %d, %Y}'.format(dt)
print(strg)  # July 22, 2017

# datetime.strftime
strg = dt.strftime('%B %d, %Y')
print(strg)  # July 22, 2017

# f-strings in python &gt;= 3.6
strg = f'{dt:%B %d, %Y}'
print(strg)  # July 22, 2017
</code></pre>
<p><a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer"><code>strftime()</code> and <code>strptime()</code> Behavior</a> explains what the format specifiers mean.</p>
</div>
<div class="post-text" itemprop="text">
<p>Read <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime" rel="noreferrer">strfrtime</a> from the official docs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python datetime object has a method attribute, which prints in readable format.</p>
<pre><code>&gt;&gt;&gt; a = datetime.now()
&gt;&gt;&gt; a.ctime()
'Mon May 21 18:35:18 2018'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is for format the date?   </p>
<pre><code>def format_date(day, month, year):
        # {} betekent 'plaats hier stringvoorstelling van volgend argument'
        return "{}/{}/{}".format(day, month, year)
</code></pre>
</div>
<span class="comment-copy"><code>dt = datetime.datetime(*t[:7])</code></span>
<span class="comment-copy">Dumb question... Are the <code>strftime</code> different between Python 2 and 3?</span>
<span class="comment-copy">I've been wondering what are the benefits to using format() for this case, over strftime(). Does either method present a benefit other than personal preference? What are the performance differences?</span>
<span class="comment-copy">@Andre Thanks for your question! Personal preferences are often guided by experience. Please see my updated answer for why I prefer format() over strftime(). Performance and Python are two words which do not go well together. I wouldn't be overly concerned with performance if I have decided to use Python. When I need performance I use some statically typed high performance language.</span>
<span class="comment-copy">The format method is simpler in most cases. Compare: <code>print 'Today is {:%B %d, %Y}'.format(datetime.now())</code> to <code>print 'Today is {}'.format(datetime.now().strftime('%B %d, %Y')</code>. When you are using the format() method anyways, why not use it for the date formatting too?</span>
<span class="comment-copy">This throws syntax error: "SyntaxError: invalid syntax". Could you please elaborate?</span>
<span class="comment-copy">This code is only valid with Python 3.6+</span>
<span class="comment-copy"><a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">realpython.com/python-f-strings</a></span>
<span class="comment-copy">Ok. I have Python 3.5.1. That is why. Thanks for the clarification.</span>
