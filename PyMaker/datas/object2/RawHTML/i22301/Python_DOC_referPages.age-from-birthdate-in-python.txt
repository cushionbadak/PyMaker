<div class="post-text" itemprop="text">
<p>How can I find an age in python from today's date and a persons birthdate? The birthdate is a from a DateField in a  Django model.</p>
</div>
<div class="post-text" itemprop="text">
<p>That can be done much simpler considering that int(True) is 1 and int(False) is 0:</p>
<pre><code>from datetime import date

def calculate_age(born):
    today = date.today()
    return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import date

def calculate_age(born):
    today = date.today()
    try: 
        birthday = born.replace(year=today.year)
    except ValueError: # raised when birth date is February 29 and the current year is not a leap year
        birthday = born.replace(year=today.year, month=born.month+1, day=1)
    if birthday &gt; today:
        return today.year - born.year - 1
    else:
        return today.year - born.year
</code></pre>
<p><strong>Update:</strong> Use <a href="https://stackoverflow.com/a/9754466/65387">Danny's solution</a>, it's better</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import date

days_in_year = 365.2425    
age = int((date.today() - birth_date).days / days_in_year)
</code></pre>
<p>In Python 3, you could perform division on <code>datetime.timedelta</code>:</p>
<pre><code>from datetime import date, timedelta

age = (date.today() - birth_date) // timedelta(days=365.2425)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is using <code>python-dateutil</code></p>
<pre><code>import datetime

import dateutil

def birthday(date):
    # Get the current date
    now = datetime.datetime.utcnow()
    now = now.date()

    # Get the difference between the current date and the birthday
    age = dateutil.relativedelta.relativedelta(now, date)
    age = age.years

    return age
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As suggested by @[Tomasz Zielinski] and @Williams <a href="http://labix.org/python-dateutil" rel="noreferrer">python-dateutil</a> can do it just 5 lines.</p>
<pre><code>from dateutil.relativedelta import *
from datetime import date
today = date.today()
dob = date(1982, 7, 5)
age = relativedelta(today, dob)

&gt;&gt;relativedelta(years=+33, months=+11, days=+16)`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import date

def age(birth_date):
    today = date.today()
    y = today.year - birth_date.year
    if today.month &lt; birth_date.month or today.month == birth_date.month and today.day &lt; birth_date.day:
        y -= 1
    return y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, you cannot just use timedelata as the largest unit it uses is day and leap years will render you calculations invalid.  Therefore, let's find number of years then adjust by one if the last year isn't full:</p>
<pre><code>from datetime import date
birth_date = date(1980, 5, 26)
years = date.today().year - birth_date.year
if (datetime.now() - birth_date.replace(year=datetime.now().year)).days &gt;= 0:
    age = years
else:
    age = years - 1
</code></pre>
<p><strong>Upd:</strong></p>
<p>This solution really causes an exception when Feb, 29 comes into play.  Here's correct check:</p>
<pre><code>from datetime import date
birth_date = date(1980, 5, 26)
today = date.today()
years = today.year - birth_date.year
if all((x &gt;= y) for x,y in zip(today.timetuple(), birth_date.timetuple()):
   age = years
else:
   age = years - 1
</code></pre>
<p><strong>Upd2:</strong></p>
<p>Calling multiple calls to <code>now()</code> a performance hit is ridiculous, it does not matter in all but extremely special cases.  The real reason to use a variable is the risk of data incosistency.</p>
</div>
<div class="post-text" itemprop="text">
<p>The classic gotcha in this scenario is what to do with people born on the 29th day of February. Example: you need to be aged 18 to vote, drive a car, buy alcohol, etc ... if you are born on 2004-02-29, what is the first day that you are permitted to do such things: 2022-02-28, or 2022-03-01? AFAICT, mostly the first, but a few killjoys might say the latter.</p>
<p>Here's code that caters for the 0.068% (approx) of the population born on that day:</p>
<pre><code>def age_in_years(from_date, to_date, leap_day_anniversary_Feb28=True):
    age = to_date.year - from_date.year
    try:
        anniversary = from_date.replace(year=to_date.year)
    except ValueError:
        assert from_date.day == 29 and from_date.month == 2
        if leap_day_anniversary_Feb28:
            anniversary = datetime.date(to_date.year, 2, 28)
        else:
            anniversary = datetime.date(to_date.year, 3, 1)
    if to_date &lt; anniversary:
        age -= 1
    return age

if __name__ == "__main__":
    import datetime

    tests = """

    2004  2 28 2010  2 27  5 1
    2004  2 28 2010  2 28  6 1
    2004  2 28 2010  3  1  6 1

    2004  2 29 2010  2 27  5 1
    2004  2 29 2010  2 28  6 1
    2004  2 29 2010  3  1  6 1

    2004  2 29 2012  2 27  7 1
    2004  2 29 2012  2 28  7 1
    2004  2 29 2012  2 29  8 1
    2004  2 29 2012  3  1  8 1

    2004  2 28 2010  2 27  5 0
    2004  2 28 2010  2 28  6 0
    2004  2 28 2010  3  1  6 0

    2004  2 29 2010  2 27  5 0
    2004  2 29 2010  2 28  5 0
    2004  2 29 2010  3  1  6 0

    2004  2 29 2012  2 27  7 0
    2004  2 29 2012  2 28  7 0
    2004  2 29 2012  2 29  8 0
    2004  2 29 2012  3  1  8 0

    """

    for line in tests.splitlines():
        nums = [int(x) for x in line.split()]
        if not nums:
            print
            continue
        datea = datetime.date(*nums[0:3])
        dateb = datetime.date(*nums[3:6])
        expected, anniv = nums[6:8]
        age = age_in_years(datea, dateb, anniv)
        print datea, dateb, anniv, age, expected, age == expected
</code></pre>
<p>Here's the output:</p>
<pre><code>2004-02-28 2010-02-27 1 5 5 True
2004-02-28 2010-02-28 1 6 6 True
2004-02-28 2010-03-01 1 6 6 True

2004-02-29 2010-02-27 1 5 5 True
2004-02-29 2010-02-28 1 6 6 True
2004-02-29 2010-03-01 1 6 6 True

2004-02-29 2012-02-27 1 7 7 True
2004-02-29 2012-02-28 1 7 7 True
2004-02-29 2012-02-29 1 8 8 True
2004-02-29 2012-03-01 1 8 8 True

2004-02-28 2010-02-27 0 5 5 True
2004-02-28 2010-02-28 0 6 6 True
2004-02-28 2010-03-01 0 6 6 True

2004-02-29 2010-02-27 0 5 5 True
2004-02-29 2010-02-28 0 5 5 True
2004-02-29 2010-03-01 0 6 6 True

2004-02-29 2012-02-27 0 7 7 True
2004-02-29 2012-02-28 0 7 7 True
2004-02-29 2012-02-29 0 8 8 True
2004-02-29 2012-03-01 0 8 8 True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution to find age of a person as either years or months or days.</p>
<p>Lets say a person's date of birth is <strong>2012-01-17T00:00:00</strong>
Therefore, his age on <strong>2013-01-16T00:00:00</strong> will be <strong>11 months</strong></p>
<p>or if he is born on <strong>2012-12-17T00:00:00</strong>, 
his age on <strong>2013-01-12T00:00:00</strong> will be <strong>26 days</strong></p>
<p>or if he is born on <strong>2000-02-29T00:00:00</strong>,
his age on <strong>2012-02-29T00:00:00</strong> will be <strong>12 years</strong></p>
<p>You will need to <strong>import datetime</strong>.</p>
<p>Here is the code:</p>
<pre><code>def get_person_age(date_birth, date_today):

"""
At top level there are three possibilities : Age can be in days or months or years.
For age to be in years there are two cases: Year difference is one or Year difference is more than 1
For age to be in months there are two cases: Year difference is 0 or 1
For age to be in days there are 4 possibilities: Year difference is 1(20-dec-2012 - 2-jan-2013),
                                                 Year difference is 0, Months difference is 0 or 1
"""
years_diff = date_today.year - date_birth.year
months_diff = date_today.month - date_birth.month
days_diff = date_today.day - date_birth.day
age_in_days = (date_today - date_birth).days

age = years_diff
age_string = str(age) + " years"

# age can be in months or days.
if years_diff == 0:
    if months_diff == 0:
        age = age_in_days
        age_string = str(age) + " days"
    elif months_diff == 1:
        if days_diff &lt; 0:
            age = age_in_days
            age_string = str(age) + " days"
        else:
            age = months_diff
            age_string = str(age) + " months"
    else:
        if days_diff &lt; 0:
            age = months_diff - 1
        else:
            age = months_diff
        age_string = str(age) + " months"
# age can be in years, months or days.
elif years_diff == 1:
    if months_diff &lt; 0:
        age = months_diff + 12
        age_string = str(age) + " months" 
        if age == 1:
            if days_diff &lt; 0:
                age = age_in_days
                age_string = str(age) + " days" 
        elif days_diff &lt; 0:
            age = age-1
            age_string = str(age) + " months"
    elif months_diff == 0:
        if days_diff &lt; 0:
            age = 11
            age_string = str(age) + " months"
        else:
            age = 1
            age_string = str(age) + " years"
    else:
        age = 1
        age_string = str(age) + " years"
# The age is guaranteed to be in years.
else:
    if months_diff &lt; 0:
        age = years_diff - 1
    elif months_diff == 0:
        if days_diff &lt; 0:
            age = years_diff - 1
        else:
            age = years_diff
    else:
        age = years_diff
    age_string = str(age) + " years"

if age == 1:
    age_string = age_string.replace("years", "year").replace("months", "month").replace("days", "day")

return age_string
</code></pre>
<p>Some extra functions used in the above codes are:</p>
<pre><code>def get_todays_date():
    """
    This function returns todays date in proper date object format
    """
    return datetime.now()
</code></pre>
<p>And</p>
<pre><code>def get_date_format(str_date):
"""
This function converts string into date type object
"""
str_date = str_date.split("T")[0]
return datetime.strptime(str_date, "%Y-%m-%d")
</code></pre>
<p>Now, we have to feed <strong>get_date_format()</strong> with the strings like <strong>2000-02-29T00:00:00</strong></p>
<p>It will convert it into the date type object which is to be fed to <strong>get_person_age(date_birth, date_today)</strong>.</p>
<p>The function <strong>get_person_age(date_birth, date_today)</strong> will return age in string format.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking to print this in a page using django templates, then the following might be enough:</p>
<pre><code>{{ birth_date|timesince }}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on <a href="https://stackoverflow.com/a/9754466/65387">Danny's Solution</a>, but with all sorts of ways to report ages for younger folk (note, today is <code>datetime.date(2015,7,17)</code>):</p>
<pre><code>def calculate_age(born):
    '''
        Converts a date of birth (dob) datetime object to years, always rounding down.
        When the age is 80 years or more, just report that the age is 80 years or more.
        When the age is less than 12 years, rounds down to the nearest half year.
        When the age is less than 2 years, reports age in months, rounded down.
        When the age is less than 6 months, reports the age in weeks, rounded down.
        When the age is less than 2 weeks, reports the age in days.
    '''
    today = datetime.date.today()
    age_in_years = today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day))
    months = (today.month - born.month - (today.day &lt; born.day)) %12
    age = today - born
    age_in_days = age.days
    if age_in_years &gt;= 80:
        return 80, 'years or older'
    if age_in_years &gt;= 12:
        return age_in_years, 'years'
    elif age_in_years &gt;= 2:
        half = 'and a half ' if months &gt; 6 else ''
        return age_in_years, '%syears'%half
    elif months &gt;= 6:
        return months, 'months'
    elif age_in_days &gt;= 14:
        return age_in_days/7, 'weeks'
    else:
        return age_in_days, 'days'
</code></pre>
<p>Sample code:</p>
<pre><code>print '%d %s' %calculate_age(datetime.date(1933,6,12)) # &gt;=80 years
print '%d %s' %calculate_age(datetime.date(1963,6,12)) # &gt;=12 years
print '%d %s' %calculate_age(datetime.date(2010,6,19)) # &gt;=2 years
print '%d %s' %calculate_age(datetime.date(2010,11,19)) # &gt;=2 years with half
print '%d %s' %calculate_age(datetime.date(2014,11,19)) # &gt;=6 months
print '%d %s' %calculate_age(datetime.date(2015,6,4)) # &gt;=2 weeks
print '%d %s' %calculate_age(datetime.date(2015,7,11)) # days old

80 years or older
52 years
5 years
4 and a half years
7 months
6 weeks
7 days
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I did not see the correct implementation, I recoded mine this way...</p>
<pre><code>    def age_in_years(from_date, to_date=datetime.date.today()):
  if (DEBUG):
    logger.debug("def age_in_years(from_date='%s', to_date='%s')" % (from_date, to_date))

  if (from_date&gt;to_date): # swap when the lower bound is not the lower bound
    logger.debug('Swapping dates ...')
    tmp = from_date
    from_date = to_date
    to_date = tmp

  age_delta = to_date.year - from_date.year
  month_delta = to_date.month - from_date.month
  day_delta = to_date.day - from_date.day

  if (DEBUG):
    logger.debug("Delta's are : %i  / %i / %i " % (age_delta, month_delta, day_delta))

  if (month_delta&gt;0  or (month_delta==0 and day_delta&gt;=0)): 
    return age_delta 

  return (age_delta-1)
</code></pre>
<p>Assumption of being "18" on the 28th of Feb when born on the 29th is just wrong.
Swapping the bounds can be left out ... it is just a personal convenience for my code :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Extend to <a href="https://stackoverflow.com/a/9754466">Danny W. Adair Answer</a>, to get month also</p>
<pre><code>def calculate_age(b):
    t = date.today()
    c = ((t.month, t.day) &lt; (b.month, b.day))
    c2 = (t.day&lt; b.day)
    return t.year - b.year - c,c*12+t.month-b.month-c2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>import datetime</p>
<pre><code>def age(date_of_birth):
    if date_of_birth &gt; datetime.date.today().replace(year = date_of_birth.year):
        return datetime.date.today().year - date_of_birth.year - 1
    else:
        return datetime.date.today().year - date_of_birth.year
</code></pre>
<p>In your case:</p>
<pre><code>import datetime

# your model
def age(self):
    if self.birthdate &gt; datetime.date.today().replace(year = self.birthdate.year):
        return datetime.date.today().year - self.birthdate.year - 1
    else:
        return datetime.date.today().year - self.birthdate.year
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Slightly modified <a href="https://stackoverflow.com/questions/2217488/age-from-birthdate-in-python/9754466#9754466">Danny's solution</a> for easier reading and understanding</p>
<pre><code>    from datetime import date

    def calculate_age(birth_date):
        today = date.today()
        age = today.year - birth_date.year
        full_year_passed = (today.month, today.day) &lt; (birth_date.month, birth_date.day)
        if not full_year_passed:
            age -= 1
        return age
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
</code></pre>
<p><strong>Todays date</strong></p>
<pre><code>td=datetime.datetime.now().date() 
</code></pre>
<p><strong>Your birthdate</strong></p>
<pre><code>bd=datetime.date(1989,3,15)
</code></pre>
<p><strong>Your age</strong></p>
<pre><code>age_years=int((td-bd).days /365.25)
</code></pre>
</div>
<span class="comment-copy">When standard <code>datetime</code> module is not enough, you can try: <a href="http://labix.org/python-dateutil" rel="nofollow noreferrer">labix.org/python-dateutil</a></span>
<span class="comment-copy">This has nearly certainly been resolved by: <code>dateutil.relativedelta.relativedelta</code></span>
<span class="comment-copy">a nitpick: <code>date.today()</code> returns the date in the local timezone that may be different from the place of birth. You might need to <a href="http://stackoverflow.com/a/32658742/4279">use timezones explicitly</a></span>
<span class="comment-copy">That probably depends on your definition of "age". For all practical purposes a birthday is usually given as a date, not timezone-aware datetime (i.e., "born" is missing the details). Most people are not born at midnight sharp (so usually observe prematurely :-)), and when in a different timezone, I would assume that most people observe their birthday in the local time (that's what I do, I live 10-12h ahead of my birth place time). If "born" was a timezone-aware datetime, you could use pytz's arithmetic and normalize() - maybe of interest for an astrology software?</span>
<span class="comment-copy">I agree completely in the context of human ages but your formula may be used in a wider context. Though I personally never celebrate my birthday even an hour earlier due to a family tradition and being a programmer it is trivial to calculate the time wherever I am.</span>
<span class="comment-copy">what is the format of born</span>
<span class="comment-copy">@pyd: born is a date/datetime</span>
<span class="comment-copy">Just as a matter of principle, your <code>except</code> block should catch only the one specific exception that could be raised.</span>
<span class="comment-copy">@Daenyth: Good call... I think it's a <code>ValueError</code>. Updated.</span>
<span class="comment-copy">I even go so far as to test the message of the exception to make sure its what I am expecting.  Even with the code above, there is a possibility that a ValueError is thrown, but its not the ValueError you are expecting.</span>
<span class="comment-copy">+ for exception but, Is there any problem in my <a href="http://codepad.org/gFx7lrmH" rel="nofollow noreferrer"><code>def calculate_age(dob)</code></a> <b>?</b> I think it is quite simple.</span>
<span class="comment-copy">@GrijeshChauhan: Yes, yours doesn't work. <code>datetime.date(2014, 1, 1)</code> gives -1, it should give 0. Your <code>today &gt; dob</code> is checking if the DOB is in the past, not earlier this same year. <code>datetime.date.today()</code> includes year information, which is why I replace it with the current year in my solution.</span>
<span class="comment-copy">every fourth year is a leap year except evey hundredth year is not a leap year except every four hundredth year is a leap year. try days_in_year=365.2425</span>
<span class="comment-copy">@Dan: the difference between Julian (<code>365.25</code>) and Gregorian calendar year (<code>365.2425</code>) is less than a day if you live less than 130 years.</span>
<span class="comment-copy">This doesn't work for <i>some</i> dates: <code>(date(2017, 3, 1) - date(2004, 3, 1)) / timedelta(days=365.2425)</code> should return <code>13</code>, but it returns <code>12</code>. Unfloored, the result is <code>12.999582469181433</code>.</span>
<span class="comment-copy">This does not work correctly when the birthday is on Feb. 29 and today's date is Feb. 28 (it will act as if today is Feb. 29).</span>
<span class="comment-copy">what is the format for birthday</span>
<span class="comment-copy">date instance or some obj like that, docs.python.org/3/library/datetime.html#datetime.date, typo fixed.</span>
<span class="comment-copy">Thank you, I found out this by doing some tests - and ended up a similar code found from AndiDog's link.</span>
<span class="comment-copy">Strike 1: You're using datetime.datetime instead of datetime.date. Strike 2: Your code is ugly and inefficient. Calling datetime.now() <b>THREE</b> times?? Strike 3: Birthdate 29 Feb 2004 and today's date 28 Feb 2010 should return age 6, not die shrieking "ValueError: day is out of range for month". You're out!</span>
<span class="comment-copy">Sorry, your "Upd" code is even more baroque and broken than the first attempt -- nothing to do with 29 February; it fails in MANY simple cases like 2009-06-15 to 2010-07-02 ... the person is obviously a little over 1 year old but you deduct a year because the test on the days (2 &gt;= 15) fails. And obviously you haven't tested it -- it contains a syntax error.</span>
<span class="comment-copy">And I recently just learned about the <a href="https://en.wikipedia.org/wiki/Leap_second" rel="nofollow noreferrer">leap second</a>.</span>
<span class="comment-copy">Don't use Django's <code>|timesince</code> for calculating a timedelta over several years because it does not account for leap years and thus yields inaccurate results. See Django ticket #19210 for more info on this.</span>
<span class="comment-copy">Didn't know that. Thanks.</span>
