<div class="post-text" itemprop="text">
<p>I would like to avoid pickling of certain fields in an instance of a class.
Currently, before pickling I just set those fields to None, but I wonder whether there's more elegant solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is an example <a href="http://docs.python.org/library/pickle.html#example" rel="noreferrer">here</a> which solves your problem with <code>__getstate__</code> and <code>__setstate__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to handle instance attributes that are not picklable objects is to use the special methods available for modifying a class instance's state: <em>getstate</em>() and <em>setstate</em>(). Here is an example</p>
<pre><code>class Foo(object):

    def __init__(self, value, filename):
        self.value = value
        self.logfile = file(filename, 'w')

    def __getstate__(self):
        """Return state values to be pickled."""
        f = self.logfile
        return (self.value, f.name, f.tell())

    def __setstate__(self, state):
        """Restore state from the unpickled state values."""
        self.value, name, position = state
        f = file(name, 'w')
        f.seek(position)
        self.logfile = f
</code></pre>
<p>When an instance of Foo is pickled, Python will pickle only the values returned to it when it calls the instance's <em>getstate</em>() method. Likewise, during unpickling, Python will supply the unpickled values as an argument to the instance's <em>setstate</em>() method. Inside the <em>setstate</em>() method we are able to recreate the file object based on the name and position information we pickled, and assign the file object to the instance's logfile attribute. </p>
<p>Reference: <a href="http://www.ibm.com/developerworks/library/l-pypers.html">http://www.ibm.com/developerworks/library/l-pypers.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Pickling uses the object's <code>__getstate__</code> and <code>__setstate__</code> methods; you can override them and ignore the fields you want.</p>
<pre class="lang-py prettyprint-override"><code># foo.py
class Foo:
    def __init__(self):
        self.bar = 1
        self.baz = 2

    def __getstate__(self):
        state = self.__dict__.copy()
        # Don't pickle baz
        del state["baz"]
        return state

    def __setstate__(self, state):
        self.__dict__.update(state)
        # Add baz back since it doesn't exist in the pickle
        self.baz = 0
</code></pre>
<pre class="lang-py prettyprint-override"><code># main.py
import pickle

from foo import Foo


foo = Foo()
print(f"Foo bar: {foo.bar} baz: {foo.baz}")

new_foo = pickle.loads(pickle.dumps(foo))
print(f"New bar: {new_foo.bar} baz: {new_foo.baz}")
</code></pre>
<p>Output:</p>
<pre><code>Foo bar: 1 baz: 2
New bar: 1 baz: 0
</code></pre>
<p>You can find another example here: <a href="https://docs.python.org/3/library/pickle.html#handling-stateful-objects" rel="nofollow noreferrer">https://docs.python.org/3/library/pickle.html#handling-stateful-objects</a></p>
</div>
<span class="comment-copy">Fastest Fingers First :P</span>
<span class="comment-copy">Fixed link: <a href="http://docs.python.org/2/library/pickle.html#example" rel="nofollow noreferrer">docs.python.org/2/library/pickle.html#example</a></span>
