<div class="post-text" itemprop="text">
<p>If this was PHP, I would probably do something like this:</p>
<pre><code>function no_more_half_widths($string){
  $foo = array('１','２','３','４','５','６','７','８','９','１０')
  $bar = array('1','2','3','4','5','6','7','8','9','10')
  return str_replace($foo, $bar, $string)
}
</code></pre>
<p>I have tried the .translate function in python and it indicates that the arrays are not of the same size.  I assume this is due to the fact that the individual characters are encoded in utf-8.  Any suggestions? </p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <code>unicodedata</code> module can do it:</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; foo = u'１２３４５６７８９０'
&gt;&gt;&gt; unicodedata.normalize('NFKC', foo)
u'1234567890'
</code></pre>
<p>The “NFKC” stands for “<a href="http://unicode.org/reports/tr15/" rel="noreferrer">Normalization Form</a> KC [Compatibility Decomposition, followed by Canonical Composition]”, and replaces full-width characters by half-width ones, which are <a href="https://en.wikipedia.org/wiki/Unicode_equivalence" rel="noreferrer">Unicode equivalent</a>.</p>
<p>Note that it also normalizes all sorts of other things at the same time, like separate accent marks and Roman numeral symbols.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3, you can use the following snippet. It made a map between all ascii characters and its corresponding fullwidth character. Best of all, this doesn't need you to hard type ascii sequence, which is quite error prone.</p>
<pre><code> #! /usr/bin/env python3
 # -*- coding: utf-8 -*-     

 FULL2HALF = dict((i + 0xFEE0, i) for i in range(0x21, 0x7F))
 FULL2HALF[0x3000] = 0x20

 def halfen(s):
     '''
     Convert full-width characters to ASCII counterpart
     '''
     return str(s).translate(FULL2HALF)
</code></pre>
<p>Also, with same logic, you can convert halfwidth characters to fullwidth character, the following code shows the trick:</p>
<pre><code> #! /usr/bin/env python3
 # -*- coding: utf-8 -*-

 HALF2FULL = dict((i, i + 0xFEE0) for i in range(0x21, 0x7F))
 HALF2FULL[0x20] = 0x3000

 def fullen(s):
     '''
     Convert all ASCII characters to the full-width counterpart.
     '''
     return str(s).translate(HALF2FULL)
</code></pre>
<p>Note: this two snippets only consider ascii characters, and does not convert any japanese/korean fullwidth character.</p>
<p>For completeness, from <a href="https://en.wikipedia.org/wiki/Halfwidth_and_fullwidth_forms#In_Unicode" rel="nofollow">wikepedia</a>:</p>
<blockquote>
<p>Range <code>U+FF01–FF5E</code> reproduces the characters of ASCII 21 to 7E as
  fullwidth forms, that is, a fixed width form used in CJK
  computing. This is useful for typesetting Latin characters in a CJK
  environment. <code>U+FF00</code> does not correspond to a fullwidth ASCII 20
  (space character), since that role is already fulfilled by <code>U+3000</code>
  "ideographic space."</p>
<p>Range <code>U+FF65–FFDC</code> encodes halfwidth forms of Katakana and Hangul
  characters.</p>
<p>Range <code>U+FFE0–FFEE</code> includes fullwidth and halfwidth symbols.</p>
</blockquote>
<p>And more, python2 solution can refer to <a href="https://gist.github.com/jcayzac/1485005" rel="nofollow">gist/jcayzac</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think there's a built-in function to do multiple replacements in one pass, so you'll have to do it yourself.</p>
<p>One way to do it:</p>
<pre><code>&gt;&gt;&gt; src = (u'１',u'２',u'３',u'４',u'５',u'６',u'７',u'８',u'９',u'１０')
&gt;&gt;&gt; dst = ('1','2','3','4','5','6','7','8','9','0')
&gt;&gt;&gt; string = u'a１２３'
&gt;&gt;&gt; for i, j in zip(src, dst):
...     string = string.replace(i, j)
... 
&gt;&gt;&gt; string
u'a123'
</code></pre>
<p>Or using a dictionary:</p>
<pre><code>&gt;&gt;&gt; trans = {u'１': '1', u'２': '2', u'３': '3', u'４': '4', u'５': '5', u'６': '6', u'７': '7', u'８': '8', u'９': '9', u'０': '0'}
&gt;&gt;&gt; string = u'a１２３'
&gt;&gt;&gt; for i, j in trans.iteritems():
...     string = string.replace(i, j)
...     
&gt;&gt;&gt; string
u'a123'
</code></pre>
<p>Or finally, using regex (and this might actually be the fastest):</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; trans = {u'１': '1', u'２': '2', u'３': '3', u'４': '4', u'５': '5', u'６': '6', u'７': '7', u'８': '8', u'９': '9', u'０': '0'}
&gt;&gt;&gt; lookup = re.compile(u'|'.join(trans.keys()), re.UNICODE)
&gt;&gt;&gt; string = u'a１２３'
&gt;&gt;&gt; lookup.sub(lambda x: trans[x.group()], string)
u'a123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>unicode.translate</code> method:</p>
<pre><code>&gt;&gt;&gt; table = dict(zip(map(ord,u'０１２３４５６７８９'),map(ord,u'0123456789')))
&gt;&gt;&gt; print u'１２３'.translate(table)
123
</code></pre>
<p>It requires a mapping of code points as <em>numbers</em>, not characters. Also, using <code>u'unicode literals'</code> leaves the values unencoded.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regex approach</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(u"[\uff10-\uff19]",lambda x:chr(ord(x.group(0))-0xfee0),u"４５６")
u'456'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, cleanest is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow">str.maketrans</a>:</p>
<pre><code>FULLWIDTH_TO_HALFWIDTH = str.maketrans('１２３４５６７８９０',
                                       '1234567890')
def fullwidth_to_halfwidth(s):
    return s.translate(FULLWIDTH_TO_HALFWIDTH)
</code></pre>
<p>In Python 2, str.maketrans is instead <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="nofollow">string.maketrans</a> and doesn’t work with Unicode characters, so you need to make a dictionary, as Josh Lee notes above.</p>
</div>
<span class="comment-copy">This is very slick, but has side effects (as you note), and inflexible: it only goes one way (full-width to half-width). Still, if that’s acceptable, this is nice!</span>
<span class="comment-copy">Nice! I didn't know <code>unicode</code> had a <code>translate()</code> method different from pure <code>str</code>, though in retrospect it makes perfect sense.</span>
<span class="comment-copy">Nice answer!!!!</span>
