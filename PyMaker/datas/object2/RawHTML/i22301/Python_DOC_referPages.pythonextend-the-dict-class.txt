<div class="post-text" itemprop="text">
<p>I have to solve this exercise:</p>
<blockquote>
<p>Python's dictionaries do not preserve the order of inserted data nor store the data sorted by the key. Write an extension for the dict class whose instances will keep the data sorted by their key value. Note that the order must be preserved also when new elements are added.</p>
</blockquote>
<p>How do I extend <code>dict</code>? Do I need to have access to the source code for the <code>dict</code> type?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either subclass <code>dict</code> or <code>UserDict</code>, since van already talked about UserDict, lets look at <code>dict</code>.</p>
<p>Type <code>help(dict)</code> into an interpreter and you see a big list of methods. You will need to override all the methods that modify the dict as well as the methods that iterate over the dict.</p>
<p>Methods that modify the dict include <code>__delitem__</code>,<code>__setitem__</code>,<code>clear</code> etc.</p>
<p>Methods that iterate the dict include <code>__iter__</code>,<code>keys</code>,<code>values</code>,<code>items</code> etc.</p>
<p>This should get you started</p>
<pre><code>&gt;&gt;&gt; class odict(dict):
...     def __init__(self, *args, **kw):
...         super(odict,self).__init__(*args, **kw)
...         self.itemlist = super(odict,self).keys()
...     def __setitem__(self, key, value):
...          # TODO: what should happen to the order if
...          #       the key is already in the dict       
...         self.itemlist.append(key)
...         super(odict,self).__setitem__(key, value)
...     def __iter__(self):
...         return iter(self.itemlist)
...     def keys(self):
...         return self.itemlist
...     def values(self):
...         return [self[key] for key in self]  
...     def itervalues(self):
...         return (self[key] for key in self)
... 
&gt;&gt;&gt; od = odict(a=1,b=2)
&gt;&gt;&gt; print od
{'a': 1, 'b': 2}
&gt;&gt;&gt; od['d']=4
&gt;&gt;&gt; od['c']=3
&gt;&gt;&gt; print od   # look at the `__str__` and `__repr__` methods 
{'a': 1, 'c': 3, 'b': 2, 'd': 4}
&gt;&gt;&gt; print od.keys()
['a', 'b', 'd', 'c']
&gt;&gt;&gt; print od.values()
[1, 2, 4, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The implementation of dict will not help you with the task. What you want is a class that has the same interface as <code>dict</code>, but a different implementation. <a href="http://docs.python.org/reference/datamodel.html#emulating-container-types" rel="noreferrer">That will require to implement methods like <code>__getitem__</code>, <code>__setitem__</code>, etc.</a> If you Google for "ordereddict", you will find a lot of examples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Good news: the problem is not difficult at all.</p>
<p>In order to poke around and see the entrails of a <code>class</code> you can use </p>
<pre><code>&gt;&gt;&gt; dir(dict)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values']
</code></pre>
<p>and <code>help(dict)</code>, which has a very complete interactive documentation, but of course you also have access to the even more complete <a href="http://docs.python.org/library/stdtypes.html#typesmapping" rel="noreferrer">online documentation</a>.</p>
<p>Once you have a grasp of what <code>dict</code> does behind the scenes, you should learn about <a href="http://docs.python.org/tutorial/classes.html#inheritance" rel="noreferrer">inheritance in Python</a>.</p>
<p><strong>If you get stuck</strong> <sub>visit <a href="http://www.voidspace.org.uk/python/odict.html" rel="noreferrer">this site</a> to get some ideas, but</sub> don't copy/paste, your teacher will not see it kindly.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use python 2.7+, then see <a href="http://docs.python.org/dev/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a>.<br/>
Otherwise, backport (copy the source) or see <a href="http://code.activestate.com/recipes/576693/" rel="nofollow noreferrer">Recipe 576693: Ordered Dictionary for Py2.4 (Python) </a>.  </p>
<p>But if you really need to extend the <code>dict</code>, then start with <a href="https://docs.python.org/3/library/collections.html?highlight=userdict#collections.UserDict" rel="nofollow noreferrer">UserDict</a>, source for which you can find in <code>/lib/UserDict.py</code> of your python distribution.</p>
</div>
<span class="comment-copy">hmmm... homework?</span>
<span class="comment-copy">any chance of a working example with python 3? I started changing <code>self.itemlist.append(key)</code> with <code>set(self.itemlist).add(key)</code> to make it work, but the order is not preserved anymore</span>
<span class="comment-copy">@z3d0r, In Python3, <code>.keys()</code> no longer returns a list, so you'd need to use <code>self.itemlist = list(super(odict,self).keys())</code> in the <code>__init__</code> method.</span>
<span class="comment-copy">thanks, I also noticed that the <code>values()</code> and <code>itervalues()</code> methods don't exist anymore, and that <code>keys()</code> is a set and not a list, so would <code>def keys(self): return set(self.itemlist)</code> be correct? Still working on it because the order is not preserved yet</span>
<span class="comment-copy">@z3d0, you'll have to return the list or a generator. If you return a set, the order will be lost. If you're not just doing this as an exercise there's <code>collections.OrderedDict</code> you can use.</span>
<span class="comment-copy">Read the collections.ABC information on extending the <code>Mapping</code> to implement an ordered dictionary.  <a href="http://docs.python.org/library/collections.html#abcs-abstract-base-classes" rel="nofollow noreferrer">docs.python.org/library/â€¦</a>.</span>
<span class="comment-copy">@user280560: If you do this, make sure that you tell your instructor where you got the code from, since you didn't write it, but downlaoded it.</span>
<span class="comment-copy">@S.Lott: I imagine that he is not allowed to copy-paste, and that they are using 2.5/2.6.</span>
<span class="comment-copy">I don't think the assignment was to implement <code>OrderedDict</code> either, since that preserves <i>insertion</i> order rather than maintaining sorted key order.</span>
