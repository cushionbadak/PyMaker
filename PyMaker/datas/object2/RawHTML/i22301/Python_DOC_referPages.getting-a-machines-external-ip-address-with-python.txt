<div class="post-text" itemprop="text">
<p>Looking for a better way to get a machines current external IP #... Below works, but would rather not rely on an outside site to gather the information ... I am restricted to using standard Python 2.5.1 libraries bundled with Mac OS X 10.5.x</p>
<pre><code>import os
import urllib2

def check_in():

    fqn = os.uname()[1]
    ext_ip = urllib2.urlopen('http://whatismyip.org').read()
    print ("Asset: %s " % fqn, "Checking in from IP#: %s " % ext_ip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are behind a router which obtains the external IP, I'm afraid you have no other option but to use external service like you do. If the router itself has some query interface, you can use it, but the solution will be very environment-specific and unreliable.</p>
</div>
<div class="post-text" itemprop="text">
<p>I liked the <a href="http://ipify.org">http://ipify.org</a>. They even provide Python code for using their API.</p>
<pre><code># This example requires the requests library be installed.  You can learn more
# about the Requests library here: http://docs.python-requests.org/en/latest/

from requests import get

ip = get('https://api.ipify.org').text
print 'My public IP address is:', ip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Python3, using nothing else but the standard library</h1>
<p>As mentioned before, one cannot get around using an <a href="http://ident.me" rel="noreferrer">external service</a> of some sorts in order to discover the external IP address of your router.</p>
<p>Here is how it is done with <code>python3</code>, using nothing else but <a href="https://docs.python.org/3/library/" rel="noreferrer">the standard library:</a></p>
<pre><code>import urllib.request

external_ip = urllib.request.urlopen('https://ident.me').read().decode('utf8')

print(external_ip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <a href="https://en.wikipedia.org/wiki/Universal_Plug_and_Play" rel="noreferrer">UPnP protocol</a> to query your router for this information. Most importantly, this does not rely on an external service, which all the other answers to this question seem to suggest.</p>
<p>There's a Python library called miniupnp which can do this, see e.g. <a href="https://github.com/miniupnp/miniupnp/blob/master/miniupnpc/testupnpigd.py#L52" rel="noreferrer">miniupnpc/testupnpigd.py</a>.</p>
<pre><code>pip install miniupnpc
</code></pre>
<p>Based on their example you should be able to do something like this:</p>
<pre><code>import miniupnpc

u = miniupnpc.UPnP()
u.discoverdelay = 200
u.discover()
u.selectigd()
print('external ip address: {}'.format(u.externalipaddress()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you think and external source is too unreliable, you could pool a few different services. For most ip lookup pages they require you to scrape html, but a few of them that have created lean pages for scripts like yours - also so they can reduce the hits on their sites:</p>
<ul>
<li><a href="http://automation.whatismyip.com/n09230945.asp" rel="nofollow noreferrer">automation.whatismyip.com/n09230945.asp</a> (<strong>Update:</strong> whatismyip has taken this service down)</li>
<li><a href="http://whatismyip.org/" rel="nofollow noreferrer">whatismyip.org</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion the simplest solution is </p>
<pre><code>    f = requests.request('GET', 'http://myip.dnsomatic.com')
    ip = f.text
</code></pre>
<p>Thats all.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried most of the other answers on this question here and came to find that most of the services used were defunct except one.</p>
<p>Here is a script that should do the trick and download only a minimal amount of information:</p>
<pre><code>#!/usr/bin/env python

import urllib
import re

def get_external_ip():
    site = urllib.urlopen("http://checkip.dyndns.org/").read()
    grab = re.findall('([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', site)
    address = grab[0]
    return address

if __name__ == '__main__':
  print( get_external_ip() )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import requests
import re


def getMyExtIp():
    try:
        res = requests.get("http://whatismyip.org")
        myIp = re.compile('(\d{1,3}\.){3}\d{1,3}').search(res.text).group()
        if myIp != "":
            return myIp
    except:
        pass
    return "n/a"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the machine is being a firewall then your solution is a very sensible one: the alternative being able to query the firewall which ends-up being very dependent on the type of firewall (if at all possible).</p>
</div>
<div class="post-text" itemprop="text">
<p>The most simple (non python) working solution I can think of is</p>
<pre><code>wget -q -O- icanhazip.com
</code></pre>
<p>I'd like to add a very short Python3 solution which makes use of the JSON API of <a href="http://hostip.info" rel="nofollow">http://hostip.info</a>.</p>
<pre><code>from urllib.request import urlopen
import json
url = 'http://api.hostip.info/get_json.php'
info = json.loads(urlopen(url).read().decode('utf-8'))
print(info['ip'])
</code></pre>
<p>You can of course add some error checking, a timeout condition and some convenience:</p>
<pre><code>#!/usr/bin/env python3
from urllib.request import urlopen
from urllib.error import URLError
import json

try:
    url = 'http://api.hostip.info/get_json.php'
    info = json.loads(urlopen(url, timeout = 15).read().decode('utf-8'))
    print(info['ip'])
except URLError as e:
    print(e.reason, end=' ') # e.g. 'timed out'
    print('(are you connected to the internet?)')
except KeyboardInterrupt:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: import stun

stun.get_ip_info()
('Restric NAT', 'xx.xx.xx.xx', 55320)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Working with <strong>Python 2.7</strong>.6 and 2.7.13  </p>
<pre><code>import urllib2  
req = urllib2.Request('http://icanhazip.com', data=None)  
response = urllib2.urlopen(req, timeout=5)  
print(response.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just as an alternative. Here's a <a href="http://ipcheck.sourceforge.net/" rel="nofollow noreferrer">script</a> you can try out.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Sunny has suggested, its not possible in general to get external ip-address being inside a network without any help from external services. 
Have a look at the following tutorial which covers exactly the same thing. I guess it works for Python 2.5.X. 
<a href="http://codetempo.com/programming/python/monitoring-ip-addresses-of-your-computer-start-up-script-on-linux-ubuntu" rel="nofollow">http://codetempo.com/programming/python/monitoring-ip-addresses-of-your-computer-start-up-script-on-linux-ubuntu</a></p>
<p>It says that tutorial is for Linux but works for other platforms with python too.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>ipWebCode = urllib.request.urlopen("http://ip.nefsc.noaa.gov").read().decode("utf8")
ipWebCode=ipWebCode.split("color=red&gt; ")
ipWebCode = ipWebCode[1]
ipWebCode = ipWebCode.split("&lt;/font&gt;")
externalIp = ipWebCode[0]
</code></pre>
<p>this is a short snippet I had written for another program. The trick was finding a simple enough website so that dissecting the html wasn't a pain.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another alternative script.</p>
<pre><code>def track_ip():
   """
   Returns Dict with the following keys:
   - ip
   - latlong
   - country
   - city
   - user-agent
   """

   conn = httplib.HTTPConnection("www.trackip.net")
   conn.request("GET", "/ip?json")
   resp = conn.getresponse()
   print resp.status, resp.reason

   if resp.status == 200:
       ip = json.loads(resp.read())
   else:
       print 'Connection Error: %s' % resp.reason

   conn.close()
   return ip
</code></pre>
<p>EDIT: Don't forget to import httplib and json</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're just writing for yourself and not for a generalized application, you might be able to find the address on the setup page for your router and then scrape it from that page's html. This worked fine for me with my SMC router. One read and one simple RE search and I've found it.</p>
<p>My particular interest in doing this was to let me know my home IP address when I was away from home, so I could get back in via VNC. A few more lines of Python stores the address in Dropbox for outside access, and even emails me if it sees a change. I've scheduled it to happen on boot and once an hour thereafter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use this script :</p>
<pre><code>import urllib, json

data = json.loads(urllib.urlopen("http://ip.jsontest.com/").read())
print data["ip"]
</code></pre>
<p>Without json :</p>
<pre><code>import urllib, re

data = re.search('"([0-9.]*)"', urllib.urlopen("http://ip.jsontest.com/").read()).group(1)
print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few other ways that do not rely on Python checking an external web site, however the OS can.  Your primary issue here, is that even if you were not using Python, if you were using the command line, there are no "built-in" commands that can just simply tell you the external (WAN) IP.  Commands such as "ip addr show" and "ifconfig -a" show you the server's IP address's within the network.  Only the router actually holds the external IP.  However, there are ways to find the external IP address (WAN IP) from the command line.  </p>
<p>These examples are:</p>
<pre><code>http://ipecho.net/plain ; echo
curl ipinfo.io/ip
dig +short myip.opendns.com @resolver1.opendns.com
dig TXT +short o-o.myaddr.l.google.com @ns1.google.com
</code></pre>
<p>Therefore, the python code would be:</p>
<pre><code>import os
ip = os.popen('wget -qO- http://ipecho.net/plain ; echo').readlines(-1)[0].strip()
print ip
</code></pre>
<p>OR</p>
<pre><code>import os
iN, out, err = os.popen3('curl ipinfo.io/ip')
iN.close() ; err.close()
ip = out.read().strip()
print ip
</code></pre>
<p>OR</p>
<pre><code>import os
ip = os.popen('dig +short myip.opendns.com @resolver1.opendns.com').readlines(-1)[0].strip()
print ip
</code></pre>
<p>Or, plug any other of the examples above, into a command like os.popen, os.popen2, os.popen3, or os.system.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use external services (IP websites, etc.) You can use the <a href="https://en.wikipedia.org/wiki/Universal_Plug_and_Play" rel="nofollow noreferrer">UPnP Protocol</a>.</p>
<p>Do to that we use a simple UPnP client library (<a href="https://github.com/flyte/upnpclient" rel="nofollow noreferrer">https://github.com/flyte/upnpclient</a>)</p>
<p><strong>Install</strong>:</p>
<blockquote>
<p>pip install upnpclient</p>
</blockquote>
<p><strong>Simple Code</strong>:</p>
<pre><code>import upnpclient

devices = upnpclient.discover()

if(len(devices) &gt; 0):
    externalIP = devices[0].WANIPConn1.GetExternalIPAddress()
    print(externalIP)
else:
    print('No Connected network interface detected')
</code></pre>
<p><strong>Full Code (to get more information as mentioned in the github readme)</strong></p>
<pre><code>In [1]: import upnpclient

In [2]: devices = upnpclient.discover()

In [3]: devices
Out[3]: 
[&lt;Device 'OpenWRT router'&gt;,
 &lt;Device 'Harmony Hub'&gt;,
 &lt;Device 'walternate: root'&gt;]

In [4]: d = devices[0]

In [5]: d.WANIPConn1.GetStatusInfo()
Out[5]: 
{'NewConnectionStatus': 'Connected',
 'NewLastConnectionError': 'ERROR_NONE',
 'NewUptime': 14851479}

In [6]: d.WANIPConn1.GetNATRSIPStatus()
Out[6]: {'NewNATEnabled': True, 'NewRSIPAvailable': False}

In [7]: d.WANIPConn1.GetExternalIPAddress()
Out[7]: {'NewExternalIPAddress': '123.123.123.123'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Use <strong>requests</strong> module:</h1>
<pre><code>import requests

myip = requests.get('https://www.wikipedia.org').headers['X-Client-IP']

print("\n[+] Public IP: "+myip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As simple as running this in Python3:</p>
<pre class="lang-py prettyprint-override"><code>import os

externalIP  = os.popen('curl -s ifconfig.me').readline()
print(externalIP)
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/613471/4279">Discovering public IP programatically</a></span>
<span class="comment-copy">This works even when you are connected to a VPN. Thanks</span>
<span class="comment-copy">The automation link was useful while it lasted, thanks</span>
<span class="comment-copy">This one might be ideal: <a href="http://icanhazip.com/" rel="nofollow noreferrer">icanhazip.com</a></span>
<span class="comment-copy">It is probably worth mentioning you need to <code>import requests</code>. See <a href="https://pypi.python.org/pypi/requests" rel="nofollow noreferrer">pypi.python.org/pypi/requests</a></span>
<span class="comment-copy">Does not technically answer the question since "<a href="https://pypi.python.org/pypi/requests" rel="nofollow noreferrer">Requests</a> officially supports Python 2.6–2.7 &amp; 3.3–3.7, and runs great on PyPy." However, it is still useful to others.</span>
<span class="comment-copy">Regex is broken.  Should be \d{1,3}.</span>
<span class="comment-copy">Damn this is a bit faster than just using BeautifulSoup, thanks</span>
<span class="comment-copy">Where does the stun library come from?</span>
<span class="comment-copy">if i remember correctly i have used <a href="https://github.com/jtriley/pystun" rel="nofollow noreferrer">github.com/jtriley/pystun</a></span>
<span class="comment-copy">This answer used to work for me, but the packages break when updating using conda, so I've abandoned this answer for a simplier solution @Hors Sujet in <a href="http://stackoverflow.com/questions/24508730/finding-network-external-ip-addresses-using-python" title="finding network external ip addresses using python">stackoverflow.com/questions/24508730/…</a></span>
