<div class="post-text" itemprop="text">
<p>I have csv file with following data</p>
<pre><code>val1,val2,val3
1,2,3
22,23,33
</code></pre>
<p>So how can I convert data into dict</p>
<pre><code>dict1 = { 'val1': 1, 'val2': 2, 'val3': 3}
dict2 = { 'val1': 22, 'val2': 23, 'val3': 33}
fp = open('file.csv', 'r')
reader = csv.reader(fp)
for row in reader:
    ????
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv

reader = csv.DictReader(open('myfile.csv'))
for row in reader:
    # profit !
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/csv.html#csv.DictReader" rel="noreferrer">csv.DictReader</a>:</p>
<blockquote>
<p>Create an object which operates like a regular reader but maps the information read into a dict whose keys are given by the optional <em>fieldnames</em> parameter. The <em>fieldnames</em> parameter is a <a href="https://docs.python.org/3/library/collections.abc.html#module-collections.abc" rel="noreferrer"><code>sequence</code></a> whose elements are associated with the fields of the input data in order. These elements become the keys of the resulting dictionary. If the <em>fieldnames</em> parameter is omitted, the values in the first row of the <em>csvfile</em> will be used as the <em>fieldnames</em>. If the row read has more fields than the fieldnames sequence, the remaining data is added as a sequence keyed by the value of <em>restkey</em>. If the row read has fewer fields than the fieldnames sequence, the remaining keys take the value of the optional <em>restval</em> parameter. Any other optional or keyword arguments are passed to the underlying <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="noreferrer"><code>reader</code></a> instance...</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The cool thing with using 'csv' as mentioned in other answers here is that it can be used for reading a file (the obvious use case) but also parse a regular csv formatted string.</p>
<p>Example for reading a csv file:</p>
<pre><code>import csv
with open('my_file.csv') as f:
   for line in csv.DictReader(f, fieldnames=('val1', 'val2', 'val3')):
      print(line)
</code></pre>
<p>notice that you can explicitly pass the headers which you want be the keys, making it very easy to use csv files without headers. </p>
<p>Another use case is reading just a regular string with 'csv'</p>
<p>Example:</p>
<pre><code>import csv
my_csv_string = 'val1, val2, val3'
my_csv_dict = next(csv.DictReader(StringIO(s), fieldnames=('key1', 'key2', 'key3')))
</code></pre>
<p>Anyway, <code>csv.DictReader()</code> is what you need..</p>
</div>
<span class="comment-copy">I've never noticed that before...</span>
