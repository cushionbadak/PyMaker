<div class="post-text" itemprop="text">
<pre><code>datetime.datetime.utcnow()
</code></pre>
<p>Why does this <code>datetime</code> not have any timezone info given that it is explicitly a UTC <code>datetime</code>?</p>
<p>I would expect that this would contain <code>tzinfo</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That means it is timezone naive, so you can't use it with <code>datetime.astimezone</code></p>
<p>you can give it a timezone like this</p>
<pre><code>import pytz  # 3rd party: $ pip install pytz

u = datetime.utcnow()
u = u.replace(tzinfo=pytz.utc) #NOTE: it works only with a fixed utc offset
</code></pre>
<p>now you can change timezones</p>
<pre><code>print(u.astimezone(pytz.timezone("America/New_York")))
</code></pre>
<p>To get the current time in a given timezone, you could pass tzinfo to <code>datetime.now()</code> directly:</p>
<pre><code>#!/usr/bin/env python
from datetime import datetime
import pytz # $ pip install pytz

print(datetime.now(pytz.timezone("America/New_York")))
</code></pre>
<p>It works for any timezone including those that observe daylight saving time (DST) i.e., it works for timezones that may have different utc offsets at different times (non-fixed utc offset). Don't use <code>tz.localize(datetime.now())</code> -- it may fail during end-of-DST transition when the local time is ambiguous.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that for Python 3.2 onwards, the <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><code>datetime</code></a> module contains <a href="https://docs.python.org/3/library/datetime.html#datetime.timezone" rel="noreferrer"><code>datetime.timezone</code></a>. The documentation for <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow" rel="noreferrer"><code>datetime.utcnow()</code></a> says:</p>
<blockquote>
<p>An aware current UTC datetime can be obtained by calling <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.now" rel="noreferrer"><code>datetime.now</code></a><code>(</code><a href="https://docs.python.org/3/library/datetime.html#datetime.timezone.utc" rel="noreferrer"><code>timezone.utc</code></a><code>)</code>.</p>
</blockquote>
<p>So you can do:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now(datetime.timezone.utc)
datetime.datetime(2014, 7, 10, 2, 43, 55, 230107, tzinfo=datetime.timezone.utc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The standard Python libraries don't include any tzinfo classes (but <a href="https://www.python.org/dev/peps/pep-0431/" rel="noreferrer">see pep 431</a>). I can only guess at the reasons. Personally I think it was a mistake not to include a tzinfo class for UTC, because that one is uncontroversial enough to have a standard implementation.</p>
<p><strong>Edit:</strong> Although there's no implementation in the library, there is one given as an example in the <a href="http://docs.python.org/2/library/datetime.html#tzinfo-objects" rel="noreferrer"><code>tzinfo</code> documentation</a>.</p>
<pre><code>from datetime import timedelta, tzinfo

ZERO = timedelta(0)

# A UTC class.

class UTC(tzinfo):
    """UTC"""

    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO

utc = UTC()
</code></pre>
<p>To use it, to get the current time as an aware datetime object:</p>
<pre><code>from datetime import datetime 

now = datetime.now(utc)
</code></pre>
<p>There is <code>datetime.timezone.utc</code> in Python 3.2+:</p>
<pre><code>from datetime import datetime, timezone 

now = datetime.now(timezone.utc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>pytz</code> module is one option, and there is another <code>python-dateutil</code>, which although is also third party package, may already be available depending on your other dependencies and operating system.</p>
<p>I just wanted to include this methodology for reference- if you've already installed <code>python-dateutil</code> for other purposes, you can use its <code>tzinfo</code> instead of duplicating with <code>pytz</code></p>
<pre><code>import datetime
import dateutil.tz

# Get the UTC time with datetime.now:
utcdt = datetime.datetime.now(dateutil.tz.tzutc())

# Get the UTC time with datetime.utcnow:
utcdt = datetime.datetime.utcnow()
utcdt = utcdt.replace(tzinfo=dateutil.tz.tzutc())

# For fun- get the local time
localdt = datetime.datetime.now(dateutil.tz.tzlocal())
</code></pre>
<p>I tend to agree that calls to <code>utcnow</code> should include the UTC timezone information. I suspect that this is not included because the native datetime library defaults to naive datetimes for cross compatibility.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Julien Danjou wrote a good article explaining <a href="https://julien.danjou.info/blog/2015/python-and-timezones">why you should never deal with timezones</a>. An excerpt:</p>
<blockquote>
<p>Indeed, Python datetime API always returns unaware datetime objects,
  which is very unfortunate. Indeed, as soon as you get one of this
  object, there is no way to know what the timezone is, therefore these
  objects are pretty "useless" on their own.</p>
</blockquote>
<p>Alas, even though you may use <code>utcnow()</code>, you still won't see the timezone info, as you discovered.</p>
<p>Recommendations:</p>
<blockquote>
<ul>
<li><p>Always use aware <code>datetime</code> objects, i.e. with timezone information. That
  makes sure you can compare them directly (aware and unaware <code>datetime</code>
  objects are not comparable) and will return them correctly to users.
  Leverage <strong>pytz</strong> to have timezone objects. </p></li>
<li><p>Use <strong>ISO 8601</strong> as the input and
  output string format. Use <code>datetime.datetime.isoformat()</code> to return
  timestamps as string formatted using that format, which includes the
  timezone information.</p></li>
<li><p>If you need to parse strings containing ISO 8601 formatted timestamps,
  you can rely on <code>iso8601</code>, which returns timestamps with correct
  timezone information. This makes timestamps directly comparable.</p></li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>To add <code>timezone</code> information in Python 3.2+</p>
<pre><code>import datetime

&gt;&gt;&gt; d = datetime.datetime.now(tz=datetime.timezone.utc)
&gt;&gt;&gt; print(d.tzinfo)
'UTC+00:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import datetime 
from dateutil.relativedelta import relativedelta
d = datetime.now()
date = datetime.isoformat(d).split('.')[0]
d_month = datetime.today() + relativedelta(months=1)
next_month = datetime.isoformat(d_month).split('.')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>UTC dates don't need any timezone info since they're UTC, which by definition means that they have no offset.</p>
</div>
<span class="comment-copy">But there's no good reason for it to be timezone naive - it's specified to be UTC. Why do you need to search out a third party library to make it work properly?</span>
<span class="comment-copy">I agree; for me ‘naïve’ times are completely useless. There is discussion on the python list at the moment about adding pytz to the stdlib; the issue is not licensing but the fact that the timezone data is updated so often (which Python itself can't be). Also pytz doesn't implement the tzinfo interface in the expected way so you can get errors if you try to use some of the city timezones in <code>astimezone</code>. So datetime not only has no native timezones, but the only widely-available implementation of tzinfo is non-compliant to the supposed standard.</span>
<span class="comment-copy">@bobince Why don't pytz and the standard datetime libraries work for you? The Python core and pytz evolving as independent projects reduces logistical complexity for the core team.  Yes, reducing the complexity for the Python core team increases the complexity for all of the Python users who need to deal with timezones but, I trust they made this decision for a good reason.  The rule "The standard library has no tzinfo instances..." is great because it's simple, why make an exception here?</span>
<span class="comment-copy">How about just <code>u=datetime.now(pytz.utc)</code></span>
<span class="comment-copy">@bain: don't use <code>tz.localize(datetime.now())</code>; use <code>datetime.now(tz)</code> instead.</span>
<span class="comment-copy">Which is prefered? <code>datetime.now(timezone.utc)</code> or <code>datetime.utcnow(timezone.utc)</code>?</span>
<span class="comment-copy"><code>datetime.utcnow()</code> takes no arguments. So it would have to be <code>datetime.now(timezone.utc)</code>.</span>
<span class="comment-copy"><code>datetime.now()</code> will return the machine time but <code>datetime.utcnow()</code> will return the actual UTC time.</span>
<span class="comment-copy">@Babu: <code>datetime.utcnow()</code> doesn't set <code>tzinfo</code> to indicate that it is UTC. But <code>datetime.now(datetime.timezone.utc)</code> does return UTC time <i>with</i> <code>tzinfo</code> set.</span>
<span class="comment-copy">@CraigMcQueen So if we pass a <code>tz</code> object in the now constructor it will return time of that timezone? Ok! Thanks for pointing out.</span>
<span class="comment-copy">Go figure as to why this class was not provided in the first place (and, more importantly, used for <code>datetime</code> objects created by <code>utcnow()</code>)...</span>
<span class="comment-copy">The timezone object <code>timezone.utc</code> has finally been added to Python 3.2. For backward compatibility, <code>utcnow()</code> still returns a timezone-less time object, but you can get what you want by calling <code>now(timezone.utc)</code>.</span>
<span class="comment-copy">@rgove, that's the kind of righting of wrongs that was supposed to be fair game for Python 3. They shouldn't have worried about the backward compatibility. There's another example I read within the last few days - the <code>struct</code> module would do automatic conversions from Unicode to bytestring, and the final decision was to break compatibility with earlier Python 3 versions to prevent a bad decision from going forward.</span>
<span class="comment-copy">I'm dumbfounded that Python's <code>tzinfo</code> documentation includes examples of code to implement it, but they don't include that functionality in datetime itself!  <a href="https://docs.python.org/2/library/datetime.html#datetime.tzinfo.fromutc" rel="nofollow noreferrer">docs.python.org/2/library/datetime.html#datetime.tzinfo.fromutc</a></span>
<span class="comment-copy">@LS yes, <code>pytz</code> is a great resource. By the time I had edited my answer to put in the example code, somebody else had already suggested it and I didn't want to steal their thunder.</span>
<span class="comment-copy">NameError: name 'dt' is not defined</span>
<span class="comment-copy">I was using the datetime.datetime.utcfromtimestamp() call, and needing to add tzinfo, The second solution worked for me:  <code>utcdt = datetime.datetime.utcfromtimestamp(1234567890).replace(dateutil.tz.tzutc())</code></span>
<span class="comment-copy">note: unlike <code>datetime.now(pytz_tz)</code> that always works; <a href="https://github.com/dateutil/dateutil/issues/57" rel="nofollow noreferrer"><code>datetime.now(dateutil.tz.tzlocal())</code> may fail during DST transitions</a>. <a href="https://www.python.org/dev/peps/pep-0495/" rel="nofollow noreferrer">PEP 495 -- Local Time Disambiguation</a> might improve <code>dateutil</code> situation in the future.</span>
<span class="comment-copy">@IanLee: you could use <code>utc_dt = datetime.fromtimestamp(1234567890, dateutil.tz.tzutc())</code> (note: <a href="http://stackoverflow.com/a/17365806/4279"><code>dateutil</code> with a non-fixed utc offset (such as <code>dateutil.tz.tzlocal()</code>) may fail here</a>, use <a href="http://stackoverflow.com/a/12692910/4279">a <code>pytz</code>-based solution instead</a>).</span>
<span class="comment-copy">Since my program was already importing <code>dateutil</code> for <code>dateutil.parser</code>, I liked this solution best.  It was as simple as: <code>utcCurrentTime = datetime.datetime.now(tz=dateutil.tz.tzutc())</code>. Viola!!</span>
<span class="comment-copy">This is slightly misleading recommendation. The rule of thumb is, never deal with timezones. Always store and transmit tz unware utc objects (epoch objects). Timezone should be only calculated at the time of representation in UI</span>
<span class="comment-copy">That sounds like it already matches up with Julien's thoughts quite well. Which of his specific recommendations (as referenced above) are misleading?</span>
<span class="comment-copy"><code>AttributeError: 'module' object has no attribute 'timezone' </code> Python 2.7.13 (default, Jan 19 2017, 14:48:08)</span>
<span class="comment-copy">yes, this is Python3 code</span>
<span class="comment-copy">As far as I can tell from <a href="http://docs.python.org/library/datetime.html" rel="nofollow noreferrer">docs.python.org/library/datetime.html</a>, a datetime without a tzinfo is one where the time zone is unspecified. Here the time zone <i>has</i> been specified, so logically it should be present. There's a big difference between a date/time without an associated time zone and one which is definitely in UTC. (Ideally they should be different types IMO, but that's another matter...)</span>
<span class="comment-copy">@JonSkeet I think you're missing Ignacio's point that UTC isn't a timezone.  Amazing that this answer has -9 score as I type this...</span>
<span class="comment-copy">@CS: Well Ignacio never stated that... and while strictly speaking UTC isn't a time zone, it's usually <i>treated</i> as one to make lives considerably simpler (including in Python, e.g. with <code>pytz.utc</code>). Note that there's a big difference between a value whose offset from UTC is unknown and one where it is known to be 0. The latter is what <code>utcnow()</code> <i>should</i> return, IMO. That would fit in with "An aware object is used to represent a specific moment in time that is not open to interpretation" as per the documentation.</span>
