<div class="post-text" itemprop="text">
<p>I'm parsing some HTML with Beautiful Soup 3, but it contains HTML entities which Beautiful Soup 3 doesn't automatically decode for me:</p>
<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup

&gt;&gt;&gt; soup = BeautifulSoup("&lt;p&gt;&amp;pound;682m&lt;/p&gt;")
&gt;&gt;&gt; text = soup.find("p").string

&gt;&gt;&gt; print text
&amp;pound;682m
</code></pre>
<p>How can I decode the HTML entities in <code>text</code> to get <code>"£682m"</code> instead of <code>"&amp;pound;682m"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h3>Python 3.4+</h3>
<p><code>HTMLParser.unescape</code> is deprecated, and <a href="https://github.com/python/cpython/blob/3.5/Lib/html/parser.py#L466-L470" rel="noreferrer">was supposed to be removed in 3.5</a>, although it was left in by mistake. It will be removed from the language soon. Instead, use <code>html.unescape()</code>:</p>
<pre><code>import html
print(html.unescape('&amp;pound;682m'))
</code></pre>
<p>see <a href="https://docs.python.org/3/library/html.html#html.unescape" rel="noreferrer">https://docs.python.org/3/library/html.html#html.unescape</a></p>
<hr/>
<h3>Python 2.6-3.3</h3>
<p>You can use the HTML parser from the standard library:</p>
<pre><code>&gt;&gt;&gt; try:
...     # Python 2.6-2.7 
...     from HTMLParser import HTMLParser
... except ImportError:
...     # Python 3
...     from html.parser import HTMLParser
... 
&gt;&gt;&gt; h = HTMLParser()
&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))
£682m
</code></pre>
<p>See <a href="http://docs.python.org/2/library/htmlparser.html" rel="noreferrer">http://docs.python.org/2/library/htmlparser.html</a></p>
<p>You can also use the <a href="https://pythonhosted.org/six/" rel="noreferrer"><code>six</code></a> compatibility library to simplify the import:</p>
<pre><code>&gt;&gt;&gt; from six.moves.html_parser import HTMLParser
&gt;&gt;&gt; h = HTMLParser()
&gt;&gt;&gt; print(h.unescape('&amp;pound;682m'))
£682m
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Beautiful Soup handles entity conversion. In Beautiful Soup 3, you'll need to specify the <code>convertEntities</code> argument to the <code>BeautifulSoup</code> constructor (see the <a href="http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#Entity%20Conversion" rel="noreferrer">'Entity Conversion'</a> section of the archived docs). In Beautiful Soup 4, entities get decoded automatically.</p>
<h3>Beautiful Soup 3</h3>
<pre><code>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup("&lt;p&gt;&amp;pound;682m&lt;/p&gt;", 
...               convertEntities=BeautifulSoup.HTML_ENTITIES)
&lt;p&gt;£682m&lt;/p&gt;
</code></pre>
<h3>Beautiful Soup 4</h3>
<pre><code>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; BeautifulSoup("&lt;p&gt;&amp;pound;682m&lt;/p&gt;")
&lt;html&gt;&lt;body&gt;&lt;p&gt;£682m&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use replace_entities from w3lib.html library</p>
<pre><code>In [202]: from w3lib.html import replace_entities

In [203]: replace_entities("&amp;pound;682m")
Out[203]: u'\xa3682m'

In [204]: print replace_entities("&amp;pound;682m")
£682m
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Beautiful Soup 4 allows you to <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-formatters" rel="nofollow">set a formatter to your output</a></p>
<blockquote>
<p>If you pass in <code>formatter=None</code>, Beautiful Soup will not modify strings
  at all on output. This is the fastest option, but it may lead to
  Beautiful Soup generating invalid HTML/XML, as in these examples:</p>
</blockquote>
<pre><code>print(soup.prettify(formatter=None))
# &lt;html&gt;
#  &lt;body&gt;
#   &lt;p&gt;
#    Il a dit &lt;&lt;Sacré bleu!&gt;&gt;
#   &lt;/p&gt;
#  &lt;/body&gt;
# &lt;/html&gt;

link_soup = BeautifulSoup('&lt;a href="http://example.com/?foo=val1&amp;bar=val2"&gt;A link&lt;/a&gt;')
print(link_soup.a.encode(formatter=None))
# &lt;a href="http://example.com/?foo=val1&amp;bar=val2"&gt;A link&lt;/a&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This probably isnt relevant here.  But to eliminate these html entites from an entire document, you can do something like this:  (Assume document = page and please forgive the sloppy code, but if you have ideas as to how to make it better, Im all ears - Im new to this).</p>
<pre><code>import re
import HTMLParser

regexp = "&amp;.+?;" 
list_of_html = re.findall(regexp, page) #finds all html entites in page
for e in list_of_html:
    h = HTMLParser.HTMLParser()
    unescaped = h.unescape(e) #finds the unescaped value of the html entity
    page = page.replace(e, unescaped) #replaces html entity with unescaped value
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/questions/57708/convert-xml-html-entities-into-unicode-string-in-python">Convert XML/HTML Entities into Unicode String in Python</a></span>
<span class="comment-copy">this method doesn't seem to escape characters like "&amp;#8217;" on google app engine, though it works locally on python2.6. It does still decode entities (like &amp;quot;) at least</span>
<span class="comment-copy">How can an undocumented API be deprecated? Edited the answer.</span>
<span class="comment-copy">@MarkusUnterwaditzer there's no reason that an undocumented method can't be deprecated. This one throws deprecation warnings - see my edit to the answer.</span>
<span class="comment-copy">It would seem more logical that, rather than just the <code>unescape</code> method, the entire <code>HTMLParser</code> module were deprecated in favor of <code>html.parser</code>.</span>
<span class="comment-copy">Worth noting for Python 2: Special characters are replaced with their Latin-1 (ISO-8859-1) encoding counterparts. E.g., it may be necessary to <code>h.unescape(s).encode("utf-8")</code>. The docs:  """The definition provided here contains all the entities defined by XHTML 1.0 that can be handled using simple textual substitution in the Latin-1 character set (ISO-8859-1)"""</span>
<span class="comment-copy">+1. No idea how I missed this in the docs: thanks for the info.  I'm going to accept luc's answer tho because his uses the standard lib which I specified in the question (not important to me) and its probably of more general use to other people.</span>
<span class="comment-copy"><code>BeautifulSoup4</code> uses <code>HTMLParser</code>, mostly. See the <a href="http://bazaar.launchpad.net/~leonardr/beautifulsoup/bs4/view/head:/bs4/builder/_htmlparser.py" rel="nofollow noreferrer">source</a></span>
<span class="comment-copy">How do we get the conversion in Beautiful Soup 4 without all the extraneous HTML that wasn't part of the original string? (i.e. &lt;html&gt; and &lt;body&gt;)</span>
<span class="comment-copy">@Praxiteles : BeautifulSoup('&amp;pound;682m', "html.parser") <a href="https://stackoverflow.com/a/14822344/4376342">stackoverflow.com/a/14822344/4376342</a></span>
<span class="comment-copy">This doesn't answer the question. (Also, I have no idea what the docs are saying is invalid about the final bit of HTML here.)</span>
<span class="comment-copy">&lt;&lt;Sacré bleu!&gt;&gt; is the invalid part, as it has unescaped &lt; and &gt; and will break the html around it.  I know this is a late post from me, but in case anyone happens to be looking and wondered...</span>
<span class="comment-copy">No! You don't need to match HTML entities yourself and loop over them; <code>.unescape()</code> does that <i>for you</i>. I don't understand why you and Rob have posted these overcomplicated solutions that roll their own entity matching when the accepted answer already clearly shows that <code>.unescape()</code> can find entities in the string.</span>
