<div class="post-text" itemprop="text">
<p>I'm attempting to learn some Python and Tkinter.  The sample code below is intended to put two windows on the screen, a few buttons, and a Canvas with an image in it and some lines drawn on it.</p>
<p>The windows and buttons appear just fine, however I'm not seeing either the canvas image or canvas lines.  I'd appreciate some help to figure out what's need to make my canvas display.</p>
<pre><code>from Tkinter import *
import Image, ImageTk

class App:

    def __init__(self, master):

    def scrollWheelClicked(event):
        print "Wheel wheeled"

    frame = Frame(master)
    frame.pack()
    self.button = Button(frame, text = "QUIT", fg="red", command=frame.quit)
    self.button.pack(side=LEFT)

    self.hi_there = Button(frame, text="Hello", command=self.say_hi)
    self.hi_there.pack(side=LEFT)

    top = Toplevel()
    canvas = Canvas(master=top, width=600, height=600)

    image = Image.open("c:\lena.jpg")
    photo = ImageTk.PhotoImage(image)
    item = canvas.create_image(0, 0, image=photo)

    canvas.create_line(0, 0, 200, 100)
    canvas.create_line(0, 100, 200, 0, fill="red", dash=(4, 4))
    canvas.create_rectangle(50, 25, 150, 75, fill="blue")

    canvas.pack

    testBtn = Button(top, text = "test button")
    testBtn.pack()

def say_hi(self):
    print "hi there everyone!"

root = Tk()
app = App(root)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need parenthesis when calling pack on the canvas object.  Otherwise, you're just referring to the function object, not calling it. </p>
<p>For example:</p>
<pre><code>canvas.pack()
</code></pre>
<p>Another example:</p>
<pre><code>&gt;&gt;&gt;def hello():
...    print "hello world"
...    return
</code></pre>
<p><code>&gt;&gt;&gt;hello</code>  returns the function reference (function hello at 0x....)</p>
<p><code>&gt;&gt;&gt;hello()</code> actually calls the hello function</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved this problem:</p>
<pre><code>self.photo = ImageTk.PhotoImage(image)
self.item = canvas.create_image(0, 0, image=self.photo)
</code></pre>
<p>A reference to the ImageTk instance must be stored somewhere, or when your <code>App.__init__()</code> method returns, it will be garbage collected, and the canvas will not be able to display it.  (Tkinter does not keep a reference to the image.)</p>
<p>One way to keep a reference to it is by storing it in "self.photo", or a variable named 'photo', or, like most programmers do for constant variables (variables that don't change, like 'TEN = 10'), 'PHOTO = PhotoImage(...)' Of why... I have no idea. Importing the module 'gc' (Python 3's garbage collection module, built in) and running gc.disable() doesn't work. (If you want to try it: <a href="https://docs.python.org/3/library/gc.html" rel="nofollow">https://docs.python.org/3/library/gc.html</a>)</p>
</div>
<span class="comment-copy">For the image, after pack was changed to pack() modify the image lines to:          self.image = Image.open("c:\lena.jpg")         self.photo = ImageTk.PhotoImage(self.image)          canvas.create_image(0, 0, image=self.photo)  I presume this has to do with garbage collection</span>
<span class="comment-copy">ah hah!  That got the two lines and rectangle to dislay, however, the image is still not visible.</span>
<span class="comment-copy">Might you be drawing the rectangle over the image (stack-wise), since it has a fill?  According to the docs (<a href="http://effbot.org/tkinterbook/canvas.htm" rel="nofollow noreferrer">effbot.org/tkinterbook/canvas.htm</a>), "new items are drawn on top of old ones"</span>
<span class="comment-copy">Nice one! Just a question why?</span>
<span class="comment-copy">Thanks pysquared for the answer.</span>
<span class="comment-copy">Thank you, this saved a lot of my time</span>
