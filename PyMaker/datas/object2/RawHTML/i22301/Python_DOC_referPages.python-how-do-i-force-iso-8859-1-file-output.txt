<div class="post-text" itemprop="text">
<p>How do I force Latin-1 (which I guess means iso-8859-1?) file output in Python?</p>
<p>Here's my code at the moment. It works, but trying to import the resulting output file into a Latin-1 MySQL table produces <a href="https://stackoverflow.com/questions/2188522/importing-text-to-mysql-strange-format">weird encoding errors</a>.</p>
<pre><code>outputFile = file( "textbase.tab", "w" )
for k, v in textData.iteritems():
    complete_line = k + '~~~~~' + v + '~~~~~' + " ENDOFTHELINE"
    outputFile.write(complete_line)
    outputFile.write( "\n" )
outputFile.close()
</code></pre>
<p>The resulting output file seems to be saved in "Western (Mac OS Roman)", but if I then save it in Latin-1, I still get strange encoding problems. How can I make sure that the strings used, and the file itself, are all encoded in Latin-1 as soon as they are generated?</p>
<p>The original strings (in the <code>textData</code> dictionary) have been parsed in from an RTF file - I don't know if that makes a difference. </p>
<p>I'm a bit new to Python and to encoding generally, so apologies if this is a dumb question. I have tried looking at the docs but haven't got very far.</p>
<p>I'm using Python 2.6.1.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply use the <a href="http://docs.python.org/library/codecs.html" rel="noreferrer"><code>codecs</code></a> module for writing the file:</p>
<pre><code>import codecs
outputFile = codecs.open("textbase.tab", "w", "ISO-8859-1")
</code></pre>
<p>Of course, the strings you write have to be Unicode strings (type <code>unicode</code>), they won't be converted if they are plain <code>str</code> objects (which are basically just arrays of bytes). I guess you are reading the RTF file with the normal Python file object as well, so you might have to convert that to using <code>codecs.open</code> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's just:</p>
<pre><code>outputFile = file( "textbase.tab", "wb" )
for k, v in textData.iteritems():
    complete_line = k + '~~~~~' + v + '~~~~~' + " ENDOFTHELINE"
    outputFile.write((complete_line + "\n").encode("iso-8859-1"))
    outputFile.close()
</code></pre>
<p>As you alluded to, you need to make sure you are decoding the RTF file correctly too.  For this to work, k and v should be unicode objects.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main problem here is that you don't know what encoding your data is in. If we assume you are correct in that your file ends up being in Mac OS Roman, then you need to decode the data to unicode first, and then encode it as iso-8859-1.</p>
<pre><code>inputFile = open("input.rtf", "rb") # The b flag is just a marker in Python 2.
data = inputFile.read().decode('mac_roman')
textData = yourparsefunctionhere(data)

outputFile = open( "textbase.tab", "wb" ) # don't use file()
for k, v in textData.iteritems():
    complete_line = k + '~~~~~' + v + '~~~~~' + " ENDOFTHELINE"
    outputFile.write((complete_line + "\n").encode("iso-8859-1"))
    outputFile.close()
</code></pre>
<p>But I wouldn't be surprised, since it's RTF, if it's Windows encoded, so you might want to try that too. I don't know how RTF specifies the encoding.</p>
</div>
<div class="post-text" itemprop="text">
<p>For me, <code>io.open</code> works a bit faster on python 2.7 for writes, and an order of magnitude faster for reads:</p>
<pre><code>import io
with io.open("textbase.tab", "w", encoding="ISO-8859-1") as outputFile:
    ...
</code></pre>
<p>In python 3, you can just <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow">pass the <code>encoding</code> keyword arg to <code>open</code></a>.</p>
</div>
<span class="comment-copy">Thank you. I have just tried this code, but get: "UnicodeDecodeError: 'ascii' codec can't decode byte 0xa3 in position 753: ordinal not in range(128)". I'll now try making sure that k and v are unicode objects, as suggested above.</span>
<span class="comment-copy">If you use r instead of rb, Windows will mangle \r\n into \r (incl. on Python 2.6).</span>
<span class="comment-copy">From the docs: "Append 'b' to the mode to open the file in binary mode, on systems that differentiate between binary and text files; on systems that donâ€™t have this distinction, adding the 'b' has no effect." Having b or t (or none of them) makes no difference at all on Unix. You may be thinking of "U", which is universal newlines. <i>It</i> maches line-endings (never have U on write!)  What systems that differentiate between text and binary files I don't know. Unix sure doesn't.</span>
