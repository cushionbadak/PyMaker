<div class="post-text" itemprop="text">
<p>I want to delete all files with the extension <code>.bak</code> in a directory. How can I do that in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Via <a href="https://docs.python.org/2/library/os.html#os.listdir" rel="noreferrer"><code>os.listdir</code></a> and <a href="https://docs.python.org/2/library/os.html#os.remove" rel="noreferrer"><code>os.remove</code></a>:</p>
<pre><code>import os

filelist = [ f for f in os.listdir(mydir) if f.endswith(".bak") ]
for f in filelist:
    os.remove(os.path.join(mydir, f))
</code></pre>
<p>Or via <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="noreferrer"><code>glob.glob</code></a>:</p>
<pre><code>import glob, os, os.path

filelist = glob.glob(os.path.join(mydir, "*.bak"))
for f in filelist:
    os.remove(f)
</code></pre>
<p>Be sure to be in the correct directory, eventually using <a href="https://docs.python.org/2/library/os.html#os.chdir" rel="noreferrer"><code>os.chdir</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>os.chdir</code> to change directory .
Use <code>glob.glob</code> to generate a list of file names which end it '.bak'. The elements of the list are just strings.</p>
<p>Then you could use <code>os.unlink</code> to remove the files. (PS. <code>os.unlink</code> and <code>os.remove</code> are synonyms for the same function.)</p>
<pre><code>#!/usr/bin/env python
import glob
import os
directory='/path/to/dir'
os.chdir(directory)
files=glob.glob('*.bak')
for filename in files:
    os.unlink(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5, <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="noreferrer"><code>os.scandir</code></a> is better if you need to check for file attributes or type - see <a href="https://docs.python.org/3/library/os.html#os.DirEntry" rel="noreferrer"><code>os.DirEntry</code></a> for properties of the object that's returned by the function. </p>
<pre><code>import os 

for file in os.scandir(path):
    if file.name.endswith(".bak"):
        os.unlink(file.path)
</code></pre>
<p>This also doesn't require changing directories since each <code>DirEntry</code> already includes the full path to the file. </p>
</div>
<div class="post-text" itemprop="text">
<p>you can create a function. Add maxdepth as you like for traversing subdirectories.</p>
<pre><code>def findNremove(path,pattern,maxdepth=1):
    cpath=path.count(os.sep)
    for r,d,f in os.walk(path):
        if r.count(os.sep) - cpath &lt;maxdepth:
            for files in f:
                if files.endswith(pattern):
                    try:
                        print "Removing %s" % (os.path.join(r,files))
                        #os.remove(os.path.join(r,files))
                    except Exception,e:
                        print e
                    else:
                        print "%s removed" % (os.path.join(r,files))

path=os.path.join("/home","dir1","dir2")
findNremove(path,".bak")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First <a href="http://docs.python.org/library/glob.html" rel="nofollow noreferrer">glob</a> them, then <a href="http://docs.python.org/library/os.html#os.unlink" rel="nofollow noreferrer">unlink</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Linux and macOS you can run simple command to the shell:</p>
<pre><code>subprocess.run('rm /tmp/*.bak', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I realize this is old; however, here would be how to do so using just the os module...</p>
<pre><code>def purgedir(parent):
    for root, dirs, files in os.walk(parent):                                      
        for item in files:
            # Delete subordinate files                                                 
            filespec = os.path.join(root, item)
            if filespec.endswith('.bak'):
                os.unlink(filespec)
        for item in dirs:
            # Recursively perform this operation for subordinate directories   
            purgedir(os.path.join(root, item))
</code></pre>
</div>
<span class="comment-copy">@slh2080: Posting "Solved" isn't what you do on this site.  What you do is pick the answer that you actually used and click the check-mark to indicate that it solved your problem.</span>
<span class="comment-copy">Sorry. Thanks for pointing out my mistake. It's not homework, just learning python in my spare time. I clicked on the answer I used but that was before I saw ghostdog74 response.</span>
<span class="comment-copy">note: to delete an entire directory tree <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="nofollow noreferrer"><code>shutil.rmtree(path)</code> could used</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/185936/how-to-delete-the-contents-of-a-folder-in-python">How to delete the contents of a folder in Python?</a></span>
<span class="comment-copy">Your first example is using redundant for loops.  You can one pass with - [ os.remove(f) for f in os.listdir(".") if f.endswith(".bak") ] -  as list comprehensions are meant to be used.  Or you can move the 'if' in the comprehension into the for loop -  for f in os.listdir("."):     if f.endswith(".bak"):         os.remove(f)</span>
<span class="comment-copy">@slh2080 Since you say the problem has been solved, why not mark the answer as the correct answer?</span>
<span class="comment-copy">@dragonjujo, yes i know, but i thought it would be clearer this way ..</span>
<span class="comment-copy">Watch out the os.listdir(".")!!! I used this code and forgot to change the path, all my code were gone!!! Tried two different utilities to recover but with no luck!!</span>
<span class="comment-copy">@LeiGuo Fixed that.</span>
<span class="comment-copy">You're missing a colon, the first line inside the for loop should be <code>if file.name.endswith(".bak"):</code></span>
<span class="comment-copy">Thanks! That'll teach me to write code without actually running them</span>
<span class="comment-copy">Not a good choice in my opinion. It's not portable and it's probably more expensive due to the extra subprocess. Better to use Python APIs.</span>
