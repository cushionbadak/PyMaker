<div class="post-text" itemprop="text">
<p>Currently I'm using this:</p>
<pre><code>f = open(filename, 'r+')
text = f.read()
text = re.sub('foobar', 'bar', text)
f.seek(0)
f.write(text)
f.close()
</code></pre>
<p>But the problem is that the old file is larger than the new file. So I end up with a new file that has a part of the old file on the end of it.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to close and reopen the file, to avoid race conditions, you could <a href="https://docs.python.org/3/library/io.html#io.IOBase.truncate" rel="noreferrer"><code>truncate</code></a> it:</p>
<pre><code>f = open(filename, 'r+')
text = f.read()
text = re.sub('foobar', 'bar', text)
f.seek(0)
f.write(text)
f.truncate()
f.close()
</code></pre>
<p>The functionality may also be <a href="https://stackoverflow.com/a/3644618/4541045">cleaner and safer</a> using <code>with open as</code> per  mVChr's comment, which is will close the handler, even if an error occurs.</p>
<pre><code>with open(filename, 'r+') as f:
    text = f.read()
    text = re.sub('foobar', 'bar', text)
    f.seek(0)
    f.write(text)
    f.truncate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably it would be easier and neater to close the file after <code>text = re.sub('foobar', 'bar', text)</code>, re-open it for writing (thus clearing old contents), and write your updated text to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/fileinput.html" rel="noreferrer"><code>fileinput</code></a> module has an <code>inline</code> mode for writing changes to the file you are processing without using temporary files etc.  The module nicely encapsulates the common operation of looping over the lines in a list of files, via an object which transparently keeps track of the file name, line number etc if you should want to inspect them inside the loop.</p>
<pre><code>import fileinput
for line in fileinput.FileInput("file",inplace=1):
    if "foobar" in line:
         line=line.replace("foobar","bar")
    print line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try writing it in a new file..</p>
<pre><code>f = open(filename, 'r+')
f2= open(filename2,'a+')
text = f.read()
text = re.sub('foobar', 'bar', text)
f.seek(0)
f.close()
f2.write(text)
fw.close()
</code></pre>
</div>
<span class="comment-copy">Just to be clear in my mind - should your second clip have <code>f.write(text)</code> after <code>f.truncate()</code>?</span>
