<div class="post-text" itemprop="text">
<p>I'm using a for loop to read a file, but I only want to read specific lines, say line #26 and #30. Is there any built-in feature to achieve this?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If the file to read is big, and you don't want to read the whole file in memory at once:</p>
<pre><code>fp = open("file")
for i, line in enumerate(fp):
    if i == 25:
        # 26th line
    elif i == 29:
        # 30th line
    elif i &gt; 29:
        break
fp.close()
</code></pre>
<p>Note that <code>i == n-1</code> for the <code>n</code>th line.</p>
<hr/>
<p>In Python 2.6 or later:</p>
<pre><code>with open("file") as fp:
    for i, line in enumerate(fp):
        if i == 25:
            # 26th line
        elif i == 29:
            # 30th line
        elif i &gt; 29:
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The quick answer:</p>
<pre><code>f=open('filename')
lines=f.readlines()
print lines[25]
print lines[29]
</code></pre>
<p>or:</p>
<pre><code>lines=[25, 29]
i=0
f=open('filename')
for line in f:
    if i in lines:
        print i
    i+=1
</code></pre>
<p>There is a more elegant solution for extracting many lines: <a href="http://docs.python.org/library/linecache.html" rel="noreferrer">linecache</a> (courtesy of <a href="https://stackoverflow.com/questions/620367/python-how-to-jump-to-a-particular-line-in-a-huge-text-file">"python: how to jump to a particular line in a huge text file?"</a>, a previous stackoverflow.com question).</p>
<p>Quoting the python documentation linked above:</p>
<pre><code>&gt;&gt;&gt; import linecache
&gt;&gt;&gt; linecache.getline('/etc/passwd', 4)
'sys:x:3:3:sys:/dev:/bin/sh\n'
</code></pre>
<p>Change the <code>4</code> to your desired line number, and you're on. Note that 4 would bring the fifth line as the count is zero-based.</p>
<p>If the file might be very large, and cause problems when read into memory, it might be a good idea to take <a href="https://stackoverflow.com/questions/2081836/reading-specific-lines-only-python/2081880#2081880">@Alok's advice and use enumerate()</a>.</p>
<p><strong>To Conclude:</strong></p>
<ul>
<li>Use <code>fileobject.readlines()</code> or <code>for line in fileobject</code> as a quick solution for small files. </li>
<li>Use <code>linecache</code> for a more elegant solution, which will be quite fast for reading many files, possible repeatedly.</li>
<li>Take <a href="https://stackoverflow.com/questions/2081836/reading-specific-lines-only-python/2081880#2081880">@Alok's advice and use <code>enumerate()</code></a> for files which could be very large, and won't fit into memory. Note that using this method might slow because the file is read sequentially.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>A fast and compact approach could be:</p>
<pre><code>def picklines(thefile, whatlines):
  return [x for i, x in enumerate(thefile) if i in whatlines]
</code></pre>
<p>this accepts any open file-like object <code>thefile</code> (leaving up to the caller whether it should be opened from a disk file, or via e.g a socket, or other file-like stream) and a set of zero-based line indices <code>whatlines</code>, and returns a list, with low memory footprint and reasonable speed.  If the number of lines to be returned is huge, you might prefer a generator:</p>
<pre><code>def yieldlines(thefile, whatlines):
  return (x for i, x in enumerate(thefile) if i in whatlines)
</code></pre>
<p>which is basically only good for looping upon -- note that the only difference comes from using rounded rather than square parentheses in the <code>return</code> statement, making a list comprehension and a generator expression respectively.</p>
<p>Further note that despite the mention of "lines" and "file" these functions are much, <strong>much</strong> more general -- they'll work on <strong>any</strong> iterable, be it an open file or any other, returning a list (or generator) of items based on their progressive item-numbers.  So, I'd suggest using more appropriately general names;-).</p>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of offering another solution:</p>
<pre><code>import linecache
linecache.getline('Sample.txt', Number_of_Line)
</code></pre>
<p>I hope this is quick and easy :)</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want line 7</p>
<pre>
line = open("file.txt", "r").readlines()[7]
</pre>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of completeness, here is one more option.</p>
<p>Let's start with a definition from <a href="https://docs.python.org/2.7/glossary.html#term-slice" rel="noreferrer">python docs</a>:</p>
<blockquote>
<p><strong>slice</strong> An object usually containing a portion of a sequence. A slice is created using the subscript notation, [] with colons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (subscript) notation uses slice objects internally (or in older versions, __getslice__() and __setslice__()).</p>
</blockquote>
<p>Though the slice notation is not directly applicable to iterators in general, the <code>itertools</code> package contains a replacement function:</p>
<pre><code>from itertools import islice

# print the 100th line
with open('the_file') as lines:
    for line in islice(lines, 99, 100):
        print line

# print each third line until 100
with open('the_file') as lines:
    for line in islice(lines, 0, 100, 3):
        print line
</code></pre>
<p>The additional advantage of the function is that it does not read the iterator until the end. So you can do more complex things:</p>
<pre><code>with open('the_file') as lines:
    # print the first 100 lines
    for line in islice(lines, 100):
        print line

    # then skip the next 5
    for line in islice(lines, 5):
        pass

    # print the rest
    for line in lines:
        print line
</code></pre>
<p>And to answer the original question:</p>
<pre><code># how to read lines #26 and #30
In [365]: list(islice(xrange(1,100), 25, 30, 4))
Out[365]: [26, 30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Reading files is incredible fast. Reading a 100MB file takes less than 0.1 seconds (see my article <a href="https://martin-thoma.com/reading-and-writing-files-with-python/" rel="nofollow noreferrer">Reading and Writing Files with Python</a>). Hence you should read it completely and then work with the single lines.</p>
<p>What most answer here do is not wrong, but bad style. Opening files should always be done with <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer"><code>with</code></a> as it makes sure that the file is closed again.</p>
<p>So you should do it like this:</p>
<pre><code>with open("path/to/file.txt") as f:
    lines = f.readlines()
print(lines[26])  # or whatever you want to do with this line
print(lines[30])  # or whatever you want to do with this line
</code></pre>
<h2>Huge files</h2>
<p>If you happen to have a huge file and memory consumption is a concern, you can process it line by line:</p>
<pre><code>with open("path/to/file.txt") as f:
    for i, line in enumerate(f):
        pass  # process line i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Some of these are lovely, but it can be done much more simply:</p>
<pre><code>start = 0 # some starting index
end = 5000 # some ending index
filename = 'test.txt' # some file we want to use

with open(filename) as fh:
    data = fin.readlines()[start:end]

print(data)
</code></pre>
<p>That will use simply list slicing, it loads the whole file, but most systems will minimise memory usage appropriately, it's faster than most of the methods given above, and works on my 10G+ data files. Good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do a <a href="http://docs.python.org/tutorial/inputoutput.html" rel="nofollow noreferrer">seek()</a> call which positions your read head to a specified byte within the file. This won't help you unless you know exactly how many bytes (characters) are written in the file before the line you want to read. Perhaps your file is strictly formatted (each line is X number of bytes?) or, you could count the number of characters yourself (remember to include invisible characters like line breaks) if you really want the speed boost. </p>
<p>Otherwise, you do have to read every line prior to the line you desire, as per one of the many solutions already proposed here.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this:</p>
<pre><code>&gt;&gt;&gt; with open('a', 'r') as fin: lines = fin.readlines()
&gt;&gt;&gt; for i, line in enumerate(lines):
      if i &gt; 30: break
      if i == 26: dox()
      if i == 30: doy()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't mind importing then <a href="http://pydoc.org/2.5.1/fileinput.html" rel="nofollow noreferrer">fileinput</a> does exactly what you need (this is you can read the line number of the current line)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getitems(iterable, items):
  items = list(items) # get a list from any iterable and make our own copy
                      # since we modify it
  if items:
    items.sort()
    for n, v in enumerate(iterable):
      if n == items[0]:
        yield v
        items.pop(0)
        if not items:
          break

print list(getitems(open("/usr/share/dict/words"), [25, 29]))
# ['Abelson\n', 'Abernathy\n']
# note that index 25 is the 26th item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer this approach because it's more general-purpose, i.e. you can use it on a file, on the result of <code>f.readlines()</code>, on a <code>StringIO</code> object, whatever:</p>
<pre><code>def read_specific_lines(file, lines_to_read):
   """file is any iterable; lines_to_read is an iterable containing int values"""
   lines = set(lines_to_read)
   last = max(lines)
   for n, line in enumerate(file):
      if n + 1 in lines:
          yield line
      if n + 1 &gt; last:
          return

&gt;&gt;&gt; with open(r'c:\temp\words.txt') as f:
        [s for s in read_specific_lines(f, [1, 2, 3, 1000])]
['A\n', 'a\n', 'aa\n', 'accordant\n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's my little 2 cents, for what it's worth ;)</p>
<pre><code>def indexLines(filename, lines=[2,4,6,8,10,12,3,5,7,1]):
    fp   = open(filename, "r")
    src  = fp.readlines()
    data = [(index, line) for index, line in enumerate(src) if index in lines]
    fp.close()
    return data


# Usage below
filename = "C:\\Your\\Path\\And\\Filename.txt"
for line in indexLines(filename): # using default list, specify your own list of lines otherwise
    print "Line: %s\nData: %s\n" % (line[0], line[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better and minor change for Alok Singhal's answer</p>
<pre><code>fp = open("file")
for i, line in enumerate(fp,1):
    if i == 26:
        # 26th line
    elif i == 30:
        # 30th line
    elif i &gt; 30:
        break
fp.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>File objects have a .readlines() method which will give you a list of the contents of the file, one line per list item. After that, you can just use normal list slicing techniques.</p>
<p><a href="http://docs.python.org/library/stdtypes.html#file.readlines" rel="nofollow noreferrer">http://docs.python.org/library/stdtypes.html#file.readlines</a></p>
</div>
<div class="post-text" itemprop="text">
<p>@OP, you can use enumerate</p>
<pre><code>for n,line in enumerate(open("file")):
    if n+1 in [26,30]: # or n in [25,29] 
       print line.rstrip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>file = '/path/to/file_to_be_read.txt'
with open(file) as f:
    print f.readlines()[26]
    print f.readlines()[30]
</code></pre>
<p>Using the with statement, this opens the file, prints lines 26 and 30, then closes the file. Simple!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this very simply with this syntax that someone already mentioned, but it's by far the easiest way to do it:</p>
<pre><code>inputFile = open("lineNumbers.txt", "r")
lines = inputFile.readlines()
print (lines[0])
print (lines[2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To print line# 3,   </p>
<pre><code>line_number = 3

with open(filename,"r") as file:
current_line = 1
for line in file:
    if current_line == line_number:
        print(file.readline())
        break
    current_line += 1
</code></pre>
<p>Original author: Frank Hofmann</p>
</div>
<div class="post-text" itemprop="text">
<p>If your large text file <code>file</code> is strictly well-structured (meaning every line has the same length <code>l</code>), you could use for <code>n</code>-th line</p>
<pre><code>with open(file) as f:
    f.seek(n*l)
    line = f.readline()  # please notice the s at the end!
    last_pos = f.tell()
</code></pre>
<p><strong>Disclaimer</strong> This does only work for files with the same length!</p>
</div>
<div class="post-text" itemprop="text">
<p>To print desired line.
To print line above/below required line.</p>
<pre><code>def dline(file,no,add_sub=0):
    tf=open(file)
    for sno,line in enumerate(tf):
        if sno==no-1+add_sub:
         print(line)
    tf.close()
</code></pre>
<p>execute----&gt;dline("D:\dummy.txt",6)  i.e dline("file path", line_number, if you want upper line of the searched line give 1 for lower -1 this is optional default value will be taken 0)</p>
</div>
<div class="post-text" itemprop="text">
<h2>Fairly quick and to the point.</h2>
<p>To print certain lines in a text file.  Create a "lines2print" list and then
just print when the enumeration is "in" the lines2print list.
To get rid of extra '\n' use line.strip() or line.strip('\n').
I just like "list comprehension" and try to use when I can.
I like the "with" method to read text files in order to prevent
leaving a file open for any reason.</p>
<pre><code>lines2print = [26,30] # can be a big list and order doesn't matter.

with open("filepath", 'r') as fp:
    [print(x.strip()) for ei,x in enumerate(fp) if ei in lines2print]
</code></pre>
<p>or if list is small just type in list as a list into the comprehension.</p>
<pre><code>with open("filepath", 'r') as fp:
    [print(x.strip()) for ei,x in enumerate(fp) if ei in [26,30]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = open(filename, 'r')
totalLines = len(f.readlines())
f.close()
f = open(filename, 'r')

lineno = 1
while lineno &lt; totalLines:
    line = f.readline()

    if lineno == 26:
        doLine26Commmand(line)

    elif lineno == 30:
        doLine30Commmand(line)

    lineno += 1
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this would work</p>
<pre><code> open_file1 = open("E:\\test.txt",'r')
 read_it1 = open_file1.read()
 myline1 = []
 for line1 in read_it1.splitlines():
 myline1.append(line1)
 print myline1[0]
</code></pre>
</div>
<span class="comment-copy">Possible dup: <a href="http://stackoverflow.com/questions/620367/python-how-to-jump-to-a-particular-line-in-a-huge-text-file" title="python how to jump to a particular line in a huge text file">stackoverflow.com/questions/620367/…</a></span>
<span class="comment-copy"><code>enumerate(x)</code> uses <code>x.next</code>, so it doesn't need the entire file in memory.</span>
<span class="comment-copy">My small beef with this is that A) You want to use with instead of the open / close pair and thus keep the body short, B) But the body is not that short. Sounds like a trade-off between speed/space and being Pythonic. I am not sure what the best solution would be.</span>
<span class="comment-copy">with is overrated, python got along fine for over 13 years without it</span>
<span class="comment-copy">@Dan D. Electricity is overrated, mankind got along fine for over 200 thousand years without it. ;-) 'with' is making it more secure, more readable, and one line shorter.</span>
<span class="comment-copy">why use for loop, I don't think you understand the meaning of <code>big file</code>. The loop will take years to reach the index</span>
<span class="comment-copy">Nice.  I just looked at the source of <code>linecache</code> module, and looks like it reads the whole file in memory.  So, if random access is more important than size optimization, <code>linecache</code> is the best method.</span>
<span class="comment-copy">Thanks for the options! :)</span>
<span class="comment-copy">Your solution has an off by one error, btw :-)</span>
<span class="comment-copy">Thanks, corrected it.</span>
<span class="comment-copy">with linecache.getlin('some_file', 4) I get the 4th line, not the 5th.</span>
<span class="comment-copy">@ephemient, I disagree -- the genexp reads smoothly and perfectly.</span>
<span class="comment-copy">Excellent and elegant solution, thanks! Indeed, even large files should be supported, with the generator expression. Can't get more elegant than this, can it? :)</span>
<span class="comment-copy">Nice solution, how does this compare to the one proposed by @AdamMatan? The Adam solution could be faster as it exploits additional information (line numbers monotonically increasing) which could lead to an early stop. I have a 10GB file which I cannot load into memory.</span>
<span class="comment-copy">@Mannaggia It's not emphasized enough in this answer, but <code>whatlines</code> should be a <code>set</code>, because <code>if i in whatlines</code> will execute faster with a set rather than a (sorted) list. I didn't notice it first and instead devised my own ugly solution with sorted list (where I didn't have to scan a list each time, while <code>if i in whatlines</code> does just that), but difference in performance was negligible (with my data) and this solution is much more elegant.</span>
<span class="comment-copy">Hope this is most optimal solution .</span>
<span class="comment-copy">This reads the whole file into memory. You might as well call file.read().split('\n') then use array index lookups to get the line of interest...</span>
<span class="comment-copy">Could you provide an example @duhaime</span>
<span class="comment-copy">Sure: <a href="https://gist.github.com/duhaime/4f5f8671e0a752172e4d00f369342361" rel="nofollow noreferrer">gist.github.com/duhaime/4f5f8671e0a752172e4d00f369342361</a></span>
<span class="comment-copy">Neat. But how do you <code>close()</code> the file when opening it this way?</span>
<span class="comment-copy">@0sh do we need to close?</span>
<span class="comment-copy">yes. we need to close after this.When we open a file using "with" ... it closes itself.</span>
<span class="comment-copy">By far the best approach when working with large files.  My program went from consuming 8GB+ to almost nothing.  The tradoff was CPU usage which went from ~15% to ~40% but the actual processing of the file was 70% faster. I'll take that tradoff all day long.  Thanks you! 🎉🎉🎉</span>
<span class="comment-copy">This seems the most pythonic to me. Thanks!</span>
<span class="comment-copy">Oh, thank you! I fixed it.</span>
<span class="comment-copy">IMO it is a really bad style to read an entire file of unknown lenght, just only to get the first 30 lines .. what is about memory consumption .. and what is about endless streams?</span>
<span class="comment-copy">@return42 It depends very much on the application. For many, it is totally fine to assume that a text file has a way lower size than the available memory. If you happen to have potentially huge files, I've edited my answer.</span>
<span class="comment-copy">thanks for your addition, which is the same as alok <a href="https://stackoverflow.com/a/2081880/300130">answer</a>. And sorry no, I don't think this depends on the application. IMO it is always better not read more lines then  you need.</span>
<span class="comment-copy">True, this is less efficient than the one by Alok, but mine uses a with statement ;)</span>
<span class="comment-copy">Roger, my favorite guy! This could benefit from a with statement.</span>
<span class="comment-copy">this isn't a valid answer. after the first call to <code>readlines()</code> the iterator will be exhausted and the second call will either return an empty list or throw an error (can't remember which)</span>
<span class="comment-copy">this is as unpythonic as it gets.</span>
<span class="comment-copy">Gives the wrong result, as you can't use readlines and readline like that (they each change the current read position).</span>
<span class="comment-copy">I'm sorry for having overlooked a HUGE error in my first code. The error has been corrected and the current code should work as expected. Thanks for pointing out my error, Roger Pate.</span>
<span class="comment-copy">There were already a dozen readline methods when you posted this--adding another just adds clutter</span>
