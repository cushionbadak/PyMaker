<div class="post-text" itemprop="text">
<p>I'm having trouble replacing a function from a different module with another function and it's driving me crazy.</p>
<p>Let's say I have a module bar.py that looks like this:</p>
<pre><code>from a_package.baz import do_something_expensive

def a_function():
    print do_something_expensive()
</code></pre>
<p>And I have another module that looks like this:</p>
<pre><code>from bar import a_function
a_function()

from a_package.baz import do_something_expensive
do_something_expensive = lambda: 'Something really cheap.'
a_function()

import a_package.baz
a_package.baz.do_something_expensive = lambda: 'Something really cheap.'
a_function()
</code></pre>
<p>I would expect to get the results:</p>
<pre><code>Something expensive!
Something really cheap.
Something really cheap.
</code></pre>
<p>But instead I get this:</p>
<pre><code>Something expensive!
Something expensive!
Something expensive!
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>It may help to think of how Python namespaces work: they're essentially dictionaries.  So when you do this:</p>
<pre><code>from a_package.baz import do_something_expensive
do_something_expensive = lambda: 'Something really cheap.'
</code></pre>
<p>think of it like this:</p>
<pre><code>do_something_expensive = a_package.baz['do_something_expensive']
do_something_expensive = lambda: 'Something really cheap.'
</code></pre>
<p>Hopefully you can realize why this doesn't work then :-)  Once you import a name into a namespace, the value of the name in the namespace you imported <em>from</em> is irrelevant.  You're only modifying the value of do_something_expensive in the local module's namespace, or in a_package.baz's namespace, above.  But because bar imports do_something_expensive directly, rather than referencing it from the module namespace, you need to write to its namespace:</p>
<pre><code>import bar
bar.do_something_expensive = lambda: 'Something really cheap.'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a really elegant decorator for this: <a href="http://mail.python.org/pipermail/python-dev/2008-January/076194.html" rel="noreferrer">Guido van Rossum: Python-Dev list: Monkeypatching Idioms</a>.</p>
<p>There's also the <a href="http://pypi.python.org/pypi/dectools/0.1.3" rel="noreferrer">dectools</a> package, which I saw an PyCon 2010, which may be able to be used in this context too, but that might actually go the other way (monkeypatching at the method declarative level... where you're not)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to only patch it for your call and otherwise leave the original code you can use <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow">https://docs.python.org/3/library/unittest.mock.html#patch</a> (since Python 3.3):</p>
<pre><code>with patch('a_package.baz.do_something_expensive', new=lambda: 'Something really cheap.'):
    print do_something_expensive()
    # prints 'Something really cheap.'

print do_something_expensive()
# prints 'Something expensive!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the first snippet, you make <code>bar.do_something_expensive</code> refer to the function object that <code>a_package.baz.do_something_expensive</code> refers to at that moment. To really "monkeypatch" that you would need to change the function itself (you are only changing what names refer to); this is possible, but you do not actually want to do that.</p>
<p>In your attempts to change the behavior of <code>a_function</code>, you have done two things: </p>
<ol>
<li><p>In the first attempt, you make do_something_expensive a global name in your module. However, you are calling <code>a_function</code>, which does not look in your module to resolve names, so it still refers to the same function. </p></li>
<li><p>In the second example you change what <code>a_package.baz.do_something_expensive</code> refers to, but <code>bar.do_something_expensive</code> is not magically tied to it. That name still refers to the function object it looked up when it was initilized.</p></li>
</ol>
<p>The simplest but far-from-ideal approach would be to change <code>bar.py</code> to say</p>
<pre><code>import a_package.baz

def a_function():
    print a_package.baz.do_something_expensive()
</code></pre>
<hr/>
<p>The right solution is probably one of two things:</p>
<ul>
<li>Redefine <code>a_function</code> to take a function as an argument and call that, rather than trying to sneak in and change what function it is hard coded to refer to, or</li>
<li>Store the function to be used in an instance of a class; this is how we do mutable state in Python. </li>
</ul>
<p>Using globals (this is what changing module-level stuff from other modules is) is a <em>bad thing</em> that leads to unmaintainable, confusing, untestestable, unscalable code the flow of which is difficult to track.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>do_something_expensive</code> in the <code>a_function()</code> function is just a variable within the namespace of the module pointing to a function object. When you redefine the module you are doing it in a different namespace.</p>
</div>
<span class="comment-copy">The second one cannot work, because your just redefining the meaning of do_something_expensive in your local scope. I do not know however, why the 3rd one is not working...</span>
<span class="comment-copy">As Nicholas explains, you're copying a reference and replacing only one of the references. <code>from module import non_module_member</code> and module-level monkey-patching are incompatible for this reason, and are both generally best avoided.</span>
<span class="comment-copy">The preferred package naming scheme is lowercase with no underscores, i.e., <code>apackage</code>.</span>
<span class="comment-copy">@bobince, module-level mutable state like this is best avoided, with the bad consequences of globals long since recognized. However, <code>from foo import bar</code> is just fine and in fact recommended when appropriate.</span>
<span class="comment-copy">Those decorators do not appear to apply to this case.</span>
<span class="comment-copy">@MikeGraham: Guido's email doesn't mention that his example code does also allow for replacing any method, not only adding a new one. So, I think they do apply to this case.</span>
<span class="comment-copy">@MikeGraham The Guido example does work perfectly for mocking a method statement,  I just tried it myself!  setattr is just a fancy way of saying '=' ;    So 'a = 3' either creates a new variable called 'a' and sets it to three or replaces an existing variable's value with 3</span>
