<div class="post-text" itemprop="text">
<p>I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things. </p>
<p>How do I check the file size?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/os.html#os.stat" rel="noreferrer"><code>os.stat</code></a>, and use the <code>st_size</code> member of the resulting object:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; statinfo = os.stat('somefile.txt')
&gt;&gt;&gt; statinfo
(33188, 422511L, 769L, 1, 1032, 100, 926L, 1105022698,1105022732, 1105022732)
&gt;&gt;&gt; statinfo.st_size
926L
</code></pre>
<p>Output is in bytes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>os.path.getsize</code>:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; b = os.path.getsize("/path/isa_005.mp3")
&gt;&gt;&gt; b
2071611L
</code></pre>
<p>The output is in bytes.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers work for real files, but if you need something that works for "file-like objects", try this:</p>
<pre><code># f is a file-like object. 
f.seek(0, os.SEEK_END)
size = f.tell()
</code></pre>
<p>It works for real files and StringIO's, in my limited testing. (Python 2.7.3.) The "file-like object" API isn't really a rigorous interface, of course, but the <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="noreferrer">API documentation</a> suggests that file-like objects should support <code>seek()</code> and <code>tell()</code>.</p>
<p><strong>Edit</strong></p>
<p>Another difference between this and <code>os.stat()</code> is that you can <code>stat()</code> a file even if you don't have permission to read it. Obviously the seek/tell approach won't work unless you have read permission.</p>
<p><strong>Edit 2</strong> </p>
<p>At Jonathon's suggestion, here's a paranoid version. (The version above leaves the file pointer at the end of the file, so if you were to try to read from the file, you'd get zero bytes back!)</p>
<pre><code># f is a file-like object. 
old_file_position = f.tell()
f.seek(0, os.SEEK_END)
size = f.tell()
f.seek(old_file_position, os.SEEK_SET)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os


def convert_bytes(num):
    """
    this function will convert bytes to MB.... GB... etc
    """
    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
        if num &lt; 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


def file_size(file_path):
    """
    this function will return the file size
    """
    if os.path.isfile(file_path):
        file_info = os.stat(file_path)
        return convert_bytes(file_info.st_size)


# Lets check the file size of MS Paint exe 
# or you can use any file path
file_path = r"C:\Windows\System32\mspaint.exe"
print file_size(file_path)
</code></pre>
<p>Result:</p>
<pre><code>6.1 MB
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>pathlib</code> (<a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">added in Python 3.4</a> or a backport available on <a href="https://pypi.python.org/pypi/pathlib2" rel="nofollow noreferrer">PyPI</a>):</p>
<pre><code>from pathlib import Path
file = Path() / 'doc.txt'  # or Path('./doc.txt')
size = file.stat().st_size
</code></pre>
<p>This is really only an interface around <code>os.stat</code>, but using <code>pathlib</code> provides an easy way to access other file related operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a <code>bitshift</code> trick I use if i want to to convert from <code>bytes</code> to any other unit. If you do a right shift by <code>10</code> you basically shift it by an order (multiple). </p>
<blockquote>
<p>Example:  <code>5GB are 5368709120 bytes</code></p>
</blockquote>
<pre><code>print (5368709120 &gt;&gt; 10)  # 5242880 kilo Bytes (kB)
print (5368709120 &gt;&gt; 20 ) # 5120 Mega Bytes(MB)
print (5368709120 &gt;&gt; 30 ) # 5 Giga Bytes(GB)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strictly sticking to the question, the python code (+ pseudo-code) would be:  </p>
<pre><code>import os
file_path = r"&lt;path to your file&gt;"
if os.stat(file_path).st_size &gt; 0:
    &lt;send an email to somebody&gt;
else:
    &lt;continue to other things&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>#Get file size , print it , process it...
#Os.stat will provide the file size in (.st_size) property. 
#The file size will be shown in bytes.

import os

fsize=os.stat('filepath')
print('size:' + fsize.st_size.__str__())

#check if the file size is less than 10 MB

if fsize.st_size &lt; 10000000:
    process it ....
</code></pre>
</div>
<span class="comment-copy">If anything, the value could be passed as multiples of the file system block size (4096 bytes for example). Gladly, it is given as bytes instead.</span>
<span class="comment-copy">@josch - yes, this is nice, for the "size on disk" you can multiply <code>stat_result.st_blocks</code> by the block size, but I'm still searching how to get it programmatically and cross-platform (not via <code>tune2fs</code> etc.)</span>
<span class="comment-copy">@danben has the credited response.</span>
<span class="comment-copy">Note: the implementation of <code>os.path.getsize</code> is simply <code>return os.stat(filename).st_size</code></span>
<span class="comment-copy">But, oh, how much clearer than <code>st_size</code>!</span>
<span class="comment-copy">@wordsforthewise measure it! ~150 ns in my computer.</span>
<span class="comment-copy">@wordsforthewise  So is it like 2071611L bytes or 2071611L MB ? What does L stand for ? pls tell I am new to File I/O</span>
<span class="comment-copy">Docs say: os.path.getsize(path): Return the size, in bytes, of path.  <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">docs.python.org/2/library/os.path.html</a>  Ignore the L:  <a href="http://stackoverflow.com/questions/12589976/os-path-getsize-reports-a-filesize-with-an-l-at-the-end-why" title="os path getsize reports a filesize with an l at the end why">stackoverflow.com/questions/12589976/…</a></span>
<span class="comment-copy">You don't need to import <code>os</code>, instead write <code>f.seek(0, 2)</code> to seek 0 bytes from the end.</span>
<span class="comment-copy">And for the last line, if <code>os</code> isn't used: <code>f.seek(old_file_position, 0)</code></span>
<span class="comment-copy">If you use integer literals instead of named variables, you are torturing anybody that has to maintain your code. There's no compelling reason not to import <code>os</code>.</span>
<span class="comment-copy">@Kedar.Aitawdekar correct: bytes</span>
<span class="comment-copy">Apparently this is at least a little risky, depending on how Python implements <code>#seek()</code>: <a href="https://wiki.sei.cmu.edu/confluence/display/c/FIO19-C.+Do+not+use+fseek%28%29+and+ftell%28%29+to+compute+the+size+of+a+regular+file" rel="nofollow noreferrer">wiki.sei.cmu.edu/confluence/display/c/…</a></span>
<span class="comment-copy"><code>this function will convert bytes to MB.... GB... etc</code> Wrong. This function will convert bytes to MiB, GiB, etc. See <a href="https://superuser.com/a/1077275/174299">this post</a>.</span>
<span class="comment-copy">Line 10 can be changed to <code>return f'{num:.1f} {x}'</code> in Python &gt;= 3.5.</span>
<span class="comment-copy">This doesn't answer the question.  The question is about finding the size of a file, not about formatting the result for human consumption.</span>
<span class="comment-copy">These numbers are wrong and thus confusing. 5GB is 5e9 bytes. Is this supposed to be some sort of human-readable approximation? Where would you even use something like this?</span>
<span class="comment-copy">1-bit=&gt;2 ... 2-bits=&gt;4 ... 3-bits=&gt;8 ... 4-bits=&gt;16 ... 5-bits=&gt;32 ... 6-bits=&gt;64 ... 7-bits=&gt;128 ... 8-bits=&gt;256 ... 9-bits=&gt;512 ... 10-bits=&gt;1024 ... 1024 bytes is 1kB ... =&gt; 20-bits =&gt; 1024 * 1024 = 1,048,576bytes, which is 1024kB, and 1MB... =&gt; 30-bits =&gt; 1024 * 1024 * 1024 = 1,073,741,824 bytes, which is 1,048,576 kB, and 1024MB, and 1GB … You have confused scientific notation and decimal places with the binary/base-2 representation used in computing. 5x9 = 5 x 10^9 = 5,000,000,000</span>
<span class="comment-copy">Guys, he hasn't <i>confused</i> anything... he's just given an approximation, which is evident when he says "basically".  2^10 is approx. 10^3.  In fact, this approximation is so common that <a href="https://en.wikipedia.org/wiki/Mebibyte" rel="nofollow noreferrer">it has a name</a>: <i>Mebi</i>, <i>Gibi</i>, and <i>Tebi</i> are Mega, Giga, and Tera, respectively. Regarding not answering the question, @WillManley , you have a fair point there!  ;-p</span>
