<div class="post-text" itemprop="text">
<p>I have a <strong>python script</strong>, which is executing again <strong>4-5 python scripts</strong>.
For performance reasons i want to use same interpreter for executing all the script.</p>
<p>How could I handle this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>The obvious solution (which may require a little tweaking) is to just call the main function of each script from a master script.  E.g., if script1.py contains:</p>
<pre><code>#!/usr/bin/python
def main():
  // Do something
if __name__ == "__main__":
   main()
</code></pre>
<p>put in master.py</p>
<pre><code>#!/usr/bin/python
import script1
def main():
  script1.main()

if __name__ == "__main__":
  main()
</code></pre>
<p>You can continue this pattern for as many scripts as you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you're looking for the <a href="http://docs.python.org/library/functions.html#execfile" rel="nofollow noreferrer"><code>execfile</code></a> function in Python 2.x.</p>
<p>In Python 3 it was removed, but <a href="https://stackoverflow.com/questions/436198/what-is-an-alternative-to-execfile-in-python-3-0">there are simple alternatives</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote a package to execute multiple scripts from the same interpreter (sequentially not simultaneously).</p>
<p><strong>Installation</strong>:</p>
<pre><code>pip install mand
</code></pre>
<hr/>
<p><strong>Usage</strong>:</p>
<pre><code>mand script1.py script2.py script3.py script4.py
</code></pre>
<p>You can specify module paths or module names.</p>
<hr/>
<p>You may be able to run scripts at the 'same time' on using the 
 <a href="https://docs.python.org/3/library/runpy.html" rel="nofollow noreferrer">runpy</a> stdlib module (for python3) and <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a> stdlib module. Where you call <code>runpy.run_path</code> or <code>runpy.run_module</code> in separate threads, but you will only see performance benefits if the modules are IO bound and not CPU bound.</p>
<hr/>
<p>Using multiprocessing or os.system will spawn separate interpreters for each script, so the modules wouldn't be running in the same interpreter.</p>
</div>
<div class="post-text" itemprop="text">
<p>The currently executing interpreter is available in <code>sys.executable</code>. You can just pass that explicitly to subprocess.Popen as the first argument, or pass it as the 'executable' argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think this is recommended, but worst case scenario you could make the system 'run' each script from within another:</p>
<pre><code>import os
os.system('python script1.py')
os.system('python script2.py')
os.system('python script3.py')
os.system('python script4.py')
</code></pre>
</div>
<span class="comment-copy">to make it "simultanseos", <code>multithreading</code>, <code>multiprocessing</code> modules could be used</span>
<span class="comment-copy">sys.executable is just a string containing the path of the python program.  When he says "use same interpreter", I assume he means the same process, not just the same on-disk executable.</span>
