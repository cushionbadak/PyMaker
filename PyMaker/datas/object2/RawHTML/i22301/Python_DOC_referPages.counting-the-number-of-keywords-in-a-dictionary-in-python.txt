<div class="post-text" itemprop="text">
<p>I have a list of words in a dictionary with the value = the repetition of the keyword but I only want a list of distinct words so I wanted to count the number of keywords. Is there a way to count the number of keywords or is there another way I should look for distinct words?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>len(yourdict.keys())
</code></pre>
<p>or just</p>
<pre><code>len(yourdict)
</code></pre>
<p>If you like to count unique words in the file, you could just use <a href="http://docs.python.org/library/sets.html#module-sets" rel="noreferrer"><code>set</code></a> and do like</p>
<pre><code>len(set(open(yourdictfile).read().split()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The number of distinct words (i.e. count of entries in the dictionary) can be found using the <code>len()</code> function.</p>
<pre><code>&gt; a = {'foo':42, 'bar':69}
&gt; len(a)
2
</code></pre>
<p>To get all the distinct words (i.e. the keys), use the <code>.keys()</code> method.</p>
<pre><code>&gt; list(a.keys())
['foo', 'bar']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the question is about counting the number of keywords then would recommend something like</p>
<pre><code>def countoccurrences(store, value):
    try:
        store[value] = store[value] + 1
    except KeyError as e:
        store[value] = 1
    return
</code></pre>
<p>in the main function have something that loops through the data and pass the values to countoccurrences function</p>
<pre><code>if __name__ == "__main__":
    store = {}
    list = ('a', 'a', 'b', 'c', 'c')
    for data in list:
        countoccurrences(store, data)
    for k, v in store.iteritems():
        print "Key " + k + " has occurred "  + str(v) + " times"
</code></pre>
<p>The code outputs </p>
<pre><code>Key a has occurred 2 times
Key c has occurred 2 times
Key b has occurred 1 times
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>len()</code> directly on your dictionary works, and is faster than building an iterator, <code>d.keys()</code>, and calling <code>len()</code> on it, but the speed of either will negligible in comparison to whatever else your program is doing.</p>
<pre><code>d = {x: x**2 for x in range(1000)}

len(d)
# 1000

len(d.keys())
# 1000

%timeit len(d)
# 41.9 ns ± 0.244 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)

%timeit len(d.keys())
# 83.3 ns ± 0.41 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)
</code></pre>
</div>
<span class="comment-copy">I know this post is old, but I was curious. Is this the fastest method? Or: is it <i>a</i> reasonably fast method for large dictionaries?</span>
<span class="comment-copy">Both <code>len(yourdict.keys())</code> and <code>len(yourdict)</code> are O(1). The latter is slightly faster. See my tests below.</span>
<span class="comment-copy">I'd like to note that you can also go for the values (I know the question didn't ask it) with <code>len(yourdict.values())</code></span>
<span class="comment-copy">very nice. thanks a lot for the help!</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="nofollow noreferrer">PEP 8 naming conventions</a> dictate that <code>countoccurrences()</code> should instead be <code>count_occurrences()</code>. Also, if you import <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, there's a much better way to do it: <code>from collections import Counter; store = Counter(); for data in list: store[list] += 1</code>.</span>
