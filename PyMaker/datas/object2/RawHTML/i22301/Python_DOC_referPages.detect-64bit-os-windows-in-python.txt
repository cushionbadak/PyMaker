<div class="post-text" itemprop="text">
<p>Does anyone know how I would go about detected what bit version Windows is under Python.  I need to know this as a way of using the right folder for Program Files.</p>
<p>Many thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/platform.html" rel="noreferrer"><code>platform</code> module</a>  --  Access to underlying platformâ€™s identifying data</p>
<pre><code>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.architecture()
('32bit', 'WindowsPE')
</code></pre>
<p>On 64-bit Windows, 32-bit Python returns:</p>
<pre><code>('32bit', 'WindowsPE')
</code></pre>
<p>And that means that <strong>this answer, even though it has been accepted, is incorrect.</strong> Please see some of the answers below for options that may work for different situations.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the best solution to the problem has been posted by Mark Ribau.</p>
<p>The best answer to the question for Python 2.7 and newer is:</p>
<pre><code>def is_os_64bit():
    return platform.machine().endswith('64')
</code></pre>
<p>On windows the cross-platform-function <code>platform.machine()</code> internally uses the environmental variables used in Matthew Scoutens answer.</p>
<p>I found the following values:</p>
<ul>
<li>WinXP-32: x86</li>
<li>Vista-32: x86</li>
<li>Win7-64: AMD64</li>
<li>Debian-32: i686</li>
<li>Debian-64: x86_64</li>
</ul>
<p>For Python 2.6 and older:</p>
<pre><code>def is_windows_64bit():
    if 'PROCESSOR_ARCHITEW6432' in os.environ:
        return True
    return os.environ['PROCESSOR_ARCHITECTURE'].endswith('64')
</code></pre>
<p>To find the Python interpreter bit version I use:</p>
<pre><code>def is_python_64bit():
    return (struct.calcsize("P") == 8)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you should look in <code>os.environ['PROGRAMFILES']</code> for the program files folder.</p>
</div>
<div class="post-text" itemprop="text">
<p>Came here searching for properly detecting if running on 64bit windows, compiling all the above into something more concise. </p>
<p>Below you will find a function to test if running on 64bit windows, a function to get the 32bit Program Files folder, and a function to get the 64bit Program Files folder; all regardless of running 32bit or 64bit python. When running 32bit python, most things report as if 32bit when running on 64bit, even <code>os.environ['PROGRAMFILES']</code>. </p>
<pre><code>import os

def Is64Windows():
    return 'PROGRAMFILES(X86)' in os.environ

def GetProgramFiles32():
    if Is64Windows():
        return os.environ['PROGRAMFILES(X86)']
    else:
        return os.environ['PROGRAMFILES']

def GetProgramFiles64():
    if Is64Windows():
        return os.environ['PROGRAMW6432']
    else:
        return None
</code></pre>
<p><strong>Note</strong>: Yes, this is a bit hackish. All other methods that "should just work", do not work when running 32bit Python on 64bit Windows (at least for the various 2.x and 3.x versions I have tried).</p>
<p>Edits:<br/>
2011-09-07 - Added a note about why only this hackish method works properly.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def os_platform():
    true_platform = os.environ['PROCESSOR_ARCHITECTURE']
    try:
            true_platform = os.environ["PROCESSOR_ARCHITEW6432"]
    except KeyError:
            pass
            #true_platform not assigned to if this does not exist
    return true_platform
</code></pre>
<p><a href="http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx" rel="noreferrer">http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Many of these proposed solutions, such as platform.architecture(), fail because their results depend on whether you are running 32-bit or 64-bit Python.</p>
<p>The only reliable method I have found is to check for the existence of os.environ['PROGRAMFILES(X86)'], which is unfortunately hackish.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be using environment variables to access this. The program files directory is stored in the environment variable <code>PROGRAMFILES</code> on x86 Windows, the 32-bit program files is directory is stored in the <code>PROGRAMFILES(X86)</code> environment variable, these can be accessed by using <code>os.environ('PROGRAMFILES')</code>.</p>
<p>Use <code>sys.getwindowsversion()</code> or the existence of <code>PROGRAMFILES(X86)</code> (<code>if 'PROGRAMFILES(X86)' in os.environ</code>) to determine what version of Windows you are using.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following <a href="http://docs.python.org/library/platform.html#cross-platform" rel="nofollow">this documentation</a>, try this code:</p>
<pre><code>is_64bits = sys.maxsize &gt; 2**32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just found another way to do this, which may be useful in some situations.</p>
<pre><code>import subprocess
import os

def os_arch():
    os_arch = '32-bit'
    if os.name == 'nt':
        output = subprocess.check_output(['wmic', 'os', 'get', 'OSArchitecture'])
        os_arch = output.split()[1]
    else:
        output = subprocess.check_output(['uname', '-m'])
        if 'x86_64' in output:
            os_arch = '64-bit'
        else:
            os_arch = '32-bit'
    return os_arch

print 'os_arch=%s' % os_arch()
</code></pre>
<p>I tested this code in the following environments:</p>
<ul>
<li>Ubuntu 16.04 + Python 2.7.12</li>
<li>Mac OS Sierra + Python 2.7.11</li>
<li>Windows 7 Pro 32-bit + Python 2.7.5 (32-bit)</li>
<li>Windows 10 Home 64-bit + Python 2.7.13 (32-bit)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-python prettyprint-override"><code>import platform

platform.architecture()[0]
</code></pre>
<p>It will return '32bit' or '64bit' depending on system architecture. </p>
</div>
<div class="post-text" itemprop="text">
<p>The subject lines asks about detecting 64 or 32bit OS, while the body talks about determining the location of ProgramFiles. The latter has a couple of workable answers here. I'd like to add another solution generalized to handle StartMenu, Desktop, etc. as well as ProgramFiles: <a href="https://stackoverflow.com/questions/2216173/how-to-get-path-of-start-menus-programs-directory">How to get path of Start Menu's Programs directory?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>When you need to find out things about windows system, it is usually somewhere in the registry, according to MS documentation, you should look at (<a href="http://support.microsoft.com/kb/556009" rel="nofollow">http://support.microsoft.com/kb/556009</a>) this key value:</p>
<p><strong>HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0</strong></p>
<p>and if it is:</p>
<p>0x00000020 (32 in decimal)</p>
<p>It is a 32 bit machine.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to update this old thread - it looks like the platform module reports the correct architecture now (at least, in Python 2.7.8):</p>
<pre><code>c:\python27\python.exe -c "import platform; print platform.architecture(), platform.python_version()"
('32bit', 'WindowsPE') 2.7.6

c:\home\python278-x64\python.exe -c "import platform; print platform.architecture(), platform.python_version()"
('64bit', 'WindowsPE') 2.7.8
</code></pre>
<p>(sorry I don't have the rep to comment on the first answer which still claims to be wrong :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Im aware that in comments of the question this method was already used.
This is the method the <a href="https://referencesource.microsoft.com/#mscorlib/system/environment.cs,75feca36cdd83149" rel="nofollow noreferrer">.net framework uses</a>:</p>
<pre><code>import ctypes

def is64_bit_os():
    """ Returns wethever system is a 64bit operating system"""
    is64bit = ctypes.c_bool()
    handle = ctypes.windll.kernel32.GetCurrentProcess() # should be -1, because the current process is currently defined as (HANDLE) -1
    success = ctypes.windll.kernel32.IsWow64Process(handle, ctypes.byref(is64bit)) #should return 1
    return (success and is64bit).value
print(is64_bit_os())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>64-bit versions of Windows use something called registry redirection and reflection keys. There is a compatibility layer called WoW64 which enables compatibility of 32-bit applications. Starting from Windows 7 and Windows Server 2008 R2 WoW64 registry keys are not longer reflected but shared. You can read about it here:</p>
<p>registry-reflection: msdn.microsoft.com/en-us/library/aa384235(v=vs.85).aspx</p>
<p>affected-keys: msdn.microsoft.com/en-us/library/aa384253(v=vs.85).aspx</p>
<p>wikipedia: en.wikipedia.org/wiki/WoW64</p>
<p>All you need to do is detect existence of those keys. You can use _winreg for that. Use try: and try opening key, example:</p>
<pre><code>try:
aReg = _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE,"SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> import _winreg
 def get_registry_value(key, subkey, value):
   key = getattr(_winreg, key)
   handle = _winreg.OpenKey(key, subkey )
   (value, type) = _winreg.QueryValueEx(handle, value)
   return value

 windowsbit=cputype = get_registry_value(
        "HKEY_LOCAL_MACHINE",
        "SYSTEM\\CurrentControlSet\Control\\Session Manager\\Environment",
        "PROCESSOR_ARCHITECTURE")
 print windowsbit
</code></pre>
<p>just run this code </p>
<p>if you are working on 64 bit windows  machine this will print AMD64 </p>
<p>or if you are working on 32 bit it will print AMD32</p>
<p>i hope this code can help to solve this problem fully </p>
</div>
<div class="post-text" itemprop="text">
<p>This works for me in the Python versions I use: 2.7 and 2.5.4</p>
<pre><code>    import win32com.client
    import _winreg

    shell = win32com.client.Dispatch('WScript.Shell')
    proc_arch = shell.ExpandEnvironmentStrings(r'%PROCESSOR_ARCHITECTURE%').lower()

    if proc_arch == 'x86':
        print "32 bit"
    elif proc_arch == 'amd64':
        print "64 bit"
    else:
        raise Exception("Unhandled arch: %s" % proc_arch)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import struct

def is64Windows():
    return struct.calcsize('P') * 8 == 64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There should be a directory under Windows 64bit, a Folder called <code>\Windows\WinSxS64</code> for 64 bit, under Windows 32bit, it's WinSxS.</p>
</div>
<span class="comment-copy">Knowing this won't tell you where the program files are stored.</span>
<span class="comment-copy">&gt;&gt;&gt; import ctypes, sys &gt;&gt;&gt; i = ctypes.c_int() &gt;&gt;&gt; kernel32 = ctypes.windll.kernel32 &gt;&gt;&gt; process = kernel32.GetCurrentProcess() &gt;&gt;&gt; kernel32.IsWow64Process(process, ctypes.byref(i))     <a href="http://www.gossamer-threads.com/lists/python/python/663523" rel="nofollow noreferrer">gossamer-threads.com/lists/python/python/663523</a></span>
<span class="comment-copy">When reading through the answers, be warned: some of them return the version (32/64bit) of installed Python, some the version of the processor architecture, and only some actually return the version (32/64bit) of the OS. Which is what the question asks for. Many of the answers confuse these.</span>
<span class="comment-copy">But I agree, use the environment variable to locate %PROGRAMFILES%</span>
<span class="comment-copy">On 64-bit Windows it returns the same thing.</span>
<span class="comment-copy">This won't work, because python chose to always return win32 for compatibility. This is also why there are only 'hackish' way to find out.</span>
<span class="comment-copy">@Thomas If I do <code>print platform.architecture()[0]</code>, it displays <code>64bit</code> on Windows 7 64bit.</span>
<span class="comment-copy">@Tadeck You are probably running 64 bit Python on 64 bit Windows.</span>
<span class="comment-copy">This is the right answer. It is the only one that works also if you are using Python 32bit on 64bit Windows installation. +1</span>
<span class="comment-copy">I don't think this is always safe either: You could have a 32-bit OS running on 64-bit processor architecture.</span>
<span class="comment-copy">@Petri, in this case all three function correctly return False</span>
<span class="comment-copy">@phobie, have you tried? I don't have a 32-bit OS on 64-bit hardware, do you?</span>
<span class="comment-copy">Yes! The underlaying hardware has no impact. The functions have been tested with EM64T systems on all OSs listed by me.</span>
<span class="comment-copy">+1 for solving the problem instead of answering the question - not always a good thing, but in this case it is.</span>
<span class="comment-copy">This is the right solution, rather than hardcoding a directory. However, this will not lead to the 32-bit program files on 64-bit Windows, if that's what is needed.</span>
<span class="comment-copy">Yes, it will lead to the correct Program Files on Win64. Here are my values on Win7 64: ProgramFiles=C:\Program Files (x86)   ProgramFiles(x86)=C:\Program Files (x86)   ProgramW6432=C:\Program Files</span>
<span class="comment-copy">FYI: It will lead to the x86 version if you are running 32 bit python, but the x64 version if running 64 bit python.</span>
<span class="comment-copy">this does indeed return the true platform, even on 32bit python running on 64bit windows; however, true_platform will be "x86" for 32bit python on 32bit windows, "AMD64" for 32bit or 64bit python on windows 64bit for many machines (most intel consumer CPU, most AMD consumer CPU), "I64" for 32bit or 64bit python on windows 64bit for itanium and similar machines.  just be aware of this.</span>
<span class="comment-copy">source: <a href="http://msdn.microsoft.com/en-us/library/aa384274(v=vs.85).aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/aa384274(v=vs.85).aspx</a></span>
<span class="comment-copy">getwindowsversion() does not lead to the bit version used by the os! I. e. it returns similar results for Win7 32-bit and 64-bit. For the environmental variables have a look at the answer of Mark Ribau!</span>
<span class="comment-copy">No. I ran this on a 64 bit windows server 2012R2, it returned False but worked on windows 7. Better use reg keys or environment variables.</span>
<span class="comment-copy">@max The <a href="https://docs.python.org/3/library/platform.html#cross-platform" rel="nofollow noreferrer">official documentation</a> explains that both the <code>platform.architecture()</code> and the <code>sys.maxsize &gt; 2**32</code> are trying to detect whether the python intepretor itself is in 32 bit or 64 bit, NOT whether your OS is in 32 bit or 64 bit. Therefore the result you observed was presumably caused by your installation of different builts of Python on those machines. Depending on your purpose, these behavior may or may not be considered a wrong behavior.</span>
<span class="comment-copy">Right. The question does not ask for the interpretor bitness. It mentions the operating system bitness.</span>
<span class="comment-copy">Has anyone tested this? Despite the KB title, the KB article actually talks about processor information, so I suspect that the info refers to processor architecture, not the OS version.</span>
<span class="comment-copy">On Windows7 (64-bit) running in a Parallels VM on OSX, the registry value is 0x00000001 (1 in decimal)</span>
<span class="comment-copy">On Windows 10 (64-bit), there no longer is such registry attribute ("Platform ID"). But there is a "Platform Specific Field 1", and it's value is 0x00000002 (2 in decimal). Go figure... :(</span>
<span class="comment-copy">This is also just telling the arch of python interpreter itself.</span>
<span class="comment-copy">This is fragile and hackish. Python provides built-in ways to directly access information about the OS, and it doesn't depend on the Windows installation directory being in a normal place or having a normal name.</span>
<span class="comment-copy">@Mike Except that it doesn't work on Windows most of the time. Try running a 32bit Python on 64bit windows. It returns 32bit for most cases if using a default compile from python.org. (At least for all the 2.x versions I have used.)</span>
