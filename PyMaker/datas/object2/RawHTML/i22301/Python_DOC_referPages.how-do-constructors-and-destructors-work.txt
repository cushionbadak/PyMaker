<div class="post-text" itemprop="text">
<p>I'm trying to understand this code:</p>
<pre><code>class Person:
    '''Represents a person '''
    population = 0

    def __init__(self,name):
          //some statements and population += 1
    def __del__(self):
          //some statements and population -= 1 
    def sayHi(self):
        '''grettings from person'''
        print 'Hi My name is %s' % self.name

    def howMany(self):
        '''Prints the current population'''
        if Person.population == 1:
            print 'i am the only one here'
        else:
            print 'There are still %d guyz left ' % Person.population
rohan = Person('Rohan')
rohan.sayHi()
rohan.howMany()


sanju = Person('Sanjivi')
sanju.howMany()

del rohan # am i doing this correctly? 
</code></pre>
<p>How does the destructor get invoked -- automatically or do I have to add something in the "main" program/class like above?</p>
<p>Output:</p>
<blockquote>
<p>Initializing person data<br/>
  ******************************************<br/>
  Initializing Rohan<br/>
  ******************************************<br/>
  Population now is: 1<br/>
  Hi My name is Rohan<br/>
  i am the only one here<br/>
  Initializing person data<br/>
  ******************************************<br/>
  Initializing Sanjivi<br/>
  ******************************************<br/>
  Population now is: 2<br/>
  In case Person dies:<br/>
  ******************************************<br/>
  Sanjivi Bye Bye world<br/>
  there are still 1 people left<br/>
  i am the only one here<br/>
  In case Person dies:<br/>
  ******************************************<br/>
  Rohan Bye Bye world<br/>
  i am the last person on earth<br/>
  Population now is: 0</p>
</blockquote>
<p>If required I can paste the whole lesson as well. I'm learning from:
<a href="http://www.ibiblio.org/swaroopch/byteofpython/read/" rel="nofollow noreferrer">http://www.ibiblio.org/swaroopch/byteofpython/read/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a slightly opinionated answer.</p>
<p>Don't use <code>__del__</code>.  This is not C++ or a language built for destructors. The <code>__del__</code> method really should be gone in Python 3.x, though I'm sure someone will find a use case that makes sense.  If you need to use <code>__del __</code>, be aware of the basic limitations per <a href="http://docs.python.org/reference/datamodel.html" rel="noreferrer">http://docs.python.org/reference/datamodel.html</a>:</p>
<ul>
<li><code>__del__</code> is called when the garbage collector happens to be collecting the objects, not when you lose the last reference to an object and not when you execution <code>del object</code>.</li>
<li><code>__del__</code> is responsible for calling any <code>__del__</code> in a superclass, though it is not 
clear if this is in method resolution order (MRO) or just calling each superclass.</li>
<li>Having a <code>__del__</code> means that the garbage collector gives up on detecting and cleaning any cyclic links, such as losing the last reference to a linked list.  You can get a list of the objects ignored from <code>gc.garbage</code>.  You can sometimes use weak references to avoid the cycle altogether.  This gets debated now and then:  see <a href="http://mail.python.org/pipermail/python-ideas/2009-October/006194.html" rel="noreferrer">http://mail.python.org/pipermail/python-ideas/2009-October/006194.html</a>.</li>
<li>The <code>__del__</code> function can cheat, saving a reference to an object, and stopping the garbage collection.</li>
<li>Exceptions explicitly raised in <code>__del__</code> are ignored.</li>
<li><code>__del__</code> complements <code>__new__</code> far more than <code>__init__</code>.  This gets confusing.  See <a href="http://www.algorithm.co.il/blogs/index.php/programming/python/python-gotchas-1-__del__-is-not-the-opposite-of-__init__/" rel="noreferrer">http://www.algorithm.co.il/blogs/index.php/programming/python/python-gotchas-1-<strong>del</strong>-is-not-the-opposite-of-<strong>init</strong>/</a> for an explanation and gotchas.</li>
<li><code>__del__</code> is not a "well-loved" child in Python.  You will notice that sys.exit() documentation does not specify if garbage is collected before exiting, and there are lots of odd issues.  Calling the <code>__del__</code> on globals causes odd ordering issues, e.g., <a href="http://bugs.python.org/issue5099" rel="noreferrer">http://bugs.python.org/issue5099</a>.   Should <code>__del__</code> called even if the <code>__init__</code> fails?  See <a href="http://mail.python.org/pipermail/python-dev/2000-March/thread.html#2423" rel="noreferrer">http://mail.python.org/pipermail/python-dev/2000-March/thread.html#2423</a> for a long thread.  </li>
</ul>
<p>But, on the other hand:</p>
<ul>
<li><code>__del__</code> means you do not forget to call a close statement.  See <a href="http://eli.thegreenplace.net/2009/06/12/safely-using-destructors-in-python/" rel="noreferrer">http://eli.thegreenplace.net/2009/06/12/safely-using-destructors-in-python/</a> for a pro <code>__del__</code> viewpoint.  This is usually about freeing ctypes or some other special resource.</li>
</ul>
<p>And my pesonal reason for not liking the <code>__del__</code> function.</p>
<ul>
<li>Everytime someone brings up <code>__del__</code> it devolves into thirty messages of confusion.</li>
<li>It breaks these items in the Zen of Python:

<ul>
<li>Complex is better than complicated.</li>
<li>Special cases aren't special enough to break the rules.</li>
<li>Errors should never pass silently.</li>
<li>In the face of ambiguity, refuse the temptation to guess.</li>
<li>There should be one-- and preferably only one --obvious way to do it.</li>
<li>If the implementation is hard to explain, it's a bad idea.</li>
</ul></li>
</ul>
<p>So, find a reason not to use <code>__del__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I understood them from my early CPTS experiance:</p>
<p>Constructors: Constructors are mainly used in classes to initialze the class with values, and gives an oppurtunity to do some background work based on creation.  If you pass in values during the creation of an object, this is where you can handle assignment of those values to variables within your class.  (In this case, upon construction you are incrementing a variable that keeps track of population).</p>
<p>Destructors: Destructors cleanup a class.  In python, due to the garbage collector it's not as important as languages that can leave hanging pointers (c++).  (In this case you are decrementing the population variable on destruction of the object).   </p>
</div>
<span class="comment-copy">Please learn to use the indentation required for code examples.</span>
<span class="comment-copy">What is your question?  If you could summarize your question, it would help us answer.  If that book isn't helpful there are dozens of others that might be more helpful.</span>
<span class="comment-copy">Correct me if I'm wrong, but I think he wanted someone to explain constructors and deconstructors to him in plain English. Just a hunch.</span>
<span class="comment-copy">Like dclowd9901 said i want someone to explain constructors and deconstructors in English --- i am sorry if i was not clear -- i am very new to programming -- any help is appreciated.</span>
<span class="comment-copy">"explain" is vague -- it could mean anything.  It could mean "explain how it's implemented by the compiler" or "explain how it maps to a relational database" or "explain why this code doesn't work" or "explain why I even care about OO design".  I'm sorry for being dense, but "explain" seems open-ended and hard to answer.</span>
<span class="comment-copy">Awesome Charles -- though it was more technical but i understand it better now -- one last question -- when i create an object -- does it really ever get destoryed/Freed ? And Like you said not to use <b>del</b> would it be a better idea to just make some tiny function and get it to work as i want it in the output ? thanks again in advance</span>
<span class="comment-copy">After much thought, I'ld have to say I don't know.  If the object were not declared at the top level then it would be collected.  Top level objects are less clear.  Sorry.</span>
<span class="comment-copy">Thanks Charles - you've been a great help</span>
<span class="comment-copy">Note that currently, since python3.4+ with the introduction of <a href="https://docs.python.org/3/whatsnew/3.4.html#pep-442-safe-object-finalization" rel="nofollow noreferrer">PEP 442</a>, the GC <b>is</b> able to call <code>__del__</code> on <i>most</i> cycles. You should update your answer regarding that point.</span>
<span class="comment-copy">Sorry, would "the GC guess when to call <b>del</b> on versions of Python 3.4+" be correct?</span>
<span class="comment-copy">Thanks Hortinstein for nice and simple explanation -- so what i have writtens makes sense ?? did i use the "del rohan" - delete the object so a Destructors  is called ??</span>
<span class="comment-copy">yes del rohan will invoke the destructor</span>
<span class="comment-copy">No, <code>del rohan</code> will <i>not</i> invoke the destructor. It will decrement the reference count on the <code>rohan</code> object and remove the name from that scope. <i>If</i> the reference count hits 0 <i>then</i> the destructor will be called. It's a subtle but important distinction.</span>
<span class="comment-copy">upvoted for the correction/clarification</span>
<span class="comment-copy">hmm so if i don't use del rohan -- my destructor def __del__(self) will not get executed at all ?? asking this because earlier i did not use del at all and so def __del__(self) did not take any effect -- correct me if i am wrong - because i am not getting a clear understanding of whether this destructor will invole itself ever or not if don;t use del</span>
