<div class="post-text" itemprop="text">
<pre><code>def log(func):
    def wraper(*a, **kw):   
        return func(*a, **kw)
    return wraper

@log
def f():
    print 'f'


print locals()['f'] # - prints &lt;function wraper at 0x00CBF3F0&gt;.
</code></pre>
<p>How do you get the real f object (not decorator wrap)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't.<sup>1</sup>  Store it if you need to access it later.</p>
<pre><code>def log(func):
  def wrapper(*a, **kw):
    return func(*a, **kw)
  wrapper.func = func
  return wrapper

@log
def f():
  print 'f'

print f.func
</code></pre>
<p><sup><sup>1</sup> You could mess with the closure, but I can't recommend it.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/functools.html" rel="noreferrer">functools</a> module also provides a <code>wraps</code> decorator which makes sure that the wrapped function looks more like the real function: correct name, module, and docstring, for example.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're running python 3.2 or above, and you use <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow"><code>functools.wraps</code></a> then you will find the wrapped function on the <code>__wrapped__</code> attribute:</p>
<pre><code>from functools import wraps

def log(func):
    @wraps(func)
    def wrapper(*a, **kw):
        return func(*a, **kw)
    return wrapper

@log
def f():
    print 'f'

print f.__wrapped__
</code></pre>
<p><code>functools.wraps</code>is a convenience function for decorating a decorated function with the function that does all the work, including adding this attribute <a href="https://docs.python.org/3/library/functools.html#functools.update_wrapper" rel="nofollow"><code>functools.update_wrapper</code></a>.</p>
</div>
<span class="comment-copy">+1, learned something new today ;-)</span>
<span class="comment-copy">+1 This should probably be the accepted answer as <code>functools.wraps</code> does more than just setting <code>wrapper.func = func</code>.</span>
<span class="comment-copy">Actually, wraps doesn't seem to do precisely what the OP wanted: it doesn't preserve the original function somewhere.  But it may be that the OP didn't want the function, just needed an attribute off of it.</span>
