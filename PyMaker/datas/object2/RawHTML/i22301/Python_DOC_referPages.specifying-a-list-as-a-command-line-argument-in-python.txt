<div class="post-text" itemprop="text">
<p>I am using getopt to process a command line optional argument, which should accept a list. Something like this: </p>
<pre><code>foo.py --my_list=[1, 2, 3, 4,5] 
</code></pre>
<p>But this trims everything after "[1,"</p>
<p>My questions are:
A) Is there a way to specify a list without converting it into a string? (using getopt) </p>
<p>B) If I am to convert the list into a string, how to convert this list to a string? e.g. something like  mylist.split("?") to get rid of square brackets ?? is there a better way?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two options that I can think of:</p>
<ul>
<li>Use <a href="http://docs.python.org/library/optparse.html" rel="noreferrer">optparse</a>, and use <a href="http://docs.python.org/library/optparse.html#other-actions" rel="noreferrer"><code>append</code></a> action to specify what you want to do as: <code>foo.py --my_list=1 --my_list=2 ...</code>.</li>
<li>Specify your commandline as <code>foo.py --my_list='1,2,3,4,5'</code>, and then use <code>x.split(',')</code> to get your values in a list.   You can use <code>getopt</code> or <code>optparse</code> for this method.</li>
</ul>
<p>The advantage of the first method is that you can get integer values in the list directly, at the expense of the commandline being longer (but you can add a single-charecter option for <code>--my_list</code> if you want).  The advantage of the second is shorter command line, but after the <code>split()</code>, you need to convert the string values <code>'1'</code>, <code>'2'</code>, etc., to integers (pretty easy as well).</p>
</div>
<div class="post-text" itemprop="text">
<p>If I can't use a standard parser (optparse or argparse) to my application then I use the ast.literal_eval function to parse input arguments of type list as follows:</p>
<pre><code>import sys, ast

inputList = ast.literal_eval( sys.argv[1] )
print type( inputList )
print inputList
</code></pre>
<p>Let suppose that this code is stored in testParser.py file. By executing the script:</p>
<pre><code>$ python testParser.py  "[1,2,3,4, [123, 456, 789], 'asdasd']"
</code></pre>
<p>we get the following output:</p>
<pre><code>&lt;type 'list'&gt;
[1, 2, 3, 4, [123, 456, 789], 'asdasd']
</code></pre>
<p>So, using the secure enough ast.literal_eval function and inserting the list as a string of code we have the desirable result. </p>
<p>Useful links:</p>
<p><a href="https://stackoverflow.com/questions/15197673/using-pythons-eval-vs-ast-literal-eval">Using python's eval() vs. ast.literal_eval()?</a></p>
<p><a href="http://docs.python.org/2/library/functions.html?highlight=eval#eval" rel="nofollow noreferrer">http://docs.python.org/2/library/functions.html?highlight=eval#eval</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you should just enclose the argument in quotes?</p>
<pre><code>foo.py "--my_list=[1, 2, 3, 4,5]"
</code></pre>
<p>Otherwise every space will be treated as a separator for arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>An updated way is to use the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> library and add the list as a command line argument. This way, you don't have to do any manual parsing.</p>
<p>Example:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument(
        "-values",
        nargs="*",  # expects ≥ 0 arguments
        type=int,
        default=[35, 40, 50, 60, 70, 80, 90],  # default list if no arg value
    )
</code></pre>
<p>Which you would then call like this:</p>
<pre><code>python3 someprogram.py -values 1 2 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the python optparse help page:
"</p>
<pre><code>parser.add_option("-f")
parser.add_option("-p", type="float", nargs=3, dest="point")
</code></pre>
<p>As it parses the command line</p>
<pre><code>-f foo.txt -p 1 -3.5 4 -fbar.txt
</code></pre>
<p>optparse will set</p>
<pre><code>options.f = "foo.txt"
options.point = (1.0, -3.5, 4.0)
options.f = "bar.txt"
</code></pre>
<p>"</p>
</div>
<div class="post-text" itemprop="text">
<p>I have been redirected from the dup question:<br/>
<a href="https://stackoverflow.com/questions/36926077/how-to-pass-an-array-to-python-through-command-line/36926259#36926259">How to pass an array to python through command line - Stack Overflow</a></p>
<p>I’m answering that question:<br/>
The arguments on the command line are strings, they're not parsed like literals in the program.<br/>
argv construct the strings automatically to a list from command line arguments (as separated by spaces), in short, 
<code>sys.argv</code> is a list.</p>
<pre><code>    from sys import argv
    cmd = "arr = {sys.argv[1]}".format(argv)
    exec(cmd)
    print(arr[2])
</code></pre>
</div>
<span class="comment-copy">as this post is 5 years old, <code>optparse</code> is now deprecated for <code>argparse</code></span>
<span class="comment-copy">What do you mean by 'use append action'? It sounds exciting but not sure what you are talking about.</span>
<span class="comment-copy">@MonicaHeddneck See <a href="https://docs.python.org/3/library/optparse.html#standard-option-actions" rel="nofollow noreferrer">docs.python.org/3/library/optparse.html#standard-option-actions</a> - they have an example of the "append" action: <code>parser.add_option("-t", "--tracks", action="append", type="int")</code>.</span>
<span class="comment-copy">And that's not because of python but due to the shell which parses the arguments and provides them to the python program.</span>
<span class="comment-copy">Partly true. On Windows the command line is just a string. And even UNIX does not have any special data structure that passes arguments to the program, it's still only a string. However, it's a widely implemented convention, but not universal. And yes, the C runtime has specifications for that.</span>
<span class="comment-copy">You can also do <code>--my-list="[1, 2, 3, 4,5]"</code>.  I usually use this form because it's usually something like <code>--my-list="$MY_LIST"</code>.</span>
<span class="comment-copy">Ah, I thought so much already but wasn't familiar enough with getopt to know whether that would work.</span>
