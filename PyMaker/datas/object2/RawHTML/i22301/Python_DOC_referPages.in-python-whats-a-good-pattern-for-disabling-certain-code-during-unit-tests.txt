<div class="post-text" itemprop="text">
<p>In general I want to disable as little code as possible, and I want it to be explicit: I don't want the code being tested to decide whether it's a test or not, I want the test to tell that code "hey, BTW, I'm running a unit test, can you please not make your call to solr, instead can you please stick what you would send to solr in this spot so I can check it". I have my ideas but I don't like any of them, I am hoping that there's a good pythonic way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Michael Foord's <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow noreferrer">Mock</a>
in your unit test do this:</p>
<pre><code>from mock import Mock

class Person(object):
    def __init__(self, name):
        super(Person, self).__init__()
        self.name = name

    def say(self, str):
        print "%s says \"%s\"" % (self.name, str)


...

#In your unit test....
#create the class as normal
person = Person("Bob")
#now mock all of person's methods/attributes
person = Mock(spec=person)
#talkto is some function you are testing
talkTo(person)
#make sure the Person class's say method was called
self.assertTrue(person.say.called, "Person wasn't asked to talk")

#make sure the person said "Hello"
args = ("Hello")
keywargs = {}
self.assertEquals(person.say.call_args, (args, keywargs), "Person did not say hello")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://en.wikipedia.org/wiki/Mock_object" rel="nofollow noreferrer">Mock objects</a> to intercept the method calls that you do not want to execute. 
E.g. You have some class <code>A</code>, where you don't want method <code>no()</code> to be called during a test.</p>
<pre><code>class A:
  def do(self):
    print('do')
  def no(self):
    print('no')
</code></pre>
<p>A mock object could inherit from <code>A</code> and override <code>no()</code> to do nothing.</p>
<pre><code>class MockA(A):
  def no(self):
    pass
</code></pre>
<p>You would then create <code>MockA</code> objects instead of <code>A</code>s in your test code. Another way to do mocking would be to have <code>A</code> and <code>MockA</code> implement a common interface say <code>InterfaceA</code>. </p>
<p>There are tons of mocking frameworks available. See <a href="https://stackoverflow.com/questions/98053/what-is-your-favorite-python-mocking-library">StackOverflow: Python mocking frameworks</a>.</p>
<p>In particular see: <a href="http://google-opensource.blogspot.com/2008/07/check-out-mox-our-mock-object-framework.html" rel="nofollow noreferrer">Google's Python mocking framework</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The big problem that I was having was with the mechanics of the dependency injection. I have now figured that part out.</p>
<p>I need to import the module in the exact same way in both places to successfully inject the new code. For example, if I have the following code that I want to disable:</p>
<pre><code>from foo_service.foo import solr
solr.add(spam)
</code></pre>
<p>I can't seem to do this in the in my test runner:</p>
<pre><code>from foo import solr
solr = mock_object
</code></pre>
<p>The python interpreter must be treating the modules <code>foo_service.foo</code> and <code>foo</code> as different entries. I changed <code>from foo import solr</code> to the more explicit <code>from foo_service.foo import solr</code> and my mock object was successfully injected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Typically when something like this arises you use Monkey Patching (also called Duck Punching) to achieve the desired results. Check out <a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow noreferrer">this link</a> to learn more about Monkey Patching.</p>
<p>In this case, for example, you would overwrite solr to just print the output you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two ways to do this is no <sub>,or minimal in the case of <a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection">DI</a>,</sub> modifications to your source code</p>
<ul>
<li><a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection">Dependency injection</a></li>
<li><a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="nofollow noreferrer">Monkey patching</a></li>
</ul>
<p>The <a href="http://mail.python.org/pipermail/python-dev/2008-January/076194.html" rel="nofollow noreferrer">cleanest</a> way is using <a href="http://wiki.python.org/moin/DependencyInjectionPattern" rel="nofollow noreferrer">dependency injection</a>, but <a href="http://www.siafoo.net/article/52#modifying-classes-after-creation" rel="nofollow noreferrer">I don't really</a> <a href="http://wiki.python.org/moin/DependencyInjectionPattern" rel="nofollow noreferrer">like extensive monkeypatching</a>, and there are some things that are non-possible/difficult to do that <a href="http://code.activestate.com/recipes/413268-dependency-injection-the-python-way/" rel="nofollow noreferrer">dependency injection</a> makes easy.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know it's the typical use case for mock objects, but that's also an old argument... are Mock objects necessary at all or are they <strong>evil</strong> ?</p>
<p>I'm on the side of those who believe mocks are <strong>evil</strong> and would try to avoid changing tested code at all. I even believe such need to modify tested code is a code smell...</p>
<p>If you wish to change or intercept an internal function call for testing purpose you could also make this function an explicit external dependency set at instanciation time that would be provided both by your production code and test code. If you do that the problem disappear and you end up with a cleaner interface.</p>
<p>Note that doing that there is not need to change the tested code at all neither internally nor by the test being performed.</p>
</div>
<span class="comment-copy">Wow, Mock is awesome! Thanks. In my C++/Java days I used to spend way too much time writing mock classes by hand.</span>
<span class="comment-copy">Yea, no kidding!  I just learned about this stuff reading this question.. definitely adding it to the book of tricks</span>
<span class="comment-copy">Since Python 3.3, there is a module <code>unittest.mock</code> <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">in the standard library</a></span>
<span class="comment-copy">Subclassing to implement mocking potentially brings along all kinds of things you don't need. Also, your methods don't take the required first argument</span>
<span class="comment-copy">Wow, I'm really digging Michael Foord's Mock.  It's beautiful how easy it is to create Mock objects in python.  If you've had to do this manually in C++ using interface's and inheritance you know how much of a pain this could be. EDIT: BTW, this answer doesn't really do Mock's correctly, but points the way to what you may be looking for.  See [<a href="http://www.voidspace.org.uk/python/mock/examples.html#creating-a-mock-from-an-existing-object]" rel="nofollow noreferrer">voidspace.org.uk/python/mock/â€¦</a></span>
<span class="comment-copy">@Mike Graham, thanks for pointing out the missing argument. I'm not saying subclassing is the best way to do Mocking, I was just giving an example.</span>
