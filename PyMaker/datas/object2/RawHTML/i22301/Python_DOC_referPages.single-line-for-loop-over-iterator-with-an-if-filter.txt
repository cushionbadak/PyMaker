<div class="post-text" itemprop="text">
<p>Silly question:<br/>
I have a simple for loop followed by a simple if statement:  </p>
<pre><code>for airport in airports:
    if airport.is_important:
</code></pre>
<p>and I was wondering if I can write this as a single line somehow.<br/>
So, yes, I can do this:  </p>
<pre><code>for airport in (airport for airport in airports if airport.is_important):
</code></pre>
<p>but it reads so silly and redundant (<code>for airport in airport for airport in airports...</code>).<br/>
Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no shorter way. Usually, you will even break it into two lines :</p>
<pre><code>important_airports = (airport for airport in airports if airport.is_important)
for airport in important_airports:
    # do stuff
</code></pre>
<p>This is more flexible, easier to read and still don't consume much memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do</p>
<pre><code>for airport in filter(lamdba x: x.is_important, airports):
    # do stuff...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a negative guard on the loop. It's readable, and doesn't introduce an extra level of indentation.</p>
<pre><code>for airport in airports:
    if not airport.is_important: continue
    &lt;body of loop&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Mabe this, but it's more or less the same verbose...</p>
<pre><code>import itertools

for airport in itertools.ifilter(lambda x: x.is_important, airports):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a design philosophy of python.  If it takes you too many words to put it on one line, it should be broken into a few lines to help the person who comes after you.  List and generator expressions are more for transforming iterables in-place -- making more readable forms of <code>map</code> and <code>filter</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an alternative to some of the other filter versions:</p>
<pre><code>from operator import attrgetter as attr
for airport in filter(attr('is_important'), airports):
    ...
</code></pre>
<p>This has the advantages of being pretty concise and also letting you use dot notation attr('first_class.is_full').</p>
<p>You could also put something like that (or a version using a list comprehension) into a utility function like filter_by_attr. Then you could do:</p>
<pre><code>for airport in filter_by_attr(airports, 'is_important'):
    ...
</code></pre>
<p>I still think e-satis is right to put it in a new variable no matter the method you use, though. It is just clearer that way, especially if the use doesn't exactly match the name of the attribute in question (or the the criteria is more complex).</p>
<p>My only note on that would be that if you find yourself using this in several places, perhaps you should make airports a special collection with 'important_airports' being a @property which returns the filtered collection. Or some sort other abstraction to hide away the filtering (like a service call).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehension (only if airports is a list of objects):</p>
<pre><code>for airport in [a for a in airports if a.is_important]:
</code></pre>
</div>
<span class="comment-copy">If you don't like having so many "airport"s in one line, swap three of them for a single character: <code>for airport in (x for x in airports if x.is_important):</code></span>
<span class="comment-copy">I wonder why Python doesn't have <code>for airport in airports if airport.is_important:</code>, it seems useful and clear.</span>
<span class="comment-copy">You could also use <code>if not airport.is_important: continue</code>, to avoid indentation. But I like the accepted answer better, so I don't really know why I wrote this comment.</span>
<span class="comment-copy">+1: Just write what you mean.  1-liner Code Golf is not a good practice.</span>
<span class="comment-copy">Thank you - I really like this answer. While not a one liner, it 'captures the spirit' of the one liner in that there is a single indentation (am I allowed to say I hate indentations while still loving Python???).   No need for extra imports and by using a proper variable name the second line is perfectly readable (who cares how I implemented 'important airports').   This is my answer.   Thanks again for the prompt reply!</span>
<span class="comment-copy">@TalWeiss Of course you are allowed to hate indentations, I do too!</span>
<span class="comment-copy">Depending on the size of your list, or rather the number of important airports, I think this is the best way. Its easy to read, once you've figured out <code>lambda</code>.</span>
<span class="comment-copy">Since Python 2.4 (circa 2002) you can use a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> and write <code>for airport in (airport for airport in airports if airport.is_important):</code> which makes using <code>filter()</code> for this purpose somewhat obsolete.</span>
<span class="comment-copy">Yes this is the best I could think of too.</span>
<span class="comment-copy">FYI - <a href="http://codepad.org/e9pOMxV8" rel="nofollow noreferrer">codepad.org/e9pOMxV8</a></span>
<span class="comment-copy">@tusbar so what? the op is asking for more readable alternatives, not more efficient ones... and the difference is negligible (~ +-20%), if we'd care about that margins we would be programming in C, not in Python :-p</span>
<span class="comment-copy">Actually, thank you for that @tusbar! I didn't ask for it but it is very informative (as someone who often optimizes code) and @fortran: these small differences add up very quickly in a big project. I added the answer I liked most to the snippet and it is actually faster!: <a href="http://codepad.org/CN5jsYhX" rel="nofollow noreferrer">codepad.org/CN5jsYhX</a></span>
<span class="comment-copy">this is completely wrong, it doesn't do what the OP is asking for, it iterates over the boolean values... basically, it's a map, not a filter!</span>
<span class="comment-copy">It will iterate over a list of bools.</span>
<span class="comment-copy">yes you're correct. Just fixed it :)</span>
<span class="comment-copy">@rogeriopvl: your corrected version would then be a less efficient copy of the code the OP started with (and wanted an alternative for).</span>
<span class="comment-copy">@rogeriopvl now you have the same version as the op, only with a list comprehension instead of an iterator expression</span>
