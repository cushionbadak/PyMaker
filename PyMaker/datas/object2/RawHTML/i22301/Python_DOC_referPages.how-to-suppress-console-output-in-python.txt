<div class="post-text" itemprop="text">
<p>I'm using Pygame/SDL's joystick module to get input from a gamepad. Every time I call its <code>get_hat()</code> method it prints to the console. This is problematic since I use the console to help me debug and now it gets flooded with <code>SDL_JoystickGetHat value:0:</code> 60 times every second. Is there a way I can disable this? Either through an option in Pygame/SDL or suppress console output while the function calls? I saw no mention of this in the Pygame documentation.</p>
<p><strong>edit:</strong> This turns out to be due to debugging being turned on when the SDL library was compiled.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the relevant block of code from joystick.c (via SVN at <a href="http://svn.seul.org/viewcvs/viewvc.cgi/trunk/src/joystick.c?view=markup&amp;revision=2652&amp;root=PyGame" rel="nofollow noreferrer">http://svn.seul.org/viewcvs/viewvc.cgi/trunk/src/joystick.c?view=markup&amp;revision=2652&amp;root=PyGame</a>)</p>
<pre><code>    value = SDL_JoystickGetHat (joy, _index);
#ifdef DEBUG
    printf("SDL_JoystickGetHat value:%d:\n", value);
#endif
    if (value &amp; SDL_HAT_UP) {
</code></pre>
<p>Looks like a problem with having debugging turned on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness, here's a nice solution from <a href="http://thesmithfam.org/blog/2012/10/25/temporarily-suppress-console-output-in-python/">Dave Smith's blog</a>:</p>
<pre><code>from contextlib import contextmanager
import sys, os

@contextmanager
def suppress_stdout():
    with open(os.devnull, "w") as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:  
            yield
        finally:
            sys.stdout = old_stdout
</code></pre>
<p>With this, you can use context management wherever you want to suppress output:</p>
<pre><code>print("Now you see it")
with suppress_stdout():
    print("Now you don't")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get around this by assigning the standard out/error (I don't know which one it's going to) to the null device. In Python, the standard out/error files are <code>sys.stdout</code>/<code>sys.stderr</code>, and the null device is <code>os.devnull</code>, so you do</p>
<pre><code>sys.stdout = os.devnull
sys.stderr = os.devnull
</code></pre>
<p>This should disable these error messages completely. Unfortunately, this will also disable all console output. To get around this, disable output right before calling the <code>get_hat()</code> the method, and then restore it by doing</p>
<pre><code>sys.stdout = sys.__stdout__
sys.stderr = sys.__stderr__
</code></pre>
<p>which restores standard out and error to their original value.</p>
</div>
<div class="post-text" itemprop="text">
<p>To complete charles's answer, there are two context managers built in to python, <code>redirect_stdout</code> and <code>redirect_stderr</code> which you can use to redirect and or suppress a commands output to a file or <code>StringIO</code> variable.</p>
<pre><code>import contextlib

with contextlib.redirect_stdout(None):
    do_thing()
</code></pre>
<p>For a more complete explanation read <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer">the docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I use pythonw.exe (on Windows) instead of python.exe.
In other OSes, you could also redirect output to /dev/nul.
And in order to still see my debug output, I am using the logging module.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/users/776788/demolishun">Demolishun</a> mentions in an <a href="https://stackoverflow.com/questions/7012444/disable-the-pygame-console-output">answer</a> to a closed duplicate question, there is a <a href="https://stackoverflow.com/questions/7012444/disable-the-pygame-console-output">thread</a> talking about this issue. The thread is from August of 2009 and one of the developers says <a href="http://archives.seul.org/pygame/users/Aug-2009/msg00310.html" rel="nofollow noreferrer">the debug code was left in on accident</a>. I had installed Pygame 1.9.1 from pip and the debug output is still present.</p>
<p>To get around it for now, I downloaded the source from pygame.org, removed the print statements from src/joystick.c and compiled the code.</p>
<p>I am on OS X 10.7.5 for what it's worth.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a Debian or Ubuntu machine you can just simply recompile pygame without the messages. </p>
<pre><code>cd /tmp
sudo apt-get build-dep pygame
apt-get source pygame
vim pygame-1.9.1release+dfsg/src/joystick.c
# search for the printf("SDL.. messages and put a // in front
apt-get source --compile pygame
sudo dpkg -i python-pygame_1.9.1release+dfsg-9ubuntu1_amd64.deb
</code></pre>
<p>Greetings
Max</p>
</div>
<span class="comment-copy">Now I'm curious what platform you are using (Linux distro?), and what package you are using? Or did you compile it yourself?</span>
<span class="comment-copy">This was a long time ago, but I was using Windows, Python 2.6, and Pygame 1.9 (which includes SDL). I had just gone with their Windows installers and everything was already compiled.</span>
<span class="comment-copy">How would I disable SDL debugging though Python? Google tells me the environment variable is <code>SDL_DEBUG</code> but inserting <code>os.environ['SDL_DEBUG'] = '0'</code> appears to have no effect.</span>
<span class="comment-copy">@jackson that's a compile time debug option for SDL. The message is printing because when your SDL library was compiled, the DEBUG symbol was defined.</span>
<span class="comment-copy">Ah, okay. Thanks for the help!</span>
<span class="comment-copy">I wasn't aware of this technique before. It appears to be what I want, but when I try using it the get_hat() function continues to print to the console. Could this be an issue with SDL?</span>
<span class="comment-copy">Using place holders for the original sys.stdout and sys.stderr to use when restoring the stdout will extend this solution to work in situations where a 'non standard' stdout is already in place and needs to be retained after suppression. eg for use in the QGIS python console.</span>
<span class="comment-copy">the first bit works, however even with the 'restoring' bit of code I still don't get any console output after it?  I'm on Ubuntu 14.04 with 3.4.3</span>
<span class="comment-copy">thanks for your solution, my problem is that output is slowing down my code, will this still lead to the same slowdown?</span>
<span class="comment-copy"><code>os.devnull</code> happens to be a string in python 3.6 on linux</span>
<span class="comment-copy">Thanks for the tip. You can also add a print statement as the parameter in the redirect_stdout(). <code>with redirect_stdout(print('Worked!')): do_thing()</code></span>
<span class="comment-copy">@myidealab Since the print statement will return None, isn't that the same as just adding one before the with?</span>
