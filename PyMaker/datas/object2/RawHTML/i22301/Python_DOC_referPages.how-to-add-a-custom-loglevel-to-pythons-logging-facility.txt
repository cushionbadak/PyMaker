<div class="post-text" itemprop="text">
<p>I'd like to have loglevel TRACE (5) for my application, as I don't think that <code>debug()</code> is sufficient. Additionally <code>log(5, msg)</code> isn't what I want. How can I add a custom loglevel to a Python logger?</p>
<p>I've a <code>mylogger.py</code> with the following content:</p>
<pre><code>import logging

@property
def log(obj):
    myLogger = logging.getLogger(obj.__class__.__name__)
    return myLogger
</code></pre>
<p>In my code I use it in the following way:</p>
<pre><code>class ExampleClass(object):
    from mylogger import log

    def __init__(self):
        '''The constructor with the logger'''
        self.log.debug("Init runs")
</code></pre>
<p>Now I'd like to call <code>self.log.trace("foo bar")</code></p>
<p>Thanks in advance for your help.</p>
<p><strong>Edit</strong> (Dec 8th 2016): I changed the accepted answer to <a href="https://stackoverflow.com/a/13638084/600110">pfa's</a> which is, IMHO, an excellent solution based on the very good proposal from Eric S.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Eric S.</p>
<p>Eric S.'s answer is excellent, but I learned by experimentation that this will always cause messages logged at the new debug level to be printed -- regardless of what the log level is set to. So if you make a new level number of 9, if you call setLevel(50), the lower level messages will erroneously be printed. To prevent that from happening, you need another line inside the "debugv" function to check if the logging level in question is actually enabled.</p>
<p>Fixed example that checks if the logging level is enabled:</p>
<pre><code>import logging
DEBUG_LEVELV_NUM = 9 
logging.addLevelName(DEBUG_LEVELV_NUM, "DEBUGV")
def debugv(self, message, *args, **kws):
    if self.isEnabledFor(DEBUG_LEVELV_NUM):
        # Yes, logger takes its '*args' as 'args'.
        self._log(DEBUG_LEVELV_NUM, message, args, **kws) 
logging.Logger.debugv = debugv
</code></pre>
<p>If you look at the code for <code>class Logger</code> in <code>logging.__init__.py</code> for Python 2.7, this is what all the standard log functions do (.critical, .debug, etc.).</p>
<p>I apparently can't post replies to others' answers for lack of reputation... hopefully Eric will update his post if he sees this. =)</p>
</div>
<div class="post-text" itemprop="text">
<p>I took the "avoid seeing lambda" answer and had to modify where the log_at_my_log_level was being added.  I too saw the problem that Paul did "I don't think this works. Don't you need logger as the first arg in log_at_my_log_level?"  This worked for me</p>
<pre><code>import logging
DEBUG_LEVELV_NUM = 9 
logging.addLevelName(DEBUG_LEVELV_NUM, "DEBUGV")
def debugv(self, message, *args, **kws):
    # Yes, logger takes its '*args' as 'args'.
    self._log(DEBUG_LEVELV_NUM, message, args, **kws) 
logging.Logger.debugv = debugv
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This question is rather old, but I just dealt with the same topic and found a way similiar to those already mentioned which appears a little cleaner to me. This was tested on 3.4, so I'm not sure whether the methods used exist in older versions:</p>
<pre><code>from logging import getLoggerClass, addLevelName, setLoggerClass, NOTSET

VERBOSE = 5

class MyLogger(getLoggerClass()):
    def __init__(self, name, level=NOTSET):
        super().__init__(name, level)

        addLevelName(VERBOSE, "VERBOSE")

    def verbose(self, msg, *args, **kwargs):
        if self.isEnabledFor(VERBOSE):
            self._log(VERBOSE, msg, args, **kwargs)

setLoggerClass(MyLogger)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combining all of the existing answers with a bunch of usage experience, I think that I have come up with a list of all the things that need to be done to ensure completely seamless usage of the new level. The steps below assume that you are adding a new level <code>TRACE</code> with value <code>logging.DEBUG - 5 == 5</code>:</p>
<ol>
<li><code>logging.addLevelName(logging.DEBUG - 5, 'TRACE')</code> needs to be invoked to get the new level registered internally so that it can be referenced by name.</li>
<li>The new level needs to be added as an attribute to <code>logging</code> itself for consistency: <code>logging.TRACE = logging.DEBUG - 5</code>.</li>
<li>A method called <code>trace</code> needs to be added to the <code>logging</code> module. It should behave just like <code>debug</code>, <code>info</code>, etc.</li>
<li>A method called <code>trace</code> needs to be added to the currently configured logger class. Since this is not 100% guaranteed to be <code>logging.Logger</code>, use <code>logging.getLoggerClass()</code> instead.</li>
</ol>
<p>All the steps are illustrated in the method below:</p>
<pre><code>def addLoggingLevel(levelName, levelNum, methodName=None):
    """
    Comprehensively adds a new logging level to the `logging` module and the
    currently configured logging class.

    `levelName` becomes an attribute of the `logging` module with the value
    `levelNum`. `methodName` becomes a convenience method for both `logging`
    itself and the class returned by `logging.getLoggerClass()` (usually just
    `logging.Logger`). If `methodName` is not specified, `levelName.lower()` is
    used.

    To avoid accidental clobberings of existing attributes, this method will
    raise an `AttributeError` if the level name is already an attribute of the
    `logging` module or if the method name is already present 

    Example
    -------
    &gt;&gt;&gt; addLoggingLevel('TRACE', logging.DEBUG - 5)
    &gt;&gt;&gt; logging.getLogger(__name__).setLevel("TRACE")
    &gt;&gt;&gt; logging.getLogger(__name__).trace('that worked')
    &gt;&gt;&gt; logging.trace('so did this')
    &gt;&gt;&gt; logging.TRACE
    5

    """
    if not methodName:
        methodName = levelName.lower()

    if hasattr(logging, levelName):
       raise AttributeError('{} already defined in logging module'.format(levelName))
    if hasattr(logging, methodName):
       raise AttributeError('{} already defined in logging module'.format(methodName))
    if hasattr(logging.getLoggerClass(), methodName):
       raise AttributeError('{} already defined in logger class'.format(methodName))

    # This method was inspired by the answers to Stack Overflow post
    # http://stackoverflow.com/q/2183233/2988730, especially
    # http://stackoverflow.com/a/13638084/2988730
    def logForLevel(self, message, *args, **kwargs):
        if self.isEnabledFor(levelNum):
            self._log(levelNum, message, args, **kwargs)
    def logToRoot(message, *args, **kwargs):
        logging.log(levelNum, message, *args, **kwargs)

    logging.addLevelName(levelNum, levelName)
    setattr(logging, levelName, levelNum)
    setattr(logging.getLoggerClass(), methodName, logForLevel)
    setattr(logging, methodName, logToRoot)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Who started the bad practice of using internal methods (<code>self._log</code>) and why is each answer based on that?! The pythonic solution would be to use <code>self.log</code> instead so you don't have to mess with any internal stuff:</p>
<pre><code>import logging

SUBDEBUG = 5
logging.addLevelName(SUBDEBUG, 'SUBDEBUG')

def subdebug(self, message, *args, **kws):
    self.log(SUBDEBUG, message, *args, **kws) 
logging.Logger.subdebug = subdebug

logging.basicConfig()
l = logging.getLogger()
l.setLevel(SUBDEBUG)
l.subdebug('test')
l.setLevel(logging.DEBUG)
l.subdebug('test')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I find it easier to create a new attribute for the logger object that passes the log() function. I think the logger module provides the addLevelName() and the log() for this very reason. Thus no subclasses or new method needed. </p>
<pre><code>import logging

@property
def log(obj):
    logging.addLevelName(5, 'TRACE')
    myLogger = logging.getLogger(obj.__class__.__name__)
    setattr(myLogger, 'trace', lambda *args: myLogger.log(5, *args))
    return myLogger
</code></pre>
<p>now</p>
<pre><code>mylogger.trace('This is a trace message')
</code></pre>
<p>should work as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you'll have to subclass the <code>Logger</code> class and add a method called <code>trace</code> which basically calls <code>Logger.log</code> with a level lower than <code>DEBUG</code>. I haven't tried this but this is what the <a href="http://docs.python.org/library/logging.html#loggers" rel="noreferrer">docs indicate</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Tips for creating a custom logger:</p>
<ol>
<li>Do not use <code>_log</code>, use <code>log</code> (you don't have to check <code>isEnabledFor</code>)</li>
<li>the logging module should be the one creating instance of the custom logger since it does some magic in <code>getLogger</code>, so you will need to set the class via <code>setLoggerClass</code></li>
<li>You do not need to define <code>__init__</code> for the logger, class if you are not storing anything</li>
</ol>
<pre class="lang-python prettyprint-override"><code># Lower than debug which is 10
TRACE = 5
class MyLogger(logging.Logger):
    def trace(self, msg, *args, **kwargs):
        self.log(TRACE, msg, *args, **kwargs)
</code></pre>
<p>When calling this logger use <code>setLoggerClass(MyLogger)</code> to make this the default logger from <code>getLogger</code></p>
<pre><code>logging.setLoggerClass(MyLogger)
log = logging.getLogger(__name__)
# ...
log.trace("something specific")
</code></pre>
<p>You will need to <code>setFormatter</code>, <code>setHandler</code>, and <code>setLevel(TRACE)</code> on the <code>handler</code> and on the <code>log</code> itself to actually se this low level trace</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me:</p>
<pre><code>import logging
logging.basicConfig(
    format='  %(levelname)-8.8s %(funcName)s: %(message)s',
)
logging.NOTE = 32  # positive yet important
logging.addLevelName(logging.NOTE, 'NOTE')      # new level
logging.addLevelName(logging.CRITICAL, 'FATAL') # rename existing

log = logging.getLogger(__name__)
log.note = lambda msg, *args: log._log(logging.NOTE, msg, args)
log.note('school\'s out for summer! %s', 'dude')
log.fatal('file not found.')
</code></pre>
<p>The lambda/funcName issue is fixed with logger._log as @marqueed pointed out.  I think using lambda looks a bit cleaner, but the drawback is that it can't take keyword arguments.  I've never used that myself, so no biggie.</p>
<pre>
  NOTE     setup: school's out for summer! dude
  FATAL    setup: file not found.
</pre>
</div>
<div class="post-text" itemprop="text">
<p>In my experience, this is the full solution the the op's problem... to avoid seeing "lambda" as the function in which the message is emitted, go deeper:</p>
<pre><code>MY_LEVEL_NUM = 25
logging.addLevelName(MY_LEVEL_NUM, "MY_LEVEL_NAME")
def log_at_my_log_level(self, message, *args, **kws):
    # Yes, logger takes its '*args' as 'args'.
    self._log(MY_LEVEL_NUM, message, args, **kws)
logger.log_at_my_log_level = log_at_my_log_level
</code></pre>
<p>I've never tried working with a standalone logger class, but I think the basic idea is the same (use _log).</p>
</div>
<div class="post-text" itemprop="text">
<p>Addition to Mad Physicists example to get file name and line number correct:</p>
<pre><code>def logToRoot(message, *args, **kwargs):
    if logging.root.isEnabledFor(levelNum):
        logging.root._log(levelNum, message, args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While we have already plenty of correct answers, the following is in my opinion more pythonic:</p>
<pre><code>import logging

from functools import partial, partialmethod

logging.TRACE = 5
logging.addLevelName(logging.TRACE, 'TRACE')
logging.Logger.trace = partialmethod(logging.Logger.log, logging.TRACE)
logging.trace = partial(logging.log, logging.TRACE)
</code></pre>
<p>If you want to use <code>mypy</code> on your code, it is recommended to add <code># type: ignore</code> to suppress warnings from adding attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>As alternative to adding an extra method to the Logger class I would recommend using the <code>Logger.log(level, msg)</code> method.</p>
<pre><code>import logging

TRACE = 5
logging.addLevelName(TRACE, 'TRACE')
FORMAT = '%(levelname)s:%(name)s:%(lineno)d:%(message)s'


logging.basicConfig(format=FORMAT)
l = logging.getLogger()
l.setLevel(TRACE)
l.log(TRACE, 'trace message')
l.setLevel(logging.DEBUG)
l.log(TRACE, 'disabled trace message')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm confused; with python 3.5, at least, it just works:</p>
<pre><code>import logging


TRACE = 5
"""more detail than debug"""

logging.basicConfig()
logging.addLevelName(TRACE,"TRACE")
logger = logging.getLogger('')
logger.debug("n")
logger.setLevel(logging.DEBUG)
logger.debug("y1")
logger.log(TRACE,"n")
logger.setLevel(TRACE)
logger.log(TRACE,"y2")
</code></pre>
<p>output:</p>
<blockquote>
<p>DEBUG:root:y1 </p>
<p>TRACE:root:y2</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>based on pinned answer, 
i wrote a little method which automaticaly create new logging levels</p>
<pre><code>def set_custom_logging_levels(config={}):
    """
        Assign custom levels for logging
            config: is a dict, like
            {
                'EVENT_NAME': EVENT_LEVEL_NUM,
            }
        EVENT_LEVEL_NUM can't be like already has logging module
        logging.DEBUG       = 10
        logging.INFO        = 20
        logging.WARNING     = 30
        logging.ERROR       = 40
        logging.CRITICAL    = 50
    """
    assert isinstance(config, dict), "Configuration must be a dict"

    def get_level_func(level_name, level_num):
        def _blank(self, message, *args, **kws):
            if self.isEnabledFor(level_num):
                # Yes, logger takes its '*args' as 'args'.
                self._log(level_num, message, args, **kws) 
        _blank.__name__ = level_name.lower()
        return _blank

    for level_name, level_num in config.items():
        logging.addLevelName(level_num, level_name.upper())
        setattr(logging.Logger, level_name.lower(), get_level_func(level_name, level_num))

</code></pre>
<p>config may smth like that:</p>
<pre><code>new_log_levels = {
    # level_num is in logging.INFO section, that's why it 21, 22, etc..
    "FOO":      21,
    "BAR":      22,
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case anyone wants an automated way to add a new logging level to the logging module (or a copy of it) dynamically, I have created this function, expanding @pfa's answer:</p>
<pre><code>def add_level(log_name,custom_log_module=None,log_num=None,
                log_call=None,
                   lower_than=None, higher_than=None, same_as=None,
              verbose=True):
    '''
    Function to dynamically add a new log level to a given custom logging module.
    &lt;custom_log_module&gt;: the logging module. If not provided, then a copy of
        &lt;logging&gt; module is used
    &lt;log_name&gt;: the logging level name
    &lt;log_num&gt;: the logging level num. If not provided, then function checks
        &lt;lower_than&gt;,&lt;higher_than&gt; and &lt;same_as&gt;, at the order mentioned.
        One of those three parameters must hold a string of an already existent
        logging level name.
    In case a level is overwritten and &lt;verbose&gt; is True, then a message in WARNING
        level of the custom logging module is established.
    '''
    if custom_log_module is None:
        import imp
        custom_log_module = imp.load_module('custom_log_module',
                                            *imp.find_module('logging'))
    log_name = log_name.upper()
    def cust_log(par, message, *args, **kws):
        # Yes, logger takes its '*args' as 'args'.
        if par.isEnabledFor(log_num):
            par._log(log_num, message, args, **kws)
    available_level_nums = [key for key in custom_log_module._levelNames
                            if isinstance(key,int)]

    available_levels = {key:custom_log_module._levelNames[key]
                             for key in custom_log_module._levelNames
                            if isinstance(key,str)}
    if log_num is None:
        try:
            if lower_than is not None:
                log_num = available_levels[lower_than]-1
            elif higher_than is not None:
                log_num = available_levels[higher_than]+1
            elif same_as is not None:
                log_num = available_levels[higher_than]
            else:
                raise Exception('Infomation about the '+
                                'log_num should be provided')
        except KeyError:
            raise Exception('Non existent logging level name')
    if log_num in available_level_nums and verbose:
        custom_log_module.warn('Changing ' +
                                  custom_log_module._levelNames[log_num] +
                                  ' to '+log_name)
    custom_log_module.addLevelName(log_num, log_name)

    if log_call is None:
        log_call = log_name.lower()

    setattr(custom_log_module.Logger, log_call, cust_log)
    return custom_log_module
</code></pre>
</div>
<span class="comment-copy">This is the better answer because it correctly checks the log level.</span>
<span class="comment-copy">This should be the accepted answer...</span>
<span class="comment-copy">Certainly much more informative than the current answer.</span>
<span class="comment-copy">@pfa What about adding <code>logging.DEBUG_LEVEL_NUM = 9</code> so you can access that debug level everywhere you import the logger in your code?</span>
<span class="comment-copy">Definitely instead <code>DEBUG_LEVEL_NUM = 9</code> you should defined <code>logging.DEBUG_LEVEL_NUM = 9</code>. This way you will be able to use <code>log_instance.setLevel(logging.DEBUG_LEVEL_NUM)</code> the same way as you using right know <code>logging.DEBUG</code> or <code>logging.INFO</code></span>
<span class="comment-copy">+1. This is the proper answer.</span>
<span class="comment-copy">+1 too. An elegant approach, and it worked perfectly. An important note: <b><i>You only need to do this once, in a single module, and it will work for all modules</i></b>. You don't even have to import the "setup" module. So toss this in a package's <code>__init__.py</code> and be happy :D</span>
<span class="comment-copy">@Eric S. You should take a look at this answer: <a href="http://stackoverflow.com/a/13638084/600110">stackoverflow.com/a/13638084/600110</a></span>
<span class="comment-copy">I agree with @SamMussmann. I missed that answer because this was the top voted answer.</span>
<span class="comment-copy">@Eric S. Why do you need args without *? If I do that, I get <code>TypeError: not all arguments converted during string formatting</code> but it works fine with *. (Python 3.4.3). Is it a python version issue, or something I'm missing?</span>
<span class="comment-copy">This is IMHO the best answer, since it avoids monkey patching. What <code>get</code> and <code>setLoggerClass</code> exactly do and why they are needed?</span>
<span class="comment-copy">@MarcoSulla They are documented as part of Python's logging module. The dynamic sub-classing, I assume, is used in-case someone wanted their own llogger while using this library. This MyLogger would then become a sub-class of my class, combining the two.</span>
<span class="comment-copy">Sort the answers by <code>Oldest</code>, and you will appreciate that this is the best answer of them all!</span>
<span class="comment-copy">Thanks. I've done quite a bit of work cobbling something like this together and this QA was very helpful, so I tried to add something on.</span>
<span class="comment-copy">Great, thorough answer. Thanks!</span>
<span class="comment-copy">@PeterDolan. Let me know if you have trouble with this. In my personal toolbox I have an extended version that lets you configure how to handle conflicting level definitions. That came up for me once because I like to add a TRACE level, and so does one of the components of sphinx.</span>
<span class="comment-copy">@MadPhysicist thank you, will do. I'm likely just adding a couple fairly basic logging levels so it should be fairly straightforward, but if issues come up I'll ping you. Thanks!!</span>
<span class="comment-copy">Using _log() instead of log() is needed to avoid introducing an extra level in the call stack. If log() is used, the introduction of the extra stack frame causes several LogRecord attributes (funcName, lineno, filename, pathname, ...) to point at the debug function instead of the actual caller. This is likely not the desired result.</span>
<span class="comment-copy">Since when is calling a class's own internal methods not permissible? Just because the function is defined outside of the class doesn't mean that it's an external method.</span>
<span class="comment-copy">This method not only alters the stack trace unnecessarily, but also does not check that the correct level is being logged.</span>
<span class="comment-copy">I feel, what @schlamar says is right, but the counter reason got same number of votes. So what to use ?</span>
<span class="comment-copy">Why wouldn't a method use an internal method?</span>
<span class="comment-copy">Wouldn't this have a small performance hit versus subclassing?  With this approach, each time some asks for a logger, they'll have to make the setattr call.  You'd probably wrap these together in a custom class but nonetheless, that setattr has to be called on every logger created, right?</span>
<span class="comment-copy">@Zbigniew below indicated this didn't work, which I think is because your logger needs to make its call to <code>_log</code>, not <code>log</code>.</span>
<span class="comment-copy">And you'll probably want to replace <code>logging.getLogger</code> to return your subclass instead of the built-in class.</span>
<span class="comment-copy">ok, do you have any other best practices for <code>logging</code>?</span>
<span class="comment-copy">@S.Lott - Actually (at least with the present version of Python, maybe it was not the case back in 2010) you have to use <a href="https://docs.python.org/3/library/logging.html?highlight=logging#logging.setLoggerClass" rel="nofollow noreferrer"><code>setLoggerClass(MyClass)</code></a> and then call <code>getLogger()</code> as normal...</span>
<span class="comment-copy">IMO, this is by far the best (and most Pythonic) answer, and if I could've given it multiple +1's, I would've. It's simple to execute, however sample code would've been nice. :-D</span>
<span class="comment-copy">@DougR.Thanks but like I said, I haven't tried it. :)</span>
<span class="comment-copy">I don't think this works.  Don't you need <code>logger</code> as the first arg in <code>log_at_my_log_level</code>?</span>
<span class="comment-copy">Yes, I think you probably would. This answer was adapted from code that solves a slightly different problem.</span>
<span class="comment-copy">It looks great, but the last line is confusing. Shouldn't it be <code>logging.trace = partial(logging.log, logging.TRACE)  # type: ignore</code> ?</span>
<span class="comment-copy">@SergeyNudnov thanks for pointing out, I fixed it. Was a mistake from my side, I just copied from my code and apparently messed up the cleaning.</span>
<span class="comment-copy">This doesn't let you do <code>logger.trace('hi')</code> which I believe is the main goal</span>
<span class="comment-copy">Eval inside exec. Wow.</span>
<span class="comment-copy">..... do not know what made me do this .... after so many months I would happily interchange this statement with a <code>setattr</code> instead...</span>
