<div class="post-text" itemprop="text">
<p>Does Python have a package/module management system, similar to how Ruby has rubygems where you can do <code>gem install packagename</code>?</p>
<p>On <em><a href="http://docs.python.org/install/index.html" rel="noreferrer">Installing Python Modules</a></em>, I only see references to <code>python setup.py install</code>, but that requires you to find the package first.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Recent progress</h1>
<p><strong>March 2014</strong>: Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> ships with Pip. Pip has long been Python's de-facto standard package manager. You can install <a href="https://pypi.python.org/pypi/httpie" rel="noreferrer">a package</a> like this:</p>
<pre><code>pip install httpie
</code></pre>
<p>Wahey! This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup.</p>
<p><strong>However</strong>, there remains a number of outstanding frustrations with the Python packaging experience. Cumulatively, they make Python very unwelcoming for newbies. Also, the long history of neglect (ie. not shipping with a package manager for 14 years from Python 2.0 to Python 3.3) did damage to the community. I describe both below.</p>
<h1>Outstanding frustrations</h1>
<p>It's important to understand that while experienced users are able to work around these frustrations, they are significant barriers to people new to Python. In fact, the difficulty and general user-unfriendliness is likely to deter many of them. </p>
<h3>PyPI website is counter-helpful</h3>
<p>Every language with a package manager has an official (or quasi-official) repository for the community to download and publish packages. Python has the Python Package Index, PyPI.  <a href="https://pypi.python.org/pypi" rel="noreferrer">https://pypi.python.org/pypi</a> </p>
<p>Let's compare its pages with those of RubyGems and Npm (the Node package manager).</p>
<ol>
<li><a href="https://rubygems.org/gems/rails" rel="noreferrer">https://rubygems.org/gems/rails</a> RubyGems page for the package <code>rails</code> </li>
<li><a href="https://www.npmjs.org/package/express" rel="noreferrer">https://www.npmjs.org/package/express</a> Npm page for the package <code>express</code></li>
<li><a href="https://pypi.python.org/pypi/simplejson/" rel="noreferrer">https://pypi.python.org/pypi/simplejson/</a> PyPI page for the package <code>simplejson</code></li>
</ol>
<p>You'll see the RubyGems and Npm pages both begin with a one-line description of the package, then large friendly instructions how to install it.</p>
<p>Meanwhile, woe to any hapless Python user who naively browses to PyPI. On <a href="https://pypi.python.org/pypi/simplejson/" rel="noreferrer">https://pypi.python.org/pypi/simplejson/</a> , they'll find no such helpful instructions. There is however, a large green 'Download' link. It's not unreasonable to follow it. Aha, they click! Their browser downloads a <code>.tar.gz</code> file. Many Windows users can't even open it, but if they persevere they may eventually extract it, then run <code>setup.py</code> and eventually with the help of Google <code>setup.py install</code>. Some will give up and reinvent the wheel..  </p>
<p>Of course, all of this is wrong. The <em>easiest</em> way to install a package is with a Pip command. But PyPI didn't even mention Pip. Instead, it led them down an archaic and tedious path.</p>
<h3>Error: Unable to find vcvarsall.bat</h3>
<p>Numpy is one of Python's most popular libraries. Try to install it with Pip, you get this cryptic error message:</p>
<blockquote>
<p>Error: Unable to find vcvarsall.bat</p>
</blockquote>
<p>Trying to fix that is one of the most popular questions on Stack Overflow: "<a href="https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat">error: Unable to find vcvarsall.bat</a>"</p>
<p>Few people succeed.</p>
<p>For comparison, in the same situation, Ruby prints this message, which explains what's going on and how to fix it:</p>
<blockquote>
<p>Please update your PATH to include build tools or download the DevKit from <a href="http://rubyinstaller.org/downloads" rel="noreferrer">http://rubyinstaller.org/downloads</a> and follow the instructions at <a href="http://github.com/oneclick/rubyinstaller/wiki/Development-Kit" rel="noreferrer">http://github.com/oneclick/rubyinstaller/wiki/Development-Kit</a></p>
</blockquote>
<h3>Publishing packages is hard</h3>
<p>Ruby and Nodejs ship with full-featured package managers, Gem (since 2007) and Npm (since 2011), and have nurtured sharing communities centred around GitHub. Npm makes <a href="https://npmjs.org/doc/developers.html" rel="noreferrer">publishing packages</a> as easy as installing them, it already has <a href="https://npmjs.org/" rel="noreferrer">64k packages</a>. RubyGems lists <a href="http://rubygems.org/stats" rel="noreferrer">72k packages</a>. The venerable Python package index lists <a href="https://pypi.python.org/pypi" rel="noreferrer">only 41k</a>.</p>
<h1>History</h1>
<p>Flying in the face of its "<a href="http://www.python.org/about/" rel="noreferrer">batteries included</a>" motto, Python shipped without a package manager until 2014. </p>
<p>Until Pip, the de facto standard was a command  <code>easy_install</code>. It was woefully inadequate. The was no command to uninstall packages.</p>
<p>Pip was a massive improvement. It had most the features of Ruby's Gem. Unfortunately, Pip was--until recently--ironically difficult to install. In fact, the problem remains a top Python question on Stack Overflow: "<a href="https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows">How do I install pip on Windows?</a>"</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The Python Package Index (PyPI)</strong> seems to be standard:</p>
<ul>
<li>To <strong>install</strong> a package:
<code>pip install MyProject</code></li>
<li>To <strong>update</strong> a package
<code>pip install --upgrade MyProject</code></li>
<li>To <strong>fix a version</strong> of a package <code>pip install MyProject==1.0</code></li>
</ul>
<p>You can install the package manager as follows:</p>
<pre><code>curl -O http://python-distribute.org/distribute_setup.py
python distribute_setup.py
easy_install pip
</code></pre>
<p>References:</p>
<ul>
<li><a href="http://guide.python-distribute.org/">http://guide.python-distribute.org/</a></li>
<li><a href="http://pypi.python.org/pypi/distribute">http://pypi.python.org/pypi/distribute</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>And just to provide a contrast, there's also <a href="http://pypi.python.org/pypi/pip" rel="noreferrer">pip</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a Ruby and Perl developer and learning-Python guy, I haven't found easy_install or pip to be the equivalent to RubyGems or CPAN. </p>
<p>I tend to keep my development systems running the latest versions of modules as the developers update them, and freeze my production systems at set versions. Both RubyGems and CPAN make it easy to find modules by listing what's available, then install and later update them individually or in bulk if desired.</p>
<p>easy_install and pip make it easy to install a module ONCE I located it via a browser search or learned about it by some other means, but they won't tell me what is available. I can explicitly name the module to be updated, but the apps won't tell me what has been updated nor will they update everything in bulk if I want.</p>
<p>So, the basic functionality is there in pip and easy_install but there are features missing that I'd like to see that would make them friendlier and easier to use and on par with CPAN and RubyGems.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are at least two, <a href="http://peak.telecommunity.com/DevCenter/EasyInstall" rel="nofollow noreferrer">easy_install</a> and its successor <a href="http://pypi.python.org/pypi/pip" rel="nofollow noreferrer">pip</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As of at least late 2014, <a href="https://store.continuum.io/cshop/anaconda/" rel="nofollow noreferrer">Continuum Analytics' Anaconda</a> Python distribution with the <a href="http://www.continuum.io/blog/conda" rel="nofollow noreferrer">conda</a> package manager should be considered. It solves most of the serious issues people run into with Python in general (managing different Python versions, updating Python versions, package management, virtual environments, Windows/Mac compatibility) in one cohesive download.</p>
<p>It enables you to do pretty much everything you could want to with Python without having to change the system at all. My next preferred solution is pip + virtualenv, but you either have to install virtualenv into your system Python (and your system Python may not be the version you want), or <a href="http://anderspitman.com/2014/06/15/setting-up-an-ipython-development-environment-from-source/" rel="nofollow noreferrer">build from source</a>. Anaconda makes this whole process the click of a button, as well as adding a bunch of other features.</p>
</div>
<div class="post-text" itemprop="text">
<p>That'd be <a href="http://pypi.python.org/pypi/setuptools" rel="noreferrer">easy_install</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's called setuptools. You run it with the "easy_install" command.</p>
<p>You can find the directory at <a href="http://pypi.python.org/" rel="noreferrer">http://pypi.python.org/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows install <a href="http://chocolatey.org/" rel="nofollow">http://chocolatey.org/</a> then </p>
<pre><code>choco install python
</code></pre>
<p>Open a new cmd-window with the updated PATH. Next, do</p>
<pre><code>choco install pip
</code></pre>
<p>After that you can</p>
<pre><code>pip install pyside
pip install ipython
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't see either <a href="http://en.wikipedia.org/wiki/MacPorts" rel="nofollow noreferrer">MacPorts</a> or <a href="http://mxcl.github.com/homebrew/" rel="nofollow noreferrer">Homebrew</a> mentioned in other answers here, but since I do see them mentioned elsewhere on Stack Overflow for related questions, I'll add my own US$0.02 that many folks seem to consider <a href="http://www.macports.org/" rel="nofollow noreferrer">MacPorts</a> as not only a package manager for packages in general (as of today they list 16311 packages/ports, 2931 matching "python", albeit only for Macs), but also as a decent (maybe better) package manager for Python packages/modules:</p>
<h3>Question</h3>
<p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"...what is the method that Mac python developers use to manage their modules?"</a></p>
<h3>Answers</h3>
<ul>
<li><p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"MacPorts is perfect for Python on the Mac."</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"The best way is to use MacPorts."</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"I prefer MacPorts..."</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"With my MacPorts setup..."</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac">"I use MacPorts to install ... third-party modules tracked by MacPorts"</a></p></li>
</ul>
<h3>SciPy</h3>
<p><a href="http://scipy.github.com/install.html" rel="nofollow noreferrer">"Macs (unlike Linux) don’t come with a package manager, but there are a couple of popular package managers you can install.
Macports..."</a></p>
<p>I'm still debating on whether or not to use MacPorts myself, but at the moment I'm leaning in that direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since no one has mentioned <strong>pipenv</strong> here, I would like to describe my views why everyone should use it for managing python packages.</p>
<p>As @ColonelPanic mentioned there are several issues with the <a href="https://pypi.python.org/pypi" rel="nofollow noreferrer"><strong>Python Package Index</strong></a> and with <strong>pip</strong> and <a href="http://www.pythonforbeginners.com/basics/how-to-use-python-virtualenv" rel="nofollow noreferrer">virtualenv</a> also.</p>
<p><strong>Pipenv</strong> solves most of the issues with pip and provides additional features also.</p>
<h2>Pipenv features</h2>
<p>Pipenv is intended to replace pip and virtualenv, which means pipenv will automatically create a separate virtual environment for every project thus avoiding conflicts between different python versions/package versions for different projects.</p>
<ul>
<li>Enables truly deterministic builds, while easily specifying only what you want.</li>
<li>Generates and checks file hashes for locked dependencies.</li>
<li>Automatically install required Pythons, if pyenv is available.</li>
<li>Automatically finds your project home, recursively, by looking for a Pipfile.</li>
<li>Automatically generates a Pipfile, if one doesn’t exist.</li>
<li>Automatically creates a virtualenv in a standard location.</li>
<li>Automatically adds/removes packages to a Pipfile when they are un/installed.</li>
<li>Automatically loads .env files, if they exist.</li>
</ul>
<p>If you have worked on python projects before, you would realize these features make managing packages way easier. </p>
<h2>Other Commands</h2>
<ul>
<li><code>check</code> checks for security vulnerabilities and asserts that PEP 508 requirements are being met by the current environment. (<em>which I think is a great feature especially after this - <a href="https://www.bleepingcomputer.com/news/security/ten-malicious-libraries-found-on-pypi-python-package-index/" rel="nofollow noreferrer">Malicious packages on PyPi</a></em>)</li>
<li><code>graph</code> will show you a dependency graph, of your installed dependencies.</li>
</ul>
<p>You can read more about it here - <a href="https://docs.pipenv.org/" rel="nofollow noreferrer">Pipenv</a>.</p>
<h2>Installation</h2>
<p>You can find the installation documentation <a href="https://docs.pipenv.org/install.html" rel="nofollow noreferrer">here</a></p>
<p><em>P.S.: If you liked working with the Python Package <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer">requests</a> , you would be pleased to know that <strong>pipenv</strong> is by the same developer <a href="https://github.com/kennethreitz" rel="nofollow noreferrer">Kenneth Reitz</a></em></p>
</div>
<div class="post-text" itemprop="text">
<p>In 2019 <a href="https://poetry.eustace.io/" rel="nofollow noreferrer">poetry</a> is the package and dependency manager you are looking for.</p>
<p><a href="https://github.com/sdispater/poetry#why" rel="nofollow noreferrer">https://github.com/sdispater/poetry#why</a></p>
<p>It's modern, simple and reliable.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/sdispater/poetry" rel="nofollow noreferrer">Poetry</a> is what you're looking for. It takes care of dependency management, virtual environments, running.</p>
</div>
<span class="comment-copy">If you think Python's package index PyPI should have clearer instructions how to install packages, please vote and comment on the issue at <a href="https://bitbucket.org/pypa/pypi/issue/149/package-pages-should-have-clear-pip" rel="nofollow noreferrer">bitbucket.org/pypa/pypi/issue/149/…</a></span>
<span class="comment-copy">While it was current at the time, the link in this question is now to the legacy distutils documentation. I filed <a href="http://bugs.python.org/issue26014" rel="nofollow noreferrer">bugs.python.org/issue26014</a> to cover that these docs need to be clearer that they're no longer suitable for use as end user documentation (they're solely kept around for the benefit of tool implementors).</span>
<span class="comment-copy">For anybody interested, there <a href="http://www.python.org/dev/peps/pep-0439/" rel="nofollow noreferrer">PEP 439</a> is proposing a way to streamline the pip install process, although I think this PEP is just part of a wider strategy that's being looked at. See also discussion <a href="http://mail.python.org/pipermail/distutils-sig/2013-March/020254.html" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@Cartroo that's great news! Python deserves a package manager, I hope the devs can make it happen.</span>
<span class="comment-copy">Absolutely, long overdue. I definitely hope that it makes it into Python 3.4, at least. Unfortunately I very much doubt that it'll end up being back-ported to 2.x, but there is at least light at the end of the tunnel. Let's just hope it's not an oncoming dragon... (^_^)</span>
<span class="comment-copy">In Python's defense, newer languages such as Ruby and Node were fortunate to be able to observe the mistakes of previous languages and avoid them. That said, I really wish package management on Python would receive more love and care, so I'm glad to see PEP 439 as pointed out by @Cartroo.</span>
<span class="comment-copy">Now moved to <a href="http://www.python.org/dev/peps/pep-0453/" rel="nofollow noreferrer">PEP453</a>.</span>
<span class="comment-copy">This is the modern answer.</span>
<span class="comment-copy">I searched the internet for 20 minutes and this answer was nowhere.  Thank you so much.  Also, I have serious doubts about using python if the documentation is this bad...this should be on the Python main page or accesible from google or <i>something</i></span>
<span class="comment-copy">thanks!  why isn't pip mentioned on the installing python modules documentation page?</span>
<span class="comment-copy">Note that pip doesn't support eggs, it only installs source packages. Generally speaking, pip does many things much better than easy_install, but easy_install is likely to be installed by default on most unixes, pip is not.</span>
<span class="comment-copy">@Tommy Right! If the Python devs cared about user experience, they'd ship Python with a package manager (such as pip). Ruby ships with Gem, and Nodejs with Npm. <a href="http://stackoverflow.com/a/13445719/284795">stackoverflow.com/a/13445719/284795</a></span>
<span class="comment-copy">This answer is now well and truly outdated.</span>
<span class="comment-copy">If you want to downvote everyone on the page who said <code>easy_install</code>, please check the dates first. That was valid advice when it was given <i>almost 7 years ago</i>. I don't think of of us answerers are going to regularly revisit this to update, so downvoting is silly.</span>
<span class="comment-copy">I wanted to answer this as a comment to Thomas Bratt's answer but I don't have enough reputation...</span>
<span class="comment-copy">Homebrew itself says: You can install Python packages with (the outdated easy_install or)   <code>pip install &lt;your_favorite_package&gt;</code></span>
