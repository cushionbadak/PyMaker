<div class="post-text" itemprop="text">
<p>I have strings containing numbers with their units, e.g. 2GB, 17ft, etc.
I would like to separate the number from the unit and create 2 different strings. Sometimes, there is a whitespace between them (e.g. 2 GB) and it's easy to do it using split(' ').</p>
<p>When they are together (e.g. 2GB), I would test every character until I find a letter, instead of a number. </p>
<pre><code>s='17GB'
number=''
unit=''
for c in s:
    if c.isdigit():
        number+=c
    else:
        unit+=c
</code></pre>
<p>Is there a better way to do it?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>s='17GB'
for i,c in enumerate(s):
    if not c.isdigit():
        break
number=int(s[:i])
unit=s[i:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can break out of the loop when you find the first non-digit character</p>
<pre><code>for i,c in enumerate(s):
    if not c.isdigit():
        break
number = s[:i]
unit = s[i:].lstrip()
</code></pre>
<p>If you have negative and decimals:</p>
<pre><code>numeric = '0123456789-.'
for i,c in enumerate(s):
    if c not in numeric:
        break
number = s[:i]
unit = s[i:].lstrip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a regular expression to divide the string into groups:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile('(\d+)\s*(\w+)')
&gt;&gt;&gt; p.match('2GB').groups()
('2', 'GB')
&gt;&gt;&gt; p.match('17 ft').groups()
('17', 'ft')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/tokenize.html" rel="nofollow noreferrer"><code>tokenize</code></a> can help:</p>
<pre><code>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; s = StringIO.StringIO('27GB')
&gt;&gt;&gt; for token in tokenize.generate_tokens(s.readline):
...   print token
... 
(2, '27', (1, 0), (1, 2), '27GB')
(1, 'GB', (1, 2), (1, 4), '27GB')
(0, '', (2, 0), (2, 0), '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use regular expressions, grouping together what you want to find out:</p>
<pre><code>import re
s = "17GB"
match = re.match(r"^([1-9][0-9]*)\s*(GB|MB|KB|B)$", s)
if match:
  print "Number: %d, unit: %s" % (int(match.group(1)), match.group(2))
</code></pre>
<p>Change the regex according to what you want to parse. If you're unfamiliar with regular expressions, <a href="http://www.regular-expressions.info/" rel="nofollow noreferrer">here's</a> a great tutorial site.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s="17GB"
&gt;&gt;&gt; ind=map(str.isalpha,s).index(True)
&gt;&gt;&gt; num,suffix=s[:ind],s[ind:]
&gt;&gt;&gt; print num+":"+suffix
17:GB
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using a regular expression</p>
<p><a href="http://python.org/doc/1.6/lib/module-regsub.html" rel="nofollow noreferrer">http://python.org/doc/1.6/lib/module-regsub.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For this task, I would definitely use a regular expression:</p>
<pre><code>import re
there = re.compile(r'\s*(\d+)\s*(\S+)')
thematch = there.match(s)
if thematch:
  number, unit = thematch.groups()
else:
  raise ValueError('String %r not in the expected format' % s)
</code></pre>
<p>In the RE pattern, <code>\s</code> means "whitespace", <code>\d</code> means "digit", <code>\S</code> means non-whitespace; <code>*</code> means "0 or more of the preceding", <code>+</code> means "1 or more of the preceding, and the parentheses enclose "capturing groups" which are then returned by the <code>groups()</code> call on the match-object.  (<code>thematch</code> is None if the given string doesn't correspond to the pattern: optional whitespace, then one or more digits, then optional whitespace, then one or more non-whitespace characters).</p>
</div>
<div class="post-text" itemprop="text">
<p>A regular expression.</p>
<pre><code>import re

m = re.match(r'\s*(?P&lt;n&gt;[-+]?[.0-9])\s*(?P&lt;u&gt;.*)', s)
if m is None:
  raise ValueError("not a number with units")
number = m.group("n")
unit = m.group("u")
</code></pre>
<p>This will give you a number (integer or fixed point; too hard to disambiguate scientific notation's "e" from a unit prefix) with an optional sign, followed by the units, with optional whitespace.</p>
<p>You can use <code>re.compile()</code> if you're going to be doing a lot of matches.</p>
</div>
<div class="post-text" itemprop="text">
<p>This uses an approach which should be a bit more forgiving than regexes. Note: this is not as performant as the other solutions posted.</p>
<pre><code>def split_units(value):
    """
    &gt;&gt;&gt; split_units("2GB")
    (2.0, 'GB')
    &gt;&gt;&gt; split_units("17 ft")
    (17.0, 'ft')
    &gt;&gt;&gt; split_units("   3.4e-27 frobnitzem ")
    (3.4e-27, 'frobnitzem')
    &gt;&gt;&gt; split_units("9001")
    (9001.0, '')
    &gt;&gt;&gt; split_units("spam sandwhiches")
    (0, 'spam sandwhiches')
    &gt;&gt;&gt; split_units("")
    (0, '')
    """
    units = ""
    number = 0
    while value:
        try:
            number = float(value)
            break
        except ValueError:
            units = value[-1:] + units
            value = value[:-1]
    return number, units.strip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>SCIENTIFIC NOTATION
This regex is working well for me to parse numbers that may be in scientific notation, and is based on the recent python documentation about scanf:
<a href="https://docs.python.org/3/library/re.html#simulating-scanf" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html#simulating-scanf</a></p>
<pre><code>units_pattern = re.compile("([-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?|\s*[a-zA-Z]+\s*$)")
number_with_units = list(match.group(0) for match in units_pattern.finditer("+2.0e-1 mm"))
print(number_with_units)
&gt;&gt;&gt;['+2.0e-1', ' mm']

n, u = number_with_units
print(float(n), u.strip())
&gt;&gt;&gt;0.2 mm
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try the regex pattern below. the first group (the scanf() tokens for a number any which way) is lifted directly from the python docs for the re module.</p>
<pre><code>import re
SCANF_MEASUREMENT = re.compile(
    r'''(                      # group match like scanf() token %e, %E, %f, %g
    [-+]?                      # +/- or nothing for positive
    (\d+(\.\d*)?|\.\d+)        # match numbers: 1, 1., 1.1, .1
    ([eE][-+]?\d+)?            # scientific notation: e(+/-)2 (*10^2)
    )
    (\s*)                      # separator: white space or nothing
    (                          # unit of measure: like GB. also works for no units
    \S*)''',    re.VERBOSE)
'''
:var SCANF_MEASUREMENT:
    regular expression object that will match a measurement

    **measurement** is the value of a quantity of something. most complicated example::

        -666.6e-100 units
'''

def parse_measurement(value_sep_units):
    measurement = re.match(SCANF_MEASUREMENT, value_sep_units)
    try:
        value = float(measurement[0])
    except ValueError:
        print 'doesn't start with a number', value_sep_units
    units = measurement[5]

    return value, units
</code></pre>
</div>
<span class="comment-copy">You may find that your way is faster than regex approach, especially for short strings that you are using.</span>
<span class="comment-copy">-1 s='17GB' gives unit=' GB', i.e. a space in front of the unit. unit needs an lstrip and then you'll have the same answer as mine.</span>
<span class="comment-copy">now I re-read the question, the case with the space is handled with a split(), not with this code. I tried to take the -1 back, but it wouldn't let me.</span>
<span class="comment-copy">&gt;&gt;&gt; '.'.isdigit()  -&gt; False</span>
<span class="comment-copy">yes, it works for positive integers. '-'.isdigit() is also False.</span>
<span class="comment-copy">added code for negatives and decimals</span>
<span class="comment-copy">The code doesn't gives wrong results when unit is missing. '10' -&gt; number='1', unit='0'. To solve this, modify to  <code>for i,c in enumerate(s+' '):</code></span>
<span class="comment-copy">To match the more general set of numbers, including "6.2" and "3.4e-27" would require a much more complex regex.  Too bad python does not have a builtin scanf analog.</span>
<span class="comment-copy">you need re.match(r'\s*(?P&lt;n&gt;[-+]?[.0-9]*)\s*(?P&lt;u&gt;.*)', s). Its missing * after [.0-9]</span>
