<div class="post-text" itemprop="text">
<p>I ran across the caret operator in python today and trying it out, I got the following output:</p>
<pre><code>&gt;&gt;&gt; 8^3
11
&gt;&gt;&gt; 8^4
12
&gt;&gt;&gt; 8^1
9
&gt;&gt;&gt; 8^0
8
&gt;&gt;&gt; 7^1
6
&gt;&gt;&gt; 7^2
5
&gt;&gt;&gt; 7^7
0
&gt;&gt;&gt; 7^8
15
&gt;&gt;&gt; 9^1
8
&gt;&gt;&gt; 16^1
17
&gt;&gt;&gt; 15^1
14
&gt;&gt;&gt;
</code></pre>
<p>It seems to be based on 8, so I'm guessing some sort of byte operation?  I can't seem to find much about this searching sites other than it behaves oddly for floats, does anybody have a link to what this operator does or can you explain it here?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a bitwise <a href="http://en.wikipedia.org/wiki/Exclusive_or" rel="noreferrer">XOR</a> (exclusive OR).</p>
<p>It results to true if <strong>one</strong> (and only one) of the operands (evaluates to) true.</p>
<p>To demonstrate:</p>
<pre><code>&gt;&gt;&gt; 0^0
0
&gt;&gt;&gt; 1^1
0
&gt;&gt;&gt; 1^0
1
&gt;&gt;&gt; 0^1
1
</code></pre>
<p>To explain one of your own examples:</p>
<pre><code>&gt;&gt;&gt; 8^3
11
</code></pre>
<p>Think about it this way:</p>
<pre>
1000  # 8 (binary)
0011  # 3 (binary)
----  # APPLY XOR ('vertically')
1011  # result = 11 (binary)
</pre>
</div>
<div class="post-text" itemprop="text">
<p>It invokes the <code>__xor__()</code> or <code>__rxor__()</code> method of the object as needed, which for integer types does a bitwise exclusive-or.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a bit-by-bit exclusive-or.  Binary bitwise operators are documented in <a href="https://docs.python.org/2/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">chapter 5 of the Python Language Reference</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally speaking, the symbol <code>^</code> is an <a href="https://en.wikipedia.org/wiki/Infix_notation" rel="nofollow">infix</a> version of the <code>__xor__</code> or <code>__rxor__</code> methods. Whatever data types are placed to the right and left of the symbol must implement this function in a compatible way. For integers, it is the common <code>XOR</code> operation, but for example there is not a built-in definition of the function for type <code>float</code> with type <code>int</code>:</p>
<pre><code>In [12]: 3 ^ 4
Out[12]: 7

In [13]: 3.3 ^ 4
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-13-858cc886783d&gt; in &lt;module&gt;()
----&gt; 1 3.3 ^ 4

TypeError: unsupported operand type(s) for ^: 'float' and 'int'
</code></pre>
<p>One neat thing about Python is that you can override this behavior in a class of your own. For example, in some languages the <code>^</code> symbol means exponentiation. You could do that this way, just as one example:</p>
<pre><code>class Foo(float):
    def __xor__(self, other):
        return self ** other
</code></pre>
<p>Then something like this will work, and now, <em>for instances of <code>Foo</code> only</em>, the <code>^</code> symbol will mean exponentiation.</p>
<pre><code>In [16]: x = Foo(3)

In [17]: x
Out[17]: 3.0

In [18]: x ^ 4
Out[18]: 81.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you use the <code>^</code> operator, behind the curtains the method <a href="https://docs.python.org/3/reference/datamodel.html#object.__xor__" rel="nofollow noreferrer"><strong><code>__xor__</code></strong></a> is called.</p>
<p><code>a^b</code> is equivalent to <code>a.__xor__(b)</code>.</p>
<p>Also, <code>a ^= b</code> is equivalent to <code>a = a.__ixor__(b)</code> (where <code>__xor__</code> is used as a fallback when <code>__ixor__</code> is implicitly called via using <code>^=</code> but does not exist).</p>
<p>In principle, what <code>__xor__</code> does is completely up to its implementation. Common use cases in Python are:</p>
<ul>
<li><strong>Symmetric Difference</strong> of sets (all elements present in exactly one of two sets)</li>
</ul>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = {1, 2, 3}
&gt;&gt;&gt; b = {1, 4, 5}
&gt;&gt;&gt; a^b
{2, 3, 4, 5}
&gt;&gt;&gt; a.symmetric_difference(b)
{2, 3, 4, 5}
</code></pre>
<ul>
<li><strong>Bitwise Non-Equal</strong> for the bits of two integers</li>
</ul>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; a^b
3
</code></pre>
<p>Explanation:</p>
<pre><code>    101 (5 decimal)
XOR 110 (6 decimal)
-------------------
    011 (3 decimal)
</code></pre>
</div>
<span class="comment-copy">For integers, same thing it does in C. ^_-</span>
<span class="comment-copy">FYI, from the python shell, you can type <code>help('^')</code></span>
<span class="comment-copy">Note that it doesn't behave oddly for floats (it just doesn't work with floats!). Also note that many people accidentally run into this while looking for <code>**</code>, the exponentiation operator.</span>
<span class="comment-copy">@seth: <code>help('^')</code> does nothing in my Python 2.6.1 (apple build). @S.Lott: do you mean this  (<a href="http://docs.python.org/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">docs.python.org/reference/â€¦</a>) when you're saying "completely covered"?. Seems a bit sparse for someone unfamiliar with the concept...</span>
<span class="comment-copy">Thanks all, I guess if I knew it was a bitwise operator I would have known right where to look, but I didn't, hence the question :) Thanks all for your answers they were each helpful and now I know a little bit more! :)</span>
<span class="comment-copy">A slightly more illustrative example might include both numbers having <code>1</code> in the same bit to make it clear that <code>1 xor 1 = 0</code>.</span>
<span class="comment-copy">I wanted to add, you can do binary numbers by typing <code>0bX</code> where X is your binary. <code>0b0001</code>, <code>0b0010</code>, etc. So, <code>0b1101 ^ 0b1110</code> would give you <code>0b0011</code> (or 3).</span>
<span class="comment-copy">I think "It results to true if one (and only one) of the operands (evaluates to) true." is not exact, it what would be the definition of a boolean xor</span>
<span class="comment-copy">+1 for pointing out what it <i>really</i> does, outside of the integer operation.</span>
<span class="comment-copy">woah, was that even possible? and could we probably change how the <code>+</code> operator works too?</span>
<span class="comment-copy">Yes, this is how the <code>+</code> symbol is able to do one kind of action for <code>list</code> (concatenation) while doing another kind of action (mathematical addition) for numeric types. In that case, you would override the <code>__add__</code> or <code>__radd__</code> methods in your class.</span>
<span class="comment-copy">As a side note, the <code>__r*__</code> version of these (like <code>__rxor__</code> or <code>__radd__</code>) will be invoked from the argument appearing on the <i>right hand side</i> of the infix symbol, and only if the call to the function for the left hand symbol doesn't work. You can think of it like <code>try: left_hand_symbol.__xor__(right_hand_symbol); except: right_hand_symbol.__rxor__(left_hand_symbol)</code>, but <code>xor</code> can be replaced by any of the available infix operators in the <a href="http://docs.python.org/3.1/reference/datamodel.html?highlight=rlshift" rel="nofollow noreferrer">Python Data Model</a>.</span>
<span class="comment-copy">So that means I can craft my own operator which allows <code>int</code> concatenation with strings?  <i>man, python is way complex than I thought</i></span>
<span class="comment-copy">So you could say something like <code>(CompositionA | CompositionB) // CompositionC</code> and it would just mean "Play composition A followed by composition B, meanwhile also be playing composition C at the same time in parallel." Talk about a beautiful piece of code!</span>
