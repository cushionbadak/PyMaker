<div class="post-text" itemprop="text">
<pre><code>if (message.value[0] == "/" or message.value[0] == "\"):
    do stuff.
</code></pre>
<p>I'm sure it's a simple syntax error, but something is wrong with this if statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Escape the backslash:</p>
<pre><code>if message.value[0] == "/" or message.value[0] == "\\":
</code></pre>
<p>From the <a href="http://docs.python.org/reference/lexical_analysis.html#string-literals" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>The backslash (\) character is used to
  escape characters that otherwise have
  a special meaning, such as newline,
  backslash itself, or the quote
  character.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>When you only need to check for equality, you can also simply use the <a href="http://docs.python.org/3/reference/expressions.html#in" rel="noreferrer"><code>in</code></a> operator to do a membership test in a sequence of accepted elements:</p>
<pre><code>if message.value[0] in ('/', '\\'):
    do_stuff()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try like this:</p>
<pre><code>if message.value[0] == "/" or message.value[0] == "\\":
  do_stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If message.value[] is string:</p>
<pre><code>if message.value[0] in ('/', '\'):
    do_stuff()
</code></pre>
<p>If it not str</p>
</div>
<div class="post-text" itemprop="text">
<p>Use following code to perform if-else conditioning in python:
Here, I am checking the length of the string. If the length is less than 3 then do nothing, if more then 3 then I check the last 3 characters. If last 3 characters are "ing" then I add "ly" at the end otherwise I add "ing" at the end.</p>
<p>Code-</p>
<pre><code>if (len(s)&lt;=3):
    return s
elif s[-3:]=="ing":
    return s+"ly"
else: return s + "ing"
</code></pre>
</div>
<span class="comment-copy">What's the error message?</span>
<span class="comment-copy">Related/duplicate: <a href="//stackoverflow.com/q/19095796">How to print backslash with Python?</a></span>
<span class="comment-copy">The parentheses are valid, but meaningless.</span>
<span class="comment-copy">Succinct and Pythonic.</span>
<span class="comment-copy">Or just <code>message.value[0] in "/\\":</code> because strings are iterable.</span>
<span class="comment-copy">If you can be certain that <code>message.value[0]</code> is a string of length 1 (yes, I know, I know...).</span>
<span class="comment-copy">If you wanted to allow for <code>message</code> being an empty string, the idiom would be <code>if message.value[:1] in ('/', '\\')</code>.</span>
<span class="comment-copy">This is more of a comment than a valid answer...</span>
