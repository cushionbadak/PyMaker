<div class="post-text" itemprop="text">
<p>Python allows easy creation of an integer from a string of a given base via </p>
<pre><code>int(str, base). 
</code></pre>
<p>I want to perform the inverse: <strong>creation of a string from an integer</strong>, 
i.e. I want some function <code>int2base(num, base)</code>, such that:</p>
<pre><code>int(int2base(x, b), b) == x
</code></pre>
<p>The function name/argument order is unimportant. </p>
<p>For any number <code>x</code> and base <code>b</code> that <code>int()</code> will accept.</p>
<p>This is an easy function to write: in fact it's easier than describing it in this question. However, I feel like I must be missing something.  </p>
<p>I know about the functions <code>bin</code>, <code>oct</code>, <code>hex</code>, but I cannot use them for a few reasons:</p>
<ul>
<li><p>Those functions are not available on older versions of Python, with which I need compatibility with (2.2) </p></li>
<li><p>I want a general solution that can be called the same way for different bases</p></li>
<li><p>I want to allow bases other than 2, 8, 16</p></li>
</ul>
<h3>Related</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/2063425/python-elegant-inverse-function-of-intstring-base">Python elegant inverse function of int(string, base)</a></li>
<li><a href="https://stackoverflow.com/questions/2088201/integer-to-base-x-system-using-recursion-in-python">Integer to base-x system using recursion in python</a></li>
<li><a href="https://stackoverflow.com/questions/1119722/base-62-conversion-in-python">Base 62 conversion in Python</a></li>
<li><a href="https://stackoverflow.com/questions/561486/how-to-convert-an-integer-to-the-shortest-url-safe-string-in-python">How to convert an integer to the shortest url-safe string in Python?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>If you need compatibility with ancient versions of Python, you can either use <a href="https://github.com/aleaxit/gmpy" rel="noreferrer">gmpy</a> (which does include a fast, completely general int-to-string conversion function, and can be built for such ancient versions -- you may need to try older releases since the recent ones have not been tested for venerable Python and GMP releases, only somewhat recent ones), or, for less speed but more convenience, use Python code -- e.g., most simply:</p>
<pre><code>import string
digs = string.digits + string.ascii_letters


def int2base(x, base):
    if x &lt; 0:
        sign = -1
    elif x == 0:
        return digs[0]
    else:
        sign = 1

    x *= sign
    digits = []

    while x:
        digits.append(digs[int(x % base)])
        x = int(x / base)

    if sign &lt; 0:
        digits.append('-')

    digits.reverse()

    return ''.join(digits)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>def baseN(num,b,numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
    return ((num == 0) and numerals[0]) or (baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b])
</code></pre>
<p>ref:
<a href="http://code.activestate.com/recipes/65212/" rel="noreferrer">http://code.activestate.com/recipes/65212/</a></p>
<p>Please be aware that this may lead to </p>
<pre><code>RuntimeError: maximum recursion depth exceeded in cmp
</code></pre>
<p>for very big integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Surprisingly, people were giving only solutions that convert to small bases (smaller then the length of the English alphabet). There was no attempt to give a solution which converts to any arbitrary base from 2 to infinity.</p>
<p>So here is a super simple solution:</p>
<pre><code>def numberToBase(n, b):
    if n == 0:
        return [0]
    digits = []
    while n:
        digits.append(int(n % b))
        n //= b
    return digits[::-1]
</code></pre>
<p>so if you need to convert some super huge number to the base <code>577</code>,</p>
<p><code>numberToBase(67854 ** 15 - 102, 577)</code>, will give you a correct solution:
<code>[4, 473, 131, 96, 431, 285, 524, 486, 28, 23, 16, 82, 292, 538, 149, 25, 41, 483, 100, 517, 131, 28, 0, 435, 197, 264, 455]</code>,</p>
<p>Which you can later convert to any base you want</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>"{0:b}".format(100) # bin: 1100100
"{0:x}".format(100) # hex: 64
"{0:o}".format(100) # oct: 144
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Great answers!
I guess the answer to my question was "no" I was not missing some obvious solution. 
Here is the function I will use that condenses the good ideas expressed in the answers.</p>
<ul>
<li>allow caller-supplied mapping of characters (allows base64 encode)</li>
<li>checks for negative and zero</li>
<li>maps complex numbers into tuples of strings</li>
</ul>
<p><pre><code>
def int2base(x,b,alphabet='0123456789abcdefghijklmnopqrstuvwxyz'):
    'convert an integer to its string representation in a given base'
    if b&lt;2 or b&gt;len(alphabet):
        if b==64: # assume base64 rather than raise error
            alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        else:
            raise AssertionError("int2base base out of range")
    if isinstance(x,complex): # return a tuple
        return ( int2base(x.real,b,alphabet) , int2base(x.imag,b,alphabet) )
    if x&lt;=0:
        if x==0:
            return alphabet[0]
        else:
            return  '-' + int2base(-x,b,alphabet)
    # else x is non-negative real
    rets=''
    while x&gt;0:
        x,idx = divmod(x,b)
        rets = alphabet[idx] + rets
    return rets</code></pre></p>
<p></p></div>
<div class="post-text" itemprop="text">
<p>Python doesn't have a built-in function for printing an integer in an arbitrary base. You'll have to write your own if you want to.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>baseconv.py</code> from my project: <a href="https://github.com/semente/python-baseconv" rel="nofollow noreferrer">https://github.com/semente/python-baseconv</a></p>
<p>Sample usage:</p>
<pre><code>&gt;&gt;&gt; from baseconv import BaseConverter
&gt;&gt;&gt; base20 = BaseConverter('0123456789abcdefghij')
&gt;&gt;&gt; base20.encode(1234)
'31e'
&gt;&gt;&gt; base20.decode('31e')
'1234'
&gt;&gt;&gt; base20.encode(-1234)
'-31e'
&gt;&gt;&gt; base20.decode('-31e')
'-1234'
&gt;&gt;&gt; base11 = BaseConverter('0123456789-', sign='$')
&gt;&gt;&gt; base11.encode('$1234')
'$-22'
&gt;&gt;&gt; base11.decode('$-22')
'$1234'
</code></pre>
<p>There is some bultin converters as for example <code>baseconv.base2</code>, <code>baseconv.base16</code> and <code>baseconv.base64</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://code.activestate.com/recipes/65212/" rel="nofollow noreferrer">http://code.activestate.com/recipes/65212/</a></p>
<pre><code>def base10toN(num,n):
    """Change a  to a base-n number.
    Up to base-36 is supported without special notation."""
    num_rep={10:'a',
         11:'b',
         12:'c',
         13:'d',
         14:'e',
         15:'f',
         16:'g',
         17:'h',
         18:'i',
         19:'j',
         20:'k',
         21:'l',
         22:'m',
         23:'n',
         24:'o',
         25:'p',
         26:'q',
         27:'r',
         28:'s',
         29:'t',
         30:'u',
         31:'v',
         32:'w',
         33:'x',
         34:'y',
         35:'z'}
    new_num_string=''
    current=num
    while current!=0:
        remainder=current%n
        if 36&gt;remainder&gt;9:
            remainder_string=num_rep[remainder]
        elif remainder&gt;=36:
            remainder_string='('+str(remainder)+')'
        else:
            remainder_string=str(remainder)
        new_num_string=remainder_string+new_num_string
        current=current/n
    return new_num_string
</code></pre>
<p>Here's another one from the same link</p>
<pre><code>def baseconvert(n, base):
    """convert positive decimal integer n to equivalent in another base (2-36)"""

    digits = "0123456789abcdefghijklmnopqrstuvwxyz"

    try:
        n = int(n)
        base = int(base)
    except:
        return ""

    if n &lt; 0 or base &lt; 2 or base &gt; 36:
        return ""

    s = ""
    while 1:
        r = n % base
        s = digits[r] + s
        n = n / base
        if n == 0:
            break

    return s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I made a pip package for this.</p>
<p>I recommend you use my bases.py <a href="https://github.com/kamijoutouma/bases.py" rel="nofollow noreferrer">https://github.com/kamijoutouma/bases.py</a> which was inspired by bases.js</p>
<pre><code>from bases import Bases
bases = Bases()

bases.toBase16(200)                // =&gt; 'c8'
bases.toBase(200, 16)              // =&gt; 'c8'
bases.toBase62(99999)              // =&gt; 'q0T'
bases.toBase(200, 62)              // =&gt; 'q0T'
bases.toAlphabet(300, 'aAbBcC')    // =&gt; 'Abba'

bases.fromBase16('c8')               // =&gt; 200
bases.fromBase('c8', 16)             // =&gt; 200
bases.fromBase62('q0T')              // =&gt; 99999
bases.fromBase('q0T', 62)            // =&gt; 99999
bases.fromAlphabet('Abba', 'aAbBcC') // =&gt; 300
</code></pre>
<p>refer to <a href="https://github.com/kamijoutouma/bases.py#known-basesalphabets" rel="nofollow noreferrer">https://github.com/kamijoutouma/bases.py#known-basesalphabets</a>
for what bases are usable</p>
<p>EDIT:
pip link <a href="https://pypi.python.org/pypi/bases.py/0.2.2" rel="nofollow noreferrer">https://pypi.python.org/pypi/bases.py/0.2.2</a></p>
</div>
<div class="post-text" itemprop="text">
<h2>Recursive</h2>
<p>I would <strong>simplify</strong> the <a href="https://stackoverflow.com/a/2267428/6196010">most voted answer</a> to:</p>
<pre><code>BS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
def to_base(n, b): 
    return "0" if not n else to_base(n//b, b).lstrip("0") + BS[n%b]
</code></pre>
<p>With the same advice for <code>RuntimeError: maximum recursion depth exceeded in cmp</code> on very large integers and negative numbers. (You could use<a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer"><code>sys.setrecursionlimit(new_limit)</code></a>)</p>
<h2>Iterative</h2>
<p>To <strong>avoid recursion problems</strong>:</p>
<pre><code>BS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
def to_base(s, b):
    res = ""
    while s:
        res+=BS[s%b]
        s//= b
    return res[::-1] or "0"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def base(decimal ,base) :
    list = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    other_base = ""
    while decimal != 0 :
        other_base = list[decimal % base] + other_base
        decimal    = decimal / base
    if other_base == "":
        other_base = "0"
    return other_base

print base(31 ,16)
</code></pre>
<p>output:</p>
<blockquote>
<p>"1F"</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; def int2base(integer, base):
        if not integer: return '0'
        sign = 1 if integer &gt; 0 else -1
        alphanum = string.digits + string.ascii_lowercase
        nums = alphanum[:base]
        res = ''
        integer *= sign
        while integer:
                integer, mod = divmod(integer, base)
                res += nums[mod]
        return ('' if sign == 1 else '-') + res[::-1]


&gt;&gt;&gt; int2base(-15645, 23)
'-16d5'
&gt;&gt;&gt; int2base(213, 21)
'a3'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A recursive solution for those interested. Of course, this will not work with negative binary values. You would need to implement Two's Complement.</p>
<pre><code>def generateBase36Alphabet():
    return ''.join([str(i) for i in range(10)]+[chr(i+65) for i in range(26)])

def generateAlphabet(base):
    return generateBase36Alphabet()[:base]

def intToStr(n, base, alphabet):
    def toStr(n, base, alphabet):
        return alphabet[n] if n &lt; base else toStr(n//base,base,alphabet) + alphabet[n%base]
    return ('-' if n &lt; 0 else '') + toStr(abs(n), base, alphabet)

print('{} -&gt; {}'.format(-31, intToStr(-31, 16, generateAlphabet(16)))) # -31 -&gt; -1F
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def int2base(a, base, numerals="0123456789abcdefghijklmnopqrstuvwxyz"):
    baseit = lambda a=a, b=base: (not a) and numerals[0]  or baseit(a-a%b,b*base)+numerals[a%b%(base-1) or (a%b) and (base-1)]
    return baseit()
</code></pre>
<hr/>
<h2>explanation</h2>
<p>In any base every number is equal to <code>a1+a2*base**2+a3*base**3...</code> The "mission" is to find  all a 's.</p>
<p>For every<code>N=1,2,3...</code> the code is isolating the  <code>aN*base**N</code> by "mouduling" by b for <code>b=base**(N+1)</code>   which slice all a 's bigger than N, and slicing all the a 's that their serial is smaller than N by decreasing a everytime the func is called by the current <code>aN*base**N</code> .  </p>
<p>Base%(base-1)==1 therefor base**p%(base-1)==1 and therefor q*base^p%(base-1)==q with only one exception when q=base-1 which returns 0.
To fix that in case it returns 0 the func is checking is it 0 from the beggining.  </p>
<hr/>
<h2>advantages</h2>
<p>in this sample theres only one multiplications (instead of division) and some moudulueses which relatively takes small amounts of time.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def dec_to_radix(input, to_radix=2, power=None):
    if not isinstance(input, int):
        raise TypeError('Not an integer!')
    elif power is None:
        power = 1

    if input == 0:
        return 0
    else:
        remainder = input % to_radix**power
        digit = str(int(remainder/to_radix**(power-1)))
        return int(str(dec_to_radix(input-remainder, to_radix, power+1)) + digit)

def radix_to_dec(input, from_radix):
    if not isinstance(input, int):
        raise TypeError('Not an integer!')
    return sum(int(digit)*(from_radix**power) for power, digit in enumerate(str(input)[::-1]))

def radix_to_radix(input, from_radix=10, to_radix=2, power=None):
    dec = radix_to_dec(input, from_radix)
    return dec_to_radix(dec, to_radix, power)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another short one (and easier to understand imo):</p>
<pre><code>def int_to_str(n, b, symbols='0123456789abcdefghijklmnopqrstuvwxyz'):
    return (int_to_str(n/b, b, symbols) if n &gt;= b else "") + symbols[n%b]
</code></pre>
<p>And with proper exception handling:</p>
<pre><code>def int_to_str(n, b, symbols='0123456789abcdefghijklmnopqrstuvwxyz'):
    try:
        return (int_to_str(n/b, b) if n &gt;= b else "") + symbols[n%b]
    except IndexError:
        raise ValueError(
            "The symbols provided are not enough to represent this number in "
            "this base")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution, works with base 2 to 10, needs modification for higher bases:</p>
<pre><code>def n2b(n, b):
    if n == 0:
        return 0
    d = []
    while n:
        d.append(int(n % b))
        n /= b
    return ''.join(map(str,d[::-1]))
</code></pre>
<p>Example:</p>
<pre><code>n2b(10,2) =&gt; '10100'
int(n2b(10,2),2) =&gt; 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a recursive version that handles signed integers and custom digits.</p>
<pre><code>import string

def base_convert(x, base, digits=None):
    """Convert integer `x` from base 10 to base `base` using `digits` characters as digits.
    If `digits` is omitted, it will use decimal digits + lowercase letters + uppercase letters.
    """
    digits = digits or (string.digits + string.ascii_letters)
    assert 2 &lt;= base &lt;= len(digits), "Unsupported base: {}".format(base)
    if x == 0:
        return digits[0]
    sign = '-' if x &lt; 0 else ''
    x = abs(x)
    first_digits = base_convert(x // base, base, digits).lstrip(digits[0])
    return sign + first_digits + digits[x % base]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def baseConverter(x, b):
    s = ""
    d = string.printable.upper()
    while x &gt; 0:
        s += d[x%b]
        x = x / b
    return s[::-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>num = input("number")
power = 0
num = int(num)
while num &gt; 10:
    num = num / 10
    power += 1

print(str(round(num, 2)) + "^" + str(power))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings aren't the only choice for representing numbers: you can use a list of integers to represent the order of each digit. Those can easily be converted to a string.</p>
<p>None of the answers reject base &lt; 2; and most will run very slowly or crash with stack overflows for <em>very large</em> numbers (such as 56789 ** 43210). To avoid such failures, reduce quickly like this:</p>
<pre><code>def n_to_base(n, b):
    if b &lt; 2: raise # invalid base
    if abs(n) &lt; b: return [n]
    ret = [y for d in n_to_base(n, b*b) for y in divmod(d, b)]
    return ret[1:] if ret[0] == 0 else ret # remove leading zeros

def base_to_n(v, b):
    h = len(v) // 2
    if h == 0: return v[0]
    return base_to_n(v[:-h], b) * (b**h) + base_to_n(v[-h:], b)

assert ''.join(['0123456789'[x] for x in n_to_base(56789**43210,10)])==str(56789**43210)
</code></pre>
<p>Speedwise, <code>n_to_base</code> is comparable with <code>str</code> for large numbers (about 0.3s on my machine), but if you compare against <code>hex</code> you may be surprised (about 0.3ms on my machine, or 1000x faster). The reason is because the large integer is stored in memory in base 256 (bytes). Each byte can simply be converted to a two-character hex string. This alignment only happens for bases that are powers of two, which is why there are special cases for 2,8, and 16 (and base64, ascii, utf16, utf32).</p>
<p>Consider the last digit of a decimal string. How does it relate to the sequence of bytes that forms its integer? Let's label the bytes <code>s[i]</code> with <code>s[0]</code> being the least significant (little endian). Then the last digit is <code>sum([s[i]*(256**i) % 10 for i in range(n)])</code>. Well, it happens that 256**i ends with a 6 for i &gt; 0 (6*6=36) so that last digit is <code>(s[0]*5 + sum(s)*6)%10</code>. From this, you can see that the last digit depends on the sum of all the bytes. This nonlocal property is what makes converting to decimal harder.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have not seen any converters of float here. And I missed the grouping for always three digits.</p>
<p>TODO:</p>
<p>-numbers in scientific expression <code>(n.nnnnnn*10**(exp)</code> -- the <code>'10'</code> is <code>self.baseDigits[1::-1]/self.to_string(len (self.baseDigits))</code></p>
<p>-from_string-function.</p>
<p>-base 1 -&gt; roman numbers?</p>
<p>-repr of complex with agles</p>
<p>So here is my solution:</p>
<pre><code>DIGITS = "0123456789abcdefghijklmnopqrstuvwxyz"


# note that the order of the digits is reversed for digits before the point
NO_GROUPING = lambda g: g

concat = "".join
concat_backwards = lambda g: concat(e for e in reversed(list(g)))

def grouping(length = 3, char = '_'):
    def yieldor(digits):
        i = 0
        for d in digits:
            if i == length:
                yield char
                i = 0
            yield d
            i+=1

    return yieldor

class Converter:
    def __init__(self, baseDigits: (int, str), beforePoint = NO_GROUPING, afterPoint = NO_GROUPING, decimalPoint = '.', digitPrecision = 16, trimZeros = True):
        if isinstance(baseDigits, int):
            baseDigits = DIGITS[:baseDigits]
        self.baseDigits = baseDigits

        self.beforePoint = beforePoint
        self.afterPoint  = afterPoint

        self.decimalPoint = decimalPoint
        self.digitPrecision = digitPrecision
        self.trimZeros = trimZeros

    def to_string(self, number: (int, float, complex)) -&gt; str:
        if isinstance(number, complex):
            if number.imag == 0:
                return self.to_string(number.real)
            if number.real == 0:
                return self.to_string(number.imag) + 'j'
            return "({}+{}j)".format(self.to_string(number.real), self.to_string (number.imag))
        if number &lt; 0:
            return '-' + self.to_string(-number)
        digitCount = len(self.baseDigits)
        if isinstance(number, float):
            # round correctly
            precError=digitCount**-self.digitPrecision
            number+=0.5*precError
            if self.trimZeros:
                def yieldor(n):
                    p = precError
                    for i in range(self.digitPrecision):
                        if n &lt;= p:
                            return
                        p *= digitCount
                        n *= digitCount
                        digit = int(n)
                        n -= digit
                        yield self.baseDigits[digit]
            else:
                def yieldor(n):
                    for i in range(self.digitPrecision):
                        n *= digitCount
                        digit = int(n)
                        n -= digit
                        yield self.baseDigits[digit]

            a = concat(self.afterPoint(yieldor(number%1)))

            return (
                self.to_string(int(number)) + (a and self.decimalPoint + a)
            )

        else: #is int
            if not number: return self.baseDigits[0]
            def yieldor(n):
                while n:
                    n, digit = divmod(n, digitCount)
                    yield self.baseDigits[digit]
            return concat_backwards(self.beforePoint(yieldor(number)))

# some tests:
if __name__ == "__main__":
    def conv_test(num, digits, *argv, **kwv):
        print(num, "-&gt;", digits if isinstance(digits, int) else "{} ({})".format(len(digits), digits), Converter(digits, *argv, **kwv).to_string(num))
    conv_test(True, "ft")
    conv_test(123, 12, grouping(2))
    conv_test(-0xf00d, 16)
    conv_test(1000, True&lt;&lt;True, grouping(4))
    conv_test(1_000_000, "0+-", beforePoint = grouping(2, '|'))
    conv_test(1.5, 10)
    conv_test(0.999999999, 10, digitPrecision = 8)
    conv_test(-0.1, 10)

    import math
    conv_test(math.pi, 10, afterPoint = grouping(5, ' '))
    conv_test(0.123456789, 10, digitPrecision = 6)

    grSpc = grouping(1, ' ')
    conv_test(math.e, ["off", "on"], grSpc, grSpc, " dot ", digitPrecision = 7)

    conv_test(1 + 1.5j, 10)

    conv_test(50j, 10)

    conv_test(10.01, '-&lt;&gt;')

    # and generate some brainfuck-code here:
    conv_test(1701**42, '+-&lt;&gt;,.][', digitPrecision = 32)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def bn(x,b,ab="0123456789abcdefghijklmnopqrstuvwxyz..."
    a = ""
    while (x&gt;0):
        x,r = divmod(x,n)
        a += ab[r]
    return a[::-1]

bn(2**100, 36)
</code></pre>
<p><strong>output:</strong> </p>
<pre><code>3ewfdnca0n6ld1ggvfgg
</code></pre>
<p>to convert to any base, inverse is easy too.</p>
</div>
<span class="comment-copy">Surprisingly no one gave a solution which works with arbitrary big base (1023). If you need it, check my solution which works for every base (2 to inf) <a href="http://stackoverflow.com/a/28666223/1090562">stackoverflow.com/a/28666223/1090562</a></span>
<span class="comment-copy">Just in (gmpy2) case the func Alex speaks of seems to be <code>gmpy2.digits(x, base)</code>.</span>
<span class="comment-copy">It was brought to my attention that some cases need a base &gt; 36 and so digs should be <code>digs = string.digits + string.lowercase + string.uppercase</code></span>
<span class="comment-copy">(or <code>string.digits + string.letters</code>)</span>
<span class="comment-copy">Any idea why the convert-base-N-to-string isn't included by default in Python? (It is in Javascript.) Yeah, we can all write our own implementation, but I've been searching around on this site and elsewhere, and many of them have bugs. Better to have one tested, reputable version included in the core distribution.</span>
<span class="comment-copy">@lordscales91 You can also use <code>x //= base</code> which behaves like <code>/=</code> in Python 2 in dropping the decimal. This answer should include a disclaimer that it's for Python 2.</span>
<span class="comment-copy"><code>//</code> will <b>not</b> work in Python 2.2 ...</span>
<span class="comment-copy">Elegant in its brevity.  It seems to work under python 2.2.3 for non-negative integers.  A negative number infinitely recurses.</span>
<span class="comment-copy">+1 useful; fixed a problem when numerals didn't start with '0'</span>
<span class="comment-copy">This fails silently (a) when base is &gt; <code>len(numerals)</code>, and (b) <code>num % b</code> is, by luck, &lt; <code>len(numerals)</code>.  e.g. although the <code>numerals</code> string is only 36 characters in length, baseN(60, 40) returns <code>'1k'</code> while baseN(79, 40) raises an <code>IndexError</code>.  Both should raise some kind of error.  The code should be revised to raise an error if <code>not 2 &lt;= base &lt;= len(numerals)</code>.</span>
<span class="comment-copy">@osa, my point is the code as-written fails in a very bad way (silently, giving misleading answer) and could be fixed easily. If you are saying there would be no error if you knew in advance, for certain, that <code>b</code> would not exceed <code>len(numerals)</code>, well, good luck to you.</span>
<span class="comment-copy">For Python 3, you need <code>n //= b</code> instead of <code>n /= b</code> because of "true division". It's an easy thing to miss, so I'm mentioning it here.</span>
<span class="comment-copy">In college I came up with a function that formatted bases below 20 into standard notation, and bases 20 and over into 'colon delimited decimal'. For example, <code>int(4545,16)</code> gave "11c1" and <code>int(4545,60)</code> gave "1:15:45". Thus the function did triple duty: converting to decimal, computerish, and timestamp formats.</span>
<span class="comment-copy">But it only does those three bases?</span>
<span class="comment-copy">Yes, unfortunately you can't specify custom int base. More info is here: <a href="http://docs.python.org/library/string.html#formatstrings" rel="nofollow noreferrer">docs.python.org/library/string.html#formatstrings</a></span>
<span class="comment-copy">The <code>0</code> is unnecessary. Here's the Python 2 documentation: <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">docs.python.org/2/library/string.html#format-string-syntax</a></span>
<span class="comment-copy">You can achieve the same results with <code>hex(100)[2:]</code>, <code>oct(100)[2:]</code> and <code>bin(100)[2:]</code>.</span>
<span class="comment-copy">@EvgeniSergeev: It's only unnecessary on 2.7/3.1+. On 2.6, the explicit position (or name) is required.</span>
<span class="comment-copy">How do you convert the base64 output of our function back to an integer?</span>
<span class="comment-copy">This works like a charm for the <a href="https://github.com/kamijoutouma/bases.py#known-basesalphabets" rel="nofollow noreferrer">known bases specified</a>.</span>
<span class="comment-copy">This is by far the best answer! And thanks for the pip packaging!</span>
<span class="comment-copy">Beautifully refactored, and without library.</span>
<span class="comment-copy"><code>other-base</code> is the same as <code>other - base</code>, so you should use <code>other_base</code></span>
<span class="comment-copy">Also, this doesn't work correctly if <code>decimal</code> is zero.</span>
<span class="comment-copy"><a href="https://xkcd.com/1185/" rel="nofollow noreferrer">StackSort</a></span>
<span class="comment-copy">For python3 your code does this:  baseConverter(0, 26) -&gt; '' baseConverter(1, 26) -&gt; '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'  For python2 it does this:  baseConverter(0, 26) -&gt; '' baseConverter(1, 26) -&gt; 1 baseConverter(3, 26) -&gt; 3 baseConverter(5, 26) -&gt; 5 baseConverter(26, 26) -&gt; 10 baseConverter(32, 26) -&gt; 16</span>
<span class="comment-copy">please add some brief information that what you did special init</span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and/or links to documentation. Raw code snippets are not very helpful without some phrases around them. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
<span class="comment-copy">Got <code>NameError: global name 'n' is not defined</code>. Is <code>divmod(x, n)</code> supposed to be <code>divmod(x, b)</code>?</span>
