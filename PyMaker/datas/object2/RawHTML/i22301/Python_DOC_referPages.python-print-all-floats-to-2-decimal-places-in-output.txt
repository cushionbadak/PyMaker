<div class="post-text" itemprop="text">
<p>I need to output 4 different floats to two decimal places.</p>
<p>This is what I have:</p>
<pre><code>print '%.2f' % var1,'kg =','%.2f' % var2,'lb =','%.2f' % var3,'gal =','%.2f' % var4,'l'
</code></pre>
<p>Which is very unclean, and looks bad. Is there a way to make any float in that out put '%.2f'? </p>
<p>Note: Using Python 2.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well I would atleast clean it up as follows:</p>
<pre><code>print "%.2f kg = %.2f lb = %.2f gal = %.2f l" % (var1, var2, var3, var4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to convert the values to nice looking strings do the following: </p>
<pre><code>twodecimals = ["%.2f" % v for v in vars]
</code></pre>
<p>Alternatively, you could also print out the units like you have in your question:</p>
<pre><code>vars = [0, 1, 2, 3] # just some example values
units = ['kg', 'lb', 'gal', 'l']
delimiter = ', ' # or however you want the values separated

print delimiter.join(["%.2f %s" % (v,u) for v,u in zip(vars, units)])
Out[189]: '0.00 kg, 1.00 lb, 2.00 gal, 3.00 l'
</code></pre>
<p>The second way allows you to easily change the delimiter (tab, spaces, newlines, whatever) to suit your needs easily; the delimiter could also be a function argument instead of being hard-coded.</p>
<p><strong>Edit:</strong> To use your 'name = value' syntax simply change the element-wise operation within the list comprehension:</p>
<pre><code>print delimiter.join(["%s = %.2f" % (u,v) for v,u in zip(vars, units)])
Out[190]: 'kg = 0.00, lb = 1.00, gal = 2.00, l = 3.00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Format String Syntax.</p>
<p><a href="https://docs.python.org/3/library/string.html#formatstrings" rel="noreferrer">https://docs.python.org/3/library/string.html#formatstrings</a></p>
<pre><code>from math import pi
var1, var2, var3, var4 = pi, pi*2, pi*3, pi*4
'{:0.2f}, kg={:0.2f}, lb={:0.2f}, gal={:0.2f}'.format(var1, var2, var3, var4)
</code></pre>
<p>The output would be:</p>
<pre><code>'3.14, kg=6.28, lb=9.42, gal=12.57'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for readability, I believe that this is that code:</p>
<pre><code>print '%(kg).2f kg = %(lb).2f lb = %(gal).2f gal = %(l).2f l' % {
    'kg': var1,
    'lb': var2,
    'gal': var3,
    'l': var4,
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have just discovered the round function - it is in Python 2.7, not sure about 2.6. It takes a float and the number of dps as arguments, so round(22.55555, 2) gives the result 22.56. </p>
</div>
<div class="post-text" itemprop="text">
<p>If what you want is to have the print operation automatically change floats to only show 2 decimal places, consider writing a function to replace 'print'.  For instance:</p>
<pre><code>def fp(*args):  # fp means 'floating print'
    tmps = []
    for arg in args:
        if type(arg) is float: arg = round(arg, 2)  # transform only floats
        tmps.append(str(arg))
    print(" ".join(tmps)
</code></pre>
<p>Use fp() in place of print ...</p>
<p><code>fp("PI is", 3.14159)</code> ... instead of ... <code>print "PI is", 3.14159</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Not directly in the way you want to write that, no. One of the design tenets of Python is "Explicit is better than implicit" (see <code>import this</code>). This means that it's better to describe what you want rather than having the output format depend on some global formatting setting or something.  You could of course format your code differently to make it look nicer:</p>
<pre><code>print         '%.2f' % var1, \
      'kg =' ,'%.2f' % var2, \
      'lb =' ,'%.2f' % var3, \
      'gal =','%.2f' % var4, \
      'l'
</code></pre>
</div>
<span class="comment-copy">First of all I'd just use two quotation marks: <code>print '%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4)</code></span>
<span class="comment-copy"><a href="http://docs.python.org/library/functions.html#round" rel="nofollow noreferrer"><code>round()</code></a> has been around in Python for a <i>long</i> time; it most certainly is available in Python 2.6.</span>
