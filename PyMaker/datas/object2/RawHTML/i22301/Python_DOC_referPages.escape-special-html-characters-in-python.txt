<div class="post-text" itemprop="text">
<p>I have a string where special characters like <code>'</code> or <code>"</code> or <code>&amp;</code> (...) can appear. In the string:</p>
<pre><code>string = """ Hello "XYZ" this 'is' a test &amp; so on """
</code></pre>
<p>how can I automatically escape every special character, so that I get this:</p>
<pre><code>string = " Hello &amp;quot;XYZ&amp;quot; this &amp;#39;is&amp;#39; a test &amp;amp; so on "
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.2, you could use the <a href="http://docs.python.org/3/library/html.html#html.escape" rel="noreferrer"><code>html.escape</code> function</a>, e.g.</p>
<pre><code>&gt;&gt;&gt; string = """ Hello "XYZ" this 'is' a test &amp; so on """
&gt;&gt;&gt; import html
&gt;&gt;&gt; html.escape(string)
' Hello &amp;quot;XYZ&amp;quot; this &amp;#x27;is&amp;#x27; a test &amp;amp; so on '
</code></pre>
<p>For earlier versions of Python, check <a href="http://wiki.python.org/moin/EscapingHtml" rel="noreferrer">http://wiki.python.org/moin/EscapingHtml</a>:</p>
<blockquote>
<p>The <a href="http://docs.python.org/3/library/cgi.html" rel="noreferrer"><code>cgi</code> module</a> that comes with Python has an <a href="http://docs.python.org/3/library/cgi.html#cgi.escape" rel="noreferrer"><code>escape()</code> function</a>: </p>
<pre><code>import cgi

s = cgi.escape( """&amp; &lt; &gt;""" )   # s = "&amp;amp; &amp;lt; &amp;gt;"
</code></pre>
<p>However, it doesn't escape characters beyond <code>&amp;</code>, <code>&lt;</code>, and <code>&gt;</code>. If it is used as <code>cgi.escape(string_to_escape, quote=True)</code>, it also escapes <code>"</code>. </p>
<hr/>
<p>Here's a small snippet that will let you escape quotes and apostrophes as well: </p>
<pre><code> html_escape_table = {
     "&amp;": "&amp;amp;",
     '"': "&amp;quot;",
     "'": "&amp;apos;",
     "&gt;": "&amp;gt;",
     "&lt;": "&amp;lt;",
     }

 def html_escape(text):
     """Produce entities within text."""
     return "".join(html_escape_table.get(c,c) for c in text)
</code></pre>
<hr/>
<p>You can also use <a href="http://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.escape" rel="noreferrer"><code>escape()</code> from <code>xml.sax.saxutils</code></a> to escape html. This function should execute faster. The <code>unescape()</code> function of the same module can be passed the same arguments to decode a string. </p>
<pre><code>from xml.sax.saxutils import escape, unescape
# escape() and unescape() takes care of &amp;, &lt; and &gt;.
html_escape_table = {
    '"': "&amp;quot;",
    "'": "&amp;apos;"
}
html_unescape_table = {v:k for k, v in html_escape_table.items()}

def html_escape(text):
    return escape(text, html_escape_table)

def html_unescape(text):
    return unescape(text, html_unescape_table)
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/cgi.html#functions" rel="noreferrer">cgi.escape</a> method will convert special charecters to valid html tags</p>
<pre><code> import cgi
 original_string = 'Hello "XYZ" this \'is\' a test &amp; so on '
 escaped_string = cgi.escape(original_string, True)
 print original_string
 print escaped_string
</code></pre>
<p>will result in</p>
<pre><code>Hello "XYZ" this 'is' a test &amp; so on 
Hello &amp;quot;XYZ&amp;quot; this 'is' a test &amp;amp; so on 
</code></pre>
<p>The optional second paramter on cgi.escape escapes quotes. By default, they are not escaped</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple string function will do it:</p>
<pre><code>def escape(t):
    """HTML-escape the text in `t`."""
    return (t
        .replace("&amp;", "&amp;amp;").replace("&lt;", "&amp;lt;").replace("&gt;", "&amp;gt;")
        .replace("'", "&amp;#39;").replace('"', "&amp;quot;")
        )
</code></pre>
<p>Other answers in this thread have minor problems: The cgi.escape method for some reason ignores single-quotes, and you need to explicitly ask it to do double-quotes.  The wiki page linked does all five, but uses the XML entity <code>&amp;apos;</code>, which isn't an HTML entity.</p>
<p>This code function does all five all the time, using HTML-standard entities.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers here will help with such as the characters you listed and a few others. However, if you also want to convert everything else to entity names, too, you'll have to do something else. For instance, if <code>á</code> needs to be converted to <code>&amp;aacute;</code>, neither <code>cgi.escape</code> nor <code>html.escape</code> will help you there. You'll want to do something like this that uses <code>html.entities.entitydefs</code>, which is just a dictionary. (The following code is made for Python 3.x, but there's a partial attempt at making it compatible with 2.x to give you an idea):</p>
<pre><code># -*- coding: utf-8 -*-

import sys

if sys.version_info[0]&gt;2:
    from html.entities import entitydefs
else:
    from htmlentitydefs import entitydefs

text=";\"áèïøæỳ" #This is your string variable containing the stuff you want to convert
text=text.replace(";", "$ஸ$") #$ஸ$ is just something random the user isn't likely to have in the document. We're converting it so it doesn't convert the semi-colons in the entity name into entity names.
text=text.replace("$ஸ$", "&amp;semi;") #Converting semi-colons to entity names

if sys.version_info[0]&gt;2: #Using appropriate code for each Python version.
    for k,v in entitydefs.items():
        if k not in {"semi", "amp"}:
            text=text.replace(v, "&amp;"+k+";") #You have to add the &amp; and ; manually.
else:
    for k,v in entitydefs.iteritems():
        if k not in {"semi", "amp"}:
            text=text.replace(v, "&amp;"+k+";") #You have to add the &amp; and ; manually.

#The above code doesn't cover every single entity name, although I believe it covers everything in the Latin-1 character set. So, I'm manually doing some common ones I like hereafter:
text=text.replace("ŷ", "&amp;ycirc;")
text=text.replace("Ŷ", "&amp;Ycirc;")
text=text.replace("ŵ", "&amp;wcirc;")
text=text.replace("Ŵ", "&amp;Wcirc;")
text=text.replace("ỳ", "&amp;#7923;")
text=text.replace("Ỳ", "&amp;#7922;")
text=text.replace("ẃ", "&amp;wacute;")
text=text.replace("Ẃ", "&amp;Wacute;")
text=text.replace("ẁ", "&amp;#7809;")
text=text.replace("Ẁ", "&amp;#7808;")

print(text)
#Python 3.x outputs: &amp;semi;&amp;quot;&amp;aacute;&amp;egrave;&amp;iuml;&amp;oslash;&amp;aelig;&amp;#7923;
#The Python 2.x version outputs the wrong stuff. So, clearly you'll have to adjust the code somehow for it.
</code></pre>
</div>
<span class="comment-copy">Thank you for <code>quote=True</code> in <code>cgi.escape</code></span>
<span class="comment-copy">Note, a number of your replacements aren't HTML compliant. One for example: <a href="https://www.w3.org/TR/xhtml1/#C_16" rel="nofollow noreferrer">w3.org/TR/xhtml1/#C_16</a> Instead of &amp;apos;, use &amp;#39; I guess a few others were added to the HTML4 standard, but that one wasn't.</span>
<span class="comment-copy">I don't understand why cgi.escape is so squeamish about converting quotes, and ignores single quotes entirely.</span>
<span class="comment-copy">Because quotes do not need to be escaped in PCDATA, they <i>do</i> need to be escaped in attributes (which, far more often than not, use double quotes for delimiters), and the former case is far more common than the latter.  In general, it's a textbook 90% solution (more like &gt;99%).  If you have to save every last byte and want it to dynamically figure out which type of quoting does so, use <code>xml.sax.saxutils.quoteattr()</code>.</span>
