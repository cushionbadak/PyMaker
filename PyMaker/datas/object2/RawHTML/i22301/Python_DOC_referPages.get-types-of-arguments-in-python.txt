<div class="post-text" itemprop="text">
<p>I'm learning python. I like to use help() or interinspect.getargspec to get information of functions in shell. But is there anyway I can get the argument/return type of function.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you mean during a certain call of the function, the function itself can get the types of its arguments by calling <code>type</code> on each of them (and will certainly know the type it returns).</p>
<p>If you mean from outside the function, no: the function can be called with arguments of any types -- some such calls will produce errors, but there's no way to know a priori which ones they will be.</p>
<p>Parameters can be optionally decorated in Python 3, and one possible use of such decoration is to express something about the parameters' types (and/or other constraints on them), but the language and standard library offer no guidance on how such decoration might be used.  You might as well adopt a standard whereby such constraints are expressed in a structured way in the function's docstring, which would have the advantage of being applicable to any version of Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the 3.4.2 documentation <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow">https://docs.python.org/3/library/inspect.html</a>, there is a mention of what you exactly need (namely getting the types of arguments to a function).</p>
<p>You will first need to define your function like this:</p>
<pre><code>def f(a: int, b: float, c: dict, d: list, &lt;and so on depending on number of parameters and their types&gt;):
</code></pre>
<p>Then you can use <code>formatargspec(*getfullargspec(f))</code> which returns a nice hash like this:</p>
<pre><code>(a: int, b: float)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a function called <code>type()</code>.<br/>
<a href="http://docs.python.org/library/functions.html#type" rel="nofollow noreferrer">Here are the docs</a></p>
<p>You can't tell in advance what type a function will return</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; def f():
...  c=random.choice("IFSN")
...  if c=="I":
...   return 1
...  elif c=="F":
...   return 1.0
...  elif c=="S":
...   return '1'
...  return None
... 
&gt;&gt;&gt; type(f())
&lt;type 'float'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'float'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'int'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'str'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'float'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'float'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; type(f())
&lt;type 'str'&gt;
</code></pre>
<p>It is usually good practise to only return one type of object from a function, but Python does not force that upon you</p>
</div>
<div class="post-text" itemprop="text">
<p>Easy way is to use <strong><a href="http://bpython-interpreter.org/" rel="nofollow noreferrer">bpython</a></strong></p>
<p>Python Learning gets easy &amp; fun again!</p>
<p><a href="http://www.noiseforfree.com/bpython/img/bpython01.png" rel="nofollow noreferrer">alt text http://www.noiseforfree.com/bpython/img/bpython01.png</a></p>
</div>
<span class="comment-copy">What's wrong with the <code>help</code> text?  What's wrong with reading the code itself?</span>
<span class="comment-copy">Of course it's wrong. Do you really like reading source code when you just want to call a method.</span>
<span class="comment-copy">This question is from 2010...well before 3.4.2 existed. I'd consider removing this answer.</span>
