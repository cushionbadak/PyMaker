<div class="post-text" itemprop="text">
<p>I am trying to verify the that target exposes a https web service. I have code to connect via HTTP but I am not sure how to connect via HTTPS. I have read you use SSL but I have also read that it did not support certificate errors. The code I have got is from the python docs:</p>
<pre><code>import httplib
conn = httplib.HTTPConnection("www.python.org")
conn.request("GET", "/index.html")
r1 = conn.getresponse()
print r1.status, r1.reason
</code></pre>
<p>Does anyone know how to connect to HTTPS?</p>
<p>I already tried the HTTPSConenction but it responds with an error code claiming httplib does not have attribute HTTPSConnection. I also don't have socket.ssl available.</p>
<p>I have installed Python 2.6.4 and I don't think it has SSL support compiled into it. Is there a way to integrate this suppot into the newer python without having to install it again.</p>
<p>I have installed OpenSSL and pyOpenSsl and I have tried the below code from one of the answers:</p>
<pre><code>import urllib2
from OpenSSL import SSL
try: 
    response = urllib2.urlopen('https://example.com')  
    print 'response headers: "%s"' % response.info() 
except IOError, e: 
    if hasattr(e, 'code'): # HTTPError 
        print 'http error code: ', e.code 
    elif hasattr(e, 'reason'): # URLError 
        print "can't connect, reason: ", e.reason 
    else: 
        raise
</code></pre>
<p>I have got an error:</p>
<pre><code>    Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
  File "/home/build/workspace/downloads/Python-2.6.4/Lib/urllib.py", line 87, in urlopen
    return opener.open(url)
  File "/home/build/workspace/downloads/Python-2.6.4/Lib/urllib.py", line 203, in open
    return self.open_unknown(fullurl, data)
  File "/home/build/workspace/downloads/Python-2.6.4/Lib/urllib.py", line 215, in open_unknown
    raise IOError, ('url error', 'unknown url type', type)
IOError: [Errno url error] unknown url type: 'https'
</code></pre>
<p>Does anyone know how to get this working?</p>
<pre><code>-- UPDATE
</code></pre>
<p>I have found out what the problem was, the Python version I was using did not have support for SSL. I have found this solution currently at: <a href="http://www.webtop.com.au/compiling-python-with-ssl-support" rel="noreferrer">http://www.webtop.com.au/compiling-python-with-ssl-support</a>. </p>
<p>The code will now work after this solution which is very good. When I import ssl and HTTPSConnection I know don't get an error.</p>
<p>Thanks for the help all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.x: <a href="https://docs.python.org/2/library/httplib.html" rel="noreferrer">docs.python.org/2/library/httplib.html</a>:</p>
<blockquote>
<p>Note: HTTPS support is only available if the socket module was compiled with SSL support.</p>
</blockquote>
<p>Python 3.x: <a href="https://docs.python.org/3/library/http.client.html" rel="noreferrer">docs.python.org/3/library/http.client.html</a>:</p>
<blockquote>
<p>Note HTTPS support is only available if Python was compiled with SSL support (through the ssl module).</p>
</blockquote>
<pre><code>#!/usr/bin/env python

import httplib
c = httplib.HTTPSConnection("ccc.de")
c.request("GET", "/")
response = c.getresponse()
print response.status, response.reason
data = response.read()
print data
# =&gt; 
# 200 OK
# &lt;!DOCTYPE html ....
</code></pre>
<p>To verify if SSL is enabled, try:</p>
<pre><code>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.ssl
&lt;function ssl at 0x4038b0&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check for <a href="http://docs.python.org/library/ssl.html" rel="nofollow noreferrer">ssl support in Python 2.6+</a>:</p>
<pre><code>try:
    import ssl
except ImportError:
    print "error: no ssl support"
</code></pre>
<p>To connect via <a href="https://stackoverflow.com/questions/1935939/python-send-cmd-on-socket/1936923#1936923">https</a>:</p>
<pre><code>import urllib2

try:
    response = urllib2.urlopen('https://example.com') 
    print 'response headers: "%s"' % response.info()
except IOError, e:
    if hasattr(e, 'code'): # HTTPError
        print 'http error code: ', e.code
    elif hasattr(e, 'reason'): # URLError
        print "can't connect, reason: ", e.reason
    else:
        raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using </p>
<pre><code>class httplib.HTTPSConnection
</code></pre>
<p><a href="http://docs.python.org/library/httplib.html#httplib.HTTPSConnection" rel="noreferrer">http://docs.python.org/library/httplib.html#httplib.HTTPSConnection</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import requests
r = requests.get("https://stackoverflow.com") 
data = r.content  # Content of response

print r.status_code  # Status code of response
print data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why haven't you tried httplib.HTTPSConnection? It doesn't do SSL validation but this isn't required to connect over https.
Your code works fine with https connection:</p>
<pre><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPSConnection("mail.google.com")
&gt;&gt;&gt; conn.request("GET", "/")
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
200 OK
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If using <strong>httplib.HTTPSConnection:</strong></p>
<p>Please take a look at:
Changed in version 2.7.9: </p>
<p>This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior ssl._create_unverified_context() can be passed to the context parameter. You can use:</p>
<pre><code>if hasattr(ssl, '_create_unverified_context'):
            ssl._create_default_https_context = ssl._create_unverified_context
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming SSL support is enabled for the <code>socket</code> module.</p>
<pre><code>connection1 = httplib.HTTPSConnection('www.somesecuresite.com')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had some code that was failing with an <code>HTTPConnection (MOVED_PERMANENTLY error)</code>, but as soon as I switched to <code>HTTPS</code> it worked perfectly again with no other changes needed.  That's a very simple fix!  </p>
</div>
<span class="comment-copy">Note that this doesn't verify the remote certificate, therefore you don't really get security this way (as you don't really know which server you're really talking to).</span>
<span class="comment-copy">The link is dead.</span>
<span class="comment-copy">+1 for using <code>example.com</code>.</span>
<span class="comment-copy">It does not work. <code>&lt;Response [200]&gt;</code></span>
<span class="comment-copy">@notilas, this code does work.  If you just print <code>r</code>, you will get a string version of the response object itself rather than the content of the response, which is what you typed above, <code>&lt;Resposne [200]&gt;</code>.  That is simply saying that the request was successful (200 is the HTTP code for success).  Try looking at <code>r.content</code> or <code>r.text</code> (or <code>r.json()</code> if you're content is JSON) to get the actual result of the request.</span>
<span class="comment-copy">@bjg222 Thanks for kind explanation.</span>
<span class="comment-copy">How is this different compared to other answers? Maybe try to elaborate a bit more.</span>
