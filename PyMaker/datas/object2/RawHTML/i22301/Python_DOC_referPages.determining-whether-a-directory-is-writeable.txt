<div class="post-text" itemprop="text">
<p>What would be the best way in Python to determine whether a directory is writeable for the user executing the script? Since this will likely involve using the os module I should mention I'm running it under a *nix environment. </p>
</div>
<div class="post-text" itemprop="text">
<p>Although what Christophe suggested is a more Pythonic solution, the os module does have <a href="https://docs.python.org/3/library/os.html#os.access" rel="nofollow noreferrer">the os.access function</a> to check access:</p>
<p><code>os.access('/path/to/folder', os.W_OK)</code> # W_OK is for writing, R_OK for reading, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>It may seem strange to suggest this, but a common Python idiom is </p>
<blockquote>
<p>It's easier to ask for forgiveness
  than for permission</p>
</blockquote>
<p>Following that idiom, one might say:</p>
<p>Try writing to the directory in question, and catch the error if you don't have the permission to do so.</p>
</div>
<div class="post-text" itemprop="text">
<p>My solution using the <code>tempfile</code> module:</p>
<pre><code>import tempfile
import errno

def isWritable(path):
    try:
        testfile = tempfile.TemporaryFile(dir = path)
        testfile.close()
    except OSError as e:
        if e.errno == errno.EACCES:  # 13
            return False
        e.filename = path
        raise
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Stumbled across this thread searching for examples for someone. First result on Google, congrats!</p>
<p>People talk about the Pythonic way of doing it in this thread, but no simple code examples? Here you go, for anyone else who stumbles in:</p>
<pre><code>import sys

filepath = 'C:\\path\\to\\your\\file.txt'

try:
    filehandle = open( filepath, 'w' )
except IOError:
    sys.exit( 'Unable to write to file ' + filepath )

filehandle.write("I am writing this text to the file\n")
</code></pre>
<p>This attempts to open a filehandle for writing, and exits with an error if the file specified cannot be written to: This is far easier to read, and is a much better way of doing it rather than doing prechecks on the file path or the directory, as it avoids race conditions; cases where the file becomes unwriteable between the time you run the precheck, and when you actually attempt to write to the file. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you only care about the file perms, <code>os.access(path, os.W_OK)</code> should do what you ask for. If you instead want to know whether you <strong>can</strong> write to the directory, <code>open()</code> a test file for writing (it shouldn't exist beforehand), catch and examine any <code>IOError</code>, and clean up the test file afterwards.</p>
<p>More generally, to avoid <a href="http://en.wikipedia.org/wiki/TOCTOU" rel="noreferrer">TOCTOU</a> attacks (only a problem if your script runs with elevated privileges -- suid or cgi or so), you shouldn't really trust these ahead-of-time tests, but drop privs, do the <code>open()</code>, and expect the <code>IOError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check the mode bits: </p>
<pre><code>def isWritable(name):
  uid = os.geteuid()
  gid = os.getegid()
  s = os.stat(dirname)
  mode = s[stat.ST_MODE]
  return (
     ((s[stat.ST_UID] == uid) and (mode &amp; stat.S_IWUSR)) or
     ((s[stat.ST_GID] == gid) and (mode &amp; stat.S_IWGRP)) or
     (mode &amp; stat.S_IWOTH)
     )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is something I created based on ChristopheD's answer:</p>
<pre><code>import os

def isWritable(directory):
    try:
        tmp_prefix = "write_tester";
        count = 0
        filename = os.path.join(directory, tmp_prefix)
        while(os.path.exists(filename)):
            filename = "{}.{}".format(os.path.join(directory, tmp_prefix),count)
            count = count + 1
        f = open(filename,"w")
        f.close()
        os.remove(filename)
        return True
    except Exception as e:
        #print "{}".format(e)
        return False

directory = "c:\\"
if (isWritable(directory)):
    print "directory is writable"
else:
    print "directory is not writable"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> if os.access(path_to_folder, os.W_OK) is not True:
            print("Folder not writable")
 else :
            print("Folder writable")
</code></pre>
<p>more info about access can be find it <a href="https://www.tutorialspoint.com/python/os_access.htm" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I ran into this same need while adding an argument via argparse. The built in <code>type=FileType('w')</code> wouldn't work for me as I was looking for a directory. I ended up writing my own method to solve my problem. Here is the result with argparse snippet.</p>
<pre><code>#! /usr/bin/env python
import os
import argparse

def writable_dir(dir):
    if os.access(dir, os.W_OK) and os.path.isdir(dir):
        return os.path.abspath(dir)
    else:
        raise argparse.ArgumentTypeError(dir + " is not writable or does not exist.")

parser = argparse.ArgumentParser()
parser.add_argument("-d","--dir", type=writable_dir(), default='/tmp/',
    help="Directory to use. Default: /tmp")
opts = parser.parse_args()
</code></pre>
<p>That results in the following:</p>
<pre><code>$ python dir-test.py -h
usage: dir-test.py [-h] [-d DIR]

optional arguments:
  -h, --help         show this help message and exit
  -d DIR, --dir DIR  Directory to use. Default: /tmp

$ python dir-test.py -d /not/real
usage: dir-test.py [-h] [-d DIR]
dir-test.py: error: argument -d/--dir: /not/real is not writable or does not exist.

$ python dir-test.py -d ~
</code></pre>
<p>I went back and added <strong>print opts.dir</strong> to the end, and everything appears to be functioning as desired.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to check the permission of <strong>another user</strong> (yes, I realize this contradicts the question, but may come in handy for someone), you can do it through the <code>pwd</code> module, and the directory's mode bits.</p>
<p><strong>Disclaimer</strong> - does not work on Windows, as it doesn't use the POSIX permissions model (and the <code>pwd</code> module is not available there), e.g. - solution only for *nix systems.</p>
<p>Note that a directory has to have all the 3 bits set - Read, Write and eXecute.<br/>
Ok, R is not an absolute must, but w/o it you cannot list the entries in the directory (so you have to know their names). Execute on the other hand is absolutely needed - w/o it the user cannot read the file's inodes; so even having W, without X files cannot be created or modified. <a href="https://wpollock.com/AUnix1/FilePermissions.htm" rel="nofollow noreferrer">More detailed explanation at this link.</a></p>
<p>Finally, the modes are available in the <code>stat</code> module, their <a href="http://man7.org/linux/man-pages/man7/inode.7.html" rel="nofollow noreferrer">descriptions are in inode(7) man</a>.</p>
<p>Sample code how to check:</p>
<pre><code>import pwd
import stat
import os

def check_user_dir(user, directory):
    dir_stat = os.stat(directory)

    user_id, group_id = pwd.getpwnam(user).pw_uid, pwd.getpwnam(user).pw_gid
    directory_mode = dir_stat[stat.ST_MODE]

    # use directory_mode as mask 
    if user_id == dir_stat[stat.ST_UID] and stat.S_IRWXU &amp; directory_mode == stat.S_IRWXU:     # owner and has RWX
        return True
    elif group_id == dir_stat[stat.ST_GID] and stat.S_IRWXG &amp; directory_mode == stat.S_IRWXG:  # in group &amp; it has RWX
        return True
    elif stat.S_IRWXO &amp; directory_mode == stat.S_IRWXO:                                        # everyone has RWX
        return True

    # no permissions
    return False
</code></pre>
</div>
<span class="comment-copy">Depending on the situation, the "easier to ask for forgiveness" is not the best way, even in Python. It is sometimes advisable to "ask permission" as with the os.access() method mentioned, for example when the probability of having to catch an error is high.</span>
<span class="comment-copy">Testing a directory for just the write bit isn't enough if you want to write files to the directory. You will need to test for the execute bit as well if you want to write into the directory. os.access('/path/to/folder', os.W_OK | os.X_OK) With os.W_OK by itself you can only delete the directory (and only if that directory is empty)</span>
<span class="comment-copy">Another gotcha of <code>os.access()</code> is it checks using the <i>real</i> UID and GID, not the <i>effective</i> ones. This could cause weirdness in SUID/SGID environments. (‘but the script runs setuid root, why can't it write to the file?’)</span>
<span class="comment-copy">I will look it up, but it would be useful to see what os.access() returns here in the solution.  I presume it's a boolean.</span>
<span class="comment-copy">Maybe a program just wants to know without having the need to actually write. It might just want to change the look and/or behaviour of a GUI according to the property. In that case I would not consider it pythonic to write and delete a file just as a test.</span>
<span class="comment-copy">+1 Python or not, this is really the most reliable way to test for access.</span>
<span class="comment-copy">This also takes care of other errors that can happen when writing to the disk - no diskspace left for example. That's the power of trying .. you dont need to remember everything that can go wrong ;-)</span>
<span class="comment-copy">Thanks guys. Decided to go with os.access as speed is an important factor in what I'm doing here although I can certainly understand the merits in "it's easier to ask for forgiveness than for permission." ;)</span>
<span class="comment-copy">@illuminatedtiger: that's perfectfly fine, just be aware of the notes in the documentation (<a href="http://docs.python.org/library/os.html#os.access" rel="nofollow noreferrer">docs.python.org/library/os.html#os.access</a>)</span>
<span class="comment-copy">It's a great IDIO...m - especially when coupled with another idiom <code>except: pass</code> - this way you can always be optimistic and think highly of yourself. /sarcasm off. Now why would I want to, e.g. try to write something into every directory in my filesystem, to produce a list of writable locations?</span>
<span class="comment-copy">I think the one using tempfile is the cleaner because it for sure doesnt leave residuals.</span>
<span class="comment-copy">this method is not working using <code>tempfile</code>. it only works when there is no <code>OSError</code> meaning it has permission to write/delete. otherwise it will not <code>return False</code> because no error is returned, and the script won't continue to execute or exit. nothing is returned. it's just stuck at that line. however, creating a non-temporary file such as khattam's answer does work both when permission is allowed or denied. help?</span>
<span class="comment-copy">This applies to a file, not directory which is what the OP asked. You can have a file in a directory and have the directory not be writable but the file itself is, should the file already exist. This may be important in systems administration where you're eg creating log files that you want to already exist but don't want people using a log directory for temp space.</span>
<span class="comment-copy">...and actually I voted it down, which I now think was a mistake. There are issues, as Rohaq mentioned, with race conditions. There are other issues on various platforms where you may test the directory, and it looks writable, but it actually isn't. Performing cross-platform directory writable checks is harder than it looks. So as long as you're aware of the issues, this may be a fine technique. I was looking at it from a too UNIX-y perspective, which is my mistake. Someone edit this answer so I can remove my -1.</span>
<span class="comment-copy">I've edited it, in case you want to remove the -1 :)  And yes, cross-platform directory checks can get more complicated, but generally you're looking to create/write to a file in that directory - in which case the example I've given should still apply. If some directory permission related issue comes up, it should still throw an IOError when attempting to open the filehandle.</span>
<span class="comment-copy">I removed my downvote. Sorry about that, and thanks for your contribution.</span>
<span class="comment-copy">No worries, people questioning answers is always welcomed!</span>
<span class="comment-copy">This solution is Unix only.</span>
<span class="comment-copy">This is basically a copy of Max Shawabkeh's answer with a little wrapper around it. Makes it a quick copy paste but a better idea would be to have added it to the original post of Max.</span>
