<div class="post-text" itemprop="text">
<p>In the python built-in <a href="http://docs.python.org/library/functions.html#open" rel="noreferrer">open</a> function, what is the exact difference between the modes <code>w</code>, <code>a</code>, <code>w+</code>, <code>a+</code>, and <code>r+</code>?</p>
<p>In particular, the documentation implies that all of these will allow writing to the file, and says that it opens the files for "appending", "writing", and "updating" specifically, but does not define what these terms mean.</p>
</div>
<div class="post-text" itemprop="text">
<p>The opening modes are exactly the same as those for the C standard library function <strong><code>fopen()</code></strong>.</p>
<p><a href="http://www.manpagez.com/man/3/fopen/" rel="noreferrer">The BSD <code>fopen</code> manpage</a> defines them as follows:</p>
<pre class="lang-none prettyprint-override"><code> The argument mode points to a string beginning with one of the following
 sequences (Additional characters may follow these sequences.):

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I noticed that every now and then I need to Google fopen all over again, just to build a mental image of what the primary differences between the modes are. So, I thought a diagram will be faster to read next time. Maybe someone else will find that helpful too.</p>
<p><img alt="" src="https://i.stack.imgur.com/ExWNT.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Same info, just in table form</p>
<pre><code>                  | r   r+   w   w+   a   a+
------------------|--------------------------
read              | +   +        +        +
write             |     +    +   +    +   +
write after seek  |     +    +   +
create            |          +   +    +   +
truncate          |          +   +
position at start | +   +    +   +
position at end   |                   +   +
</code></pre>
<p>where meanings are:
(just to avoid any misinterpretation)</p>
<ul>
<li>read - reading from file is allowed</li>
<li><p>write - writing to file is allowed</p></li>
<li><p>create - file is created if it does not exist yet</p></li>
<li><p>trunctate - during opening of the file it is made empty (all content of the file is erased)</p></li>
<li><p>position at start - after file is opened, initial position is set to the start of the file</p></li>
<li>position at end - after file is opened, initial position is set to the end of the file</li>
</ul>
<p>Note: <code>a</code> and <code>a+</code> always append to the end of file - ignores any <code>seek</code> movements.<br/>
BTW. interesting behavior at least on my win7 / python2.7, for new file opened in <code>a+</code> mode:<br/>
<code>write('aa'); seek(0, 0); read(1); write('b')</code> - second <code>write</code> is ignored<br/>
<code>write('aa'); seek(0, 0); read(2); write('b')</code> - second <code>write</code> raises <code>IOError</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The options are the same as for the <a href="http://www.manpagez.com/man/3/fopen/" rel="noreferrer">fopen function</a> in the C standard library:</p>
<p><code>w</code> truncates the file, overwriting whatever was already there</p>
<p><code>a</code> appends to the file, adding onto whatever was already there</p>
<p><code>w+</code> opens for reading and writing, truncating the file but also allowing you to read back what's been written to the file</p>
<p><code>a+</code> opens for appending and reading, allowing you both to append to the file and also read its contents</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is important to consider for cross-platform execution, i.e. as a CYA. :)</p>
<blockquote>
<p>On Windows, 'b' appended to the mode opens the file in binary mode, so there are also modes like 'rb', 'wb', and 'r+b'. Python on Windows makes a distinction between text and binary files; the end-of-line characters in text files are automatically altered slightly when data is read or written. This behind-the-scenes modification to file data is fine for ASCII text files, but it’ll corrupt binary data like that in JPEG or EXE files. Be very careful to use binary mode when reading and writing such files. On Unix, it doesn’t hurt to append a 'b' to the mode, so you can use it platform-independently for all binary files.</p>
</blockquote>
<p>This is directly quoted from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer">Python Software Foundation 2.7.x</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hit upon this trying to figure out why you would use mode 'w+' versus 'w'. In the end, I just did some testing. I don't see much purpose for mode 'w+', as in both cases, the file is truncated to begin with. However, with the 'w+', you could read after writing by seeking back. If you tried any reading with 'w', it would raise an IOError. Reading without using seek with mode 'w+' isn't going to yield anything, since the file pointer will be after where you have written. </p>
</div>
<span class="comment-copy">The link you provided exactly defines the values.  What part about the link you provided could you not see or understand?  Could you clarify your question to explain what you didn't understand about the link?</span>
<span class="comment-copy">What Chris B. said.  I've edited the question to clarify and make it "more real".</span>
<span class="comment-copy">@ChrisB. - I reported this as bug at <a href="http://bugs.python.org/issue19627" rel="nofollow noreferrer">bugs.python.org/issue19627</a></span>
<span class="comment-copy">is there no simple and single doc that explains what the + sign means?</span>
<span class="comment-copy">I believe you mean the fopen call in the C standard library (which is not a system call)</span>
<span class="comment-copy">NOTE:Python v3 adds a number of additional modes.  <a href="http://docs.python.org/3.3/library/functions.html#open" rel="nofollow noreferrer">link to docs</a></span>
<span class="comment-copy">Noted that <code>w</code> and <code>w+</code> both can do <code>The file is created if it does not exist</code></span>
<span class="comment-copy">On Windows, <code>b</code> appended to the mode opens the file in binary mode, so there are also modes like <code>rb</code>, <code>wb</code>, and <code>r+b</code>. Python on Windows makes a distinction between text and binary files; the end-of-line characters in text files are automatically altered slightly when data is read or written.</span>
<span class="comment-copy">am I right to say that the <code>+</code> doesn't do something consistent independent if it is <code>a</code>,<code>w</code> or <code>r</code>? Or am I failing to see the pattern? What is the pattern?</span>
<span class="comment-copy">So the <code>+</code> basically means writing. That is weird that the <code>w</code> doesn't mean that but it means truncating...(after reading the next answer, it seems <code>w</code> writes over and <code>a</code> stands for appending. That makes more sense...)  Do you have any comments on file creation if it doesn't exist?</span>
<span class="comment-copy">The <code>a</code> description is <b>wrong</b>. The writes are always positioned at the end.</span>
<span class="comment-copy">@And I believe @Antti is referring to the property <code>Subsequent writes to the file will always end up at the then current end of file, irrespective of any intervening fseek(3) or similar</code> which is somewhat stronger than just saying the <i>initial</i> position is the end.</span>
<span class="comment-copy">@CharlieParker That there are basically two file operations (read, write). Mode <i>r</i> is primarily for reading, modes <i>w</i>, <i>a</i> are primarily for writing. And <b>the plus sign enables the second operation</b> for a given mode (simply said).</span>
<span class="comment-copy">For posterity: truncate means to overwrite from the beginning.</span>
<span class="comment-copy">Why is there no "Create file if it doesn't exist. If it does exist, position at start, enable read and write"? This is the most obvious use-case for me: I'm storing data in a file. If the file's not there, create it instead of erroring. If there's data in the file I want to read it all from the top, update some stuff then completely re-write the file from 0 for the NEXT TIME I load it. I use <code>open(file,'a'); close(); open(file,'r+')</code> to accomplish this.</span>
<span class="comment-copy">@pinhead What you are describing is more appropriately handled by opening the file in read mode, loading the contents into memory, and closing it, then opening it afterwards in write mode to write out when you're done. I assume from the use case that you describe that you want the whole file in memory, and this way you don't corrupt the file in case your program terminates before it has time to save and exit.</span>
<span class="comment-copy">What does "truncating" mean in this context?</span>
<span class="comment-copy">@CharlieParker It means that all content of the file is erased (file is made empty)</span>
<span class="comment-copy">You might want to add a note that with <code>a</code> and <code>a+</code> writes will <i>always</i> happen at the end of the file, irrespective of whether one manually moves the pointer using <code>seek()</code>.</span>
<span class="comment-copy">I had to come here to get the difference between w and w+. Thanks a lot!</span>
<span class="comment-copy">What does "truncating" mean in this context? Does it mean to delete the old data if it had some? Or something else more specific?</span>
<span class="comment-copy">@CharlieParker: Correct - it means that all data in the existing file will be dropped and we begin writing from the beginning of a now-empty file.</span>
