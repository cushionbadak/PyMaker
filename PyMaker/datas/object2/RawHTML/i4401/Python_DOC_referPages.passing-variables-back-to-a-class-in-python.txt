<div class="post-text" itemprop="text">
<p>I'm new, please bear with me. Below is my code:</p>
<pre><code>class Player():
    name = "UnknownName"
    stren = 10
    dex = 10
    con = 10
    intel = 10
    wis = 10
    cha = 10

    def randAssign(self):
        global stren, dex, con, intel, wis, cha
        stat_List = [stren, dex, con, intel, wis, cha]

        for stat in stat_List:
             r_1 = random.randint(1,6)
             r_2 = random.randint(1,6)
             r_3 = random.randint(1,6)
             r_4 = random.randint(1,6)

             stat_Val = r_1 + r_2 + r_3 + r_4 - min(r_1, r_2, r_3, r_4)
             stat = stat_Val
</code></pre>
<p>randAssign is a method in Player()
I'm trying to set a player's stats randomly, and need to rewrite the class variables at the time randAssign() is activated.
For one reason or another, the use of global passes the following error:</p>
<pre><code>NameError: name 'stren' is not defined. 
</code></pre>
<p>Using Nonlocal yields this error: </p>
<pre><code>SyntaxError: no binding for nonlocal 'stren' found
</code></pre>
<p>Without either global or nonlocal, it just doesn't rewrite <code>Player()'s</code> variables.
I've done a dozen iterations of this, from the outright wrong to the "I thought this would work but it doesn't", and need help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Defining your variables inside your class like this will make all instances of your class share these variables, which can lead to funky situations (especially for mutable objects). (refer to <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">Python documentation</a>) What you most likely want to do is to use this:</p>
<pre><code>class Player:

    def __init__(self):
        self.stren = 10
        self.xcx = 10
        etc.

    def randAssign(self):
        self.stren = randint(1,10)
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not really sure if you are familiar with class vs instance methods, but try this:</p>
<pre><code>class Player():
    name = "UnknownName"
    stren = 10
    dex = 10
    con = 10
    intel = 10
    wis = 10
    cha = 10

    @classmethod
    def randAssign(cls):
        stat_List = [cls.stren, 
                     cls.dex, 
                     cls.con, 
                     cls.intel, 
                     cls.wis, 
                     cls.cha]

        for stat in stat_List:
             r_1 = random.randint(1,6)
             r_2 = random.randint(1,6)
             r_3 = random.randint(1,6)
             r_4 = random.randint(1,6)

             stat_Val = r_1 + r_2 + r_3 + r_4 - min(r_1, r_2, r_3, r_4)
             stat = stat_Val
</code></pre>
<p>Given what it looks like you are doing (creating random Player stats), this would be more approriate if done per Player <em>instance</em> under the <code>__init__</code> call upon instantiation. </p>
<p>Read this <a href="https://stackoverflow.com/questions/17134653/difference-between-class-and-instance-methods">SO</a> for more information on the difference between the two methods.</p>
<p><strong>Edit:</strong> To illustrate point in comments...</p>
<p>This is the problem you will encounter with your method (my above example only resolves your scoping issue, not your implementation one)</p>
<pre><code>class Temp:
    stat = 1
    @classmethod
    def test(cls):
        stats = [cls.stat] # container contains copies of primitive types 
        print (stats) # [1]
        for i in range(1):
            stats[i] = (stats[i] + 2) * 3 # 1 + 2 * 3 = 9
        print (stats) # [9]
        print (cls.stat) # 1
</code></pre>
<p>To do what comments appear you want to:</p>
<pre><code>class Temp:
    stats = {'stat': 1}
    @classmethod
    def test(cls):
        stats = [cls.stats] # container contains reference to another container
        print (stats) # {'stat': 1}
        for stat in stats:
            cls.stats[stat] = (cls.stats[stat] + 2) * 3 # 1 + 2 * 3 = 9
        print (stats) # {'stat': 9}
        print (cls.stats) # {'stat': 9}, look they updated!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you already pass the <code>self</code> argument in  your function definition, you should refer to these variables in the appropriate namespace:</p>
<pre><code>self.stren = ...
</code></pre>
<p>instead of </p>
<pre><code>globals stren
stren = ...
</code></pre>
</div>
<span class="comment-copy">why are you trying to use global vars to modify the values inside your class ? To rewrite player variable, you need to modify <code>self.stren</code> and assign your new value.</span>
<span class="comment-copy">This is an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY-Problem</a>.</span>
<span class="comment-copy">Sharing the default values is not so bad (as long as they are immutable objects like integers).</span>
<span class="comment-copy">@Graipher it's not bad,it can be useful, but from I try to understand from his problem, this is not the wanted behaviour, he want to have different players with different stats ?</span>
<span class="comment-copy">Since they are immutable, they will be overwritten only for the instance, not all instances.</span>
<span class="comment-copy">@Graipher oh thanks a lot, didn't know that</span>
<span class="comment-copy">@Graipher Unless they deepcopy the class variable to an instance variable, but as I pointed out to juanpa already, OP's issue was on scoping; we've all done more than asked.</span>
<span class="comment-copy">This method fails to modify the class variables in exactly the same way as the OPs attempts</span>
<span class="comment-copy">@juanpa.arrivillaga Their problem was scope, I've updated to give example as to what happens given their implementation, but those are two different issues to address for the OP.</span>
