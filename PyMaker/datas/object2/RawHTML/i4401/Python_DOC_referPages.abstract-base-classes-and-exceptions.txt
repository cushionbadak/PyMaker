<div class="post-text" itemprop="text">
<h1>Question</h1>
<p><em>Why do virtual subclasses of an abstract <code>Exception</code> created using the <code>ABCMeta.register</code> not match under the <code>except</code> clause?</em></p>
<h1>Background</h1>
<p>I'd like to ensure that exceptions that get thrown by a package that I'm using are converted to <code>MyException</code>, so that code which imports my module can catch any exception my module throws using <code>except MyException:</code> instead of <code>except Exception</code> so that they don't have to depend on an implementation detail (the fact that I'm using a third-party package).</p>
<h1>Example</h1>
<p>To do this, I've tried registering an <code>OtherException</code> as <code>MyException</code> using an abstract base class:</p>
<pre class="lang-py prettyprint-override"><code># Tested with python-3.6
from abc import ABC

class MyException(Exception, ABC):
    pass

class OtherException(Exception):
    """Other exception I can't change"""
    pass

MyException.register(OtherException)

assert issubclass(OtherException, MyException)  # passes

try:
    raise OtherException("Some OtherException")
except MyException:
    print("Caught MyException")
except Exception as e:
    print("Caught Exception: {}".format(e))
</code></pre>
<p>The assertion passes (as expected), but the exception falls to the second block:</p>
<pre class="lang-none prettyprint-override"><code>Caught Exception: Some OtherException
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The why is easy:</p>
<pre><code>from abc import ABC

class MyException(Exception, ABC):
    pass

class OtherException(Exception):
    """Other exception I can't change"""
    pass

MyException.register(OtherException)

assert issubclass(OtherException, MyException)  # passes
assert OtherException in MyException.__subclasses__()  # fails
</code></pre>
<p>Edit: This <code>assert</code> mimics the outcome of the except clause, but does not represent what actually happens. Look at the <a href="https://stackoverflow.com/a/49833593/8472976">accept answer for an explanation.</a></p>
<p>The workaround also is easy:</p>
<pre><code>class OtherException(Exception):
    pass
class AnotherException(Exception):
    pass

MyException = (OtherException, AnotherException)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alright, I looked into this some more. The answer is that it's a long-outstanding open issue in Python3 (there since the very first release) and apparently was first <a href="https://bugs.python.org/issue12029" rel="nofollow noreferrer">reported in 2011</a>. As <a href="https://bugs.python.org/issue12029#msg160418" rel="nofollow noreferrer">Guido said</a> in the comments, "I agree it's a bug and should be fixed." Unfortunately, this bug has lingered due to concerns about the performance of the fix and some corner cases that need to be handled. </p>
<p>The core issue is that the exception matching routine <code>PyErr_GivenExceptionMatches</code> in <a href="https://github.com/python/cpython/blob/cf296537f164abeacd83011239881f75f290ed31/Python/errors.c" rel="nofollow noreferrer"><code>errors.c</code></a> uses <code>PyType_IsSubtype</code> and not <code>PyObject_IsSubclass</code>. Since types and objects are supposed to be the same in python3, this amounts to a bug.</p>
<p>I've made a <a href="https://github.com/python/cpython/pull/6461" rel="nofollow noreferrer">PR to python3</a> that seems to cover all of the issues discussed in the thread, but given the history I'm not super optimistic it's going to get merged soon. We'll see.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that CPython once again takes some shortcuts and doesn't bother calling the metaclass's <a href="https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__" rel="nofollow noreferrer"><code>__instancecheck__</code></a> method for the classes listed in <code>except</code> clauses.</p>
<p>We can test this by implementing a custom metaclass with <a href="https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__" rel="nofollow noreferrer"><code>__instancecheck__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#class.__subclasscheck__" rel="nofollow noreferrer"><code>__subclasscheck__</code></a> methods:</p>
<pre><code>class OtherException(Exception):
    pass

class Meta(type):
    def __instancecheck__(self, value):
        print('instancecheck called')
        return True

    def __subclasscheck__(self, value):
        print('subclasscheck called')
        return True

class MyException(Exception, metaclass=Meta):
    pass

try:
    raise OtherException("Some OtherException")
except MyException:
    print("Caught MyException")
except Exception as e:
    print("Caught Exception: {}".format(e))

# output:
# Caught Exception: Some OtherException
</code></pre>
<p>We can see that the <code>print</code> statements in the metaclass aren't executed.</p>
<hr/>
<p>I don't know if this is intended/documented behavior or not. The closest thing to relevant information I could find was from the <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">exception handling tutorial</a>:</p>
<blockquote>
<p>A class in an except clause is compatible with an exception if it is
  the same class or a base class thereof</p>
</blockquote>
<p>Does that mean that classes have to be <em>real</em> subclasses (i.e. the parent class must be part of the subclass's MRO)? I don't know.</p>
<hr/>
<p>As for a workaround: You can simply make <code>MyException</code> an alias of <code>OtherException</code>.</p>
<pre><code>class OtherException(Exception):
    pass

MyException = OtherException

try:
    raise OtherException("Some OtherException")
except MyException:
    print("Caught MyException")
except Exception as e:
    print("Caught Exception: {}".format(e))

# output:
# Caught MyException
</code></pre>
<p>In the case that you have to catch multiple different exceptions that don't have a common base class, you can define <code>MyException</code> as a tuple:</p>
<pre><code>MyException = (OtherException, AnotherException)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, this doesn't really answer your question directly, but if you're trying to ensure a block of code calls your exception, you could take a different strategy by intercepting with a context manager.</p>
<pre><code>In [78]: class WithException:
    ...:     
    ...:     def __enter__(self):
    ...:         pass
    ...:     def __exit__(self, exc, msg, traceback):
    ...:         if exc is OtherException:
    ...:             raise MyException(msg)
    ...:         

In [79]: with WithException():
    ...:     raise OtherException('aaaaaaarrrrrrggggh')
    ...: 
---------------------------------------------------------------------------
OtherException                            Traceback (most recent call last)
&lt;ipython-input-79-a0a23168647e&gt; in &lt;module&gt;()
      1 with WithException():
----&gt; 2     raise OtherException('aaaaaaarrrrrrggggh')

OtherException: aaaaaaarrrrrrggggh

During handling of the above exception, another exception occurred:

MyException                               Traceback (most recent call last)
&lt;ipython-input-79-a0a23168647e&gt; in &lt;module&gt;()
      1 with WithException():
----&gt; 2     raise OtherException('aaaaaaarrrrrrggggh')

&lt;ipython-input-78-dba8b409a6fd&gt; in __exit__(self, exc, msg, traceback)
      5     def __exit__(self, exc, msg, traceback):
      6         if exc is OtherException:
----&gt; 7             raise MyException(msg)
      8 

MyException: aaaaaaarrrrrrggggh
</code></pre>
</div>
<span class="comment-copy">The "why" here slightly misleading... there is no call made to <code>__subclasses__</code> by the interpreter. Rather, it's a long-open bug in python3. See the accepted answer.</span>
<span class="comment-copy">Till the work around a perfect answer. You did not quite understand his problem</span>
<span class="comment-copy">The workaround doesn't work for my case, since it's called from code in an imported third-party module.</span>
<span class="comment-copy">@MikeMcCoy I don't understand. I thought <code>OtherException</code> was defined in a 3rd-party module, but <code>MyException</code> wasn't? You have control over how <code>MyException</code> is defined, don't you?</span>
<span class="comment-copy">@Aran-Fey Yes, but I believe he wants to catchmultiple Exceptions. Look my edit submit.</span>
<span class="comment-copy">@MegaIng The question never mentions that there are other exceptions to catch besides <code>OtherException</code>, so I have my doubts about that. But anyway, I've added a section about catching multiple different exceptions.</span>
