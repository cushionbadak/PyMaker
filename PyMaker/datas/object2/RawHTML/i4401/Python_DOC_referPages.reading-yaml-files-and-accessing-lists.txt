<div class="post-text" itemprop="text">
<p>I am currently reading data from a .yml file. Inside the file is the following part for every main entry:</p>
<pre><code>- !
  name: Martial Focus
  prerequisites:
    tier1:
      any:
        Attribute:
        - Attribute1:§ 1
        - Attribute2:§ 1
        Feat:
        - Feat1
        Other:
        - Other Prerequisites
  cost:
  - 3
  description: |
    [...]
  effect: |
    [...]
</code></pre>
<p>I've been able to read all the data, including 'prerequisites', but here I have a special problem:
Where with the other data, I was able to access sublists it seems to be different for this:</p>
<p>The "any:" part is optional, so it could also say something like</p>
<pre><code>prerequisites:
    tier1:
      Attribute:
      - Attribute1:§ 1
      - Attribute2:§ 1
      Feat:
      - Feat1
      Other:
      - Other Prerequisites
</code></pre>
<p>Reading the .yml file converts the part above to</p>
<pre><code>'prerequisites': {
  'tier1': {
    'any': {
      'Attribute': ['Attribute1:§ 1', 'Attribute2:§ 1'],
      'Feat': ['Feat1'],
      'Other': ['Other Prerequisites']
    }
  }
}
</code></pre>
<p>So in my code, for every "tierX", I check if it contains a key "any:" via</p>
<pre><code>if 'any' in tier:
  # do the stuff to be done if 'any' exists
else:
  # do the stuff to be done if it doesn't
</code></pre>
<p>But it never seems to be true. Since "Attribute:", "Feat:" and "Other:" are also optional, I do the same for those inside the if-else-statement and it's the same problem with them though for those there's no else-statement.
Below you can find the code I'm using. It won't be the prettiest since I litterally started with python today but I hope that you'll help me anyway:</p>
<pre><code>        prerequisites = ""
        tierNum = 0
        for tier in data['prerequisites']:
            tierNum += 1
            thisTier = ""
            if 'any' in tier:
                print("'any' found!")
                content = tier['any']
                if 'Other' in content:
                    other = ""
                    for s2 in content['Other'][:-1]:
                        other += s2 + ", "
                    thisTier += "**" + other
                    if len(content['Other'][:-1]) == 0:
                        thisTier += str(content['Other'][-1:])
                    else:
                        thisTier += "or " + str(content['Other'][-1:])

                    if 'Attribute' in content:
                        attributes = ""
                        for s2 in content['Attribute'][:-1]:
                            attributes += s2 + ", "
                        if thisTier.length() == 0:
                            thisTier += "**" + attributes
                        else:
                            thisTier += ", or " + attributes
                        if len(content['Attribute'][:-1]) == 0:
                            thisTier += str(content['Attribute'][-1:])
                        else:
                            thisTier += "or " + str(content['Attribute'][-1:])

                    if 'Feat' in content:
                        feats = ""
                        for s2 in content['Feat'][:-1]:
                            feats += s2 + ", "
                        if thisTier.length() == 0:
                            thisTier += "**" + feats
                        else:
                            thisTier += ", or " + feats
                        if len(content['Feat'][:-1]) == 0:
                            thisTier += str(content['Feat'][-1:])
                        else:
                            thisTier += "or " + str(content['Feat'][-1:])

            else:
                content = tier
                if 'Other' in content:
                    other = ""
                    for s2 in content['Other'][:-1]:
                        other +=  s2 + ", "
                    thisTier += "**" + other
                    if len(content['Other'][:-1]) == 0:
                        thisTier += str(content['Other'][-1:])
                    else:
                        thisTier += "or " + str(content['Other'][-1:])

                if 'Attribute' in content:
                    attributes = ""
                    for s2 in content['Attribute'][:-1]:
                        attributes += s2 + ", "
                    thisTier += "**" + attributes
                    if len(content['Attribute'][:-1]) == 0:
                        thisTier += str(content['Attribute'][-1:])
                    else:
                        thisTier += "or " + str(content['Attribute'][-1:])

                if 'Feat' in content:
                    feats = ""
                    for s2 in content['Feat'][:-1]:
                        feats += s2 + ", "
                    thisTier += "**" + feats
                    if len(content['Feat'][:-1]) == 0:
                        thisTier += str(content['Feat'][-1:])
                    else:
                        thisTier += "or " + str(content['Feat'][-1:])

            prerequisites += "*Tier {0}:\n{1}\n".format(tierNum, thisTier)
        prerequisites = prerequisites[:-1]
</code></pre>
<p>I'm doing stuff like the <code>content['Feat'][:-1]</code> in order to get every element except the last so I can add a <code>", or "</code> in front of the last element, should there be more than one.</p>
<p><strong>EDIT:</strong>
My desired Output would be something like:</p>
<pre><code>Prerequisites:
*Tier 1:
**Attribute1 1, or Attribute2 1
**Feat1
**Other Prerequisites
</code></pre>
<p>If no any exists and</p>
<pre><code>Prerequisites:
*Tier 1:
**Attribute1 1, or Attribute2 1, or Feat1, or Other Prerequisites
</code></pre>
<p>if it doesn't</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that <code>for tier in data["predicates"]</code> iterates over the <strong>keys</strong> of the predicate dictionary, thus the subsequent <code>if "any" in tier</code> actually evaluates <code>"any" in "tier1"</code> which is of cause always false.</p>
<hr/>
<p>What you want to test here is <code>"any" in data["predicates"]["tier1"]</code>. When working with dictionaries (i.e. mappings) you have to differentiate between a <code>key</code> and its corresponding <code>value</code>.</p>
<p>Interestingly you have gotten it right for the next level down:</p>
<pre><code># ...
content = tier['any']
if 'Other' in content:
    other = ""
    for s2 in content['Other']:
       # ...
</code></pre>
<hr/>
<p>Ways to iterate over a dictionary</p>
<pre><code>d = {"key1":"value1", "key2":"value2", "key3":"value3"}
for key in d:
  print(key)
# prints key1, key2, key3
for key in d.keys():
  print(key)
# prints key1, key2, key3
for value in d.values():
  print(value)
# prints value1, value2, value3
for item in d.items():
  print(item)
# prints (key1,value1), (key2,value2), (key3,value3)
for key, value in d.items():
  print(key)
  print(value)
# prints key1, value1, key2, value2, key3, value3
</code></pre>
<hr/>
<p>see python documentation <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">here</a></p>
<hr/>
<p>As you are new to Python and do not know what is possible, allow me to present you a much more elegant solution with out all the repetitive string operations:</p>
<pre><code>import yaml


yamldata1 = r"""
- !
  name: Martial Focus
  prerequisites:
    tier1:
      any:
        Attribute:
        - Attribute1:§ 1
        - Attribute2:§ 1
        Feat:
        - Feat1
        Other:
        - Other Prerequisites
  cost:
  - 3
  description: |
    [...]
  effect: |
    [...]
"""
yamldata2 = r"""
- !
  name: Martial Focus
  prerequisites:
    tier1:
        Attribute:
        - Attribute1:§ 1
        - Attribute2:§ 1
        Feat:
        - Feat1
        Other:
        - Other Prerequisites
  cost:
  - 3
  description: |
    [...]
  effect: |
    [...]
"""


def process(data):
    output = ""
    for tier_name, tier in data['prerequisites'].items():
        output += f"* {tier_name}"
        if 'any' in tier:
            content = tier['any']
            prerequisites = content.get('Other', []) + content.get('Attribute', []) + content.get('Feat', [])
            if prerequisites:
                output += "\n** " + " or ".join(prerequisites)
        else:
            content = tier
            prerequisites = [content.get('Other', []), content.get('Attribute', []), content.get('Feat', [])]

            for subset in prerequisites:
                if subset:
                    output += "\n** " + " or ".join(subset)
    return output


data = yaml.load(yamldata1)[0]
print(process(data))
print('#'*10)
data = yaml.load(yamldata2)[0]
print(process(data))
</code></pre>
</div>
<span class="comment-copy">what is the desired output?</span>
<span class="comment-copy">Edited my post to include that</span>
<span class="comment-copy">But that's what I want it to do, isn't it? For every tier, I want to check if there is an 'any' key in there.</span>
<span class="comment-copy">I am confused. Is that not what the <code>for tier in data['prerequisites']</code> is for? What would be the correct expression?</span>
<span class="comment-copy">I'm sorry, but I still don't get where my problem is ._.</span>
<span class="comment-copy">Am I not looking for a key called 'any' in every tier with my <code>if 'any' in tier</code>?</span>
<span class="comment-copy"><code>data['prerequisites']</code> is a dictionary not a list! If you iterate over a dictionary you actually iterate over its keys so your <code>tier</code> variable will contain the string <code>"tier1"</code> not the corresponding part of your data structure which would be <code>data['prerequisites']['tier1']</code>.</span>
