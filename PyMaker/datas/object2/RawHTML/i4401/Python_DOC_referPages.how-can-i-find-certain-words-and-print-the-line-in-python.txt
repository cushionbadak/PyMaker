<div class="post-text" itemprop="text">
<p>I am trying to print only the lines with the specific string I need.</p>
<p>I did this but I can't figure out what's wrong:</p>
<pre><code>def find(text):
    fisier = file('catastrofa.txt')
    for line in fisier:
        if (text in line):
            print(line)

def main():

    find("David")

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You open a file with <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><strong><code>open(..)</code></strong></a>, you can then iterate over the file <em>handler</em> (iterating over a file handler will iterate over the file in a <em>line-by-line</em> fashion):</p>
<pre><code>def find(text):
    <b>with open('catastrofa.txt') as fisier:</b>
        for line in fisier:
            if (text in line):
                print(line)

def main():
    find("David")

main()</code></pre>
<p>By default the mode in which you open the file is <code>'r'</code>, so you <em>read</em> the file (you can not write to it), and you read it as <em>text</em> (not <em>binary</em>).</p>
<p>Note that the path of the file is <em>relative</em> from the current directory (that <em>can</em> be the directory of the python file, but sometimes it is <em>not</em>).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can open the file using open and use the readlines method for iterating line by line</p>
<pre><code>def find(text):
    fisier = open('catastrofa.txt')
    for line in fisier.readlines():
        if (text in line.strip()):
            print(line)
    fisier.close()

def main():
    find("David")

main()
</code></pre>
<p>You can also use context manager that is <code>with</code> keyword that guarantees to close stream after you done, example already demonstrated by Willem Van Onsem</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for line in fisier:
</code></pre>
<p>iterates over lines in file without removing line endings (usually the line return) so:</p>
<pre><code>print(line)
</code></pre>
<p>will print the line and an empty line so it's better to write:</p>
<pre><code>with open('catastrofa.txt') as fisier:
  for line in fisier:
    if text in line:
      print(line, end='')
</code></pre>
<p>to avoid extra line returns.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use open('catastrofa.txt') instead of file('catastrofa.txt')
like this:</p>
<pre><code>def find(text):
    fisier = open('catastrofa.txt','r')
    for line in fisier:
        if (text in line):
            print(line)

def main():

    find("David")

main()
</code></pre>
</div>
<span class="comment-copy">What is not working? Does it print too many lines, too few? Lines without David?</span>
<span class="comment-copy">Error:file not defined  Changed it to this            def find(text):             #fisier = file('catastrofa.txt')             for line in 'catastrofa.txt':                 if ("text" in line):                     print(line)                   def main():             find("David")                   main()   but won't work at all</span>
<span class="comment-copy">It just keeps saying "file is not defined"</span>
<span class="comment-copy">@doesn'tmatter: yes, somehow I mentioned, but forgot to replace it :)</span>
<span class="comment-copy">I would not use <code>readlines()</code>, since this unfortunately reads the entire file into memory. Imagine that this is a 200GiB file, then the program would crash, whereas performing iteration on the file handler will work in a cursor-fashion.</span>
<span class="comment-copy">then you can use yield statement that will not overhead memory</span>
<span class="comment-copy">instead of print(line) you can use yield line</span>
<span class="comment-copy">it will, since the <code>.readlines()</code> is the culprit. If you perform <code>yield</code>, from the moment you actually let the function do work, it will first work towards the first yield, and thus load it into memory.</span>
<span class="comment-copy">then can use yield with for line in fisier:  yield line , it gonna work, am right?</span>
<span class="comment-copy">Pro tip: use a context manager (with <code>with</code>), or at least <code>.close()</code> the file handler.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
