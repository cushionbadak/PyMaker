<div class="post-text" itemprop="text">
<p>I'm using the Sniffer class in CSV Reader to determine what a delimiter is in a CSV file and it works on single files but if I add in a loop and point it to a folder with the same CSV in, it throws out this error:</p>
<pre><code>File "delimiter.py", line 17, in read_csv_delimit
reader = csv.reader(csvfile, dialect)
TypeError: "delimiter" must be a 1-character string
</code></pre>
<p>The script looks like this:</p>
<pre><code>#!/usr/local/bin/python3

import csv
import os

def read_csv_delimit(file_dir, csv_file):
    # Initialise list
    file_csv = []
    # Open csv &amp; check delimiter
    with open(file_dir + "/" + csv_file, newline='', encoding = "ISO-8859-1") as csvfile:
        dialect = csv.Sniffer().sniff(csvfile.read(1024))
        csvfile.seek(0)
        reader = csv.reader(csvfile, dialect)
        for item in reader:
            file_csv.append(item[0])
        #del file_csv[0]
        return file_csv

def split_path(full_path):
    #path = path.rstrip(os.sep)
    head, tail = os.path.split(full_path)
    return (head, tail)


machine_dir = input("Drop the folder here: ")

# Get list of machine csv
machines = os.listdir(machine_dir)

for machine in machines:
    print(machine)
    #file_dir, csv_file = split_path(csv_file)
    machine_list = read_csv_delimit(machine_dir, machine)
    print(machine_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given the trace, it seems that your script does pick non-CSV files, indeed. You can use the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> module for fine-tuning the search pattern to pick up only the files you want, but even a simple extension lookup should suffice:</p>
<pre><code>target = input("Drop the folder here: ")

machine_list = [read_csv_delimit(target, m) for m in os.listdir(target) if m[-4:] == ".csv"]
print(machine_list)
</code></pre>
<p>Checking for the entered directory validity, tho, is highly recommended, even if it's performed with the simplest <code>os.path.isdir(target)</code>.</p>
<p>I'd also recommend you to use <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a> facilities to build up your path in the <code>read_csv_delimit()</code> function, e.g.:</p>
<pre><code>with open(os.path.join(file_dir, csv_file), newline='', encoding = "ISO-8859-1") as csvfile:
</code></pre>
</div>
<span class="comment-copy">What does <code>print("'{}'".format(dialect.delmiter))</code> placed before <code>reader = csv.reader(csvfile, dialect)</code> outputs?</span>
<span class="comment-copy"><code>.DS_Store  ''  Traceback (most recent call last): delimiter.py", line 15, in read_csv_delimit     reader = csv.reader(csvfile, dialect) TypeError: "delimiter" must be a 1-character string</code>  The script is picking up all files and not just csv's, isn't it? So a .DS_Store is whats messing it up.  How do I add a constraint so it reads only .csv file types (or excludes dotted files)?  Weird, as I cant see any hidden files in the folder.</span>
<span class="comment-copy">If the given answer solves the issue consider accepting it or please add the solution as an answer</span>
