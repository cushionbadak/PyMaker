<div class="post-text" itemprop="text">
<p>I have a simple python class, that I want to be able to compare. So I implemented compare operators. I then realized that I've been doing that same thing for so many classes, and it feels a lot like code duplication.</p>
<pre><code>class Foo(object):
    def __init__(self, index, data):
        self.index = index
        self.data = data

    def __lt__(self, other):
        return self.index &lt; other.index

    def __gt__(self, other):
        return self.index &gt; other.index

    def __le__(self, other):
        return self.index &lt;= other.index

    def __ge__(self, other):
        return self.index &gt;= other.index

    def __eq__(self, other):
        return self.index == other.index

    def __ne__(self, other):
        return self.index != other.index
</code></pre>
<p>So I think a simple solution would be something like this:</p>
<pre><code>class Comparable(object):
    def _compare(self, other):
        raise UnimplementedError()

    def __lt__(self, other):
        return self._compare(other) &lt; 0

    def __gt__(self, other):
        return self._compare(other) &gt; 0

    def __le__(self, other):
        return self._compare(other) &lt;= 0

    def __ge__(self, other):
        return self._compare(other) &gt;= 0

    def __eq__(self, other):
        return self._compare(other) == 0

    def __ne__(self, other):
        return self._compare(other) != 0

class Foo1(Comparable):
    def _compare(self, other):
        return self.index - other.index

class Foo2(Comparable):
    def _compare(self, other):
        # ...

class Foo3(Comparable):
    def _compare(self, other):
        # ...
</code></pre>
<p>But it seems so basic, that I feel like I'm reinventing the wheel here. </p>
<p>I'm wondering if there a more 'native' way to achieve that.</p>
</div>
<div class="post-text" itemprop="text">
<p>As described <a href="http://portingguide.readthedocs.io/en/latest/comparisons.html" rel="nofollow noreferrer">in the docs</a> you can use <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>functools.total_ordering</code></a> to save some boilerplate in writing all of the comparisons</p>
<blockquote>
<p>To avoid the hassle of providing all six functions, you can implement <code>__eq__</code>, <code>__ne__</code>, and only one of the ordering operators, and use the <code>functools.total_ordering()</code> decorator to fill in the rest. </p>
</blockquote>
<p>To be explicit, the six functions they are referring to are: <code>__eq__</code>, <code>__ne__</code>, <code>__lt__</code>, <code>__le__</code>, <code>__gt__</code>, and <code>__ge__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, you want some automation while creating <strong>rich comparison</strong> methods. You can have this behaviour by using <code>functools.total_ordering()</code> higher-order function. See the <a href="https://docs.python.org/2.7/library/functools.html#functools.total_ordering" rel="nofollow noreferrer">reference</a> for more details.</p>
</div>
<span class="comment-copy">For something basic like this you could simply implement <code>__cmp__</code> instead of each individual op</span>
<span class="comment-copy">@Jkdc <a href="http://portingguide.readthedocs.io/en/latest/comparisons.html" rel="nofollow noreferrer">"The <code>__cmp__()</code> special method is no longer honored in Python 3."</a></span>
<span class="comment-copy">@Jkdc That is exactly what I was looking for! Too bad for the Python 3 support :(</span>
<span class="comment-copy">You could use a <a href="https://stackoverflow.com/a/39166382/4349415">PY3__cmp__ mixin class</a></span>
