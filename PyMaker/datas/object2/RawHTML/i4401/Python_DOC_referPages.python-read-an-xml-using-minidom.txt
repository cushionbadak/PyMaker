<div class="post-text" itemprop="text">
<p>I'm new in Python and I have a question.
I'm trying to parse this xml (this XML has several information, this is the first data what I need to read):</p>
<pre><code>&lt;![CDATA[&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;UDSObjectList&gt;
&lt;UDSObject&gt;
&lt;Handle&gt;cr:908715&lt;/Handle&gt;
&lt;Attributes&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;ref_num&lt;/AttrName&gt;
&lt;AttrValue&gt;497131&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;support_lev.sym&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2004"&gt;
&lt;AttrName&gt;open_date&lt;/AttrName&gt;
&lt;AttrValue&gt;1516290907&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="58814636"&gt;
&lt;AttrName&gt;agt.id&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2005"&gt;
&lt;AttrName&gt;priority&lt;/AttrName&gt;
&lt;AttrValue&gt;3&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2009"&gt;
&lt;AttrName&gt;tenant.id&lt;/AttrName&gt;
&lt;AttrValue&gt;F3CA8B5A2A456742B21EF8F3B5538623&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;tenant.name&lt;/AttrName&gt;
&lt;AttrValue&gt;Ripley&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2005"&gt;
&lt;AttrName&gt;log_agent&lt;/AttrName&gt;
&lt;AttrValue&gt;088966043F4D2944AA90067C52DA454F&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="58826268"&gt;
&lt;AttrName&gt;request_by.first_name&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="58826268"&gt;
&lt;AttrName&gt;request_by.first_name&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;customer.first_name&lt;/AttrName&gt;
&lt;AttrValue&gt;Juan Guillermo&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;customer.last_name&lt;/AttrName&gt;
&lt;AttrValue&gt;Mendoza Montero&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2009"&gt;
&lt;AttrName&gt;customer.id&lt;/AttrName&gt;
&lt;AttrValue&gt;8C020EBAD32035419D7654CDE510D312&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2001"&gt;
&lt;AttrName&gt;category.id&lt;/AttrName&gt;
&lt;AttrValue&gt;1121021012&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;category.sym&lt;/AttrName&gt;
&lt;AttrValue&gt;Ripley.Sistemas Financieros.Terminal Financiero.Mensaje de 
 Error&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;status.sym&lt;/AttrName&gt;
&lt;AttrValue&gt;Suspended&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2009"&gt;
&lt;AttrName&gt;group.id&lt;/AttrName&gt;
&lt;AttrValue&gt;099621F7BD77C545B65FB65BFE466550&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;group.last_name&lt;/AttrName&gt;
&lt;AttrValue&gt;EUS_Zona V Region&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2001"&gt;
&lt;AttrName&gt;zreporting_met.id&lt;/AttrName&gt;
&lt;AttrValue&gt;7300&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;zreporting_met.sym&lt;/AttrName&gt;
&lt;AttrValue&gt;E-Mail&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;assignee.combo_name&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2004"&gt;
&lt;AttrName&gt;open_date&lt;/AttrName&gt;
&lt;AttrValue&gt;1516290907&lt;/AttrValue&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2004"&gt;
&lt;AttrName&gt;close_date&lt;/AttrName&gt;
&lt;AttrValue/&gt;
&lt;/Attribute&gt;
&lt;Attribute DataType="2002"&gt;
&lt;AttrName&gt;description&lt;/AttrName&gt;
&lt;AttrValue&gt;Asunto       :Valaparaiso / Terminal Financiero Error
 Nombre Completo    :JUAN MENDOZA MONTERO
 Ubicación  :CCSS VALPARAISO Plaza victoria 1646, VALPARAISO
 País       :Chile
 Telefono   :ANEXO 2541
 Correo     :jmendozam@ripley.cl
 Descripción    :Error Terminal Financiero
 Descartes  :N/A&lt;/AttrValue&gt;
 &lt;/Attribute&gt;
 &lt;Attribute DataType="2002"&gt;
 &lt;AttrName&gt;summary&lt;/AttrName&gt;
 &lt;AttrValue&gt;Santiago / Modificación &lt;/AttrValue&gt;
 &lt;/Attribute&gt;
 &lt;/Attributes&gt;
 &lt;/UDSObject&gt;
</code></pre>
<p>but when I read the file with this method:</p>
<pre><code>from zeep import Client
import xml.dom.minidom
from xml.dom.minidom import Node

def select():
resultado = []
sid = _client.service.login("User","password")
objectType = 'cr'
whereClause = "group.last_name LIKE 'EUS_ZONA%' AND open_date &gt; 1517454000 
AND open_date &lt; 
1519786800"
maxRows = -1
attributes = ["ref_num"
      ,"agt.id"
      ,"priority"
      ,"pcat.id"
      ,"tenant.id"
      ,"tenant.name"
      ,"log_agent"
      ,"request_by.first_name"
      ,"request_by.last_name"
      ,"customer.first_name"
      ,"customer.last_name"
      ,"customer.id"
      ,"category.id"
      ,"category.sym"
      ,"status.sym"
      ,"group.id"
      ,"group.last_name"
      ,"zreporting_met.id"
      ,"zreporting_met.sym"
      ,"assignee.combo_name"
      ,"open_date"
      ,"close_date"
      ,"description"
      ,"summary"]
minim = _client.service.doSelect(sid=sid, objectType=objectType, 
whereClause=whereClause, maxRows= maxRows, attributes= attributes)
dom = xml.dom.minidom.parseString(minim)
nodeList = dom.getElementsByTagName('AttrValue')
for j in range(len(nodeList)):
    resultado.append(dom.getElementsByTagName('AttrValue')[j].firstChild.wholeText)
    print(resultado[j])

logout = _client.service.logout(sid)
</code></pre>
<p>This only print the first AttrValue (ref_num value), what I need to do is add every field of the XML file in resultado array, I need help to print every field from the XML file, someone can help me to that? </p>
</div>
<div class="post-text" itemprop="text">
<p>Please read and follow <a href="https://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example</a>.
You should remove all the server stuff and reduce the size of your sample data.</p>
<hr/>
<p>This snippet follows your code and gets all <code>attribute</code> elements and then iterates those:</p>
<pre><code>import xml.dom.minidom
from xml.dom.minidom import Node

minim = """&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;udsobjectlist&gt;
    &lt;udsobject&gt;
        &lt;handle&gt;cr:908715&lt;/handle&gt;
        &lt;attributes&gt;
            &lt;attribute datatype="2002"&gt;
                &lt;attrname&gt;ref_num&lt;/attrname&gt;
                &lt;attrvalue&gt;497131&lt;/attrvalue&gt;
            &lt;/attribute&gt;
            &lt;attribute datatype="2002"&gt;
                &lt;attrname&gt;support_lev.sym&lt;/attrname&gt;
                &lt;attrvalue/&gt;
            &lt;/attribute&gt;
            &lt;attribute datatype="2004"&gt;
                &lt;attrname&gt;open_date&lt;/attrname&gt;
                &lt;attrvalue&gt;1516290907&lt;/attrvalue&gt;
            &lt;/attribute&gt;
        &lt;/attributes&gt;
    &lt;/udsobject&gt;
&lt;/udsobjectlist&gt;
"""

dom = xml.dom.minidom.parseString(minim)
nodeList = dom.getElementsByTagName('attribute')

resultado = []
attributes = ["attrname", "attrvalue"]
for node in nodeList:
    a = []
    for attribute in attributes:
        try:
            a.append( node.getElementsByTagName(attribute)[0].firstChild.wholeText)
        except AttributeError:
            a.append("")
    resultado.append(a)
print(resultado)
</code></pre>
<p>prints</p>
<pre><code>[['ref_num', '497131'], ['support_lev.sym', ''], ['open_date', '1516290907']]
</code></pre>
<hr/>
<p>Even closer to your code:</p>
<pre><code>nodeList = dom.getElementsByTagName('attrvalue')
for node in nodeList:
    try:
        v = node.firstChild.wholeText
        resultado.append(v)
        print(v)
    except:
        pass
print(resultado)
</code></pre>
<p>prints</p>
<pre><code>497131
1516290907
['497131', '1516290907']
</code></pre>
<hr/>
<p>As suggested in the comments, with ET (although you probably should not access elements by index, but this might get you started):</p>
<pre><code>import xml.etree.ElementTree as ET
root = ET.fromstring(minim)

for child in root[0][1]:
    try:
        print(child[0].text)
        print(child[1].text)
    except:
        pass
</code></pre>
<p>prints</p>
<pre><code>ref_num
497131
support_lev.sym
None
open_date
1516290907
</code></pre>
</div>
<span class="comment-copy"><code>&lt;![CDATA[</code> - this is how the <i>xml</i> starts?</span>
<span class="comment-copy">Is there a reason you're using <code>minidom</code> here? As the docs explain, it's the least friendly of the XML packages unless you're already an expert in (an obsolete version of) DOM, which I'm guessing you aren't.</span>
<span class="comment-copy">@abarnert can you recommend me another? maybe more easier to use?</span>
<span class="comment-copy">Did you read the docs for <a href="https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom" rel="nofollow noreferrer"><code>minidom</code></a>? Right at the top, it says "Users who are not already proficient with the DOM should consider using the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree" rel="nofollow noreferrer"><code>xml.etree.ElementTree</code></a> module for their XML processing instead."</span>
<span class="comment-copy">There are <a href="https://docs.python.org/3/library/markup.html" rel="nofollow noreferrer">other modules</a> built into the stdlib, but ETree is usually the best one if you're learning from scratch. The main alternatives people use in practice are the third-party libraries lxml and BeautifulSoup. (It gets complicated, because BeautifulSoup uses lxml as a parser, and one of lxml's two APIs is a clone of ETree… but all variations are pretty friendly.)</span>
<span class="comment-copy">it doesn't works... still print ref_num values</span>
<span class="comment-copy">@DibuEscobedo The edit you wanted is incorrect, my snippet does not produce that ouput!</span>
