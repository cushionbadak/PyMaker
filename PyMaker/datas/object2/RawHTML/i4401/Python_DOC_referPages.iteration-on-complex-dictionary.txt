<div class="post-text" itemprop="text">
<p>I have a dictionary like below, as you see I am trying to print <code>key_p</code> which is not in dictionary. I want to check if my <code>key_p</code> exist in dictionary, print the value and when the <code>key_p</code> is not in dictionary print <code>0</code>.</p>
<p>When I put condition <code>elif</code>, it will print two times <code>0</code> (= the number of element in the dictionary) but I just want to check only <code>key_p</code>, meaning if the <code>key_p</code> is in the dictionary print <code>1</code> if only <code>key_p</code> is not in the dictionary print <code>0</code>.</p>
<pre><code>sc_dict = [('fl', {'ab': 1}), ('fl', {'abel': 1})]

key_p = "tep"

for row in sc_dict:

 sc = row[1]

for field, values in sc.items():

   if field == key_p:

      print("1")

   elif field != key_p:

      print("0")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of how you can do it:</p>
<pre><code>sc_dict=[('fl', {'ab': 1}), ('fl', {'abel': 1})]

key_p="tep"

dict_part = [sc[1] for sc in sc_dict]

together = {}

for item in dict_part:
    together.update(item)

print(together.get(key_p, 0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all <code>sc_dict</code> is a list, not a dictionary.</p>
<p>Judging by your code, I understand your question as follows: out of the dictionaries inside the tuples held by <code>sc_dict</code>, you want to check whether any holds a specific key.</p>
<p>Here's one way, using the <code>any</code> builtin function (which returns a boolean, which we convert to an <code>int</code> according to your requirements) and tuple unpacking:</p>
<pre><code>&gt;&gt;&gt; sc_list = [('fl', {'ab': 1}), ('fl', {'abel': 1})]
&gt;&gt;&gt; key = 'key_p'
&gt;&gt;&gt; int(any(key in d for _, d in sc_list))
0
&gt;&gt;&gt; key = 'abel'
&gt;&gt;&gt; int(any(key in d for _, d in sc_list))
1
</code></pre>
<p>Depending on what your actual problem is, it might be beneficial to construct a <code>ChainMap</code> from your dictionaries. The following example introduces the concept and also solves the original question.</p>
<pre><code>&gt;&gt;&gt; from collections import ChainMap
&gt;&gt;&gt; cm = ChainMap(*(d for _, d in sc_list))
&gt;&gt;&gt; cm
ChainMap({'ab': 1}, {'abel': 1})
&gt;&gt;&gt; int('key_p' in cm)
0
&gt;&gt;&gt; int('abel' in cm)
1
</code></pre>
</div>
<span class="comment-copy"><code>sc_dict</code> is a list, not a dictionary. Therefore it cannot have keys.</span>
<span class="comment-copy">FYI to anyone: <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer"><code>ChainMap</code></a> is a Python 3 only construct.</span>
