<div class="post-text" itemprop="text">
<p>When implementing a board game, a board cell can be in one of the three different possible states available: True (cell occupied by first player), False (cell occupied by second player) or None (cell is empty).</p>
<p>My question is that:</p>
<p>Why does   </p>
<pre><code>not(True) == None 
return True 
</code></pre>
<p>whereas that it should actually <code>return False</code>? </p>
<p>And why does </p>
<pre><code>not(False) == None 
return True 
</code></pre>
<p>whereas that it should actually <code>return False</code>?</p>
<p>Could this be a possible bug in Python that should be reported up to the developers, whom from among them, as soon as possible?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>not</code> is not a function, and <code>not(True)</code> is not a function call.</p>
<p><code>not(True) == None</code> is parsed as <code>not (True == None)</code>, because <code>not</code> has lower precedence than <code>==</code>.</p>
<p>Please keep Python's <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a> in mind when writing expressions, and don't treat things like functions if they're not functions.</p>
</div>
<span class="comment-copy"><code>not</code> is not a function. Those parentheses don't control its argument grouping. This is one of the reasons people say not to put parentheses around operator arguments as if they were functions.</span>
<span class="comment-copy">Also note, you cannot return multiple values, you return a single value, a <code>tuple</code></span>
