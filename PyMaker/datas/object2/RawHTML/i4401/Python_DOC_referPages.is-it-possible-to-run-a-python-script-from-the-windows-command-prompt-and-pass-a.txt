<div class="post-text" itemprop="text">
<p>I have a saved python script.  I run this python script from the command prompt in Windows 10.</p>
<p>This is as simple as navigating to the directory where the script is located and then typing:</p>
<pre><code>python myscript.py
</code></pre>
<p>and the script will run fine.</p>
<p>However, sometimes, I want to run this script such that a variable within that script is set to one value and sometimes to another.  This variable tells the script which port to operate an API connection through (if this is relevant).</p>
<p>At the moment, I go into the script each time and change the variable to the one that I want and then run the script after that.  Is there a way to set the variable at the time of running the script from the command prompt in Windows 10?</p>
<p>Or are there potentially any other efficient solutions to achieve the same flexibility at the time of running?</p>
<p>Thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>The usual way to do this is with command-line arguments. In fact, passing a port number is, after passing a list of filenames, almost the paradigm case for command-line arguments.</p>
<hr/>
<p>For simple cases, you can handle this in your code with <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a></p>
<pre><code>port = int(sys.argv[1])
</code></pre>
<p>Or, if you want a default value:</p>
<pre><code>port = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 12345
</code></pre>
<p>Then, to run the program:</p>
<pre><code>python myscript.py 54321
</code></pre>
<hr/>
<p>For more complicated cases—when you have multiple flags, some with values, etc.—you usually want to use something like <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. But you'll probably want to read up a bit on typical command-line interfaces, and maybe look at the arguments of tools you commonly, before designing your first one. Because just looking at all of the options in <code>argparse</code> without knowing what you want in advance can be pretty overwhelming.</p>
<hr/>
<p>Another option is to use an environment variable. This is more tedious if you want to change it for each run, but if you want to set it once for an entire series of runs in a command-line session, or even set a computer-wide default, it's a lot easier.</p>
<p>In the code, you'd look in <a href="https://docs.python.org/3/library/os.html#os.environ" rel="nofollow noreferrer"><code>os.environ</code></a>:</p>
<pre><code>port = int(os.environ.get('MYSCRIPT_PORT', 12345))
</code></pre>
<p>And then, to set a port:</p>
<pre><code>MYSCRIPT_PORT=54321
python myscript.py
</code></pre>
<hr/>
<p>You can combine the two: use a command-line argument if present, otherwise fall back to the environment variable, otherwise fall back to a default. Or even add a config file and/or (if you only care about Windows) registry setting. Python itself does something like three-step fallback, as do many major servers, but it may be overkill for your simple use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should look at argparse. Heres an example:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-m", help='message to be sent', type=str)
args = (parser.parse_args())

print args.m
</code></pre>
<p>Each argument you create is saved like a dictionary so you have to call it in your code like I did with my print statement</p>
<pre><code>"args.m" &lt; ---- This specifies the argument passed you want to do stuff with
</code></pre>
<p>here was my input/output:</p>
<pre><code>C:\Users\Vinny\Desktop&gt;python argtest.py -m "Hi"
Hi

C:\Users\Vinny\Desktop&gt;
</code></pre>
<p>More info on argparse:<a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need the argparse library.
<a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html</a>
<a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/2/library/argparse.html</a></p>
</div>
<span class="comment-copy">Why are you asking about "efficient"? Does a few microseconds one way or the other in taking arguments make a difference to your code? Or would you prefer whatever's easiest to use, easiest to understand in the code, or more Pythonic instead?</span>
<span class="comment-copy">Have you tried <code>sys.argv</code> (or for more advanced uses, the <code>argparse</code> module)?</span>
<span class="comment-copy">It is not about speed of execution.  More ease of deployment of the script, given I want to run it facing different ports each time.  I figured specifying this at the command line each time, would be more efficient that altering the script directly each time.  Hope that clarification helps.</span>
<span class="comment-copy">@afgtrading This is probably not the solution you're looking for, but what about grabbing some input in the first line of your script? E.g, when you first run the file, a line at the very top could be: <code>port = input("Enter your port:")</code>. Whatever the user enters would be stored as <code>port</code> variable, and could carry on with the rest of your script. This might not be what you're looking for but was just an idea...other answers look better :D</span>
<span class="comment-copy">@natureminded These argparse suggestions do seem to be the more direct answer to my question specifically (just researching now), but I think this idea is helpful!  Thank you.</span>
<span class="comment-copy">It would help to post an example of how this is used. Though that would likely make it a duplicate of Vincent Morris' answer.</span>
<span class="comment-copy">My answer was first and all he did was copy the example from those links.</span>
<span class="comment-copy">Sure, but the examples from the link make the answer more useful. Consider if that link stopped working.</span>
