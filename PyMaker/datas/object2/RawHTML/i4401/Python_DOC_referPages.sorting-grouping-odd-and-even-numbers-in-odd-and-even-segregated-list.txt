<div class="post-text" itemprop="text">
<p>I have a unsorted list of number with even and odd. I need to segregate odd and even numbers in sorted order.</p>
<p>For example:</p>
<pre><code>List = [5,6,4,7,11,14,12,1,3]
</code></pre>
<p>Expected output :</p>
<pre><code>[4,6,12,14,1,3,5,7,11]
</code></pre>
<p>My program to segregate the odd and even numbers.</p>
<pre><code>L = [5,6,4,7,11,14,12,1,3]
def segregateEvenOdd(L):
    left,right = 0,len(L)-1
    while left &lt; right:
        while (L[left]%2==0 and left &lt; right):
            left += 1
        while (L[right]%2 == 1 and left &lt; right):
            right -= 1
        if (left &lt; right):
            L[left],L[right] = L[right],L[left]
            left += 1
            right = right-1

print segregateEvenOdd(L)

output : [12, 6, 4, 14, 11, 7, 5, 1, 3]
</code></pre>
<p>I am trying to sort the list using insertion sort, couldn't get right output. Any way to sort this easily</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a "smart" key function for <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer">list.sort</a> / <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a>:</p>
<pre><code>&gt;&gt;&gt; list(sorted(lst, key=lambda x: [x % 2, x]))
[4, 6, 12, 14, 1, 3, 5, 7, 11]
</code></pre>
<p>maps even numbers to the value <code>[0, n]</code>, and odd numbers to the value <code>[1, n]</code>, so that even numbers come first according to natural ordering.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can first sort on <code>n%2</code> (n modulo 2), which will be 0 for odd numbers and 1 for even ones, then on the number itself:</p>
<pre><code>L = [5,6,4,7,11,14,12,1,3]
out = sorted(L, key = lambda n:(n%2, n))

print(out)
# [4, 6, 12, 14, 1, 3, 5, 7, 11]
</code></pre>
<p>The tuples we use as a key are sorted according to their first item first, then to their second.</p>
<p>And it will also work for negative numbers... </p>
</div>
<div class="post-text" itemprop="text">
<p>Simply use list comprehension basics</p>
<pre><code>&gt;&gt;&gt; arr = [5,6,4,7,11,14,12,1,3]
&gt;&gt;&gt; evens = sorted([e for e in arr if e % 2 ==0])
&gt;&gt;&gt; odds = sorted([e for e in arr if e % 2 !=0])
&gt;&gt;&gt; print(evens + odds)
[4, 6, 12, 14, 1, 3, 5, 7, 11]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a list of evens and list of odds and then combine:</p>
<pre><code>lst = [5,6,4,7,11,14,12,1,3]
even = sorted([i for i in lst if i%2 == 0])
odd = sorted([i for i in lst if i%2])
print(even + odd)
</code></pre>
<p>Or using <code>filter</code>, <code>lambda</code>:</p>
<pre><code>lst = [5,6,4,7,11,14,12,1,3]
lst.sort()

even = list(filter(lambda x: not x%2, lst))
odd = list(filter(lambda x: x%2, lst))

print(even + odd)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are happy to use a 3rd party library, you can use Boolean indexing with <code>numpy</code>.</p>
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.lexsort.html" rel="nofollow noreferrer"><code>numpy.lexsort</code></a> sorts in reverse fashion, i.e. it considers <code>A % 2</code> before <code>A</code>:</p>
<pre><code>import numpy as  np

A = np.array([4,6,12,14,1,3,5,7,11])

res = A[np.lexsort((A, A % 2))]

# [ 4  6 12 14  1  3  5  7 11]
</code></pre>
<p>Related: <a href="https://stackoverflow.com/questions/993984/why-numpy-instead-of-python-lists">Why NumPy instead of Python lists?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>i suggest this if you want to avoid using external libraries:</p>
<pre><code>def even_odd_sort(list):
evens=[]
odds=[]
for i in list:
    if(i%2==0):
        evens.append(i)
    else:
        odds.append(i)
evens.sort()
odds.sort()
return evens+odds
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution:</p>
<pre><code>import numpy as np
l = [5,6,4,7,11,14,12,1,3]
l_sort = np.sort(l) #sorting elements of the list
evens = list(filter(lambda x: x%2==0, l_sort)) #extract even elements 
odds = list(filter(lambda x: x%2!=0, l_sort)) #extract odd elements
out = evens + odds 
</code></pre>
</div>
<span class="comment-copy">create two sorted lists using <code>filter</code>, <code>lambda</code> and <code>sorted</code> and then concatenate them with <code>+</code>.</span>
