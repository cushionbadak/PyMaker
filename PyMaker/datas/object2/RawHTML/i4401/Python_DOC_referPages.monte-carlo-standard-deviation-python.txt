<div class="post-text" itemprop="text">
<p>Hello I tried to solve a problem in python with the Monte Carlo method. The problem is the following:
A company services notebooks. A review of its records shows that the time taken for a service call is normally distributed with a mean of 60 minutes and standard deviation of 20 minutes.
a. What proportion of service calls take less than one hour?
b. What proportion of service calls take more than 50 minutes?
c. What proportion of service calls take more than 80 minutes?
d. If a service call has taken more than an hour, what is the probability that it will take more than 70 minutes?
d. In a random sample of four calls, what is the probability that the average length of calls is less than one 50 minutes?</p>
<p>My solution for this:</p>
<pre><code>import math
import random
calls = 4
sa = 0
sb = 0
sc = 0
sd = 0
sd2 = 0
se = 0
sumMin = 0
for i in range (1,calls):
    r = 60 + 20.* random.randint(1, calls)
    #print(r)
    if r&lt;60:
        sa = sa + 1
        break
    if r &gt; 50:
        sb = sb + 1
        break

    if r &gt; 80:
        sc = sc + 1
        break

    if r &gt; 60:
        sd2 = sd2 + 1
        break

    if r &gt; 60:
        sd = sd + 1
        break
    break
sumMin = sumMin + r
meanCallsl = sumMin / calls
if meanCallsl &lt; 50:
    se = se + 1
</code></pre>
<p>and for a,b,c,d the following conditions</p>
<pre><code>pa = 100 * sa/ calls
print (pa)

pb = 100 * sb / calls
print(sb)

pc = 100 * sd / calls
print(pc)

pd = 100*sd/sd2
print (pd)

pe = 100 * se/calls
print(pe)
</code></pre>
<p>Though I am not sure of the outcome, could you please advise?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly, if you want advice on stack overflow, you should really explain what makes you doubt your code. The fact that you only get 0 and 1 should be in your main post. This is because you should not write break in your code. </p>
<p>I assume you've programmed in MATLAB before, where you need to write end to end your for loop and if tests. In python, this is not necessary, as the indentation of your code define the code blocks of your for loop and if tests.</p>
<p>Furthermore, you are never testing for 70 minutes in your code. I assume you want to do that to answer question d.</p>
<p>Moreover, why do you have the code <code>random.randint(1, calls)</code>? The <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer">Python documentation</a> says that</p>
<blockquote>
<p>random.randint(a, b)</p>
<blockquote>
<p>Return a random integer N such that a &lt;= N &lt;= b. Alias for randrange(a, b+1).</p>
</blockquote>
</blockquote>
<p>which means that your <code>random.randint(1, calls)</code> will produce a random integer between <code>1</code> and <code>calls</code> inclusive. <code>random.gauss</code> is probably the function that you are interested in (see <a href="https://docs.python.org/3/library/random.html#random.gauss" rel="nofollow noreferrer">https://docs.python.org/3/library/random.html#random.gauss</a> for documentation).</p>
</div>
<span class="comment-copy">What do you mean " I am not sure of the outcome" ? Do you received strange results ?</span>
<span class="comment-copy">Firstly, <code>random.randint</code> does not give randomly distributed numbers, but rather uniformly distributed numbers, so your MC calculations draw from the wrong distribution.  Also, is there any particular reason that you are using Monte Carlo methods? This can be solved quite easily with the CDF of a Gaussian, which is implemented in Scipy.</span>
<span class="comment-copy">I have to make it with Monte Carlo as per my professor from Uni. The results I get are odd, only 0 and 1.. and that I think is because of what you said, I used the wrong function. I am not that familiar with python.</span>
