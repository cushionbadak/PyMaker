<div class="post-text" itemprop="text">
<p>Here's my data</p>
<pre><code>No  Number
1.  Abe
2.  Edab
</code></pre>
<p>Here's what I expected</p>
<pre><code>No  Number    Score
1.  Abe           9
2.  Edab         12
</code></pre>
<p>This is because:</p>
<p><code>a=1, b=2, e=5</code>, so <code>Abe = a + b + e = 8</code></p>
<p><code>e=5, d=4, a=1, b=2</code> so <code>Edab = e + d + a + b = 12</code></p>
<p>iam expect the scoring rules is <code>a= 1</code> , ... , <code>z =26</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A little numpy <code>view</code> magic.</p>
<pre><code>v = df.Number.str.lower().values.astype(str).view(np.int32).reshape(len(df), -1) - 96
v[v &lt; 0] = 0
df['Score'] = v.sum(axis=1)
</code></pre>
<p></p>
<pre><code>df
    No Number  Score
0  1.0    Abe      8
1  2.0   Edab     12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer"><code>ord</code></a> for integer representing the Unicode code point in nested list comprehension with <code>sum</code>:</p>
<pre><code>df['Score'] = [sum([ord(char.lower()) - 96 for char in x]) for x in df['Number']]

print (df)
    No Number  Score
0  1.0    Abe      8
1  2.0   Edab     12
</code></pre>
<p>If want working only with <code>a-z</code> values:</p>
<pre><code>df['Score'] = [sum([ord(char.lower()) - 96 for char in x]) 
              for x in df['Number'].str.extract('([a-zA-Z]+)', expand=False)]
</code></pre>
<p>Thank you, @Jon Clements for another modification of solution:</p>
<pre><code>df['Score']=df.Number.str.lower().str.extractall('([a-z])')[0].apply(ord).sub(96).sum(level=0)
</code></pre>
</div>
<span class="comment-copy">what have you done and where you stuck? show us your code.</span>
<span class="comment-copy">I do <code>str.extract</code> one by one word, just too messy to write here</span>
<span class="comment-copy">Slight variation keeping in the same vain as <code>.str.extract</code>... <code>df.Number.str.lower().str.extractall('([a-z])')[0].apply(ord).sub(96).groupby(level=0).sum()</code></span>
<span class="comment-copy">@JonClements - It looks nice, also <code>groupby(level=0).sum()</code> should be <code>.sum(level=0</code>. Thank you.</span>
<span class="comment-copy">Ahh... I'd forgotten you can use <code>level</code> with <code>sum</code>... thanks for the reminder!</span>
