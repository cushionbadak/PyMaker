<div class="post-text" itemprop="text">
<p>This is almost the same question as <a href="https://stackoverflow.com/questions/29618936/how-to-solve-oserror-telling-position-disabled-by-next-call">How to solve "OSError: telling position disabled by next() call"</a>. While the older question has received a few answers with useful workarounds, the meaning of the error is not clear. I wonder if anybody can comment on this.</p>
<p>I am learning Python and loosely following a <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">tutorial</a>. I entered the following interactively on Fedora 23:</p>
<pre class="lang-none prettyprint-override"><code>$ python3
Python 3.4.3 (default, Aug  9 2016, 15:36:17)
[GCC 5.3.1 20160406 (Red Hat 5.3.1-6)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; with open("myfile","r") as file:
...     for l in file:
...         print("Next line: \"{}\"".format(l))
...         print("Current position {:4d}".format(file.tell()))
</code></pre>
<p><code>myfile</code> contains a few lines of text. The output:</p>
<pre class="lang-none prettyprint-override"><code>Next line: "This is line number 0
"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 4, in &lt;module&gt;
OSError: telling position disabled by next() call
</code></pre>
<p>Googling for this error yields a whopping 6 results. The same happens with Python 3.6.4 on Cygwin on Windows 10.</p>
<p><strong>Edit:</strong></p>
<p>The <code>tell()</code> method for text files is <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.tell" rel="nofollow noreferrer">documented as follows</a>:</p>
<blockquote>
<p>Return the current stream position as an opaque number. The number
  does not usually represent a number of bytes in the underlying binary
  storage.</p>
</blockquote>
<p>"Opaque number" seems to indicate that I can't just print it. So, I replaced the second <code>print()</code> call with <code>pos = file.tell()</code>. Same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>The message means exactly what it says: because you have called <code>next()</code> on the file, the use of <code>tell()</code> on that file has been disabled.</p>
<p>It might not look like you've called <code>next</code>, but the <code>for</code> loop calls it implicitly. A <code>for</code> loop:</p>
<pre><code>for element in thing:
    do_stuff_with(element)
</code></pre>
<p>is syntactical sugar for</p>
<pre><code>iterator = iter(thing) # the real implementation doesn't use a variable
while True:
    try:
        element = next(iterator) # here's the next() call
    except StopIteration:
        break
    do_stuff_with(element)
</code></pre>
<p>For a file, <code>iter(file)</code> returns the file, and the loop calls <code>next</code> on the file.</p>
<hr/>
<p>As for why calling <code>next</code> disables <code>tell()</code>, this is for efficiency. It only happens for text files (specifically <code>io.TextIOWrapper</code>), which have to do a <a href="https://github.com/python/cpython/blob/v3.6.5/Modules/_io/textio.c#L1449" rel="nofollow noreferrer">bunch</a> of <a href="https://github.com/python/cpython/blob/v3.6.5/Modules/_io/textio.c#L1533" rel="nofollow noreferrer">extra</a> work to support <code>tell</code>; turning off <code>tell</code> support lets them skip that work. The original commit message for the <a href="https://github.com/python/cpython/commit/b9c4c3e455b07b362bd886f7e95aed3be5ab51f6" rel="nofollow noreferrer">change</a> that made <code>next</code> disable <code>tell</code> is "Speed up next() by disabling snapshot updating then.", indicating it's for efficiency.</p>
<p>For historical context, <a href="https://docs.python.org/2/library/stdtypes.html#file.next" rel="nofollow noreferrer">previous Python versions</a> used a hidden buffer for <code>next</code> that <code>tell</code> and other file methods didn't account for, causing <code>tell</code> (and other file methods) to produce not-very-meaningful results during iteration over a file. The current IO implementation would be able to support <code>tell()</code> during iteration, but <code>io.TextIOWrapper</code> prevents such calls anyway. The historical incompatibility between <code>next</code> and other methods likely contributed to why it was considered reasonable to disable parts of file functionality during iteration.</p>
<hr/>
<p>You didn't ask for workarounds, but for the benefit of people who end up on this page looking for a workaround, I'll mention that</p>
<pre><code>for line in iter(file.readline, ''):
    ...
</code></pre>
<p>will let you iterate over the lines of a file without disabling <code>tell</code>. (You can use <code>for line in iter(file.readline, b'')</code> for binary files, but there's not much point, because the <code>tell</code> disabling mechanism isn't there for binary files.)</p>
</div>
<span class="comment-copy">The "opaqueness" of <code>tell()</code> on a file opened in text mode simply means that the result may not match the number of characters you've received from the file, due to end-of-line conversions and whatever other platform-specific differences there might be between text and binary files.  All it's good for is <code>seek()</code>ing back to the same position later.  However, the value is still an ordinary integer, there's nothing keeping you from printing it out if you want.</span>
<span class="comment-copy">The OP isn't explicitly calling <code>next()</code>...and the rest of your answer sounds mostly like pure speculation to me.</span>
<span class="comment-copy">@martineau: There's no explicit <code>next</code> call, but <code>for</code> implicitly calls <code>next</code>. As for the rest of the answer, it is largely speculative, but the old <code>next</code>/other methods incompatibility is documented, and the implementation <i>is</i> skipping work when telling is disabled.</span>
<span class="comment-copy">@martineau: The answer should now be much less speculative.</span>
<span class="comment-copy">That's definitely an improvement, but I think you also ought to at least explain to the OP how their <code>for l in file:</code> is causing an implicit call to <code>next()</code> because that's plainly not obvious and they don't seem to understand how <code>file</code>s and iterators work.</span>
<span class="comment-copy">@martineau: Explanation expanded.</span>
