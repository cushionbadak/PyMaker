<div class="post-text" itemprop="text">
<p>I have a string as below , </p>
<pre><code>val = '["10249/54","10249/147","10249/187","10249/252","10249/336"]'
</code></pre>
<p>I need to parse it and take the values after / and put into list as below</p>
<pre><code>['54','147','187','252','336']
</code></pre>
<p><strong>My code</strong>:  <code>[a[a.index('/')+1:] for a in val[1:-1].split(',')]</code></p>
<p><strong>Output</strong> : <code>['54"', '147"', '187"', '252"', '336"']</code></p>
<p>It has double quotes also " which is wrong.
After i tried as below</p>
<pre><code>c = []
for a in val[1:-1].split(','):
    tmp = a[1:-1]
    c.append(tmp[tmp.index('/')+1:])
</code></pre>
<p><strong>Output :</strong></p>
<pre><code>['54', '147', '187', '252', '336']
</code></pre>
<p>Is there any better way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it in one line using <code>literal_eval</code>:</p>
<pre><code>from ast import literal_eval

val = ['54','147','187','252','336']
a = [i.split('/')[-1] for i in literal_eval(val)]

print(a)
</code></pre>
<p>Output:</p>
<pre><code>['54', '147', '187', '252', '336']
</code></pre>
<p><code>literal_eval()</code> converts your string into a list, and then <code>i.split('/')[-1]</code> grabs what's after the slash.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yeah ... assuming every value has a <code>/</code> like your example, this is superior:</p>
<pre><code>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt;
&gt;&gt;&gt; val = '["10249/54","10249/147","10249/187","10249/252","10249/336"]'
&gt;&gt;&gt; [int(i.split('/')[1]) for i in literal_eval(val)]
[54, 147, 187, 252, 336]
</code></pre>
<p>*edited to insert a forgotten bracket</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using regular expressions!</p>
<p>You can do it in a single line this way.</p>
<pre><code>import re

val = '["10249/54","10249/147","10249/187","10249/252","10249/336"]'

output = re.findall('/(\d+)', val) # returns a list of all strings that match the pattern

print(output)
</code></pre>
<p><strong>Result:</strong>
<code>['54', '147', '187', '252', '336']</code></p>
<p><code>re.findall</code> generates a new list called with all the matches of the regexp. Check out the <a href="https://docs.python.org/3.6/library/re.html" rel="nofollow noreferrer">docs on regular expressions</a> for more info on this topic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module to convert the string to list</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; val ='["10249/54","10249/147","10249/187","10249/252","10249/336"]'
&gt;&gt;&gt; list(map(lambda x: x.split('/')[-1], json.loads(val)))
&gt;&gt;&gt; ['54', '147', '187', '252', '336']
</code></pre>
</div>
<span class="comment-copy">he wants a list of strings: <code>[str(i.split('/')[1]) for i in literal_eval(val)]</code> swap <code>int</code> with <code>str</code></span>
<span class="comment-copy">I ... guess?  I think he wants ints, but he's trying to get strings so he can <code>map(int)</code>.  In any case, I prefer the answer written this way. Up to the OP to choose.</span>
<span class="comment-copy">that's a little overanswering (integer conversion isn't needed), but yeah, probably what OP will ask next :)</span>
<span class="comment-copy">it works the same in python 2. Hint: it's better to put the result of the <code>print</code> in your answer so others can visually check that it works as needed.</span>
<span class="comment-copy">ill add the result of the print. thanks :)</span>
