<div class="post-text" itemprop="text">
<p>I'm new in python,
I have a list like : <code>A=['a','b','c']</code>
and a list like <code>B=[['a','c'],['a','c'],['b','b']]</code>
i want to have a list like <code>C=[2,1,2]</code>
C stores occurrence of sublists that each element of A comes in B
that means 'a' is in 2 sublists
'b' is in 1 sublist
and 'c' is in 2 sublists,
how can I achieve this?
thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can loop over <code>b</code> and update a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> for each sublist, using <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> to remove duplicates:</p>
<pre><code>from collections import Counter

a = ['a','b','c']
b = [['a','c'],['a','c'],['b','b']]

counter = Counter()
for sublist in b:
    counter.update(set(sublist))
c = [counter[x] for x in a]

# result: [2, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum</code>:</p>
<pre><code>a=['a','b','c']
b=[['a','c'],['a','c'],['b','b']]
final_list = [sum(i in c for c in b) for i in a]
</code></pre>
<p>Output:</p>
<pre><code>[2, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can loop and compare in both lists</p>
<pre><code>a=['a','b','c']
b=[['a','c'],['a','c'],['b','b']]
result = []

for letter in a:
    count = 0
    for l in b:
        if letter in l:
            count += 1
    result.append(count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try dict approach :</p>
<pre><code>A=['a','b','c']

B=[['a','c'],['a','c'],['b','b']]

d={}

for i in A:
    for j in B:
        if i in j:
            if i not in d:
                d[i]=1
            else:
                d[i]+=1
print(d)
</code></pre>
<p>output:</p>
<pre><code>{'c': 2, 'b': 1, 'a': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> with <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> to construct <code>C</code>.</p>
<pre><code>C = [sum(elem in sub for sub in B) for elem in A]
</code></pre>
<p>This has the same effect as using nested for loops:</p>
<pre><code>C = []
for elem in A:
    sum = 0
    for sub in B:
        sum += elem in sub
    C.append(sum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution with <code>collections.defaultdict</code>.</p>
<pre><code>from collections import defaultdict

a = ['a','b','c']
b = [['a','c'],['a','c'],['b','b']]

# initialise defaultdict
d = defaultdict(int)

# convert to sets for performance
a_set = set(a)
b_sets = list(map(set, b))

# loop through list of sets
for item in b_sets:
    for i in item &amp; a_set:
        d[i] += 1

# retrieve counts in correct order
res = list(map(d.get, a))

print(res)
# [2, 1, 2]
</code></pre>
<p><strong>Performance note</strong></p>
<p>This may not matter, but the performance differential is interesting as it shows clearly the <code>Counter</code> overhead (4x slower).</p>
<pre><code>from collections import defaultdict, Counter

a = ['a','b','c']
b = [['a','c'],['a','c'],['b','b']]

b = b*100000

def dd(a, b):
    d = defaultdict(int)
    a_set = set(a)
    b_sets = list(map(set, b))
    for item in b_sets:
        for i in item &amp; a_set:
            d[i] += 1
    return list(map(d.get, a))

def counter(a, b):
    counter = Counter()
    for sublist in b:
        counter.update(set(sublist))
    return [counter[x] for x in a]

assert dd(a, b) == counter(a, b)

%timeit dd(a, b)       # 414 ms
%timeit counter(a, b)  # 1.65 s
</code></pre>
</div>
<span class="comment-copy">i test it with an example that b was empty, i expected an empty list but it has values in it...</span>
<span class="comment-copy">@Sahar If <code>b</code> is empty you get <code>[0, 0, 0]</code> as output. Is that not what you want? The answer you accepted gives the same output, by the way.</span>
<span class="comment-copy">it works, my mistake. thank you</span>
<span class="comment-copy">i have another problem, values will be multiple 2 after 2 times running the code...</span>
<span class="comment-copy">@Sahar Which part of the code did you run twice? What was the result you wanted, and what was the result you got? Running this program twice doesn't change the output.</span>
