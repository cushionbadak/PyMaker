<div class="post-text" itemprop="text">
<p>I have my modules in the following example structure:</p>
<pre><code>myapp
   --- application
      -- application.py
      -- __init__.py
   --- converter
       --  converter.py
       -- __init__.py
   --- gui
        --- panel.py
        --- __init__.py
</code></pre>
<p>Now if I am in panel.py how should I import converter.py? would it be</p>
<ol>
<li>from myapp.converter import converter? (assuming sys.path is set)</li>
<li>from converter import converter (assuming sys.path is set</li>
<li>import converter (assuming sys.path is set)</li>
</ol>
<p>Do these points depend on where the main python application is run from? i.e. if converter.py was the program to run or panel.py was the program to run?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should prefer full paths over relative paths, so in my opinion the first one is the best way to do it, although you should consider adding an alias since <em>converter</em> appears twice.</p>
<pre><code>from myapp.converter import converter as conv
</code></pre>
<p>Furthermore you can look up the Python recommandation (PEP8)
<a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/#imports</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>myapp</code> is not a module (ie. does not have <code>__init__.py</code> at its root), there is no way to import something from e.g. <code>converter</code> inside e.g. <code>panel.py</code> unless <code>converter</code> (or a parent module) is added to the <code>PYTHON_PATH</code>.</p>
<p>If <code>myapp</code> is a module (has <code>__init__.py</code>), you can use relative imports: 
<code>from ..converter import converter</code>.</p>
<p>Relative imports indicate explicitly that you want to use something that is "local", and is usually the way to go. 
See <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#intra-package-references</a> for an example. </p>
<p><strong>Updated</strong>: Fixed terminology to make things easier ;)</p>
</div>
<span class="comment-copy"><code>application/application.py</code> and <code>converter/converter.py</code> seems a bit redundant. Wouldn't it be cleaner to add <code>application.py</code> and <code>converter.py</code> modules to the <code>myapp</code> package?</span>
<span class="comment-copy">I would agree with application but not converter, well this layout is just an example and not a real thing, but my reasoning is that I can imagine having numberconverter, floatconverter, charconverter etc.. or something like that in a  package, however you only have a single application which can sit on the top level.</span>
<span class="comment-copy">As @Guybrush pointed out, myapp would need to be a package in this case though; otherwise import from your root package</span>
<span class="comment-copy">okay so absolute is the recommended way, the second option is relative imports but if I can have an absolute package then I should go for that</span>
<span class="comment-copy">Absolute imports can be very confusing especially when you have a module (directory) that has the same name than another module (a file inside that directory). In the current case, e.g. <code>import converter</code> depends on what's in your PYTHON_PATH. With relative imports, <code>from . import converter</code> only depends on the file in which this statement is written.</span>
