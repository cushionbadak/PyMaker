<div class="post-text" itemprop="text">
<p>I want to count the number of instances where consecutive letters are identical in a given string.</p>
<p>For example, my string input is:</p>
<pre><code>EOOOEOEE
</code></pre>
<p>I would only like to find the number of occasions where there is more than one consecutive 'O'.</p>
<p>The Output should be:</p>
<pre><code>1
</code></pre>
<p>Since, there is only one set of O's that come consecutively.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is possible with <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby

x = 'EOOOEOEE'

res = sum(len(list(j)) &gt; 1 for i, j in groupby(x) if i == 'O')  # 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regex</a>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'EOOOEOEEOO'
&gt;&gt;&gt; sum(1 for x in re.finditer(r'O{2,}', s))
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just count with a for-loop:</p>
<pre><code>n = 0
g = 0
s = 'EOOOEOEE'
for c in s:
    if c == 'O':
        g += 1
    elif g:
        if g &gt; 1:
            n += 1
        g = 0

if g:
    n += 1
</code></pre>
<p>which gives <code>n</code> as <code>1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume you want to know the number of times that all letters are consecutive in a string and not just for the letter 'O'. </p>
<p>Make a character dictionary that will hold this count as values to keys as the characters in a string. <code>char_dict = {}</code></p>
<p>The idea is to have two conditions to match </p>
<p>(1) Is the current character same as the previous character</p>
<p>(2) If the first condition is true then is the current pair of consecutive characters part of a larger substring that has the same consecutive characters.
Simply put, take for example ABBBCBB. When we encounter the third B we want to check whether it is part of sub-string that is consecutive and already accounted for. i.e. BBB should give consecutive count to be 1 and not 2. To implement this we use a flag variable that checks this conditions.</p>
<p>If we use only the (1)st condition <code>BBB</code> will count as <code>BB</code> and <code>BB</code> and not as a single <code>BBB</code>.</p>
<p>Rest of the code is pretty straight forward.</p>
<pre><code>char_dict = {}
string = "EOOOEOEEFFFOFEOOO"
prev_char = None
flag=0

for char in list(string):
    if char not in char_dict:
        #initialize the count by zero
        char_dict[char] = 0

if char == prev_char and flag !=0:
    char_dict[char] += 1
    flag = 0
else:
    flag = 1

prev_char = char

print(char_dict)
</code></pre>
</div>
<span class="comment-copy">So a single "O" doesn't count? There have to be two or more?</span>
<span class="comment-copy">What have you tried so far?</span>
<span class="comment-copy">Explain your I/O in more details</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/34443946/count-consecutive-characters">Count consecutive characters</a></span>
<span class="comment-copy">@l'L'l Tweaking the code from those answers to produce the correct result here would take more effort than writing an answer from scratch. If the OP can't write a solution from scratch, I don't see how they could possibly find the answers in that question useful. I think that's <i>far</i> too different of a question to be a suitable dupe.</span>
<span class="comment-copy">And also thanks for the answer, It was the best one on my question</span>
<span class="comment-copy">Downvoter care to explain? Don't worry, I don't retaliate, just want to know what we can improve..</span>
