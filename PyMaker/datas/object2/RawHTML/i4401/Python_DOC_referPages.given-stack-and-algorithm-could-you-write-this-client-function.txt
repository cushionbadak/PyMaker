<div class="post-text" itemprop="text">
<p>Using this stack:</p>
<pre><code>class myStack:
    def __init__(self):
        self.container = []
    def __repr__(self):
        return "Stack({})".format(self.container)
    def push(self,item):
        self.container.append(item)
    def __iter__(self):
        return reversed(self.container)
    def pop(self):
        return self.container.pop()
    def len(self):
        return len(self.container)
</code></pre>
<p>Could you write a client function called parenthesesMatch? Given a string containing only the characters for parentheses, braces or curly braces, i.e., the characters in  ’([{}])’, returns True if the parentheses, brackets and braces match and False otherwise.</p>
<p>This is my algorithm:
1.  Create an empty stack.
2.  Iterate over the characters in the given string:
a.  If the character is one of opening marks(,[,{ push it on the stack.
b.  If the character is one of the closing marks ),],} and the stack is empty, then there were not enough preceding opening marks, so return False.
c.  If the character is a closing mark and the stack is not empty, pop an (opening) mark from the stack.  If they are not of the same type, ie., ( and ) or [ and ] or { and }, return False, if they are of the same type, move on to the next char.
3.  Once the iteration is finished, you know that the parentheses match if and only if the stack is empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>See the Python tutorial on <a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks" rel="nofollow noreferrer">Using Lists as Stacks</a> and the documentation on 
<a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Classes</a>.</p>
<p>Just two slight modifications, and it seems to work:</p>
<pre><code>class myStack:
    def __init__(self):
        self.container = []
    def __repr__(self):
        return "Stack({})".format(self.container)
    def push(self,item):
        self.container.append(item)
    def iter(self):
        return self.container.reverse()  # !
    def pop(self):
        return self.container.pop()
    def len(self):
        return len(self.container)  # !

s = myStack()
print(s)

s.push("something")
print(s)
s.push("something completely different")
print(s)

print(s.len())
s.iter()
print(s)

s.pop()
print(s)
s.pop()
print(s)

s.pop()
print(s)
</code></pre>
<p>produces</p>
<pre><code>Stack([])
Stack(['something'])
Stack(['something', 'something completely different'])
2
Stack(['something completely different', 'something'])
Stack(['something completely different'])
Stack([])
Traceback (most recent call last):
  File "t.py", line 37, in &lt;module&gt;
    s.pop()
  File "t.py", line 16, in pop
    return self.container.pop()
IndexError: pop from empty list
</code></pre>
<p>You could prevent this last error by first checking if the <code>pop()</code> can be done.</p>
<p>See <a href="https://docs.python.org/3/reference/datamodel.html#emulating-container-types" rel="nofollow noreferrer">Emulating container types</a> regarding all the "special" class methods. So to access an element by index just like with a list, e.g <code>s[1]</code>, you might add</p>
<pre><code>def __getitem__(self,key):
        return self.container[key]
</code></pre>
<p>and get e.g. <code>something completely different</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>To initialize with a non-empty stack (the main question your original post asked), provide an optional argument to the <code>__init__</code> function:</p>
<pre><code>def __init__(self, items=None):
    if items == None:
        items = []
    items.reverse() # (you might or might not want this)
    self.container = items
</code></pre>
<p>To override <code>len</code>:</p>
<pre><code>def __len__(self):
    return len(self.container)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there, here is a slight suggestion your <strong>init</strong> function.</p>
<pre><code>    class myStack:

        def __init__(self,init=None):
          if init is None:
            init=[]
          self.container = init
        def __repr__(self):
          return "Stack({})".format(self.container)
        def push(self,item):
          self.container.append(item)
        def iter(self):
          return reverse(self.container)
        def pop(self):
          return self.container.pop()
        def len(self):
          return len(self.container)
</code></pre>
<p>also if you want that instead of using ".len()" to find number of values in your stack, you could just write "len(a)"(override) where a is your class object. you can change your len code to.</p>
<pre><code>def __len__(self):
  return len(self.container)
</code></pre>
<p>in your class</p>
</div>
<span class="comment-copy">And what is your question exactly?</span>
<span class="comment-copy">you are not returning the result in the <code>len()</code> method, so you need to add <code>return</code> before <code>len(self.container)</code>.  And you should rename the method to <code>__len__()</code>, so <code>len(stack_instance)</code> works as expected.</span>
<span class="comment-copy">You forgot the <code>return</code> statement in <code>len()</code>, that's why is does not work. Also this seems like a job for <a href="https://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow noreferrer">collections.deque</a></span>
<span class="comment-copy">Right now my <b>init</b> only constructs an empty stack. How could I add an attribute for it to be initialized with a list? Like if  s = Stack(['apple', 'pear', 'kiwi']), it would start it up</span>
<span class="comment-copy">Instead of completely rewriting, please just add additional information or questions.</span>
<span class="comment-copy">Using a mutable default argument value is <a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">a very bad idea</a> unless you absolutely know what you're doing.</span>
<span class="comment-copy">Could you elaborate a little more. I didn't know it was a bad practise. @etene</span>
<span class="comment-copy">@Shivam: follow the "very bad idea" link.  (Thanks @etene!)</span>
<span class="comment-copy">Thanks you @etene for teaching me something new. I have made suitable changes.</span>
