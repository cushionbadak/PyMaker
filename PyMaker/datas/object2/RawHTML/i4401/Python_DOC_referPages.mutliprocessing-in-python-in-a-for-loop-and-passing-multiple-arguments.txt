<div class="post-text" itemprop="text">
<p>I'm doing a lot of calculations with a python script. As it is CPU-bound my usual approach with the threading module didn't yield any performance improvements. </p>
<p>I was now trying to use Multiprocessing instead of Multithreading to better use my CPU and speed up the lengthy calculations.</p>
<p>I found some example codes here on stackoverflow, but I don't get the script to accept more than one argument. Could somebody help me out with this? I've never used these modules before an I'm pretty sure I'm using Pool.map wrong. - Any help is appreciated. Other ways to accomplish Multiprocessing are also welcome.</p>
<pre><code>from multiprocessing import Pool

def calculation(foo, bar, foobar, baz):
    # Do a lot of calculations based on the variables
    # Later the result is written to a file.
    result = foo * bar * foobar * baz
    print(result)

if __name__ == '__main__':
    for foo in range(3):
        for bar in range(5):
            for baz in range(4):
                for foobar in range(10):

                    Pool.map(calculation, foo, bar, foobar, baz)
                    Pool.close()
                    Pool.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are, as you suspected, using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map" rel="nofollow noreferrer"><code>map</code></a> wrong, in more ways than one.</p>
<ul>
<li><p>The point of <code>map</code> is to call a function on all elements of an iterable. Just like the builtin <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> function, but in parallel. If you want queue a single call, just use <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow noreferrer"><code>apply_async</code></a>.</p></li>
<li><p>For the problem you were specifically asking about: <code>map</code> takes a single-argument function. If you want to pass multiple arguments, you can modify or wrap your function to take a single tuple instead of multiple arguments (I'll show this at the end), or just use <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="nofollow noreferrer"><code>starmap</code></a>. Or, if you want to use <code>apply_async</code>, it takes a function of multiple arguments, but you pass <code>apply_async</code> an argument tuple, not separate arguments.</p></li>
<li>You need to call <code>map</code> on a <code>Pool</code> instance, not the <code>Pool</code> class. What you're trying to do is akin to try to <code>read</code> from the file type instead of reading from a particular open file.</li>
<li>You're trying to close and join the <code>Pool</code> after every iteration. You don't want to do that until you've finished all of them, or your code will just wait for the first one to finish, and then raise an exception for the second one.</li>
</ul>
<hr/>
<p>So, the smallest change that would work is:</p>
<pre><code>if __name__ == '__main__':
    pool = Pool()
    for foo in range(3):
        for bar in range(5):
            for baz in range(4):
                for foobar in range(10):
                    pool.apply_async(calculation, (foo, bar, foobar, baz))
    pool.close()
    pool.join()
</code></pre>
<p>Notice that I kept everything inside the <code>if __name__ == '__main__':</code> block—including the new <code>Pool()</code> constructor. I won't show this in the later examples, but it's necessary for all of them, for reasons explained in the <a href="https://docs.python.org/3/library/multiprocessing.html#programming-guidelines" rel="nofollow noreferrer">Programming guidelines</a> section of the docs.<sup>1</sup></p>
<hr/>
<p>If you instead want to use one of the <code>map</code> functions, you need an iterable full of arguments, like this:</p>
<pre><code>pool = Pool()
args = ((foo, bar, foobar, baz) 
        for foo in range(3) 
        for bar in range(5) 
        for baz in range(4) 
        for foobar in range(10))
pool.starmap(calculation, args)
pool.close()
pool.join()
</code></pre>
<p>Or, more simply:</p>
<pre><code>pool = Pool()
pool.starmap(calculate, itertools.product(range(3), range(5), range(4), range(10)))
pool.close()
pool.join()
</code></pre>
<p>Assuming you're not using an old version of Python, you can simplify it even further by using the <code>Pool</code> in a <code>with</code> statement:</p>
<pre><code>with Pool() as pool:
    pool.starmap(calculate, 
                 itertools.product(range(3), range(5), range(4), range(10)))
</code></pre>
<hr/>
<p>One problem with using <code>map</code> or <code>starmap</code> is that it does extra work to make sure you get the results back in order. But you're just returning <code>None</code> and ignoring it, so why do that work? </p>
<p>Using <code>apply_async</code> doesn't have that problem.</p>
<p>You can also replace <code>map</code> with <code>imap_unordered</code>, but there is no <code>istarmap_unordered</code>, so you'd need to wrap your function to not need <code>starmap</code>:</p>
<pre><code>def starcalculate(args):
    return calculate(*args)

with Pool() as pool:
    pool.imap_unordered(starcalculate,
                        itertools.product(range(3), range(5), range(4), range(10)))
</code></pre>
<hr/>
<p><sub>1. If you're using the <code>spawn</code> or <code>forkserver</code> start methods—and <code>spawn</code> is the defaults on Windows—every child process does the equivalent of <code>import</code>ing your module. So, all top-level code that isn't protected by a <code>__main__</code> guard will get run in every child. The module tries to protect you from some of the worst consequences of this (e.g., instead of forkbombing your computer with an exponential explosion of children creating new children, you will often get an exception), but it can't make the code actually work.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Try running <code>calculation</code> as <code>calculation(foo, bar, foobar, baz)</code></p>
</div>
<span class="comment-copy">Thank you very much for your very fast and detailed answer. I finally went with your last suggestion to use pool.imap_unordered and stumbled over a little problem.  It seems like the whole script, even outside of the calculation function (defining variables etc. takes place there) is executed. Where do I have to place code like this ('startup') so it only gets executed once, at the beginning.</span>
<span class="comment-copy">You still need the <code>__name__ == '__main__'</code> guard in almost any multiprocessing script, even though I didn’t show it in my one-liner example. Is that the problem? (And if so, do you think I need to make that clearer and explain it in the answer?)</span>
<span class="comment-copy">Maybe a short explanation would be great for others like me, luckily for me the thrown error is pretty easy to understand if you miss it. The problem I now have is that I read a file with a lot of 'read only' data at the beginning, which every process needs. How do I pass this data to each process? A global variable apparently doesn't work. Later I want to output that data to a file and also aren't sure how to go about it. (is it to save to append to the file at the end of the function?) Should I quickly update the question or would that mess up your answer?</span>
<span class="comment-copy">@Marco That's a new question. Actually, two of them. There's a good chance there's already a good answer for each one on StackOverflow, so search first (but be careful of answers that only work for Linux). But if there aren't, create new questions, each with an appropriate <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Read the programming guidelines section of the <code>multiprocessing</code> docs first—I don't think it'll answer all of your questions, but it will at least give you some background. Also, explore whether <code>concurrent.futures.ProcessPoolExecutor</code> (see the samples in the docs) will make your life easier here.</span>
<span class="comment-copy">beautiful answer!</span>
