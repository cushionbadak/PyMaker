<div class="post-text" itemprop="text">
<p>Here is the code I have so far:</p>
<pre><code>def remove(lst: list, pos: int):
    pass

def test_remove():
    lst = ['Turkey', 
       'Stuffing',
       'Cranberry sauce',
       'Green bean casserole',
       'Sweet potato crunch',
       'Pumpkin pie']

remove(lst, 2)

assert lst == ['Turkey', 
       'Stuffing',
       'Green bean casserole',
       'Sweet potato crunch',
       'Pumpkin pie',
       None]

lst = [5, 10, 15]
remove(lst, 0)
assert lst == [10, 15, None]

lst = [5]
remove(lst, 0)
assert lst == [None]

if __name__ == "__main__":
    test_remove()
</code></pre>
<p>Write code in remove() to remove the item in slot pos, shifting the items beyond it to close the gap, and leaving the value None in the last slot. </p>
<p>Any ideas on where I should start?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Write code in remove() to remove the item in slot pos, shifting the items beyond it to close the gap, and leaving the value None in the last slot.</p>
</blockquote>
<p>You can use the <code>pop</code> method of <code>list</code> to remove the item and then append <code>None</code> to the list.</p>
<pre><code>def remove(lst: list, pos: int):
    lst.pop(pos)
    lst.append(None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given a list <code>lst</code>, the <code>pop(i)</code> method removes the item in the <code>i</code>'th index out of <code>lst</code>.</p>
<pre><code>def remove(lst: list, pos: int):
    lst.pop(pos)
</code></pre>
<p>Also I noticed in your test, you expect when removing an item, that <code>None</code> is added to the end of the list. This is not the case. <code>None</code> shouldn't be an item in list of strings, and if you remove an item from the list, that item is gone but the rest of the items stay the same and nothing else is added.</p>
<p>If you do want to do that, just add <code>lst.append(None)</code> to the last line of <code>remove()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just using basic concepts, we can use a for-loop:</p>
<pre><code>def remove(lst: list, pos: int):
   for i in range(pos, len(lst)-1):
       lst[i] = lst[i+1]
   lst[-1] = None
   return lst
</code></pre>
<p>and a test:</p>
<pre><code>remove([1,2,3,4,5,6], 2)
#[1, 2, 4, 5, 6, None]
</code></pre>
<hr/>
<p>Note that it is clearer to just use the built-in methods as <code>@galfisher</code> and <code>@R Sahu</code> describe.</p>
</div>
<span class="comment-copy">You should start by attempting your homework yourself. If you encounter errors in your implementation, feel free to ask specific questions about that.</span>
<span class="comment-copy">Wow, thank you! Im still new to python so this pop() method never occurred to me.</span>
<span class="comment-copy">I've always found the <a href="https://docs.python.org/3/" rel="nofollow noreferrer">online documentation</a> very helpful.</span>
<span class="comment-copy">I believe the OP has a task with requirements (i.e. a requirement is to leave <code>None</code> as the last element).</span>
