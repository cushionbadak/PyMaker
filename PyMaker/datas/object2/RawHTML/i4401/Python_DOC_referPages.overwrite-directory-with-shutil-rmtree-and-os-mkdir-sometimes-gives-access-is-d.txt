<div class="post-text" itemprop="text">
<p>My code:</p>
<pre><code>if os.path.exists(myDir):
    shutil.rmtree(myDir)
os.mkdir(myDir)
</code></pre>
<p>Problem: It always work if myDir does not exist. If myDir exists, sometimes it throws error, sometimes it works.</p>
<p>Error log:</p>
<pre><code>os.mkdir(myDir)
PermissionError: [WinError 5] Access is denied: 'myDir'
</code></pre>
<p>My guess: when I call os.mkdir, sometimes shutil.rmtree hasn't finished execution/ hasn't released the permission for the directory. Hence, the error.</p>
<p>Is there any way to ensure complete execution of shutil.rmtree before calling os.mkdir?</p>
</div>
<div class="post-text" itemprop="text">
<p>So I encountered the same issue. What I have been using is a pause after <code>shutil.rmtree</code>. I think that pretty much anything that causes your computer to use a clock cycle would do.
All code:</p>
<pre><code>import os 
import shutil 
import time

dataDir = 'C:/Data/'
if os.path.exists(TEMPDIR):
    shutil.rmtree(TEMPDIR)
time.sleep(.0000000000000001)
os.makedirs(TEMPDIR)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have been running into similar issues / the same error message on Windows 10 with calls to shutil.rmtree(dir) being denied access and subsequently not being executed. This in a primitive backup program I wrote which is designed to delete backups over a certain age. I am still testing the below but thus far it works as a temporary workaround in my setups however your mileage may vary.</p>
<p>Running the script as administrator didn't help either. Using os.chmod(f, S_IWRITE) [and/or stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH | stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR | stat.S_IWGRP | stat.S_IXGRP] also got the same refusal by the OS. Changing Controlled Folder Access (which I suspect may be causing this some of the time in Windows 10) and also modifying read only properties on the respective directories also did not help. Neither did changing ownership nor write access in the security tab help.</p>
<p>The workaround I use at the moment is to install, import and use the 'send2trash' module which can be used to remove the directory - assuming your program is otherwise sound - without said access error.</p>
<p>Thereafter one can delete the file from the recycle bin by hand or by automated means(after import of shell from win32com.shell) - obviously this second step will remove all files from the recycle bin. So absolutely check and think BEFORE you run this otherwise you may lose data you don't want to....).</p>
<p>I hope this is helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>If at first you don't succeed...</p>
<pre><code>if os.path.exists(report_path):
while True:
    try:
        shutil.rmtree(report_path)
    except PermissionError:
        print('Damned Win 10 PERMISSION exception, trying again')
        continue
    except FileNotFoundError:
        print('Damned Win 10 FILENOTFOUND exception, ignoring and moving on...')
        break
</code></pre>
<p>...and if that doesn't work there is at least <code>&lt;ctrl&gt; -c</code></p>
</div>
<span class="comment-copy">Maybe <code>sudo python yourcode.py</code></span>
<span class="comment-copy">I'm using Windows though, and I think that's not the problem, because sometimes it works.</span>
<span class="comment-copy">I'm assuming that you guarantee that myDir is a directory. Look at this windows example from the docs (handling errors, specifically read only attributes): <a href="https://docs.python.org/3/library/shutil.html#rmtree-example" rel="nofollow noreferrer">docs.python.org/3/library/shutil.html#rmtree-example</a></span>
<span class="comment-copy">How do you run the script? Is it always the same parent directory?</span>
<span class="comment-copy">@tdelaney Yes, it is always the same directory</span>
<span class="comment-copy">This doesn't work for me. Even tried 1 s. After a bit more research, I came up with an exception handler that I'll add as an answer.</span>
