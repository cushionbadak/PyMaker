<div class="post-text" itemprop="text">
<p>I am trying to read a csv file which has some rows having Unicode character(â€) in it. Pandas is not able to handle those characters. </p>
<p>When opening in MS excel, row looks like this </p>
<p>Columns</p>
<pre><code>age;"job";"marital";"education";"default";"housing";"loan";"contact";"month";"day_of_week";"duration";"campaign";"pdays";"previous";"poutcome";"emp.var.rate";"cons.price.idx";"cons.conf.idx";"euribor3m";"nr.employed";"y"
</code></pre>
<p>Row</p>
<pre><code>41;"blue-collar";"divorcededâ€;â€basic.9y";"no";"yes";"no";"cellular";"may";"thu";102;1;999;0;"nonexistent";-1.8;92.893;-46.2;1.327;5099.1;"no"
</code></pre>
<p>Pandas is reading it as </p>
<pre><code>age                                  41
job                         blue-collar
marital           divorceded”;”basic.9y
education                            no
default                             yes
housing                              no
loan                           cellular
contact                             may
month                               thu
day_of_week                         102
duration                              1
campaign                            999
pdays                                 0
previous                    nonexistent
poutcome                           -1.8
emp.var.rate                     92.893
cons.price.idx                    -46.2
cons.conf.idx                     1.327
euribor3m                        5099.1
nr.employed                          no
y                                   NaN
</code></pre>
<p>Code</p>
<pre><code>df = pd.read_csv('Bank.csv', 
             sep=';',
             skiprows = 1,
             names=["age", "job", "marital", "education", "default", "housing", "loan", "contact", "month", "day_of_week", "duration", "campaign", "pdays", "previous", "poutcome", "emp.var.rate", "cons.price.idx", "cons.conf.idx", "euribor3m", "nr.employed", "y"],
             encoding='utf-8-sig'
             )
</code></pre>
<p>Is there anyway around it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is caused by using the wrong encoding definition. Without having access to the raw file it's impossible to know what's correct.</p>
<p>I'd remove the <code>encoding='utf-8-sig</code> entirely first and Pandas should cope. If that doesn't work then <code>utf_16</code> would be my next attempt.</p>
<p>Check out the page at <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">https://docs.python.org/3/library/codecs.html#standard-encodings</a> for some details on the encodings supported by Pandas.</p>
</div>
<span class="comment-copy">That's almost certainly mojibake caused by reading the file with the wrong encoding—in other words, either your CSV file is not actually UTF-8, or it's already been corrupted and incorrectly transcoded at least once before even getting it your code. Where does the CSV file come from? If you created it, you should be able to save it correctly. If not, you may want to try running <a href="https://pypi.python.org/pypi/chardet" rel="nofollow noreferrer"><code>chardet</code></a> on it.</span>
<span class="comment-copy"><code>"divorcededâ€;â€basic.9y"</code> should be two fields but is treated as one because <code>â€</code> != <code>"</code>. You could try reading it with a different quote character and stripping the end characters yourself. That would only work if the <i>only</i> encoding issues are with these malformed quotes</span>
<span class="comment-copy">Can you upload the original file somewhere, possibly zipped to avoid overzealous sites messing with the encoding?</span>
<span class="comment-copy">If the file is read somewhat correctly using UTF-8 it surely isn't UTF-16.</span>
<span class="comment-copy">Problem still persists when I cam removing encoding. And when I tried to do encoding='utf-16. I got this error "UnicodeError: UTF-16 stream does not start with BOM"</span>
