<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>For simple calculation, like </p>
<p><code>1-0.92*0.9</code></p>
<p>My ipython3 gives the result</p>
<p><code>0.17199999999999993</code></p>
<p>instead of <code>0.172</code>  ??</p>
</div>
<div class="post-text" itemprop="text">
<p>iPython uses <em>64-bit floating-point</em> arithmetic. However, <em>floating-point</em> arithmetic is really binary, internally expressed in terms of ones and zeroes.</p>
<p>Floating-point arithmetic <strong>cannot</strong> determine something as simple as <code>0.9</code> or <code>0.92</code> exactly, meaning you still have roundoff errors. <strong>That is the binary equivalent of repeating/recurring decimals</strong>. The only workaround is to express these decimals as exact fractions or use an arbitrary precision or fixed-point library: <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">https://docs.python.org/3/library/fractions.html</a></p>
<p>In fact, floating-point arithmetic can only exactly express some non-integer numbers <code>x</code> which can be expressed in the form <code>x = a/b</code> where <code>a,b</code> are in lowest terms, <code>a, b</code> are integers, and <code>b</code> is either <code>1</code> or a <em>power of two</em>. It cannot exactly express tenths, or anything where the denominator <code>b</code> is a multiple of five, or any number other than 1 or 2. This is much like how lowest-term fractions <code>a/b</code> cannt be exactly represented as a decimal if <code>b</code> contains any factors other than <code>2</code> and <code>5</code>.</p>
<p>And furthermore, you have to keep in mind of the most and least significant values: they cannot be too far apart: <code>1.000000000000000000000001</code> as a double would drop the rightmost (least significant) 1.</p>
<p>Here are some examples:</p>
<ul>
<li>100 = 100/1. <code>b</code> is 1, meaning 100 is integral. 100 is exactly represented.</li>
<li>0.5 = 1/2. <code>b</code> is 2. 0.5 is exactly represented.</li>
<li>0.125 = 1/8. <code>b</code> is a power of 2. 0.125 is exactly represented.</li>
<li>0.9 = 9/10. <code>b</code> is 10, a multiple of 5. 0.9 cannot be exactly represented.</li>
<li>0.92 = 41/50. <code>b</code> is 50, a multiple of 5. 0.92 also cannot be exactly represented.</li>
</ul>
<p>See <a href="https://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is Floating Point Math broken?</a> for more information.</p>
</div>
