<div class="post-text" itemprop="text">
<p>I have a dictionary containing lists of varying lengths and I would like a general algorithm to produce the combinations of all the elements within the lists. A piece of example code is given below:</p>
<pre><code>bob = {'a':['a','b','c'],     
   'b':[0],
   'c':['x','y']}


for i in bob['a']:
    for j in bob['b']:
        for k in bob['c']:
            print("%s - %s - %s"%(str(i),str(j),str(k)))
</code></pre>
<p>This is the desired output for the particular dictionary 'bob' and it produces the output:</p>
<pre><code>a - 0 - x
a - 0 - y
b - 0 - x
b - 0 - y
c - 0 - x
c - 0 - y
</code></pre>
<p>However, I would like a general algorithm. Could I use recursion to generalise this so it can handle dictionaries with an arbitrary number of keys, if so how? </p>
<p>Extra Info: The values corresponding to the keys will always be 1D lists</p>
</div>
<div class="post-text" itemprop="text">
<p>The general algorithm is <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; print(*itertools.product(*bob.values()), sep='\n')
('a', 0, 'x')
('a', 0, 'y')
('b', 0, 'x')
('b', 0, 'y')
('c', 0, 'x')
('c', 0, 'y')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use product from itertools, it's very handy:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for x in product(*[bob[k] for k in ('a', 'b', 'c')]):
...     print(' - '.join(map(str, x)))
...
a - 0 - x
a - 0 - y
b - 0 - x
b - 0 - y
c - 0 - x
c - 0 - y
</code></pre>
<p>if the order of <code>bob</code>'s keys is not relevant, you can simplify this to:</p>
<pre><code>&gt;&gt;&gt; for x in product(*bob.values()):
...     print(' - '.join(map(str, x)))
</code></pre>
</div>
<span class="comment-copy">Have you tried to come up with your own solution?</span>
<span class="comment-copy">To answer your immediate question, yes.</span>
<span class="comment-copy">This is not very efficient memory-wise because it expands the full product into a tuple instead of using the fact that it is a generator.</span>
<span class="comment-copy"><code>deque(map(print, itertools.product(*bob.values())), maxlen=0)</code></span>
<span class="comment-copy">Use plain old for-loops if you want lazyness / memory efficiency.  deque-map-print is needless obfuscation.</span>
<span class="comment-copy">Of course it is. It's the "obligatory one-liner" :)</span>
