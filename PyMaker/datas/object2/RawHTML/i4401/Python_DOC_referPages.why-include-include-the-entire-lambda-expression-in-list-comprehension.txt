<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19693782/callback-function-tkinter-button-with-variable-parameter">Callback function tkinter button with variable parameter</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>In his <a href="https://www.toptal.com/python/top-10-mistakes-that-python-programmers-make" rel="nofollow noreferrer">writeup</a> on Python programming mistakes, Martin Chikilian includes the following to illustrate misconceptions regarding variable lifetimes inside closures:</p>
<pre><code>def create_multipliers():
    return [lambda x: i * x for i in range(5)]

for multiplier in create_multipliers():
    print(multiplier(2))
</code></pre>
<p>The output is understandably surprising to some as <code>i</code> maintains its final value (4) in the closure between calls to <code>multiplier</code>. Martin includes a hack to get the desired output (please see his article for details).</p>
<p>What I'm wondering about is what is being accomplished by including the entire <code>lambda</code> in the list comprehension? Is it a common idiom in some field such as scientific computing? Because, to me, the following is much easier to understand:</p>
<pre><code>def create_multiplier():
    return lambda x: [i * x for i in range(5)]

multiplier = create_multiplier()
print(multiplier(2))
</code></pre>
<p>Output:
[0, 2, 4, 6, 8]</p>
<p>The output from the 2nd version roughly matches that listed as desirable by Martin. So what's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>They accomplish different things. The former returns a list of lambas that return numbers and the latter returns a lambda that returns a list of numbers. You can imagine different use cases for each.</p>
</div>
<span class="comment-copy">check SO python canonical: <a href="https://sopython.com/canon/30/why-do-my-lambda-functions-or-nested-functions-created-in-a-loop-all-use-the-las/" rel="nofollow noreferrer">sopython.com/canon/30/…</a></span>
<span class="comment-copy">also python faq: <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">docs.python.org/3/faq/…</a></span>
