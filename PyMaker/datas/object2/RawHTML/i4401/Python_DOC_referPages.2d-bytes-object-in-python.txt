<div class="post-text" itemprop="text">
<p>I would like to address something like a 2D bytes or 2D bytearray object in python to allow me to slice along either dimension and access sections of the array in an efficient manner for somewhat large arrays (5000 x &gt;500 bytes).</p>
<p>I have found that numpy ndarrays will allow this if the dtype=bytes and each element of the array is a single byte object. I can even slice sections and cast back to bytes efficiently, but I have not found an efficient or simple way to split byte strings in to the individual bytes to place them in the numpy array.</p>
<p>For those that are interested, my application is taking in many identical length and format packets from TCP, swapping bytes for appropriate endianness, and casting them to their respective types to allow parsing packet headers, and data. I was previously handling one packet at a time, but the packets are being received at 2000 Hz, with a total throughput of ~ 25MB/sec and the required operations were too slow to keep up even after creating separate processes to do parts of the work. Handling packets in batches for speed is my last attempt to avoid rewriting the project in C++.</p>
<p>I am an electrical engineer with a strong background in C++, java, and MatLab, but I have only been working with python for a few months.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok so lets say you have a bytestring and are in python 3</p>
<pre><code>b = b'hello world!'
</code></pre>
<p>You can send this into a numpy array like so</p>
<pre><code>a = np.array(bytearray(b), dtype=np.byte)
# a --&gt; array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100,  33], dtype=int8)
</code></pre>
<p>Which you can then manipulate as you please (including converting to whatever shape you want). This change of shape is O(1), as efficient as you can get.</p>
<pre><code>a.shape = (3, 4)
</code></pre>
<p><code>a</code> is now</p>
<pre><code>[[104 101 108 108]
 [111  32 119 111]
 [114 108 100  33]]
</code></pre>
<p>Convert a row back into a python bytes object (aka bytestring)</p>
<pre><code>bytes(a[0])
# --&gt; b'hell'
</code></pre>
</div>
<span class="comment-copy">For the record, if you use numpy operations you can often get programs to be just as fast as C++. Removing <code>for</code> loops are replacing with vectorized numpy functions will result in massive speed ups.</span>
<span class="comment-copy">So you would suggest storing a batch of packets by extending a bytearray, then creating a numpy array and changing the array's shape to allow addressing of the packets?</span>
<span class="comment-copy">You can't extend <code>bytearray</code>s since they are immutable. You could store a <code>list</code> of <code>bytearray</code>s and then call <code>np.array</code> on that.</span>
<span class="comment-copy">@FHTMitchell <a href="https://docs.python.org/3/library/stdtypes.html#bytearray-objects" rel="nofollow noreferrer"><code>bytearray</code> objects</a> are mutable; you're thinking of the more common <code>bytes</code> type, which is immutable. From that link: "<code>bytearray</code> objects are a mutable counterpart to <code>bytes</code> objects."</span>
