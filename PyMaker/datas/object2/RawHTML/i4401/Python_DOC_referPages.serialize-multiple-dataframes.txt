<div class="post-text" itemprop="text">
<p>I have looked through the information that the <a href="https://docs.python.org/3/library/pickle.html" rel="noreferrer">Python docs</a> give, but I'm still a little confused. Could somebody post sample code that would write a new file then use pickle to dump a dictionary into it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import pickle

a = {'hello': 'world'}

with open('filename.pickle', 'wb') as handle:
    pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('filename.pickle', 'rb') as handle:
    b = pickle.load(handle)

print a == b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pickle

your_data = {'foo': 'bar'}

# Store data (serialize)
with open('filename.pickle', 'wb') as handle:
    pickle.dump(your_data, handle, protocol=pickle.HIGHEST_PROTOCOL)

# Load data (deserialize)
with open('filename.pickle', 'rb') as handle:
    unserialized_data = pickle.load(handle)

print(your_data == unserialized_data)
</code></pre>
<p>The advantage of <code>HIGHEST_PROTOCOL</code> is that files get smaller. This makes unpickling sometimes much faster.</p>
<p><strong>Important notice</strong>: The maximum file size of pickle is about 2GB.</p>
<h2>Alternative way</h2>
<pre><code>import mpu
your_data = {'foo': 'bar'}
mpu.io.write('filename.pickle', data)
unserialized_data = mpu.io.read('filename.pickle')
</code></pre>
<h2>Alternative Formats</h2>
<ul>
<li>CSV: Super simple format (<a href="https://stackoverflow.com/a/41585079/562769">read &amp; write</a>)</li>
<li>JSON: Nice for writing human-readable data; VERY commonly used (<a href="https://stackoverflow.com/a/37795053/562769">read &amp; write</a>)</li>
<li>YAML: YAML is a superset of JSON, but easier to read (<a href="https://stackoverflow.com/a/42054860/562769">read &amp; write</a>, <a href="https://stackoverflow.com/a/1729545/562769">comparison of JSON and YAML</a>)</li>
<li>pickle: A Python serialization format (<a href="https://stackoverflow.com/a/33245595/562769">read &amp; write</a>)</li>
<li><a href="http://msgpack.org/" rel="noreferrer">MessagePack</a> (<a href="https://pypi.python.org/pypi/msgpack-python" rel="noreferrer">Python package</a>): More compact representation (<a href="https://stackoverflow.com/q/43442194/562769">read &amp; write</a>)</li>
<li><a href="https://en.wikipedia.org/wiki/Hierarchical_Data_Format" rel="noreferrer">HDF5</a> (<a href="http://docs.h5py.org/en/latest/quick.html" rel="noreferrer">Python package</a>): Nice for matrices (<a href="https://stackoverflow.com/a/41586571/562769">read &amp; write</a>)</li>
<li>XML: exists too *sigh* (<a href="https://stackoverflow.com/a/1912483/562769">read</a> &amp; <a href="https://stackoverflow.com/a/3605831/562769">write</a>)</li>
</ul>
<p>For your application, the following might be important:</p>
<ul>
<li>Support by other programming languages</li>
<li>Reading / writing performance</li>
<li>Compactness (file size)</li>
</ul>
<p>See also: <a href="https://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats" rel="noreferrer">Comparison of data serialization formats</a></p>
<p>In case you are rather looking for a way to make configuration files, you might want to read my short article <a href="https://martin-thoma.com/configuration-files-in-python/" rel="noreferrer">Configuration files in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code># Save a dictionary into a pickle file.
import pickle

favorite_color = {"lion": "yellow", "kitty": "red"}  # create a dictionary
pickle.dump(favorite_color, open("save.p", "wb"))  # save it into a file named save.p

# -------------------------------------------------------------
# Load the dictionary back from the pickle file.
import pickle

favorite_color = pickle.load(open("save.p", "rb"))
# favorite_color is now {"lion": "yellow", "kitty": "red"}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general, pickling a <code>dict</code> will fail unless you have only simple objects in it, like strings and integers.</p>
<pre><code>Python 2.7.9 (default, Dec 11 2014, 01:21:43) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; type(globals())     
&lt;type 'dict'&gt;
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pik = pickle.dumps(globals())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 306, in save
    rv = reduce(self.proto)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/copy_reg.py", line 70, in _reduce_ex
    raise TypeError, "can't pickle %s objects" % base.__name__
TypeError: can't pickle module objects
&gt;&gt;&gt; 
</code></pre>
<p>Even a <strong>really</strong> simple <code>dict</code> will often fail.  It just depends on the contents.</p>
<pre><code>&gt;&gt;&gt; d = {'x': lambda x:x}
&gt;&gt;&gt; pik = pickle.dumps(d)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py", line 748, in save_global
    (obj, module, name))
pickle.PicklingError: Can't pickle &lt;function &lt;lambda&gt; at 0x102178668&gt;: it's not found as __main__.&lt;lambda&gt;
</code></pre>
<p>However, if you use a better serializer like <code>dill</code> or <code>cloudpickle</code>, then most dictionaries can be pickled:</p>
<pre><code>&gt;&gt;&gt; import dill
&gt;&gt;&gt; pik = dill.dumps(d)
</code></pre>
<p>Or if you want to save your <code>dict</code> to a file...</p>
<pre><code>&gt;&gt;&gt; with open('save.pik', 'w') as f:
...   dill.dump(globals(), f)
... 
</code></pre>
<p>The latter example is identical to any of the other good answers posted here (which aside from neglecting the picklability of the contents of the <code>dict</code> are good).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; with open("/tmp/picklefile", "wb") as f:
...     pickle.dump({}, f)
... 
</code></pre>
<p>normally it's preferable to use the cPickle implementation</p>
<pre><code>&gt;&gt;&gt; import cPickle as pickle
&gt;&gt;&gt; help(pickle.dump)
Help on built-in function dump in module cPickle:

dump(...)
    dump(obj, file, protocol=0) -- Write an object in pickle format to the given file.

    See the Pickler docstring for the meaning of optional argument proto.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple way to dump a Python data (e.g. dictionary) to a pickle file.</p>
<pre><code>import pickle

your_dictionary = {}

pickle.dump(your_dictionary, open('pickle_file_name.p', 'wb'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pickle

dictobj = {'Jack' : 123, 'John' : 456}

filename = "/foldername/filestore"

fileobj = open(filename, 'wb')

pickle.dump(dictobj, fileobj)

fileobj.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to store the dict in a single file, use <code>pickle</code> like that</p>
<pre><code>import pickle

a = {'hello': 'world'}

with open('filename.pickle', 'wb') as handle:
    pickle.dump(a, handle)

with open('filename.pickle', 'rb') as handle:
    b = pickle.load(handle)
</code></pre>
<p>If you want to save and restore multiple dictionaries in multiple files for 
caching and store more complex data, 
use <a href="https://pypi.python.org/pypi/anycache" rel="nofollow noreferrer">anycache</a>. 
It does all the other stuff you need around <code>pickle</code></p>
<pre><code>from anycache import anycache

@anycache(cachedir='path/to/files')
def myfunc(hello):
    return {'hello', hello}
</code></pre>
<p>Anycache stores the different <code>myfunc</code> results depending on the arguments to 
different files in <code>cachedir</code> and reloads them.</p>
<p>See the <a href="http://anycache.readthedocs.io" rel="nofollow noreferrer">documentation</a> for any further details.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've found pickling confusing (possibly because I'm thick).  I found that this works, though:</p>
<pre><code>myDictionaryString=str(myDictionary)
</code></pre>
<p>Which you can then write to a text file.  I gave up trying to use pickle as I was getting errors telling me to write integers to a .dat file.  I apologise for not using pickle.</p>
</div>
<span class="comment-copy">Read through this: <a href="http://www.doughellmann.com/PyMOTW/pickle/" rel="nofollow noreferrer">doughellmann.com/PyMOTW/pickle</a> and come back when you need a specific question</span>
<span class="comment-copy">-1 See previous comments. Try it. Then, if it didn't work (it won't always), a directed question can be formulated (along with a hypothesis or two that can be tested, and "queried for", possibly before asking the question to other people). E.g was there a syntax error? An exception? Did the values come back garbled?</span>
<span class="comment-copy">I have been trying to use this to save information from pygame. I have used the information above and my code looks like this:</span>
<span class="comment-copy">name = raw_input('input file name:')     tf = open(name+'.pkl','wb')     pickle.dump(total,tf)     tf.close()</span>
<span class="comment-copy">You should ask a new question about how to pickle surface objects</span>
<span class="comment-copy">@houbysoft: Why did you remove <code>pickle.HIGHEST_PROTOCOL</code>?</span>
<span class="comment-copy">@Blender: irrelevant and needlessly complicated for this level of question -- the average user will be just fine with the defaults.</span>
<span class="comment-copy">@houbysoft: True for Python 3 users, but on Python 2, using the default protocol (0) is not only incredibly inefficient on time and space, but it can't actually handle many things that protocol 2+ handles just fine (e.g. new-style classes that use <code>__slots__</code>). I'm not saying you should always use <code>HIGHEST_PROTOCOL</code>, but ensuring you don't use protocol 0 or 1 is actually rather important.</span>
<span class="comment-copy">What does <code>pickle.HIGHEST_PROTOCOL</code> actually do?</span>
<span class="comment-copy">@BallpointBen: It picks the highest protocol version your version of Python supports: <a href="https://docs.python.org/3/library/pickle.html#data-stream-format" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#data-stream-format</a></span>
<span class="comment-copy">is it necessary to use a close() after the open()?</span>
<span class="comment-copy">Yes, in general. However in CPython(The default python that you probably have) the file is automatically closed whenever the file object expires (when nothing refers to it). In this case since nothing refers to the file object after being returned by open(), it will be closed as soon as load returns. This is not considered good practice and will cause problems on other systems</span>
<span class="comment-copy">-1: Should save it as it is (i.e, a python object) so that we can read it later without hours waiting to run it again. Pickle allows us to store a python object to read later.</span>
