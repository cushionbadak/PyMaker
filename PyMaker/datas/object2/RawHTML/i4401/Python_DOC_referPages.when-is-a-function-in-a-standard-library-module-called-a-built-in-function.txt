<div class="post-text" itemprop="text">
<p>I am confused about the term "built-in" function. I thought it meant only those functions built into the interpreter and documented in -
<a href="https://docs.python.org/3/library/functions.html" rel="noreferrer">2. Built-in Functions</a><br/>
But it appears that functions defined in standard library modules are also built-in functions (in some cases). For example -</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.chdir
&lt;built-in function chdir&gt;
&gt;&gt;&gt; import warnings
&gt;&gt;&gt; warnings.warn
&lt;built-in function warn&gt;
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps
&lt;function dumps at 0x7f3643a240d0&gt; # not built-in
&gt;&gt;&gt; dir
&lt;built-in function dir&gt;
&gt;&gt;&gt; 
</code></pre>
<p>So when is a function in a standard library module called a built-in function and when is it not? </p>
</div>
<div class="post-text" itemprop="text">
<p>There are two meanings of “built-in” here, although they both mean “part of the interpreter”.  The library reference uses it to indicate that a function is available without an <code>import</code> (it is “not part of a module”, although see <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer"><code>builtins</code></a>).  The interpreter itself uses it to indicate that a function is implemented natively rather than in Python (in CPython, it is at least nominally <a href="https://docs.python.org/3/library/types.html#types.BuiltinMethodType" rel="noreferrer">implemented in C</a>).</p>
<p>There is yet another meaning on the C side: an extension module (<em>i.e.</em>, one written in C) is built-in if the Python binary incorporates it rather than loading it if and when needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>A built-in function, as per <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">the Reference manual</a> is:</p>
<blockquote>
<p><strong>Built-in functions</strong></p>
<p>A built-in function object is a wrapper around a C function. Examples of built-in functions are <code>len()</code> and <code>math.sin()</code> (<code>math</code> is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes: <code>__doc__</code> is the function’s documentation string, or <code>None</code> if unavailable; <code>__name__</code> is the function’s name; <code>__self__</code> is set to None (but see the next item); <code>__module__</code> is the name of the module the function was defined in or None if unavailable.</p>
</blockquote>
<p>This refers to CPython, other implementations, such as Jython would use Java instead of C to implement their built-ins. </p>
<hr/>
<p>The section <a href="https://docs.python.org/3/library/functions.html#built-in-functions" rel="nofollow noreferrer">on Built-in functions</a> of the Standard library is talking about things that are always available. This along with <a href="https://docs.python.org/3/library/constants.html#built-in-constants" rel="nofollow noreferrer">Built-in constants</a> and <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">Built-in Types</a> form the built-in namespace of identifiers that you can always access. </p>
<p>Not everything in this built-in namespace is a built-in function or a built-in type. Notable cases are those use in interactive mode such as <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help</code></a> and <a href="https://docs.python.org/3/library/constants.html#quit" rel="nofollow noreferrer"><code>quit/exit</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the book "<em>Fluent Python</em>" by <strong>Luciano Ramalho</strong>, First Edition Third release 2016-03-18, published by O'Reilly, it reads on page 742:</p>
<blockquote>
<p>The term [i. e. "built-in function"] often refers only to the functions that don't need to be imported ... But built-in modules like sys, math, re, etc. also contain built-in functions.</p>
</blockquote>
<p>Overall, this term seems to be used inconsistently. But for all practical purposes, this should be of no significance."</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, from this definition, a function is builtin when it says it is builtin ;) </p>
<p>More seriously: Python is a language (let's call it the "legal" part), CPython is one (and not the only) implementation of the Python language (let's call it the "technical" part). </p>
<p>From a legal POV, the language definition states that an implementation must make some functions (and classes and objects) available without any import (IOW there are "built in" the language itself). This is what the Python documentation defines as "builtin".</p>
<p>Now from a technical POV this doesn't prevent an implementation from having some other functions / objects / classes "technically" builtin (in that they are technically part of the runtime) BUT exposed as parts of one of the stdlib's module or package. </p>
</div>
<span class="comment-copy">It seems to me that built-ins are functions that are part of interpreter, but contrary to the documentation ("The library also contains built-in functions and exceptions — objects that can be used by all Python code without the need of an import statement.", <a href="https://docs.python.org/3/library/intro.html" rel="nofollow noreferrer">docs.python.org/3/library/intro.html</a>) they can be placed in a library</span>
<span class="comment-copy">Do you mean to say that a built-in function is in C? But, for example, <code>warnings.warn</code> is a built-in function that is in Python.</span>
<span class="comment-copy">@debashish: <a href="https://github.com/python/cpython/blob/v3.6.5/Python/_warnings.c#L828" rel="nofollow noreferrer">It's in C.</a></span>
<span class="comment-copy">@user2357112: "it's in C"  only if it's CPython. Don't forget there are other implementations (in Java, dotnet and even in Python itself).</span>
<span class="comment-copy">When I <code>import warnings</code> the <code>warnings.py</code> file gets loaded. It has pure Python function called <code>warn</code>. How does the C function get called instead of the Python one?</span>
<span class="comment-copy">Ok I got it. There is a <code>from _warnings import ...</code> in the <code>warnings.py</code> file.</span>
