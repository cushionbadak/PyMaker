<div class="post-text" itemprop="text">
<p>I am just learning generators in Python. It seems that if you assign generator to a tuple then next() is called silently behind the scenes - as if unpacking was forcing that call. But if you assign to tuple with single value then you get generator object itself. Do I get it right?
Trivial code follows:</p>
<pre><code>def generator(n):
    x = 0
    while x &lt; n:
        yield x
        x = x + 1

(x,*foo) = generator(1)
print(x, foo)    
(x,*foo) = generator(3)
print(x, foo)
(x) = generator(1)
print(x)    
</code></pre>
<p>Output is:</p>
<pre><code>0 []
0 [1, 2]
&lt;generator object generator at 0x05F06900&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first two lines use <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">tuple packing/unpacking</a>: they yield all values from the generator and then set them to x and foo. This is because <code>(x, foo)</code> is syntax for a tuple (a pair of items).</p>
<p>However, <code>(x)</code> is syntax for a variable. You would get what you expected if you write <code>(x,)</code>, which is how tuples of size 1 are created.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax </p>
<pre><code>(x) = generator(1)
</code></pre>
<p>is <strong>not</strong> a tuple of one item.  You want:</p>
<pre><code>(x,) = generator(1)
</code></pre>
<p>or </p>
<pre><code>x, = generator(1)
</code></pre>
<p>Then you'll find the generator is called, just as in your other examples, due to "unpacking".  </p>
<p>Note that in the expression <code>(x, y)</code> it is not the <code>()</code> that make it a tuple, it is the comma.  The parentheses simply bound the expression <code>x, y</code>. </p>
</div>
<span class="comment-copy">can't recreate... <code>SyntaxError: invalid syntax</code> on <code>*foo)</code>. Is this only for Py3?</span>
<span class="comment-copy">@ClsForCookies ... yes that is a Python 3 expression</span>
<span class="comment-copy">The second last line of code <i>assigns</i> a generator to a variable. The two earlier lines are unpacking and therefore <i>consuming</i> it.</span>
