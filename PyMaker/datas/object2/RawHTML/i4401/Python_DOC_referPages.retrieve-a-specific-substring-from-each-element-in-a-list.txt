<div class="post-text" itemprop="text">
<p>It is few hours I am stuck with this:
I have a Series called <code>size_col</code> of 887 elements and I want to retrieve from the sizes: <code>S, M, L, XL</code>.  I have tried 2 different approaches, list comprehension and a simple <code>if elif</code> loop, but both attempts do not work.</p>
<pre><code>sizes = ['S', 'M', 'L', 'XL']

tshirt_sizes = []
[tshirt_sizes.append(i) for i in size_col if i in sizes]
</code></pre>
<p>Second attempt:</p>
<pre><code>sizes = []
for i in size_col:
if len(i) &lt; 15:
   sizes.append(i.split(" / ",1)[-1])
else:
   sizes.append(i.split(" - ",1)[-1])
</code></pre>
<p>I created two conditions because in some cases the size follows the <code>' - '</code> and in some other the is a <code>'/'</code>.
I honestly don't know how do deal with that.</p>
<p>Example of the list:</p>
<pre><code>T-Shirt Donna "Si dai. Ciao." - M
T-Shirt Donna "Honey" - L
T-Shirt Donna "Si dai. Ciao." - M
T-Shirt Donna "I do very bad things" - M
T-Shirt Donna "Si dai. Ciao." - M
T-Shirt Donna "Stai nel tuo (mind your business)" - White / S
T-Shirt Donna "Stay Stronz" - White / L
T-Shirt Donna "Stay Stronz" - White / M
T-Shirt Donna "Si dai. Ciao." - S
T-Shirt Donna "Je suis esaurit" - Black / S
T-Shirt Donna "Si dai. Ciao." - S
T-Shirt Donna "Teamo - Tequila" - S / T-Shirt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll need <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> here. Precompile a regex pattern and then use <code>pattern.search</code> inside a list comprehension.</p>
<pre><code>sizes = ['S', 'M', 'L', 'XL']
p = re.compile(r'\b({})\b'.format('|'.join(sizes))) 

tshirt_sizes = [p.search(i).group(0) for i in size_col]
</code></pre>
<p></p>
<pre><code>print(tshirt_sizes)
['M', 'L', 'M', 'M', 'M', 'S', 'L', 'M', 'S', 'S', 'S', 'S']
</code></pre>
<p>For added security, you may want a loop instead - list comprehensions are not good with error handling:</p>
<pre><code>tshirt_sizes = []
for i in size_col:
    try:
        tshirt_sizes.append(p.search(i).group(0))
    except AttributeError:
        tshirt_sizes.append(None)
</code></pre>
<p>Really the only reason to use regex here is to handle the last row in your data appropriately. In general, if you can, you should prefer the use of string operations (namely, <code>str.split</code>) unless avoidable, they're much faster and readable than regular expression based pattern matching and extraction.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like that:</p>
<pre><code>available_sizes = ["S", "M", "L", "XL"]
sizes = []

for i in size_col:
    for w in i.split():
        if w in available_sizes:
            sizes.append(w)
</code></pre>
<p>This wouldn't work if the text contains the words in available_sizes more than once, for example <code>T-Shirt Donna "La S è la più bella consonante" - M</code>, since it would add both S and M to the list.</p>
<hr/>
<p>Original answer, before OP specified that the size is not always the last word.</p>
<p>Almost. Just split the string in words and take the last one.</p>
<pre><code>sizes = []
for i in size_col:
    sizes.append(i.split()[-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two aspects to this question, 1) the best method of looping over the element and 2) the correct way to split the string.</p>
<p>In the general case, list comprehensions are probably the right approach for this type of problem, but you have correctly identified the splitting the string correctly is tricky.</p>
<p>For this type of problem <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> are very powerful and (at the risk of complicating this compared to the previous answers) you could use something like:</p>
<pre><code>import re
pattern = re.compile(r'[-/] (A-Z)$') # select any uppercase letters after either - or / and a space and before the end of the line (marked by $)

sizes = [pattern.search(item).group(1) for item in size_col] # group 1 selects the set of characters in the first set of parentheses (the letters)
</code></pre>
<p>Edited: just saw the edit to the posts stating that the item is not always at the end, and COLDSPEED's answer duplicates this one...</p>
</div>
<span class="comment-copy">If you're posting examples, please post text only. I don't know about you, but I can't copy paste text from a picture without running tesseract, and that's too much work.</span>
<span class="comment-copy">@coldspeed edited, sorry.</span>
<span class="comment-copy">Sorry, Just saw the edit to the file. Apparently the size is not always the last word. Gonna edit soon.</span>
<span class="comment-copy">that would not work, in some cases the size is not the last element, and moreover this would not work for 'XL'</span>
<span class="comment-copy">This WOULD work for XL, because it takes the last word. But wouldn't work if the size is not the last word.</span>
<span class="comment-copy">I updated the answer. The new implementation is equivalent to the accepted one but slightly faster on my machine: 14.6 µs ± 214 ns against 22.7 µs ± 1.09 µs, from what the magic command %timeit says.</span>
