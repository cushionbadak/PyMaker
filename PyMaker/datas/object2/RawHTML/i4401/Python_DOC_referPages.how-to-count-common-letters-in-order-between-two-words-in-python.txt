<div class="post-text" itemprop="text">
<p>I have a string <code>pizzas</code> and when comparing it to <code>pizza</code> - it is not the same. How can you make a program that counts common letters (in order) between two words, and if it's a 60% match then a variable <code>match</code> is <code>True</code>?</p>
<p>For e.g. <code>pizz</code> and <code>pizzas</code> have 4 out of 6 letters in common, which is a 66% match, which means <code>match</code> must be <code>True</code>, but <code>zzip</code> and <code>pizzas</code>do not have any letters in order in common, thus <code>match</code> is <code>False</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can write a function to implement this logic.</p>
<p><code>zip</code> is used to loop through the 2 strings simultaneously.</p>
<pre><code>def checker(x, y):
    c = 0
    for i, j in zip(x, y):
        if i==j:
            c += 1
        else:
            break
    return c/len(x)

res = checker('pizzas', 'pizz')  # 0.6666666666666666
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def longestSubstringFinder(string1, string2):
    answer = ""
    len1, len2 = len(string1), len(string2)
    for i in range(len1):
        match = ""
        for j in range(len2):
            if (i + j &lt; len1 and string1[i + j] == string2[j]):
                match += string2[j]
            else:
                if (len(match) &gt; len(answer)): answer = match
                match = ""
    return answer

ss_len = len(longestSubstringFinder("pizz", "pizzas"))
max_len = max(len("pizza"),len("pizzas"))
percent = ss_len/max_len*100
print(percent)
if(percent&gt;=60):
    print("True");
else:
    print("False")
</code></pre>
<hr/>
<p>Optimised algorithm using <code>dynamic programming</code>:</p>
<pre><code>def LCSubStr(X, Y, m, n):

    LCSuff = [[0 for k in range(n+1)] for l in range(m+1)]

    result = 0

    for i in range(m + 1):
        for j in range(n + 1):
            if (i == 0 or j == 0):
                LCSuff[i][j] = 0
            elif (X[i-1] == Y[j-1]):
                LCSuff[i][j] = LCSuff[i-1][j-1] + 1
                result = max(result, LCSuff[i][j])
            else:
                LCSuff[i][j] = 0
    return result
</code></pre>
<p>This will directly return the length of LCS.</p>
</div>
<span class="comment-copy">Compare each letter one by one, and keep a count of the hits. In the end, calculate the number of hits vs total length.. And decide</span>
<span class="comment-copy">I think you should clarify whether "pizzaz" and "pizaz" should be a match, because the task is much more simple if you don't allow breaks in the middle.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/difflib.html#difflib.get_close_matches" rel="nofollow noreferrer">difflib.get_close_matches</a>.</span>
<span class="comment-copy">You may find the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow noreferrer">Levenshtein distance</a> (or other metrics) useful for string similarity.</span>
