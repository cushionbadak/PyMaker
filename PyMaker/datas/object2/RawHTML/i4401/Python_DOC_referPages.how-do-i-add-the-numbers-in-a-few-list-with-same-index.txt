<div class="post-text" itemprop="text">
<p>this is what i have for the lists broken from a 2d list:</p>
<pre><code>[0, 0, 0, 0, 0, 3, 3, 3]

[0, 0, 0, 0, 2, 0, 0, 0, 2]

[0, 0, 0, 1, 0, 0, 0, 0, 0, 1]

[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1]

[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2]

[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3]
</code></pre>
<p>and because they are broken from the same list, I don't know how to add them into a new list.</p>
<p>Do I append them into a new list and zip them? But how do I append them(because they are from the same list, if I use index[3], it will only come out with the number in each line(for example, 0 for index[3],line1))</p>
<p><strong><em>This is what I expect:</em></strong></p>
<pre><code>[ 0, 0, 0, 1, 2, 3, 3, 3, 2, 1, 0, -1, -2, -3, -3, -3, -2, -1, 0, 0, 0 ]
</code></pre>
<p>that is , all the numbers with the same index got add together.</p>
<p>Please give me some hint. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">itertools.zip_longest</a>.</p>
<blockquote>
<p>Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with <em>fillvalue</em>. Iteration continues until the longest iterable is exhausted.</p>
</blockquote>
<pre><code>from itertools import zip_longest

num_lists = [[0, 0, 0, 0, 0, 3, 3, 3],
             [0, 0, 0, 0, 2, 0, 0, 0, 2],
             [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3]]

result = [sum(lst) for lst in zip_longest(*num_lists, fillvalue=0)]

print(result)

[0, 0, 0, 1, 2, 3, 3, 3, 2, 1, 0, -1, -2, -3, -3, -3, -2, -1, 0, 0, 0]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>welp, it looks from the example that the items that go to the target list do not overlap by their indicies in the source lists- if it is guaranteed you can do something like this:</p>
<pre><code>list_of_lists = [ # broken list 1
    [[0, 0, 0, 0, 0, 3, 3, 3],
     [0, 0, 0, 0, 2, 0, 0, 0, 2],
     [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2],
     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3]],
   [# broken list 1
    [0, 0, 0, 0, 0, 3, 3, 3],
    [0, 0, 0, 0, 2, 0, 0, 0, 2],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, -1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, -3]],
  ]


def combine_broken_list(lists):
    max_size = max(map(len, lists))  # get target list size
    result = [0] * max_size          # initialize target list to zeros - if nothing target is zero, then this will stay that way

    for sublist in lists:
         found_ix = 0                     # when we find a nonzero, we know we do not need to look before it again, since we start at 0.
        for i, x in enumerate(sublist[found_ix:]):  
            if x != 0:                   # iterate and find non zeros
                found_ix = i
                result[i] = sublist[i]   # set target value to source value
     return result

# run on several broken lists
result = list(map(combine_broken_list, list_of_lists))

print(result) # show result
# test result 1
tgt = [0, 0, 0, 1, 2, 3, 3, 3, 2, 1, 0, -1, -2, -3, -3, -3, -2, -1, 0, 0, 0 ]
print(result[0] == tgt)
# &gt;True
</code></pre>
<p>If that guarantee does not exist, then what are the precedence rules?</p>
<p>There is probably a more efficient solution with numpy, but this should work.</p>
</div>
<span class="comment-copy">can you post the code of the lists so we can see exactly what format they are in</span>
<span class="comment-copy">Very nice .... just picking through this implementation</span>
<span class="comment-copy">Appreciate it! If I have multiple lists that I want to add, can I use this?</span>
<span class="comment-copy">One more question - if I have multiple lists that I want to add them together as above, do I use the zip function after this?</span>
<span class="comment-copy">Only if they are the same length. Otherwise I would just run this as a function, and then append the results to a new list:</span>
<span class="comment-copy">Thank you! I haven't been that far yet, I will give it a go when I do. Appreciate for your patience!</span>
<span class="comment-copy">do you mean like this? updated code to reflect doing this operation to several broken 2d lists.</span>
