<div class="post-text" itemprop="text">
<p>I was a little curious because when I add a single line in my code, that counts the number of rows in the csv file, the for loop is stop working and just skipping everything inside.</p>
<p>My code shown below, is working now, but if I uncomment the row_count it's not working, so my question is why?</p>
<pre><code>with open(r"C:\Users\heltbork\Desktop\test\ICM.csv", newline='') as csvfile:
    sensor = csv.reader(csvfile, delimiter=',', quotechar='|')

    #row_count = sum(1 for row in sensor)
    #print(row_count)
    for row in sensor:
        #alot of stuff here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reader is an iterable (see the <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow noreferrer">iterator protocol</a>):</p>
<blockquote>
<p>... One notable exception is code which attempts multiple iteration passes. A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.</p>
</blockquote>
<p>The iterable is consumed when you iterate it. It is not a concrete data structure:</p>
<pre><code>sensor = csv.reader(...) # creates an iterator

row_count = sum(1 for row in sensor) # *consumes* the iterator

for row in sensor: # nothing in the iterator, consumed by `sum`
    # a lot of stuff here
</code></pre>
<p>You should count while you iterate (inside <code>for row in sensor:</code>), because once you iterate and consume it - you can't iterate again.</p>
<p>Alternatives are using <code>list</code> for concreting the data, or if you need the iterable interface - <code>itertools.tee</code> (if you don't have a lot if data). You can also use <code>enumerate</code> and keep the last index.</p>
<p>Example:</p>
<pre><code>sensor = csv.reader(...) # creates an iterator

count = 0
for idx, row in enumerate(sensor):
    # a lot of stuff here
    # ...
    count = idx
print(count)
</code></pre>
<p>Or:</p>
<pre><code>count = 0
for row in sensor:
    # a lot of stuff here
    # ...
    count += 1
print(count)
</code></pre>
</div>
<span class="comment-copy">When you do a 'sum(1 for row in sensor)' the file would have been read completely and when you try to do the same again, it would be empty.</span>
<span class="comment-copy">You can try like <code>len(list(sensor))</code></span>
<span class="comment-copy">why are you using <code>sum</code> i.e a python builtin function as a variable . I think that is causing the issue. Please using some other name for counting</span>
<span class="comment-copy">@toheedNiaz it's indeed the builtin, not a variable.</span>
