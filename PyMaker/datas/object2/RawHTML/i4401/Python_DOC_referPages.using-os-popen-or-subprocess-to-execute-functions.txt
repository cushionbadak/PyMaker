<div class="post-text" itemprop="text">
<p>I'm currently studying threading, multiprocess, and os documentations to improve the structure of my program. However to be honest to me, some of it is sophisticated, I can't get it to implement on my program, either it crashes due to stackoverflow, or gets the wrong ourput or no output at all. So here's my problem.</p>
<p>Let's say I have a list of names that gets passed into a function and that function is what I want to run in another console with - ofcourse a python interpretter. and have it run there in a full cycle.</p>
<p>Let's say I have this: </p>
<pre><code>def execute_function(name, arg1, arg2):
   While True:
       #do something

for name in names:
   execute_function(name, arg1, arg2)
</code></pre>
<p>what should I use in order to run this function to open another console programatically on python and run it there <code>While True:</code> is it subproccess/multiprocess/threading or perhaps <code>os.popen()</code>?</p>
<p>And how should I execute,  in this example? The multiprocessing Pool and Process always crashes with me. So I think its not the right solution. So far from what I've searched I haven't seen examples with threading and subprocess being used with functions. Is there a workaround on this? or perhaps a simple solution I might have missed? Thanks.</p>
<p>Edit:</p>
<p>A similar code:</p>
<pre><code>     if symbols is not None and symbols1 is not None:

         symbols = [x for x in symbols if x is not None]
         symbols1 = [x for x in symbols1 if x is not None]
         if symbol != None and symbol in symbols and symbol in symbols1:
              with Pool(len(exchanges)) as p:
                   p.map(bot_algorithm, (a, b, symbol, expent,amount))
</code></pre>
<p><a href="http://prntscr.com/j4viat" rel="nofollow noreferrer">http://prntscr.com/j4viat</a> - what the error looks like</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess</code> is <strike>always</strike> usually preferred over <code>os.system()</code>.</p>
<p>The docs contain a number of examples - in your case, your <code>execute_function()</code> function might want to use <code>subprocess.check_output()</code> if you want to see the results of the command. </p>
<p>eg.:</p>
<pre><code>def execute_function(name, arg1, arg2):
  output = subprocess.check_output(["echo", name])
  print(output)
</code></pre>
<p>All this does though is launch a new process, and waits for it to return. While that's technically two processes, it's not exactly what you'd call multi-threading.</p>
<p>To use run multiple subprocesses at synchronously, you might do something like this with the multiprocessing library:</p>
<pre><code>from multiprocessing.dummy import Pool

def execute_function(name, arg1, arg2):
  return subprocess.check_output(["echo", name])

names = ["alex", "bob", "chrissy"]

pool = Pool()

map_results = pool.map(execute_function, names)
</code></pre>
<p>this maps an iterator (the list of names) to a function (execute_function) and runs them all at once. Well, as many cores as your machine has at once. map_results is a list of return values from the <code>execute_function</code> func.</p>
</div>
<span class="comment-copy">can you post the code that's crashing as well?</span>
<span class="comment-copy">Are you trying to get another console to open and run your script, or are you fine with a background process/thread that will run in the same console?</span>
<span class="comment-copy">@deku, what we ask for isn't your original code, but the smallest/simplest code that can be written to let someone else produce the same problem, test their proposed answers, etc. See the <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> definition, and/or the <a href="http://sscce.org/" rel="nofollow noreferrer">Short, Self-Contained, Correct Example</a> definition.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/os.html#os.popen" rel="nofollow noreferrer"><code>os.popen</code></a> is essentially just a wrapper around <code>subprocess.Popen</code>, so which you use is a just matter of how much control you want over starting the process.</span>
<span class="comment-copy">@deku. Conceptually, we are asking that you put as much effort into your question as you expect us to. As phrased right now, someone that is not a mind reader will not likely be able to help you much, so your question is more likely to get closed than to get a proper answer.</span>
<span class="comment-copy">At least in Python 3, <code>os.popen</code> is just a wrapper around <code>subprocess.Popen</code>, hiding arguments you probably weren't going to use anyway. You might be thinking of <code>os.system</code>.</span>
<span class="comment-copy">This is probably helpful even if it's unclear what OP actually wants</span>
<span class="comment-copy">@chepner you're absolutely right; updated.</span>
<span class="comment-copy">I'd still say <code>subprocess.Popen</code> is always preferable to <code>os.system</code>; <code>os.popen</code> provides a simpler interface to certain uses of <code>subprocess.Popen</code> that you might choose if it is sufficient.</span>
<span class="comment-copy">@MadPhysicist <code>call('ls')</code> is still shorter than <code>system('ls')</code>.</span>
