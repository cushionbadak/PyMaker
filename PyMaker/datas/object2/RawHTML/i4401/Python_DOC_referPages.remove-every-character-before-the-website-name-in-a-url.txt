<div class="post-text" itemprop="text">
<p>For example if I have <code>https://stackoverflow.com/questions/ask</code> I'd like to cut it to <code>stackoverflow.com/questions/ask</code> or if I have <code>http://www.samsung.com/au/</code> I'd like to cut it to <code>samsung.com/au/</code>. </p>
<p>I want to make a template tag for this but not sure what to return:</p>
<pre><code>def clean_url(url):
    return ?
</code></pre>
<p>template</p>
<pre><code>{{ url|clean_url }}
</code></pre>
<p>Any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a quick and dirty way to isolate the domain provided it starts with <code>something//</code></p>
<pre><code>def clean(url):
  return url.partition('//')[2].partition('/')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">urllib.parse</a> will do most of this for you: </p>
<pre><code>import urllib.parse
def clean_url(url):
    parts = list(urllib.parse.urlsplit(url))
    parts[0]=""
    cleaned = urllib.parse.urlunsplit(parts)[2:]
    return cleaned
</code></pre>
<p>Note this does not cut off the "www.", but you shouldn't do that; that can be a critical part of the domain name. If you really want that, add:</p>
<pre><code>if cleaned.startswith("www."):
    cleaned = cleaned[4:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the use cases, you described. You can just split on the double backslash and go with that or work from there.</p>
<pre><code>def clean_url(url):
    clean = url.split('//')[1]
    if clean[0:4] == 'www.':
        return clean[4:]
    return clean
</code></pre>
<p>However, because the subdomain (such as 'www') can be used as a significant part of the url, you may want to keep that in. For example, www.pizza.com and pizza.com could be links to different pages.</p>
<p>Other things to consider are the urlparse library or regex but they may be overkill for this.</p>
</div>
<span class="comment-copy">why do you want to do this?</span>
<span class="comment-copy">On advertised posts on my site I want to show the site the post links to - but I want it to look clean without the <code>https</code> or <code>www</code> etc</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/a/286194/1081569">here</a>, but in Python 3 it's <code>from urllib.parse import urlparse</code>.</span>
<span class="comment-copy">@ivan_pozdeev, that was uncalled for.  Not everyone has your though process when it comes to typing what to search for.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/286150/how-to-split-a-web-address">How to split a web address</a></span>
<span class="comment-copy">Or just use the quick and clean <code>urllib.parse.urlparse(url).netloc</code> :) He wanted to keep the path though, not just the domain.</span>
