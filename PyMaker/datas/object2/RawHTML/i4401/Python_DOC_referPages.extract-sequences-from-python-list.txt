<div class="post-text" itemprop="text">
<p>I have a list in python which looks like this:</p>
<pre><code>['x','x','x','x','P','x','x','N','P','N','x','x','x','N','P','x','x,'x,','x','x','x','N','x,'x','P','N','x','x','x'....]
</code></pre>
<p>I need to process the list in some way such that I return individual sequences of <code>P</code> and <code>N</code>. In the above case I need to return:</p>
<pre><code>[['P'],['N','P','N'],['N','P'],['N'],['P','N'].....]
</code></pre>
<p>I have looked at <code>itertools</code> but have not found anything that can do this. I have a lot of lists to process in this way so efficiency is also important.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer">itertools.groupby</a>:</p>
<pre><code>from itertools import groupby

data = ['x','x','x','x','P','x','x','N','P','N','x','x','x','N',
        'P','x','x','x','x','x','x','N','x','x','P','N','x','x','x']

out = list(list(g) for k, g in groupby(data, lambda item: item in {'N', 'P'}) if k)

print(out)
# [['P'], ['N', 'P', 'N'], ['N', 'P'], ['N'], ['P', 'N']]
</code></pre>
<p>We group according to <code>item in {'N', 'P'}</code>, and keep only the groups for which this is True. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>    main_list = []
    def get_desired_value(_list):
        new_list = []
        for val in _list:
            if val in ['N', 'P']:
                new_list.append(val)
            else:
                if new_list:
                    main_list.append(new_list[:])
                    new_list.clear()
        return main_list
   print(get_desired_value(data))
   &gt;&gt;&gt;[['P'], ['N', 'P', 'N'], ['N', 'P'], ['N'], ['P', 'N']]
</code></pre>
</div>
<span class="comment-copy">Did you try to come up with this algorithm yourself?</span>
<span class="comment-copy">What does "a lot of lists" mean (e.g. more than 10³ or more than 10⁹)?How large are they (e.g. more than 10³ or more than 10⁹ elements/bytes)? What are your performance requirements? A naive implementation can be done in less than 10 lines of code, but recommending solutions is difficult without answers to these questions.</span>
<span class="comment-copy">There are ~100,000 lists of average length 500. I think Thierry Latuille answer will do the trick! thanks</span>
<span class="comment-copy">This is exactly what I was looking for! Thank you!</span>
