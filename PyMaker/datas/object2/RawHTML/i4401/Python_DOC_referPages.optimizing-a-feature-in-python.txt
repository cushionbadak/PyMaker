<div class="post-text" itemprop="text">
<p>I have a piece of code that requires hours to run on long lists : </p>
<pre><code>for elt in listCombinaisons_survivor:     
    effects = []
    for idBadge in elt:
        effects.append(dictBadges[idBadge]["Effect"])
    cpt = Counter(effects)
    for type_effect in cpt.keys():
        cpt_effect = cpt[type_effect]
        if cpt_effect &gt; 3:
            listCombinaisons_survivor.remove(elt)
            break
</code></pre>
<p>My <code>listCombinaisons_survivor</code> contains all the possible combinations of 6 badges among 57 possibilities (<code>[1,2,3,5,6,7],[1,2,3,5,6,8]...</code>).</p>
<p>For each possible combination, I pick in a dictionary the "Effect" matching the badge ID (Badge ID 1 = Damage), and I collect all the effects in the list "effects".</p>
<p>I then count how much occurencies of each effect I have, and if I have more than 3 badges with the same effect in a combination, I delete this combination.</p>
<p>Is there any way I could optimize this code to make it faster ?</p>
<p>I also tried this but this is not faster : </p>
<pre><code>newlist_combinations = []
for elt in listCombinaisons_survivor:     
    effects = []
    for idBadge in elt:
        effects.append(dictBadges[idBadge]["Effect"])
    cpt = Counter(effects)
    for type_effect in cpt.keys():
        cpt_effect = cpt[type_effect]
        if cpt_effect &gt; 3:
            break
    if not cpt_effect &gt; 3:
        newlist_combinations.append(elt)
</code></pre>
<p>I don't want to know how much time it takes, but how to optimize this code.</p>
<p>The whole code can be found there : </p>
<p><a href="https://github.com/yirkkiller/Python/blob/master/badgesRepartition-NEW.py" rel="nofollow noreferrer">https://github.com/yirkkiller/Python/blob/master/badgesRepartition-NEW.py</a></p>
<p>Thanks !</p>
</div>
<div class="post-text" itemprop="text">
<p>Apart from the very unclear variable names, your algorithm basically comes down to this:</p>
<pre><code>def filter_effects(listCombinaisons_survivor):
    for elt in listCombinaisons_survivor
        cpt = Counter(dictBadges[idBadge]["Effect"] for idBadge in elt)
        if all(value &lt;= 3 for key, value in cpt.items()):
            yield elt
</code></pre>
<p>PS. If I look at your complete script, I would recommend you first learn the basics of Python. There are a lot of things that can be done a lot clearer, robuster and simpler</p>
<p>I suggest:</p>
<ul>
<li>A whirlwind tour of Python (<a href="http://www.oreilly.com/programming/free/a-whirlwind-tour-of-python.csp" rel="nofollow noreferrer">link</a>)</li>
<li>Fluent Python (<a href="http://shop.oreilly.com/product/0636920032519.do" rel="nofollow noreferrer">link</a>)</li>
<li>'Looping like a Pro' by David Baumgold</li>
</ul>
</div>
<span class="comment-copy">Use a profile: <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">docs.python.org/3/library/profile.html</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/582336/how-can-you-profile-a-script">How can you profile a script?</a></span>
<span class="comment-copy">that's not a valid dictionary....</span>
<span class="comment-copy">^^ thats not a valid dictionary either</span>
<span class="comment-copy">Please post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. Note that 57 choose 6 = 36288252, so if what you are doing with each such combination takes more than a fraction of a millisecond you can expect your code to take hours to run.</span>
<span class="comment-copy">Thanks Maarten :-) I'm indeed not a developer but a DevOps, so no proper training to development, just learning by myself. I know there are MANY things I don't master yet, I just try to make this script work as much as I can.</span>
