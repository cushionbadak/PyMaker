<div class="post-text" itemprop="text">
<p>In the current project that i'm working on, i need to regroup (group) a queryset by category and put contents with same category in a list all provided together.
I have the following model structure:</p>
<pre><code>class Category(models.Model):
    title = models.CharField(max_length=255)

class Item(models.Model):
   title = models.CharField(max_length=255)
   category = models.ForeignKey(to="Category", verbose_name=_('category'), related_name='items',
                                 on_delete=models.SET_NULL, null=True, blank=True)
</code></pre>
<p>I would like the output serialized result to be like:</p>
<pre><code>    {
     "category_title_1":[
        {
          "id": 1,
          "title" : "something",
        },
        {
          "id": 2,
          "title": "something else",
        }
      ],
    "category_title_2": [
      {
       "id": 3,
       "title": "another string",
      }, 
      {
       "id": 4,
       "title": "and yet another title",
      }
    ]
  }  
</code></pre>
<p>I know i can always iterate over the queryset and group them manually, i'm wondering if there is a native efficient way to do this.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't believe this is possible using the ORM itself, although as Guybrush mentions, <code>itertools.groupby</code> can be used to achieve this - and in a reasonably elegant way.</p>
<pre><code>from itertools import groupby
from operator import itemgetter
from rest_framework.response import Response

items = Item.objects.values('category__title', 'id', 'title').order_by('category__title')
rows = groupby(items, itemgetter('category__title'))
return Response({c_title: list(items) for c_title, items in rows})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is to regroup them in a template, have a look at <a href="https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#regroup" rel="nofollow noreferrer">https://docs.djangoproject.com/en/2.0/ref/templates/builtins/#regroup</a>
Note that you'll have to sort your objects by category first, as <code>regroup</code> relies on that order to produce correct output.</p>
<p>If your goal is to regroup them in the code (as opposed to templates), you can rely on <code>itertools.groupby</code> (see <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.groupby</a>). Again, you'll need to join and sort your data first. </p>
</div>
<span class="comment-copy">If you are going to implement node like structure. I suggest <code>django-mptt</code> with <code>django-rest-framework-recursive</code>. They have ready-made solution for this sort of problem</span>
