<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/18296653/print-the-python-exception-error-hierarchy">Print the Python Exception/Error Hierarchy</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I need to have a view of the the exception hierarchy and get it displayed nicely as shown <a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="nofollow noreferrer">here</a>.</p>
<p>On Terminal, I get those built-in exceptions (among other things) displayed in their alphabetical order instead:</p>
<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(dir(__builtins__))
</code></pre>
<p>Do you know how to achieve this goal knowing that <code>BaseException</code> is the base class of all the existing exceptions?</p>
<p><strong>EDIT:</strong></p>
<p>If needed: <a href="https://stackoverflow.com/questions/3862310/how-to-find-all-the-subclasses-of-a-class-given-its-name?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">How to find all the subclasses of a class given its name?</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def print_classes(cls, indent):
    print('{}{}'.format(indent, cls.__name__))
    for sc in cls.__subclasses__():
        print_classes(sc, indent + "  ")


print_classes((BaseException),'')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a partial solution, giving you a dict with whats derived from what.</p>
<p>For even prettier printing you would have to do something yourself:</p>
<pre><code>import inspect

l = [eval(x) for x in dir(__builtins__) if inspect.isclass(eval(x)) and issubclass(eval(x),BaseException)]

d = {}

for err in l:
    d[err] = err.__subclasses__()

import pprint
pprint.pprint(d)
</code></pre>
<p>Output:</p>
<pre><code>{&lt;class 'ResourceWarning'&gt;: [],
 &lt;class 'BytesWarning'&gt;: [],
 &lt;class 'UnicodeWarning'&gt;: [],
 &lt;class 'ImportWarning'&gt;: [],
 &lt;class 'FutureWarning'&gt;: [],
 &lt;class 'RuntimeWarning'&gt;: [],
 &lt;class 'SyntaxWarning'&gt;: [],
 &lt;class 'PendingDeprecationWarning'&gt;: [],
 &lt;class 'DeprecationWarning'&gt;: [],
 &lt;class 'UserWarning'&gt;: [],
 &lt;class 'Warning'&gt;: [&lt;class 'UserWarning'&gt;,
                     &lt;class 'DeprecationWarning'&gt;,
                     &lt;class 'PendingDeprecationWarning'&gt;,
                     &lt;class 'SyntaxWarning'&gt;,
                     &lt;class 'RuntimeWarning'&gt;,
                     &lt;class 'FutureWarning'&gt;,
                     &lt;class 'ImportWarning'&gt;,
                     &lt;class 'UnicodeWarning'&gt;,
                     &lt;class 'BytesWarning'&gt;,
                     &lt;class 'ResourceWarning'&gt;],
 &lt;class 'BufferError'&gt;: [],
 &lt;class 'MemoryError'&gt;: [],
 &lt;class 'ReferenceError'&gt;: [],
 &lt;class 'SystemError'&gt;: [&lt;class 'encodings.CodecRegistryError'&gt;],
 &lt;class 'ZeroDivisionError'&gt;: [],
 &lt;class 'OverflowError'&gt;: [],
 &lt;class 'FloatingPointError'&gt;: [],
 &lt;class 'ArithmeticError'&gt;: [&lt;class 'FloatingPointError'&gt;,
                             &lt;class 'OverflowError'&gt;,
                             &lt;class 'ZeroDivisionError'&gt;],
 &lt;class 'AssertionError'&gt;: [],
 &lt;class 'UnicodeTranslateError'&gt;: [],
 &lt;class 'UnicodeDecodeError'&gt;: [],
 &lt;class 'UnicodeEncodeError'&gt;: [],
 &lt;class 'UnicodeError'&gt;: [&lt;class 'UnicodeEncodeError'&gt;,
                          &lt;class 'UnicodeDecodeError'&gt;,
                          &lt;class 'UnicodeTranslateError'&gt;],
 &lt;class 'ValueError'&gt;: [&lt;class 'UnicodeError'&gt;,
                        &lt;class 'io.UnsupportedOperation'&gt;],
 &lt;class 'KeyError'&gt;: [],
 &lt;class 'IndexError'&gt;: [],
 &lt;class 'LookupError'&gt;: [&lt;class 'IndexError'&gt;,
                         &lt;class 'KeyError'&gt;,
                         &lt;class 'encodings.CodecRegistryError'&gt;],
 &lt;class 'TabError'&gt;: [],
 &lt;class 'IndentationError'&gt;: [&lt;class 'TabError'&gt;],
 &lt;class 'SyntaxError'&gt;: [&lt;class 'IndentationError'&gt;],
 &lt;class 'AttributeError'&gt;: [],
 &lt;class 'UnboundLocalError'&gt;: [],
 &lt;class 'NameError'&gt;: [&lt;class 'UnboundLocalError'&gt;],
 &lt;class 'NotImplementedError'&gt;: [],
 &lt;class 'RecursionError'&gt;: [],
 &lt;class 'RuntimeError'&gt;: [&lt;class 'RecursionError'&gt;,
                          &lt;class 'NotImplementedError'&gt;,
                          &lt;class '_frozen_importlib._DeadlockError'&gt;],
 &lt;class 'EOFError'&gt;: [],
 &lt;class 'TimeoutError'&gt;: [],
 &lt;class 'ProcessLookupError'&gt;: [],
 &lt;class 'PermissionError'&gt;: [],
 &lt;class 'InterruptedError'&gt;: [],
 &lt;class 'NotADirectoryError'&gt;: [],
 &lt;class 'IsADirectoryError'&gt;: [],
 &lt;class 'FileNotFoundError'&gt;: [],
 &lt;class 'FileExistsError'&gt;: [],
 &lt;class 'ConnectionResetError'&gt;: [],
 &lt;class 'ConnectionRefusedError'&gt;: [],
 &lt;class 'ConnectionAbortedError'&gt;: [],
 &lt;class 'BrokenPipeError'&gt;: [],
 &lt;class 'ChildProcessError'&gt;: [],
 &lt;class 'ConnectionError'&gt;: [&lt;class 'BrokenPipeError'&gt;,
                             &lt;class 'ConnectionAbortedError'&gt;,
                             &lt;class 'ConnectionRefusedError'&gt;,
                             &lt;class 'ConnectionResetError'&gt;],
 &lt;class 'BlockingIOError'&gt;: [],
 &lt;class 'OSError'&gt;: [&lt;class 'ConnectionError'&gt;,
                     &lt;class 'BlockingIOError'&gt;,
                     &lt;class 'ChildProcessError'&gt;,
                     &lt;class 'FileExistsError'&gt;,
                     &lt;class 'FileNotFoundError'&gt;,
                     &lt;class 'IsADirectoryError'&gt;,
                     &lt;class 'NotADirectoryError'&gt;,
                     &lt;class 'InterruptedError'&gt;,
                     &lt;class 'PermissionError'&gt;,
                     &lt;class 'ProcessLookupError'&gt;,
                     &lt;class 'TimeoutError'&gt;,
                     &lt;class 'io.UnsupportedOperation'&gt;,
                     &lt;class 'signal.ItimerError'&gt;],
 &lt;class 'ModuleNotFoundError'&gt;: [],
 &lt;class 'ImportError'&gt;: [&lt;class 'ModuleNotFoundError'&gt;,
                         &lt;class 'zipimport.ZipImportError'&gt;],
 &lt;class 'KeyboardInterrupt'&gt;: [],
 &lt;class 'SystemExit'&gt;: [],
 &lt;class 'GeneratorExit'&gt;: [],
 &lt;class 'StopIteration'&gt;: [],
 &lt;class 'StopAsyncIteration'&gt;: [],
 &lt;class 'TypeError'&gt;: [],
 &lt;class 'Exception'&gt;: [&lt;class 'TypeError'&gt;,
                       &lt;class 'StopAsyncIteration'&gt;,
                       &lt;class 'StopIteration'&gt;,
                       &lt;class 'ImportError'&gt;,
                       &lt;class 'OSError'&gt;,
                       &lt;class 'EOFError'&gt;,
                       &lt;class 'RuntimeError'&gt;,
                       &lt;class 'NameError'&gt;,
                       &lt;class 'AttributeError'&gt;,
                       &lt;class 'SyntaxError'&gt;,
                       &lt;class 'LookupError'&gt;,
                       &lt;class 'ValueError'&gt;,
                       &lt;class 'AssertionError'&gt;,
                       &lt;class 'ArithmeticError'&gt;,
                       &lt;class 'SystemError'&gt;,
                       &lt;class 'ReferenceError'&gt;,
                       &lt;class 'BufferError'&gt;,
                       &lt;class 'MemoryError'&gt;,
                       &lt;class 'Warning'&gt;,
                       &lt;class 'locale.Error'&gt;,
                       &lt;class 'warnings._OptionError'&gt;,
                       &lt;class 'sre_constants.error'&gt;,
                       &lt;class 'sre_parse.Verbose'&gt;,
                       &lt;class 'tokenize.TokenError'&gt;,
                       &lt;class 'tokenize.StopTokenizing'&gt;,
                       &lt;class 'inspect.EndOfBlock'&gt;],
 &lt;class 'BaseException'&gt;: [&lt;class 'Exception'&gt;,
                           &lt;class 'GeneratorExit'&gt;,
                           &lt;class 'SystemExit'&gt;,
                           &lt;class 'KeyboardInterrupt'&gt;]}
</code></pre>
</div>
<span class="comment-copy">I think the easiest way is copying that text... if you just focuses on exact built-in exceptions.</span>
