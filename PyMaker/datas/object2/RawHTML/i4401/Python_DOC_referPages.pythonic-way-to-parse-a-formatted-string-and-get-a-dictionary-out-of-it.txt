<div class="post-text" itemprop="text">
<p>I have a string that looks like this:</p>
<pre><code>{
    "key A":[
        ["some val", "value a1"],
        ["some val", "value a2"],
        ....................
        ["some val", "value an"]
    ], "key B":[
        ["some val", "value b1"],
        ["some val", "value b2"],
        ...
    ], ...
     , "key X":[
        ["some val", "value x1"],
        ["some val", "value x2"],
        ...
    ]
}
</code></pre>
<p>Can anyone tell me what is the proper way in python to get a dictionary out of it where the dictionary should be</p>
<pre><code>{
    "key A": ["val a1", "val a2", ..."val an"],
    "key B": ["val b1", "val b2", ..."val bn"],
    .....
    "key X": ["val x1", "val x2", ..."val xn"],
}
</code></pre>
<p>I'm asking this because right now the only code I can think of is a pretty dirty one with a lot of list, splits and replaces and I'm quite sure that this is very wrong way to do it :D.
Thanks a lot in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ast.literal_eval</code> with a dictionary comprehension:</p>
<pre><code>from ast import literal_eval

mystr = """{
    "key A":[
        ["some val", "value a1"],
        ["some val", "value a2"],
        ["some val", "value an"]
    ], "key B":[
        ["some val", "value b1"],
        ["some val", "value b2"],
    ], "key X":[
        ["some val", "value x1"],
        ["some val", "value x2"],
    ]
}"""

res = {k: list(list(zip(*v))[1]) for k, v in literal_eval(mystr).items()}

# {'key A': ['value a1', 'value a2', 'value an'],
#  'key B': ['value b1', 'value b2'],
#  'key X': ['value x1', 'value x2']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As eval is generally regarded as unsafe and python dictionaries are "usually" JSON compatible, as long as all values are also JSON compatible.
I would recommend:</p>
<pre><code>import json

mystr = """{
    "key A":[
        ["some val", "value a1"],
        ["some val", "value a2"],
        ["some val", "value an"]
    ], "key B":[
        ["some val", "value b1"],
        ["some val", "value b2"]
    ], "key X":[
        ["some val", "value x1"],
        ["some val", "value x2"]
    ]
}"""

res = json.loads(mystr)
</code></pre>
<p>for dealing with trailing commas:</p>
<pre><code>import json
from jsoncomment import JsonComment


mystr = """{
    "key A":[
        ["some val", "value a1"],
        ["some val", "value a2"],
        ["some val", "value an"]
    ], "key B":[
        ["some val", "value b1"],
        ["some val", "value b2"],
    ], "key X":[
        ["some val", "value x1"],
        ["some val", "value x2"],
    ]
}"""

res = JsonComment(json).loads(mystr)
</code></pre>
<p>docs for JsonComment: <a href="https://pypi.python.org/pypi/jsoncomment" rel="nofollow noreferrer">https://pypi.python.org/pypi/jsoncomment</a></p>
<p>ref: <a href="https://stackoverflow.com/questions/23705304/can-json-loads-ignore-trailing-commas">Can json.loads ignore trailing commas?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As others have pointed out, the issue is the non-standard trailing comma at the end of the list elements of the json string. </p>
<p>You can use <code>ast.literal_eval()</code> in the example.</p>
<p>However, if you need to write your own json parser to deal with json that the Python library parser does not handle, you can use <a href="https://pypi.python.org/pypi/pyparsing/2.2.0" rel="nofollow noreferrer">PyParsing</a> to do so. </p>
<p>An <a href="https://pyparsing.wikispaces.com/file/view/jsonParser.py/591745732/jsonParser.py" rel="nofollow noreferrer">example JSON parser</a>, written in PyParsing, can easily be adapted to handle json with optional trailing commas:</p>
<pre><code>testdata='''\
{
    "key A":[
        ["some val", "value a1"],
        ["some val", "value a2"],
        ["some val", "value an"],
    ], "key B":[
        ["some val", "value b1"],
        ["some val", "value b2"]
    ],
    "key X":[
        ["some val", "value x1"],
        ["some val", "value x2"]
    ]
}'''

json_bnf = """
object 
    { members } 
    {} 
members 
    string : value 
    members , string : value 
array 
    [ elements ]
    [] 
elements 
    value 
    elements , value 
value 
    string
    number
    object
    array
    true
    false
    null
"""

from pyparsing import *
import ast

def make_keyword(kwd_str, kwd_value):
    return Keyword(kwd_str).setParseAction(replaceWith(kwd_value))
TRUE  = make_keyword("true", True)
FALSE = make_keyword("false", False)
NULL  = make_keyword("null", None)

LBRACK, RBRACK, LBRACE, RBRACE, COLON = map(Suppress, "[]{}:")

jsonString = dblQuotedString().setParseAction(removeQuotes)
jsonNumber = pyparsing_common.number()

jsonObject = Forward()
jsonValue = Forward()
jsonElements = delimitedList( jsonValue )
jsonArray = Group(LBRACK + Optional(jsonElements, []) + Optional(Suppress(",")) + RBRACK)
jsonValue &lt;&lt; (jsonString | jsonNumber | Group(jsonObject)  | jsonArray | TRUE | FALSE | NULL)
memberDef = Group(jsonString + COLON + jsonValue)
jsonMembers = delimitedList(memberDef)
jsonObject &lt;&lt; Dict(LBRACE + Optional(jsonMembers) + RBRACE)

jsonComment = cppStyleComment 
jsonObject.ignore(jsonComment)
</code></pre>
<p>And the result is the same as ast parsing it:</p>
<pre><code>&gt;&gt;&gt; dict(results.asList())==ast.literal_eval(testdata)
True 
</code></pre>
<p>The advantage of 'rolling your own' in this case is to have control of what non-standard elements you have and how you want to handle them. </p>
<p>(Thanks to <a href="https://stackoverflow.com/users/165216/paulmcg">Paul McGuire</a> for the PyParsing module and the json parser...)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this:    </p>
<pre><code>your_dictionary = eval(original_str)     

for key, values in your_dictionary.items():
    v = list()
    for value in values:
        v += value
    your_dictionary[key] = v
</code></pre>
</div>
<span class="comment-copy">Is this JSON data? It looks like it might be, so you can use: <a href="https://stackoverflow.com/questions/4917006/string-to-dictionary-in-python" title="string to dictionary in python">stackoverflow.com/questions/4917006/â€¦</a></span>
<span class="comment-copy">you should still post your code even if it's "ugly"</span>
<span class="comment-copy">@Kajbo I didn't posted my code because, well ... I said "the only code I can think about". I didn't really tried to spend two hours doing a thing that I knew from beginning that is gonna be wrong.</span>
<span class="comment-copy">@Alex Riley - thx for the json_loads. I did tried it before asking but for some reason (perhaps bad formatting of my string) didn't managed to make it work. For sure next time that is gonna be my solution.</span>
<span class="comment-copy">I'm downvoting this because eval is naughty generally, and the fact that it appears to be JSON and could come from a remote source increases the security threat.</span>
<span class="comment-copy">@W4t3randWind, But I'm using <code>literal_eval</code> instead: see <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">note on scope/security in docs</a></span>
<span class="comment-copy">Excellent, I'll check the docs next time. Removing my downvote. (wish stackoverflow had remindmebot)</span>
<span class="comment-copy">Do not use <code>eval</code> with its inherent risk when a far less risky alternative is available with <code>ast.literal_eval</code>. -1</span>
