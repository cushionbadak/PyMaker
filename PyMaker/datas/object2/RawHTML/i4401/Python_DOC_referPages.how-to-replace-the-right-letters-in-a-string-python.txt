<div class="post-text" itemprop="text">
<p>The assignment is:</p>
<p>Your task is correcting the errors in the digitized text. You only have to handle the following mistakes:</p>
<ul>
<li>S is misinterpreted as 5</li>
<li>O is misinterpreted as 0</li>
<li>I is misinterpreted as 1</li>
</ul>
<p>My code: </p>
<pre><code>def correct(string):
    for i in string:
        if '5' in string:
           string = string.replace('5','S') 
        elif '0' in string:
          string = string.replace('0','O')
        elif '1' in string:
            string = string.replace('1','I')
    return string 
</code></pre>
<p>I know this solution will not work for a word like: </p>
<pre><code>Test.assert_equals(correct("51NGAP0RE"),"SINGAPORE");
</code></pre>
<p>Does anyone have tips on how to make this a more general function that will work for every word?</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>elif</code>, since that only does a test if the previous one failed. Change them all to ordinary <code>if</code> and the code will work correctly.</p>
<p>But as mentioned in the comments, there's no need for any of the tests. If the letter isn't in the string, <code>replace()</code> will just return the original string, so there's no harm.</p>
<pre><code>string = string.replace('5', 'S').replace('0', 'O').replace('1', 'I')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>str.replace</code> directly.</p>
<pre><code>def correct(string):
    return string.replace('5','S').replace('0','O').replace('1','I')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you make use of <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>:</p>
<pre><code>&gt;&gt;&gt; "51NGAP0RE".translate(str.maketrans('501', 'SOI'))
'SINGAPORE'
</code></pre>
<p>Wrapped in a function:</p>
<pre><code>def correct(s):
    return s.translate(str.maketrans('501', 'SOI'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another method using list comprehension:</p>
<pre><code>def correct(str_, replacements = {'5': 'S', '0': 'O', '1': 'I'}):
    return "".join(replacements.get(c, c) for c in str_)
print(correct("51NGAP0RE"))
#'SINGAPORE'
</code></pre>
</div>
<span class="comment-copy">Why do you have a for loop, and the <code>if in</code> checks? Just doing the replacements would work better.</span>
<span class="comment-copy">On a small number of replacements, @internet_user is correct. See also <a href="https://docs.python.org/3.6/library/stdtypes.html#str.translate" rel="nofollow noreferrer">string.translate</a> for more flexibilty</span>
<span class="comment-copy">Are you sure your code doesn't work? It's not as efficient as it could be, but it should still give the correct answer.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3411771/multiple-character-replace-with-python">Multiple character replace with Python</a></span>
<span class="comment-copy">Don't name your variable <code>string</code> as it conflicts with the <code>string</code> library- if you're using python2, it would make a difference for the solution given by chrisz</span>
<span class="comment-copy">My initial thought too but OP is iterating over each character in the string, so the <code>elif</code>/<code>if</code> shouldn't make a difference.</span>
<span class="comment-copy">Good point. If the string is at least 3 characters long it should perform all the replacements.</span>
<span class="comment-copy">And if it's shorter, it can't need all the replacements.</span>
<span class="comment-copy">yea so this code actually seems to work as is...</span>
<span class="comment-copy">In python2, this is in the <a href="https://docs.python.org/2/library/string.html#string.translate" rel="nofollow noreferrer"><code>string</code></a> library. A great reason not to use <code>string</code> as a variable name!</span>
<span class="comment-copy">Thanks for the answer! However it needs to work for every word :)</span>
<span class="comment-copy">This does work for every word.</span>
<span class="comment-copy">@DaphneCornelisse You did not understand the answer. This works for every word, not only 501. This is just the way the maketrans function works.</span>
<span class="comment-copy">Well then just put that line into a function, it really isn't hard. Plus, this is the best way to go with the kind of problem you are trying to solve. <code>def correct(s): return s.translate(str.maketrans('501', 'SOI'))</code></span>
