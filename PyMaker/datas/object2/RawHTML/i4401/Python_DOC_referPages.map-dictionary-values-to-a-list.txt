<div class="post-text" itemprop="text">
<p>I have a dictionary whose values are a list:</p>
<pre><code>dict ={10: ['jhon', 'abc', 'wa@gmail.com'], 12: ['raghav', 'awdaw', 'raghavpatnecha15@gmail.com']}
</code></pre>
<p>Now I am accessing them like this:
 <code>dict[10][0]</code></p>
<p>But It makes so confusing as I don't know what is at index 0 in my list for a particular key.</p>
<p>For this I have another list which helps me what is at index i. </p>
<pre><code>['Manager Name', 'Owner Name', 'Email']
</code></pre>
<p>So know this makes easy to access the values of my dictionary. Like I want to use: <code>dict[10]['Manager Name']</code> instead of <code>dict[10][0]</code></p>
<p>Is this achievable in Python. Because I tried reference from <a href="https://stackoverflow.com/questions/48729976/combine-two-list-as-key-value-pair-using-zip-if-lists-have-same-values?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">Map two list in to dictionary</a> But how do I map a dictionary values to a list</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is possible. Just restructure your dictionary into a nested dictionary:</p>
<pre><code>d_input = {10: ['jhon', 'abc', 'wa@gmail.com'],
           12: ['raghav', 'awdaw', 'raghavpatnecha15@gmail.com']}

d = {k: {'Manager Name': a, 'Owner Name': b, 'Email': c} \
        for k, (a, b, c) in d_input.items()}
</code></pre>
<p>Result:</p>
<pre><code>{10: {'Email': 'wa@gmail.com', 'Manager Name': 'jhon', 'Owner Name': 'abc'},
 12: {'Email': 'raghavpatnecha15@gmail.com', 'Manager Name': 'raghav', 'Owner Name': 'awdaw'}}
</code></pre>
<hr/>
<p>Extendible version with <code>zip</code>:</p>
<pre><code>cats = ['Manager Name', 'Owner Name', 'Email']

d = {k: dict(zip(cats, v)) for k, v in d_input.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a clear use case for <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">classes</a>.</p>
<p>Instead of having lists that represent companies like <code>['jhon', 'abc', 'wa@gmail.com']</code>, python gives you the possibility to model that as a <em>class</em>:</p>
<pre><code>class Company:
    def __init__(self, manager_name, owner_name, email):
        self.manager_name = manager_name
        self.owner_name = owner_name
        self.email = email

companies = {10: Company('jhon', 'abc', 'wa@gmail.com'),
             12: Company('raghav', 'awdaw', 'raghavpatnecha15@gmail.com'}
</code></pre>
<p>This gives you a much nicer interface than a list, because you can access the attributes by name rather than by index:</p>
<pre><code>&gt;&gt;&gt; comp = Company('jhon', 'abc', 'wa@gmail.com')
&gt;&gt;&gt; comp.manager_name
'jhon'
&gt;&gt;&gt; comp.owner_name
'abc'
&gt;&gt;&gt; comp.email
'wa@gmail.com'
</code></pre>
<hr/>
<p>If you're lazy and don't want to define the <code>Company</code> class manually, you can use <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>collections.namedtuple</code></a> to reduce the amount of code you have to write:</p>
<pre><code>from collections import namedtuple

Company = namedtuple('Company', 'manager_name owner_name email')
</code></pre>
<hr/>
<p>You can also convert your dict of lists to a dict of <code>Company</code> instances easily:</p>
<pre><code>companies = {10: ['jhon', 'abc', 'wa@gmail.com'],
             12: ['raghav', 'awdaw', 'raghavpatnecha15@gmail.com']}

comps = {num: Company(*comp) for num, comp in companies.items()}
# result:
# {10: Company(manager_name='jhon', owner_name='abc', email='wa@gmail.com'),
#  12: Company(manager_name='raghav', owner_name='awdaw', email='raghavpatnecha15@gmail.com')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your "attributes" are always exactly <code>['Manager Name', 'Owner Name', 'Email']</code>, you should consider using namedtuples or the new <code>dataclass</code> of Python 3.7.</p>
<p>Here is an example using namedtuples:</p>
<pre><code>from collections import namedtuple

Company = namedtuple('Company', ['manager', 'owner', 'email'])

comp = Company('jhon', 'abc', 'wa@gmail.com')
print(comp.manager, comp.owner, comp.email)
</code></pre>
<p>results in <code>jhon abc wa@gmail.com</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://stackoverflow.com/questions/2970608/what-are-named-tuples-in-python">named tuples</a>.</p>
<p>Your code could look like this:</p>
<pre><code>from collections import namedtuple

Company = namedtuple('Company', 'ManagerName OwnerName Email')

c1 = Company('jhon', 'abc', 'wa@gmail.com')
c2 =  Company('raghav', 'awdaw', 'raghavpatnecha15@gmail.com')

companies = {10: c1, 12: c2}
companies[10].Email
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to change the dictionary, you can use another dictionary to map the indices to the corresponding values.</p>
<pre><code>&gt;&gt;&gt; d = {10: ['jhon', 'abc', 'wa@gmail.com'], 12: ['raghav', 'awdaw', 'raghavpatnecha15@gmail.com']}    
&gt;&gt;&gt; mapper = {'Manager Name': 0, 'Owner Name': 1, 'Email': 2}    
&gt;&gt;&gt; d[10][mapper['Manager Name']]
'jhon'
&gt;&gt;&gt; d[12][mapper['Email']]
'raghavpatnecha15@gmail.com'
</code></pre>
</div>
<span class="comment-copy">what if the length of my list and the dictionary value list is variable.Lets say in this example the length is 3 but it can be 8 if I add more parameters. I don't want to add more (a,b,c,d,e,f,g,h).</span>
<span class="comment-copy">@RaghavPatnecha, see update.</span>
