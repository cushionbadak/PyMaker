<div class="post-text" itemprop="text">
<p>So, I solved my code issue where the one below didn't work originally ,but I would like a explanation as to why my original code didn't work as expected. If I specified the variable 'grade' once in the if/elif/else section and set the 'and' operator to the parameters I need for it to work shouldn't grade be compared against both without having to use it twice?</p>
<p>This is the code that didn't work</p>
<pre><code>#  if and elif statements for calculating grade score letters
def grade_converter(grade):
    if grade &gt;= 90 :
        return "A"
    elif grade &gt;= 80 and &lt;= 89:
        return "B"
    elif grade &gt;= 70 and &lt;= 79:
        return "C"
    elif grade &gt;= 65 and &lt;= 69:
        return "D"
    else:
        return "F"

# This should print an "A"      
print grade_converter(92)

# This should print a "C"
print grade_converter(70)

# This should print an "F"
print grade_converter(61)
</code></pre>
<p>This was my fix</p>
<pre><code>#  if and elif statements for calculating grade score letters
def grade_converter(grade):
    if grade &gt;= 90 :
        return "A"
    elif grade &gt;= 80 and grade &lt;= 89:
        return "B"
    elif grade &gt;= 70 and grade &lt;= 79:
        return "C"
    elif grade &gt;= 65 and grade &lt;= 69:
        return "D"
    else:
        return "F"

# This should print an "A"      
print grade_converter(92)

# This should print a "C"
print grade_converter(70)

# This should print an "F"
print grade_converter(61)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Computer language is <strong>not</strong> English. Humans are great at guessing what subject is repeated in a compound sentence, computers are not. You always <em>explicitly</em> state what you are testing against on both sides of a logical operator.</p>
<p>That's because in the expression structure <code>&lt;left&gt; and &lt;right&gt;</code>, both <code>left</code> and <code>right</code> are <em>always independent expressions</em>. Expressions can build on expressions on expressions, but a computer programming language will not just re-use (a part of) the <code>left</code> expression in the <code>right</code> expression.</p>
<p>So yes, you have to explicitly name <code>grade</code> again.</p>
<p>Or you could use a different expression form. You could use a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer"><em>chained comparison</em> expression</a>; Python lets you collapse any expression of the form <code>&lt;foo&gt; &lt;comparison1&gt; &lt;shared&gt; and &lt;shared&gt; &lt;comparison2&gt; &lt;bar&gt;</code> into <code>&lt;foo&gt; &lt;comparison1&gt; &lt;shared&gt; &lt;comparison2&gt; &lt;bar&gt;</code>, and the <code>shared</code> expression will be executed just once. </p>
<p>So if you turned</p>
<pre><code>grade &gt;= 80 and grade &lt;= 89
</code></pre>
<p>into</p>
<pre><code>80 &lt;= grade and grade &lt;= 89
</code></pre>
<p>you can replace that with</p>
<pre><code>80 &lt;= grade &lt;= 89
</code></pre>
<p>However, note that the preceding test <em>already</em> handled the <code>grade &gt; 89</code> case, you can safely drop the upper bound tests:</p>
<pre><code>def grade_converter(grade):
    if grade &gt;= 90:
        return "A"
    elif grade &gt;= 80:
        return "B"
    elif grade &gt;= 70:
        return "C"
    elif grade &gt;= 65:
        return "D"
    else:
        return "F"
</code></pre>
<p>Last but not least, you can use a Computer Science trick. Rather than test each grade band separately, one by one, you could use <em>bisection</em>; this always works when your options are <em>sorted</em>.</p>
<p>Instead of starting at the highest value, start in the <em>middle</em>; that divides the possibilities in 2. From there, you keep halving the possibilities until you have the right grade band. This means you only have to do, at most, Log(N) tests for N possibilities, while starting at the top grade will require up to N tests. For 5 tests that's not much of a difference (1.6 steps on average, vs 5), but when N becomes really large, then you'll quickly notice a difference; if you had 1 million options, you could find the matching option in less than 14 steps, guaranteed.</p>
<p>The Python library includes an optimised implementation in the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code> module</a>:</p>
<pre><code>import bisect

def grade_converter(grade):
    grades = ['F', 'D', 'C', 'B', 'A']
    limits = [65, 70, 80, 90]
    return grades[bisect.bisect(limits, grade)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as you have noted you cannot do something like</p>
<pre><code>a &lt;= 10 and &gt;= 20
</code></pre>
<p>python <em>cannot</em> understand that the <code>and</code> applies to <code>a</code>. It's invalid syntax because <code>and</code> and <code>&gt;=</code> are both operators.</p>
<p>You could do that simply with chained comparisons:</p>
<pre><code>def grade_converter(grade):
    if grade &gt;= 90 :
        return "A"
    elif 80 &lt;= grade &lt;= 89:
        return "B"
    elif 70 &lt;= grade &lt;= 79:
        return "C"
    elif 65 &lt;= grade &lt;= 69:
        return "D"
    else:
        return "F"
</code></pre>
<p>(or in your case, with a division and a conversion)</p>
</div>
<div class="post-text" itemprop="text">
<p>Although the following line might sound intelligible as an English sentence if read aloud, it is  simply not correct python syntax:</p>
<pre><code>elif grade &gt;= 80 and &lt;= 89:
</code></pre>
<p>The reason is that <code>and</code> is a binary operator which takes two complete expressions, one to the left and one to the right. And <code>&lt;= 89</code> is not a complete expression.</p>
<p>So your corrected version works:</p>
<pre><code>elif grade &gt;= 80 and grade &lt;= 89:
</code></pre>
<p>But actually Python also allows the following syntax:</p>
<pre><code>elif 80 &lt;= grade &lt;= 89:
</code></pre>
</div>
<span class="comment-copy">yes, that's invalid syntax. But you can use <code>65 &lt;= grade &lt;= 69</code> (chained operators) it's much better</span>
<span class="comment-copy">Computer language is <b>not</b> English. Humans are great at guessing what subject is repeated in a compound sentence, computers are not. You always <i>explicitly</i> state what you are testing against on both sides of a logical operator.</span>
<span class="comment-copy">Does python have something like ruby ranges? In ruby we can do <a href="https://stackoverflow.com/a/8531781/125816"><code>case grade when 80..89</code></a></span>
<span class="comment-copy">you can use <code>in range(80,90)</code> but that creates a range object, not very good.</span>
