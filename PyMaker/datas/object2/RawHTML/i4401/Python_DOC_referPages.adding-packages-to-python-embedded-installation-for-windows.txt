<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/using/windows.html#embedded-distribution" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>The embedded distribution is a ZIP file containing a minimal Python
  environment.</p>
</blockquote>
<p>Sounds great!  The 64-bit Windows embedded v3.6.5 of Python is only 13MB.  As an alternative to compiling, I would like to zip some python scripts together with the minimum needed to run them on a Win10 machine that doesn't have Python installed.</p>
<p>Now, I almost always need to import additional packages to provide functionality.  But I can't determine how I should do this if I want to send out a python script together with this embedded version of Python.  For example, if my script uses numpy, how can I include that library in this "embed?"  I.e., so that on any Win10 machine I can unzip the single deployment file and immediately execute my scripts?</p>
<p>(A regular <code>pip install numpy</code> appears to create a Lib subdirectory that's over 50MB!  But for an "embedded" deployment I don't need any support for debugging or whatever else is encompassed in that mass of files.)</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a way to extend Python embedded installation.
I managed to create Flask-ready package, that I can just unzip on target machine and run code.
The trick is to install <strong>EXACT</strong> <strong>same</strong> python version (normal full blown python) as your target embedded small python. Not only version but x86, x64 has to match as well.</p>
<p>Then install modules from pip on normal python, go to <strong><em>NormalPython\Lib\site-packages</em></strong> and copy all new files that appear after installing to <strong><em>EmbeddedPython\Lib</em></strong>
finally add <strong><em>Lib</em></strong> to <strong>pythonXX._pth</strong> inside Embedded python folder.</p>
<p>It's extremely important to fully test your application in case you miss some package.
Also this would not work for packages that also add .exe to Scripts folder.
You could still probably copy the exe's to Script folder and add it to path which could do the trick.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a way to extend Python embedded installation. The trick is to install the same python version( I will call it NormalPython) as your target embedded python(I will call it EmbeddedPython). The version as well as architecture has to match exactly.</p>
<p>You then install modules from pip on NormalPython. You can find pip on NormalPython\Scripts.</p>
<p>Go to NormalPython\Lib\site-packages and copy all files that appear after installing whatever you want to install through pip to EmbeddedPython\Lib\</p>
<p>Then add Lib to pythonXX._pth inside Embedded python folder.</p>
<p>This worked for me on windows 10 after downloading the latest python embed and python install through <a href="https://www.python.org/downloads/windows/" rel="nofollow noreferrer">https://www.python.org/downloads/windows/</a> .
I used Michal Rawluk's answer to do it, but it was somewhat hard to understand so I am trying to explain it a bit differently.</p>
</div>
<span class="comment-copy">Is there a reason you can't use a <code>requirements.txt</code> then have them run <code>pip install -r requirements.txt</code> before they execute the script?</span>
<span class="comment-copy">@AaronN.Brock: The documentation warns: <i>Using pip to manage dependencies as for a regular Python installation is not supported with this distribution, though with some care it may be possible to include and use pip for automatic updates.</i>  I guess I could give it a try if I'm reading too far into that warning....</span>
<span class="comment-copy"><i>modulefinder</i> might come in handy. Check <a href="https://stackoverflow.com/questions/39539089/what-files-are-required-for-py-initialize-to-run/39541474#39541474" title="what files are required for py initialize to run">stackoverflow.com/questions/39539089/â€¦</a> to see how I used it.</span>
<span class="comment-copy">How would you do this without ._pth files given their <a href="https://bugs.python.org/issue33944" rel="nofollow noreferrer">potential deprecation in Python 3.8</a>?</span>
