<div class="post-text" itemprop="text">
<p>I am trying to subclass <code>decimal.Decimal</code> so that floating point numbers get treated as strings, which in turn are treated as decimals.</p>
<p>Instead of:</p>
<pre><code>&gt;&gt;&gt; decimal.Decimal(1.1)
Decimal('1.100000000000000088817841970012523233890533447265625')
</code></pre>
<p>I convert the float to a str which in turn gets converted into Decimal:</p>
<pre><code>&gt;&gt;&gt; decimal.Decimal(str(1.1))
Decimal('1.1')
</code></pre>
<p>Since I find myself doing this a lot, I decided to subclass Decimal. But the following code throws an exception in Python 3.6.4:</p>
<pre><code>import decimal

class D(decimal.Decimal):
    def __new__(self, value="0", context=None):
        value = str(value)
        super().__new__(value, context)

d = D(1.1)
print(d)
</code></pre>
<p>Traceback:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Better/.PyCharmCE2018.1/config/scratches/scratch_4.py", line 8, in &lt;module&gt;
    d = D(1.1)
  File "C:/Users/Better/.PyCharmCE2018.1/config/scratches/scratch_4.py", line 6, in __new__
    super().__new__(value, context)
TypeError: decimal.Decimal.__new__(X): X is not a type object (str)
</code></pre>
<p>What is the solution?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're passing the wrong arguments to  <code>__new__</code> and you're not returning anything.</p>
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">Documentation on how to use <code>__new__</code></a></p>
<pre><code>class D(decimal.Decimal):

    def __new__(cls, value="0", context=None):
        value = str(value)
        return super().__new__(cls, value, context)
</code></pre>
<p>That being said, you should probably be using <code>__init__</code> here, since you're not doing any class type manipulation that requires the use of <code>__new__</code>.</p>
<pre><code>class D(decimal.Decimal):

    def __init__(self, value="0", context=None):
        value = str(value)
        super().__init__(self, value, context)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:  </p>
<pre><code>super().__new__(self, value, context)
</code></pre>
<p><code>def __new__(self, value="0", context=None):</code> requires three positional arguments, <code>self</code>, <code>value</code> and <code>context</code>.</p>
<p>When you do <code>super().__new__(value, context)</code> <code>self</code> (from your function) becomes <code>value</code> and <code>context</code> becomes <code>value</code>, the last two values do not need to be defined to use the function so there is nothing alerting you to this,
<code>context</code> never actually gets passed to <code>super().__new__()</code></p>
</div>
<span class="comment-copy">We cannot use <code>__init__</code> here, since the <code>Decimal</code> class does not use <code>__init__</code>. It is noted in the <a href="https://github.com/python/cpython/blob/3.6/Lib/_pydecimal.py#L563" rel="nofollow noreferrer">source code</a> that <code>We're immutable, so use __new__ not __init__</code>. Also, <code>__init__</code> should not return anything.</span>
<span class="comment-copy">I tried replacing the line with  <code>super().__new__(self, value, context)</code>. Result: No error, but outputs <code>None</code></span>
<span class="comment-copy">@ChaimG  Then <code>return super().__new__(value, context)</code> the value as suggested above</span>
