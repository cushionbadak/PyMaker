<div class="post-text" itemprop="text">
<p>I'm trying to find a custom date format like YYYYW eg. 201620 after subtracting a number of week periods.</p>
<p>So far I've been able to convert a date string like YYYYW into date using the following code;</p>
<pre><code>from datetime import datetime

myDate = "201642"
year = myDate[:4]
week = myDate[-2:]
day = '1'
myDate = year + " " + week + " " + day
print(myDate)
date = datetime.strptime(myDate, "%Y %W %w")
print(date)
</code></pre>
<p>But I'm unable to find a way where I can subtract for eg. 43 weeks from 201642 and get a result like 201552.</p>
<p>EDIT 1: Using suggestions from the comments, here is the solution. </p>
<p>from datetime import datetime
from datetime import timedelta</p>
<pre><code>myDate = "201642"
year = myDate[:4]
week = myDate[-2:]
day = '1'
myDate = year + " " + week + " " + day
print(myDate)
date = datetime.strptime(myDate, "%Y %W %w")
print(date)
new_date = date - timedelta(weeks=42)
str_new_date = datetime.strftime(new_date, '%Y%W')
print(str_new_date)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other than doing the math yourself, here's an attempt using datetime. Doing everything using ISO week numbers (using methods from <a href="https://stackoverflow.com/a/1700069/47078">this answer</a>):</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date = '201642'
&gt;&gt;&gt; weeks = 43
&gt;&gt;&gt; year = date[:4]
&gt;&gt;&gt; week = date[4:]

&gt;&gt;&gt; start = iso_to_gregorian(int(year), int(week), 1)
&gt;&gt;&gt; start
datetime.date(2016, 10, 17)
&gt;&gt;&gt; start.isocalendar()
(2016, 42, 1)
&gt;&gt;&gt; offset_weeks = datetime.timedelta(weeks=43)
&gt;&gt;&gt; end = start - offset_weeks
&gt;&gt;&gt; end
datetime.date(2015, 12, 21)
&gt;&gt;&gt; end.isocalendar()
(2015, 52, 1)
&gt;&gt;&gt; '{}{}'.format(*end.isocalendar())
'201552'
</code></pre>
<p>A modified version of @Hildy's answer below:</p>
<pre><code>In [29]: start = datetime.datetime.strptime(date + '0', '%Y%W%w')

In [30]: start
Out[30]: datetime.datetime(2016, 10, 23, 0, 0)

In [31]: start.strftime('%Y%W')
Out[31]: '201642'

In [32]: end = start - datetime.timedelta(weeks=43)

In [33]: end
Out[33]: datetime.datetime(2015, 12, 27, 0, 0)

In [34]: end.strftime('%Y%W')
Out[34]: '201551'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You haven't actually parsed the date properly in your sample code, but since you say your actual code does, let's ignore that.</p>
<p>So, you have a <code>datetime</code> object. You want to subtract 43 weeks from that. All you have to do isâ€¦ exactly that, using a <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer"><code>timedelta</code></a>:</p>
<pre><code>&gt;&gt;&gt; dt = datetime.datetime(2016, 10, 21)
&gt;&gt;&gt; dt - datetime.timedelta(weeks=43)
datetime.datetime(2015, 12, 25, 0, 0)
</code></pre>
<p>The result is the same time, same day of the week, 43 weeks earlier.</p>
<hr/>
<p>But it's worth noting that, for local times, that "same time" could be off by an hour because of crossing a daylight saving border. And being off by an hour can be especially confusing when you're using midnight. So it's usually better to use <a href="https://docs.python.org/3/library/datetime.html#date-objects" rel="nofollow noreferrer"><code>date</code></a> objects instead of <code>datetime</code> objects for this kind of work:</p>
<pre><code>&gt;&gt;&gt; dt = datetime.datetime(2016, 10, 21)
&gt;&gt;&gt; dt.date()
datetime.date(2016, 10, 21)
&gt;&gt;&gt; dt.date() - datetime.timedelta(weeks=43)
datetime.date(2015, 12, 25)
</code></pre>
<hr/>
<p>Either way, if you want to turn that back into a <code>YYYYWW</code> string, both <code>datetime</code> and <code>date</code> have <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>strftime</code></a> methods for that:</p>
<pre><code>&gt;&gt;&gt; d2 = dt - datetime.timedelta(weeks=43)
&gt;&gt;&gt; d2.strftime('%Y%W')
'201551'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be done with relative delta, from the dateutil library; it should be noted that said library is part of the standard lib in Python 2x, but not 3x...you'll have to install it.</p>
<p>The next thing you need to know is that, per the Python <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs</a>, "When used with the strptime() method, <code>%U</code> and <code>%W</code> are only used in calculations when the day of the week and the year are specified."</p>
<p>Try this out:</p>
<pre><code>from dateutil.relativedelta import relativedelta
from datetime import datetime

#I've added the day number here, as described in the docs
myDate = "2016042"
# with '%w' added, strptime() will work
date = datetime.strptime(myDate, "%Y%w%W")
# now use relativedelta() to do the date math
date = date - relativedelta(weeks=2)
# finally, use strftime() to return the date back to the format you like
myDate = date.strftime("%Y%W")

print(string_date)
</code></pre>
<p>I've used this in ETL operations to calculate things like fiscal periods and it works great. As noted by others here, <code>timedelta()</code> can be used in a similar fashion. </p>
</div>
<span class="comment-copy">hint: there are 52 weeks in a year. Just use math.</span>
<span class="comment-copy">I did think about that, but unsure will it hold true for leap years as its has 52.2 weeks</span>
<span class="comment-copy">Does your code have to handle fractional weeks? Your input of integer year and week seems to imply no.</span>
<span class="comment-copy">Good point, it's not fractional as of yet</span>
<span class="comment-copy">You have a <code>datetime</code> object. Import the <code>timedelta</code> type from the same module. Then you can just do <code>date - timedelta(weeks=43)</code>, and then convert back to your string format with <code>strftime</code> and you're done. (Although you might want to use <code>date</code> objects rather than <code>datetime</code>.)</span>
<span class="comment-copy">Who's answer should I select, both of you have given the same suggestion. Pardon me I'm just getting accustomed to SO etiquettes.</span>
<span class="comment-copy">Go with @Hildy's answer. It's shorter. Maybe combine the two in your actual code.</span>
