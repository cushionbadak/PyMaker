<div class="post-text" itemprop="text">
<p>I'm trying to create an iterable object, and when I do 1 loop it is okay, but when doing multiple loops, it doesn't work. Here is my simplified code:</p>
<pre><code>class test():

    def __init__(self):
        self.n = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.n &lt; len(self)-1:
            self.n += 1
            return self.n
        else:
            raise StopIteration

    def __len__(self):
        return 5

#this is an example iteration
test = test()
for i in test:
    for j in test:
        print(i,j)

#it prints is 
1 2
1 3
1 4

#What i expect is
1 1 
1 2
1 3
1 4
2 1
2 2
2 3
...
4 3
4 4
</code></pre>
<p>How can I make this object (in this case <code>test</code>) to iterate twice and get all the combinations of number <code>i</code> and <code>j</code> in the example loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want an instance of <code>test</code> to be <em>iterable</em>, but not its own <em>iterator</em>. What's the difference?</p>
<p>An iterable is something that, upon request, can supply an iterator. Lists are iterable, because <code>iter([1,2,3])</code> returns a new <code>listiterator</code> object (<em>not</em> the list itself). To make <code>test</code> iterable, you just need to supply an <code>__iter__</code> method (more on how to define it in a bit).</p>
<p>An iterator is something that, upon request, can produce a new element. It does this by calling its <code>__next__</code> method. An iterator can be thought of as two pieces of information: a sequence of items to produce, and a cursor indicating how far along that sequence it currently is. When it reaches the end of its sequence, it raises a <code>StopIteration</code> exception to indicate that the iteration is at an end. To make an instance an iterator, you supply a <code>__next__</code> method in its class. An iterator should also have a <code>__iter__</code> method that just returns itself.</p>
<p>So how do you make <code>test</code> iterable without being an iterator? By having its <code>__iter__</code> method return a new iterator each time it is called, and getting rid of its <code>__next__</code> method. The simplest way to do that is to make <code>__iter__</code> a generator function. Define your class something like:</p>
<pre><code>class Test():

    def __init__(self):
        self._size = 5

    def __iter__(self):
        n = 0
        while n &lt; self._size:
            yield n
            n += 1

    def __len__(self):
        return self._size
</code></pre>
<p>Now when you write</p>
<pre><code>test = Test()
for i in test:    # implicit call to iter(test)
    for j in test:  # implicit call to iter(test)
        print(i, j)
</code></pre>
<p><code>i</code> and <code>j</code> both draw values from <em>separate</em> iterators over the same iterable. Each call to <code>test.__iter__</code> returns a different generator object that keeps track of its own <code>n</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</p>
<p>You should be able to accomplish what you're looking for:</p>
<pre><code>from itertools import product
...
test = test()
for i, j in product(test, repeat=2):
    print(i,j)
</code></pre>
<p>I love this library!</p>
</div>
<span class="comment-copy">You're iterating over the <i>same iterator</i>, which can only be consumed once; use <code>for i in test(): for j in test(): print(i, j)</code> instead. If you really need to share a single iterator, look into e.g. <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a>.</span>
<span class="comment-copy">If you use something like <code>test = [1,2,3]</code> for your loops, it works because a list is not an <i>iterator</i>, but it is an <i>iterable</i>. In that case, each <code>for</code> loop implicitly calls <code>iter</code> to get a distinct iterator for the list. Your <code>test</code> class <i>is</i> an iterator, since it defines <code>__next__</code>, so each loop uses the same iterator.</span>
