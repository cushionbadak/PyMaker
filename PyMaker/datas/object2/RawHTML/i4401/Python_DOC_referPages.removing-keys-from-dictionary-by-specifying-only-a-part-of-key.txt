<div class="post-text" itemprop="text">
<p>Python 3:<br/></p>
<p>Suppose I have a dictionary:</p>
<pre><code>d={aaa0:'Hello',aaa1:'how',bbb0:'are',bb1:'you'}
</code></pre>
<p>Now how can I remove all the keys that contain 'a' in keys? I know how to remove keys by specifying each key and then deleting it. <br/></p>
<p>I want to know if there is any "pythonic" way to remove keys by specifying just the part of the key.<br/>
Like:<br/></p>
<pre><code>if d['contains a'] del[key]
</code></pre>
<p>something like that.</p>
<p>Expected Output:</p>
<pre><code>d={bbb0:'are',bb1:'you'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary comprehension works for this</p>
<pre><code>d = {'aaa0':'Hello','aaa1':'how','bbb0':'are','bb1':'you'}

e = {k:v for k,v in d.iteritems() if 'a' not in k}

{'bb1': 'you', 'bbb0': 'are'}
</code></pre>
<p>Edit: This is in Python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you want to remove items from your dict:</p>
<pre><code>d = {"aaa0":'Hello',"aaa1":'how',"bbb0":'are',"bb1":'you'}
for k in list(d):
  if 'a' in k:
    del d[k]
print(d)
</code></pre>
<p>This will modify the current dict by iterating over its keys, and not create a new one like other answers have suggested.</p>
<p><em><strong>Edit:</strong></em> This code will work in <em>both</em> Python 2 and 3 without modification.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>items()</code></a> to create a new dict:</p>
<pre><code>&gt;&gt;&gt; d = {"a1": "A0", "a1": "A1", "b1": "B1", "b2": "B2"}
&gt;&gt;&gt; e = {k: v for k, v in d.items() if not "a" in k}
&gt;&gt;&gt; e
{'b2': 'B2', 'b1': 'B1'}
</code></pre>
</div>
<span class="comment-copy"><code>d</code> is not valid Python. Show us your real code.</span>
<span class="comment-copy">Python 2 or Python 3?</span>
<span class="comment-copy">@LutzHorn Python 3</span>
<span class="comment-copy"><code>AttributeError: 'dict' object has no attribute 'iteritems'</code>, at least not in Python 3.</span>
<span class="comment-copy">you're probably in Python 3, OP did not specify which version he is using so I will edit with a disclaimer</span>
<span class="comment-copy">items() would work for both.</span>
<span class="comment-copy">it does, but in Python 2 <code>items</code> builds a list of tuples and returns that so it can consume a lot of memory if its a large dictionary</span>
<span class="comment-copy">But who is using Python 2 in 2018? ;)</span>
