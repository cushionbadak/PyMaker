<div class="post-text" itemprop="text">
<p>I have a file that partially looks like this: </p>
<pre><code>{'PLGLB1': array([0, 2, 2]), 'IL20RA': array([2, 0, 0]), 'MORC1': array([2, 0, 0])}...
</code></pre>
<p>and I want the output to be in a table-like form:</p>
<pre><code>PLGLB1 0 2 2
IL20RA 2 0 0
MORC1 2 0 0
</code></pre>
<p>without any indentation or brackets. How can I do it?</p>
<p>I tried with:</p>
<pre><code>for i in dict:
    print("{}\t{}".format(i,dict[i]))
</code></pre>
<p>(it is the continuation of a big script) but I get this output: </p>
<pre><code>BAIAP3  [0 2 2]
CALCA   [0 2 2]
MYT1    [2 0 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With such a dictionary, and the fact that you're trying to put it into a dataframe like structure, I would consider using <code>pandas</code>. It's fast, and you can get your desired frame in one short line (assuming your dictionary is called <code>my_dict</code>):</p>
<pre><code>import pandas as pd

df = pd.DataFrame.from_dict(my_dict, orient='index')
</code></pre>
<p>which returns:</p>
<pre><code>        0  1  2
PLGLB1  0  2  2
IL20RA  2  0  0
MORC1   2  0  0
</code></pre>
<p>I'm unsure of your final goal, but it seems like you want this to end up being outputted as a text file (correct me if I'm wrong), in which case you can just do this:</p>
<pre><code>df.to_csv('filename.txt', sep=' ', header=False)
</code></pre>
<p>Which will make a text file called <code>filname.txt</code> looking like this:</p>
<pre><code>PLGLB1 0 2 2
IL20RA 2 0 0
MORC1 2 0 0
</code></pre>
<p><strong>Note</strong>: If the outputted <code>.txt</code> is your only goal, and you don't want to work with the dataframe in Python, you can even chain the whole thing without saving the frame as <code>df</code>:</p>
<pre><code>pd.DataFrame.from_dict(my_dict, orient='index').to_csv('filename.txt', sep=' ', header=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dictionary = {'PLGLB1': [0, 2, 2], 'IL20RA': [2, 0, 0], 'MORC1': [2, 0, 0]}

for key in dictionary:
    print(key, *dictionary[key])
</code></pre>
<p>Sounds like this is what you're looking for. The star in the print statement removes the brackets from the lists and separates the elements with a space.</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume that your input is a long string, as shown in the question.
No standard parser for this format likely exists. <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Regular expressions</a> to the rescue.</p>
<pre><code>import re

entry_rx = re.compile(r"'(\w+)': array\(\[(\d+), (\d+), (\d+)\]\)")

def print_group_per_line(input_string):
    for match in entry_rx.finditer(crazy_text):
        print("{0} {1} {2} {3}".format(*match.groups()))
</code></pre>
<p>Testing it:</p>
<pre><code>&gt;&gt;&gt; crazy_text = "{'PLGLB1': array([0, 2, 2]), 'IL20RA': array([2, 0, 0]), 'MORC1': array([2, 0, 0])}"
&gt;&gt;&gt; print_group_per_line(crazy_text)
PLGLB1 0 2 2
IL20RA 2 0 0
MORC1 2 0 0
</code></pre>
</div>
<span class="comment-copy">What have you tried? A <code>for</code> loop and a <code>print</code> would go a long way in solving your problem.</span>
<span class="comment-copy">How did that file even come to be? That's a <i>horrible</i> data serialization format. You should probably fix that upstream instead of trying to parse that thing. (Just so we're clear, <code>{'PLGLB1': array([0, 2, 2]), 'IL20RA': ...</code> is <b>text</b> in a file, right?)</span>
<span class="comment-copy">The input format does not match.</span>
