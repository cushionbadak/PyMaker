<div class="post-text" itemprop="text">
<p>I've seen this answered in several places but can't seem to get it to work in my script below where I want to parse several pages until the end:</p>
<p>My script should be inside the page loop but whenever I put it inside I'm getting indent errors. Does that mean I need to indent the entire script? Or is it the loop that does not work with my script?</p>
<pre><code>from bs4 import BeautifulSoup
import requests

page = 1
urldes = "https://www.johnpyeauctions.co.uk/lot_list.asp?saleid=4808&amp;siteid=1&amp;h=0&amp;pageno={page}"
#"https://www.johnpyeauctions.co.uk/lot_list.asp?saleid=4740&amp;siteid=1&amp;h=0&amp;pageno=14"

# add header
mozila_agent = 'Mozilla/5.0 (Windows NT 6.3; Win64; x64)\
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36'
headers = {'User-Agent': mozila_agent}


with requests.Session() as session:
    while True:
        response = session.get(urldes.format(page=page), headers=headers)
        soup = BeautifulSoup(response.content, "html.parser")

########## HOW TO parse the pages and collect the results here ?

    if page is 3 : #soup.find('u') is None:
        break  # last page

    page += 1

############################################################

the_whole_table = soup.find('table', width='97%')

datalist = []

for tr in the_whole_table.find_all('tr')[1:]:
    # you want to start from the 1st item not the 0th so [1:]
    # Because the first is the thead i.e. Lot no, Picture, Lot Title...
    index_num = tr.find('td', width='8%')
    picture_link = index_num.next_sibling.a['data-img']
    text_info = tr.find('td', width='41%')
    current_bid = tr.find('td', width='13%')
    time_left = tr.find('td', width='19%')
    datalist.append([index_num.text, picture_link,
                     text_info.text, current_bid.text, time_left.text])

    # for pic do ... print(picture_link) as for partial text only first 20
    # characters

index = datalist[0][0]
picture = datalist[0][1]
info = datalist[0][2]
bid = datalist[0][3]
time = datalist[0][4]


df = ['Index Number', 'Picture', 'Informational text',
      'Current BID', 'Time Left now']

theads = BeautifulSoup('&lt;table style="width:50%; color: blue; font-family: verdana; font-size: 60%;"&gt;&lt;/table&gt;', 'lxml')
thekeys = BeautifulSoup('&lt;thead style="color: blue; font-family: verdana; font-size: 60%;"&gt;&lt;/thead&gt;', 'html.parser')

#counter = 0
for i in df:
    tag = theads.new_tag('th')
    tag.append(i)
    thekeys.thead.append(tag)

theads.table.append(thekeys)
###############################################################
# The code above will initiate a table
# after that the for loop will create and populate the first row (thead)


for i in datalist:
#    thedata = BeautifulSoup('&lt;tr style="color: blue; font-family: verdana; font-size: 50%;"&gt;&lt;/tr&gt;', 'html.parser')
    thedata = BeautifulSoup('&lt;tr&gt;&lt;/tr&gt;', 'html.parser')

    # we loop through the data we collected
    # initiate a &lt;td&gt; &lt;/td&gt; tag everytime we finish with one collection
    for j in i:
        if j.startswith('https'):
            img_tag = theads.new_tag('img', src=j, width='300')
            td_tag = theads.new_tag('td')
            td_tag.append(img_tag)
            thedata.append(td_tag)
#            counter += 1
        else:
  #            tag = theads.new_tag('td', style="color: blue; font-family: verdana; font-size: 50%;")
            tag = theads.new_tag('td')
            tag.append(j)
            thedata.append(tag)
#            counter += 1
#            if counter is 5:
#                counter = 0


    theads.table.append(thedata)



#print(counter)

css = "&lt;style&gt;{color: blue; font-family: verdana; font-size: 50%;}&lt;/style&gt;"
#css.string = css


with open('asdf.html', 'w+') as f:
    f.write(theads.prettify())


print(css)

# each of these if you print them you'll get a information that you can store
# to test do print(index_num.text, text_info.text)
</code></pre>
<p><a href="https://i.stack.imgur.com/ppzDD.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ppzDD.jpg"/></a></p>
<p>Regarding the template.html and css I can see that I need to populate a template with the scraped data but for example if I want to allocate each of the 5 elements in "value" of "auction" I can't seem to find a way of allocate each element separately. The current code seems to loop through each value but in the case where I need to give each value a different class tag then I need to differentiate all 5 elements which I can't figure out how to do.</p>
<pre><code>for auction in auctions:
        div_a = soup.new_tag("div", _class="auction")
        soup.append(div_a)

        for description in auction:
            div_d = soup.new_tag("h4", _class="title")
            div_d.append(description)
            div_a.append(div_d)
</code></pre>
<p>As you can see here I can append the tags but the same value is being repeated instead of looping through each value.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can either put your script inside the page loop and construct the HTML between the requests or first get all the auctions, store them in some data structure, e.g. a list and then loop over it appending the rows to the HTML. I followed the second approach, because it was closer to what you already had. I refactored the code a bit and added:</p>
<pre><code>if not soup.find_all('a', string='Next'):
    break
</code></pre>
<p>It breaks the loop after it fails to find an <code>a</code> tag with the <code>Next</code> text inside, which means that's the last page. What I dislike is creating headers for the table and inserting styles programmatically. If I were you, I'd just create a "template" HTML that has all the styles, page title, table included and read it from the file. You could then just append the rows to the <code>tbody</code> of the table. You can also include links to the auctions instead of bare text.</p>
<p>The following code works and produces an html with 1300+ auctions last time I checked:</p>
<pre><code>import itertools
from collections import namedtuple

import requests
from bs4 import BeautifulSoup

url = 'https://www.johnpyeauctions.co.uk/lot_list.asp?saleid=4808&amp;siteid=1&amp;h=0&amp;pageno={}'

auctions = []
Auction = namedtuple('auction',
                     ['index', 'picture_link', 'description', 'current_bid', 'time_left'])

for page in itertools.count(start=1):
    response = requests.get(url.format(page))
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find('table', width='97%')

    for tr in table.find_all('tr')[1:]:  # skip the table header
        tds = tr.contents

        index = tds[0].find('h5').text
        pic_elem = tds[1].find('img')  # html of this img tag is broken, so I create a new one below
        picture = soup.new_tag('img', src=pic_elem['src'], width=pic_elem['width'])
        description = tds[2].find('h5').text
        current_bid = tds[3].find('h5').text
        time_left = tds[4].find('h5').text

        auction = Auction(index, picture, description, current_bid, time_left)
        auctions.append(auction)

    if not soup.find_all('a', string='Next'):
        break


headers = ['Index Number', 'Picture', 'Informational text', 'Current BID', 'Time Left now']

soup = BeautifulSoup(
    '''
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;&lt;/tbody&gt;
    &lt;/table&gt;
    ''', 'lxml')

# you can also insert these &lt;th&gt; manually, since they're not dynamic :P
for header in headers:
    th = soup.new_tag('th')
    th.append(header)
    soup.table.thead.tr.append(th)


for auction in auctions:
    tr = soup.new_tag('tr')

    for value in auction:
        td = soup.new_tag('td')
        td.append(value)
        tr.append(td)

    soup.table.tbody.append(tr)


# this can also be included in the initial html, no need to do it programmatically
head = soup.new_tag('head')
head.append(soup.new_tag('meta', charset='utf-8'))
head.append(soup.new_tag('style', type='text/css'))
head.style.append(
    '''
    body {
        font-family: verdana;
        color: blue;
    }

    table {
        width: 70%;
        margin: auto;
        font-size: 0.8em;
    }
    ''')

soup.html.insert(0, head)

with open('auctions.html', 'w') as f:
    f.write(soup.prettify())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So I managed to solve the second part of my problem with the code below. Instead of trying to modify the elements already in the "auction" object I just went straight to the source and added the tags when they were extracted.</p>
<p>Another issue I encountered was adding a class to a div tag which need to be done by adding ** such as <code>soup.new_tag("div", **{'class':'auction'})</code></p>
<pre><code>import itertools
from collections import namedtuple

import requests
from bs4 import BeautifulSoup

#saleid = '4793'
saleid = '4811'

url = 'https://www.johnpyeauctions.co.uk/lot_list.asp?saleid=' + saleid + '&amp;siteid=1&amp;h=0&amp;pageno={}'

auctions = []
Auction = namedtuple('auction',
                     ['index', 'picture_link', 'description', 'current_bid', 'time_left'])

for page in itertools.count(start=1):
    response = requests.get(url.format(page))
    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find('table', width='97%')

    for tr in table.find_all('tr')[1:]:  # skip the table header
        tds = tr.contents

        index = tds[0].find('h5').text
        index_tag = soup.new_tag("h5", **{'class':'index'})
        index_tag.append(index)

        pic_elem = tds[1].find('img')  # html of this img tag is broken, so I create a new one below
        picture = soup.new_tag('img', **{'class':'image'}, src=pic_elem['src'], width="160")
#        picture = soup.new_tag('img', **{'class':'image'}, src=pic_elem['src'], width=pic_elem['width'])

        description = tds[2].find('h5').text
        description_tag = soup.new_tag("h4", **{'class':'title'})
        description_tag.append(description)

        current_bid = tds[3].find('h5').text
        current_bid_tag = soup.new_tag("h4", **{'class':'price'})
        current_bid_tag.append(current_bid)

        time_left = tds[4].find('h5').text
        time_left_tag = soup.new_tag("h5", **{'class':'time'})
        time_left_tag.append(time_left)



        auction = Auction(index_tag, picture, description_tag, current_bid_tag, time_left_tag)
        auctions.append(auction)

    if not soup.find_all('a', string='Next'):
        break


soup = BeautifulSoup(
    '''
    &lt;div class="container"&gt;
    &lt;/div&gt;
    ''', 'lxml')

for auction in auctions:
    div_a = soup.new_tag("div", **{'class':'auction'})
    soup.div.append(div_a)

    for value in auction:    
        div_a.append(value)    


# this can also be included in the initial html, no need to do it programmatically
head = soup.new_tag('head')
head.append(soup.new_tag('meta', charset='utf-8'))
head.append(soup.new_tag('style', type='text/css'))
head.style.append(
    '''
* {
  margin: 0;
}

.container {
  font-family: "Arial";
  padding: 5px;
  display: grid;
  justify-items: center;
  grid-gap: 5px;
  grid-template-columns: repeat(5, 1fr);
  text-transform: capitalize;
}

.auction {
  display: grid;
  grid-template-columns: 140px auto;
  grid-template-areas:
    "title title time"
    "image image image"
    "image image image"
    "image image image"
    "price price index";

  width: 300px;
  height: 300px;
  border: 2px black solid;
  font-size: 12px;
}

.image {
  grid-area: image;
  margin: left
}
.title {
  grid-area: title;
  text-transform: lowercase;
}
.price {
  grid-area: price;
}
.time {
  grid-area: time;
}
.index {
  grid-area: index;
}

.title, .price, .time, .index {
    padding: 10px;
}
    ''')

soup.html.insert(0, head)

with open('auctions.html', 'w') as f:
    f.write(soup.prettify())
</code></pre>
</div>
<span class="comment-copy">Regarding "allocating each element separately", <code>auction</code> from my answer is a <code>namedtuple</code>, you can read about it <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">here</a>. You can access its properties with a <code>.</code>, e.g. <code>auction.index</code>, <code>auction.picture_link</code>. Let me know, if you encounter any more problems :)</span>
<span class="comment-copy">I like your solution and the reworking is great. Makes a lot more sense. This was required but couldnt quite face the daunting task of redoing it. Regarding the "template" i'm actually trying to get a more condensed view to be able to see as many lots on one page as possible to resemble something like the mokup I have added above. Is that something you can give some pointers on as I've tried to rework your code but without much success.</span>
<span class="comment-copy">That's just a matter of styling, you can use CSS grid. I created an example for you <a href="https://codepen.io/radzak/pen/MVxweg" rel="nofollow noreferrer">here</a>. You should create a <code>template.html</code> link the styles and populate it with data scraped in your script.</span>
<span class="comment-copy">thx a lot. I hadn't thought of doing it that way. Really helps!</span>
<span class="comment-copy">I'm unsure why but when I try to change the loop to include the css element it seems to repeat it on all values instead of just one of the values in "auction" for description in auction:         <code>td = soup.new_tag('h4 class="title"')         td.append(description)         tr.append(td)              for current_bid in auction:         td = soup.new_tag('h5 class="price"')         td.append(current_bid)         tr.append(td)</code></span>
<span class="comment-copy">It's hard to see the indentation, etc. in answers, just update your question and explain the problem. You have a bug here for sure: <code>soup.new_tag('h4 class="title"')</code> should be <code>soup.new_tag('h4', class='title')</code> + as you want a non-table design you shouldn't use <code>table</code>, <code>td</code>, <code>tr</code>, etc.</span>
