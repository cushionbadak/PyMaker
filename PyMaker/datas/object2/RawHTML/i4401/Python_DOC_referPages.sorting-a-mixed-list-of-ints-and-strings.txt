<div class="post-text" itemprop="text">
<p>I am trying to sort the following mixed list of ints and strings, but getting a TypeError instead. My desired output order is sorted integers then sorted strings.</p>
<pre><code>x=[4,6,9,'ashley','drooks','chay','poo','may']
&gt;&gt;&gt; x.sort()
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    x.sort()
TypeError: '&lt;' not supported between instances of 'str' and 'int'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a custom key function to <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort</code></a>:</p>
<pre><code>x = [4,6,9,'ashley','drooks','chay','poo','may']
x.sort(key=lambda v: (isinstance(v, str), v))

# result:
# [4, 6, 9, 'ashley', 'chay', 'drooks', 'may', 'poo']
</code></pre>
<hr/>
<p>This key function maps each element in the list to a tuple in which the first value is a boolean (<code>True</code> for strings and <code>False</code> for numbers) and the second value is the element itself, like this:</p>
<pre><code>&gt;&gt;&gt; [(isinstance(v, str), v) for v in x]
[(False, 4), (False, 6), (False, 9), (True, 'ashley'), (True, 'chay'),
 (True, 'drooks'), (True, 'may'), (True, 'poo')]
</code></pre>
<p>These tuples are then used to sort the list. Because <code>False &lt; True</code>, this makes it so that integers are sorted before strings. Elements with the same boolean value are then sorted by the 2nd value in the tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can see from your comment that you want integers to be sorted first then strings.</p>
<p>So we could sort two separate lists and join them as follows:</p>
<pre><code>x=[4,6,9,'ashley','drooks','chay','poo','may']
intList=sorted([i for i in x if type(i) is int])
strList=sorted([i for i in x if type(i) is str])
print(intList+strList)
</code></pre>
<p>Output:</p>
<blockquote>
<p>[4, 6, 9, 'ashley', 'chay', 'drooks', 'may', 'poo']</p>
</blockquote>
</div>
<span class="comment-copy">And how are they supposed to sort exactly?</span>
<span class="comment-copy">What does it mean to sort numbers and strings together?</span>
<span class="comment-copy">It's telling you exactly what the problem is. But you, on the other hand, haven't told us what the sorted list would look like. Would numbers be sorted before strings? Or after strings? We can't fix your code without knowing what you want it to do.</span>
<span class="comment-copy">Ideally what should happen? I thought of sorting list items here. I am not sure how python will handle this? I thought integers will be sorted first and strings in the end.</span>
<span class="comment-copy">Ideally you get told it doesn't make any natural sense to sort such things together (which you have). You then decide what the rules are depending on what output you want... :)</span>
<span class="comment-copy">"[(isinstance(v, str), v) for v in x]" I have never seen this statement. Can you please elaborate this with an example. I am not able to visualize what this statement do?</span>
<span class="comment-copy">x.sort(key=lambda v: (isinstance(v, str), v)). What does key lambda means and why we use it? What does isinstance is used for? "isinstance(v, str), v)"- what operation this line performs?</span>
<span class="comment-copy">@Aayush That's too much to explain here. Take a look at <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-mean-how-does-it-work-and-how-can-i-use-it">list comprehensions</a> and <a href="https://stackoverflow.com/questions/13669252/what-is-key-lambda">lambda functions</a>. The code <code>(isinstance(v, str), v)</code> creates a tuple where the first element is a boolean (the result of <code>isinstance(v, str)</code>) and the second element is <code>v</code>.</span>
<span class="comment-copy">@Aran-Fey I understand key=lambda v: (isinstance(v, str), v) returns (False,4) and so on i still don't get is how value v is passed to lambda</span>
<span class="comment-copy">@amitnair92 The lambda is called by <code>list.sort</code>. It passes each value in the list to the key function as an argument, and <code>v</code> takes the value of that argument.</span>
<span class="comment-copy">can't we do without dividing it?</span>
<span class="comment-copy">I don't think so because you cannot compare integers with strings.</span>
<span class="comment-copy">i mean to say just sort the integer part in itself without touching the strings. Then sort the strings part. And according to ur code if i want strings first, i'll have to do like this? - print(strList+intList)</span>
<span class="comment-copy">@Dan you can... you just need to make a key that has a consistently sortable field... eg: <code>sorted(data, key=lambda L: (isinstance(L, str), L))</code> to put non-str's first which'll work as long as they remain orderable among themselves...</span>
<span class="comment-copy">Oh I didn't know that.</span>
