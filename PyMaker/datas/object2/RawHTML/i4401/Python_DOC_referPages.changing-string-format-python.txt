<div class="post-text" itemprop="text">
<p>I want to change the string <code>'datetime.datetime(2018, 4, 15, 12, 59)'</code> into the format <code>'2018-04-15T12:59'</code>.</p>
<p>I created a function that looks like:</p>
<pre><code>def changeDateFormat(date):
    newDate = []
    for i in date.split('datetime')[2].split(','):
        newDate.append(re.sub('[() ]', '', i))
    newStr = newDate[0] + '-0' + newDate[1] + '-' + newDate[2] + 'T' + newDate[3] + ':' + newDate[4]
    return newStr
</code></pre>
<p>And it works. </p>
<p>However, I also want it to handle the case where if each unit is less than 10, I want to add a <code>'0'</code>. Right now it just adds a <code>'0'</code> regardless.</p>
<p>I can do it in a very inefficient way, but I wonder how I can do it in a smart way.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't understand why you use the string representation of a datetime object but <code>eval</code> is your friend:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; eval('datetime.datetime(2018, 4, 15, 12, 59)').isoformat()
'2018-04-15T12:59:00'
</code></pre>
<p><code>eval</code> documentation: <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#eval</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I assume that you're trying to avoid using the <code>datetime</code> object, because it seems obviously confusing otherwise.</p>
<blockquote>
<p>I can do it in a very inefficient way</p>
</blockquote>
<p>You are actually not very far away, just one line.</p>
<pre><code>def changeDateFormat(date):
    newDate = []
    for i in date.split('datetime')[2].split(','):
        newDate.append(re.sub('[() ]', '', i))

    pad = '-0' if newDate[1] &lt; 10 else '-'
    newStr = newDate[0] + pad + newDate[1] + '-' + newDate[2] + 'T' + newDate[3] + ':' + newDate[4]
    return newStr
</code></pre>
<p>I'm afraid there isn't any smarter way if you're not using the <code>datetime</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>datetime.strftime and eval would be perfect here.</p>
<pre><code>import datetime
# use eval to execute the string like a a command
dt = eval('datetime.datetime(2018, 4, 15, 12, 59)')

formatted_date = dt.strftime('%Y-%m-%dT%H:%M')
</code></pre>
<blockquote>
<p>output: '2018-04-15T12:59'</p>
</blockquote>
<p>Reference: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">strftime() and strptime() Behavior</a></p>
</div>
<span class="comment-copy">The nicer solution is avoiding ending up with the <code>repr</code> of a datetime object in the first place.</span>
<span class="comment-copy">I'm really with @miradulo on this. Must you work with a <code>repr</code>-string? Why can't you have accesses to the actually <code>datetime</code> object?</span>
<span class="comment-copy"><i>"but eval is your friend"</i> - Eh, I'd really advise not to use <code>eval</code> here - or anywhere. There's almost always a better way then using <code>eval</code>. It may be tempting to use <code>eval</code>, but I'd find something different instead. Please see <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice">_Why is using 'eval' a bad practice? _</a></span>
<span class="comment-copy">Anywhere yes, but works with <b>repr</b> too ...</span>
<span class="comment-copy">Not that I really think the OP should be doing it this way (he really should try to get the actually <code>datetime</code> object and not the <code>repr</code>), but you could use <code>re.findall</code> to grab the digits and avoid all that substitution stuff with <code>re.sub</code>.</span>
<span class="comment-copy">I know it's tempting, but it really is best to avoid using <code>eval</code>. Please see <a href="https://stackoverflow.com/questions/1832940/why-is-using-eval-a-bad-practice"><i>Why is using 'eval' a bad practice?</i></a>.</span>
<span class="comment-copy">Well of course it would be a case by case scenario on whether eval is bad or not. In OP's case I don't see how using <code>eval</code> is bad. However, I understand the debate and why it should generally be avoided.</span>
