<div class="post-text" itemprop="text">
<p>I want to censor words by using Python regex.</p>
<p>My word is defined as Alphanumeric[a-zA-Z0-9] and separated by Non-Alphanumeric[^a-zA-Z0-9].</p>
<p>And the words should be censored by inner characters are replaced by * and others remain the same.</p>
<p>Ex:</p>
<pre><code>test=y
tes't
test'
test-y
tes-ty
    test  Test    
test
abcdefg  Test ... test are the best... some thing words @@$: HAHA TEST ONE REAL PLAYER!!! EXCELLENT! It's testy night
</code></pre>
<p>Result should be</p>
<pre><code>t**t=y
tes't
t**t'
t**t-y
tes-ty
    t**t  T**t    
t**t
abcdefg  T**t ... test are the best... some thing words @@$: HAHA T**T ONE REAL PLAYER!!! EXCELLENT! It's testy night
</code></pre>
<p>I have tried to use the regex to do it.
I use re module in python3.</p>
<p>1.I try to match the pattern.</p>
<p>2.Capture the group in matched pattern without the censored word.</p>
<p>3.Try to concat the groups with the word.</p>
<p>For example:
  I tried to censor the word 'test'.</p>
<p>Since I don't how to replace it with *, I try to replace with 'SUB' to see my pattern is right or not first.</p>
<pre><code>inputStr = re.sub(r'([^a-zA-z0-9]+)test([^a-zA-z0-9]+)', r'\1SUB\2', inputStr, flags=re.IGNORECASE)
inputStr = re.sub(r'^test([^a-zA-z0-9]+)', r'SUB\1', inputStr, flags=re.IGNORECASE)
replacedStr = re.sub(r'([^a-zA-z0-9]+)test$', r'\1SUB', inputStr, flags=re.IGNORECASE)
print(replacedStr)
</code></pre>
<p>Also, is it possible to use one line to do above thing, I don't know how to use the group in one-line pattern.</p>
<pre><code>replacedStr = re.sub('[^a-zA-z0-9]+test[^a-zA-z0-9]+|^test[^a-zA-z0-9]+|[^a-zA-z0-9]+test$', 'SUB', inputStr, flags=re.IGNORECASE)
</code></pre>
<p>But it doesn't work well.</p>
<pre><code>re.sub('[^a-zA-z0-9]+test[^a-zA-z0-9]+|^test[^a-zA-z0-9]+|[^a-zA-z0-9]+test$', 'SUB', inputStr, flags=re.IGNORECASE)
</code></pre>
<p>My Result</p>
<pre><code>SUB=y
tes't
SUB'
test-y
tes-ty
    SUB  Test    
SUB
abcdefg  SUB ... test are the best... some thing words @@$: HAHA SUB ONE REAL PLAYER!!! EXCELLENT! It's testy night
</code></pre>
<p>I see my pattern somewhat doesn't match some 'test' and I don't know why.
<a href="https://regexr.com/3nk9l" rel="nofollow noreferrer">https://regexr.com/3nk9l</a></p>
<p>So, my questions are</p>
<p>1.What is wrong with my pattern?</p>
<p>2.How to let the matched word be replaced with * in its inner?</p>
<p>Thx</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that rather than explicitly match for <code>^test</code>, <code>^test$</code> and <code>test$</code> (which is where I think your regex is falling down) you might do better using <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">look ahead and behind assertions</a> to separate the words then do the replacement of the inner letters.</p>
<pre><code>import re

for line in """test=y
tes't
test'
test-y
tes-ty
    test  Test
test
abcdefg  Test ... test are the best... some thing words @@$: HAHA TEST ONE REAL PLAYER!!! EXCELLENT! It's testy night
""".splitlines():
    print line

    print re.sub(r'(?&lt;!{0})(t)es(t)(?!{0})'.format(r'[a-zA-z0-9]'), r'\1**\2', line, flags=re.IGNORECASE)
</code></pre>
<p>Results in:</p>
<pre><code>test=y
t**t=y
tes't
tes't
test'
t**t'
test-y
t**t-y
tes-ty
tes-ty
    test  Test
    t**t  T**t
test
t**t
abcdefg  Test ... test are the best... some thing words @@$: HAHA TEST ONE REAL PLAYER!!! EXCELLENT! It's testy night
abcdefg  T**t ... t**t are the best... some thing words @@$: HAHA T**T ONE REAL 
PLAYER!!! EXCELLENT! It's testy night
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may try this:</p>
<pre><code>(?&lt;![a-zA-Z0-9])(t)es(t)(?![a-zA-Z0-9])
</code></pre>
<p>and replace by this:</p>
<pre><code>\1**\2
</code></pre>
<p><a href="https://ideone.com/yZjFuA" rel="nofollow noreferrer">Python demo</a>:</p>
<pre><code>import re 
regex = r"(?&lt;![a-zA-Z0-9])(t)es(t)(?![a-zA-Z0-9])"
subst = "\\1**\\2"
result = re.sub(regex, subst, inputStr, 0, re.IGNORECASE)
</code></pre>
</div>
<span class="comment-copy">I think there is a non regex solution to this that would be much easier.  Maybe use a dictionary of censored words, and the value is their censored version?</span>
<span class="comment-copy">But what I need is match any case combination, ex: Test, TEsT, tEsT, test, will be converted into T<b>t, T</b>T, t<b>T, t</b>t</span>
<span class="comment-copy">Gee one has to be quick on stack overflow ! :)</span>
<span class="comment-copy">The <code>+</code> (one or more) modifiers in your original regex are consuming characters that then are not available to match word boundaries. Even removing them will still give a problem with <code>test test</code>. Does the space terminate the first word or start the second word. You need it to do both, hence the look ahead/behind functionality.</span>
