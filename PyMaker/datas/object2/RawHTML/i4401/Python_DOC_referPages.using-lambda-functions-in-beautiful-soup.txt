<div class="post-text" itemprop="text">
<p>Trying to match links that contain certain texts. I'm doing</p>
<pre><code>links = soup.find_all('a',href=lambda x: ".org" in x)
</code></pre>
<p>But that throws a TypeError: argument of type 'NoneType' is not iterable.</p>
<p>The correct way of doing it is apparantly</p>
<pre><code>links = soup.find_all('a',href=lambda x: x and ".org" in x)
</code></pre>
<p>Why is the additional <code>x and</code> necessary here?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a simple reason: One of the <code>&lt;a&gt;</code> tags in your HTML has no <code>href</code> property.</p>
<hr/>
<p>Here's a minimal example that reproduces the exception:</p>
<pre><code>html = '&lt;html&gt;&lt;body&gt;&lt;a&gt;bar&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'
soup = BeautifulSoup(html, 'html.parser')

links = soup.find_all('a', href=lambda x: ".org" in x)
# result:
# TypeError: argument of type 'NoneType' is not iterable
</code></pre>
<p>Now if we add a <code>href</code> property, the exception disappears:</p>
<pre><code>html = '&lt;html&gt;&lt;body&gt;&lt;a href="foo.org"&gt;bar&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'
soup = BeautifulSoup(html, 'html.parser')

links = soup.find_all('a', href=lambda x: ".org" in x)
# result:
# [&lt;a href="foo.org"&gt;bar&lt;/a&gt;]
</code></pre>
<p>What's happening is that BeautifulSoup is trying to access the <code>&lt;a&gt;</code> tag's <code>href</code> property, and that returns <code>None</code> when the property doesn't exist:</p>
<pre><code>html = '&lt;html&gt;&lt;body&gt;&lt;a&gt;bar&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;'
soup = BeautifulSoup(html, 'html.parser')

print(soup.a.get('href'))
# output: None
</code></pre>
<p>This is why it's necessary to allow <code>None</code> values in your lambda. Since <code>None</code> is a falsy value, the code <code>x and ...</code> prevents the right side of the <code>and</code> statement from being executed when <code>x</code> is <code>None</code>, as you can see here:</p>
<pre><code>&gt;&gt;&gt; None and 1/0
&gt;&gt;&gt; 'foo.org' and 1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: division by zero
</code></pre>
<p>This is called <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">short-circuiting</a>.</p>
<hr/>
<p>That said, <code>x and ...</code> checks the truthiness of <code>x</code>, and <code>None</code> is not the only value that's considered falsy. So it would be more correct to compare <code>x</code> to <code>None</code> like so:</p>
<pre><code>lambda x: x is not None and ".org" in x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The additional <code>x</code> avoids the problem that you had, i.e <code>TypeError: argument of type 'NoneType'</code>. Try calling the lambda function with <code>None</code> as the argument:</p>
<pre><code>&gt;&gt;&gt; f = lambda x: ".org" in x
&gt;&gt;&gt; f
&lt;function &lt;lambda&gt; at 0x7f5dd1215ea0&gt;
&gt;&gt;&gt; f(None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;lambda&gt;
TypeError: argument of type 'NoneType' is not iterable
&gt;&gt;&gt; f('abcd.org/blah')
True
</code></pre>
<p>The first <code>x</code> in <code>x and ".org" in x</code> tests whether <code>x</code> is "truthy". If it is the rest of the expression is evaluated. If it is not "truthy", e.g. it is None, then the second part of the <code>and</code> expression is short circuited and not executed. This avoids attempting to perform the <code>in</code> operation, thereby avoiding the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that an <code>&lt;a ...&gt;</code> tag may have no <code>href=...</code> part and in this case you get a <code>None</code> (that cannot be used with the <code>in</code> operator).</p>
</div>
