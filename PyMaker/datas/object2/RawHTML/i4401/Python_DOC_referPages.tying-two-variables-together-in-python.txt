<div class="post-text" itemprop="text">
<p>I understand that in Python variables point to objects so when you assign one to another they then both point to the same object. What I'd like to do is to make one variable change when the other one does. In the case I am working on a GUI. So I have a label with an attribute for its text. I'd like that attribute to be equal to an attribute in another class. At the moment I am doing it by using an intermediate function but it feels like there should be a more elegant way of doing it. So my way is effectively similar to the below:</p>
<pre><code>class Label():
    def init():
        self.text = None
        self.gettext = None

    def display():
        if callable(self.gettext):
            self.text = self.gettext()
        else:
            self.text = self.gettext
        print(str(self.text))

class Anotherclass():
    def init():
        self.anattribute = "avaluethatchanges"    

mylabel = Label()
myclass = Anotherclass()

def gettheattribute():
    return myclass.anattribute

mylabel.gettext = gettheattribute
</code></pre>
<p>There will be lots of labels linked to lots of different classes. So what I would like to be able to do is just:</p>
<pre><code>mylabel.gettext = myclass.anattribute
</code></pre>
<p>However, when myclass.anattribute gets changed - myclass.gettext doesn't. I understand why but is there another way of writing it so that it does - without creating the function?</p>
<p>Many thanks</p>
<p>EDIT: - Both classes will be used in other applications where one or the other might not exist so I can't hard code the relationship between them within the classes themselves.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first thing I would say is that it's somewhat of an <em>antipattern</em> to duplicate the storage of data in two places, since it violates the <strong><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow noreferrer">DRY</a></strong> principle of software development.</p>
<p>Generally, with GUI designs like this, there's the concept of <strong>MVC</strong>, or <strong>Model</strong>, <strong>View</strong>, <strong>Controller</strong>. </p>
<p>It's a pretty large topic, but the general idea is that you create a model object to store all your data, and then all the other parts of the GUI -- the many Views that display the data, and the Controllers that change the data -- all look at the model, so that the data is only stored and updated in one place.</p>
<p>GUI elements are either designed to accept a model and refreshes are either manually triggered or there is some type of Listen/Callback/Event system to automatically trigger refreshes on the Views when the model changes.  The specific way to handle that depends on the GUI framework you are using.</p>
<p>One simple way to implement this would be to create a model class that both classes share and use python <em>properties</em> and a <em>callback registry</em> to trigger updates.</p>
<pre><code>class Model():

    def __init__(self, text):
        self._text = text
        self._callbacks = []

    def on_text_changed(callback):
        self._callbacks.append(callback)     

    @property
    def text(self):
        return self._text

    @text.setter
    def text(self, value):
        self._text = text
        for callback in self._callbacks:
            callback()
</code></pre>
<p>Then both other classes would need something like this</p>
<pre><code>class Label():

    def __init__(self, model):
        self.model = model
        self.model.on_text_changed(self.refresh)

    def refresh(self):
        print(self.text)

    @property
    def text(self):
        return self.model.text

    @text.setter
    def text(self, value):
        self.model.text = value
</code></pre>
<p>Then you would create them like this</p>
<pre><code>model = Model('The text')
label = Label(model)
another_class = AnotherClass(model)

label.text = 'This will update text on all classes'
another_class.text = 'So will this'
model.text = "And so will this.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like this might be a good use case for a <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer">property</a>. Properties let you have getter/setters that work seamlessly like attributes. From the docs</p>
<blockquote>
<p>[a property is] a succinct way of building a data descriptor that triggers function calls upon access to an attribute<br/>
  ...<br/>
  The property() builtin helps whenever a user interface has granted attribute access and then subsequent changes require the intervention of a method.</p>
</blockquote>
<pre><code>mylabel = Label()

class MyClass(object):
    def __init__(self, some_label):
        self._anattribute = None
        self.label = some_label

    @property
    def anattribute(self):
        return self._anattribute

    @anattribute.setter
    def anattribute(self, value):
        self._anattribute = value # set the underlying value
        # do something else, too
        self.label.text = self._anattribute
</code></pre>
<p>So...</p>
<pre><code>mylabel = Label()
myinstance = MyClass(mylabel)
myinstance.anattribute = 'foo'
mylabel.text == 'foo' # True
</code></pre>
<p>Storing <code>self._anattribute</code> is not strictly necessary, either. You could have the getter/setter access/modify <code>self.label.text</code> directly, if applicable.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class MyClass:
    def __init__(self,shared_dict): # use some mutable datatype (a dict works well)
       self.shared = shared_dict
    def __getattr__(self,item):
       return self.shared.get(item)

data = {'a':'hello','b':[1,2,3]}
c = MyClass(data)
print(c.a)    
data['a'] = 'world!'
print(c.a)
</code></pre>
<p>I guess ... this doesnt make much sense from a use case standpoint really ... there is almost guaranteed to be a better way to do whatever it is you are actually trying to do (probably involves notifying subscribers and updating variables)</p>
<p>see it in action here <a href="https://repl.it/repls/TestyGruesomeNumbers" rel="nofollow noreferrer">https://repl.it/repls/TestyGruesomeNumbers</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you have some GUI element that you want to tie to an underlying model. Riffing on 0x5453's very good advice, what about the following:</p>
<pre><code>    class Label():
        def __init__(self, text_source, source_attribute):
            self.text_source = text_source
            self.source_attribute = source_attribute

        @property    
        def text_from_source(self):
            return getattr(self.text_source, self.source_attribute)

        def display(self):
            print(str(self.text_from_source))

    class Anotherclass():
        def __init__():
            self.anattribute = "avaluethatchanges"

&gt;&gt;&gt; A = Anotherclass()
&gt;&gt;&gt; L = Label(A, "anattribute")
&gt;&gt;&gt; L.display()
avaluethatchanges
&gt;&gt;&gt; A.anattribute = 3.1415
&gt;&gt;&gt; L.display()
3.1415
</code></pre>
<p>This does not let you change the attribute from within the label, but I'd prefer it that way.</p>
</div>
<span class="comment-copy">It may help to take a step back and think about your design.  What is the relationship between <code>Label</code>s and <code>Anotherclass</code>s?  Would it make sense for one object to own the other, and therefore query its child for the latest text value when it needs to redraw?</span>
<span class="comment-copy">^ this is solid wisdom :)</span>
<span class="comment-copy">AFAIK, Descriptors can be used to convert an <code>=</code> to a function call (set of instructions) under the hood. Like for example, I need a data-binding logic. This one seems similar to that. But yeah think about the design, relationships between objects etc :-).</span>
<span class="comment-copy">I'm trying to keep the data abstracted from the gui so I can plug in different datamodels</span>
<span class="comment-copy">Thats really helpful thank you. I've got a model separated out like you've done and implemented a similar system in a slightly more convoluted away. Its just in this instance - I need one part of the GUI to display the internal state of another. In this case it is the cursor position. It doesn't feel right to take the cursor position out and put in the datamodel.</span>
<span class="comment-copy">I can't hard code the relationship into either class because myclass needs to be used in other applications where mylabel doesn't exist and vice versa</span>
<span class="comment-copy">Hmm. Perhaps the question needs this further elaboration then. If you can give a concrete example of what you mean, I can update my answer accordingly. Though, the design of your API should be made with careful thought. That interface should be adequately described in order for a suitable answer to be made (in order to avoid opinion-based answers).</span>
<span class="comment-copy">Yeah sorry - I should stipulate that I can't hard code the relationship into either class. If I could do that then I would use your approach for sure</span>
<span class="comment-copy">Thats pretty cool - but yeah struggling to apply it to my situation. I can't hard code it into myclass as it needs to be abstracted</span>
<span class="comment-copy">Yeah this great! Thanks!</span>
