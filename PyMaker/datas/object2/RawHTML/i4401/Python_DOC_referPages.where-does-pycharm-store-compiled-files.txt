<div class="post-text" itemprop="text">
<p>I'm new to PyCharm/Python, and can't figure out where the IDE stores compiled python *.pyc files. </p>
<p>Coming from the IntelliJ world, it is strange that I don't see any menu options to re-build the project, or build individual files.</p>
<p>I'm also unable to find any pyc files while searching the project directory, so basically, I've no idea whether successful compilation has happened at all, although the GitHub imported project is error free.</p>
<p>What can I do here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because most Python implementations are interpreted rather than a compiled, the compilation step happens when you run the code. This is why the PyCharm UI features a prominent "Run" button (▶️) but no compile button.</p>
<p>It is true that for CPython there is a compilation step which compiles from the Python code to bytecode, but this is an implementation detail. CPython 3 stores its cached compilation results in <code>.pyc</code> files in a directory called <code>__pycache__</code>. These files are automatically generated when a module is imported (using <code>import module</code> will result in a <code>module.pyc</code> file) but not when a normal program is run.</p>
<p>Lastly, as per @shmee's comment, it is possible to compile a source file with the <a href="https://docs.python.org/3/library/py_compile.html" rel="nofollow noreferrer">py_compile</a> module, but I should emphasise that this is not usually done or necessary.</p>
<p>Now, if you are worried about checking that your code is correct, in the interpreted language world we rely more strongly on testing. I would recommend that you investigate tests for your code (using pytest and the excellent <a href="https://www.jetbrains.com/help/pycharm/test-runner-tab.html" rel="nofollow noreferrer">test integration</a> in PyCharm).</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me begin with a bit on terminology:</p>
<ul>
<li><p><strong>Python</strong> is a programming language. It's "just" the <a href="https://en.wikipedia.org/wiki/Programming_language_specification" rel="nofollow noreferrer">programming language specification</a>.</p></li>
<li><p><strong>CPython</strong> is the reference implementation of the Python language. It's actually just one of several different Python <em>interpreters</em>. CPython itself works (let's call it an implementation detail) by translating (but you could also say compiling) <em>the code in imported Python files/modules</em> to bytecode and then executing that bytecode. It actually stores the translation as <code>.pyc</code> files in the folder of that <a href="https://stackoverflow.com/q/5149832/5393381">file</a>) to make subsequent imports faster, but that's specific to CPython and can also be <a href="https://stackoverflow.com/q/154443/5393381">disabled</a>.</p></li>
<li><p><strong>PyCharm</strong> is an <a href="https://en.wikipedia.org/wiki/Integrated_development_environment" rel="nofollow noreferrer">integrated development environment</a>. However it requires to <a href="https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html.html" rel="nofollow noreferrer">"Configure a Python Interpreter"</a> to run Python code.</p></li>
</ul>
<p>That means that PyCharm isn't responsible for creating <code>.pyc</code> files. If you configured a non-CPython interpreter or used the environmental variable to disable the <code>pyc</code> file creation there won't be any pyc files.</p>
<p>But if you used an appropriate CPython interpreter in PyCharm it will create <code>.pyc</code> files for the files/modules you successfully imported. That means you actually have to import or otherwise run the Python files in your project to get the <code>.pyc</code> files.</p>
<p>Actually the Python documentation contains a note about the <a href="https://docs.python.org/tutorial/modules.html#compiled-python-files" rel="nofollow noreferrer">"compiled" Python files</a>:</p>
<blockquote>
<p>To speed up loading modules, Python caches the compiled version of each module in the <code>__pycache__</code> directory under the name <code>module.version.pyc</code>, where the version encodes the format of the compiled file; it generally contains the Python version number. For example, in CPython release 3.3 the compiled version of spam.py would be cached as <code>__pycache__/spam.cpython-33.pyc</code>. This naming convention allows compiled modules from different releases and different versions of Python to coexist.</p>
<p>Python checks the modification date of the source against the compiled version to see if it’s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.</p>
<p>Python does not check the cache in two circumstances. First, it always recompiles and does not store the result for the module that’s loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.</p>
<p>Some tips for experts:</p>
<ul>
<li>You can use the <code>-O</code> or <code>-OO</code> switches on the Python command to reduce the size of a compiled module. The <code>-O</code> switch removes assert statements, the <code>-OO</code> switch removes both assert statements and <strong>doc</strong> strings. Since some programs may rely on having these available, you should only use this option if you know what you’re doing. “Optimized” modules have an<code>opt-</code> tag and are usually smaller. Future releases may change the effects of optimization.</li>
<li>A program doesn’t run any faster when it is read from a <code>.pyc</code> file than when it is read from a <code>.py</code> file; the only thing that’s faster about <code>.pyc</code> files is the speed with which they are loaded.</li>
<li>The module <a href="https://docs.python.org/library/compileall.html#module-compileall" rel="nofollow noreferrer"><code>compileall</code></a> can create .pyc files for all modules in a directory.</li>
<li>There is more detail on this process, including a flow chart of the decisions, in <a href="https://www.python.org/dev/peps/pep-3147/" rel="nofollow noreferrer">PEP 3147</a>.</li>
</ul>
</blockquote>
</div>
<span class="comment-copy">Actually, you can simply compile source files if you wish to: <a href="https://docs.python.org/3/library/py_compile.html" rel="nofollow noreferrer">py_compile</a>. Also worth mentioning that the interpreter only compiles modules upon import. So if you have a module that is never imported by another one, it will never have a .pyc by default</span>
<span class="comment-copy">@shmee I had already mentioned when compilation happens for CPython. I've also added a note about py_compile, thanks.</span>
<span class="comment-copy">Nitpick: <i>languages</i> are not compiled or interpreted, language <i>implementations</i> are.</span>
<span class="comment-copy">@juanpa.arrivillaga I've reworded, but I must say it is very common to call talk about <a href="https://en.wikipedia.org/wiki/Interpreted_language" rel="nofollow noreferrer">interpreted languages</a>. Do you know of a compiled Python implementation? I feel like the dynamic nature of the language wouldn't lend itself to compilation.</span>
<span class="comment-copy">It may be stretching the definition of "implementation" but <a href="http://cython.org/" rel="nofollow noreferrer">Cython</a> could be classified as "Python compiler".</span>
<span class="comment-copy">Per my understanding, the compilation to bytecode is a necessary part of the CPython runtime, however, the saving of <code>.pyc</code> files is optional to make startup time faster</span>
<span class="comment-copy">@juanpa.arrivillaga Yeah, I think so too. I meant the saving of the pyc file that can be disabled.</span>
