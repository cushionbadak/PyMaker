<div class="post-text" itemprop="text">
<p>I read ip addresses from a file and insert them to a set along with bool value 'False'. I use 'add' function.
Then I insert the set into a list.
example for list I want to get :
 [{1.2.3.5,False},{10.10.10.1,False}]
But sometimes I see that the order of the IP address and the bool getting changed.
this is the code</p>
<pre><code>def createIpSet(ipFile):
    ipList = []
    ipFile = ipFile.read().splitlines()
    for lines in ipFile:
        s = set()
        s.add(lines)
        s.add(False)
        ipList.append(s)
    print(ipList)   
    return ipList
</code></pre>
<p>this is an example of the output</p>
<pre><code>[{False, '192.168.1.1'}, {False, '192.168.1.2'}, {'192.168.1.3', False}, {'192.168.1.3', False}, {'192.168.1.4', False}, {False, '127.0.0.1'}, {False, '52.230.85.180'}, {False, '53.27.2.1'}, {False, '52.230.84.0'}]
</code></pre>
<p>as you can see for example in the third value inside the set - order is switched and I don't know why.
I would like you to explain why it is happening.
Thanks,
Omri.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">Sets are unordered.</a> You cannot and should not expect the output of a set to be printed in a particular order.</p>
<p>What you want is a list of tuples:</p>
<pre><code>def createIpSet(ipFile):
    ipList = []
    ipFile = ipFile.read().splitlines()
    for lines in ipFile:
        ipList.append((lines, False))
    print(ipList)   
    return ipList
</code></pre>
<p>A list of lists is equally possible via <code>[lines, False]</code>. The main difference between <code>list</code> and <code>tuple</code> are lists are mutable while tuples are immutable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets are unordered as they use a hash function to insert the items into it .
You may use a dictionary representing ips as keys and bool values as a vaules.
It will look like </p>
<pre><code>{'192.168.1.3': False, '192.168.1.4' : False }
</code></pre>
<p>The advantage of using dictionary vs lists of tuples is that the search or looking for an ip will take O(1) time vs O(n) for lists of tuples .</p>
<pre><code>def createIpSet(ipFile):
    ipList = {}
    ipFile = ipFile.read().splitlines()
    for lines in ipFile:
        ipList[lines] =  False
    for ip ,value in ipList :
        print('Ip : {} ,value : {} '.format(ip , value))
    return ipList
</code></pre>
<p>In a pythonic way using comprehension :</p>
<pre><code>def createIpSet(ipFile):
    ipList = {ip:False for ip in ipFile.read().splitlines()}
    for ip ,value in ipList :
        print('Ip : {} ,value : {} '.format(ip , value))
    return ipList
</code></pre>
<p>If you want to keep the order of ips as the file you can use OrderedDict .</p>
</div>
<span class="comment-copy">Did one of the below solutions help? If so, please consider accepting (green tick on left), so other users know.</span>
<span class="comment-copy">In this case it looks like a <code>tuple</code> is wanted, judging by the diagram and their use of the immutable <code>set</code>.</span>
