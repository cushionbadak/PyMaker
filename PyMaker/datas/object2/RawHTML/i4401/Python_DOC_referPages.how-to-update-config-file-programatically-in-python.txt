<div class="post-text" itemprop="text">
<p>I am modifying a existing Python code, I see <code>config.py</code> with content like below</p>
<pre><code>person = {
       'peter': {
            'age' : '60',
             'sex' : 'm',
             'phone' : '999 999 999'
        },
        'sara': {
            'age' : '68',
             'sex' : 'f',
             'phone' : '111 111 111'
        }
}
</code></pre>
<p>The Python program has:</p>
<pre><code>import config
# config item is accessed as below
print config.person['peter']['age']
</code></pre>
<p>I have 2 questions, firstly, What is this format in config.py called? can I call it as Python built-in data structure? because this is not JSON.</p>
<p>Secondly, how can I update the config.py entry (or add new person), for example, how to change <code>config.person['sara']['phone']</code> to <code>888 888 888</code>? or add a new person  <code>zac</code> ?</p>
<p>I am using python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>The format is just plain executable Python source code.</p>
<p>This format is generally not used when you need to programmatically change the contents, but a human being with some basic Python knowledge can edit it in a simple text editor.</p>
<p>For example, to change Sara's phone number in your text editor, you just go to this line:</p>
<pre><code>         'phone' : '111 111 111'
</code></pre>
<p>… and change it to this:</p>
<pre><code>         'phone' : '888 888 888'
</code></pre>
<p>Similarly, to add another person, you can copy and paste one of the existing people's entries and edit it.</p>
<hr/>
<p>But if you wanted to have your script edit this file, it would need to parse the Python source (e.g., using the <code>ast</code> module), map the assignments to a set of key-value pairs, modify the value, turn the result back into a set of assignments, then turn that back into source code. Or it could do something a little simpler and hackier with the same effect. But the point is, there's no clear and easy way to edit this file programmatically. I don't want to provide code that does this parsing and generating, because it's really not something you should be doing if you don't know how, and haven't thought through the safety implications, etc.</p>
<p>If you want a config file you can edit programmatically, replace it with something like JSON. That's just as easy for a human to edit, but it has the added benefit of also being easy for your program to edit, and being inherently safe from mistaken or malicious bad data.</p>
<p>If you or your users already have deployments using the <code>config.py</code> format, you can write migration code that falls back to the "legacy" config file if the JSON file can't be found, something like this:</p>
<pre><code>try:
    with open('config.json') as f:
        config = json.load(f)
except FileNotFoundError:
    try:
        import config
    except Exception as e:
        raise SomeMoreAopropriateError(…)
    with open('config.json', 'w') as f:
        json.dump(config, f)
</code></pre>
<p>(If the old code used, e.g., <code>execfile</code> instead of <code>import</code>, do the same thing here, of course.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use update method for adding new entry in dictionary :</p>
<pre><code>In [46]: person.update({'another':{"age":'45',"sex":"m","phone":"811 345 678"}})

In [47]: person
Out[47]: 
{'another': {'age': '45', 'phone': '811 345 678', 'sex': 'm'},
 'peter': {'age': '60', 'phone': '999 999 999', 'sex': 'm'},
 'sara': {'age': '68', 'phone': '111 111 111', 'sex': 'f'}}
</code></pre>
<p>for updating the existing the value you can use the name as key and another key for age or male or sex</p>
<pre><code>In [48]: person['another']['age']='50' 

In [49]: person
Out[49]: 
{'another': {'age': '50', 'phone': '811 345 678', 'sex': 'm'},
 'peter': {'age': '60', 'phone': '999 999 999', 'sex': 'm'},
 'sara': {'age': '68', 'phone': '111 111 111', 'sex': 'f'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's just a regular <code>dict</code>.</p>
<p>Most probably, <a href="https://stackoverflow.com/questions/5710758/python-pattern-for-sharing-configuration-throughout-application">this file is imported like a module, after which you can access <code>config.person</code> as a Python object</a>.</p>
<p>Now, <strong>this config format is not supposed to be programmatically overwritten,</strong> and for a good reason: <a href="https://stackoverflow.com/questions/40930663/config-file-with-a-py-file/40930825#40930825">a <code>.py</code> is code rather than data and can have arbitrary logic in it</a>. <strong>If you wish to do it anyway, you'll need to jump through hoops.</strong> If you only need structured data, without any logic, you'll be better off with JSON (see the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code> module</a>).</p>
<hr/>
<p>That said, here's the plan how it will look like:</p>
<ol>
<li>Choose what the resulting file contents will look like. Options include:

<ul>
<li>Overwrite the entire file with <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code></a> of the <code>dict</code></li>
<li>Overwrite the entire file with <a href="https://docs.python.org/3/library/pprint.html?highlight=pprint#pprint.pprint" rel="nofollow noreferrer"><code>pprint.pprint()</code></a> of the <code>dict</code></li>
<li>Edit the file line by line by hand</li>
</ul></li>
<li>At an appropriate moment, write the chosen representation into the file. Its path <a href="https://stackoverflow.com/questions/7162366/get-location-of-the-py-source-file">can be found as <code>config.__file__</code></a>.</li>
</ol>
</div>
<span class="comment-copy">Better to use <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><b><code>json</code></b></a>.</span>
<span class="comment-copy">I can move to json config file, thanks</span>
<span class="comment-copy">Thanks, and write <code>person</code> back to file?</span>
<span class="comment-copy">then simply you can add methods for update and for retrieve also</span>
