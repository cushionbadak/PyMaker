<div class="post-text" itemprop="text">
<p>I have a program where I get numbers like: 0.18869952857494354248046875</p>
<p>I need to change these from string to float, but when I do that, I get: 0.18869952857494354</p>
<p>Why does python cut off ~10 digits and how can I retain them in the transfer?</p>
</div>
<div class="post-text" itemprop="text">
<p>The limitations of floating point math mean that you can't have arbitrarily long floating point numbers: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html</a></p>
<p>You can get around this by using the <code>decimal</code> library (<a href="https://docs.python.org/3/library/decimal.html#module-decimal" rel="nofollow noreferrer">https://docs.python.org/3/library/decimal.html#module-decimal</a>):</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; a = Decimal("0.18869952857494354248046875")
&gt;&gt;&gt; a
Decimal('0.18869952857494354248046875')
&gt;&gt;&gt; b = Decimal("0.111111111111111111111111")
&gt;&gt;&gt; a + b
Decimal('0.29981063968605465359157975')
&gt;&gt;&gt; a * b
Decimal('0.02096661428610483805338539570')
</code></pre>
<p>By default the <code>decimal</code> library has 28 places of precision but you can change this using <code>getcontext().prec</code>:</p>
<pre><code>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857')
&gt;&gt;&gt; getcontext().prec = 28
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
&gt;&gt;&gt; getcontext().prec = 60
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857142857142857142857142857142857142857142857142857142857')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This happens because <code>float</code> datatype in python can show upto 16 digits precision. </p>
<p>For higher precision (to retain all digits) , use special packages like : <a href="https://pypi.python.org/pypi/mpmath" rel="nofollow noreferrer">mpmath</a>
You can use it like:</p>
<pre><code>from mpmath import *
mp.dps = 64       #64 decimal places
sqrt(5)/2 #64 digit, high precision
</code></pre>
</div>
<span class="comment-copy">Cause floating point math: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">Use a library like the built-in decimal library, or the 3rd party mpmath library. Normal floats don't have the precision you need.</span>
<span class="comment-copy">Thank you so much for answering! I am trying to apply your answer, but I'm having a little issue. I get an error: <code>the_float = average*(high_output-low_output)+low_output TypeError: unsupported operand type(s) for *: 'decimal.Decimal' and 'float'</code> high_output is .5 low_output is 0 the average in this case was 0.179625286161899566650390625. How can I do this math without error? Thanks!</span>
<span class="comment-copy">@AndersonP Both operands need to be decimals, try <code>average*Decimal(high_output-low_output)+Decimal(low_output)</code></span>
