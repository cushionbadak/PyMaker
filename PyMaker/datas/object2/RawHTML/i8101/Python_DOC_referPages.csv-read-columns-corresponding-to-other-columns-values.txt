<div class="post-text" itemprop="text">
<p>I need to parse a <code>csv</code> file.</p>
<p><strong>input: file + name</strong></p>
<pre class="lang-none prettyprint-override"><code>Index   |   writer   |  year  |  words
  0     |   Philip   |  1994  | this is first row 
  1     |   Heinz    |  2000  | python is wonderful (new line) second line
  2     |   Thomas   |  1993  | i don't like this
  3     |   Heinz    |  1898  | this is another row
  .     |     .      |    .   |      .
  .     |     .      |    .   |      .
  N     |   Fritz    |  2014  | i hate man united
</code></pre>
<p><strong>output: list of all words corresponding to name</strong></p>
<pre><code>l = ['python is wonderful second line', 'this is another row']
</code></pre>
<p><strong>What have I tried ?</strong></p>
<pre><code>import csv
import sys

class artist:
    def __init__(self, name, file):
        self.file = file 
        self.name = name
        self.list = [] 

    def extractText(self):
        with open(self.file, 'rb') as f:
            reader = csv.reader(f)
            temp = list(reader)
        k = len(temp)
        for i in range(1, k):
            s = temp[i]
            if s[1] == self.name:
                self.list.append(str(s[3]))


if __name__ == '__main__':
    # arguements
    inputFile = str(sys.argv[1])
    Heinz = artist('Heinz', inputFile)
    Heinz.extractText()
    print(Heinz.list)
</code></pre>
<p><strong>Output is:</strong></p>
<pre><code>["python is wonderful\r\nsecond line", 'this is another row']
</code></pre>
<p>How do I get rid of <code>\r\n</code> for cells that contain more than one line of words, and could the loop be improved as its extremely slow?</p>
</div>
<div class="post-text" itemprop="text">
<p>This should at least be faster since you are parsing as you are reading the file, and then stripping out the unwanted carriage return and new line characters if they are there. </p>
<pre><code>with open(self.file) as csv_fh:
     for n in csv.reader(csv_fh):
         if n[1] == self.name:
            self.list.append(n[3].replace('\r\n', ' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Getting rid of newlines in <code>s[3]</code>: I'd suggest <code>' '.join(s[3].splitlines())</code>. See documentations for <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer"><code>"".splitlines</code></a>, see also <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>"".translate</code></a>. </p>
<p>Improving the loop:</p>
<pre><code>def extractText(self):
    with open(self.file, 'rb') as f:
        for s in csv.reader(f):
            s = temp[i]
            if s[1] == self.name:
                self.list.append(str(s[3]))
</code></pre>
<p>This saves one pass over the data.</p>
<p>But please consider @Tiny.D's advice and give pandas a try.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply use pandas to get the list:</p>
<pre><code>import pandas
df = pandas.read_csv('test1.csv')
index = df[df['writer'] == "Heinz"].index.tolist() # get the specific name's index
l = list()
for i in index:
    l.append(df.iloc[i, 3].replace('\n','')) # get the cell and strip new line '\n', append to list.
l   
</code></pre>
<p>Output:</p>
<pre><code>['python is wonderful second line', 'this is another row']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To collapse multiple white space you can use a regular expression, and to speed things up a bit, try a loop comprehension:</p>
<pre><code>import re

def extractText(self):
    RE_WHITESPACE = re.compile(r'[ \t\r\n]+')
    with open(self.file, 'rU') as f:
        reader = csv.reader(f)

        # skip the first line
        next(reader)

        # put all of the words into a list if the artist matches
        self.list = [RE_WHITESPACE.sub(' ', s[3])
                     for s in reader if s[1] == self.name]
</code></pre>
</div>
<span class="comment-copy">But they i have to hold whole text in each object before removing some lines. Don't I ? I need specific words not all of them.</span>
<span class="comment-copy">The original code copies all file contents to memory at <code>temp = list(reader)</code>; here each line is checked for s[1] == self.name; most lines are discarded.</span>
<span class="comment-copy">That is not what I want. I need the words of a specific writer/artist. Not all words.</span>
<span class="comment-copy">@TonyTannous Updated the answer with specific writer.</span>
