<div class="post-text" itemprop="text">
<p>I got two .csv files. One that has info1 and one that has info2. Files look like this<br/>
File1:</p>
<pre class="lang-none prettyprint-override"><code>20170101,,,d,4,f,SWE
20170102,a,,,d,f,r,RUS  &lt;-
</code></pre>
<p>File2:</p>
<pre class="lang-none prettyprint-override"><code>20170102,a,s,w,,,,RUS  &lt;-
20170103,d,r,,,,FIN
</code></pre>
<p>I want to combine these two lines (marked as "&lt;-") and make a combined line like this:</p>
<pre class="lang-none prettyprint-override"><code>20170102,a,s,w,d,f,r,RUS 
</code></pre>
<p>I know that I could do script similar to this:</p>
<pre><code>for row1 in csv_file1:
    for row2 in csv_file2:
        if (row1[0] == row2[0] and row1[1] == row2[1]):
            do something
</code></pre>
<p>Is there any other way to find out which rows have the same items in the beginning or is this the only way? This is pretty slow way to find out the similarities and it takes several minutes to run on 100 000 row files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your implementation is <code>O(n^2)</code>, comparing all lines in one file with all lines in another. Even worse if you re-read the second file for each line in the first file.</p>
<p>You could significantly speed this up by building an index from the content of the first file. The index could be as simple as a dictionary, with the first column of the file as key, and the line as value.
You can build that index in one pass on the first file.
And then make one pass on the second file,
checking for each line if the id is in the index.
If yes, then print the merged line.</p>
<pre><code>index = {row[0]: row for row in csv_file1}

for row in csv_file2:
    if row[0] in index:
        # do something
</code></pre>
<p>Special thanks to <a href="https://stackoverflow.com/users/355230/martineau">@martineau</a> for the <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">dict comprehension</a> version of building the index.</p>
<p>If there can be multiple items with the same id in the first file,
then the index could point to a list of those rows:</p>
<pre><code>index = {}
for row in csv_file1:
    key = row[0]
    if key not in index:
        index[key] = []
    index[key].append(row)
</code></pre>
<p>This could be simplified a bit using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

index = defaultdict(list)
for row in csv_file1:
    index[rows[0]].append(row)
</code></pre>
</div>
<span class="comment-copy">I would suggest merging the files, then sort by the first two columns rather than a nested loop</span>
<span class="comment-copy">Which columns make the rows match? Is it just the first column (so, for instance, RUS would not have a 20170101) or a combination? Also, does order matter?</span>
<span class="comment-copy">There are 35 items in one row. Items 0-4 are in both files, 5-9 are in file1, 10-20 are in file2 and 21-34 in both.</span>
<span class="comment-copy">Thanks @martineau, well-spotted! (updated the post with credits to you)</span>
<span class="comment-copy">There are multiple items that have same date (=1st item in row) and this does not work.</span>
<span class="comment-copy">@tmi12 you forgot to mention that in the question :-/ I updated my answer to handle that case.</span>
