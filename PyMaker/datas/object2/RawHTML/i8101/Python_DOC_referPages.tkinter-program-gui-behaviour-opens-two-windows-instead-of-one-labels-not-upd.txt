<div class="post-text" itemprop="text">
<p>I have the following program which is used to create a very basic GUI:</p>
<pre><code>from __future__ import with_statement
from Tkinter import *
import tkFont
import test

class main_fun():
    def init_proc(self):
        stLabelStatus['text']="Started executing the test...."
        time.sleep(5)

    def procA(self):
        print "inside ProcA...."
        stLabelStatus['text'] = "Running ProcA...."
        time.sleep(5)

    def procB(self):
        print "inside ProcB...."
        stLabelStatus['text'] = "Running ProcB...."
        time.sleep(5)

    def procC(self):
        print "inside ProcC...."
        stLabelStatus['text'] = "Running ProcC...."
        time.sleep(5)

    def procD(self):
        print "inside ProcD...."
        stLabelStatus['text'] = "Running ProcD...."
        time.sleep(5)

    def procE(self):
        print "inside ProcE...."
        stLabelStatus['text'] = "Running ProcE...."
        time.sleep(5)

    def procF(self):
        print "inside ProcF...."
        stLabelStatus['text'] = "Running ProcF...."
        time.sleep(5)

    def main_control(self):
        stLabelStatus.config(text='Running Tests....')
        self.init_proc()
        self.procA()
        self.procB()
        self.procC()
        self.procD()
        self.procE()
        self.procF()

tests=main_fun()

stGUI = Tk()
stGUI.geometry("450x300+50+50")
stGUI.resizable(0,0)
stGUI.title("Testing GUI")

arial12 = tkFont.Font(root = stGUI, family='Arial', size=12, weight='bold')
arial16 = tkFont.Font(root = stGUI, family='Arial', size=16, weight='bold')

stLabelTestNumlbl = Label(stGUI,text="Test No.")
stLabelTestNumlbl['font'] = arial12
stLabelTestNumlbl.place(x=120,y=40)

stInputTestNum = Entry(stGUI, width=6)
stInputTestNum['font'] = arial12
stInputTestNum.place(x=250,y=40)

stLabelStatuslbl = Label(stGUI,text="Status")
stLabelStatuslbl['font'] = arial12
# stLabelStatus.pack()
# stLabelStatus.grid(row=0,column=0)
stLabelStatuslbl.place(x=20,y=180)

stLabelResultlbl = Label(stGUI,text="Result")
stLabelResultlbl['font'] = arial12
stLabelResultlbl.place(x=20,y=240)

stButtonStart = Button(stGUI,text="Start", command=tests.main_control)
stButtonStart['font'] = arial16
stButtonStart.place(x=180,y=110)

stLabelStatus = Label(stGUI, text="", anchor=CENTER)
stLabelResult = Label(stGUI, text="", anchor=CENTER)
stLabelStatus.place(x=90,y=183)
stLabelResult.place(x=90,y=243)

stGUI.mainloop()
</code></pre>
<p>Even though the GUI was created, I have a couple of issues here:</p>
<ol>
<li>there is a small window titled <code>tk</code> that opens up along with my window titled <code>Testing GUI</code> (See the image below). I remember it was not there when I started out, looks like something that I recently added created it. I can't really understand exactly what though. How can I remove that tiny pest window or at least hide it?</li>
</ol>
<p><a href="https://i.stack.imgur.com/3jh5w.png" rel="nofollow noreferrer"><img alt="Windows" src="https://i.stack.imgur.com/3jh5w.png"/></a></p>
<ol start="2">
<li>I'm unable to update the Status label at runtime even though I've inserted <code>stLabelStatus['text']="Running ProcA...."</code> and similar statements as required in the flow. All that I can see is the very last line in the flow (<code>procF</code> is the last called function) <code>stLabelStatus['text']="Running ProcF...."</code>.</li>
</ol>
<p>How can I update the status during runtime as per my requirement? I'm sure its possible and some logical mistake I'm doing.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry, I missed that command refers correctly to the <code>tests</code> object (of your custom class).</p>
<p>But this</p>
<pre><code>#!python3

from tkinter import *

class main_fun():
    def main_c():
        print("main_c")
        print(stLabelStatus)
        stLabelStatus['text']="Status updated...."

tests=main_fun()

stGUI = Tk()
stGUI.geometry("450x300+50+50")
stGUI.resizable(0,0)
stGUI.title("Testing GUI")

stButtonStart = Button(stGUI,text="Start", command=tests.main_c)
stButtonStart.place(x=180,y=100)

stLabelStatus = Label(stGUI, text="", anchor=CENTER)
stLabelStatus.place(x=90,y=183)

stGUI.mainloop()
</code></pre>
<p>gives this output:</p>
<pre><code>Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Python35\lib\tkinter\__init__.py", line 1550, in __call__
    return self.func(*args)
TypeError: main_c() takes 0 positional arguments but 1 was given
</code></pre>
<p>which states an exact problem and probably would yield the answer in web search results.</p>
<p>But taking the hint at arguments, one will notice the class definition and its only method. You'd look at the <a href="https://docs.python.org/3/tutorial/classes.html#class-definition-syntax" rel="nofollow noreferrer">Python documentation or tutorial on classes</a> and notice that you're doing it wrong:</p>
<p><code>class</code> does not have parameters, but the method must have at least one (<code>self</code>):</p>
<pre><code>class main_fun:
    def main_c(self):
        print("main_c")
        print(stLabelStatus)
        stLabelStatus['text']="Status updated...."
</code></pre>
<p>Success!</p>
<hr/>
<p>Tested with a fresh Python 2.7.13:</p>
<pre><code>#!python2
#coding=utf-8
from Tkinter import *

def my_method():
    stLabelStatus['text']="Status updated...."

stGUI = Tk()

stButtonStart = Button(
    stGUI,
    text="Start",
    command=my_method
    )
stButtonStart.place(x=0, y=0)

stLabelStatus = Label(stGUI)
stLabelStatus.place(x=0, y=30)

stGUI.mainloop()
</code></pre>
</div>
<span class="comment-copy">1. "I remember it was not there" - what stops you from finding the cause by going back and testing? 2. does the function excute at all? check the reference in <code>command=</code> - is that supposed to be like that?</span>
<span class="comment-copy">Please provide a <a href="http://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. The code you posted does not run, and will not create two windows if we comment out the non-code portions. Also, unless the fonts contribute to the problem, they  aren't necessary in the example.</span>
<span class="comment-copy">@handle, I meant when I started out with just the window layout and the placement of the controls/widgets, only the window titled <code>Testing GUI</code> was there. The <code>tk</code> window appeared after I added <code>command=</code> to the button.</span>
<span class="comment-copy">This confirms what I wrote: the question is what is wrong with <code>command</code>, isn't it? Show some effort.</span>
<span class="comment-copy">@handle, I too understand that. But what I don't understand is how will that make a separate window. I created an object, made an instance of it and called a function in <code>command=</code>. This is fairly straight and doesn't look wrong to me (I'm a total noob in tkinter) as far as my limited knowledge is concerned.</span>
<span class="comment-copy">Sorry, that was a typo. I've updated the program which can be executed. I still face the same issues.</span>
