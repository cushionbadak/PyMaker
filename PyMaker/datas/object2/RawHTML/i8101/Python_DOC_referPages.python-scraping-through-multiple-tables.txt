<div class="post-text" itemprop="text">
<pre><code>url="https://technet.microsoft.com/enus/library/hh135098(v=exchg.150).aspx"
r = requests.get(url)
soup = BeautifulSoup(r.content, 'lxml')
table = soup.find_all('table', attrs={"responsive": "true"})[0]
for rows in table.find_all('tr')[1:2]:
    item = []
     for val in rows.find_all('td'):
        item.append(val.text.strip())`
</code></pre>
<p>I am attempting to loop this through 4 different tables on the same website but I can't figure out how to write the loop. I have done research on it and can't seem to find out what to do</p>
<p>The 4 tables are at the locations 0, 1, 2 and 6. I have tried slicing the data to include them, but nothing seems to want to work</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find all tables matching your filtering criteria, use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> to get the indexes and "filter out" tables at undesired indexes:</p>
<pre><code>desired_indexes = {0, 1, 2, 6}
tables = soup.find_all('table', attrs={"responsive": "true"})
for index, table in enumerate(tables):
    if index not in desired_indexes:
        continue

    # do something with table
</code></pre>
<p>In general, though, relying on the occurrence index of an element on a page does not sound like a reliable technique to locate an element on a page.  </p>
</div>
<span class="comment-copy">Thankfully these indexes do not change, and these scripts only run once a month, they are low-priority. They just have to work. This worked perfectly, thank you</span>
