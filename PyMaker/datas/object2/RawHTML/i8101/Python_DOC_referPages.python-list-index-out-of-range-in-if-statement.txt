<div class="post-text" itemprop="text">
<p>I have a list that usually contains items but is sometimes empty.</p>
<p>Three items from the list are added to the database but I run into errors if it's empty, even though I'm using an <code>if</code> statement.</p>
<pre><code>if item_list[0]:
    one = item_list[0]
else:
    one = "Unknown"

if item_list[1]:
    two = item_list[1]
else:
    two = "Unknown"

if item_list[2]:
    three = item_list[2]
else:
    three = "Unknown"
</code></pre>
<p>This still raises the <code>list index out of range</code> error if the list is empty. I can't find any other ways in which it could be done, but there must be a better way (I've also read that you should avoid using <code>else</code> statements?)</p>
</div>
<div class="post-text" itemprop="text">
<p>If a list is empty, the list has no index; and trying to access an index of the list causes an error.</p>
<p>The error actually occurs in the if statement.</p>
<p>you could obtain the result you expect by doing this:</p>
<pre><code>one, two, three = item_list + ["unknown"] * (3 - len(item_list))
</code></pre>
<p>This line of code creates a temporary list consisting in the concatenation of <code>item_list</code> and a list of (3 minus the size of <code>item_list</code>) "unknown" strings; which is always a 3-items list. It then <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">unpacks</a> this list in the <code>one</code>, <code>two</code> and <code>three</code> variables</p>
<hr/>
<p>details:</p>
<ul>
<li>You can multiply a list to obtain a bigger list with duplicate items: <code>['a', 1, None] * 2</code> gives <code>['a', 1, None, 'a', 1, None]</code>. This is used to create a list of "unknow" strings. Note that multiplying a list by 0 results in an empty list (as expected).</li>
<li>You can use the addition operator to concatenate 2 (or more) lists: <code>['a', 'b'] + [1, 2]</code> gives <code>['a', 'b', 1, 2]</code>. This is used to create a 3-items list from <code>item_list</code> and the 'unknown' list created by multiplication.</li>
<li>You can <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">unpack</a> a list in several variable with the assignation operator: <code>a, b = [1, 2]</code> gives <code>a = 1 and b = 2</code>. It it even possible to use extended unpacking <code>a, *b = [1, 2, 3]</code> gives <code>a = 1 and b = [2, 3]</code>.</li>
</ul>
<hr/>
<p>example:</p>
<pre><code>&gt;&gt;&gt; item_list = [42, 77]
&gt;&gt;&gt; one, two, three = item_list + ["unknown"] * (3 - len(item_list))
&gt;&gt;&gt; one, two, three
(42, 77, 'unknown')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python will throw this error if you try to access an element of an array that doesn't exist. So an empty array won't have index 0.</p>
<pre><code>if item_list:     # an empty list will be evaluated as False
    one = item_list[0]
else:
    one = "Unknown"

if 1 &lt; len(item_list):
    two = item_list[1]
else:
    two = "Unknown"

if 2 &lt; len(item_list):
    three = item_list[2] 
else:
   three = "Unknown"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>item_list[1]</code> will immediately raise an error if there aren't 2 elements in the list; the behavior isn't like that of languages like Clojure, where a null value is instead returned. </p>
<p>Use <code>len(item_list) &gt; 1</code> instead. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to check if your list is long enough to have a value in the index position you are trying to retrieve from. If you are also trying to avoid using <code>else</code> in your condition statement, you can pre-assign your variables with default values.</p>
<pre class="lang-python prettyprint-override"><code>count = len(item_list)
one, two, three = "Unknown", "Unknown", "Unknown"
if count &gt; 0:
    one = item_list[0]
if count &gt; 1:
    two = item_list[1]
if count &gt; 2:
    three = item_list[2]
</code></pre>
</div>
<span class="comment-copy">I'd love to know where you read that you should not use <code>else</code> statements. Can you provide a source for that?</span>
<span class="comment-copy">@AustinHastings There was no singular source, just passing comments about it being bad practice.</span>
<span class="comment-copy">Perfect, thank you! Do you have any resources where I could learn about the in-line/compressed style (i.e. <code>one, two, three = item_list + ["unknown"] * (3 - len(item_list))</code>). I'm not too sure what you'd call it</span>
<span class="comment-copy">@Sen: I just added details about the used mechanisms but cannot find doc for each. I do not know any resource teaching to write compact code. Keep in mind that compact code is not always a good thing, especially if it make the code difficult to understand. You may want to look at the <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">official Python tutorial</a> if you want to learn more useful "tricks" about the language</span>
<span class="comment-copy">Thanks for the super valuable info! I've done the tutorial but I'm still learning :) Sorry if I'm asking to much, but is it possible to use the above (<code>one, two, three = item_list + ["unknown"] * (3 - len(item_list))</code>) for lists(?) within lists (so <code>item_list = [("Get this string", 23), ("Get this string too", 52)]</code>. If I use <code>one, two, three = item_list + ["unknown"] * (3 - len(item_list))</code> in this case it returns <code>one = ("Get this string", 23)</code> instead of <code>one = "Get this string"</code></span>
<span class="comment-copy">@Sen: <code>(str_1, int_1), (str_2, int_2) = item_list</code></span>
