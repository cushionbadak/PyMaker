<div class="post-text" itemprop="text">
<p>I have some imported functions <code>from package import fizz, buzz</code> and I want to map them to a variable <code>func</code> from a string arg.</p>
<pre><code>class Whatever(object):
    def __init__(self, func_name='fizz'):
        try:
            self.func = vars()[func_name]
        except KeyError:
            print "Bad func_name"
            raise
</code></pre>
<p>But <code>vars()</code> only captures the local namespace, and I don't want to allow access to <code>globals()</code>. Any ideas? Or should I just go with if-else logic?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a white list... or in this case, a "white dict"</p>
<pre><code>class Whatever(object):

    allowed = { 'fizz':fizz, 'buzz':buz }

    def __init__(self, func_name='fizz'):
        try:
            self.func = self.allowed[func_name]
        except KeyError:
            print "Bad func_name"
            raise
</code></pre>
</div>
<span class="comment-copy">This might be what you're looking for: <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#exec</a></span>
<span class="comment-copy">Why don't you pass the function <i>directly</i> to the initializer: <code>def __init__(self, func=fizz)</code></span>
<span class="comment-copy">But basically, if you want to access some global name outside the global scope using a string, then you sort of <i>have</i> to use <code>globals</code>, or even worse, something like <code>exec</code> or <code>eval</code>.</span>
<span class="comment-copy">Thank you, I'll check out <code>exec</code> and <code>eval</code>. Also thinking I could just create a class attr dict that maps the strings to the imported functions.</span>
<span class="comment-copy">@juanpa.arrivillaga I'm not passing the function directly b/c I don't have the caller import the functions, but rather they are imported where the class is defined. Are you suggesting this is bad (or nonpythonic)?</span>
<span class="comment-copy">Thanks, this is what I mentioned in the comments above as a decent alternative.</span>
