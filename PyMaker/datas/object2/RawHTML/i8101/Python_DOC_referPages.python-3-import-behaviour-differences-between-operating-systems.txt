<div class="post-text" itemprop="text">
<p>I'm probably in need of some major sleep, but this is making it hard for me to even consider it.</p>
<p>I have the following structure in 2 separate machines:</p>
<pre><code>.
├── testmod
│   ├── __init__.py
│   └── test.py
└── testmod2
    ├── __init__.py
    └── hello.py
</code></pre>
<p>The machines in question are:</p>
<ul>
<li>CentOS (Linux release 7.2.1511)</li>
<li>macOS Sierra (10.12.4)</li>
</ul>
<p>I'm most definitely running Python 3.6 on both machines:</p>
<blockquote>
<p>Python 3.6.1 (default, Apr  7 2017, 09:32:32) [GCC 4.8.5 20150623 (Red
  Hat 4.8.5-11)] on linux</p>
<p>Python 3.6.1 (v3.6.1:69c0db5050, Mar 21 2017, 01:21:04) [GCC 4.2.1
  (Apple Inc. build 5666) (dot 3)] on darwin</p>
</blockquote>
<p>The only file with content is test.py:</p>
<pre><code>from testmod2 import hello

print(hello)
</code></pre>
<p>From the root dir (where testmod and testmod2 coexist), I'm running the following command:</p>
<pre><code>python3.6 testmod/test.py
</code></pre>
<p>macOS output:</p>
<pre><code>&lt;module 'testmod2.hello' from '/Users/joao/Documents/tests/testmod2/hello.py'&gt;
</code></pre>
<p>Centos output:</p>
<pre><code>Traceback (most recent call last):
  File "testmod/test.py", line 1, in &lt;module&gt;
    from testmod2 import hello
ModuleNotFoundError: No module named 'testmod2'
</code></pre>
<p>I'm stumped. What have I obviously missed here?</p>
</div>
<div class="post-text" itemprop="text">
<p>I see that on Centos the script dir is not prepended to your sys.path. On my Ubuntu box it is prepended and everything works. I found the following doc on the topic: <a href="https://docs.python.org/3/whatsnew/3.4.html#changes-in-python-command-behavior" rel="nofollow noreferrer">The python command has a new option, -I, which causes it to run in “isolated mode”, which means that sys.path contains neither the script’s directory...</a></p>
<p>Maybe you need to check what options are used when python runs by default.</p>
</div>
<div class="post-text" itemprop="text">
<p>For anyone else wondering, my $PYTHONPATH was not set at all in CentOS. I suspect others might run into the same issue, so a solution <em>could</em> be:</p>
<pre><code>export PYTHONPATH="."
</code></pre>
<p>Although this will work, it's not really recommended to add a relative path to $PYTHONPATH - It's probably wiser to add the absolute path where your code resides:</p>
<pre><code>export PYTHONPATH="/your/python/code"
</code></pre>
<p>(a more permanent solution is of course to add the above to your <strong>~/.bashrc</strong> or similar)</p>
</div>
<span class="comment-copy">Is root in the PATH on one machine but not the other?</span>
<span class="comment-copy">@LukasGraf, apologies, that has been corrected - it was just a typo</span>
<span class="comment-copy">Add the output of <code>python3.6 -m site</code> on both machines.</span>
<span class="comment-copy">@joaodlf: the <code>python3.6 -m site</code> test will auto-add the current working directory to the path, always, regardless of wether or not it is already stated in <code>PYTHONPATH</code>. Can you cd to a different directory first, <i>then</i> run it? Or show <code>echo $PYTHONPATH</code>.</span>
<span class="comment-copy">Put differently: I'm 99.9% certain you have <code>/Users/joao/Documents/tests</code> on your <code>PYTHONPATH</code> on OS X, but do not have <code>/var/tests</code> in your <code>PYTHONPATH</code> on CentOS.</span>
<span class="comment-copy">Right, so PYTHONPATH was not set at all first, then set to <code>:/nonsense</code>. It is the <i>empty path</i> before the colon that is the active element here, having the same meaning as <code>pwd</code>.  That's because it is seen as a relative path and made absolute by adding it to the current working directory.</span>
<span class="comment-copy">Using <code>export PYTHONPATH=""</code> should do the same. Or more explicitly: <code>export PYTHONPATH="."</code></span>
<span class="comment-copy">Thank you Martijn! That makes a lot more sense now. I have edited the answer.</span>
<span class="comment-copy">Note that it is still a bad idea to add a relative path to a global <code>PYTHONPATH</code>. You can trivially break a Python program merely by being in the wrong direction, and having a module name there that masks a dependency. Try to run <code>pip</code> when you are in a directory with a <code>requests.py</code> module, for example.</span>
<span class="comment-copy">Is there an easy way to circumvent these issues? I would prefer not having to edit the $PYTHONPATH every time I create a new code directory. This isn't the case in osx, either.</span>
