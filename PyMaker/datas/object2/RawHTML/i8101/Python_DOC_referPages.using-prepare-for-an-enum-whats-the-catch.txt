<div class="post-text" itemprop="text">
<p>Declarative usage of Python's <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum.Enum</code></a> requires values to be provided, when in the most basic use case for an enum we don't actually care about names and values.  We only care about the sentinels themselves.  After reading a <a href="https://stackoverflow.com/q/43821562/674039">related Q&amp;A</a> recently, I realised it is possible to use the <a href="https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace" rel="nofollow noreferrer"><code>__prepare__</code></a> method of the enum's metaclass to get this kind of declaration:</p>
<pre><code>class Color(Enum):
    red
    blue
    green
</code></pre>
<p>And the implementation to make things so dry is actually fairly easy:  </p>
<pre><code>from collections import defaultdict

class EnumMeta(type):
    @classmethod
    def __prepare__(meta, name, bases):
        return defaultdict(object)

    def __new__(cls, name, bases, classdict):
        classdict.default_factory = None
        return type.__new__(cls, name, bases, classdict)

class Enum(metaclass=EnumMeta):
    pass
</code></pre>
<p>In Python 3.6, there was provided <a href="https://docs.python.org/3/library/enum.html#using-auto" rel="nofollow noreferrer"><code>enum.auto</code></a> to help with that issue of <a href="https://docs.python.org/3/library/enum.html#omitting-values" rel="nofollow noreferrer">omitting values</a>, but the interface is still strange - you're required to specify the <code>auto()</code> value for each member, and inherit from a different base which fixes up the <code>__repr__</code>:  </p>
<pre><code>class Color(NoValue):
    red = auto()
    blue = auto()
    green = auto()
</code></pre>
<p>Knowing that many man-hours and great care has gone into the implementation chosen for the standard library, there must be some reason why the arguably more Pythonic version of a declarative enum demonstrated earlier doesn't work properly.  </p>
<p>My question is, what are the problems and failure modes of the proposed approach, and why was this (or something similar) decided against - with the <code>auto</code> feature being included in Python 3.6 instead?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are several pitfalls to having a <code>defaultdict</code> be the Enum's namespace:</p>
<ul>
<li>unable to access anything but other enum members/methods</li>
<li>typos create new members</li>
<li>lose protections form <code>_EnumDict</code> namespace:

<ul>
<li>overwriting members</li>
<li>overwriting methods</li>
<li>the newer <code>_generate</code> method</li>
</ul></li>
</ul>
<p>And the most important:</p>
<ul>
<li>it will not work</li>
</ul>
<p>Why won't it work?  Not only can <code>__prepare__</code> set attributes on the namespace dict, so can the namespace dict itself -- and <code>_EnumDict</code> does: <code>_member_names</code>, a list of all the attributes that should be members.</p>
<p>However, the goal of declaring a name without a value is not impossible -- the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a><sup>1</sup> package allows it with a few safeguards:</p>
<ul>
<li>magic auto behavior is only present while defining members (as soon as a normal method is defined it turns off)</li>
<li><code>property</code>, <code>classmethod</code>, and <code>staticmethod</code> are excluded by default, but one can include them and/or exclude other global names</li>
</ul>
<p>This behavior was deemed too magical for the stdlib, though, so if you want it, along with some other enhancements/improvements<sup>2</sup>, you'll have to use <code>aenum</code>.</p>
<p>An example:</p>
<pre><code>from aenum import AutoEnum

class Color(AutoEnum):
    red
    green
    blue
</code></pre>
<p>The <code>__repr__</code> still shows the created values, though.</p>
<p>--</p>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
<p><sup>2</sup> <code>NamedConstant</code> (just like it says ;), <code>NamedTuple</code> (metaclass based, default values, etc.), plus some built-in Enums:</p>
<ul>
<li><code>MultiValueEnum</code>  --&gt; several values can map to one name (not aliases)</li>
<li><code>NoAliasEnum</code> --&gt; names with the same value are not aliases (think playing cards)</li>
<li><code>OrderedEnum</code> --&gt; members are order-comparable by definition</li>
<li><code>UniqueEnum</code> --&gt; no aliases allowed</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You may be interested that you can create enums using multiple arguments:</p>
<pre><code>from enum import Enum

class NoValue(Enum):
    def __repr__(self):
        return '&lt;%s.%s&gt;' % (self.__class__.__name__, self.name)

Color = NoValue('Color', ['red', 'green', 'blue'])  # no need for "auto()" calls
</code></pre>
<p>That way you don't have to use <code>auto</code> or anything else (like <code>__prepare__</code>).</p>
<hr/>
<blockquote>
<p>why was this (or something similar) decided against - with the auto feature being included in Python 3.6 instead?</p>
</blockquote>
<p>This has been discussed at length on the Python issue tracker (especially <a href="https://bugs.python.org/issue23591" rel="nofollow noreferrer">bpo-23591</a>) and I'll include the (summarized) arguments against it:</p>
<p><a href="https://bugs.python.org/msg274875" rel="nofollow noreferrer">Vedran Čačić</a>:</p>
<blockquote>
<p>This is something fundamental: it is breaking the promise that class body is a suite of commands, where Python statements (such as assignment) have their usual semantics.</p>
</blockquote>
<p><a href="https://bugs.python.org/msg274876" rel="nofollow noreferrer">Raymond Hettinger</a>:</p>
<blockquote>
<p>As long as [auto] has been defined somewhere (i.e. from enum import [auto]), it is normal Python and doesn't fight with the rest of language or its toolchains.</p>
</blockquote>
<p>In short: class definitions interpret these "variables" as lookups:</p>
<pre><code>class A(object):
    a
</code></pre>
<p>but for <code>enum</code> they should be interpreted as assignments? That use-case simply wasn't considered <a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="nofollow noreferrer">"special enough to break the rules"</a>.</p>
</div>
<span class="comment-copy">Interesting, thanks!  I've just had a brief glance at <code>AutoEnum</code> implementation but it got deep pretty quickly with the <code>_generate_next_value_</code> stuff.  Is it fair to say the metaclass uses the same basic trick as described in my question, or is it a completely different implementation?</span>
<span class="comment-copy">@wim: Similar: <code>defaultdict</code> uses a <code>__missing__</code> method, while <code>_EnumDict</code> catches the <code>__getitem__</code> lookup and handles it from there.</span>
<span class="comment-copy">@wim:  A bunch of the complexity in <code>aenum</code> is supporting the Python 2.x series.  I opened the stdlib version of <code>Enum</code> a couple days ago and it was like a breath of fresh air!</span>
<span class="comment-copy">Hm, not a single reference to <code>aenum</code> in the docs. It seems like a good reference to have there for users who might wish for something a bit more magical.</span>
<span class="comment-copy">@JimFasarakisHilliard:  The Python docs are not in the habit of referring to outside projects (I believe there are only a couple exceptions).  Maybe the wiki, though...</span>
<span class="comment-copy">Yeah, I'm aware of the functional interface (and I don't like it)... that's actually why the question starts like: "<i>Declarative</i> usage of Python's enum...".  +1  for the links to the relevant discussion, though</span>
