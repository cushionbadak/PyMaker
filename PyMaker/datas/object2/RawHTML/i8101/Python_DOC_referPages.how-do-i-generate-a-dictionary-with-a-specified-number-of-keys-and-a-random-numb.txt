<div class="post-text" itemprop="text">
<p>Say I specified the number of keys to be 5 (so that the keys are 0,1,2,3, and 4 etc.) and I wanted the number of values to be random per key, where each value is 0,1,2,3, or 4, with no repeated values in each key. I am trying to make a <strong>Random Complete Graph</strong> if that means anything to you. Ex of output:</p>
<pre><code>dict = { "0": ["3"],
         "1": ["4"],
         "2": ["3","4"],
         "3": ["0","2"],
         "4": ["1","2"]
       }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random

number_of_nodes = 5
graph = dict()

for i in range(number_of_nodes):
    graph[i] = random.sample(range(0, number_of_nodes), random.randint(0, number_of_nodes))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try creating the dictionary from two lists, <code>keys</code>, which are your integers from 0 to 4, and <code>values</code>, which are random picks <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>(random.choice(seq))</code></a> from a list containing every possible combination(of any length) of your <code>numbers</code>, and that's exactly what the initials <code>for</code> loops are there(<a href="https://stackoverflow.com/a/5898031/5103802">check this answer</a>). Notice the final dictionary's values are tuples, it's not hard to output them the way you need changing the code from here on. Also notice that since we already are importing <code>itertools</code> the construction of the dictionary can be coded using <code>dict(itertools.izip(keys,values))</code>, and that seems to be a more economical approach in a big lists scenario.</p>
<pre><code>import random
import itertools

n = 5
keys = range(n)
numbers = [0,1,2,3,4] #or simply numbers = range(n), if that's what you need
values = []
possibleValues = []

for L in range(0, len(numbers)+1):
  for subset in itertools.combinations(numbers, L):
    possibleValues.append(subset)

for i in range(len(numbers)):
    values.append(random.choice(possibleValues))

dictionary = dict(zip(keys, values))
</code></pre>
</div>
<span class="comment-copy">Try writing some code.  That should do it.</span>
<span class="comment-copy">look for  <code>random.sample</code> for no repeated values</span>
<span class="comment-copy">That's an impressive more efficient way to code than my answer!! Thanks for sharing</span>
<span class="comment-copy">Thank you very much, that is straight forward</span>
