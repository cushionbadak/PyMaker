<div class="post-text" itemprop="text">
<p>Normally, to subclass a class I do something like</p>
<pre><code>class Subby(Parenty):
    def __init__(self):
        Parenty.__init__(self)
</code></pre>
<p>But now I'm trying to subclass a metaclass, specifically ABCMeta, so I'm doing</p>
<pre><code>import ABCMeta

class Subby(ABCMeta):
    def __init__(self):
       ABCMeta.__init__(self) #this never seems to run

    def __new__(mcls, name, bases, namespace):
        cls = ABCMeta.__new__(mcls, name, bases, namespace)
        return cls
</code></pre>
<p>But, when I then try to subclass <code>Subby</code> as a metaclass like</p>
<pre><code>class newClass(metaclass=Subby):
    pass
</code></pre>
<p>I get the error <code>TypeError: __init__() takes 1 positional argument but 4 were given</code>.</p>
<p>Why is this, and how do I subclass ABCMeta correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the datamodel:</p>
<blockquote>
<p>If <code>__new__()</code> returns an instance of <code>cls</code>, then the new instanceâ€™s <code>__init__()</code> method will be invoked like <code>__init__(self[, ...])</code>, where self is the new instance and the remaining arguments are the same as were passed to <code>__new__()</code>.</p>
</blockquote>
<p>So, as @user2357112 said, <em>the signatures must match</em>. </p>
<p>Despite this, there's really no reason to define <code>__init__</code> and <code>__new__</code> if you simply want to create an ABC. Just create it and use <code>.register</code> to register the conforming classes. Optionally, create a number of abstract methods and a <code>__subclasshook__</code> that checks for conformance. A good example already exists in the <a href="https://docs.python.org/3/library/abc.html#module-abc" rel="nofollow noreferrer"><code>abc</code> module documentation</a>.</p>
</div>
<span class="comment-copy"><code>__init__</code> needs to take the same arguments <code>__new__</code> does.</span>
<span class="comment-copy">Can you instantiate <code>Subby</code> on its own?</span>
<span class="comment-copy"><code>ABCMeta</code> is the <code>abc.ABCMeta</code> class or another one defined in another module?</span>
<span class="comment-copy">For cheer coincidence, I've just written an answer where I actually <i>did</i> subclass ABCMeta, for a purpose. (I had not seen this question before). I may be a nice example for this question  - <a href="http://stackoverflow.com/a/43884960/108205">stackoverflow.com/a/43884960/108205</a></span>
