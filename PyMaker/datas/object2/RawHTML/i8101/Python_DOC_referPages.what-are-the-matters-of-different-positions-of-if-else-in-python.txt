<div class="post-text" itemprop="text">
<p>I understand how this construct works:</p>
<pre class="lang-py prettyprint-override"><code>for i in range(10):
    print(i)

    if i == 9:
        print("Too big - I'm giving up!")
        break;
else:
    print("Completed successfully")
</code></pre>
<p>But I don't understand why <code>else</code> is used as the keyword here, since it suggests the code in question only runs if the <code>for</code> block does not complete, which is the opposite of what it does! No matter how I think about it, my brain can't progress seamlessly from the <code>for</code> statement to the <code>else</code> block. To me, <code>continue</code> or <code>continuewith</code> would make more sense (and I'm trying to train myself to read it as such).</p>
<p>I'm wondering how Python coders read this construct in their head (or aloud, if you like). Perhaps I'm missing something that would make such code blocks more easily decipherable?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a strange construct even to seasoned Python coders. When used in conjunction with for-loops it basically means "find some item in the iterable, else if none was found do ...". As in:</p>
<pre><code>found_obj = None
for obj in objects:
    if obj.key == search_key:
        found_obj = obj
        break
else:
    print('No object found.')
</code></pre>
<p>But anytime you see this construct, a better alternative is to either encapsulate the search in a function:</p>
<pre><code>def find_obj(search_key):
    for obj in objects:
        if obj.key == search_key:
            return obj
</code></pre>
<p>Or use a list comprehension:</p>
<pre><code>matching_objs = [o for o in objects if o.key == search_key]
if matching_objs:
    print('Found {}'.format(matching_objs[0]))
else:
    print('No object found.')
</code></pre>
<p>It is not semantically equivalent to the other two versions, but works good enough in non-performance critical code where it doesn't matter whether you iterate the whole list or not. Others may disagree, but I personally would avoid ever using the for-else or while-else blocks in production code. </p>
<p>See also <a href="http://mail.python.org/pipermail/python-ideas/2009-October/006155.html" rel="noreferrer">[Python-ideas] Summary of for...else threads</a></p>
</div>
<div class="post-text" itemprop="text">
<p>A common construct is to run a loop until something is found and then to break out of the loop. The problem is that if I break out of the loop or the loop ends I need to determine which case happened. One method is to create a flag or store variable that will let me do a second test to see how the loop was exited.</p>
<p>For example assume that I need to search through a list and process each item until a flag item is found and then stop processing. If the flag item is missing then an exception needs to be raised.</p>
<p>Using the Python <code>for</code>...<code>else</code> construct you have</p>
<pre><code>for i in mylist:
    if i == theflag:
        break
    process(i)
else:
    raise ValueError("List argument missing terminal flag.")
</code></pre>
<p>Compare this to a method that does not use this syntactic sugar:</p>
<pre><code>flagfound = False
for i in mylist:
    if i == theflag:
        flagfound = True
        break
    process(i)

if not flagfound:
    raise ValueError("List argument missing terminal flag.")
</code></pre>
<p>In the first case the <code>raise</code> is bound tightly to the for loop it works with. In the second the binding is not as strong and errors may be introduced during maintenance.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's an excellent presentation by Raymond Hettinger, titled <a href="https://www.youtube.com/watch?v=OSGv2VnC0go" rel="noreferrer"><em>Transforming Code into Beautiful, Idiomatic Python</em></a>, in which he briefly addresses the history of the <code>for ... else</code> construct. The relevant section is "Distinguishing multiple exit points in loops" <a href="https://youtu.be/OSGv2VnC0go?t=950" rel="noreferrer">starting at 15:50</a> and continuing for about three minutes. Here are the high points:</p>
<ul>
<li>The <code>for ... else</code> construct was devised by Donald Knuth as a replacement for certain <code>GOTO</code> use cases;</li>
<li>Reusing the <code>else</code> keyword made sense because "it's what Knuth used, and people knew, at that time, all [<code>for</code> statements] had embedded an <code>if</code> and <code>GOTO</code> underneath, and they expected the <code>else</code>;"</li>
<li>In hindsight, it should have been called "no break" (or possibly "nobreak"), and then it wouldn't be confusing.*</li>
</ul>
<p>So, if the question is, "Why don't they change this keyword?" then <a href="https://stackoverflow.com/a/9979985/2359271">Cat Plus Plus probably gave the most accurate answer</a> â€“ at this point, it would be too destructive to existing code to be practical. But if the question you're really asking is why <code>else</code> was reused in the first place, well, apparently it seemed like a good idea at the time.</p>
<p>Personally, I like the compromise of commenting <code># no break</code> in-line wherever the <code>else</code> could be mistaken, at a glance, as belonging inside the loop. It's reasonably clear and concise. This option gets a brief mention in <a href="https://mail.python.org/pipermail/python-ideas/2009-October/006155.html" rel="noreferrer">the summary that Bjorn linked</a> at the end of his answer:</p>
<blockquote>
<p>For completeness, I should mention that with a slight change in
  syntax, programmers who want this syntax can have it right now:</p>
<pre><code>for item in sequence:
    process(item)
else:  # no break
    suite
</code></pre>
</blockquote>
<hr/>
<p><sub>* Bonus quote from that part of the video: "Just like if we called lambda <em>makefunction,</em> nobody would ask, 'What does lambda do?'"</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Because they didn't want to introduce a new keyword to the language. Each one steals an identifier and causes backwards compatibility problems, so it's usually a last resort.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way I found to 'get' what the for/else did, and more importantly, when to use it, was to concentrate on where the break statement jumps to. The For/else construct is a single block. The break jumps out of the block, and so jumps 'over' the else clause. If the contents of the else clause simply followed the for clause, it would never be jumped over, and so the equivalent logic would have to be provided by putting it in an if. This has been said before, but not quite in these words, so it may help somebody else. Try running the following code fragment. I'm wholeheartedly in favour of the 'no break' comment for clarity.</p>
<pre><code>for a in range(3):
    print(a)
    if a==4: # change value to force break or not
        break
else: #no break  +10 for whoever thought of this decoration
    print('for completed OK')

print('statement after for loop')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I read it something like:</p>
<p>If still on the conditions to run the loop, do stuff, <em>else</em> do something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think documentation has a great explanation of  <em>else</em>, <em>continue</em></p>
<blockquote>
<p>[...] it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement."</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/2/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="noreferrer">Python 2 docs: Tutorial on control flow</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To make it simple, you can think of it like that;</p>
<ul>
<li>If it encounters the <code>break</code> command in the <code>for</code> loop, the <code>else</code> part will not be called.</li>
<li>If it does not encounter the <code>break</code> command in the <code>for</code> loop, the <code>else</code> part will be called.</li>
</ul>
<p>In other words, if for loop iteration is not "broken" with <code>break</code>, the <code>else</code> part will be called.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since the technical part has been pretty much answered, my comment is just in relation with the <strong>confusion</strong> that produce this <em>recycled</em> keyword.</p>
<p>Being Python a very <em>eloquent</em> programming language, the misuse of a keyword is more notorious. The <code>else</code> keyword perfectly describes  part of the flow of a decision tree, "if you can't do this, (else) do that". It's <em>implied</em> in our own language.</p>
<p>Instead, using this keyword with <code>while</code> and <code>for</code> statements creates confusion. The reason, our career as programmers has taught us that the <code>else</code> statement resides within a decision tree; its <strong>logical scope</strong>, a wrapper that <em>conditionally</em> return a path to follow. Meanwhile, loop statements have a figurative explicit goal to reach something. The goal is met after continuous iterations of a process. </p>
<p><code>if / else</code> <em>indicate a path to follow</em>. Loops <em>follow a path until the "goal" is completed</em>.</p>
<p>The issue is that <code>else</code> is a word that clearly define the last option in a condition. The <strong>semantics</strong> of the word are both <em>shared</em> by Python and Human Language. But the else word in Human Language is never used to indicate the actions someone or something will take after something is completed. It will be used if, in the process of completing it, an issue rises (more like a <em>break</em> statement).</p>
<p>At the end, the keyword will remain in Python. It's clear it was mistake, clearer when every programmer tries to come up with a story to understand its usage like some mnemonic device. I'd have loved if they have chosen instead the keyword <code>then</code>. I believe that this keyword fits perfectly in that iterative flow, the <em>payoff</em> after the loop.</p>
<p>It resembles that situation that some child has after following every step in assembling a toy: And <strong>THEN</strong> what Dad?</p>
</div>
<div class="post-text" itemprop="text">
<p>I read it like "When the <code>iterable</code> is exhausted completely, and the execution is about to proceed to the next statement after finishing the <code>for</code>, the else clause will be executed." Thus, when the iteration is broken by <code>break</code>, this will not be executed.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>I agree, it's more like an 'elif not [condition(s) raising break]'.</strong></p>
<p>I know this is an old thread, but I am looking into the same question right now,  and I'm not sure anyone has captured the answer to this question in the way I understand it.</p>
<p>For me, there are three ways of "reading" the <code>else</code> in <code>For... else</code> or <code>While... else</code> statements, all of which are equivalent, are:</p>
<ol>
<li><code>else</code> <code>==</code> <code>if the loop completes normally (without a break or error)</code></li>
<li><code>else</code> <code>==</code> <code>if the loop does not encounter a break</code></li>
<li><code>else</code> <code>==</code> <code>else not (condition raising break)</code> (presumably there is such a condition, or you wouldn't have a loop)</li>
</ol>
<p><strong>So, essentially, the "else" in a loop is really an "elif ..." where '...' is (1) no break, which is equivalent to (2) NOT [condition(s) raising break].</strong></p>
<p>I think the key is that the <code>else</code> is pointless without the 'break', so a <code>for...else</code> includes:</p>
<pre><code>for:
    do stuff
    conditional break # implied by else
else not break:
    do more stuff
</code></pre>
<p>So, essential elements of a <code>for...else</code> loop are as follows, and you would read them in plainer English as:</p>
<pre><code>for:
    do stuff
    condition:
        break
else: # read as "else not break" or "else not condition"
    do more stuff
</code></pre>
<p>As the other posters have said, a break is generally raised when you are able to locate what your loop is looking for, so the <code>else:</code> becomes "what to do if target item not located".</p>
<p><strong>Example</strong></p>
<p>You can also use exception handling, breaks, and for loops all together.</p>
<pre><code>for x in range(0,3):
    print("x: {}".format(x))
    if x == 2:
        try:
            raise AssertionError("ASSERTION ERROR: x is {}".format(x))
        except:
            print(AssertionError("ASSERTION ERROR: x is {}".format(x)))
            break
else:
    print("X loop complete without error")
</code></pre>
<p><em>Result</em></p>
<pre><code>x: 0
x: 1
x: 2
ASSERTION ERROR: x is 2
----------
# loop not completed (hit break), so else didn't run
</code></pre>
<p><strong>Example</strong></p>
<p>Simple example with a break being hit.</p>
<pre><code>for y in range(0,3):
    print("y: {}".format(y))
    if y == 2: # will be executed
        print("BREAK: y is {}\n----------".format(y))
        break
else: # not executed because break is hit
    print("y_loop completed without break----------\n")
</code></pre>
<p><em>Result</em></p>
<pre><code>y: 0
y: 1
y: 2
BREAK: y is 2
----------
# loop not completed (hit break), so else didn't run
</code></pre>
<p><strong>Example</strong></p>
<p>Simple example where there no break, no condition raising a break, and no error are encountered.</p>
<pre><code>for z in range(0,3):
     print("z: {}".format(z))
     if z == 4: # will not be executed
         print("BREAK: z is {}\n".format(y))
         break
     if z == 4: # will not be executed
         raise AssertionError("ASSERTION ERROR: x is {}".format(x))
else:
     print("z_loop complete without break or error\n----------\n")
</code></pre>
<p><em>Result</em></p>
<pre><code>z: 0
z: 1
z: 2
z_loop complete without break or error
----------
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>else</code> keyword can be confusing here, and as many people have pointed out, something like <code>nobreak</code>, <code>notbreak</code> is more appropriate.</p>
<p>In order to understand <code>for ... else ...</code> logically, compare it with <code>try...except...else</code>, not <code>if...else...</code>, most of python programmers are familiar with the following code:</p>
<pre><code>try:
    do_something()
except:
    print("Error happened.") # The try block threw an exception
else:
    print("Everything is find.") # The try block does things just find.
</code></pre>
<p>Similarly, think of <code>break</code> as a special kind of <code>Exception</code>:</p>
<pre><code>for x in iterable:
    do_something(x)
except break:
    pass # Implied by Python's loop semantics
else:
    print('no break encountered')  # No break statement was encountered
</code></pre>
<p>The difference is <code>python</code> implies <code>except break</code> and you can not write it out, so it becomes:</p>
<pre><code>for x in iterable:
    do_something(x)
else:
    print('no break encountered')  # No break statement was encountered
</code></pre>
<p>Yes, I know this comparison can be difficult and tiresome, but it does clarify the confusion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Codes in <code>else</code> statement block will be executed when the <code>for</code> loop was not be broke.</p>
<pre><code>for x in xrange(1,5):
    if x == 5:
        print 'find 5'
        break
else:
    print 'can not find 5!'
#can not find 5!
</code></pre>
<p>From the <a href="https://docs.python.org/3/tutorial/controlflow.html?#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">docs:  break and continue Statements, and else Clauses on Loops</a></p>
<blockquote>
<p>Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement. This is exemplified by the following loop, which searches for prime numbers:</p>
<pre><code>&gt;&gt;&gt; for n in range(2, 10):
...     for x in range(2, n):
...         if n % x == 0:
...             print(n, 'equals', x, '*', n//x)
...             break
...     else:
...         # loop fell through without finding a factor
...         print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
</code></pre>
<p>(Yes, this is the correct code. Look closely: the else clause belongs to the for loop, not the if statement.)</p>
<p>When used with a loop, the else clause has more in common with the else clause of a try statement than it does that of if statements: a try statementâ€™s else clause runs when no exception occurs, and a loopâ€™s else clause runs when no break occurs. For more on the try statement and exceptions, see Handling Exceptions.</p>
<p>The continue statement, also borrowed from C, continues with the next iteration of the loop:</p>
<pre><code>&gt;&gt;&gt; for num in range(2, 10):
...     if num % 2 == 0:
...         print("Found an even number", num)
...         continue
...     print("Found a number", num)
Found an even number 2
Found a number 3
Found an even number 4
Found a number 5
Found an even number 6
Found a number 7
Found an even number 8
Found a number 9
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could think of it like,
<code>else</code> as in the rest of the stuff, or the other stuff, that wasn't done in the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to think about it that I haven't seen anyone else mention above:</p>
<p>First, remember that for-loops are basically just syntactic sugar around while-loops. For example, the loop</p>
<pre><code>for item in sequence:
    do_something(item)
</code></pre>
<p>can be rewritten (approximately) as</p>
<pre><code>item = None
while sequence.hasnext():
    item = sequence.next()
    do_something(item)
</code></pre>
<p>Second, remember that while-loops are basically just repeated if-blocks! You can always read a while-loop as "if this condition is true, execute the body, then come back and check again".</p>
<p>So while/else makes perfect sense: It's the exact same structure as if/else, with the added functionality of looping until the condition becomes false instead of just checking the condition once.</p>
<p>And then for/else makes perfect sense too: because all for-loops are just syntactic sugar on top of while-loops, you just need to figure out what the underlying while-loop's implicit conditional is, and then the else corresponds to when that condition becomes False.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another idiomatic use case besides searching. Let's say you wanted to wait for a condition to be true, e.g. a port to be open on a remote server, along with some timeout. Then you could utilize a <code>while...else</code> construct like so:</p>
<pre><code>import socket
import time

sock = socket.socket()
timeout = time.time() + 15
while time.time() &lt; timeout:
    if sock.connect_ex(('127.0.0.1', 80)) is 0:
        print('Port is open now!')
        break
    print('Still waiting...')
else:
    raise TimeoutError()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(3):
    print(i)

    if i == 2:
        print("Too big - I'm giving up!")
        break;
else:
    print("Completed successfully")
</code></pre>
<p>"else" here is crazily simple, just mean   </p>
<p>1, "if <code>for clause</code> is completed"</p>
<pre><code>for i in range(3):
    print(i)

    if i == 2:
        print("Too big - I'm giving up!")
        break;
if "for clause is completed":
    print("Completed successfully")
</code></pre>
<p>It's wielding to write such long statements as "for clause is completed", so they introduce "else".</p>
<p><code>else</code> here is a if in its nature.</p>
<p>2, However, How about <code>for clause is not run at all</code></p>
<pre><code>In [331]: for i in range(0):
     ...:     print(i)
     ...: 
     ...:     if i == 9:
     ...:         print("Too big - I'm giving up!")
     ...:         break
     ...: else:
     ...:     print("Completed successfully")
     ...:     
Completed successfully
</code></pre>
<p>So it's completely statement is logic combination:</p>
<pre><code>if "for clause is completed" or "not run at all":
     do else stuff
</code></pre>
<p>or put it this way:</p>
<pre><code>if "for clause is not partially run":
    do else stuff
</code></pre>
<p>or this way:</p>
<pre><code>if "for clause not encounter a break":
    do else stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was just trying to make sense of it again myself. I found that the following helps! </p>
<p>â€¢Â Think of the <code>else</code> as being paired with the <strong><code>if</code></strong> inside the loop (instead of with the <code>for</code>) - if condition is met then break the loop, else do this - except it's one <code>else</code> paired with multiple <code>if</code>s!<br/>
â€¢Â If no <code>if</code>s were satisfied at all, then do the <code>else</code>.<br/>
â€¢Â The multiple <code>if</code>s can also actually be thought of as <code>if</code>-<code>elif</code>s!</p>
</div>
<div class="post-text" itemprop="text">
<p>Great answers are:</p>
<ul>
<li><a href="https://stackoverflow.com/a/23748240/5492820">this</a> which explain the history, and</li>
<li><a href="https://stackoverflow.com/a/23626222/5492820">this</a> gives the right
citation to ease yours translation/understanding.</li>
</ul>
<p>My note here comes from what Donald Knuth once said (sorry can't find reference) that there is a construct where while-else is indistinguishable from if-else, namely (in Python):</p>
<pre class="lang-py prettyprint-override"><code>x = 2
while x &gt; 3:
    print("foo")
    break
else:
    print("boo")
</code></pre>
<p>has the same flow (excluding low level differences) as:</p>
<pre class="lang-py prettyprint-override"><code>x = 2
if x &gt; 3:
    print("foo")
else:
    print("boo")
</code></pre>
<p>The point is that if-else can be considered as syntactic sugar for while-else which has implicit break at the end of its <code>if</code> block. The opposite implication, that <code>while</code> loop is extension to <code>if</code>, as it's just repeated conditional check is more common. However it falls short when you consider if-else because that would mean <code>else</code> block in while-else would be executed <strong>each time</strong> when condition is false.</p>
<p>To ease your understanding think of it that way:</p>
<blockquote>
<p>Without <code>break</code>, <code>return</code>, etc., loop ends only when condition is no longer true (in <code>for</code> case you must consider C-style <code>for</code> loops or translate them to <code>while</code>) and <code>else</code> block executes when condition is false.</p>
</blockquote>
<p>Another note:</p>
<blockquote>
<p>Premature <code>break</code>, <code>return</code>, etc. inside loop makes impossible for condition to become false because execution jumped out of the loop while condition was true and would never come back to check it again.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Let us suppose we have a function</p>
<pre><code>def broken(x) : return False if x==5 else True
</code></pre>
<p>Which means that only 5 is not broken. Now in case <strong>broken</strong> is never evaluated with 5:-</p>
<pre><code>for x in range(4):
    if not broken(x) : break
else:
    print("Everything broken... doom is upon us")
</code></pre>
<p>Will give output:-</p>
<pre><code>Everything broken... doom is upon us
</code></pre>
<p>Where when <strong>broken</strong> is evaluated with 5:-</p>
<pre><code>for x in range(6):
    if not broken(x) : break
else:
    print("Everything broken... doom is upon us")
</code></pre>
<p>It will not print anything. Thus indirectly telling there is at least something which is not broken.</p>
<p>However, in case you want to cheat and skip something you found was broken. That is, continue the loop even though you found 5 as broken, else statement will still be printed. That is :-</p>
<pre><code>for x in range(6):
    if not broken(x) : continue
else:
    print("Everything broken... doom is upon us")
</code></pre>
<p>Will print </p>
<pre><code>Everything broken... doom is upon us
</code></pre>
<p>I hope it clears the confusion instead of creating a new one :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>I consider the structure as for (if) A else B, and for(if)-else is <strong>a special if-else</strong>, <strong>roughly</strong>. It may help to understand <strong>else</strong>.</p>
<p>A and B is executed at most once, which is the same as if-else structure.</p>
<p>for(if) can be considered as a special if, which does a loop to try to meet the if condition. Once the <strong>if</strong> condition is met, A and <strong>break</strong>; <strong>Else</strong>, B.</p>
</div>
<span class="comment-copy">You might like to translate it to "then" in your head.</span>
<span class="comment-copy">Don't forget the key line in the Zen of Python: "... that way may not be obvious at first unless you're Dutch."</span>
<span class="comment-copy">In my head I translate it into <i>"if not break"</i>. And, since <code>break</code> is used a lot in <i>"I've found it"</i> loops, you can translate it to <i>"if not found"</i>, which is not far from what <code>else</code> reads</span>
<span class="comment-copy">I think the real question many people have here is "What's the difference between <code>for ... else foo()</code> and just putting <code>foo()</code> after the for loop?" And the answer is that they behave differently <b>only</b> if the loop contains a <code>break</code> (as described in detail below).</span>
<span class="comment-copy">A semicolon in python... my eyes hurt.. even though it is syntactically correct it is not good practice to do so</span>
<span class="comment-copy">The list comprehension is the wrong one-liner. If you're looking for a single item, as in the <code>for</code> loop examples, and want to use a generator expression / list comprehension, then you want <code>next((o for o in objects if o.key == search_key), None)</code> or wrap it in a <code>try</code> / <code>except</code> and use no default value instead of an <code>if</code> / <code>else</code>.</span>
<span class="comment-copy">and like Lance Helsten's answer, there are actual cases where it's better to use a <code>for/else</code> construct.</span>
<span class="comment-copy">Cheers. I had a badly indented file where an <code>else</code> got paired with a <code>for</code> and I had no idea that was legal.</span>
<span class="comment-copy">I think that the for loop is the most obvious of the constructs there.</span>
<span class="comment-copy">It is worth mentioning that the else clause will run even if the for loop has values unless a <code>break</code> statement is explicity run as in this example. From the docs above: "The <code>else</code> clause has another perceived problem: if there is no <code>break</code> in the loop, the <code>else</code> clause is functionally redundant.". e.g. <code>for x in [1, 2, 3]:\n print x\n else:\n print 'this executes due to no break'</code></span>
<span class="comment-copy">This explains it better than the chosen answer where the author doesn't really get what for-else is about!</span>
<span class="comment-copy">I'd have to say this syntactic sugar might rot your project's teeth.  This would not make a <code>Python: the good parts</code> book.</span>
<span class="comment-copy">Can you confirm that in your example, <code>process(i)</code> happens for every item in <code>mylist</code> strictly before <code>theflag</code>, and not to <code>theflag</code> itself? Is it what was intended?</span>
<span class="comment-copy"><code>process</code> will execute on each <code>i</code> that exists in the list before <code>theflag</code> is reached, it will not be executed on elements in the list after <code>theflag</code>, and it will not be executed on <code>theflag</code>.</span>
<span class="comment-copy">I'm modifying a Python script to export Trello cards to Github, and this construct was blocking correct application of both labels and state. I agree wholeheartedly with Mark0978. To those who might say that a good craftsman doesn't blame their tools, I ask: why do you not use Perl in that case?</span>
<span class="comment-copy">Seems like <code>finally</code> would have been a better choice in that case. Was the finally keyword not yet present at the time this construct was introduced?</span>
<span class="comment-copy">@Wallacoloo <code>finally</code> isn't much better, because it implies the block would always be executed after the loop, and it isn't (because that'd be redundant with just putting the code to run after the loop).</span>
<span class="comment-copy">It also cannot be <code>finally</code> because the else clause is executed also when <code>continue</code> is used in the for loop -- that is possibly many times and not only at the end.</span>
<span class="comment-copy">@pepr <code>else</code> clause execution is not affected by <code>continue</code> (<a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">docs</a> and <a href="http://ideone.com/Tq400j" rel="nofollow noreferrer">test code</a>)</span>
<span class="comment-copy">@AirThomas: +1. You are right. The <code>else</code> is executed only when the <code>continue</code> was the one for the last iteration.</span>
<span class="comment-copy"><i>"The break jumps out of the block, and so jumps 'over' the else clause"</i> - while this may be helpful as  a way of "getting" <code>for:</code>/<code>else:</code>, it doesn't really provide a justification for the keyword being <code>else</code>. Given the framing given here, <code>then:</code> seems like it would be much more natural. (There <i>are</i> reasons for <code>else</code> being chosen, given in other answers - they're just not provided here.)</span>
<span class="comment-copy">Your <i>still on the conditions</i> is helpful (+1) although it is wrong - it's human ;-)</span>
<span class="comment-copy">-1; this pronunciation of <code>for:</code>/<code>else:</code> makes it sound like the <code>else:</code> will always run after the loop, which isn't the case.</span>
<span class="comment-copy">Thanks for make it simple :D â™¥!</span>
<span class="comment-copy">I think that this answer addresses the issue of confusion I think the OP was talking about. The else keyword does exactly the opposite of what you would expect of from the English meaning of else when attached to the action of for. In theory, the for ... else could have worked differently in that you end up in the else part when the loop is broken out of, But the problem is that to use it to find element x, and handle the case where x is not found, you may have to use a flag or another test after the whole for .. else construct</span>
<span class="comment-copy">You should make a link to resource when you copy from it: <a href="http://python-notes.curiousefficiency.org/en/latest/python_concepts/break_else.html" rel="nofollow noreferrer">Nick Coghlan's Python Notes</a>.</span>
<span class="comment-copy">@godaygo thanks for the link. I read and accept the concept when first learning python, didn't memorize the source when writing the answer.</span>
<span class="comment-copy">@cizixs You <i>"didn't memorise the source"</i> but just happened to include entire sentences of comments identical to the original? Ooookaaaay.</span>
<span class="comment-copy">This adds nothing and doesn't answer the question, which is not <i>how</i> but <i>why</i>.</span>
<span class="comment-copy">else acts as "transaction" in SQL.</span>
<span class="comment-copy">What's funny about your example is that it's... confusing. You are trying to explain that the "else" is not reached unless "break" is called; while at the same time it's only called when nothing is "broken". Of course syntactically everything is correct but semantically the analogy is extremely confusing.</span>
