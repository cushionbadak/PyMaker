<div class="post-text" itemprop="text">
<p>i tried to create a pandas dataframe like below</p>
<pre><code>import pandas as pd
import numpy as np

pd.set_option('precision', 20)

a = pd.DataFrame([10212764634169927, 10212764634169927, 10212764634169927], columns=['counts'], dtype=np.float64)
</code></pre>
<p><em>a</em> returns as:</p>
<pre><code>             counts
0  10212764634169928.0
1  10212764634169928.0
2  10212764634169928.0
</code></pre>
<p>So, my question is, why is the last digit modified?</p>
<p>Thanks in advance!</p>
<p>EDIT: i understand it has to do with the dtype. But why +1 to the last digit specifically? If i were to use 10212764634169926 instead, nothing happens, the results keeps to 10212764634169926. The same is with 10212764634169928, it returns 10212764634169928</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is not related to <code>pandas</code> itself but to the <code>float</code> number itself. If you try the following:</p>
<pre><code>float(10212764634169927)
1.0212764634169928e+16
</code></pre>
<p>you can have an idea about how float numbers are stored in memory (through the exponential notation) (see last decimal). To look a little bit more into this problem, I tested the following:</p>
<pre><code>a.astype('float64')
                counts
0  10212764634169928.0
1  10212764634169928.0
2  10212764634169928.0

a.astype('float32')
                counts
0  10212764362473472.0
1  10212764362473472.0
2  10212764362473472.0
</code></pre>
<p>You can see that using a <code>float32</code> format would return even more difference.</p>
</div>
<span class="comment-copy">Hi, i understand it has to do with the dtype. But why +1 to the last digit specifically? If i were to use 10212764634169926 instead, nothing happens, the results keeps to 10212764634169926. The same is with 10212764634169928, it returns 10212764634169928.</span>
<span class="comment-copy">I looked further into this and found the following doc: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a>  Basically, the way python stores your float numbers is through binary fractions and not through decimal fractions (like what we are used to do). Even a number like 0.1 is not stored as exactly as 0.1 in the background. The difference  between 10212764634169926 and 10212764634169927 is probably due to the fact that python needs more memory than it is able to reach for that extra decimal (and it is probably easier to store even numbers.)</span>
