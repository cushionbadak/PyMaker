<div class="post-text" itemprop="text">
<p>I am creating a web application with Django (back end) and JavaScript (front end).</p>
<p>The main scenario is the following: a client asks the server to <strong>train a neural network</strong> (which can take quite a lot: seconds or even minutes, sometimes). Immediately after sending the request, the client shows to the user how the training session is going; it does so by retrieving and displaying the <strong>training error</strong>, which is actually just a number.</p>
<p>For training the network I made this function, which I implemented as a <strong>generator</strong>:</p>
<pre><code>def train(network, trainset):
    # [setup variables...]
    while (current_error &gt; target_error):
        # [continue to train the network...]
        # [update current_error...]
        yield current_error
</code></pre>
<p>On the front end (a simple HTML page) I have a JS script for retrieving data dynamically from a Django view. My Django view goes something like this:</p>
<pre><code>def getError(request):
    # ...
    generator = train(net, dataset)
    return StreamingHttpResponse(generator)
</code></pre>
<p>At the moment I can retrieve the data with an AJAX call but I always have to wait for the server to train the <strong>whole</strong> neural network before I can see the training errors.</p>
<p>My problem is that I would like the user to view the error updates <em>while</em> the server is training the network, not after: that's why I implemented the training function as a generator (and that's why I chose to return a <code>StreamingHttpResponse</code>).</p>
<p>What can I do for retrieving the data while the server is computing? Specifically, I would like to update the front end each time the training generator <code>yield</code>s a number.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solution 1: use celery for the computation, storing progress in redis, and have your front side js code poll a view that will get progress from a dedicated view.</p>
<p>Solution 2: use a websocket.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Initial analysis:</strong></p>
<p>Let's have a look at the documentation:</p>
<ol>
<li><p><a href="https://docs.python.org/3/reference/expressions.html#yield-expressions" rel="nofollow noreferrer"><code>yield</code></a>: </p>
<blockquote>
<p>The yield expression is used when defining a generator function</p>
</blockquote></li>
<li><p><a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer"><code>generator</code></a>:</p>
<blockquote>
<p>A function which returns a generator iterator. It looks like a normal function except that it contains yield expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the next() function.</p>
</blockquote></li>
</ol>
<p>From the aforementioned it is clear that your code sample works well but not as intended:</p>
<p>The <code>train()</code> function <code>yields</code> a <code>generator</code> which gets "transmitted" to your front-end from the <code>getError</code> after the whole calculation is done.
<hr/>
<strong>Reform the problem based on analysis:</strong></p>
<p>With the above mentioned, your problem will be to get the calculations of each step of the <code>train()</code> process and display them to the front-end.
<hr/>
<strong>A skeleton of a solution:</strong></p>
<ul>
<li>Create a global variable (yes I said it) list.</li>
<li><p>Refactor <code>train()</code> function to use the previous list:</p>
<pre><code>train_errors = []

def train(network, trainset):
    # [setup variables...]
    while (current_error &gt; target_error):
        # [continue to train the network...]
        # [update current_error...]
        train_errors.append(current_error)
</code></pre></li>
<li><p>Assuming that <code>train()</code> is located in <code>views.py</code> file, refactor the <code>getError()</code> to return the <code>train_errors</code> list:</p>
<pre><code>from django.http import JsonResponse

def getError(request):
    # ...
    return JsonResponse(train_errors, safe=False)
</code></pre>
<p>I utilize <a href="https://docs.djangoproject.com/en/1.11/ref/request-response/#jsonresponse-objects" rel="nofollow noreferrer">JsonResponse</a>, but feel free to use anything that suites you.</p></li>
<li><p>Make your front-end to repeat the AJAX call every N seconds, by utilizing javascript's <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" rel="nofollow noreferrer"><code>setInterval</code></a>, and display the differences from the previous state of the data. <br/>
Example of use:</p>
<pre><code>var myIntervalCall = setInterval(myAJAXcall, 500);

function myAJAXcall{
  // Create your AJAX call in here 
  // And sufficient code to display the changes on the received data.
}
</code></pre>
<p>The above code will make <code>myAJAXcall</code> to the back-end, every <code>0.5 sec</code></p></li>
</ul>
<p>The above will allow you to make an initial approach to your problem and you can/must expand on this (barbaric) solution.
<hr/>
<strong>EDIT/Disclaimer</strong> (due to @George and @brunodesthuilliers comments):</p>
<p><strong>The above, is not a good solution!!</strong> It is only a quick solution to get the author "unstuck" from his current problem and help him move on with his development.<br/> The "solution" provides the basis for a thought process, considering the problem at hand (the actual problem that the author has at the moment) and therefore provides a minimal and initial approach to a solution.</p>
<p>The aforementioned distiled: <strong>DO NOT TAKE THIS SOLUTION AS CANON!</strong> it is only a "jump start".</p>
</div>
<span class="comment-copy">In case of websocket you might want to have a look at <a href="https://channels.readthedocs.io/en/stable/" rel="nofollow noreferrer">django channels</a> as you already use django.</span>
<span class="comment-copy">I am now studying websockets and they seem a very good solution to my problem. Specifically, Django Channels seems great. But I was wondering: is it really impossible to use "vanilla" Django with <code>StreamingHttpResponse</code>?</span>
<span class="comment-copy">Using a global in this context is garanteed to "kind of" work running on  the dev server and become totally erratic once deployed on a multithreaded or multiprocess production server.</span>
<span class="comment-copy">@brunodesthuilliers That is why I state that this is only a skeleton of a solution! It needs improvement, but it gets out of scope of this question!</span>
<span class="comment-copy">I share the same fear as Bruno's: my application will receive many calls at one time, so a global variable could become a bottleneck, even if I used some global dictionary for mapping each user to a specific <code>train_errors</code> list.</span>
<span class="comment-copy">@George You are correct to fear that may happen! I do not suggest this as an ultimate solution, only as a way to unstuck from your current problem and move forward. I will edit my answer to clarify that point!</span>
<span class="comment-copy">Ok, I undertand. Thanks for that!</span>
