<div class="post-text" itemprop="text">
<p>I need to pack the current time into a restrictive bitpattern.</p>
<p>the top 5bits is the hours, next 6 is minutes,  next 6 seconds &amp; the remainder are reserved</p>
<p>I came up with a nasty bitAND mask and then string concatenation before converting back to a 32bit integrer. </p>
<p>This seems overly convoluted &amp; CPU expensive. Is there a more efficient &amp; more to the point, elegant method? </p>
</div>
<div class="post-text" itemprop="text">
<p>How about:</p>
<pre><code>wl = 32
hl = 5
ml = 6
sl = 6

word = hours &lt;&lt; (wl - hl) | minutes &lt;&lt; (wl-hl-ml) | seconds &lt;&lt; (wl-hl-ml-sl)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Between additional searches ( <a href="http://varx.org/wordpress/2016/02/03/bit-fields-in-python/" rel="nofollow noreferrer">http://varx.org/wordpress/2016/02/03/bit-fields-in-python/</a> ) and a comment I settled on:</p>
<pre><code>class TimeBits(ctypes.LittleEndianStructure):
    _fields_ = [
            ("padding", ctypes.c_uint32,15), # 6bits out of 32
            ("seconds", ctypes.c_uint32,6), # 6bits out of 32
            ("minutes", ctypes.c_uint32,6), # 6bits out of 32
            ("hours", ctypes.c_uint32,5), # 5bits out of 32
            ]

class PacketTime(ctypes.Union):
    _fields_ = [("bits", TimeBits),
            ("binary_data",ctypes.c_uint32)
            ]


packtime = PacketTime()
now = datetime.today().timetuple()
packtime.bits.hours = now[3]
packtime.bits.minutes = now[4]
packtime.bits.seconds = now[5]
</code></pre>
<p>It offers a cleaner structured setting of the associated fields, especially as this is called at least every second. A similar structure has been created for Date and other bitpacking vectors </p>
</div>
<span class="comment-copy">Why would you need a string to perform bit operations?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">docs.python.org/3/library/struct.html</a> and <a href="http://stackoverflow.com/questions/142812/does-python-have-a-bitfield-type" title="does python have a bitfield type">stackoverflow.com/questions/142812/â€¦</a></span>
<span class="comment-copy">@JohanL well... my 1st pass was via the bin(x) method which returns strings, thus slicing multiple of these causes alot of string.  The multiple bitshift (as your answer shows) was my fallback but I was hoping for something closer to a union in Python.</span>
<span class="comment-copy">@handle I actually came across another site advocating ctypes just after I posted. Your comment helped clarify aspects of it</span>
<span class="comment-copy">I'll accept this answer as it was my fallback if the union method didn't work</span>
