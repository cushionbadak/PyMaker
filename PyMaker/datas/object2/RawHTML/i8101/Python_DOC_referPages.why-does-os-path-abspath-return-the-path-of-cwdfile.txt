<div class="post-text" itemprop="text">
<p>If I have a structure like such:</p>
<pre><code>root/
-- group1/
---- names/
---- places/
------ foo.zip
</code></pre>
<p>Why is that when I call <code>os.path.abspath('foo.zip')</code> I get the file path of where the Python script is located plus the <code>foo.zip</code>? </p>
<p>Looks like: <code>H:\Program\Scripts\foo.zip</code> </p>
<p>Needs to be: <code>H:\Progran\Groups\group1\names\places\foo.zip</code></p>
<p>This is the code I have for a function where the problem is resulting:</p>
<pre><code>def unzip(in_dir):
    # in_dir is places passed to unzip()
    files = [f for f in os.listdir(os.path.abspath(in_dir)) if f.endswith('.zip')]
    for zip in files:
        # This prints the 'looks like' path above
        print os.path.abspath(zip)
</code></pre>
<p>Shouldn't <code>print os.path.abspath(zip)</code> give me the full path of each file that was found in the <code>os.listdir(os.path.abspath(in_dir))</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why does os.path.abspath() return the path of <strong>cwd+file</strong>?</p>
</blockquote>
<p>Because that's quite literally what <a href="https://docs.python.org/3/library/os.path.html#os.path.abspath" rel="nofollow noreferrer"><code>abspath</code></a> is supposed to do:</p>
<blockquote>
<p>os.path.abspath(<em>path</em>)</p>
<p>Return a normalized absolutized version of the pathname <em>path</em>. On most
  platforms, this is equivalent to calling the function normpath() as
  follows: <code>normpath(<b>join(os.getcwd(), path)</b>)</code>.</p>
</blockquote>
<p>(Emphasis mine)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.path.abspath()</code> has no idea where the name <code>foo.zip</code> came from -- it doesn't know it came from <code>os.listdir()</code> of some directory. So it doesn't know that's the correct directory to use as the prefix. A relative pathname is always interpreted relative to the current directory.</p>
<p>If you want to create the desired absolute pathname, use <code>os.path.join</code>:</p>
<pre><code>print os.path.join(in_dir, zip)
</code></pre>
</div>
<span class="comment-copy">How is <code>abspath()</code> supposed to know that you got the filename from listing that directory? All it gets is the string, it doesn't know where it came from.</span>
<span class="comment-copy"><code>abspath</code> takes a path relative to the current directory.</span>
<span class="comment-copy"><code>abspath</code> doesn't touch the file system in any way. it just takes the program's current working directory and adds path components from there. No file or directory has to exist at the time it does its job. That would make it very difficult to create new files.</span>
