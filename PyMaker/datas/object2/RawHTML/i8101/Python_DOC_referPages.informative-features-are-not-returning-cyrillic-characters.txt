<div class="post-text" itemprop="text">
<p>I've switched Python 3.6 now, but when running informative features I end up with gibberish when trying to print Russian in my feature extractor.</p>
<pre><code>Most Informative Features
  three_last_letters = 'Ð¾Ì'            noun : verb   =      6.6 : 1.0
  three_last_letters = 'Ð³Ð'            noun : verb   =      5.4 : 1.0
  three_last_letters = 'ÐµÐ'            noun : verb   =      4.7 : 1.0
  three_last_letters = 'Ð¼Ð'            noun : verb   =      4.4 : 1.0
  three_last_letters = 'Ð½Ñ'            noun : verb   =      3.5 : 1.0
</code></pre>
<p>In the case of the feature extractor itself</p>
<pre><code>def POS_features(word):
    return{'three_last_letters':word[-3:]}
print(POS_features(u'Богатир'))
</code></pre>
<p>I can get тир to print just fine, is there something I can do to make the informative features return Russian characters?  </p>
</div>
<div class="post-text" itemprop="text">
<p>I figured out what I'd done wrong,</p>
<pre><code>vocab = nltk.corpus.reader.CategorizedPlaintextCorpusReader(
"C:\\Users\\Admin\\AppData\\Roaming\\nltk_data\\corpora\\russian\\vocab", r'.*\.txt', cat_pattern=r'^(noun|verb)', encoding="utf8"
</code></pre>
<p>when I'd imported my vocab folder, I'd encoded it as latin-1
all is well and Cyrillic characters were returned for me</p>
<pre><code> Most Informative Features
      three_last_letters = 'ать'            verb : noun   =     15.2 : 1.0
      three_last_letters = 'де'             noun : verb   =      2.6 : 1.0
      three_last_letters = 'сть'            noun : verb   =      1.5 : 1.0
      three_last_letters = 'пра'            noun : verb   =      1.4 : 1.0
      three_last_letters = 'ина'            noun : verb   =      1.4 : 1.0
</code></pre>
</div>
<span class="comment-copy">on what os? and do you try the print in a console or ide?</span>
<span class="comment-copy">I code on the Jupyter notebook on Windows.</span>
<span class="comment-copy">If this wasn't the case with Python 3.5, it could be because of this change: "PEP 528 and PEP 529, Windows filesystem and console encoding changed to UTF-8.". Sorry, don't have a proper solution but try to experiment with <code>sys.setdefaultencoding</code> and check <code>sys.stdout.encoding</code>.</span>
<span class="comment-copy">@reivermello: <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code> is a serialization library</a>.</span>
<span class="comment-copy">@reivermello Instead of writing the solution into the question, write it as an actual answer below. That way you can mark something as accepted and close the thread.</span>
<span class="comment-copy">note that you can use raw strings to write Windows paths (or any other string that contains backslashes) in Python source code. <code>r'C:\path\to\file'</code>. See <a href="http://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-in-python-and-what-are-raw-string-l" title="what exactly do u and r string flags do in python and what are raw string l">stackoverflow.com/questions/2081640/…</a></span>
