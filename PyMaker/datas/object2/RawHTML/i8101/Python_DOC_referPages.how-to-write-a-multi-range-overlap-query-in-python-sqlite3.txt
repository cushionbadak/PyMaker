<div class="post-text" itemprop="text">
<p>I'm using <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer"><code>sqlite</code></a> in python. I'm pretty new to sql. My sql table has two columns <code>start</code> and <code>end</code> which represent an interval. I have another "input" list of intervals (represented as a pandas dataframe) and I'd like to find all the overlaps between the input and the db.</p>
<pre><code>SELECT * FROM db WHERE 
# you can write an interval query in two statements like so:
db.start &lt;= input.end AND db.end &gt;= input.start
</code></pre>
<p>My issue is that the above queries for overlaps with a single input interval, I'm not sure how to write a query for many overlaps. I'm also unsure how to effectively write this in python. From the <a href="https://docs.python.org/3.6/library/sqlite3.html" rel="nofollow noreferrer">sqlite docs</a>:</p>
<pre><code>t = ('RHAT',)
c.execute('SELECT * FROM stocks WHERE symbol=?', t)
print(c.fetchone())
</code></pre>
<p>This seems difficult because I need to pass in a range for my expression, or a list of ranges, and so a single <code>?</code> probably won't cut it, right?</p>
<p>I'd appreciate either sql or python+sql or suggestions for how to do this entirely differently. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Putting multiple interval values into a single query becomes cumbersome quickly.</p>
<p>Create a (temporary) table <code>input</code> for the intervals, and then search for any match in that table:</p>
<pre class="lang-sql prettyprint-override"><code>SELECT *
FROM db
WHERE EXISTS (SELECT *
              FROM input
              WHERE db.start &lt;= input.end
                AND db.end   &gt;= input.start);
</code></pre>
<p>It's simpler to write this as a join, but then you get multiple output rows if multiple inputs match (OTOH, this might actually be what you want):</p>
<pre class="lang-sql prettyprint-override"><code>SELECT db.*
FROM db
JOIN input ON db.start &lt;= input.end
          AND db.end   &gt;= input.start;
</code></pre>
</div>
<span class="comment-copy">Please provide more info. Sample input and desired output would be helpful. A <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> would be nice, with some lines of <code>create table ...</code>and some <code>insert into ...</code>. Ideally an SQLite <code>.dump</code>of a toy database. And maybe your problem can be described in terms of a pure SQLIte query. The quoted use of a '?' is unknown to me (my experience is with SQLIte command line tool).</span>
<span class="comment-copy">Thanks CL! I'll work from your answer (I do want to do a join in this case I guess). Quick question: what's the best way to make a temporary table in python?</span>
<span class="comment-copy"><code>CREATE TEMP TABLE ...</code></span>
<span class="comment-copy">The first query scans db and input, and the subquery is correlated and not cached. The second query scans only input, and searches db by index. The multiple output row issue can be fixed by 'distinct' with a tmp-b-index-tree search cost. Is the second query better?</span>
<span class="comment-copy">@JoeC Due to the way SQLite implements nested loop joins, both queries are pretty much the same, so without the extra DISTINCT step, the first one is likely to be faster. But you should measure for your actual data on your actual hardware.</span>
<span class="comment-copy">@CL Are they the same to the second query's plan or the first one? The first one does only scan w/o using any index, while the second one uses index.</span>
