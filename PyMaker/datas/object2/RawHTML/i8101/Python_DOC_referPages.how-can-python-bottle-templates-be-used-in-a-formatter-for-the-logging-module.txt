<div class="post-text" itemprop="text">
<p>Is there a way to configure the Python <a href="https://docs.python.org/3/library/logging.html#module-logging" rel="nofollow noreferrer">logging module</a> to use the <a href="https://bottlepy.org/docs/dev/stpl.html" rel="nofollow noreferrer">Bottle templating engine</a> as a <a href="https://docs.python.org/3/library/logging.html#formatter-objects" rel="nofollow noreferrer"><em>Formatter</em></a>?</p>
<pre><code>user_table_template = '''\
Logged-in users:
% for username, session_id in user_table:
  {{ username }} --&gt; {{ session_id }}
% end
'''

logging.info(user_table_template, user_table=user_table)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using a custom message class, whose <code>__str__</code> method does the actual formatting, as in the following example (not tested):</p>
<pre><code>from bottle import SimpleTemplate
class BottleTemplateMessage(object):
    def __init__(self, source, **kwargs):
        self.template = SimpleTemplate(source)
        self.context = kwargs

    def __str__(self):
        return self.template.render(**self.context)
</code></pre>
<p>and then</p>
<pre><code>import logging
logging.warning(BottleTemplateMessage('Hello, {{name}}!', name='world'))
</code></pre>
<p>which should print something like</p>
<pre><code>WARNING:root:Hello, world!
</code></pre>
</div>
<span class="comment-copy">Is there a way to inject this behavior upstream so that the caller code is simplified to <code>logging.warning('Hello, {{name}}!', name='world')</code>?</span>
<span class="comment-copy">Not without an approach such as using an adapter and logging through that (so that e.g. third party libs continue to log normally - if you don't use <i>any</i> third party code, then I suppose the <code>Logger</code> could be subclassed ...)</span>
