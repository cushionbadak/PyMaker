<div class="post-text" itemprop="text">
<p>I use this function to extract rgb values from images:</p>
<pre><code>def get_rgb_and_rgba_values_for_next_three_pixels(image_data, pixel_type):
    if pixel_type == "rgb":
        rgba_values = []
        rgb_values = [image_data.next()[:3], image_data.next()[:3], image_data.next()[:3]]
    else:
        rgba_values = [image_data.next()[:4], image_data.next()[:4], image_data.next()[:4]]
        rgb_values = [rgba_values[0][:3], rgba_values[1][:3], rgba_values[2][:3]]
    return [rgba_values, rgb_values]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[[(255, 255, 255), (255, 255, 255), (255, 255, 255)], [(255, 255, 255, 0), (255, 255, 255, 0), (255, 255, 255, 0)]]
</code></pre>
<p>then I use this function to change all lsbs to 0:</p>
<pre><code>def set_least_significant_bit_to_zero(rgb_values):
    return [value &amp; ~1 for value in rgb_values[0][:3] + rgb_values[1][:3] + rgb_values[2][:3]]
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[254, 254, 254, 254, 254, 254, 254, 254, 254]
</code></pre>
<p>My question is: how do I achieve exactly the same thing but without using list comprehensions in second function?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no reason to avoid the list comprehension - it is readable, Pythonic, and efficient - however, if you insist you can construct a result list by iterating over the values, appending the new value to the result list, and then returning the result from the function:</p>
<pre><code>def set_least_significant_bit_to_zero(rgb_values):
    result = []
    for value in rgb_values[0][:3] + rgb_values[1][:3] + rgb_values[2][:3]:
        result.append(value &amp; ~1)
    return result
</code></pre>
<p>You could also use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a> to make the <code>for</code> loop iterable:</p>
<pre><code>import itertools

def set_least_significant_bit_to_zero(rgb_values):
    result = []
    for value in itertools.chain(rgb_values[0][:3], rgb_values[1][:3], rgb_values[2][:3]):
        result.append(value &amp; ~1)
    return result
</code></pre>
</div>
<span class="comment-copy">Do you have sample input data ?</span>
