<div class="post-text" itemprop="text">
<p>I would like to concatenate all numpy arrays (all same size) in a python dict to a new array.</p>
<pre><code>dict = {'some_key_1':np.array([1,2,3,4]), 'some_key_2':np.array([2,3,4,5]), ...}
</code></pre>
<p>the result that I would like to see is:</p>
<pre><code>result = np.array([[1,2,3,4],[2,3,4,5]])
</code></pre>
<p>whats the best way to do that?</p>
<p>Edit: Solution seems to be slightly different for python 2 and 3. The accepted answer solves it for python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, you'd need to convert the <code>dict.values()</code> to a list first.</p>
<blockquote>
<p>The objects returned by dict.keys(), dict.values() and dict.items()
  are view objects. They provide a dynamic view on the dictionaryâ€™s
  entries, which means that when the dictionary changes, the view
  reflects these changes.
  (<a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#typesmapping</a>)</p>
</blockquote>
<pre><code>import numpy as np
data = {'some_key_1':np.array([1,2,3,4]), 'some_key_2':np.array([2,3,4,5])}
print(np.array(list(data.values())))
# [[1 2 3 4]
# [2 3 4 5]]
</code></pre>
<p>You get a 2-D array, with rows in a random order (Python <code>dict</code>s are unordered).</p>
<p>To get a 1-D array, you can use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html" rel="nofollow noreferrer"><code>np.concatenate</code></a>:</p>
<pre><code>print(np.concatenate(list(data.values())))
# [1 2 3 4 2 3 4 5]
</code></pre>
<p>If the order is important, you could use a list of tuple or an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> instead of a <code>dict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably the easiest way:</p>
<pre><code>result = np.array(list(dict.values()))
</code></pre>
<p>With <code>list</code>, the dictionary's values will be stored in a list (i.e. one obtains a list where each item is a numpy array). This list of numpy arrays can then itself be converted to a numpy array by applying <code>np.array()</code>.</p>
<p>You should not use <code>dict</code> as a name for your dictionary, though, as this shadows the built-in name <a href="https://docs.python.org/3.6/library/stdtypes.html#dict" rel="nofollow noreferrer">dict</a>. Instead, use e.g.:</p>
<pre><code>result = np.array(list(dct.values()))
</code></pre>
<p>And make sure to rename your dictionary to <code>dct</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get all values of a dictionary by using dictionary.values() and pass it to numpy.array</p>
<pre><code>import numpy as np
np.array(list(dict.values()))
</code></pre>
<p>Please do not use dict as name it is a reserved keyword in python</p>
<p><strong>Example</strong></p>
<pre><code>import numpy as np
data = {'some_key_1':np.array([1,2,3,4]), 'some_key_2':np.array([2,3,4,5])}
np.array(list(data.values()))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>array([[2, 3, 4, 5],
       [1, 2, 3, 4]])
</code></pre>
</div>
<span class="comment-copy">How about <code>np.array(dict.values())</code>? If you have a ragged number of elems that could be an issue.</span>
<span class="comment-copy">result is an object that I can't work with, not an array unortunately: array(dict_values([[1,2,3,4],[2,3,4,5]]))</span>
<span class="comment-copy">I have posted a python-version independent solution utilizing <code>vstack</code>, have a look :)</span>
<span class="comment-copy">Thank's thats it! I use python 3.5</span>
