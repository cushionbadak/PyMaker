<div class="post-text" itemprop="text">
<p>I initially wanted to do async stream communication on windows. </p>
<pre><code>from asyncio import *
from asyncio.subprocess import PIPE, STDOUT, DEVNULL
import sys

async def test(exe):
  inst = await create_subprocess_exec(exe, stdin=PIPE, stdout=PIPE, stderr=STDOUT)
  inst.stdin.close()
  inst.wait()

# for subprocess' pipes on Windows
def initialize_async():
  if sys.platform == 'win32':
    set_event_loop(ProactorEventLoop())
  return get_event_loop()

loop = initialize_async()
loop.run_until_complete(test('attrib.exe'))
loop.close()
</code></pre>
<p>The above code generates the following.</p>
<pre><code>Exception ignored in: &lt;bound method BaseSubprocessTransport.__del__ of &lt;_WindowsSubprocessTransport closed pid=65088 running stdin=&lt;_ProactorWritePipeTransport closed&gt; stdout=&lt;_ProactorReadPipeTransport closing fd=476 read=&lt;_OverlappedFuture cancelled&gt;&gt;&gt;&gt;
Traceback (most recent call last):
  File "C:\Program Files\Python36\lib\asyncio\base_subprocess.py", line 132, in __del__
    self.close()
  File "C:\Program Files\Python36\lib\asyncio\base_subprocess.py", line 106, in close
    proto.pipe.close()
  File "C:\Program Files\Python36\lib\asyncio\proactor_events.py", line 84, in close
    self._loop.call_soon(self._call_connection_lost, None)
  File "C:\Program Files\Python36\lib\asyncio\base_events.py", line 573, in call_soon
    self._check_closed()
  File "C:\Program Files\Python36\lib\asyncio\base_events.py", line 357, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
Exception ignored in: &lt;object repr() failed&gt;
Traceback (most recent call last):
  File "C:\Program Files\Python36\lib\asyncio\proactor_events.py", line 95, in __del__
    warnings.warn("unclosed transport %r" % self, ResourceWarning,
  File "C:\Program Files\Python36\lib\asyncio\proactor_events.py", line 54, in __repr__
    info.append('fd=%s' % self._sock.fileno())
  File "C:\Program Files\Python36\lib\asyncio\windows_utils.py", line 152, in fileno
    raise ValueError("I/O operatioon on closed pipe")
ValueError: I/O operatioon on closed pipe
</code></pre>
<p>How can I remove this error? stdin.close and wait seems not sufficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note, that unlike in synchronous programming many <code>asyncio</code> functions are actually <code>coroutines</code> that should be awaited. See how <code>wait()</code> defined <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.wait" rel="nofollow noreferrer">in documentation</a>:</p>
<p><a href="https://i.stack.imgur.com/BvsHS.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/BvsHS.png"/></a></p>
<p>You should fix your code to await this coroutine:</p>
<pre><code>async def test(exe):
  inst = await create_subprocess_exec(exe, stdin=PIPE, stdout=PIPE, stderr=STDOUT)

  data = await inst.stdout.readline()  # readline, for example, is also coroutine.
  print(data)

  await inst.wait()
</code></pre>
<p>You won't see any error now.</p>
</div>
