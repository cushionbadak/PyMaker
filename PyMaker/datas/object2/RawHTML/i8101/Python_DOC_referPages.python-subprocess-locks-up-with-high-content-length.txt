<div class="post-text" itemprop="text">
<p>I've written a neovim plugin (not the important part) that uses a python subprocess as background daemon. I send data to stdin and return data from stdout</p>
<p>Basics of the plugin are here</p>
<ul>
<li><p><a href="https://github.com/mhartington/nvim-typescript/blob/master/rplugin/python3/nvim-typescript/client.py#L54" rel="nofollow noreferrer">Starting the server</a></p></li>
<li><p><a href="https://github.com/mhartington/nvim-typescript/blob/master/rplugin/python3/nvim-typescript/client.py#L87" rel="nofollow noreferrer">Sending a request to stdin</a></p></li>
</ul>
<p>As the code is now, everything works as expected. But now I'm seeing the <code>__server_handle</code> locks up when the returned content length is quite high, around 33K. <a href="https://github.com/mhartington/nvim-typescript/blob/master/rplugin/python3/nvim-typescript/client.py#L116-L129" rel="nofollow noreferrer">In this while block</a> I'm trying to extract the actual content from stdout, but it cannot return the data, only locking up at the content length.</p>
<p>Is there possibly a better way of handling this so that the subprocess does not get locked up?</p>
<pre><code>    while True:
        headerline = Client.__server_handle.stdout.readline().strip()
        linecount += 1

        if len(headerline):
            key, value = headerline.split(":", 2)
            headers[key.strip()] = value.strip()

            if "Content-Length" not in headers:
                raise RuntimeError("Missing 'Content-Length' header")

            contentlength = int(headers["Content-Length"])
            returned_string = Client.__server_handle.stdout.read(contentlength)
            ret = json.loads(returned_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My guess is that the pipe gets filled up with so much data, that the subprocess gets blocked, while your code is blocked because it's trying to read which leads to a deadlock.</p>
<p>Why not poll the data instead of block reading?</p>
<p>Check out the <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer">documentation</a> of <code>select</code> for waiting for IO completion.</p>
</div>
<span class="comment-copy">By polling, do you mean just "pinging" the process until the data gets returned? My concern is that the data being sent back is for code completion, which is not async</span>
