<div class="post-text" itemprop="text">
<p>I am trying to figure out if the different quote types make a difference functionally. I have seen people say its preference for <code>""</code> or <code>''</code> but what about <code>""" """</code>? I tested it in a simple code to see if it would work and it does. I was wondering if <code>""" triple quotes """</code> have a functional purpose for  defined function arguments or is it just another quote option that can be used interchangeably like <code>""</code> and <code>''</code>?</p>
<p>As I have seen many people post about <code>""</code> and <code>''</code> I have not seen a post about <code>""" """</code> or <code>''' '''</code> being used in functions.</p>
<p>My question is: Does the triple quote have a unique use as an argument or is it simply interchangeable with <code>""</code> and <code>''</code>? The reason I think it might have a unique function is because it is a multi line quote and I was wondering if it would allow a multi line argument to be submitted. I am not sure if something like that would even be useful but it could be.</p>
<p>Here is an example that prints out what you would expect using all the quote types I know of.</p>
<pre><code>def myFun(var1="""different""",var2="quote",var3='types'):
    return var1, var2, var3

print (myFun('All','''for''','one!'))
</code></pre>
<p>Result:</p>
<pre><code>('All', 'for', 'one!')
</code></pre>
<p>EDIT: </p>
<p>After some more testing of the triple quote I did find some variation in how it works using return vs printing in the function.</p>
<pre><code>def myFun(var1="""different""",var2="""quote""",var3='types'):
    return (var1, var2, var3)

print(myFun('This',
'''Can
Be
Multi''',
'line!'))
</code></pre>
<p>Result:</p>
<pre><code>('This', 'Can\nBe\nMulti', 'line!')
</code></pre>
<p>Or:</p>
<pre><code>def myFun(var1="""different""",var2="""quote""",var3='types'):
    print (var1, var2, var3)

myFun('This',
'''Can
Be
Multi''',
'line!')
</code></pre>
<p>Result:</p>
<pre><code>This Can
Be
Multi line!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>String literals can be enclosed in matching single quotes (<code>'</code>) or double quotes (<code>"</code>). They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as triple-quoted strings).  <i>[...other rules applying identically to all string literal types omitted...]</i></p>
<p>In triple-quoted strings, unescaped newlines and quotes are allowed (and are retained), except that three unescaped quotes in a row terminate the string. (A “quote” is the character used to open the string, i.e. either <code>'</code> or <code>"</code>.)</p>
</blockquote>
<p>Thus, triple-quoted string literals can span multiple lines, and can contain literal quotes without use of escape sequences, but are otherwise exactly identical to string literals expressed with other quoting types (<em>including</em> those using escape sequences such as <code>\n</code> or <code>\'</code> to express the same content).</p>
<p>Also see the Python 3 documentation: <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">Bytes and String Literals</a> -- which expresses an effectively identical set of rules with slightly different verbiage.</p>
<hr/>
<p>A more gentle introduction is also available in the <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">language tutorial</a>, which explicitly introduces triple-quotes as a way to permit strings to span multiple lines:</p>
<blockquote>
<p>String literals can span multiple lines. One way is using triple-quotes: <code>"""..."""</code> or <code>'''...'''</code>. End of lines are automatically included in the string, but it’s possible to prevent this by adding a <code>\</code> at the end of the line. The following example:</p>
<pre><code>print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
</code></pre>
<p>produces the following output (note that the initial newline is not included):</p>
<pre class="lang-none prettyprint-override"><code>Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
</code></pre>
</blockquote>
<hr/>
<p>To be clear, though: These are different <em>syntax</em>, but the <em>string literals they create</em> are indistinguishable from each other. That is to say, given the following code:</p>
<pre><code>s1 = '''foo
'bar'
baz
'''
s2 = 'foo\n\'bar\'\nbaz\n'
</code></pre>
<p>there's no possible way to tell <code>s1</code> and <code>s2</code> apart from each other by looking at their values: <code>s1 == s2</code> is true, and so is <code>repr(s1) == repr(s2)</code>. The Python interpreter is even allowed to intern them to the same value, so it <em>may</em> (or may not) make <code>id(s1) == id(s2)</code> true depending on details (such as whether the code was run at the REPL or <code>import</code>ed as a module).</p>
</div>
<div class="post-text" itemprop="text">
<p>FWIW, my understanding is that there's a convention whereby """ """, ''' ''' are used for docstring, which is kinda like a #comment, but is a recallable attribute that can be referenced later. <a href="https://www.python.org/dev/peps/pep-0257/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0257/</a></p>
<p>I'm a beginner too, but my understanding is that using triple quotes for strings is not the best idea, even <em>if</em> there's little functional difference with what you're doing currently (I don't know if there might be later). Sticking with conventions is helpful to others reading and using your code, and it seems to be a good rule of thumb that some conventions will bite you if you don't follow them, as in this case where a mal-formatted string with triple quotes will be interpreted as a docstring, and maybe not throw an error, and you'll need to search through a bunch of code to find the issue. </p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">docs.python.org/2.0/ref/strings.html</a></span>
<span class="comment-copy">""" Can be use for multiple lines strings. '/" are basically the same.</span>
<span class="comment-copy">It has exactly the same meaning in this context as in another context.</span>
<span class="comment-copy">@khelwood From the answer Charles Duffy gave it does not have the exact same meaning.</span>
<span class="comment-copy">...I've tried to amend my answer to be explicit about in which respects the meaning is and is not the same.</span>
<span class="comment-copy">The language reference is on the dry and technical side, and may be hard to follow for beginners. (And only a beginner would be asking about the difference between the quote types.) So I would personally point them to the <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">tutorial</a> instead. Or at least in addition to.</span>
<span class="comment-copy">@JohnY, good call; updated appropriately.</span>
<span class="comment-copy">@JohnY I do understand the use of different quotes. I have never seen a triple quote used in a functions argument before I tried it myself. And I was wondering if it had any use other than just being a string. Turns out it does and is useful information IMO. I already have a use in mind for using triple quotes in my functions.</span>
<span class="comment-copy">@SierrMountainTech - I'm actually not sure you really understand the different quotes if you believe triple quotes have "any use other than just being a string". Or perhaps you don't fully understand <i>strings</i>. Triple-quoted strings <b>are</b> "just" strings, and they <b>are</b> strictly interchangeable with strings enclosed by <code>"</code> or by <code>'</code>. That is the point of the last section of this answer. The choice of which way to quote a string is governed only by convention, convenience, and taste.</span>
<span class="comment-copy">@SierrMountainTech - To put it another way, if you think triple-quoted strings have a different <i>use</i> than <code>'</code>-enclosed strings, then you must also accept that <code>'</code>-enclosed strings have a different <i>use</i> than <code>"</code>-enclosed strings.</span>
<span class="comment-copy">Even a single-quoted string in the relevant position will be treated as a docstring, inasmuch as the parser/interpreter is concerned. Having them be triple-quoted is very much convention, so they can span multiple lines without backslash escapes being required.</span>
<span class="comment-copy">I agree that sticking with the convention is good practice in most cases. But just knowing that I can use triple quotes slightly differently can be useful down the road. I currently do not have a problem that "requires" the functionality of the triple quote however I do think know I can use it if need be is good information.</span>
<span class="comment-copy">@CharlesDuffy THankyou. I haven't encountered single quoted strings used this way, yet. In fact, I couldn't find a single reference to this in a google search, probably due to all the 'vs" clutter.</span>
<span class="comment-copy">@SierrMountainTech What might require you to make use of that?</span>
<span class="comment-copy">@toonarmycaptain: If your program would print askii art to a console. Say for a console driven RPG. would be one example. Or to have something easy to read and maintain some documentation from a multi line string of text that can then be printed to the console window or even into a text box on a GUI.</span>
