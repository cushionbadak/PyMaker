<div class="post-text" itemprop="text">
<p>(this is Python 3)</p>
<p>I'm trying to write a simple function to return the average of a list of numbers. I'm using a <code>for</code> loop to print out the values in the list before printing out the average. I'm having problems setting the second-to-last value in the list to print out in a different way than the other values. I want a comma between all the list values up until the second-to-last value, where I just want a space, and a fullstop after the last value. </p>
<p>If I define my list as</p>
<pre><code>list1 = [1, 3, 5, 7]
</code></pre>
<p>Then I would like to return a string:</p>
<pre><code>"The values contained in the list are as follows: 1, 3, 5 and 7."
</code></pre>
<p>Unfortunately what I've managed to get is this:</p>
<pre><code>"The values contained in the list are as follows: 1, 3, 5, and 7."
</code></pre>
<p>In other words I haven't been able to differentiate the second-to-last list value from the others (I haven't been able to remove the comma after 5); although I have been able to differentiate the last value in the list (i.e. 7).</p>
<p>To separate the last and second-to-last values in the list (i.e. 5 and 7), I define them as variables:</p>
<pre><code>finalElem2 = nlist[-1]
penultElem = nlist[-2]
</code></pre>
<p>Then I use the <code>for</code> and <code>and</code> statements to exclude those two values. The code that I have so far is this:</p>
<pre><code>def average1(nlist):
  length = len(nlist)
  finalElem2 = nlist[-1]
  penultElem = nlist[-2]
  sum_1 = 0
  print("The values contained in the list are as follows: ",end="")
  for i in nlist:
    if i != finalElem2 and penultElem:
      print(i, end=", ")
    if i == finalElem2:
      print("and ",i,".",sep="")
  print("The length of the list is",length,"values.")
  for i in nlist:
    sum_1 = sum_1 + int(i)
  average2 = sum_1 / length
  print("The average is",average2)
</code></pre>
<p>And like I mentioned before, calling average1(list1) returns <code>"The values contained in the list are as follows: 1, 3, 5, and 7."</code></p>
<p>I would have thought that the following two lines would mean that the list value 5 (i.e. penultElem, i.e. the second-to-last list value) doesn't get printed with a comma on the end, but that doesn't seem to be the case. </p>
<pre><code>if i != finalElem2 and penultElem:
  print(i, end=", ")
</code></pre>
<p>This is what I thought I'd add, if the penultElem wasn't being printed... that would print '5' without a comma after it.</p>
<pre><code>if i == penultElem:
  print(i)
</code></pre>
<p>Am I missing something really obvious here? Apologies if I am, I'm very new to this. Thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>This statement can't apply to if i == penultElem because that would result in a trailing comma:</p>
<pre><code>if i != finalElem2 and penultElem:
      print(i, end=", ")
</code></pre>
<p>update that section to:</p>
<pre><code> if i != finalElem2 and i != penultElem:
          print(i, end=", ")
        if i == penultElem:
          print(i, end="")
        if i == finalElem2:
          print(" and ",i,".",sep="")
</code></pre>
<p>Here's the full updated code:</p>
<pre><code>def average1(nlist):
  length = len(nlist)
  finalElem2 = nlist[-1]
  penultElem = nlist[-2]
  sum_1 = 0
  print("The values contained in the list are as follows: ",end="")
  for i in nlist:
    if i != finalElem2 and i != penultElem:
      print(i, end=", ")
    if i == penultElem:
      print(i, end="")
    if i == finalElem2:
      print(" and ",i,".",sep="")
  print("The length of the list is",length,"values.")
  for i in nlist:
    sum_1 = sum_1 + int(i)
  average2 = sum_1 / length
  print("The average is",average2)

list1 = [1, 3, 5, 7]
average1(list1)
</code></pre>
<p>this prints:</p>
<pre><code>The values contained in the list are as follows: 1, 3, 5 and 7.
The length of the list is 4 values.
The average is 4.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strike>There is a much easier way. You can '<a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">unpack</a>' your list in place. This will work:-</strike></p>
<pre><code>"The values contained in the list are as follows: {}, {}, {} and {}.".format(*list1)
</code></pre>
<p>Although it's not so good if you have a varying number of elements in your list. I just wanted to let you see this method.
</p></div>
<div class="post-text" itemprop="text">
<p>I would recommend this way:</p>
<pre><code>def average1(nlist):
  length = len(nlist)
  finalElem2 = nlist[-1]
  penultElem = nlist[-2]
  sum_1 = 0
  print("The values contained in the list are as follows: ",end="")
  for i in nlist:
    if i not in (finalElem2, penultElem):
      print(i, end=", ")
    elif i == penultElem:
        print(i, end="")
    else:
      print(" and ",i,".",sep="")
  print("The length of the list is",length,"values.")
  for i in nlist:
    sum_1 = sum_1 + int(i)
  average2 = sum_1 / length
  print("The average is",average2)

average1(nlist)
</code></pre>
<p>The main improvement here is using a single <code>if/elif/else</code> block to more efficiently filter for the result you want. If you think in terms of which characters follow the numbers in the list: some end with <code>,</code> one ends with <code>and</code>, and the other ends with <code>.</code> So this is a good reason to use a single <code>if/else</code> block to handle these scenarios.</p>
<p>You could also make use of <code>pop()</code> to return elements from the end of the list twice:</p>
<pre><code>def average1(nlist):
  length = len(nlist)
  finalElem2 = nlist.pop()
  penultElem = nlist.pop()
  sum_1 = 0
  print("The values contained in the list are as follows: ",end="")
  for i in nlist:
      print(i, end=", ")
  print(penultElem, end=" and ")
  print(finalElem2, end=".")
  print()
  print("The length of the list is",length,"values.")
  for i in nlist:
    sum_1 = sum_1 + int(i)
  average2 = sum_1 / length
  print("The average is",average2)

average1(nlist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple way which uses <code>join</code> to handle the comma part and then just adds on the 'and' part afterwards. The trick is to do the string conversion first so that you can use <code>join</code>.</p>
<pre><code>def average1(nlist):
    length = len(nlist)
    sum_1 = 0
    stringlist = [str(i) for i in nlist]

    valuestring = ', '.join(stringlist[:-1])
    if length &gt; 1:
        valuestring += ' and '
    valuestring += stringlist[-1]

    print("The values contained in the list are as follows:", valuestring + '.')
    print("The length of the list is", length, "values.")
    for i in nlist:
        sum_1 = sum_1 + int(i)
    average2 = sum_1 / length
    print("The average is",average2)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/4440516/in-python-is-there-an-elegant-way-to-print-a-list-in-a-custom-format-without-ex">In Python, is there an elegant way to print a list in a custom format without explicit looping?</a></span>
<span class="comment-copy">Is <code>list1</code> of varying length in your use case?</span>
<span class="comment-copy">Yes I'd like it to work with a list of varying length.</span>
<span class="comment-copy">Brilliant! That's it. I didn't realise I needed to write <code>and i !=</code> instead of just <code>and</code>. Thanks so much.</span>
<span class="comment-copy">ah, yep, that's important to know <code>and penultElem</code> would just translate to (if there is a penultElem at all, nothing to do with i)</span>
<span class="comment-copy">you're welcome.</span>
<span class="comment-copy">What if he doesn't know how long his list will be?</span>
<span class="comment-copy">This will work for any number of elements <b>except 0 (<code>IndexError</code>) and 1 (empty space before <code>and</code>)</b>.</span>
<span class="comment-copy">@ChristianKÃ¶nig Good point.</span>
<span class="comment-copy">It's a good idea to break the list formatter out into it's own function. Helps with unit testing and keeping the sideways scrollbar away</span>
<span class="comment-copy">Thanks for the input!</span>
<span class="comment-copy">Thanks, I quite like the first way. The only issue is if there are repeating numbers in the list then it'll get confused (but I didn't say that there would be so this works for what I asked for). It looks like the second one returns the wrong average? I'm not entirely sure what's going on there. Thanks though!</span>
<span class="comment-copy">This is great actually. I didn't know about <code>join</code>. Thanks!</span>
<span class="comment-copy">On closer inspection I think this is probably the best method because it is compatible with lists containing repeated numbers, by avoiding what I did initially in defining the last and second-to-last list values as variables. And you can add <code>if/else</code> to check if the list has more than one element etc.</span>
<span class="comment-copy">@heds1 I've added the logic to check if the list has more than one element. The rest of the code doesn't work if you have zero elements, but that is also something one can add. If you found this useful, consider accepting the answer.</span>
