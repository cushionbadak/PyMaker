<div class="post-text" itemprop="text">
<p>I am a very novice coder who needs help combining and rearranging a lot of .txt data. I have 500 text files (actually there are .pts files, but that seems to be the same thing as .txt) with facial landmark coordinates extracted from photographs of people using CLM Facetracker. The output for each photo is like this (68 rows down):</p>
<p>version: 1</p>
<p>npoints: 68
{</p>
<p>216.512 146.425</p>
<p>217.526 166.783</p>
<p>219.63 187.059</p>
<p>(....)</p>
<p>}</p>
<p>which is equivalent to:</p>
<p>x1,y1</p>
<p>x2,y2</p>
<p>I wish to rearrange it so instead all the 68 landmark coordinates are in a single row with a comma in between each:</p>
<p>216.512, 146.425, 217.526, 166.783, 219.63, 187.059</p>
<p>x1, y1, x2, y2</p>
<p>Is there a simple way to do this? Ideally I would also like to add zeros so all landmark coordinates have the same amount of decimal places. Thanks in advance, and apologies if I am missing something super obvious :)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># read the data from "in.txt"
data_list = open('in.txt','r').read().split()

# format to 3 decimal places
data_fmt = []
for dl in data_list:
    try:
        data_fmt.append("{0:.3f}".format(float(dl)))
    except:
        print repr('Could not convert "{}"'.format(dl))

# join the list with a comma
data_str = ','.join(data_fmt)

# write the output to a file
with open('out.txt','w') as fout:
    fout.write(data_str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open(fileName, "r") as f:
    values = f.read().split()
print(", ".join(values))
</code></pre>
<p>If you want to have a certain number of decimal places, say 4: </p>
<pre><code>with open(filename, "r") as f:
    values = map(float, f.read().split())

s = []
for v in values:
    s.append("{:.4f}".format(v))

print(", ".join(s))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>read file(s)</li>
<li>read line(s)</li>
<li>replace whitespace with the separator</li>
<li>remove the end-of-line (newline and/or linebreak) character</li>
<li>add to new string</li>
<li>write resulting string into new file</li>
</ol>
<p>Try to get this to work (untested):</p>
<pre><code>newline = ""
with open("filename.pts", "r") as f: # 1
    for line in f: # 2
        line = line.replace(" ", ", ") # 3
        line = line.strip() # 4
        newline += line # 5

with open("newfilename.pts", "w") as f: # 6
    f.write(newline)

print("done!")
</code></pre>
<p>Some docs:
<a href="https://docs.python.org/3.4/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/3.4/library/functions.html#open</a>
<a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#string-methods</a></p>
<p>This can be written more compact, e.g. see @Nik's answer.</p>
<hr/>
<p>Use a text editor's search and replace function that supports special characters (whitespace, cr, lf). <a href="https://notepad-plus-plus.org/" rel="nofollow noreferrer">Notepad++</a> can do it, <a href="https://atom.io/" rel="nofollow noreferrer">Atom</a> too (and many others).</p>
</div>
<div class="post-text" itemprop="text">
<p>Not every answer can work with real input file. By real I understand containing <code>npoints : 68 {</code> etc. So – let me have a try.</p>
<hr/>
<p>Input file:</p>
<pre><code>version: 1
npoints: 68 {
216.512 146.425
217.526 166.783
219.63 187.059
}
</code></pre>
<p><em>Looks like dot occurs only as decimal mark. I'll premise that.</em></p>
<p>Output:</p>
<p><code>216.512, 146.425, 217.526, 166.783, 219.63, 187.059</code></p>
<hr/>
<p>Pure sed:</p>
<p><code>sed -E ':a;N;$!ba; s/\n/ /g; s/[^ | ^0-9 | ^\.]//g; s/[^0-9]+[^\.]+[^0-9][ ]//g; s/[ ]+$//; s/ /, /g; ' testData</code></p>
<p>It's maybe not beauty, but well... I just need to check if I still remember regex. Looks like I should improve it, but at least – it works.</p>
<hr/>
<p>Python:</p>
<pre><code>with open("testData.txt", "r") as f:
    data = f.read().split()
data = [ x for x in data if "." in x ]
print(", ".join(data))
</code></pre>
</div>
<span class="comment-copy">Do you really need python? And do you have Linux maybe? It's just like from awk manual ;)</span>
<span class="comment-copy">Don't really need Python no :) Just defaulted to that because the rest of my project pipeline uses Python and it's what my slim experience is in. Do not have Linux unfortunately.</span>
<span class="comment-copy">Definitely just use awk. :)</span>
<span class="comment-copy">Thanks so much. I got everything working except the #format to 3 decimal places. It returns:  data_list = ["{0:.3f}".format(float(dl)) for dl in data_list] Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt;   File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt; ValueError: could not convert string to float: 'version:'  I'm probably missing something obvious here</span>
<span class="comment-copy">If you have an empty string, space, newline etc. , then <code>float()</code> will throw an error. You need to sanitize the data in the list comprehension. Or you can add a try:except block to skip invalid data.</span>
