<div class="post-text" itemprop="text">
<p>I'm writing a program that find duplicated files, and right now I have a list of tuples as </p>
<pre><code>mylist = [(file1, size1, hash1),
          (file2, size2, hash2),
          ...
          (fileN, sizeN, hashN)]
</code></pre>
<p>I want to remove the entries that have a unique hash, leaving only the duplicates. I'm using</p>
<pre><code>def dropunique(mylist):
templist = []
while mylist:
    mycandidate = mylist.pop()
    templist.append([mycandidate])
    for myfile in mylist:
        if myfile[-1] == mycandidate[-1]:
            templist[-1].append(myfile)
            mylist.remove(myfile)
for myfile in templist:
    if len(myfile) != 1:
        mylist.append(myfile)
templist = [item for sublist in mylist for item in sublist]
return templist
</code></pre>
<p>where I pop an entry, look if there is other one with the same hash and group then in a list of list with the same hash. Then I make another list just with the sublists with len &gt; 1 and flat the resulting list of lists into a simple list.
My problem is that when I remove an entry from a list while using 'for myfile in mylist:' on the some list, it jumps same entries and live then behind.</p>
</div>
<div class="post-text" itemprop="text">
<p>Copy your list in a dictionary where the hash is the key, and on a second pass remove those with a single count - you can even use <code>collections.Counter</code> to spare one or two lines of code:</p>
<pre><code>from collections import Counter

counter = Counter(t[2] for t in list_)

result = [value for value in list_ if counter[value[2]] &gt; 1]
</code></pre>
<p>(Non-related tip: avoid naming your variables as "list" or "dict" - that overrides Python default built-ins for those)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a <a href="https://docs.python.org/3/library/collections.html#defaultdict-objects" rel="nofollow noreferrer"><em>defaultdict()</em></a> to group the tuples by their hashvalue:</p>
<pre><code>from collections import defaultdict

# Group the tuples by their hashvalues
d = defaultdict(list)
for tup in data:
    filename, size, hashvalue = tup
    d[hash].append(tup)

# Display groups of tuples that have more than one tuple
for hashvalue, tuples in d.items():
    if len(tuples) &gt; 1:
        print('Tuples with %r in common' % hashvalue)
        for tup in tuples:
            print(tup)
        print()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Solution using groupby</p>
<pre><code>from itertools import groupby

my_list = [(1, 2, 3),
           (1, 2, 3),
           (4, 5, 6)]


vals = []

for hash_val, items in groupby(sorted(my_list), hash):
    results = tuple(items)
    if len(results) &gt; 1:
        vals.append(results[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use double <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> like this:</p>
<pre><code>filter(lambda el: len(filter(lambda item: item[2] == el[2], my_list)) &gt; 1, my_list)
</code></pre>
<p><strong>Result:</strong></p>
<pre><code>&gt;&gt;&gt; my_list = [('file1', 'size1', 'hash1'), ('file2', 'size2', 'hash2'), ('file3', 'size3', 'hash3'), ('file4', 'size4', 'hash2')]
&gt;&gt;&gt;
&gt;&gt;&gt; filter(lambda el: len(filter(lambda item: item[2] == el[2], my_list)) &gt; 1, my_list)
[('file2', 'size2', 'hash2'), ('file4', 'size4', 'hash2')]
</code></pre>
<p>Note that in Python 3, <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> returns an iterator, so you'll need to convert it to a list like this: <code>list(filter(...))</code></p>
</div>
<span class="comment-copy">Deleting items while iterating through a list is analogous to jumping while the earth's tectonic plates are shifting rapidly.</span>
<span class="comment-copy">Please, don't use <code>list</code> as a variable name because you shadow the <code>list</code> type. Replace by <code>my_list</code>, for instance.</span>
<span class="comment-copy">This <code>{t[2]: t for t in list_}</code> throws away duplicates.</span>
<span class="comment-copy">There is no guarantee that their list is presorted, so <code>groupby</code> will not make whole groups as we expect</span>
<span class="comment-copy">Needs to be more like this: <code>key_fn = operator.itemgetter(1)</code> where <code>1</code> is the index of the "hash", and then <code>itertools.groupby(sorted(items, key=key_fn), key_fn)</code></span>
