<div class="post-text" itemprop="text">
<p>Is it possible to load a Latex package (like using <code>\usepackage</code>) inside a python code? For example,  I want to generate <a href="https://tex.stackexchange.com/questions/40210/how-to-specify-variant-tau/40219#40219">a variant font of the Greek letter \tau</a>. </p>
<p>Detexify suggests loading <code>upgreek</code> package in Latex and then using <code>\uptau</code> for the symbol. </p>
<p>If it is not possible, what could be an alternative way? </p>
</div>
<div class="post-text" itemprop="text">
<p>What do you want to do with those characters?</p>
<p>As far as I'm aware python won't natively support this, as it's not able to print those characters to the shell. It only <a href="https://docs.python.org/3/howto/unicode.html#definitions" rel="nofollow noreferrer">natively supports unicode</a>. There are some greek characters available.</p>
<p>If you want to display them then <a href="https://matplotlib.org/users/mathtext.html" rel="nofollow noreferrer">matplotlib</a> might be a good place to start.</p>
</div>
<div class="post-text" itemprop="text">
<p>Modern TeX engines support fonts in TrueType (ttf) and OpenType (otf) format.</p>
<p>Using the <a href="https://www.cairographics.org/pycairo/" rel="nofollow noreferrer">Python bindings</a> (<a href="https://www.cairographics.org/cookbook/pycairo_pango/" rel="nofollow noreferrer">example</a>) to the <code>cairo</code> and <code>pango</code> libraries, you should be able to use these fonts.</p>
<p>Alternatively, you could use <a href="https://pypi.python.org/pypi/freetype-py" rel="nofollow noreferrer">freetype-py</a>. This will load characters from fonts as bitmaps.</p>
<p>Which one works best for your purpose is hard to say without further information on what you want to do with the fonts.
If you want to output small amoumts of text in PDF or SVG format, <code>cairo</code> would be the way to go.</p>
<p>To the best of my knowledge, neither Python (nor cairo) can deal with MetaFont fonts.</p>
<p>A third way would be for your script to output (La)TeX code, and let the TeX engine render it. This would be my choice if you had to render a large amount of text because TeX can then deal with things like formatting, line breaking hyphenation and other typesetting related issues.</p>
</div>
<span class="comment-copy">Finally after a few more searches, I found <code>pgf</code>  to be useful in the <code>matplotlib</code> context and this link has some working examples :  <a href="https://matplotlib.org/users/pgf.html" rel="nofollow noreferrer">matplotlib.org/users/pgf.html</a> .</span>
<span class="comment-copy">Exactly, I want to use it in the legends/labels of a plot. (Do I need to edit my question?)</span>
<span class="comment-copy">Then I would follow the matplotlib link; you'll probably have to have your own LaTeX build it rather than use the built-in one if you want to use packages though. You can find more details on that <a href="https://matplotlib.org/users/usetex.html#usetex-tutorial" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Thanks, but the links doesn't tell how to load TeX packages. I found using <code>pgf</code> is useful and demos can be found <a href="https://matplotlib.org/users/pgf.html" rel="nofollow noreferrer">here</a>. For my example, I have tested with <code>\upgreek</code> package and successfully rendered <code>\uptau</code> symbol. :)</span>
