<div class="post-text" itemprop="text">
<p>I have several files across several folders like this:</p>
<pre><code>dir
├── 0
│   ├── 103425.xml
│   ├── 105340.xml
│   ├── 109454.xml
│
│── 1247
│   └── doc.xml
├── 14568
│   └── doc.xml
├── 1659
│   └── doc.xml
├── 10450
│   └── doc.xml
├── 10351
│   └── doc.xml
</code></pre>
<p>How can I extract all the documents into a single folder appending the folder name for each moved document:</p>
<pre><code>new_dir
├── 0_103425.xml
├── 0_105340.xml
├── 0_109454.xml
├── 1247_doc.xml
├── 14568_doc.xml
├── 1659_doc.xml
├── 10450_doc.xml
├── 10351_doc.xml
</code></pre>
<p>I tried to extract them with:</p>
<pre><code>import os

for path, subdirs, files in os.walk('../dir/'):
    for name in files:
        print(os.path.join(path, name))
</code></pre>
<p><strong>UPDATE</strong></p>
<p>Also, I tried to:</p>
<pre><code>import os, shutil
from glob import glob

files = []
start_dir = os.getcwd()
pattern   = "*.xml"

for dir,_,_ in os.walk('../dir/'):
    files.extend(glob(os.path.join(dir,pattern))) 
for f in files:
    print(f)
    shutil.move(f, '../dir/')
</code></pre>
<p>The above gave me the path of each file. However, I do not understand how to rename and move them:</p>
<pre><code>---------------------------------------------------------------------------
Error                                     Traceback (most recent call last)
&lt;ipython-input-50-229e4256f1f3&gt; in &lt;module&gt;()
     10 for f in files:
     11     print(f)
---&gt; 12     shutil.move(f, '../dir/')

/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6/lib/python3.6/shutil.py in move(src, dst, copy_function)
    540         real_dst = os.path.join(dst, _basename(src))
    541         if os.path.exists(real_dst):
--&gt; 542             raise Error("Destination path '%s' already exists" % real_dst)
    543     try:
    544         os.rename(src, real_dst)

Error: Destination path '../data/230948.xml' already exists
</code></pre>
<p>The above error shows why I would like to rename it with its folder.</p>
</div>
<div class="post-text" itemprop="text">
<p>How does this work for you?</p>
<pre><code>import os
import pathlib

OLD_DIR = 'files'
NEW_DIR = 'new_dir'

p = pathlib.Path(OLD_DIR)
for f in p.glob('**/*.xml'):
    new_name = '{}_{}'.format(f.parent.name, f.name)
    f.rename(os.path.join(NEW_DIR, new_name))
</code></pre>
<p>If you don't have a modern version of Python (3.5+) you can also just use glob, os, and shutil:</p>
<pre><code>import os
import glob
import shutil


for f in glob.glob('files/**/*.xml'):
    new_name = '{}_{}'.format(os.path.basename(os.path.dirname(f)), os.path.basename(f))
    shutil.move(f, os.path.join('new_dir', new_name))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is easiest to do with Python 3's new <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> module for path operations, and then <a href="https://docs.python.org/3/library/shutil.html#shutil.move" rel="noreferrer"><code>shutil.move</code></a> for moving the files into their correct places. Unlike <a href="https://docs.python.org/3.4/library/os.html#os.rename" rel="noreferrer"><code>os.rename</code></a>, <code>shutil.move</code> will work like the <code>mv</code> command and behave correctly even for cross-filesystem moves.</p>
<p>This code will work for paths nested to any level - any <code>/</code> or <code>\</code> in the paths will be replaced with <code>_</code> in the target filename, so <code>dir/foo/bar/baz/xyzzy.xml</code> will be moved to <code>new_dir/foo_bar_baz_xyzzy.xml</code>.</p>
<pre><code>from pathlib import Path
from shutil import move

src = Path('dir')
dst = Path('new_dir')

# create the target directory if it doesn't exist
if not dst.is_dir():
    dst.mkdir()

# go through each file
for i in src.glob('**/*'):
    # skip directories and alike
    if not i.is_file():
        continue

    # calculate path relative to `src`,
    # this will make dir/foo/bar into foo/bar
    p = i.relative_to(src)

    # replace path separators with underscore, so foo/bar becomes foo_bar
    target_file_name = str(p).replace('/', '_').replace('\\', '_')

    # then do rename/move. shutil.move will always do the right thing
    # note that it *doesn't* accept Path objects in Python 3.5, so we
    # use str(...) here. `dst` is a path object, and `target_file_name
    # is the name of the file to be placed there; we can use the / operator
    # instead of os.path.join.
    move(str(i), str(dst / target_file_name))
</code></pre>
</div>
<span class="comment-copy">Wow.... this was easier, I did not know about <code>pathlib</code>.</span>
<span class="comment-copy">I also added how you could do it with shutil, os, and glob.</span>
<span class="comment-copy">I am in python3 actually!</span>
<span class="comment-copy">Thanks antti, great answe!</span>
