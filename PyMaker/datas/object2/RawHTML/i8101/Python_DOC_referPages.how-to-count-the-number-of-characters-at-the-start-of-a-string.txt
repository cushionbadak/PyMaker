<div class="post-text" itemprop="text">
<p>How can I count the number of characters at the start/end of a string in Python?</p>
<p>For example, if the string is</p>
<pre><code>'ffffhuffh'
</code></pre>
<p>How would I count the number of <code>f</code>s at the <strong>start</strong> of the string? The above string with a <code>f</code> should output 4.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow noreferrer"><code>str.count</code></a> is not useful to me as a character could be in the middle of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>A short and simple way will be to use the <code>str.lstrip</code> method, and count the difference of length.</p>
<pre><code>s = 'ffffhuffh'
print(len(s)-len(s.lstrip('f')))
# output: 4
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.lstrip" rel="noreferrer"><code>str.lstrip([chars])</code></a>:</p>
<blockquote>
<p>Return a copy of the string with leading characters removed. The chars
  argument is a string specifying the set of characters to be removed.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Try this, using <a href="https://docs.python.org/2/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer">itertools.takewhile()</a>:</p>
<pre><code>import itertools as it

s = 'ffffhuffh'
sum(1 for _ in it.takewhile(lambda c: c == 'f', s))
=&gt; 4
</code></pre>
<p>Similarly, for counting the characters at the end:</p>
<pre><code>s = 'huffhffff'
sum(1 for _ in it.takewhile(lambda c: c == 'f', reversed(s)))
=&gt; 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <em>regular expression</em> with <a href="https://docs.python.org/3/library/re.html#re.match" rel="nofollow noreferrer"><code>re.match</code></a> to find the occurrence of any character at the start of the string as:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; my_str = 'ffffhuffh'
&gt;&gt;&gt; my_char = 'f'

&gt;&gt;&gt; len(re.match('{}*'.format(my_char), my_str).group())
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on Oscar Lopez's answer, I want to handle the case you mention of the end of the string: use <code>reversed()</code></p>
<pre><code>import itertools as it

my_string = 'ffffhuffh'

len(list(it.takewhile(lambda c: c == my_string[-1], reversed(my_string))))
=&gt; 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a function and iterate through your string and return the count of the desired char in the input string's beginning or end like this example:</p>
<pre><code># start = True: Count the chars in the beginning of the string
# start = False: Count the chars in the end of the string
def count_char(string= '', char='', start=True):
    count = 0
    if not start:
        string = string[::-1]

    for k in string:
        if k is char:
            count += 1
        else:
            break
    return count

a = 'ffffhuffh'
print(count_char(a, 'f'))
b = a[::-1]
print(count_char(b, 'f', start=False))
</code></pre>
<p>Output:</p>
<pre><code>4
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may also use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to find the count of the occurrence of the first element at the start of the string as:</p>
<pre><code>from itertools import groupby

def get_first_char_count(my_str):
    return len([list(j) for _, j in groupby(my_str)][0])
</code></pre>
<p>Sample run:</p>
<pre><code>&gt;&gt;&gt; get_first_char_count('ffffhuffh')
4
&gt;&gt;&gt; get_first_char_count('aywsnsb')
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>re.sub select first letter with repeat( (^(\w)\2*) ), len count frequency.</p>
<pre><code>len(re.sub(r'((^\w)\2*).*',r'\1',my_string))
</code></pre>
</div>
<span class="comment-copy"><code>sum(1 for _ in takewhile(lambda c: c == 'f', 'ffffhuffh'))</code> avoids building a list.</span>
<span class="comment-copy">@timgeb nice! I updated my answer with your suggestion, thanks!</span>
<span class="comment-copy">I suggest <code>re.match(...).group()</code> instead of <code>re.findall(...)[0]</code> to avoid searching the entire string.</span>
<span class="comment-copy">@Rawing Fair point. Updated the answer. Thanks!</span>
