<div class="post-text" itemprop="text">
<p>In my program, I wanted a variable global only under some circumstances. Say it looks like this:</p>
<pre><code>a = 0
def aa(p):
    if p:
        global a
    a = 1
    print("inside the function " + str(a))


print(a)
aa(False)
print("outside the function " + str(a))
</code></pre>
<p>I was expecting the result to be:</p>
<pre><code>0
inside the function 1
outside the function 0
</code></pre>
<p>However it turned out to be:</p>
<pre><code>0
inside the function 1
outside the function 1
</code></pre>
<p>So, I was thinking, "Okay maybe the Python compiler makes the variable global whenever it sees the 'global' keyword no matter where it is located". Is this how Python works with global vars? Am I misunderstanding?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you're understanding things correctly. </p>
<p>The <code>global</code> statement isn't something that's evaluated at runtime. It's really a <em>directive</em> to the <em>parser</em> that essentially tells it to treat all listed identifiers (<code>a</code> here) as referring to the global scope. From the docs on <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">the <code>global</code> statement</a>:</p>
<blockquote>
<p>The global statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals.</p>
</blockquote>
<p>It then continues to state how <code>global</code> is really is a <em>directive</em>:</p>
<blockquote>
<p>Programmerâ€™s note: <code>global</code> is a directive to the parser.</p>
</blockquote>
<p>Using it <em>conditionally</em> doesn't make any difference: its presence has already been detected in the parsing stage and, as a result, the byte-code generated for grabbing the names has already been set to look in the global scope (with <code>LOAD/STORE GLOBAL</code>).</p>
<p>This is why, if you <code>dis.dis</code> a function containing a <code>global</code> statement, you won't see any relevant byte-code for <code>global</code>. Using a silly function:</p>
<pre><code>from dis import dis
def foo():
    "I'm silly"
    global a  

dis(foo)
  2           0 LOAD_CONST               0 (None)
              2 RETURN_VALUE
</code></pre>
<p>Nothing is generated for <code>global a</code> because the information it provides has already been used!</p>
</div>
