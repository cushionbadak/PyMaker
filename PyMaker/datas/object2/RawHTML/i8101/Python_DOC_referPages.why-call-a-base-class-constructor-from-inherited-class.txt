<div class="post-text" itemprop="text">
<p>I have been trying to understand this use case, where we often call a base class constructor from the inherited class, is the sole purpose of doing that is to just ensure that the base class is initialized? Or, would there be other possible use cases?</p>
<pre><code>class Base:
    def __init__(self):
        print('Base.__init__')


class A(Base):
    def __init__(self):
        super().__init__()
        print('A.__init__')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is the sole purpose of doing that is to just ensure that the base class is initialized?</p>
</blockquote>
<p>Well yes, but what do you mean, <em>just</em>?</p>
<p>Assuming your base class has a reason to exist, it must <em>do</em> something.</p>
<p>Unless it's just a convenient collection of <code>@staticmethod</code> functions, whatever it does <em>might</em> depend on its <code>__init__</code> having been called, because that's how class objects work.</p>
<p>Even if your base class has an empty <code>__init__</code> today, it's sensible to call it, in case that changes in the future.</p>
<blockquote>
<p>Or, would there be other possible use cases?</p>
</blockquote>
<p>The use case is to make sure that the base class part of your object is correctly initialized. Without that, you can't safely call <em>any</em> of its non-static methods.</p>
<p>In principle your base class could do something tricksy in its <code>__init__</code> (starting a background thread, or registering the instance with some singleton, or ... whatever). So yes, there could be effects other than just assigning instance variables, but this is still part of initializing an object of that base class.</p>
</div>
<div class="post-text" itemprop="text">
<p>In C++ or Java, the compiler will require you to call the base class constructor (either by automatically inserting a zero-argument call or by giving you an error).</p>
<p>Python requires you to call it yourself, <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer">as it is written</a>:</p>
<blockquote>
<p>If a base class has an <code>__init__()</code> method, the derived classâ€™s <code>__init__()</code> method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance</p>
</blockquote>
<p>The reason why is a principle of object oriented design. An <code>A</code> "is-a" <code>Base</code>, which could also be written equivalently as an <code>A</code> "has-a" <code>Base</code>. Unless you specifically want to interfere with the implementation of <code>Base</code>, you have to allow the object to be initialized as designed. Skipping the constructor will leave the <code>Base</code> object improperly initialized, disappointing anyone who expects it to behave as a <code>Base</code> object ought to.</p>
<p>When overriding a method besides the constructor, it is the programmer's discretion to delegate to the base class implementation or to override it entirely. This can still lead to incorrect behavior --- several API docs I can think of pepper the documentation with "If you override this method, you should call super" for various methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>The point of this is to initialize all the stuff the base class usually initializes. For example,</p>
<pre><code>class Base:
    def __init__(self, number):
        print('Base.__init__')
        self.number = number


class A(Base):
    def __init__(self, number, string):
        super().__init__(number)
        self.string = string
        print('A.__init__')
</code></pre>
<p>In this code example it's more obvious. When <code>A</code> calls the base constructor, the base constructor will initialize all of the stuff needed, such as <code>self.number</code>. This way, the rest of <code>A</code>'s initialization function can build on top of the base initialization function without any retyping. In this example, <code>A</code> is building on top of <code>Base</code> by adding <code>self.string</code> on top of <code>self.number</code>.</p>
</div>
<span class="comment-copy">Thanks for your answer, I was looking more for a practical use case using which I can really understand the concept of calling base class methods from the Child class, I guess I am lacking the experience where I haven't really leveraged the full power of inheritance in my code design.</span>
<span class="comment-copy">In C++ at least, base-class default constructors will be called implicitly if omitted. You only need to call it explicitly if it takes arguments.</span>
