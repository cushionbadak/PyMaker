<div class="post-text" itemprop="text">
<p>Why does a "?" character appear in the following hex value? (I am using Python 3.5.1)</p>
<p>My aim is to convert <code>string</code> into hex value pairs.</p>
<pre><code>string = b'3f8ccccd'
hexpairs = binascii.unhexlify(string)
</code></pre>
<p>The value for <code>hexpairs</code> I get is this:</p>
<pre><code>b'?\x8c\xcc\xcd'
</code></pre>
<p>What is the significance of the <code>?</code> character? I would have expected the output to have been:</p>
<pre><code>b'\x3f\x8c\xcc\xcd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The ? occurs due to the fact that unhexlify has used 3F as a byte code, which is the ASCII code for '?'. Thus, Python has displayed these bytes as an ASCII code.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Benedict answer's is correct, Here is some sources to help you understand:</p>
<ul>
<li><a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow noreferrer">binascii.unhexlify()</a> official python documentation.</li>
<li><a href="https://en.wikipedia.org/wiki/ASCII" rel="nofollow noreferrer">wikipedia -- ascii table</a></li>
</ul>
<blockquote>
<p>Originally based on the English alphabet, ASCII encodes 128 specified
  characters into seven-bit integers as shown by the ASCII chart
  above.[8] The characters encoded are numbers 0 to 9, lowercase letters
  a to z, uppercase letters A to Z, basic punctuation symbols, control
  codes that originated with Teletype machines, and a space. For
  example, lowercase j would become binary 1101010 and decimal 106.
  ASCII includes definitions for 128 characters: 33 are non-printing
  control characters (many now obsolete)[9] that affect how text and
  space are processed[10] and 95 printable characters, including the
  space</p>
</blockquote>
<ul>
<li><a href="http://ascii.cl/" rel="nofollow noreferrer">The ascii table values</a></li>
<li><a href="http://calc.50x.eu/" rel="nofollow noreferrer">Convertor to hexa, decimal, octal, ascii</a></li>
</ul>
<p>For <code>?</code> character:</p>
<ul>
<li><em>binary</em>: 00111111. in python, <code>chr(0b00111111)</code> will output <code>?</code></li>
<li><em>octal</em>: 77.        in python <code>chr(0o77)</code>        will output <code>?</code></li>
<li><em>decimal</em>: 63.      in python <code>chr(63)</code>          will output <code>?</code></li>
<li><em>hexadecimal</em>: 3F.    in python <code>chr(0x3f)</code>        will output <code>?</code></li>
</ul>
<p>As you can see, you can use prefixes like <code>0b</code>, <code>0o</code>, or <code>0x</code> before <code>int</code> to make python understand you are not working with decimal numbers. </p>
<p>However <code>0x8C</code> is out of the ascii table (because it goes from 0 to 127). <code>0x8C</code> being 140 in decimal it cannot display the equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>This problem can be solved by the below given way.</p>
<pre><code>hexastring = r'\xc3\xb9asdfsadf\xc3\xa9 asdfsdfsdf \xc3\x80 sdfsdfsdfdsf \xc3\xba'

hexaValueList = re.findall(r'((?:\\x[a-f\d]{2})+)',hexastring)
for hexaValue in hexaValueList:
    beforeReplace = hexaValue
    xReplace = re.sub(r'\\x','',hexaValue)
    hex2String = bytearray.fromhex(xReplace).decode()
    hexastring = re.sub(re.escape(beforeReplace),hex2String,hexastring)

print (hexastring)
</code></pre>
<p>Answer </p>
<p>ùasdfsadfé asdfsdfsdf À sdfsdfsdfdsf ú</p>
</div>
<span class="comment-copy">The bytes whose values correspond to characters in ASCII are displayed as these characters. And 0x3F is the ASCII code for "?"</span>
<span class="comment-copy">That's it! Thank you.</span>
<span class="comment-copy">@Hefaestion if you want the output as written as your expected string: <code>"".join("\\x{}".format(char.decode()) for char in (string[i:i+2] for i in range(0, len(string), 2))).encode()</code></span>
