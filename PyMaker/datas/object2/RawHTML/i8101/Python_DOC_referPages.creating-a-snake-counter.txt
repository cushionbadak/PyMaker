<div class="post-text" itemprop="text">
<p>I'm just trying to get the logic straight and using Python to help me do it.  Ultimately, I need to solve this problem using ImageJ macro language.</p>
<p>I have no idea if I'm using the right term, but I'd like to create a "snake" counter.</p>
<pre><code>x = 1
number = 12
maxVal = 3
minVal = 1

for i in xrange(number):
    %do something
    x = incrementSnakeCounter(x, maxVal, minVal)
    print("i = ", i)
    print("x = ", x)
</code></pre>
<p>The "snake" part is making the counter go up only to the <code>maxVal</code>, repeating that number on the next iteration, counting down to the <code>minVal</code>, repeating that value on the next iteration, and repeating the process.  </p>
<p>For instance, in the above</p>
<p>I'd like the following to happen :  </p>
<pre><code>i = 0
x = 1

i = 1
x = 2

i = 2
x = 3

i = 3
x = 3

i = 4
x = 2

i = 5
x = 1

i = 6
x = 1

i = 7
x = 2

i = 8
x = 3

i = 9
x = 3

i = 10
x = 2

i = 11
x = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a silly mathematical solution:</p>
<pre><code>def snake(low, high, x):
    k = (high-low+1)
    return k - int(abs(x % (2*k) + low - k - 0.5))

[snake.snake(1,3,x) for x in range(8)]
[1, 2, 3, 3, 2, 1, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will find some useful utils in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>:</p>
<pre><code>from itertools import chain, cycle

def snake(lower, upper):
    return cycle(chain(range(lower, upper+1), range(upper, lower-1, -1)))

&gt; s = snake(1,3)

&gt; [next(s) for _ in range(10)]
[1, 2, 3, 3, 2, 1, 1, 2, 3, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add a conditional to determine if x should be increasing or decreasing at any given point within the loop.</p>
<pre><code>x = 1
number = 12
maxVal = 3
minVal = 1

for i in xrange(number):
    %do something
    if(xIsIncreasing)
        x = incrementSnakeCounter(x, maxVal, minVal)
    else
        x = decrementSnakeCounter(x, maxVal, minVal)
    print("i = ", i)
    print("x = ", x)
</code></pre>
<p>Then inside your incrementSnakeCounter() change the value of xIsIncreasing to false when x == maxVal and inside your decrementSnakeCounter() to true when x == minVal (you'll have to do some work to make sure that you're staying at the same value twice in a row, I don't have time right now to solve that part for you).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write a little custom generator.</p>
<p>The key is to create a list of the pattern you want to repeat <code>[1, 2, 3, 3, 2, 1]</code> and then index that with the modulo of the length to get the repeating behavior:</p>
<pre><code>def snake(x, max_v=3, min_v=1):
    cnt=0
    sn=list(range(min_v, max_v+1,1))+list(range(max_v, min_v-1,-1))
    while cnt&lt;x:
        yield cnt, sn[cnt%len(sn)]
        cnt+=1
</code></pre>
<p>Then:</p>
<pre><code>for i,x in snake(12):
    print("i=",i)
    print("x=",x)   
    print() 
</code></pre>
<p>Prints:</p>
<pre><code>i= 0
x= 1

i= 1
x= 2

i= 2
x= 3

i= 3
x= 3

i= 4
x= 2

i= 5
x= 1

i= 6
x= 1

i= 7
x= 2

i= 8
x= 3

i= 9
x= 3

i= 10
x= 2

i= 11
x= 1
</code></pre>
</div>
<span class="comment-copy">Great solution!  This works perfectly in my application.  Just needed to replace <code>int</code> with <code>floor</code> since <code>int</code> isn't available in ImageJ macro language.</span>
<span class="comment-copy">This is a good solution.  Unfortunately, I need to implement it in ImageJ macro language.  I should have made it clear that python was for illustration only.</span>
<span class="comment-copy">This isn't going to work if your min or max values ever change.</span>
<span class="comment-copy">@agf1997 imagej-macro has its own tag on stackoverflow. So sorry for that. I guess the logic itself should not be be too difficult to pin down in any language or pseudo-code.</span>
<span class="comment-copy">@GlenPierce It was never mentioned in the question that they ever were to change.</span>
<span class="comment-copy">@agf1997 dawg's answer has a modulo-based approach that should translate well to most languages.</span>
