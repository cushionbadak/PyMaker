<div class="post-text" itemprop="text">
<p>I have a raw file as :</p>
<pre><code>RollNo    Address1    City    State    ZipCode    Age    Branch    Subject    Marks1    Marks2
10000        6505 N MGM W   ROAD                                                                                  MMUMBAI CITY                   IN      46360                          77          0              0             -1          1 
10002        1721 HAZAREER DR. DR. UNIT 8                                                                         BELAGHIA                       FL      33756                          86          0              0             -1          2
</code></pre>
<p>How can I convert this to a comma separated file in python as:</p>
<pre><code>RollNo,Address1,City,State,ZipCode,Age,Branch,Subject,Marks1,Marks2
10000,6505 N MGM W   ROAD,MMUMBAI CITY,IN,46360,77,0,0,-1,1 
10002,1721 HAZAREER DR. DR. UNIT 8,BELAGHIA,FL,33756,86,0,0,-1,2
</code></pre>
<p>I tried to convert it to a list, so later i can convert it to a comma separated string, using \t as the delimiter, but seems like it won't give me the desired output.</p>
<p>My code was:</p>
<pre><code>files_list=[[i for i in line.strip().split('    ')] for line in open('C:/Users/Vinny/Desktop/Python/file2cnvrt.txt').readlines()]
</code></pre>
<p>The output I got:</p>
<pre><code>[['RollNo', 'Address1', 'City', 'State', 'ZipCode', 'Age', 'Branch', 'Subject', 'Marks1', 'Marks2'], 
['10000        6505 N MGM W   ROAD                                                                                  MMUMBAI CITY                  IN      46360                          77          0              0             -1          1'], 
['10002        1721 HAZAREER DR. DR. UNIT 8                                                                         BELAGHIA                      FL      33756                          86          0              0             -1          2']]
</code></pre>
<p>Can anyone suggest ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def read_file(filename):
    indices = [13, 113, 145, 153, 184, 196, 211, 225, 237, 0]
    columns = []
    data = []
    with open(filename) as f:
        lines = f.readlines()
    columns = lines[0].strip().split('    ')
    for line in lines[1:]:
        row = []
        line = line.strip()
        for i in range(len(indices) - 1):
            row.append(line[indices[i-1]:indices[i]].rstrip())
        data.append(row)
    return [columns] + data
</code></pre>
<p>The indices were gathered from the data you gave us. I assumed that everything was perfectly aligned.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may not be the most optimised way, though it produces a comma separated file of the values. Where FILE_IN and FILE_OUT are the filenames of input and output files respectively.</p>
<pre><code># Read file lines to list as values
file_in = open(FILE_IN, 'r')
lines_of_values = []
for line in file_in:
    # Split line, remove whitespace and remove empty fields
    line_values = list(filter(None, line.strip().split('    ')))
    values = [value.strip() for value in line_values]
    lines_of_values.append(values)
file_in.close()

# Open file to save comma separated values
file_out = open(FILE_OUT, 'w')
for values in lines_of_values:
    print("{:s}".format(",".join(values)), file=file_out)
file_out.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Several things. First of all, don't use <code>open()</code> directly in your list comprehension. </p>
<p>If you want to use <code>open()</code>, always use a context manager, which guarantees that the file will be closed when you are done with it: </p>
<pre><code>with open('filename..txt') as f: 
    lines = f.readlines()
</code></pre>
<p>Second: you'll find your life a lot easier to not bother with <code>open()</code> at all and start using the amazing <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> module</a>. </p>
<pre><code>import Path from pathlib
f_path = Path('C:/Users/Vinny/Desktop/Python/file2cnvrt.txt')
# get text as one big string:
file_str = f_path.read_text()
# get text as a tuple of lines (splits along new line characters):
lines_tuple = f_path.read_text().split('\n')
# get text as a list of lines (use a list if you intend to edit the lines):
lines = list(f_path.read_text().split('\n'))
</code></pre>
<p>Third: instead of copying and pasting the entire path to your desktop, you can automatically find its location using the Windows USERPROFILE environment variable: </p>
<pre><code>from pathlib import Path
import os
# os.getenv just gives you a dictionary with all the Windows environment variables 
# (such as USERPROFILE and APPDATA)
user_folder_str = os.getenv['%USERPROFILE%']
desktop_path = Path(user_folder_str)/'Desktop'
file_path = Path(user_folder_str)/'Desktop'/'my_file.txt'
lines = list(file_path.read_text().split('\n'))
</code></pre>
<p>Fourth: it appears that the sample raw file you pasted does not have any tab characters (<code>'\t'</code>) in it. It has 4 spaces (<code>'    '</code>) instead. If this is actually the case, this should work: </p>
<pre><code>[[i for i in line.strip().split('    ') if i] for line in lines]
</code></pre>
<p>Note the <code>if i</code> part. That makes sure any <em>consecutive</em> sets of 4 spaces don't put empty strings (<code>''</code>) in your list. </p>
<p>However, your pasted code- which is equivalent to the above- is producing the wrong result. I think it may be because your second and third line actually <em>do</em> have tab characters (<code>'\t'</code>) in them rather than 4 spaces. So you'll need to <code>split()</code> using both 4 spaces and a tab character. </p>
<p>The easiest way to do this is to replace the tabs with 4 spaces. Use the same <code>if i</code> again to avoid empty strings. </p>
<pre><code>[[i for i in line.strip().replace('\t', '    ').split('    ') if i] for line in lines]
</code></pre>
</div>
<span class="comment-copy">Are all the lines aligned similarly? If they aren't tab delimited, you may have some luck just doing straight slices</span>
<span class="comment-copy">It seems you have several answers here. If one of them has solved your problem, don't forget to <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept one</a></span>
<span class="comment-copy">I tested this code. Works fine. Only thing is that it gives me \t in the header. For example, RollNo\tAddress1\tCity\tState\tZipCode\tAge\tBranch\tSubject\tMarks1\tMarks2</span>
<span class="comment-copy">@VinnyKaur then where it says <code>columns = lines[0].strip().split('         ')</code> change it to <code>columns = lines[0].strip().split('\t')</code></span>
