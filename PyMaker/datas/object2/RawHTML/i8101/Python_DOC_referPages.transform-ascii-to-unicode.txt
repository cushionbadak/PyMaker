<div class="post-text" itemprop="text">
<p>I am not able to convert</p>
<pre><code>'Schutzt\xc3\xbcren'.encode("utf-8")
</code></pre>
<p>the following to unicode, but cannot, getting the error</p>
<blockquote>
<p>UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 7: ordinal not in range(128)</p>
</blockquote>
<p>I would like to get</p>
<pre><code>'Schutztüren'
</code></pre>
<p>as a result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your string is already in <code>utf-8</code>. You need to <em>decode</em> it to Unicode in order to use it inside Python:</p>
<pre><code>print 'Schutzt\xc3\xbcren'.decode("utf-8")
</code></pre>
<p>But you have a bigger problem: You are clearly using Python 2. Switch to Python 3 immediately, there is no reason to drive yourself crazy trying to understand the Python 2 approach to handling character encodings. Switch to Python 3 and you will not have to bang your head against your desk several times a day. (Note that although you were calling the <code>encode()</code> method, you got a <code>
Unicode<strong>Decode</strong>Error</code>. </p>
<p>A simple explanation:</p>
<ul>
<li>In Python, <code>unicode</code> and <code>utf-8</code> are different things. A <code>str</code> in Python 2 might be in the <code>"utf-8"</code> encoding, <code>unicode</code> objects have no encoding.</li>
<li>If you try to use a <code>str</code> for something that requires <code>unicode</code> (e.g., to <code>encode()</code> it), or vice versa, Python 2 will try to implicitly convert it first. Except it doesn't know the encoding of your strings, so it guesses (<code>ascii</code>, in your case). Oops.</li>
<li>Python2 has a lot of implicit conversions. </li>
</ul>
<p>But really the reason is simple: You are not using Python 3.</p>
<p><strong>Edit:</strong> Since Python 3 is not an option, here is some practical advice:</p>
<ol>
<li><p><a href="https://nedbatchelder.com/text/unipain/unipain.html" rel="nofollow noreferrer">Unicode sandwich</a>: Convert all text to Unicode as soon as it's read in, work with <code>unicode</code> strings and encode back to a utf8 <code>str</code> only to write it out again.</p></li>
<li><p>Pandas should still support the <code>encoding</code> argument to <code>to_csv()</code>, even on Python 2. Use it to write your files in <code>utf8</code>.</p></li>
<li><p>For reading a file directly, use <code>codecs.open()</code> instead of plain <code>open()</code> to read files. It accepts the <code>encoding=</code> argument and will give you <code>unicode</code> strings.  </p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>decode</code> utf-8 encoded string to unicode instead.</p>
<pre><code>'Schutzt\xc3\xbcren'.decode("utf-8")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in python 3 you'd need to <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>decode</code></a> the <code>bytes</code> that are your encoded string:</p>
<pre><code>b'Schutzt\xc3\xbcren'.decode("utf-8")
</code></pre>
<p>in python 2 the <code>b</code> is not necessary (here the distinction between bytes and strings is less strict...).</p>
</div>
<span class="comment-copy">Oups, <code>''Schutzt\xc3\xbcren''</code> is not ASCII! ASCII codes must be in range 1-127. It is the utf-8 encoded byte string for <code>'Schutztüren'</code>. In the same idea, you encode a unicode string to a byte string with an encoding and decode a byte string to an unicode string.</span>
<span class="comment-copy">@SergeBallesta: I have tuples that contain these strings and these tuples are cells in a DataFrame that I save to disk with <code>.to_csv</code>. I get these ugly strings. How do I get them on disk in a nice format?</span>
<span class="comment-copy">@Make42, switch to Python3, then add <code>encoding="utf8"</code> both to <code>df.to_csv()</code> and and when you read your file. Everything will Just Work.</span>
<span class="comment-copy">@alexis: No can do. Company policy for now.</span>
<span class="comment-copy">Saw your other message, I sympathize. See my reply there.</span>
<span class="comment-copy">Sure, I would love to, but... company policy for now.</span>
<span class="comment-copy">Ouch... you're in for a world of hurt. If it's a new project, try the <a href="https://nedbatchelder.com/text/unipain/unipain.html" rel="nofollow noreferrer">"unicode sandwich"</a> approach (convert everything to unicode as soon as you read it, convert back to <code>str</code> only when writing to files).</span>
<span class="comment-copy">I've been using Python2 since 1999, still using it daily, and I never feel the need to "bang my head against my back". Python2 "approach to handling character encodings" is nothing complicated, really - unless you don't have a clue about unicode, byte strings and encodings of course but then Python3 won't help.</span>
<span class="comment-copy">@bruno, that's because you have been using it since 1999! :-) Of course it works pretty well if you already know it. But wrapping one's head around this now, when Python 3 is available, is useless pain. And Python 3 will help <i>a lot</i> if you don't have a clue. I teach this stuff so I say so from experience. The Python 2 version isn't worth the trouble to teach to beginners-- and by extension to anyone, unless they have no other choice.</span>
<span class="comment-copy">It worked. Can you explain how you came to this solution?</span>
<span class="comment-copy"><code>'Schutzt\xc3\xbcren'.decode("utf-8")</code> results in <code>u'Schutzt\xfcren'</code> - so not working for me.</span>
<span class="comment-copy">To explain in bit more detail, utf-8 is an encoding to store unicode characters. Normally a unicode character is formed of 2 bytes i.e. 16 bits. Conventionally ascii characters used to be stored and represented by single byte. So utf-8 is an encoding that allows unicode characters to be stored separately in two separate bytes, and then combine them for rendering them as unicode characters.</span>
<span class="comment-copy">@Make42: it works. <code>'\xfc'</code> is the unicode code for <code>'ü'</code>, or in unicode notation U+00FC. <code>print 'Schutzt\xc3\xbcren'.decode("utf-8")</code> should give correct output (if your terminal is correctly configured).</span>
<span class="comment-copy">@SergeBallesta Could you please let me know too about how to configure the terminal for the issue. I also have been facing this issue for quite a while.</span>
