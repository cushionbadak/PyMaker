<div class="post-text" itemprop="text">
<p>I'm confused on how to structure a list/dict I need. I have scraped three pieces of info off ESPN: Conference, Team, and link to team homepage for future stat scrapping.</p>
<p>When the program first runs, id like to build a dictionary/list so that one can type in a school and it would print the conference the school is in OR one could select an entire conference and it would print the corresponding list of schools. The link associated with each school isn't important that the end user know about but it is important that the correct link is associated with the correct school so that future stats from that specific school can be scraped.</p>
<p>For example the info scrapped is:</p>
<p>SEC, UGA, www.linka.com
ACC, FSU, www.linkb.com
etc...</p>
<p>I know i could create a list of dictionaries like:</p>
<pre><code>sec_list=[{UGA: www.linka.com, Alabama: www.linkc.com, etc...}]
acc_list=[{FSU: www.linkb.com, etc...}]
</code></pre>
<p>The problem is id have to create about 26 lists here to hold every conference which sounds excessive. Is there a way to lump everything into one list but still have the ability to to extract schools from a specific conference or search for a school and the correct conference is also returned? Of course, the link to the school must also correspond to the correct school.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python ships with <a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" rel="nofollow noreferrer"><em>sqlite3</em></a> to handle database problems and it has an <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect" rel="nofollow noreferrer"><code>:memory:</code></a> mode for in-memory databases.  I think it will solve your problem directly and with clear code.</p>
<pre><code>import sqlite3
from pprint import pprint

# Load the data from a list of tuples in the from [(conf, school, link), ...]
conn = sqlite3.connect(':memory:')
c = conn.cursor()
c.execute('CREATE TABLE Espn (conf text, school text, link text)')
c.execute('CREATE INDEX Cndx ON Espn (conf)')
c.execute('CREATE INDEX Sndx ON Espn (school)')
c.executemany('INSERT INTO Espn VALUES (?, ?, ?)', data)
conn.commit()

# Run queries 
pprint(c.execute('SELECT * FROM Espn WHERE conf = "Big10"').fetchall())
pprint(c.execute('SELECT * FROM Espn WHERE school = "Alabama"').fetchall())
</code></pre>
<p>In memory databases are so easy to create and query that they are often the easiest solution to the problem of how to have multiple lookup keys and doing analytics on relational data.  Trying to use dicts and lists for this kind of work just makes the problem unnecessarily complicated.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's true you can do this with a list of dictionaries, but you might find it easier to be able to look up information with named fields.  In that case, I'd recommend storing your scraped data in a Pandas <code>DataFrame</code>.  </p>
<p>You want it so that "one can type in a school and it would print the conference the school is in OR one could select an entire conference and it would print the corresponding list of schools".  </p>
<p>Here's an example of what that would look like, using Pandas and a couple of convenience functions.</p>
<p>First, some example data:</p>
<pre><code>confs = ['ACC','Big10','BigEast','BigSouth','SEC',
         'ACC','Big10','BigEast','BigSouth','SEC']
teams = ['school{}'.format(x) for x in range(10)]
links = ['www.{}.com'.format(x) for x in range(10)]
scrape = zip(confs,teams,links)

[('ACC', 'school0', 'www.0.com'),
 ('Big10', 'school1', 'www.1.com'),
 ('BigEast', 'school2', 'www.2.com'),
 ('BigSouth', 'school3', 'www.3.com'),
 ('SEC', 'school4', 'www.4.com'),
 ('ACC', 'school5', 'www.5.com'),
 ('Big10', 'school6', 'www.6.com'),
 ('BigEast', 'school7', 'www.7.com'),
 ('BigSouth', 'school8', 'www.8.com'),
 ('SEC', 'school9', 'www.9.com')]
</code></pre>
<p>Now convert to <code>DataFrame</code>:</p>
<pre><code>import pandas as pd
df = pd.DataFrame.from_records(scrape, columns=['conf','school','link'])

       conf   school       link
0       ACC  school0  www.0.com
1     Big10  school1  www.1.com
2   BigEast  school2  www.2.com
3  BigSouth  school3  www.3.com
4       SEC  school4  www.4.com
5       ACC  school5  www.5.com
6     Big10  school6  www.6.com
7   BigEast  school7  www.7.com
8  BigSouth  school8  www.8.com
9       SEC  school9  www.9.com
</code></pre>
<p>Type in school, get conference:</p>
<pre><code>def get_conf(df, school):
    return df.loc[df.school==school, 'conf'].values

get_conf(df, school = 'school1')
['Big10']
</code></pre>
<p>Type in conference, get schools:</p>
<pre><code>def get_schools(df, conf):
    return df.loc[df.conf==conf, 'school'].values

get_schools(df, conf = 'Big10')
['school1' 'school6']
</code></pre>
<p>It's unclear from your question whether you also want the links associated with schools returned when searching by conference.  If so, just update <code>get_schools()</code> to:</p>
<pre><code>def get_schools(df, conf):
    return df.loc[df.conf==conf, ['school','link']].values
</code></pre>
</div>
<span class="comment-copy">Sounds like you want a dictionary <code>{'SEC': [{'UGA': 'www.linka.com', 'Alabama': 'www.linkc.com', etc...}], 'ACC': [{'FSU': 'www.linkb.com', etc...}], ...}</code></span>
<span class="comment-copy">Sorry about the editing.  Typing on an iPad screws stuff up sometime..</span>
<span class="comment-copy">Actually, it sounds like you want a database. Try sqlite.</span>
<span class="comment-copy">I'm not sure why I didn't even consider sqllite as I used it on another project a couple months ago and enjoyed working with it.  I was so concerned with trying to figure out my problem using list/dicts that I couldn't "see the forest for the trees" and contemplate other approaches.</span>
<span class="comment-copy">This is promising.  I've not used Pandas yet but I started watching a tutorial on it early today.  I may play with this method as a test to learning Pandas.  Thanks for the well thought out post!!</span>
