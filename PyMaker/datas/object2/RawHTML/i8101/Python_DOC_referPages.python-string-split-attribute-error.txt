<div class="post-text" itemprop="text">
<p>Why do I get the attribute error when tried to split the string <code>full_name</code> on space and assign it to two variables?</p>
<pre><code>class Person(object):
    def __init__(self, full_name):
        """Person initializer"""
        self.first_name, self.last_name = full_name.split()

    @property
    def first_name(self):
        return self.first_name

    @property
    def last_name(self):
        return self.last_name


if __name__ == '__main__':
    swadhi = Person("Swadhikar Chandramohan")
    print swadhi.first_name
    print swadhi.last_name
</code></pre>
<p>Error:</p>
<pre><code>C:\Python27\python.exe C:/Users/swadhi/Documents/test/tutorial/inheritance.py
Traceback (most recent call last):
  File "C:/Users/swadhi/Documents/test/tutorial/inheritance.py", line 18, in &lt;module&gt;
    swadhi = Person("Swadhikar Chandramohan")
  File "C:/Users/swadhi/Documents/test/tutorial/inheritance.py", line 6, in __init__
    self.first_name, self.last_name = full_name.split(' ')
AttributeError: can't set attribute
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need of using <code>property</code> here</p>
<pre><code>class Person(object):
    def __init__(self, full_name):
        """Person initializer"""
        self.first_name, self.last_name = full_name.split()

if __name__ == '__main__':
    swadhi = Person("Swadhikar Chandramohan")
    print swadhi.first_name
    print swadhi.last_name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You did not declare a setter of the property.
Thus the property is readonly and you can not modify it.</p>
<p>To solve it , add setter methods as follows:</p>
<pre><code>@property
def last_name(self, value):
    self._last_name = value
@property
def first_name(self, value):
    self._first_name = value
@last_name.setter
def last_name(self, value):
    self._last_name = value
@first_name.setter
def first_name(self, value):
    self._first_name = value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Person(object):
    def __init__(self, full_name):
        """Person initializer"""
        self._first_name, self._last_name = full_name.split()

    @property
    def first_name(self):
        return self._first_name


    @property
    def last_name(self):
        return self._last_name

if __name__ == '__main__':
    swadhi = Person("Swadhikar Chandramohan")
    print swadhi.first_name
    print swadhi.last_name
</code></pre>
<p>As above, make sure a "_" prefixed at the property name when defining the class property.</p>
</div>
<span class="comment-copy">I think you need only <code>__init__</code> function that you already wriiten.</span>
<span class="comment-copy">I advise your to do not add parsing code in <code>__init__</code>  instead call <code>swadhi = Person("Swadhikar Chandramohan")</code>  as <code>swadhi = Person("Swadhikar Chandramohan".split())</code></span>
<span class="comment-copy">@L_S: Thanks. That's the most apt answer for my question.!</span>
<span class="comment-copy">Or provide a class method to parse: <code>Person.from_full_name('Swadhikar Chandramohan')</code>. But as pointed out below the issue is your properties are read only.</span>
<span class="comment-copy">Good answer, and for information, see the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">documentation</a> especially <code>The @property decorator turns the voltage() method into a “getter” for a read-only attribute with the same name</code></span>
<span class="comment-copy">Thank you @napuzba</span>
<span class="comment-copy">This will work, but it would be more Pythonic to just drop the properties entirely since there no particular benefit to having them here.</span>
<span class="comment-copy">In this simple case - Yes. However property is used to hide the implementation details from the outside world. In the future, the owner of the class can change the implementation details (i.e remove first_name attribute) without the users of the class have to change their code.</span>
<span class="comment-copy">@napuzba but that's the point of properties. You can access the attribute directly until you need to not do so, then introduce a property <b>without changing the interface</b>. There is no benefit to putting them in before they do something other than a trivial get/set/delete, by contrast to the getters and setters in e.g. Java.</span>
