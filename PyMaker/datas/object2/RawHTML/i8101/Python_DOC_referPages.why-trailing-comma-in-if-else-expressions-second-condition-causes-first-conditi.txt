<div class="post-text" itemprop="text">
<p>The syntax of declaring tuples with commas is clear and everywhere I saw it it is being used with literals enclosed in braces e.g. <code>(1,)</code>. </p>
<p>However, python does allow to use commas without enclosing braces to declare tuples, and there is strange behavior in one particular case, see the code below.</p>
<pre><code>def ifElseExpressionTrailingComma():
    return 1 if True else 0,

def ifElseExpressionTrailingCommaWrapped():
    return 1 if True else (0,)

print ifElseExpressionTrailingComma()
print ifElseExpressionTrailingCommaWrapped()
</code></pre>
<p>Output:</p>
<pre><code>(1,) # what??
1
</code></pre>
<p>Tested on 2.7 and 3.5.
Can someone explain why 1 is implicitly converted to the tuple?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's simply the order of operations:</p>
<pre><code>&gt;&gt;&gt; 1 if True else 0,
(1,)
&gt;&gt;&gt; (1 if True else 0),
(1,)
&gt;&gt;&gt; 1 if True else (0,)
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is because the ternary operator (<code>a if b else c</code>) is stronger than the "comma" operator.</p>
<p>You may compare it with logical <code>or</code> and <code>and</code> operators where <code>and</code> is stronger than <code>or</code>:</p>
<pre><code>if foo and bar or bats:

# means:
if (foo and bar) or bats:
</code></pre>
</div>
<span class="comment-copy">It's not implicit. The ternary expression is resolved to a single value, either one or zero, <i>then</i> the trailing comma makes it a tuple. In the second case the parentheses mean that one possible return value from the expression is a tuple, the other is an integer. Given the code you've written demonstrates this behaviour clearly it's not obvious what kind of answer you're expecting.</span>
<span class="comment-copy">yes, that was not very obvious that comma is applied to the evaluated result of the ternary because it has lower priority. Thanks, guys.</span>
<span class="comment-copy">@jonrsharpe The code does indeed show this, but to complete my answer, was trying to find this precedence documented, but couldn't <a href="https://docs.python.org/3.6/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/3.6/reference/…</a></span>
<span class="comment-copy">@Chris_Rands the comma isn't an operator: <a href="https://docs.python.org/3/faq/programming.html#what-s-up-with-the-comma-operator-s-precedence" rel="nofollow noreferrer">docs.python.org/3/faq/…</a></span>
<span class="comment-copy">@jonrsharpe Of course, thanks!</span>
