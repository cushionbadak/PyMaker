<div class="post-text" itemprop="text">
<p>Is there a C# equivalent of Python's <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer">range</a> with <code>step</code>?</p>
<hr/>
<p><strong>Documentation:</strong></p>
<blockquote>
<p>For a positive <code>step</code>, the contents of a range <code>r</code> are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <code>r[i] &lt; stop</code>.</p>
<p>For a negative <code>step</code>, the contents of the range are still determined by the formula <code>r[i] = start + step*i</code>, but the constraints are <code>i &gt;= 0</code> and <code>r[i] &gt; stop</code>.</p>
</blockquote>
<hr/>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; list(range(0, 10, 3))
[0, 3, 6, 9]
&gt;&gt;&gt; list(range(0, -10, -1))
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can implement a <code>static</code> utility class to handle this.</p>
<p>For completeness, this solution mimics Python's <code>range</code> behavior for one parameter (<code>stop</code>), two parameters (<code>start</code>, <code>stop</code>), and three parameters (<code>start</code>, <code>stop</code>, <code>step</code>):</p>
<pre><code>using System;
using System.Collections.Generic;

public static class EnumerableUtilities
{
    public static IEnumerable&lt;int&gt; RangePython(int start, int stop, int step = 1)
    {
        if (step == 0)
            throw new ArgumentException("Parameter step cannot equal zero.");

        if (start &lt; stop &amp;&amp; step &gt; 0)
        {
            for (var i = start; i &lt; stop; i += step)
            {
                yield return i;
            }
        }
        else if (start &gt; stop &amp;&amp; step &lt; 0)
        {
            for (var i = start; i &gt; stop; i += step)
            {
                yield return i;
            }
        }
    }

    public static IEnumerable&lt;int&gt; RangePython(int stop)
    {
        return RangePython(0, stop);
    }
}
</code></pre>
<hr/>
<p><strong>Example Usage with Step:</strong></p>
<pre><code>foreach (var i in EnumerableUtilities.RangePython(0, 10, 3))
{
    Console.WriteLine(i);
}
</code></pre>
<hr/>
<p><strong>Output:</strong></p>
<pre><code>0
3
6
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would go with two methods implementation. First one for parameters validation and providing defaults:</p>
<pre><code>public static IEnumerable&lt;int&gt; Range(int start, int stop, int step = 1)
{
    if (step == 0)
        throw new ArgumentException(nameof(step));

    return RangeIterator(start, stop, step);
}
</code></pre>
<p>That is required for iterators with deferred execution. Otherwise, you will not validate arguments until iterator will be executed. Which might happen a long time after you get an iterator reference. And iterator itself (actually with C# 7 you can use a <a href="http://thebillwagner.com/Blog/Item/2016-03-02-C7FeatureProposalLocalFunctions" rel="nofollow noreferrer">local function</a> instead of creating separate method):</p>
<pre><code>private static IEnumerable&lt;int&gt; RangeIterator(int start, int stop, int step)
{
    int x = start;

    do
    {
        yield return x;
        x += step;
        if (step &lt; 0 &amp;&amp; x &lt;= stop || 0 &lt; step &amp;&amp; stop &lt;= x)
            break;
    }
    while (true);
}
</code></pre>
<p>To implement Python's range behavior we need one more method which accepts only <em>stop</em> parameter. We can simplify code with C# 6 expression-bodied member:</p>
<pre><code>public static IEnumerable&lt;int&gt; Range(int stop) =&gt; RangeIterator(0, stop, 1);
</code></pre>
<p>You also can make <a href="https://msdn.microsoft.com/en-us/magazine/dn879355.aspx?f=255&amp;MSPPError=-2147217396" rel="nofollow noreferrer">static methods available in global scope</a> with C# 6. Assume class with Range method description is named PythonUtils:</p>
<pre><code>using static YourNamespace.PythonUtils;
</code></pre>
<p>And usage in code will look like</p>
<pre><code>foreach(var i in Range(0, 10, 3))
   Print(i);
</code></pre>
<p>You can also use default values</p>
<pre><code>Range(0, 10, 3)     // [0,3,6,9]
Range(4, -3, -1)    // [4,3,2,1,0,-1,-2]
Range(5)            // [0,1,2,3,4]
Range(2, 5)         // [2,3,4]
</code></pre>
<p>Looks like Pascal-case Python :)</p>
</div>
<span class="comment-copy"><code>Enumerable.Range(0, ((stop-start)/step) + ((stop-start)%step == 0 ? 0 : 1 )).Select(i =&gt; start + step * i)</code></span>
<span class="comment-copy">I like this solution better than my own, just a few things I'd like to point out: <code>range()</code> is not valid in Python, and <code>range(5)</code> should return <code>[0, 1, 2, 3, 4]</code>. I didn't specify these scenarios in my original question, I just included them in my answer just to make it feel as Python-like as possible.</span>
<span class="comment-copy">@budi sorry, I have forgotten details of Python's range. Updated answer with additional Range method. And I have removed some defaults from  Range method with three parameters</span>
<span class="comment-copy">Nitpicking here, but <code>list(range(1, -3, 2))</code> in python returns <code>[]</code>, however your solution <code>Range(1, -3, 2)</code> returns <code>[1]</code>. I've unaccepted for now, since my solution handled this case; I'll gladly re-accept if you want to update your solution!</span>
