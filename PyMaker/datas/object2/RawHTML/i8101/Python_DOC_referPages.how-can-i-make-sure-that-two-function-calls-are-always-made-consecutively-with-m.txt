<div class="post-text" itemprop="text">
<p>I'm using Pathos like this:</p>
<pre><code>from pathos.multiprocessing import ProcessingPool as Pool
def foo(bar):
   fn1(bar)
   fn2(bar)

Pool().map(foo, data)
</code></pre>
<p>I want <code>fn1</code> and <code>fn2</code> to be executed as one atomic operation such that no threads can produce function calls in a sequence like <code>fn1, fn1, fn2, fn2</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a lock like it is described in the <a href="https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes" rel="nofollow noreferrer">documentation</a>.</p>
<pre><code>def foo(lock, bar):
    lock.acquire()
    try:
       fn1(bar)
       fn2(bar)
    finally:
        lock.release()

if __name__ == '__main__':
    lock = Lock()
    Pool().map(foo, [(l, d) for d in data])
</code></pre>
<p>But, why are you using multiprocessing if you don't want to call your function in parallel?</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Please, not the OP is not using Python's multiprocessing, but rather the pathos project: <a href="http://trac.mystic.cacr.caltech.edu/project/pathos/wiki.html" rel="nofollow noreferrer">trac.mystic.cacr.caltech.edu/project/pathos/wiki.html</a></span>
<span class="comment-copy">Hi I'm the <code>pathos</code> author.  There's a nice middle ground... if you use <code>multiprocess</code> instead of <code>multiprocessing</code>.  This is the library that <code>pathos</code> uses under the covers, and it provides the exact same interface as <code>multiprocessing</code>.  So, if you use <code>pathos</code> and combine it with really what's just a different interface in <code>multiprocess</code>, it's fully compatible.</span>
