<div class="post-text" itemprop="text">
<p>I am trying to create an array from a text file with both numbers and letters (as a header), however when I try to convert and open my file I end up getting the error:</p>
<blockquote>
<p>ValueError: invalid literal for float(): 0</p>
</blockquote>
<p>or</p>
<blockquote>
<p>ValueError: could not convert string to float: AA</p>
</blockquote>
<p>I understand that this is a data type problem and was wondering if anyone knew a way around this? I'm new to python and usually code in Matlab. my text file consists of: </p>
<pre><code>AA, AB, AC, AD, AE, AF, AG, AH, AI
0, 1, 0, 1, 1, 0, 1, 0, 0
</code></pre>
<p>and the code I have tried is below</p>
<pre><code>import numpy as np
a = np.loadtxt('test.txt')
print 
</code></pre>
<p>After that, I need to cut all the columns that have zeroes and keep the ones that have 1s in them. The text files to be loaded in will be different each time and I only need to see which cells and headers have been populated with a 1.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer"><code>numpy.loadtxt()</code></a> allows a dtype parameter, something like this will read mixed data:</p>
<pre><code>import numpy as np
a = np.loadtxt('test.txt', dtype=object)
</code></pre>
<h3>How should I solve this?</h3>
<p>So, now that we have answered the how do I make <code>numpy.readtxt()</code> read my file, let's go with how I would solve the problem of analyzing the zeros and ones in the file.  The following code snippets read in the file, and then find which columns contain any ones, and all ones.</p>
<p><strong>1: Use the csv module</strong></p>
<p>The <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> module can be used to parse this file.</p>
<pre><code>import csv
with open('file1', 'rU') as csvfile:
    csv_reader = csv.reader(csvfile)

    # read the first line as the header
    header = [c.strip() for c in next(csv_reader)]

    # read the remaining lines, and transpose them into columns using zip()
    cols = list(zip(*((int(c) for c in l) for l in csv_reader)))

# now lets find all the columns which have any and all ones
any_ones = [l for l, v in zip(header, cols) if any(v)]
all_ones = [l for l, v in zip(header, cols) if all(v)]

print(any_ones)
print(all_ones)
</code></pre>
<p><strong>2: Use pandas</strong></p>
<p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>pandas</code></a> can also be used to do this work.  More learning curve than the above, but you get what you pay for.</p>
<pre><code>df = pd.read_csv('file1')
# remove spaces from column names
df = df.rename(columns={x: x.strip() for x in df.columns})

any_ix = df.any()
all_ix = df.all()

print(list(any_ix[any_ix].index))
print(list(any_ix[all_ix].index))
</code></pre>
<p><strong>Results of csv and pandas</strong></p>
<pre><code>['AB', 'AD', 'AE', 'AG']
['AB', 'AE']
</code></pre>
<p><strong>File1:</strong></p>
<pre><code>AA, AB, AC, AD, AE, AF, AG, AH, AI
0, 1, 0, 1, 1, 0, 0, 0, 0
0, 1, 0, 0, 1, 0, 1, 0, 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lets say your file is called <code>file.text</code> and inside there is:</p>
<pre><code>AA, AB, AC, AD, AE, AF, AG

0, 1, 0, 1, 1, 0, 1, 0, 0
</code></pre>
<p>You can read the file with:</p>
<pre><code>with open('file.txt', 'r') as f:
    read_file = f.read()
</code></pre>
<p>Create list from string (that is what <code>read_file</code> is now):</p>
<pre><code>list_entries = read_file.split(',')
</code></pre>
<p>Print every entry in the list (replace <code>\n</code> new line character):</p>
<pre><code>for entry in list_entries:
    print entry.replace('\n', '')
</code></pre>
</div>
<span class="comment-copy">what is exactly in your file? alternate lines of numbers, letters. or only single line of letters with next line of numbers.</span>
<span class="comment-copy">If you are going to have mixed text and numbers, forcing you to use <code>dtype=object</code> then you probably don't want a numpy array but rather a regular Python list.</span>
<span class="comment-copy">its one line of letters with a line of numbers below it. thank you @juanpa.arrivillaga! Would the format of putting it into a python list be similar?</span>
<span class="comment-copy">What do you get when you load that in MATLAB?</span>
<span class="comment-copy">Is the letter line column headers or data?  What do you need to do with this data once loaded?</span>
<span class="comment-copy">Do we really want to inflict object dtype arrays on a new python coder?</span>
<span class="comment-copy">@hpaulj, you have a point, I would normally not offer up <code>numpy.readtxt()</code> as a solution to his problem, except that he asked a specific question about typing and had already picked up the <code>numpy</code> knife.  So I showed him where the sharp end was.</span>
<span class="comment-copy">I am open to using something besides numpy!</span>
<span class="comment-copy">If that is the case, best thing you can do to get more specific answers it to answer @hpaulj question above which is: <i>What do you need to do with this data once loaded?</i></span>
<span class="comment-copy">Once the data is loaded I need to cut all the columns that have zeroes and keep the ones that have 1s in them. The text files to be loaded in will be different each time and i only need to see which cells and headers have been populated with a 1,</span>
