<div class="post-text" itemprop="text">
<p>I'm making an application that needs to read URIs from drag-and-drop input. I'm trying to process each URI with <code>urllib.parse.urlparse()</code>.</p>
<p><code>urlparse()</code> deals with Internet URLs as expected:</p>
<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.parse.urlparse('https://www.google.com/advanced_search')
ParseResult(scheme='https', netloc='www.google.com', path='/advanced_search', params='', query='', fragment='')
</code></pre>
<p>But using it on local Windows files leaves an extra slash at the beginning of the path:</p>
<pre><code>&gt;&gt;&gt; urllib.parse.urlparse('file:///C:/Program%20Files/Python36/LICENSE.txt')
ParseResult(scheme='file', netloc='', path='/C:/Program%20Files/Python36/LICENSE.txt', params='', query='', fragment='')
</code></pre>
<p>And indeed, functions expecting a local file path don't seem to like this extra slash:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('/C:/Program%20Files/Python36/LICENSE.txt').exists()
Traceback (most recent call last):
...
OSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: '\\C:\\Program%20Files\\Python36\\LICENSE.txt'
</code></pre>
<p>I could code a special case of my own to deal with <code>file:///&lt;Windows drive letter&gt;:</code> somehow, but as a matter of cleanliness: Is there a better Python function to split URIs generally, not just URLs? Or is there something else I'm missing?</p>
<p>Using Python 3.6.1.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.url2pathname" rel="nofollow noreferrer"><code>urllib.request.url2pathname()</code></a> on the path component will strip the beginning slash for Windows.</p>
<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; path = urllib.parse.urlparse('file:///C:/Program%20Files/Python36/LICENSE.txt').path
&gt;&gt;&gt; path
'/C:/Program%20Files/Python36/LICENSE.txt'
&gt;&gt;&gt; urllib.request.url2pathname(path)
'C:\\Program Files\\Python36\\LICENSE.txt'
</code></pre>
<p>So my URI-processing application should use <code>url2pathname()</code> on the path if the <code>urlparse()</code> result's scheme is <code>file</code>.</p>
<hr/>
<p>Thanks to @eryksun's comment, pointing out that <a href="https://github.com/pypa/pip/blob/9.0.1/pip/download.py#L442" rel="nofollow noreferrer">pip uses <code>url2pathname()</code></a>. pip also shows how to generalize the code more to handle Windows UNC paths, which are used in things like Windows shared network folders. It seems that UNC paths can be detected if the scheme is <code>'file'</code> and netloc is non-empty, and we need to prepend a couple of backslashes before working with the UNC path.</p>
<pre><code>&gt;&gt;&gt; parse_result = urllib.parse.urlparse('file://some-host/Shared Travel Photos/20170312_112803.jpg')
&gt;&gt;&gt; parse_result
ParseResult(scheme='file', netloc='some-host', path='/Shared Travel Photos/20170312_112803.jpg', params='', query='', fragment='')
&gt;&gt;&gt; urllib.request.url2pathname(r'\\' + parse_result.netloc + parse_result.path)
'\\\\some-host\\Shared Travel Photos\\20170312_112803.jpg'
</code></pre>
</div>
<span class="comment-copy">pip uses <a href="https://github.com/pypa/pip/blob/9.0.1/pip/download.py#L442" rel="nofollow noreferrer"><code>url_to_path</code></a>, which calls  <code>urllib.request.url2pathname</code>, which ultimately on Windows is <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/nturl2path.py#L3" rel="nofollow noreferrer"><code>nturl2path.url2pathname</code></a>.</span>
<span class="comment-copy">@eryksun Ah, yep, that will do it. Thanks! I suppose I'll answer my own question with the details then.</span>
<span class="comment-copy">The <code>file</code> protocol on Windows could also be for a UNC path, which is why pip uses <code>'\\\\' + netloc + path</code> when <code>netloc</code> isn't an empty string.</span>
<span class="comment-copy">@eryksun Thanks for pointing that out. I don't generally work with UNC paths, but I took a stab at explaining how to handle those like pip does.</span>
