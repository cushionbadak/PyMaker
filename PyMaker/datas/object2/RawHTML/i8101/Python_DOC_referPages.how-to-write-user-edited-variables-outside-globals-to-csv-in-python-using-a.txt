<div class="post-text" itemprop="text">
<p>Let me quickly introduce the scenario. For a knowledge based engineering course I am to create a business jet using ParaPy (python based KBE software). The user should be able to change variables in an input file, the input file is to include units and comments. The program will then create a geometry and open this in a GUI, the user is able to change said variables interactively in the GUI. The user should than be able to save the current values to an output file that has the exact same format as the input file, so including the units and comments. I'm sorry for the fact that the problem is not recreatable without the ParaPy software but I found it difficult to describe without using the entire scenario. </p>
<p>I thought it would be suitable to use CSV for this. The reading part works fine but I am running into trouble with the writing part. A simplified version of the case has the following code. This creates a box geometry from the width, height, and length variables. These are the variables that can be edited in the GUI and which I need to save again. However, I have no idea how to access them without hardcoding it. I was trying to use the input file to read the variable name and then request the value using that name (see else stamen in  <strong>def save_vars(self):</strong>). </p>
<pre><code>from parapy.core import *
from parapy.geom import *
from csv_in_out import *

class Boxy(Base):
    # Read function from external file
    read = ReadInput(file_name='box.csv')
    # Create dict
    variables = read.read_input

    # Set the editable variables
    width = Input(variables["width"])
    height = Input(variables["height"])
    length = Input(variables["length"])

    @Part
    # Create the geometry
    def box1(self):
        return Box(width=self.width,
                   height=self.height,
                   length=self.length)

    @Attribute
    def save_vars(self):
        path = self.read.generate_path
        first_row = True
        with open(path[0], 'rb') as file:  # Open file
            reader = csv.reader(file, delimiter=',', quotechar='|')  # Read into reader and section rows and columns
            with open(path[1], 'wb') as outfile:
                filewriter = csv.writer(outfile, delimiter=',', quotechar='|')
                for row in reader:
                    if first_row == True:
                        filewriter.writerow(row)
                        first_row = False
                    else:
                        # Find the name of the variable that we want to request and save
                        var_name = row[0]

                        value = self.var_name # I know this does not work, but I basically want to get the input variables
                        # Update the value in row
                        row[1] = value
                        # Write the row to a new file
                        filewriter.writerow(row)
        return 'Saved'


if __name__ == '__main__':
    from parapy.gui import display

    obj = Boxy()
    display(obj)
</code></pre>
<p>Below is the csv file that I used for this. </p>
<pre><code>var_name,Value,Unit,Comment
width,2,[m],Width of the box
height,3,[m],Height of the box
length,4,[m],Length of the box
</code></pre>
<p>Thank you for taking the time to look at my problem. If anything is unclear or you need more information please let me know. </p>
</div>
<div class="post-text" itemprop="text">
<p>As stovfl pointed out there is a nice class for writing configuration files in Python, that is definitely the best way to solve it if you are still starting from scratch. </p>
<p>However, I also found how to get my thing to work. Where I had the following: </p>
<p>The line in the else statement:</p>
<pre><code>value = self.var_name
</code></pre>
<p>Should be changed to </p>
<pre><code>value = getattr(self,var_name)
</code></pre>
</div>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">docs.python.org/3/library/configparser.html</a>. Maybe this is more suited for you.</span>
<span class="comment-copy">Oh wow that is actually a very nice feature, never knew about that thanks! So there is basically already a class for what I am trying to create. I'll see if it is worth switching to this</span>
