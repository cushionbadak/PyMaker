<div class="post-text" itemprop="text">
<p>Imitating an "increasing" C-styled for loop in Python is very simple:</p>
<pre><code>for (int i = A ; i &lt; B ; i += C)
</code></pre>
<p>can be easily implemented in Python, <strong>Without consuming memory for an array from A to B</strong>, using:</p>
<pre><code>for i in range(A, B, C)    # (xrange if Python 2.x)
</code></pre>
<p>But what about decreasing loops?</p>
<p>How can one imitate C-styled loops such as:</p>
<pre><code>for (int i = A ; i &gt;= B ; i -= C)
</code></pre>
<p>Even using <code>reversed(range(A, B, C))</code> constructs an array in the memory, as <code>reversed</code> first has to evaluate the whole <code>range</code> generator in order to yield its values reversed...</p>
<p>Is there any trick for implementing such a for loop in Python, without constructing an array in the memory? Is there an equivalent for <code>range</code> generator, that yields decreasing numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>range takes 3 args <code>range(start,stop,step)</code>. The step arg can be negative to iterate backwards.</p>
<pre><code>arr = range(10) # range generator in python 3
for i in range(len(arr)-1,0,-1):
    print(arr[i])
9
8
7
6
5
4
3
2
1
</code></pre>
<p>Note that the start is <code>len(arr)-1</code> because lists are 0-indexed so the max idx is 9 for a list of length 10.</p>
<p>Negative steps don't have to be 1 either:</p>
<pre><code>for i in range(len(arr)-1,0,-3):
    print(arr[i])    
9
6
3
</code></pre>
<p>In answer to your second question, you can set arr to be a countdown from the beginning</p>
<pre><code>arr = range(10,0,-1)
for a in arr: print(a)

10
9
8
7
6
5
4
3
2
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just go ahead and call <code>reversed()</code> on the result of <code>range()</code>. It won't build the whole list because the <code>range</code> object has a <a href="https://docs.python.org/3/reference/datamodel.html#object.__reversed__" rel="nofollow noreferrer"><code>__reversed__</code></a> method, which the <code>reversed()</code> function detects and uses. Here's how you can see that it has that method:</p>
<pre><code>&gt;&gt;&gt; dir(range(3))
['__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index', 'start', 'step', 'stop']
</code></pre>
<p>This is assuming you're using Python 3. In Python 2, <code>range</code> builds a list in memory regardless of whether you reverse it, although most of the time it makes no performance difference. You can use <code>xrange</code>, which is like Python 3's <code>range</code>, and also has a <code>__reversed__</code> method.</p>
</div>
<span class="comment-copy">how about <code>for i in range(B, A, -C)</code></span>
<span class="comment-copy">@akashkarothiya <code>-C</code></span>
<span class="comment-copy">Returns an increasing array, in case that A &gt; B, else returns an empty array</span>
<span class="comment-copy">thanks @DeepSpace for pointing out</span>
<span class="comment-copy">just try this: <code>for i in range(9, 1, -1): print(i)</code></span>
<span class="comment-copy">I would add that for the general case, <code>for (int i = A ; i &gt;= B ; i -= C)</code>, the Python code should be <code>for i in range(A, B - 1, -C)</code></span>
