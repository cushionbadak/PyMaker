<div class="post-text" itemprop="text">
<p>I am interfacing to an external library using ctypes. This library returns to me a binary buffer. The interface looks like this:</p>
<pre><code>int getBuff(unsigned char **buf, int *len);
</code></pre>
<p>The library also exports a deallocator so that I can free the buffer when I am done with it, but that aspect presents no problems to me, so I don't think we need to cover it.</p>
<p>In my ctypes code I am representing the <code>buf</code> argument as <code>c_void_p</code>. I would like to copy this buffer into a bytes object as efficiently as possible.</p>
<p>At the moment I have:</p>
<pre><code>data = bytes(bytearray(ctypes.cast(buf, ctypes.POINTER(ctypes.c_ubyte*len.value))[0]))
</code></pre>
<p>where <code>buf</code> is <code>c_void_p</code> and <code>len</code> is <code>c_int</code>.</p>
<p>As I understand it, this performs two copies. Once to the bytearray object, and then again to the bytes object.</p>
<p>How can I do this with only a single copy? </p>
<p>My current efforts have concentrated on Python 2, but in due course I will need to support this for Python 3 as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Apparently you can slice a ctypes pointer. Not <code>c_void_p</code>, <code>c_char_p</code>, or <code>c_wchar_p</code>, but <code>POINTER</code> types work. For a <code>POINTER(c_char)</code>, slicing it gives you <code>bytes</code>:</p>
<pre><code>data = ctypes.POINTER(ctypes.c_char).from_buffer(buf)[:len.value]
</code></pre>
<p>Thanks to eryksun for bringing that up. Also, it's not clear why <code>buf</code> is a <code>c_void_p</code> instead of already being a <code>POINTER(c_char)</code>. (For a <code>POINTER(c_char)</code>, the code would be just <code>buf[:len.value]</code>.)</p>
<hr/>
<p>For getting <code>bytes</code> from a general object that supports the buffer protocol, <code>memoryview(...).tobytes()</code> involves one less copy than <code>bytes(bytearray(...))</code>:</p>
<pre><code>data = memoryview(ctypes.cast(buf, ctypes.POINTER(ctypes.c_ubyte*len.value))[0]).tobytes()
</code></pre>
<p>This is compatible with both Python 2 and Python 3.</p>
<hr/>
<p>Keep in mind that the <code>buf</code> here needs to be a pointer to the buffer, not a pointer to a pointer to the buffer. <code>getBuff</code> takes a pointer to a pointer (so probably <code>byref(buf)</code>).</p>
</div>
<span class="comment-copy">On Python 3, you should be able to just remove the <code>bytearray</code> call.</span>
<span class="comment-copy">Why are you using a <code>c_void_p</code> with a cast instead of just <code>buf = POINTER(c_char)</code>? Then <code>getBuff(byref(buf), byref(len))</code> and <code>data = buf[:len.value]</code>.</span>
<span class="comment-copy">@eryksun: Huh. You can slice a ctypes pointer? News to me.</span>
<span class="comment-copy">@user2357112, it has to be a <a href="https://docs.python.org/3/library/ctypes.html#ctypes._Pointer" rel="nofollow noreferrer"><code>_Pointer</code> instance</a>. The simple pointer types (<code>c_void_p</code>, <code>c_char_p</code>, <code>c_wchar_p</code>) subclass <code>_SimpleCData</code> and only have a <code>value</code>. But I see I have a typo in my first comment. I'm missing the call to instantiate it as <code>buf = POINTER(c_char)()</code>.</span>
<span class="comment-copy">@eryksun Why? Because I knew no better. Thanks, as always, for your knowledgeable contributions.</span>
<span class="comment-copy">Thanks. Yeah the double pointer is so that the library can return the pointer to the caller. But in my ctypes code buf is the pointer to the buffer.</span>
<span class="comment-copy">@eryksun: I took a look, and wow, <code>cast</code> actually is an FFI call instead of a regular built-in or Python function, and it actually is surprisingly slow. Over a microsecond per call on the environment I tested it in just for the <code>cast</code> call alone, compared to about 67 nanoseconds for the pointer slicing and about 285 nanoseconds for <code>memoryview(x).tobytes()</code> (with a 10-element test array).</span>
<span class="comment-copy">@eryksun: Did you mean <code>ctypes.POINTER(ctypes.c_char)</code>, or is there some API weirdness that means we should actually be using <code>ctypes.POINTER(ctypes.c_char_p)</code>?</span>
