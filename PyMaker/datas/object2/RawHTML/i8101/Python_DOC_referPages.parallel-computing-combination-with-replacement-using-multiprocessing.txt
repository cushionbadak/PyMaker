<div class="post-text" itemprop="text">
<p>I'm trying to get the all possible combination with replacement and make with each of them some calculation. I'm using the code below:</p>
<pre><code>from itertools import combination_with_replacement

for seq in combination_with_replacement('ABCDE', 500):
    # some calculation
</code></pre>
<p>How can I parallelize this calculation using multiprocessing?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the standard library <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code>. </a></p>
<pre><code>from concurrent.futures import ProcessPoolExecutor
from itertools import combinations_with_replacement

def processing(combination):
    print(combination)
    # Compute interesting stuff


if __name__ == '__main__':
    executor = ProcessPoolExecutor(max_workers=8)
    result = executor.map(processing, combinations_with_replacement('ABCDE', 25))
    for r in result:
         # do stuff ...
</code></pre>
<p>A bit more explanations:</p>
<ul>
<li>This code creates an executor using <code>processes</code>. Another possibility would be to use <code>threads</code> but full python threads only run on one core so it might not be the solution of interest in your case as you need to run heavy computation.</li>
<li>The map object return a asynchronous object. Thus, the line <code>executor.map..</code> is non blocking and you can do other computation before collecting the result in the <code>for</code> loop.</li>
<li>It is important to declare the <code>processing</code> function out of the <code>if __name__ == '__main__':</code> block and to declare and use the executor in this block. This prevent for infinite executor spawning and permit to <code>pickle</code> the worker function to pass it to the child process. Without this block, the code is likely to fail.</li>
</ul>
<p>I recommend this over <code>multiprocessing.Pool</code> as it has a more clever way to dispatch the work as you are using an iterator.</p>
<p>Note that your computation for combination of <code>500</code> with 5 elements <code>ABCDE</code> might not be possible. It needs to compute <code>5**500 &gt; 1e350</code> elements. By parallelizing, you will only reduce your computation linearly by a factor <code>max_workers</code>, so in this case <code>8</code> and each process will need to run with <code>~ 1e349</code> elements, which should take about <code>~ 1e335</code> years if each computation is done in 1 micro second.</p>
</div>
