<div class="post-text" itemprop="text">
<p>I have a file contains set of environment variables .</p>
<p>env_script.env:</p>
<pre><code>export a=hjk
export b=jkjk
export c=kjjhh
export i=jkkl
..........
</code></pre>
<p>I want set these environment variables by reading from file .
how can i do this in python</p>
<p>Tried sample code:</p>
<pre><code>pipe = subprocess.Popen([".%s;env", "/home/user/env_script.env"], stdout=subprocess.PIPE, shell=True)
output = pipe.communicate()[0]
env = dict((line.split("=", 1) for line in output.splitlines()))
os.environ.update(env)
</code></pre>
<p>Please give some suggestion</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use subprocess.</p>
<p>Read lines and split environment variable name, value and assign it to <code>os.environ</code>:</p>
<pre><code>import os

with open('/home/user/env_script.env') as f:
    for line in f:
        if 'export' not in line:
            continue
        if line.startswith('#'):
            continue
        # Remove leading `export `
        # then, split name / value pair
        key, value = line.replace('export ', '', 1).strip().split('=', 1)
        os.environ[key] = value
</code></pre>
<p>or using <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update</code></a> and <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>:</p>
<pre><code>with open('env_script.env') as f:
    os.environ.update(
        line.replace('export ', '', 1).strip().split('=', 1) for line in f
        if 'export' in line
    )
</code></pre>
<hr/>
<p>Alternatively, you can make a wrapper shell script, which <code>source</code>s the <code>env_script.env</code>, then execute the original python file.</p>
<pre><code>#!/bin/bash
source /home/user/env_script.env
python /path/to/original_script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Modern operating systems do not allow a child process to change the environment of its parent. The environment can only be changed for the current process and its descendants. And a Python interpreter is a child of the calling shell.</p>
<p>That's the reason why <code>source</code> is not an external command but is interpreted directly by the shell to allow a change in its environment.</p>
<p>It used to be possible in the good old MS/DOS system with  the .COM executable format. A .com executable file had a preamble of 256 (0x100) bytes among which was a pointer to the COMMAND.COM's environment string! So with low level memory functions, and after ensuring not overwriting anything past the environment, a command could change directly its parent environment.</p>
<p>It may still be possible in modern OS, but require cooperation from system. For example Windows can allow a process to get read/write access to the memory of another process, provided the appropriate permissions are set. But this is really a hacky way, and I would not dare doing this in Python.</p>
<p>TL/DR: if your requirement is to change the environment of the <em>calling</em> shell from a Python script, you have misunderstood your requirement.</p>
<hr/>
<p>But what is easy is to start a new shell with a modified environment:</p>
<pre><code>import os
import subprocess

env = os.environ.copy() # get a copy of current environment
# modify the copy of environment at will using for example falsetru's answer
# here is just an example
env['AAA'] = 'BBB'
# and open a subshell with the modified environment
p = subprocess.Popen("/bin/sh", env = env)
p.wait()
</code></pre>
</div>
<span class="comment-copy">i am getting this error while using first method     key, value = line.replace('export ', '', 1).split('=', 1) ValueError: need more than 1 value to unpack</span>
<span class="comment-copy">@user092, Thank you for the feedback. It seems like there's a line without <code>export ...</code>. I updated the answer to skip such lines. Please try the updated code.</span>
<span class="comment-copy">environment variables are not update in the system .no changes</span>
<span class="comment-copy">@user092, Are you trying to change shell's env variable? Updating env vars of the process itself is possible. Changed env variables can be inherited to child processes. But, it's not possible to update parent process' env vars.</span>
<span class="comment-copy">yes shell env variable .how can i do this ?</span>
