<div class="post-text" itemprop="text">
<p>I have been trying to come up with a regex for the following string:</p>
<pre><code>[1,null,"7. Mai 2017"],[2,"test","8. Mai 2018"],[3,"test","9. Mai 2019"]
</code></pre>
<p>I am trying to get as match output each bracket with its content as a single element like the following:</p>
<pre><code>[1,null,"7. Mai 2017"]
[2,"test","8. Mai 2018"]
[3,"test","9. Mai 2019"]
</code></pre>
<p>My initial naive approach was something like this:</p>
<pre><code>(\[[^d],.+\])+
</code></pre>
<p>However, the .+ rule is too general and ends up matching the whole line.
Any hints?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure about the data format you are trying to parse and where it is coming from, but it looks JSON-like. For this particular string, adding <em>square brackets</em> from the beginning and the end of the string makes it <em>JSON loadable</em>:</p>
<pre><code>In [1]: data = '[1,null,"7. Mai 2017"],[2,"test","8. Mai 2018"],[3,"test","9. Mai 2019"]'

In [2]: import json

In [3]: json.loads("[" + data + "]")
Out[3]: 
[[1, None, u'7. Mai 2017'],
 [2, u'test', u'8. Mai 2018'],
 [3, u'test', u'9. Mai 2019']]
</code></pre>
<p>Note how <code>null</code> becomes Python's <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following code will output what you've requested using <code>\[[^]]*]</code>.</p>
<pre><code>import re
regex = r'\[[^]]*]'
line = '[1,null,"7. Mai 2017"],[2,"test","8. Mai 2018"],[3,"test","9. Mai 2019"]'
row = re.findall(regex, line)
print(row)
</code></pre>
<p>Output:</p>
<blockquote>
<p>['[1,null,"7. Mai 2017"]', '[2,"test","8. Mai 2018"]', '[3,"test","9. Mai 2019"]']</p>
</blockquote>
<p>Consider changing <code>null</code> to <code>None</code> as it matches python representation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might consider the wonderful module <a href="https://pythonhosted.org/pyparsing/" rel="nofollow noreferrer">pyparsing</a> to do this:</p>
<pre><code>import pyparsing 

for match in pyparsing.originalTextFor(pyparsing.nestedExpr('[',']')).searchString(exp):
    print match[0]
[1,null,"7. Mai 2017"]
[2,"test","8. Mai 2018"]
[3,"test","9. Mai 2019"]
</code></pre>
<p>(Unless it is actually JSON -- use the JSON module if so...)</p>
</div>
<span class="comment-copy">Where is the string coming from? Is this a JSON string? Note that adding <code>[</code> and <code>]</code> from the beginning and the end of the string would make this particular string JSON loadable with <code>json.loads()</code>..</span>
<span class="comment-copy">You can use <code>r'\[[^]]*]'</code></span>
<span class="comment-copy">I think you can also use <code>ast.literal_eval()</code></span>
<span class="comment-copy">@dot.Py the <code>null</code> would probably need to be special-handled then..</span>
<span class="comment-copy">@alecxe thanks for your info! so according to <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs</a>, the <code>ast.literal_eval()</code> works with <code>None</code> but don't works with <code>Null</code>..</span>
