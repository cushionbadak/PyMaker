<div class="post-text" itemprop="text">
<p>Is there anyway to compress the text used in this code.  I would appreciate the help.<br/>
Heya, Is there anyway to compress the text used in this code.  I would appreciate the help.</p>
<pre><code> file = open("Test.txt", "r")

 Sentence = (file.read())

 s = Sentence.split(" ")

 ListSentence = []
 uniquewords = []
 print(Sentence)
 for x in s:
     if x in uniquewords:
         ListSentence.append(uniquewords.index(x))
     else:
         uniquewords.append(x)
         ListSentence.append(uniquewords.index(x))
 print(ListSentence)

 recreated = ""
 for position in ListSentence:
    recreated = recreated + uniquewords[position] + " "
 print(uniquewords)
 print (recreated)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Question is kind of vague... If you mean data compression then you can use binary transforms. </p>
<pre><code>In [1]: import codecs

In [2]: example = 'abcdefg'*100

In [3]: compressed = codecs.encode(example.encode(), 'zlib')

In [4]: compressed
Out[4]: b'x\x9cKLJNIMKO\x1c\xa5F\xa9\xa1F\x01\x00m\x8e\x11\x80'

In [5]: decompressed = codecs.decode(compressed, 'zlib')

In [6]: decompressed
Out[6]: b'abcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefgabcdefg'
</code></pre>
<p>Check out the <a href="https://docs.python.org/3/library/codecs.html" rel="nofollow noreferrer">docs</a> for codecs, at the bottom are the builtin codecs offered for binary transforms.</p>
<p>If however you mean compression to express your desire to reduce lines of code then while the intention of your code is kind of vague, I would imagine you want to filter out repetitive words while possibly retaining the order of words...</p>
<p>Without order:</p>
<pre><code>' '.join(set(sentence.split()))
</code></pre>
<p>With order:</p>
<pre><code>seen = set()
words = sentence.split()
new = []
for word in words:
    if word not in seen:
        seen.add(word)
        new.append(word)
unique_ordered = ' '.join(new)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you're asking if you could reduce the lines of code you have. Here is my attempt:</p>
<pre><code> with open("Test.txt", "r") as file:
     Sentence = file.read().split(" ")
 ListSentence, uniquewords = [], []
 print(Sentence)
 for x in s:
     if x not in uniquewords:
         uniquewords.append(x)
     ListSentence.append(uniquewords.index(x)) # you do this every loop anyway
 print(ListSentence)

 recreated = ""
 for position in ListSentence:
    recreated += uniquewords[position] + " "
 print(uniquewords)
 print(recreated)
</code></pre>
</div>
<span class="comment-copy">look at examples at <a href="https://docs.python.org/2/library/archiving.html" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">Your code is reasonable. You can use a <code>dict</code> to make the word lookup faster and <code>" ".join()</code> at the end. And the style could use some cleanup. But its not a disaster or anything.</span>
