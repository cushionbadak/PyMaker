<div class="post-text" itemprop="text">
<p>I have a python class,called settings, which includes an <code>__init__</code> method for setting some values as below:</p>
<pre><code>class settings:
    global appkey
    global appversion
    def __init__(self):
        appkey = 1
        appversion = 1
        applicationname = "app1"
        applicationfile = "app.txt"
</code></pre>
<p>In another python file(main script), I define an instance of my settings class via this codes:</p>
<pre><code>import settings
from settings import settings
set = settings()
print set.appversion
print set.appkey
print set.applicationfile
</code></pre>
<p>But when I run my main python script, I got this error:</p>
<pre><code>AttributeError: settings instance has no attribute 'appversion'
</code></pre>
<p>I expect that when I am defining an instance of a class, settings class here, its <strong>init</strong> function will be triggered and I will have values for its attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>The variables are local to the <code>__init__</code> of your class. To have them as instance attributes, you need to bind them to the instance using say a dot reference to the instance:</p>
<pre><code>def __init__(self):
    self.appkey = 1
    ...
</code></pre>
<p>Synonymous (but less verbose) to binding attributes to/setting attributes on the instance using <code>setattr</code>:</p>
<pre><code>def __init__(self):
    setattr(self, 'appkey', 1)
    ...
</code></pre>
<p>On another note, you don't need that <code>global</code> statement since you only want to set new attributes on the instance; nothing to do with the global namespace.</p>
<p>You could easily check the behavior of the new <code>__init__</code> as being different from the previous by analyzing the bytecode:</p>
<pre><code>from dis import dis

class Settings(object):
   def __init__(self):
       self.appkey = 1  

dis(Settings.__init__)
</code></pre>
<hr/>
<pre><code>3           0 LOAD_CONST               1 (1)
            2 LOAD_FAST                0 (self)
            4 STORE_ATTR               0 (appkey)
            6 LOAD_CONST               0 (None)
            8 RETURN_VALUE
</code></pre>
<p>Notice how we are not calling the <em>popular</em> <code>STORE_FAST</code> as with a vanilla assignment but <a href="https://docs.python.org/3/library/dis.html#opcode-STORE_ATTR" rel="nofollow noreferrer"><code>STORE_ATTR</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>So far you have only created "normal" variables in your <code>__init__()</code> method. They are only accessible locally within that function. If you want to create instance attributes you have to assign them to <code>self</code>:</p>
<pre><code>class settings:

    def __init__(self):
        self.appkey = 1
        self.appversion = 1
        self.applicationname = "app1"
        self.applicationfile = "app.txt"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe I had a similar problem some time ago, not sure my solution is the best practice, but it did achieve my goal that was to create a datetime variable for each user, getting the start time of a survey, I simply needed to declare the variable global in the Get method (survey start), so I could be able to pass it to the Post method (survey ended).  Then I could compare start time to the end time, and calculate time spent answering the survey for each participant. After a review, I see other more simpler way to reach the same goal, in any case, here is the code I used:</p>
<p>class EmView(DistanceMixin, RegistredIP, View):</p>
<pre><code>def __init__(self):
    self.dhms = datetime.now()

def get(self, request):

# DHMS ==&gt; Date Time Hour Minutes Seconds survey started

    template_name = "survey/survey_section_a.html"

    global DHMS_START
    DHMS_START = self.dhms

        context_data = {
            "survey_form": survey_form,
            }

        return render(request, template_name, context_data)


 def post(self, request):

    dhms_start = DHMS_START
    dhms_end = datetime.now()
    dhms_survey_duration = dhms_end - dhms_start

 # other codes not included...
</code></pre>
</div>
<span class="comment-copy">You should write <code>self.appkey = 1</code>, etc.</span>
<span class="comment-copy">with self every thing is ok!</span>
<span class="comment-copy">Another piece of advice would be to use any the prefix <code>_</code> on any class variables. So in <code>init</code> you might want to intialize your varibales like this: <code>self._appkey = 1</code>. It really doesn't make a huge amount of difference for you, but it would possibly help people understand your code if you have issues later since the underscore <code>_</code> is a sign of a class variable. :)</span>
<span class="comment-copy">self._ is a good idea. thanks @geostocker</span>
<span class="comment-copy">A little addition to this would be to use the underscore prefix on the class variables: <code>self._appkey</code> to improve readability and properly clarify that it's a class/private variable.</span>
