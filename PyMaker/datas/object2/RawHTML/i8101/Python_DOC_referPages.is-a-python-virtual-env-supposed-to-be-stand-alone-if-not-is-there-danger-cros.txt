<div class="post-text" itemprop="text">
<p>Working in my virtual environment, any import calls not resolved  in the virtual env will be resolved in the "original" environment is possible.  At the same time, 
according to <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#intra-package-references</a> , relative references are allowed.  I worry this could lead to confusion/conflicts with different versions of the same named objects entering or trying to enter a programs execution.  I am a novice to Python, and I am sure this issue is covered in documentation, but I can't find it.  Any pointers?</p>
<p>Update 5/13/2017 - I found the following documention for python 3.6.1: <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments" rel="nofollow noreferrer">https://docs.python.org/3/library/venv.html#creating-virtual-environments</a></p>
<blockquote>
<p>On Windows, invoke the venv command as follows: </p>
<p><code>c:\&gt;c:\Python35\python -m venv c:\path\to\myenv</code></p>
<p><code>usage: venv [-h] [--system-site-packages] [--symlinks | --copies]
  [--clear] [--upgrade] [--without-pip] ENV_DIR [ENV_DIR ...]</code></p>
<p><code>--system-site-packages:ã€€Give the virtual environment access to the system              site-packages dir.</code></p>
</blockquote>
<p>The default is not to have access to the system site-packages directory.  Therefore I surmise that any code outside of the system site-packages directory is considered "safe enough" with respect to usage of relative import paths, and the user is responsible for not colliding with those items.  </p>
</div>
<div class="post-text" itemprop="text">
<p>This is not a big issue, try to use <a href="https://github.com/pyenv/pyenv" rel="nofollow noreferrer">pyenv</a>, and you will be able to have a stand alone python version, and if any import calls not resolved, it'll search the path of the specific python (installed by pyenv) you used to create your virtualenv instead of the sys python path.</p>
<ol>
<li>install pyenv</li>
<li>install specific python version</li>
<li>use the specific python version you installed by pyenv to set up your virtualenv.</li>
</ol>
<p>to check the resolve path of your python codes</p>
<pre><code>import sys
print(sys.path)
</code></pre>
<p>and the directories in the list will represent the order python search your path.</p>
</div>
<span class="comment-copy">Thanks for the reply.  pyenv is for installing and switching between different "system" versions of python.  (That's useful to know - unfortunately I am running on Windows and pyenv is not supported on Windows.)  This question is about virtual environments - as you already clearly know that is different from the issue of multiple system versions of python.</span>
