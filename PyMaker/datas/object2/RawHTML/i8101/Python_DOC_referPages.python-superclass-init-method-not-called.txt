<div class="post-text" itemprop="text">
<p>When I run the following program in Python 3.6:</p>
<pre><code>import xml.etree.ElementTree

def startElementHandler(name, attributes):
    print("Name:", name)

class Parser(xml.etree.ElementTree.XMLParser):
    def __init__(self, html=0, target=None, encoding=None):
        super(Parser, self).__init__(html, target, encoding)
        self.parser.StartElementHandler = startElementHandler

if __name__ == "__main__":
    parser = Parser()
    print("Success")
</code></pre>
<p>I get the following stack trace:</p>
<pre><code>Traceback (most recent call last):
  File "D:\src\python\base_init\base_init.py", line 12, in &lt;module&gt;
    parser = Parser()
  File "D:\src\python\base_init\base_init.py", line 9, in __init__
    self.parser.StartElementHandler = startElementHandler
AttributeError: 'Parser' object has no attribute 'parser'
</code></pre>
<p>As you can see from the <a href="https://hg.python.org/cpython/file/3.6/Lib/xml/etree/ElementTree.py#l1446" rel="nofollow noreferrer"><code>XMLParser</code> class source code</a> I'm calling its <code>__init__()</code> method with the correct arguments and <code>XMLParser</code>'s <code>parser</code> attribute is set within it.</p>
<p>What is happening is that the <code>XMLParser.__init__()</code> method doesn't get called. What am I doing wrong? It must be something silly, but I just can't see it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The C accelerator <a href="https://github.com/python/cpython/blob/3dc7c52a9f4fb83be3e26e31e2c7cd9dc1cb41a2/Lib/xml/etree/ElementTree.py#L1646" rel="nofollow noreferrer">that's imported</a> for <code>XMLParser</code> doesn't have the <code>parser</code> attribute set. A somewhat viable option is to disable it's importing by setting it's value as <code>None</code> in <code>sys.modules</code>:</p>
<pre><code>import sys
sys.modules['_elementtree'] = None
</code></pre>
<p>Of course, in order for this to work, it needs to be done <em>before</em> any imports of <code>ElementTree</code> occur and, obviously, you'll get a performance hit.</p>
<p>As for <em>why</em> this is, I'm guessing the <code>parser</code> attribute is considered part of the private API for <code>XMLParser</code>, no documentation for it exists (and it doesn't look like an omission). As such, it should not be relied upon. </p>
</div>
<div class="post-text" itemprop="text">
<p>For python 2.X your code is fine but for python 3.x you will have to change this</p>
<p><code>self.parser.StartElementHandler = startElementHandler</code> to <code>self.StartElementHandler = startElementHandler</code></p>
<pre><code>import xml.etree.ElementTree

def startElementHandler(name, attributes):
    print("Name:", name)

class Parser(xml.etree.ElementTree.XMLParser):
    def __init__(self, html=0, target=None, encoding=None):
        super(Parser, self).__init__(html, target, encoding)
        self.StartElementHandler = startElementHandler

if __name__ == "__main__":
    parser = Parser()
    print("Success")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to print starting element's tag name, you can use <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse" rel="nofollow noreferrer"><code>xml.etree.ElementTree.iterparse</code></a> which does not require patching the parser object.</p>
<pre><code>import xml.etree.ElementTree

for event, elem in xml.etree.ElementTree.iterparse(filepath, events=['start']):
    print('Name:', elem.tag)
</code></pre>
<ul>
<li>filepath can be a xml file path or a file-like object.</li>
</ul>
</div>
<span class="comment-copy">Your error message visibly doesn't match the code you posted. The code you posted should be fine.</span>
<span class="comment-copy">Yet that is what I get when running the above program under Python 3.6.0 on Windows.</span>
<span class="comment-copy">Are you sure? The code you posted says <code>self.parser</code>, but the error message says <code>super(Parser, self).parser</code>. That error message isn't coming from that code.</span>
<span class="comment-copy">You are right, I copied the error message from a previous attempt. I corrected my question.</span>
<span class="comment-copy">I believe the C accelerator for <code>XMLParser</code> <i>doesn't</i> have these attributes set. This seems like an odd discrepancy.</span>
<span class="comment-copy">I'll try your suggestion. If the performance hit isn't too bad it may be viable. Thanks!</span>
<span class="comment-copy">Could you clarify what you mean by "these attributes," and add a bit more detail to explain how this relates to the question being asked.  I'm trying to follow this as a third party and it's not clear</span>
<span class="comment-copy">There's a couple of attributes set by the Pure Python implementation of <code>XMLParser</code> (the <code>parser</code> attribute included) that aren't set for the C one @SamHartman. Because the C implementation is imported at the end of <code>ElementTree.py</code> in order to provide a performance boost, it masks the Python implementation and results in the error OP is seeing.</span>
<span class="comment-copy">Mine is a stripped down example. I'm trying to access the <code>parser</code> attribute in order to intercept CDATA sections to circumvent their stripping away by ElementTree.</span>
