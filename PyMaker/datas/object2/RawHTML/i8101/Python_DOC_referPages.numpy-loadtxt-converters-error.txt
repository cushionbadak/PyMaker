<div class="post-text" itemprop="text">
<p>I am trying to read CSV's type file. And it conclude a dates line.
I write the code like this, as others teach me, but it is wrong.
I don't know why. please help me.</p>
<pre><code>from matplotlib.dates import strpdate2num
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
dates=np.loadtxt('data.csv',delimiter=',',usecols=(1,),
                 converters={ 1:strpdate2num('%d-%m-%Y')})
</code></pre>
<p>and the error information as below:</p>
<pre><code>---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-24-e58dd0485173&gt; in &lt;module&gt;()
      1 dates=np.loadtxt('data.csv',delimiter=',',usecols=(1,),
----&gt; 2                  converters={ 1:strpdate2num('%d-%m-%Y')})

C:\Anaconda3\lib\site-packages\numpy\lib\npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin)
    928 
    929             # Convert each value according to its column and store
--&gt; 930             items = [conv(val) for (conv, val) in zip(converters, vals)]
    931             # Then pack it according to the dtype's nesting
    932             items = pack_items(items, packing)

C:\Anaconda3\lib\site-packages\numpy\lib\npyio.py in &lt;listcomp&gt;(.0)
    928 
    929             # Convert each value according to its column and store
--&gt; 930             items = [conv(val) for (conv, val) in zip(converters, vals)]
    931             # Then pack it according to the dtype's nesting
    932             items = pack_items(items, packing)

C:\Anaconda3\lib\site-packages\matplotlib\dates.py in __call__(self, s)
    285            return value: a date2num float
    286         """
--&gt; 287         return date2num(datetime.datetime(*time.strptime(s, self.fmt)[:6]))
    288 
    289 

C:\Anaconda3\lib\_strptime.py in _strptime_time(data_string, format)
    557     """Return a time struct based on the input string and the
    558     format string."""
--&gt; 559     tt = _strptime(data_string, format)[0]
    560     return time.struct_time(tt[:time._STRUCT_TM_ITEMS])
    561 

C:\Anaconda3\lib\_strptime.py in _strptime(data_string, format)
    327         if not isinstance(arg, str):
    328             msg = "strptime() argument {} must be str, not {}"
--&gt; 329             raise TypeError(msg.format(index, type(arg)))
    330 
    331     global _TimeRE_cache, _regex_cache

TypeError: strptime() argument 0 must be str, not &lt;class 'bytes'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>from matplotlib.dates import bytespdate2num
dates=np.loadtxt('data.csv',delimiter=',',usecols=(1,),
             converters={ 1:bytespdate2num('%d-%m-%Y')})
</code></pre>
</div>
<span class="comment-copy">A <a href="http://stackoverflow.com/q/16496017/1328439">similar question</a> has been asked here few years ago. The suggestion was to use <code>bytespdate2num()</code>. Please add <code>python3</code> tag to your post as python version seems relevant here.</span>
<span class="comment-copy">In python3 <code>loadtxt</code> opens the file in bytestring mode.  The converter has to work with that.</span>
<span class="comment-copy">A similar solultion using the regular <code>datetime</code> converter plus an explicit <code>decode</code>, <a href="https://stackoverflow.com/questions/46814724/fail-to-use-numpy-loadtxt-to-convert-date-with-python3-6" title="fail to use numpy loadtxt to convert date with python3 6">stackoverflow.com/questions/46814724/â€¦</a>.</span>
<span class="comment-copy">Could you please explain what has changed in np.loadtxt between Python 2 and Python 3</span>
<span class="comment-copy">Because python2 and python3 they have diffent character . <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/3/howto/unicode.html</a>  the link may be help you</span>
<span class="comment-copy">Could you please add an explanation to your post. It is a valid solution but it would be a better SO post if it also explained some reasons for why strpdate2num does not work in Python3 while bytespdate2num does.</span>
<span class="comment-copy">thank you! I try your answer and solve the question. and the result is: array([ 734165.,  734168.,  734169.,  734170.,  734171.,  734172.,         734175.,  734176.,  734177.,  734178.,  734179.,  734182.,         734183.,  734184.,  734185.,  734186.,  734190.,  734191.,         734192.,  734193.,  734196.,  734197.,  734198.,  734199.,         734200.,  734203.,  734204.,  734205.,  734206.,  734207.]) how to transform these array factors to date form like 'Monday:0,tuesday:1,....' or just like'21-06-2011' that python can recognize.</span>
