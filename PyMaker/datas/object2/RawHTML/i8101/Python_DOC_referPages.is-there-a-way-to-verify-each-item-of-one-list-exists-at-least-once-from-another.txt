<div class="post-text" itemprop="text">
<p>I am attempting to verify that each string in a list exists at least once in another list. The problem I keep getting stuck on is that the strings will never be an exact match, so I need some form of regex/globbing.</p>
<pre><code>must_have_list = ['APPLE SSD', 'APPLE HDD']
example_device_list = [u'APPLE SSD SM128E', u'APPLE HDD HTS541010A9E662']
example_device_list2 = [u'APPLE SSD SD0128F', u'APPLE HDD ST3000DM001']
</code></pre>
<p>The idea is to return <code>True</code> if a given device list contains at least one of each device string from the <code>must_have_list</code>. If the given device list only contains one (or none) of the items in the <code>must_have_list</code>, then return <code>False</code></p>
<pre><code>[u'APPLE SSD SM128E', u'APPLE HDD HTS541010A9E662'] 
</code></pre>
<p><code>True</code> One of each found</p>
<pre><code>[u'APPLE HDD HTS541010A9E662', u'APPLE HDD HTS541010A9E662']
</code></pre>
<p><code>False</code> Only 2x <code>APPLE HDD</code> found, no <code>APPLE SSD</code> listed</p>
<pre><code>[u'APPLE HDD HTS541010A9E662', u'APPLE HDD HTS541010A9E662', u'APPLE SSD SM128E']
</code></pre>
<p><code>True</code> One of each found, even though there is more than one <code>APPLE HDD</code></p>
<pre><code>[u'APPLE SSD SM128E']
</code></pre>
<p><code>False</code> Only <code>APPLE SSD</code> listed, no <code>APPLE HDD</code> listed</p>
<p>How can I use regex to verify that each item in one list exists in another list?</p>
</div>
<div class="post-text" itemprop="text">
<p>If, as in your example, the pattern to be tested is always the <em>initial</em> part of the string, it is somewhat simpler:</p>
<pre><code>for must_have in must_have_list:
    notInList = True
    for example in example_device_list:
        if example.startswith(must_have):
            notInList = False
            break
    if notInList: return False
return True
</code></pre>
<p>If it can be an inner string, then you'd have to use <code>must_have in example</code> instead of startswith, wich raises algorithmical complexity.</p>
<p>Additional optimization would be to remove an example device found to not test it against other musthaves.</p>
<p>Finally, you can turn the whole process inside out and iterate through the example list on each example device removing a musthave found to be the prefix of this example, until there is no musthaves left. Depending on the sizes of must have list and examples list, it makes sense to copy the musthaves into a fresh dict (or set from collections) to improve search time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without using <code>regex</code>. This is an approach to your question using <code>str.startswith()</code>:</p>
<pre><code>def check (a=list, b=list):
    checked = []
    for k in a:
        c = False
        for j in b:
            if j.startswith(k):
                c = True
                break
        checked.append(c)
    return all(checked)

# inputs
must_have_list = ['APPLE SSD', 'APPLE HDD']
example_device_list = ['APPLE SSD SM128E', 'APPLE HDD HTS541010A9E662']
example_device_list2 = ['APPLE SSD SD0128F', 'APPLE HDD ST3000DM001']
example_device_list3 = ['APPLE ASD SD0128F', 'APPLE HDD ST3000DM001']
example_device_list4 = ['APPLE SSD SD0128F', 'APPLE ADD ST3000DM001']
example_device_list5 = ['APPLE HDD HTS541010A9E662', 'APPLE HDD HTS541010A9E662', 'APPLE SSD SM128E']

# Some tests with this lists
check_list = check(must_have_list, example_device_list)
check_list2 = check(must_have_list, example_device_list2)
check_list3 = check(must_have_list, example_device_list3)
check_list4 = check(must_have_list, example_device_list4)
check_list5 = check(must_have_list, example_device_list5)

# Outputs
print "All items of %s exists at least once in %s: %r" % ("must_have_list", "example_device_list", check_list)
print "All items of %s exists at least once in %s: %r" % ("must_have_list", "example_device_list2", check_list2)
print "All items of %s exists at least once in %s: %r" % ("must_have_list", "example_device_list3", check_list3)
print "All items of %s exists at least once in %s: %r" % ("must_have_list", "example_device_list4", check_list4)
print "All items of %s exists at least once in %s: %r" % ("must_have_list", "example_device_list5", check_list5)
</code></pre>
<p>Output:</p>
<pre><code>All items of must_have_list exists at least once in example_device_list: True
All items of must_have_list exists at least once in example_device_list2: True
All items of must_have_list exists at least once in example_device_list3: False
All items of must_have_list exists at least once in example_device_list4: False
All items of must_have_list exists at least once in example_device_list5: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>all</code> and <code>any</code> to test your conditions:</p>
<pre><code>must_have_list = ['APPLE SSD', 'APPLE HDD']
examples=[[u'APPLE SSD SM128E', u'APPLE HDD HTS541010A9E662'],
          [u'APPLE SSD SD0128F', u'APPLE HDD ST3000DM001'],
          [u'APPLE HDD HTS541010A9E662', u'APPLE HDD HTS541010A9E662', u'APPLE SSD SM128E'],
          [u'APPLE SSD SM128E'],
          [u'APPLE SSD SM128E',u'APPLE SSD SM128E']]

for ex in examples:
    print ex, all(any(r in s for s in ex) for r in must_have_list)
</code></pre>
<p>Prints:</p>
<pre><code>[u'APPLE SSD SM128E', u'APPLE HDD HTS541010A9E662'] True
[u'APPLE SSD SD0128F', u'APPLE HDD ST3000DM001'] True
[u'APPLE HDD HTS541010A9E662', u'APPLE HDD HTS541010A9E662', u'APPLE SSD SM128E'] True
[u'APPLE SSD SM128E'] False
[u'APPLE SSD SM128E', u'APPLE SSD SM128E'] False
</code></pre>
<p>Which can be used with a list comprehension to produce a list that fits the conditions:</p>
<pre><code>&gt;&gt;&gt; [ex for ex in examples if all(any(r in s for s in ex) for r in must_have_list)]
[[u'APPLE SSD SM128E', u'APPLE HDD HTS541010A9E662'], [u'APPLE SSD SD0128F', u'APPLE HDD ST3000DM001'], [u'APPLE HDD HTS541010A9E662', u'APPLE HDD HTS541010A9E662', u'APPLE SSD SM128E']]
</code></pre>
<p>A regex isn't required in this case, but you could use <code>re.search</code> rather than <code>in</code> if testing each string required it. </p>
<p>Example, say you wanted to know that the tested substring were standing alone and not part of another word like <code>SSDHYBRID</code>:</p>
<pre><code>for ex in examples:
    print ex, all(any(re.search(r'\b{}\b'.format(r), s) for s in ex) for r in must_have_list)
# same output...
</code></pre>
</div>
<span class="comment-copy">What is your question?</span>
<span class="comment-copy">Do you want to use regex to find a string pattern? Why your profile photo? Do you want to see the world burn in flames? profaner ;) (Just kidding)</span>
<span class="comment-copy">What if you just use <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">any and all?</a> instead of <code>re.sub</code>? ` for _list in [example_device_list, example_device_list2]:         all([any(i in j for j in _list) for i in must_have_list]) `</span>
<span class="comment-copy">@monchitos82 This is exactly what I was looking for. I was stuck on only using <code>any</code> or <code>all</code>, but it didn't occur to me to nest them together like that. Thank you!</span>
