<div class="post-text" itemprop="text">
<p>Appears that the default Python <code>round(1 / 2)</code> gives 0.</p>
<p>How to round float 0.5 up to 1.0, while still rounding 0.45 to 0.0, as the usual school rounding?</p>
<p>NOTE: Sorry for deleting and posting this again, but it was incorrectly marked as duplicate of another question.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is actually currently considered proper to NOT blindly round *.5 up. Rather, it is proper to round *.5 to the nearest even number. Python 3 implements this "proper" form of "banker rounding", but a lot of other languages don't (yet). Blindly rounding *.5 up produces a slight bias, but "banker rounding" helps to balance it it out. See <a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior">this thread</a> for more info. So...</p>
<p><strong>Method 1</strong></p>
<p>You could conditionally use a<code>ceil(...)</code> function (from the <a href="https://docs.python.org/3/library/math.html" rel="nofollow noreferrer">math module</a> for the rounding up aspect. You'll have to do it conditionally in order to also maintain the regular rounding behavior for values less than 0.5. Try something like the following (note that this isn't extremely robust in that it only works on positive values...it should be able to be easily adapted to work with both positive and negative values though):</p>
<pre><code>import math

val = 1.5
x = 0

if (float(val) % 1) &gt;= 0.5:
    x = math.ceil(val)
else:
    x = round(val)
</code></pre>
<p>Note that a <code>ceil(...)</code> function will return an integer, not a float. This shouldn't be a major issue, but now you are aware.</p>
<p><strong>Method 2</strong></p>
<p>From the post I linked to above, it looks like another option is to use the <a href="https://docs.python.org/3/library/decimal.html#decimal-faq" rel="nofollow noreferrer">decimal</a> module to emulate the "old" way of rounding's behavior. I'm kind of copy &amp; pasting from there, but here you go:</p>
<pre><code>import decimal

x = decimal.Decimal('1.5').quantize(decimal.Decimal('1'), 
rounding=decimal.ROUND_HALF_UP)
</code></pre>
<p>Supposedly the <code>decimal.ROUND_HALF_UP</code> form of rounding is what you are looking for. This way you don't have to use a <code>ceil(...)</code> function conditionally.</p>
<p><em>I'm guessing that this was marked as a duplicate of another because a little digging would have given you more than enough info on this topic. (I didn't mark it as a duplicate, I'm just assuming that is why someone else did.)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Getting the "school" rounding, with rounding away from 0 for value in between, also for negative numbers, the function below can be used.  This is also the rounding that was in Python 2.</p>
<pre><code>def round_school(x):
    i, f = divmod(x, 1)
    return int(i + ((f &gt;= 0.5) if (x &gt; 0) else (f &gt; 0.5)))
</code></pre>
<p>Some example results:</p>
<pre><code> 1.50:  2
 1.49:  1

 0.50:  1
 0.49:  0

-0.49:  0
-0.50: -1

-1.49: -1
-1.50: -2
</code></pre>
</div>
<span class="comment-copy">I know it was incorrectly marked as duplicate, but you may have tagged the person in the comments who dupe hammered the question and clarified the doubt :)</span>
<span class="comment-copy">@MoinuddinQuadri: Thanks for the note, and again sorry for deleting.  It just appears that once a higher rated user has tagged it as duplicate, I kind of loose control and interest for the question.  However, I still think it is a valid question.</span>
<span class="comment-copy">@EquipDev There are many high rate user over here; if one makes a mistake, others are available to fix it ;) And vaultah (one who marked previous question as duplicate) is one of the well known name in Python SO community. He must have misread the question. I am sure if you would have tagged him and described the issue, he would have reopened it :)</span>
<span class="comment-copy">If you disagree with the dupe closure, just explain why. @JacobH who is "that user" you are talking about? You can't see who downvoted the question, period.</span>
<span class="comment-copy">@vaultah if a the same question is asked within a 2 minute period and the second one is immediately downvoted after the first one was incorrectly marked as a duplicate it doesn't take a rocket surgeon to figure out what is going on.</span>
<span class="comment-copy">@StefanPochmann I edited the first paragraph of this post to explain a little better. It isn't that it always rounds up. Instead, it is that it rounds *.5 to the nearest even number. So yes, <code>round(1.5) == 2</code>. But also, <code>round(2.5) == 2</code>.</span>
