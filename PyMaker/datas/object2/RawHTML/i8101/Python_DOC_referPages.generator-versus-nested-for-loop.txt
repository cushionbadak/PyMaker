<div class="post-text" itemprop="text">
<p>I have two methods to sum numbers found in a text file.  The first one works and the second one does not.  Can anyone explain what is wrong with the second one?.</p>
<p>Input text file:</p>
<pre><code>The quick brown 123
fox 456 jumped over
the 789 lazy dog.
</code></pre>
<p>Method #1:</p>
<pre><code>total = 0
for line in open(fn):
    numbers = (int(block) for block in line.split() if block.isdigit())
    total += sum(numbers)
print('total: ', total)
</code></pre>
<p>This gives the correct answer 1368 (= 123 + 456 + 789).</p>
<p>Method #2:</p>
<pre><code>numbers = (int(block) for block in line.split() for line in open(fn) if block.isdigit())
total = sum(numbers)
print('total: ', total)
</code></pre>
<p>This produces the error:</p>
<pre><code>NameError: name 'line' is not defined
</code></pre>
<p>I'm playing around with generators so the question is really about why the generator in method #2 is no good.  I don't need suggestions on <em>other</em> ways to add up numbers in a text file.  I would like to know if there is a generator-only solution without a standard for loop.  Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You reversed the order of your loops. Generator expressions (like all Python comprehension syntax variants) list loops from <em>left to right</em> in <em>block nesting order</em>.</p>
<p>This works:</p>
<pre><code>numbers = (int(block) for line in open(fn) for block in line.split() if block.isdigit())
</code></pre>
<p>because it matches the nesting order of the normal <code>for</code> loops (with only the per-iteration expression at the front):</p>
<pre><code>numbers = (int(block)
    for line in open(fn)
        for block in line.split()
            if block.isdigit())
</code></pre>
<p>Your code tried to access <code>line.split()</code> before the <code>for line in open(fn)</code> loop could execute and set <code>line</code>.</p>
<p>See the <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">expressions reference documentation</a>:</p>
<blockquote>
<p>The comprehension consists of a single expression followed by at least one <code>for</code> clause and zero or more <code>for</code> or <code>if</code> clauses. In this case, the elements of the new container are those that would be produced by considering each of the <code>for</code> or <code>if</code> clauses a block, <strong>nesting from left to right</strong>, and evaluating the expression to produce an element each time the innermost block is reached.</p>
</blockquote>
<p>Bold emphasis mine.</p>
</div>
<span class="comment-copy">Place <code>for block in line.split() </code> after the <code>for line in open(fn)</code></span>
<span class="comment-copy">Thanks.  It makes sense now.</span>
