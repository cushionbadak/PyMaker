<div class="post-text" itemprop="text">
<p>I am trying to make an API call from within my service and I am running into event loop issues.  Can someone help me understand what I am doing wrong?</p>
<p>Basically I want to make a service that does some calculations based on data pulled from a different service.</p>
<p>I can call this code below from a cli, but not when I start up a web app (i.e.) hitting <a href="http://127.0.0.1:8080/add" rel="nofollow noreferrer">http://127.0.0.1:8080/add</a></p>
<pre><code>loop = asyncio.get_event_loop()
data = loop.run_until_complete(run_fetch(loop, 'http://google.com'))   
</code></pre>
<p>Sample code:</p>
<pre><code>from aiohttp import web
import aiohttp
import asyncio

async def add(request):
    loop = asyncio.get_event_loop()
    data = loop.run_until_complete(run_fetch(loop, 'http://google.com'))
    return web.json_response(data)


async def fetch(client, url):
    async with client.get(url) as resp:
        assert resp.status == 200
        return await resp.text()


async def run_fetch(loop, url):
    async with aiohttp.ClientSession(loop=loop) as client:
        html = await fetch(client, url)
    return html

app = web.Application()
app.router.add_get('/add', add)
web.run_app(app, host='127.0.0.1', port=8080)
</code></pre>
<p>Exception:</p>
<p>Error handling request
Traceback (most recent call last):
  File ".../aiohttp/web_protocol.py", line 417, in start
    resp = yield from self._request_handler(request)</p>
<p>File ".../aiohttp/web.py", line 289, in _handle
    resp = yield from handler(request)</p>
<p>File ".../sample.py", line 11, in add data = loop.run_until_complete(run_fetch(loop, '<a href="http://google.com" rel="nofollow noreferrer">http://google.com</a>'))</p>
<p>File ".../python3.6/asyncio/base_events.py", line 454, in run_until_complete
    self.run_forever()</p>
<p>File ".../python3.6/asyncio/base_events.py", line 408, in run_forever
    raise RuntimeError('This event loop is already running')</p>
<p>RuntimeError: This event loop is already running</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_until_complete" rel="nofollow noreferrer"><code>run_until_complete</code></a> is the way to run some async code from the sync context. Under the hood it adds provided future to the given ioloop and calls <code>run_forever</code> then returns result or throws exception (resolved future).</p>
<p>Actually you need to <code>await run_fetch(loop, 'http://google.com')</code>, since the caller function is asynchronous.</p>
</div>
<span class="comment-copy">That makes sense, and worked!  Thank you!</span>
