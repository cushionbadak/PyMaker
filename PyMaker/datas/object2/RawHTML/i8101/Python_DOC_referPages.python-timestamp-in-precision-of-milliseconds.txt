<div class="post-text" itemprop="text">
<p>I need to output a timestamp for a .csv file of the current time in milliseconds. Right now I have: </p>
<pre><code>localTime = time.localtime(time.time())
now = time.localtime(time.time())
currTime = time.time()
now = time.strftime("\"%Y-%m-%d %H:%M:%S.%f\"", time.localtime(currTime))
</code></pre>
<p>doing it this way will output the timestamp in the following format:
"2017-05-09 10:13:33.%f" this obviously is not correct. Ive heard that time.time only goes as precise as a second, but have also heard that it can support microseconds. Can somebody clear this up for me or show me the proper way to format this code to get a timestamp in the needed format? (2017-05-09 10:13:33.100) for example</p>
</div>
<div class="post-text" itemprop="text">
<p>A quick solution would be: </p>
<pre><code>t=time.time()
millis = int((t - int(t))*1000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you said, the problem is that <code>time</code> doesn't necessarily give you the precision you want[1]. <code>datetime</code> would be a better option:</p>
<pre><code>from datetime import datetime

now = datetime.utcnow()  # or datetime.now(your_timezone)
formatted = now.strftime("%Y-%m-%d %H:%M:%S.%f")
print(formatted)
</code></pre>
<p>[1] Both in python 2.x and 3.x, according to <a href="https://docs.python.org/3/library/time.html#time.time" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.</p>
</blockquote>
</div>
<span class="comment-copy">What would you want it to look like?</span>
<span class="comment-copy">Something like this: 2017-05-09 10:13:33.100</span>
