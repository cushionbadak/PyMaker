<div class="post-text" itemprop="text">
<p>Since python lists aren't implemented as arrays, if for some large N we have:</p>
<pre><code>dic = { 0: 'val0', ................................, N: 'valN' }
lst = ['val0', ......................................., 'valN' ]
</code></pre>
<p>for   0 &lt;= X &lt;= N ,which is faster?</p>
<pre><code>A) res = dic[X]
B) res = lst[X]
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can run a <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">timeit</a> test like this:</p>
<pre><code>d={0: 'val0', 1: 'val1', 2: 'val2', 3: 'val3', 4: 'val4', 5: 'val5', 6: 'val6', 7: 'val7', 8: 'val8', 9: 'val9', 10: 'val10'}
l=['val0', 'val1', 'val2', 'val3', 'val4', 'val5', 'val6', 'val7', 'val8', 'val9', 'val10']

import timeit

print(timeit.timeit("""for i in range(11):
    d[i]""", globals=globals()))

print(timeit.timeit("""for i in range(11):
    l[i]""", globals=globals()))
</code></pre>
<p>The result is as followed:</p>
<pre><code>1.003921410003386
0.9669559969988768
</code></pre>
<p>With list indexing being a slightly faster. </p>
<p><a href="https://repl.it/HxjO" rel="nofollow noreferrer">Try it online!</a></p>
<p>The result will remain parallel with increase of N, here's 1000 N:</p>
<pre><code>d={i:"val%i"%i for i in range(1000)}
l=['val%i'%i for i in range(1000)]

import timeit

print(timeit.timeit("""for i in range(1000):
    d[i]""", number = 10000, globals=globals()))

print(timeit.timeit("""for i in range(1000):
    l[i]""", number = 10000, globals=globals()))
</code></pre>
<p>With result being:</p>
<pre><code>0.7665060800063657
0.5568666460021632
</code></pre>
<p>List index is still faster. </p>
<p><a href="https://repl.it/Hxjn" rel="nofollow noreferrer">Try it online!</a></p>
</div>
<span class="comment-copy">Your can use <code>timeit</code> to get the answers to all your performance questions...</span>
<span class="comment-copy">Python lists <i>are</i> implemented as "arrays" in the sense you probably mean.  <code>somelist[i]</code> takes time independent of <code>i</code> - no searching of any kind is done.</span>
<span class="comment-copy">Thanks @TimPeters, that was the answer I was looking for</span>
<span class="comment-copy">If I recall correctly, indexing a list is little bit faster, but not much. Which is surprising because hash function is never computed when indexing a list, but those were the results that I saw.</span>
<span class="comment-copy">@Akavall, <code>hash</code> for ints is trivial. Try it :)</span>
<span class="comment-copy">For the previous comment saying 11 N is not large enough, I added an example for 1000 N</span>
