<div class="post-text" itemprop="text">
<p>Say I had a sentence <code>"The cat ate the mouse."</code> I want to split the sentence with <code>size = 2</code>.</p>
<p>So the result array becomes: </p>
<pre><code> ["the cat", "cat ate", "ate the", "the mouse"]
</code></pre>
<p>If my size was 3, it should become: </p>
<pre><code>["the cat ate", "cat ate the", "ate the mouse"]
</code></pre>
<p>My method I have right now uses tons of for loops and I'm not sure if there is a best way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using list slice, you can get sub-list.</p>
<pre><code>&gt;&gt;&gt; words = "The cat ate the mouse.".rstrip('.').split()
&gt;&gt;&gt; words[0:3]
['The', 'cat', 'ate']
</code></pre>
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> to convert the list to a string joined by delimiter:</p>
<pre><code>&gt;&gt;&gt; ' '.join(words[0:3])
'The cat ate'
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehension</a> provides a conside way to create words list:</p>
<pre><code>&gt;&gt;&gt; n = 2
&gt;&gt;&gt; [' '.join(words[i:i+n]) for i in range(len(words) - n + 1)]
['The cat', 'cat ate', 'ate the', 'the mouse']

&gt;&gt;&gt; n = 3
&gt;&gt;&gt; [' '.join(words[i:i+n]) for i in range(len(words) - n + 1)]
['The cat ate', 'cat ate the', 'ate the mouse']
# [' '.join(words[0:3]), ' '.join(words[1:4]),...]
</code></pre>
<hr/>
</div>
<div class="post-text" itemprop="text">
<p>you can use nltk library to do all the job</p>
<pre><code>import nltk
from nltk.util import ngrams

text = "The cat ate the mouse."
tokenize = nltk.word_tokenize(text)
bigrams = ngrams(tokenize,3)

for gram in bigrams:
    print gram
</code></pre>
<p>what gives us:
('The', 'cat', 'ate')
('cat', 'ate', 'the')
('ate', 'the', 'mouse')
('the', 'mouse', '.')</p>
</div>
<span class="comment-copy">Look up "ngrams python"</span>
<span class="comment-copy">yean, you're right.</span>
