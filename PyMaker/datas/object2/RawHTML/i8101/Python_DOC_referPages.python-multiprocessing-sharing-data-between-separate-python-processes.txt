<div class="post-text" itemprop="text">
<p>Multiprocessing allows me to share data between processes started from within the same python runtime interpreter.
But what if i had a need to share data between processes started by separate python runtime processes?
I was looking at multiprocessing.Manager which seems to be the right construct for it. If I create a manager i can see its address:</p>
<pre><code>&gt;&gt;&gt; from multiprocessing import Manager
&gt;&gt;&gt; m=Manager()
&gt;&gt;&gt; m.address
'/tmp/pymp-o2TCd_/listener-Qld03B'
</code></pre>
<p>And the socket is there:</p>
<pre><code>adrian@sammy ~/temp $ netstat -naA unix | grep pymp
unix  2      [ ACC ]     STREAM     LISTENING     1220401  /tmp/pymp-     o2TCd_/listener-Qld03B
</code></pre>
<p>If I start a new process with multiprocessing.Process it spawns a new python interpreter that somehow inherits information about these shared constructs like this Manager.
Is there a way to access it from a new python process NOT spawned from the same one that created the Manager?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are on the (or a) right track with this.</p>
<p>In <a href="https://stackoverflow.com/questions/43832826/python-multiprocessing-sharing-data-between-separate-python-processes#comment74704352_43832826">a comment, stovfl suggests</a> looking at the remote manager section of the Python multiprocessing <code>Manager</code> documentation (<a href="https://docs.python.org/2/library/multiprocessing.html#managers" rel="nofollow noreferrer">Python2</a>, <a href="https://docs.python.org/3/library/multiprocessing.html#managers" rel="nofollow noreferrer">Python3</a>).  As you have observed, each manager has a name-able entity (a socket in <code>/tmp</code> in this case) through which each Python process can connect to a peer Python process.  Because these are accessible from <em>any</em> process, however, they each have an access key.</p>
<p>The default key for each Manager is the one for the "main process", and it is <a href="https://hg.python.org/cpython/file/tip/Lib/multiprocessing/process.py#l298" rel="nofollow noreferrer">a string of 32 random bytes</a>:</p>
<pre><code>class _MainProcess(BaseProcess):

    def __init__(self):
        self._identity = ()
        self._name = 'MainProcess'
        self._parent_pid = None
        self._popen = None
        self._config = {'authkey': AuthenticationString(os.urandom(32)),
                        'semprefix': '/mp'}
        # Note that some versions of FreeBSD only allow named
        # semaphores to have names of up to 14 characters.  Therefore
        # we choose a short prefix.
        #
        # On MacOSX in a sandbox it may be necessary to use a
        # different prefix -- see #19478.
        #
        # Everything in self._config will be inherited by descendant
        # processes.
</code></pre>
<p>but you may assign your own key, which you can then know and therefore use from anywhere else.</p>
<p>There are other ways to handle this.  For instance, you can use XML RPC to export callable functions from one Python process, callable from anything—not just Python—that can speak XML RPC.  See the <a href="https://docs.python.org/2/library/xmlrpclib.html" rel="nofollow noreferrer">Python2</a> or <a href="https://docs.python.org/3/library/xmlrpc.client.html#module-xmlrpc.client" rel="nofollow noreferrer">Python3</a> documentation.  Heed this warning (this is the py3k variant but it applies in py2k as well):</p>
<blockquote>
<p><strong>Warning</strong>: The <code>xmlrpc.client</code> module is not secure against maliciously constructed data. If you need to parse untrusted or unauthenticated data see XML vulnerabilities. </p>
</blockquote>
<p>Do not, however, assume that using a <code>multiprocessing.Manager</code> instead of XML RPC secures you against maliciously constructed data.  Those are just as vulnerable since they will unpickle arbitrary data.  See <a href="https://stackoverflow.com/q/10282175/1256452">Attacking Python's pickle</a> for more about this.</p>
</div>
<span class="comment-copy">Read about <code>RemoteManager</code>: <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">I want to share numpy random state of a parent process with a child process. I've tried using <code>Manager</code> but still no luck. Could you please take a look at my question <a href="https://stackoverflow.com/questions/49372619/how-to-share-numpy-random-state-of-a-parent-process-with-child-processes">here</a> and see if you can offer a solution? I can still get different random numbers if I do <code>np.random.seed(None)</code> every time that I generate a random number, but this does not allow me to use the random state of the parent process, which is not what I want. Any help is greatly appreciated.</span>
<span class="comment-copy">@Amir: I don't know how <code>numpy</code>'s internal <code>random</code> works (how much state it has and so on) but unless there's an accessor, you cannot share state that way. I'll add a comment or two on the other thread if I have something to say that no one else has yet, though.</span>
