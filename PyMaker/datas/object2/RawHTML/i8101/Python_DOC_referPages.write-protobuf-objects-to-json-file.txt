<div class="post-text" itemprop="text">
<p>I have such <code>old.JSON</code> file:</p>
<pre><code>[{
    "id": "333333",
    "creation_timestamp": 0,
    "type": "MEDICAL",
    "owner": "MED.com",
    "datafiles": ["stomach.data", "heart.data"]
}]
</code></pre>
<p>Then I create an object based on <code>.proto</code> file:</p>
<pre><code>message Dataset {
  string id = 1;
  uint64 creation_timestamp = 2;
  string type = 3;
  string owner = 4;
  repeated string datafiles = 6;
}
</code></pre>
<p>Now I want to save this object save back this  object to other <code>.JSON</code> file.
I did this:</p>
<pre><code>import json
from google.protobuf.json_format import MessageToJson

with open("new.json", 'w') as jsfile:
    json.dump(MessageToJson(item), jsfile)
</code></pre>
<p>As a result I have:</p>
<pre><code>"{\n  \"id\": \"333333\",\n  \"type\": \"MEDICAL\",\n  \"owner\": \"MED.com\",\n  \"datafiles\": [\n    \"stomach.data\",\n    \"heart.data\"\n  ]\n}"
</code></pre>
<p>How to make this file looks like <code>old.JSON</code> file? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.json_format-pysrc" rel="nofollow noreferrer">https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.json_format-pysrc</a></p>
<pre><code>31  """Contains routines for printing protocol messages in JSON format. 
32   
33  Simple usage example: 
34   
35    # Create a proto object and serialize it to a json format string. 
36    message = my_proto_pb2.MyMessage(foo='bar') 
37    json_string = json_format.MessageToJson(message) 
38   
39    # Parse a json format string to proto object. 
40    message = json_format.Parse(json_string, my_proto_pb2.MyMessage()) 
41  """ 
</code></pre>
<p>also </p>
<pre><code> 89 -def MessageToJson(message, including_default_value_fields=False): 
...
 99    Returns: 
100      A string containing the JSON formatted protocol buffer message. 
</code></pre>
<p>It is pretty clear that this function will return exactly one object of type string. This string contains a lot of json structure, but it's still just a string, as far as python is concerned.</p>
<p>You then pass it to a function which takes a python object (not json), and serializes it to json. </p>
<p><a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">https://docs.python.org/3/library/json.html</a></p>
<pre><code>json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)

Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.
</code></pre>
<p>Okay, how exactly would you encode a string into json? Clearly it can't just use json specific characters, so those would have to be escaped. Maybe there's an online tool, like <a href="http://bernhardhaeussner.de/odd/json-escape/" rel="nofollow noreferrer">http://bernhardhaeussner.de/odd/json-escape/</a> or <a href="http://www.freeformatter.com/json-escape.html" rel="nofollow noreferrer">http://www.freeformatter.com/json-escape.html</a> </p>
<p>You can go there, post the starting json from the top of your question, tell it to generate the proper json, and you get back ... almost exactly what you are getting at the bottom of your question. Cool everything worked correctly! </p>
<p>(I say almost because one of those links adds some newlines on its own, for no apparent reason. If you encode it with the first link, then decode it with the second, it is exact.)</p>
<p>But that's not the answer you wanted, because you didn't want to double-jsonify the data structure. You just wanted to serialize it to json once, and write that to a file:</p>
<pre><code>import json
from google.protobuf.json_format import MessageToJson

with open("new.json", 'w') as jsfile:
    actual_json_text = MessageToJson(item)
    jsfile.write( actual_json_text )
</code></pre>
</div>
<span class="comment-copy">In what way was this not like the original? I notice that its not in a list. Is that the problem?</span>
<span class="comment-copy">@tdelaney Yes, it a not a list. It has \" instead of just ", and \n is explicit.</span>
<span class="comment-copy">Have you tried <code>jsfile.write(MessageToJson(item))</code> directly?</span>
<span class="comment-copy">The list is likely how you save the data in the first place. You defined a message type for a single <code>dict</code> inside the list. From what you've posted here I don't know if you have defined another message type for the enclosing list. But if you just encoded each item of that outer list, you lost the list. As for <code>\n</code>, try printing the string... they get rendered as newlines. The python representation of a string shows them as \n so you can see them.</span>
<span class="comment-copy">@Psidom it works, but save as not list, but I can add <code>[]</code> to file manually.</span>
<span class="comment-copy">Yes, MessageToJson looks good, but causes new problem <a href="http://stackoverflow.com/questions/43835243/google-protobuf-json-format-messagetojson-changes-names-of-fields-how-to-avoid" title="google protobuf json format messagetojson changes names of fields how to avoid">stackoverflow.com/questions/43835243/â€¦</a></span>
