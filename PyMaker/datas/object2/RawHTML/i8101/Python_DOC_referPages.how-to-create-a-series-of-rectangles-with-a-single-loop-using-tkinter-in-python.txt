<div class="post-text" itemprop="text">
<p>I am trying to draw a series of rectangles given the values stored in a list. </p>
<p>For starters, nested loop is often the way to go. However, after some tests, it turned out to be a very bad idea.</p>
<p>Here's an example:</p>
<pre><code>bs = 20
x_values = ['3', '4', '5', '6']
y_values = ['11', '11', '11', '11']

for X in x_values:
    for Y in y_values:
        x1 = int(X) * bs
        y1 = int(Y) * bs
        x2 = int(x1) + bs
        y2 = int(y1) + bs
        self.canvas.create_rectangle(x1, y1, x2, y2, fill='red', width=1,outline='white', tag='obj')
</code></pre>
<p>Needless to say that this is a <strong>terrible</strong> idea. For something of small size such as this, it may work fine. However, if the list of elements increases, that would cause problems. All in all, this method is a no go.</p>
<p>After some research, I tried something else. </p>
<pre><code>bs = 20
x_values = ['3', '4', '5', '6']
y_values = ['11', '11', '11', '11']

canvas.create_rectangle([int(X) * bs for X in x],
                    [int(Y) * bs for Y in y],
                    [(int(X) * bs) + bs for X in x],
                    [(int(Y) * bs) + bs for Y in y])
</code></pre>
<p>What I was trying to do is quite simple. Instead of looping through all the values linearly as before, I decided to generate the elements <strong>on the fly</strong>, that is, the for loop returns the value, Tkinter reads it and uses it as coordinates. Then when the next value will be generated, the last one will be dumped.</p>
<p>For one reason or another, Tkinter is reading all the variable at once and returning an error:</p>
<pre><code>_tkinter.TclError: wrong # coordinates: expected 0 or 4, got 16
</code></pre>
<p>How would I go about solving this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want to draw four rectangles, you can combine your two lists of x and y coordinates into one list of x,y pairs with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>:</p>
<pre><code>coords = zip(x_values, y_values)
</code></pre>
<p>this will result in the following:</p>
<pre><code>[('3', '11'), ('4', '11'), ('5', '11'), ('6', '11')]
</code></pre>
<p>If you now want to draw four rectangles, with each of those coordinates being used to define the actual coordinates, you can loop over each pair like this:</p>
<pre><code>for x1, y1 in zip(x_values, y_values):
    x1 = int(x1) * bs
    y1 = int(y1) * bs
    x2 = x1 + bs
    y2 = y1 + bs
    canvas.create_rectangle(x1,y1,x2,y2, fill="red")
</code></pre>
</div>
<span class="comment-copy">Those are list comprehensions, i.e. you are generating lists, not integers. It's not called <code>create_rectangles()</code> :-) So your first approach seems the way to go (though you are not clearly stating what you want to achieve). How many rectangles are you trying to create?</span>
<span class="comment-copy">The only thing I see wrong with your first method is that it draws four rectangles at each of four positions (i.e. <code>(3,11)</code>,<code>(4,11)</code>,<code>(5,11)</code> and <code>(6,11)</code>). Do you perhaps want to only draw one rectangle at each of those locations?</span>
<span class="comment-copy">As you can see, there are 4 elements in the list, thus four rectangles</span>
<span class="comment-copy">@FamousJameous that is the case. I only want to draw one rectangle at each of those locations.</span>
<span class="comment-copy">Given an <code>x_values</code> with four numbers, and <code>y_values</code> with four numbers, how many rectangles are you wanting to draw? One? Four? Sixteen?</span>
<span class="comment-copy">This works just great. Thank you!</span>
