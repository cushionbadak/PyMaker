<div class="post-text" itemprop="text">
<p>Here is my code,      </p>
<pre><code>for line in open('u.item'):
#read each line
</code></pre>
<p>whenever I run this code it gives the following error:</p>
<pre><code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 2892: invalid continuation byte
</code></pre>
<p>I tried to solve this and add an extra parameter in open(), the code looks like;</p>
<pre><code>for line in open('u.item', encoding='utf-8'):
#read each line
</code></pre>
<p>But again it gives the same error. 
what should I do then! Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>As suggested by Mark Ransom, I found the right encoding for that problem. The encoding was "ISO-8859-1", so replacing <code>open("u.item", encoding="utf-8")</code> with <code>open('u.item', encoding = "ISO-8859-1")</code> will solve the problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your file doesn't actually contain utf-8 encoded data, it contains some other encoding. Figure out what that encoding is and use it in the <code>open</code> call.</p>
<p>In Windows-1252 encoding for example the <code>0xe9</code> would be the character <code>é</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Also worked for me, ISO 8859-1 is going to save a lot, hahaha, mainly if using Speech Recognition API's</p>
<p>Example: </p>
<pre><code>file = open('../Resources/' + filename, 'r', encoding="ISO-8859-1");
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this to read using pandas </p>
<pre><code>pd.read_csv('u.item', sep='|', names=m_cols , encoding='latin-1')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <code>Python 2</code> the following will the solution:</p>
<pre><code>import io
for line in io.open("u.item", encoding="ISO-8859-1"):
    # do something
</code></pre>
<p>Because <code>encoding</code> parameter doesn't work with <code>open()</code>, you will be getting the following error:</p>
<pre>
TypeError: 'encoding' is an invalid keyword argument for this function
</pre>
</div>
<div class="post-text" itemprop="text">
<p>If someone looking for these, this is an example for converting a CSV file in Python 3:</p>
<pre><code>try:
    inputReader = csv.reader(open(argv[1], encoding='ISO-8859-1'), delimiter=',',quotechar='"')
except IOError:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Sometimes</strong> when <code>open(filepath)</code> in which <code>filepath</code> actually is not a file would get the same error, so firstly make sure the file you're trying to open exists:</p>
<pre><code>import os
assert os.path.isfile(filepath)
</code></pre>
<p>hope this will help.</p>
</div>
<span class="comment-copy">Badly encoded data I would assume.</span>
<span class="comment-copy">Or just not UTF-8 data.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/46180610/python-3-unicodedecodeerror-how-do-i-debug-unicodedecodeerror">Python 3 UnicodeDecodeError - How do I debug UnicodeDecodeError?</a></span>
<span class="comment-copy">Explicit is better than implicit (PEP 20).</span>
<span class="comment-copy">"ISO-8859-1" worked out for me..</span>
<span class="comment-copy">The trick is that ISO-8859-1 or Latin_1 is 8 bit character sets, thus all garbage has a valid value. Perhaps not useable, but if you want to ignore!</span>
<span class="comment-copy">I had the same issue UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd0 in position 32: invalid continuation byte. I used python 3.6.5 to install aws cli. And when I tried aws --version it failed with this error. So I had to edit /Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/configparser.py and changed the code to the following <b>def read(self, filenames, encoding="ISO-8859-1"):</b></span>
<span class="comment-copy">@OrangeSherbet I implemented detection using <code>chardet</code>. Here's the one-liner (after <code>import chardet</code>): <code>chardet.detect(open(in_file, 'rb').read())['encoding']</code>. Check out this answer for details: <a href="https://stackoverflow.com/a/3323810/615422">stackoverflow.com/a/3323810/615422</a></span>
<span class="comment-copy">So, How can I find out what encoding is it! I am using linux</span>
<span class="comment-copy">There is no way to do that that always works, but see the answer to this question: <a href="http://stackoverflow.com/questions/436220/python-is-there-a-way-to-determine-the-encoding-of-text-file" title="python is there a way to determine the encoding of text file">stackoverflow.com/questions/436220/…</a></span>
<span class="comment-copy">You may be correct that the OP is reading ISO 8859-1, as can be deduced from the 0xe9 (é) in the error message, but you should explain why your solution works. The reference to speech recognitions API's does not help.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">docs.python.org/3/library/codecs.html#standard-encodings</a></span>
<span class="comment-copy">But this is version 3</span>
<span class="comment-copy">Yeah I know. I thought it might be helpful for the people using <code>Python 2</code></span>
<span class="comment-copy">Worked for me in Python3 as well</span>
<span class="comment-copy">In case you want something easier to remember, <code>'ISO-8859-1'</code> is also known as <code>'latin-1'</code> or <code>'latin1'</code>.</span>
