<div class="post-text" itemprop="text">
<p>I want to write a python script which ensures in any case that a database connection will be closed. (Please note that I'm not sure if I used the correct terms for everything described below.)</p>
<p>I could think of the following situations to end the script:</p>
<ul>
<li>The script runs without any problem to its end. </li>
<li>The script is stopped by an raised exception.</li>
<li>The script is stopped while receiving a SIGTERM.</li>
<li>The script is stopped while receiving a SIGKILL.</li>
</ul>
<p>What would be the best method to ensure that the database connection will be closed in any case. It would be nice if you could point out where the strengths and boundaries of the <em>with</em> and <em>finally</em> statements are. </p>
<p>As this question has a more theoretical interest no minimal code example is given. Please also node that it doesn't have to be a database connection I'm generally interested in the possibilities. </p>
<p>Thank you in advance.
Best,
Christian </p>
</div>
<div class="post-text" itemprop="text">
<p>One possibility is the <a href="https://docs.python.org/3.5/library/atexit.html" rel="nofollow noreferrer"><code>atexit</code> module</a>. But it is cleaner to use <code>try:</code>/<code>finally:</code>, or even better make a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers" rel="nofollow noreferrer">context manager</a> so that your connection object can be used in a <code>with:</code> statement.</p>
<p>By the way, another way an exit can happen is that the <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer"><code>sys.exit()</code> function</a> is called. Internally, even <code>sys.exit()</code> works by raising an exception of type <a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="nofollow noreferrer"><code>SystemExit</code></a>, so <code>with:</code> statements and <code>finally:</code> handlers will still be called.</p>
<p>As the <code>atexit</code> documentation points out, none of these will be called if the program is exited with <a href="https://docs.python.org/3/library/os.html#os._exit" rel="nofollow noreferrer"><code>os._exit()</code></a>.</p>
</div>
<span class="comment-copy">If the script exits, the database connection will be closed no matter what anyway; that's just how processes work.  (Whether the database commits or rolls back is another matter, though.)</span>
<span class="comment-copy">if the script fails for whatever reason all transactions (completed or interrupted) after the last successful <code>commit()</code> will be rolled back.</span>
<span class="comment-copy">Also note: There is another possibility: The interpreter seg faults, and no cleanup is done within the script at all, only the OS process cleanup occurs (which should close pipes, sockets, file handles, and release memory, but not necessarily "nicely"; buffers may go unflushed, transactions uncommitted, etc.), which leads to the aforementioned rollback for the DB connection. Nothing can protect against that completely (bad <code>ctypes</code> use or extension modules are fully capable of seg faulting the interpreter, and there are always some ways to write pathological code to trigger it in other ways).</span>
<span class="comment-copy">You can also take a look at <a href="https://en.wikipedia.org/wiki/ACID" rel="nofollow noreferrer">this</a></span>
