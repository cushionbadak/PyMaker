<div class="post-text" itemprop="text">
<p>I understand that</p>
<ul>
<li><p><code>__enter__</code> and <code>__exit__</code> are used to implement a context manager. </p></li>
<li><p>if an exception occurs in a <code>with</code> statement, the exception's type, value and traceback are passed to the <code>__exit__</code> method.</p></li>
<li><p><code>__exit__</code> can handle the exception:</p>
<ol>
<li>Returning <code>True</code>: the exception is gracefully handled.</li>
<li>Returning anything else: the <code>with</code> statement raises the exception</li>
</ol></li>
</ul>
<hr/>
<p><strong>I came across the following <code>__exit__</code> method. Is the return statement  redundant?</strong> </p>
<pre><code>def __exit__(self, type, value, traceback):
    self.close()
    return type == None
</code></pre>
<p>since it seems to me that,</p>
<ul>
<li>If no exception occurred, <code>type</code> will naturally be <code>None</code>, so <code>__exit__</code> returns true. Nothing is raised.</li>
<li>If an exception did occur, <code>type</code> is set to the actual exception type, so <code>__exit__</code> returns false. The exception is raised as is.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Yes, that return statement is redundant. Only when <code>type</code> is <strong>not</strong> <code>None</code>  does the return value matter.</p>
<p>From the <a href="https://docs.python.org/3/reference/datamodel.html#object.__exit__" rel="noreferrer"><code>object.__exit__()</code> documentation</a>:</p>
<blockquote>
<p>If an exception is supplied, and the method wishes to suppress the exception (i.e., prevent it from being propagated), it should return a true value. Otherwise, the exception will be processed normally upon exit from this method.</p>
</blockquote>
<p>Note that a <em>true value</em> will suppress the exception; so <code>1</code> or <code>"Handled!"</code> would also work, not just <code>True</code>.</p>
<p>Removing that <code>return</code> line would result in <code>None</code> being returned instead, and the functionality would remain unchanged. Readability would be improved however, because that <code>return type == None</code> statement is just confusing on multiple levels (why not use <code>type is None</code> for example?).</p>
</div>
<span class="comment-copy">That's a confusing <code>return</code> statement on more than one level. Never use <code>== None</code> when you can use <code>is None</code> instead. But yes, just remove that <code>return</code> line altogether for all that it is worth.</span>
<span class="comment-copy">It's also confusing when you name method argument <code>type</code>. Because <code>type</code> is already build-in keyword. it's better to use <code>exc_type</code> as it don't confuse and not shadows build-in keyword.</span>
