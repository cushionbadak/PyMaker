<div class="post-text" itemprop="text">
<p>I have a app that uses win32evtlog to get and display different events and I would like to limit the display to events of a specific level but win32evtlog doesn't return this.  It seems that you can convert an event to XML and then pull this info but I can't work out how you get the event from a loop to XML.</p>
<p>I can get up to the following and use it to display data the LogObject has such as LogObject.TimeGenerated</p>
<pre><code>Log = win32evtlog.OpenEventLog('localhost', 'Application')
while 1:
    LogObjects = winev32tlog.ReadEventLog(Log, win32evtlog.EVENTLOG_BACKWARDS_READ|wine32vtlog.EVENTLOG_SEQUENTIAL_READ, 0)
    if not LogObjects:
        break
    for LogObject in LogObjects:
</code></pre>
<p>I tried the convert using </p>
<pre><code>LogObjectXML = win32evtlog.EvtRender(LogObject, 1)
</code></pre>
<p>This unfortunately returns</p>
<pre><code>TypeError: The object is not a PyHANDLE object
</code></pre>
<p>So I know I need to get some sort of handle object that I can use to point the EvtRender at the correct event but can't work out how I do that.</p>
<p>This question is quite similar to <a href="https://stackoverflow.com/questions/22862430/how-retrieve-from-python-win32evtlog-rest-of-info#">How retrieve from Python win32evtlog rest of info?</a> but the solution there didn't answer the critical bit of how we convert the object to XML.</p>
<p>--== Edited with information about the XML for CristiFati ==--</p>
<p>Below is an example of an Application event where the event message reads:-</p>
<pre><code>Updated Windows Defender status successfully to SECURITY_PRODUCT_STATE_ON.
</code></pre>
<p>The XML as per event viewer is as below</p>
<pre><code>- &lt;Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event"&gt;
- &lt;System&gt;
  &lt;Provider Name="SecurityCenter" /&gt; 
  &lt;EventID Qualifiers="0"&gt;15&lt;/EventID&gt; 
  &lt;Level&gt;4&lt;/Level&gt; 
  &lt;Task&gt;0&lt;/Task&gt; 
  &lt;Keywords&gt;0x80000000000000&lt;/Keywords&gt; 
  &lt;TimeCreated SystemTime="2017-05-23T07:36:27.627108000Z" /&gt; 
  &lt;EventRecordID&gt;49419&lt;/EventRecordID&gt; 
  &lt;Channel&gt;Application&lt;/Channel&gt; 
  &lt;Computer&gt;Name.domain.here&lt;/Computer&gt; 
  &lt;Security /&gt; 
  &lt;/System&gt;
- &lt;EventData&gt;
  &lt;Data&gt;Windows Defender&lt;/Data&gt; 
  &lt;Data&gt;SECURITY_PRODUCT_STATE_ON&lt;/Data&gt; 
  &lt;/EventData&gt;
  &lt;/Event&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>ReadEventLog</em> returns <em>PyEventLogRecord</em>s (wrapper over <a href="https://docs.microsoft.com/en-gb/windows/desktop/api/winnt/ns-winnt-_eventlogrecord" rel="nofollow noreferrer">[MS.Docs]: _EVENTLOGRECORD structure</a>), while <em>EvtRender</em> expects (you need to work with) <em>PyHANDLE</em>s (<em>PyEVT_HANDLE</em>s (wrapper over <em>EVT_HANDLE</em> (<a href="https://docs.microsoft.com/en-gb/windows/desktop/WES/windows-event-log-data-types" rel="nofollow noreferrer">[MS.Docs]: Windows Event Log Data Types</a>) to be more precise)).<br/>
So, for getting <em>XML</em> data, you need to use the functions family that works with this type: e.g. <em>EvtQuery</em>, <em>EvtNext</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

import sys
import pywintypes
import win32evtlog

INFINITE = 0xFFFFFFFF
EVTLOG_READ_BUF_LEN_MAX = 0x7FFFF


def get_record_data(eventlog_record):
    ret = dict()
    for key in dir(eventlog_record):
        if 'A' &lt; key[0] &lt; 'Z':
            ret[key] = getattr(eventlog_record, key)
    return ret


def get_eventlogs(source_name="Application", buf_size=EVTLOG_READ_BUF_LEN_MAX, backwards=True):
    ret = list()
    evt_log = win32evtlog.OpenEventLog(None, source_name)
    read_flags = win32evtlog.EVENTLOG_SEQUENTIAL_READ
    if backwards:
        read_flags |= win32evtlog.EVENTLOG_BACKWARDS_READ
    else:
        read_flags |= win32evtlog.EVENTLOG_FORWARDS_READ
    offset = 0
    eventlog_records = win32evtlog.ReadEventLog(evt_log, read_flags, offset, buf_size)
    while eventlog_records:
        ret.extend(eventlog_records)
        offset += len(eventlog_records)
        eventlog_records = win32evtlog.ReadEventLog(evt_log, read_flags, offset, buf_size)
    win32evtlog.CloseEventLog(evt_log)
    return ret


def get_events_xmls(channel_name="Application", events_batch_num=100, backwards=True):
    ret = list()
    flags = win32evtlog.EvtQueryChannelPath
    if backwards:
        flags |= win32evtlog.EvtQueryReverseDirection
    try:
        query_results = win32evtlog.EvtQuery(channel_name, flags, None, None)
    except pywintypes.error as e:
        print(e)
        return ret
    events = win32evtlog.EvtNext(query_results, events_batch_num, INFINITE, 0)
    while events:
        for event in events:
            ret.append(win32evtlog.EvtRender(event, win32evtlog.EvtRenderEventXml))
        events = win32evtlog.EvtNext(query_results, events_batch_num, INFINITE, 0)
    return ret


def main():
    import sys, os
    from collections import OrderedDict
    standard_log_names = ["Application", "System", "Security"]
    source_channel_dict = OrderedDict()

    for item in standard_log_names:
        source_channel_dict[item] = item

    for item in ["Windows Powershell"]: # !!! This works on my machine (96 events)
        source_channel_dict[item] = item

    for source, channel in source_channel_dict.items():
        print(source, channel)
        logs = get_eventlogs(source_name=source)
        xmls = get_events_xmls(channel_name=channel)
        #print("\n", get_record_data(logs[0]))
        #print(xmls[0])
        #print("\n", get_record_data(logs[-1]))
        #print(xmls[-1])
        print(len(logs))
        print(len(xmls))

if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>The 2 lists should have the same length. The <em>n</em><sup>th</sup> entry in each of them should reference the same event (as long as both functions are called with same value for <em>backwards</em> argument (<em>read below</em>))</li>
<li><em>get_events_xmls</em>:

<ul>
<li>Returns a list of <em>XML</em> blobs associated to the events</li>
<li>The error handling is not the best, you could wrap all <em>API</em> calls in <code>try</code> / <code>except</code> clauses (I didn't run into errors, so I'm not sure what are the situations where exception could be raised)</li>
<li>You can play a little bit with <a href="https://docs.microsoft.com/en-gb/windows/desktop/api/winevt/nf-winevt-evtnext" rel="nofollow noreferrer">[MS.Docs]: EvtNext function</a>'s arguments (<em>Timeout</em> and <em>EventsSize</em> for performance fine tuning; for me, <em>~20k</em> events were processed in a matter of <em>&lt;10</em> seconds - out of which text printing and conversions took the most)</li>
<li>In <em>Python 3</em>, the <em>XML</em>s are <strong><em>bytes</em></strong> (<a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer">[Python 3]: <em>class</em> <strong>bytes</strong>(<em>[source[, encoding[, errors]]]</em>)</a>) rather than normal strings (I had to encode them because some contain some non-<em>ASCII</em> chars, and attempting to print them would raise <em>UnicodeEncodeError</em>)</li>
<li>Event filtering is possible, check <a href="https://docs.microsoft.com/en-gb/windows/desktop/api/winevt/nf-winevt-evtquery" rel="nofollow noreferrer">[MS.Docs]: EvtQuery function</a>'s args (<em>Flags</em> and <em>Query</em>)</li>
<li>Note the <em>backwards</em> argument which allows traversing the events in reversed (chronological) order (default set to <em>True</em>).</li>
</ul></li>
<li><em>get_record_data</em>:

<ul>
<li>It's just a convenience function, it converts a <em>PyEventLogRecord</em> object into a <em>Python</em> dictionary</li>
<li>The conversion is based on the fact that fields that we care about start with a capital letter (<strong><em>E</em></strong>ventID</li></ul></li></ul></div>
<span class="comment-copy">Thanks for that it's really helpful!  When I get the event I also need to be able to display the text that explains what the event is about and I couldn't see a way to get that from the win32evtlog.EvtQuery method.  Is there any way to get these details with this method?</span>
<span class="comment-copy">Isn't all the data included in the <i>XML</i> blob? Is there any piece that's missing? Of course the blob must be parsed in order to get the data out. Here's an example of parsing <i>XML</i>: <a href="https://stackoverflow.com/questions/42699430/print-all-xml-child-node-using-python/42701630#42701630">[SO]: Print all xml child node using python</a></span>
<span class="comment-copy">I couldn't fit it into a comment so edited the original with the info from XML and the description I pulled the data from event viewer as it was quicker to give the example than with python.  As you can see the XML doesn't contain the "Friendly" description.</span>
<span class="comment-copy">Did you have the chance to test?</span>
<span class="comment-copy">Let me know how it turns out :)</span>
