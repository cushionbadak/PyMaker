<div class="post-text" itemprop="text">
<p>How can I extract 117, 0.049, 207 in a string?</p>
<pre><code>particulate 117㎍/㎥bad(81~150),ozone 0.049ppmaverage(0.041~0.080),overall air quality 207bad(151~250)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Parsing unstructured text is messy: You can get quick results with regular expressions as seen here:</p>
<pre><code>input='particulate 117㎍/㎥bad(81~150),ozone 0.049ppmaverage(0.041~0.080),overall air quality 207bad(151~250)'

import re
input=re.sub(r'\(.*?\)','',input)
results=re.findall(r'[\d.]+',input)

print(results)  # this prints ['117', '0.049', '207']
</code></pre>
<p>... But to get always the results you want can be difficult.</p>
<p>Let's discuss the solution step by step...</p>
<p>First of all, your input contains numbers inside brackets -- and you don't want them.  So, we first need to remove the brackets with a regular expression substitution:</p>
<pre><code>input=re.sub(r'\(.*?\)','',input)
# now input is: 
# particulate 117㎍/㎥bad,ozone 0.049ppmaverage,overall air quality 207bad
</code></pre>
<p>This substitution searches for sub-strings starting with an opening bracket '(' and ending with a closing bracket ')' and replaces them by an empty string.  In writing this expression, we need to take into account a few details:</p>
<ul>
<li>Brackets have a special meaning in regular expressions.  To refer to actual brackets in your input, we need to escape them in the pattern and write '(' instead of '('.</li>
<li>Normally the pattern r'(.*)' would take the first opening bracket and all text up to the last closing bracket in our input.  This is too <em>greedy</em>. We add the question-mark after the star to make the expression non-greedy.  * Still, if the brackets in your input don't match up, you may get wrong results.</li>
</ul>
<p>As the second step, we want to pick out numbers from the remaining input.  Your numbers may contain decimal point, so we need to allow this as well in the regular expression.  But matching numbers precisely with regular expressions is tricky.  Here are valid numbers (for some definitions of valid) that our solution doesn't pick up:</p>
<pre><code>-1.32 1.04e4 -3.14e-23
</code></pre>
<p>Here is a string that our pattern picks up as numbers --- but you may not want them:</p>
<pre><code>10.24.12.123
</code></pre>
<p>All of this can be fixed --- but the pattern will be more complex.  And you have to decide precisely what you want to get and what you don't want to get.</p>
<p>Here is a link to the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python regular expression documentation</a>.</p>
</div>
<span class="comment-copy">The most important step is to analyse <i>exactly</i> the data structure and what you need from it.  For example, you say "the numbers", but what about <code>81 150</code> and <code>0.041 0.080</code>?  To get any numbers is easy, to get precise ones takes more effort.</span>
<span class="comment-copy">@cdarke,  Though I am late to respond to your suggestions, I edited the question. Thank you for the comment.</span>
<span class="comment-copy">much appreciated! It worked!!!</span>
<span class="comment-copy">If you are happy with the solution, accept it as the correct solution.</span>
<span class="comment-copy">I am new here. How do I do that?</span>
<span class="comment-copy">At the left of the answer, you see a score with two arrows and a grey 'OK' tick sign.  When you click on the grey tick sign, it turns green --- indicating that you selected this answer as the correct one.</span>
<span class="comment-copy">I now know how to accept the answer. I clicked the check mark located on the left margin of the answer. Sorry for the long delay.</span>
