<div class="post-text" itemprop="text">
<p>I'm using code to shift time series data that looks somewhat similar to this:</p>
<pre><code>Year    Player          PTSN    AVGN                               
2018    Aaron Donald    280.60  17.538  
2018    J.J. Watt       259.80  16.238  
2018    Danielle Hunter 237.60  14.850  
2017    Aaron Donald    181.0   12.929  
2016    Danielle Hunter 204.6   12.788
</code></pre>
<p>with the intent of getting it into something like this:</p>
<pre><code>                        AVGN   PTSN  AVGN_prev  PTSN_prev
Player          Year                                     
Aaron Donald    2016     NaN    NaN        NaN        NaN
                2017  12.929  181.0        NaN        NaN
                2018  17.538  280.6     12.929      181.0
Danielle Hunter 2016  12.788  204.6        NaN        NaN
                2017   8.325  133.2     12.788      204.6
                2018  14.850  237.6      8.325      133.2
J.J. Watt       2016     NaN    NaN        NaN        NaN
                2017     NaN    NaN        NaN        NaN
                2018  16.238  259.8        NaN        NaN
</code></pre>
<p>I'm using this code to make that happen:</p>
<pre><code>res = df.set_index(['player', 'Year'])

idx = pd.MultiIndex.from_product([df['player'].unique(), 
                                  df['Year'].unique()],
                                names=['Player', 'Year'])

res = res.groupby(['player', 'Year']).apply(sum)

res = res.reindex(idx).sort_index()
res[columns] = res.groupby('Player')[list(res.columns)].shift(1)
</code></pre>
<p>with the addition of a groupby.sum() because some players in the dataframe moved from one teamt o another within the same season and i want to combine those numbers. However, the data i have is actually coming out extremely wrong. The data has too many columns to post, but it seems like the data from the previous year (_prev) is placed into random columns. It doesn't change and will always place it into the same wrong columns. Is this an issue caused by the groupby.sum()? is it because i'm using a columns variable (containing all the same names as res.columns with a str(_prev) attached to them) and a list(res.columns)? And regardless of which it is, how do i solve this?</p>
<p>here's the outputs of columns and res.columns:</p>
<p>columns:</p>
<pre><code>['player_id_prev', 'position_prev', 'player_game_count_prev', 'team_name_prev', 'snap_counts_total_prev', 'snap_counts_pass_rush_prev', 'snap_counts_run_defense_prev', 'snap_counts_coverage_prev', 'grades_defense_prev', 'grades_run_defense_prev', 'grades_tackle_prev', 'grades_pass_rush_defense_prev', 'grades_coverage_defense_prev', 'total_pressures_prev', 'sacks_prev', 'hits_prev', 'hurries_prev', 'batted_passes_prev', 'tackles_prev', 'assists_prev', 'missed_tackles_prev', 'stops_prev', 'forced_fumbles_prev', 'targets_prev', 'receptions_prev', 'yards_prev', 'yards_per_reception_prev', 'yards_after_catch_prev', 'longest_prev', 'touchdowns_prev', 'interceptions_prev', 'pass_break_ups_prev', 'qb_rating_against_prev', 'penalties_prev', 'declined_penalties_prev']

res_columns:

['player_id', 'position', 'player_game_count', 'team_name',
       'snap_counts_total', 'snap_counts_pass_rush', 'snap_counts_run_defense',
       'snap_counts_coverage', 'grades_defense', 'grades_run_defense',
       'grades_tackle', 'grades_pass_rush_defense', 'grades_coverage_defense',
       'total_pressures', 'sacks', 'hits', 'hurries', 'batted_passes',
       'tackles', 'assists', 'missed_tackles', 'stops', 'forced_fumbles',
       'targets', 'receptions', 'yards', 'yards_per_reception',
       'yards_after_catch', 'longest', 'touchdowns', 'interceptions',
       'pass_break_ups', 'qb_rating_against', 'penalties',
       'declined_penalties']
</code></pre>
<p>both are length 35 when tested.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest use:</p>
<pre><code>#first aggregate for unique MultiIndex 
res = df.groupby(['Player', 'Year']).sum()

#MultiIndex
idx = pd.MultiIndex.from_product(res.index.levels,
                                names=['Player', 'Year'])
#aded new missing years 
res = res.reindex(idx).sort_index()

#shift all columns, add suffix and join to original
res = res.join(res.groupby('Player').shift().add_suffix('_prev'))
print (res)
                       PTSN    AVGN  PTSN_prev  AVGN_prev
Player          Year                                     
Aaron Donald    2016    NaN     NaN        NaN        NaN
                2017  181.0  12.929        NaN        NaN
                2018  280.6  17.538      181.0     12.929
Danielle Hunter 2016  204.6  12.788        NaN        NaN
                2017    NaN     NaN      204.6     12.788
                2018  237.6  14.850        NaN        NaN
J.J. Watt       2016    NaN     NaN        NaN        NaN
                2017    NaN     NaN        NaN        NaN
                2018  259.8  16.238        NaN        NaN
</code></pre>
</div>
<span class="comment-copy">This worked. I don't understand why it worked though, could you help me understand how your solution gives me the intended result while mine comes out a mess?</span>
<span class="comment-copy">@EdwardGorelik - Not sure, but maybe there was some overwriting original with new columns.</span>
