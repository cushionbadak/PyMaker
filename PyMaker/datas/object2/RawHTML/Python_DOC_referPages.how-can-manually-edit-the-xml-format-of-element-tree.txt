<div class="post-text" itemprop="text">
<p>Let's say I have 2 XML files like this:  </p>
<p><em>version1.xml:</em></p>
<pre><code>&lt;object&gt;
    &lt;name&gt;boat&lt;/name&gt;
    &lt;pose&gt;Unspecified&lt;/pose&gt;
    &lt;truncated&gt;0&lt;/truncated&gt;
    &lt;difficult&gt;0&lt;/difficult&gt;
    &lt;bndbox&gt;
        &lt;xmin&gt;0&lt;/xmin&gt;
        &lt;ymin&gt;434&lt;/ymin&gt;
        &lt;xmax&gt;152&lt;/xmax&gt;
        &lt;ymax&gt;504&lt;/ymax&gt;
    &lt;/bndbox&gt;
&lt;/object&gt;
</code></pre>
<p><em>version2.xml:</em></p>
<pre><code>&lt;object&gt;&lt;name&gt;boat&lt;/name&gt;&lt;pose&gt;Unspecified&lt;/pose&gt;&lt;truncated&gt;0&lt;/truncated&gt;&lt;difficult&gt;0&lt;/difficult&gt;&lt;bndbox&gt;&lt;xmin&gt;0&lt;/xmin&gt;&lt;ymin&gt;434&lt;/ymin&gt;&lt;xmax&gt;152&lt;/xmax&gt;&lt;ymax&gt;504&lt;/ymax&gt;&lt;/bndbox&gt;&lt;/object&gt;
</code></pre>
<p>the only difference between them is the whitespaces which make the first one quite more human readable. I am trying to find how I could transform the second one into the first format.</p>
<p>I know I can use some work around like using this function from this <a href="https://gist.github.com/jefftriplett/3980637" rel="nofollow noreferrer">GitHub gist</a> (and I have in other occasions also):</p>
<pre><code>from xml.dom import minidom
from xml.etree import ElementTree


def prettify(elem):
    """
    Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent='  ')
</code></pre>
<p>but I am not looking for this (my needs involve a partially formatted XML which does not work flawlessly with the above function).</p>
<p>If I check each element's text difference I get just this:</p>
<pre><code>import xml.etree.ElementTree as ET

xml_path1 = 'path/to/version1.xml'
xml_path2 = 'path/to/version2.xml'
tree1 = ET.parse(xml_path1)
annot1 = tree1.getroot()
tree2 = ET.parse(xml_path2)
annot2 = tree2.getroot()

for elem1, elem2 in zip(annot1.iter(), annot2.iter()):
    if repr(elem1.text) != repr(elem2.text):
        print(elem1, repr(elem1.text), elem2, repr(elem2.text))
</code></pre>
<p>with output:</p>
<pre><code>&lt;Element 'object' at 0x7fb26fc2d9f8&gt; '\n\t' &lt;Element 'object' at 0x7fb1c4e4da48&gt; None
&lt;Element 'bndbox' at 0x7fb1c4e4d8b8&gt; '\n\t\t' &lt;Element 'bndbox' at 0x7fb1c4e4dbd8&gt; None
</code></pre>
<p>If I change the specified text to the corresponding version1 texts, of course, it does change the format to the affected elements but that it.</p>
<pre><code>ET.dump(annot2)
</code></pre>
<p>Output:</p>
<pre><code>&lt;object&gt;
    &lt;name&gt;boat&lt;/name&gt;&lt;pose&gt;Unspecified&lt;/pose&gt;&lt;truncated&gt;0&lt;/truncated&gt;&lt;difficult&gt;0&lt;/difficult&gt;&lt;bndbox&gt;
        &lt;xmin&gt;0&lt;/xmin&gt;&lt;ymin&gt;434&lt;/ymin&gt;&lt;xmax&gt;152&lt;/xmax&gt;&lt;ymax&gt;504&lt;/ymax&gt;&lt;/bndbox&gt;&lt;/object&gt;
</code></pre>
<p>with the desired output being of course:</p>
<pre><code>ET.dump(annot1)
</code></pre>
<p>Output:</p>
<pre><code>&lt;object&gt;
    &lt;name&gt;boat&lt;/name&gt;
    &lt;pose&gt;Unspecified&lt;/pose&gt;
    &lt;truncated&gt;0&lt;/truncated&gt;
    &lt;difficult&gt;0&lt;/difficult&gt;
    &lt;bndbox&gt;
        &lt;xmin&gt;0&lt;/xmin&gt;
        &lt;ymin&gt;434&lt;/ymin&gt;
        &lt;xmax&gt;152&lt;/xmax&gt;
        &lt;ymax&gt;504&lt;/ymax&gt;
    &lt;/bndbox&gt;
&lt;/object&gt;
</code></pre>
<p>So, what's the deal with the formatting? I know that it does not actually affect the contents of XML (machines consider the content to be the same I think) but where Element Tree saves this information eludes me. </p>
<ul>
<li>Is there any (hard and probably not efficient) way to control the
format of the XML?</li>
<li>And how come some elements which contain the actual values like <code>xmin</code> in my case only display this value and hide the formatting text while others like <code>bndbox</code> which actually encapsulates other sub-elements do display these formatting strings?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The missing whitespace is in <code>Element.tail</code> (<a href="https://docs.python.org/2/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tail" rel="nofollow noreferrer">docs</a>).</p>
<p>When generating the output, ElementTree prints the start element, the contents, the end element and then the tail.</p>
<p>Here is a trick to format a subtree (and leave the rest of the document alone):</p>
<ol>
<li>Pretty print the subtree using your trick above</li>
<li>Convert to string</li>
<li>Replace <code>"\n"</code> in the string with <code>"\n" + ("    "*level)</code> where <code>level</code> is the depth of the subtree.</li>
<li>Parse the string with ETree into a document and replace the subtree with the root element of the new document.</li>
</ol>
<p>Alternatively, you could create a new document by wrapping the subtree in <code>level</code> wrapper elements, pretty print the whole document and then find the subtree again.</p>
</div>
<span class="comment-copy">Thanks, the <code>.tail</code> part was what I was looking for. I hardcoded the actual "tails" and it's working fine.</span>
