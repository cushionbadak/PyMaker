<div class="post-text" itemprop="text">
<p>I wrote the following code to accept a <code>HTTP POST</code> and then write out a temp file that includes the <code>POST</code> data and then send that temp file to a printer using <code>subprocess</code> and the UNIX <code>lp</code> command. </p>
<pre><code>from http.server import HTTPServer, BaseHTTPRequestHandler

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        try:
            result = json.loads(body, encoding='utf-8')
            # Do other stuff with result
            p = subprocess.Popen(['/usr/bin/env', 'lp', '-d', printer_queue, temp.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.send_response(200)
            self.end_headers()
            response = BytesIO()
            response.write(b'POST Received: ')
            response.write(body)
            self.wfile.write(response.getvalue())
        except Exception as err:
            tb = traceback.format_exc()
            print(tb)
            self.send_response(500)   # 500 Internal Server Error
            self.end_headers()
            response = BytesIO()
            response.write(b'ERROR: Blah')
            self.wfile.write(response.getvalue())

httpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
</code></pre>
<p>and everything was awesome. Then I read that <code>HTTPServer</code> shouldn't be used in Production and everything was no longer awesome.</p>
<p>So how can I write the equivalent code that can be used as a production server? I have a Apache web server, but I'm not sure how to add the above Python code to it (preferrably without changing the above code too much since there is a lot of it).</p>
</div>
<div class="post-text" itemprop="text">
<p>I found out a way to connect your code with nginx server. At first add some code with your function add create socket and after that write a nginx conf file. it will work</p>
<p>Step 1 : </p>
<p>add main() function in your function</p>
<pre><code>from http.server import HTTPServer, BaseHTTPRequestHandler

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        try:
            result = json.loads(body, encoding='utf-8')
            # Do other stuff with result
            p = subprocess.Popen(['/usr/bin/env', 'lp', '-d', printer_queue, temp.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.send_response(200)
            self.end_headers()
            response = BytesIO()
            response.write(b'POST Received: ')
            response.write(body)
            self.wfile.write(response.getvalue())
        except Exception as err:
            tb = traceback.format_exc()
            print(tb)
            self.send_response(500)   # 500 Internal Server Error
            self.end_headers()
            response = BytesIO()
            response.write(b'ERROR: Blah')
            self.wfile.write(response.getvalue())


def main():
    try:
        server = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
        print ('Starting BaseServer.')
        server.serve_forever ()
    except KeyboardInterrupt:
        print ('Interrupt recieved; closing server socket')
        server.socket.close()

if __name__ == '__main__':
    main()
</code></pre>
<p>Step 2 : </p>
<p>nginx.conf file should be like this</p>
<pre><code>server {

    location / {
        root /data/www;
    }


    location / {
        proxy_pass http://localhost:8000;
    }
}
</code></pre>
<p>If face any issue comment below</p>
</div>
<span class="comment-copy">What does "production" mean to you?  Do you consider your python code to be stable enough to be running on a production server?</span>
<span class="comment-copy">What does "stable" mean to you? Code works fine. Production means a system which needs to be secure.</span>
<span class="comment-copy">This does not address the fact that OP wants to change from simplehttpserver to a different setup. This makes sense, as even in the official documentation it is stated that simplehttpserver is not recommended for production code.</span>
