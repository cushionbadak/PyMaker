<div class="post-text" itemprop="text">
<p>I'm writing cross-compatible Python 2 and 3 code with some help from this <a href="http://python-future.org/compatible_idioms.html" rel="noreferrer">cheatsheet</a>. I've noticed there are different packages and modules that help to do this: the <code>future</code> package (e.g. <code>future.utils</code> etc), the <code>six</code> package, and the built in <code>__future__</code> module.</p>
<p>Are there any differences to be aware of when using these packages? Should I be mixing and matching them, or is it possible to write fully cross-compatible code be written with just one of them?</p>
</div>
<div class="post-text" itemprop="text">
<p>In terms of python 2-3 compatibility:</p>
<p><code>__future__</code> - is a built-in module in python which allows you to use optional features in python versions where they are optional (vs mandatory). For example, <code>unicode_literals</code> was optional in <code>python2.7</code> but became mandatory in <code>python3.0</code>.</p>
<p><code>six</code> - mostly renames modules/functions to produce higher compatibility between <code>python2</code> to <code>python3</code>, but doesn't actually backport (or forward-port) functionality. It is also supported for python versions <code>&gt;=2.4</code>.</p>
<p><code>future</code> - more modern, only supports <code>python&gt;=2.6,&gt;=3.3</code>, and is more rich in features.</p>
<p>Seems like <a href="https://docs.python.org/3/howto/pyporting.html" rel="noreferrer">there is some agreement</a> that <code>future</code> is preferred to <code>six</code> if you can drop support for old versions of python.</p>
</div>
