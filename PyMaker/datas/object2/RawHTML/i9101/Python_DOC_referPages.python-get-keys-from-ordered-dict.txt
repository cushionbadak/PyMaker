<div class="post-text" itemprop="text">
<p>python noob here. So I'm making a program that will take a JSON file from a url and parse the information and put it into a database. I have the JSON working, thankfully, but now I am stuck, I'll explain it through my code. </p>
<pre><code>playerDict = {
            "zenyatta" : 0,
            "mei" : 0,
            "tracer" : 0,
            "soldier76" : 0,
            "ana" : 0,
            ...}
</code></pre>
<p>So this is my original dictionary with the which I then fill with the players data for each hero.</p>
<pre><code>topHeroes = sorted(playerDict.items(),key = operator.itemgetter(1),reverse = True)
</code></pre>
<p>I then sort this list and it turns the heroes with the most amount of hours played first. </p>
<pre><code>topHeroesDict = topHeroes[0:3]
playerDict['tophero'] = topHeroesDict[0]
</code></pre>
<p>I then get the top three heroes. The second line here prints out a list like so: </p>
<pre><code>'secondhero': ('mercy', 6.0)
</code></pre>
<p>Whereas I want the output to be:</p>
<pre><code>'secondhero': 'mercy'
</code></pre>
<p>Would appreciate any help i have tried the code below with and without list.</p>
<pre><code>list(topHeroes.keys())[0]
</code></pre>
<p>So thanks in advance and apologies for the amount of code! </p>
</div>
<div class="post-text" itemprop="text">
<p>You could take an approach with enumerate, if instead of "firsthero" you are ok with "Top 1" and so on. With enumerate you can iterate over the list and keep track of the current index, which is used to name the key in this dictionary comprehension. j[0] is the name of the hero, which is the first element of the tuple.</p>
<pre><code>topHeroes = sorted(playerDict.items(),key = operator.itemgetter(1),reverse = True)
topHeroesDict = {"Top "+str(i): j[0] for i, j in enumerate(topHeroes[0:3])}
</code></pre>
<p>Alternatively, you could use a dictionary which maps the index to first like this:</p>
<pre><code>topHeroes = sorted(playerDict.items(),key = operator.itemgetter(1),reverse = True)
top = {0: "first", 1: "second", 2: "third"}
topHeroesDict = {top[i]+"hero": j[0] for i, j in enumerate(topHeroes[0:3])}
</code></pre>
<p>You do not need any imports to achieve this. Without itemgetter, you can do it in one line like this:</p>
<pre><code>top = {0: "first", 1: "second", 2: "third"}
topHeroesDict = {top[i]+"hero": j[0] for i, j in enumerate(sorted([(i, playerDict[i]) for i in playerDict.keys()], key = lambda x: x[1], reverse = True)[0:3])}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're sorting an <em>iterable</em> of tuples returned by the <code>items</code> method of the dict, so each item in the sorted list is a tuple containing the hero and their score.</p>
<p>You can avoid using <code>sorted</code> and <code>dict.items</code> altogether and get the leading heroes (without their score) by simply using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and then getting the <code>most_common</code> 3 heroes.</p>
<pre><code>from collections import Counter


player_dict = Counter(playerDict)
leading_heroes = [hero for hero, _ in player_dict.most_common(3)]
</code></pre>
</div>
<span class="comment-copy">Thank you muchly! This works!</span>
<span class="comment-copy">The counter is really useful! Thanks for that!</span>
