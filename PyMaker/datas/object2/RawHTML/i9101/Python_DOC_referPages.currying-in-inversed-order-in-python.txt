<div class="post-text" itemprop="text">
<p>Suppose I have a function like this:</p>
<pre><code>from toolz.curried import *

@curry
def foo(x, y):
    print(x, y)
</code></pre>
<p>Then I can call:</p>
<pre><code>foo(1,2)
foo(1)(2)
</code></pre>
<p>Both return the same as expected.</p>
<p>However, I would like to do something like this:</p>
<pre><code>@curry.inverse # hypothetical
def bar(*args, last):
    print(*args, last)

bar(1,2,3)(last)
</code></pre>
<p>The idea behind this is that I would like to pre-configure a function and then put it in a pipe like this:</p>
<pre><code>pipe(data,
    f1, # another function
    bar(1,2,3) # unknown number of arguments
)
</code></pre>
<p>Then, <code>bar(1,2,3)(data)</code> would be called as a part of the pipe. However, I don't know how to do this. Any ideas? Thank you very much!</p>
<p><strong>Edit:</strong></p>
<p>A more illustrative example was asked for. Thus, here it comes:</p>
<pre><code>import pandas as pd
from toolz.curried import *

df = pd.DataFrame(data)

def filter_columns(*args, df):
    return df[[*args]]

pipe(df,
    transformation_1,
    transformation_2,
    filter_columns("date", "temperature")
)
</code></pre>
<p>As you can see, the DataFrame is piped through the functions, and <code>filter_columns</code> is one of them. However, the function is pre-configured and returns a function that only takes a DataFrame, similar to a decorator. The same behaviour could be achieved with this:</p>
<pre><code>def filter_columns(*args):
    def f(df):
        return df[[*args]]
    return f
</code></pre>
<p>However, I would always have to run two calls then, e.g. <code>filter_columns()(df)</code>, and that is what I would like to avoid.</p>
</div>
<div class="post-text" itemprop="text">
<p>well I am unfamiliar with toolz module, but it looks like there is no easy way of curry a function with arbitrary number of arguments, so lets try something else.</p>
<p>First as a alternative to </p>
<pre><code>def filter_columns(*args):
    def f(df):
        return df[*args]
    return f
</code></pre>
<p>(and by the way, <code>df[*args]</code> is a syntax error )</p>
<p>to avoid <code>filter_columns()(data)</code> you can just grab the last element in <code>args</code> and use the slice notation to grab everything else, for example</p>
<pre><code>def filter_columns(*argv):
    df, columns = argv[-1], argv[:-1]
    return df[columns]
</code></pre>
<p>And use as <code>filter_columns(df)</code>, <code>filter_columns("date", "temperature", df)</code>, etc. </p>
<p>And then use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> to construct your new, well partially applied, filter to build your pipe like for example</p>
<pre><code>from functools import partial
from toolz.curried import pipe # always be explicit with your import, the last thing you want is import something you don't want to, that overwrite something else you use

pipe(df,
    transformation_1,
    transformation_2,
    partial(filter_columns, "date", "temperature")
)
</code></pre>
</div>
<span class="comment-copy">Which version of Python are you using?</span>
<span class="comment-copy">so for <code>foo(1,2)</code> and <code>foo(1)(2)</code> you want that it print <code>2 1</code> ??</span>
<span class="comment-copy">@amirouche Python 3.5.1</span>
<span class="comment-copy">@Copperfield Not exactly, I want to provide an unknown number of arguments first to "configure" my function, and afterwards I'd like to pass another positional argument that is read by <code>pipe</code>. As far as I know, this cannot be a keyword argument.</span>
<span class="comment-copy">oh right, the pipe come from that import *, those always annoy me because I don't know what I have... let me rethink me answer with the new update</span>
<span class="comment-copy">Right, I see that this works with your <code>pipe</code> definition; however, it's where I am struggling when using the pipe from <code>toolz</code>.</span>
<span class="comment-copy">try  with the update</span>
<span class="comment-copy">Wonderful! I didn't think of <code>df, columns = argv[-1], argv[:-1]</code>. How simple and elegant!</span>
