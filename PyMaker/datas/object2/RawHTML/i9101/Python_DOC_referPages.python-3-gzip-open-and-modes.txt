<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/gzip.html" rel="nofollow noreferrer">https://docs.python.org/3/library/gzip.html</a></p>
<p>I am considering to use <code>gzip.open()</code>, and I am a little confused about the <code>mode</code> argument: </p>
<blockquote>
<p>The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x'
  or 'xb' for binary mode, or 'rt', 'at', 'wt', or 'xt' for text mode.
  The default is 'rb'.</p>
</blockquote>
<p>So what is the difference between <code>'w'</code> and <code>'wb'</code>? </p>
<p>The document states they are both <em>binary mode</em>. </p>
<p>So does that mean that there is no difference between <code>'w'</code> and <code>'wb'</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It means that <code>r</code> defaults to <code>rb</code>, and if you want text you have to specify it using <code>rt</code>.</p>
<p>(as opposed to <code>open</code> behaviour where <code>r</code> means <code>rt</code>, not <code>rb</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Exactly as you say and as already covered by @</p>
<p>Jean-Fran√ßois Fabre answer.<br/>
I just wanted to show some code, as it was fun.<br/>
Let's have a look at the <code>gzip.py</code> source code in the python library to see that's effectively what happens.<br/>
The <code>gzip.open()</code> can be found here <a href="https://github.com/python/cpython/blob/master/Lib/gzip.py" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Lib/gzip.py</a> and I report below</p>
<pre><code>def open(filename, mode="rb", compresslevel=9,
         encoding=None, errors=None, newline=None):
    """Open a gzip-compressed file in binary or text mode.
    The filename argument can be an actual filename (a str or bytes object), or
    an existing file object to read from or write to.
    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or "ab" for
    binary mode, or "rt", "wt", "xt" or "at" for text mode. The default mode is
    "rb", and the default compresslevel is 9.
    For binary mode, this function is equivalent to the GzipFile constructor:
    GzipFile(filename, mode, compresslevel). In this case, the encoding, errors
    and newline arguments must not be provided.
    For text mode, a GzipFile object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error handling
    behavior, and line ending(s).
    """
    if "t" in mode:
        if "b" in mode:
            raise ValueError("Invalid mode: %r" % (mode,))
    else:
        if encoding is not None:
            raise ValueError("Argument 'encoding' not supported in binary mode")
        if errors is not None:
            raise ValueError("Argument 'errors' not supported in binary mode")
        if newline is not None:
            raise ValueError("Argument 'newline' not supported in binary mode")

    gz_mode = mode.replace("t", "")
    if isinstance(filename, (str, bytes, os.PathLike)):
        binary_file = GzipFile(filename, gz_mode, compresslevel)
    elif hasattr(filename, "read") or hasattr(filename, "write"):
        binary_file = GzipFile(None, gz_mode, compresslevel, filename)
    else:
        raise TypeError("filename must be a str or bytes object, or a file")

    if "t" in mode:
        return io.TextIOWrapper(binary_file, encoding, errors, newline)
    else:
        return binary_file  
</code></pre>
<p>Few things we notice:  </p>
<ul>
<li>the default mode is <code>rb</code> as the documentation you report says</li>
<li><p>to open a binary file, it doesn't care whether it's <code>"r", "rb", "w", "wb"</code> for example.<br/>
This we can see in the following lines:</p>
<pre><code>gz_mode = mode.replace("t", "")
if isinstance(filename, (str, bytes, os.PathLike)):
    binary_file = GzipFile(filename, gz_mode, compresslevel)
elif hasattr(filename, "read") or hasattr(filename, "write"):
    binary_file = GzipFile(None, gz_mode, compresslevel, filename)
else:
    raise TypeError("filename must be a str or bytes object, or a file")

if "t" in mode:
    return io.TextIOWrapper(binary_file, encoding, errors, newline)
else:
    return binary_file
</code></pre>
<p>basically the binary file <code>binary_file</code> gets built wether there's an additional b or not as <code>gz_mode</code> can have the <code>b</code> or not at this point.<br/>
Now the class <code>class GzipFile(_compression.BaseStream)</code> is called to build <code>binary_file</code>.</p></li>
</ul>
<p>In the constructor the following lines are important:   </p>
<pre><code> if mode and ('t' in mode or 'U' in mode):
        raise ValueError("Invalid mode: {!r}".format(mode))
    if mode and 'b' not in mode:
        mode += 'b'
    if fileobj is None:
        fileobj = self.myfileobj = builtins.open(filename, mode or 'rb')
    if filename is None:
        filename = getattr(fileobj, 'name', '')
        if not isinstance(filename, (str, bytes)):
            filename = ''
    else:
        filename = os.fspath(filename)
    if mode is None:
        mode = getattr(fileobj, 'mode', 'rb')
</code></pre>
<p>where can be clearly seen that if <code>'b'</code> is not present in the mode it will be added  </p>
<pre><code>if mode and 'b' not in mode:
            mode += 'b'  
</code></pre>
<p>so there's no distinction between the two modes as already discussed.</p>
</div>
<span class="comment-copy">minor wondering: shouldn't the python tag be applied here too in addition to python-3.x? I ask the experts: it's true it mentions python 3 but is still python, some people might have missed for that...I think I saw a similar case but I forgot which one.</span>
<span class="comment-copy">I was <i>hoping</i> that was the case. I was worried <code>'r'</code> was <i>a binary read</i>, and that <code>'rb'</code> was <i>a more binary read</i> that <code>'r'</code>.</span>
