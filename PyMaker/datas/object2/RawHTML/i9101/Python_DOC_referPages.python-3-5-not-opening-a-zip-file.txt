<div class="post-text" itemprop="text">
<p>I'm not able to open the file downloaded from <a href="https://data.cityofnewyork.us/dataset/Broadband-Data-Dig-Datasets/ft4n-yqee" rel="nofollow noreferrer">this URL</a> using Python's <code>zipfile</code> facility.</p>
<p>This file <em>does</em> open using my Mac's built-in deflater, however, and <code>python-magic</code> (via <code>import magic; magic.from_file("...")</code>) reports that the file is:</p>
<p><code>'Zip archive data, at least v2.0 to extract'</code>.</p>
<p>Yet when I do:</p>
<pre><code>with open("498200/Broadband Data Dig - Datasets/NYC Connected Broadband Data Dig Files.zip") as fp:
    zipcontent = zipfile.ZipFile(fp)
</code></pre>
<p>I get:</p>
<p><code>BadZipFile: File is not a zip file</code></p>
<p>My Python version is <code>3.5.2</code>. What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ZipFile</code> opens the file based on the file name:</p>
<pre><code>with zipfile.ZipFile("498200/Broadband Data Dig - Datasets/NYC Connected Broadband Data Dig Files.zip") as zip_file:
    print("do stuff with", zip_file)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile" rel="nofollow noreferrer"><code>zipfile.ZipFile</code> claims compatibility with file-like objects</a>, but it almost certainly requires that they be binary mode, not text mode.</p>
<p>For a minimal changes fix, try:</p>
<pre><code>with open("498200/Broadband Data Dig - Datasets/NYC Connected Broadband Data Dig Files.zip",
          "rb") as fp:
    zipcontent = zipfile.ZipFile(fp)
</code></pre>
<p>Or as Trey mentioned, just use the <code>with</code> statement on <code>zipfile.ZipFile('name/of/file.zip')</code> directly, without opening it as a plain file first.</p>
</div>
<span class="comment-copy">Oof. Senior moment, thanks.</span>
<span class="comment-copy">I hadn't realized <code>ZipFile</code> worked with file-like objects. Thanks for pointing this out!</span>
<span class="comment-copy">I'd simplified my example down a bit to get a minimal example, here's the original: <code>z = zipfile.ZipFile(io.BytesIO(r.content))</code>, where <code>r</code> is a <code>requests.get</code> object for the URL above. Do you know what's going on there?</span>
<span class="comment-copy">@ResMar: Well, in testing, if I have an actual <code>bytes</code> object read from a legit zip file to pass to <code>io.BytesIO</code>, <code>zipfile.ZipFile</code> is fine with it. Are you sure what you're receiving is a legitimate zip format file? Not <code>gzip</code> compressed (which <code>requests</code> seamlessly decompresses for you), or some other compression? If you just write <code>r.content</code> it to a file in binary mode, then open that file with a zip file reading program, does it work?</span>
<span class="comment-copy">Can't be; <code>import magic; magic.from_buffer(requests.get(uri).content)</code> reports the same thing as before: <code>'Zip archive data, at least v2.0 to extract'</code>.</span>
<span class="comment-copy">@ResMar: Try writing it to a file and actually opening it. <code>magic</code> is looking for the magic numbers in the header, not actually doing a trial decompression to determine if the file is legal. Python will raise the error you describe if it can't find the "table of contents" at the end of the zip file, while <code>magic</code> won't even look beyond the first four bytes or so. You could  be receiving truncated zip file data. It's always possible there is a bug in Python, but it could just as easily be a standards-non-compliant zip made by a Mac and only readable on a Mac, because who cares about standards?</span>
