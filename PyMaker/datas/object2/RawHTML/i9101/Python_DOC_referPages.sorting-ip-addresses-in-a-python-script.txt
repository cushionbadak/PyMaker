<div class="post-text" itemprop="text">
<p>I'm trying to sort IP Addresses which I'm reading into a python script and printing out. The code that I've drafted up reads and prints the contents of a file (see example)</p>
<pre><code>#!/usr/bin/python

f = open('file.txt', 'r')
file_contents = f.read()
print (file_contents)
f.close()
</code></pre>
<p>My issue is how do I take that importing of IP Addresses and sort them correctly? At the command line I would normally pass the file through a simple sort command (sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 ). But how can I get python to sort the IPs it's reading from the file so the output is sorted correctly, taking into consideration the 0-255 numbering schema for each octet of an IP?</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>If you do not want to use any external software and want a compact solution, you can always supply a lambda function as sort key.</p>
<pre><code>with open("ip.txt", "r") as infile:
    iplist = sorted([i.strip() for i in infile.readlines()], key = lambda x: int(''.join((lambda a:lambda v:a(a,v))(lambda s,x: x if len(x) == 3 else s(s, '0'+x))(i) for i in x.split('.'))))
</code></pre>
<p>This assumes normal IPv4s in ip.txt separated by a line break.</p>
<p>The resulting <code>iplist</code> ist a sorted list with the IPs. You can also output them to file like this:</p>
<pre><code>with open("ip.txt", "r") as infile:
    iplist = sorted([i.strip() for i in infile.readlines()], key = lambda x: int(''.join((lambda a:lambda v:a(a,v))(lambda s,x: x if len(x) == 3 else s(s, '0'+x))(i) for i in x.split('.'))))

with open("output.txt", "w") as outfile:
    outfile.write("\n".join(i for i in iplist))
</code></pre>
<p>The output file could be the same as the input or a different file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer">ipaddress</a> module:</p>
<pre><code>#!/usr/bin/python
import ipaddress

with open('file.txt', 'r') as f:
   ips = sorted(ipaddress.ip_address(line.strip()) for line in f)
   print('\n'.join(map(str, ips)))
</code></pre>
<p>If you're using an older Python version (before 3.3), you may need <a href="https://pypi.python.org/pypi/ipaddress" rel="nofollow noreferrer">my backport</a>. Also note that this code employs the <a href="https://docs.python.org/dev/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code> statement</a> for file I/O, <a href="https://stackoverflow.com/q/2738365/35070">as this handles errors correctly</a>.</p>
<p>With <code>ipaddress</code>, the IP addresses are actually tested for validity. Also, the code can correctly handle IPv6 addresses (i.e. <code>::1.2.3.4 &gt; 000::12a0</code>) as well as esoteric representations such as <code>2130706433</code>, although you cannot mix IPv4 and IPv6 addresses.</p>
<p>Alternatively, you can use a <a href="https://stackoverflow.com/questions/34518/natural-sorting-algorithm">natural sort algorithm</a>. This will not verify the addresses and may be incorrect, but works as long as you input is always IPv4 addresses in the form <code>1.2.3.4</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, depending on how you've stored the IP addresses, you would read them into a list. You can do this by slightly modifying the way you are reading in the IP addresses currently</p>
<pre><code>with open('file.txt', 'r') as f:
    file_conents = f.readlines()
</code></pre>
<p>You then want to remove the spacing characters (such as new line <code>\n</code> from the end of the list items)</p>
<pre><code>file_contents = [x.strip() for x in file_contents] 
</code></pre>
<p>Now that you have a list of IP addresses, you can use Pythons sort function</p>
<pre><code>file_contents.sort()
print("IP addresses: ", file_contents)
</code></pre>
</div>
<span class="comment-copy">So you want the IP's to be sorted in this way - <code>0.0.0.0, 0.0.0.1, --------.255.255</code> ? .</span>
<span class="comment-copy">That is correct. I want all the IPs to end up being sorted in that fashion.  Obviously they will all be different addresses (think random IP addresses), but I want them all in a sorted format such as:  10.11.12.13 -&gt; 128.2.4.6 -&gt; 192.0.3.4 -&gt; 208.11.45.8... and so on.</span>
<span class="comment-copy">Then this answer will solve your problem - <a href="http://stackoverflow.com/a/6545088/3225001">stackoverflow.com/a/6545088/3225001</a></span>
<span class="comment-copy">This works great, but how can you remove all the bracketing and quotes and force the output to be a single column with just the IP addresses by themselves?  What I'm getting is ['5.6.240.180', '9.2.35.35', '16.166.188.35'] as an example.</span>
<span class="comment-copy">@Alby I edited the code with explanations on how to write the result to file again.</span>
<span class="comment-copy">Thank you. Now it makes sense. Please help my stackexchange score with an up arrow click if possible.  Thanks.</span>
<span class="comment-copy">Two issues. First is the the output ends up encapsulated in single quotes, commas, and [ brackets ].  The second is that sorting isn't taking into account the IP addressing format. For example, you will get 74.x.x.x, then 8.x.x.x, then 80.x.x.x.  The expected output should be: 8.x.x.x, 74.x.x.x, 80.x.x.x as an example in a single column with no quotes, brackets, or commas.</span>
