<div class="post-text" itemprop="text">
<p>Given the example code below (modified from <a href="https://docs.python.org/3/library/re.html#writing-a-tokenizer" rel="nofollow noreferrer">here</a>),   </p>
<pre><code>import collections 
import re

Token = collections.namedtuple('Token', ['typ', 'value', 'line', 'column'])

def tokenize(code):
    keywords = {'IF', 'THEN', 'ENDIF', 'FOR', 'NEXT', 'GOSUB', 'RETURN'}
    token_specification = [
        ('NUMBER',  r'\d+(\.\d*)?'), 
        ('ASSIGN',  r':='),          
        ('END',     r';'),          
        ('ID',      r'[A-Za-z]+'),    
        ('OP',      r'[+\-*/]'),     
        ('NEWLINE', r'\n'),          
        ('SKIP',    r'[ \t]+'),       
        ('MISMATCH',r'.'),           
    ]
    tok_regex = '|'.join('(?P&lt;%s&gt;%s)' % pair for pair in token_specification)
    line_num = 1
    line_start = 0
    for mo in re.finditer(tok_regex, code):
        kind = mo.lastgroup
        value = mo.group(kind)
        if kind == 'NEWLINE':
            line_start = mo.end()
            line_num += 1
        elif kind == 'SKIP':
            pass
        else:
            if kind == 'ID' and value in keywords:
                kind = value
            column = mo.start() - line_start
            yield Token(kind, value, line_num, column)

statements = '''
    IF quantity THEN
        total := total + price * quantity;
        tax := price * 0.05;
    ENDIF; '''

for token in tokenize(statements):
    print(token)
</code></pre>
<p>I want to be able to insert a single character string (but <em>not</em> <em>hardcode</em>) between the token values in the <code>token_specification</code> and the regex like so:</p>
<pre><code>token_specification = [
        ('NUMBER',   'A',  r'\d+(\.\d*)?'), 
        ('ASSIGN',   'B',  r':='),          
        ('END',      'C',  r';'),          
        ('ID',       'D',  r'[A-Za-z]+'),    
        ('OP',       'E',  r'[+\-*/]'),     
        ('NEWLINE',  'F',  r'\n'),          
        ('SKIP',     'G',  r'[ \t]+'),       
        ('MISMATCH', 'H',  r'.'), 
]
</code></pre>
<p>I have considered <code>ascii_uppercase</code> but I cannot work the actual syntax of automatically adding that single character in the <code>token_specification</code>.
Could someone provide some guidance?</p>
</div>
<div class="post-text" itemprop="text">
<p>simply add this just after you initial <code>token_specification</code> declaration:</p>
<pre><code>token_specification = [(left, letter, right) for (left, right), letter in zip(token_specification, string.ascii_uppercase)]
</code></pre>
<p>(as well as an <code>import string</code> with your imports)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could convert the tuple to list and insert the character in the middle and then convert back to tuple</p>
<pre><code>import string 
chars = string.ascii_uppercase 

result = [] 
for i, t in enumerate(token_specification): 
  t_lst = list(t)
  t_lst.insert(1, chars[i])
  result.append(tuple(t_lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So that you won't run out of letters, start by making an iterator that can produce a letter sequence of letter groupings:</p>
<pre><code>from string import ascii_uppercase
from itertools import product, imap

# Produce letter groups: A, B, C, ..., Z, AA, AB, ...
charset = [''] + list(ascii_uppercase)
characters = imap(''.join, product(charset, repeat=4))
_ = next(characters)        # Consume initial blank value
</code></pre>
<p>Next, use <a href="https://docs.python.org/2.7/library/functions.html#zip" rel="nofollow noreferrer"><em>zip()</em></a> to interlace the letters with the <em>name</em> and <em>pattern</em> from the <em>token_specification</em>:</p>
<pre><code>result = [(name, letters, pattern) for (name, pattern), letters
                                   in zip(token_specification, characters)]
</code></pre>
</div>
<span class="comment-copy">Your answer appears so elegant, thanks. However, when I try it exactly as you say I get the following error: <code>Traceback (most recent call last): line 46, in &lt;module&gt; for token in tokenize(statements): line 23, in tokenize tok_regex = '|'.join('(?P&lt;%s&gt;%s)' % pair for pair in token_specification), line 23, in &lt;genexpr&gt; tok_regex = '|'.join('(?P&lt;%s&gt;%s)' % pair for pair in token_specification) TypeError: not all arguments converted during string formatting</code>. Any ideas? Note that the new <code>token_specification</code> is now how I want it regardless of the above error.</span>
<span class="comment-copy">Well I answered your question but did not check the rest of the code. <code>'(?P&lt;%s&gt;%s)' % pair</code> is a string formatting operation with 2 placeholders, which worked while each item in <code>token_specification </code> had 2 elements, but fails now that it has 3. Just adapt the format to have a third placeholder (<code>%s</code>).</span>
<span class="comment-copy">True. Just wondering if it was in any way related but I will figure it out. Thanks for your answer.</span>
<span class="comment-copy">sorry I posted my previous comment before finishing it. Answer is inside now that I edited it.</span>
<span class="comment-copy">... or alternatively if you don't need the letter in your regex, just move my suggested line of code after the line starting with <code>tok_regex = </code></span>
