<div class="post-text" itemprop="text">
<p>I cut a part of the script that i tried to complete. I am expecting a new result for <code>mylineS.split()[0]</code> after each iteration. <code>outS.txt</code> and <code>outT.txt</code> is result of <code>commandC</code> for each iteration and result is different at each iteration. But <code>mylineS.split()[0]</code> brings the first result for each iteration. </p>
<p>I guess something wrong with my approach, any idea?</p>
<pre><code>B = 0
while B &lt; len(Source_Tdevs):
    devS = Source_Tdevs[B]
    devT = Target_Tdevs[B]
    subprocess.run(commandC, shell=True)
    print (devS)
    with open('outS.txt', 'r') as gS:
        CS = len(gS.readlines())
        mylineS = linecache.getline('outS.txt', CS -1)
        Source_Tdevs_SGs.append(mylineS.split()[0])
        **print (mylineS.split()[0])**
        gS.close()
    with open('outT.txt', 'r') as gT:
        CT = len(gT.readlines())
        mylineT = linecache.getline('outT.txt', CT - 1)
        Target_Tdevs_SGs.append(mylineT.split()[0])
        gT.close()
    subprocess.run('del outS.txt, outT.txt', shell=True)
    B= B + 1
</code></pre>
<p>commandC is one line above of <code>subprocess.run(commandC, shell=True)</code>. I am writing bottom.</p>
<pre><code>commandC = 'set "SYMCLI_OFFLINE=1" &amp; set "SYMCLI_DB_FILE=C:\PROGRAM FILES\EMC\SYMAPI\DB\SYMAPI_DB.BIN" &amp; call symaccess -sid %s list -type storage -dev %s &gt; outS.txt &amp; call symaccess -sid %s list -type storage -dev %s &gt; outT.txt' % (
        sid, devS, sid, devT)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're <strong>abusing</strong> the <a href="https://docs.python.org/3/library/linecache.html" rel="nofollow noreferrer"><code>linecache</code></a> module. The linecache is meant to be used for getting <em>source code lines from Python source code</em>:</p>
<blockquote>
<p>The linecache module allows one to get any line from a Python source file, while attempting to optimize internally, using a cache, the common case where many lines are read from a single file. This is used by the traceback module to retrieve source lines for inclusion in the formatted traceback.</p>
</blockquote>
<p>As the text implies the module will also retain the contents of the file in memory, and thus give correct output only on the first run. An easy remedy would be to invalidate the cache by using</p>
<pre><code>linecache.checkcache('outS.txt')
</code></pre>
<p>Though a better thing to do would be to <strong>not</strong> use the linecache at all (it is not meant for this, and your files are constantly changing after all); instead just read all lines in using <code>.readlines()</code> and extract the last with <code>[-1]</code>, for example:</p>
<pre><code>lines = gS.readlines()
last_line = lines[-1]
</code></pre>
</div>
<span class="comment-copy">You don't need to close the file when you use with open().</span>
<span class="comment-copy">thanks for your detailed answer. I am not a programmer, trying to learn python, you answer was very useful for me. i fixed the problem.</span>
<span class="comment-copy">@user7528506 one does not usually come across the linecache module by accident; did you follow some advice on Stack Overflow? In that case I might comment there that <code>linecache</code> shouldn't be used for reading lines from a file whose contents are expected to change during the program's execution.</span>
<span class="comment-copy">probably i found it somewhere but long time ago, can't remember the source. I used it in my old script, copied it from there at this time.</span>
