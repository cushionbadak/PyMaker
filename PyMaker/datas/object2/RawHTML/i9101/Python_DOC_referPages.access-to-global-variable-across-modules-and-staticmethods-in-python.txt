<div class="post-text" itemprop="text">
<p>Assume two Python modules titled <code>GlobVars</code> and <code>MyModule</code>.</p>
<p>Module <code>GlobVars</code> is intended to supply the other module with the global variable <code>my_glob_var</code>.</p>
<pre><code># cat GlobVars.py
class getGlobVars:
    def __init__(self):
        global my_glob_var
        my_glob_var = 'World'
    def go(self):
        pass
</code></pre>
<p>Module <code>MyModule</code> contains a class with two functions (<code>_concat</code> and <code>getConcat</code>), one of which (i.e., <code>_concat</code>) is a staticmethod that attempts to access the aforementioned global variable. Function <code>getConcat</code> accesses the staticmethod and is supposed to return a concatenated string.</p>
<pre><code># cat MyModule.py
import GlobVars as GV
class MyClass:
    def __init__(self, var1):
        self.var1 = var1
    @staticmethod
    def _concat(var2):
        GV.getGlobVars().go()
        return var2 + my_glob_var

    def getConcat(self):
        return MyClass._concat('Hello ')+self.var1
</code></pre>
<p>When I attempt to load both modules and execute function <code>getConcat</code>, the global variable does not seem to be properly accessed. Why is that and what is the solution?</p>
<pre><code>import MyModule
import GlobVars
print MyModule.MyClass('!').getConcat()
# NameError: global name 'my_glob_var' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your particular case you don't have to use <code>global</code> keyword nor <code>GlobVars</code> class.</p>
<p>Instead:</p>
<pre><code># cat GlobVars.py
my_glob_var = 'World'

# cat MyModule.py
import GlobVars as GV
class MyClass:
    def __init__(self, var1):
        self.var1 = var1

    @staticmethod
    def _concat(var2):
        return var2 + GV.my_glob_var

    def getConcat(self):
        return MyClass._concat('Hello ')+self.var1
</code></pre>
<p>By the way python docs have little section about sharing global vars across modules: <a href="https://docs.python.org/3/faq/programming.html?highlight=global#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html?highlight=global#how-do-i-share-global-variables-across-modules</a></p>
</div>
<span class="comment-copy">1. Python globals aren't "global globals", they're only global to the module in which they're defined. 2. You only need the <code>global</code> keyword when you want to modify a global, you can read a global without the keyword (and you should avoid using modifiable globals anyway). 3. Since you're using Python 2 you should use new-style classes: make your classes inherit from <code>object</code>, otherwise you get the inferior old-style classes. (Python 3 only has new-style, so you don't need to explicitly inherit from <code>object</code>, but it's still nice to do so, since it makes it easier to back-port to Python 2).</span>
<span class="comment-copy">Thanks for pointing this out. The simplest solution often doesn't come to mind.</span>
