<div class="post-text" itemprop="text">
<p>I have a list: <code>fruits = ['apple', 'orange', 'blueberry', strawberry']</code></p>
<p>How do I create loops such that one index depends on another:</p>
<pre><code>for i in range(len(fruits)):
   for j range(len(fruits[i+1:])):
       print i,j
</code></pre>
<p>I want to print out the pairs:</p>
<pre><code>'apple', 'orange'
'orange', 'blueberry'
'blueberry', strawberry'
'orange', 'blueberry'
etc...
</code></pre>
<p>I would like to obtain loops that correspond to the c++ language:</p>
<pre><code> for(i=0;i&lt;5;i++) 
     for (j=i+1; j&lt;5; j++)
         print i, j
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on your output, I am going with this</p>
<pre><code>fruits = ['apple', 'orange', 'blueberry', 'strawberry']
l = len(fruits)

for i in range(l):
   for j in range(i, l - 1):
       print fruits[j], fruits[j + 1]
</code></pre>
<p>Output:</p>
<pre><code>apple orange
orange blueberry
blueberry strawberry
orange blueberry
blueberry strawberry
blueberry strawberry
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want what the C++ code prints out, use <code>itertools.combinations</code>:</p>
<pre><code>In [1]: import itertools

In [3]: fruits = ['apple', 'orange', 'blueberry', 'strawberry']

In [4]: for res in itertools.combinations(fruits, 2):
   ...:     print res
   ...:
('apple', 'orange')
('apple', 'blueberry')
('apple', 'strawberry')
('orange', 'blueberry')
('orange', 'strawberry')
('blueberry', 'strawberry')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, try:</p>
<pre><code>&gt;&gt;&gt; fruits = ['apple', 'orange', 'blueberry', 'strawberry']
&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; list(combinations(fruits,2))
[('apple', 'orange'), ('apple', 'blueberry'), ('apple', 'strawberry'), ('orange', 'blueberry'), ('orange', 'strawberry'), ('blueberry', 'strawberry')]
</code></pre>
<p>Or, just Pythonize your C loops:</p>
<pre><code>&gt;&gt;&gt; for i in range(0, len(fruits)):
...     for j in range(i+1, len(fruits)):
...        print fruits[i], fruits[j]
... 
apple orange
apple blueberry
apple strawberry
orange blueberry
orange strawberry
blueberry strawberry
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in range(len(fruits)-1):
   print fruits[i], fruits[i+1]
</code></pre>
</div>
<span class="comment-copy">Your outputs don't make any sense given your inputs. Do you want to make pairs of adjacent elements, or pair each fruit with every other fruit? The former would be done with <code>zip</code> (see <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the <code>itertools</code> recipe for <code>pairwise</code></a>), the latter <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">with <code>itertools.combinations</code></a>.</span>
<span class="comment-copy">Why do you need two loops for this? I might have misunderstood what you want but to get the output you have shown you can just do  <code>for i in range(1, len(fruits)): print fruits[i-1], fruits[i]</code></span>
<span class="comment-copy">Thank you! This is what I was looking for. :)</span>
<span class="comment-copy">Thank you so much for your help!</span>
<span class="comment-copy">How can you prevent before throwing the following error:IndexError: list index out of range ?</span>
<span class="comment-copy">@Monica, <code>for i in range(len(fruits) - 1)</code></span>
