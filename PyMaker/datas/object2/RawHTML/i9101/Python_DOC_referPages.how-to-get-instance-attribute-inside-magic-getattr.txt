<div class="post-text" itemprop="text">
<p>In a class I want to map call to <code>inst.addr</code> to a value crated by calling <code>inst.addr_fun()</code>, and thus created this code:</p>
<pre><code>class Common:
    ...
    def __getattr__(self, name):
        if hasattr(self, '{}_fun'.format(name)):
            return getattr(self, '{}_fun'.format(name))()
        else:  
            raise AttributeError('attribute unknown in instance')
    def addr_fun(self):
        return 42
</code></pre>
<p>However, it results in recursion, since the <code>getattr</code> calls <code>__getattr__</code>, so I can't get access to the <code>addr_fun</code> function.</p>
<p>How to get access to a named attribute inside the instance?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">Python language refererence about __getattr__</a>:</p>
<blockquote>
<p>object.__getattr__(self, name)</p>
<p>Called when an attribute lookup has not found the attribute in the usual places (i.e. it is not an instance attribute nor is it found in the class tree for self). name is the attribute name. This method should return the (computed) attribute value or raise an AttributeError exception.</p>
<p>Note that if the attribute is found through the normal mechanism, __getattr__() is not called. (This is an intentional asymmetry between __getattr__() and __setattr__().) This is done both for efficiency reasons and because otherwise __getattr__() would have no way to access other attributes of the instance. Note that at least for instance variables, you can fake total control by not inserting any values in the instance attribute dictionary (but instead inserting them in another object). See the __getattribute__() method below for a way to actually get total control over attribute access.</p>
</blockquote>
<p>This means that <code>__getattr__</code> is only called if no instance variable, no class attribute and no method with the same name are found.</p>
<p>So your code works for "addr". You will get infinite recursion for other names because <a href="https://docs.python.org/3/library/functions.html#hasattr" rel="nofollow noreferrer"><code>hasattr()</code> also uses <code>__getattr__</code></a>.</p>
<p>You should avoid using <code>hasattr()</code> and <code>getattr()</code> inside <code>__getattr__</code>.
Instead you can use <code>super().__getattribute__(name)</code> in a <code>try-except</code> block that catches <code>AttributeError</code>.</p>
<p>Please note that <code>super().__getattribute__(name)</code> doesn't call <code>__getattr__(name)</code> on parent classes. So <strong>if</strong> you want to support a class hierarchy in which <code>__getattr__</code> may chain to the <code>__getattr__</code> method of another class you would need to call <code>super().__getattr__(name)</code> if <code>super.__getattribute__()</code> failed. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>object.__getattribute__</code></a>.  For example:</p>
<pre><code>class C:
    x = 10

    def __getattribute__(self, name):
        try:
            return super().__getattribute__('{}_fun'.format(name))
        except AttributeError:
            return super().__getattribute__(name)

    def a_fun(self):
        print('Calling a_fun(), value of x is {}'.format(self.x))


c = C()
c.a()
&gt;&gt;&gt; Calling a_fun(), value of x is 10
</code></pre>
</div>
<span class="comment-copy"><code>super().__getattr__()</code> is very likely to fail - unless the parent class does implement it, which is seldom the case, and definitly for not for <code>object</code>. You want to call <code>super().__getattribute__()</code> which is garanteed to be implemented.</span>
