<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/40694470/is-there-anything-faster-than-dict">Is there anything faster than dict()?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>"One semi-gotcha to avoid though is to make sure you do: <code>key in some_dict</code> rather than <code>key in some_dict.keys()</code>. Both are equivalent semantically, but performance-wise the latter is much slower (O(n) vs O(1)). I've seen people do the <code>in dict.keys()</code> thinking it's more explicit &amp; therefore better."</p>
<p>I found this piece of advice online. Can anyone please explain and justify the above difference in performance? How is the working of these two seemingly similar statements so different?</p>
<p>EDIT: To be more precise, how is indexing in a dictionary faster than indexing in a list? As far as I've learned, hash tables are arrays of linked lists. The array being an array of the keys. So finding a key in a hash table should be similar to finding that key in a list of keys. (?)</p>
</div>
<div class="post-text" itemprop="text">
<p>It is true only for Python 2.</p>
<p>In Python 3, <code>dict.keys()</code> returns a view object <code>dict_keys</code> that wraps the source <code>dict</code> object:</p>
<pre><code>$ python3
Python 3.5.2 (default, Nov 17 2016, 17:05:23)
&gt;&gt;&gt; d = { 1: 11, 2:22, 3:33 }
&gt;&gt;&gt; k = d.keys()
&gt;&gt;&gt; k
dict_keys([1, 2, 3])
&gt;&gt;&gt; d
{1: 11, 2: 22, 3: 33}
&gt;&gt;&gt; d[4] = 44
&gt;&gt;&gt; k
dict_keys([1, 2, 3, 4])  #!!! k includes the new key that was added to d
&gt;&gt;&gt; 
</code></pre>
<p>As a result, in Python 3, <code>key in dict.keys()</code> is effectively executed almost as <code>key in dict</code>:</p>
<ol>
<li><code>dict.keys()</code> creates the <code>dict_keys</code> object in O(1) time and then</li>
<li>the query operation is rerouted through <code>dict_keys</code> back to <code>dict</code> which performs it in O(1) time.</li>
</ol>
<p>Unlike Python 3, in Python 2, <code>dict.keys()</code> returns a list object which has to be constructed in O(n) time:</p>
<pre><code>$ python2
Python 2.7.12 (default, Nov 19 2016, 06:48:10) 
&gt;&gt;&gt; d = { 1: 11, 2:22, 3:33 }
&gt;&gt;&gt; k = d.keys()
&gt;&gt;&gt; k
[1, 2, 3]
&gt;&gt;&gt; d[4] = 44
&gt;&gt;&gt; k
[1, 2, 3]
&gt;&gt;&gt; 
</code></pre>
<p>Therefore, in Python 2, <code>key in dict.keys()</code> (as a test, rather than as a part of <code>for key in dict.keys()</code>) will have two sources of <code>O(n)</code> time complexity:</p>
<ol>
<li>Building the list returned by <code>dict.keys()</code> takes O(n) time</li>
<li>Checking if the query value is in the returned list takes another O(n) time.</li>
</ol>
</div>
<span class="comment-copy">Are you familiar with the theory of <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash tables</a>?</span>
<span class="comment-copy">@PM2Ring I have indeed implemented it in C. So I'd say yeah, I am familiar with the data structure. Am I missing something obvious?</span>
<span class="comment-copy">Another similar question <a href="http://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary" title="check if a given key already exists in a dictionary">stackoverflow.com/questions/1602934/â€¦</a></span>
<span class="comment-copy">You should read this article by Laurent Luce about the <a href="http://www.laurentluce.com/posts/python-dictionary-implementation" rel="nofollow noreferrer">Python dictionary implementation</a>. The exact implementation of the <code>dict</code> object has changed in Python 3.6, but the hashing process is still very similar, AFAIK.  And since you can read &amp; write C you may find it helpful to look at the <a href="https://github.com/python/cpython/blob/master/Objects/dictobject.c" rel="nofollow noreferrer">dictobject.c</a> source code.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/39980744/4014959">This answer</a> by Jim Fasarakis-Hilliard briefly explains the new Python 3.6 dictionary.</span>
<span class="comment-copy">Not only is the list construction time O(n), the list search time is also O(n), since <code>k in some_list</code> performs a linear scan. Your answer really should mention that. Both operations are performed at C speed, so they're much faster than doing it with explicit Python loops, but it's certainly wise to avoid those unnecessary operations.</span>
<span class="comment-copy">@PM2Ring You are right. I somehow misread the question assuming that <i><code>element</code></i> <b><code>in</code></b> <i><code>set</code></i> is used in the context of a <code>for</code> loop.</span>
<span class="comment-copy">The Python 3 <code>dict.keys()</code> is a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">view object</a>, which is set-like, although it's not exactly a set. The Python 2 <code>dict.keys()</code> is a plain old static list.</span>
<span class="comment-copy">I don't know why you got a down-vote. Maybe the down-voter doesn't understand your answer...</span>
<span class="comment-copy">@Leon oh okay! a 'view object'. That's completely new for me. I'll have to look into it. Thanks. :)</span>
