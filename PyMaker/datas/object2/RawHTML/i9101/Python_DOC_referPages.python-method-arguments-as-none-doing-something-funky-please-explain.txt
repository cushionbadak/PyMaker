<div class="post-text" itemprop="text">
<p>I have code like this (simplified):</p>
<pre><code>def outer():
    ctr = 0

    def inner():
        ctr += 1

    inner()
</code></pre>
<p>But <code>ctr</code> causes an error:</p>
<pre><code>Traceback (most recent call last):
  File "foo.py", line 9, in &lt;module&gt;
    outer()
  File "foo.py", line 7, in outer
    inner()
  File "foo.py", line 5, in inner
    ctr += 1
UnboundLocalError: local variable 'ctr' referenced before assignment
</code></pre>
<p>How can I fix this? I thought nested scopes would have allowed me to do this. I've tried with 'global', but it still doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3, you can use the <code>nonlocal</code> statement to enable rebinding of a nonlocal name:</p>
<pre><code>def outer():
    ctr = 0

    def inner():
        nonlocal ctr
        ctr += 1

    inner()
</code></pre>
<p>If you're using Python 2, which doesn't have <code>nonlocal</code>, you need to perform your incrementing without barename rebinding (by keeping the counter as an item or attribute of some barename, <strong>not</strong> as a barename itself).  For example:</p>
<pre><code>...
ctr = [0]

def inner():
    ctr[0] += 1
...
</code></pre>
<p>and of course use <code>ctr[0]</code> wherever you're using bare <code>ctr</code> now elsewhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://www.devshed.com/c/a/Python/Nested-Functions-in-Python/1/" rel="nofollow noreferrer">http://www.devshed.com/c/a/Python/Nested-Functions-in-Python/1/</a></p>
<blockquote>
<p>Code in a nested function's body may
  access (but not rebind) local
  variables of an outer function, also
  known as free variables of the nested
  function.</p>
</blockquote>
<p>So, you would need to pass <code>ctr</code> to <code>inner</code> explicitly.</p>
</div>
<div class="post-text" itemprop="text">
<h2>The Explanation</h2>
<p>Whenever a value is assigned to a variable inside a function, python considers that variable a <em>local variable</em> of that function. Since the statement <code>ctr += 1</code> includes an assignment to <code>ctr</code>, python thinks that <code>ctr</code> is local to the <code>inner</code> function. Consequently, it never even tries to look at the value of the <code>ctr</code> variable that's been defined in <code>outer</code>. What python sees is essentially this:</p>
<pre><code>def inner():
    ctr = ctr + 1
</code></pre>
<p>And I think we can all agree that this code would cause an error, since <code>ctr</code> is being accessed before it has been defined.</p>
<p>(See also <a href="https://stackoverflow.com/q/49538724/1222951">this question</a> for more details about how python decides the scope of a variable.)</p>
<h2>The Solution (in python 3)</h2>
<p>Python 3 has introduced the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="nofollow noreferrer"><code>nonlocal</code> statement</a>, which works much like the <code>global</code> statement, but lets us access variables of the surrounding function (rather than global variables). Simply add <code>nonlocal ctr</code> at the top of the <code>inner</code>function and the problem will go away:</p>
<pre><code>def outer():
    ctr = 0

    def inner():
        nonlocal ctr
        ctr += 1

    inner()
</code></pre>
<h2>The Workaround (in python 2)</h2>
<p>Since the <code>nonlocal</code> statement doesn't exist in python 2, we have to be crafty. There are two easy workarounds:</p>
<ul>
<li><p><strong>Removing all assignments to <code>ctr</code></strong></p>
<p>Since python only considers <code>ctr</code> a local variable because there's an assignment to that variable, the problem will go away if we remove all assignments to the name <code>ctr</code>. But how can we change the value of the variable without assigning to it? Easy: We wrap the variable in a mutable object, like a list. Then we can modify that list without ever assigning a value to the name <code>ctr</code>:</p>
<pre><code>def outer():
    ctr = [0]

    def inner():
        ctr[0] += 1

    inner()
</code></pre></li>
<li><p><strong>Passing <code>ctr</code> as an argument to <code>inner</code></strong></p>
<pre><code>def outer():
    ctr = 0

    def inner(ctr):
        ctr += 1
        return ctr

    ctr = inner(ctr)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>How about declaring <code>ctr</code> outside of <code>outer</code> (i.e. in the global scope), or any other class/function? This will make the variable accessible and writable.</p>
</div>
<span class="comment-copy">also look to this question: <a href="http://stackoverflow.com/questions/2516652/scoping-problem-in-recursive-closure" title="scoping problem in recursive closure">stackoverflow.com/questions/2516652/â€¦</a></span>
<span class="comment-copy">This seems almost too like a 'hack'. I'll use it, but it seems like a limitation of Python 2.x. Guess I'll be using 3.x soon though.</span>
<span class="comment-copy">Alex - thanks - this scoping issue was making function composition messy in 2.x</span>
<span class="comment-copy">I've tried doing def keyfunc(x, k=ctr), and then doing k += 1. But that can't work, because then k becomes part of the local scope of the function and doesn't update the outer variable, ctr.</span>
<span class="comment-copy">The updating of <code>ctr</code> needs to be done in its own scope.  You might update it before or after calls to <code>keyfunc</code>.</span>
<span class="comment-copy">That wouldn't be possible since it's an argument to sorted() and is called by Python's internals, not by me directly. I couldn't put it in a lambda either because lambdas only allow expressions afaik.</span>
<span class="comment-copy">@Thomas O: You can use <code>functools.partial</code> for this <code>key=functools.partial(keyfunc, ctr)</code></span>
<span class="comment-copy">Yes, but it's a bit messy having global variables just for one or two functions - better to keep them in local scopes so you know why you put them there in the first place.</span>
