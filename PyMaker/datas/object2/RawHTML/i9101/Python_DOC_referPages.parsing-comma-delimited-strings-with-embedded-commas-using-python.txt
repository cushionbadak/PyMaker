<div class="post-text" itemprop="text">
<p>I'm looking for a way to optimize an algorithm that I have already developed. As the title of my question says, I am dealing with comma delimited strings that will sometimes contain any number of embedded commas. This is all being done in the context of big data so speed is important. What I have here does everything I need it to, however, I have to believe there would be a faster way of doing it. If you have any suggestions I would love to hear them. Thank you in advance.</p>
<p>code:</p>
<pre><code>import os,re


commaProblemA=re.compile('^"[\s\w\-()/*.@!#%^\'&amp;$\{\}|&lt;&gt;:0-9]+$')

commaProblemB=re.compile('^[\s\w\-()/*.@!#%^\'&amp;$\{\}|&lt;&gt;:0-9]*"$')

#example string
#these are read from a file in practice
z=',,"N/A","DWIGHT\'s BEET FARM,INC.","CAMUS,ALBERT",35.00,0.00,"NIETZSCHE,FRIEDRICH","God, I hope this works, fast.",,,35.00,,,"",,,,,,,,,,,"20,4,2,3,2,33","223,2,3,,34 00:00:00:000000",,,,,,,,,,,,0,,,,,,"ERW-400",,,,,,,,,,,,,,,1,,,,,,,"BLA",,"IGE6560",,,,'

testList=z.split(',')


for i in testList:
    if re.match(commaProblemA,i):
       startingIndex=testList.index(i)
       endingIndex=testList.index(i)
       count=0
       while True:
           endingIndex+=1
           if re.match(commaProblemB,testList[endingIndex]):
               diff=endingIndex-startingIndex
               while count&lt;diff:             
                   testList[startingIndex]=(testList[startingIndex]+","+testList[startingIndex+1])
                   testList.pop(startingIndex+1)
                   count+=1                   
               break




print(str(lineList))
print(len(lineList))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to do this yourself instead of using a library, first some tips:</p>
<ul>
<li>don't use <code>split()</code> on csv data. (also bad for performance)</li>
<li>for performance: don't use regEx.</li>
</ul>
<p>The regular way to scan the data would be like this (pseudo code, assuming single line csv):</p>
<pre><code>for each line
    bool insideQuotes = false;
    while not end of line {

        if currentChar == '"'
            insideQuotes = !insideQuotes; // ( ! meaning 'not')
            // this also handles the case of escaped quotes inside the field
            //    (if escaped with an extra quote)

        else if currentChar == ',' and !insideQuotes
            // seperator found - handle field
    }
</code></pre>
<p>For even better performance you could open the file in binary mode and handle the newlines yourself while scanning. This way you don't need to scan for a line, copy it in a buffer (for example with getline() or a similar function) and then scan that buffer again to extract the fields.</p>
</div>
<span class="comment-copy">Reinventing the wheel? <a href="https://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">docs.python.org/2/library/csv.html</a></span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer">StringIO</a> in combination with the <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">csv module</a>. Make sure to use the <code>quotechar</code> parameter when reading the string stream.</span>
<span class="comment-copy">Yes, I like to reinvent the wheel. It's a good way to truly understand how things work I suppose. Plus, for what it is worth(not much),I think my way is cool.</span>
