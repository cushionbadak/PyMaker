<div class="post-text" itemprop="text">
<p>In python 3 this works:</p>
<pre><code>Celsius = [39.2, 45.2, 37.3, 37.8, 89]
Fahrenheit = map(lambda x: ((float(9/5))*x + 32).__round__(3), Celsius)

print(list(Fahrenheit))

[102.56, 113.36, 99.14, 100.04, 192.2]
</code></pre>
<p>But, this doesn't work, Why?:</p>
<pre><code>Fahrenheit = map(lambda x: ((float(9/5))*x + 32).round(3), Celsius)
</code></pre>
<p>Also, nowdays lots of python scripts don't use this old format <code>__round__</code>, I think for the reason to make the script look more clean. Any other core reasons?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <code>float.round()</code> method, no. You'd use the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round()</code> <em>function</em></a> instead, passing in your value and the number of places to round to.</p>
<p><code>round()</code> is a function because rounding is an operation that applies to all number types, not just floating point numbers. Just like <code>len()</code> applies to all sequences (not just <code>list</code> or <code>tuple</code> or <code>str</code>), and <code>str</code> to all Python objects.</p>
<p>Like all <code>__*__</code> dunder methods, <a href="https://docs.python.org/3/reference/datamodel.html#object.__round__" rel="nofollow noreferrer"><code>__round__</code> is a hook</a> for custom classes to override how rounding works for that class. The <code>round()</code> function uses it when producing the output, as does some other functionality.</p>
<p>This works:</p>
<pre><code>Fahrenheit = map(lambda x: round((9.0/5) * x + 32, 3), Celsius)
</code></pre>
<p>Note that I did not use <code>float(9/5)</code> here! In Python two, that'd be 1.0:</p>
<pre><code>&gt;&gt;&gt; float(9/5)
1.0
</code></pre>
<p>because <code>9/5</code> is calculated <em>first</em> using integer division. <code>9.0/5</code> uses floating point division (because at least one of the operands is a floating point value), so gives you the right quotient:</p>
<pre><code>&gt;&gt;&gt; 9.0/5
1.8
</code></pre>
<p>You are using Python 3 here, where <code>/</code> means true division (producing floats even for integer operands), but the <code>float()</code> call is still just redundant there.</p>
</div>
<span class="comment-copy"><code>__round__</code> is a <i>hook method</i>. Use the <code>round()</code> function, it'll use the hook method as needed: <code>round((float(9/5))*x + 32), 3)</code>. However, <code>float(9/5)</code> is very much the wrong value, you want <code>9.0/5</code>.</span>
<span class="comment-copy">But, why doen't <code>round(2)</code> doesn't work with float though. This is really confusing.</span>
<span class="comment-copy">Because floats do not have a <code>.round</code> method...? What isn't clear about this?</span>
<span class="comment-copy">I understand that floats don't have .round method - well the error message says that. But, it confusing that the way it works just changes. I think I am clear now.</span>
<span class="comment-copy">@everestial007: <code>round()</code> applies to <i>all number types</i>, not just floating point numbers, which is why it is a function. Like <code>len()</code> and <code>str()</code>, etc. Python prefers a function when multiple types can support an operation, in order to provide you with a universal API that new types can adapt to.</span>
