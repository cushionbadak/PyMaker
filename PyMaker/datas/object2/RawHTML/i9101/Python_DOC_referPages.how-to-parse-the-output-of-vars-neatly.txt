<div class="post-text" itemprop="text">
<p>Is there a way in which to see the attributes of a Python object via <code>vars</code>, but with the output formatting being clean, and it not showing all the values of each attribute? (For example, a large array taking up all the screen). I basically just want a nice clean list of its attributes. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a list of the keys of the object's <code>vars</code>, that'd be</p>
<pre><code>list(vars(whatever))
</code></pre>
<p>or you could go through the keys and print them on their own lines:</p>
<pre><code>for attr in vars(whatever):
    print(attr)
</code></pre>
<p>or you could pretty-print the dict with <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint</code></a> (though it might not be any prettier than IPython's default pretty-printing):</p>
<pre><code>import pprint
pprint.pprint(vars(whatever))
</code></pre>
<p>or you could just code up whatever you think would be a readable way to view the information <code>vars</code> gives you. You're always free to write your own code.</p>
<p>There's also <code>dir(whatever)</code>, which aims to provide a list of the object's attributes useful for interactive inspection. <code>dir(whatever)</code> will usually be different from <code>list(vars(whatever))</code>; for example, it'll include methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you want a list of the attribute names, the <code>vars</code> <code>keys</code>? Or the full dictionary, <code>keys</code> and <code>values</code>? Depending on the object class <code>vars</code> could be empty, just a few scalars and strings, or a large and complex set of lists, arrays, etc. Without a general purpose 'pretty-printer' you can not generate a clear display for all classes. It's the purpose of the <code>__str__</code> and <code>__repr__</code> methods to produce a useful display of the objects attributes.</p>
<p>In my current <code>ipython</code> session</p>
<p>The variables are:</p>
<pre><code>In [97]: who
M    argparse    arr     b   choices     forbool     np  nr  parser  
product  sparse  sys     
</code></pre>
<p>One is user defined function with an empty vars    </p>
<pre><code>In [99]: forbool
Out[99]: &lt;function __main__.forbool&gt;

In [100]: vars(forbool)
Out[100]: {}
</code></pre>
<p>One is sparse matrix, with a modest number of attributes.  This example has only 5 nonzero values, so the arrays are quite small.  Yes, numpy arrays can be very large.  Their display is controlled by <code>numpy</code> code.</p>
<pre><code>In [101]: M
Out[101]: 
&lt;5x5 sparse matrix of type '&lt;class 'numpy.float64'&gt;'
    with 5 stored elements in LInked List format&gt;

In [102]: vars(M)
Out[102]: 
{'_shape': (5, 5),
 'data': array([[1.0], [1.0], [1.0], [1.0], [1.0]], dtype=object),
 'dtype': dtype('float64'),
 'maxprint': 50,
 'rows': array([[0], [1], [2], [3], [4]], dtype=object)}
</code></pre>
<p><code>argparse</code> is an imported module, with many vars.  One, the <code>doc</code> takes up nearly a page.</p>
<pre><code>In [103]: len(vars(argparse))
Out[103]: 52
</code></pre>
<p><code>arr</code> is an array, and doesn't have a <code>__dict__</code>, and <code>vars(arr)</code> gives an error.</p>
<p>This is the <code>whos</code> display for this display.  arrays are displayed in a condensed form that is unique to <code>ipython</code>.</p>
<pre><code>In [108]: %whos
Variable   Type              Data/Info
--------------------------------------
M          lil_matrix          (0, 0)   1.0\n  (1, 1)   1.&lt;...&gt; (3, 3)  1.0\n  (4, 4)   1.0
argparse   module            &lt;module 'argparse' from '&lt;...&gt;b/python3.5/argparse.py'&gt;
arr        ndarray           10x3: 30 elems, type `int32`, 120 bytes
b          ndarray           4x2: 8 elems, type `int32`, 32 bytes
choices    list              n=16
forbool    function          &lt;function forbool at 0xb52950bc&gt;
np         module            &lt;module 'numpy' from '/us&lt;...&gt;kages/numpy/__init__.py'&gt;
nr         int               3
parser     ArgumentParser    ArgumentParser(prog='ipyt&lt;...&gt;r='error', add_help=True)
product    type              &lt;class 'itertools.product'&gt;
sparse     module            &lt;module 'scipy.sparse' fr&lt;...&gt;cipy/sparse/__init__.py'&gt;
sys        module            &lt;module 'sys' (built-in)&gt;
</code></pre>
<p>You could write a pretty printer.  Here's a start:</p>
<pre><code>def pprt(var):
    for k,v in vars(var).items():
        if isinstance(v, np.ndarray):
            astr = 'array {},{}'.format(v.dtype, v.shape)
        if isinstance(v, (list, tuple, dict)):
            if len(v)&gt;10:
                astr = 'big '+type(v)
            else:
                astr = str(v)
        elif isinstance(v, str):
            astr = v[:20]
        else:
            astr = str(v)
        print(k,':',astr)
</code></pre>
<p>For the sparse matrix</p>
<pre><code>In [123]: pprt(M)
_shape : (5, 5)
dtype : float64
rows : [[0] [1] [2] [3] [4]]
data : [[1.0] [1.0] [1.0] [1.0] [1.0]]
maxprint : 50
</code></pre>
<p>But for <code>argparse</code> <code>parser</code> object, it is clearly inadequate:</p>
<pre><code>In [124]: pprt(parser)
conflict_handler : error
usage : None
prefix_chars : -
_action_groups : [&lt;argparse._ArgumentGroup object at 0xb0c802ac&gt;, &lt;argparse._ArgumentGroup object at 0xb0c99ccc&gt;]
_mutually_exclusive_groups : []
allow_abbrev : True
_optionals : &lt;argparse._ArgumentGroup object at 0xb0c99ccc&gt;
prog : ipython3
description : None
_actions : [_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--k'], dest='k', nargs=None, const=None, default=100, type=&lt;class 'int'&gt;, choices=None, help='numbers, %(default)s', metavar=None)]
....
</code></pre>
<p>The object has many attributes; some have long class names.  Some are dictionaries with a few keys, but long values.  I'd have to do some sort of recursion to compress those.  So it's possible to write a compact displayer, but it will be a lot of work.</p>
</div>
<span class="comment-copy">Have you tried the standard <code>pprint</code>?</span>
<span class="comment-copy">The display of the ipthon <code>%whos</code> would be nice, but I don't see a way of invoking that on a dictionary like <code>vars()</code>.</span>
<span class="comment-copy">@hpaulj The ipython %whos? ...</span>
<span class="comment-copy"><code>%whos</code> gives a nice compact view of most of the variables in the current interactive session.  It's an expanded version of <code>%who</code>.  <code>%</code> is the prefix for <code>ipython</code> <code>magic</code> commands, and depending on the configuration might be optional.</span>
<span class="comment-copy">@hpaulj I think I would contend myself with just a "pretty" list of all the dictionary keys at this point. Ideally I WOULD like a pretty list of keys and their corresponding values, but I don't know how that would work when some of the values are large arrays/matricies that just end up monopolizing the real-estate on the screen.</span>
