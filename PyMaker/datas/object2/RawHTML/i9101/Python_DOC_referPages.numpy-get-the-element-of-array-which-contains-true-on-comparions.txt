<div class="post-text" itemprop="text">
<pre><code>import numpy as np  
import re

list1= ['651ac1', '21581', '13737|14047', '22262', '12281', '12226', '61415', '61495']
regexp = '[a-zA-Z]'
selection = np.array([bool(re.search(regexp, element)) for element in list1])
if True in selection:
    #get_element_containing_true
</code></pre>
<p>The <code>selection</code> looks like this:</p>
<pre><code>selection
array([ True, False, False, False, False, False, False, False, False], dtype=bool)
</code></pre>
<p>I want to get the element of array which contains True. How do I get this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you actually need <code>numpy</code> here (see <a href="https://stackoverflow.com/a/41980132/5393381">@Divakar's answer</a> if you don't)? If you do, you could convert the <code>list1</code> to <code>np.array</code> and index:</p>
<pre><code>np.array(list1)[selection]
</code></pre>
<p>This is called <a href="https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#boolean-array-indexing" rel="nofollow noreferrer"><code>boolean array indexing</code></a>. Just in case you're interested.</p>
<hr/>
<p>Just a performance tip: If you use a regular expression several times: compile it and reuse that compiled one:</p>
<pre><code>regexp = re.compile('[a-zA-Z]')
selection = np.array([bool(regexp.search(element)) for element in list1])
</code></pre>
<p>That could be much faster and easily combined with the other answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could directly get those within the <code>list-comprehension</code> -</p>
<pre><code>[element for element in list1 if bool(re.search(regexp, element))]
</code></pre>
<p>On a closer look, With the search method, we get an object for a match : </p>
<pre><code>In [175]: re.search(regexp, list1[0])
Out[175]: &lt;_sre.SRE_Match at 0x7fc30bac1c60&gt;
</code></pre>
<p>For a no match case, we get <code>None</code>.</p>
<p>According to the <a href="https://docs.python.org/3/reference/expressions.html#booleans" rel="nofollow noreferrer"><code>definitions of booleans</code></a> :</p>
<blockquote>
<p>In the context of Boolean operations, and also when expressions are
  used by control flow statements, the following values are interpreted
  as false: False, None, numeric zero of all types, and empty strings
  and containers (including strings, tuples, lists, dictionaries, sets
  and frozensets). All other values are interpreted as true.
  User-defined objects can customize their truth value by providing a
  <strong>bool</strong>() method.</p>
</blockquote>
<p>So, if the search method results are directly fed to <code>IF</code>, we get objects for matches and <code>None</code> for no matches. As such using the definition, with the <code>IF</code>, a match would be evaluated as <code>True</code> and <code>False</code> otherwise. Thus, we can skip the bool() there and have a simplified version, like so -</p>
<pre><code>[element for element in list1 if re.search(regexp, element)]
</code></pre>
</div>
<span class="comment-copy">Did either of the posted solutions work for you?</span>
<span class="comment-copy">This worked form me : <b>np.array(list1)[selection]</b></span>
<span class="comment-copy">I guess then @MSeifert's solution worked for you. Consider accepting it - <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work" title="how does accepting an answer work">meta.stackexchange.com/questions/5234/…</a></span>
<span class="comment-copy">No need to cast with <code>bool()</code></span>
<span class="comment-copy">@Chris_Rands Seems like it. But that output with <code>re.search(regexp, list1[0])</code> is giving out something that I don't fully understand, so just to be safe there I guess :)</span>
<span class="comment-copy">But <code>if</code> converts to <code>bool</code> anyway, it's the same! see: <a href="http://stackoverflow.com/questions/11885382/is-there-any-difference-between-if-boolx-and-if-x-in-python" title="is there any difference between if boolx and if x in python">stackoverflow.com/questions/11885382/…</a></span>
<span class="comment-copy">@Chris_Rands Upon some research, found out few things and added accordingly there :) Not really familiar on those fronts, so hoping those statements are correct.</span>
<span class="comment-copy">Yes that was the point I was making</span>
