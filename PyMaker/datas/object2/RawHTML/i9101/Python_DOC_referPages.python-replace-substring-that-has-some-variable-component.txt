<div class="post-text" itemprop="text">
<p>I have the following string:</p>
<pre><code>Billy got score of 2 and Tommy got score of 3
</code></pre>
<p>I want to split on <code>score of &lt;some number&gt;</code> so that I get</p>
<pre><code>["Billy got","Tommy got"]
</code></pre>
<p>How can I do such a split in python? I tried</p>
<pre><code>input.split("score of \d")
</code></pre>
<p>but that does not work. However, if I do</p>
<pre><code>input.split("score of")
</code></pre>
<p>then I get</p>
<pre><code>["Billy got "," 2 and Tommy got "," 3"]
</code></pre>
<p><strong>Update:</strong></p>
<p>Thanks for the answer to the original post. I have a follow up.</p>
<p>What if i want to replace <code>score of 2</code> with <code>score of 2$</code> ? meaning whenever i see <code>score of &lt;some number&gt;</code> just add a character <code>$</code> after the number</p>
</div>
<div class="post-text" itemprop="text">
<p>Well the reason why this does not work is because <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.split#str.split" rel="nofollow noreferrer"><code>str.split</code></a> expects a string as pattern: it is <strong>not interpreted as a regex</strong>.</p>
<p>You can however use <a href="https://docs.python.org/2/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a>:</p>
<pre><code>import re

result = re.split(r'score of \d+(?: and )?',input)
</code></pre>
<p>You also should add the optional <code>(?: and )?</code> to remove the <code>and</code> combinator. Furthermore this answer uses <code>\d+</code> (with a <code>+</code>) such that multi-digit scores are also parsed correctly (like <code>"Tommy got score of 23"</code>).</p>
<p>In the interpreter:</p>
<pre><code>$ python3
Python 3.5.2 (default, Nov 17 2016, 17:05:23) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; input="Billy got score of 2 and Tommy got score of 3"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'score of \d+(?:\s*and\s*)?',input)
['Billy got ', 'Tommy got ', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to use <code>re.split</code> and split on the numbers alongside the preceding string:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "Billy got score of 2 and Tommy got score of 3"
&gt;&gt;&gt; re.split(r' score of \d+', s)
['Billy got', ' and Tommy got', '']
</code></pre>
<p>You can also do some clean up with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [i.strip() for i in re.split(r' score of \d+', s) if i]
['Billy got', 'and Tommy got']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Explanation on regular expression used here <code>(.+?) score of [0-9]+</code></p>
<ul>
<li>Match anything with <code>score of</code> followed by some numbers</li>
<li><code>(.+?)</code> extract any thing before <code>score of</code> with a non-greedy search</li>
</ul>
<p>Here is the code:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; sentence
'Billy got score of 2 and Tommy got score of 3'
&gt;&gt;&gt; sentence.replace(' and ', ' ')
'Billy got score of 2 Tommy got score of 3'
&gt;&gt;&gt; results = re.findall('(.+?) score of [0-9]+', sentence.replace(' and ', ' '))
&gt;&gt;&gt; print results
['Billy got', ' Tommy got']
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> if you want to split with a regular expression.</span>
<span class="comment-copy">you probably wanted <code>[ and ]?</code> (square brackets), right?</span>
<span class="comment-copy">@MSeifert: but <code>[]</code> is a character group, not an optional pattern.</span>
<span class="comment-copy">haven't used regex in a while but <code>( and )</code> should match the <code>and</code> in a seperate substring. You need to make it part of the pattern, like <code>[( and )]</code> (does that work?)</span>
<span class="comment-copy">@MSeifert: that's because it was a <i>capture group</i>, if you add <code>?:</code>, you make it a non-capture group</span>
<span class="comment-copy">Yes, now it looks right. :)</span>
