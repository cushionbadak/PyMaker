<div class="post-text" itemprop="text">
<p>I am trying to make Scrapy output colorized logs. I am not so familiar with Python logging, but my understanding is that I must make my own Formatter and make it use by Scrapy. I succeeded in making a Formatter to colorized the output using Clint.</p>
<p>My problem is that I can't make it work within Scrapy correctly. I would have expected the logger object in my spider to have a handler, then I would have switched the formatter of that handler. When I looks what is inside <code>spider.logger.logger</code>, I see that <code>handler</code> is an empty list. I tried to add my formatter in a new stream handler doing.</p>
<p><code>crawler.spider.logger.logger.addHandler(sh)</code> 
where sh is a handler using my color formatter.</p>
<p>This add for effect to make scrappy output each messages twice. First message is colorized but doesn't have Scrapy formatting. The second one has Scrapy formatting with no colors.</p>
<p>How can I make Scrapy output colorized logs keeping the same format that can be set in <code>settings.py</code></p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you mean to colorize <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow noreferrer"><code>LogRecord</code></a> only, you can customize <a href="https://doc.scrapy.org/en/latest/topics/settings.html#std:setting-LOG_FORMAT" rel="nofollow noreferrer"><code>LOG_FORMAT</code></a> in <code>settings.py</code> with ANSI escape codes.</p>
<p>Example: </p>
<pre><code>LOG_FORMAT = '\x1b[0;0;34m%(asctime)s\x1b[0;0m \x1b[0;0;36m[%(name)s]\x1b[0;0m \x1b[0;0;31m%(levelname)s\x1b[0;0m: %(message)s'
</code></pre>
<p>If you also want to colorize different log levels with different colors, you can override <code>scrapy.utils.log._get_handler</code>(<a href="https://github.com/scrapy/scrapy/blob/master/scrapy/utils/log.py" rel="nofollow noreferrer">source code</a>).</p>
<p>Put this near the top of your <code>settings.py</code></p>
<pre><code>import scrapy.utils.log

_get_handler = copy.copy(scrapy.utils.log._get_handler)


def _get_handler_custom(*args, **kwargs):
    handler = _get_handler(*args, **kwargs)
    handler.setFormatter(your_custom_formatter)
    return handler

scrapy.utils.log._get_handler = _get_handler_custom
</code></pre>
<p>What it  does is reset the formatter after calling the original <code>_get_handler</code>, and then reattach it to <code>scrapy.utils.log</code>.
This is a hacky solution and might not be the best practice, but it just works.</p>
<p>A more proper way to achieve this is to override <code>logging.StreamHandler</code>. There is <a href="https://stackoverflow.com/questions/287871/print-in-terminal-with-colors-using-python">a bunch of discussion</a> on SO which can lead you to the right direction.</p>
<p>Here I provide my full working codes used in my projects (a third-party package <a href="https://github.com/borntyping/python-colorlog" rel="nofollow noreferrer"><code>colorlog</code></a> is in use).</p>
<p><code>settings.py</code></p>
<pre><code>import copy

from colorlog import ColoredFormatter
import scrapy.utils.log

color_formatter = ColoredFormatter(
    (
        '%(log_color)s%(levelname)-5s%(reset)s '
        '%(yellow)s[%(asctime)s]%(reset)s'
        '%(white)s %(name)s %(funcName)s %(bold_purple)s:%(lineno)d%(reset)s '
        '%(log_color)s%(message)s%(reset)s'
    ),
    datefmt='%y-%m-%d %H:%M:%S',
    log_colors={
        'DEBUG': 'blue',
        'INFO': 'bold_cyan',
        'WARNING': 'red',
        'ERROR': 'bg_bold_red',
        'CRITICAL': 'red,bg_white',
    }
)

_get_handler = copy.copy(scrapy.utils.log._get_handler)

def _get_handler_custom(*args, **kwargs):
    handler = _get_handler(*args, **kwargs)
    handler.setFormatter(color_formatter)
    return handler

scrapy.utils.log._get_handler = _get_handler_custom
</code></pre>
</div>
