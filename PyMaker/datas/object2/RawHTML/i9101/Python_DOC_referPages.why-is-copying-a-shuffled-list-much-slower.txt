<div class="post-text" itemprop="text">
<p>Copying a shuffled <code>range(10**6)</code> list ten times takes me about 0.18 seconds: (these are five runs)</p>
<pre><code>0.175597017661
0.173731403198
0.178601711594
0.180330912952
0.180811964451
</code></pre>
<p>Copying the unshuffled list ten times takes me about 0.05 seconds:</p>
<pre><code>0.058402235973
0.0505464636856
0.0509734306934
0.0526022752744
0.0513324916184
</code></pre>
<p>Here's my testing code:</p>
<pre><code>from timeit import timeit
import random

a = range(10**6)
random.shuffle(a)    # Remove this for the second test.
a = list(a)          # Just an attempt to "normalize" the list.
for _ in range(5):
    print timeit(lambda: list(a), number=10)
</code></pre>
<p>I also tried copying with <code>a[:]</code>, the results were similar (i.e., big speed difference)</p>
<p>Why the big speed difference? I know and understand the speed difference in the famous <a href="https://stackoverflow.com/q/11227809/1672429">Why is it faster to process a sorted array than an unsorted array?</a> example, but here my processing has no decisions. It's just blindly copying the references inside the list, no?</p>
<p>I'm using Python 2.7.12 on Windows 10.</p>
<p><strong>Edit:</strong> Tried Python 3.5.2 as well now, the results were almost the same (shuffled consistently around 0.17 seconds, unshuffled consistently around 0.05 seconds). Here's the code for that:</p>
<pre><code>a = list(range(10**6))
random.shuffle(a)
a = list(a)
for _ in range(5):
    print(timeit(lambda: list(a), number=10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The interesting bit is that it depends on the order in which the integers are <strong>first</strong> created. For example instead of <code>shuffle</code> create a random sequence with <code>random.randint</code>:</p>
<pre><code>from timeit import timeit
import random

a = [random.randint(0, 10**6) for _ in range(10**6)]
for _ in range(5):
    print(timeit(lambda: list(a), number=10))
</code></pre>
<p>This is as fast as copying your <code>list(range(10**6))</code> (first and fast example).</p>
<p>However when you shuffle - then your integers aren't in the order they were first created anymore, that's what makes it slow. </p>
<p>A quick intermezzo:</p>
<ul>
<li>All Python objects are on the heap, so every object is a pointer.</li>
<li>Copying a list is a shallow operation.</li>
<li>However Python uses reference counting so when an object is put in a new container it's reference count must be incremented (<a href="https://github.com/python/cpython/blob/403ccddb9598bac6e0e6db4ba5aa2fe494512a98/Objects/listobject.c#L454" rel="noreferrer"><code>Py_INCREF</code> in <code>list_slice</code></a>), so Python really needs to go to where the object is. It can't just copy the reference.</li>
</ul>
<p>So when you copy your list you get each item of that list and put it "as is" in the new list. When your next item was created shortly after the current one there is a good chance (no guarantee!) that it's saved next to it on the heap. </p>
<p>Let's assume that whenever your computer loads an item in the cache it also loads the <code>x</code> next-in-memory items (cache locality). Then your computer can perform the reference count increment for <code>x+1</code> items on the same cache!</p>
<p>With the shuffled sequence it still loads the next-in-memory items but these aren't the ones next-in-list. So it can't perform the reference-count increment without "really" looking for the next item.</p>
<p><strong>TL;DR:</strong> The actual speed depends on what happened before the copy: in what order were these items created and in what order are these in the list.</p>
<hr/>
<p>You can verify this by looking at the <a href="https://docs.python.org/3/library/functions.html#id" rel="noreferrer"><code>id</code></a>:</p>
<blockquote>
<p>CPython implementation detail: This is the address of the object in memory.</p>
</blockquote>
<pre><code>a = list(range(10**6, 10**6+100))
for item in a:
    print(id(item))
</code></pre>
<p>Just to show a short excerpt:</p>
<pre><code>1496489995888
1496489995920  # +32
1496489995952  # +32
1496489995984  # +32
1496489996016  # +32
1496489996048  # +32
1496489996080  # +32
1496489996112
1496489996144
1496489996176
1496489996208
1496489996240
1496507297840
1496507297872
1496507297904
1496507297936
1496507297968
1496507298000
1496507298032
1496507298064
1496507298096
1496507298128
1496507298160
1496507298192
</code></pre>
<p>So these objects are really "next to each other on the heap". With <code>shuffle</code> they aren't:</p>
<pre><code>import random
a = list(range(10**6, 100+10**6))
random.shuffle(a)
last = None
for item in a:
    if last is not None:
        print('diff', id(item) - id(last))
    last = item
</code></pre>
<p>Which shows these are not really next to each other in memory:</p>
<pre><code>diff 736
diff -64
diff -17291008
diff -128
diff 288
diff -224
diff 17292032
diff -1312
diff 1088
diff -17292384
diff 17291072
diff 608
diff -17290848
diff 17289856
diff 928
diff -672
diff 864
diff -17290816
diff -128
diff -96
diff 17291552
diff -192
diff 96
diff -17291904
diff 17291680
diff -1152
diff 896
diff -17290528
diff 17290816
diff -992
diff 448
</code></pre>
<hr/>
<p><strong>Important note:</strong></p>
<p>I haven't thought this up myself. Most of the informations can be found in the <a href="https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/" rel="noreferrer">blogpost of Ricky Stewart</a>.</p>
<p>This answer is based on the "official" CPython implementation of Python. The details in other implementations (Jython, PyPy, IronPython, ...) may be different. Thanks @JÃ¶rgWMittag <a href="https://stackoverflow.com/questions/42107442/why-is-copying-a-shuffled-list-much-slower/42108043#comment71388367_42108043">for pointing this out</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you shuffle the list items, they have worse locality of reference, leading to worse cache performance.</p>
<p>You might think that copying the list just copies the references, not the objects, so their locations on the heap shouldn't matter.  However, copying still involves accessing each object in order to modify the refcount.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained by others, it's not just copying the references but also increases the reference counts inside the objects and thus the objects <strong>are</strong> accessed and the cache plays a role.</p>
<p>Here I just want to add more experiments. Not so much about shuffled vs unshuffled (where accessing one element might miss the cache but get the following elements into the cache so they get hit). But about repeating elements, where later accesses of the same element might hit the cache because the element is still in the cache.</p>
<p>Testing a normal range:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; a = range(10**7)
&gt;&gt;&gt; [timeit(lambda: list(a), number=100) for _ in range(3)]
[5.1915339142808925, 5.1436351868889645, 5.18055115701749]
</code></pre>
<p>A list of the same size but with just one element repeated over and over again is faster because it hits the cache all the time:</p>
<pre><code>&gt;&gt;&gt; a = [0] * 10**7
&gt;&gt;&gt; [timeit(lambda: list(a), number=100) for _ in range(3)]
[4.125743135926939, 4.128927210087596, 4.0941229388550795]
</code></pre>
<p>And it doesn't seem to matter what number it is:</p>
<pre><code>&gt;&gt;&gt; a = [1234567] * 10**7
&gt;&gt;&gt; [timeit(lambda: list(a), number=100) for _ in range(3)]
[4.124106479141709, 4.156590225249886, 4.219242600790949]
</code></pre>
<p>Interestingly, it gets even faster when I instead repeat the same two or four elements:</p>
<pre><code>&gt;&gt;&gt; a = [0, 1] * (10**7 / 2)
&gt;&gt;&gt; [timeit(lambda: list(a), number=100) for _ in range(3)]
[3.130586101607932, 3.1001001764957294, 3.1318465707127814]

&gt;&gt;&gt; a = [0, 1, 2, 3] * (10**7 / 4)
&gt;&gt;&gt; [timeit(lambda: list(a), number=100) for _ in range(3)]
[3.096105435911994, 3.127148431279352, 3.132872673690855]
</code></pre>
<p>I guess something doesn't like the same single counter increased all the time. Maybe some <a href="https://en.wikipedia.org/wiki/Bubble_(computing)" rel="nofollow noreferrer">pipeline stall</a> because each increase has to wait for the result of the previous increase, but this is a wild guess.</p>
<p>Anyway, trying this for even larger numbers of repeated elements:</p>
<pre><code>from timeit import timeit
for e in range(26):
    n = 2**e
    a = range(n) * (2**25 / n)
    times = [timeit(lambda: list(a), number=20) for _ in range(3)]
    print '%8d ' % n, '  '.join('%.3f' % t for t in times), ' =&gt; ', sum(times) / 3
</code></pre>
<p>The output (first column is the number of different elements, for each I test three times and then take the average):</p>
<pre><code>       1  2.871  2.828  2.835  =&gt;  2.84446732686
       2  2.144  2.097  2.157  =&gt;  2.13275338734
       4  2.129  2.297  2.247  =&gt;  2.22436720645
       8  2.151  2.174  2.170  =&gt;  2.16477771575
      16  2.164  2.159  2.167  =&gt;  2.16328197911
      32  2.102  2.117  2.154  =&gt;  2.12437970598
      64  2.145  2.133  2.126  =&gt;  2.13462250728
     128  2.135  2.122  2.137  =&gt;  2.13145065221
     256  2.136  2.124  2.140  =&gt;  2.13336283943
     512  2.140  2.188  2.179  =&gt;  2.1688431668
    1024  2.162  2.158  2.167  =&gt;  2.16208440826
    2048  2.207  2.176  2.213  =&gt;  2.19829998424
    4096  2.180  2.196  2.202  =&gt;  2.19291917834
    8192  2.173  2.215  2.188  =&gt;  2.19207065277
   16384  2.258  2.232  2.249  =&gt;  2.24609975704
   32768  2.262  2.251  2.274  =&gt;  2.26239771771
   65536  2.298  2.264  2.246  =&gt;  2.26917420394
  131072  2.285  2.266  2.313  =&gt;  2.28767871168
  262144  2.351  2.333  2.366  =&gt;  2.35030805124
  524288  2.932  2.816  2.834  =&gt;  2.86047313113
 1048576  3.312  3.343  3.326  =&gt;  3.32721167007
 2097152  3.461  3.451  3.547  =&gt;  3.48622758473
 4194304  3.479  3.503  3.547  =&gt;  3.50964316455
 8388608  3.733  3.496  3.532  =&gt;  3.58716466865
16777216  3.583  3.522  3.569  =&gt;  3.55790996695
33554432  3.550  3.556  3.512  =&gt;  3.53952594744
</code></pre>
<p>So from about 2.8 seconds for a single (repeated) element it drops to about 2.2 seconds for 2, 4, 8, 16, ... different elements and stays at about 2.2 seconds until the hundred thousands. I think this uses my L2 cache (4 Ã 256 KB, I have an <a href="https://en.wikipedia.org/wiki/List_of_Intel_Core_i7_microprocessors#.22Skylake-S.22_.28quad-core.2C_14_nm.29" rel="nofollow noreferrer">i7-6700</a>).</p>
<p>Then over a few steps, the times go up to 3.5 seconds. I think this uses a mix of my L2 cache and my L3 cache (8 MB) until that's "exhausted" as well.</p>
<p>At the end it stays at around 3.5 seconds, I guess because my caches don't help with the repeated elements anymore.</p>
</div>
<div class="post-text" itemprop="text">
<p>Before the shuffle, when allocated in the heap, the adjacent index objects are adjacent in memory, and the memory hit rate is high when accessed; after shuffle, the object of the adjacent index of the new list is not in memory. Adjacent, the hit rate is very poor.</p>
</div>
<span class="comment-copy"><a href="https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/" rel="nofollow noreferrer">Why sorting an array makes a Python loop faster</a></span>
<span class="comment-copy">Please don't shout at me, I was trying to help you! After changing the order, I get approximately <code>0.25</code> in each iteration of each one of the tests. So on my platform, the order does matter.</span>
<span class="comment-copy">@vaultah Thanks, but I've read that now and I disagree. When I saw the code there, I immediately thought of cache hits/misses of the ints, which is also the author's conclusion. But his code <b>adds</b> the numbers, which requires looking at them. My code doesn't. Mine only needs to copy the references, not access through them.</span>
<span class="comment-copy">There are an complete answer in a link by @vaultah (you slightly disagree right now, I see). But anyway I still think that we shouldn't use python for low-level features, and thus be worry about. But that topic is interesting anyway, thank you.</span>
<span class="comment-copy">@NikolayProkopyev Yeah, I'm not worried about it, just noticed this while doing something else, couldn't explain it, and got curious. And I'm glad I asked and have an answer now :-)</span>
<span class="comment-copy">@augurar Copying a reference implies incrementing the reference counter which is in the object (thus the object access is inevitable)</span>
<span class="comment-copy">@StefanPochmann The function doing the copy is <a href="https://github.com/python/cpython/blob/403ccddb9598bac6e0e6db4ba5aa2fe494512a98/Objects/listobject.c#L432" rel="nofollow noreferrer"><code>list_slice</code></a> and in line 453 you can see the <code>Py_INCREF(v);</code> call that needs to access the heap-allocated object.</span>
<span class="comment-copy">@MSeifert Another good experiment is using <code>a = [0] * 10**7</code> (up from 10**6 because that was too unstable), which is even faster than using<code>a = range(10**7)</code> (by a factor of about 1.25). Clearly because that's even better for caching.</span>
<span class="comment-copy">I was just wondering why I got 32bit integers on a 64bit computer with python 64bit. But actually that's good for caching as well :-) Even <code>[0,1,2,3]*((10**6) // 4)</code> is as fast as <code>a = [0] * 10**6</code>. However with integers from 0-255 there is another fact coming in: These are interned so with these the order of creation (inside your script) isn't important anymore - because they are created when you start python.</span>
<span class="comment-copy">Note that of the currently existing four production-ready Python implementations, only <i>one</i> uses reference counting. So, this analysis really only applies to a single implementation.</span>
<span class="comment-copy">This might be a better answer for <i>me</i> (at least if it had a link to "proof" like MSeifert's) as this is all I was missing and it's very succinct, but I think I'll stick with MSeifert's as I feel it might be better for others. Upvoted this as well, though, thanks.</span>
<span class="comment-copy">Will also add that pentioids, athlums etc have mystical logic in them to detect address patterns, and will start prefetching data when they see a pattern. Which in this case, could be kicking in to prefetch the data (reducing cache misses) when the numbers are in order. This effect is in addition, of course, to the increased % of hits from locality.</span>
