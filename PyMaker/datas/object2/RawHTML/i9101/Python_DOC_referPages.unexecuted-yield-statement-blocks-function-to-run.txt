<div class="post-text" itemprop="text">
<p>In the below simplified code, I would like to reuse a loop to do a preparation first and yield the result.</p>
<p>However, the preparation (<code>bar()</code>) function is never executed.</p>
<p>Is yield statement changing the flow of the function?</p>
<pre><code>def bar(*args,**kwargs):
    print("ENTER bar")
    pass

def foo(prepare=False):
    print("ENTER foo")
    for x in range(1,10):
        if prepare:
            bar(x)
        else:
            yield x


foo(prepare=True)

r = foo(prepare=False)
for x in r:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because the <code>foo</code> definition contains a yield, it won't run like a normal function even if you call it like one (e.g. <code>foo(prepare=True)</code> ).</p>
<p>Running <code>foo()</code> with whatever arguments will return a generator object, suitable to be iterated through. The body of the definition won't be run until you try and iterate that generator object.</p>
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">new coroutine syntax</a> puts a keyword at the <strong>start</strong> of the definition, so that the change in nature isn't hidden inside the body of the function.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that having a <code>yield</code> statement changes the function to returning a generator and alters the behavior of the function.</p>
<p>Basically this means that on the call of the <code>.next</code> function of the generator the function executes to the <code>yield</code> or termination of the function (in which case it raises <code>StopIteration</code> exception). </p>
<p>Consequently what you should have done is to ensure that you iterate over it even if the <code>yield</code> statement won't be reached. Like:</p>
<pre><code>r = foo(prepare=True)
for x in r:
    pass 
</code></pre>
<p>In this case the loop will terminate immediately as no <code>yield</code> statement is being reached.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion, the actual explanation here is that:</p>
<h2>Python evaluates <code>if</code> condition lazily!</h2>
<p>And I'll explain:</p>
<p>When you call to </p>
<pre><code>foo(prepare=True)
</code></pre>
<p>just like that, nothing happens, although you might expected that <code>bar(x)</code> will be executed 10 times. But what really happen is that 'no-one' demanding the return value of <code>foo(prepare=True)</code> call, so the <code>if</code> is not evaluated, but it might if you use the return value from <code>foo</code>.</p>
<p>In the second call to <code>foo</code>, iterating the return value <code>r</code>, python has to evaluate the return value,and it does, and I'll show that:</p>
<h2>Case 1</h2>
<pre><code>r = foo(prepare=True)
for x in r:
    pass
</code></pre>
<p>The output here is '<em>ENTER bar</em>' 9 times. This means that <code>bar</code> is executed 9 times.</p>
<h2>Case 2</h2>
<pre><code>r = foo(prepare=False)
for x in r:
    pass
</code></pre>
<p>In this case no '<em>ENTER bar</em>' is printed, as expected.</p>
<hr/>
<p><strong>To sum everything up</strong>, I'll say that:</p>
<ul>
<li><p>There are some cases where Python perform <a href="https://en.wikipedia.org/wiki/Lazy_evaluation" rel="nofollow noreferrer"><strong>Lazy Evaluation</strong></a>, <a href="https://stackoverflow.com/questions/13960657/does-python-evaluate-ifs-conditions-lazily">one of them is the <code>if</code> statement</a>.</p></li>
<li><p>Not everything is evaluated lazily in Python, </p></li>
</ul>
<p>for example:</p>
<pre><code># builds a big list and immediately discards it
sum([x*x for x in xrange(2000000)])
</code></pre>
<p><strong>vs.</strong></p>
<pre><code># only keeps one value at a time in memory
sum(x*x for x in xrange(2000000))
</code></pre>
<p>About lazy and eager evaluation in python, continue read <a href="http://www.pages.drexel.edu/~kmk592/rants/lazy-python/" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Simply containing a <code>yield</code> does indeed change the nature of the function. It won't run like a normal function, even if you don't hit a <code>yield</code> command.</span>
<span class="comment-copy">@khelwood interesting, can you elaborate?</span>
<span class="comment-copy">@Chris_Rands I think the code in the question covers it pretty well. Because the <code>foo</code> definition contains a <code>yield</code>, it won't run like a normal function even if you call it like one <code>foo(prepare=True)</code>. I think this is part of the reason the <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">new coroutine syntax</a> puts a keyword at the start of the definition, so that the change in nature isn't hidden inside the body of the function.</span>
<span class="comment-copy">@khelwood Thanks, I see</span>
<span class="comment-copy">Nice, +1, so <code>bar(x)</code> is actually stored in a generator too, even though it's not explicitly <code>yield</code>ed?</span>
<span class="comment-copy">@Chris_Rands: Generators are initially paused; you start them with <code>.send(None)</code> and then they stop at each <code>yield</code>.</span>
