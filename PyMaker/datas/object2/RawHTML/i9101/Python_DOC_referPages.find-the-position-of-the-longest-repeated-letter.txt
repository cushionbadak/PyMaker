<div class="post-text" itemprop="text">
<p>I have a file that contains letters. I need to find the position of the longest repeated letters. For example, if the file contains <code>aaassdddffccsdddfgssfrsfspppppppppppddsfs</code>, I need a program that finds the position of <code>ppppppppppp</code>. I know that I need to use a <code>.index</code> function to find the location however I am stuck on the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>import itertools

mystr = 'aaassdddffccsdddfgssfrsfspppppppppppddsfs'

idx = 0
maxidx, maxlen = 0, 0
for _, group in itertools.groupby(mystr):
    grouplen = sum(1 for _ in group)
    if grouplen &gt; maxlen:
        maxidx, maxlen = idx, grouplen
    idx += grouplen
</code></pre>
<p>Gives the idx and the length of the longest identical substring:</p>
<pre><code>&gt;&gt;&gt; print(maxidx, maxlen)
25, 11

&gt;&gt;&gt; mystr[25:25+11]
'ppppppppppp'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're going to need to loop through the entire string.  Keep track of each new letter you come across as well as it's index and how long each sequence is.  Only store the max sequence</p>
<pre><code>s = 'aaassdddffccsdddfgssfrsfspppppppppppddsfs'

max_c = max_i = max_len = None
cur_c = cur_i = cur_len = None
for i, c in enumerate(s):
    if c != cur_c:
        if max_len is None or cur_len &gt; max_len:
            max_c, max_i, max_len = cur_c, cur_i, cur_len
        cur_c = c
        cur_i = i
        cur_len = 1
    else:
        cur_len += 1
else:
    # One last check when the loop completes
    if max_len is None or cur_len &gt; max_len:
        max_c, max_i, max_len = cur_c, cur_i, cur_len

print max_c, max_i, max_len
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an oneliner</p>
<pre><code>from itertools import groupby
from functools import reduce
[(k, next(g)[0], sum(1 for _ in g)+1) for k, g in groupby(enumerate(
    'aaassdddffccsdddfgssfrsfspppppppppppddsfs'), key=itemgetter(1))] 
</code></pre>
<p>The above generates (key, position, length). You can get the maximum length by
applying reduce</p>
<pre><code>from itertools import groupby
from functools import reduce
from operator import itemgetter
reduce(lambda x,y:x if x[2] &gt;= y[2] else y,
   ((k, next(g)[0], sum(1 for _ in g)+1) for k, g in groupby(enumerate(
    'aaassdddffccsdddfgssfrsfspppppppppppddsfs'), key=itemgetter(1))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick way of achieving this is to use a regex to match repeating characters with <code>(.)(\1+)</code>.  Then we loop over all those results using a generator comprehension and find the <code>max</code> according to the length (<code>key=len</code>).  Finally having found the largest string, we call <code>thestr.index()</code> to find where the longest repeated letter occurred:</p>
<pre><code>import re
txt = "aaassdddffccsdddfgssfrsfspppppppppppddsfs"
idx = txt.index(max((''.join(f) for f in re.findall(r"(.)(\1+)", txt)), key=len))
print(idx)
</code></pre>
<p>Here is the same code broken out into stages:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; txt = "aaassdddffccsdddfgssfrsfspppppppppppddsfs"
&gt;&gt;&gt; matches = list(''.join(f) for f in re.findall(r"(.)(\1+)", txt))
&gt;&gt;&gt; print(matches)
['aaa', 'ss', 'ddd', 'ff', 'cc', 'ddd', 'ss', 'ppppppppppp', 'dd']
&gt;&gt;&gt; longest = max(matches, key=len)
&gt;&gt;&gt; print(longest)
ppppppppppp
&gt;&gt;&gt; print(txt.index(longest))
25
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/40166522/find-longest-sequence-of-0s-in-the-integer-list">Find longest sequence of 0's in the integer list</a> (Simply convert your string to a list.)</span>
<span class="comment-copy">You should post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that shows us what you've tried, otherwise people will think you want us to do your homework for you. ;)</span>
<span class="comment-copy">Perfect duplicate of this. Probably is homework. <a href="http://stackoverflow.com/questions/2664150/counting-longest-occurence-of-repeated-sequence-in-python" title="counting longest occurence of repeated sequence in python">stackoverflow.com/questions/2664150/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/2664150/counting-longest-occurence-of-repeated-sequence-in-python">Counting longest occurence of repeated sequence in Python</a></span>
<span class="comment-copy">Also, there might be a chance of a tie.</span>
<span class="comment-copy">That's definitely a lot more readable than <code>max(((next(g)[0],sum(1 for _ in g))for _,g in groupby(enumerate(mystr),key=itemgetter(1))),key=itemgetter(1))[0]</code> ;)</span>
<span class="comment-copy">you can use max with key = itemgetter(2) instead of reduce</span>
