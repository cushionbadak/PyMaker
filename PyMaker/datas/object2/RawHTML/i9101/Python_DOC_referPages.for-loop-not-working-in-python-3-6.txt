<div class="post-text" itemprop="text">
<p>I've been working on combining 3 text files.</p>
<p>In the first file, I have pairs of strings (not int)</p>
<p>In the second file, I have definitions of strings from file 1</p>
<p>In the third, there is another definition for the strings from 1st file (also string)</p>
<p>My code is:</p>
<pre><code>for line1 in file1:
    wl1 = ''
    wl2 = ''
    kw1 = ''
    kw2 = ''
    dz1, dz2, none = line1.split(';')
    for line2 in file2:
        dz_wl,  wl, none = line2.split(';')
        if str(dz_wl) == str(dz1):
            wl1 = wl
        elif str(dz_wl) == str(dz2):
            wl2 = wl
        for line3 in file3:
            dz_kw, kw, none = line3.split(';')
            if str(dz_kw) == str(dz1):
                kw1 = kw
            elif str(dz_kw) == str(dz2):
                kw2 = kw
    print(dz1 + ';' + wl1 + ';' + kw1 + ';' + dz2 + ';' + wl2 + ';' + kw2 + '\n')
</code></pre>
<p>It seems to work, at least once, since it prints the proper result for the first line
The result:</p>
<blockquote>
<p>1;a;123;2;b;4124</p>
<p>2;;;3;;</p>
<p>4;;;5;;</p>
<p>6;;;7;;</p>
<p>6;;;8;;</p>
<p>9;;;1;;</p>
<p>7;;;1;;</p>
<p>7;;;3;;</p>
<p>6;;;4;;</p>
<p>7;;;10/2;;</p>
<p>10/2;;;10/1;;</p>
<p>12;;;13;;</p>
<p>11;;;3;;</p>
</blockquote>
<p>what to change, to make the code work for each line?</p>
<p>file1 contains:</p>
<blockquote>
<p>1;2;</p>
<p>2;3;</p>
<p>4;5;</p>
<p>6;7;</p>
<p>6;8;</p>
<p>9;1;</p>
<p>7;1;</p>
<p>7;3;</p>
<p>6;4;</p>
<p>7;10/2;</p>
<p>10/2;10/1;</p>
<p>12;13;</p>
<p>11;3;</p>
</blockquote>
<p>file2:</p>
<blockquote>
<p>1;a;</p>
<p>2;b;</p>
<p>3;c;</p>
<p>4;d;</p>
<p>5;e;</p>
<p>6;f;</p>
<p>7;g;</p>
<p>8;h;</p>
<p>9;i;</p>
<p>10/1;j;</p>
<p>10/2;k;</p>
<p>11;l;</p>
<p>12;m;</p>
<p>13;n;</p>
</blockquote>
<p>file3:</p>
<blockquote>
<p>1;123;</p>
<p>2;321;</p>
<p>3;554;</p>
<p>4;3313;</p>
<p>5;334;</p>
<p>6;564;</p>
<p>7;3234;</p>
<p>8;56345;</p>
<p>9;2346;</p>
<p>10/1;342;</p>
<p>10/2;553;</p>
<p>11;23;</p>
<p>12;453;</p>
<p>13;2234;</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to loop over a file object more than once. File objects are like long pieces of tape, and reading a line or chunk moves the <em>file pointer</em>, the position where a next read or write will take place. Once you have read the whole file, that pointer is at the very end of the file 'tape' and you can't read more from that position (there is no more data there), until the file pointer is moved again by other means.</p>
<p>You either need to open the file objects <em>each time you want to loop</em>, or rewind the file pointer to the start. You can do the latter with a  <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer"><code>file.seek(0)</code> call</a>.</p>
<p>However, reading from a file time and again is slow. Since all your are doing is using those extra files as <em>maps</em> (mapping one value in a row to another), you should really just read them into memory into a dictionary. That way you don't have to loop <strong>at all</strong>, and make your code much, much faster in the process.</p>
<p>You should also use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a>, rather than split yourself. The module handles reading and splitting much more efficiently, and correctly in the case of quotes and other corner cases:</p>
<pre><code>import csv
import sys

with open(filename2, 'r', newline='') as file2:
    reader = csv.reader(file2, delimiter=';')
    file2_map = dict(row[:2] for row in reader)

with open(filename3, 'r', newline='') as file3:
    reader = csv.reader(file3, delimiter=';')
    file3_map = dict(row[:2] for row in reader)

with open(filename1, 'r', newline='') as file1:
    reader = csv.reader(file1, delimiter=';')
    writer = csv.writer(sys.stdout, delimiter=';')
    for dz1, dz2, *remainder in reader:
        wl1 = file2_map.get(dz1, '')
        wl2 = file2_map.get(dz2, '')
        kw1 = file3_map.get(dz1, '')
        kw2 = file3_map.get(dz2, '')
        writer.writerow([dz1, dz2, wl1, wl2, kw1, kw2])
</code></pre>
<p>As you are also writing out semi-colon-separated information, you can use the same <code>csv</code> module to produce a <code>csv.writer()</code> object to write out the data again. In the above example I write out to <code>sys.stdout</code>, but you could write to any file you like.</p>
</div>
<span class="comment-copy">You can't loop over a file object multiple times without 'rewinding' the file object back to the start with <code>file.seek(0)</code>. However, you'd probably be better off reading the files into memory entirely before looping.</span>
<span class="comment-copy">You are re-inventing the character-separated-file reading wheel here. Use the <code>csv</code> module; <code>reader = csv.reader(fileobj, delimiter=';')</code> would give you complete parsed rows. <code>all_rows = list(reader)</code> would read that into memory.</span>
<span class="comment-copy">can you post, how would you change my code? I am fairly new to python</span>
<span class="comment-copy">I don't understand how the first line in your result had been created. It's probably easiest just to read all files into a list of strings each and use indexing to extract the relevant data for starters.</span>
<span class="comment-copy">thanks a lot! works perfectly</span>
