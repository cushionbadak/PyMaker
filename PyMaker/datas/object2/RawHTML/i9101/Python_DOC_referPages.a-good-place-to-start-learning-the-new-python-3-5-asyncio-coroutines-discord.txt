<div class="post-text" itemprop="text">
<p>So, I don't seem to find any good tutorial on using the new asyncio module in python (async, await, etc.). Also, from all the tutorials I've watched, the concept is poorly described and I don't seem to be able to wrap my head around the idea of coroutines. I mean, the idea behind the concept is not that hard, but there's not a single place where I can learn exactly what the coroutines can and cannot do, and how to use them.</p>
<p>For example, I have written a small class called YouTubeAPI for a Discord BOT that I'm building at the moment. The Discord.py library uses asyncio for all its functions, but my class doesn't. My class (YouTubeAPI) is made for the sole purpose of retrieving data from the YouTube Data API V3 about latest videos posted by a user. I'm actually trying to build a BOT that keeps me up-to-date on all the videos someone is posting.</p>
<p>But for the BOT to be working I need to make an <code>update()</code> function that gets all the videos regularly so that I can get the latest video. The problem is that the update function needs to be wrapped in a <code>while True</code> loop (or something similar), so that I can keep the list up-to-date. If I build an infinite loop then I'm gonna run into a problem with the BOT (making the BOT crash and unusable). </p>
<p>So, I thought maybe I could learn the new asyncio module and solve the problem that way. Sadly I find nothing.</p>
<p>Here's some code with all the API keys removed, so that you can see my problem easier:</p>
<pre><code>from Api_Test import YoutubeAPI
import discord
import asyncio

YoutubeName = 'Vsauce'
GOOGLE_API = 'API KEY'

print('Collecting YouTube Data.')
api = YoutubeAPI(GOOGLE_API, YoutubeName) # create object that will get all info for the name 'Vsauce'
print('YouTube Data collected succesfully.')
print('Starting bot.')

def getLastVideo():
    return api.videosData[0] # api.videosData looks like: [[title, link],[title, link],[title, link],]

client = discord.Client()

@client.event
async def on_ready():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')
    await client.send_message('Now testing: Last {} videos!'.format(YoutubeName))


#While Loop that keeps the api.videosData up-to-date and runs "await client.send_message('new video: title + ink')" if new video found in the list

client.run('Discord BOT token')
</code></pre>
<p>I am extremely sorry if this post sounds vaguely explained, but I have totally no idea on how to use asyncio or something similar and I find myself in a place where I find almost no documentation on this new concept.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>ensure_future()</code> to run your <code>while</code> loop.
Here the loop starts when <code>on_ready</code> is called and runs until the bot is shut down</p>
<pre><code>@client.event
async def on_ready():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')
    await client.send_message('Now testing: Last {} videos!'.format(YoutubeName))

    asyncio.ensure_future(update_data(), client.loop) # Starts the infinite loop when the bot starts

async def update_data():
    while True:
        # Do the things you need to do in this loop
        await asyncio.sleep(1) # sleep for 1 second

client.run('Discord BOT token')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can run a function (like something to retrieve your data from Youtube) via <code>asyncio.ensure_future</code> in the background</p>
<p>An example from my own bot:</p>
<pre><code>games = [
    'try :help',
    'with Atom.io',
    'with Python',
    'HuniePop'
]

async def randomGame():
    while True:
        await bot.change_presence(game=discord.Game(name=random.choice(games)))
        await asyncio.sleep(10*60) # 10 Minutes
</code></pre>
<p>and</p>
<pre><code>@client.event
async def on_ready():
    print('Logged in as')
    print('Bot-Name: {}'.format(bot.user.name))
    print('Bot-ID: {}'.format(bot.user.id))
    ...
    bot.gamesLoop = asyncio.ensure_future(randomGame())
</code></pre>
<p>More informations about this can be found here: <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-task.html</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>But where do you actually run the client.run () function? Because you can't run it in the loop. That way you wojld make the bot crash. Or am I wrong?</p>
</blockquote>
<pre><code>client.run("token")
</code></pre>
<p>is always on the last line of a Discord.PY bot, as soon as the function takes place the bot is constantly running until a client.close() function takes place, or the environment is closed.</p>
</div>
<span class="comment-copy">This might help: <a href="http://asyncio.readthedocs.io/en/latest/" rel="nofollow noreferrer">asyncio user documentation</a>.</span>
<span class="comment-copy">Try <a href="https://stackoverflow.com/questions/41785617/python-asyncio-task-ordering" title="python asyncio task ordering">stackoverflow.com/questions/41785617/…</a>, <a href="http://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/" rel="nofollow noreferrer">lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio</a>​, and <a href="https://community.nitrous.io/tutorials/asynchronous-programming-with-python-3" rel="nofollow noreferrer">community.nitrous.io/tutorials/…</a>.</span>
<span class="comment-copy">But where do you actually run the client.run () function? Because you can't run it in the loop. That way you wojld make the bot crash. Or am I wrong?</span>
