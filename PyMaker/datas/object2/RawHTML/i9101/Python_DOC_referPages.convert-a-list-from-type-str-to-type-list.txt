<div class="post-text" itemprop="text">
<p>It must be simple, but I don't know it:</p>
<p>I've got a <em>file.json</em> with this content</p>
<pre><code>[{u'key': u'value1'},{u'key': u'value2'}]
</code></pre>
<p>and imported it as <code>data</code></p>
<pre><code>with open(file.json) as fd:
        data = fd.read()
</code></pre>
<p>I'm quite happy that this works</p>
<pre><code>&gt;&gt;&gt; print (data)
[{u'key': u'value1'},{u'key': u'value2'}]
</code></pre>
<p>But unfortunately <code>data</code> is now converted as <code>str</code></p>
<pre><code>&gt;&gt;&gt; print(type(data))
&lt;type 'str'&gt;
</code></pre>
<p>So I can't use <code>data</code> to do things like deleting items.</p>
<p>How do I convert <code>data</code> to a normal list of dicts? (<code>&lt;type 'list'&gt;</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use the file method <code>.read()</code>, you always get a string. You'd have to parse it yourself, but fortunately, Python has a <a href="http://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code> module</a> that does all the parsing for you. It even reads the file:</p>
<pre><code>import json
with open(file.json) as fd:
    data = json.load(fd)
</code></pre>
<p>But, as Stefan has pointed out, your file isn't valid JSON - it rather looks like the <code>repr()</code> output of a Python object. In that case, it's nearly as simple:</p>
<pre><code>import ast
with open(file.json) as fd:
    data = ast.literal_eval(fd.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very simple with json library.</p>
<pre><code>import json
obj = json.loads(json_string) 
</code></pre>
<p>Deserialize json_string (json_string is str or unicode instance containing a JSON document) to a Python object (dixt in our case).</p>
<p><strong>EDIT:</strong></p>
<p>As Stefan mention, this is not a valid json(it looks like a list) and therefore you can see Tim's answer.</p>
</div>
<span class="comment-copy">Given that you know the file is JSON data, why not use <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">the <code>json</code> module</a>?</span>
<span class="comment-copy">That's not JSON. Where did you get that?</span>
<span class="comment-copy">Have you tried it with their data? It doesn't work for me, as their data isn't valid JSON.</span>
<span class="comment-copy">@StefanPochmann: Indeed, it's not valid JSON. Thanks for noticing.</span>
<span class="comment-copy">@Stefan You're probably right. OP opened file as a string, and printed it (as a string, not JSON), so you're saying the unicode markers are in the file</span>
<span class="comment-copy">@cricket_007 Yes, and also the single quotes which should be double quotes.</span>
<span class="comment-copy">@Stefan I got this strange file by myself. I converted a csv to a list named <code>result</code> and saved it with <code>file.write(str(result))</code>. With your hints I solved my problem by not creating it. I just saved my list with <code>json.dump(result,file)</code> and now I can import it like @Tim describes (<code>json.load(file)</code>). Thanks a lot to all!</span>
<span class="comment-copy">You can load the file directly, no need for the string</span>
<span class="comment-copy">You right, but Tim already wrote this answer so i don't want to duplicate his answer. @cricket_007</span>
<span class="comment-copy">Have you tried it with their string? It doesn't work for me, as their data isn't valid JSON.</span>
<span class="comment-copy">@StefanPochmann , You right, i've added a code that support the string the OP has. Thanks !</span>
<span class="comment-copy">@omri_saadon That new code doesn't work for me, just puts the string as a whole into a weird array (doesn't even allow accessing with <code>...[0]</code>). Also, you changed their data, removed the <code>u</code> prefixes.</span>
