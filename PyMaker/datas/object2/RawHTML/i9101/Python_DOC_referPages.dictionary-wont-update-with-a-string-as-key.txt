<div class="post-text" itemprop="text">
<p>I'm trying to update a dictionary using a function returning a tuple where the first element is a string.</p>
<pre><code>&gt;&gt;&gt; def t():
...     return 'ABC', 123
</code></pre>
<p>However the <a href="https://docs.python.org/3/library/stdtypes.html?#dict.update" rel="nofollow noreferrer"><code>dict.update</code></a> function does not quite like it.</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.update(t())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: dictionary update sequence element #0 has length 3; 2 is required
</code></pre>
<p>I can also try dictionary comprehension and get the same unexpected result.</p>
<pre><code>&gt;&gt;&gt; d.update({k: v for k, v in t()})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
ValueError: too many values to unpack (expected 2)
</code></pre>
<p>The only working way is to first save returned value.</p>
<pre><code>&gt;&gt;&gt; x = t()
&gt;&gt;&gt; d.update({x[0]: x[1]})
&gt;&gt;&gt; d
{'ABC': 123}
</code></pre>
<p>How to explain this?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html?#dict.update">docs</a></p>
<blockquote>
<p><code>update()</code> accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two). If keyword arguments are specified, the dictionary is then updated with those key/value pairs: <code>d.update(red=1, blue=2)</code>.</p>
</blockquote>
<p>For example:</p>
<pre><code>In [1]: d = {}

In [2]: def t(): return [('ABC', '123')]

In [3]: d.update(t())

In [4]: d
Out[4]: {'ABC': '123'}

In [5]: d2 = {}

In [6]: def t2(): return {'ABC': '123'}

In [7]: d2.update(t2())

In [8]: d2
Out[8]: {'ABC': '123'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even more simply, change <code>t()</code> to return a <code>{key: value}</code> as such:</p>
<pre><code>def t():
    return {'ABC': 123}
</code></pre>
<p>Should do the trick for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Jack's answer is the one.</p>
<p>In both your failed examples, you're using <strong>a pair</strong> instead of <strong>a sequence of pairs</strong>.</p>
<p>Also, just to add some sauce, here are two more ways to do it:</p>
<pre><code>def t():
    return 'ABC', 123
d = {}
d.update([ t() ])
d
=&gt; {'ABC': 123}
d = {}
d.__setitem__(*t())
d
=&gt; {'ABC': 123}
</code></pre>
</div>
<span class="comment-copy">My misunderstanding was coming from the fact that an iterable of length two (i.e <code>(a, b)</code>) would make it. While in fact the <code>update</code> function expects an iterable of iterables of length two (i.e <code>[(a, b)]</code>).</span>
