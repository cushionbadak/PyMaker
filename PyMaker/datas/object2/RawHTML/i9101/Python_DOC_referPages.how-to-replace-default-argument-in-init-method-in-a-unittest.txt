<div class="post-text" itemprop="text">
<p>I have a class under test that exposes an argument in <code>__init__</code> just for testing.  It looks like this</p>
<pre><code>class MyClass(object):
  def __init__(self, start_time=None):
    if start_time is None:
      start_time = time.time()
</code></pre>
<p>In my test, I want to pass in start_time using a fake time, so I get a time in <code>setUp()</code> first and then pass it to every test method.</p>
<pre><code>class MyclassTest(TestCase):
  def setUp(self):
    self.fake_start_time = time.time()

  def test_one(self):
    x = MyClass(start_time=self.fake_start_time)
    ...

  def test_two(self):
    x = MyClass(start_time=self.fake_start_time)
    ...
</code></pre>
<p>All this works, but I'm wondering if there's a way for me to avoid having to write <code>start_time=self.fake_start_time</code> in every single test.  Can I somehow replace the <code>__init__</code> method's default argument in <code>setUp()</code>?</p>
<p>I figured out an ugly way to do it, but was wondering if there's a more standard approach, possibly based on <code>mock.patch</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Create an instance of the class in <code>setUp</code>:</p>
<pre><code>def setUp(self)
    self.fake_start_time = time.time()
    self.x = MyClass(start_time=self.fake_start_time)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> can be used to pre-bind arguments. So in this case, you can bind the time to the class constructor and then use the bound constructor without passing additional arguments:</p>
<pre><code>from functools import partial

class MyclassTest(TestCase):
  def setUp(self):
    # Feel free to use a shorter name
    self.FakeTimeMyClass = partial(MyClass, time.time())

  def test_one(self):
    x = self.FakeTimeMyClass()
    ...

  def test_two(self):
    x = self.FakeTimeMyClass()
    ...
</code></pre>
</div>
<span class="comment-copy">This is cool because unlike my solution it allows adding per-test arguments to instantiation.  Nice!</span>
