<div class="post-text" itemprop="text">
<p>I have been using osmnx for a project and have attempted to export the resulting dicts to csv using Python 3 using the following code:</p>
<pre><code>with open('dict.csv', 'wb') as csv_file:
    writer = csv.writer(csv_file)
    for key, value in mydict.items():
       writer.writerow([key, value])
</code></pre>
<p>Unfortunately, I receive the error:</p>
<pre><code>a bytes-like object is required, not 'str'
</code></pre>
<p>The code that is generating the dict is:</p>
<pre><code>mydict = {num:list(streets_per_node.values()).count(num) for num in range(max(streets_per_node.values()) + 1)}
</code></pre>
<p>I have tried to hunt down the solution, but I fear either the answer is either too simple or too unusual to find in typical tutorials.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>open('dict.csv', 'wb')</code> tells Python you want to open the file for writing <em>bytes</em>, not text, which is why you get that error. Just omit the <code>b</code> and it should work. </p>
<p>See: <a href="https://docs.python.org/3/library/csv.html#examples" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html#examples</a></p>
</div>
<span class="comment-copy">What is <code>streets_per_node.values()</code>?</span>
<span class="comment-copy">@MooingRawr That is a result from a series of osmnx calculations. In short, it is a count generated from a networkx multidigraph. The code is long, but the pertinent code that generates the final dict is:  <code>edges = non_self_loop_edges + self_loop_edges</code> <code>edges_flat = list(chain.from_iterable(edges))</code> <code>counts = Counter(edges_flat)</code> <code>streets_per_node = {node:counts[node] for node in nodes}</code>  Edges are a graph theory term that, in this case, refers to streets, and nodes are intersections. Full code starts on line 330 here: <a href="https://github.com/gboeing/osmnx/blob/master/osmnx/stats.py" rel="nofollow noreferrer">github.com/gboeing/osmnx/blob/master/osmnx/stats.py</a></span>
<span class="comment-copy">It's a good idea to provide <code>encoding</code> too to ensure file encoding is consistent across platforms (Pre Py3.6)</span>
<span class="comment-copy">@tzaman That was it. It was the too-simple scenario; thanks.</span>
