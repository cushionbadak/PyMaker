<div class="post-text" itemprop="text">
<p>I need to add some features to a graphics widget in a form I created using the Qt Designer. </p>
<p>For example I would normally do something like this:</p>
<pre><code>class custom_gv(QGraphicsView):
    def __init__(self):
        super().__init__()

    def zoom(self):
        # custom code here
</code></pre>
<p>But in this case the graphics view is a part of the window I made in Qt Designer. I know you can use the "promote to" feature in Qt designer but I don't know how to utilise that in code, especially considering that I use this method to use Qt Designer windows:</p>
<pre><code>from PyQt5.uic import loadUiType

custom_window = loadUiType('ui.ui')

class Window(QMainWindow, custom_window):
    def __init__(self):
        QMainWindow.__init__(self)
        custom_window.__init__(self)
        self.setupUi(self)
</code></pre>
<p>So how would I go about customising the code of the graphics view in my window when I use Qt Designer?</p>
</div>
<div class="post-text" itemprop="text">
<p>The most common way to solve this is by using <a href="https://doc.qt.io/qt-5/designer-using-custom-widgets.html#promoting-widgets" rel="nofollow noreferrer">widget promotion</a>. This will allow you to replace a widget defined in Qt Designer with your own custom class. The steps for doing this are as follows:</p>
<p>In Qt Designer, select the <code>QGraphicsView</code> you want to replace, then right-click it and select <em>Promote to...</em> . In the dialog, set <em>Promoted class name</em> to "custom_gv", and set <em>Header file</em> to the python import path for the module that contains this class (e.g. "mypkg.widgets"). Then click <em>Add</em>, and <em>Promote</em>, and you will see the class change from "QGraphicsView" to "custom_gv" in the Object Inspector pane.</p>
<p>When the Qt Designer <code>ui</code> file is converted into PyQt code, it will automatically add an import statement like this:</p>
<pre><code>from mypkg.widgets import custom_gv
</code></pre>
<p>and then in the converted code it will replace something like this:</p>
<pre><code>    self.graphicsView = QtWidgets.QGraphicsView(MainWindow)
</code></pre>
<p>with this:</p>
<pre><code>    self.graphicsView = custom_gv(MainWindow)
</code></pre>
<p>So the code in the <code>ui</code> file knows nothing about the custom class: it's just a name that is imported from elsewhere. That means you are completely free to write the custom class in any way you like.</p>
<p>In PyQt, this mechanism works in the same way with <code>pyuic</code> as it does with the <code>uic</code> module. The <code>loadUi</code> and <code>loadUiType</code> functions generate exactly the same code as <code>pyuic</code> does. The only difference is that the <code>pyuic</code> tool writes the generated code to a file, whereas the <code>uic</code> module loads it directly via <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a>.</p>
</div>
<span class="comment-copy">Promoting widgets is <a href="http://stackoverflow.com/a/22543079/984421">quite simple</a>. What specifically don't you understand about it?</span>
<span class="comment-copy">How I use it in PyQt when using the LoadUiType method instead of the convert to code first method</span>
<span class="comment-copy">It works in exactly the same way.</span>
<span class="comment-copy">How do I edit the promoted class though? This may be because I don't really understand how tloadUiType works</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/42074373/pyqt-promoting-a-widget-in-qt-designer-and-using-it-with-the-loaduitype-function">PyQt promoting a widget in Qt Designer and using it with the loadUiType function</a></span>
