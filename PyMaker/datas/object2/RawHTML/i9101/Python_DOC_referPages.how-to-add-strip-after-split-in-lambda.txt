<div class="post-text" itemprop="text">
<p>How can strip the key value after a split inside of lambda ?</p>
<pre><code>   l = ["   key1  :      value1  ", "   key2  :      value2 ", "  key3 "]
   d = {}
   d = dict(map(lambda s : s.split(':'), l))
   print d

   # print d['key2'] should work
</code></pre>
<p>The result has spaces :</p>
<pre><code>[['   key1  ', '      value1  '], ['   key2  ', '      value2 '], ['  key3 ']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can strip each element after splitting:</p>
<pre><code>map(lambda s: [p.strip() for p in s.split(':')], l)
</code></pre>
<p>Demo</p>
<pre><code>&gt;&gt;&gt; l = ["   key1  :      value1  ", "   key2  :      value2 ", "  key3 "]
&gt;&gt;&gt; map(lambda s: [p.strip() for p in s.split(':')], l)
[['key1', 'value1'], ['key2', 'value2'], ['key3']]
</code></pre>
<p>I used a list comprehension rather than a <code>map()</code> call there; it's a little easier on the eye.</p>
<p>You can make the whole thing a nested list comprehension too:</p>
<pre><code>[[p.strip() for p in s.split(':')] for s in l]
</code></pre>
<p>Now, if you wanted to produce a dictionary, you'll have to filter out any entry that is not a key-value pair:</p>
<pre><code>dict((p.strip() for p in s.split(':')) for s in l if ':' in s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you want to create a <code>dict</code> from that list. Note than <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>, while similar in name to a Java <code>Map</code>, does not produce a <code>dict</code>. Instead, you can feed the result of the <code>map</code> or list comprehension into the <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow noreferrer"><code>dict</code></a> builtin function. Note, however, that there is no value for <code>key3</code>, so you might have to filter the elements before.</p>
<pre><code>&gt;&gt;&gt; l = ["   key1  :      value1  ", "   key2  :      value2 ", "  key3 "]
&gt;&gt;&gt; pairs = [[p.strip() for p in s.split(':')] for s in l]
&gt;&gt;&gt; dict(p for p in pairs if len(p) == 2)
{'key2': 'value2', 'key1': 'value1'}
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer"><code>str.partition</code></a>:</p>
<pre><code>&gt;&gt;&gt; triplets = [[p.strip() for p in s.partition(":")] for s in l]
&gt;&gt;&gt; dict((p[0], p[2]) for p in triplets)
{'key3': '', 'key2': 'value2', 'key1': 'value1'}
</code></pre>
<p>You could also use a dict comprehension, and optionally provide a default for missing values.</p>
<pre><code>&gt;&gt;&gt; {head: tail or "default" for head, _, tail in triplets}
{'key3': 'default', 'key2': 'value2', 'key1': 'value1'}
</code></pre>
</div>
<span class="comment-copy">Can't you call <code>strip</code> before <code>split</code>ting?</span>
<span class="comment-copy">Why do you initialize <code>d</code> as <code>{}</code>? Are you aware that <code>map</code> does <i>not</i> produce a "map" in the sense of a Java <code>Map</code> or Python <code>dict</code>?</span>
<span class="comment-copy">If you want a <code>dict</code>, you could pass the results to the <code>dict</code> function, i.e. <code>dict(map(...))</code> or dict([[...]...])<code>, but note that there is no value to </code>key3`</span>
<span class="comment-copy">I want after the split</span>
<span class="comment-copy">@Victor: but your input examples don't suffer from whitespace around the <code>:</code>. You'll get <i>exactly the output you need</i> with this.</span>
<span class="comment-copy">oops updated the quenstion</span>
<span class="comment-copy">I like the second one where  you used p, but i still get error : NameError: global name 'split' is not defined</span>
<span class="comment-copy">cool worked : d= map(lambda p: [p.strip() for p in p.split(':')], l)</span>
