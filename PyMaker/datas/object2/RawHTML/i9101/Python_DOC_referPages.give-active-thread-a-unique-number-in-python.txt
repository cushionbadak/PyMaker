<div class="post-text" itemprop="text">
<p>I'm multithreading an API and I want to give each thread a unique ID so that I can process the response after the program is finished based on the indices.</p>
<p>Here is the code that I'm currently using. The problem is that <code>.getName()</code> is not unique. When the thread is killed, the identifier can be recycled.</p>
<p>Any solutions to this? </p>
<pre><code>def get_Data(q):
send = q.get()
while True:
    api = op.API()
    api_response['Thread_id'].append(threading.currentThread().getName())
    response_api = api.Get(send, "json")
    api_response['query_response'].append(response_api)
    q.task_done()

def threading_0SM(request):
    q = Queue(maxsize=0)
    if len(chunk_request)&lt;=16:
         num_threads = len(request)
    else: num_threads = 16
    for i in range(num_threads):
        worker = Thread(target=get_Data, args=(q,))
        worker.setDaemon(True)
        worker.start()
    for place in request:
        q.put(place)
    q.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can set a thread name when creating the thread. I like to use <code>itertools.count</code> to make program-unique numbers because it is is thread safe. Here I use it to make unique thread names. You can change the format to meet your needs.</p>
<pre><code>import itertools

# returns unique number on each next(unique_id)
unique_id = itertools.count()

def unique_thread_id():
    return "mythread-" + str(next(unique_id))

def get_Data(q):
    send = q.get()
    while True:
        api = op.API()
        api_response['Thread_id'].append(threading.currentThread().getName())
        response_api = api.Get(send, "json")
        api_response['query_response'].append(response_api)
    q.task_done()

def threading_0SM(request):
    q = Queue(maxsize=0)
    if len(chunk_request)&lt;=16:
         num_threads = len(request)
    else: 
        num_threads = 16
    for i in range(num_threads):
        worker = Thread(target=get_Data, name=unique_thread_id(), args=(q,))
        worker.setDaemon(True)
        worker.start()
    for place in request:
        q.put(place)
    q.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to use worker.get_ident()</p>
<p><a href="https://docs.python.org/3/library/threading.html#threading.Thread.ident" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html#threading.Thread.ident</a></p>
</div>
<span class="comment-copy">Can you fix your indentation so the program reads a little easier? You seem to have an infinite loop in the <code>while</code>....</span>
<span class="comment-copy">Same issue right?  "ident      The ‘thread identifier’ of this thread or None if the thread has not been started. This is a nonzero integer. See the _thread.get_ident() function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited."</span>
<span class="comment-copy">Is there a reason why you need to use the thread id? Maybe you should create your own unique ids for each API response. Another alternative I can think of is put the stuff you need to be processed in a queue, and pop off items as they come in.</span>
