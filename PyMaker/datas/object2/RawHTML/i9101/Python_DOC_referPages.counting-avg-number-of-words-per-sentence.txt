<div class="post-text" itemprop="text">
<p>I'm having a bit of trouble trying to count the number of words per sentence. For my case, I'm assuming sentences only end with either <code>"!"</code>, <code>"?"</code>, or <code>"."</code></p>
<p>I have a list that looks like this:</p>
<pre><code>["Hey, "!", "How", "are", "you", "?", "I", "would", "like", "a", "sandwich", "."]
</code></pre>
<p>For the example above, the calculation would be <code>1 + 3 + 5 / 3</code>. I'm having a hard time achieving this, though! Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>words = ["Hey", "!", "How", "are", "you", "?", "I", "would", "like", "a", "sandwich", "."]

sentences = [[]]
ends = set(".?!")
for word in words:
    if word in ends: sentences.append([])
    else: sentences[-1].append(word)

if sentences[0]:
    if not sentences[-1]: sentences.pop()
    print("average sentence length:", sum(len(s) for s in sentences)/len(sentences))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution:</p>
<pre><code>mylist = ["Hey", "!", "How", "are", "you", "?", "I", "would", "like", "a", "sandwich", "."]
terminals = set([".", "?", "!"]) # sets are efficient for "membership" tests
terminal_count = 0

for item in mylist:
    if item in terminals: # here is our membership test
        terminal_count += 1

avg = (len(mylist) - terminal_count)  / float(terminal_count)
</code></pre>
<p>This assumes you only care about getting the average, not the individual counts per sentence.</p>
<p>If you'd like to get a little fancy, you can replace the <code>for</code> loop with something like this:</p>
<pre><code>terminal_count = sum(1 for item in mylist if item in terminals)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short solution using <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">re.split()</a> and <a href="https://docs.python.org/3/library/functions.html?highlight=sum#sum" rel="nofollow noreferrer">sum()</a> functions:</p>
<pre><code>import re
s = "Hey ! How are you ? I would like a sandwich ."
parts = [len(l.split()) for l in re.split(r'[?!.]', s) if l.strip()]

print(sum(parts)/len(parts))
</code></pre>
<p>The output:</p>
<pre><code>3.0
</code></pre>
<hr/>
<p>In case if there could be only a list of words as input:</p>
<pre><code>import re
s = ["Hey", "!", "How", "are", "you", "?", "I", "would", "like", "a", "sandwich", "."]
parts = [len(l.split()) for l in re.split(r'[?!.]', ' '.join(s)) if l.strip()]

print(sum(parts)/len(parts))   # 3.0
</code></pre>
</div>
<span class="comment-copy">That's pretty clever. It would be a bit better to store the terminals in a <code>set</code> before the loop. Or if you think that's overkill, then you could at least write the condition simpler as <code>if item in ".!?"</code></span>
<span class="comment-copy">@janos Good call on pulling the terminals out into their own constant. I'd prefer a list over a string, for clarity's sake.</span>
<span class="comment-copy">Why a <code>list</code> why not a <code>set</code>?</span>
<span class="comment-copy">@jonas You've educated me! I'm reading that sets are much more efficient when finding <code>x in y</code>, so I'll update accordingly.</span>
<span class="comment-copy">The second one worked really well! I like the use of regular expressions, as I'm working on an NLP project of sorts.</span>
