<div class="post-text" itemprop="text">
<p>I have a Python class that performs a bunch of calculations. The class supports various calculations, each of which might or might not actually get called. Here is an example:</p>
<pre><code>class MyCalc(object):
    def __init__(user, query_date, award):
        self.user = user
        self.query_date = query_date
        self.award = award

    def balance(self):  # this can be subtracted
        return self.award.balance

    def value(self):  # this can be subtracted
        if self.user.award_date &gt; self.query_date:
            return self.award.value * self.user.multiplier
        return 0

    def has_multiple_awards(self):  # this can not be subtracted
        return self.user.awards &gt; 2

    def as_pandas_series(self):
        return pd.Series({'balance': self.balance(),
              'value': self.value(),
              'query_date': self.query_date,
              'award': self.award,
              'user': self.user})
</code></pre>
<p>What I want is to calculate the difference between two instances of the class. I've come up with the following approach, but not sure if this method has any drawbacks or maybe there's a better way?</p>
<pre><code>class Diff(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __getattr__(self, attr):
        getter = operator.attrgetter(attr)
        closing = getter(self.a)()
        opening = getter(self.b)()
        return closing - opening

a = MyCalc()
b = MyCalc()
diff = Diff(a, b)
print(diff.calc_x)  # calculate a.calc_x() - b.calc_x()
</code></pre>
<p>Alternatively I can add a decorator and don't use the Diff class:</p>
<pre><code>def differance(func):
    def func_wrapper(self):
        return func(self) - func(self.b)
    return func_wrapper


class MyCalc(object):
    @difference
    def calc_x(self):
        return some_calc

    @difference
    def calc_y(self):
        return some_calc
</code></pre>
<p>Any feedback will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>Diff</code> class looks fine to me, but I'm still undecided whether this is Pythonic or not. ;) I don't see any major drawbacks, but it can be made more efficient.</p>
<p>Here's an alternative implementation of the <code>Diff</code> class. It's a little more efficient since it doesn't have to do a lookup and two calls of <code>operator.attrgetter</code> on each <code>__getattr__</code> call. Instead, it caches the attribute accessing functions using <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> and the built-in <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> function.</p>
<p>I've also implemented a simple <code>MyCalc</code> class for testing purposes.</p>
<pre><code>from functools import partial

class MyCalc(object):
    def __init__(self, u, v):
        self.u = u
        self.v = v

    def calc_x(self):
        return self.u + self.v

    def calc_y(self):
        return self.u * self.v

class Diff(object):
    def __init__(self, a, b):
        self.geta = partial(getattr, a)
        self.getb = partial(getattr, b)

    def __getattr__(self, attr):
        closing = self.geta(attr)()
        opening = self.getb(attr)()
        return closing - opening


a = MyCalc(10, 20)
b = MyCalc(2, 3)

diff = Diff(a, b)
print(diff.calc_x)
print(diff.calc_y)

a.u, a.v = 30, 40
b.u, b.v = 4, 7
print(diff.calc_x)
print(diff.calc_y)
</code></pre>
<p><strong>output</strong></p>
<pre><code>25
194
59
1172
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import operator

class MyCalc(object):
    def __init__(self, x=0, y=0, *args):
      self.x = x
      self.y = y

    def calc_x(self):
        return self.x * 2

    def calc_y(self):  # There's about 15 of these calculations
        return self.y / 2

class Diff(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def _diff(self, func, *args):
      getter = operator.attrgetter(func)
      closing = getter(self.a)()
      opening = getter(self.b)()
      return closing - opening


a = MyCalc(50)
b = MyCalc(100)

diff = Diff(a, b)

ret =  diff._diff("calc_x")
print ret


&gt;&gt;&gt; -100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You say your class supports about 15 calculations, all returning numeric values, some of which might or might not get called.
Cleanest and most Pythonic seems to be to have one <code>calc()</code> method returning a vector, i.e. a NumPy array (or Pandas Series or DataFrame). Then the client code can simply do vector subtraction: <code>ab_diff = a.calc() - b.calc()</code>. There seems no need to reinvent the wheel on np.array, just based on what you've described.</p>
<p>If some of those calculations are rarely-called and/or expensive to compute, then you could refactor into <code>calc()</code> and <code>calc_rare()</code>. Or, you could pass in kwargs to <code>calc(..., compute_latlong=False, compute_expensive_stuff=False)</code>. You can return <code>np.NaN</code> as default values for expensive stuff you don't compute by default, to keep your vector length constant.</p>
<pre><code>import numpy as np
#import pandas as pd

class MyCalc(object):
    def __init__(self, ...): ...

   # (You can either have 15 calculation methods, or use properties.
   #  It depends on whether any of these quantities are interrelated
   #  or have shared dependencies, especially expensive ones.)
    def calc_q(self): ...
    def calc_r(self): ...
    def calc_s(self): ...
    ...
    def calc_y(self): ...
    def calc_z(self): ...

    # One main calc() method for the client. (You might hide the
    # other calc_* methods as _calc_*, or else in properties.)
    def calc(self):
        return np.array([ calc_q(), calc_r(), calc_s(),
            ... calc_y(), calc_z() ]) # Refactor this as you see fit

if __name__ == '__main__':
    # Client is as simple as this
    a = MyCalc(...)
    b = MyCalc(...)
    ab_diff = a.calc() - b.calc()
</code></pre>
</div>
<span class="comment-copy">Interesting concept. There's a way to make the first way slightly more efficient, but I think what you have is fine. I don't quite get the decorator version. It looks like you need to store the second instance of MyCalc inside the first one as its <code>.b</code> attribute, which seems a bit messy.</span>
<span class="comment-copy">Yes, you are correct, with the decorator version I do need the second instance of MyCalc which as you said is a bit messy</span>
<span class="comment-copy">When you say <i>"the class performs a bunch of calculations"</i>, why not have it simply return a list (or NumPy array) of values? Then you could simply do vector subtraction in NumPy. Also seems more Pythonic. Do you mean <i>"all the calculations are each called in sequence"</i>, or more like <i>"the class supports various calculations, each of which might or might not actually get called on a particular instance"</i>? It helps if you give us a little context about what the operations are, how they relate to each other, whether they get called in sequence...</span>
<span class="comment-copy">@smci I've updated the question. Yes, thanks for the suggestion. Numpy/Pandas is another option that I could consider.</span>
<span class="comment-copy">But you need to tell us if your use-case is compatible with having one big <code>calc()</code> method which returns a (NumPy) vector <code>[p,q,r,s,t,u,v,w,x,y,z]</code>. Is the vector length fixed? Are any of those calculations rarely-used or expensive to compute? Are they all float, double, integer, long or various? would it be numerically bad if the user simply did one big vector subtraction<code>ab_diff = a.calc() - b.calc()</code> , or cleaner? You're not telling us any context at all.</span>
<span class="comment-copy">Great thanks, I didn't know about 'partial'</span>
<span class="comment-copy">@Johan: My pleasure! <code>partial</code> has some drawbacks, but it's quite efficient. I've added docs links for <code>partial</code> and <code>getattr</code> to my answer...</span>
<span class="comment-copy">As shown in the question, Johan wants to use a simple attribute access: <code>diff.calc_x</code>; the <code>diff._diff("calc_x")</code> call in your code is a bit cumbersome in comparison.</span>
<span class="comment-copy">I've updated my question with more details. This is actually a nice approach. Calculating the values are not computationally expensive, so generating the numpy array is a good idea</span>
<span class="comment-copy">Hmm, so they're just a simple bunch of numerical (small non-negative integer) values. In that case I'd argue that it's verging on 'OO abuse' to return a vector representation that doesn't have much meaning. Or at least, I'd call the method <code>as_vector()</code>, not <code>calc()</code>. Really I think you're trying to compute a <b>custom distance metric</b> between two objects. Have a look at <a href="https://docs.scipy.org/doc/scipy/reference/spatial.distance.html" rel="nofollow noreferrer">scipy.spatial.distance</a>, <a href="http://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html" rel="nofollow noreferrer">sklearn.neighbors.DistanceMetric</a> and so on..</span>
<span class="comment-copy">Basically what I'm trying to calculate is the following: The Calc class as it is now is working for a single query_date. It calculates balances for a user among other things. I then have another calc class at another date and I want the change in balance between the dates. Things like the user name does not change off course.</span>
<span class="comment-copy">I've added a method called 'as_pandas_series' that returns the data as a pandas series. I can then subtract the two series from each other. What do you think of that approach? Still 'OO abuse'?</span>
<span class="comment-copy">@Johan: fill in the blanks for us: what are the other 10 quantities not listed? Also, I'd just call it <code>as_series()</code>, to be more like <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html" rel="nofollow noreferrer">Pandas method naming</a>. In fact, since your source data is conceptually already a dataframe, and Pandas does date-arithmetic nicely, plus other stuff, you might to like to just write this all as native Pandas code, it's easy. Yes, you can subtract <code>delta_AB = A.as_series() - B.as_series()</code> if you're after the individual delta in each value, rather than a distance metric (for clustering)</span>
