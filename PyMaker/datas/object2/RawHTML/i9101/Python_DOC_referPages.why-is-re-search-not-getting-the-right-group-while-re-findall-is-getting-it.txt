<div class="post-text" itemprop="text">
<p>Given the string <code>abc.</code> the aim is to break it into two groups <code>abc</code> and <code>.</code>. Actually, I'm only interested in the group before the <code>.</code>. </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = 'abc.'
&gt;&gt;&gt; re.search('^(\S+)\.$', text).group(0)
'abc.'
&gt;&gt;&gt; re.findall('^(\S+)\.$', text)
['abc']
</code></pre>
<p><strong>Why is re.search not getting the right group while re.findall is getting it?</strong></p>
<p>Another example where the input is <code>abc.def.</code>, the expect output is to isolate the final fullstop and get <code>abc.def</code> and <code>.</code>. So <code>re.findall</code> is getting it as desired:</p>
<pre><code>&gt;&gt;&gt; re.findall('^(\S+)\.$', text)
['abc.def']
</code></pre>
<p>But <code>re.search</code> lumps the final fullstop into the first group.</p>
<pre><code>&gt;&gt;&gt; re.search('^(\S+)\.$', text).group(0)
'abc.def.'
</code></pre>
<p><strong>Is it possible for <code>re.search('^(\S+)\.$', text).group(0)</code> to return only <code>abc.def</code>? Is there some flags that needs to be set?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Because you are asking for the wrong group. Group 0 is the entire match, which includes the dot. Group 1 is the first capture group within the match. This is all spelled out in the docs for the <a href="https://docs.python.org/3/library/re.html#re.match.group" rel="nofollow noreferrer"><code>match</code></a> object, which <code>re.search</code> returns. If you absolutely need something zero-based, use <code>re.search(...).groups()[0]</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Group numbers start at 1, so you want <code>group(1)</code>. <code>group(0)</code> is the entire match text.</p>
</div>
<span class="comment-copy">Group numbers start at 1.</span>
