<div class="post-text" itemprop="text">
<p>I want to delete the back to back duplicates of a list.</p>
<pre><code>myList = ["A", "B", "C", "D", "A", "A", "B", "C", "B", "B", "D"]
</code></pre>
<p>I want to get this list:</p>
<pre><code>A, B, C, D, A, B, C, B, D
</code></pre>
<p>I tried converting it into a set then back to a list but I keep deleting all duplicates and not just </p>
<pre><code>list2 = list(set(myList))        
list2.sort(key=list1.index)    
print list2


&gt; [ A, B, C, D]
</code></pre>
<p>Thanks in advance for the help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; l = ["A", "B", "C", "D", "A", "A", "B", "C", "B", "B", "D"]
&gt;&gt;&gt; [x[0] for x in groupby(l)]
['A', 'B', 'C', 'D', 'A', 'B', 'C', 'B', 'D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is probably a better way, but a linear scan and keeping track of the previous element can work. </p>
<pre><code>myList = ["A", "B", "C", "D", "A", "A", "B", "C", "B", "B", "D"]

output = []
prev = None
for x in myList:
  if prev != x:
    output.append(x)
  prev = x
</code></pre>
<p><p></p>
<pre><code>&gt;&gt;&gt; print(output) 
['A', 'B', 'C', 'D', 'A', 'B', 'C', 'B', 'D']
</code></pre>
<p>My simple tests say this also handles more than two back-to-back elements</p>
</p></div>
<div class="post-text" itemprop="text">
<p>Because you can, here is a function which uses a generator and a list comprehension:</p>
<pre><code># Generator which returns whether the last character is the same
# as the one you just sent it
def is_diff():
    last = char = None
    while True:
        diff = last != char
        last = char
        char = yield diff

def de_dupe(list):
    gen_diff = is_diff()
    gen_diff.send(None)  # These steps are required to initiate the generator
    return [char for char in list if gen_diff.send(char)]
</code></pre>
<p>Used as:</p>
<pre><code>de_dupe(my_list)
['A', 'B', 'C', 'D', 'A', 'B', 'C', 'B', 'D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple (if inelegant) solution would be to append valid elements to a new list:</p>
<pre><code>mylist = ["A", "B", "C", "D", "A", "A", "B", "C", "B", "B", "D"]
newlist = []
prevchar = ''

for char in mylist:

    if char != prevchar:
        newlist.append(char)

    prevchar = char
</code></pre>
</div>
<span class="comment-copy">You don't need <code>else: continue</code>. Works just fine without it :)</span>
<span class="comment-copy">@TemporalWolf True! Thank you.</span>
