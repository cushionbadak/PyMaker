<div class="post-text" itemprop="text">
<p>I have a string that contains a path
</p>
<pre><code>str = "/example/path/with/different/trailing/delimiter\"
</code></pre>
<p>and I want to trim the leading and trailing <code>/</code> and <code>\</code>. What is the best practice in Python 3?</p>
<p>Currently I'm using
</p>
<pre><code>trimmedPath = str.strip("/\\")
# trimmedPath is "example/path/with/different/trailing/delimiter" as desired
</code></pre>
<p>Two questions:</p>
<ol>
<li>Is this the best trim function for trimming specific characters in Python 3?</li>
<li>Are there specific path functions for such operations in Python 3 so I don't have to set the delimiters manually?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I believe <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>strip</code></a> is the pythonic way. It is usually the case when there is a builtin function.</p>
<p>There are a few builtin path manipulators available in the <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os</code></a> library. You might want to use them if one of the manipulators is a match for your use case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Example of <code>strip()</code> in action; in this case, removing a leading plus sign:</p>
<pre><code>In [1]: phone_number = "+14158889999"

In [2]: phone_number.strip('+')
Out[2]: '14158889999'
</code></pre>
</div>
<span class="comment-copy"><code>strip</code> (and <code>lstrip</code> and <code>rstrip</code>) is/are the python version of trim.  As @pmuntima mentions, the <code>os.path</code> library has lots of useful path functions if we knew more about your particular application.  You could probably use <code>os.path.join</code>, or <code>os.path.relpath</code> to combine or obtain a path in the format you're looking for.</span>
