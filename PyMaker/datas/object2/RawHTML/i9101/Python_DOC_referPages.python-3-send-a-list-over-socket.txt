<div class="post-text" itemprop="text">
<p>I've very recently migrated to Py 3.5.
This code was working properly in Python 2.7:</p>
<pre><code>with open(fname, 'rb') as f:
    lines = [x.strip() for x in f.readlines()]

for line in lines:
    tmp = line.strip().lower()
    if 'some-pattern' in tmp: continue
    # ... code
</code></pre>
<p>After upgrading to 3.5, I'm getting the:</p>
<pre><code>TypeError: a bytes-like object is required, not 'str'
</code></pre>
<p>error on the last line (the pattern search code).</p>
<p>I've tried using the <code>.decode()</code> function on either side of the statement, also tried:</p>
<pre><code>if tmp.find('some-pattern') != -1: continue
</code></pre>
<p>- to no avail.</p>
<p>I was able to resolve almost all 2:3 issues quickly, but this little statement is bugging me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You opened the file in binary mode:</p>
<pre><code>with open(fname, 'rb') as f:
</code></pre>
<p>This means that all data read from the file is returned as <code>bytes</code> objects, not <code>str</code>. You cannot then use a string in a containment test:</p>
<pre><code>if 'some-pattern' in tmp: continue
</code></pre>
<p>You'd have to use a <code>bytes</code> object to test against <code>tmp</code> instead:</p>
<pre><code>if b'some-pattern' in tmp: continue
</code></pre>
<p>or open the file as a textfile instead by replacing the <code>'rb'</code> mode with <code>'r'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can encode your string by using <code>.encode()</code></p>
<p>Example:</p>
<pre><code>'Hello World'.encode()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like it has been already mentioned, you are reading the file in binary mode and then creating a list of bytes. In your following <strong>for</strong> loop you are comparing string to bytes and that is where the code is failing.</p>
<p>Decoding the bytes while adding to the list should work. The changed code should look as follows:</p>
<pre><code>with open(fname, 'rb') as f:
    lines = [x.decode('utf8').strip() for x in f.readlines()]
</code></pre>
<p>The bytes type was introduced in Python 3 and that is why your code worked in Python 2. In Python 2 there was no data type for bytes:</p>
<pre><code>&gt;&gt;&gt; s=bytes('hello')
&gt;&gt;&gt; type(s)
&lt;type 'str'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>for this small example:
    import socket</p>
<pre><code>mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(('www.py4inf.com', 80))
mysock.send(**b**'GET http://www.py4inf.com/code/romeo.txt HTTP/1.0\n\n')

while True:
    data = mysock.recv(512)
    if ( len(data) &lt; 1 ) :
        break
    print (data);

mysock.close()
</code></pre>
<p>adding the "b" before 
'GET <a href="http://www.py4inf.com/code/romeo.txt" rel="noreferrer">http://www.py4inf.com/code/romeo.txt</a> HTTP/1.0\n\n'
solved my problem</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to change from wb to w: </p>
<pre><code>def __init__(self):
    self.myCsv = csv.writer(open('Item.csv', 'wb')) 
    self.myCsv.writerow(['title', 'link'])
</code></pre>
<p>to </p>
<pre><code>def __init__(self):
    self.myCsv = csv.writer(open('Item.csv', 'w'))
    self.myCsv.writerow(['title', 'link'])
</code></pre>
<p>After changing this, the error disappears, but you can't write to the file (in my case). So after all, I don't have an answer?</p>
<p>Source: <a href="https://stackoverflow.com/questions/3191289/how-to-remove-m/3191470#3191470">How to remove ^M</a></p>
<p>Changing to 'rb' brings me the other error: io.UnsupportedOperation: write</p>
</div>
<div class="post-text" itemprop="text">
<p>why not try opening your file as text?</p>
<pre><code>with open(fname, 'rt') as f:
    lines = [x.strip() for x in f.readlines()]
</code></pre>
<p>Additionally here is a link for python 3.x on the official page: 
<a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">https://docs.python.org/3/library/io.html</a>
And this is the open function: <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#open</a></p>
<p>If you are really trying to handle it as a binary then consider encoding your string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You opened the file in binary mode:</p>
<p>The following code will throw 
 a TypeError: a bytes-like object is required, not 'str'.</p>
<pre><code>for line in lines:
    print(type(line))# &lt;class 'bytes'&gt;
    if 'substring' in line:
       print('success')
</code></pre>
<p>The following code will work - you have to use the decode() function:</p>
<pre><code>for line in lines:
    line = line.decode()
    print(type(line))# &lt;class 'str'&gt;
    if 'substring' in line:
       print('success')
</code></pre>
</div>
<span class="comment-copy">Why are you opening the file in binary mode but treat it as text?</span>
<span class="comment-copy">@MartijnPieters thanks for spotting the file open mode! Changing it to text-mode solved the issue... the code had worked reliably in Py2k for many years though...</span>
<span class="comment-copy">@masroore see: <a href="https://www.python.org/dev/peps/pep-0404/#strings-and-bytes" rel="nofollow noreferrer">python.org/dev/peps/pep-0404/#strings-and-bytes</a></span>
<span class="comment-copy">I am encountering this too where I have a requests <code>result = requests.get</code> and I attempt to <code>x = result.content.split("\n")</code>.  I am a little confused by the error message because it seems to imply that <code>result.content</code> is a string and <code>.split()</code> is requiring a bytes-like object..?? ( "a bytes-like object is required, not 'str"')..</span>
<span class="comment-copy">Would also link to: <a href="https://www.python.org/dev/peps/pep-0404/#strings-and-bytes" rel="nofollow noreferrer">python.org/dev/peps/pep-0404/#strings-and-bytes</a></span>
<span class="comment-copy">@Roberto: you do realise that that is a joke PEP, right?</span>
<span class="comment-copy">The part i linked is NOT a joke though ;)</span>
<span class="comment-copy">Sure, but there are perhaps better documents to link to, on the whole. :-) Like the <a href="https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data" rel="nofollow noreferrer">porting guide</a>.</span>
<span class="comment-copy">But shouldn't the message be "a string-like object is required, not byte"?</span>
<span class="comment-copy">This helped with base64 throwing the above error.</span>
<span class="comment-copy">this is as response to Gautam Karmakar</span>
