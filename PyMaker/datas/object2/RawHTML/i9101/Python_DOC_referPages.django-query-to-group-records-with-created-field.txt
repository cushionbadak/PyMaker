<div class="post-text" itemprop="text">
<p><strong>models.py</strong></p>
<pre><code>class Post(models.Model):
    caption = models.CharField(max_lenght=200)
    description = models.TextField()
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)
</code></pre>
<p>I am looking for a single Django query that will return results like:</p>
<pre><code>data = {
    "YYYY-MM-DD": [{&lt;post data one&gt;}, {&lt;post data two&gt;}],
    "YYYY-MM-DD": [{&lt;post data one&gt;}, {&lt;post data two&gt;}],
    "YYYY-MM-DD": [{&lt;post data one&gt;}, {&lt;post data two&gt;}],
}
</code></pre>
<p>"YYYY-MM-DD" is the date value of <code>created</code> field in <code>Post</code> model</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can handle it with <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>groupby</code></a> from python module.</p>
<p>I'll give you an example; </p>
<pre><code>&gt;&gt;&gt; rows = Post.objects.published().values_list('id', 'created')
&gt;&gt;&gt; rows
&lt;QuerySet [
  (100, datetime.datetime(2017, 2, 9, 14, 35, 9, 358, tzinfo=&lt;UTC&gt;)), 
  (99, datetime.datetime(2017, 2, 9, 14, 35, 0, 760347, tzinfo=&lt;UTC&gt;)), 
  (98, datetime.datetime(2017, 1, 22, 3, 32, 18, 570201, tzinfo=&lt;UTC&gt;)), 
  (97, datetime.datetime(2017, 1, 3, 0, 44, 35, 277663, tzinfo=&lt;UTC&gt;)), 
  (96, datetime.datetime(2017, 1, 1, 14, 18, 30, 920143, tzinfo=&lt;UTC&gt;)),
  (95, datetime.datetime(2016, 12, 24, 3, 31, 2, 370658, tzinfo=&lt;UTC&gt;)),
  '...(remaining elements truncated)...']&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; items = []
&gt;&gt;&gt; for k, v in groupby(rows, key=lambda row: row[1].strftime('%Y-%m-%d')):
...     data = dict({k: list(dict(v).keys()) })
...     items.append(data)
...     print(data)
... 
{'2017-02-09': [99, 100]}
{'2017-01-22': [98]}
{'2017-01-03': [97]}
{'2016-10-09': [81]}
{'2016-10-07': [80, 79]}
{'2016-10-05': [78]}
{'2016-10-04': [77]}
{'2016-10-02': [1, 2, 3, 4, 5, 6, 7]}
&gt;&gt;&gt; items
[
  {'2017-02-09': [99, 100]}
  {'2017-01-22': [98]}
  {'2017-01-03': [97]}
  {'2016-10-09': [81]}
  {'2016-10-07': [80, 79]}
  {'2016-10-05': [78]}
  {'2016-10-04': [77]}
  {'2016-10-02': [1, 2, 3, 4, 5, 6, 7]}
]
</code></pre>
<p>My previous test, the values is <code>id/pk</code> from the objects. you also can create a function to get <code>title</code>, <code>slug</code> or else.. an example:</p>
<pre><code>&gt;&gt;&gt; def get_titles(ids):
...     final_titles = []
...     for id in ids:
...         final_titles.append(Post.objects.get(id=id).title)
...     return final_titles
&gt;&gt;&gt;
&gt;&gt;&gt; items = []
&gt;&gt;&gt; for k, v in groupby(rows, key=lambda row: row[1].strftime('%Y-%m-%d')):
...     titles = get_titles(list(dict(v).keys()))
...     items.append(dict({k: titles}))
&gt;&gt;&gt; items
[
  {'2017-02-09': ['Test Post 1', 'Test Post 2']}, 
  {'2017-01-22': ['Fixed DNS PROBE on Ubuntu']}, 
  {'2017-01-03': ['Django: Custom safe excludes from dangerous XSS Injection']}, 
  {'2017-01-01': ['DracEditor - Django Markdown Editor built for Dracos Linux']}, 
  {'2016-12-24': ['Top 10 Python libraries of 2016']}, 
  {'2016-12-19': ['How to custom html choose image upload for django markdownx']}, 
  {'2016-12-18': ['Command to handle deploy Django with quickly']}

  ....
]
</code></pre>
<blockquote>
<p>By default, if you try with <code>final_titles.append(Post.objects.get(id=id))</code> should return the <code>string</code> from function of <code>def __unicode__(self):</code> or <code>def __str__(self):</code> inside your <code>models.Post</code></p>
</blockquote>
<p>And finally, simply way to get meta data from the objects.</p>
<pre><code>def get_data(ids):
    final_data = []
    for id in ids:
        post = Post.objects.get(id=id)
        final_data.append({'title': post.title, 'created': post.created, 'slug': post.slug})
    return final_data

items = []
rows = Post.objects.published().values_list('id', 'created')

for k, v in groupby(rows, key=lambda row: row[1].strftime('%Y-%m-%d')):
    data = get_data(list(dict(v).keys()))
    items.append(dict({k: data}))
</code></pre>
<p>Result of <code>items</code>;</p>
<pre><code>[
  {
    '2017-02-09': [
      {
        'created': datetime.datetime(2017, 2, 9, 3, 32, 18, 570201, tzinfo=&lt;UTC&gt;),
        'title': 'Test Post 1',
        'slug': 'test-post-1'
      },
      {
        'created': datetime.datetime(2017, 2, 9, 2, 21, 9, 570201, tzinfo=&lt;UTC&gt;),
        'title': 'Test Post 2',
        'slug': 'test-post-2'
      }
    ]
  }, 
  {
    '2017-01-22': [
      {
        'created': datetime.datetime(2017, 1, 22, 3, 32, 18, 570201, tzinfo=&lt;UTC&gt;), 
        'title': 'Fixed DNS PROBE on Ubuntu', 
        'slug': 'fixed-dns-probe-on-ubuntu'
      }
    ]
  }, 
  {
    '2017-01-03': [
      {
        'created': datetime.datetime(2017, 1, 3, 0, 44, 35, 277663, tzinfo=&lt;UTC&gt;), 
        'title': 'Django: Custom safe excludes from dangerous XSS Injection', 
        'slug': 'django-custom-safe-excludes-from-dangerous-xss-injection'
      }
    ]
  }, ....
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the <a href="https://docs.djangoproject.com/en/1.10/ref/templates/builtins/#regroup" rel="nofollow noreferrer">regroup</a> template tag.</p>
<p>Something like this should work:</p>
<pre><code>{% regroup posts by created as post_list %}

&lt;ul&gt;
{% for row in post_list %}
    &lt;li&gt;{{ post_list.grouper }}
    &lt;ul&gt;
        {% for created in row.list %}
          &lt;li&gt;{{ created.caption }}: {{ created.description }}&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</code></pre>
</div>
