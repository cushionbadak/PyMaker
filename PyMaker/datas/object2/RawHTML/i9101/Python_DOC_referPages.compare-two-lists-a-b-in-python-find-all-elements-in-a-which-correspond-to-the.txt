<div class="post-text" itemprop="text">
<p>I want to compare two Python lists, 'A' and 'B' in such a manner that I can find <strong>all elements in A</strong> which correspond to the <strong>same number in B</strong>. I want to do this for <strong>each number in B</strong>. For example, if </p>
<pre><code>A = [5, 7, 9, 12, 8, 16, 25]
B = [2, 1, 3, 2, 3, 1, 4]
</code></pre>
<p>I would like to get </p>
<pre><code>[7,16] corresponding to the number 1 of listB
[5, 12] corresponding to the number 2 of listB
[9, 8] corresponding to the number 3 of listB
[25] corresponding to the number 4 of listB
</code></pre>
<p>A and B will always have the same lengths.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to create tuples which consist from one element from both lists, then sort them and finally group them by value from <code>B</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; A = [5, 7, 9, 12, 8, 16, 25]
&gt;&gt;&gt; B = [2, 1, 3, 2, 3, 1, 4]
&gt;&gt;&gt; for k, g in groupby(sorted(zip(B,A)), key=lambda x: x[0]):
...     print('{} corresponds to {}'.format([x[1] for x in g], k))
... 
[7, 16] corresponds to 1
[5, 12] corresponds to 2
[8, 9] corresponds to 3
[25] corresponds to 4
</code></pre>
<p>In above <code>zip(B, A)</code> returns iterable of tuples where each tuple has element from <code>B</code> and <code>A</code>:</p>
<pre><code>&gt;&gt;&gt; list(zip(B,A))
[(2, 5), (1, 7), (3, 9), (2, 12), (3, 8), (1, 16), (4, 25)]
</code></pre>
<p>Result of above is then sorted so that all the tuples with same value from <code>B</code> are next to each other:</p>
<pre><code>&gt;&gt;&gt; sorted(zip(B,A))
[(1, 7), (1, 16), (2, 5), (2, 12), (3, 8), (3, 9), (4, 25)]
</code></pre>
<p>Result of sorting is passed to <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> which groups the tuples based on value returned by key function, in this case the first item in the tuple. Result is iterable of <code>(key, group)</code> tuples where group is iterable of elements:</p>
<pre><code>&gt;&gt;&gt; [(k, list(g)) for k, g in groupby(sorted(zip(B,A)), key=lambda x: x[0])]
[(1, [(1, 7), (1, 16)]), (2, [(2, 5), (2, 12)]), (3, [(3, 8), (3, 9)]), (4, [(4, 25)])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use this code:</p>
<pre><code>A = [5, 7, 9, 12, 8, 16, 25]
B = [2, 1, 3, 2, 3, 1, 4]

d = {}

for a, b in zip(A, B):
    d.setdefault(b, [])
    d[b].append(a)

for k, v in sorted(d.items()):
    print('{} corresponds {}'.format(v, k))
</code></pre>
<p>Each key of the dictionary will be an element of <code>B</code>, and its associated value will be the list you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this approach.</p>
<pre><code>unique = set(B)    # Creates a set of unique entries in B
for u in unique:
    # Find indices of unique entry u
    indices = [i for i, x in enumerate(B) if x == u]

    # Pull out these indices in A
    corrEntry = [A[i] for i in indices]  

    # Do something with the data, in this case print what OP wants
    print('{} corresponds to the number {} of list B'.format(corrEntry , B[indices[0]]))
</code></pre>
<p>It finds the unique entries in B by using the <code>set</code> function. 
We then loop through these unique entries. The first list comprehension (for <code>indices</code>) finds the indices of the entries in B that match this unique entry. The second saves the value in A of those indices.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative using <code>collections.defaultdict</code>:</p>
<pre><code>import collections as ct

dd = ct.defaultdict(list)
for a, b in zip(A, B):
    dd[b].append(a)

dd
# defaultdict(list, {1: [7, 16], 2: [5, 12], 3: [9, 8], 4: [25]})
</code></pre>
<p>Sample of printed results:</p>
<pre><code>for k, v in sorted(dd.items()):
    print("{} corresponding to the number {} of listB".format(v, k))

# [7, 16] corresponding to the number 1 of listB
# [5, 12] corresponding to the number 2 of listB
# [9, 8] corresponding to the number 3 of listB
# [25] corresponding to the number 4 of listB
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>A = [5, 7, 9, 12, 8, 16, 25]
B = [2, 1, 3, 2, 3, 1, 4]
</code></pre>
<p>Create a specific function that takes two lists (<code>A</code>, <code>B</code>) and a number (<code>n</code>) as arguments.  Select all items in <code>A</code> that have the same list position as the items in <code>B</code> that are equivalent to <code>n</code>.  <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> is used to pair items from <code>A</code> and <code>B</code> with the same list position.  This function uses a list comprehension to select the items from <code>A</code>.</p>
<pre><code>&gt;&gt;&gt; def f(A, B, n):
    return [a for a, b in zip(A,B) if b == n]

&gt;&gt;&gt; f(A, B, 2)
[5, 12]
&gt;&gt;&gt; 
</code></pre>
<p>The function could be written without a list comprehension:</p>
<pre><code>def g(A, B, n):
    result = []
    for a, b in zip(A, B):
        if b == n:
            result.append(a)
    return result
</code></pre>
<p>Using fuctools.partial the list arguments can be fixed:</p>
<pre><code>import functools
f_AB = functools.partial(f, A, B)
</code></pre>
<p>Then it could be used like this:</p>
<pre><code>&gt;&gt;&gt; f_AB(3)
[9, 8]

&gt;&gt;&gt; numbers = [3, 4, 2]
&gt;&gt;&gt; for n in numbers:
    print (n, f_AB(n))

(3, [9, 8])
(4, [25])
(2, [5, 12])
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Not sure to understand the logic here... Could you please give more details? <code>[7,16] corresponding to the number 1 of listB</code> ... Why ?</span>
<span class="comment-copy">Ohhh ok I get it : in list B, there are <code>1</code> at the 2nd and 6th position and the numbers in list A at these positions are 7 and 16.</span>
<span class="comment-copy">very elegant response</span>
<span class="comment-copy">your code is actually not working. I have run it, and it is not what the user is asking for. <code>print(indices, correspondingEntries)</code>, and I am getting <code>[1, 5] [7, 16] [0, 3] [5, 12] [2, 4] [9, 8] [6] [25]</code></span>
<span class="comment-copy">Just print <code>correspondingEntries</code>. <code>indices</code> isn't need for anything and is an intermediary</span>
<span class="comment-copy">the point is that @SiddTheKid will want the number at which this entries are the same that is the main point of the question</span>
<span class="comment-copy">now it is working</span>
<span class="comment-copy">Fixed, thanks for your comments</span>
<span class="comment-copy">Some explanation might help.</span>
<span class="comment-copy">thnx, @Pavlo - I got a bit lazy.</span>
