<div class="post-text" itemprop="text">
<p>I am looking for some analogue of <strong>decltype</strong> in C++. What I am trying to accomplish is the following: </p>
<pre><code>def f(a: int) -&gt; List[Tuple(int, float)]
def g(a: List[int]) -&gt; List[decltype(f)]
</code></pre>
<p>So the idea is to use type annotation of another function. 
The solution I found looks somehow clumsy:</p>
<pre><code>def g(a: List[int])-&gt;f.__annotations__['return']
</code></pre>
<p>Basically, the question is whether there exists something like <strong>decltype</strong> (perhaps it should be called "return_type") or whether it's planned in further versions. I have also written a small function that illustrates possible use of this functionality:</p>
<pre><code>def return_type(f: Callable):
   try:
       return get_type_hints(f)['return']
   except(KeyError, AttributeError):
       return Any
def g() -&gt; return_type(f):
</code></pre>
<p><strong>UPD</strong> As was suggested by Jim Fasarakis-Hilliard we can also use <strong>get_type_hints</strong> instead of <strong>annotations</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Nothing like that <em>currently</em> exists and no issue on <a href="https://github.com/python/typing/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20is%3Aopen" rel="nofollow noreferrer">the tracker for typing</a> seem to indicate that it is planned. You're always welcome to create an issue and see how this is welcomed.</p>
<p>Currently your approach does the trick (that is assigns a type), the only change I'd introduce would be to use <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer"><code>get_type_hints</code></a> from <code>typing</code> rather than grabbing the <code>__annotations__</code> attribute directly. Coupled with <code>.get</code> (since it returns a dict), could make this shorter, too:</p>
<pre><code>def return_type(f):
    return get_type_hints(f).get('return', Any)

def g() -&gt; return_type(f):
</code></pre>
<p>Which can of course be removed from the function and used in a single line if you're so inclined.</p>
<p>If the possibility of random objects being supplied to <code>return_type</code> exits, you'll need to catch the <code>TypeError</code> it raises and return your default <code>Any</code>:</p>
<pre><code>def return_type(f):
    try:
        return get_type_hints(f).get('return', Any)
    except TypeError:
        return Any
</code></pre>
<p>Of course since this assigns a type dynamically you can't expect static type checkers to catch it, you need static hinting for that.</p>
</div>
<span class="comment-copy">You mean like: <code>def decltype(function): return function.__annotations__['return']</code> ? :)</span>
<span class="comment-copy">@cowbert Yes, I just added a similar example :) Actually, I am confused that there is no function for this kind of things, and I wonder whether is something wrong with this attitude.</span>
<span class="comment-copy">note that <code>typing</code> only exists as of 3.5</span>
<span class="comment-copy">Thanks for mentioning get_type_hints! I will add this to the question text</span>
<span class="comment-copy">@ig-melnyk note that with <code>get_type_hints</code> this really becomes a one-liner if you really want it to :-)</span>
<span class="comment-copy">Perhaps we should still check for AttributeError in case it wont be Callable?</span>
<span class="comment-copy">@ig-melnyk Oh, of course, if something other than a function (in <code>3.5</code>) and other than function, class, module (in <code>3.6+</code>) might be passed in you'd need to do that, I wasn't aware that was the case.</span>
