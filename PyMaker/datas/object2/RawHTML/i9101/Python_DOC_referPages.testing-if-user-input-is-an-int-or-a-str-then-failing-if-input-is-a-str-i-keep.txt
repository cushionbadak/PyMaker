<div class="post-text" itemprop="text">
<p>I am trying to test if my user input is a string or an integer. </p>
<pre><code>feet = input ("Enter your feet.")
inches = input ("Enter your inches.")

if type(eval(feet)) and type(eval(inches)) == int:
    print ("both are numbers!")
else:
    print ("That's not a Number!")
</code></pre>
<p>Here is my code, it works if I enter numbers for the values for feet and inches. However, if feet = a I get an error stating that a is undefined. </p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're doing wrong is using <code>eval</code>. That's never a good way to do anything.</p>
<p>Instead, try to convert to int and catch the exception:</p>
<pre><code>try:
    feet = int(feet)
    inches = int(inches)
except ValueError:
    print("not numbers!")
else:
    print("numbers!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>eval</code> to test if user input is an integer. You get an error because the interpreter is trying to find a variable called <code>a</code> but there isn't one defined. Instead you can check if a string only contains digits.</p>
<pre><code>def is_integer(s):
    for c in s:
        if not c.isdigit():
            return False
    return True

feet = input ("Enter your feet.")
inches = input ("Enter your inches.")

if is_integer(feet) and is_integer(inches):
    print ("both are numbers!")
else:
    print ("That's not a Number!")
</code></pre>
<p>This assumes that negative numbers are invalid.</p>
</div>
<span class="comment-copy">As an aside: <code>if type(eval(feet)) and type(eval(inches)) == int</code> means <code>if bool(type(eval(feet))) and (type(eval(inches)) == int)</code>.  It does not mean <code>if type(eval(feet)) == int and type(eval(inches)) == int</code>.</span>
<span class="comment-copy">Or more succinctly:  <code>x and y == z</code> means <code>bool(x) and (y == z)</code> not <code>(x == z) and (y == z)</code>  If you need to test multiple items you can do <code>all(item==z for item in (x, y))</code>.  If you need all items to be the same you can do <code>{x, y} == {z}</code>.</span>
<span class="comment-copy">interesting! I have never heard of the Try command. Granted I am very new to python.  Is there a good source to read about this method? I would like to understand what is going on more.</span>
<span class="comment-copy">@WynnBoss See <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#try</a> or <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-eafp</a></span>
<span class="comment-copy">Isn't it isdigit not isDigit? <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#str.isdigit</a></span>
<span class="comment-copy">Amended, thanks.</span>
<span class="comment-copy">This is really helpful thanks.</span>
