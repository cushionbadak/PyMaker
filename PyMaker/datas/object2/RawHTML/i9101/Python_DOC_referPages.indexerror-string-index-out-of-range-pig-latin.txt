<div class="post-text" itemprop="text">
<p>Sorry if I'm being really ignorant, I've started learning to code Python recently (first language) and have been working on this task on codewars.com to create a single word pig latin programme. It is pretty messy, but it seems to work aside from the fact that the message:</p>
<pre><code>Traceback:
   in 
   in pig_latin
IndexError: string index out of range
</code></pre>
<p>...comes up. I have looked online and I sort of gather it is likely some piece of code that is just out of line or i need a -1 somewhere or something. I was wondering if anyone could help me identify where this would be. It's not helped of course by the fact that I have made this difficult for myself with my inefficiency :P thanks</p>
<pre><code>def pig_latin(s):
    word = 'ay'
    word2 = 'way'
    total=0
    total2=0
    lst = []
    val = None

    #rejecting non character strings
    for c in s:
        if c.isalpha() == False:
            return None

    #code for no vowels and also code for all consonant strings
    for char in s:
        if char in 'aeiou':
            total+=1
            if total==0:
                return s + 'ay'
            else:
                pass
        elif char not in 'aeiou':
            total2+=1
            if total2 == len(s):
                answer_for_cons = s + word
                return answer_for_cons.lower()

    #first character is a vowel
    if s[0] in 'aeiou':
        return s + word2

    #normal rule
    elif s[0] not in 'aeiou':
        for c in s:
            if c in 'aeiou':
                lst.append(s.index(c))
                lst.sort()
                answer = s[lst[0]:len(s)] + str(s[:lst[0]]) + word
                return answer.lower()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only point where an index is implicated is when you call <code>s[0]</code>. Have you maybe tried running <code>pig_latin</code> with an empty string?</p>
<p>Also, the formatting of your code makes no sense. I am assuming it was lost in the pasting? Everything below <code>val = None</code> should be at least one indent further right.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now that the indentation is fixed, the code seems to run, but it does raise </p>
<pre><code>IndexError: string index out of range
</code></pre>
<p>if we pass <code>pig_latin</code> an empty string. That's because of</p>
<pre><code>if s[0] in 'aeiou':
</code></pre>
<p>That will fail if <code>s</code> is the empty string because you can't do <code>s[0]</code> on an empty string. <code>s[0]</code> refers to the first char in the string, but an empty string doesn't have a first char. And of course <code>pig_latin</code> returns <code>None</code> if we pass it a string that contains non-alpha characters.</p>
<p>So before you start doing the other tests, you should check that the string isn't empty, and return something appropriate if it is empty. The simplest way to do that is</p>
<pre><code>if not s:
    return ''
</code></pre>
<p>I suggest returning <code>s</code> or the empty string if you get passed an invalid string, rather than returning <code>None</code>. A function that returns different types depending on the value of the input is a bit messy to work with.</p>
<hr/>
<p>There are various simplifications and improvements that can be made to your code. For example, there's no need to do <code>elif char not in 'aeiou'</code> after you've already done <code>if char in 'aeiou'</code>, since if <code>char in 'aeiou'</code> is false then <code>char not in 'aeiou'</code> <em>must</em> be true. However, we can simply that whole section considerably.</p>
<p>Here's your code with a few other improvements. Rather than using <code>index</code> to find the location of the first vowel we can use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to get both the letter and its index at the same time.</p>
<pre><code>def pig_latin(s):
    word = 'ay'
    word2 = 'way'

    #return empty and strings that contain non-alpha chars unchanged
    if not s or not s.isalpha():
        return s

    #code for no vowels
    total = 0
    for char in s:
        if char in 'aeiou':
            total += 1

    if total == 0:
        return s.lower() + word

    #first character is a vowel
    if s[0] in 'aeiou':
        return s.lower() + word2

    #normal rule. This will always return before the end of the loop
    # because by this point `s` is guaranteed to contain at least one vowel
    for i, char in enumerate(s):
        if char in 'aeiou':
            answer = s[i:] + s[:i] + word
            return answer.lower()

# test

data = 'this is a pig latin test string aeiou bcdf 123'
s = ' '.join([pig_latin(w) for w in data.split()])
print(s)
</code></pre>
<p><strong>output</strong></p>
<pre><code>isthay isway away igpay atinlay esttay ingstray aeiouway bcdfay 123
</code></pre>
</div>
<span class="comment-copy">Thanks for helping, That does seem to have got rid of the error message. I am now failing a basic test that says that 'yaay' should equal 'ayay'. I thought that the tests were running smoothly, any idea what that is about?</span>
<span class="comment-copy">@BillUrquhart Hmm. I haven't changed any of the core word-manipulation logic from your version. I guess there must be extra rule to handle words that begin with <code>ya</code> (or something like that). Do you have a link for the rules your code is supposed to implement?</span>
<span class="comment-copy">Apologies, I commented prior to seeing your altered version. Let me implement yours and report back</span>
<span class="comment-copy">1) The word starts with a vowel(a,e,i,o,u) -&gt; return the original string plus "way" 2) The word starts with a consonant -&gt; move consonants from the beginning of the word to the end of the word until the first vowel, then return it plus "ay" 3) The result must be lowercase, regardless of the case of the input. If the input string has any non-alpha characters, the function must return None, null, Nothing (depending on the language). 4) The function must also handle simple random strings and not just English words. 5) The input string has no vowels -&gt; return the original string plus "ay".</span>
<span class="comment-copy">The same error message appeared with your script too.</span>
