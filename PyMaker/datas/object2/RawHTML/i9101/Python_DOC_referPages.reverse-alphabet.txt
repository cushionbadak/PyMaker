<div class="post-text" itemprop="text">
<p>I’m trying to modify a piece of text to apply the following translation:</p>
<pre><code>before: abcdefghijqlmnopqrstuvwxyz
after:  zyxwvutsrqponmlkjihgfedcba
</code></pre>
<p>That is, each <code>a</code> becomes a <code>z</code>; each <code>b</code> becomes a <code>y</code>; each <code>c</code> becomes a <code>x</code>; and so on.</p>
<p>My script :</p>
<pre><code>myInput = input("Entrer une chaine de caracteres:\n\n")
myInputSansEspace = myInput.replace(" ", "")

myInputAsciiInverse = myInputSansEspace.replace("a","z").replace("b","y").replace("c","x").replace("d","w").replace("e","v").replace("f","u").replace("g","t").replace("h","s").replace("i","r").replace("j","q").replace("k","p").replace("l","o").replace("m","n").replace("n","m").replace("o","l").replace("p","k").replace("q","j").replace("r","i").replace("s","h").replace("t","g").replace("u","f").replace("v","e").replace("w","d").replace("x","c").replace("y","b").replace("z","a")

print(myInputAsciiInverse)
</code></pre>
<p>Unfortunately it doesn’t work. For example if I write:</p>
<blockquote>
<p>i am noob</p>
</blockquote>
<p>The return should be be:</p>
<blockquote>
<p>rznmlly</p>
</blockquote>
<p>Because <code>i</code> gets replaced by <code>r</code>; <code>a</code> by <code>z</code>; <code>m</code> by <code>n</code>; etc.</p>
<p>The result I get is:</p>
<blockquote>
<p>boonmai</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your approach has side effects, so does not do what you want.<br/>
Take your first replace:</p>
<pre><code>'a...z'.replace('a', 'z') == 'z...z'
</code></pre>
<p>Now consider the last replace:</p>
<pre><code>'z...z'.replace('z', 'a') == 'a...a'
</code></pre>
<p>Hence ending up with only half the alphabet.</p>
<p>You can simply replace all the <code>replace</code>s with <code>reverse</code> or slicing:</p>
<pre><code>'abc..xyz'.reverse() == 'zyx..cba'
'abc..xyz'[::-1] == 'zyx..cba'
</code></pre>
<p>If you are trying to translate as a means of a cypher then you can use <code>str.maketrans</code> and <code>str.translate</code>, e.g.:</p>
<pre><code>&gt;&gt;&gt; alphabet = 'abcdefghijklmnopqrstuvxyz'
&gt;&gt;&gt; trans = str.maketrans(alphabet, alphabet[::-1], ' ')
&gt;&gt;&gt; noob = 'I am noob'
&gt;&gt;&gt; noob.lower().translate(trans)
'rznmlly'
</code></pre>
<p>Note: <code>alphabet</code> is equivalent to <code>string.ascii_lowercase</code></p>
<p>The above is largely equivalent to:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; trans_table = dict(zip(string.ascii_lowercase, string.ascii_lowercase[::-1]))
&gt;&gt;&gt; ''.join(trans_table.get(c, c) for c in noob.lower() if c not in ' ')
'rznmlly'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has a string function called <code>.reverse()</code>, which can be called by</p>
<pre><code>var = "abcdefghijklmnopqrstuvwxyz"
var = var.reverse()
print var


&gt; zyxwvutsrqponmlkjihgfedbca
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a functional way to accomplish the replacement:</p>
<pre><code>s = "I am noob"

import string   
letters = string.ascii_lowercase

# construct a dictionary mapping from a letter to its dual opposite starting from the end
# of the alphabet table
rep_dict = dict(zip(letters, letters[::-1]))

# use the dictionary to replace the letters
''.join(map(rep_dict.get, s.replace(" ", "").lower()))
# 'rznmlly'
</code></pre>
<hr/>
<p>The problem with your code is that you are doing <code>replace('a', 'z')....replace('z', 'a')</code> so all the previously replaced characters get replaced back.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's slice to reverse a string:</p>
<pre><code>&gt;&gt;&gt; my_string = "abcdefghijqlmnopqrstuvwxyz"
&gt;&gt;&gt; my_reversed_string = my_string[::-1]
&gt;&gt;&gt; my_reversed_string
'zyxwvutsrqponmlqjihgfedcba'
</code></pre>
<p>Edit: OK so the question is how to translate a string using a reversed alphabet. With this kind of problem the first that comes to my mind is building a dictionary to do the translating:</p>
<pre><code>&gt;&gt;&gt; alphabet = "abcdefghijklmnopqrstuvwxyz"
&gt;&gt;&gt; reversed_alphabet = alphabet[::-1] # zyxwvutsrqponmlkjihgfedcba
&gt;&gt;&gt; my_dict = dict(zip(alphabet, reversed_alphabet))
&gt;&gt;&gt; my_str = "i am noob"
&gt;&gt;&gt; translated_str = ''.join(my_dict[c] for c in my_str.replace(' ', ''))
&gt;&gt;&gt; translated_sentence
'rznmlly'
</code></pre>
</div>
<span class="comment-copy">You needn't run the reverse on the later part of the alphabet. It's already reversed. Although it certainly more sensible to use <code>reverse</code> or <code>reversed</code>.</span>
<span class="comment-copy">So all empty spaces need to be removed?</span>
<span class="comment-copy">After your edit the question <b>totally changed</b>! Your addition asks about something completely different!</span>
<span class="comment-copy">Thank you for your return. I did not explain my question well.  For example if i write :      I am noob  The return need to be like this :      rznmlly  (replace i by r) (replace a by z) (replace m by n) etc  Actually the return is :      boonmai   adrien</span>
<span class="comment-copy">Presumably the purpose of the code is to come up with his own version of that though - obviously you'd probably just use the built-in one for production code though.</span>
<span class="comment-copy">In that case you can do a recursive function where you <code>return var[-1] + reverse(var[:-1])</code> with a base case for when <code>len(var) == 1</code></span>
<span class="comment-copy">Not sure I understand what you mean <code>index</code> it. I would call this slicing.</span>
<span class="comment-copy">@AChampion Yeah, seems to be more appropriate to call it slicing here if you say <a href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions" rel="nofollow noreferrer">index is one element and slice is multiple elements</a>.</span>
<span class="comment-copy">I edited the question to clarify OP’s problem. It’s not about reversing a string but rather translate a string using a reversed alphabet: replace <code>a</code> by <code>z</code>; <code>b</code> by <code>y</code>; <code>c</code> by <code>x</code>; etc.</span>
