<div class="post-text" itemprop="text">
<p>I need to create a class which takes in a random number generator (i.e. a <code>numpy.random.RandomState</code> object) as a parameter. In the case this argument is not specified, I would like to assign it to the random generator that numpy uses when we run <code>numpy.random.&lt;random-method&gt;</code>. How do I access this global generator? Currently I am doing this by just assigning the module object as the random generator (since they share methods / duck typing). However this causes issues when pickling (unable to pickle module object) and deep-copying. I would like to use the RandomState object behind numpy.random</p>
<p>PS: I'm using python-3.4</p>
</div>
<div class="post-text" itemprop="text">
<p>As well as what kazemakase suggests, we can take advantage of the fact that module-level functions like <code>numpy.random.random</code> are really methods of a hidden <code>numpy.random.RandomState</code> by pulling the <code>__self__</code> directly from one of those methods:</p>
<pre><code>numpy_default_rng = numpy.random.random.__self__
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy.random</code> imports * from <code>numpy.random.mtrand</code>, which is an extension module written in Cython. The <a href="https://github.com/numpy/numpy/blob/master/numpy/random/mtrand/mtrand.pyx#L4878" rel="nofollow noreferrer">source code</a> shows that the global state is stored in the variable <code>_rand</code>. This variable <a href="https://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow noreferrer">is not imported</a> into the <code>numpy.random</code> scope but you can get it directly from mtrand.</p>
<pre><code>import numpy as np
from numpy.random.mtrand import _rand as global_randstate

np.random.seed(42)
print(np.random.rand())
# 0.3745401188473625

np.random.RandomState().seed(42)  # Different object, does not influence global state
print(np.random.rand())
# 0.9507143064099162

global_randstate.seed(42)  # this changes the global state
print(np.random.rand())
# 0.3745401188473625
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how to access the global state. However, you can use a RandomState object and pass it along. Random distributions are attached to it, so you call them as methods.</p>
<p>Example:</p>
<pre><code>import numpy as np

def computation(parameter, rs):
    return parameter*np.sum(rs.uniform(size=5)-0.5)

my_state = np.random.RandomState(seed=3)

print(computation(3, my_state))
</code></pre>
</div>
<span class="comment-copy">@user2357112 In general I would not expect modules to be picklable, since they can contain all manner of unpicklable objects (C extensions, lambdas, closures etc.)</span>
<span class="comment-copy">@ali_m: I could've sworn they were pickled and unpickled by name, just like functions and classes, but apparently not. When I try it, I get an error too.</span>
<span class="comment-copy">@user2357112 There's nothing <i>intrinsically</i> unpicklable about modules. As long as they contain only picklable objects then you're fine, but for most non-trivial modules this isn't the case. For example, numpy is riddled with unpicklable C extensions.</span>
<span class="comment-copy">Indeed, this seems to be more future-proof than directly using _rand. Thanks, I didnt know hat there was such a thing as a <code>__self__</code> attribute.</span>
<span class="comment-copy">This is what I decided to do when I posted the question, however I was hoping that there was some way I could acheive this without tapping hidden members (for future-proofness). user2357112's method seems to allow that. So I've chosen that as the answer. Thanks for the response nonetheless.</span>
