<div class="post-text" itemprop="text">
<p>Input: array of float time values (in seconds) relative to program start. [0.452, 0.963, 1.286, 2.003, ... ]. They are not evenly spaced apart.</p>
<p>Desired Output: Output text to console at those times (i.e. printing '#')</p>
<p>My question is what is the best design principle to go about this. Below is my naive solution using time.time.</p>
<pre><code>times = [0.452, 0.963, 1.286, 2.003]
start_time = time.time()
for event_time in times:
    while 1:
        if time.time() - start_time &gt;= event_time:
            print '#'
            break
</code></pre>
<p>The above feels intuitively wrong using that busy loop (even if its in its own thread). </p>
<p>I'm leaning towards scheduling but want to make sure there aren't better design options: <a href="https://stackoverflow.com/questions/8600161/executing-periodic-actions-in-python">Executing periodic actions in Python</a></p>
<p>There is also the timer object: <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">timers</a></p>
<p>Edit: Events only need 10ms precision, so +/- 10ms from exact event time.</p>
</div>
<div class="post-text" itemprop="text">
<p>A better pattern than busy waiting might be to use time.sleep().  This suspends execution rather than using the CPU.</p>
<pre><code>time_diffs = [0.452, 0.511, 0.323, 0.716]
for diff in time_diffs:
    time.sleep(diff)
    print '#'
</code></pre>
<p>Threading can also be used to similar effect.  However both of these solutions only work if the action you want to perform each time the program 'restarts' takes negligible time (perhaps not true of printing).</p>
<p>That being said no pattern is going to work if you are after 10ms precision and want to use Python on a standard OS.  I recommend this question on <a href="https://stackoverflow.com/questions/7079864/real-time-operating-via-python">Real time operating via Python</a> which explains both that GUI events (i.e. printing to a screen) are too slow and unreliable for that level of precision, that your typical OSs where Python is run do not guarantee that level of precision and that Python's garbage collection and memory management also play havoc if you want 'real-time' events.  </p>
</div>
<span class="comment-copy">Do you really need 1 millisecond precision as your question implies?</span>
<span class="comment-copy">No - only needs to be roughly 10 milliseconds (so the event could occur 10 ms before or after it's exact time).</span>
<span class="comment-copy">take a look at <a href="https://docs.python.org/2/library/sched.html" rel="nofollow noreferrer">sched</a> module, it might be helpful.</span>
