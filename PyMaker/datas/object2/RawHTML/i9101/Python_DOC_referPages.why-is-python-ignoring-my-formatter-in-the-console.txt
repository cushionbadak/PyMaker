<div class="post-text" itemprop="text">
<p>am working on a Python app that implements  logger features</p>
<p>Here is my code which is taken form the official <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">site</a>:</p>
<pre><code>import logging

#create logger
logger = logging.getLogger("simple_example")
logger.setLevel(logging.DEBUG)

#create console handler and set level to debug
fh = logging.RotatingFileHandler(MyFile, etc)
fh.setLevel(logging.DEBUG)

#create formatter
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - 
   %(message)s")
#add formatter to fh
fh.setFormatter(formatter)
#add fh to logger
logger.addHandler(fh)

#"application" code
logger.debug("debug message")
logger.info("info message")
logger.warn("warn message")
logger.error("error message")
logger.critical("critical message")
</code></pre>
<p>and here is the output in the File: <strong>which is perfect</strong></p>
<blockquote>
<p>2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message</p>
<p>2005-03-19 15:10:26,620 - simple_example - INFO - info message</p>
<p>2005-03-19 15:10:26,695 - simple_example - WARNING - warn message</p>
<p>2005-03-19 15:10:26,697 - simple_example - ERROR - error message</p>
<p>2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message</p>
</blockquote>
<p><strong>but</strong> here is the output in the terminal: </p>
<blockquote>
<p>DEBUG: debug message</p>
<p>INFO: info message</p>
<p>WARNING: warn message</p>
<p>ERROR: error message</p>
<p>CRITICAL: critical message</p>
</blockquote>
<p>that drives me crazy since i can not get to see the timestamp in the console...</p>
<p>I have tried too creating another handler:</p>
<pre><code>ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
</code></pre>
<p>and the adding it to logger...</p>
<p>but the only thing I get is that the logger in printing twice every msg in the console... one perfectly ok and the wrong one as I explained at begin</p>
</div>
<div class="post-text" itemprop="text">
<p>The console output can be adjusted separately using <code>StreamHandler</code>, for which you have to add the formatter as well:</p>
<pre><code>#create console handler and set level to debug
fh = logging.RotatingFileHandler(MyFile, etc)
fh.setLevel(logging.DEBUG)

#create formatter
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - 
   %(message)s")
#add formatter to fh
fh.setFormatter(formatter)
#add fh to logger
logger.addHandler(fh)

ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch.setFormatter(formatter)
logger.addHandler(ch)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I use for logging in a file and in the console:</p>
<pre><code>logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s\t%(message)s', datefmt='%m-%d %H:%M', filename=logfile, filemode='a')
# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
# set a format which is simpler for console use
formatter = logging.Formatter('%(asctime)s %(levelname)s\t%(message)s')
# tell the handler to use this format
console.setFormatter(formatter)
# add the handler to the root logger
logging.getLogger('').addHandler(console)
# Now, we can log to the root logger, or any other logger. First the root...
logging.info('LOGGING PATH: %s', logfile)
</code></pre>
<p>Then you can set the same output for both the file and the console. </p>
</div>
<div class="post-text" itemprop="text">
<p>A initialization in the basic configuration on the logger is necessary for that:</p>
<pre><code>logging.basicConfig(stream√§0sys.stdout, level=logging.INFO, format=myFormat)
</code></pre>
<p>where </p>
<pre><code>myFormat= "%(asctime)-15s %(clientip)s %(user)-8s %(message)s"
</code></pre>
</div>
<span class="comment-copy"><code>fh.setFormatter</code> doesn't set the formatter to <code>logger</code>, so what's the issue?</span>
<span class="comment-copy">that is the issue, I want that fh either log in the console with the format I set or dont log at all in the console but just in file...</span>
<span class="comment-copy">Seems you copied the first example on that page, not the <i>Multiple handlers and formatters</i> one that probably gets you closer to what you want</span>
<span class="comment-copy">I have only one handler (the rotatingFileHandler) which other do you mean?</span>
<span class="comment-copy">the StreamHandler one.</span>
<span class="comment-copy">Its often not a good idea to use basicConfig. For example I am using a Flask app, and Flask also uses logging. When I want to add custom information to the logs it will cause the logger inside Flask to fail. See <a href="https://stackoverflow.com/a/42028365/540725">Thomas Lehoux answer</a> for a logger-specific solution</span>
