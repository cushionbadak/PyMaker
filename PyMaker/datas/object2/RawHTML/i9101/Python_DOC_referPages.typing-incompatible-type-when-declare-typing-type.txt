<div class="post-text" itemprop="text">
<p>For the following code</p>
<pre><code># -*- coding: utf-8 -*-
import typing


class A(object):
    pass

class B(A):
    pass

class C(A):
    pass

class D(A):
    pass

class E(A):
    pass

MAPPING_X = {
    B: 'b',
    C: 'c',
}
MAPPING_Y = {
    D: 'd',
    E: 'e',
}

all_mappings = {}  # type: typing.Dict[typing.Type[A], str]
all_mappings.update(MAPPING_X)
all_mappings.update(MAPPING_Y)
</code></pre>
<p>mypy return following errors (python 3.4):</p>
<pre><code>t.py:30: error: Argument 1 to "update" of "dict" has incompatible type Dict[type, str]; expected Mapping[Type[A], str]
t.py:31: error: Argument 1 to "update" of "dict" has incompatible type Dict[type, str]; expected Mapping[Type[A], str]
</code></pre>
<p>I don't understand how specify i want subclases of <code>A</code> as Dict keys. How to declare type ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I may not be understanding how the <code>typing</code> and <code>mypy</code> modules work, but there seems to be some kind of bug going on here. If I do this (example adapted from the <code>typing.Type</code> section of the <a href="https://docs.python.org/3/library/typing.html#classes-functions-and-decorators" rel="nofollow noreferrer">docs</a>):</p>
<pre><code>import typing

class User(): pass
class BasicUser(User): pass

def make_new(u: typing.Type[User]) -&gt; User:
    return u()

x = make_new(BasicUser)
</code></pre>
<p>There is no <code>mypy</code> error. If I do this: </p>
<pre><code>import typing

class A():
    pass

MAPPING_X = {
    A: 'a',
}
all_mappings = {}  # type: typing.Dict[typing.Type[A], str]
all_mappings.update(MAPPING_X)
</code></pre>
<p>There is also no error. However, this does produce the <code>mypy</code> error: </p>
<pre><code>import typing

class A():
    pass

class B(A):
    pass

MAPPING_X = {
    A: 'a',
    B: 'b',
}

all_mappings = {}  # type: typing.Dict[typing.Type[A], str]
all_mappings.update(MAPPING_X)
</code></pre>
<p>Based upon my understanding of the documentation, this error shouldn't be happening. </p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are doing this correctly, but it is required to declare the types for the <code>MAPPING_X</code> and <code>MAPPING_Y</code> first. This fixes the problem. </p>
<pre><code># -*- coding: utf-8 -*-
import typing

class A(object):
    pass

class B(A):
    pass

class C(A):
    pass

class D(A):
    pass

class E(A):
    pass

MAPPING_X = {}  # type: typing.Dict[typing.Type[A], str]
MAPPING_Y = {}  # type: typing.Dict[typing.Type[A], str]

MAPPING_X = {
    B: 'b',
    C: 'c',
}
MAPPING_Y = {
    D: 'd',
    E: 'e',
}

all_mappings = {}  # type: typing.Dict[typing.Type[A], str]
all_mappings.update(MAPPING_X)
all_mappings.update(MAPPING_Y)
</code></pre>
<p>No <code>mypy</code> errors. </p>
<p>However, it seems to me that your code as written should work, and that this is the symptom of a bug. </p>
</div>
<span class="comment-copy">@JacquesGaudin OP is using the <a href="http://mypy.readthedocs.io/en/latest/basics.html" rel="nofollow noreferrer"><code>mypy</code> module</a> to conduct type checking. It does produce the error.</span>
<span class="comment-copy">@RickTeachey Thanks, I didn't realize that.</span>
