<div class="post-text" itemprop="text">
<p>There is a convenient thing in Pascal which is typed binary files.</p>
<p><strong>Description from <a href="http://wiki.freepascal.org/File#Typed_binary" rel="nofollow noreferrer">Free Pascal wiki</a></strong></p>
<blockquote>
<p>The type <code>file of &lt;type&gt;</code>, where <code>&lt;type&gt;</code> is any simple type (no references/pointers) or record type, is a binary file representing a sequence of  values. For example, you can have files that are a sequence of integers, floating-point values, or records (as long as all record fields are also simple types). </p>
</blockquote>
<p>I wonder if I can use something like this with Python data types, C++ classes or just C-like plain structs, i.e. with something more complex than primitive number types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python(3) basically has three types of files;</p>
<ul>
<li>text</li>
<li>binary</li>
<li>raw</li>
</ul>
<p>See the documentation for the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">io</a> module.</p>
<p>Using binary files and <code>struct</code> you could basically create iterators over arbitrary file types.</p>
</div>
<div class="post-text" itemprop="text">
<p>In C++, the file layout is determined by the programmer.<br/>
The language provides a <code>binary</code> mode in which data is not translated to or from the file.  </p>
<p>Also, some types may contain <em>pointers</em> which are valid when written to a file because the items pointed to may be loaded into different locations by the operating system.  </p>
<p>Search the internet for "c++ serialization".  </p>
</div>
<span class="comment-copy">Maybe the <a href="https://docs.python.org/2/library/struct.html" rel="nofollow noreferrer">struct</a> packge is what you are looking for.</span>
<span class="comment-copy">@juanpa.arrivillaga - That seems to be what I need. I'm still interested in c++ analog though</span>
<span class="comment-copy">For C++, the keyword I'm thinking of is serialization. And of course, boost has a thing for it: <a href="http://www.boost.org/doc/libs/1_36_0/libs/serialization/doc/index.html" rel="nofollow noreferrer">boost.org/doc/libs/1_36_0/libs/serialization/doc/index.html</a></span>
<span class="comment-copy">@Lagerbaer - I need to use binary files. That's the point of work</span>
<span class="comment-copy">Yeah and from that link: "Here, we use the term "serialization" to mean the reversible deconstruction of an arbitrary set of C++ data structures to a sequence of bytes." Sequence of bytes = binary files.</span>
<span class="comment-copy">My guess is that the OP wants to define a file of packed structs without automated types. How would one do that in C++? Pascal differentiates between a binary file from which you manually read structs, and a file that contains <i>only</i> a certain struct in a language enforced way.</span>
<span class="comment-copy">@MarcovandeVoort:  In C++, files don't contain types.  You read a quantity of bytes from the file.  You can read them into a variable (record).</span>
<span class="comment-copy">Yes, that was what I guessed from my limited plain C experience (but wasn't sure for C++). C++ doesn't have proper typed file support. But in Pascal serialization of a struct to to "file of byte" or to file of &lt;somestruct&gt;  are different things. E.g. a seek on a "file of &lt;struct&gt;" will be in granularity of sizeof(struct), so seek(f,2) will select the third record etc.Raw files can have granularity too (e.g. pagesize 4096/8192 bytes for memory mapped files is a practical example)</span>
<span class="comment-copy">@ThomasMatthews How do I read bytes directly into a variable?</span>
<span class="comment-copy">You use the block read method, <a href="http://en.cppreference.com/w/cpp/io/basic_istream/read" rel="nofollow noreferrer">std::ifstream::read</a>.  You can use <code>sizeof</code> for POD types.  For records, you should perform I/O on individual data members.  <i>Search the internet for "C++ serialization"</i>.</span>
