<div class="post-text" itemprop="text">
<pre><code>import numpy as np
row_num=24983
col_size = 102
arr = np.zeros((row_num,col_num))
arr[:,0]= np.arange(row_num)
</code></pre>
<p>When I write it, it gives me scientific notation array like,</p>
<pre><code>array([[  0.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
       [  1.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
       [  2.00000000e+00,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
       ..., 
       [  2.49800000e+04,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
       [  2.49810000e+04,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00],
       [  2.49820000e+04,   0.00000000e+00,   0.00000000e+00, ...,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00]])
</code></pre>
<p>but I don't desire it. I'm wanting normal numpy array like,</p>
<pre><code>array([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 1.,  0.,  0., ...,  0.,  0.,  0.],
       [ 2.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 24980.,  0.,  0., ...,  0.,  0.,  0.],
       [ 24981.,  0.,  0., ...,  0.,  0.,  0.],
       [ 24982.,  0.,  0., ...,  0.,  0.,  0.]])
</code></pre>
<p>Edit: I know np.set_printoptions but I'll write the array to a csv file and when I do it it still writing with scientific notation to file. What should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>To control the way the array is displayed, you could use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html#numpy.set_printoptions" rel="nofollow noreferrer">np.set_printoptions</a> to set a float formatting function:</p>
<pre><code>In [13]: np.set_printoptions(formatter={'float': '{:g}'.format})

In [14]: arr
Out[14]: 
array([[0, 0, 0, ..., 0, 0, 0],
       [1, 0, 0, ..., 0, 0, 0],
       [2, 0, 0, ..., 0, 0, 0],
       ..., 
       [24980, 0, 0, ..., 0, 0, 0],
       [24981, 0, 0, ..., 0, 0, 0],
       [24982, 0, 0, ..., 0, 0, 0]])
</code></pre>
<p>The meaning of the <code>g</code> format is <a href="https://docs.python.org/3.4/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">described here</a>. While the <code>g</code> format generally succeeds in presenting simple floats in a humanly readable way without exponential notation, it does not guarantee that exponential notation is never used.</p>
<p>Therefore, you might instead use the <code>f</code> format,
e.g. <code>np.set_printoptions(formatter={'float': '{:.2f}'.format})</code> if you wish to
present all floats with a fixed level of precision. This guarantees that no exponential notation is used.</p>
<hr/>
<p>Alternatively, you could use</p>
<pre><code>In [25]: np.set_printoptions(suppress=True)

In [26]: arr
Out[26]: 
array([[     0.,      0.,      0., ...,      0.,      0.,      0.],
       [     1.,      0.,      0., ...,      0.,      0.,      0.],
       [     2.,      0.,      0., ...,      0.,      0.,      0.],
       ..., 
       [ 24980.,      0.,      0., ...,      0.,      0.,      0.],
       [ 24981.,      0.,      0., ...,      0.,      0.,      0.],
       [ 24982.,      0.,      0., ...,      0.,      0.,      0.]])
</code></pre>
<p><code>suppress=True</code> tells <code>np.set_printoptions</code> to suppress the printing of small floating point values using scientific notations.</p>
<hr/>
<p>To create a CSV file use</p>
<pre><code>np.savetxt(filename, arr, fmt='%g')
</code></pre>
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html" rel="nofollow noreferrer">The <code>fmt</code> parameter</a> allows you to control the float format using <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">printf-style string formatting</a>.</p>
</div>
<span class="comment-copy">thanks, it's working on terminal but, in addition to this, I'll write the array to a csv file and when I do it it still writing with scientific notation</span>
<span class="comment-copy">Use <code>np.savetxt(filename, arr, fmt='%g')</code> to create the CSV. The <code>fmt</code> parameter allows you to control the float format.</span>
<span class="comment-copy">Thanks! It worked. Can I ask a question? My english is bad, so I don't understand which link is given from you. Can you explain  	understandable it what is format g or G or b etc.</span>
<span class="comment-copy">Roughly speaking, the <code>g</code> format presents floats in simple, humanly readable format when possible. The <code>G</code> format is the same a <code>g</code> except that a capital <code>E</code> is used instead of a small <code>e</code> when exponential format is required.</span>
