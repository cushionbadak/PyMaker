<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>l = [['act137L', 'act222J1', 'act45k', 'bac003', 'bac19004', 'cob55C37'],
     ['act3947', 'act658ll', 'act3FjL', 'bac57D73', 'cob00091', 'cob1A4']]
</code></pre>
<p>and I would like to put the first instance of <code>'act...'</code>, <code>'bac...'</code>, and <code>'cob...'</code> from each sublist into another list to obtain:</p>
<pre><code>l2 = [['act137L', 'bac003', 'cob55C37'], ['act3947', 'bac57D73', 'cob00091']]  
</code></pre>
<p>How can I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>This function should work:</p>
<pre><code>def get_firsts(the_lists, terms):
    ret_lists = []
    for a_list in the_lists:
        new_list = []
        rest_terms = terms[:]
        while rest_terms:
            for val in a_list:
                for term in rest_terms[:]:
                    if val.startswith(term):
                        new_list.append(val)
                        rest_terms.remove(term)
        ret_lists.append(new_list)
    return ret_lists
</code></pre>
<p>Use it as such:</p>
<pre><code>&gt;&gt;&gt; get_firsts(l, ['act','bac','cob'])
[['act137L', 'bac003', 'cob55C37'], ['act3947', 'bac57D73', 'cob00091']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a List comprehension:</p>
<pre><code>l2 = [[j[i] for i in range(len(j)) if j[i][:3] not in ''.join(k for k in j[:i])] for j in l]
</code></pre>
<p>This adds the elements only to the newly constructed sublist if no such element was added yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> with first three letters as key to collect the values:</p>
<pre><code>from collections import OrderedDict

l = [['act137L', 'act222J1', 'act45k', 'bac003', 'bac19004', 'cob55C37'],
     ['act3947', 'act658ll', 'act3FjL', 'bac57D73', 'cob00091', 'cob1A4']]

def first_items(l):
    res = []
    for sublist in l:
        d = OrderedDict()
        for x in sublist:
            d.setdefault(x[:3], x)
        res.append(list(d.values()))

    return res

print(first_items(l))
</code></pre>
<p>Output:</p>
<pre><code>[['act137L', 'bac003', 'cob55C37'], ['act3947', 'bac57D73', 'cob00091']]
</code></pre>
<p>In above <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault</code></a> sets the value if key is not present in the <code>dict</code>. If key already exists it doesn't change the <code>dict</code> thus the first value set is preserved. </p>
<p>If you know that items with same prefix are always next to each other in the lists you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a>:</p>
<pre><code>from itertools import groupby

res = [[next(g) for _, g in groupby(sublist, lambda x: x[:3])] for sublist in l]
</code></pre>
</div>
<span class="comment-copy">This solution doesn't work as posted. It works when removing the while statement. Thank you!</span>
