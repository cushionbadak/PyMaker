<div class="post-text" itemprop="text">
<p>Is there any way to get a tkinter widget to update after an input into an Entry widget is completed? </p>
<p><a href="https://i.stack.imgur.com/egSX6.png" rel="nofollow noreferrer">https://i.stack.imgur.com/egSX6.png</a></p>
<p>The original Elo program was done with a Form in Access. When the player entries are filled, the Label/Entries denoted by the $ would search through the database and display information.</p>
<p>Is there some way of having the Label update while the GUI is running? A trigger for it could be when character count in the Entry field is 3 characters. I don't know how/if it's possible to make a Label/Entry update after the GUI is already running.</p>
<p>Edit:    </p>
<pre><code>def update_winner():
    cursor = conn.cursor()
    winner = winner_id.get()
    school = school_name.get()
    temp = school+winner

    if len(temp) == 5:

        cursor.execute("SELECT Rating FROM KIDS WHERE LocalID = ?", temp)
        rating=cursor.fetchval()
        cursor.execute("SELECT FirstName FROM KIDS WHERE LocalID = ?", temp)
        name=cursor.fetchval()

        winner_name.set(name)

loser_id.trace("w",update_loser)
winner_id.trace("w",update_winner)

ratings.mainloop()
</code></pre>
<p>When I run the code like this, as soon as I enter text into the winner_id box I get this error: TypeError: update_winner() takes 0 positional arguments but 3 were given</p>
</div>
<div class="post-text" itemprop="text">
<p>You can associate an instance of <code>StringVar</code> to the entry widget and then put a trace on the variable. The trace will be called whenever the variable value changes, and the value changes whenever the user types into the entry widget.</p>
<p>In the function that is called, you can change the value that is displayed in a label with the <code>configure</code> method.</p>
<p>Here's a brief example. In this example, when you type into the entry widget, the label will be updated to display what is entered.</p>
<pre><code>import tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        self.v1 = tk.StringVar()
        self.e1 = tk.Entry(self, textvariable=self.v1)
        self.l1 = tk.Label(self)

        self.e1.pack(side="top", fill="x")
        self.l1.pack(side="top", fill="x")

        self.v1.trace("w", self.on_change)

    def on_change(self, *args):
        self.l1.configure(text="You entered: '%s'" % self.v1.get())

root = tk.Tk()
Example(root).pack(fill="both", expand=True)
root.mainloop()
</code></pre>
<p>You can of course do anything you want in the variable trace, such as look up values in a database. </p>
</div>
<span class="comment-copy">According to the description, it seems to be not related to Azure. If not, please improve your description about using Azure.</span>
<span class="comment-copy">In python 3.6, the <code>trace</code> method uses an obsolete Tcl command and the new <code>trace_add</code> method should be used instead (<a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html</a>, tkinter section). The syntax is slightly different: <code>self.v1.trace_add("write", self.on_change)</code>.</span>
<span class="comment-copy">Semi-related question: why does every example for tkinter use a class to hold the tkinter Frame? Is that just best practice or is it necessary? Right now my code doesn't have the tkinter code within any method or class, it just starts on initialization of the program-- is it necessary to change it?</span>
<span class="comment-copy">@user3364161: It's definitely not necessary. It's just that having a class gives you a way to share data without using globals, and it makes it easier to present code in a way that is more readable (eg: I can define methods later in the file than the code that uses the methods.)</span>
<span class="comment-copy">I edited my original post to contain the new code I added. There aren't any errors and all the variables are initialized earlier in the code, but the interface doesn't update.  I think it's because I never call ratings.mainloop()?</span>
