<div class="post-text" itemprop="text">
<p>I'm starting to learn Go after other languages. Go has a very <a href="https://splice.com/blog/iota-elegant-constants-golang/" rel="nofollow noreferrer">elegant way of creating constants</a> with numeric values like:</p>
<pre><code>const (
    _      = iota    // 0 and is skipped
    Sunday           // 1
    Monday           // 2
    ...
)
</code></pre>
<p>This is very easy to write, but is it really easy to maintain? For example, if you suddenly insert new value to between present, all subsequent will change their values. And it will be hard to find, only scrupulous diff reading can reveal it.  Or errors on other parts. How can I extract these values with names and use in other parts of a program, or in database? 
For example for PostgreSQL I can define:</p>
<pre><code>CREATE TYPE color AS ENUM ('', 'Sunday', 'Monday');
</code></pre>
<p>Just to illustrate an idea. For example, <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python has Enum</a> type:</p>
<pre><code>from enum import Enum
class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3
</code></pre>
<p>Then you may use it like <code>Color.RED</code>. Next I can take all values:</p>
<pre><code>list(Color)
[&lt;Color.RED: 1&gt;, &lt;Color.BLUE: 2&gt;, &lt;Color.GREEN: 3&gt;]
</code></pre>
<p>This allows me to "introspect" to module and create easily-readable enums in databases. For example for PostgreSQL I can define:</p>
<pre><code>CREATE TYPE color AS ENUM ('RED', 'GREEN', 'BLUE');
</code></pre>
<p>How can I:</p>
<ol>
<li>Reflect golang constants names?</li>
<li>Make error-proof constants which cannot drift their values? Only fix them manually?</li>
<li>May be there's an idiomatic way to do it better?</li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>1) You can use stringer to generate the names <a href="https://godoc.org/golang.org/x/tools/cmd/stringer" rel="nofollow noreferrer">https://godoc.org/golang.org/x/tools/cmd/stringer</a></p>
<p>2) Not sure what you mean? Most languages will allow you to drift values, you should always add to the end of the list if you want the number to stay constant, or like in python you could explicitly set each value to a number instead of using iota.</p>
<p>3) Not really, enums just aren't great in golang</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a suggestion, but something that might help in your case: I find that constants are less likely to be changed/broken later on if it's clear that the values look like bit masks, which you can do in go like so:</p>
<pre><code>const (
    Red   = 1 &lt;&lt; iota
    Green
    Blue
) // values = 1, 2, 4
</code></pre>
<p>And, even though it's not the prettiest of declarations, you can include the mask constants, too</p>
<pre><code>const (
    Red, RedMask = 1 &lt;&lt; iota, 1&lt;&lt; iota - 1 // Red = 1, RedMask = 0
    Green, GreenMask                       // Green = 2, mask = 1
    Blue, BlueMask                         // 4, 3
    RGB, RGBMask                           // 8, 7
)
</code></pre>
<p>This, coupled with a designated <code>type</code> for these constants might be useful:</p>
<pre><code>type ColourConst int
const (
    Red, RMask ColourConst = 1 &lt;&lt; iota, 1 &lt;&lt; iota-1
    // ...
    _, All
)

// something like this (untested, might not be correct)
func (c ColourConst) validate() error {
    mask := int(c) &amp; (-1 * int(c))
    if mask != int(c) {
        return errors.New("Colour is not a single bit value")
    }
    if s := c &amp; All; s != c {
        return errors.New("Colour is not in range")
    }
}
</code></pre>
<p>I know that the days of the week are unlikely to be used as bitmasks, but it makes it less likely for people to break the code. At the very least, it communicates that the order of the constants matter, that's what <code>iota</code> does IMO.</p>
</div>
<div class="post-text" itemprop="text">
<p>Solution.
There're excellent modules <a href="https://github.com/alvaroloes/enumer" rel="nofollow noreferrer">Enumer</a> and Enumelinter</p>
</div>
<span class="comment-copy">The value shouldn't matter if they change, because you should <i>only</i> use the constants by name. That's a primary reason for declaring the constants like this, rather than using the literal values.</span>
<span class="comment-copy">Yes, while all values are in one progam they don't matter. But I'd like to use them in others, and so I have to translate some numeric values. Once I've used them, I cannot change them. Or try to avoid totally numbers and stick to strings only? Thx</span>
<span class="comment-copy">Thanks. 2) I mean some way to don't allow constants change their values, if new developer suddenly inserted value not at the end.</span>
<span class="comment-copy">yeah, either make sure they add them to the end of the list or explicitly set them to a value instead of using iota</span>
