<div class="post-text" itemprop="text">
<p>My input string contains various entities like this: 
<strong>conn_type://host:port/schema#login#password</strong></p>
<p>I want to find out all of them using regex in python.</p>
<p>As of now, I am able to find them one by one, like </p>
<pre><code>conn_type=re.search(r'[a-zA-Z]+',test_string)
  if (conn_type):
    print "conn_type:", conn_type.group()
    next_substr_len = conn_type.end()
    host=re.search(r'[^:/]+',test_string[next_substr_len:])
</code></pre>
<p>and so on.</p>
<p>Is there a way to do it <strong>without if and else</strong>?
I expect there to be some way, but not able to find it. Please note that every entity regex is different.</p>
<p>Please help, I don't want to write a boring code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;import re
&gt;&gt;&gt;uri = "conn_type://host:port/schema#login#password"
&gt;&gt;&gt;res = re.findall(r'(\w+)://(.*?):([A-z0-9]+)/(\w+)#(\w+)#(\w+)', uri)
&gt;&gt;&gt;res
[('conn_type', 'host', 'port', 'schema', 'login', 'password')]
</code></pre>
<p>No need for ifs. Use findall or finditer to search through your collection of connection types. Filter the list of tuples, as need be.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you use re.findall?</p>
<p>Here is an example: </p>
<pre><code>import re;

s = 'conn_type://host:port/schema#login#password asldasldasldasdasdwawwda conn_type://host:port/schema#login#email';

def get_all_matches(s):
    matches = re.findall('[a-zA-Z]+_[a-zA-Z]+:\/+[a-zA-Z]+:+[a-zA-Z]+\/+[a-zA-Z]+#+[a-zA-Z]+#[a-zA-Z]+',s);
    return matches;

print get_all_matches(s);
</code></pre>
<p>this will return a list full of matches to your current regex as seen in this example which in this case would be:</p>
<pre><code>['conn_type://host:port/schema#login#password', 'conn_type://host:port/schema#login#email']
</code></pre>
<p>If you need help making regex patterns in Python I would recommend using the following website:</p>
<p><a href="https://regex101.com/" rel="nofollow noreferrer">A pretty neat online regex tester</a></p>
<p>Also check the re module's documentation for more on re.findall</p>
<p><a href="https://docs.python.org/2/library/re.html#finding-all-adverbs" rel="nofollow noreferrer">Documentation for re.findall</a></p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you like it DIY, consider creating a <a href="https://docs.python.org/3/library/re.html#writing-a-tokenizer" rel="nofollow noreferrer">tokenizer</a>. This is very elegant "python way" solution.</p>
<p>Or use a standard lib: <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html</a> but note, that your sample URL is not fully valid: there is no schema 'conn_type' and you have two anchors in the query string, so <code>urlparse</code> wouldn't work as expected. But for real-life URLs I highly recommend this approach. </p>
</div>
<span class="comment-copy">Could you add a bit of actual input to the question and expected matches?</span>
<span class="comment-copy">Thanks Gregory. I was not able to find the grouping options of a match with (). It worked for me. Really really helpful</span>
<span class="comment-copy">writing a tokenizer for this task is absolutely overqualified, and a simple <code>re.findall</code> is a more elegant approach</span>
