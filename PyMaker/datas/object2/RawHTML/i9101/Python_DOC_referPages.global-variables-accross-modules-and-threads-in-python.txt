<div class="post-text" itemprop="text">
<p>I have a config file config.py which holds a global variable, i.e. in config.py I have (5 is the default)</p>
<pre><code># config.py
globalVar = 5
</code></pre>
<p>Now in a module run.py I'm setting the global variable and then I call a printing function:</p>
<pre><code># run.py
import config
import test
config.globalVar = 7
test.do_printing()

# test.py
import config
def do_printing():
  print(config.globalVar)
</code></pre>
<p>This works well (i.e. 7 is printed) but if I use multiple threads for printing (in test.py) it does not work anymore, i.e. then the threads do not see the change made by run.py (i.e. 5 is printed).</p>
<p>How can this be solved?</p>
</div>
<div class="post-text" itemprop="text">
<p>Even when running on the same thread you might have issues doing that. For example, if you do  <code>from config import globalVar</code>  instead, if you rebind globalVar in the local module, it just looses the reference to the object in the config module. </p>
<p>And even if you don't do that, if changes to the variable take place at import time of your various modules, it is very hard to keep track of the actual import order.</p>
<p>When you add threads, that just becomes 100% unmanageable, due to all sorts of race conditions. Other than a race condition (i.e. one of your threads reads the variable before it has been set on the other thread), or incorrect importing, threads should not affect the visibility of global variable changes in the way you describe.</p>
<p>The solution for having deterministic code is to use data structures that are appropriate for that interchange across threads (and data protection across threads).</p>
<p>The <code>threading</code> module itself offers the  <a href="https://docs.python.org/3/library/threading.html#event-objects" rel="nofollow noreferrer"><code>Event</code></a> object that you can use for one thread to wait <em>for sure</em> until the other changes the value you are expecting: </p>
<p>config.py:</p>
<pre><code>changed = Event()
changed.clear()

global_var = 5
</code></pre>
<p>module in worker thread:</p>
<pre><code>import config

def do_things():
    while True:
        config.changed.wait()  # blocks until other thread sets the event
        do_more_things_with(config.global_var)
</code></pre>
<p>and on the main thread:        </p>
<pre><code>import config

config.global_var = 7
config.changed.set()  # FRees the waiting Thread to run
</code></pre>
<p>Note in the above code, I always refer to the objects in config with the dotted notation. That makes no difference for the "event" object - I could do <code>from config import changed</code> - since I am dealing with internal states of the same object, it would work - but if I do <code>from config import global_var</code> and reassign it with <code>global_var = 7</code> , that only changes where the  <code>local_var</code> name in the current module's context points. The <code>config.local_var</code> still references the original value.</p>
<p>And since you are at it, it is worth taking a look on the <a href="https://docs.python.org/3/library/queue.html#module-Queue" rel="nofollow noreferrer">queue module</a>, as well as on <a href="https://docs.python.org/3/library/threading.html#thread-local-data" rel="nofollow noreferrer">thread-local</a> objects</p>
<h1>When it still does not work</h1>
<p>Another possibility for not seeing the changes is that, since the parallelism is not in your code, but in another library, it is spawning Processes with th e <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer"><code>multiprocessing</code></a> module instead of threads.</p>
<p>The problems you have if you were expecting Threads and having multiprocessing-spawned processes would be exactly what you describe: of changes to global variables not being visible in others (simply because each process has its own variables, of course).</p>
<p>If that is the case, it is possible to have (numeric, typed), objects that are synchronized across the processes. Check the <a href="https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects" rel="nofollow noreferrer"><code>Array</code> and <code>Value</code></a> classes, and <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Queue" rel="nofollow noreferrer">multiprocessing <code>Queue</code></a> to be able to send and receive (mostly) arbitrary objects.</p>
<p>(Add a <code>import multiprocessing; print(multiprocessing.current_process())</code> line to your code to be sure. Independent of the result, please suggest the maintainers of RandomizedSearchCV  documentation to mention explicitly what they are doing for parallelism)</p>
</div>
<span class="comment-copy">What does it give you instead?</span>
<span class="comment-copy">@CheynShmuel It prints 5 (the default). So I think the threads create their own copy of config.py.</span>
<span class="comment-copy">When do you run <code>run.py</code>??</span>
<span class="comment-copy">@CheynShmuel I have updated run.py. I first set the variable in the config file and then I call a printing function. If there is only a single thread it prints 7 (as expected). If I use several threads for the printing, each thread prints 5.</span>
<span class="comment-copy">Could you display your code of running the threads, please?</span>
<span class="comment-copy">Thanks for your answer but it does not work... there is no progress... The threads seem to create a new copy of the config and then they wait forever for the signal to continue... By the way I'm using RandomizedSearchCV which spawns the threads.</span>
<span class="comment-copy">I didn't mention it, but if your application uses "multiprocessing" instad of "threading" that is exactly what would happen - although, API wise, both modules are identical.  Are you sure the library is spawning threads and not sub-processes  ?</span>
<span class="comment-copy">Oh from the documentation it is not clear if RandomizedSearchCV uses multiprocessing. How could the problem be solved with multiprocessing?</span>
<span class="comment-copy">I've  added what to do to the answer.</span>
