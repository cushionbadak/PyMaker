<div class="post-text" itemprop="text">
<p>For example, let's say I have a vector function mapping R2 to R2, for instance:</p>
<pre><code>fun = lambda x1, x2: [x1**2 + 1, x2**2 - x1]
</code></pre>
<p>I'd like something that allows me to do this:</p>
<pre><code>for f in components(fun):
    print(f(2,3))  # Print first 5, then 7
</code></pre>
<p>Note: I'm not asking how to iterate over the components of one out, which is trivial (for val in f(2,3):), but how to iterate over the functions computing each component in the output. Is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well you could do some trick, although you will need to explicitly state the expected number of components, since there is no way to tell how many outputs a Python function will have (unless you do something like "probing" the function with test values, which is also a possibility but more complex):</p>
<pre><code>def components(fun, n):
    for i in range(n):
        yield lambda *args, **kwargs: fun(*args, **kwargs)[i]
</code></pre>
<p>Then your loop could be:</p>
<pre><code>for f in components(fun, 2):
    print(f(2,3))
</code></pre>
<p>If you want to avoid repeating computations, you can use some kind of memoization. In Python 3 you can use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>lru_cache</code></a>:</p>
<pre><code>from functools import lru_cache

def components(fun, n):
    # You can tune lru_cache with a maxsize parameter
    fun = lru_cache()(fun)
    for i in range(n):
        yield lambda *args, **kwargs: fun(*args, **kwargs)[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want a list of functions:</p>
<pre><code>R2map = [lambda x: x+3, lambda x: x-4]
</code></pre>
<p>To make this into s function accepting two arguments:</p>
<pre><code>R2 = lambda x,y: [R2map[0][x],R2map[1][y]]
</code></pre>
<p>If you want a list of functions, and not a function returning a list, then do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think it's possible to do what you ask, since in this case there are not two different functions. It is one function with a list as output, taking the two arguments as input.</p>
<p>You could make two different functions and concatenate this in one big function to get what you acces to two separate functions:</p>
<pre><code>fun_1 = lambda x1: x1**2 + 1
fun_2 = lambda x1, x2: x2**2 - x1
fun = lambda x1, x2: [fun_1(x1), fun_2(x1, x2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found out sympy converts such functions into a list of sympy expressions, so I ended up doing the following:</p>
<pre><code>from inspect import signature
import sympy

def components(function):
    # Determine number of argument function takes
    n_args = len(signature(function).parameters)
    # Allocate n symbols like x1, x2, ..., xn
    symbols = [sympy.Symbol("x"+str(i)) for i in range(1, n_args+1)]
    # Get list of expressions for the components of the input function
    expression_list = function(*symbols)

    # Convert each expression into a function and yield
    for expr in expression_list:
        yield lambda *args: sympy.lambdify(symbols, expr)(*args)

    return None

fun = lambda x1, x2: [x1**2 + 1, x2**2 - x1]

for f in components(fun):
    print(f(2,3))  # prints 5, 7
</code></pre>
</div>
<span class="comment-copy">Can you provide the expected input and the expected output?</span>
<span class="comment-copy">Not sure what you mean by this. The post includes an example function and the desired print output. In the two iterations, I want the function f to be first x1^2 + 1, then x2^2 - x1. This is hard to state as example output, as Python just prints the memory address of the function if you do print(f).</span>
<span class="comment-copy">In this case aren't you still just executing the whole function twice and getting the different values?</span>
<span class="comment-copy">@Skirrebattie Yes, but if that's not what you want I'm not sure what it is then. I mean, you want to have two different, independent functions, but such that when one is computed the value is somehow "cached" and used by the other one when called?</span>
<span class="comment-copy">I have no clue what the question asker wants ;) Was just checking.</span>
<span class="comment-copy">@Skirrebattie Oh, sorry! I mistook you for the OP :S</span>
