<div class="post-text" itemprop="text">
<p>The following xml-file (lieferungen.xml) contains several inconsistencies. Several of the items have more than one id (e.g. item "apfel" has 3 different IDs):</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;lieferungen xmlns="urn:myspace:lieferungen" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:myspace:lieferungen C:\xml\lieferungen.xsd"&gt;
    &lt;artikel id="3526"&gt;
        &lt;name&gt;apfel&lt;/name&gt;
        &lt;preis stueckpreis="true"&gt;8.97&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Krause&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7866"&gt;
        &lt;name&gt;Kirschen&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;10.45&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Helbig&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="4444"&gt; &lt;!--DIFFERENT ID FOR apfel!! --&gt;    
        &lt;name&gt;apfel&lt;/name&gt;
        &lt;preis stueckpreis="true"&gt;12.67&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Liebig&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7866"&gt;
        &lt;name&gt;Kirschen&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;17.67&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Krause&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="2345"&gt; &lt;!--DIFFERENT ID FOR apfel!! --&gt;
        &lt;name&gt;apfel&lt;/name&gt;
        &lt;preis stueckpreis="true"&gt;9.54&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Mertes&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7116"&gt; &lt;!--DIFFERENT ID FOR Kirschen!! --&gt;
        &lt;name&gt;Kirschen&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;16.45&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Hoeller&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7868"&gt;
        &lt;name&gt;Kohl&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;3.20&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Hoeller&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7866"&gt;
        &lt;name&gt;Kirschen&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;12.45&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Richard&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="3245"&gt;
        &lt;name&gt;Bananen&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;15.67&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Hoeller&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="6745"&gt; &lt;!--DIFFERENT ID FOR Kohl!! --&gt;     
        &lt;name&gt;Kohl&lt;/name&gt;
        &lt;preis stueckpreis="false"&gt;3.10&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Reinhardt&lt;/lieferant&gt;
    &lt;/artikel&gt;
    &lt;artikel id="7789"&gt;
        &lt;name&gt;Ananas&lt;/name&gt;
        &lt;preis stueckpreis="true"&gt;8.60&lt;/preis&gt;
        &lt;lieferant&gt;Fa. Richard&lt;/lieferant&gt;
    &lt;/artikel&gt;
&lt;/lieferungen&gt;
</code></pre>
<p>In order to find all inconsistencies in the file, I wrote the following sax-parser in python:</p>
<pre><code>import xml.sax
import sys


class C_Handler(xml.sax.ContentHandler):

    def __init__(self):
        self.items = {}
        self.items2 = {}
        self.read = 0
        self.id = 0

    def startDocument(self):
        print("Inconsistencies:\n")

    def startElement(self, tag, attributes): 
        if tag=="name":
            self.read = 1
        if tag=="artikel":
            self.id = attributes["id"]            

    def endElement(self, tag):
        if tag=="name":
            self.read = 0

    def characters(self, content):
        if self.read == 1:
            item = content
            #check whether the item is not yet part of the dictionaries
            if item not in self.items:
                #add item (e.g. "apfel") to both dictionary "items" and  
                #dictionary "items2". The value for the item is the id in the 
                #case of dictionary "items" and "0" in the case of dictionary 
                #"items2". The second dictionary contains the number of 
                #inconsistencies for each product. At the beginning, the 
                #number of inconsistencies for the product is zero.  
                self.items[item] = self.id
                self.items2[item] = 0
            else:
                if self.items[item] == self.id:
                    #increase number of inconsistencies by 1:
                    self.items2[item] = self.items2[item] + 1

    def endDocument(self):
        for prod in self.items2:
            if self.items2[prod]&gt;0:
                print("There are {} different IDs for item \"
                {}\".".format(self.items2[prod] + 1, prod))


if ( __name__ == "__main__"):

    c = C_Handler()
    xml.sax.parse("lieferungen.xml", c)
</code></pre>
<p>The output of this program is as follows:</p>
<pre><code>Inconsistencies:

There are 3 different IDs for item "Kirschen".
</code></pre>
<p>As you can see, from the file (note the comments marking occurrences of more than one ID), this output is wrong in two ways:</p>
<ol>
<li>There are only two different IDs for item "Kirschen", not three.</li>
<li>Several items with more than one ID are not mentioned at all (e.g. item "Kohl" has two different IDs) </li>
</ol>
<p>However, I do not understand, what's going wrong in my code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Unless I've misunderstood, the error is that this line</p>
<pre><code>                if self.items[item] == self.id:
</code></pre>
<p>should be</p>
<pre><code>                if self.items[item] != self.id:
</code></pre>
<p>As it stands, your program appears to be counting consistencies rather than inconsistencies: <code>Kirschen</code> uses the ID <code>7866</code> three times and nothing else uses the same ID more than once, hence your output.</p>
<p>With the above change made, I get the following output:</p>
<pre class="lang-none prettyprint-override"><code>Inconsistencies:

There are 3 different IDs for item "apfel".
There are 2 different IDs for item "Kirschen".
There are 2 different IDs for item "Kohl".
</code></pre>
<hr/>
<p>Having said this, I'm not sure your code would necessarily do what you want all of the time.  Try moving the <code>&lt;artikel&gt;</code> element with ID 7116 above all of the other <code>&lt;artikel&gt;</code> elements and then running your code.  Your code will then tell you that there are four different IDs for <code>Kirschen</code>, when arguably there are only two.</p>
<p>The reason for this is that the number of IDs your program outputs for an item is one for the first ID found for that item and one for each further <code>&lt;artikel&gt;</code> element with the that name but whose ID differs from the first.</p>
<p>If you really want to count the number of IDs used per product, a better way would be to use sets to store the IDs used for each product as you go through, and then print the lengths of any sets that contain more than one element.  Here's what your <code>characters</code> method could look like after making this change - I'll leave it up to you to make the necessary modifications to your <code>endDocument</code> method:</p>
<pre><code>   def characters(self, content):
        if self.read == 1:
            item = content
            #check whether the item is not yet part of the dictionary
            if item not in self.items:
                self.items[item] = set([self.id])
            else:
                self.items[item].add(self.id)
</code></pre>
<p>Note that in the last line I don't need to check whether the set in <code>self.items[item]</code> already contains <code>self.id</code>.  The nice thing about a set is that if you add an ID that's already in the set, nothing happens.  The set doesn't end up with duplicate IDs.   Note also that I'm no longer using <code>self.items2</code>, as <code>self.items</code> has all the information I need.</p>
<p>You could even go one step further than this.  We have to check whether <code>item</code> is in <code>self.items</code> and create a set for that item if it isn't.  If we use a <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer"><code>defaultdict</code></a>, then that will take care of creating the set for us if it doesn't already exist.  Add the line <code>from collections import defaultdict</code> above your <code>C_Handler</code> class and replace the line <code>self.items = {}</code> with <code>self.items = defaultdict(set)</code>.  After doing this, your <code>characters</code> method just needs to be the following:</p>
<pre><code>    def characters(self, content):
        if self.read == 1:
            item = content
            self.items[item].add(self.id)
</code></pre>
</div>
<span class="comment-copy">Thank you very much!!</span>
