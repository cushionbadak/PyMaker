<div class="post-text" itemprop="text">
<p>This is Python 3.6 </p>
<p>I need help comparing a list against a dictionary and if there is match I need to return the dictionaries key.</p>
<pre><code>champ_ids = [0, 36, 85]

champ_dict = {Bob : 0, Carly: 36, Freddy : 85, Megan : 14, Dilbert : 69}

for item in champ_dict.items() and champ_ids:
    print(item)
</code></pre>
<p>That prints all the matching numbers so in this case <code>0, 36, 85</code> which is perfect. How do I make it return <code>Bob, Carly, Freddy</code> (the keys) if those values are found in both places, instead of returning the values that match</p>
</div>
<div class="post-text" itemprop="text">
<p>Notice that this code in the question is <em>not</em> doing what you imagine:</p>
<pre><code>for item in champ_dict.items() and champ_ids:
</code></pre>
<p>The above does <em>not</em> check if the <code>item</code> is in both the dictionary and the list (that's not how <code>in</code>, <code>and</code> work in Python!). It's simply iterating over the <code>champ_ids</code> list, and nothing more. Try this instead:</p>
<pre><code>champ_ids  = [0, 36, 85]
champ_dict = {'Bob' : 0, 'Carly': 36, 'Freddy' : 85, 'Megan' : 14, 'Dilbert' : 69}
[k for k, v in champ_dict.items() if v in champ_ids]
</code></pre>
<p>The above will compare each <em>value</em> in the dictionary and if it's present in the list it'll add the corresponding <em>key</em> to an output list. For instance, this is the output for the test data in the question:</p>
<pre><code>['Freddy', 'Bob', 'Carly']
</code></pre>
<p>Now you can use it as needed, <code>print()</code> it if you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>First you need to have strings as keys in your dictionary</p>
<pre><code>{"Bob" : 0, "Carly" : 36, "Freddy" : 85, "Megan" : 14, "Dilbert" : 69}
</code></pre>
<p>Also why not use the id as the key instead of the name,
that would be a bit nicer</p>
<p>But here is the code:</p>
<pre><code>for k, v in champ_dict.items():
    if v in champ_ids:
        print(k)
</code></pre>
</div>
<span class="comment-copy">I edited my question - 3.6 is the version</span>
<span class="comment-copy">careful, <code>for item in champ_dict.items() and champ_ids:</code> is not doing what you think it's doing.</span>
<span class="comment-copy">nitpick: it's better to unpack <code>for k,v in some_dict.items()</code> idiom than indexing a tuple.</span>
<span class="comment-copy">@juanpa.arrivillaga Of course! I forgot about it. Thanks!</span>
<span class="comment-copy">That seems to work, curious though why is that a better solution than TheEpicMelon gives below, which is easier to understand IMO?</span>
<span class="comment-copy">@MingyJ in Python we prefer to use <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> (the feature I'm using in my solution) instead of explicit loops, comprehensions are not just more idiomatic, also are faster. Also, it's not a good idea to print things inside a loop, better create a list with the answer and then pass it around for further processing</span>
<span class="comment-copy">@MingyJ always my pleasure :) have fun!</span>
