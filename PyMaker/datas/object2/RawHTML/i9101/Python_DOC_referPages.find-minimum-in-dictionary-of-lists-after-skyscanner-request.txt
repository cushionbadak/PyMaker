<div class="post-text" itemprop="text">
<p>I am new to Python and I am playing around with Skyscanner's Python API to practice wth Python and APIs. A response from Skyscanner's API has the structure of a dictionary made up of multiple lists which are in turn made of many dictionaries.</p>
<p>See below:
<strong><em>Skyscanner Query</em></strong></p>
<pre><code>result_base= flights_cache_service.get_cheapest_quotes(
market='AU',
currency='AUD',
locale='en-GB',
originplace='NYC',
destinationplace='MIA',
outbounddate='2017-07').parsed
</code></pre>
<p>The <code>result_base</code> variable is a dictionary:</p>
<pre><code>[in]
result_base.keys()
[out]
[u'Quotes', u'Currencies', u'Places', u'Carriers']
</code></pre>
<p>and for example if I do:</p>
<pre><code>[in]
print type(results_base['Quotes'])
[out]
list
</code></pre>
<p>Each item in the list is an itinerary that has multiple values such as:</p>
<pre><code>[in]
result_base['Quotes'][0]
[out]
{u'Direct': False,
 u'MinPrice': 437.0,
 u'OutboundLeg': {u'CarrierIds': [843],
 u'DepartureDate': u'2017-07-01T00:00:00',
 u'DestinationId': 56628,
 u'OriginId': 67852},
 u'QuoteDateTime': u'2017-02-02T13:20:59',
 u'QuoteId': 1}
</code></pre>
<p>I am trying to find the most efficient way to find the minimum price out of the options given in the <code>results_base['Quotes']</code>. I tried looping through every item in the list but <strong><em>I am looking to see if there is a more efficient way</em></strong> to do it.</p>
<p>My code:</p>
<pre><code>base_result={}
min_price=99999
for i in result_base['Quotes']:
    if i['MinPrice']&lt;min_price:
        min_price=i['MinPrice']
        base_result['Direct']=i['Direct']
        base_result['MinPrice']=i['MinPrice']
        base_result['OutboundLeg']=i['OutboundLeg']
        base_result['QuoteDateTime']=i['QuoteDateTime'] 
</code></pre>
<p>Any help is appreciated, if you have any specific data structure that I can use, it is also welcome.</p>
</div>
<div class="post-text" itemprop="text">
<h3>As @ephemient points out,</h3>
<p>you can skip a step in the previous version of this answer, and just jump straight to...</p>
<pre><code>lowest_quote = min(result_base['Quotes'], key=lambda q: q['MinPrice'])
</code></pre>
<p>This will just grab the quote with the minimum price out of the sequence directly. (You can also use <code>itemgetter('MinPrice')</code> instead of the lambda by importing it from the <code>operators</code> library, for a slightly more optimized key function.)</p>
<hr/>
<h3>Previous version:</h3>
<pre><code>quotes_and_prices = ((q['MinPrice'], q) for q in result_base['Quotes'])
min_price, quote = min(quotes_and_prices)
</code></pre>
<p>This uses a <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> to generate a sequence of <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuples</a>, the first element of each tuple being the price, the second element of each tuple being the quote associated with that price.</p>
<p>It then grabs the smallest tuple out of the sequence, which due to how Python sorts tuples, is the one with the lowest price. Using sequence unpacking (described in the 'tuples' link above) it separates that back into two variables, <code>min_price</code> and <code>quote</code>.</p>
<p>Internally, this still involves looping through all of the prices, because that's a necessary condition for comparing them. However, it avoids repeatedly copying the individual fields of quotes around because it's just keeping a reference to each quote associated with its price as part of the tuple objects.</p>
</div>
<span class="comment-copy">You don't even have to rely on tuple sorting: just like <code>sorted</code>, <code>min</code> and <code>max</code> can also take a <code>key</code> extractor, e.g. <code>min(result_base['Quotes'], key=lambda q: q['MinPrice'])</code> or <code>import operator; min(result_base['Quotes'], key=itemgetter('MinPrice'))</code>.</span>
<span class="comment-copy">@ephemient good point, that argument always slips my mind for <code>min</code>/<code>max</code>, even when I remember it for <code>sorted</code> :)</span>
