<div class="post-text" itemprop="text">
<p>I was experimenting with setting the dictionary <code>sys.modules</code> while working on an answer to <a href="https://stackoverflow.com/q/42134260/2988730">another question</a> and came across something interesting. The linked question deals with removing all the effects of importing a module. Based on <a href="https://stackoverflow.com/a/487718/2988730">another post</a>, I came up with the idea of deleting all new modules from <code>sys.modules</code> after an import. My initial implementation was to do the following (testing with <code>numpy</code> as the module to load and unload):</p>
<pre><code># Load the module
import sys
mod_copy = sys.modules.copy()
print('numpy' in mod_copy, 'numpy' in sys.modules) # False False
import numpy
print('numpy' in mod_copy, 'numpy' in sys.modules) # False True
print(id(numpy)) # 45138472
</code></pre>
<p>The printouts show that numpy was imported successfully and that the shallow copy does not contain it, as expected.</p>
<p>Now my idea was to unload the module by swapping <code>mod_copy</code> back into <code>sys.modules</code>, then delete the local reference to the module. That should in theory remove all references to it (and possibly it does):</p>
<pre><code>sys.modules = mod_copy
del numpy
print('numpy' in sys.modules) # False
</code></pre>
<p>This should be enough to be able to re-import the module, but when I do</p>
<pre><code>import numpy
print('numpy' in sys.modules) # False
print(id(numpy)) # 45138472
</code></pre>
<p>It appears that the numpy module is not reloaded since it has the same <code>id</code> as before. It does not show up in <code>sys.modules</code>, despite the fact that the <code>import</code> statement raises no errors and appears to complete successfully (i.e., a <code>numpy</code> module exists in the local namespace).</p>
<p>On the other hand, the implementation that I made in <a href="https://stackoverflow.com/a/42139290/2988730">my answer</a> to the linked question does appear to work fine. It modifies the dictionary directly instead of swapping it out:</p>
<pre><code>import sys
mod_copy = sys.modules.copy()
print('numpy' in mod_copy, 'numpy' in sys.modules) # False False
import numpy
print('numpy' in mod_copy, 'numpy' in sys.modules) # False True
print(id(numpy)) # 35963432

for m in list(sys.modules):
    if m not in mod_copy:
        del sys.modules[m]
del numpy
print('numpy' in sys.modules) # False

import numpy
print('numpy' in sys.modules) # True
print(id(numpy)) # (54941000 != 35963432)
</code></pre>
<p>I am using Python 3.5.2 on an Anaconda install. I am most interested in explanations focusing on Python 3, but I am curious about Python 2.7+ as well.</p>
<p>The only thing I can think of that is happening here is that <code>sys</code> maintains another reference to <code>sys.modules</code> and uses that internal reference regardless of what I do to the public one. I am not sure that this covers everything though, so I would like to know what is really going on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Even in Python 3.5, part of the import implementation is <a href="https://hg.python.org/cpython/file/3.5/Python/import.c" rel="nofollow noreferrer">still written in C</a>, and that part uses <code>PyThreadState_GET()-&gt;interp-&gt;modules</code> to retrieve the module cache, rather than going through the <code>sys.modules</code> attribute. Your import is finding <code>numpy</code> in the old <code>sys.modules</code> through one of those code paths.</p>
<p><code>sys.modules</code> isn't designed to be replaced. The <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer">docs</a> mention that replacing it may behave unexpectedly:</p>
<blockquote>
<p>This can be manipulated to force reloading of modules and other tricks. However, <strong>replacing the dictionary will not necessarily work as expected</strong> and deleting essential items from the dictionary may cause Python to fail.</p>
</blockquote>
</div>
<span class="comment-copy">On Python 2, I would expect the import machinery to use its own internal reference to the module cache, independent of the <code>sys.modules</code> reference, but as far as I can tell, on Python 3.5, the <a href="https://hg.python.org/cpython/file/3.5/Lib/importlib/_bootstrap.py" rel="nofollow noreferrer">import machinery</a> accesses the <code>modules</code> attribute of the <code>sys</code> module object whenever it needs the module cache. I don't know why <code>'numpy'</code> would fail to show up in <code>sys.modules</code> after replacing the dict and re-<code>import</code>ing <code>numpy</code>.</span>
<span class="comment-copy">@user2357112. Well, it looks like there is some internal reference because the <code>id</code> of <code>numpy</code> is identical after both imports. As if it is using the original <code>modules</code> dictionary and ignoring the one that was swapped in.</span>
<span class="comment-copy">The <code>id</code> being the same doesn't mean much; it's quite common for different objects to have the same ID if they have non-overlapping lifetimes. To see whether it's using the same object, you'd want to set something like <code>numpy.lookatme = 3</code> and see if that modification still shows up afterwards.</span>
<span class="comment-copy">That makes sense. So basically there is more than one reference to the dictionary floating around. Do you think this merits a mention on the mailing list or as a bug report?</span>
<span class="comment-copy">Also, does the behavior change in 3.6?</span>
<span class="comment-copy">@MadPhysicist: The code looks pretty much the same on Python 3.6, but I didn't test it. As for a bug report, no. You're not expected to be able to replace the module cache. From the <a href="https://docs.python.org/3/library/sys.html#sys.modules" rel="nofollow noreferrer">docs</a>: "This can be manipulated to force reloading of modules and other tricks. However, <b>replacing the dictionary will not necessarily work as expected</b> and deleting essential items from the dictionary may cause Python to fail."</span>
