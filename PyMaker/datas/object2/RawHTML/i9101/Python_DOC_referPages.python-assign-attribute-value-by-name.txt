<div class="post-text" itemprop="text">
<p>As part of a bigger project in python3, I need a method in the spirit of to the following (not working) code: </p>
<pre><code>class Qclass:
     def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

def increment(Q, var):
    eval('Q.{} = Q.{} + 100'.format(var,var))

Q = Qclass(1,2,3)
increment(Q,'a')
print(Q.a)
&gt;&gt;&gt; 101
</code></pre>
<p>I need this because I don't have prior knowledge on which attribute of Q has to be incremented. A  solution would be to declare specific functions for each attribute and use some selector, but I'd prefer to avoid this if possible. </p>
<p>Is there a tidy way to do this ?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is a <strong>very bad idea</strong> to <strong>use <code>eval(..)</code></strong> (in almost any context). You can use <code>getattr(..)</code> and <code>setattr(..)</code> which are more secure:</p>
<pre><code>def increment(Q, var):
    setattr(Q,var,getattr(Q,var)+100)
</code></pre>
<p><code>getattr(obj,name)</code> and <code>setattr(obj,name,val)</code> get and set the attribute of an <code>obj</code>ect. So here you can get/set an attribute if you do not know the name in advance.</p>
<p>So the resulting code is:</p>
<pre><code>class Qclass:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

def increment(Q, var):
    setattr(Q,var,getattr(Q,var)+100)

Q = Qclass(1,2,3)
increment(Q,'a')
print(Q.a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A combination of <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> and <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> would do:</p>
<pre><code>def increment(Q, var):
    setattr(Q, var, getattr(Q, var) + 100)
</code></pre>
<p>yielding <code>101</code> for <code>Q.a</code> after your snippet executes.</p>
<p><code>getattr</code> just grabs an attribute from an object by a given name (and allows for a default to be used if the attribute doesn't exist); similar to <code>Q.&lt;val_name&gt;</code>. </p>
<p><code>setattr</code> performs the assignment, setting the attribute with the given name on the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the build-in function <a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow noreferrer">vars</a> which returns a dictionary of variables declared in given scope. It's usage looks like this:</p>
<pre><code>Q = Qclass(1,2,3)
try:
    vars(Q)['a'] += 1
except KeyError:
    Q.a = 1
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/285061/how-do-you-programmatically-set-an-attribute-in-python">How do you programmatically set an attribute in Python?</a></span>
<span class="comment-copy">arrr, yeah! I have totally forgotten about setattr() getattr() . thanks. Although did you edit my question to put the def increment() in Qclass ? I meant it to be at root.</span>
<span class="comment-copy">@Aderam: ah that was not the case? There was definitely something wrong with the indentation because <code>__init__</code> was in the same indent as <code>class</code>...</span>
<span class="comment-copy">oups, sorry for the typo. Eveything is now exactlly as it should be :)</span>
<span class="comment-copy">Ingenious approach, didn't know about vars(). For the record I have benchmarked this solution against setattr(Q, var, getattr(Q, var) + 1). Seems that they are very close to equal in terms of computational time. Thanks</span>
<span class="comment-copy">This approach only works on classes that have a <code>__dict__</code>, for classes without (e.g. using <code>__slots__</code>) this doesn't work. It's the equivalent of using <code>Q.__dict__['a'] += 1</code></span>
