<div class="post-text" itemprop="text">
<p>I'm trying to use Python to access the trading API at poloniex.com, a cryptocurrency exchange. To do this I must follow this prescription:</p>
<blockquote>
<p>All calls to the trading API are sent via HTTP POST to <a href="https://poloniex.com/tradingApi" rel="noreferrer">https://poloniex.com/tradingApi</a> and must contain the following headers:</p>
<p>Key - Your API key.<br/>
  Sign - The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.  </p>
<p>Additionally, all queries must include a "nonce" POST parameter. The nonce parameter is an integer which must always be greater than the previous nonce used.</p>
</blockquote>
<p>Here is what I have so far. My current issue is that I do not know how to compile the POST url so that it can be signed without sending the incomplete request first. This obviously doesn't work.</p>
<pre><code>import requests
import hmac
import hashlib
import time

headers = { 'nonce': '',
            'Key' : 'myKey',
            'Sign': '',}
payload = { 'command': 'returnCompleteBalances',
            'account': 'all'}
secret = 'mySecret'

headers['nonce'] = int(time.time())
response = requests.post( 'https://poloniex.com/tradingApi', params= payload, headers= headers )
headers['Sign'] = hmac.new( secret, response.url, hashlib.sha512)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a <a href="http://docs.python-requests.org/en/master/user/advanced/#prepared-requests" rel="noreferrer"><em>prepared</em> request</a>; you can add headers to that after the body has been created:</p>
<pre><code>import requests
import hmac
import hashlib


request = requests.Request(
    'POST', 'https://poloniex.com/tradingApi',
    data=payload, headers=headers)
prepped = request.prepare()
signature = hmac.new(secret, prepped.body, digestmod=hashlib.sha512)
prepped.headers['Sign'] = signature.hexdigest()

with requests.Session() as session:
    response = session.send(prepped)
</code></pre>
<p>I changed your <code>params</code> argument to <code>data</code>; for a POST request it is customary to send the parameters in the body, not the URL.</p>
<p>For the nonce, I'd use a <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code> object</a>, seeded from the current time so restarts don't affect it. According to the <a href="https://poloniex.com/support/api/" rel="noreferrer">Poloniex API documentation</a> (which you quoted in your question), the nonce is part of the POST body, not the headers, so put it in the <code>payload</code> dictionary:</p>
<pre><code>from itertools import count
import time

# store as a global variable
NONCE_COUNTER = count(int(time.time() * 1000))

# then every time you create a request
payload['nonce'] = next(NONCE_COUNTER)
</code></pre>
<p>Using <code>int(time.time())</code> would re-use the same number if you created more than one request per second. The <a href="http://pastebin.com/fbkheaRb" rel="noreferrer">example code provided by Poloniex</a> uses <code>int(time.time()*1000)</code> to make it possible to create a request every microsecond instead, but using your own monotonically increasing counter (seeded from <code>time.time()</code>) is far more robust.</p>
<p>You can also encapsulate the digest signing process in a <a href="http://docs.python-requests.org/en/master/user/advanced/#custom-authentication" rel="noreferrer">custom authentication object</a>; such an object is passed in the prepared request as the last step in preparation:</p>
<pre><code>import hmac
import hashlib

class BodyDigestSignature(object):
    def __init__(self, secret, header='Sign', algorithm=hashlib.sha512):
        self.secret = secret
        self.header = header
        self.algorithm = algorithm

    def __call__(self, request):
        body = request.body
        if not isinstance(body, bytes):   # Python 3
            body = body.encode('latin1')  # standard encoding for HTTP
        signature = hmac.new(self.secret, body, digestmod=self.algorithm)
        request.headers[self.header] = signature.hexdigest()
        return request
</code></pre>
<p>Use this with your <code>requests</code> calls:</p>
<pre><code>response = requests.post(
    'https://poloniex.com/tradingApi',
    data=payload, headers=headers, auth=BodyDigestSignature(secret))
</code></pre>
<p>The argument passed in is the secret used in the HMAC digest; you can also pass in  a different header name.</p>
</div>
<span class="comment-copy">That was so fast, Thanks very much!</span>
<span class="comment-copy">@MartijnPieters when I run this I get an error saying: 'Request' object has no attribute 'body'. for this line: signature = hmac.new(secret, request.body, digestmod=hashlib.sha512)</span>
<span class="comment-copy">@abcla corrected</span>
<span class="comment-copy">When I run the code now I constantly get : "error":"invalid command", similar to the issue described here: <a href="https://kaijento.github.io/2017/05/05/poloniex-api-invalid-command/" rel="nofollow noreferrer">kaijento.github.io/2017/05/05/poloniex-api-invalid-command</a></span>
<span class="comment-copy">@abcla: another potential issue: the nonce should go in the POST body, not the headers, at least according to the <a href="https://poloniex.com/support/api/" rel="nofollow noreferrer">current documentation</a>.</span>
