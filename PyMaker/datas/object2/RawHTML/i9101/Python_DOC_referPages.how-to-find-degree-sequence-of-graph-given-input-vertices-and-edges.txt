<div class="post-text" itemprop="text">
<pre><code>vertice = input("enter the vertices: ")
vertice = [x.strip(' ') for x in vertice.split(',')]

edge = input("enter the edges: ")
edge = [x.strip(' ') for x in edge.split(',')]

print("Number of vertices: ", len(vertice))
print("Number of edges: ", len(edge)
</code></pre>
<p>From here I am trying to find the degree sequence given an input like:
a,b,c for the vertices
and a-b,b-c,c-a for the edges. How do I do this with this type of input?
looking for an output like [2,2,2]</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> to count the edges associated to each vertex:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; vertices = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; edges = ['a-b', 'a-c', 'b-c', 'd-a']
&gt;&gt;&gt; degree = Counter(vertex for edge in edges for vertex in edge.split('-'))
&gt;&gt;&gt; [degree[vertex] for vertex in vertices]
[3, 2, 2, 1]
</code></pre>
<p>In above <code>Counter</code> constructor takes in an iterable of items and returns a <code>dict</code> like object where the unique items are keys and values the respective counts.</p>
<pre><code>&gt;&gt;&gt; items = list(vertex for edge in edges for vertex in edge.split('-'))
&gt;&gt;&gt; items
['a', 'b', 'a', 'c', 'b', 'c', 'd', 'a']
&gt;&gt;&gt; degree = Counter(items)
&gt;&gt;&gt; degree
Counter({'a': 3, 'c': 2, 'b': 2, 'd': 1})
</code></pre>
<p>Since the ordering of the <code>Counter</code> is random we need to use list comprehension to iterate over the vertices in order to generate list of degrees in the same order.</p>
<pre><code>&gt;&gt;&gt; [degree[vertex] for vertex in vertices]
[3, 2, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can always use the networkx package - which gives you most, if not all, of the functionality you'd want manipulating a graph.  Say you have a path of 4 nodes radially connected you'd find the degree like this:</p>
<pre><code>from networkx import nx
G = nx.Graph()  
G.add_path([0,1,2,3])
deg=G.degree(G.nodes()).values()
print("number of vertices: ",G.number_of_nodes())
print("number of edges: ",G.number_of_edges()) 
print("degree list: ",sorted(deg))

&gt;&gt;number of vertices: 4
&gt;&gt;number of edges: 3
&gt;&gt;degree list: [1, 1, 2, 2]
</code></pre>
</div>
<span class="comment-copy">As you need a graph data structure. Instead of storing edges and vertices in a lists I would highly recommend creating more sophisticated graph structure.</span>
<span class="comment-copy">Thank you! Highly appreciated.</span>
