<div class="post-text" itemprop="text">
<p>I'm new to using Pyglet in python and have some problems with my code. First of all, I don't know why setting the resolution doesn't work. Second of all, when I try to move the "snake" it doesn't do anything. Any help is appreciated.</p>
<pre><code>import pyglet
import random

pyglet.resource.path = ["resources"]
pyglet.resource.reindex()


class Snake_Window(pyglet.window.Window):

    def __init__(self):
        super(Snake_Window, self).__init__()

        self.width = 1280
        self.height = 720
        # sets the resolution of window

        self.key_handler = pyglet.window.key.KeyStateHandler()
        self.push_handlers(self.key_handler)
        # sets keys

        self.set_caption("Wild Snake")
        # gives it a name

        self.background_image = pyglet.resource.image("background.png")
        self.food_image = pyglet.resource.image("food.png")
        self.snake_head_image = pyglet.resource.image("snake_head.png")
        self.snake_body_image = pyglet.resource.image("snake_body.png")
        # makes images usable

        self.center_image(self.food_image)
        self.center_image(self.snake_head_image)
        self.center_image(self.snake_body_image)
        # centers the images using center_image

        self.snake_head = pyglet.sprite.Sprite(img=self.snake_head_image, x=200, y=200)
        self.snake_head.scale = 0.5
        self.snake_head.rotation = 180

        self.snake_body = pyglet.sprite.Sprite(img=self.snake_body_image, x=400, y=200)
        self.snake_body.scale = 0.5
        self.snake_body.rotation = 180

        self.snake_head.draw()
        self.snake_body.draw()

        self.food = []

        self.c = self.snake_head.x
        self.a = self.snake_head.x
        self.b = self.snake_head.y

        pyglet.clock.schedule_interval(self.game_tick, 1)

    def center_image(self, image):
        # sets the center of the image to the actual center
        image.anchor_x = image.width / 2
        image.anchor_y = image.height / 2

    def update_snake_head(self):
        if self.key_handler[pyglet.window.key.RIGHT]:
            self.c = self.a
            self.c += 200
        elif self.key_handler[pyglet.window.key.LEFT]:
            self.c = self.a
            self.c -= 200
        elif self.key_handler[pyglet.window.key.UP]:
            self.c = self.b
            self.c += 200
        elif self.key_handler[pyglet.window.key.DOWN]:
            self.c = self.b
            self.c -= 200
        else:
            print("čau")

    def update_snake_body(self):
        if self.key_handler[pyglet.window.key.RIGHT]:
            self.c = self.a
            self.c += 200
        elif self.key_handler[pyglet.window.key.LEFT]:
            self.c = self.a
            self.c -= 200
        elif self.key_handler[pyglet.window.key.UP]:
            self.c = self.b
            self.c += 200
        elif self.key_handler[pyglet.window.key.DOWN]:
            self.c = self.b
            self.c -= 200
        else:
            print("čau")

    def game_tick(self, dt):
        self.update_snake_head()
        self.update_snake_body()
        self.draw_elements()

    def draw_elements(self):
        self.clear()
        self.snake_head.draw()
        self.snake_body.draw()

game_window = Snake_Window()

pyglet.app.run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pyglet
import random

pyglet.resource.path = ["resources"]
pyglet.resource.reindex()

class Snake_Window(pyglet.window.Window):

    def __init__(self):
        super(Snake_Window, self).__init__(width=1280, height=720)

        # sets the resolution of window

        self.key_handler = pyglet.window.key.KeyStateHandler()
        self.push_handlers(self.key_handler)
        # sets keys

        self.set_caption("Wild Snake")
        # gives it a name

        self.background_image = pyglet.resource.image("background.png")
        self.food_image = pyglet.resource.image("food.png")
        self.snake_head_image = pyglet.resource.image("snake_head.png")
        self.snake_body_image = pyglet.resource.image("snake_body.png")

        # makes images usable

        self.center_image(self.food_image)
        self.center_image(self.snake_head_image)
        self.center_image(self.snake_body_image)
        # centers the images using center_image

        self.snake_head = pyglet.sprite.Sprite(img=self.snake_head_image, x=200, y=200)
        self.snake_head.scale = 0.5
        self.snake_head.rotation = 180

        self.snake_body = pyglet.sprite.Sprite(img=self.snake_body_image, x=400, y=200)
        self.snake_body.scale = 0.5
        self.snake_body.rotation = 180

        self.snake_head.draw()
        self.snake_body.draw()

        self.food = []

        self.snake_head.x = self.snake_head.x
        self.snake_head.y = self.snake_head.y

        pyglet.clock.schedule_interval(self.game_tick, 1)

    def center_image(self, image):
        # sets the center of the image to the actual center
        image.anchor_x = image.width / 2
        image.anchor_y = image.height / 2

    def update_snake_head(self):
        if self.key_handler[pyglet.window.key.RIGHT]:
            self.snake_head.x = self.snake_head.x
            self.snake_head.x += 200
        elif self.key_handler[pyglet.window.key.LEFT]:
            self.snake_head.x = self.snake_head.x
            self.snake_head.x -= 200
        elif self.key_handler[pyglet.window.key.UP]:
            self.snake_head.x = self.snake_head.y
            self.snake_head.x += 200
        elif self.key_handler[pyglet.window.key.DOWN]:
            self.snake_head.x = self.snake_head.y
            self.snake_head.x -= 200
        else:
            print("čau")

    def update_snake_body(self):
        if self.key_handler[pyglet.window.key.RIGHT]:
            self.snake_head.x = self.snake_head.x
            self.snake_head.x += 200
        elif self.key_handler[pyglet.window.key.LEFT]:
            self.snake_head.x = self.snake_head.x
            self.snake_head.x -= 200
        elif self.key_handler[pyglet.window.key.UP]:
            self.snake_head.x = self.snake_head.y
            self.snake_head.x += 200
        elif self.key_handler[pyglet.window.key.DOWN]:
            self.snake_head.x = self.snake_head.y
            self.snake_head.x -= 200
        else:
            print("čau")

    def game_tick(self, dt):
        self.update_snake_head()
        self.update_snake_body()
        self.draw_elements()

    def draw_elements(self):
        self.clear()
        self.snake_head.draw()
        self.snake_body.draw()

game_window = Snake_Window()

pyglet.app.run()
</code></pre>
<p>Here's how you can get both issues working.<br/>
The first issue is that the width and height are defined upon creating the window (there's probably some way of changing it afterwards as well that I haven't bothered learning yet).</p>
<p>The second issue is that you update <code>self.c</code> for instance, a copy of <code>self.snake_head.x</code>. So when you think you're updating <code>.x</code> of <code>self.snake_head</code> you're actually updating the copy and nothing more.</p>
<p>The above code works around this. It's not perfect tho, for instance - the key-presses won't trigger/update until the given interval. But these are things you're probably working on after this issue.</p>
</div>
<span class="comment-copy">Welcome to stackoverflow. Please have a look at <a href="https://stackoverflow.com/help/how-to-ask">How do I ask a good question?</a> and edit your question to include a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete and Verifiable</a> example. You should ask questions to a specific problem or a specific error message instead of "Why is this code not working?".</span>
<span class="comment-copy">Because the height and width are defined as this: <code>super(Snake_Window, self).__init__(width=800, height=600)</code> and not defined after the window is created (the <b>init</b> creates the window)</span>
<span class="comment-copy">The second problem being you updating <code>self.c</code> and not <code>self.snake_head.x</code>. Those values are not bound to each other. I'm assuming you thought you created a "shortcut" for the different elements - but you didn't. You've created copies of the integer representing the position of the snake upon start. But you're not actually updating the snake, you're updating the copy :)</span>
<span class="comment-copy">Thanks, guys the resolution is working fine.</span>
<span class="comment-copy">Thanks. I figured it out in the end but still have some problems. If you would be so kind and look here about other issues I have.<a href="https://stackoverflow.com/questions/55264615/having-problem-with-the-movement-of-a-snakes-body-in-pyglet" title="having problem with the movement of a snakes body in pyglet">stackoverflow.com/questions/55264615/…</a></span>
