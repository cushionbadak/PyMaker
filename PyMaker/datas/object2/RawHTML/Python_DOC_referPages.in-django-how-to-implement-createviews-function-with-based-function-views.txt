<div class="post-text" itemprop="text">
<p>here is <strong>based-class views</strong> code:</p>
<pre><code># views.py
class ObjectCreate(CreateView):
    model = ObjectModel
    fields = "__all__"
</code></pre>
<p>its simple to create an object and save it use this class. </p>
<p>I wonder how?</p>
<p>what if I want to use based-function views to achieve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a function view you would need to implement everything, including creating a <a href="https://docs.djangoproject.com/en/2.1/topics/forms/modelforms/" rel="nofollow noreferrer">form for your model</a>:</p>
<pre><code>def create_object(request):
    if request.method == 'GET':
        form = ObjectForm()

    if request.method == 'POST':
        form = ObjectForm(request.POST)
        if form.is_valid():
            instance = form.save()  # instance created
            # now redirect user or render a success template
            return redirect(...)

    # if request method is GET or form is invalid return the form
    return render(request, 'path/template_name.html', {'form': form})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to learn how the <code>CreateView</code> works, look at its source code. Or for easier overview of the structure, look at <a href="http://ccbv.co.uk" rel="nofollow noreferrer">this site</a> which lists all the Django CBVs. </p>
<p>You'll find that <code>CreateView</code> inherits from 9 other classes, has about 20 attributes (of which <code>model</code> and <code>fields</code>) and 24 methods that you can override to customise its behaviour.</p>
</div>
<span class="comment-copy">The <a href="https://docs.djangoproject.com/en/2.1/intro/tutorial01/" rel="nofollow noreferrer">Django tutorial</a> actually uses function-based views to create an object. Did you do it?</span>
<span class="comment-copy">I did, but the <b>save</b> method doesnt work, I want to create a <b>bookinstance</b> which it has a foreign key <b>book</b>, what I want to achieve is that the <b>book</b> can get the name of current book model, not by me.</span>
<span class="comment-copy">if form has a foreign key, and it should be given before you save, what you gonna do?</span>
<span class="comment-copy">Instead of <code>instance = form.save()</code> you do <code>instance = form.save(commit=False)</code> and then assign the foreign key <code>instance.some_field = something</code> and then you save <code>instance.save()</code></span>
<span class="comment-copy">I see, one more question. Should I override <b>clean</b> method for every field? like <code>self.cleaned_data['field_name']</code></span>
<span class="comment-copy">No, you just override it when you want to do a custom validation, for example, an EmailField is already validated against a regex, but let's say you want to check that the email is not blacklisted. Then you write a custom clean_email method.</span>
<span class="comment-copy">IT WORK, THANKS !</span>
<span class="comment-copy">that site is very helpful. thanks!</span>
