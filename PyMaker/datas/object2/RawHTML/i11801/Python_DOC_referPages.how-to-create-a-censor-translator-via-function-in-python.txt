<div class="post-text" itemprop="text">
<p>I'm trying to create a "translator" of sorts, in which if the <code>raw_input</code> has any curses (pre-determined, I list maybe 6 test ones), the function will output a string with the curse as <code>****</code>.</p>
<p>This is my code below:</p>
<pre><code>def censor(sequence):
    curse = ('badword1', 'badword2', 'badword3', 'badword4', 'badword5', 'badword6')
    nsequence = sequence.split()
    aword = '' 
    bsequence = []
    for x in range(0, len(nsequence)):
        if nsequence[x] != curse:
            bsequence.append(nsequence[x])
        else:
            bsequence.append('*' * (len(x)))
        latest = ''.join(bsequence)
        return bsequence



if __name__ == "__main__":
    print(censor(raw_input("Your sentence here: ")))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach is to simply use Python's native string method: <code>str.replace</code></p>
<pre><code>def censor(string):
    curses = ('badword1', 'badword2', 'badword3', 'badword4', 'badword5', 'badword6')
    for curse in curses:
        string = string.replace(curse, '*' * len(curse))
    return string
</code></pre>
<p>To improve efficiency, you could try to compile the list of curses into a regular expression and then do a single replacement operation.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html?highlight=replace#str.replace" rel="nofollow">Python Documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>First, there's no need to iterate over element indices here. Python allows you to iterate over the elements themselves, which is ideal for this case.</p>
<p>Second, you are checking whether each of those words in the given sentence is equal to <em>the entire <code>tuple</code> of potential bad words</em>. You want to check whether each word is <em>in</em> that <code>tuple</code> (a <code>set</code> would be better).</p>
<p>Third, you are mixing up indices and elements when you do <code>len(x)</code> - that assumes that <code>x</code> is the word itself, but it is actually the index, as you use elsewhere.</p>
<p>Fourth, you are joining the sequence within the loop, and on the empty string. You should join it on a space, and only after you've checked each element.</p>
<pre><code>def censor(sequence):
    curse = {'badword1', 'badword2', 'badword3', 'badword4', 'badword5', 'badword6'}
    nsequence = sequence.split()
    bsequence = []
    for x in nsequence:
        if x not in curse:
            bsequence.append(x)
        else:
            bsequence.append('*' * (len(x)))
    return ' '.join(bsequence)
</code></pre>
</div>
