<div class="post-text" itemprop="text">
<p>I am new to Python and I have been reading both the online documentation and (trying) to follow <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 0008</a> to have a good Python code style.
I am curious about the code segment I found in the official Python <a href="https://docs.python.org/3/library/re.html#writing-a-tokenizer" rel="noreferrer">docs</a> while studying about the re library:</p>
<pre><code>import collections

Token = collections.namedtuple('Token', ['typ', 'value', 'line', 'column'])
</code></pre>
<p>I cannot understand why the <em><code>Token</code></em> variable is named with a first letter capitalised; I have read through the PEP 0008 and there is no reference for it for what I have seen. Should it not be <strong><code>token</code></strong> instead or <strong><code>TOKEN</code></strong> if it was a constant (which for all I know it is not)?</p>
</div>
<div class="post-text" itemprop="text">
<p>In the code-segment you provided, <code>Token</code> is a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><strong>named tuple</strong></a>, definitely not a constant. It does not follow other variable names naming style only to put emphasis on the fact that it is a <strong>class factory function</strong>. 
No warning will occur from an PEP 0008 style checker (like <em>PyCharm</em> for example) if you write it as <em><code>token</code></em> but I think it is not good practice since this way it does not distinguish it as a class factory name.</p>
<p>So, <em>namedtuples</em> fall under the <a href="https://www.python.org/dev/peps/pep-0008/#class-names">Class names</a> in PEP 0008. Too bad is not stated more explicitly.
Besides the example you mentioned for <a href="https://docs.python.org/3/library/re.html#writing-a-tokenizer">writing a tokenizer</a>, this can also be seen in the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple">collections.namedtuple docs</a> examples:</p>
<pre><code>Point = namedtuple('Point', ['x', 'y'])
Point3D = namedtuple('Point3D', Point._fields + ('z',))
Book = namedtuple('Book', ['id', 'title', 'authors'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The key here is <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple"><code>collections.namedtuple</code></a>. As the documentation says, </p>
<blockquote>
<p><code>collections.namedtuple(typename, field_names, verbose=False, rename=False)</code></p>
<p>Returns a new <code>tuple</code> <strong>subclass</strong> named <code>typename</code>. The new subclass is used to create <code>tuple</code>-like objects that have fields accessible by attribute lookup as well as being indexable and iterable. Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful <code>__repr__()</code> method which lists the tuple contents in a <code>name=value</code> format.</p>
</blockquote>
<p>There is no PEP 8 violation; <code>Token</code> is an user-defined class and its name is capitalized as it should.</p>
</div>
<span class="comment-copy">Because it's a class - <code>namedtuple</code> is a class factory.</span>
<span class="comment-copy">Anti Haapala's answer beat me to it. Great answer.</span>
<span class="comment-copy">Well your answer is better :d</span>
<span class="comment-copy">Both great answers, I really liked the link to PEP 0008. Thanks</span>
