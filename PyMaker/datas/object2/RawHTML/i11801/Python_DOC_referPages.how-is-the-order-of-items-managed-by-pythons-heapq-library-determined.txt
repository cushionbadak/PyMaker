<div class="post-text" itemprop="text">
<p>I was under the impression that the first value was what determined a values position in the heap, however that doesn't seem to be the case.</p>
<pre><code>from __future__ import print_function
import heapq

q = []
heapq.heappush(q, (10, 11))
heapq.heappush(q, (11, 12))
heapq.heappush(q, (9, 10))
print(q)
</code></pre>
<p>This gives me an output of</p>
<pre><code>[(9, 10), (11, 12), (10, 11)]
</code></pre>
<p>However I was expecting an output like</p>
<pre><code>[(9, 10), (10, 11), (11, 12)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The condition on <code>heapq</code> is not a "sort guarantee" over the provided list. Instead, it guarantees <code>q[k] &lt;= q[2*k+1]</code> and <code>q[k] &lt;= q[2*k+2]</code> (using <code>q</code> as in your example).</p>
<p>This is due that it is managed internally as a binary tree.</p>
<p>If you simply expect to use the sorted list, you can use the <code>heappop</code> as <a href="https://docs.python.org/3/library/heapq.html?highlight=heap#basic-examples" rel="nofollow">shown here</a>. In your specific example you could:</p>
<pre><code>sorted_q = [heappop(q) for i in range(len(q))
</code></pre>
<p>and the result, as you expected, will be:</p>
<pre><code>&gt;&gt;&gt; print sorted_q
[(9, 10), (10, 11), (11, 12)]
</code></pre>
<hr/>
<p>The theory is explained <a href="https://docs.python.org/3/library/heapq.html?highlight=heap#theory" rel="nofollow">here in the docs</a>. Relevant is the following line:</p>
<blockquote>
<p>The interesting property of a heap is that a[0] is always its smallest element.</p>
</blockquote>
<p>Which is a direct result of the condition <code>q[k] &lt;= q[2*k+1]</code> and <code>q[k] &lt;= q[2*k+2]</code>, which is a condition of the heap.</p>
<p>However, there are no further guarantees about the order on the rest of the array. And, in fact, both following trees are valid heaps:</p>
<pre><code>    0
 1     2
2 5   3 4
</code></pre>
<p>and</p>
<pre><code>    0
 2     1
5 3   4 2
</code></pre>
<p>Which are stored, respectively, as</p>
<pre><code>[0, 1, 2, 2, 5, 3, 4]
</code></pre>
<p>and</p>
<pre><code>[0, 2, 1, 5, 3, 4, 2]
</code></pre>
</div>
