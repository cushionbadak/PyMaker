<div class="post-text" itemprop="text">
<p>If I have a list </p>
<pre><code>a = [9,4,3,6,4,4,3,6,4] 
</code></pre>
<p>how can I check if any two neighboring elements are the same?
For the example, this would be true for the elements at index 4 and 5 (which both have the value 4).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>pairs = zip(a, a[1:]) # Create tuples of neighbours
equals = map(lambda (x, y): x == y, pairs) # List of booleans which tells whether tuple elements are equal or not
hasEqualNeighbours = any(equals) # Is there a True boolean in the list?
</code></pre>
<p>Or import the <code>eq</code> function and use instead of the lambda, and realize that <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">map</a> can iterate over multiple lists at once so you don't need <code>zip</code>:</p>
<pre><code>from operator import eq
hasEqualNeigbours = any(map(eq, a, a[1:]))
</code></pre>
<p>You can also smack on an <code>from future_builtins import map</code> if you are on Python 2. That makes <code>map</code> a lazy iterator instead of building the entire list of pairs, saving you RAM and perhaps runtime.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an efficient way for <strong>Python 3.x</strong> regarding memory and execution time.</p>
<pre><code>import itertools
import operator

if any(map(operator.eq, a, itertools.islice(a, 1, None))):
    print("There are equal neighbhors")
</code></pre>
<p><a href="https://docs.python.org/3.5/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code></a> creates an iterator that slices a sequence without creating a new sequence. <a href="https://docs.python.org/3.5/library/functions.html#map" rel="nofollow"><code>map()</code></a> then checks each time using <a href="https://docs.python.org/3.5/library/operator.html#operator.eq" rel="nofollow"><code>operator.eq()</code></a> if the item in the sequence and the item afterwards are equal.<br/>
<a href="https://docs.python.org/3.5/library/functions.html#any" rel="nofollow"><code>any()</code></a> then iterates over the map and returns if any is <code>True</code>.</p>
<p>For <strong>Python 2.x</strong> however, I would suggest this:</p>
<pre><code>import itertools
import operator

if any(itertools.imap(operator.eq, a, itertools.islice(a, 1, None))):
    print("There are equal neighbhors")
</code></pre>
<p>due to the fact map in Python 2.x returns a list and not an iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>I might use an <code>itertools.groupby</code>:</p>
<pre><code>any(len(list(g)) &gt; 1 for k, g in itertools.groupby(a))
</code></pre>
<p>The code is fairly straight forward, but <code>itertools</code> will take the input iterable and break it into chunks where the values are equal.  I just look to see if any of the chunks has more than 1 element.  If yes, then you have adjacent duplicates.</p>
<p>This has an upper bound/average time complexity of O(N) which is the best you can hope for an algorithm like this.  For some inputs though, it can be O(1) since it short circuits as soon as it finds a match (duplicates at the beginning of the iterable for instance).</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is the most readable version:</p>
<pre><code>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; any(first == second for first, second in izip(a, a[1:]))
True
</code></pre>
<p>The evaluation of <code>any</code> will be lazy. Pairs are created on-demand by <code>izip</code>. If you are using Python 3, <code>zip</code> already does what <code>izip</code> does in Python 2.</p>
<p>Explanation:</p>
<pre><code>&gt;&gt;&gt; zip(a, a[1:])
[(9, 4), (4, 3), (3, 6), (6, 4), (4, 4), (4, 3), (3, 6), (6, 4)]
</code></pre>
<p>will create tuples of pairs of adjacent elements. <code>any</code> is passed a generator expression to check whether any of these tuples has two of the same elements.</p>
<p>If you want to optimize memory efficiency even further, call <code>(i)zip</code> like this:</p>
<pre><code>&gt;&gt;&gt; it = iter(a)
&gt;&gt;&gt; next(it, None)
9
&gt;&gt;&gt; zip(a, it)
[(9, 4), (4, 3), (3, 6), (6, 4), (4, 4), (4, 3), (3, 6), (6, 4)]
</code></pre>
<p>This will avoid creating the list <code>a[1:]</code>.</p>
</div>
<span class="comment-copy">Have you tried a for loop and check <code>a[i] == a[i+1]</code>?</span>
<span class="comment-copy">I was getting an index out of range error</span>
<span class="comment-copy">Then you should have used <code>len(a) - 1</code> for the end of the range.</span>
<span class="comment-copy">Hey OP, have you come any further with the help of the answers you got?</span>
<span class="comment-copy">Somewhat more straightforward to use <code>any</code> here, and using <code>lambda</code> with <code>map</code> is always the worst option (<code>map</code> with a C builtin can be good, otherwise, use generator expressions). In this case though, <code>map</code> can work better, no need for <code>zip</code> at all with <code>operator.eq</code>: <code>from operator import eq</code>, <code>hasEqualNeighbors = any(map(eq, a, a[1:]))</code>. If on Python 2, do <code>from future_builtins import map</code> first to get the generator based <code>map</code> (so <code>any</code> can early out and avoid checking further once it hits).</span>
<span class="comment-copy">Thank you, I just wanted to avoid importing anything but you are of absolutely correct. Updated my answer.</span>
<span class="comment-copy">@Christian Added full explanation.</span>
<span class="comment-copy">@mgilson Done, thanks :-)</span>
