<div class="post-text" itemprop="text">
<p>I have a list with some text:</p>
<pre><code>my_list = ['sentence1','sentence2','sentence3','sentence4' ]
</code></pre>
<p>And I want as output a string like this:</p>
<pre><code>'sentence1, sentence2, sentence3, sentence4'
</code></pre>
<p>If I make this, I get an aditional  <code>', '</code> at the end</p>
<pre><code>string_sentences = ''
for sentence in my_list:
    string_sentences +=  sentence +', '
string_sentences

output: 'sentence1, sentence2, sentence3, sentence4, '
</code></pre>
<p>same with this approach, but now at the beginning:</p>
<pre><code>string_sentences = ''
for sentence in my_list:
    string_sentences += ', ' + sentence 
string_sentences

', sentence1, sentence2, sentence3, sentence4'
</code></pre>
<p>Only thing I can think to solve it is to keep track of the indices</p>
<pre><code>string_sentences = ''
for i,sentence in enumerate(my_list):
    if i +1 &lt; len(my_list):
        string_sentences += sentence +', '
    else:
        string_sentences += sentence
string_sentences

ouput: 'sentence1, sentence2, sentence3, sentence4'
</code></pre>
<p>But this seems like a very common issues, and I wonder whether is a more pythonic way to solve it. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">join</a> method to convert your list to a string. Provide a separator that will go between each element that is extracted from the list that goes in to your string. In this case <code>,</code> and a space ' ' after the comma:</p>
<pre><code>my_list = ['sentence1','sentence2','sentence3','sentence4' ]
s = ', '.join(my_list)
</code></pre>
<p>By printing s we will have:</p>
<pre><code>'sentence1, sentence2, sentence3, sentence4'
</code></pre>
<p>Just some extra notes about why using <code>join</code> here would actually be preferable, is because it actually runs at C speed as opposed to the speed you get from a Python loop. Read about performance tips <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips" rel="nofollow noreferrer">here</a>.</p>
<p>Finally, a warning when doing this. The <code>join</code> always expects an iterable of strings. Which means, if you have a list of integers <code>[1, 2, 3, 4]</code>. You will not be able to call <code>join</code> directly on this. You would have to cast each of those values to an <code>str</code>. A simple example would be something like this: </p>
<pre><code>list_of_ints = [1, 2, 3, 4]
', '.join([str(n) for n in list_of_ints])
</code></pre>
<p>So, to further explain what just happened in the above example. Since we actually have a list of integers. In order to successfully create our string from that list, we need to cast each element in the list to a string. In order to do this, we will use a list-comprehension to create this list of string integers, and then call your join method. </p>
<p>Now, the reason why we are actually not using a generator expression here and using a list comprehension, is because in fact the join method will actually scan the iterable twice, therefore the comprehension in this case is actually faster. </p>
<p>This is actually very nicely explained <a href="https://stackoverflow.com/questions/9060653/list-comprehension-without-python/9061024#9061024">here</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you want?</p>
<pre><code>&gt;&gt;&gt; my_list = ['sentence1','sentence2','sentence3','sentence4' ]
&gt;&gt;&gt; ', '.join(my_list)
'sentence1, sentence2, sentence3, sentence4'
&gt;&gt;&gt; 
&gt;&gt;&gt; result = ', '.join(my_list)
&gt;&gt;&gt; result
'sentence1, sentence2, sentence3, sentence4'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Your suggested way is the only way to do this nicely in many languages (apart from having a boolean variable <code>firstTime</code> which is set to <code>False</code> after the first loop), apparently. In Python, you have <code>join</code> method as suggested in the answer.</span>
<span class="comment-copy">@justhalf actually join is a common way to do this in <a href="http://stackoverflow.com/questions/24053499/java-8-string-join-operation-has-significant-performance-impact">Java 8</a>, <a href="http://perldoc.perl.org/functions/join.html" rel="nofollow noreferrer">Perl</a>, and <a href="http://stackoverflow.com/questions/21078/most-effecient-way-to-concatenate-strings">C#</a> (though stringbuilder may be used for larger values) as well</span>
<span class="comment-copy">I was not aware that they have <code>join</code> methods in Perl and C#, but at least in Java, it was a features quite late to be added (Java 8 is still considered new for me)</span>
<span class="comment-copy">Thanks, about the 'join(str(n) for n in list_of_ints)' what is getting the join mehod from 'str(n) for n in list_of_ints'? why isn't needed  to put it as a list comprehension or a generator join([str(n) for n in list_of_ints])?</span>
<span class="comment-copy">@LuisRamonRamirezRodriguez I'm glad you asked that question. I am updating my answer to give you exactly that answer.</span>
<span class="comment-copy">@LuisRamonRamirezRodriguez Take a look at the updated answer.</span>
<span class="comment-copy">Don't use answers to ask a question: be more assertive!</span>
<span class="comment-copy">point taken @PM2Ring</span>
<span class="comment-copy">I strongly suggest that you modify that wording: some users (especially those that spend a lot of time in the review queues) will downvote or flag answers that start with a clarification question.</span>
