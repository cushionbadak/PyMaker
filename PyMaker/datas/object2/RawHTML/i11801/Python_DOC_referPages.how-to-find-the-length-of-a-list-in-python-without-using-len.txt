<div class="post-text" itemprop="text">
<p>I want to write a function which will find out the length of a list based on user input. I don't want to use the in-built function len(). PLease help me. Function which i have written is working for strings but for lists it is failing.</p>
<pre><code>#function for finding out the length
def string_length(a):
    for i in a:
        j+=1
    return j

#taking user input
a = input("enter string :")
length = string_length(a)
print("length is ", length)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably need to initialize your variable <code>j</code> (here under renamed <code>counter</code>):</p>
<pre><code>def string_length(my_string):
    """returns the length of a string
    """
    counter = 0
    for char in my_string:
        counter += 1
    return counter

# taking user input
string_input = input("enter string :")
length = string_length(string_input)

print("length is ", length)
</code></pre>
<p>This could also be done in one "pythonic" line using a generator expression, as zondo has pointed out:</p>
<pre><code>def string_length(my_string):
    """returns the length of a string
    """
    return sum(1 for _ in my_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's quite simple:</p>
<pre><code>def string_length(string):
    return sum(1 for char in string)
</code></pre>
<p><code>1 for char in string</code> is a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a> that generates a <code>1</code> for each character in the string.  We pass that generator to <code>sum()</code> which adds them all up.  The problem with what you had is that you didn't define <code>j</code> before you added to it.  You would need to put <code>j = 0</code> before the loop.  There's another way that isn't as nice as what I put above:</p>
<pre><code>from functools import reduce # reduce() is built-in in Python 2.

def string_length(string):
    return reduce(lambda x,y: x+1, string, 0)
</code></pre>
<p>It works because <code>reduce()</code> calls the <code>lambda</code> function first with the <em>initial</em> argument, 0, and the first character in the string.  The <code>lambda</code> function returns its first argument, 0, plus one.  <code>reduce()</code> then calls the function again with the result, 1, and the next character in the string.  It continues like this until it has passed every character in the string.  The result: the length of the string.</p>
</div>
<span class="comment-copy">I have no idea how you got that to work for a string. Notice though that you're adding 1 to a 'j' variable without first saying what j is.</span>
<span class="comment-copy">What do you mean by it is not working for a list? Can you give an example of the input that is failing for you please? Also, as already indicating, this code should not have run, because you never actually declared <code>j</code> in your method.</span>
<span class="comment-copy">Your function (once fixed as other comments suggested) will work for any finite iterable. However, note that if you call it for an infinite iterator, it'll keep going forever, rather than raising an exception like <code>len</code> would.</span>
<span class="comment-copy">thanx a lot everyone for responding...</span>
<span class="comment-copy">If the OP is using python3, he'll need to use <code>functools.reduce</code> for your second example.</span>
<span class="comment-copy">@snakecharmerb: Very good point.  I have edited.  I'm too used to Python 2 since LPTHW was the Python book I read.</span>
