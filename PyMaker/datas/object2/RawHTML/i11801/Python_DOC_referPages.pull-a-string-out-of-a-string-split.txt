<div class="post-text" itemprop="text">
<p>I have a string - a sample would be the below:</p>
<pre><code>g0/1                  192.168.1.1     YES NVRAM  up                    up
</code></pre>
<p>I want to pull the IP address out of it but not the last octet. I want to pull 192.168.1. out of it so it can used later.</p>
<p>I think I need to use split, but am not sure on how to achieve this.</p>
<pre><code>output = '    g0/1                  192.168.1.1     YES NVRAM  up                    up'
ouput = ouput.split('192.168.1.',)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>split()</code>.</p>
<pre><code>&gt;&gt;&gt; output.split()[1].rsplit(".", 1)[0]
'192.168.1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html" rel="nofollow">Regular Expressions</a>.</p>
<pre><code>import re

input_string = "g0/1                  192.168.1.1     YES NVRAM  up                    up"
output = re.search('\d{1,3}\.\d{1,3}\.\d{1,3}\.', input_string)
</code></pre>
<p>EDIT: Changed from <code>match()</code> to <code>search()</code> since <code>match()</code> only looks at the beginning of the string.</p>
<p>Also, assuming you want to do this for more than one string, you can use the <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow"><code>findall()</code></a> function, instead, which will return a list of all the matching groups of your regular expression. </p>
<pre><code>&gt; import re

&gt; input_string = "g0/1                  192.168.1.1     YES NVRAM  up                    up"
&gt; outputs = re.search('\d{1,3}\.\d{1,3}\.\d{1,3}\.', input_string)
&gt; print(outputs)
['192.168.1.']
</code></pre>
</div>
<span class="comment-copy">I would humbly suggest that regular expressions is far too heavy a hammer for this task.</span>
<span class="comment-copy">True. I seem to have fallen into the trap of using RegExes even when not necessary.</span>
