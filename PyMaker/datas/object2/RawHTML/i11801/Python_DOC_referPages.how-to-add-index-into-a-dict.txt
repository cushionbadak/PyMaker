<div class="post-text" itemprop="text">
<p>For example, given:</p>
<pre><code>['A', 'B', 'A', 'B']    
</code></pre>
<p>I want to have:</p>
<pre><code>{'A': [0, 2], 'B': [1, 3]}
</code></pre>
<p>I tried a loop that goes like; add the index of where the character is found, then replace it with <code>''</code> so the next time the loop goes through, it passes on to the next character. </p>
<p>However, that loops doesn't work for other reasons, and I'm stuck with no idea how to proceed.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple dictionary comprehension should do the trick:</p>
<pre><code>{key: [index for index, x in enumerate(my_list) if x == key] for key in my_list}
</code></pre>
<p>A simple trial:</p>
<pre><code>&gt;&gt;&gt;&gt; my_list = ['A','B','A','B']
&gt;&gt;&gt;&gt; {key: [index for index, x in enumerate(my_list) if x == key] for key in my_list}
&gt;&gt;&gt;&gt; {'A': [0, 2], 'B': [1, 3]}
</code></pre>
<hr/>
<h2>How It Works</h2>
<p><a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">List comprehensions</a> are often used in Python as syntactic sugar for a for loop. Instead of writing</p>
<pre><code>my_list = []
for item in range(10):
    my_list.append(item)
</code></pre>
<p>list comprehensions essentially let you condense this series of statements into a single line:</p>
<pre><code>my_list = [item for item in range(10)]
</code></pre>
<p>Whenever you see a list comprehension, you should remember that it's just a condensed version of the original three line statement. They are effectively identical - the only benefit offered here is conciseness.</p>
<p>A similar, related species is the <a href="https://stackoverflow.com/questions/1747817/create-a-dictionary-with-list-comprehension-in-python">dictionary comprehension</a>. It is similar to the list comprehension, except that it allows you to specify <em>both</em> the keys and values at the same time.</p>
<p>An example of a dictionary comprehension:</p>
<pre><code>{k: None for k in ["Hello", "Adele"]}
&gt;&gt;&gt;&gt; {"Hello": None, "Adele": None}
</code></pre>
<p>In the answer I provide, I have simply used a dictionary comprehension that</p>
<ul>
<li>Pulls out <code>key</code>s from <code>my_list</code></li>
<li>Assigns a list of indices for each <code>key</code> from <code>my_list</code> as the corresponding value</li>
</ul>
<p>Syntactically, it expands out into a fairly complicated program that reads like this:</p>
<pre><code>my_dict = {}
for key in my_list:
    indices = []
    for index,value in enumerate(my_list):
         if value == key:
              indices.append(index)
    my_dict[key] = indices
</code></pre>
<p>Here, <code>enumerate</code> is a standard library function that returns a list of tuples. The first element of each tuple refers to an index of the list, and the second element refers to the value at that index in the list.</p>
<p>Observe:</p>
<pre><code> enumerate(['a','b','a','b'])
 &gt;&gt;&gt;&gt; [(0,'a'),(1,'b'),(2,'b'),(3,'b')]
</code></pre>
<p>That is the power of <code>enumerate</code>. </p>
<h2>Efficiency</h2>
<p>As always, premature optimisation is the root of all evil. It is indeed true that this implementation is inefficient: it duplicates work, and runs in quadratic time. The important thing, however, is to ask if it is <em>okay</em> for the specific task you have. For relatively small lists, this is sufficient. </p>
<p>You can look at certain optimisations. @wilinx's way works well. @Rob in the comments suggests iterating over <code>set(my_list)</code>, which prevents duplicated work. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/functions.html#enumerate">enumerate</a> and <a href="http://www.tutorialspoint.com/python/dictionary_setdefault.htm">setdefault</a>:</p>
<pre><code>example = ['a', 'b', 'a', 'b']
mydict = {}
for idx, item in enumerate(example):
     indexes = mydict.setdefault(item, [])
     indexes.append(idx)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use <a href="http://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict</code></a> from <code>itertools</code> instead:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; 
&gt;&gt;&gt; for i,x in enumerate(l):
        d[x].append(i)


&gt;&gt;&gt; d
defaultdict(&lt;class 'list'&gt;, {'A': [0, 2], 'B': [1, 3]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All you need is to do is use right <strong>DataType</strong> for you. Check this link - python doc. Good Luck. Hope this helps.</p>
<p>Source: <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">https://docs.python.org/2/library/collections.html#collections.OrderedDict</a></p>
<pre><code>&gt;&gt;&gt; # regular unsorted dictionary
&gt;&gt;&gt; d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

&gt;&gt;&gt; # dictionary sorted by key
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])
</code></pre>
</div>
<span class="comment-copy">That comprehension duplicates work. Maybe <code>... for key in set(my_list)</code> ?</span>
<span class="comment-copy">Agreed. That would be a good change.</span>
<span class="comment-copy">This is new to me, could you walk me through how it works?</span>
<span class="comment-copy">@LtotheV: Sure! Let me just update the post.</span>
<span class="comment-copy">​​​​​​​​​​​​​​​Hmm...note that since this way will loop over the list again and again, I think it would be slower than <a href="http://stackoverflow.com/a/36395180/5299236">willnx's way</a>.</span>
<span class="comment-copy">​​​​​​​​​​​​​​​You can also <code>from collections import defaultdict</code> and use <code>mydict = defaultdict(list)</code>, then you don't need run <code>mydict.setdefault(item, [])</code> yourself and I think it would be more Pythonic.</span>
<span class="comment-copy">But then you have to import it :P   Good point - if you want to submit an edit with an example of using that or setdefault, I'll accept it.</span>
<span class="comment-copy">​​​​​​​​​​​​​​​Well, that's not <a href="https://stackoverflow.com/help/privileges/edit"><i>the correct usage of edit</i></a> anyway. So I will not submit an edit. But anyway, here's <a href="http://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">the documentation of <code>collections.defaultdict</code></a>.</span>
<span class="comment-copy">Wait a minute... isn't <code>defaultdict</code> in <code>collections</code>?</span>
<span class="comment-copy">Yea...correct...thanks...:D</span>
<span class="comment-copy">Did the OP mention not importing anything? <code>defaultdict</code> is a pretty common thing to import from the stdlib</span>
<span class="comment-copy">That's not even the same problem. He's trying to store in a dict the indexes of a value within a list, not sort key:value pairs based on the value</span>
<span class="comment-copy">@DanGayle my bad ! Either I did not read properly or further explanation were added later,. Thanks for pointing out :)</span>
