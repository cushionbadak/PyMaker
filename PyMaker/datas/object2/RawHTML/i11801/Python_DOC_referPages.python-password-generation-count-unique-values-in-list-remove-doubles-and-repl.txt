<div class="post-text" itemprop="text">
<p>Im searching for a fast and pythonic way to generate new (forgotten) user passwords with high entropy. To achieve this i use a list with 64 chars which in this code will only be named "chars = []"</p>
<p>The problem is that sometimes chars are more than once (sometimes even triple) in a password. As far as i found out i can remove repeating items from a list with "set". But how can i append new items with this code that dont repeat again? Maybe this could be done all at once when generating it?</p>
<p>I need to say that im quite new to programming. Maybe my code is bad but i was reading much about random and urandom and i am sure i want to use os.urandom. Any suggestions, snippets and hints to make the code better would be very much appreciated.</p>
<pre><code>chars = []
z = map(ord, os.urandom(12))
passw = []

for i in z:
    y = int(i) % 64 # modulo each item from urandom to map it to the list
    passw.append(chars[y])

print ''.join(passw)
</code></pre>
<p>Thank you for taking your time!</p>
</div>
<div class="post-text" itemprop="text">
<p>Loop while you reach the desired length</p>
<pre><code>passw = ''

while len(passw) &lt;= 12:
    char = chars[ord(os.urandom(1)) % 64]
    if char not in passw:
        passw += char
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remove each char from the list of available chars after taking it.</p>
<pre><code>import random
import string

def mkpwd(l=12):
    # Start with all available characters.
    chars = [c for c in string.ascii_letters + string.digits]
    # Make sure we don't take more characters than are available.
    l = min(l, len(chars))
    # Collect the picked characters.
    cs = []
    for _ in range(l):
        # Take a random character from the current list of characters.
        i = random.randint(0, len(chars) - 1)
        c = chars[i]
        cs.append(c)
        # Remove the taken character from the list.
        # This ensures that every character is only taken once.
        del chars[i]
    return("".join(cs))

print(mkpwd())
print(mkpwd(24))
print(mkpwd(62))
print(mkpwd(1024))
</code></pre>
<p>Output (example):</p>
<pre><code>0GEmMWXYbqeQ
eL83iPTMNatK54Efr2ZhdqWn
fIBj2DTw6P1grGJKZONdv9U8CaWet7l4n5QiFczRhqmxSALHMY0Vskp3oEXbuy
v6Fpt3yrMcGwENTjXODk5W2bZYeL8AqHQ0lJ9oadfIsg7mhBzU14RVnKiuxSPC
</code></pre>
</div>
<span class="comment-copy">Why do you want to remove duplicate chars in a password? That would make them less random</span>
<span class="comment-copy">@Farhan.K Thanks for pointing this out! I was thinking that the opposite is the case. Seems i should read more about entropy.</span>
<span class="comment-copy">This will lead to a lot of uncessary loops as you try to build larger passwords.</span>
<span class="comment-copy">You are right. The assumption anyway is a set of 64 characters so I can live with some unnecessary loops</span>
<span class="comment-copy">This changes if the password length is close to the length of chars. In such case your solution is better. But with a password length of 12 i'm getting 2.4 unnecessary loops on average of 100k iterations</span>
<span class="comment-copy">As the passwords will be only 12 chars long and the function probably isn't called that often i'm happy with that. I like this idea because it is easy to understand and fast to implement. I tried this before but i had problems with the nesting. With this example i understood how to do it. Thank you @Francesco!</span>
<span class="comment-copy">Consider using <code>SystemRandom()</code> to choose the index of the characters. Something like: <code>chars = [c for c in string.ascii_letters + string.digits];  pwIndexes = [chooseRandomChars.randrange(len(chars)) for i in range(l)]</code></span>
<span class="comment-copy">Nice solution. To be more useful to the user  you could use urandom since he <i>is sure he wants to use os.urandom</i>. You could also use a string instead of a list for <code>cs</code> for a cleaner code</span>
<span class="comment-copy">Yes, the randomness could be improved. The main focus of this snippet is to demonstrate how to take only once.</span>
<span class="comment-copy">@LutzHorn Thank you for your help! As far as i understand the first c in the 6th line of your code is the output of the for loop? This is the first time i've seen a for loop with something in front of it.  I forgot to mention that my list of Characters is not only letters but also special characters mixed in between. Would it work with them too?  Can you please explain me what <code>l = min(l, len(chars))</code> does? I assume min is a function?</span>
<span class="comment-copy">Yes, <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> calculates the minimum.</span>
