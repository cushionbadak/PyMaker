<div class="post-text" itemprop="text">
<p>I have python script that takes command line arguments. The way I get the command line arguments is by reading a mongo database. I need to iterate over the mongo query and launch a different process for the single script with different command line arguments from the mongo query.</p>
<p>Key is, I need the launched processes to be:</p>
<ul>
<li>separate processes share nothing</li>
<li>when killing the process, I need to be able to kill them all easily.</li>
</ul>
<p>I think the command <code>killall -9 script.py</code> would work and satisfies the second constraint.</p>
<p><strong>Edit 1</strong></p>
<p>From the answer below, the <code>launcher.py</code> program looks like this</p>
<pre><code>def main():


    symbolPreDict = initializeGetMongoAllSymbols()
    keys = sorted(symbolPreDict.keys())

    for symbol in keys:
            # Display key.
            print(symbol)
            command = ['python', 'mc.py', '-s', str(symbol)]
            print command
            subprocess.call(command)

if __name__ == '__main__':
     main()
</code></pre>
<p>The problem is that <code>mc.py</code> has a call that blocks</p>
<pre><code>receiver = multicast.MulticastUDPReceiver ("192.168.0.2", symbolMCIPAddrStr, symbolMCPort ) 
while True: 
    try:
        b = MD()

        data = receiver.read() # This blocks
        ...
    except Exception, e:
        print str(e)
</code></pre>
<p>When I run the launcher, it just executes one of the <code>mc.py</code> (there are at least 39). How do I modify the launcher program to say "run the launched script in background" so that the script returns to the launcher to launch more scripts?</p>
<p><strong>Edit 2</strong></p>
<p>The problem is solved by replacing <code>subprocess.call(command)</code> with <code>subprocess.Popen(command)</code> </p>
<p>One thing I noticed though, if I say <code>ps ax | grep mc.py</code>, the PID seem to be all different. I don't think I care since I can kill them all pretty easily with <code>killall</code>.</p>
<p>[Correction] kill them with <code>pkill -f xxx.py</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are several options for launching scripts from a script. The easiest are probably to use the <code>subprocess</code> or <code>os</code> modules.</p>
<p>I have done this several times to launch things to separate nodes on a cluster. Using <code>os</code> it might look something like this:</p>
<pre><code>import os
for i in range(len(operations)):
     os.system("python myScript.py {:} {:} &gt; out.log".format(arg1,arg2))
</code></pre>
<p>using killall you should have no problem terminating processes spawned this way.</p>
<p>Another option is to use <code>subprocess</code> which has got a wide range of features and is much more flexible than <code>os.system</code>. An example might look like:</p>
<pre><code>import subprocess
for i in range(len(operations)):
    command = ['python','myScript.py','arg1','arg2']
    subprocess.call(command)
</code></pre>
<p>In both of these methods, the processes are independent and share nothing other than a parent PID.</p>
</div>
<span class="comment-copy">You probably want multiprocessing not subprocess <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html</a></span>
<span class="comment-copy">Aren't these running on their own process?</span>
<span class="comment-copy">Yes but horses for courses, if you want to run and control multiple processes then use multiprocessing, hence the name.</span>
<span class="comment-copy">Well, what does it buy me?</span>
<span class="comment-copy">These scripts do not communicate or share anything.</span>
<span class="comment-copy">I gave you credit because you answered my question. Please See Edit 1 for an unanticipated problem.</span>
<span class="comment-copy">I figured it out Popen.</span>
<span class="comment-copy">call blocks so you won't be running one process  untll the previous process returns</span>
<span class="comment-copy">That does not appear to be the case. See Edit 2.</span>
<span class="comment-copy">Popen will definitely work. But as a note to others reading this question, so will <code>os.system()</code> by simply adding an <code>&amp;</code> to the end of the command. On UNIX/LINUX/UNIX-like systems the <code>&amp;</code> runs a process in the background. For example try <code>os.system('sleep 3')</code> versus <code>os.system('sleep 3 &amp;')</code></span>
