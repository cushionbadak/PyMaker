<div class="post-text" itemprop="text">
<p>(I'm new to Python!)
Trying to figure out this homework question:
The function will takes a​s input​ two dictionaries, each mapping strings to integers. The function will r​eturn​ a dictionary that maps strings from the two input dictionaries to the sum of the integers in the two input dictionaries.</p>
<p>my idea was this:</p>
<pre><code>def ​add(​dicA,dicB):
    dicA = {}
    dicB = {}
    newdictionary = dicA.update(dicB)
</code></pre>
<p>however, that brings back <code>None</code>.</p>
<p>In the professor's example:</p>
<pre><code>print(add({'alice':10, 'Bob':3, 'Carlie':1}, {'alice':5, 'Bob':100, 'Carlie':1}))
</code></pre>
<p>the output is:</p>
<pre><code>{'alice':15, 'Bob':103, 'Carlie':2}
</code></pre>
<p>My issue really is that I don't understand how to add up the values from each dictionaries. I know that the '+' is not supported with dictionaries. I'm not looking for anyone to do my homework for me, but any suggestions would be very much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3.5/library/stdtypes.html#dict.update" rel="nofollow">documentation</a>:</p>
<blockquote>
<p><code>update([other])</code></p>
<p>Update the dictionary with the key/value pairs from <code>other</code>, overwriting existing keys. Return <code>None</code>.</p>
</blockquote>
<p>You don't want to replace key/value pairs, you want to add the values for similar keys. Go through each dictionary and add each value to the relevant key:</p>
<pre><code>def ​add(​dicA,dicB):
    result = {}
    for d in dicA, dicB:
        for key in d:
            result[key] = result.get(key, 0) + d[key]
    return result
</code></pre>
<p><code>result.get(key, 0)</code> will retrieve the value of an existing <code>key</code> or produce <code>0</code> if <code>key</code> is not yet present.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <code>a.update(b)</code> updates <code>a</code> in place, and returns <code>None</code>.
Secondly, <code>a.update(b)</code> wouldn't help you to sum the keys; it would just produce a dictionary with the resulting dictionary having all the key, value pairs from <code>b</code>:</p>
<pre><code>&gt;&gt;&gt; a = {'alice':10, 'Bob':3, 'Carlie':1}
&gt;&gt;&gt; b = {'alice':5, 'Bob':100, 'Carlie':1}
&gt;&gt;&gt; a.update(b)
&gt;&gt;&gt; a
{'alice': 5, 'Carlie': 1, 'Bob': 100}
</code></pre>
<p>It'd be easiest to use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> to achieve the desired result. As a plus, it does support addition with <code>+</code>:</p>
<pre><code>from collections import Counter

def add(dicA, dicB):
    return dict(Counter(dicA) + Counter(dicB))
</code></pre>
<p>This produces the intended result:</p>
<pre><code>&gt;&gt;&gt; print(add({'alice':10, 'Bob':3, 'Carlie':1}, {'alice':5, 'Bob':100, 'Carlie':1}))
{'alice': 15, 'Carlie': 2, 'Bob': 103}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following is not meant to be the most elegant solution, but to get a feeling on how to deal with dicts.</p>
<pre><code>dictA = {'Alice':10, 'Bob':3, 'Carlie':1}
dictB = {'Alice':5, 'Bob':100, 'Carlie':1} 


# how to iterate through a dictionary
for k,v in dictA.iteritems():
        print k,v

# make a new dict to keep tally
newdict={}

for d in [dictA,dictB]:   # go through a list that has your dictionaries
    print d
    for k,v in d.iteritems():  # go through each dictionary item
        if not k in newdict.keys():
            newdict[k]=v
        else:
            newdict[k]+=v

print newdict
</code></pre>
<p>Output:</p>
<pre><code>Bob 3
Alice 10
Carlie 1
{'Bob': 3, 'Alice': 10, 'Carlie': 1}
{'Bob': 100, 'Alice': 5, 'Carlie': 1}
{'Bob': 103, 'Alice': 15, 'Carlie': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def ​add(​dicA,dicB):
</code></pre>
<p>You define a function that takes two arguments, <code>dicA</code> and <code>dicB</code>.</p>
<pre><code>dicA = {}
dicB = {}
</code></pre>
<p>Then you assign an empty dictionary to both those variables, overwriting the dictionaries you passed to the function.</p>
<pre><code>newdictionary = dicA.update(dicB)
</code></pre>
<p>Then you update <code>dicA</code> with the values from <code>dicB</code>, and assign the result to <code>newdictionary</code>. <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow"><code>dict.update</code></a> always returns <code>None</code> though.</p>
<p>And finally, you don’t return anything from the function, so it does not give you any results.</p>
<hr/>
<p>In order to combine those dictionaries, you actually need to use the values that were passed to it. Since <code>dict.update</code> mutates the dictionary it is called on, this would change one of those passed dictionaries, which we generally do not want to do. So instead, we use an empty dictionary, and then copy the values from both dictionaries into it:</p>
<pre><code>def add (dicA, dicB):
    newDictionary = {}
    newDictionary.update(dicA)
    newDictionary.update(dicB)
    return newDictionary
</code></pre>
<hr/>
<p>If you want the values to sum up automatically, then use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter</a> instead of a normal dictionary:</p>
<pre><code>from collections import Counter
def add (dicA, dicB):
    newDictionary = Counter()
    newDictionary.update(dicA)
    newDictionary.update(dicB)
    return newDictionary
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suspect your professor wants to achieve this using more simple methods. But you can achieve this very easily using <code>collections.Counter</code>.</p>
<pre><code>from collections import Counter

def add(a, b):
    return dict(Counter(a) + Counter(b))
</code></pre>
<p>Your professor probably wants something like this:</p>
<pre><code>def add(a, b):
    new_dict = copy of a
    for each key/value pair in b
        if key in new_dict
            add value to value already present in new_dict
        else
            insert key/value pair into new_dict
    return new_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def add(dict1, dict2):
  return dict([(key,dict1[key]+dict2[key]) for key in dict1.keys()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally like using a dictionary's <code>get</code> method for this kind of merge:</p>
<pre><code>def add(a, b):
    result = {}
    for dictionary in (a, b):
        for key, value in dictionary.items():
            result[key] = result.get(key, 0) + value
    return result
</code></pre>
</div>
<span class="comment-copy">Are the two dictionaries guaranteed to have the same keys?</span>
<span class="comment-copy">@Natecat yes! sorry, I should have mentioned that.</span>
<span class="comment-copy">@GabbyAntunes in what you have done, at which point do you expect the values to be added? Because I don't see any adding in it ^^</span>
<span class="comment-copy">Thank you! Everyone's comments were very helpful, but I think this is precisely what my professor wants us to do! Thank you again!</span>
<span class="comment-copy">Good canonical solution to the problem. For his specific example though, as it is a homework exercise, I doubt that's what's expected.</span>
<span class="comment-copy">@spectras the post has very little in the way of what is expected, other than the output. It lacks the authors initial attempt etc.</span>
<span class="comment-copy">@spectras exactly :D as if this would be a homework solving site.</span>
<span class="comment-copy">@Ilja&gt; true, and that's why I upvoted anyway. It does not answer the question OP intended to ask, but it does answer the one he asked, and is likely to be more valuable to future readers than the accepted one.</span>
<span class="comment-copy">I believe OP's intent was that the code was supposed to add together the values, e.g. <code>collections.Counter()</code></span>
<span class="comment-copy">Note that this wouldn't give the desired result, as OP is barking up the wrong tree with <code>update()</code>.</span>
<span class="comment-copy">@AnttiHaapala Good point, added that. Although my answer still covers pretty well what was wrong with OP’s approach…</span>
<span class="comment-copy">You can just create a counter with <code>dicA</code> ;  <code>newDictionary = Counter(dicA)</code> and then <code>newDictionary.update(dicB)</code> also it worth mentioning that the <code>Counter</code> <code>update()</code> method adds counts instead of replacing them.</span>
<span class="comment-copy">This will fail if a key exists in dict1 and not in dict2 (KeyError). And it will miss the values in dict2 if there is no corresponding value in dict1. Basically, you are assuming same key set. You have to specify it in your answer.</span>
<span class="comment-copy">@ffarquet The OP has stated that the keyset is the same.</span>
