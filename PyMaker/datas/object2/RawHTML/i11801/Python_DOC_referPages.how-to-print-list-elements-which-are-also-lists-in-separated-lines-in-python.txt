<div class="post-text" itemprop="text">
<p>I've checked the post and answers on the SO post <a href="https://stackoverflow.com/questions/6167731/printing-list-elements-on-separated-lines-in-python"><em>Printing list elements on separated lines in Python</em></a>, while I think my problem is a different one.</p>
<p>What I want is to transform:</p>
<pre><code>lsts = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
</code></pre>
<p>into the output like below:</p>
<pre><code>[[1],
[1, 1],
[1, 2, 1],
[1, 3, 3, 1],
[1, 4, 6, 4, 1]]
</code></pre>
<p>I tried append, print in the for loop
and "\n".join() but all failed.</p>
</div>
<div class="post-text" itemprop="text">
<p>To achieven exactly what you want, you could manually unroll and print the outer array like already suggested:</p>
<pre><code>&gt;&gt;&gt; lsts = [[1], [2,3], [4, 5, 6]]
&gt;&gt;&gt; print("[" + ",\n".join(str(i) for i in lsts) + "]")
[[1],
[2, 3],
[4, 5, 6]]
</code></pre>
<p>Not exactly what you requested, but <a href="https://docs.python.org/3/library/json.html?highlight=json#json.dumps" rel="nofollow">json.dumps</a> can do some pretty-printing by specifying an <code>indent</code>:</p>
<pre><code>&gt;&gt;&gt; print(json.dumps(lsts, indent=4))
[
    [
        1
    ],
    [
        2,
        3
    ],
    [
        4,
        5,
        6
    ]
]
</code></pre>
<p>And then there's <a href="https://docs.python.org/3/library/pprint.html?highlight=pprint#pprint.pprint" rel="nofollow">pprint</a>, which is intended for somewhat intelligent printing for humans:</p>
<pre><code>&gt;&gt;&gt; pprint(lsts, width=20)
[[1],
 [2, 3],
 [4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this if the form of lsts is fixed:  </p>
<pre><code>&gt;&gt;&gt; print '['+'\n'.join([ str(i) for i in lsts ]) + ']'  

[[1]  
[1, 1]  
[1, 2, 1]  
[1, 3, 3, 1]  
[1, 4, 6, 4, 1]]  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:         </p>
<pre><code>lsts = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
print('[',end='')
for i,value in enumerate(lsts):
    print(value,end='')
    if i == len(lsts)-1:
        print(']')
    else:
        print(',')
</code></pre>
<p><strong>Output:</strong> </p>
<pre><code>[[1],
[1, 1],
[1, 2, 1],
[1, 3, 3, 1],
[1, 4, 6, 4, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print ']\n'.join(str(lsts).split('],'))
</code></pre>
<p>This is gross but does what you want it to.</p>
<pre><code>for l in lsts:
    print l
</code></pre>
<p>almost does except you miss the first and last brackets. so you could do</p>
<pre><code>list_len = len(lsts)
for i in range(list_len):
    if i == 0:
        print '['+str(lsts[i])
    elif i == list_len - 1:
        print str(lsts[i]( +']'
    else:
        print lists[i]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an adaptation of that same idea:</p>
<pre><code>output = "[" + ",\n".join(str(i) for i in lsts) + "]"
</code></pre>
</div>
<span class="comment-copy">Very enlightening! Thank you again Felk</span>
<span class="comment-copy">Thank you Cui. It's better to add a comma here, making it more like a list of lists.  ',\n'.join()</span>
<span class="comment-copy">Yes, it is that if you need a comma. Sorry to watch your reply so late.</span>
<span class="comment-copy"><code>for i in range(len(lsts)):</code> is considered unpythonic. <code>for i, value in enumerate(lsts):</code> is the pretty way to go</span>
<span class="comment-copy">@Felk - Thanks for pointing this out, I have updated the answer.</span>
<span class="comment-copy">Thanks Ren, that's easy to conceive!</span>
<span class="comment-copy">Thanks Felk, I didn't know enumerate() and always use range(len()) until just now. Many thanks!</span>
<span class="comment-copy">the <code>[]</code> in the <code>join()</code> are unnecessary. A generator expression is faster and more readable</span>
<span class="comment-copy">@Felk Thanks for the tip! I'll update it.</span>
