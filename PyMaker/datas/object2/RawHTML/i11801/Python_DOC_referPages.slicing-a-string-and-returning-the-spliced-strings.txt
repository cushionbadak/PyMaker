<div class="post-text" itemprop="text">
<p>having trouble with my function to slice a string (DNA code) in 8 places and return them. I'm new to the rstrip() and split() functions and I think I may need to use them here, but I don't quite understand how.</p>
<p>Here is my code:</p>
<pre><code>input2=open('queryfile.txt','r')

def slice_seq(a,b,c,d,e,f,g,h,query_seq):
    query_seq=input2
        slice_1=query_seq[a:b + 1]
        slice_2=query_seq[c:d + 1]
        slice_3=query_seq[e:f + 1]
        slice_4=query_seq[g:h + 1]
    return slice_1,slice_2,slice_3,slice_4

a=146
b=917
c=2381
d=2737
e=1
f=155
g=917
h=1057
answer=slice_seq(a,b,c,d,e,f,g,h,input2)
print(answer)
</code></pre>
<p>the query file looks like this:</p>
<pre><code>emb|AJ000012.1| Mycobacterium tuberculosis recA gene (strain Canetti)
CGAAAGGTCAGATCCGGGCCGGTGAGCACGCCGGATCCGGCCAGGCTAGCGGTGTTCAGCAGATCGTCGG
TGATCCGGACCAGCCGCGCACGCAAGTCGGGCCGCACCGCCGCCAGGGCGTTCGACGCGCCGACGAGCGC
GGACGCGATGTTGCCACACGCGGCGTGTCACACTTGAATCGAACAGGTGTTCGGCTACTGTGGTGATCAT
TCGGAGCAGCCGACTTGTCAGTGGCTGTCTCTAGTGTCACGGCCAACCGACCGATACCGGTCAATCGAAC
ACCGACCACAGGAGAGGCACCATGACGCAGACCCCCGATCGGGAAAAGGCGCTCGAGCTGGCAGTGGCCC
AGATCGAGAAGAGTTACGGCAAAGGTTCGGTGATGCGCCTCGGCGACGAGGCGCGTCAGCCGATTTCGGT
CATTCCGACCGGATCCATCGCACTCGACGTGGCCCTGGGCATTGGCGGCCTGCCGCGTGGCCGGGTGATA
GAGATATACGGCCCGGAATCTTCGGGTAAGACCACCGTGGCGCTGCACGCGGTGGCCAACGCTCAGGCCG
CCGGTGGTGTTGCGGCGTTCATCGACGCCGAGCACGCGCTGGATCCGGACTATGCCAAGAAGCTCGGTGT
CGACACCGATTCGCTGCTGGTCAGCCAGCCGGACACCGGGGAACAGGCACTCGAGATCGCCGACATGCTG
ATCCGCTCGGGTGCGCTTGACATCGTGGTGATCGACTCGGTGGCGGCGCTGGTGCCGCGCGCGGAGCTCG
AAGGCGAGATGGGCGACAGCCACGTCGGGCTGCAGGCCCGGCTGATGAGCCAGGCGCTGCGGAAAATGAC
CGGCGCGCTGAATAATTCGGGCACCACGGCGATCTTCATCAACCAGCTCCGCGACAAGATCGGAGTGATG
TTCGGGTCGCCCGAGACGACAACGGGCGGAAAGGCGTTGAAGTTCTACGCGTCGGTGCGCATGGACGTGC
GGCGGGTCGAGACGCTCAAGGACGGTACCAACGCGGTCGGCAACCGCACCCGGGTCAAGGTCGTCAAGAA
CAAGTGCCTCGCAGAGGGCACTCGGATCTTCGATCCGGTCACCGGTACAACGCATCGCATCGAGGATGTT
GTCGATGGGCGCAAGCCTATTCATGTCGTGGCTGCCGCCAAGGACGGAACGCTGCATGCGCGGCCCGTGG
TGTCCTGGTTCGACCAGGGAACGCAGGATGTGATCGGGTTGCGGATCGCCGGTGGCGCCATCGTGTGGGC
GACACCCGATCACAAGGTGCTGACAGAGTACGGCTGGCGTGCCGCCGGGGAACTCCGCAAGGGAGACCGG
GTGGCGCAACCGCGACGCTTCGACGGATTCGGTGACAGTGCGCCGATTCCGGCGGATCATGCCCGGCTGC
TTGGCTACCTGATCGGAGATGGCAGGGATGGTTGGGTGGGGGGCAAGACTCCGATCAACTTCATCAATGT
TCAGCGGGCGCTCATTGACGACGTGACGCGAATCGCTGCGACGCTCGGTTGTGCGGCCCATCCGCAGGGG
CGTATCTCACTCGCGATCGCTCATCGACCCGGTGAGCGCAACGGGGTACTGGACCTTTGTCGGCGGGCCG
GTGTGCACGGCAAGCTCGCGTGGGAGAAGACGATTCCGAATTGGTTCTTCGAGCCGGACATCGCGGCCGA
CATTGTCGGCAATCTGCTCTTCGGCCTGTTCGAAAGCGACGGGTGGGTGAGCCGGGAACAGACCGGGGCA
CTTCGGGTCGGTTACACGACGACCTCTGAACAACTCGCGCATCAGATTCATTGGCTGCTGCTGCGGTTCG
GTGTCGGGAGCACCGTTCGAGATTACGATCCGACCCAGAAGCGGCCGAGCATCGTCAACGGTCGACGGAT
CCAGAGCAAACGTCAAGTGTTCGAGGTCCGGATCTCGGGTATGGATAACGTCACGGCATTCGCGGAGTCA
GTTCCCATGTGGGGGCCGCGCGGTGCCGCGCTTATCCAGGCGATTCCAGAAGCCACGCAGGGGCGGCGTC
GTGGATCGCAAGCGACATATCTGGCTGCAGAGATGACCGATGCCGTGCTGAATTATCTGGACGAGCGCGG
CGTGACCGCGCAGGAGGCCGCGGCCATGATCGGTGTAGCTTCCGGGGACCCCCGCGGTGGAATGAAGCAG
GTCTTAGGTGCCAGCCGCCTTCGTCGGGATCGCGTGCAGGCGCTCGCGGATGCCCTGGATGACAAATTCC
TGCACGACATGCTGGCGGAAGAACTCCGGTATTCGGTGATCCGAGAAGTGCTGCCAACGCGGCGGGCACG
AACGTTCGACCTCGAGGTCGAGGAACTGCACACCCTCGTCGCCGAAGGGGTTGTCGTGCACAACTGTTCG
CCCCCCTTCAAGCAGGCCGAGTTCGACATCCTCTACGGCAAGGGAATCAGCAGGGAGGGCTCGCTGATCG
ACATGGGTGTGGATCAGGGCCTCATCCGCAAGTCGGGTGCCTGGTTCACCTACGAGGGCGAGCAGCTCGG
CCAGGGCAAGGAGAATGCCCGCAACTTCTTGGTGGAGAACGCCGACGTGGCTGACGAGATCGAGAAGAAG
ATCAAGGAAAAGCTTGGCATTGGTGCCGTGGTGACCGATGACCCCTCAAATGACGGTGTCCTGCCCGCCC
CCGTCGACTTCTGAGCGCGAAGAGCAGGCGCGGGCACTGTGCCTGCGCCTGCTCACCGCGCGATCCCGCA
CCCGCGC
</code></pre>
<p>Any help would be seriously appreciated! I'm pretty sure my problem is how to deal with the query file so that the function can recognise it and slice it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suppose you're not that keen on slicing the header in that file, so you have to skip it first, one way or the other:</p>
<pre><code>with open('queryfile.txt') as input2:
    # Consume the header
    next(input2)  # or input2.readline()
</code></pre>
<p>The function then has to read the file line by line to a string, stripping newlines as it goes:</p>
<pre><code>dna = ''.join(row.strip() for row in query_seq)
</code></pre>
<p>I'd also suggest changing how you pass the slice indices to the function a bit:</p>
<pre><code>def slice_seq(query_seq, *slices):
</code></pre>
<p>This way your function accepts 0 or more slices as positional arguments, slices being tuples of indices here. Putting it all together you get:</p>
<pre><code>def slice_seq(query_seq, *slices):
    # feel free to use rstrip, if strip seems redundant
    dna = ''.join(row.strip() for row in query_seq)
    return [dna[a:b + 1] for a, b in slices]

a=146
b=917
c=2381
d=2737
e=1
f=155
g=917
h=1057

with open('queryfile.txt') as input2:
    next(input2)
    answer = slice_seq(input2, (a, b), (c, d), (e, f), (g, h))

print(*answer, sep='\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the function <code>slice_seq</code>, remove the line <code>query_sec = input2</code>. That's raising an error. You haven't created a variable named <code>input2</code> in the function and no parameter is named so. That is raising an error. You can't set a variable in a function as another variable. You'll have to globalise the other variable first.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm unclear from the question whether the result should be 4 slices or 8. Below is an attempt to generalize you code. This code returns 4 slices within a list of lists. The 1st slice is from a-&gt;b, 2nd from c-&gt;d, 3rd from e-&gt;f, and the 4th from g-&gt;h.  </p>
<pre><code>def slice_seq(slice_positions, filename):
    with open(filename, 'r') as myfile:
        data=myfile.read().replace('\n', '')
        slice_out = [data[slice[0]:slice[1]+1] for slice in slice_positions]
    return slice_out

slice_positions = [(146, 917), (2381, 2737), (1, 155), (917, 1057)]
filename = 'queryfile.txt'
slice_out = slice_seq(slice_positions, filename)
print(slice_out)
</code></pre>
<p>The slice from a-&gt;b is:</p>
<pre><code>slice_out[0]
</code></pre>
<p>The slice from c-d is:</p>
<pre><code>slice_out[1]
</code></pre>
<p>as so on.</p>
</div>
<span class="comment-copy">It's called slicing not 'splicing'.</span>
<span class="comment-copy">what is input1 in your code?</span>
<span class="comment-copy">Whoops, thanks for pointing that out Dhruv.</span>
<span class="comment-copy">What is your desired output?</span>
<span class="comment-copy">Do you want to skip the header in your file, or do the slice indices take it to account?</span>
<span class="comment-copy">This is great, thank you! Was struggling with how to deal with the rows in the query file. What exactly is sep='\n', I assume that's what's putting the new lines in my output? I've never seen it before.</span>
<span class="comment-copy">It is the separator, sep for short, that <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">print</a> uses to separate multiple arguments when printing. It defaults to a single space. The asterisk in the function call context <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacks the list as positional arguments to print</a>.</span>
<span class="comment-copy">I'd use a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>: <code>slice_out = [data[slices[0]:slices[1]+1] for slices in slice_len]</code>. To make it more readable would also rename the argument <code>slice_len</code> -&gt; <code>slices</code> and use <code>slice_out = [data[slice[0]:slice[1]+1] for slice in slices]</code>.</span>
<span class="comment-copy">Thanks @martineau I've edited to follow your suggestions</span>
