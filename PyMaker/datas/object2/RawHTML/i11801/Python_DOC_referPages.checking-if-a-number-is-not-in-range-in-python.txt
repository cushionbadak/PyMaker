<div class="post-text" itemprop="text">
<p>Ok, so I have Python code at the moment which does something like this:</p>
<pre><code>if plug in range(1, 5):
    print "The number spider has disappeared down the plughole"
</code></pre>
<p>But what I actually want to do is check if the number is <em>not</em> in range. I've googled and had a look at the Python docs but I can't find anything. Any ideas?</p>
<p>Additional data: When running this code:</p>
<pre><code>if not plug in range(1, 5):
    print "The number spider has disappeared down the plughole"
</code></pre>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):
    File "python", line 33, in &lt;module&gt;
IndexError: list assignment index out of range
</code></pre>
<p>I also tried:</p>
<pre><code>if plug not in range(1,5):
     print "The number spider has disappeared down the plughole"
</code></pre>
<p>Which returned the same error.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your range has a <code>step</code> of one, it's performance-wise much faster to use:</p>
<pre><code>if not 1 &lt;= plug &lt; 5:
</code></pre>
<p>Than it would be to use the <code>not</code> method suggested by others:</p>
<pre><code>if plug not in range(1, 5)
</code></pre>
<p>Proof:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('1 &lt;= plug &lt; 5', setup='plug=3')  # plug in range
0.053391717400628654
&gt;&gt;&gt; timeit.timeit('1 &lt;= plug &lt; 5', setup='plug=12')  # plug not in range
0.05137874743129345
&gt;&gt;&gt; timeit.timeit('plug not in r', setup='plug=3; r=range(1, 5)')  # plug in range
0.11037584743321105
&gt;&gt;&gt; timeit.timeit('plug not in r', setup='plug=12; r=range(1, 5)')  # plug not in range
0.05579263413291358
</code></pre>
<p>And this is not even taking into account the time spent on creating the <code>range</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems work as well:</p>
<pre><code>if not 2 &lt; 3 &lt; 4:
    print('3 is not between 2 and 4') # which it is, and you will not see this

if not 2 &lt; 10 &lt; 4:
    print('10 is not between 2 and 4')
</code></pre>
<p>Exact answer to the original question would be <code>if not 1 &lt;= plug &lt; 5:</code> I guess</p>
</div>
<div class="post-text" itemprop="text">
<p>Use:<br/></p>
<pre><code>if plug not in range(1,5):
     print "The number spider has disappeared down the plughole"
</code></pre>
<p>It will print given line whenever variable plug is out of range 1 to 5</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if (int(5.5) not in range(int(3.0), int(6.9))):
    print('False')
else:
    print('True')
</code></pre>
<p>value should type casting in integer, otherwise <code>not in range</code> gives strange result. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if not plug in range(1,5):
     #bla
</code></pre>
</div>
<span class="comment-copy"><code>not in range(1, 5)</code>?</span>
<span class="comment-copy">yeah, basically</span>
<span class="comment-copy">Have you tried it?</span>
<span class="comment-copy"><a href="https://docs.python.org/3.5/reference/expressions.html#operator-precedence" rel="nofollow noreferrer"><code>not</code> is actually has lower precedence than <code>in</code></a>, so <code>plug not in range(1,5)</code> will work just fine.</span>
<span class="comment-copy">I'm voting to close this question as off-topic because while perhaps still reproducible under the right conditions, this question concerns either a technical computational error or security issue and is thus not useful to the general Stack Overflow user.</span>
<span class="comment-copy">Is it always faster for performance, or are there other dependent factors which might plausibly affect things?</span>
<span class="comment-copy">@PeterDavidCarter I can't promise anything, but as far as I can think of, it's always faster to do it this way. Maybe if you're playing with multiple variables to make sure they're all outside of the range... In general, <code>range()</code> should be used for times when you need to use all the numbers within a range. In this scenario, you only need the begin and end points.</span>
<span class="comment-copy">I'm sort of curious, but would it be possible to actually look at the compiler code for Javascript to see why it's faster for myself? I'm sure you're right, I'd just be interested to learn more is all. All the Javascript libraries I'd probably just find them on Github, but JS itself... I'd be interested to start seeing things at a lower level, I think...</span>
<span class="comment-copy">@PeterDavidCarter Javascript? You mean Python? You can use <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis.dis()</code></a> to see the disassembly of a function.</span>
<span class="comment-copy">@RayKoopa Yes, thank you.</span>
<span class="comment-copy">Weirdly, the first time I ran this code it didn't work. Then afterwards it did work. How bizarre.</span>
<span class="comment-copy">I was doing 'plug not in range()'. But this way doesn't seem to work either. Hhhmmmm...</span>
<span class="comment-copy">@PeterDavidCarter <code>is</code> is checking for identity. While Python <i>mostly</i> reads like English, it's not actually English ;)</span>
<span class="comment-copy">I tried it with and without the is...</span>
<span class="comment-copy">Why does it not work? This is very basic, it should work. Are you sure that plug is an integer?</span>
<span class="comment-copy">I don't know. I posted the error it gave. I down-voted the above answer because it was just code and it didn't work, but if the answer is edited I may take it back because it seems possibly a little unfair now...?</span>
