<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/28840903/python-regex-match-middle-of-string">Python regex match middle of string</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I want to parse string which has length &amp; precision in it eg:'(10,2)' and I need to take out length &amp; precision.</p>
<p>Need output as:</p>
<p>_len = 10, 
 _pre = 2</p>
<p>I tried below but it's not working,</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; my_str = 'numeric(10,2)'
&gt;&gt;&gt; m = re.match(r'\d+,\d+', my_str)
&gt;&gt;&gt; m
&gt;&gt;&gt; m = re.match(r'(\d+,\d+)', my_str)
&gt;&gt;&gt; m
&gt;&gt;&gt; m = re.match('\((+d),(+d)\)', my_str)
&gt;&gt;&gt; m = re.match('\((+d),(+d)\)', my_str)
Traceback (most recent call last):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>re.match</code> starts searching from the beginning of the line, that's why you are not getting any match.</p>
<p>Use <code>re.search</code> instead:</p>
<pre><code>&gt;&gt;&gt; m = re.search(r'(\d+),(\d+)', my_str)
&gt;&gt;&gt; if m:
...     _len, _pre = map(int, m.groups())
... 
&gt;&gt;&gt; _len, _pre
(10, 2)
</code></pre>
</div>
<span class="comment-copy">Read this post for more info <a href="http://stackoverflow.com/questions/180986/what-is-the-difference-between-pythons-re-search-and-re-match" title="what is the difference between pythons re search and re match">stackoverflow.com/questions/180986/â€¦</a></span>
<span class="comment-copy">And documentation <a href="https://docs.python.org/3/library/re.html#search-vs-match" rel="nofollow noreferrer">docs.python.org/3/library/re.html#search-vs-match</a></span>
<span class="comment-copy">@Kasramvd Thanks for references, I'll defiantly refer them.</span>
<span class="comment-copy">Thanks @timgeb..</span>
<span class="comment-copy">You could use capturing groups in the regex to avoid the need for the split.</span>
<span class="comment-copy">@DanielRoseman good suggestion</span>
