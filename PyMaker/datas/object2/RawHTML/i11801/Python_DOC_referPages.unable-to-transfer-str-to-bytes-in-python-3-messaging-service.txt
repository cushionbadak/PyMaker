<div class="post-text" itemprop="text">
<p>I can't figure out how to transfer <code>str</code> to <code>bytes</code> in Python 3.</p>
<p>This is the client code:</p>
<pre><code>import socket
import threading

tLock = threading.Lock()
shutdown = False

def receving(name, sock):
    while not shutdown:
        try:
            tLock.acquire()
            while True:
                data, addr = socket.recvfrom(1024).decode()
                print (data)
        except:
            pass
        finally:
            tLock.release()

host = '127.0.0.1'
port = 0

server = ('127.0.0.1',5000)

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.bind((host, port))
s.setblocking(0)

rT = threading.Thread(target=receving, args=("RecvThread",s))
rT.start()

alias = input("Name: ")
message = input(alias + "-&gt; ")
while message != 'q':
    if message != '':
        s.sendto(alias.encode() + ": " + message.encode(), server.encode())
    tLock.acquire()
    message = input(alias + "-&gt; ")
    tLock.release()
    time.sleep(0.2)

shudown = True
rT.join()
s.close()
</code></pre>
<p>This is the error I get:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Python34/client fixing.py", line 35, in &lt;module&gt;
    s.sendto(alias.encode() + ": " + message.encode(), server.encode())
TypeError: can't concat bytes to str
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>":"</code> is an <code>str</code> (string) object. You could just do <code>b':'</code>:</p>
<pre><code>s.sendto(alias.encode() + b": " + message.encode(), server.encode())
</code></pre>
<p>but you might find it simpler if you used <code>str.format().encode()</code> </p>
<pre><code>s.sendto("{}: {}".format(alias, message).encode(), server.encode())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the line</p>
<p><code>s.sendto(alias.encode() + ": " + message.encode(), server.encode())</code></p>
<p><code>": "</code>, which is a <code>string</code>, is being concatenated with two <code>bytestrings</code> (we know they're <code>bytestrings</code> because <code>.encode()</code> is called on them.  This is an error in Python3, but it can be fixed by calling <code>.encode()</code> on the string.</p>
<p>The second parameter to <code>Socket.sendto</code> should be an <em>address</em>.  The exact type of the address depends on the <a href="https://docs.python.org/3/library/socket.html#socket-families" rel="nofollow">socket's family</a>.  In this case you have correctly defined address as a tuple (<code>server = ('127.0.0.1',5000)</code>), but you are erroneously calling <code>.encode()</code> on it.</p>
<p>Try changing the line to:</p>
<p><code>s.sendto(alias.encode() + ": ".encode() + message.encode(), server)</code></p>
<p>and the error will be fixed.</p>
</div>
<span class="comment-copy">now i get the error</span>
<span class="comment-copy">AttributeError: 'tuple' object has no attribute 'encode'</span>
<span class="comment-copy">@ChristopherSeddon I've edited my answer - there was a comma after <code>message.encode()</code> that converted the combined first three elements to a tuple.</span>
<span class="comment-copy">im still getting the error</span>
<span class="comment-copy">Traceback (most recent call last):   File "C:\Python34\client fixing.py", line 36, in &lt;module&gt;     s.sendto(alias.encode() + ": ".encode() + message.encode() + server.encode()) AttributeError: 'tuple' object has no attribute 'encode'</span>
