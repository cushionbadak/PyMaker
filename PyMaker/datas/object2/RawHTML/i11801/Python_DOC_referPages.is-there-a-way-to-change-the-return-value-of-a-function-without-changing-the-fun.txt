<div class="post-text" itemprop="text">
<pre><code>def f(x):
    return (x - 2)/2 
def g(x):
    return x
</code></pre>
<p>this code will do this:</p>
<pre><code>func = g(f)
</code></pre>
<p>now func(1) = -1/2</p>
<p>what if I want to modify g(x) (and not f(x)) so that </p>
<pre><code>func = g(f) 
func(1) = 1/2
</code></pre>
<p>is there a way to do this?</p>
<p>thank you 
Edit: f(x) can be any function that possibly returns a negative number </p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for a function <em>wrapping</em> another function. This can be done in Python using <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/" rel="nofollow">decorators</a>.</p>
<p>Given your function <code>f(x)</code>, let's say you'd like to receive the <em>negative</em> function value. And <code>f(x)</code> might be any function with any number of arguments. And possibly you don't really know <code>f(x)</code> at all.</p>
<p>Python's standard library comes with <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow"><code>functools.wraps</code></a>, which can be really handy in this case:</p>
<pre><code>def g(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        func_value = func(*args, **kwargs)
        return -func_value
    return wrapper
</code></pre>
<p>Now the function <code>g(func)</code> returns a wrapper wrapping <code>func</code> post-processing its output:</p>
<pre><code>&gt;&gt;&gt; new_func = g(f)  # your original f(x)
&gt;&gt;&gt; print(new_func(1))
0.5
</code></pre>
<p>This works with <em>any</em> function <code>func</code> with any number of positional or keyword arguments.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def f(x):
...     return (x - 2)/2
...
&gt;&gt;&gt; def g(function):
...     return lambda x: abs(function(x))
...
&gt;&gt;&gt; func = g(f)
&gt;&gt;&gt; func(1)
0.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>for a generic application :</p>
<pre><code>def absfunc(f):
    def absf(*args):
        return abs(f(*args))
    return absf

@absfunc
def f(x) :return (x-2)/2
</code></pre>
<p><code>f(1)</code> is now  <code>0.5</code>.  You change the return value without changing the body neither the name.</p>
</div>
<span class="comment-copy">Make <code>g</code> return a function that returns 1/2.</span>
<span class="comment-copy">maybe the return of g could be something like: return abs(x)?</span>
<span class="comment-copy">the point is the function f(x) can be any function that returns a negative number</span>
<span class="comment-copy">should have specified this in the description, sorry</span>
<span class="comment-copy">and your intention is to return only positive values? If yes, the abs will solve that for you.</span>
