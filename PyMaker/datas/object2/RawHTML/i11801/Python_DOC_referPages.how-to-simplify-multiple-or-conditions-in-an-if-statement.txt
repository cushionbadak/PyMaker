<div class="post-text" itemprop="text">
<p>So I wanted to write this:</p>
<pre><code>if x % 2 == 0 or x % 3 == 0 or x % 5 == 0 or x % 7 == 0:
</code></pre>
<p>But this way:</p>
<pre><code>if x % (2 or 3 or 5 or 7) == 0:
</code></pre>
<p>How should I write it in a proper way?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>or</code> is a boolean operator. It calls <code>bool</code> over the left argument and see if the result is <code>True</code> and if it is it returns the left argument, otherwise it returns the right argument, so you cannot do <code>x % (1 or 2 or 3)</code> because this evaluates to just <code>x % 1</code> since <code>1 or 2 or 3 == 1</code>:</p>
<pre><code>&gt;&gt;&gt; True or False
True
&gt;&gt;&gt; False or True
True
&gt;&gt;&gt; False or False
False
&gt;&gt;&gt; 1 or False   # all numbers != 0 are "true"
1
&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; 1 or 2 or 3   #(1 or 2) or 3 == 1 or 3 == 1
1
</code></pre>
<p>Whenever you have multiple conditions you can try to reduce them using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> or <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a>.</p>
<p>We have that <code>any([a,b,c,d])</code> is equivalent to <code>a or b or c or d</code> while <code>all([a,b,c,d])</code> is equivalent to <code>a and b and c and d</code> <strong>except</strong> that they always return <code>True</code> or <code>False</code>.</p>
<p>So for example:</p>
<pre><code>if any(x%i == 0 for i in (2,3,5,7)):
</code></pre>
<p>Equivalently (since <code>0</code> if the only false number the <code>== 0</code> is equivalent to <code>not</code>):</p>
<pre><code>if any(not x%i for i in (2,3,5,7)):
</code></pre>
<p>Equivalently:</p>
<pre><code>if not all(x%i for i in (2,3,5,7))
</code></pre>
<p>Keep in mind that (de Morgan law: <code>not a or not b == not (a and b)</code>):</p>
<pre><code>any(not p for p in some_list) == not all(p for p in some_list)
</code></pre>
<p>Note that using a generator expression makes <code>any</code> and <code>all</code> short-circuit so not all conditions are evaluated. See the difference between:</p>
<pre><code>&gt;&gt;&gt; any(1/x for x in (1,0))
True
&gt;&gt;&gt; 1 or 1/0
1
</code></pre>
<p>And:</p>
<pre><code>&gt;&gt;&gt; any([1/x for x in (1,0)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt;
ZeroDivisionError: division by zero
&gt;&gt;&gt; 1/0 or 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: division by zero
</code></pre>
<p>In the last example the <code>1/0</code> is evaluated <em>before</em> calling <code>any</code>.</p>
</div>
<span class="comment-copy">​​​​​​​​​​​​​​​<code>if any(x % i for i in [2, 3, 5, 7]):</code> - Now who can help me find the dupe target?</span>
<span class="comment-copy">@KevinGuan Actually: <code>if any(not x%i for i in (2,3,5,7))</code> or <code>if not all(x%i for i in (2,3,5,7))</code>.</span>
<span class="comment-copy">@Bakuriu: ​​​​​​​​​​​​​​​Ah, correct. Or just <code>if any(x % i == 0 for i in [2, 3, 5, 7]):</code> like OP's code.</span>
<span class="comment-copy">I'm astonished by the pace how quickly you answered my question. Thank you guys!</span>
<span class="comment-copy">I've edited the title to make this question searchable. I know it was asked plently of time but trying the obvious things like "python multiple or" etc doesn't lead to any good fit.</span>
