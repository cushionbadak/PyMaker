<div class="post-text" itemprop="text">
<p>Let this code</p>
<pre><code>x = [1, 2, 3, 4, 5, 6]
y = x
y = y + []
</code></pre>
<p>Is <code>y</code> a deep or shallow copy of <code>x</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a shallow copy, but in this case there's no difference between a shallow and a deep copy, since the integers inside the list are immutable. In fact, they're all small enough that the standard Python interpreter (cpython) will cache them (every <code>1</code> is the same object), so a deep copy would have the <em>exact</em> same contents as a shallow copy (the contents will be the same by identity, not just value).</p>
</div>
<div class="post-text" itemprop="text">
<p>This line performs a shallow copy of the list <code>y</code>:</p>
<pre><code>y = y + []
</code></pre>
<p>Why do you think it would  be a deep copy?</p>
<p>But since ints are atomic and immutable, the term "copy" does not really apply. For your example it simply does not matter. If <code>y</code> contained some objects, yeah, then it's a shallow copy, because the contained elements are not copied.</p>
<p>Python's man page for the module "copy" contains all the information you need to understand the difference between a shallow and a deep copy: <a href="https://docs.python.org/3/library/copy.html" rel="nofollow">https://docs.python.org/3/library/copy.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I would not call what you are doing a copy-operation at all. You are building a new list <code>y + []</code> and assign it to the name <code>y</code>.</p>
<p>The <code>+</code> operator does not copy anything when using it on lists, so the items in <code>y</code> and the items in <code>x</code> will be the same (as in literally the same objects in memory). </p>
<p>This holds true whether or not the contents of any of the lists are mutable, mutability should not be brought into this discussion.</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3,4,5,6]
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y = y +[]
&gt;&gt;&gt; all(a is b for a,b in zip(y,x))
True    
&gt;&gt;&gt; x = [[1], [2]]
&gt;&gt;&gt; y = x
&gt;&gt;&gt; y = y + []
&gt;&gt;&gt; all(a is b for a,b in zip(y,x))
True
</code></pre>
<p>The only thing to watch out for when dealing with mutable elements is that changes to any of the mutable elements will be seen across all containers which hold a reference to them.</p>
<pre><code>&gt;&gt;&gt; y[0][0] = 3
&gt;&gt;&gt; x
[[3], [2]]
</code></pre>
</div>
<span class="comment-copy">Implicit copies are never deep copies in Python.</span>
<span class="comment-copy">It's a shallow copy.  Normally one would use <code>y = x[:]</code> or <code>y = list(x)</code> to make the copy.</span>
