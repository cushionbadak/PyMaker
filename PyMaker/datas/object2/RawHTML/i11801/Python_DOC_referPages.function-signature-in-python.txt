<div class="post-text" itemprop="text">
<p>In C++ two functions with the same name can be created as long as the signature is different.
So for example <code>myfunc(int x)</code> is different from <code>myfunc(float x)</code>.
In python you cannot do this, so, do you need to define functions with different names, or is there a better way to handle this situation?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3.4+ you can use the <code>functools.singledispatch</code> decorator, which allows you to define a generic function and then register typed implementations against it.</p>
<p>From the <a href="https://docs.python.org/3/library/functools.html" rel="nofollow">docs</a></p>
<p>Generic function:</p>
<pre><code>&gt;&gt;&gt; from functools import singledispatch
&gt;&gt;&gt; @singledispatch
... def fun(arg, verbose=False):
...     if verbose:
...         print("Let me just say,", end=" ")
...     print(arg)
</code></pre>
<p>Typed functions:</p>
<pre><code>&gt;&gt;&gt; @fun.register(int)
... def _(arg, verbose=False):
...     if verbose:
...         print("Strength in numbers, eh?", end=" ")
...     print(arg)
...

&gt;&gt;&gt; @fun.register(list)
... def _(arg, verbose=False):
...     if verbose:
...         print("Enumerate this:")
...     for i, elem in enumerate(arg):
...         print(i, elem)
</code></pre>
<p>There's no built-in solution for earlier releases of Python, but Guido van Rossum <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=101605" rel="nofollow">blogged</a> about a solution for python2 using decorators.  (Edit: there is also a backport of the 3.4 functionality for pythons 2.6 - 3.3 on <a href="https://pypi.python.org/pypi/singledispatch/3.4.0.3" rel="nofollow">pypi</a>)</p>
<p>Edit:
Of course, one of the advantages of using Python is that the the same code can often handle ints and floats without explicit dispatching on type, which is one of the reasons why the functionality has only recently been added.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't really care whether an argument is an integer or a float. It's <em>dynamically typed</em>. You can do, for example, this:</p>
<pre><code>def SquareMe(num):
    return num**2
</code></pre>
<p>And you can call this function with any number.</p>
<p>It's also possible to do this:</p>
<pre><code>def MultMe(data):
    return data*2
</code></pre>
<p>This will work with numbers, strings (!), arrays (!!) and anything that can be multiplied by a number (if some class provides a method for this).</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, you have to create only one method, but you can check what arguments can get passed, and if they are different arguments (ie: one is a float and another is an int) then you can differentiate two functions. In code this would look like:</p>
<pre><code>def myfunc(*args):
# do something

# when you call the method
myfunc(a1, a2, k1=a3, k2=a4)

# you get: 
args = (a1, a2)
kwds = {'k1':a3, 'k2':a4}

#So now lets recreate myfunc to check arguments
def myfunc(*args):

    if isinstance(args[0], str): #This is where you determine argument type
        # do what you want to do if argument is string

    elif isinstance(args[1], int):
        # do what you want to do if argument is an int
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As ForceBru said Python dosen't realy care about parameter type , so if you do , you can handle it yourself:</p>
<pre><code>def myfunc(x):
    if(isinstance(x,int)):
        print (x, 'int')  # as myfunc(int x)
    if(isinstance(x,float)):
        print (x, 'float') # as myfunc(float x)

myfunc(10) # 10 int
myfunc(10.2) # 10.2 float
myfunc ("A") # 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have the function itself do different things based on the types and number of parameters.</p>
<pre><code>def f (a):
     if type (a) == 'float' or type (a) == 'int':
             ...
     if type (a) == 'list':
             ...
     if type (a) == 'dict':
             ...
</code></pre>
</div>
<span class="comment-copy">Well, if <code>myfunc</code> does the same thing to <code>x</code> whether it's an <code>int</code> or a <code>float</code>, then you only <i>need</i> one function. And if you want it to do <i>different</i> things to <code>x</code> depending on its type, then it's generally better to have two different functions with two different names, although it <i>is</i> possible to determine the type of an arg and respond accordingly, if you really want to.</span>
<span class="comment-copy">Thank you, I am using 2.7 but I'll keep a note of this since I will be upgrading soon.</span>
<span class="comment-copy">No problem - I added an edit a while back pointing to the pypi link for a backport that works on Python2.6+</span>
<span class="comment-copy">True, but sometimes you may want to do different things. For example, if you pass in a string instead of a float.</span>
<span class="comment-copy">Here, you will actually get a boolean value if argument is of type, for example, string.</span>
<span class="comment-copy">My Python 2.7 gives <code>&lt;type 'int'&gt;</code> as a result for <code>type(6)</code>. So you probably can't compare the return value of <code>type</code> with such strings that easily.</span>
