<div class="post-text" itemprop="text">
<p>I am reading python source code:
<a href="https://hg.python.org/cpython/file/2.7/Lib/collections.py#l621" rel="nofollow">https://hg.python.org/cpython/file/2.7/Lib/collections.py#l621</a></p>
<pre><code> def __repr__(self):

        if not self:

            return '%s()' % self.__class__.__name__

        items = ', '.join(map('%r: %r'.__mod__, self.most_common()))

        return '%s({%s})' % (self.__class__.__name__, items)
</code></pre>
<p>form the doc:</p>
<pre><code>operator.mod(a, b)
operator.__mod__(a, b)Â¶
Return a % b.
</code></pre>
<p>This is right as i think,</p>
<p>But why <code>'%r: %r'.__mod__</code> is right? </p>
</div>
<div class="post-text" itemprop="text">
<h2>Why Strings Have <code>__mod__</code></h2>
<p><code>__mod__</code> implements the behaviour of the <code>%</code> operator in Python. For strings, the <code>%</code> operator is <a href="https://en.wikipedia.org/wiki/Operator_overloading" rel="nofollow">overloaded</a> to give us string formatting options. Where usually <code>a % b</code> would force the evaluation of <code>a mod b</code> if <code>a</code> and <code>b</code> are numbers, for strings, we can <em>change</em> the behaviour of <code>%</code> so that <code>a % b</code> actually <em>inserts</em> the elements of <code>b</code> into <code>a</code> if <code>a</code> is a string.</p>
<p>The way operator overloading works in Python is that each infix operator symbol - <code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>, etc. (and, as of Python 3.5, the <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-465-a-dedicated-infix-operator-for-matrix-multiplication" rel="nofollow">matrix multiplication operator</a> <code>@</code>) - corresponds to a specific method in the base definition of the class it's being called on. For <code>+</code>, it is <code>__add__()</code>, for example. For <code>%</code>, it is <code>__mod__()</code>. We can <em>overload</em> these methods by simply redefining them within a class. </p>
<p>If I have class <code>Foo</code>, and <code>Foo</code> implements a member function <code>__add__(self, other)</code>, I can potentially make <code>Foo() + bar</code> behave very differently than what the usual definition of <code>+</code> is.</p>
<p>In other words, the string formatting technique </p>
<pre><code>'%s: %s' % (5,2)
</code></pre>
<p>in Python actually calls</p>
<pre><code>'%s: %s'.__mod__((5,2))
</code></pre>
<p>under the hood, where <code>__mod__</code> is defined for objects belonging to class <code>string</code>. The way <code>__mod__()</code> is implemented for strings yields, in this case, just <code>5: 2</code>, rather than the ridiculous interpretation of <code>'%s : %s' mod (5,2)</code></p>
<hr/>
<h2>Why <code>__mod__</code> in <code>map</code> and not <code>__mod__()</code></h2>
<p>In the specific case of <code>map('%r: %r'.__mod__, self.most_common())</code>, what's happening is that the function <em>pointer</em> (for want of a better word - note that Python doesn't <em>have</em> pointers, but it doesn't hurt to think in that way for a moment) <code>__mod__</code> is being applied to each of the elements in <code>self.most_common()</code>, rather than the function <code>__mod__()</code>.</p>
<p>This is no different than doing, say, <code>map(int, "52")</code>. We don't pass the function <em>invocation</em> <code>int()</code>, we pass a reference to the function as <code>int</code> and expect the function to be invoked by <code>map</code> with the second arguments to <code>map</code>. i.e. that <code>int()</code> will be invoked over each element of "52".</p>
<p>We can't do <code>map('%r: %r'.__mod__(), self.most_common())</code> for exactly this reason. The function <code>'%r: %r'.__mod__()</code> would be invoked <em>without</em> the appropriate parameters passed in and return an error - what we want instead is a reference to the function <code>__mod__()</code> than we can deference and invoke whenever we like, which is accomplished by calling <code>__mod__</code>. </p>
<hr/>
<h2>A C++ Analogy</h2>
<p>The behaviour of <code>__mod__</code> versus <code>__mod__()</code> is really no different than how function pointers work in C++: a function pointer for <code>foo()</code> is denoted by just <code>foo</code> i.e. without the parentheses. Something <em>analogous</em> - but not quite the same - happens here. I introduce this here because it may make the distinction clearer, because on the surface pointers look very similar to what is happening and introducing pointers leads to a fairly familiar mode of thinking which is good enough for this specific purpose.</p>
<p>In C++, we can pass function pointers to other functions and introduce a form of currying - you can then invoke the function pointer on elements through regular <code>foo()</code> syntax <em>inside</em> another function, for example. In Python, we don't have pointers - we have <em>wrapper</em> objects that can reference the underlying memory location (but prevent raw access to it). For our purposes, though, the net effect is the same. @Bukuriu explores the difference in the comments.</p>
<p>Basically, <code>__mod__()</code> forces an <em>evaluation</em> with no parameters; <code>__mod__</code> returns a <em>pointer</em> to <code>__mod__()</code> than can <em>then</em> be invoked by another function on suitable parameters. Internally, that is what <code>map</code> does: take a function pointer (again, this is an analogy), and then deference and evaluate it on another element.</p>
<p>You can see this yourself: calling <code>'%s'.__mod__</code> returns</p>
<pre><code>&lt;method-wrapper '__mod__' of str object at 0x7f92ed464690&gt;
</code></pre>
<p>i.e. a <em>wrapper</em> object with a reference to the memory address to the function. Meanwhile, calling <code>'%s'.__mod__()</code> returns an error:</p>
<pre><code>TypeError: expected 1 arguments, got 0
</code></pre>
<p>because the extra parentheses invoked an <em>evaluation</em> of <code>__mod__</code> and found there were no arguments. </p>
</div>
<div class="post-text" itemprop="text">
<p>As in <a href="http://rafekettler.com/magicmethods.html" rel="nofollow">http://rafekettler.com/magicmethods.html</a> says</p>
<pre><code>__mod__(self, other)
    Implements modulo using the % operator.
</code></pre>
<p>This means when you do string formating <code>'%s' % '123'</code> you do <code>'%s'.__mod__('123')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Let's break this case down.</p>
<p>Essential parts of this complex line are:</p>
<pre><code>seq = self.most_common()
string_representations = map('%r: %r'.__mod__, seq)
items = ', '.join(string_representations)
</code></pre>
<p>First line calls <code>Counter</code>s method to retrieve top counts from dictionary. Third line joins string representations to single comma-separated string. Both are fairly trivial.</p>
<p>Second line:
- calls <code>map</code> - which tells us it calls some function for each element in <code>seq</code>
- first argument of map defines function as <code>'%r: %r'.__mod__</code></p>
<p>We know that operator overloading is done by redefining <a href="https://docs.python.org/2/reference/datamodel.html#special-method-names" rel="nofollow"><code>__magic_methods__</code></a> in class declaration. Strings happens to define <code>__mod__</code> as interpolation operation.</p>
<p>Also, we know that most of operations are just <a href="https://docs.python.org/2/reference/datamodel.html#emulating-numeric-types" rel="nofollow">syntactic sugars around those magic methods</a>.</p>
<p>What happens here is magic method being referred explicitly instead of via <code>a % b</code> syntactic sugar. Or, from different perspective, underlining implementation detail is used perform operation instead of standard form.</p>
<p>Second line is roughy equivalent to:</p>
<pre><code>string_representations = ['%r: %r' % o for o in seq]
</code></pre>
</div>
<span class="comment-copy">Because <code>__mod__</code> implements the string format property we are accustomed to e.g. <code>'%r: %r' % (5,2)</code> is implemented via <code>__mod__</code>. It's just operator overloading, I believe.</span>
<span class="comment-copy">It calls old string formatting operator <code>"%r: %r" % (o1, o2)</code> <i>for each</i> (that's what <code>map</code> does) pair yield from <code>self.most_common()</code>.</span>
<span class="comment-copy">@Rogalski i am not sure <code>%r: %r'.__mod__</code>, i never see this usage.</span>
<span class="comment-copy">@BlackMamba I've explained why its <code>__mod__</code> and not <code>__mod__()</code> in my answer.</span>
<span class="comment-copy">Python doesn't have pointers. Also note that <code>s.__mod__ is s.__mod__</code> is <i>false</i>. Everytime you reference the <code>__mod__</code> attribute a new <code>method-wrapper</code> object is created and returned.  I wouldn't mention C++ because 1) the OP didn't mention it 2) It's completely different from Python and it will only create confusion  3) You are giving false information based on C++ that simply isn't true in python, like that there exist function pointers etc. which is false.</span>
<span class="comment-copy">@Bakuriu I know Python doesn't have pointers. The way I've worded this answer, I think, makes it clear I was drawing an analogy. But you're right, I'll make that more explicit.</span>
<span class="comment-copy">@Bakuriu Edited. I disagree that bringing C++ into the mix adds confusion - the most popular flavour of Python is CPython, after all - but you're right, making the distinction between Python and C++ is very crucial here. Let me know if you have other suggestions. :)</span>
