<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>In [38]: %paste
def set_session_attribute(obj, attribute):
    if attribute.endswith('()'):
        attribute = attribute.replace('()', '')
        return getattr(obj, attribute)()
    else:
        return getattr(obj, attribute)


class Thing(object):
    def __init__(self):
        self.legs = 4
    def length(self):
        return 6

## -- End pasted text --

In [39]: x = Thing()

In [40]: y = set_session_attribute(x, 'legs')

In [41]: y
Out[41]: 4

In [42]: z = set_session_attribute(x, 'length()')

In [43]: z
Out[43]: 6
</code></pre>
<p>This is because calling with <code>"length()"</code> didn't work (<code>AttributeError, no attribute length()</code>)</p>
<p>Is there a shorter, more maintainable way to make functions like this? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Solution 1</h1>
<p>You can make <code>length</code> a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow"><code>property</code></a>:</p>
<pre><code>class Thing(object):
    def __init__(self):
        self.legs = 4
    @property
    def length(self):
        return 6

&gt;&gt;&gt; thing = Thing()
&gt;&gt;&gt; thing.legs
4
&gt;&gt;&gt; thing.length
6
</code></pre>
<p>If you really want to use your function:</p>
<pre><code>def set_session_attribute(obj, attribute):
    return getattr(obj, attribute)

&gt;&gt;&gt; set_session_attribute(thing, 'legs')
4
&gt;&gt;&gt; set_session_attribute(thing, 'length')
6
</code></pre>
<p>If you cannot change the source of <code>thing</code> directly, you can do after importing the class:</p>
<pre><code>class Thing(object):
    def __init__(self):
        self.legs = 4
    def length(self):
        return 6
</code></pre>
<p>Here:</p>
<pre><code>Thing.length2 = property(Thing.length)

&gt;&gt;&gt; thing = Thing()
&gt;&gt;&gt; thing.length2
6
</code></pre>
<h1>Solution 2</h1>
<p>Alternatively, you can check if the attribute is callable:</p>
<pre><code>class Thing(object):
    def __init__(self):
        self.legs = 4
    def length(self):
        return 6

def set_session_attribute(obj, attribute):
    attr = getattr(obj, attribute)
    if hasattr(attr, '__call__'):  # may use `callable()`
        return attr()
    return attr

&gt;&gt; thing = Thing()
&gt;&gt;&gt; set_session_attribute(thing, 'legs')
4
&gt;&gt;&gt; set_session_attribute(thing, 'length')
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Decorate those methods with <code>@property</code>, which you feel should have semantics of data rather than a method.</p>
<pre><code>class Thing:
    @property
    def length(self):
        return somedata

    @property.setter
    def length(self, value):
        somename = value

t = Thing()
l0 = t.length
t.length = l1
</code></pre>
<p>So this is a getter. There is also a setter <code>@property.setter</code>, where you can do <code>t.length = somedata</code> instead of something like <code>t.set_length(somedata)</code></p>
</div>
<span class="comment-copy">I can't change the function I'm trying to call</span>
<span class="comment-copy">Do you mean the function <code>set_session_attribute</code> or a method in the class <code>Thing</code> or another function?</span>
<span class="comment-copy">I can't change anything in the classes I'm accessing, like Thing(), a huge system depends on those</span>
<span class="comment-copy">Added a second solution that does not need to change <code>Thing</code>.</span>
<span class="comment-copy">that if/return is better than what I ended with yesterday. ty</span>
