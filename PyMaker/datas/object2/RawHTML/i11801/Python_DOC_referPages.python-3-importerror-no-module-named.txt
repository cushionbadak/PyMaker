<div class="post-text" itemprop="text">
<p><strong>Situation:</strong><br/>
Given this project structure:</p>
<pre><code>project/
  app/
    __init__.py (empty)
    stamp.py
  tests/
    test.py
  main.py
</code></pre>
<p>In <code>main.py</code> and <code>test.py</code> I am trying to import the functionality of <code>stamp.py</code> via:</p>
<pre><code>from app.stamp import Timestamp 
</code></pre>
<p><code>Timestamp</code> gets imported in <code>main.py</code> but not in <code>test.py</code> where I get this error: </p>
<pre><code>ImportError: No module named 'app'
</code></pre>
<p><strong>Question</strong>:<br/>
How can I in python 3.5 import functionality of <code>stamp.py</code> in <code>test.py</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>make sure your folder tests contains __init__.py </p>
<p>Below code appends the path of your project <code>project</code> to <code>sys.path</code> in <code>test.py</code></p>
<p>python will go through to search the modules and files in your <code>project</code></p>
<pre><code>import sys
sys.path.append("/path/to/project")
from app.stamp import Timestamp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make sure <code>project/</code> is in your <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow">PYTHONPATH</a>, put and <code>__init__.py</code> file in the <code>project/</code> directory and then you will be able to call <code>from project.app.stamp import Timestamp</code>.</p>
</div>
<span class="comment-copy">how are you invoking test.py?</span>
<span class="comment-copy">via Terminal: python tests/test.py  it is nothing fancy in test.py just trying to figure how to do the imports</span>
<span class="comment-copy">How are you calling stamp.py inside test.py?</span>
<span class="comment-copy">from app.stamp import Timestamp  \n     t = Timestamp()</span>
<span class="comment-copy">does folder tests have file _<i>init_</i>.py ?</span>
<span class="comment-copy">Thx all. As recommended I imported <code>sys</code> as well <code>os</code> and added the following code to test.py <code>sys.path.append(os.path.abspath('.'))</code>. It works also without all <code>__init__.py</code> files</span>
<span class="comment-copy">@DavidR  glad to know it helps:)  _<i>init_</i>.py makes a regular directory treated as a package</span>
<span class="comment-copy">Do <code>__init__.py</code> files provide any benefits in python 3 where they are not required any more</span>
<span class="comment-copy">@DavidR  you are right, Python3 doesnt require it anymore. i am still working on Python2.7 so always make the init file</span>
