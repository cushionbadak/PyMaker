<div class="post-text" itemprop="text">
<p>Can lambda expression has multiple lines in Python? Like common functions.</p>
<p>Can I do something like that?</p>
<pre><code>res = lambda x y:
    z = x**2 + 5
    z + x + y
</code></pre>
<p>(I know that this function can be written on one line, It's an example)</p>
</div>
<div class="post-text" itemprop="text">
<p>They can be split across multiple <em>lines</em> by the same rule that any expression can be split across multiple lines. You can use backslash <code>\</code> to prevent a linebreak ending the current statement, or use the fact that linebreaks are permitted within the various forms of brackets: <code>()</code>, <code>[]</code>, <code>{}</code>.</p>
<p>However, a lambda expression is just that, an expression. It cannot contain assignment statements (or any other statements).</p>
<p>The precise details are defined by <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">the Python grammar</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>IMHO , you can't.    </p>
<p>If you need some temporary variable in a lambda function, as a ugly workaround you can do :</p>
<pre><code>res = lambda x,y : [ z**2 + z**4 + z  for z in [x**2+5]][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For an interesting example of how far you can take lambda expressions check <a href="https://stackoverflow.com/questions/6282042/assignment-inside-lambda-expression-in-python">this</a> out.</p>
<p>Although you should absolutely use a function for this.</p>
</div>
<span class="comment-copy">No, they can't; just use a regular <code>def</code>.</span>
<span class="comment-copy">The main purpose of <code>lambda</code> function is that it can be define in-line. If you want to use a multi line function you can simply use regular functions with <code>def</code>.</span>
<span class="comment-copy">The key word here is lambda <i>expression</i>; it cannot contain any statement, let alone more than one.</span>
<span class="comment-copy">This outputs to standard output and returns <code>[None]</code>.</span>
