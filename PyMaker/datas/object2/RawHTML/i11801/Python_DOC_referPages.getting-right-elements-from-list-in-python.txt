<div class="post-text" itemprop="text">
<p>I have a list, call it <code>test</code>, with 3 columns, each column has 891 elements, each element is a pair of floats.
I want to create a numpy matrix with 3 columns, each of which has 891 elements, each element is the first entry from the pair of floats.</p>
<p>I have the following code:</p>
<pre><code>x = []
y = []
for i in range(len(test)):
    for j in range(len(test[0])):
        y.append(test[i][j][0])
    x.append(y)
    y = []

tt = numpy.matrix(x) 
</code></pre>
<p>This works, but can I write it in a more efficient and elegant way?</p>
<p>EDIT:
Example:</p>
<pre><code>[0.5, 0.5],[0.3, 0.4],[0.1, 0.4]
[0.7, 0.6],[0.1, 0.4],[0.2, 0.3]
[0.2, 0.5],[0.6, 0.9],[0.3, 0.2]
[0.2, 0.5],[0.6, 0.9],[0.4, 0.1]
</code></pre>
<p>I want:</p>
<pre><code>[0.5, 0.3, 0.1]
[0.7, 0.1, 0.2]
[0.2, 0.6, 0.3]
[0.2, 0.6, 0.4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two features of Python to learn: iterables, and generator expressions.</p>
<p>You have given no example data, so we can't verify we see the same behaviour as you. It's always best to <strong>put in your question a <a href="https://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a></strong> for us to execute.</p>
<p>Even better if the <strong>names are more descriptive of the intent</strong>, than just <code>x</code> or <code>test</code>.</p>
<pre class="lang-python prettyprint-override"><code>test = [
    [2, 4, 6],
    [3, 6, 9],
    [4, 8, 2],
    ]
</code></pre>
<ul>
<li>Instead of fiddling with sequence index, <strong>prefer <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow">iterating over the iterables</a></strong>, to get the items directly:</li>
</ul>
<pre class="lang-python prettyprint-override"><code>import numpy

rows = []
cells = []
for test_row in test:
    for column in test_row:
        cells.append(column)
    rows.append(cells)
    cells = []

tt = numpy.matrix(rows)
</code></pre>
<ul>
<li>Instead of appending items one at a time, <strong>prefer a <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow">list comprehension</a></strong>, if it helps readability:</li>
</ul>
<pre class="lang-python prettyprint-override"><code>import numpy

rows = [
    [column for column in row]
    for row in test]

tt = numpy.matrix(rows)
</code></pre>
<p>Sometimes (not in this case) you don't even need the list to all exist at once; you just need to iterate over the items, then discard that sequence. Then a generator expression is better; look that one up when you have time.</p>
<p>Be careful to see these as options for improving readability. They are not always appropriate, and sometimes they can make your code too dense and hard to read.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = np.asarray(test)[:, :, 0]
</code></pre>
<p>Simple as that. One might argue it is not as memory efficient as could be, since you are also storing the elements that you are not interested in, at least temporarily; but that pales in comparison anyway, to the memory use of your nested python datastructures.</p>
</div>
<span class="comment-copy">@Dex'ter Thanks. Is codereview ok even for small snippets of code like this? I looked at it and they all seem more elaborate than this. In that case, should I just delete this question and repost it there?</span>
<span class="comment-copy">You can post there this code, some test cases and an example file. I'm sure you'll find some good points out there.</span>
<span class="comment-copy">Not sure if this is what you want, but you could try : <code>np.matrix(np.array(test)[...,0].squeeze().T)</code>.</span>
<span class="comment-copy">@Divakar Thanks, that is exactly what I was looking for.</span>
<span class="comment-copy">@user No, this would get closed as example code on Code Review unless you provide us with context. The people recommending Code Review should learn to read the scope about that site BEFORE recommending. I'm sorry new users like you get caught in the crossfire.</span>
<span class="comment-copy">Thanks for the tutorial. I added the example as you suggested.</span>
