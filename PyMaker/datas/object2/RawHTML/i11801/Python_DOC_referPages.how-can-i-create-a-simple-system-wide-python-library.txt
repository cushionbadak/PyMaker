<div class="post-text" itemprop="text">
<p>I see there are some built in packages that I can import from any script like:</p>
<pre><code>from datetime import date

today = date.today()
print today
</code></pre>
<p>How can I create a simple package and add it to the system library so that I can import it like <code>datetime</code> in the above example?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to make a module.</p>
<p>Start by installing the <code>setuptools</code> package; on either Windows or Linux you should be able to type <code>pip install setuptools</code> at a terminal to get that installed. You should now be able to write <code>import setuptools</code> at a python prompt without getting an error.</p>
<p>Once that's working, set up a directory structure containing a <code>setup.py</code> and a folder for your project's code to go in. The directory must contain a file called <code>__init__.py</code>, which allows you to <code>import</code> the directory as though it's a file.</p>
<pre><code>some_folder/
|    setup.py
|    my_project/__init__.py
</code></pre>
<p>In <code>setup.py</code>, drop the following content:</p>
<pre><code># setup.py
from setuptools import setup

setup(name="My Awesome Project",
      version="0.0",
      packages=["my_project"])
</code></pre>
<p>In <code>my_project/__init__.py</code>, drop some stuff that you'd like to be able to import. Let's say...</p>
<pre><code># my_project/__init__.py
greeting = "Hello world!"
</code></pre>
<p>Now, in order to install the project at a system-wide level, run <code>python setup.py install</code>. Note that you'll need to run this as root if you're on Linux, since you're making changes to the system-wide python libraries.</p>
<p>After this, you should be able to run python from any directory you like and type:</p>
<pre><code>&gt;&gt;&gt; from my_project import greeting
&gt;&gt;&gt; print greeting
Hello world!
&gt;&gt;&gt;
</code></pre>
<p>Note that this is enough to tell you how to make a module, but there's one hell of a lot of stuff that <code>setuptools</code> can do for you. Take a look at <a href="https://pythonhosted.org/setuptools/setuptools.html" rel="noreferrer">https://pythonhosted.org/setuptools/setuptools.html</a> for more info on building stuff, and <a href="https://docs.python.org/2/tutorial/modules.html" rel="noreferrer">https://docs.python.org/2/tutorial/modules.html</a> for more info on how modules actually work. If you'd like to look at a package that (I hope) is reasonably simple, then I made my <a href="https://github.com/Ymbirtt/python-lazylog" rel="noreferrer">LazyLog module</a> a couple of weeks ago on a train, and you're welcome to use it for reference.</p>
</div>
<div class="post-text" itemprop="text">
<p>The quick way, if you're just making something for your own use and not worrying about packaging, is to put the module (which could be as simple as a single file) in your system's <code>site-packages</code> directory. (On Debian-based systems, <a href="https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages">you probably want to use <code>dist-packages</code> instead</a>).</p>
<p>To find out where your <code>site-packages</code>/<code>dist-packages</code> directory is, start Python and:</p>
<pre><code>&gt;&gt;&gt; from sys import path
&gt;&gt;&gt; path
['', '/usr/lib/python3.4/site-packages/pip-7.1.2-py3.4.egg', '/usr/lib/python34.zip', '/usr/lib/python3.4', '/usr/lib/python3.4/plat-cygwin', '/usr/lib/python3.4/lib-dynload', '/usr/lib/python3.4/site-packages']
</code></pre>
<p>Note the last item in that example: <code>/usr/lib/python3.4/site-packages</code>. That's the sort of thing you're looking for. So in this example, if I save the following to <code>/usr/lib/python3.4/site-packages/foo.py</code>:</p>
<pre><code>def bar():
    print('Hello world!')
</code></pre>
<p>Then from anywhere on my system:</p>
<pre><code>&gt;&gt;&gt; from foo import bar
&gt;&gt;&gt; bar()
Hello world!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really need a <strong>package</strong>, you can do it with <a href="http://www.boost.org/doc/libs/1_60_0/libs/python/doc/html/index.html" rel="nofollow">boost</a>, which allows interacts with C++. You may implement algorithms using C++ and compile it as a Python lib. However it's poorly documented. And as <a href="https://docs.python.org/2/extending/extending.html" rel="nofollow">doc</a> described, C API should be a basic option. Boost is built on C API any way.</p>
<p><a href="https://github.com/KHN190/tfidf" rel="nofollow">Sample</a>: I made it several years ago on a class. You can do: <code>import tfidf</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you simply want the module for personal use, just drop it in a folder and add that folder to the <code>PYTHONPATH</code> environment variable.</p>
<p>For example, create a folder in your home directory called <code>~/python-packages</code>, then add the following line to your <code>.bashrc</code> (assuming you are using bash):</p>
<pre><code> export PYTHONPATH=$HOME/python-packages`
</code></pre>
<p>Then, simply drop any modules/packages you want to make available in <code>~/python-packages</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Add you python script or package's path to sys.path or just move them to one of the location in sys.path.
BUT i do not suggest to do this...</p>
</div>
<span class="comment-copy">Have you read the documentation on <a href="https://docs.python.org/3/tutorial/modules.html#modules" rel="nofollow noreferrer">modules</a>?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/modules.html</a></span>
<span class="comment-copy">The <a href="https://docs.python.org/2/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer"><code>PYTHONPATH</code></a> environment variable determines what imports are available. So packages can be anywhere; you just need to specify where they are by setting that in the environment when you run <code>python</code>.</span>
