<div class="post-text" itemprop="text">
<p>I have a simple question: I want to just grab the content of a line from a file x. My file x looks like this:</p>
<pre><code>PointXY
[387.93852, 200.0]
PointXY
[200.0, 387.93852]
PointXY
[200.0, 387.93852]
PointXY
[200.0, 353.20889]
PointXY
[387.93852, 200.0]
PointXY
[200.0, 387.93852]
PointXY
[200.0, 300.0]
</code></pre>
<p>My script in Python looks like this:</p>
<pre><code>h = open("x.gcode", "r")
searchlines = h.readlines()
file = ""

for i, line in enumerate(searchlines):
    if "PointXY" in line:
        P = searchlines[i+1]
        print(P)
</code></pre>
<p>I want P to just be [200.0, 100.0] (for instance). It now gives me '[200.0, 100.0]\n'. How can I adjust this in the line "P = searchlines[i+1]"? </p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking to <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow">strip</a> the new line character from each line, which you can easily do using the available <code>strip</code> method of <code>str</code>:</p>
<p>When you get your data in <code>searchlines</code>, do:</p>
<pre><code>searchlines[i+1].strip()
</code></pre>
<p>To see that it is actually removed, check the <code>repr</code>:</p>
<pre><code> print(repr(P))
</code></pre>
<p>You can even do that <code>repr</code> print before and after applying the <code>strip()</code> to see what happened when calling that strip. </p>
<p>Considering the structure of the text you have, you are looking to make it a list, so, you <em>could</em> use <code>loads</code> from <code>json</code> to do this: </p>
<pre><code>json.loads(searchlines[i+1].strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>str.strip()</code> to remove the <code>\n</code></p>
<pre><code>for i, line in enumerate(searchlines):
    if "PointXY" in line:
        P = searchlines[i+1].strip()
        print(P)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want delete '\n' use this</p>
<p>after read data</p>
<pre><code>data = f.readlines()

data = map(str.strip, data)
</code></pre>
<p>but isn't necessary for the other you could use this:</p>
<pre><code>import ast
listdata = []
with open('lel.txt') as f:
    data = f.readlines()
    for x in data:
        try:
            if isinstance(ast.literal_eval(x), list):
                listdata.append(eval(x))
        except:
            pass
</code></pre>
<p>then for get data of list:</p>
<pre><code>print listdata
&gt;&gt;&gt;[[387.93852, 200.0], [200.0, 387.93852], [200.0, 387.93852], [200.0, 353.20889], [387.93852, 200.0], [200.0, 387.93852], [200.0, 300.0]]
print listdata[0]
&gt;&gt;&gt;[387.93852, 200.0]
print listdata [0][0]
&gt;&gt;&gt;387.93852
</code></pre>
</div>
<span class="comment-copy">So you are looking to have it without the '\n'?</span>
<span class="comment-copy">Thanks, that god rid of the \n, how do I get rid of the ' '? I want P to be [200.0, 100.0], now it stills returns '[200.0, 100.0]'.</span>
<span class="comment-copy">@Henry My answer has been updated to include that already. Check the last line.</span>
<span class="comment-copy">Awesome that works!</span>
<span class="comment-copy">Thanks, that god rid of the \n, how do I get rid of the ' '? I want P to be [200.0, 100.0], now it stills returns '[200.0, 100.0]'.</span>
<span class="comment-copy">@Henry You use json.loads. Check my answer.</span>
<span class="comment-copy">@Henry You can use <code>json.loads</code> in @idjaw 's answer or us <code>re</code> to match the number you want .</span>
<span class="comment-copy">Using <code>eval</code> should not be used as a suggested answer, and should not be used in general.</span>
<span class="comment-copy">I'm beginner in python, I would like the reason....  why?</span>
<span class="comment-copy">Sure. Best to read <a href="http://stackoverflow.com/a/1832957/1832539">this</a> . Look up "why is eval bad practice in python". Actually in many languages you will find reasons not to use eval.</span>
<span class="comment-copy">@idjaw Thanks you :3, I've Changed by a small alternative which is ast.literal_eval(). Greetings!</span>
<span class="comment-copy">You're very welcome. <code>literal_eval</code> is an appropriate approach. Good stuff.</span>
