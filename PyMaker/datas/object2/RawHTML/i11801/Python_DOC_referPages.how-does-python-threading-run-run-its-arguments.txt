<div class="post-text" itemprop="text">
<p>I have a python threading problem. I have been looking around for more than a day and it doesn't get any better, so I thought of asking for help. I use <code>python3.4</code>.
The first question is what would be the difference between:</p>
<pre><code>class myThread (threading.Thread):
    def __init__(self, url):
        threading.Thread.__init__(self)
        self.url = url
    def run(self):
        spider (url)
</code></pre>
<p>and I'm using <code>toBeProcessed +'/robots.txt'</code> at some part in the code. If I used the above method, it doesn't give me errors -but it still doesn't work like it should, not all the threads does run. While if I used the below method it tells me it <code>unsupported operand type(s) for +: '_thread._local' and 'str'</code>:</p>
<pre><code>def run(self):
    spider (self.url)
</code></pre>
<p>Note that I do have this declaration <code>toBeProcessed = threading.local()</code>.</p>
<p>The second question is about the rest of the code, only two threads do the work, the rest of the thread -whatever was their number doesn't work.</p>
<p>Full code:</p>
<pre><code>def spider(url,superMaxPages):
    print(threading.current_thread())
    toBeProcessed = threading.local()
    data = threading.local()
    parser = threading.local()
    links = threading.local()
    lock = threading.Lock()
    writeLock = threading.Lock()

    # Start from the beginning of our collection of pages to visit:
    while 1:
        if LinkParser.numVisited &gt; maxPages:
            print ('max pages reached')
            break

        lock.acquire()
        try:
            if not url:
                time.sleep(0.01)
                lock.release()
                continue
            print('to be processed ')
            toBeProcessed = url.pop()
        except:
            print('threading error')
        lock.release()
        # In case we are not allowed to read the page.
        rp = robotparser.RobotFileParser()
        rp.set_url(toBeProcessed +'/robots.txt')
        rp.read()
        if not(rp.can_fetch("*", toBeProcessed)):
            continue

        LinkParser.visited.append(toBeProcessed)

        LinkParser.numVisited += 1

        writeLock.acquire()
        try:
            f.write(toBeProcessed+'\n')
        finally:
            writeLock.release()

        try:
            parser = LinkParser()
            data, links = parser.getLinks(toBeProcessed)        
            # Add the pages that we visited to the end of our collection
            url = url + links
            print("One more page added from &amp;i",threading.get_ident())
        except:
            print(" **Failed!**")

class myThread (threading.Thread):
    def __init__(self, url, maxPages):
        threading.Thread.__init__(self)
        self.maxPages = maxPages
        self.url = url
    def run(self):
        spider (self.url, maxPages)
</code></pre>
<p>not url is initialized like this <code>url = []</code> 
and this is how i run my threads, 
    <code>myThread( spider, (url,maxPages) ).start</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You are doing it wrong. You need can't concatenate an instance of <a href="https://docs.python.org/3.5/library/threading.html#threading.local" rel="nofollow"><code>local</code></a> with string. You need to store an attribute on your <code>local</code> instance like this:</p>
<pre><code>import threading

toBeProcessed = threading.local()
toBeProcessed.url = url.pop()     
toBeProcessed.url += '/robots.txt'
</code></pre>
<p>Also you should consider to use <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow"><code>super()</code></a> in your <code>__init__</code> method.</p>
</div>
<span class="comment-copy">it gives me an error <code>toBeProcessed.url = url.pop() AttributeError: 'function' object has no attribute 'pop'</code></span>
<span class="comment-copy">and what would it be different than if i use <code>run(self.url)</code> than <code>run(url)</code>?</span>
<span class="comment-copy">in <code>self.url</code>, <code>url</code> is an instance variable. while in <code>run(url)</code>, url is just and argument to <code>run</code> that being said. What is the type of <code>url</code>?</span>
<span class="comment-copy">its a list <code>url[]</code></span>
<span class="comment-copy">No it's not.  Perhaps you assign it a function somewhere in your code.</span>
