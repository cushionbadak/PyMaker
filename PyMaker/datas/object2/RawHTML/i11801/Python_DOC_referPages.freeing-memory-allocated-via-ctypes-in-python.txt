<div class="post-text" itemprop="text">
<p>I have a <em>ctypes</em>-based library that wraps a C-library that sometimes allocates memory that needs to be freed. Under Linux this is easy because common <em>glibc</em> functionality is been linked into that C library and I can simply call <code>free()</code> on it. However, it looks like the same functionality isn't available when I access that third-party-compiled library under Windows.</p>
<p><code>ctypes.util.find_msvcrt()</code> seemed promising, but it returns <em>None</em> even though I'm running under Windows. I'm not sure if this means that the source DLL was built with something other than the Microsoft toolchain.</p>
<p>So, I'm left with memory to free and no apparent, simple way to do it. Does anyone have any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>When using the MSVCRT you need to ensure that you are using the <em>same</em> <code>free</code>/ <code>malloc</code> pairs from the same CRT (it's possible to have your program running with multiple CRTs). The library you are dealing with seems broken - the library should have a <code>free</code> wrapper which invokes the correct version of <code>free</code>.</p>
<p>In other words, even if you did manage to find some kind of MSVCRT <code>free</code>, there's no guarantee that it's the one you want.</p>
<p>See also <a href="http://siomsystems.com/mixing-visual-studio-versions/" rel="nofollow">http://siomsystems.com/mixing-visual-studio-versions/</a></p>
</div>
<span class="comment-copy">Contact the third party, and tell them to fix their broken API.</span>
<span class="comment-copy">See also: <a href="http://siomsystems.com/mixing-visual-studio-versions/" rel="nofollow noreferrer">siomsystems.com/mixing-visual-studio-versions</a></span>
<span class="comment-copy">Put that link right in your answer.</span>
<span class="comment-copy">The library can also allow the user to define the allocator that it uses. For example, look at how the <a href="https://docs.python.org/3/c-api/memory.html#customize-memory-allocators" rel="nofollow noreferrer">custom memory allocators</a> are implemented in CPython. Then via ctypes you can have the library use CPython's <a href="https://docs.python.org/3/c-api/memory.html#raw-memory-interface" rel="nofollow noreferrer">raw memory interface</a>.</span>
<span class="comment-copy">That said, I prefer an API with a two-pass model that returns the allocation size for the user to allocate required memory blocks. If this isn't possible it probably means the library needs to export a <code>free</code> function -- e.g. to free a buffer that's specially allocated by some device interface.</span>
