<div class="post-text" itemprop="text">
<p>I would like to write a Python script to automate the process of adding the dependencies of a npm package to my Open Build Service project. I have a shell function:</p>
<pre><code>function cpobsn {
    cdobsa
    mkdir nodejs-$1
    cd nodejs-$1
    npm2PKGBUILD $1 &gt; PKGBUILD
    cpserv
    obsa
}
</code></pre>
<p>this is the Python script I have at the moment (the <code>package.json</code> file being imported is the <code>package.json</code> of the npm package):</p>
<pre><code>import json
import os

with open("/home/fusion809/OBS/home:fusion809:arch_extra/arch-wiki-man/package/package.json") as json_file:
    json_data = json.load(json_file)
    deps = json_data["dependencies"]
    for key, value in deps.items():
        print(key)
        os.system("cpobsn")
</code></pre>
<p>I would like to pass the <code>key</code> variable to the <code>cpobsn</code> shell function (i.e., I would like this Python loop to run the shell command <code>cpobsn key</code> on every iteration). How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Functions are good for interactive use, but this seems like a case where you want a stand-alone script instead.</p>
<p>If you want to have a function you can load into your <code>.zshrc</code> or similar, you could do something like the Python <code>__name__ == '__main__'</code> idiom in the script file, too.  But renaming the file to the name of the command and getting rid of the function would seem like the simplest way to achieve your end goal here.</p>
<p>Save this as, say, <code>$HOME/bin/cpobsn</code> and <code>chmod +x</code> it.  Make sure <code>$HOME/bin</code> is in your <code>PATH</code>, too.</p>
<pre><code>#!/bin/sh
cdobsa
mkdir nodejs-"$1"
cd nodejs-"$1"
npm2PKGBUILD "$1" &gt; PKGBUILD
cpserv
obsa
</code></pre>
<p>(Note the addition of proper quotes for good measure.)</p>
<p>Now, you can call it from Python, as with any regular external command.</p>
<pre><code>from subprocess import check_call
check_call(['cpobsn', key])
</code></pre>
<p>The choice between <code>subprocess.call()</code> and <code>subprocess.check_call()</code> will depend on whether the script returns a useful exit code.  It doesn't at the moment, so actually <code>call</code> would be sufficient; on the other hand, you should fix that, and use <code>check_call</code> to have Python tell you when some part of the shell script failed.</p>
<p>Minimally, adding <code>set -e</code> to the shell script will make it check for errors, and abort if anything fails; but this often requires refactoring to avoid terminating on non-fatal errors (like <code>grep</code> not returning a result -- this is technically an error, but often an acceptable part of normal flow).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Python string concatenation with <code>os.system</code> is a great security risk, a key <code>"foo; rm -rf /"</code> for example would delete all your files.</p>
<p>Python's <code>subprocess</code> module is much more suited for this use:</p>
<pre><code>from subprocess import call
call(['cpobsn', key])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just input key into <code>os.system</code> as well.</p>
<pre><code>import json
import os

with open("/home/fusion809/OBS/home:fusion809:arch_extra/arch-wiki-man/package/package.json") as json_file:
    json_data = json.load(json_file)
    deps = json_data["dependencies"]
    for key, value in deps.items():
        print(key)
        os.system("cpobsn" + " " + key)
</code></pre>
</div>
<span class="comment-copy">Take a look at the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module</span>
<span class="comment-copy">It'd be great if it weren't for the fact it returns permissions errors, namely this error: <a href="http://paste2.org/vDmHmHN4" rel="nofollow noreferrer">paste2.org/vDmHmHN4</a>.</span>
<span class="comment-copy">You need to give your script the appropriate permissions first by using <code>chmod</code>.</span>
<span class="comment-copy">'cpobsn' is a shell function, not a file. So I think this won't work.</span>
<span class="comment-copy">I ran <code>sudo chmod +x npm2.py</code> before running <code>python npm2.py</code> and it returned the same error. I then tried running <code>sudo chmod 777 -R npm2.py</code> before running <code>python npm2.py</code> again and still got the same permissions error. npm2.py is the original script I gave, with your modification. So I doubt it's as simple as the file's permission.</span>
<span class="comment-copy">where is your shell function defined?</span>
<span class="comment-copy">Returns <code>os.system("cpobsn",key)</code> returns <code>TypeError: system() takes at most 1 argument (2 given)</code>.</span>
<span class="comment-copy">My apologies, this should have fixed it.</span>
<span class="comment-copy">Is there anything else you need?</span>
<span class="comment-copy">Now it's returning an error that <code>cpobsn</code> is unknown. How do I get <code>os.system</code> to run a shell script (with my <code>cposbn</code> function defined in it) before running the <code>cpobsn key</code> command?</span>
