<div class="post-text" itemprop="text">
<p>I have a dictionary of lists like </p>
<pre><code>dict = {'p1':[a,b,c,d,f]}
</code></pre>
<p>where</p>
<ul>
<li><code>a</code> and <code>b</code> are <code>mx.DateTime.DateTime</code> objects i.e. time;</li>
<li><code>c</code> and <code>f</code> are <code>mx.DateTime.DateTimeDelta</code> objects i.e. result of operations between <code>a</code> and <code>b</code>;</li>
<li><code>d</code> is a boolean value.</li>
</ul>
<p>I want to write some value from the dictionary in a file in a sorted by time order:</p>
<pre><code>for key in dict:
        f.write(key+'  ')
        f.write(str(dict[key][4]))
        f.write('\n')
</code></pre>
<p>But I can't figure out how would I sort this by <code>dict[key][4]</code>. How can I make it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure to understand your question but here is one way you can create a list of sorted keys:</p>
<pre><code>dic = {'p1':[0,0,0,0,7], 'p2': [0,0,0,0,5], 'p3': [0,0,0,0,8]}
sorted_keys = sorted(dic, key=lambda k: dic[k][4])
print sorted_keys
# ['p2', 'p1', 'p3']
</code></pre>
<p>PS: please do not use <code>dict</code> as a variable name since it is a built-in type in Python</p>
</div>
<div class="post-text" itemprop="text">
<p><code>dict</code> by nature are data structure which does not keep order of their items (key:value) pair, so, if you want to write a sorted value from your dictionary, here is one way:</p>
<pre><code>&gt;&gt;&gt; dt = {'p1':[1,2,3,4], 'p2':[2,1,4,3], 'p3':[4,3,2,1]}
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(dt.items(), key=lambda x:x[1][1])
[('p2', [2, 1, 4, 3]), ('p1', [1, 2, 3, 4]), ('p3', [4, 3, 2, 1])]
&gt;&gt;&gt; 
&gt;&gt;&gt; sorted(dt.items(), key=lambda x:x[1][2])
[('p3', [4, 3, 2, 1]), ('p1', [1, 2, 3, 4]), ('p2', [2, 1, 4, 3])]
&gt;&gt;&gt;
&gt;&gt;&gt; sorted(dt.items(), key=lambda x:x[1][3])
[('p3', [4, 3, 2, 1]), ('p2', [2, 1, 4, 3]), ('p1', [1, 2, 3, 4])]
&gt;&gt;&gt; 
</code></pre>
<p>Then you can loop through it to write to your file:</p>
<pre><code>&gt;&gt;&gt; mylist = sorted(dt.items(), key=lambda x:x[1][3])
[('p3', [4, 3, 2, 1]), ('p2', [2, 1, 4, 3]), ('p1', [1, 2, 3, 4])]
&gt;&gt;&gt; for item in my_list:
        f.write('{} - {}'.format(*item))

#Output will something like:
#p3 - [4, 3, 2, 1]
#p2 - [2, 1, 4, 3]
#p1 - [1, 2, 3, 4]
</code></pre>
<p>On the other hand, if the order of items matters to you within your dictionary, then I suggest to you to use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a> from <code>collections</code> module:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; dt_orderd = OrderedDict()
&gt;&gt;&gt; 
&gt;&gt;&gt; for k,v in sorted(dt.items(), key=lambda x:x[1][3]):
        dt_ordered[k] = v


&gt;&gt;&gt; dt_orderd
OrderedDict([('p3', [4, 3, 2, 1]), ('p2', [2, 1, 4, 3]), ('p1', [1, 2, 3, 4])])
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; dt_orderd['p1']
[1, 2, 3, 4]
</code></pre>
<p>This will create a dictionary as yours but at the same time it will maintain the order at which its items where inserted in the first place (during the <code>for</code> loop in this case)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert your dict into a list using <code>dict.items()</code>, as dict cannot be sorted.</p>
<p>This returns a list of tuples <code>[('p1':[a,b,c,d,f])]</code></p>
<p>On that list, you can access <code>element[1][4]</code> to retrieve the <code>f</code></p>
<p>You can apply that to a sort:</p>
<pre><code>for key, value in sorted(dict.items(), key=lambda element : element[1][4]):
    f.write('{0}    {1}\n'.format(key, value[4]))
</code></pre>
</div>
<span class="comment-copy">maybe look into ordered dictionaries <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
