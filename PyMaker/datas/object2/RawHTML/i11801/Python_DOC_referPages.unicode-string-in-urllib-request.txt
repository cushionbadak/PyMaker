<div class="post-text" itemprop="text">
<p>The short version: I have a variable <code>s = 'bär'</code>. I need to convert <code>s</code> to ASCII so that <code>s = 'b%C3%A4r'</code>.</p>
<p>Long version:</p>
<p>I'm using <code>urllib.request.urlopen()</code> to read an mp3 pronunciation file from URL. This has worked very well, except I ran into a problem because the URLs often contain unicode characters. For example, the German "Bär". The full URL is <code>https://d7mj4aqfscim2.cloudfront.net/tts/de/token/bär</code>. Indeed, typing this into Chrome as a URL works, and navigates me to the mp3 file without problems. However, feeding this same URL to <code>urllib</code> creates a problem.</p>
<p>I determined this was a unicode problem because the stack-trace reads: </p>
<pre><code>Traceback (most recent call last):
  File "importer.py", line 145, in &lt;module&gt;
    download_file(tuple[1], tuple[0], ".mp3")
  File "importer.py", line 81, in download_file
    with urllib.request.urlopen(url) as in_stream, open(to_fname+ext, 'wb') as out_file: #`with object as name:` safely __enter__() and __exit__() the runtime of object. `as` assigns `name` as referring to the object `object`.
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 162, in urlopen
    return opener.open(url, data, timeout)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 465, in open
    response = self._open(req, data)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 483, in _open
    '_open', req)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 443, in _call_chain
    result = func(*args)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 1283, in https_open
    context=self._context, check_hostname=self._check_hostname)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\urllib\request.py", line 1240, in do_open
    h.request(req.get_method(), req.selector, req.data, headers)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\http\client.py", line 1083, in request
    self._send_request(method, url, body, headers)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\http\client.py", line 1118, in _send_request
    self.putrequest(method, url, **skips)
  File "C:\Users\quesm\AppData\Local\Programs\Python\Python35-32\lib\http\client.py", line 960, in putrequest
    self._output(request.encode('ascii'))
UnicodeEncodeError: 'ascii' codec can't encode character '\xfc' in position 19: ordinal not in range(128)
</code></pre>
<p>... and other than the obvious <code>UnicodeEncodeError</code>, I can see it's trying to <code>encode()</code> to ASCII. </p>
<p>Interestingly, when I copied the URL from Chrome (instead of simply typing it into the Python interpreter), it translated the <code>bär</code> to <code>b%C3%A4r</code>. When I feed this to <code>urllib.request.urlopen()</code>, it processes fine, because all of these characters are ASCII. So my goal is to make this conversion within my program. I tried to get my original string to the unicode equivalent, but <code>unicodedata.normalize()</code> in all of its variants didn't work; further, I'm not sure how to store the Unicode as ASCII, given that Python 3 stores all strings as Unicode and thus makes no attempt to convert the text.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow"><code>urllib.parse.quote</code></a>:</p>
<pre><code>&gt;&gt;&gt; urllib.parse.quote('bär')
'b%C3%A4r'
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; urllib.parse.urljoin('https://d7mj4aqfscim2.cloudfront.net/tts/de/token/',
...                      urllib.parse.quote('bär'))
'https://d7mj4aqfscim2.cloudfront.net/tts/de/token/b%C3%A4r'
</code></pre>
</div>
<span class="comment-copy">Is there a difference between simply concatenating the strings and using <code>urljoin()</code>? Also, is there a name for this type of Unicode? Given that the Unicode I got from <code>normalize()</code> was completely different, I'm wondering how to name each of them when discussing.</span>
<span class="comment-copy">For your case, it's not strictly required to use <code>urljoin</code>. But consider this: <code>urllib.parse.urljoin('http://example.com/a/b/c', '/x/y/z')</code></span>
<span class="comment-copy">It's not a unicode. I heard it's called <a href="https://en.wikipedia.org/wiki/Percent-encoding" rel="nofollow noreferrer">Percent encoding</a>.</span>
<span class="comment-copy">I tried it and it erased the <code>/a/b/c</code> part. But changing <code>/x/y/z</code> to <code>x/y/z</code> made the resulting url different, to <code>emaple.com/a/b/x/y/z</code>. I can't really tell what part of the URL will be kept/replaced with this.</span>
<span class="comment-copy">@AlexG, Consider links ('a.html', '/other/place.html') inside some document ('<a href="http://example.com/a/b'" rel="nofollow noreferrer">example.com/a/b'</a>). <code>urljoin</code> is useful to get absolute url of those links.</span>
