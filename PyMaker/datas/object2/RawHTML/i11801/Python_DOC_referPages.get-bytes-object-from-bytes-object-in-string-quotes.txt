<div class="post-text" itemprop="text">
<p>I wanted to use Whoosh in my application and followed the tutorial <a href="http://pieceofpy.com/blog/2011/08/05/hooking-up-whoosh-and-sqlalchemy-(sawhoosh)/" rel="nofollow">here</a>, which was written in 2011.</p>
<p>When I try to unpickle data in this block:</p>
<pre><code>def results_to_instances(request, results):
    instances = []
    for r in results:
        cls = pickle.loads('{0}'.format(r.get('cls')))
        id = r.get('id')
        instance = request.db.query(cls).get(id)
        instances.append(instance)
    return instances
</code></pre>
<p>I get an error from the pickle.loads() command:</p>
<pre><code>TypeError: 'str' does not support the buffer interface
</code></pre>
<p>When I check what <code>'{0}'.format(r.get('cls'))</code> returns, it is type str, but the value is <code>"b'foo'"</code>. </p>
<p>How do I get the bytes object out of the string? Encoding it just returns <code>b"b'foo'"</code>.</p>
<p>The values are pickled in this block:</p>
<pre><code>def first_index(self, writer):
        oid = u'{0}'.format(self.id)
        cls = u'{0}'.format(pickle.dumps(self.__class__))
        attributes = []
        for attr in self.__whoosh_value__.split(','):
            if getattr(self, attr) is not None:
                attributes.append(str(getattr(self, attr)))
        value = u' '.join(attributes)
        writer.add_document(id=oid, cls=cls, value=value)
</code></pre>
<p>So if there is a way to fix it at the root, that would be better.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>r.get('cls')</code>. Wrapping it in <code>'{0}'.format()</code> makes a <code>bytes</code> into <code>str</code> in the first place, which is not what you want at all. Same goes for when you wrap <code>pickle.dumps</code> (immediately converting the useful <code>bytes</code> it returns to the useless formatted version). Basically all of your uses of <code>'{0}'.format()</code> make no sense, because they make <code>str</code> when you're trying to  work with the raw data.</p>
</div>
<span class="comment-copy">Doesn't the <code>'{0}'</code> serve some purpose? An example of the full result is <code>b'\x80\x03cserver.models.models\ntext\nq\x00.'</code></span>
<span class="comment-copy">Quickly tried it out, I get the same error. Although <code>r.get('cls')</code> returns <code>b'foo'</code>, but it is still type str. What does that mean?</span>
<span class="comment-copy">@Niel: It's because you also had the same error when you pickled it. You wrapped in a <code>format</code> that converted the <code>bytes</code> to <code>str</code>. All <code>'{0}'.format(x)</code> does is stringify <code>x</code> (it's equivalent to <code>str(x)</code> in the vast majority of cases), but pickles are a binary data format, and have no business being converted to <code>str</code>.</span>
<span class="comment-copy">That makes sense. I got the code from a working tutorial so I was hesitant to change it too much. Should I then also encode whatever I'm pickling?</span>
<span class="comment-copy">Basically, stop doing <a href="https://en.wikipedia.org/wiki/Cargo_cult_programming" rel="nofollow noreferrer">cargo cult programming</a>; you're trotting out bits of code quasi-religiously, without understanding what it actually does; <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> isn't make "make it work" powder, it exists for a purpose, and you need to understand it rather than blindly wrapping things in it.</span>
