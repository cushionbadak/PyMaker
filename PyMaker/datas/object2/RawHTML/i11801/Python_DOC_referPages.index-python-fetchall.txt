<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to use Python with MySQL. I'm having trouble addressing entries in the query results.</p>
<p>So if I do something like this:  </p>
<pre><code>import MySQLdb

db = MySQLdb.connect(host="192.168.178.10",
                     user="user",
                     passwd="password",
                     db="testdb")

cur = db.cursor()

cur.execute("select * from Persons;")
print(cur.fetchall()[2][2])


db.close()
</code></pre>
<p>I get the third entry of the third row which seems plausible.</p>
<p>If I do this:</p>
<pre><code>print(cur.fetchall()[0][0:2])
</code></pre>
<p>I get the first to entries of the first row. Which also seems plausible.</p>
<p>However if I do something like this:</p>
<pre><code>print(cur.fetchall()[0:2][2])
</code></pre>
<p>I get the error:</p>
<pre><code>Traceback (most recent call last):
  File "mysql.py", line 19, in &lt;module&gt;
    print(cur.fetchall()[0:2][2])
IndexError: tuple index out of range
</code></pre>
<p>Which I do not understand.</p>
<p>Also I am unable to get (for example) all the first entries of all the rows. To achieve this it seems I need to do a loop through the entries I want.</p>
<p>Could someone clarify what I'm doing wrong or how this works?</p>
<p>Greetings! </p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, without a specified ordering you do not get "third row" with </p>
<pre><code>cur.execute("select * from Persons;")
print(cur.fetchall()[2][2])
</code></pre>
<p>You get a random row. It may seem stable enough, but do not trust it.</p>
<p>The reason you get <code>IndexError: tuple index out of range</code> is that with</p>
<pre><code>print(cur.fetchall()[0:2][2])
</code></pre>
<p>you take a slice of elements from 0 to 1 from the result set and then you try to take the 3rd element with <code>[2]</code>, which does not exist, since your slice had 2 elements.</p>
<p>E.g.</p>
<pre><code>In [1]: rows = tuple(zip(range(10), range(10)))

In [2]: rows
Out[2]: 
((0, 0),
 (1, 1),
 (2, 2),
 (3, 3),
 (4, 4),
 (5, 5),
 (6, 6),
 (7, 7),
 (8, 8),
 (9, 9))

In [3]: rows[0:2]
Out[3]: ((0, 0), (1, 1))

In [4]: rows[0:2][0]
Out[4]: (0, 0)

In [5]: rows[0:2][2]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;ipython-input-5-2b13f1394ba3&gt; in &lt;module&gt;()
----&gt; 1 rows[0:2][2]

IndexError: tuple index out of range
</code></pre>
<p>To actually take the 3rd attribute from the result tuples you can use for example a <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> or a list comprehension:</p>
<pre><code>In [6]: rows = tuple(zip(range(10), range(10), range(10,20)))

In [7]: [r[2] for r in rows[0:2]]
Out[7]: [10, 11]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A tuple of list elements when queried with range of indexes returns another set of tuple with list of elements.</p>
<pre><code>&gt;&gt;&gt; t = ([1,2,3],[4,5,6],[7,8,9],)
&gt;&gt;&gt; print( t[0:2] ) # 2 is number of lists in the resulting tuple
([1, 2, 3], [4, 5, 6])
</code></pre>
<p>Here you can observe that resulting tuple size is 2 elements. And indexes can be 0 and 1 only. Hence following statement fails.  </p>
<pre><code>&gt;&gt;&gt; print( t[0:2][2] ) # [2] is pointing to non existing index
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: tuple index out of range
&gt;&gt;&gt;
</code></pre>
<p>Correct statement can be this.  </p>
<pre><code>&gt;&gt;&gt; print( t[0:2][1] )
[4, 5, 6]
</code></pre>
<p>If I understand correct, your intention is to find 2nd column value from first 2 rows from the dataset fetched. Possible statement can be:  </p>
<pre><code>&gt;&gt;&gt; for x in t[0:2]: print (x)
...
[1, 2, 3]
[4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; for x in t[0:2]: print (x[2])
...
3
6
&gt;&gt;&gt;
</code></pre>
<p>Hence, the statement</p>
<pre><code>print(cur.fetchall()[0:2][2])
</code></pre>
<p>can be re-written as:  </p>
<pre><code>rows = cur.fetchall()[ 0:2 ]
for row in rows: print ( row[ 2 ] )
</code></pre>
</div>
<span class="comment-copy">bucause this slice <code>cur.fetchall()[0:2]</code>  just has index 0 and 1</span>
<span class="comment-copy">Thanks, that does clarify it. I would still like to know if there is a way of addressing all the entries in a certain column except for looping through them an writing them into a list?</span>
<span class="comment-copy">"select the_column from Persons" to begin with, if you only need that, or use <code>map</code> (in python3) or a generator expression, if you don't want to generate a list (with list comprehension).</span>
