<div class="post-text" itemprop="text">
<p>I can't understand why the following code does not produce my debug message even though effective level is appropriate (output is just <code>10</code>)</p>
<pre><code>import logging

l = logging.getLogger()
l.setLevel(logging.DEBUG)
l.debug("Debug Mess!")
l.error(l.getEffectiveLevel())
</code></pre>
<p>while when I add this line after the import: <code>logging.debug("Start...")</code></p>
<pre><code>import logging

logging.debug("Start...")
l = logging.getLogger()
l.setLevel(logging.DEBUG)
l.debug("Debug Mess!")
l.error(l.getEffectiveLevel())
</code></pre>
<p>it produces following output:</p>
<pre><code>DEBUG:root:Debug Mess!
ERROR:root:10
</code></pre>
<p>so even though "Start..." is not shown, it starts to log. Why?</p>
<p>It's on Python 3.5. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The top-level <code>logging.debug(..)</code> call calls the <a href="https://docs.python.org/2/library/logging.html#logging.basicConfig" rel="nofollow"><code>logging.basicConfig()</code> function</a> for you if no handlers have been configured yet on the root logger.</p>
<p>Because using a call to <code>logging.getLogger().debug()</code> does <em>not</em> trigger that call, you don't see any output because there are no handlers to show the output on.</p>
<p>The Python 3 version of <code>logger</code> does have a <a href="https://docs.python.org/3/library/logging.html#logging.lastResort" rel="nofollow"><code>logging.lastResort</code> handler</a>, used for when no logging configuration exists, but this handler is configured to only show messages of level <code>WARNING</code> and up, which is why you see your <code>ERROR</code> level message (<code>10</code>) printed to STDERR, but not your <code>DEBUG</code> level message. In Python 2 you would get the message <em>No handlers could be found for logger "root"</em> printed instead, just once for the first attempt to log anything. I'd not rely on the <code>lastResort</code> handler however; instead properly configure your logging hierarchy with a decent handler configured for your own needs.</p>
<p>Either call <code>logging.basicConfig()</code> yourself, or manually add a handler on the root logger:</p>
<pre><code>l = logging.getLogger()
l.addHandler(logging.StreamHandler())
</code></pre>
<p>The above basically does the same thing as a <code>logging.basicConfig()</code> call with no further arguments. The <code>StreamHandler()</code> created this way logs to STDERR and does not further filter on the message level. Note that a <code>logging.basicConfig()</code> call can also set the logging level for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>The root logger(default logger, top level) and all other logger's default log level is <code>warning</code>(order 3) in all 5 log levels: <code>debug</code> &lt; <code>info</code> &lt; <code>warning</code> &lt; <code>error</code> &lt; <code>fatal</code> in order. </p>
<p>So at your first <code>logging.debug('starting...')</code>, you haven't set the root log level to <code>debug</code> as following code and you can't get the <code>starting...</code>output. </p>
<pre><code>import logging
logging.basicConfig(level=logging.DEBUG)
logging.debug('starting...')
</code></pre>
<p><a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow">see python logging HOW TO for detail</a></p>
</div>
<span class="comment-copy">what is the best practice to inherit the log level from the caller yet be able to have unittest with logs withing the module?</span>
