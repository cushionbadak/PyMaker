<div class="post-text" itemprop="text">
<p>In Python 2.7 I get the following results:</p>
<pre><code>&gt;&gt;&gt; with open("README.md", "r") as fin:
...     print(isinstance(fin, file))
... 
True
</code></pre>
<p>In python 3.5 I get:</p>
<pre><code>&gt;&gt;&gt; with open("README.md", "r") as fin:
...     print(isinstance(fin, file))
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
NameError: name 'file' is not defined
</code></pre>
<p>So, OK I look at the Python docs and find out that in Python 3.5, files are of type <code>io.IOBase</code> (or some subclass). Leading me to this:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; with open("README.md", "r") as fin:
...     print(isinstance(fin, io.IOBase))
... 
True
</code></pre>
<p>But then when I try in Python 2.7:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; with open("README.md", "r") as fin:
...     print(isinstance(fin, io.IOBase))
... 
False
</code></pre>
<p>So at this point, I'm confused. Looking at the <a href="https://docs.python.org/2/library/io.html#io.IOBase" rel="nofollow">documentation</a>, I feel as though Python 2.7 should report <code>True</code>.</p>
<p>Obviously I'm missing something elementary, perhaps because it's 6:30 PM ET, but I have two related questions:</p>
<ol>
<li>Why does Python report <code>False</code> for <code>isinstance(fin, io.IOBase)</code>?</li>
<li>Is there a way to test that a variable is an open file which will work in both Python 2.7 and 3.5?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>From the linked documentation:</p>
<blockquote>
<p>Under Python 2.x, this is proposed as an alternative to the built-in file object</p>
</blockquote>
<p>So they are not the same in python 2.x.</p>
<p>As to part 2, this works in python2 and 3, though not the prettiest thing in the world:</p>
<pre><code>import io
try:
    file_types = (file, io.IOBase)

except NameError:
    file_types = (io.IOBase,)

with open("README.md", "r") as fin:
    print(isinstance(fin, file_types))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For python2</p>
<pre><code>import types
f = open('test.txt', 'r')   # assuming this file exists
print (isinstance(f,types.FileType))
</code></pre>
<p>For python3</p>
<pre><code>import io
import types
f1 = open('test.txt', 'r')   # assuming this file exists
f2 = open('test.txt', 'rb')   # assuming this file exists
print (isinstance(f1,io.IOBase))
print (isinstance(f2,io.IOBase))
</code></pre>
<p>(Edit: my previous solution tested for io.TextIOWrapper, it worked only with files opened in text mode.  See <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow">https://docs.python.org/3/library/io.html#class-hierarchy</a> which describes the python3 class hierarchy).  </p>
</div>
<span class="comment-copy">"Under Python 2.x, this is proposed as an alternative to the built-in file object", so not the same in 2.x.</span>
<span class="comment-copy">I don't suppose you have a link so I can read more, do you?</span>
<span class="comment-copy">It's at the top of the page you linked.</span>
<span class="comment-copy">Wow! I can't believe that I missed that. Thanks.</span>
<span class="comment-copy">Since it's just for <code>isinstance</code> checks, you don't need the <code>tuple</code> wrapping in the Py3 case; just <code>file_types = io.IOBase</code> would work (possibly slightly more efficiently).</span>
<span class="comment-copy">@ShadowRanger aye, but kept it for consistency + the name of the variable indicates a sequence. Not that keen on optimizing such stuff unless really needed.</span>
<span class="comment-copy">OK, so I'm marking this answer as correct because I feel it's the correct answer to my question, but since my ultimate goal is to have a Python 2.7 and 3.5 compatible code base, I'm actually switching my <code>open()</code> calls to <code>io.open()</code> calls which work in both versions and you can test them the same way. Thanks for your help.</span>
<span class="comment-copy">@iLoveTux using io.open has the added benefit of <code>encoding=...</code>, <code>newline=...</code> support in Py2 too.</span>
<span class="comment-copy">@IIja, awesome! I'm sure that making this change will ultimately lead to more compatible code and it's just one more import and three more keystrokes per file. I can't believe I couldn't find anything online about this before. I'm just now getting into Python 3, so I'm sure there is a lot more to learn. Anyway, thank you for everything, including the quick response.</span>
<span class="comment-copy">in Python 3.5, I get <code>AttributeError: module 'types' has no attribute 'FileType'</code></span>
<span class="comment-copy">You are right (see my edit).  The <code>types</code> module in python3  is completely different.</span>
<span class="comment-copy"><code>isinstance(open('testi.txt', 'rb'), io.TextIOWrapper) == False</code>. Use the Base, Luke ... @SciProg</span>
