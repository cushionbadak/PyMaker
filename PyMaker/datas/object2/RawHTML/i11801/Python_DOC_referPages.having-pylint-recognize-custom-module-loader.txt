<div class="post-text" itemprop="text">
<p>I have a custom module loader that basically does some redirection. I would like pylint to recognize this custom loader. This is my situation:</p>
<pre><code>root/
    __init__.py
    new/
        __init__.py
        foo.py
        bar.py
    old/
        __init__.py
</code></pre>
<p>I have a lot of clients importing <code>old.foo</code>. I wrote a custom loader in <code>old/__init__.py</code> to redirect these to import <code>new.foo</code> under the hood. How do I get pylint to recognize this? When it lints <code>import old.foo</code>, it complains that it can't find <code>old.foo</code>. This is only a problem with pylint. I can get client code to recognize the custom loader without any issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>from the <a href="https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories" rel="nofollow">documentation on modules</a>:</p>
<blockquote>
<p>Packages support one more special attribute, <a href="https://docs.python.org/3/reference/import.html#__path__" rel="nofollow"><code>__path__</code></a>. This is initialized to be a list containing the name of the directory holding the packageâ€™s <code>__init__.py</code> before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.</p>
</blockquote>
<p>So if I understand correctly you want to redirect any references to <code>old</code> to redirect to <code>new</code>, so all you would need to do is replace the <code>old</code> folder with <code>old.py</code> that contains this:</p>
<pre><code>__path__ = ["new"]
</code></pre>
<p>Then when anything tries to import <code>old.foo</code> it will end up importing <code>new.foo</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to remember that pylint is a static analyser and as such doesn't actually load python file (except in some cases where it can't do otherwise, e.g. compiled code). As such it's not aware of custom importer or other tricks taking part of python's high dynamicity.</p>
<p>That being said:</p>
<ul>
<li><p>you may still write a "brain" plugin for <a href="https://github.com/PyCQA/astroid" rel="nofollow">astroid</a> (the library under pylint) that will help pylint understand your code's specificity</p></li>
<li><p>by relying on standard mecanism such as <code>__path__</code> manipulation you'll get more chance to avoid such need, either because at some point pylint may understand this or because someone else will have contributed a plugin for that purpose.</p></li>
</ul>
</div>
<span class="comment-copy">I think you want to use the <a href="https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories" rel="nofollow noreferrer"><code>__path__</code></a> special name that packages can use to spread across multiple directories basically redirecting any reference to <code>old</code> around to <code>new</code></span>
<span class="comment-copy">does this help at all: <a href="http://stackoverflow.com/questions/9602811/how-to-tell-pylint-to-ignore-certain-imports">how to tell pylint to ignore certain imports?</a></span>
<span class="comment-copy">Thanks, that is a great solution to replace my custom loader. But pylint is still not happy. It doesn't recognize <code>__path__</code> changes in <code>__init__.py</code>. Appears this problem is unsolvabe, based on <a href="http://stackoverflow.com/q/5394786/1330434">stackoverflow.com/q/5394786/1330434</a></span>
<span class="comment-copy">I don't think you fully understood, you need to replace the <b>folder</b> with a <code>old.py</code>, if that doesn't work either then I'm not sure what to suggest.</span>
<span class="comment-copy">Tried that. That changes the error from <code>No name 'foo' in module 'old' (no-name-in-module)</code> to <code>Unable to import 'old.foo' (import-error)</code>.</span>
<span class="comment-copy">ok, well if putting <code>from new import *</code> doesn't work in the <code>old.py</code> then I am out of ideas.  Haven't worked with pylint but I wish you luck!</span>
<span class="comment-copy">Nope, that doesn't work either. Thanks for your help. Appreciate it.</span>
