<div class="post-text" itemprop="text">
<p>("dezip" is obviously a bad name, but I'm not sure what the right one would be. Please excuse me if that means I've missed an authoritative answer by not knowing what to search for.)</p>
<p>Let's say we have</p>
<pre><code>people = [
    (1, 'anne'),
    (2, 'ben'),
    (3, 'charlie'),
]
</code></pre>
<p>(common in django for choices etc.)</p>
<p>Now we want a list of "keys" or list of the first elements: <code>[1, 2, 3]</code></p>
<p>In python 3 I'm using</p>
<pre><code>people_ids, _ = list(zip(*people))
# or even
people_ids = [p[0] for p in people]
</code></pre>
<p>The zip way doesn't seem very neat, particularly with the extra <code>list(...)</code> required by python 3 making zip an iterator. </p>
<p>The second comprehension approach is slightly more readable but wouldn't generalise as well, eg. return lists of the the second, third elements etc. in the same call.</p>
<p>Is there a better way?</p>
<p>(where "better" mainly means clean and readable but performance might also have some considerable)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next</code></a>, you can get the first item from the iterable:</p>
<pre><code>&gt;&gt;&gt; people = [
...     (1, 'anne'),
...     (2, 'ben'),
...     (3, 'charlie'),
... ]
&gt;&gt;&gt; next(zip(*people))
(1, 2, 3)
</code></pre>
<p>alternative using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> with <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a>:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; list(map(operator.itemgetter(0), people))
[1, 2, 3]
</code></pre>
<hr/>
<p>BTW, <code>zip</code> solution without <code>list</code> should work:</p>
<pre><code>&gt;&gt;&gt; people_ids, _ = zip(*people)
&gt;&gt;&gt; people_ids
(1, 2, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the particular example, you can "abuse" a little bit the <code>dict</code>:</p>
<pre><code>people = [
    (1, 'anne'),
    (2, 'ben'),
    (3, 'charlie'),
]

d_people = dict(people)
</code></pre>
<p>And then you have a nice data model. This has some problems: keys cannot be repeated, and won't work with tuples with more than two elements. But for this case (which is quite typical!) works very nicely.</p>
<p>Then you can simply get the keys by doing <code>keys</code>:</p>
<pre><code>d_people.keys()
</code></pre>
<p>or, explicit list, either:</p>
<pre><code>list(d_people)
list(d_people.keys())
</code></pre>
<p>which are equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>Getting a subset based on ids may be done by <code>operator.itemgetter</code>. Getting a subslice of zipped values may be done by creating explicit slice object and pass it to function.</p>
<pre><code>import operator

people = [
    (1, 'anne', 'some'),
    (2, 'ben', 'another'),
    (3, 'charlie', 'field'),
]

people_ids = [p[0] for p in people]  # 0 may be passed as funtion argument
people_ids_and_another = [operator.itemgetter(*[0, 2])(p) for p in people]  # [0, 2] may be passed as function argument
people_ids_and_name_via_slice = [p[slice(0,2,None)] for p in people]  # equal to p[0:2], but passable as argument
</code></pre>
<p>To demonstrate function usage:</p>
<pre><code>def dezip(seq, what):
    if isinstance(what, list):
        return [operator.itemgetter(*what)(p) for p in people]
    else:
        return [p[what] for p in people]

assert dezip(people, slice(0,2,None)) == [(1, 'anne'), (2, 'ben'), (3, 'charlie')]
assert dezip(people, 0) == [1, 2, 3]
assert dezip(people, [0, 2]) == [(1, 'some'), (2, 'another'), (3, 'field')]
</code></pre>
<p>If you'll drop 'list of indices' requirement, you may drop if statement in function body.</p>
</div>
<span class="comment-copy"><i>The second comprehension approach is slightly more readable but wouldn't generalise as well, eg. return lists of the the second, third elements etc.</i> why it won't? Pass it a single number, it'll return single element. Pass it a slice object, it'll return slice of original sliced list. It looks like nice and neat solution.</span>
<span class="comment-copy">Let says we want <code>people_ids, people_names = [???]</code> can't be done in one readable comprehension AFAIK. But maybe you're right, if you just want one set of elements, be clear and write out the comprehension.</span>
<span class="comment-copy">updated to clarify what I mean by "second, third elements"</span>
<span class="comment-copy">sorry, what you can't do is <code>people_ids = zip(*people)[0]</code>. You have a typo, I guess you mean with<b>out</b></span>
<span class="comment-copy">I guess the real answer to my question is <b>NO</b>. But this is probably closest to an answer.</span>
<span class="comment-copy">@SColvin, thank you for pointing it out. I fixed the word.</span>
