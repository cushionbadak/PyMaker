<div class="post-text" itemprop="text">
<p>I am very new to Python and OOP in general. I have a very easy question thou that just won't be working for me. 
I have a class with several functions.</p>
<pre><code>class Test:

    def a(self):
        var1 = 1
        return var1

    def b(self):
        var2 = 2
        return var2

    def c(self):
        var3 = a()
        var4 = b()
</code></pre>
<p>Why will this just tell me that it does not know a() or b()
I guess I am missing some important basic knowledge.
Thanks</p>
<p>The Actual I am refering to:</p>
<pre><code>class Token:
    # get new token
    def post_new_token(self):
        payload = "***"
        headers = {
            'authorization': "***",
            'content-type': "application/x-www-form-urlencoded"
        }
        r = requests.post(settings.GET_NEW_TOKEN, data=payload, headers=headers)
        r_json_obj = r.json()
        # print ("I am from post_new_token:") 
        # print r_json_obj
        return r_json_obj

    # use the new token
    def get_config(self):
        # here I want to use the returned value:
        access_token = self.post_new_token()
        headers = {
            'authorization': "Bearer " + str(access_token),
            'cache-control': "max_age 3600"
        }
        r = requests.get(settings.GET_CONFIG, headers=headers)
        # print ("I am from get_config:")
        # print access_token
        return r
</code></pre>
<p>So if use the prints it actually goes fine but when it gets to self.post_new_token() it runs all this function again.</p>
<p>There is no error coming but if I use the prints to see whats happening I get it like this:</p>
<pre><code>I am from post_new_token:
{***}
I am from get_config:
{***}
I am from post_new_token:
{***}
</code></pre>
<p>Why is it printing</p>
<pre><code>I am from post_new_token:
{***}
</code></pre>
<p>again?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <code>self</code>  if you want to call an instance method or access a name (instance variable) from  other instance methods.</p>
<pre><code>def c(self):
    var3 = self.a()
    var4 = self.b()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of:</p>
<pre><code>def c(self):
    var3 = a()
    var4 = b()
</code></pre>
<p>I would try:</p>
<pre><code>def c(self):
    var3 = self.a()
    var4 = self.b()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at this case first:</p>
<pre><code>class Test:
    def a(self):
        var1 = 1
        return var1

    def b(self):
        var2 = 2
        return var2
</code></pre>
<p>When you instantiate a class:</p>
<pre><code>test_obj = Test()
</code></pre>
<p>And then try to see what <code>a</code> or <code>b</code> are:</p>
<pre><code>print test_obj.a
&gt;&gt;&gt; &lt;bound method Test.a of &lt;so.Test instance at 0x18B9B648&gt;&gt;
print test_obj.b
&gt;&gt;&gt; &lt;bound method Test.b of &lt;so.Test instance at 0x18B9B648&gt;&gt;
</code></pre>
<p>Notice - it says <em>bound</em> method of an instance of <code>Test</code>. These methods are bound to an instance - you can only use them with that instance. Incidentally, have you ever wondered what <code>self</code> was and why you always have to pass it in to instance methods of a class? Did you know you could rewrite your class like this (not recommended, always use <em>self</em> for this, just doing this to illustrate the point).</p>
<pre><code>class Test:
    def a(instance): #a belongs to that instance
        var1 = 1
        return var1

    def b(instance):
        var2 = 2
        return var2
</code></pre>
<p>And it would work the same way? If you also added <code>print instance</code> to <code>a</code>, like so:</p>
<pre><code>def a(instance):
    print instance
    var1 = 1
    return var1
</code></pre>
<p>And tried printing out the method a and calling the method:</p>
<pre><code>print test_obj.a
&gt;&gt;&gt; &lt;bound method Test.a of &lt;so.Test instance at 0x18B9B3C8&gt;&gt; # Notice memory address
test_obj.a() # Remember we added print instance here
&gt;&gt;&gt; &lt;so.Test instance at 0x18B9B3C8&gt; # Address is the same
</code></pre>
<p>This was just to illustrate the point that these methods are <em>bound</em> to an instance, and to use them you need to use that specific instance, thus:</p>
<pre><code>class Test:
    # This function is in the scope of the class
    def a(self):
        var1 = 1
        return var1

    # This function is in the scope of the class
    def b(self):
        var2 = 2
        return var2

    def c(self):
        # a() and b() are not defined in this scope,
        # to use them you would have to define them again here (within the scope of c).
        # def a():
        #     return 1
        # def b():
        #     return 2
        # Your methods are bound to self (current instance)
        var3 = self.a()
        var4 = self.b()
</code></pre>
<p>And when calling <code>c</code> you would again, use the instance - <code>test_obj.c()</code></p>
</div>
<span class="comment-copy">You need to use <code>self.a()</code> and similarly for <code>b</code>. To know why, I suggest reading the tutorial section on <a href="https://docs.python.org/3/tutorial/classes.html#classes" rel="nofollow noreferrer">classes</a>. It would be well worth your time to read it over carefully and see where your misunderstand lies.</span>
<span class="comment-copy">Ok I did that in my actual code. But than it goes throu the whole function and prints out what is in this function. But I just want to use the returned content and not everything from the function</span>
<span class="comment-copy">And please don't refer to a "def". They are called functions, or - when they're within a class, as here - methods.</span>
<span class="comment-copy">@buchstabe You need to provide the actual code that is giving you problems so we can actually know how to provide the proper solution. As is, the solution is simply applying the <code>self</code> when calling your instance methods. Update your question with what is actually going on and add the full stack trace you are receiving, if any.</span>
<span class="comment-copy">Your actual code seems OK. Can you also post the actual error message (copy-paste, please, no retyping or summarizing)? Include any backtrace that might be in the error message.</span>
<span class="comment-copy">Good answer! Maybe you could add more prose describing the conventional use of <code>self</code>, the difference between local and global namespaces, or <i>why</i> <code>a</code> isn't in scope. Also, remember to indent correctly.  If the code in an answer doesn't run, OP might not believe the rest of the answer.</span>
