<div class="post-text" itemprop="text">
<p>It's possible to slice a python list like this:</p>
<pre><code>&gt;&gt;&gt; list=['a', 'b']
&gt;&gt;&gt; list[0:1]
['a']
</code></pre>
<p>However, when passing the index as a string, an error is thrown:</p>
<pre><code>&gt;&gt;&gt; index="0:1"
&gt;&gt;&gt; list[index]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list indices must be integers, not str
</code></pre>
<p>How can I specify a list index as a string? What data type is <code>0:1</code> in <code>list[0:1]</code>, really?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>n:m</code> is syntactic sugar for a <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow"><code>slice</code></a>. You could <code>split</code> your index string, convert its parts to integers, and create a <code>slice</code> from those.</p>
<pre><code>&gt;&gt;&gt; lst = list(range(10))
&gt;&gt;&gt; index = "1:4"
&gt;&gt;&gt; s = slice(*map(int, index.split(':')))
&gt;&gt;&gt; lst[s]
[1, 2, 3]
</code></pre>
<p>Works just the same with three parts:</p>
<pre><code>&gt;&gt;&gt; index = "1:9:2"
&gt;&gt;&gt; s = slice(*map(int, index.split(':')))
&gt;&gt;&gt; lst[s]
[1, 3, 5, 7]
</code></pre>
<p>If you want to allow for "blank" parts, the conversion gets a little bit more involved:</p>
<pre><code>&gt;&gt;&gt; index = "::-1"
&gt;&gt;&gt; s = slice(*[int(x) if x else None for x in index.split(':')])
&gt;&gt;&gt; lst[s]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just convert your <em>slicing</em> string into integers by splitting on <code>:</code>, and then using them as slicing indices.</p>
<pre><code>list=['a', 'b']
slicer_str = '0:1'
slicer_int = [int(i) for i in slicer_str.split(':')]
print(list[slicer_int[0]:slicer_int[1]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>exec()</code> for this.</p>
<pre><code>l = ['a', 'b']
index="0:1"
exec('print(l[{}])'.format(index))
</code></pre>
<p>The print is needed only to see the output. You can assign it to a variable and call the variable afterwards instead.</p>
</div>
<span class="comment-copy">You should use two integers as the start and stop indexes and then use those.</span>
<span class="comment-copy">As you can see from the traceback, "list indices must be integers, not str"</span>
<span class="comment-copy">Also see: <a href="http://stackoverflow.com/questions/680826/python-create-slice-object-from-string" title="python create slice object from string">stackoverflow.com/questions/680826/â€¦</a></span>
<span class="comment-copy">@tobias_k...slicing a <code>range</code> will produce a <code>range</code> and not a <code>list</code> in Python3, correct me if I'm wrong?</span>
<span class="comment-copy">@IronFist You are right, tried this in Python2; converted to <code>list</code> so it works with both.</span>
<span class="comment-copy">What would happen to a <code>slicer_str</code> of <code>:</code> or <code>:1</code> in this case?</span>
<span class="comment-copy">@Zulakis if such slicer happens to come in your case, you can use map and slice, as suggested by tobias_k. That will handle all such cases.</span>
<span class="comment-copy">Without the <code>print</code>, i.e. to assign the result to some variable, you should use <code>eval</code> instead of <code>exec</code>. Also, never use <code>eval</code> (or <code>exec</code>) if it can be helped.</span>
<span class="comment-copy"><code>exec('a = l[{}]'.format(index))</code> would assign to <code>a</code> as well</span>
<span class="comment-copy">Right, but this way you could not wrap the ugly exec/eval part into a function.</span>
<span class="comment-copy">Yes, you are right. But in this particular case, there are no functions involved. In theory you can make a as global in exec() and carry it over even inside a function, it would be super ugly.</span>
