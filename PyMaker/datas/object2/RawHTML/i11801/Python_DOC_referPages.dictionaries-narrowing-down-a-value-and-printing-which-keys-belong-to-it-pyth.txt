<div class="post-text" itemprop="text">
<p>I'm sorting through a dictionary and trying to go through it and determine which of the dictionary keys in "food_type" has the corresponding value of "fruit". So far going through this the farthest my code below takes me is :</p>
<pre><code>def  fruit (food_type):


         for f in food_type.values():
                if f=="fruit" :
                    return(f)

fruit ({'apple': 'fruit', 'lettuce': 'veggie', 'banana':'fruit'})
</code></pre>
<p>This just returns "fruit" once, so I'm not 100% if that's what I want in this case since my end goal is to have the value reflected back to the dictionary and return the keys that have "fruit" as their value. I know that in order to get a value you can just do : d[k] or d.get(k) etc. </p>
<p>I'm looking for an output the following for this:</p>
<pre><code>["apple","banana"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll want to iterate through <code>(key, value)</code> pairs, accumulate matches to a list and then return that list.</p>
<p>A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a> gets the job done nicely:</p>
<pre><code>def fruit(food_type):
    return [k for k, v in food_type.items() if v == 'fruit']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This might be what you're after:</p>
<pre><code>def  fruit (food_type):
    return [k for k in food_type if food_type[k] == "fruit"]

print fruit ({'apple': 'fruit', 'lettuce': 'veggie', 'banana':'fruit'})

# ['apple', 'banana']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The below code will return you the new dictionary with just the entries with value equal to 'fruit':</p>
<pre><code>&gt;&gt;&gt; d = {'apple': 'fruit', 'lettuce': 'veggie', 'banana':'fruit'}
&gt;&gt;&gt; {k: v for k, v in d.items() if v == 'fruit'}
{'apple': 'fruit', 'banana': 'fruit'}
</code></pre>
<p>If you want just the keys, simply call keys() method on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also inverse your dictionary with :</p>
<pre><code>inverse_d = {}
for k, v in d.iter_items():
    if v not in inverse_d:
        inverse_d[v] = [k]
    else :
        inverse_d[v].append(k)
</code></pre>
<p>and then </p>
<pre><code>print inverse_d["fruit"]
</code></pre>
</div>
<span class="comment-copy"><code>dict.setdefault</code> or <code>collections.defaultdict</code> would remove the need for an if/else block.</span>
<span class="comment-copy">I know. I judged that this was easier to understand for a beginner.</span>
<span class="comment-copy">Thanks for putting it in simpler terms. I'm fairly new to Python.</span>
