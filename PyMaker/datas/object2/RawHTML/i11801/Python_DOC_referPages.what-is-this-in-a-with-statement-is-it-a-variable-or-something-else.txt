<div class="post-text" itemprop="text">
<p>I'm using Python 3.x. Could someone please explain to me what <code>file</code> in the below block of code is?</p>
<pre><code>with open(filename, "a") as file:
    file.write("Hello world")
    print(file) #I added this line to try to understand what 'file' is.
</code></pre>
<p>When I ran the above code, <code>print(file)</code> produced this:</p>
<pre><code>&lt;_io.TextIOWrapper name='Class_A.txt' mode='a' encoding='cp1252'&gt;
</code></pre>
<p>I don't understand this. I can see that it's related to the with statement, but it doesn't really look like a variable.</p>
<p>So what is <code>file</code>? Is it a variable, or something else? If it is a variable, what data type is it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>file</code> is a variable, referencing whatever the context manager produced by <code>open()</code> returned. It happens to be the same object. In other words, <code>file</code> references a file object.</p>
<p>You could also have done this, to the same effect here:</p>
<pre><code>file = open(filename, "a")
try:
    file.write("Hello world")
finally:
    file.close()
</code></pre>
<p>so the file is automatically closed. That's because file objects are <em>context managers</em>; they support the <a href="https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers" rel="nofollow">context manager protocol</a>. Technically speaking, the <code>with context_manager as &lt;name&gt;</code> target variable is bound to the the return value of <code>context_manager.__enter__()</code>, but a file object returns itself from that method, and the <code>file.__exit__()</code> method closes the file. See the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow"><code>with</code> compound statement documentation</a>.</p>
<p>Now, when you <em>print</em> an object that doesn't have a string representation, it'll print using the <code>repr()</code> function:</p>
<pre><code>&gt;&gt;&gt; repr(open('/dev/null'))
"&lt;_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'&gt;"
&gt;&gt;&gt; print(repr(open('/dev/null')))
&lt;_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'&gt;
</code></pre>
<p>so yes, this is just another object, one with a custom, helpful representation. File objects implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>object.__repr__()</code> hook</a> to produce this:</p>
<pre><code>&gt;&gt;&gt; open('/dev/null').__repr__()
"&lt;_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'&gt;"
</code></pre>
<p>The name of the file object may also be confusing here. That's because file objects in Python are part of a series of objects defined by the <a href="https://docs.python.org/3/library/io.html" rel="nofollow"><code>io</code> module</a>; a <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow"><code>TextIOWrapper</code> object</a> wraps a <em>buffer</em> (here a <a href="https://docs.python.org/3/library/io.html#io.BufferedReader" rel="nofollow"><code>BufferedReader</code></a>, which in turn will wrap the raw, binary file object in the form of a <a href="https://docs.python.org/3/library/io.html#io.FileIO" rel="nofollow"><code>FileIO</code> object</a>:</p>
<pre><code>&gt;&gt;&gt; devnull = open('/dev/null', 'r')
&gt;&gt;&gt; devnull
&lt;_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'&gt;
&gt;&gt;&gt; devnull.buffer
&lt;_io.BufferedReader name='/dev/null'&gt;
&gt;&gt;&gt; devnull.buffer.raw
&lt;_io.FileIO name='/dev/null' mode='rb' closefd=True&gt;
</code></pre>
<p>This is all just tech detail you don't normally need to worry about. Each object performs a specific function, and someone needing to do more advanced I/O wrangling can mix and match these.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's the text representation of an object when it doesn't have its own <code>__repr__</code> or <code>__str__</code>.  <code>file</code> is a variable which points to an object of that was created in the with statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is the object that is returned by the <code>open(filename, "a")</code> context manager call. The <code>_io.TextIOWrapper</code> is a <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow">file-like object</a> that you can do things with like read, write, seek, and close. </p>
<p>When you do this:</p>
<pre><code>with thing1 as thing2: 
</code></pre>
<p>The method <code>thing1.__enter__</code> gets called, and whatever it returns gets assigned to the variable/name <code>thing2</code>. </p>
<p>So yes, in your example <code>file</code> is indeed a variable that has been assigned to whatever object has been returned by the <code>with</code> context manager. In this case it is a <code>_io.TextIOWrapper</code> object. This is why when you do:</p>
<pre><code>print(file)
</code></pre>
<p>You get: </p>
<pre><code>&lt;_io.TextIOWrapper name='Class_A.txt' mode='a' encoding='cp1252'&gt;
</code></pre>
<p>...which is just the string representation of that kind of object. </p>
<p>You can manually get the same object this way:</p>
<pre><code>file = open(filename, "a").__enter__()
print(file) # same file-like object you were getting before
file.write('a line') # do stuff with it
file.close() # close it
</code></pre>
<p>Note that the object returned by <code>open(filename, "a").__enter__()</code> is the same object you would get from <code>open(filename, "a")</code>. This is because the <code>__enter__()</code> method of the <code>_io.TextIOWrapper</code> object just returns <code>self</code>. However, this is not always the case with other objects. </p>
<p>If you find all of this confusing I suggest reading up a bit more about the <a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow"><code>with statement</code></a>. </p>
</div>
<span class="comment-copy">It <i>is</i> a variable and it stores a <code>TextIOWrapper</code> object. How is that "nothing"?</span>
<span class="comment-copy">Why doesn't it look like a variable? Why doesn't it store anything? Why do you think it is not a variable? It's unclear from your question where the confusion lies.</span>
<span class="comment-copy">The documentation is freely available <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">'put on hold as unclear what you're asking...' - I changed my post a few hours ago to make clear what I'm asking.</span>
<span class="comment-copy">It was clear enough that two of us, at least, have managed to answer it usefully and concisely.  Hey, folks, just because <i>you</i> don't understand it doesn't mean it isn't clear to others.</span>
<span class="comment-copy">So <code>file</code> is a variable which acts as a context manager?</span>
<span class="comment-copy"><code>file</code> is name, referencing an object that acts as a context manager.</span>
<span class="comment-copy">I don't understand...</span>
<span class="comment-copy">There is a distinction between <i>names</i> (variables), and the stuff they reference, <i>objects</i>. See <a href="http://nedbatchelder.com/text/names1.html" rel="nofollow noreferrer">nedbatchelder.com/text/names1.html</a> for a good explanation of what that means.</span>
<span class="comment-copy">Okay. But what about the data type of the variable? I thought that all variables have data types, so what data type is it?</span>
