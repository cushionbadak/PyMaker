<div class="post-text" itemprop="text">
<p>I have a class with quite a few attributes that are provided when instanciating (<strong>init</strong>).</p>
<p>Looks like this, but with about 30 more attr:</p>
<pre><code>class SomeObject:
    def __init__(self,
                 first,
                 second):
        self.first = first
        self.second = second
</code></pre>
<p>Works fine, but gets very long an repetitive and hard to update.</p>
<p>Before I used a much smaller class:</p>
<pre><code>class SomeObject:
    def __init__(self, **attr):
        self.__dict__.update(attr)
</code></pre>
<p>Works fine, much easier, but hard to keep track. When using an IDE (I use PyCharm) I will have no hints when writing an object and autocomplete hints are usually not working.</p>
<p>I would look for some mix of both classes, like:</p>
<pre><code>class SomeObject:
    def __init__(self,
                 first,
                 second):
    self.__dict__.update(???)  # I would like to do it in a single line, so I dont have to write a new attr two (three...) times.
</code></pre>
<p>Anybody knows if / how this is possible? Thanks a lot</p>
<p>Python 3.4 +
PyCharm 2016.1 CommunityEdition</p>
<p>... Edit / Additional ...</p>
<p>The problem seems to be primarily to "preserve" the code inspection in the IDE, so that the autocompletion etc. is still available on the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can simply get a dictionary of the local variables with the <code>locals</code> builtin, then remove <code>self</code> and update:</p>
<pre><code>class test:
    def __init__(self,
                 a,b,c,d,e,f,g,h,i,j,k,l,m,
                 n,o,p,q,r,s,t,u,v,w,x,y,z):
        args = locals()
        del args["self"]
        if "args" in args:
            del args["args"]
        self.__dict__.update(args)

args = list(range(26))

x = test(*args)

from string import ascii_lowercase as letters
assert args == [getattr(x,c) for c in letters]
print("worked")
</code></pre>
<p>Although if you really want to make your IDE happy it needs to see the explicit attribute assignment, so you could instead write a code to write the code:</p>
<pre><code>def write_init_code(func):
    self,*args = func.__code__.co_varnames
    return "\n".join(["{0}.{1} = {1}".format(self,a)
                      for a in args])

class test:
    def __init__(self,a,b,c,d,e,f,*v,**kw):
        pass #just a moment...


print(write_init_code(test.__init__))
</code></pre>
<p>then just copy-paste and indent the result from <code>write_init_code</code> into the actual function and you are done.</p>
</div>
<div class="post-text" itemprop="text">
<p>The module <code>inspect</code> allows you to query the running program. The below example demonstrates its use:</p>
<pre><code>import inspect

class Test:
        def __init__(self, a, b, c, d):
                argInfo = inspect.getargvalues(inspect.currentframe())
                print(argInfo)
                # Print argument values in order of parameters
                print([ argInfo.locals[paramName] for paramName in argInfo.args[1:] ])

t = Test(1,2,3,4)
</code></pre>
<p>output:</p>
<pre><code>ArgInfo(args=['self', 'a', 'b', 'c', 'd'], varargs=None, keywords=None, locals={'c': 3, 'self': &lt;__main__.Test object at 0x7fb2d9c0ce10&gt;, 'b': 2, 'd': 4, 'a': 1})
[1, 2, 3, 4]
</code></pre>
<p>As you can see, you can access a dictionary of the arguments and their corresponding parameter name through <code>ArgInfo.locals</code>. </p>
<p>The second print out is an example of how to put the argument values in the order of the parameter declaration.</p>
<p>You can use this to populate your instance variables, or you can simply copy the <code>ArgInfo.locals</code> dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals()</code></a> to achieve what you want:</p>
<pre><code>class SomeObject:
    def __init__(self, first, second):
        kwargs = locals()
        kwargs.pop('self')  # remove `self` keywork from the dict
        self.__dict__.update(kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: Now that python 3.7 is out, the @dataclass class decorator solves this very elegantly.</p>
<p>ORIGINAL ANSWER:
With multiple cursors in PyCharm, you can easily convert</p>
<pre><code>self.first = first
self.second = second
</code></pre>
<p>to a very long line like:</p>
<pre><code>self.first, self.second = first, second
</code></pre>
<p>This is what I've done to keep PyCharm smart</p>
</div>
<span class="comment-copy">you could use <code>self.__dict__.update(first=first, second=second)</code> but that would defeat the purpose wouldn't it? if you want to do less writing make the first argument <code>s</code> instead of <code>self</code> but there is no way to simply automate this.</span>
<span class="comment-copy">You probably <i>could</i> solve this using some introspection tools. However, a class with 30 attributes set by <code>__init__</code> makes me think that you would be better off by refactoring your code. It might be that <i>your case</i> actually requires those 30 arguments to be passed this way, but in general I would consider this an alarm bell that something is not really right. Maybe think about it for a while and unless you figure it out yourself, post a new message asking for help with the refactoring?</span>
<span class="comment-copy">With multiple cursors,</span>
<span class="comment-copy">That looks fine. A lot less typing. Attribute hinting when typing an object works, but in my IDE it can resolve the reference from an object to the class. So when I have your object "x" it's not giving me the list of available attributes and the autocomplete hints when I start typing do not work.</span>
<span class="comment-copy">that does not surprise me, autocomplete attributes are from attributes it sees elsewhere in the code. This isn't doing anything with attributes though, only dict operations.  What is wrong wit just typing each definition out? Maybe check that the essential ones are the correct type?  It may be annoying to type out but once it is written you don't have to rewrite it any more, and it will make your IDE happy!</span>
<span class="comment-copy">I edited answer, maybe <code>write_init_code</code> is more what you are looking for?</span>
<span class="comment-copy">I'm surprised that didn't occur to me at first, "gets very long an repetetive and hard to update." Thats what programming was designed to help with!</span>
<span class="comment-copy">I like this solution. Works fine in the code, but I still loose the code completion features. If I use self.__dict__.update(inspect.getargvalues(inspect.currentframe()).locals) in the init file my IDE can't reference the attributes between class an object.</span>
<span class="comment-copy">Hmmm. I'll have to think about that. I'm not sure there is a way to get code completion for the attributes with this method.</span>
<span class="comment-copy">seems I forgot to reload the page after boot to see that there are already 2 answers to this question for 12 hours already :) well, at least I've learned something new in the process :)</span>
<span class="comment-copy">I really dont see how this helps, reduces typing sure but nothing automatic about this</span>
<span class="comment-copy">He said "# I would like to do it in a single line...".  This does that...  I don't think he wanted this to be automatic...</span>
