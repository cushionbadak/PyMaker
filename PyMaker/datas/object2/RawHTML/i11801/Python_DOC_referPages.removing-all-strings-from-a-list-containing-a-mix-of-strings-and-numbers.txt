<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4357832/filter-a-list-in-python-get-integers">Filter a list in python get integers</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a list which contains a mix of strings and numbers eg</p>
<pre><code>old_list = [23, 35, string, 42, string]
</code></pre>
<p>I would like list to look like this</p>
<pre><code>new_list = [23,35,45]
</code></pre>
<p>Is there a simple way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension to filter on type:</p>
<pre><code>new_list = [value for value in old_list if isinstance(value, int)]
</code></pre>
<p>This picks out <em>just</em> integers. If you need to support arbitrary numbers (floats, complex numbers, <code>decimal.Decimal</code> instances) use the <a href="https://docs.python.org/2/library/numbers.html"><code>numbers.Number</code> abstract type</a>:</p>
<pre><code>from numbers import Number

new_list = [value for value in old_list if isinstance(value, Number)]
</code></pre>
<p>You can also give <code>isintance()</code> a tuple of types to test against, if just need a a subset; for example:</p>
<pre><code>new_list = [value for value in old_list if isinstance(value, (int, float))]
</code></pre>
<p>would filter on integers and floating point values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Apart form the already mentioned comprehension, you can consider the built-in filter function:</p>
<pre><code>new_list = filter(lambda x: isinstance(x, int), old_list)
</code></pre>
</div>
<span class="comment-copy">@Kasramvd: not quite, that filters on <i>strings <b>containing</b> numbers</i>.</span>
<span class="comment-copy">Why users are answering a question that should be closed as "too broad"? This question doesn't meet the standards of Stack Overflow and I don't think we should encourage such questions.</span>
<span class="comment-copy">@MarounMaroun: I don't see how this is too broad, frankly.</span>
<span class="comment-copy">@MarounMaroun: 'lack of research' is not off topic. It is perfectly valid for a question to be down voted for that reason, but that doesn't make it closeable.</span>
<span class="comment-copy">@MartijnPieters Yes, but the solutions are the same. Although your answer is more comprehensive than the answers in suggested question, you could close the question and post your answer on  related question (or the duplicate which I'm sure has been asked already.) Anyway It's not a big deal, well done.</span>
<span class="comment-copy">Wouldn't  <code>[value for value in old_list if not isinstance(value, str)]</code> cover all bases?</span>
<span class="comment-copy">@PadraicCunningham: it would only cover the base where the other values are strings. If you have more types then no, it wouldn't cover <i>all</i> bases. :-)</span>
<span class="comment-copy">@Martin, <i>I have a list which contains a mix of strings and numbers</i>.  I think the bases are well covered with <code>not isinstance(value, str)</code> ;)</span>
<span class="comment-copy">@PadraicCunningham: I prefer filtering on what you want, not on what you don't want. Either category could expand over time, but I find that what you don't want can expand to a far greater set to have to filter on. I rather nail down the smaller set of what you <i>do</i> want.</span>
<span class="comment-copy">List comprehension should be preferred however. It's more commonly used.</span>
<span class="comment-copy">Note that in Python 3, <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> returns an iterator, not a list. Of course, in many situations an iterator may be superior to having a list, but if you <i>do</i> want a list, eg, so you can index into it or count it, then you can do <code>list(filter(lambda x: isinstance(x, int), old_list))</code>.</span>
