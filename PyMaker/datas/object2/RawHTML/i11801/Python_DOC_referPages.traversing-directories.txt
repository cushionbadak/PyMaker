<div class="post-text" itemprop="text">
<p>I am trying to write a python program that takes an input directory, and prints out all the .txt files that are in the directory. However, if there is another folder inside that one, it must do the same thing using recursion.</p>
<p>My problem is that is only does the .txt files and does not traverse further into the directory.</p>
<pre><code>import os
path = input("What directory would you like to search?: ")
def traverse(path):
    files = os.listdir(path)
    for i in files:
        if os.path.isdir(i) == True:
            traverse(i)
        elif i.endswith('.txt'):
            print(i)
traverse(path)
</code></pre>
<p>What is the problem?          </p>
</div>
<div class="post-text" itemprop="text">
<p>You are missing full path otherwise it's fine. see below </p>
<pre><code>def traverse(path):
    files = os.listdir(path)
    for i in files:
        if os.path.isdir(os.path.join(path,i)):
            traverse(os.path.join(path,i))
        elif i.endswith('.txt'):
            print(os.path.join(path,i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like the reason your code is failing is because the <code>if os.path.isdir(i) == True</code> line always fails, regardless of whether or not the file is the directory. This is because the <code>files</code> variable stores relative paths rather than absolute paths, which causes the check to fail.</p>
<p>If you want to do it using the recursion method you gave, your code can be changed as follows:</p>
<pre><code>import os
path = input("What directory would you like to search?: ")
def traverse(path):
    files = os.listdir(path)
    files = (os.path.join(os.path.abspath(path), file) for file in files)
    for i in files:
        if os.path.isdir(i) == True:
            traverse(i)
        elif i.endswith('.txt'):
            print(i)
traverse(path)
</code></pre>
<p>Here is a better way to do it using fnmatch (adapted to suit the rest of your code from <a href="https://stackoverflow.com/questions/2186525/use-a-glob-to-find-files-recursively-in-python">Use a Glob() to find files recursively in Python?</a>). It will recursively search all files in the supplied directory, and match those that end with </p>
<pre><code>import fnmatch
import os

path = input("What directory would you like to search?: ")

def traverse(path):
    matches = []
    for root, dirnames, filenames in os.walk(path):
        for filename in fnmatch.filter(filenames, '*.txt'):
            matches.append(os.path.join(root, filename))
    print matches

traverse(path)
</code></pre>
</div>
<span class="comment-copy">Must you use recursion?  <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk()</code></a> would be easier.</span>
<span class="comment-copy">Sure, updated answer</span>
<span class="comment-copy">is there a way to do this with recursion and not with the fnmatch module?</span>
<span class="comment-copy">@OntologicalSin Yes -- just edited the answer.</span>
<span class="comment-copy">Only one suggestion. Return a generator exp or <code>yield filename</code> instead of returning a list, which will be pretty huge for a big directory. Otherwise good.</span>
