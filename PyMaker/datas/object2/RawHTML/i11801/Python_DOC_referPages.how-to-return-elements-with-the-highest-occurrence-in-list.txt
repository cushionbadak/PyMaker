<div class="post-text" itemprop="text">
<p>So I was attempting to make a function which will takes a single argument numlist (a non-empty list of numbers), and returns the sorted list of numbers which appear with the highest frequency in numlist. </p>
<p>So far I have managed to create a dictionary (numbers as keys and their frequencies as values). But I still want to find which one of them has the maximum value and return it. Thing is I dont know how to compare them. Now there are certain one-liners like this </p>
<pre><code>max(stats, key=stats.get)
</code></pre>
<p>But what if there are multiple values meeting that requirement? </p>
<pre><code>mode([5, 1, 1, 5])
#I'm guessing this should return [1, 5] if sorted...
</code></pre>
<p>How would you handle it? Thanks for any help on that!</p>
<p>Here is my code:</p>
<pre><code>def mode(numlist):

    mylist = numlist
    dic = {}

    for num in mylist:
        if num in dic:
            dic[num] += 1
        else:
            dic[num] = 1
     # try to get the max value and return them in a set form like [1, 0]    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>  which returns a <code>dict</code> like object where elements are stored as dictionary keys and their counts are stored as dictionary values.</p>
<pre><code>from collections import Counter

def mode(my_list):
    ct = Counter(my_list)
    max_value = max(ct.values())
    return sorted(key for key, value in ct.items() if value == max_value)
</code></pre>
<p>Demo:</p>
<pre><code>In [46]: mode([5, 1, 1, 5])
Out[46]: [1, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sticking to your current implementation, you can sort the values of your dictionary, then just get all the keys of your dictionary that match that maximum value: </p>
<p>So, you can do something like this at the end of your method: </p>
<pre><code>vals = max(dic.values())
return [k for k, v in dic.items() if v == vals]
</code></pre>
<p>vals will hold the maximum value to indicate that is the value of the repeating item. Then we create a list comprehension that goes through the dictionary to get all keys that match that value. </p>
<p>Putting it together:</p>
<pre><code>def mode(numlist):

    mylist = numlist
    dic = {}

    for num in mylist:
        if num in dic:
            dic[num] += 1
        else:
            dic[num] = 1

    vals = max(dic.values())
    return [k for k, v in dic.items() if v == vals]


print(mode([5, 1, 1, 5]))
</code></pre>
<p>Output:</p>
<pre><code>[1, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

def mode(num_list):
    max_value = float('-inf')
    maxes = None
    for key, value in Counter(num_list).items():
        if value == max_value:
            maxes.add(key)
        elif value &gt; max_value:
            max_value = value
            maxes = {key}

    return maxes


print(mode([1, 3, 3, 1, 2]))
</code></pre>
<p>If order matters, use <code>[key]</code> instead of <code>{key}</code> and <code>maxes.append(key)</code> instead of <code>maxes.add(key)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well the one-liner you can use would be</p>
<pre><code>def mode(num_list):
    return max(num_list, key = num_list.count)
</code></pre>
<p>But as you said it doesn't work for multiple numbers with the same number of occurrences.</p>
<p>I prefer continuing to work with the list instead of a dict. The functions below will return a list containing all numbers with the highest occurrence . </p>
<pre><code>def mode(num_list):

    # Make list of tuples with their values and no. occurrences
    # num_list = [5, 1, 1, 5, 5]
    # max_ocur = [(1, 2), (5, 3)]
    max_ocur = [(i, num_list.count(i)) for i in num_list]

    # Set to remove duplicates
    max_ocur = set(max_ocur)

    # Find the max number of occurrences
    m = max(max_ocur, key = lambda x: x[1])[1]

    # Get list of all numbers in max_ocur that have highest occurrence
    modes = [i for i, ocur in max_ocur if ocur == m]

    modes.sort() # Sort if you want

    return modes
</code></pre>
<p>Or you can use the short version. I'm not sure which I prefer, I did the above one because it felt inefficient using <code>list.count</code> twice. But I'm not sure which one is more efficient. </p>
<pre><code>def mode(num_list):

    max_ocur = max([num_list.count(i) for i in num_list])

    return [i for i in set(num_list) if num_list.count(i) == max_ocur]
</code></pre>
<p>If in the even you only have one number in the list having the highest number of occurrences and you would rather the number itself being returned instead of a list with just one number you can do</p>
<pre><code>return modes if len(modes) &gt; 1 else modes[0] 
</code></pre>
</div>
<span class="comment-copy">So if you have multiple maximums you want to return multiple maximums in a list? Like 6 and 7 both appearing the same amount of maximum times?</span>
<span class="comment-copy">@idjaw Yep that's right</span>
<span class="comment-copy">Can you add a sample input and desire output to your question?</span>
<span class="comment-copy">@Kasramvd there is one up there. The mode desires a [1, 5] output I checked the requirement. Sorry for the confusion.</span>
