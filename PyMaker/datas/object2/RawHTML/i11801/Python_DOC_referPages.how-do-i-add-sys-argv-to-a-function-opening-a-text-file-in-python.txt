<div class="post-text" itemprop="text">
<p>I need to use sys.argv to check for an argument from the command line, which would be the filename in my case. My code is as follows. I'm not allowed to import argparse, only allowed to use sys. I know I'm doing something wrong here. Appreciate any help. </p>
<pre><code>def get_inputfile_object( ):
    '''
    Check the command line for an argument.  If one was there, use it as the
    filename.  Otherwise, use DEFAULT_INPUT_FILENAME.  Open the file.

    If file is successfully opened:
        print MSG_OPENING_FILE
        Return: a file object for that file

    If the file cannot be opened:
        print MSG_ERROR_OPENNING_FILE
        Return: True
    '''
    if sys.argv &gt; 1:
        pass
    else:
        input_filename = DEFAULT_INPUT_FILENAME

    input_filename = DEFAULT_INPUT_FILENAME
    if os.path.isfile(input_filename) and os.access(input_filename,os.R_OK):
        #Prints the opening file message, and the name of the file
        print (MSG_OPENING_FILE,input_filename)
        return open(input_filename,'r')
    else:
        print (MSG_ERROR_OPENING_FILE)
        return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> is a list of arguments.</p>
<p>You need to check the length of the list:</p>
<pre><code>if len(sys.argv) &gt; 1:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should check out <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse</a>.</p>
<blockquote>
<p>The argparse module also automatically generates help and usage
  messages and issues errors when users give the program invalid
  arguments.</p>
</blockquote>
<p>Haven't tested it, but you can try something similar to this:</p>
<pre><code>import argparse

# setup the parser
parser = argparse.ArgumentParser(description='Describe script')

# add positional argument
parser.add_argument('filename', type=str, help='filename description')

# parse the args
args = parser.parse_args()
print(args.filename)
</code></pre>
</div>
<span class="comment-copy"><code>if len(sys.argv) &gt; 1:</code></span>
<span class="comment-copy">also check out argparse: <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a></span>
<span class="comment-copy">You might want to look at <a href="https://docs.python.org/2/library/fileinput.html" rel="nofollow noreferrer">fileinput</a> that takes care of most of this monkey business for you.</span>
<span class="comment-copy">You're never accessing the value of <code>sys.argv</code>, and even if you did, you're unconditionally overriding the variable with the default value anyway.</span>
<span class="comment-copy">Please do not deface your post by removing the code. This is forbidden by site policy.</span>
<span class="comment-copy">On Python 3, this sort of obvious error would raise an exception, but sadly, on Python 2, the fallback comparison kicks in, and the fallback comparison silently reports all numerics to be less than all non-numerics  (aside from <code>None</code>). It's dumb.</span>
<span class="comment-copy">@ShadowRanger Which is why the fixed it in 3! =D (Seriously. A number of other languages/runtimes would never fix something like this.)</span>
<span class="comment-copy">argparse is <i>far</i> inferior to some of the 3rd party options out there. doctopt and click are some good options.</span>
