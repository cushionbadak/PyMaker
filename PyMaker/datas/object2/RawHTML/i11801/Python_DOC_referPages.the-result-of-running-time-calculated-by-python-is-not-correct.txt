<div class="post-text" itemprop="text">
<p>I trying to use time to record running time of this function, but i think the result is not correct, sometimes it will only cost 0s and the result is not stable.<a href="http://i.stack.imgur.com/kyYpb.png" rel="nofollow">The first two result is for N=10000ï¼Œ the third one is N=30000</a></p>
<pre><code>import time
def sumOfN(n):
    start=time.time()
    theSum=0
    for i in range(1,n+1):
        theSum=theSum+i
    end=time.time()
    return theSum,end-start
for i in range(5):
    print("Sum is %d required %10.7f seconds"%sumOfN(300000))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/time.html#time.time" rel="nofollow">the Python manual</a>:</p>
<blockquote>
<h2><code>time.time()</code></h2>
<p>Return the time in seconds since the epoch as a floating
  point number. Note that even though the time is always returned as a
  floating point number, <strong>not all systems provide time with a better
  precision than 1 second</strong>. While this function normally returns
  non-decreasing values, it can return a lower value than a previous
  call if the system clock has been set back between the two calls.</p>
</blockquote>
<p><sub><sup>(emphasis mine)</sup></sub></p>
<p>It seems the timer resolution of your system is not enough to correctly measure the elapsed time of the function.  It actually looks like the precision is about 0.016, about 1/60 of a second, which is typical of Windows systems.</p>
<p>your approach has the following two problems:</p>
<ul>
<li><code>time.time()</code> returns the current time (as in time of day), which can vary by auto-adjusting processes such as NTP or if someone modifies it (either by hand or via code).  <em>Use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="nofollow"><code>time.perf_counter()</code></a> (or <code>time.clock()</code> in Python &lt;3.3) instead</em>.</li>
<li>You are measuring <em>one</em> execution of the function.  This can give you very wrong results due to the non-deterministic nature of garbage collection, bytecode optimization, and other quirks of languages like Python.  You should look into the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow"><code>timeit</code></a> module instead.</li>
</ul>
</div>
<span class="comment-copy">look into the <code>timeit</code> module</span>
<span class="comment-copy">Your code looks fine to me... I don't think the code shown could ever cause that bug that you are seeing.</span>
<span class="comment-copy">I also don't think the code is wrong. But the result is wired.</span>
