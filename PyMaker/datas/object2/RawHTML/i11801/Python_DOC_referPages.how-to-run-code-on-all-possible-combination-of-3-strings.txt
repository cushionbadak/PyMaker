<div class="post-text" itemprop="text">
<p>I have 3 strings:</p>
<pre><code>strand1 = "something"
strand2 = "something else"
strand3 = "something else again"
</code></pre>
<p>I want to run a few functions on each possible arrangement of those 3 strings, e.g.:</p>
<p>Case 1:</p>
<pre><code>strand1 = "something else again"
strand2 = "something"
strand3 = "something else"
</code></pre>
<p>Case 2</p>
<pre><code>strand1 = "something else"
strand2 = "something else again"
strand3 = "something"
</code></pre>
<p>etc ...</p>
<p>How would I do that elegantly in Python? I considered putting the strings in an array and using <code>itertools</code> but it seems to cut the strings at each iteration.</p>
<p>Another thing to consider is that the strings are stored in an object. For example I call <code>strand1</code> by typing</p>
<pre><code>strand1.aa
</code></pre>
<p>Thanks for any help, I hope that the question is clear.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools</code> is the right place to look. Have you tried <code>itertools.permutations</code>?</p>
<p>Check out the <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow">documentation for it</a>.</p>
<p>Something on the ways of <code>itertools.permutations(iterable)</code> will give you a generator of permutations, then you could use a for loop to process each permutation.</p>
<pre><code>from itertools import permutations

# Any iterable will do. I am using a tuple.
for permutation in permutations(('a', 'b', 'c')):  # Use your strings
    print(permutation)  # Change print() to whatever you need to do with the permutation
</code></pre>
<p>This sample produces</p>
<pre><code>('a', 'b', 'c')
('a', 'c', 'b')
('b', 'a', 'c')
('b', 'c', 'a')
('c', 'a', 'b')
('c', 'b', 'a')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <a href="https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters"><code>itertools.permutations</code></a>. If function has multiple argument, you may pass them via <a href="https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters">splat operator</a>.</p>
<pre><code>import itertools

def f(a, b, c):
    print(a, b, c)

# o = get_my_object()
# seq = [o.a, o.b, o.c]
seq = ['s1', 's2', 's3']
for perm in itertools.permutations(seq):
    f(*perm)
</code></pre>
<p>Output:</p>
<pre><code>s1 s2 s3
s1 s3 s2
s2 s1 s3
s2 s3 s1
s3 s1 s2
s3 s2 s1
</code></pre>
</div>
<span class="comment-copy">Look at the itertools library, try to do it by yourself</span>
<span class="comment-copy">What do you mean by the strings were cut at each iteration?</span>
<span class="comment-copy">Should've posted a sample code demonstrating the application of your answer .. just to be more complete..</span>
<span class="comment-copy">@IronFist I agree. If I don't solve his problem explicitly there is no issue with it. There it is. I've passed the permutations as a tuple as we already have an example of the star operator.</span>
<span class="comment-copy">What's the purpose of function <code>f(a, b, c)</code> ?...Couldn't you just in the <code>for</code> loop do <code>print(*perm)</code> ?</span>
<span class="comment-copy">OP said that he want to call some function on all permutations. I wanted explicit user function instead of builtin to show how splat operator works.</span>
<span class="comment-copy">LOUD AND CLEAR .. :)</span>
