<div class="post-text" itemprop="text">
<p>I am using Python 3.5 but this book is teaching 2.7 (beats me why in 2016)</p>
<p>Learning Predictive Analytics with Python by Ashish Kumar Feb 15, 2016</p>
<pre><code>    &gt;&gt;&gt; data=open(filename,'r')
    &gt;&gt;&gt; cols=data.next().strip().split(',')
    Traceback (most recent call last):
      File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
        cols=data.next().strip().split(',')
    AttributeError: '_io.TextIOWrapper' object has no attribute 'next'
    &gt;&gt;&gt; 
</code></pre>
<p>I have read this 
<a href="https://stackoverflow.com/questions/26967509/attributeerror-io-textiowrapper-object-has-no-attribute-next-python">AttributeError: '_io.TextIOWrapper' object has no attribute 'next' python</a>
and I still don't know how to get it to work in Python 3.5 GUI shell.</p>
<p>So far, I understand for Python 3.5 I have to use <code>.__next__</code>; for Python 2.7  <code>.next</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#next" rel="noreferrer"><code>next()</code> <em>function</em></a> on iterators:</p>
<pre><code>cols = next(data).strip().split(',')
</code></pre>
<p>This is compatible across Python versions.</p>
<p>You could indeed swap <code>.next()</code> for <code>.__next__()</code>, but it is better to use the standard function here, just as you'd use <code>len(obj)</code> instead of calling <code>obj.__len__()</code>. Double-underscore methods are <em>hooks</em> used by Python, your code should use the standard APIs that may or may not call those hooks. This is especially true here, where the hook name changed.</p>
</div>
<span class="comment-copy">In addition, the api calls are guaranteed to work even if the underlying methods (like <code>__next__()</code>) are changed.</span>
<span class="comment-copy">Thanks a million. It works . Martin. Don't you ever sleep ? :)</span>
<span class="comment-copy">@goughgough I wonder, would I dream of electric sheep?</span>
<span class="comment-copy">@MartijnPieters Just a question; when does one needs to use these <i>hook methods</i> ?</span>
<span class="comment-copy">@IronFist: when you are trying to use <i>just</i> the hook effect; so when you are implementing <code>__ne__</code> you can call <code>self.__eq__</code> to avoid having Python test the inverse too if your own <code>__eq__</code> returns <code>NotImplemented</code>. Or when you want to avoid infinite recursion in <code>__getattribute__</code> you'd use <code>super().__getattribute__</code>, etc. So you call the hook method directly when you must, otherwise use the standard path.</span>
