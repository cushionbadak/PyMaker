<div class="post-text" itemprop="text">
<p>My question is more theoretical than practical, I've found more answers that explains <strong>how</strong> but not <strong>why</strong> should we use a list in a <code>subprocess.Popen</code> call.</p>
<p>For example as is known:</p>
<pre><code>Python 2.7.10 (default, Oct 14 2015, 16:09:02)
[GCC 5.2.1 20151010] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; cmd = subprocess.Popen(["python", "-V"], stdout=subprocess.PIPE)
Python 2.7.10
</code></pre>
<p>Then I was messing around in UNIX and found something interesting:</p>
<pre><code>mvarge@ubuntu:~$ strace -f python -V 2&gt;&amp;1
execve("/usr/bin/python", ["python", "-V"], [/* 29 vars */]) = 0
</code></pre>
<p>Probably both <code>execve</code> and the list model that <code>subprocess</code> use are someway related, but can anyone give a good explanation for this?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>The underlying C-level representation is a <code>*char []</code> array.  Representing this as a list in Python is just a very natural and transparent mapping.</p>
<p>You can use a string instead of a list with <code>shell=True</code>; the shell is then responsible for parsing the command line into a <code>* char []</code> array.  However, the shell adds a number of pesky complexities; see the many questions for <a href="//stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" rel="nofollow">why you want to avoid <code>shell=True</code></a> for a detailed explanation.</p>
<p>The <a href="http://www.gnu.org/s/libc/manual/html_node/Program-Arguments.html" rel="nofollow">command line arguments <code>argv</code> and the environment <code>envp</code></a> are just two of many OS-level structures which are essentially a null-terminated arrays of strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <em>process</em> is an OS level abstraction — to create a process, you have to use OS API that dictates what you should use. <strong>It is not necessary to use a list</strong> e.g., a string (<code>lpCommandLine</code>) is the native interface <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" rel="nofollow">on Windows (<code>CreateProcess()</code>)</a>. <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html" rel="nofollow">POSIX uses execv()</a> and therefore the native interface is a sequence of arguments (<code>argv</code>). Naturally, <code>subprocess</code> Python module uses these interfaces to run external commands (create new processes).</p>
<p>The technical (uninsteresting) answer is that in <em>"why we must"</em>, the "must" part is not correct as Windows demonstrates.</p>
<p>To understand "why it <em>is</em>", you could ask the creators of <code>CreateProcess()</code>, <code>execv()</code> functions.</p>
<p>To understand "why we <em>should</em>" use a list, look at the table of contents for Unix (list) and Windows (string): <a href="http://daviddeley.com/autohotkey/parameters/parameters.htm" rel="nofollow">How Command Line Parameters Are Parsed</a> — the task that should be simple is complicated on Windows.</p>
<p>The main difference is that <em>on POSIX the caller</em> is responsible for splitting a command line into separate parameters. While <em>on Windows the command itself parses its parameters</em>. Different programs may and do use different algorithms to parse the parameters. <a href="https://docs.python.org/3/library/subprocess.html#converting-an-argument-sequence-to-a-string-on-windows" rel="nofollow"><code>subprocess</code> module uses MS C runtime rules (<code>subprocess.list2cmdline()</code>), to combine <code>args</code> list into the command line</a>. It is much harder for a programmer to understand how the parameters might be parsed on Windows.</p>
</div>
<span class="comment-copy">It's convenient, for one thing.  When you have an argument that contains a space and two different kinds of quotation marks, it requires quite a bit to be able to put it in a string in such a way that Bash will treat it like one argument.  When it is in a list, <code>Popen</code> will take care of that for you.</span>
<span class="comment-copy">As an aside, you should not normally use <code>subprocess.Popen()</code> - it happens to work in some cases on some platforms, but in the general case, it only <i>starts</i> a subprocess, and you need several additional interactions to then properly run and shutdown the process. The wrappers in the <code>subprocess</code> library take care of this, and shield you from the underlying complexities - only when they are inadequate for your needs should you turn to the underlying workhorse functions. In this case, <code>subprocess.call()</code> would be the tool of choice.</span>
