<div class="post-text" itemprop="text">
<p>I need a way to get the value of a variable that was defined in a function outside of that function. It's not necessary but would make my code so much easier to follow. Haven't found any solid answers to this yet.</p>
<pre><code>def pizzais():
  pizza = "yummy"

pizzais()
print(pizza)
</code></pre>
<p>this will return an error saying that pizza is not defined. Is there any hack to get around this.</p>
<p>Too better understand my situation here is my code I'm applying it too.</p>
<pre><code>def questions():
    user = input("What is your username?") #username
    race = input("What is your race? (orc, human, elf, goblin)") #race

#won't move on if the player fills an answer that is not an option
    if race == "orc" or race == "human" or race == "elf" or race == "goblin":
        pClass = input("What is your class? (archer, warrior, rogue or mage)")


    else:
        while race != "orc" and race != "human" and race != "goblin" and race != "elf":
            race = input("What is your race? (orc, human, elf, goblin)")
            if race == "orc" or race == "human" or race == "elf" or race == "goblin":
                pClass = input("What is your class? (archer, warrior, rogue or mage)")

#won't move on if the player fills an answer that is not an option               
    if pClass == "archer" or pClass == "warrior" or pClass == "rogue" or pClass == "mage":
            correct = input("So you are " + user + ", the " + race + " " + pClass + "? (yes or no)")

    else:
        while pClass != "archer" and pClass != "warrior" and pClass != "rogue" and pClass != "mage":
            pClass = input("What is your class? (archer, warrior, rogue or mage)")
            if pClass == "archer" or pClass == "warrior" or pClass == "rogue" or pClass == "mage":
                correct = input("So you are " + user + ", the " + race + " " + pClass + "? (yes or no)")

    def correct_def():
        correct = input("So you are " + user + ", the " + race + " " + pClass + "? (yes or no)")
        if correct == "yes": #if player likes their choices the game will begin
            print("Enjoy the game " + user + "!")

        elif correct == "no": #if player doesn't like their choices all questions are asked again
            reAsk = input("What would you like to change?(username, race, class or all)")

        else:
            while correct != "yes" and correct != "no":
                correct = input("So you are " + user + ", the " + race + " " + pClass + "? (yes or no)")
            if correct == "yes":
                print("Enjoy the game " + user + "!")

            elif correct == "no":
                questions()

    if correct == "yes": #if player likes their choices the game will begin
        print("Enjoy the game " + user + "!")

    elif correct == "no": #if player doesn't like their choices all questions are asked again
        reAsk = input("What would you like to change?(username, race, class or all)")

        if reAsk == "username":
            user = input("What is your username?")
            correct_def()

        elif reAsk == "race":
            race = input("What is your race? (orc, human, elf, goblin)")
            while race != "orc" and race != "human" and race != "goblin" and race != "elf":
                race = input("What is your race? (orc, human, elf, goblin)")
            correct_def()

        elif reAsk == "class":
            pClass = input("What is your class? (archer, warrior, rogue or mage)")
            while pClass != "archer" and pClass != "warrior" and pClass != "rogue" and pClass != "mage":
                pClass = input("What is your class? (archer, warrior, rogue or mage)")
            correct_def()

        elif reAsk == "all":
            questions()

        else:
            while reAsk != "username" and reAsk != "race" and reAsk != "class" and reAsk != "all":
                reAsk = input("What would you like to change?(username, race, class or all)")
                if reAsk == "username":
                    user = input("What is your username?")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "race":
                    race = input("What is your race? (orc, human, elf, goblin)")
                    while race != "orc" and race != "human" and race != "goblin" and race != "elf":
                        race = input("What is your race? (orc, human, elf, goblin)")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "class":
                    pClass = input("What is your class? (archer, warrior, rogue or mage)")
                    while pClass != "archer" and pClass != "warrior" and pClass != "rogue" and pClass != "mage":
                        pClass = input("What is your class? (archer, warrior, rogue or mage)")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "all":
                    questions()

#won't move on if the player fills an answer that is not an option 
    else:
        while correct != "yes" and correct != "no":
            correct = input("So you are " + user + ", the " + race + " " + pClass + "? (yes or no)")
        if correct == "yes":
            print("Enjoy the game " + user + "!")

        elif correct == "no":
            reAsk = input("What would you like to change?(username, race, class or all)")

        if reAsk == "username":
            user = input("What is your username?")
            correct_def()

        elif reAsk == "race":
            race = input("What is your race? (orc, human, elf, goblin)")
            while race != "orc" and race != "human" and race != "goblin" and race != "elf":
                race = input("What is your race? (orc, human, elf, goblin)")
            correct_def()

        elif reAsk == "class":
            pClass = input("What is your class? (archer, warrior, rogue or mage)")
            while pClass != "archer" and pClass != "warrior" and pClass != "rogue" and pClass != "mage":
                pClass = input("What is your class? (archer, warrior, rogue or mage)")
            correct_def()

        elif reAsk == "all":
            questions()

        else:
            while reAsk != "username" and reAsk != "race" and reAsk != "class" and reAsk != "all":
                reAsk = input("What would you like to change?(username, race, class or all)")
                if reAsk == "username":
                    user = input("What is your username?")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "race":
                    race = input("What is your race? (orc, human, elf, goblin)")
                    while race != "orc" and race != "human" and race != "goblin" and race != "elf":
                        race = input("What is your race? (orc, human, elf, goblin)")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "class":
                    pClass = input("What is your class? (archer, warrior, rogue or mage)")
                    while pClass != "archer" and pClass != "warrior" and pClass != "rogue" and pClass != "mage":
                        pClass = input("What is your class? (archer, warrior, rogue or mage)")
                    print("Enjoy the game " + user + "!")

                elif reAsk == "all":
                    questions()
questions()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should probably read through the <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow">Tutorial section on functions</a> - this is just about the most basic thing you use functions <em>for</em>. </p>
<p>Your code sample is a giant mess, but here's a quick example of what you seem to be trying to do:</p>
<pre><code>def ask_race():
    race = None
    options = ['orc', 'human', 'elf', 'goblin']
    while race not in options:
        race = input('What is your race? ({})'.format(','.join(options)))
    return race
</code></pre>
<p>Repeat for your other options, then you can do something like:</p>
<pre><code>def questions():
    race = ask_race()
    character_class = ask_class()
</code></pre>
<p>There's much more cleanup that could be done, but this should get you started on a somewhat more sane structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two ways to do this, one recommended and one not so much. You <strong>should not</strong> mess around with global variables unless you know what you're doing. What you are trying to do should 100% use a return. But to be inclusive I put it in because it <em>could</em> theoretically accomplish what you're trying to do. </p>
<p><strong>Best Practice: Using A Return</strong></p>
<pre><code>def pizzais():
  return "yummy"

pizza = pizzais()
print(pizza)
</code></pre>
<p><strong>Bad Idea: Using Global Variables</strong></p>
<pre><code>pizza = ""

def pizzais():
  global pizza
  pizza = "yummy"


pizzais()

print(pizza)
</code></pre>
<p><strong>Returning Multiple Variables</strong></p>
<pre><code>def get_three_variables():
    var1 = "text1"
    var2 = "text2"
    var3 = "text3"
    return (var1, var2, var3)


response = get_three_variables()
print(response)
#this prints: ('text1', 'text2', 'text3')

print(response[0])
#this prints text1

print(response[1])
#this prints text2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Return multiple values in a tuple <code>return x, y, z</code> and unpack the return value like <code>x, y, z = func()</code>.</li>
<li>You can use global variables. While setting values inside a function first declare <code>global x</code> and then <code>x = something</code>. But <strong>global variables are best avoided.</strong></li>
<li>If you find yourself changing global state a lot, using a <code>class</code> is more appropriate.</li>
<li>You can use <strong>closures</strong> to maintain state. But that needs a different design and you should do it if you are comfortable with higher order functions. Closures are in principle lightweight and much faster than classes(<em>Beazly</em>). </li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to print <code>pizza</code> but what is pizza? You haven't defined it anywhere except for in your function and you're not returning anything. It's a <em>local</em> variable whereas trying to print pizza outside of the scope of your function is looking for a <em>global</em> variable. You can check out this <a href="https://stackoverflow.com/questions/13091357/python-global-local-variables">question</a> for local vs. global variables. You could set <code>pizza = pizzais()</code> and then do <code>print(pizza)</code> if you set <code>return "yummy"</code> at the end of your function. Without using <code>return</code> at the end of your function it will return <code>None</code> by default.</p>
</div>
<span class="comment-copy">Why would you "hack"? This is what <code>return</code> is for.</span>
<span class="comment-copy">what part in the wall of code are we supposed to be looking at to better understand your question? Where is your issue?</span>
<span class="comment-copy">Basically I want to be able to use race, pClass, username outside of questions()</span>
<span class="comment-copy">@Shniper I created a <a href="https://chat.stackoverflow.com/rooms/108583/chat-with-shniper">chat room</a> if you want to ask more questions.</span>
<span class="comment-copy">yeah i know it's a mess, I taught myself js and need to create a python game for one of my classes with very limited knowledge gained from the professor. So most of it is me playing around with how to turn js into python. Sorry</span>
<span class="comment-copy">The second snippet is not valid since <code>class</code> is not a valid variable name</span>
<span class="comment-copy">Oh derp, fixed.</span>
<span class="comment-copy">so if i have several variables in a function and return each variable in the function how can I get the value of each of those variables outside of the function?</span>
<span class="comment-copy">return a tuple of multiple variables</span>
<span class="comment-copy">Technically, <code>global</code> is the opposite - it's using a variable defined <i>outside</i> the function inside it.</span>
<span class="comment-copy">Edited with code I'm trying to apply this to</span>
<span class="comment-copy">Okay I think I understand your problem. What you really should do is create a character class which can hold all this information. Then in your questions function you create a new character and return it in the function.</span>
