<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/17909294/python-argparse-mutual-exclusive-group">Python argparse mutual exclusive group</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have a single Python file which includes unit tests in the source code. It works like this:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--test', action='store_true', help="Run unit tests and return.")

args = parser.parse_args()

if args.test:
    testsuite = unittest.TestLoader().loadTestsFromTestCase(SanitizeTestCase)
    unittest.TextTestRunner(verbosity=1).run(testsuite)
</code></pre>
<p>If <code>args.test</code> is false, the program runs as expected. I don't want to have to make this into an entire <code>setuptools</code> project, it's a pretty simple script with some unit tests to evaluate that it does what it's supposed to.</p>
<p>I now find myself needing to parse other arguments, and that's where things start to fall apart. <code>--test</code> is a mutually exclusive parameter and all of the other parameters don't apply if <code>--test</code> is passed.</p>
<p>Is there a way to have mutually-exclusive argument groups in argparse?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a <code>mutually exclusive group</code> mechanism, but all the arguments in that group are mutually exclusive.  You can't say, <code>--test</code> xor any of the other others.</p>
<p>But such a group doesn't do anything profound.  It adds some markings to the <code>usage</code> line (try it), and it complains when your user (yourself?) violates the exclusivity.</p>
<p>You can do the same things yourself, and fine tune them.  You can give the <code>parser</code> a custom <code>usage</code> line.  And after parsing you can choose to ignore conflicting values, or you can choose to raise your own error message (<code>parser.error('dumb user, cant you read ...?')</code>).  You could, for example, ignore all the other arguments, regardless of value, if this <code>args.test</code> is <code>True</code>.</p>
</div>
<span class="comment-copy">Have you looked at <a href="https://docs.python.org/3/library/argparse.html#mutual-exclusion" rel="nofollow noreferrer">mutually exclusive groups</a>?</span>
<span class="comment-copy"><code>setuptools</code> projects <i>do</i> have the advantage that they can be installed (and uninstalled) by pip.</span>
<span class="comment-copy">Are these other arguments mutually exclusive to each other?</span>
