<div class="post-text" itemprop="text">
<p>Let's say I receive an arbitrary datetime object in a request, like this, which could be coming from any possible timezone - I don't know which one.
For the sake of example, pretend it comes from the East Coast</p>
<pre><code>import pytz
from colander import iso8601
...
    ests1 = iso8601.parse_date('2016-04-01T00:00:00.0000-04:00')
</code></pre>
<p>pretend ests1 is the object that comes in</p>
<p>Using pytz, I can find out a bit about it's timezone</p>
<pre><code>    etz = ests1.timetz()  # 00:00:00-04:00
    etzi = ests1.tzinfo   # &lt;FixedOffset '-04:00' datetime.timedelta(-1, 72000)&gt;
    etzn = ests1.tzname() # '-04:00'  # EST
    edst = ests1.dst()    #  '0:00:00'
</code></pre>
<p>Note that no matter what date ests1 is - dst() always seems to return the same value</p>
<p>I would like to do something like this:</p>
<pre><code>    psts1 = pytz.timezone(etzn
                     ).localize(dtime.datetime.fromtimestamp(ests1)
                     ).astimezone(pytz.timezone('US/Pacific'))
</code></pre>
<p>but that just results in</p>
<pre><code>UnknownTimeZoneError: '-04:00'
</code></pre>
<p>I have also tried this:</p>
<pre><code>def convert_dt_to_pstz(dt):
    pstoffset = -25200 # -7 * 60 * 60   - but what about DST?  how do we tell which offset to use? -8 or -7
    return dt.astimezone(tzoffset(None,pstoffset)) # convert to PST
</code></pre>
<p>But the problem with that is I don't know how to tell if the date needs to be adjusted for daylight savings time.</p>
<p>I also tried this:</p>
<pre><code>    utc_date = ests1.astimezone(pytz.utc)   # 2016-04-01T04:00:00+00:00
    ptz = pytz.timezone('US/Pacific')
    new_date = utc_date.replace(tzinfo=ptz) # 2016-04-01T04:00:00-07:53
</code></pre>
<p>But look at the strange result for new_date:  -07:53
??</p>
<p>Please note that I cannot use any information corresponding to "now" or the location of the server as it could be anywhere</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert a timezone-aware <code>datetime</code> object into a different timezone, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow">use <code>datetime.astimezone()</code> method</a>:</p>
<pre><code>pacific_time = ests1.astimezone(pytz.timezone('US/Pacific'))
</code></pre>
<p>In general, <a href="http://pytz.sourceforge.net/#localized-times-and-date-arithmetic" rel="nofollow"><code>pytz</code> docs</a> recommend to call <code>pytz.timezone('US/Pacific').normalize()</code> on the result but you don't need it here because <code>ests1</code> timezone has a fixed utc offset.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I got it right this time:</p>
<pre><code>from datetime import datetime as dtime
import pytz
from colander import iso8601

ests1 = iso8601.parse_date('2016-04-01T00:00:00.0000-04:00')
epoch = dtime(1970, 1, 1, tzinfo=pytz.UTC)          # 1970-01-01T00:00:00+00:00
ept = (ests1 - epoch).total_seconds()               # 1459483200.0

utc_date = dtime.fromtimestamp(ept, tz=pytz.UTC)    # 2016-04-01T04:00:00+00:00
ptz = pytz.timezone('US/Pacific')
pst_date = dtime.fromtimestamp(ept, tz=ptz)         # 2016-03-31T21:00:00-07:00

ests2 = iso8601.parse_date('2016-02-01T00:00:00.0000-04:00')
ept2 = (ests2 - epoch).total_seconds()              # 1454299200.00

utc_date2 = dtime.fromtimestamp(ept2, tz=pytz.UTC)  # 2016-02-01T04:00:00+00:00
pst_date2 = dtime.fromtimestamp(ept2, tz=ptz)       # 2016-01-31T20:00:00-08:00
</code></pre>
<p>so, it seems to be as simple as</p>
<pre><code>def convert_to_tz(dt,tz_new):
   seconds = (dt - epoch).total_seconds()
   return dtime.fromtimestamp(seconds, tz=tz_new)
</code></pre>
</div>
<span class="comment-copy">Note that a pure numeric offset gives you no information about whether daylight saving time is in effect or not.  You have to know more information about how the time was generated to be able to deduce that <code>-04:00</code> is from the US/Eastern time zone rather than, say, from Brazil.  However, that's a detail â€” I think your question is interesting.  One part of the answer is 'convert to UTC from source time zone; convert to target time zone from UTC'.  There are then issues with how to do those conversions precisely.</span>
<span class="comment-copy">from iso8601 format you are not able to tell, it will say -0400 for EDT and -0500 for EST, but -0400 could be AMT as well</span>
<span class="comment-copy">@scope:  Well, there are ways to determine Daylight Savings Time - but it's complex and I wonder if there is something out there already built that will do the job.  I haven't found it yet though</span>
<span class="comment-copy">@slashdottir, you can from timezone (with pytz), but not from UTC offset</span>
<span class="comment-copy">that does seem to work, thank you</span>
