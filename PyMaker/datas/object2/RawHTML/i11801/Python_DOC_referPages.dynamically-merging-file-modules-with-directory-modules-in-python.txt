<div class="post-text" itemprop="text">
<p>Given a directory with the following structure:</p>
<pre><code>├── foo
│   ├── bar
│   │   └── baz.py
│   └── bar.py
└── foo.py
</code></pre>
<p>and the following file contents:</p>
<h1>foo.py</h1>
<pre><code>class Foo:
    pass
</code></pre>
<h1>foo/bar.py</h1>
<pre><code>class Bar:
    pass
</code></pre>
<h1>foo/bar/baz.py</h1>
<pre><code>class Baz:
    pass
</code></pre>
<p>I would love to be able to do all of these things from some other file:</p>
<pre><code>from foo import Foo
from foo.bar import Bar
from foo.bar.baz import Baz
</code></pre>
<p>i.e. as if the definitions in each file were "merged" with the module definitions comprising the directory with the same name. How can I accomplish this in a dynamic way (whether involving <code>__init__.py</code> or otherwise) that won't require me to manually specify each path?</p>
<p>When I place empty <code>__init__.py</code> files in each directory and attempt to perform the above imports, I receive the following error:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 1, in &lt;module&gt;
    from foo import Foo
ImportError: cannot import name 'Foo'
</code></pre>
<p>which seems to me to suggest that the <code>foo.py</code> file has been overridden by the <code>foo</code> directory so that the definitions in <code>foo.py</code> are not visible.</p>
</div>
<div class="post-text" itemprop="text">
<p>try doing:</p>
<pre><code>import foo
print(foo.__file__)
</code></pre>
<p>with the folder structure you show I'd expect the result to be something like:</p>
<pre><code>.../foo.py
</code></pre>
<p>But when you add an <code>__init__.py</code> to the <code>foo</code> folder it would instead be:</p>
<pre><code>.../foo/__init__.py
</code></pre>
<p>with python packages you cannot actually import a folder so what ends up happening is that you import the <code>__init__.py</code> file from that folder instead of the <code>foo.py</code> so all you need to do is move the <code>foo.py</code> into the folder and <em>rename it</em> to <code>__init__.py</code> and you can then <code>import foo</code> or <code>from foo import Foo</code> the same way as you have it set up now.</p>
</div>
<span class="comment-copy">do you mean you wish you could <i>avoid</i> typing out the <code>foo.bar.baz</code>? in which case yes this is fairly easy with an <code>__init__.py</code> file.</span>
<span class="comment-copy">No, I'm fine with typing the imports exactly as shown. I've updated the question with the error I get when I attempt to do so.</span>
<span class="comment-copy">When I say "in a dynamic way that won't require me to manually specify each path", what I mean is that I wouldn't like to have to update the <code>__init__.py</code> files, for example, to include each new file/directory for which I want this behavior.</span>
<span class="comment-copy">Thanks -- this makes plenty of sense, and sounds much better than trying to manually merge two separate sets of definitions.</span>
<span class="comment-copy">I really wish <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">the documentation</a> described what the <code>__init__.py</code> was actually for instead of just "<b>init</b>.py can just be an empty file, but it can also execute initialization code for the package or set the _<i>all_</i> variable"  <b>the _<i>init_</i>.py file contains package level variables</b></span>
