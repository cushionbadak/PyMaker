<div class="post-text" itemprop="text">
<p>I'm about a couple weeks into learning Python.</p>
<p>With the guidance of user:' Lost' here on Stackoverflow I was able to figure out how to build a simple decoder program. He suggested a code and I changed a few things but what was important for me was that I understood what was happening. I understand 97% of this code except for the <code>except: i += 1</code> line in the <code>decode()</code>. As of now the code works, but I want to understand that line.</p>
<p>So basically this code unscrambles an encrypted word based on a specific criteria. You can enter this sample encrypted word to try it out. <code>"0C1gA2uiT3hj3S"</code> the answer should be <code>"CATS"</code></p>
<p>I tried replacing the except: <code>i += 1</code> with a Value Error because I have never seen a Try/Except conditional that just had an operational and no Error clause. But replacing it with Value Error created a never ending loop. </p>
<p>My question is what is the purpose of writing the except: <code>i += 1</code> as it is.</p>
<p>'Lost' if you're there could you answer this question. Sorry, about the old thread</p>
<pre><code>def unscramble(elist):

    answer = []
    i = 0

    while i &lt;= len(elist):

        try:
            if int(elist[i]) &gt; -1:
                i = i + int(elist[i]) + 1
                answer.append(elist[i])
        except:
            i += 1

    return "".join(answer)

def boom():
    eword  = input("paste in your encrypted message here &gt;&gt; ")
    elist = list(eword)
    answer = unscramble(elist)
    print (answer)

clear()
boom()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The purpose is to advance <code>i</code> by one, skipping the current character in case the cast to <code>int</code> fails, i.e. if <code>elist[i]</code> is not a digit.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of errors, than can occur inside the try-Block:</p>
<ol>
<li><code>i</code> is out of index, because the while loop runs one index to far.</li>
<li><code>elist[i]</code> is not a number, which leads to an ValueError</li>
<li><code>i = i + int(elist[i]) + 1</code> gets to big, and the next index access leads also to an IndexError</li>
</ol>
<p>In either way, the except-clause will ignore the next character. And the loop goes on.</p>
<p>An correct implementation wouldn't need any exceptions:</p>
<pre><code>def unscramble(elist):
    answer = []
    i = 0
    while i &lt; len(elist):
        i += int(elist[i]) + 1
        answer.append(elist[i])
        i += 1
    return "".join(answer)
</code></pre>
</div>
<span class="comment-copy">That isn't good code, I suggest you find something else to learn from.</span>
<span class="comment-copy">Start here: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">Thanks wonce! Everyone is really helpful here.</span>
<span class="comment-copy">I see Daniel! Thank you. Your code is much cleaner.</span>
<span class="comment-copy">The code is not equivalent however. The original code will unscramble "0CX1gA2uiT3hj3S" into "CATS", this one will throw an error.</span>
