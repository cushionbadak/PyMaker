<div class="post-text" itemprop="text">
<p>In order to transition to python 3, I am trying to understand writing python 2 and python 3 compatible codes. The following code is from <code>python-future.org</code> and illustrates a way to construct an iterator that would be compatible with both versions of python.</p>
<pre><code>from builtins import object

class Upper(object):
    def __init__(self, iterable):
        self._iter = iter(iterable)
    def __next__(self):      # Py3-style iterator interface
        return next(self._iter).upper()  # builtin next() function calls
    def __iter__(self):
        return self

itr = Upper('hello')
assert next(itr) == 'H'      # compatible style
assert list(itr) == list('ELLO')
</code></pre>
<p>The code runs fine in python 2, but to my surprise, if i remove the import statement then i get an error <code>TypeError: Upper object is not an iterator</code>. I often derive my custom classes from <code>object</code> but i have never imported it from builtins. Why does simply importing <code>object</code> change the behaviour of the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are (indirectly) importing from the <a href="http://python-future.org/reference.html#module-future.builtins" rel="noreferrer"><code>future.builtins</code> module</a>; it provides a <em>custom</em> <code>object</code> baseclass that adds forward-pointing special names.</p>
<p>In Python 2, iterators must have a <a href="https://docs.python.org/2/library/stdtypes.html#typeiter" rel="noreferrer"><code>next()</code> method</a> (as well as <code>__iter__</code>); this method was renamed to <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="noreferrer"><code>__next__</code> in Python 3</a>. By not using the <code>future.builtins.object</code> version you are simply missing the <code>next</code> -&gt; <code>__next__</code> alias provided in Python 2.</p>
<p>See the <a href="https://github.com/PythonCharmers/python-future/blob/master/src/future/types/newobject.py#L69-L72" rel="noreferrer">source code for <code>future.types.newobject.py</code></a>:</p>
<blockquote>
<pre><code>def next(self):
    if hasattr(self, '__next__'):
        return type(self).__next__(self)
    raise TypeError('newobject is not an iterator')
</code></pre>
</blockquote>
<p>Note that <code>builtins</code> will return standard built-in objects if you are running Python 3, the module only returns shims like these for Python 2.</p>
<p>You could simply add that same alias yourself:</p>
<pre><code>class Upper(object):
    def __init__(self, iterable):
        self._iter = iter(iterable)

    def __iter__(self):
        return self

    def __next__(self):      # Py3-style iterator interface
        return next(self._iter).upper()  # builtin next() function calls
    next = __next__          # Py2 alias
</code></pre>
</div>
<span class="comment-copy">Python 2 requires <code>builtins</code> to be pip-installed. It's designed for writing code compatible on Python 2 and 3.</span>
<span class="comment-copy">When <i>I</i> run this code in Python 2, I get <code>ImportError: No module named builtins</code>.  There <i>is</i> a module named <code>__builtin__</code>, and I can do <code>from __builtin__ import object</code>, but it makes no difference, I get the <code>TypeError: Upper object is not an iterator</code> either way.  Which makes sense, because in Python 2 you implement <code>next</code>, not <code>__next__</code>, to be an iterator.  I think the code sample you are reading is just wrong.  Could you please post a direct link to it?  Also please tell us exactly which versions of Python 2 and 3 you are testing with.</span>
<span class="comment-copy">So there is a difference between the <code>object</code> available in the default namespace and the one that is imported from <code>builtins</code>?</span>
<span class="comment-copy">@OrangeFlash81 Oh, <code>builtins</code> is another forward-compatibility bolt-on like <code>six</code>?  I'm not finding it on PyPI, where do you get it?</span>
<span class="comment-copy">@zwol <a href="http://python-future.org/compatible_idioms.html#custom-iterators" rel="nofollow noreferrer">python-future.org/compatible_idioms.html#custom-iterators</a></span>
<span class="comment-copy">Ah! I didn't realize the <code>builtins</code> module was from future.....</span>
