<div class="post-text" itemprop="text">
<p>I use <strong>py.test</strong> for testing. </p>
<p>In <strong>setup_class()</strong> I need to use <strong>tmpdir</strong> for my class constructor:</p>
<pre><code>class TestMyClass:
    def setup_class(self):
        self.t = MyClass(path=tmpdir)

    def test_test(self):
        assert True
</code></pre>
<p>And I have an error: </p>
<pre><code>NameError: name 'tmpdir' is not defined
</code></pre>
<p>I can't use <code>setup_class(self, tmpdir)</code>.</p>
<p>If I use this code:</p>
<pre><code>def test_needsfiles(tmpdir):
    print(tmpdir)
    assert 0
</code></pre>
<p>It's work, but I need <strong>tmpdir</strong> in my class constructor.</p>
<p>How to do this?</p>
<p>Thanks!</p>
<p><strong>UPD</strong></p>
<p>I try to do this:</p>
<pre><code>@pytest.yield_fixture()
def constructor(tmpdir):
    _t = MyClass(path=str(tmpdir))
    yield _t

class TestMyClass:

    def test_test(self, constructor):
        pass
</code></pre>
<p>But I can't use scopes in fixture:</p>
<p><code>
ScopeMismatch: You tried to access the 'function' scoped fixture 'tmpdir' with a 'module' scoped request object, involved factories
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I do this:</p>
<pre><code>class TestMyClass:
    @pytest.fixture(autouse=True)
    def setup(self, tmpdir):
        self.tmpdir = tmpdir.strpath
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use <code>@pytest.fixture(autouse=True)</code> as @santon suggested, but you want to create a fixture outside <code>TestMyClass</code> (like you write in the UPD part), you can try this:</p>
<pre><code>@pytest.fixture
def t(tmpdir):
    return MyClass(tmpdir)

class TestMyClass:
    def test_test(self, t):
        assert True
</code></pre>
<p>If you don't want to return anything in a fixture, but for example go to a temp directory, you can also do:</p>
<pre><code>@pytest.fixture
def t(tmpdir):
    os.chdir(str(tmpdir))

@pytest.mark.usefixtures("t")                                                               
class TestMyClass:
    def test_test(self):
        assert True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow"><code>tempfile</code></a> module to handle with temporary files and dirs. In setup you can create temp dir with <a href="https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp" rel="nofollow"><code>mkdtemp</code></a> and delete it at <code>tearDown</code> from test class.</p>
<pre><code>import shutil, tempfile
import unittest

class TestMyClass(unittest.TestCase):
    def setUp(self):
        self.tmp_dir = tempfile.mkdtemp()

    def tearDown(self):
        shutil.rmtree(self.tmp_dir)
</code></pre>
</div>
<span class="comment-copy">thx, but the question is about <b>py.test</b></span>
