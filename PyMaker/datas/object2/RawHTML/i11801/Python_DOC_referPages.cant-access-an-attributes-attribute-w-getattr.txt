<div class="post-text" itemprop="text">
<p>Based on </p>
<pre><code>In [65]: %paste
class Thing(object):
    def __init__(self, obj):
        self.legs = 4
        self.obj = obj
    def length(self):
        return 6

class Thing2(object):
    def __init__(self):
        self.arms = 2

## -- End pasted text --

In [66]: t = Thing2()

In [67]: x = Thing(t)

In [68]: x.obj.arms
Out[68]: 2

In [69]: %paste
def set_session_attribute(obj, attribute):
    if attribute.endswith('()'):
        attribute = attribute.replace('()', '')
        return getattr(obj, attribute)()
    else:
        return getattr(obj, attribute)

## -- End pasted text --

In [70]: x = set_session_attribute(x, 'obj.arms')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-70-f8cbad3c39e5&gt; in &lt;module&gt;()
----&gt; 1 x = set_session_attribute(x, 'obj.arms')

&lt;ipython-input-69-65b6efa81583&gt; in set_session_attribute(obj, attribute)
      4         return getattr(obj, attribute)()
      5     else:
----&gt; 6         return getattr(obj, attribute)

AttributeError: 'Thing' object has no attribute 'obj.arms'
</code></pre>
<p>How can I use <code>getattr</code> to find <code>arms</code> of the <code>t</code> object in one line? Thank you</p>
<pre><code>class Thing(object):
    def __init__(self, obj):
        self.legs = 4
        self.obj = obj

    def length(self):
        return 6

class Other(object):
    def __init__(self):
        self.arms = 2

    def length(self):
        return 5


def set_session_attribute(obj, attribute):
    attrs = attribute.split('.')
    for attribute in attrs:
        if attribute.endswith('()'):
            attribute = attribute.replace('()', '')
            obj = getattr(obj, attribute)()
        else:
            obj = getattr(obj, attribute)
    return obj

a = Other() # other has attr or function too
b = Thing(a) # thing has other obj, attr, and its own function

"""
In [80]: b.obj.length()
Out[80]: 5

In [81]: b.obj.arms
Out[81]: 2

In [83]: b.length()
Out[83]: 6

In [84]: b.legs
Out[84]: 4
"""

g = set_session_attribute(b, 'obj.length()')
h = set_session_attribute(b, 'obj.arms')
i = set_session_attribute(b, 'length()')
j = set_session_attribute(b, 'legs')
assert g == 5
assert h == 2
assert i == 6
assert j == 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>    def set_session_attribute(obj, attribute):
        if attribute.endswith('()'):
            attribute = attribute.replace('()', '')
        attrs = attribute.split('.')
        for attr in attrs:
            obj = getattr(obj, attr)
        return obj
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>x.obj.arms</code> would be equivalent to <code>getattr(getattr(x, 'obj'), 'arms')</code>.</p>
<pre><code>&gt;&gt;&gt; x = Thing(Thing2())
&gt;&gt;&gt; x.obj.arms
2
&gt;&gt;&gt; getattr(getattr(x, 'obj'), 'arms')
2
</code></pre>
<p>Or, starting from an instance of <code>Thing2</code>, you'd just write</p>
<pre><code>&gt;&gt;&gt; t = Thing2()
&gt;&gt;&gt; getattr(t, 'arms')
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>class Thing(object):
    def __init__(self, obj):
        self.legs = 4
        self.obj = obj
    def length(self):
        return 6

class Thing2(object):
    def __init__(self):
        self.arms = 2

def recursiveAttr(obj, attribute):
    attributeHierarchy = attribute.split('.')
    for attr in attributeHierarchy:
        obj = getattr(obj, attr)
    return obj

def get_session_attribute(obj, attribute):
    if attribute.endswith('()'):
        attribute = attribute.replace('()', '')
        return recursiveAttr(obj, attribute)()
    else:
        return recursiveAttr(obj, attribute)

t = Thing2()
x = Thing(t)
print get_session_attribute(x, 'obj.arms')
</code></pre>
</div>
<span class="comment-copy"><code>Thing</code> object's have an attribute named <code>'arms'</code>, not <code>'obj.arms'</code>.</span>
<span class="comment-copy"><code>obj.arms</code> isn't a single attribute, it is an attribute within an attribute.</span>
<span class="comment-copy">What's this <code>set_session_attribute</code> function for? What formats is it expected to handle? You've asked a question about getting it to handle <code>x.foo()</code> and a question about getting it to handle <code>x.foo.bar</code> now; if it has to handle stuff like <code>x.foo[3]('asdf').bar</code> or <code>x.foo+3</code>, we might as well get it out of the way now.</span>
<span class="comment-copy">Yes I'd like it to handle any type of attribute on an object passed and set them elsewhere, so far I've seen a regular attribute, an attribute of an object that's a foreign key, and a function on the object</span>
<span class="comment-copy">so you are trying to write <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer">a function to <code>eval</code>uate arbitrary python expression</a>?</span>
<span class="comment-copy">both good, but no reason to make a separate function if there's no need</span>
