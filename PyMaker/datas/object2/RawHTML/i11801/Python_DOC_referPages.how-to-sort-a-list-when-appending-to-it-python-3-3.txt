<div class="post-text" itemprop="text">
<p>I've recently been using this code answered from another question:</p>
<pre><code>foo = []
for line in test:
    x = line.split()
    y = int(x[1])
    foo.append({"Name":x[0],"Average":str(y)})
    print(x)
    sorted_x = sorted(foo)
    print sorted_x
</code></pre>
<p>I used this to sort averages. However, the code fails to sort averages producing results as such: <code>[{'Average': '2.3333333333333335', 'Name': 'Alex'}]
[{'Average': '1.0', 'Name': 'Harry'}]
[{'Average': '9.0', 'Name': 'Lick'}]</code></p>
<p>As seen it's not sorted from highest to lowest or lowest to highest. How would I be able to change this code so it does sort from highest to lowest or vice verse?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sorted(foo, key=lambda x:x['Average'])</code></p>
<p><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">https://docs.python.org/3/library/functions.html#sorted</a></p>
<p>You may prefer <code>foo.sort(lambda x:x['Average'])</code> which returns None but sorts foo itself in-place</p>
<p>If you want to insert an element into a sorted list, <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow">import bisect</a></p>
<p>PS if <code>print sorted_x</code> isn't throwing a syntax error, you're on Python 2</p>
</div>
<div class="post-text" itemprop="text">
<p>Sorting a list after every update can be fine for small lists, but will be resource-consuming with long lists.</p>
<p>If you need to <em>automatically maintain</em> a sort order while updating a list, try <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow">SortedContainers</a>. </p>
</div>
<span class="comment-copy">probably you should store numbers instead of strings?</span>
<span class="comment-copy">Sort outside the for loop, no need to sort in each iteration. Plus do not convert <code>average</code> to <code>str</code> if you need to sort by <code>average</code>.</span>
<span class="comment-copy">Consider that if you work on large list do not use insertion sort. On the other hand you can create your custom list which inherited from list. And when you add/remove item to the list you can sort it</span>
<span class="comment-copy">'sorted_x = sorted(foo, lambda x:x['Average']) TypeError: must use keyword argument for key function'                           I seem to be getting this error. Have I done something wrog?</span>
<span class="comment-copy">It should be sorted(foo,key=lambda x:x['Average']).</span>
<span class="comment-copy">My bad. I've updated my answer to use the explicit param. I assumed sorted would follow sort in not requiring one say 'key='. NB your average shouldn't be a string, as "12" &lt; "2"</span>
<span class="comment-copy">@alhal <code>sorted_x = sorted(foo, key = lambda x:x['Average'])</code></span>
<span class="comment-copy"><code>sorted</code> produces a new list, so it doesn't sort foo</span>
<span class="comment-copy">This is no answer to his question.</span>
<span class="comment-copy">The use of some kind of data structure that allows fast sorting <i>while</i> inserting, like the suggested <b>SortedContainers</b>, is the right answer to this question.</span>
