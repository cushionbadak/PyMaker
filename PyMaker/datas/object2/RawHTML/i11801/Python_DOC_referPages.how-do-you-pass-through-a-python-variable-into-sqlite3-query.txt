<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7831371/is-there-a-way-to-get-a-list-of-column-names-in-sqlite">Is there a way to get a list of column names in sqlite?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>The code is supposed to execute the query base on the input from the user in the python environment (not within the sql query). For example, the variable is defined in the Python environment, and in raw input for <code>table name = customers</code>, I would expect the query to print the column names of the table customers. </p>
<p>However, the below code report syntax error. If I remove the backward slash and the inner quotation mark, it will report <code>no such column: table_name</code>. It appears that the value <code>customers</code> is not being pass through into the query, and the query is reading <code>table_name</code> as a string. </p>
<p>Please help. Thanks</p>
<pre><code>import sqlite3

    def ask_column(db_name, table_name):
        conn = sqlite3.connect(db_name)
        c = conn.cursor()
        c.execute('SELECT sql FROM sqlite_master WHERE type = \'table\' And name = \'table_name\'') 
        print c.fetchall()
        conn.close()

db_name = raw_input("Please type the database name : ")
table_name = raw_input("Please type the table name: ")
ask_column(db_name, table_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using <strong>parameter substitution</strong>.  When using <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">Python's sqlite3 module</a>, replace your parameter values with question marks (<code>?</code>) and provide a <em>tuple</em> of values.  Python will handle the substitution automatically and also escape the values to limit the risk of SQL injection.</p>
<p>Here's an example: first, create a table:</p>
<pre><code>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; c = conn.cursor()
&gt;&gt;&gt; c.execute("""CREATE TABLE test (fruit, colour)""")
&lt;sqlite3.Cursor object at 0x7f41e929f650&gt;
</code></pre>
<p>Now insert some values: note how the <code>?</code> character is used as a placeholder for the values:</p>
<pre><code>&gt;&gt;&gt; c.executemany("""INSERT INTO test VALUES (?, ?)""", [('apple', 'green'), ('banana', 'yellow'), ('cherry', 'red')])
&lt;sqlite3.Cursor object at 0x7f41e929f650&gt;
</code></pre>
<p>And here's a query (note that we keep pass the values as a tuple, even though there is only one value):</p>
<pre><code>&gt;&gt;&gt; c.execute("""SELECT fruit, colour FROM test WHERE fruit = ?;""", ('apple',)) 
&lt;sqlite3.Cursor object at 0x7f41e929f650&gt;
&gt;&gt;&gt; print(c.fetchall())
[('apple', 'green')]
</code></pre>
</div>
