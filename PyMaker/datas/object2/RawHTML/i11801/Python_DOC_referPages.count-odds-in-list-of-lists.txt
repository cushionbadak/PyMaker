<div class="post-text" itemprop="text">
<p>What would be the shortest way to count the number of odd numbers in a list of lists like this with arbitrary dimensions, not necessarily 5x5:</p>
<pre><code>list_of_lists = [[1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5]]
</code></pre>
<p>I tried, but i'd guess there's shorter:</p>
<pre><code>counter = 0
for row in list_of_lists:
    for i in row:
        if i % 2 != 0:
            counter += 1
print(counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you always have one level of flat lists inside the main list you can use an inner loop to flatten, summing the result of  each <code>i % 2</code> which will be 1 for odd and 0 for even numbers:</p>
<pre><code>list_of_lists = [[1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5]]

print(sum(i % 2 for sub in list_of_lists for i in sub))
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a> to do the flattening:</p>
<pre><code>from itertools import chain

print(sum(i % 2 for i in  chain(*list_of_lists)))
</code></pre>
<p>If you had arbitrary nesting, recursion would be an easy way to approach the problem:</p>
<pre><code>def flat(lst):
    for i in lst:
        if isinstance(i, list):
            for j in flat(i):
                yield j % 2
        else:
            yield i % 2

print(sum(flat(list_of_lists)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The numpy way of counting for a contrast:</p>
<pre><code>import numpy as np
list_of_lists = [[1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5]]

l = np.array(list_of_lists)
print len(l[l%2!=0])
</code></pre>
<p><code>l[l%2!=0]</code> returns all the elements that satisfy the condition <code>l%2!=0</code> and <code>len()</code> counts it.</p>
<p>PS : This of course assumes that the list_of_lists is rectangular. For a solution that allows different length for each inner-list, see Padraic's answer.</p>
</div>
<span class="comment-copy">Thanks @Padraic Cunningham! Very nice answer, and extremely quickly :)</span>
<span class="comment-copy">Actually your original solution works already for size and number of lists.</span>
<span class="comment-copy">@Zorgmorduk, the recursion would just be if you had lists inside lists inside lists  ...</span>
<span class="comment-copy">ahh, I see. thanks @Padraic Cunningham!</span>
<span class="comment-copy">No prob, you're welcome</span>
