<div class="post-text" itemprop="text">
<p>I am reading from a file that has the following in it.</p>
<pre><code>87965164,Paris,Yu,6/27/1997
87965219,Heath,Moss,10/13/1996
87965187,Cale,Blankenship,10/22/1995
87965220,Terrence,Watkins,12/7/1996
87965172,Ansley,Padilla,3/30/1997
</code></pre>
<p>i need to split the the lines at the "," and the "/" and also removing
the "\n" from the end.</p>
<p>i want my output to look like this when put into a list:</p>
<pre><code>[['87965164', 'Paris', 'Yu', 6, 27, 1997], ['87965219', 'Heath', 'Moss', 10, 13, 1996], ['87965187', 'Cale', 'Blankenship', 10, 22, 1995], ['87965220', 'Terrence', 'Watkins', 12, 7, 1996], ['87965172', 'Ansley', 'Padilla', 3, 30, 1997]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow">You're going to want regular expressions.</a></p>
<pre><code>import re

results = []
for line in fl:
  # [,/] means "match if either a , or a / is present"
  results.append(re.split('[,/]',line.strip()))
</code></pre>
<p>If you have a particularly big file, you can wrap it in a generator:</p>
<pre><code>import re
def splitter(fl):
   for line in fl:
     # By using a generator, you are only accessing one line of the file at a time.
     yield re.split('[,/]',line.strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than storing heterogeneous data in a homogeneous data type, I'd recommend using dictionaries or creating a class.</p>
<p>With dictionaries:</p>
<pre><code>results = {}
with open('in.txt') as f:
    for line in f:
        id, first, last, day = line.split(',')
        month, day, year = map(int, day.split('/'))
        results[id] = {'id':id, 'first':first, 'last':last,
                       'month':month, 'day':day, 'year':year}
</code></pre>
<p>With a class:</p>
<pre><code>class Person:
    def __init__(self, id, first, last, day):
        self.id = id
        self.first = first
        self.last = last
        self.month, self.day, self.year = map(int, day.split('/'))

results = {}
with open('in.txt') as f:
    for line in f:
        id, first, last, day = line.split(',')
        results[id] = Person(id, first, last, day)
</code></pre>
<p>Note that in each case I am storing each person's info as an entry in a dictionary, with a key of what looks like their ID number.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simpler than regex:</p>
<pre><code>[line.replace('/', ',').split(',') for line in text.split('\n')]
</code></pre>
<p>You can transform numbers into <code>int</code>s afterwards.</p>
<p>However, I believe that you are looking for the wrong way to do it. The right way is to split by commas, then give special fields a dedicated treatment.</p>
<pre><code>from datetime import datetime
from collections import namedtuple

Person = namedtuple('Row', ['idn', 'first', 'last', 'birth'])

def make_person(idn, first, last, birth):
    return Person(idn, first, last,
                  datetime.strptime(birth, "%m/%d/%Y"))

records = [make_person(*line.split(',')) for line in text.split('\n')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For each line:</p>
<pre><code>parts = line.split(',')
parts[-1:] = map(int, parts[-1].split('/'))
</code></pre>
<p>This will correctly handle input that has any slashes in the non-date parts, and easily handles the conversion to integers at the same time.</p>
</div>
<span class="comment-copy">Did you try anything at all?</span>
<span class="comment-copy">I believe that this is exactly what <code>namedtuple</code> was created for</span>
<span class="comment-copy">@Elazar - <code>namedtuple</code> adds object notation to <code>tuple</code>s, but a <code>tuple</code> is still a homogeneous data type (as well as immutable, unlike <code>list</code>s).</span>
<span class="comment-copy">I disagree. The notation is the important part. Immutability is another feature. And the fact that you can iterate over the fields makes it easier to print in different formats.</span>
<span class="comment-copy">In general, "homogeneous" is a misnomer, since python is dynamically typed - all containers are "homogeneous" (including classes). Tuples are mostly for heterogeneous uses, whereas list - since it is extendable - is mostly "really" homogeneous.</span>
<span class="comment-copy">@Elazar - Objects provide that notation too, as well as mutability (sometimes people change their names), and any other behavior you'd like, such as user-friendly string representations. And Python may not care whether you have, e.g., a <code>list</code> or <code>tuple</code> that's all integers except for one string in the middle, but I wouldn't want to deal with that as a developer. <code>namedtuple</code> is one way to go here, but it is in no way objectively better than ordinary user-defined classes for this situation.</span>
