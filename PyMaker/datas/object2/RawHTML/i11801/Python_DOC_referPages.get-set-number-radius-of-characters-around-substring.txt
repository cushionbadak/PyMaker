<div class="post-text" itemprop="text">
<p>In Python, how would I get a certain number of characters around a substring?</p>
<p>For example, here's my string:</p>
<pre><code>string='Mad Max: Fury Road'
</code></pre>
<p>Let's say I wanted to add four characters away from <code>'ax: Fur'</code>, on both sides, into the output, so it would be <code>'ad Max: Fury Ro'</code>.</p>
<p>If the substring to look for was <code>'Fury Road'</code> in <code>string</code>, then the output would be <code>'ax: Fury Road'</code>, and it would ignore that there's nothing to add on the right side.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition</code></a> comes in really handy here:</p>
<pre><code>def get_sub(string, sub, length):
    before, search, after = string.partition(sub)
    if not search:
        raise ValueError("substring not found")
    return before[-length:] + sub + after[:length]
</code></pre>
<p>You could also just return <code>before</code> in the <code>if</code> statement instead of raising a <code>ValueError</code>.  That would return the string unchanged.  Usage:</p>
<pre><code>print(get_sub("Mad Max: Fury Road", "Fury Road", 4))
#ax: Fury Road
print(get_sub("Mad Max: Fury Road", "Fu", 4))
#ax: Fury R
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could also get the string before and after the substring with <code>.split()</code> then return parts of both:</p>
<pre><code>def get_sub_and_surrounding(string,sub,length):
    before,after = string.split(sub,1) #limit to only one split
    return before[-length:] + sub + after[:length]
</code></pre>
<p>it is worth noting that in this case if <code>sub</code> is not actually a substring then the first line will raise a <code>ValueError</code></p>
<p>but you can get the exact indexes for splitting it up like this:</p>
<pre><code>def get_sub_and_surrounding(string,sub,length):
    i_start = string.index(sub) #index of the start of the substring
    i_end = i_start + len(sub) #index of the end of the substring (one after)

    my_start = max(0, i_start -length)
    # ^prevents use of negative indices from counting
    # from the end of the string by accident

    my_end = min(len(string), i_end+length) #this part isn't actually necessary, "a"[:100] just goes to the end of the string

    return string[my_start : my_end]
</code></pre>
<p>In this case <code>string.index(sub)</code> will raise a <code>ValueError</code> if sub is not in string.</p>
</div>
<span class="comment-copy">you could also do <code>before,middle,after = ...</code> instead of <code>parts = ...</code> then get the elements of <code>parts</code>, would be a little easier to read and run slightly faster.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen: Excellent suggestion.  Implemented.</span>
