<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3299648/python-compilation-interpretation-process">Python Compilation/Interpretation Process</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>When I learned C/C++ I not only learned the syntax of the language and the semantics of the language constructs but also how the program was executed by the computer.  I learned stuff like:</p>
<blockquote>
<p>All local variables are declared in a stack frame, which is allocated
  each time the function is called.  These frames are laid out on the
  call stack one right after the other, and they're 'unwound' when the
  function returns, thus quickly and efficiently 'destroying' the local
  variables for that function</p>
</blockquote>
<p>This, in turn, helped me figure out why it's a bad idea to take the address of a local variable &amp; return it to the calling function.  In other words, understanding C/C++'s memory model and the environment in which the code executes helps develop a deeper understanding of how to write correct programs.</p>
<p>Another example: malloc/new allocate objects in the 'heap' (and not the stack), which both explains why they live beyond the end of the function that allocated them.  Further, knowing that these functions/keywords return the memory address that the object is located at helped me to understand how things like linked lists work. (And how to figure out whether I need another <code>*</code> or <code>-&gt;</code> or not.)</p>
<p>So now I'm learning Python and <strong>I'm looking for a concise, clear, yet thorough explanation of how Python programs manage their memory and execution environment</strong>.  </p>
<p>Searching online hasn't been particularly fruitful - I might be using the wrong search terms, but there appears to be very little out there in general.</p>
<p>I've looked through <a href="https://docs.python.org/" rel="nofollow noreferrer">https://docs.python.org/</a> and found it to be an excellent resource for syntax and semantics ("if you type X, then Y will happen"), but it doesn't really describe what the computer is doing 'under the hood'.</p>
<p>I've found several posts here on Stack Overflow ( such as <a href="https://stackoverflow.com/questions/21468764/understanding-pythons-memory-model">this</a>, <a href="https://stackoverflow.com/questions/1059674/python-memory-model">this</a>, and <a href="https://stackoverflow.com/questions/22604974/python-memory-model-for-this-program">this</a> ) but these all seem to focus on specific situations.  </p>
<p><strong>Does anyone know of a resource that actually explains what Python is doing under the hood'?</strong></p>
<blockquote>
<p>EDIT: I'm getting feedback from StackOverflow that this question may
  be a duplicate.  <a href="https://stackoverflow.com/questions/3299648/python-compilation-interpretation-process">The other question</a> asks 'how does a .PY file get
  compiled (to bytecode) and then executed by the VM?'  What I'm asking
  here is 'is there a page that explains how Python lays variables,
  objects, functions, etc out in memory AND explains how that's all used
  to actually run Python programs' (Sub-question: Is this an appropriate
  way to address the concern about a duplicate question?  Would it be
  better to put this in a comment?)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>With python what you want to know about what's going on under the hood straight away to be able to work efficiently with the language is quite different from C/C++ since it's a quite different language environment.  What you want to get you head around is not so much the nitty-gritty of what's going on memory, but <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">Python's Data Model</a>.</p>
</div>
<span class="comment-copy">python is actually written in C so you would be able to get the source code for the language itself and read through it if that would help you understand how it works.</span>
<span class="comment-copy">You may also find <a href="http://programmers.stackexchange.com/q/246094/143097">this Programmers question</a> helpful.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/faq/design.html?highlight=garbage%20collection#how-does-python-manage-memory" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a> has some pointers</span>
<span class="comment-copy">are you looking for something like this?   You can get information about an objects memory location using the <code>id</code> builtin but there is no way to directly access an object by its id, instead the interpreter keeps track of how many references exist for a particular object and when there are no more references that object gets garbage collected which calls its <code>__del__</code> method for it to clean up it's resources such as a file closing the open io.</span>
<span class="comment-copy">Start by reading the FAQ linked by @Ilja and the Python data model from Paul Evans' answer.</span>
<span class="comment-copy">While this is a link only answer that doesn't really answer the original question, I completely agree that understanding the Data Model will help with python more than understanding the memory management.</span>
