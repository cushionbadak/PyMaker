<div class="post-text" itemprop="text">
<p>I suppose this is a general question so sorry if not posted in the right place.</p>
<p>Say for instance, I have a function <code>a</code> which imports <code>os</code>. If I was to call this function from another file multiple times I am assuming that the import would be done multiple times as well? Is there a way to only import the module if its not already present?</p>
<p>Basically, I have a class which calls multiple functions imported from various files, instead of importing the whole file I thought it would be easier to import just the function but now I am wondering if I am going to give myself headaches in the long run with excess imports.</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://docs.python.org/3/reference/import.html#importsystem" rel="noreferrer">described</a> in python documentation, when python see some import statement it does the following things:</p>
<ul>
<li>checks some global table if module is already imported

<ul>
<li>if module is not imported python imports it, creates module object and puts newly created module object to the global table</li>
<li>if module is imported python just gets module object</li>
</ul></li>
<li>when python has module object it binds it to the name you chose

<ul>
<li>if it was <code>import foo</code> name for module <code>foo</code> will be <code>foo</code></li>
<li>if it was <code>import foo as bar</code> name for module <code>foo</code> will be <code>bar</code></li>
<li>if it was <code>from foo import bar as baz</code> python finds function (or whatever) <code>bar</code> in module <code>foo</code> and will bind this function to name <code>baz</code></li>
</ul></li>
</ul>
<p>So each module is imported only one time.</p>
<p>To better understand import mechanics I would suggest to create toy example.</p>
<p>File <code>module.py</code>:</p>
<pre><code>print("import is in progress")

def foo():
    pass
</code></pre>
<p>File <code>main.py</code>:</p>
<pre><code>def foo():
    print("before importing module")
    import module
    module.foo()
    print("after importing module")

if __name__ == '__main__':
    foo()
    foo()
</code></pre>
<p>Put above files to the same directory. When <code>module.py</code> is being imported it prints <code>import is in progress</code>. When you launch <code>main.py</code> it will try to import <code>module</code> several times but the output will be:</p>
<pre><code>before importing module
import is in progress
after importing module
before importing module
after importing module
</code></pre>
<p>So import really happens only once. You can adjust this toy example to check cases that are interesting to you.</p>
</div>
<span class="comment-copy">The biggest question is why are you importing inside the function and not at the top of the file? There's almost no reason to do that and doing so is a code smell.</span>
<span class="comment-copy">Python cache imported modules and doesn't import them twice.</span>
<span class="comment-copy">i was importing just a function from the module, so to avoid errors i included the imports in the function, im assuming i should import the whole file and just call the function as normal?</span>
<span class="comment-copy">Importing "just a function" from a module still executes all the module's code if the module hasn't previously been loaded. You don't need to move imports into the function to guarantee they'll happen.</span>
<span class="comment-copy">Actually, if your question was the opposite, then you'd have to do some special case handling with <i>reload(os)</i> to force it to be imported again.  But as it is and as other answers state, you're already covered.  As far as @Two-BitAlchemist 's remark goes, he's correct as well.  Though sometimes doing so avoid issues with circular module references (still a code smell).</span>
<span class="comment-copy">Great, very clear. Just one more thing need to be carefule. If later you import module to a with <b>as</b> like <code>from module import foo as new_name</code>, the previous module name would be coverd shows <code>global name 'module' is not defined</code></span>
