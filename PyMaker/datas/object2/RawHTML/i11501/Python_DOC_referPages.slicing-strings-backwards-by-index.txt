<div class="post-text" itemprop="text">
<p>I have a string that looks like this:</p>
<pre><code>((id = id_2) AND (condition1 = condition2))
</code></pre>
<p>What I want is to get the string that ends with the first ')' and backwards until the associated '('. Then I use that string and replace it with something else. This way I can repeat the operation until I get a string that has no '(' or ')'.
So far, my code is something like this:</p>
<pre><code>original_string = '((id = id_2) AND (condition1 = condition2))'
while ')' in original_string:
    needed_string = original_string[original_string.index(')'):original_string.index('('):-1][::-1]
    original_string.replace(needed_string, 'False')
</code></pre>
<p>That works and after the first iteration I get what I want:</p>
<pre><code>needed_string = '(id = id_2)'
original_string = '(False AND (condition1 = condition2))'
</code></pre>
<p>But in the next iteration, I get:</p>
<pre><code>needed_string = 'False AND (condition1 = condition2)'
</code></pre>
<p>What I want for the second iteration is:</p>
<pre><code>needed_string = '(condition1 = condition2)'
</code></pre>
<p>So that after I use replace, original_string looks like this:</p>
<pre><code>original_string = '(False AND False)'
</code></pre>
<p>This way, during the 3rd iteration:</p>
<pre><code>needed_string = '(False and False)'
</code></pre>
<p>and after replacing,</p>
<pre><code>original_string = 'False'
</code></pre>
<p>I am new to python so I'm not sure if this is OK or if there's a better way to be doing this, but it has to be done in a simple way (without using any 3rd party libraries) or tokenizing</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/re.html" rel="nofollow" title="re module">regular expressions</a> to find and replace all of the needed values.</p>
<pre><code>import re
def get_groups(expr, replace):
    pattern = re.compile(r'\([^()]*\)')
    while True:
        m = pattern.search(expr)
        if m is None:
            break
        expr = expr[:m.start()] + replace + expr[m.end():]
        yield (m.group(), expr)
</code></pre>
<p>and use this method as such:</p>
<pre><code>&gt;&gt;&gt; expr = '((id = id_2) AND (condition1 = condition2))'
&gt;&gt;&gt; for needed_string, original_string in get_groups(expr, 'False'):
        print('needed string   =', repr(needed_string))
        print('original string =', repr(original_string))
        print()

needed string   = '(id = id_2)'
original string = '(False AND (condition1 = condition2))'

needed string   = '(condition1 = condition2)'
original string = '(False AND False)'

needed string   = '(False AND False)'
original string = 'False'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your approach is that you find <em>first</em> left parenthesis not the corresponding one to right parenthesis you found before.</p>
<p>To solve this problem you can use regular expression as <a href="https://stackoverflow.com/questions/37014581/slicing-strings-backwards-by-index/37015228#37015228">Kupiakos suggested</a> or you can try to use <a href="https://docs.python.org/2.7/library/stdtypes.html#str.rfind" rel="nofollow noreferrer">str.rfind</a> method</p>
<pre><code>  def replace_first_expression(string, replacement):
      close_parenthesis_pos = string.find(')')
      if close_parenthesis_pos == -1:
          return string
      open_parenthesis_pos = string.rfind('(', 0, close_parenthesis_pos)
      if open_parenthesis_pos == -1:
          return string
      return string[:open_parenthesis_pos] + replacement + string[close_parenthesis_pos + 1:]
</code></pre>
</div>
<span class="comment-copy">If you're lazy, <a href="https://sexpdata.readthedocs.io/en/latest/" rel="nofollow noreferrer">sexpdata.readthedocs.io/en/latest</a></span>
<span class="comment-copy">Forgot to mention that it has to be done without using any 3rd party libraries</span>
<span class="comment-copy">Please edit your question to provide the desired output for each iteration, so we know how your code is intended to work.</span>
<span class="comment-copy">Done. I hope its easier to understand now.</span>
<span class="comment-copy">Based on the syntax you have, you should probably be tokenizing in some way.</span>
