<div class="post-text" itemprop="text">
<p>I am currently trying to implement a lexical scanner that will later become part of a compiler. The program uses Regular expressions to match an input program file. If a series of non white-space characters are matched to a regex, the section of input matched is then converted into a token which, with the rest of the other tokens, will be sent to a parser. I have the code working so that the right tokens are output correctly but I need to make it so the scanner will raise an exception (called by a method <code>no_token()</code>) if a series of non-whitespace characters are found that do not match any of the regular expressions given. This is my first post on here so please if you have any tips on how I can improve my posts please let me know or if you require more information on the question or code please ask.</p>
<pre><code>def get_token(self):
    '''Returns the next token and the part of input_string it matched.
       The returned token is None if there is no next token.
       The characters up to the end of the token are consumed.
       Raise an exception by calling no_token() if the input contains
       extra non-white-space characters that do not match any token.'''
    self.skip_white_space()
    # find the longest prefix of input_string that matches a token
    token, longest = None, ''
    for (t, r) in Token.token_regexp:
        match = re.match(r, self.input_string[self.current_char_index:])
        if match is None:
            self.no_token()
        elif match and match.end() &gt; len(longest):
            token, longest = t, match.group()
    self.current_char_index += len(longest)
    return (token, longest)
</code></pre>
<p>as you can see I tried using </p>
<pre><code>if match is None:
    self.no_token()
</code></pre>
<p>but this produces the exception and exits the program at the start of the and no tokens are returned but if I comment this out the code works fine. Obviously I need this section to produce an exception if non white-space characters do not match any regex or it will cause problems at later stages of development</p>
<p>The method <code>skip_white_space()</code> consumes all white-spaces up to the next non white-space character,
the regular expressions are stored in token_regexp and <code>self.input_string[self.current_char_index:])</code> gives the current char.</p>
<p>for the program as a .txt file:</p>
<pre><code>z := 2;
if z &lt; 3 then
  z := 1
end
</code></pre>
<p>without the call to no_token the output is:</p>
<pre><code>ID z

BEC

NUM 2

SEM

IF

ID z

LESS

NUM 3

THEN

ID z

BEC

NUM 1

END
</code></pre>
<p>which is correct but when I try to implement the no_token() call i get:</p>
<pre><code>lexical error: no token found at the start of z := 2;
if z &lt; 3 then
  z := 1
end
</code></pre>
<p>which is what the <code>no_token()</code> method outputs if there is a series of characters that do not match a regex I have implemented in the scanner but this is not the case for this input. All the character sequences here are valid.</p>
</div>
<div class="post-text" itemprop="text">
<p>Got it all sorted. Cheers</p>
<pre><code>def get_token(self):
    '''Returns the next token and the part of input_string it matched.
       The returned token is None if there is no next token.
       The characters up to the end of the token are consumed.
       Raise an exception by calling no_token() if the input contains
       extra non-white-space characters that do not match any token.'''
    self.skip_white_space()
    # find the longest prefix of input_string that matches a token
    token, longest = None, ''
    for (t, r) in Token.token_regexp:
        match = re.match(r, self.input_string[self.current_char_index:])
        if match and match.end() &gt; len(longest):
            token, longest = t, match.group()

    self.current_char_index += len(longest)
    if token == None and self.current_char_index &lt; len(self.input_string):
        self.no_token()
    return (token, longest)
</code></pre>
<p>was the final working code</p>
</div>
<span class="comment-copy">To answer your question, you can use a <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">negative lookahead assertion</a> if you really need to. A <a href="/help/mvce">Minimal, Verifiable, Complete Example</a> would really be more useful for getting an answer than a long explanation and quite a bit of unrelated code.</span>
<span class="comment-copy">Thanks for the fast reply. I will have a read of <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">docs.python.org/2/library/re.html</a> and see if this can help me. When you say a verifiable, minimal complete answer do you mean an example of an input and expected output?  I am unsure of how the code is unrelated as that is the only call to no_token() in the entire program and it is the reason that an error is occuring</span>
<span class="comment-copy">Example of input and expected output is the bare minimum, yes.</span>
