<div class="post-text" itemprop="text">
<p>I want to make python file which opens two programs. This two programs have to get input from each other multiple times. I opened two programs and know how to give input to one program, but i don't know how to give input multiple time on one program and get output multiple time. My code is like this.</p>
<pre><code>subprocess.call("/usr/bin/gcc -o p1 "+path1,shell=True)
subprocess.call("/usr/bin/gcc -o p2 "+path2,shell=True)
cmd_1 = subprocess.Popen("./p1",shell = True,stdin = subprocess.PIPE,stdout = subprocess.PIPE,stderr = subprocess.PIPE)
cmd_2 = subprocess.Popen("./p2",shell = True,stdin = subprocess.PIPE,stdout = subprocess.PIPE,stderr = subprocess.PIPE)
std_out_1 = cmd_1.stdout
std_out_2 = cmd_2.stdout
for line in std_out_1.readlines():
    print(line.decode('ascii'))
for line in std_out_2.readlines():
    print(line.decode('ascii'))
</code></pre>
<p>Now this program just get program output. I want to give input N times for each program and get output N times. So I expect my code to be like this.</p>
<pre><code>give_input(n)
for i in range(n):
    t_1 = get_output(t_2) //give input t_2, and get output t_1
    t_2 = get_output(t_1) //give input t_1, and get output t_2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using <code>write</code> and <code>communicate</code> to send data to <code>cmd_1</code> and <code>cmd_2</code> and get the response, see <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow">https://docs.python.org/3/library/subprocess.html#popen-constructor</a>.</p>
<pre><code>for i in range(n):
    cmd_1 = subprocess.Popen("./p1",shell = True,stdin = subprocess.PIPE,stdout = subprocess.PIPE,stderr = subprocess.PIPE)
    cmd_2 = subprocess.Popen("./p2",shell = True,stdin = subprocess.PIPE,stdout = subprocess.PIPE,stderr = subprocess.PIPE)
    cmd_1.stdin.write(cmd_input[n])
    cmd_2.stdin.write(cmd_input[n])
    cmd1_stdout, cmd1_stderr = cmd_1.communicate()
    cmd2_stdout, cmd2_stderr = cmd_2.communicate()
    for line in cmd1_stdout:
        print(line.decode('ascii'))
    for line in cmd2_stdout:
        print(line.decode('ascii'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To exchange messages via pipes dynamically (not tested):</p>
<pre><code>#!/usr/bin/env python3
from subprocess import Popen, PIPE

with Popen('p1', stdin=PIPE, stdout=PIPE, universal_newlines=True) as p1, \
     Popen('p2', stdin=PIPE, stdout=PIPE, universal_newlines=True) as p2:
    # give_input(n)
    print(n, file=p1.stdin, flush=True)
    print(n, file=p2.stdin, flush=True)
    for i in range(n):
        # t_1 = get_output(t_2) //give input t_2, and get output t_1
        print(p1.stdout.read(1), file=p2.stdin, flush=True)
        # t_2 = get_output(t_1) //give input t_1, and get output t_2
        print(p2.stdout.read(1), file=p1.stdin, flush=True)
</code></pre>
<p>It assumes that the child processes expect a line as a request and return a single character as a response.</p>
<p>To make it work:</p>
<ol>
<li><code>p1</code>, <code>p2</code> should disable their internal <code>stdout</code> buffering (call<code>setvbuf(stdout, NULL, _IONBF, 0);</code> at the start of the program) or call <code>fflush()</code> after each <code>printf()</code>. Related: <a href="https://stackoverflow.com/q/20503671/4279">Python C program subprocess hangs at “for line in iter”</a></li>
<li>Put the directory with <code>p1</code>, <code>p2</code> into <code>$PATH</code> or pass a full path instead <code>'p1'</code> into <code>Popen()</code>.</li>
</ol>
</div>
