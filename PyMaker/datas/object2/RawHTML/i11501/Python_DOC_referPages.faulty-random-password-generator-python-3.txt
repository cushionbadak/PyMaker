<div class="post-text" itemprop="text">
<p>I am beginning to learn Python and started experimenting with an example code block.  I edited it a few times, and on the last edit that I did, I added an optional random password generator.  Then I decided that it would make more sense to put the password generator into a separate document, so I copied the necessary code and made a new document.  After editing it however, I cannot generate an even number of digits in the password.</p>
<p><a href="http://pastebin.com/u/IsenfireLDC" rel="nofollow">Pastebin</a></p>
<p><a href="http://pastebin.com/1iaJ6tkK" rel="nofollow">Copy of Faulty Code (Pastebin)</a></p>
<pre><code>import math
import random
alpha = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
print('Would you like a random password suggestion generator', 'Yes or No')
permissionRandomGenerator = input().lower()
print('How long do you want your password?')
lengthRandomGenerator = int(input())
if permissionRandomGenerator == 'yes':
    def randInt():
        return math.floor(random.random()*10)
    def randChar():
        return alpha[math.floor(random.random()*27)]
    randPasswordList = []
    listInsert = 0
    def changeCase(f):
        g = round(random.random())
        if g == 0:
            return f.lower()
        elif g == 1:
            return f.upper()
    while listInsert &lt; lengthRandomGenerator:
        randPasswordList.insert(listInsert, randInt())
        listInsert = listInsert + 1
        if listInsert &gt;= lengthRandomGenerator:
            break
        randPasswordList.insert(listInsert, randChar())
        randPasswordList[listInsert] = changeCase(randPasswordList[listInsert])
        listInsert = listInsert + 1
        continue
    listInsert = 0
    printList = 0
    if lengthRandomGenerator &lt;= 0:
        print('It has to be longer than that')
    elif lengthRandomGenerator &gt;= 25:
        print('I can\'t generate a password that long')
    elif math.isnan(lengthRandomGenerator):
        print('error: not valid data type')
    else:
        while printList &lt; (len(randPasswordList)-1):
            printItem = randPasswordList[printList]
            print(printItem)
            printList = printList + 1
    printList = 0
    randPasswordList = []
elif permissionRandomGenerator == 'no':
    print('Too bad...')
else:
    print('You had to answer Yes or No')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I refactored your program a bit, and got rid of a <em>lot</em> of unnecessary steps and inconsistencies. Here it is in full, then I'll explain each part:</p>
<pre><code>import random
import string
import sys

possible_chars = string.ascii_letters + string.digits + string.punctuation

def nextchar(chars):
    return random.choice(chars)

yes_or_no = input("""
Would you like a random password suggestion generated?
Type Yes to continue: """).lower()

if yes_or_no == 'yes':
    try:
        pwd_len = int(input('How long do you want your password? '))
    except ValueError:
        sys.exit("You need to enter an integer. Please start the program over.")

    if 0 &lt; pwd_len &lt; 26:
        new_pwd = ""
        for _ in range(pwd_len):
            new_pwd += nextchar(possible_chars)
        print("Your new password is:\n" + new_pwd)

    else:
        print("I can only generate passwords between 1 and 25 characters long.")

else:
    print("Well then, why did you run me?")
</code></pre>
<p>Python is not just the syntax and <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">builtin functions</a>, it is also the <a href="https://docs.python.org/3/library/index.html" rel="nofollow noreferrer">standard library</a> or stdlib. You're going to be working with the stdlib's modules all the time, so when you think you'll be using one, <strong>read the docs!</strong> You'll learn about the module, what its intended use is, some of its history and changes (such as in which version a certain function was added), and all of the classes, functions, and attributes contained therein. Make sure you read the whole thing (none of them are <em>that</em> long) and try to get at least a basic idea of what each thing does. That way, such as in this case, you'll be able to pick the best function for the job. One thing I like to do in my spare time is just pick a random module and read the docs, just to learn. They're generally fairly well written, and usually pretty inclusive. Get used to Monty Python references, they're everywhere.</p>
<pre><code>import random
import string
import sys
</code></pre>
<p>Imports are first, and should almost always be only at the top. I like to put mine in alphabetical order, with the stdlib on top, then a blank line, then 3rd-party modules, including self-written ones next. Put a blank line or two after the imports as well. One thing to remember, that I mentioned in the comments: readability counts. Code is not only meant to be read by machines, but by people as well. Comment when necessary. Be generous with whitespace (also remember that whitespace is syntactically important in Python as well, so it forces you to indent properly) to separate related bits of code, functions, classes, blocks, etc. I <em>highly</em> recommend reading, rereading, and spending time pondering <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP-8</a>, the Python style guide. Its recommendations aren't <em>absolute</em>, but many projects that enforce coding standards rely on it. Try to follow it as much as you can. If a line comes out to 83 characters, don't sweat it, but be aware of what you're doing.</p>
<p>The reason I made such a big deal out of reading the docs is the following few lines:</p>
<pre><code>possible_chars = string.ascii_letters + string.digits + string.punctuation

def nextchar(chars):
    return random.choice(chars)
</code></pre>
<p>They get rid of about half of your code. <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer"><code>string</code></a> contains a bunch of predefined constants for working with strings. The three I chose should all be good valid password characters. If you're on a system that won't take punctuation marks, just remove it. Note that <code>possible_chars</code> is a string - like tuples, lists and dicts, strings are iterable, so you don't need to make a separate list of each individual possible character.</p>
<p>Next is the function - it replaces your <code>randInt()</code>, <code>randChar()</code>, and <code>changeCase()</code> functions, along with a bunch of your inline code, which was rather bizarre, to tell you the truth. I liked the method you came up with to decide if a letter was upper- or lower-case, but the rest of it was just <em>way</em> too much effort when you have <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice()</code></a> and the <code>string</code> constants from above.</p>
<pre><code>yes_or_no = input("""
Would you like a random password suggestion generated?
Type Yes to continue: """).lower()
</code></pre>
<p>You may not have been aware, but you don't need to <code>print()</code> a description string before getting user <code>input()</code> - just pass the string as a single argument to <code>input()</code> and you'll get the same effect. I also used a <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow noreferrer">triple-quoted</a> <code>"""</code> (<code>'''</code> can also be used) string literal that differs from the more common single- <code>'</code> and double-quoted <code>"</code> string literals in that any newlines or tabs contained within it don't need to be escaped. The take-home for now is that you can write several lines of text, and when you <code>print()</code> it, it will come out as several lines.</p>
<pre><code>    try:
        pwd_len = int(input('How long do you want your password? '))
    except ValueError:
        sys.exit("You need to enter an integer. Please start the program over.")
</code></pre>
<p>I used a <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer"><code>try/except</code></a> block for the next part. If the user enters a non-integer up at the input prompt, the <code>int()</code> function will fail with a <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer"><code>ValueError</code></a>. I picked the simplest manner possible of dealing with it: if there's an error, print a message and quit. You can make it so that the program will re-ask for input if an error is raised, but I figured that was beyond the scope of this exercise.</p>
<pre><code>    if 0 &lt; pwd_len &lt; 26:
        new_pwd = ""
        for _ in range(pwd_len):
            new_pwd += nextchar(possible_chars)
        print("Your new password is:\n" + new_pwd)

    else:
        print("I can only generate passwords between 1 and 25 characters long.")
</code></pre>
<p>Here is where all the action happens. Using an <code>if/else</code> block, we test the desired length of the password, and if it's between 1 and 25 (an arbitrary upper bound), we generate the password. This is done with a <code>for</code> loop and the <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range()</code></a> function (read the docs for exactly how it works). You'll notice that I use a common Python idiom in the <code>for</code> loop: since I don't actually <em>need</em> the number generated by <code>range()</code>, I <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python">"throw it away"</a> by using the underscore <code>_</code> character in place of a variable. Finally, the <code>else</code> statement handles the alternative - either <code>pwd_len</code> is 0 or less, or 26 or greater.</p>
<pre><code>else:
    print("Well then, why did you run me?")
</code></pre>
<p>We're at the end of the program! This <code>else</code> is paired with the <code>if yes_or_no == 'yes':</code> statement - the user entered something other than yes at the input prompt.</p>
<p>Hopefully this will help you understand a little bit more about how Python works and how to program efficiently using it. If you feel like you're spending a bit too much time implementing something that you think should be easier, you're probably right. One of Python's many advantages is its "batteries included" philosophy - there's a huge range of things you can do with the stdlib. </p>
</div>
<div class="post-text" itemprop="text">
<p>I made some small edits, and my code seems to be working now.  Here is the finished product (I put comments to show what the code does, and also to mark the edits.):</p>
<pre><code>import math
import random                                 #Import necessary modules
alpha = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']  #List with alphabet
print('Would you like a random password suggestion generator', 'Yes or No')  #Prints the question for permission
permissionRandomGenerator = input().lower()   #Stores the answer of the above question in lower case
if permissionRandomGenerator == 'yes':        #Generates a password if the answer of the first question is 'yes'
print('How long do you want your password?')  #Asks for length
lengthRandomGenerator = int(input())          #Stores length as an integer
    def randInt():                            #Creates a random integer
        return math.floor(random.random()*10)
    def randChar():                          #Selects a random string from the list with the alphabet
        return alpha[math.floor(random.random()*27) - 1]
    randPasswordList = []                    #Creates a list to store the password
    listInsert = 0                           #Creates a list index variable
    def changeCase(f):                       #Defines a function to randomly change the case of letters before adding them to the list randPasswordList
        g = round(random.random())
        if g == 0:
            return f.lower()
        elif g == 1:
            return f.upper()
    while listInsert &lt; lengthRandomGenerator + 1:  #Creates a random password and inserts it into randPasswordList  (I added `+ 1` here)
        randPasswordList.insert(listInsert, randInt())
        listInsert = listInsert + 1
        if listInsert &gt;= lengthRandomGenerator:
            break
        randPasswordList.insert(listInsert, randChar())
        randPasswordList[listInsert] = changeCase(randPasswordList[listInsert])    #Calls the changeCase function whenever it inserts a letter
        listInsert = listInsert + 1
        continue
    listInsert = 0
    printList = 0
    if lengthRandomGenerator &lt;= 0:           #If the length it 0 or less (for example, negatives) the password will not generate (I need to fix this a little bit.  Currently the code attempts to create a password beforehand)
        print('It has to be longer than that')
    elif lengthRandomGenerator &gt;= 25:
        print('I can\'t generate a password that long')
    elif math.isnan(lengthRandomGenerator):  #Currently this doesn't do anything, it needs to be moved farther forward
        print('error: not valid data type')
    else:
        while printList &lt; (len(randPasswordList)-1):    #Prints the list item by item
            printItem = randPasswordList[printList]
            print(printItem)
            printList = printList + 1
    printList = 0                             #Resets the variables
    randPasswordList = []
elif permissionRandomGenerator == 'no':
    print('Too bad...')
else:
    print('You had to answer Yes or No')
</code></pre>
<p>Note: I made this code purely to experiment and better learn basic aspects of Python.  This code is not optimized, and is also not as random as I can (and will) make it.</p>
<p>P.S. Sorry if the comments are incomplete, I am still learning this language.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why you are doing over complicated for this simple problem, you can just use the constant provided by the <code>string</code> object, I would rather have the following programs to generate random password</p>
<pre><code>import random, sys, string

def pgen(length=8):
    if length &lt; 8:
        length = 8 
    keys = list(string.printable[:-6])
    random.shuffle(keys)
    return ''.join(keys)[:length]


if __name__ == '__main__':
    try:
        print( pgen(int(sys.argv[1])))
    except Exception as e:
        print("Provide length of password \n passwordgen.py &lt;length_of_password&gt;")
</code></pre>
<h3>Outputs</h3>
<pre><code>magautam@nix1947:/tmp$ python passwordgen.py 12
HNLxi!{.qe=b

magautam@nix1947:/tmp$ python passwordgen.py 45
}w5u?+C=e[DfI.n'*1G(m{r0FH|UBKz/@kL&gt;;Sh`tEW8-
</code></pre>
</div>
<span class="comment-copy">Here's a hint: name your identifiers <i>descriptively</i>. Naming variables/functions <code>a</code>, <code>b</code>, <code>c</code>, etc. is just asking for confusion and bugs.</span>
<span class="comment-copy">I would suggest one additional improvement beyond what @MattDMo said to make it easier for people to help you. First read the documentation for python random. Everything you're doing with random.random() is much harder to read than built in operations you're performing.</span>
<span class="comment-copy">@MattDMo I named them letters simply because they are used only in for, while, and if statements, and don't have much meaning by themselves.</span>
<span class="comment-copy">In agreement with all the above comments, take a look at  <a href="http://stackoverflow.com/questions/2257441/random-string-generation-with-upper-case-letters-and-digits-in-python" title="random string generation with upper case letters and digits in python">stackoverflow.com/questions/2257441/…</a> first. You will get an idea to optimize your code.</span>
<span class="comment-copy">@Blake I'm not entirely certain what you are talking about.  I did look at the site a little bit beforehand.  The fastest and the easiest solution for me to understand was the random.random(), which I used in the same way I would use similar functions in languages like JavaScript.</span>
<span class="comment-copy">As far as the characters, could you add a input/if group?     <code>punc = input("""Would you like punctuation marks? """)</code> <code>if punc == 'yes':</code> <code>possible_chars = possible_chars + string.punctuation</code>            Would that be syntactically correct?</span>
<span class="comment-copy">@BenKlemp sure, that would work just fine. I just didn't do that in my program to keep things as simple as possible. There are all sorts of ways you can trick it out.</span>
<span class="comment-copy">I will have to get used to the Python style of programming.  The other language of this type that I know is JavaScript, which has a style more similar to what I was writing in.  Thanks though, this was very helpful.</span>
<span class="comment-copy">@BenKlemp yes, Python and JS are most certainly two different beasts altogether. Don't worry, the more programs you read, and the more you write, the more comfortable you'll get. JS is not "batteries included", although with ES6 it's getting a bit easier to do more complicated things more succinctly. Good luck with your studies!</span>
<span class="comment-copy"><code>sys.exit("You need to enter an integer. Please start the program over.")</code> simply exits the program without saying anything.</span>
