<div class="post-text" itemprop="text">
<p>I'm playing now with Python 3.5 interpreter and found very interesting behavior:</p>
<pre><code>&gt;&gt;&gt; (1,2,3,"a",*("oi", "oi")*3)
(1, 2, 3, 'a', 'oi', 'oi', 'oi', 'oi', 'oi', 'oi')
&gt;&gt;&gt; [1,2,3,"a",*range(10)]
[1, 2, 3, 'a', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; ('aw','aw',*range(10),*(x**2 for x in range(10)))
('aw', 'aw', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81)
&gt;&gt;&gt; {"trali":"vali", **dict(q=1,p=2)}
{'q': 1, 'p': 2, 'trali': 'vali'}
&gt;&gt;&gt; {"a",1,11,*range(5)}
{0, 1, 2, 3, 4, 11, 'a'}
</code></pre>
<p>I have never seen that neither in documentation and examples nor in any source code despite several years of my Python experience. And I found it <em>very</em> useful.</p>
<p>And it seems logical for me from point of view of Python grammar. Function arguments and tuple may be parsed with same or similar states.</p>
<p>Is it documented behavior? Where is it documented?</p>
<p>Which versions of Python have this functionality?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is <a href="https://www.python.org/dev/peps/pep-0448/">PEP-448: Additional Unpacking Generalizations</a>, which is new in Python 3.5. </p>
<p>The relevant change-log is in <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations">https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations</a>:</p>
<blockquote>
<p>PEP 448 extends the allowed uses of the <code>*</code> iterable unpacking operator and <code>**</code> dictionary unpacking operator. It is now possible to use an arbitrary number of unpackings in function calls:</p>
<pre><code>&gt;&gt;&gt;

&gt;&gt;&gt; print(*[1], *[2], 3, *[4, 5])
1 2 3 4 5

&gt;&gt;&gt; def fn(a, b, c, d):
...     print(a, b, c, d)
...

&gt;&gt;&gt; fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})
1 2 3 4
</code></pre>
<p>Similarly, tuple, list, set, and dictionary displays allow multiple unpackings:</p>
<pre><code>&gt;&gt;&gt;

&gt;&gt;&gt; *range(4), 4
(0, 1, 2, 3, 4)

&gt;&gt;&gt; [*range(4), 4]
[0, 1, 2, 3, 4]

&gt;&gt;&gt; {*range(4), 4, *(5, 6, 7)}
{0, 1, 2, 3, 4, 5, 6, 7}

&gt;&gt;&gt; {'x': 1, **{'y': 2}}
{'x': 1, 'y': 2}
</code></pre>
</blockquote>
</div>
<span class="comment-copy">That's just <code>*</code> and <code>**</code> unpacking. Are you familiar with that?</span>
<span class="comment-copy">@TigerhawkT3 No. But now I know that it's called <i>unpacking</i>. I used it many times in function calls but never used in this context.</span>
<span class="comment-copy">And I'm guessing you're using 3.5, which has extended functionality for that. It doesn't work on my 3.4 setup on this machine and I only have 3.5 on my other PC. (Never mind, I notice now that you are using 3.5.)</span>
