<div class="post-text" itemprop="text">
<p>I have a python function that turns on some LEDs, then pauses (time.sleep), and then turns off the LEDs via the Raspberry Pi.  It's a bit more complicated than that - it's actually a bunch of LEDs in various patterns so several hundred lines of code.  This function does everything in an infinite loop.  Originally, I called the function in a thread because I have some other code that runs continuously as well.</p>
<p>Now, I need to be able to terminate the function.  This could be required after 10 seconds or 100 seconds.  Each time will just depend.  In looking through the site and researching threading, it doesn't sound wise to just terminate the thread and I can't really use a flag because there are so many lines of code in the function.</p>
<p>Is there an alternative to using threads?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't need much explicit data sharing between threads, you could use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow"><code>multiprocessing</code></a>, which is very similar to the <code>threading</code> module, but uses processes (which can be terminated safely).</p>
</div>
<span class="comment-copy">Thanks, seems to work.  By terminate safely, do you mean just by using ".terminate()" like so:  p = multiprocessing.Process(target=test)      p.start()      p.terminate()     p.join()</span>
<span class="comment-copy">@user1624184: Yup.</span>
