<div class="post-text" itemprop="text">
<p>What my code does is it counts the amount of times a letter has appeared and counts it to the respected letter. So if A appears two times, it will show 2:A. My problem is that i want it to read from a file and when ord() tries to, it cant. I dont know how to work around this.</p>
<pre><code>t=open('lettersTEst.txt','r')
tList=[0]*26
aL=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

idx=0


for char in t:
    ch=ord(char)
    if ch &gt;=65 and ch &lt;= 90:
        pos=int(ch)-65
        tList[pos]+=1

for ele in tList:
    print(idx, ": ", tList[ch])
    idx+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you iterate over a file you get lines. If you want characters you need to iterate over each line as well.</p>
<pre><code>for line in t:
    for char in line:
        ch = ord(char)
        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to loop over the indivdual characters of the each line of the file, and you could use a <code>Counter</code> instead of an array. </p>
<p>And if you want uppercase characters only, then add <code>if char.isupper()</code> before you add to the Counter. </p>
<p>Example</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; with open('lettersTEst.txt') as f:
...     for line in f: 
...         for char in line:
...             c[char] += 1
...
&gt;&gt;&gt; for k,v in c.items():
...     print('{}:{}'.format(k,v))
...
a:2
 :4
e:1
g:1
i:3
h:1
m:1
l:1
n:1
p:1
s:4
r:1
t:2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While I prefer @JohnKugelman's answer over my own, I'd like to show two alternate methods of iterating over every character of a file in a single for loop</p>
<p>The first is using the second form of <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow"><code>iter</code></a> using a callable (read one character) and a sentinel (keep calling the function until it returns this value) In this case I'd use <a href="https://docs.python.org/3.5/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> to make the function that reads one byte:</p>
<pre><code>import functools

read_a_byte = functools.partial(t.read, 1)
for char in iter(read_a_byte,''):
    ch = ord(char)
    ...
</code></pre>
<p>The second is frequently used to flatten two dimensional lists, <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow"><code>itertools.chain.from_iterable</code></a> takes something that is iterated over (the file) and chains each generated value (each line) together in iteration.</p>
<pre><code>import itertools
char_iterator = itertools.chain.from_iterable(t)
for char in char_iterator:
    ch = ord(char)
    ...
</code></pre>
<p>Then you could pass either to <code>collections.Counter</code> to construct a basic counter but it wouldn't follow the same logic you have applied with <code>ord</code>:</p>
<pre><code>read_a_byte = functools.partial(t.read, 1)
c = collections.Counter(iter(read_a_byte,''))

&gt;&gt;&gt; pprint.pprint(dict(c))
{'a': 8,
 'b': 2,
 'c': 9,
 'd': 4,
 'e': 11,
 ...}
</code></pre>
</div>
<span class="comment-copy">I hope this is an exercise.  There are lots of lower case letters not in the range 65-90.  - Grüßen!  (Greetings! in German).</span>
<span class="comment-copy">yeah, its not that serious. Its more of a practice for the midterm.</span>
<span class="comment-copy"><code>open</code> returns a file object.  What do you <i>get</i> when iterate over a file object?  Try adding <code>print(char)</code> as the first line in the <code>for</code> suite.</span>
<span class="comment-copy">wow, i feel like an idiot. Thank you!</span>
<span class="comment-copy">This does not do the same thing as the OP is trying to do though, they are only keeping a count for capital letters.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen Sure. The if statement can be added. Hence, I said <i>example</i></span>
