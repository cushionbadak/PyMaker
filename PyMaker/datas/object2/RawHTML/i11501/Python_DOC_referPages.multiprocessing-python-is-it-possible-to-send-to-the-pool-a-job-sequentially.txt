<div class="post-text" itemprop="text">
<p>I am trying to send jobs to a Pool one by one (due to memory limits I cannot use map). Is it possible for the pool to digest if it has available workers and otherwise to wait?
e.g. can I do something like this?
<code>
p = Pool(n_workers)
for item in list:
    p.work_on_this(item)
</code>
where <code>work_on_this</code> sends the job if the pool has more workers available and otherwise wait until it does.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way the problem can be solved is by using a semaphore initialized with the number of workers. You acquire and release the semaphore before feeding the pool and after a worker has completed the task.</p>
<p>Here's an example working with Python 2.6 or greater.</p>
<pre><code>from threading import Semaphore
from multiprocessing import Pool


def TaskManager:
    def __init__(self, processes):
        self.pool = Pool(processes=processes)
        self.workers = Semaphore(processes)

    def new_task(self):
        """Start a new task, block if all workers are busy."""
        self.workers.acquire()
        self.pool.apply_async(function, callback=self.task_done)

    def task_done(self, results):
        """Called once task is done, releases the caller if blocked."""
        self.workers.release()
</code></pre>
</div>
<span class="comment-copy">You might be looking for something similar to <a href="http://stackoverflow.com/questions/17909132/python-multiprocessing-set-spawning-process-to-wait" title="python multiprocessing set spawning process to wait">stackoverflow.com/questions/17909132/…</a>. With this I think some logic can be built.</span>
<span class="comment-copy">Are you sure you can't use <code>map</code>? Setting <code>chunksize=1</code> will send the jobs one-by-one.</span>
<span class="comment-copy">How about <code>imap</code> instead of <code>map</code>?</span>
<span class="comment-copy">have you considered this: <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">docs.python.org/3/library/…</a>  or <a href="https://pythonhosted.org/futures/#concurrent.futures.ProcessPoolExecutor" rel="nofollow noreferrer">pythonhosted.org/futures/…</a> based on your python version ? This would make your life and implementation really easier.</span>
