<div class="post-text" itemprop="text">
<p>Hi just a quick question. I have a concatenation of files that works flawlessly, but its a bit of a mess. I wondered if there was just a more elegant way to write this:</p>
<pre><code>path = path/to/file/location
with open(path + 'result.txt', 'w') as result, \
        open(path + 'file1.txt') as f1, \
            open(path + 'file2.txt' ) as f2, \
                open(path + 'file3.txt' ) as f3, \
                    open(path + 'file4.txt' ) as f4, \
                        open(path + 'file5.txt' ) as f5, \
                            open(path + 'file6.txt' ) as f6, \
                                open(path + 'file7.txt' ) as f7, \
                                    open(path + 'file8.txt' ) as f8, \
                                        open(path + 'file9.txt' ) as f9, \
                                            open(path + 'file10.txt' ) as f10, \
                                                open(path + 'file11.txt' ) as f11, \
                                                    open(path + 'file12.txt' ) as f12, \
                                                        open(path + 'file13.txt' ) as f13, \
                                                            open(path + 'file14.txt' ) as f14, \
                                                                open(path + 'file15.txt' ) as f15, \
                                                                    open(path + 'file16.txt' ) as f16:
    for line1, line2, line3, line4, line5, line6, line7, line8, \ 
        line9, line10, line11, line12, line13, line14, line15, line16 \
        in zip(f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16):

        result.write('{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
        {}, {}, {}\n'.format(line1.rstrip(), line2.rstrip(), line3.rstrip(), line4.rstrip(), \
        line5.rstrip(), line6.rstrip(), line7.rstrip(), line8.rstrip(), line9.rstrip(), \
        line10.rstrip(), line11.rstrip(), line12.rstrip(), line13.rstrip(), line14.rstrip(), \
        line15.rstrip(), line16.rstrip()))
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could always do it without <code>with</code>, putting the files in a list and closing them manually, in a loop, when everything is done. This will also make the <code>format</code> line much simpler:</p>
<pre><code>path = "path/to/file/location/"
with open(path + 'result.txt', 'w') as result:
    files = [open(path + 'file%d.txt' % (n+1)) for n in range(16)]
    form = ", ".join('{}' for f in files) + '\n'
    for lines in zip(*files):
        result.write(form.format(*map(str.rstrip, lines)))
    for f in files:
        f.close()
</code></pre>
<p>Or using <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow"><code>contextlib.ExitStack</code></a>, as suggested in comments. This way, the opened files are passed to the <code>stack</code> and that will take care of closing the files after the <code>with</code> block.</p>
<pre><code>with open(path + 'result.txt', 'w') as result, contextlib.ExitStack() as stack:
    files = [stack.enter_context(open(path + 'file%d.txt' % (n+1))) for n in range(16)]
    form = ", ".join('{}' for f in files) + '\n'
    for lines in zip(*files):
        result.write(form.format(*map(str.rstrip, lines)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could process the files serially (which gets around the potential problem of having too many files open at once):</p>
<pre><code>result_names = ['result1','result2']
result_index = 0
old_result_path = path + "file1.txt"
for n in xrange(2,17):
    new_result_path = path + (result_names[result_index] if n&lt;16 else 'result.txt')
    input_path = path + "file%d.txt" % n
    with open( old_result_path, 'r' ) as old_input, \
        open( input_path, 'r' ) as new_input, 
            open( new_result_path, 'w' ) as result:
       for line1, line2 in zip( old_input, new_input ):
           result.write('{}, {}\n'.format(line1.rstrip(), line2.rstrip())
    old_result_path = new_result_path
    result_index = 1 - result_index
</code></pre>
<p>This will leave <code>result1.txt</code> and <code>result2.txt</code> lying about, which you may or may not care about cleaning up.</p>
</div>
<span class="comment-copy">Not sure whether it's possible with <code>with</code>, but you can certainly put the file names in a list (or just use a <code>range</code>) and <code>open</code> and <code>.close</code> the files manually in a loop.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/a/3025119/2399799">this question</a>.</span>
<span class="comment-copy">ahhh sorry it is part of a function so the <code>with</code> works in my script. This is just the interesting bit.</span>
<span class="comment-copy">For the <code>with</code> you can use <a href="https://docs.python.org/2/library/contextlib.html#contextlib.nested" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a> (if you are on Python 3), also described in my answer linked by dan-man. For the rest you need to use lists and loops.</span>
<span class="comment-copy">@ben - you might want to edit the title of this question to make it more specific to your usage case: "concatenation" is not a terribly helpful way of describing what you are doing.</span>
