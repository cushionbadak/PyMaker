<div class="post-text" itemprop="text">
<p>I'd like to search a Word 2007 file (.docx) for a text string, e.g., "some special phrase" that could/would be found from a search within Word.  </p>
<p>Is there a way from Python to see the text?  I have no interest in formatting - I just want to classify documents as having or not having "some special phrase".</p>
</div>
<div class="post-text" itemprop="text">
<p>More exactly, a .docx document is a Zip archive in OpenXML format: you have first to uncompress it.<br/>
I downloaded a sample (Google: <em>some search term filetype:docx</em>) and after unzipping I found some folders. The <em>word</em> folder contains the document itself, in file <em>document.xml</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After reading your post above, I made a 100% native Python docx module to solve this specific problem.</p>
<pre><code># Import the module
from docx import *

# Open the .docx file
document = opendocx('A document.docx')

# Search returns true if found    
search(document,'your search string')
</code></pre>
<p>The docx module is at <a href="https://python-docx.readthedocs.org/en/latest/" rel="noreferrer">https://python-docx.readthedocs.org/en/latest/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In this example, "Course Outline.docx" is a Word 2007 document, which does contain the word "Windows", and does not contain the phrase "random other string".</p>
<pre><code>&gt;&gt;&gt; import zipfile
&gt;&gt;&gt; z = zipfile.ZipFile("Course Outline.docx")
&gt;&gt;&gt; "Windows" in z.read("word/document.xml")
True
&gt;&gt;&gt; "random other string" in z.read("word/document.xml")
False
&gt;&gt;&gt; z.close()
</code></pre>
<p>Basically, you just open the docx file (which is a zip archive) using <a href="http://docs.python.org/lib/module-zipfile.html" rel="nofollow noreferrer">zipfile</a>, and find the content in the 'document.xml' file in the 'word' folder.  If you wanted to be more sophisticated, you could then <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">parse the XML</a>, but if you're just looking for a phrase (which you know won't be a tag), then you can just look in the XML for the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>A problem with searching inside a Word document XML file is that the text can be split into elements at any character. It will certainly be split if formatting is different, for example as in Hello <strong>World</strong>. But it <em>can</em> be split at any point and that is valid in OOXML. So you will end up dealing with XML like this even if formatting does not change in the middle of the phrase!</p>
<pre><code>&lt;w:p w:rsidR="00C07F31" w:rsidRDefault="003F6D7A"&gt;

&lt;w:r w:rsidRPr="003F6D7A"&gt;

&lt;w:rPr&gt;

&lt;w:b /&gt; 

&lt;/w:rPr&gt;

&lt;w:t&gt;Hello&lt;/w:t&gt; 

&lt;/w:r&gt;

&lt;w:r&gt;

&lt;w:t xml:space="preserve"&gt;World.&lt;/w:t&gt; 

&lt;/w:r&gt;

&lt;/w:p&gt;
</code></pre>
<p>You can of course load it into an XML DOM tree (not sure what this will be in Python) and ask to get text only as a string, but you could end up with many other "dead ends" just because the OOXML spec is around 6000 pages long and MS Word can write lots of "stuff" you don't expect. So you could end up writing your own document processing library.</p>
<p>Or you can try using <a href="http://www.aspose.com/categories/.net-components/aspose.words-for-.net/default.aspx" rel="noreferrer">Aspose.Words</a>. </p>
<p>It is available as .NET and Java products. Both can be used from Python. One via COM Interop another via JPype. See Aspose.Words Programmers Guide, Utilize Aspose.Words in Other Programming Languages (sorry I can't post a second link, stackoverflow does not let me yet).</p>
</div>
<div class="post-text" itemprop="text">
<p>A docx is just a zip archive with lots of files inside. Maybe you can look at some of the contents of those files? Other than that you probably have to find a lib that understands the word format so that you can filter out things you're not interested in.</p>
<p>A second choice would be to interop with word and do the search through it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>docx2txt</code> to get the text inside the docx, than search in that txt</p>
<pre><code>npm install -g docx2txt
docx2txt input.docx # This will  print the text to stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a docx file is essentially a zip file with an xml inside it.<br/>
the xml contains the formatting but it also contains the text.</p>
</div>
<div class="post-text" itemprop="text">
<p>OLE Automation would probably be the easiest.  You have to consider formatting, because the text could look like this in the XML:</p>
<pre><code>&lt;b&gt;Looking &lt;i&gt;for&lt;/i&gt; this &lt;u&gt;phrase&lt;/u&gt;
</code></pre>
<p>There's no easy way to find that using a simple text scan.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to use the MSWord ActiveX interface to extract the text to search (or, possibly, do the search). I have no idea how you access ActiveX from Python though.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may also consider using the library from <a href="http://openxmldeveloper.org/default.aspx" rel="nofollow noreferrer">OpenXMLDeveloper.org</a></p>
</div>
<span class="comment-copy">Ya i get all the xml file.Now i want to ask you that How can we get all the values like (bold,italic ,color,fonname,space ) and all the formatting setting ,How can we get this values from xml.</span>
<span class="comment-copy">Wait... You wrote an entire module just for this question?!</span>
<span class="comment-copy">@11684 Yes, I had the same problem as the poster, and all I could fine were horrible solutions for invoking .net or Java from Python.</span>
<span class="comment-copy">If I knew how to give you my reputation points, I would award them for this -write-a-solution- answer! So I tweeted it instead. MAJOR THANKS! (total time to solve this problem: 25mins, thanks to someone writing the code for me)</span>
<span class="comment-copy">I think nailer deserves a meme. "Good guy nailer. Sees that a friend is troubled with a code. Writes a library himself."</span>
<span class="comment-copy">Since asterisk imports are an antipattern I'd suggest <code>from docx import document, opendocx</code></span>
<span class="comment-copy">It's probably easier to look for the phrase in the element text (using an XML parser) than having to worry about whether part of your text is matched by an element name.</span>
<span class="comment-copy"><code>OOXML spec is around 6000 pages long</code> : You've got to be kidding me :O</span>
