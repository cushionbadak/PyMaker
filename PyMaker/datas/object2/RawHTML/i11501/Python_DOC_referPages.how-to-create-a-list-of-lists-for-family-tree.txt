<div class="post-text" itemprop="text">
<p>New to python. Learning to create a function that results a list of lists... for example, something that can represent a family tree.  Here is what I came up with:</p>
<pre><code>def familytree(root):
        many = int(input('How many children does "' + root[0] + '" have? '))
        if many &gt; 0:
            root.append([[] for y in range(many)])
            z = root[1]
            for j in range(many):
                name = [input("Give name of one of " + root[0] + "'s children?")]
                z[j] = name
                familytree(name)
        print(root)
</code></pre>
<p>Seems to work...</p>
<pre><code>['A', [['B', [['D', [['G'], ['H']]], ['E', [['I']]]]], ['C', [['F', [['J'], ['K']]]]]]]
</code></pre>
<p>... but results unnecessary brackets and print outputs.</p>
<p>Any suggestions for better implementation? </p>
<p>Will work on a Class structure next.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how you can only print the final result. I've also simplified some other stuff to make it a little clearer.</p>
<pre><code>def familytree(root):
    many = int(input('How many children does "' + root[0] + '" have? '))
    if many &gt; 0:
        z = []
        root.append(z)
        for j in range(many):
            name = [input("Give name of one of " + root[0] + "'s children?")]
            z.append(name)
            familytree(name)


root = ['A']
familytree(root)
print(root)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One simpler approach without breaking your code: </p>
<pre><code>root = ['A']
def familytree(root):
    many = int(input('How many children does "' + root[0] + '" have? '))
    if many &gt; 0:
        root.extend([] for y in range(many))
        for j in root[1:]: 
            name = input("Give name of one of " + root[0] + "'s children? ")
            j.append(name)
            familytree(j)

print(familytree(root)) 
</code></pre>
<p>You might also make use of <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow"><code>pprint</code></a> built-in library to pretty-print objects</p>
</div>
<span class="comment-copy">Please refactor using code indentations.</span>
<span class="comment-copy">Do you mean that you want to change the way the list is printed?</span>
<span class="comment-copy">Not really. In addition the the final result I entered above, the function prints many intermediate steps. For example: ['f', [['j'], ['k']]] ['c', [['f', [['j'], ['k']]]]]</span>
<span class="comment-copy">What would the intended output look like? <code>A</code> has 4 children, I give it name <code>B</code> as a single example... then what? How many generations go in, and how do you fill a generation? How do you represent offspring of <code>B</code> in a list that classifies him as part of the same generation as <code>C, D, E</code> who have their own, distinct, descendants?</span>
<span class="comment-copy">The function asks you to name each child individually, in a depth first fashion.  You can fill in as many generations as you desire.  For example, if root ["A"] has 2 children (named B &amp; C), then B has 1 child (named D) and C has 2 (named E &amp; F)... when prompted for names, you would sequentially add them in this order:  root A --&gt; B --&gt; D --&gt; C --&gt; E --&gt; F. (Note: this example is different from my original post)</span>
