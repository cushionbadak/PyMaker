<div class="post-text" itemprop="text">
<p>I'm working on a simple Git/Redmine glue script but I'm having some difficulty using optional arguments with the Python <code>argparse</code> module.</p>
<p>With the following code:</p>
<pre><code>import argparse

class MyClass:
    def StartWork(self, issueNumber, **kwargs):
        if issueNumber is None:
            issueNumber = input("please enter an issue number: ")
        else:
            print("issue number detected")
        print(issueNumber)

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(dest='MyClass-command', help='Command to perform')
subparsers.required = True
startWorkParser = subparsers.add_parser('startwork', help='Command to begin work on a new branch')
startWorkParser.add_argument("issuenumber", type=int, help="The issue number used to create a local branch based on the specified issue number", nargs='?', default=None)
startWorkParser.set_defaults(func=MyClass.StartWork)

# Parse the arguments to make sure we have all the information requried to actually do something.
args = parser.parse_args()
mc = MyClass()

try:
    args.func(mc, **vars(args))
except AssertionError as e:
    print("Error: "+str(e))

# Parse the arguments to make sure we have all the information required to actually do something.
args = parser.parse_args()
</code></pre>
<p>I'd expect a call like this:</p>
<pre><code>python MyClass.py startwork
</code></pre>
<p>...to result in the user being prompted for an issue number. Instead I get:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Projects\RedmnieGlue\MyClass.py", line 23, in &lt;module&gt;
    args.func(mc, **vars(args))
TypeError: StartWork() missing 1 required positional argument: 'issueNumber'
</code></pre>
<p>So why is the <code>nargs='?'</code> not prevailing here?</p>
<p><strong>Edit</strong></p>
<p>If I call it like this:</p>
<pre><code>python MyClass.py startwork -h
</code></pre>
<p>I get this:</p>
<pre><code>usage: class1.py startwork [-h] [issuenumber]

positional arguments:
  issuenumber  The issue number used to create a local branch based on the
               specified issue number

optional arguments:
  -h, --help   show this help message and exit
</code></pre>
<p>...which (based on the <code>[]</code> around <code>issuenumber</code>) suggests to me it <em>is</em> understanding that is an optional argument but something is preventing it from working as I'd expect it to. Something to do with my use of <code>subparsers</code> and calling methods with the arg parser perhaps?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you print the contents of <code>vars(args)</code> before your function call like this:</p>
<pre><code>print(vars(args))
args.func(mc, **vars(args))
</code></pre>
<p>Then you can easily verify whether there is something wrong with the argument parser or not. With a call of the script without arguments (e.g. <code>python myscript.py</code>), you get the following output:</p>
<pre><code>{'MyClass-command': 'startwork', 'issuenumber': None, 'func': &lt;function MyClass.StartWork at 0x000000493898C510&gt;}
</code></pre>
<p>As you can see <code>issuenumber</code> actually is in that dictionary, and it did get the default value. So the error you are seeing is not because of the argument parser (it’s also not an argparse error, so the validation on the arguments—with <code>issuenumber</code> being optional—is absolutely correct).</p>
<p>Instead, what’s going wrong is that the argument <code>issuenumber</code> is not passed to the <em>positional</em> argument when using <code>**vars(args)</code>. The reason that does not happen is actually quite simply:</p>
<p>The dictionary key is <code>issuenumber</code>; the function expects a <code>issueNumber</code> (note the upper case <code>N</code>). So either change the function to use a lowercase <code>issuenumber</code>, or change the argument parser to <a href="https://docs.python.org/3/library/argparse.html#dest" rel="nofollow">store the value in <code>issueNumber</code></a> instead.</p>
</div>
<span class="comment-copy">I'm able to run this code without any errors.</span>
<span class="comment-copy">(1) There is a syntax error in <code>def StartWork(…)</code> (missing trailing colon). (2) The error message does not match the shown code (e.g. there’s no <code>Main</code> function), so whatever is wrong with your code is not showing in your simplified version.</span>
<span class="comment-copy">It was an attempt to pare down the original code into a workable example. I'll fix it so it's a complete working solution...</span>
<span class="comment-copy">@poke - give that a shot now.</span>
<span class="comment-copy">Are you not mixing between the arguments given to your script and the ones the function StartWork get? Doesn't <code>def StartWork(self, issueNumber=None, **kwargs):</code> solve your issue?</span>
<span class="comment-copy">Well spotted on the source of the error @poke and setting <code>issueNumber=None</code> in the definition of the <code>StartWork</code> method makes it work as expected once the case of the method matches that of the argument definition.</span>
<span class="comment-copy">Just one more thing to note; When setting up the name so it always matches what <code>StartWork</code> requires, this works very well: <code>inspect.getargspec(MyClass.StartWork).args[1]</code></span>
