<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16508539/unicodedecodeerror-ascii-codec-cant-decode-byte-0xc2">UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>So I am trying to read data off a .txt file and then find the most common 30 words and print them out.  However, whenever I'm reading my txt file, I receive the error:</p>
<pre><code>"UnicodeDecodeError: 'ascii' codec can't decode byte 0x92 in position 338: ordinal not in range(128)".
</code></pre>
<p>Here is my code:</p>
<pre><code>filename = 'wh_2015_national_security_strategy_obama.txt'
#catches the year of named in the file
year = filename[0:4]
ecount = 30
#opens the file and reads it
file = open(filename,'r').read()   #THIS IS WHERE THE ERROR IS
#counts the characters, then counts the lines, replaces the non word characters, slipts the list and changes it all to lower case.
numchar = len(file)
numlines = file.count('\n')
file = file.replace(",","").replace("'s","").replace("-","").replace(")","")
words = file.lower().split()
dictionary = {}
#this is a dictionary of all the words to not count for the most commonly used. 
dontcount = {"the", "of", "in", "to", "a", "and", "that", "we", "our", "is", "for", "at", "on", "as", "by", "be", "are", "will","this", "with", "or",
             "an", "-", "not", "than", "you", "your", "but","it","a","and", "i", "if","they","these","has","been","about","its","his","no"
             "because","when","would","was", "have", "their","all","should","from","most", "were","such","he", "very","which","may","because","--------"
             "had", "only", "no", "one", "--------", "any", "had", "other", "those", "us", "while",
             "..........", "*", "$", "so", "now","what", "who", "my","can", "who","do","could", "over", "-",
             "...............","................", "during","make","************",
             "......................................................................", "get", "how", "after",
             "..................................................", "...........................", "much", "some",
             "through","though","therefore","since","many", "then", "there", "–", "both", "them", "well", "me", "even", "also", "however"}
for w in words:
    if not w in dontcount:
        if w in dictionary:
            dictionary[w] +=1
        else:
            dictionary[w] = 1
num_words = sum(dictionary[w] for w in dictionary)
#This sorts the dictionary and makes it so that the most popular is at the top.
x = [(dictionary[w],w) for w in dictionary]
x.sort()
x.reverse()
#This prints out the number of characters, line, and words(not including stop words.
print(str(filename))
print('The file has ',numchar,' number of characters.')
print('The file has ',numlines,' number of lines.')
print('The file has ',num_words,' number of words.')
#This provides the stucture for how the most common words should be printed out
i = 1
for count, word in x[:ecount]:
    print("{0}, {1}, {2}".format(i,count,word))
    i+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, when opening files in text mode (the default), Python uses your environment settings to choose an appropriate encoding.</p>
<p>If it can't resolve it (or your environment specifically defines ASCII), then it will use ASCII. This is what has happened in your case.</p>
<p>If the ASCII decoder finds anything that's not ASCII, then it will throw an error. In your case, it's thrown an error on the byte 0x92. This is not valid ASCII, nor valid UTF-8. It does make sense in <code>windows-1252</code> encoding, however, where it's a <code>’</code> (Smart quote / 'RIGHT SINGLE QUOTATION MARK'). It could also make sense in other 8bit code pages, but you'll have to know or work that out yourself.</p>
<p>To make your code read <code>windows-1252</code> encoded files, you need to change your <code>open()</code> command to:</p>
<pre><code>file = open(filename, 'r', encoding='windows-1252').read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am learning python, so please take this response with that in mind. </p>
<p>file = open(filename,'r').read()   #THIS IS WHERE THE ERROR IS</p>
<p>From what I have learned so far your read is combined with the open() object creation. The open() function creates the file handle, the read() function reads the file into a string. Both functions would return I presume success/fail, or in the open() function's case in part the file object reference. I am not sure they can be combined successfully.</p>
<p>Thus far from what I have learned this is to be done in 2 steps. 
i.e. </p>
<p>file = open(filename, 'r')  # creates the object
myString = file.read()      # reads the entire object into a string</p>
<p>the open() function creates the file object, so probably returns the object number, or success/fail.</p>
<p>The read, read(n), readline() or readlines() functions are used on the object.</p>
<p>.read reads entire file into a single string
.read(n) read next n bytes into a string
.readline() read the next line into a string
.readline() read entire file into a list of strings</p>
<p>You can split them up and see if the same result happens ??? just a thought from a newbie :)</p>
</div>
<span class="comment-copy">Possible duplicate <a href="http://stackoverflow.com/questions/21129020/how-to-fix-unicodedecodeerror-ascii-codec-cant-decode-byte" title="how to fix unicodedecodeerror ascii codec cant decode byte">stackoverflow.com/questions/21129020/…</a>  &amp;  <a href="http://stackoverflow.com/questions/26619801/unicodedecodeerror-ascii-codec-cant-decode-byte-0x92-in-position-47-ordinal" title="unicodedecodeerror ascii codec cant decode byte 0x92 in position 47 ordinal">stackoverflow.com/questions/26619801/…</a></span>
<span class="comment-copy">See the post I linked to and the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">Python 3 docs for <code>open</code></a>, especially its <code>encoding</code> parameter.  For Python 2, the "new" version of <code>open</code> is in <a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow noreferrer"><code>io.open</code></a>.  PS:  That byte is most likely a nonstandard (Microsoft) right-single-quote, frequently misused as a "curly" apostrophe.</span>
<span class="comment-copy"><b>It's none of the above</b> - all those questions and answers deal with Python 2. Not one will help the OP fix the very simple question relating to Python 3's TextIOWrapper throwing an exception, which has to be corrected by selecting the right encoding</span>
<span class="comment-copy">Assigning a file-like object to a local variable before reading it does not change the contents of that file, nor how they are converted from bytes to strings, which is what caused the <a href="https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError" rel="nofollow noreferrer"><code>UnicodeDecodeError</code></a>.  See the <code>encoding</code> and <code>errors</code> parameters for <a href="https://docs.python.org/3/library/io.html#io.open" rel="nofollow noreferrer"><code>open</code></a>, and also the various <code>read</code>-related methods of the <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer"><code>TextIOBase</code></a> ("text file") it returns.</span>
