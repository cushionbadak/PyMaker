<div class="post-text" itemprop="text">
<p>I've been creating a studying program for learning japanese using python and tried condensing and randomizing it butnow it doesnt do the input,i have analyzed it multiple times and cant find any reason here is what i have for it so far,any suggestions would be appreciate</p>
<pre><code>import sys
import random
start = input("Are you ready to practice Japanese Lesson 1? ")
if start.lower() =="yes":
    print("Ok Let's Begin")
questiontimer = 0
while questiontimer&lt;10:
    questiontimer = (int(questiontimer) + 1)
    WordList = ["konnichiwa"]
rand_word = random.choice(WordList)
if rand_word == "konnichiwa":
answer = input("Question "+ questiontimer +":Say hello In japanese.")
    if rand_word == answer.lower():
        print("Correct!")
    elif randword!= answer.lower():
        print("Incorrect, the answer is Konnichiwa")
</code></pre>
<p>this is as condensed as i could get it to reproduce the problem after</p>
<pre><code>print("Ok Let's Begin")
</code></pre>
<p>it is supposed to pick a random string from the list then ask for input based on which word it is right now it has only one string in the list but still does not print what is in the input or allow input for the answer</p>
</div>
<div class="post-text" itemprop="text">
<p>Some slight improvements from the other answer to condense some code and the desired behavior (I think) you were actually trying to achieve using your original word list, since using just a single word would be redundant here.</p>
<p>You were grabbing a random word, dict's are unordered unless you use an ordered dict of course. So, iterating over the dict's items here is more or less a random permutation of the questions.</p>
<p>Not sure what you were really trying to achieve with the <code>questiontimer</code> so I just ditched it here for a simplistic q and a style program.</p>
<p>Edit: To add explanation for "fancy" parts of code</p>
<p>When we wrap an iterable inside of <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow">enumerate</a> it simply returns a tuple containing the current number we're at in the iterable -- It starts at zero, everything in python is base zero. Forloops, indexing, you name it -- and what would have originally been returned by the iterable if you had just used a simple for loop.</p>
<p>So, <code>enumerate</code> as you see in the documentation just returns this tuple of count / item in iterable. Thus, when we do <code>enumerate(qa.items())</code> we have a tuple containing the count and the key / value pair (which is also a tuple) as returned by iterating over <code>qa.items()</code>. So, we use <code>for i, (k, v) ...</code> to iterate over these items. <code>i</code> is the count here it is the first item in the tuple returned by enumerate and <code>(k, v)</code> is the tuple containing the key / value pair from the dictionary. Note: We have to do <code>i, (k, v)</code> not <code>i, k, v</code>. This would be attempting to unpack 3 seperate items from what's returned by <code>enumerate</code> instead of just the two it contains since it is in fact a 2-tuple. (A tuple contaning two elements)</p>
<p>In fact, should we try to use <code>i, k, v</code> it will throw the following error for this very reason:</p>
<pre><code> ....
     for i, k, v in enumerate(qa.items()):
 ValueError: need more than 2 values to unpack
</code></pre>
<p><code>%s</code> and <code>%d</code> are simply string formatters. You can use these to format different types of data structures into strings. <code>%s</code> is for putting strings into other strings. <code>%d</code> is for putting integers into strings. <code>%f</code> is for putting floats... so on and so forth. </p>
<pre><code>#initial two vars for keeping a tally of incorrect and correct answers by the user.
correct = 0
incorrect = 0

#Just a dict to hold the phrase and the english equivalent in a key / value pair
qa = {"konnichiwa": 'hello',
      "ohayo gozaimasu": "good-morning",
      "oyasuminasai": "goodnight",
      "sayonara": "goodbye",
      "dewa mata": "see you" ,
      "dewa mata ashita": "see you tomorrow",
      "dewa mata raishu": "see you next week",
}

start = input("Are you ready to practice Japanese Lesson 1?")
if start.lower() == "yes":

    for i, (k,v) in enumerate(qa.items()):
         answer = input("Question %d: Say %s in Japanese.\n" % (i, v))
         if answer != k:
               incorrect += 1
               print("Incorrect the answer is: %s" % k)
         else:
               correct += 1
               print("Correct.") 
    print("Num correct: %d\nNum incorrect: %d" % (correct, incorrect))
else:
    print("Maybe next time.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally, I would store your questions and answers together in some list of tuples </p>
<pre><code>qa_list = [("What is hello in Japanese?", "konnichiwa")] 
</code></pre>
<p>Then, you can loop over those </p>
<pre><code>for i, qa in enumerate(qa_list,start=1):
    my_ans = input("Question {}: {}".format(i, qa[0])) 
    if my_ans == qa[1]:
        print("correct") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an <a href="https://en.wikipedia.org/wiki/Infinite_loop" rel="nofollow">infinite loop</a>:</p>
<pre><code>while True:
    questiontimer = "0"
    questiontimer = (int(questiontimer) + 1)
    WordList = ["konnichiwa"]
</code></pre>
<p>The program is stuck at these steps, repeating this code block infinitely. Maybe you can use <code>int(questiontimer) &lt; 10</code> as while condition as below.</p>
<pre><code>questiontimer = 0
while questiontimer &lt; 10:
    questiontimer = questiontimer + 1
    WordList = ["konnichiwa"]
</code></pre>
<p>There are possibly other undesired features in this program, but the answer above solves why your program is stuck after printing only one line. Therefore that's the answer to your question. However, what you want is probably similar to the code below.</p>
<pre><code>import sys
import random

start = input("Are you ready to practice Japanese Lesson 1?")
if start.lower() == "yes":
    print("Ok, Let's Begin")
else:
    print("Bye bye")
    exit(0)

WordList = ["konnichiwa", "foo", "bar"]
rand_word_index = random.randint(0, len(WordList)-1)
rand_word = WordList[rand_word_index]

print("Question "+ str(rand_word_index) +": ")
if rand_word == WordList[0]:
    answer = input(":Say hello In japanese.")
    if rand_word == answer.lower():
        print("Correct!")
    else:
        print("Incorrect, the answer is Konnichiwa")
elif rand_word == WordList[1]:
    answer = input("Say foo In japanese.")
    if rand_word == answer.lower():
        print("Correct!")
    else:
        print("Incorrect, the answer is foo")
elif rand_word == WordList[2]:
    answer = input("Say bar In japanese.")
    if rand_word == answer.lower():
        print("Correct!")
    else:
        print("Incorrect, the answer is bar")
</code></pre>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">Please be more specific about "it doesn't do the input." Edit the code down to an <a href="http://stackoverflow.com/help/mcve">MCVE</a> so we don't have to sift through code that isn't related to the issue.</span>
<span class="comment-copy">The indentation seems off in multiple places. Perhaps it is a copy-paste issue. Perhaps it is indicative of a more fundamental problem.</span>
<span class="comment-copy">What is the purpose of checking <code>if rand_word == answer.lower()</code> <i>after</i> you already know <code>rand_word == "konnichiwa"</code>?</span>
<span class="comment-copy">@cricket_007 in the actual program there are several different values there is  onlyone in here because i needed to shorten it but in the actual there are multiple values and multiple if statements checking to see which one rand_word was assigned to.</span>
<span class="comment-copy">So, adding more questions means more if statements? That's a poor design decision. The less code you have to add for additional data, the better</span>
<span class="comment-copy">1.)questiontimer was determining which question it was when it asked the question and once it finished the final question it was supposed to end the loop 2.)can you please explain some parts of your code like what enumerate is used for ive never used it before, and some of the other parts(like (i,v)) because currently i am only taking an entry level high school class on programming and want to know more about how it works since most of it i dont  understand but it does work perfectly.</span>
<span class="comment-copy">Sure I'll edit them in instead of putting it in a comment. One moment.</span>
<span class="comment-copy">I think I explained everything that may have been confusing.</span>
<span class="comment-copy">yes this solved most questions although for some words i want it to print something that it wouldnt  on other ones like for Ohayo Gozaimasu i want for it to mention that the u at the end of gozaimasu is silent and let them know this whether its correct or incorrect</span>
<span class="comment-copy">so with your explanation im starting to understand more like i was looking at the two %d for num correct and incorrect and figured out that the (correct,incorrect)) determines the value  for each %d and figured that \n is for printing on the next line which is one thing i was wondering about.</span>
<span class="comment-copy">You do realize that this is still an infinite loop.....Your resetting the questiontimer to be zero eveyrtime then +1'ing it. The <code>int</code> is redundant in <code>while int(questiontimer) ...</code> and OP's indentation is off as well as here.</span>
<span class="comment-copy">I tried the while questiontimer  less than and it didnt work but then i looked on here and realized it is slightly different from the actual i changed it,what was different was it didnt show an if statement inside the if statement it showed it as if it was seperate so i corrected it, it is my first time putting an if statement in another one and couldnt find anything online about if it would interfere do you think you could take a look and let me know?</span>
<span class="comment-copy">@Pythonista after it loops each time it adds 1 to the value so eventually it will reach 10 and stop</span>
<span class="comment-copy">It will now after the answer was edited. In your original code and the original answer you were resetting the counter every single time the <code>while</code> loop iterates and then just adding 1 to it. So, it would have never terminated</span>
<span class="comment-copy">No JacobFox, @Pythonista was right. There was an infinite loop but I edited my answer. Can you define what are you trying to achieve with this program? What are you exactly expecting it to do?</span>
