<div class="post-text" itemprop="text">
<p>my question is how to eliminate all strings from a list, for example if I have  <code>list=['hello',1,2,3,4,'goodbye','help']</code> and the outcome to be <code>list=[1,2,3,4]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance</code></a> to filter out those elements that are string. Also don't name your variable <code>list</code> it will shadow the built in <code>list</code></p>
<pre><code>&gt;&gt;&gt; from numbers import Real
&gt;&gt;&gt; lst = ['hello', 1, 2, 3, 4, 'goodbye', 'help']
&gt;&gt;&gt; [element for element in lst if isinstance(element, Real)]
[1, 2, 3, 4]
</code></pre>
<p>or </p>
<pre><code>&gt;&gt;&gt; [element for element in lst if isinstance(element, int)]
[1, 2, 3, 4]
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; [element for element in lst if not isinstance(element, str)]
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do that using <code>isinstance</code>, but unlike the other answer by <strong>user3100115</strong> I would <em>blacklist types that you don't want</em> instead of whitelist only a few types. Not sure which would be more suitable for your special case, just adding that as alternative. It also works without any imports.</p>
<pre><code>lst = ['hello', 1, 2, 3, 4, 'goodbye', 'help']
filtered = [element for element in lst if not isinstance(element, str)]
print(filtered)
# [1, 2, 3, 4]
</code></pre>
<hr/>
<p>Instead of a list comprehension, you could also use the <code>filter</code> builtin. That returns a generator, so to directly print it, you have to convert it into a list first. But if you're going to iterate over it (e.g. using a <code>for</code>-loop), do not convert it and it will be faster and consume less memory due to "lazy evaluation". You could achieve the same with the example above if you replace the square brackets with round brackets.</p>
<pre><code>lst = ['hello', 1, 2, 3, 4, 'goodbye', 'help']
filtered = list(filter(lambda element: not isinstance(element, str), lst))
print(filtered)
# [1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Either use list comprehension as @user3100115 or use the "lisp/lambda approach"</p>
<pre><code>&gt;&gt; l = [1, 2, 'a', 'b']
&gt;&gt; list(filter(lambda a: isinstance(a, int), l))
[1, 2]
</code></pre>
<p>By the way, do not name your variable <code>list</code>. It is already a python function. :)</p>
</div>
<span class="comment-copy">If you need a <code>lambda</code> to use <code>filter</code>, then a listcomp or genexpr is always going to be faster and equally succinct (assuming a short name for the variable being iterated). Please don't use <code>map</code>/<code>filter</code> if you need a <code>lambda</code> to make them work.</span>
<span class="comment-copy">I added this "lisp" approach for completeness because at the time there was only one answer about list comprehension. I did not know it was slower. Thanks!</span>
