<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/24164160/adding-extra-data-to-django-rest-framework-results-for-entire-result-set">Adding extra data to Django Rest Framework results for entire result set</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>How can I update/append <code>serializer.data</code> in Django Rest Framework?</p>
<p>data = serializer.data.update({"item": "test"}) not working</p>
<p><code>return Response(serializer.data, status=status.HTTP_201_CREATED)</code></p>
<p><code>serializer.data</code> is <code>&lt;class 'rest_framework.utils.serializer_helpers.ReturnDict'&gt;</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately, <code>serializer.data</code> is a property of the class and therefore <strong>immutable</strong>. Instead of adding items to <code>serializer.data</code> you can <strong>copy <code>serializer.data</code> to another <code>dict</code></strong>.  You can try this:</p>
<pre><code>newdict={'item':"test"}
newdict.update(serializer.data)
return Response(newdict, status=status.HTTP_201_CREATED)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html?highlight=property#property" rel="nofollow noreferrer">Read more about <code>property</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You don't.</p>
<p>If you need to pass extra data to the serializer's create/update please do so while calling serializer.save() <a href="http://www.django-rest-framework.org/api-guide/serializers/#passing-additional-attributes-to-save" rel="noreferrer">as explained in the documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively you might use SerializerMethodField to add additional data by adding a custom method to the serializer.</p>
<p><a href="http://www.django-rest-framework.org/api-guide/fields/#serializermethodfield" rel="nofollow noreferrer">http://www.django-rest-framework.org/api-guide/fields/#serializermethodfield</a></p>
<p>You can use such a method to return any data, wether in context of the model or not.</p>
<pre><code>class UserSerializer(serializers.ModelSerializer):
    days_since_joined = serializers.SerializerMethodField()

    class Meta:
        model = User

    def get_days_since_joined(self, obj):
        return (now() - obj.date_joined).days
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>serializer.data</code> object is a instance of ReturnList that is immutable. What you can do to workaround this limitation is transform the <code>serializer.data</code> object into a simple Python list(), then append the value you want so you can use your transformed list in Response() method like this:</p>
<pre><code>def get(self, request):
    serializer = YourAmazingSerializer(many=True)
    new_serializer_data = list(serializer.data)
    new_serializer_data.append({'dict_key': 'dict_value'})
    return Response(new_serializer_data)
</code></pre>
<p>Then, your response will have your new obj</p>
</div>
<div class="post-text" itemprop="text">
<p>We can update the data passed in response with <code>serializer._data</code></p>
<p>sample code</p>
<pre><code>class SampleAPIView(generics.CreateAPIView)
    serializer_class = SampleSerializer

    def perform_update(self, serializer):
        application = serializer.save(status='pending')
        my_response_data = {'id': 110, 'name': 'Batta'}
        serializer._data = out_data
</code></pre>
<p><code>serializer._data</code> will make the magic.
Reference: <a href="https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py#L260" rel="nofollow noreferrer">https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py#L260</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Apart from what <a href="https://stackoverflow.com/a/37111214/2720553">@Linovia</a> has suggested, you can also do something like this:</p>
<pre><code>serializer.data['item'] = 'test'
</code></pre>
<p>Make sure to call this before <code>serializer.is_valid</code> is called.</p>
<p>If you want to add data after <code>serializer</code> validation, you should do like this:</p>
<pre><code>serializer.validated_data['item'] = 'test'
</code></pre>
</div>
<span class="comment-copy">i think this is useful for passing additional data in the <code>Response</code> that are not part of the serializer/model (thus not validated)</span>
<span class="comment-copy">this won't solve the case where you want the serialized data to update a model.</span>
<span class="comment-copy">What use case would there be for adding updating a model with extra data? In that situation the serializer is probably best to be modified. I can see this solution being useful for maybe adding some computed data or something else unrelated to the resource in a response.</span>
<span class="comment-copy">@wdfc I think he may be looking for this: serializer=MySerializer(data=request.data,instance=model_instance,partial=True)  serializer.valid()  serializer.save()</span>
<span class="comment-copy">This is gold. Absolute gold.</span>
<span class="comment-copy">That is hack, but it works, thanks!</span>
<span class="comment-copy">serializer.data['item'] = 'test' is not working</span>
