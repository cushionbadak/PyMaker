<div class="post-text" itemprop="text">
<p>My data looks like this:</p>
<pre><code>{   
    'test1462477941.log': {   'end_diff': 537,
                               'file_epoch': 1462477941,
                               'start_diff': -33},
    'test1462478161.log': {   'end_diff': 317,
                               'file_epoch': 1462478161,
                               'start_diff': 284},
    'test1462478346.log': {   'end_diff': 132,
                               'file_epoch': 1462478346,
                               'start_diff': 99},
}
</code></pre>
<p>What I want to do is find the lowest, positive "start_diff" value in any of the keys and print the relative top level key (the filename). The data structure is throwing me off a bit though.</p>
<p>If using the data above, it shoud find and print out:</p>
<pre><code>test1462478346.log
</code></pre>
<p>Is there an elegant way to do this? If not, I'll take anything</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>filter</code> for removing non positive and <code>min</code> with <code>key</code> for search:</p>
<pre><code>a = {
    'test1462477941.log': {'end_diff': 537,
                           'file_epoch': 1462477941,
                           'start_diff': -33},
    'test1462478161.log': {'end_diff': 317,
                           'file_epoch': 1462478161,
                           'start_diff': 284},
    'test1462478346.log': {'end_diff': 132,
                           'file_epoch': 1462478346,
                           'start_diff': 99},
}

only_positive_start_diff = filter(lambda x: x[1]['start_diff'] &gt; 0, a.items())
min_start_diff = min(only_positive_start_diff, key=lambda x: x[1]['start_diff'])

print min_start_diff[0]  # Min log file
</code></pre>
<p>Without <code>lambda</code> it's look like:</p>
<pre><code>def only_positive(x):
    return x[1]['start_diff'] &gt; 0

def min_start(x):
    return x[1]['start_diff']

only_positive_start_diff = filter(only_positive, a.items())
min_start_diff = min(only_positive_start_diff, key=min_start)

print min_start_diff[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a solution using built-in function <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow">reduce</a>:</p>
<pre><code>import sys
filename, start_diff = reduce(
    lambda curMin, item:
        curMin if item[1]['start_diff']&lt;0 or item[1]['start_diff']&gt;curMin[1] else (item[0], item[1]['start_diff']),
    inputDict.iteritems(),
    ('not_found.log', sys.maxint))

print filename
</code></pre>
<p>Please note that the code is written with Python 2.7. If you use Python 3.x, then you should find reduce function in <a href="https://docs.python.org/3/library/functools.html?highlight=reduce#functools.reduce" rel="nofollow">functools</a>, and dict.iteritems() has been changed to <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict#dict.items" rel="nofollow">dict.items()</a>.</p>
</div>
<span class="comment-copy">Thanks! I'm testing this now. Also, Is there a more explicit way to do this without using lambda, solely for the sake of understanding what is going on better? (Still trying to grasp lambda)</span>
<span class="comment-copy">@Thisisstackoverflow Read about lambda functions in other sources. In fact, there is nothing complicated. But add the code without lambda</span>
