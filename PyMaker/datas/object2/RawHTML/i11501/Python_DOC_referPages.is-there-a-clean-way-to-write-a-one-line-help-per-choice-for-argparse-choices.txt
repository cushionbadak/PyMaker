<div class="post-text" itemprop="text">
<p>With python argaparse "<code>choices</code>" the default help looks like this:</p>
<pre><code>&gt;&gt;&gt; parser.add_argument('move', choices=['rock', 'paper', 'scissors'])

positional arguments:
  {rock,paper,scissors}
</code></pre>
<p>Which works if it's obvious how to pick one, but not so great if each choice needs its own mini-help.</p>
<p>Is there any way to write one line help per choice in a clean way, something along these lines:</p>
<pre><code>parser.add_argument("action",
                    choices=[
                        ["status", help="Shows current status of sys"],
                        ["load", help="Load data in DB"],
                        ["dump", help="Dump data to csv"],
                    ],
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>argparse</code> doesn't support this format. Here is my solution. It isn't nice, but it works.</p>
<pre><code>from argparse import ArgumentParser, RawTextHelpFormatter

choices_helper = { "status": "Shows current status of sys",
                   "load": "Load data in DB",
                   "dump": "Dump data to csv"}

parser = ArgumentParser(description='test', formatter_class=RawTextHelpFormatter)    
parser.add_argument("action",
                    choices=choices_helper,
                    help='\n'.join("{}: {}".format(key, value) for key, value in choices_helper.iteritems()))
</code></pre>
<p><em>Try to use <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow">Sub-commands(subparsers)</a> is the better idea.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>@julivco's answer produces this help:</p>
<pre><code>In [20]: parser.print_help()
usage: ipython3 [-h] {load,status,dump}

test

positional arguments:
  {load,status,dump}  load: Load data in DB
                      status: Shows current status of sys
                      dump: Dump data to csv

optional arguments:
  -h, --help          show this help message and exit
</code></pre>
<p>The <code>argparse</code> handling of <code>choices</code> is deliberately simple.  It tests with <code>value in choices</code>, and iterates through it to construct the <code>{...}</code> string.  There are bug/issues looking at improving the string formatting, but no one has asked for/suggested this sort of help formatting.</p>
<p>====================</p>
<p>Here's a custom Action subclass.  It behaves like the usual <code>store</code>, but borrows help formatting ideas from the <code>subparser</code> Action class. It expects <code>choices</code> to be a dictionary (that could easily be changed to a list of lists or tuples).</p>
<pre><code>class NewAction(argparse._StoreAction):
    class _ChoicesPseudoAction(argparse.Action):
        # from _SubParsersAction
        def __init__(self, name, aliases, help):
            metavar = dest = name
            if aliases:
                metavar += ' (%s)' % ', '.join(aliases)
            sup = super(NewAction._ChoicesPseudoAction, self)
            sup.__init__(option_strings=[], dest=dest, help=help,
                         metavar=metavar)

    def make_help(self):
        # build list used for help display
        self._choices_actions = []    
        for key in self.choices:        
            help = choice_dict[key]
            choice_action = self._ChoicesPseudoAction(key, [], help)
            self._choices_actions.append(choice_action)

    def _get_subactions(self):
        # called by HelpFormater
        return self._choices_actions

choice_dict = { "status": "Shows current status of sys",
            "load": "Load data in DB",
            "dump": "Dump data to csv"}

parser = argparse.ArgumentParser()
a = parser.add_argument('--foo', action=NewAction, choices=choice_dict, help='choices help')
a.make_help()

parser.print_help()
print(parser.parse_args('--foo status'.split()))
print(parser.parse_args())
</code></pre>
<p>output looks like:</p>
<pre><code>2028:~/mypy$ python3 stack37094448.py --foo test
usage: stack37094448.py [-h] [--foo {load,dump,status}]

optional arguments:
  -h, --help            show this help message and exit
  --foo {load,dump,status}
                        choices help
    load                Load data in DB
    dump                Dump data to csv
    status              Shows current status of sys
Namespace(foo='status')
usage: stack37094448.py [-h] [--foo {load,dump,status}]
stack37094448.py: error: argument --foo: invalid choice: 'test' (choose from 'load', 'dump', 'status')
</code></pre>
</div>
<span class="comment-copy">Don't know about argparse, but I doubt that would be supported. There are other modules for argument processing. I like <a href="http://docopt.org/" rel="nofollow noreferrer">docopt.org</a>, for example. Rather than building the help message from the arguments you specify, you specify the help message and docopt figures out from it how to parse your command line.</span>
<span class="comment-copy">why not just add <code>subparsers</code> if we take <code>git</code> for example, you can do, <code>git --help</code> and <code>git commit --help</code>. subparser will allow you to do this</span>
<span class="comment-copy">Can't help reccomend <a href="http://docopt.org" rel="nofollow noreferrer">docopt.org</a> -- it's a billion times better than ArgParse can ever hope to be.</span>
<span class="comment-copy">@Urban48L I hadn't thought of it, but yes this is probably the cleanest solution if you don't want to use other argument parsers such as <a href="http://click.pocoo.org" rel="nofollow noreferrer">clic</a> etc... which is my case here. Thanks.</span>
<span class="comment-copy">I think @Urban48 's comment should be an answer. This is what I ended up implementing.</span>
<span class="comment-copy"><code>argparse doesn't support this</code> And that's why ArgParse is lame :) can't even do GNU-style <code>--help</code> screens with it :(</span>
<span class="comment-copy">In  your argument definition you can just use <code>choices=choices_helper</code>. It will use the dictionary keys as the choices; not need make a list.  I think your approach to pretty-printing a dictionary is great.  It makes a lot of sense to customize the help like this.</span>
<span class="comment-copy">thanks @hpaulj! I will test it and edit my answer.</span>
<span class="comment-copy">@cat: i confirm your opinion. I have a self modified  <code>argparse</code> to do exactly what i want</span>
