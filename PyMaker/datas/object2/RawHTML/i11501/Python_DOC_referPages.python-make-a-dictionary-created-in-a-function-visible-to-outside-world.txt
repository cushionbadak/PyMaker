<div class="post-text" itemprop="text">
<p>Code is as follows:</p>
<pre><code>def create_dict():
  my_dict = {}
  return my_dict

create_dict()
print (my_dict)
</code></pre>
<p>To which I get:</p>
<pre><code>NameError: name 'my_dict' is not defined
</code></pre>
<p>If I assign the returned dictionary like this:</p>
<pre><code>my_dict = create_dict()
</code></pre>
<p>instead of the create_dict() line then it works but this script will be called multiple times so I don't want my_dict being overwritten each time I call it. What I want to be able to do is call the function creat_dict() once at the beginning to create the dictionary then just add/remove things as I see fit. If I keep calling the script then my_dict will always be overwritten with an empty dictionary.</p>
<p>I could do this:</p>
<pre><code>if my_dict exists: #This bit is pseudo code
  my_dict = {}
else:
  pass
</code></pre>
<p>but I'm curious nonetheless whether it is possible to return a 'Global' dictionary from a function (that terminology may be off).</p>
</div>
<div class="post-text" itemprop="text">
<p>Just put <code>global</code> in front of the variable, and conditionally instantiate it.</p>
<pre><code>def create_dict():
  global my_dict
  if 'my_dict' not in globals():
    my_dict = {}

create_dict()
print (my_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think in this case it is good to suggest the use of global variables. </p>
<p>What you need to do is to put the  <code>my_dict = create_dict()</code> line outside that <em>script you keep calling</em>, and put it just once, at the beginning, in whatever is the other place from where you <em>keep calling your script</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you can implement this behavior with the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-global_stmt" rel="nofollow"><code>global</code></a>  statement for example: </p>
<pre><code>def create_dict():
  global my_dict
  my_dict = {}
</code></pre>
<p>To check if <code>my_dict</code> exists in the global scope and to avoid re-assignment inside the function's body you have to do something like the following: </p>
<pre><code>def create_dict():
  if not "my_dict" in globals(): 
        global my_dict
        my_dict = {}
</code></pre>
<p>Here's a little note you have to take into your consideration, it's best to keep the function <code>self-contained</code>. In other words, global variables assigned inside the function may make your program maintenance a bit harder. I wouldn't be harsh here and say avoid them at all costs, but I'd rather say, use them when and only when you think they're truly necessary. The Zen of Python says: "Simple is better than complex."</p>
</div>
<span class="comment-copy"><code>my_variable_on_the_outside = create_dict()</code>. You'll have to find another way to persist the data so that it is not "an empty dictionary" each time a <i>new process</i> is run.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/423379/using-global-variables-in-a-function-other-than-the-one-that-created-them">Using global variables in a function other than the one that created them</a></span>
<span class="comment-copy">What do you mean by "but this script will be called multiple times so I don't want my_dict being overwritten each time I call it"? if you need to create the dict once at the beginning, you should call that function just one time.</span>
<span class="comment-copy">This was exactly what I was looking for, thank you. As alluded to in answers below is there any reason NOT to use globals?</span>
<span class="comment-copy">There are some cases where you need to use globals, but they are rare. IMHO, in this case is probably a poor design what is making you wanting to use them. If you show how you are structuring your code, I'm sure there is a cleaner way to satisfy your requirements. The use of global variables is known to be bad because it reduces modularity and by this reason it can introduce serious, hard to track, bugs in your code. Specially if these variables are not read-only.</span>
<span class="comment-copy">You should use <code>my_dict not in globals()</code> instead of <code>not my_dict in globals()</code>. See <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 0008</a></span>
<span class="comment-copy">@CodingLambdas My original code works, however, I wrote <code>my_dict</code> instead of <code>"my_dict"</code> in the header of the <code>if</code> statement, because here we check the keys of the dictionary and they're strings in fact. And thank you for noting this.</span>
