<div class="post-text" itemprop="text">
<p>I am quite new to Python and Django. I have a problem with integrating a python package (openpyxl) to my django app. I'd like to use the methods of these files into my views.py file.</p>
<p>My problem is first that I don't know where's the best place to put the openpyxl folder containing all the files in my file hierarchy.
My hierarchy looks like this:
<a href="http://imgur.com/t4iOX98" rel="nofollow">http://imgur.com/t4iOX98</a></p>
<p>Is it well placed? Should I put it outside the international folder? inside the carte_interactive folder? </p>
<p>And my biggest problem is inside the <code>__init__.py</code> of openpyxl. I get errors lines like this one:
<br/>from openpyxl.xml import LXML</p>
<p>Where there is no resolved reference to LXML, but is actually defined in the xml file of openpyxl.
Is it my bad file placement that caused this? or is it Django?, or is it openpyxl's fault? Do anyone have an idea?</p>
<p>You can see openpyxl's source files here, where I downloaded them:
<a href="https://bitbucket.org/openpyxl/openpyxl/src" rel="nofollow">https://bitbucket.org/openpyxl/openpyxl/src</a></p>
<p>If you need any more details, please ask! <br/>
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>I applaud your enthusiasm for wanting to learn Django while being new to Python.  That said, the way you have things set up right now will make your life unnecessarily difficult to manage.</p>
<p>I would first recommend reading up on <a href="https://stackoverflow.com/questions/22841764/best-practice-for-django-project-working-directory-structure">best practices for setting up a Django project</a>.  Just doing a quick google search for "Django project layout best practices" will give you a lot of resources,  but they'll all essentially tell you to do what's in the SO answer above.</p>
<p>The second very basic thing is using <a href="https://docs.python.org/3/installing/" rel="nofollow noreferrer">pip to install and use other python packages</a>.  This is especially important for a django project, where you often have a lot of dependencies outside of Django.  Pip is a program to install additionaly python packages.  They get installed in your PYTHONPATH, which is just a list of filepaths on disk where python will look for additional packages. If you're on a *NIX system, this is usually in something like <code>/usr/lib/python2.7/</code>.  Once you have something in your python path, you can from any piece of code, use other libraries you've installed via the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">python import system</a>.  Essentially, all this more or less does is look through each location in your PYTHONPATHs for the library you're trying to import.  </p>
<p>Finally, in regards specifically to lxml, you will want to install it via apt or some other package installer. (e.g. on ubuntu, <code>apt install python-lxml</code></p>
<p>In order to keep track of all your external python-dependencies, stuff them in a file named "requirements.txt" in the top level directory.  This is a pretty standard thing to do for Django projects, so don't worry about shipping code with ALL dependencies inside the project.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to all of you! I'm using Jetbrains Pycharm and when I wrote <code>import openpyxl</code>, it gave me the choice to install the package. I suppose it does it with pip, which would certainly have worked the same. And I put the package in requirements.txt, so that other users would only have to install this requirement! </p>
<p>It works now! And thanks for the link on the best practices. I'll read that! </p>
</div>
<span class="comment-copy">Try doing <code>pip install openpyxl</code> and then you can do <code>from openpyxl import LXML </code></span>
<span class="comment-copy">@jape that will allow him to use openpyxl locally, but it won't include the dist with his Django app -- so if he packages it up, it will depend on openpyxl but will not contain it (other users will need to pip it as well). correct me if I am wrong</span>
<span class="comment-copy">@tenwest That's a good point. If he wanted to take the route you mentioned, he could place <code>openpyxl</code> as an app alongside <code>carte_interactive</code>, <code>international</code>, etc. I suppose a third option would be to add <code>openpyxl</code> to <code>requirements.txt</code> and include that in the packaged contents. -- That may be an answer to your question as well.</span>
<span class="comment-copy">@tenwest he should be doing the same in production. If he uses a requirements.txt file, he can install the same packages in dev and prod (services like Heroku will use this file automatically).</span>
<span class="comment-copy">Thanks! Didn't think of requirements.txt ! And installing the package on my computer worked too!</span>
<span class="comment-copy">lxml is only a soft dependency for openpyxl which will detect if it is there. The problem the OP has is because he is not following the instructions on installing openpyxl correctly: use pip.</span>
