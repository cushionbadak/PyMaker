<div class="post-text" itemprop="text">
<p>So, I have to load many .mat files with some features to plot it. </p>
<p>Each array to be plotted is loaded into a dictionary:</p>
<pre><code>import numpy as np
import scipy.io as io


dict1 = io.loadmat('file1.MAT')
dict2 = io.loadmat('file2.MAT')  # type = dict
dict3 = io.loadmat('file3.MAT')
...
</code></pre>
<p>so I have to take the dictionarie's element I need, to plot after:</p>
<pre><code>array1 = dict1['data']
array2 = dict2['data']
array3 = dict3['data']
...
</code></pre>
<p>After this, I can plot the data. It works, but looks dumb to me (If I have 100 vectors, it will take some time...).  Is there a better way to make this task?</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that you are talking about dealing with many matrices, you should manage them as a collection. First, let's define your set of files. It could be a tuple, or a list:</p>
<pre><code>Matrix_files = [ 'fileA.MAT', 'file1.MAT', 'no pattern to these names.MAT' ]
</code></pre>
<p>If they happen to have a pattern, you might try generating the names:</p>
<pre><code>Matrix_files = [ 'file{}.MAT'.format(num) for num in range(1,4) ]
</code></pre>
<p>If they share a common location, you might consider using one of the various directory scanning approaches (<code>opendir</code> or <code>glob</code>, to name two).</p>
<p>Once you have a list of filenames, you can read the dictionaries in:</p>
<pre><code>def read_matrix(filespec):
    from scipy.io import loadmat
    md = loadmat(filespec)
    # process md
    return md
</code></pre>
<p>With that, you can either get all the data, or get some of the data:</p>
<pre><code>All_data = [read_matrix(f) for f in Matrix_files]

Some_data = [read_matrix(f)['data'] for f in Matrix_files]
</code></pre>
<p>If you only care about the data, you could skip the function definition:</p>
<pre><code>from scipy.io import loadmat
Just_data = [loadmat(f)['data'] for f in Matrix_files]
</code></pre>
</div>
<span class="comment-copy">Use a loop, maybe?</span>
<span class="comment-copy">Yes, thanks Rad. but how can I store this arrays? Into another array with bigger shape? Just beggining, sorry for noob question. \</span>
<span class="comment-copy">If you need an array of arrays, then yes, Python allows that. Just keep on <code>append</code>ing them I think (check the documentation).</span>
<span class="comment-copy">Have you looked at <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update(otherdict)</code></a>?</span>
<span class="comment-copy">Thanks a lot, @Austin Hastings. It is exactly what IÂ´m looking for. It was very helpful!</span>
