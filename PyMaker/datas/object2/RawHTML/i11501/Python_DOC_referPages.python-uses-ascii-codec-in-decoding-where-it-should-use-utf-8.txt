<div class="post-text" itemprop="text">
<p>I have a piece of code:</p>
<pre><code>with open('filename.txt','r') as textfile:
    kwList = [x.strip('\n') for x in textfile.readlines()]
</code></pre>
<p>I get a: <strong>UnicodeDecodeError : 'ascii' codec can't decode byte 0xc4 in position 5595: ordinal not in range(128) on line 2</strong></p>
<p>The problem is that according the python docs :
<a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">https://docs.python.org/3/library/functions.html#open</a></p>
<p>Python3 uses <code>locale.getpreferredencoding(False)</code> to get the default encoding to use when there is no encoding specified in the open method.</p>
<p>When I run locale.getpreferredencoding(False), I get 'UTF-8'.</p>
<p>Why do I get 'ascii' codec failed in the UnicodeDecodeError when Python should use 'utf-8' to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The locale is taken from the <em>context</em>; on POSIX systems, that means the environment variables, see the <a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap07.html" rel="nofollow noreferrer">POSIX locale documentation</a>. You'll need to reproduce the exact context of your production environment if you want to test what encoding Python will decide on (e.g. copy the environment variables used by the production environment too).</p>
<p>You are probably running your program as a subprocess of something that only sets (or inherits) the effective user, but does not copy the environment for that user. Either an explicit locale has been set by that parent process or, if none is set, the default C locale is used. The default encoding for that locale is ASCII; some systems will report this by the name ANSI_X3.4-1968:</p>
<pre><code>$ LANG=C python -c 'import locale; print(locale.getpreferredencoding(False))'
ANSI_X3.4-1968
</code></pre>
<p>If, for example, your production code is run from cron, then the environment variables are <em>not</em> set when you set a specific user. Set <code>LC_ALL</code> environment variable explicitly at the top of your crontab:</p>
<pre><code>LC_ALL=en.UTF-8
</code></pre>
<p>if your cron implementation supports setting variables this way, or set it on the command line you are going to run:</p>
<pre><code>* * * * *    LC_ALL=nb_NO.UTF-8 /path/to/your/program
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/2229825/where-can-i-set-environment-variables-that-crontab-will-use">Where can I set environment variables that crontab will use?</a></p>
</div>
<span class="comment-copy">The locale depends on the <i>context</i> you are running your script in. Run the <code>locale.getpreferredencoding(False)</code> command in the same context.</span>
<span class="comment-copy">Is the UTF-8 preferred encoding being given in the same run of the same code (e. g. you added a <code>print(locale.getpreferredencoding(False))</code> directly above your <code>with open(...) as textfile</code> or via some other means?</span>
<span class="comment-copy">And why not simply set the <code>encoding</code> argument to the <code>open()</code> call?</span>
<span class="comment-copy">@MartijnPieters, I can pass the encoding to the open() call and I have, this is just out of curiosity. On production servers I face this problem.</span>
<span class="comment-copy">@ChintanShah: your production code may use the same user, but that doesn't mean that that code uses the same locale. If you are running this on a POSIX system (Mac, Linux, etc.) then the encoding is taken from the  <code>LC_CTYPE</code> environment variable, which if not set explicitly is derived from <code>LC_ALL</code> or <code>LANG</code>. So if you production code is run with <code>LANG=C</code> or <code>LC_ALL=C</code>, then the default C locale is used which uses ASCII as the encoding.</span>
<span class="comment-copy">Any idea what might be the reason for getting <code>ANSI_X3.4-1968</code> from <code>LC_ALL=en_US.utf8 python -c 'import locale; print locale.getpreferredencoding(False)'</code> while <code>locale -a</code> returns (amount other results) <code>en_US.utf8</code>?</span>
<span class="comment-copy">@PiotrDobrogost: This can depend on your OS too. I also find that different Python versions are being difficult about the spelling; on Python 3.6, using <code>UTF-8</code> works (so <code>LC_ALL=en_US.UTF-8</code>). I'm looking into this some more now, but it is not quite operating the way I expected it to on my Mac either.</span>
