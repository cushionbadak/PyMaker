<div class="post-text" itemprop="text">
<h2>Problem</h2>
<p>Let's assume that I want to find <code>n**2</code> for all numbers smaller than <code>20000000</code>.</p>
<h3>General setup for all three variants that I test:</h3>
<pre><code>import time, psutil, gc

gc.collect()
mem_before = psutil.virtual_memory()[3]
time1 = time.time()

# (comprehension, generator, function)-code comes here

time2 = time.time()
mem_after =  psutil.virtual_memory()[3]

print "Used Mem = ", (mem_after - mem_before)/(1024**2)  # convert Byte to Megabyte
print "Calculation time = ", time2 - time1
</code></pre>
<h3>Three options to calculate these numbers:</h3>
<p><strong>1. Creating a list of via comprehension:</strong></p>
<pre><code>x = [i**2 for i in range(20000000)]
</code></pre>
<p>It is really slow and time consuming:</p>
<pre><code>Used Mem =  1270  # Megabytes
Calculation time =  33.9309999943  # Seconds
</code></pre>
<p><strong>2. Creating a generator using <code>'()'</code>:</strong></p>
<pre><code>x = (i**2 for i in range(20000000))
</code></pre>
<p>It is much faster than option 1, but still uses a lot of memory:</p>
<pre><code>Used Mem =  611 
Calculation time =  0.278000116348 
</code></pre>
<p><strong>3. Defining a generator function (most efficient):</strong></p>
<pre><code>def f(n):
    i = 0
    while i &lt; n:
        yield i**2
        i += 1
x = f(20000000)
</code></pre>
<p>Its consumption:</p>
<pre><code>Used Mem =  0
Calculation time =  0.0
</code></pre>
<h3>The questions are:</h3>
<ol>
<li>What's the difference between the first and second solutions? Using <code>()</code> creates a generator, so why does it need a lot of memory?</li>
<li>Is there any built-in function equivalent to my third option?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>As others have pointed out in the comments, <code>range</code> creates a <code>list</code> in Python 2. Hence, it is not the generator per se that uses up the memory, but the <code>range</code> that the generator uses:</p>
<pre><code>x = (i**2 for i in range(20000000))  
# builds a 2*10**7 element list, not for the squares , but for the bases

&gt;&gt;&gt; sys.getsizeof(range(100))
872
&gt;&gt;&gt; sys.getsizeof(xrange(100))
40
&gt;&gt;&gt; sys.getsizeof(range(1000))
8720
&gt;&gt;&gt; sys.getsizeof(xrange(1000))
40
&gt;&gt;&gt; sys.getsizeof(range(20000000))
160000072
&gt;&gt;&gt; sys.getsizeof(xrange(20000000))
40
</code></pre>
<p>This also explains why your second version (the generator expression) uses around half the memory of the first version (the list comprehension) as the first one builds two lists (for the bases and the squares) while the second only builds one list for the bases.</p></li>
<li><p><code>xrange(20000000)</code> thus, greatly improves memory usage as it returns a lazy iterable. This is essentially the built-in memory efficient way to iterate over a range of numbers that mirrors your third version (with the added flexibility of <code>start</code>, <code>stop</code> and <code>step</code>):</p>
<pre><code>x = (i**2 for i in xrange(20000000))
</code></pre>
<p>In Python 3, <code>range</code> is essentially what <code>xrange</code> used to be in Python 2. 
However, the Python 3 <code>range</code> object has some nice features that Python 2's <code>xrange</code> doesn't have, like <code>O(1)</code> slicing, contains, etc.</p></li>
</ol>
<h2>Some references:</h2>
<ul>
<li><a href="https://docs.python.org/2/library/functions.html#xrange">Python2 xrange docs</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#ranges">Python3 range docs</a></li>
<li><a href="/q/135041">Stack Overflow - "Should you always favor xrange() over range()?"</a></li>
<li><a href="/a/30081318/4850040">Martijn Pieters excellent answer to "Why is 1000000000000000 in range(1000000000000001) so fast in Python 3?"</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>1.- The object must be created in memory, so in your <strong>second</strong> solution, the generator is <strong>created</strong> but not <strong>computed</strong>, but still has memory, python probably reserve some memory for its computation to be efficient, we don't know about the interpreter magic, also notice that <code>range</code> funtion creates the full list from <code>0</code> to <code>200000</code>, so in fact you are still building that list in memory.</p>
<p>2.- You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow">itertool.imap</a>:</p>
<pre><code>squares = itertools.imap(lambda x: x**2, xrange(200000))
</code></pre>
</div>
<span class="comment-copy">use <code>xrange</code> in 2.7 for less memory usage.</span>
<span class="comment-copy">That is it - <code>range</code> creates a list anyways in Python 2.x. See <a href="http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x">What is the difference between range and xrange functions in Python 2.X?</a></span>
<span class="comment-copy"><code>() need a lot of memory</code>. This statement is so wrong.</span>
<span class="comment-copy">@AKS two bytes used to be considered a lot :P</span>
<span class="comment-copy">@Jules yes indeed! it <code>used to be</code> :)</span>
<span class="comment-copy">Saying it 'should work much more memory efficiently' is a bit weak of an answer IMHO. Maybe explain how <code>range</code> creates a list in memory, and how that affects OP's answer 2?</span>
<span class="comment-copy">@DonkeyKong: cultural thing. If it doesn't use a lot of memory, it's good, but there's no reason to <i>compliment</i> a solution by bringing absolute numbers. Or, <i>ned gebruddeld isch gnug g'lobt</i>, like schwobaseggl would probably say.</span>
<span class="comment-copy">@MarcusMüller I didn't intend to get the answer to bring absolute numbers, I just felt like the explanation was lacking a little. Though I don't mind it, nice answer :) +1</span>
<span class="comment-copy">@MarcusMüller Hano, hawa. Wenn i dees oim verzähl, dass mr hier uff m Schdäck so a Gschwätz lesa ko :D</span>
