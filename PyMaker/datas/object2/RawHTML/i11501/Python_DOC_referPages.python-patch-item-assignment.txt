<div class="post-text" itemprop="text">
<p>Lets say one wants to add <strong>item assignment</strong> to a class instance from a foreign library:</p>
<pre><code># defined outside our code base
class WeDoNotWantToDeriveThis(object): pass


inst = WeDoNotWantToDeriveThis()
def set_item_func(self, idx, val): print("hi there")
import types
# try to patch item setter
inst.__setitem__ = types.MethodType(set_item_func, inst)
assert hasattr(inst, '__setitem__')
print(type(inst.__setitem__)) # prints "instancemethod"
# try to perform item assignment on inst
inst[0] = None # raises 'object does not support item assignment'
</code></pre>
<p>The question is how to do this properly. Maybe '<strong>setitem</strong>' is not looked up on the instance, but on the class itself to check whether the object does support item assignment?</p>
<p>According to the documentation, implementing the <strong>setitem</strong> method should be sufficient:
<a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow">https://docs.python.org/3/reference/datamodel.html#object.<strong>setitem</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You have to set the instance method on the class:</p>
<pre><code>&gt;&gt;&gt; WeDoNotWantToDeriveThis.__setitem__ = types.MethodType(set_item_func, None, WeDoNotWantToDeriveThis)
&gt;&gt;&gt; inst[0] = None
hi there
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Try implementing <code>__getitem__</code> instead.</span>
<span class="comment-copy">Why not subclass, rather than monkey-patching?</span>
<span class="comment-copy">Because that would require too many code changes. It is just supposed to be a simple workaround for now.</span>
<span class="comment-copy">I really have to patch the instance (if that is possible), because I do not want to introduce side effects for other users of that particular library.</span>
<span class="comment-copy">There can be no side effects, as item assignment is only used by you. Or do you override the default item assignment?</span>
<span class="comment-copy">Your code raises on Python3: TypeError: method expected 2 arguments, got 3</span>
<span class="comment-copy">you're right. There is no default item assignment (at the moment).</span>
<span class="comment-copy">Ooops, I tested on Python2. I don't have a Python3 handy, unfortunatlely.</span>
