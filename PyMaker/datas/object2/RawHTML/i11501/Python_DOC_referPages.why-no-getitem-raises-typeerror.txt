<div class="post-text" itemprop="text">
<p>So the question is pretty simple:
If we have a random class, let's say an int and we try to access a non defined attribute: </p>
<pre><code>my_int = 5
my_int.this_is_a_test
</code></pre>
<p>We will get this error:</p>
<pre><code>AttributeError: 'int' object has no attribute 'this_is_a_test'
</code></pre>
<p>But if we try to access an index of it (in which case Python will do a lookup for a <code>__getitem__</code> attribute):</p>
<pre><code>my_int = 5
my_int[0]
</code></pre>
<p>We get:</p>
<pre><code>TypeError: 'int' object has no attribute '__getitem__'
</code></pre>
<p>What is the logic behind the change in exception type? It seems weird to me that a <code>TypeError</code> is raised, complaining about a missing attribute (<code>AttributeError</code> seems like a much better candidate for that)</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on your intention. </p>
<pre><code>In [1]: my_int = 5

In [2]: my_int.__getitem__(0)  # -&gt; AttributeError

In [3]: my_int[0]  # -&gt; TypeError
</code></pre>
<p>When you use <code>.</code> you implicitly call the <code>getattr</code> function, that naturally raises the <code>AttributeError</code> if the attribute doesn't exist.</p>
<p><strong>Update 2</strong>. Let's look at the bytecode.</p>
<pre><code>In [11]: import dis

In [12]: def via_operator():
             my_int = 5
             my_int[0]


In [13]: def via_getattr():
             my_int = 5
             my_int.__getitem__(0)

In [14]: dis.dis(via_operator)
  2           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (my_int)

  3           6 LOAD_FAST                0 (my_int)
              9 LOAD_CONST               2 (0)
             12 BINARY_SUBSCR       
             13 POP_TOP             
             14 LOAD_CONST               0 (None)
             17 RETURN_VALUE        

In [15]: dis.dis(via_getattr)
  2           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (my_int)

  3           6 LOAD_FAST                0 (my_int)
              9 LOAD_ATTR                0 (__getitem__)
             12 LOAD_CONST               2 (0)
             15 CALL_FUNCTION            1
             18 POP_TOP             
             19 LOAD_CONST               0 (None)
             22 RETURN_VALUE   
</code></pre>
<p>As you see, the <code>[]</code> has a special virtual-machine instruction. From the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow">docs</a></p>
<blockquote>
<p>BINARY_SUBSCR: Implements TOS = TOS1[TOS].</p>
</blockquote>
<p>Hence it's quite natural to raise a <code>TypeError</code>, when you fail at executing an instruction. </p>
<p><strong>Update 1</strong>: Looking at the <code>getattr</code> sources, it's clear that this function can never raise such a <code>TypeError</code>, hence the <code>[]</code> operator doesn't call it under the hood (for the built-in types at least, though it's better to find the sources to clarify this bit). </p>
<pre><code>static PyObject *
builtin_getattr(PyObject *self, PyObject *args)
{
    PyObject *v, *result, *dflt = NULL;
    PyObject *name;

    if (!PyArg_UnpackTuple(args, "getattr", 2, 3, &amp;v, &amp;name, &amp;dflt))
        return NULL;
#ifdef Py_USING_UNICODE
    if (PyUnicode_Check(name)) {
        name = _PyUnicode_AsDefaultEncodedString(name, NULL);
        if (name == NULL)
            return NULL;
    }
#endif

    if (!PyString_Check(name)) {
        PyErr_SetString(PyExc_TypeError,
                        "getattr(): attribute name must be string");
        return NULL;
    }
    result = PyObject_GetAttr(v, name);
    if (result == NULL &amp;&amp; dflt != NULL &amp;&amp;
        PyErr_ExceptionMatches(PyExc_AttributeError))
    {
        PyErr_Clear();
        Py_INCREF(dflt);
        result = dflt;
    }
    return result;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An <code>AttributeError</code> for <code>my_int[0]</code> may be misleading because you aren't trying to access an <em>attribute</em> of <code>my_int</code>, you are trying to access an <em>item</em>. The <code>TypeError</code> is raised because <code>int</code> doesn't support subscripting, and this exception message was updated in Python 3.X.</p>
<p>That being said, it wouldn't be inappropriate to throw an <code>AttributeError</code> that there is no <code>__getitem__</code>. I suspect that this may be a <code>TypeError</code> because numbers (<code>int</code>, <code>float</code>, <code>long</code>) are the only built-in data-types that do not support subscripting. </p>
<p>When this error comes up, it will be due to you thinking that <code>my_int</code> contains an object of a different type, hence the <code>TypeError</code>.</p>
</div>
<span class="comment-copy">If you accessed <code>my_int.__getitem__</code> directly, you'd get an <code>AttributeError</code>. But <i>that's an implementation detail</i> - the problem you're seeing is that it doesn't support indexing, which is a type error.</span>
<span class="comment-copy">Note that the first example references an attribute, while the second example references an item.</span>
<span class="comment-copy">There's no abc <code>Indexable</code> (all kinds of containers use <code>__getitem__</code>), but I guess the <code>TypeError</code> is supposed to hint that <code>int</code> is not of any type that is indexable.</span>
<span class="comment-copy">@jonrsharpe That’s not a very good explanation, given Python’s tradition of “duck typing.” When <code>foo</code> is missing an expected <code>bar</code> attribute, that is a type error from a duck-typed point of view. I suspect that this is simply an accident of history and there’s no deep logic in it.</span>
<span class="comment-copy">Strictly speaking, some really weird types might have a C-level <code>tp_getitem</code> without a Python-level <code>__getitem__</code>, or a Python-level <code>__getitem__</code> without a C-level <code>tp_getitem</code>. <code>tp_getitem</code> is what's used for indexing, so whether a type supports indexing is actually somewhat decoupled from whether it has <code>__getitem__</code>.</span>
<span class="comment-copy">Sure, but square bracket notation is sugar for calling <code>__getitem__</code>, so the real question is if an <code>AttributeError</code> would not be more consistent when trying to implicitly call <code>__getitem__</code> and the method does not exist.</span>
<span class="comment-copy">@timgeb I'm now scrolling through the source code to understand that.</span>
<span class="comment-copy">@timgeb I guess, I've found a reasonable explanation.</span>
<span class="comment-copy">Hey this is really interesting, thanks for the info!</span>
