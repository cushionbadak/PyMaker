<div class="post-text" itemprop="text">
<p>I have the following program that runs for 400 seconds, and throughout the while loop, it iterates over an array of timecodes. When the elapsed runtime of the program is the same as one of the timecodes, it does something. The problem is that it iterates over the array of timecodes many times every second, and currently it "does the thing" multiple times during the second that the condition is met – I only want it to do the thing once... how can I do this?</p>
<pre><code>#!/usr/bin/env python3

import time

def get_sec(s):
    l = s.split(':')
    return int(l[0]) * 60 + int(l[1])

def sec_trim(s):
    l = s.split('.')
    return int(l[0])

times = [
    '00:07',
    '00:34',
    '00:59',
    '01:29',
    '02:22',
    '02:50',
    '03:05',
    '03:21',
    '04:07',
    '04:24',
    '04:58',
    '05:27',
    '06:03',
    '06:22',
    '06:36',
    '06:58',
    '07:07',
    '07:24',
    '07:45',
    '08:40',
    '08:51',
    '09:17',
    '09:31',
    '09:43',
    '10:01',
    '10:10',
    '10:30',
    '11:29',
    '11:42',
    '12:02',
    '12:14',
    '12:26',
    '12:51',
    '13:47',
    '13:58',
    '14:09',
    '14:33'
]



start_time = time.time()
elapsed_time = time.time() - start_time

while elapsed_time &lt; 400:
    for item in times:
        elapsed_time = time.time() - start_time
        if get_sec(item) == sec_trim(str(elapsed_time)):
            print item
        # print sec_trim(str(elapsed_time))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of iterating over the whole list:</p>
<ol>
<li><p>Since the list is sorted, only check the first item.</p></li>
<li><p>Once the time given in the first item has been reached, pop it from the list.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I did not fully understand your question but if you want to run your code sequential every second you can use <code>time.sleep('seconds')</code></p>
<pre><code>import time
start_time = time.time()
elapsed_time = time.time() - start_time
while elapsed_time &lt; 400:
    for item in times:
        elapsed_time = time.time() - start_time
        if get_sec(item) == sec_trim(str(elapsed_time)):
            print item
    time.sleep(1.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I went ahead and wrote up what I put in my comments on a different answer:</p>
<pre><code>start_time = time.time()
elapsed_time = time.time() - start_time

# loop while we have times and we haven't run out of time
for next_str in times:
    if elapsed_time &gt;= 400:
        break

    # if there's time to kill, go to sleep
    elapsed_time = time.time() - start_time
    wait_time = get_sec(next_str) - elapsed_time
    if wait_time &gt; 0:
        time.sleep(wait_time)

    # do the thing
    print next_str
    # print sec_trim(str(elapsed_time))
</code></pre>
</div>
<span class="comment-copy">Do you know about <code>break</code> and <code>continue</code>? <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a></span>
<span class="comment-copy">Yep. You can add a <code>time.sleep(0.5)</code> at the end of the loop, and that will help reduce the cpu load since most of one second you're just checking the time. Or, better yet, just sleep the rest of the time until the next time.</span>
