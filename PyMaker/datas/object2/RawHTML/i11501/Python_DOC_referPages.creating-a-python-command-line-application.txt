<div class="post-text" itemprop="text">
<p>So I wrote a Python 3 library, which serves as an application 'backend'. Now I can sit down with the interpreter, import the source file(s), and hack around using the lib - I know how to do this.</p>
<p>But I would also like to build a command line 'frontent' application using the library. My library defines a few objects which have high-level commands, which should be visible by the application. Such commands may return some data structures and the high-level commands would print them nicely. In other words, the command line app would be a thin wrapper around the lib, passing her input to the library commands, and presenting results to the user.</p>
<p>The best example of what I'm trying to achieve would probably be Mercurial SCM, as it is written in Python and the 'hg' command does what I'm looking for - for instance, 'hg commit -m message' will find the code responsible for the 'commit' command implementation, pass the arguments from the user and do its work. On the way back, it might get some results and print them out nicely.</p>
<p>Is there a general way of doing it in Python? Like exposing classes/methods/functions as 'high level' commands with an annotation? Does anybody know of any tutorials?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow"><code>argparse</code></a>. For example here is the start of my <a href="https://github.com/rsmith-nl/deploy" rel="nofollow"><code>deploy</code></a> script.</p>
<pre><code>def main(argv):
    """
    Entry point for the deploy script.

    Arguments:
        argv: All command line arguments save the name of the script.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='also report if files are the same')
    parser.add_argument('-V', '--version', action='version',
                        version=__version__)
    parser.add_argument('command', choices=['check', 'diff', 'install'])
    fname = '.'.join(['filelist', pwd.getpwuid(os.getuid())[0]])
    args = parser.parse_args(argv)
</code></pre>
<p>It uses an argument with choices to pick a function. You could define a dictionary mapping choices to functions;</p>
<pre><code>cmds = {'check': do_check, 'diff': do_diff, 'install': do_install}
fn = cmds[args.command]
</code></pre>
<p>If you make sure that all the dict keys are in the command choices, you don't need to catch <code>KeyError</code>.</p>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> to parse the command-line arguments. From there, call the methods in your library and print the results.</span>
<span class="comment-copy">Did you look into click <a href="http://click.pocoo.org/5/" rel="nofollow noreferrer">click.pocoo.org/5</a> ?</span>
<span class="comment-copy">Isn't this more of a bash question? You can alias the commands you want in your bash profile to invoke something like <code>python script.py args</code>. And then parse out those arguments using something like <code>argparse</code> in your script.</span>
<span class="comment-copy">@Bahrom My question goes much further than bash aliases. A long time ago I took a look at Mercurial code, and it had annotations on methods like \@command. This annotation somehow magically added the method to some global map. Then, based on the first argument to the hg command (which is pure Python), its 'mercurial.dispatch' module would choose the command and call it. I probably could implement this, but it seems like a lot of work. The question is whether there are some standard components for such things. One answer is argparse, click is another, I will definitely look into it.</span>
<span class="comment-copy">Ah, I see what you mean, sorry, I'm not sure how to accomplish that. Good luck!</span>
<span class="comment-copy">I'm going for argparse. It is easy enough, supports subcommands (think 'git commit' &lt;args&gt;) and is already installed. Thanks.</span>
