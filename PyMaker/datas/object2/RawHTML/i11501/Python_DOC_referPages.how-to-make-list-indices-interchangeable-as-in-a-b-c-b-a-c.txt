<div class="post-text" itemprop="text">
<p>Since ['a', 'b', 'c'] and ['b', 'a', 'c'] have the same elements, but ['a', 'b', 'c'] == ['b', 'a', 'c'] test in python returns False.</p>
<p>I understand that this is due to index sequence. But how to make python recognise that actually the elements in the list are the same?</p>
<p>Here is an example I did that failed the test:</p>
<pre><code>def wordset(wordlist):
"""Return a set of words found in wordlist."""
wordset = []
for i in range(len(wordlist)):
    if wordlist[i] not in wordset:
        wordset.append(wordlist[i])
return wordset

In: wordset(['now', 'is', 'time', 'is', 'now', 'is', 'is']) == ['is', 'now', 'time']
Out: False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's no way to create a regular list that will be equal to both <code>['a', 'b', 'c']</code> and <code>['b', 'a', 'c']</code>. If you need special semantics for <code>==</code> comparisons, you probably need to write your own type:</p>
<pre><code>class wordset(object):
    def __init__(self, words):
        self.words = set(words)

    def __eq__(self, other):
        if isinstance(other, wordset):
            return self.words == other.words
        return self.words == set(other)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this really qualifies as an answer, but if you're simply trying to check for equality between the two lists you can do a couple of things.</p>
<p>For lists <code>list1</code> and <code>list2</code>:</p>
<p>Use <code>set</code></p>
<pre><code>set(list1) == set(list2)
</code></pre>
<p>Use <code>sorted</code>, won't work for multiple recurring elements</p>
<pre><code>sorted(list1) == sorted(list2)
</code></pre>
<p>Use <code>all</code></p>
<pre><code>all(x in list2 for x in list1):
</code></pre>
<p>Use <code>any</code></p>
<pre><code>not any(x for x in list2 if x not in list1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to check if two lists have the same elements <em>and the same number of occurrences</em> I suggest you use a collections.Counter <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">https://docs.python.org/2/library/collections.html#collections.Counter</a></p>
<pre><code>def are_equal(list_a, list_b):
    return Counter(list_a) == Counter(list_b)
</code></pre>
<p>You could also use <code>set</code> like some people suggest but you'll lose all duplicates in the list, so <code>set(['a', 'b', 'b']) == set(['b', 'a'])</code> will actually return <code>True</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to keep your lists in their original orders but compare them without regard to order then you can use sorted(). This will check if your lists have the same number of elements and the same number of occurrences.</p>
<pre><code>x=["a","b","c"]
y=["b","a","c"]

if sorted(x)==sorted(y) # True
</code></pre>
<p>For lists, if you don't care about the order of the list you can do:</p>
<pre><code>x.sort()
y.sort()
x == y # True
</code></pre>
<p><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow">https://docs.python.org/3/howto/sorting.html</a> for list sorting particulars</p>
</div>
<span class="comment-copy">You could sort the lists in-place via <code>.sort()</code>. Your set function will still have the ordering issue.</span>
<span class="comment-copy">Convert them to <code>set()</code> instead of <code>list()</code></span>
<span class="comment-copy">Should <code>[a,b,c,c]==[a,a,b,c]</code> be <code>True</code> or <code>False</code>?</span>
<span class="comment-copy">The "all" and "any" answers do not always work. They both answer <code>True</code> in one direction and <code>False</code> in the other direction if the set of elements of one list is a proper subset of the set of elements of the other list. Your other answers are nice, +1 for those.</span>
<span class="comment-copy">Yes, but you can change the ordering why I didn't specify the lists explicitly. I included them just for completeness. <code>set</code> is what should really be used for this assuming that recurring elements still means equality of course.</span>
