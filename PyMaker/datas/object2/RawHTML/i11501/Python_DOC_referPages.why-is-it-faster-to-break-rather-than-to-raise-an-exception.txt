<div class="post-text" itemprop="text">
<p>After checking a few simple tests, it seems as if it might be faster to break from a loop to end a generator rather than to raise a StopIteration exception. Why is this the case if the standard and accepted method of stopping a generator is using the exception. <a href="https://wiki.python.org/moin/Generators">source</a></p>
<pre><code>In [1]: def f():
   ....:     for i in range(1024):
   ....:         yield None
   ....:         break
   ....:     

In [2]: def g():
   ....:     for i in range(1024):
   ....:         yield None
   ....:         raise StopIteration
   ....:     

In [3]: %timeit for i in f(): pass
1000000 loops, best of 3: 1.22 µs per loop

In [4]: %timeit for i in g(): pass
100000 loops, best of 3: 5.9 µs per loop

In [5]: %timeit for i in f(): pass
1000000 loops, best of 3: 1.22 µs per loop

In [6]: %timeit for i in g(): pass
100000 loops, best of 3: 5.82 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why is this the case if the standard and accepted method of stopping a generator is using the exception.</p>
</blockquote>
<p>The exception <code>StopIteration</code> is raised only when the generator has nothing to produce any more. And, it is not a standard way of stopping a generator midway.</p>
<p>Here are two statements from the documentation on generators about how to stop them properly:</p>
<ol>
<li><a href="https://www.python.org/dev/peps/pep-0479/" rel="noreferrer">PEP 479 -- Change StopIteration handling inside generators</a>:</li>
</ol>
<blockquote>
<p>... the proposal also clears up the confusion about how to terminate a
       generator: the proper way is <code>return</code> , not <code>raise StopIteration</code>.</p>
</blockquote>
<ol start="2">
<li><a href="https://www.python.org/dev/peps/pep-0255/" rel="noreferrer">PEP 255 -- Simple Generators</a></li>
</ol>
<blockquote>
<p>Q. Why allow <code>"return"</code> at all?  Why not force termination to be spelled 
      <code>"raise StopIteration"</code>?</p>
<p>A. The mechanics of <code>StopIteration</code> are low-level details, much like the
         mechanics of IndexError in Python 2.1:  the implementation needs to
         do <em>something</em> well-defined under the covers, and Python exposes
         these mechanisms for advanced users.  That's not an argument for
         forcing everyone to work at that level, though.  <code>"return"</code> means "I'm
         done" in any kind of function, and that's easy to explain and to use.
         Note that <code>"return"</code> isn't always equivalent to <code>"raise StopIteration"</code>
         in try/except construct, either (see the "Specification: Return"
         section).</p>
</blockquote>
<p>So the correct way would be to use a <code>return</code> statement instead of using <code>break</code> or <code>raise StopIteration</code>.</p>
<hr/>
<blockquote>
<p>it seems as if it might be faster to <code>break</code> from a loop to end a generator rather than to raise a <code>StopIteration</code> exception.</p>
</blockquote>
<p>Indeed it is because when raising the exception there is more job to do. You can use the <a href="https://docs.python.org/2/library/dis.html" rel="noreferrer"><code>dis</code></a> module to get a look at the bytecode:</p>
<pre><code>In [37]: dis.dis(f)
  2           0 SETUP_LOOP              26 (to 29)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (1024)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                12 (to 28)
             16 STORE_FAST               0 (i)

  3          19 LOAD_CONST               0 (None)
             22 YIELD_VALUE         
             23 POP_TOP             

  4          24 BREAK_LOOP          
             25 JUMP_ABSOLUTE           13
        &gt;&gt;   28 POP_BLOCK           
        &gt;&gt;   29 LOAD_CONST               0 (None)
             32 RETURN_VALUE        

In [38]: dis.dis(g)
  2           0 SETUP_LOOP              31 (to 34)
              3 LOAD_GLOBAL              0 (range)
              6 LOAD_CONST               1 (1024)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                17 (to 33)
             16 STORE_FAST               0 (i)

  3          19 LOAD_CONST               0 (None)
             22 YIELD_VALUE         
             23 POP_TOP             

  4          24 LOAD_GLOBAL              2 (StopIteration)
             27 RAISE_VARARGS            1
             30 JUMP_ABSOLUTE           13
        &gt;&gt;   33 POP_BLOCK           
        &gt;&gt;   34 LOAD_CONST               0 (None)
             37 RETURN_VALUE
</code></pre>
<p>You can see that almost everything is same but for raising the exception, it has to execute some extra instructions:</p>
<pre><code>24 LOAD_GLOBAL              2 (StopIteration)
27 RAISE_VARARGS            1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do a break then it just exits the loop and in your case there is nothing more to do, so it also exits the function.
If you raise an exception, then it still has to handle all the exception stuff that is going on in the background.</p>
<pre><code>more work == more execution time
</code></pre>
<p>The reason StopIteration may be used (I have never used that one, so don't quote me on that) is to catch it later, or to simply exit a nested loop.
I just had a quick look at the source you gave and it seems to me that StopIteration was only used to illustrate how generators work, but it was not used with a generator.</p>
<p>I hope that answers your question.</p>
</div>
<span class="comment-copy">Maybe the <code>StopIteration</code> instance has to be allocated.</span>
<span class="comment-copy">Raising an exception includes all kinds of stack handling, breaking just breaks the loop. You also mix the patterns. It is not standard of accepted to use <code>raise StopIteration</code> explicitly the way it is used in your examples. Just let the function return.</span>
<span class="comment-copy">@cat Given that a for loop terminates naturally by catching a <code>StopIteration</code> exception raised by the iterator, I wouldn't say it is "blatantly obvious". I'm not sure what Java has to do with the question, other than as a disparaging reference.</span>
<span class="comment-copy">I see a code block which contains something that is neither code more pseudocode. In fact, it looks like prose. Why on Earth is there prose in a <b>code</b> block? We have block quotes for that.</span>
<span class="comment-copy">You are right. But this is just a formatting style I chose because I already used two block quotes to emphasize the OP's questions. Initially, I did have the references from PEP in block quotes but it was looking very bad (at least to me) :-). And, I found using the code block with <code>langauge: None</code> as more readable. Also, I have seen such example on the stackoverflow  (because I didn't have this idea of using None as language from start).</span>
<span class="comment-copy">@QPaysTaxes <a href="http://meta.unix.stackexchange.com/questions/3989/has-something-happened-to-shift-keys-recently/3993#comment6542_3993">laziness</a></span>
<span class="comment-copy">@cat: I don't seem to understand the <code>laziness</code> part?</span>
<span class="comment-copy">@cat: Well, I did use block quotes initially as I mentioned in my comments and I also use backqoute (`) to properly format it. But, later I went ahead and changed it to code block. Though, it seems someone did edit it afterwards :)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/exceptions.html#StopIteration" rel="nofollow noreferrer"><code>StopIteration</code></a> is <i>the</i> signal that an <b>iterator</b> has run its course. In the future manually raising <code>StopIteration</code> from a <b>generator</b> or <b>coroutine</b> function will not even work the same, as it will be converted to a <code>RuntimeError</code>. See <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP 479</a>.</span>
<span class="comment-copy"><code>more work &lt;= more execution time</code> :D</span>
