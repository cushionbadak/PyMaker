<div class="post-text" itemprop="text">
<p>I have add multiple spinboxes and labels in a gui window using a for loop. The for loop creates the spinbox and labels on the same row. Then in the next irritation of the loop creates another row of labels and spinbox. How do I get the value from the spinbox (either when clicked or when incremented or decremented), then do calculation with the value from the clicked spinbox and update a label that is on the same row as the spinbox? </p>
<p>I have added the code I used to create spinboxes using a for loop.</p>
<pre><code>import Tkinter as tk

win = tk.Tk()

val = int()


def exitProgram():
        print("Exit Button pressed")
        win.quit()
        win.destroy()


def createSpinBoxes():

        boxes = []
        lbls = []
        corr = []

        def Correction(event):
                print "you clicked on", event.widget
                w = event.widget
                if isinstance(w, tk.Spinbox):
                        print "what is w??"
                        print w
                        print repr(w)
                        data = float(w.get())
                        data = (data/2)+3
                        print data
                        lbl.configure(text = str(data))

        def TestCorr(data):
                print data


        # Create Spinbox Title label
        lbl = tk.Label(win, text = 'SpBox#',
                       background = "light gray",
                       font = ('Courier' , 10))
        lbl.grid(column = 0, row = 0, sticky = 'we')

        # Create Nominal Value Title label
        lbl = tk.Label(win, text = 'Nom Val',
                       background = "light gray",
                       font = ('Courier' , 10))
        lbl.grid(column = 1, row = 0, sticky = 'w')

        # Create Correction Title label
        lbl = tk.Label(win, text = 'Corr',
                       background = "light gray",
                       font = ('Courier' , 10))
        lbl.grid(column = 2, row = 0, sticky = 'we')

        # Create Value Parameter labels
        valLabels = ['IN VAL ',
                     'OUT VAL',
                     'COR VAL']
        # Nominal values
        valNom = [37.0,    # Value 1
                  64.0,    # Value 2
                  20.0]    # Value 3

        # Nominal value Level Range
        valRange = [33,  # Min Value 1
                   44,  # Max Value 1
                   62,  # Min Value 2
                   68,  # Max Value 2
                   15,  # Min Value 3
                   25]  # Max Value 3


        valRngCnt = 0
        for i in range(0, 3):
                lbl = tk.Label(win,
                               text = valLabels[i],
                               font = ('Courier' , 10),
                               background = "light pink").grid(column = 0, row = i+2, sticky = 'w')
                val = valNom[i]
                SPbox = tk.Spinbox(win,
                                   from_= valRange[valRngCnt],
                                   to = valRange[valRngCnt+1],
                                   font = ('Courier' , 10),
                                   width = 5,
                                   increment=0.1,
                                   textvariable=val,
                                   command=lambda: TestCorr(val))
                SPbox.grid(column = 1, row = i+2, sticky = 'w')
                SPbox.delete(0,"end")
                SPbox.insert(0,valNom[i])

                # Debug lines
                print str(valNom[i]) + " Start Range: " + str(valRange[valRngCnt]) + " End Range: " + str(valRange[valRngCnt+1])
                print valRngCnt

                valRngCnt += 2
                lbl = tk.Label(win,
                               background = "light pink",
                               font = ('Courier' , 10))
                lbl.grid(column = 2, row = i+2, sticky = 'w')
                boxes.append(SPbox)
                lbls.append(lbl)
                corr.append(corr)
                SPbox.bind("&lt;Button-1&gt;", Correction)

                # Debug line
                print boxes


createSpinBoxes()

exitButton  = tk.Button(win,
                        text = "Exit",
                        background = "YELLOW",
                        command = exitProgram)
exitButton.grid(column = 4, row = 7, sticky = 'e')



tk.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>Correction</code> When you do:</p>
<pre><code>lbl.configure(text = str(data))
</code></pre>
<p>You expect <code>lbl</code> to be the one associated with the spinbox clicked on correct? Instead what happens is that it uses the widget assigned to the <code>lbl</code> variable <em>at the time <code>Correction</code> is called</em> which is after the <code>for</code> loop so it will only update the last <code>lbl</code>.</p>
<p>There are two ways to make sure <code>Correction</code> updates the right label:</p>
<ol>
<li>Using a wrapper for <code>Correction</code></li>
</ol>
<p>First this means that <code>Correction</code> needs to take the label to update as an argument:</p>
<pre><code>def Correction(event, label):
    ...
    #instead of lbl you use label
    label.configure(text=str(data))
</code></pre>
<p>and you can use a <code>functools.partial</code> to make the callback wrapper:</p>
<pre><code>wrapper = functools.partial(Correction, label=lbl) #current lbl is saved with the wrapper
SPbox.bind("&lt;Button-1&gt;", wrapper)
 #the two above would replace this line:
#SPbox.bind("&lt;Button-1&gt;", Correction)
</code></pre>
<ol start="2">
<li>Make the label an attribute of the spinbox that triggers the callback.</li>
</ol>
<p>I personally prefer this method, you can create arbitrary attributes on all of tk widgets:</p>
<pre><code>SPbox.label = lbl #make the label an attribute of each SPbox.
#this would be done around the same time as you do the binding:
SPbox.bind("&lt;Button-1&gt;", Correction)
</code></pre>
<p>then instead of <code>lbl</code> in <code>Correction</code> you would update <code>w.label</code>:</p>
<pre><code>#instead of lbl.configure(text = str(data))
w.label.configure(text = str(data)) 
</code></pre>
<hr/>
<p>Note that you may want to phase out using <code>&lt;Button-1&gt;</code> completely since, as you have encountered, it does not always trigger when clicking on the arrows and it definitely doesn't trigger when using the arrow keys, one solution is to change the <code>command</code> of the Spinbox after initialization so that it triggers a virtual event (so that you can still use <code>Correction</code> as it is written) And then bind that virtual event instead of <code>&lt;Button-1&gt;</code>:</p>
<pre><code>SPbox = tk.Spinbox(win,
                   ...,
                   textvariable=val)#,
                   #command=lambda: TestCorr(val)) #we can't make a partial that references SPbox because it doesn't exist yet!
SPbox["command"] = partial(SPbox.event_generate, "&lt;&lt;Change&gt;&gt;")
SPbox.grid(column = 1, row = i+2, sticky = 'w')
...
</code></pre>
<p>Then just change the binding to use <code>&lt;&lt;Change&gt;&gt;</code> and it will generate and handle that event every time it... well changes:</p>
<pre><code>SPbox.label = lbl #make the label an attribute of each SPbox.
SPbox.bind("&lt;&lt;Change&gt;&gt;", Correction)

# OR

SPbox.bind("&lt;&lt;Change&gt;&gt;",partial(Correction, label=lbl)
</code></pre>
</div>
<span class="comment-copy">Can you please provide the code you already have done for this program? It would make answering a lot easier!</span>
<span class="comment-copy">Hey, welcome to SO. You should really take the time to read <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> and <a href="https://stackoverflow.com/help">help center</a>. <a href="https://stackoverflow.com/tour">faq</a> would be helpful too.</span>
<span class="comment-copy">Tadhg, your use of functools seems to have corrected the problem. I had to add 'from functools import partial' to my code and then I had to change 'wrapper = functools.partial(Correction, label=lbl)' to wrapper = partial(Correction, label=lbl)'. I am now in the process of making sure I understand the functools module. I appreciate your insight.</span>
<span class="comment-copy">yes sorry, adding either <code>import functools</code> or the change you did would be necessary to use it.  <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">the documentation for <code>functools.partial</code></a> may help if you haven't already look at it.</span>
<span class="comment-copy">Tadhg, I have looked at the documentation for functools.partial as you suggested. It will take me some time to understand how this works. That's what weekend are for!!?. I noticed there is a delay updating the label when the spinbox up or down arrows are clicked. After clicking the spinbox arrows and then clicking the spinbox itself the label is updated immediately. Is there a way to have an immediate update occur when the spinbox arrows are clicked?</span>
<span class="comment-copy">Sometimes when you click on the arrows it doesn't register as a <code>&lt;Button-1&gt;</code> so it doesn't fire that callback, just <code>TestCorr</code> which does not update the label, I made an edit to my answer, if you accept the answer please consider, well <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accepting it</a>.</span>
<span class="comment-copy">Tadhg, Changing the binding to &lt;&lt;Change&gt;&gt; and making the other changes seems to be working as expected. Trying to figure out how this works has been interesting. I am just now beginning to understand how ‘partial’ from the ‘functools’ module works. I am in the process of applying these concepts to other pieces of code I have written to get a better understanding on how they work. Thanks for your help.</span>
