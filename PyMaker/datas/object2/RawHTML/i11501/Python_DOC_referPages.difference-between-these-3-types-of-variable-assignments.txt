<div class="post-text" itemprop="text">
<p>in Python, it seems I can do any one of the following 3 variable assignments:</p>
<pre><code>g = (3, 4, 5)

g = "(3, 4, 5)"

g = 3, 4, 5
</code></pre>
<p>followed by</p>
<pre><code>print(g)
</code></pre>
<p>and the output is always</p>
<pre><code>(3, 4, 5)
</code></pre>
<p>So, what's the difference between these 3 types of variable assignments?</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>First one is three-element tuple.</li>
<li>Second one is some string.</li>
<li>Third one is same three-element tuple, since in this context parentheses are redundant.</li>
</ul>
<p>Small code snippet will be enough to prove it:</p>
<pre><code>g1 = (3, 4, 5)
g2 = "(3, 4, 5)"
g3 = 3, 4, 5
type(g1)  # &lt;type 'tuple'&gt;
type(g2)  # &lt;type 'str'&gt;
type(g3)  # &lt;type 'tuple'&gt;
g1 == g3  # True
g1 == g2  # False
g2 == g3  # False
g1[0]  # 3, first element of tuple, type: int
g2[0]  # "(", first char of string, type: str
</code></pre>
<p>To sum up, string representation of object and object properties are two different concepts. There may be multiple objects with same string representation but different behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>Case #1 and #3 both result in a <code>tuple</code>, created via an <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow">expression_list</a>; which can be enclosed [in parenthesis], as in your Case #1, or unenclosed, as in your Case #3. Some operations in Python allow either syntax (such as defining a new <code>tuple</code>, or a <code>for...in</code> loop), some require enclosed <code>expression_list</code> (such as <code>if</code> statements); in any case, the result is a <code>tuple</code> object.</p>
<p>Case #2 is clearly a <code>string</code> in any language, Python included. :)</p>
</div>
<span class="comment-copy">1 and 3 are the same, 2 is completely different.</span>
<span class="comment-copy">Just want to add from a comment that someone had posted and then deleted: doing <code>print(repr(g))</code> will produce different results for 2.</span>
