<div class="post-text" itemprop="text">
<p>A first question I asked was <a href="https://stackoverflow.com/questions/37026745/how-to-load-a-pickle-object-and-resolve-certain-references"><em>how to load a pickle object and resolve certain references</em></a>. A next problem I'm facing is that I cannot call <a href="https://docs.python.org/3/library/pickle.html#pickle.dumps" rel="nofollow noreferrer"><code>dumps</code></a> or <a href="https://docs.python.org/3/library/pickle.html#pickle.loads" rel="nofollow noreferrer"><code>loads</code></a> objects to a binary object.</p>
<p>Below is an implementation of the <code>ContextAwarePickler</code> and the <code>ContextAwareUnpickler</code>. How can I use these to convert an object to and back from its binary representation? As far as I know this only works for files.</p>
<pre><code>import pickle

class ContextAwarePickler(pickle.Pickler):
    def persistent_id(self, obj):
        # if this is a context, return the key
        if isinstance(obj, Context):
            return ("Context", context.key)

        # pickle as usual
        return None


class ContextAwareUnpickler(pickle.Unpickler):
    def recover_context(self, key_id):
        ...

    def persistent_load(self, pid):
        type_tag, key_id = pid
        if type_tag == "Context":
            return self.recover_context(key_id)
        else:
            raise pickle.UnpicklingError("unsupported persistent object")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your solution is similar to the one in <code>dill</code> (I'm the author) -- but not as robust.</p>
<p><a href="https://github.com/uqfoundation/dill/blob/cccbea9b715e16b742288e1e5a21a687a4d4081b/dill/temp.py#L169" rel="nofollow">https://github.com/uqfoundation/dill/blob/cccbea9b715e16b742288e1e5a21a687a4d4081b/dill/temp.py#L169</a>   (code snipped reproduced below)</p>
<pre><code>def loadIO(buffer, **kwds):
    """load an object that was stored with dill.temp.dumpIO

    buffer: buffer object

    &gt;&gt;&gt; dumpfile = dill.temp.dumpIO([1, 2, 3, 4, 5])
    &gt;&gt;&gt; dill.temp.loadIO(dumpfile)
    [1, 2, 3, 4, 5]
    """
    import dill as pickle
    if PY3:
        from io import BytesIO as StringIO
    else:
        from StringIO import StringIO
    value = getattr(buffer, 'getvalue', buffer) # value or buffer.getvalue
    if value != buffer: value = value() # buffer.getvalue()
    return pickle.load(StringIO(value))

def dumpIO(object, **kwds):
    """dill.dump of object to a buffer.
Loads with "dill.temp.loadIO".  Returns the buffer object.

    &gt;&gt;&gt; dumpfile = dill.temp.dumpIO([1, 2, 3, 4, 5])
    &gt;&gt;&gt; dill.temp.loadIO(dumpfile)
    [1, 2, 3, 4, 5]
    """
    import dill as pickle
    if PY3:
        from io import BytesIO as StringIO
    else:
        from StringIO import StringIO
    file = StringIO()
    pickle.dump(object, file)
    file.flush()
    return file
</code></pre>
<p>Note that you may want to be careful about things like to <code>flush</code> the buffer on <code>dump</code>, as <code>dill</code> does.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I've found the answer:</p>
<pre><code>class ContextawarePickling :

    @staticmethod
    def load_aware (input_file,context=None) :
        return ContextawareUnpickler(input_file).load()

    @staticmethod
    def dump_aware (object_to_save,output_file):
        ContextawarePickler(output_file).dump(object_to_save)

    @staticmethod
    def loads_aware (stream,context=None) :
        file = io.BytesIO(stream)
        return ContextawarePickling.load_aware(file)

    @staticmethod
    def dumps_aware (object_to_save):
        f = io.BytesIO()
        ContextawarePickling.dump_aware(object_to_save,f)
        return f.getvalue()
</code></pre>
<p>Basically you first create two utility methods: <code>load_aware</code> and <code>dump_aware</code>. Next one can implement <code>loads_aware</code> and <code>dumps_aware</code> where one wraps an <code>io.BytesIO</code> that acts as a handler to which and from which data can be loaded/stored.</p>
</div>
<span class="comment-copy">Thanks for sharing this piece of code. I think this is indeed a more rebust way to do this. Many thanks.</span>
