<div class="post-text" itemprop="text">
<p>This is my first file called user.py</p>
<pre><code>from account import Account    
class User:
   def __init__(self, id):
       self.id = id
       self._account = None

   @property
   def account(self):
       if not self._account:
          self._account = Account(self.id)

       return self._account

   @property
   def has_discount(self)
       return self.account.discount_id &gt; 0
</code></pre>
<p>I have a second file called account.py</p>
<pre><code>class Account:
    def __init__(self, user_id):
        # some process to load DB data
        self.account = load_account(user_id)
        # do something after this to initialize account properties like discount, etc

    @property
    def discount_id(self):
       return self.discount_id
</code></pre>
<p>My goal is to test user.py.  One of the things I want to do is to mock the Account object in user.py for the 'has_discount' property decorator.  I want to test different scenarios where has_discount will return either 0 or any other number.</p>
<p>How do I do this using patch where I can mock the Account object in the User class to return custom values so I can try different tests?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because the <code>user</code> module imports <code>Account</code> in to its own namespace <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow">patching</a> has to be done there instead of the <code>account</code> module. In other words you have to temporarily change what the name <code>Account</code> in the <code>user</code> module refers to:</p>
<pre><code>from user import User
from unittest.mock import patch

with patch('user.Account') as MockAccount:
    MockAccount.return_value.discount_id = 1
    u = User(1)                             
    print(u.has_discount)
    # True

with patch('user.Account') as MockAccount:
    MockAccount.return_value.discount_id = 0
    u = User(1)
    print(u.has_discount)
    # False
</code></pre>
<blockquote>
<p>I want to test different scenarios where has_discount will return either 0 or any other number.</p>
</blockquote>
<p>In its current implementation <code>User.has_discount</code> will always return either <code>True</code> or <code>False</code>. Did you mean <code>Account.discount_id</code>?</p>
</div>
