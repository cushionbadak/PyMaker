<div class="post-text" itemprop="text">
<p>I am practicing using type hints in Python 3.5. One of my colleague uses <code>typing.Dict</code>:</p>
<pre><code>import typing


def change_bandwidths(new_bandwidths: typing.Dict,
                      user_id: int,
                      user_name: str) -&gt; bool:
    print(new_bandwidths, user_id, user_name)
    return False


def my_change_bandwidths(new_bandwidths: dict,
                         user_id: int,
                         user_name: str) -&gt;bool:
    print(new_bandwidths, user_id, user_name)
    return True


def main():
    my_id, my_name = 23, "Tiras"
    simple_dict = {"Hello": "Moon"}
    change_bandwidths(simple_dict, my_id, my_name)
    new_dict = {"new": "energy source"}
    my_change_bandwidths(new_dict, my_id, my_name)

if __name__ == "__main__":
    main()
</code></pre>
<p>Both of them work just fine, there doesn't appear to be a difference. </p>
<p>I have read the <a href="https://docs.python.org/3/library/typing.html"><code>typing</code> module documentation</a>.</p>
<p>Between <code>typing.Dict</code> or <code>dict</code> which one should I use in the program?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no real difference between using a plain <code>typing.Dict</code> and <code>dict</code>, no.</p>
<p>However, <code>typing.Dict</code> is a <a href="https://docs.python.org/3/library/typing.html#generics" rel="noreferrer"><em>Generic type</em></a> that lets you specify the type of the keys and values <em>too</em>, making it more flexible:</p>
<pre><code>def change_bandwidths(new_bandwidths: typing.Dict[str, str],
                      user_id: int,
                      user_name: str) -&gt; bool:
</code></pre>
<p>As such, it could well be that at some point in your project lifetime you want to define the dictionary argument a little more precisely, at which point expanding <code>typing.Dict</code> to <code>typing.Dict[key_type, value_type]</code> is a 'smaller' change than replacing <code>dict</code>.</p>
<p>You can make this even more generic by using <a href="https://docs.python.org/3/library/typing.html#typing.Mapping" rel="noreferrer"><code>Mapping</code></a> or <a href="https://docs.python.org/3/library/typing.html#typing.MutableMapping" rel="noreferrer"><code>MutableMapping</code></a> types here; since your function doesn't need to <em>alter</em> the mapping, I'd stick with <code>Mapping</code>. A <code>dict</code> is one mapping, but you could create other objects that also satisfy the mapping interface, and your function might well still work with those:</p>
<pre><code>def change_bandwidths(new_bandwidths: typing.Mapping[str, str],
                      user_id: int,
                      user_name: str) -&gt; bool:
</code></pre>
<p>Now you are clearly telling other users of this function that your code won't actually <em>alter</em> the <code>new_bandwidths</code> mapping passed in.</p>
<p>Your actual implementation is merely expecting an object that is printable. That may be a test implementation, but as it stands your code would continue to work if you used <code>new_bandwidths: typing.Any</code>, because any object in Python is printable.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/typing.html" rel="noreferrer"><code>typing.Dict</code></a> is a generic version of <code>dict</code>:</p>
<blockquote>
<p><code>class typing.Dict(dict, MutableMapping[KT, VT])</code></p>
<p>A generic version of dict. The usage of this type is as follows:</p>
<pre><code>def get_position_in_index(word_list: Dict[str, int], word: str) -&gt; int:
     return word_list[word]
</code></pre>
</blockquote>
<p>Here you can specify the type of key and values in the dict: <code>Dict[str, int]</code></p>
</div>
<span class="comment-copy">Note that Python doesn't actually <i>enforce</i> type hints. They are <i>just hints</i>, they are not used at runtime, or even compile time, to enforce types. Python may be strongly typed (opposite of weak typing), it is also <i>dynamically typed</i> (opposite of strict typing). See <a href="http://stackoverflow.com/q/11328920">Is Python strongly typed?</a>. External tools like mypy can use these hints to help you write better code, however, in a process called static analysis.</span>
<span class="comment-copy">@MartijnPieters I used to love using type hints in my code alongside MyPy and pretending I could use Python with type safety. Unfortunately it got me A) code that doesn't work on &lt; 3.4 and B) people laughing at me because apparently, type hints are a laughingstock. It's really quite unfortunate.</span>
<span class="comment-copy">@cat: Type hinting was introduced to Python by a Facebook employee, because we had <i>enormous</i> success with adding the same feature to PHP (see <a href="http://hacklang.org/" rel="nofollow noreferrer">hack</a>). Anyone laughing has never built a big project with more than a handful of engineers.</span>
<span class="comment-copy">@MartijnPieters No, <code>def a(b: int) -&gt; bool:</code> is a syntax error in Python 2.7, and I think it's a syntax error in older versions of Python 3 too.</span>
<span class="comment-copy">@cat: you are talking about <i>function annotations</i> here, syntax that was added to Python 3.0. So the only version where that is a syntax error is 2.7, which is why mypy supports putting that information in comments.</span>
<span class="comment-copy">Useful additional examples would be when the dictionary values can be different types e.g. <code>{"name": "bob", "age" : 51}</code>, would that be something like<code>typing.Mapping[Union[str, int]</code> ? What about a nested dictionary like <code>{"person": {"name":"bob", "age": 51}</code> would that be something like <code>typing.Mapping[str, typing.Mapping[Union[str, int]]</code> ? Using <code>Union</code> like that troubles me because it's not a strict schema as there is no ordering. Maybe that's OK, or is there an alternative?</span>
<span class="comment-copy">Nevermind about the <code>Union</code> question I see it's still an open discussion <a href="https://github.com/python/typing/issues/28" rel="nofollow noreferrer">github.com/python/typing/issues/28</a></span>
<span class="comment-copy">Thanks, I concur that his answer is way better.</span>
