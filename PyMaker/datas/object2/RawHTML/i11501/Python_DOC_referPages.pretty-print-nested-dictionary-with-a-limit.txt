<div class="post-text" itemprop="text">
<p>What is the idiomatic Python equivalent of this C/C++ code?</p>
<pre class="lang-cpp prettyprint-override"><code>void foo()
{
    static int counter = 0;
    counter++;
    printf("counter is %d\n", counter);
}
</code></pre>
<p>specifically, how does one implement the static member at the function level, as opposed to the class level? And does placing the function into a class change anything?</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit reversed, but this should work:</p>
<pre><code>def foo():
    foo.counter += 1
    print "Counter is %d" % foo.counter
foo.counter = 0
</code></pre>
<p>If you want the counter initialization code at the top instead of the bottom, you can create a decorator:</p>
<pre><code>def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate
</code></pre>
<p>Then use the code like this:</p>
<pre><code>@static_var("counter", 0)
def foo():
    foo.counter += 1
    print "Counter is %d" % foo.counter
</code></pre>
<p>It'll still require you to use the <code>foo.</code> prefix, unfortunately.</p>
<hr/>
<p>EDIT (thanks to <a href="https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function/279586#comment41067162_279586">ony</a>): This looks even nicer:</p>
<pre><code>def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate

@static_vars(counter=0)
def foo():
    foo.counter += 1
    print "Counter is %d" % foo.counter
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add attributes to a function, and use it as a static variable.</p>
<pre><code>def myfunc():
  myfunc.counter += 1
  print myfunc.counter

# attribute must be initialized
myfunc.counter = 0
</code></pre>
<p>Alternatively, if you don't want to setup the variable outside the function, you can use <code>hasattr()</code> to avoid an <code>AttributeError</code> exception:</p>
<pre><code>def myfunc():
  if not hasattr(myfunc, "counter"):
     myfunc.counter = 0  # it doesn't exist yet, so initialize it
  myfunc.counter += 1
</code></pre>
<p>Anyway static variables are rather rare, and you should find a better place for this variable, most likely inside a class.</p>
</div>
<div class="post-text" itemprop="text">
<p>One could also consider:</p>
<pre><code>def foo():
    try:
        foo.counter += 1
    except AttributeError:
        foo.counter = 1
</code></pre>
<p>Reasoning:</p>
<ul>
<li>much pythonic (<code>ask for forgiveness not permission</code>)</li>
<li>use exception (thrown only once) instead of <code>if</code> branch (think <a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="noreferrer">StopIteration</a> exception)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Other answers have demonstrated the way you should do this. Here's a way you shouldn't:</p>
<pre><code>&gt;&gt;&gt; def foo(counter=[0]):
...   counter[0] += 1
...   print("Counter is %i." % counter[0]);
... 
&gt;&gt;&gt; foo()
Counter is 1.
&gt;&gt;&gt; foo()
Counter is 2.
&gt;&gt;&gt; 
</code></pre>
<p>Default values are initialized only when the function is first evaluated, not each time it is executed, so you can use a list or any other mutable object to store static values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many people have already suggested testing 'hasattr', but there's a simpler answer:</p>
<pre><code>def func():
    func.counter = getattr(func, 'counter', 0) + 1
</code></pre>
<p>No try/except, no testing hasattr, just getattr with a default.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have static variables but you can fake it by defining a callable class object and then using it as a function. <a href="https://stackoverflow.com/a/593046/4561887">Also see this answer</a>.</p>
<pre><code>class Foo(object):
  # Class variable, shared by all instances of this class
  counter = 0

  def __call__(self):
    Foo.counter += 1
    print Foo.counter

# Create an object instance of class "Foo," called "foo"
foo = Foo()

# Make calls to the "__call__" method, via the object's name itself
foo() #prints 1
foo() #prints 2
foo() #prints 3
</code></pre>
<p>Note that <code>__call__</code> makes an instance of a class (object) callable by its own name. That's why calling <code>foo()</code> above calls the class' <code>__call__</code> method. <a href="https://docs.python.org/3/reference/datamodel.html" rel="noreferrer">From the documentation</a>:</p>
<blockquote>
<p>Instances of arbitrary classes can be made callable by defining a <code>__call__()</code> method in their class.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here is a fully encapsulated version that doesn't require an external initialization call:</p>
<pre><code>def fn():
    fn.counter=vars(fn).setdefault('counter',-1)
    fn.counter+=1
    print (fn.counter)
</code></pre>
<p>In Python, functions are objects and we can simply add, or monkey patch, member variables to them via the special attribute <code>__dict__</code>. The built-in <code>vars()</code> returns the special attribute <code>__dict__</code>.   </p>
<p>EDIT: Note, unlike the alternative <code>try:except AttributeError</code> answer, with this approach the variable will always be ready for the code logic following initialization. I think the <code>try:except AttributeError</code> alternative to the following will be less DRY and/or have awkward flow:   </p>
<pre><code>def Fibonacci(n):
   if n&lt;2: return n
   Fibonacci.memo=vars(Fibonacci).setdefault('memo',{}) # use static variable to hold a results cache
   return Fibonacci.memo.setdefault(n,Fibonacci(n-1)+Fibonacci(n-2)) # lookup result in cache, if not available then calculate and store it
</code></pre>
<p>EDIT2: I only recommend the above approach when the function will be called from multiple locations. If instead the function is only called in one place, it's better to use <code>nonlocal</code>:</p>
<pre><code>def TheOnlyPlaceStaticFunctionIsCalled():
    memo={}
    def Fibonacci(n):
       nonlocal memo  # required in Python3. Python2 can see memo
       if n&lt;2: return n
       return memo.setdefault(n,Fibonacci(n-1)+Fibonacci(n-2))
    ...
    print (Fibonacci(200))
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a generator function to generate an iterator.</p>
<pre><code>def foo_gen():
    n = 0
    while True:
        n+=1
        yield n
</code></pre>
<p>Then use it like</p>
<pre><code>foo = foo_gen().next
for i in range(0,10):
    print foo()
</code></pre>
<p>If you want an upper limit:</p>
<pre><code>def foo_gen(limit=100000):
    n = 0
    while n &lt; limit:
       n+=1
       yield n
</code></pre>
<p>If the iterator terminates (like the example above), you can also loop over it directly, like</p>
<pre><code>for i in foo_gen(20):
    print i
</code></pre>
<p>Of course, in these simple cases it's better to use xrange :)</p>
<p>Here is the documentation on the <a href="http://docs.python.org/reference/simple_stmts.html#the-yield-statement" rel="noreferrer">yield statement</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre>
_counter = 0
def foo():
   global _counter
   _counter += 1
   print 'counter is', _counter
</pre>
<p>Python customarily uses underscores to indicate private variables. The only reason in C to declare the static variable inside the function is to hide it outside the function, which is not really idiomatic Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using an attribute of a function as static variable has some potential drawbacks:</p>
<ul>
<li>Every time you want to access the variable, you have to write out the full name of the function. </li>
<li>Outside code can access the variable easily and mess with the value.</li>
</ul>
<p>Idiomatic python for the second issue would probably be naming the variable with a leading underscore to signal that it is not meant to be accessed, while keeping it accessible after the fact. </p>
<p>An alternative would be a pattern using lexical closures, which are supported with the <code>nonlocal</code> keyword in python 3.</p>
<pre><code>def make_counter():
    i = 0
    def counter():
        nonlocal i
        i = i + 1
        return i
    return counter
counter = make_counter()
</code></pre>
<p>Sadly I know no way to encapsulate this solution into a decorator.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def staticvariables(**variables):
    def decorate(function):
        for variable in variables:
            setattr(function, variable, variables[variable])
        return function
    return decorate

@staticvariables(counter=0, bar=1)
def foo():
    print(foo.counter)
    print(foo.bar)
</code></pre>
<p>Much like vincent's code above, this would be used as a function decorator and static variables must be accessed with the function name as a prefix. The advantage of this code (although admittedly anyone might be smart enough to figure it out) is that you can have multiple static variables and initialise them in a more conventional manner.</p>
</div>
<div class="post-text" itemprop="text">
<p>A little bit more readable, but more verbose:</p>
<pre><code>&gt;&gt;&gt; def func(_static={'counter': 0}):
...     _static['counter'] += 1
...     print _static['counter']
...
&gt;&gt;&gt; func()
1
&gt;&gt;&gt; func()
2
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All of previous solutions attach a counter attribute to the function, usually with convoluted logic to handle the initialization. This is inappropriate for new code.</p>
<p>In Python 3, the right way is to use a <code>nonlocal</code> statement:</p>
<pre><code>counter = 0
def foo():
    nonlocal counter
    counter += 1
    print(f'counter is {counter}')
</code></pre>
<p>See <a href="https://www.python.org/dev/peps/pep-3104/" rel="nofollow noreferrer">PEP 3104</a> for the specification of the <code>nonlocal</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <em>idiomatic</em> way is to use a <em>class</em>, which can have attributes.  If you need instances to not be separate, use a singleton.</p>
<p>There are a number of ways you could fake or munge "static" variables into Python (one not mentioned so far is to have a mutable default argument), but this is not the <strong>Pythonic, idiomatic</strong> way to do it.  Just use a class.</p>
<p>Or possibly a generator, if your usage pattern fits.</p>
</div>
<div class="post-text" itemprop="text">
<p>Prompted by <a href="https://stackoverflow.com/questions/19125515/function-instance-variables-inside-a-class/19125964">this question</a>, may I present another alternative which might be a bit nicer to use and will look the same for both methods and functions:</p>
<pre><code>@static_var2('seed',0)
def funccounter(statics, add=1):
    statics.seed += add
    return statics.seed

print funccounter()       #1
print funccounter(add=2)  #3
print funccounter()       #4

class ACircle(object):
    @static_var2('seed',0)
    def counter(statics, self, add=1):
        statics.seed += add
        return statics.seed

c = ACircle()
print c.counter()      #1
print c.counter(add=2) #3
print c.counter()      #4
d = ACircle()
print d.counter()      #5
print d.counter(add=2) #7
print d.counter()      #8    
</code></pre>
<p>If you like the usage, here's the implementation:</p>
<pre><code>class StaticMan(object):
    def __init__(self):
        self.__dict__['_d'] = {}

    def __getattr__(self, name):
        return self.__dict__['_d'][name]
    def __getitem__(self, name):
        return self.__dict__['_d'][name]
    def __setattr__(self, name, val):
        self.__dict__['_d'][name] = val
    def __setitem__(self, name, val):
        self.__dict__['_d'][name] = val

def static_var2(name, val):
    def decorator(original):
        if not hasattr(original, ':staticman'):    
            def wrapped(*args, **kwargs):
                return original(getattr(wrapped, ':staticman'), *args, **kwargs)
            setattr(wrapped, ':staticman', StaticMan())
            f = wrapped
        else:
            f = original #already wrapped

        getattr(f, ':staticman')[name] = val
        return f
    return decorator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of creating a function having a static local variable, you can always create what is called a "function object" and give it a standard (non-static) member variable.</p>
<p>Since you gave an example written C++, I will first explain what a "function object" is in C++. A "function object" is simply any class with an overloaded <code>operator()</code>. Instances of the class will behave like functions. For example, you can write <code>int x = square(5);</code> even if <code>square</code> is an object (with overloaded <code>operator()</code>) and not technically not a "function." You can give a function-object any of the features that you could give a class object.</p>
<pre><code># C++ function object
class Foo_class {
    private:
        int counter;     
    public:
        Foo_class() {
             counter = 0;
        }
        void operator() () {  
            counter++;
            printf("counter is %d\n", counter);
        }     
   };
   Foo_class foo;
</code></pre>
<p>In Python, we can also overload <code>operator()</code> except that the method is instead named <code>__call__</code>:</p>
<p>Here is a class definition:</p>
<pre><code>class Foo_class:
    def __init__(self): # __init__ is similair to a C++ class constructor
        self.counter = 0
        # self.counter is like a static member
        # variable of a function named "foo"
    def __call__(self): # overload operator()
        self.counter += 1
        print("counter is %d" % self.counter);
foo = Foo_class() # call the constructor
</code></pre>
<p>Here is an example of the class being used:</p>
<pre><code>from foo import foo

for i in range(0, 5):
    foo() # function call
</code></pre>
<p>The output printed to the console is:</p>
<pre><code>counter is 1
counter is 2
counter is 3
counter is 4
counter is 5
</code></pre>
<p>If you want your function to take input arguments, you can add those to <code>__call__</code> as well:</p>
<pre><code># FILE: foo.py - - - - - - - - - - - - - - - - - - - - - - - - -

class Foo_class:
    def __init__(self):
        self.counter = 0
    def __call__(self, x, y, z): # overload operator()
        self.counter += 1
        print("counter is %d" % self.counter);
        print("x, y, z, are %d, %d, %d" % (x, y, z));
foo = Foo_class() # call the constructor

# FILE: main.py - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

from foo import foo

for i in range(0, 5):
    foo(7, 8, 9) # function call

# Console Output - - - - - - - - - - - - - - - - - - - - - - - - - - 

counter is 1
x, y, z, are 7, 8, 9
counter is 2
x, y, z, are 7, 8, 9
counter is 3
x, y, z, are 7, 8, 9
counter is 4
x, y, z, are 7, 8, 9
counter is 5
x, y, z, are 7, 8, 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After trying several approaches I end up using an improved version of @warvariuc's answer:</p>
<pre><code>import types

def func(_static=types.SimpleNamespace(counter=0)):
    _static.counter += 1
    print(_static.counter)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I personally prefer the following to decorators. To each their own.</p>
<pre><code>def staticize(name, factory):
    """Makes a pseudo-static variable in calling function.

    If name `name` exists in calling function, return it. 
    Otherwise, saves return value of `factory()` in 
    name `name` of calling function and return it.

    :param name: name to use to store static object 
    in calling function
    :type name: String
    :param factory: used to initialize name `name` 
    in calling function
    :type factory: function
    :rtype: `type(factory())`

    &gt;&gt;&gt; def steveholt(z):
    ...     a = staticize('a', list)
    ...     a.append(z)
    &gt;&gt;&gt; steveholt.a
    Traceback (most recent call last):
    ...
    AttributeError: 'function' object has no attribute 'a'
    &gt;&gt;&gt; steveholt(1)
    &gt;&gt;&gt; steveholt.a
    [1]
    &gt;&gt;&gt; steveholt('a')
    &gt;&gt;&gt; steveholt.a
    [1, 'a']
    &gt;&gt;&gt; steveholt.a = []
    &gt;&gt;&gt; steveholt.a
    []
    &gt;&gt;&gt; steveholt('zzz')
    &gt;&gt;&gt; steveholt.a
    ['zzz']

    """
    from inspect import stack
    # get scope enclosing calling function
    calling_fn_scope = stack()[2][0]
    # get calling function
    calling_fn_name = stack()[1][3]
    calling_fn = calling_fn_scope.f_locals[calling_fn_name]
    if not hasattr(calling_fn, name):
        setattr(calling_fn, name, factory())
    return getattr(calling_fn, name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A static variable inside a Python method</p>
<pre><code>class Count:
    def foo(self):
        try: 
            self.foo.__func__.counter += 1
        except AttributeError: 
            self.foo.__func__.counter = 1

        print self.foo.__func__.counter

m = Count()
m.foo()       # 1
m.foo()       # 2
m.foo()       # 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another (not recommended!) twist on the callable object like <a href="https://stackoverflow.com/a/279598/916373">https://stackoverflow.com/a/279598/916373</a>, if you don't mind using a funky call signature, would be to do</p>
<pre><code>class foo(object):
    counter = 0;
    @staticmethod
    def __call__():
        foo.counter += 1
        print "counter is %i" % foo.counter
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; foo()()
counter is 1
&gt;&gt;&gt; foo()()
counter is 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure this is an old question but I think I might provide some update.</p>
<p>It seems that the performance argument is obsolete. 
The same test suite appears to give similar results for siInt_try and isInt_re2.
Of course results vary, but this is one session on my computer with python 3.4.4 on kernel 4.3.01 with Xeon W3550.
I have run it several times and the results seem to be similar.
I moved the global regex into function static, but the performance difference is negligible. </p>
<pre><code>isInt_try: 0.3690
isInt_str: 0.3981
isInt_re: 0.5870
isInt_re2: 0.3632
</code></pre>
<p>With performance issue out of the way, it seems that try/catch would produce the most future- and cornercase- proof code so maybe just wrap it in function</p>
</div>
<div class="post-text" itemprop="text">
<p>This answer shows that setdefault does not truly satisfy the OPs question of how to create static <strong><em>local</em></strong> variables.</p>
<pre><code>def fn():
    fn.counter = vars(fn).setdefault('counter',-1)
</code></pre>
<p>It works as long as fn. is prefixed  to each variable name. If you remove them like so:</p>
<pre><code>def fn():
   counter = vars(fn).setdefault('counter',-1)
   counter += 1
   print (counter)
</code></pre>
<p>there are no errors but counter is always 0 and that tells me the vars(fn) is NOT accessing local variables but rather a global, probably a decorator or attribute stash.</p>
<p>Had this worked it would have been my preferred solution. However since it doesn't, I'm inclined to go with a fully encapsulated class definition to create such static vars. </p>
<p>IMHO that is the most straightforward. Of course it depends on if you are more familiar with functional vs. OOP coding styles.</p>
</div>
<div class="post-text" itemprop="text">
<p>Soulution n +=1 </p>
<pre><code>def foo():
  foo.__dict__.setdefault('count', 0)
  foo.count += 1
  return foo.count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A global declaration provides this functionality. In the example below (python 3.5 or greater to use the "f"), the <em>counter</em> variable is defined outside of the function. Defining it as global in the function signifies that the "global" version outside of the function should be made available to the function. So each time the function runs, it modifies the value outside the function, preserving it beyond the function.</p>
<pre><code>counter = 0

def foo():
    global counter
    counter += 1
    print("counter is {}".format(counter))

foo() #output: "counter is 1"
foo() #output: "counter is 2"
foo() #output: "counter is 3"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer builds on @claudiu 's  answer.</p>
<p>I found that my code was getting less clear when I always had 
to prepend the function name, whenever I intend to access a static variable.</p>
<p>Namely, in my function code I would prefer to write:</p>
<pre class="lang-py prettyprint-override"><code>print(statics.foo)
</code></pre>
<p>instead of</p>
<pre class="lang-py prettyprint-override"><code>print(my_function_name.foo)
</code></pre>
<p>So, my solution is to :</p>
<ol>
<li>add a <code>statics</code> attribute to the  function</li>
<li>in the function scope, add a local variable <code>statics</code> as an alias to <code>my_function.statics</code></li>
</ol>
<pre class="lang-py prettyprint-override"><code>from bunch import *

def static_vars(**kwargs):
    def decorate(func):
        statics = Bunch(**kwargs)
        setattr(func, "statics", statics)
        return func
    return decorate

@static_vars(name = "Martin")
def my_function():
    statics = my_function.statics
    print("Hello, {0}".format(statics.name))
</code></pre>
<hr/>
<p><em>Remark</em></p>
<p>My method uses a class named <code>Bunch</code>, which is a dictionary that supports 
attribute-style access, a la JavaScript (see the <a href="http://code.activestate.com/recipes/52308-the-simple-but-handy-collector-of-a-bunch-of-named/?in=user-97991" rel="nofollow noreferrer">original article</a> about it, around 2000)</p>
<p>It can be installed via <code>pip install bunch</code></p>
<p>It can also be hand-written like so:</p>
<pre class="lang-py prettyprint-override"><code>class Bunch(dict):
    def __init__(self, **kw):
        dict.__init__(self,kw)
        self.__dict__ = self
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on Daniel's answer (additions):</p>
<pre><code>class Foo(object): 
    counter = 0  

def __call__(self, inc_value=0):
    Foo.counter += inc_value
    return Foo.counter

foo = Foo()

def use_foo(x,y):
    if(x==5):
        foo(2)
    elif(y==7):
        foo(3)
    if(foo() == 10):
        print("yello")


use_foo(5,1)
use_foo(5,1)
use_foo(1,7)
use_foo(1,7)
use_foo(1,1)
</code></pre>
<p>The reason why I wanted to add this part is , static variables are used not only for incrementing by some value, but also check if the static var is equal to some value, as a real life example.</p>
<p>The static variable is still protected and used only within the scope of the function use_foo()</p>
<p>In this example, call to foo() functions exactly as(with respect to the corresponding c++ equivalent) :</p>
<pre><code>stat_c +=9; // in c++
foo(9)  #python equiv

if(stat_c==10){ //do something}  // c++

if(foo() == 10):      # python equiv
  #add code here      # python equiv       

Output :
yello
yello
</code></pre>
<p>if class Foo is defined restrictively as a singleton class, that would be ideal. This would make it more pythonic.</p>
</div>
<span class="comment-copy">There is <b>NO</b> equivalence I am afraid. Even if you do the decorator hack with function attributes, you will be able to access the variable outside, which kinda defeats the point, sadly. Moreover, you will have to hard code the function name in the function, which is very annoying. I would suggest to use a class or module global variables instead with the conventional <code>_</code> prefix.</span>
<span class="comment-copy">in general, when i get to this stage in Python, it's because i need to build a class to regroup a bunch of functions...</span>
<span class="comment-copy">For non-C-programmers, [<a href="https://stackoverflow.com/questions/5033627/static-variable-inside-of-a-function-in-c#5033656](a" title="static variable inside of a function in c%235033656%5d(a">stackoverflow.com/questions/5033627/…</a> static variable inside a function is only visible inside that function's scope, but its lifetime is the entire life of the program, and it's only initialized once). Basically, a persistent counter or storage variable that lives between function calls.</span>
<span class="comment-copy">@lpapp: there kind-of is, it's a <a href="https://stackoverflow.com/questions/12409714/python-class-members">class member</a>. You are correct that we can't prevent other code viewing it or changing it.</span>
<span class="comment-copy">there is only one instance of foo - this one function. all invocations access the same variable.</span>
<span class="comment-copy">Sorry for digging this up, but I'd rather put <code>if "counter" not in foo.__dict__: foo.counter = 0</code> as the first lines of <code>foo()</code>. This would help to avoid code outside the function. Not sure if this was possible back in 2008 though. P.S. Found this answer while searching for possibility to create static function variables, so this thread is still "alive" :)</span>
<span class="comment-copy">@binaryLV: I'd probably prefer that to the first approach. The problem with the first approach is it isn't immediately obvious that <code>foo</code> and <code>foo.counter = </code> are intimately related. however, I ultimately prefer the decorator approach, as there's no way the decorator will not be called and it is semantically more obvious what it does (<code>@static_var("counter", 0)</code> is easier on &amp; makes more sense to my eyes than <code>if "counter" not in foo.__dict__: foo.counter = 0</code>, especially as in the latter you have to use the function name (twice) which might change).</span>
<span class="comment-copy">I upvoted this answer earlier in a rush, but I think this is misleading because python does not offer anything like C/C++ function static variables. Even with this "solution", you can access the "function static" variable outside the function easily which kinda defeats the point. Yeah, I do understand that you can also access such variables in C/C++ as well through raw memory, but still, this answer just whispers it is a real alternative, whereas it is not, and hence it has probably not much practical use IMHO.</span>
<span class="comment-copy">@lpapp: It depends on what the point of static variables is. I always thought it was that it would be the same value across multiple function calls, which this does satisfy. I never took it to be about variable hiding, which this doesn't, as you said.</span>
<span class="comment-copy">Why not try instead of if statement?</span>
<span class="comment-copy"><code>try: myfunc.counter += 1; except AttributeError: myfunc.counter = 1</code> should do the same, using exceptions instead.</span>
<span class="comment-copy">Exceptions ought to be used for Exceptional situations, i.e. ones the programmer expects will not happen, such as an input file it had successfully opened suddenly not being available. This is an expected situation, an if statement makes more sense.</span>
<span class="comment-copy">@Hack_Saw: Well, this is Pythonic (better to ask for forgiveness than permission). This is actually recommended in Python optimization techniques since it saves the cost of an if (though I'm not recommending premature optimization). Your rule about exceptional cases: 1. Failure IS an exceptional case here, in a sense. It only happens once. 2. I think that rule is about using (i.e. raising) exceptions. This is catching an exception for something you expect to work but have a backup plan for, which is a common thing in most languages.</span>
<span class="comment-copy">@leewangzhong: Does enclosing a block that doesn't raise an exception within <code>try</code> add any cost? Just curious.</span>
<span class="comment-copy">I haven't been doing Python long, but this satisfies one of the implicit tenements of the language: <b>if it's not (fairly) easy, you're doing it wrong</b>.</span>
<span class="comment-copy">Did not work immediately with class methods, "self.foo.counter = 1" raises AttributeError again.</span>
<span class="comment-copy">This is the correct solution and it should be the accepted answer because the initialisation code will be run when the function is called and not when the module is executed or when something from it is imported, which is the case if you use the decorator approach from the currently accepted answer. See <a href="http://stackoverflow.com/questions/36435236/python-decorator-function-execution">Python decorator function execution</a>. If you have a huge library module then every decorator will be run, including those of functions you do not import.</span>
<span class="comment-copy">A simpler approach  :  <code>def fn(): 	if not hasattr(fn, 'c'): 		fn.c = 0</code> <code>fn.c += 1 	return fn.c</code></span>
<span class="comment-copy">@MANU Using <code>hasattr()</code> for this is not simpler and also less efficient.</span>
<span class="comment-copy">I tried that, but for some reason, the function parameter was initialising itself to 140, not 0. Why would this be?</span>
<span class="comment-copy">@andrewdotnich: I'm not sure why it would do that, I've tried it on 2.5, 2.6 and 3.0rc1, and it worked properly in each case. =\</span>
<span class="comment-copy">@bouvard: Yeah, I try to avoid using it in general, but for quick scripts whose code quality I'm not greatly concerned about, it can be convenient.</span>
<span class="comment-copy">@Jeremy: would the fact that the function is an instance method change anything?</span>
<span class="comment-copy">@bouvard For recursive functions that need a static variable, this is the only one that really reads well.</span>
<span class="comment-copy">pay attention to the third parm of getattr when you put a func there for example:  def func():     def foo():         return 1112      func.counter = getattr(func, 'counter', foo()) + 1  when you call func,the foo will always be called!</span>
<span class="comment-copy">Just a call to getattr every time that func gets called.  That's fine if performance isn't an issue, if it is try/except will win hands down.</span>
<span class="comment-copy">Functions are already objects so this just adds an unnecessary layer.</span>
<span class="comment-copy">See this SO answer for a long opinion that this is actually a good idea.  <a href="http://stackoverflow.com/questions/460586/">stackoverflow.com/questions/460586</a>.  I agree that making any such class a singleton, perhaps like this <a href="http://stackoverflow.com/questions/6760685/">stackoverflow.com/questions/6760685</a>, would also be a good idea. I don't know what @S.Lott means by "... move counter into class definition ..." because it looks like it's already in class-variable position to me.</span>
<span class="comment-copy">Based on my research, this class technique appears to be the most "Pythonic" of the approaches presented on this page, and uses the least trickery. I therefore plan on adopting it as my go-to replacement for C-static-like variables in functions, as a new Python developer myself.</span>
<span class="comment-copy">What happens if I want foo1 = Foo() and foo2 = Foo()?</span>
<span class="comment-copy">@MarkLawrence Then you have two different instances of a callable class, each with their own counter. Which exactly what you should expect if you aren't using the instance <code>foo</code> which is provided as a singleton.</span>
<span class="comment-copy">the only problem with this is that it's really not neat at all, and whenever you want to use this pattern you have to cut &amp; paste the code... hence my use of a decorator</span>
<span class="comment-copy">probably should use something like <code>try: mystaticfun.counter+=10 except AttributeError: mystaticfun.counter=0</code></span>
<span class="comment-copy">Please use <code>X not in Y</code> rather than <code>not X in Y</code> (or advise using if you were just using it for the sake of a more similar-looking comparison between that and <code>hasattr</code>)</span>
<span class="comment-copy">how about this:  <code>def fn(): 	if not hasattr(fn, 'c'): 		fn.c = 0</code> <code>fn.c += 1 	return fn.c</code></span>
<span class="comment-copy">it's not ideal because the if clause adds unnecessary nesting, in this situation I prefer setdefault</span>
<span class="comment-copy">Indentation is wrong</span>
<span class="comment-copy">can you elaborate on why this code works? The second <code>foo()</code> should re-initialize the dictionary to the value specified in the function definition (so with the counter key having a value of 0). Why it does not?</span>
<span class="comment-copy">@raffamaiden <a href="https://stackoverflow.com/a/1145781/248296">stackoverflow.com/a/1145781/248296</a></span>
<span class="comment-copy">note: f-strings are only in python 3.6+</span>
<span class="comment-copy">For stand-alone recursive functions, the <code>default</code> argument is the most elegant one.</span>
<span class="comment-copy">Please don't be offended, but this solution reminds me a bit of the "large company style" :-) <a href="http://www.willa.me/2013/11/the-six-most-common-species-of-code.html" rel="nofollow noreferrer">willa.me/2013/11/the-six-most-common-species-of-code.html</a></span>
<span class="comment-copy">It seems simpler like that.</span>
