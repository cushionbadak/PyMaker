<div class="post-text" itemprop="text">
<p>In Python, in an operation of numbers of mixed type, the narrower type is <a href="https://docs.python.org/3.5/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">widened to that of the other</a>, such as <code>int</code> + <code>float</code> → <code>float</code>:</p>
<pre><code>In [57]: 3 + 0.1
Out[57]: 3.1
</code></pre>
<p>But for <code>datetime.date</code>, we have <code>datetime.date</code> + <code>datetime.timedelta</code> → <code>datetime.date</code>, <em>not</em> <code>datetime.datetime</code>:</p>
<pre><code>In [58]: datetime.date(2013, 1, 1) + datetime.timedelta(seconds=42)
Out[58]: datetime.date(2013, 1, 1)
</code></pre>
<p>Why is the widening reasoning applied to numbers, but not to <code>date</code>/<code>datetime</code>/<code>timedelta</code>?</p>
<p>(Background: I'm writing a reading routine for a file format where one field is year, one field is day-of-year, one field is milliseconds-since-midnight.  Of course, the simple and explicit solution is <code>datetime.datetime(2013, 1, 1, 0, 0, 0) + datetime.timedelta(seconds=42)</code>, but one could equally reason that one should rewrite <code>3 + 0.1</code> as <code>3.0 + 0.1</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>The behaviour is <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow">documented</a>:</p>
<blockquote>
<p><em>date2</em> is moved forward in time if <code>timedelta.days &gt; 0</code>, or backward if <code>timedelta.days &lt; 0</code>. Afterward <code>date2 - date1 == timedelta.days</code>. <strong><code>timedelta.seconds</code> and <code>timedelta.microseconds</code> are ignored.</strong></p>
</blockquote>
<p>(My emphasis. This behaviour has <a href="https://docs.python.org/2.3/lib/datetime-date.html" rel="nofollow">remained unchanged</a> since <code>date</code> objects were added in Python 2.3.)</p>
<p>I haven't been able to find any evidence as to why the module is designed like this. Certainly there are use cases like yours where you want to represent the point in time corresponding to the midnight at the start of a day. In these cases it is annoying to have to convert back and forth. But there are other use cases in which you want to represent a whole day (and not just some point in time on that day), in which case you don't want to accidentally end up with partial days when you add timedeltas.</p>
<p>Chris Withers suggested that the behaviour be changed, in <a href="http://bugs.python.org/issue3249" rel="nofollow">issue 3249</a>, but Tim Peters noted that:</p>
<blockquote>
<p>an incompatible change to documented always-worked-this-way behavior is unlikely to be accepted.</p>
</blockquote>
<p>If you want an object that behaves like a <code>datetime.date</code>, but where arithmetic operations return <code>datetime.datetime</code> objects, then it shouldn't be not too hard to write one:</p>
<pre><code>from datetime import date, datetime, time, timedelta

def _part_day(t):
    """Return True if t is a timedelta object that does not consist of
    whole days.

    """
    return isinstance(t, timedelta) and (t.seconds or t.microseconds)

class mydate(date):
    """Subclass of datetime.date where arithmetic operations with a
    timedelta object return a datetime.datetime object unless the
    timedelta object consists of whole days.

    """
    def datetime(self):
        """Return datetime corresponding to the midnight at start of this
        date.

        """
        return datetime.combine(self, time())

    def __add__(self, other):
        if _part_day(other):
            return self.datetime() + other
        else:
            return super().__add__(other)

    __radd__ = __add__

    def __sub__(self, other):
        if _part_day(other):
            return self.datetime() - other
        else:
            return super().__sub__(other)
</code></pre>
<p>(This is untested, but it's shouldn't be hard to get it working from here.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>timedelta</code> object doesn't store any information on whether or not it just concerns dates, or also times. (The fact that the number of hours/minutes/seconds/micros is 0 may just be a coincidence!)</p>
<p>Hence, suppose we have someone who just wants to manipulate dates, ignoring times, she'd do something like <code>my_new_date = my_old_date + timedelta(days=1)</code>. She'd be very surprised and possibly annoyed to find that <code>my_new_date</code> is now a <code>datetime</code> object rather than a <code>date</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>A date is not a subclass of datetime; datetime is a <em>compound</em> type, combining a <code>date</code> and a <code>time</code> object into one. You can't decide to produce a compound type from operations on <code>date</code> here; the <code>time</code> component is <em>not</em> a fraction of a date.</p>
<p>On the other hand, the <a href="https://docs.python.org/2/library/numbers.html" rel="nofollow">Python numeric hierarchy</a> defines integers as a type of specialised float (<code>numbers.Integral</code> is an indirect subclass of <code>numbers.Real</code>), and as such mixing operations between integers and floats results in the base type being produced. And a <code>float</code> is <em>not</em> a compound type, there is no separate type for the decimal portion of the value.</p>
<p>If you want to produce the compound type from operations on dates, you'll have to be explicit (and explicit is better than implicit). Add a time component yourself:</p>
<pre><code>datetime.combine(yourdate, time.min) + yourdelta
</code></pre>
<p>where <code>yourdate</code> could be produced from a <code>date.strptime('%Y %j')</code> parsing of your year plus day-of-the-year input.</p>
<p>The alternatives (either producing a <code>datetime</code> object <em>sometimes</em> based on the <code>timedelta.seconds</code> value, or <em>always</em>) require the programmer to unwrap the date component again if that is all that they expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>The likely technical reason is that builtin types in Python do not return subclasses from its operators  as a rule i.e., <code>date.__add__</code> won't return <code>datetime</code>. And the consistent behavior would require <code>date</code> and <code>datetime</code> to be interchangeable (they are not).</p>
<p><code>date + timedelta</code> behavior is documented and won't change.  If you want <code>datetime</code> as a result; create <code>datetime</code> from date <code>d</code>:</p>
<pre><code>dt = datetime(d.year, d.month, d.day)
</code></pre>
<p>Technically, <code>date.__add__</code> could have delegated the work to <code>timedelta.__radd__</code>. <code>timedelta</code> stores <code>days</code> separately and therefore it simple and efficient to find out whether it represents whole number of days i.e., we could if we wanted to get <code>date</code> or <code>datetime</code> from <code>date + timedelta</code> (it doesn't mean we should).</p>
<p>The issue is that <code>1</code> and <code>1.0</code> are the same <code>timedelta(1)</code> in this case i.e., if we were to allow <code>date + timedelta</code> to return <code>datetime</code> then it should return <code>datetime</code> for all values if we consider only types.</p>
<p>There was a precedent when <code>int + int</code> returned either <code>int</code> or <code>long</code> depending on the result i.e., the operation with the same types may return values of different types depending only on the input values. Though <code>date</code> and <code>datetime</code> are not as much interchangeable as <code>int</code> and <code>long</code> were.</p>
<p><code>date + timedelta</code> returning <code>date</code> for some values of <code>timedelta</code> and <code>datetime</code> for others would create confusion unless we introduce <code>date(y,m,d) == datetime(y,m,d)</code> too (like <code>1 == 1.0</code>) or <code>date.today() &lt; datetime.now()</code> from <a href="http://bugs.python.org/issue3249" rel="nofollow">the related Python issue mentioned by @Gareth Rees</a> (like <code>1 &lt; 1.1</code>). <code>datetime</code> being a subclass suggest this route though I heard an argument that it was a mistake to make <code>datetime</code> a <code>date</code> subclass.</p>
<p>The desired behavior is implemented in <code>dateutil</code> package:</p>
<pre><code>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; date.today() + relativedelta(days=1)
datetime.date(2016, 5, 12)
&gt;&gt;&gt; date.today() + relativedelta(days=1, seconds=1)
datetime.datetime(2016, 5, 12, 0, 0, 1)
</code></pre>
<blockquote>
<p><code>time() + timedelta</code> is invalid, so <code>combine()</code> doesn't help me here.</p>
</blockquote>
<p><code>combine()</code> works <code>datetime.combine(d, time()) + timedelta_obj</code>. Though, you could write it as: <code>datetime(d.year, d.month, d.day) + timedelta_obj</code>.</p>
<blockquote>
<p>Of course, the simple and explicit solution is <code>datetime(2013, 1, 1, 0, 0, 0) + timedelta(seconds=42)</code>, but one might as well rewrite <code>3 + 0.1</code> as <code>3.0 + 0.1</code>)</p>
</blockquote>
<p><code>int</code> + <code>float</code> is always <code>float</code>:</p>
<pre><code>&gt;&gt;&gt; 3 + 1.0
4.0
&gt;&gt;&gt; 3 + 1
4
</code></pre>
<p>unlike <code>1.0</code> and <code>1</code>; <code>type(timedelta(1.0)) == type(timedelta(1))</code> (same type in addition to being equal).</p>
<blockquote>
<p>I'm writing a reading routine for a file format where one field is year, one field is day-of-year, one field is milliseconds-since-midnight.</p>
</blockquote>
<pre><code>dt = datetime(year, 1, 1) + timedelta(days=day_of_year - 1, milliseconds=ms)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you sum a timedelta to a date, python will only look for the days attribute of the timedelta. So if if add 42 seconds, the day will be 0 and it will not affect your date.</p>
</div>
<span class="comment-copy">Besides, when working with dates, do you really want to add time? A date doesn't have a time component; it is not the same thing as adding <code>.0</code> to an integer. Perhaps you were working with dates <i>at midday</i> instead?</span>
<span class="comment-copy">I'd say <i>numbers</i> are the exception here, in that you can coerce an integer to a float as needed. That concept doesn't expand to other types automatically.</span>
<span class="comment-copy">@MartijnPieters Then why allow that addition in the first place? <code>[] + ()</code> fails immediately.</span>
<span class="comment-copy"><code>int + float -&gt; float</code> is simply "keep the one with higher precision", <code>date + deltatime -&gt; datetime</code> would be "create a new type that is different from both original operands", I think this might be the reasoning.</span>
<span class="comment-copy">@MartijnPieters <code>date</code> does have a <code>timetuple()</code> method which fills in <code>hour=minute=second=0</code>.</span>
<span class="comment-copy">you don't need to subclass <code>date</code>, <a href="http://stackoverflow.com/a/37169089/4279"><code>dateutil.relativedelta</code> implements the behavior @gerrit wants.</a></span>
<span class="comment-copy">I can see that, but why?</span>
