<div class="post-text" itemprop="text">
<p>The documentation of itertools.islice says:</p>
<blockquote>
<p>Make an iterator that returns selected elements from the iterable. If start is non-zero, then elements from the iterable are skipped until start is reached. Afterward, elements are returned consecutively unless step is set higher than one which results in items being skipped.</p>
</blockquote>
<p>Usage says:  </p>
<pre><code>islice('ABCDEFG', 2) --&gt; A B
islice('ABCDEFG', 2, 4) --&gt; C D
</code></pre>
<p>Shouldn't the first version return CDEFG ... skipping first two elements that is AB</p>
</div>
<div class="post-text" itemprop="text">
<p>You're misreading. It has <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow">two call profiles</a>:</p>
<pre><code>itertools.islice(iterable, stop)
itertools.islice(iterable, start, stop[, step])
</code></pre>
<p>If you only pass two arguments, the second argument is the <code>stop</code> argument, as if you passed <code>0</code> as the <code>start</code> argument. To get the behavior you expected, you'd do:</p>
<pre><code>islice('ABCDEFG', 2, None)
</code></pre>
<p>But understand that this is inefficient for large <code>start</code> values; under the hood, <code>islice</code> is iterating and discarding until it reaches the desired <code>start</code> position, you haven't bypassed the work of iterating (just optimized it a bit by doing it at the C layer in CPython).</p>
</div>
<span class="comment-copy">In the first example 2 is the <code>stop</code> argument. Look at the function signature: <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.islice</a></span>
<span class="comment-copy">i see that now new to python. python is great but these api docs are not so nice as compare to java. thanks anyways.</span>
<span class="comment-copy">@BharatJain: Really? It gives you the two possible call profiles right next to each other, not sure how much more helpful it can be. Java allows functions to have multiple prototypes too (and does so much more than Python), so it shouldn't be new to you.</span>
<span class="comment-copy">Well its much better to have separate documentation for each API especially when they mean differently. Dont you think have same words for each call profiles are confusing and that too when they never make it explicit that arguments are treated differently</span>
<span class="comment-copy">@BharatJain: Except the arguments of a given name are always treated the same. <code>stop</code> always means the same thing, it's purely a positional change (and <code>islice</code> is following the lead of <code>range</code> here, which everyone should be familiar with; a single argument to <code>range</code> is the <code>stop</code>, two arguments means <code>start</code> and <code>stop</code>). If you split the two profiles into separate descriptions it would be, if anything, easier to overlook one call profile if the person reading the docs has one version scrolled out of view.</span>
<span class="comment-copy">Another reason for this kind of documentation would be that python does not allow method overloading</span>
