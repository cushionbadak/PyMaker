<div class="post-text" itemprop="text">
<p>I need to make multiple instances of a class, then use its methods to find the output. It is straightforward to write the code in multiple lines but I need a more efficient way of doing that. Basically, here is what I want to do in a loop:</p>
<pre><code>class test(object):
    ...
    def job(self,x='hi',y=4):
        return y+len(x)

A1 = test()
y1 = A1.job(x = 'word_1',y=12)
A2 = test()
y2 = A2.job(x = 'word_2',y=5)
A3 = test()
y3 = A3.job(x = 'word_3',y=-12)
A4 = test()
y4 = A4.job(x = 'word_4',y=1)
A5 = test()
y5 = A5.job(x = 'word_5',y=120)
A6 = test()
y6 = A6.job(x = 'word_6',y=-1)
A7 = test()
y7 = A7.job(x = 'word_7',y=10)
</code></pre>
<p>Of course, this is not so hard, but if I want to do it for 100 times ...</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a list of all your A's and a list of all your Y's, or you could even make a list of lists, basically a list with 1 or more lists within it. for example </p>
<pre><code>aList = [[A1, Y1], [A2, Y2], [A3, Y3]]  # Note, never name lists this way haha
</code></pre>
<p>and then to reference them you would say:</p>
<pre><code>print(aList[1][1])
</code></pre>
<p>The first 1 goes into the [A2, Y2] list, and the second then goes and takes the Y2 variable.</p>
<p>This way you don't need all the variables really, because you could make a for loop that iterates over all these and thus making it possible to have infinite of these lists. 
for example:</p>
<pre><code>aList = []  # Creates an empty list
for x in range(0, 3):  #  This will go over the numbers from 0-2, 
    for y in range(0, 3):  # This will do the same.
        aList.append( (x, y) )
print(aList)
</code></pre>
<p>this will print out:</p>
<pre><code>[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
</code></pre>
<p>So what this basically does is that it it says x is 0, and then goes through all the numbers for y, and y has gone through all the numbers, x is changed to 1, and then y goes through all the numbers again, until all possible combinations are reached. You could make the range(0,100) although, might lag if you print the whole list out (like I accidentally did haha)
So you can see that this is a great way to create a long list with many variables.</p>
<p>but you can also call a specific number, say we wanted the third list, then we would call the print function (on line 5) as:</p>
<pre><code>print(aList[2])
</code></pre>
<p>we say two because python starts counting from 0.
this will print out:</p>
<pre><code>  (0, 2)
</code></pre>
<p>Which is the third list, like we wanted. Now we want to print the second item in that list, the number 2, then we would call the print function as:</p>
<pre><code>   print(aList[2][1])
</code></pre>
<p>and this will print out:</p>
<pre><code>2
</code></pre>
<p>exactly like we wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming python 2.7.10. You could try something along the lines of (add after your class definition):</p>
<pre><code>import random

[... class definition stuff ...]
nums = random.sample(xrange(1, 101), 10)
i = 0
for k in nums:
    A = test()
    print A.job('word_%s' % i, k)
    i += 1
</code></pre>
<p>This will run 10 times with random numbers between 1 ... 100.</p>
<p>disclaimer: untested code -- just to give a general idea.</p>
</div>
<span class="comment-copy">Make a  list of objects.</span>
<span class="comment-copy">Did you mean to do <code>y1 = A1.job()</code>?</span>
<span class="comment-copy">Yep! thank you.</span>
<span class="comment-copy">Btw, I think you need at <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">static method</a> decorator for your <code>job</code> method.</span>
<span class="comment-copy">@PriyanshGoel, could you please elaborate on that? I'm very new to python and don't know how exactly I can do that, thanks.</span>
<span class="comment-copy">thank you, I got the logic.</span>
