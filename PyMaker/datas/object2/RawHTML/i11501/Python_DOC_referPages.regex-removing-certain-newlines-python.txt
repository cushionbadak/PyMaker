<div class="post-text" itemprop="text">
<p>I'm looking for a regex which allows me to remove certain "\r\n" characters (or just \n in Python) when the following line does not start with a number</p>
<p>In Perl I have achieved this by matching <code>\r\n(?!\d)</code> and replacing with <code>\1</code> (in order not to lost the character matched in following line), but when I try that in Python (<code>\n(?!\d)</code>), it removes every <code>\n</code> in my document.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on your comments, I'm pretty sure the issue is that you're applying your match to individual lines, rather than to the whole text at once. A zero-width negative lookahead (which you're using, with <code>(?!\d)</code>) will match successfully if the newline is the last character in the input string, which will be the case if your code is working line by line. The lookahead basically says "match if not followed by a digit". That is always true if there is nothing left in the input string.</p>
<p>You can't change the regex to fix this issue. Nothing you check on a single line can tell you what the contents of the next line will be, so you'll need to change your surrounding code in some way. One approach would be to read and transform the whole text rather than just a single line at a time. Or you could use something like <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">the <code>pairwise</code> recipe from <code>itertools</code></a> to examine two lines at a a time, and examine the second line to decide if you needed to transform the first line.</p>
<p>I'd also like to note that substituting with <code>\1</code> is not appropriate, since you have no capturing group (the parentheses in your pattern are part of the zero-width lookahead syntax, not grouping syntax). You should just be substituting with an empty string (which is effectively what you're doing anyway, since the back-reference doesn't refer to anything).</p>
</div>
<span class="comment-copy">You have not defined any capture group in your pattern. Replace with empty string. See <a href="https://regex101.com/r/xR2fI1/1" rel="nofollow noreferrer"><code>\r?\n(?!\d)</code> demo</a>. Is <a href="https://ideone.com/Iw9r8i" rel="nofollow noreferrer">this demo</a> working the way you expect?</span>
<span class="comment-copy">I tried to replace with empty string, but the result is that almost every \n is removed from my document. I've tried that demo, unless I'm doing something wrong, unfortunately the result is much the same</span>
<span class="comment-copy">Please paste the string you test against (as a Python variable) and the expected result. I feel as if your intention is not what you described in the question. All questions related to newlines are almost always a result of some misunderstanding or typo in the code, or even a matter of checking if there are CR+LF or just LF line endings. Sometimes, encoding issues. Thus, some code that does not work would be very helpful.</span>
<span class="comment-copy">Is it removing any newlines that are followed by a digit?  You say it removes almost all newlines, but we have no sample data to look at.  Maybe almost all newlines should be removed?  We don't know until you show us examples of ones being removed that shouldn't be.</span>
<span class="comment-copy">Sorry, I'm trying to replicate the issue with some example as I am not allowed to paste the raw data I'm working on (due to company policy). I have re-tested with the demo, and I'm getting what I expected, so it seems not to be a problem with regex, but with how I'm applying it (over a file, line by line, not over a string var.)</span>
<span class="comment-copy">You are right, the main problema is that. I'm parsing one line at a time instead parsing the file content as a group. I will try your suggestion about using pairwise from itertools.</span>
