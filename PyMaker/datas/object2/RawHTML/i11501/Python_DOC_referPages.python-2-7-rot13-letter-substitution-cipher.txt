<div class="post-text" itemprop="text">
<p>Problem Statement: </p>
<blockquote>
<p>ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet. ROT13 is an example of the Caesar cipher.</p>
<p>Create a function that takes a string and returns the string ciphered with Rot13. If there are numbers or special characters included in the string, they should be returned as they are. Only letters from the latin/english alphabet should be shifted, like in the original Rot13 "implementation".</p>
<p>Please note that using "encode" in Python is considered cheating.</p>
</blockquote>
<p>My code: </p>
<pre><code>from string import *

def rot13(message):
    melist = list(message)

    for i in message:
        lpos = index(letters,i)

        if i.islower():
            print lpos
            melist[index(message,i)] =  lower(letters[lpos + 13])

        elif i.isupper():
            try:
                melist[index(message,i)] =  upper(letters[lpos + 13])
            except IndexError:
                melist[index(message,i)] =  upper(letters[lpos + 13 - 52])

    return ''.join(melist)
</code></pre>
<p>This thing works fine for converting a string except for the last letter</p>
<p>for example if you do:</p>
<pre><code>&gt;&gt;&gt; rot13('test') 
    'grft'
</code></pre>
<p>The last character 't' is unchanged although it should, I don't know where I did it wrong. Some help will be greatly appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is not the last letter. This part of the code will always find the first occurence of a letter in your string:</p>
<pre><code>letters.index(i)
</code></pre>
<p>So instead of giving the index of the last <code>'t'</code> in <code>'test'</code>, you get the first index, even if you give <code>'texttttttt'</code> as input - all the last <code>'t'</code> will stay untouched.</p>
<p>You have to do some changes in your algorithm...</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a very simple version of rot13 that uses the translate function. </p>
<pre><code>import string
def rot13(message):
    norm=string.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', \
                          'nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM')
    return message.translate(norm)

print rot13("now is the time FOR ALL GOOD")
</code></pre>
<p>Output is<br/>
abj vf gur gvzr SBE NYY TBBQ</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is not with the last letter, the problem is with duplicate letters:</p>
<pre><code>&gt;&gt; print rot13('abba')
noba
</code></pre>
<p>The cause is the <code>index</code> function:  </p>
<pre><code>    index(message,i)
</code></pre>
<p>It returns the position of the <strong>first</strong> occurrence of <code>i</code> in <code>message</code>. A solution would be to use the optional <code>start</code> argument for <code>index()</code>, to specify that search should begin at the specified position:</p>
<pre><code>for j,i in enumerate(message):
    lpos = index(letters,i)

    if i.islower():
        print lpos

        // this will find the correct position of the current occurence of i
        melist[index(message,i,j)] =  lower(letters[lpos + 13])
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem comes from the use of 'index' method !</p>
<p>In your example the second 't' is processed but the result will go in the same place as the first 't' in your list.</p>
<p>I reckon there's no use for index here, you can simply start with an empty, and append each letter to the end of your list, likewise :</p>
<pre><code>melist = []
for i in message:
    if i.islower():
        melist.append(lower(letters[lpos + 13]))
...
</code></pre>
</div>
<span class="comment-copy">The <code>string</code> module is deprecated!</span>
<span class="comment-copy">wat r u serious</span>
<span class="comment-copy">Hmm? It's recommended to use <code>'mystring.index(i)'</code> instead of <code>import string; string.index('mystring', i)</code></span>
<span class="comment-copy">@linusg Where in <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer"><code>string</code></a> do you see deprecation of the whole module?</span>
<span class="comment-copy">@DisplayName Ok, that's right, not the whole <code>string</code> module is deprecated, only those functions with are included in the <code>str</code> class shouldn't be used anymore (like <code>index()</code> and <code>upper()</code> and so on)</span>
<span class="comment-copy">yep, that's exactly the problem the code has, thanks.</span>
<span class="comment-copy">You may use one of the suggestions from the other answers and accept one!</span>
