<div class="post-text" itemprop="text">
<p>How can I rewrite this code to using process for faster result in Python?</p>
<pre><code>from threading import Thread

def test_function(n):
    while n &gt; 0:
        n = n - 1


thread1 = Thread(target=test_function, args=(50000000,))
thread1.start()

thread2 = Thread(target=test_function, args=(50000000,))
thread2.start()

thread1.join()
thread2.join()
</code></pre>
<p><strong>The script took 127.84088587760925 second</strong></p>
<p>I tried something like this. But it is not working. </p>
<pre><code>from multiprocessing import Process

def test_function(n):
    while n &gt; 0:
        n = n - 1

    t1 = Process(target=test_function, args=(50000000,))
    t1.start()
    t2 = Process(target=test_function, args=(50000000,))
    t2.start()
    t1.join()
    t2.join()
</code></pre>
<p><strong>Without threads</strong></p>
<pre><code>def test_function(n):
    while n &gt; 0:
        n = n - 1

count(500000000)
count(500000000)
</code></pre>
<p><strong>The script took 162.00484490394592 second</strong></p>
<p>Any help? Thanks a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>Because of CPython's <a href="https://docs.python.org/3/glossary.html#term-global-interpreter-lock" rel="nofollow">global interpreter lock</a>, threads won't help improve the performance of CPU bound computations.   Only one thread will run at a time and the threading switching costs will make the code slower than the single threaded code.</p>
<p>To take advantage of multiple cores, try the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow">multi-processing module</a>.</p>
</div>
<span class="comment-copy">(1) <code>5000000</code> != <code>500000000</code>  (2) The second one is not indented correctly. (3) No <code>count</code> function defined.</span>
<span class="comment-copy">Any idea how can I rewrite this code to multi-processing? Thanks</span>
<span class="comment-copy">Follow the provided link.  There are examples there.</span>
