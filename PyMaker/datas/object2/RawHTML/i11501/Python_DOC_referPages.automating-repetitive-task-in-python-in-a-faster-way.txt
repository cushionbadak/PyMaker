<div class="post-text" itemprop="text">
<p>I have a specific query where I need to achieve task in a faster way.</p>
<p>Suppose I write a program to ping 10000 devices in a Python.
If I go sequentially for each device and for instance(for the sake of calculation) 1 device take approx one minute(I know it doesn't) for ping.</p>
<p>If I run a script it will take 10000 minutes to finish the script after I start it.</p>
<p>Is there a way, where I can achieve same thing in lesser minutes than above??? If yes how and where I can read about doing this or any tips from expert developers.</p>
<p>I am new to python programming and any help would be appreciated.  </p>
</div>
<div class="post-text" itemprop="text">
<p>At the ~10,000 scale, you want to start looking for some sort of async solution over threads/processes.</p>
<p>Using an async solution will perform better at this scale; your PC might not be able to handle 10,000 threads/processes (i.e. not have enough resources) but using coroutes/greelets will work just fine.</p>
<p>If you can do Python 3.4/3.5, checkout <a href="http://aiohttp.readthedocs.io/en/stable/client.html" rel="nofollow">aiohttp</a>.</p>
<p>If you're stuck in 2.7, try <a href="https://github.com/kennethreitz/grequests" rel="nofollow">grequest</a>.</p>
<p>Both of these solutions will allow you iterate and send your pings without waiting on the remote server to respond. Once you've poked all the servers, you can then iterate again to process their responses.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use multi threading. For that you can use the <a href="https://docs.python.org/3/library/threading.html?highlight=threading#module-threading" rel="nofollow">threading</a> module. It may not be the best one for this job, but it is pretty good and comes by default with Python. The basic idea is to create a thread for each ping, which executes while you move on to the next task. There are many great tutorials for it out there, so I hope that you can get started with the information I gave.</p>
</div>
<span class="comment-copy">Just don't ping them sequentially, use forking or something similar.</span>
