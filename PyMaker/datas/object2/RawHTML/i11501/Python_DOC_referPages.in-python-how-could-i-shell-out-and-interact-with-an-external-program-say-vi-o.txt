<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a>
<span class="question-originals-answer-count">
                    56 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/22561014/how-to-use-python-to-start-an-interactive-shell-program">How to use python to start an interactive shell program?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>My first question on stackoverflow!</p>
<p>I'm trying to figure out how I can start an external program that requires the user to interact with it, say vi, nano, ssh, telnet etc. and return to the Python script when the program exits.</p>
<p>I don't want to use send/expect or automate the external program at all, just start it, use it as normal and then return to the script.  I guess bash seems like a more natural way to do this, but I was hoping to get it done in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>use the integrated <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow"><code>subprocess</code> module</a>. It works quite well with interactive applications. <code>subprocess.call</code> starts an application and is blocking until the application exits.</p>
<p>e.g. starting <code>vi</code> and after exit it starts a connection to 127.0.0.1 over <code>ssh</code>:</p>
<pre><code>import subprocess
subprocess.call(["vi"])
subprocess.call(["ssh","127.0.0.1"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the subprocess module.
An example could look like this:</p>
<pre><code>import subprocess

process = subproces.Popen(
    [
        'path/to/the/executable',
        'optional argument',
        'more optional arguments',
        ...
    ],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
)
out, err = process.communicate()
</code></pre>
<p>You can find more here: <a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess" rel="nofollow">subprocess</a></p>
</div>
<span class="comment-copy">@PadraicCunningham: Read the second paragraph.  He doesn't want to interact with it; he wants to pass it straight to the user.</span>
<span class="comment-copy">I tested this solution with vim, ssh, telnet, nano and bash. It works quite well!</span>
<span class="comment-copy">Thats works perfectly.  Many thanks.</span>
