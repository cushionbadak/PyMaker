<div class="post-text" itemprop="text">
<p>I know how to install packages in Anaconda using <code>conda install</code> and also how to install packages that are on <a href="https://pypi.python.org/pypi" rel="noreferrer">PyPi</a> which is described in the <a href="http://conda.pydata.org/docs/build_tutorials/pkgs.html" rel="noreferrer">manual</a>.</p>
<p>But how can I permanently include packages/folders into the <code>PYTHONPATH</code> of an Anaconda environment so that code that I am currently working on can be imported and is still available after a reboot?</p>
<p>My current approach is to use <code>sys</code>:</p>
<pre><code>import sys
sys.path.append(r'/path/to/my/package')
</code></pre>
<p>which is not really convenient.</p>
<p>Any hints?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>I found two answers to my question in the <a href="https://groups.google.com/a/continuum.io/forum/#!topic/anaconda/RO_h0wD7sKE" rel="nofollow noreferrer">Anaconda forum</a>:</p>
<p>1.) Put the modules into into site-packages, i.e. the directory <code>$HOME/path/to/anaconda/lib/pythonX.X/site-packages</code> which is always on <code>sys.path</code>. This should also work by creating a symbolic link.</p>
<p>2.) Add a <code>.pth</code> file to the directory <code>$HOME/path/to/anaconda/lib/pythonX.X/site-packages</code>. This can be named anything (it just must end with <code>.pth</code>). A <code>.pth</code> file is just a newline-separated listing of the full path-names of directories that will be added to your path on Python startup.  </p>
<p><strong>Alternatively</strong>, if you only want to link to a particular conda environment then add the .pth file to <code>~/anaconda3/envs/{NAME_OF_ENVIRONMENT}/lib/pythonX.X/site-packages/</code></p>
<p>Both work straightforward and I went for the second option as it is more flexible.</p>
<p>*** UPDATE:</p>
<p>3.) Use <a href="https://docs.conda.io/projects/conda-build/en/latest/resources/commands/conda-develop.html" rel="nofollow noreferrer">conda develop</a> i. e. <code>conda-develop /path/to/module/</code> to add the module which creates a <code>.pth</code> file as described under option 2.).</p>
<p>4.) Create a <a href="https://docs.python.org/3/distutils/setupscript.html" rel="nofollow noreferrer">setup.py</a> in the folder of your package and install it using <code>pip install -e /path/to/package</code> which is the cleanest option from my point of view because you can also see all installations using <code>pip list</code>.</p>
<p>Thanks anyway!</p>
</div>
<div class="post-text" itemprop="text">
<p>The preferred solution would be to build your own conda package (information <a href="http://conda.pydata.org/docs/building/recipe.html" rel="nofollow noreferrer">here</a>).</p>
<p>Another solution would be to create a link between your package directory and any directory in sys.path. In this way, when you ask python to import your package, anaconda will search through its various sys.path directories and it will read the link to your package as if that package were in one of the sys.path directories.</p>
<p>Linking a directory can be performed easily with the <code>ln</code> (link_name) command. As an example:</p>
<pre><code>ln -s /path/to/my/package /path/to/anaconda/lib/python2.7/site-packages/
</code></pre>
<p>The above link will allow you to import your package in the default environment of anaconda from any directory. This will not affect any of the other environments. </p>
<p>If you want to add the package to a specific environment (e.g. - "myenv") within anaconda, you can link the package to one of that particular environment's sys paths:</p>
<pre><code>ln -s /path/to/my/package /path/to/anaconda/env/myenv/lib/python2.7/site-packges/
</code></pre>
<p>Note the following:</p>
<ul>
<li>Linking your package directory to a sys path, rather than actually moving the package directory to a sys path, allows you to keep your package in your directory of choice.</li>
<li><p>The <code>-s</code> flag generates a soft link (much like a shortcut). If you move your package directory, the link will fail to work. Running <code>ln</code> without the <code>-s</code> flag generates a hard link (like a mirror copy) that will not be affected by moving (or even deleting..) the package directory. The pros and cons of soft links and hard links are debated <a href="https://stackoverflow.com/questions/185899/what-is-the-difference-between-a-symbolic-link-and-a-hard-link">here</a></p></li>
<li><p>Windows users should utilize mklink. For information, look <a href="https://superuser.com/questions/182553/does-windows-have-the-ln-s-or-equivalent">here</a>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Just to add to Cord Kaldemeyer's answer above, for the 2nd option.  If you only want to link to a particular conda environment then add the .pth file to <code>~/anaconda3/envs/{NAME_OF_ENVIRONMENT}/lib/pythonX.X/site-packages/</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm able to include local modules using the following: </p>
<pre><code>conda-develop /path/to/module/
</code></pre>
<p>I hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way I use to do this, which I believe is the most native to <code>conda</code>, is by creating <code>env_vars.sh</code> files in my environment, as per the official documentation <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#saving-environment-variables" rel="nofollow noreferrer">here</a>.</p>
<p>For macOS and Linux users, the steps are as follows:</p>
<ol>
<li><p>Go to your environment folder (e.g. <code>/miniconda1/env/env_name</code>). <code>$CONDA_PREFIX</code> is the environemnt variable for your environment path.</p>
<pre><code>cd $CONDA_PREFIX
</code></pre></li>
<li><p>Create the <code>activate.d</code> and <code>deactivate.d</code> directories.</p>
<pre><code>mkdir -p ./etc/conda/activate.d
mkdir -p ./etc/conda/deactivate.d
</code></pre></li>
<li><p>Inside the each respective directory, create one <code>env_vars.sh</code> file. The one in the <code>activate.d</code> directory will set (or <code>export</code>) your environment variables when you <code>conda activate</code> your environment. The file in the <code>deactivate.d</code> directory will serve to unset the environment variables when you <code>conda deactivate</code> your environment.</p>
<pre><code>touch ./etc/conda/activate.d/env_vars.sh
touch ./etc/conda/deactivate.d/env_vars.sh
</code></pre></li>
<li><p>First edit the <code>$CONDA_PREFIX/etc/conda/activate.d/env_vars.sh</code> to <code>export</code> the desired environment variables.</p>
<pre><code>#!/bin/sh

export VAR_A='some-thing-here'
export VAR_B=/path/to/my/file/
</code></pre></li>
<li><p>Afterwards, open to edit the <code>$CONDA_PREFIX/etc/conda/deactivate/env_vars.sh</code>, in order to <code>unset</code> the env variables when you <code>conda deactivate</code> like so:</p>
<pre><code>#!/bin/sh

unset VAR_A
unset VAR_B
</code></pre></li>
</ol>
<p>Again, the source of my description comes straight from the <code>conda</code> docs <a href="https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#saving-environment-variables" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">I don't understand what <i>"permanently include packages/folders in Anaconda e.g. with code that I am currently working on"</i> means, do you mean a) <code>conda and pip</code> are not locally installing them into the right conda environment (in which case do <code>conda activate/deactivate</code> until you get to the right Python environment, you may have several in conda), or b) you want to manually bundle third-party packages with your package(? sounds like a terrible idea, just define package dependencies). What does "permanently" mean, on which machine?</span>
<span class="comment-copy">I just want to be code that I am working on to be available/importable within a specific environment even after reboot. So I have specified the question above. Actually, I found different solutions for my problem which I have provided below. But let me know if there are others ways and I'll add them!</span>
<span class="comment-copy">Still waiting for <a href="https://conda.io/docs/commands/build/conda-develop.html" rel="nofollow noreferrer"><code>conda develop</code></a> :/</span>
<span class="comment-copy"><a href="https://conda.io/docs/commands/build/conda-develop.html" rel="nofollow noreferrer"><code>conda develop</code></a>, basically a script that achieves option 2, seems to be functional now.</span>
<span class="comment-copy">#2 doesn't seem to work for me (I don't seem to have the same directory structure as well; I don't have multiple options for python.X.X and my 'lib' is upper case)</span>
<span class="comment-copy">Thanks for the hint! I have adapted my answer as the command only creates a <code>.pth</code> file as described under 2.).</span>
