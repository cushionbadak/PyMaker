<div class="post-text" itemprop="text">
<p>Im kinda stuck. i want to "ack" in a directory and print the list of the ack in the terminal. but when i try to run my script it only ack's in the current directory. </p>
<p>im using tkinter to create the tkFileDialog.askdirectory() </p>
<p>however, im still stuck..</p>
<p>is there someone that can help out? or point out what im doing wrong? 
the code i wrote is below</p>
<pre><code>foldername = tkFileDialog.askdirectory()

if os.path.isdir(foldername):
        print "\033[1m" + foldername + "\033[0m"
        os.system("ack -i 'password' --ignore-file=is:easyack.py")
else: print "\033[1m" + "No folder chosen" + "\033[0m"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two options:</p>
<ol>
<li><p>Jump to the target directory before running ack</p>
<pre><code>origin = os.getcwd()
if os.path.isdir(foldername):
    os.chdir(foldername)
    print(..., etc.)
os.chdir(origin)
</code></pre></li>
</ol>
<p>NOTE: This approach is considered an anti-pattern by some (see zwol's comment below) since it may not be possible to get back to the original directory (eg., if it has been removed or its permissions have changed) and os.chdir affects the whole process and therefore could disrupt work going on in other threads.</p>
<ol start="2">
<li><p>Add the target folder to the ack command</p>
<pre><code>os.system("ack -i 'password' --ignore-file=is:easyack.py {0}".format(foldername))
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You need to instruct the <code>ack</code> subprocess to run in <code>foldername</code> instead of the current directory.  You can't do that with <code>os.system</code> but you can with the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module, using the <code>cwd=</code> argument to <code>Popen</code> or any of the convenience wrappers.  In this case, <code>subprocess.check_call</code> is what you want:</p>
<pre><code>if os.path.isdir(foldername):
    #print "\033[1m" + foldername + "\033[0m"
    sys.stdout.write("\033[1m{}\033[0m\n".format(repr(foldername)[1:-1]))
    #os.system("ack -i 'password' --ignore-file=is:easyack.py")
    subprocess.check_call(
        ["ack", "-i", "password", "--ignore-file=is:easyack.py"],
        cwd=foldername)
else:
    #print "\033[1m" + "No folder chosen" + "\033[0m"
    sys.stdout.write("\033[1m{}\033[0m is not a folder\n"
                     .format(repr(foldername)[1:-1]))
</code></pre>
<p>I strongly advise you forget you ever heard of <code>os.system</code> and use <code>subprocess</code> all the time.  It is a little more complicated for very simple things, but it's capable of much more complicated things than are possible with <code>os.system</code>.</p>
</div>
<span class="comment-copy">Consider using <a href="https://docs.python.org/2/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> to traverse a directory tree.</span>
<span class="comment-copy">Your (1) is an antipattern; it may be impossible to return to <code>origin</code>, and the cwd is a process-wide setting, so changing it can disrupt concurrent work being done in other threads.</span>
<span class="comment-copy">Thank you! ill try both of them! thank you again for your time! ill get back to you a.s.a.p. if i got it working!</span>
<span class="comment-copy">thanks a million! it works!</span>
<span class="comment-copy">@NoFxor: You're welcome. zwol is really correct about preferring the subprocess module over using os.system(). Would you care to mark an answer? Glad I could help.</span>
