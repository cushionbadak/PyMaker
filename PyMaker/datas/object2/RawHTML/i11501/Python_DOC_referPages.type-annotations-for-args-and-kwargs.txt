<div class="post-text" itemprop="text">
<p>I'm trying out Python's type annotations with abstract base classes to write some interfaces. Is there a way to annotate the possible types of <code>*args</code> and <code>**kwargs</code>?</p>
<p>For example, how would one express that the sensible arguments to a function are either an <code>int</code> or two <code>int</code>s? <code>type(args)</code> gives <code>Tuple</code> so my guess was to annotate the type as <code>Union[Tuple[int, int], Tuple[int]]</code>, but this doesn't work.</p>
<pre><code>from typing import Union, Tuple

def foo(*args: Union[Tuple[int, int], Tuple[int]]):
    try:
        i, j = args
        return i + j
    except ValueError:
        assert len(args) == 1
        i = args[0]
        return i

# ok
print(foo((1,)))
print(foo((1, 2)))
# mypy does not like this
print(foo(1))
print(foo(1, 2))
</code></pre>
<p>Error messages from mypy:</p>
<pre><code>t.py: note: In function "foo":
t.py:6: error: Unsupported operand types for + ("tuple" and "Union[Tuple[int, int], Tuple[int]]")
t.py: note: At top level:
t.py:12: error: Argument 1 to "foo" has incompatible type "int"; expected "Union[Tuple[int, int], Tuple[int]]"
t.py:14: error: Argument 1 to "foo" has incompatible type "int"; expected "Union[Tuple[int, int], Tuple[int]]"
t.py:15: error: Argument 1 to "foo" has incompatible type "int"; expected "Union[Tuple[int, int], Tuple[int]]"
t.py:15: error: Argument 2 to "foo" has incompatible type "int"; expected "Union[Tuple[int, int], Tuple[int]]"
</code></pre>
<p>It makes sense that mypy doesn't like this for the function call because it expects there to be a <code>tuple</code> in the call itself. The addition after unpacking also gives a typing error that I don't understand.</p>
<p>How does one annotate the sensible types for <code>*args</code> and <code>**kwargs</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>For variable positional arguments (<code>*args</code>) and variable keyword arguments (<code>**kw</code>) you only need to specify the expected value for <em>one</em> such argument.</p>
<p>From the <a href="https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values" rel="noreferrer"><em>Arbitrary argument lists and default argument values</em> section</a> of the <em>Type Hints</em> PEP:</p>
<blockquote>
<p>Arbitrary argument lists can as well be type annotated, so that the definition:</p>
<pre><code>def foo(*args: str, **kwds: int): ...
</code></pre>
<p>is acceptable and it means that, e.g., all of the following represent function calls with valid types of arguments:</p>
<pre><code>foo('a', 'b', 'c')
foo(x=1, y=2)
foo('', z=0)
</code></pre>
</blockquote>
<p>So you'd want to specify your method like this:</p>
<pre><code>def foo(*args: int):
</code></pre>
<p>However, if your function can only accept either one or two integer values, you should not use <code>*args</code> at all, use one explicit positional argument and a second keyword argument:</p>
<pre><code>def foo(first: int, second: Optional[int] = None):
</code></pre>
<p>Now your function is actually limited to one or two arguments, and both must be integers if specified. <code>*args</code> <em>always</em> means 0 or more, and can't be limited by type hints to a more specific range.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a short addition to the previous answer, if you're trying to use mypy on Python 2 files and need to use comments to add types instead of annotations, you need to prefix the types for <code>args</code> and <code>kwargs</code> with <code>*</code> and <code>**</code> respectively:</p>
<pre><code>def foo(param, *args, **kwargs):
    # type: (bool, *str, **int) -&gt; None
    pass
</code></pre>
<p>This is treated by mypy as being the same as the below, Python 3.5 version of <code>foo</code>:</p>
<pre><code>def foo(param: bool, *args: str, **kwargs: int) -&gt; None:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The proper way to do this is using <a href="https://docs.python.org/3/library/typing.html#typing.overload" rel="noreferrer"><code>@overload</code></a></p>
<pre><code>from typing import overload

@overload
def foo(arg1: int, arg2: int) -&gt; int:
    ...

@overload
def foo(arg: int) -&gt; int:
    ...

def foo(*args):
    try:
        i, j = args
        return i + j
    except ValueError:
        assert len(args) == 1
        i = args[0]
        return i

print(foo(1))
print(foo(1, 2))
</code></pre>
<p>Note that you do not add <code>@overload</code> or type annotations to the actual implementation, which must come last.</p>
<p>You'll need a newish version of both <code>typing</code> and mypy to get support for @overload <a href="https://github.com/python/typing/issues/72" rel="noreferrer">outside of stub files</a>.</p>
<p>You can also use this to vary the returned result in a way that makes explicit which argument types correspond with which return type. e.g.:</p>
<pre><code>from typing import Tuple, overload

@overload
def foo(arg1: int, arg2: int) -&gt; Tuple[int, int]:
    ...

@overload
def foo(arg: int) -&gt; int:
    ...

def foo(*args):
    try:
        i, j = args
        return j, i
    except ValueError:
        assert len(args) == 1
        i = args[0]
        return i

print(foo(1))
print(foo(1, 2))
</code></pre>
</div>
<span class="comment-copy">Just curious, why add the <code>Optional</code>? Did something change about Python or did you change your mind? Is it still not strictly necessary due to the <code>None</code> default?</span>
<span class="comment-copy">@Praxeolitic yes, in practice the automatic, implied <code>Optional</code> annotation when you use <code>None</code> as a default value made certain usecases harder and that is now being removed from the PEP.</span>
<span class="comment-copy"><a href="https://github.com/python/typing/issues/275" rel="nofollow noreferrer">Here is a link discussing this</a> for those interested. It certainly does sound like explicit <code>Optional</code> is going to be required in the future.</span>
<span class="comment-copy">I like this answer because it addresses the more general case. Looking back, I should not have used <code>(type1)</code> vs <code>(type1, type1)</code> function calls as my example. Maybe <code>(type1)</code> vs <code>(type2, type1)</code> would have been a better example and shows why I like this answer. This also allows differing return types. However, in the special case where you only have one return type and your <code>*args</code> and <code>*kwargs</code> are all the same type, the technique in Martjin's answer makes more sense so both answers are useful.</span>
<span class="comment-copy">Using <code>*args</code> where there is a maximum number of arguments (2 here) is <i>still wrong</i> however.</span>
<span class="comment-copy">So, yes, it's good to know about <code>@overload</code>, but it is the wrong tool <i>for this specific job</i>.</span>
<span class="comment-copy">@MartijnPieters Why is <code>*args</code> necessarily wrong here? If the expected calls were <code>(type1)</code> vs <code>(type2, type1)</code>, then the number of arguments is variable and there isn't an appropriate default for the trailing argument. Why is it important that there's a max?</span>
<span class="comment-copy">After looking at the PEP, this clearly isn't the intended use of @overload. While this answer shows an interesting way to individually annotate the types of <code>*args</code>, an even better answer to the question is that this isn't something that should be done at all.</span>
