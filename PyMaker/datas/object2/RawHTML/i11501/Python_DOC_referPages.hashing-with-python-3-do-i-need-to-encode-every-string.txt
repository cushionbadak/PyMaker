<div class="post-text" itemprop="text">
<p>I'm migrating from Python 2 to Python 3 and wonder if every string literal needs to be encoded now before you can hash it. Example code will run perfectly under Python 2:</p>
<pre><code>import hashlib
string = "robots"
hashlib.md5(string).hexdigest()
</code></pre>
<p>using Python 3 however, it throws a <code>TypeError: Unicode-objects must be encoded before hashing</code> so I have to append an <code>.encode()</code> after each string or am I missing something here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>hashlib</code> operates on <a href="https://docs.python.org/3/glossary.html#term-bytes-like-object" rel="nofollow">bytes-like objects</a> only and the <a href="https://docs.python.org/3/library/hashlib.html#hash-algorithms" rel="nofollow">documentation</a> explicitly states:</p>
<blockquote>
<p><strong>Note:</strong> Feeding string objects into <code>update()</code> is not supported, as hashes work on bytes, not on characters.</p>
</blockquote>
<p>So any time you'd like to hash a <code>str</code> object in Python 3, you have to encode it first.</p>
</div>
<span class="comment-copy"><code>string = b"robots"</code>  (<code>string</code> is a standard library module, bad idea for a variable name)</span>
<span class="comment-copy">Yeah I only wondered why in Python 2 hashlib apparently can deal with strings...</span>
<span class="comment-copy">Because in Python 2 you have <code>str</code> and <code>unicode</code>. In Python 3 these are <code>bytes</code> and <code>str</code>. The concept of <code>str</code> changed, <code>hashlib</code> didn't.</span>
