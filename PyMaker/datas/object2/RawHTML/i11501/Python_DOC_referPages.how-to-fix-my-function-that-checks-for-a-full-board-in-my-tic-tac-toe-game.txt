<div class="post-text" itemprop="text">
<p>I'm trying to build a tic tac toe game and I'm having trouble with making a working function to check if the board is full. my list for the board is<br/>
<code>board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']</code><br/>
and my function is  </p>
<pre><code>def fullBoard():
"""Returns a boolean value reporting the state of the board, full or not.
True for full, False for not full."""
for y in board:
    if board[y] == ' ':
        return False 
        print(False)
        break

else:
    print(True)
    return True
</code></pre>
<p>what I want it to do is search each item in the list and when it finds a ' ' or space, it returns false and breaks the loop. but if there is no ' ' it returns true meaning the board is full (I put the print functions in just for my sake while I was trying to fix the darn thing.)</p>
<p>I thought this would work but I get TypeError: list indices must be integers or slices, not str  refering to my <code>if board[y] == ' ':</code> line. If anyone knows how to get this to work the way I want that would be great. Also take note I'm only in comp prog 1 and am at a very basic level, so simplicity would be best. (also please don't try to make it shorter or run faster. I just want to know what the mistake I've made is so I can learn from it.) Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<p>It's even easier than what you are doing.  The misunderstanding is in your <code>for</code> loop.  When iterating over a list, the value of <code>y</code> is not the index of the the item in your <code>board</code> list, it is the <strong>value</strong> of each item.</p>
<p>So:</p>
<pre><code>for y in board:
    if y == ' ':
        return False

return True
</code></pre>
<p>The source of your confusion probably comes from the fact that, when iterating over a python dict using a for loop, the variable (in this case <code>y</code>) would in fact be the dictionary key.  And then you'd need to use the key to access the value at that position in the dictionary.  But that's for a dictionary.. you have a list.  Hence no need for that.</p>
<p>But there's an even quicker way to do it:</p>
<pre><code>    if ' ' in board:
        return False
    return True
</code></pre>
<p>That's it.. no <code>for</code>, no nothing.  Python's <code>in</code> operator tells you if a value is contained within a list (or certain other types).</p>
<p>If you want to get even more minimal.. just:</p>
<pre><code>return not ' ' in board
</code></pre>
<p>That's it.. just one line of code.  The way it works is.. <code>' ' in board</code> has a value of <code>True</code> if any of the items in <code>board</code> are a space, or <code>False</code> if there is no item with a value of space in board.  But you want a value of <code>False</code> if there is a space, <code>True</code> if not.. so by putting <code>not</code> in front, you invert the value.. making the True into False and vice versa.</p>
<p>Since you are learning, it's not necessarily good to take this minimal approach but I figured I would add it to my answer so that you would understand better how python handles these things.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do the loop (for y in board) y is already the element in board list and you do not need to index it (board[y]). Simply replace board[y] with y and that should solve your problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is completely correct, but for one thing. See how board isn't a dictionary, but a list? Lists don't have key/value pairs.</p>
<p>Here's the fixed code:</p>
<pre><code>def fullBoard():
   for y in board:
       if board[y] == ' ':
           return False 
       else:
           return True
</code></pre>
</div>
<span class="comment-copy">Another option is to avoid coding the loop yourself by using the <code>in</code> or <code>not in</code> operator (see <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">here</a> in the Python manual). In Python 2, there were also more generalized functions <code>reduce</code>, <code>all</code>, and <code>any</code> that you could use when you're checking for something more complex than the presence/absence of a particular value. I imagine they're still available in Python 3 somewhere, but I think I remember something about <code>reduce</code> as a global function being deprecated for being unintuitive.</span>
<span class="comment-copy">Also, the <code>else</code> is not needed and will cause an error.</span>
<span class="comment-copy">This will incur same problem as the OP</span>
<span class="comment-copy">@Bg1850 It worked for me</span>
<span class="comment-copy">How can it work with  <code>board = [' ',' ',' ',' ',' ',' ',' ',' ',' ']</code></span>
<span class="comment-copy">He wanted to know why he kept getting that error.</span>
