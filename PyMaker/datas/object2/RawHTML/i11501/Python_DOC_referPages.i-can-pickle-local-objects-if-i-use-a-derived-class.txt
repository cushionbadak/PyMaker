<div class="post-text" itemprop="text">
<p>The <code>pickle</code> reference <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="noreferrer">states that</a> the set of objects which can be pickled is rather limited. Indeed, I have a function which returns a dinamically-generated class, and I found I can't pickle instances of that class:</p>
<pre><code>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; def f():
...     class A: pass
...     return A
... 
&gt;&gt;&gt; LocalA = f()
&gt;&gt;&gt; la = LocalA()
&gt;&gt;&gt; with open('testing.pickle', 'wb') as f:
...     pickle.dump(la, f, pickle.HIGHEST_PROTOCOL)
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
AttributeError: Can't pickle local object 'f.&lt;locals&gt;.A'
</code></pre>
<p>Such objects are too complicated for <code>pickle</code>. Ok. Now, what's magic is that, if I try to pickle a similar object, but of a derived class, it works!</p>
<pre><code>&gt;&gt;&gt; class DerivedA(LocalA): pass
... 
&gt;&gt;&gt; da = DerivedA()
&gt;&gt;&gt; with open('testing.pickle', 'wb') as f:
...     pickle.dump(da, f, pickle.HIGHEST_PROTOCOL)
...
&gt;&gt;&gt;
</code></pre>
<p>What's happening here? If this is so easy, why doesn't <code>pickle</code> use this workaround to implement a <code>dump</code> method that allows "local objects" to be pickled?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you did not read <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="noreferrer">the reference you cite</a> carefully. The reference also clearly states that only the following objects are pickleable: </p>
<blockquote>
<ul>
<li>functions defined at the top level of a module (using def, not &gt;lambda)</li>
<li>built-in functions defined at the top level of a module</li>
<li>classes that are defined at <strong>the top level of a module</strong></li>
</ul>
</blockquote>
<p>Your example </p>
<pre><code>&gt;&gt;&gt; def f():
...     class A: pass
...     return A
</code></pre>
<p>does not define a class at the top level of a module, it defines a class within the <em>scope</em> of <code>f()</code>. <code>pickle</code> works on <em>global classes</em>, not local classes. This automatically fails the pickleable test. </p>
<p><code>DerivedA</code> is a global class, so all is well.</p>
<p>As for why only top-level (global to you) classes and functions can't be pickled, the reference answers that question as well (bold mine):</p>
<blockquote>
<p>Note that functions (built-in and user-defined) are pickled by <strong>“fully qualified” name reference</strong>, not by value.  This means that only the function name is pickled, along with the name of the module the function is defined in. <strong>Neither the function’s code, nor any of its function attributes are pickled</strong>. Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised.</p>
<p>Similarly, classes are pickled by named reference, so the same restrictions in the unpickling environment apply.</p>
</blockquote>
<p>So there you have it. <code>pickle</code> only serialises objects by name reference, not by the raw instructions contained within the object. This is because <code>pickle's</code> job is to serialise <em>object hierarchy</em>, and nothing else.</p>
</div>
<div class="post-text" itemprop="text">
<p>I disagree, you can pickle both.  You just need to use a better serializer, like <code>dill</code>.  <code>dill</code> (by default) pickles classes by saving the class definition instead of pickling by reference, so it won't fail your first case. You can even use <code>dill</code> to get the source code, if you like.</p>
<pre><code>&gt;&gt;&gt; import dill as pickle
&gt;&gt;&gt; def f():
...   class A: pass
...   return A
... 
&gt;&gt;&gt; localA = f()
&gt;&gt;&gt; la = localA()
&gt;&gt;&gt; 
&gt;&gt;&gt; _la = pickle.dumps(la)
&gt;&gt;&gt; la_ = pickle.loads(_la)
&gt;&gt;&gt;    
&gt;&gt;&gt; class DerivedA(localA): pass
... 
&gt;&gt;&gt; da = DerivedA()
&gt;&gt;&gt; _da = pickle.dumps(da)
&gt;&gt;&gt; da_ = pickle.loads(_da)
&gt;&gt;&gt; 
&gt;&gt;&gt; print(pickle.source.getsource(la_.__class__))
  class A: pass

&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>DerivedA</code> instances are pickleable because <code>DerivedA</code> is available through a global variable matching its fully-qualified name, which is how <code>pickle</code> looks for classes when unpickling.</p>
<p>The problem with trying to do something like this with local classes is that there's nothing identifying <em>which</em> <code>A</code> class an instance corresponds to. If you run <code>f</code> twice, you get two <code>A</code> classes, and there's no way to tell which one should be the class of unpickled <code>A</code> instances from another run of the program. If you don't run <code>f</code> at all, you get <em>no</em> <code>A</code> classes, and then what the heck do you do about the type of unpickled instances?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can only pickle instances of classes defined at module's top level.</p>
<p>However, you can pickle instances of locally-defined classes if you promote them to top level.</p>
<p>You must set the <em>__ qualname__</em> class attribute of the local class. Then you must assign the class to a top-level variable of the same name.</p>
<pre><code>def define_class(name):
    class local_class:
        pass
    local_class.__qualname__ = name
    return local_class

class_A = define_class('class_A') # picklable
class_B = define_class('class_B') # picklable
class_X = define_class('class_Y') # unpicklable, names don't match
</code></pre>
</div>
<span class="comment-copy">Ok, only the name of the class is pickled. I thought that the class itselft was saved (somehow), and then this would imply saving its base class, which is not pickleable.</span>
<span class="comment-copy">By the way, if I unpickle it in an environment in which there is an unrelated class but with the same name, I will get some frankstein monster object of this unrelated class but with the attributes of the old class? I think it boils down to: pickled objects are not as self-contained as I thought they were.</span>
<span class="comment-copy">@fonini Also from the reference: "... when class instances are pickled, their class’s code and data are not pickled along with them. Only the instance data are pickled. " So, yes, that sounds like the right behaviour. :)</span>
<span class="comment-copy">I completely stepped over that.</span>
<span class="comment-copy">I bet its about having different things in focus, not necessarily better? or is dill also better in terms of speed and the size of the stored object? but thanks for referring to it!</span>
<span class="comment-copy"><code>dill</code> is not faster, and also not better in terms of size of stored object.  Indeed it's worse than <code>pickle</code> in both of those regards. It's far better in terms of the ability to serialize various types of objects, which is what I meant.</span>
