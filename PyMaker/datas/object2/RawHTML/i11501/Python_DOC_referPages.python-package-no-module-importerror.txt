<div class="post-text" itemprop="text">
<p>Environment: Ubuntu 14</p>
<p>The structure:</p>
<pre><code>test
├── a
│   ├── a.py
│   └── __init__.py
├── b
│   ├── b.py
│   └── __init__.py
└── __init__.py
</code></pre>
<p>In "b.py":</p>
<pre><code>import test.a.a
</code></pre>
<p>if I run "python b.py":</p>
<pre><code>Traceback (most recent call last):
  File "b.py", line 1, in &lt;module&gt;
    import test.a.a
ImportError: No module named a.a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you have several options</p>
<p><strong>1)</strong> Include the path to the folder test to <code>sys.path</code> </p>
<p>you can do hardcoded</p>
<p>b.py</p>
<pre><code>import sys
sys.path.append("path/to/test")
import test.a.a
</code></pre>
<p>but in this case you have to change it manually if later you change the test folder to another place</p>
<p>you can also do automatic with</p>
<p>b.py</p>
<pre><code>import os, sys
path = os.path.dirname( os.path.dirname( os.path.dirname(__file__) ) )
#       folder_of_test/     test      /           b
sys.path.append(path)
import test.a.a
</code></pre>
<p>in this one, if you are using python 2 you need to call <code>os.path.abspath</code> on <code>__file__</code> first</p>
<p><strong>2)</strong> Add the <code>test</code>'s parent folder to your <a href="https://docs.python.org/3/using/cmdline.html?highlight=pythonpath#envvar-PYTHONPATH" rel="nofollow noreferrer">PYTHONPATH</a> environment variable, or put the <code>test</code> folder in a folder in your PYTHONPATH or PATH environment variable.</p>
<p>to do this do</p>
<pre><code>$&gt; export PYTHONPATH="/path/to/parent/folder/of/test:$PYTHONPATH"
</code></pre>
<p>but most likely will only be temporal, to do in a permanent way go to the file <code>.profile</code> or <code>.bashrc</code> in your home folder and put the above instruction in there at the end in your favorite <a href="https://unix.stackexchange.com/questions/117467/how-to-permanently-set-environmental-variables">way</a> (I modify .profile to set my pythonpath)</p>
<p><strong>3)</strong> Call your code as <code>python -m test.b.b</code> from the folder that contain <code>test</code></p>
<p>in any case you have to make sure that you don't other library that have the same name, for example I have anaconda installed and that come with a test package, and in that case you should change the name to avoid confusion </p>
</div>
<div class="post-text" itemprop="text">
<p>The module <code>test</code> is part of the standard library. So when you <code>import test.a</code>, it tries to import the <code>a</code> module in it.</p>
<p>So, even if you find a solution, it is better you don't use that name for your package.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with: </p>
<pre><code>from test.a import a
</code></pre>
<p>or with:</p>
<pre><code>from ..a import a
</code></pre>
</div>
<span class="comment-copy">Sorry, those flags were belongs to my last question but I forgot to change...</span>
<span class="comment-copy">It looks like you're inside the <code>b</code> directory when you run your script. You need to either run it from <code>test</code> or edit your path to include <code>a</code>.</span>
<span class="comment-copy">Even if I move the working directory to the test, and then "python b/b.py", but it's the same error.</span>
<span class="comment-copy">On the second method, how I can set PYTHONPATH in Ubuntu?</span>
<span class="comment-copy">It seems in this case, I need to set PYTHONPATH  to the parent directory of test?</span>
<span class="comment-copy">yes you add the parent folder. I added how to do it</span>
<span class="comment-copy">Local modules and packages shadow those in the standard library.</span>
<span class="comment-copy">Traceback (most recent call last):   File "b.py", line 1, in &lt;module&gt;     from test.a import a ImportError: No module named a</span>
