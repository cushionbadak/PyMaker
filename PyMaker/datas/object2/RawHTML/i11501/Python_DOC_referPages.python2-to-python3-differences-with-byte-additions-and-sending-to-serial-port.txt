<div class="post-text" itemprop="text">
<p>Currently, we are building a robot with a raspberry pi and the AX-12 dynamixel Servo's. We found a python2 library we a currently porting to python3, we pinpointed the problem in a specific method that gives an error in python3.</p>
<p>The Python 2 version actually works like a charm</p>
<pre><code>AX_GOAL_LENGTH = 5
AX_WRITE_DATA = 3
AX_GOAL_POSITION_L = 30
AX_START = 255
AX_REG_WRITE = 4

def move(self, id, position):
    self.direction(Ax12.RPI_DIRECTION_TX)
    Ax12.port.flushInput()
    p = [position&amp;0xff, position&gt;&gt;8]
    checksum = (~(id + Ax12.AX_GOAL_LENGTH + Ax12.AX_WRITE_DATA + Ax12.AX_GOAL_POSITION_L + p[0] + p[1]))&amp;0xff
    outData = chr(Ax12.AX_START)
    outData += chr(Ax12.AX_START)
    outData += chr(id)
    outData += chr(Ax12.AX_GOAL_LENGTH)
    outData += chr(Ax12.AX_WRITE_DATA)
    outData += chr(Ax12.AX_GOAL_POSITION_L)
    outData += chr(p[0])
    outData += chr(p[1])
    outData += chr(checksum)
    Ax12.port.write(outData)
</code></pre>
<p>What we have tried is adjust this variable:</p>
<pre><code>Ax12.port.write(bytes(outData,'utf-8'))
</code></pre>
<p>Now the script runs, sadly the Servo won't work anymore.</p>
<p>We also tried to place the bytes in a byte array</p>
<pre><code>result = bytes([Ax12.AX_START, Ax12.AX_START, 
                Ax12.AX_GOAL_LENGTH,Ax12.AX_REG_WRITE,
                Ax12.AX_GOAL_POSITION_L, p[0], p[1], checksum
])
Ax12.port.write(result)
</code></pre>
<p>The script runs but the servo won't run.</p>
<p>My believe is that the operations done to outData is different in python3 then in python2. I can't find out what should be adjusted or different.</p>
<p>Anybody sees what I am currently doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your bytes are <strong>not</strong> UTF-8 data; for any of your <code>chr()</code> values you create outside the range 0 - 127, encoding to UTF-8 produces <em>two</em> bytes.</p>
<p>You were creating Unicode codepoints from integer values; these create Latin-1 codepoints if you limited those to integers between 0 and 255; in principle you could encode to <code>'latin1'</code> to get the bytes again, but it is much easier to just create bytes in the first place.</p>
<p>In Python 3, use the <code>bytes</code> type, created from a list of integers:</p>
<pre><code>def move(self, id, position):
    self.direction(Ax12.RPI_DIRECTION_TX)
    Ax12.port.flushInput()
    p = [, position&gt;&gt;8]
    checksum = (~(id + Ax12.AX_GOAL_LENGTH + Ax12.AX_WRITE_DATA + Ax12.AX_GOAL_POSITION_L + p[0] + p[1]))&amp;0xff
    outData = bytes([
        Ax12.AX_START, Ax12.AX_START, id,
        Ax12.AX_GOAL_LENGTH, Ax12.AX_WRITE_DATA,
        Ax12.AX_GOAL_POSITION_L, p[0], p[1], checksum])
    Ax12.port.write(outData)
</code></pre>
<p>Your own attempt did not include the <code>id</code> value and you used <code>AX_REG_WRITE</code> rather than <code>AX_WRITE_DATA</code>.</p>
<p>You could also use a <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow"><code>bytearray()</code> object</a>, which would let you append additional bytes; you could use that to calculate the checksum by referencing the bytes produced so far, avoiding having to repeat yourself (a common source of errors):</p>
<pre><code>def move(self, id, position):
    self.direction(Ax12.RPI_DIRECTION_TX)
    Ax12.port.flushInput()
    outData = bytearray([
        Ax12.AX_START, Ax12.AX_START, id,
        Ax12.AX_GOAL_LENGTH, Ax12.AX_WRITE_DATA,
        Ax12.AX_GOAL_POSITION_L, position &amp; 0xff, position &gt;&gt; 8])
    checksum = ~sum(outData[2:]) &amp; 0xff
    outData.append(checksum)
    Ax12.port.write(outData)
</code></pre>
<p>You could use concatenation too of course (<code>outData = bytes([...])</code>, <code>outData += bytes([checksum])</code>) but <code>bytearray</code> is also available in Python 2, so the above version is compatible with both major Python versions.</p>
</div>
<span class="comment-copy">Your <code>bytes</code> version is missing the <code>id</code> value, and you are sending <code>AX_REG_WRITE</code> instead of <code>AX_WRITE_DATA</code>.</span>
