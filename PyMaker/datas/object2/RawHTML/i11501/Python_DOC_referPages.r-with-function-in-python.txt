<div class="post-text" itemprop="text">
<p>In <code>R</code>, I can use <code>with(obj, a + b + c + d)</code> instead of <code>obj$a + obj$b + obj$c + obj$d</code>, where <code>obj</code> can be a <code>list</code> or <code>data.frame</code>.</p>
<p>Is there any similar function for <code>dict</code>, <code>pandas.Series</code>, <code>pandas.DataFrame</code> in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>In a way, no. But there are lots of somewhat similar alternatives. The <code>with</code> function of R seems quite versatile, so in Python one has to replace it case by case.</p>
<p>You could use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>itemgetter()</code></a> for simple collections:</p>
<pre><code>In [1]: d = dict(a=1, b=2, c=3, d=4)

In [2]: from operator import itemgetter

In [3]: sum(itemgetter('a', 'b', 'c', 'd')(d))
Out[3]: 10
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow"><code>attrgetter()</code></a> for, again simple, objects:</p>
<pre><code>In [4]: from collections import namedtuple

In [5]: from operator import attrgetter

In [8]: sum(attrgetter('a', 'b', 'c', 'd')(
        namedtuple('sdf', 'a b c d')(1, 2, 3, 4)))
Out[8]: 10
</code></pre>
<p>Pandas' <code>DataFrame</code>s support directly accessing specific columns and applying operations on them. Summing is an easy example, as it has a function as is:</p>
<pre><code>In [10]: df = pd.DataFrame({'A': range(10), 'B': range(10), 'C': range(10)})

In [21]: df[['A', 'B']].sum(axis=1)  # row sums
Out[21]: 
0     0
1     2
2     4
3     6
4     8
5    10
6    12
7    14
8    16
9    18
dtype: int64
</code></pre>
<p>There's also <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.eval.html" rel="nofollow"><code>DataFrame.eval</code></a>, which is closest to what you're after, I think:</p>
<blockquote>
<p>Evaluate an expression in the context of the calling DataFrame instance.</p>
</blockquote>
<pre><code>In [9]: df.eval('(A + B) ** C')
Out[9]: 
0               1
1               2
2              16
3             216
4            4096
5          100000
6         2985984
7       105413504
8      4294967296
9    198359290368
dtype: int64
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not really.  R and Python have pretty different philosophies when it comes to this kind of thing--in R it's possible to write a function which parses the entire syntax of its arguments before they are evaluated, whereas in Python it's not.  So in Python, this is impossible:</p>
<pre><code>df = pd.DataFrame({'a':[1,2],'b':[3,4],'c':[5,6],'d':[7,8]})
with(df, a + b + c)
</code></pre>
<p>However, this works:</p>
<pre><code>sum(map(df.get, ('a','b','c'))) # gives Series([9,12])
</code></pre>
<p>If you wanted to apply other chained operations, you could implement support for something like this:</p>
<pre><code>def chain(op, df, name, *names):
    res = df[name]
    while names:
        res = op(res, df[names[0]])
        names = names[1:]
    return res
</code></pre>
<p>Then you can do this:</p>
<pre><code>from operator import div
chain(div, df, 'a', 'b', 'c')
</code></pre>
</div>
<span class="comment-copy">Seems there is not similar function in python and most of other programming language. (<a href="http://stackoverflow.com/a/6061156/3054161">stackoverflow.com/a/6061156/3054161</a>)</span>
