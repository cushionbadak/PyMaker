<div class="post-text" itemprop="text">
<p>Would <code>student_name</code> be a constant or not?</p>
<pre><code>student_name = ""

while len(student_name) &gt; 1:
    int(input(User input name of student and store this in variable student_name))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It depends on what you would call a constant. Python has immutable objects. like strings. Remember that in Python variables are basically labels on objects. So if you write</p>
<pre><code>x = 'foo'
</code></pre>
<p>the label <code>x</code> is used for the immutable string <code>'foo'</code>. If you then were to do</p>
<pre><code>x = 'bar'
</code></pre>
<p>you haven't changed the string, you've just hung the label on a different string.</p>
<p>But immutable <em>objects</em> are not what we generally think of as constants. In Python a constant could be thought of as an immutable <em>label</em>; a variable (label) that cannot be changed once it is assigned. </p>
<p>Until recently, Python didn't really have those. By <em>convention</em>, an all-uppercase name signals that it shouldn't be changed. But this isn't enforced by the language.</p>
<p>But since Python 3.4 (and also backported to 2.7) we have the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow"><code>enum</code></a> module that defines different kinds of enumeration classes (singletons really). An enumeration can basically be used as group of constants.</p>
<p>Here is an example where a function to compare files returns an enum;</p>
<pre><code>from enum import IntEnum
from hashlib import sha256
import os

# File comparison result
class Cmp(IntEnum):
    differ = 0  # source and destination are different
    same = 1  # source and destination are identical
    nodest = 2  # destination doesn't exist
    nosrc = 3  # source doesn't exist


def compare(src, dest):
    """
    Compare two files.

    Arguments
        src: Path of the source file.
        dest: Path of the destination file.

    Returns:
        Cmp enum
    """
    xsrc, xdest = os.path.exists(src), os.path.exists(dest)
    if not xsrc:
        return Cmp.nosrc
    if not xdest:
        return Cmp.nodest
    with open(src, 'rb') as s:
        csrc = sha256(s.read()).digest()
    if xdest:
        with open(dest, 'rb') as d:
            cdest = sha256(d.read()).digest()
    else:
        cdest = b''
    if csrc == cdest:
        return Cmp.same
    return Cmp.differ
</code></pre>
<p>This saves you having to look up what the return value of <code>compare</code> actually means every time you use it.</p>
<p>You cannot change <em>existing</em> attributes of the <code>enum</code> after it has been defined. There is one surprise here; you can add new attributes later, and those can be changed.</p>
</div>
<div class="post-text" itemprop="text">
<p>No there is not. You cannot declare a variable or value as constant in Python. Just don't change it.</p>
<p>If you are in a class, the equivalent would be:</p>
<pre><code>class Foo(object):
    CONST_NAME = "Name"
</code></pre>
<p>if not, it is just</p>
<pre><code>CONST_NAME = "Name"
</code></pre>
<p>The following code snippet might help you <a href="http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991" rel="nofollow">Link</a> .</p>
</div>
<span class="comment-copy">No, it would not be a constant since the value is presumably changing... though it is a bit unclear because the code you show doesn't actually change the value, it just <i>implys</i> that the value should change in the while loop.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2682745/how-do-i-create-a-constant-in-python">How do I create a constant in Python?</a></span>
