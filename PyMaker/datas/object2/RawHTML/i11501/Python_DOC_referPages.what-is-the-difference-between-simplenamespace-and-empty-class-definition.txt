<div class="post-text" itemprop="text">
<p>The following seems to work either way. What is the advantage (other than the nice <code>repr</code>) of using <code>types.SimpleNamespace</code>? Or is it the same thing?</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; class Cls():
...     pass
... 
&gt;&gt;&gt; foo = types.SimpleNamespace() # or foo = Cls()
&gt;&gt;&gt; foo.bar = 42
&gt;&gt;&gt; foo.bar
42
&gt;&gt;&gt; del foo.bar
&gt;&gt;&gt; foo.bar
AttributeError: 'types.SimpleNamespace' object has no attribute 'bar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is explained pretty well in the <a href="https://docs.python.org/3/library/types.html?highlight=types#module-types" rel="noreferrer">types</a> module description. It shows you that <code>types.SimpleNamespace</code> is roughly equivalent to this:</p>
<pre><code>class SimpleNamespace:
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        keys = sorted(self.__dict__)
        items = ("{}={!r}".format(k, self.__dict__[k]) for k in keys)
        return "{}({})".format(type(self).__name__, ", ".join(items))

    def __eq__(self, other):
        return self.__dict__ == other.__dict__
</code></pre>
<p>This provides the following advantages over an empty class:</p>
<ol>
<li>It allows you to initialize attributes while constructing the object: <code>sn = SimpleNamespace(a=1, b=2)</code></li>
<li>It provides a readable <code>repr()</code>: <code>eval(repr(sn)) == sn</code></li>
<li>It overrides the default comparison. Instead of comparing by <code>id()</code>, it compares attribute values instead.</li>
</ol>
</div>
<span class="comment-copy">@J.F.Sebastian Thanks. That was just a typo. I used the correct syntax when testing.</span>
<span class="comment-copy">In other words 1- it allows to initialize attributes while constructing the object  too: <code>sn = SimpleNamespace(a=1, b=2)</code> 2- It provides a readable <code>repr()</code>: <code>eval(repr(sn)) == sn</code> 3- it overrides the default comparison (by <code>id()</code> inherited from <code>object</code>), to compare attribute values.</span>
<span class="comment-copy">jfs's comment should be part of the accepted answer.</span>
