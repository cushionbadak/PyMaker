<div class="post-text" itemprop="text">
<p>I have a big legacy Python method which contains roughly twenty <code>return</code> statements.</p>
<p>The method should not return <code>None</code> but it does so. It is repeatable in a simple test case.</p>
<p>Up to now I used a debugger and stepped through the code line by line to find the matching return statement.</p>
<p>But is there an easier way?</p>
<p>Is there a way to raise an Exception as soon as the method returns None?</p>
<p>and Of course I need to see the line containing the return statement.</p>
<p>Example:</p>
<pre><code>def big_method(arg1, some_var):
    #.... many returns
    if arg1:
        return some_var # &lt;------
    #... many returns


assert not big_method(True, None) is None
</code></pre>
<p>Above is a simple code snippet. The result:</p>
<pre><code>Traceback (most recent call last):
  File "/home/modwork_vums_d/src/manyreturns.py", line 8, in &lt;module&gt;
    assert not big_method(True, None) is None
AssertionError
</code></pre>
<p>Above traceback does not help very much, since I want to see the line <strong>inside</strong> <code>big_method()</code>. In the example above I want to see which I marked with <code>&lt;------</code>.</p>
<p>I use PyCharm, but a pure python or other solution is welcome.</p>
<p>Just for the records. There is a follow-up question which tries to enable this feature in PyCharm: <a href="https://stackoverflow.com/questions/47887099/pycharm-debugging-return-continue-execution-until-the-current-function-retur">PyCharm: Debugging: r(eturn) Continue execution until the current function returns</a></p>
</div>
<div class="post-text" itemprop="text">
<p>pdb has a <code>r(eturn)</code> command for this need:</p>
<blockquote>
<p>r(eturn)
  Continue execution until the current function returns.</p>
</blockquote>
<p>example:</p>
<pre><code>&gt; /Users/georgexsh/wasteland/tmp/app.py(6)&lt;module&gt;()
-&gt; assert not big_method(True, None) is None
(Pdb) s
--Call--
&gt; /Users/georgexsh/wasteland/tmp/app.py(1)big_method()
-&gt; def big_method(arg1, some_var):
(Pdb) r
--Return--
&gt; /Users/georgexsh/wasteland/tmp/app.py(3)big_method()-&gt;None
-&gt; return some_var
</code></pre>
<p>see more detail in <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-return" rel="noreferrer">pdb doc</a>.</p>
</div>
<span class="comment-copy">There is a possible solution: <a href="https://stackoverflow.com/a/1156048/5588279">stackoverflow.com/a/1156048/5588279</a>.</span>
<span class="comment-copy">I wonder this would be possible, the frame to execute big_method has already get reclaimed.</span>
<span class="comment-copy">maybe you could leverage on interpreter's trace function, to record the execution path of the function being called, then print out when outer assertion failed.</span>
<span class="comment-copy">but as you are using a debugger, I guess it should have a functionality like "run until the current function returns", which will stop at the line you need.</span>
<span class="comment-copy">@guettli <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-return" rel="nofollow noreferrer">link of pdb <code>r</code> command doc</a></span>
