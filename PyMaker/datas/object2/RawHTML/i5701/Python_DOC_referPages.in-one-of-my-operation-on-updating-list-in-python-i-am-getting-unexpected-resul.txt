<div class="post-text" itemprop="text">
<p>I was trying to update the list in other scenario other than using map function. I tried loop and on one of my operation, I get unexpected result. Here is my code.</p>
<pre><code>    #my_function_which_is_only_for_printing
    def app(l):
        for i in l:
            print(i)

    l=[1,2,'3','4'] #list_with_int_and_str
    app(l) #calling_function

    #As result my all output are integer
    #It Should be integer and character rather then all as integer
</code></pre>
<p>My Expected output is like this
1
2
3
4
And I should get it like this
1
2
'3'
'4'</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function is doing what you want: 1 and 2 are of <code>int</code> type and '3' and '4' are of <code>str</code> type:</p>
<pre><code>def app(l):
    for i in l:        
        print("{} is: {}".format(i, type(i)))

l = [1,2,'3','4']

app(l)

1 is: &lt;class 'int'&gt;
2 is: &lt;class 'int'&gt;
3 is: &lt;class 'str'&gt;
4 is: &lt;class 'str'&gt;
</code></pre>
<p><strong>Edit</strong>: To get string representation of the <code>list</code> elements, like @Paul Panzer suggested in the comments, you could do <code>print(repr(i))</code>:</p>
<pre><code>def app(l):
    for i in l:        
        print(repr(i), end=' ') # Print on the same line

l = [1,2,'3','4']

app(l)

1 2 '3' '4' 
&gt;&gt;&gt; 
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">repr(<em>object</em>)</a> says:</p>
<blockquote>
<p>Return a string containing a printable representation of an object.</p>
</blockquote>
</div>
<span class="comment-copy">'3' and '4' are strings while 1 and 2 are integers, and that is exactly what the function prints.</span>
<span class="comment-copy">to get <code>'3'</code> printed as <code>'3'</code> you can use <code>repr</code>: <code>print(repr(i))</code></span>
<span class="comment-copy">when you print a string, it doesn't print any quotation marks, unless actually <i>contained</i> in the string</span>
<span class="comment-copy">But, when we use to print string, then result should always comes out with ' '.</span>
<span class="comment-copy">@Yash, please see my edit.</span>
<span class="comment-copy">But see if I try this one-  l=[1,2,'3','4'] print(l) so the result are like this [1,2,'3','4']</span>
<span class="comment-copy">Your question here is about printing individual elements of a list. Please ask a new question regarding this.</span>
