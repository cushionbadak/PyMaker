<div class="post-text" itemprop="text">
<p>I would like to connect two variables totwo different classes but I don't know if what I'm trying to do is possible or not.</p>
<p>for instance, if I have those two classes:</p>
<pre><code>class one():
    def __init__(self):
        self.a = 0
    def compute(self):
        self.a = self.a + 1


class two():
    def __init__(self):
        self.a = 0
        self.C_one = one()
        self.link()

    def link(self):
        self.a = self.C_one.a

    def compute(self):
        self.C_one.compute()
        print('C_one a=',self.C_one.a )
        print('C_two a=',self.a )

C_two = two()
for i in range(5):
    C_two.compute()
</code></pre>
<p>In the class <code>two</code> I would like connect the variable <code>a</code> with the variable <code>a</code> of class <code>one</code>, so I don't have to explicitly call <code>self.a = self.C_one.a</code> each time I execute <code>C_two.compute</code></p>
<p>The code in example give me this:</p>
<pre><code>C_one a= 1
C_two a= 0
C_one a= 2
C_two a= 0
C_one a= 3
C_two a= 0
C_one a= 4
C_two a= 0
C_one a= 5
C_two a= 0
</code></pre>
<p>Which is not the result I expect.
Somebody know if I can do that in python?</p>
<h2>update</h2>
<p>From the example below </p>
<pre><code>class one():
    def __init__(self):
        self.a = 0
    def compute(self):
        self.a = self.a + 1


class two():
    def __init__(self):
        self.a = 0

class three():
    def __init__(self):
        self.C_one = one()
        self.C_two = two()
        self.b = 0

    def compute(self):
        self.C_one.compute()
        #self.C_two.a = self.C_one.a
        print('C_one a=',self.C_one.a )
        print('C_two a=',self.C_two.a )

C_three = three()
for i in range(5):
    C_three.compute()
</code></pre>
<p>is it possible to use the answer of deceze and replace the commented line <code>#self.C_two.a = self.C_one.a</code>with a property ? Like that classes <code>one</code> and <code>two</code> are linked in the class <code>three</code>.</p>
<h2>answer from deceze</h2>
<pre><code>class one():
    def __init__(self):
        self.a = 0
    def compute(self):
        self.a = self.a + 1


class two():
    def __init__(self,one): 
        self.C_one = one

    @property
    def a(self):
        return self.C_one.a

class three():
    def __init__(self):
        self.C_one = one()
        self.C_two = two(self.C_one)
        self.b = 0

    def compute(self):
        self.C_one.compute() 
        print('C_one a=',self.C_one.a )
        print('C_two a=',self.C_two.a )

C_three = three()
for i in range(5):
    C_three.compute()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define <code>two.a</code> as a <a href="https://docs.python.org/3/library/functions.html#property" rel="noreferrer"><code>property</code></a>:</p>
<pre><code>class two:
    def __init__(self):
        self.C_one = one()

    @property
    def a(self):
        return self.C_one.a

    ...
</code></pre>
</div>
<span class="comment-copy">thanks for the answer. I updated the question because I wonder if we can use our answer to connect two classes in a third (like in the second example)?</span>
<span class="comment-copy">The issue there is that <code>two()</code> creates its own <code>one()</code> unconnected to the <code>one()</code> you instantiate in <code>three()</code>. The solution there is <i>dependency injection</i>: <code>two(self.C_one)</code>.</span>
<span class="comment-copy">So In the second example I must create a direct connection between class <code>one()</code> and <code>two() (and vise versa). So I must create and instance of </code>one()` in the <code>__init__()</code> of two (and vise versa)?</span>
<span class="comment-copy">As a rule of thumb, it's bad practice to create instances of other classes inside an <code>__init__</code>. Instead you should do <code>def __init__(self, one): self.C_one = one</code>. Then you'll have exactly <i>one</i> place where you do <code>one()</code>, and you pass that one and only instance as constructor argument to any other class that needs it. â†’ That's called <i>dependency injection.</i></span>
<span class="comment-copy">Ok, thank you. I will check that dependency injection that I wasn't aware of.</span>
