<div class="post-text" itemprop="text">
<p>Hello :) I have a big bin file which has been gzipped (so it's a <code>blabla.bin.gz</code>). </p>
<p>I need to decompress and write it to a txt file with ascii format. 
Here's my code : </p>
<pre><code>import gzip

with gzip.open("GoogleNews-vectors-negative300.bin.gz", "rb") as f:   

    file_content = f.read()
    file_content.decode("ascii")
    output = open("new_file.txt", "w", encoding="ascii")
    output.write(file_content)
    output.close()
</code></pre>
<p>But I got this error : </p>
<pre><code>file_content.decode("ascii")
UnicodeDecodeError: 'ascii' codec can't decode byte 0x94 in position 19: ordinal not in range(128)
</code></pre>
<p>I'm not so new to Python but format/coding problems have always been my greatest weakness :( </p>
<p>Please, could you help me? </p>
<p>Thank you !!!</p>
</div>
<div class="post-text" itemprop="text">
<p>First, there is no reason for decoding anything to immediatly write it back in raw bytes. So a simpler (and more robust) implementation could be:</p>
<pre><code>with gzip.open("GoogleNews-vectors-negative300.bin.gz", "rb") as f:   

    file_content = f.read()
    with open("new_file.txt", "wb") as output:  # just directly write raw bytes
        output.write(file_content)
</code></pre>
<p>If you really want to decode but are unsure of the encoding, you could use Latin1. Every byte is valid in Latin1 and is translated in the unicode character of the same value. So whatever is the byte string <code>bs</code>, <code>bs.decode('Latin1').encode('Latin1')</code> is just a copy of <code>bs</code>.</p>
<p>Finaly, if you really need to filter out all non ascii characters, you could use the <code>error</code> parameter of decode:</p>
<pre><code>file_content = file_content.decode("ascii", errors="ignore") # just remove any non ascii byte
</code></pre>
<p>or:</p>
<pre><code>with gzip.open("GoogleNews-vectors-negative300.bin.gz", "rb") as f:   

    file_content = f.read()
    file_content = file_content.decode("ascii", errors="replace") #non ascii chars are
                                            # replaced with the U+FFFD replacement character
    output = open("new_file.txt", "w", encoding="ascii", errors="replace") # non ascii chars
                                                      # are replaced with a question mark "?"
    output.write(file_content)
    output.close()
</code></pre>
</div>
<span class="comment-copy">Thought about the possibility the gzipped file was UTF8 or unicode or whatever before? Could you check this? Something not handled with 128bit ascii? Just for giggles: try <code>encoding='utf-8',</code> or just <code>file_content.decode("utf-8")</code>  - better get used to utf-8 - its kindof a default nowadays.</span>
<span class="comment-copy">You should use this instead: <a href="https://docs.python.org/3/library/binascii.html" rel="nofollow noreferrer">docs.python.org/3/library/binascii.html</a></span>
<span class="comment-copy">Does <code>file_content.decode('cp1252')</code> work?  <code>0x94</code> is a closing curly double quote in cp1252, which is a common encoding on Windows systems.</span>
<span class="comment-copy">@PatrickArtner (1) ValueError: Argument 'encoding' not supported in binary mode (I'm in binary mode using 'rb') ; (2) I MUST create an ascii file. :(</span>
<span class="comment-copy">@usr2564301: beware, cp1252 is close to Latin1 but is not, only Latin1 guarantees that decode/encode is a no-op.</span>
<span class="comment-copy">thank you, but it gets me this error :  <code>output.write(file_content) TypeError: write() argument must be str, not bytes</code> so basically it still considers <code>file_content</code> as a bin file... but why?</span>
<span class="comment-copy">@inTaowetrust: In first solution, <code>file_content</code> is a byte string and the output file is opened in binary mode (<code>"wb"</code>), while in second <code>file_content</code> becomes a unicode string and the file is opened in text mode. Wait... I had forgotten to assign to <code>file_content</code> :-( . Please see my edit</span>
