<div class="post-text" itemprop="text">
<p>I'm new to Python and trying to get my head round creating a case statement equivalent which will store sql strings that I want to pull out of a dictionary and then execute. The problem is that the sql statements themselves will have variables/functions within them (effectively they are dynamic sql statements). I've read a myriad of comments about whether dict or if..else is the best way to implement what I'm trying to achieve in Python.</p>
<p>Here's my starting code which doesn't return what I want it to</p>
<pre><code>def my_switch(action,user,role):
switcher = {
    "CR": "CREATE USER user PASSWORD genpass()",
    "DR": "DROP USER user",
    "GR": "GRANT ROLE role TO user",
    "RV": "REVOKE ROLE role FROM user",
    "PW": "ALTER USER user PASSWORD genpass()"
}
    logger.debug("Command passed was %s,user passed was %s, role passed was %s",action,user,role)
print switcher.get(action, "Invalid command")

my_switch(cmd,user,role)
</code></pre>
<p>Output when passing CR, bloggsj, APP for example is</p>
<pre><code>CREATE USER user PASSWORD genpass()
</code></pre>
<p>When I wanted it to come back with</p>
<pre><code>CREATE USER bloggsj PASSWORD somegeneratedpw
</code></pre>
<p>How do I get it to recognise user as a variable and execute the genpass() function ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you use <code>pymssql</code>, you could do something like this:</p>
<pre><code>switcher = {
    "CR": "CREATE USER %(user)s PASSWORD %(password)s",
    "DR": "DROP USER %(user)s",
    "GR": "GRANT ROLE %(role)s TO %(user)s",
    "RV": "REVOKE ROLE %(role)s FROM %(user)s",
    "PW": "ALTER USER %(user)s PASSWORD %(password)s"
}

def execute_action(cursor, action, **params):
    try:
        raw_sql = switcher[action]
    except KeyError:
        raise ValueError('Invalid command') # do something with the error
    print('SQL command preview:', raw_sql % params)
    cursor.execute(raw_sql, params)

conn = pymssql.connect(...)
cursor = conn.cursor()
execute_action(cursor, 'CR', user='my_username', password=genpass())
conn.commit()
</code></pre>
<p>In short: prepare <code>switcher</code>, where the actual parameters are replaced with placeholders (pymssql uses a <a href="http://www.pymssql.org/en/stable/ref/pymssql.html#pymssql.Cursor.execute" rel="nofollow noreferrer">syntax similar to Python's</a>) â€” no need to create it every time in the function. Then, collect parameters passed as <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">keyword arguments</a> and let the library do its magic matching the names and escaping anything dangerous.</p>
<p>Note that the output of <code>print()</code> before executing the command does not necessarily match the actual query sent to the database and is for illustrative purposes only.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def my_switch(action,user,role):
    temp_action = action
    temp_user=user
    temp_role=role
    switcher = {
             "CR": "CREATE USER user PASSWORD genpass()",
             "DR": "DROP USER user",
             "GR": "GRANT ROLE role TO user",
             "RV": "REVOKE ROLE role FROM user",
             "PW": "ALTER USER user PASSWORD genpass()"
               }
    logger.debug("Command passed was %s,user passed was %s, role passed was %s",temp_action,temp_user,temp_role)
    print switcher.get(temp_action, "Invalid command")

my_switch(cmd,user,role)
</code></pre>
<p>Now in temp_action, temp_user and temp_role you data will get saved. You can use you where ever you want . But I will recommend you , if you want to reuse the same variables again again in different functions, just go for the classes.
Try this, if you face any problem just let me know.Enjoy coding:)</p>
</div>
<span class="comment-copy">What database library are you using? While it's probably possible to get by with <code>format</code>, you should build SQL queries with some standard escaping tools (see SQL injections).</span>
<span class="comment-copy">Transact-SQL MSSQL.</span>
<span class="comment-copy">Sorry, I meant what packages do you import to work with your database? The idea is to have some placeholders in your switcher and then substitute them with actual values when the function is called, but you need to escape these values properly.</span>
<span class="comment-copy">They can't .. the code I posted will only get called if a role is also passed.  This is more of a learning exercise as to the best /safest way to approach this.</span>
<span class="comment-copy">The correct way depends on what tools you use. Here's an example of string interpolation done right from Python's <code>sqlite</code> module: <code>c.execute('SELECT * FROM user WHERE name=?', username)</code>. You need to see if your library provides something similar.</span>
<span class="comment-copy">This is awesome. I didn't realise you could do that. Many thanks</span>
