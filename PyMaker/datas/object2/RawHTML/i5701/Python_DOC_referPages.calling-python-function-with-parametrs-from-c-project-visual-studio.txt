<div class="post-text" itemprop="text">
<p>I need to call a pipeline realized as a Python (3.6) function from my C++ project under the Windows platform. Function “<strong>function_name</strong>” from file  "<strong>experiment_test.py</strong>" takes text string as input parameter and return another text string as the result. I try the code below but it doesn’t work properly – python functions from libraries <strong>shutil</strong>, <strong>codecs</strong>, <strong>makedirs</strong>, etc doesn’t work.</p>
<p>C++ code (reduced):</p>
<pre><code>std::string Text,Result;
PyObject *pName, *pModule, *pDict, *pFunc, *pArgs, *pValue;
Py_Initialize();

pName = PyUnicode_FromString("experiment_test");
pModule = PyImport_Import(pName);    
pDict = PyModule_GetDict(pModule);

pFunc = PyDict_GetItemString(pDict, "function_name");

pArgs = PyTuple_New(1);
pValue = PyUnicode_FromString(Text.c_str());
PyTuple_SetItem(pArgs, 0, pValue);

if (PyCallable_Check(pFunc))
{
    pValue = PyObject_CallObject(pFunc, pArgs);
    if (pValue != NULL)
    {
        Result = PyUnicode_AsUTF8(pValue);    
        Py_DECREF(pValue);
    }
    else return false;    
}
// ...

Py_Finalize();
</code></pre>
<p>Python code (reduced):</p>
<pre><code>#!/usr/local/bin/python3
import shutil
import codecs
from os import makedirs
from os import path
from os import unlink
from subprocess import call

def function_name():

    name = 'working_files/current_text'

    if not path.exists('working_files'):
        makedirs('working_files')
    if path.exists('result.txt'):
        unlink('result.txt')
    with codecs.open(name + '.txt', 'w', encoding='utf-8') as f:
        f.write(text)
    # ...
    return result
</code></pre>
<p>So no new files will be generated by Python. I tried to import Python modules in C++ by calling <strong>PyRun_SimpleString("import shutil");</strong> etc after <strong>Py_Initialize();</strong> but it doesn’t help.</p>
<p>What do I do wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried replicating the problem with the given intel, but it was impossible, so I created a small example (as close as possible to what's described in the question) - Also referred to as <a href="https://stackoverflow.com/help/mcve">[SO]: How to create a Minimal, Complete, and Verifiable example (mcve)</a> (that should be included in the question <em>BTW</em>)</p>
<p>So, the problem that I'm illustrating here, is:</p>
<ul>
<li><em>C++</em>
<ul>
<li>Load the <em>Python</em> engine</li>
<li>Load a <em>Python</em> module</li>
<li>From that module, load a function which:

<ul>
<li>Receives a (string) argument representing a file name</li>
<li>Reads the file contents (text) and returns it</li>
<li>In case of error, simply returns the file name</li>
</ul></li>
<li>Call that function</li>
<li>Get the function call result</li>
</ul></li>
</ul>
<p>I am using (on <em>Win 10 x64 (10.0.16299.125)</em>):</p>
<ul>
<li><em>Python <strong>3.5.4</strong> x64</em> </li>
<li><em>VStudio 2015 Community Edition</em></li>
</ul>
<p>The structure consists of:</p>
<ul>
<li>A <em>VStudio</em> project / solution

<ul>
<li>A source file (<em>main.cpp</em>)</li>
</ul></li>
<li>A <em>Python</em> module (<em>experiment_test.py</em>)</li>
<li>A test file (<em>test_file.txt</em>)</li>
</ul>
<p><em>main.cpp</em>:</p>
<pre class="lang-cpp prettyprint-override"><code>#include &lt;string&gt;
#include &lt;iostream&gt;

#if defined(_DEBUG)
#undef _DEBUG
#define _DEBUG_UNDEFINED
#endif
#include &lt;Python.h&gt;
#if defined(_DEBUG_UNDEFINED)
#define _DEBUG
#endif

#define MOD_NAME "experiment_test"
#define FUNC_NAME "function_name"
#define TEST_FILE_NAME "test_dir\\test_file.txt"

using std::cout;
using std::cin;
using std::endl;
using std::string;


int cleanup(const string &amp;text = string(), int exitCode = 1) {
    Py_Finalize();
    if (!text.empty())
        cout &lt;&lt; text &lt;&lt; endl;
    cout &lt;&lt; "Press ENTER to return...\n";
    cin.get();
    return exitCode;
}


int main() {
    char c;
    string fName = TEST_FILE_NAME, result;
    PyObject *pName = NULL, *pModule = NULL, *pDict = NULL, *pFunc = NULL, *pArgs = NULL, *pValue = NULL, *pResult = NULL;
    Py_Initialize();
    pName = PyUnicode_FromString(MOD_NAME);
    if (pName == NULL) {
        return cleanup("PyUnicode_FromString returned NULL");
    }
    pModule = PyImport_Import(pName);
    Py_DECREF(pName);
    if (pModule == NULL) {
        return cleanup(string("NULL module: '") + MOD_NAME + "'");
    }
    pDict = PyModule_GetDict(pModule);
    if (pDict == NULL) {
        return cleanup("NULL module dict");
    }
    pFunc = PyDict_GetItemString(pDict, FUNC_NAME);
    if (pFunc == NULL) {
        return cleanup(string("module '") + MOD_NAME + "' doesn't export func '" + FUNC_NAME + "'");
    }
    pArgs = PyTuple_New(1);
    if (pArgs == NULL) {
        return cleanup("NULL tuple returned");
    }
    pValue = PyUnicode_FromString(fName.c_str());
    if (pValue == NULL) {
        Py_DECREF(pArgs);
        return cleanup("PyUnicode_FromString(2) returned NULL");
    }
    int setItemResult = PyTuple_SetItem(pArgs, 0, pValue);
    if (setItemResult) {
        Py_DECREF(pValue);
        Py_DECREF(pArgs);
        return cleanup("PyTuple_SetItem returned " + setItemResult);
    }
    pResult = PyObject_CallObject(pFunc, pArgs);
    Py_DECREF(pArgs);
    Py_DECREF(pValue);
    if (pResult == NULL) {
        return cleanup("PyObject_CallObject returned NULL");
    } else {
        int len = ((PyASCIIObject *)(pResult))-&gt;length;
        char *res = PyUnicode_AsUTF8(pResult);
        Py_DECREF(pResult);
        if (res == NULL) {
            return cleanup("PyUnicode_AsUTF8 returned NULL");
        } else {
            cout &lt;&lt; string("C(++) - Python call: ") &lt;&lt; MOD_NAME &lt;&lt; "." &lt;&lt; FUNC_NAME &lt;&lt; "('" &lt;&lt; fName &lt;&lt; "') returned '" &lt;&lt; res &lt;&lt; "' (len: " &lt;&lt; len &lt;&lt; ")" &lt;&lt; endl;
        }
    }
    return cleanup("OK", 0);
}
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>The <em>_DEBUG</em> / <em>_DEBUG_UNDEFINED</em> stuff at the beginning - a (lame) workaround (<em>gainarie</em>) to link against <em>Release</em> <em>Python</em> lib (<em>python35.lib</em>) when building in <em>Debug</em> mode (as opposed to <em>python35_<strong>d</strong>.lib</em>) - read below</li>
<li>As I said, tried to simplify the code (got rid of the <em>PyCallable_Check</em> test)</li>
<li>It's easily noticeable that the code is written in <strong><em>C</em></strong> style, although it uses the <strong><em>C++</em></strong> compiler</li>
<li>Since <em>Python API</em> (<a href="https://docs.python.org/3/extending/embedding.html" rel="nofollow noreferrer">[Python 3]: Embedding Python in Another Application</a>) (both <em>extending</em>/<em>embedding</em>) uses pointers, make sure to <strong>test for <em>NULL</em>s</strong>, otherwise there's a high chance getting <em>segfault</em> (<em>Access Violation</em>)</li>
<li>Added the <a href="https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF" rel="nofollow noreferrer">[Python 3]: void <strong>Py_DECREF</strong>(<em>PyObject *o</em>)</a> statements to avoid memory leaks</li>
<li><p>Build (compile / link) / Run options (obviously, you got past these, since you were able to run your program, but I'm going to list them anyway - for sure there are some shortcuts here, when dealing with <strong>more than one</strong> such project):</p>
<ul>
<li>Check <a href="https://stackoverflow.com/questions/34748913/lnk2005-error-in-clr-windows-form/34777349#34777349">[SO]: LNK2005 Error in CLR Windows Form (@CristiFati's answer)</a> for details building a <em>Win PE</em></li>
<li>To speed-up process when building projects that depend on <em>Python</em>, I created a <em>VStudio User Macro</em> (called e.g. <em>Python35Dir</em> - like in the image below, pointing to my <em>Python 3.5</em> installation dir)</li>
</ul>
<p><a href="https://i.stack.imgur.com/F3WEc.jpg" rel="nofollow noreferrer"><img alt="macros" src="https://i.stack.imgur.com/F3WEc.jpg"/></a></p>
<p><strong>Notes</strong>:</p>
<ul>
<li>The path ("<em>c:\Install\x64\Python\Python\3.5</em>") points to the installation downloaded from the official site</li>
<li>Obviously, for <em>32bit</em>, the path isn't set accordingly</li>
<li><p>This path contains (as expected) a <em>Release</em> version, and this is fine as long as I don't need to get into <em>Python</em> code (and as long as I don't mess around with memory - as (when building my app in <em>Debug</em> mode) I have 2 <em>C runtimes</em> in my <em>.exe</em> - check the links below to see what happens when tampering with <em>MSVC runtimes</em> (<em>UCRT</em>s)):</p>
<ul>
<li><a href="https://stackoverflow.com/questions/8528437/when-using-fstream-in-a-library-i-get-linker-errors-in-the-executable/41558269#41558269">[SO]: When using fstream in a library I get linker errors in the executable (@CristiFati's answer)</a></li>
<li><a href="https://stackoverflow.com/questions/35116437/errors-when-linking-to-protobuf-3-on-ms-visual-c/35118400#35118400">[SO]: Errors when linking to protobuf 3 on MS Visual C (@CristiFati's answer)</a></li>
<li>For <em>exceptional</em> cases, I have built <em>Python</em> in <em>Debug</em> mode and got the binaries, but that's not my 1<sup>st</sup> choice, since it requires settings (paths) changes</li>
</ul></li>
<li><p><em>Compile</em>:</p>
<p>Let <em>VSTudio</em> know about the <em>Python</em> include files location:</p>
<p><a href="https://i.stack.imgur.com/2UjNx.jpg" rel="nofollow noreferrer"><img alt="include" src="https://i.stack.imgur.com/2UjNx.jpg"/></a></p></li>
<li><p><em>Link</em>:</p>
<p>Let <em>VSTudio</em> know about the <em>Python</em> lib files location (if only <em>pythonxx*.lib</em> (<strong><em>%PYTHONCORE%</em></strong>) is required, nothing extra needed, since <em>PYTHONCORE</em> is included by default by <em>Python</em> code; otherwise, all the rest should be specified in the <a href="https://docs.microsoft.com/en-us/cpp/build/reference/dot-lib-files-as-linker-input" rel="nofollow noreferrer">[MS.Docs]: .Lib Files as Linker Input</a>:</p>
<p><a href="https://i.stack.imgur.com/1V0bw.jpg" rel="nofollow noreferrer"><img alt="link" src="https://i.stack.imgur.com/1V0bw.jpg"/></a></p></li>
<li><p><em>Run</em> / <em>Debug</em> - let:</p>
<ul>
<li><em>VStudio</em> know where <em>Python</em> runtime <strong><em>python35.dll</em></strong> is located (<em>%PATH%</em>)</li>
<li>Loaded <em>Python</em> runtime know where additional modules are located (<em>%PYTHONPATH%</em>)</li>
</ul>
<p><a href="https://i.stack.imgur.com/nNcxu.jpg" rel="nofollow noreferrer"><img alt="debug" src="https://i.stack.imgur.com/nNcxu.jpg"/></a></p></li>
</ul></li>
</ul>
<p><em>experiment_test.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>import os
import shutil
import codecs


def function_name(file_name):
    print("Py - arg: '{}'".format(file_name))
    if not os.path.isfile(file_name):
        return file_name
    with open(file_name, "rb") as f:
        content = f.read().decode()
        print("Py - Content len: {}, Content (can spread across multiple lines): '{}'".format(len(content), content))
        return content
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>An almost dummy module, as specified at the beginning</li>
<li>Works <strong>only with <em>text</em> files</strong> (<em>decode</em> will fail for <em>binary</em> files)</li>
<li>Imports modules that aren't used, to see that they are OK (that's obvious, if one such <em>import</em> statement succeeds, all should)</li>
<li>Prints some data on <em>stdout</em> (to be matched with what's on the <em>C++</em> side)</li>
<li>Located in a path <strong>known by <em>Python</em></strong> (<em>%PYTHONPATH%</em> from previous step)</li>
<li>Has 1 argument (<em>file_name</em>) - <strong>crucial difference</strong> compared to the one in the question which doesn't have any (don't know whether that's a logical mistake or a <em>typo</em> like one) </li>
</ul>
<p><em>test_dir\test_file.txt</em>:</p>
<pre><code>line 0 - dummy
line 1 - gainarie
</code></pre>
<p><strong>Output</strong> (console from <em>VStudio</em>):</p>
<blockquote>
<pre><code>Py - arg: 'test_dir\test_file.txt'
Py - Content len: 33, Content (can spread across multiple lines): 'line 0 - dummy
line 1 - gainarie'
C(++) - Python call: experiment_test.function_name('test_dir\test_file.txt') returned 'line 0 - dummy
line 1 - gainarie' (len: 33)
OK
Press ENTER to return...
</code></pre>
</blockquote>
</div>
<span class="comment-copy">What <b>exactly</b> doesn't work (error, traceback, etc)? Did you try running the <i>Python</i> module directly (without adding the <i>C++</i> layer)? Note that your code is syntactically incorrect (indentation-wise).</span>
<span class="comment-copy">Python functions from shutil, codecs, makedirs doesn't work when  “function_name” is called from C++. If I call Python module from the command line, it works correctly. No errors occur - C++ receive the result which is equal to input. Python function should write input string into the text file, process this file and then read the result and return it back. Indentation in my code is correct, unfortunately I did a mistake when I wrote it here, thank you.</span>
<span class="comment-copy">Let me know if this worked out for you.</span>
<span class="comment-copy">Thank you for such a detailed answer! Im' trying to use it with my code, but the python module fails to load today. I think, I will try to use your code on my machine if I'll not find my error.</span>
<span class="comment-copy">Did you have a chance to test (it's not just the code but also the build process)? If you still have issues executing the <i>Python</i> code, wrap all the code from <i>experiment_test.py</i> in a <code>try/except</code> clause and print the exception.</span>
<span class="comment-copy">Sorry for keep you waiting - my code doesn't work at the time.</span>
<span class="comment-copy">It's really interesting now with build process differences. Today I started to rebuild your solution (with my software versions) - but if I write "$(PythonDir)\libs" in Additional dependencies, I get link error. At the time I stopped with "$(PythonDir)\libs\python36.lib" and will continue a little later. I will write about the result.</span>
