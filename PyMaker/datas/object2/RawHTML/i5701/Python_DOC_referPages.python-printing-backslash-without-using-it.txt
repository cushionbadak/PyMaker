<div class="post-text" itemprop="text">
<p>I have the following issue. I need to represent <code>'\'</code> in Python without using <code>'\'</code>. Is there a way to achieve this using the functions <code>print()</code>, <code>eval()</code>, <code>str()</code> or <code>repr()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>A first resource is <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow noreferrer"><code>chr</code></a>, e.g., <code>chr(92)</code>.</p>
<p>If <code>chr</code> does not fit your needs, you would get the backslash from "somewhere".</p>
<p>Under Windows, a possible "safe" place to look for is in path names.
E.g.,</p>
<pre><code>import os
print( str(os.getcwd())[2] )   # (Almost certainly) gives you a backslash
print( os.sep )                # Gives you a backslash
</code></pre>
<p>Or, you may have it stored somewhere you know, and go look for it.
E.g., in a file, written in memory, etc.
I am not sure these are acceptable options for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may do this with <code>eval</code>. As <code>eval</code> simply takes a string as an argument, you're arguably not using the <code>chr</code> built-in function directly ;)</p>
<p>Take this as an example and do not wonder about the double backslash, it's because a single one is for escaping characters:</p>
<pre><code>&gt;&gt;&gt; backslash = eval('chr(92)')
&gt;&gt;&gt; backslash
'\\'
&gt;&gt;&gt; len(backslash)
1
&gt;&gt;&gt; print(eval('chr(92)'))
\
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">You can try <code>print(chr(92))</code>, but it doesn't use the functions you list.</span>
<span class="comment-copy">maybe an alternative to <code>chr()</code>?</span>
<span class="comment-copy">Is there a particular reason you can't use a literal backslash? In strings, two backslashes escape to a single literal backslash. <code>print('\\')</code> would produce <code>'\'</code> for example.</span>
<span class="comment-copy">@sytech yes I know that, but i am 'not allowed' to use <code>'\'</code> so the goal is to somehow circumvent it</span>
<span class="comment-copy">possibly using <code>string.punctuation</code> from the <code>string</code> module. <code>string.punctuation[23]</code> is a backslash.</span>
