<div class="post-text" itemprop="text">
<p>I want to open a text file, scan for lines which start with <code>RECORD-FEB</code>. If a line starts with <code>RECORD-FEB</code>, I want to find 2 uppercase letters followed by a number (call it number1), followed by a literal <code>$--</code>, then another number (call it number2). If number1 is equal to number2 then I want to add a '@' symbol at the beginning of that line and return the line number, otherwise just continue.</p>
<p>Sample patterns in matching lines:</p>
<pre><code>AB566$--12  Invalid case 
RT21$--9    Invalid Case
TP667$--677 Valid case
</code></pre>
<p>My problem is that <code>re.search</code> is not working: it is neither giving a result nor error. Basically, my <code>abc</code> function is not working.</p>
<pre><code>import re
def main():
    with open(r"filename.txt") as f:
        for line in f:
            if "RECORD-FEB" in line:
            #   print(line)
                abc(line)

def abc(line):
    case = re.search(r"\[A-Z]{2}\d+\[$][--]\d+",line)
    if case:
        print(line)
        # code to append @ at beginning of that line and return line number
main()
</code></pre>
<p>Content of filename.txt is like this:</p>
<pre><code>    abcd efg avcd AB566$--12 pqrs
 RECORD-FEB    MB566$--12 abcd efgh lmno
       RECORD-FEB    FREWREWRE EWRRWERE AB566$--12 EREWWRRW
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Basic Regex Issue</strong></p>
<p>The biggest problem with your code is the gratuitous use of backslashes and square brackets in your regular expression. Aside from that, you are basically going about solving your problem correctly.</p>
<p>Backslashes generally make special characters literal and give special meaning to regular characters. Any time you do <code>\[</code>, you are matching against the literal opening bracket, which you never want to do in your particular application.</p>
<p>Square brackets do not indicate literal strings. They set up a character class, which means that any character in the brackets can match the corresponding character in the string. Specifically, <code>[--]</code> does not mean literal double dash. It means "any character that is either a dash or a dash", which is redundant and not what you want.</p>
<p>You need to change <code>r"\[A-Z]{2}\d+[$][--]\d+"</code> to the much simpler <code>r"[A-Z]{2}\d+\$--\d+"</code>. The only character class you need is <code>[A-Z]</code> for uppercase letters. The only escaped special character you need is <code>\$</code>, to get a literal dollar symbol instead of a match for EOL.</p>
<p><strong>Capturing Numbers</strong></p>
<p>To be able to compare the numbers, you need to capture parts of your match. You can do this using parentheses to mark the capture group. Now your regex will look like <code>r"[A-Z]{2}(\d+)\$--(\d+)"</code>.</p>
<p>You do not need to convert the textual representation of the numbers. If the strings don't match, they don't match.</p>
<p><strong>Compiling Regular Expressions</strong></p>
<p>Right now you are using <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.search</code></a> in every iteration of your loop. This compiles the regex from scratch for every line in the file. Not a big deal for small files, but you <em>will</em> notice a difference for large files.</p>
<p>In general, if you find yourself applying a regular expression more than once, consider pre-compiling it using <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile</code></a>. You can then use the <a href="https://docs.python.org/3/library/re.html#re.regex.search" rel="nofollow noreferrer"><code>search</code></a> method on the compiled <a href="https://docs.python.org/3/library/re.html#regular-expression-objects" rel="nofollow noreferrer"><code>regex</code></a> object, which operates the same way but will be much faster.</p>
<p><strong>Line Numbers</strong></p>
<p>To get the line numbers when iterating a file, wrap your file iterator in <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>for num, line in enumerate(file):
    ...
</code></pre>
<p>You can pass the line number to <code>abc</code>, to be returned if there is a match, or better yet, you can just eliminate <code>abc</code> entirely.</p>
<p><strong>Prepending Elements to a Line</strong></p>
<p>As a rule, it is not practical to modify a file in-place. A file is a collection of bytes on the disk. If you were to insert a <code>@</code> character into a random location in the file, all the remaining bytes would have to be shifted over. Instead, you usually write to another file, with all lines being identical except the ones you want to change. If you want the insertion to look seamless, you can move the resulting file to overwrite the original when you are done.</p>
<p>This means you will have to open an output file. Every line that matches your pattern gets written with the <code>@</code> prefix. All other lines will be passed-through as-is.</p>
<p><strong>Code</strong></p>
<p>Combining all of the above, you get something like this:</p>
<pre><code>import re

def main():
    pattern = re.compile(r"[A-Z]{2}(\d+)\$--(\d+)")
    matches = []
    with open(r"filename.txt") as f, open(r"filename.txt.out", "w") as out:
        for num, line in enumerate(f):
            if line.strip().startswith("RECORD-FEB"):
                case = pattern.search(line)
                if case and case.group(1) == case.group(2):
                    matches.append(num)
                    line = '@' + line
            print(line, file=out)
    print(matches)

main()
</code></pre>
<p>I've gotten rid of the <code>abc</code> function since it does not do much. All matching line numbers where <code>number1 == number2</code> get appended into the list <code>matches</code>, which is printed at the end.</p>
<p>If you want to overwrite the original file after you are done, do the following:</p>
<pre><code>import shutil

...
    shutil.move("filename.txt.out", "filename.txt")
</code></pre>
</div>
<span class="comment-copy">So what's the problem? Looks like you either didn't finish writing your question, or you expect us to read your mind.</span>
<span class="comment-copy">Please add relevant example input text.</span>
<span class="comment-copy">What output do you get vs what output do you expect? What is going wrong? Are you getting an error? If so, please post it, preferably with a stack trace.</span>
<span class="comment-copy">i have added information , apology for the mess @MadPhysicist</span>
<span class="comment-copy">It is working fine. You don't have a single line that satisfies <code>if "RECORD-FEB" in line:</code></span>
