<div class="post-text" itemprop="text">
<p>I'm trying to make a custom command line to control a robotic arm.
So I want to be able to run the program and type in servoMove(arg1,arg2) and have arg1 and arg2 get transferred into the function servoMove. I believe that is what you would call a command line interface.</p>
<pre><code>servoPos = [0,1,2,3,4]

def servoMove(servo,angle):
    servoPos[servo] = angle
    print(servoPos[servo])

def commands(cmd):
    if cmd == 'servoMove('+arg1+','+arg2+')':
        servoMove(arg1,arg2)
    else:
        print("[Error] - Unknown Command")

commands(input(""))
</code></pre>
<p>Clearly, the code below doesn't work for this.</p>
<pre><code>    if cmd == 'servoMove('+arg1+','+arg2+')':
        servoMove(arg1,arg2)
</code></pre>
<p>Does anybody know how I can do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regular expression to parse the command.</p>
<pre><code>import re
def commands(cmd):
    m = re.match(r'servoMove\((\d+),(\d+)\)', cmd)
    if m:
        servoMove(int(m.group(1)), int(m.group(2)))
        return
    # Put similar tests for other commands here
    # ...
    print("[Error] - Unknown Command")
</code></pre>
<p>This is a really crude way to do it -- if the user doesn't enter the command exactly right it will complain that the command is unknown. If you want something more robust, you need to learn how to write a real parser. Or use a better user interface, such as Tkinter to implement a form that the user can fill out.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just looking at the structure the problem is in the if statement: arg1 and arg2 are undefined at that stage, so you'll get a False. For starters you'd want to replace that with something like:</p>
<pre><code>#Look at the nine first characters to see if they match your function
if cmd[:9] == 'servoMove':
</code></pre>
<p>To extract your arguments, I'd use some string manipulation as in <a href="https://stackoverflow.com/questions/4894069/regular-expression-to-return-text-between-parenthesis">here.</a> I've sliced the input to take the text between "(" and "," as arg1, and "," and ")" as arg2.</p>
<pre><code>arg1 = cmd[cmd.find("(")+1:cmd.find(",")]
arg2 = cmd[cmd.find(",")+1:cmd.find(")")]
</code></pre>
<p>Putting it together:</p>
<pre><code>def commands(cmd):
    if cmd[:9] == 'servoMove':
        arg1 = cmd[cmd.find("(")+1:cmd.find(",")]
        arg2 = cmd[cmd.find(",")+1:cmd.find(")")]
        servoMove(arg1, arg2)
    else:
        print("[Error] - Unknown Command")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3.6/library/cmd.html" rel="nofollow noreferrer">cmd module</a> to build a command line interface.</p>
<p>Here's an example:</p>
<pre><code>import cmd

servoPos = [0,1,2,3,4]

def servoMove(servo,angle):
    servoPos[servo] = angle
    print(servoPos[servo])

class ServoShell(cmd.Cmd):
    prompt = '=&gt; '

    def do_servoMove(self, arg):
        'Edit this to give a description to the function when typing ?'
        servoMove(*parse(arg))

def parse(arg):
    'Convert a comma separated string into a tuple'
    return tuple(map(int, arg.strip('()').split(',')))

if __name__ == '__main__':
    ServoShell().cmdloop()
</code></pre>
</div>
<span class="comment-copy">I'm guessing the command line interface is some kind of requirement in the brief, otherwise why wouldn't you just run the module and then in the shell prompt type "servoMove(etc"?</span>
<span class="comment-copy"><code>"servoMove('+arg1+','+arg2+')"</code></span>
<span class="comment-copy">This is neater than my method below if you're happy enough to use Regex. +1</span>
<span class="comment-copy">@neophlegm Don't know what controls the order, but your answer is above when I look :)</span>
<span class="comment-copy">Thanks! I've tested it out and it works flawlessly.</span>
<span class="comment-copy">If you're going this way, it's probably easier to use <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>.startswith()</code></a> to parse the command.</span>
