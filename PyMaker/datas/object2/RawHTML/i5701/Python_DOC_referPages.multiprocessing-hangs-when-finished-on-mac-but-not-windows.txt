<div class="post-text" itemprop="text">
<p>I have two dev environments... a Windows computer and a Mac for when on the road. The script runs fine on the Windows computer and will cycle through all of the pools. But on the Mac, it just hangs. It does work, however, when I manually set the process count to 1.</p>
<p>This hangs...</p>
<pre><code>def insert_user_request(self, data):
    pool_size = multiprocessing.cpu_count() * 2
    pool = multiprocessing.Pool(processes=pool_size)
    pool.map(self.insert_user, data)
</code></pre>
<p>This works...</p>
<pre><code>def insert_user_request(self, data):
    pool_size = 1
    pool = multiprocessing.Pool(processes=pool_size)
    pool.map(self.insert_user, data)
</code></pre>
<p>The function the pool calls inserts data into a database and sure enough, the data goes is fine. So it's the "shutting down" of the pools that seems to be the issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>Credit to Antti Haapala in the comments of the original question, but the spawn start method worked.</p>
<pre><code>def insert_user_request(self, data):
    multiprocessing.set_start_method('spawn')
    pool_size = multiprocessing.cpu_count() * 2
    pool = multiprocessing.Pool(processes=pool_size)
    pool.map(self.insert_user, data)
</code></pre>
</div>
<span class="comment-copy">Same version numbers of python and all libraries involved ?</span>
<span class="comment-copy">If you've used threads in the Mac program, that could be an issue. If you're using Python 3, you'd want to try the <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer"><code>spawn</code> start method</a> on Mac too</span>
<span class="comment-copy">The spawn start method worked. Thanks, Antti!</span>
<span class="comment-copy">@AnttiHaapala would like to explain a bit more why set start method to spawn works?</span>
<span class="comment-copy">@georgexsh the problem with the default start method is that it does a <code>fork</code>. If you have a multithreading process that does fork and <b>then continues running</b>, POSIX says that the behaviour is undefined. Unfortunately, any complicated library one uses on Mac or Linux might use threads without you knowing, so the effect of using multiprocessing with the <code>fork</code> method is totally undefined almost all the time. <code>spawn</code> doesn't use fork like that. Notice that if you were using Python 2, you couldn't fix this at all.</span>
