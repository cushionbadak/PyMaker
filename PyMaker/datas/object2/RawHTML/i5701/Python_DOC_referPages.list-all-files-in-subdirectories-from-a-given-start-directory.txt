<div class="post-text" itemprop="text">
<p>Suppose I have a directory tree like this:</p>
<pre><code>a/
├── b
│   ├── d.png
│   └── e
│       └── f.png
└── c.png
</code></pre>
<p>My desired output is: 
if I want to search for files in <code>a/b/</code>:
<code>b/d.png</code> &amp; <code>b/e/f.png</code></p>
<p>and in case of <code>a/</code>: <code>a/c.png</code> <code>a/b/d.png</code> <code>a/b/e/f.png</code></p>
<p>I know how to list all the files in a subdirectory using os.walk and I searched a lot for similar situation like mine but I didn't find any.</p>
<p>Here's my latest attempt:</p>
<pre><code>path = "a/b"
pathBase = os.path.basename(path)

for p, dirs, files in os.walk(path):
    for file in files:
        print(os.path.join(p.replace(path, pathBase),file))
</code></pre>
<p>while this works as expected with <code>a/b/</code> it doesn't work with <code>a/</code>.</p>
<p>Output for <code>a</code> is: <code>c.png</code> <code>b/d.png</code> <code>b/e/f.png</code> which is not as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code will be (almost) correct if you strip the trailing slash from <code>path</code>, but in any case you should use <code>os.path.relpath</code> to compute the relative file paths:</p>
<pre><code>import os

def f(path):
    path = path.rstrip(os.sep)
    parent = os.path.dirname(path)
    for p, dirs, files in os.walk(path):
        for file in files:
            print(os.path.relpath(os.path.join(p, file), parent))
</code></pre>
<p>For what it's worth, <code>pathlib</code> makes path manipulation easier:</p>
<pre><code>from pathlib import Path

def f(path):
    path = Path(path)
    for x in path.rglob('*'):
        if not x.is_dir():
            print(x.relative_to(path.parent))
</code></pre>
</div>
<span class="comment-copy">"It doesn't work." means exactly?</span>
<span class="comment-copy">I edited my original post with output for <code>a/</code></span>
<span class="comment-copy">The output for <code>path = "a/"</code> is still <code>c.png</code> etc, not <code>a/c.png</code> This is where I am stuck at</span>
<span class="comment-copy">Aha! after your edit, this works as expected right now. But can you explain a little more why stripping the path result in the right answer?</span>
<span class="comment-copy">@JonasEphrem in your original code you were replacing occurrences of <code>path</code> with <code>os.path.basename(path)</code>, which returns empty string for <code>path = 'a/'</code>. We could remove the trailing slash to make sure the name is always non-empty. OTOH for that <code>path</code> <code>os.path.dirname</code> returned <code>'a'</code>, when I expected empty string, and removing trailing slashes solves that, too. You can use <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>os.path.normpath</code></a> to perform full path normalization (and not just a part of that process).</span>
