<div class="post-text" itemprop="text">
<p>Hello  I have a string like this:</p>
<pre><code>AdvancedHTMLParser (8.0.1)\nappdirs (1.4.3)\nbeautifulsoup4 (4.6.0)\nchardet (3.0.4)\nchrome-gnome-shell (0.0.0)\ncupshelpers (1.0)\ncycler (0.10.0)\nCython (0.27.3)
</code></pre>
<p>I want to split this in a list of tuples.
So that each list items has a tuple with two values, the name and the version (without the brackets).</p>
<p>I was only able to split the string by newline but I don't know how to properly grab the numbers in the brackets etc
Can someone explain me how I can do this?</p>
<p><strong>EDIT :</strong>
I am trying to parse <code>pip list local</code></p>
<pre><code> def get_installed_modules(self):
    data = subprocess.check_output(["pip", "list", "--local"])
    result = [tuple(line.replace('(', '').replace(')', '').split())
              for line in data.splitlines()]
    print(result)
</code></pre>
<p>I have the project that I cant just split the string but it requires a byte like object...</p>
<pre><code>TypeError: a bytes-like object is required, not 'str'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1</strong><br/>
If you're getting these outputs from <code>pip</code>, you can do it programmatically, using <code>pip.operations.freeze</code> -</p>
<pre><code>from pip.operations import freeze  

modules = list(
    map(lambda x: x.split('=='), freeze.freeze(local_only=True))
)

print(modules)

[['aiodns', '1.1.1'],
 ['aiohttp', '1.2.0'],
 ['appdirs', '1.4.0'],
 ['appnope', '0.1.0'],
 ['argparse', '1.4.0'],
...
</code></pre>
<hr/>
<p><strong>Option 2</strong><br/>
You could also use <code>get_installed_distributions</code>, taken from <a href="https://stackoverflow.com/a/35120690/4909087">here</a>:</p>
<pre><code>import pip

modules = []
for i in pip.utils.get_installed_distributions():
    modules.append((i.key, i.version))

print(modules)

[('pytreebank', '0.2.4'),
 ('cssselect', '1.0.1'),
 ('numba', '0.36.0.dev0+92.g2818dc9e2'),
 ('llvmlite', '0.0.0'),
 ('yarl', '0.8.1'),
 ('xlwt', '1.3.0'),
 ('xlrd', '1.1.0'),
 ...
]
</code></pre>
<hr/>
<p><strong>Option 3</strong><br/>
A third method is using <code>pip.main</code> - </p>
<pre><code>import pip
pip.main(['list', 'local'])
</code></pre>
<p>However, this writes to <code>stdout</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a>:</p>
<pre><code>&gt;&gt;&gt; s = "AdvancedHTMLParser (8.0.1)\nappdirs (1.4.3)\nbeautifulsoup4 (4.6.0)\nchardet (3.0.4)\nchrome-gnome-shell (0.0.0)\ncupshelpers (1.0)\ncycler (0.10.0)\nCython (0.27.3)"
&gt;&gt;&gt; re.findall(r"(.+) \((.+)\)", s)
[('AdvancedHTMLParser', '8.0.1'),
 ('appdirs', '1.4.3'),
 ('beautifulsoup4', '4.6.0'),
 ('chardet', '3.0.4'),
 ('chrome-gnome-shell', '0.0.0'),
 ('cupshelpers', '1.0'),
 ('cycler', '0.10.0'),
 ('Cython', '0.27.3')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Straightforwardly:</p>
<pre><code>data = 'AdvancedHTMLParser (8.0.1)\nappdirs (1.4.3)\nbeautifulsoup4 (4.6.0)\nchardet (3.0.4)\nchrome-gnome-shell (0.0.0)\ncupshelpers (1.0)\ncycler (0.10.0)\nCython (0.27.3)'
result = [tuple(line.replace('(', '').replace(')', '').split())
          for line in data.splitlines()]

print(result)
</code></pre>
<p>The output:</p>
<pre><code>[('AdvancedHTMLParser', '8.0.1'), ('appdirs', '1.4.3'), ('beautifulsoup4', '4.6.0'), ('chardet', '3.0.4'), ('chrome-gnome-shell', '0.0.0'), ('cupshelpers', '1.0'), ('cycler', '0.10.0'), ('Cython', '0.27.3')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Split each line on the opening paren &amp; remove the closing one:</p>
<pre><code>self.__all_modules = [tuple(x[:-1].split(" (")) for x in data.splitlines()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer doesn't work anymore with the latest version of pip (&gt; 10.0)</p>
<p>All those methods are now in private packages.
For example the freeze module is in <a href="https://github.com/pypa/pip/blob/master/src/pip/_internal/operations/freeze.py" rel="nofollow noreferrer">_internal/operations</a>. You can still use it but personally I don't think it is a good idea to use internal packages. They might be moved or changed easily in a new version.</p>
<p>What you can do is to keep using pip cli version, use the <code>--format json</code> option to have formatted output and parse this in python. </p>
<pre><code> import subprocess
 import json
 data = subprocess.check_output(["pip", "list", "--format", "json"])
 parsed_results = json.loads(data)
 [(element["name"], element["version"]) for element in parsed_results]
</code></pre>
</div>
<span class="comment-copy">Does this come from <code>pip freeze</code>?</span>
<span class="comment-copy">If you are trying to parse the output of <code>pip freeze</code>, you can do that programmatically though python.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ , yes, please see my edited post</span>
<span class="comment-copy">Wonderful, there's a much easier way than this.</span>
<span class="comment-copy">Perfect ! Thanks!</span>
<span class="comment-copy">@user4042470 You're welcome. To be sure, please try them all out and let me know which one <i>didn't</i> work. Cheers.</span>
<span class="comment-copy">Is there also a way to check this for a certain virtualenv? Since freeze.freeze is for the local packages outside the virtualenv i believe?</span>
<span class="comment-copy">@user4042470 Maybe you need to pass <code>isolated=True</code> to <code>freeze</code>?</span>
<span class="comment-copy">Unfortunately, there are no docs on using pip programmatically, so I don't even know what half the arguments do. There must be a way, but I'm not really sure about it.</span>
<span class="comment-copy">Found a mistake, let me fix it... Fixed; you can retract you downvote now (if that was the reason)</span>
<span class="comment-copy">Thanks for the replies.</span>
<span class="comment-copy">When I try to directly query the data like this and split like so : <code>data = subprocess.check_output(["pip", "list", "--local"])         result = [tuple(line.replace('(', '').replace(')', '').split())                   for line in data.splitlines()]         print(result)</code> I get the exception <code>TypeError: a bytes-like object is required, not 'str'</code>. What can I do to fix this? I mean data should be string..</span>
<span class="comment-copy">No I use python 3.6</span>
