<div class="post-text" itemprop="text">
<p>I have various functions accepting the same arguments and returning the same type. They do similar things (eg. performing integration with different approximate methods) and differ only in name. I want to force all variations to have the same signature.</p>
<p>It could be done by wrapping them into classes, but there's no conceptual reason to. So, is there a concept similar to <code>interface</code> for functions? That is, is there any way to do something like </p>
<pre><code>abstract Double integration(Double[] xs, Double[] ys);
Double RiemmannIntegration implements integration(...) {...}
</code></pre>
<p>Obviously, the question makes sense only for languages in which functions are first class objects (i'm mostly interested in python/javascript). </p>
</div>
<div class="post-text" itemprop="text">
<p>The concept you're looking for is the <strong>type</strong> of the function. Specifically, this is a "higher-kinded" type because it is a type of types rather than a type of values.</p>
<p>In a language like Haskell, you <em>must</em> pass arguments that are functions like this. If you don't name the type explicitly the compiler will infer it for you. But if you try to pass a different function that accepts different types then you'll get a compilation error. </p>
<p>C# has a special syntax for declaring a type of a function, called a <em>delegate type</em>. Java 8+ has a concept of a <em>functional interface</em>, or an interface with only one method, and has some language features to make it easier to pass around an object that represents a function of a given type.</p>
<p>In JavaScript and Python, objects don't really have interfaces, at least not explicitly. But what you can implement are <em>protocols</em> where you require that an argument be a function that accepts certain arguments and behaves a certain way. A good example of this in the Python standard library is the <code>key</code> argument to the <code>sorted()</code> function: it's required to be a function that accepts one item of the iterable to be sorted and returns a comparable object to use as the sort key.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, it is possible to enforce type checking</p>
<pre><code>def type_check_decorator(args_types):
    def real_decorator(func):
        def wrapper(*args):
            # type checking
            for i, (a, t) in enumerate(zip(args, args_types)):
                if not isinstance(a, t):
                    raise ValueError('Type error on argument {}, should be {} but {} given'
                                     .format(i, t, type(a)))
            # execute real function
            return func(*args)
        return wrapper
    return real_decorator


my_interface = type_check_decorator([int, int])

@my_interface
def func1(a, b):
    return a + b
</code></pre>
<p>With this decorator you may have</p>
<pre><code>func1(1, 2)    # OK
func1(1.1, 2)  # ValueError: Type error on argument 0, should be &lt;type 'int'&gt; but &lt;type 'float'&gt; given
</code></pre>
<p>To use this decorator, put the types you want for the arguments in args_types as an array, and apply the resulting interface on the function you define. You will probably still have to use <code>typing</code> library for effects such as 'None-able' arguments, or implement your own by modify this code. In fact, the merit of this decorator is enabling you to define an arbitrary type-checking routine (otherwise <code>typing</code> could be better).</p>
<p>If your typing requirement is exactly the same for all functions, you may drop the outermost decorator and use a hard-coded <code>arg_types</code>.</p>
</div>
<span class="comment-copy">You want this to be enforced at compile time?</span>
<span class="comment-copy">In languages where functions are first-class objects, their callable signature <i>is</i> (part of) their interface. Also the two examples you give are languages that do not have typing (by default, at least; JS has TypeScript, see <a href="https://www.typescriptlang.org/docs/handbook/functions.html" rel="nofollow noreferrer">typescriptlang.org/docs/handbook/functions.html</a>, and Python has <code>typing</code>, see <a href="https://docs.python.org/3/library/typing.html#callable" rel="nofollow noreferrer">docs.python.org/3/library/typing.html#callable</a>).</span>
<span class="comment-copy">@schwobaseggl: preferably yes. kind of what would happen with the method of a class</span>
<span class="comment-copy">@blue_note: But you said you're interested in Python and JavaScript, two languages that don't have compile-time checking of any types, let alone functional ones. That doesn't make sense.</span>
<span class="comment-copy">@DanielPryden: indeed. However, I am mostly interested about whether a such concept exists in any language. Also, python has type annotations, and typescript adds similar functionality to javascript, so something similar could be achieved</span>
<span class="comment-copy">Or in newer versions of Python you can use the <code>typing</code> module. While potentially useful knowledge, this doesn't answer the question.</span>
