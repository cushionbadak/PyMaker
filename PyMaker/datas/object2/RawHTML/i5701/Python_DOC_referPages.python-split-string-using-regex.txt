<div class="post-text" itemprop="text">
<p>The POS tagger that I use processes the following string</p>
<pre><code>3+2
</code></pre>
<p>as shown below.           </p>
<pre><code>3/num++/sign+2/num
</code></pre>
<p>I'd like to split this result as follows using python.</p>
<pre><code>['3/num', '+/sign', '2/num']         
</code></pre>
<p>How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> - </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'(?&lt;!\+)\+', '3/num++/sign+2/num')
['3/num', '+/sign', '2/num']
</code></pre>
<p>The regex pattern will split on a <code>+</code> sign as long as no other <code>+</code> precedes it.</p>
<pre><code>(?&lt;!   # negative lookbehind
\+     # plus sign
)     
\+     # plus sign
</code></pre>
<p>Note that lookbehinds (in general) do not support varying length patterns.</p>
</div>
<div class="post-text" itemprop="text">
<p>The tricky part I believe is the double <code>+</code> sign. You can replace the signs with special characters and get it done. </p>
<p>This should work,</p>
<pre><code>st = '3/num++/sign+2/num'

st = st.replace('++', '@$')
st = st.replace('+', '@')
st = st.replace('$', '+')

print (st.split('@'))
</code></pre>
<p>One issue with this is that, your original string cannot contain those special characters <code>@</code> &amp; <code>$</code>. So you will need to carefully choose them for your use case. </p>
<p><strong>Edit</strong>: This answer is naive. The one with regex is better
That is, as pointed out by COLDSPEED, you should use the following regex approach with lookbehind,</p>
<pre><code>import re
print re.split(r'(?&lt;!\+)\+', '3/num++/sign+2/num')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although the ask was to use regex, here is an example on how to do this with standard <code>.split()</code>:</p>
<pre><code>my_string = '3/num++/sign+2/num'

my_list = []
result = []

# enumerate over the split string
for e in my_string.split('/'):
    if '+' in e:
        if '++' in e:
            #split element on double + and add in + as well 
            my_list.append(e.split('++')[0])
            my_list.append('+')
        else:
            #split element on single +
            my_list.extend(e.split('+'))
    else:
        #add element
        my_list.append(e)

# at this point my_list contains
# ['3', 'num', '+', 'sign', '2', 'num']

# enumerate on the list, steps of 2
for i in range(0, len(my_list), 2):
    #add result 
    result.append(my_list[i] + '/' + my_list[i+1])

print('result', result)

# result returns
# ['3/num', '+/sign', '2/num']
</code></pre>
</div>
<span class="comment-copy">Can you show us your code ? what have you tried sofar ? where does it go wrong ? ... thanks.</span>
<span class="comment-copy">It seems some downvoter want to think I downvote your solutions. But he is wrong ;) Because our agreement ;)</span>
<span class="comment-copy">If answer was helpful, don't forget <a href="https://stackoverflow.com/help/someone-answers">accept</a> it - click on the check mark (<code>✓</code>) beside the answer to toggle it from greyed out to filled in. Thanks.</span>
<span class="comment-copy">@jezrael Thank you, and good luck to you! :-)</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ This is the perfect answer. I also wanted to solve it using re.split(), but I couldn't find a way. Thanks:)</span>
<span class="comment-copy">This is extremely tedious and roundabout, not to mention the danger with using an arbitrarily chosen character as a delimiter.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ I agree. Your answer is better</span>
<span class="comment-copy">@PubuduDodangoda Thanks for the reply!</span>
