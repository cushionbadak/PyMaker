<div class="post-text" itemprop="text">
<p>I am having a huge trouble trying to understand Python 3 imports (I'm using Python 3.5). This seems to be a million-dollar question and I know it has been answered everywhere. However I don't manage to really get a good understanding of how things are supposed to be done; answers on the Internet vary a lot. So sorry in advance if this is a nearly duplicate answer. I would really appreciate references to good reading material.</p>
<p>So I have the following dummy project:</p>
<pre><code>/my_project/main.py
/my_project/lib/__init__.py
/my project/lib/my_lib.py
</code></pre>
<p>If possible, I would like to:</p>
<ul>
<li>Be able to run my program as <code>python3 main.py</code>, having <code>my_project</code> as current working directory.</li>
<li>Not modify the <code>PYTHONPATH</code> at any time.</li>
<li>Make pylint happy.</li>
<li>Use correct Python3 imports.</li>
</ul>
<p><code>main.py</code> contains:</p>
<pre><code>from .lib.my_lib import foo

if __name__ == '__main__':
    foo()
</code></pre>
<p>And <code>foo</code> is accordingly defined in <code>lib/my_lib.py</code></p>
<p>With that configuration, I get:</p>
<p><code>SystemError: Parent module '' not loaded, cannot perform relative import</code></p>
<p>I can get around the error by importing like:</p>
<pre><code>from lib.my_lib import foo
</code></pre>
<p>But then 1) this is not a Python3 absolute import, right? 2) Pylint complains: <code>Unable to import 'lib.my_lib' (import-error)</code></p>
<p>The next thing I tried is to add a <code>my_project/__init__.py</code>, and import like this:</p>
<pre><code>from my_project.lib.my_lib import foo
</code></pre>
<p>In this case pylint is happy but then I cannot run as: <code>python3 main.py</code>:
<code>ImportError: No module named 'my_project'</code></p>
<p>Then the only way I can run it is from the parent directory as a module: <code>python3 -m my_project.main</code>.</p>
<p>So my question is: is it possible at all to do the imports in a correct way, while still being able to execute it as <code>python3 main.py</code>?</p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>I would do something like:</p>
<pre><code>/path/README
/path/requirements.txt
/path/cleverappname/__main__.py
/path/cleverappname/__init__.py
/path/cleverappname/foo.py
/path/cleverappname/bar.py
</code></pre>
<p>Assuming you have something like <code>class CleverName(object)</code> in <code>__init__.py</code> and things like <code>class Foo(object)</code> in <code>foo.py</code> (same for bar, you got the idea).</p>
<p>In <code>__main__</code>:</p>
<pre><code>from cleverappname import CleverName
from cleverappname.foo import Foo
from cleverappname.bar import Bar
</code></pre>
<p>But, it needs you to use it as a python and not a script (which is right, because that's what it is): <code>python3 -m clevername</code></p>
<p>Pylint seems happy about that.</p>
</div>
<span class="comment-copy"><code>from lib.my_lib import foo</code> <i>is</i> an absolute import: the current working directory is automatically in <code>sys.path</code>, as the first directory even.</span>
<span class="comment-copy">To be more precise (and correct): the first entry in <code>sys.path</code> is <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">"is the directory containing the script that was used to invoke the Python interpreter"</a>.</span>
<span class="comment-copy">I can't reproduce the issue with pylint: I don't get an import-error.</span>
<span class="comment-copy">One thing I forgot to mention is that I am running pylint on multiple files in one call, corresponding to other projects. So I have other <code>my_project2</code> at the same level as <code>my_project</code>. Could it be that it's messing up the path and that's why I get errors importing? I'm not really sure if I'm supposed to run pylint like that, or in a loop, file by file.</span>
<span class="comment-copy">Please update your question with the command you use for running pylint. But it sounds like you want to run pylint once per project. Have you tried that?</span>
<span class="comment-copy">I'd use relative imports for intra-package imports. Just in case one decides to rename the package (or whoever installs it decides to rename it).</span>
