<div class="post-text" itemprop="text">
<p>I discovered a strange error when using <code>concurrent.futures</code> to read from multiple text files.</p>
<p>Here is a small reproducible example:</p>
<pre><code>import os
import concurrent.futures

def read_file(file):
    with open(os.path.join(data_dir, file),buffering=1000) as f:
        for row in f:
            try:
                print(row)
            except Exception as e:
                print(str(e))

if __name__ == '__main__':
    data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'data'))
    files = ['file1', 'file2']
    with concurrent.futures.ProcessPoolExecutor() as executor:
        for file,_ in zip(files,executor.map(read_file,files)):
            pass    
</code></pre>
<p><code>file1</code> and <code>file2</code> are arbitrary text files in the <code>data</code> directory.</p>
<p>I am getting the following error (basically a process tries to read <code>data_dir</code> variable before it is assigned):</p>
<pre><code>concurrent.futures.process._RemoteTraceback:
"""
Traceback (most recent call last):
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\process.py", line 175, in _process_worker
    r = call_item.fn(*call_item.args, **call_item.kwargs)
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\process.py", line 153, in _process_chunk
    return [fn(*args) for args in chunk]
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\process.py", line 153, in &lt;listcomp&gt;
    return [fn(*args) for args in chunk]
  File "C:\Users\my_username\Downloads\example.py", line 5, in read_file
    with open(os.path.join(data_dir, file),buffering=1000) as f:
NameError: name 'data_dir' is not defined
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "example.py", line 16, in &lt;module&gt;
    for file,_ in zip(files,executor.map(read_file,files)):
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\_base.py", line 556, in result_iterator
    yield future.result()
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\_base.py", line 405, in result
    return self.__get_result()
  File "C:\Users\my_username\AppData\Local\Continuum\Anaconda3\lib\concurrent\futures\_base.py", line 357, in __get_result
    raise self._exception
NameError: name 'data_dir' is not defined
</code></pre>
<p>If I place <code>data_dir</code> assignment before <code>if __name__ == '__main__':</code> block, I don't get this error and the code executes as expected.</p>
<p>What is causing this error? Clearly, <code>data_dir</code> is assigned before any asynchronous calls should be made in both cases.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>fork()</code> not available on windows, so python use <code>spawn</code> to start new process, which will start a fresh python interpreter process, no memory will be shared, but python will <a href="https://github.com/python/cpython/blob/v3.6.3/Lib/multiprocessing/spawn.py#L92-L118" rel="nofollow noreferrer">try to recreate</a> worker function environment in the new process, that's why module level variable works. See <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" rel="nofollow noreferrer">doc for more detail</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ProcessPoolExecutor</code> spaws a new Python <strong>process</strong>, imports the right module and calls the function you provide.
As <code>data_dir</code> will only be defined when you <em>run</em> the module, not when you <em>import</em> it, the error is to be expected.</p>
<p>Providing the <code>data_dir</code> file descriptor as an argument to <code>read_file</code> <em>might</em> work, as I believe that processes inherit the file descriptors of their parents. You'd need to check, though.</p>
<p>If were to use a <code>ThreadPoolExecutor</code> however, your example should work, as the spawned threads share memory.</p>
</div>
<span class="comment-copy">Thanks for the link! I remember that this code ran fine on my Macbook yesterday, so getting this error today on a Windows machine was pretty confusing.</span>
<span class="comment-copy">you are welcome! @MaxLawnboy I also learned there is a <code>concurrent</code> lib in python3.</span>
<span class="comment-copy">I don't think it is possible to pass additional arguments to the function used by <code>executor.map()</code>. I guess the only way to get it to work on a Windows is to define <code>data_dir</code> on the module level.</span>
<span class="comment-copy">Good point. I guess you could modify the called function to accept a tuple as its only parameter and pack your actual arguments into it if you really need to use <code>map</code>.</span>
