<div class="post-text" itemprop="text">
<p>By iterating over a python list, I would like to create a list dictionaries, whereby the value of each dictionary is also a list.</p>
<p>The structure would be:</p>
<pre><code>[{key1: [val1, val2]}, {key2: [val3, val4]}, {key3: [val5, val6]}, ...]
</code></pre>
<p>I begin with a list of integers:</p>
<pre><code>my_list = [3423, 77813, 12, 153, 1899]
</code></pre>
<p>For each element in the list, this should become a dictionary key. I then append two items to the value of the dictionary (which is a list). (Let's say the two items are always "dog" and "cat")</p>
<p>Here is what the final result should look like:</p>
<pre><code>[{3423:['dog', 'cat']}, {77813:['dog', 'cat']}, {12:['dog', 'cat']},
    {153:['dog', 'cat']}, {1899:['dog', 'cat']}]
</code></pre>
<p>My attempt to do this has many problems:</p>
<pre><code>for i in my_list:
    d = {}   ## create a dictionary 'd'
    d[i] = [].append('dog')  ## or  `d[i] = ['dog'].append('cat')`
    my_list.append(d)   ## here is a bug
    my_list.remove(i) ## remove the item from the list
</code></pre>
<ol>
<li><p>I don't like that I have to name an empty dictionary, and have them each named the same thing (here, <code>d</code>). Later, I would like to access each of these dictionaries by the keys---I don't care about their names.</p></li>
<li><p>I don't know how to sensibly append multiple items to the dictionary value when it's actually supposed to be a list. What if I wanted to add several items?</p></li>
<li><p>The bug is appending the dictionary to the original list and then deleting the item. Naturally, this can be solved with a new list:</p>
<pre><code>new_list = []
for i in my_list:
    d = {}
    d[i] = [].append('dog')
    new_list.append(d)
    my_list.remove(i)
</code></pre></li>
</ol>
<p>but this feels very clumsy.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want something really simple, you can use a list comprehension:</p>
<pre><code>data = ['dog', 'cat']

my_list = [3423, 77813, 12, 153, 1899]

result = [{k:data} for k in my_list]

print(result)
# [{3423: ['dog', 'cat']}, {77813: ['dog', 'cat']}, {12: ['dog', 'cat']}, {153: ['dog', 'cat']}, {1899: ['dog', 'cat']}]
</code></pre>
<p>Additionally, here is an example of adding/removing values with the very convienient <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

my_list = [3423, 77813, 12, 153, 1899]

new_list = []
for number in my_list:

    # create the defaultdict here
    d = defaultdict(list)

    # add some data
    d[number] += ['dog', 'cat', 'kitten']

    # remove some data
    d[number].remove('kitten')

    # append dictionary
    new_list.append(dict(d))

print(new_list)
</code></pre>
<p>Which outputs:</p>
<pre><code>[{3423: ['dog', 'cat']}, {77813: ['dog', 'cat']}, {12: ['dog', 'cat']}, {153: ['dog', 'cat']}, {1899: ['dog', 'cat']}]
</code></pre>
<p>Using a <code>defaultdict</code> here is helpful, as it initializes each entry in the dictionary with an empty list. If you don't want to do this, you could achieve this with a normal dictionary, as shown in your question, but this requires you to initialize the empty lists yourself. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use list comprehension with different values for each keys.</p>
<pre><code>keys = ['key1', 'key2', 'key3']
values = [['val11', 'val12'], ['val21', 'val22'], ['val31', 'val32']]

# This is what you want (if I understood correctly)
dlist = [{x:values[i]} for i,x in enumerate(keys)]

print(dlist)

# When you want to add more dictionary to the list
dlist.append({'key4': ['val41', 'val42']})

print(dlist)
</code></pre>
<p>Output:</p>
<pre><code>[{'key1':['val11','val12']}, {'key2':['val21','val22']}, {'key3':['val31','val32']}]
[{'key1':['val11','val12']}, {'key2':['val21','val22']}, {'key3':['val31','val32']}, {'key4':['val41', 'val42']}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to remove , Without importing any external module or without making it too complex You can simply  follow this pattern in pure python:</p>
<pre><code>data = ['dog', 'cat']

my_list = [3423, 77813, 12, 153, 1899]

new_data={}
for item in my_list:
    for sub_item in data:

        if item not in new_data:
            new_data[item]=[sub_item]
        else:
            new_data[item].append(sub_item)

print(new_data)
</code></pre>
<p>output:</p>
<pre><code>{153: ['dog', 'cat'], 1899: ['dog', 'cat'], 12: ['dog', 'cat'], 77813: ['dog', 'cat'], 3423: ['dog', 'cat']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> dictionary subclass to make the processing very simple:</p>
<pre><code>from collections import defaultdict
from pprint import pprint

my_list = [3423, 77813, 12, 153, 1899]
d = defaultdict(list)

for i in my_list:
    d[i].append('dog')
    d[i].append('cat')

d = dict(d)  # Convert d into a regular dictionary (optional).
pprint(d)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>{12: ['dog', 'cat'],
 153: ['dog', 'cat'],
 1899: ['dog', 'cat'],
 3423: ['dog', 'cat'],
 77813: ['dog', 'cat']}
</code></pre>
<p>Of course, if all you going to do is append those two items to each entry, it would be slightly more efficient to do both in a single operation like the following:</p>
<pre><code>for i in my_list:
    d[i].extend(['dog', 'cat'])
</code></pre>
</div>
<span class="comment-copy">Do you have to use this structure to reach your goal? An object-oriented approach could reduce some of the complexity, depending on what you're trying to achieve. At least you could take a look at <code>defaultdict</code> in the <code>collections</code>-module. Then you could do <code>list_dict = defaultdict(list)</code>, so that you know that each entry in the dict already is an empty list.</span>
<span class="comment-copy">Why would it be <code>d[number] += ['dog', 'cat', 'kitten']</code> instead of <code>d[number] = ['dog', 'cat', 'kitten']</code>?</span>
