<div class="post-text" itemprop="text">
<p>I am doing some operations in a Python code that are too slow for python. </p>
<p>I need to explain a little the global context of what I am doing.</p>
<p>I am reading some input from a board in python. It is a continous operation (<em>I read continuously the datas from the board</em>).</p>
<p>I need to treat those datas in continous also by doing some computations on those. They are saved in numpys arrays in practice.</p>
<p>To increase the speed of thoose computation I would like to run them in C or C++.</p>
<p>But as everything is continous, I need a very fast transfer of thoose numpy arrays from python to C++. Thus my question are the following :</p>
<p>What is the better way to run a C++ code from python such that the variable transfer from numpy arrays to C++ tables is the fastest possible ? Is it possible in the ideal case that the C++ code "<strong>directly</strong>" read the numpy arrays in the memory ?</p>
<p>I have read some topic about using C++ in Python but I am not sure if the C++ will be run at full speed or if it is just to simply use a C++ code in python (<em>but it will run slower than a fully C++ program</em>).</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to achieve can be done by using a precompiled library via cython.</p>
<p>Compile your C/C++ code into a dynamic library (.so on *nix, .dll on Windows); <code>export</code> the functions you want to use from python.</p>
<p>You can then load the library in your python code using <code>ctypes.cdll.LoadLibrary</code> (<a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">https://docs.python.org/3/library/ctypes.html</a>) and pass a pointer to your numpy array using <code>numpy.ctypeslib.ndpointer</code> (<a href="https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy/reference/routines.ctypeslib.html</a>).</p>
<p>If you make sure that the numpy array is continuous, it can be used in C/C++ like expected. </p>
</div>
