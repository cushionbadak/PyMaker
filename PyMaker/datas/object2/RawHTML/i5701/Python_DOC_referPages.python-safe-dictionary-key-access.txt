<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary">Check if a given key already exists in a dictionary</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/9285086/access-dict-key-and-return-none-if-doesnt-exist">Access dict key and return None if doesn't exist</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I am looking for a convenient, safe python dictionary key access approach. Here are 3 ways came to my mind.</p>
<pre class="lang-py prettyprint-override"><code>data = {'color': 'yellow'}

# approach one
color_1 = None
if 'color' in data:
    color_1 = data['color']

# approach two
color_2 = data['color'] if 'color' in data else None


# approach three
def safe(obj, key):
    if key in obj:
        return obj[key]
    else:
        return None

color_3 = safe(data, 'color')

#output
print("{},{},{}".format(color_1, color_2, color_3))
</code></pre>
<p>All three methods work, of-course. But is there any simple out of the box  way to achieve this without having to use excess <code>if</code>s or custom functions?</p>
<p>I believe there should be, because this is a very common usage.</p>
</div>
<div class="post-text" itemprop="text">
<p>You missed the canonical method, <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="noreferrer"><code>dict.get()</code></a>:</p>
<pre><code>color_1 = data.get('color')
</code></pre>
<p>It'll return <code>None</code> if the key is missing. You can set a different default as a second argument:</p>
<pre><code>color_2 = dict.get('color', 'red')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="https://docs.python.org/3.6/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>. You can supply a value to return if the key is not found in the dictionary, otherwise it will return <code>None</code>.</p>
<pre><code>&gt;&gt;&gt; data = {'color': 'yellow'}
&gt;&gt;&gt; data.get('color')
'yellow'
&gt;&gt;&gt; data.get('name') is None
True
&gt;&gt;&gt; data.get('name', 'nothing')
'nothing'
</code></pre>
</div>
<span class="comment-copy">You mean you want to return a default if the key is missing? Then use <code>dict.get()</code>.</span>
