<div class="post-text" itemprop="text">
<p>I'm trying to write a unit test for a method that calls <code>subprocess.Popen</code>.  All I want to test is that <code>arg</code> argument sent to <code>Popen</code> is as expected.  I don't actually want <code>Popen</code> to run.  Is this possible without mocking the <code>arg</code> list?</p>
<p>e.g.</p>
<pre><code>def call_something(argument_list):
    binary = '/opt/mybin/'
    Popen([binary] + argument_list)
</code></pre>
<p>Then, to test.</p>
<pre><code>@mock.patch('subprocess.Popen')
def test_call_something(self, mock_popen):
    binary = '/opt/mybin/'
    args = ['foo', 'bar']

    mock_popen.return_value.returncode = 0
    mock_popen.return_value.communicate.return_value = ('Running', '')

    call_something(args)

    self.assertEqual(
        [binary] + args,
        mock_popen.call_args_list
    )
</code></pre>
<p>The issues I'm getting here is that, first the binary is called (which I don't want) and second, <code>call_args_list</code> is empty.</p>
</div>
<div class="post-text" itemprop="text">
<p>When using <code>mock.patch</code> you must point to the object where it is imported</p>
<p>See the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">documentation</a>  and <a href="http://alexmarandon.com/articles/python_mock_gotchas/#patching-in-the-wrong-place" rel="nofollow noreferrer">this article</a> that explains it well.</p>
<hr/>
<p>For example, in your case:</p>
<p><strong>code.py</strong></p>
<pre><code>from subprocess import Popen

def call_something(argument_list):
    binary = '/opt/mybin/'
    Popen([binary] + argument_list)
</code></pre>
<p><strong>test.py</strong> (Assuming both file are in the same folder, you need to patch <code>code.Popen</code> and not <code>subprocess.Popen</code> in the test)</p>
<pre><code>from code import call_something

@mock.patch('code.Popen')
def test_call_something(self, mock_popen):
   binary = '/opt/mybin/'
   args = ['foo', 'bar']
   mock_popen.return_value.returncode = 0
   mock_popen.return_value.communicate.return_value = ('Running', '')

   call_something(args)

self.assertEqual(
    [binary] + args,
    mock_popen.call_args_list
)
</code></pre>
</div>
