<div class="post-text" itemprop="text">
<p>Why does <code>(1 == 2 != 3)</code> evaluate to <code>False</code> in Python, while both <code>((1 == 2) != 3)</code> and <code>(1 == (2 != 3))</code> evaluate to <code>True</code>? </p>
<p>What operator precedence is used here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is due to the operators <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer"><code>chaining phenomenon</code></a>. The Pydoc explains it as :</p>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <strong>x &lt; y &lt;= z</strong> is equivalent
  to <strong>x &lt; y and y &lt;= z</strong>, except that y is evaluated only once (but in both
  cases z is not evaluated at all when x &lt; y is found to be false).</p>
</blockquote>
<p>And if you look at the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">precedence</a> of the <code>==</code> and <code>!=</code> operators, you will notice that they have the <strong>same precedence</strong> and hence applicable to the <strong>chaining phenomenon</strong>.</p>
<p>So basically what happens :</p>
<pre><code>&gt;&gt;&gt;  1==2
=&gt; False
&gt;&gt;&gt; 2!=3
=&gt; True

&gt;&gt;&gt; (1==2) and (2!=3)
  # False and True
=&gt; False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A chained expression like <code>A op B op C</code> where <code>op</code> are comparison operators is in contrast to C evaluated as (<a href="https://docs.python.org/2.3/ref/comparisons.html" rel="nofollow noreferrer">https://docs.python.org/2.3/ref/comparisons.html</a>):</p>
<pre><code>A op B and B op C
</code></pre>
<p>Thus, your example is evaluated as</p>
<pre><code>1 == 2 and 2 != 3
</code></pre>
<p>which results to <code>False</code>.</p>
</div>
