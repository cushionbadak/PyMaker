<div class="post-text" itemprop="text">
<pre><code>descriptor.FieldDescriptor(
      name='etag', full_name='ResponseContext.etag', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=str("", "utf-8"),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
</code></pre>
<p>Following error is seen for above function call:</p>
<pre><code>has_default_value=False, default_value=str("", "utf-8"), TypeError: decoding str is not supported
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This does not really have anything to do with calling <code>descriptor.FieldDescriptor</code>. </p>
<p>See the documentation for <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str</code></a>:</p>
<blockquote>
<p>class str(object='')</p>
<p>class str(object=b'', encoding='utf-8', errors='strict')</p>
<p>Return a string version of object. If object is not provided, returns the empty string. Otherwise, the behavior of str() depends on whether encoding or errors is given, as follows.</p>
<p>If neither encoding nor errors is given, str(object) returns object.__str__(), which is the “informal” or nicely printable string representation of object. For string objects, this is the string itself. If object does not have a __str__() method, then str() falls back to returning repr(object).</p>
<p><strong>If at least one of encoding or errors is given, object should be a bytes-like object (e.g. bytes or bytearray).</strong> In this case, if object is a bytes (or bytearray) object, then str(bytes, encoding, errors) is equivalent to bytes.decode(encoding, errors). Otherwise, the bytes object underlying the buffer object is obtained before calling bytes.decode(). See Binary Sequence Types — bytes, bytearray, memoryview and Buffer Protocol for information on buffer objects.</p>
<p>Passing a bytes object to str() without the encoding or errors arguments falls under the first case of returning the informal string representation (see also the -b command-line option to Python). For example:</p>
</blockquote>
<p>You are getting the error because of <code>str("", "utf-8")</code>. <code>""</code> is not a bytes-like object. </p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/40208812/typeerror-decoding-str-is-not-supported">TypeError: decoding str is not supported</a></span>
<span class="comment-copy">Actually i replaced Unicode with str seeing somewhere it is the replacement for unicode in python 3</span>
<span class="comment-copy">Anyway, what you are trying to do is apparently <code>default_value=''</code>which of course pathologically could be written <code>default_value=str(b'', 'utf-8')</code> ... or <code>list(set(['', 'ignore', 'this']).intersection(set(['another', 'useless', 'set', ''])))[0]</code> or what have you.</span>
<span class="comment-copy">I found a solution i just changed it to str("utf-8")</span>
