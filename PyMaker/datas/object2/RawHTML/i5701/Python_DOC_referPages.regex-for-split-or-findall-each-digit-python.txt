<div class="post-text" itemprop="text">
<p>What is the best solution to split this <code>str</code> var into a continuous number list</p>
<p>My solution : </p>
<pre><code>&gt;&gt;&gt; str
&gt; '2223334441214844'
&gt;&gt;&gt; filter(None, re.split("(0+)|(1+)|(2+)|(3+)|(4+)|(5+)|(6+)|(7+)|(8+)|(9+)", str))
&gt; ['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The more flexible way would be to use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> which is made to match consecutive groups in iterables:</p>
<pre><code>&gt;&gt;&gt; s = '2223334441214844'
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [''.join(group) for key, group in itertools.groupby(s)]
['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
<p>The <code>key</code> would be the single key that is being grouped on (in your case, the digit). And the <code>group</code> is an iterable of all the items in the group. Since the source iterable is a string, each item is a character, so in order to get back the fully combined group, we need to join the characters back together.</p>
<p>You could also repeat the key for the length of the group to get this output:</p>
<pre><code>&gt;&gt;&gt; [key * len(list(group)) for key, group in itertools.groupby(s)]
['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
<p>If you wanted to use regular expressions, you could make use of backreferences to find consecutive characters without having to specify them explicitly:</p>
<pre><code>&gt;&gt;&gt; re.findall('((.)\\2*)',  s)
[('222', '2'), ('333', '3'), ('444', '4'), ('1', '1'), ('2', '2'), ('1', '1'), ('4', '4'), ('8', '8'), ('44', '4')]
</code></pre>
<p>For finding consecutive characters in a string, this is essentially the same that <code>groupby</code> will do. You can then filter out the combined match to get the desired result:</p>
<pre><code>&gt;&gt;&gt; [x for x, *_ in re.findall('((.)\\2*)',  s)]
['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One solution without regex (that is not specific to digits) would be to use <code>itertools.groupby()</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; s = '2223334441214844'
&gt;&gt;&gt; [''.join(g) for _, g in groupby(s)]
['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you only need to extract consecutive identical digits, you may use a matching approach using <code>r'(\d)\1*'</code> regex:</p>
<pre><code>import re
s='2223334441214844'
print([x.group() for x in re.finditer(r'(\d)\1*', s)])
# =&gt; ['222', '333', '444', '1', '2', '1', '4', '8', '44']
</code></pre>
<p>See the <a href="https://ideone.com/8eb7hG" rel="nofollow noreferrer">Python demo</a></p>
<p>Here, </p>
<ul>
<li><code>(\d)</code> - matches and captures into Group 1 any digit</li>
<li><code>\1*</code> - a backreference to Group 1 matching the same value, 0+ repetitions.</li>
</ul>
<p>This solution can be customized to match any specific consecutive chars (instead of <code>\d</code>, you may use <code>\S</code> - non-whitespace, <code>\w</code> - word, <code>[a-fA-F]</code> - a specific set, etc.). If you replace <code>\d</code> with <code>.</code> and use <code>re.DOTALL</code> modifier, it will work as the <code>itertools</code> solutions posted above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a capture group and backreference.</p>
<pre><code>str = '2223334441214844'

import re
print([i[0] for i in re.findall(r'((\d)\2*)', str)])
</code></pre>
<p><code>\2</code> matches whatever the <code>(\d)</code> capture group matched. The list comprehension is needed because when the RE contains capture groups, <code>findall</code> returns a list of the capture groups, not the whole match. So we need an extra group to get the whole match, and then need to extract that group from the result.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>What about without importing any external module ?</strong></p>
</blockquote>
<p>You can create your own logic in pure python without importing any module Here is recursive approach, </p>
<pre><code>string_1='2223334441214844'

list_2=[i for i in string_1]


def con(list_1):
    group = []
    if not list_1:
        return 0
    else:
        track=list_1[0]
        for j,i in enumerate(list_1):
            if i==track[0]:
                group.append(i)
            else:
                print(group)
                return con(list_1[j:])

        return group



print(con(list_2))
</code></pre>
<p>output:</p>
<pre><code>['2', '2', '2']
['3', '3', '3']
['4', '4', '4']
['1']
['2']
['1']
['4']
['8']
['4', '4']
</code></pre>
</div>
<span class="comment-copy">What is wrong with your solution?</span>
<span class="comment-copy">Is a no cute or not optimised solution no ?</span>
