<div class="post-text" itemprop="text">
<p>I am using the <a href="https://github.com/jd/tenacity" rel="nofollow noreferrer">tenacity</a> library to use its <code>@retry</code> decorator.</p>
<p>I am using this to make a function which makes a HTTP-request "repeat" multiple times in case of failure.</p>
<p>Here is a simple code snippet:</p>
<pre><code>@retry(stop=stop_after_attempt(7), wait=wait_random_exponential(multiplier=1, max=60))
def func():
   ...
   requests.post(...)
</code></pre>
<p>The function uses the tenacity <code>wait</code>-argument to wait some time in between calls.</p>
<p>The function together with the <code>@retry</code>-decorator seems to work fine.</p>
<p>But I also have a unit-test which checks that the function gets called indeed 7 times in case of a failure. This test takes a lot of time because of this <code>wait</code> in beetween tries.</p>
<p>Is it possible to somehow disable the wait-time only in the unit-test?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">unittest.mock</a> module to mock some elements of tentacity library. 
In your case all decorators you use are classes e.g. <code>retry</code> is a decorator class defined <a href="https://github.com/jd/tenacity/blob/master/tenacity/retry.py" rel="nofollow noreferrer">here</a>. So it might be little bit tricky, but I think trying to </p>
<pre><code>mock.patch('tentacity.wait.wait_random_exponential.__call__', ...)
</code></pre>
<p>may help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution came from the maintainer of tenacity himself in this Github issue: <a href="https://github.com/jd/tenacity/issues/106" rel="nofollow noreferrer">https://github.com/jd/tenacity/issues/106</a></p>
<p>You can simply change the wait function temporarily for your unit test:</p>
<pre><code>from tenacity import wait_none

func.retry.wait = wait_none()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to discussion <a href="https://github.com/jd/tenacity/issues/106" rel="nofollow noreferrer">here</a>, I found an elegant way to do this based on code from <a href="https://github.com/steveb" rel="nofollow noreferrer">@steveb</a>:</p>
<pre><code>from tenacity import retry, stop_after_attempt, wait_exponential


@retry(reraise=True, stop=stop_after_attempt(5), wait=wait_exponential(multiplier=1, min=4, max=10))
def do_something_flaky(succeed):
    print('Doing something flaky')
    if not succeed:
        print('Failed!')
        raise Exception('Failed!')
</code></pre>
<p>And tests:</p>
<pre><code>from unittest import TestCase, mock, skip
from main import do_something_flaky


class TestFlakyRetry(TestCase):
    def test_succeeds_instantly(self):
        try:
            do_something_flaky(True)
        except Exception:
            self.fail('Flaky function should not have failed.')

    def test_raises_exception_immediately_with_direct_mocking(self):
        do_something_flaky.retry.sleep = mock.Mock()
        with self.assertRaises(Exception):
            do_something_flaky(False)

    def test_raises_exception_immediately_with_indirect_mocking(self):
        with mock.patch('main.do_something_flaky.retry.sleep'):
            with self.assertRaises(Exception):
                do_something_flaky(False)

    @skip('Takes way too long to run!')
    def test_raises_exception_after_full_retry_period(self):
        with self.assertRaises(Exception):
            do_something_flaky(False)
</code></pre>
</div>
<span class="comment-copy">I really know nothing about tenacy, but you might define the time as a local variable and replace its value in the test for wait=0</span>
