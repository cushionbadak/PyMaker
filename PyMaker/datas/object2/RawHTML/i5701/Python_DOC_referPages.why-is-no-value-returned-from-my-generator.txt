<div class="post-text" itemprop="text">
<p>I've come across some surprising behavior with Python generators:</p>
<pre><code>&gt;&gt;&gt; def f(n):
...     if n &lt; 2:
...         return [n]
...     for i in range(n):
...         yield i * 2
... 
&gt;&gt;&gt; list(f(0))
[]
&gt;&gt;&gt; list(f(1))
[]
&gt;&gt;&gt; list(f(2))
[0, 2]
</code></pre>
<p>Why is no value returned from the generator in the first two cases?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because generator <code>return</code> statements don't return anything, they end the execution (python knows this is a generator because it contains at least one <code>yield</code> statement). Instead of <code>return [n]</code> do </p>
<pre><code> yield n
 return
</code></pre>
<hr/>
<p><strong>EDIT</strong></p>
<p>after raising this with the python core devs, they pointed me to the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-return-statement" rel="nofollow noreferrer">python docs</a> where it says </p>
<blockquote>
<p>In a generator function, the return statement indicates that the generator is done and will cause StopIteration to be raised. The returned value (if any) is used as an argument to construct StopIteration and becomes the StopIteration.value attribute.</p>
</blockquote>
<p>So you can do</p>
<pre><code>def f(n):
    if n &lt; 2:
         return [n]
    for i in range(n):
         yield i * 2

g = f(1)
res = []
while True:
    try:
         res.append(next(g))
    except StopIteration as e:
         if e.value is not None:
              res = e.value
         break
</code></pre>
<p>if you really, really wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>return</code> does not generate <code>iterator</code>. use <code>yield</code> and then <code>return</code></p>
<pre><code>def f(n):
        if n &lt; 2:
            yield n
            return
        for i in range(n):
            yield i * 2
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/16780002/return-in-generator-together-with-yield-in-python-3-3">Return in generator together with yield in Python 3.3</a></span>
<span class="comment-copy">It would be good to add a link to documentation that says the value of <code>return</code> is ignored in generators.</span>
<span class="comment-copy">In fairness I think this is undocumented behaviour. Why having <code>return n</code> in a generator is not a <code>SyntaxError</code> is beyond me. This <a href="https://www.python.org/dev/peps/pep-0255/#specification-return" rel="nofollow noreferrer">PEP</a> doesn't describe anything about <code>return n</code>. Edit: actually, it's right at the <a href="https://www.python.org/dev/peps/pep-0255/#then-why-not-allow-an-expression-on-return-too" rel="nofollow noreferrer">bottom</a>. Still all it says is that it's not allowed, not that it fails silently.</span>
