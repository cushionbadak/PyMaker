<div class="post-text" itemprop="text">
<p>I have a string url, it might starts with <code>http://</code> or <code>https://</code> or <code>ftp://</code> etc.</p>
<p>First I need to check if the string indeed starts with the header using <code>url.startswith(header)</code> then I need to remove the header. For example, if input is <code>http://example.com/example</code> the function will check that the url starts with <code>http://</code> and return <code>example.com/example</code>. </p>
<p>So how to write pythonic code for this task (don't really want to use a for loop)? Or should I just use regex?</p>
</div>
<div class="post-text" itemprop="text">
<p>Regex would be a bit of an overkill if that's all you want, just split your string on <code>://</code> and check if it starts with any of your approved protocols:</p>
<pre><code>uri = your_string.split("://", 1)
if len(uri) &gt; 1 and uri[0] in {"http", "https", "ftp"}:
    print("Match: " + uri[1])
else:
    print("No match!")
</code></pre>
<p>This, however, doesn't guarantee the validity of your URI so if you think your string might contain an invalid URL you'll have to use something more complex.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer">docs</a>, you could pass <code>str.startswith()</code> a <code>tuple</code> of strings to test for:</p>
<blockquote>
<p><code>str.startswith(prefix[, start[, end]])</code></p>
<p>Return <code>True</code> if string starts with the <code>prefix</code>, otherwise return <code>False</code>. <strong><code>prefix</code> can also be a tuple of prefixes to look for.</strong></p>
</blockquote>
<pre><code>def get_url(url):
    headers = ('http://', 'https://', 'ftp://')
    if url.startswith(headers):
        url = url[url.find('://')+3:]
    return url


http = 'http://example.com/example'
https = 'https://example.com/example'
ftp = 'ftp://example.com/example'

print(get_url(http))
print(get_url(https))
print(get_url(ftp))

example.com/example
example.com/example
example.com/example
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Go for regex. It will be easy to perform this kind of task using regex.</span>
<span class="comment-copy">Why aren't you using <a href="https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse" rel="nofollow noreferrer">urllib.parse</a> for this?</span>
<span class="comment-copy">Just for curiosity, why do you use a <code>set</code> for the lookup instead of a <code>list</code> or <code>tuple</code>?</span>
<span class="comment-copy">@Szabolcs - <code>set</code> is a hash table, so O(1) search complexity on average.</span>
<span class="comment-copy">yet when I use timeit to compare it with <code>list</code> or <code>tuple</code> I get much better results for both.</span>
<span class="comment-copy">@Szabolcs - in Python 3.x (as tagged by OP)? I very much doubt it... Even in Python 2.x it will still be faster if you don't re-create the <code>set</code> all the time (the time is spent on re-hashing the elements) which is what would one do outside of SO example code anyway.</span>
<span class="comment-copy">Yes, you are right, thanks for the explanation!</span>
