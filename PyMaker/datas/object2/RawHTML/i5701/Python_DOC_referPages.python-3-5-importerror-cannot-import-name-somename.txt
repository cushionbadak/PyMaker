<div class="post-text" itemprop="text">
<p>I am trying to implement a small library for Python 3.5 but keep struggling with how to correctly handle the structuring of the packages/modules and how to get the imports to work.</p>
<p>I keep running into the problem where python complains of being unable to import some name with an error like</p>
<pre><code>ImportError: cannot import name 'SubClass1'
</code></pre>
<p>This seems to happen when "SubClass1" needs to import some other module but that other module also needs to know about SubClass1 (a cyclic import).
I need the cyclic import in my library because the base class has a factory method that creates the proper subclass instances (there are also other situations where cyclic imports are needed, e.g. checking the type of a function argument needs the import of where that type is defined, but that module may itself need the class where that check is done: another cyclic dependency!)</p>
<p>Here is example code:</p>
<p>Root directory contains the subdirectory dir1. The directory dir1 contains and empty file <strong>init</strong>.py, a file baseclass.py and a file subclass1.py.
The file ./dir1/subclass1.py contains:</p>
<pre><code>from . baseclass import BaseClass
class SubClass1(BaseClass):
   pass
</code></pre>
<p>The file ./dir1/baseclass.py contains:</p>
<pre><code>from . subclass1 import SubClass1
class BaseClass(object):
   def make(self,somearg):
      # .. some logic to decide which subclass to create
      ret = SubClass1()
      # .. which gets eventually returned by this factory method
      return ret
</code></pre>
<p>The file ./test1.py  contains:</p>
<pre><code>from dir1.subclass1 import SubClass1
sc1 = SubClass1()
</code></pre>
<p>This results in the following error:</p>
<pre><code>Traceback (most recent call last):
  File "test1.py", line 1, in &lt;module&gt;
     from dir1.subclass1 import SubClass1
  File "/data/johann/tmp/python1/dir1/subclass1.py", line 1, in &lt;module&gt;
    from . baseclass import BaseClass
  File "/data/johann/tmp/python1/dir1/baseclass.py", line 1, in &lt;module&gt;
    from . subclass1 import SubClass1
ImportError: cannot import name 'SubClass1'
</code></pre>
<p>What is the standard/best way to solve this problem, ideally in a way that is backwards compatible to python 2.x and python 3 up to version 3.2? </p>
<p>I have read elsewhere that importing the module instead of something from a module may help here but I do not know how to just import the module (e.g. subclass1) in a relative way because "import . subclass1" or similar does not work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is caused by a circular import. The <code>baseclass</code> module is trying to import <code>SubClass1</code> from the <code>subclass1</code> module, but <code>subclass</code> is trying to import <code>BaseClass</code> right back. You get <code>NameError</code> because the classes haven't been defined yet when the <code>import</code> statements are running.</p>
<p>There are a few ways to solve the issue.</p>
<p>One option would be to change your style of import. Instead of importing the classes by name, just import the modules and look up the names as attributes later on.</p>
<pre><code>from . import baseclass

class SubClass1(baseclass.BaseClass):
    pass
</code></pre>
<p>And:</p>
<pre><code>from . import subclass1

class BaseClass:
    def make(self,somearg):
        # ...
        ret = subclass1.SubClass1()
</code></pre>
<p>Because <code>SubClass1</code> needs to be able to use <code>BaseClass</code> immediately at definition time, this code may still fail if the <code>baseclass</code> module is imported before <code>subclass1</code>. So it's not ideal</p>
<p>Another option would be to change <code>baseclass</code> to do its import below the definition of <code>BaseClass</code>. This way the <code>subclass</code> module will be able to import the name when it needs to:</p>
<pre><code>class BaseClass:
    def make(self,somearg):
        # .. some logic to decide which subclass to create
        ret = SubClass1()

from .subclass1 import SubClass1
</code></pre>
<p>This is not ideal because the normal place to put imports is at the top of the file. Putting them elsewhere makes the code more confusing. You may want to put a comment up at the top of the file explaining why you're delaying the import if you go this route.</p>
<p>Another option may be to combine your two modules into a single file. Python doesn't require each class to have its own module like some other languages do. When you have tightly coupled classes (like the ones in your example), it makes a lot of sense to put them all in one place. This lets you avoid the whole issue, since you don't need any imports at all.</p>
<p>Finally, there are some more complicated solutions, like dependency injection. Rather than the base class needing to know about the subclasses, each subclass could register itself by calling some function and passing a reference to itself. For example:</p>
<pre><code># no imports of subclasses!

def BaseClass:
    subclasses = []

    def make(self, somearg):
        for sub in self.subclasses:
            if sub.accepts(somearg):
                return sub()
        raise ValueError("no subclass accepts value {!r}".format(somearg))

    @classmethod
    def register(cls, sub):
        cls.subclasses.append(sub)
        return sub        # return the class so it can be used as a decorator!
</code></pre>
<p>And in <code>subclass.py</code></p>
<pre><code>from .baseclass import BaseClass

@BaseClass.register
class SubClass1(BaseClass):
    @classmethod
    def accepts(cls, somearg):
        # put logic for picking this subclass here!
        return True
</code></pre>
<p>This style of programming is a bit more complicated, but it can be nice since it's easier to extend than a version where <code>BaseClass</code> needs to know about all of the subclasses up front. There are a variety of ways you can implement this style of code, using a <code>register</code> function is just one of them. One nice thing about it is that it doesn't strictly require inheritance (so you could register a class that doesn't actually inherit from <code>BaseClass</code> if you wanted to). If you are only dealing with actual inheriting subclasses, you might want to consider using a metaclass that does all the registration of subclasses for you automatically.</p>
</div>
<span class="comment-copy">can you share your code?</span>
<span class="comment-copy">@UmarAsghar I edited the question to contain the code to reproduce my problem, do not know how to share a directory of code in a more convenient way.</span>
<span class="comment-copy">use this code <code>from .subclass1 import SubClass1</code> import SubClass1 and <code>from .baseclass import BaseClass</code> to import BaseClass.</span>
<span class="comment-copy">You have a circular import. This is what happens when you do that. Eliminate the circular import, and the problem will go away.</span>
<span class="comment-copy">I would recommend abandoning the one-class-per-file structure; Python isn't designed for that. If you really want to have that cyclic import anyway: <a href="https://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a></span>
