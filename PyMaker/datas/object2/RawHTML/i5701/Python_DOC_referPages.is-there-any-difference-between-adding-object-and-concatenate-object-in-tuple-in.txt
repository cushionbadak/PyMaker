<div class="post-text" itemprop="text">
<p>In a video lecture on pluralsight, they said that you cannot add a new element to tuple but you can concatenate new object to a tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>The original tuple is still unaffected. You get a <em>new</em> tuple that contains the values of both tuples.</p>
<pre><code>&gt;&gt;&gt; a = (1, 2)
&gt;&gt;&gt; b = a + (3, )
&gt;&gt;&gt; id(a) != id(b)
True
</code></pre>
<p>Contrast this with a list, which allows you to add elements to it:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; a.append(3)
&gt;&gt;&gt; a
[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This comes down to <code>mutable</code> and <code>immutable</code> data types.</p>
<p>Since a <code>tuple</code> is <code>immutable</code>, it cannot change. Hence, you cannot add/append elements to the end of it. It works in the <em>exact</em> same way a <code>string</code> does.</p>
<p>So, after defining a <code>tuple</code>, all you can do is reassign that same (<em>unchanged</em>)  <code>tuple</code> concatenated with another <code>tuple</code> to the same <code>variable</code> name. This is different to how a <code>list</code> (<code>mutable</code>) works.</p>
<p>To give some examples:</p>
<pre><code>&gt;&gt;&gt; t
(1, 2, 3, 5)
&gt;&gt;&gt; t = (1, 2, 3)
&gt;&gt;&gt; t + (4, 5)
(1, 2, 3, 4, 5)
&gt;&gt;&gt; t
(1, 2, 3)
&gt;&gt;&gt; t += (4, 5)
&gt;&gt;&gt; t
(1, 2, 3, 4, 5)
&gt;&gt;&gt; t = t + (6, 7)
&gt;&gt;&gt; t
(1, 2, 3, 4, 5, 6, 7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#tuples" rel="nofollow noreferrer">Tuples</a> are one of Python's immutable sequence types.</p>
<blockquote>
<p>Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the enumerate() built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a set or dict instance).</p>
</blockquote>
<pre><code>&gt;&gt;&gt; t = (123, 456, 'tuple')
&gt;&gt;&gt; t[0] = 789
Traceback (most recent call last):
  File "&lt;pyshell#108&gt;", line 1, in &lt;module&gt;
    t[0] = 789
TypeError: 'tuple' object does not support item assignment
&gt;&gt;&gt; # But tuples can contain mutable objects:
&gt;&gt;&gt; v = ([1, 2, 3], ['a', 'b', 'c'])
&gt;&gt;&gt; v
([1, 2, 3], ['a', 'b', 'c'])
&gt;&gt;&gt; v[0].append(4)
&gt;&gt;&gt; v
([1, 2, 3, 4], ['a', 'b', 'c'])
&gt;&gt;&gt; del v[1][2]
&gt;&gt;&gt; v
([1, 2, 3, 4], ['a', 'b'])
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers already gave some good examples, but mainly using different methods of "adding" for (mutable) lists and for (immutable) tuples. But it may be even clearer when using the same operation, i.e. <code>+=</code>, for both. This will <em>add to</em> the list (modify it), but it will create a <em>new</em> tuple, being a concatenation of the original tuple and the new values.</p>
<pre><code># original list and all references to it are modified
&gt;&gt;&gt; l1 = l2 = [1, 2, 3]
&gt;&gt;&gt; l1 += [4, 5]
&gt;&gt;&gt; l1 is l2
True
# new tuple is created, references to original unaffected
&gt;&gt;&gt; t1 = t2 = (1, 2, 3)
&gt;&gt;&gt; t1 += (4, 5)
&gt;&gt;&gt; t1 is t2
False
</code></pre>
</div>
<span class="comment-copy">Sorry but tuples are immutable.  See the docs <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">You should provide the full reference. I assume it says you cannot modify the tuple itself, but if it contains mutable elements, you can modify them. For example, there is nothing stopping you to do <code>lst = [1]; tup = (1, lst); tup[1].append(2)</code></span>
