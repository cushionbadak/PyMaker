<div class="post-text" itemprop="text">
<p>I would like to perform the following:</p>
<pre><code>min_xy=min(x,y)
</code></pre>
<p>x/y/both of them may be None.
If I filter the None values in this way:</p>
<pre><code>min_xy=min(filter(None,(x,y)))
</code></pre>
<p>I may get this assertion if x&amp;y are both None.</p>
<pre><code>ValueError: min() arg is an empty sequence
</code></pre>
<p>Is there an elegant way to get the little number if only one of them is None, and get None if both of them are?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like so:</p>
<pre><code>min_xy = None if all(n is None for n in (x, y)) else min(filter(None,(x,y)))
</code></pre>
<p>You can also turn it into a <code>function</code>:</p>
<pre><code>def min_xy(x, y):
    if all(n is None for n in (x, y)):
        return None
    else:
        return min(filter(None,(x,y)))
</code></pre>
<p>or a <code>lambda</code>:</p>
<pre><code>min_xy = lambda x, y: None if all(n is None for n in (x, y)) else min(filter(None,(x,y)))
</code></pre>
<hr/>
<p><strong>Tests:</strong></p>
<pre><code>print(min_xy(1, None))      # 1
print(min_xy(1, 2))         # 1
print(min_xy(None, 1))      # 1
print(min_xy(None, None))   # None
</code></pre>
<hr/>
<p><strong>EDIT:</strong></p>
<p>Since Python 3.4, <code>min</code> got updated to accept a default argument in case the iterable provided is empty. This allows for an elegant one-liner:</p>
<pre><code>min_xy = min(filter(None, (x, y)), default=None)
</code></pre>
<ul>
<li>From the <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">documentation</a>:

<blockquote>
<p><em>The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised.</em></p>
</blockquote></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In the interest of keeping things readable, I'd suggest:</p>
<pre><code>def coalescing_min(*args):
    args = [i for i in args if i is not None]
    if args:
        return min(args)
    else:
        return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x, y = None, 1

min_xy = next(filter(lambda __: __ is not None, (x, y)), None) if any(map(lambda __: __ is None, (x, y))) else min(x, y)

print(min_xy)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_min(arr):
    mini = None
    for ar in arr:
        if ar is not None:
            mini = ar
            mini = min(ar,mini)
    return mini
</code></pre>
<p>It takes the argument as a list of any number of elements and returns the minimum. I think this should work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another option:</p>
<pre><code>def nmin(*args):
    try:
        return min(x for x in args if x is not None)
    except ValueError:
        return None
</code></pre>
</div>
<span class="comment-copy"><b><i>little</i></b> number if only one of them is None</span>
<span class="comment-copy">if you want things to be readable, I believe you should add a return None in the end. :)</span>
<span class="comment-copy">@deceze, according to style guides PEP8, <i>Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable)</i>. So, adding <i>return at the end of the function</i> is a good and recommended style manner</span>
<span class="comment-copy">OK, fiiiiiiineâ€¦ ;)</span>
<span class="comment-copy">not sure I like the <code>else</code> now... xDD</span>
<span class="comment-copy">FWIW, I think it looks better without the else.</span>
<span class="comment-copy">This returns None if any of the numbers are None, but OP wants <code>Is there an elegant way to get the little number if only one of them is None, and get None if both of them are?</code></span>
