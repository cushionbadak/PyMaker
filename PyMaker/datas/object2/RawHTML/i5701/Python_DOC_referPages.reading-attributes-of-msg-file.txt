<div class="post-text" itemprop="text">
<p>I am trying to read a .msg file to get the sender, recipients, and title.</p>
<p>I'm making this script for my workplace where I'm only allowed to install default python libraries so I want to use the email module to do this.</p>
<p>On the python website I found some examples of using the email module. <a href="https://docs.python.org/3/library/email.examples.html" rel="nofollow noreferrer">https://docs.python.org/3/library/email.examples.html</a></p>
<p>Near the end of the page it talks about getting the sender, subject and recipient. I've tried using this code like this:</p>
<pre><code># Import the email modules we'll need
from email import policy
from email.parser import BytesParser

with open('test_email.msg', 'rb') as fp:
    msg = BytesParser(policy=policy.default).parse(fp)

# Now the header items can be accessed as a dictionary, and any non-ASCII will
# be converted to unicode:
print('To:', msg['to'])
print('From:', msg['from'])
print('Subject:', msg['subject'])
</code></pre>
<p>This results in an output:</p>
<pre><code>To: None
From: None
Subject: None
</code></pre>
<p>I checked the file test_email.msg, it is a valid email. </p>
<p>When I add a line of code</p>
<pre><code>print(msg) 
</code></pre>
<p>I get an output of a garbled email the same as if I opened the .msg file in notepad.</p>
<p>Can anybody suggest why the email module isn't finding the sender/recipient/subject correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are apparently attempting to read some sort of proprietary binary format. The Python <code>email</code> library does not support this; it only handles traditional (basically text) RFC822 / RFC5322 format.</p>
<p>To read Microsoft's OLE formats, you will need <a href="https://pypi.python.org/pypi/olefile" rel="nofollow noreferrer">a third-party module</a>, and some <a href="http://msdn.microsoft.com/en-us/library/cc463912%28v=exchg.80%29.aspx" rel="nofollow noreferrer">patience</a>, voodoo, and luck.</p>
<p>Also, for the record, there is no unambigious definition of <code>.msg</code>.  Outlook uses this file extension for its files, but it is used on other files in other formats as well, including also traditional RFC822 files.</p>
<p><sub>(The second link attempts to link to the MS-OXMSG spec on MSDN; but Microsoft have in the past regarded URLs as some sort of depletable resource which runs out when you use it, so the link will probably stop working if enough people click on it.)</sub></p>
</div>
<span class="comment-copy">Are you sure what you have is "a valid email"? If printing it out (or opening it in Notepad) is "garbled" then that suggests you have something other than a plain-text email message.</span>
<span class="comment-copy">How did you check that it's "a valid email"? What does <code>.msg</code> mean in this context? Often, it means some godawful proprietary binary format, whereas Python's <code>email</code> lib only works on RFC5322 email messages (basically, text files with additional constraints on the format).</span>
<span class="comment-copy">There are two ways a message can look "garbled". If you are not expecting to see the email source, and then you see it, that can be called "garbled", though it is structured and -- once you grasp the structure -- understandable even to a layman. On the other hand, if you open a godawful binary file in Notepad and basically only see binary control codes with small fragments of human-readable text between them, that's a different kind of "garbled".</span>
<span class="comment-copy">@larsks a .msg file is an Outlook email file. The email is "valid" in that it does have a title, body, sender, etc. I think that it is a binary format file so if tripleee is correct I cannot use the default 'email' module</span>
<span class="comment-copy">@tripleee a .msg file is an Outlook email file. The email is "valid" in that it does have a title, body, sender, etc. I think that it is a binary format file so if you are correct I cannot use the default 'email' module</span>
