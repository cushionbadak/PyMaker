<div class="post-text" itemprop="text">
<h1>Question</h1>
<p>Is there a "pythonic" (i.e. canonical, official, PEP8-approved, etc) way to re-use string literals in <code>python</code> internal (and external) APIs?</p>
<hr/>
<h1>Background</h1>
<p>For example, I'm working with some (inconsistent) JSON-handling code (thousands of lines) where there are various JSON "<code>struct</code>s" we assemble, parse, etc. One of the recurring problems that comes up during code reviews is different JSON <code>struct</code>s that use the same internal parameter names, causing confusion and eventually causing bugs to arise, e.g.:</p>
<pre><code>pathPacket['src'] = "/tmp"
pathPacket['dst'] = "/home/user/out"
urlPacket['src'] = "localhost"
urlPacket['dst'] = "contoso"
</code></pre>
<p>These two (example) packets that have dozens of identically named fields, but they represent very different types of data. There was no code-reuse justification for this implementation. People typically use code-completion engines to get the members of the JSON <code>struct</code>, and this eventually leads to hard-to-debug problems down the road due to mis-typed string literals causing functional issues, and not triggering an error earlier on. When we have to change these APIs, it takes a lot of time to hunt down the string literals to find out which JSON <code>struct</code>s use which fields.</p>
<hr/>
<h1>Question - Redux</h1>
<p>Is there a better approach to this that is common amongst members of the <code>python</code> community? If I was doing this in <code>C++</code>, the earlier example would be something like:</p>
<pre><code>const char *JSON_PATH_SRC = "src";
const char *JSON_PATH_DST = "dst";
const char *JSON_URL_SRC = "src";
const char *JSON_URL_DST = "dst";
// Define/allocate JSON structs
pathPacket[JSON_PATH_SRC] = "/tmp";
pathPacket[JSON_PATH_DST] = "/home/user/out";
urlPacket[JSON_URL_SRC] = "localhost";
urlPacket[JSON_URL_SRC] = "contoso";
</code></pre>
<p>My initial approach would be to:</p>
<ul>
<li>Use <code>abc</code> to make an abstract base class that <strong>can't be initialized as an object</strong>, and populate it with <strong>read-only</strong> constants.</li>
<li>Use that class as a common module throughout my project.</li>
<li>By using these constants, I can reduce the chance of a monkey-patching error as the symbols won't exist if mis-spelled, whereas a string literal typo can slip through code reviews.</li>
</ul>
<hr/>
<h1>My Proposed Solution (open to advice/criticism)</h1>
<pre><code>from abc import ABCMeta

class Custom_Structure:
    __metaclass__ = ABCMeta

    @property
    def JSON_PATH_SRC():
        return self._JSON_PATH_SRC

    @property
    def JSON_PATH_DST():
        return self._JSON_PATH_DST

    @property
    def JSON_URL_SRC():
        return self._JSON_URL_SRC

    @property
    def JSON_URL_DST():
        return self._JSON_URL_DST
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way this is normally done is:</p>
<pre><code>JSON_PATH_SRC = "src"
JSON_PATH_DST = "dst"
JSON_URL_SRC = "src"
JSON_URL_DST = "dst"


pathPacket[JSON_PATH_SRC] = "/tmp"
pathPacket[JSON_PATH_DST] = "/home/user/out"
urlPacket[JSON_URL_SRC] = "localhost"
urlPacket[JSON_URL_SRC] = "contoso"
</code></pre>
<p>Upper-case to denote "constants" is the way it goes. You'll see this in the standard library, and it's even recommended in <a href="https://www.python.org/dev/peps/pep-0008/#constants" rel="nofollow noreferrer">PEP8</a>:</p>
<blockquote>
<p>Constants are usually defined on a module level and written in all
  capital letters with underscores separating words. Examples include
  <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p>
</blockquote>
<p>Python doesn't have true constants, and it seems to have survived without them. If it makes you feel more comfortable wrapping this in a class that uses <code>ABCmeta</code> with properties, go ahead. Indeed, I'm pretty sure <code>abc.ABCmeta</code> doesn't <em>not</em> prevent object initialization. Indeed, if it <em>did</em>, your use of <code>property</code> would not work! <code>property</code> objects <em>belong to the class</em>, but are meant to be accessed from an instance. To me, it just looks like a lot of rigamarole for very little gain.</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way in my opinion to make constants is just to set them as variables in your module (and not modify them).</p>
<pre><code>JSON_PATH_SRC = "src"
JSON_PATH_DST = "dst"
JSON_URL_SRC = "src"
JSON_URL_DST = "dst"
</code></pre>
<p>Then if you need to reference them from another module they're already namespaced for you.</p>
<pre><code>&gt;&gt;&gt; that_module.JSON_PATH_SRC
'src'
&gt;&gt;&gt; that_module.JSON_PATH_DST
'dst'
&gt;&gt;&gt; that_module.JSON_URL_SRC
'src'
&gt;&gt;&gt; that_module.JSON_URL_DST
'dst'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to create a bunch of constants is to place them into a module, and import them as necessary. For example, you could have a <code>constants.py</code> module with</p>
<pre><code>JSON_PATH_SRC = "src"
JSON_PATH_DST = "dst"
JSON_URL_SRC = "src"
JSON_URL_DST = "dst"
</code></pre>
<p>Your code would then do something like</p>
<pre><code>from constants import JSON_URL_SRC
...
urlPacket[JSON_URL_SRC] = "localhost"
</code></pre>
<p>If you would like a better defined grouping of the constants, you can either stick them into separate modules in a dedicated package, allowing you to access them like <code>constants.json.url.DST</code> for example, or you could use <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>Enum</code></a>s. The <code>Enum</code> class allows you to group related sets of constants into a single namespace. You could write a module <code>constants.py</code> like this:</p>
<pre><code>from enum import Enum

class JSONPath(Enum):
    SRC = 'src'
    DST = 'dst'

class JSONUrl(Enum):
    SRC = 'src'
    DST = 'dst'
</code></pre>
<p>OR</p>
<pre><code>from enum import Enum

class JSON(Enum):
    PATH_SRC = 'src'
    PATH_DST = 'dst'
    URL_SRC = 'src'
    URL_DST = 'dst'
</code></pre>
<p>How exactly you separate your constants is up to you. You can have a single giant enum, one per category or something in between. You would access the in your code like this:</p>
<pre><code>from constants import JSONURL
...
urlPacket[JSONURL.SRC.value] = "localhost"
</code></pre>
<p>OR</p>
<pre><code>from constants import JSON
...
urlPacket[JSON.URL_SRC.value] = "localhost"
</code></pre>
</div>
<span class="comment-copy">@AlexanderHuszagh the question is how to best replace literals with constants.</span>
<span class="comment-copy">@AlexanderHuszagh. It's about enums, not really interning strings</span>
<span class="comment-copy">@MadPhysicist Ah thanks, sorry, I misread the question then.</span>
<span class="comment-copy">@MadPhysicist enums would work for the example posed, but possibly not for all the places these strings get used. The c++ example furthers this using const rather than an enum type.</span>
<span class="comment-copy">You could stick your constants into a separate module and use that.</span>
<span class="comment-copy">@MadPhysicist sure.</span>
<span class="comment-copy">you could even have a swappable module to select groups of constants similar to how localization is often done..</span>
