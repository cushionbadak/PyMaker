<div class="post-text" itemprop="text">
<p>Suppose such a following text</p>
<pre><code>'\nModels: Introduction to models | Field types | Indexes | Meta options | Model class\nQuerySets: Making queries | QuerySet method reference | Lookup expressions\nModel instances: Instance methods | Accessing related objects\nMigrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations\nAdvanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions\nOther: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features\n'
</code></pre>
<p>The result I'd like to achieve is</p>
<pre><code>['Models: Introduction to models | Field types | Indexes | Meta options | Model class',
 'QuerySets: Making queries | QuerySet method reference | Lookup expressions',
 'Model instances: Instance methods | Accessing related objects',
 'Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations',
 'Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions',
 'Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features',]
</code></pre>
<p>My first try is:</p>
<pre><code>In [61]: re.split('\n', content)
Out[61]:
['',
 'Models: Introduction to models | Field types | Indexes | Meta options | Model class',
 'QuerySets: Making queries | QuerySet method reference | Lookup expressions',
 'Model instances: Instance methods | Accessing related objects',
 'Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations',
 'Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions',
 'Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features',
 '']
</code></pre>
<p>Nevertheless, when I tried </p>
<pre><code>In [60]: re.split('\n.+',content)
Out[60]: ['', '', '', '', '', '', '\n']
</code></pre>
<p>The output is out of my expect.I cannot understand it.</p>
<p>In the example in <a href="https://docs.python.org/3.6/library/re.html" rel="nofollow noreferrer">6.2. reâ€”Regular expression operations</a></p>
<pre><code>re.split(r'\W+', 'Words, words, words.')
outputs ['Words', 'words', 'words', '']
not [',', ',', ',', ' ']
#why
re.split('\n.+',content)
outputs ['', '', '', '', '', '', '\n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is quite obvious: <code>\n.+</code> matches anything starting with a newline character followed by one or more characters of any class but <code>.</code> will not match control characters such as newline. </p>
<p>So a match starts with the <code>\n</code> and ends one character before the next <code>\n</code>. Therefore, your split's separators are all the visible characters and such a split will produce empty strings because those empty strings are in between the separators.</p>
<p>Your input string starts and ends with a newline hence the first and last empty string after split with <code>\n</code>. Modify the pattern to </p>
<pre><code>(?&lt;!^)\n(?&lt;!$)
</code></pre>
<p>to NOT match the leading and trailing newlines. This uses negative lookbehind and lookahead to exclude those first and last ones.</p>
<p><a href="https://regex101.com/r/A2vIbu/1" rel="nofollow noreferrer">https://regex101.com/r/A2vIbu/1</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you might be a bit confused by the regex example from the text. <code>\W+</code> in a regex matches one or more <em>non-word</em> characters. So spaces, punctuation etc. are matched. Therefore <code>re.split</code> returns a list of words.</p>
<p>For your example to work, you just need to remove the <code>.*</code>.</p>
<p>e.g.</p>
<pre><code>import re
content = '\nModels: Introduction to models | Field types | Indexes | Meta options | Model class\nQuerySets: Making queries | QuerySet method reference | Lookup expressions\nModel instances: Instance methods | Accessing related objects\nMigrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations\nAdvanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions\nOther: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features\n'

re.split(r'\n',content)

['', 'Models: Introduction to models | Field types | Indexes | Meta options | Model class', 'QuerySets: Making queries | QuerySet method reference | Lookup expressions', 'Model instances: Instance methods | Accessing related objects', 'Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations', 'Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions', 'Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features', '']
</code></pre>
<p>Also, if you know that you're going to start and finish with <code>\n</code>, you can just slice the blanks off:</p>
<pre><code>re.split(r'\n',content)[1:-1]
['Models: Introduction to models | Field types | Indexes | Meta options | Model class', 'QuerySets: Making queries | QuerySet method reference | Lookup expressions', 'Model instances: Instance methods | Accessing related objects', 'Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations', 'Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions', 'Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as mention by Garbage Collector, the problem with your first try is that your original text is surrounded by <code>\n</code>, so at the moment of the split you get an empty string as your first element to signal this fact, likewise for the end.</p>
<p>to solve this, you first need to remove those, that can be easily accomplished with the <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer">.strip</a> method:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = "\na a a\nb b b\nc c c\n"
&gt;&gt;&gt; t.strip()
'a a a\nb b b\nc c c'
&gt;&gt;&gt; re.split("\n",t.strip())
['a a a', 'b b b', 'c c c']
&gt;&gt;&gt; 
</code></pre>
<p>also for this task as described you don't need the <code>re</code> module, the <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow noreferrer">str class</a> come with a plethora of method to handle a variety of common cases, for this one the <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow noreferrer">.splitlines</a> method would do it too</p>
<pre><code>&gt;&gt;&gt; t.strip().splitlines()
['a a a', 'b b b', 'c c c']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>&gt;&gt;&gt; txt
'\nModels: Introduction to models | Field types | Indexes | Meta options | Model class\nQuerySets: Making queries | QuerySet method reference | Lookup expressions\nModel instances: Instance methods | Accessing related objects\nMigrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations\nAdvanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions\nOther: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features\n'
</code></pre>
<p>You can do (I formatted this to look like your desired example...):</p>
<pre><code>&gt;&gt;&gt; [e for e in txt.split('\n') if e]
['Models: Introduction to models | Field types | Indexes | Meta options | Model class', 
 'QuerySets: Making queries | QuerySet method reference | Lookup expressions', 
 'Model instances: Instance methods | Accessing related objects', 'Migrations: Introduction to Migrations | Operations reference | SchemaEditor | Writing migrations', 
 'Advanced: Managers | Raw SQL | Transactions | Aggregation | Search | Custom fields | Multiple databases | Custom lookups | Query Expressions | Conditional Expressions | Database Functions', 
 'Other: Supported databases | Legacy databases | Providing initial data | Optimize database access | PostgreSQL specific features']
</code></pre>
<p>Same method works for <code>re.split</code> as well:</p>
<pre><code>&gt;&gt;&gt; [e for e in re.split('\n+',txt) if e]
# same output...
</code></pre>
<p>Or, you can capture what you want vs splitting on what you don't want. In this case, use a look-behind to find the text after a <code>\n</code>:</p>
<pre><code>&gt;&gt;&gt; re.findall(r'(?&lt;=\n)([^\n]+)', txt)
# same output
</code></pre>
</div>
<span class="comment-copy">Because you have <code>\n</code> at start and end</span>
<span class="comment-copy">Also <code>+</code> is greedy.</span>
