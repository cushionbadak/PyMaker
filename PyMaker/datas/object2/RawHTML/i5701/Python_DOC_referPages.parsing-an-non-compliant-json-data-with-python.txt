<div class="post-text" itemprop="text">
<p>I am getting JSON data from a hardware device in a Python script. The JSON data is not 100% valid: some base 10 integers have leading zeros, which is apparently forbidden. This makes the Python JSON module throw an exception.</p>
<p>Is there any way to ask the parser to be more permissive? Or am I condemned to do all the parsing myself?</p>
<p>I have already sent a mail to the hardware device manufacturer but they don't seem to care...</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the documentation for <a href="https://docs.python.org/3/library/json.html#encoders-and-decoders" rel="nofollow noreferrer">JSONDecoder</a>,</p>
<blockquote>
<p>parse_int, if specified, will be called with the string of every JSON int to be decoded. By default, this is equivalent to int(num_str). This can be used to use another datatype or parser for JSON integers (e.g. float).</p>
</blockquote>
<p>So, just write some code that handles leading zeros. (Note: In <code>C</code> a leading zero indicates that the number is an octal literal. Since you're mentioning a hardware device, you should confirm whether the numbers you are receiving are base 8 or 10 or 16 or 2 or ...?)</p>
<pre><code>def parse_00int(strval):
    stripped = strval.lstrip('0')
    return 0 if stripped == '' else int(stripped)
</code></pre>
</div>
<span class="comment-copy">can you show the code and the data you are getting from the device</span>
<span class="comment-copy">Python2 or Python3?</span>
<span class="comment-copy">@babygame0ver : put any integer value with a leading 0, this will throw an exception with the python parser. This is known and expected behavior, see <a href="https://stackoverflow.com/questions/27361565/why-is-json-invalid-if-an-integer-begins-with-0" title="why is json invalid if an integer begins with 0">stackoverflow.com/questions/27361565/â€¦</a> for instance</span>
<span class="comment-copy">Python 3. I have tested also with Qt JSON parser and this is the same. This is expected behavior as it's clearly forbidden by JSON format. The question is not why this happens, but how to deal with that bad JSON data which is sent by a device without rewriting a parser.</span>
<span class="comment-copy">If the json is of the form <code>'{"foo": 00003}'</code> then you'll get an exception (<code>json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 10 (char 9)</code>) regardless (in python3).</span>
<span class="comment-copy">I don't fully understand, is it possible to replace the int parsing function used by JSON in order to make this work?</span>
<span class="comment-copy">You would have to change NUMBER_RE in <a href="https://github.com/python/cpython/blob/3.6/Lib/json/scanner.py#L11" rel="nofollow noreferrer">github.com/python/cpython/blob/3.6/Lib/json/scanner.py#L11</a></span>
