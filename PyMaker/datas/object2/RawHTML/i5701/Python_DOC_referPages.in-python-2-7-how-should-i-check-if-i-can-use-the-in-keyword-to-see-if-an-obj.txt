<div class="post-text" itemprop="text">
<p>Before performing a test like</p>
<pre><code>if something in the_object:
    ...
</code></pre>
<p>I would like to test if it's safe to use the <code>in</code> keyword on <code>the_object</code>.   I believe that <code>in</code> will work in this usage if <code>the_object</code> has one of several methods such as <code>__contains__</code> and <code>__iter__</code>.   </p>
<p>Is there a test similar to the following I can use, but that checks for compatibility with <code>in</code> instead of containing <code>__iter__</code>?</p>
<pre><code>import collections

if isinstance(the_object, collections.Iterable):
    if something in the_object:
        ...
</code></pre>
<p>Or should I just </p>
<pre><code>try:
    if something in the_object:
        ...
except TypeError:
    # move on 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Note: I have made this answer a CW post simply to mark this question as answered. The real credit goes to juanpa.arrivillaga and Nick A, in the comments.</em></p>
<h2>It's easier to ask for forgiveness than permission</h2>
<p><code>in</code> looks to see of an object contains <code>__contains__()</code> first, then looks for <code>__iter__()</code>, then finally looks for <code>__getitem__()</code>. While you could check for each of them, doing a <code>try...except</code> would allow <code>in</code> to do it for you, or to error if it can't. </p>
<p>Here's the section that juanpa.arrivillaga linked to:</p>
<h2>6.10.2. Membership test operations</h2>
<p>The operators <code>in</code> and <code>not in</code> test for membership. <code>x in s</code> evaluates to <code>True</code> if <em>x</em> is a member of <em>s</em>, and <code>False</code> otherwise. <code>x not in s</code> returns the negation of <code>x in s</code>. All built-in sequences and set types support this as well as dictionary, for which in tests whether the dictionary has a given key. For container types such as list, tuple, set, frozenset, dict, or collections.deque, the expression <code>x in y</code> is equivalent to <code>any(x is e or x == e for e in y)</code>.</p>
<p>For the string and bytes types, <code>x in y</code> is <code>True</code> if and only if <em>x</em> is a substring of <em>y</em>. An equivalent test is <code>y.find(x) != -1</code>. Empty strings are always considered to be a substring of any other string, so <code>"" in "abc"</code> will return <code>True</code>.</p>
<p>For user-defined classes which define the <code>__contains__()</code> method, <code>x in y</code> returns <code>True</code> if <code>y.__contains__(x)</code> returns a true value, and <code>False</code> otherwise.</p>
<p>For user-defined classes which do not define <code>__contains__()</code> but do define <code>__iter__()</code>, <code>x in y</code> is <code>True</code> if some value <code>z</code> with <code>x == z</code> is produced while iterating over <code>y</code>. If an exception is raised during the iteration, it is as if <code>in</code> raised that exception.</p>
<p>Lastly, the old-style iteration protocol is tried: if a class defines <code>__getitem__()</code>, <code>x in y</code> is <code>True</code> if and only if there is a non-negative integer index <em>i</em> such that <code>x == y[i]</code>, and all lower integer indices do not raise IndexError exception. (If any other exception is raised, it is as if <code>in</code> raised that exception).</p>
<p>The operator <code>not in</code> is defined to have the inverse true value of <code>in</code>.</p>
</div>
<span class="comment-copy">use the try-except...</span>
<span class="comment-copy">In python a common practice is EAFP, or it's easier to ask for forgiveness than permission, go with the <code>try...except</code></span>
<span class="comment-copy">So, from the data-model docs, "For objects that don’t define <code>__contains__()</code>, the membership test first tries iteration via <code>__iter__()</code>, then the old sequence iteration protocol via <code>__getitem__()</code>" so there would be <i>three</i> checks you'd have to do to be exhaustive. So yeah, just EAFP</span>
<span class="comment-copy">More details: <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
