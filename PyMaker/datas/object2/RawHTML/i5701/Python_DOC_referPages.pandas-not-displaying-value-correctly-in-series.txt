<div class="post-text" itemprop="text">
<p>I have a class called <code>Point()</code> and I want the print out to be WKT instead of the JSON that is given from the service it gets the point.</p>
<p>The Point class inherits from dict and everything on the class works great except when I display the column in ipython or print the dataframe object.</p>
<p>I've tried the following on the Point class (simplified class):</p>
<pre><code>class Point(dict):
    def __init__(self, iterable):
       self._coords = iterable
    def __str__(self):
       return 'Point(%s,%s)' % (self._coords['x'], self._coords['y'])
    def __repr__(self):
       return 'Point(%s,%s)' % (self.x, self.y)
    def _repr_html_(self):
       return self.__str__()
    def _repr_pretty_(self):
       return self.__str__()
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; pt = Point({"x" : -118.15, "y" : 33.80, "spatialReference" : {"wkid" : 4326}})
&gt;&gt;&gt; df = pd.DataFrame(data=[['A', pt]], columns=['foo', 'SHAPE'])
&gt;&gt;&gt; df.SHAPE
  foo                                              SHAPE
0   A  {'x': -118.15, 'y': 33.8, 'spatialReference': ...
</code></pre>
<p>But if I do</p>
<pre><code>&gt;&gt;&gt; df.SHAPE[0]
"POINT (-118.15000000000001 33.799999999999997)"
</code></pre>
<p>Which is the correct desired output.</p>
<p>How do I get the DataFrame to honor my classes <strong>repr</strong> or <strong>str</strong>?</p>
<p>Here is another edit to show very basic issue that I am seeing:</p>
<pre><code>class foo(dict):
    def __init__(self, iterable=None, **kwargs):
        if iterable is None:
            iterable = ()
        super(foo, self).__init__(iterable)
        self.update(kwargs)
    def __repr__(self):
        return ",".join(self.keys())
    def __str__(self):
        return ",".join(self.keys())

f = foo({'alpha' : 'b',
    'beta' : 'c'})

import pandas as pd
pd.DataFrame(data=[['A', 1, f]], columns=['D', 'F', 'G'])
</code></pre>
<p>The output for the series 'G' isn't honoring the classes <code>__repr__</code> or <code>__str__</code>.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>I had to go to the github page for Pandas, and found out from the dev team that the pprint function they use does not honor <code>__str__</code> or <code>__repr__</code> on iterable objects.  Therefore if you inherit from <strong>dict</strong>, you will get the default print from a dictionary.  The basic solution would be to not inherit from dict and just use the default object.</p>
</div>
<div class="post-text" itemprop="text">
<p>what you have overridden here are the built-in functions for <code>object</code>, in python. <code>pandas</code> knows nothing about it. </p>
<p>it's correct that when you try to access the item in G in <code>repl</code> you get the correct overriden output because that is what you have dictated at object level. but when you try to print <code>G</code> itself, you will get the object representation not <code>str(object)</code> or <code>repr(object)</code>. you can read more <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">here</a> </p>
<p><strong>repr(object)</strong> </p>
<blockquote>
<p>Return a string containing a printable representation of
  an object. For many types, this function makes an attempt to return a
  string that would yield an object with the same value when passed to
  eval(), otherwise the representation is a string enclosed in angle
  brackets that contains the name of the type of the object together
  with additional information often including the name and address of
  the object. A class can control what this function returns for its
  instances by defining a <code>__repr__()</code> method.</p>
</blockquote>
<p>in short, overriding <code>__repr__</code> manipulates what <code>repr()</code> returns, it is <strong>not</strong> manipulating object representation. </p>
<p><code>foo</code> in G columns are still objects, they are not <code>str(foo)</code>.  </p>
<p>Therefore you need to give G the <code>str(object)</code> or <code>repr(object)</code> as its items.
you are assuming here that when you give objects to <code>DataFrame</code>, pandas is auto-translating object representation to <code>str(object)</code> or <code>repr(object)</code>. it's not in this case.</p>
<p>initial attempt to your desired result you can do this:</p>
<pre><code>import pandas as pd
df = pd.DataFrame(data=[['A', 1, str(f)]], columns=['D', 'F', 'G'])
print(df)

# output
  D F           G
0 A 1 alpha, beta
</code></pre>
</div>
<span class="comment-copy">can you give us a short example of your class? what is your df composed of? you said it's a dict then it's a DataFrame? Series?</span>
<span class="comment-copy">I added a more robust example</span>
<span class="comment-copy">thanks; you also have a code error for your <code>_init_</code> method. I edited it; it missed the self arg. also  your example doesn't generate the output you stated. in Python 3 it's an empty array for <code>SHAPE</code> column.</span>
<span class="comment-copy">I really dumbed down my example, but basically I load the keys/values into the object and then I want to do some internal magic and make the <code>__repr__</code> be the WKT string.</span>
<span class="comment-copy">@stucash I added a simpler example</span>
<span class="comment-copy">So I did some further looking into this on the Panda's github page, it turns out that because I inherit from dict, that the default pprint function will print the key/values.</span>
<span class="comment-copy">I actually think both are correct w.r.t your question here. you could either remove your inheritance from <code>dict</code>, or you could do <code>str(point)</code> or <code>repr(point)</code>; if you override <code>__str__</code> and <code>__repr__</code> then you essentially override <code>str(object)</code> and <code>repr(object)</code> as well.</span>
