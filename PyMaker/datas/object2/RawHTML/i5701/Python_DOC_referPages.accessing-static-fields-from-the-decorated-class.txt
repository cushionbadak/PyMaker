<div class="post-text" itemprop="text">
<p>Full code example:</p>
<pre><code>def decorator(class_):
    class Wrapper:
        def __init__(self, *args, **kwargs):
            self.instance = class_(*args, **kwargs)

        @classmethod
        def __getattr__(cls, attr):
            return getattr(class_, attr)
    return Wrapper


@decorator
class ClassTest:

    static_var = "some value"


class TestSomething:

    def test_decorator(self):
        print(ClassTest.static_var)
        assert True
</code></pre>
<p>When trying to execute test, getting error:</p>
<pre class="lang-none prettyprint-override"><code>test/test_Framework.py F
test/test_Framework.py:37 (TestSomething.test_decorator)
self = &lt;test_Framework.TestSomething object at 0x10ce3ceb8&gt;

    def test_decorator(self):
&gt;       print(ClassTest.static_var)
E       AttributeError: type object 'Wrapper' has no attribute 'static_var'
</code></pre>
<p>Is it possible to access static fields from the decorated class?</p>
</div>
<div class="post-text" itemprop="text">
<p>While the answer from @martineau probably better addresses the specific issue you are trying to solve, the more general approach might be to use create a metaclass in order to redefine the <em>instance</em> method <code>__getattr__</code> on a <code>type</code> instance (and classes are instances of <code>type</code>).</p>
<pre><code>def decorator(class_):
    class WrapperMeta(type):
        def __getattr__(self, attr):
            return getattr(class_, attr)

    class Wrapper(metaclass=WrapperMeta):
        def __init__(self, *args, **kwargs):
            self.instance = class_(*args, **kwargs)

    return Wrapper
</code></pre>
<p>This allows the attribute look-up on the class itself to be passed through <code>WrapperMeta.__getattr__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get it to work by making the decorator create a class <em>derived</em> from the one being decorated.</p>
<p>Here's what I mean:</p>
<pre><code>def decorator(class_):
    class Wrapper(class_):
        def __init__(self, *args, **kwargs):
            self.instance = super().__init__(*args, **kwargs)

    return Wrapper

@decorator
class ClassTest:
    static_var = "some value"

print(ClassTest.static_var)  # -&gt; some value
</code></pre>
</div>
<span class="comment-copy">Can you show the code where you are getting error? It is not immediately obvious from the code snippets above where the problem is.</span>
<span class="comment-copy">It would be helpful if you provided all the code which causes the error in a single snippet. It took me several minutes to understand what you are doing.</span>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/47891737/edit">edit</a> your question instead of posting a comment so that you can format the code properly.</span>
<span class="comment-copy">Posted full code.</span>
<span class="comment-copy">The <code>TestSomething</code> class is not necessary for this question, so I removed it.</span>
<span class="comment-copy">@Oleh Kuzovkov: IMO this answer is better than mineâ€”so you should accept it. Jared: Meta interesting!</span>
<span class="comment-copy">The main purpose of this question was to bypass fields calls to the decorated class. Inheritance solved the problem for sure, however this solution is really more suitable for this case. Thank you guys!</span>
<span class="comment-copy">Can you explain why the original code doesn't work? As a python newbie, I am unfamiliar with the <code>__getattr__()</code> method. Why does it not work like the OP expects it to?</span>
<span class="comment-copy">A class doesn't have this method <code>__getattr__()</code>, that's all.  You could use <code>getattr(class_, name)</code> instead, that works I think.</span>
<span class="comment-copy">Thank you! Such a stupid mistake on my end.</span>
<span class="comment-copy">@Code-Apprentice: Because the <code>__getattr__()</code> defined in the OP's code is a <code>Wrapper</code> classmethod. You can learn more about <code>__getattr__()</code> by reading its online <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">documentation</a>.</span>
<span class="comment-copy">@UriHoenig See my answer regarding a metaclass</span>
