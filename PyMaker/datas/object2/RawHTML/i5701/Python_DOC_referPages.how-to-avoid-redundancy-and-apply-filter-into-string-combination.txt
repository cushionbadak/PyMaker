<div class="post-text" itemprop="text">
<p>I would like to avoid redundancy into all possible combinations in a list of string (for example <code>1122</code> is the same thing as <code>2211</code> in my context therefore only one or the other should be in the resulted list). </p>
<p>I would also like to apply a filter during the combination. For example, I don't want to have any string in the result that contains <code>3</code>.  </p>
<p>How should I handle this logic?</p>
<p>This code is doing the combination</p>
<pre><code>&gt;&gt;&gt; keywords = [''.join(i) for i in itertools.product(['11', '22', '33'], repeat = 2)]
&gt;&gt;&gt; keywords
['1111', '1122', '1133', '2211', '2222', '2233', '3311', '3322', '3333']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Depending on your actual data there <em>may</em> be a more efficient way to do this, but the algorithm below will work. We eliminate the duplicates by a simple comparison. I've put the check for '3's into a function. That's slightly slower than doing it directly in the list comprehension, but it makes the code more general.</p>
<pre><code>import itertools

bases = ['11', '22', '33', '44']

def is_ok(u, v):
    ''' Test if a u,v pair is permitted '''
    return not ('3' in u or '3' in v)

keywords = [u+v for u, v in itertools.product(bases, repeat = 2) if u &lt;= v and is_ok(u, v)]
</code></pre>
<p><strong>output</strong></p>
<pre><code>['1111', '1122', '1144', '2222', '2244', '4444']
print(keywords)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The same is possible by filtering <code>itertools.combinations_with_replacement</code>:</p>
<p><strong>Code</strong></p>
<pre><code>import itertools as it


bases = ["11", "22", "33", "44"]

[x+y for x,y in it.combinations_with_replacement(bases, 2) if "3" not in x+y]
# ['1111', '1122', '1144', '2222', '2244', '4444']
</code></pre>
<p>This version is more general and does not rely on comparing numeric strings.</p>
<hr/>
<p><strong>Details</strong></p>
<p>From <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">the docs</a> we can understand why this works:</p>
<blockquote>
<p>The code for <code>combinations_with_replacement()</code> can be also expressed as a subsequence of <code>product()</code> after filtering entries where the elements are not in sorted order (according to their position in the input pool)</p>
</blockquote>
<pre><code>def combinations_with_replacement(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    for indices in product(range(n), repeat=r):
        if sorted(indices) == list(indices):
            yield tuple(pool[i] for i in indices)
</code></pre>
<p>In this manner, each item is associated with a unique index.  When the indices of two items are compared, only sorted combinations are used to yield an item.  The remaining indices are discarded as already seen.</p>
<pre><code>(0, 0)
(0, 1)
(0, 2)
(0, 3)
(1, 0)                                         # discarded
(1, 1)
...
</code></pre>
<p>See <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer">the docs</a> for more details on the similarity between this tool and <code>itertools.product</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do what you want:</p>
<pre><code>import itertools

def main():

    newkeywords = []
    keywords = ["".join(i) for i in itertools.product(["11", "22", "33"], repeat = 2)]
    for item in keywords:
        newitem = "".join(sorted(item))
        if "3" not in newitem and newitem not in newkeywords:
            newkeywords.append(newitem)
    print(newkeywords)

main()
</code></pre>
<p>results:</p>
<pre><code>['1111', '1122', '2222']
</code></pre>
<p>It makes a new list, and if that sorted item (which makes 1122 the same as 2211) exists or the number "3" exists, don't add it to the new list.</p>
</div>
<span class="comment-copy">should <code>2222</code> and <code>3333</code> also be skipped?</span>
<span class="comment-copy">Maybe loop and sort each string, add original string if sorted string doesn't exist in new list: <a href="https://stackoverflow.com/questions/15046242/how-to-sort-the-letters-in-a-string-alphabetically-in-python" title="how to sort the letters in a string alphabetically in python">stackoverflow.com/questions/15046242/â€¦</a>  I can write up a better answer if this looks like it's the right direction you want to go.</span>
<span class="comment-copy">any string that contains a 3 should be dropped</span>
<span class="comment-copy">If you don't want 3 in the output you should filter such strings out of the <i>input</i> to <code>product</code>.</span>
<span class="comment-copy">Will <code>repeat</code> always be 2?</span>
