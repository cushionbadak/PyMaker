<div class="post-text" itemprop="text">
<p>I have a function and a dictionary containing a reference to that function.</p>
<pre><code>def func1(): print('blah')

dict1 = {'func1': func1}
</code></pre>
<p>If I paste these into the python interpreter in the order given, all works well.</p>
<pre><code>`&gt;&gt;&gt; def func1(): print('blah')
... 

&gt;&gt;&gt; func1
&lt;function func1 at 0x7f8939d77730&gt;

&gt;&gt;&gt; func1()
blah

&gt;&gt;&gt; dict1 = {'func1': func1}
&gt;&gt;&gt; dict1['func1']()
blah

`
</code></pre>
<p>But if I import <code>dict1</code> from a file, the interpreter says <code>func1</code> is not defined, even though it is defined.</p>
<p>So, with file 'dictfile.py' containing a single line of text:</p>
<pre><code>dict1 = {'func1': func1}
</code></pre>
<p>Then this into the interpreter:</p>
<pre><code>&gt;&gt;&gt; def func1(): print('blah')
... 
&gt;&gt;&gt; func1()
blah

&gt;&gt;&gt; from dictfile import *
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/../dictfile.py", line 1, in &lt;module&gt;
    dict1 = {'func1': func1}
NameError: name 'func1' is not defined
&gt;&gt;&gt; 
</code></pre>
<p>What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>func1</code> is not defined in the scope of your <code>dictfile.py</code> context.</p>
<p>The global scope of 'func1' is limited to that it defines itself. This is so it can operate as a self-contained module. That is, so it can operate as a module is supposed to operate: so it can be imported and run by any other module. This is done to avoid clashes when different modules use identical names for different things in their global definitions.</p>
<p>From the python <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Thus, the author of a module can use global variables in the module
  without worrying about accidental clashes with a user’s global
  variables.</p>
</blockquote>
<p>By loading the file with an import statement you make it a module. You cannot then expect that module to acquire the scope from which you import it. It's own scope remains distinct. Its integrity is protected. It must itself import any definitions it uses if it does not define them itself.</p>
<p>For you to be able to load the dictionary which references the function, the function has to be defined in the scope (the file) in which it is located.</p>
<p>Since the <code>dictfile.py</code> file doesn't know anything about your interpreter's current state (your state isn't imported into the file and I'm not sure if that's possible), it can't find the reference to the function.</p>
<p>According to the Python <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">docs</a>,</p>
<blockquote>
<p>Each module has its own private symbol table, which is used as the
  global symbol table by all functions defined in the module. Thus, the
  author of a module can use global variables in the module without
  worrying about accidental clashes with a user’s global variables. On
  the other hand, if you know what you are doing you can touch a
  module’s global variables with the same notation used to refer to its
  functions, modname.itemname.</p>
</blockquote>
<p>For your function to be accessible in your module's (file's) scope, you'd need to import your interactive interpreter's "module", which I don't think is possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>Each module defines a namespace, so "global" variables in a module are actually scoped to that module; another module can access them, but it needs to do so through the module that defined the name.</p>
<p>When running in an interactive session, objects you create are added to a special module called <code>__main__</code>. Another module <em>could</em> import things from this if it wanted, but I don't recommend it.</p>
<p>As an example for learning purposes only:</p>
<pre><code>$ cat dictfile.py
from __main__ import func1
dict1 = {'func1': func1}

$ python
Python 2.7.10 (default, Jul 30 2016, 19:40:32) 
[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def func1(): print('blah')
...
&gt;&gt;&gt; from dictfile import dict1
&gt;&gt;&gt; dict1
{'func1': &lt;function func1 at 0x102735c08&gt;}
&gt;&gt;&gt; dict1['func1']()
blah
</code></pre>
<p>In a real-world program, you should avoid circular dependencies like this. But it still can be useful to import functions from one module, assemble them into a data structure in another module, and then use the data structure from a third module.</p>
<p>A good rule of thumb about dependencies between parts of your program: implementations should only depend on abstractions, and abstractions should only depend on other abstractions.</p>
</div>
<span class="comment-copy">func1 reference exists at run time, you cant save or load it from file.</span>
<span class="comment-copy">use something like <code>getattr(module, func1)</code> where you are assigning value to dict.</span>
<span class="comment-copy">Raghava's comment is useful and informative, and sounds like an answer. Would you please elaborate?</span>
<span class="comment-copy">This website is a bit hokey: people are always deleting their comments when one of your replies makes them change their mind about what they said.</span>
<span class="comment-copy">I've added further clarification in response to your helpful expressions of bafflement.</span>
<span class="comment-copy">Thank you. And yes, that does appear to be the case. But why is this so? It seems counter intuitive. I have in my scope the function defined. I then call into that scope a declaration that contains within it a reference to that function. Since I am bringing that declaration into my scope, am I not making the declaration in a scope that contains the object to which it refers? The delcaration is surely not made in the dumb file. It is made when I import the file, and when I import the file the function it needs is defined in my scope.</span>
<span class="comment-copy">@markling see updated answer; added a few more details I found on the Python docs which should help explain it.</span>
<span class="comment-copy">Thank you, @Pedro-von-Hertwig. I have edited your answer to elaborate that part of it I felt most instructive in helping me understand the issue.</span>
<span class="comment-copy">Yes, this cicular dependency is precisely what I have created, and will be ditching immediately, with questions now put aside for future consideration on what must be done instead to achieve the same ends by different means. Thank you.</span>
