<div class="post-text" itemprop="text">
<p>So, I have this pretty simple function (I'm a novice still).</p>
<p>And it goes like:</p>
<pre><code>def add_num(x,y,z=None):
    if z == None:
        return x+y
    else:
        return x+y+z

print(add_num(1,2))
print(add_num(1,2,3))
</code></pre>
<p>So my question is, when I notice that if there is no third variable, then it is accepted. So does "None" mean basically mean that it is ok to have no value attached to a variable if "variable=None."  Just confirming!  Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So does "None" mean basically mean that it is ok to have no value attached to a variable if "variable=None." Just confirming! Thanks! </p>
</blockquote>
<p>No.  When you define a function like this:</p>
<pre><code>def add_num(x,y,z=None):
</code></pre>
<p><code>x</code> and <code>y</code> are "positional" arguments, and they are required, while <code>z</code> is a <em>keyword</em> argument.  Keyword arguments have default values that will be used if you don't provide one when you call the function.  Instead of None, you could just as easily have written:</p>
<pre><code>def add_num(x,y,z=0):
</code></pre>
<p>Or:</p>
<pre><code>def add_num(x,y,z=5):
</code></pre>
<p>Etc. In either case, you are setting a default value for <code>z</code> if it is not provided in the function call.</p>
<p>Note that if you have multiple keyword arguments, like this:</p>
<pre><code>def do_something(x, y, size='medium', name=None):
</code></pre>
<p>That you can provide them with values as positional arguments, in which case the arguments need to be in the matching order:</p>
<pre><code>do_something(1,2, 'large', 'alice')
</code></pre>
<p>But you can also specify keyword arguments in an arbitrary order by providing their name in the function call, like this:</p>
<pre><code>do_something(1, 2, name='alice', size='large)
</code></pre>
<p>And you don't need to provide values if you are happy with the default:</p>
<pre><code>do_something(1, 2, name='alice')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def add_num(x,y,z='spatula'):
    if z == 'spatula':
        return x+y
    else:
        return x+y+z

print(add_num(1,2))
print(add_num(1,2,3))
</code></pre>
<p><code>None</code> is common to use here, but it's not intrinsic to default arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ought to take a look at the python tutorial. Especially <a href="https://docs.python.org/3/tutorial/controlflow.html#default-argument-values" rel="nofollow noreferrer">Default Argument Values</a></p>
<p>This chapter explains how to define a function with default arguments.</p>
<p>The next is about Keyword arguments: Functions can also be called using keyword arguments of the form kwarg=value.</p>
<p>There are two kinds of argument:</p>
<p><strong>keyword argument:</strong> an argument preceded by an identifier (e.g. name=) in a function call or passed as a value in a dictionary preceded by **. For example, 3 and 5 are both keyword arguments in the following calls to complex():</p>
<pre><code>complex(real=3, imag=5)
complex(**{'real': 3, 'imag': 5})
</code></pre>
<p><strong>positional argument:</strong> an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an iterable preceded by *. For example, 3 and 5 are both positional arguments in the following calls:</p>
<pre><code>complex(3, 5)
complex(*(3, 5))
</code></pre>
<p>Arguments are assigned to the named local variables in a function body.</p>
</div>
<span class="comment-copy">what you mean by "is it ok to have no value attached to a variable"?</span>
<span class="comment-copy"><code>None</code> is an object of the type <code>NoneType</code>. See <a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">docs.python.org/3/library/constants.html</a></span>
<span class="comment-copy">someone answered about the use of <code>is None</code>instead of <code>== None</code>. That is common but not imperative. It is just that <code>is</code> will check object identities while equals will be True in case of the same identity but also for object copies. But as <code>None</code> is a singleton you can't have a copy, it willl always be the same object if True.</span>
<span class="comment-copy">@user2357112 thanks for the edits, but if you're going to edit that extensively maybe just post a new answer. Or just ping me in the comments...</span>
<span class="comment-copy">All right, commenting. Default parameter values and keyword arguments are completely distinct things that just happen to have very similar syntax. Default parameter values don't stop a parameter from being provided positionally, and the absence of a default doesn't stop a parameter from being provided by keyword argument. The actual syntax for a parameter that must be provided by keyword looks completely different. <a href="https://ideone.com/7j9qOr" rel="nofollow noreferrer">Demo here.</a></span>
<span class="comment-copy">You can also see in the language reference docs for <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">function definitions</a> and <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">calls</a> that they never mix up defaults and keyword arguments - <code>=</code> always represents a default value in a definition, and a keyword argument in a call.</span>
<span class="comment-copy">Did you mean to say that <i>he</i> needs to look at the Python tuturial?</span>
