<div class="post-text" itemprop="text">
<p>I am having trouble understanding something in this code: </p>
<pre><code>normal_list = [1, 2, 3, 4, 5]

class CustomSequence():
    def __len__(self):
        return 5
    def __getitem__(self, index):
        return "x{0}".format(index)
class FunkyBackwards():
    def __reversed__(self):
        return "BACKWARDS!"

for seq in normal_list, CustomSequence(), FunkyBackwards():
    print("\n{}: ".format(seq.__class__.__name__), end="")
    for item in reversed(seq):
        print(item, end=", ")
</code></pre>
<p>I understand that customizing <code>__len__</code> will make all objects with type CustomeSequence will return a length of 5, and the index of something with length 5 will return <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, at least to my understanding. My question is, why does <code>__getitem__.index</code> look for <code>__len__</code>?</p>
<p>The function prints this:</p>
<pre><code>list: 5, 4, 3, 2, 1, 
CustomSequence: x4, x3, x2, x1, x0, 
FunkyBackwards: B, A, C, K, W, A, R, D, S, !,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Straight from <a href="https://docs.python.org/3/reference/datamodel.html#object.__reversed__" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>If the <code>__reversed__()</code> method is not provided, the <code>reversed()</code>
  built-in will fall back to using the sequence protocol (<code>__len__()</code>
  and <code>__getitem__())</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>__getitem__</code> does not "look for" <code>len</code>. It's simply that in order to reverse a sequence you must know its last item, and for that you need the length of the sequence, or the <code>__reversed__</code> magic method.</p>
<p>So, Python's <code>reversed</code> first finds the length of the sequence and retrieves its elements starting from the last one:</p>
<pre><code>def python_reverse(data):
    for x in range(data.__len__() - 1, -1, -1):
        yield data.__getitem__(x)
</code></pre>
<p>(It's not Pythonic to call magic methods explicitly. These calls are here just to show their usage. In real code please use <code>len</code> and the index notation <code>data[x]</code> instead).</p>
</div>
