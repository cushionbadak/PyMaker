<div class="post-text" itemprop="text">
<p>I'm trying to understand scope in nested classes in Python. Here is my example code:</p>
<pre><code>class OuterClass:
    outer_var = 1
    class InnerClass:
        inner_var = outer_var
</code></pre>
<p>The creation of class does not complete and I get the error:</p>
<pre class="lang-none prettyprint-override"><code>&lt;type 'exceptions.NameError'&gt;: name 'outer_var' is not defined
</code></pre>
<p>Trying <code>inner_var = Outerclass.outer_var</code> doesn't work.
I get:</p>
<pre class="lang-none prettyprint-override"><code>&lt;type 'exceptions.NameError'&gt;: name 'OuterClass' is not defined
</code></pre>
<p>I am trying to access the static <code>outer_var</code> from <code>InnerClass</code>.</p>
<p>Is there a way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Outer(object):
    outer_var = 1

    class Inner(object):
        @property
        def inner_var(self):
            return Outer.outer_var
</code></pre>
<p>This isn't quite the same as similar things work in other languages, and uses global lookup instead of scoping the access to <code>outer_var</code>. (If you change what object the name <code>Outer</code> is bound to, then this code will use that object the next time it is executed.)</p>
<p>If you instead want all <code>Inner</code> objects to have a reference to an <code>Outer</code> because <code>outer_var</code> is really an instance attribute:</p>
<pre><code>class Outer(object):
    def __init__(self):
        self.outer_var = 1

    def get_inner(self):
        return self.Inner(self)
        # "self.Inner" is because Inner is a class attribute of this class
        # "Outer.Inner" would also work, or move Inner to global scope
        # and then just use "Inner"

    class Inner(object):
        def __init__(self, outer):
            self.outer = outer

        @property
        def inner_var(self):
            return self.outer.outer_var
</code></pre>
<p>Note that nesting classes is somewhat uncommon in Python, and doesn't automatically imply any sort of special relationship between the classes. You're better off not nesting. (You can still set a class attribute on <code>Outer</code> to <code>Inner</code>, if you want.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can simply do:</p>
<pre><code>class OuterClass:
    outer_var = 1

    class InnerClass:
        pass
    InnerClass.inner_var = outer_var
</code></pre>
<p>The problem you encountered is due to this:</p>
<blockquote>
<p>A block is a piece of Python program text that is executed as a unit.
  The following are blocks: a module, a function body, and a class
  definition.<br/>
  (...)<br/>
  A scope defines the visibility of a name within
  a block.<br/>
  (...)<br/>
  The scope of names defined in a class block is
  limited to the class block; it does not extend to the code blocks of
  methods – this includes generator expressions since they are
  implemented using a function scope. This means that the following will
  fail:</p>
<pre><code>   class A:  

       a = 42  

       b = list(a + i for i in range(10))
</code></pre>
<p><a href="http://docs.python.org/reference/executionmodel.html#naming-and-binding" rel="noreferrer">http://docs.python.org/reference/executionmodel.html#naming-and-binding</a></p>
</blockquote>
<p>The above means:<br/>
a function body is a code block and a method is a function, then names defined out of the function body  present in a class definition do not extend to the function body.</p>
<p>Paraphrasing this for your case:<br/>
a class definition is a code block, then names defined out of the inner class definition present in an outer class definition do not extend to the inner class definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might be better off if you just don't use nested classes. If you must nest, try this:</p>
<pre><code>x = 1
class OuterClass:
    outer_var = x
    class InnerClass:
        inner_var = x
</code></pre>
<p>Or declare both classes before nesting them:</p>
<pre><code>class OuterClass:
    outer_var = 1

class InnerClass:
    inner_var = OuterClass.outer_var

OuterClass.InnerClass = InnerClass
</code></pre>
<p>(After this you can <code>del InnerClass</code> if you need to.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Easiest solution:</p>
<pre><code>class OuterClass:
    outer_var = 1
    class InnerClass:
        def __init__(self):
            self.inner_var = OuterClass.outer_var
</code></pre>
<p>It requires you to be explicit, but doesn't take much effort. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python mutable objects are passed as reference, so you can pass a reference of the outer class to the inner class.</p>
<pre><code>class OuterClass:
    def __init__(self):
        self.outer_var = 1
        self.inner_class = OuterClass.InnerClass(self)
        print('Inner variable in OuterClass = %d' % self.inner_class.inner_var)

    class InnerClass:
        def __init__(self, outer_class):
            self.outer_class = outer_class
            self.inner_var = 2
            print('Outer variable in InnerClass = %d' % self.outer_class.outer_var)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All explanations can be found in <em>Python Documentation The Python Tutorial</em></p>
<p>For your first error <code>&lt;type 'exceptions.NameError'&gt;: name 'outer_var' is not defined</code>. The explanation is:</p>
<blockquote>
<p>There is no shorthand for referencing data attributes (or other methods!) from within methods. I find that this actually increases the readability of methods: there is no chance of confusing local variables and instance variables when glancing through a method.</p>
</blockquote>
<p>quoted from <em>The Python Tutorial 9.4</em></p>
<p>For your second error <code>&lt;type 'exceptions.NameError'&gt;: name 'OuterClass' is not defined</code></p>
<blockquote>
<p>When a class definition is left normally (via the end), a class object is created.</p>
</blockquote>
<p>quoted from <em>The Python Tutorial 9.3.1</em></p>
<p>So when you try <code>inner_var = Outerclass.outer_var</code>, the <code>Quterclass</code> hasn't been created yet, that's why <code>name 'OuterClass' is not defined</code></p>
<p>A more detailed but tedious explanation for your first error:</p>
<blockquote>
<p>Although classes have access to enclosing functions’ scopes, though, they do not act
  as enclosing scopes to code nested within the class: Python searches enclosing functions
  for referenced names, but never any enclosing classes. That is, a class is a local scope
  and has access to enclosing local scopes, but it does not serve as an enclosing local scope
  to further nested code. </p>
</blockquote>
<p>quoted from <em>Learning.Python(5th).Mark.Lutz</em></p>
</div>
<span class="comment-copy">It might be helpful to add with which version(s) of python your answer will work.</span>
<span class="comment-copy">I wrote this with 2.6/2.x in mind, but, looking at it, I see nothing that wouldn't work the same in 3.x.</span>
<span class="comment-copy">I don't quite understand what you mean in this part, "(If you change what object the name Outer is bound to, then this code will use that object the next time it is executed.)" Can you please help me understand?</span>
<span class="comment-copy">@batbrat it means that the reference to <code>Outer</code> is looked up anew every time you do <code>Inner.inner_var</code>. So if you rebind the name <code>Outer</code> to a new object, <code>Inner.inner_var</code> will start returning that new object.</span>
<span class="comment-copy">Amazing. Your example fails, claiming "global name 'a' is not defined".  Yet substituting a list comprehension <code>[a + i for i in range(10)]</code> successfully binds A.b to the expected list [42..51].</span>
<span class="comment-copy">@George Note that the example with <b>class A</b> isn't mine, it is from the Python official doc whose I gave link. This example fails and that failure is what is wanted to be shown in this example. In fact <code>list(a + i for i in range(10))</code> is <code>list((a + i for i in range(10)))</code> that is to say <code>list(a_generator)</code>. They say <b>a generator</b> is implemented with a similar scope than the scope of functions.</span>
<span class="comment-copy">@George For me, that means that functions act differently according if they are in a module or in a class. In the first case, a function goes outside to find the object binded to a free identifier. In the second case, a function, that is to say a method, doesn't go outside its body. Functions in a module and methods in a class are in reality two kinds of objects. Methods are not just functions in class. That's my idea.</span>
<span class="comment-copy">@George: FWIW, neither the <code>list(...)</code> call nor comprehension work in Python 3. The <a href="http://docs.python.org/3/reference/executionmodel.html?highlight=naming%20binding#naming-and-binding" rel="nofollow noreferrer">documentation</a> for Py3 is also slightly different reflecting this. It now says "<b>The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods – this includes <i>comprehensions</i> and generator expressions since they are implemented using a function scope.</b>" (emphasis mine).</span>
<span class="comment-copy">I am curious about why list(A.a + i for i in range(10)) also doesn't work, where I fixed a by A.a. I think A may be a global name.</span>
<span class="comment-copy">NameError: name 'OuterClass' is not defined - -1</span>
<span class="comment-copy">@Mr_and_Mrs_D Yeah, see edit.</span>
<span class="comment-copy">The point is to access it from Outer class scope - plus similar error will occur if you call this from a static scope inside Outer. I'd suggest you delete this post</span>
<span class="comment-copy">Please note that you have a reference cycle here, and in some scenario instance of this class won't be freed. One example, with cPython, should you have defined <code>__del__</code>  method, the garbage collector won't be able to handle the reference cycle, and the objects will go into <code>gc.garbage</code>. The code above, as-is, isn't problematic though. The way to deal with it is using a <b>weak reference</b>. You can read documentation on <a href="https://docs.python.org/2/library/weakref.html" rel="nofollow noreferrer">weakref (2.7)</a> or <a href="https://docs.python.org/3.5/library/weakref.html" rel="nofollow noreferrer">weakref (3.5)</a></span>
