<div class="post-text" itemprop="text">
<p>The <a href="https://docs.djangoproject.com/en/2.0/topics/db/aggregation/#generating-aggregates-for-each-item-in-a-queryset" rel="nofollow noreferrer">annotate</a> function is very useful to define computed fields for each row of the table. Model properties can also be used for defining computed fields, but are limited (can not be used for sorting, for instance). </p>
<p>Can a model property be completely replaced by an annotated field? When is it adequate to use each?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Differences in annotations, properties, and other methods</h3>
<p>There are some cases where annotations are definitely better and easier than properties. These are usually calculations that are easy to make in the database and where the logic is easy to read. </p>
<p>Django <code>@property</code>, on the other hand, is a very easy and Pythonic way to write calculation logic into your models. Some think they are neat things, others think properties should be burned and hidden away because they mix program logic into data objects, which increases complexity. I think that especially the <a href="https://docs.djangoproject.com/en/dev/ref/utils/#django.utils.functional.cached_property" rel="nofollow noreferrer"><code>@cached_property</code></a> decorator is rather neat.</p>
<p>Properties and annotations are not, however, the only ways to query and calculate things in the Django ORM.</p>
<p>In many complex cases properties or <strong>Model, Manager, or QuerySet methods</strong>, especially with <a href="https://docs.djangoproject.com/en/dev/topics/db/managers/#calling-custom-queryset-methods-from-the-manager" rel="nofollow noreferrer">custom QuerySets and Managers</a> have the most flexibility when it comes to customizing your queries.</p>
<p>Most of the time it does not matter which method you use speed-wise, and should use the cleanest or most compact option that is the simplest to write and easiest to read. Try to keep it simple and stupid and you will have the least amount of complex code to maintain.</p>
<hr/>
<h3>Exploring, benchmarking, and optimizing</h3>
<p>In some cases when you have performance problems and end up analyzing your SQL queries you might be forced to use annotations and custom queries to optimize the complexities of queries you are making. This can be especially true when you are making complex lookups in the database and have to resort to calculating things in either properties or create custom SQL queries. </p>
<p>Calculating stuff in properties can be horrible for complexity if you have large querysets, because you have to run those calculations in Python where objects are large and iteration is slow. On the other hand, calculating stuff via custom SQL queries can be a nightmare to maintain, especially if the SQL you are maintaining is not, well, written by you. </p>
<p>In the end it comes down to the speed requirements and costs of calculation. If calculating in plain Python doesn't slow your service down or cost you money, you shouldn't probably optimize. If you are paying for a fleet of servers then, of course, reasonable optimization might bring you savings that you can use elsewhere. Using 10 hours on optimizing some snippet might not really pay itself back, so be very careful here.</p>
<p>In optimization cases you have to weigh different up and downsides and try different solutions if you are not a prophet and instinctively know what the problem is. If the problem was obvious, it would have been probably optimized away earlier, right?</p>
<p>When experimenting with different options the <a href="https://github.com/jazzband/django-debug-toolbar" rel="nofollow noreferrer">Django Debug Toolbar</a>, SQL <a href="https://www.postgresql.org/docs/current/static/sql-explain.html" rel="nofollow noreferrer">EXPLAIN</a> and <a href="https://www.postgresql.org/docs/current/static/sql-analyze.html" rel="nofollow noreferrer">ANALYZE</a> and <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">Python profiling</a> are your friends.</p>
<p>Remember that many query problems are also database related problems and you might be hurting your performance with poor database design or maintenance. Remember to run <a href="https://www.postgresql.org/docs/devel/static/sql-vacuum.html" rel="nofollow noreferrer">VACUUM</a> periodically and try to <a href="https://en.wikipedia.org/wiki/Database_normalization" rel="nofollow noreferrer">normalize your database design</a>.</p>
<p>Toolwise Django Debug Toolbar is especially useful because it can be help with both profiling and SQL analyzing. Many IDEs such as PyCharm also offer profiling on even a running server. This is pretty useful if you want to have your development setup and integrate different tools into it.</p>
</div>
