<div class="post-text" itemprop="text">
<p>I have code like this:</p>
<pre><code>from datetime import datetime
from tabulate import tabulate

def search_projection_date():
    projections = open('projections.txt','r').readlines()
    date = input("Input projection date: ")
    try:
        date = date.strptime(date, "%d.%m.%Y.")
    except:
        print("Date input error!")
        #search_projection_date()
    for i in projections:
        projections = i.strip("\n").split("|")
        if date == projections[2]:
            table = [['Code:',projections[0]],['Hall:',projections[1]],['Date:',projections[2]],['Start time:',projections[3]],['End time:', projections[4]],['Day(s):', projections[5]], ['Movie:', projections[6]], ['Price:', projections[7]]]
            print (tabulate(table))
            #break
    else:
        print("No projection on that date")
</code></pre>
<p>And text file like this:</p>
<pre class="lang-none prettyprint-override"><code>0001|AAA|17.12.2017.|20:30|21:00|sunday|For a few dolars more|150
0002|BBB|17.12.2017.|19:30|21:15|saturday|March on the Drina|300
0003|GGG|19.12.2017.|18:00|19:00|tuesday|A fistful of Dolars|500
0004|GGG|16.12.2017.|21:15|00:00|sunday|The Good, the Bad and the Ugly|350
</code></pre>
<p>I try to search movie projections by date...
If there is a projection on the entered date it will find it and print the list, but before printing that list it will always print "Date input error" and after that list "No projection on that date". (if I put <code>break</code> in <code>if</code> statement it will print only the first found projection on entered day, withouth <code>else</code> statement, obvious)</p>
<p><strong>Questions</strong>: How to print ONLY list of projections without "date input error" if date is correctly input.
How to print only "No projection on that date" if date is correct but there is no projection and how to ask user for input that until puts it correctly? In this way with recursion it will always throw exception and recursion <code>search_projection_date()</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a whole bunch of major problems with your code. As it happens, they showcase why some general advice we hear so often is actually good advice.</p>
<ol>
<li>The line <code>date = input("Input projection date: ")</code> creates a string named <code>date</code>. <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> always returns a string. Strings in Python do not have a method called <code>strptime</code>. Which brings us to issue #2:</li>
<li>You should not catch generic exceptions. You were probably looking to trap a <code>TypeError</code> or <code>ValueError</code> in the <code>except</code> clause. However, you are getting an error that says <code>AttributeError: 'str' object has no attribute 'strptime'</code>. This is because you can't call methods that you want to exist but don't. Your except line should probably read something like <code>except ValueError:</code>.</li>
<li>Your <code>except</code> clause does nothing useful (beyond the problems listed above). If the string is not formatted correctly, you print a message but continue anyway. You probably want to use <code>raise</code> in the <code>except</code> clause to propagate the exception further. Luckily for you, you actually want the date to be a string, which brings us to issue #4:</li>
<li>Why are you attempting to convert the string to a date to begin with? You can not compare a date object and a string that you get from the file and ever expect them to be equal. You want to compare a string to a string. If you had some kind of validation in mind, that's fine, but use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.strptime</code></a> and don't replace the original string; just raise an error if it doesn't convert properly.</li>
<li>The <code>else</code> clause in a <code>for</code> loop will execute whenever the loop terminates normally (i.e., without a <code>break</code>). Since you always iterate through all the lines, you will always trigger the <code>else</code> clause. You need to have another way to determine if you found matching items, like a boolean flag or a counter. I will show an example with a counter, since it is more general.</li>
<li>You never close your input file. Not a huge problem in this tiny example, but can cause major issues with bigger programs. Use a <code>with</code> block instead of raw <code>open</code>.</li>
<li>Your method of iterating through the file is not wrong per-se, but is inefficient. You load the entire file into memory, and then iterate over the lines. In Python, text files are already iterable over the lines, which is much more efficient since it only loads one line at a time into memory, and also doesn't make you process the file twice.</li>
</ol>
<p>Combining all that, you can make your code look like this:</p>
<pre><code>def search_projection_date():
    counter = 0
    with open('projections.txt','r') as projections:
        date = input("Input projection date: ")
    for line in projections:
        projection = line.strip("\n").split("|")
        if date == projection[2]:
            table = [['Code:',projection[0]],
                     ['Hall:',projection[1]],
                     ['Date:',projection[2]],
                     ['Start time:',projection[3]],
                     ['End time:', projection[4]],
                     ['Day(s):', projection[5]],
                     ['Movie:', projection[6]],
                     ['Price:', projection[7]]]
            print(tabulate(table))
            counter += 1
    if not counter:
        print("No projection on that date")
    else:
        print("Found {0} projections on {1}".format(counter, date))
</code></pre>
<p>I trusted your use of <code>tabulate</code> since I am not familiar with the module and have no intention of installing it. Keep in mind that the date verification is optional. If the user enters an invalid string, that's the end of it: you don't need to check for dates like <code>'aaaa'</code> because they will just print <code>No projection on that date</code>. If you insist on keeping the verification, do it more like this:</p>
<pre><code>from datetime import datetime

datetime.strftime(date, '%d.%m.%Y.')
</code></pre>
<p>That's it. It will raise a <code>ValueError</code> if the date does not match. You don't need to do anything with the result. If you want to change the error message, or return instead of raising an error, you can catch the exception:</p>
<pre><code>try:
    datetime.strftime(date, '%d.%m.%Y.')
except ValueError:
    print('Bad date entered')
    return
</code></pre>
<p>Notice that I am catching a very specific type of exception here, not using a generic <code>except</code> clause.</p>
</div>
<span class="comment-copy"><code>else</code> executes if the <code>for</code> loop did <i>not</i> break. It's not what you want.</span>
<span class="comment-copy">@MadPhysicist if I put <code>else</code> after <code>if</code> statement it will print  "No projection on that date" for each date different from the entered one. For example if there is 100 projections and only one is on date 21.12.2017. it wil print 99 time  "No projection on that date".</span>
<span class="comment-copy">Of course it will, that's how <code>if-else</code> works. I'm saying there is no form of <code>else</code> that you need to use.</span>
<span class="comment-copy">OK. I just realized why you are getting that exception. You really need to look at what your functions are doing carefully.</span>
<span class="comment-copy">@MadPhysicist Sorry, but then how to print ONLY "No projection on that date" if there's really no ANY projection on entered date? :)</span>
<span class="comment-copy">Well said. However, I have issue with this line: <code>projections = line.strip("\n").split("|")</code> The variable <code>projections</code> was assigned to the table, now the OP assigned it to a row in the table. I don't like that. It destroy the table afterward. The code works, however.</span>
<span class="comment-copy">@HaiVu. Nice catch. It is fortuitous that the iterator in a loop is fixed at the start of the loop and you can bind the name to whatever you want inside the loop. Will fix.</span>
<span class="comment-copy">@HaiVu. Fixed...</span>
<span class="comment-copy">I don't see the fix yet, <code>projections = line.strip(...)</code> should be <code>projection = line.strip(...)</code> Note the singular <code>projection</code></span>
<span class="comment-copy">@HaiVu. I only do it if it looks like OP put in the time themselves. This one looks like they spent some time on this, tried different options and are legitimately stuck. Who doesn't remember being in that position as a beginner?</span>
