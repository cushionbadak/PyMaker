<div class="post-text" itemprop="text">
<p>EDIT:
As requested, here is the problem I am trying to solve:
I have files in a directory that do not have extensions. Based on the output of the "file" command I want to assign the corresponding extension. So my dictionary is assigning strings that can be in this output, to the extensions (eg "ASCII": "txt") but can't know if it will be the exact output. For example :</p>
<pre><code>$ file my_file
myfile: ASCII text
# I want to change the extension of myfile to myfile.txt
</code></pre>
<p>That is what the code I wrote was designed to do, but maybe there are better solutions</p>
<p>I have a dictionnary of strings with keys that have common strings :</p>
<pre><code>MY_D = {
    "first_k": "first_v",
    "sec_k": "sec_v",
    "some_key_name_that_includes_others": "value1",
    "some_other_key": "value2",
    ...
    "last_k": "last_v"
    }
</code></pre>
<p>Sometimes, I have to fetch a value, if the search word is within the key. I use this code:</p>
<pre><code>key_I_am_looking_for = "some"
value = list(v for k, v in MY_D.items() if value_I_am_looking_for in k)[-1]
</code></pre>
<p>But when the key I am looking for appears in multiple possible keys, the value I get is not always the same, in this example it can be either "value1" or "value2".
I noticed the list returned, is not always ordered the same way.</p>
<p>Is there a way I can make this return always the value that corresponds to the longest key matched (here would be "value1")?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dicts, up to Python 3.7, are unordered by specification, meaning the code should not rely on an internal order for dictionaries.</p>
<p>The work around this is simply to sort the output of your dict interation. In your snippet, that can be done simply by changing the call to <code>list</code> by a call to <code>sorted</code>:</p>
<pre><code>value = sorted(v for k, v in MY_D.items() if value_I_am_looking_for in k)[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The longest key in all matches. A sorted with lambda may help.</p>
<p>This gets each match in a list of lists and uses sorted and key=lambda... on the length of the 1st item in each list (which is the saved key name). It will sort shortest key name to longest. Get the last list and the last item of that list to get the value of value1.</p>
<pre><code>MY_D = {
    "first_k": "first_v",
    "sec_k": "sec_v",
    "some_key_name_that_includes_others": "value1",
    "some_other_key": "value2",
    "last_k": "last_v"
    }

key_I_am_looking_for = "some"

# List of lists of matches.
value = list([k, v] for k, v in MY_D.items() if key_I_am_looking_for in k)

# Sort by index 0 of each inner list.
key_len = sorted(value, key=lambda l: len(l[0]))

# Last list is longest index 0 so get last item of that list.
print('longest:', key_len[-1][-1])
</code></pre>
</div>
<span class="comment-copy"><code>dict</code> is unordered by design, hence when calling <code>MY_D.items()</code> there is no guarantee you'll get the items in the same order you inserted them. If you want to preserve the order of insertion, you should consider using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a></span>
<span class="comment-copy">This looks like an <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a> question to me. What you describe is also dependent on how the dict is created and which Python version you use, so I doubt you'll get helpful answers to this question. Can you update your answer, describing the actual problem is that you need to sovle?</span>
<span class="comment-copy">Or update to python 3.6 which is ordered and now dictionaries are guaranteed to keep insertion order in the future.</span>
<span class="comment-copy">@MatiasCicero - this is not quite correct. From Python 3.6 onwards insertion order is kept in CPython (but not guaranteed for all implementations) and from Python3.7 on it will even be guaranteed.</span>
<span class="comment-copy">@OliverBestwalter : understood, I tried to describe my problem in the edit.</span>
<span class="comment-copy">I understand how this would solve my question, but it wouldn't solve my problem. I am going to edit my question to make it clearer but I don't want the code just to output the same thing, I want to control which output it should be.</span>
<span class="comment-copy">What would "solve your problem" is definitely  a reversed dict, like it was in the other answer. Keeping changing the question after you get answers is not making trying to help you a nice experience.</span>
