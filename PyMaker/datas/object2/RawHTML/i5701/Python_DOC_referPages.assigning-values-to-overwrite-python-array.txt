<div class="post-text" itemprop="text">
<p>I am trying to assign new values to an array based on whether or not the stored value is &lt;3. Coming from an R background this is how I would do it, but this gives me a syntax error in Python. What am I doing wrong, and what is the Python approach?</p>
<pre><code>eurx=[1,2,3,4,5,6,7,'a',8]
sma50=3

tw=eurx
tw[eurx&lt;sma50]=-1
tw[eurx&gt;=sma50]=1
tw[(tw!=1)||(tw!=-1)]=0
print(tw)
</code></pre>
<p>GOAL:</p>
<pre><code>-1
-1
1
1
1
1
1
0
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is "too much R". A pythonic way would be to use functional filtering:</p>
<pre><code>&gt;&gt;&gt; map(lambda i: -2*int(i&lt;sma50)+1 if type(i) == int else 0, eurx)
[-1, -1, 1, 1, 1, 1, 1, 0, 1]
</code></pre>
<p>Or just a simple for-loop with a few ifs:</p>
<pre><code>&gt;&gt;&gt; for i in eurx:
...   if type(i) != int: 
...     print 0
...   else: 
...     print -2*int(i&lt;sma50)+1
... 
-1
-1
1
1
1
1
1
0
1
</code></pre>
<p>In general: don't try to guess the syntax. It's very simple, just read through some tutorials (e.g. <a href="https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming</a>)</p>
<p><strong>Edit</strong>: the <code>int</code> conversion hack works as follows: you know you can convert bool to int, right?</p>
<pre><code>&gt;&gt;&gt; int(True)
1
&gt;&gt;&gt; int(False)
0
</code></pre>
<p>If <code>i&lt;sma50</code> evaluates to True, <code>int(i&lt;sma50)</code> will be 1. So yor numbers now are converted to ones if <code>i</code> is smaller than <code>sma50</code> and to zeros otherwise. But apparently you want the values <code>(-1, 1)</code> instead of <code>(1, 0)</code>. Just apply the transform <code>-2x+1</code> and you're done!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your desired syntax is pretty close to what you'd write in <a href="http://www.numpy.org/" rel="nofollow noreferrer">numpy</a>.</p>
<p>The heterogeneous list doesn't make it easy, but here's an example:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; eurx=[1,2,3,4,5,6,7,'a',8]
&gt;&gt;&gt; sma50 = 3
&gt;&gt;&gt; tw = np.array([i if isinstance(i, int) else np.nan for i in eurx])
&gt;&gt;&gt; tw
array([  1.,   2.,   3.,   4.,   5.,   6.,   7.,  nan,   8.])
&gt;&gt;&gt; tw[tw &lt; sma50] = -1
__main__:1: RuntimeWarning: invalid value encountered in less
&gt;&gt;&gt; tw[tw &gt;= sma50] = 1
__main__:1: RuntimeWarning: invalid value encountered in greater_equal
&gt;&gt;&gt; tw
array([ -1.,  -1.,   1.,   1.,   1.,   1.,   1.,  nan,   1.])
&gt;&gt;&gt; tw[np.isnan(tw)] = 0
&gt;&gt;&gt; tw
array([-1., -1.,  1.,  1.,  1.,  1.,  1.,  0.,  1.])
</code></pre>
</div>
<span class="comment-copy">That is not an array, that is a list</span>
<span class="comment-copy">Also, this never makes a copy in Python, if that was your intent: <code>tw=eurx</code></span>
<span class="comment-copy">Could you explain the reason for the -2 ? Based on some googling for map and lambda it doesnt seem to be needed by either of those</span>
<span class="comment-copy">Right, it's not required. You can insert another <code>if</code> to get the same result without the bool-to-int conversion hack.</span>
<span class="comment-copy">The first code is not readable, and if you use <code>map</code> with a lambda, you might as well use a list comprehension. The second example doesn't return  or define anything, it just prints elements.</span>
