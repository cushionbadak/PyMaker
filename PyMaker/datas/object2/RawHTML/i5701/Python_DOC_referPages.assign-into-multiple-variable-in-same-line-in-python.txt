<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/32127908/python-assignment-operator-precedence-a-b-ab-5">Python Assignment Operator Precedence - (a, b) = a[b] = {}, 5</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I am using Jupyter Notebook for Python and also using Numpy Lib.
Here is what i have tried </p>
<pre><code>import numpy as np
arr = np.arange(10, 21)
print(arr)
slice_arr = arr[:5]= 6
print(slice_arr)
print(arr)
</code></pre>
<p>Output is :</p>
<pre><code>[10 11 12 13 14 15 16 17 18 19]
6
[ 6  6  6  6  6 15 16 17 18 19]
</code></pre>
<p>But I thought <strong>slice_arr</strong> would be <code>[ 6  6  6  6  6]</code> as i am getting first 5 element from <strong>arr</strong> and assigning <code>6</code> to all 5 elements and then assigning to <strong>slice_arr</strong></p>
<p>How this statements would executed and How <strong>slice_arr</strong> value is <code>6</code>?</p>
<p>Does <code>6</code> is assigned separately to arr[:5] and <code>slice_arr</code>?  </p>
<p>If the assignment if from right to left then <code>slice_arr</code> should be <code>[ 6  6  6  6  6]</code></p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Multiple assignments like this are not common, and not encouraged (without good reason):</p>
<pre><code>slice_arr = arr[:5]= 6
</code></pre>
<p>Assigning an immutable object like a number to several variables is fine:</p>
<pre><code>In [215]: x = y = 10
</code></pre>
<p>Assigning a mutable object like an array or list should be done with caution:</p>
<pre><code>In [216]: x = y = [1,2,3]
In [217]: x[0]=12
In [218]: y
Out[218]: [12, 2, 3]
</code></pre>
<p>The simple interpretation of [216] is that the same list is assigned to both variables.  </p>
<p>While I haven't seen your expression before, it makes sense to me that <code>slice_arr</code> would be <code>6</code>, the value on the RHS.</p>
<p>The <code>arr[:5] = 6</code> is executed as <code>arr.__setitem(slice(None,5), 6)</code>, that is, a method call on <code>arr</code>.  </p>
<p>Conceivably the interpreter could also execute  <code>slice_arr = arr.__getitem__(slice(None,5))</code>, but it would be simpler (and less ambiguous) if it is executed <code>slice_arr = 6</code>.  That is, assign the same thing to both objects, rather than chain the action.</p>
<p>Another way to look at this, is that the replication of <code>6</code> is done within <code>arr</code>, or as part of the process of mutating <code>arr</code>.  It isn't replicated before the assignment.  <code>numpy</code> operates within Python.  The Python interpreter parses the code, translating it into function and method calls.  </p>
<hr/>
<p>Here's a list example</p>
<pre><code>In [235]: x=[1,2,3]
In [236]: y = x[1:] = [3,4,5]
In [237]: y
Out[237]: [3, 4, 5]
In [238]: x
Out[238]: [1, 3, 4, 5]
</code></pre>
<p>The documentation says the <code>target</code> assignments are done left to right.  I think this illustrates that:</p>
<pre><code>In [43]: alist = alist[2:] = [1,2,3]
In [44]: alist
Out[44]: [1, 2, 1, 2, 3]
</code></pre>
<p><code>alist</code> first gets the value <code>[1,2,3]</code>, and then a slice (the last element) is replaced by the same list.</p>
<p>A somewhat artificial array example of the left to right assignment:</p>
<pre><code>In [45]: arr = np.arange(10)
In [46]: idx = arr[:idx] = 6
In [47]: idx
Out[47]: 6
In [48]: arr
Out[48]: array([6, 6, 6, 6, 6, 6, 6, 7, 8, 9])
In [49]: idx = arr[:idx] = 4
In [50]: arr
Out[50]: array([4, 4, 4, 4, 6, 6, 6, 7, 8, 9])
</code></pre>
<p><code>idx</code> is assigned the value before being used in the <code>arr[:idx]</code> expression.  This only works because the assignments are executed left to right (after the RHS has been evaluated).</p>
<p>From the <code>assignment</code> docs, the formal language expression is:</p>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#assignment-statements</a></p>
<blockquote>
<p>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#assignment-statements</a></p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<p>To get what you want, maybe do this:</p>
<p>slice_arr = arr[:5] = np.zeros([5])+6</p>
</div>
<span class="comment-copy">Thanks for you answer. So here the right most value <code>6</code> is assigned separately to <code>arr[:5]</code> and <code>slice_arr</code>, am i right @hpaulj ?</span>
<span class="comment-copy">@AbuYousuf, right.  the <code>expression list</code> (in @Gavin's reference) is evaluated once, and the assignment to <code>targets</code> is done individually.  I added an example showing that the <code>target</code> assignment occurs left to right (in your case <code>slice_arr</code> is assigned 6 first).</span>
<span class="comment-copy">Thanks for your answer.</span>
<span class="comment-copy">I wasn't aware that the <code>left to right</code> was a formal part of the syntax.  It makes sense, though in most cases it shouldn't make a difference.</span>
