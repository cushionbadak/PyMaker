<div class="post-text" itemprop="text">
<p>To vim  .pypirc in home directory.</p>
<pre><code>[distutils]
index-servers=pypi

[pypi]
repository = https://upload.pypi.org/legacy/
username = xxxx
password = xxxx
</code></pre>
<p>The directory structure.</p>
<pre><code>tree /tmp/getHello
/tmp/getHello
├── getHello
│   └── getHello.py
├── README.rst
└── setup.py
</code></pre>
<p>The getHello.py.</p>
<pre><code>cat /tmp/getHello/getHello/getHello.py
def say(something):
    print(something)
</code></pre>
<p>The tmp/getHello/setup.py.</p>
<pre><code>cat /tmp/getHello/setup.py
from setuptools import setup, find_packages
from codecs import open
from os import path
here = path.abspath(path.dirname(__file__))
with open(path.join(here, 'README.rst'), encoding='utf-8') as f:
    long_description = f.read()
setup(
    name='getHello',
    version='1.0.0',
    description='getHello',
    long_description=long_description,
    url='https://upload.pypi.org/legacy/getHello',
    author='The Python Packaging Authority',
    author_email='pypa-dev@googlegroups.com',
    license='MIT',
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'Topic :: Software Development :: Build Tools',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3',
        'Programming Language :: Python :: 3.4',
        'Programming Language :: Python :: 3.5',
        'Programming Language :: Python :: 3.6',
    ],
    keywords='sample setuptools development',
    packages=find_packages(exclude=['contrib', 'docs', 'tests'])
)
</code></pre>
<p>Now to make the pypi packages.</p>
<pre><code>cd  /tmp/getHello
python3  setup.py sdist build
python3  setup.py bdist_wheel --universal
</code></pre>
<p>To list the file tree .</p>
<pre><code>tree
.
├── build
│   └── bdist.linux-x86_64
├── dist
│   ├── getHello-1.0.0-py2.py3-none-any.whl
│   └── getHello-1.0.0.tar.gz
├── getHello
│   └── getHello.py
├── getHello.egg-info
│   ├── dependency_links.txt
│   ├── PKG-INFO
│   ├── SOURCES.txt
│   └── top_level.txt
├── README.rst
└── setup.py
</code></pre>
<p>Upload the source file and whl file.</p>
<pre><code>python3  setup.py  sdist upload
python3  setup.py  bdist_wheel upload
</code></pre>
<p>Now there are two files :<code>getHello-1.0.0-py2.py3-none-any.whlin</code> and <code>getHello-1.0.0.tar.gz</code> in my pypi account.    </p>
<p>To install the package with pip.</p>
<pre><code>sudo pip3 install getHello
</code></pre>
<p>Everything is ready for getHello.</p>
<pre><code>python3
import getHello
</code></pre>
<p>An error occurs here:</p>
<pre><code>ImportError: No module named 'getHello'
</code></pre>
<p>Why getHello.py can't be packed into <code>getHello-1.0.0-py2.py3-none-any.whlin</code> or <code>getHello-1.0.0.tar.gz</code> ?
How to pack getHello.py  into <code>getHello-1.0.0-py2.py3-none-any.whlin</code> or <code>getHello-1.0.0.tar.gz</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>To add a <code>__init__.py</code> in <code>getHello</code>:</p>
<pre><code>cd  getHello/getHello
vim  __init__.py
from getHello.say import say
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is likely trying to import from the 'getHello' subdirectory in your tree (or, the getHello.py file), not the package you just installed.</p>
<p>The way Python finds and loads modules can be occasionally surprising.  See:  <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html#searching</a></p>
<p>Use the <code>-v</code> command line option with the Python interpreter to see exactly what's going on. </p>
<p>To avoid any confusion about what exactly is importing, start the Python interpreter from another directory (one that doesn't have a getHello subdirectory, or a file named getHello.py).  </p>
</div>
