<div class="post-text" itemprop="text">
<p>So I've been messing around with the standard operators in classes to try and see what i can make, but i haven't been able to find how to edit the boolean <code>and</code> operator.</p>
<p>I can edit the bitwise <code>&amp;</code>operator by defining <code>__and__(self)</code>, but not the way that <code>and</code> behaves. Does anyone know how I can change the behavior of <code>a and b</code> where <code>a</code> and <code>b</code>are instances of the class I'm making?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, <code>and</code> and <code>or</code> access <code>__nonzero__</code>:</p>
<pre><code>&gt;&gt;&gt; class Test(object):
...     def __nonzero__(self):
...         print '__nonzero__ called'
...         return True
... 
&gt;&gt;&gt; Test() and 1
__nonzero__ called
1
</code></pre>
<p>In Python 3, <code>__nonzero__</code> has been renamed to <code>__bool__</code>.</p>
<pre><code>&gt;&gt;&gt; class Test:
...     def __bool__(self):
...         print('__bool__ called')
...         return True
... 
&gt;&gt;&gt; Test() and 1
__bool__ called
1
</code></pre>
<p>Note that short-circuit evaluation might suppress a call to <code>__nonzero__</code> or <code>__bool__</code>.</p>
<pre><code>&gt;&gt;&gt; 0 and Test()
0
&gt;&gt;&gt; 1 or Test()
1
</code></pre>
<p>Another speciality to be aware of is that Python is trying to access <code>__len__</code> if <code>__nonzero__</code> / <code>__bool__</code> is not defined and treats the object as truthy if <code>__len__</code> returns a value other than <code>0</code>. If both methods are defined, <code>__nonzero__</code> / <code>__bool__</code> wins.</p>
<pre><code>&gt;&gt;&gt; class Test:
...     def __len__(self):
...         return 23
... 
&gt;&gt;&gt; Test() and True
True
&gt;&gt;&gt;
&gt;&gt;&gt; class Test:
...     def __len__(self):
...         return 23
...     def __bool__(self):
...         return False
... 
&gt;&gt;&gt; Test() and True
&lt;__main__.Test object at 0x7fc18b5e26d8&gt; # evaluation stops at Test() because the object is falsy
&gt;&gt;&gt; bool(Test())
False
</code></pre>
<blockquote>
<p>Is there any way i can have this return something other than a bool, like, say, a list of bools? </p>
</blockquote>
<p>Unfortunately, no. The <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer">documentation</a> states that the method <em>should</em> return <code>False</code> or <code>True</code> but in fact you get a <code>TypeError</code> if you let it return something else.</p>
<pre><code>&gt;&gt;&gt; class Test:
...     def __bool__(self):
...         return 1
... 
&gt;&gt;&gt; Test() and 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __bool__ should return bool, returned int
&gt;&gt;&gt; 
&gt;&gt;&gt; bool(Test())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __bool__ should return bool, returned int
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>and</code> operator converts the first operands to boolean using <code>__bool__</code>, and then does a predefined action to the booleans (if <code>first.__bool__()</code> is <code>True</code>, return second, else return first). There is no way to change this behavior.</p>
</div>
<span class="comment-copy">You can't, since this does not depend on the type of the operands, but the thruthiness.</span>
<span class="comment-copy">Is there any way i can have this return something other than a bool, like, say, a list of bools?</span>
<span class="comment-copy">@Dennis updated my answer. In short: no.</span>
<span class="comment-copy">Thanks for the clear answer!</span>
<span class="comment-copy">Actually <code>b.__bool__()</code> will never be called, I had a slight inaccuracy in my answer.</span>
<span class="comment-copy">@pycoder you actually say <i>"if <code>first.__bool__()</code> is <code>True</code>, return second"</i> but what is returned in this case, is the boolean of the second; not the second iteself.</span>
<span class="comment-copy">@ev <code>1 and "asdf" == "asdf"</code></span>
<span class="comment-copy">@pycoder Right.. I had <code>all()</code> in mind somehow.</span>
