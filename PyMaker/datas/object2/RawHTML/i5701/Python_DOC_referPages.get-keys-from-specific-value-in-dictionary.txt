<div class="post-text" itemprop="text">
<p><strong>How can I get all keys which contain the specific value in dictionary?</strong></p>
<blockquote>
<p>For Example:- This is dictionary which holds simple data.  </p>
</blockquote>
<pre><code>{'h':['123,'4'], 'm':['456':'4'], 'a':['123,'4']}
</code></pre>
<blockquote>
<p>If I enter a value of 4, prints all the keys which containing the number. <strong>This is the output.</strong></p>
</blockquote>
<pre><code>{'h', 'm', 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your result is a set, I would use a <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">set constructor</a>.</p>
<p>Since the value of your set depends on an iteration of your input data, I would pass a <a href="https://docs.python.org/3.6/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> to the set constructor.</p>
<pre><code>search_term = '4'
data = {'h':['123','4'], 'm':['456','4'], 'a':['123','4']}
result = set(k for k,v in data.items() if search_term in v)
assert result == {'h', 'm', 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>What about without loop ?</strong></p>
</blockquote>
<p>Everyone is going to give you loop soution , let's try something different :</p>
<p>data is:</p>
<pre><code>your_data = {'h':['123','4'], 'm':['456','4'], 'a':['123','4']}
</code></pre>
<blockquote>
<p>One line without loop:</p>
</blockquote>
<pre><code>print(set(filter(lambda y:y,map(lambda x:x if '4' in your_data.get(x) else None,your_data))))
</code></pre>
<p>output:</p>
<pre><code>{'a', 'm', 'h'}
</code></pre>
<blockquote>
<p>Best way is use a function :</p>
</blockquote>
<pre><code>def search_values(x,dict_data):
    final_list=[]
    for key,value in dict_data.items():
        if x in value:
            final_list.append(key)

    return set(final_list)

print(search_values('4',your_data))
</code></pre>
<p>output:</p>
<pre><code>{'a', 'm', 'h'}
</code></pre>
</div>
<span class="comment-copy">What have you tried, and what precisely is the problem with it? Also note that your output appears to be a <i>set</i>, which (like a dictionary) is not an ordered data structure - it's not clear whether you expect that behaviour.</span>
<span class="comment-copy">Looks like that output should be a list</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/7657457/finding-key-from-value-in-python-dictionary">Finding key from value in Python dictionary:</a></span>
<span class="comment-copy">@Tadhg: Not quite the same because that is looking for equality, whereas this is looking for containment.</span>
<span class="comment-copy">ok but the only thing that changes is using <code>in</code> instead of <code>==</code></span>
<span class="comment-copy">Since the elements of the set are keys from the dictionary, wouldn't a list be sufficient (since we know the elements are unique)?</span>
<span class="comment-copy">I would think so, yes. But the OP's question clearly displays a set as the result.</span>
<span class="comment-copy">@pault why would you prefer a list of unique elements over a set?</span>
<span class="comment-copy">@TadhgMcDonald-Jensen just asking. I initially thought there might have been some extra overhead for a set vs. a list, but that doesn't seem to be the case.</span>
<span class="comment-copy">your one-liner only works if all of the keys contain the search term, otherwise the result has <code>None</code> in it.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen I have fixed it. Take a look.</span>
