<div class="post-text" itemprop="text">
<p>I am learning Python3 and as I can see in the past, with Python2, it was possible to create a list of numbers with range() by just passing a single argument, which would be the <code>last number of list + 1</code> in the list:</p>
<pre><code>range(4) # == [0, 1, 2, 3]
</code></pre>
<p>and the <code>start</code> and <code>step</code> values were defaulted to 0 and 1. </p>
<p>But in Python3 for some reason, it is no longer possible to omit those 2 arguments and for the same result we would need to wrap the range() function with the list() function:</p>
<pre><code>range(0, 4, 1) # == range(0, 4)
range(4) # == range(0, 4)
list(range(4)) # == [0, 1, 2, 3]
</code></pre>
<p><strong>Question(s):</strong><br/>
What is the reason behind that? Why was the functionality changed this way? Is there a good reason for that?</p>
<p>P.S. or maybe I am doing something incorrectly. Here, I am talking about range() function in general, whether it is being used in for-loops, just to create a list or for any other purpose</p>
</div>
<div class="post-text" itemprop="text">
<p>You've unfortunately been misled by the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">repr</a> of range:</p>
<pre><code>&gt;&gt;&gt; range(4)
range(0, 4)
</code></pre>
<p>It is actually the same interface, but this is returning a lazily-generated <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a> now, as opposed to a list.  You may iterate a range instance to consume the values:</p>
<pre><code>&gt;&gt;&gt; list(range(4))
[0, 1, 2, 3]
</code></pre>
<p>See <a href="https://stackoverflow.com/q/19777612/674039">Python range() and zip() object type</a> for more details about this change.  </p>
</div>
<span class="comment-copy">It's nothing to do with which arguments you omit. <code>range(0,4,1)</code> and <code>range(4)</code> are still equivalent; they just don't produce a list any more.</span>
<span class="comment-copy">Are you sure you are getting <code>[0, 1, 2, 3]</code> in Python 3 for <code>range(0, 4, 1)</code>? If so, can you report the exact version?</span>
<span class="comment-copy">I've voted to close as "not reproducible". If anyone is able to reproduce the different behavior in Python 3 I can retract my vote.</span>
<span class="comment-copy">@ayhan thank you for this remark, I have edited the post</span>
<span class="comment-copy">The difference of <code>range</code> between P2 and P3 is well documented. What specifically is unclear? <code>range</code> in P3, as much as <code>xrange</code> in P2 takes the same arguments as P2 <code>range</code>. They just don't return a <code>list</code>.</span>
<span class="comment-copy">Are you seeing <code>[0, 1, 2, 3]</code> if you execute <code>range(0, 4, 1)</code>?</span>
<span class="comment-copy">very true but how does this answer the (confused) question? if it does, then it's a duplicate.</span>
<span class="comment-copy">It answers the question by indicating there was a false premise.</span>
<span class="comment-copy">I still don't agree: the question is confused. whatever.</span>
<span class="comment-copy">@wim Thank you!</span>
