<div class="post-text" itemprop="text">
<p>I would like to write a list of Python dictionaries into a file. However, I need the dictionaries (and lists within) to remain dictionaries, i.e. when I load the file for processing I want them to use dictionaries and not have to work with strings.</p>
<p>Here is my sample code which write the data as strings, is there a way to retain the origin Python data structures (in real code the list data has hundreds of dictionaries, each of which may have hundreds of lists as values). I cannot simple pickle the data, for a number of reasons (one of which is the file needs to be human readable).</p>
<pre><code>import csv
import pandas as pd

def write_csv_file(data, iteration):
    with open('%s.csv' % 'name', 'wb') as data_csv:
        writer_data = csv.writer(data_csv, delimiter=',')
        for d in data:
            writer_data.writerow([iteration] + [d])


data = [{'a':1, 'b':2}, {'e':[1], 'f':[2,10]}]
iteration = 1
write_csv_file(data, iteration)
</code></pre>
<p>At the moment I read the data file using pandas in the following manner to process the data.</p>
<pre><code>d = pd.read_csv('name.csv')
d = pd.DataFrame(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting with Python 2.6 you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">ast.literal_eval</a>.</p>
<pre><code>import ast
ast.literal_eval('{"a":1, "b":2, "c":3}')
{'a': 1, 'b': 2, 'c': 3}
</code></pre>
<p>If whole column of your pandas DataFrame is a dict, then you can save it to CSV normaly (with separator other than <code>,</code>) and then map this dictionary-like column strings into dictionaries:</p>
<pre><code>df['DICTIONARY_COLUMN'].map(ast.literal_eval)
</code></pre>
<hr/>
<p>Naturally you can ignore dataframe part - you can transform them also in loop or whatever way you like. Important parts are: <code>ast.literal_eval</code> and using non-comma separator (because you use commas in dict-like strings).</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>pickle</code> instead of CSV to write your data to a file <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">https://docs.python.org/3/library/pickle.html</a></p>
<pre><code>import pickle

def write_csv_file(data):

    with open('%s.pickle' % 'name', 'wb') as data_file:
          pickle.dump(data, data_file)
</code></pre>
<p>Pickle will correctly serialize and recover a whole host of data types, including date-times and most user-defined classes out of the box. </p>
<p>However, if you will need to to manually edit the files with third party tools, or want it to be human readable, it might not be the best choice.</p>
<p>If you only need numbers, None, Booleans, lists and dictionaries, and would prefer a human-readable text file, then JSON can be a good choice. Python's <code>json</code> module uses the same inteface as picle, with the <code>dump</code> and <code>load</code> callables to write and read to a file. On the code snippet above, just replace <code>pickle</code> by <code>json</code> and it will work the same with the prescribed data types. Moreover,check the docs so that the json serialization output is padded with nice indentation in order to be truly readable:  <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">https://docs.python.org/3/library/json.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you try to do is <a href="https://en.wikipedia.org/wiki/Serialization" rel="nofollow noreferrer">data serialization</a>. I think one of most common and well known serialization format is <a href="https://en.wikipedia.org/wiki/JSON" rel="nofollow noreferrer">JSON</a>. And there is a python module to read and write json files called <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer">json</a></p>
<p>Here is a sample function to write dump data into json file (similar to the one written by @jsbueno in another answer) </p>
<pre><code>import json

def write_json_file(data):
     with open('%s.json' % 'name', 'wb') as data_file:
          json.dump(data, data_file)
</code></pre>
</div>
<span class="comment-copy">That is <b>impossible</b>. Everything you <i>write to</i> or <i>read from</i> a file is a <code>string</code>. You will have to figure a clever way to go from <code>dict</code> to <code>string</code> and vice versa. Or use some kind of library.</span>
<span class="comment-copy">You need some form of serialisation, e.g. <code>pickle</code> or <code>json</code>.</span>
<span class="comment-copy">@Ev.Kounis that's a stretch. How do you define string? To me, it's a human readable sequence of characters. However, files deal with bytes. You can write any sequence of bytes to a file, for example a serialized dictionary created with <code>pickle</code>.</span>
<span class="comment-copy">Ev. Kounis: Everything you write or read to a file is a byte sequence, not a text string.  And Python have several ways to serialize and deserialize its data structures to byte sequences, which are clever enough.</span>
<span class="comment-copy">I need it to be human readable</span>
<span class="comment-copy">@user58925: Then, use JSON...</span>
