<div class="post-text" itemprop="text">
<p>According to a number of sources, including <a href="https://stackoverflow.com/q/660961/2988730">this question</a>, passing a runnable as the <code>target</code> parameter in <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer"><code>__init__</code></a> (with or without <code>args</code> and <code>kwargs</code>) is preferable to extending the <code>Thread</code> class.</p>
<p>If I create a runnable, how can I pass the thread it is running on as <code>self</code> to it without extending the <code>Thread</code> class? For example, the following would work fine:</p>
<pre><code>class MyTask(Thread):
    def run(self):
        print(self.name)
MyTask().start()
</code></pre>
<p>However, I can't see a good way to get this version to work:</p>
<pre><code>def my_task(t):
    print(t.name)
Thread(target=my_task, args=(), kwargs={}).start()
</code></pre>
<p>This question is a followup to <a href="https://stackoverflow.com/q/47912701/2988730">Python - How can I implement a 'stoppable' thread?</a>, which I answered, but possibly incompletely.</p>
<p><strong>Update</strong></p>
<p>I've thought of a hack to do this using <a href="https://docs.python.org/3/library/threading.html#threading.current_thread" rel="nofollow noreferrer"><code>current_thread()</code></a>:</p>
<pre><code>def my_task():
    print(current_thread().name)
Thread(target=my_task).start()
</code></pre>
<p>Problem: calling a function to get a parameter that should ideally be passed in.</p>
<p><strong>Update #2</strong></p>
<p>I have found an even hackier solution that makes <code>current_thread</code> seem much more attractive:</p>
<pre><code>class ThreadWithSelf(Thread):
    def __init__(self, **kwargs):
        args = kwargs.get('args', ())
        args = (self,) + tuple(args)
        kwargs[args] = args
        super().__init__(**kwargs)
ThreadWithSelf(target=my_task).start()
</code></pre>
<p>Besides being incredibly ugly (e.g. by <em>forcing</em> the user to use keywords only, even if that is the recommended way in the documentation), this completely defeats the purpose of not extending <code>Thread</code>.</p>
<p><strong>Update #3</strong></p>
<p>Another ridiculous (and unsafe) solution: to pass in a mutable object via <code>args</code> and to update it afterwards:</p>
<pre><code>def my_task(t):
    print(t[0].name)
container = []
t = Thread(target=my_task, args=(container,))
container[0] = t
t.start()
</code></pre>
<p>To avoid synchronization issues, you could kick it up a notch and implement another layer of ridiculousness:</p>
<pre><code> def my_task(t, i):
     print(t[i].name)
 container = []
 container[0] = Thread(target=my_task, args=(container, 0))
 container[1] = Thread(target=my_task, args=(container, 1))
 for t in container:
     t.start()
</code></pre>
<p>I am still looking for a legitimate answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like your goal is to get access to the thread currently executing a task from within the task itself. You can't add the thread as an argument to the <code>threading.Thread</code> constructor, because it's not yet constructed. I think there are two real options. </p>
<ol>
<li><p>If your task runs many times, potentially on many different threads, I think the best option is to use <a href="https://docs.python.org/3/library/threading.html?highlight=current_thread#threading.current_thread" rel="nofollow noreferrer"><code>threading.current_thread()</code></a> from within the task. This gives you access directly to the thread object, with which you can do whatever you want. This seems to be exactly the kind of use-case this function was designed for.</p></li>
<li><p>On the other hand, if your goal is implement a thread with some special characteristics, the natural choice is to subclass <code>threading.Thread</code>, implementing whatever extended behavior you wish. </p></li>
</ol>
<p>Also, as you noted in your comment, <code>insinstance(current_thread(), ThreadSubclass)</code> will return <code>True</code>, meaning you can use both options and be assured that your task will have access to whatever extra behavior you've implemented in your subclass.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a mutable object (like a <code>list</code>) as an argument to your thread and populate it after creation, but before running:</p>
<pre><code>def my_task(l):
    t = l[0]
    print(t.name)


mutable_list = []
thread = threading.Thread(target=my_task, args=(mutable_list,), kwargs={})
mutable_list.append(thread)
thread.start()
thread.join()
</code></pre>
<p>You get:</p>
<pre><code>Thread-1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest and most readable answer here is: use <code>current_thread()</code>. You can use various weird ways to pass the thread as a parameter, but there's no good reason for that. Calling <code>current_thread()</code> is the standard approach which is shorter than all the alternatives and will not confuse other developers. Don't try to overthink/overengineer this:</p>
<pre><code>def runnable():
    thread = threading.current_thread()

Thread(target=runnable).start()
</code></pre>
<p>If you want to hide it a bit and change for aesthetic reasons, you can try:</p>
<pre><code>def with_current_thread(f):
    return f(threading.current_thread())

@with_current_thread
def runnable(thread):
    print(thread.name)

Thread(target=runnable).start()
</code></pre>
<p>If this is not good enough, you may get better answers by describing why you think the parameter passing is better / more correct for your use case.</p>
</div>
<span class="comment-copy">I was just about to answer using <code>current_thread()</code>. Why does that not work for you? I don't quite understand the "problem" you describe.</span>
<span class="comment-copy">@bnaecker. I would like to be able to pass in the parameter when the task is called by the thread. I can't seem to get around the chicken or the egg problem here, where the thread has to exist to be able to be present in <code>args</code>.</span>
<span class="comment-copy">What parameter are you trying to pass? Can it not be passed using either the <code>args</code> or <code>kwargs</code> keywords to the <code>Thread</code> constructor?</span>
<span class="comment-copy">@LaurentLAPORTE. It could, but you can't pass the object you are constructing to its own constructor. Well, you can and do, but I can't make it appear in an argument other than <code>self</code>. That is the problem I am trying to overcome. I don't know how to pass in <code>t</code> effectively.</span>
<span class="comment-copy">As you said, you can't pass the thread object as an argument to the target. I don't see why it's hacky at all to use <code>current_thread()</code>. This is exactly what it's designed for. Or just extend <code>Thread</code>, that seems perfectly legitimate to me too. You want to add functionality to a class, which is a pretty good operational definition of a subclass.</span>
<span class="comment-copy">This presents synchronization problems. You need to protect <code>mutable_list</code> with a lock of some kind.</span>
<span class="comment-copy">Thought of that as you were writing it. +1 for creativity, but this is the least safe solution so far.</span>
<span class="comment-copy">@bnaecker. You could use the list as a list and set the thread object to an index that you also pass in via <code>args</code> :)</span>
<span class="comment-copy">@bnaecker: This is perfectly safe; the child thread isn't launched until after the list is altered. Hacky, yes, but still safe.</span>
<span class="comment-copy">@bnaecker. I've added a sample of what I mean to my question.</span>
<span class="comment-copy">Nice use of decorator. Hadn't thought of that.</span>
<span class="comment-copy">As a fan of the film Idiocracy, I liked it better before the edit.</span>
