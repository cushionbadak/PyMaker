<div class="post-text" itemprop="text">
<p>For example, I understand <code>float</code> is usually represented by a C <code>double</code>, and integers have unlimited precision, per the <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">docs</a>. <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html" rel="nofollow noreferrer">NumPy</a> of course offers more specific types. Does, for example, the type of <code>float</code> in NumPy in any way impact the number's precision in memory? Or are numbers for various types stored with the same precision, and the type just implements the number differently at a higher level?</p>
</div>
<div class="post-text" itemprop="text">
<p>The above comment is completely right and also mentions some form of checking.</p>
<p>But let's do some tiny demo where we <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.nbytes.html#numpy.ndarray.nbytes" rel="nofollow noreferrer">read out</a> the consumed memory:</p>
<pre><code>import numpy as np

a = np.array([1,2,3], dtype=float)
print(a.nbytes)
b = np.array([1,2,3], dtype=np.float32)
print(b.nbytes)
c = np.array([1,2,3], dtype=np.longfloat)  # this one: OS/Build-dependent
print(c.nbytes)
</code></pre>
<p>Out:</p>
<pre><code>24
12
48
</code></pre>
<p>You can also read out the size-per-item:</p>
<pre><code>c.itemsize
# 16
</code></pre>
<p>In general this is quite intuitive for most types if you know some C/C++-types, with one exception: bool will take a full byte for each entry (despite being a bit!), which is also documented in the links below!</p>
<p>The most import doc-entry for this is probably <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.types.html" rel="nofollow noreferrer">Data types</a> for the type-overview and <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.ndarray.html" rel="nofollow noreferrer">ndarray</a> for attributes you can query.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note, you can see this for yourself by modifying the underlying memory, since <code>numpy</code> arrays implement the buffer protocol, we can create a <code>memoryview</code>:</p>
<pre><code>&gt;&gt;&gt; arr32 = np.array([1,2,3], dtype=np.int32)
&gt;&gt;&gt; arr64 = np.array([1,2,3], dtype=np.int64)
&gt;&gt;&gt; arr32
array([1, 2, 3], dtype=int32)
&gt;&gt;&gt; arr64
array([1, 2, 3])
&gt;&gt;&gt; buff32 = memoryview(arr32)
&gt;&gt;&gt; buff64 = memoryview(arr64)
</code></pre>
<p>Now, let's <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow noreferrer">cast the memory to unsigned char type</a></p>
<pre><code>&gt;&gt;&gt; casted32 = buff32.cast('B')
&gt;&gt;&gt; casted64 = buff64.cast('B')
&gt;&gt;&gt; list(casted32)
[1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0]
&gt;&gt;&gt; list(casted64)
[1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0]
</code></pre>
<p>Looks like it's actually different sizes in-memory. Look what I can do!:</p>
<pre><code>&gt;&gt;&gt; casted32[1] = 1
&gt;&gt;&gt; casted64[2] = 1
&gt;&gt;&gt; arr32
array([257,   2,   3], dtype=int32)
&gt;&gt;&gt; arr64
array([65537,     2,     3])
</code></pre>
</div>
<span class="comment-copy">Yes, absolutely. <code>numpy</code> types correspond to actual primitive numeric types that are stored in primitive arrays. You can check this yourself by looking at the bytes on the underlying buffer of any given numpy array.</span>
<span class="comment-copy">Note also, numpy supports <i>structured arrays</i>, so arrays of c-like structs! It gives you a lot of powerful stuff if you like working with low-level data-types in a memory efficient manner. You can essentially think of <code>numpy</code> as an object-oriented wrapper around primitive C arrays implementing true multi-dimensional arrays...</span>
<span class="comment-copy">@juanpa.arrivillaga Fascinating stuff. As a fan of C this is very likely a deep rabbit hole. <a href="https://docs.scipy.org/doc/numpy-1.13.0/user/basics.rec.html" rel="nofollow noreferrer">Docs</a> for anyone interested.</span>
<span class="comment-copy">Yep. If you are familiar with C, then you should definitely check out the vanilla Python <code>struct</code> and <code>ctypes</code> modules.</span>
