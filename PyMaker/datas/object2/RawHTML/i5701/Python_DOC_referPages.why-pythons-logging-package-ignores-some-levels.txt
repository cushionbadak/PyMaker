<div class="post-text" itemprop="text">
<p><strong>Exposition:</strong></p>
<p>Using the logging module in a 3.6.3 Python there are some misunderstood issues.
At first, I create 2 logs with the standard config, without a name and level = 30, which is logging.WARNING.</p>
<p>As the docs said, the log object cames without handlers, I change the log level to 10 (logging.DEBUG) and when I'm going to print|log with INFO (which is level=20), first, being in level 10 (beneath info level) the info doesn't logs and, finally, the log hasn't got any handlers, but the doc of <a href="https://docs.python.org/3/library/logging.html?highlight=logging#module-logging" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.html?highlight=logging#module-logging</a> says :</p>
<blockquote>
<p>logging.basicConfig(**kwargs)Â¶ :</p>
<p>Does basic configuration for the logging system by creating a
  StreamHandler with a default Formatter and adding it to the root
  logger. The functions debug(), info(), warning(), error() and
  critical() will call basicConfig() automatically if no handlers are
  defined for the root logger.</p>
</blockquote>
<p>So, my questions are, what I'm doing wrong? why is this caused? Can't I instantiate the log, set level for Root as log.setLevel(logging.INFO) and make log.info("poo") as I was doing until this issue?.</p>
<p><strong>Code:</strong></p>
<pre><code>    Python 3.6.3 (default, Oct 31 2017, 11:19:55)                       
Type 'copyright', 'credits' or 'license' for more information       
IPython 6.2.1 -- An enhanced Interactive Python. Type '?' for help. 

In [1]: import logging                                              

In [2]: log1 = logging.getLogger()                                  

In [3]: log2 = logging.getLogger()                                  

In [4]: log1.level                                                  
Out[4]: 30                                                          

In [5]: log1.hasHandlers()                                          
Out[5]: False                                                       

In [6]: log1.setLevel(10) ## logging.DEBUG == 10                    

In [7]: log1                                                        
Out[7]: &lt;RootLogger root (DEBUG)&gt;                                   

In [8]: log2                                                        
Out[8]: &lt;RootLogger root (DEBUG)&gt;                                   

In [9]: log1.info("asdad")                                          

In [10]: log2.info("asdad")                                         

In [11]: log1.hasHandlers()                                         
Out[11]: False                                                      

In [12]: logging.basicConfig(level=20) # logging.INFO == 20         

In [13]: log2                                                       
Out[13]: &lt;RootLogger root (INFO)&gt;                                   

In [14]: log2.info("ASDADA")                                        
INFO:root:ASDADA                                                    

In [15]: log1.hasHandlers()                                         
Out[15]: True                                                       

In [16]: log1.handlers == log2.handlers                             
Out[16]: True                                                       

In [17]: logging.basicConfig(level=10) # logging.DEBUG == 10        

In [18]: log2.info("ASDADA")                                        
INFO:root:ASDADA                                                    

In [19]: log1                                                       
Out[19]: &lt;RootLogger root (INFO)&gt;                                   

In [20]: log2                                                       
Out[20]: &lt;RootLogger root (INFO)&gt;                                   

In [21]: log1.level                                                 
Out[21]: 20  
</code></pre>
<p><strong>UPDATED:1</strong></p>
<pre><code>In [1]: import logging

In [2]: logging.getLogger().hasHandlers()
Out[2]: False

In [3]: logging.getLogger().level
Out[3]: 30

In [4]: logging.getLogger().info("papa")

In [5]: logging.getLogger().hasHandlers()
Out[5]: False

In [6]: logging.info("foo")

In [7]: logging.getLogger().hasHandlers()
Out[7]: True
</code></pre>
<p><strong>UPDATED:2</strong></p>
<pre><code>In [2]: import logging

In [3]: log = logging.getLogger()

In [4]: log.info("poo")

In [5]: log.warning("poo")
poo

In [6]: log.setLevel(logging.INFO)

In [7]: log.info("poo")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the quoted documentation is not clear enough. When you click on the listed functions on the docs webpage, they are linked to functions like <code>logging.info()</code>. You were using logger object methods with same names instead.</p>
<pre><code>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.getLogger().hasHandlers()
False
&gt;&gt;&gt; logging.warning("TEST")
WARNING:root:TEST
&gt;&gt;&gt; logging.getLogger().hasHandlers()
True
</code></pre>
</div>
<span class="comment-copy">By default, the root level is logging.WARNING (30) so anything with the same or greater level will be printed like in <b>UPDATE:1</b>  But what I was asking is that when I change the level to a smaller level than logging.WARNING, if there is no previous basicConfig, the setLevel method doesn't work with Logger objects. I see that like in the <b>UPDATE:2</b>, calling logging.info method does the trick, but what I want is a bunch of Loggers with the same name which shares their config, but when I'm working with Logger objects the situation is this:</span>
<span class="comment-copy">@PurpleZooL I'm afraid I do not fully understand your comment. There are now many lines of code in your question, pelase state which statement behave differently as you expected.</span>
<span class="comment-copy">@PurpleZooL You say "what I want is a bunch of Loggers with the same name". That doesn't make sense, because loggers are singletons. You can't  create multiple loggers using <code>logging.getLogger(name)</code>, as for a given name you will always get the same <code>Logger</code> instance back from <code>getLogger()</code>.</span>
