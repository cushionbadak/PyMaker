<div class="post-text" itemprop="text">
<p>I am currently writing an audio playout system using python3 and afplay. I have run into a problem where I cannot get it to automatically go to the next song in the playlist, whilst still allowing for user control.</p>
<pre><code>for i in range(metadata["length"] - start):
        i += start

        curr = songs[i]
        play(directory + curr)

        paused_bool = False

        while True:
            clear()

            print("Currently playing track #" + str(i+1) + ", called '" + curr + "', from playlist '" + metadata["name"] + "'.")
            command = input("What would you like to do? 'play', 'stop/exit', 'pause', or 'skip/next': ")

            if command == "play" or command == "pl":
                if not paused_bool:
                    print("It is already playing.")

                else:
                    play(directory + curr)


            elif command == "stop" or command == "st" or command == "quit" or command == "q" or command == "exit":
                stop()
                return

            elif command == "pause" or command == "p" or command == "pa":
                if paused_bool:
                    print("The audio shall remain paused.")

                paused_bool = True
                stop()

            elif command == "move the hell on" or command == "skip" or command == "next" or command == "n" or command == "s" or command == "":
                stop()
                break


            clear()
</code></pre>
<p>Above is the code that plays each song inside a folder. I want to be able to manually go to the next song using the "next" command, but also have it automatically go to the next after some time has passed, specifically the length of the song.</p>
<p>I have tried using the <code>threading</code> package, but I then run into a problem when I can't break the while loop from a function:</p>
<pre><code>for i in range(metadata["length"] - start):
        i += start

        curr = songs[i]
        play(directory + curr)

        paused_bool = False

        while True:
            clear()

            def auto():
                time.sleep( length( curr_song ) )
                stop() # stop() &amp; break goes to the next song
                break

            thread = Thread(target = auto, args = [])
            thread.start()

            print("Currently playing track #" + str(i+1) + ", called '" + curr + "', from playlist '" + metadata["name"] + "'.")
            command = input("What would you like to do? 'play', 'stop/exit', 'pause', or 'skip/next': ")

            if command == "play" or command == "pl":
                if not paused_bool:
                    print("It is already playing.")

                else:
                    play(directory + curr)


            elif command == "stop" or command == "st" or command == "quit" or command == "q" or command == "exit":
                stop()
                return

            elif command == "pause" or command == "p" or command == "pa":
                if paused_bool:
                    print("The audio shall remain paused.")

                paused_bool = True
                stop()

            elif command == "move the hell on" or command == "skip" or command == "next" or command == "n" or command == "s" or command == "":
                stop()
                break


            clear()
</code></pre>
<p>I apologise that the question is incredibly convuluted, but any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer"><code>scheduler</code></a>.
It would change somewhat the logic of your code, but it would likely be more functional.</p>
<p>You would, by default, schedule an event for playing the next song (use <code>enter</code> or <code>enterabs</code>). You could get the running time of the current song so you know when to schedule the next one.
If "next" is selected, you would <code>cancel</code> the previous event and schedule two others: 1) a new one for immediate execution, play the next song, 2) play the following song.</p>
</div>
<span class="comment-copy">You say you want to be able to: 1) manually go to the next song using the "next" command, but also 2) have it automatically go to the next song. Did any of the two actions work, with any of the two codes you posted?</span>
<span class="comment-copy">@sancho.s No, none of the above codes worked. The second one doesn't work because break doesn't propagate, and it says 'break is undefined'. However, typing "next" or "skip" does work.</span>
<span class="comment-copy">@sancho.s Unfortunately, I am using python3</span>
<span class="comment-copy">So action 1 worked with code 2, but action 2 did not? What about code 1?</span>
<span class="comment-copy">You may check <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer">docs.python.org/3/library/sched.html</a></span>
