<div class="post-text" itemprop="text">
<p>In Python 3 I have a tuple: </p>
<pre><code>a = ('aa', 'bb', 'cc', '|', 'dd', 'ee', 'ff')
</code></pre>
<p>I want to split the tuple into two tuples. The tuples must be divided at the <code>|</code>. The index of <code>|</code> is not static.
Expected result: </p>
<pre><code>a = ('aa', 'bb', 'cc',)
b = ('dd', 'ee', 'ff',)
</code></pre>
<p>What's the most efficient way to split a tuple in two using a divider?</p>
<p>I know tuples are immutable, but circumstances require me to be a little pragmatic. </p>
<p><strong>Edit:</strong>
In my case, there will be 0 or 1 separator (<code>|</code>).
The data in the tuple will have a length of more than 1. </p>
</div>
<div class="post-text" itemprop="text">
<p>As suggested in comments, you could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to subdivide the tuple into "not a separator" and "separator" groups and then pick those groups that are not separators. This works for arbitrary numbers of segments, but can also be unpacked into two variables if you know to have exactly two groups.</p>
<pre><code>&gt;&gt;&gt; a = ('a', 'b', 'c', '|', 'd', 'e', 'f', '|', 'g', 'h', 'i')
&gt;&gt;&gt; [tuple(g) for k, g in itertools.groupby(a, key='|'.__eq__) if not k]
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
</code></pre>
<p>This could also be generalized to allow for <em>different</em> separators, using e.g. <code>groupby(a, key='|-'.__contains__)</code>.</p>
<hr/>
<p>Regarding comments: The time complexity of this should be O(n), just as when using <code>index</code>, which also is the best you can expect if you don't know where to split and the tuple is not ordered in any way. Note, however, that <code>groupby</code> presents some overhead which makes this solution about 4-5 times <em>slower</em> than using <strike><code>index</code></strike> tuple slicing. It's still more versatile and easier applicable for unknown numbers of groups, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can find the '|' using <code>index</code>, and you can slice the tuple using slices. </p>
<pre><code>a = ('a', 'b', 'c', '|', 'd', 'e', 'f')
i = a.index('|')
a,b = a[:i],a[i+1:]
</code></pre>
</div>
<span class="comment-copy">What have you tried? What if the separator occurs multiple times? Or not at all?</span>
<span class="comment-copy">Also tuples aren't so much "meant to be" immutable, as... actually immutable.</span>
<span class="comment-copy">Hint: <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a></span>
<span class="comment-copy">@Vingtoft What do you mean, "O(n) is not fast"? It's obviously the best possible.</span>
<span class="comment-copy">@Vingtoft I think you misunderstood me, I said <i>"It's just strange the OP is asking for more advanced methods, <b>but hasn't shown the most straightforward approach possible</b>"</i>. I also did not say that asking for more advanced solutions is bad, just wondering why you didn't post your attempted solution to begin with. This shows that you've put effort into the problem beforehand, instead of just asking people to write code for you. This would also be helpful for users answering to compare the efficiency between the <b>your</b> approach and a <b>library function</b> approach.</span>
<span class="comment-copy">The best part about this is, it works for 0, 1, or a million separators.</span>
<span class="comment-copy">Do you really think that's "the most efficient way"?</span>
<span class="comment-copy">@StefanPochmann I did not time it, but I don't see a real problem with that. It may be slower than calling <code>index</code>, as this will always scan the <i>entire</i> list for more occurrences of the separator. If you have a better idea, please suggest.</span>
<span class="comment-copy">@tobias_k Nice answer, Do you know what the time complexity of this is?</span>
<span class="comment-copy">@RoadRunner Time complexity should be O(n), same as using <code>index</code>, but seemingly with some overhead.</span>
<span class="comment-copy">Can you generalise this for multiple separators? Or not at all? This will fail for the latter case.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ The OP specifically wants to split a tuple "in two"</span>
<span class="comment-copy">Maybe... but this won't solve anything besides OP's problem. If you're fine with that, then so be it.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ code can be repeated while separatot is present in b string. Does it a problem?</span>
<span class="comment-copy">@splash58 yes, it is a problem.</span>
