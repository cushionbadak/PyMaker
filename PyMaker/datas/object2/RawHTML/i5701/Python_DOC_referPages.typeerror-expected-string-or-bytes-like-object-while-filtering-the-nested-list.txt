<div class="post-text" itemprop="text">
<p>I have this nested list of strings which is in it's final stage of cleaning. I want to replace the non letters in the nested list with spaces or create a new list without the non-letters. Here is my list:</p>
<pre><code>list = [['hello', 'mr.', 'smith', ',', 'how', 'are', 'you', 'doing', 'today', '?'], ['the', 'weather', 'is', 'great', ',', 'and', 'python', 'is', 'awesome', '.'], ['the', 'sky', 'is', 'pinkish-blue', '.'], ['you', 'should', "n't", 'eat', 'cardboard', '.']]
</code></pre>
<p>And this is the pattern that I want to use in order to clean it all </p>
<pre><code>pattern = re.compile(r'\W+')
newlist = list(filter(pattern.search, list))
print(newlist)
</code></pre>
<p>the code doesn't work and this is the error that I get: </p>
<pre><code>Traceback (most recent call last):
File "/Users/art/Desktop/TxtProcessing/regexp", line 28, in &lt;module&gt;
newlist = [list(filter(pattern.search, list))]
TypeError: expected string or bytes-like object
</code></pre>
<p>I understand that <code>list</code> is not a string but a list of lists of strings, how do I fix it?
Any help will be very much Appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to step deeper into your list</p>
<pre><code>import re

list_ = [['hello', 'mr.', 'smith', ',', 'how', 'are', 'you', 'doing', 'today', '?'], ['the', 'weather', 'is', 'great', ',', 'and', 'python', 'is', 'awesome', '.'], ['the', 'sky', 'is', 'pinkish-blue', '.'], ['you', 'should', "n't", 'eat', 'cardboard', '.']]

pattern = re.compile(r'\W+')

newlist_ = [item 
            for sublist_ in list_ 
            for item in sublist_ 
            if pattern.search(item)]

print(newlist_)
# ['mr.', ',', '?', ',', '.', 'pinkish-blue', '.', "n't", '.']
</code></pre>
<p>Additionally, you must not name your variables <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are attempting to pass a list to <code>re.search</code>, however, only strings are allowed since pattern matching is supposed to occur. Try looping over the list instead:</p>
<pre><code>import re
l = [['hello', 'mr.', 'smith', ',', 'how', 'are', 'you', 'doing', 'today', '?'], ['the', 'weather', 'is', 'great', ',', 'and', 'python', 'is', 'awesome', '.'], ['the', 'sky', 'is', 'pinkish-blue', '.'], ['you', 'should', "n't", 'eat', 'cardboard', '.']]
new_l = [[b for b in i if re.findall('^\w+$', b)] for i in l]
</code></pre>
<p>Also, note that your original variable name, <code>list</code>, shadows the builtin <code>list</code> function and in this case will assign the list contents to the attribute <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <em>shadowing a built-in name like <code>list</code></em> may lead to all sorts of troubles - choose your variable names carefully.</p>
<p>You don't actually need a regular expression here - there is a built-in <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer"><code>isalpha()</code> string method</a>:</p>
<blockquote>
<p>Return true if all characters in the string are alphabetic and there is at least one character, false otherwise. </p>
</blockquote>
<pre><code>In [1]: l = [['hello', 'mr.', 'smith', ',', 'how', 'are', 'you', 'doing', 'today', '?'], ['the', 'wea
   ...: ther', 'is', 'great', ',', 'and', 'python', 'is', 'awesome', '.'], ['the', 'sky', 'is', 'pink
   ...: ish-blue', '.'], ['you', 'should', "n't", 'eat', 'cardboard', '.']]

In [2]: [[item for item in sublist if item.isalpha()] for sublist in l]
Out[2]: 
[['hello', 'smith', 'how', 'are', 'you', 'doing', 'today'],
 ['the', 'weather', 'is', 'great', 'and', 'python', 'is', 'awesome'],
 ['the', 'sky', 'is'],
 ['you', 'should', 'eat', 'cardboard']]
</code></pre>
<hr/>
<p>Here is how you can apply the same filtering logic but using <code>map</code> and <code>filter</code> (you would need the help of <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code></a> as well):</p>
<pre><code>In [4]: from functools import partial

In [5]: for item in map(partial(filter, str.isalpha), l):
    ...:     print(list(item))

['hello', 'smith', 'how', 'are', 'you', 'doing', 'today']
['the', 'weather', 'is', 'great', 'and', 'python', 'is', 'awesome']
['the', 'sky', 'is']
['you', 'should', 'eat', 'cardboard']
</code></pre>
</div>
<span class="comment-copy">How did you get this list in the first place? You probably could've cleaned up  the non-alpha tokens when tokenizing the sentences and words.</span>
<span class="comment-copy">Never call your variables to builtin functions (<code>list</code>, <code>set</code>, <code>dict</code>, etc.).</span>
<span class="comment-copy">You can't do pattern.search on a list of lists.</span>
<span class="comment-copy">Try <code>[list(filter(pattern.search, sl)) for sl in your_list]</code> and DON'T name a variable <code>list</code> or you cannot then use that function.</span>
<span class="comment-copy">I changed the pattern to = re.compile(r'\w+') and got this output: ['hello', 'mr.', 'smith', 'how', 'are', 'you', 'doing', 'today', 'the', 'weather', 'is', 'great', 'and', 'python', 'is', 'awesome', 'the', 'sky', 'is', 'pinkish-blue', 'you', 'should', "n't", 'eat', 'cardboard']. My problem is with period in 'mr.', hyphen in 'pinkish-blue' and apostrophe in 'n't'. Wasn't it supposed to disappear?</span>
<span class="comment-copy">@Art: There is a difference between <code>re.search()</code> and <code>re.match()</code> !</span>
<span class="comment-copy"><code>re.findall()</code> would create an unnecessary list of matches - you probably want to use <code>re.search()</code> or <code>re.match()</code> instead?..</span>
<span class="comment-copy">I have tried this code [[item for item in sublist if item.isalpha()] for sublist in l] and it works perfectly but it leaves my text without 'Mr.' and without 'pinkish-blue'. I would like Mr. to stay but without '.' and pinkish blue without '-'.</span>
