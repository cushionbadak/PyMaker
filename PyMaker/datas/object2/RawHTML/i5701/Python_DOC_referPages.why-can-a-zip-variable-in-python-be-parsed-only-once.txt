<div class="post-text" itemprop="text">
<p>I seem to have found out a weird bug in Python and I do not know if it exists already or is it something wrong that I am doing. Please explain.</p>
<p>We know that we can zip two lists in python to combine them as tuples. We can again parse them easily. When I am trying to parse the same zipped variable more than once, Python doesnt seem to be doing that and it ends up giving empty lists []. The first time it will do it but more than once it wont.</p>
<p>Example:</p>
<pre><code>lis1=[1,2,3,4,5]
lis2=['a','b','a','b','a']
zip_variable=zip(lis1,lis2)
op1=[val2 for (val1,val2) in zip_variable if val1&lt;4]
op2=[val1 for (val1,val2) in zip_variable if val2=='a']
op3=[val1 for (val1,val2) in zip_variable if val2=='b']
print(op1,"\n",op2,"\n",op3)
</code></pre>
<p>Output:</p>
<pre><code>['a','b','a']
[]
[]
</code></pre>
<p>I have the solution to fix it which is by making multiple variables for the same zip i.e as below:</p>
<pre><code>lis1=[1,2,3,4,5]
lis2=['a','b','a','b','a']
zip_variable1=zip(lis1,lis2)
zip_variable2=zip(lis1,lis2)
zip_variable3=zip(lis1,lis2)
op1=[val2 for (val1,val2) in zip_variable1 if val1&lt;4]
op2=[val1 for (val1,val2) in zip_variable2 if val2=='a']
op3=[val1 for (val1,val2) in zip_variable3 if val2=='b']
print(op1,"\n",op2,"\n",op3)
</code></pre>
<p>Output:</p>
<pre><code>['a','b','a']
[1,3,5]
[2,4]
</code></pre>
<p>The solution is always possible if we dont care about memory.</p>
<p>But the main question why does this happen?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip()</code> returns an iterator in Python 3. It produces only one tuple at a time from the source iterables, as needed, and when those have been iterated over, <code>zip()</code> has nothing more to yield. This approach reduces memory needs and can improve performance as well (especially if you don't actually ever request all the zipped tuples).</p>
<p>If you need the same sequence again, either call <code>zip()</code> again, or convert <code>zip()</code> to a list like <code>list(zip(...))</code>. </p>
<p>You could also use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee()</code></a> to create "copies" of a <code>zip()</code> iterator. However, behind the scenes, this stores any items that haven't been requested by all iterators. If you're going to do that, you might as well just use a list to begin with.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because zip function returns an <a href="https://docs.python.org/3.5/glossary.html#term-iterator" rel="nofollow noreferrer">iterator</a>.
This kind of object can only be iterated once.</p>
<p>If you want to iterate multiple times the same zip I recomend you creating a list or a tuple from it (<code>list(zip(a, b))</code> or <code>tuple(zip(a, b))</code>)</p>
</div>
<span class="comment-copy">Because, as the docs say, <code>zip()</code> creates an iterator, not a new collection.</span>
<span class="comment-copy">Just so you know, parsing and iterating are completely different things.</span>
