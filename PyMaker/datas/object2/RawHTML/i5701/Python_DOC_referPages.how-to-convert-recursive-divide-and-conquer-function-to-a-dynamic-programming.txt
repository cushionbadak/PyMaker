<div class="post-text" itemprop="text">
<p>I am trying to write a decorator function which converts a pure recursive function with two arguments that uses a "divide and conquer" strategy to an equivalent but more efficient one using dynamic programming.
Note: it is designated to decorate two input functions.</p>
<p>So I am trying to memoize the values but I am not sure how to correctly implement it in the form of a decorator? Also how can it decorate two input functions?</p>
<p><strong><em>EDIT:</em></strong>
This is what I have managed to do:</p>
<pre><code>profile_results = {}
t = {}

 '''The profile function stores the following: the time taken by the function, the name of the function and the number of times it was called and stores these in the dictionary called *profile_results* '''

def profile(func):
    import time
    def wrapper(*args, **kwargs):
        wrapper.calls += 1
        name = func.__name__
        t1 = time.time()
        res = func(*args, **kwargs)
        t2 = time.time() - t1
        t = (t2)
        my_tuple = (t,wrapper.calls)
        profile_results[name] = my_tuple
        return res
    wrapper.calls = 0
    return wrapper

#the dynamic function is the more efficient one and it is a decorator
@profile
def dynamic(func):
    def wrapper(*args, **kwargs):
        if args in t:
            return t[args]
        else:
            res = func(*args, **kwargs)
            t[args] = res
            return res
    return wrapper

#regular recursive function
@dynamic
@profile
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)
</code></pre>
<p>This is what it prints out when I test it:</p>
<pre><code>factorial(5)
print(t)
print (profile_results)
</code></pre>
<p>Output: </p>
<pre><code>{(0,): 1, (1,): 1, (2,): 2, (3,): 6, (4,): 24, (5,): 120}
{'dynamic': (0.0, 1), 'factorial': (0.0, 6)}
</code></pre>
<p>The first output is correct but I am trying to profile it to see if the dynamic programming one is actually faster. However, it is showing the times as 0. Would I need to add a <em>time.sleep()</em> somewhere and where would I add it to correctly output the time (given that they are recursive functions)?</p>
<p>I am wondering if I am decorating it properly. I am trying to decorate the dynamic function which is a decorator as well. And I am trying to decorate the factorial function with both the dynamic and profile function.</p>
<p>Any help would be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>There's already a memoize / cache decorator in the standard library : <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">https://docs.python.org/3/library/functools.html#functools.lru_cache</a></p>
<p>Don't re-invent the wheel, but perhaps it is not suited to what you need.</p>
</div>
<span class="comment-copy">(1) <code>t</code> should be a global variable (or e.g bound to an object which refers to the current calculation). (2) <code>t</code> should be a dictionary. (3) In <code>wrapper</code> first check if key <code>args</code> is already contained in <code>t</code>. If so, just return the value, if not, call <code>func</code>. (4) <code>dynamic</code> should return the defined <code>wrapper</code> function</span>
