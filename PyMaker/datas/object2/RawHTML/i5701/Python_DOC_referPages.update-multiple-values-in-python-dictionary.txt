<div class="post-text" itemprop="text">
<p>Hi I am new to python and I am watching a lot of youtube videos to learn. I know how to update dictionary values individually. I want to update them all at once.</p>
<p>Example:</p>
<pre><code>students = {'Eric': 15, 'Bob': 13, 'Chris': 16, 'Min': 25} 
</code></pre>
<p>I want to update this to </p>
<pre><code>{'Eric': 16, 'Bob': 14, 'Chris': 17, 'Min': 26}.
</code></pre>
<p>Each person's age increased by 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>A one-liner:</p>
<pre><code>students = {key: students[key]+1 for key in students}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the dict.keys() functionality. Just tested, it works in Python 2 and 3.</p>
<pre><code>students = {'Eric': 15, 'Bob': 13, 'Chris': 16, 'Min': 25}
for key in students.keys():
    students[key] += 1
print(students)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Single liner with <code>dictionary comprehension</code>:</p>
<pre><code>{key:val+1 for key,val in students.items()}
</code></pre>
<p>#driver values:</p>
<pre><code>IN : students = {'Eric': 15, 'Bob': 13, 'Chris': 16, 'Min': 25}
OUT : {'Eric': 16, 'Bob': 14, 'Chris': 17, 'Min': 26}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can call function keys() to do what you try to do.</p>
<pre><code>for key in dict.keys():
  dict[key] += 1
</code></pre>
</div>
<span class="comment-copy">this is really trivial. Try a few things out. You will get it on your own. I would recreate the dictionary with a dict-comprehension</span>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update()</code></a></span>
<span class="comment-copy">@Ev. Kounis thanks for advise going though dict-comprehension videos now</span>
<span class="comment-copy">thank you so much this did the trick. and so simple</span>
<span class="comment-copy">This does create a <i>new</i> <code>dictionary</code> though, not change the original</span>
<span class="comment-copy">@joe No it doesn't...</span>
<span class="comment-copy">You don't need <code>students.keys()</code> to iterate over a <code>dict</code> - that's already the defaut, so all you need is <code>for key in students: ....</code></span>
<span class="comment-copy">@brunodesthuilliers: You are right, it is unnecessary. I was hoping that this way it is more clear to a programmer who is new to python.</span>
<span class="comment-copy">This does create a <i>new</i> <code>dictionary</code> though, not change the original</span>
<span class="comment-copy">After that its a simple matter of assigning the newly generated <code>dict</code> to the old one, or you can use <code>update()</code>. The heavy work is done.</span>
<span class="comment-copy">I know, but in terms of memory, creating a new dictionary isn't as efficient as modifying the original... Nevertheless, in this case, I would go for this solution as it is more compact so +1 <b>:)</b></span>
<span class="comment-copy">I would agree about the memory, but I prefer creating a new dictionary over modifying the old one, especially when iterating over it. Safer and faster code.</span>
<span class="comment-copy">"After that its a simple matter of assigning the newly generated dict to the old one" =&gt; beware that if some other name references <code>students</code>, rebinding it won't affect other names, so if you really want to <i>update</i> the dict you indeed need to use <code>studends.update({k:v+1 for k, v in students.items()})</code></span>
<span class="comment-copy"><code>.keys()</code> is the default. You can loop through the keys by just typing <code>for key in dict:</code>. <code>dict</code> is a bad variable name btw. It overrides the Python keyword.</span>
