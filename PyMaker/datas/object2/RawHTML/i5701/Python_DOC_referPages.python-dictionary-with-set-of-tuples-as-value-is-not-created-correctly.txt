<div class="post-text" itemprop="text">
<p>I have read <a href="https://stackoverflow.com/questions/21344938/creating-sets-of-tuples-in-python">this</a> but it does not seem to work for me -</p>
<pre><code>&gt;&gt;&gt; dict = {}
&gt;&gt;&gt; dict[ "a" ] = set(("1111","test1"))
&gt;&gt;&gt; dict
{'a': set(['1111', 'test1'])}
&gt;&gt;&gt; dict[ "a" ].add( ("2222","test2"))
&gt;&gt;&gt; dict
{'a': set(['1111', 'test1', ('2222', 'test2')])}
</code></pre>
<p>I was expecting also the first one to look like a tuple - why is that splitted?</p>
<p>I want when doing :</p>
<pre><code>&gt;&gt;&gt; for key,val_set in dict.items() :
...     for val in val_set :
...             print val
...
1111
test1
('2222', 'test2')
</code></pre>
<p>to have 2 items printed not three.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>set()</code> takes the values from <em>an iterable</em> and adds each value separately. You passed in a tuple, which is an iterable with two values.</p>
<p>If you wanted to add the <em>tuple itself</em>, you need to wrap that in an iterable, like a list:</p>
<pre><code>set([("1111","test1")])
</code></pre>
<p>In Python 3, you can instead use a set display to create a new set:</p>
<pre><code>{("1111","test1")}
</code></pre>
<p>A set display takes elements separated by commas, and <code>("1111", "test1")</code> is one tuple element here.</p>
<p>In the other post, the set was created with a set display (so <code>{tuple1, tuple2, etc.}</code>) and the answers used either an <code>itertools</code> function or a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="noreferrer"><em>generator expression</em></a> to produce the sequence of tuples for the <code>set()</code> function to process; a  both produce an iterable type.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have got your answer but I will advice you to use defaultdict instead. All these type of cases like this set([("1111","test1")]) are properly handled. You don't have to worry about initialize too. </p>
<p>Try This.</p>
<pre><code>from collections import defaultdict
s = defaultdict(set)
s["a"].add(("pw", "sq"));
s["a"].add(("wq", "qq"));
s["a"].add(("aa", "bb"));

for k, v in s.items():
   print (k)
   for g in v:
       print (g)
</code></pre>
<p>And please note this, I have assumed all your values opposite your keys are sets.
if this is not the case, go with the first one.</p>
</div>
<span class="comment-copy">The tuple is converted to a set. Wrap a list around it: <code>set([("1111","test1")])</code></span>
<span class="comment-copy">Did you mean <code>set([("1111","test1")])</code> perhaps?</span>
<span class="comment-copy">You have got your answer but I will advice you to use defaultdict(set). It's easy and real approach.</span>
