<div class="post-text" itemprop="text">
<p>In a shell script I have:     </p>
<pre><code>/usr/local/bin/pybot --variablefile variables.py:$var1:$var2 test_cases.tsv
</code></pre>
<p>inside <code>variables.py</code> how can I access <code>var1</code> and <code>var2</code> arguments? </p>
<p>I have tried: </p>
<pre><code>import sys
var1 = sys.argv[1]
var1 = sys.argv[2]
</code></pre>
<p>it seems like this doesn't work. </p>
</div>
<div class="post-text" itemprop="text">
<p>For you to access the variables, your variable file must define the function <code>get_variables</code>, which will be given the arguments passed from the command line. This function needs to return a dictionary where the keys are the robot variable names.</p>
<p>For example:</p>
<pre><code>def get_variables(arg1, arg2):
    variables = {
        "var1": arg1,
        "var2": arg2
    }
    return variables
</code></pre>
<p>If your variable file is based on a class, the class needs to have the <code>get_variables</code> method.</p>
<p>For example:</p>
<pre><code># variables.py
class variables(object):
    def get_variables(self, arg1, arg2):
        variables = {
            "var1": arg1,
            "var2": arg2
        }
        return variables
</code></pre>
<p>When you do the above, your test will have two variables set: <code>${var1}</code> and <code>${var2}</code> which will have the values that were passed via the <code>--variablefile</code> argument.</p>
<p>Here is a test that can be used to verify the above:</p>
<pre><code># example.robot
*** Test cases ***
Example
    should be equal  ${var1}  hello
    should be equal  ${var2}  world
</code></pre>
<p>Here is how to run the test in order for it to pass:</p>
<pre><code>$ var1=hello
$ var2=world
$ /usr/local/bin/pybot --variablefile variables.py:$var1:$var2 example.robot
</code></pre>
<p>Of course, <code>var1</code> and <code>var2</code> are completely arbitrary. You can pass raw strings, too:</p>
<pre><code>$ /usr/local/bin/pybot --variablefile variables.py:hello:world example.robot
</code></pre>
<p>Passing arguments is described in the user guide section titled <a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-variables-from-a-special-function" rel="nofollow noreferrer">Getting variables from a special function</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys</code> reads the arguments fron the command line, as they appears to it:</p>
<ul>
<li><code>sys.argv[0]</code> contains the script name</li>
<li><code>sys.argv[1]</code>, the first argument (whatever it is)</li>
<li><code>sys.argv[2]</code>, the second, and so on.</li>
</ul>
<p>You should use <code>argparse</code>, it helps to build comprehensive CLIs. <a href="https://docs.python.org/2.7/howto/argparse.html#id1" rel="nofollow noreferrer">A nice tutorial</a> exists on the Python website.</p>
</div>
<div class="post-text" itemprop="text">
<p>You seem to make assumptions about how the arguments are parsed which are not true.  Here's how these arguments are passed from the shell to Python:</p>
<ul>
<li><code>sys.argv[0]</code> is <code>/usr/local/bin/pybot</code></li>
<li><code>sys.argv[1]</code> is <code>--variablefile</code></li>
<li><code>sys.argv[2]</code> is <code>variables.py:$var1:$var2</code> where the values of the shell variables <code>var1</code> and <code>var2</code> are substituted.</li>
<li><code>sys.argv[n]</code> is <code>test_cases.tsv</code></li>
</ul>
<p>The last one is <code>[n]</code> because without quotes around the argument, <code>sys.argv[2]</code> might actually be split into multiple values.  For example, if <code>var1</code> contains <code>= foo * bar=</code> then actually</p>
<ul>
<li><code>sys.argv[2]</code> is <code>variables.py:=</code></li>
<li><code>sys.argv[3]</code> is <code>foo</code></li>
<li><code>sys.argv[4..n-2]</code> is a list of files in the current directory, and</li>
<li><code>sys.argv[n-1]</code> is <code>=bar:$var2</code> where similar further processing for the value of <code>var2</code> may take place.</li>
</ul>
<p>There are Python argument parsing modules which assign further semantics e.g. to arguments which start with a dash (these will be interpreted as options) but by itself, Python does no such thing.  If that's what you want, maybe look at <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> or one of its replacements; but you still need to understand how the basic mechanics work.  A common arrangement is to avoid internal structure in arguments, and instead require the user to pass each value as a separate argument -- so perhaps</p>
<pre><code>--variablefile variables.py --variablefile "$var1" --variablefile "$var2"
</code></pre>
<p>with quoting to prevent the shell from attempting to perform whitespace tokenization and wildcard expansion on the variable values, and then probably in your script an <code>argparse</code> definition which says to merge multiple option arguments into a list.</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('--variablefile', action='append')
</code></pre>
</div>
<span class="comment-copy">As an aside, you should make sure <code>/usr/local/bin</code> is in your <code>PATH</code> and not hard-code the path to <code>pybot</code> in the script.</span>
<span class="comment-copy">@tripleee: I think <i>should</i> is a bit strong. It's convenient, but it doesn't really affect the running of the command at all.</span>
<span class="comment-copy">It affects the usability of the script. A common technique is to put something in your personal <code>PATH</code> which shadows a command used by a system script in order to extend or debug it; hard-coding the path prevents that from working.</span>
<span class="comment-copy">I want to use the values of $var1 and $var2 inside the python file itself. Say if I call get_variables() function like this -&gt; vars = get_variables(?, ?) ... what argumetns should I pass to the function to get the values of $var1 and $var2 ?</span>
<span class="comment-copy"><i>"I want to use the values of $var1 and $var2 inside the python file itself."</i> - my code shows you how to use them. They are being used to create the dictionary, but you can use them any other way. There's nothing special about them. Whatever you pass on the command line become arguments to <code>get_variables</code>. It's not any more complicated than that.</span>
<span class="comment-copy">If I want to use values of dictionary, do I need to call the function or not? if not how can I access the dictionary values?</span>
<span class="comment-copy">@Rashid: you don't have to use the dictionary. Just use the variables. If you want the variables available to a test script, you have to return a dictionary.</span>
<span class="comment-copy">if you could show me how to use arg1, arg2 values outside of get_variable function, would be great. Thanks for the help</span>
<span class="comment-copy"><i>"You <b>should</b> use <code>argparse</code>"</i> is IMHO a bit too strong. It's part of the standard library and the OP should probably use <i>something like</i> it; but there is a reason there are many competing third-party replacements and add-ons -- <code>argparse</code> by itself is complex and clunky at the same time IMHO.</span>
<span class="comment-copy">You are right, @tripleee; <code>argparse</code> needs time to get understood. But, within the Python argument parsers, I know no package that equals it.</span>
<span class="comment-copy">It adds a lot of complexity to support use cases which were hard to cover with the old <code>optparse</code> but if that's not what you need, a much simpler library would be much easier to grasp and take into use. I'm hoping there will be a common and popular <code>argparse</code> wrapper for the simple use case of "I need a couple of <code>--option</code> arguments" but as of right now, I can't point to any good one.</span>
<span class="comment-copy">robot supports passing arguments to variable files. There's no need to use <code>sys.argv</code> and manually parse the values.</span>
