<div class="post-text" itemprop="text">
<p>This is my first question on this site.</p>
<p>First of all, I need to make a module with one function for python in C++, which must work with numpy, using <code>&lt;numpy/arrayobject.h&gt;</code>. This function takes one numpy array and returns two numpy arrays. All arrays are one-dimensional.</p>
<p>The first question is how to get the data from a numpy array? I want to collect the information from array in std::vector, so then I can easily work with it C++.</p>
<p>The second: am I right that function should return a tuple of arrays, then user of my module can write like this in python:
<code>arr1, arr2 = foo(arr)</code>
?
And how to return like this?</p>
<p>Thank you very much.</p>
</div>
<div class="post-text" itemprop="text">
<p>NumPy includes <a href="https://docs.scipy.org/doc/numpy/reference/c-api.array.html" rel="nofollow noreferrer">lots of functions and macros</a> that make it pretty easy to access the data of an <code>ndarray</code> object within a C or C++ extension. Given a 1D <code>ndarray</code> called <code>v</code>, one can access element <code>i</code> with <code>PyArray_GETPTR1(v, i)</code>. So if you want to copy each element in the array to a <code>std::vector</code> of the same type, you can iterate over each element and copy it, like so (I'm assuming an array of <code>double</code>s):</p>
<pre><code>npy_intp vsize = PyArray_SIZE(v);
std::vector&lt;double&gt; out(vsize);
for (int i = 0; i &lt; vsize; i++) {
    out[i] = *reinterpret_cast&lt;double*&gt;(PyArray_GETPTR1(v, i));
}
</code></pre>
<p>One could also do a bulk <code>memcpy</code>-like operation, but keep in mind that NumPy <code>ndarray</code>s may be mis-aligned for the data type, have non-native byte order, or other subtle attributes that make such copies less than desirable. But assuming that you are aware of these, one could do:</p>
<pre><code>npy_intp vsize = PyArray_SIZE(v);
std::vector&lt;double&gt; out(vsize);
std::memcpy(out.data(), PyArray_DATA(v), sizeof(double) * vsize);
</code></pre>
<p>Using either approach, <code>out</code> now contains a copy of the <code>ndarray</code>'s data, and you can manipulate it however you like. Keep in mind that, unless you really need the data as a <code>std::vector</code>, the NumPy C API may be perfectly fine to use in your extension as a way to access and manipulate the data. That is, unless you need to pass the data to some other function which <em>must</em> take a <code>std::vector</code> or you want to use C++ library code that relies on <code>std::vector</code>, I'd consider doing all your processing directly on the native array types.</p>
<p>As to your last question, one generally uses <a href="https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue" rel="nofollow noreferrer"><code>PyArg_BuildValue</code></a> to construct a tuple which is returned from your extension functions. Your tuple would just contain two <code>ndarray</code> objects.</p>
</div>
<span class="comment-copy">can you check <a href="https://stackoverflow.com/help/how-to-ask">stackoverflow.com/help/how-to-ask</a> for improve how to ask.</span>
<span class="comment-copy">Since you are C++, I would look into <a href="http://pybind11.readthedocs.io/en/stable/" rel="nofollow noreferrer">PyBind11</a>.</span>
<span class="comment-copy">Thank you a lot! So, I can also get information about the shape of a numpy array by calling the function <code>PyArray_GetArrayParamsFromObject</code>? And then I want returning object's shape will be the same</span>
<span class="comment-copy">@InFamousX That'll work just fine, but it's more common to use the macros <code>PyArray_NDIM()</code> and <code>PyArray_DIMS()</code>. The former function is more often used for converting a Python-native object (like a list-of-lists) to an <code>ndarray</code>.</span>
<span class="comment-copy">Sorry, but this cycle <code>for(int ...)</code> doesn't work properly, because I get from it only zeros.</span>
<span class="comment-copy">@InFamousX That loop should access the data fine, are you sure that the array itself is not all zeros?</span>
<span class="comment-copy">Thank you, I found another way to get the data. My mistake was that I didn't know that float in python is the same as double in c++. That's why I got nothing but zeros.</span>
