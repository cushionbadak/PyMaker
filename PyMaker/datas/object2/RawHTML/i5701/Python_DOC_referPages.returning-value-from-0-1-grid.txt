<div class="post-text" itemprop="text">
<p><strong>Hey there!</strong> 
I am new to Python and programming in general. I have found a way of printing a grid of random 0 and 1. I need to save these grids and to count the amount of 0's in them. This is what I have so far: (Im using Python 2.7)</p>
<pre><code>import random
foo = ['0', '0', '0', '1', '1']
x = random.choice(foo)
A = [[random.choice(foo), random.choice(foo), random.choice(foo), random.choice(foo)],
[random.choice(foo), random.choice(foo), random.choice(foo), random.choice(foo)],
        [random.choice(foo), random.choice(foo), random.choice(foo), random.choice(foo)],
        [random.choice(foo), random.choice(foo), random.choice(foo), random.choice(foo)],
        [random.choice(foo), random.choice(foo), random.choice(foo), random.choice(foo)]]


print('\n'.join([''.join(['{:4}'.format(item) for item in row]) 
          for row in A]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To count the amount of <code>'0'</code>s in your matrix, you could do:</p>
<pre><code>sum(sum(x == '0' for x in r) for r in A)
</code></pre>
<p>To generate the matrix, you can save yourself some code and do</p>
<pre><code>A = [[random.choice(foo) for _ in range(4)] for __ in range(5)]
</code></pre>
<p>If you want to store the string representation anyways, there's an even easier to read way:</p>
<pre><code>s = '\n'.join([''.join(['{:4}'.format(item) for item in row]) 
          for row in A])
print(s)
print(s.count("0"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To count the amount of 0s you can use this</p>
<pre><code>count0s = [item for sublist in A for item in sublist].count('0')
</code></pre>
<p>To store the grids you can use a list and append to it. Like this:</p>
<pre><code>gridList = []
grid = '\n'.join([''.join(['{:4}'.format(item) for item in row]) 
  for row in A])
gridList.append(grid)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i would recommend, to add a for-loop. To get the same results do</p>
<pre><code>for i in range(n):   
   A[i] = radom.choice(foo)   
</code></pre>
<p>n is the length of your Array
and to count add a variable berfore the loop, like</p>
<pre><code>countZeros =  0   
countOnes  = 0  
</code></pre>
<p>and in the loop add</p>
<pre><code>if  a == 0:   
    countZeros++  
else:   
    countOnes++  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, I'd suggest using actual <code>0</code> and <code>1</code> instead of <code>'0'</code> and <code>'1'</code>. Also, you can use list-multiplication for <code>foo</code> and list-comprehensions (but <em>not</em> list-multiplications!) for <code>A</code> to make the code a bit clearer. Then, you can just get the <code>sum</code> of <code>sum</code>s and subtract that from the total number of elements in <code>A</code>.</p>
<pre><code>&gt;&gt;&gt; foo = [0] * 3 + [1] * 2
&gt;&gt;&gt; A = [[random.choice(foo) for _ in range(4)] for _ in range(5)]
&gt;&gt;&gt; A
[[0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 1, 0], [1, 0, 1, 0]]
&gt;&gt;&gt; sum(map(len, A)) - sum(map(sum, A))
12
</code></pre>
<p>(Of course, if you know the dimensions of <code>A</code> you do not have to <code>sum</code> the <code>len</code>s.)</p>
<p>Or use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> (also works with strings):</p>
<pre><code>&gt;&gt;&gt; collections.Counter(x for a in A for x in a)
Counter({0: 12, 1: 8})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dear all sorry for the long wait! 
I had a friend help me and this what he came up with:</p>
<pre><code>##Printing the Grid##
import random
import numpy as np
from numpy import random as nprand

def create_matrix():
  # determine the random number of ones and zeros to be put into the lists
  c0_min = 20 # minimal number of zeros
  c0_var = 5 # range of possible additional zeros
  c0 = int(nprand.rand()*c0_var + c0_min) # count of zeros

  c1_min = 20 # ones
  c1_var = 20 
  c1 = int(nprand.rand()*c1_var + c1_min) # count of zeros

  # construct a long list with ones and zeros of random order
  # items
  items = [0,]*c0 + [1,]*c1
  random.shuffle(items)

  # determine the length of the rows 1-4
  # there is a minimal length + a variable length
  # len of rows
  lmin = 10
  rowcount = 4
  spacemax = 5

  # determine the number of characters that are freely assignable (total number minus minimal length)
  l_temp = c0+c1-lmin*rowcount # variable assignable characters

  # divide residual characters with respect to random weights among the rows
  l_weights = nprand.rand(4)
  l_weights = l_temp*l_weights/sum(l_weights)
  s_count = nprand.randint(0,spacemax,4)

  # calculate the final lengths of the rows
  r1 = lmin + int(l_weights[0])
  r2 = lmin + int(l_weights[1])
  r3 = lmin + int(l_weights[2])
  r4 = lmin + int(l_weights[3])

  # construct the strings by iterating the previously shuffled character list
  s1 = ''.join([str(i) for i in [' ', ]*s_count[0] + items[:r1]])
  s2 = ''.join([str(i) for i in [' ', ]*s_count[1] +  items[r1:(r1+r2)]])
  s3 = ''.join([str(i) for i in [' ', ]*s_count[2] +  items[(r1+r2):(r1+r2+r3)]])
  s4 = ''.join([str(i) for i in [' ', ]*s_count[3] +  items[(r1+r2+r3):]])

  # return row 1-4, number of zeros, number of ones.
  return (s1, s2, s3, s4, c0, c1)

m = create_matrix()
print m[0]
print m[1]
print m[2]
print m[3]
print m[4], m[5]
</code></pre>
</div>
<span class="comment-copy">What is your question? If you want people to give constructive criticism of this, Code Reviews is your place.</span>
<span class="comment-copy">Why not have <code>foo</code> be a list of <code>[0, 1]</code>?</span>
<span class="comment-copy">Tip: check out <code>for</code> loops</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ because they want <code>'0'</code> to have 60% probability.</span>
<span class="comment-copy">@COLDSPEED  Because i might need a certain proportion of 0 and 1s</span>
<span class="comment-copy">@L3viathan Ty that seems to work :)</span>
<span class="comment-copy">Thanksl! I am not as quick as you all. I will review all your options and try to use the best and post an update soon!</span>
<span class="comment-copy">Careful, incrementation doesn't work like that in Python.</span>
<span class="comment-copy">This is just invalid syntax.</span>
