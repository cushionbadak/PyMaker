<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1303347/getting-a-map-to-return-a-list-in-python-3-x">Getting a map() to return a list in Python 3.x</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>Why do I get in Python2</p>
<pre><code>&gt;&gt;&gt; map(max,[1,2],[3,1])
[3, 2]
</code></pre>
<p>and in Python3</p>
<pre><code>&gt;&gt;&gt; map(max,[1,2],[3,1])
&lt;map object at 0x10c2235f8&gt;
</code></pre>
<p>?</p>
<p>What should replace <code>map(max,[1,2],[3,1])</code> in Python3 ?</p>
<p>I read that one should use list comprehension in Python3 but </p>
<pre><code>&gt;&gt;&gt; [max(i,j) for i in [1,2] for j in [3,1]]
[3, 1, 3, 2]
</code></pre>
<p>does not give the desired result and neither do the variations that came to mind.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>Python2</code> returns a <code>List</code> for multiple return values.</p>
<p>From <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">Pydoc[2]</a>:</p>
<blockquote>
<p>If there are multiple arguments, map() returns a list consisting of
  tuples containing the corresponding items from all iterables (a kind
  of transpose operation). The iterable arguments may be a sequence or
  any iterable object; the result is always a list.</p>
</blockquote>
<p>Whereas <code>Python3</code> returns an <code>Iterable</code>.</p>
<p>From <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">Pydoc[3]</a>:</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable,
  yielding the results.</p>
</blockquote>
<hr/>
<p>So to get the <code>list</code> in <code>Python3</code>, just do :</p>
<pre><code>list(map(...))
</code></pre>
<p>Basically :</p>
<pre><code>&gt;&gt;&gt; list(map(max,[1,2],[3,1]))
=&gt; [3, 2]
</code></pre>
</div>
<span class="comment-copy">@Dark technically, not a generator, just an iterator.</span>
<span class="comment-copy">list-comp: <code>[max(i, j) for i, j in zip([1,2], [3,1])]</code>.</span>
<span class="comment-copy">@ekhumoro: thanks this is elegant. Do python programmers have an opinion on which of the two solutions (using list or using zip and comprehension) is more appropriate?</span>
<span class="comment-copy">@AlexanderKurz. There are probably SO questions that discuss the relative performance. Otherwise, it's really just a matter of personal taste, or house style (or even just "what looks right" in the current code context).</span>
<span class="comment-copy">thanks ... do python programmers have an opinion on which of the two solutions (using list or using zip and comprehension) is preferable?</span>
<span class="comment-copy">The above solution is the preffered way since you can use the iterable itself using <code>.next</code> instead of going for lists and also has shorter code and is easier to read.</span>
