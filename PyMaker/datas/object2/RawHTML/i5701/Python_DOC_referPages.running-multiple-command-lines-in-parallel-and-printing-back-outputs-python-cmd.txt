<div class="post-text" itemprop="text">
<p>I couldnt find any answer to this. 
One of the command lines is a call to an exe that its return value isn't relevant.
On the other hand, the output of the code is important to me.
I need to run this exe in parallel to another bat file I wrote, but I can't find a way to get the output and run it in parallel as well.
Is there a way in python/cmd to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>In batch files, you could use <code>start XYZ</code> to run stuff without blocking on it.  If you want to use python for it (which I advise over batch), use the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module:</p>
<pre><code>p1 = subprocess.Popen(["my.exe", "arg1", "arg2"])
p2 = subprocess.Popen(["cmd", "/c", "my.bat"])

p1.wait()
p2.wait()
</code></pre>
</div>
<span class="comment-copy">Amazing. Works well. Thank you!</span>
<span class="comment-copy">what does; the <code>start</code> or the <code>subprocess</code>?</span>
<span class="comment-copy">You can run a .bat or .cmd file directly. WinAPI <code>CreateProcess</code> executes it via the <code>%ComSpec%</code> shell, if defined, and defaults to cmd.exe otherwise. Also, the <code>subprocess.Popen</code> equivalent of CMD's <code>start</code> command also requires <code>creationflags=CREATE_NEW_CONSOLE | CREATE_NEW_PROCESS_GROUP</code>. Your current example is more like <code>start /b</code>.</span>
<span class="comment-copy">Thanks, @eryksun, I believe that OP indeed has enough with a console-less process.</span>
<span class="comment-copy">If the Python script isn't running via pythonw.exe (non-console), then as you've written it, if "my.exe" is a console process, it will interfere with the cmd.exe process that's running the batch script. Code defensively to launch my.exe as a parallel process in a separate console, which could be created with a hidden window (via <code>STARTUPINFO</code>) or without a window (<code>CREATE_NO_WINDOW</code> flag). These parameters are harmless if "my.exe" isn't a console process. Then let Windows default to <code>%ComSpec%</code> to run the batch, i.e. <code>subprocess.Popen(['my.bat'])</code>.</span>
