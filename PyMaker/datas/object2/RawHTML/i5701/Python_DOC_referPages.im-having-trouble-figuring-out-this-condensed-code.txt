<div class="post-text" itemprop="text">
<pre><code>def duplicate_count(s):
    return len([c for c in set(s.lower()) if s.lower().count(c)&gt;1])
</code></pre>
<p>I'm having difficulty understanding how this code works. I was doing a codewars challenge to return the number of elements with duplicates in a string. </p>
<p>eg. Asasd --&gt; 2</p>
<p>I came up with my own implmentation but I wasn't able to really understand what this code does. If anyone could point me in the direction, it would be much appreciated :)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is, first of all, a highly inefficient solution to the problem. But let's break it down:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#str.lower" rel="nofollow noreferrer"><code>s.lower()</code></a> would convert all the characters in a string to lower case:</p>
<pre><code>In [1]: s = "Hello, WORLD"

In [2]: s.lower()
Out[2]: 'hello, world'
</code></pre></li>
<li><p><code>set(s.lower())</code> would create a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> (make sure to read about what sets are) of characters from a string - eliminating all the duplicates:</p>
<pre><code>In [3]: set(s.lower())
Out[3]: {' ', ',', 'd', 'e', 'h', 'l', 'o', 'r', 'w'}
</code></pre></li>
<li><code>for c in set(s.lower())</code> iterates over every single character in a set we created above</li>
<li>for every character in this set, we apply this if condition: <code>if s.lower().count(c)&gt;1</code>. The <code>count(c)</code> here would count how many times <code>c</code> appears in the string. The <code>&gt;1</code> helps us to leave characters that are met more than 1 time in a string</li>
<li><code>[c for c in set(s.lower()) if s.lower().count(c)&gt;1]</code> is <em>called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a></em>. It is basically a short way of creating a list. Here, we are creating a list of characters that occur in a string more than one time. Check out <em><a href="https://stackoverflow.com/q/9061760/771848">this topic about how to verbalize and read the list comprehensions</a></em>.</li>
<li><code>len()</code> then just gets us the length of the list </li>
</ul>
<p>To summarize, you iterate over the unique characters in a given string and count which of them occur in a string more than one time.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>set(s.lower()) # gives unique elements in lower case
</code></pre>
<p>and </p>
<pre><code>s.lower().count(c)&gt;1 #checks if an element shows up more than once
</code></pre>
<p>All in all the function finds number of not unique elements in a string ,ignoring case. </p>
<p>I believe using <code>collections.Counter</code> is more efficient:</p>
<pre><code>In [7]: from collections import Counter

In [8]: sum(v &gt; 1 for v in Counter("Aabcc".lower()).values())

Out[8]: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def duplicate_count(s):

    result = []

    for c in set(s.lower()):
        if s.lower().count(c) &gt; 1:
            result.append(c)

    return len(result)
</code></pre>
</div>
<span class="comment-copy">Read about list comprehension in the docs</span>
<span class="comment-copy">You don't understand your own code?</span>
<span class="comment-copy">Might be worth replacing <code>(x.lower() for x in "Aabcc")</code> with <code>"Aabcc".lower()</code></span>
<span class="comment-copy">@JaredGoguen good point, fixed.</span>
