<div class="post-text" itemprop="text">
<p>I need a thread-safe (atomic?) data structure in Python that can ensure the following:</p>
<pre><code># visited : defaultdict()

if node not in visited:
    assert node not in visited
    visited[node] = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a high level programming language, Python is not particularly close to the processor that supports atomic operations like CAS.  In fact, the Python global interpreter lock prevents your threads from running at the same time.  This doesn't obviate the need for atomic operations of course (another thread could still be scheduled between the check and set) , but it does make Python look pretty unattractive for the CPU intensive applications that make atomic operations valuable.  </p>
<p>There's perhaps one way to do it; Python can integrate with c library files.  So you could write C to perform CAS operations, maybe.  I think it would still be subject to the GIL .</p>
<p>I usually use Python threads to handle concurrent blocking operations like parallelization of API calls.  In these cases other inter thread communication mechanisms make more sense than atomic operations on shared variables.  They're simpler to implement, easier to reason about, and, given the performance characteristics of Python, are fast enough.    </p>
</div>
<span class="comment-copy">What does the other branch look like? Why does <code>visited[node] = True</code> not work?</span>
<span class="comment-copy">Why do you query <code>visited</code> but update <code>visit</code>?</span>
<span class="comment-copy">Is it possible for the interpreter to context switch after the if statement but before visited[node]=True? That would allow another thread to enter the if statement.</span>
<span class="comment-copy"><code>with threading.Lock():</code></span>
<span class="comment-copy">Have you looked at <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault(key, default)</code></a>? I'm not sure, but it might be atomic because it's written in C, and the interpreter might not be able to interrupt it and release the GIL.</span>
