<div class="post-text" itemprop="text">
<p>I hope someone can answer this that has a good deep understanding of Python :)</p>
<p>Consider the following code:</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     pass
...
&gt;&gt;&gt; def __repr__(self):
...     return "A"
...
&gt;&gt;&gt; from types import MethodType
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a
&lt;__main__.A object at 0x00AC6990&gt;
&gt;&gt;&gt; repr(a)
'&lt;__main__.A object at 0x00AC6990&gt;'
&gt;&gt;&gt; setattr(a, "__repr__", MethodType(__repr__, a, a.__class__))
&gt;&gt;&gt; a
&lt;__main__.A object at 0x00AC6990&gt;
&gt;&gt;&gt; repr(a)
'&lt;__main__.A object at 0x00AC6990&gt;'
&gt;&gt;&gt;
</code></pre>
<p>Notice how repr(a) does not yield the expected result of "A" ?
I want to know why this is the case and if there is a way to achieve this...</p>
<p>I contrast, the following example works however (<em>Maybe because we're not trying to override a special method?</em>):</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     def foo(self):
...             return "foo"
...
&gt;&gt;&gt; def bar(self):
...     return "bar"
...
&gt;&gt;&gt; from types import MethodType
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.foo()
'foo'
&gt;&gt;&gt; setattr(a, "foo", MethodType(bar, a, a.__class__))
&gt;&gt;&gt; a.foo()
'bar'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't call the special methods, those with name surrounded by <code>__</code> on the instance, but only on the class, apparently to improve performance. So there's no way to override <code>__repr__()</code> directly on an instance and make it work. Instead, you need to do something like so:</p>
<pre><code>class A(object):
    def __repr__(self):
        return self._repr()
    def _repr(self):
        return object.__repr__(self)
</code></pre>
<p>Now you can override <code>__repr__()</code> on an instance by substituting <code>_repr()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="noreferrer">Special Method Lookup</a>:</p>
<blockquote>
<p>For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary … In addition to bypassing any instance attributes in the interest of correctness, implicit special method lookup generally also bypasses the <code>__getattribute__()</code> method even of the object’s metaclass</p>
</blockquote>
<p>(The part I've snipped out explains the rationale behind this, if you're interested in that.)</p>
<p>Python doesn't document exactly when an implementation should or shouldn't look up the method on the type; all it documents is, in effect, that implementations may or may not look at the instance for special method lookups, so you shouldn't count on either.</p>
<p>As you can guess from your test results, in the CPython implementation, <code>__repr__</code> is one of the functions looked up on the type.</p>
<hr/>
<p>Things are slightly different in 2.x, mostly because of the presence of classic classes, but as long as you're only creating new-style classes you can think of them as the same.</p>
<hr/>
<p>The most common reason people want to do this is to monkey-patch different instances of an object to do different things. You can't do that with special methods, so… what can you do? There's a clean solution, and a hacky solution.</p>
<p>The clean solution is to implement a special method on the class that just calls a regular method on the instance. Then you can monkey patch that regular method on each instance. For example:</p>
<pre><code>class C(object):
    def __repr__(self):
        return getattr(self, '_repr')()
    def _repr(self):
        return 'Boring: {}'.format(object.__repr__(self))

c = C()
def c_repr(self):
    return "It's-a me, c_repr: {}".format(object.__repr__(self))
c._repr = c_repr.__get__(c)
</code></pre>
<p>The hacky solution is to build a new subclass on the fly and re-class the object. I suspect anyone who really has a situation where this is a good idea will know how to implement it from that sentence, and anyone who doesn't know how to do so shouldn't be trying, so I'll leave it at that.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason for this is special methods (<code>__x__()</code>) are defined for the class, not the instance.</p>
<p>This makes sense when you think about <code>__new__()</code> - it would be impossible to call this on an instance as the instance doesn't exist when it's called.</p>
<p>So you can do this on the class  as a whole if you want to:</p>
<pre><code>&gt;&gt;&gt; A.__repr__ = __repr__
&gt;&gt;&gt; a
A
</code></pre>
<p>Or on an individual instance, as <a href="https://stackoverflow.com/a/10376655/722121">in kindall's answer</a>. (Note there is a lot of similarity here, but I thought my examples added enough to post this as well).</p>
</div>
<div class="post-text" itemprop="text">
<p>For new style classes, Python uses a special method lookup that bypasses instances.  Here an excerpt from <a href="http://hg.python.org/cpython/file/2.7/Objects/typeobject.c#l1164" rel="nofollow">the source</a>: </p>
<pre><code>  1164 /* Internal routines to do a method lookup in the type
  1165    without looking in the instance dictionary
  1166    (so we can't use PyObject_GetAttr) but still binding
  1167    it to the instance.  The arguments are the object,
  1168    the method name as a C string, and the address of a
  1169    static variable used to cache the interned Python string.
  1170 
  1171    Two variants:
  1172 
  1173    - lookup_maybe() returns NULL without raising an exception
  1174      when the _PyType_Lookup() call fails;
  1175 
  1176    - lookup_method() always raises an exception upon errors.
  1177 
  1178    - _PyObject_LookupSpecial() exported for the benefit of other places.
  1179 */
</code></pre>
<p>You can either change to an old-style class (don't inherit from <em>object</em>) or you can add dispatcher methods to the class (methods that forward lookups back to the instance).  For an example of instance dispatcher methods, see the recipe at <a href="http://code.activestate.com/recipes/578091" rel="nofollow">http://code.activestate.com/recipes/578091</a></p>
</div>
<span class="comment-copy">You'll probably get a far more enlightening response if you say what you're ultimately trying to achieve.</span>
<span class="comment-copy">For new-style classes, special methods are looked-up on the class rather than the instance.  See my answer below for more details and for some workarounds.</span>
<span class="comment-copy">I could not describe what I'm wanting to do in detail. Sorry. But in short, I'm trying to model a prototype OO model where I can do operators like: World = Object().clone().mixin(World); Where World is a class with a collection of methods that override/replace one in the Object.clone() instance.</span>
<span class="comment-copy">"Python doesn't call the special methods, those with name surrounded by __ on the instance, but only on the class, apparently to improve performance" &lt;-- Do you have a reference to this?</span>
<span class="comment-copy">See <a href="http://docs.python.org/reference/datamodel.html#special-method-lookup-for-new-style-classes" rel="nofollow noreferrer">this</a>. The rules are slightly relaxed on old-style classes, but you should use new-style classes, and in Python 3 they are the only kind anyway.</span>
<span class="comment-copy">It's not primarily to improve performance. As the docs say, "The rationale behind this behaviour lies with a number of special methods such as <code>__hash__()</code> and <code>__repr__()</code> that are implemented by all objects, including type objects. If the implicit lookup of these methods used the conventional lookup process, they would fail when invoked on the type object itself…" (However, the rationale for <code>__getattribute__</code> <i>also</i> being skippable <i>is</i> performance.)</span>
<span class="comment-copy">Also, "Python doesn't call the special methods…" isn't true. Python doesn't <i>guarantee</i> to call them. CPython has a specific list of cases where it skips normal lookup, but that list is implementation-specific, and not documented, so you shouldn't rely on it. Special methods may or may not be looked up on the instance, so make sure your code works either way.</span>
<span class="comment-copy">This is <b>not about performance</b>. Special methods are looked up on the type to make sure that both an instance and the type can support the special operation. For example, <i>class objects</i> are hashable. They have a <code>__hash__</code> method. If the class implements a <code>__hash__</code> method to make instances hashable, then that method would clash if <code>hash(ClassObject)</code> would look up the method directly on the class (which is itself an instance of a metatype).</span>
<span class="comment-copy">I think to work on 2.x, you may need to call <code>__get__(c, type(c))</code>, but I don't remember for sure, and don't have a working 2.x interpreter on this machine… Maybe it would be better to use <code>types.MethodType</code> instead?</span>
<span class="comment-copy">Is there a reason that you use <code>getattr(self, '_repr')()</code> instead of just <code>self._repr()</code>?</span>
<span class="comment-copy">AFAIK if I were to change to using Old-Style classes, this would not work for Python 3?</span>
