<div class="post-text" itemprop="text">
<p>Is there a better way to create a list or a numpy array from this <a href="https://drive.google.com/file/d/1BwmIoMM4eZGdedTaWrK6WSMhwdo4f1o3/view?usp=sharing" rel="nofollow noreferrer">csv file</a>?  What I'm asking is how to do it and parse more gracefully than I did in the code below.</p>
<pre><code>fname = open("Computers discovered recently by discovery method.csv").readlines()
lst = [elt.strip().split(",")[8:] for elt in fname if elt != "\n"][4:]

lst2 = []
for row in lst:
    print(row)
    if row[0].startswith("SMZ-") or row[0].startswith("MTR-"):
        lst2.append(row)

print(*lst2, sep = "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should never parse CSV structures manually unless you want to tackle all possible exceptions and CSV format oddities. Python has you covered in that regard with its <code>csv</code> module.</p>
<p>The main problem, in your case, stems from your data - there seems to be two different CSV structures in a single file so you first need to find where your second structure begins. Plus, from your code, it seems you want to filter out all columns before <code>Details_Table0_Netbios_Name0</code> and include only rows whose <code>Details_Table0_Netbios_Name0</code> starts with <code>SMZ-</code> or <code>MTR-</code>. So something like:</p>
<pre><code>import csv

with open("Computers discovered recently by discovery method.csv") as f: 
    reader = csv.reader(f)  # create a CSV reader
    for row in reader:  # skip the lines until we encounter the second CSV structure/header
        if row and row[0] == "Header_Table0_Netbios_Name0":
            break
    index = row.index("Details_Table0_Netbios_Name0")  # find where your columns begin
    result = []  # storage for the rows we're interested in
    for row in reader:  # read the rest of the CSV row by row
        if row and row[index][:4] in {"SMZ-", "MTR-"}:  # only include these rows
            result.append(row[index:])  # trim and append to the `result` list

print(result[10])  # etc.
# ['MTR-PC0BXQE6-LB', 'PR2', 'anisita', 'VALUEADDCO', 'VALUEADDCO', 'Heartbeat Discovery',
#  '07.12.2017 17:47:51', '13']
</code></pre>
<p>should do the trick.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always use <a href="https://pandas.pydata.org" rel="nofollow noreferrer">Pandas</a>. As an example,</p>
<pre><code>import pandas as pd
import numpy as np

df = pd.read_csv('pandas_dataframe_importing_csv/example.csv')
</code></pre>
<p>To convert it, you will have to convert it to your favorite numeric type. I guess you can write the whole thing in one line:</p>
<pre><code>result = numpy.array(list(df)).astype("float")
</code></pre>
<p>You can also do the following:</p>
<pre><code>from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use pandas and specify header column to make it work correctly on you sample file</p>
<pre><code>import pandas as pd

df = pd.read_csv('Computers discovered recently by discovery method.csv', header=2)
</code></pre>
<p>You can check your content using:</p>
<pre><code>&gt;&gt;&gt; df.head()
</code></pre>
<p>You can check headers using</p>
<pre><code>&gt;&gt;&gt; df.columns 
</code></pre>
<p>And to convert it to <code>numpy</code> array you can use</p>
<pre><code>&gt;&gt;&gt; np_arr = df.values
</code></pre>
<p>It comes with a lot of options to parse and read csv files. For more information please check the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer">docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what you want but try this</p>
<pre><code>import csv
with open("Computers discovered recently by discovery method.csv", 'r') as f:
    reader = csv.reader(f)
    ll = list(reader)

print (ll)
</code></pre>
<p>this should read the csv line by line and store it as a list </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Sample Code</strong></p>
<pre><code>import csv
csv_file = 'sample.csv'
with open(csv_file) as fh:
  reader = csv.reader(fh)
  for row in reader:
    print(row)
</code></pre>
<p><strong>sample.csv</strong></p>
<pre><code>name,age,salary
clado,20,25000
student,30,34000
sam,34,32000
</code></pre>
</div>
<span class="comment-copy">How about pandas dataframe?</span>
<span class="comment-copy">@Garbage I haven't learned them yet. Examples are welcome</span>
<span class="comment-copy">Thanks! Also, comments are very helpful</span>
<span class="comment-copy">to get the corresponding numpy array just do <code>result = df.values</code></span>
<span class="comment-copy">True, I added <code>astype()</code> In case he wants to do some edits.</span>
<span class="comment-copy">Thanks for the try :D There is a link to csv file in my first post. You can download and try your code on it. (spoiler alert: it won't work)</span>
<span class="comment-copy">@user2978216 Using the csv library is a better way than parsing the csv file yourself. The csv library supports common dialects as well as customized dialects if you need it too. <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">@user2978216 delete the first 3 lines of the csv and run it it'll work</span>
