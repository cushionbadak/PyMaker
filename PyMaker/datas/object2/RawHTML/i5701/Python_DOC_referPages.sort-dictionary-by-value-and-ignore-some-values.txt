<div class="post-text" itemprop="text">
<p>So there are two tasks that are to be performed simultaneously on a dictionary.</p>
<ol>
<li>Sort the dictionary and extract the top 10 keys along with their values</li>
<li>Ignore keys which have a certain value while reporting top 10</li>
</ol>
<p>For e.g.</p>
<pre><code>my_dict = { 'abc': 10, 'def':20, 'ghi':100, 'jkl':30, 'mno':101}
</code></pre>
<p>So, if I want top 3 while ignoring keys with value <code>100</code> and <code>101</code> is </p>
<pre><code>result_top3 = [ ('jkl',30), ('def',20), ('abc',10)]
</code></pre>
<p>Right now I am using the following :</p>
<pre><code>my_result = dict(Counter(my_dict).most_common()[:3])
</code></pre>
<p>but it has two problems:</p>
<ol>
<li>I don't know how to add a filter in my expression to ignore certain values</li>
<li>It returns a dictionary, in which the keys may be unsorted although they would be top 10 values.</li>
</ol>
<p>I was hoping if there was a way to do it in one go, or a more Pythonic and efficient way instead of doing it in 2 steps, like removing the keys I don't want and then sorting.</p>
<p><strong>EDIT</strong> : It is not necessary to sort the complete dictionary. I just need to extract the top 10 results along with their values.</p>
</div>
<div class="post-text" itemprop="text">
<p>to filter data</p>
<pre><code>[items for items in my_dict.items() if items[1] &lt; 100]
</code></pre>
<p>to sort dict by key value</p>
<pre><code>sorted(my_dict.items(), key=lambda x: -x[1])
</code></pre>
<p>and full your solution</p>
<pre><code>sorted([items for items in my_dict.items() if items[1] &lt; 100], key=lambda x: -x[1])[:3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do this-</p>
<pre><code>&gt;&gt;&gt; my_dict = { 'abc': 10, 'def':20, 'ghi':100, 'jkl':30, 'mno':101}
&gt;&gt;&gt; dict_tuple = my_dict.items()
&gt;&gt;&gt; print dict_tuple
[('jkl', 30), ('abc', 10), ('ghi', 100), ('def', 20), ('mno', 101)]
&gt;&gt;&gt; dict_tuple.sort(key=lambda x: x[1])
&gt;&gt;&gt; print dict_tuple
[('abc', 10), ('def', 20), ('jkl', 30), ('ghi', 100), ('mno', 101)]
 &gt;&gt;&gt; print dict(dict_tuple[:3])
 {'jkl': 30, 'abc': 10, 'def': 20}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Almost the same as @BearBrown's answer. But using built-in features and break it down, for doing it step-by-step:</p>
<pre><code>Python 3.6.3 (v3.6.3:2c5fed86e0, Oct  3 2017, 00:32:08)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.0.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: from collections import OrderedDict

In [2]: my_dict = { 'abc': 10, 'def':20, 'ghi':100, 'jkl':30, 'mno':101}
# filter values out, can be `if v &gt;= 100`(this is depends on condition)
In [3]: filtered_values = ((k, v) for k, v in my_dict.items() if v not in [100, 101])

In [4]: filtered_values
Out[4]: &lt;generator object &lt;genexpr&gt; at 0x1060a9ca8&gt;

In [5]: import operator
# sort by values(second element of key-value tuple) in reverse order
In [6]: top_three = sorted(filtered_values, key=operator.itemgetter(1), reverse=True)[:3]

In [7]: top_three
Out[7]: [('jkl', 30), ('def', 20), ('abc', 10)]

In [8]: OrderedDict(top_three)
Out[8]: OrderedDict([('jkl', 30), ('def', 20), ('abc', 10)])
</code></pre>
<p>In the end you will get <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>(<code>dict</code> that have order) as you wanted.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it stepwise:</p>
<pre><code>my_dict = { 'abc': 10, 'def':20, 'ghi':100, 'jkl':30, 'mno':101}

filterIt = [(x[1],x[0]) for x in my_dict.items() if x[1] not in [101,100]]

sortOfSorted = sorted(filterIt,  reverse = True)

print (my_dict)
print(filterIt)
print (sortOfSorted)
</code></pre>
<p>The result is a list of tuples with the "value" on <code>[0]</code> - no lambda needed for sorting that way as tuples get sorted by <code>[0]</code> first, then <code>[1]</code></p>
<p>Dictionarys like sets are inherently unordered. And to get the top 10 out of anything you need to sort all of the items to find the biggest ones.</p>
<p><strong>Output</strong>:</p>
<pre><code>{'jkl': 30, 'abc': 10, 'ghi': 100, 'def': 20, 'mno': 101}
[(30, 'jkl'), (10, 'abc'), (20, 'def')]
[(30, 'jkl'), (20, 'def'), (10, 'abc')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try:
<code>operator.itemgetter(1)</code> will sort dict by <code>value</code>; and <code>operator.itemgetter(0)</code> will sort dict by <code>key</code></p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; my_dict = { 'abc': 10, 'def':20, 'ghi':100, 'jkl':30, 'mno':101}
&gt;&gt;&gt; sorted_my_dict = sorted(my_dict.items(), key=operator.itemgetter(1))
&gt;&gt;&gt; sorted_my_dict
[('abc', 10), ('def', 20), ('jkl', 30), ('ghi', 100), ('mno', 101)]
&gt;&gt;&gt; sorted_my_dict[:3]
[('abc', 10), ('def', 20), ('jkl', 30)]
</code></pre>
</div>
<span class="comment-copy">Dictionaries aren't made for sorting. Perhaps <a href="https://www.blog.pythonlibrary.org/2016/03/24/python-201-ordereddict/" rel="nofollow noreferrer">orderedDict</a> can help.</span>
<span class="comment-copy">Thanks ! I really appreciate it :-)</span>
<span class="comment-copy">glad to help you!</span>
<span class="comment-copy">In Python 3 will not work, since <code>dict.items()</code> will return so called <i>view objects</i> that don't have <code>sort</code> method.</span>
<span class="comment-copy">Thanks for providing an alternate way to do it :-)</span>
