<div class="post-text" itemprop="text">
<p>I am trying to use itertools to make this code perform better and be more pythonic</p>
<pre><code>def get_permutations():
out = []
for a in range(0,6):
    for b in range(0, 6):
        for c in range(0, 6):
            for d in range(0, 6):
                for e in range(0, 6):
                    for f in range(0, 6):
                        out.append([a,b,c,d,e,f])
return out
</code></pre>
<p>I think I should be using itertools.permutations and itertools.chain, but I'm not sure how to put them together to get the equivalent result either as a list or an iterator. If you have another solution that does not use itertools, I will also consider it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you not looking for <code>itertools.combinations_with_replacement([0, 1, 2, 3, 4, 5], 6)</code> ? :)</p>
</div>
<span class="comment-copy">Isn't that just <code>itertools.product(range(6), repeat=6)</code>? See <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.product</a></span>
<span class="comment-copy">These aren't permutations, but the cartesian product, as jonsharpe mentions. using <code>itertools.product</code> might make it faster, but it won't change the algorithmic complexity (which is pretty horrendous here).</span>
<span class="comment-copy">@StefanPochmann assuming <code>range(6)</code> is variable. If not, then using <code>itertools.product</code> or just these nested loops won't make an appreciable difference at all.</span>
<span class="comment-copy">jonrsharpe, you are right. Post that as an answer so I can accept it. juanpa, yes, I acknowledge the performance is pretty horrendous.</span>
