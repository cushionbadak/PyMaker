<div class="post-text" itemprop="text">
<p>I'm trying to return a list in one of my methods for interacting with vmware via pyvmomi.</p>
<pre><code>active_list = self.vss.spec.policy.nicTeaming.nicOrder.activeNic
</code></pre>
<p>when I do <code>return active_list</code> I get:</p>
<pre><code>(str) [
   'vmnic0',
   'vmnic1'
]
</code></pre>
<p>Type:</p>
<pre><code>type(active_list)
&lt;class 'pyVmomi.VmomiSupport.str[]'&gt;
</code></pre>
<p>Since I'm able to iterate over the <code>active_list</code> as it is, shoud I be concerned about the <code>(str)</code> prefix. </p>
<p>I was able to avoid the <code>(str) [...]</code> prefix by 
coping <code>active_list</code>, <code>new_list=list(active_list)</code></p>
<p>What is the best pythonic approach to this?</p>
</div>
<div class="post-text" itemprop="text">
<p>This <code>(str)</code> prefix comes from the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__()</code></a> representation of the <code>&lt;class 'pyVmomi.VmomiSupport.str[]'&gt;</code>. Obviously the class also supports iterating, so you can loop over it.</p>
<p>You can learn more about special method names in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">Docs</a>.</p>
<p>As long as you don't rely on the <code>str()</code> output of that class / instance you can ignore it.</p>
</div>
<span class="comment-copy">what do you mean by <code>don't rely on the str()</code> it returns the items as strings</span>
<span class="comment-copy">Not exactly, it gives you the items as string in a list as string, but it is not really a list. Is is in fact only a representation of this class. You can't use this representation as a list as-it.</span>
<span class="comment-copy">So I guess I'm safer with useing <code>new_active_list = list(active_list)</code> since I want to do comparison of lists <code>if set(active_list) == set(some_other_list)</code></span>
<span class="comment-copy">You could also compare your lists with the raw <code>active_list</code> instance, but this is also a good approach</span>
