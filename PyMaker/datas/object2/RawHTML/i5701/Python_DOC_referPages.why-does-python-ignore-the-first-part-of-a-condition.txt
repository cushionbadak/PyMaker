<div class="post-text" itemprop="text">
<p>Suppose I have the following code:</p>
<pre><code>target = 'abc1234y'
if ('x' and 'y') in target:
    print('x and y are in target')
</code></pre>
<p>Why is <code>if ('x' and 'y') in target</code> true?</p>
<p>Why doesn't this code produce error?</p>
<p>Why do braces have no effect?</p>
<p>This does not seem logical, since if <code>('x' and 'y') = true</code> then <code>('y' and 'x')</code> should also be true, however, this is no the case.</p>
<p>At the same time expression <code>if ('y' and 'x') in target</code> is <code>false</code></p>
</div>
<div class="post-text" itemprop="text">
<p>There are two things to consider here:</p>
<h1>How <code>and</code> works with strings</h1>
<p><code>'x' and 'y'</code> is not <code>True</code>.</p>
<p><code>'x' and 'y'</code> is <code>'y'</code>, which might seem confusing but it makes sense when looking at how <code>and</code> and <code>or</code> work in general:</p>
<ul>
<li><code>a and b</code> returns <code>b</code> if a is <code>True</code>, else returns <code>a</code>.</li>
<li><code>a or b</code> returns <code>a</code> if a is <code>True</code>, else returns <code>b</code>.</li>
</ul>
<p>Thus:</p>
<ul>
<li><code>'x' and 'y'</code> is <code>'y'</code></li>
<li><code>'x' or 'y'</code> is <code>'x'</code></li>
</ul>
<h1>What the parentheses do</h1>
<p>The brackets do have an effect in your if statement. <code>in</code> has a higher precedence than <code>and</code> meaning that if you write</p>
<pre><code>if 'x' and 'y' in target:
</code></pre>
<p>it implicitly means the same as</p>
<pre><code>if 'x' and ('y' in target):
</code></pre>
<p>which will only check if y is in the target string. So, using</p>
<pre><code>if ('x' and 'y') in target:
</code></pre>
<p>will have an effect. You can see the whole table of operator precedences in <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">the Python docs about Expressions</a>.</p>
<h1>Solution</h1>
<p>To achieve what you are wanting to do, @Prem and @Olga have already given two good solutions:</p>
<pre><code>if 'y' in target and 'x' in target:
</code></pre>
<p>or </p>
<pre><code>if all(c in target for c in ['x','y']):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be confusing how <code>AND</code> operator works.</p>
<pre><code>'x' and 'y'
Out[1]: 'y'
</code></pre>
<p>and</p>
<pre><code>'y' and 'x'
Out[1]: 'x'
</code></pre>
<p>So in your first case, you do check if <code>y</code> is present. In reverse, you check if <code>x</code> is present in string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because it is checking for just 'y' in target.
You need something like this:</p>
<pre><code>target = 'abc1234y'
if 'y' in target and 'x' in target:
    print('x and y are in target')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to use <code>all</code> instead 
<code>
if all(c in target for c in ['x','y']):...
</code></p>
</div>
<span class="comment-copy">What do you mean <i>Why do braces have no effect?</i>. They <b>do</b>. The difference is between <code>('x' and 'y') in target</code> and <code>'x' and ('y' in target)</code>. They're very different!</span>
<span class="comment-copy">Can you please explain in words what you're trying to compare? Because it is not "x and y are in the target string"</span>
<span class="comment-copy">Braces have no effect means I expect ('x' and 'y') mean 'x' and 'y' not x and 'y in somewhere'</span>
<span class="comment-copy">@0rt Unfortunately that's not how programming works, you'll need to say <code>'x' in target and 'y' in target</code> or something similar to the same effect</span>
<span class="comment-copy">@0rt No, read the first comment I posted and go <b><i>thoroughly</i></b> read up on operator precedence, and also probably <a href="https://stackoverflow.com/questions/2580136/does-python-support-short-circuiting">short-circuit evaluation</a></span>
<span class="comment-copy">Would the downvoter care to comment why?</span>
<span class="comment-copy">I agree the down votes are just random. The answers look correct. Not sure what is wrong with the answers.</span>
<span class="comment-copy">You have my upvote for the nice explanation on behaviour</span>
<span class="comment-copy">so, in python and does not act like &amp;?</span>
<span class="comment-copy">@0rt <code>and</code> and <code>&amp;</code> are quite different things in python. <code>and</code> is logical, <code>&amp;</code> is bitwise</span>
<span class="comment-copy">why does it ignore the braces then?</span>
<span class="comment-copy">@0rt it doesn't ignore braces, <code>('x' and 'y')</code> is <code>'y'</code> so all your statement is doing is <code>'y' in target</code></span>
<span class="comment-copy">The braces says, the condition should be evaluated first.</span>
<span class="comment-copy">maybe you want to test "if 'x' in target and 'y' in target".</span>
<span class="comment-copy">I'd like to understand the 'x' and 'y' behaviour. Is it a known and wanted behaviour or just some side effect to consider ?</span>
<span class="comment-copy">this is not what I was asking for</span>
