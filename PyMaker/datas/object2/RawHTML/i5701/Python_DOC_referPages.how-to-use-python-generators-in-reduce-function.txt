<div class="post-text" itemprop="text">
<p>Can someone please help me to understand the execution of this code?</p>
<pre><code>from functools import reduce

def foo():
    for i in range(10):
        yield i

gen = foo()

print (gen == 0, gen.__next__ == 0, gen.__next__ == 1, reduce(lambda a,b:a+b, gen))
</code></pre>
<p>My questions are the following:</p>
<ul>
<li>What are the multiple print arguments doing? What does gen == 0 mean? Isn't the gen a generator object?</li>
<li>Also how is the reduce function remembering what to assign to a and b?</li>
<li>And after gen = foo() is called, does execution just switch between the function and the reduce statement?</li>
</ul>
<p>If someone could please map out the functionalities of the generator and the reduce function, that would help a lot! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>As you note, <code>gen</code> is a generator; all of the tests in the <code>print</code> are nonsensical (if they added call parens to get <code>gen.__next__()</code> then the comparison to <code>0</code> and <code>1</code> would return <code>True</code> I suppose, but by not calling it, it's guaranteed <code>False</code>).</p>
<p>As for <code>reduce</code>, that's in <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">the docs</a>. Each call of the reducer function uses the result of the prior call (stored internally in the <code>reduce</code> function's locals, not visible except when it's passed to the reducer function) as the first argument (on the first call, this is either the optional third argument <code>initializer</code>, or the first call is performed with the first two elements from <code>gen</code>), and the next result from the input iterable as <code>b</code>.</p>
<p>So if <code>__next__</code> had actually been called (consuming the first two values from <code>gen</code>), the first call would use <code>2</code> as <code>a</code> and <code>3</code> as <code>b</code>; the result (<code>5</code>) would be <code>a</code> for the next call, with <code>b</code> the next value from gen (<code>4</code>), producing <code>9</code>, etc. Stepping it out the first few steps. you'd see:</p>
<ol>
<li><code>a = 2, b = 3 -&gt; 5</code></li>
<li><code>a = 5, b = 4 -&gt; 9</code></li>
<li><code>a = 9, b = 5 -&gt; 14</code></li>
<li><code>a = 14, b = 6 -&gt; 20</code></li>
</ol>
<p>and so on; effectively, it's just using <code>reduce</code> as a slow/ugly form of the <code>sum</code> function.</p>
<p>As for your fourth question: Generators are lazy. Execution switches to the generator when the next value is requested, and when it's produced, the generator is "hibernated" until the next value is requested. So in this case, yes, each call of the <code>lambda</code> passed to <code>reduce</code> corresponds to an additional read from <code>gen</code> (two reads for the first call since it needs to get an accumulator value to start), but it's entirely on-demand; there is no true parallelism going on here; when <code>gen</code> resumes, the code that asked it for a value is paused pending the result; when no value is being requested from it, <code>gen</code> is "frozen" indefinitely (not background processing at all).</p>
</div>
<span class="comment-copy">It gets a lot less ugly, at least, if you replace the <code>lambda</code> with <code>operator.add</code>.</span>
<span class="comment-copy">@chepner: True, though plain <code>sum(gen)</code> would be even prettier. :-) Or if you must use <code>reduce</code>, use it with <code>functools.partial</code> to make a named special purpose reducer, e.g. <code>mysum = functools.partial(reduce, operator.add)</code>, <code>myproduct = functools.partial(reduce, operator.mul)</code>, etc., so when you use it, it's more self-documenting (<code>mysum(gen)</code> or <code>myproduct(gen)</code> is much more obvious).</span>
<span class="comment-copy">Thank you for your great explanation. The only thing I would like to point out is that when I just debugged it right now it started with  a = 0, b = 1, then a = 1, b = 2, a = 3, b = 3 and would go up until a = 45.</span>
<span class="comment-copy">@ce1: Yeah, like I said, if the <code>__next__</code> usage added parens (so it was actually called), you'd see it start with 2 and 3. But without the call parens, the generator hasn't run when the <code>reduce</code> begins, so it would start with 0 and 1.</span>
