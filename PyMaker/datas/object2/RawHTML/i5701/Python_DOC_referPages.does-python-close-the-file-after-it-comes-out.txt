<div class="post-text" itemprop="text">
<p>I tired two code examples , one with close and the other with out close, strace says both code has called .close()</p>
<p>is it safe to understand python3.6 does an automatic close:</p>
<p>Eg1: 
the lines in the file is :</p>
<pre><code>f = open('./myConfig.cfg')
jsonda = json.loads(f.read())
</code></pre>
<p>The corresponding strace o/p is </p>
<pre><code>open("./myConfig.cfg", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=693, ...}) = 0
ioctl(3, TCGETS, 0x7ffe829a80a0)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
ioctl(3, TCGETS, 0x7ffe829a8040)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
lseek(3, 0, SEEK_CUR)                   = 0
fstat(3, {st_mode=S_IFREG|0644, st_size=693, ...}) = 0
read(3, "{\n  \"osns\" : [\n    {\n      \"fabr"..., 694) = 693
read(3, "", 1)                          = 0
rt_sigaction(SIGINT, {SIG_DFL, [], SA_RESTORER, 0x7f57b2bc1390}, {0x442160, [], SA_RESTORER, 0x7f57b2bc1390}, 8) = 0
close(3)                                = 0
sigaltstack(NULL, {ss_sp=0x1f2b0b0, ss_flags=0, ss_size=8192}) = 0
sigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=0}, NULL) = 0
exit_group(0)                           = ?
+++ exited with 0 +++
</code></pre>
<hr/>
<p>Similarly  in the second file:</p>
<pre><code>f = open('./myConfig.cfg')
jsonda = json.loads(f.read())
f.close()
</code></pre>
<p>The corresponding strace o/p is </p>
<pre><code>open("./myConfig.cfg", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=693, ...}) = 0
ioctl(3, TCGETS, 0x7fff2e3f27c0)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
ioctl(3, TCGETS, 0x7fff2e3f2760)        = -1 ENOTTY (Inappropriate ioctl for device)
lseek(3, 0, SEEK_CUR)                   = 0
lseek(3, 0, SEEK_CUR)                   = 0
fstat(3, {st_mode=S_IFREG|0644, st_size=693, ...}) = 0
read(3, "{\n  \"osns\" : [\n    {\n      \"fabr"..., 694) = 693
read(3, "", 1)                          = 0
close(3)                                = 0
rt_sigaction(SIGINT, {SIG_DFL, [], SA_RESTORER, 0x7f4f52f6d390}, {0x442160, [], SA_RESTORER, 0x7f4f52f6d390}, 8) = 0
sigaltstack(NULL, {ss_sp=0x15130b0, ss_flags=0, ss_size=8192}) = 0
sigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=0}, NULL) = 0
exit_group(0)                           = ?
+++ exited with 0 +++
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See this part of documentation <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and writing files</a> its fully answers your question, so <em>"read the docs"</em>. I will provide a quote from there:</p>
<blockquote>
<p>If you’re not using the <code>with</code> keyword, then you should call <code>f.close()</code>
  to close the file and immediately free up any system resources used by
  it. If you don’t explicitly close a file, <strong>Python’s garbage collector
  will eventually destroy the object and close the open file for you,
  but the file may stay open for a while.</strong> Another risk is that different
  Python implementations will do this clean-up at different times.</p>
</blockquote>
<p>Another part of the same section advocates to use <code>with</code> block, because in this case it is guaranteed to properly release the resources even if an exception is raised at some point (I think except <code>SystemError</code>):</p>
<blockquote>
<p>It is good practice to use the <code>with</code> keyword when dealing with file
  objects. The advantage is that the file is properly closed after its
  suite finishes, even if an exception is raised at some point. Using
  with is also much shorter than writing equivalent <code>try-finally</code> blocks.</p>
</blockquote>
<p>Eventually to answer your question - yes it is safe to assume that Python does an automatic close, but it is not safe to implicitly rely on.</p>
</div>
<span class="comment-copy">Just use <code>with open()</code>?</span>
<span class="comment-copy">@ajax_velu, python does not close the file automatically. In short Garbage collector will close file when it destroys file object.</span>
<span class="comment-copy">I would recommend closing the file after you're done with it.  If only for the sake of good practice.</span>
<span class="comment-copy">If the file object goes out of scope then python will close it.  If I modify your first example to: jsonda = json.loads(open('./myConfig.cfg').read()) then the file object goes out of scope right away and there is nothing to call close() on.</span>
