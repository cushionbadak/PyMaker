<div class="post-text" itemprop="text">
<p>I have a list comp like the following:</p>
<pre><code>import subprocess

last_logins = [i.split(' ', 1)[0] for i in subprocess.check_output('last').split('\n') if 'reboot' not in i]
print("The last five logins were: {0}".format(', '.join(last_logins[0:5])))
</code></pre>
<p>And it returns:</p>
<pre><code>The last five logins were: vagrant, vagrant, vagrant, vagrant, vagrant
</code></pre>
<p>How do I nest a sub-loop that keeps a tally of the users, and, in this case, returns:</p>
<pre><code>The last five logins were: vagrant: 2x, some_other_user: 3x
</code></pre>
<p>Yes, it's ugly and the comprehension line is too long. (I'm open to critiques/suggestions for writing clearer code). But I'd also like to find out the right way to nest loops in (list) comprehensions.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are looking for <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code></a>:</p>
<pre><code>from collections import Counter

last_logins = ['Vagrant', 'Vagrant', 'Some Other User', 'Vagrant', 'Some Other User']

last_five_stats = Counter(last_logins[:5])
print("The last five logins were: {0}".format(', '.join("{0}: {1}x".format(user, count) for user, count in last_five_stats.items())))
</code></pre>
<p>Prints:</p>
<pre><code>The last five logins were: Vagrant: 3x, Some Other User: 2x
</code></pre>
<p>This though would be a bit nicer with <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer"><code>f-strings</code></a> (Python 3.6+):</p>
<pre><code>last_five_stats = (f"{user}: {count}x" for user, count in Counter(last_logins[:5]).items())
print(f"The last five logins were: {', '.join(last_five_stats)}")
</code></pre>
</div>
<span class="comment-copy">What's wrong with a normal for loop?</span>
<span class="comment-copy">Nothing. Just curious about how to use list comprehensions/one-liners as well.</span>
