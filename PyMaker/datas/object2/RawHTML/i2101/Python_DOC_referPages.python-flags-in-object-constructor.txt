<div class="post-text" itemprop="text">
<p>I came across the concept of flags in python on some occasions, for example in wxPython. An example is the initialization of a frame object.
The attributes that are passed to "style".</p>
<pre><code>frame = wx.Frame(None, style=wx.MAXIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION |  wx.CLOSE_BOX)
</code></pre>
<p>I don't really understand the concept of flags. I haven't even found a solid explanation what exactly the term "flag" means in Python. How are all these attributes passed to one variable? 
The only thing i can think of is that the "|" character is used as a boolean operator, but in that case wouldn't all the attributes passed to style just evaluate to a single boolean expression?</p>
</div>
<div class="post-text" itemprop="text">
<p>What is usually meant with flags in this sense are bits in a single integer value. <code>|</code> is the ususal bit-or operator.</p>
<p>Let's say <code>wx.MAXIMIZE_BOX=8</code> and <code>wx.RESIZE_BORDER=4</code>, if you or them together you get 12. In this case you can actually use <code>+</code> operator instead of <code>|</code>.</p>
<p>Try printing the constants <code>print(wx.MAXIMIZE_BOX)</code> etc. and you may get a better understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is a boolean operator - not logical one, but bitwise one. <code>wx.MAXIMIZE_BOX</code> and the rest are typically integers that are powers of two - 1, 2, 4, 8, 16... which makes it so that only one bit in them is 1, all the rest of them are 0. When you apply bitwise OR (<code>x | y</code>) to such integers, the end effect is they combine together: <code>2 | 8</code> (<code>0b00000010 | 0b00001000</code>) becomes 10 (<code>0b00001010</code>). They can be pried apart later using the bitwise AND (<code>x &amp; y</code>) operator, also calling a masking operator: <code>10 &amp; 8 &gt; 0</code> will be true because the bit corresponding to <code>8</code> is turned on.</p>
</div>
<div class="post-text" itemprop="text">
<p>Flags are not unique to Python; the are a concept used in many languages. They build on the concepts of <em>bits and bytes</em>, where computer memory stores information using, essentially, a huge number of <em>flags</em>. Those flags are <a href="https://en.wikipedia.org/wiki/Bit" rel="nofollow noreferrer"><em>bits</em></a>, they either are off (value <code>0</code>) or on (value <code>1</code>), even though you usually access the computer memory in groups of at least 8 of such flags (<a href="https://en.wikipedia.org/wiki/Byte" rel="nofollow noreferrer"><em>bytes</em></a>, and for larger groups, <a href="https://en.wikipedia.org/wiki/Word_(computer_architecture)" rel="nofollow noreferrer"><em>words</em></a> of a multiple of 8, specific to the computer architecture).</p>
<p>Integer numbers are an easy and common <a href="https://en.wikipedia.org/wiki/Binary_number#Representation" rel="nofollow noreferrer">representation of the information stored in bytes</a>; a single byte can store any integer number between 0 and 255, and with more bytes you can represent bigger integers. But those integers still consist of bits that are either on or off, and so you can use those as <em>switches</em> to enable or disable features. You pass in specific integer values with specific bits enabled or disabled to switch features on and off.</p>
<p>So a byte consists of 8 flags (bits), and enabling one of these means you have 8 different integers; 1, 2, 4, 8, 16, 32, 64 and 128, and you can pass a combination of those numbers to a library like wxPython to set different options. For multi-byte integers, the numbers just go up by doubling.</p>
<p>But you a) don't want to remember what each number means, and b) need a method of combining them into a single integer number to pass on.</p>
<p>The <code>|</code> operator does the latter, and the <code>wx.MAXIMIZE_BOX</code>, <code>wx.RESIZE_BORDER</code>, etc names are just <em>symbolic constants</em> for the integer values, set by the wxWidget project in various C header files, and summarised in <a href="https://github.com/wxWidgets/wxWidgets/blob/cc931612eec2e3ea49200ebff45042135f3c3f9c/include/wx/toplevel.h#L27-L76" rel="nofollow noreferrer"><code>wx/toplevel.h</code></a> and <a href="https://github.com/wxWidgets/wxWidgets/blob/895edcdddfa8d610b21c3515de2399a371b5d6db/interface/wx/defs.h#L180-L210" rel="nofollow noreferrer"><code>wx/defs.h</code></a>:</p>
<pre class="lang-c prettyprint-override"><code>/*
    Summary of the bits used (some of them are defined in wx/frame.h and
    wx/dialog.h and not here):
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |15|14|13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \_ wxCENTRE
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  \____ wxFRAME_NO_TASKBAR
      |  |  |  |  |  |  |  |  |  |  |  |  |  \_______ wxFRAME_TOOL_WINDOW
      |  |  |  |  |  |  |  |  |  |  |  |  \__________ wxFRAME_FLOAT_ON_PARENT
      |  |  |  |  |  |  |  |  |  |  |  \_____________ wxFRAME_SHAPED
      |  |  |  |  |  |  |  |  |  |  \________________ wxDIALOG_NO_PARENT
      |  |  |  |  |  |  |  |  |  \___________________ wxRESIZE_BORDER
      |  |  |  |  |  |  |  |  \______________________ wxTINY_CAPTION_VERT
      |  |  |  |  |  |  |  \_________________________
      |  |  |  |  |  |  \____________________________ wxMAXIMIZE_BOX
      |  |  |  |  |  \_______________________________ wxMINIMIZE_BOX
      |  |  |  |  \__________________________________ wxSYSTEM_MENU
      |  |  |  \_____________________________________ wxCLOSE_BOX
      |  |  \________________________________________ wxMAXIMIZE
      |  \___________________________________________ wxMINIMIZE
      \______________________________________________ wxSTAY_ON_TOP

...
*/
</code></pre>
<p>and</p>
<pre class="lang-c prettyprint-override"><code>/*
    Summary of the bits used by various styles.
    High word, containing styles which can be used with many windows:
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \_ wxFULL_REPAINT_ON_RESIZE
      |  |  |  |  |  |  |  |  |  |  |  |  |  |  \____ wxPOPUP_WINDOW
      |  |  |  |  |  |  |  |  |  |  |  |  |  \_______ wxWANTS_CHARS
      |  |  |  |  |  |  |  |  |  |  |  |  \__________ wxTAB_TRAVERSAL
      |  |  |  |  |  |  |  |  |  |  |  \_____________ wxTRANSPARENT_WINDOW
      |  |  |  |  |  |  |  |  |  |  \________________ wxBORDER_NONE
      |  |  |  |  |  |  |  |  |  \___________________ wxCLIP_CHILDREN
      |  |  |  |  |  |  |  |  \______________________ wxALWAYS_SHOW_SB
      |  |  |  |  |  |  |  \_________________________ wxBORDER_STATIC
      |  |  |  |  |  |  \____________________________ wxBORDER_SIMPLE
      |  |  |  |  |  \_______________________________ wxBORDER_RAISED
      |  |  |  |  \__________________________________ wxBORDER_SUNKEN
      |  |  |  \_____________________________________ wxBORDER_{DOUBLE,THEME}
      |  |  \________________________________________ wxCAPTION/wxCLIP_SIBLINGS
      |  \___________________________________________ wxHSCROLL
      \______________________________________________ wxVSCROLL

...
*/
</code></pre>
<p>The <code>|</code> operator is the <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">bitwise OR operator</a>; it combines the bits of two integers, each matching bit is paired up and turned into an output bit according to the boolean rules for OR. When you do this for those integer constants, you get a new integer number with multiple flags enabled.</p>
<p>So the expression</p>
<pre><code>wx.MAXIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU | wx.CAPTION |  wx.CLOSE_BOX
</code></pre>
<p>gives you an integer number with the bits numbers 9, 6, 11, 29, and 12 set; here I used <code>'0'</code> and <code>'1'</code> strings to represent the bits and <code>int(..., 2)</code> to interpret a sequence of those strings as a single integer number in binary notation:</p>
<pre><code>&gt;&gt;&gt; fourbytes = ['0'] * 32
&gt;&gt;&gt; fourbytes[9] = '1'
&gt;&gt;&gt; fourbytes[6] = '1'
&gt;&gt;&gt; fourbytes[11] = '1'
&gt;&gt;&gt; fourbytes[29] = '1'
&gt;&gt;&gt; fourbytes[12] = '1'
&gt;&gt;&gt; ''.join(fourbytes)
'00000010010110000000000000000100'
&gt;&gt;&gt; int(''.join(fourbytes), 2)
39321604
</code></pre>
<p>On the receiving end, you can use the <code>&amp;</code> bitwise AND operator to test if a specific flag is set; that return <code>0</code> if the flag is not set, or the same integer as assigned to the flag constant if the flag bit had been set. In both C and in Python, a non-zero number is <em>true</em> in a boolean test, so testing for a specific flag is usually done with:</p>
<pre class="lang-c prettyprint-override"><code>if ( style &amp; wxMAXIMIZE_BOX ) {
</code></pre>
<p>for determining that a specific flag is set, or</p>
<pre class="lang-c prettyprint-override"><code>if ( !(style &amp; wxBORDER_NONE) )
</code></pre>
<p>to test for the opposite.</p>
</div>
<span class="comment-copy">Thank you. To clarify, in order to determine what attributes have been passed to style, every unique combination of attributes must evaluate to a unique integer, right?</span>
<span class="comment-copy">@sunnytown yes indeed, the flags are usually values that correspond a single bit (2^n).</span>
