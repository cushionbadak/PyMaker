<div class="post-text" itemprop="text">
<p>I'm trying to terminate a subprocess pid if a string is in the output, but it is not working. What is wrong? </p>
<pre><code>import subprocess
import shlex


if "PING" in subprocess.check_call(shlex.split("ping -c 10 gogole.com")):
    subprocess.check_call(shlex.split("ping -c 10 gogole.com")).terminate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please refere to the documentation for the methods you call.  First of all, <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">check_call</a> executes until the process is finished, then returns the return code from the process.  I'm not sure how you intend to find "PING" from a return code, which is typically an integer.</p>
<p>If it <em>is</em> there, look at the body of your <code>if</code> statement: you fork a totally new instance of <code>ping</code>, wait for it to complete, and then try to terminate the return code.</p>
<p>I recommend that you work through a tutorial on subprocesses.  Learn how to grab a process handle and invoke operations on <em>that</em>.  You'll need to get a handle on the output stream, look for "PING" in <em>that</em>, and then call <code>terminate</code> on the process handle you got at invocation.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import subprocess, os
run = "ping -c 10 google.com"
log = ""
process = subprocess.Popen(run, stdout=subprocess.PIPE, shell=True)
while True:
    out = process.stdout.read(1)
    log +=out
    print log
    if out == '' and process.poll() != None:
        break
    if "PING" in log:
        print "terminated!"
        process.kill()
        process.terminate()
        break
</code></pre>
</div>
<span class="comment-copy">Have you tried this? <a href="https://stackoverflow.com/questions/4084322/killing-a-process-created-with-pythons-subprocess-popen" title="killing a process created with pythons subprocess popen">stackoverflow.com/questions/4084322/â€¦</a></span>
<span class="comment-copy"><code>subprocess.check_call()</code> doesn't return until the process has exited, so there's nothing to terminate.</span>
<span class="comment-copy">It also doesn't return the process output, it returns a <code>CompletedProcess</code> object. If you want the output, use <code>check_output()</code>, not <code>check_call()</code>.</span>
<span class="comment-copy">If you want to run a subprocess without waiting for it to exit, use <code>subprocess.Popen()</code> and then read from the pipe.</span>
<span class="comment-copy">you are right about Popen.  process = subprocess.Popen(shlex.split("ping -c 10 gogole.com"), stdout=PIPE ) readme = process.stdout.read() if "PING" in readme:     print "yes, is there"</span>
