<div class="post-text" itemprop="text">
<p>Hi i have a list of tuples containing words and their respective categories.
Is there anyway that i can clump them into something like a dictionary ?</p>
<p>Sample Data:</p>
<pre><code>Data = [('word1 word2 word3', 2),
 ('word4 word5 word6', 3),
 ('word7 word8 word9', 3),
 ('word10 word11 word12', 2),
 ('word13 word14 word15', 1)]
</code></pre>
<p>Expected Output:</p>
<pre><code>Out = {'1': 'word13 word14 word15'
'2': 'word1 word2 word3', 'word10 word11 word12'
'3': 'word4 word5 word6', 'word7 word8 word9'}
</code></pre>
<p>Is it possible to sort it in this manner ? what functions should i use. please advice me as i have a big amount of data. above is just an example. Thank You</p>
</div>
<div class="post-text" itemprop="text">
<p>The desired output you have shown is not exactly valid. To achieve the closest valid thing, use a <code>defaultdict</code> with an empty list</p>
<pre><code>new_dict = defaultdict(list)

for values, key in Data:
    new_dict[key].append(values)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python can easily convert an iterable of <code>(key, value)</code> pairs into a dictionary, and back. But it looks like your tuples are <code>(value, key)</code>.</p>
<p>This is still not that difficult in Python, just use a dict comprehension to switch them.</p>
<pre><code>{k: v for v, k in Data}
</code></pre>
<p>Traditionally, dictionaries are unordered sets of key/value pairs, but <code>dict</code>s in recent Python versions can remember their insertion order. This is standard in Python 3.7, but considered an implementation detail before that in CPython 3.6. (And before that, you'd have to use an <code>OrderedDict</code> instead.)</p>
<p>So, if you really want your keys in order you can sort on them first, like so</p>
<pre><code>import operator

{k: v for v, k in sorted(Data, key=operator.itemgetter(1))}
</code></pre>
<p>The <code>sorted</code> builtin can transform its elements before comparing them using a key function. The <code>itemgetter(1)</code> operator is equivalent to <code>lambda xs: xs[1]</code>. This is what makes it possible to sort tuples by their second element.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can group data on categories and then use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a></p>
<pre><code>from itertools import groupby
from collections import OrderedDict

# Sort the data on the categories
Data = sorted(Data, key = lambda x : x[1])
# Group the data on basis of categories
grouped = [(key, list(i for i,j in group)) for key, group in groupby(Data, key=lambda x: x[1])]
# Put it into a OrderedDict, keys sorted
out =  OrderedDict(grouped)
print(out[2]) # prints ['word1 word2 word3', 'word10 word11 word12']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>defaultdict</code> here and then from there use <code>sorted</code> with a <code>dict()</code> constructor to create the dictionary back in order you desire</p>
<pre><code>from collections import defaultdict

dd = defaultdict(list)  
for v, k in data:
    dd[k].append(v)

d = dict(sorted(dd.items(), key=lambda x: x[0])) 
print(d)
# {1: ['word13 word14 word15'], 2: ['word1 word2 word3', 'word10 word11 word12'], 3: ['word4 word5 word6', 'word7 word8 word9']}
</code></pre>
</div>
<span class="comment-copy">is a defaultdict ordered?</span>
<span class="comment-copy">why is it not valid ?</span>
<span class="comment-copy">@DeepakSaini: don't think so</span>
<span class="comment-copy">@vash_the_stampede: I don't mean conceptually. It's just missing commas and parentheses.</span>
<span class="comment-copy">@blue_note, I guess the OP wants the dict to be ordered by the categories.</span>
