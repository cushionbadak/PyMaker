<div class="post-text" itemprop="text">
<p>I'm just curious about the <code>sys.argv</code> behavior I find strange and inconsistent.</p>
<p>I expected <code>sys.argv</code> to only contain the script arguments (not the arguments that are parsed by the <code>python3</code> executable).</p>
<p>In practice, I see that <code>sys.argv</code> contains the <code>-c</code> argument intended for <code>python3</code>. What surprises me then is that the next argument - the script body - is missing. I expect either 2 arguments or 4, but not 3.</p>
<p>What's the logic behind this?</p>
<pre><code>$ python3 -c 'import sys;print(sys.argv)' 1 2
['-c', '1', '2']
</code></pre>
<p><strong>Update</strong>:
Ok. I got it. This only happens with the <code>-c</code> argument and not other arguments:</p>
<pre><code>$ python3 -b -c 'import sys;print(sys.argv)' -d 1 2
['-c', '-d', '1', '2']
</code></pre>
<p>I still find it confusing and with that in the inline script case the <code>argv[0]</code> would contain the script text or <code>-c &lt;script text&gt;</code> or <code>python3 -c &lt;script text&gt;</code></p>
<p><strong>P.S.</strong> Here is the script that initially confused me:</p>
<pre><code>python3 -c '
import argparse
import sys
parser = argparse.ArgumentParser()
print(parser.parse_known_args(sys.argv))
' -a 1 -b 2 -c 3
(Namespace(), ['-c', '-a', '1', '-b', '2', '-c', '3'])
</code></pre>
<p>I was surprised to see the first -c in the output. Turns out you should not just pass <code>argv</code> to <code>parse_known_args</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Something</strong> has to be there (so programs that expect user-provided arguments to start at <code>argv[1]</code> still work correctly), and <code>-c</code> is as sensible a choice as any.</p>
<hr/>
<p>The logic is that there's only <em>one</em> special argv element, and that's the first one -- <code>argv[0]</code> -- used to identify how the script was invoked. Sometimes that's a name it was invoked under; in this case, <code>-c</code> tells you it was invoked by passing <code>python -c '...script text...'</code>.</p>
<p>All the other elements are expected to be arguments to the script itself. If the script text were there as an argument <em>to that script itself</em>, you couldn't use the same command-line parsing tools for scripts passed as text as you do for every other case.</p>
<hr/>
<p>As a point of comparison, look at <code>bash -c '...script text...' "$0" "$1"</code>, which tends to cause a fair bit of confusion (it's conventional to pass <code>_</code> in the <code>$0</code> position, but then people who see it are always asking "what's that placeholder for?"; it adds very little value). Python's approach of always using <code>-c</code> in the placeholder position and passing further arguments in position 1 and onwards makes sense.</p>
</div>
<span class="comment-copy"><code>argv[0]</code> is the name <i>of</i> the script. Everything else is an argument <i>to</i> the script. So, if you had both <code>-c</code> and the script text, then you couldn't use <code>argparse</code> normally, because the script text would be unexpected.</span>
<span class="comment-copy">But <code>-c</code> is not an argument to a script. It's an argument to <code>python3</code>. <code>pythohn3</code> "consumes" the <code>-c</code> and the script text, so <code>-c</code> should not be in the arguments list.</span>
<span class="comment-copy">You can find explanation here: <a href="https://docs.python.org/3/using/cmdline.html" rel="nofollow noreferrer">docs.python.org/3/using/cmdline.html</a></span>
<span class="comment-copy">Yes, it's an argument to python3, but there still has to be <i>something</i> there in the argv array describing how the script was invoked (since there <i>is</i> no script filename that could be put there; if one put the text of the script in that position, poorly-written usage-error-handling code could end up making a user-confusion mess by printing that source code out to end users as if it were a command name). <code>-c</code> is a very reasonable choice; it's short and clear to the reader... and well, <i>some</i> choice had to be made, even if it was a decision to make <code>argv[0]</code> be <code>None</code>.</span>
<span class="comment-copy">BTW, there's history for closing "why did the designers of language X choose to do Y?" questions as outside of the site's scope -- see <a href="https://meta.stackoverflow.com/questions/323334/is-asking-why-on-language-specifications-still-considered-as-primarily-opinio">Is asking “why” on language specifications still considered as “primarily opinion-based” if it can have official answers?</a> on <a href="https://meta.stackoverflow.com">Meta Stack Overflow</a>.</span>
<span class="comment-copy">Ok. I got it. This only happens with the <code>-c</code> argument and not other arguments:     ` $ python3 -b -c 'import sys;print(sys.argv)' -d 1 2`    ` ['-c', '-d', '1', '2']`  I still find it confusing and wish that in the inline script case the <code>argv[0]</code> would contain the script text or <code>-c &lt;script text&gt;</code> or <code>python3 -c &lt;script text&gt;</code></span>
<span class="comment-copy">&gt;"-c is as sensible a choice as any." I find it a bit less sensible, because it's not <i>that</i> <code>-c</code> I've passed. It's an arbitrary inline script indicator that could as well be <code>"&lt;inline-script&gt;"</code> or <code>python3</code> or <code>python3 -c &lt;script&gt;</code> or <code>&lt;script&gt;</code> or <code>-c &lt;script&gt;</code>. Just not the plain <code>-c</code></span>
<span class="comment-copy">@Ark-kun: I think the key takeaway here is that you should almost always be ignoring <code>argv[0]</code>. It's never reliably <i>anything</i>. Don't expect it to be meaningful in this case, or indeed really in any case.</span>
<span class="comment-copy">Yes. I was just confused by it being <code>-c</code>. My train of thought was as follows: "<code>argv[0]</code> == <code>-c</code> looks like an argument I've passed, not like a program name. That means that Python only has arguments in <code>argv</code>, not the program. But why does it include the <code>-c</code> arg that it has parsed?" I won't have been fooled if <code>argv[0]</code> contained anything other that <code>-c</code>.</span>
<span class="comment-copy"><code>&lt;inline-script&gt;</code> would have been another reasonable choice, I agree.</span>
