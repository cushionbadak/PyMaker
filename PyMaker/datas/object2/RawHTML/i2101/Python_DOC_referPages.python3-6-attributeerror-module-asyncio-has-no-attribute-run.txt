<div class="post-text" itemprop="text">
<p>I tried to read <a href="https://hackernoon.com/asynchronous-python-45df84b82434" rel="noreferrer">https://hackernoon.com/asynchronous-python-45df84b82434</a>.
It's about asynchronous python and I tried the code from this, but I'm getting a weird Error.
The code is:
`</p>
<pre><code>import asyncio
import aiohttp

urls = ['http://www.google.com', 'http://www.yandex.ru', 'http://www.python.org']

async def call_url(url):
    print('Starting {}'.format(url))
    response = await aiohttp.ClientSession().get(url)
    data = await response.text()
    print('{}: {} bytes: {}'.format(url, len(data), data))
    return data

futures = [call_url(url) for url in urls]

asyncio.run(asyncio.wait(futures))
</code></pre>
<p>When I try to run it says:</p>
<pre><code>Traceback (most recent call last):
  File "test.py", line 15, in &lt;module&gt;
    asyncio.run(asyncio.wait(futures))
AttributeError: module 'asyncio' has no attribute 'run'
sys:1: RuntimeWarning: coroutine 'call_url' was never awaited
</code></pre>
<p>I dont have any files named ayncio and I have proof:</p>
<pre><code>&gt;&gt;&gt; asyncio
&lt;module 'asyncio' from '/usr/lib/python3.6/asyncio/__init__.py'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run" rel="noreferrer"><code>asyncio.run</code></a> is a Python 3.7 addition. In 3.5-3.6, your example is roughly equivalent to:</p>
<pre><code>import asyncio

futures = [...]
loop = asyncio.get_event_loop()
loop.run_until_complete(asyncio.wait(futures))
loop.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>asyncio.run()</code> function was added in Python 3.7. From the <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run" rel="noreferrer"><code>asyncio.run()</code> function documentation</a>:</p>
<blockquote>
<p>New in version 3.7: <strong>Important</strong>: this function has been added to asyncio in Python 3.7 on a provisional basis.</p>
</blockquote>
<p>Note the <a href="https://docs.python.org/3/glossary.html#term-provisional-api" rel="noreferrer"><em>provisional</em> part</a>; the Python maintainers forsee that the function may need further tweaking and updating, so the API may change in future Python versions.</p>
<p>At any rate, you can't use it on Python 3.6. You'll have to upgrade or implement your own.</p>
<p>A very simple approximation would be to use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_until_complete" rel="noreferrer"><code>loop.run_until_complete()</code></a>:</p>
<pre><code>loop = asyncio.get_event_loop()
result = loop.run_until_complete(coro)
</code></pre>
<p>although this ignores handling remaining tasks that may still be running. See the <a href="https://github.com/python/cpython/blob/3.7/Lib/asyncio/runners.py" rel="noreferrer"><code>asyncio.runners</code> source code</a> for the complete <code>asyncio.run()</code> implementation.</p>
</div>
<span class="comment-copy">Python 3.6 doesn't have this function. <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.run" rel="nofollow noreferrer">See the docs</a>.</span>
<span class="comment-copy">That function is new in Python 3.7.</span>
<span class="comment-copy">thank you very much</span>
<span class="comment-copy">When you grab the existing event loop, I'd not close it.. <code>asyncio.run()</code> only close the loop because it actually creates a new loop to start with.</span>
