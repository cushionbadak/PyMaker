<div class="post-text" itemprop="text">
<p>I am given an array X and I am asked to return another array Y where y[t] = x[t] + x[t-1] and y[0] = 0 <strong>without using a for loop</strong> in Python.</p>
<p>What I can think of is using rolling sum but I am not sure if this is the fastest way since I need to convert x into a dataframe/ a series for rolling to work. Is there a faster way to do that? Thanks!</p>
<pre><code>df = pd.DataFrame(X).rename(columns={0: 'X'})
df['Y'] = df['X'].rolling(2).sum().fillna(0)
Y = df['Y'].values
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a list comprehension and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a>:</p>
<pre><code>x = [1, 2, 3, 4]
y = [0] + [c + n for c, n in zip(x, x[1:])]
print(y)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[0, 3, 5, 7]
</code></pre>
<p>This approach relies on built-in functions, so no need to import an external module such as pandas.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case you are looking for one-liners might not give best performace</p>
<pre><code>from toolz.itertoolz import sliding_window
[0]+map(sum,list(sliding_window(2, [1, 2, 3, 4]))) # [0, 3, 5, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you could use <code>numpy</code>, though that still turns the list into an array.</p>
<pre><code>y = x + np.roll(x, 1)
y[0] = 0    
</code></pre>
<p>This is fast, short, fairly transparent and doesn't (explicitly) use a <code>for</code> loop.</p>
<p>You could also use <code>map</code>, which is pretty much the same as the list comprehension and doesn't require any external libraries.</p>
<pre><code>y = 0 + map(lambda (a, b): a+b, zip(x, x[1:]))
</code></pre>
<p>In Python3 this doesn't work, and instead you would need to write:</p>
<pre><code>y = [0] + list(map(lambda a: a[0]+a[1], zip(x, x[1:])))
</code></pre>
<p>or </p>
<pre><code>y = [0] + list(map(sum, zip(x, x[1:])))
</code></pre>
</div>
<span class="comment-copy">"without using a for loop" - but is list comprehension okay?</span>
<span class="comment-copy">This question should probably be on codereview.stackexchange.com ... stackoverflow is not good at providing a "faster" way of doing things in general</span>
<span class="comment-copy">This is similar to <a href="https://stackoverflow.com/questions/28288252/fast-rolling-sum">stackoverflow.com/questions/28288252/fast-rolling-sum</a> although the only answer there uses numpy.</span>
<span class="comment-copy">please complete the answer adding why this is or not a better approach</span>
<span class="comment-copy">its not better ... its also not worse ... for some data sets this might be faster... in others it maybe faster to convert to numpy or pandas ... and use their rolling average methods</span>
<span class="comment-copy">it begs the question though of how a list comprehension is different from a loop (hint ... its not) or for that matter how <code>.rolling()</code> is just a loop also.    These stupid "trick" questions that put nonsense restrictions on problems  never really make sense</span>
