<div class="post-text" itemprop="text">
<p>I have class based views in python django application. Most of them handling same type of exception like:</p>
<pre><code>class A{
    try:
        func1()
    except type1 as e:
        handle1()
    except type2 as e:
        handle()
}

class B{
    try:
        func2()
        func3()
    except type1 as e:
        handle1()
    except type2 as e:
        handle()
}
</code></pre>
<p>I would like to keep this exception handling in a common class(may be a mixin). Which class need the exception handling will inherit the common class.</p>
<p>Keep the repeated exception handling in a common class.I am using python3 and django1.11 - class based views </p>
</div>
<div class="post-text" itemprop="text">
<p>You can extract the exception handling to the base class and change implementation in the derived classes:</p>
<pre><code>In [15]: import abc

In [16]: class Base:
    ...:     def run(self):
    ...:         try:
    ...:             self.do_run()
    ...:         except:
    ...:             print('failed')
    ...:
    ...:     @abc.abstractmethod
    ...:     def do_run(self):
    ...:         ...
    ...:

In [17]: class Foo(Base):
    ...:     def do_run(self):
    ...:         print('run foo')
    ...:

In [18]: class Bar(Base):
    ...:     def do_run(self):
    ...:         print('fail bar')
    ...:         raise Exception()
    ...:

In [19]: f = Foo()

In [20]: f.run()
run foo

In [21]: b = Bar()

In [22]: b.run()
fail bar
failed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using django class base views, you can override <code>dispatch</code> and create a mixin. In django class based view dispatch method takes in the request and ultimately returns the response.</p>
<p>You can do similar to this - </p>
<pre><code>class ExceptionHandlingMixin(object):
    def dispatch(self, request, *args, **kwargs):
        try:
            func1()
        except type1 as e:
            handle()
        except type2 as e:
            handle()
        return super(ExceptionHandlingMixin, self).dispatch(request, *args, **kwargs)
</code></pre>
<p>Modify this in you way. For for reference visit <a href="https://docs.djangoproject.com/en/2.1/ref/class-based-views/base/#django.views.generic.base.View.dispatch" rel="nofollow noreferrer">documentation</a>.</p>
</div>
<span class="comment-copy">thank you,    In this <code>import abc</code> means?</span>
<span class="comment-copy"><code>import abc</code> means "import Abstract Base Classes module". Required for <code>@abc.abstractmethod</code>. See here for more info: <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">docs.python.org/3/library/abc.html</a></span>
<span class="comment-copy">got it, thank you</span>
