<div class="post-text" itemprop="text">
<p>I've got a 2D array comprised of boolean values (True,False).  I'd like to consolidate the array to a 1D based on a logical function of the contents.  </p>
<p>e.g. 
<strong>Input:</strong></p>
<pre><code>[[True, True, False],
 [False, False, False],
 [True, True, True]]
</code></pre>
<p><strong>Output (logical AND):</strong></p>
<pre><code>[False,
 False,
 True]
</code></pre>
<p>How would this be done without a loop ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming you want to apply logical ANDs to the rows. You can apply <code>numpy.all</code>.</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[True, True, False], [False, False, False], [True, True, True]])
&gt;&gt;&gt; a
array([[ True,  True, False],
       [False, False, False],
       [ True,  True,  True]])
&gt;&gt;&gt; 
&gt;&gt;&gt; np.all(a, axis=1)
array([False, False,  True])
</code></pre>
<p>For a solution without <code>numpy</code>, you can use <code>operator.and_</code> and <code>functools.reduce</code>.</p>
<pre><code>&gt;&gt;&gt; from operator import and_
&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; 
&gt;&gt;&gt; lst = [[True, True, False], [False, False, False], [True, True, True]]
&gt;&gt;&gt; [reduce(and_, sub) for sub in lst]
[False, False, True]
</code></pre>
<p>edit: actually, <code>reduce</code> is a bit redundant in this particular case.</p>
<pre><code>&gt;&gt;&gt; [all(sub) for sub in lst]
[False, False, True]
</code></pre>
<p>does the job just as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Python's built-in <code>all</code> method with a list-comprehension:</p>
<pre><code>[all(x) for x in my_list]
</code></pre>
<p>If that's still too loopy for you, combine it with <code>map</code>:</p>
<pre><code>map(all, my_list)
</code></pre>
<p>Note that <code>map</code> doesn't return a list in Python 3. If you want a list as your result, you can call <code>list(map(all, my_list))</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this without NumPy too. Here is one solution using list comprehension. Explanation: It will loop over sub-lists and even if one of the items in each sub-list is <code>False</code>, it outputs <code>False</code> else <code>True</code>.</p>
<pre><code>inp = [[True, True, False],[False, False, False],[True, True, True]]
out = [False if False in i else True for i in inp]
print (out)

# [False, False, True]
</code></pre>
<p>Alternative (less verbose) as suggested by Jean below:</p>
<pre><code>out = [False not in i for i in inp]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <a class="post-tag" href="/questions/tagged/numpy" rel="tag" title="show questions tagged 'numpy'">numpy</a> with the <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.all.html#numpy.all" rel="nofollow noreferrer"><strong><code>numpy.all</code></strong> function</a>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; arr = np.array([[True, True, False],
... [False, False, False],
... [True, True, True]]
... )
&gt;&gt;&gt; np.all(arr, axis=1)
array([False, False,  True])
</code></pre>
<p>Here thus the <em>i</em>-th element is <code>True</code> if <em>all</em> elements of the <em>i</em>-th row are <code>True</code>, and <code>False</code> otherwise. Note that the list should be <em>rectangular</em> (all sublists should contain the <em>same</em> number of booleans).</p>
<p>In "pure" Python, you can use the <code>all</code> function as well, like:</p>
<pre><code>&gt;&gt;&gt; data = [[True, True, False], [False, False, False], [True, True, True]]
&gt;&gt;&gt; list(map(all, data))
[False, False, True]
</code></pre>
<p>This approach will work as well if the "matrix" is <em>not</em> rectangular. Note that for an <em>empty</em> sublist, this will return <code>True</code>, since <em>all</em> elements in an empty sublist are <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do this with <a href="https://docs.python.org/3.7/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a>:</p>
<pre><code>from functools import reduce

l = [[True, True, False],
    [False, False, False],
    [True, True, True]]

final = list(map(lambda x: reduce(lambda a, b: a and b, x), l))
print(final)
# [False, False, True]
</code></pre>
<p>The benefit here is that you can change the <code>reduce</code> function to something else (say, an OR or something more adventurous).</p>
</div>
<span class="comment-copy">Why without a loop? Loops are made to iterate over variable-length iterables, so if you do it without a loop you would lose the "variable-length" benefit (and have to hardcode the indices). Or are you just after an approach that hides the loop from you?</span>
<span class="comment-copy">careful with <code>map</code> in python 3 though, as it doesn't create a list (but is even better when used within a loop)</span>
<span class="comment-copy">This is clever but not exactly equivalent to <code>x1 and x2 and ... xn</code> for each sublist when you can have other falsy values in the sublists (such as <code>0</code>). Of course, OP explicitly said boolean values, so this is just a sidenote.</span>
<span class="comment-copy">Well the OP said itâ€™s only True or False so my sokution addressed that</span>
