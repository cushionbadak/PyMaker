<div class="post-text" itemprop="text">
<p>I'm trying to create a square matrix, given an integer input.</p>
<p>For example:</p>
<pre><code># for n=3
m = [[1, 2, 3], [4, 5, 6],[7, 8, 9]] 
</code></pre>
<p>my attempt:</p>
<pre><code>m = list(list(range(1*i,(n+1)*i,i)) for i in range(1,n+1))
print(m)
</code></pre>
<p>prints this result:</p>
<pre><code>[[1, 2, 3], [2, 4, 6], [3, 6, 9]]
</code></pre>
<p>The array must be square and consist of sequential integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way:</p>
<pre><code>n = 3
m = [list(range(1+n*i, 1+n*(i+1))) for i in range(n)]

[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>
<p>The main misunderstanding appears to be in <em>spotting the pattern</em>. For example, the first value in each column can be computed via <code>1 + 3 * i</code>, where <code>i</code> iterates over <code>0, 1, 2</code>. For the <code>end</code> argument of <code>range</code>, you just need to add <em>n</em> to the formula, and we can use the identity:</p>
<pre><code>n*i + n = n*(i+1)
</code></pre>
<p>As an aside, if you are happy to use a 3rd party library, this is trivial with NumPy:</p>
<pre><code>import numpy as np

n = 3
A = np.arange(1, n**2 + 1).reshape((n, n))

array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> to create an iterator that yields ascending numbers, and then advance that iterator in a nested <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> using the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> function:</p>
<pre><code>import itertools

n = 3

itr = itertools.count(1)  # start counting at 1
matrix = [[next(itr) for _ in range(n)] for _ in range(n)]
# result: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i rather use numpy (<strong>IT IS NOT A LIST</strong> so i know it's not the required OP, however it can still be interesting)</p>
<pre><code>def func(n):
    l = np.asarray([i for i in range(1,n**2+1)])
    return l.reshape(n,n)

func(3)
&gt;&gt;&gt; array([[1, 2, 3],
          [4, 5, 6],
          [7, 8, 9]])
</code></pre>
<p>take also in consideration the time to compute:</p>
<pre><code>def func(n):
   t = time.time()
   np.arange(1, n**2 + 1).reshape((n, n))
   t1 = time.time()-t
   t = time.time()
   np.asarray([i for i in range(1,n**2+1)]).reshape(n,n)
   t2 = time.time()-t
   t = time.time()
   [list(range(1+n*i, 1+n*(i+1))) for i in range(n)]
   t3 = time.time()-t
   t = time.time()
   itr = itertools.count(1)  # start counting at 1
   matrix = [[next(itr) for _ in range(n)] for _ in range(n)]
   t4 = time.time()-t
   return [t1,t2,t3,t4]

plt.plot([re[0] for re in res],'r',label = 'numpy')
plt.plot([re[1] for re in res],'b',label = 'asarray')
plt.plot([re[2] for re in res],'m',label = 'list')
plt.plot([re[3] for re in res],'g',label = 'itertool')
plt.legend()
plt.savefig('plt1.png')
</code></pre>
<p>will give the following graph for 200 points:
<a href="https://i.stack.imgur.com/pEhvo.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/pEhvo.png"/></a></p>
<p>for large matrix, go straight for the numpy solution of @jpp</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use comprehensive lists. For a zero-filled matrix:</p>
<pre><code>mat = [[0 for i in range(N)] for i in range(N)]
</code></pre>
<p>For a matrix with consecutive elements (zero-based):</p>
<pre><code>mat = [[(N*j + i) for i in range(N)] for j in range(N)]
</code></pre>
<p>For a matrix with consecutive elements (one-based):</p>
<pre><code>mat = [[(N*j + i +1) for i in range(N)] for j in range(N)]
</code></pre>
<p>And for a square print you can use:</p>
<pre><code>&gt;&gt;&gt; print(*mat,sep="\n")
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
</code></pre>
</div>
<span class="comment-copy">@schwobaseggl Obviously the question is <i>How to get the correct output</i>.</span>
<span class="comment-copy">Does it have to have those ascending numbers?</span>
<span class="comment-copy">@Aran-Fey yes ascending.</span>
<span class="comment-copy">@Agile_Eagle The output the OP has is a square matrix. But you are right, they probably want formatted string output.</span>
<span class="comment-copy">Now i see, thank you very much for your detailed explanation.</span>
<span class="comment-copy">using <code>itr = iter(range(1,n*n+1))</code> as the iterator will work as well, without itertools.</span>
<span class="comment-copy">Since you already invested your time in creating a plot, why not make it perfect by adding the legends so that it's easy to see/follow which color belongs to which method.</span>
<span class="comment-copy">so true, i always forget them, will update</span>
<span class="comment-copy">Can you share the code for the plotting procedure, please?</span>
<span class="comment-copy">@GVelascoh Updated</span>
<span class="comment-copy">I was creating an empty matrix as it was not specified in the question what the elements should be.</span>
<span class="comment-copy">I have edited the answer too</span>
