<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15112125/how-to-test-multiple-variables-against-a-value">How to test multiple variables against a value?</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>This is my first every question here on this website. For a bit of background I am very interested in applying machine learning in preventative medicine as I believe this is what the future of medicine has in store. For this reason I have been teaching myself python via Rosalind.info. One question had us creating a function that can calculate the GC content of a sequence. One issue that I had was that when I used the first code, it evaluated to one. However, when I used the second code, it evaluated to the correct answer. If anyone can explain why this is the case that'd be much appreciated! </p>
<p>First try: </p>
<pre><code>n = input("Paste in sequence here!").upper()

def cg_content(sequence):
    gc_count = 0
    total = len(sequence)
    for base in sequence:
        if base =='C' or 'G':
            gc_count += 1
        else:
            gc_count = gc_count
    percentage = float(gc_count)/float(total)
    print(percentage) 

cg_content(n)
</code></pre>
<p>Second Try:</p>
<pre><code>n = input("Paste in sequence here!").upper()

def cg_content(sequence):
    gc_count = 0
    total = len(sequence)
    for base in sequence:
        if base =='C' or base == 'G':
            gc_count += 1
        else:
            gc_count = gc_count
    percentage = float(gc_count)/float(total)
    print(percentage) 

cg_content(n)
</code></pre>
<p>I know it has something to do with the 'or' statement but I thought that both statements are essentially equivalent regardless of whether the '==' was there once or twice. </p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you get different outputs resides in:</p>
<pre><code>if base =='C' or 'G':
</code></pre>
<p>which differs from:</p>
<pre><code>if base =='C' or base == 'G':
</code></pre>
<p>In the first case, you are evaluating the truth value of the expression <code>'G'</code> which is a variable of type <code>char</code>. Python <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">documentation</a> says that:</p>
<blockquote>
<p>By default, an object is considered true unless its class defines
  either a <strong>bool</strong>() method that returns False or a <strong>len</strong>() method
  that returns zero, when called with the object.</p>
</blockquote>
<p>Therefore, <code>if 'G'</code> evaluates always to true.</p>
<hr/>
<p><strong>Funny story</strong>:</p>
<p>Even though <code>'G'</code> evaluates as <code>True</code>, the following expression evaluates as<code>False</code>:</p>
<pre><code>if 'G' == True:
    print("I will be never printed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not equivalent.  The first code is basically:</p>
<p><code>if (base == 'C') or ('G'):</code></p>
<p>or in other words, <code>if base == 'C'</code> is true, or <code>if 'G'</code> is true.  Clearly <code>if 'G'</code> makes no sense.  In general, 0 = false, and non-zero = true, so <code>if 'G'</code> will likely always be true.  </p>
<p>Therefore, you're saying <code>if base == 'C' or True</code> and that will always be true, so the first if clause always wins.  Anything <code>or True</code> is <code>True</code>...even <code>if False or True</code> ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>In python any non-empty string is interpreted as True (affirmative)</p>
<p>thus <code>base == 'C' or 'G'</code> which is same as <code>(base =='C')  or 'G'</code> is always interpreted as True, regardless of what is value of <code>base</code>.</p>
<p>While Python is often intuitive and elegant it follow some strict set of rules rather than common sense in interpreting code. The tradition of interpreting non-null/non-empty values as True value stems from C with which standard Python interpreter tightly inter-operates. It is not very strict or intuitive but often allows for simpler and elegant code.</p>
</div>
