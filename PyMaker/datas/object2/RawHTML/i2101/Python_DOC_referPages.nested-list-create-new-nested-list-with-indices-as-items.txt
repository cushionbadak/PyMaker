<div class="post-text" itemprop="text">
<p>I would like to create a new nested list from an already existing nested list. This new list should include the indices+1 from the existing list.</p>
<p>Example:</p>
<pre><code>my_list = [[20, 45, 80],[56, 29],[76],[38,156,11,387]]
</code></pre>
<p>Result:</p>
<pre><code>my_new_list = [[1,2,3],[1,2],[1],[1,2,3,4]]
</code></pre>
<p>How can I create such a list?</p>
</div>
<div class="post-text" itemprop="text">
<p>save a python loop, force iteration of <code>range</code> (required for python 3) in a list comprehension, so it's faster than a classical double nested comprehension:</p>
<pre><code>my_list = [[20, 45, 80],[56, 29],[76],[38,156,11,387]]

index_list = [list(range(1,len(x)+1)) for x in my_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a few ways to do this, but the first that comes to mind is to enumerate the elements with a starting index of <code>1</code> in a nested list comprehension.</p>
<pre><code>&gt;&gt;&gt; [[index for index, value in enumerate(sub, 1)] for sub in my_list]
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution could be:    </p>
<pre><code>new_list = [list(range(1,len(item)+1)) for item in my_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is are some simple solutions:</p>
<pre><code>&gt;&gt;&gt; lst = [[20, 45, 80],[56, 29],[76],[38,156,11,387]]   
&gt;&gt;&gt; out = [[x+1 for x,_ in enumerate(y)] for y in lst]
&gt;&gt;&gt; out
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; out = [[x+1 for x in range(len(y))] for y in lst]
&gt;&gt;&gt; out
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Using nested list comprehension</h1>
<p>First you want a list with every number from 1 to the length of your sublist. There are several ways to do this with <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</p>
<p>For example</p>
<pre><code>[i for i in range(1, len(sublist) + 1)]
</code></pre>
<p>or</p>
<pre><code>[i + 1 for i in range(len(sublist))]
</code></pre>
<p>Second you want to do this for every sublist inside your <code>my_list</code>. Therefore you have to use nested list comprehension:</p>
<pre><code>&gt;&gt;&gt; my_list = [[20, 45, 80],[56, 29],[76],[38,156,11,387]]
&gt;&gt;&gt; my_new_list = [[i+1 for i in range(len(sublist))] for sublist in my_list]
&gt;&gt;&gt; my_new_list
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
</code></pre>
<h1>Using list comprehension with range</h1>
<p>Another way would be using the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range built-in function</a> as a generator for your sublists:</p>
<pre><code>&gt;&gt;&gt; [list(range(1, len(sublist) + 1)) for sublist in my_list]
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
</code></pre>
<h1>Using map with range</h1>
<p>Or you can use the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map built-in function</a></p>
<pre><code>&gt;&gt;&gt; list(map(
...     lambda sublist: list(range(1, len(sublist) + 1)),
...     my_list
... ))
[[1, 2, 3], [1, 2], [1], [1, 2, 3, 4]]
</code></pre>
</div>
<span class="comment-copy">in that case, underscore the value: <code>[[index for index, _ in enumerate(sub, 1)] for sub in my_list]</code></span>
<span class="comment-copy">@CoryKramer Thanks for the quick answer. Works perfectly :)</span>
<span class="comment-copy">I'd say <code>enumerate</code> is not ideal here as you don't need to extract index <i>and</i> value.</span>
<span class="comment-copy">@ean-Fran√ßois Fabre why should I use the underscore instead? Would appreciate an explanation.</span>
<span class="comment-copy">@jpp What should I use instead of <code>enumerate</code> then?</span>
