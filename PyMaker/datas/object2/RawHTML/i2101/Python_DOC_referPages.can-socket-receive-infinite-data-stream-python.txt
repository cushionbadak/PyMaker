<div class="post-text" itemprop="text">
<p>While trying to attempt to go for python based socket, I have 2 questions which I am not able to resolve. Kindly help me. Here is my sample socket code:  </p>
<pre><code>import socket
import threading
import chardet
bind_ip = '0.0.0.0'
bind_port = 9999

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((bind_ip, bind_port))
server.listen(1)  # max backlog of connections

print (('Listening on {}:{}').format(bind_ip, bind_port))


def handle_client_connection(client_socket):
    request = client_socket.recv(4096 )
    result = chardet.detect(request)
    print(result)
    print (request.decode(result['encoding']))
    client_socket.send('ACK!'.encode(result['encoding']))
    client_socket.close()

while True:
    client_sock, address = server.accept()
    print (('Accepted connection from {}:{}').format(address[0], address[1]))
    client_handler = threading.Thread(
        target=handle_client_connection,
        args=(client_sock,)  # without comma you'd get a... TypeError: handle_client_connection() argument after * must be a sequence, not _socketobject
    )
    client_handler.start()
</code></pre>
<p>The above one is server and the below is client:  </p>
<pre><code>import socket

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

client.connect(('127.0.0.1', 9999))

client.send(str('test data').encode("utf-16"))

response = client.recv(4096)

print(response.decode("utf-16"))
</code></pre>
<p>Now the questions:   </p>
<blockquote>
<p>1) What is the meaning of the number in this statement: <code>client.recv(4096)</code>? What is <code>4096</code>, is it bit or byte of kilobyte for data receiving?
  2) Can I receive infinite data stream through the socket? Meaning, as this statement <code>client.recv(4096)</code>, whatever is the menaing of 4096, may be byte, then the socket will receive the 4096 bytes of data only. I do not have a control on the size of data received through the socket, hence, can I generalize it to accept any size of data through socket?</p>
</blockquote>
<p>Please help me get the answers to above queries. I tried the python documentation for socket but didn't found much. I guess I miss something. Please help me get through it.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to documentation 
"If a message is too long to fit in the supplied buffer, excess bytes may be discarded depending on the type of socket the message is received from."
found here
"<a href="https://linux.die.net/man/2/recv" rel="nofollow noreferrer">https://linux.die.net/man/2/recv</a>"
which was from python 3.6 docs 
"he maximum amount of data to be received at once is specified by bufsize. See the Unix manual page recv(2)"
found here
"<a href="https://docs.python.org/3.6/library/socket.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/socket.html</a>"
so it is a bytes object and it may actually truncate the message depending on the protocol. So message integrity is handled by the next layer up. So presumably you would loose part of a UDP packet, and you would get either a retry or an additional packet for TCP if the message was too large to fit in the buffer.</p>
</div>
<span class="comment-copy">Please read the official docs <a href="https://docs.python.org/3/library/socket.html" rel="nofollow noreferrer">here</a>. There are many tutorials on sockets online so you can familiarise with them and with the concept of iteration</span>
<span class="comment-copy"><code>client_socket.close()</code> not an part of <b>infinite loop</b> ! ACK is different thread,  so If you don't send data, you need to check that the connection is Active. Also the packet size cannot be larger than 1600 Bytes. Each sent/received packet is checked and returns a unique Number. Infinite sockets are generally designed as UDP (additional information is ignored). All packets, except for undelayed TCP connections, have a delay of 50 milliseconds (hardware freezing, buffer memory out, Insufficient memory, hardware read latency, etc.).</span>
<span class="comment-copy">1.byte     2.you can , use things like <code>while 1: recv(4096)</code></span>
<span class="comment-copy">@obgnaw yes but need 2 thread for send/receive, otherwise is not an <b>infinite loop</b> . <code>2 thread</code> vs <code>2 socket</code> which is better ? On TCP connection : <b>Only 1 (one) job can do(read/write), so totaly **synchronous</b> proccess !</span>
<span class="comment-copy">@dsgdfg usually,we receive data,then handle it,and send the response.so we don't need it to be infinite,if must be,use 2 socket.</span>
