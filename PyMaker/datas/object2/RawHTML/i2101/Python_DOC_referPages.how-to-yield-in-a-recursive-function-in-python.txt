<div class="post-text" itemprop="text">
<p>So I have a dictionary:</p>
<pre><code>{'a': {'b': {'c': 'd', 'e': 'f'}}}
</code></pre>
<p>I need to create a dictionary as follows:</p>
<pre><code>{'c':'d', 'e','f'}
</code></pre>
<p>It can go deeper up to any level but I should always get the key value pair at the maximum depth. So I wrote a function:</p>
<pre><code>def boil_down_array(key, data):
    if type(data) == dict:
        for key, item in data.items():
            boil_down_array(key, item)
    else:
        yield {key:data}
</code></pre>
<p>Now the problem is, once it goes in recursion, the <code>yield</code> is lost. How do I yield that dictionary again? All I get is a generator which is not what I want. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer"><code>yield from</code></a> with your recursive call, otherwise you are just ignoring the result of the recursive call:</p>
<pre><code>def boil_down_array(key, data):
    if type(data) == dict:
        for key, item in data.items():
            yield from boil_down_array(key, item)
    else:
        yield {key: data}
</code></pre>
<p>This is only available in Python &gt; 3.3, but essentially just a short hand for simply yielding from an extra loop:</p>
<pre><code>for key, item in data.items():
    for x in boil_down_array(key, item):  # just exhaust the recursive generator
        yield x  # and "re-yield" what it produces
</code></pre>
<p>In order to achieve your desired data structure, you might be better off yielding pairs instead of <code>dicts</code>, so you can transform the result more easily to the resulting <code>dict</code>:</p>
<pre><code>yield key, data
</code></pre>
<p>Then you can use it like:</p>
<pre><code>result = dict(boil_down_array(None, input_dict))
</code></pre>
<p>An even simpler recursive approach will just return a complete <code>dict</code>:</p>
<pre><code>def boil_down_nested(dct):
    result = {}
    for k, v in dct.items():
        if isinstance(v, dict):
            result.update(boil_down_nested(v))
        else:
            result[k] = v
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are ignoring the generator object that the recursive call produces:</p>
<pre><code>for key, item in data.items():
    boil_down_array(key, item)  # creates a generator object
</code></pre>
<p>so the recursive call is not actually executed (the code in your generator is never executed for that call).</p>
<p>You want to use <code>yield from</code> to <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">delegate iteration</a> to that call:</p>
<pre><code>for key, item in data.items():
    yield from boil_down_array(key, item)
</code></pre>
<p><code>yield from</code> moves control from the current generator to the iterator that the expression after <code>yield from</code> produces; here that's your recursive generator.</p>
<p><code>yield from</code> requires Python 3.3 or newer. If you are using Python 2 or an older Python 3 release, you can also add another loop to explicitly yield each result produced by iteration:</p>
<pre><code>for key, item in data.items():
    for result in boil_down_array(key, item):
        yield result
</code></pre>
<p>I'd also use <code>isinstance(data, dict)</code> rather than use <code>type(...) ==</code>, to allow for subclasses:</p>
<pre><code>def boil_down_array(key, data):
    if isinstance(data, dict):
        for key, item in data.items():
            yield from boil_down_array(key, item)
    else:
        yield {key: data}
</code></pre>
<p>Note that your code doesn't actually produce a dictionary as output. It produces an <em>iterable</em> of single key-value dictionaries:</p>
<pre><code>&gt;&gt;&gt; d = {'a': {'b': {'c': 'd', 'e': 'f'}}}
&gt;&gt;&gt; list(boil_down_array('v', d))
[{'c': 'd'}, {'e': 'f'}]
</code></pre>
<p>The <code>key</code> argument from the outermost call is redundant here too, as you replace it with the key of the current iteration.</p>
<p>If you do need to stick with a generator function, then at least produce <code>(key, value)</code> tuples and don't bother with recursing when the <em>value</em> is not a dictionary (so test before you recurse), to remove the need to pass along the key; the remaining <code>data</code> argument is now assumed to be a dictionary, always:</p>
<pre><code>def boil_down_nested(data):
    for key, value in data.items():
        if isinstance(value, dict):
            yield from boil_down_nested(value)
        else:
            yield (key, value)
</code></pre>
<p>and use <code>dict(boil_down_nested(input_dict))</code> to produce a new dictionary from the key-value tuples the generator now outputs:</p>
<pre><code>&gt;&gt;&gt; next(boil_down_nested(d))  # first resulting key-value pair
('c', 'd')
&gt;&gt;&gt; dict(boil_down_nested(d))  # all key-value pairs into a dictionary.
{'c': 'd', 'e': 'f'}
</code></pre>
<p><em>Without</em> recursion, you can use a stack to track nested dictionaries still to process; this makes it much easier to just output a dictionary as a result directly:</p>
<pre><code>def boil_down_nested_dict(d):
    stack = [d]
    output = {}
    while stack:
        for key, value in stack.pop().items():
            if isinstance(value, dict):
                stack.append(value)  # process this value next
            else:
                output[key] = value
    return output
</code></pre>
<p>No separate <code>dict()</code> call required anymore:</p>
<pre><code>&gt;&gt;&gt; boil_down_nested_dict(d)
{'c': 'd', 'e': 'f'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that you do not necessarily need to use <code>yield</code>:</p>
<pre><code>def last(d):
  c = [i for b in d.items() for i in ([b] if not isinstance(b[-1], dict) else last(b[-1]))]
  return c

print(dict(last({'a': {'b': {'c': 'd', 'e': 'f'}}})))
</code></pre>
<p>Output:</p>
<pre><code>{'c': 'd', 'e': 'f'}
</code></pre>
</div>
<span class="comment-copy">But that returns a generator object instead of a dictionary</span>
<span class="comment-copy">Thank you so much!</span>
