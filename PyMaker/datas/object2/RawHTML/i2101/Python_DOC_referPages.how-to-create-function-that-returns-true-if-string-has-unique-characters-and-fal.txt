<div class="post-text" itemprop="text">
<p>For example: <code>"xwzfyfjvmehjnscfdvyosifv"</code> should return <code>False</code>, since it has several <code>"f"</code> (among other repeted chars) </p>
<p>while <code>"fnyqov"</code> should return True.</p>
<p>My problem is that most of the time my code works, but <code>"xwzfyfjvmehjnscfdvyosifv"</code> keeps returnig <code>True</code>.</p>
<p>Higher and lower case should be threated as equal, so <code>"woOman"</code> should return <code>False</code>.</p>
<p>Here is my code: </p>
<pre><code>def is_isogram(string):
    string = string.lower()
    if string == "":
        return True
    for i in string:
        if string.count(i) &gt;= 2:
            return False
        elif is_repeated(string) == True:
            return False
        else: 
            return True

def is_repeated(string):
    last_letter = ""
    for i in string:
        if last_letter.lower() == i.lower():
            return True
            break
        last_letter = i
    return False

print(is_isogram("xwzfyfjvmehjnscfdvyosifv"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def is_unique(test):
    test = test.lower()
    for c in test:
        if test.count(c) != 1:
            return False
    return True

test1 = "xwzfyfjvmehjnscfdvyosifv"
test2 = "woOman"
test3 = "abcdefghijklmnop"

is_unique(test1)
&gt;&gt;&gt;False
is_unique(test2)
&gt;&gt;&gt;False
is_unique(test3)
&gt;&gt;&gt;True
</code></pre>
<p>Or use set()</p>
<pre><code>len(set(test1.lower()))==len(test1)
&gt;&gt;&gt;False
len(set(test2.lower()))==len(test2)
&gt;&gt;&gt;False
len(set(test3.lower()))==len(test3)
&gt;&gt;&gt;True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set</code>:</p>
<pre><code>def unique(s):
    return len(set(s.lower())) == len(s)
</code></pre>
<p><code>set</code> will remove duplicates, so you can compare its length to the original.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>def func(string):
    if len(set(string.lower())) == len(string.lower()):
        return True
    else:
        return False
</code></pre>
</div>
<span class="comment-copy"><code>if len(set(string)) != len(string): </code> ... Use <code>string.lower()</code> for case-insensitive set build.</span>
<span class="comment-copy">Thank you for your comment @zwer, I use string.lower() in the beginning of the function to deal with that problem. I didn't really understand where <code>if len(set(string)) != len(string):</code> fits and how it actually would solve my problem.</span>
<span class="comment-copy">Sets can store only unique values so turning your string into a set would get rid off the duplicates - consequently, if there were any duplicates its length will differ than the length of the original string. I suggest you to do some read up on Python data structures, specifically sets in this case to understand it better. You can start with the <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer"><code>official documentation</code></a>.</span>
<span class="comment-copy">Such a simple problem to solve and I spent hours there... thanks a lot!</span>
<span class="comment-copy">NOTE: <b>Do not</b> use the first approach with <a href="https://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow noreferrer"><code>str.count()</code></a> - it's incredibly inefficient (<code>O(nÂ²)</code>) for such a simple task.</span>
<span class="comment-copy">need to change <code>len(set(s))</code> to <code>len(set(s.lower()))</code> as "woOman"  would return True</span>
<span class="comment-copy">That's correct, edited.</span>
<span class="comment-copy">Why the whole <code>if .. else</code> play when you can directly return the comparison result, i.e. <code>return len(set(string)) != len(string)</code> ? Also, no need for <code>string.lower()</code> call on the direct length comparison as it won't change the length of the string.</span>
<span class="comment-copy">This gives the opposite results the OP wants. <code>xwzfyfjvmehjnscfdvyosifv</code> is returning <code>True</code> and <code>fnyqov</code> is returning <code>False</code>. Should be the other way around</span>
<span class="comment-copy">@zwer I wrote it this way so he may understand it better :')</span>
<span class="comment-copy">@Wondercricket Thanks, I just edited it</span>
