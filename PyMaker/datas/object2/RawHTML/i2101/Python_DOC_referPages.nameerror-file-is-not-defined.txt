<div class="post-text" itemprop="text">
<p>I'm trying to build a relative path. When running the following line in my .py script</p>
<pre><code>this_path = os.path.abspath(os.path.dirname(__file__))
</code></pre>
<p>I get a name error. It used to work just a few days ago when I set it up but now it doesn't any longer. I am not executing this in my shell, just running my script as usually. </p>
<pre><code> os.path.dirname(sys.argv[0]) 
</code></pre>
<p>only returns an empty string. When I use <code>"__file__"</code> 
instead, it returns the home directory but not the path to my file. I thought <code>__file__</code> is set to the filepath as soon as I load a module in my script. Anyone know where I'm going wrong?</p>
<p>More info: my .py script is in a folder in "C:/Users/corr/Documents/Uni/Thesis/Code/" I want to construct a relative path so I can access the data files in folder "C:/Users/corr/Documents/Uni/Thesis/Data/". When I set up the script, the following lines worked:</p>
<pre><code>this_path = os.path.abspath(os.path.dirname(__file__))
path = os.path.join(this_path, "../Data")
</code></pre>
<p>Now though, when I run the first line I get a NameError: <code>__file__</code> not defined. When I run the same line with <code>"__file__"</code> instead, it returns "C:\Users\corr". Also, I am executing my script in the Spyder environment, as this is where I usually work.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__file__</code> is <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">set for <em>modules</em></a>, not scripts, which are supposed to use <code>sys.argv[0]</code>.  (In some cases, <code>argv[0]</code> is the basename used to <em>find</em> a program via <code>PATH</code>.)  Spyder apparently sets it to an empty string instead (or, in one <a href="https://github.com/spyder-ide/spyder/issues/3987" rel="nofollow noreferrer">buggy version</a> sets <code>argv</code> to an empty <em>list</em>), so you might have to do silly things like</p>
<pre><code>def f(): pass
print(f.__code__.co_filename)
</code></pre>
<p>Meanwhile, using <code>"__file__"</code> (the string literal) just means a file by that name.  <code>path.dirname</code> returns an empty string for it (since it has no slashes), which many Python functions (like <code>abspath</code>) interpret to mean the current working directory (which for Spyder is evidently your home directory).</p>
</div>
<span class="comment-copy">please provide more info : like dirs structure, command passed to run script etc.</span>
<span class="comment-copy">What is the command line used to run the script?</span>
<span class="comment-copy">Thanks for your time. Unfortunately, I have no idea - I use the Spyder environment and just hit F5 whenever I want my script to run (Spyder uses IPython). Your question brought me to a different solution though -  using the external system terminal instead of IPython: <a href="https://stackoverflow.com/questions/52117759/running-scripts-in-spyder-using-windows-command-prompt-or-powershell" title="running scripts in spyder using windows command prompt or powershell">stackoverflow.com/questions/52117759/…</a></span>
<span class="comment-copy">with the failing setup, <code>sys.argv[0]</code> returns an empty string <code>''</code>. (type is str)</span>
<span class="comment-copy">(<i>Spyder maintainer here</i>) This looks like a bug, but not in Spyder but probably in IPython/ipykernel. Please open an issue in our <a href="https://github.com/spyder-ide/spyder/issues" rel="nofollow noreferrer">issues tracker</a> if you want this solved.</span>
<span class="comment-copy">Thanks for your time and effort. This didn't really help (undoubtedly because I don't fully grasp my own problem) but I still appreciate your help. It all works when I just run it in the command line with <code>python file.py</code>. Must be something in the way I set up my working process in Spyder.</span>
<span class="comment-copy">@corr: You’re right that Spyder is causing the issue, but did you try the <code>co_filename</code> approach?</span>
<span class="comment-copy">@DavisHerring, thanks for pointing out to a bug we solved almost two years ago. That's really something...</span>
<span class="comment-copy">By the way, both <code>__file__</code> and <code>sys.argv[0]</code> work as expected when a file is run through <code>F5</code> or <code>Run &gt; Run</code> and not in directly in our console. Davis, did you at least take the time to verify that?</span>
<span class="comment-copy">@CarlosCordoba: I pointed out the bug because its discussion was the only information I could find about the handling of <code>argv</code> at all!  I have never used Spyder—I don’t think that disqualifies me from explaining the standard ways of getting information about Python scripts and modules.  If you know how to manipulate Spyder to address the issue (which <i>does</i> happen, it seems, with F5) more easily, by all means write an answer—or edit mine if that makes more sense.</span>
