<div class="post-text" itemprop="text">
<p>I am working on a project where I want to take in a string such as "F100&lt;30S30"</p>
<p>F100 would move  the turtle forward by 100, &lt;30 would rotate the turtle 30 degrees, and S30 would draw a circle with the radius of 30. </p>
<p>I can get the program to interpret one command, for example F100, but I cannot get it to interpret a long string as shown above. What ways can I go about interpreting this. Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know what kinds of commands your turtle can take, so this example may not exactly fit your use case. But from what I can see, you could use regular expressions to solve this problem.</p>
<p>Let's say a command consists of two parts: a character to indicate the operation (<code>F</code>, <code>&lt;</code>, <code>S</code>, etc.), and a number to indicate the magnitude (<code>100</code>, <code>30</code>, etc.). Your string has several of these back-to-back. What we can do is build a regular expression that will recognize all instances of this operation-number pattern in your string.</p>
<p>Using only the commands <code>F</code>, <code>&lt;</code>, and <code>S</code>, the following regular expression will work:</p>
<pre><code>regex = r'([FS&lt;]\d+)'
</code></pre>
<p>Let's unpack this. </p>
<ul>
<li>First, <code>r'...'</code> designates this string as a "raw string", which is what we typically use for regular expressions. This means characters within the string that would normally be escape characters, like <code>\</code>, will not be treated as such.</li>
<li>Next, the parentheses <code>()</code> mark whatever's inside of them as a regex <em>match</em> - meaning that, when we pass through the string, anything matching the pattern inside the parentheses will be saved and outputted. </li>
<li>Inside the parentheses, the square brackets <code>[]</code> denote a group of characters - this will match any character contained inside the brackets. So, in this case, the regex will look for a <code>F</code>, <code>S</code>, or <code>&lt;</code>.</li>
<li>After looking for that character, we look for a number. <code>\d</code> is a shorthand for <code>[0123456789]</code> - that is, it matches any digit. </li>
<li><code>+</code> is a sign we attach to <code>\d</code>. This tells the regex to be "greedy", which means to include as many digits as possible instead of just one. </li>
</ul>
<p>You can now use python's <code>re</code> library to find all matches in the string. The <code>findall</code> method is what we need here: it takes one regex string and one search string, and returns, in order, a list of patterns from the search string that match the regex string.</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; search = 'F100&lt;30S30'
&gt;&gt;&gt; regex = r'([FS&lt;]\d+)'
&gt;&gt;&gt; commands = re.findall(regex, search)
&gt;&gt;&gt; print(commands)
['F100', '&lt;30', 'S30']
</code></pre>
<p>Now, you've turned that one string into a list (<code>commands</code>) of smaller strings, each of which represents one command. You can now iterate through <code>commands</code> and execute each command individually.</p>
<p>For more information on regular expressions in python, you can look to <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">the <code>re</code> module's documentation</a>.</p>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/on-topic">On topic</a>, <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a>, and <a href="https://codeblog.jonskeet.uk/2010/08/29/writing-the-perfect-question/" rel="nofollow noreferrer">... the perfect question</a> apply here. StackOverflow is not a design, coding, research, or tutorial resource. Search for "parsing input Python", and you'll get appropriate tutorials to move you along.</span>
