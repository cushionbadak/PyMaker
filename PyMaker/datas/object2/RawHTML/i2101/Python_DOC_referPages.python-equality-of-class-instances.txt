<div class="post-text" itemprop="text">
<p>When writing custom classes it is often important to allow equivalence by means of the <code>==</code> and <code>!=</code> operators. In Python, this is made possible by implementing the <code>__eq__</code> and <code>__ne__</code> special methods, respectively. The easiest way I've found to do this is the following method:</p>
<pre><code>class Foo:
    def __init__(self, item):
        self.item = item

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __ne__(self, other):
        return not self.__eq__(other)
</code></pre>
<p>Do you know of more elegant means of doing this? Do you know of any particular disadvantages to using the above method of comparing <code>__dict__</code>s?</p>
<p><strong>Note</strong>: A bit of clarification--when <code>__eq__</code> and <code>__ne__</code> are undefined, you'll find this behavior:</p>
<pre><code>&gt;&gt;&gt; a = Foo(1)
&gt;&gt;&gt; b = Foo(1)
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a == b
False
</code></pre>
<p>That is, <code>a == b</code> evaluates to <code>False</code> because it really runs <code>a is b</code>, a test of identity (i.e., "Is <code>a</code> the same object as <code>b</code>?").</p>
<p>When <code>__eq__</code> and <code>__ne__</code> are defined, you'll find this behavior (which is the one we're after):</p>
<pre><code>&gt;&gt;&gt; a = Foo(1)
&gt;&gt;&gt; b = Foo(1)
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a == b
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider this simple problem:</p>
<pre><code>class Number:

    def __init__(self, number):
        self.number = number


n1 = Number(1)
n2 = Number(1)

n1 == n2 # False -- oops
</code></pre>
<p>So, Python by default uses the object identifiers for comparison operations:</p>
<pre><code>id(n1) # 140400634555856
id(n2) # 140400634555920
</code></pre>
<p>Overriding the <code>__eq__</code> function seems to solve the problem:</p>
<pre><code>def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, Number):
        return self.number == other.number
    return False


n1 == n2 # True
n1 != n2 # True in Python 2 -- oops, False in Python 3
</code></pre>
<p>In <em>Python 2</em>, always remember to override the <code>__ne__</code> function as well, as the <a href="https://docs.python.org/2.7/reference/datamodel.html#object.__ne__" rel="noreferrer">documentation</a> states:</p>
<blockquote>
<p>There are no implied relationships among the comparison operators. The
  truth of <code>x==y</code> does not imply that <code>x!=y</code> is false. Accordingly, when
  defining <code>__eq__()</code>, one should also define <code>__ne__()</code> so that the
  operators will behave as expected.</p>
</blockquote>
<pre><code>def __ne__(self, other):
    """Overrides the default implementation (unnecessary in Python 3)"""
    return not self.__eq__(other)


n1 == n2 # True
n1 != n2 # False
</code></pre>
<p>In <em>Python 3</em>, this is no longer necessary, as the <a href="https://docs.python.org/3/reference/datamodel.html#object.__ne__" rel="noreferrer">documentation</a> states:</p>
<blockquote>
<p>By default, <code>__ne__()</code> delegates to <code>__eq__()</code> and inverts the result
  unless it is <code>NotImplemented</code>. There are no other implied
  relationships among the comparison operators, for example, the truth
  of <code>(x&lt;y or x==y)</code> does not imply <code>x&lt;=y</code>.</p>
</blockquote>
<p>But that does not solve all our problems. Let’s add a subclass:</p>
<pre><code>class SubNumber(Number):
    pass


n3 = SubNumber(1)

n1 == n3 # False for classic-style classes -- oops, True for new-style classes
n3 == n1 # True
n1 != n3 # True for classic-style classes -- oops, False for new-style classes
n3 != n1 # False
</code></pre>
<p><strong>Note:</strong> Python 2 has two kinds of classes:</p>
<ul>
<li><p><em><a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">classic-style</a></em> (or <em>old-style</em>) classes, that do <em>not</em> inherit from <code>object</code> and that are declared as <code>class A:</code>, <code>class A():</code> or <code>class A(B):</code> where <code>B</code> is a classic-style class;</p></li>
<li><p><em><a href="https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">new-style</a></em> classes, that do inherit from <code>object</code> and that are declared as <code>class A(object)</code> or <code>class A(B):</code> where <code>B</code> is a new-style class. Python 3 has only new-style classes that are declared as <code>class A:</code>, <code>class A(object):</code> or <code>class A(B):</code>. </p></li>
</ul>
<p>For classic-style classes, a comparison operation always calls the method of the first operand, while for new-style classes, it always calls the method of the subclass operand, <a href="https://stackoverflow.com/a/12984987/78234">regardless of the order of the operands</a>. </p>
<p>So here, if <code>Number</code> is a classic-style class:</p>
<ul>
<li><code>n1 == n3</code> calls <code>n1.__eq__</code>;</li>
<li><code>n3 == n1</code> calls <code>n3.__eq__</code>;</li>
<li><code>n1 != n3</code> calls <code>n1.__ne__</code>;</li>
<li><code>n3 != n1</code> calls <code>n3.__ne__</code>.</li>
</ul>
<p>And if <code>Number</code> is a new-style class:</p>
<ul>
<li>both <code>n1 == n3</code> and <code>n3 == n1</code> call <code>n3.__eq__</code>;</li>
<li>both <code>n1 != n3</code> and <code>n3 != n1</code> call <code>n3.__ne__</code>.</li>
</ul>
<p>To fix the non-commutativity issue of the <code>==</code> and <code>!=</code> operators for Python 2 classic-style classes, the <code>__eq__</code> and <code>__ne__</code> methods should return the <code>NotImplemented</code> value when an operand type is not supported. The <a href="https://docs.python.org/2.7/reference/datamodel.html#the-standard-type-hierarchy" rel="noreferrer">documentation</a> defines the <code>NotImplemented</code> value as:</p>
<blockquote>
<p>Numeric methods and rich comparison methods may return this value if
  they do not implement the operation for the operands provided. (The
  interpreter will then try the reflected operation, or some other
  fallback, depending on the operator.) Its truth value is true.</p>
</blockquote>
<p>In this case the operator delegates the comparison operation to the <em>reflected method</em> of the <em>other</em> operand. The <a href="https://docs.python.org/2.7/reference/datamodel.html#object.__lt__" rel="noreferrer">documentation</a> defines reflected methods as:</p>
<blockquote>
<p>There are no swapped-argument versions of these methods (to be used
  when the left argument does not support the operation but the right
  argument does); rather, <code>__lt__()</code> and <code>__gt__()</code> are each other’s
  reflection, <code>__le__()</code> and <code>__ge__()</code> are each other’s reflection, and
  <code>__eq__()</code> and <code>__ne__()</code> are their own reflection.</p>
</blockquote>
<p>The result looks like this:</p>
<pre><code>def __eq__(self, other):
    """Overrides the default implementation"""
    if isinstance(other, Number):
        return self.number == other.number
    return NotImplemented

def __ne__(self, other):
    """Overrides the default implementation (unnecessary in Python 3)"""
    x = self.__eq__(other)
    if x is not NotImplemented:
        return not x
    return NotImplemented
</code></pre>
<p>Returning the <code>NotImplemented</code> value instead of <code>False</code> is the right thing to do even for new-style classes if <em>commutativity</em> of the <code>==</code> and <code>!=</code> operators is desired when the operands are of unrelated types (no inheritance).</p>
<p>Are we there yet? Not quite. How many unique numbers do we have?</p>
<pre><code>len(set([n1, n2, n3])) # 3 -- oops
</code></pre>
<p>Sets use the hashes of objects, and by default Python returns the hash of the identifier of the object. Let’s try to override it:</p>
<pre><code>def __hash__(self):
    """Overrides the default implementation"""
    return hash(tuple(sorted(self.__dict__.items())))

len(set([n1, n2, n3])) # 1
</code></pre>
<p>The end result looks like this (I added some assertions at the end for validation):</p>
<pre><code>class Number:

    def __init__(self, number):
        self.number = number

    def __eq__(self, other):
        """Overrides the default implementation"""
        if isinstance(other, Number):
            return self.number == other.number
        return NotImplemented

    def __ne__(self, other):
        """Overrides the default implementation (unnecessary in Python 3)"""
        x = self.__eq__(other)
        if x is not NotImplemented:
            return not x
        return NotImplemented

    def __hash__(self):
        """Overrides the default implementation"""
        return hash(tuple(sorted(self.__dict__.items())))


class SubNumber(Number):
    pass


n1 = Number(1)
n2 = Number(1)
n3 = SubNumber(1)
n4 = SubNumber(4)

assert n1 == n2
assert n2 == n1
assert not n1 != n2
assert not n2 != n1

assert n1 == n3
assert n3 == n1
assert not n1 != n3
assert not n3 != n1

assert not n1 == n4
assert not n4 == n1
assert n1 != n4
assert n4 != n1

assert len(set([n1, n2, n3, ])) == 1
assert len(set([n1, n2, n3, n4])) == 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to be careful with inheritance:</p>
<pre><code>&gt;&gt;&gt; class Foo:
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

&gt;&gt;&gt; class Bar(Foo):pass

&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f == b
True
&gt;&gt;&gt; b == f
False
</code></pre>
<p>Check types more strictly, like this:</p>
<pre><code>def __eq__(self, other):
    if type(other) is type(self):
        return self.__dict__ == other.__dict__
    return False
</code></pre>
<p>Besides that, your approach will work fine, that's what special methods are there for.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way you describe is the way I've always done it. Since it's totally generic, you can always break that functionality out into a mixin class and inherit it in classes where you want that functionality.</p>
<pre><code>class CommonEqualityMixin(object):

    def __eq__(self, other):
        return (isinstance(other, self.__class__)
            and self.__dict__ == other.__dict__)

    def __ne__(self, other):
        return not self.__eq__(other)

class Foo(CommonEqualityMixin):

    def __init__(self, item):
        self.item = item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not a direct answer but seemed relevant enough to be tacked on as it saves a bit of verbose tedium on occasion. Cut straight from the docs...</p>
<hr/>
<p><a href="http://docs.python.org/library/functools.html#functools.total_ordering" rel="nofollow noreferrer">functools.total_ordering(cls)</a></p>
<p><strong>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.</strong> This simplifies the effort involved in specifying all of the possible rich comparison operations:</p>
<p>The class must define one of <strong>lt</strong>(), <strong>le</strong>(), <strong>gt</strong>(), or <strong>ge</strong>(). In addition, the class should supply an <strong>eq</strong>() method.</p>
<p>New in version 2.7</p>
<pre><code>@total_ordering
class Student:
    def __eq__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))
    def __lt__(self, other):
        return ((self.lastname.lower(), self.firstname.lower()) &lt;
                (other.lastname.lower(), other.firstname.lower()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to override both <code>__eq__</code> and <code>__ne__</code> you can override only <code>__cmp__</code> but this will make an implication on the result of ==, !==, &lt; , &gt; and so on.</p>
<p><code>is</code> tests for object identity. This means a <code>is</code> b will be <code>True</code> in the case when a and b both hold the reference to the same object. In python you always hold a reference to an object in a variable not the actual object, so essentially for a is b to be true the objects in them should be located in the same memory location. How and most importantly why would you go about overriding this behaviour?</p>
<p>Edit: I didn't know <code>__cmp__</code> was removed from python 3 so avoid it.</p>
</div>
<div class="post-text" itemprop="text">
<p>From this answer: <a href="https://stackoverflow.com/a/30676267/541136">https://stackoverflow.com/a/30676267/541136</a> I have demonstrated that, while it's correct to define <code>__ne__</code> in terms <code>__eq__</code> - instead of </p>
<pre><code>def __ne__(self, other):
    return not self.__eq__(other)
</code></pre>
<p>you should use:</p>
<pre><code>def __ne__(self, other):
    return not self == other
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that the two terms you're looking for are <strong>equality</strong> (==) and <strong>identity</strong> (is). For example:</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [1,2,3]
&gt;&gt;&gt; a == b
True       &lt;-- a and b have values which are equal
&gt;&gt;&gt; a is b
False      &lt;-- a and b are not the same list object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The 'is' test will test for identity using the builtin 'id()' function which essentially returns the memory address of the object and therefore isn't overloadable.</p>
<p>However in the case of testing the equality of a class you probably want to be a little bit more strict about your tests and only compare the data attributes in your class:</p>
<pre><code>import types

class ComparesNicely(object):

    def __eq__(self, other):
        for key, value in self.__dict__.iteritems():
            if (isinstance(value, types.FunctionType) or 
                    key.startswith("__")):
                continue

            if key not in other.__dict__:
                return False

            if other.__dict__[key] != value:
                return False

         return True
</code></pre>
<p>This code will only compare non function data members of your class as well as skipping anything private which is generally what you want. In the case of Plain Old Python Objects I have a base class which implements __init__, __str__, __repr__ and __eq__ so my POPO objects don't carry the burden of all that extra (and in most cases identical) logic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using subclassing/mixins, I like to use a generic class decorator</p>
<pre><code>def comparable(cls):
    """ Class decorator providing generic comparison functionality """

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not self.__eq__(other)

    cls.__eq__ = __eq__
    cls.__ne__ = __ne__
    return cls
</code></pre>
<p>Usage:</p>
<pre><code>@comparable
class Number(object):
    def __init__(self, x):
        self.x = x

a = Number(1)
b = Number(1)
assert a == b
</code></pre>
</div>
<span class="comment-copy">+1, because I didn't know that dict used memberwise equality for ==, I had assumed it only counted them equal for same object dicts.  I guess this is obvious since Python has the <code>is</code> operator to distinguish object identity from value comparison.</span>
<span class="comment-copy">I think the accepted answer be corrected or reassigned to Algorias' answer, so that the strict type check is implemented.</span>
<span class="comment-copy">Also make sure hash is overridden <a href="http://stackoverflow.com/questions/1608842/types-that-define-eq-are-unhashable-in-python-3-x" title="types that define eq are unhashable in python 3 x">stackoverflow.com/questions/1608842/…</a></span>
<span class="comment-copy"><code>hash(tuple(sorted(self.__dict__.items())))</code> won't work if there are any non-hashable objects among the values of the <code>self.__dict__</code> (i.e., if any of the attributes of the object is set to, say, a <code>list</code>).</span>
<span class="comment-copy">True, but then if you have such mutable objects in your vars() the two objects are not really equal...</span>
<span class="comment-copy">Great summary, but you <a href="https://stackoverflow.com/a/30676267/857390">should implement <code>__ne__</code> using <code>==</code> instead of <code>__eq__</code></a>.</span>
<span class="comment-copy">Three remarks: 1. In Python 3, no need to implement <code>__ne__</code> anymore: "By default, <code>__ne__()</code> delegates to <code>__eq__()</code> and inverts the result unless it is <code>NotImplemented</code>". 2. If one still wants to implement <code>__ne__</code>, a more generic implementation (the one used by Python 3 I think) is: <code>x = self.__eq__(other); if x is NotImplemented: return x; else: return not x</code>. 3. The given <code>__eq__</code> and <code>__ne__</code> implementations are suboptimal: <code>if isinstance(other, type(self)):</code> gives 22 <code>__eq__</code> and 10 <code>__ne__</code> calls, while <code>if isinstance(self, type(other)):</code> would give 16 <code>__eq__</code> and 6 <code>__ne__</code> calls.</span>
<span class="comment-copy">He asked about elegance, but he got robust.</span>
<span class="comment-copy">Very good point and missed by the accepted answer!</span>
<span class="comment-copy">I'd suggest to return NotImplemented if the types are different, delegating the comparison to the rhs.</span>
<span class="comment-copy">@max comparison isn't necessarily done left hand side (LHS) to right hand side (RHS), then RHS to LHS; see <a href="http://stackoverflow.com/a/12984987/38140">stackoverflow.com/a/12984987/38140</a>. Still, returning <code>NotImplemented</code> as you suggest will always cause <code>superclass.__eq__(subclass)</code>, which is the desired behavior.</span>
<span class="comment-copy">If you have a ton of members, and not many object copies sitting around, then it's usually good add an initial an identity test <code>if other is self</code>. This avoids the more lengthy dictionary comparison, and can be a huge savings when objects are used as dictionary keys.</span>
<span class="comment-copy">And don't forget to implement <code>__hash__()</code></span>
<span class="comment-copy">+1: Strategy pattern to allow easy replacement in subclasses.</span>
<span class="comment-copy">isinstance sucks. Why check it? Why not just self.__dict__ == other.__dict__?</span>
<span class="comment-copy">@nosklo: I don't understand.. what if two objects from completely unrelated classes happen to have the same attributes?</span>
<span class="comment-copy">I thought nokslo suggested skipping isinstance. In that case you no longer know if <code>other</code> is of a subclass of <code>self.__class__</code>.</span>
<span class="comment-copy">Another issue with the <code>__dict__</code> comparison is what if you have an attribute that you don't want to consider in your definition of equality (say for example a unique object id, or metadata like a time created stamp).</span>
<span class="comment-copy">However total_ordering has subtle pitfalls: <a href="https://regebro.wordpress.com/2010/12/13/python-implementing-rich-comparison-the-correct-way/" rel="nofollow noreferrer">regebro.wordpress.com/2010/12/13/…</a>. Be aware !</span>
<span class="comment-copy">Because sometimes you have a different definition of equality for your objects.</span>
<span class="comment-copy">the is operator gives you the interpreters answer to object identity, but you are still free to express you view on equality by overriding <b>cmp</b></span>
<span class="comment-copy">In Python 3, "The cmp() function is gone, and the __cmp__() special method is no longer supported." <a href="http://is.gd/aeGv" rel="nofollow noreferrer">is.gd/aeGv</a></span>
<span class="comment-copy">Maybe, except that one can create a class that only compares the first two items in two lists, and if those items are equal, it evaluates to True. This is equivalence, I think, not equality. Perfectly valid in <b>eq</b>, still.</span>
<span class="comment-copy">I do agree, however, that "is" is a test of identity.</span>
<span class="comment-copy">Bit nitpicky, but 'is' tests using id() only if you haven't defined your own is_() member function (2.3+). [<a href="http://docs.python.org/library/operator.html]" rel="nofollow noreferrer">docs.python.org/library/operator.html]</a></span>
<span class="comment-copy">I assume by "override" you actually mean monkey-patching the operator module. In this case your statement is not entirely accurate. The operators module is provided for convenience and overriding those methods does not affect the behavior of the "is" operator. A comparison using "is" always uses the id() of an object for the comparison, this behavior can not be overridden. Also an is_ member function has no effect on the comparison.</span>
<span class="comment-copy">mcrute - I spoke too soon (and incorrectly), you are absolutely right.</span>
<span class="comment-copy">This is a very nice solution, especially when the <code>__eq__</code> will be declared in <code>CommonEqualityMixin</code> (see the other answer). I found this particularly useful when comparing instances of classes derived from Base in SQLAlchemy. To not compare <code>_sa_instance_state</code> I changed <code>key.startswith("__")):</code> to <code>key.startswith("_")):</code>. I had also some backreferences in them and the answer from Algorias generated endless recursion. So I named all  backreferences starting with <code>'_'</code> so that they're also skipped during comparison. NOTE: in Python 3.x change <code>iteritems()</code> to <code>items()</code>.</span>
<span class="comment-copy">@mcrute Usually, <code>__dict__</code> of an instance doesn't have anything that starts with <code>__</code> unless it was defined by the user. Things like <code>__class__</code>, <code>__init__</code>, etc. are not in the instance's <code>__dict__</code>, but rather in its class' <code>__dict__</code>. OTOH, the private attributes can easily start with <code>__</code> and probably should be used for <code>__eq__</code>. Can you clarify what exactly were you trying to avoid when skipping <code>__</code>-prefixed attributes?</span>
