<div class="post-text" itemprop="text">
<p>For example, when I execute <code>frozen = frozenset(('kay', 'snow queen'))</code>, then <code>tuple(frozen)</code>, I get <code>('kay', 'snow queen')</code>. (When / how) is it possible, if ever, for <code>iter(frozen)</code> to produce the items in a different order? (When / how) will <code>tuple(frozen)</code> return <code>('snow queen', 'kay')</code>?</p>
<p>I am using Python 3 almost all of the time, but I would also be curious about Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, the hash values of <code>str</code> objects are salted with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python. Changing hash values affects the iteration order of sets. </p>
<p>So, when hash randomization is on, you will get items in a different order:</p>
<pre><code>$ for i in {1..10}; do python3 -c "frozen = frozenset(('kay', 'snow queen')); print(list(frozen))"; done
['snow queen', 'kay']
['snow queen', 'kay']
['snow queen', 'kay']
['snow queen', 'kay']
['kay', 'snow queen']
['kay', 'snow queen']
['snow queen', 'kay']
['kay', 'snow queen']
['snow queen', 'kay']
['snow queen', 'kay']
</code></pre>
<p>If you <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer">disable it</a>, you will get a repeatable but arbitrary order:</p>
<pre><code>$ export PYTHONHASHSEED=0
$ for i in {1..10}; do python3 -c "frozen = frozenset(('kay', 'snow queen')); print(list(frozen))"; done
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
['kay', 'snow queen']
</code></pre>
<p>Since Python 3.3, hash randomization is enabled by default to <a href="http://ocert.org/advisories/ocert-2011-003.html" rel="nofollow noreferrer">workaround a security vulnerability</a>.</p>
<p>See also: <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-r" rel="nofollow noreferrer">the <code>-R</code> switch to the interpreter</a>.</p>
</div>
<span class="comment-copy">If my intention is that, <i>within the same Python process</i>, I always get the same result with (to continue the example) <code>tuple(frozen)</code>, Then I can simply do <code>tuple(frozen)</code>, <code>iter(frozen)</code>, etc. whenever I want the items in the same order---regardless of the randomization setting. Is this correct?</span>
<span class="comment-copy">Yes, but you're relying on implementation detail.  I would recommend to use an <a href="https://pypi.org/project/orderedset/" rel="nofollow noreferrer">orderedset</a>.</span>
<span class="comment-copy">Thanks for the suggestion. I believe <a href="https://pypi.org/project/orderedset/" rel="nofollow noreferrer">orderedset</a> is more than is necessary for my present application, though, which is to create the (<code>frozen</code>)<code>set</code> once, then use the items in any order (but always in the same order throughout the Python process). I think <code>foo = tuple(frozenset(('kay', 'snow queen')))</code>, thenceforth <code>foo</code>, will do the job. Alternatively, <code>bar = tuple(set(('kay', 'snow queen')))</code>, thenceforth <code>bar</code>. +1 for your informative and useful answer (including comments), though.</span>
