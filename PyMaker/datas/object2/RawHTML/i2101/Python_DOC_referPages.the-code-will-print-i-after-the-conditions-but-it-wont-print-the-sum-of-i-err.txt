<div class="post-text" itemprop="text">
<pre><code>x = int(input("Pick one small number: "))
y = int(input("And a bigger number: "))

if x &gt; y:
    print ("Doesn't work. ")

elif x &lt; y:

    for i in range(x,y):
        if i%7 == 0 and i%5 !=0:
            z = sum(i)
            print (z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably want to sum <code>i</code> one at a time like this:</p>
<pre><code>z = 0
for n in range(x,y):
    if n%7 == 0 and n%5 !=0:
        n += i
        print("Running total:", z)
print("Final total:", z)
</code></pre>
<p>If you want to use <code>sum</code> instead you have to apply it to a list:</p>
<pre><code>filtered_list = []
for n in range(x,y):
    if n % 7 == 0 and n % 5 !=0:
        filtered_list.append(n)
print("Final total:", sum(filtered_list))
</code></pre>
<p>or using a generator expression:</p>
<pre><code>print(sum(n for n in range(x, y) if n%7 == 0 and n%5 !=0))
</code></pre>
<p>There is also a shortcut to get all the multiples of 7 within <code>range(x, y)</code> :</p>
<pre><code>multiples = range(x + 7 - x % 7, y, 7)
</code></pre>
<p>Then you only have to check the second condition (not divisible by 5)</p>
<pre><code>print(sum(n for n in multiples if n%5 !=0))
</code></pre>
<p>You could also create 2 sets and calculate the difference:</p>
<pre><code>def multiples(start, stop, d):
    """ This function returns the set of all multiples of d between start and stop """
    return set(range(start + divisor - start % divisor, stop, divisor))

print(sum(multiples(x, y, 7) - multiples(x, y, 5))  
</code></pre>
<p>Finally a more maths approach. Your <code>if</code> condition is selecting the multiples of 7 and filtering out the numbers that are multiples of both 5 and 7. This is equivalent to subtracting the sum of the multiples of the least common multiple of 5 and 7 (which is 35) from the sum of the multiples of 7 within the range...</p>
<pre><code># we need a function from the math module that calculates the greatest common denominator
# we will use this to help calculate the least common multiple
from math import gcd 

def sum_of_multiples(start, stop, mult):
    """ Calculate sum of multiples of mult that lie in the range start, stop """
    start //= mult
    stop //= mult
    return mult * (stop - start) * (stop + start + 1) / 2

lcm = 5 * 7 // gcd(5, 7)   # The least common multiple of 5 and 7 = 35
print("Total:", sum_of_multiples(x, y, 7) - sum_of_multiples(x, y, lcm))
</code></pre>
<p>(Of course in the above you could just write 35 instead of <code>lcm</code>. I show the calculation in case you want to apply this using other numbers.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting that exception because sum expects an object that can be iterated through or in other words can return an iterator, such as a list, or tuple.</p>
<p>A proper way would have been to utilize the iterator object returned by the range function to get the cumulative value of all the numbers between x and y which are factors for  7 but not factors of 5.</p>
<pre><code>x = int(input("Pick one small number: "))
y = int(input("And a bigger number: "))

if x &gt; y:
    print ("Doesn't work. ")

elif x &lt; y:
    print(sum([i for i in range(x, y) if i%7 == 0 and i%5 != 0]))
</code></pre>
</div>
<span class="comment-copy">What are you trying to do with <code>z = sum(i)</code>.</span>
<span class="comment-copy">The issue is that an integer is not iterable. The <code>sum</code> function can take in iterable objects like an array of integers, a tuple of integers, etc., not a single integer, or comma separated integers.</span>
<span class="comment-copy">Maybe you want <code>z = sum(i for i in range(x, y) if i % 7 == 0 and i % 5 != 0)</code>? Or just use <code>z = 0 ... z += i</code> to sum i one at a time</span>
<span class="comment-copy">Please provide some more context in your post rather than just your program (just the title doesn't cover it all!).</span>
<span class="comment-copy">Like what exactly are you trying to accomplish? Sum the numbers between <code>x</code> and <code>y</code> that are divisible by both 7 and 5?</span>
<span class="comment-copy">Thanks! I was able to use a generator expression to do what I needed, but I couldn't understand why this code wouldn't work. I think I'm having a bit of trouble understanding what an iterator is/how it should work. The generator expressions seems to use the same conditions?</span>
<span class="comment-copy"><code>i</code> in your code takes one value at a time. So <code>sum(i)</code> when <code>i</code> is 1, is like saying "the sum of 1", which doesn't make sense. The <code>sum</code> function expects something like a list of numbers (an iterable). The generator expression represents an iterable that goes through the different numbers in the range that match the condition. See the <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs on list comprehensions</a> (which are similar to generator expressions).</span>
<span class="comment-copy">Thanks! I was able to use a generator expression to do what I needed, but I couldn't understand why this code wouldn't work. I think I'm having a bit of trouble understanding what an iterator is/how it should work.</span>
