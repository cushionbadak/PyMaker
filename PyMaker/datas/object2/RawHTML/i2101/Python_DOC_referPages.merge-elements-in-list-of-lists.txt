<div class="post-text" itemprop="text">
<p>I have a list of lists like this:</p>
<pre><code>A = [('b', 'a', 'a', 'a', 'a'), ('b', 'a', 'a', 'a', 'a')]
</code></pre>
<p>How can I merge the all elements of each inner list to get result  <code>A = ['baaaa', 'baaaa']</code>? 
I would prefer to do this outside of a loop, if possible, to speed up the code. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to write a loop you can use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><strong><code>map</code></strong></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><strong><code>str.join</code></strong></a></p>
<pre><code>&gt;&gt;&gt; list(map(''.join, A))
['baaaa', 'baaaa']
</code></pre>
<p>However, the loop using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> is almost as short to write, and I think is clearer:</p>
<pre><code>&gt;&gt;&gt; [''.join(e) for e in A]
['baaaa', 'baaaa']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2.7/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; ["".join(t) for t in A]
['baaaa', 'baaaa']
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; list(map(''.join, A)        #with map
['baaaa', 'baaaa']
&gt;&gt;&gt;
&gt;&gt;&gt; help(str.join)
Help on method_descriptor:

join(...)
    S.join(iterable) -&gt; str

    Return a string which is the concatenation of the strings in the
    iterable.  The separator between elements is S.

&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the join method of the empty string. This means: "make a string concatenating every element of a tuple (for example <code>('b', 'a', 'a', 'a', 'a')</code> ) with <code>''</code> (empty string) between each of them.</p>
<p>Thus, what you are looking for is:</p>
<pre><code> [''.join(x) for x in A]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you prefer functional programming. You can use the function <strong>reduce</strong>. Here is how you can achieve the same result using reduce function as follows. </p>
<blockquote>
<p>Note that, reduce was a built in function in python 2.7 but in python
  3 it is moved to library functools</p>
</blockquote>
<pre><code>from functools import reduce
</code></pre>
<p>It is only required to import reduce if you are using python 3 else no need to import reduce from functools</p>
<pre><code>A = [('b', 'a', 'a', 'a', 'a'), ('b', 'a', 'a', 'a', 'a')]
result = [reduce(lambda a, b: a+b, i) for i in A]
</code></pre>
<p>If you don't want to use loop or even list comprehension, here is another way</p>
<pre><code> list(map(lambda i: reduce(lambda a, b: a+b, i), A))
</code></pre>
</div>
<span class="comment-copy">You can never have <code>A = [baaaa, baaaa]</code> but you can have <code>A = ['baaaa', 'baaaa']</code>.</span>
