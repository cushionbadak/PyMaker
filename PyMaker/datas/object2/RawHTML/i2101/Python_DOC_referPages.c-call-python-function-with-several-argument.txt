<div class="post-text" itemprop="text">
<p>I want to call the Python function in C++ using python.h but there are some problems.</p>
<p>Here is my Python function sample</p>
<pre><code>def function1(tuple1, tuple2, string1, string2 ,string3, double1, string4 = ""):
   ...
</code></pre>
<p>and the C++ sample</p>
<pre><code>double function_adapter(const vector&lt;double&gt; &amp;vec1, const vector&lt;double&gt; &amp;vec2, const string &amp;string1, const string &amp;string2, const string &amp;string3, const double double1, const string &amp;string4)
{
    Py_Initial();
    PyRun_SimpleString("import sys");
    PyRun_SimpleString("sys.path.append(\"./\")");
    PyObject *pModule, *pFunc, *pRes;
    pModule = PyImport_Import(PyString_FromString("PythonFile"));
    pFunc = PyObject_GetAttrString(pModule, "function1");
    PyObject *pArgs = PyTuple_New(7);
    PyObject *pVec1 = PyTuple_New(vec1.size());
    for(size_t i = 0; i &lt; vec1.size(); ++i) {
        PyTuple_SetItem(pVec1, i, Py_BuildValue("f", vec1[i]));
    }
    PyObject *pVec2 = PyTuple_New(vec2.size());
    for(size_t i = 0; i &lt; vec2.size(); ++i) {
        PyTuple_SetItem(pVec2, i, Py_BuildValue("f", vec2[i]));
    }
    PyObject *pString1 = Py_BuildValue("s", string1);
    PyObject *pString2 = Py_BuildValue("s", string2);
    PyObject *pString3 = Py_BuildValue("s", string3);
    PyObject *pDouble1 = Py_BuildValue("f", double1);
    PyObject *pString4 = Py_BuildValue("s", string4);
    PyTuple_SetItem(pArgs, 0, pVec1);
    PyTuple_SetItem(pArgs, 1, pVec2);
    PyTuple_SetItem(pArgs, 2, pString1);
    PyTuple_SetItem(pArgs, 3, pString2);
    PyTuple_SetItem(pArgs, 4, pString3);
    PyTuple_SetItem(pArgs, 5, pDouble1);
    PyTuple_SetItem(pArgs, 6, pString4);

    pRes = PyObject_CallObject(pFunc, pArgs);
    if(pRes == NULL)    {
        return -2;
    }
    int res = PyLong_AsLong(pRes);

    Py_DecRef(pModule);
    .
    .
    .

    Py_Finalize();
    return res;
}
</code></pre>
<p>But the pRes returns NULL. And the PyObject_CallObject is just like a blackbox, I can't step in to look how it works.</p>
<p>So I want to ask that is there anything wrong in my code?</p>
<p>And the arguments preparation is right or not? (There are few examples in this case on the internet.)</p>
</div>
<div class="post-text" itemprop="text">
<p>A CPython API function that returns NULL means that an error has occurred. You can use the <a href="https://docs.python.org/3/c-api/exceptions.html" rel="nofollow noreferrer"><code>PyErr_*</code></a> set of API functions to query this exception.</p>
<p>For debugging, the most useful is probably <code>PyErr_Print()</code>, which will just print the exception and stack trace (if any) to stderr.</p>
<p>Make sure to double check that <code>pModule</code> and <code>pFunc</code> are not NULL. The exception may have occurred when trying to import the module or get the function from the module. CPython does not raise exceptions, it just returns NULL on an error. So checking the return value of C-API functions is important.</p>
</div>
<span class="comment-copy">You may want to stick with CPython, but FYI PyBind makes this sort of thing wonderfully easy. <a href="https://github.com/pybind/pybind11/blob/master/docs/advanced/embedding.rst" rel="nofollow noreferrer">PyBind11::embed doc</a></span>
