<div class="post-text" itemprop="text">
<p>How to print the first letter from a list of random names?<br/>
This is what I have done so far and I can print the names randomly but need to print the first letter and not the whole name.</p>
<pre><code>import random

names = ['Ed Sheeran', 'Beyonce', 'Adele', 'Rhianna']
secure_random = random.SystemRandom()
print(secure_random.choice (names))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use:</p>
<pre><code>print(random.choice(names)[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Randomize the list and then print the first character-</p>
<pre><code>import random
names = ['Ed Sheeran', 'Beyonce', 'Adele', 'Rhianna']
random_names = random.sample(names, len(names))
#If you are okay with mutating the original list then look into "shuffle"
for name in random_names:
    print(name[0])
</code></pre>
<p>Output-</p>
<pre><code>E
R
A
B
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a quickie because this is that I think you're looking for. You can put them into a string on one line using</p>
<pre><code>print(" ".join((f[0] for f in random.shuffle(names)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Shuffle the array, and print the first letter of each</p>
<pre><code> names_copy = list(names)
 shuffled_names = random.shuffle(names_copy)
 first_letters = [name[0] for name in shuffled_names]
</code></pre>
</div>
<span class="comment-copy"><code>print(secure_random.choice(names)[0])</code> ?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">docs.python.org/3/tutorial/introduction.html#strings</a></span>
<span class="comment-copy">It probably will work, but I would recommend not to use such non intuitive names for variables like <code>_</code>. It is well received by most of programmers if variable is self-explanatory like in this case <code>name</code> :-)</span>
<span class="comment-copy">@Paradowski sorry about that....happened because of muscle memory....have been dealing with a lot of useless contents in iterables.</span>
