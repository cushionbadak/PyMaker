<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15753701/argparse-option-for-passing-a-list-as-option">argparse option for passing a list as option</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>i need to use shell command to run python script </p>
<p>but the args is a list
the python script:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: UTF-8 -*-
import sys

def main(task_list):
    print('task_list:',task_list)

if __name__=='__main__':
main(sys.argv[1])
</code></pre>
<p>when i use the shell python</p>
<pre><code>python scrpit.py [("store", "IDCODE", 18116485, 88779)]
</code></pre>
<p>the system show:
   "(' have a error"</p>
<p>how can i trans the list into script ?</p>
<p>the ("store", "IDCODE", 18116485, 88779) is a arg</p>
</div>
<div class="post-text" itemprop="text">
<p>The shell passes your program an array of strings, that Python turns into a list of strings. The shell doesn't know Python syntax. You <em>could</em> call your program like </p>
<pre><code>$ python scrpit.py '[("store", "IDCODE", 18116485, 88779)]'
</code></pre>
<p>then use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> to parse that into a list.</p>
<pre><code>import sys
import ast

if len(sys.argv) == 2:
    data = ast.literal_eval(sys.argv[1])
    print(data)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[('store', 'IDCODE', 18116485, 88779)]
</code></pre>
<hr/>
<p>However, it would be more robust to receive the args as separate strings.</p>
<pre><code>import sys

if len(sys.argv) == 5:
    name, code, num1, num2 = sys.argv[1:]
    num1, num2 = int(num1), int(num2)
    data = [name, code, num1, num2]
    print(data)
</code></pre>
<p>Call it like</p>
<pre><code>$ python scrpit.py "store" "IDCODE" 18116485 88779
</code></pre>
<p>And the output is</p>
<pre><code>['store', 'IDCODE', 18116485, 88779]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A cleaner way to do what you ask (mostly if you need other parameters) would be to identify your list from another param and enumerate allowed types (convert if necessary), which would look something like this:</p>
<pre><code>import sys, getopt
sh_params, args = getopt.getopt(sys.argv[1:], "l:")

def convert_type(elem):
    for fn in (int, lambda e: e.strip('"')): # Lambda is the string conversion function and int is auto-cast fct
        try:
            return fn(elem)
        except ValueError:
            pass
    return elem

my_list = []
for param, val in sh_params:
    if param == "-l":
        my_list = [convert_type(elem) for elem in val.strip('[]').split(', ')]
print(my_list)
</code></pre>
<p>here is the command &amp; result:</p>
<pre><code>$ python3 scrpit.py -l '["store", "IDCODE", 18116485, 88779]'
$ ['store', 'IDCODE', 18116485, 88779]
</code></pre>
<p>Remember, the alternative of PM 2Ring is still better!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an alternative you might like: send it as a single string and import it as encoded json.  Just "import json" and change your main() call to look like this:</p>
<pre><code>main(json.JSONDecoder().decode(sys.argv[1]))
</code></pre>
<p>and call the script with the parameters inside single quotes, but leave out the ()'s so it looks like a proper json encoding:</p>
<pre><code>python scrpit.py '["store", "IDCODE", 18116485, 88779]'
</code></pre>
<p>which gives me an output that looks like:</p>
<pre><code>('task_list:', [u'store', u'IDCODE', 18116485, 88779])
</code></pre>
<p>This will also allow you to send more complex structures like:</p>
<pre><code>python try.py '{"p2": {"a": 1, "b": 2}, "p1": ["a", "B", "c"]}'
('task_list:', {u'p2': {u'a': 1, u'b': 2}, u'p1': [u'a', u'B', u'c']})
</code></pre>
<p>Without analyzing the internals of the json decoder, I cannot say if it directly opens any security holes, but I can say you have to be careful how you use the decoded values to ensure you don't add any of your own.</p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">thank you for your answer sincerely</span>
<span class="comment-copy">thanks to you answer</span>
