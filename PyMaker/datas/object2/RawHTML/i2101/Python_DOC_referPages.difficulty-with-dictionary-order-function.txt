<div class="post-text" itemprop="text">
<p>Write a function named "indexed_kvs" that doesn't take any parameters and returns a new key-value store containing the integers from 0 to 36 as values each stored at a key which is a string containing the digits of the integer. For example the key-value "0":0 will be in your returned key-value store (include both 0 and 36 in your list). (My code below)</p>
<pre><code>def indexed_kvs():
    d = dict()
    for x in range(37):
        d[x] = x
        return d
</code></pre>
<p>I keep on getting the first key and value; how do I get all the keys and values?</p>
</div>
<div class="post-text" itemprop="text">
<p>You return from inside the loop which is a common mistake that can be avoided altogether by using a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code> comprehension</a>, at least in this simple case:</p>
<pre><code>def indexed_kvs():
    return {str(x): x for x in range(37)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @Loocid comment, the return statement shouldn't be inside the for loop, so the correct code would be:</p>
<pre><code>def indexed_kvs():
    d = dict()
    for x in range(37):
        d[str(x)] = x
    return d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have your "return d", inside you loop. So, what happens is that -</p>
<p>1) The function begins</p>
<p>2) The <code>for</code> loop executes once:</p>
<p>a) adds <code>0</code> to the dictionary at key <code>0</code>,</p>
<p>b) encounters <code>return d</code>, them thinks- 'Okay! I got a return statement. I gotta exit! '</p>
<p>c) And Boom! Your function is done with</p>
<p>So, just move your <code>return d</code> out of you for loop. So, the exiting of the function will take place when, the loop is over.</p>
<p>So your new code should be:</p>
<pre><code>def indexed_kvs():
    d = dict()
    for x in range(37):
        d[str(x)] = x
    return d
</code></pre>
</div>
<span class="comment-copy">Your return shouldnt be in the for loop.</span>
<span class="comment-copy">Like this, the code wouldn't give any error. But, as said in the question "stored at a key which is a string" you're right, edit coming</span>
