<div class="post-text" itemprop="text">
<p>There is a formatting question, that I would like some additional insight/understanding on. I have the following code:</p>
<pre><code>In[1]:
mylist = [[99]]
for [x] in mylist:
    print(x)

Out[1]:
99
</code></pre>
<p>My main question is regarding the []s around the x in the second line. So I have never used []s before when describing the 'x' variable of a loop. Since my output is 99 and not [99], it looks like the []s are going to ask the loop to extract the number from its additional set of brackets. </p>
<p>Question Updated Based on Responses:</p>
<p>If I change the code to remove the brackets:</p>
<pre><code>In[1]:
mylist = [[99]]
for x in mylist:
    print(x)

Out[1]:
[99]
</code></pre>
<p>I get [99] instead of 99. However, if I do the following:</p>
<pre><code>In[1]:
mylist = [[99,100]]
for x,y in mylist:
    print(x)
    print(y)

Out[1]:
99
100
</code></pre>
<p>This example above doesn't require an additional set of []s around x,y and produces a bracket-less answer in the output, unlike the previous two examples, which requires a [] to produce a bracket-less answer.</p>
<p>I realize this is an odd and fairly silly question since I would never construct a single element list like this. I simply saw this being casually used in an answer elsewhere online (with no explanation on it unfortunately). Being a newcomer, I'm just curious to broaden my understanding of the language.</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do this:</p>
<pre><code>&gt;&gt;&gt; myList = [[99]]
&gt;&gt;&gt; for x in myList:
    print x
</code></pre>
<p>Python interprets that as "print each element in this iterable".</p>
<p>When you do this:</p>
<pre><code>&gt;&gt;&gt; myList = [[99,100], [99,101], [99, 102]]
&gt;&gt;&gt; for x in myList:
    print x
</code></pre>
<p>Python <em>still</em> interprets that as "print each element in this iterable" so that you get this:</p>
<pre><code>[99, 100]
[99, 101]
[99, 102]
</code></pre>
<p>But, if you do this:</p>
<pre><code>&gt;&gt;&gt; myList = [[99,100], [99,101], [99, 102]]
&gt;&gt;&gt; for x, y in myList:
    print x, y
</code></pre>
<p>Python will "unpack" the values for you from each element in the iterable and assign them to <code>x</code> and <code>y</code>.  If you want to do that above for only the case of <code>myList = [[99]]</code>, Python requires the <code>for [x] in myList</code> syntax so that it unpacks the single value from the list.</p>
<p>The ability to "unpack" an iterable is very powerful in Python.  You can assign variables on the fly by unpacking an iterable.  In your case, you can imagine having to assign <code>lat</code> <code>lon</code> as variables maybe or something else.  You can also unpack values into the args of a function.</p>
<p>In Python 3 you can also do something like this:</p>
<pre><code>x = [1,2,3,4]
first, *rest = x
print (first) # 1
print (rest) # [2,3,4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the second example, with lists of length 2, to unpack both values you can do </p>
<pre><code>In[1]:
myList = [[99,100]]
for x, y in myList: 
    print(x)
    print(y)

Out[1]:
99
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">Python documentation</a>, the square brackets are essentially ignored in assignments and loop constructs.</p>
<p>So as a complement to <a href="https://stackoverflow.com/a/52770291/5215536">user2774697's answer</a>, <code>for x, y in L</code> is equivalent to <code>for [x, y] in L</code> which is equivalent to <code>for ([x, y]) in L</code> and is also equivalent to <code>for (x, y) in L</code>.</p>
<p>The thing that the square brackets do different than a bare round parenthesis is that it <strong>enforces an unpacking behavior</strong>, it requires the elements in L to be iterable.</p>
</div>
<span class="comment-copy">You would have to change your list to: <code>[[99],[100]]</code> You're attempting to unpack items in the list as single-element lists, not multiple element lists.</span>
<span class="comment-copy">Great information. Just what I was looking for. Thank you very much!</span>
<span class="comment-copy">What I find interesting with that is you didn't have to surround x,y with []s to get the output to be the number by themselves. Going back to my original example, if I do not surround x with brackets, ie 'for x in myList'....the print out would be [99] instead of 99, so just the special use case of those []s is whats peaked my interest. Your example helps though</span>
<span class="comment-copy">I see. In that example, if you use x without brackets, each item in myList is a list as well, so if you print x, it is going to be a list. When the you use the brackets, you are basically saying that you know that each item in myList is a list of one element, and x is what is inside each list, so the value in unpacked. You could do the same thing for my example above e.g. for [x,y] in myList, but python allows you to not provide the brackets for multi element lists/tuples because if you specify more than one, it knows there is unpacking that needs to be done</span>
