<div class="post-text" itemprop="text">
<p>In Python, what would be the most elegant way of converting this structure:</p>
<pre><code>['group1, group2, group3']
</code></pre>
<p>into this structure: </p>
<pre><code>['group1', 'group2', 'group3']
</code></pre>
<p>and potentially back.</p>
<p>What is needed is a function that can take either a list of a string of comma separated values (first case) or a list of strings of the same values (second case) and handle them as one and the same: a list of strings.</p>
<p>In pseudocode:</p>
<pre><code>x = ['group1, group2, group3']
y = ['group1', 'group2', 'group3']

f(x) &lt;==&gt; f(y)    &lt;- equivalent behavior
</code></pre>
<p>Also, if using <code>split()</code> as per suggestions:</p>
<p>Is there a way to make the delimiter space insensitive or conditional or a regex: I'd like to get to the <code>['group1', 'group2', 'group3']</code> result in either <code>['group1, group2, group3']</code> or <code>['group1,group2,group3']</code> or even this <code>['group1, group2,group3']</code> (or a combination thereof) as an input?</p>
<p>A bit more clarification:</p>
<pre><code>&gt;&gt;&gt; single_string = False
&gt;&gt;&gt; a = ['group1', 'group2', 'group3','group4']
&gt;&gt;&gt; [t.strip() for t in [a][0].split(',')] if single_string else a
['group1', 'group2', 'group3', 'group4']
&gt;&gt;&gt; single_string = True
&gt;&gt;&gt; b = ['group1,group2, group3,  group4']
&gt;&gt;&gt; [t.strip() for t in [b][0].split(',')] if single_string else b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'list' object has no attribute 'split'
&gt;&gt;&gt;
</code></pre>
<p>Basically, I'm looking for the most elegant Python conditional expression that would result in the same output both in case of <code>a</code> and <code>b</code> above:<code>['group1', 'group2', 'group3', 'group4']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there in your edit:</p>
<pre><code>def f(lst):
    return [t.strip() for t in lst[0].split(',')] if len(lst) == 1 else lst

&gt;&gt;&gt; a = ['group1', 'group2', 'group3','group4']
&gt;&gt;&gt; b = ['group1,group2, group3,  group4']

&gt;&gt;&gt; f(a)
['group1', 'group2', 'group3', 'group4']
&gt;&gt;&gt; f(b)
['group1', 'group2', 'group3', 'group4']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a> to get from one representation to the other:</p>
<pre><code>print('group1, group2, group3'.split(', '))
# ['group1', 'group2', 'group3']
print(', '.join(['group1', 'group2', 'group3']))
# group1, group2, group3
</code></pre>
<p>in a function you could do this:</p>
<pre><code>def f(items, index, separator=', '):
    if isinstance(items, str):
        items = items.split(separator)
    return items[index]


print(f('group1, group2, group3', 1))        # group2
print(f(['group1', 'group2', 'group3'], 1))  # group2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split()</code></a>:</p>
<h3>Code:</h3>
<pre><code>['group1, group2, group3'][0].split(', ')
</code></pre>
<h3>Test Code:</h3>
<pre><code>x = ['group1, group2, group3']    
print(x[0].split(', '))
</code></pre>
<h3>Results:</h3>
<pre><code>['group1', 'group2', 'group3']
</code></pre>
<h3>To return:</h3>
<p>To return use <code>str.join()</code></p>
<pre><code>y = x[0].split(', ')
print(y)

xx = [', '.join(y)]
print(xx)
</code></pre>
<h3>Results:</h3>
<pre><code>['group1', 'group2', 'group3']
['group1, group2, group3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define a function using <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> on <code>,</code> followed by flattening of result using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a></p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; f = lambda x: list(chain(*[a.split(', ') for a in x]))

&gt;&gt;&gt; f(['group1', 'group2', 'group3'])
&gt;&gt;&gt; ['group1', 'group2', 'group3']

&gt;&gt;&gt; f(['group1, group2, group3'])
&gt;&gt;&gt; ['group1', 'group2', 'group3']
</code></pre>
<p>In case of variable separator and optional space, regex would be a better choice</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; f = lambda x, sep: list(chain(*[re.split('{}\s*'.format(sep), a) for a in x]))
&gt;&gt;&gt; f(['group1, group2,group3'],',')
&gt;&gt;&gt; ['group1', 'group2', 'group3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>split() and join() can try .</p>
<pre><code>case1 = ['group1, group2, group3']
output = [ele.split(",") for ele in case1]
</code></pre>
<p>Output for case-1</p>
<pre><code>[['group1', ' group2', ' group3']]
</code></pre>
<p>Case-2</p>
<pre><code>case2 = [['group1', ' group2', ' group3']]
output = [", ".join(ele) for ele in case2]
</code></pre>
<p>Output for case-2</p>
<pre><code>['group1, group2, group3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By using <code>str.replace()</code> to eliminate all white spaces you can use a formula that will work on all cases presented.    </p>
<pre><code>lst = ['group1, group2, group3']

res = lst[0].replace(' ', '').split(',')
# ['group1', 'group2', 'group3']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it's most clear simply using <code>split</code> and <code>strip</code>.</p>
<pre><code># various scenarios to test
TESTS = [
    ['group1, group2, group3'],
    ['group1', 'group2', 'group3'],
    ['group1,group2,  group3'],
    ['group1', 'group2, group3'],
    ['group1 ,group2', 'group3'],
]


def normalize(args, delimiter=','):
    results = []
    for arg in args:
        results.extend(x.strip() for x in arg.split(delimiter))
    return results


for args in TESTS:
    assert normalize(args) == ['group1', 'group2', 'group3']


# test alternative delimiter
assert normalize(['group1 | group2 | group3'], delimiter='|') == ['group1', 'group2', 'group3']
</code></pre>
</div>
<span class="comment-copy">can a separator be conditional? ', ' or ','.  I guess  a regex is more appropriate?</span>
<span class="comment-copy">sure, if you need to split several things <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> should work.</span>
<span class="comment-copy">Thanks.  Is there a way to make the delimiter space insensitive: I'd like to get to the <code>['group1', 'group2', 'group3']</code> result in either <code>['group1, group2, group3']</code> or <code>['group1,group2,group3']</code> or even this <code>['group1,  group2,group3']</code> (or a combination thereof) as an input?</span>
<span class="comment-copy">@SimeonLeyzerzon You can split on the bare comma and strip the tokens: <code>y = [t.strip() for t in x[0].split(',')</code>.</span>
<span class="comment-copy">@schwobaseggl Your comment seems to be the closest to what I'm after - you may want to make it into an official answer, I've updated my question with a bit more clarification if you care to take another look.  Thanks.</span>
