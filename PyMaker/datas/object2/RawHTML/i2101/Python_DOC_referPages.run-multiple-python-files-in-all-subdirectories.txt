<div class="post-text" itemprop="text">
<p>I have directory containing multiple subdirectories of different scraper. How would you go about writing script that will cd into each of the subdirectories and run the scraper, cd out then continue to the next one what would be the best way to do this if it possible? </p>
<p>Example of the how the directory looks:</p>
<pre><code>- All_Scrapers (parent dir)
   - Scraper_one (sub dir folder)
       - scraper.py
   - Scraper_two (sub dir folder)
       - scraper.py
   - Scraper_three (sub dir folder)
       - scraper.py
   - all.py
</code></pre>
<p>all the scrapers have main function </p>
<pre><code> if __name__ == "__main__":
         main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way of doing this is to walk through your directories and programmactically import the modules you need.</p>
<p>Assuming that the <code>Scraper X folder</code>s are in the same subdirectory <code>scrapers</code> and you have the <code>batch_run.py</code> script in the directory containing <code>scrapers</code> (hence, at the same path level), the following script will do the trick:</p>
<pre><code>import os
import importlib

base_subdir = 'scrapers'

for root, subdirs, filenames in os.walk(base_subdir):
    for subdir in subdirs:
        if not subdir.startswith('__'):
            print(root, subdir)
            submodule = importlib.import_module('.'.join((root, subdir, 'scraper')))
            submodule.main()
</code></pre>
<hr/>
<h1>EDIT</h1>
<p>If the script is inside the <code>base_subdir</code> path, the code can be adapted by changing a bit how the <code>import_module()</code> is called.</p>
<pre><code>import os
import importlib

base_subdir = '.'

for root, subdirs, filenames in os.walk(base_subdir):
    for subdir in subdirs:
        if not subdir.startswith('__'):
            print(root, subdir)
            script = importlib.import_module('.'.join((subdir, 'scraper')), root)
            script.main()
</code></pre>
<hr/>
<h1>EDIT 2</h1>
<p>Some explanations:</p>
<h2>How <code>import_module()</code> is being used?</h2>
<p>The <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>import_module()</code></a> line, is what is actually doing the job. Roughly speaking, when it is used with only one argument, i.e.</p>
<pre><code>alias = importlib.import_module("my_module.my_submodule")
</code></pre>
<p>it is equivalent to:</p>
<pre><code>import my_module.my_submodule as alias
</code></pre>
<p>Instead, when used with two argumens, i.e.</p>
<pre><code>alias = importlib.import_module("my_submodule", "my_module")
</code></pre>
<p>it is equivalent to:</p>
<pre><code>from my_module import my_submodule as alias
</code></pre>
<p>This second form is very convenient for relative imports (i.e. imports using <code>.</code> or <code>..</code> special directories).</p>
<h2>What is <code>if not subdir.startswith('__'):</code> doing?</h2>
<p>When you import a module, Python will generate some bytecode to be interpreted and it will cache the result as <code>.pyc</code> files under the <code>__cache__</code> directory. The aforementioned line will avoid that, when walking through the directories, <code>__cache__</code> (actually, any directory starting with <code>__</code>) will be processed as if it would contain modules to import. Other kind of filtering may be equally valid.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may want to check <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer"><code>os.walk</code></a> function that traverses the directory tree and at each directory run the script (or the <code>main</code> function that you can wrap the contents of the script into).</p>
<p>An example code would be:</p>
<pre><code>import os
for root, dirs, files in os.walk(".", topdown=False):
   scraper_main()
</code></pre>
</div>
<span class="comment-copy">Check out this QA for a bit of help: <a href="https://stackoverflow.com/questions/1186789/what-is-the-best-way-to-call-a-script-from-another-script" title="what is the best way to call a script from another script">stackoverflow.com/questions/1186789/â€¦</a></span>
<span class="comment-copy">so I have a file 'all.py' in the same directory as the scrapers  I copied the code and got this error  <code>TypeError: the 'package' argument is required to perform a relative import for '..breckland_scraper.scraper'</code></span>
<span class="comment-copy">it has to be on the parent directory, or you have to adapt the code accordingly.</span>
<span class="comment-copy">it is I edited my post to show you how it looks</span>
<span class="comment-copy">It works thank you very much, however could I get explanation for this line of code <code>script = importlib.import_module('.'.join((subdir, 'scraper')), root)</code></span>
<span class="comment-copy">also whats the purpose of  <code>if not subdir.startswith('__'):</code></span>
