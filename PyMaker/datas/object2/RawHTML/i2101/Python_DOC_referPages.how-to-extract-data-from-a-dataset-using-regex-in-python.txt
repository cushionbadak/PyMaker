<div class="post-text" itemprop="text">
<p>I have a dataset and I would like to extract the appositive feature from this dataset. </p>
<pre><code>در
همین
حال
،
&lt;coref coref_coref_class="set_0" coref_mentiontype="ne" markable_scheme="coref" coref_coreftype="ident"&gt;
نجیب
 الله
خواجه
عمری
 ,
 &lt;/coref&gt;
&lt;coref coref_coref_class="set_0" coref_mentiontype="np" markable_scheme="coref" coref_coreftype="atr"&gt;
سرپرست
وزارت
تحصیلات
عالی
افغانستان
&lt;/coref&gt;
گفت
که
در
سه
ماه
گذشته
در
۳۳
ولایت
کشور
&lt;coref coref_coreftype="ident" coref_coref_class="empty" coref_mentiontype="ne" markable_scheme="coref"&gt;
خدمات
ملکی
&lt;/coref&gt;
از
حدود
۱۴۹
هزار
</code></pre>
<p>I want to store the data inside dataset in two list. In <code>find_atr</code> list I stored the data where the coref tag includes <code>coref_coreftype="atr"</code>. For the <code>find_ident</code> list I want to store the data of <code>coref_coreftype="ident"</code> So we have on the last coref tag in this dataset another coref tag that has <code>coref_coref_class="empty"</code>. I dont want to store that data that has the tag <code>coref_coref_class="empty"</code>. Now on the regex I mentioned that it should only include those that the <code>coref_coref_class="set_.*?"</code> not <code>coref_coref_class="empty"</code> but it still store the data of <code>coref_coref_class="empty"</code>, where it should only store the <code>coref_coref_class="set_.*?"</code>.</p>
<p>How to avoid:</p>
<pre><code>i_ident = []
j_atr = []
find_ident = re.findall(r'&lt;coref.*?coref_coref_class="set_.*?coref_mentiontype="ne".*?coref_coreftype="ident".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S)
ident_list = list(map(lambda x: x.replace('\n', ' '), find_ident))
for i in range(len(ident_list)):
    i_ident.append(str(ident_list[i]))

find_atr = re.findall(r'&lt;coref.*?coref_coreftype="atr".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S)
atr_list = list(map(lambda x: x.replace('\n', ' '), find_atr))
#print(coref_list)
for i in range(len(atr_list)):
    j_atr.append(str(atr_list[i]))

print(i_ident)
print()
print(j_atr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I reduced your dataset file to:</p>
<pre><code>A
&lt;coref coref_coref_class="set_0" coref_mentiontype="ne" markable_scheme="coref" coref_coreftype="ident"&gt;
B
&lt;/coref&gt;
&lt;coref coref_coref_class="set_0" coref_mentiontype="np" markable_scheme="coref" coref_coreftype="atr"&gt;
C
&lt;/coref&gt;
D
&lt;coref coref_coreftype="ident" coref_coref_class="empty" coref_mentiontype="ne" markable_scheme="coref"&gt;
E
&lt;/coref&gt;
F
</code></pre>
<p>And tried this code, which is almost the same you provided:</p>
<pre><code>import re

with open ("test_dataset.log", "r") as myfile:
    read_dataset = myfile.read()

i_ident = []
j_atr = []
find_ident = re.findall(r'&lt;coref.*?coref_coref_class="set_.*?coref_mentiontype="ne".*?coref_coreftype="ident".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S)
ident_list = list(map(lambda x: x.replace('\n', ' '), find_ident))
for i in range(len(ident_list)):
    i_ident.append(str(ident_list[i]))

find_atr = re.findall(r'&lt;coref.*?coref_coreftype="atr".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S)
atr_list = list(map(lambda x: x.replace('\n', ' '), find_atr))
#print(coref_list)
for i in range(len(atr_list)):
    j_atr.append(str(atr_list[i]))

print(i_ident)
print()
print(j_atr)
</code></pre>
<p>And got this output, which seems right to me:</p>
<pre><code>[' B ']

[' C ']
</code></pre>
</div>
<span class="comment-copy">What you have looks like XML, so using <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow noreferrer">ElementTree</a> might work.</span>
<span class="comment-copy">@Lomtrur, it is not an XML file. it was based on MMAX2 and I convert it using salt. now my file has this structure. what is wrong with the regex? why it includes the coref_coref_class="empty"</span>
<span class="comment-copy">I see this line <code>find_atr = re.findall(r'&lt;coref.*?coref_coreftype="atr".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S)</code> just verify the type but it will retrieve any class. I'm not sure if that is the problem</span>
<span class="comment-copy">@GVelascoh, the find_atr=.... working well, it retrieve only those that have the 'coref_coreftype="atr"'. The problem is with find_ident = re.findall(r'&lt;coref.*?coref_coref_class="set_.*?coref_mentiontype="ne".*?coref_coreftype="ident".*?&gt;(.*?)&lt;/coref&gt;', read_dataset, re.S) that extract from last line of the dataset where the coref_coref_class="empty", and I mentioned in find_indent that only extract coref_coref_class="set_". this is the problem that why it extract for the 'empty' class.</span>
<span class="comment-copy">I don’t understand your description, could you provide desired output?</span>
<span class="comment-copy">I tried your dataset, and it works but again when I tried with my dataset, it gives the same as the previous result. I don't know why</span>
<span class="comment-copy">When you said your dataset, is that a longer file or the same in the question post?. Could be that a nested tags issue?</span>
<span class="comment-copy">Yes, it is 5K words annotated for the task of coreference resolution. The file has the same structure as I post it here. And if it is the nested tag issue why it can extract for the <code>coref_coreftype="atr"</code>.</span>
<span class="comment-copy">You can include the matching lines in the output to verify which lines are matching the regex, and also that there are not nested or unexpected tags in your file</span>
<span class="comment-copy">Thank you, I will try that too. Can we change the structure of the regex but I dont have anything in my mind.</span>
