<div class="post-text" itemprop="text">
<p>I wrote a recursion function to get all subsets out of a list of integers. For example, given a list <code>[1, 2, 3]</code>, the return will be <code>[[],[1],[2],[3],[1, 2],[1, 3],[2, 3],[1, 2, 3]]</code>.</p>
<p>Here is my code:</p>
<pre><code>def subsets(nums):

    def helper(subset, i):

        if i == len(nums):
            print('return = ', subset)
            res.append(subset)

        else:
            helper(subset, i+1)
            subset.append(nums[i])
            helper(subset, i+1)
            subset.remove(nums[i])

    res = []
    helper([], 0)
    return res
</code></pre>
<p>I print out the <code>subset</code> in each recursion and they are right. However, the final return <code>res</code> is always empty. </p>
<pre><code>return =  []
return =  [3]
return =  [2]
return =  [2, 3]
return =  [1]
return =  [1, 3]
return =  [1, 2]
return =  [1, 2, 3]
res = [[], [], [], [], [], [], [], []]
</code></pre>
<p>Anyone knows why? Appreciate it! </p>
</div>
<div class="post-text" itemprop="text">
<p>Pretty close!  The issue is that <code>subset</code> is being appended to <code>res</code>, but later modified.  What you want is a "frozen" version of what <code>subset</code> <em>is then</em>, not a "reference" to what it will eventually be.</p>
<p>So instead of <code>res.append(subset)</code>, consider appending a copy of the list, for example with:</p>
<pre><code>res.append(subset[:])
</code></pre>
<p>And you'll get your expected result:</p>
<pre>
[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]
</pre>
</div>
<span class="comment-copy">You might be interested in <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a></span>
<span class="comment-copy">Thanks a lot, @jedwards!</span>
