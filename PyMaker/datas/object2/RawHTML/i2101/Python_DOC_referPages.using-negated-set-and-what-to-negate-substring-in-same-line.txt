<div class="post-text" itemprop="text">
<p>I'm writing a parser than converts <code>LaTeX</code> math in to python <code>eval()</code> compatible string.</p>
<p>I get to a point where I have a string that looks like this:</p>
<pre><code>\sqrt{4m/s} - \frac{3v+10.5v}{20a-8a} +1/2
</code></pre>
<p>Notice the still mostly <code>LaTeX</code> syntax, as well as some arbitrary "unit" letters thrown in.
I then use the following Negated set, to replace everything except what is in the negated set.</p>
<pre><code>    mathstr = re.sub('[^0-9*()/+\-.Q]','',mathstr)
</code></pre>
<p>How Can I include a substring "sqrt" so that it can work in a similar fashion, and preferably in the same regular expression?</p>
<p>Right now my work around is replacing '<code>\sqrt</code>' with '<code>Q</code>', doing the line of code above, and then setting '<code>Q</code>' to '<code>sqrt</code>' after, my full routine for going from the above syntax to <code>eval()</code> syntax is as follows:</p>
<pre><code>    mathstr = mathstr.replace(" ","")
    if pwrRe.search(mathstr):
        mathstr = re.sub(pwrRe,'**',mathstr)
    if MultiplyRe.search(mathstr):
        mathstr = re.sub(MultiplyRe,'*',mathstr)
    if DivideRe.search(mathstr) or sqrtRe.search(mathstr):
        mathstr = re.sub('\\\\frac{','(',mathstr)
        mathstr = re.sub('\\\\sqrt{','\\\\sqrt(',mathstr)   
        mathstr = re.sub('}{',')/(',mathstr)
        mathstr = re.sub('}',')',mathstr)
    mathstr = re.sub('[/*+\-^][a-zA-Z]','',mathstr)
    mathstr = re.sub('\\\\sqrt','Q',mathstr)
    mathstr = re.sub('[^0-9*()/+\-.Q]','',mathstr)
    mathstr = re.sub(r'Q','sqrt',mathstr)
</code></pre>
<p>Which results in the <code>eval()</code> syntax'd:</p>
<pre><code>sqrt(4)-(3+10.5)/(20-8)+1/2
</code></pre>
<p>But this is sloppy, and it would be useful in many areas if I could 'whitelist' characters and substrings in one line, blowing away all other characters that come up.</p>
<p>EDIT:</p>
<p>As I continue expanding my script this list will get longer but for now I want to match the following and discard everything else:</p>
<pre><code>0123456789()/*+-^sqrt &lt;-- only sqrt when it's a substring
</code></pre>
<p>Here are a few examples:</p>
<pre><code>Before: sqrt(5s+2s)+(3s**2/9s)
After: sqrt(5+2)+(3**2/9)

Before: sqrt(4*(5+2)/(2))\$
After:  sqrt(4*(5+2)/(2))

Before: sqrt(4v/a)-(3v+10.5v)/(20a-8a)+1/2ohms
After:  sqrt(4)-(3+10.5)/(20-8)+1/2
</code></pre>
<p>There is some nuance to this beyond simply matching only those characters as well. In my first example you can see I have v/a, even though there is an '/' there, I remove that as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of "deleting" characters that <em>aren't</em> specified, what about "keeping" characters that <em>are</em> specified -- this is easy enough since you've already negated the group:</p>
<pre><code>[0-9*()/+\-.Q]
</code></pre>
<p>Then you can add any alternative literals you want, e.g.:</p>
<pre><code>[0-9*()/+\-.Q]|sqrt
</code></pre>
<p>In Python, this might look like, using <code>join</code> and <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall()</code></a>:</p>
<pre><code>tests = [
    ('sqrt(5s+2s)+(3s**2/9s)', 'sqrt(5+2)+(3**2/9)'),
    ('sqrt(4*(5+2)/(2))\$', 'sqrt(4*(5+2)/(2))'),
    ('sqrt(4v/a)-(3v+10.5v)/(20a-8a)+1/2ohms)', 'sqrt(4)-(3+10.5)/(20-8)+1/2')
]

import re

for (before, expected) in tests:
    matches = re.findall(r"[0-9*()/+\-.Q]|sqrt", before)
    after = ''.join(matches)

    is_ok = (after == expected)
    print(after, is_ok, '' if is_ok else expected)
</code></pre>
<p>Output:</p>
<pre>
sqrt(5+2)+(3**2/9)               True 
sqrt(4*(5+2)/(2))                True 
sqrt(4/)-(3+10.5)/(20-8)+1/2)    False    sqrt(4)-(3+10.5)/(20-8)+1/2
</pre>
<p>(the last one doesn't match what you're expecting because of the first forward slash, but that's outside the scope of the question really.)</p>
</div>
<span class="comment-copy">Can you give some additional example lines, and what you want to match for each?  It's not super clear what you're trying to do.</span>
<span class="comment-copy">@jedwards I added a section at the bottom with examples. I think my key issue here though is mixing character set matches with substring matches in the same line.</span>
<span class="comment-copy">I should've looked in to the rest of the re.* functions. Also need to read up on what the r does. Thanks a bunch. Additionally the third case passes with mathstr = re.sub('[/*+\-^][a-zA-Z]','',mathstr), I <i>THINK</i> that would cover any cases where I have units like v/a or m/s</span>
<span class="comment-copy">@codeNoob <code>r</code> specifies a <a href="https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-and-what-are-raw-string-literals">"raw" string literal</a>.</span>
