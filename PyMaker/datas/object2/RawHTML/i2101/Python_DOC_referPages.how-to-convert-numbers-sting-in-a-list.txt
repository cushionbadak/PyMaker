<div class="post-text" itemprop="text">
<p>What is the quickest and cleanest way to convert an <code>integer</code> into a <code>list</code>? </p>
<p>For example, change <code>132</code> into <code>[1,3,2]</code> and <code>23</code> into <code>[2,3]</code>. I have a variable which is an <code>int</code>, and I want to be able to compare the individual digits so I thought making it into a list would be best, since I can just do <code>int(number[0])</code>, <code>int(number[1])</code> to easily convert the list element back into int for digit operations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert the integer to string first, and then use <code>map</code> to apply <code>int</code> on it:</p>
<pre><code>&gt;&gt;&gt; num = 132
&gt;&gt;&gt; map(int, str(num))    #note, This will return a map object in python 3.
[1, 3, 2]
</code></pre>
<p>or using a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [int(x) for x in str(num)]
[1, 3, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The shortest and best way is already answered, but the first thing I thought of was the mathematical way, so here it is:</p>
<pre><code>def intlist(n):
    q = n
    ret = []
    while q != 0:
        q, r = divmod(q, 10) # Divide by 10, see the remainder
        ret.insert(0, r) # The remainder is the first to the right digit
    return ret

print intlist(3)
print '-'
print intlist(10)
print '--'
print intlist(137)
</code></pre>
<p>It's just another interesting approach, you definitely don't have to use such a thing in practical use cases.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>There are already great methods already mentioned on this page, however it does seem a little obscure as to which to use. So I have added some mesurements so you can more easily decide for yourself:</p>
</blockquote>
<hr/>
<p><em>A large number has been used (for overhead) <code>1111111111111122222222222222222333333333333333333333</code></em></p>
<h1><strong>Using <code>map(int, str(num))</code>:</strong></h1>
<pre><code>import timeit

def method():
    num = 1111111111111122222222222222222333333333333333333333
    return map(int, str(num))

print(timeit.timeit("method()", setup="from __main__ import method", number=10000)
</code></pre>
<p><em>Output: <code>0.018631496999999997</code></em></p>
<h1><strong>Using list comprehension:</strong></h1>
<p>import timeit</p>
<pre><code>def method():
    num = 1111111111111122222222222222222333333333333333333333
    return [int(x) for x in str(num)]

print(timeit.timeit("method()", setup="from __main__ import method", number=10000))
</code></pre>
<p><em>Output: <code>0.28403817900000006</code></em></p>
<p><strong><em>Code taken from <a href="https://stackoverflow.com/questions/13905936/converting-integer-to-list-in-python/13905946#13905946">this answer</a></em></strong></p>
<p>The results show that the first method involving inbuilt methods is much faster than list comprehension.</p>
<h1><strong>The "mathematical way":</strong></h1>
<pre><code>import timeit

def method():
    q = 1111111111111122222222222222222333333333333333333333
    ret = []
    while q != 0:
        q, r = divmod(q, 10) # Divide by 10, see the remainder
        ret.insert(0, r) # The remainder is the first to the right digit
    return ret

print(timeit.timeit("method()", setup="from __main__ import method", number=10000))
</code></pre>
<p><em>Output: <code>0.38133582499999996</code></em></p>
<p><strong><em>Code taken from <a href="https://stackoverflow.com/questions/13905936/converting-integer-to-list-in-python/13906149#13906149">this answer</a></em></strong></p>
<h1><strong>The <code>list(str(123))</code> method (does not provide the right output):</strong></h1>
<pre><code>import timeit

def method():
    return list(str(1111111111111122222222222222222333333333333333333333))

print(timeit.timeit("method()", setup="from __main__ import method", number=10000))
</code></pre>
<p><em>Output: <code>0.028560138000000013</code></em></p>
<p><strong><em>Code taken from <a href="https://stackoverflow.com/questions/13905936/converting-integer-to-list-in-python/13905990#13905990">this answer</a></em></strong></p>
<h1><strong>The answer by Duberly Gonz√°lez Molinari:</strong></h1>
<pre><code>import timeit

def method():
    n = 1111111111111122222222222222222333333333333333333333
    l = []
    while n != 0:
        l = [n % 10] + l
        n = n // 10
    return l

print(timeit.timeit("method()", setup="from __main__ import method", number=10000))
</code></pre>
<p><em>Output: <code>0.37039988200000007</code></em></p>
<p><strong><em>Code taken from <a href="https://stackoverflow.com/questions/13905936/converting-integer-to-list-in-python/45377577#45377577">this answer</a></em></strong></p>
<h1><strong>Remarks:</strong></h1>
<p>In all cases the <code>map(int, str(num))</code> is the fastest method (and is therefore probably the best method to use).  List comprehension is the second fastest (but the method using <code>map(int, str(num))</code> is probably the most desirable of the two.</p>
<p>Those that reinvent the wheel are interesting but are probably not so desirable in real use.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>list</code> on a number converted to string:</p>
<pre><code>In [1]: [int(x) for x in list(str(123))]
Out[2]: [1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>n = int(raw_input("n= "))

def int_to_list(n):
    l = []
    while n != 0:
        l = [n % 10] + l
        n = n // 10
    return l

print int_to_list(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>you can use:</h3>
<p>First convert the value in a string to iterate it, Them each value can be convert to a Integer <code>value = 12345</code></p>
<p><code>l = [ int(item) for item in str(value) ]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If you have a string like this: '123456'
and you want a list of integers like this: [1,2,3,4,5,6], use this:</p>
<pre><code>&gt;&gt;&gt;s = '123456'    
&gt;&gt;&gt;list1 = [int(i) for i in list(s)]
&gt;&gt;&gt;print(list1)

[1,2,3,4,5,6]
</code></pre>
<p>or if you want a list of strings like this: ['1','2','3','4','5','6'], use this:</p>
<pre><code>&gt;&gt;&gt;s = '123456'    
&gt;&gt;&gt;list1 = list(s)
&gt;&gt;&gt;print(list1)

['1','2','3','4','5','6']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>num = list(str(100))
index = len(num)
while index &gt; 0:
    index -= 1
    num[index] = int(num[index])
print(num)
</code></pre>
<p>It prints <code>[1, 0, 0]</code> object.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/780390/convert-a-number-to-a-list-of-integers">Convert a number to a list of integers</a></span>
<span class="comment-copy">I tried what you wrote but it didn't return the same as you did:  &gt;&gt;&gt;num  =132 &gt;&gt;&gt;map(int, str(num)) &lt;map object at 0x1aed510&gt; (I don't know how format the comment right.)</span>
<span class="comment-copy">@GinKin For Python 3 you need <code>list(map(int, str(num)) )</code>.</span>
<span class="comment-copy">More on the answer can be found here: <code>https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</code> and here <code>https://en.wikipedia.org/wiki/List_comprehension</code></span>
<span class="comment-copy"><code>list.insert(0, item)</code> is <code>O(n)</code> operation. You could use <code>list.append(item)</code> instead and reverse the list at the end: <code>ret[::-1]</code>.</span>
<span class="comment-copy">Why the downvote?</span>
<span class="comment-copy">@Tim: That doesn't give a list of int but a list of strings.</span>
<span class="comment-copy">Please add an explanation and not just code. Explain what it does.</span>
