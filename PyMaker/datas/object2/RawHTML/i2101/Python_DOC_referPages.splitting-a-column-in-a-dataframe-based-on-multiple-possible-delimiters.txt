<div class="post-text" itemprop="text">
<p>I have an address column in a dataframe in pandas with 3 types of information namely street, colony and city.</p>
<p>There are three values with two possible delimiters - either a ',' or a white-space e.g it can be either <code>Street1,Colony1,City1</code> or <code>Street1 Colony1 City1</code>.</p>
<p>I need to split this column into three with respective labels <code>'Street'</code>,<code>'Colony'</code> and <code>'City'</code> with the values from this <code>Address</code> column split accordingly.</p>
<p>What is the most efficient way to do this as the pandas <code>split</code> function only allows you with a single delimiter or a regex expression (maybe a regex expression for this as I'm not very good with regex).</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to accomplish this would be to use <a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow noreferrer">re.sub</a> to consolidate your delimiters, then use <code>str.split</code> on that single delimiter to create your new columns. </p>
<pre><code>import pandas as pd 
import re

df = pd.DataFrame({'address':['Street1,Colony1,City1',  'Street2 Colony2 City2']})

location_df = (df.address
                 .apply(lambda x: pd.Series(re.sub(pattern=' |,', 
                                                   repl=',', 
                                                   string=x).split(','), 
                                            index=['street','colony','city']))
                )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>df[['Street','Colony','City']] = df.address.apply(lambda x: pd.Series(re.split('\W',x)))
</code></pre>
<p><code>\W</code> will match any character which is not word character. See <a href="https://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer">docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are certain it is either a comma <code>,</code> or a whitespace <code></code> you could use:</p>
<pre><code>df[['Street','Colony','City']] = df.address.str.split('[ ,]', expand=True)
</code></pre>
<hr/>
<p><strong>Explanation:</strong> <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.split.html" rel="nofollow noreferrer">str.split</a> accepts a pat (pattern) parameter: String or <strong>regular expression</strong> to split on. If not specified, split on whitespace. Using the fact we can pass a regular expression this becomes an easy task as <code>[ ,]</code> in regex means either <code></code> or <code>,</code>.</p>
<p>An alternative would be to use <code>' |,'</code> or if you can have multiple whitespace <code>'\s+|,'</code></p>
<hr/>
<p>Full example:</p>
<pre><code>import pandas as pd

df = pd.DataFrame({
    'address': ['a,b,c','a b c']
})

df[['Street','Colony','City']] = df.address.str.split('[ ,]', expand=True)

print(df)
</code></pre>
<p>Returns:</p>
<pre><code>  address Street Colony City
0   a,b,c      a      b    c
1   a b c      a      b    c
</code></pre>
</div>
