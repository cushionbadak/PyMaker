<div class="post-text" itemprop="text">
<p>I have sqlite queries that output lists of tuples.  I'm running into a situation that I don't understand why looping through a list of single-element tuples yields a different output compared to looping through a list of multi-element tuples.  Take the following lists as an example:</p>
<pre><code>list1 = [('value1',),('value2',)]
list2 = [('value1', 'value1'), ('value2', 'value2')]
</code></pre>
<p>When I loop through the first query:</p>
<pre><code>for item1 in list1:
    print(item1)
</code></pre>
<p>I get the following:</p>
<pre><code>('value1',)
('value2',)
</code></pre>
<p>Whereas when I loop through the second query:</p>
<pre><code>for item1, item2 in list2:
    print(item1, item2)
</code></pre>
<p>I get the following:</p>
<pre><code>value1 value1
value2 value2
</code></pre>
<p>So why the difference in output when looping over a list of single-element tuples vs multi-element tuples?  Is there a different way of building the loop such that I don't have to handle the output differently?  Right now whenever I'm looping through the list of single-element tuples I need to build the print statement like this:</p>
<pre><code>for item1 in query1:
    print(item1[0])
</code></pre>
<p>I guess it just seems weird that Python is handling the two differently in how it parses the lists.  In other words, why isn't it outputting the second loop like this:</p>
<pre><code>('value1', 'value1')
('value2', 'value2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not comparing apple to apple.</p>
<pre><code>In [8]: for item in list1:
   ...:     print(item)

('value1',)
('value2',)

In [9]: for item in list2:
   ...:     print(item)

('value1', 'value1')
('value2', 'value2')
</code></pre>
<p>In your question, you are expecting that two differently unpacked loop to behave the same.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should loop through 1-item tuples by unpacking the tuple just like you do with 2-item tuples (note the comma):</p>
<pre><code>for item1, in list1:
    print(item1)
</code></pre>
</div>
<span class="comment-copy">Ahhhh... I didn't know that I could specify just one iterating variable for the multi-value tuple such that it outputs that entire tuple, not the individual elements of that tuple.  I find it helpful, yet strange, that Python implicitly figures out that you want the individual elements when you specify two iterating variables, but I'm not gonna complain.</span>
<span class="comment-copy">It won't let me mark both yours and Rahul's as the answer - Rahul answered my question as I asked it so I have to mark that as the answer, but this is the answer I didn't know I was looking for!  I've never seen this syntax before where you can specify the tuple as the iterating variable.  I just tried this with lists and sure enough, you can use list notation as the iterating variable as well. Thank you for your answer because it answers the question I was ultimately looking for.</span>
<span class="comment-copy">Where did you find this syntax?  I've never seen it anywhere...</span>
<span class="comment-copy">You're welcome. You can find the syntax for a single-item tuple (also known as a singleton) <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">here</a> (search for singleton).</span>
<span class="comment-copy">So, when I type <code>for x,y in list:</code>, is that the same as <code>for (x,y) in list:</code>?  Have I always been specifying a tuple as the iterating variable and never knew it?  Or is a singleton just some special case?  I just learned the other day that a tuple is defined by the comma, not the parenthesis...</span>
<span class="comment-copy">This has been driving me nuts because whenever I do a sqlite query for a single field in a db, I get a single-element tuple (singleton as I now know).  Whenever I looped over it, it was a pain because I didn't know that I needed to use the tuple notation as the loop iterating variable - mind blown right now :)</span>
