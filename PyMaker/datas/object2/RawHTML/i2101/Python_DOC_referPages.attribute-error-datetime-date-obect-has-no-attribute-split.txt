<div class="post-text" itemprop="text">
<p>What can be done to avoid the error that comes when I try to split <code>datetime</code>? I'm trying to split the <code>datetime</code> into year, month and date components.</p>
<pre><code># Split the  date (This converts each observation into a list)
previous_loans['firstduedate'] = previous_loans['firstduedate'].apply(lambda x: x.split('-'))

# Convert all elements in each observation(list) from str to int
previous_loans['firstduedate'] = previous_loans['firstduedate'].apply(lambda x: [int(y) for y in x ])

# Convert each observation into a date format
previous_loans['firstduedate'] = previous_loans['firstduedate'].apply(lambda x : date(x[0], x[1], x[2]), datetime=True)
</code></pre>
<p>The error I get is </p>
<pre><code>Attribute error ::datetime.date obect has no attribute 'split'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are at least three problems with what you are trying to achieve:</p>
<ol>
<li>Don't use <code>datetime.date</code> objects within a Pandas series. Use Pandas-friendly <code>pd.Timestamp</code> to create <code>datetime</code> series via <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="nofollow noreferrer"><code>pd.to_datetime</code></a>. This allows you to take advantage of NumPy arrays and efficient vectorised operations.</li>
<li>Date objects, whether <code>datetime.date</code> or <code>pd.Timestamp</code>, are stored internally via integers, not strings. So don't try and "split" them via <code>str.split</code>.</li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a> returns a list. This is anti-Pandas, since it means you are storing two layers of pointers, a series of lists which themselves hold pointers. Instead, construct <code>int</code> columns to represent components of your dates.</li>
</ol>
<p>This is one approach:</p>
<pre><code>from datetime import date

df = pd.DataFrame({'date': [date(2018, 1, 1), date(2018, 5, 20), date(2018, 9, 11)]})

df['date'] = pd.to_datetime(df['date'])

L = ['year', 'month', 'day']
df = df.join(pd.concat([getattr(df['date'].dt, i).rename(i) for i in L], axis=1))

print(df)

        date  year  month  day
0 2018-01-01  2018      1    1
1 2018-05-20  2018      5   20
2 2018-09-11  2018      9   11
</code></pre>
<hr/>
<p>To make your code work with <code>datetime.date</code> objects is possible, but requires string conversion first and leaves you with a series of lists. Neither method or result are recommended:</p>
<pre><code># AttributeError: 'datetime.date' object has no attribute 'split'
# df['date_split'] = df['date'].apply(lambda x: x.split('-'))  
df['date_split'] = df['date'].apply(lambda x: x.strftime('%Y-%m-%d').split('-'))

print(df)

         date      date_split
0  2018-01-01  [2018, 01, 01]
1  2018-05-20  [2018, 05, 20]
2  2018-09-11  [2018, 09, 11]
</code></pre>
</div>
