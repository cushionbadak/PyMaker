<div class="post-text" itemprop="text">
<p>This is my code. I am trying to find the prime numbers before or equal to the integer inputted. However, it seems that the loop stops when it sees an integer in the range that fits the requirements. Unfortunately, this is not I wanted it to do. I would like to make it run through all the tests in the range before making the judgement. Is this possible? If so, how do I do this? Thank you.</p>
<pre><code>def getNumber(main):
    n = int(input())
return n


def isPrime(n):
    list=[2]
    if n &gt; 1:
        for i in range(2, n+1):
            for a in range (2, n):
                if i*a != i and i%a != 0 and i%2 != 0:
                    list.append(i)
                    break
        return "\n".join(map(str, list))`

def main():
n = getNumber(main)
print(isPrime(n))

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've got your logic a bit wrong. Here's what your code is doing:</p>
<ol>
<li>Examine numbers in increasing order from <code>2</code> to the inputted <code>n</code>.</li>
<li>For each number <code>i</code>, check if any number <code>a</code> between <code>2</code> and <code>n</code> divides <code>i</code></li>
<li>If <code>a</code> divides <code>i</code>, add <code>i</code> to the list, and then move to the next <code>i</code></li>
</ol>
<p>This isn't going to get you a prime number. In fact, I'm having trouble figuring out what it <em>will</em> give you, but a prime number probably isn't it. Look at this function instead, which will return all the prime numbers less than or equal to the given number - you can compare it to your code to figure out where you went wrong:</p>
<pre><code>def getPrimesLessThanOrEqualTo(n):
    if n &lt;= 1:                # Anything 1 or less has no primes less than it.
        return ""             #    So, return nothing.
    list = [2]                # 2 is the lowest prime number &lt;= n
    for i in range(3, n+1):   # We start at 3 because there's no need to re-check 2
        for a in list:        # Instead of iterating through everything less than
                              #   i, we can just see if i is divisible by any of 
                              #   the primes we've already found
            if i % a == 0:    # If one of the primes we've found divides i evenly...
                break         # then go ahead and try the next i
            list.append(i)    # Now, if we got through that last bit without 
                              #   hitting the break statement, we add i to our list
    return "\n".join(list)    # Finally, return our list of primes &lt;= i
</code></pre>
<p>If you wanted to be more efficient, you could even use <code>range(3, n+1, 2)</code> to count by twos - thus avoiding looking at even numbers at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>if/else</code> block if your <code>break</code> is never executed by any item in the iterable the <code>else</code> statement will triggered. <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html</a> <code>4.4</code> demonstrates this accomplishing this almost exact task. </p>
<pre><code>n = int(input('Enter number: '))
if n &lt;= 1:
    print('No primes')
else:
    primes = []
    for i in range(2, n +1):
        for k in range(2, i):
            if not i % k:
                break
        else:
            primes.append(i)
    print(*primes)
    # Enter number: 50
    # 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47
</code></pre>
</div>
<span class="comment-copy">Can you give a better example? Loop runs for whole range unless you break it. Do not name your variable as <code>list</code></span>
<span class="comment-copy">Thank you for your help. I understand I have some logical errors. Do you have any suggestions on ways on improving my logic in Python?</span>
<span class="comment-copy">Well, if I can be blunt, python isn't the problem - the same issue would show itself in any other programming language. My advice is to just write out the algorithm you want to use beforehand, in pseudocode or even just in words, and follow it manually to make sure it acts the way you want it to. Then, after that, implement it in code and test it to make sure it still works the way you want it to.</span>
<span class="comment-copy">Thank you for your suggestion. I will definitely give try that out.</span>
