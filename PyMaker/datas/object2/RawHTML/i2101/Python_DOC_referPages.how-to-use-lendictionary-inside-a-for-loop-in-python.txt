<div class="post-text" itemprop="text">
<p>I have a code snippet in python, I tried running it but I am not able to understand the ouput that is being produced. Here is my code:</p>
<pre><code>s = {"chris" :["1", "22", "333", "4444"] }
</code></pre>
<p>First For loop and it's output:</p>
<pre><code>for i in range(len(s["chris"])):                     #10
      print(s["chris"][i])

Output: 
1
22
333
4444
</code></pre>
<p>Second For loop and it's output:</p>
<pre><code>for i in range (len(s["chris"])):                    #7
      print(len(s["chris"][i]))

Output:
1
2
3
4
</code></pre>
<p>It would be a big help if someone could help me understand both the for loop codes and also help me underdstand the outputs produced. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you use <code>for i in range(some integer)</code> the loop will iterate i from 0 to that <code>some integer - 1</code>
for example following code will give <code>0 1 2 3 4</code> as output</p>
<pre><code>for i in range(5):
    print (i)
</code></pre>
<p>in your first for loop you iterate <code>i</code> until 4 which is the length of list <code>"chris"</code> and you are printing the <code>i th</code> element in the <code>"chris"</code> list.So you get the first output</p>
<p>in the second loop, loop condition is same but there you printing the length of the <code>i th</code> element of <code>"chris"</code> list, which is  1 2 3 4 and that is your output in the second loop.</p>
<p>Hope you could understand</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">dictionary</a> <code>s</code> and <code>"chris"</code> is the key pointing to the list <code>["1", "22", "333", "4444"]</code>. So calling <code>s["chris"]</code> gives you the list <code>["1", "22", "333", "4444"]</code>, while <code>s["chris"][i]</code>, for i =0, ... 3, gives you the elements of this list, i.e. <code>s["chris"][0] = "1"</code>, <code>s["chris"][1] = "22"</code>, etc. The rest you should figure out yourself.</p>
<p>Just let me add that the first loop is equivalent to </p>
<pre><code>for val in s["chris"]:             
      print(val)
</code></pre>
<p>and the second loop to</p>
<pre><code>for val in s["chris"]:             
      print(len(val))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Explaination:</strong></p>
<p>First example:</p>
<ul>
<li><p>iterate trough the range of the dictionary's <code>chris</code> key ( <code>range</code> an iterator from <code>0</code> to <code>parameter - 1</code>)</p></li>
<li><p>then get the value in the dictionary's <code>chris</code> key with that index</p></li>
</ul>
<p>Second example:</p>
<ul>
<li>same as first example, but just getting length, so length of <code>'1'</code> is 1, and length of <code>'22'</code> is 2 and so on</li>
</ul>
</div>
<span class="comment-copy">Isn't it intuitive ?</span>
<span class="comment-copy">Do you know what <code>range</code> and <code>len</code> do? If not, have you tried reading the documentation?</span>
<span class="comment-copy">The first loop outputs the contents of the list one by one (in an extremely unpythonic, weird manner), the second one outputs the length of each string in that list - but again, nobody would do it like that. Is that an example you're supposed to be learning from?</span>
<span class="comment-copy">Play around in a Python shell and see what <code>s["chris"]</code> produces, <code>s["chris"][0]</code>, <code>len(s["chris"])</code> and <code>list(range (len(s["chris"])))</code> (more helpful than <code>range(...)</code> alone here)</span>
<span class="comment-copy">Hey! Thanks for replying. I am able to understand range and len. My problem is with understanding: print(s["chris"][i]) and print(len(s["chris"][i])). I am not exactly able to understand why the index i is used in both the places.</span>
<span class="comment-copy">Why would <code>range</code> mean <code>[1, 2, 3, 4]</code> ?</span>
<span class="comment-copy">@DeepSpace Oh maan, will edit</span>
<span class="comment-copy">@DeepSpace Edited mine</span>
<span class="comment-copy">It's still not accurate, <code>range(n)</code> returns an iterator (a list in Python 2 and a <code>range</code> object in Python 3) with the numbers <code>0</code> to <code>n - 1</code>.</span>
<span class="comment-copy">@DeepSpace Now?</span>
