<div class="post-text" itemprop="text">
<p>I am working at a "cloud server" for myself. I have a tool to list files which are on the server.</p>
<pre><code>flist = os.listdir("C:/Server")
conn.send(bytes("str(flist), "UTF-8"))        
</code></pre>
<p>This sends a list to the client, the client converts it to a string. (something like this: [' Arcer.exe', 'Launcher.exe', 'Document.txt'])
Now how can I convert the string back into a list?</p>
<pre><code>string = "[' Arcer.exe', 'Launcher.exe', 'Document.txt']"
list = []
list = string.convert  #pseudo method
print(list[0]) #Arcer.exe
print(list[1]) #Launcher.exe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>literal_eval</code> from <code>ast</code> module:</p>
<pre><code>from ast import literal_eval
string = "[' Arcer.exe', 'Launcher.exe', 'Document.txt']"
newList = literal_eval(string)
print(newList)
</code></pre>
<p>Output:</p>
<pre><code>[' Arcer.exe', 'Launcher.exe', 'Document.txt']
</code></pre>
<p>If you do not want to use the <code>ast</code> module, another way of doing it is to remove the brackets from your string and then split it in every comma <code>,</code> character as follows:</p>
<pre><code>string = "[' Arcer.exe', 'Launcher.exe', 'Document.txt']"
newList = string[1:-1].replace("'","").split(",")
print(newList)
</code></pre>
<p>This will give you the same output as the above:</p>
<pre><code>[' Arcer.exe', ' Launcher.exe', ' Document.txt']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend using the <code>json</code> module.</p>
<p>To send the list you can change <code>str(flist)</code> to <code>json.dumps(flist)</code> then on the other end you can reload the list using <code>flist = json.loads(string)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>First, <em>never</em> name variables <code>list</code> or <code>string</code>. The first is the name of a built-in class, the second is a module in the standard library.</p>
<p>You should avoid using string representations of Python variables, since reading and writing them are not going to be efficient. But, if you have no other option, you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>:</p>
<pre><code>from ast import literal_eval

x = "[' Arcer.exe', 'Launcher.exe', 'Document.txt']"
y = literal_eval(x)

print(y, type(y))

[' Arcer.exe', 'Launcher.exe', 'Document.txt'] &lt;class 'list'&gt;
</code></pre>
</div>
<span class="comment-copy">Note that the last won't work if any of the strings have a comma in them.</span>
