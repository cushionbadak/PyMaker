<div class="post-text" itemprop="text">
<p>Is there an easy way to pass a complete data structure from C++ to Python and vice-versa easily with multiple data types?</p>
<p>I have a complex class with pointer objects of floats, longs etc. I could convert this into a json string and parse it both ways, but this would be really slow.</p>
<p>However, if we had a special format, that has takes this data, but also stores meta data of the start/end of the json string, it would parse much faster. Is there anything like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would personally recommend serializing your data into JSON in C++ using e.g. <a href="http://rapidjson.org/md_doc_tutorial.html" rel="nofollow noreferrer">rapidjson</a> or <a href="http://doc.qt.io/qt-5/json.html" rel="nofollow noreferrer">Qt</a> and then to transfer the resulting string to Python using the <a href="https://docs.python.org/3/c-api/intro.html" rel="nofollow noreferrer">C API bindings for Python</a> and deserializing it into Python Dictionary there. One-way or two-way transfer should be easy enough.</p>
<p>Note about the C API bindings however. I have used it in the past and it was not pleasant experience in any way or form. Eventually you will make it work and do what you want but it will cost you some nerves.</p>
<p>Lastly do not worry about performance. Since you are using Python (an interpreted language) you are apparently not doing anything performance critical anyway so cost of the JSON (de)serialization can be ignored here.</p>
<p>Good luck because you are going to need it with the Python's C API bindings.</p>
</div>
<span class="comment-copy">It seems very slow. What if I have large objects like images. The parse wouldnt know where to start and end, and would have to parse the object one character at a time</span>
<span class="comment-copy">@raaj You should reconsider your design. Passing images in binary form in memory makes no sense. However if you insist and the image is <b>standard_layout</b> data structure you can just pass it's address to Python and it should work there. But first make sure that you understand what I mean by all that. It is not a trivial matter.</span>
<span class="comment-copy">hold on, is it possible to pass the image pointer address to python?</span>
<span class="comment-copy">Yes, if the C++ object you point to is standard_layoyt, declared volatile (if you want to change it in Python) and the Python equivalent expects the same layout.</span>
<span class="comment-copy">where do i even start, what if I have a C++ class with a cv::Mat opencv object, and maybe a bunch of float*</span>
