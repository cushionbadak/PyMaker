<div class="post-text" itemprop="text">
<p>This is my package hierarchy</p>
<pre><code>app  
|--__init__.py    //Empty file
|--server.py  
|--global_vars.py  
|
|--handlers    
   |--__init__.py    //Empty file
   |
   |--url1
   |  |--__init__.py    //Empty file
   |  |--app1.py
   |  |--app2.py
   |
   |--url2
      |--__init__.py    //Empty file
      |--app3.py
</code></pre>
<p>Now I want to import <code>global_vars.py</code> inside <code>app1.py</code>.
So I gave 
    <code>import app.global_vars.py</code> inside app1.py.</p>
<p>But I get the following error:</p>
<pre><code>    import app.global_vars
ImportError: No module named app.global_vars
</code></pre>
<p>I should also mention that I am importing app1.py from server.py. <code>server.py</code> is the file I am actually running. When server.py imports app1.py, <code>app1.py</code> tries to import <code>global_vars.py</code> and I get the above mentioned error</p>
<p>What am I doing wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are running <code>app/server.py</code> as a script, the parent directory of <code>app</code> is not added to <code>sys.path()</code>. The <code>app</code> directory itself is added instead (not as a package but as a import search path).</p>
<p>You have 4 options:</p>
<ol>
<li>Move <code>server.py</code> <em>out</em> of the <code>app</code> package (next to it)</li>
<li><p>Add a new script file next to <code>app</code> that only runs:</p>
<pre><code>from app import server
server.main()
</code></pre></li>
<li><p>Use the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow noreferrer"><code>-m</code> switch option</a> to run a <em>module</em> as the main entry point:</p>
<pre><code>python -m app.server
</code></pre></li>
<li><p>Add the parent directory of <code>server.py</code> to <code>sys.path</code>:</p>
<pre><code>import os.path
import sys

parent = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent)
</code></pre>
<p>This last option can introduce more problems however; now both the <code>app</code> package and the modules contained <em>in</em> the <code>app</code> package are on <code>sys.path</code>. You can import both <code>app.server</code> and <code>server</code> and Python will see these as two separate modules, each with their own entry in <code>sys.modules</code>, with separate copies of their globals.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>need <code>__init__.py</code> file, will regard it as a package</p>
<p>app<br/>
|--server.py<br/>
|--global_vars.py<br/>
|--handlers</p>
<p>|--<code>__init__.py</code>
...</p>
<p><code>__init__.py</code> can be empty</p>
</div>
<span class="comment-copy">Is there a <code>__init__.py</code> file in <code>app</code>?</span>
<span class="comment-copy">Yes, there is a <code>__init__.py</code> in all the directories in the given file heirarchy</span>
<span class="comment-copy">What does <code>import app; print app.__file__</code> say is the path to that module / package?</span>
<span class="comment-copy">I went to app's parent folder, opened a python shell and imported app.   Now <code>app.__file__</code> gives <code>app/__init__.py</code> as output</span>
<span class="comment-copy">No, I wanted you to do that in <code>app1.py</code>.</span>
<span class="comment-copy">Thank you for your help. Now, I understand the problem.</span>
<span class="comment-copy">There is a <code>__init__.py</code> in all the directories in the given file heirarchy</span>
<span class="comment-copy">oh, My English is not very good</span>
