<div class="post-text" itemprop="text">
<p>I'm new to programming and I need some help. I have a text file with lots of names and hobbies that looks something like this:</p>
<blockquote>
<p>Jack:crafting</p>
<p>Peter:hiking</p>
<p>Wendy:gaming</p>
<p>Monica:tennis</p>
<p>Chris:origami</p>
<p>Sophie:sport</p>
<p>Monica:design</p>
</blockquote>
<p>Some of the names and hobbies are repeated. I'm trying to make the program display something like this:</p>
<blockquote>
<p>Jack: crafting, movies, yoga</p>
<p>Wendy: gaming, hiking, sport</p>
</blockquote>
<p>This is my program so far, but the 4 lines from the end are incorrect.</p>
<pre><code>def create_dictionary(file):
newlist = []
dict = {}
file = open("hobbies_database.txt", "r")
hobbies = file.readlines()
for rows in hobbies:
    rows1 = rows.split(":")
    k = rows1[0] # nimi
    v = (rows1[1]).rstrip("\n") # hobi
    dict = {k: v}
    for k, v in dict.items():
        if v in dict[k]:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this case I would use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a>.</p>
<pre><code>import sys 
from collections import defaultdict


def create_dictionary(inputfile):
    d = defaultdict(list)
    for line in inputfile:
        name, hobby = line.split(':', 1)
        d[name].append(hobby.strip())
    return d


with open(sys.argv[1]) as fp: 
    for name, hobbies in create_dictionary(fp).items():
        print(name, ': ', sep='', end='')
        print(*hobbies, sep=', ')
</code></pre>
<p>Your example give me this result:</p>
<pre><code>Sophie: sport
Chris: origami
Peter: hiking
Jack: crafting
Wendy: gaming
Monica: tennis, design
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you may try this one</p>
<pre><code>data = map(lambda x:x.strip(), open('hobbies_database.txt'))
tmp = {}
for i in data:
    k,v = i.strip().split(':')
    if not tmp.get(k, []):
        tmp[k] = []
    tmp[k].append(v)
for k,v in tmp.iteritems():
    print k, ':', ','.join(v)
</code></pre>
<p>output:</p>
<pre><code>Monica : tennis,design
Jack : crafting
Wendy : gaming
Chris : origami
Sophie : sport
Peter : hiking
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like this. I've deliberately rewritten this as I'm trying to show you how you would go about this in a more "Pythonic way". At least making use of the language a bit more.</p>
<p>For example, you can create arrays within dictionaries to represent the data more intuitively. It will then be easier to print the information out in the way you want.</p>
<pre><code>def create_dictionary(file):

    names = {} # create the dictionary to store your data

    # using with statement ensures the file is closed properly
    # even if there is an error thrown
    with open("hobbies_database.txt", "r") as file:

        # This reads the file one line at a time
        # using readlines() loads the whole file into memory in one go
        # This is far better for large data files that wont fit into memory
        for row in file:

            # strip() removes end of line characters and trailing white space
            # split returns an array [] which can be unpacked direct to single variables
            name, hobby = row.strip().split(":")

            # this checks to see if 'name' has been seen before
            # is there already an entry in the dictionary
            if name not in names:

                # if not, assign an empty array to the dictionary key 'name'
                names[name] = []

            # this adds the hobby seen in this line to the array
            names[name].append(hobby)

    # This iterates through all the keys in the dictionary
    for name in names:

        # using the string format function you can build up
        # the output string and print it to the screen

        # ",".join(array) will join all the elements of the array
        # into a single string and place a comma between each

        # set(array) creates a "list/array" of unique objects
        # this means that if a hobby is added twice you will only see it once in the set

        # names[name] is the list [] of hobby strings for that 'name'
        print("{0}: {1}\n".format(name, ", ".join(set(names[name]))))
</code></pre>
<p>Hope this helps, and perhaps points you in the direction of a few more Python concepts. If you haven't been through the introductory tutorial yet... i'd definitely recommend it.</p>
</div>
