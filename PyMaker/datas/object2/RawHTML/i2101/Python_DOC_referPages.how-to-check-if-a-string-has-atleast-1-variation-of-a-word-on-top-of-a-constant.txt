<div class="post-text" itemprop="text">
<p>So my script pulls the label of products listed on a website and I'm constantly scraping to find a product that I know has this one specific keyword and another keyword that varies in spelling every now and then. The keyword constant is 'blazer' and the other variable keyword is '10' or 'ten'. Will this be the proper way to find a title that has the word 'blazer' in it and either '10' or 'ten'?</p>
<pre><code>if 'blazer' in compareName and 'ten' or '10' in compareName:
  func()
else:
  pass
</code></pre>
<p>So I want the function to run if the string variable compareName has both 'blazer' and 'ten' or 'blazer' and '10'</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>'ten' or '10' in compareName</code> part is not going to give you the results you want. It'll return 'ten' every time! instead, you need to check whether 'ten' is in compareName, and also check whether '10' is in compare name, and put the or between the two, like so:</p>
<pre><code>if 'blazer' in compareName and ('ten' in compareName or '10' in compareName):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure there is a better way of doing this but to simply maintain your syntax and give the proper answer your <code>if</code> statement should be</p>
<pre><code>if 'blazer' in compareName and ('ten' in compareName or '10' in compareName):
    func()
else:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to have a fundamental misunderstanding of how programming works. I would highly suggest you do some reading up on <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">Comparisons</a> before moving on.  </p>
<p>This statement here:</p>
<pre><code>if 'blazer' in compareName and 'ten' or '10' in compareName:
</code></pre>
<p>Is essentially evaluating as:</p>
<pre><code>if (('blazer in compareName) == True) and ('ten' == True) or (('10' in compareName) == True):
</code></pre>
<p>Assuming <code>compareName</code> is 'blazerten', it will evaluate to:</p>
<pre><code>if True and True or False:

# Note: Python evaluates OR before AND operators

# Result: True
</code></pre>
<p>Looks good? Nope! If <code>compareName</code> is 'blazer', it will evaluate <em>the same thing</em>.  Because the second condition <code>'ten'</code> will always evaluate to <code>True</code> since it's not an empty string, so once you satisfy the first condition, the second and third condition is moot.</p>
<p>The proper way is as the other answers mentioned, you'll need to do a separate comparison each:</p>
<pre><code>if 'blazer' in compareName and 
   'ten' in compareName or 
   '10' in compareName:
</code></pre>
<p>Note: brackets are not required if you respect the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operation precedence.</a></p>
<p>If you're feeling a bit adventurous and don't like to repeat yourself too much, you can try expressing this in a list comprehension:</p>
<pre><code>if 'blazer' in compareName and
   any([part in compareName for part in ['ten', '10']]):
</code></pre>
<p>The second condition is now taken care of by the <a href="https://docs.python.org/3/library/functions.html?highlight=any#any" rel="nofollow noreferrer"><code>any()</code> function</a>.  The caveat is of course, you forsake a little bit of readability.  The advantage though is if you need to compare more than just <code>'ten'</code> and <code>'10'</code> in the OR clause, you can simply add to the list of the second condition.</p>
</div>
<span class="comment-copy">No, you need parentheses around the <code>or</code> statement.</span>
<span class="comment-copy">Like this?                                                                                                                          if 'blazer' in compareName and ('ten' or '10') in compareName:</span>
<span class="comment-copy">No, I was only talking about precedence. See Steve's answer for a complete explanation of what you need to do.</span>
<span class="comment-copy">Nope, that would return true for strings containing 'ten' but not strings containing '10' See my answer!</span>
<span class="comment-copy">Tutorials on writing Boolean expressions and string operations will answer this.  Also, you should not post code until you have a documented problem -- if you don't <i>know</i> what your code does, you're not ready to ask a question.</span>
