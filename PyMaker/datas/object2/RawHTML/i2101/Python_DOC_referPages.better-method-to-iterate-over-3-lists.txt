<div class="post-text" itemprop="text">
<p>I am creating a program which iterates over the width and height of an image as well as makes use of a set of keys.</p>
<p>Here is an example:</p>
<pre><code>width = [0,1,2,3,4,6,7,8,9]
height = [0,1,2,3,4]
keys = [18,20,11]
</code></pre>
<p>The width and height are a range of integers up to the size of the width and height.
The keys are any set of numbers (actually ASCII values) but are not ordered numbers.</p>
<p>I would like the output to be like this:</p>
<pre><code>0 0 18
0 1 20
0 2 11
0 3 18
0 4 20
1 0 11
1 1 18
. . ..
9 0 20
9 1 11
9 2 18
9 3 20
9 4 11
</code></pre>
<p>As you can see, the width and height can be produced with nested for loops, whereas the keys cycle between each other.</p>
<p>Here is my solution:</p>
<pre><code>w = [0,1,2,3,4,6,7,8,9]
h = [0,1,2,3,4]
k = [18,20,11]

kIndex = 0

for i in w:
    for j in h:
        print(i,j,k[kIndex])
        # Cycle through the keys index.
        # The modulo is used to return to the beginning of the keys list
        kIndex = (kIndex + 1) % len(k)
</code></pre>
<p>Actually it works as intended, however, I would like a more efficient way to do the above instead of using an incremental variable for the index position of the keys list.</p>
<p>I don't mind the nested for loop, if that has to be used, but the index keys variable annoys me as it seems like the code won't work without it, but at the same time isn't really pythonic.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get the product of your width and height, that is your whole grid. Then, you want to cycle over the keys, thus use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>. You finally <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> those together and get the desired result.</p>
<p>You can make this a generator using <code>yield</code> for memory efficieny.</p>
<pre><code>from itertools import product, cycle

def get_grid(width, height, keys):
    for pos, key in zip(product(width, height), cycle(keys)):
        yield (*pos, key)
</code></pre>
<p>Or if you do not want a generator.</p>
<pre><code>out = [(*pos, key) for pos, key in zip(product(width, height), cycle(keys))]
</code></pre>
<h2>Example</h2>
<pre><code>width = [0,1,2,3,4,6,7,8,9]
height = [0,1,2,3,4]
keys = [18,20,11]

for triple in get_grid(width, height, keys):
    print(triple)
</code></pre>
<h2>Output</h2>
<pre><code>(0, 0, 18)
(0, 1, 20)
(0, 2, 11)
(0, 3, 18)
(0, 4, 20)
(1, 0, 11)
(1, 1, 18)
...
</code></pre>
<p>As a sidenote, notice that you could replace the lists defining <code>width</code> and <code>height</code> by ranges.</p>
<pre><code>width = range(10)
height = range(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use cycle from itertools.</p>
<pre><code>from itertools import cycle, product

width = [0,1,2,3,4,6,7,8,9]
height = [0,1,2,3,4]
keys = [18,20,11]


c = cycle(keys)

for w,h in product(width,height):
    print(w,h,next(c))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use iterate over matrix. Its ndenumerate function from numpy packet. If width and height are range of int, you can skip creating list. Just define the size of this lists.     </p>
<pre><code>width = 10
height = 5
k = [18,20,11]

kIndex = 0

for (i,j), value in np.ndenumerate(np.ones((height,width))):
    print(i,j,k[kIndex])
    # Cycle through the keys index.
    # The modulo is used to return to the beginning of the keys list
    kIndex = (kIndex + 1) % len(k)
</code></pre>
</div>
<span class="comment-copy">Pretty much what I was about to post: <code>[(w,h,k) for (w,h),k in zip(product(width, height), cycle(keys))]</code></span>
<span class="comment-copy">Is there a way without a generator. I'm not too confident with them. The itertools library seems ok, but the generator seems off my level.</span>
<span class="comment-copy">@SurajKothari Yes, you can simply cast the generator to a <code>list</code> by doing <code>list(get_grid(width, height, keys))</code>.</span>
<span class="comment-copy">I have used width = range(Image.size[0]), but to understand my problem I used my example with an arbitrary list</span>
<span class="comment-copy">Thanks for the list comprehension. I seem to understand it slightly better since I use them all the time. However, it has dawned on me that the generator version is more "beautiful" or elegant and I might consider them anyways. Thanks a lot.</span>
