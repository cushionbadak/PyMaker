<div class="post-text" itemprop="text">
<p>I have the following codes, </p>
<pre><code>In [4]: def foo():
   ...:     a = 2
   ...:     b = 3
   ...:     return a + b
   ...: 
   ...: 

In [5]: import dis

In [6]: dis.dis(foo)
  2           0 LOAD_CONST               1 (2)
              2 STORE_FAST               0 (a)

  3           4 LOAD_CONST               2 (3)
              6 STORE_FAST               1 (b)

  4           8 LOAD_FAST                0 (a)
             10 LOAD_FAST                1 (b)
             12 BINARY_ADD
             14 RETURN_VALUE
</code></pre>
<p>Reference to the bytecodes:<br/>
I know that:<br/>
the first column is line-number: 2, 3, 4 
the third column is op-names: LOAD_CONST etc<br/>
the fifth column is the codes: (2) (a)</p>
<p>How about the second column: 0, 2 4, 6, 8...<br/>
and the fourth column 1, 0, 2, 1</p>
<p>Could you please provide a hint to find related info?</p>
</div>
<div class="post-text" itemprop="text">
<p>The second column is the bytecode byte index; each bytecode consists of 2 bytes (one indicating the exact opcode, the other the opcode argument value). It is actually column #4; there are two columns with no current value in your output.</p>
<p>For your function, you can find the bytestring that contains the bytecode as the <code>__code__.co_code</code> attribute:</p>
<pre><code>&gt;&gt;&gt; foo.__code__.co_code
b'd\x01}\x00d\x02}\x01|\x00|\x01\x17\x00S\x00'
</code></pre>
<p>So <code>b'd\x01'</code> is <code>LOAD_CONST 1</code>, <code>b'}\x00'</code> is <code>STORE_FAST 0</code>, etc.</p>
<p>This is documented under the <a href="https://docs.python.org/3/library/dis.html#dis.disco" rel="nofollow noreferrer"><code>dis.disco()</code> function</a>:</p>
<blockquote>
<p>The output is divided in the following columns:</p>
<ol>
<li>the line number, for the first instruction of each line</li>
<li>the current instruction, indicated as <code>--&gt;</code>,</li>
<li>a labelled instruction, indicated with <code>&gt;&gt;</code>,</li>
<li>the address of the instruction,</li>
<li>the operation code name,</li>
<li>operation parameters, and</li>
<li>interpretation of the parameters in parentheses.</li>
</ol>
</blockquote>
<p>When you use <code>dis.dis()</code>, column #2 (<em>current instruction</em>) will always be empty.</p>
<p>Column #3, the labelled instruction, is used whenever there's a loop or test. For example:</p>
<pre><code>&gt;&gt;&gt; dis.dis('if foo:\n    for i in it:\n        print(i)\nelse: print(bar)')
  1           0 LOAD_NAME                0 (foo)
              2 POP_JUMP_IF_FALSE       28

  2           4 SETUP_LOOP              30 (to 36)
              6 LOAD_NAME                1 (it)
              8 GET_ITER
        &gt;&gt;   10 FOR_ITER                12 (to 24)
             12 STORE_NAME               2 (i)

  3          14 LOAD_NAME                3 (print)
             16 LOAD_NAME                2 (i)
             18 CALL_FUNCTION            1
             20 POP_TOP
             22 JUMP_ABSOLUTE           10
        &gt;&gt;   24 POP_BLOCK
             26 JUMP_FORWARD             8 (to 36)

  4     &gt;&gt;   28 LOAD_NAME                3 (print)
             30 LOAD_NAME                4 (bar)
             32 CALL_FUNCTION            1
             34 POP_TOP
        &gt;&gt;   36 LOAD_CONST               0 (None)
             38 RETURN_VALUE
</code></pre>
<p>There are 4 jump targets, where several opcodes can trigger a jump to one of those positions. They serve as a visual marker to ease reading.</p>
</div>
<span class="comment-copy">could I ask what's the <code>d</code> in <code>d\x01</code>, and '}` in ''}\x00'`?</span>
<span class="comment-copy">Itâ€™s the ASCII representation of the byte that Python interprets as the specific bytecode. So <code>d</code> is 0x64 in hex, and the Python interpreter evaluation loop will execute it as the <code>LOAD_CONST</code> opcode.</span>
<span class="comment-copy">You can use the <code>dis.opmap</code> dictionary to map opcode names to bytes. Or use the <code>dis.opname</code> list with the integer value of the byte to find the name; e.g. <code>dis.opname[0x64]</code>.</span>
