<div class="post-text" itemprop="text">
<p>Column 2 within my csv file looks like the following:</p>
<pre><code>20150926T104044Z
20150926T104131Z
</code></pre>
<p>and so on. </p>
<p>I have a definition created that will change the listed date into a julian date, but was wondering how I can go about altering this specific column of data? </p>
<p>Is there a way I can make python change the dates within the csv to a their julian date equivalent? Can I split the column into two csv's and translate the julian date from there?</p>
</div>
<div class="post-text" itemprop="text">
<p>You might be overthinking it.  Try this.</p>
<pre><code>from dateutil.parser import parse
import csv

def get_julian(_date):
    # _date is holding 20150926T104044Z
    the_date = parse(_date)
    julian_start = parse('19000101T000000Z')
    julian_days = (the_date - julian_start).days
    return julian_days

with open('filename.csv') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
        # Column 2, right?
        row[1] = get_julian(row[1])

        # Do things and stuff with your corrected data.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I observed that there are many interpretations to <a href="https://en.wikipedia.org/wiki/Julian_day" rel="nofollow noreferrer">Julian Day</a>, One is Oridinal date(day of the year) and another one day from Monday, January 1, 4713 BC.</p>
<pre><code>import pandas as pd
import datetime
import jdcal

df = pd.read_csv("path/to/your/csv")


def tojulianDate(date):
    return datetime.datetime.strptime(date, '%Y%m%dT%H%M%SZ').strftime('%y%j')
def tojulianDate2(date):
    curr_date = datetime.datetime.strptime(date, '%Y%m%dT%H%M%SZ')
    curr_date_tuple = curr_date.timetuple()
    return int(sum(jdcal.gcal2jd(curr_date_tuple.tm_year, curr_date_tuple.tm_mon, curr_date_tuple.tm_mday)))
df['Calendar_Dates'] = df['Calendar_Dates'].apply(tojulianDate2)

df.to_csv('path/to/modified/csv')
</code></pre>
<p>Method "toJulianDate" can be used to get the day of the year or Oridinal Date.
for second format, there is a library called <a href="https://pypi.org/project/jdcal/1.0/#description" rel="nofollow noreferrer">jdcal</a> to convert gregorian date to julian day or vice versa which is done in toJulianDate2 . This can also be done directly by opening csv and without loading into a dataframe.</p>
<p>Similar question was answered here <a href="https://stackoverflow.com/questions/13943062/extract-day-of-year-and-julian-day-from-a-string-date-in-python/25831416#25831416">Extract day of year and Julian day from a string date in python</a></p>
</div>
<span class="comment-copy">Are you wanting it split down the middle?  For example, the first line turned into <code>20150926</code> and <code>T104044Z</code>?</span>
<span class="comment-copy"><code>dateutil</code> isn't in the stdlib though</span>
<span class="comment-copy">That was not a stated requirement.</span>
<span class="comment-copy">Why not use <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> too?</span>
<span class="comment-copy">I could have and it's ABSOLUTELY the better way to do it, but the suggested code change wasn't CSV specific, so I left that up to @OP to insert.</span>
<span class="comment-copy">Truthfully, I just didn't want to go look up the CSV syntax.</span>
