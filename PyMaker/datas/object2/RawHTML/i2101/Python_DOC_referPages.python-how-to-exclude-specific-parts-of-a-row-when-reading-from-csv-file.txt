<div class="post-text" itemprop="text">
<p>I'm very new to Python and am trying to read a CSV file:`</p>
<pre><code>1980,Mark,Male,Student,L,90,56,78,44,88
1982,Cindy,Female,Student,S,45,76,22,42,90
1984,Kevin,Male,Student,L,67,83,52,55,59
1986,Michael,Male,Student,M,94,63,73,60,43
1988,Anna,Female,Student,S,66,50,59,57,33
1990,Jessica,Female,Student,S,72,34,29,69,27
1992,John,Male,Student,L,80,67,90,89,68
1994,Tom,Male,Student,M,23,60,89,78,39
1996,Nick,Male,Student,S,56,98,84,44,50
1998,Oscar,Male,Student,M,64,61,74,59,63
2000,Andy,Male,Student,M,11,50,93,69,90
</code></pre>
<p>I'd like to save only the specific attributes of this data into a dictionary, or a list of lists. For example, I'd only like to keep the year, name and the five numbers (in a row). I'm not sure how to exclude only the middle three columns.</p>
<p>This is the code I have now: </p>
<pre><code>def read_data(filename):
    f = open("myfile.csv", "rt")
    import csv
    data = {}
    for line in f:
        row = line.rstrip().split(',')
        data[row[0]] = [e for e in row[5:]]

    return data
</code></pre>
<p>I only know how to keep chunks of columns together, but not only specific columns one by one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do this with a simple list comprehension:</p>
<pre><code>def read_data(filename):
    f = open("myfile.csv", "rt")
    data = {}
    col_nums = [0, 1, 5, 6, 7, 8, 9]
    for line in f:
        row = line.rstrip().split(',')
        data[row[0]] = [row[i] for i in col_nums]

    return data
</code></pre>
<p>You could also consider using Pandas to help you read and wrangle the data:</p>
<pre><code>import pandas as pd
df = pd.read_csv("myfile.csv", columns=['year', 'name', 'gender', 'kind', 'size', 'num1', 'num2', 'num3', 'num4', 'num5'])
data = df[['year', 'name', 'num1', 'num2', 'num3', 'num4', 'num5']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>pd.read_csv()</code> and pass in your desired column names:</p>
<pre><code>import pandas as pd

df = pd.read_csv('csv1.csv', names=['Year','Name','Gender','ID1','ID2','Val1','Val2','Val3','Val4','Val5'])

desired = df[['Year','Name','Val1','Val2','Val3','Val4','Val5']]
</code></pre>
<p>Yields:</p>
<pre><code>    Year     Name  Val1  Val2  Val3  Val4  Val5
0   1980     Mark    90    56    78    44    88
1   1982    Cindy    45    76    22    42    90
2   1984    Kevin    67    83    52    55    59
3   1986  Michael    94    63    73    60    43
4   1988     Anna    66    50    59    57    33
5   1990  Jessica    72    34    29    69    27
6   1992     John    80    67    90    89    68
7   1994      Tom    23    60    89    78    39
8   1996     Nick    56    98    84    44    50
9   1998    Oscar    64    61    74    59    63
10  2000     Andy    11    50    93    69    90
</code></pre>
<p>Another option would be to pass the column index locations up front with <code>usecols</code>, like so:</p>
<pre><code>df = pd.read_csv('csv1.csv', header=None, usecols=[0,1,5,6,7,8,9])
</code></pre>
<p>Notice that this returns a dataframe with index-location named columns:</p>
<pre><code>       0        1   5   6   7   8   9
0   1980     Mark  90  56  78  44  88
1   1982    Cindy  45  76  22  42  90
2   1984    Kevin  67  83  52  55  59
3   1986  Michael  94  63  73  60  43
4   1988     Anna  66  50  59  57  33
5   1990  Jessica  72  34  29  69  27
6   1992     John  80  67  90  89  68
7   1994      Tom  23  60  89  78  39
8   1996     Nick  56  98  84  44  50
9   1998    Oscar  64  61  74  59  63
10  2000     Andy  11  50  93  69  90
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try to split each line and assign it explicitly to variables; then simply ignore the variables you will not use (I named them <code>_</code>, so its obvious that they will not be used).</p>
<p>This will raise errors (in the code line that has <code>split()</code>) if a line has less or more than the desired fields.</p>
<pre><code>def read_data(filename):
    data = {}

    with open(filename) as f:
        for line in f:
            line = line.strip()
            if len(line) &gt; 0:
                year, name, _, _, _, n1, n2, n3, n4, n5 = line.split(',')
                data[year] = [n1, n2, n3, n4, n5]

    return data
</code></pre>
</div>
<span class="comment-copy">Carefull: your code doesn't close the file after reading. It usually is a good idea to use <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer"><code>with</code></a> for reading files.</span>
<span class="comment-copy">thank you, I'll add that!</span>
<span class="comment-copy">Carefull: your first code sample doesn't close the file after reading (just like the code in the question). I added the same comment to the question as well.</span>
<span class="comment-copy">Thanks so much, this worked perfectly.</span>
<span class="comment-copy">@Ralf It does when the function exits, so long as the function isn't extended longer than exactly what's written. Otherwise, sure, it would need to be opened better, or just read all at once.</span>
<span class="comment-copy">For better solution you could pass required columns while reading CSV file using <code>usecols</code></span>
<span class="comment-copy">I added that as another option in my answer.</span>
