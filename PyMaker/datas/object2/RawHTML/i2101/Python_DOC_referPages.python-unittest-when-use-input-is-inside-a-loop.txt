<div class="post-text" itemprop="text">
<p>I have the following:</p>
<pre><code>def func():
    s = 1
    i = -1
    while i != 0:
        s += i
        i = int(input())
    return s

if __name__ == "__main__":
    result = func()
    print(str(result))
</code></pre>
<p>You will see that there is a single call to the function, but the function contains a loop that iterates until the use enters a value of 0.</p>
<p>How do I test this function with unittest library?  </p>
</div>
<div class="post-text" itemprop="text">
<p>I am assuming your code is inside a module called <code>mymodule.py</code>. Therefore, you could create a test file name <code>test_mymodule.py</code> to implement your tests. What you want to do is to use the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">unittest.mock</a> module to have access to the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">patch()</a> function in order to decorate the builtin input. </p>
<p>What does that mean is that instead of calling the input function to ask for the user input, you are patching it to return the values defined in <code>side_effect</code>. Each call of input will therefore return a value of the list. Notice that you should include 0 as well, otherwise the test will not work.</p>
<p>For each sequence of inputs, you will have to compute manually (or even using your program) to provide the final result for the method <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual" rel="nofollow noreferrer">assertEqual</a>.</p>
<pre><code>import unittest                                                                                                                                                                               
import unittest.mock                                                                                                                                                                          

from mymodule import func                                                                                                                                                                     

class TestModule(unittest.TestCase):                                                                                                                                                          

    @unittest.mock.patch('builtins.input', side_effect=[1, 2, 3, 0])                                                                                                                          
    def test_func_list1(self, mock):                                                                                                                                                          
        self.assertEqual(func(), 6)                                                                                                                                                           

    @unittest.mock.patch('builtins.input', side_effect=[0])                                                                                                                                   
    def test_func_list2(self, mock):                                                                                                                                                          
        self.assertEqual(func(), 0) 
</code></pre>
<p>Each test method should be prefixed with a <code>test_</code> in its name. The default pattern when using <code>python -m unittest</code> from the CLI looks for <code>test*.py</code> in the current directory (it is the same as running <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover" rel="nofollow noreferrer">TestLoader.discover()</a>. You can probably change this if you want, but you will have to take a look at the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> documentation for more details.</p>
</div>
<span class="comment-copy">A good point to start <a href="https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/" rel="nofollow noreferrer">jeffknupp.com/blog/2013/12/09/â€¦</a> and <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">docs.python.org/3/library/unittest.html</a></span>
<span class="comment-copy">That's worked.  Thank you.</span>
