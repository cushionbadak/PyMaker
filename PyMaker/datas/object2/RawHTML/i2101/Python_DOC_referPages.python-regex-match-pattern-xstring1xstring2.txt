<div class="post-text" itemprop="text">
<p>I'm parsing a file which has text <code>"$string1:$string2"</code></p>
<p>How do I regex match this string and extract <code>"string1"</code> and <code>"string2"</code> from it, basically regex match this pattern <code>: "$*:$*"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You were nearly there with your own pattern, it needs three alterations in order to work as you want it. </p>
<p>First, the star in regexes isn't a <a href="https://en.wikipedia.org/wiki/Glob_(programming)" rel="nofollow noreferrer">glob</a>, as you might be expecting it from shell scripting, it's a <a href="https://en.wikipedia.org/wiki/Kleene_star" rel="nofollow noreferrer">kleene star</a>. Meaning, it needs some character group it can apply it's "zero to n times" logic on. In your case, <a href="https://www.rexegg.com/regex-quickstart.html#chars" rel="nofollow noreferrer">the  alphanumeric character class</a> <code>\w</code>  should work. If that's too restrictive, use <code>.</code> instead, which matches any character except line breaks.</p>
<p>Secondly, you need to apply the regex in a way that you can easily extract the results you want. The usual way to go about it is to define <a href="https://regexone.com/lesson/capturing_groups" rel="nofollow noreferrer">groups</a>, using parentheses.</p>
<p>Last but not least, the <code>$</code> sign is a <a href="https://www.rexegg.com/regex-quickstart.html#anchors" rel="nofollow noreferrer">meta-character</a> in regexes, so if you want to match it literally, you need to write a backslash in front of it. </p>
<p>In working code, it'll look like this:</p>
<pre><code>import re

s = "$string1:$string2"
r = re.compile(r"\$(\w*):\$(\w*)")

match = r.match(s)
print(match.group(1))  # print the first group that was matched
print(match.group(2))  # print the second group that was matched
</code></pre>
<p>Output:</p>
<pre><code>string1
string2
</code></pre>
</div>
<span class="comment-copy">fyi, if you are trying to get a regex to work, a page like <a href="https://regex101.com/" rel="nofollow noreferrer">regex101</a> is very useful to get the syntax right.</span>
<span class="comment-copy">Thanks a lot for the detailed explanation. I was going through the man pages to get a quick fix. But seeing your answer I might as well take some time to understand python regexes since I'm from C background.</span>
<span class="comment-copy">Happy to help. <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">The python docs</a> themselves are probably the best source in that case. They are a bit technical, but if you know the matter already they should be fine.</span>
