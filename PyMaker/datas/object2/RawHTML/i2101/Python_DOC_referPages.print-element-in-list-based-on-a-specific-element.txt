<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7378180/generate-all-subsets-of-size-k-containing-k-elements-in-python">Generate all subsets of size k (containing k elements) in Python</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I would like to store a list of elements based on the requirements like this:</p>
<ol>
<li>Loop the list and check each string</li>
<li>If this string, then store the other strings within the list except the current string.</li>
</ol>
<pre><code>a = ["I","have","something","to","buy"]
</code></pre>
<p>When loop to "I" or "have" or "something" or "buy", then other elements will be stored inside the list except the current looped element. For example, we loop to "something" so "I", "have", "to", "buy" will be stored. </p>
<p>My code:</p>
<pre><code>store = []
for x in a:
    if x:
        #I stuck here, I am really sorry, I know I should give more example,
        #but I really cant continue after here.
</code></pre>
<p>My expected output:</p>
<pre><code>[["have","something","to","buy"], ["I","something","to","buy"], ["I","have","to","buy"], ["I","have","something","buy"], ["I","have","something","to"]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ["I","have","something","to","buy"]
store = []
for x in a:
    s = []
    for i in a:
        if i == x:
            continue
        else:
            s.append(i)
    store.append(s)
print(store)
</code></pre>
<p>Try this</p>
</div>
<div class="post-text" itemprop="text">
<p>since you're only checking words that are already in the list, you could just reduce the problem down to:</p>
<pre><code>wordLists = [a[:w]+a[w+1:] for w in range(len(a))]
</code></pre>
<p>output:</p>
<pre><code>[['have', 'something', 'to', 'buy'], ['I', 'something', 'to', 'buy'], ['I', 'have', 'to', 'buy'], ['I', 'have', 'something', 'buy'], ['I', 'have', 'something', 'to']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ["I","have","something","to","buy"]

[a[:idx]+a[idx+1:] for idx, v in enumerate(a)]
</code></pre>
<p>Output</p>
<pre><code>[["have","something","to","buy"], ["I","something","to","buy"], ["I","have","to","buy"], ["I","have","something","buy"], ["I","have","something","to"]]
</code></pre>
<p>Try this simple code</p>
</div>
<div class="post-text" itemprop="text">
<p>You are essentially looking for all combinations of 4 elements (without replacements) from list of 5 elements.</p>
<p>Use <code>itertools.combinations</code>:</p>
<pre><code>from itertools import combinations

a = ["I", "have", "something", "to", "buy"]
print(list(combinations(a, 4)))
# [('I', 'have', 'something', 'to'), ('I', 'have', 'something', 'buy'),
#  ('I', 'have', 'to', 'buy'), ('I', 'something', 'to', 'buy'),
#  ('have', 'something', 'to', 'buy')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> like this instead:                        </p>
<pre><code>import itertools
a = ["I","have","something","to","buy"]

res = list(map(list, itertools.combinations(a, 4)))
print(res)             


# [['I', 'have', 'something', 'to'], ['I', 'have', 'something', 'buy'], ['I', 'have', 'to', 'buy'], ['I', 'something', 'to', 'buy'], ['have', 'something', 'to', 'buy']]                           
</code></pre>
<p>Note that <a href="https://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> will generate <code>tuples</code> by default. Which I've converted to <code>list</code> type objects using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>for i in a[:]:
    tmp = a[:]
    a.remove(i)
    print(a)
    a = tmp
</code></pre>
</div>
<span class="comment-copy">Don't add new questions to your answered questions.</span>
<span class="comment-copy">The solution in the linked question creates the output in the opposite order to what you want. Here's how to get the desired order efficiently: <code>store = [list(reversed(t)) for t in combinations(reversed(a), len(a)-1)]</code></span>
<span class="comment-copy">Can I ask another one more simple questions? How can I print something like this print("element_{}".format(*a)). I wanted to get output such as element_I, element_have, element_to, element_buy,element_something. by using one line like this? I do not wish to use for loop to loop the a one by one but to do it directly inside the .format(HERE)</span>
<span class="comment-copy">You can try map function  like    map("element_{}".format, a)   and output will be ['element_I', 'element_have', 'element_something', 'element_to', 'element_buy']</span>
