<div class="post-text" itemprop="text">
<p>I am trying to restore mails using soap messages using office api's but it is giving 'header value appears to contain an embedded header' error for some mails.
eg. </p>
<pre><code>msg = MIMEMultipart()
msg['From'] = 'me@locmsglhost\r\nSubject: injected subject'
msg.as_string()
</code></pre>
<blockquote>
<p>is throwing an error as email.errors.HeaderParseError: header value
  appears to contain an embedded header: 'me@locmsglhost\nSubject: injected subject'</p>
</blockquote>
<p>But if I am changing msg['From'] to </p>
<pre><code>'hello\r man: man'
'tya: Hello'
'push@#$\r\nPus'
'Hello \n\r Pushpa: World'
'@\r\nhello : World'
</code></pre>
<p>then it is working as expected.</p>
<blockquote>
<p>What could be the possible reasons and What sort of vulnerabilities
  would there be in mime message?</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You cannot use any header as you want, that's forbidden.</p>
<p>As stated in <a href="https://docs.python.org/3/library/email.errors.html#email.errors.HeaderParseError" rel="nofollow noreferrer">Documentation</a>,</p>
<blockquote>
<p><em>exception email.errors.HeaderParseError</em></p>
<p>... when an attempt is made to create a header that appears to contain an embedded header (that is, there is what is supposed to be a continuation line that has no leading whitespace and looks like a header).</p>
</blockquote>
<hr/>
<p><strong>Why it is dangerous and should be handled well?</strong></p>
<p>First, you may read <a href="https://www.acunetix.com/blog/articles/email-header-injection/" rel="nofollow noreferrer">this</a>, it provide a simple example how a SMTP header injection attack can be done.</p>
<p>You may ask how can it be done? I mean you are not letting anyone to edit your backend right?</p>
<p>Let's imagine, for you app there may be some field entered by user, for example <code>'message'</code>,</p>
<pre><code>msg['message'] = 'abc' #Entered by user
</code></pre>
<p>That's ok, but what if</p>
<pre><code>msg['message'] = 'abc\r\nreplyTo:attacker@hello.com'
#or
msg['message'] = 'abc\r\nTo:attacker@hello.com'
</code></pre>
<p>Attacker can easily override your email for like sending spam email. That's why it do the check for you.</p>
<hr/>
<p>You may even check if the header safe by</p>
<pre><code>email.header.Header('string')
</code></pre>
<hr/>
<p><strong>Let's take a look how python email library do the checking.</strong></p>
<p>Searching in the source code, <code>Lib/email/header.py</code></p>
<p>In ln50-52:</p>
<pre><code># Find a header embedded in a putative header value.  Used to check for
# header injection attack.
_embedded_header = re.compile(r'\n[^ \t]+:')
</code></pre>
<p>You may try it, all example you provided can pass it except the one you stated.</p>
<p>As email header structure is always <code>\n(key_without_space):</code>, so <code>\nhello :</code> passed but not <code>\nhello:</code>.</p>
</div>
<span class="comment-copy">But it is breaking for cases like  "877-237-1843\nPassword: 4607",            "When: Apr 10, 2014 10:00:00 AM\nWhere: West Palm Beach",          "Anoka Stake Center\n6:30 &amp; 7:30pmCT"     and     "Tuesday, May 1\n8:10-8:40 a.m., Alumni Auditorium".  But it is working for input like this--- 'hello\r man: man' 'tya: Hello' 'push@#$\r\nPus' 'Hello \n\r Pushpa: World' '@\r\nhello : World'.  I don't understand this pattern and what is the rule or regex they are checking it against?</span>
<span class="comment-copy">@KartikThakurela, I updated, see if clear enough.</span>
