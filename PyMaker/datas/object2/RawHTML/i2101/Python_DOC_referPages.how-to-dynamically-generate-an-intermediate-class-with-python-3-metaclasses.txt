<div class="post-text" itemprop="text">
<p>See full gist <a href="https://gist.github.com/rossmacarthur/9b178e9a0b5450c652159ccea4f158ab" rel="nofollow noreferrer">here</a></p>
<p>Consider the case where we have a simple metaclass that generates the <code>__init__</code> method for a class</p>
<pre><code>class TestType(type):

    def __new__(cls, cname, bases, attrs):
        # Dynamically create the __init__ function
        def init(self, message):
            self.message = message

        # Assign the created function as the __init__ method.
        attrs['__init__'] = init

        # Create the class.
        return super().__new__(cls, cname, bases, attrs)


class Test(metaclass=TestType):

    def get_message(self):
        return self.message
</code></pre>
<p>Now this is all good and well to use</p>
<pre><code>test = Test('hello')
assert test.get_message() == 'hello'
</code></pre>
<p>But we have problems when subclassing, because if you want to subclass the <code>__init__</code> method what of course happens is the subclassed method just gets overwritten.</p>
<pre><code>class SubTest(Test):

    def __init__(self, first, second):
        self.first = first
        self.second = second
        super().__init__(first + ' ' second)

subtest = SubTest('hello', 'there')
</code></pre>
<p>This will obviously give the </p>
<pre><code>TypeError: init() takes 2 positional arguments but 3 were given
</code></pre>
<p>The only way I can think to solve this is to create an intermediate class in the <code>__new__</code> method of the metaclass and make this the base for the class we are creating. But I can't get this to work, I tried something like this</p>
<pre><code>class TestType(type):

    def __new__(cls, cname, bases, attrs):
        # Dynamically create the __init__ function
        def init(self, message):
            self.message = message

        # If the __init__ method is being subclassed
        if '__init__' in attrs:
            # Store the subclass __init__
            sub_init = attrs.pop('__init__')

            # Assign the created function as the __init__ method.
            attrs['__init__'] = init

            # Create an intermediate class to become the base.
            interm_base = type(cname + 'Intermediate', bases, attrs)

            # Add the intermediate class as our base.
            bases = (interm_base,)

            # Assign the subclass __init__ as the __init__ method. 
            attrs['__init__'] = sub_init

        else:
            # Assign the created function as the __init__ method.
            attrs['__init__'] = init

        # Create the class.
        return super().__new__(cls, cname, bases, attrs)
</code></pre>
<p>But this gives me recursion error</p>
<pre><code>RecursionError: maximum recursion depth exceeded while calling a Python object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The infinite recursion is caused by the fact that the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a> constructor can return an instance of your metaclass.
In this line here:</p>
<pre><code>interm_base = type(cname + 'Intermediate', bases, attrs)
</code></pre>
<p>If any of the base classes in <code>bases</code> is an instance of <code>TestType</code>, then the subclass will also be an instance of <code>TestType</code>. That is why <code>Test</code> can be created with no problems, but <code>SubTest</code> causes infinite recursion.</p>
<p>The fix is simple: Create the intermediate class <em>without</em> an <code>__init__</code> attribute. That way <code>if '__init__' in attrs:</code> will be <code>False</code>, and the endless recursion is avoided.</p>
<pre><code>class TestType(type):
    def __new__(cls, cname, bases, attrs):
        # Dynamically create the __init__ function
        def init(self, message):
            self.message = message

        # If the __init__ method is being subclassed
        if '__init__' in attrs:
            # Create an intermediate class to become the base.
            interm_base = type(cname + 'Intermediate', bases, {})

            # Add the intermediate class as our base.
            bases = (interm_base,)
        else:
            # Assign the created function as the __init__ method.
            attrs['__init__'] = init

        # Create the class.
        return super().__new__(cls, cname, bases, attrs)
</code></pre>
</div>
<span class="comment-copy">I can't reproduce that RecursionError.</span>
<span class="comment-copy">Hmmm, thats weird, I get it on Python 3.7, Python 3.6, and Python 3.4 (Well python 3.4 is a RuntimeError). I am running macOS.</span>
<span class="comment-copy">See full gist here <a href="https://gist.github.com/rossmacarthur/9b178e9a0b5450c652159ccea4f158ab" rel="nofollow noreferrer">gist.github.com/rossmacarthur/9b178e9a0b5450c652159ccea4f158ab</a></span>
<span class="comment-copy">Oh, I'd accidentally overwritten the broken <code>TestType</code> class with the original <code>TestType</code> definition...</span>
<span class="comment-copy">It's unclear to me what the expected behavior of your metaclass is when 1) the class already has an <code>__init__</code> method and 2) one of the class's parents is already an instance of <code>TestType</code>. Do you want to insert the default <code>init</code> <i>between</i> <code>SubTest.__init__</code> and <code>Test.__init__</code>?</span>
<span class="comment-copy">Thanks! I forgot that the <code>__new__</code> would be called multiple times when we subclass.</span>
