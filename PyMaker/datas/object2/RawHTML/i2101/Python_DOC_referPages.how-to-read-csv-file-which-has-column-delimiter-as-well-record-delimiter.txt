<div class="post-text" itemprop="text">
<p>My CSV file has 3 columns: Name,Age and Sex and sample data is:</p>
<pre>
AlexÇ39ÇM
#Ç#SheebaÇ35ÇF
#Ç#RiyaÇ10ÇF
</pre>
<p>The column delimiter is 'Ç' and record delimiter is '#Ç#'. Note the first record don't  have the record delimiter(#Ç#), but all other records have record delimiter(#Ç#). Could you please tell me how to read this file and store it in a dataframe?</p>
</div>
<div class="post-text" itemprop="text">
<p>Both <code>csv</code> and <code>pandas</code> module support reading csv-files directly. However, since you need to modify the file contents line by line before further processing, I suggest reading the file line by line, modify each line as desired and store the processed data in a list for further handling.</p>
<p>The necessary steps include:</p>
<ul>
<li>open file</li>
<li>read file line by line</li>
<li>remove newline char (which is part of the line when using <code>readlines()</code></li>
<li>replace record delimiter (since a record is equivalent to a line)</li>
<li>split lines at column delimiter</li>
</ul>
<p>Since <code>.split()</code> returns a list of string elements we get an overall list of lists, where each 'sub-list' contains/represents the data of a line/record. Data formatted like this can be read by <code>pandas.DataFrame.from_records()</code> which comes in quite handy at this point:</p>
<pre><code>import pandas as pd

with open('myData.csv') as file:
    # `.strip()` removes newline character from each line
    # `.replace('#;#', '')` removes '#;#' from each line
    # `.split(';')` splits at given string and returns a list with the string elements
    lines = [line.strip().replace('#;#', '').split(';') for line in file.readlines()]

df = pd.DataFrame.from_records(lines, columns=['Name', 'Age', 'Sex'])

print(df)
</code></pre>
<p>Remarks:</p>
<ol>
<li><p>I changed <code>Ç</code> to <code>;</code> which worked better for me due to encoding issues. However, the basic idea of the algorithm is still the same.</p></li>
<li><p>Reading data manually like this can become quite resource-intensive which might be a problem when handling larger files. There might be more elegant ways, which I am not aware of. When getting problems with performance, try to read the file in chunks or have a look for more effective implementations.</p></li>
</ol>
</div>
<span class="comment-copy">That doesn't look like a CSV. The delimiters per row should be consistent. Even if <code>AlexÇ39ÇM</code> was the header, it should use the same delimiter</span>
<span class="comment-copy">@sietse85, thanks for the input. i am new to python, could please give me the sample code for your suggestion?.</span>
<span class="comment-copy">hmm somehow i got to your question with php tag... but ok :)</span>
<span class="comment-copy">@sietse85: AFAIK <code>fgetcsv</code> is a PHP-function, not a Python one. However, reading csv-files with consistent delimiters can be read using the Python built-in <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module or <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>pandas</code></a> as an external module with additional features.</span>
<span class="comment-copy">@Alexsander: What <i>is</i> a record? Are there more than one record per line/row?</span>
<span class="comment-copy">thank you so much. it works. :)</span>
