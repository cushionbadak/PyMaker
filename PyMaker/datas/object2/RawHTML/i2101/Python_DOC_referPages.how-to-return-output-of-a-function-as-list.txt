<div class="post-text" itemprop="text">
<pre><code>def fetch_name(resume_text):
  tokenized_sentences = nltk.sent_tokenize(resume_text)
  for sentence in tokenized_sentences:
    for chunk in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(sentence), tagset='universal')):
      if hasattr(chunk, 'label'):# and chunk.label() == 'PERSON':
        chunk = chunk[0]
      (name, tag) = chunk
      if tag == 'NOUN':
          #print(name)
          #z.extend(name)
          return name             

path = '/home/python/resumes/*.txt'
files = glob.glob(path)
for n in files:
    with io.open(n,'r') as f:
        data=f.read()
        print(fetch_name(data))
</code></pre>
<p>Following is the output that i obtain from the code that follows. I need the output in a form of list ['Sharayu','neeraj'.....]</p>
<pre><code>SHARAYU
Neeraj
Gregory
MEhul
Shashank
Sandeep
Atul
ADITYA
Manoj
SAGAR
Shreya
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a <code>list()</code> would do that as below:</p>
<pre><code>namelist=list()    
for n in files:
    with io.open(n,'r') as f:
        data=f.read()
        namelist.append(fetch_name(data))
print(namelist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do it like this:</p>
<pre><code>path = '/home/python/resumes/*.txt'
files = glob.glob(path)
data_list = []
for n in files:
    with io.open(n,'r') as f:
        data=f.read()
        data_list.append(fetch_name(data))
    print(data_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want your function to return a list instead, you can initialize a list and append the names to the list:</p>
<pre><code>def fetch_name(resume_text):
    names = []
    tokenized_sentences = nltk.sent_tokenize(resume_text)
    for sentence in tokenized_sentences:
        for chunk in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(sentence), tagset='universal')):
            if hasattr(chunk, 'label'):  # and chunk.label() == 'PERSON':
                chunk = chunk[0]
            (name, tag) = chunk
            if tag == 'NOUN':
                # print(name)
                # z.extend(name)
                names.append(name)
    return names
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">append method</a> to add an entry to a list.</p>
<pre><code>resumes = []
for path in glob.glob('/home/python/resumes/*.txt'):
    with open(path, 'r', encoding='utf-8') as f:
        resumes.append(fetch_name(f.read()))
print(resumes)
</code></pre>
</div>
<span class="comment-copy">Instead of printing, append it into a list.</span>
<span class="comment-copy">it returns me a list like this [u'SHARAYU', u'Neeraj', u'Gregory', u'MEhul', u'Shashank', u'Sandeep', u'Atul', u'ADITYA', u'Manoj', u'SAGAR', u'Shreya'] i want the list as ['SHARAYU', 'Neeraj'.....]</span>
<span class="comment-copy">Ah, you're using Python 2. I'd recommend switching to Python 3 - then the <code>u</code> prefix will go away, as Python 3 uses Unicode by default.</span>
<span class="comment-copy">can you suggest something that can work with python 2</span>
<span class="comment-copy">If you use Python 2, then using the Unicode strings like <code>[u'SHARAYU', u'Neeraj', ...]</code> is better practice than using byte strings like <code>['SHARAYU', 'Neeraj', ...]</code>. If you have any non-Ascii characters in any of your files, then using Unicode strings will make things easier.</span>
