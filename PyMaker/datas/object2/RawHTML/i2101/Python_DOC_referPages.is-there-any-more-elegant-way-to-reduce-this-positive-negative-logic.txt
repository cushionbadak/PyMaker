<div class="post-text" itemprop="text">
<p>Is there any more elegant way to reduce the code below, which should reverse a direction from left to right and vice versa, based on the size of a line?</p>
<pre><code>if right_length &gt; left_length:
    direction = -1
elif right_length &lt; left_length:
    direction = 1
else:
    direction = 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe something like:</p>
<pre><code>def direction(right_length, left_length):
    diff = left_length - right_length
    return int(abs(diff) / diff) if diff else 0

print(direction(5, 10)) # 1
print(direction(10, 5)) # -1
print(direction(1, 1)) # 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can reduce 3 branching statements to 2 if you use the <a href="https://docs.python.org/3/library/math.html#math.copysign" rel="nofollow noreferrer"><code>math.copysign</code></a> function:</p>
<pre><code>import math
direction = 0 if left == right else math.copysign(1, left - right)
</code></pre>
<p><code>copysign</code> will copy the sign of <code>left - right</code> and apply it to the left operand (in this case, 1).</p>
<p>If <code>left</code> and <code>right</code> are floats, use <code>math.isclose</code> to check for closeness accounting for floating inaccuracies.</p>
<pre><code>direction = 0 if math.isclose(left, right) else math.copysign(1, left - right)
</code></pre>
<hr/>
<p>If you have numpy, you can handle the special case of <code>left == right</code> with the function itself using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.sign.html" rel="nofollow noreferrer"><code>np.sign</code></a>:</p>
<pre><code>import numpy as np
direction = np.sign(left - right)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A compact and elegant function definition, if you need to reuse the code, could be this: </p>
<pre><code>f = lambda x,y: 1 if x&lt;y else -1 if x&gt;y else 0

direction = f(right_length, left_length)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use print with two conditional expressions   </p>
<pre><code>print(1 if r_len &gt; l_len else -1 if l_len &gt; r_len else 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need the <code>cmp</code> (compare) function from the <code>math</code> package.  In other languages, a similar function is called <code>sign</code>.  The Python community didn't have a clear consensus on edge cases, and has so far left <code>sign</code> out of the language.</p>
<pre><code>direction = cmp(left_length, right_length)
</code></pre>
<p>I think this got deprecated in Python 3.  In that case, use <code>numpy.sign</code></p>
<p>For Python 3 <em>without</em> <code>numpy</code>, you could do</p>
<pre><code>diff = left_length - right_length
print (math.copysign(1, diff) if diff else 0)
</code></pre>
</div>
<span class="comment-copy">Python 2: <a href="https://docs.python.org/2/library/functions.html#cmp" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#cmp</a> ?</span>
<span class="comment-copy">@G_M, sorry, I corrected the question, it's for Python 3.</span>
<span class="comment-copy">Maybe <code>numpy.sign</code> is an option (using <code>left_length - right_length</code>).</span>
<span class="comment-copy">I consider this the most elegant since it does not depend on other libraries and in the same way it leaves the logic separate from the main code, resulting in a simpler and more intuitive code. Thank you!</span>
<span class="comment-copy">You don't need to explicitly  check for <code>== 0</code> here, just use <code>return 0 if not diff else int(abs(diff) / diff)</code> or <code>return int(abs(diff) / diff) if diff else 0</code> both of which are shorter yet still very readable.</span>
<span class="comment-copy">@martineau Good point. Thank you.</span>
<span class="comment-copy">Thank you! And Welcome!</span>
<span class="comment-copy">@Rog√©rioDec Thank you for your welcome!</span>
<span class="comment-copy">This answer does not contain a generator function. It's just using two conditional expressions.</span>
<span class="comment-copy">@user2357112 sorry mis-phrased that</span>
<span class="comment-copy"><code>AttributeError: module 'math' has no attribute 'cmp'</code>?</span>
<span class="comment-copy">@coldspeed: Thanks ... I left some garbage in my sandbox.</span>
<span class="comment-copy">"sorry, I corrected the question, it's for Python 3."</span>
