<div class="post-text" itemprop="text">
<p>I have an <code>input file1</code> of two columns(tab-separted):</p>
<pre><code>c1\tc2
aaa\t232 65 19 32
bbew\t32 22 20
jhsi\t986 1 32 463 221
</code></pre>
<p>And <code>input file2</code> which have one column:</p>
<pre><code>c1
19
1
32
277
</code></pre>
<p>what I want is to search an element from <code>file2</code> in <code>file1</code>, and return the corresponding value in <code>c1</code>. If there is more than one matched value, then return all together in one column.</p>
<p>Here is what should the output file be like:</p>
<pre><code>19       aaa
1        jhsi
32       aaa bbew jhsi
277      
</code></pre>
<p><code>277</code> would be left empty because it does not exist.</p>
<p>Any suggestion will be helpful. </p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't easily vectorisable. For performance, I suggest you perform your transformation before you put data in a Pandas dataframe. Here is a solution using <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code># use set for O(1) lookup
scope_set = set(df2['c1'])

# initialise defualtdict of lists
dd = defaultdict(list)

# iterate and create dictionary mapping numbers to keys
for row in df1.itertuples(index=False):
    for num in map(int, row.c2.split()):
        if num in scope_set:
            dd[num].append(row.c1)

# construct dataframe from defaultdict
df = pd.DataFrame({'num': list(dd), 'keys': list(map(' '.join, dd.values()))})

# reindex to include blanks
df = df.set_index('num').reindex(sorted(scope_set)).reset_index()
</code></pre>
<p><strong>Result</strong></p>
<pre><code>print(df)

   num           keys
0    1           jhsi
1   19            aaa
2   32  aaa bbew jhsi
3  277            NaN
</code></pre>
<p><strong>Setup</strong></p>
<pre><code>from io import StringIO
from collections import defaultdict

file1 = StringIO("""c1\tc2
aaa\t232 65 19 32
bbew\t32 22 20
jhsi\t986 1 32 463 221""")

file2 = StringIO("""c1
19
1
32
277""")

df1 = pd.read_csv(file1, sep='\t')
df2 = pd.read_csv(file2)
</code></pre>
</div>
