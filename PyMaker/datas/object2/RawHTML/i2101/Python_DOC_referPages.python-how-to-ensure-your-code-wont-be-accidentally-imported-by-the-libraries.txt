<div class="post-text" itemprop="text">
<p>A few hours ago I was careless enough to name my short script as <code>code.py</code>. Apparently, there is <a href="https://docs.python.org/3/library/code.html" rel="noreferrer">such a package</a> which is used e.g. by <code>ptvsd</code> or <code>pdb</code>. This led to my <code>code.py</code> to be imported instead and caused a bunch of nested unhandled exceptions with missing imports upon trying to debug my code. What was making it more frustrating is that traceback didn't show any sign of importing my <code>code.py</code> file, so I spent quite a while to find the source of the problem.</p>
<p>I'd like to avoid such situations in the future, so my question is: what's the best practice to ensure that the modules you use aren't importing your code by mistake due to such a name collision?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a common gotcha, and actually there's no failsafe way to avoid it. At least you can make sure your modules all live in packages (at least one package if that's a small project with no reusable code) so that you'd use them as <code>from mypackage import code</code> instead of <code>import code</code> (also make sure you use either absolute imports etc), and that you always run your code from the directory containing the package(s), not from within the package directory itself (python inserts the current working directory in first position of <code>sys.path</code>).</p>
<p>This won't prevent ALL possible name masking issues but it should minimize them. Now from experience, once you've experienced this kind of issues at least once, you usually spot the symptoms very quickly - the most common and quite obvious being that some totally unrelated stlib or third-part module starts crashing with ImportErrors or AttributeErrors (with "module X has no attribute Y" messages). At this point, if you just added a new module to your own code, chances are it's the new module that breaks everything, so you can just rename it (make sure you clean up .pyo/.pyc files if any) and see if it solves the issue. Else check the traceback to find out which imports fails, most of the time you'll find you have a module or package by the same name in your current working directory.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't avoid completely, that somebody is able to import your module by mistake. </p>
<p>You can structure your code better in subpackages going from "well known" to "less known" names. E.g. if you are developing code for a certain company then you might want to structure like:</p>
<p><code>company.country.location.department.function</code></p>
<p>If your code is then getting more accepted and used by others, you can bring the code in the upper namespace, so that it is made available in <code>company.country.location.department.function</code>
 and <code>company.country.location.department</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can modify <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer"><code>sys.path</code></a> at the beginning of your main module, before you start importing other modules:</p>
<pre><code>import sys
sys.path.append(sys.path.pop(0))
</code></pre>
<p>so that the main module's starting directory is placed at the last of the module search paths rather than at the front, in order for other modules of the same name to take precedence.</p>
<h1>EDIT: To all the downvoters, this answer actually works.</h1>
<p>For example, running <code>code.py</code> with the following content:</p>
<pre><code>import pdb
pdb.run('print("Hello world")')
</code></pre>
<p>would raise:</p>
<pre><code>AttributeError: module 'pdb' has no attribute 'run'
</code></pre>
<p>because <code>code.py</code> has no <code>run</code> defined, while running <code>code.py</code> with the following content instead:</p>
<pre><code>import sys
sys.path.append(sys.path.pop(0))
import pdb
pdb.run('print("Hello world")')
</code></pre>
<p>would execute <code>pdb.run</code> properly:</p>
<pre><code>&gt; &lt;string&gt;(1)&lt;module&gt;()
(Pdb)
</code></pre>
</div>
<span class="comment-copy">Such deeply nested namespaces belongs to Java and are totally unpythonic (Zen of Python #4 : "Flat is better than nested").</span>
<span class="comment-copy">The answer only gives you an idea how you can avoid this. If you nested too deep than reduce it two one or two levels. You already gave yourself a good example why "flat" is not always the best choice.</span>
<span class="comment-copy">I'm not saying one shouldn't use proper packaging (quite on the contrary), but 1/that you shouldn't make them uselessly deep and 2/ that you shouldn't name them from totally unrelated stuff like company name, country etc (ie the canonical java namespace thingie) but from what they are doing.  Can you spot the difference ?</span>
<span class="comment-copy">I agree with you on 1) but disagree on 2). The naming of your packages depend on the use case they are written for. It's not uncommon, that a requirement for a SW piece that your company shall provide has to be easy identifiable in a larger SW environment.... All I'm saying is, that the naming depends on the context.</span>
<span class="comment-copy">Messing with <code>sys.path</code> is almost always a wrong solution.</span>
<span class="comment-copy">@the question is not whether it "works" or not for a toy example but whether it <b>reliably</b> works without breaking anything else in a real life context, and from experience (not only mine) it most often do more harm than good - specially if everyone starts adding this unconditionnaly at the beginning of each module. wrt/ the doc reference : as I said,  this is <b>almost</b> always the wrong solution - there are of course legitimate use cases, but you have to fully understand what you're doing and what you can break with this, which is seldom the case for newbies / average developpers.</span>
<span class="comment-copy">Ok, so let's add this at the beginning of <b>each</b> of our <b>modules</b> and check how it works... Yes, I know you wrote "at the beginning of your script" but quite a lot of people here won't understand the difference.</span>
<span class="comment-copy">I'm afraid you didn't get the point...</span>
<span class="comment-copy">also, this wouldn't have fixed my problem as my IDE (vscode) runs ptvsd from outside, i.e. before my script is executed</span>
