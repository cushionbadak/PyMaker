<div class="post-text" itemprop="text">
<p>I'm using python 3.7.
I have a dictionary something like this.</p>
<pre><code>dict = { 'a' :2 , 'a' :1 , 'b':3 , 'c':4}
print(dict) 
O/P ={'a' : 1 , 'b' :2 , 'c':3 }
</code></pre>
<p>Now In python 3.7 dictionary must maintain insertion order .So expected o/p will be {'a':2 , 'b':3 , 'c' :4} , but ('a',2) is being removed from dictionary instead of('a',1) .Why is this happening ??Is there any rule for removing duplicate keys in python ??</p>
</div>
<div class="post-text" itemprop="text">
<p>From the Python documentation:</p>
<blockquote>
<p>The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.</p>
</blockquote>
<p>See: <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Maintaining insertion order is concerned with <em>different</em> keys:</p>
<pre><code>&gt;&gt;&gt; dct = {'a': 1, 'b': 2}  # do NOT shadow built-in name 'dict'
&gt;&gt;&gt; print(dct)
{'a': 1, 'b': 2}
# and not
{'b': 2, 'a': 1}  # which was totally possible before Python3.6
</code></pre>
<p>When receiving multiple values for the <em>same</em> key, the last one provided wins:</p>
<pre><code>&gt;&gt;&gt; dct = {'a': 3, 'a': 1, 'b': 2}
&gt;&gt;&gt; print(dct)
{'a': 1, 'b': 2}
</code></pre>
<p>This is similar to the following scenario:</p>
<pre><code>&gt;&gt;&gt; dct = {}
&gt;&gt;&gt; dct['a'] = 3
&gt;&gt;&gt; dct['a'] = 1
&gt;&gt;&gt; dct['b'] = 2
</code></pre>
<p>Would you expect <code>dct['a']</code> to be <code>3</code> now because of the "insertion order"? Certainly not!</p>
</div>
<div class="post-text" itemprop="text">
<p>The value assigned to a key can be anything and even duplicated since it merely a value. Keys however, are similar to a variable name. Like in many programming languages, if a variable name is used again in the same scope or method, the first variable and its value is overwritten by the second since it is more recent.</p>
<p>In this case it may be more appropriate to to assign a different key (think of keys as identifiers) to the same value if that is your wish. Like this</p>
<pre><code>dict = { 2: 'a', 1: 'a', 3:'b', 4:'c'} 
print(dict)
O/P = {1: 'a', 2: 'a', 3: 'b', 4: 'c'}  
</code></pre>
</div>
<span class="comment-copy">Ty sir , I wasn't knowing old value gets deleted .</span>
<span class="comment-copy">Since dict is the name of a python builtin class, you should'nt use it as the name of a variable.</span>
