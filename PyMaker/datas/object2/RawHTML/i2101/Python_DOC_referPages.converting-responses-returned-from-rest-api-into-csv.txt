<div class="post-text" itemprop="text">
<p>I am trying to write response returned from REST API into a csv file. As there are multiple requests, I am calling API on the requests one by one. So, there would be multiple responses. I am not able to achieve desired format.</p>
<p><strong><em>Desired format :</em></strong></p>
<pre><code>name,job,id,createdAt
morpheus,leader,727,2018-10-12T12:04:39.234Z
Mark,SSE,925,2018-10-12T12:04:40.200Z
Taylor,SE,247,2018-10-12T12:04:41.115Z
</code></pre>
<p><strong><em>Code :</em></strong> </p>
<pre><code>import requests

url ='https://reqres.in/api/users'
data =[{
    "name": "morpheus",
    "job": "leader"
},
    {"name":"Mark",
    "job":"SSE"},

    {"name":"Taylor",
    "job":"SE"}
]

with open('response.csv','w') as f:
    for element in data:
        r=requests.post(url,json=element)
        response = json.loads(r.text)
        for key in response.keys():
            #f.write("%s,%s"%(key,response[key]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python brings builtin support for csv reading and writing that allows you to define dialects with different separators and escaping logic.</p>
<p>Cell values containing the separator or newline or your escape chars need to be escaped or the resulting csv is broken - the csv module does that for you. You can choose between different formats (excel can be picky when loading csv), or define your own.</p>
<p><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html#csv.writer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the data you are getting from the server has the exact keys you're looking for, something like this should work:</p>
<pre><code>data = [] # Your data here.
url = 'https://reqres.in/api/users'

desired_columns = ['name', 'job', 'id', 'createdAt']
with open('response.csv', 'w') as f:

    # First we need to write the column names to the file
    f.write(','.join(desired_columns) + '\n')

    for element in data:
        r = requests.post(url, json=element)

        response = json.loads(r.text)

        # Here, I will assume response has 'name', 'job', 'id' and 'createdAt'
        # as keys to the dictionary. We will save them to the list 'data_to_write'
        # And then write that out the same way we did above.
        data_to_write = []
        for column in desired_columns:
            data_to_write.append(response[column])

        f.write(','.join(data_to_write) + '\n')
</code></pre>
</div>
<span class="comment-copy">You're writing csv: First write out the headings for the response, once, then write out the data without headings.</span>
<span class="comment-copy">If you're okay importing external packages, pandas has a nice <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_records.html" rel="nofollow noreferrer">from_records</a> constructor which will create a table from json records, then a nice <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html" rel="nofollow noreferrer">to_csv</a> method to write out a csv file. If your json data is strictly formatted every time this will require two lines of code to write.</span>
<span class="comment-copy">Thanks for the response. I have added +"\n" to split lines in header and records.</span>
<span class="comment-copy">Oops, you are correct. I edited the solution</span>
<span class="comment-copy">what about escaping if the values contain your chosen separator? this will break your csv. use the builtin python csv writer.</span>
