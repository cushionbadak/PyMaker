<div class="post-text" itemprop="text">
<p>I'm using a TimedRotatingFileHandler from logging to log to a new file each night. According to the <a href="https://docs.python.org/2/library/logging.handlers.html#timedrotatingfilehandler" rel="nofollow noreferrer">logging docs</a>: </p>
<blockquote>
<p>The system will save old log files by appending extensions to the
  filename.</p>
</blockquote>
<p>And it is when this happens that I get a Permission Error:</p>
<blockquote>
<p>--- Logging error ---</p>
<p>PermissionError: [WinError 32] The process cannot access the file
  because it is being used by another process:
  'C:\Users\lh\PythonIntegration\Connect\Logs\WS_API_integration_client'
  -&gt; 'C:\Users\lh\PythonIntegration\Connect\Logs\WS_API_integration_client.2018-10-08_13-00'</p>
</blockquote>
<p>I'm guessing that this has to do with the fact that I have a loop where I run asynchronous processes. But even when I tested it with only one logging event I get the permission error. Which means it's trying to change the extension of the same file it's writing to - hence the permission error. How do I tell logger to close the file so that it can add the extension to the filename?</p>
<p>This is my client.py</p>
<pre><code>rotating_logger = logging.getLogger('ClientLogger')
rotating_logger.setLevel(logging.DEBUG)
handler = logging.handlers.TimedRotatingFileHandler(
              log_file, when = 'midnight',backupCount=30)              
formatter = logging.Formatter(fmt='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
handler.setFormatter(formatter)
rotating_logger.addHandler(handler)

async def keep_alive(websocket):
    """
    Sends keep-alive message to the server. 
    """
    while websocket.open:            
        await websocket.send('hello')   
        await asyncio.sleep(60*1)

async def open_connection():
    loop = asyncio.get_event_loop()
    with concurrent.futures.ProcessPoolExecutor() as pool:
        async with websockets.connect( 
                'wss://{}:{}@host.net/api/ws'.format(user,pswd), 
                ssl=True, 
                max_queue = 1000) as websocket:
            """
            Keep connection alive.
            """            
            asyncio.ensure_future(keep_alive(websocket))

            """
            Handle messages from server
            """ 
            while True:  
                """
                Handle message from server.
                """
                message = await websocket.recv()
                if message.isdigit():
                    rotating_logger.info ('Keep alive message: {}'.format(str(message)))

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(open_connection())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think it has anything to do with <code>asyncio</code>. You've started multiple processes to handle your workload. Under Windows, a file can't be renamed when it is opened by another process. In general, and even under POSIX, writing to the same file from multiple processes isn't guaranteed to work as expected because the processes have no mechanism to serialise access to the file. So the answer is to have a separate worker process that writes to the file, with others communicating events to it via socket or <code>multiprocessing</code> Queue. See the <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">logging cookbook</a> for more information.</p>
</div>
<span class="comment-copy">2 question, 1. What is your <code>ProcessPoolExecutor</code> for? 2. I can't see where you change the logger file name, have you close and detach the handler before saving it?</span>
<span class="comment-copy">#1. ProcessPoolExecutor is used to perform multiple process asynchronously. In this case the two processes are (1) managing the data frames I'm getting from the websocket and (2)sending a keep alive message. #2. The logger file name never changes but under the hood TimedRotatingFileHandler() adds an extension (at midnight) that looks like a date (of the previous date). So today's file always looks like logfile.log while yesterday's looks like logfile.2018-10-10</span>
