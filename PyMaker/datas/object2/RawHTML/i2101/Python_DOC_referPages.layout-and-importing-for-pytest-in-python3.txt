<div class="post-text" itemprop="text">
<p>I'm having trouble importing modules from my pytest functions. I know there's a million questions on this, but I've read through a bunch, and I'm still having trouble understanding.</p>
<pre><code>$ tree
.
└── code
    ├── eight_puzzle.py
    ├── missionaries_and_cannibals.py
    ├── node.py
    ├── search.py
    └── test
        ├── test_eight_puzzle.py
        └── test_search.py

2 directories, 6 files
$
$ grep import code/test/test_search.py
import sys
import pytest
import code.search
$
$ pytest
...
ImportError while importing test module '~/Documents/code/test/test_search.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
code/test/test_search.py:14: in &lt;module&gt;
    import code.search
E   ModuleNotFoundError: No module named 'code.search'; 'code' is not a package
...
</code></pre>
<p>I expected that to work. 'code' is a package, right? A package in Python 3 is any directory with .py files in it. </p>
<p>I've also tried it with a relative import - <code>from .. import search</code> - and I get the following.</p>
<pre><code>ImportError while importing test module '~/Documents/code/test/test_search.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
code/test/test_search.py:14: in &lt;module&gt;
    from .. import search
E   ImportError: attempted relative import with no known parent package
</code></pre>
<p>I've also tried modifying sys.path as shown <a href="https://stackoverflow.com/a/41177081/4278309">here</a>, specifying my PYTHONPATH, and adding <strong>init</strong>.py files in code and test.</p>
<p>Can I get this import to work without using something like setuptools? This is just for experimenting, so I'd rather not deal with the overhead.</p>
<p>It may also be important to note that I'm using conda, because it seems to work when I'm using the python 2 pip-installed version of pytest with <strong>init</strong>.py files. </p>
</div>
<div class="post-text" itemprop="text">
<p>Some notes about directories without <code>__init__.py</code> files first:</p>
<h3>Implicit namespace packages</h3>
<p>Although a directory without an <code>__init__.py</code> is a valid import source in Python 3, it is not a regular package, rather being an implicit namespace package (see <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP 420</a> for the details). Among other properties, implicit namespace packages are second-class citizens when it comes to importing, meaning that when Python has two packages with the same name in <code>sys.path</code>, one being a regular package and another being an implicit namespace package, the regular one will be preferred regardless what package comes first. Check it yourself:</p>
<pre><code>$ mkdir -p implicit_namespace/mypkg
$ echo -e "def spam():\n    print('spam from implicit namespace package')" &gt; implicit_namespace/mypkg/mymod.py
$ mkdir -p regular/mypkg
$ touch regular/mypkg/__init__.py
$ echo -e "def spam():\n    print('spam from regular package')" &gt; regular/mypkg/mymod.py
$ PYTHONPATH=implicit_namespace:regular python3 -c "from mypkg.mymod import spam; spam()"
</code></pre>
<p>This will print <code>spam from regular package</code>: although <code>implicit_namespace</code> comes first in <code>sys.path</code>, <code>mypkg.mymod</code> from <code>regular</code> is imported instead because <code>regular/mypkg</code> is a regular package.</p>
<hr/>
<p>Now you know that since your package <code>code</code> is an implicit namespace package, Python will prefer regular imports of <code>code</code> to yours if it encounters one. Unfortunately for you, <a href="https://docs.python.org/3/library/code.html" rel="nofollow noreferrer">there is a module <code>code</code> in the stdlib</a>, so it's practically a "reverse name shadowing" problem: you have an import object with the same name as the one from stdlib, but instead of shadowing the stdlib import, it shadows yours.</p>
<p>You thus need to do two things in order to make your layout usable:</p>
<ol>
<li>give the <code>code</code> dir a unique name (let it be <code>mycode</code> for this answer's example)</li>
<li>after that, you still need to fix the <code>sys.path</code> when running the tests from the project root dir because it's not in <code>sys.path</code> per se. You have some possibilities:

<ul>
<li>add an empty <code>conftest.py</code> file to the root dir (aside the <code>mycode</code> dir). This will instruct <code>pytest</code> to add the root dir to <code>sys.path</code> (see <a href="https://stackoverflow.com/questions/10253826/path-issue-with-pytest-importerror-no-module-named-yadayadayada/50610630#50610630">here</a> for an explanation). You can now just run <code>pytest</code> as usual and the imports will be resolved;</li>
<li>run the tests via <code>python -m pytest</code> - invoking interpreter directly adds the current dir to <code>sys.path</code>;</li>
<li>add the current dir to <code>sys.path</code> via <code>PYTHONPATH</code> env var, e.g. run <code>PYTHONPATH=. pytest</code>.</li>
</ul></li>
</ol>
</div>
<span class="comment-copy">Is the <code>code</code> directory missing an <code>__init__py</code> file to make it a package ?</span>
<span class="comment-copy">This is great! Thank you. I really like the conftest.py trick, I learned something about implicit namespace packages, and I had no idea that there was a code module in the standard library.</span>
<span class="comment-copy">Glad I could help!</span>
