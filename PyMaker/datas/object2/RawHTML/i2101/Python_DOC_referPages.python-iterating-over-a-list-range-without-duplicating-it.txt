<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8671280/pythonic-way-to-iterate-over-part-of-a-list">pythonic way to iterate over part of a list</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>Suppose that I have the list <code>list_1</code> and that I want to iterate over its elements from indices <code>i</code> to <code>(j - 1)</code>, where <code>j &gt; i</code>.</p>
<p>My options, as I know them are:</p>
<p><strong>Option 1: Constructing a whole new list</strong></p>
<pre><code>for element in list_1[i:j]:
    # do something
</code></pre>
<p><strong>Option 2: Iterating over the indices themselves</strong></p>
<pre><code>for index in range(i, j):
    element = list_1[index]
    # do something
</code></pre>
<p>Both options are not desirable. The first option is not desirable because it involves construction of a new list. The second option is not desirable especially in terms of readability, as its iteration is over the indices, rather than over the list elements.</p>
<p>Is there a built-in generator function that iterates over the elements in a given range? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code></a> to iterate over a subset of values, by index:</p>
<pre><code>from itertools import islice

for element in islice(list_1, i, j):
</code></pre>
<p>This will still iterate over all <code>i - 1</code> initial values of <code>list_1</code>, but will do so in C and not keep skipped values in memory.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; list_1 = [42, 81, 117, 3103, 17, 22]
&gt;&gt;&gt; for elem in islice(list_1, 2, 5):
...     print(elem)
...
117
3103
17
</code></pre>
</div>
<span class="comment-copy">Sadly ironic that this is a duplicate</span>
<span class="comment-copy">Thanks you. This looks just liked what I hoped to have.</span>
<span class="comment-copy">This <code>itertools</code> module seems to be something a Python programmer must learn and master. It is a shame that I don't regularly use it. Is there a usage convention? Is it more common to use <code>from itertools import &lt;func&gt;</code> rather than <code>import itertools as it</code> and then use <code>it.&lt;func&gt;()</code> ?</span>
<span class="comment-copy">@SomethingSomething: I use it like any other standard library module, I don't usually abbreviate module names. That practice is more usually found with datascience packages as they use these interactively in Jupyther notebooks and shorter names matter more.</span>
