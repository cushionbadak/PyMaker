<div class="post-text" itemprop="text">
<p>I am using <code>logging</code> to log info and errors. And I wrote a helper function to wrap the log function. However, because the logging is performed inside this helper function, all the logging attributes become ones of this stack. But the meaningful attributes to log are upper stack's, i.e. caller's stack attribute. How do I fix this?  </p>
<p><strong>Example Code:</strong></p>
<pre><code># foo.py

import logging 
import log_util

def main():
    formatter = logging.Formatter(fmt = '%(module)s::%(funcName)s - %(message)s')
    s_handler = logging.StreamHandler()
    s_handler.setFormatter(formatter)
    logger = logging.getLogger("main")
    logger.setLevel(logging.DEBUG)
    logger.addHandler(s_handler)

    log_util.helper_log(logger, 'TEST info')

if __name__ == '__main__':
   main()  
</code></pre>
<hr/>
<pre><code># log_util.py

def helper_log(lg, msg):
    # do something
    msg2 = # result of a serial statements
    lg.info(msg2)
</code></pre>
<p>Actual Output:</p>
<pre><code>log_util.py::helper_log - TEST info
</code></pre>
<p>Expected Output:</p>
<pre><code>foo.py::main - TEST info
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't attempt to do this task with a helper function.  Loggers should not be passed around as arguments, instead each module should create and use a module-level (global) logger instance.</p>
<p>Instead, achieve what you want with a <code>logging.Filter</code>.  See the section in the docs linked below: </p>
<p><a href="https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual" rel="nofollow noreferrer">Using Filters to impart contextual information</a></p>
</div>
<span class="comment-copy">You don't show how <code>lg</code> is created. The typical way to create a logger is per module by using <code>logger = logging.getLogger(__name__)</code>. This will ensure the logger name is the recent module and allow the configuration in a tree-like package/module structure.</span>
<span class="comment-copy">@KlausD. Sorry, I have inserted the <code>logging.getLogger("main")</code>. The logger name is not the issue. What matters is the <code>modulename</code> and <code>functionname</code>.</span>
<span class="comment-copy">If you would use <code>__name__</code> instead of <code>"main"</code>, then the logger name would be the module name. Also use a function to configure your logging system, not for the logging itself.</span>
