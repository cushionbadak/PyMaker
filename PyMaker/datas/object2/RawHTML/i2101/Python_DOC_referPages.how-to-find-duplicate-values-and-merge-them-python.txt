<div class="post-text" itemprop="text">
<p>So basically for example of you have a list like:</p>
<pre><code>l = ['a','b','a','b','c','c']
</code></pre>
<p>The output should be:</p>
<pre><code>[['a','a'],['b','b'],['c','c']]
</code></pre>
<p>So basically put together the values that are duplicated into a list, </p>
<p>I tried:</p>
<pre><code>l = ['a','b','a','b','c','c']
it=iter(sorted(l))
next(it)
new_l=[]
for i in sorted(l):
   new_l.append([])
   if next(it,None)==i:
      new_l[-1].append(i)
   else:
      new_l.append([])
</code></pre>
<p>But doesn't work, and if it does work it is not gonna be efficient</p>
</div>
<div class="post-text" itemprop="text">
<p>Sort the list then use <code>itertools.groupby</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; l = ['a','b','a','b','c','c']
&gt;&gt;&gt; [list(g) for _, g in groupby(sorted(l))]
[['a', 'a'], ['b', 'b'], ['c', 'c']]
</code></pre>
<p>EDIT: this is probably not the fastest approach, sorting is O(n log n) time complexity for the average case and not required for all solutions (see the comments)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3.1/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

l = ['a','b','a','b','c','c']
c = Counter(l)

print([[x] * y for x, y in c.items()])
# [['a', 'a'], ['b', 'b'], ['c', 'c']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.Counter</code>:</p>
<pre><code>from collections import Counter
[[k] * c for k, c in Counter(l).items()]
</code></pre>
<p>This returns:</p>
<pre><code>[['a', 'a'], ['b', 'b'], ['c', 'c']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably not the most efficient, but this is understandable:</p>
<pre><code>l = ['a','b','a','b','c','c']
dict = {}
for i in l:
    if dict[i]:
        dict[i] += 1
    else:
         dict[i] = 1

new = []
for key in list(dict.keys()):
    new.append([key] * dict[key])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to use <code>zip</code> method.</p>
<pre><code>l = ['a','b','a','b','c','c','b','c', 'a']
l = sorted(l)
grouped = [list(item) for item in list(zip(*[iter(l)] * l.count(l[0])))]
</code></pre>
<p>Output</p>
<pre><code>[['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'c']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow noreferrer">functional</a> solution via <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. As it requires sorting, this will have time complexity O(<em>n</em> log <em>n</em>).</p>
<pre><code>from itertools import groupby
from operator import itemgetter

L = ['a','b','a','b','c','c']

res = list(map(list, map(itemgetter(1), groupby(sorted(L)))))

[['a', 'a'], ['b', 'b'], ['c', 'c']]
</code></pre>
<p>The syntax is cumbersome since Python does not offer native function composition. This is supported by 3rd party library <a href="https://toolz.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>toolz</code></a>:</p>
<pre><code>from toolz import compose

foo = compose(list, itemgetter(1))
res = list(map(foo, groupby(sorted(L))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = ['a','b','a','b','c','c']

want = []
for i in set(l):
    want.append(list(filter(lambda x: x == i, l)))
print(want)    
</code></pre>
</div>
<span class="comment-copy">This requires an average time complexity of O(n log n), however.</span>
<span class="comment-copy">@blhsing Yes, I know, I'm not actually sure this is the best solution it was just my first thought (one needs to be quick on SO), I will defer judgement to a <code>timeit</code> benchmark</span>
<span class="comment-copy">@Chris_Rands It's known that Python's <code>sorted</code> function has an average time complexity of O(n log n).</span>
<span class="comment-copy">@blhsing yes you just said that, I agree :)</span>
<span class="comment-copy">@U9-Forward Thanks but I'm not convinced this is the best way, Austin or Blhsing's solutions might be faster, and will retain the order if the <code>OrderedCounter</code> recipe is added</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">This is the best solution. Easy to read and does not require sorting (if you use a Python version where dicts remember insertion order).</span>
<span class="comment-copy">@timgeb Agreed! Although of course sorting and retaining the insertion order and not always going to produce the same output (although they do for this data); don't know what the OP wants actually for sure</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">Note that <code>Counter()</code> has an average time complexity of O(n).</span>
<span class="comment-copy">Correct, right.</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">time complexity O(n**2)</span>
<span class="comment-copy">Works too, nice</span>
<span class="comment-copy">Timgeb you are right, but maybe size/speed des not matter.</span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and links to documentation. Raw code snippets are not very helpful without some phrases around it. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
