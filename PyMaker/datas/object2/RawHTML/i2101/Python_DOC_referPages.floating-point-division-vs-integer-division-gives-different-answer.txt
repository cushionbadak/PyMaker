<div class="post-text" itemprop="text">
<p>I had some issues with a piece of code and ended up doing the following command line snippet.This was just an experiment and I didn't store such large values in any variable in the real code(modulo 10**9 +7).</p>
<pre><code>&gt;&gt;&gt; a=1
&gt;&gt;&gt; for i in range(1,101):
...     a=a*i
...
&gt;&gt;&gt; b=1
&gt;&gt;&gt; for i in range(1,51):
...     b=b*i
...
&gt;&gt;&gt; c=pow(2,50)
&gt;&gt;&gt; a//(b*c)
2725392139750729502980713245400918633290796330545803413734328823443106201171875
&gt;&gt;&gt; a/(b*c)
2.7253921397507295e+78
&gt;&gt;&gt; (a//(b*c))%(10**9 +7)
196932377
&gt;&gt;&gt; (a/(b*c))%(10**9 +7)
45708938.0
&gt;&gt;&gt;
</code></pre>
<p>I don't understand why integer divison gives the correct output while floating point divison fails.</p>
<p>Basically I calculated: <code>(  (100!)  /  ((50!)*(2^50))  ) % (10**9 +7)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Because of precision.</p>
<p>Integers and floats are coded differently. In particular, in python 3, integers can be arbitrarily large - the one you gave, for example, is more than 250 bits large when you convert it to binary. They're stored in a way that can accommodate however large they are.</p>
<p>However, floating-point numbers are constrained to a certain size - usually 64 bits. These 64 bits are divided into a sign (1 bit), mantissa, and exponent - the number of bits in the mantissa limit how precise the number can be. <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">Python's documentation contains a section on this limitation</a>.</p>
<p>So, when you do </p>
<pre><code>(a//(b*c))%(10**9 +7)
</code></pre>
<p>you're performing that calculation with integers, which, again, are arbitrarily large. However, when you do this:</p>
<pre><code>(a/(b*c))%(10**9 +7)
</code></pre>
<p>you're performing that calculation with a number that only has 18 significant digits - it's already imprecise, and doing more calculations with it only further corrupts the answer.</p>
<p>What you can do to avoid this, if you need to use very large floating-point numbers, is use python's <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">decimal module</a> (which is part of the standard library), which will not have these problems.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason is that integers are precise, but floats are limited by the floating point precision: <a href="https://stackoverflow.com/questions/47442088/python2-7-default-float-precision">Python2.7 default float precision</a></p>
</div>
<span class="comment-copy">Because integers can be any size (i.e. have any number of significant digits) in Python (subject to memory limitations), this however is not true for floating point values (which is what I assume you mean by "decimal").</span>
<span class="comment-copy">There's a module named <a href="http://mpmath.org/" rel="nofollow noreferrer"><code>mpmath</code></a> that supports doing arbitrary-precision floating-point arithmetic.</span>
<span class="comment-copy">I don't think I'm allowed to import external modules , but thanks for the help. I'll use the module if the need arises in the future.</span>
<span class="comment-copy">You seem to be referring to floating point division as "decimal division".  It's floating point division.</span>
<span class="comment-copy">You can sometimes work around the limitation without using a third-party module by converting everything to integers to do the computation.</span>
<span class="comment-copy">What happens once the decimal crosses the 53 digit limit (in float precision)? like are the rest of the digits filled with garbage values?</span>
<span class="comment-copy">When a decimal gets too large for a float to hold, it loses precision - the rest of the digits just <i>disappear</i>. It's basically rounding, but in binary. For example, the number <code>5529771903</code> rounded to five significant digits would be <code>5529700000</code>.</span>
