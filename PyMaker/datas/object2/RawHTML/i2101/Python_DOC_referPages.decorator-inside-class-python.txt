<div class="post-text" itemprop="text">
<p>Sorry for my english. I want to create a decorator method that can check each step methods and write it db.</p>
<p>This is my method:</p>
<pre><code>class Test:

    @StepStatusManager.logger_steps("GET_LIST") # TypeError: logger_steps() missing 1 required positional argument: 'type'
    def get_mails(self):
       print("GET_MAIL")    
</code></pre>
<p>This is my decorator class:</p>
<pre><code>class StepStatusManager:

    def __init__(self):
        self.db = DB()

    def logger_steps(self, type):
        def logger_steps(func):
            @functools.wraps(func)
            def wrapper(*args):
                try:
                    func(*args)
                    self.db.setStatus(type)
                except BaseException as e:
                    print(e)

            return wrapper

        return logger_steps
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to call the instance method, <code>logger_steps</code>, directly from the class <code>StepStatusManager</code>, and Python is taking the value <code>"GET_LIST"</code> as the <code>self</code> parameter instead of <code>type</code>. You should create an instance of <code>StepStatusManager</code> and then make the decorator calling the method of the instance instead. It can be as simple as:</p>
<pre><code>manager = StepStatusManager()

class Test:
    @manager.logger_steps("GET_LIST")
    def get_mails(self):
       print("GET_MAIL")
</code></pre>
<p>This is now creating an instance of the class and then calling the method on the instance, instead of trying to call the method directly from the class. You can now use <code>manager</code> to decorate as many methods as you want. Also, this would make all decorated methods use the same <code>StepStatusManager</code>, but if you want you can create different instances and use them to decorate different methods; that would allow you to use different <code>self.db</code> for different methods, if you need it.</p>
<p>Another approach could be having the <code>db</code> variable in the class, and make <code>logger_steps</code> a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">class method</a> instead:</p>
<pre><code>class StepStatusManager:

    db = DB()

    @classmethod
    def logger_steps(cls, type):
        def logger_steps(func):
            @functools.wraps(func)
            def wrapper(*args):
                try:
                    func(*args)
                    cls.db.setStatus(type)
                except BaseException as e:
                    print(e)

            return wrapper

        return logger_steps

class Test:
    @StepStatusManager.logger_steps("GET_LIST")
    def get_mails(self):
       print("GET_MAIL")
</code></pre>
<p>Note however that this is less flexible, in that it will not allow you to have methods decorated with different managers, should you ever need to. Also, this is mostly equivalent to have, instead of a class, a <code>StepStatusManager</code> module, where <code>db</code> is a module variable and <code>logger_steps</code> is a module function, and that would probably clearer if you want this functionality:</p>
<pre><code># StepStatusManager.py

# ...

db = DB()

def logger_steps(type):
    def logger_steps(func):
        @functools.wraps(func)
        def wrapper(*args):
            try:
                func(*args)
                cls.db.setStatus(type)
            except BaseException as e:
                print(e)

        return wrapper

    return logger_steps

# test.py

import StepStatusManager

class Test:
    @StepStatusManager.logger_steps("GET_LIST")
    def get_mails(self):
       print("GET_MAIL")
</code></pre>
<p>Again this is maybe more straightforward but less flexible as your first proposed class-based solution.</p>
<hr/>
<p>EDIT:</p>
<p>Just for completeness and comparison, here is yet another version, similar to the one with <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer"><code>@classmethod</code></a>, but using <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer"><code>@staticmethod</code></a> instead (to understand the subtle difference between these two decorators, check one of the many SO questions about it, e.g. <a href="https://stackoverflow.com/q/136097">What is the difference between @staticmethod and @classmethod?</a> or <a href="https://stackoverflow.com/q/12179271">Meaning of @classmethod and @staticmethod for beginner?</a>):</p>
<pre><code>class StepStatusManager:

    db = DB()

    @staticmethod
    def logger_steps(type):
        def logger_steps(func):
            @functools.wraps(func)
            def wrapper(*args):
                try:
                    func(*args)
                    StepStatusManager.db.setStatus(type)
                except BaseException as e:
                    print(e)

            return wrapper

        return logger_steps

class Test:
    @StepStatusManager.logger_steps("GET_LIST")
    def get_mails(self):
       print("GET_MAIL")
</code></pre>
<p>As it frequently happens with <code>@classmethod</code> and <code>@staticmethod</code>, the difference is quite minimal. Their behavior might differ if you are using inheritance, or if you are using a metaclass, or a decorator, or something like that, but otherwise they pretty much the same.</p>
</div>
<span class="comment-copy">BTW, it's not a good idea to shadow the built-in <code>type</code> name.</span>
<span class="comment-copy">thanks a lot for your answer!</span>
<span class="comment-copy">@jdehesa: I was just wondering if we make <code>def logger_steps(self, type):</code> a  <code>@staticmethod</code>, would the OP's code work? We then don't need to pass an implicit first argument</span>
<span class="comment-copy">@PM2Ring You are right, thanks. I would have sworn I used that syntax at some point but yes, apparently it is not allowed.</span>
<span class="comment-copy">@Bazingaa It would work if you make <code>db</code> a variable of the class and then use <code>StepStatusManager.db</code> instead of <code>self.db</code> in the decorator, similarly to the case for <code>@classmethod</code></span>
<span class="comment-copy">Is it me asking too much of you if you could also provide this alternative using  <code>@staticmethod</code> in your answer? It would be very helpful for beginners in decorators like me. Your answer would serve a very nice case then for the use of <code>staticmethod</code> and <code>classmethod</code></span>
