<div class="post-text" itemprop="text">
<p>What I want to do, is transform my variable:</p>
<pre><code>table = "female\tIngelin\tAleksandersen\nmale\tJohnny\tDigre\nmale\tOsman\tBremseth\nfemale\tCathrine\tDagestad\nfemale\tTirill\tBakker"
</code></pre>
<p>Into a kind of scheme like this: </p>
<ol>
<li>Row: 0 Col: 0 Cell value: female</li>
<li>Row: 0 Col: 1 Cell value: Ingelin</li>
<li>Row: 0 Col: 2 Cell value: Aleksandersen</li>
<li>Row: 1 Col: 0 Cell value: male</li>
<li>Row: 1 Col: 1 Cell value: Johnny</li>
</ol>
<p>The list is long, so ill stop at 5, but you get the point.
My code so far:</p>
<pre><code>table="female\tIngelin\tAleksandersen\nmale\tJohnny\tDigre\nmale\tOsman\tBremseth\nfemale\tCathrine\tDagestad\nfemale\tTirill\tBakker"

def show_table():
    print(table)

def show_every_cell():
    col = -1
    row = -1
    names = table.split("\t")
    for x in names:
        row += 1
        if row == 0:
            col += 1
            if col == 0:
                print('Row: 0 Col: 0 ' + 'Cell value: ' + x)
            if col == 1:
                print('Row: 0 Col: 1 ' + 'Cell value: ' + x)
            if col == 2:
                print('Row: 0 Col: 2 ' + 'Cell value: ' + x)

        if row == 1:
            col += 1
            if col == 0:
                print('Row: 1 Col: 0 ' + 'Cell value: ' + x)
            if col == 1:
                print('Row: 1 Col: 1 ' + 'Cell value: ' + x)
            if col == 2:
                print('Row: 1 Col: 2 ' + 'Cell value: ' + x)

    #The list continues with row: 2, 3 and 4. But no point in showing that part. 

def main():
    show_table()
    show_every_cell()

if __name__ == "__main__":
    main()
</code></pre>
<p>My output is this:</p>
<pre><code>Row: 0 Col: 0 Cell value: female
Row: 1 Col: 1 Cell value: Ingelin
</code></pre>
<p>As you see, it misses quite a lot....</p>
</div>
<div class="post-text" itemprop="text">
<p>Expanding my comment:</p>
<p>You never reset col before you print a new row. But this is a prime example for don't repeat yourself - instead of writing nearly identical code 4 times, why not use loops?</p>
<p>To reproduce your output, you could use this as a starting point:</p>
<pre><code>for rowno, row in enumerate(table.split("\n")):
    for colno, cell in enumerate(row.split("\t")):
        print("Row: {}, Col: {}, Cell value: {}".format(rowno, colno, cell))
</code></pre>
<p>These are two nested loops, which iterate over the input while using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> to automatically count the respective position.</p>
<p>Notice that the <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>split</code></a> function is used twice: once to split on newlines (<code>\n</code>) to get each row, then to split on tabs (<code>\t</code>) for each cell.</p>
<p>Since this very much looks like a csv-file, also have a look at the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer">csv-module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try a nested <code>for</code> loop.
...</p>
<pre><code>for x in names:
   for row in range(number_of_rows):
      for col in range(number_of_cols):
         print('Row: ' + row + 'Col: ' + col + 'Cell value: ' + x)
</code></pre>
</div>
<span class="comment-copy">You never reset <code>col</code> before you print a new row. But this is a prime example for <i>don't repeat yourself</i> - instead of writing nearly identical code 4 times, why not use loops?</span>
<span class="comment-copy">Search out any basic tutorial on <code>for</code> loops.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1185545/python-loop-counter-in-a-for-loop" title="python loop counter in a for loop">stackoverflow.com/questions/1185545/â€¦</a></span>
<span class="comment-copy">Thanks, ill give that a shot.</span>
<span class="comment-copy">That worked perfect, thank you!</span>
<span class="comment-copy">I added some hints, maybe they help you improving your solution further.</span>
<span class="comment-copy">Thank you, much appreciated!</span>
