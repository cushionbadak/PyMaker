<div class="post-text" itemprop="text">
<p>Imagine the following Media table:</p>
<pre><code>| site       | show_id | time |
| ---------------------|-------|
| CNN        | 1       | 'a'   |
| ABC        | 2       | 'b'   |
| ABC        | 5       | 'c'   |
| CNN        | 3       | 'd'   |
| NBC        | 4       | 'e'   |
| NBC        | 5       | 'f'   |
--------------------------------
</code></pre>
<p>I would like to iterate over query results grouped by show_id and have tried this query:</p>
<pre><code>listings = session.query(Media).filter(Media.site == "CNN").group_by(Media.show_id).all()
</code></pre>
<p>Here's how I would like to iterate over the results:</p>
<pre><code>for showtimes in listings:
    for show in showtimes:
        print(show.time)
</code></pre>
<p>But that query doesn't give me all of the grouped child objects.  What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>In SQL the GROUP BY clause <em>condenses the grouped rows into a single row</em>, based on the grouping expressions. My guess is that you are using SQLite, or an older version of MySQL, since you are allowed to select non-aggregates without them being <a href="https://en.wikipedia.org/wiki/Functional_dependency" rel="noreferrer">functionally dependent</a> on the grouping expressions. The results contain values from an unspecified row per group in that case, which is seldom — if ever — useful.</p>
<p>A solution is to ORDER BY instead of GROUP BY in SQL and then <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer">group in Python</a> based on the order expressions:</p>
<pre><code>from itertools import groupby
from operator import attrgetter

listings = session.query(Media).\
    filter(Media.site == "CNN").\
    order_by(Media.show_id).\
    all()

# Materialize the subiterators to lists
listings = [list(g) for k, g in groupby(listings, attrgetter('show_id'))]
</code></pre>
</div>
<span class="comment-copy">what objects did you get? and what all are missing? Add your expected output and actual output you are getting.</span>
<span class="comment-copy">You're misunderstanding what <code>group by</code> does. Group by is typically used for aggregations. So for example, you would run <code>select site, count(*) from media group by site</code>, which would result in <i>one</i> row for each site, along with how many rows have that site.  But what you're asking for isn't an aggregation.</span>
<span class="comment-copy">I assumed there was some sort of subquery of group_by that was needed to get the related objects.</span>
