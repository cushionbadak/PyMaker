<div class="post-text" itemprop="text">
<p>Is this a valid way to generate <code>n</code> random bytes that are cryptographically random?</p>
<pre><code>def cryptographically_secure_random_bytes(n):
    return ''.join(chr(random.SystemRandom().randint(0,256)) for _ in range(n))
</code></pre>
<p>I know <code>random.SystemRandom()</code> is the same as <code>os.urandom()</code>, and I know that <code>os.urandom()</code> is definitely a cryptographically secure way of generating random numbers. </p>
<p>However, the <code>chr(random.SystemRandom().randint(0,256))</code> part throws me off a bit. Since <code>chr()</code> doesn't support unicode, I'm assuming that this function is discarding some characters that would otherwise be produced by <code>random.SystemRandom()</code>. </p>
<p>I'm not sure what to think of <code>randint(0,256)</code> either, since that is the size of a byte.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.7/library/random.html#random.randint" rel="nofollow noreferrer">random.randint(a, b)</a></p>
<blockquote>
<p>Return a random integer N such that a &lt;= N &lt;= b. Alias for
  randrange(a, b+1).</p>
</blockquote>
<p>So it is inclusive you could get something bigger than a byte.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/secrets.html?#module-secrets" rel="nofollow noreferrer"><code>secret</code></a> module!</p>
<p>From the docs:</p>
<p><em>The <code>secrets</code> module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.</em></p>
<p><em>In particularly, <code>secret</code>s should be used in preference to the default pseudo-random number generator in the <code>random</code> module, which is designed for modelling and simulation, not security or cryptography.</em></p>
</div>
<span class="comment-copy">I think that randint's upper bound is inclusive. So your randint could technically be more than one byte if it returns 256.</span>
<span class="comment-copy">In other words, the answer is: NO!</span>
<span class="comment-copy">I would certainly use that if I were writing this code, however, this question is related to code that isn't mine.</span>
<span class="comment-copy">Also, SystemRandom is <i>not</i> the default PRNG in the random module.</span>
