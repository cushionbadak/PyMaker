<div class="post-text" itemprop="text">
<p>Can anybody explain me why this line gives me an error </p>
<pre><code>['foo', 'foo_{}'.format(s) for s in range(0,5)]
</code></pre>
<p>But it works properly when I do like these:</p>
<pre><code>['foo_{}'.format(s) for s in range(0,5)]
</code></pre>
<p>or even</p>
<pre><code>['foo', ['foo_{}'.format(s) for s in range(0,5)]]
</code></pre>
<p>and it gives me memory allocation when I do like this:</p>
<pre><code>['foo', ('foo_{}'.format(s) for s in range(0,5))]
</code></pre>
<p>I am learning and a newbie in Python and I am very curious 
why it produces me "<strong>Invalid Syntax</strong>" when I try this line of code</p>
<pre><code>['foo', 'foo_{}'.format(s) for s in range(0,5)]
</code></pre>
<p>Is there an alternative way to have an output of </p>
<pre><code>Output: ['foo','foo_0','foo_1','foo_2','foo_3','foo_4']
</code></pre>
<p>without to do manually code?</p>
<p>Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>['foo_{}'.format(s) for s in range(0,5)] 
</code></pre>
<p>The above implementation is List Comprehensions. You can check detail here, <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
<p>However by doing this: <code>['foo', 'foo_{}'.format(s) for s in range(0,5)]</code> you are breaking List Comprehension implementation and actually you are defining a list whose first member is <code>'foo'</code> and the other is<code>'foo_{}'.format(s) for s in range(0,5)</code></p>
<p>Since the second member is neither a proper list element nor List Comprehensions syntax error is occured</p>
</div>
<div class="post-text" itemprop="text">
<p>The expression <code>a for b in c</code> does not allow an implicit <code>tuple</code> in <code>a</code> (comma-separated expressions not enclosed in parentheses). That forces you to explicitly choose what exactly is combined by the comma:</p>
<pre><code>[('foo', 'foo_{}'.format(s)) for s in range(0,5)]
# [('foo', 'foo_0'), ('foo', 'foo_1'), ('foo', 'foo_2'), ('foo', 'foo_3'), ('foo', 'foo_4')]
['foo', ('foo_{}'.format(s) for s in range(0,5))]
# ['foo', &lt;generator object &lt;genexpr&gt; at 0x7fc2d41daca8&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>[('foo', 'foo_{}'.format(s)) for s in range(0,5)]
</code></pre>
<p>I suspect this is because Python sees <code>['foo', 'foo_{}'.format(s)</code> and thinks it's just a list. Then it sees <code>for</code> and is suddenly confused.</p>
<p>If you wrap <code>'foo', 'foo_{}'.format(s)</code> in parentheses it removes the ambiguity.</p>
</div>
<span class="comment-copy">['foo'] + ['foo_{}'.format(s) for s in range(0,5)] is what I would use</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/44116557/how-to-extend-concatenate-two-iterators-in-python" title="how to extend concatenate two iterators in python">stackoverflow.com/questions/44116557/â€¦</a></span>
<span class="comment-copy">@Skirrebattie Thank you for your alternative way!</span>
<span class="comment-copy">Thank you for your answer and the source. This is very helpful. Think I should have a further study on that. Thanks again!</span>
<span class="comment-copy">Thank you! I really appreciate your answer :D</span>
