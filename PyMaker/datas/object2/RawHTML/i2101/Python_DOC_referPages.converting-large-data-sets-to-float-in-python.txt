<div class="post-text" itemprop="text">
<p>I am a newbie to Python 3 and python in general. I have been set a task to write a function that reads a data set (plenty.data) and then convert this data to float.</p>
<p>I have managed to write code to read the data set, but I am really struggling with the converting it to float.</p>
<pre><code>data=[]
inFile = open('plenty.data','r')
for line in inFile.readlines():
  data.append(line)
  data(float(line))
</code></pre>
<p>This is currently what I have for converting to float but when I run it I get an error message saying </p>
<pre><code>ValueError                                Traceback (most recent call last)
&lt;ipython-input-6-f32b7e41d5ed&gt; in &lt;module&gt;()
      3 for line in inFile.readlines():
      4     data.append(line)
----&gt; 5     data(float(line))
      6 

ValueError: could not convert string to float: '0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 
0.0\n'
</code></pre>
<p>I have been told to use loops but I am still struggling with how to do this.</p>
<p>any help would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't just convert a long string of numbers to floats. Your exception shows that the line consists of more than one number:</p>
<pre><code>'0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n'
</code></pre>
<p>Next, even if that would have worked, the expression <code>data(float(line))</code> asks Python to treat <code>data</code> as a function or class (a <em>callable</em>). List objects are not callable however.</p>
<p>You need to <em>split</em> the line into separate numbers and convert those separate parts to floating point numbers. If you want to append each line of text as a separate list, you can use:</p>
<pre><code>data.append([float(part) for part in line.split()])
</code></pre>
<p>However, it'd be more efficient to have the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> do this for you, it can convert data to floats as it reads the data and splits the lines:</p>
<pre><code>import csv

with open('plenty.data', 'r', newline='') as plentydata:
    reader = csv.reader(plentydata, delimiter=' ', quoting=csv.QUOTE_NONNUMERIC)
    data = list(reader)
</code></pre>
<p>The <code>quoting=csv.QUOTE_NONNUMERIC</code> configuration for the CSV reader is what makes the reader output floating point numbers.</p>
<p>If you don't need random access to the data (if you can process the numbers row by row and don't need to refer to individual rows by index), then you don't have to read the whole file into memory. Just loop over the reader and process each row as needed:</p>
<pre><code>with open('plenty.data', 'r', newline='') as plentydata:
    reader = csv.reader(plentydata, delimiter=' ', quoting=csv.QUOTE_NONNUMERIC)
    for row in reader:
        # do something with a single row of floats
</code></pre>
</div>
<span class="comment-copy"><code>data(float(line))</code> tries to use the list object as a function. Rather than append the line, append <code>float(line)</code>: <code>data.append(float(line))</code>.</span>
<span class="comment-copy">Ah, you have <i>space-separated numbers</i>. You want to use the <code>csv</code> module here, and have it take care of creating floats for each column.</span>
<span class="comment-copy">It will be better to use <code>numpy</code> for this task.</span>
<span class="comment-copy"><code>QUOTE_NONNUMERIC</code> makes a reader do that? Wow, talk about poorly named constants. What was the developer thinking?</span>
<span class="comment-copy">@martineau: it's a symmetry thing. The <code>quote</code> configuration is mostly a <code>writer</code> dialect config option (where anything not a number, specifically floats, is put in quotes in the output). Here it is used as the inverse of that option.</span>
<span class="comment-copy">Ahh, now it makes sense. Symmetry in logic (and faces) is beautiful provided you're aware of it. There is one tiny asymmetric aspect though. A writer (unsurprisingly) considers both integers and floats numeric and doesn't quote them, but readers convert anything unquoted only to float. Regardless, I'm somewhat surprised to learn that readers are capable of returning  sequences of something other that all strings, albeit in a very limited way.</span>
<span class="comment-copy">@martineau: I'd love to see this be a bit more configurable (a la Pandas <code>read_csv()</code> perhaps, but not as high-level perhaps), and I don't usually have much need for this option. But it <i>is</i> faster (insofar that I/O operations can be considered fast) and simpler than having to map the rows yourself.</span>
