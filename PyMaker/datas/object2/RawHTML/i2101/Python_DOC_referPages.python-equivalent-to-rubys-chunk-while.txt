<div class="post-text" itemprop="text">
<p>I have some interesting using cases in my Ruby code that I want to convert to Python. I think we can leverage in any lib, I mainly use pandas and numpy.</p>
<p>For instance, imagine that you have an array of timed events, these events have a timestamp and another properties (an object or a tuple).</p>
<p>I want a list/array of groups, where these groups are "contiguous" events, with a grace period of <code>g</code> units (in this case, time units).</p>
<p>In my Ruby code I use something like this:</p>
<pre class="lang-rb prettyprint-override"><code>grouped_events = events.chunk_while do |previous_event, next_event|
   next_event.timestamp &lt;= previous_event.timestamp + grace_period
end
</code></pre>
<p>Since I'm not using only in timed events, but with anything that I can sort (so they're comparable somehow), I ask: there's a generic way, or a known lib that does this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have an equivalent function. You'll have to write your own.</p>
<p>Here's my implementation, using an <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">iterator</a> and the <a href="https://stackoverflow.com/q/231767/1222951"><code>yield</code> statement</a>:</p>
<pre><code>def chunk_while(iterable, predicate):
    itr = iter(iterable)

    try:
        prev_value = next(itr)
    except StopIteration:
        # if the iterable is empty, yield nothing
        return

    chunk = [prev_value]
    for value in itr:
        # if the predicate returns False, start a new chunk
        if not predicate(prev_value, value):
            yield chunk
            chunk = []

        chunk.append(value)
        prev_value = value

    # don't forget to yield the final chunk
    if chunk:
        yield chunk
</code></pre>
<p>Which can be used like so:</p>
<pre><code>&gt;&gt;&gt; list(chunk_while([1, 3, 2, 5, 5], lambda prev, next_: next_ &lt;= prev + 2))
[[1, 3, 2], [5, 5]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not aware of a ready-made solution to this, but it's not too hard to write one from scratch. Iterate over the elements of the sequence, testing each pair of items against your criteria, and choose whether to add it to the existing group or create a new group.</p>
<pre><code>import collections

def pairs(seq):
    """yields (previous, current) pairs from the given iterable."""
    no_item = object()
    previous = no_item
    for item in seq:
        if previous is not no_item:
            yield (previous, item)
        previous = item

def chunk_contiguous(seq, criteria):
    cur_group = []
    for previous, current in pairs(seq):
        if criteria(previous, current):
            cur_group.append(current)
        else:
            yield cur_group
            cur_group = [current]
    if cur_group: 
        yield cur_group

Event = collections.namedtuple("Event", ["name", "timestamp"])

events = [
    Event("foo", 0),
    Event("bar", 1),
    Event("baz", 10),
    Event("qux", 12),
    Event("Larry", 17),
    Event("Curly", 21),
    Event("Moe", 25),

]

g = 4

for group in chunk_contiguous(events, lambda previous, current: current.timestamp &lt;= previous.timestamp + g):
    print(group)
</code></pre>
<p>Result:</p>
<pre><code>[Event(name='bar', timestamp=1)]
[Event(name='baz', timestamp=10), Event(name='qux', timestamp=12)]
[Event(name='Larry', timestamp=17), Event(name='Curly', timestamp=21), Event(name='Moe', timestamp=25)]
</code></pre>
</div>
<span class="comment-copy">Do you mean to say that you like to group consecutive items (in the array), as long as each next item is less than <code>g</code> time away?</span>
<span class="comment-copy">There are quite a few options here: <a href="https://stackoverflow.com/questions/4002598/python-list-how-to-read-the-previous-element-when-using-for-loop" title="python list how to read the previous element when using for loop">stackoverflow.com/questions/4002598/â€¦</a></span>
<span class="comment-copy">@9769953 not only g time away, any comparison between two consecutive elements (usually ordered). Time is just "easier" to think.</span>
<span class="comment-copy">Nice. I was expecting some more of these utility functions for sets, lists, etc, on some unknown lib for me. I think I need to write some extra code, for other things that I also want. Thanks for your contribution. I will test and mark green after that.</span>
<span class="comment-copy">Nice answer, since I'm unexperienced to py ecosystem I was looking for some unknown lib that have these kind of utilities, besides  the most famous ones like pandas, numpy, etc.  One can always write these functions, but I was looking to have less "boilerplate" writing.  Thanks!</span>
<span class="comment-copy">Check out <a href="https://toolz.readthedocs.io/en/latest/api.html#toolz.recipes.partitionby" rel="nofollow noreferrer"><code>partitionby</code></a></span>
<span class="comment-copy">@wim wonderful, it has another niceties that I'm looking for. :D</span>
