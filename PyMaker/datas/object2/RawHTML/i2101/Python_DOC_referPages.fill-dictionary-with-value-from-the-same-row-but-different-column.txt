<div class="post-text" itemprop="text">
<p>Lately I've been trying to map some values, so I'm trying to create a dictionary to do so. The odd thing is my DataFrame has a column made of lists, and DataFrames are always a bit awkward with lists. The DataFrame has the following structure:</p>
<pre><code>    rules          procedure
['10','11','12']       1
['13','14']            2
['20','21','22','24']  3
</code></pre>
<p>So I want to create a dictionary that maps '10' to 1, '14' to 2, and so on. I tried the following:</p>
<pre><code>dicc=dict()
for j in df['rules']:
    for i,k in zip(j,df.procedure):
        dicc[i]=k
</code></pre>
<p>But that isn't making it. Probably something to do with indexes. What am I missing?</p>
<p>Edit: I'm trying to create a dictionary that maps the values '10', '11', '12' to 1; '13','14' to 2; '20','21','22','24' to 3, so if I type<code>dicc['10']</code> I get <code>1</code>, if I type<code>dicc['22']</code> I get <code>3</code>. Obviously, the actual DataFrame is quite bigger and I can't do it manually.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this:</p>
<pre><code>import pandas as pd

data = [[['10', '11', '12'], 1],
        [['13', '14'], 2],
        [['20', '21', '22', '24'], 3]]

df = pd.DataFrame(data=data, columns=['rules', 'procedure'])

d = {r : p for rs, p in df[['rules', 'procedure']].values for r in rs}
print(d)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'20': 3, '10': 1, '11': 1, '24': 3, '14': 2, '22': 3, '13': 2, '12': 1, '21': 3}
</code></pre>
<p><strong>Notes:</strong></p>
<ul>
<li>The code <code>{r : p for rs, p in df[['rules', 'procedure']].values for r
in rs}</code> is a dictionary comprehension, the dictionary counterpart of
list.</li>
<li>The <code>df[['rules', 'procedure']].values</code> is equivalent to
<code>zip(df.rules, df.procedure)</code> it outputs a pair of list, int. So the
<code>rs</code> variable is a list and <code>p</code> is an integer.</li>
<li>Finally you iterate over the values of <code>rs</code> using the second for loop</li>
</ul>
<p><strong>UPDATE</strong></p>
<p>As suggested for @piRSquared you can use zip:</p>
<pre><code>d = {r : p for rs, p in zip(df.rules, df.procedure) for r in rs}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>Help from <code>cytoolz</code></h3>
<pre><code>from cytoolz.dicttoolz import merge

merge(*map(dict.fromkeys, df.rules, df.procedure))

{'10': 1,
 '11': 1,
 '12': 1,
 '13': 2,
 '14': 2,
 '20': 3,
 '21': 3,
 '22': 3,
 '24': 3}
</code></pre>
<hr/>
<h3>Note</h3>
<p>I updated my post to mimic how @jpp passed multiple iterables to <code>map</code>.  <a href="https://stackoverflow.com/a/52724364/2336654">@jpp's answer is very good</a>.  Though I'd advocate for upvoting all useful answers, I wish I could upvote their answer again (-:</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer"><code>collections.ChainMap</code></a>:</p>
<pre><code>from collections import ChainMap

res = dict(ChainMap(*map(dict.fromkeys, df['rules'], df['procedure'])))

print(res)

{'10': 1, '11': 1, '12': 1, '13': 2, '14': 2,
 '20': 3, '21': 3, '22': 3, '24': 3}
</code></pre>
<p>For many uses, the final <code>dict</code> conversion is not necessary:</p>
<blockquote>
<p>A <code>ChainMap</code> class is provided for quickly linking a number of
  mappings so they can be treated as a single unit. It is often much
  faster than creating a new dictionary and running multiple <code>update()</code>
  calls.</p>
</blockquote>
<p>See also <a href="https://stackoverflow.com/questions/23392976/what-is-the-purpose-of-collections-chainmap">What is the purpose of collections.ChainMap?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You may check flatten the list</p>
<pre><code>dict(zip(sum(df.rules.tolist(),[]),df.procedure.repeat(df.rules.str.len())))
Out[60]: 
{'10': 1,
 '11': 1,
 '12': 1,
 '13': 2,
 '14': 2,
 '20': 3,
 '21': 3,
 '22': 3,
 '24': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <code>itertools.chain</code> and <code>DataFrame.itertuples</code>:</p>
<pre><code>dict(
    chain.from_iterable(
        ((rule, row.procedure) for rule in row.rules) for row in df.itertuples()
    )
)
</code></pre>
</div>
<span class="comment-copy">I'd start with a <a href="https://stackoverflow.com/help/mcve">MVCE</a> including input/output/expected output.</span>
<span class="comment-copy">Just trying to make sure I understand exactly. The value in the corresponding <code>procedure</code> column indicates the index of the list that you'd like to do something with? Do what with exactly?</span>
<span class="comment-copy">IIUC, you want to create a dictionary from this dataframe, so that the keys are taken from the lists in the <code>rules</code> column and the associated values are from the <code>procedure</code> column?</span>
<span class="comment-copy">rahl23 you understood correctly indeed. I tried to clarify a bit in my edit</span>
<span class="comment-copy">This is as pythonic as it gets. It actually worked like a charm! Only issue is I'm not quite understanding the code. Would it be asking too much to ask for a little explanation of what is going on here?</span>
<span class="comment-copy">I would try to explain!</span>
<span class="comment-copy">Using <code>values</code> is not the most generalized way to do this.  In some cases, can cause problems.  I'd do this for your solution <code>{i: j for I, j in zip(df.rules, df.procedure) for i in I}</code></span>
<span class="comment-copy">@piRSquared updated the answer!</span>
<span class="comment-copy"><code>ChainMap</code> be new to me.  Thanks</span>
<span class="comment-copy">Actually, I learned that you can pass multiple iterables as additional arguments within <code>map</code>.  I learned 2 things from this post.  Wish I had two votes (-: I updated my post because of this.</span>
