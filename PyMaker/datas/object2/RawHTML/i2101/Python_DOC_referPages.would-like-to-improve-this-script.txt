<div class="post-text" itemprop="text">
<p>I was reviewing some scripts that I have saved and came across to this particular one; I feel like it can be improved without the need of using all the lower/upper case letters, any advice? I was thinking of using <code>str.lower</code>, but don't really see how to implement it </p>
<pre><code>def all_but_not_numbs(s: str) -&gt; int:
    """
    &gt;&gt;&gt; all_but_not_numbs('asd123')
    3
    &gt;&gt;&gt; all_but_not_numbs('E.666')
    2
    """

    num_letters = 0

    for char in s: 
        if char in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.,':
            num_letters = num_letters + 1
    return num_letters
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>str.lower</code>, you could lowercase the character you are about to test so you don't need the uppercase letters. Characters that are <code>.</code> or <code>,</code> are not affected by <code>lower</code>. Also, use <code>sum</code> with a generator expression to make you code more compact and (IMHO) more readable.</p>
<pre><code>&gt;&gt;&gt; letters = "abcdefghijklmnopqrstuvwxyz,."
&gt;&gt;&gt; s = 'E.666'
&gt;&gt;&gt; sum(1 for c in s if c.lower() in letters)
2
</code></pre>
<p>Or you could use <a href="https://docs.python.org/3/library/string.html#string.ascii_letters" rel="nofollow noreferrer"><code>ascii_letters</code></a> defined in the <code>string</code> module:</p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; letters = string.ascii_letters + ",."
&gt;&gt;&gt; sum(1 for c in s if c in letters)
2
</code></pre>
<p>In both cases, the <code>in</code> check will be linear (O(k) for k "good" letters), though. This should not be a problem for such a short list of letters, but to improve it further, you could turn <code>letters</code> into a <code>set</code> so that the <code>in</code> check will be O(1).</p>
<pre><code>&gt;&gt;&gt; letters = set(letters)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>regex</code> to find all letters and dots and take length:</p>
<pre><code>import re

s = 'asd123'
print(len(re.findall(r'[a-zA-Z\.]', s)))
# 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the following method, basically, stripping the digits and using <code>len</code> to count number of remaing chars:</p>
<pre><code>&gt;&gt;&gt; s
'asd123'
&gt;&gt;&gt; to_strip = '0123456789'
&gt;&gt;&gt; len(s.strip(to_strip))
3
</code></pre>
<p>Or using <code>string.digits</code> from <code>string</code> module:</p>
<pre><code>&gt;&gt;&gt; s
'asd123'
&gt;&gt;&gt; len(s.strip(string.digits))
3
</code></pre>
<p>EDIT: Following tobias_k comments, I suggest the following which is similar to Austing's answer but through different approach:</p>
<pre><code>&gt;&gt;&gt; s = 'abced@#$%123'
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; to_strip
'0123456789'
&gt;&gt;&gt; re.findall('[^{}]'.format(to_strip), s)
['a', 'b', 'c', 'e', 'd', '@', '#', '$', '%']
&gt;&gt;&gt; len(re.findall('[^{}]'.format(to_strip), s))
9
</code></pre>
<p>Which it says to look for all characters except(^) the ones mentioned after (^), which are the digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well I used <code>s.isalpha()</code>, <code>s.upper.isupper()</code>, and <code>ch in '.'</code>(didn't need <code>,</code>):</p>
<p>Now, my questions is about why Python says that my line  <code>if ch.isalpha():</code> is inconsistent?
error: <code>builtins.TabError: inconsistent use of tabs and spaces in indentation</code></p>
<pre><code>num = 0
for ch in s:
    if ch.isalpha():
        num = num + 1
    elif ch.upper.isupper():
        num = num + 1
    elif ch in '.':
        num = num + 1
return num
</code></pre>
</div>
<span class="comment-copy">Thatâ€™s a really helpful module</span>
<span class="comment-copy">Does not work for other characters like $, %, -, *, (, etc., and if you extend the list of characters to remove, you are just inversing OP's problem (and making it worse, with a longer list of characters to write out). Also, <code>strip</code> will not remove characters in the middle of the string.</span>
<span class="comment-copy">@tobias_k, answer updated, thank's for the head's up!</span>
