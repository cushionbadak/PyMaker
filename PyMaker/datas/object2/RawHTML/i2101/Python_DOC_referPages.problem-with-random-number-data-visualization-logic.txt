<div class="post-text" itemprop="text">
<p>so I recently learned about data visualization after watching a cool Numberphile video, I wanted to make my own little data visualization with random numbers. The idea is that I have a list of random integers, and based on the number, I draw a different colored circle. The color key is explained in the code below.</p>
<p>However, I seem to be having a logic problem with my code. The code runs without bugs, but based on what I described previously, my program is not working properly. First off, my list has 10 integers in it, but only 6 are drawn on the program. Also, the coloring is a bit off. Any help is appreciated, thanks.</p>
<pre><code>import pygame
pygame.init()

## COLOR KEY
 # 0 - Black
 # 1 - White
 # 2 - Red
 # 3 - Orange
 # 4 - Yellow
 # 5 - Green
 # 6 - Blue
 # 7 - Indigo
 # 8 - Violet
 # 9 - dark blue

display_width = 1000
display_height = 500
display = pygame.display.set_mode((display_width,display_height))

black = 0,0,0
white = 255,255,255
red = 255,0,0
orange = 255,165,0
yellow = 255,255,0
green = 0,255,0
blue = 0,0,255
indigo = 29,0,51
violet = 128,0,128
darkblue = 0,200,0

random_list = [9,8,5,9,4,7,5,1,9,0]
def programLoop():
    exitProgram = False
    while not exitProgram:

        for evt in pygame.event.get():
            if evt.type == pygame.QUIT:
                pygame.quit()
                quit()

        startN = 100

        display.fill(white)
        for n in random_list:
            color = black
            if random_list[n] == 0:
                color = black

            if random_list[n] == 1:
                color = white

            if random_list[n] == 2:
                color = red

            if random_list[n] == 3:
                color = orange

            if random_list[n] == 4:
                color = yellow

            if random_list[n] == 5:
                color = green

            if random_list[n] == 6:
                color = blue

            if random_list[n] == 7:
                color = indigo

            if random_list[n] == 8:
                color = violet

            if random_list[n] == 9:
                color = darkblue

            pygame.draw.circle(display,color,[n * 50 + startN,250],10)

        pygame.display.update()

programLoop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first step to debug the program would be to print <code>n, color, n*50 + startN</code>. You'll see that you're iterating over the indices in the <code>random_list</code> not over a range like you expect. So the first number is 9, you check <code>if random_list[9] == 0</code>, that's <code>True</code> and it sets <code>color = black</code> and displays it at 550.</p>
<p>You can iterate over the range <code>for n in range(len(random_list)):</code> to fix this problem.</p>
<hr/>
<p>I suggest putting the colors into a list or dictionary and just iterate over the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerated</a> <code>random_list</code>. Then you get the number <code>n</code> and the color index at the same time and can just access the color in this way: <code>color = colors[color_index]</code>.</p>
<p>The updated code:</p>
<pre><code>darkblue = 0,0,200  # Your darkblue was green.
# Put the colors into a list.
colors = [black, white, red, orange, yellow, green, blue, indigo, violet, darkblue]
random_list = [9,8,5,9,4,7,5,1,9,0]

def programLoop():
    clock = pygame.time.Clock()  # A clock to limit the frame rate.
    exitProgram = False
    while not exitProgram:
        for evt in pygame.event.get():
            if evt.type == pygame.QUIT:
                exitProgram = True

        startN = 100

        display.fill((200, 200, 200))
        # Now enumerate the list, so that you'll get n and the color index
        # at the same time.
        for n, color_index in enumerate(random_list):
            color = colors[color_index]
            pygame.draw.circle(display, color, [n*50 + startN, 250], 10)

        pygame.display.update()
        clock.tick(60)  # Limit the frame rate to 60 FPS.

programLoop()
pygame.quit()
</code></pre>
</div>
<span class="comment-copy">If you haven't seen a <code>for</code> loop with two variables before, look up "tuple unpacking" or "iterable unpacking".</span>
