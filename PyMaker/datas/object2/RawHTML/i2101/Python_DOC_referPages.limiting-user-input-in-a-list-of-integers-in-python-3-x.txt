<div class="post-text" itemprop="text">
<p>I am new to Python and in one of my exercises I need to write a program that will store 5 integers entered to the console in a list, then print its length, type of the list, and print the sorted list.</p>
<p>So far, the most elegant way I could do it without limiting the input to 5 integers was:</p>
<pre><code>a = [int(x) for x in input().split()]
print(len(a), type(a), sorted(a))
</code></pre>
<p>However, I can't get my head around how to add the command to store only 5 numbers entered by the user in the list and ignore the rest.</p>
<p>I thought of using int(input()) for x in range(5), but it didn't work, and I also don't know how to add the split then.</p>
<p>I know there is a way to store items in the list using map(), but I haven't come across that in my course yet, so if there is a simpler and more efficient way to do it with list(map()), I would highly appreciate if someone could guide me.</p>
<p>I only started learning, so any advice would be appreciated. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You have two options:</p>
<ul>
<li>Take the first five values from a line, ignore the rest</li>
<li>Check the length and tell the user to not enter so many values</li>
</ul>
<p>The latter would give the user better feedback, where the first could lead to surprises (<em>What happened to the numbers at the end of my line?</em>)</p>
<p>Ignoring the rest is easy; slice the list you create; the <code>[:5]</code> creates a new list with just (up to) 5 values:</p>
<pre><code>a = [int(x) for x in input().split(maxsplit=5)[:5]]
</code></pre>
<p>The above also tells <code>str.split()</code> to only split up to 5 times, to avoid further work.</p>
<p>An error message should, by command-line tool convention, be written to <code>sys.stderr</code> and you would exit with a non-zero exit code:</p>
<pre><code>a = [int(x) for x in input().split()]
if len(a) &gt; 5:  # or len(a) != 5 if you must have exactly 5 values
    print('No more than 5 values, please!', file=sys.stderr)
    sys.exit(1)
</code></pre>
<p>When you use a library to handle command-line parsing, then the library usually includes a function to handle error communication and exit (such as <code>argparse</code>, where you'd use <code>parser.error(message)</code> to signal an issue and exit in one step).</p>
</div>
<div class="post-text" itemprop="text">
<p>Limit your split to the first 5 numbers via the <code>maxsplit</code> argument of <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split</code></a>.</p>
<p>Then slice up to but not including the final element of the resultant list.</p>
<pre><code>a = [int(x) for x in input().split(maxsplit=5)[:-1]]
</code></pre>
<p>Note you can also rewrite this with <code>list</code> + <code>map</code>:</p>
<pre><code>a = list(map(int, input().split(maxsplit=5)[:-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will just keep the first 5 items in the list:</p>
<pre><code>a = [int(x) for x in input().split()[:5]]
</code></pre>
<p>Using this gives all the items in the list that have index less than 5.</p>
</div>
<span class="comment-copy"><code>a = [int(x) for x in input().split()[:5]]</code></span>
<span class="comment-copy">Just take the first five elements from the list you built.</span>
<span class="comment-copy">just to extend that, input gives you back a string.  <code>s=input("blah")</code>.  You can slice a string without having to do the rest of it.</span>
<span class="comment-copy">use a=a[:5]   , this will give you first 5 elements of your list.</span>
<span class="comment-copy">@Developer <code>a=a[:5]</code></span>
<span class="comment-copy">Thanks a lot for the explanation! I'm sorry if the question is silly, but why is the maxsplit=5, not 4? The fifth split is right after the fifth element, isn't it? So why do I need it?</span>
<span class="comment-copy">@spfortray: because if you split just 4 times, then you have <code>['1', '2', '3', '4', '5 6 7 8']</code>, so the 5th part contains all the extra values, and <code>int()</code> will fail to convert that string to an integer. You want to split into 6 pieces (split 5 times) so that the extra parts are kept aside from the 5 you do want to accept.</span>
<span class="comment-copy">@spfortray: then you'd be using a loop and separate <code>input()</code> calls per number, as pressing enter means that <code>input()</code> returns the line of input given to Python. You can then simply <i>end the loop</i> and not ask for more numbers..</span>
<span class="comment-copy">@spfortray: you are creating a new list object each iteration, every <code>a = [...]</code> is a new list object; in the end the last assignment wins and you have a list with one element, having discarded the previous 4 lists you created. Create an empty list <i>first</i>, then use <code>list.append()</code> to add values. So <code>a = []</code>, and in the loop <code>a.append(int(input()))</code></span>
<span class="comment-copy">@spfortray: you could look at the documentation for both. While the code may work, why make it more complicated for yourself? <code>a.append(x)</code> is simpler than <code>a.insert(i, x)</code>, because now you have to think about what <code>i</code> is each time. <code>a.append()</code> clearly states: <i>add this item to the list at the end</i>. <code>a.insert(i, x)</code> means: make room for this item at position <code>i</code> (move up what ever follows). So now you have to go look at what <code>i</code>  is set to, and what is already in the list. That's more work for you as a code reader to understand what is going on, so that's a <i>weird</i> way of appending values.</span>
<span class="comment-copy">Just to make sure I understand the concept of splitting right: this approach essentially means that I split five times - first split between my first and second value, second split between my second and third and so on, and then the final, fifth split is between my fifth and sixth value, so I then cut that sixth value out by using [:-1]?  This is a smart solution, but is it effectively different to writing [:5]? And also if I write [:5], why can't I write maxsplit=4 if I do not need the final split after the fifth value?</span>
<span class="comment-copy">@spfortray, Exactly. For an example: <code>'1 4 5 6 1 3 4 6'.split(maxsplit=5)</code> will give you: <code>['1', '4', '5', '6', '1', '3 4 6']</code>. Then indexing this with <code>[:-1]</code> gives you <code>['1', '4', '5', '6', '1']</code></span>
<span class="comment-copy">thank you for the answer! So there is no effective difference between [:5] and [:-1]? Just wondering which to stick to in the future. Same question for the list(map()): is there a preference towards the first or the "map" method?</span>
<span class="comment-copy"><code>[:5]</code> &amp; <code>[:-1]</code> have the same impact here. Which one to prefer? I prefer <code>[:-1]</code> because it's more generalized: why should you have to type out a variable <code>5</code> twice? <code>-1</code> is more generic. Here, list comprehension vs <code>list</code> + <code>map</code> is a matter of style, whatever you find easier to read.</span>
