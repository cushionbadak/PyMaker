<div class="post-text" itemprop="text">
<p>I don't care about the placement of the decimal point, and would like to print in scientific notation when appropriate to display with maximum accuracy.  However, I would like to round appropriately to maintain a fixed width, ragged left or ragged right is fine.</p>
<p>e.g.</p>
<pre><code>&gt;&gt;&gt; my_format("{:10f}", 0.0000000456)
"  4.56e-08"
&gt;&gt;&gt; my_format("{:10f}", 12.345678987654321)
" 12.345679"
#or "12.34567890" because significant digits
#but not "1.2346e+01", since it is less accurate than the above representations
&gt;&gt;&gt; my_format("{:10f}", 12345678987654321)
"1.2345e+16"
</code></pre>
<p><strong>EDIT</strong> to clarify the examples, the <code>width</code> formatting specifier does not provide a fixed width.  It provides a <em>minimum</em> width.  How do I obtain a fixed width representation?</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>g</code> format specifier is generally good if you want scientific notation, i.e:</p>
<pre><code>my_format = "{:.10g}".format
</code></pre>
<p>should do the right thing:</p>
<pre><code>&gt;&gt;&gt; list(my_format(v) for v in (0.0000000456, 12.345678987654321, 12345678987654321))
['4.56e-08', '12.34567899', '1.234567899e+16']
</code></pre>
<p>I realised later that the above function doesn't do what the OP wanted</p>
<p>Based on helpful comments from @a_guest I've come up with the following:</p>
<pre><code>def my_format(v, length=10):
    n = length
    while n &gt; 0:
        i = len('%#.*g' % (n, v))
        s = '%.*g' % (n + n - i, v)
        if len(s) &lt;= length:
            return s
        n -= 1
    return s
</code></pre>
<p>I now get <code>['4.56e-08', '12.345679', '1.2346e+16']</code> back which is closer to what was wanted.</p>
<p>I've tested this by generating a lot of random numbers using:</p>
<pre><code>from random import uniform
def rnd_float():
    return uniform(-10, 10) * 10 ** (uniform(-1.6, 1.6) ** 11)
</code></pre>
<p>pretty arbitrary, but generates numbers reasonably close to the distribution I care about.  I.e. mostly around 1, but some very small and large with decent probability.</p>
<p>I've passed numbers from this to <code>my_format</code> 100k times and I get appropriately formatted numbers back.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can test to format the number in both <code>{:f}</code> and <code>{:e}</code> and then parse the resulting strings to see which one fits better:</p>
<pre><code>import re


def format(spec, number):
    def _decimal(s):
        return re.search(r'^\s*-?([0-9]+(\.[0-9]+)?)', s).group(1)

    def _significant_digits(s):
        return _decimal(s).rstrip('0')

    def _fit_to_width(s):
        decimal, significant = _decimal(s), _significant_digits(s)
        stripped = s.replace(decimal, significant)
        excess = len(stripped) - spec
        if excess &gt; 0:
            # Replace excess digits from the right.
            significant = significant[::-1].replace(
                re.match(
                    r'[0-9]{{,{}}}'.format(excess),
                    significant[::-1]
                ).group(0), ''
            )[::-1]
        return s.replace(decimal, significant)

    formats = [
        _fit_to_width('{{:{}f}}'.format(spec).format(number)),
        _fit_to_width('{{:{}e}}'.format(spec).format(number)),
    ]
    return max(
        filter(
            lambda x: len(x[0]) &lt;= spec,
            [(f, len(_significant_digits(f))) for f in formats]
        ),
        key=lambda x: x[-1]
    )[0].rjust(spec)


print(format(10, 0.0000000456))
print(format(10, 12.345678987654321))
print(format(10, 12345678987654321))

#   4.56e-08
#  12.345679
# 1.2345e+16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what you need is a way to maintain the number of characters displayed. So create a function to do that.</p>
<pre><code>import decimal

# create a new context for this task
ctx = decimal.Context()

# 20 digits should be enough for everyone :D
ctx.prec = 20

def float_to_str(f):
    """
    Convert the given float to a string,
    without resorting to scientific notation
    """
    d1 = ctx.create_decimal(repr(f))
    return format(d1, 'f')

print float_to_str(0.0000000456)
print float_to_str(12.345678987654321)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems to work.  It is possible to get rid of <code>numpy</code>, but the rounding would require a little more work.</p>
<pre><code>import numpy as np

SCIENTIFIC_NOTATION_WIDTH = 4

def my_format(number, n):
    places = np.log10(np.abs(number))
    if abs(places) == np.inf:
        places = 0
    highest_place = -int(places)
    if 1 &lt;= highest_place &lt; 3:
        rounded = np.round(number, n - highest_place - 1)
    elif highest_place &gt;= 3:
        rounded = np.round(number, highest_place + n - 5)
    elif -n &lt; highest_place &lt; 1:
        rounded = np.round(number, n + highest_place - 2)
    else:
        rounded = np.round(number, highest_place + n - 6)

    return "{{:{}.{}g}}".format(n,n).format(rounded)
print(my_format(12345678987654321, 10))
print(my_format(12.345678987654321,10))
print(my_format(0.0000000456,10))

#1.2346e+16
# 12.345679
#  4.56e-08
</code></pre>
</div>
<span class="comment-copy">huh, just realised this doesn't do the right thing, you want to limit output to 10 characters rather than having 10 digits of precision which is what I'm displaying.  will update</span>
<span class="comment-copy"><code>f'{v:.{length}g}'</code> gives me a syntax error?</span>
<span class="comment-copy">@Scott It's <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">Python 3.6 syntax</a>. If you are using <code>&lt;= 3.5</code> then you can replace it with <code>'{{v:.{length}g}}'.format(length=length).format(v=v)</code> (similarly for the following one).</span>
<span class="comment-copy">if you want compatibility I'd probably go with <code>%</code> formatting; something like: <code>'%.*g' % (length, v)</code> should work</span>
<span class="comment-copy">@SamMason What about <code>0.123456789</code>? It is returned unchanged, with total length 12 (&gt; 10).</span>
