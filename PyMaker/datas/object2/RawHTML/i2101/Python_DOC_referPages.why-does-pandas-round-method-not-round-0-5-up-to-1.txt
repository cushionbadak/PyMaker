<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10825926/python-3-x-rounding-behavior">Python 3.x rounding behavior</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I'm posting this with what I think is the answer because I couldn't find a similar question-answer here.</p>
<p>I expected pandas <code>round</code> method to round 0.5 up to 1.</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; pd.Series([0.5, 1.5, 2.5, 3.5, 4.5]).round()
0    0.0
1    2.0
2    2.0
3    4.0
4    4.0
dtype: float64
</code></pre>
<p>Even more strange: Python's round method has different behaviour in Python 2.7 and 3.6:</p>
<p>Python 2.7:</p>
<pre><code>&gt;&gt;&gt; [round(x) for x in [0.5, 1.5, 2.5, 3.5, 4.5]]
[1.0, 2.0, 3.0, 4.0, 5.0]
</code></pre>
<p>Python 3.6:</p>
<pre><code>&gt;&gt;&gt; [round(x) for x in [0.5, 1.5, 2.5, 3.5, 4.5]]
[0, 2, 2, 4, 4]
</code></pre>
<p>Is this something to do with floating-point representation or my platform (Mac OS X)?</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe in thisc ase it is actually intended behaviour in python, and not a floating point problem. Looking at the <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is indeed due to <a href="https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues" rel="nofollow noreferrer">floating point arithmetic</a> as described in the Python 3 <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">documentation for <code>round()</code></a> in where it states:</p>
<blockquote>
<p>The behavior of <code>round()</code> for floats can be surprising: for example, <code>round(2.675, 2)</code> gives <code>2.67</code> instead of the expected <code>2.68</code>. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float.</p>
</blockquote>
</div>
<span class="comment-copy">Thanks @root.  For whatever reason that existing question did not come up when I searched this issue - or even in the list of similar posts when I was writing the question.</span>
<span class="comment-copy">Oh, I see.  So it's not floating point representation.  Is there a reason why it is rounded to the nearest even number?  And not say towards zero or "upwards" away from zero (which I always thought it was supposed to be)?</span>
<span class="comment-copy">@Bill For the reasons, read the dupe.</span>
<span class="comment-copy">What is dupe?  I read the Python documentation again and I couldn't find the reason.  But I found an explanation <a href="https://mathematica.stackexchange.com/a/2120">here</a>: "I think the reason is to prevent biasing numbers on average upward or downward."</span>
<span class="comment-copy">@Bill, for future reference, "dupe" is short for "duplicate".</span>
<span class="comment-copy">This misses why 0.5 rounds down to 0, but 1.5 rounds up to 2. Both decimals, having sufficiently small magnitudes and with powers of 2 as denominators, have exact representations in floating point.</span>
