<div class="post-text" itemprop="text">
<p>Currently, I have an enum that represents a name/number mapping. Each EventType, however, also has additional "related properties" (e.g. a status code, and a message type).</p>
<pre><code>class EventType(Enum):
  CANCELLED = 0
  ONTIME = 1
  DELAYED = 2

  def get_status(self):
    if self == EventType.CANCELLED:
        return "statuscode1"
    elif self == EventType.DELAYED:
        return "statuscode2"
    else:
        return "statuscode3"

  def get_message_type(self):
    if self == EventType.CANCELLED:
        return "messagetype1"
    elif self == EventType.DELAYED:
        return "messagetype2"
    else:
        return "messagetype3"
</code></pre>
<p>Instead of creating the methods above and tons of if chains checking against self, is there a cleaner way of refactoring to return the status codes and message types? It's almost as if <code>CANCELLED = (0, statuscode1, messagetype1)</code>.. How can I represent this concept in an enum? Is an enum even the correct way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want the value of the <code>Enum</code> member to be <code>0</code>, <code>1</code>, or <code>2</code>, then you will need to either override <code>__new__</code>, or use <code>aenum</code>.</p>
<p>Using the <code>aenum</code> library<sup>1</sup>:</p>
<pre><code>from aenum import MultiValueEnum

class EventType(MultiValueEnum):
    _init_ = 'value status message'
    CANCELLED = 0, 'status1', 'message1'
    ONTIME = 1, 'status2', 'message2'
    DELAYED = 2, 'status3', 'message3'
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; print(EventType.ONTIME)
EventType.ONTIME
&gt;&gt;&gt; print(EventType.ONTIME.value)
1
&gt;&gt;&gt; print(EventType.ONTIME.status)
status2
&gt;&gt;&gt; print(EventType.ONTIME.message)
message2
</code></pre>
<p>See <a href="https://stackoverflow.com/a/35964875/208880"><code>this answer</code></a> for an example of how to do this with the stdlib Enum (which uses the overriding <code>__new__</code> technique).</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a tuple as the value of your <code>Enum</code> objects, and include the status and message strings together with the integer code. Then you can add methods (or <code>property</code> descriptors) to fetch individual pieces of the tuple via the <code>value</code> attribute:</p>
<pre><code>class EventType(Enum):
   CANCELLED = 0, "status1", "message1"
   ONTIME = 1, "status2", "message2"
   DELAYED = 2, "status3", "message3"

   @property
   def code(self):
       return self.value[0]

   @property
   def status(self):
       return self.value[1]

   @property
   def message(self):
       return self.value[2]

print(EventType.CANCELLED.message) # prints "message3"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4, there is a new <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Enum data type</a>, which you can use as:</p>
<pre><code>class EventType(Enum):

    def __init__(self, id, code, message):
        self.id = id
        self.code = code
        self.message = message

    CANCELLED = 1, 'code1', 'message1'
    ONTIME = 2, 'code2', 'message2'
    DELAYED = 3, 'code3', 'message3
</code></pre>
<p>To use, simply:</p>
<pre><code>EventType.CANCELLED.code # returns 'message1'
</code></pre>
<p>If it's just the use case you described, you can also use named tuple if you want:</p>
<pre><code>from collections import namedtuple

    Event = namedtuple('event', ['id', 'code', 'message'])

    class EventType:
        CANCELLED = Event(1, 'code1', 'message1')
        ONTIME = Event(2, 'code2', 'message2')
        DELAYED = Event(3, 'code3', 'message3')
</code></pre>
<p>To use this one: </p>
<pre><code>EventType.CANCELLED # return event(id=1, code='code1', message='message1')
EventType.CANCELLED.message # return message1
</code></pre>
</div>
<span class="comment-copy">How is it a duplicate question?  I already have code that represents an enum in the OP...</span>
<span class="comment-copy">I think it is duplicate because if you see some of the top answers of that question, you can find ways to implement enum in python.</span>
<span class="comment-copy">@MrAlihoseiny:  The OP is not asking how to <i>implement</i> an enum type, but how to <i>use</i> the existing <code>Enum</code> type.</span>
<span class="comment-copy">Ended up going with this approach. The other approach is nice and clean as well but this approach seemed a bit easier. Thanks!</span>
<span class="comment-copy">Neat!  This method does leave <code>member.value</code> as the tuple instead of the <code>int</code>, though.</span>
<span class="comment-copy">I'm going to try this method, as well as the aenum method answer above. Thank you both!</span>
<span class="comment-copy">Good use of <code>__init__</code>.  If the OP needs the values to be <code>0</code>, <code>1</code>, and <code>2</code>, though, you should override <code>__new__</code> instead.  See <a href="https://stackoverflow.com/a/35964875/208880"><code>my other answere here</code></a> for an example.</span>
