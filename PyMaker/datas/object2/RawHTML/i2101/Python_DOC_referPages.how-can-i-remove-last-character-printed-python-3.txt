<div class="post-text" itemprop="text">
<p>I want to remove the ',' before the '&lt;', and the last ',' that is being printed, but I'm not sure how.</p>
<p>It's like I'm repeating a print command, but I'd like the last element being printed to follow a different command.</p>
<pre><code>a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
for i in a:
  if i &lt; 5:
    print(i, end=' ,')
print('&lt;', end=' ')
for i in a:
  if i &gt; 5:
    print(i, end=' ,')
</code></pre>
<p>This is what is being printed:</p>
<pre><code>1 ,1 ,2 ,3 ,&lt; 8 ,13 ,21 ,34 ,55 ,89 ,
</code></pre>
<p>I want to remove those extra commas.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator expression with the <code>sep</code> parameter for <code>print</code> to print <code>' ,'</code> as a separator instead of an ending string.</p>
<p>Change:</p>
<pre><code>for i in a:
  if i &gt; 5:
    print(i, end=' ,')
</code></pre>
<p>to:</p>
<pre><code>print(*(i for i in a if i &gt; 5), sep=' ,', end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A bit verbose but works:</p>
<pre><code> &gt;&gt;&gt; a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
 &gt;&gt;&gt; ", ".join(str(n) for n in a if n &lt; 5) + " &lt; " + ", ".join(str(n) for n in a if n &gt;= 5)
'1, 1, 2, 3 &lt; 5, 8, 13, 21, 34, 55, 89'
</code></pre>
<p>This concatenates string and makes use of <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a> which is useful to handle such comma-separated sequences smartly</p>
</div>
<div class="post-text" itemprop="text">
<p>You can remove the last item of the array when iterating, then just print the last element at the end.</p>
<pre><code>a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
for i in a[:-1]:    # Iterate to n-1 element
  if i &lt; 5:
    print(i, end=' ,')
print('&lt;', end=' ')
for i in a[:-1]:    # Iterate to n-1 element
  if i &gt; 5:
    print(i, end=' ,')
print(a[-1])        # Print last element
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>str.join</code> method to combine combine a bunch of strings into one, separated by the string you call it on. That will let you get your numbers separated by commas without adding an extra one on the end of each loop.</p>
<p>Here's how I'd do it all in one line:</p>
<pre><code>print(" ,".join(str(n) for n in a if n &lt; 5), "&lt;", " ,".join(str(n) for n in a if n &gt; 5))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>.join(), .strip(), .replace()</code> </p>
<pre><code>s = ''.join(str(a))
s = s.strip('[]')
s = s.replace(' 5,',' &lt;')
print(s)
# 1, 1, 2, 3, &lt; 8, 13, 21, 34, 55, 89
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3249524/print-in-one-line-dynamically">Print in one line dynamically</a></span>
<span class="comment-copy">Thanks for showing me the sep feature, but i'm curious to know why is it necessary an * at the beggining of the print command</span>
<span class="comment-copy">The <code>*</code> operator is unpacking the items from the output of the generator expression so that the items can be passed as individual arguments to the <code>print</code> function. You can see <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">python.org/dev/peps/pep-0448</a> for details.</span>
