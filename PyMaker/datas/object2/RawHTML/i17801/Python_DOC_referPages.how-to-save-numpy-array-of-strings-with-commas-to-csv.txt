<div class="post-text" itemprop="text">
<p>tl;dr ANSWER: Don't use numpy. Use <code>csv.writer</code> instead of <code>numpy.savetxt</code>.</p>
<p>I'm new to Python and NumPy. It seems like it shouldn't be so difficult to save a 2D array of strings (that contain commas) to a CSV file, but I can't get it to work the way I want.</p>
<p>Let's say I have an array that looks like this (made from a list of lists):</p>
<pre><code>[['text1, text2', 'text3'],
['text4', 'text5']]
</code></pre>
<p>I want a CSV file that looks like this (or without quote characters) in Excel (pipe = cell separator):</p>
<pre><code>'text1, text2' | 'text3'
'text4'        | 'text5'
</code></pre>
<p>I'm using <code>numpy.savetxt(filename, array, fmt="%s")</code>, and I get the following CSV output (with square brackets):</p>
<pre><code>['text1, text2','text3']
['text4','text5']
</code></pre>
<p>Which displays in Excel like this:</p>
<pre><code>['text1  | text2' | 'text3']
['text4' | 'text5']
</code></pre>
<p>I tried fussing with the savetxt delimiter argument, but no change in output. </p>
<p>Do I need to do this manually? If so, let me know if there are any shortcuts I should be aware of. </p>
<p>Ultimately, I need to import the CSV into a Postgresql database. I'm not completely clear on exactly what the CSV formatting needs to be for this to work as expected, but I'm assuming if it looks wrong in Excel, it will probably end up messed up in Postgres. The <a href="http://www.postgresql.org/docs/9.3/static/sql-copy.html" rel="nofollow">Postgres documentation</a> says:</p>
<blockquote>
<p>The values in each record are separated by the DELIMITER character. If
  the value contains the delimiter character, the QUOTE character, the
  NULL string, a carriage return, or line feed character, then the whole
  value is prefixed and suffixed by the QUOTE character, and any
  occurrence within the value of a QUOTE character or the ESCAPE
  character is preceded by the escape character. You can also use
  FORCE_QUOTE to force quotes when outputting non-NULL values in
  specific columns.</p>
</blockquote>
<p>Thanks!</p>
<p>++++++++++++++++++++++++++++</p>
<p>Real input and output, in case it's relevantly different:</p>
<p>array:</p>
<pre><code>[['8908232', 'Plant Growth Chamber Facility at the Department of Botany, University of Wisconsin-Madison', 'DBI', 'INSTRUMENTAT &amp; INSTRUMENT DEVP', '1/1/90', '12/19/89', 'WI', 'Standard Grant', 'Joann P. Roskoski', '12/31/91', '$94,914.00 ', 'BIO', '1108', '', '$0.00 ']]
</code></pre>
<p>CSV output:</p>
<pre><code>['8908232', 'Plant Growth Chamber Facility at the Department of Botany, University of Wisconsin-Madison', 'DBI', 'INSTRUMENTAT &amp; INSTRUMENT DEVP', '1/1/90', '12/19/89', 'WI', 'Standard Grant', 'Joann P. Roskoski', '12/31/91', '$94,914.00 ', 'BIO', '1108', '', '$0.00 ']
</code></pre>
<p>Excel's version:</p>
<pre><code>['8908232'   'Plant Growth Chamber Facility at the Department of Botany  University of Wisconsin-Madison'    'DBI'   'INSTRUMENTAT &amp; INSTRUMENT DEVP'    '1/1/90'    '12/19/89'  'WI'    'Standard Grant'    'Joann P. Roskoski'     '12/31/91'  '$94   914.00 '     'BIO'   '1108'  ''  '$0.00 ']                  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding <code>fmt="%s"</code> doesn't put quotes around each field—the quotes are part of the Python string literal for the string <code>%s</code>, and <code>%s</code> just says that any value should be formatted as a string. If you want to force quotes around everything, you need to have quotes <em>in the format string</em>, like <code>fmt='"%s"'</code>.</p>
<p>However, even if you don't do that, the line you showed can't possibly produce the output you showed. There is no way that NumPy is changing your commas into pipe characters, or using pipe characters as delimiters. The only you can get that is by adding <code>delimiter=' |</code>'. And if you add that… it works with no changes, and you get this:</p>
<pre><code>text1, text2 | text3
text4 | text5
</code></pre>
<p>So whatever your actual problem is, it can't be the one you described.</p>
<hr/>
<p>Meanwhile, if you're trying to write CSV files for non-numeric data as flexibly as possible, the standard library's <a href="http://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module is much more powerful than NumPy. The advantage of NumPy—as the name implies—is in dealing with <em>numeric</em> data. Here's how to do it with <code>csv</code>:</p>
<pre><code>with open(filename, 'wb') as f:
    csv.writer(f).writerows(array)
</code></pre>
<p>This will default to <code>,</code> as a delimiter. Since some of your strings have <code>,</code> characters in them, by default, it will quote those strings. But you can configure the quoting/escaping behavior, the quote character, the delimiter, and all kinds of other things that NumPy can't.</p>
</div>
<span class="comment-copy">Well, this may be one of the things that Python is good for without being one of the things <i>NumPy</i> is good for. The <a href="http://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module in the stdlib is designed to handle writing and parsing all kinds of strings in CSV files in every reasonable dialect of CSV. <code>np.savetxt</code> is designed to handle writing numerical arrays to a simple CSV dialect…</span>
<span class="comment-copy">Also, you do not get that output for that code. Show us your actual code and your actual output, or we can't tell you what you actually did wrong.</span>
<span class="comment-copy">Added actual output above and clarified the question some more. Numpy.savetxt was recommended to me by someone in lab, but you're right that csv.writer is better.</span>
<span class="comment-copy">Your CSV output has brackets around each line like that? Then you've got an even bigger problem. Apparently, instead of having a 2D array, you have a 1D array of <code>list</code> objects, which NumPy is just treating as scalar objects and printing out with their <code>str</code>, which you do not want to do. But, nevertheless, you do <i>not</i> have the problem you're asking about, so I don't know why you're asking about it. If you want to solve the real problem, create a new question. If solving that problem happens to create the problem you were asking about (which I don't think it will, but it might), come back.</span>
<span class="comment-copy">I'm not sure what problem you think I'm asking about, but I had a problem, and I tried to describe it as well as I could in my question -- I added some context and changed the title based on your feedback. Sorry for the initial confusion about pipes. And, as it turns out, you helped me solve my problem. Using <code>csv.write()</code> instead of <code>numpy.savetxt()</code> gives me the output I want. So, thanks for answering the question that I may or may not have been asking about :)</span>
<span class="comment-copy">Why would <code>fmt='%s'</code> be default?  It's <code>fmt='%.18e'</code>, so the OP's <code>fmt</code> argument not only affects the output, it is required (for a string array).</span>
<span class="comment-copy">@askewchan: You're right; I thought the default was dtype-specific, but it's not. I'll edit it. But the point is, it doesn't do what he wants it to do, which is to add quotes around the fields.</span>
<span class="comment-copy">@askewchan: Of course that's ignoring the fact that his existing code doesn't have the problem he's asking us to solve anyway, so I'm not sure why we're trying to answer it…</span>
<span class="comment-copy">Haha, that's true.  Perhaps OP doesn't actually want pipes in the output but is using that as showing where the delimiter is?</span>
<span class="comment-copy">@askewchan: That's possible. But unless he specifically asked for <code>, </code> as his delimiter, he's not going to get ambiguous output in the first place. So, he's given us example code that doesn't demonstrate the example output. Maybe different example code demonstrates different example output, but if so, only because he's gone out of his way to break it…</span>
