<div class="post-text" itemprop="text">
<p>I'm new to Python and Programming as well. I know from Google's python class how to run external command using: </p>
<blockquote>
<p>(status, output) = commands.getstatusoutput(cmd)<br/>
   if status:    ## Error case, print the command's output to stderr and exit<br/>
     sys.stderr.write(output)<br/>
     sys.exit(1)</p>
</blockquote>
<p>But I perceive that <em>commands</em> module is going obsolete. I want the status and the output, so I can print the output using sys.stderr.write() if there is any error. So, is there any equivalent command in <em>subprocess</em> module? I'm currently using:</p>
<blockquote>
<p>subprocess.call(args,shell=False) now.</p>
</blockquote>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/subprocess.html#legacy-shell-invocation-functions" rel="nofollow"><code>subprocess.getstatusoutput()</code> in Python 3</a> that <a href="https://hg.python.org/cpython/file/3.4/Lib/subprocess.py#l697" rel="nofollow">could be implemented as</a>:</p>
<pre><code>from subprocess import check_output, CalledProcessError

def getstatusoutput(cmd):
    try:
        data = check_output(cmd, shell=True, universal_newlines=True, stderr=STDOUT)
        status = 0
    except CalledProcessError as ex:
        data = ex.output
        status = ex.returncode
    if data[-1:] == '\n':
        data = data[:-1]
    return status, data
</code></pre>
<p>Both return <code>status</code> that is different from the original <code>commands.getstatusoutput()</code>. See <a href="http://bugs.python.org/issue23508" rel="nofollow">Python Issue: Document &amp; unittest the subprocess.getstatusoutput() status value</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's also possible to do this, with a bit less code</p>
<pre><code>from subprocess import Popen, PIPE

def getstatusoutput(command):
    process = Popen(command, stdout=PIPE)
    out, _ = process.communicate()
    return (process.returncode, out)

code, out = getstatusoutput(["echo", "some text"])
print code
print out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow">Popen</a> is a nice and easy way to do it:</p>
<pre><code>from subprocess import Popen, PIPE

def local(command):
    print 'local', local
    process = Popen(command.split(), stdout=PIPE, stderr=PIPE)
    out = process.stdout.read()
    err = process.stderr.read()
    print 'out', out
    print 'err', err
    returncode = process.wait()
    if returncode:
        raise Exception(returncode, err)
    else:
        return out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What <code>getstatusoutput</code> does is gather both <code>stdout</code> and <code>stderr</code> output interleaved in one variable. This will quite closely replicate the <em>actual</em> behaviour of <code>getstatusoutput</code> on those where it does not exist (<code>getstatusoutput</code> and the whole <code>commands</code> module was removed on Python 3 completely), excepting the newline behaviour. The resulting data is in <code>bytes</code>.</p>
<pre><code>def getstatusoutput(cmd):
    subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    out, _ = process.communicate()

    if out[-1:] == b'\n':
        out = out[:-1]

    return (process.returncode, out)
</code></pre>
<p>This function returns <code>bytes</code> on Python 3 on purpose, as the Python 2 version returns <code>str</code></p>
</div>
<span class="comment-copy"><code>subprocess.check_output</code> in a <code>try</code> block would be the closest equivalent.</span>
<span class="comment-copy">your code deadlocks if the child process generates enough output to fill stderr's OS pipe buffer.</span>
<span class="comment-copy">Unfortunately this is wrong answer.</span>
<span class="comment-copy">it does not replicate actual behavior: <a href="http://stackoverflow.com/a/28483026/4279">you need to trim the newline (and return text on Python 3)</a>.</span>
<span class="comment-copy">this also returns a <a href="http://bugs.python.org/issue23508" rel="nofollow noreferrer">different status</a></span>
