<div class="post-text" itemprop="text">
<p>I'm trying to avoid using so many if statements and comparisons and simply use a list, but not sure how to use it with <code>str.startswith</code>:</p>
<pre><code>if link.lower().startswith("js/") or link.lower().startswith("catalog/") or link.lower().startswith("script/") or link.lower().startswith("scripts/") or link.lower().startswith("katalog/"):
    # then "do something"
</code></pre>
<p>What I would like it to be is:</p>
<pre><code>if link.lower().startswith() in ["js","catalog","script","scripts","katalog"]:
    # then "do something"
</code></pre>
<p>Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.startswith</code> allows you to supply a tuple of strings to test for:</p>
<pre><code>if link.lower().startswith(("js", "catalog", "script", "katalog")):
</code></pre>
<p>From the <a href="http://docs.python.org/3/library/stdtypes.html#str.startswith">docs</a>:</p>
<blockquote>
<p><code>str.startswith(prefix[, start[, end]])</code></p>
<p>Return <code>True</code> if string starts with the <code>prefix</code>, otherwise return <code>False</code>. <strong><code>prefix</code> can also be a tuple of prefixes to look for.</strong> </p>
</blockquote>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; "abcde".startswith(("xyz", "abc"))
True
&gt;&gt;&gt; prefixes = ["xyz", "abc"]
&gt;&gt;&gt; "abcde".startswith(tuple(prefixes)) # You must use a tuple though
True
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="http://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any()</code></a>, <a href="http://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map()</code></a> like so:</p>
<pre><code>if any(map(l.startswith, x)):
    pass # Do something
</code></pre>
<p>Or alternatively, using <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>:</p>
<pre><code>if any([l.startswith(s) for s in x])
    pass # Do something
</code></pre>
</div>
<span class="comment-copy">The answers to this question remind me of why I love Python so much!</span>
<span class="comment-copy">And if it didn't support this, you could do it anyway with <code>any</code> and a genexp.</span>
<span class="comment-copy">Counterfactual conditional, not "maybe the OP is on an old version".</span>
