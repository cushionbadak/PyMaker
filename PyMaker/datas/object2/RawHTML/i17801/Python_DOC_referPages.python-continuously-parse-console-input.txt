<div class="post-text" itemprop="text">
<p>I am writing a little Python script that parses the input from a QR reader (which is seen as a keyboard by the system).</p>
<p>At the moment I am using <code>raw_input()</code> but this function waits for an EOF/end-of-line symbol in order to submit the received string to the program.
I am wondering if there is a way to continuously parse the input string and not just in chunks limited by a line end.</p>
<p>In practice:
- is there a way in python to asynchronously and continuously parse a console input ?
- is there a way to change <code>raw_input()</code> (or an equivalent function) to look for another character in order to submit the string read into the program?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you're generally trying to solve two problems:</p>
<ol>
<li>Read input in chunks</li>
<li>Parse that input asynchronously</li>
</ol>
<p>For the first part, it will vary greatly based on the specifics of the input function your calling, but for standard input you could use something like </p>
<pre><code>sys.stdin.read(1)
</code></pre>
<p>As for parsing asynchronously, there are a number of approaches you could take. Python is synchronous, so you will necessarily have to involve some subprocess calls. Manually spawning a function using <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow" title="the subprocess library">the subprocess library</a> is one option. You could also use something like Redis or some lightweight job queue to pop input chunks on and have them read and processed by another background script. Finally, <a href="http://www.gevent.org/" rel="nofollow">gevent</a> is a very popular coroutine based library for spawning asynchronous processes. Using gevent, this whole set up would look something like this:</p>
<pre><code>class QRLoader(object):
    def __init__(self):
        self.data = []

    def add_data(data):
        self.data.append(data)

        # if self._data constitutes a full QR code
        # do something with data
        gevent.spawn(parse_async)

def parse_async():
    # do something with qr_loader.data

qr_loader = QRLoader()

while True:
    data = sys.stdin.read(1)
    if data:
        qr_loader.add_data(data)
</code></pre>
</div>
<span class="comment-copy">You might try <a href="http://docs.python.org/3/library/curses.html#curses.window.getch" rel="nofollow noreferrer"><code>curses.window.getch</code></a> in no-delay mode.</span>
<span class="comment-copy">What is responsible for handling IO with this device?  I think you need to run that component in a subprocess</span>
<span class="comment-copy">Does the QR reader driver software have an API function for retrieving individual characters? Also there may be an OS-dependent way to read single characters from input sources, like <code>msvcrt.getch()</code> on Windows for reading keyboard characters.</span>
<span class="comment-copy">maybe this helps: <a href="http://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user" title="python read a single character from the user">stackoverflow.com/questions/510357/â€¦</a></span>
<span class="comment-copy">What operating system is this?</span>
