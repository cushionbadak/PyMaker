<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1550479/python-is-using-vars-locals-a-good-practice">Python: is using “..%(var)s..” % locals() a good practice?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>This is not a duplicate, as this regards using the newer <code>str.format()</code>, <em>the above linked question is also of lower quality,</em> and I think this question is sufficiently different to justify its canonicity.</p>
<p>The question:</p>
<p>One might expect an error here, but we can provide the <code>str.format</code> method with unused keyword arguments.</p>
<pre><code>&gt;&gt;&gt; '{a}{b}'.format(a='foo', b='bar', c='baz')
'foobar'
</code></pre>
<p>This enables code like:</p>
<pre><code>&gt;&gt;&gt; foo = 'bar'
&gt;&gt;&gt; baz = 'fizzbuzz'
&gt;&gt;&gt; '{foo}{baz}'.format(**locals())
'barfizzbuzz'
&gt;&gt;&gt; baz = datetime.datetime.now()
&gt;&gt;&gt; '{foo}_{baz}'.format(**locals())
'bar_2013-12-20 18:36:55.624000'
</code></pre>
<p><strong>Is this a good practice to do inside a closure like a function?</strong></p>
<pre><code>def make_foo_time_string():
    foo = 'bar'
    baz = datetime.datetime.now()
    return '{foo}{baz}'.format(**locals())
</code></pre>
<p>What would be the possible downsides? Extra variables loaded using extra cycles? Is this a matter of convenience? <strong>I don't recall seeing this used much, would it be considered idiomatic of Python?</strong></p>
<p><strong>Update</strong> I have found a canonical suggested usage using the old style string interpolation: <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips" rel="nofollow">https://wiki.python.org/moin/PythonSpeed/PerformanceTips</a>
Nevertheless, it does seem a rather old document.</p>
<blockquote>
<p>"Even better, for readability (this has nothing to do with efficiency other than yours as a programmer), use dictionary substitution:"</p>
</blockquote>
<pre><code>out = "&lt;html&gt;%(head)s%(prologue)s%(query)s%(tail)s&lt;/html&gt;" % locals()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://www.python.org/dev/peps/pep-0020/" rel="nofollow">PEP 20</a> - The Zen of Python:</p>
<blockquote>
<p>Explicit is better than implicit.</p>
</blockquote>
<p>Here, that could (and to me, <em>does</em>) mean that it's better to spell out what you want to do. Suppose you eventually want to replace that with a method call and go from</p>
<pre><code>&gt;&gt;&gt; '{a}{b}'.format(a='foo', b='bar', c='baz')
</code></pre>
<p>to</p>
<pre><code>&gt;&gt;&gt; mymethod(a='foo', b='bar', c='baz')
</code></pre>
<p>Voila - done. But more practically, PyLint and friends can give you valuable information about the explicit version. Suppose you have:</p>
<pre><code>foo = '123'
print '{foo}'.format(**locals())
</code></pre>
<p>Great. That works. But what if you forgot to assign to <code>foo</code>? Your code will blow up and you won't know why. Compare with:</p>
<pre><code>print '{foo}'.format(foo=foo)
</code></pre>
<p>where PyLint will give you an "Undefined name: 'foo'" error. Yay! Bug found before you've even started to look for it.</p>
<p>In general, be explicit. It's Pythonic, but it's also really good practice.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What would be the possible downsides? Extra variables loaded using extra cycles? Is this a matter of convenience? I don't recall seeing this used much, would it be considered idiomatic of Python?</p>
</blockquote>
<p>You just hit on the biggest downside: It's not idiomatic.</p>
<p>And the <em>reason</em> it's not idiomatic is, as the <a href="http://www.python.org/dev/peps/pep-0020/">Zen</a> says, "Explicit is better than implicit."</p>
<p>Obviously many people would not write <code>'{foo}{baz}'.format(foo=foo, baz=baz)</code> (especially if you get too far beyond 2 variables), because that violates DRY pretty horribly… but there's a way to do this that's just as concise as your code, and at least as explicit, and doesn't require sort-of-advanced-level knowledge like <code>locals</code>:</p>
<pre><code>&gt;&gt;&gt; '{}{}'.format(foo, baz)
</code></pre>
<p>This doesn't work when the format string is dynamic, but that's a <em>good</em> thing, because dynamic format strings are usually a red flag.</p>
<p>(Some people have also argued the "static-checking" benefit here—if you embed the names in the format string, you get a much less decipherable error than the simple <code>NameError</code> from using a variable that doesn't exist in the arguments to <code>format</code>. I put this in parentheses near the bottom because I personally don't think this argument is very good, even if I have seen it multiple times…)</p>
<p>However, as with any style/idiom question, there is no universal agreement on this one, and it gets debated regularly on python-list (and python-ideas, when someone suggests a way to make <code>locals()</code> a default for <code>format</code> or the like) until everyone stops paying attention.</p>
</div>
<span class="comment-copy">There's a new and canonical way in 3.6: formatted string literals: <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498</a> or  <a href="https://stackoverflow.com/a/44442301/1144854">stackoverflow.com/a/44442301/1144854</a></span>
<span class="comment-copy">Is there a downside? I would say so, but only if the message to be formatted could ever be a variable itself. That is to say, if someone can pass you the string to format, they can basically execute arbitrary code in the form of the <code>__str__</code> (and <code>__repr__</code>?) methods of all local variables.</span>
<span class="comment-copy">You're sticking the strings <code>'foo'</code>, <code>'bar'</code>, and <code>'baz'</code> into the format string instead of the local variables <code>foo</code>, <code>bar</code>, and <code>baz</code> as in the original post. The most Pythonic way to do what you're doing is probably just <code>'foobar'</code> without using <code>format</code>…</span>
<span class="comment-copy">I can't agree more.</span>
<span class="comment-copy">I like debugging using <code>print("foo is {foo} bar is {bar} baz is {baz}".format(foo=foo,bar=bar,baz=baz))</code> is great to track down the errant variable ("Oh oops, no wonder my loop is terminating early, I used i**=2 instead of i*=2") and what have you. print(foo,bar,baz) is not as helpful for that.</span>
<span class="comment-copy">@adsmith: Except of course when you type <code>print("foo is {foo} bar is {baz}"</code>… and don't notice the typo in your quickly-written debugging statement. Not that I've ever wasted 6 hours of a day on a stupid bug like that. :)</span>
<span class="comment-copy">@abarnert I was going for the simplest possible example, just for the sake of getting the idea across. Yeah, that'd be a very heavyweight way to write that string. Don't do that. :-D</span>
