<div class="post-text" itemprop="text">
<p>I'm trying to create a system on Python that allows me to create a list called (user)total, 'user' being the name of the user before total. However this is subjective as any account with any username could be made within my program. </p>
<p>I have tried to use 
<code>%stotal = [''] %user</code>
however this comes up with a syntax error. How would I manage to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do that kind of meta-programming in python! (not with the syntax you posted)
But instead you can create a dictionary of lists indexed by the user name:</p>
<pre><code>total = {}
total['username1'] = [''] #list for this username total
total['username2'] = [''] 
</code></pre>
<p>etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>It <em>is</em> possible.  Hopefully seeing how will help to illustrate why, as Hyperboreus says, it's not a good idea.</p>
<p>If you do <code>dir()</code> in your interactive Python environment, you'll get a list of names that are available in your current scope.  There will always be one called <code>__builtins__</code>, which exposes all of the functions and constants in the <a href="http://docs.python.org/3/library/builtins.html" rel="nofollow">builtins</a> module.  These functions and constants are defined to be exactly the same ones that are available right from the start of your Python session in the global namespace, which you can take a look at with the builtin function <code>globals()</code>.</p>
<p>In accordance with the <a href="http://docs.python.org/2/reference/datamodel.html" rel="nofollow">Python data model</a>, every Python object has an element named <code>__dict__</code> that's a <a href="http://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="nofollow">dictionary object</a> whose keys are member names.  If <code>obj</code> is the name of some Python object in the current scope, <code>obj.__dict__["keyname"]</code> will access the same member that you could get to more simply through <code>obj.keyname</code>.  </p>
<p>So putting this together, you can set key/value pairs in <code>__builtins__.__dict__</code> directly:</p>
<pre><code>&gt;&gt;&gt; __builtins__.__dict__["testvarname"] = "testval"
&gt;&gt;&gt; print testvarname
testval
</code></pre>
<p>Whew!  Getting pretty abstract pretty quick here.  This might be useful for defining behavior based on user input or something else that you might not know until runtime... but you can probably see how you're working through a lot of complexity to get there and sort of circumventing the normal rules that Python sets out to try to help you keep your programs organized and easy to understand.  xndrme's answer is likely to be the more straightforward way to solve the bigger problem you're facing.</p>
</div>
<span class="comment-copy">Use a dictionary. Don't try to put data into variable names.</span>
<span class="comment-copy">You well can, but in most cases you shouldn't.</span>
<span class="comment-copy">Yes of course you can but not in the way it's posted</span>
<span class="comment-copy">ah I see, so then for the usernames I'll be able to use %s and add them to the dictionary in that way?</span>
<span class="comment-copy">Yes, but that depends of your logic :)</span>
<span class="comment-copy">I left an explanation in my answer of how you could do it the other way if you really want to, and why it's a bad idea.</span>
<span class="comment-copy">It's my answer! :)</span>
<span class="comment-copy">No problem its just funny ;)</span>
