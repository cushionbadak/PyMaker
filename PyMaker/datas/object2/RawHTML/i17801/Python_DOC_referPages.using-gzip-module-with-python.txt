<div class="post-text" itemprop="text">
<p>I'm trying to use the Python GZIP module to simply uncompress several .gz files in a directory. Note that I do not want to read the files, only uncompress them. After searching this site for a while, I have this code segment, but it does not work:</p>
<pre><code>import gzip
import glob
import os
for file in glob.glob(PATH_TO_FILE + "/*.gz"):
    #print file
    if os.path.isdir(file) == False:
        shutil.copy(file, FILE_DIR)
        # uncompress the file
        inF = gzip.open(file, 'rb')
        s = inF.read()
        inF.close()
</code></pre>
<p>the .gz files are in the correct location, and I can print the full path + filename with the print command, but the GZIP module isn't getting executed properly. what am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you get no error, the gzip module probably <strong>is</strong> being executed properly.</p>
<blockquote>
<p>I do not want to read the files, only uncompress them</p>
</blockquote>
<p>The <code>gzip</code> module doesn't work as a desktop archiving program like 7-zip - you can't "uncompress" a file without "reading" it. What you probably mean by "uncompress" is more accuratelly described - from a programming viewpoint - as "read a stream from a compressed file, and write it to a new file".</p>
<pre><code>inF = gzip.open(file, 'rb')
s = inF.read()
inF.close()
</code></pre>
<p>Here, you're just reading the stream. You just need to write it to a new file:</p>
<pre><code>inF = gzip.open(file, 'rb')
outF = open(outfilename, 'wb')
outF.write( inF.read() )
inF.close()
outF.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>with</code> to open files and, of course, store the result of reading the compressed file. See <a href="https://docs.python.org/3/library/gzip.html#gzip.open" rel="noreferrer"><code>gzip</code> documentation</a>:</p>
<pre><code>import gzip
import glob
import os
import os.path

for gzip_path in glob.glob("%s/*.gz" % PATH_TO_FILE):
    if not os.path.isdir(gzip_path):
        with gzip.open(gzip_path, 'rb') as in_file:
            s = in_file.read()

        # Now store the uncompressed data
        path_to_store = gzip_fname[:-3]  # remove the '.gz' from the filename

        # store uncompressed file data from 's' variable
        with open(path_to_store, 'w') as f:
            f.write(s)
</code></pre>
<p>Depending on what exactly you want to do, you might want to have a look at <a href="https://docs.python.org/2/library/tarfile.html#tarfile.open" rel="noreferrer"><code>tarfile</code></a> and its <code>'r:gz'</code> option for opening files.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're decompressing file into <code>s</code> variable, and do nothing with it. You should stop searching stackoverflow and read at least python tutorial. Seriously.</p>
<p>Anyway, there's several thing wrong with your code:</p>
<ol>
<li><p>you need is to STORE the unzipped data in <code>s</code> into some file.</p></li>
<li><p>there's no need to copy the actual <code>*.gz</code> files. Because in your code, you're unpacking the original gzip file and not the copy.</p></li>
<li><p>you're using <code>file</code>, which is a reserved word, as a variable. This is not
an error, just a very bad practice.</p></li>
</ol>
<p>This should probably do what you wanted:</p>
<pre><code>import gzip
import glob
import os
import os.path

for gzip_path in glob.glob(PATH_TO_FILE + "/*.gz"):
    if os.path.isdir(gzip_path) == False:
        inF = gzip.open(gzip_path, 'rb')
        # uncompress the gzip_path INTO THE 's' variable
        s = inF.read()
        inF.close()

        # get gzip filename (without directories)
        gzip_fname = os.path.basename(gzip_path)
        # get original filename (remove 3 characters from the end: ".gz")
        fname = gzip_fname[:-3]
        uncompressed_path = os.path.join(FILE_DIR, fname)

        # store uncompressed file data from 's' variable
        open(uncompressed_path, 'w').write(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was able to resolve this issue by using the subprocess module:</p>
<pre><code>for file in glob.glob(PATH_TO_FILE + "/*.gz"):
    if os.path.isdir(file) == False:
        shutil.copy(file, FILE_DIR)
        # uncompress the file
        subprocess.call(["gunzip", FILE_DIR + "/" + os.path.basename(file)])
</code></pre>
<p>Since my goal was to simply uncompress the archive, the above code accomplishes this. The archived files are located in a central location, and are copied to a working area, uncompressed, and used in a test case. the GZIP module was too complicated for what I was trying to accomplish.</p>
<p>Thanks for everyone's help. It is much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think there is a much simpler solution than the others presented given the op only wanted to extract all the files in a directory:</p>
<pre><code>import glob
from setuptools import archive_util

for fn in glob.glob('*.gz'):
  archive_util.unpack_archive(fn, '.')
</code></pre>
</div>
<span class="comment-copy">Is the file ok? You don't show what is/isn't happening.</span>
<span class="comment-copy">Yes, the file is ok. I can uncompress the file using gunzip onthe UNIX command line.</span>
<span class="comment-copy">No error occurs when I run the Python script, but the gzip file isn't uncompressed. I only want to uncompress the file so it can be used by another tool, not re-written to a file, or used elsewhere in my script.</span>
<span class="comment-copy">@user3111358 What do mean, <i>exactly</i> by "the gzip file isn't uncompressed"? What makes you say so? Have you checked the contents of <code>s</code> in your code?</span>
<span class="comment-copy">What I mean is the gzip file isn't uncompressed, which is what I am trying to do. I ONLY want to uncompress, nothing else.</span>
<span class="comment-copy">@user3111358 What I'm trying to say is that "uncompress" means different things in different contexts. My bet is that if you ask a few people who've read your code here on SO, they'll tell you the file <b>is</b> being uncompressed. Thus, I must ask: how do you <b>know</b> the file is not being "uncompressed"? Is it because there are no new files being put on the same directory as the compressed file when you run the code?</span>
<span class="comment-copy">This is the correct answer. When you decompress a file it is written to a new file and the previous compressed file is either deleted as another action, or the the compressed file is maintained. Either way, a new uncompressed file is written.</span>
<span class="comment-copy">It would be nicer to use <code>os.path.splitext(gzip_fname)[0]</code> to remove the <code>.gz</code> extension</span>
<span class="comment-copy">your example is wrong, <code>gzip_fname</code> doesn't exist, you have to change it to <code>gzip_path</code>. Furthermore, what you get into <code>gzip_path</code> is not a path, it's the gz file. Therefore you should change <code>os.path.isdir</code> to <code>os.path.isfile</code> I also think that to use @gotson solution is nicer :)</span>
<span class="comment-copy">When you call <code>open(uncompressed_path, 'w').write(s)</code> without assigning the file handler to a variable there is no need to close the file handler?</span>
<span class="comment-copy">@Ander - yes, because the (anonymous) file object will never be assigned to a variable and therefore it will be destroyed immediately after executing. I find it much cleaner for simple "write xy to file" or "read from file" - that is when there is <i>exactly</i> one read or write. But if you do more than one read/write, you should probably always use <code>with open(...):</code></span>
<span class="comment-copy">Yes, if you don't need to programmatically manipulate the contents of the code and don't mind if it isn't interoperable between OSes, then this is a much more intuitive way to approach things.</span>
<span class="comment-copy">Archive_util.unpack_archive does not seem to support .gz. The error message is "setuptools.archive_util.UnrecognizedFormat: Not a recognized archive type: K:\z_temp\file.gz". Also shutil.upack_archive does not support .gz. To see the supported types of files for shutil_unpack_archive: <code>import shutil; print(shutil.get_archive_formats())</code></span>
