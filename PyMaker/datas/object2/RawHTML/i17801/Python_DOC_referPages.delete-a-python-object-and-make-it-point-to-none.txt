<div class="post-text" itemprop="text">
<p>Here is my class definition :</p>
<pre><code>class Playingsound:
    def ___init___(self):
        # blah

    def fadeout_and_stop(self):
        # do somthing (fadeout during 100 ms)
        del self
</code></pre>
<p>Here is my problem (similar to that one : <a href="https://stackoverflow.com/questions/293431/python-object-deleting-itself">Python object deleting itself</a>) :</p>
<pre><code>&gt;&gt;&gt; a = Playingsound()
&gt;&gt;&gt; time.sleep (1.0)
&gt;&gt;&gt; a.fadeout_and_stop()
&gt;&gt;&gt; time.sleep (1.0)    # after 1 second, the playback should be finished !
&gt;&gt;&gt; a
&lt;__main__.Playingsound instance at 0x01F23170&gt;
</code></pre>
<p>Instead of this, I would like <code>a</code> to be totally destroyed after the call of <code>fadeout_and_stop</code>, and its reference to be <code>None</code> :</p>
<pre><code>&gt;&gt;&gt; a
&lt;None&gt;
</code></pre>
<p>How to do this with Python ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot, not without looping through <strong>all</strong> references in the garbage collector and testing each and every one if it is a reference to <em>this</em> object, then setting that reference to <code>None</code>. You don't want to go there. Remember: you can have more than one reference to your object:</p>
<pre><code>a = A()
b = a
a.finish()  # what should be set to `None` now? a, b or both?
</code></pre>
<p>Instead of <code>a.finish()</code>, do <code>del a</code>, perhaps combined with implementing a <a href="http://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow"><code>__del__</code> clean-up hook</a>.</p>
<p>If you need to have your object cleaned up after a timeout, <strong>add</strong> your object to a global list, and remove it from that list when done playing. The list can be on the class itself:</p>
<pre><code>class Playingsound:
    playing = []

    def fadeout_and_stop(self):
        Playingsound.playing.append(self)
        # do somthing (fadeout during 100 ms)
        Playingsound.playing.remove(self)
</code></pre>
<p>then if there are no other references to the instance Python will take care of cleaning it up for you:</p>
<pre><code>a = Playingsound()
a.fadeout_and_stop()
del a
</code></pre>
<p>You can always access any sounds still playing via <code>Playingsound.playing</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just try to print self after "del self" statement in finish function,by doing this you will get error because of python memory management. After creating 'a' object to class A, this object 'a' will be tagged to some memory location, When you are calling finish() you are passing reference of 'a' object. So when u use del self just memory reference will be untagged to the object, But still our object is 'a' is pointing to that memory location. you need untag all references in order to destroy tha object.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can't destroy an object in python. It's the garbage collector's job. What you can do, is to change a reference to None or delete the reference. But if the object still has other links of reference, it will stay in the memory unharmed. Look at this example,</p>
<pre><code>class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
if __name__=='__main__':
    l1=ListNode(9)
    t=ListNode(8)
    l1.next=t
    l2=ListNode(1)
    s=Solution()
    r=s.addTwoNumbers(l1,l2)
    del t #not similar to t=None, this will fully destroy the existence
          #of the reference t, while t=None will only set the reference 
          #to None
    print l1.next.val #this will give the value 8
    print t #this line will give an error as reference t has no 
            #existence anymore
</code></pre>
<p>look the object that has a value 8 (created at the line, t=ListNode(8)) is still alive. We only destroyed the reference of t. But the actual object is at the hand of python's garbage collector. Only if we delete the other reference link (l1.next) then the object will lose all the reference links and will become an garbage and then python will destroy it completely from the memory. So while you have full control over the reference, you don't have control over the actual object.</p>
</div>
<span class="comment-copy">What is the actual problem you are trying to solve here? Why can't you write <code>del a</code> instead of <code>a.finish()</code>?</span>
<span class="comment-copy">You cannot, not without looping through <b>all</b> references in the garbage collector and testing each and every one if it is a reference to <i>this</i> object, then setting that reference to <code>None</code>. You don't want to go there.</span>
<span class="comment-copy">As a small point - if you aren't doing anything in a method, you don't need to define it just to add <code>pass</code> in the body. Also, the method is <code>__init__</code> (note two <code>_</code> you have three <code>_</code>). Like @NPE I am also curious as to why you need this.  If you are trying to write a deconstructor - that is not required in Python as the GC does a good job of keeping names only when needed.</span>
<span class="comment-copy"><code>A</code> is a class for a currently playing sound buffer. <code>finish</code> is my "stop playback" method. When somebody does <code>finish</code> I would to do things (apply a fadeout, still play for 100 ms) and then <code>delete</code> the <code>A</code> sound object.</span>
<span class="comment-copy">In your player class (which I assume has a list of "tracks" to play), simply delete that object from the list of tracks once its done playing, something like <code>self.track_list.pop()</code>. The rest will be handled by Python automatically.</span>
<span class="comment-copy">thank you for your answer. I modified slightly the initial question, in order to make it more understandable.</span>
<span class="comment-copy">Thank you! If I do <code>a.fadeout_and_stop()</code> and immediately, the next line : <code>del a</code>,  there will be no time for the <code>fadeout</code> to be done, right ?</span>
<span class="comment-copy">@Basj: You only removed the reference from <code>a</code>, but <code>Playingsound.playing</code> still holds a reference to the object, so object will not yet be deleted from memory.</span>
<span class="comment-copy">So if I sum the idea : I don't need to deal with such things, the garbage collector will do things for me ? i.e. the object will be deleted from memory once there is no more reference to it ?</span>
<span class="comment-copy">@Basj: <b>Exactly</b>. Python takes care of cleanup <i>for you</i>.</span>
