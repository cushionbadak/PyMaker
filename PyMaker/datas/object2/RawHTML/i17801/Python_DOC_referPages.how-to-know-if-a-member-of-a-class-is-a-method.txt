<div class="post-text" itemprop="text">
<p>What's the most pythonic way to know if a member of a class is a method? Note: I had only the name of the (posssible) method (could be a <em>class method</em>, an <em>instance method</em> or a <em>static method</em>).</p>
<p>Currently I'm comparing the type of the object in the dictionary of the class with <code>&lt;type 'function'&gt;</code>:</p>
<pre><code>def isMethodOf(methodName,klass):
    return type(klass.__dict__.get(methodName)) == type(lambda x:x)
</code></pre>
<p>I really don't know if this will work on all the cases.
The <code>type(lambda x:x)</code> part is just for getting the type <code>&lt;type 'function'&gt;</code>, Is there a better way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2, use <a href="http://docs.python.org/2/library/inspect.html#inspect.ismethod" rel="nofollow"><code>inspect.ismethod()</code></a>:</p>
<pre><code>return inspect.ismethod(getattr(klass, methodName))
</code></pre>
<p>For Python 3, unbound methods are gone, and you'd use <a href="http://docs.python.org/3/library/inspect.html#inspect.isfunction" rel="nofollow"><code>inspect.isfunction()</code></a> instead.</p>
<p>You can also use the <a href="http://docs.python.org/2/library/types.html#types.MethodType" rel="nofollow"><code>types.MethodType</code> type object</a> to test against:</p>
<pre><code>import types

isinstance(getattr(klass, methodName), types.MethodType)
</code></pre>
<p>Both tests work for <code>@classmethod</code> methods and regular methods. <em>By design</em> these tests fail for <code>@staticmethod</code> methods; those are just functions that resist binding (<code>cls.staticmethod.__get__(instance, cls)</code> returns the function itself). You can test for functions with <a href="http://docs.python.org/2/library/inspect.html#inspect.isfunction" rel="nofollow"><code>inspect.isfunction()</code></a>, or use <code>isinstance(obj, (types.MethodType, types.FunctionType))</code> to catch all 3 in one test.</p>
<p>If all you wanted is to test if something is <em>callable</em>, you could use the <a href="http://docs.python.org/2/library/functions.html#callable" rel="nofollow"><code>callable()</code> function</a>. It'll work even if the object is an instance with a <code>__call__</code> method:</p>
<pre><code>&gt;&gt;&gt; class MyCallable(object):
...     def __call__(self):
...         return "Hello World!"
... 
&gt;&gt;&gt; mc = MyCallable()
&gt;&gt;&gt; callable(mc)
True
&gt;&gt;&gt; mc()
'Hello World!'
</code></pre>
<p>Using <code>callable()</code> works on all 3 method 'types' as well as custom objects such as the above. Note that <em>classes</em>, being factories, are callable too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use callable on it.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; def func(): pass
&gt;&gt;&gt; callable(func)
&gt;&gt;&gt; True
</code></pre>
</div>
<span class="comment-copy"><a href="http://docs.python.org/2/library/inspect.html#inspect.ismethod" rel="nofollow noreferrer"><code>inspect.ismethod</code></a></span>
<span class="comment-copy">Great! but, Which one do you recommend? All will work well in the three cases?</span>
<span class="comment-copy">Just curious - The OP's original code will not throw an error if the method does not exist.  Hence, wouldn't it be better to do <code>getattr(klass, methodName, None)</code> to keep this functionality?  Or am I wrong?</span>
<span class="comment-copy">@iCodez: Sure, you can use a default and that'll work. That's not what I am focusing on however, as that is a small detail somewhat orthogonal to the issue at hand.</span>
<span class="comment-copy">If you use <code>callable()</code>, remember that <i>classes are callable.</i></span>
<span class="comment-copy">@kindall: good point, added.</span>
