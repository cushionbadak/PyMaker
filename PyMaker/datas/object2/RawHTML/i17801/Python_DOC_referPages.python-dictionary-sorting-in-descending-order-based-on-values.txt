<div class="post-text" itemprop="text">
<p>I want to sort this dictionary d based on value of sub key key3 in descending order. See below:</p>
<pre><code>d = { '123': { 'key1': 3, 'key2': 11, 'key3': 3 },
      '124': { 'key1': 6, 'key2': 56, 'key3': 6 },
      '125': { 'key1': 7, 'key2': 44, 'key3': 9 },
    }
</code></pre>
<p>So final dictionary would look like this.</p>
<pre><code>d = { '125': { 'key1': 7, 'key2': 44, 'key3': 9 },
      '124': { 'key1': 6, 'key2': 56, 'key3': 6 },
      '123': { 'key1': 3, 'key2': 11, 'key3': 3 },
    }
</code></pre>
<p>My approach was to form another dictionary e from d, whose key would be value of key3 and then  use reversed(sorted(e)) but since value of key3 can be same, so dictionary e lost some of the keys and their values. makes sense?</p>
<p>How I can accomplish this? This is not a tested code. I am just trying to understand the logic.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="noreferrer">Dictionaries do not have any inherent order</a>. Or, rather, their inherent order is "arbitrary but not random", so it doesn't do you any good.</p>
<p>In different terms, your <code>d</code> and your <code>e</code> would be exactly equivalent dictionaries.</p>
<p>What you can do here is to use an <a href="http://docs.python.org/3/library/collections.html#ordereddict-objects" rel="noreferrer"><code>OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict
d = { '123': { 'key1': 3, 'key2': 11, 'key3': 3 },
      '124': { 'key1': 6, 'key2': 56, 'key3': 6 },
      '125': { 'key1': 7, 'key2': 44, 'key3': 9 },
    }
d_ascending = OrderedDict(sorted(d.items(), key=lambda kv: kv[1]['key3']))
d_descending = OrderedDict(sorted(d.items(), 
                                  key=lambda kv: kv[1]['key3'], reverse=True))
</code></pre>
<p>The original <code>d</code> has some arbitrary order. <code>d_ascending</code> has the order you <em>thought</em> you had in your original <code>d</code> but didn't. And <code>d_ascending</code> has the order you want for your <code>e</code>.</p>
<hr/>
<p>If you don't really need to use <code>e</code> as a dictionary, you just want to be able to iterate over the elements of <code>d</code> in a particular order, you can simplify this:</p>
<pre><code>for key, value in sorted(d.items(), key=lambda kv: kv[1]['key3'], reverse=True):
    do_something_with(key, value)
</code></pre>
<hr/>
<p>If you want to maintain a dictionary in sorted order across any changes, instead of an <code>OrderedDict</code>, you want some kind of sorted dictionary. There are a number of options available that you can find on PyPI, some implemented on top of trees, others on top of an <code>OrderedDict</code> that re-sorts itself as necessary, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>A short example to sort dictionary is desending order</p>
<pre><code>a1 = {'a':1, 'b':13, 'd':4, 'c':2, 'e':30}
a1_sorted_keys = sorted(a1, key=a1.get, reverse=True)
for r in a1_sorted_keys:
    print r, a1[r]
</code></pre>
<p>Following will be the output</p>
<pre><code>e 30
b 13
d 4
c 2
a 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can make use of the below code for sorting in descending order and storing to a dictionary:</p>
<pre><code>        listname = []  
        for key, value in sorted(dictionaryName.iteritems(), key=lambda (k,v): (v,k),reverse=True):  
            diction= {"value":value, "key":key}  
            listname.append(diction)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python dicts are not sorted, by definition.  You cannot sort one, nor control the order of its elements by how you insert them.  You might want to look at collections.OrderDict, which even comes with a little tutorial for almost exactly what you're trying to do: <a href="http://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow">http://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes</a></p>
</div>
<div class="post-text" itemprop="text">
<p>List</p>
<pre><code>dict = {'Neetu':22,'Shiny':21,'Poonam':23}
print sorted(dict.items())
sv = sorted(dict.values())
print sv
</code></pre>
<p>Dictionary</p>
<pre><code>d = []
l = len(sv)
while l != 0 :
    d.append(sv[l - 1])
    l = l - 1
print d`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the operator to sort the dictionary by values in descending order.</p>
<pre><code>import operator

d = {"a":1, "b":2, "c":3}
cd = sorted(d.items(),key=operator.itemgetter(1),reverse=True)
</code></pre>
<p>The Sorted dictionary will look like,</p>
<pre><code>cd = {"c":3, "b":2, "a":1}
</code></pre>
<p>Here, operator.itemgetter(1) takes the value of the key which is at the index 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>sort dictionary 'in_dict' by value in decreasing order</p>
<pre><code>sorted_dict = {r: in_dict[r] for r in sorted(in_dict, key=in_dict.get, reverse=True)}
</code></pre>
<p>example above </p>
<pre><code>sorted_d = {r: d[r] for r in sorted(d, key=d.get('key3'), reverse=True)}
</code></pre>
</div>
<span class="comment-copy">For future reference, remember that <code>dict</code>(s) in almost any language are inherently unsorted by definition. Most key/value mapping data types are. Please either accept abarnert or ohn Zwinck's answer(s).</span>
<span class="comment-copy">cd won't be a dictionary. It'll be list of tuples.</span>
