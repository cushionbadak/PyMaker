<div class="post-text" itemprop="text">
<p>I have three lists that contain x,y and z positions. For example:</p>
<pre><code>x = [10,20,1]
y = [10,15,2]
z = [12,23,3]
</code></pre>
<p>I want to create a list using these that looks like:</p>
<pre><code>xyz = [[10,10,12], [20,15,23], [1,2,3]]
</code></pre>
<p>These lists are huge (1 million entries).
What is a good way to do this?</p>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for the <a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip</code></a> builtin function:</p>
<pre><code>&gt;&gt;&gt; x = [10,20,1]
&gt;&gt;&gt; y = [10,15,2]
&gt;&gt;&gt; z = [12,23,3]
&gt;&gt;&gt; zip(x, y, z)
[(10, 10, 12), (20, 15, 23), (1, 2, 3)]
</code></pre>
<p>This produces a list of tuples. If you absolutely need a list of lists, coerce those tuples manually:</p>
<pre><code>&gt;&gt;&gt; [list(t) for t in zip(x, y, z)]
[[10, 10, 12], [20, 15, 23], [1, 2, 3]]
</code></pre>
<p>Note that in Python 3, <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> returns a lazy iterator instead of a list (the same as <a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow"><code>itertools.izip</code></a> in Python 2). If your lists are that big, that may actually be preferable, but remember that iterators aren't subscriptable.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.x you can use izip:</p>
<pre><code>from itertools import izip

for a,b,c in izip(x,y,z):
    # do something
</code></pre>
<p>This iterates across the lists instead of copying their data.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a manual way of doing it (if you're interested): </p>
<pre><code>&gt;&gt;&gt; xyz = []
&gt;&gt;&gt; x = [10, 20, 1]
&gt;&gt;&gt; y = [10, 15, 2]
&gt;&gt;&gt; z = [12, 23, 3]
&gt;&gt;&gt; 
&gt;&gt;&gt; for num in range(3): #Change 3 to however many numbers u want
...     xyz.append([x[num], y[num], z[num]])
... 
&gt;&gt;&gt; print xyz
[[10, 10, 12], [20, 15, 23], [1, 2, 3]]
</code></pre>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">If you do not need to access all values for sure, I'd suggest to not create the actual list, but create an accessor function that builds coordinated triples on demand?</span>
<span class="comment-copy">Thanks for your idea, but I need to access all values and so I need a list of lists.</span>
<span class="comment-copy">Thank you. I need list of lists. Time is off essence to me. I tried your code and it works. Although I am looking for something that is fast and does not need an intermediate step (here convert to tuple).</span>
<span class="comment-copy">With much of this page, it would be good to add "assert len(x) == len(y) and len(y) == len(z)" and/or use zip_longest().  Also, in 2.x izip is sometimes better than zip, though in 3.x zip is the way to go.</span>
<span class="comment-copy">Agreed. They definitely need to all have same lengths. I just thought this route would be interesting because its somewhat manual in comparison to zip.</span>
