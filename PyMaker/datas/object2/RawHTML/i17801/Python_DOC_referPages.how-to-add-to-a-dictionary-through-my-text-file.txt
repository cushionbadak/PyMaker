<div class="post-text" itemprop="text">
<p>My text file looks like this:</p>
<pre><code>{'testyear3': 20, 'testyear6': '0', 'testyear5': '0', 'testyear4': '0'}
</code></pre>
<p>It will always look like this, I cannot change the order of the text file or how it is placed as during my program, I write a dictionary that is made to the text file with the code </p>
<pre><code>with open ("totals.txt", 'w') as f27:
  f27.write(str(totaldict))
</code></pre>
<p>therefore at the end of the program the text file always reverts to the order above. How would I go about writing the text file to a dictionary in the format that it is in? Or would I have to change the way I write to the text file? </p>
</div>
<div class="post-text" itemprop="text">
<p>You want to change the way you write your dictionary to a text file. The JSON format would be much easier to process (with the <a href="http://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code> module</a>):</p>
<pre><code>import json

# saving
with open("totals.txt", 'w') as f27:
    json.dump(totaldict, f27)

# loading
with open("totals.txt", 'r') as f27:
    totaldict = json.load(f27)
</code></pre>
<p>However, a dictionary does not maintain any specific order; they are unordered collections <em>by design</em>. If you wanted to store items in a specific order, you'd have to either use a different data structure (like a list), or sort your information and use a custom format.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use python's native parser:</p>
<pre><code>def read_dict( fname, src = None):
  if src is None :
    src = StringIO.StringIO(fname)
  src_global = { }
  locals =  {}
  comp_obj = compile(src, fname, 'exec')
  eval(comp_obj, src_global, locals)
  return locals
</code></pre>
<p>This loads a file, and basically parses it, and then returns local variables created during parsing.</p>
<p>You would need to prepend your code with some variable name, and then return this variable instead of <code>locals</code>.</p>
<p>Of course it might be an overkill, but I have file with few dictionaries in format of python script. I guess it's one way to do it.</p>
</div>
<span class="comment-copy">if the key is always "testyearX" then why are you using a dictionary and not a list? Lists will preserve the order, and will simplify getting an entry</span>
<span class="comment-copy">... or an <code>OrderedDict</code> ... or a Pandas <code>DataFrame</code> ... or ...</span>
<span class="comment-copy">Does python not have a <code>LinkedHashMap</code> type of structure?</span>
<span class="comment-copy">@SteveP.: You mean <a href="http://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a>? If written out as JSON, you won't preserve ordering when read again as a regular dictionary will be created from that.</span>
<span class="comment-copy">@MartijnPieters: you can use <code>object_pairs_hook</code>, though.</span>
<span class="comment-copy">@DSM: Sure, but then you are no longer using the JSON standard, really. Any other program reading the data would be perfectly within its right to ignore the key order.</span>
<span class="comment-copy">@DSM: When using JSON and you want to preserve order: write out an ordered <i>list</i> of key-value pairs. Don't try to bend the standard.</span>
<span class="comment-copy">Don't. Not when there is <code>ast.literal_eval</code> instead. But generally speaking, a standard format like JSON is much better.</span>
<span class="comment-copy">@MartijnPieters Well I contain all the variables. I know that executing arbitrary scripts is not best idea. And I was kind of forced to stick to format, due to previous decisions. Although I am keen to switch for future. I'll look into <code>literal_eval</code>.</span>
