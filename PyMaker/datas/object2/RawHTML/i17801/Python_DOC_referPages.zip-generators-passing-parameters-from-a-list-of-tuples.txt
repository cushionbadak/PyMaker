<div class="post-text" itemprop="text">
<p>I have a function:</p>
<pre><code>def func(i, k):
  j = 0
  while True:
    yield j * i + k
    j += 1
</code></pre>
<p>And some <code>i</code> and <code>k</code> instances:</p>
<pre><code>pars = [(2, 4), (1, 5), (7, 2)]
</code></pre>
<p>How can I zip over func of pars without knowing the length of pars? Like this:</p>
<pre><code>for func_tups in zip(func(2, 4), func(1, 5), func(7, 2)):
   print func_tups
</code></pre>
<p>I imagine some combination of map, zip, lambda, <code>*</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <a href="http://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap()</code></a>:</p>
<pre><code>from itertools import starmap

for func_tups in zip(*starmap(func, pairs)):
    # warning, infinite loop unless you have a break condition
</code></pre>
<p>Here <code>starmap()</code> applies an arbitrary length <code>pairs</code> as arguments to <code>func</code>, which you can then pass to <code>zip()</code> as separate arguments. You can't use <code>map()</code> here, as it only supports callables with <em>one</em> argument.</p>
<p>This presumes you are using Python 3 <code>zip()</code>; on Python 2 you'd obviously need to use <code>itertools.izip()</code> to handle the infinite sequence of tuples produced by the <code>func()</code> generators as an iterable:</p>
<pre><code>from itertools import starmap, izip

for func_tups in izip(*starmap(func, pairs)):
    # warning, infinite loop unless you have a break condition
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for func_tup in zip(*(func(*p) for p in pairs)):
    print func_tup
</code></pre>
<p>Although this probably reads better as two lines:</p>
<pre><code>iterators = (func(*pair) for pair in pairs)  # aka starmap
for func_tup in zip(*iterators):
    print func_tup
</code></pre>
</div>
<span class="comment-copy">You just edited that as I posted - looks fine now</span>
<span class="comment-copy">@Eric: Yes, I forgot the <code>zip()</code> part at first.</span>
<span class="comment-copy">It gets stuck in the while loop despite the yield, am I missing something?</span>
<span class="comment-copy">@perreal: On python 2, yes. Use <code>itertools.izip()</code> there.</span>
<span class="comment-copy">yes yes, the numbers are flowing, thanks a lot</span>
