<div class="post-text" itemprop="text">
<p>Say I had the following code-</p>
<pre><code>homeDir = os.path.expanduser("~")
fullPath = homeDir + "/.config"
print fullPath
</code></pre>
<p>Would this code still function properly for someone in say, Japan, who's home directory was composed of Kanji?</p>
<p>My concern is that python won't know how to add the two languages together, or even know what to do with the foreign characters.</p>
</div>
<div class="post-text" itemprop="text">
<p>All strings in your code from the question are bytestrings (sequence of bytes). They can represent anything, including a text encoded in some character encoding.</p>
<pre><code>homeDir = os.path.expanduser("~") # input bytestring, returns bytestring
fullPath = homeDir + "/.config" # add 2 bytestrings 
print fullPath
</code></pre>
<p>The <code>print</code> works but you may see garbage in console if it uses different character encoding. Otherwise the code will work for any language, foreign characters.</p>
<hr/>
<p>On Python 3 or if <code>from __future__ import unicode_literals</code> is used, string literals are Unicode. In this case it should also works:</p>
<pre><code>from __future__ import unicode_literals

homeDir = os.path.expanduser("~") # input Unicode, returns Unicode
fullPath = homeDir + "/.config" # add 2 Unicode strings
print(fullPath) # print Unicode
</code></pre>
<p>The print may fail (try to set appropriate <code>PYTHONIOENCODING</code> in this case).</p>
<p>On POSIX systems, paths may contain arbitrary byte sequences (except zero byte) including those that can't be decoded using a file system encoding. From <a href="http://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables" rel="nofollow">Python 3 docs</a>:</p>
<blockquote>
<p>In Python, file names, command line arguments, and environment
  variables are represented using the string type. On some systems,
  decoding these strings to and from bytes is necessary before passing
  them to the operating system. Python uses the file system encoding to
  perform this conversion (see sys.getfilesystemencoding()).</p>
<p><em>Changed in version 3.1</em>: On some systems, conversion using the file
  system encoding may fail. In this case, Python uses the
  <code>surrogateescape</code> encoding error handler, which means that undecodable
  bytes are replaced by a Unicode character U+DCxx on decoding, and
  these are again translated to the original byte on encoding.</p>
</blockquote>
<p>It means that <code>fullPath</code> might contain <code>U+DCxx</code> surrogates if the original contains undecodable bytes and <code>print(fullPath)</code> may fail even if terminal uses compatible character encoding. <code>os.fsencode(fullPath)</code> can return the original bytes if you need it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend reading <a href="http://nedbatchelder.com/text/unipain.html" rel="nofollow">this presentation</a> on unicode and encoding in python to understand what might happen, and how to tackle it.</p>
</div>
<span class="comment-copy">You probably want <code>os.path.join</code> instead of <code>+</code>, though that isn't an answer to your question.</span>
<span class="comment-copy">Quite interesting but well, it should work. Why don't you try it yourself?</span>
<span class="comment-copy">Foreign languages are also just zeroes and ones. So yes, generally it will work. Learn about Unicode, though.</span>
<span class="comment-copy">-1 Since python3  string literals are fullblown unicode strings, not bytestrings.</span>
<span class="comment-copy">@Basilevs: OP uses Python 2 (look at the <code>print</code> statement). It is a function in Python 3. btw, thank you for leaving the comment instead of the silent downvote due to misunderstanding or ignorance.</span>
<span class="comment-copy">Thank you for your reply, the garbage being printed out doesn't concern me too much. So it looks like I should be fine.</span>
<span class="comment-copy">@josh: I've updated the answer to describe Unicode, Python 3 cases too. <code>print()</code> may fail in this case.</span>
<span class="comment-copy">Very informative, thank you very much. You've certainly added alot of clarity that until recently, was never even something I considered.</span>
