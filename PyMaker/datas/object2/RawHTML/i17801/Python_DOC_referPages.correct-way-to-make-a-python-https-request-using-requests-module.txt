<div class="post-text" itemprop="text">
<p>I have to make an HTTPS request in Python, and I am using the requests module to try to make my life easier. </p>
<p>The request needs to have a header and 3 FORM parameters URL encoded. This is what I am doing: </p>
<pre><code>header = {'Content-type': 'application/x-www-form-urlencoded', 'Authorization':'Basic ' + encoded_string, 'Connection': 'Keep-Alive', 'Host':'host.host.com'}

payload='grant_type=authorization_code&amp;code=' + request.args['code'] + '&amp;state=' + request.args['state'] + '&amp;redirect_uri=http://xxx.xyz.com/request_listener'

url = 'https://serviceprovider.xxx.com/auth/j_oauth_resolve_access_code'

response = requests.post(url, data=payload, headers=header, verify=False)
</code></pre>
<p>When I try to return the <code>content</code> or <code>text</code> of the <code>response</code>, I get an empty string. However, when I print the actual <code>response</code> object, it says it is a <code>&lt;Response [200]&gt;</code>, but if this were actually a 200 OK then the server I am POSTing too should go to the redirect_uri I have specified and I would get a notification there. </p>
<p>This is not happening, and I am mystified as to why.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is fighting the Requests library: you're doing a lot of stuff yourself that Requests will do for you.</p>
<p>Firstly, don't form-encode your data yourself, let Requests do it by providing a dictionary to <code>data</code>, like @flyer's answer suggested.</p>
<p>When you do this, Requests will also correctly set the Content-Type header, so you don't have to. Also, please don't send a <code>Connection</code> header: Requests will manage it for you. The same applies to <code>Host</code> headers: sending a <code>Host</code> header can only cause problems.</p>
<p>Finally, don't set the Authorization header yourself, let Requests do it by providing it with your authentication credentials. The idiomatic Requests code would be:</p>
<pre><code>payload = {
    'grant_type': 'authorization_code', 
    'code': request.args['code'],
    'state': request.args['state'],
    'redirect_uri': 'http://xxx.xyz.com/request_listener',
}

url = 'https://serviceprovider.xxx.com/auth/j_oauth_resolve_access_code'

response = requests.post(url, data=payload, verify=False)
</code></pre>
<p>If that doesn't work, then I would suspect your payload data is bad.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that there are two mistakes.</p>
<p>The first one:<br/>
When you want to post data, the data format should be like this:</p>
<pre><code>payload = {
    'grant_type': 'authorization_code', 
    'code': request.args['code'],
    'state': request.args['state'],
    'redirect_uri': 'http://xxx.xyz.com/request_listener',
}
</code></pre>
<p>The second:<br/>
<code>Requests</code> could verify SSL certificates for https requests automatically and it sets <code>verify=True</code> as default. You set <code>verify=False</code> and that means that you want to ignore the ssl verification. That maybe not what you want. Here is the <a href="http://requests.readthedocs.org/en/latest/user/advanced/#ssl-cert-verification" rel="nofollow noreferrer">doc</a></p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/3/library/urllib.request.html#module-urllib.request" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Some things to try: use <code>curl</code> to construct a request by hand, to make sure that you know what the contents of a valid request should be. If that works, then you know that there is a problem with the way you are building or delivering the request in Python. Construct the <code>payload</code> as a dict rather than a string. Try building a prepared request so you can examine the request state before sending it to the server.</span>
<span class="comment-copy">Furthermore, OP may think that the Host header is preserved on redirect which it is not.</span>
<span class="comment-copy">I had to include the client id in base64 in the header, so I could not remove it, but I removed everything else. I did change the payload data to a dict, but I am receiving a 200 OK even when the request is failing. I suspect the issue is not with the request in that case..</span>
<span class="comment-copy">How do you know the request is failing?</span>
<span class="comment-copy">The server certificates have a signing issue, so that is why <code>verify</code> is set to False. Changing the payload to be a dict causes a 400 error: where it says the request was syntactically incorrect.</span>
<span class="comment-copy">@digerati32, could you give the complete url you want to request?</span>
