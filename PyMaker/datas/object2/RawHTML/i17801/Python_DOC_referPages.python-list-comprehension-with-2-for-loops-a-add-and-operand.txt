<div class="post-text" itemprop="text">
<pre><code>outgoing=[
        [27, 42, 66, 85, 65, 64, 68, 68, 77, 58],
        [24, 39, 58, 79, 60, 62, 67, 62, 55, 35],
        [3, 3, 8, 6, 5, 2, 1, 6, 22, 23],
        [3, 3, 8, 6, 5, 2, 1, 6, 22, 23],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       ]
incoming=[
        [459, 469, 549, 740, 695, 629, 780, 571, 574, 599],
        [420, 443, 504, 714, 669, 604, 745, 537, 537, 562],
        [39, 26, 45, 26, 26, 25, 35, 34, 37, 37],
        [26, 25, 27, 26, 26, 25, 35, 34, 37, 37],
        [13, 1, 18, 0, 0, 0, 0, 0, 0, 0],
       ]
</code></pre>
<p>I want to create a list which is the combination of incoming + outgoing.  E.g <code>incoming[0][0]</code> should be added to <code>outgoing[0][0]</code>, <code>incoming[0][1]</code> should be added to <code>outgoing[0][1]</code> and so on.  A list called <code>joint</code> will be produced and have the exact same structure as <code>incoming</code> and <code>outgoing</code> (e.g a list of 5 lists of 10 elements).  The code which does this is below:</p>
<pre><code>joint=incoming
for x in range(5):
    for y in range(10):
        joint[x][y]+=outgoing[x][y]
</code></pre>
<p>This works fine.  But I would like it as a list comprehension.</p>
<pre><code>[[joint[x][y]+=outgoing[x][y]] for x in range(5) for y in range(10))]
</code></pre>
<p>The above doesn't work, can someone explain why this failed and give an example of a correct list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> here to combine your lists into pairs:</p>
<pre><code>joint = [[x + y for x, y in zip(*row)] for row in zip(outgoing, incoming)]
</code></pre>
<p>The outer loop pairs up the rows from <code>outgoing</code> and <code>incoming</code> into pairs, so <code>outgoing[0]</code> together with <code>incoming[0]</code>, <code>outgoing[1]</code> with incoming[1]`, etc.</p>
<p>The inner loop then pairs up the paired rows, putting <code>outgoing[0][0]</code> and <code>incoming[0][0]</code> together into a tuple, followed by <code>outgoing[0][1]</code> and <code>incoming[0][1]</code>, and so on. The inner loop produces one row of summed values.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; [[x + y for x, y in zip(*row)] for row in zip(outgoing, incoming)]
[[486, 511, 615, 825, 760, 693, 848, 639, 651, 657], [444, 482, 562, 793, 729, 666, 812, 599, 592, 597], [42, 29, 53, 32, 31, 27, 36, 40, 59, 60], [29, 28, 35, 32, 31, 27, 36, 40, 59, 60], [13, 1, 18, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(_)
[[486, 511, 615, 825, 760, 693, 848, 639, 651, 657],
 [444, 482, 562, 793, 729, 666, 812, 599, 592, 597],
 [42, 29, 53, 32, 31, 27, 36, 40, 59, 60],
 [29, 28, 35, 32, 31, 27, 36, 40, 59, 60],
 [13, 1, 18, 0, 0, 0, 0, 0, 0, 0]]
</code></pre>
<p>Your specific code doesn't work because you cannot use assignment statements (enhanced or otherwise) inside an expression. The <code>+=</code> part of your code cannot be used like that.</p>
<p>Another problem is that <code>joint</code> was just another reference to <code>incoming</code>, <em>not</em> a copy. You altered the same list via a different reference to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need something like</p>
<pre><code>joint = [[sum(x) for x in zip(a, b)] for a, b in zip(incoming, outgoing)]
</code></pre>
<p>Your attempted list comprehension doesn't work because it tries to assign to <code>joint[x][y]</code> before the structure of <code>joint</code> (i.e. list of lists) is set up. Your earlier code works because <code>joint</code> is <code>incoming</code> (note: <em>not</em> a copy, it is a reference to the same object), so the structure is there.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly flatten both lists using a nested loop-comprehension and then use the built-in <a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> function in-conjunction with  the <a href="http://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map()</code></a> and <a href="http://docs.python.org/2/library/functions.html#sum" rel="nofollow"><code>sum()</code></a> functions</p>
<p>So Try this:</p>
<pre><code>flattend1 = [k for i in outgoing for k in i]
flattend2 = [k for i in incoming for k in i]

print map(sum,zip(flattend1,flattend2))
</code></pre>
</div>
