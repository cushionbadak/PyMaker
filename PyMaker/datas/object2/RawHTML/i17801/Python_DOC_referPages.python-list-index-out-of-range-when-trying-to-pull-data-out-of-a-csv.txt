<div class="post-text" itemprop="text">
<p>This program pulls data out of two .CSV files, which are linked here:
<a href="https://drive.google.com/folderview?id=0B1SjPejhqNU-bVkzYlVHM2oxdGs&amp;usp=sharing" rel="nofollow">https://drive.google.com/folderview?id=0B1SjPejhqNU-bVkzYlVHM2oxdGs&amp;usp=sharing</a></p>
<p>It's supposed to look for anything after a comma in each of the two files, but my range logic is somehow wrong. I'm running a traceback error to line 101:</p>
<p>"line 101, in calc_corr: sum_smokers_value = sum_smokers_value + float(s_percent_smokers_data[r][1])
IndexError: list index out of range"</p>
<p>I assume it  would do the same for the other times [k][1] shows up.</p>
<p>many thanks in advance if there's a way to fix this.</p>
<p>the program so far is:</p>
<pre><code># this program opens two files containing data and runs a corralation calculation

import math

def main():


    try:   
        print('does smoking directly lead to lung cancer?')
        print('''let's find out, shall we?''''')
        print('to do so, this program will find  correlation between the instances of smokers, and the number of people with lung cancer.')

        percent_smokers, percent_cancer = retrieve_csv()

        s_percent_smokers_data, c_percent_cancer_data = read_csv(percent_smokers, percent_cancer)

        correlation = calc_corr(s_percent_smokers_data, c_percent_cancer_data,)

        print('r_value =', corretation)

    except IOError as e:
        print(str(e))
        print('this program has been cancelled. run it again.')



def retrieve_csv():
    num_times_failed = 0
    percent_smokers_opened = False
    percent_cancer_opened = False



    while((not percent_smokers_opened) or (not percent_cancer_opened)) and (num_times_failed &lt; 5):

        try:

            if not percent_smokers_opened:
                percent_smokers_input = input('what is the name of the file containing the percentage of smokers per state?')
                percent_smokers = open(percent_smokers_input, 'r')
                percent_smokers_opened = True

            if not percent_cancer_opened:
                percent_cancer_input = input('what is the name of the file containing the number of cases of lung cancer contracted?')
                percent_cancer = open(percent_cancer_input, 'r')
                percent_cancer_opened = True

        except IOError:
            print('a file was not located. try again.')
            num_times_failed = num_times_failed + 1

    if not percent_smokers_opened or not percent_cancer_opened:
        raise IOError('you have failed too many times.')

    else:
        return(percent_smokers, percent_cancer)



def read_csv(percent_smokers, percent_cancer):
    s_percent_smokers_data = []
    c_percent_cancer_data = []

    empty_list = ''


    percent_smokers.readline()
    percent_cancer.readline()
    eof = False

    while not eof:
        smoker_list = percent_smokers.readline()
        cancer_list = percent_cancer.readline()

        if smoker_list == empty_list and cancer_list == empty_list:
            eof = True

        elif smoker_list == empty_list:
            raise IOError('smokers file error')

        elif cancer_list == empty_list:
            raise IOError('cancer file error')


        else:
            s_percent_smokers_data.append(smoker_list.strip().split(','))
            c_percent_cancer_data.append(cancer_list.strip().split(','))


    return (s_percent_smokers_data, c_percent_cancer_data)


def calc_corr(s_percent_smokers_data, c_percent_cancer_data):

    sum_smokers_value = sum_cancer_cases_values = 0
    sum_smokers_sq = sum_cancer_cases_sq = 0
    sum_value_porducts = 0
    numbers = len(s_percent_smokers_data)

    for k in range(0, numbers):
        sum_smokers_value = sum_smokers_value + float(s_percent_smokers_data[k][1])
        sum_cancer_cases_values = sum_cancer_cases_values + float(c_percent_cancer_data[k][1])

        sum_smokers_sq = sum_smokers_sq + float(s_percent_smokers_data[k][1]) ** 2
        sum_cancer_cases_sq = sum_cancer_cases_sq + float(c_percent_cancer_data[k][1]) ** 2

        sum_value_products = sum_value_products + float(percent_smokers[k][1]) ** float(percent_cancer[k][1])

    numerator_value = (numbers * sum_value_products) - (sum_smokers_value * sum_cancer_cases_values)
    denominator_value = math.sqrt(abs((numbers * sum_smokers_sq) - (sum_smokers_value ** 2)) * ((numbers * sum_cancer_cases_sq) - (sum_cancer_cases_values ** 2))) 



    return numerator_value / denominator_value


main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The values in each row of your data files are not comma separated, but rather tab separated. You need to change the <code>','</code> delimiter character you're splitting on for <code>'\t'</code>. Or perhaps use the <code>csv</code> module and tell it that your delimiter is <code>'\t'</code>. You can read more about the <code>csv</code> module in <a href="http://docs.python.org/3/library/csv.html" rel="nofollow">the documentation</a>.</p>
</div>
<span class="comment-copy">My guess is that one line of one of your CSV files doesn't have a comma. Is there any reason you need to parse the CSV files yourself, rather than using the <code>csv</code> module? A lot of the complexity in your program could be reduced by using <code>csv.reader</code> and <code>zip</code> (or maybe <code>itertools.zip_longest</code>, if you really need to detect when the files have different numbers of lines).</span>
<span class="comment-copy">@Blckknght, I run ubuntu, so I made the files in LibreOffice calc, a copy of MS excel and saved them as CSV's. Is there a better way to do it, such as making a word document? Thanks!</span>
<span class="comment-copy">I assume I have to import csv globally either way, correct?</span>
<span class="comment-copy">I'm not sure I understand. The immediate issue in your code can be solved just by swapping <code>","</code> for <code>"\t"</code> in the two <code>split</code> calls. (There may still be other issues, as I've not tested your code.) Switching to use the <code>csv</code> module is a bigger change. Importing the module is a first step, but won't do anything by itself.</span>
<span class="comment-copy">Got it working. Also spotted and corrected typos in lines 19 and 117. Appreciate it!</span>
