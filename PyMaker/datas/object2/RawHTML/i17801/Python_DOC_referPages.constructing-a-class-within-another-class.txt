<div class="post-text" itemprop="text">
<p>I am working on my game, and have made a level class, but  my parselevel() method will not let me parse the level, because of "Block" not being a global variable (Block is my block class).</p>
<p>How would I do this? Could I just pass Block and Player to the parseLevel method?</p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Benjamin\Documents\GitHub\ShipGame\level.py", line 3, in &lt;module&gt;
    from entity import *
  File "C:\Users\Benjamin\Documents\GitHub\ShipGame\entity.py", line 5, in &lt;module&gt;
    from blocks import *
  File "C:\Users\Benjamin\Documents\GitHub\ShipGame\blocks.py", line 4, in &lt;module&gt;
    from level import *
  File "C:\Users\Benjamin\Documents\GitHub\ShipGame\level.py", line 4, in &lt;module&gt;
    from blocks import Block
ImportError: cannot import name Block
</code></pre>
<p>My code:</p>
<pre><code>import pygame

from entity import *
from blocks import *

# Holds the level layout in a list of strings.
levelMap = [
"WWWWWWWWWWWWWWWWWWWW",
"WX                 W",
"W                  W",
"W             P    W",
"W                  W",
"W                  W",
"W                  W",
"W                  W",
"W                  W",
"W                  W",
"W                  W",
"W                  W",
"W   P              W",
"W                  W",
"WWWWWWWWWWWWWWWWWWWW",
]

class Level(object):

    def __init__(self, levelMap):
        self.levelMap = levelMap

    def parseLevel(self):
        x = 144
        y = 0
        for row in self.levelMap:
            for col in row:
                if col == "W":
                    Block((x, y))
                if col =="P":
                    Port((x, y))
                if col == "X":
                    player = Player((x, y), 1, "Player1", 1, 0)
                x += 32
            y += 32
            x = 144

level = Level(levelMap)
level.parseLevel()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The traceback shows that you have a <em>circular import</em> problem. When you have a statement <code>from foo import *</code>, Python has to finish loading <code>foo</code> right away (so that it can work out all the imported names). But this means that:</p>
<ol>
<li>since <code>level.py</code> executes <code>from entity import *</code>, <code>entity</code> must be loaded before <code>level</code>;</li>
<li>since <code>entity.py</code> executes <code>from blocks import *</code>, <code>blocks</code> must be loaded before <code>entity</code>;</li>
<li>since <code>blocks.py</code> executes <code>from level import *</code>, <code>level</code> must be loaded before <code>blocks</code>.</li>
</ol>
<p>Obviously this can't work!</p>
<p>What you really ought to do is reorganize your code so that each module doesn't need to know about all the others. (For example, why do <code>blocks</code> need to know about <code>level</code>?)</p>
<p>But if you are having trouble with that, you can get things working by breaking the circle, for example by writing <code>import level</code> instead of <code>from level import *</code>. Obviously you'll then have to write <code>level.foo</code> instead of <code>foo</code>, but that should be easy.</p>
<p>(This works because <code>import foo</code> doesn't need <code>foo</code> to have finished loading yet.)</p>
<p>See <a href="http://docs.python.org/3/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module" rel="nofollow">this entry in the Python FAQ</a> for more about circular imports.</p>
</div>
<span class="comment-copy">Are <code>Block</code> and <code>Port</code> in the same file as <code>Level</code>?? I'm guessing they are being imported with <code>from entity import *</code> and <code>from blocks import *</code> correct ?</span>
<span class="comment-copy">@jramirez you are correct, they are from the blocks.py file.</span>
<span class="comment-copy">Thanks! I cannot figure out why blocks needs to know about level, so I removed that, also, I am going to use from player import Player, so that I don't have to initialize everything, on that end</span>
<span class="comment-copy"><code>from player import Player</code> has to finish loading the <code>player</code> module (so that the <code>Player</code> class has been defined), so that can also lead to circular imports.</span>
<span class="comment-copy">hm... maybe I won't do that then.... thanks!</span>
