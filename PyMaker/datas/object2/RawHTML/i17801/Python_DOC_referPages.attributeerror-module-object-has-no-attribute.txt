<div class="post-text" itemprop="text">
<p>I've been scouring the internet for a solution and everything i've come across hasn't helped. So now i turn to you.</p>
<pre><code>Traceback (most recent call last):
  File "cardreader.py", line 9, in &lt;module&gt;
    import ATRdb as ATR
  File "/home/pi/Desktop/CardReader/ATRdb.py", line 4, in &lt;module&gt;
    import cardreader
  File "/home/pi/Desktop/CardReader/cardreader.py", line 113, in &lt;module&gt;
    main()
  File "/home/pi/Desktop/CardReader/cardreader.py", line 40, in main
    getData(db)
  File "/home/pi/Desktop/CardReader/cardreader.py", line 98, in getData
    if ATR.checkPerms(db,track1):
AttributeError: 'module' object has no attribute 'checkPerms'
</code></pre>
<p>I have two files cardreader.py &amp; ATRdb.py</p>
<p>---ATRdb.py has this setup</p>
<pre><code>import sys
import MYSQLdb
import datetime
import cardreader

def checkPerms(db, securitycode):
    try:
       cursor = db.cursor()
       cursor.execute("""SELECT permissions FROM atrsecurity.employee WHERE securitycode = %s""", (securitycode))
       r = cursor.fetchone()
       Permissions = r
       if '3' in Permissions[0]:
          return True
       else:
          return False
     except Exception:
         cardreader.main()
         return False
</code></pre>
<p>---cardreader.py has this setup</p>
<pre><code>import sys
import usb.core
import usb.util
import MYSQLdb
import ATRdb as ATR

def main():
    db = MYSQLdb.connect(HOST,USER, PASS, DB)
    print("Please swipe your card...")
    getData(db)
    main()
    db.close()
def getData(db):
    #
    #lots of code to get card data
    #
    if ATR.checkPerms(db, track1):
       print ("User has permission")
       unlockDoor()
</code></pre>
<p>i get the error at the "If ATR.checkPerms():" part. Any help would be appreciated 
(first python project)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is circular imports.</p>
<p>In <code>cardreader</code>, you do this:</p>
<pre><code>import ATRdb as ATR
</code></pre>
<p>That starts importing <code>ATRdb</code>, but a few lines into the code, it hits this:</p>
<pre><code>import cardreader
</code></pre>
<p>The exact sequence from here depends on whether <code>cardreader.py</code> is your main script or not, and on whether your top-level code that calls <code>main</code> is protected by an <code>if __name__ == '__main__'</code> guard (and assuming that top-level code is in <code>cardreader</code> rather than elsewhere). Rather than try to explain all the possibilities in detail (or wait for you to tell us which one matches your actual code), let's look at what we know is true based on the behavior:</p>
<p>In some way, you're calling <code>main</code> before finishing the import of <code>ATRdb</code>.</p>
<p>This means that, at this point, <code>ATRdb</code> has nothing in it but <code>sys</code>, <code>MYSQLdb</code>, and <code>datetime</code> (and a handful of special attributes that every module gets automatically). In particular, it hasn't gotten to the definition of <code>checkPerms</code> yet, so no such attribute exists in the module yet.</p>
<p>Of course eventually it's going to finish importing the rest of <code>ATRdb</code>, but at that point it's too late; you've already called <code>main</code> and it tried to call <code>ATR.checkPerms</code> and that failed.</p>
<p>While there are various complicated ways to make circular imports work (see <a href="http://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other" rel="noreferrer">the official FAQ</a> for some), the easiest and cleanest solution is to just not do it. If <code>ATRdb</code> needs some functions that are in <code>cardreader</code>, you should probably factor those out into a third module, like <code>cardutils</code>, that both <code>ATRdb</code> and <code>cardreader</code> can import.</p>
</div>
<span class="comment-copy">Why does <code>main</code> have a call to itself? Particularly before you close the database connection? And are these the complete contents of the files?</span>
<span class="comment-copy">Please post the full error and traceback instead of just describing it in English. There's a good chance it won't help here, but it mightâ€”and it's a good habit to get into, because there are a lot of problems where the traceback immediately gives the answer to a reader.</span>
<span class="comment-copy">the recursion of main is because we want the cardreader.py to continually run...waiting for a card swipe. And no, there is more code that i didn't include, but simple functions like unlockDoor and some logging info</span>
<span class="comment-copy">@MaylorTaylor: Recursion is not the right way to do that in Python; use a loop.</span>
<span class="comment-copy">It's definitely a circular import issue. The traceback makes it clear. Might be fixable with an <code>if __name__ == '__main__'</code> check.</span>
<span class="comment-copy">In addition, note that even if the circular import problem wasn't there, your code would fail too because <code>main()</code> calls itself. Since importing <code>cardreader</code> runs <code>main()</code>, it would crash your program (maximum call stack depth exceeded).</span>
<span class="comment-copy">While the issue is a circular import, the description of how the circular import causes the problem is wrong. <code>cardreader.py</code> is run as the main file. It imports <code>ATRdb</code>, which imports <code>cardreader</code> as a module (different from running it as the main file), which tries to import <code>ATRdb</code> again and doesn't because <code>ATRdb</code> is already being imported. The <code>cardreader</code> import then hits the <code>main()</code> call and starts running even though <code>ATRdb</code> isn't done importing. Note that the execution of the main file has yet to hit <code>main()</code>; this <code>main()</code> call shouldn't even be happening.</span>
<span class="comment-copy">@MaxNoel: Note that it wouldn't crash until swiping 1000 cards, and it's plausible nobody intended it to run for that long. Whether that makes it acceptable, or a recipe for a nightmare bug nobody will notice until 6 months after all the original devs have quit, is hard to guess. :)</span>
<span class="comment-copy">@user2357112: I was assuming that he's calling <code>main</code> from an <code>if __name__ == '__main__'</code> guard, in which case it can be simplified down to the two steps I described. But you're right, if he's just calling <code>main</code> directly, it can't be, and he might well be doing that. I'll edit the answer.</span>
<span class="comment-copy">I think your understanding of circular imports might be a bit off. When <code>A</code> imports <code>B</code> and <code>B</code> imports <code>A</code>, the second import doesn't suspend the importing of <code>B</code> to finish up <code>A</code>. It loads <code>A</code> into the current namespace and then continues with no other effect. When importing <code>B</code> finishes, then execution returns to <code>A</code>.</span>
