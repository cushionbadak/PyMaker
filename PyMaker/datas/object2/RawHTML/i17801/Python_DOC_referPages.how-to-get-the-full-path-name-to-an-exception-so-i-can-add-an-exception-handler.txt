<div class="post-text" itemprop="text">
<p>I want to catch an exception, but I don't know its fully qualified name. I would like to figure it out experimentally without digging thru documentation.</p>
<p>Let's say I have code that looks like this</p>
<pre><code>try:
   blackbox()
except Exception,e:
   print str(e)
   print e.__class__.__name__
</code></pre>
<p>And it runs and I get an exception message that says</p>
<pre><code>"error: too big"
error
</code></pre>
<p>So I add a handler</p>
<pre><code>try:
   blackbox()
except error,e:
   pass
except Exception,e:
   print str(e)
   print e.__class__.__name__
</code></pre>
<p>but it doesn't work, because <code>error</code> is not in the current namespace. (I know the answer to this particular question, it happens to be <code>curses.error</code>). How I figure out the namespace of an exception object (i.e. <code>curses.</code> so I can add a handler for that exception?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the module from most classes (including Python-defined exceptions) from the the <code>__module__</code> attribute:</p>
<pre><code>print type(e).__module__, type(e).__name__
</code></pre>
<p>In Python 3.3 and up, you can also use the <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-3155-qualified-name-for-classes-and-functions" rel="nofollow">qualified name</a>:</p>
<pre><code>print(type(e).__module__, type(e).__qualname__)
</code></pre>
<p>to get a more detailed name for an object (a path within their module). For top-level classes this won't make a difference, but for nested objects the qualified name is a lot more interesting.</p>
</div>
<span class="comment-copy">What version of Python?</span>
<span class="comment-copy">Python version 2.7</span>
<span class="comment-copy"><code>e.__qualname__</code> â†’ <code>type(e).__qualname__</code></span>
<span class="comment-copy">@GarethRees: ah, of course. And for the <code>__module__</code> attribute as well, preferably.</span>
<span class="comment-copy">It doesn't quite work. In my example, <code>type(e).__module__</code> returned <code>_curses</code> not <code>curses</code>. I tried <code>except _curses.error:</code> and it gave me an error. I'm not sure about python namespace mangling. Is this standard practice to prepend a <code>_</code> ?</span>
<span class="comment-copy">@MarkLakata: That's because the <code>curses</code> module uses the <code>_curses</code> module under the hood. <code>_curses</code> is the <i>C extension</i>. You'd have to import <code>_curses</code> for <code>_curses.error</code> to work, but the same exception is also imported into the <code>curses</code> module.</span>
<span class="comment-copy">@MarkLakata: the method is not fool-proof, it never is in a dynamic language like Python. This is where documentation comes in, the <code>__module__</code> attribute is a great way to <i>find</i> the documentation.</span>
