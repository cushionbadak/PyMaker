<div class="post-text" itemprop="text">
<p>The task that I have to perform is as follows :</p>
<p>Say I have a list of words (Just an example...the list can have any word): </p>
<pre><code>'yappingly', 'yarding', 'yarly', 'yawnfully', 'yawnily', 'yawning','yawningly', 
'yawweed', 'yealing', 'yeanling', 'yearling', 'yearly', 'yearnfully','yearning', 
'yearnling', 'yeastily', 'yeasting', 'yed',  
</code></pre>
<p>I have to create a new list of words from which words having the suffix <code>ing</code> are added after removing the suffix (i.e yeasting is added to the new list as yeast) and the remaining words are added as it is</p>
<p>Now as far as insertion of string ending with <code>ing</code> is concerned, i wrote the following code and it works fine</p>
<pre><code> Data=[w[0:-3] for w in wordlist if re.search('ing$',w)]
</code></pre>
<p>But how to add the remaining words to the list?? How do I add an <code>else</code> clause to the above if statement? I was unable to find suitable documentation for the above. I did came across several questions on SO regarding the shorthand if else statement, but simply adding the else statement at the end of the above code doesn't work. How do I go about it??</p>
<p>Secondly, if I have to extend the above regular expression for multiple suffixes say as follows:</p>
<pre><code>re.search('(ing|ed|al)$',w)
</code></pre>
<p>How do I perform the "trim" operation to remove the suffix accordingly and simultaneously add the word to the new list??
Please Help.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, what makes you think you need a regexp at all? There are easier ways to strip suffixes.</p>
<p>Second, if you want to use regexps, why not just <code>re.sub</code> instead of trying to use regexps and slicing together? For example:</p>
<pre><code>Data = [re.sub('(ing|ed|al)$', '', w) for w in wordlist]
</code></pre>
<p>Then you don't need to work out how much to slice off (which would require you to keep track of the result of <code>re.search</code> so you can get the length of the group, instead of just turning it into a bool).</p>
<p>But if you really want to do things your way, just replace your <code>if</code> filter with a conditional expression, as in iCodez's answer.</p>
<p>Finally, if you're stuck on how to fit something into a one-liner, just take it out of the one-liner. It should be easy to write a <code>strip_suffixes</code> function that returns the suffix-stripped string (which is the original string if there was no suffix). Then you can just write:</p>
<pre><code>Data = [strip_suffixes(w) for w in wordlist]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regarding your first question, you can use a <a href="https://stackoverflow.com/questions/394809/ternary-conditional-operator-in-python">ternary</a> placed just before the <code>for</code>:</p>
<pre><code>Data=[w[0:-3] if re.search('ing$',w) else w for w in wordlist]
</code></pre>
<p>Regarding your second, well, the best answer in my opinion is to use <a href="http://docs.python.org/2/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> as @abarnert demonstrated.  However, you could also make a slight adaption to your use of <code>re.search</code>:</p>
<pre><code>Data=[re.search('(.*)(?:ing|ed|al)$', w).group(1) for w in wordlist]
</code></pre>
<p>Finally, here is a link for more information on <a href="http://www.openlogic.com/wazi/bid/306769/Python-comprehensions-for-sysadmins" rel="nofollow noreferrer">comprehensions</a>.</p>
</div>
<span class="comment-copy">@iCodez: Fixed; thanks.</span>
<span class="comment-copy">Thanks..Obviously there would be easier and elegant methods to perform the above task. It was just that I was learning how to use regex in python, so I guess laying more stress on the use of regex is justified. :)</span>
<span class="comment-copy">@alphacentauri: If you're doing this to learn about regexps in Python, I'd definitely suggest writing that <code>strip_suffixes</code> function so you can write it in different waysâ€”using <code>re.sub</code>, using <code>re.search</code> and then getting the length of the matched group, whatever else you can think of.</span>
<span class="comment-copy">Will definitely try to do that..Thanks..:)</span>
<span class="comment-copy">Ahhh..Thanks...This worked.. Any suggestions where I could read about these not so intuitive python for and if syntax?? I couldn't find a very convincing source</span>
<span class="comment-copy">@alphacentauri - The link I gave in the answer explains the ternary.  Here is a reference on <a href="http://www.openlogic.com/wazi/bid/306769/Python-comprehensions-for-sysadmins" rel="nofollow noreferrer">comprehensions</a>.</span>
<span class="comment-copy">@alphacentauri: <a href="http://www.python.org/dev/peps/pep-0308/" rel="nofollow noreferrer">PEP 308</a> describes conditional expressions. The <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">tutorial</a> describes <code>if</code> clauses in list comprehensions (and <a href="http://docs.python.org/3/tutorial/controlflow.html#if-statements" rel="nofollow noreferrer"><code>if</code> statements</a> if you're confused about those as well else don't bother).</span>
<span class="comment-copy">Thank you people...i feel somewhat enchanted..:)</span>
