<div class="post-text" itemprop="text">
<p>I am just learning Python and I can't figure out how to solve an error. The Python code below writes some messages on the Raspberry Pi 16x2 Screen. On the 3rd set of messages #AVG SPEED if I use print <code>print avgspeed</code> it works correctly but when I output it to the screen I get this error <code>AttributeError: 'float' object has no attribute 'center'</code></p>
<pre><code>import RPi.GPIO as GPIO
import time
from time import sleep
import socket
import fcntl
import struct
from pycgminer import CgminerAPI

LCD_RS = 25
LCD_E  = 24
LCD_D4 = 23 
LCD_D5 = 17
LCD_D6 = 18
LCD_D7 = 22

LCD_WIDTH = 16 
LCD_CHR = True
LCD_CMD = False

LCD_LINE_1 = 0x80
LCD_LINE_2 = 0xC0 

E_PULSE = 0.00005
E_DELAY = 0.00005

def main():

  GPIO.setmode(GPIO.BCM)       
  GPIO.setup(LCD_E, GPIO.OUT)  
  GPIO.setup(LCD_RS, GPIO.OUT) 
  GPIO.setup(LCD_D4, GPIO.OUT) 
  GPIO.setup(LCD_D5, GPIO.OUT) 
  GPIO.setup(LCD_D6, GPIO.OUT) 
  GPIO.setup(LCD_D7, GPIO.OUT) 

  lcd_init()

  #UNIT

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("UNIT 1",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string("MODEL BETA",2)
  sleep(5)

  #CLEAR

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string("",2)
  sleep(0.4)

  #IP ADDRESS

  pi_ip = get_ip_address('eth0')
  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("IP Address",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string(pi_ip,2)
  sleep(5)

  #CLEAR

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string("",2)
  sleep(0.4)

  # AVG SPEED

  cgminer = CgminerAPI()
  summary = cgminer.summary()
  avgspeed = avg_speed()

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("Avg. Speed",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string(avgspeed,2)
  sleep(5)

  #CLEAR

  lcd_byte(LCD_LINE_1, LCD_CMD)
  lcd_string("",2)
  lcd_byte(LCD_LINE_2, LCD_CMD)
  lcd_string("",2)
  sleep(0.4)

def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
        s.fileno(),
        0x8915,  # SIOCGIFADDR
        struct.pack('256s', ifname[:15])
    )[20:24])

def avg_speed():
    cgminer = CgminerAPI()
    summary = cgminer.summary()
    avg_speed_value = cgminer.command('summary')['SUMMARY'][0]['MHS av']
    return avg_speed_value

def lcd_init():
  lcd_byte(0x33,LCD_CMD)
  lcd_byte(0x32,LCD_CMD)
  lcd_byte(0x28,LCD_CMD)
  lcd_byte(0x0C,LCD_CMD)  
  lcd_byte(0x06,LCD_CMD)
  lcd_byte(0x01,LCD_CMD)  

def lcd_string(message,style):
  if style==1:
    message = message.ljust(LCD_WIDTH," ")  
  elif style==2:
    message = message.center(LCD_WIDTH," ")
  elif style==3:
    message = message.rjust(LCD_WIDTH," ")

  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

def lcd_byte(bits, mode):
  GPIO.output(LCD_RS, mode) 
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x80==0x80:
    GPIO.output(LCD_D7, True)

  time.sleep(E_DELAY)    
  GPIO.output(LCD_E, True)  
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)  
  time.sleep(E_DELAY)      

  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&amp;0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&amp;0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&amp;0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&amp;0x08==0x08:
    GPIO.output(LCD_D7, True)

  time.sleep(E_DELAY)    
  GPIO.output(LCD_E, True)  
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)  
  time.sleep(E_DELAY)   

if __name__ == '__main__':
  main()
</code></pre>
<p>Traceback:</p>
<pre><code>Traceback (most recent call last):
  File "screen.py", line 165, in &lt;module&gt;
    main()
  File "screen.py", line 81, in main
    lcd_string(avgspeed,2)
  File "screen.py", line 117, in lcd_string
    message = message.center(LCD_WIDTH," ")
AttributeError: 'float' object has no attribute 'center'
</code></pre>
<p>Someone can help me with this?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Clearly at some point you're calling <code>lcd_string</code> with something that's not a string, but a float. So, when it does this:</p>
<pre><code>message = message.center(LCD_WIDTH," ")
</code></pre>
<p>… that fails, because <code>float</code> objects have no <code>center</code> method.</p>
<p>The fact that it's failing in the <code>center</code> case means it must be one of the places where you call <code>lcd_string(&lt;something&gt;, 2)</code>. My first guess would be <code>lcd_string(avgspeed,2)</code>, because <code>avgspeed</code> sure sounds like something that would be a float rather than a string.</p>
<p>(Now that you've posted the traceback, it tells you directly what I had to guess. The line that fails is exactly the one I said it would be, and the line that called it is exactly the one I suspected would be calling it. And this is why you should always look at the tracebacks, and paste them to your SO questions—otherwise, you have to scan the code and guess.)</p>
<hr/>
<p>The reason it seems to work if you replace that with just <code>print message</code> is that the <code>print</code> command automatically stringifies its arguments, so even if you pass it a <code>float</code>, it will print out that <code>float</code>.</p>
<p>If you want your <code>lcd_string</code> function to work the same way, you can do that pretty easily by adding one line to the start of it:</p>
<pre><code>message = str(message)
</code></pre>
<hr/>
<p>Alternatively, change your code to never call <code>lcd_string</code> with anything else. So:</p>
<pre><code>lcd_string(str(avgspeed), 2)
</code></pre>
<p>… or, if you want more control over the formatting, something like this:</p>
<pre><code>lcd_string(format(avgspeed, '.2f'), 2) 
</code></pre>
<p>Since any developer is bound to screw that up sometimes (at least <em>I</em> would, and you obviously would too), and you have a hard time debugging those screwups yourself, you might want to add a line at the top of the function to give you better error messages, like:</p>
<pre><code>assert isinstance(message, str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>lcd_string</code> requires it's first parameter to be a <code>string</code></p>
<p>Check out this post:</p>
<p><a href="http://www.raspberrypi-spy.co.uk/2012/08/20x4-lcd-module-control-using-python/" rel="nofollow">lcd module raspberry pi</a></p>
</div>
<span class="comment-copy">Please post the whole exception and traceback instead of just trying to describe where the error happens.</span>
<span class="comment-copy">Post modified with traceback response. Thanks</span>
<span class="comment-copy">I was contemplating the whole function becoming: <code>align = {1: '&lt;', 2: '^', 3: '&gt;'}[style]; return '{:{}{}}'.format(message, align, LCD_WIDTH)</code> but it depends on whether that should be allowed or not... Even just changing the lookup to <code>str.ljust, str.center and str.rjust</code> would be good though...</span>
<span class="comment-copy">@JonClements: Yeah, that would be a nice improvement in readability… although why even have the API be <code>1</code>, <code>2</code>, or <code>3</code> in the first place? That's more of a readability problem than the elif chain in the implementation. Anyway, given that he appears to have copy-pasted this code from elsewhere, I'm not sure how much style guidance is worth…</span>
<span class="comment-copy">Is there any way I can loop those messages for an unlimited time? #UNIT #CLEAR #IP ADDRESS #CLEAR #AVG SPEED #CLEAR --&gt; LOOP</span>
<span class="comment-copy">@Andrei: I'm not sure what you mean, but (a) that sounds like a completely separate question that you should post separately, and (b) are you just looking for a <code>while True:</code> somewhere inside <code>main</code> with most of the guts of <code>main</code> indented underneath it? (If you don't know what that means, see <a href="http://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming" rel="nofollow noreferrer">the tutorial</a>.)</span>
<span class="comment-copy">I don't see a function (or anything else) named <code>LCD_STRING</code> in the OP's code, in the linked blog post, or in the underlying API. I <i>do</i> see an <code>lcd_string</code>, but it's a function the OP defined himself, so he can make it do whatever he wants.</span>
