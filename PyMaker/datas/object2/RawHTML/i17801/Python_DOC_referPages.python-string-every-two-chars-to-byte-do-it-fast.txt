<div class="post-text" itemprop="text">
<p>Got a binary blob string like:</p>
<pre><code>input = "AB02CF4AFF"
</code></pre>
<p>Every pair "AB", "02", "CF", "4A", "FF" constitute a byte.
I'm doing this:</p>
<pre><code>data = StringIO()
for j in range(0, len(input)/2):
    bit = input[j*2:j*2+2]
    data.write('%c' % int(bit,16))
data.seek(0)
</code></pre>
<p>Works ok, but with large binary blobs this becomes unacceptable slow and sometimes event throws a MemoryError.</p>
<p>struct.unpack comes to mind, but no luck thus far.</p>
<p>Any way to speed this up?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow"><code>binascii.unhexlify</code></a>:</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.unhexlify('AB02CF4AFF')
b'\xab\x02\xcfJ\xff'
</code></pre>
<p>(In Python 2 you can decode with the <a href="http://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="nofollow"><code>hex</code> codec</a> but this isn't portable to Python 3.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Give <code>input.decode('hex')</code> a try :)</p>
<p>Always a good idea to use built-in solutions</p>
</div>
<div class="post-text" itemprop="text">
<p>How about something like this?</p>
<pre><code>def chrToInt(c):
    if c &gt;= '0' and c &lt;= '9':
        return int(ord(c) - ord('0'))
    elif c &gt;= 'A' and c &lt;= 'F':
        return int(ord(c) - ord('A')) + 10
    else:
        # invalid hex character, throw an exception or something here
        return None

def hexToBytes(input):
    bytes = []

    for i in range(0, len(input) - 1, 2):
        val = (chrToInt(input[i]) * 16) + chrToInt(input[i + 1])

        bytes.append(val)

    return bytes

print hexToBytes("AB02CF4AFF")
</code></pre>
<p>You could speed it up quite a bit by making chrToInt branchless by using binary operations, and you could also modify hexToBytes to say exactly how many characters it should read if you decide you want to use something bigger than bytes (so it returns it in groups of 4 for a short or 8 for an int).</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3753589/packing-and-unpacking-variable-length-array-string-using-the-struct-module-in-py" title="packing and unpacking variable length array string using the struct module in py">stackoverflow.com/questions/3753589/â€¦</a></span>
<span class="comment-copy">Does input.decode('hex') improve your efficiency?</span>
<span class="comment-copy">@immortal YES! Don't even need struct.unpack and the loop :S My code now a factor zillion higher. Thanks! btw: you're answer should be the accepted answer, how should I handle that? Thanks again.</span>
<span class="comment-copy">factor zillion <i>faster</i></span>
<span class="comment-copy">Added as answer, glad it helped :-)</span>
<span class="comment-copy">Perfect! Thanks, even better then @immortal 's answer because of portability to Python 3.</span>
<span class="comment-copy">The answer @immortal gave : <code>input.decode('hex')</code> is way faster for my usecase (Need the binary string as input for PIL Image.frombuffer). But thanks for answering, could come in handy for other cases.</span>
