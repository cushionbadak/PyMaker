<div class="post-text" itemprop="text">
<p>I am trying to write simple aplication in python who will send some text to server using POST HTTP method and then get response containing some text.</p>
<p>Server:</p>
<pre><code>from http.server import *
class MyServer(BaseHTTPRequestHandler):

    def do_POST(self):
        self.send_response(200)
        self.send_header("Content-type","text/plain")
        self.end_headers()
        print(self.rfile.read().decode("UTF-8"))
        self.wÔ¨Åle.write(bytes("TEST RESPONSE", "UTF-8"))

address = ("",8000)
httpd = HTTPServer(address, MyServer)
httpd.serve_forever()
</code></pre>
<p>Client:</p>
<pre><code>import http.client
class client:
    def __init__(self):
        h = self.request("127.0.0.1:8000", "POST", "OH YEA")
        resp = h.getresponse()
        print(resp.status)
        #data = resp.read()


    def request(self, host, metoda, strona):
        headers = { "Host" : host, "Accept": r"text/plain" }
        h = http.client.HTTPConnection(host)
        h.request(metoda,"",strona,headers)
        return h

a = client()
</code></pre>
<p>Well as long as line data = resp.read() remains commented everything works fine (well server get request prints to the console body of it and sends response) but when i try to read response body server does not print request body and i don't get and even if i get response status 200 i cannot read response body (well whole aplication "hangs up"). What am I doing wrong? I am guessing that behevior of server has something to do with not finished response procesing but i cannot finish it cuz i can't get response body.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are missing the <code>Content-Length</code> header on your HTTP response. The HTTP client does not know when the response is complete, so it keeps on waiting for more.:</p>
<pre><code>def do_POST(self):
    content = bytes("TEST RESPONSE", "UTF-8")
    self.send_response(200)
    self.send_header("Content-type","text/plain")
    self.send_header("Content-Length", len(content))
    self.end_headers()
    print(self.rfile.read().decode("UTF-8"))
    self.wfile.write(content)
</code></pre>
<p>This does not completely work, yet: the server has the same problem: it just keeps on reading from the <code>rfile</code>.</p>
<pre><code>def do_POST(self):
    content = bytes("TEST RESPONSE", "UTF-8")
    self.send_response(200)
    self.send_header("Content-type","text/plain")
    self.send_header("Content-Length", len(content))
    self.end_headers()
    print(self.rfile.read(int(self.headers['Content-Length'])).decode("UTF-8"))
    self.wfile.write(content)
</code></pre>
<p>Using curl, this works fine:</p>
<pre><code>$ curl -X POST http://localhost:8000 -d 'testrequest'
TEST RESPONSE
</code></pre>
<p>There are ways to do this without a <code>Content-Length</code> header, but for the beginning, this should be enough.</p>
<p><strong>Edit</strong>: this is a nice exercise in writing a HTTP client/server, but for production usage, you might want to consider more high-level abstractions, like <a href="http://docs.python-requests.org/en/latest/" rel="nofollow">requests</a> for the client side and <a href="http://docs.python.org/3/library/wsgiref.html" rel="nofollow">WSGI</a> or a full web framework for the server side (<a href="http://flask.pocoo.org/" rel="nofollow">Flask</a> or <a href="http://www.djangoproject.com/" rel="nofollow">Django</a> are popular choices, depending on your requirements).</p>
</div>
<span class="comment-copy">My god man i am lovin ya :) Cuz of <a href="http://docs.python.org/2/library/httplib.html" rel="nofollow noreferrer">docs.python.org/2/library/httplib.html</a> i thought Content-Length is set automaticaly. Now it of course works :) Thank you so much :) Btw: Merry Christmas and Happy New Year!!!</span>
<span class="comment-copy">Thank you :-) I might be wrong about <code>Content-Length</code> from the client, did you try it without manually setting it? I just looked at the documentation, and it <i>should</i> work :-) Btw. <a href="http://docs.python.org/3/library/http.html" rel="nofollow noreferrer">this is the documentation for Python 3.x</a>, you were reading the 2.x version</span>
