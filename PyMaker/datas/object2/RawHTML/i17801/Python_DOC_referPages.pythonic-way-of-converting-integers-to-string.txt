<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; foo = 1
&gt;&gt;&gt; type(foo)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(str(foo))
&lt;type 'str'&gt;
&gt;&gt;&gt; type(`foo`)
&lt;type 'str'&gt;
</code></pre>
<p>Which is the more Pythonic way of converting integers to strings? I have always been using the first method but I now find the second method more readable. Is there a practical difference?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/reference/expressions.html#string-conversions" rel="nofollow noreferrer">String conversions using backticks</a> are a shorthand notation for calling <a href="http://docs.python.org/2/library/functions.html#repr" rel="nofollow noreferrer"><code>repr()</code></a> on a value. For integers, the resulting output of <code>str()</code> and <code>repr()</code> <em>happens</em> to be the same, but it is <em>not</em> the same operation:</p>
<pre><code>&gt;&gt;&gt; example = 'bar'
&gt;&gt;&gt; str(example)
'bar'
&gt;&gt;&gt; repr(example)
"'bar'"
&gt;&gt;&gt; `example`
"'bar'"
</code></pre>
<p>The backticks syntax was <a href="http://docs.python.org/3/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">removed from Python 3</a>; I wouldn't use it, as an explicit <code>str()</code> or <code>repr()</code> call is far clearer in its intent.</p>
<p>Note that you have more options to convert integers to strings; you can use <a href="http://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a> or <a href="http://docs.python.org/2/library/stdtypes.html#string-formatting-operations" rel="nofollow noreferrer">old style string formatting operations</a> to interpolate an integer into a larger string:</p>
<pre><code>&gt;&gt;&gt; print 'Hello world! The answer is, as always, {}'.format(42)
Hello world! The answer is, as always, 42
</code></pre>
<p>which is much more powerful than using string concatenation.</p>
</div>
<span class="comment-copy">Cheers for the "shorthand notation for calling repr()" bit. Learn something new everyday.</span>
