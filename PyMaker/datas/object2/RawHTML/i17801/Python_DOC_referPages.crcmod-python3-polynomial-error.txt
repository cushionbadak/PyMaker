<div class="post-text" itemprop="text">
<p>I need to use a crc checksum in a python3 program, but my knowledge of crc is virtually non-existent.</p>
<p>Here is the test code I wrote</p>
<pre><code>import crcmod

crc_func = crcmod.mkCrcFun(0x1d, initCrc=0x07, xorOut=0x00)
print(hex(crc_func(b'123456789')))
</code></pre>
<p>When I run this, I get the following error:</p>
<pre><code>ValueError: The degree of the polynomial must be 8, 16, 24, 32 or 64
</code></pre>
<p>But 1D is 8 bit, so I must be doing something wrong.
Please explain what I did wrong.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>But 1D is 8 bit</p>
</blockquote>
<p>No it isn't; it's 5 bits:</p>
<pre><code>&gt;&gt;&gt; bin(0x1d)
'0b11101'
</code></pre>
<p>The way this module defines things (see the <code>_verifyPoly</code> function) rounds down, so this counts as a "4-bit polynomial". An "8-bit polynomial" has to be between <code>0x100</code> and <code>0x1ff</code> (inclusive). Of course most of the polynomials in that range will not give useful results, but they can at least be handled by this module.</p>
<hr/>
<blockquote>
<p>Please explain what I did wrong.</p>
</blockquote>
<p>As <a href="http://crcmod.sourceforge.net/crcmod.html#mkcrcfun-crc-function-factory" rel="nofollow">the docs</a> say:</p>
<blockquote>
<p>The bits in this integer are the coefficients of the polynomial. The only polynomials allowed are those that generate 8, 16, 24, 32, or 64 bit CRCs.</p>
</blockquote>
<p><code>0x1d</code> does not generate an 8-degree polynomial.</p>
<hr/>
<p>If none of this makes any sense to you, well, the <a href="http://crcmod.sourceforge.net/intro.html" rel="nofollow">docs</a> explicitly say, right at the top:</p>
<blockquote>
<p>There is no attempt in this package to explain how the CRC worksâ€¦ </p>
<p>It is up to you to decide what polynomials to use in your application. Some common CRC algorithms are predefined in crcmod.predefined. If someone has not specified the polynomials to use, you will need to do some research to find one suitable for your application. Examples are available in the unit test script test.py. </p>
</blockquote>
<p>If you don't want to learn how CRC works and figure out how to design and encode an appropriate polynomial yourself, just use one of the <code>predefined</code> ones.</p>
<hr/>
<p>More generally, if you don't have a specific CRC polynomial in mind, or don't even understand what this means, you probably have no reason to use this module in the first place. If you just "need to use a crc checksum", there's already a perfectly good CRC function in the stdlib, <a href="http://docs.python.org/3/library/zlib.html#zlib.crc32" rel="nofollow"><code>zlib.crc32</code></a>.</p>
<p>For that matter, if it doesn't have to actually <em>be</em> a CRC, just a reasonably reliable checksum, you probably want <a href="http://docs.python.org/3/library/zlib.html#zlib.adler32" rel="nofollow"><code>zlib.adler32</code></a> instead.</p>
<p>Or, if <code>adler32</code> and <code>crc32</code> aren't sufficient for some reason, whatever that reason is, I'd wager you don't actually need a checksum but a real hash, and a better CRC polynomial isn't gong to help you; you want a different algorithm, probably something out of <a href="http://docs.python.org/3/library/hashlib.html" rel="nofollow"><code>hashlib</code></a>.</p>
</div>
<span class="comment-copy">If you just "need to use a crc checksum", why this complicated low-level module? What's wrong with just <a href="http://docs.python.org/3/library/zlib.html#zlib.crc32" rel="nofollow noreferrer"><code>zlib.crc32(x) &amp; 0xffffffff</code></a> from the stdlib?</span>
<span class="comment-copy">Facing the same problem I have found the solution on SE, you may want to get the link [<a href="http://stackoverflow.com/q/24851027/3067485]">stackoverflow.com/q/24851027/3067485]</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/33932170/compute-a-crc32c-castagnoli-which-uses-the-generator-polynomial-1edc6f41h-foll">Compute a CRC32C (Castagnoli) which uses the generator polynomial 1EDC6F41h following Rocksoft Model CRC Algorithm in Python</a></span>
<span class="comment-copy">voted to close as a duplicate of a newer one because that one is much cleaner.</span>
