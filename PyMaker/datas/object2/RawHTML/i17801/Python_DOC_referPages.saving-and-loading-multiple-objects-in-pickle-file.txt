<div class="post-text" itemprop="text">
<p>I have a class that serves players in a game, creates them and other things. </p>
<p>I need to save these player objects in a file to use it later.  I've tried the pickle module but I don't know how to save multiple objects and again loading them? Is there a way to do that or should I use other classes such as lists and save and load my objects in a list? </p>
<p>Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a list, tuple, or dict is by far the most common way to do this:</p>
<pre><code>import pickle
PIK = "pickle.dat"

data = ["A", "b", "C", "d"]
with open(PIK, "wb") as f:
    pickle.dump(data, f)
with open(PIK, "rb") as f:
    print pickle.load(f)
</code></pre>
<p>That prints:</p>
<pre><code>['A', 'b', 'C', 'd']
</code></pre>
<p>However, a pickle file <em>can</em> contain any number of pickles.  Here's code producing the same output.  But note that it's harder to write and to understand:</p>
<pre><code>with open(PIK, "wb") as f:
    pickle.dump(len(data), f)
    for value in data:
        pickle.dump(value, f)
data2 = []
with open(PIK, "rb") as f:
    for _ in range(pickle.load(f)):
        data2.append(pickle.load(f))
print data2
</code></pre>
<p>If you do this, you're responsible for knowing how many pickles are in the file you write out.  The code above does that by pickling the number of list objects first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two additions to <a href="https://stackoverflow.com/a/20725705/2810305">Tim Peters' accepted answer</a>.</p>
<p><strong>First</strong>, you need not store the number of items you pickled separately if you stop loading when you hit the end of the file:</p>
<pre><code>def loadall(filename):
    with open(filename, "rb") as f:
        while True:
            try:
                yield pickle.load(f)
            except EOFError:
                break

items = loadall(myfilename)
</code></pre>
<p>This assumes the file contains only pickles; if there's anything else in there, the generator will try to treat whatever else is in there as pickles too, which could be dangerous.</p>
<p><strong>Second</strong>, this way, you do not get a list but rather a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="noreferrer">generator</a>.
This will load only one item into memory at a time, which is useful
if the dumped data is very large -- one possible reason why you may 
have wanted to pickle multiple items separately in the first place.
You can still iterate over <code>items</code> with a <code>for</code> loop as if it were
a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>import pickle

file = open('test.pkl','wb')
obj_1 = ['test_1', {'ability', 'mobility'}]
obj_2 = ['test_2', {'ability', 'mobility'}]
obj_3 = ['test_3', {'ability', 'mobility'}]

pickle.dump(obj_1, file)
pickle.dump(obj_2, file)
pickle.dump(obj_3, file)

file.close()

file = open('test.pkl', 'rb')
obj_1 = pickle.load(file)
obj_2 = pickle.load(file)
obj_3 = pickle.load(file)
print(obj_1)
print(obj_2)
print(obj_3)
file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I will give an object-oriented demo using <code>pickle</code> to store and restore one or multi <code>object</code>:</p>
<pre><code>class Worker(object):

    def __init__(self, name, addr):
        self.name = name
        self.addr = addr

    def __str__(self):
        string = u'[&lt;Worker&gt; name:%s addr:%s]' %(self.name, self.addr)
        return string

# output one item
with open('testfile.bin', 'wb') as f:
    w1 = Worker('tom1', 'China')
    pickle.dump(w1, f)

# input one item
with open('testfile.bin', 'rb') as f:
    w1_restore = pickle.load(f)
print 'item: %s' %w1_restore

# output multi items
with open('testfile.bin', 'wb') as f:
    w1 = Worker('tom2', 'China')
    w2 = Worker('tom3', 'China')
    pickle.dump([w1, w2], f)

# input multi items
with open('testfile.bin', 'rb') as f:
    w_list = pickle.load(f)

for w in w_list:
    print 'item-list: %s' %w
</code></pre>
<p>output:</p>
<pre><code>item: [&lt;Worker&gt; name:tom1 addr:China]
item-list: [&lt;Worker&gt; name:tom2 addr:China]
item-list: [&lt;Worker&gt; name:tom3 addr:China]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's easy if you use <code>klepto</code>, which gives you the ability to transparently store objects in files or databases.  It uses a dict API, and allows you to <code>dump</code> and/or <code>load</code> specific entries from an archive (in the case below, serialized objects stored one entry per file in a directory called <code>scores</code>).</p>
<pre><code>&gt;&gt;&gt; import klepto
&gt;&gt;&gt; scores = klepto.archives.dir_archive('scores', serialized=True)
&gt;&gt;&gt; scores['Guido'] = 69 
&gt;&gt;&gt; scores['Fernando'] = 42
&gt;&gt;&gt; scores['Polly'] = 101
&gt;&gt;&gt; scores.dump()
&gt;&gt;&gt; # access the archive, and load only one 
&gt;&gt;&gt; results = klepto.archives.dir_archive('scores', serialized=True)
&gt;&gt;&gt; results.load('Polly')
&gt;&gt;&gt; results
dir_archive('scores', {'Polly': 101}, cached=True)
&gt;&gt;&gt; results['Polly']
101
&gt;&gt;&gt; # load all the scores
&gt;&gt;&gt; results.load()
&gt;&gt;&gt; results['Guido']
69
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Using <code>list</code> as container seems reasonable.</span>
<span class="comment-copy">asking after 1 year. Cannot we use shelve library of python for the same task. If not what would would be the drawback</span>
<span class="comment-copy">Thanks I have your idea but I thought for multiple list objects it may cause memory issues &amp; I decided to save each player in a separate file but do you think listing pickle objects my cause memory problems?</span>
<span class="comment-copy">Don't have enough info. How many players? How big is each player's pickle? How much RAM is available? If you have a great many players, it would be best to incorporate a database and store pickles in that (instead of inventing your own database, one painful step at a time).</span>
<span class="comment-copy">Why do all pickle examples always use binary mode? Binary file writing is one frontier my work has not yet broached whatsoever...I know nothing about it or why anyone uses it anywhere.</span>
<span class="comment-copy">@Aerovistae binary mode is used because Windows will mess with end-of-line characters in text mode.</span>
<span class="comment-copy">This should be the top answer</span>
<span class="comment-copy">Just be aware that calling <code>load(myfilename)</code> does not actually load the data or read from the file until you iterate over the result. If you want to load them immediately, use something like <code>list(load(myfilename))</code> or a <code>for</code> loop.</span>
<span class="comment-copy">Will this approach not leave the file handle open until the generator happens to be garbage collected, leading to potential locking issues? To solve this, should we put the <code>yield</code> <i>outside</i> the <code>with open()</code> block? Granted this leads to unnecessary reads to iterate through the pickle file, but I think I'd prefer this to dangling file handles. Unless we are sure this method will always be called quickly to EOF, and we close the file when the end of the file is reached. (But if we're bothering to yield individual elements it is probably because we don't need to unpickle all objects in a file.)</span>
<span class="comment-copy">@Chris: If the iterator is used to its end, the <code>with open</code> will terminate and properly close the file. If it may not be used to its end, we will often not care about the open file. If it may not be used to its end <i>and</i> we don't like the open file, then, yes, the above construction is not the best way to go.</span>
