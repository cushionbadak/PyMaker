<div class="post-text" itemprop="text">
<p>Given an arbitrary string (i.e., not based on a pattern), say:</p>
<pre><code>&gt;&gt;&gt; string.ascii_letters
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
</code></pre>
<p>I am trying to partition a string based a list of indexes.</p>
<p>Here is what I tried, which does work:</p>
<pre><code>import string

def split_at_idx(txt, idx):
    new_li=[None]*2*len(idx)
    new_li[0::2]=idx
    new_li[1::2]=[e for e in idx]
    new_li=[0]+new_li+[len(txt)]
    new_li=[new_li[i:i+2] for i in range(0,len(new_li),2)]  
    print(new_li)
    return [txt[st:end] for st, end in new_li]

print(split_at_idx(string.ascii_letters, [3,10,12,40]))  
# ['abc', 'defghij', 'kl', 'mnopqrstuvwxyzABCDEFGHIJKLMN', 'OPQRSTUVWXYZ']
</code></pre>
<p>The split is based on a list of indexes <code>[3,10,12,40]</code>. This list then needs to be transformed into a list of start, end pairs like <code>[[0, 3], [3, 10], [10, 12], [12, 40], [40, 52]]</code>. I used a slice assignment to set the evens and odds, then a list comprehension to group into pairs and a second LC to return the partitions. </p>
<p>This seems a little complex for such a simple function. Is there a better / more efficient / more idiomatic way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>I have a feeling someone asked this question very recently, but I can't find it now.  Assuming that the dropped letters were an accident, couldn't you just do:</p>
<pre><code>def split_at_idx(s, idx):
    return [s[i:j] for i,j in zip([0]+idx, idx+[None])]
</code></pre>
<p>after which we have</p>
<pre><code>&gt;&gt;&gt; split_at_idx(string.ascii_letters, [3, 10, 12, 40])
['abc', 'defghij', 'kl', 'mnopqrstuvwxyzABCDEFGHIJKLMN', 'OPQRSTUVWXYZ']
&gt;&gt;&gt; split_at_idx(string.ascii_letters, [])
['abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ']
&gt;&gt;&gt; split_at_idx(string.ascii_letters, [13, 26, 39])
['abcdefghijklm', 'nopqrstuvwxyz', 'ABCDEFGHIJKLM', 'NOPQRSTUVWXYZ']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a job for <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>.</p>
<pre><code>def split_at_indices(text, indices):
    [''.join(e[1] for e in g) for k,g in groupby(
      enumerate(text), key=lambda x: bisect_right(indices, x[0])
     )]
</code></pre>
<p>You will need to import <code>bisect_right</code> from the <code>bisect</code> module.</p>
<p>This works the way you'd think an efficient implementation should: for each character in the string, it uses binary search in <code>indices</code> to compute a number representing which string in the final list that character should go in, and then <code>groupby</code> separates the characters by those numbers. Though it turns out to be less efficient in most cases, because array access is so quick.</p>
</div>
<span class="comment-copy">I don't understand: you say "partition", but your code and your example <i>throws away</i> characters too.  For example, the letters <code>d</code> and <code>k</code> don't appear in your output.  Is that really what you want?</span>
<span class="comment-copy">No. My oversight. See edit. Dopey me; I was using this on something with a lot of whitespace and didn't even notice. Thx.</span>
<span class="comment-copy">Perfect! I was playing with zip but just didn't connect the dots. THANKS!</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1198512/split-a-list-into-parts-based-on-a-set-of-indexes-in-python">This</a> might be the question that you were talking about, but it is about lists and not strings, although the solutions proposed are the same, apart from the numpy one. That's because numpy.split() function acts upon lists and not strings.</span>
<span class="comment-copy">You are an evil genius</span>
<span class="comment-copy">Why was this down voted? It is also a great solution, but not as straightforward as <code>zip</code>  +1 from me.</span>
