<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<p>a - <code>dictionary</code> which contains keywords such as <code>["impeccable", "obvious", "fantastic", "evident"]</code> as elements of the list</p>
<p>b - <code>sentences</code> which contains sentences such as <code>["I am impeccable", "you are fantastic", "that is obvious", "that is evident"]</code></p>
<p>The goal is to use the <code>dictionary</code> list as a reference.</p>
<p>The process is as follows:</p>
<ol>
<li>Take an element for the <code>sentences</code> list and run it against each element in the <code>dictionary</code> list. If any of the elements exists, then spit out that sentence to a new list</li>
<li>Repeating step 1 for each of the elements in the <code>sentences</code> list.</li>
</ol>
<p>Any help would be much appreciated.</p>
<p>Thanks.</p>
<p>Below is the code:</p>
<pre><code>sentences = "The book was awesome and envious","splendid job done by those guys", "that was an amazing sale"

dictionary = "awesome","amazing", "fantastic","envious"

##Find Matches
for match in dictionary:
    if any(match in value for value in sentences):
        print match
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Now that you've fixed the original problem, and fixed the next problem with doing the check backward, and renamed all of your variables, you have this:</p>
<pre><code>for match in dictionary:
    if any(match in value for value in sentences):
        print match
</code></pre>
<p>And your problem with it is:</p>
<blockquote>
<p>The way I have the code written i can get the dictionary items but instead i want to print the sentences. </p>
</blockquote>
<p>Well, yes, your <code>match</code> is a dictionary item, and that's what you're printing, so of course that's what you get.</p>
<p>If you want to print the sentences that contain the dictionary item, you can't use <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a>, because the whole point of that function us to just return True if any elements are true. It won't tell you which ones—in fact, if there are more than one, it'll stop at the first one.</p>
<p>If you don't understand functions like <code>any</code> and the generator expressions you're passing to them, you really shouldn't be using them as magic invocations. Figure out how to write them as explicit loops, and you will be able to answer these problems for yourself easily. (Note that the <code>any</code> docs directly show you how to write an equivalent loop.)</p>
<p>For example, your existing code is equivalent to:</p>
<pre><code>for match in dictionary:
    for value in sentences:
        if match in value:
            print match
            break
</code></pre>
<p>Written that way, it should be obvious how to fix it. First, you want to print the sentence instead of the word, so print <code>value</code> instead of <code>match</code> (and again, it would really help if you used meaningful variable names like <code>sentence</code> and <code>word</code> instead of meaningless names like <code>value</code> and misleading names like <code>match</code>…). Second, you want to print all matching sentences, not just the first one, so don't <code>break</code>. So:</p>
<pre><code>for match in dictionary:
    for value in sentences:
        if match in value:
            print value
</code></pre>
<p>And if you go back to my first answer, you may notice that this is the exact same structure I suggested.</p>
<p>You <em>can</em> simplify or shorten this by using comprehensions and iterator functions, but not until you understand the simple version, and how those comprehensions and iterator functions work.</p>
</div>
<div class="post-text" itemprop="text">
<p>First translate your algorithm into psuedocode instead of a vague description, like this:</p>
<pre><code>for each sentence:
    for each element in the dictionary:
        if the element is in the sentence:
            spit out the sentence to a new list
</code></pre>
<p>The only one of these steps that isn't completely trivial to convert to Python is "spit out the sentence to a new list". To do that, you'll need to <em>have</em> a new list before you get started, like <code>a_new_list = []</code>, and then you can call <code>append</code> on it.</p>
<p>Once you convert this to Python, you will discover that "I am impeccable and fantastic" gets spit out twice. If you don't want that, you need to find the appropriate please to break out of the inner loop and move on to the next sentence. Which is also trivial to convert to Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now that you've posted your code… I don't know what problem you were asking about, but there's  at least one thing obviously wrong with it.</p>
<p><code>sentences</code> is a list of sentences.</p>
<p>So, <code>for partial in sentences</code> means each <code>partial</code> will be a sentence, like <code>"I am impeccable"</code>.</p>
<p><code>dictionary</code> is a list of words. So, <code>for value in dictionary</code> means each <code>value</code> will be a word, like <code>"impeccable"</code>.</p>
<p>Now, you're checking <code>partial in value</code> for each value for each partial. That will never be true. <code>"I am impeccable"</code> is not in <code>"impeccable"</code>.</p>
<p>If you turn that around, and check whether <code>value in partial</code>, it will give you something that's at least true sometimes, and that may even be what you actually want, but I'm not sure.</p>
<p>As a side note, if you used better names for your variables, this would be a lot more obvious. <code>partial</code> and <code>value</code> don't tell you what those things actually are; if you'd called them <code>sentence</code> and <code>word</code> it would be pretty clear that <code>sentence in word</code> is never going to be true, and that <code>word in sentence</code> is probably what you wanted.</p>
<p>Also, it really helps to look at intermediate values to debug things like this. When you use an explicit <code>for</code> statement, you can <code>print(partial)</code> to see each thing that <code>partial</code> holds, or you can put a breakpoint in your debugger, or you can step through in a visualizer like <a href="http://pythontutor.com/visualize.html#mode=display" rel="nofollow">this one</a>. If you have to break the <code>any(genexpr)</code> up into an explicit loop to do, then do so. (If you don't know how, then you probably don't understand what generator expressions or the <code>any</code> function do, and have just copied and pasted random code you didn't understand and tried changing random things until it worked… in which case you should stop doing that and learn what they actually mean.)</p>
</div>
<span class="comment-copy">Do you have any example code to see what you've done so far/how you've gone about trying this? :)</span>
<span class="comment-copy">OK, now that you've given us all your code: What's the problem? Is it doing something wrong? If so, which step does the wrong thing, what did you want it to do, and what does it do instead? Or is there some way you need to extend it and you're stuck? If so, what? Or are you worried about efficiency or conciseness or readability or some part of it?</span>
<span class="comment-copy">Hi. I'm not sure if the step3 output is correct because to check that i would need to output which elements in the sentences list had some common values with elements in the dictionary. Any suggestions would be grateful. Thank you</span>
<span class="comment-copy">Yes you are right. That is my final execution. Thanks for the help. Any idea how to dedupe the final output? I used the sorted() and set() function but no luck. Thank you</span>
<span class="comment-copy">@user3116753: If you replaced the <code>print value</code> with a <code>my_set.add(value)</code>, then looped over <code>my_set</code> after this loop, you would not have any dups. So presumably you're doing something different, and wrong, and it will be impossible to debug without knowing <i>what</i> you're doing. Which is, yet again, another new question, not something to follow up on in this one.</span>
<span class="comment-copy">Yup got it. i did it. Thanks. No more questions lol.</span>
<span class="comment-copy">for partial in sentences: 	if any(partial in value for value in dictionary): 		print 'element present' 	else: 		print 'absent'</span>
<span class="comment-copy">I did the following: but i'm not sure if it works as intendedfor partial in sentences: 	if any(partial in value for value in dictionary): 		print 'element present' 	else: 		print 'absent'</span>
<span class="comment-copy">@user3116753: Don't try to post code in comments. Post your code in a question, and explain what doesn't work (which part does the wrong thing, including what you expected it to do and what it does instead) or where you're stuck. Then people will answer that question.</span>
<span class="comment-copy">Sorry about that. I'm completely new to this. Thank you.</span>
<span class="comment-copy">@user3116753: No problem. Just create a new question, ideally with links between the two questions so people know they're related (otherwise, someone might think <i>you</i> didn't know they were related, and close the new one as a dup…), and if you do it right, you should get a solution pretty quickly.</span>
<span class="comment-copy">Hello Abarnert, Sorry I edited the code before sending. To simplify things, please see above. My goal is simply to output the sentences which have a match value in the dictionary. The way I have the code written i can get the dictionary items but instead i want to print the sentences. Thank you</span>
<span class="comment-copy">@user3116753: Continually re-editing the question into a different followup question and removing all traces of the original problem is not a good thing to do. It means the answers and comments no longer make sense when read against the question, and it means anyone searching for something similar to your original problem won't be able to find a solution. When you have a new problem that's too big to be answered as a followup comment, create a new question. Meanwhile, if one of the answers solved your original problem, accept that answer; if you solved it yourself, write and accept your own.</span>
<span class="comment-copy">No problem. Thanks for your help. Some members helped be solve the problem.</span>
