<div class="post-text" itemprop="text">
<p>Using Python, I'm trying to write object that it's access would be like this:</p>
<pre><code>page[2].records[7].color = "ffff"
</code></pre>
<p>(the 'record' has some fields).</p>
<p>the object should be exported to json string and of course import from json (currently unwrittten), so I've added the toString() method.</p>
<p>The point is the code is very "clumsy".  Is there way (using python) to make more "comely" code?</p>
<p>my code:</p>
<pre><code>class Record ():
    '''
    '''
    def __init__(self, title, color, action, data) :
        self.title = title
        self.color = color
        self.action = action
        self.data = data
    def toDict(self) :
        ans = {'title':self.title, 'color':self.color, 'action':self.action, 'data':self.data}
        return ans
    def toString(self):
        return '%s' % self.toDict()
#-----------------------------------------------------------------------
class Records():
    '''
    '''
    def __init__(self):
        self.f_record = {}
    def __getitem__(self, key):
        if not(self.f_record.get(key,None)):
            self.f_record[key] = Record(None,None,None,None)
        return self.f_record[key]
    def __setitem__(self, key, value):
        self.f_record[key] = value
    def toDict(self):
        ans = {}
        for i in self.f_record:
            ans[i] = self.f_record[i].toString()
        return ans
    def toString(self):
        return '%s' % self.toDict()
#-----------------------------------------------------------------------
class Page():
    '''
    '''
    def __init__(self):
        self.records = Records()
    def toString(self):
        return self.records.toString()
#-----------------------------------------------------------------------
class Papers():
    '''
    '''
    def __init__(self):
        self.f_papers = {}
    def __getitem__(self,key):
        if not (self.f_papers.get(key,None)):
            self.f_papers[key] = Page()
        return self.f_papers[key]
    def toString(self):
        ans = {}
        for i in self.f_papers:
            ans[i] = self.f_papers[i].toString()
        return '%s' % ans
#-----------------------------------------------------------------------
#tests

a = Papers()
a[1].records[1] = Record('group','red','open', 'group1')
a[1].records[2] = Record('group','green','open', 'group2')

a[2].records[7].title = "ffff"
a[1].records[1].title = 'title :-) '

print a[1].records[1].toString()
print a.toString()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>dict</code> itself to make it a bit easier:</p>
<pre><code>from collections import defaultdict

class PropertyDict (dict):
    def __getattr__ (self, attr):
        if self.has_key(attr):
            return self.__getitem__(attr)
        return object.__getattr(self, attr)

    def __setattr__ (self, attr, value):
        self.__setitem__(attr, value)

class Record (PropertyDict):
    def __init__ (self, title = None, color = None, action = None, data = None):
        self.title = title
        self.color = color
        self.action = action
        self.data = data

class Page (PropertyDict):
    def __init__ (self):
        self.records = defaultdict(Record)

papers = defaultdict(Page)
papers[1].records[1] = Record('group', 'red', 'open', 'group1')
papers[1].records[2] = Record('group', 'green', 'open', 'group2')

papers[2].records[7].title = "ffff"
papers[1].records[1].title = 'title :-) '

print(papers[1].records[1])
print(papers)
</code></pre>
<p>As the objects are now subtypes of <code>dict</code>, serializing it with json is simple. Only for deserializing you would have to write your own encode handler.</p>
</div>
<div class="post-text" itemprop="text">
<p>To serialize your object to json:</p>
<pre><code>import json

json_text = json.dumps(your_obj.as_dict())
</code></pre>
<p>To create your object from json:</p>
<pre><code>obj = YourClass.from_dict(json.loads(json_text))
</code></pre>
<p>You could easily implement the methods:</p>
<pre><code>class YourClass(object):
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
    @classmethod
    def from_dict(cls, attrs):
        return cls(**attrs)
    def as_dict(self):
        return dict(self.__dict__)
    def __str__(self):
        return json.dumps(self.as_dict())
    def __repr__(self):
        # see http://docs.python.org/3/library/types.html#types.SimpleNamespace
        d = self.as_dict()
        items = ("{}={!r}".format(k, d[k]) for k in sorted(d))
        return "{}({})".format(type(self).__name__, ", ".join(items))
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; obj = YourClass(title="foo", name="bar")
&gt;&gt;&gt; obj.color = "ffffff"
&gt;&gt;&gt; obj.name
'bar'
&gt;&gt;&gt; obj
YourClass(color='ffffff', name='bar', title='foo')
&gt;&gt;&gt; print(obj)
{"name": "bar", "color": "ffffff", "title": "foo"}
&gt;&gt;&gt; obj.as_dict()
{'name': 'bar', 'color': 'ffffff', 'title': 'foo'}
</code></pre>
<p>You could define <code>from_json</code>, <code>as_json</code> methods if you'd like using the one-liners</p>
</div>
<span class="comment-copy">Can you be more specific about what you dislike about the code and what you want it to be like instead?</span>
<span class="comment-copy">Your objects do nothing but store data. Do you need the classes in the first place? Do they have any methods besides <code>toString</code> and <code>toDict</code>?</span>
<span class="comment-copy">One thing worth pointing out is that if you want to serialize to JSON you should use the <code>json</code> module instead of relying on <code>dict.__str__</code> (by the way if you want to return an object with its default string formatting you can just return <code>str(self.toDict())</code>).  A Python's dict representation looks close-enough to valid JSON most of the time, but there are corner cases that will bite you if you don't use a JSON library.</span>
<span class="comment-copy">Additionally, this question seems a bit better suited for <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">The code looks "to long" - I have 4 classes (instead of one or two), too much duplicated code (each class has the "toDict" and "toString" that actually are the same)   Blender - You are right, I need to store data, 'toString' and 'fromString' (or another good way to convert data and from json strings).  the 'toDict' is step on the way to 'toString'.</span>
<span class="comment-copy">Tnx a lot.  this with J.F. Sebastian's (the usage of json) is very helpful.</span>
