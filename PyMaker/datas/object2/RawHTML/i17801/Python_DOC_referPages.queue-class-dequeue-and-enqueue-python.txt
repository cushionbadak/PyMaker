<div class="post-text" itemprop="text">
<p>So I have this question and it says create a class queue and make the method dequeue and enqueue </p>
<p>Here's what I have so far, could someone direct me on the right track? </p>
<pre><code>class queue:
      def __init__(self,queue):
            self.queue = []
      def dequeue(self):
            if len(queue) &gt; 0:
                  e = queue[0]
                  queue = list[1:len(queue)]
            else:
                  return "There are no elements to remove"
      def enqueue(self,element):
            queue.insert([-1], element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few problems here.</p>
<ul>
<li><code>queue</code> by itself refers to your <em>class</em>, not to the instance's attribute with the same name, which is <code>self.queue</code>. You have to use the <code>self.</code> all the time. And it would really help to give the class and its attribute different names, to avoid this confusion. (It would also help to use PEP 8 style and name the class <code>Queue</code>.)</li>
<li>When the queue is not empty, you do compute the return value <code>e</code>, but you never <code>return</code> it; you just fall off the end of the function, which means you automatically return <code>None</code>.</li>
<li><code>list[1:len(queue)]</code> is trying to slice the type <code>list</code>, not your actual list (<code>self.queue</code>). What you wanted is <code>self.queue[1:len(queue)]</code>.</li>
<li>You probably don't want to return a string—which could be a perfectly valid thing to stick in the queue—on errors. That's exactly what exceptions are for.</li>
<li>Your <code>__init__</code> takes an argument that it never uses. You probably wanted to use this as a starting value for the queue's contents. And you probably also want to make it optional.</li>
<li>The <code>list.insert</code> function doesn't take a <code>list</code> like <code>[-1]</code> for its first argument, it takes an index like <code>-1</code>.</li>
<li>If this is Python 2.x, you do not want to create classic classes; if you have nothing else to inherit from, inherit from `object.</li>
<li>It looks like you may be mixing tabs and spaces for indentation. Don't do that.</li>
</ul>
<p>Plus, there are a few things that could be simpler:</p>
<ul>
<li>If you want to slice to the end of a list, just leave off the end, like <code>self.queue[1:]</code>, instead of using <code>len(self.queue)</code>.</li>
<li>But to both fetch and remove a value from the left side of a list even more simply, you can use <code>pop(0)</code>.</li>
<li>To add a value to the right side of a list, you can use <code>append</code>.</li>
<li>To check if a list is non-empty, just do <code>if the_list</code>, not <code>if len(the_list) &gt; 0</code>. Empty collections are always falsey, and non-empty collections truth.</li>
<li>But you really don't need to check anyway—if the list is empty, <code>pop</code> will raise an exception, which is exactly what you wanted to do.</li>
</ul>
<p>So:</p>
<pre><code>class Queue(object):
    def __init__(self, queue=None):
        if queue is None:
            self.queue = []
        else:
            self.queue = list(queue)
    def dequeue(self):
        return self.queue.pop(0)
    def enqueue(self, element):
        self.queue.append(element)
</code></pre>
<p>If you want to customize the exception, so it says, e.g., <code>IndexError: dequeue from empty Queue</code> instead of <code>IndexError: pop from empty list</code>, you can do that with a <code>try</code> statement:</p>
<pre><code>    def dequeue(self):
        try:
            return self.queue.pop(0)
        except IndexError:
            raise IndexError('dequeue from empty Queue') 
</code></pre>
<hr/>
<p>If you want to test that your queue class works properly, you will need to write test functions, and then call them. For example:</p>
<pre><code>def test_queue():
    q = Queue()
    for i in range(10):
        q.enqueue(i)
    for i in range(10):
        value = q.dequeue()
        if value != i:
            print('Value #{} should be {} but is {}'.format(i, i, value))
    try:
        value = q.dequeue()
    except IndexError:
        pass # we _want_ an error here
    else:
        print('#10 should raise an IndexError, but got {}'.format(value))

if __name__ == '__main__':
    test_queue()
</code></pre>
<p>Now you can just run the file as a script, and it will run your tests.</p>
<p>In real life, you'll want to think of more complete tests that cover all the weird edge cases you can think of. And you'll probably want to use the <a href="http://docs.python.org/3/library/unittest.html" rel="noreferrer"><code>unittest</code></a> library or a third-party solution like <a href="http://nose.readthedocs.org/en/latest/" rel="noreferrer"><code>nose</code></a> to organize and simplify your tests.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use self.queue, otherwise you will get error</p>
<p>you did not return element when self.queue is not empty</p>
<p>And you'd better not return a message when queue is empty, should just raise exception </p>
<pre><code>class Queue:
    def __init__(self,queue):
        self.queue = []
    def dequeue(self):
        return self.queue.pop(0)
    def enqueue(self,element):
        self.queue.append(element)
</code></pre>
</div>
<span class="comment-copy">Use <code>self.queue</code> when referring to that member - e.g. <code>e = queue[0]</code> should be <code>e = self.queue[0]</code></span>
<span class="comment-copy">While this won't help you if this is for a class assignment, if you want to use a queue data structure in the future, you should almost always use <a href="http://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> rather than writing your own. It's implemented in C (and so very fast) and has had years of testing (so you're unlikely to stumble onto any bugs).</span>
<span class="comment-copy">Okay, thank-you for your answer that was very helpful. How would I go about running this then?</span>
<span class="comment-copy">@user2928929: Well, you need to write some kind of function that <i>uses</i> a queue, and the call that function. I can add an example to the answer.</span>
