<div class="post-text" itemprop="text">
<p>When using <code>pdb</code> to debug a curses application, the interactive debugger is useless, since <code>curses</code> messes up the terminal screen. Debugging post mortem works though, but that is a bit limited.</p>
<p>So what we probably need is having the debugger work in a terminal separately from the debuggee (the application that is being debugged).
Some alternatives which apply remote debugging (such as <code>xpdb</code>) appear either not to work with python 3.3 or give weird errors for other reasons.</p>
<p>So how can I use <code>pdb</code> in a different terminal, or in another proper way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use some debugger's functionalities  for attach to a running process. For instance you can try:</p>
<pre><code>gdb python &lt;pid&gt;
</code></pre>
<p>See how here <a href="https://wiki.python.org/moin/DebuggingWithGdb" rel="nofollow">Python Wiki DebuggingWithGdb</a>.</p>
<p>being  the pid of the process you want to debug. Also there is <a href="http://winpdb.org/" rel="nofollow">WinPdb</a> that allows you to connect to a remote or local process. WinPdb is well documented and I think is your best option.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've found that this bit of advice from the Python documentation helps:</p>
<blockquote>
<p>A common problem when debugging a curses application is to get your
  terminal messed up when the application dies without restoring the
  terminal to its previous state. In Python this commonly happens when
  your code is buggy and raises an uncaught exception. Keys are no
  longer echoed to the screen when you type them, for example, which
  makes using the shell difficult. In Python you can avoid these
  complications and make debugging much easier by importing the module
  curses.wrapper. It supplies a wrapper() function that takes a
  callable. It does the initializations described above, and also
  initializes colors if color support is present. It then runs your
  provided callable and finally deinitializes appropriately. The
  callable is called inside a try-catch clause which catches exceptions,
  performs curses deinitialization, and then passes the exception
  upwards. Thus, your terminal won’t be left in a funny state on
  exception.</p>
</blockquote>
<p>Please see <a href="http://docs.python.org/2/howto/curses.html" rel="nofollow">here</a> for info.</p>
</div>
<span class="comment-copy">Relatex: <a href="http://stackoverflow.com/questions/16304389/how-to-effectively-debug-a-multi-threaded-curses-client-server-application-with">How to effectively debug a multi-threaded curses client-server application with gdb?</a>. The principles should be the same. Also you could use the <code>pdb</code> module instead and instantiate a <a href="http://docs.python.org/2/library/pdb.html#pdb.Pdb" rel="nofollow noreferrer"><code>Pdb</code></a> with different <code>stdin</code>/<code>stdout</code> files.</span>
<span class="comment-copy"><code>pdb</code> appears not to have a <code>tty</code> command like <code>gdb</code> does.</span>
<span class="comment-copy">Changing stdin/stdout to a separate terminal seems to work for <code>set_trace()</code>. However, several things don't work properly, such as completion, command history, etc.</span>
<span class="comment-copy">Probably this is a missing feature. You should try to open a ticket on python's issues tracker, and maybe also in <a href="http://code.google.com/p/pdb-clone/" rel="nofollow noreferrer"><code>pdb-clone</code></a> issues tracker.</span>
<span class="comment-copy"><a href="http://bugs.python.org/issue20061" rel="nofollow noreferrer">bugs.python.org/issue20061</a></span>
<span class="comment-copy">For me winpdb doesn't work for some reason. When I run <code>python3.3 /usr/local/lib/python3.3/dist-packages/rpdb2.py --debuggee script.py</code> it gives an error: File "/usr/local/lib/python3.3/dist-packages/rpdb2.py", line 13682, in __getsignal     handler = g_signal_handlers.get(signum, g_signal_getsignal(signum)) ValueError: signal number out of range</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/20764082/cant-get-winpdb-working-with-python-3-3" title="cant get winpdb working with python 3 3">stackoverflow.com/questions/20764082/…</a></span>
<span class="comment-copy">I already do that - you should always do that when writing a curses application. The usage of <code>curses.wrapper</code> is also the reason that post mortem debugging works as pointed out in the OP. However, debugging a running curses application on-the-fly, by using <code>set_trace</code> for instance, doesn't work, since the curses application has not been shut down.</span>
<span class="comment-copy">The Py3 doc explains it better IMHO: <a href="https://docs.python.org/3/howto/curses.html" rel="nofollow noreferrer">docs.python.org/3/howto/curses.html</a></span>
