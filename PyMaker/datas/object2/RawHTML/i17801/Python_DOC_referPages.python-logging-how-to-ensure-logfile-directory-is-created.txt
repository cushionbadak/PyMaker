<div class="post-text" itemprop="text">
<p>I would like to use python's logging framework in my application, and I'd like to allow the end user of my application to specify the log file. (Via the Python logging framework's <a href="http://docs.python.org/dev/library/logging.config.html" rel="noreferrer">configuration mechanisms</a> which in my case is a section of a YAML file that the end user can edit to specify how logging behaves.)</p>
<p><strong>Is there a way to get the logging framework to ensure that a directory exists by creating it?</strong> Because the exact path to the logging filename is embedded in the configuration information specified by the end user, it is nontrivial for me as the application writer to parse this information to determine which directory should be created.</p>
<p>If the end user specifies "foo/bar/baz.log", I would like to make sure that the foo/bar directory is created.</p>
<p>Note: This is the Python equivalent of <a href="https://stackoverflow.com/questions/1263876/configuring-java-filehandler-logging-to-create-directories-if-they-do-not-exist">this SO question about Java logging</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Subclass <code>FileHandler</code> (or whatever handler you are using) to call <code>mkdir_p</code> during initialization:</p>
<pre><code>import logging
import os
import errno

def mkdir_p(path):
    """http://stackoverflow.com/a/600612/190597 (tzot)"""
    try:
        os.makedirs(path, exist_ok=True)  # Python&gt;3.2
    except TypeError:
        try:
            os.makedirs(path)
        except OSError as exc: # Python &gt;2.5
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else: raise

class MakeFileHandler(logging.FileHandler):
    def __init__(self, filename, mode='a', encoding=None, delay=0):            
        mkdir_p(os.path.dirname(filename))
        logging.FileHandler.__init__(self, filename, mode, encoding, delay)
</code></pre>
</div>
<span class="comment-copy">Not as part of the logging framework itself. I'd suggest to just use a <a href="http://stackoverflow.com/a/600612/1599111">helper function to emulate <code>mkdir -p</code></a> and create the directory yourself.</span>
<span class="comment-copy">I know how to do that part, but I'm not in control of the log file name, so as the application writer, I can't create the directory myself. I was wondering if there was some kind of hook inside the logging framework to do this.</span>
<span class="comment-copy">Huh? You said the end user will specify the log file name - so that name would be passed to your application by means of a command line argument, config file or such, no?</span>
<span class="comment-copy">Oh, I see. Then unfortunately I don't see how that could be done, short of monkey patching that behavior onto the <code>logging</code> module.</span>
<span class="comment-copy">@LukasGraf: You don't need to monkeypatch, just subclass. Which I was writing up, but unutbu beat me to it (and with complete code and a shorter explanation to boot).</span>
<span class="comment-copy">Nice answer, but I think it would be a bit simpler to just use <code>dirname = os.path.dirname(filename)</code> instead of using <code>split</code> to get both <code>dirname</code> and <code>basename</code> and ignoring one of them <code>basename</code>.</span>
<span class="comment-copy">Oh, also, if you're using Python 3.2+, you don't need the fancy <code>mkdir_p</code>; just use <a href="http://docs.python.org/3/library/os.html#os.makedirs" rel="nofollow noreferrer"><code>os.makedirs</code></a> with <code>exist_ok=True</code>.</span>
<span class="comment-copy">Looking at the links from the OP, you've suggested almost exactly the same thing as the top answer to the equivalent Java question (extend <code>RollingFileAdapter</code> as <code>MyRollingFileAdapter</code> and override its <code>setFile</code> method). Not too surprising, I guess, given that Python <code>logging</code> and <code>java.util.logging</code> are both based on <code>log4j</code>â€¦</span>
<span class="comment-copy">There should be an optional argument called mode. The documentation is not clear about the mode to use to create the file...</span>
