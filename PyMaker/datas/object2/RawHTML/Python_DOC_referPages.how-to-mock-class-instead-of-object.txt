<div class="post-text" itemprop="text">
<p>How can I mock the following?</p>
<pre><code>import os
from unittest import TestCase
from unittest.mock import patch

class A:
    VAR_A = os.environ.get("ABC")

    @classmethod
    def foo(cls):
       return cls.VAR_A

@patch.dict(os.environ, {'ABC': 'abc'})
class Test_A(TestCase):
    def test_foo(self):
        self.assertEqual(A.foo(), 'abc')
</code></pre>
<p>This <code>VAR_A</code> is not getting mocked. <code>AssertionError: None != 'abc'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>So, you want to test your <code>foo()</code> function. Instead of trying to change environment variable before <code>class</code> object definition try to mock already existing <code>class</code>'s attribute. As class object is created before your test is run and <code>VAR_A</code> attribute is already initialized.</p>
<pre><code>import os
from unittest import TestCase
from unittest.mock import patch

class A:
    VAR_A = os.environ.get("ABC")

    @classmethod
    def foo(cls):
       return cls.VAR_A

@patch.object(A, 'VAR_A', 'abc')
class Test_A(TestCase):
    def test_foo(self):
        self.assertEqual(A.foo(), 'abc')
</code></pre>
</div>
