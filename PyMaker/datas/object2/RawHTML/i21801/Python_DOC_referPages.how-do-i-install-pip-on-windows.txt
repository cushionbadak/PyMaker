<div class="post-text" itemprop="text">
<p><a href="https://pip.pypa.io/en/stable/" rel="noreferrer"><code>pip</code></a> is a replacement for <a href="http://setuptools.readthedocs.io/en/latest/easy_install.html" rel="noreferrer"><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows?  Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<h2>Python 2.7.9+ and 3.4+</h2>
<p>Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> (released March 2014) and <a href="https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7" rel="noreferrer">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href="http://en.wikipedia.org/wiki/Ruby_%28programming_language%29" rel="noreferrer">Ruby</a>, <a href="http://en.wikipedia.org/wiki/Node.js" rel="noreferrer">Node.js</a>, <a href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29" rel="noreferrer">Haskell</a>, <a href="http://en.wikipedia.org/wiki/Perl" rel="noreferrer">Perl</a>, <a href="http://en.wikipedia.org/wiki/Go_%28programming_language%29" rel="noreferrer">Go</a>—almost every other contemporary language with a majority open-source community. Thank you Python.</p>
<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href="https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719">in Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>
<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>
<h2>Python 2 ≤ 2.7.8 and Python 3 ≤ 3.3</h2>
<p>Flying in the face of its <a href="http://www.python.org/about/" rel="noreferrer">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was—until recently—ironically difficult to install.</p>
<h3>Official instructions</h3>
<p>Per <a href="https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip" rel="noreferrer">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>
<p>Download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>
<pre><code>python get-pip.py
</code></pre>
<p>You possibly need an administrator command prompt to do this. Follow <em><a href="http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx" rel="noreferrer">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>
<p>This installs the pip package, which (in Windows) contains ...\Scripts\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>
<h3>Alternative instructions</h3>
<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>
<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>
<ol>
<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools" rel="noreferrer">Install setuptools</a></li>
<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip" rel="noreferrer">Install pip</a></li>
</ol>
<p>For me, this installed Pip at <code>C:\Python27\Scripts\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\Python27\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>
<pre><code>pip install httpie
</code></pre>
<p>There you go (hopefully)! Solutions for common problems are given below:</p>
<h3>Proxy problems</h3>
<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href="http://docs.python.org/2/library/urllib.html" rel="noreferrer"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>
<pre><code>http://proxy_url:port
http://username:password@proxy_url:port
</code></pre>
<p>If you're really unlucky, your proxy might be a Microsoft <a href="https://en.wikipedia.org/wiki/NT_LAN_Manager" rel="noreferrer">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href="http://cntlm.sourceforge.net/" rel="noreferrer">http://cntlm.sourceforge.net/</a></p>
<h3>Unable to find vcvarsall.bat</h3>
<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>
<blockquote>
<p>Error: Unable to find vcvarsall.bat</p>
</blockquote>
<p>You can fix that by <a href="https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat">installing a C++ compiler</a> such as <a href="http://en.wikipedia.org/wiki/MinGW" rel="noreferrer">MinGW</a> or <a href="http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions" rel="noreferrer">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href="http://aka.ms/vcpython27" rel="noreferrer">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>
<p>Often though it's easier to check <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Christoph's site</a> for your package.</p>
</div>
<div class="post-text" itemprop="text">
<p><s>-- <strong>Outdated</strong> -- use distribute, not setuptools as described here. --</s><br/>
-- <strong>Outdated #2</strong> -- use setuptools as distribute is deprecated.</p>
<p>As you mentioned pip doesn't include an independent installer, but you can install it with its predecessor easy_install.</p>
<p>So:</p>
<ol>
<li>Download the last pip version from here: <a href="http://pypi.python.org/pypi/pip#downloads" rel="noreferrer">http://pypi.python.org/pypi/pip#downloads</a></li>
<li>Uncompress it</li>
<li>Download the last easy installer for Windows: (<strong>download the .exe at the bottom of <a href="http://pypi.python.org/pypi/setuptools" rel="noreferrer">http://pypi.python.org/pypi/setuptools</a></strong> ). Install it.</li>
<li>copy the uncompressed pip folder <strong>content</strong> into <code>C:\Python2x\</code> folder (don't copy the whole folder into it, just the content), because python command doesn't work outside <code>C:\Python2x</code> folder and then run:  <code>python setup.py install</code></li>
<li>Add your python <code>C:\Python2x\Scripts</code> to the path</li>
</ol>
<p>You are done. </p>
<p>Now you can use <code>pip install package</code> to easily install packages as in Linux :)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>2014 UPDATE:</strong></p>
<p>1) If you have installed Python 3.4 or later, pip is included with Python and should already be working on your system.</p>
<p>2) If you are running a version below Python 3.4 or if pip was not installed with Python 3.4 for some reason, then you'd probably use pip's official installation script <code>get-pip.py</code>. The pip installer now grabs setuptools for you, and works regardless of architecture (32-bit or 64-bit).</p>
<p>The installation <a href="http://www.pip-installer.org/en/latest/installing.html" rel="noreferrer">instructions are detailed here</a> and involve:</p>
<blockquote>
<p>To install or upgrade pip, securely download <a href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py" rel="noreferrer">get-pip.py</a>.</p>
<p>Then run the following (which may require administrator access):</p>
</blockquote>
<pre><code>python get-pip.py
</code></pre>
<blockquote>
<p>To upgrade an existing setuptools (or distribute), run <code>pip install -U setuptools</code></p>
</blockquote>
<p>I'll leave the two sets of old instructions below for posterity.</p>
<p><strong>OLD Answers:</strong></p>
<p>For Windows editions of the <strong>64 bit</strong> variety - 64-bit Windows + Python used to require a separate installation method due to ez_setup, but I've tested the new distribute method on 64-bit Windows running 32-bit Python and 64-bit Python, and you can now use the same method for all versions of Windows/Python 2.7X:</p>
<p><strong>OLD Method 2</strong> using <a href="https://pypi.python.org/pypi/distribute" rel="noreferrer">distribute</a>:</p>
<ol>
<li>Download <a href="http://python-distribute.org/distribute_setup.py" rel="noreferrer">distribute</a> - I threw mine in <code>C:\Python27\Scripts</code> (feel free to create a <code>Scripts</code> directory if it doesn't exist.</li>
<li>Open up a command prompt (on Windows you should check out <a href="http://code.google.com/p/conemu-maximus5/" rel="noreferrer">conemu2</a> if you don't use <a href="http://en.wikipedia.org/wiki/Windows_PowerShell" rel="noreferrer">PowerShell</a>) and change (<code>cd</code>) to the directory you've downloaded <code>distribute_setup.py</code> to.</li>
<li>Run distribute_setup: <code>python distribute_setup.py</code> (This will not work if your python installation directory is not added to your path - <a href="https://stackoverflow.com/a/6318188/705198">go here for help</a>)</li>
<li>Change the current directory to the <code>Scripts</code> directory for your Python installation (<code>C:\Python27\Scripts</code>) or add that directory, as well as the Python base installation directory to your %PATH% environment variable.</li>
<li>Install pip using the newly installed setuptools: <code>easy_install pip</code></li>
</ol>
<p>The last step will not work unless you're either in the directory <code>easy_install.exe</code> is located in (C:\Python27\Scripts would be the default for Python 2.7), or you have that directory added to your path.</p>
<p><strong>OLD Method 1</strong> using ez_setup:</p>
<p><a href="http://pypi.python.org/pypi/setuptools#windows" rel="noreferrer">from the setuptools page</a> --</p>
<blockquote>
<p>Download <a href="http://peak.telecommunity.com/dist/ez_setup.py" rel="noreferrer">ez_setup.py</a> and run it; it will download the appropriate .egg file and install it for you. (Currently, the provided .exe installer does not support 64-bit versions of Python for Windows, due to a distutils installer compatibility issue.</p>
</blockquote>
<p>After this, you may continue with:</p>
<ol start="2">
<li>Add <code>c:\Python2x\Scripts</code> to the Windows path (replace the <code>x</code> in <code>Python2x</code> with the actual version number you have installed)</li>
<li>Open a new (!) DOS prompt. From there run <code>easy_install pip</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>2016+ Update:</strong> </p>
<p>These answers are outdated or otherwise wordy and difficult.</p>
<p>If you've got Python 3.4+ or 2.7.9+, it will be <a href="https://docs.python.org/3.4/whatsnew/3.4.html#whatsnew-pep-453" rel="noreferrer">installed by default</a> on Windows.  Otherwise, in short:</p>
<ol>
<li>Download the pip installer: 
<a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer">https://bootstrap.pypa.io/get-pip.py</a></li>
<li>If paranoid, inspect file to confirm it isn't malicious
(must b64 decode).</li>
<li>Open a console in the download folder as Admin and run
<code>get-pip.py</code>.  Alternatively, right-click its icon in Explorer and choose the "run as Admin...".</li>
</ol>
<p>The new binaries <code>pip.exe</code> (and the deprecated <code>easy_install.exe</code>) will be found in the <code>"%ProgramFiles%\PythonXX\Scripts"</code> folder (or similar), which is likely not in your <code>PATH</code> variable.  I recommend adding it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.4, which  was released in March 2014, comes with <code>pip</code> included:<br/>
<a href="http://docs.python.org/3.4/whatsnew/3.4.html">http://docs.python.org/3.4/whatsnew/3.4.html</a><br/>
So since the release of Python 3.4, the up-to-date way to install pip on Windows is to just install Python.
When sticking to all defaults during installation, pip will be installed to<br/>
<code>C:\Python34\Scripts\pip3.exe</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>When I have to use Windows, I use ActivePython, which automatically adds everything to your PATH and includes a package manager called <a href="http://code.activestate.com/pypm/" rel="noreferrer">PyPM</a> which provides <em>binary</em> package management making it faster and simpler to install packages.</p>
<p><code>pip</code> and <code>easy_install</code> aren't exactly the same thing, so there are some things you can get through <code>pip</code> but not <code>easy_install</code> <a href="https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install/3224103#3224103">and vice versa</a>.</p>
<p>My recommendation is that you get <a href="http://www.activestate.com/activepython/downloads" rel="noreferrer">ActivePython Community Edition</a> and don't worry about the huge hassle of getting everything set up for Python on Windows. Then, you can just use <code>pypm</code>.</p>
<p>In case you want to use <code>pip</code> you have to check the <code>PyPM</code> option in the ActiveState installer. After installation you only need to logoff and log on again, and <code>pip</code> will be available on the commandline, because it is contained in the ActiveState installer <code>PyPM</code> option and the paths have been set by the installer for you already. <code>PyPM</code> will also be available, but you do not have to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The up-to-date way is to use Windows' package manager <a href="http://chocolatey.org/">Chocolatey</a>.</p>
<p>Once this is installed, all you have to do is open a command prompt and run the following the three commands below, which will install Python 2.7, easy_install and pip. It will automatically detect whether you're on x64 or x86 Windows.</p>
<pre><code>cinst python
cinst easy.install
cinst pip
</code></pre>
<p>All of the other Python packages on the Chocolatey Gallery can be found <a href="http://chocolatey.org/packages?q=python">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update March 2015</strong></p>
<p>Python 2.7.9 and later (on the Python 2 series), and Python 3.4 and later include pip by default, so you may have pip already.</p>
<p>If you don't, run this one line command on your prompt (which may require administrator access):</p>
<pre><code>python -c "exec('try: from urllib2 import urlopen \nexcept: from urllib.request import urlopen');f=urlopen('https://bootstrap.pypa.io/get-pip.py').read();exec(f)"
</code></pre>
<p>It will install <a href="http://www.pip-installer.org/" rel="noreferrer">pip</a>. If <a href="https://bitbucket.org/pypa/setuptools/" rel="noreferrer">Setuptools</a> is not already installed, <code>get-pip.py</code> will install it for you too.</p>
<p>As mentioned in comments, the above command will download code from the Pip source code repository at <a href="http://en.wikipedia.org/wiki/GitHub" rel="noreferrer">GitHub</a>, and dynamically run it at your environment. So be noticed that this is a shortcut of the steps download, inspect and run, <strong>all with a single command using Python itself</strong>. If you trust Pip, proceed without doubt.</p>
<p>Be sure that your Windows environment variable PATH includes Python's folders (for Python 2.7.x default install: <code>C:\Python27</code> and <code>C:\Python27\Scripts</code>, for Python 3.3x: <code>C:\Python33</code> and <code>C:\Python33\Scripts</code>, and so on).</p>
</div>
<div class="post-text" itemprop="text">
<h2>Installers</h2>
<p>I've built Windows installers for both <a href="http://pypi.python.org/pypi/distribute" rel="noreferrer">distribute</a> and <a href="http://www.pip-installer.org/" rel="noreferrer">pip</a> here (the goal being to use <code>pip</code> without having to either bootstrap with <code>easy_install</code> or save and run Python scripts):</p>
<ul>
<li><a href="http://download.sjsoft.com/opensource/distribute-0.6.27.win32.exe" rel="noreferrer">distribute-0.6.27.win32.exe</a></li>
<li><a href="http://download.sjsoft.com/opensource/pip-1.1.win32.exe" rel="noreferrer">pip-1.1.win32.exe</a></li>
</ul>
<p>On Windows, simply download and install first <code>distribute</code>, then <code>pip</code> from the above links. The <code>distribute</code> link above does contain stub <code>.exe</code> installers, and these are currently 32-bit only. I haven't tested the effect on 64-bit Windows.</p>
<h2>Building on Windows</h2>
<p>The process to redo this for new versions is not difficult, and I've included it here for reference.</p>
<h3>Building <code>distribute</code></h3>
<p>In order to get the stub <code>.exe</code> files, you need to have a Visual C++ compiler (it is apparently compilable with MinGW as well)</p>
<pre class="lang-none prettyprint-override"><code>hg clone https://bitbucket.org/tarek/distribute
cd distribute
hg checkout 0.6.27
rem optionally, comment out tag_build and tag_svn_revision in setup.cfg
msvc-build-launcher.cmd
python setup.py bdist_win32
cd ..
echo build is in distribute\dist
</code></pre>
<h3>Building <code>pip</code></h3>
<pre class="lang-none prettyprint-override"><code>git clone https://github.com/pypa/pip.git
cd pip
git checkout 1.1
python setup.py bdist_win32
cd ..
echo build is in pip\dist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following works for Python 2.7. Save this script and launch it: <br> <br>
<a href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py" rel="noreferrer">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a> <br> <br>
Pip is installed, then add the path to your environment : <br/></br></br></br></br></p>
<pre><code>C:\Python27\Scripts
</code></pre>
<p>Finally</p>
<pre><code>pip install virtualenv
</code></pre>
<p>Also you need Microsoft <a href="http://go.microsoft.com/?linkid=7729279" rel="noreferrer">Visual C++ 2008 Express</a> to get the good compiler and avoid these kind of messages when installing packages:</p>
<pre><code>error: Unable to find vcvarsall.bat
</code></pre>
<p>If you have a 64-bit version of Windows 7, you may read <em><a href="http://tech.valgog.com/2010/01/after-installing-64-bit-windows-7-at.html" rel="noreferrer">64-bit Python installation issues on 64-bit Windows 7</a></em> to successfully install the Python executable package (issue with registry entries).</p>
</div>
<div class="post-text" itemprop="text">
<p>To install pip <em>globally</em> on Python 2.x, easy_install appears to be the best solution as Adrián states.</p>
<p>However the <a href="http://www.pip-installer.org/en/latest/installing.html" rel="nofollow noreferrer">installation instructions</a> for pip recommend using <a href="http://www.virtualenv.org" rel="nofollow noreferrer">virtualenv</a> since every virtualenv has pip installed in it automatically.  This does not require root access or modify your system Python installation.</p>
<p>Installing virtualenv still requires easy_install though.</p>
<p><em>2018 update:</em> </p>
<p>Python 3.3+ now includes the <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">venv module</a> for easily creating virtual environments like so:</p>
<p><code>python3 -m venv /path/to/new/virtual/environment</code></p>
<p>See documentation for different platform methods of activating the environment after creation, but typically one of:</p>
<pre><code>$ source &lt;venv&gt;/bin/activate 

C:\&gt; &lt;venv&gt;\Scripts\activate.bat
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To use pip, it is not mandatory that you need to install pip in the system directly. You can use it through <a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer"><code>virtualenv</code></a>. What you can do is follow these steps:</p>
<ul>
<li>Download virtualenv tar.gz file from <a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer">https://pypi.python.org/pypi/virtualenv</a></li>
<li>Unzip it with 7zip or some other tool</li>
</ul>
<p>We normally need to install Python packages for one particular project. So, now create a project folder, let’s say myproject.</p>
<ul>
<li>Copy the <strong>virtualenv.py</strong> file from the decompressed folder of <code>virtualenv</code>, and paste inside the <strong>myproject</strong> folder</li>
</ul>
<p>Now create a virtual environment, let’s say <strong>myvirtualenv</strong> as follows, inside the <strong>myproject</strong> folder:</p>
<pre><code>python virtualenv.py myvirtualenv
</code></pre>
<p>It will show you:</p>
<pre><code>New python executable in myvirtualenv\Scripts\python.exe
Installing setuptools....................................done.
Installing pip.........................done.
</code></pre>
<p>Now your virtual environment, <strong>myvirtualenv</strong>, is created inside your project folder. You might notice, pip is now installed inside you virtual environment. All you need to do is activate the virtual environment with the following command.</p>
<pre><code>myvirtualenv\Scripts\activate
</code></pre>
<p>You will see the following at the command prompt:</p>
<pre><code>(myvirtualenv) PATH\TO\YOUR\PROJECT\FOLDER&gt;pip install package_name
</code></pre>
<p>Now you can start using pip, but make sure you have activated the virtualenv looking at the left of your prompt.</p>
<p>This is one of the easiest way to install pip i.e. inside virtual environment, but you need to have virtualenv.py file with you.</p>
<p>For more ways to install pip/virtualenv/virtualenvwrapper, you can refer to <a href="http://thegauraw.tumblr.com" rel="noreferrer">thegauraw.tumblr.com</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just wanted to add one more solution for those having issues installing setuptools from Windows 64-bit. The issue is discussed in this bug on python.org and is still unresolved as of the date of this comment. A simple workaround is mentioned and it works flawlessly. One registry change did the trick for me.</p>
<p>Link: <a href="http://bugs.python.org/issue6792#" rel="noreferrer">http://bugs.python.org/issue6792#</a></p>
<p>Solution that worked for me...:</p>
<p>Add this registry setting for 2.6+ versions of Python:</p>
<pre><code> [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Python\PythonCore\2.6\InstallPath]
 @="C:\\Python26\\"
</code></pre>
<p>This is most likely the registry setting you will already have for Python 2.6+:</p>
<pre><code> [HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\2.6\InstallPath]
 @="C:\\Python26\\"
</code></pre>
<p>Clearly, you will need to replace the 2.6 version with whatever version of Python you are running.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Updated at 2016 :</strong> <code>Pip</code> should already be included in <code>Python 2.7.9+ or 3.4+</code>, but if for whatever reason it is not there, you can use the following one-liner.</p>
<ul>
<li>Download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer">https://bootstrap.pypa.io/get-pip.py</a> and run it with Administrator permission <code>python get-pip.py</code> (If you are on Linux, use <code>sudo python get-pip.py</code>)</li>
</ul>
<p>PS:</p>
<ol>
<li><p>This should already be satisfied in most cases but, if necessary, be sure that your environment variable PATH includes Python's folders (for example, <code>Python 2.7.x</code> on Windows default install: <code>C:\Python27 and C:\Python27\Scripts</code>, for <code>Python 3.3x</code>: <code>C:\Python33 and C:\Python33\Scripts</code>, etc)</p></li>
<li><p>I encounter same problem and then found such perhaps easiest way (one liner!) mentioned on official website here: <a href="http://www.pip-installer.org/en/latest/installing.html" rel="noreferrer">http://www.pip-installer.org/en/latest/installing.html</a></p></li>
</ol>
<p>Can't believe there are so many lengthy (perhaps outdated?) answers out there. Feeling thankful to them but, please up-vote this short answer to help more new comers!</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way I found so far, is just two lines of code:</p>
<pre><code>curl http://python-distribute.org/distribute_setup.py | python
curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python
</code></pre>
<p>It was tested on Windows 8 with <a href="http://en.wikipedia.org/wiki/Windows_PowerShell" rel="noreferrer">PowerShell</a>, Cmd, and <a href="http://en.wikipedia.org/wiki/Git_%28software%29" rel="noreferrer">Git</a> Bash (<a href="http://en.wikipedia.org/wiki/MinGW" rel="noreferrer">MinGW</a>).</p>
<p>And you probably want to add the path to your environment. It's somewhere like <code>C:\Python33\Scripts</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>For latest Python Download - I have python 3.6 on windows. You don't have to wonder everything you need is there , take  a breath i will show you how to do it.</strong></p>
<ol>
<li>make sure where you install python for me its was in the following directory
<a href="https://i.stack.imgur.com/ca5z1.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ca5z1.png"/></a></li>
</ol>
<blockquote>
<p>Now , lets add python and pip into environment variable path settings
  if you are on windows, so that typing pip or python anywhere call
  python aor pip from where they are installed.</p>
</blockquote>
<p>So, PIP is found under the folder in above screen "<strong>SCRIPTS</strong>"
Lets add Python and PIP in environment variable path. 
<a href="https://i.stack.imgur.com/UETzB.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/UETzB.png"/></a></p>
<p>Almost Done , Let test with CMD to install goole package using pip.</p>
<pre><code>pip install google
</code></pre>
<p><a href="https://i.stack.imgur.com/Pus98.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Pus98.png"/></a></p>
<p>BYE BYE! </p>
</div>
<div class="post-text" itemprop="text">
<p>Here how to install pip with easy way.</p>
<ol>
<li>copy and paste <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer">these</a> content in a file as <strong>get-pip.py</strong></li>
<li>copy and paste <strong>get-pip.py</strong> into python folder.<code>C:\Python27</code></li>
<li>Double click to <strong>get-pip.py</strong> file.it will install pip to your computer.</li>
<li>Now you have to add <code>C:\Python27\Scripts</code> path to your enviroment variable.Because it includes <code>pip.exe</code> file.</li>
<li>Now you are ready to use pip. Open <code>cmd</code> and type as <br/><code>pip install package_name</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://code.google.com/p/pythonxy/">PythonXY</a> comes with <code>pip</code> included, among <a href="https://code.google.com/p/pythonxy/wiki/Welcome?tm=6">others</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I use the cross-platform <a href="https://www.continuum.io/downloads" rel="noreferrer">Anaconda</a> package manager from continuum.io on Windows and it is reliable.  It has virtual environment management and a fully featured shell with common utilities (e.g. conda, pip).</p>
<pre><code>&gt; conda install &lt;package&gt;               # access distributed binaries

&gt; pip install &lt;package&gt;                 # access PyPI packages 
</code></pre>
<p><code>conda</code> also comes with binaries for libraries with non-Python dependencies, e.g. <code>pandas</code>, <code>numpy</code>, etc.  This proves useful particularly on Windows as it can be  hard to correctly compile C dependencies.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had some issues installing in different ways when I followed instructions here. I think it's very tricky to install in every Windows environment in the same way. In my case I need Python 2.6, 2.7 and 3.3 in the same machine for different purposes so that's why I think there're more problems.
But the following instructions worked perfectly for me, so might be depending on your environment you should try this one:</p>
<p><a href="http://docs.python-guide.org/en/latest/starting/install/win/" rel="noreferrer">http://docs.python-guide.org/en/latest/starting/install/win/</a></p>
<p>Also, due to the different environments I found incredible useful to use Virtual Environments, I had websites that use different libraries and it's much better to encapsulate them into a single folder, check out the instructions, briefly if PIP is installed you just install VirtualEnv:</p>
<pre><code>pip install virtualenv
</code></pre>
<p>Into the folder you have all your files run</p>
<pre><code>virtualenv venv
</code></pre>
<p>And seconds later you have a virtual environment with everything in venv folder, to activate it run venv/Scripts/activate.bat (deactivate the environment is easy, use deactivate.bat). Every library you install will end up in venv\Lib\site-packages and it's easy to move your whole environment somewhere.</p>
<p>The only downside I found is some code editors can't recognize this kind of environments, and you will see warnings in your code because imported libraries are not found. Of course there're tricky ways to do it but it would be nice editors keep in mind Virtual Environments are very normal nowadays.</p>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Download script: <a href="https://raw.github.com/pypa/pip/master/contrib/get-pip.py" rel="noreferrer">https://raw.github.com/pypa/pip/master/contrib/get-pip.py</a></li>
<li>Save it on drive somewhere like C:\pip-script\get-pip.py</li>
<li>Navigate to that path from command prompt and run " python get-pip.py "</li>
</ol>
<p>Guide link: <a href="http://www.pip-installer.org/en/latest/installing.html#install-pip" rel="noreferrer">http://www.pip-installer.org/en/latest/installing.html#install-pip</a></p>
<p>Note: Make sure scripts path like this (C:\Python27\Scripts) is added int %PATH% environment variable as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's very simple:</p>
<pre><code>Step 1: wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
Step 2: wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
Step 2: python ez_setup.py
Step 3: python get-pip.py
</code></pre>
<p>(Make sure your Python and Python script directory (for example, <code>C:\Python27</code> and <code>C:\Python27\Scripts</code>) are in the PATH.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Working as of Feb 04 2014 :):</p>
<p>If you have tried installing pip through the Windows installer file from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip" rel="nofollow">http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</a> as suggested by @Colonel Panic, you might have installed the pip package manager successfully, but you might be unable to install any packages with pip. You might also have got the same SSL error as I got when I tried to install <a href="https://en.wikipedia.org/wiki/Beautiful_Soup" rel="nofollow">Beautiful Soup 4</a> if you look in the pip.log file:</p>
<pre><code>Downloading/unpacking beautifulsoup4
  Getting page https://pypi.python.org/simple/beautifulsoup4/
  Could not fetch URL https://pypi.python.org/simple/beautifulsoup4/: **connection error: [Errno 1] _ssl.c:504: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed**
  Will skip URL https://pypi.python.org/simple/beautifulsoup4/ when looking for download links for beautifulsoup4
</code></pre>
<p>The problem is an issue with an old version of <a href="http://en.wikipedia.org/wiki/OpenSSL" rel="nofollow">OpenSSL</a> being incompatible with pip 1.3.1 and above versions. The easy workaround for now, is to install pip 1.2.1, which does not require <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security" rel="nofollow">SSL</a>:</p>
<p>Installing Pip on Windows:</p>
<ol>
<li>Download pip 1.2.1 from <a href="https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz" rel="nofollow">https://pypi.python.org/packages/source/p/pip/pip-1.2.1.tar.gz</a></li>
<li>Extract the pip-1.2.1.tar.gz file</li>
<li>Change directory to the extracted folder: <code>cd &lt;path to extracted folder&gt;/pip-1.2.1</code></li>
<li>Run <code>python setup.py install</code></li>
<li>Now make sure <code>C:\Python27\Scripts</code> is in PATH because pip is installed in the <code>C:\Python27\Scripts</code> directory unlike <code>C:\Python27\Lib\site-packages</code> where Python packages are normally installed</li>
</ol>
<p>Now try to install any package using pip.</p>
<p>For example, to install the <code>requests</code> package using pip, run this from cmd:</p>
<pre><code>pip install requests
</code></pre>
<p>Whola! <code>requests</code> will be successfully installed and you will get a success message.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>pip</strong> is already installed if you're using Python 2 &gt;=2.7.9 or Python 3 &gt;=3.4 binaries downloaded from <a href="http://python.org" rel="nofollow">python.org</a>, but you'll need to upgrade pip.</p>
<p>On Windows upgrade can be done easily </p>
<p>Go to Python command line and run below Python command</p>
<p>python -m pip install -U pip</p>
<p>Installing with get-pip.py</p>
<p>Download <a href="https://bootstrap.pypa.io/get-pip.py" rel="nofollow">get-pip.py</a> in the same folder or any other folder of your choice. I am assuming you will download it in the same folder from you have python.exe file and run this command </p>
<pre><code>python get-pip.py
</code></pre>
<p>Pip's <a href="https://pip.pypa.io/en/latest/installing/" rel="nofollow">installation guide</a> is pretty clean and simple.</p>
<p>Using this you should be able to get started with Pip in under two minutes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just download setuptools-15.2.zip (md5), from here <a href="https://pypi.python.org/pypi/setuptools#windows-simplified" rel="nofollow">https://pypi.python.org/pypi/setuptools#windows-simplified</a> , and run ez_setup.py.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you can get <a href="https://sites.google.com/site/pydatalog/python/pip-for-windows" rel="nofollow">pip-Win</a> which is an all-in-one installer for pip and <a href="https://pypi.python.org/pypi/virtualenv" rel="nofollow"><code>virtualenv</code></a> on Windows and its GUI.</p>
<ul>
<li>Switch from one Python interpreter (i.e. version) to another (including py and pypy)</li>
<li>See all installed packages, and whether they are up-to-date</li>
<li>Install or upgrade a package, or upgrade pip itself</li>
<li>Create and delete virtual environments, and switch between them</li>
<li>Run the <a href="http://en.wikipedia.org/wiki/IDLE_%28Python%29" rel="nofollow">IDLE</a> or another Python script, with the selected interpreter</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>if you even have other problems with pip version you can try this </p>
<pre><code>pip install --trusted-host pypi.python.org --upgrade pip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried ?</p>
<pre><code>python -m ensurepip
</code></pre>
<p>it's probably the easiest to install pip on any system.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the question makes it seem like the answer is simpler than it really is. Running of pip will sometimes require native compilation of a module (64-bit Numpy is a common example of that). In order for pip's compilation to succeed, you need Python which was compiled with the same version of MSVC as the one pip is using. Standard Python distributions are compiled with MSVC 2008. You can install an Express version of VC2008, but it is not maintained. Your best bet is to get an express version of a later MSVC and compile Python. Then PIP and Python will be using the same MSVC version.</p>
</div>
<div class="post-text" itemprop="text">
<p>How to install pip:</p>
<ol>
<li>Download and install <a href="http://www.activestate.com/activepython/downloads" rel="nofollow">ActivePython</a></li>
<li>Open a command prompt (CMD)</li>
<li>Type <code>pypm install pip</code></li>
</ol>
</div>
<span class="comment-copy">While I agree with you, all windows programs install without the need to install the installer.</span>
<span class="comment-copy">From PyCon 2011: <a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496" rel="nofollow noreferrer">blip.tv/pycon-us-videos-2009-2010-2011/…</a> The dirty secret is that pip is a wrapper for easy_install :)</span>
<span class="comment-copy">Like how apt-get uses dpkg at the core - but it doesn't make it any less useful!</span>
<span class="comment-copy">Ruby ships with Gem and Nodejs with Npm, giving users full-featured package management out the box. I for one am envious. <a href="http://stackoverflow.com/a/11453972/284795">stackoverflow.com/a/11453972/284795</a></span>
<span class="comment-copy">look at the newer answers.  the older answers with more upvotes are not as easy to follow.</span>
<span class="comment-copy">Is that "can be fixed and will not be fixed" or "cannot be fixed and will not be fixed"?</span>
<span class="comment-copy">@MikeMcMahon that happened to me too. Put Python before Perl in your path, so typing <code>pip</code> gets you the Python package manager.</span>
<span class="comment-copy">I didn't have to do any of this, I just followed the instructions on <a href="http://www.pip-installer.org/en/latest/installing.html" rel="nofollow noreferrer">pip-installer.org/en/latest/installing.html</a> (basically you just write "python ez_setup.py" and then "python get-pip.py")</span>
<span class="comment-copy">This is probably a dumb question. I entered python get-pip.py on a windows prompt but get "python is not recognized as an internal or external command, operable program or batch file." Am I doing something wrong? I have Python 2.7.8 installed. Do I need to change the directory? Thanks.</span>
<span class="comment-copy">To start the "build in" pip you have to use <code>python -m pip</code> on windows!</span>
<span class="comment-copy">When run the command "python setup.py install", if you got "error: pip.egg-info\PKG-INFO: Permission denied", then try to remove the read only attribute on the uncompressed pip directory.</span>
<span class="comment-copy">If you install a 64-bit version of python, setuptools will not detect your python executable. I found some binaries here that will, though (unofficial): <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs</a></span>
<span class="comment-copy">Once I've installed <code>pip</code> using <code>easy_install</code> can I remove <code>setuptools</code> by <code>pip uninstall setuptools</code>? Is this okay or would it lead to issues later on?</span>
<span class="comment-copy">As an alternative to step 4, simply run setup.py from wherever pip was dowloaded to e.g. from firefox C:\Users\Tony\Downloads\pip-1.2.1\pip-1.2.1</span>
<span class="comment-copy">This method still works very well as of 02/2016 to install pip (and then nose!) on Python 2.6 on Windows. Indeed, using Gohlke's binaries is no longer an option since he replaced them all by wheels.</span>
<span class="comment-copy">So the install is easyinstall, then pip,  then virtualenv, then virtualenvwrapper , then configure independents environments. with script modif in the middle for dealing with proxies... aaarrrgg</span>
<span class="comment-copy">@nicolas Yeah, easyinstall is just an outdated interface to setuptools. Pip is awesome, and virtualenv offers the kind of control that you don't get in many other languages without WAY more hackish tactics; perl being the only comparable exception. Ruby has gemsets, but in order to easily swap out Rubies, it's recommended to use either rbenv or rvm - both of which have always felt somewhat hackish to me (though they work beautifully once set up properly).</span>
<span class="comment-copy">This exact procedure is automated by <a href="https://sites.google.com/site/pydatalog/python/pip-for-windows" rel="nofollow noreferrer">pip for windows</a>.</span>
<span class="comment-copy">+1, help note for noobs like me: don't type "python2x" literally in the windows path environment variable. Replace x with the python version you have, e.g. python27</span>
<span class="comment-copy">Id like to note, i had to use 'python -m pip' to use the module in windows.</span>
<span class="comment-copy">thanks, make sure you add PATH to your system variable</span>
<span class="comment-copy">MD5 checksums of the files: get-pip.py=60a3d165e93999895e26b96681b65090  setuptools-1.3.2.tar.gz=441f2e58c0599d31597622a7b9eb605f</span>
<span class="comment-copy">As of pip 1.5.1 (Jan 2014) ez_setup/setuptools/distribute isn't needed ahead of time. If needed get-pip will acquire the requirements as well as pip itself.</span>
<span class="comment-copy">Good overview of python packaging past and present as of Aug 2016: <a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html" rel="nofollow noreferrer">glyph.twistedmatrix.com/2016/08/python-packaging.html</a></span>
<span class="comment-copy">Note that it also applies to Python 2.7.9</span>
<span class="comment-copy">Python 2.x is legacy, Python 3.x is the present and future of the language, according to <a href="https://wiki.python.org/moin/Python2orPython3" rel="nofollow noreferrer">Python2orPython3</a></span>
<span class="comment-copy">Hmm I installed Python 3.4.4 and I could find pip3.exe following the path in this answer, but in cmd <code>pip</code> is still not recognized. Can anyone help?</span>
<span class="comment-copy">In a command prompt, cd to the directory where <code>pip3.exe</code> resides and execute for example <code>pip3 install -U sphinx</code>.</span>
<span class="comment-copy">@IgorGanapolsky New versions of Python come with pip installed as a module, and not as an installed executable (at least at the path listed). With Windows 10 and Python 3.6.1, I used <code>py -m pip install xxx</code> from the Windows command-prompt successfully.</span>
<span class="comment-copy">It must be noted that ActivePython also includes pip and easy_install. PyPM is a binary package manger, while pip/easy_install are, essentially, source package managers. See <a href="http://code.activestate.com/help/faq/#how-is-pypm-related-to-pip-and-easy_install" rel="nofollow noreferrer">code.activestate.com/help/faq/…</a></span>
<span class="comment-copy">@Rafe Kettlet - When I try to install pip in Activepython it gives this error</span>
<span class="comment-copy">@Jitendra - ActivePython already installs pip for you, so there is no need to install it again afterwards.</span>
<span class="comment-copy">This is really the only <b>SANE</b> solution on windows. Not because of <code>PyPM</code>, but because it comes with <code>pip</code> and adds things automatically to the <code>PATH</code>.</span>
<span class="comment-copy">I can only support this solution, happily used ActivePython for years.</span>
<span class="comment-copy">And if python is already installed? This caused me nightmares. With python already installed via other means and trying cinst pip just game me errors.</span>
<span class="comment-copy">Chocolatey doesn't seem very robust especially wrt. dependencies. <code>cinst pip</code> at the time of writing just assumes easy_install has been installed, which is not necessarily the case.</span>
<span class="comment-copy">didn't worked for me :(</span>
<span class="comment-copy">@Philipp, someone in their infinite wisdom unfortunately rejected that edit...</span>
<span class="comment-copy">Just tried it.  "cinst easy.install" fails but "cinst pip" installs easy.install.  BTW, Windows 10.</span>
<span class="comment-copy">This should work, but it is worth noting that this could be extremely dangerous if one doesn't have the expertise or bother to inspect the url-file before executing such a command.</span>
<span class="comment-copy">I think the simplicity is worth the risk. We are talking about a hack at python-distribute.org? There is a similar approach with <a href="http://wbond.net/sublime_packages/package_control/installation" rel="nofollow noreferrer">sublime package control</a>.</span>
<span class="comment-copy">Yes, I have checked the distribute URL and it is ok (for now at least).  The problem is in the general case where the inexperienced run remote executables on recommendation from a forum.  It should come at least with a minimal warning.</span>
<span class="comment-copy">I agree with you, the real issue is for who execute arbitrary code after read a post. The question is: can you trust me? I'll update the answer to notify the flow of actions being executed. I think that up/down votes can be used as "trust filter" too.</span>
<span class="comment-copy">Here's a pure python adaptation of <i>@h--n</i> <a href="http://stackoverflow.com/a/15626900/14420">answer which uses curl</a>, and the urlib example above by <i>Fernando</i>. It attempts to adapt to py2 or 3 and issues a usage warning about executing arbitrary code: <a href="https://gist.github.com/maphew/5393935" rel="nofollow noreferrer">gist.github.com/maphew/5393935</a></span>
<span class="comment-copy">Ah, I missed that there's a <code>launcher.c</code> that needs manual compiling... adjusted and rebuilt <code>distribute</code> - that does mean that this is <code>win32</code>-only...</span>
<span class="comment-copy">@Muhd: Which links? I can download the distribute and pip executables fine...</span>
<span class="comment-copy">link not working. please update it</span>
<span class="comment-copy">I believe you'll still need distribute or setuptools.</span>
<span class="comment-copy">On my system, I also needed to add C:\Python33\Scripts to the PATH.</span>
<span class="comment-copy">You forgot to mention you don't have firewall issues</span>
<span class="comment-copy">Curl isn't shipped with windows.</span>
<span class="comment-copy">@GringoSuave Curl is so commonly used, everyone should have it. If that's not preferred, these two scripts can be just downloaded with any browser directly.</span>
<span class="comment-copy">Combine this with @Fernando's answer, <a href="http://stackoverflow.com/a/15294806/14420">stackoverflow.com/a/15294806/14420</a>, for how to do the same without curl.</span>
<span class="comment-copy">Install GitHub for Windows and it customizes your Powershell with many goodies, such as curl.</span>
<span class="comment-copy">I don't see scripts folder on my machine I am using python 3.3</span>
<span class="comment-copy">that doesn't have anything to do with pip, but it has everything to do with how your development environment is set up, including which environment variables point where, and whether everything is on your <code>PATH</code>. Yes, your version of MSVC needs to match the one used to compile Python, but pip is just using what's in the environment.</span>
<span class="comment-copy">@MattDMo, <b>generally when people ask a question about how to install a package manager, that means they want to know how to also configure it (and its running environment) so that it can install packages</b>.  Most people run into trouble when trying to install numpy with PIP because they have a later version of MSVC installed and after pip pulls in the numpy sources, setup.py can't compile it.  I stand by my answer.</span>
