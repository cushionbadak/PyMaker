<div class="post-text" itemprop="text">
<p>I've seen several approaches for finding the path of a module by first importing it. Is there a way to do this without importing the module?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/library/pkgutil.html" rel="noreferrer">pkgutil</a> module:</p>
<pre><code>&gt;&gt;&gt; import pkgutil
&gt;&gt;&gt; package = pkgutil.get_loader("pip")
&gt;&gt;&gt; package.filename
'/usr/local/lib/python2.6/dist-packages/pip-0.7.1-py2.6.egg/pip'
&gt;&gt;&gt; package = pkgutil.get_loader("threading")
&gt;&gt;&gt; package.filename
'/usr/lib/python2.6/threading.py'
&gt;&gt;&gt; package = pkgutil.get_loader("sqlalchemy.orm")
&gt;&gt;&gt; package.filename
'/usr/lib/pymodules/python2.6/sqlalchemy/orm'
</code></pre>
<p>Using <a href="http://docs.python.org/library/imp.html" rel="noreferrer">imp</a> module:</p>
<pre><code>&gt;&gt;&gt; import imp
&gt;&gt;&gt; imp.find_module('sqlalchemy')
(None, '/usr/lib/pymodules/python2.6/sqlalchemy', ('', '', 5))
&gt;&gt;&gt; imp.find_module('pip')
(None, '/usr/local/lib/python2.6/dist-packages/pip-0.7.1-py2.6.egg/pip', ('', '', 5))
&gt;&gt;&gt; imp.find_module('threading')
(&lt;open file '/usr/lib/python2.6/threading.py', mode 'U' at 0x7fb708573db0&gt;, '/usr/lib/python2.6/threading.py', ('.py', 'U', 1))
</code></pre>
<p>N.B: with imp module you <strong>can't</strong> do something like <code>imp.find_module('sqlalchmy.orm')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You might want to try running this in your interpreter:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['codecs'].__file__ # codecs is just an example
'/usr/lib/python2.7/codecs.pyc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For python3 <code>imp</code> is deprecated. Use pkgutil (as seen above) or for Python 3.4+ use <a href="https://docs.python.org/3/library/importlib.html#importlib.util.find_spec" rel="nofollow noreferrer">importlib.util.find_spec</a>:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; spec = importlib.util.find_spec("threading")
&gt;&gt;&gt; spec.origin
'/usr/lib64/python3.6/threading.py'
</code></pre>
</div>
<span class="comment-copy">Why? Why don't you want to import it?</span>
<span class="comment-copy">Because importing is useless at the point in the program where the paths are needed and can cause circular dependencies and other issues. Import occurs at a more opportune time later down the road.</span>
<span class="comment-copy">Also you may want to just look at the source code without actually running any code in the module.</span>
<span class="comment-copy">@cgohlke : actually their is no <b>pkutil</b> package, it should be <b>pkgutil</b>, it was a typo mistake , thanks for pointing it out :)</span>
<span class="comment-copy">@mouad I'm actually looking for the same thing. The above implementation with <code>pkgutil</code> doesn't do what is requested in all cases. <code>pkgutil.get_laoder("sqlalchemy.orm")</code> wll execute <code>sqlalchemy/__init__.py</code>, tho it won't execute <code>sqlalchemy/orm.py</code>.</span>
<span class="comment-copy">@Prody: Yes that's true in case of a package it will execute the <code>__init__.py</code> package as the documentation (<a href="http://docs.python.org/release/3.1.5/library/pkgutil.html#pkgutil.get_loader" rel="nofollow noreferrer">docs.python.org/release/3.1.5/library/â€¦</a>) say <b>If the named module is not already imported, its containing package (if any) is imported, in order to establish the package <i>_path_</i></b> which make total sense :)</span>
<span class="comment-copy">I found [in Python 3.5.1] that package.filename didn't exist, but package.get_filename() did.</span>
<span class="comment-copy">+1 I would have suggested a DFS or something using os.system. But this is awesome - didn't know this could be done</span>
<span class="comment-copy">This doesn't work except with some modules from the stdlib. Try it with SQLAlchemy. Thanks for the response, though.</span>
<span class="comment-copy">this will not work for package which wasn't already been loaded.</span>
<span class="comment-copy">my bad, it works only on imported modules</span>
<span class="comment-copy">-1 because (as already noted) it doesn't actually work.</span>
