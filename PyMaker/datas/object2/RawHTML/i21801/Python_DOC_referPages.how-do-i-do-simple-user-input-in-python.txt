<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20449427/how-can-i-read-inputs-as-numbers">How can I read inputs as numbers?</a>
<span class="question-originals-answer-count">
                    19 answers
                </span>
</li>
</ul>
</div>
<p>I'm just playing with input and variables. I'm trying to run a simple function:</p>
<pre><code>slope = (y2-y1)/(x2-x1)
</code></pre>
<p>I'd like to prompt the user to enter <code>y2</code>, <code>y1</code>, <code>x2</code> and <code>x1</code>. What is the simplest, cleanest way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a> function to prompt the user for input, and <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer"><code>float</code></a> to convert the user input from a string to a float:</p>
<pre><code>x1 = float(input("x1: "))
y1 = float(input("y1: "))
x2 = float(input("x2: "))
y2 = float(input("y2: "))
</code></pre>
<p>If you're using python 2, use <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="nofollow noreferrer"><code>raw_input()</code></a> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the simplest way:</p>
<pre><code> x1 = float(raw_input("Enter x1: "))
</code></pre>
<p>Note that the <code>raw_input()</code> function returns a <em>string</em>, which is converted to a floating point number with <code>float()</code>. If you type something other than a number, you will get an exception:</p>
<pre><code>&gt;&gt;&gt; float(raw_input())
a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
ValueError: invalid literal for float(): a
</code></pre>
<p>If you're using Python 3 (it sounds like you are), use <code>input</code> instead of <code>raw_input</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use: </p>
<pre><code>foo=input('Please enter a value:')
</code></pre>
<p>Where the string 'Please enter a value:' would be your message, and foo would be your variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the user is entering the inputs in just one line with space as delimiting word between those inputs, you can write:</p>
<pre><code>val1, val2, val3 = raw_input().split(' ')
</code></pre>
<p>Now, you can change it to:</p>
<pre><code>val = float(val1)
</code></pre>
<p>The awesome trick is that in this way you don't waste your space creating a new list and storing your values in that and then fetching it.</p>
</div>
<span class="comment-copy">I did that and I get this error: y2 = int(raw_input("y2: ")) NameError: name 'raw_input' is not defined</span>
<span class="comment-copy">Are you on Python 3? If so, use <code>input()</code>.</span>
<span class="comment-copy">Yep. I am. Thanks!</span>
<span class="comment-copy">...and if you enter <code>import os, sys; os.unlink(sys.argv[0])</code> instead of a number after the prompt, your script will delete itself (at least in Python 2.x).</span>
<span class="comment-copy">My answer is in relation to Python 3.</span>
<span class="comment-copy">And my comment incorrect anyway.  I just wanted to make the point that this is inherently insecure in Python 2.x.  For Python 3.x, you should convert the result to a float. (The correct version of the above would have been <code>__import__("os").unlink(__import__("sys").argv[0])</code>, since only an expression gets evaluated.)</span>
