<div class="post-text" itemprop="text">
<p>Will it continue the code after it's run? Or will it stop at that line until the script is done?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="http://docs.python.org/library/subprocess.html#subprocess.call" rel="noreferrer">subprocess.call</a> is the easiest way. It will not return until the executed program has terminated. Have a look at the other methods of the <a href="http://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess module</a> if you need different behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.system('./script.sh')
</code></pre>
<p>python script won't stop until sh is finished</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>os.system</code> or <code>subprocess.Popen</code> or <code>subprocess.call</code> but when using subprocess methods make sure you use <code>shell=True</code>. And executing it via system call in all these methods is blocking. The python script will complete and then go the next step.</p>
</div>
<span class="comment-copy"><code>subprocess.call</code> was deprecated in 3.5: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> should be used instead.</span>
<span class="comment-copy">"The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function." - for example using subprocess.call() will not execute a shell to run whatever you run so you won't have to take care of argument injection if you pass any dynamically generated arguments to your program.</span>
<span class="comment-copy">You can also suggest subprocess.Popen -- this could allow you to control the execution, wait for it, terminate, etc. But as practice shows os.system often provides all the functionality you need.</span>
<span class="comment-copy">subprocess.call provides the easy/simple API too ;)</span>
<span class="comment-copy">No need to use shell=True.. Shellscripts with a shebang line (or even invoking the shell with the script as an argument) can be executed fine with exec()-style functions.</span>
