<div class="post-text" itemprop="text">
<p>If I have a list of chars:</p>
<pre><code>a = ['a','b','c','d']
</code></pre>
<p>How do I convert it into a single string?</p>
<pre><code>a = 'abcd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>join</code> method of the empty string to join all of the strings together with the empty string in between, like so:</p>
<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; ''.join(a)
'abcd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works in JavaScript or Ruby, why not in Python?</p>
<pre><code>&gt;&gt;&gt; ['a', 'b', 'c'].join('')
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'list' object has no attribute 'join'
</code></pre>
<p>But in Python the <code>join</code> method is on the <code>str</code> class:</p>
<pre><code># this is the Python way
"".join(['a','b','c','d'])
</code></pre>
<p>It is a little weird, isn't it? Why <code>join</code> is not a method in the <code>list</code> object like in JavaScript or other popular script languages? It is one example of how the Python community thinks. Since join is returning a string, it should be placed in the string class, not on the list class, so the <code>str.join(list)</code> method means: join the list into a new string using <code>str</code> as a separator (in this case <code>str</code> is an empty string). </p>
<p>Somehow I got to love this way of thinking after a while. I can complain about a lot of things in Python design, but not about its coherence.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your Python interpreter is old (1.5.2, for example, which is common on some older Linux distributions), you may not have <code>join()</code> available as a method on any old string object, and you will instead need to use the string module. Example:</p>
<pre><code>a = ['a', 'b', 'c', 'd']

try:
    b = ''.join(a)

except AttributeError:
    import string
    b = string.join(a, '')
</code></pre>
<p>The string <code>b</code> will be <code>'abcd'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may be the fastest way:</p>
<pre><code>&gt;&gt; from array import array
&gt;&gt; a = ['a','b','c','d']
&gt;&gt; array('B', map(ord,a)).tostring()
'abcd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reduce function also works</p>
<pre><code>import operator
h=['a','b','c','d']
reduce(operator.add, h)
'abcd'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>h = ['a','b','c','d','e','f']
g = ''
for f in h:
    g = g + f

&gt;&gt;&gt; g
'abcdef'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <code>join</code> with empty separator</p>
<pre><code>h = ['a','b','c','d','e','f']
print ''.join(h)
</code></pre>
<p>or use <code>reduce</code> with <code>add</code> operator</p>
<pre><code>import operator
h=['a','b','c','d']
reduce(operator.add, h)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the list contains numbers, you can use <code>map()</code> with <code>join()</code>.</p>
<p>Eg:</p>
<pre><code>    arr = [3, 30, 34, 5, 9]
    ''.join(map(str,arr))

&gt;&gt; 3303459
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <a href="https://docs.python.org/3.5/library/operator.html#operator.concat" rel="nofollow noreferrer"><code>operator.concat()</code></a> like this:</p>
<pre><code>&gt;&gt;&gt; from operator import concat
&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; reduce(concat, a)
'abcd'
</code></pre>
<p>If you're using Python 3 you need to prepend:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
</code></pre>
<p>since the builtin <code>reduce()</code> has been removed from Python 3 and now lives in <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>besides <code>str.join</code> which is the most natural way, a possibility is to use <code>io.StringIO</code> and abusing <code>writelines</code> to write all elements in one go:</p>
<pre><code>import io

a = ['a','b','c','d']

out = io.StringIO()
out.writelines(a)
print(out.getvalue())
</code></pre>
<p>prints:</p>
<pre><code>abcd
</code></pre>
<p>When using this approach with a generator function or an iterable which isn't a <code>tuple</code> or a <code>list</code>, it saves the temporary list creation that <code>join</code> does to allocate the right size in one go (and a list of 1-character strings is very expensive memory-wise).</p>
<p>If you're low in memory and you have a lazily-evaluated object as input, this approach is the best solution.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>g = ['a', 'b', 'c', 'd']
f=''
for i in range(0,len(g)):
    f=f+g[i]
print f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>    str = ''
    for letter in a:
        str += letter
    print str
</code></pre>
</div>
<span class="comment-copy">Searching Google for "python convert list of chars to string" gives one hit on ubuntuforums for doing the inverse operation (string to char list), four hits on python.org of which only the last touches on the topic with the code <code>string.joinfields(map(chr, list), "")</code>, which isn't as good an answer as Daniel's, and the next entry is <i>this very question on SO.</i>  It seems SO has become the FAQ.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/4978787/321973">Link to other direction</a></span>
<span class="comment-copy">but what is there is space as character?</span>
<span class="comment-copy">@vaichidrewar: Then there will be a space in the final string as well.</span>
<span class="comment-copy">how can I add spaces between the characters?  anyway to do it without iterating through the whole thing?</span>
<span class="comment-copy">just do <code>' '.join(list)</code> with a space between the quotes</span>
<span class="comment-copy">To clarify: <code>"".join(['a','b','c'])</code> means <code>Join all elements of the array, separated by the string ""</code>.  In the same way, <code>" hi ".join(["jim", "bob", "joe"])</code> will create <code>"jim hi bob hi joe"</code>.</span>
<span class="comment-copy">The main reason for join being a string method rather than a list method is that it accepts <i>any iterable</i>, not just a list. You can use generator expressions, dictionaries, sets, views of various kinds, and so on. So it's a lot more flexible than the array join operation in most languages.</span>
<span class="comment-copy">I was comparing Python's <code>string.join()</code> with most collections having a <code>join()</code> method in many dynamic languages. About iterables, I guess it is not a problem for such languages because it is as easy (and legible) to enclose the iterable in a collection constructor and chain in the <code>join()</code> method.</span>
<span class="comment-copy">Yeah, assuming they either have lazy lists (Haskell style) or you're comfortable with coalescing the list into memory before starting. My point is that Python's way of doing isn't arbitrary, it has very good justification.</span>
<span class="comment-copy">It is not arbitrary, it is a design decision to avoid namespace pollution in every class. :-)</span>
<span class="comment-copy">Exactly. Plus, not all of those are even classes - "iterable" is a protocol, not a class. You can filter, map, join, etc, using any iterable.</span>
<span class="comment-copy">+1 for making sure the answer works on older systems, although I don't like the whitespace before the round brackets!</span>
<span class="comment-copy">@WinstonEwert yes, yesterday i was writing a program which needs to do such thing, and i benchmarked a few ways for the performance of this line counts in my program, the result shows it's about 20% faster then <code>''.join(['a','b','c'])</code></span>
<span class="comment-copy">My own benchmark shows join to be 7 times faster. <a href="http://pastebin.com/8nSc5Ek1" rel="nofollow noreferrer">pastebin.com/8nSc5Ek1</a>. You mind sharing your benchmark?</span>
<span class="comment-copy">Premature optimization. This is so much hard to read and understand what's going on. Unless the user NEEDS performance in the operation, a simple <code>''.join()</code> is much more readable.</span>
<span class="comment-copy">disagree -- programmers need to keep the fastest methods in mind for such things. a single simple operation that takes a little longer is no big deal. However, this is how just about every program written ends up bloating and taking up too much resources. When we don't put ourselves in the habit of making things as lean as possible, we end up with a world that is like.... well, like Windows Vista, or Upstart in Linux are good examples of many small shortcuts leading to 'bloat and float', as in dead in the water. they are both ugly too. why not use str().join(a) which is 100% expressive imfho..</span>
<span class="comment-copy">... but i would still use the simple one for stupid little experiments and the other one for hefty things that need speed. Im just saying, we should be in the habit of condoning such things appropriately.</span>
<span class="comment-copy">It always bugs me that the operators aren't first class citizens in their own right.  In scheme, for instance, that would be (reduce + h)</span>
<span class="comment-copy">In scheme, <code>(reduce + '' h)</code> or <code>(apply + h)</code> would work.  But then again, in Python, the add operator takes exactly 2 operands, hence the need for reduce.  Otherwise, you could do <code>operator.add(*h)</code>, since <code>apply</code> has been officially deprecated in Python in favor of the extended call syntax (aka <a href="http://en.wikipedia.org/wiki/Variadic_function" rel="nofollow noreferrer">en.wikipedia.org/wiki/Variadic_function</a>)</span>
<span class="comment-copy">@Bill <a href="http://stackoverflow.com/editing-help">Have a look at the formatting help</a></span>
<span class="comment-copy">This would be quite slow. Using <code>''.join(h)</code> would far outpace your one-by-one append method.</span>
<span class="comment-copy">in 'the' python bible (that 1400+ page one), in many places it tells us that this is wrong to do and is to be avoided whenever possible. It also is a painfully obvious trademark of the uninformed python beginner (not to insult the functionality...well) it may work but you will hear "Dont do this" from about 5000 people for doing it.</span>
<span class="comment-copy">it is actually more pythonic to use <code>''.join([str(i) for i in arr])</code></span>
<span class="comment-copy">@user1767754 Well, Guido prefers that style but there's absolutely nothing wrong with using the map function.</span>
<span class="comment-copy">@itsbruce there is nothing wrong with it, it's probably nicer to read as well with map.</span>
<span class="comment-copy">-1, This is less clear and more verbose than the existing answers.</span>
<span class="comment-copy">+1 useful for me because I need to skip some elements of the list.</span>
<span class="comment-copy">steve: that's what comprehensions are for :)</span>
<span class="comment-copy">unpythonic as hell, and has quadratic complexity. Try on a 10000000 element list.</span>
<span class="comment-copy">@DanielExcinsky plus it's shadowing the <code>str</code> builtin...</span>
