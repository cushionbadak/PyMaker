<div class="post-text" itemprop="text">
<p>I want an efficient way to append one string to another in Python.</p>
<pre><code>var1 = "foo"
var2 = "bar"
var3 = var1 + var2
</code></pre>
<p>Is there any good built-in method to use?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only have one reference to a string and you concatenate another string to the end, CPython now special cases this and tries to extend the string in place.</p>
<p>The end result is that the operation is amortized O(n).</p>
<p>e.g.</p>
<pre><code>s = ""
for i in range(n):
    s+=str(i)
</code></pre>
<p>used to be O(n^2), but now it is O(n).</p>
<p>From the source (bytesobject.c):</p>
<pre class="lang-c prettyprint-override"><code>void
PyBytes_ConcatAndDel(register PyObject **pv, register PyObject *w)
{
    PyBytes_Concat(pv, w);
    Py_XDECREF(w);
}


/* The following function breaks the notion that strings are immutable:
   it changes the size of a string.  We get away with this only if there
   is only one module referencing the object.  You can also think of it
   as creating a new string object and destroying the old one, only
   more efficiently.  In any case, don't use this if the string may
   already be known to some other part of the code...
   Note that if there's not enough memory to resize the string, the original
   string object at *pv is deallocated, *pv is set to NULL, an "out of
   memory" exception is set, and -1 is returned.  Else (on success) 0 is
   returned, and the value in *pv may or may not be the same as on input.
   As always, an extra byte is allocated for a trailing \0 byte (newsize
   does *not* include that), and a trailing \0 byte is stored.
*/

int
_PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)
{
    register PyObject *v;
    register PyBytesObject *sv;
    v = *pv;
    if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize &lt; 0) {
        *pv = 0;
        Py_DECREF(v);
        PyErr_BadInternalCall();
        return -1;
    }
    /* XXX UNREF/NEWREF interface should be more symmetrical */
    _Py_DEC_REFTOTAL;
    _Py_ForgetReference(v);
    *pv = (PyObject *)
        PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);
    if (*pv == NULL) {
        PyObject_Del(v);
        PyErr_NoMemory();
        return -1;
    }
    _Py_NewReference(*pv);
    sv = (PyBytesObject *) *pv;
    Py_SIZE(sv) = newsize;
    sv-&gt;ob_sval[newsize] = '\0';
    sv-&gt;ob_shash = -1;          /* invalidate cached hash value */
    return 0;
}
</code></pre>
<p>It's easy enough to verify empirically.</p>
<pre>
$ python -m timeit -s"s=''" "for i in xrange(10):s+='a'"
1000000 loops, best of 3: 1.85 usec per loop
$ python -m timeit -s"s=''" "for i in xrange(100):s+='a'"
10000 loops, best of 3: 16.8 usec per loop
$ python -m timeit -s"s=''" "for i in xrange(1000):s+='a'"
10000 loops, best of 3: 158 usec per loop
$ python -m timeit -s"s=''" "for i in xrange(10000):s+='a'"
1000 loops, best of 3: 1.71 msec per loop
$ python -m timeit -s"s=''" "for i in xrange(100000):s+='a'"
10 loops, best of 3: 14.6 msec per loop
$ python -m timeit -s"s=''" "for i in xrange(1000000):s+='a'"
10 loops, best of 3: 173 msec per loop
</pre>
<p><strong>It's important</strong> however to note that this optimisation isn't part of the Python spec. It's only in the cPython implementation as far as I know. The same empirical testing on pypy or jython for example might show the older O(n**2) performance .</p>
<pre>
$ pypy -m timeit -s"s=''" "for i in xrange(10):s+='a'"
10000 loops, best of 3: 90.8 usec per loop
$ pypy -m timeit -s"s=''" "for i in xrange(100):s+='a'"
1000 loops, best of 3: 896 usec per loop
$ pypy -m timeit -s"s=''" "for i in xrange(1000):s+='a'"
100 loops, best of 3: 9.03 msec per loop
$ pypy -m timeit -s"s=''" "for i in xrange(10000):s+='a'"
10 loops, best of 3: 89.5 msec per loop
</pre>
<p>So far so good, but then,</p>
<pre>
$ pypy -m timeit -s"s=''" "for i in xrange(100000):s+='a'"
10 loops, best of 3: 12.8 sec per loop
</pre>
<p>ouch even worse than quadratic. So pypy is doing something that works well with short strings, but performs poorly for larger strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't prematurely optimize. If you have no reason to believe there's a speed bottleneck caused by string concatenations then just stick with <code>+</code> and <code>+=</code>:</p>
<pre><code>s  = 'foo'
s += 'bar'
s += 'baz'
</code></pre>
<p>That said, if you're aiming for something like Java's StringBuilder, the canonical Python idiom is to add items to a list and then use <code>str.join</code> to concatenate them all at the end:</p>
<pre><code>l = []
l.append('foo')
l.append('bar')
l.append('baz')

s = ''.join(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't.</p>
<p>That is, for most cases you are better off generating the whole string in one go rather then appending to an existing string.</p>
<p>For example, don't do: <code>obj1.name + ":" + str(obj1.count)</code></p>
<p>Instead: use <code>"%s:%d" % (obj1.name, obj1.count)</code></p>
<p>That will be easier to read and more efficient.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>str1 = "Hello"
str2 = "World"
newstr = " ".join((str1, str2))
</code></pre>
<p>That joins str1 and str2 with a space as separators. You can also do <code>"".join(str1, str2, ...)</code>. <code>str.join()</code> takes an iterable, so you'd have to put the strings in a list or a tuple.</p>
<p>That's about as efficient as it gets for a builtin method.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to do many append operations to build a large string, you can use <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer">StringIO</a> or cStringIO. The interface is like a file. ie: you <code>write</code> to append text to it.</p>
<p>If you're just appending two strings then just use <code>+</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>it really depends on your application. If you're looping through hundreds of words and want to append them all into a list, <code>.join()</code> is better. But if you're putting together a long sentence, you're better off using <code>+=</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 gives us <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">f-strings</a>, which are a delight:</p>
<pre><code>var1 = "foo"
var2 = "bar"
var3 = f"{var1}{var2}"
print(var3)                       # prints foobar
</code></pre>
<p>You can do most anything inside the curly braces</p>
<pre><code>print(f"1 + 1 == {1 + 1}")        # prints 1 + 1 == 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a='foo'
b='baaz'

a.__add__(b)

out: 'foobaaz'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically, no difference. The only consistent trend is that Python seems to be getting slower with every version... :(</p>
<hr/>
<h1>List</h1>
<pre><code>%%timeit
x = []
for i in range(100000000):  # xrange on Python 2.7
    x.append('a')
x = ''.join(x)
</code></pre>
<p><strong>Python 2.7</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>7.34</strong> s per loop</p>
</blockquote>
<p><strong>Python 3.4</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>7.99</strong> s per loop</p>
</blockquote>
<p><strong>Python 3.5</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>8.48</strong> s per loop</p>
</blockquote>
<p><strong>Python 3.6</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>9.93</strong> s per loop</p>
</blockquote>
<hr/>
<h1>String</h1>
<pre><code>%%timeit
x = ''
for i in range(100000000):  # xrange on Python 2.7
    x += 'a'
</code></pre>
<p><strong>Python 2.7</strong>: </p>
<blockquote>
<p>1 loop, best of 3: <strong>7.41 s</strong> per loop</p>
</blockquote>
<p><strong>Python 3.4</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>9.08</strong> s per loop</p>
</blockquote>
<p><strong>Python 3.5</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>8.82</strong> s per loop</p>
</blockquote>
<p><strong>Python 3.6</strong></p>
<blockquote>
<p>1 loop, best of 3: <strong>9.24</strong> s per loop</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>append strings with <strong>__add__</strong> function</p>
<pre><code>str = "Hello"
str2 = " World"
st = str.__add__(str2)
print(st)
</code></pre>
<p>Output</p>
<pre><code>Hello World
</code></pre>
</div>
<span class="comment-copy"><b>TL;DR:</b> If you're just looking for the simple way to append strings, and you don't care about efficiency: <code>"foo" + "bar" + str(3)</code></span>
<span class="comment-copy">Interesting. By "now", do you mean Python 3.x?</span>
<span class="comment-copy">@Steve, No. It's at least in 2.6 maybe even 2.5</span>
<span class="comment-copy">You've quoted the <code>PyString_ConcatAndDel</code> function but included the comment for <code>_PyString_Resize</code>. Also, the comment doesn't really establish your claim regarding the Big-O</span>
<span class="comment-copy">@JohnLaRooy You might have stopped your CPython experiment one iteration too early. I do roughly get time factor 10 up to 1000000, but then from 1000000 to 10000000 it suddenly takes <b>100</b> times as long. Maybe it only optimizes only up a certain size? I'm running Python 2.7.11 on Windows 10 64 bit.</span>
<span class="comment-copy">congratulations on exploiting a CPython feature that will make the code crawl on other implementations. Bad advice.</span>
<span class="comment-copy">I don't know what the speed implications of building your strings as lists and then .join()ing them are, but I find it's generally the cleanest way.  I've also had great successes with using %s notation within a string for a SQL templating engine I wrote.</span>
<span class="comment-copy">@Richo Using .join is more efficient. The reason is that Python strings are immutable, so repeatedly using s += more will allocate lots of successively larger strings. .join will generate the final string in one go from its constituent parts.</span>
<span class="comment-copy">@Ben, there has been a significant improvement in this area - see my answer</span>
<span class="comment-copy">i'm sorry there is nothing more easier to read than ( string + string ) like the first example, the second example might be more efficient, but not more readable</span>
<span class="comment-copy">@ExceptionSlayer, string + string is pretty easy to follow. But <code>"&lt;div class='" + className + "' id='" + generateUniqueId() + "'&gt;" + message_text + "&lt;/div&gt;"</code>, I find less readable and error-prone then <code>"&lt;div class='{classname}' id='{id}'&gt;{message_text}&lt;/div&gt;".format(classname=class_name, message_text=message_text, id=generateUniqueId())</code></span>
<span class="comment-copy">This doesn't help at all when what I'm trying to do is the rough equivalent of, say, PHP/perl's "string .= verifydata()" or similar.</span>
<span class="comment-copy">And in this case the answer to that question is "No, because that approach doesn't cover my use case"</span>
<span class="comment-copy">The proposed solution is most definitely not easier to read.</span>
<span class="comment-copy">Code is nice, but it would help to have an accompanying explanation. Why use this method rather than the other answers on this page?</span>
<span class="comment-copy">Using <code>a.__add__(b)</code> is identical to writing <code>a+b</code>. When you concatenate strings using the <code>+</code> operator, Python will call the <code>__add__</code> method on the string on the left side passing the right side string as a parameter.</span>
<span class="comment-copy">I guess it depends. I get <code>1.19 s</code> and <code>992 ms</code> respectively on Python2.7</span>
<span class="comment-copy">@JohnLaRooy Yep, you're right. I edited the answer.</span>
<span class="comment-copy"><code>str + str2</code> is still shorter.</span>
