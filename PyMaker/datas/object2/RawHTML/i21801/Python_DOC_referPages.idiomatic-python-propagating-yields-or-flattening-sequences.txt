<div class="post-text" itemprop="text">
<p>I'm writing a <strike>breadth</strike> depth-first tree traversal function, and what I want to do is this:</p>
<pre><code>def traverse(node):
    yield node
    for n in node.children:
        yield_all traverse(n) # &lt;&lt; if Python had a yield_all statement
</code></pre>
<p>The idea is to end up with a (flat) sequence of nodes in the tree.</p>
<p>Approach #1: (propagating yields)</p>
<pre><code>def traverse(node):
    yield node
    for n in node.children:
        for m in traverse(n):
            yield m
</code></pre>
<p>Approach #2: (flattening sequences)</p>
<pre><code>def traverse(node):
    return itertools.chain([node],*(traverse(n) for n in node.children))
</code></pre>
<p>The first approach seems more clean, but I feel weird explicitly <code>yield</code>ing each node in the subtree at each level.</p>
<p>The second approach is terse and slightly dirty, but it matches what I would write in Haskell:</p>
<pre><code>traverse node = node : concatMap traverse (children node)
</code></pre>
<p>So my question is: Which is better? Or am I missing a best 3rd option?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>[UPDATE]</strong> See <a href="http://www.python.org/dev/peps/pep-0380/" rel="nofollow">PEP-380</a>, this <em>yield all</em> syntax is available starting from <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow">Python 3.3</a> as <code>yield from</code>:</p>
<pre><code>def traverse(node):
    yield node
    for n in node.children:
        yield from traverse(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd go with first. You'll get over propagating yields after a couple of times. :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an opinions question, so all the answers will just be value judgments. As far as I can think there's no elegant third way, though.</p>
<p>My opinion is that the first way wins hands down. It's clearer and easier to read -- Python isn't Haskell, even though it can do some functional stuff, and often the functional approach just doesn't look as neat.</p>
</div>
<div class="post-text" itemprop="text">
<p>Traversing with node position:</p>
<pre><code>def iter_tree(t, i=0, j=0):
    yield (i, j), t
    for j, n in enumerate(t.children):
        yield from iter_tree(n, i + 1, j)

for (i, j), n in iter_tree(t):
    print(i*'    ', (i, j), n)
</code></pre>
</div>
<span class="comment-copy">List comprehensions would make this cleaner.</span>
<span class="comment-copy">Rafe: Write an answer and show me! :-)</span>
<span class="comment-copy">I'd like to see a list comprehension for this... you'd need to flatten it in the end, right? As far as I am concerned, the <code>chain</code> solution is wonderful.</span>
<span class="comment-copy">Approach #2 does not work. You would get <code>TypeError: type object argument after * must be a sequence, not generator</code>.</span>
<span class="comment-copy">Isn't this depth-first traversal of the tree? Weren't you asking for breadth-first?</span>
<span class="comment-copy">@THC4k, that's a good question :-) I c&amp;p the code from another script, I guess I was trying something at the moment. Updated, it should work without using "list". [oops, you deleted your comment?]</span>
<span class="comment-copy">yeah when you changed it ;)</span>
<span class="comment-copy">@THC4k, yeah, sorry, I am never satisfied with my answers and I keep editing them ;-)</span>
<span class="comment-copy">Ah, sometimes it seems everything I wish Python could be is buried in a PEP somewhere.  I should start collecting pep modules, or perhaps just learn to accept that Python isn't <i>really</i> a functional language.</span>
<span class="comment-copy">@perimosocordiae: Knowing GvR's opinions on FP I would't expect too much on this angle. But definitely Python would be a sadder language without the FP-related work of Kuchling and Hettinger (and others).</span>
