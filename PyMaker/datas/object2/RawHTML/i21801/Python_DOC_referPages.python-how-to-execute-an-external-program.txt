<div class="post-text" itemprop="text">
<p>How do I execute a program from within my program without blocking until the executed program finishes?</p>
<p>I have tried:</p>
<pre><code>os.system()
</code></pre>
<p>But it stops my program till the executed program is stopped/closed. Is there a way to allow my program to keep running after the execution of the external program?</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using the <em>subprocess</em> module.</p>
<ul>
<li>Python 2: <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow">http://docs.python.org/2/library/subprocess.html</a></li>
<li>Python 3: <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow">http://docs.python.org/3/library/subprocess.html</a></li>
</ul>
<p><em>subprocess</em> spawns a new process in which your external application is run. Your application continues execution while the other application runs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want <a href="http://docs.python.org/library/subprocess.html" rel="nofollow"><code>subprocess</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <em>subprocess</em> module, but the os.system will also work. It works through a shell, so you just have to put an '&amp;' at the end of your string. Just like in an interactive shell, it will then run in the background. </p>
<p>If you need to get some kind of output from it, however, you will most likely want to use the subprocess module.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> for that:</p>
<pre><code>import subprocess
import codecs

# start 'yourexecutable' with some parameters
# and throw the output away
with codecs.open(os.devnull, 'wb', encoding='utf8') as devnull:
    subprocess.check_call(["yourexecutable",
                           "-param",
                           "value"],
                          stdout=devnull, stderr=subprocess.STDOUT
                          )
</code></pre>
</div>
<span class="comment-copy">Unless you explicitly wait for it.</span>
<span class="comment-copy"><code>os.system</code> spawns a new process as well - <code>subprocess</code> just gives you more control over it.</span>
