<div class="post-text" itemprop="text">
<p>...Now I know this question has been asked many times &amp; I have looked at these other threads. Nothing so far has worked, from using sys.path.append('.') to just import foo</p>
<p>I have a python file that wishes to import a file (that is in its parent directory). Can you help me figure out how my child file can successfully import its a file in its parent directory. I am using python 2.7</p>
<p>The structure is like so (each directory also has the <strong>__<em>init</em>__</strong>.py file in it):</p>
<blockquote>
<p>StockTracker/<br/>
<strong>__</strong><em>Comp/<br/>
<strong></strong></em>____</p></blockquote></div>
<div class="post-text" itemprop="text">
<pre><code>from .. import a
</code></pre>
<p>Should do it. This will only work on recent versions of Python--from 2.6, I believe [Edit: since 2.5].</p>
<p>Each level (Comp and Subcomp) must also be have an <code>__init__.py</code> file for this to work. You've said that they do.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>When packages are structured into
  subpackages (as with the sound package
  in the example), you can use absolute
  imports to refer to submodules of
  siblings packages. For example, if the
  module sound.filters.vocoder needs to
  use the echo module in the
  sound.effects package, it can use from
  sound.effects import echo.</p>
<p>Starting with Python 2.5, in addition
  to the implicit relative imports
  described above, you can write
  explicit relative imports with the
  from module import name form of import
  statement. These explicit relative
  imports use leading dots to indicate
  the current and parent packages
  involved in the relative import. From
  the surround module for example, you
  might use:</p>
<pre><code>from . import echo
from .. import formats
from ..filters import equalizer
</code></pre>
</blockquote>
<p>Quote from here <a href="http://docs.python.org/tutorial/modules.html#intra-package-references" rel="noreferrer">http://docs.python.org/tutorial/modules.html#intra-package-references</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If the Comp directory is in your PYTHONPATH environment variable, plain old</p>
<pre><code>import a
</code></pre>
<p>will work.</p>
<p>If you're using Linux or OS X, and launching your program from the bash shell, you can accomplish that by</p>
<pre><code>export PYTHONPATH=$PYTHONPATH:/path/to/Comp
</code></pre>
<p>For Windows, take a look at these links: </p>
<ul>
<li><a href="http://docs.python.org/using/windows.html" rel="noreferrer">http://docs.python.org/using/windows.html</a></li>
<li><a href="http://www.itechtalk.com/thread3595.html" rel="noreferrer">http://www.itechtalk.com/thread3595.html</a></li>
</ul>
<p>EDIT:</p>
<p>To modify the path programmatically, you were on the right track in your original question. You just need to add the parent directory instead of the current directory.</p>
<pre><code>sys.path.append("..")
import a
</code></pre>
</div>
<span class="comment-copy">How do you invoke python? That is, how does it find StockTracker.Comp.SubComp.b?</span>
<span class="comment-copy">I believe it is since 2.7. It's your answer, Could you check?</span>
<span class="comment-copy">Well, we're both wrong! It's since 2.5. Thanks, I'll update it.</span>
<span class="comment-copy">That probably works. But also: Please don't. Make sure the absolute import works instead.</span>
<span class="comment-copy">@Lennart: Why? This is precisely the situation relative imports are designed for, and you might not want to expose the subpackage to all imports via PYTHONPATH. The only argument I can see against using a relative import is backwards compatibility, and supporting Python 2.4 would hardly be my top priority.</span>
<span class="comment-copy">The current module are apparently exposed for import, so why not "expose" the package properly instead. And you wouldn't need to do any PYTHONPATH hacks if things are properly installed, and if it is, absolute import will work.</span>
<span class="comment-copy">Thanks for the reply, I have never heard of the  PYTHONPATH environment variable? Would you be able to ellaborate how I would do what your saying? Inside the directory StockTracker, I have the main program initiator file called RunStockTracker.py, should I "make sure the Comp directory is in your PYTHONPATH environment variable" (in code) in this file?</span>
<span class="comment-copy">Updated my answer.</span>
<span class="comment-copy">This answer (<code>sys.path.append('..')</code>) is the only one that will work, if you are running <code>b.py</code> as <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>__main__</code>, i.e. the top-level script environment</a></span>
