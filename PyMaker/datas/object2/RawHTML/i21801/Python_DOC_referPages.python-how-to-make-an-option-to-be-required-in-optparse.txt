<div class="post-text" itemprop="text">
<p>I've read this <a href="http://docs.python.org/release/2.6.2/library/optparse.html" rel="noreferrer">http://docs.python.org/release/2.6.2/library/optparse.html</a></p>
<p>But I'm not so clear how to make an option to be required in optparse?</p>
<p>I've tried to set "required=1" but I got an error:</p>
<blockquote>
<p>invalid keyword arguments: required</p>
</blockquote>
<p>I want to make my script require <code>--file</code> option to be input by users.  I know that the <code>action</code> keyword gives you error when you don't supply value to <code>--file</code> whose <code>action="store_true"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can implement a required option easily. </p>
<pre><code>parser = OptionParser(usage='usage: %prog [options] arguments')
parser.add_option('-f', '--file', 
                        dest='filename',
                        help='foo help')
(options, args) = parser.parse_args()
if not options.filename:   # if filename is not given
    parser.error('Filename not given')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On the help message of each required variable Im writting a '[REQUIRED]' string at the beggining, to tag it to be parsed later, then I can simply use this function to wrap it around:</p>
<pre><code>def checkRequiredArguments(opts, parser):
    missing_options = []
    for option in parser.option_list:
        if re.match(r'^\[REQUIRED\]', option.help) and eval('opts.' + option.dest) == None:
            missing_options.extend(option._long_opts)
    if len(missing_options) &gt; 0:
        parser.error('Missing REQUIRED parameters: ' + str(missing_options))

parser = OptionParser()
parser.add_option("-s", "--start-date", help="[REQUIRED] Start date")
parser.add_option("-e", "--end-date", dest="endDate", help="[REQUIRED] End date")
(opts, args) = parser.parse_args(['-s', 'some-date'])
checkRequiredArguments(opts, parser)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>if not x</code> doesn't work 
for some(negative,zero) parameters,</p>
<p>and to prevent lots of if tests, 
i preferr something like this:</p>
<pre><code>required="host username password".split()

parser = OptionParser()
parser.add_option("-H", '--host', dest='host')
parser.add_option("-U", '--user', dest='username')
parser.add_option("-P", '--pass', dest='password')
parser.add_option("-s", '--ssl',  dest='ssl',help="optional usage of ssl")

(options, args) = parser.parse_args()

for r in required:
    if options.__dict__[r] is None:
        parser.error("parameter %s required"%r)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm forced to use python 2.6 for our solution so I'm stick to optparse module.
Here is solution I found to check for required options that works without specifying second time list of required options. Thus when you add new option you don't have to add it's name into the list of options to check.</p>
<p>My criteria for required option - option value should be not None and this options doesn't have default (user didn't specified add_option(default="...",...).</p>
<pre><code>def parse_cli():
    """parse and check command line options, shows help message
    @return: dict - options key/value
    """
    import __main__
    parser = OptionParser(description=__main__.__doc__)
    parser.add_option("-d", "--days", dest="days",
                      help="Number of days to process")
    parser.add_option("-p", "--period", dest="period_length",default="2",
              help="number or hours per iteration, default value=%default hours")    
    (options, args) = parser.parse_args()

    """get dictionary of options' default values. 
       in this example: { 'period_length': '2','days': None}"""
    defaults = vars(parser.get_default_values())
    optionsdict = vars(options)

    all_none = False        
    for k,v in optionsdict.items():
        if v is None and defaults.get(k) is None:
            all_none = True


    if all_none:
        parser.print_help()
        sys.exit()
    return optionsdict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The current <a href="https://stackoverflow.com/a/4407608/1862861">answer with the most votes</a> would not work if, for example, the argument were an integer or float for which zero is a valid input. In these cases it would say that there is an error. An alternative (to add to the several others here) would be to do e.g.</p>
<pre><code>parser = OptionParser(usage='usage: %prog [options] arguments')
parser.add_option('-f', '--file', dest='filename')
(options, args) = parser.parse_args()
if 'filename' not in options.__dict__:
  parser.error('Filename not given')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are at least two methods of implementing required options with <code>optparse</code>. As mentioned in the <a href="https://docs.python.org/release/2.7/library/optparse.html" rel="nofollow noreferrer">docs page</a>, <strong>optparse</strong> doesn’t prevent you from implementing required options, but doesn’t give you much help at it either. Find below the examples found in files distributed with the source.</p>
<p>Although please note that <a href="https://docs.python.org/release/2.7/library/optparse.html" rel="nofollow noreferrer"><code>optparse</code> module</a> is deprecated since version 2.7 and will not be developed further. You should use <a href="https://docs.python.org/release/2.7/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code> module</a> instead.</p>
<hr/>
<p>Version 1: Add a method to OptionParser which applications must call after parsing arguments:</p>
<pre><code>import optparse

class OptionParser (optparse.OptionParser):

    def check_required (self, opt):
      option = self.get_option(opt)

      # Assumes the option's 'default' is set to None!
      if getattr(self.values, option.dest) is None:
          self.error("%s option not supplied" % option)


parser = OptionParser()
parser.add_option("-v", action="count", dest="verbose")
parser.add_option("-f", "--file", default=None)
(options, args) = parser.parse_args()

print "verbose:", options.verbose
print "file:", options.file
parser.check_required("-f")
</code></pre>
<p>Source: <a href="https://pl.python.org/docs/lib/required_1.txt" rel="nofollow noreferrer"><code>docs/lib/required_1.txt</code></a></p>
<hr/>
<p>Version 2: Extend Option and add a required attribute; extend OptionParser to ensure that required options are present after parsing:</p>
<pre><code>import optparse

class Option (optparse.Option):
    ATTRS = optparse.Option.ATTRS + ['required']

    def _check_required (self):
        if self.required and not self.takes_value():
            raise OptionError(
                "required flag set for option that doesn't take a value",
                 self)

    # Make sure _check_required() is called from the constructor!
    CHECK_METHODS = optparse.Option.CHECK_METHODS + [_check_required]

    def process (self, opt, value, values, parser):
        optparse.Option.process(self, opt, value, values, parser)
        parser.option_seen[self] = 1


class OptionParser (optparse.OptionParser):

    def _init_parsing_state (self):
        optparse.OptionParser._init_parsing_state(self)
        self.option_seen = {}

    def check_values (self, values, args):
        for option in self.option_list:
            if (isinstance(option, Option) and
                option.required and
                not self.option_seen.has_key(option)):
                self.error("%s not supplied" % option)
        return (values, args)


parser = OptionParser(option_list=[
    Option("-v", action="count", dest="verbose"),
    Option("-f", "--file", required=1)])
(options, args) = parser.parse_args()

print "verbose:", options.verbose
print "file:", options.file
</code></pre>
<p>Source: <a href="https://pl.python.org/docs/lib/required_2.txt" rel="nofollow noreferrer"><code>docs/lib/required_2.txt</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm also stuck on python 2.6 (pining for python2.7 and argparse, which not only has required arguments, but lets me specify that one of a set must be supplied); my approach requires a second pass, but lets me prompt for missing arguments unless running in batch mode: </p>
<pre><code># from myscript
import helpers
import globalconfig 
parser = optparse.OptionParser(usage=myheader,epilog=myfooter)
parser.add_option("-L","--last",
                  action="store",dest="last_name",default="",
                  help="User's last (family) name; prompted for if not supplied"
                 )
parser.add_option("-y","--yes",
                  action="store_true",dest="batch_flag",default=False,
                  help="don't prompt to confirm actions (batch mode)"
                  )
[...]
(options, args) = parser.parse_args()
globalconfig.batchmode = options.batch_flag
[...]
last = prompt_if_empty(options.last_name,
        "Last name (can supply with \"-L\" or \"--last\" option):")


# from helpers.py
def prompt_if_empty(variable,promptstring):
    if not variable:
        if globalconfig.batchmode:
            raise Exception('Required variable missing.')
        print "%s" %promptstring
        variable = raw_input(globalconfig.prompt)
    return variable
</code></pre>
<p>(I'm thinking of making my own parser class that has common options for global configs baked in.)</p>
<p>Another answer to this question cited parser.error, which I was unfamiliar with when I wrote the code, but might have been a better choice.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the optparse module is deprecated since version 2.7, you will probably find some more up to date examples here: <a href="https://stackoverflow.com/questions/7427101/dead-simple-argparse-example-wanted-1-argument-3-results">Dead simple argparse example wanted: 1 argument, 3 results</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>I would use argparse library that has this functionality embedded:</p>
<pre><code>PARSER.add_argument("-n", "--namespace", dest="namespace", required=True,
              help="The path within the repo to the data base")
</code></pre>
<p><a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse reference</a></p>
</div>
<span class="comment-copy">in any browser press control+F and type "required": <a href="http://www.koders.com/python/fidDA675C6BA2AB578095C3FCB8215FFB6B60B34E45.aspx?s=cdef:parser#L3" rel="nofollow noreferrer">koders.com/python/…</a>, <a href="http://www.koders.com/python/fid27A3EC36EE5D1DBA190DA19F6428F12B97BA1768.aspx?s=cdef:parser#L20" rel="nofollow noreferrer">koders.com/python/…</a></span>
<span class="comment-copy">Maybe you should consider using the <a href="http://docs.python.org/library/argparse.html#module-argparse" rel="nofollow noreferrer"><code>argparse</code></a> module instead.</span>
<span class="comment-copy">I enjoy the snarky quote <code>the phrase “required option” is self-contradictory in English</code> from <a href="http://docs.python.org/2/library/optparse.html#terminology" rel="nofollow noreferrer">OptParse's manual page</a>.</span>
<span class="comment-copy">+1 however bracket at line 5 are not required ;)</span>
<span class="comment-copy">@Ant: Yeah I know but the brackets signify that <code>parser.parse_args()</code> returns a <code>tuple</code>, so I let them stay!</span>
<span class="comment-copy">yeah, view points ;) i don't like them, but it's ok =P</span>
<span class="comment-copy">Does this mean "required" option is only with argparse, but not optparse? The answer is good though, I don't see why this cannto be accepted?</span>
<span class="comment-copy">The optparse module is deprecated since version 2.7. Example with argparse here: <a href="http://stackoverflow.com/questions/7427101/dead-simple-argparse-example-wanted-1-argument-3-results" title="dead simple argparse example wanted 1 argument 3 results">stackoverflow.com/questions/7427101/…</a></span>
<span class="comment-copy">Nice - thank you. But to speed it up and avoid the need to <code>import re</code>, use the string <code>startwith</code> method like this:  <code>if option.help.startswith('[REQUIRED]')</code>...</span>
<span class="comment-copy">Why downvote this answer, please?</span>
<span class="comment-copy">this is for argument parser not for option parser</span>
