<div class="post-text" itemprop="text">
<p>I am trying to subtract one date value from the value of <code>datetime.today()</code> to calculate how long ago something was. But it complains:</p>
<pre><code>TypeError: can't subtract offset-naive and offset-aware datetimes
</code></pre>
<p>The value <code>datetime.today()</code> doesn't seem to be "timezone aware", while my other date value is. How do I get a value of <code>datetime.today()</code> that is timezone aware? Right now it's giving me the time in local time, which happens to be PST, i.e. UTC-8hrs. Worst case, is there a way I can manually enter a timezone value into the <code>datetime</code> object returned by <code>datetime.today()</code> and set it to UTC-8? Of course, the ideal solution would be for it to automatically know the timezone.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the standard library, there is no cross-platform way to create aware timezones without creating your own timezone class.</p>
<p>On Windows, there's <code>win32timezone.utcnow()</code>, but that's part of pywin32. I would rather suggest to use the <a href="http://pytz.sourceforge.net/" rel="noreferrer">pytz library</a>, which has a constantly updated database of most timezones.</p>
<p>Working with local timezones can be very tricky (see "Further reading" links below), so you may rather want to use UTC throughout your application, especially for arithmetic operations like calculating the difference between two time points.</p>
<p>You can get the current date/time like so:</p>
<pre><code>import pytz
from datetime import datetime
datetime.utcnow().replace(tzinfo=pytz.utc)
</code></pre>
<p>Mind that <code>datetime.today()</code> and <code>datetime.now()</code> return the <em>local</em> time, not the UTC time, so applying <code>.replace(tzinfo=pytz.utc)</code> to them would not be correct.</p>
<p>Another nice way to do it is:</p>
<pre><code>datetime.now(pytz.utc)
</code></pre>
<p>which is a bit shorter and does the same.</p>
<hr/>
<p>Further reading/watching why to prefer UTC in many cases:</p>
<ul>
<li><a href="https://pythonhosted.org/pytz/" rel="noreferrer">pytz documentation</a></li>
<li><a href="http://web.archive.org/web/20160803154621/http://www.windward.net/blogs/every-developer-know-time/" rel="noreferrer">What Every Developer Should Know About Time</a> – development hints for many real-life use cases</li>
<li><a href="https://www.youtube.com/watch?v=-5wpm-gesOY" rel="noreferrer">The Problem with Time &amp; Timezones - Computerphile</a> – funny, eye-opening explanation about the complexity of working with timezones (video)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Get the current time, in a specific timezone:</p>
<pre><code>import datetime
import pytz
my_date = datetime.datetime.now(pytz.timezone('US/Pacific'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, the standard library makes it much easier to specify UTC as the timezone:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now(datetime.timezone.utc)
datetime.datetime(2016, 8, 26, 14, 34, 34, 74823, tzinfo=datetime.timezone.utc)
</code></pre>
<p>If you want a solution that uses only the standard library and that works in both Python 2 and Python 3, see <a href="https://stackoverflow.com/a/25421145/247696">J. F. Sebastien's answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a stdlib solution that works on both Python 2 and 3:</p>
<pre><code>from datetime import datetime

now = datetime.now(utc) # timezone-aware datetime.utcnow()
today = datetime(now.year, now.month, now.day, tzinfo=utc) # midnight
</code></pre>
<p>where <code>today</code> is an aware datetime instance representing beginning of the day (midnight) in UTC and <code>utc</code> is a tzinfo object (<a href="https://docs.python.org/2/library/datetime.html#tzinfo-objects" rel="noreferrer">example from the docs</a>):</p>
<pre><code>from datetime import tzinfo, timedelta

ZERO = timedelta(0)

class UTC(tzinfo):
    def utcoffset(self, dt):
        return ZERO

    def tzname(self, dt):
        return "UTC"

    def dst(self, dt):
        return ZERO

utc = UTC()
</code></pre>
<p>Related:  performance comparison of <a href="https://stackoverflow.com/a/33276464/4279">several ways to get midnight (start of a day) for a given UTC time</a>.<br/>
Note: it is more complex, to <a href="https://stackoverflow.com/q/373370/4279">get midnight for a time zone with a non-fixed utc offset</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another method to construct time zone aware datetime object representing current time:</p>
<pre><code>import datetime
import pytz

pytz.utc.localize( datetime.datetime.utcnow() )  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Django, you can set dates non-tz aware (only utc).</p>
<p><strong>Comment</strong> the following line in settings.py:</p>
<pre><code>USE_TZ = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://pytz.sourceforge.net/" rel="nofollow noreferrer">pytz</a> is a Python library that allows accurate and cross platform timezone calculations using Python 2.3 or higher.</p>
<p>With the stdlib, this is not possible. </p>
<p>See a similar question on <a href="https://stackoverflow.com/questions/796008/python-cant-subtract-offset-naive-and-offset-aware-datetimes">SO</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way to generate it with the stdlib:</p>
<pre><code>import time
from datetime import datetime

FORMAT='%Y-%m-%dT%H:%M:%S%z'
date=datetime.strptime(time.strftime(FORMAT, time.localtime()),FORMAT)
</code></pre>
<p><em>date</em> will store the local date and the <strong>offset from UTC</strong>, not the date at UTC timezone, so you can use this solution if you need to identify <strong>which timezone the date is generated at</strong>. In this example and in my local timezone:</p>
<pre><code>date
datetime.datetime(2017, 8, 1, 12, 15, 44, tzinfo=datetime.timezone(datetime.timedelta(0, 7200)))

date.tzname()
'UTC+02:00'
</code></pre>
<p>The key is adding the <code>%z</code> directive to the representation FORMAT, to indicate the UTC offset of the generated time struct. Other representation formats can be consulted in the datetime module <a href="https://docs.python.org/3.5/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">docs</a></p>
<p>If you need the date at the UTC timezone, you can replace <em>time.localtime()</em> with <em>time.gmtime()</em></p>
<pre><code>date=datetime.strptime(time.strftime(FORMAT, time.gmtime()),FORMAT)

date    
datetime.datetime(2017, 8, 1, 10, 23, 51, tzinfo=datetime.timezone.utc)

date.tzname()
'UTC'
</code></pre>
<p><strong>Edit</strong></p>
<p><strong>This works only on python3</strong>. The z directive is not available on python 2 <a href="https://github.com/python/cpython/blob/2.7/Lib/_strptime.py#L194" rel="nofollow noreferrer">_strptime.py code</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Why won't use dateutil as described here:
<a href="http://joelinoff.com/blog/?p=802" rel="nofollow">http://joelinoff.com/blog/?p=802</a></p>
<pre><code>from dateutil.tz import tzlocal
# Get the current date/time with the timezone.
now = datetime.datetime.now(tzlocal())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a local <code>timezone</code> using <code>datetime</code> by parsing the output of a <code>time.strftime</code> call that uses the <code>%z</code> directive (introduced in Python 3.3), as <a href="https://stackoverflow.com/a/38454355/200234">shown by jcazor</a>. You can use that <code>timezone</code> to create an aware <code>datetime</code> instance with a one-liner:</p>
<pre><code>import time
from datetime import datetime

aware_local_now = datetime.now(
    tz=datetime.strptime(time.strftime("%z", time.localtime()), "%z").tzinfo)

print(aware_local_now)
2018-03-01 13:41:26.753644-08:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Getting a timezone-aware date in <code>utc</code> timezone is enough for date subtraction to work. </p>
<p>But if you want a timezone-aware date in your current time zone, <code>tzlocal</code> is the way to go:</p>
<pre><code>from tzlocal import get_localzone  # pip install tzlocal
from datetime import datetime
datetime.now(get_localzone())
</code></pre>
<p>PS <code>dateutil</code> has a similar function (<code>dateutil.tz.tzlocal</code>). But inspite of sharing the name it has a completely different code base, which as <a href="https://stackoverflow.com/questions/13218506/how-to-get-system-timezone-setting-and-pass-it-to-pytz-timezone">noted</a> by J.F. Sebastian can give wrong results.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you get current time and date in python then import date and time,pytz package in python after you will get current date and time like as..</p>
<pre><code>from datetime import datetime
import pytz
import time
str(datetime.strftime(datetime.now(pytz.utc),"%Y-%m-%d %H:%M:%S%t"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use timezone as shown below for timezone aware date time, default is UTC:</p>
<pre><code>    from django.utils import timezone
    today = timezone.now() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm adding this answer as someone who frequently works with non-UTC timezones.</p>
<p>The only timezone that has its own method is <code>timezone.utc</code>, but you can fudge a timezone with any UTC offset if you need to by using <code>timedelta</code> &amp; <code>timezone</code>, and forcing it using <code>.replace</code>.</p>
<pre><code>In [1]: from datetime import datetime, timezone, timedelta

In [2]: def force_timezone(dt, utc_offset=0):
   ...:     return dt.replace(tzinfo=timezone(timedelta(hours=utc_offset)))
   ...:

In [3]: dt = datetime(2011,8,15,8,15,12,0)

In [4]: str(dt)
Out[4]: '2011-08-15 08:15:12'

In [5]: str(force_timezone(dt, -8))
Out[5]: '2011-08-15 08:15:12-08:00'
</code></pre>
<p>Using <code>timezone(timedelta(hours=n))</code> as the time zone is the real silver bullet here, and it has lots of other useful applications.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another alternative, in my mind a better one, is using <code>Pendulum</code> instead of <code>pytz</code>. Consider the following simple code:</p>
<pre><code>&gt;&gt;&gt; import pendulum

&gt;&gt;&gt; dt = pendulum.now().to_iso8601_string()
&gt;&gt;&gt; print (dt)
2018-03-27T13:59:49+03:00
&gt;&gt;&gt;
</code></pre>
<p>To install Pendulum and see their documentation, go <a href="https://pendulum.eustace.io/docs/#installation" rel="nofollow noreferrer">here</a>. It have tons of options (like simple ISO8601, RFC3339 and many others format support), better performance and tend to yield simpler code.   </p>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/questions/373370/how-do-i-get-the-utc-time-of-midnight-for-a-given-timezone">How do I get the UTC time of “midnight” for a given timezone?</a></span>
<span class="comment-copy">Seems like we can use <code>datetime.now().astimezone()</code> since Python 3.6</span>
<span class="comment-copy">How about <code>datetime.now(pytz.utc)</code> instead of <code>datetime.utcnow().replace(tzinfo = pytz.utc)</code> ?</span>
<span class="comment-copy"><code>now(utc)</code> doesn't return today (unless it is midnight in UTC), it returns the current time in UTC. You need also <a href="http://stackoverflow.com/a/25421145/4279"><code>.replace(hour=0, minute=0, ...)</code> to get the beginning of the day (like <code>datetime.today()</code>)</a></span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.today" rel="nofollow noreferrer">docs</a> say that <code>today()</code> returns the current time, not midnight. If there is a use case where midnight is required, yes, the replacement needs to be done accordingly. Since the original question was about datetime difference, I don't think that midnight is required.</span>
<span class="comment-copy">@AndiDog: My comment implies that I thought (incorrectly) that <code>datetime.today()</code> is <code>combine(date.today(), time())</code>. <code>datetime</code> has both <code>.now()</code> and <code>.today()</code> methods that (as you've correctly pointed out) return (almost) the same thing. There is no <code>date.now()</code> method. <code>date</code> and <code>datetime</code> objects are not interchangeable. Using a datetime object instead of a <code>date</code> object can produce subtle bugs; I don't see any reason for <code>datetime.today()</code> to exist if it is a near duplicate of <code>datetime.now()</code>.</span>
<span class="comment-copy">Adding to this answer, if you happen to be using django, always use <code>timezone.now()</code> instead of <code>datetime.now()</code> since it will use UTC automatically if <code>USE_TZ = True</code>.  <code>timezone</code> is locating at <code>django.utils.timezone</code>, documentation:  <a href="https://docs.djangoproject.com/en/1.11/topics/i18n/timezones/" rel="nofollow noreferrer">docs.djangoproject.com/en/1.11/topics/i18n/timezones</a></span>
<span class="comment-copy">See <a href="https://github.com/newvem/pytz/blob/f137ff00112a9682bc4e4945067b3b88f158d010/pytz/tzinfo.py#L192-L193" rel="nofollow noreferrer">this</a>.</span>
<span class="comment-copy">you should NOT use localized time except for output. Many things go wrong when using timezone based datetime: a simple timedelta does not take daylight saving into account unless you are in UTC time to begin with. Always use timezone aware based on UTC. convert to local timezone on output when needed.</span>
<span class="comment-copy">To reiterate a disagreement with @MrE that I've previously voiced in the comments on the accepted answer: there are perfectly valid reasons to work with localised datetimes and <i>"you should NOT use localized time except for output"</i> is overly broad advice. Suppose you're adding 1 day to a datetime a few hours before a daylight savings boundary at which the clocks go back by an hour. What result do you want? If you think the time should be the same, use localised datetimes. If you think it should be an hour earlier, use UTC or timezone-naive datetimes. Which makes sense is domain-dependent.</span>
<span class="comment-copy">@MarkAmery as much as I can agree that you may want to ADD or SUBTRACT a number of days or hours and not care about timezone issues (like your example), this comment pertains to passing timezone corrected time to a client. Since Python is primarily used for back end processes, it passes times to a client. The server should always pass date/time in UTC and the client should convert it to its own local date/time/timezone, otherwise bad things happen: just check the output of <code>datetime.datetime(2016, 11, 5, 9, 43, 45, tzinfo=pytz.timezone('US/Pacific'))</code> and see if that's what you expected</span>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Local_mean_time" rel="nofollow noreferrer">en.wikipedia.org/wiki/Local_mean_time</a></span>
<span class="comment-copy">note that <code>pytz.utc</code> and <code>pytz.UTC</code> are both defined (and are the same)</span>
<span class="comment-copy">This answer is better than the accepted one since it is more universal: <code>replace()</code>ing timezone is generally error-prone in most other uses, while <code>localize()</code>ing is the preferred way of assigning  timezone to naive timestamps.</span>
<span class="comment-copy">@AntonyHatchkins: <code>.localize()</code> method fails for ambiguous local times (non-utc input). <a href="http://stackoverflow.com/a/16660476/4279">@philfreo's answer that uses <code>.now(pytz_timezone)</code></a> continues to work in such cases.</span>
<span class="comment-copy">As specified in python docs, <code>.now(pytz_timezone)</code> does exactly the same as <code>localize(utcnow)</code> - first it generates current time in UTC, then it assigns it a timezone: "&lt;...&gt;In this case the result is equivalent to <code>tz.fromutc(datetime.utcnow().replace(tzinfo=tz))</code>".  Both answers are correct and work always.</span>
<span class="comment-copy">The only naive (non-utc) time that can be safely made timezone aware is <i>now</i> : the underlying system is supposed to know the UTC value and <code>pytz</code> through OLSON db is supposed to know how to convert it to any timezone in the world. Making any other naive (non-utc) time timezone aware is difficult because of the ambiguity during daylight saving shifts. That's not a problem of <code>.localize</code> (feeding it a <code>is_dst</code> value makes it work for any date). That's an inherent problem of daylight saving practice.</span>
<span class="comment-copy">where did you see django mentioned in this question?</span>
<span class="comment-copy">Now I just want to crawl under a rock and die.</span>
<span class="comment-copy">"non-tz aware" doesn't magically make dates only-UTC</span>
<span class="comment-copy">ValueError: 'z' is a bad directive in format '%Y-%m-%dT%H:%M:%S%z'</span>
<span class="comment-copy">You are on python 2, right? Unfortunately, It seems the z directive is not available on python 2.  <a href="https://github.com/python/cpython/blob/2.7/Lib/_strptime.py#L194" rel="nofollow noreferrer">_strptime.py code</a></span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/13218506/how-to-get-system-timezone-setting-and-pass-it-to-pytz-timezone">this answer</a> by J.F. Sebastian for a situation where this gives incorrect result.</span>
<span class="comment-copy">I think the error in the other post is only relevant in specific use cases. The <code>tzlocal()</code> function still is one of the simplest solutions and should definitely be mentioned here.</span>
<span class="comment-copy">python is usually used on the server. Local time zone on a server is usually pointless and should always be set to UTC. Setting datetime tzinfo this way fails in some cases. better use UTC, then localize to the wanted timezone only on output. any timedelta computation for example doesn't consider daylight saving, so these should be done in UTC, then localized.</span>
<span class="comment-copy">@MrE Wrong, offtopic, examples?</span>
<span class="comment-copy">try using a datetime object localized in a timezone that observes daylight saving, add a number of days to change daylight saving state, and you'll see that operating on datetime objects in localized timezone fails and won't respect daylight saving. Hence my comment that you should ALWAYS do any datetime operation in UTC time.</span>
<span class="comment-copy">the point being: don't do this, do your operations in UTC, and then use datetime.astimezone(timezone) to convert to the localtime zone on output.</span>
<span class="comment-copy">not sure why the vote down here, this code is working in multiple programs that run 7/24 for me :). not that i mind other opinion, but please say why it is not working for you, to allow me to check it. Thanks in advance</span>
