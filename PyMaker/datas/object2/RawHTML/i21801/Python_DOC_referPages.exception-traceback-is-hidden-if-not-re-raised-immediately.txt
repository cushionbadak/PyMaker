<div class="post-text" itemprop="text">
<p>I've got a piece of code similar to this:</p>
<pre><code>import sys

def func1():
    func2()

def func2():
    raise Exception('test error')

def main():
    err = None

    try:
        func1()
    except:
        err = sys.exc_info()[1]
        pass

    # some extra processing, involving checking err details (if err is not None)

    # need to re-raise err so caller can do its own handling
    if err:
        raise err

if __name__ == '__main__':
    main()
</code></pre>
<p>When <code>func2</code> raises an exception I receive the following traceback:</p>
<pre><code>Traceback (most recent call last):
  File "err_test.py", line 25, in &lt;module&gt;
    main()
  File "err_test.py", line 22, in main
    raise err
Exception: test error
</code></pre>
<p>From here I don't see where the exception is coming from. The original traceback is lost.</p>
<p>How can I preserve original traceback and re-raise it? I want to see something similar to this:</p>
<pre><code>Traceback (most recent call last):
  File "err_test.py", line 26, in &lt;module&gt;
    main()
  File "err_test.py", line 13, in main
    func1()
  File "err_test.py", line 4, in func1
    func2()
  File "err_test.py", line 7, in func2
    raise Exception('test error')
Exception: test error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A blank <code>raise</code> raises the last exception.</p>
<pre><code># need to re-raise err so caller can do its own handling
if err:
    raise
</code></pre>
<p>If you use <code>raise something</code> Python has no way of knowing if <code>something</code> was an exception just caught before, or a new exception with a new stack trace. That's why there is the blank <code>raise</code> that preserves the stack trace.</p>
<p><a href="https://docs.python.org/3/reference/simple_stmts.html#raise">Reference here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to <a href="http://docs.python.org/2/reference/simple_stmts.html#grammar-token-raise_stmt">modify and rethrow</a> an exception:</p>
<blockquote>
<p>If no expressions are present, <code>raise</code> re-raises the last exception that
  was active in the current scope. If no exception is active in the
  current scope, a <code>TypeError</code> exception is raised indicating that this is
  an error (if running under IDLE, a <code>Queue.Empty</code> exception is raised
  instead).</p>
<p>Otherwise, <code>raise</code> evaluates the expressions to get three objects, using
  <code>None</code> as the value of omitted expressions. The first two objects are
  used to determine the type and value of the exception.</p>
<p>If a third object is present and not <code>None</code>, it must be a traceback
  object (see section The standard type hierarchy), and it is
  substituted instead of the current location as the place where the
  exception occurred. If the third object is present and not a traceback
  object or <code>None</code>, a <code>TypeError</code> exception is raised.</p>
<p>The three-expression
  form of <code>raise</code> is useful to re-raise an exception transparently in an
  <code>except</code> clause, but <code>raise</code> with no expressions should be preferred if
  the exception to be re-raised was the most recently active exception
  in the current scope.</p>
</blockquote>
<p>So if you want to modify the exception and rethrow it, you can do this:</p>
<pre><code>try:
    buggy_code_which_throws_exception()
except Exception as e:
    raise Exception, "The code is buggy: %s" % e, sys.exc_info()[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get a lot of information about the exception via the <code>sys.exc_info()</code> along with the <a href="http://docs.python.org/library/traceback.html" rel="nofollow">traceback</a> module</p>
<p>try the following extension to your code.</p>
<pre><code>import sys
import traceback

def func1():
    func2()

def func2():
    raise Exception('test error')

def main():

    try:
        func1()
    except:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        # Do your verification using exc_value and exc_traceback

        print "*** print_exception:"
        traceback.print_exception(exc_type, exc_value, exc_traceback,
                                  limit=3, file=sys.stdout)

if __name__ == '__main__':
    main()
</code></pre>
<p>This would print, similar to what you wanted.</p>
<pre><code>*** print_exception:
Traceback (most recent call last):
  File "err_test.py", line 14, in main
    func1()
  File "err_test.py", line 5, in func1
    func2()
  File "err_test.py", line 8, in func2
    raise Exception('test error')
Exception: test error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While @Jochen's answer works well in the simple case, it is not capable of handling more complex cases, where you are not directly catching and rethrowing, but are for some reason given the exception as an object and wish to re-throw in a completely new context (i.e. if you need to handle it in a different process).</p>
<p>In this case, I propose the following:</p>
<ol>
<li>get the original exc_info </li>
<li>format the original error message, with stack trace</li>
<li>throw a new exception with that full error message (stack trace incl.) embedded</li>
</ol>
<p>Before you do this, define a new exception type that you will rethrow later...</p>
<pre><code>class ChildTaskException(Exception):
    pass
</code></pre>
<p>In the offending code...</p>
<pre><code>import sys
import traceback

try:
    # do something dangerous
except:
    error_type, error, tb = sys.exc_info()
    error_lines = traceback.format_exception(error_type, error, tb)
    error_msg = ''.join(error_lines)
    # for example, if you are doing multiprocessing, you might want to send this to another process via a pipe
    connection.send(error_msg)
</code></pre>
<p>Rethrow...</p>
<pre><code># again, a multiprocessing example of receiving that message through a pipe
error_msg = pcon.recv()
raise ChildTaskException(error_msg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your main function needs to look like this:</p>
<pre><code>def main():
    try:
        func1()
    except Exception, err:
        # error processing
        raise
</code></pre>
<p>This is the standard way of handling (and re-raising) errors. <a href="http://codepad.org/gc1U5487" rel="nofollow">Here is a codepad demonstration.</a></p>
</div>
<span class="comment-copy">Worth mentioning that this doesn't work in Python 3.</span>
<span class="comment-copy">"This" in yprez's comment means "empty raise after leaving the except block." The bare "raise" does work in Python 3 (but only inside of the except block.)</span>
<span class="comment-copy">Interesting. The accepted answer handles the OP's use case better than this, but this is interesting as a more general answer. I can't see much use for it though since the traceback gets really misleading if you catch, say, a <code>ValueError</code> and raise a <code>RuntimeError</code> (you can't see, then, that a ValueError was ever involved), and the only cases I've come across personally when I've wanted to preserve the traceback but do something more complex than just <code>raise</code> with no arguments were cases where I wanted to raise an exception of a different type.</span>
<span class="comment-copy">I've used this to rethrow the same exception with a different message, including more details about the conditions that caused the exception, which are available in the outer scope but not the inner.</span>
<span class="comment-copy">There are sometimes very good reasons for using this three expression form of raise. Your answer just helped me write a decorator that wraps integration tests and on failure takes a screenshot. And then raises the original assertion failure. The trouble being that the traceback was getting clobbered by try/excepts in the screen shot taking code. So thanks!</span>
<span class="comment-copy">is there a way to do this in a Python 2 and Python 3 compatible way? I get SyntaxError in Python 3.</span>
<span class="comment-copy">@elias <a href="https://pythonhosted.org/six/#six.reraise" rel="nofollow noreferrer">six.reraise(exc_type, exc_value, exc_traceback=None)</a></span>
<span class="comment-copy">No, I don't want to print it in the <code>main()</code>. I want to re-raise it with the original traceback and let caller of <code>main()</code> to handle it (e.g. ignore, print to the console, save into the db, etc). Jochen's solution worked.</span>
<span class="comment-copy">This would be the best answer for Python3, if you change the <code>print</code> to something like  <code>raise exc_type.with_traceback(exc_value, exc_traceback)</code></span>
<span class="comment-copy">I have a feeling that <code>except Exception, err:</code> can be bypassed with old-style <code>raise "bad exception"</code> way of raising exceptions</span>
<span class="comment-copy">@parxier then use <code>except object, err</code></span>
<span class="comment-copy">It's not any different from <code>err = sys.exc_info()[1]</code>. Anyway, the main point was to re-raise <code>err</code> outside of <code>except</code> block without loosing original traceback. Jochen's solution worked.</span>
