<div class="post-text" itemprop="text">
<p>In Python, what is the difference between expressions and statements?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/reference/expressions.html" rel="noreferrer">Expressions</a> only contain <a href="http://docs.python.org/release/2.5.2/ref/identifiers.html" rel="noreferrer">identifiers</a>, <a href="http://docs.python.org/release/2.5.2/ref/literals.html" rel="noreferrer">literals</a> and <a href="http://docs.python.org/release/2.5.2/ref/operators.html" rel="noreferrer">operators</a>, where operators include arithmetic and boolean operators, the function <a href="https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls" rel="noreferrer">call operator</a> <code>()</code> the <a href="https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription" rel="noreferrer">subscription operator</a> <code>[]</code> and similar, and can be reduced to some kind of "value", which can be any Python object.  Examples:</p>
<pre><code>3 + 5
map(lambda x: x*x, range(10))
[a.x for a in some_iterable]
yield 7
</code></pre>
<p>Statements (see <a href="http://docs.python.org/reference/simple_stmts.html" rel="noreferrer"><a href="https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls" rel="noreferrer">1</a></a>, <a href="http://docs.python.org/reference/compound_stmts.html" rel="noreferrer"><a href="https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription" rel="noreferrer">2</a></a>), on the other hand, are everything that can make up a line (or several lines) of Python code.  Note that expressions are statements as well.  Examples:</p>
<pre><code># all the above expressions
print 42
if x: do_y()
return
a = 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Expression</strong> -- from my dictionary: </p>
<blockquote>
<p>expression: <em>Mathematics</em> a collection
  of symbols that jointly express a
  quantity : the expression for the
  circumference of a circle is 2πr.</p>
</blockquote>
<p>In gross general terms: <strong>Expressions produce at least one value.</strong></p>
<p>In Python, expressions are covered extensively in the <a href="http://docs.python.org/reference/expressions.html" rel="noreferrer">Python Language Reference</a> In general, expressions in Python are composed of a syntactically legal combination of <a href="http://docs.python.org/reference/expressions.html#atoms" rel="noreferrer">Atoms</a>, <a href="http://docs.python.org/reference/expressions.html#primaries" rel="noreferrer">Primaries</a> and <a href="http://docs.python.org/reference/expressions.html#summary" rel="noreferrer">Operators</a>. </p>
<p><a href="http://en.wikipedia.org/wiki/Python_(programming_language)#Expressions" rel="noreferrer">Python expressions from Wikipedia</a></p>
<p>Examples of expressions: </p>
<p><a href="http://docs.python.org/reference/lexical_analysis.html#literals" rel="noreferrer">Literals</a> and syntactically correct combinations with <a href="http://docs.python.org/reference/lexical_analysis.html#operators" rel="noreferrer">Operators</a> and <a href="http://docs.python.org/library/functions.html" rel="noreferrer">built-in functions</a> or the call of a user-written functions:</p>
<pre><code>&gt;&gt;&gt; 23
23
&gt;&gt;&gt; 23l
23L
&gt;&gt;&gt; range(4)
[0, 1, 2, 3] 
&gt;&gt;&gt; 2L*bin(2)
'0b100b10'
&gt;&gt;&gt; def func(a):      # Statement, just part of the example...
...    return a*a     # Statement...
... 
&gt;&gt;&gt; func(3)*4
36    
&gt;&gt;&gt; func(5) is func(a=5)
True
</code></pre>
<p><strong>Statement</strong> from Wikipedia:</p>
<blockquote>
<p>In computer programming a statement
  can be thought of as the smallest
  standalone element of an imperative
  programming language. A program is
  formed by a sequence of one or more
  statements. A statement will have
  internal components (e.g.,
  expressions).</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Python_(programming_language)#Statements_and_control_flow" rel="noreferrer">Python statements from Wikipedia</a></p>
<p>In gross general terms: <strong>Statements Do Something</strong> and are often composed of expressions (or other statements)</p>
<p>The Python Language Reference covers <a href="http://docs.python.org/reference/simple_stmts.html" rel="noreferrer">Simple Statements</a> and <a href="http://docs.python.org/reference/compound_stmts.html" rel="noreferrer">Compound Statements</a> extensively. </p>
<p>The distinction of "Statements do something" and "expressions produce a value" distinction can become blurry however: </p>
<ul>
<li><a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">List Comprehensions</a> are considered "Expressions" but they have looping constructs and therfore also Do Something. </li>
<li>The <code>if</code> is usually a statement, such as <code>if x&lt;0: x=0</code> but you can also have a <a href="http://docs.python.org/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a> like <code>x=0 if x&lt;0 else 1</code> that are expressions. In other languages, like C, this form is called an operator like this <code>x=x&lt;0?0:1;</code> </li>
<li>You can write you own Expressions by writing a function. <code>def func(a): return a*a</code> is an expression when used but made up of statements when defined. </li>
<li>An expression that returns <code>None</code> is a procedure in Python: <code>def proc(): pass</code> Syntactically, you can use <code>proc()</code> as an expression, but that is probably a bug...</li>
<li>Python is a bit more strict than say C is on the differences between an Expression and Statement. In C, any expression is a legal statement. You can have <code>func(x=2);</code> Is that an Expression or Statement? (<a href="https://stackoverflow.com/questions/19132/expression-versus-statement/19224#19224">Answer: Expression used as a Statement with a side-effect.</a>) The form <code>func(x=2)</code> is illegal in Python (or at least it has a different meaning <code>func(a=3)</code> sets the named argument <code>a</code> to 3)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Though this isn't related to Python:</p>
<p>An <code>expression</code> evaluates to a value.
A <code>statement</code> does something.</p>
<pre><code>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = x + 1     # an expression
&gt;&gt;&gt; print y       # a statement (in 2.x)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Statements represent an action or command e.g <em>print statements, assignment statements.</em> </p>
<pre><code>print 'hello', x = 1
</code></pre>
<p>Expression is a combination of variables, operations and values that yields a result value.</p>
<pre><code>5 * 5 # yields 25
</code></pre>
<p>Lastly, expression statements</p>
<pre><code>print 5*5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>An expression is a statement that returns a value.  So if it can appear on the right side of an assignment, or as a parameter to a method call, it is an expression.</li>
<li>Some code can be both an expression or a statement, depending on the context.  The language may have a means to differentiate between the two when they are ambiguous.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>An expression is something that can be reduced to a value, for example <code>"1+3"</code> or <code>"foo = 1+3"</code>.</p>
<p>It's easy to check:</p>
<pre><code>print foo = 1+3
</code></pre>
<p>If it doesn't work, it's a statement, if it does, it's an expression.</p>
<p>Another statement could be:</p>
<pre><code>class Foo(Bar): pass
</code></pre>
<p>as it cannot be reduced to a value.</p>
</div>
<div class="post-text" itemprop="text">
<p>An expression is something, while a statement does something.
<br/>An expression is a statement as well, but it must have a return.</p>
<pre><code>&gt;&gt;&gt; 2 * 2　　　　　　　  　#expression
&gt;&gt;&gt; print(2 * 2)　　　　　#statement
</code></pre>
<p>PS:The interpreter always prints out the values of all expressions.</p>
</div>
<div class="post-text" itemprop="text">
<p>A statement contains a keyword.</p>
<p>An expression does not contain a keyword.</p>
<p><code>print "hello"</code> is statement, because <code>print</code> is a keyword.</p>
<p><code>"hello"</code> is an expression, but list compression is against this.</p>
<p>The following is an expression statement, and it is true without list comprehension:</p>
<pre><code>(x*2 for x in range(10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Expressions:</strong></p>
<ul>
<li>Expressions are formed by combining <code>objects</code> and <code>operators</code>.</li>
<li>An expression has a value, which has a type.</li>
<li>Syntax for a simple expression:<code>&lt;object&gt;&lt;operator&gt;&lt;object&gt;</code></li>
</ul>
<p><code>2.0 + 3</code> is an expression which evaluates to <code>5.0</code> and has a type <code>float</code> associated with it.</p>
<p><strong>Statements</strong></p>
<p>Statements are composed of expression(s). It can span multiple lines.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>STATEMENT:</strong></p>
<p>A Statement is a action or a command that does something. Ex: If-Else,Loops..etc</p>
<pre><code>val a: Int = 5
If(a&gt;5) print("Hey!") else print("Hi!")
</code></pre>
<p><strong>EXPRESSION:</strong></p>
<p>A Expression is a combination of values, operators and literals which yields something.</p>
<pre><code>val a: Int = 5 + 5 #yields 10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python calls expressions "expression statements", so the question is perhaps not fully formed.</p>
<p>A statement consists of pretty much anything you can do in Python: calculating a value, assigning a value, deleting a variable, printing a value, returning from a function, raising an exception, etc. The full list is here: <a href="http://docs.python.org/reference/simple_stmts.html#" rel="nofollow">http://docs.python.org/reference/simple_stmts.html#</a> </p>
<p>An expression statement is limited to calling functions (e.g., 
math.cos(theta)"), operators ( e.g., "2+3"), etc.  to produce a value. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think an expression contains operators + operands and the object that holds the result of the operation... e.g.</p>
<pre><code>var sum = a + b;
</code></pre>
<p>but a statement is simply a line of a code (it may be an expression) or block of code... e.g.</p>
<pre><code>fun printHello(name: String?): Unit {
if (name != null)
    println("Hello ${name}")
else
    println("Hi there!")
// `return Unit` or `return` is optional
</code></pre>
<p>}</p>
</div>
<div class="post-text" itemprop="text">
<p>In simple words: a statement is made of one or more expressions, whereas an expression is made of one or more of Identifiers (names), Literals, and Operators.</p>
</div>
<span class="comment-copy">expressions are <i>parts</i> of statements</span>
<span class="comment-copy">@bismigalis: Every valid Python expression can be used as a statement (called an <a href="http://docs.python.org/2/reference/simple_stmts.html#expression-statements" rel="nofollow noreferrer">"expression statement"</a>).  In this sense, expressions <i>are</i> statements.</span>
<span class="comment-copy">yes you are right, I didnt consider this case.</span>
<span class="comment-copy">Expressions can also include function calls (including calling classes for object instantiation).  Technically these are "identifiers" exactly like names bound to values in an = statement ... even though the binding is through the 'def' or 'class' keywords.  However, for this answer I would separately spell out function calls to make that clear.</span>
<span class="comment-copy">@JimDennis: The list of examples I gave includes a function call (second example).  I also included links to the full grammar, so I guess I covered this.</span>
<span class="comment-copy">But note that in all language except the really really "pure" ones, expressions can "do something" (more formally: have a side effect) just as well.</span>
<span class="comment-copy">@delnan: Can you give an example (curious)? I am not aware.</span>
<span class="comment-copy">Likewise, <code>somelist.append(123)</code>. Most function calls, really.</span>
<span class="comment-copy">y = x + 1 is not an expression but a statement. Try eval("y = x + 1") and you'll have an error.</span>
<span class="comment-copy">y = x +1 is an expression statement</span>
<span class="comment-copy">the question asks specifically about <b>python</b>, so although the explanation is extensive and great for JavaScript, it is off-topic for this question.</span>
<span class="comment-copy">@martin-martin, I will keep my explanation but delete my examples, and then it won't be off topic per your downvote.</span>
<span class="comment-copy">sweet! would be worth it to keep your previous around and post it in a relevant thread, it is a thorough explanation. :)</span>
<span class="comment-copy">As executing your first example would show, assignment is <i>not</i> an expression (not really, that is - <code>a = b = expr</code> is allowed, as a special case) in Python. In languages drawing more inspiration from C, it is.</span>
<span class="comment-copy"><code>class Foo(bar):</code> is the beginning of a statement, not a complete statement.</span>
<span class="comment-copy"><code>foo = 1+3</code> is NOT an expression. It is a statement (an assignment to be precise). The part <code>1+3</code> is an expression though.</span>
<span class="comment-copy">My formulation is very, very precise: "If it doesn't work, it's a statement, if it does, it's an expression.". Execute it, and you'll have your answer.</span>
<span class="comment-copy">in my opinion, a statement is an expression with a null value</span>
<span class="comment-copy">That strongly depends on your definition of a 'keyword'. <code>x = 1</code> is a perfectly fine statement, but does not contain keywords.</span>
<span class="comment-copy">This is a duplicate of this existing answer: <a href="https://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python/4728162#4728162" title="what is the difference between an expression and a statement in python">stackoverflow.com/questions/4728073/…</a>.</span>
<span class="comment-copy">Maybe it's duplicate but it shares my views for the question above. No offence</span>
<span class="comment-copy">No, Python doesn't call expressions "expression statements".  Python calls statements only consisting of a single expression "expression statements".</span>
<span class="comment-copy">... and it's not alone doing so.</span>
