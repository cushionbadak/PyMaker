<div class="post-text" itemprop="text">
<p>What is the difference between <code>subprocess.Popen()</code> and <code>os.system()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you check out the <a href="http://docs.python.org/library/subprocess.html#replacing-os-system" rel="noreferrer">subprocess section of the Python docs</a>, you'll notice there is an example of how to replace <code>os.system()</code> with <code>subprocess.Popen()</code>:</p>
<pre><code>sts = os.system("mycmd" + " myarg")
</code></pre>
<p>...does the same thing as...</p>
<pre><code>sts = Popen("mycmd" + " myarg", shell=True).wait()
</code></pre>
<p>The "improved" code looks more complicated, but it's better because once you know <code>subprocess.Popen()</code>, you don't need anything else. <code>subprocess.Popen()</code> replaces several other tools (<code>os.system()</code> is just one of those) that were scattered throughout three other Python modules.</p>
<p>If it helps, think of <code>subprocess.Popen()</code> as a very flexible <code>os.system()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess.Popen()</code> is strict super-set of <code>os.system()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Subprocess is based on popen2, and as such has a number of advantages - there's a full list in the <a href="http://www.python.org/dev/peps/pep-0324/" rel="noreferrer">PEP here</a>, but some are:</p>
<ul>
<li>using pipe in the shell</li>
<li>better newline support</li>
<li>better handling of exceptions</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>os.system is equivalent to Unix <a href="http://linux.die.net/man/3/system">system</a> command, while subprocess was a helper module created to provide many of the facilities provided by the Popen commands with an easier and controllable interface. Those were designed similar to the <a href="http://linux.die.net/man/3/popen">Unix Popen</a> command.</p>
<pre><code>system() executes a command specified in command by calling /bin/sh -c command, and returns after the command has been completed
</code></pre>
<p>where as</p>
<pre><code>The popen() function opens a process by creating a pipe, forking, and invoking the shell.
</code></pre>
<p>If you are thinking, which one to use, then use <strong>subprocess</strong> definitely because you you have all facilities for execution, plus additional control over the process.</p>
</div>
<div class="post-text" itemprop="text">
<p>When running python (cpython) on windows the <code>&lt;built-in function system&gt;</code> <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> will execute under the curtains <a href="https://msdn.microsoft.com/en-us/library/277bwbdz.aspx" rel="nofollow noreferrer">_wsystem</a> while if you're using a non-windows os, it'll use <a href="http://man7.org/linux/man-pages/man3/system.3.html" rel="nofollow noreferrer">system</a>.</p>
<p>On contrary, Popen should use <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" rel="nofollow noreferrer">CreateProcess</a> on windows and <a href="https://github.com/python/cpython/blob/master/Lib/subprocess.py#L1423" rel="nofollow noreferrer">_posixsubprocess.fork_exec</a> in posix-based operating-systems.</p>
<p>That said, an important piece of advice comes from <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> docs, which says:</p>
<blockquote>
<p>The subprocess module provides more powerful facilities for spawning
  new processes and retrieving their results; using that module is
  preferable to using this function. See the Replacing Older Functions
  with the subprocess Module section in the subprocess documentation for
  some helpful recipes.</p>
</blockquote>
</div>
<span class="comment-copy">You can also use <code>sts = p.wait()</code> instead of the last line.</span>
<span class="comment-copy">@JacobMarble so suppose I am calling a selenium scraping script from another python script, which of these would allow me to complete the scraping script and then and only then execute the next line of code? As in, my scraping should complete before the execution can continue.</span>
<span class="comment-copy">Maybe also mention <a href="http://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess" title="actual meaning of shell true in subprocess">stackoverflow.com/questions/3172470/â€¦</a> to point out that you ought to avoid the <code>shell=True</code> if you can.  Having this option is one of the benefits of <code>subprocess.Popen()</code> and its helper functions.</span>
<span class="comment-copy">@PrakharMohanSrivastava If you want to block the flow and wait for command to complete its work check out: <a href="https://stackoverflow.com/a/2837319/5252192">stackoverflow.com/a/2837319/5252192</a></span>
<span class="comment-copy">@PrakharMohanSrivastava, in general both <code>os.system</code> and <code>subprocess.call/popen/run</code> does block/wait for the command to finish: <a href="https://stackoverflow.com/a/14059648/4752883">stackoverflow.com/a/14059648/4752883</a></span>
<span class="comment-copy">This is the complete elegant answer.</span>
<span class="comment-copy">okay..then is there any way i can execute both os.system and popen in windows env ? i am a newbie and need to dig deeper..</span>
<span class="comment-copy">Yes, you can use both os.system and subprocess in Windows Environment. Have a look at basic tutorials from effbot.org (Python Standard Library online book)</span>
<span class="comment-copy">Careful -- if you are running on older systems, the subprocess module isn't available.</span>
