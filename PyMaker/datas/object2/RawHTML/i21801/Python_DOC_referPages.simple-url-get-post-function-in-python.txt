<div class="post-text" itemprop="text">
<p>I can't seem to Google it, but I want a function that does this:</p>
<p>Accept 3 arguments (or more, whatever):</p>
<ul>
<li>URL </li>
<li>a dictionary of params</li>
<li>POST or GET</li>
</ul>
<p>Return me the results, and the response code.</p>
<p>Is there a snippet that does this?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>requests</strong></p>
<p><a href="https://github.com/kennethreitz/requests/">https://github.com/kennethreitz/requests/</a></p>
<p>Here's a few common ways to use it:</p>
<pre><code>import requests
url = 'https://...'
payload = {'key1': 'value1', 'key2': 'value2'}

# GET
r = requests.get(url)

# GET with params in URL
r = requests.get(url, params=payload)

# POST with form-encoded data
r = requests.post(url, data=payload)

# POST with JSON 
import json
r = requests.post(url, data=json.dumps(payload))

# Response, status etc
r.text
r.status_code
</code></pre>
<p><strong>httplib2</strong></p>
<p><a href="https://github.com/jcgregorio/httplib2">https://github.com/jcgregorio/httplib2</a></p>
<pre><code>&gt;&gt;&gt; from httplib2 import Http
&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; h = Http()
&gt;&gt;&gt; data = dict(name="Joe", comment="A test comment")
&gt;&gt;&gt; resp, content = h.request("http://bitworking.org/news/223/Meet-Ares", "POST", urlencode(data))
&gt;&gt;&gt; resp
{'status': '200', 'transfer-encoding': 'chunked', 'vary': 'Accept-Encoding,User-Agent',
 'server': 'Apache', 'connection': 'close', 'date': 'Tue, 31 Jul 2007 15:29:52 GMT', 
 'content-type': 'text/html'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Even easier: via the <a href="http://docs.python-requests.org/en/latest/index.html" rel="noreferrer">requests</a> module.</p>
<pre><code>import requests
get_response = requests.get(url='http://google.com')
post_data = {'username':'joeb', 'password':'foobar'}
# POST some form-encoded data:
post_response = requests.post(url='http://httpbin.org/post', data=post_data)
</code></pre>
<p>To send data that is not form-encoded, send it serialised as a string (example taken from the <a href="http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests" rel="noreferrer">documentation</a>):</p>
<pre><code>import json
post_response = requests.post(url='http://httpbin.org/post', data=json.dumps(post_data))
# If using requests v2.4.2 or later, pass the dict via the json parameter and it will be encoded directly:
post_response = requests.post(url='http://httpbin.org/post', json=post_data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use this to wrap urllib2:</p>
<pre><code>def URLRequest(url, params, method="GET"):
    if method == "POST":
        return urllib2.Request(url, data=urllib.urlencode(params))
    else:
        return urllib2.Request(url + "?" + urllib.urlencode(params))
</code></pre>
<p>That will return a <a href="http://docs.python.org/library/urllib2.html#urllib2.Request">Request</a> object that has result data and response codes.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import urllib

def fetch_thing(url, params, method):
    params = urllib.urlencode(params)
    if method=='POST':
        f = urllib.urlopen(url, params)
    else:
        f = urllib.urlopen(url+'?'+params)
    return (f.read(), f.code)


content, response_code = fetch_thing(
                              'http://google.com/', 
                              {'spam': 1, 'eggs': 2, 'bacon': 0}, 
                              'GET'
                         )
</code></pre>
<p>[Update]</p>
<p>Some of these answers are old. Today I would use the <code>requests</code> module like the answer by robaple.</p>
</div>
<div class="post-text" itemprop="text">
<p>I know you asked for GET and POST but I will provide CRUD since others may need this just in case: (this was tested in <a href="https://docs.python.org/3/library/http.client.html" rel="nofollow noreferrer">Python 3.7</a>)</p>
<pre><code>#!/usr/bin/env python3
import http.client
import json

print("\n GET example")
conn = http.client.HTTPSConnection("httpbin.org")
conn.request("GET", "/get")
response = conn.getresponse()
data = response.read().decode('utf-8')
print(response.status, response.reason)
print(data)


print("\n POST example")
conn = http.client.HTTPSConnection('httpbin.org')
headers = {'Content-type': 'application/json'}
post_body = {'text': 'testing post'}
json_data = json.dumps(post_body)
conn.request('POST', '/post', json_data, headers)
response = conn.getresponse()
print(response.read().decode())
print(response.status, response.reason)


print("\n PUT example ")
conn = http.client.HTTPSConnection('httpbin.org')
headers = {'Content-type': 'application/json'}
post_body ={'text': 'testing put'}
json_data = json.dumps(post_body)
conn.request('PUT', '/put', json_data, headers)
response = conn.getresponse()
print(response.read().decode(), response.reason)
print(response.status, response.reason)


print("\n delete example")
conn = http.client.HTTPSConnection('httpbin.org')
headers = {'Content-type': 'application/json'}
post_body ={'text': 'testing delete'}
json_data = json.dumps(post_body)
conn.request('DELETE', '/delete', json_data, headers)
response = conn.getresponse()
print(response.read().decode(), response.reason)
print(response.status, response.reason)
</code></pre>
</div>
<span class="comment-copy">The question isn't clear -- this is for a local URL, ie. you're writing a server, or a remote URL, ie. you're writing a client?</span>
<span class="comment-copy">Please use more problem--descriptive titles in the future.</span>
<span class="comment-copy">you could also use <code>from httplib2 import Http as h</code></span>
<span class="comment-copy">@3k No, he's instantiating the <code>Http</code> class, not aliasing it: <code>h = Http()</code>, not <code>h = Http</code>.</span>
<span class="comment-copy">@ecstaticpeon you are very right, I must have been very tired. thanks for the correction!</span>
<span class="comment-copy">It would be nice if you did this in a native way without 3rd party libraries.</span>
<span class="comment-copy">I had to wrap the post_data in json.dumps() before it worked for me: <code>data=json.dumps(post_data)</code></span>
<span class="comment-copy">@Matt, I think that this depends on whether you want to submit form-encoded data (just pass in a dict) or data that is not form-encoded (pass in a string of JSON data). I refer to the docs here: <a href="http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests" rel="nofollow noreferrer">docs.python-requests.org/en/latest/user/quickstart/â€¦</a></span>
<span class="comment-copy">is there any version of this module for windows?</span>
<span class="comment-copy">@TheGoodUser This library (and many more) are compiled for Windows and available here: <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#requests" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs/#requests</a></span>
<span class="comment-copy">I prefer this one for sticking to the standard library.</span>
<span class="comment-copy">should it be url + "?" instead of url + '&amp;'?</span>
<span class="comment-copy">It's urlencode, not encode</span>
<span class="comment-copy">Yes, you're both right</span>
<span class="comment-copy">This is nice, but to be precise, the <code>Request</code> object itself has no result data or response codes - it needs to be "requested" via a method like <a href="https://docs.python.org/2/library/urllib2.html#urllib2.urlopen" rel="nofollow noreferrer"><code>urlopen</code></a>.</span>
