<div class="post-text" itemprop="text">
<p>How do you do reverse <code>gmtime()</code>, where you put the time + date and get the number of seconds?</p>
<p>I have strings like <code>'Jul 9, 2009 @ 20:02:58 UTC'</code>, and I want to get back the number of seconds between the epoch and July 9, 2009.</p>
<p>I have tried <code>time.strftime</code> but I don't know how to use it properly, or if it is the correct command to use.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want <code>calendar.timegm()</code>.</p>
<pre><code>&gt;&gt;&gt; calendar.timegm(time.gmtime())
1293581619.0
</code></pre>
<p>You can turn your string into a time tuple with <code>time.strptime()</code>, which returns a time tuple that you can pass to <code>calendar.timegm()</code>:</p>
<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; import time
&gt;&gt;&gt; calendar.timegm(time.strptime('Jul 9, 2009 @ 20:02:58 UTC', '%b %d, %Y @ %H:%M:%S UTC'))
1247169778
</code></pre>
<p>More information about calendar module <a href="https://docs.python.org/2/library/calendar.html" rel="noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/2/library/time.html" rel="noreferrer">time</a> module:</p>
<pre><code>epoch_time = int(time.time())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note that <code>time.gmtime</code> maps timestamp <code>0</code> to <code>1970-1-1 00:00:00</code>.</p>
<pre><code>In [61]: import time       
In [63]: time.gmtime(0)
Out[63]: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
</code></pre>
<p><code>time.mktime(time.gmtime(0))</code> gives you a timestamp shifted by an amount that depends on your locale, which in general may not be 0. </p>
<pre><code>In [64]: time.mktime(time.gmtime(0))
Out[64]: 18000.0
</code></pre>
<p>The inverse of <code>time.gmtime</code> is <code>calendar.timegm</code>:</p>
<pre><code>In [62]: import calendar    
In [65]: calendar.timegm(time.gmtime(0))
Out[65]: 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>ep = datetime.datetime(1970,1,1,0,0,0)
x = (datetime.datetime.utcnow()- ep).total_seconds()
</code></pre>
<p>This should be different from <code>int(time.time())</code>, but it is safe to use something like <code>x % (60*60*24)</code></p>
<p><a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer">datetime â€” Basic date and time types:</a> </p>
<blockquote>
<p>Unlike the time module, the datetime module does not support leap seconds.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>t = datetime.strptime('Jul 9, 2009 @ 20:02:58 UTC',"%b %d, %Y @ %H:%M:%S %Z")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways, depending on your original timestamp:</p>
<p><code>mktime()</code> and <code>timegm()</code></p>
<p><a href="http://docs.python.org/library/time.html" rel="nofollow">http://docs.python.org/library/time.html</a></p>
</div>
<span class="comment-copy">If you are looking for the current unix epoch time please refer to @DanJ's comment or naren's answer, this answer  is incorrect!</span>
<span class="comment-copy">@kosii: the answer (in the current form, after the edit) is correct: the input is a time string in UTC, you can parse it easily using <code>time.strptime()</code> that returns a time tuple that you can pass to the <code>calendar.timegm()</code> that returns POSIX timestamp.</span>
<span class="comment-copy">this is utc, and therefore I find it more correct</span>
<span class="comment-copy">@DanJ: it is number of elapsed seconds since Epoch (a fixed moment in time) and it is the same in any timezone. Though if we ignore time instances around leap seconds; it is easy to convert it to UTC if <code>time</code> uses Unix epoch (1970).</span>
<span class="comment-copy">Note this isn't what the OP was asking for, but it's what <i>I</i> wanted.  So +1.</span>
<span class="comment-copy">it is the answer to what is asked in the title: "getting the time since the epoch". +1</span>
<span class="comment-copy">to extend <a href="http://stackoverflow.com/questions/4548684/how-to-get-the-seconds-since-epoch-from-the-time-date-output-of-gmtime-in-py#comment29834679_13342744">my comment above</a>: <code>time.time()</code> value does NOT depend on the local timezone (if we exclude "right" timezones and the like) e.g., if it returns POSIX time (as it does on most systems) then it is the number of SI seconds since the Epoch (1970-01-01UTC) not counting leap seconds. This value <i>can</i> be converted to UTC (excluding leap seconds) but <i>it is not UTC</i>. @MarlonAbeykoon: I like <a href="http://stackoverflow.com/a/21858377/4279">this answer</a></span>
<span class="comment-copy">This gives better explanation and example to time.mktime (which take current  timezone into account), thanks</span>
<span class="comment-copy">@Jkm: do NOT use <code>mktime()</code> with <code>gmtime()</code>. <code>mktime()</code> accepts your <i>local time</i> but <code>gmtime()</code> returns <i>UTC time</i> -- your local timezone may and is likely to be different. "timestamp relative to your locale" is non-sense: POSIX timestamp does not depend on your locale (local timezone) -- it is the same value around the world. "seconds since epoch" is POSIX timestamp in most cases (even on Windows) -- things like "right" timezones that use TAI time scale are not common. See <a href="http://stackoverflow.com/a/20035913/4279">Does Python's time.time() return the local or UTC timestamp?</a></span>
<span class="comment-copy">@J.F. Sebastian You are right. Actually I got a few issue about <code>mktime()</code> recently. For some python web server (Tornado for example), since the process keep running, even if I change the system locale, the <code>mktime()</code> called by the web server API still use the <b>old timezone</b> to generate the time object. I have to switch to <code>gmtime()</code> and manually apply the gmt offset.</span>
<span class="comment-copy">I cant access strptime for some reason. I have imported datetime</span>
<span class="comment-copy">@calccrypto you have to either <code>from datetime import datetime</code> or do <code>datetime.datetime.strptime</code></span>
