<div class="post-text" itemprop="text">
<p>I have a python script that gave different output when run on a Windows machine and when run on a Mac. On digging deeper, I discovered that it was because when Python read in line breaks on the Mac (from a file), it read in <code>\r\n</code>, while somehow in Windows the <code>\r</code> disappears.</p>
<p>Thus, if I change every <code>\n</code> in the script to <code>\r\n</code>, it works fine on the Mac. But if I do that, it stops working on the Windows PC.</p>
<p>Is there an easy way to fix this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess it may depend on what you're reading from, but the built-in open() function takes a 'mode' parameter, and if you pass 'U' for the mode, Python will take care of the newlines in a cross-platform way transparently. It requires that Python be built with universal newline support, but test it out! </p>
<p><a href="http://docs.python.org/library/functions.html#open" rel="noreferrer">http://docs.python.org/library/functions.html#open</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Different platforms have different codes for "new line". Windows have \r\n, Unix has \n, Old macs have \r and yes there are some systems that have \n\r too.</p>
<p>When you open a file in text mode in Python 3, it will convert all newlines to '\n' and be done with it.</p>
<pre><code>infile = open("filename", 'r')
</code></pre>
<p>Text mode is default, so if you say nothing, it's text mode. But it's always better to be explicit:</p>
<pre><code>infile = open("filename", 'rt')
</code></pre>
<p>If you don't want the translation of line endings to happen, open the file in binary mode:</p>
<pre><code>infile = open("filename", 'rb')
</code></pre>
<p>In Python 2 it's different. There this conversion would only happen by default on Windows.
If you wanted it to happen on other platforms, you could add the universal newline flag:</p>
<pre><code>infile = open("filename", 'rU')
</code></pre>
<p>However, you say that you are on Python 3, and there it happens in text mode on <em>all</em> platforms, so adding the U flag should make no difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, use the keyword argument "newline='\n'" in open() to use a specified line delimiter when writing text files. For more information, please see:</p>
<p><a href="https://pythonconquerstheuniverse.wordpress.com/2011/05/08/newline-conversion-in-python-3/" rel="noreferrer">https://pythonconquerstheuniverse.wordpress.com/2011/05/08/newline-conversion-in-python-3/</a></p>
<p><a href="http://docs.python.org/3/library/functions.html#open" rel="noreferrer">http://docs.python.org/3/library/functions.html#open</a></p>
</div>
<div class="post-text" itemprop="text">
<p>On windows, they both are working fine if i try writing a file with either of the two(\r or \n) python interprets it as a line break in both the cases. While using "\r\n", it is interpreted as a double line break.(Python 3 on windows)</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, the <code>Open()</code> method has a <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>newline</code></a> parameter:</p>
<blockquote>
<p>newline controls how universal newlines mode works (it only applies to
  text mode). It can be None, '', '\n', '\r', and '\r\n'. It works as
  follows:</p>
<p>When reading input from the stream, if newline is None, universal
  newlines mode is enabled. Lines in the input can end in '\n', '\r', or
  '\r\n', and these are translated into '\n' before being returned to
  the caller. If it is '', universal newlines mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of the
  other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.</p>
<p>When writing output to the stream, if newline is None, any '\n'
  characters written are translated to the system default line
  separator, os.linesep. If newline is '' or '\n', no translation takes
  place. If newline is any of the other legal values, any '\n'
  characters written are translated to the given string.</p>
</blockquote>
<p>The old way of using <code>U</code> mode specifier has been deprecated in favor of this new way.</p>
<blockquote>
<p>'U'   universal newlines mode (deprecated)</p>
</blockquote>
</div>
<span class="comment-copy">You're having this error when READING from a file? What version of python are you on? Where did you get it? Python is usually built with universal newline support</span>
<span class="comment-copy">@Falmarri Python 3... and I'm pretty sure I got it from the official python website</span>
<span class="comment-copy">Here's another Windows vs Linux inconsistency - on Windows, Python's glob.glob function always returns a list filenames, sorted alphabetically.  On Linux, the list of filenames is returned in random order.</span>
<span class="comment-copy">Well <code>glob.glob</code> doesn't claim to return results in any particular order, so no reason to expect them to be in any particular order</span>
<span class="comment-copy">This is also the default (as far as I know)</span>
<span class="comment-copy">Thanks! It works fine now! Oh and @Falmarri sorry, the only way I knew of how to read from a file was with <code>'r'</code>. At least now I know better.</span>
<span class="comment-copy">@Falmarri: It <i>is</i> default in Python 3, and in fact, the U flag is deprecated in Python 3.</span>
<span class="comment-copy">@wrongusername: No, that works fine under Python 2.6 as well. You'll see the Python version when you start the python interpreter.</span>
<span class="comment-copy">@MikeB the feature itself is not deprecated. It's the default. You don't need to do anything to enable it. When you open a file in text mode, it's opened in Universal Newlines mode. The thing that is deprecated is setting <code>mode="U"</code> specifically. If you want to <i>disable</i> Universal Newlines then you can pass <code>newline="\n"</code> or whatever. See <a href="https://softwareengineering.stackexchange.com/questions/298677/why-is-universal-newlines-mode-deprecated-in-python">this question</a>.</span>
<span class="comment-copy">Thank you so much I had an idea it was like that, it took me a pretty long time to confirm it, but yeah my code worked on python 2.7 but glitched on python 3.2 because of that difference. I needed to "rb" it... thanks, very thorough explanation.</span>
<span class="comment-copy"><code>os.linesep</code> is replaced by <code>\n</code> while reading in text mode on <i>all</i> platforms (not only Windows). If <code>os.linesep == '\n'</code> then it is the same as no conversion on Python 2.</span>
<span class="comment-copy">@J.F.Sebastian: Which in practice means that it only happens on Windows (and Mac OS 9, but that's not supported since Python 2.4). While in Python 3 all newline combinations will be translated to <code>'\n'</code> on all platforms.</span>
<span class="comment-copy">and how can you handle this if you use with <code>codecs.open()</code>?</span>
<span class="comment-copy">Codecs.open() also takes file mode flags.</span>
