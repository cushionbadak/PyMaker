<div class="post-text" itemprop="text">
<p>I cannot run this code, because I get the exception:</p>
<pre><code>NameError: name 'abstractmethod' is not defined
File "C:\Tests\trunk\PythonTests\AbstractClasses.py", line 12, in &lt;module&gt;
  class MyIterable:
File "C:\Tests\trunk\PythonTests\AbstractClasses.py", line 15, in MyIterable
  @abstractmethod

from abc import ABCMeta

class Foo(object):
    def __getitem__(self, index):
        print '__get_item__ Foo'
    def __len__(self):
        print '__len__ Foo'
    def get_iterator(self):
        print 'get_iterator Foo'
        return iter(self)

class MyIterable:
    __metaclass__ = ABCMeta

    @abstractmethod
    def __iter__(self):
        while False:
            yield None

    def get_iterator(self):
        return self.__iter__()

    @classmethod
    def __subclasshook__(cls, C):
        if cls is MyIterable:
            if any("__iter__" in B.__dict__ for B in C.__mro__):
                print "I'm in __subclasshook__"
                return True
        return NotImplemented

MyIterable.register(Foo)

x=Foo()
x.__subclasshook__()
</code></pre>
<p>I'm sure that code is ok, because I got it from <a href="http://docs.python.org/library/abc.html" rel="noreferrer">http://docs.python.org/library/abc.html</a></p>
<p><strong>EDIT</strong></p>
<p>Thanks for answer, it works now, but why </p>
<pre><code>print '__subclasshook__'
</code></pre>
<p>this doesn't work ? I don't get in Debug I/0</p>
</div>
<div class="post-text" itemprop="text">
<p>You only imported <code>ABCMeta</code></p>
<pre><code>from abc import ABCMeta
</code></pre>
<p>Also import <code>abstractmethod</code></p>
<pre><code>from abc import ABCMeta, abstractmethod
</code></pre>
<p>and everything should be fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to import <code>abstractmethod</code> from <code>abc</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to change import ABC to ABCMeta</p>
<pre><code>from abc import ABCMeta, abstractmethod

class AbstractClassExample(ABCMeta):

    def __init__(self, value):
        self.value = value
        super().__init__()

    @abstractmethod
    def do_something(self):
        print("do_something")


class DoAdd42(AbstractClassExample):
    print("DoAdd42")

x = DoAdd42(4)
</code></pre>
</div>
<span class="comment-copy">Why <code>print 'I'm in __subclasshook__'</code> doesn't work?  Have you actually taken the time to count the quote characters <code>'</code>?</span>
<span class="comment-copy">sorry, in real there is '<b>subclasshook</b>'. I wrote here another text to clarity :/</span>
<span class="comment-copy">So for others landing here, I want to point out that if you are only using <code>abstractmethod</code>, it seems you also need to import <code>ABCMeta</code> (sort of the opposite of the above issue)</span>
<span class="comment-copy">sorry, <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer">the documentation</a> clearly shows that <code>ABCMeta</code> should be used as a <code>metaclass</code> and is not to be inherited from directly. For inheritance, one should use <code>ABC</code> class</span>
