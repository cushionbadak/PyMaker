<div class="post-text" itemprop="text">
<p>I have a list with empty lists in it:</p>
<pre><code>list1 = [[], [], [], [], [], 'text', 'text2', [], 'moreText']
</code></pre>
<p>How can I remove the empty lists so that I get:</p>
<pre><code>list2 = ['text', 'text2', 'moreText']
</code></pre>
<p>I tried list.remove('') but that doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try</p>
<pre><code>list2 = [x for x in list1 if x != []]
</code></pre>
<p>If you want to get rid of everything that is "falsy", e.g. empty strings, empty tuples, zeros, you could also use</p>
<pre><code>list2 = [x for x in list1 if x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>filter()</code> instead of a list comprehension:</p>
<pre><code>list2 = filter(None, list1)
</code></pre>
<p>If <code>None</code> is used as first argument to <code>filter()</code>, it filters out every value in the given list, which is <code>False</code> in a boolean context.  This includes empty lists.</p>
<p>It might be slightly faster than the list comprehension, because it only executes a single function in Python, the rest is done in C.</p>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>filter</code> with <code>None</code> will filter out all falsey values from the list (which an empty list is)</p>
<pre><code>list2 = filter(None, list1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; list1 = [[], [], [], [], [], 'text', 'text2', [], 'moreText']
&gt;&gt;&gt; list2 = [e for e in list1 if e]
&gt;&gt;&gt; list2
['text', 'text2', 'moreText']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A few options:</p>
<pre><code>filter(lambda x: len(x) &gt; 0, list1)  # Doesn't work with number types
filter(None, list1)  # Filters out int(0)
filter(lambda x: x==0 or x, list1) # Retains int(0)
</code></pre>
<p>sample session:</p>
<pre><code>Python 2.7.1 (r271:86832, Nov 27 2010, 17:19:03) [MSC v.1500 64 bit (AMD64)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; list1 = [[], [], [], [], [], 'text', 'text2', [], 'moreText']
&gt;&gt;&gt; filter(lambda x: len(x) &gt; 0, list1)
['text', 'text2', 'moreText']
&gt;&gt;&gt; list2 = [[], [], [], [], [], 'text', 'text2', [], 'moreText', 0.5, 1, -1, 0]
&gt;&gt;&gt; filter(lambda x: x==0 or x, list2)
['text', 'text2', 'moreText', 0.5, 1, -1, 0]
&gt;&gt;&gt; filter(None, list2)
['text', 'text2', 'moreText', 0.5, 1, -1]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found this question because I wanted to do the same as the OP.
I would like to add the following observation:</p>
<p>The iterative way (user225312, Sven Marnach):</p>
<pre><code>list2 = [x for x in list1 if x]
</code></pre>
<p>Will return a <code>list</code> object in <code>python3</code> and <code>python2</code> . Instead the filter way (lunaryorn, Imran) will differently behave over versions:</p>
<pre><code>list2 = filter(None, list1)
</code></pre>
<p>It will return a <code>filter</code> object in <code>python3</code> and a <code>list</code> in <code>python2</code> (see <a href="https://stackoverflow.com/q/12319025/3067485">this question</a> found at the same time). This is a slight difference but it must be take in account when developing compatible scripts.</p>
<p>This does not make any assumption about performances of those solutions. Anyway the filter object can be reverted to a list using:</p>
<pre><code>list3 = list(list2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I needed to filter empty items from more complex nested objects. I made a recursive function to do it. See <a href="https://stackoverflow.com/a/29189473/117471">my SO answer here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = [[], [], [], [], [], 'text', 'text2', [], 'moreText']
list2 = []
for item in list1:
    if item!=[]:
        list2.append(item)
print(list2)
</code></pre>
<p>output:</p>
<pre><code>['text', 'text2', 'moreText']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [[1,'aa',3,12,'a','b','c','s'],[],[],[1,'aa',7,80,'d','g','f',''],[9,None,11,12,13,14,15,'k']]

b=[]
for lng in range(len(a)):
       if(len(a[lng])&gt;=1):b.append(a[lng])
a=b
print(a)
</code></pre>
<p>Output:</p>
<pre><code>[[1,'aa',3,12,'a','b','c','s'],[1,'aa',7,80,'d','g','f',''],[9,None,11,12,13,14,15,'k']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to the answers above, Say you have a <code>list of lists</code> of the form:</p>
<pre><code>theList = [['a','b',' '],[''],[''],['d','e','f','g'],['']]
</code></pre>
<p>and you want to take out the empty entries from each list as well as the empty lists you can do:</p>
<pre><code>theList = [x for x in theList if x != ['']] #remove empty lists
for i in range(len(theList)):
    theList[i] = list(filter(None, theList[i])) #remove empty entries from the lists
</code></pre>
<p>Your new list will look like</p>
<pre><code>theList = [['a','b'],['d','e','f','g']]
</code></pre>
</div>
<span class="comment-copy"><code>'' != []</code>, that's why <code>.remove</code> didn't work. But it's still a bad solution (either you check if there is <code>[] in list1</code> before hand - <code>O(n**2)</code> - or catch the error it throws otherwise - ugly).</span>
<span class="comment-copy">so amazing when u found that although your question is not common, but someone long ago has posted it and it has been beautifully answered! I love SO</span>
<span class="comment-copy">+1 for mentioning the other way that springs to mind and how it differs.</span>
<span class="comment-copy">I know this is old, but I keep seeing that brace method and I can't find anything via Google on it (Probably because Google doesn't do punctuation). What is that called so I can learn more about what is really happening there?</span>
<span class="comment-copy">@David: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List comprehensions</a> and <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">Generator expressions</a>.  There are also dictionary comprehensions and set comprehensions.</span>
<span class="comment-copy">why doesn't this answer have more upvotes and / or be the accepted answer?</span>
<span class="comment-copy">@MattO'Brien b/c many Python programmers avoid <code>filter()</code>, as wells as <code>lambda</code>, <code>map()</code>, and <code>reduce()</code>; this includes <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow noreferrer">Guido himself</a>, although that post is a bit old. I tend to prefer list comprehensions b/c the clarity is often more important than the slight speedup with these methods and the <code>lambda</code> operator. That being said, this case is trivial b/c it's very clear what the programmer's intent is.</span>
<span class="comment-copy">In Python3 I think this has to be amended to: list2 = list(filter(None, list1)). Just in case any newbies using Python3 wonder why this doesn't work for them :)</span>
<span class="comment-copy">Can someone please edit this! I can't seem to get the formatting options.</span>
<span class="comment-copy">done (you need to use the <code>{}</code>)</span>
<span class="comment-copy">@RC: Thanks! I know that, but for some weird reason it is not visible (no option is).</span>
<span class="comment-copy">-1:  <code>len(x) &gt; 0</code> is essentially the same as <code>bool(x)</code> or just <code>x</code>.</span>
<span class="comment-copy">or None for <code>filter()</code></span>
<span class="comment-copy">+1: @RC. If you have number types in your list, you can't call len on it. If you have a <code>0</code>, it will be filtered out by <code>None</code>. Otherwise I like this answer.</span>
<span class="comment-copy">Code only answers are not very useful on their own. It would help if you could add some detail explaining how/why it answers the question. That said, I'm not sure this answer adds any value over all the others to this five-year old question.</span>
