<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/517970/how-to-clear-the-interpreter-console">How to clear the interpreter console?</a>
<span class="question-originals-answer-count">
                    34 answers
                </span>
</li>
</ul>
</div>
<p>Does any standard "comes with batteries" method exist to clear the terminal screen from a Python script, or do I have to go curses (the libraries, not the words)?</p>
</div>
<div class="post-text" itemprop="text">
<p>What about escape sequences?</p>
<pre><code>print(chr(27) + "[2J")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple and cross-platform solution would be to use either the <code>cls</code> command on Windows, or <code>clear</code> on Unix systems. Used with <a href="http://docs.python.org/3/library/os.html#os.system" rel="noreferrer"><code>os.system</code></a>, this makes a nice one-liner:</p>
<pre><code>import os
os.system('cls' if os.name == 'nt' else 'clear')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why hasn't anyone talked about just simply doing <kbd>Ctrl</kbd>+<kbd>L</kbd> in Windows or  <kbd>Cmd</kbd>+<kbd>L</kbd> in Mac.
Surely the  simplest way of clearing screen.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a Linux/UNIX system then printing the ANSI escape sequence to clear the screen should do the job.  You will also want to move cursor to the top of the screen.  This will work on any terminal that supports ANSI.</p>
<pre><code>import sys
sys.stderr.write("\x1b[2J\x1b[H")
</code></pre>
<p>This will not work on Windows unless ANSI support has been enabled.  There may be an equivalent control sequence for Windows, but I do not know.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Windows, Mac and Linux, you can use the following code:</p>
<pre><code>import subprocess, platform

if platform.system()=="Windows":
    subprocess.Popen("cls", shell=True).communicate() #I like to use this instead of subprocess.call since for multi-word commands you can just type it out, granted this is just cls and subprocess.call should work fine 
else: #Linux and Mac
    print("\033c", end="")
</code></pre>
<p>jamesnotjim tested <code>print("\033c", end="")</code> for Mac, and I tested it on Linux and Windows (it doesn't work for Windows, hence the other code that calls <code>cls</code>). I don't remember who it was I first saw use print("\033c") and/or the printf version: <code>subprocess.Popen("printf '\033c'", shell=True).communicate()</code>.</p>
<p>rolika pointed out that <code>end=""</code> will prevent it from printing a new line afterward.</p>
</div>
<div class="post-text" itemprop="text">
<p>As for me, the most elegant variant:</p>
<pre><code>import os
os.system('cls||clear')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try to rely on clear but it might not be available on all Linux distributions. On windows use cls as you mentionned.</p>
<pre><code>import subprocess
import platform

def clear():
    subprocess.Popen( "cls" if platform.system() == "Windows" else "clear", shell=True)

clear()
</code></pre>
<p>Note: It could be considered bad form to take control of the terminal screen.  Are you considering using an option? It would probably be better to let the user decide if he want to clear the screen.</p>
</div>
<div class="post-text" itemprop="text">
<p>A Pure Python solution.<br/>
Does not rely on either ANSI, or external commands.<br/>
Only your terminal has to have the ability to tell you how many lines are in view.</p>
<pre><code>from shutil import get_terminal_size
print("\n" * get_terminal_size().lines, end='')
</code></pre>
<p>Python version &gt;= 3.3.0</p>
</div>
<div class="post-text" itemprop="text">
<p>Came across this some time ago</p>
<pre><code>def clearscreen(numlines=100):
  """Clear the console.
numlines is an optional argument used only as a fall-back.
"""
# Thanks to Steven D'Aprano, http://www.velocityreviews.com/forums

  if os.name == "posix":
    # Unix/Linux/MacOS/BSD/etc
    os.system('clear')
  elif os.name in ("nt", "dos", "ce"):
    # DOS/Windows
    os.system('CLS')
  else:
    # Fallback for other operating systems.
    print('\n' * numlines)
</code></pre>
<p>Then just use clearscreen()</p>
</div>
<div class="post-text" itemprop="text">
<p>So just thought I would throw my two cents in here...</p>
<p>No one has provided a true answer to OP question it seems, everyone either responds with 'NO DONT USE os.system() it's evil!!!' without explanation or provides a solution that relies on printing new lines.</p>
<p>For those that need to clear the terminal screen and scroll back, for whatever reason, you can use the following code:</p>
<pre><code>import os

def clear():
    '''
    Clears the terminal screen and scroll back to present
    the user with a nice clean, new screen. Useful for managing
    menu screens in terminal applications.
    '''
    os.system('cls' if os.name == 'nt' else 'echo -e \\\\033c')

print('A bunch of garbage so we can garble up the screen...')
clear()

# Same effect, less characters...

def clear():
    '''
    Clears the terminal screen and scroll back to present
    the user with a nice clean, new screen. Useful for managing
    menu screens in terminal applications.
    '''
    os.system('cls||echo -e \\\\033c')
</code></pre>
<p>This has the OP's desired effect. It does use the os.system() command so if that's evil and someone knows a way of implementing this using subprocess.call() please comment as I would also prefer to use subprocess but am not familiar with it at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>This will be work in Both version Python2 OR Python3</p>
<pre><code>print (u"{}[2J{}[;H".format(chr(27), chr(27)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wish to clear your terminal when you are using a python shell. Then, you can do the following to clear the screen</p>
<pre><code>import os
os.system('clear')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could tear through the terminfo database, but the functions for doing so are in <code>curses</code> anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>This function works in gnome-terminal because, by default, it recognizes ANSI escape sequences. It gives you a CLEAN PROMPT <code>rows_max</code> distance from the bottom of the terminal, but also precisely from where it was called. Gives you complete control over how much to clear.</p>
<pre><code>def clear(rows=-1, rows_max=None, *, calling_line=True, absolute=None,
          store_max=[]):
    """clear(rows=-1, rows_max=None)
clear(0, -1) # Restore auto-determining rows_max
clear(calling_line=False) # Don't clear calling line
clear(absolute=5) # Absolutely clear out to 5 rows up"""
    from os import linesep
    if rows_max and rows_max != -1:
        store_max[:] = [rows_max, False]
    elif not store_max or store_max[1] or rows_max == -1 or absolute:
        try:
            from shutil import get_terminal_size
            columns_max, rows_max = get_terminal_size()
        except ImportError:
            columns_max, rows_max = 80, 24
        if absolute is None:
            store_max[:] = [rows_max, True]
    if store_max:
        if rows == -1:
            rows = store_max[0]
        elif isinstance(rows, float):
            rows = round(store_max[0] * rows)
        if rows &gt; store_max[0] - 2:
            rows = store_max[0] - 2
    if absolute is None:
        s = ('\033[1A' + ' ' * 30 if calling_line else '') + linesep * rows
    else:
        s = '\033[{}A'.format(absolute + 2) + linesep
        if absolute &gt; rows_max - 2:
            absolute = rows_max - 2
        s += (' ' * columns_max + linesep) * absolute + ' ' * columns_max
        rows = absolute
    print(s + '\033[{}A'.format(rows + 1))
</code></pre>
<p>Implementation:</p>
<pre><code>clear() # Clear all, TRIES to automatically get terminal height
clear(800, 24) # Clear all, set 24 as terminal (max) height
clear(12) # Clear half of terminal below if 24 is its height
clear(1000) # Clear to terminal height - 2 (24 - 2)
clear(0.5) # float factor 0.0 - 1.0 of terminal height (0.5 * 24 = 12)
clear() # Clear to rows_max - 2 of user given rows_max (24 - 2)
clear(0, 14) # Clear line, reset rows_max to half of 24 (14-2)
clear(0) # Just clear the line
clear(0, -1) # Clear line, restore auto-determining rows_max
clear(calling_line=False) # Clear all, don't clear calling line
clear(absolute=5) # Absolutely clear out to 5 rows up
</code></pre>
<p>Parameters: <code>rows</code> is the number of clear text rows to add between prompt and bottom of terminal, pushing everything up. <code>rows_max</code> is the height of the terminal (or max clearing height) in text rows, and only needs to be set once, but can be reset at any time. <code>*,</code> in the third parameter position means all following parameters are keyword only (e.g., clear(absolute=5)). <code>calling_line=True</code> (default) works better in Interactive mode. <code>calling_line=False</code> works better for text-based, terminal applications. <code>absolute</code> was added to try to fix glitchy gap problems in Interactive mode after reducing size of terminal, but can also be used for terminal applications. <code>store_max</code> is just for secret, "persistent" storage of <code>rows_max</code> value; don't explicitly use this parameter. (When an argument is not passed for <code>store_max</code>, changing the list contents of <code>store_max</code> changes this parameter's default value. Hence, persistent storage.)</p>
<p>Portability: Sorry, this doesn't work in IDLE, but it works &gt;&gt; VERY COOL &lt;&lt; in Interactive mode in a terminal (console) that recognizes ANSI escape sequences. I only tested this in Ubuntu 13.10 using Python 3.3 in gnome-terminal. So I can only assume portability is dependant upon Python 3.3 (for the <code>shutil.get_terminal_size()</code> function for BEST results) and ANSI recognition. The <code>print(...)</code> function is Python 3. I also tested this with a simple, text-based, terminal Tic Tac Toe game (application).</p>
<p><strong>For use in Interactive mode:</strong> First copy and paste the <code>copy(...)</code> function in Interactive mode and see if it works for you. If so, then put the above function into a file named clear.py . In the terminal start python, with 'python3'. Enter:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
['', '/usr/lib/python3.3', ...
</code></pre>
<p>Now drop the clear.py file into one of the <code>path</code> directories listed so that Python can find it (don't overwrite any existing files). To easily use from now on:</p>
<pre><code>&gt;&gt;&gt; from clear import clear
&gt;&gt;&gt; clear()
&gt;&gt;&gt; print(clear.__doc__)
clear(rows=-1, rows_max=None)
clear(0, -1) # Restore auto-determining rows_max
clear(calling_line=False) # Don't clear calling line
clear(absolute=5) # Absolutely clear out to 5 rows up
</code></pre>
<p><strong>For use in a terminal application:</strong> Put the <code>copy(...)</code> function into a file named clear.py in the same folder with your <em>main</em>.py file. Here is a working abstract (skeleton) example from a Tic Tac Toe game application (run from terminal prompt: python3 <em>tictactoe</em>.py):</p>
<pre><code>from os import linesep

class TicTacToe:    
    def __init__(self):
        # Clear screen, but not calling line
        try:
            from clear import clear
            self.clear = clear
            self.clear(calling_line=False)
        except ImportError:
            self.clear = False
        self.rows = 0    # Track printed lines to clear

        # ...
        self.moves = [' '] * 9

    def do_print(self, *text, end=linesep):
        text = list(text)
        for i, v in enumerate(text[:]):
            text[i] = str(v)
        text = ' '.join(text)
        print(text, end=end)
        self.rows += text.count(linesep) + 1

    def show_board(self):
        if self.clear and self.rows:
            self.clear(absolute=self.rows)
        self.rows = 0
        self.do_print('Tic Tac Toe')
        self.do_print('''   |   |
 {6} | {7} | {8}
   |   |
-----------
   |   |
 {3} | {4} | {5}
   |   |
-----------
   |   |
 {0} | {1} | {2}
   |   |'''.format(*self.moves))

    def start(self):
        self.show_board()
        ok = input("Press &lt;Enter&gt; to continue...")
        self.moves = ['O', 'X'] * 4 + ['O']
        self.show_board()
        ok = input("Press &lt;Enter&gt; to close.")

if __name__ == "__main__":
    TicTacToe().start()
</code></pre>
<p>Explanation: <code>do_print(...)</code> on line 19 is a version of <code>print(...)</code> needed to keep track of how many new lines have been printed (<code>self.rows</code>). Otherwise, you would have to <code>self.rows += 1</code> all over the place where <code>print(...)</code> is called throughout the entire program. So each time the board is redrawn by calling <code>show_board()</code> the previous board is cleared out and the new board is printed exactly where it should be. Notice <code>self.clear(calling_line=False)</code> on line 9 basically pushes everything up RELATIVE to the bottom of the terminal, but does not clear the original calling line. In contrast, <code>self.clear(absolute=self.rows)</code> on line 29 absolutely clears out everything <code>self.rows</code> distance upward, rather than just pushing everything upward relative to the bottom of the terminal.</p>
<p>Ubuntu users with Python 3.3: Put <code>#!/usr/bin/env python3</code> on the very first line of the tictactoe.py file. Right click on the tictactoe.py file =&gt; Properties =&gt; Permissions tab =&gt; Check Execute: <em>Allow executing file as program</em>. Double click on the file =&gt; Click Run in Terminal button. If an open terminal's current directory is that of the tictactoe.py file, you can also start the file with <code>./tictactoe.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>call()</code> function to execute terminal's commands :</p>
<pre><code>from subprocess import call
call("clear")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use:</p>
<pre><code>print("\033c")
</code></pre>
<p>This will clear the terminal window.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can make your own. this will not be dependent on your terminal, or OS type.</p>
<pre><code>def clear(num):
    for i in range(num): print 

clear(80)
print "hello"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will clear 25  new lines:</p>
<pre><code>def clear():
    print(' \n' * 25)

clear()
</code></pre>
<p>I use eclipse with pydev. I like the newline solution better than the <strong>for num in range</strong> . The <strong>for</strong> loop throws warnings, while the print newline doesn't.
If you want to specify the number of newlines in the clear statement try this variation.</p>
<pre><code>def clear(j):
    print(' \n' * j)

clear(25)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>python -c "from os import system; system('clear')"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is to clear the screen, this is probably good enough. The problem is there's not even a 100% cross platform way of doing this across linux versions. The problem is the implementations of the terminal all support slightly different things. I'm fairly sure that "clear" will work everywhere. But the more "complete" answer is to use the xterm control characters to move the cursor, but that requires xterm in and of itself.</p>
<p>Without knowing more of your problem, your solution seems good enough.</p>
</div>
<div class="post-text" itemprop="text">
<p>A perhaps cheesy way to clear the screen, but one that will work on any platform I know of, is as follows:</p>
<pre><code>for i in xrange(0,100):
    print ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do it in this way to make it look more like bash:</p>
<p>Just create a file named .pythonstartup at Home directory and use poke's answer in a function</p>
<p>On Linux:</p>
<pre><code>echo "from subprocess import call
def clear(int=None):  
    call('clear')
    if int == 0:
       exit()
clear()" &gt;&gt; $HOME/.pythonstartup ; export PYTHONSTARTUP=$HOME/.pythonstartup ; python
</code></pre>
<p>You can add <code>export PYTHONSTARTUP=$HOME/.pythonstartup</code> to your <code>./bashrc</code> file</p>
<p>Since what I care about is space; a call to the function will not display the python interpreter description at startup, but you can remove <code>clear()</code> to retain it.</p>
<p>Using it like a normal function should do the trick without printing the exit status:</p>
<pre><code>&gt;&gt;&gt; clear()
</code></pre>
<p>If you pass the argument 0 to the function it will clear the screen and exit successfully so you can continue using the shell in a clean screen</p>
<pre><code>&gt;&gt;&gt; clear(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Windows, on the interpreter command line only (not the GUI)! Simply type:
(Remember to use proper indentation with python): </p>
<pre><code>import os
def clear():
    os.system('cls')
</code></pre>
<p>Every time you type <code>clear()</code> on the shell (command line), it will clear the screen on your shell. If you exit the shell, then you must redo the above to do it again as you open a new Python (command line) shell.</p>
<p>Note: Does not matter what version of Python you are using, explicitly (2.5, 2.7, 3.3 &amp; 3.4).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/questions/2084508/clear-terminal-in-python/2084521#2084521">The accepted answer</a> is a good solution.  The problem with it is that so far it only works on Windows 10, Linux and Mac.  Yes Windows (known for it lack of ANSI support)!  This new feature was implemented on Windows 10 (and above) which includes ANSI support, although you have to enable it.  This will clear the screen in a cross platform manner:</p>
<pre><code>import os

print ('Hello World')
os.system('') 
print ("\x1B[2J")
</code></pre>
<p>On anything below Windows 10 however it returns this:</p>
<pre><code>[2J
</code></pre>
<p>This is due to the lack of ANSI support on previous Windows builds.  This can however, be solved using the <a href="https://pypi.python.org/pypi/colorama" rel="nofollow noreferrer">colorama</a> module.  This adds support for ANSI characters on Windows:</p>
<blockquote>
<p>ANSI escape character sequences have long been used to produce colored terminal text and cursor positioning on Unix and Macs. Colorama makes this work on Windows, too, by wrapping stdout, stripping ANSI sequences it finds (which would appear as gobbledygook in the output), and converting them into the appropriate win32 calls to modify the state of the terminal. On other platforms, Colorama does nothing.</p>
</blockquote>
<p>So here is a cross platform method:</p>
<pre><code>import sys

if sys.platform == 'win32':
    from colorama import init
    init()

print('Hello World')

print("\x1B[2J")
</code></pre>
<p>Or <code>print(chr(27) + "[2J")</code> used instead of <code>print("\x1B[2J")</code>.</p>
<hr/>
<p>@poke answer is very insecure on Windows, yes it works but it is really a hack.  A file named <code>cls.bat</code> or <code>cls.exe</code> in the same dictionary as the script will conflict with the command and execute the file instead of the command, creating a huge security hazard.</p>
<p>One method to minimise the risk could be to change the location of where the <code>cls</code> command is called:</p>
<pre><code>import os
os.system('cd C:\\Windows|cls' if os.name == 'nt' else 'clear')
</code></pre>
<p>This will change the <strong>C</strong>urrant <strong>D</strong>ictionary to <code>C:\Window</code> (backslash is important here) then execute.  <code>C:\Windows</code> is always present and needs administration permissions to write there making it a good for executing this command with minimal risk.  Another solution is to run the command through PowerShell instead of Command Prompt since it has been secured against such vulnerabilities. </p>
<p>There are also other methods mentioned in this question: <a href="https://stackoverflow.com/questions/18937058/clear-screen-in-shell/18937214#18937214">Clear screen in shell</a> which may also be of use.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Windows you can use:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; clear = lambda: os.system('cls')
&gt;&gt;&gt; clear()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By default, <code>os.system("clear")</code>/<code>os.system("cls")</code> will return an int type as 0.
We can completely clear the screen by assigning it to a variable and deleting that.</p>
<pre><code>def clear():
    if (os.name == 'nt'):    
        c = os.system('cls')
    else:
        c = os.system('clear')
    del c  # can also omit c totally

#clear()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works on all platforms and it does work in both Python 2 and 3.</p>
<pre><code>def clear(number):
    for i in range(number):
        print(" ")
</code></pre>
<p>Then to clear just type <code>clear(numberhere)</code>.</p>
</div>
<span class="comment-copy">I'd check for Windows and use 'cls' and just unconditionally do a <code>clear</code> for everything because that would be likely to cover the most cases. See related question <a href="http://stackoverflow.com/questions/517970/how-to-clear-python-interpreter-console">How to clear python interpreter console?</a>.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/34388390/4279">Python - Clearing the terminal screen more elegantly</a></span>
<span class="comment-copy">Related <a href="http://stackoverflow.com/questions/4810537/how-to-clear-the-screen-in-python" title="how to clear the screen in python">stackoverflow.com/questions/4810537/…</a></span>
<span class="comment-copy">Note that this is not portable across all terminal types... not that you'll run into too many odd types these days...</span>
<span class="comment-copy">This technique brings the cursor down. Try Ctrl+L, the effect is different. I think the script should reset the cursor location to the top of the line.</span>
<span class="comment-copy">Or now, in Python3, print(chr(27) + "[2J")</span>
<span class="comment-copy">print('\x1b[2J')  - works in py3 also</span>
<span class="comment-copy">Sorry guys but I couldn't resist: <a href="https://imgs.xkcd.com/comics/real_programmers.png" rel="nofollow noreferrer">imgs.xkcd.com/comics/real_programmers.png</a></span>
<span class="comment-copy">@allyourcode The code in my answer is <i>explicitly safe</i> from injections because there is no user input involved there. All the strings that could be passed to <code>os.system</code> are fixed.</span>
<span class="comment-copy">The code is explicitly wrong, because you run a whole process  when all you need is to print out some newlines (which is what both <code>clear</code> and <code>cls</code> do): <code>print("\n" * 100) </code></span>
<span class="comment-copy">@jsbueno I can’t tell about Unix right now, but <code>cls</code> on Windows does <i>not</i> just print empty lines. It explicitly clears the console buffer, so it is <i>not</i> equivalent to printing any amount of whitespace. Also, the code works surprisingly well for something that is “explicitly wrong”. You may dislike it, but that does not make it wrong (not to mention that <code>cls</code> on Windows is not a process but a functionality of the console host, e.g. cmd.exe or PowerShell).</span>
<span class="comment-copy">So, that implies that <code>cls</code> and <code>clear</code> are inherently different - as <code>clear</code> is an external process and does not clear the buffer - which makes the solution inconsistent besides inefficient <code>cls</code> may be a shell builtin in Windows - but the <code>system</code> call will run a new shell nonetheless.  "The system function passes command to the command interpreter, which executes the string as an operating-system command. system uses the COMSPEC and PATH environment variables to locate the command-interpreter file CMD.exe. " #<a href="https://msdn.microsoft.com/en-us/library/277bwbdz.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/277bwbdz.aspx</a></span>
<span class="comment-copy">This is the best answer so far. Also do you know how can i scroll up my python console , because when the screen gets filled I have to write on the last line and it doesn't scroll up.</span>
<span class="comment-copy">I am on Ubuntu and I was using <code>os.system('clear')</code> but I think your answer is the simplest way. Upvoted! :)</span>
<span class="comment-copy">@ParagGangil Not the best answer for those that want to <i>programmatically</i> clear the screen.</span>
<span class="comment-copy">How is this answer not at the top, it is by far the best</span>
<span class="comment-copy">It doesn't work. Just typing ^L in command (Python console in Windows 10)</span>
<span class="comment-copy">Since your answer implied that you're using Python 2.x, and since 2.x <code>print</code> (without <code>softspace</code> tuning and/or <code>sys.stdout.flush()</code>) can't <i>ever</i> leave the cursor at the top-left corner of the screen, I edited your answer to something that can be used in both Python 2.x and 3.x</span>
<span class="comment-copy">For anyone wondering, the string is a series of <a href="http://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow noreferrer">ANSI escape codes</a>. \x1b[ is a control sequence introducer (hex 0x1B). Code 2J clears the entire screen. Code H sets the cursor position, and without arguments defaults to the top left corner.</span>
<span class="comment-copy">Can you explain why are you writing to stderr instead of stdout, please?</span>
<span class="comment-copy">I can confirm that stderr is buffered on <i>my</i> machine running Arch Linux, zsh, and Python3 inside of tmux (over ssh) - requiring me to run <code>sys.stderr.flush()</code>. <code>print()</code> actually works just as well.</span>
<span class="comment-copy"><code>import colorama; colorama.init()</code> makes <code>"\x1b[2J\x1b[H"</code> sequence work on Windows too.</span>
<span class="comment-copy">This works for me too (using print("\033c"))and I think this is the best solution. No need to import os when comparing against os.system('clear'). It also clears without scrollback.</span>
<span class="comment-copy">Just sending the terminal command to clear screen as described here is in fact a great way of doing it. If you want (much) more elaborate terminal stuff, you can use a library such as <a href="https://github.com/erikrose/blessings" rel="nofollow noreferrer">blessings</a></span>
<span class="comment-copy">Somebody knows what's mean \033c ?</span>
<span class="comment-copy">@AbyW \033 is the octal number for ESC the escape sequence in ASCII, equivalent to \x1b in hexadecimal. &lt;ESC&gt;c is an escape sequence to reset all terminal settings to default.</span>
<span class="comment-copy"><code>print("\033c", end="")</code> if one doesn't want a newline printed</span>
<span class="comment-copy">import os and os.system('clear') work on OS X.</span>
<span class="comment-copy">This is actually a really interesting solution - I didn't realize that that was particularly possible...</span>
<span class="comment-copy">@SirJames, really easy. Windows accept "cls" and ignore other and Unix run function which know, ignore "cls"</span>
<span class="comment-copy">Yeah, I'm aware of the functionality that cmd prompt and bash can do... But it just didn't click that I could do that in Python just as easily.</span>
<span class="comment-copy">Pretty neat... similar to pip3 install clear-screen</span>
<span class="comment-copy">Why <code>os.system</code>? What is the advantage here?</span>
<span class="comment-copy">@TryPyPy My mistake. subprocess is intented to replace os.system, I should be using it instead. OP was right.</span>
<span class="comment-copy">I'd use <code>subprocess.call()</code> for something as simple as this call though.</span>
<span class="comment-copy">Doesn't that leave the cursor at the bottom of the screen?</span>
<span class="comment-copy">I like how portable this solution is.</span>
<span class="comment-copy">This one works for me on Raspberry Pi. Joril's answer does not reset the cursor to the top of screen.</span>
<span class="comment-copy">You might want to check out: <a href="https://stackoverflow.com/questions/18937058/clear-screen-in-shell/20247284#20247284" title="clear screen in shell">stackoverflow.com/questions/18937058/clear-screen-in-shell/…</a></span>
<span class="comment-copy">@Simon, your reference is not cross-platform as OP requested but instead targets Darwin devices. Yes <code>'clear'</code> works in some nix environments but not all, whereas <code>'cls'</code> is windows specific and <code>'echo -e \\\\033c'</code> works in all Bash environments</span>
<span class="comment-copy">OK, sorry about that.  Admittedly I run on Windows and sometimes Ubuntu, so I don't know much about the different environments.</span>
<span class="comment-copy"><code>print (u"{}[2J{}[;H".format(chr(27), chr(27)), end="")</code> for removing the newline.</span>
<span class="comment-copy">Are you f'ing kidding me?  Worst implementation of a one-liner I've seen in a while.  :-D  Recommend for deletion.</span>
<span class="comment-copy">... You don't need the empty string literal there. ... What? I'm trying to stay <i>positive</i> here!</span>
<span class="comment-copy">you are pedantic, but i will give it to you</span>
<span class="comment-copy">25 lines is hardly a standard today - 70 lines are more guaranteed to scroll up all the lines one will be using in a serious terminal (window's various DOS shell remakes not being considered serious, mainly due to UI limitations)</span>
<span class="comment-copy">Please, no. Thats terrible.</span>
<span class="comment-copy">well, it works. A bit aggressive though.</span>
<span class="comment-copy"><code>system('clear')</code> is terrible? I disagree.</span>
<span class="comment-copy"><a href="http://support.microsoft.com/kb/99261" rel="nofollow noreferrer">support.microsoft.com/kb/99261</a> - it's less terrible than win32api :)</span>
<span class="comment-copy">@allyourcode Aren't they all suggesting it in cases where the commands are fixed strings? Then we'd better not recommend removing a file in bash with <code>rm file</code> either - as someone could misunderstand it and execute <code>rm -rf /</code> as root instead.</span>
<span class="comment-copy">It will leave the cursor at the end of the window. It also leaves the possibility to scroll back to what was previously there. Might be a good thing or not. Also, you might want to put a greater number since some user could be using more than 100 lines...;)</span>
<span class="comment-copy">You could also write <code>print ('\n' * 100)</code> which will work in Python 2.x and 3.x while being faster.</span>
<span class="comment-copy">This way can be combined with platform.system() to get "Windows", "Linux" or other systems platforms info then set clear command per OS. I have mine with cls() name as follow <code>def cls():     if platform.system() == "Linux":         os.system("clear")     elif platform.system() == "Windows":         os.system("cls")</code></span>
<span class="comment-copy">duplicate of answer given more than 2 years ago... longer and less elegent.  See @poke answer with most votes for this question</span>
<span class="comment-copy">Bad. For loops are slower than just <code>print(""*100)</code>. Also no need to print the space.</span>
