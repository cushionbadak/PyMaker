<div class="post-text" itemprop="text">
<p>I had two versions of Python installed on my machine (versions 2.6 and 2.5). I want to run 2.6 for one project and 2.5 for another. </p>
<p>How can I specify which I want to use?</p>
<p>I am working on Windows XP SP2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Running a different copy of Python is as easy as starting the correct executable. You mention that you've started a python instance, from the command line, by simply typing <code>python</code>. </p>
<p>What this does under Windows, is to trawl the %PATH% environment variable, checking for an executable, either batch file (.bat), command file (.cmd) or some other executable to run, that matches the name given. When it finds the correct file to run, it does it.</p>
<p>Now, if you've installed two python versions 2.5 and 2.6, the path will have both of their directories in it, something like <code>PATH=c:\python\2.5;c:\python\2.6</code> but Windows will stop examining the path when it finds a match.</p>
<p>What you really need to do is to explicitly call one or both of the applications, such as <code>c:\python\2.5\python.exe</code> or <code>c:\python\2.6\python.exe</code>.</p>
<p>The other alternative is to create a shortcut to the respective python.exe calling one of them python25 and the other python26; you can then simply run <code>python25</code> on your command line.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding two more solutions to the problem:</p>
<ul>
<li>Use <a href="https://bitbucket.org/vinay.sajip/pylauncher" rel="noreferrer">pylauncher</a> (if you have Python 3.3 or newer there's no need to install it as it <a href="https://docs.python.org/3/using/windows.html#launcher" rel="noreferrer">comes</a> with Python already) and either add shebang lines to your scripts;</li>
</ul>
<p><code>#! c:\[path to Python 2.5]\python.exe</code> - for scripts you want to be run with Python 2.5<br/>
<code>#! c:\[path to Python 2.6]\python.exe</code> - for scripts you want to be run with Python 2.6</p>
<p>or instead of running <code>python</code> command run pylauncher command (<code>py</code>) specyfing which version of Python you want;</p>
<p><code>py -2.6</code> – version 2.6<br/>
<code>py -2</code> – latest installed version 2.x<br/>
<code>py -3.4</code> – version 3.4<br/>
<code>py -3</code> – latest installed version 3.x  </p>
<ul>
<li>Install <a href="http://pypi.python.org/pypi/virtualenv" rel="noreferrer">virtualenv</a> and create two virtualenvs;</li>
</ul>
<p><code>virtualenv -p c:\[path to Python 2.5]\python.exe [path where you want to have virtualenv using Python 2.5 created]\[name of virtualenv]</code></p>
<p><code>virtualenv -p c:\[path to Python 2.6]\python.exe [path where you want to have virtualenv using Python 2.6 created]\[name of virtualenv]</code></p>
<p>for example</p>
<p><code>virtualenv -p c:\python2.5\python.exe c:\venvs\2.5</code></p>
<p><code>virtualenv -p c:\python2.6\python.exe c:\venvs\2.6</code></p>
<p>then you can activate the first and work with Python 2.5 like this<br/>
<code>c:\venvs\2.5\activate</code><br/>
and when you want to switch to Python 2.6 you do  </p>
<pre><code>deactivate  
c:\venvs\2.6\activate
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From Python 3.3 on, there is the official <em>Python launcher for Windows</em> (<a href="http://www.python.org/dev/peps/pep-0397/" rel="noreferrer">http://www.python.org/dev/peps/pep-0397/</a>). Now, you can use the <code>#!pythonX</code> to determine the wanted version of the interpreter also on Windows. See more details <a href="https://stackoverflow.com/a/17245543/1346705">in my another comment</a> or read the PEP 397.</p>
<p><em>Summary:</em> The <code>py script.py</code> launches the Python version stated in <code>#!</code> or Python 2 if <code>#!</code> is missing. The <code>py -3 script.py</code> launches the Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per @alexander you can make a set of symbolic links like below.  Put them somewhere which is included in your path so they can be easily invoked</p>
<pre><code>&gt; cd c:\bin
&gt; mklink python25.exe c:\python25\python.exe
&gt; mklink python26.exe c:\python26\python.exe
</code></pre>
<p>As long as c:\bin or where ever you placed them in is in your path you can now go</p>
<pre><code>&gt; python25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you install Python, it will not overwrite other installs of other major versions. So installing Python 2.5.x will not overwrite Python 2.6.x, although installing 2.6.6 will overwrite 2.6.5.</p>
<p>So you can just install it. Then you call the Python version you want. For example:</p>
<pre><code>C:\Python2.5\Python.exe
</code></pre>
<p>for Python 2.5 on windows and</p>
<pre><code>C:\Python2.6\Python.exe
</code></pre>
<p>for Python 2.6 on windows, or </p>
<pre><code>/usr/local/bin/python-2.5
</code></pre>
<p>or </p>
<pre><code>/usr/local/bin/python-2.6
</code></pre>
<p>on <strike>Windows</strike> Unix (including Linux and OS X).</p>
<p>When you install on Unix (including Linux and OS X) you will get a generic <code>python</code> command installed, which will be the last one you installed. This is mostly not a problem as most scripts will explicitly call /usr/local/bin/python2.5 or something just to protect against that. But if you don't want to do that, and you probably don't you can install it like this:</p>
<pre><code>./configure
make
sudo make altinstall
</code></pre>
<p>Note the "altinstall" that means it will install it, but it will <em>not</em> replace the <code>python</code> command.</p>
<p>On Windows you don't get a global <code>python</code> command as far as I know so that's not an issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick hack:</p>
<ol>
<li>Go to the directory of the version of python you want to run</li>
<li>Right click on <em>python.exe</em></li>
<li>Select '<em>Create Shortcut</em>'</li>
<li>Give that shortcut a name to call by( I use p27, p33 etc.)</li>
<li>Move that shortcut to your home directory(<code>C:\Users\Your name</code>)</li>
<li>Open a command prompt and enter <code>name_of_your_shortcut.lnk</code>(I use <code>p27.lnk</code>)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>cp c:\python27\bin\python.exe as python2.7.exe</p>
<p>cp c:\python34\bin\python.exe as python3.4.exe</p>
<p>they are all in the system path, choose the version you want to run</p>
<pre><code>C:\Users\username&gt;python2.7
Python 2.7.8 (default, Jun 30 2014, 16:03:49) [MSC v.1500 32 bit (Intel)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;

C:\Users\username&gt;python3.4
Python 3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 10:38:22) [MSC v.1600 32 bit Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to run multiple versions of python on windows is described below as follows:-</p>
<p>1)Download the latest versions of <strong>python</strong> from <strong>python.org/downloads</strong> by selecting the relevant version for your system.</p>
<p>2)Run the installer and select <strong>Add python 3.x to the path</strong> to set path automatically in python 3 (you just have to click the checkbox). For python 2 open up your python 2 installer, select whatever preferences you want but just remember to set <strong>Add python.exe to path</strong> to <strong>Will be installed on local hard drive</strong>, Now just click next and wait for the installer to finish.</p>
<p>3)When both the installations are complete. <strong>Right click on my computer--Go to properties--Select advanced system settings--Go to environment variables--Click on new under System variables</strong> and add a new <strong>system variable</strong> with <strong>variable name</strong> as <strong>PY_PYTHON</strong> and set this <strong>variable value</strong> to <strong>3</strong>. Now click on <strong>OK</strong> and you should be done.</p>
<p>4)Now to test this open the <strong>command prompt</strong>. Once you are in there type <strong>python</strong> or <strong>py</strong>, It should open up <strong>python3</strong>.</p>
<p>5)Now exit out of python3 by typing <strong>exit()</strong>. Now type <strong>py -2</strong> it should open python 2.</p>
<p>If none of this works then restart the computer and if the problem still persists then uninstall everything and repeat the steps.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>install python</p>
<ul>
<li>C:\Python27</li>
<li>C:\Python36</li>
</ul></li>
<li><p>environment variable</p>
<ul>
<li><code>PYTHON2_HOME: C:\Python27</code></li>
<li><code>PYTHON3_HOME: C:\Python36</code></li>
<li><code>Path: %PYTHON2_HOME%;%PYTHON2_HOME%\Scripts;%PYTHON3_HOME%;%PYTHON3_HOME%\Scripts;</code></li>
</ul></li>
<li><p>file rename</p>
<ul>
<li>C:\Python27\python.exe → C:\Python27\python2.exe</li>
<li>C:\Python36\python.exe → C:\Python36\python3.exe</li>
</ul></li>
<li><p>pip</p>
<ul>
<li><code>python2 -m pip install package</code></li>
<li><code>python3 -m pip install package</code></li>
</ul></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Using a batch file to switch, easy and efficient on windows 7. I use this:</p>
<p>In the environment variable dialog (C:\Windows\System32\SystemPropertiesAdvanced.exe),</p>
<p>In the section user variables</p>
<ol>
<li><p>added %pathpython% to the path environment variable</p></li>
<li><p>removed any references to python pathes </p></li>
</ol>
<p>In the section system variables</p>
<ol>
<li>removed any references to python pathes </li>
</ol>
<p>I created batch files for every python installation (exmple for 3.4 x64</p>
<p>Name =          SetPathPython34x64  !!!  ToExecuteAsAdmin.bat     ;-) just to remember.</p>
<p>Content of the file = </p>
<pre><code>     Set PathPython=C:\Python36AMD64\Scripts\;C:\Python36AMD64\;C:\Tcl\bin

     setx PathPython %PathPython%
</code></pre>
<p>To switch between versions, I execute the batch file in admin mode.  </p>
<p>!!!!!  The changes are effective for the SUBSEQUENT command prompt windows OPENED. !!!</p>
<p>So I have exact control on it.</p>
</div>
<div class="post-text" itemprop="text">
<p>For example for 3.6 version type <code>py -3.6</code>. 
 If you have also 32bit and 64bit versions, you can just type <code>py -3.6-64</code> or <code>py -3.6-32</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://www.rapidee.com/en/about" rel="nofollow noreferrer">Rapid Environment Editor</a>  you can push to the top the directory of the desired Python installation. For example, to start python from the c:\Python27 directory, ensure that c:\Python27 directory is before or on top of the c:\Python36 directory in the Path environment variable. From my experience, the first python executable found in the Path environment is being executed. For example, I have MSYS2 installed with Python27 and since I've added C:\MSYS2 to the path before C:\Python36, the python.exe from the C:\MSYS2.... folder is being executed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just call the correct executable</p>
</div>
<span class="comment-copy">Good hints for asking questions is to explain what you have tried, and in what way that failed. So: What did you try, and in what way did that not work?</span>
<span class="comment-copy">Note, I couldn't find any previous questions about this on Windows, so I changed the title to reflect that.</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/2547554/95735">Official multiple python versions on the same machine?</a></span>
<span class="comment-copy">If you want to run 3.3 along with 2.7 then this is the most <i>standardized</i> answer:- <a href="http://stackoverflow.com/questions/15912063/how-do-i-run-python-2-and-3-in-windows-7/17245543#17245543" title="how do i run python 2 and 3 in windows 7">stackoverflow.com/questions/15912063/…</a></span>
<span class="comment-copy">how to create that shortcut</span>
<span class="comment-copy">When you're in windows, navigate to the folder that contains the python version you want to create a shortcut for, then right click and create shortcut. You can then rename it.</span>
<span class="comment-copy">Sorry to dig up a long dead post, but how will you make the shortcut work without requiring the .lnk extension?</span>
<span class="comment-copy">If a shortcut doesn't work, you can do as @F.J said, and simply copy and rename. Failing that, you can make a symbolic link, using ''mklink'' on the command line.</span>
<span class="comment-copy">Wouldn't the best way be to create a bat file called python25 and python26 and make those call the appropriate version? Then all you would need to do is put those 2 bat files alongside their binaries.</span>
<span class="comment-copy">pylauncher appears to be a prototype implementation of <a href="http://www.python.org/dev/peps/pep-0397/" rel="nofollow noreferrer">PEP 397</a> which was Accepted as Standards Track way back in 2011. Do you know why the launcher still isn't being distributed with Python for Windows or why there's still only Vinay Sajip's prototype implementation?</span>
<span class="comment-copy">Pylauncher is being distributed with Python starting from version 3.3 - see <a href="http://www.python.org/download/releases/3.3.0/" rel="nofollow noreferrer">python.org/download/releases/3.3.0</a>. Also I think Vinay Sajip's implementation is the implementation not merely a prototype.</span>
<span class="comment-copy">Thank you for the clarification. IMHO pylauncher should be distributed as part of the latest Python 2 version too because people using that version are more likely to the ones wanting to install multiple versions (and be more likely to do so if they were aware of its functionality and availability).</span>
<span class="comment-copy">StackOverflow should allow multiple upvotes, your answer deserves infinite upvotes! Seriously where have you been bro! :D Simple, Clear and working of course!</span>
<span class="comment-copy">This is the answer I'm looking for. I run Windows 10 with Python 2.7 and Python 3.4.3. In command prompt type in "py [python_version_number]" ex: py -3 or py will invoke the python version you have. I think environment variables must be set before you use this. this is convenient for me.</span>
<span class="comment-copy">@Inuka: No environment variables need to be set. The Python installer sets the associations with the <code>.py</code> extension. The launcher itself is installed into <code>C:\Windows</code> that is already in the <code>PATH</code>. This way, also the <code>PATH</code> variable need not to be modified.</span>
<span class="comment-copy">Thanks a lot for your answer mate. From this way we can invoke the pip as well.    py -2 -m pip install SomePackage or    py -3.4.3 -m pip install SomePackage</span>
<span class="comment-copy">I think this the most simple and no fuss solution.</span>
<span class="comment-copy">Clever idea. BTW <code>mklink</code> is only natively available in Windows Vista/2008+. On XP and Server 2003 a "hardlink" could be created instead using <code>fsutil hardlink create &lt;new filename&gt; &lt;existing filename&gt;</code> and putting or moving the &lt;new filename&gt; to somewhere in your path. Hardlinks only work on the same drive, however.</span>
<span class="comment-copy">This is a good solution, I am not sure it works without a NTFS based file system as well.</span>
<span class="comment-copy">Yes, requires support for NTFS symbolic links which I believe was introduced in Vista (I may be wrong). Use on XP requires use of a <a href="http://en.wikipedia.org/wiki/NTFS_symbolic_link#Symbolic_links_in_Windows_XP" rel="nofollow noreferrer">different driver</a>. Sounds like it was turned off at some stage before general release.</span>
<span class="comment-copy">easiest best solution</span>
<span class="comment-copy">thanks for ure help plz answer my second question also: how can i run both at a time? as i successfully switched from 2.5 to 2.6</span>
<span class="comment-copy">@Bilal Basharat: Windows is a multi-tasking OS if you want to run two things at the same time, you just start both, so I don't understand your question.</span>
<span class="comment-copy">currently i am working on python2.5. simply elaborate me how can i run 2.6 also ? when i write 'python' in windows command prompt to enter python shell than python2.5 appears. in c drive i had both version installed. when i go to C:\Python2.6\Python.exe. than python2.6 temporarily activated. as soon as i leave  C:\Python2.6\ it again turned into version 2.5</span>
<span class="comment-copy">@Bilal Basharat: I already answered this. It is not "temporarily activated". You ran Python 2.6 with the command C:\Python2.6\Python.exe and that is how you run it. And you run Python 2.5 with the command C:\Python2.5\Python.exe. That is how you run both at the same time.</span>
<span class="comment-copy">@Bilal Basharat: If either the <code>C:\Python2.5</code> or <code>C:\Python2.6</code> directory appears in your <code>PATH</code> environment variable, the corresponding version of Python will become the default <i>unless</i> you override it by explicitly specifying a different path to the .exe you wish to use.</span>
<span class="comment-copy">this worked for me. Just have to use copy instead of cp. Also when running this command you have to be somewhere on the path and both python installations e.g.  c:\python34\bin\python.exe and  c:\python27\bin\python.exe need to be in the path also . ( preferably in that order).</span>
<span class="comment-copy">currently i am working on 2.5. simply elaborate me how can i run 2.6 also. in windows command prompt i had to write 'python' to enter python shell. and it is 2.5. in c drive i had both version installed.</span>
<span class="comment-copy">Instead of <code>python</code> to enter the shell try <code>python2.5</code> or <code>python2.6</code>. I'm not a windows user, but on unix /usr/bin/python is usually an alias to the fully qualified executable, I'm assuming python in windows is installed in a similar manner</span>
<span class="comment-copy">On windows the executable name is always python.exe, but you change path to the executable.  It's been explained several times already though.</span>
