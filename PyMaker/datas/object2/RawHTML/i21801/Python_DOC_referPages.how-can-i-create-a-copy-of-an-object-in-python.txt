<div class="post-text" itemprop="text">
<p>I would like to create a copy of an object. I want the new object to possess all properties of the old object (values of the fields). But I want to have independent objects. So, if I change values of the fields of the new object, the old object should not be affected by that.</p>
</div>
<div class="post-text" itemprop="text">
<p>To get a fully independent copy of an object you can use the <a href="http://docs.python.org/library/copy.html#copy.deepcopy" rel="noreferrer"><code>copy.deepcopy()</code></a> function.</p>
<p>For more details about shallow and deep copying please refer to the other answers to this question and the nice explanation in <a href="https://stackoverflow.com/questions/3975376/understanding-dict-copy-shallow-or-deep/3975388#3975388">this answer to a related question</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>How can I create a copy of an object in Python?</h2>
<p>So, if I change values of the fields of the new object, the old object should not be affected by that.</p>
</blockquote>
<p>You mean a mutable object then.</p>
<p>In Python 3, lists get a <code>copy</code> method (in 2, you'd use a slice to make a copy):</p>
<pre><code>&gt;&gt;&gt; a_list = list('abc')
&gt;&gt;&gt; a_copy_of_a_list = a_list.copy()
&gt;&gt;&gt; a_copy_of_a_list is a_list
False
&gt;&gt;&gt; a_copy_of_a_list == a_list
True
</code></pre>
<h3>Shallow Copies</h3>
<p>Shallow copies are just copies of the outermost container.</p>
<p><code>list.copy</code> is a shallow copy:</p>
<pre><code>&gt;&gt;&gt; list_of_dict_of_set = [{'foo': set('abc')}]
&gt;&gt;&gt; lodos_copy = list_of_dict_of_set.copy()
&gt;&gt;&gt; lodos_copy[0]['foo'].pop()
'c'
&gt;&gt;&gt; lodos_copy
[{'foo': {'b', 'a'}}]
&gt;&gt;&gt; list_of_dict_of_set
[{'foo': {'b', 'a'}}]
</code></pre>
<p>You don't get a copy of the interior objects. They're the same object - so when they're mutated, the change shows up in both containers.</p>
<h3>Deep copies</h3>
<p>Deep copies are recursive copies of each interior object.</p>
<pre><code>&gt;&gt;&gt; lodos_deep_copy = copy.deepcopy(list_of_dict_of_set)
&gt;&gt;&gt; lodos_deep_copy[0]['foo'].add('c')
&gt;&gt;&gt; lodos_deep_copy
[{'foo': {'c', 'b', 'a'}}]
&gt;&gt;&gt; list_of_dict_of_set
[{'foo': {'b', 'a'}}]
</code></pre>
<p>Changes are not reflected in the original, only in the copy.</p>
<h3>Immutable objects</h3>
<p>Immutable objects do not usually need to be copied. In fact, if you try to, Python will just give you the original object:</p>
<pre><code>&gt;&gt;&gt; a_tuple = tuple('abc')
&gt;&gt;&gt; tuple_copy_attempt = a_tuple.copy()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'tuple' object has no attribute 'copy'
</code></pre>
<p>Tuples don't even have a copy method, so let's try it with a slice:</p>
<pre><code>&gt;&gt;&gt; tuple_copy_attempt = a_tuple[:]
</code></pre>
<p>But we see it's the same object:</p>
<pre><code>&gt;&gt;&gt; tuple_copy_attempt is a_tuple
True
</code></pre>
<p>Similarly for strings: </p>
<pre><code>&gt;&gt;&gt; s = 'abc'
&gt;&gt;&gt; s0 = s[:]
&gt;&gt;&gt; s == s0
True
&gt;&gt;&gt; s is s0
True
</code></pre>
<p>and for frozensets, even though they have a <code>copy</code> method:</p>
<pre><code>&gt;&gt;&gt; a_frozenset = frozenset('abc')
&gt;&gt;&gt; frozenset_copy_attempt = a_frozenset.copy()
&gt;&gt;&gt; frozenset_copy_attempt is a_frozenset
True
</code></pre>
<h3>When to copy immutable objects</h3>
<p>Immutable objects <em>should</em> be copied if you need a mutable interior object copied.</p>
<pre><code>&gt;&gt;&gt; tuple_of_list = [],
&gt;&gt;&gt; copy_of_tuple_of_list = tuple_of_list[:]
&gt;&gt;&gt; copy_of_tuple_of_list[0].append('a')
&gt;&gt;&gt; copy_of_tuple_of_list
(['a'],)
&gt;&gt;&gt; tuple_of_list
(['a'],)
&gt;&gt;&gt; deepcopy_of_tuple_of_list = copy.deepcopy(tuple_of_list)
&gt;&gt;&gt; deepcopy_of_tuple_of_list[0].append('b')
&gt;&gt;&gt; deepcopy_of_tuple_of_list
(['a', 'b'],)
&gt;&gt;&gt; tuple_of_list
(['a'],)
</code></pre>
<p>As we can see, when the interior object of the copy is mutated, the original does <em>not</em> change.</p>
<h3>Custom Objects</h3>
<p>Custom objects usually store data in a <code>__dict__</code> attribute or in <code>__slots__</code> (a tuple-like memory structure.)</p>
<p>To make a copyable object, define <code>__copy__</code> (for shallow copies) and/or <code>__deepcopy__</code> (for deep copies).</p>
<pre><code>from copy import copy, deepcopy

class Copyable:
    __slots__ = 'a', '__dict__'
    def __init__(self, a, b):
        self.a, self.b = a, b
    def __copy__(self):
        return type(self)(self.a, self.b)
    def __deepcopy__(self, memo): # memo is a dict of id's to copies
        id_self = id(self)        # memoization avoids unnecesary recursion
        _copy = memo.get(id_self)
        if _copy is None:
            _copy = type(self)(
                deepcopy(self.a, memo), 
                deepcopy(self.b, memo))
            memo[id_self] = _copy 
        return _copy
</code></pre>
<p>Note that <code>deepcopy</code> keeps a memoization dictionary of <code>id(original)</code> (or identity numbers) to copies. To enjoy good behavior with recursive data structures, make sure you haven't already made a copy, and if you have, return that.</p>
<p>So let's make an object:</p>
<pre><code>&gt;&gt;&gt; c1 = Copyable(1, [2])
</code></pre>
<p>And <code>copy</code> makes a shallow copy:</p>
<pre><code>&gt;&gt;&gt; c2 = copy(c1)
&gt;&gt;&gt; c1 is c2
False
&gt;&gt;&gt; c2.b.append(3)
&gt;&gt;&gt; c1.b
[2, 3]
</code></pre>
<p>And <code>deepcopy</code> now makes a deep copy:</p>
<pre><code>&gt;&gt;&gt; c3 = deepcopy(c1)
&gt;&gt;&gt; c3.b.append(4)
&gt;&gt;&gt; c1.b
[2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Shallow copy with <code>copy.copy()</code></strong></p>
<pre><code>#!/usr/bin/env python3

import copy

class C():
    def __init__(self):
        self.x = [1]
        self.y = [2]

# It copies.
c = C()
d = copy.copy(c)
d.x = [3]
assert c.x == [1]
assert d.x == [3]

# It's shallow.
c = C()
d = copy.copy(c)
d.x[0] = 3
assert c.x == [3]
assert d.x == [3]
</code></pre>
<p><strong>Deep copy with <code>copy.deepcopy()</code></strong></p>
<pre><code>#!/usr/bin/env python3
import copy
class C():
    def __init__(self):
        self.x = [1]
        self.y = [2]
c = C()
d = copy.deepcopy(c)
d.x[0] = 3
assert c.x == [1]
assert d.x == [3]
</code></pre>
<p>Documentation: <a href="https://docs.python.org/3/library/copy.html" rel="noreferrer">https://docs.python.org/3/library/copy.html</a></p>
<p>Tested on Python 3.6.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the following should work with many well-behaved classed in Python:</p>
<pre class="lang-python prettyprint-override"><code>def copy(obj):
    return type(obj)(obj)
</code></pre>
<p>(Of course, I am not talking here about "deep copies," which is a different story, and which may be not a very clear concept -- how deep is deep enough?)</p>
<p>According to my tests with Python 3, for immutable objects, like tuples or strings, it returns the same object (because there is no need to make a shallow copy of an immutable object), but for lists or dictionaries it creates an independent shallow copy.</p>
<p>Of course this method only works for classes whose constructors behave accordingly. Possible use cases: making a shallow copy of a standard Python container class.</p>
</div>
<span class="comment-copy">This answer was flagged as "Not an answer", deleted, and undeleted - meta discussion here: <a href="https://meta.stackoverflow.com/questions/377844/why-was-this-highly-upvoted-answer-converted-to-a-comment" title="why was this highly upvoted answer converted to a comment">meta.stackoverflow.com/questions/377844/â€¦</a></span>
<span class="comment-copy">@AaronHall Thanks for letting me know! This certainly isn't the greatest answer I wrote, but I kind of agree with the decision that it should not be forcibly deleted. I'll brush it up a bit, but since there are already answers with all the details (notably yours), I'll keep it short.</span>
<span class="comment-copy">That's neat and all, but does not answer the question as your copy function fails for custom classes and the question was about <i>objects</i>.</span>
<span class="comment-copy">@JaredSmith, it was not stated that the question was about <i>all</i> objects.  It was not even clear if it was about deep or shallow copy (i would assume usual shallow one, but the accepted answer is about deep one). As to custom classes, if they are yours, you may just respect this kind of convention in their <code>__init__</code> method.  So, i thought this method may be good enough for certain purposes.  In  any case, I will be interested in informative comments on this suggestion.</span>
<span class="comment-copy">Consider  <code>class Foo(object):     def __init__(self, arg):         super(Foo, self).__init__()         self.arg = arg</code> Basic as it gets. If I do <code>foo = Foo(3) bar = copy(foo) print(foo.arg) # 3 print(bar.arg) # &lt;__main__.Foo object at ...&gt;</code> Meaning that your <code>copy</code> function is broken for even the most basic of classes. Again, it's a neat trick (hence no DV), but not an answer.</span>
<span class="comment-copy">@JaredSmith, i saw that there is <code>copy.copy</code> method for making shallow copies, but, maybe naively, it seems to me that it should be the responsibility of the class to provide a "shallow copy constructor."  In such case why not to provide the same kinf of interface to it as <code>dict</code> and <code>list</code> do?  So, if your class wants to take responsibility for copying its objects, why not to add a <code>if isinstance(arg, type(self))</code> clause into <code>__init__</code>?</span>
<span class="comment-copy">Because you don't always have control over the classes you use the way you do ones you define. They may, just as one example, be C programs that have Python bindings (e.g. GTK, openalpr, parts of core). Not to mention that even if you took a third party library and added copy methods to every class, how are you going to weave that into your dependency management?</span>
