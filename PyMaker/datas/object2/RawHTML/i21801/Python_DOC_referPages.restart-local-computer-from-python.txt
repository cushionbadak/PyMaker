<div class="post-text" itemprop="text">
<p>Is there any way to make the computer a Python program is running on restart? Generic solution is good, but in particular I'm on windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no generic way of doing this, afaik.</p>
<p>For Windows, you need to access the Win32 API. Like so:</p>
<pre><code>  import win32api
  win32api.InitiateSystemShutdown()
</code></pre>
<p>The win32api module is a part of <a href="http://pypi.python.org/pypi/pywin32/" rel="nofollow noreferrer">pywin32</a>.</p>
<p>For linux/os x, I guess calling the "reboot" command is the easiest.</p>
<pre><code>import os
os.system('reboot now')
</code></pre>
<p>Or something like that.</p>
<p>(Note to downvoters: <code>os.system()</code> has <em>not</em> been deprecated. The text is "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function." For simple cases like this, when you aren't interested in retrieving the results, nor in multiprocessing, <code>os.system()</code> works just fine).</p>
</div>
<div class="post-text" itemprop="text">
<p>Why don't you just call the <a href="http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/shutdown.mspx?mfr=true" rel="noreferrer">shutdown</a> command using subprocess?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could reboot a Windows system by using: <code>os.system("shutdown -t 0 -r -f")</code> </p>
<p>Example:</p>
<pre><code>import os
print "REBOOTING"
os.system("shutdown -t 0 -r -f")
</code></pre>
<p>Change the number in front of -t to change the number of seconds before shutdown.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>There is nothing in the standard library that would directly allow you to do this, and I am unaware of any modules that provide a cross platform method, but if you are on Windows and don't want to install anything (like the win32api) then you could use <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> default module and interact with the WinAPI directly.</strong></p>
<p>You could use the <a href="https://msdn.microsoft.com/en-us/library/aa376868(VS.85).aspx" rel="nofollow noreferrer"><code>ExitWindowsEx()</code></a> function to restart the computer (it is almost the same as my other answer <a href="https://stackoverflow.com/questions/34039845/how-to-shudown-a-computer-using-python/50824776#50824776">How to shudown a computer using Python</a>; however the hexadecimal value has to be changed to restart and not shutdown).</p>
<hr/>
<p><strong>Process:</strong></p>
<p>First you need ctypes:</p>
<pre><code>import ctypes
</code></pre>
<p>Next get the <code>user32.dll</code> as described in the <a href="https://msdn.microsoft.com/en-us/library/aa376868(VS.85).aspx" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>DLL | User32.dll</p>
</blockquote>
<p>So:</p>
<pre><code>user32 = ctypes.WinDLL('user32')
</code></pre>
<p>Next you need to call the <code>ExitWindowsEx()</code> function and insert the correct hexadecimal values:</p>
<pre><code>user32.ExitWindowsEx(0x00000002, 0x00000000)
</code></pre>
<p>The first argument (<code>0x00000002</code>) shuts down the system and then restarts (see <a href="https://msdn.microsoft.com/en-us/library/aa376868(VS.85).aspx" rel="nofollow noreferrer">documentation</a>).</p>
<p>The second argument (<code>0x00000000</code>) gives a reason to be logged by the system.  A complete list can be found <a href="https://msdn.microsoft.com/en-us/library/aa376885(v=vs.85).aspx" rel="nofollow noreferrer">here</a></p>
<hr/>
<p><strong>Complete Code:</strong></p>
<pre><code>import ctypes
user32 = ctypes.WinDLL('user32')
user32.ExitWindowsEx(0x00000002, 0x00000000)
</code></pre>
<hr/>
<p><em>About <code>os.system()</code> method on Windows:</em> </p>
<p>The win32api or ctypes answers both will execute silently.  <code>os.system("shutdown -t 0 -r -f")</code> will leave a message saying "You are about to be signed out in less than a minute" which may be undesirable in some cases.</p>
<p>A file alongside the script called <code>shutdown.bat</code>/<code>shutdown.exe</code>/<code>shutdown.cmd</code> will cause the command <code>shutdown -t 0 -r -f</code> to break, calling that file and not the system command.  The same goes for described <code>wmic.exe</code> above.</p>
<hr/>
<p><strong>As a side note:</strong> I built <a href="https://pypi.org/project/WinUtils/" rel="nofollow noreferrer">WinUtils</a> (Windows only) which simplifies this a bit, however it should be faster (and does not require Ctypes) since it is built in C.</p>
<p><sup><strong>Example:</strong></sup></p>
<pre><code>import WinUtils
WinUtils.Restart(WinUtils.SHTDN_REASON_MINOR_OTHER)
</code></pre>
</div>
<span class="comment-copy">Not windows, but on linux it's as easy as os.system("reboot"). Presuming you have the correct privileges.</span>
<span class="comment-copy">Don't recommend <code>os.system</code>. It's been deprecated. @Claudiu: Use <code>subprocess</code>.</span>
<span class="comment-copy">@A A: No, it has not been deprecated, and for something trivial like this it works just fine.</span>
<span class="comment-copy">I did not vote you down, however, using an an external module (win32api) to reboot a machine, which could be rebooted directly with wmi using <code>wmic</code> is so and so. The use of os.system I do not care about.</span>
<span class="comment-copy">@Anders: "WMIC.exe is only available under Windows XP Professional, Windows Server 2003, Windows Vista and Windows Server 2008." So, no. Bad idea.</span>
<span class="comment-copy">It's available on other systems also, for example, Windows 7. I don't know if it's included in a SP for Windows XP Home, very well could be.</span>
<span class="comment-copy">It seems not. So if you know it's available on your system, then that would work. As a generic solution it's less ideal.</span>
