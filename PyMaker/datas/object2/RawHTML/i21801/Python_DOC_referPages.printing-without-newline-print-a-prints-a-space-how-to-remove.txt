<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>&gt;&gt;&gt; for i in xrange(20):
...     print 'a',
... 
a a a a a a a a a a a a a a a a a a a a
</code></pre>
<p>I want to output <code>'a'</code>, without <code>' '</code> like this:</p>
<pre><code>aaaaaaaaaaaaaaaaaaaa
</code></pre>
<p>Is it possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of ways of achieving your result. If you're just wanting a solution for your case, use <a href="http://docs.python.org/library/stdtypes.html#typesseq" rel="noreferrer">string multiplication</a> as <a href="https://stackoverflow.com/questions/4499073/print-python-whithout-n/4499087#4499087">@Ant</a> mentions. This is only going to work if each of your <code>print</code> statements prints the same string. Note that it works for multiplication of any length string (e.g. <code>'foo' * 20</code> works).</p>
<pre><code>&gt;&gt;&gt; print 'a' * 20
aaaaaaaaaaaaaaaaaaaa
</code></pre>
<p>If you want to do this in general, build up a string and then print it once. This will consume a bit of memory for the string, but only make a single call to <code>print</code>. Note that string concatenation using <code>+=</code> is now linear in the size of the string you're concatenating so this will be fast.</p>
<pre><code>&gt;&gt;&gt; for i in xrange(20):
...     s += 'a'
... 
&gt;&gt;&gt; print s
aaaaaaaaaaaaaaaaaaaa
</code></pre>
<p>Or you can do it more directly using <a href="http://docs.python.org/library/sys.html#sys.stdout" rel="noreferrer">sys.stdout</a>.<a href="http://docs.python.org/library/stdtypes.html#file.write" rel="noreferrer">write()</a>, which <code>print</code> is a wrapper around. This will write only the raw string you give it, without any formatting. Note that no newline is printed even at the end of the 20 <code>a</code>s.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; for i in xrange(20):
...     sys.stdout.write('a')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
</code></pre>
<p>Python 3 changes the <code>print</code> statement into a <a href="http://docs.python.org/library/functions.html#print" rel="noreferrer">print() function</a>, which allows you to set an <code>end</code> parameter. You can use it in &gt;=2.6 by importing from <code>__future__</code>. I'd avoid this in any serious 2.x code though, as it will be a little confusing for those who have never used 3.x. However, it should give you a taste of some of the goodness 3.x brings.</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; for i in xrange(20):
...     print('a', end='')
... 
aaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/whatsnew/2.6.html#pep-3105-print-as-a-function" rel="nofollow noreferrer">PEP 3105: print As a Function</a> in the <a href="https://docs.python.org/3/whatsnew/2.6.html#what-s-new-in-python-2-6" rel="nofollow noreferrer">Whatâ€™s New in Python 2.6</a> document:</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print('a', end='')
</code></pre>
<p>Obviously that only works with python 3.0 or higher (or 2.6+ with a <code>from __future__ import print_function</code> at the beginning). The <code>print</code> statement was  removed and became the <code>print()</code> function by default in Python 3.0.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can suppress the space by printing an empty string to stdout between the <code>print</code> statements.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; for i in range(20):
...   print 'a',
...   sys.stdout.write('')
... 
aaaaaaaaaaaaaaaaaaaa
</code></pre>
<p>However, a cleaner solution is to first build the entire string you'd like to print and then output it with a single <code>print</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could print a backspace character (<code>'\b'</code>):</p>
<pre><code>for i in xrange(20):
    print '\ba',
</code></pre>
<p>result:</p>
<pre><code>aaaaaaaaaaaaaaaaaaaa
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.x:</p>
<pre><code>for i in range(20):
    print('a', end='')
</code></pre>
<p>Python 2.6 or 2.7:</p>
<pre><code>from __future__ import print_function
for i in xrange(20):
    print('a', end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want them to show up one at a time, you can do this:</p>
<pre><code>import time
import sys
for i in range(20):
    sys.stdout.write('a')
    sys.stdout.flush()
    time.sleep(0.5)
</code></pre>
<p><code>sys.stdout.flush()</code> is necessary to force the character to be written each time the loop is run.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just as a side note: </p>
<p>Printing is O(1) but building a string and then printing is O(n), where n is the total number of characters in the string. So yes, while building the string is "cleaner", it's not the most efficient method of doing so.</p>
<p>The way I would do it is as follows:</p>
<pre><code>from sys import stdout
printf = stdout.write
</code></pre>
<p>Now you have a "print function" that prints out any string you give it without returning the new line character each time.</p>
<pre><code>printf("Hello,")
printf("World!")
</code></pre>
<p>The output will be: Hello, World!</p>
<p>However, if you want to print integers, floats, or other non-string values, you'll have to convert them to a string with the str() function.</p>
<pre><code>printf(str(2) + " " + str(4))
</code></pre>
<p>The output will be: 2 4</p>
</div>
<div class="post-text" itemprop="text">
<p>Either what <a href="https://stackoverflow.com/users/465159/ant">Ant</a> <a href="https://stackoverflow.com/questions/4499073/print-python-whithout-n/4499087#4499087">says</a>, or accumulate into a string, then print once:</p>
<pre><code>s = '';
for i in xrange(20):
    s += 'a'
print s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>without what?
do you mean</p>
<pre><code>&gt;&gt;&gt; print 'a' * 20
aaaaaaaaaaaaaaaaaaaa
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>this is really simple </p>
<p>for python 3+ versions you only have to write the following codes</p>
<pre><code>for i in range(20):
      print('a',end='')
</code></pre>
<p>just convert the loop to the following codes, you don't have to worry about other things</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>WOW!!!</strong></p>
<p>It's pretty <strong>long time</strong> ago</p>
<p>Now, In <strong>python 3.x</strong> it will be pretty easy</p>
<p>code:</p>
<pre><code>for i in range(20):
      print('a',end='') # here end variable will clarify what you want in 
                        # end of the code
</code></pre>
<p>output:</p>
<pre><code>aaaaaaaaaaaaaaaaaaaa 
</code></pre>
<p><strong>More about print() function</strong></p>
<pre><code>print(value1,value2,value3,sep='-',end='\n',file=sys.stdout,flush=False)
</code></pre>
<p><strong>Here</strong>:</p>
<pre><code>value1,value2,value3
</code></pre>
<p>you can print <strong>multiple values</strong> using <strong>commas</strong></p>
<pre><code>sep = '-'
</code></pre>
<p>3 values will be separated by '-' character </p>
<p>you can use any character instead of that even string like sep='@' or sep='good'</p>
<pre><code>end='\n'
</code></pre>
<p>by default print function put '\n' charater at the end of output</p>
<p>but you can use any character or string by changing end variale value</p>
<p>like end='$' or end='.' or end='Hello'</p>
<pre><code>file=sys.stdout
</code></pre>
<p>this is a default value, system standard output</p>
<p>using this argument you can create a <strong>output file stream</strong> like</p>
<pre><code>print("I am a Programmer", file=open("output.txt", "w"))
</code></pre>
<p>by this code you will create a file named <strong>output.txt</strong> where your output
<strong>I am a Programmer</strong> will be stored</p>
<pre><code>flush = False
</code></pre>
<p>It's a default value 
using <strong>flush=True</strong> you can forcibly <strong>flush the stream</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>as simple as that  </p>
<pre><code>def printSleeping():
     sleep = "I'm sleeping"
     v = ""
     for i in sleep:
         v += i
         system('cls')
         print v
         time.sleep(0.02)
</code></pre>
</div>
<span class="comment-copy">I'm surprised that no-one's yet mentioned <code>"".join("a" for i in xrange(20))</code>. (It's much more flexible than just doing <code>"a" * 20</code>, as I assume it's a simplfied example).</span>
<span class="comment-copy">@A A I read the question when the string multiplication answer was present, and thought I'd give an overview of several options. The others came while I was putting together my answer. It was accepted soon after, otherwise I would've likely deleted it.</span>
<span class="comment-copy">-1 Don't build up strings by concatenation; it's O(n^2) instead of O(n). Use <code>"".join(...)</code> instead.</span>
<span class="comment-copy">I have no problem with your answer, it summarizes everything and that's good. But by doing this, you discourage other people who answer. There are many good answers and all deserve +1. Just imagine if everyone started making summaries.</span>
<span class="comment-copy">@katrielalex: Does it matter? Has the OP asked for optimization or complexity? And will it matter for 20 strings? Come on, you seriously must be joking.</span>
<span class="comment-copy">Wow. We are talking about 20 characters here. Not 2 billion of them.</span>
<span class="comment-copy">This is the correct answer.</span>
<span class="comment-copy">No need for the <code>print</code>; just <code>sys.stdout.write('a')</code>...</span>
<span class="comment-copy">@Soulseekah: Yes, using only <code>sys.stdout.write()</code> is more convenient in this case. However, I wanted to show that writing an empty string to stdout suppresses the space between elements written using <code>print</code>, which could be useful in similar situations.</span>
<span class="comment-copy">that's one great tip :)</span>
<span class="comment-copy">@PÃ¤rWieslander This is the answer I am looking for!</span>
<span class="comment-copy">This is the fun answer ;)</span>
<span class="comment-copy">That's a nice character you've got there at the end of the previous output. Omnomnomnom!</span>
<span class="comment-copy">Why printf?, this does not do formatted print.</span>
<span class="comment-copy">Do you say that I can output an infinite amount of text in same time as outputting one character?</span>
<span class="comment-copy">When I redefined printf to stdout.write, my stdout.write seems to be printing the number of chartacters the string is: "Hello,6" What gives? What's going on? And how do I stop it?</span>
<span class="comment-copy">Also, can you explain what you mean by O(1) O(n)? I don't understand what that refers to</span>
<span class="comment-copy">@Tom It's referring to complexity (Big O notation) as a reflection of the <i>cost</i> of the operation. O(1) is constant time - <i>ideal</i> - and O(n) is linear time - <i>okay</i> but way too expensive for something so simple. Although, for small things, the time you spend using your brain to worry about these things is more computationally wasteful than just using string concatenation.</span>
<span class="comment-copy">Okay for tiny things.</span>
