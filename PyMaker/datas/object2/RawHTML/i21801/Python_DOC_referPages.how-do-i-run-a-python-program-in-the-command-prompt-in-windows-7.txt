<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to run Python programs with the Command Prompt on Windows 7. (I should have figured this out by now...)</p>
<p>When I typed "python" into the command prompt, I got the following error:</p>
<blockquote>
<p>'python' is not recognized as an internal or external command,
  operable program or batch file.</p>
</blockquote>
<p>The first place I found when looking for help was this site: <a href="http://docs.python.org/faq/windows.html#how-do-i-run-a-python-program-under-windows" rel="noreferrer">http://docs.python.org/faq/windows.html#how-do-i-run-a-python-program-under-windows</a>.</p>
<p>It was somewhat helpful, but the tutorial was written for Windows 2000 and older, so it was minimally helpful for my Windows 7 machine. I attempted the following:</p>
<blockquote>
<p>For older versions of Windows the easiest way to do this is to edit the C:\AUTOEXEC.BAT &gt;file. You would want to add a line like the following to AUTOEXEC.BAT:</p>
</blockquote>
<p>This file did not exist on my machine (unless I'm mistaken). </p>
<p>Next, I tried this: (here: <a href="https://stackoverflow.com/questions/1522564/how-do-i-run-a-python-program">How do I run a Python program?</a>)</p>
<blockquote>
<p>Putting Python In Your Path</p>
<p>Windows</p>
<p>In order to run programs, your operating system looks in various places, and tries to match the name of the program / command you typed with some programs along the way.</p>
<p>In windows:</p>
<p>control panel &gt; system &gt; advanced &gt; |Environmental Variables| &gt; system variables -&gt; Path</p>
<p>this needs to include: C:\Python26; (or equivalent). If you put it at the front, it will be the first place looked. You can also add it at the end, which is possibly saner.</p>
<p>Then restart your prompt, and try typing 'python'. If it all worked, you should get a "&gt;&gt;&gt;" prompt.</p>
</blockquote>
<p>This was relevant enough for Windows 7, and I made my way to the System Variables. I added a variable "python"  with the value "C:\Python27"</p>
<p>I continued to get the error, even after restarting my computer.</p>
<p>Anyone know how to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add <code>C:\Python27</code> to your system PATH variable, not a new variable named "python".</p>
<p>Find the system PATH environment variable, and append to it a <code>;</code> (which is the delimiter) and the path to the directory containing python.exe (e.g. <code>C:\Python27</code>). See below for exact steps.</p>
<p>The PATH environment variable lists all the locations that Windows (and <code>cmd.exe</code>) will check when given the name of a command, e.g. "python" (it also uses the PATHEXT variable for a list of executable file extensions to try). The first executable file it finds on the PATH with that name is the one it starts.</p>
<p>Note that after changing this variable, there is no need to restart Windows, but only new instances of <code>cmd.exe</code> will have the updated PATH. You can type <code>set PATH</code> at the command prompt to see what the current value is.</p>
<hr/>
<p>Exact steps for adding Python to the path on Windows 7+:</p>
<ol>
<li>Computer -&gt; System Properties (or <kbd>Win+Break</kbd>) -&gt; Advanced System Settings</li>
<li>Click the <code>Environment variables...</code> button (in the Advanced tab)</li>
<li>Edit PATH and append <code>;C:\Python27</code> to the end (substitute your Python version)</li>
<li>Click OK. Note that changes to the PATH are only reflected in command prompts opened <em>after</em> the change took place.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have Python2.7 installed </p>
<ol>
<li><p>Goto the Start Menu</p></li>
<li><p>Right Click "Computer"</p></li>
<li><p>Select "Properties"</p></li>
<li><p>A dialog should pop up with a link on the left called "Advanced system settings". Click it.</p></li>
<li><p>In the System Properties dialog, click the button called "Environment Variables".</p></li>
<li><p>In the Environment Variables dialog look for "Path" under the System Variables window.</p></li>
<li><p>Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.</p></li>
<li><p>Click Ok and close the dialogs. </p></li>
<li><p>Now open up a new command prompt and type "python"</p></li>
</ol>
<p>It should work. </p>
</div>
<div class="post-text" itemprop="text">
<p>It has taken me some effort looking for answers here, on the web, and and in the Python documentation, and testing on my own, to finally get my Python scripts working smoothly on my Windows machines (WinXP and Win7). So, I just blogged about it and am pasting that below in case it's useful to others. Sorry it's long, and feel free to improve it; I'm no expert.</p>
<p>[<strong>UPDATE</strong>: Python 3.3 now includes the Python Launcher for Windows, which allows you to type py (rather than python) to invoke the default interpreter, or py -2, py -3, py -2.7, etc. It also supports shebang lines, allowing the script itself to specify. For versions prior to 3.3, the launcher is available as a separate download.
<a href="http://docs.python.org/3/whatsnew/3.3.html" rel="noreferrer">http://docs.python.org/3/whatsnew/3.3.html</a>
]</p>
<h1>Running Python scripts conveniently under Windows</h1>
<p>Maybe you're creating your own Python scripts, or maybe someone has given you one for doing something with your data files. Say you've acquired a Python script and have saved it to "D:\my scripts\ApplyRE.py". You want to run it conveniently by either double-clicking it or typing it into the command line from any location, with the option of passing parameters to it like this (-o means "overwrite the output file if it already exists"): </p>
<pre><code>ApplyRE infile.txt outfile.txt -o
</code></pre>
<p>Say you also have a data file, "C:\some files\some lexicon.txt". The simplest option is to move the file or the script so they're in the same location, but that can get messy, so let's assume that they'll stay separate.</p>
<h2>Making sure Windows can find the Python interpreter</h2>
<p>After installing Python, verify that typing python into a command prompt works (and then type exit() to get back out of the Python interpreter). </p>
<pre><code>C:\&gt;python
Python 3.2 (r32:88445, Feb 20 2011, 21:29:02) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; exit()
C:\&gt;
</code></pre>
<p>If this doesn't work, you'll need to append something like ";C:\Python32" (without quotes) to the PATH environment variable. See PATHEXT below for instructions.</p>
<h2>Associating Python with .py and .pyc</h2>
<p>Verify that double-clicking on ApplyRE.py runs it. (It should also have a Python logo as its icon and be labeled "Python File", by the way.) If this isn't already done, right-click on a .py file, choose Open With, Choose Program, and check "Always use..." This association improves convenience but isn't strictly necessary--you can specify "python" every time you want to run a script, like this:</p>
<pre><code>D:\my scripts&gt;python ApplyRE.py lexicon-sample.txt -o
Running... Done.
</code></pre>
<p>Here's a very specific variation, which is optional unless you need to specify a different version of the interpreter.</p>
<pre><code>D:\my scripts&gt;c:\python32\python ApplyRE.py lexicon-sample.txt -o
Running... Done.
</code></pre>
<p>But that's a pain. Fortunately, once Python is installed, in the PATH, and associated with .py, then double-clicking a .py file or directly typing it as a command should work fine. Here, we seem to be running the script directly--it's nice and simple to run it on a sample file that's located in the "my scripts" folder along with the script.</p>
<pre><code>D:\my scripts&gt;ApplyRE.py lexicon-sample.txt -o
Running... Done.
</code></pre>
<h2>Omitting the .py extension (editing PATHEXT)</h2>
<p>To further reduce typing, you can tell Windows that .py (and perhaps .pyc files) are executable. To do this, right-click Computer and choose Properties, Advanced, Environment Variables, System Variables. Append ";.PY;.PYC" (without quotes) to the existing PATHEXT variable, or else create it if you're certan it doesn't exist yet. Close and reopen the command prompt. You should now be able to omit the .py (FYI, doing so would cause ApplyRE.exe or ApplyRE.bat to run instead, if one existed).</p>
<pre><code>D:\my scripts&gt;ApplyRE lexicon-sample.txt -o
Running... Done.
</code></pre>
<h2>Adding scripts to the system PATH</h2>
<p>If you're going to use your scripts often from the command prompt (it's less important if doing so via using BAT files), then you'll want to add your scripts' folder to the system PATH. (Next to PATHEXT you should see a PATH variable; append ";D:\my scripts" to it, without quotes.) This way you can run a script from some other location against the files in current location, like this:</p>
<pre><code>C:\some files&gt;ApplyRE "some lexicon.txt" "some lexicon OUT.txt" -o
Running... Done.
</code></pre>
<p>Success! That's pretty much all you need to do to streamline the command-line.</p>
<h2>Running directly without tweaking the PATH</h2>
<p>If you're a fast typist or don't mind creating a batch file for each situation, you can specify full paths (for the script, or for the parameters) instead of tweaking PATH.</p>
<pre><code>C:\some files&gt;"d:\my scripts\ApplyRE.py" "some lexicon.txt" "some lexicon OUT.txt" -o
Running... Done.
C:\some files&gt;d:
D:\&gt;cd "my scripts"
D:\my scripts&gt;ApplyRE.py "c:\some files\some lexicon.txt" "c:\some files\some lexicon OUT.txt" -o
Running... Done.
</code></pre>
<h2>Creating shortcuts or batch files</h2>
<p>If .py is associated with an installed Python, you can just double-click ApplyRE.py to run it, but the console may appear and disappear too quickly to read its output (or failure!). And to pass parameters, you'd need to first do one of the following.
(a) Right-click and create a shortcut. Right-click the shortcut to edit properties and append parameters to Target.
(b) Create a batch file--a plain text file with a distinct name such as ApplyRErun.bat. This option is probably better because you can ask it to pause so you can see the output. Here is a sample BAT file's contents, written to be located and run from c:\some files .</p>
<pre><code>python "d:\my scripts\ApplyRE.py" "some lexicon.txt" "some lexicon OUT.txt" -o
pause
</code></pre>
<h2>Advanced: appending to PYTHONPATH</h2>
<p>This usually isn't necessary, but one other environment variable that may be relevant is PYTHONPATH. If we were to append d:\my scripts to that variable, then other Python scripts in other locations could make use of those via import statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to put the python path in the <code>PATH</code> variable.</p>
<p>In the System Variables section, you should have User Variables and System Variables. Search for the <code>PATH</code> variable and edit its value, adding at the end <code>;C:\python27</code>.</p>
<p>The <code>;</code> is to tell the variable to add a new path to this value, and the rest, is just to tell which path that is.</p>
<p>On the other hand, you can use <code>;%python%</code> to add the variable you created.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python comes with a script that takes care of setting up the windows path file for you.</p>
<p>After installation, open command prompt</p>
<p><code>cmd</code></p>
<p>Go to the directory you installed Python in</p>
<p><code>cd C:\Python27</code></p>
<p>Run python and the win_add2path.py script in Tools\Scripts</p>
<p><code>python.exe Tools\Scripts\win_add2path.py</code></p>
<p>Now you can use <code>python</code> as a command anywhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't add any variables to the System Variables.  You take the existing 'Path' system variable, and modify it by adding a semi-colon after, then c:\Python27</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>Go to the Start Menu</p></li>
<li><p>Right Click "Computer"</p></li>
<li><p>Select "Properties"</p></li>
<li><p>A dialog should pop up with a link on the left called "Advanced system settings". Click it.</p></li>
<li><p>In the System Properties dialog, click the button called "Environment Variables".</p></li>
<li><p>In the Environment Variables dialog look for "Path" under the System Variables window.</p></li>
<li><p>Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.</p></li>
<li><p>Click Ok and close the dialogs.</p></li>
<li><p>Now open up a new command prompt and type "python" or if it says error type "py" instead of "python"</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>first make sure u enter the path environmental variable</p>
<p>C:\ path %path%;C:\Python27    press Enter </p>
<p>C:\Python27&gt;python file_name   press Enter</p>
</div>
<div class="post-text" itemprop="text">
<p>So after 30 min of R&amp;D i realized that after setup the PATH at environment variable</p>
<p>i.e.</p>
<p>" C:\Python/27; " </p>
<p>just restart</p>
<p>now open cmd :</p>
<p>C:&gt; cd Python27
C:\ Python27&gt; python.exe</p>
<p><strong>USE python.exe with extension</strong></p>
<p>alternative option is :</p>
<p>if the software is installed properly directly run Python program, your command line screen will automatically appear without cmd.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just want to mention, when you do:</p>
<pre><code>cd C:\Python27
python Tools\Scripts\win_add2path.py
</code></pre>
<p>The PATH variable in "<strong>user variables for administrator</strong>" is changed.</p>
<p>But you can also follow the others' answer to open: </p>
<p>System -&gt; advanced system settings -&gt; advanced -&gt; Environment Variables, </p>
<p>and modify/add the variable Path in "<strong>System Variables</strong>", add <code>;C:\Python27</code> at the end of it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Even after going through many posts, it took several hours to figure out the problem. Here is the detailed approach written in simple language to run python via command line in windows.<br/></p>
<p><strong>1. Download executable file from <a href="https://www.python.org/downloads/windows/" rel="nofollow noreferrer">python.org</a></strong><br/>
Choose the latest version and download Windows-executable installer. Execute the downloaded file and let installation complete.<br/></p>
<p><strong>2. Ensure the file is downloaded in some administrator folder</strong><br/></p>
<ol>
<li>Search file location of Python application.</li>
<li>Right click on the .exe file and navigate to its properties. Check if it is of the form, "C:\Users....". 
If NO, you are good to go and jump to step 3. Otherwise, clone the Python37 or whatever version you downloaded to one of these locations, "C:\", "C:\Program Files", "C:\Program Files (x86)".
<br/></li>
</ol>
<p><strong>3. Update the system PATH variable</strong>
This is the most crucial step and there are two ways to do this:-
(Follow the second one preferably)</p>
<p><em>1. MANUALLY</em><br/>
     - Search for 'Edit the system Environment Variables' in the search bar.(WINDOWS 10)<br/>
    - In the System Properties dialog, navigate to "Environment Variables".<br/>
    - In the Environment Variables dialog look for "Path" under the System Variables window. (# Ensure to click on Path under bottom window named System Variables and not under user variables)<br/>
   - Edit the Path Variable by adding location of Python37/ PythonXX folder. I added following line:-<br/>
" ;C:\Program Files (x86)\Python37;C:\Program Files (x86)\Python37\Scripts "<br/>
 - Click Ok and close the dialogs.<br/></p>
<p><em>2. SCRIPTED</em> <br/>
- Open the command prompt and navigate to Python37/XX folder using cd command.<br/>
- Write the following statement:-<br/>
"python.exe Tools\Scripts\win_add2path.py"</p>
<p>You can now use python in the command prompt:)<br/>
<em>1. Using Shell</em><br/>
Type python in cmd and use it.<br/>
<em>2. Executing a .py file</em><br/>
Type python filename.py to execute it.<br/></p>
</div>
<div class="post-text" itemprop="text">
<p>in powershell enter the following: </p>
<pre><code>[Environment]::SetEnvironmentVariable("Path", "$env:Path;C:\Python27", "User")
</code></pre>
<p>close and open the powershell and try again. this should solve your problem. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to edit the environment variable named <code>PATH</code>, and add <code>;c:\python27</code> to the end of that. The semicolon separates one pathname from another (you will already have several things in your <code>PATH</code>).</p>
<p>Alternately, you can just type</p>
<pre><code>c:\python27\python
</code></pre>
<p>at the command prompt without having to modify any environment variables at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows you use <code>C:\Python27\python.exe</code> instead of <code>python</code>.</p>
<p>If you add <code>C:\Python27</code> to your path, you can shorten it to just <code>python.exe</code>, but you do not need to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Modify the <code>PATH</code> variable too and append <code>;%python%</code> otherwise the executable can not be found.</p>
</div>
<div class="post-text" itemprop="text">
<p>First install the Python into your windows by using this <a href="http://www.python.org/getit/windows/" rel="nofollow">url</a>
and then add path variable as </p>
<pre><code>c:\python27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this PATH in Windows 7:</p>
<pre><code>C:\Python27;C:\Python27\Lib\site-packages\;C:\Python27\Scripts\;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I also found the same problem even though i've added the path in the environment variable. Finally, I put my "C:\Python27" in the FRONT part of the "PATH" in environment variable and after restarting the cmd, it works!!! 
I hope this can help.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Windows 10 &amp; Python 3.5.1 users:</p>
<p>While installing Python on Windows 10, please don't forget to check the "Add to cmd prompt" option before hitting the "Install". This would help in easily access python from cmd.</p>
<p>If the option was not checked, then please use Set Path in cmd to see if it is available as executables or not. If not, Navigate to Start &gt;&gt; Control Panel &gt;&gt; System and Security &gt;&gt; System &gt;&gt; Advanced System Settings &gt;&gt; Advanced &gt;&gt; Environment Variables.. &gt;&gt; Select PATH from System Variables and Edit it. Then copy "C:\Python35\cmd" in the new line. After this please add .PY to PATHEXT in the same procedure.</p>
<p>Also please check if Start &gt;&gt; Control Panel &gt;&gt; System and Security &gt;&gt; System &gt;&gt; Advanced System Settings &gt;&gt; Advanced &gt;&gt; Environment Variables.. &gt;&gt; User variables from Username &gt;&gt; PATH is containing these two lines - "C:\Users\Username\AppData\Local\Programs\Python\Python35-32\Scripts\" &amp; "C:\Users\Username\AppData\Local\Programs\Python\Python35-32\". Else please add them manually.</p>
<p>Ref: <a href="https://docs.python.org/3/using/windows.html" rel="nofollow">https://docs.python.org/3/using/windows.html</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Goto the Start Menu
Right Click "Computer"
Select "Properties"
A dialog should pop up with a link on the left called "Advanced system settings". Click it.
In the System Properties dialog, click the button called "Environment Variables".
In the Environment Variables dialog look for "Path" under the System Variables window.
Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.
Click Ok and close the dialogs.
Now open up a new command prompt and type "python"</p>
<p>If still the problem persists then type "py" instead of "python" in command prompt. might help!!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>press start button then type <code>cmd</code>. - Note you will need to run the command prompt as 'Adminstrator'.</p>
<p>write <code>setx -m path "%path%;C:\Python27"</code> then press enter.</p>
<p>[here <code>-m</code> for giving accessing permission to all users and in <code>Python27</code> 27 is version 2.7]</p>
<p><code>%path%;</code> will prevent the original value from destroying. C:\Python27 will be appended to the current <code>Path</code> value.</p>
<p>that's it,you are done.</p>
</div>
<div class="post-text" itemprop="text">
<p>For windows 8, just type "py".</p>
</div>
<span class="comment-copy">Thanks for that, was about to throw in my Python chops before I even earned them. I'm sure people can figure this out but if not remember if you download Python 3.4 your path variable will be C:\Python34 instead of 27!</span>
<span class="comment-copy">Another potential issue to check for those who follow the above, and still have an issue, I have seen a mysterious double quote in the path (after C:\Program Files (x86)\QuickTime\QTSystem";) that would not let the python command work.  removing it did the trick.</span>
<span class="comment-copy">Had to open a new session..Thanks</span>
<span class="comment-copy">You mentioned "Do not forget the trailing \". May I ask why it is important?</span>
<span class="comment-copy">@MBA: I had a slash in the answer and somebody else added the note later on. It was just for clarity, it's not necessary at all. I've cleaned up the answer somewhat. Thanks for pointing this out!</span>
<span class="comment-copy">I vote you because I had a problem. I added correctly C:\Python27. With an ; after the previouse variable. But I didn't notice that I wrote an space after the ; . Then the command prompt didn't work. Thank you I dind't notice that. CORRECT: ;C:\Python27 ||  WRONG: ; C:\Python27</span>
<span class="comment-copy">Your answer explains why .py files run magically on Windows 7 without a python prefix and without a shebang line. Thanks.</span>
<span class="comment-copy">On Windows 10 cmd would still throw the same error after running this script (<code>'python' is not recognized ...</code>). After inspecting the PATH I noticed that the relevant lines had indeed been added, but only to the "user variables", not to "system variables". I copied them manually to "system variables" and then it worked.</span>
<span class="comment-copy">@Egalth did you close and open a fresh terminal after running the add script before testing python? Usually adding this to the PATH under user variables is fine but requires a fresh command prompt to load that updated PATH</span>
<span class="comment-copy">Good point to restart. I honestly don't remember if I tried that before copying manually.</span>
<span class="comment-copy">Perhaps you could add some explanation as to why OP might have experienced this problem/ why your answer fixes it?</span>
<span class="comment-copy">This is the only working solution. All other modified some other user's env variable Path. Thanks, man.</span>
<span class="comment-copy">This deleted all my previous path variables... now even i am not able run anything on my computer</span>
