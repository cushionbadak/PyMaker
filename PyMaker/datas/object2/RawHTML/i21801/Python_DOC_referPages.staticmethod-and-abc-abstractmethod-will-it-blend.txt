<div class="post-text" itemprop="text">
<p>In my Python app I want to make a method that is both a <code>staticmethod</code> and an <a href="http://docs.python.org/library/abc.html#abc.abstractmethod" rel="noreferrer"><code>abc.abstractmethod</code></a>. How do I do this?</p>
<p>I tried applying both decorators, but it doesn't work. If I do this:</p>
<pre><code>import abc

class C(object):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    @staticmethod    
    def my_function(): pass
</code></pre>
<p>I get an exception*, and if I do this:</p>
<pre><code>class C(object):
    __metaclass__ = abc.ABCMeta

    @staticmethod    
    @abc.abstractmethod
    def my_function(): pass
</code></pre>
<p>The abstract method is not enforced.</p>
<p>How can I make an abstract static method?</p>
<p>*The exception:</p>
<pre><code>File "c:\Python26\Lib\abc.py", line 29, in abstractmethod
 funcobj.__isabstractmethod__ = True
AttributeError: 'staticmethod' object has no attribute '__isabstractmethod__'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class abstractstatic(staticmethod):
    __slots__ = ()
    def __init__(self, function):
        super(abstractstatic, self).__init__(function)
        function.__isabstractmethod__ = True
    __isabstractmethod__ = True

class A(object):
    __metaclass__ = abc.ABCMeta
    @abstractstatic
    def test():
        print 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting with <strong>Python 3.3</strong>, it is <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod">possible to combine</a> <code>@staticmethod</code> and <code>@abstractmethod</code>, so none of the other suggestions are necessary anymore:</p>
<pre><code>@staticmethod
@abstractmethod
def my_abstract_staticmethod(...):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will do it:</p>
<pre><code>  &gt;&gt;&gt; import abc
  &gt;&gt;&gt; abstractstaticmethod = abc.abstractmethod
  &gt;&gt;&gt;
  &gt;&gt;&gt; class A(object):
  ...     __metaclass__ = abc.ABCMeta
  ...     @abstractstaticmethod
  ...     def themethod():
  ...          pass
  ... 
  &gt;&gt;&gt; a = A()
  &gt;&gt;&gt; Traceback (most recent call last):
  File "asm.py", line 16, in &lt;module&gt;
    a = A()
  TypeError: Can't instantiate abstract class A with abstract methods test
</code></pre>
<p>You go "Eh? It just renames @abstractmethod", and this is completely correct. Because any subclass of the above will have to include the @staticmethod decorator anyway. You have no need of it here, except as documentation when reading the code. A subclass would have to look like this:</p>
<pre><code>  &gt;&gt;&gt; class B(A):
  ...     @staticmethod
  ...     def themethod():
  ...         print "Do whatevs"
</code></pre>
<p>To have a function that would enforce you to make this method a static method you would have to subclass ABCmeta to check for that and enforce it. That's a lot of work for no real return. (If somebody forgets the @staticmethod decorator they will get a clear error anyway, it just won't mention static methods. </p>
<p>So in fact this works just as well:</p>
<pre><code>  &gt;&gt;&gt; import abc
  &gt;&gt;&gt;
  &gt;&gt;&gt; class A(object):
  ...     __metaclass__ = abc.ABCMeta
  ...     @abc.abstractmethod
  ...     def themethod():
  ...         """Subclasses must implement this as a @staticmethod"""
  ...          pass
</code></pre>
<p>Update - Another way to explain it:</p>
<p>That a method is static controls how it is called.
An abstract method is never called.
And abstract static method is therefore a pretty pointless concept, except for documentation purposes.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is currently not possible in Python 2.X, which will only enforce the method to be abstract or static, but not both.</p>
<p>In Python 3.2+, the new decorators<code>abc.abstractclassmethod</code> and <code>abc.abstractstaticmethod</code> were added to combine their enforcement of being abstract and static or abstract and a class method.</p>
<p>See <a href="http://bugs.python.org/issue5867" rel="nofollow">Python Issue 5867</a></p>
</div>
<span class="comment-copy">Please update your accepted answer.</span>
<span class="comment-copy">Well played, sir or madam :-) You left out <code>import abc</code> at the top; as well as a subclass that shows instantiation of A. (e.g., <code>class B(A):\n @staticmethod\n def test():\n print 10\n</code>)</span>
<span class="comment-copy">I updated the code to work properly with subclassing. A.test should also have the <code>__isabstractmethod__</code> attribute.</span>
<span class="comment-copy">Should <code>abstractstatic</code> be added upstream to <code>abc.py</code>?</span>
<span class="comment-copy">abstractstaticmethod Deprecated since version 3.3: It is now possible to use staticmethod with abstractmethod(), making this decorator redundant. <a href="https://docs.python.org/3/library/abc.html#abc.abstractstaticmethod" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy">@iraklikhitarishvili Still, that doesn't enforce the subclass's method to be static! You have to duplicate the staticmethod decorator... Is there no way around that?</span>
<span class="comment-copy">Note that you have to put <code>@staticmethod</code> as first, or you'll get <code>AttributeError: attribute '__isabstractmethod__' of 'staticmethod' objects is not writable</code></span>
<span class="comment-copy">Same for <code>@property</code></span>
<span class="comment-copy">It'd be really helpful if this was the accepted answer!</span>
<span class="comment-copy">While new in Python 3.2, <code>abstractclassmethod</code> and <code>abstractstaticmethod</code> were rapidly deprecated in Python 3.3, as well as <code>abstractproperty</code>. <a href="http://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">docs.python.org/3/library/abc.html</a></span>
<span class="comment-copy">FYI: <a href="http://bugs.python.org/issue11610" rel="nofollow noreferrer">bugs.python.org/issue11610</a>  describes the deprication, and new way to do it...</span>
