<div class="post-text" itemprop="text">
<p>Python - what is difference in os.popen and subprocess.Popen?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>os</code> process functionality is considered obsolete. The <code>subprocess</code> module was introduced in Python 2.4 as a unified, more powerful replacement for several older modules and functions related to subprocesses. They are listed <a href="https://docs.python.org/2.7/library/subprocess.html#" rel="nofollow noreferrer">here</a>:</p>
<ul>
<li><code>os.system</code></li>
<li><code>os.spawn*</code></li>
<li><code>os.popen*</code></li>
<li><code>popen2.*</code></li>
<li><code>commands.*</code></li>
</ul>
<p><code>os.popen</code> was deprecated in Python 2.6 (but, interestingly, it is not deprecated in Python 3, where <a href="https://docs.python.org/3/library/os.html#os.popen" rel="nofollow noreferrer">it is implemented in terms of <code>subprocess.Popen</code></a>). There is a paragraph in the documentation on <a href="http://docs.python.org/2.7/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3" rel="nofollow noreferrer">how to replace it with <code>subprocess.Popen</code></a>.</p>
</div>
<span class="comment-copy">// , If the os process functionality is increasingly obsolete, then what new techniques from subprocess replace methods like <code>os.getcwd()</code>, <code>os.chdir()</code>, and <code>os.path</code>??</span>
<span class="comment-copy">@NathanBasanese These are not process functions. The <code>subprocess</code> module is only about subprocesses, it does not replace the whole <code>os</code> module.</span>
<span class="comment-copy">@techtonik That was true, I added some info.</span>
<span class="comment-copy">Probably the reason why <code>os.popen</code> is not deprecated in Python 3 is the performance - <a href="http://essays.ajs.com/2011/02/python-subprocess-vs-ospopen-overhead.html" rel="nofollow noreferrer">essays.ajs.com/2011/02/â€¦</a></span>
<span class="comment-copy">@anatolytechtonik In Python 3, it is implemented using <code>subprocess.Popen</code>, so it's likely slower and definitely less powerful.</span>
