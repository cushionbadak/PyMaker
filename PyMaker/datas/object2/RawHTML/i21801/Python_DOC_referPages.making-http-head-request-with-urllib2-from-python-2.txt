<div class="post-text" itemprop="text">
<p>I'm trying to do a HEAD request of a page using Python 2.</p>
<p>I am trying</p>
<pre><code>import misc_urllib2
.....
opender = urllib2.build_opener([misc_urllib2.MyHTTPRedirectHandler(), misc_urllib2.HeadRequest()])
</code></pre>
<p>with <code>misc_urllib2.py</code> containing</p>
<pre><code>class HeadRequest(urllib2.Request):
    def get_method(self):
        return "HEAD"


class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def __init__ (self):
        self.redirects = []

    def http_error_301(self, req, fp, code, msg, headers):  
        result = urllib2.HTTPRedirectHandler.http_error_301(
                self, req, fp, code, msg, headers)
        result.redirect_code = code
        return result

    http_error_302 = http_error_303 = http_error_307 = http_error_301
</code></pre>
<p>But I am getting</p>
<pre><code>TypeError: __init__() takes at least 2 arguments (1 given)
</code></pre>
<p>If I just do</p>
<pre><code>opender = urllib2.build_opener(misc_urllib2.MyHTTPRedirectHandler())
</code></pre>
<p>then it works fine</p>
</div>
<div class="post-text" itemprop="text">
<p>This works just fine:</p>
<pre><code>import urllib2
request = urllib2.Request('http://localhost:8080')
request.get_method = lambda : 'HEAD'

response = urllib2.urlopen(request)
print response.info()
</code></pre>
<p>Tested with quick and dirty HTTPd hacked in python:</p>
<pre><code>Server: BaseHTTP/0.3 Python/2.6.6
Date: Sun, 12 Dec 2010 11:52:33 GMT
Content-type: text/html
X-REQUEST_METHOD: HEAD
</code></pre>
<p>I've added a custom header field X-REQUEST_METHOD to show it works :)</p>
<p>Here is HTTPd log:</p>
<pre><code>Sun Dec 12 12:52:28 2010 Server Starts - localhost:8080
localhost.localdomain - - [12/Dec/2010 12:52:33] "HEAD / HTTP/1.1" 200 -
</code></pre>
<p>Edit: there is also <a href="https://github.com/httplib2/httplib2" rel="noreferrer">httplib2</a></p>
<pre><code>import httplib2
h = httplib2.Http()
resp = h.request("http://www.google.com", 'HEAD')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try httplib</p>
<pre><code>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.google.com")
&gt;&gt;&gt; conn.request("HEAD", "/index.html")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
200 OK
&gt;&gt;&gt; print res.getheaders()
[('content-length', '0'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Sat, 20 Sep 2008 06:43:36 GMT'), ('content-type', 'text/html; charset=ISO-8859-1')]
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/107405/how-do-you-send-a-head-http-request-in-python">How do you send a HEAD HTTP request in Python 2?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem lies with your class HeadRequest, which inherits from urllib2.Request. According to doc, <code>urllib2.Request.__init__</code> signature is</p>
<pre><code> __init__(self, url, data=None, headers={}, origin_req_host=None, unverifiable=False) 
</code></pre>
<p>so you must pass an url argument to it. In your second try, you just do not use HeadRequest, this is why it works.</p>
</div>
<div class="post-text" itemprop="text">
<p>you shoud not add <code>HeadRequest</code> to <code>build_opener</code> or <code>add_handler</code> it should be called like this</p>
<pre><code>opener = urllib2.build_opener(MyHTTPRedirectHandler)
response = opener.open(HeadRequest(url))
print response.getheaders()
</code></pre>
</div>
<span class="comment-copy">Python3 (3.3+) added support for the <code>method</code> keyword argument to the <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.method" rel="nofollow noreferrer"><code>Request</code> initializer</a> - as an alternative to bypass the need for the <code>lambda</code></span>
<span class="comment-copy">Does that allow you to set other request objs? See my OP, the MyHTTPRedirectHandler</span>
<span class="comment-copy">We ran into a bug using this approach.  Later someone wanted to check an   HTTPS url, for which you have to use a different method: <code>httplib.HTTPSConnection()</code></span>
