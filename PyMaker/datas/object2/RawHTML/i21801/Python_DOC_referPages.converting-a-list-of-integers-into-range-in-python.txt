<div class="post-text" itemprop="text">
<p>Is there something existing in python that can convert an increasing list of integers into a range list</p>
<p>E.g. given the set {0, 1, 2, 3, 4, 7, 8, 9, 11} I want to get { {0,4}, {7,9}, {11,11} }. </p>
<p>I can write a program to do this, but want to know if there is an inbuilt function in python</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> produces a concise but tricky implementation:</p>
<pre><code>import itertools

def ranges(i):
    for a, b in itertools.groupby(enumerate(i), lambda (x, y): y - x):
        b = list(b)
        yield b[0][1], b[-1][1]

print list(ranges([0, 1, 2, 3, 4, 7, 8, 9, 11]))
</code></pre>
<p>Output:</p>
<pre><code>[(0, 4), (7, 9), (11, 11)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a> with a <a href="http://docs.python.org/reference/expressions.html#generator-expressions" rel="noreferrer">generator expression</a> and a combination of <a href="http://docs.python.org/library/functions.html#enumerate" rel="noreferrer">enumerate()</a> and <a href="http://docs.python.org/library/itertools.html#itertools.groupby" rel="noreferrer">itertools.groupby()</a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [0, 1, 2, 3, 4, 7, 8, 9, 11]
&gt;&gt;&gt; [[t[0][1], t[-1][1]] for t in
... (tuple(g[1]) for g in itertools.groupby(enumerate(l), lambda (i, x): i - x))]
[[0, 4], [7, 9], [11, 11]]
</code></pre>
<hr/>
<p>First, <code>enumerate()</code> will build tuples from the list items and their respective index:</p>
<pre><code>&gt;&gt;&gt; [t for t in enumerate(l)]
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 7), (6, 8), (7, 9), (8, 11)]
</code></pre>
<p>Then <code>groupby()</code> will group those tuples using the difference between their index and their value (which will be equal for consecutive values):</p>
<pre><code>&gt;&gt;&gt; [tuple(g[1]) for g in itertools.groupby(enumerate(l), lambda (i, x): i - x)]
[((0, 0), (1, 1), (2, 2), (3, 3), (4, 4)), ((5, 7), (6, 8), (7, 9)), ((8, 11),)]
</code></pre>
<p>From there, we only need to build lists from the values of the first and last tuples of each group (which will be the same if the group only contains one item).</p>
<p>You can also use <code>[(t[0][1], t[-1][1]) ...]</code> to build a list of range tuples instead of nested lists, or even <code>((t[0][1], t[-1][1]) ...)</code> to turn the whole expression into a iterable <code>generator</code> that will lazily build the range tuples on the fly.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an improvement over the very elegant <a href="https://stackoverflow.com/a/4629241/1201614">@juanchopanza answer</a>. This one covers <strong>non-unique</strong> and <strong>non-sorted</strong> input and is <strong>python3</strong> compatible too:</p>
<pre><code>import itertools

def to_ranges(iterable):
    iterable = sorted(set(iterable))
    for key, group in itertools.groupby(enumerate(iterable),
                                        lambda t: t[1] - t[0]):
        group = list(group)
        yield group[0][1], group[-1][1]
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; x
[44, 45, 2, 56, 23, 11, 3, 4, 7, 9, 1, 2, 2, 11, 12, 13, 45]

&gt;&gt;&gt; print( list(to_ranges(x))) 
[(1, 4), (7, 7), (9, 9), (11, 13), (23, 23), (44, 45), (56, 56)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This generator:</p>
<pre><code>def ranges(p):
    q = sorted(p)
    i = 0
    for j in xrange(1,len(q)):
        if q[j] &gt; 1+q[j-1]:
            yield (q[i],q[j-1])
            i = j
    yield (q[i], q[-1])

sample = [0, 1, 2, 3, 4, 7, 8, 9, 11]
print list(ranges(sample))
print list(ranges(reversed(sample)))
print list(ranges([1]))
print list(ranges([2,3,4]))
print list(ranges([0,2,3,4]))
print list(ranges(5*[1]))
</code></pre>
<p>Produces these results:</p>
<pre><code>[(0, 4), (7, 9), (11, 11)]
[(0, 4), (7, 9), (11, 11)]
[(1, 1)]
[(2, 4)]
[(0, 0), (2, 4)]
[(1, 1)]
</code></pre>
<p>Note that runs of repeated numbers get <em>compressed</em>. I don't know if that's what you want. If not, change the <code>&gt;</code> to a <code>!=</code>.</p>
<p>I understand your question. I looked into <code>itertools</code> and tried to think of a solution that could be done in a couple of lines of Python, which would have qualified as <em>"almost a built in"</em>, but I couldn't come up with anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Generating range pairs:</p>
<pre><code>def ranges(lst):
    s = e = None
    r = []
    for i in sorted(lst):
        if s is None:
            s = e = i
        elif i == e or i == e + 1:
            e = i
        else:
            r.append((s, e))
            s = e = i
    if s is not None:
        r.append((s, e))
    return r
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 5, 6, 7, 12, 15, 16, 17, 18, 30]
&gt;&gt;&gt; print repr(ranges(lst))
[(1, 1), (5, 7), (12, 12), (15, 18), (30, 30)]
</code></pre>
<p>As a generator:</p>
<pre><code>def gen_ranges(lst):
    s = e = None
    for i in sorted(lst):
        if s is None:
            s = e = i
        elif i == e or i == e + 1:
            e = i
        else:
            yield (s, e)
            s = e = i
    if s is not None:
        yield (s, e)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 5, 6, 7, 12, 15, 16, 17, 18, 30]
&gt;&gt;&gt; print repr(','.join(['%d' % s if s == e else '%d-%d' % (s, e) for (s, e) in gen_ranges(lst)]))
'1,5-7,12,15-18,30'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nothing built-in, or in any libraries that I know of.  Not very helpful, I know, but I've never come across anything like what you want.</p>
<p>Here are some ideas for your program atleast (in C++, but it can give you some other ideas):</p>
<p><a href="https://stackoverflow.com/questions/2305767/converting-sets-of-integers-into-ranges">Converting sets of integers into ranges</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In the case there is no such feature in python, here is an implementation</p>
<pre><code>p = []
last = -2                                                            
start = -1

for item in list:
    if item != last+1:                        
        if start != -1:
            p.append([start, last])
        start = item
    last = item

p.append([start, last])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Put it shorter:</p>
<pre><code>ranges=lambda l:map(lambda x:(x[0][1],x[-1][1]),map(lambda (x,y):list(y),itertools.groupby(enumerate(l),lambda (x,y):x-y)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the other answers are hard to understand, and probably inefficient. Hope this is easier and faster.</p>
<pre><code>def ranges(ints):
    ints = sorted(set(ints))
    range_start = previous_number = ints[0]
    for number in ints[1:]:
        if number == previous_number + 1:
            previous_number = number
        else:
            yield range_start, previous_number
            range_start = previous_number = number
    yield range_start, previous_number
</code></pre>
</div>
<span class="comment-copy">Well, I can say with confidence that I don't know of such a function. It is a lot harder to say with confidence that something I'm not aware of doesn't exist....</span>
<span class="comment-copy">Almost the same question was asked and answered in <a href="http://stackoverflow.com/questions/3429510/pythonic-way-to-convert-a-list-of-integers-into-a-string-of-comma-separated-range/3430231#3430231" title="pythonic way to convert a list of integers into a string of comma separated range">stackoverflow.com/questions/3429510/â€¦</a></span>
<span class="comment-copy"><code>&gt;&gt;&gt; import this</code></span>
<span class="comment-copy">This is really useful, I'm wondering if you could explain how this method works so I can understand the functionality.  this would be great if possible.</span>
<span class="comment-copy">To handle non-unique and non-sorted input surround 'i' with 'sorted(set(i))', see: <a href="https://stackoverflow.com/a/43091576/1201614">stackoverflow.com/a/43091576/1201614</a></span>
<span class="comment-copy">This recipe is also available in <code>more_itertools.consecutive_groups</code>.  See demonstration <a href="https://stackoverflow.com/a/47642650/4531270">here</a>.</span>
<span class="comment-copy">Shorter is no improvement, in my opinion.</span>
