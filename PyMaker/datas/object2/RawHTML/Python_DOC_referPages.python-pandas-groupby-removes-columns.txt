<div class="post-text" itemprop="text">
<pre><code>data_c["dropoff_district"] = "default value"      
data_c["distance"] = "default value"      #Formed a new column named distance for geocoder
data_c["time_of_day"] = "default value"      #Formed a new column named time of the day for timestamps
</code></pre>
<p>So I create these columns at the start of the project for plotting and data manipulaton.After I edited and filled these columns with certain values, I wanted to perform a groupby operation on data_c.</p>
<pre><code>avg_d = data_c.groupby(by = 'distance').sum().reset_index()
</code></pre>
<p>Although when I perform a groupby on data_c, I somehow lose my 'time_of_day' and 'dropoff_district' columns in avg_d. How can I solve this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that Pandas doesn't know how to add date/time objects together. Thus, when you tell Pandas to groupby and then sum, it throws out the columns it doesn't know what to do with. Example,</p>
<pre><code>df = pd.DataFrame([['2019-01-01', 2, 3], ['2019-02-02', 2, 4], ['2019-02-03', 3, 5]], 
             columns=['day', 'distance', 'duration'])
df.day = pd.to_datetime(df.day)
</code></pre>
<p>If I just run your query, I'd get,</p>
<pre><code>&gt;&gt;&gt; df.groupby('distance').sum()
          duration
distance          
2                7
3                5
</code></pre>
<p>You can fix this by telling Pandas you want to do something different with those columns---for example, take the first value,</p>
<pre><code>df.groupby('distance').agg({
    'duration': 'sum',
    'day': 'first'
})
</code></pre>
<p>which brings them back,</p>
<pre><code>          duration        day
distance                     
2                7 2019-01-01
3                5 2019-02-03
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Groupby does not remove your columns. The <code>sum()</code> call does. If those columns are not numeric, you will not retain them after <code>sum()</code>.</p>
<p>So how do you like to retain columns 'time_of_day' and 'dropoff_district'? Assume you still want to keep them when they are distinct, put them into <code>groupby</code>:</p>
<pre><code>data_c.groupby(['distance','time_of_day','dropoff_district']).sum().reset_index()
</code></pre>
<p>otherwise, you will have multiple different 'time_of_day' for the same 'distance'. You need to massage your data first.</p>
</div>
<span class="comment-copy">Try <code>data_c.groupby(by = 'distance').sum().reset_index()</code>, without assigning back to <code>avg_d</code> and then look at <code>data_c</code></span>
<span class="comment-copy">That isn't the issue. Pandas doesn't just "throw out" columns like that and do it silently.</span>
