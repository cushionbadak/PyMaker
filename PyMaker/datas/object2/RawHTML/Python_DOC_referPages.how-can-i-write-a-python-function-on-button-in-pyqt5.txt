<div class="post-text" itemprop="text">
<p>IÂ´m new in this...  I would call function "funcion" when I click "btn_brow_3"  How could I do that?
Somebody can help me?</p>
<p>Error
TYPE ERROR connect() slot argument should be a callable  or a signal not "nonetype"</p>
<p>Regards
Maxi</p>
<pre><code>import atexit
import sys
from PyQt4 import QtGui
import os                           # Libreria para manejar directorios del sistema operativo

def funcion(a):
    print "Hola mundo" + str(a)

class Example(QtGui.QMainWindow):

    def __init__(self):
        super(Example, self).__init__()

        self.initUI()

    def initUI(self):               

        exitAction = QtGui.QAction(QtGui.QIcon('c:/prueba gui/resource/logo.png'), 'Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.triggered.connect(QtGui.qApp.quit)

        btn_brow_1 = QtGui.QPushButton('Browser...', self)
        btn_brow_1.resize(btn_brow_1.sizeHint())
        btn_brow_1.move(300, 50)
        btn_brow_1.clicked.connect(self.showDialog_points)

        btn_brow_2 = QtGui.QPushButton('Dir browser', self)
        btn_brow_2.resize(btn_brow_2.sizeHint())
        btn_brow_2.move(300, 80)
        btn_brow_2.clicked.connect(self.showDialog_indir_stl)

        btn_brow_3 = QtGui.QPushButton('Dir browser', self)
        btn_brow_3.resize(btn_brow_3.sizeHint())
        btn_brow_3.move(300, 110)
        btn_brow_3.clicked.connect(self.showDialog_outdir_stl)




        btn_brow_4 = QtGui.QPushButton('Crear soportes', self)
        btn_brow_4.setGeometry(20, 145, 250, 25)
        #btn_brow_4.clicked.connect(support.main(fname_points, self.fname_stl_indir, self.fname_stl_outdir))
        btn_brow_4.clicked.connect(funcion(12))  # HERE IS THE PROBLEM!

        self.le1 = QtGui.QLineEdit(self)
        self.le1.setGeometry(20, 50, 250,21)

        self.le2 = QtGui.QLineEdit(self)
        self.le2.setGeometry(20, 80, 250,21)

        self.le3 = QtGui.QLineEdit(self)
        self.le3.setGeometry(20, 110, 250,21)

        self.statusBar().showMessage("Ready")

        self.toolbar = self.addToolBar('Exit')
        self.toolbar.addAction(exitAction)

        self.setGeometry(300, 300, 400, 200)
        self.setWindowTitle('Support from points generator')    
        self.show()



    def showDialog_points(self):

        self.fname_points = QtGui.QFileDialog.getOpenFileName(self, 'Open points file', '/home')
        self.statusBar().showMessage(str(self.fname_points))
        self.le1.setText(str(self.fname_points))
        self.fname_points = str(self.le1.text())
        print fname_points


    def showDialog_indir_stl(self):

        self.fname_stl_indir = QtGui.QFileDialog.getExistingDirectory(self, 'Select STL INPUT directory', '/home')
        self.statusBar().showMessage(str(self.fname_stl_indir))
        self.le2.setText(str(self.fname_stl_indir))
        self.fname_stl_indir = str(self.le2.text())
        print fname_stl_indir 

    def showDialog_outdir_stl(self):

        self.fname_stl_outdir = QtGui.QFileDialog.getExistingDirectory(self, 'Select STL OUTPUT directory', '/home')
        self.statusBar().showMessage(str(self.fname_stl_outdir))
        self.le3.setText(str(self.fname_stl_outdir))
        self.fname_stl_outdir = str(self.le3.text())
        print fname_stl_outdir 

def main():

    app = QtGui.QApplication(sys.argv)
    ex = Example()


    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Qt signals can have arguments that will be passed to the slots they are connected to; an example would be the new value as an argument in a signal <code>changed</code>. Therefore, while you <em>can</em> have a slot with arguments, you cannot define the actual values of those when connecting the signal to the slot, as they will be defined when emitting signal.</p>
<p>For defining an argument at connect time, you can use an additional function which does nothing but calling the original function with the defined argument:</p>
<pre class="lang-py prettyprint-override"><code>def wrapper():
    funcion(12)

def funcion(a):
    print "Hola mundo" + str(a)

[...]
btn_brow_4.clicked.connect(wrapper)
</code></pre>
<p>As a side note: <code>wrapper</code> does not use braces here: the function is not called, but simply passed as an argument to the function <code>connect</code>. In your code, you <em>called</em> your function <code>funcion</code>, which returns nothing (=<code>None</code>), which was passed to <code>connect</code> in your original code, resulting in the error message you received.</p>
<p>To make that a bit cleaner, you can also use an anonymous function:</p>
<pre class="lang-py prettyprint-override"><code>btn_brow_4.clicked.connect(lambda: funcion(12))
</code></pre>
<p>Note that Qt also provides ways of doing this, but (at least for me) the Python variants are easier to read.</p>
<p><strong>Edit:</strong> Some more information: <a href="http://eli.thegreenplace.net/2011/04/25/passing-extra-arguments-to-pyqt-slot/" rel="noreferrer">http://eli.thegreenplace.net/2011/04/25/passing-extra-arguments-to-pyqt-slot/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use below method to access the same:</p>
<pre><code>self.connect(btn_brow_4,Qt.SIGNAL("clicked()"),self.callingFunction)

def callingFunction():
    function(12)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try This,</p>
<pre><code>def funcion(a):
 print "Hola mundo" + str(a)

[...]
btn_brow_4.clicked.connect(lambda: funcion(12))
</code></pre>
</div>
<span class="comment-copy">I'd suggest sticking with new-style signals/slots as used in the OP's code over the old-style variant. See <a href="http://pyqt.sourceforge.net/Docs/PyQt4/new_style_signals_slots.html" rel="nofollow noreferrer">pyqt.sourceforge.net/Docs/PyQt4/new_style_signals_slots.html</a></span>
