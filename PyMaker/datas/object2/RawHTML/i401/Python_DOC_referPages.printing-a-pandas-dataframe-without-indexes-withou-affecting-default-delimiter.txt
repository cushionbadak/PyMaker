<div class="post-text" itemprop="text">
<p>I am running a python script that generates multiple variables via iteration in multiple directories. After the script is finished, I want to perform some operations only on a few objects (dataframes, in this case) matching a specific pattern.</p>
<p>I can retrieve a list of the variables on which I want to perform the operations as follows:</p>
<pre><code>failed_runs_finder = re.compile(r'FAILEDRuns_') # I want to perform the operations on the dataframes which match this pattern.
list_dfs = list(filter(failed_runs_finder.findall, dir())) # this will get me the list with the names of the dataframes
</code></pre>
<p>Which will give me something like:</p>
<pre><code>['FAILEDRuns_0112',
 'FAILEDRuns_0121',
 'FAILEDRuns_0126',
 'FAILEDRuns_0129',
 'FAILEDRuns_0131',
 'FAILEDRuns_0134',
 'FAILEDRuns_0135',
 'FAILEDRuns_0137',
 'FAILEDRuns_0142',
 'FAILEDRuns_0153',
 'FAILEDRuns_0165',
 'FAILEDRuns_0171',
 'FAILEDRuns_0175']
</code></pre>
<p>I now want to iterate over all the <strong>objects</strong> (which are dataframes) in this list (and perform some simple operations, like getting the number of lines in each of them, with the <code>shape()</code> method). The problem here is that the elements in this list are <strong>strings</strong>, while I would like to access the objects themselves via their name in this list.</p>
<p>For example, if I do:</p>
<pre><code>for i in list_dfs:
    print(getattr(i, 'shape'))
</code></pre>
<p>I get:</p>
<pre><code>AttributeError: 'str' object has no attribute 'shape'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec()</a> function to get things done:</p>
<pre><code>import pandas as pd
failed_runs_finder = re.compile(r'FAILEDRuns_') # I want to perform the operations on the dataframes which match this pattern.
list_dfs = list(filter(failed_runs_finder.findall, dir())) 
for i in list_dfs:
    exec("if isinstance({}, pd.DataFrame): print(getattr({}, 'shape'))".format(i, i))
</code></pre>
<p>The <code>exec()</code> function will evaluate the string and execute it. The scope of the executed code will be same as running the code inline. Hence, we can use any imported modules, objects or functions etc that are available within the inline code's scope (in this case the <code>pd</code>).</p>
<p><strong>Warning:</strong> This might not be a good idea and it will be extremely inefficient. Moreover, there are some security risks of using exec() like this.</p>
<p>I would suggest you to look for an alternative approach. </p>
</div>
