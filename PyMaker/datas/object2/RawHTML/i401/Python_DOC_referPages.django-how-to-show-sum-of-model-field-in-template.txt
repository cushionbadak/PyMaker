<div class="post-text" itemprop="text">
<p>I have built the following model:</p>
<pre><code>class Fund(models.Model):
    name = models.CharField(max_length=30)
    gp = models.ForeignKey(GeneralPartner, on_delete = models.CASCADE)
    currency = models.CharField(max_length=3, default="")
    commitment = models.IntegerField(default=0)


    def __str__(self):
        return self.name

    @property
    def sum_commitment(self):
        return self.commitment
</code></pre>
<p>I would like to show the sum of all commitments in my template via a simple <code>{{ fund.sum_commitment }}</code> tag in my template. What does my return statement has to look like to achieve this goal? I tried things like <code>return self.sum(commitment)</code> in all varieties but simply can't find the right solution.</p>
<p>Many thanks for any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can do it like this using <a href="https://docs.djangoproject.com/en/2.1/topics/db/aggregation/" rel="nofollow noreferrer">Aggregate</a>:</p>
<pre><code>from django.db.models import Sum

@property
def sum_commitment(self):
    return self.__class__.objects.all().aggregate(sum_all=Sum('commitment')).get('sum_all')
</code></pre>
<h3>Update</h3>
<p>from comments, I am assuming you are using ListView, then you can simply add another variable to the <code>get_context_data</code> to add the sum of commitments. For example:</p>
<pre><code>class SomeListView(ListView):
    ...


    def get_context_data(self, **kwargs):
        context = super(SomeListView, self).get_context_data(**kwargs)
        context['commitment_sum'] = Fund.objects.all().aggregate(sum_all=Sum('commitment')).get('sum_all')
        return context

</code></pre>
<p>Then access the value in template by <code>{{ commitment_sum }}</code>.</p>
<p>Also, there is possibility that you need to reuse this code multiple times, then you can use a <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">class method</a>, instead of property method like this:</p>
<pre><code>@classmethod
def sum_commitment(cls):
    return cls.objects.all().aggregate(sum_all=Sum('commitment')).get('sum_all')
</code></pre>
<p>And use it in view like this:</p>
<pre><code>context['commitment_sum'] = Fund.sum_commitment()
</code></pre>
</div>
<span class="comment-copy"><code>commitment</code> is here a <i>single</i> integer, so I do not really understand what you aim to "sum up"?</span>
<span class="comment-copy">Do you want to calculate the sum of all Fund records in your DB?</span>
<span class="comment-copy">all my model entries for the commitment field, so if i have two Funds in my database, the first having a commitment = 10 and the second a commitment = 30, I would like to show the sum, in this case 40 in my template</span>
<span class="comment-copy">yes, exactly the sum of the commitment field for all Fund records</span>
<span class="comment-copy">Well, then it makes no sense for it to be a property. That's a thing that applies to a single instance of Fund, not to all Funds.</span>
<span class="comment-copy">I wonder if there us any advantage in makeing <code>sum_commitment</code> a property instead of just a normal method?</span>
<span class="comment-copy">as far as I know, In template, it won't make any difference.</span>
<span class="comment-copy">But as I said above, I don't think this should be a method on the model at all. A classmethod might make more sense, but the more appropriate place for something like this is on the Manager.</span>
<span class="comment-copy">the code from ruddra works, however I can only access the value in my template with a ´{% for fund in object_list %}` loop, so I see the value multiples times as I have multiple records in my database, how can I only use a  simple ´{{ fund.sum_commitment }}´ tag without a loop to show the value only once</span>
<span class="comment-copy">the version with the class method worked for me, many thanks @ruddra</span>
