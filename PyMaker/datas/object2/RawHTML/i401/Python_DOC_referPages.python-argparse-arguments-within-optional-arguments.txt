<div class="post-text" itemprop="text">
<p>I am writing a script that can do multiple things, depending on the arguments passed into the command line. For example:</p>
<pre><code>#changed and simplified from actual code
parser.add_argument('-a','--apple')
parser.add_argument('-b','--boy')
parser.add_argument('-c', '--car')
parser.add_argument('-d', '--dog')
args = parser.parse_args()
</code></pre>
<p>I only want 1 argument in the commandline. So, only one of <code>-a,-b,-c,-d</code> would be accepted, and then the code will execute based on whichever argument was passed.</p>
<p>I can do this by a series of if statements, like</p>
<pre><code>if args.a:
if args.b:
</code></pre>
<p>etc. Is there a better way to approach this?</p>
<p>For each command line option (<code>-a,-b,-c,-d</code>), I would like to have some arguments passed in. These arguments would be specific and would vary depending on the initial command line option. For example:</p>
<pre><code>python test.py -a apple aardvark aquaman
</code></pre>
<p>I considered using <code>nargs</code>, but I was not sure how to make each argument was </p>
<ol>
<li>in the correct order and</li>
<li>the argument that is needed. In the above example, assuming the number of extra optional arguments would be 3, I want to make sure that all the arguments start with the letter <code>a</code>.</li>
</ol>
<p>How could I approach this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define mutually exclusive options using <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group" rel="nofollow noreferrer"><code>add_mutually_exclusive_group()</code></a>:</p>
<pre><code>group = parser.add_mutually_exclusive_group()
group.add_argument('-a','--apple')
group.add_argument('-b','--boy')
group.add_argument('-c', '--car')
group.add_argument('-d', '--dog')
args = parser.parse_args()
</code></pre>
<p>Regarding the second part you can specify <code>nargs</code> and a custom <code>type</code>. The <code>type</code> can simply be a function that takes the string of the argument:</p>
<pre><code>def check_a(val):
    if not val or not val[0] == 'a':
        raise argparse.ArgumentTypeError('Must be a value starting with a')
    return val

parser.add_argument('-a', '--apple', nargs=3, type=check_a)
</code></pre>
<p>Regarding the order of the arguments passed to option <code>apple</code> AFAIK you have to check it afterswards:</p>
<pre><code>args = parser.parse_args()
if is_wrong_order(args.apple):
    parser.error('Incorrect argument order to apple')
</code></pre>
<p>Anyway in your case you probably want to use <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers" rel="nofollow noreferrer">subparsers</a> instead of options.</p>
</div>
<span class="comment-copy">This works for me! Thanks!</span>
<span class="comment-copy">Thanks! I will try this out. Quick question, when you do "type=check_a", why are you not passing in a parameter when the function requires the argument "val"?</span>
<span class="comment-copy">Also, another question. I'm pretty new to everything about argparse. How would you access the return value of check_a? Would it be something like args.apple.type()?</span>
<span class="comment-copy">@helloworld95 I'm passing the function as an argument, I'm not calling it. <code>argparse</code> will call the function and store the return value as a list in <code>args.apple</code> as you can see in my last example.</span>
