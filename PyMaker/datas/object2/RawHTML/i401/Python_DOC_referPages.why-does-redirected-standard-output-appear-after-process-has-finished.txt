<div class="post-text" itemprop="text">
<p>I am working with Visual Studio 2015 and .NET framework 4.7.2. I have set up a simple test program that executes an external program in C#. The program is a Python script that simply prints some string to stdout every 0.5 seconds. I want to read the stdout of this sub process in my C# application.</p>
<p>The program basically works, but I get the output of the Python script only shortly before the sub process exits. What do I need to change in order to get a more responsive behavior, i.e. getting the output every 0.5 second as soon as the Python script writes it to stdout?</p>
<p>Here's my C# code:</p>
<pre><code>public class Program {

    private Process process;

    public static void Main(string[] args) {
        new Program().init();
    }

    private void init() {
        startPythonProcess();
        process.WaitForExit();
        Console.ReadLine();
    }

    private void startPythonProcess() {
        if(process==null) {
            try {

                Console.WriteLine("Starting Python process ...");

                string filepath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase).Substring(6);
                process = new Process();

                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.CreateNoWindow = false;
                startInfo.UseShellExecute = false;
                startInfo.WorkingDirectory = filepath;
                startInfo.FileName = "python.exe";
                //startInfo.WindowStyle = ProcessWindowStyle.Normal;
                startInfo.RedirectStandardInput = false;
                startInfo.RedirectStandardOutput = true;
                startInfo.RedirectStandardError = true;
                startInfo.Arguments = string.Format("{0}", Path.Combine(filepath, "test.py"));

                process.StartInfo = startInfo;
                process.OutputDataReceived += OutputDataReceivedEventHandler;
                process.ErrorDataReceived += ErrorDataReceivedEventHandler;

                process.Start();

                process.BeginOutputReadLine();
                process.BeginErrorReadLine();

            } catch(Exception ex) {
                Console.WriteLine("Could not start Python process: " + ex.Message);
            }
        }
    }

    public void OutputDataReceivedEventHandler(object sender, DataReceivedEventArgs args) {
        Console.WriteLine("[PYTHON] INFO: {0}", args.Data);
    }

    public void ErrorDataReceivedEventHandler(object sender, DataReceivedEventArgs args) {
        Console.WriteLine("[PYTHON] ERROR: {0}", args.Data);
    }

}
</code></pre>
<p>Here's my Python script:</p>
<pre><code>import time
import sys
import logging


logging.basicConfig(level=logging.ERROR)

if __name__ == '__main__':
    count = 0
    while True:
        print('PYTHON: {}'.format(count))
        time.sleep(0.5)
        count+=1
        if count&gt;=25:
            break
</code></pre>
<p>UPDATE: I uploaded the mini project <a href="https://www.file-upload.net/download-13516028/MiscTests.zip.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">print</a> function takes a <em>flush</em> argument which controls whether buffered output is flushed.</p>
<p>The default value of <em>flush</em> is <code>False</code>, meaning flushing is controlled by whatever file <code>print</code> is writing to (for example, <code>sys.stdout</code>).  </p>
<p>Set <em>flush</em> to True to force immediate printing.</p>
<pre><code>print('PYTHON: {}'.format(count), flush=True)
</code></pre>
</div>
<span class="comment-copy">Thanks for your answer, but unfortunately, the behaviour is still the same. I get the stdout in my C# application only shortly before the process exits (it then prints the whole bunch of messages at once). I uploaded the project (cp. to bottom line at original post for the link).</span>
<span class="comment-copy">Sorry, forgot to mention that I am using Python 2.7.15. I guess that's why <code>flush=True</code> didn't work and I just used <code>True</code>. Having a look on the 2.7.15 API definition for <code>print()</code> I can't spot a flush parameter. Is there a flush feature in 2.7.15 for <code>print</code> at all?</span>
<span class="comment-copy">Checked now with Python 3.7.2 and it's working fine. Thank you!</span>
<span class="comment-copy">In Python2 you'd need to do <code>from __future__ import print_function</code> - the old <code>print</code> statement doesn't have the flush capability (though you could still flush <code>sys.stdout</code> directly).</span>
<span class="comment-copy">Thanks a lot for your help!</span>
