<div class="post-text" itemprop="text">
<p>I was putting this idea <a href="https://stackoverflow.com/questions/142545/how-to-make-a-cross-module-variable">How to make a cross-module variable?</a> in action for python3.
And was lazy enough to use the variable <code>__builtins__</code> instead of the module <code>builtins</code>. Which should make no difference because: </p>
<pre><code># file spam.py:
import builtins
print (builtins is __builtins__)
print (id(builtins))
print (id(__builtins__))
</code></pre>
<p>This is when it gets funny: <code>builtins</code> is not <code>__builtins__</code> when imported:</p>
<pre><code>$ python3 spam.py 
True
140598001743336
140598001743336

$ python3 -c 'import spam'
False
139755426543080
139755426520904
</code></pre>
<p>Does anyone know what happens? </p>
<p>(A comment on the given page mentions "<code>__builtins__</code> is a CPython peculiarity, you really shouldn't use it", but I'm being curious...) </p>
</div>
<div class="post-text" itemprop="text">
<p>I don't really know why, but from <a href="https://faster-cpython.readthedocs.io/mutable.html#builtin-functions" rel="nofollow noreferrer">article</a></p>
<blockquote>
<p>frame globals have a <code>__builtins__</code> variable (builtins dictionary, or
  builtins module when <code>__name__</code> equals <code>__main__</code>)</p>
</blockquote>
<p>so in your first case (<code>__name__ == __main__</code>) and you get <code>__builtins__</code> as <code>builtins</code> module, but in the second case (<code>__name__ != __main__</code>) <code>__builtins__</code> is a <code>dict</code> instance and from <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>The value of <code>__builtins__</code> is normally either this module or the value
  of this moduleâ€™s <code>__dict__</code> attribute.</p>
</blockquote>
<h1>Test</h1>
<p>With slightly modified <code>spam.py</code></p>
<pre><code>import builtins

if __name__ == '__main__':
    print(type(__builtins__))
    print(__builtins__ is builtins)
    print(id(builtins))
    print(id(__builtins__))
else:
    print(type(__builtins__))
    print(__builtins__ is builtins.__dict__)
    print(id(builtins.__dict__))
    print(id(__builtins__))
</code></pre>
<p>we will get something like</p>
<pre><code>$ python3 spam.py 
&lt;class 'module'&gt;
True
2345652270648
2345652270648

$ python3 -c 'import spam'
&lt;class 'dict'&gt;
True
2770543697736
2770543697736
</code></pre>
<h1>Conclusion</h1>
<p>As you &amp; @chepner have already noticed <code>__builtins__</code> is an implementation detail that can be changed, so we shouldn't rely on it, especially on it being a <code>builtins</code> module/<code>builtins.__dict__</code> object.</p>
</div>
<span class="comment-copy"><code>__builtins__</code> is an implementation detail, so you shouldn't rely on it being anything in particular.</span>
