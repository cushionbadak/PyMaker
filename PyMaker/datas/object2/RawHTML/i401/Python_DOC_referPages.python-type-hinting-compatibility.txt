<div class="post-text" itemprop="text">
<p>I am writing a code that handles Python AST nodes, that should be compatible for both Python 2 and Python 3.</p>
<p>However, Python 3 has <code>ast.Try</code>, where Python 2 has <code>ast.TryFinally</code> and <code>ast.TryExcept</code>, so I need to use <code>visit_</code> aliases to handle both cases.</p>
<p>If I write my node visitor code using compatibility aliases, like the following, my pre-commit mypy check will complain when using Python 2, that <code>error: Name 'ast.Try' is not defined</code>:</p>
<pre><code>import ast

class Visitor(ast.NodeVisitor):


    def visit_Try(self, node):  # type: (ast.Try) -&gt; None
        ...
    visit_TryFinally = visit_Try  # python 2 compatible
</code></pre>
<p>If I instead use <code>ast.TryFinally</code> in the type hint, it will instead complain <code>error: Name 'ast.TryFinally' is not defined</code> if I run it in Python 3. I know that I can use a more general type for the node, but that makes me writing a lot of <code># type: ignore</code> in the code which I don't want.</p>
<p>How can I resolve this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>Mypy knows <a href="https://mypy.readthedocs.io/en/latest/common_issues.html#python-version-and-system-platform-checks" rel="nofollow noreferrer">how to handle Python version checks</a>, and you could use conditional <em>type aliases</em> to pick the right type for the right Python version:</p>
<pre><code>if sys.version_info[0] &gt;= 3:
    TryNode = ast.Try
else:
    TryNode = ast.TryFinally

class Visitor(ast.NodeVisitor):


    def visit_Try(self, node):  # type: (TryNode) -&gt; None
        # ...
    visit_TryFinally = visit_Try  # python 2 compatible
</code></pre>
<p>You can further save yourself the runtime cost of the <code>if sys.version_info</code> tests by placing that code in a <a href="https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING" rel="nofollow noreferrer"><code>if TYPE_CHECKING:</code> test</a>.</p>
<p>As a side note: if you are handling <code>ast.Try</code> in Python 3 to track both <code>finally:</code> and <code>except ...:</code> components of the <code>try</code> statement, you want to handle both <code>ast.TryFinally</code> and <code>ast.TryExcept</code> in Python 2, as before Python 2.5, you could only use <code>try...finally</code> <em>or</em> <code>try...except</code> in one statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was thinking that you could make the script using this code</p>
<pre><code>import sys
import ast

class visitor(ast.NodeVisitor):

    def visit_Try(self, node):
        ...

    if sys.version.startswith("2"):
        visit_TryFinally = visit_TryFinally
    elif sys.version.startswith("3"):
        visit_TryFinally = visit_Try
</code></pre>
<p><code>sys.version.startswith()</code> checks for the version of Python.</p>
</div>
<span class="comment-copy">which <code>mypy</code> are you using? I have no errors for given snippet on <code>mypy 0.641</code>, also can you post error message(s) as well?</span>
<span class="comment-copy">This doesn't work, because you removed the type hints altogether now.</span>
<span class="comment-copy">I’ve added the type hints</span>
<span class="comment-copy">That’s still not <a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">type hinting</a>.</span>
