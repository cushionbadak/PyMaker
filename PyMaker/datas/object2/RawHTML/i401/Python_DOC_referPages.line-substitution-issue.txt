<div class="post-text" itemprop="text">
<p>I Need to replace a XML file with values from a second file.
The problem is that for some reason my xml file is completely cleared, all data is erased.
The data should be preserved except if it finds the ${key} on the XML file then it should only replace it with the ${value}</p>
<pre><code>import os
import progressbar

#VARIABLE TO CONCATENATE WITH THE FILE NAME
home = '/u01/app/oracle/mftxfer_adoc/DAYS/ola/'
#I WILL USE THIS FOLDER TO CHECK FOR FILES WITH THE NAME AJOG
directory = os.listdir('/u01/app/oracle/mftxfer_adoc/DAYS/ola/')

#THIS FILE IS MY FILTER LIST
word_list = open('/u01/app/oracle/mftxfer_adoc/DAYS/teste.txt').readlines()

#FOR EACH FILE THAT ENCOUNTERS ON THE DIRECTORY
for file_xml in directory:
    #IF THE FILENAME HAS AJOG IN IT
    if file_xml.__contains__('AJOG'):
        print("Processing the file"+" "+file_xml)
        #OPENS THE FILE
        file_read = open(home+file_xml, 'r').readlines()
        #NOW WILL CHECK IF THE LINE CONTAINS A SPECIFIC STRING
        for line in file_read:
                if "&lt;codigo&gt;" in line:
                        #IF HAS THEN PICKS THE FILTER
                        for word_list_line in word_list:
                                #DEVIDES THE FILTER IN 2 COLUMNS
                                key = str((word_list_line.split(' ')[0]))
                                value = str((word_list_line.split(' ')[1]))
                                #CHECKS IF THE VALUE FROM THE FIRST COLUMN IN ON THE LINE OF THE AJOG FILE
                                if key in line:
                                        print("Found the value "+key+" on file "+file_xml)
                                        #IF SO THEN REPLACE THE VALUE FROM THE FIRST COLUMN WITH THE SECOND COLUMN
                                        file_read=line.replace(key, value)
                                        #THE SAME FILE IS OPENED IN WRITE MODE
                                        file_write = open(home + file_xml, 'w')
                                        #WRITES THE CHANGES TO THE LINE
                                        file_write.writelines(file_read)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without knowing much context into your overall program, I noticed that you did not close the file.  Sometimes it appears as if nothing has been written, it's becuase it's all stuck in the buffer and has not been written, so use <code>file_write.close()</code> or better yet, use <code>with open(filename, "w")</code> to avoid this in the future.</p>
</div>
<div class="post-text" itemprop="text">
<p>Manipulate an XML file as Text is a hard task.</p>
<p>May you can use a library for that.</p>
<p>This sample can guide you for a better approach.</p>
<pre><code>import xml.etree.ElementTree

tree = xml.etree.ElementTree.parse("test.xml")

tree.find("some key").text = 'new value'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason the file is erased is because you reopen it in write mode. When you do so the file is truncated (cleared). See the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open()</a> description. It's possible to append to the file, but is not what you want.</p>
<p>I think an XML parser (as suggested in @andercurzbr answer) is the best solution. But if you whish to use your code, you could use <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">fileinput</a> module, which allows to quickly loop over the lines of a file. This is an example of your script edited to use fileinput. It's not tested, but should give you the idea.</p>
<pre><code>import os
import fileinput

#VARIABLE TO CONCATENATE WITH THE FILE NAME
home = '/u01/app/oracle/mftxfer_adoc/DAYS/ola/'
#I WILL USE THIS FOLDER TO CHECK FOR FILES WITH THE NAME AJOG
directory = os.listdir('/u01/app/oracle/mftxfer_adoc/DAYS/ola/')

#THIS FILE IS MY FILTER LIST
word_list = open('/u01/app/oracle/mftxfer_adoc/DAYS/teste.txt').readlines()

#FOR EACH FILE THAT ENCOUNTERS ON THE DIRECTORY
for file_xml in directory:
    #IF THE FILENAME HAS AJOG IN IT
    if file_xml.__contains__('AJOG'):
        print("Processing the file"+" "+file_xml)
        #NOW WILL CHECK IF THE LINE CONTAINS A SPECIFIC STRING WITH FILEINPUT
        for line in fileinput.input(home+file_xml, inplace=True):
            if "&lt;codigo&gt;" in line:
                #IF HAS THEN PICKS THE FILTER
                for word_list_line in word_list:
                    #DEVIDES THE FILTER IN 2 COLUMNS
                    key = str((word_list_line.split(' ')[0]))
                    value = str((word_list_line.split(' ')[1]))
                    #CHECKS IF THE VALUE FROM THE FIRST COLUMN IN ON THE LINE OF THE AJOG FILE
                    if key in line:
                        #print("Found the value "+key+" on file "+file_xml)
                        #IF SO THEN REPLACE THE VALUE FROM THE FIRST COLUMN WITH THE SECOND COLUMN
                        file_read=line.replace(key, value)
                        #WRITES THE CHANGES TO THE LINE
                        print(file_read)
                    else:
                        print(line)
            else:
               print(line)
</code></pre>
<p>Note that when using the <code>inplace=True</code> option the output is redirected to the file itself. From the docs:</p>
<blockquote>
<p>if the keyword argument inplace=True is passed to fileinput.input() or
  to the FileInput constructor, the file is moved to a backup file and
  standard output is directed to the input file (if a file of the same
  name as the backup file already exists, it will be replaced silently).
  This makes it possible to write a filter that rewrites its input file
  in place.</p>
</blockquote>
<p>This means that <code>print()</code> functions called after the call to <code>fileinput.input(home+file_xml, inplace=True)</code> write to the file. The unedited lines have to be printed too, otherwise they are lost, that is why I added the two <code>else</code>s.</p>
</div>
<span class="comment-copy">Welcome to SO. A couple of tips on posting code: a) use 4 spaces per indent level, not 8, which makes it unreadable. b) In general good code speaks for itself, many of your comments are unnecessary (and when you do comment, please don't uppercase comment, and use a space after '#') c) Without your input file we can't reproduce this; try to strip your code example down to the absolute minimum (<a href="https://stackoverflow.com/help/mcve">MCVE</a>).</span>
