<div class="post-text" itemprop="text">
<p>I have a dataset with non-static date structure</p>
<p>Such as</p>
<pre><code>Fri, 13 Apr 2018 13:13:12 +0000 (UTC)
Mon, 26 Mar 2018 06:32:59 +0100
Tue, 05 Dec 2017 11:03:34 GMT
08 Dec 2016 12:00:24
</code></pre>
<p>How to get the day, (hour+offset) and minute from a string like that without manual code using regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>timestring</code>:</p>
<pre><code>import timestring

dt_1 = "Fri, 13 Apr 2018 13:13:12 +0000 (UTC)"
dt_2 = "Mon, 26 Mar 2018 06:32:59 +0100"
dt_3 = "Tue, 05 Dec 2017 11:03:34 GMT"
dt_4 = "08 Dec 2016 12:00:24"

print(timestring.Date(dt_1))
print(timestring.Date(dt_2))
print(timestring.Date(dt_3))
print(timestring.Date(dt_4))
</code></pre>
<p><strong>EDIT:</strong></p>
<p>While I was at it, here is another cooler method:</p>
<p>Using <a href="http://labix.org/python-dateutil" rel="noreferrer"><code>dparser</code></a>:</p>
<pre><code>import dateutil.parser as dparser

dt_1 = "Fri, 13 Apr 2018 13:13:12 +0000 (UTC)"
dt_2 = "Mon, 26 Mar 2018 06:32:59 +0100"
dt_3 = "Tue, 05 Dec 2017 11:03:34 GMT"
dt_4 = "08 Dec 2016 12:00:24"


print(dparser.parse(dt_1,fuzzy=True))
print(dparser.parse(dt_2,fuzzy=True))
print(dparser.parse(dt_3,fuzzy=True))
print(dparser.parse(dt_4,fuzzy=True))
</code></pre>
<p>OUTPUT:</p>
<pre><code>2018-04-13 13:13:12+00:00
2018-03-26 06:32:59+01:00
2017-12-05 11:03:34+00:00
2016-12-08 12:00:24
</code></pre>
<p><strong>EDIT 2:</strong></p>
<p>Why is <code>dparser</code> cooler?</p>
<blockquote>
<p>Invalid dates raise a ValueError:</p>
</blockquote>
<pre><code>invalid_dt = "Fri, 35 Apr 2018 13:13:12 +0000 (UTC)"
print(dparser.parse(invalid_dt,fuzzy=True))
</code></pre>
<p>OUTPUT:</p>
<pre><code>ValueError: day is out of range for month
</code></pre>
<p><strong>EDIT 3:</strong></p>
<p>To get the <code>day</code>, <code>month</code>, <code>year</code>, <code>hour</code>, <code>minute</code> or <code>second</code>:</p>
<pre><code>print(dparser.parse(dt_1,fuzzy=True).day)     # 13
print(dparser.parse(dt_2,fuzzy=True).month)   # 3
print(dparser.parse(dt_3,fuzzy=True).year)    # 2017
print(dparser.parse(dt_4,fuzzy=True).hour)    # 12
print(dparser.parse(dt_4,fuzzy=True).minute)  # 0
print(dparser.parse(dt_4,fuzzy=True).second)  # 24
</code></pre>
<p><strong>EDIT 4:</strong></p>
<p>If you want to get the name of the Day:</p>
<pre><code>print(datetime.date(dparser.parse(dt_1,fuzzy=True)).strftime("%a"))  # Fri
</code></pre>
</div>
<span class="comment-copy">What is your desired output format? and how do you differentiate b/w manual code and regex?</span>
<span class="comment-copy">i just wanna extract and change to categorical (for ml) @user5173426</span>
<span class="comment-copy">Check <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">strptime docs</a> and <a href="https://stackoverflow.com/questions/466345/converting-string-into-datetime">this question</a>. In your case you would probably need to implement additional fallback strategy to switch between different format types (e.g. <code>for format in formats</code> + <code>strptime</code> in <code>try ... except</code>)</span>
<span class="comment-copy">It seems that the output are not the good ones. For example: Fri 13 Apr gives 2019-02-15.</span>
<span class="comment-copy">@FlorianHat Fixed with the edit.</span>
<span class="comment-copy">thanks for the help, that return a good string. any idea about the <code>day</code> ?</span>
<span class="comment-copy">@BaltschunAli Ofcourse, just use the <code>day</code> attribute. like &gt;  <code>print(dparser.parse(dt_1,fuzzy=True).day)</code> returns <code>13</code></span>
<span class="comment-copy">sorry, i mean like <code>mon</code> , <code>fri</code> etc</span>
