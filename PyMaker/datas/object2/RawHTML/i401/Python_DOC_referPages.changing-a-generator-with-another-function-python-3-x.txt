<div class="post-text" itemprop="text">
<p>I want to change the behavior of the generator below so that it only yields even numbers. How can I do this? </p>
<p>I'm aware that there simpler, clever ways to do this. This is a contrived HR challenge, where the </p>
<p>The <code>change_generator</code> function that I wrote does not yield the desired output. <strong>I can only change <code>change_generator</code></strong>.</p>
<p>I cannot change  <code>positive_integers_generator()</code> nor the for loop below. </p>
<p>Can I solve this with a decorator?</p>
<pre><code>#can't change the body of this function
def positive_integers_generator():
    n = 1
    while True:
        x = yield n
        if x is not None:
            n = x
        else:
            n += 1

# can only change this function            
def change_generator(generator, n):
  for i in generator:
    if i%2 == 0:
      yield(i)



# can't change this code either
# should print 1, 2, 4, 6, 8
g = positive_integers_generator() 
for _ in range(5):
    n = next(g)
    print(n)
    change_generator(g, n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built in function <code>filter</code></p>
<pre><code>even_numbers_generator = filter(lambda n: n % 2 == 0, positive_integers_generator())
</code></pre>
<p>Or a generator expression.</p>
<pre><code>even_numbers_generator = (n for n in positive_integers_generator() if n % 2 == 0)
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> from the standard library:</p>
<pre><code>even_numbers_generator = itertools.count(start=2, step=2)
</code></pre>
<p>But if you only can change the <code>change_generator</code> function, the "correct answer" to the challenge probably involves using <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer">generator.send()</a> </p>
<pre><code># can only change this function            
def change_generator(generator, n):
    if n % 2 == 0:
        generator.send(n + 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need the parens on generator in your loop, and you don't seem to be printing the output of the right generator.  Updated version that works for me:</p>
<pre class="lang-py prettyprint-override"><code>def positive_integers_generator():
    n = 1
    while True:
        x = yield n
        if x is not None:
            n = x
        else:
            n += 1

def change_generator(generator):
  for i in generator:
    if i%2 == 0:
      yield i

g = positive_integers_generator()

# should print 1, 2, 4
for _ in range(5):
  n = next(change_generator(g))
  print(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your very specific problem, if you can't change the <code>print(n)</code> part then you are pretty cornered because you can't change the instance of generator <code>g</code> that was created for <code>positive_integers_generator()</code>.</p>
<p>In what may be a frowned upon answer, in this particular case you might want to update the <code>global g</code> to be reassigned to a new <code>generator</code> after that:</p>
<pre><code>def change_generator(generator, n):
    def even_gen():
        n = 2
        while True:
            if n % 2 == 0:
                yield n
            else:
                yield
            n += 1
    global g                          # directly change the g referenced in main code
    if not g.__name__ == 'even_gen':  # change g if it is not even_gen
        g = even_gen()

# output:
# 1
# 2
# None
# 4
# None
</code></pre>
</div>
<span class="comment-copy">I'm confused, you can't change the loop calling code, but you added the call to change_generator in the example I assume?</span>
<span class="comment-copy">@RyanWidmaier: I can only change the <code>change_generator</code> function. The definition of the generator, its creation and all code inside the loop should remain unchanged. This is a HR challenge question.</span>
<span class="comment-copy">What should be printed after 1,2,4 ? The loop is 5 long</span>
<span class="comment-copy">@PatrickArtner: you're right, it should be 1, 2, 4, 6, 8.</span>
<span class="comment-copy">The challenge is that I can only change the <code>change_generator</code> function, not the invoking code (the for loop). These solutions are good but I cannot use them.</span>
<span class="comment-copy">Ok. You are probably supposed to use <code>generator.send()</code> in this challenge. <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#generator.send</a></span>
<span class="comment-copy">See my updated answer. I've added a solution that only changes teh <code>change_generator</code> function.</span>
<span class="comment-copy">generator.send() for sure ... hot sure what a HR-Challenge is though - If that is Human Ressources we help him with something he should solve</span>
<span class="comment-copy">Great answer... didn't figure the <code>send</code> method was so useful.  I thought for sure the <code>global g</code> had to be updated.</span>
<span class="comment-copy">You're right about parentheses. I added more context to clarify. I cannot change the content of the loop. I'm guessing that this might be solved with a decorator.</span>
