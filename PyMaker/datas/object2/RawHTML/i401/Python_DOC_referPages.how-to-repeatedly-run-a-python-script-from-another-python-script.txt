<div class="post-text" itemprop="text">
<p>I want to repeatedly run 2 python script every 10 seconds from another script.</p>
<p>I have a python file with the following statement:-</p>
<p><strong>test1.py</strong></p>
<pre><code>print("this is test1")
</code></pre>
<p><strong>test2.py</strong></p>
<pre><code>print("this is test2")
</code></pre>
<p><strong>main code</strong></p>
<pre><code>from apscheduler.schedulers.blocking import BlockingScheduler


def some_job():
    print('hello')
    import test1
    import test2

scheduler = BlockingScheduler()
job=scheduler.add_job(some_job, 'interval', seconds=10)
scheduler.start()
</code></pre>
<p>The result I get is as follows
<a href="https://i.stack.imgur.com/Rfubq.png" rel="nofollow noreferrer"><img alt="Output" src="https://i.stack.imgur.com/Rfubq.png"/></a></p>
<p>I actually want it to print as</p>
<pre><code>hello
this is test1
this is test2
hello
this is test1
this is test2
hello
this is test1
this is test2
</code></pre>
<p>and so on every 10 second.</p>
<p>I tried using os.system('test1.py') but it opens the file in pycharm. Im using jupyter notebook.
also tried subprocess call.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p>Either use <a href="https://docs.python.org/3/library/runpy.html?highlight=runpy#runpy.run_path" rel="nofollow noreferrer"><code>runpy.run_path</code></a> or <a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess%20check_call#subprocess.check_call" rel="nofollow noreferrer"><code>subprocess.check_call</code></a> to run the file as a script:</p>
<pre><code>import runpy
def some_job():
    &lt;...&gt;
    runpy.run_path('test1.py')
</code></pre>
<p>or</p>
<pre><code>import sys, subprocess
def some_job():
    &lt;...&gt;
    subprocess.check_call((sys.executable, 'test1.py', &lt;command line args if needed&gt;))
</code></pre>
<p>or</p></li>
<li><p>Put the file's payload to be executed into a function, import the module once and invoke the function repeatedly:</p>
<p>test1.py:</p>
<pre><code>def main():
    print("this is test1")
</code></pre>
<p>main code:</p>
<pre><code>import test1

def some_job():
    &lt;...&gt;
    test1.main()
</code></pre></li>
</ul>
<p>The main difference is that in the first case, <code>test1.py</code> will be executed as standalone code (i.e. you cannot pass variables to it) and will be read and parsed each time (in the case of <code>subprocess</code>, a new Python process will also be spawned each time). While in the 2nd case, it will be read once and as a module (i.e. you can pass arguments to <code>test1.main()</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to define functions in those .py files. Change test.py1 to:</p>
<pre><code> def test1():
      print("this is test 1")
</code></pre>
<p>And change test2.py to:</p>
<pre><code>def test2():
       print("this is test 2")
</code></pre>
<p>Than change your main code to:</p>
<pre><code> from test1 import test1
 from test2 import test2

 def some_job():
     print('hello')
     test1()
     test2()
</code></pre>
</div>
<span class="comment-copy">Did you try os.system('python test1.py')   ?</span>
<span class="comment-copy">The function <code>some_job()</code> imports the modules, but not actually execute them. To call them with <code>os.system()</code> or <code>subprocess</code> you don't need to import test1 and test2.</span>
