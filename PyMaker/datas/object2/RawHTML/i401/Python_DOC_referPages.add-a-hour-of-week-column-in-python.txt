<div class="post-text" itemprop="text">
<p>I currently have some time series data that looks like this:</p>
<pre><code>&gt;&gt;&gt; print(df)
                Date  Price of X  Price of Y
0     1/01/2011 0:30          19         172
1     1/01/2011 1:00          98         105
2     1/01/2011 1:30          40          -6
3     1/01/2011 2:00          68         120
4     1/01/2011 2:30          16         182
5     1/01/2011 3:00          23         187
6     1/01/2011 3:30          94         200
7     1/01/2011 4:00          21          97
8     1/01/2011 4:30          43         103
9     1/01/2011 5:00          68         136
10    1/01/2011 5:30          94         109
11    1/01/2011 6:00          94          26
12    1/01/2011 6:30          30          46
13    1/01/2011 7:00          30         116
14    1/01/2011 7:30          38         103
15    1/01/2011 8:00          66         185
16    1/01/2011 8:30          50         175
17    1/01/2011 9:00          71         126
18    1/01/2011 9:30          12         181
19   1/01/2011 10:00          35          77
20   1/01/2011 10:30          23         114
21   1/01/2011 11:00          39         107
22   1/01/2011 11:30          14          28
23   1/01/2011 12:00          38          39
24   1/01/2011 12:30          33         119
25   1/01/2011 13:00          55         117
26   1/01/2011 13:30           2          70
27   1/01/2011 14:00          13         194
28   1/01/2011 14:30          58         140
29   1/01/2011 15:00          54          73
..               ...         ...         ...
363  8/01/2011 14:00          25          84
364  8/01/2011 14:30          29          16
365  8/01/2011 15:00           1         129
366  8/01/2011 15:30           8          67
367  8/01/2011 16:00          65          65
368  8/01/2011 16:30          41         139
369  8/01/2011 17:00           0          27
370  8/01/2011 17:30          46         145
371  8/01/2011 18:00          27          -1
372  8/01/2011 18:30          97         109
373  8/01/2011 19:00          41         149
374  8/01/2011 19:30          27         197
375  8/01/2011 20:00          46          62
376  8/01/2011 20:30          53         117
377  8/01/2011 21:00          92          32
378  8/01/2011 21:30          41          88
379  8/01/2011 22:00          23          47
380  8/01/2011 22:30          96         126
381  8/01/2011 23:00          11         180
382  8/01/2011 23:30          44          84
383   9/01/2011 0:00          96          50
384   9/01/2011 0:30          46         109
385   9/01/2011 1:00          30          35
386   9/01/2011 1:30          89         197
387   9/01/2011 2:00          86          31
388   9/01/2011 2:30          55          67
389   9/01/2011 3:00          43         117
390   9/01/2011 3:30          79         133
391   9/01/2011 4:00          43          85
392   9/01/2011 4:30          78          50

[393 rows x 3 columns]
</code></pre>
<p>Using python I want to add a column that is "hour of the week", I have managed to do this using excel however I am not sure how to go about doing it in Python.</p>
<p>This is how I worked it out in excel:</p>
<p><a href="https://i.stack.imgur.com/QiGP5.png" rel="nofollow noreferrer"><img alt="excel" src="https://i.stack.imgur.com/QiGP5.png"/></a></p>
<p>Any help would be appreciated, thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<p>Assuming the <code>date</code> column is of type <code>datetime</code></p>
<p>dayofweek: The day of the week with Monday=0, Sunday=6</p>
<p><code>df['hour_of_the_week'] = df['date'].dt.dayofweek * 24 + (df['date'].dt.hour + 1)</code></p>
<p>You can convert <code>date</code> to datetime with</p>
<p><code>df['date'] = df['date'].apply(pd.to_datetime)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming the date format you have in your sample, the following will generate the hour of the week from a datetime object generated with your time-stamp:</p>
<pre><code>from datetime import datetime

timestamp = '2/19/2019 17:33'
timestamp_object = datetime.strptime(timestamp, '%m/%d/%Y %H:%M')

hour_of_week = (timestamp_object.timetuple().tm_wday * 24 + 24) - (24 - timestamp_object.timetuple().tm_hour)

print('Hour of the week: {}'.format(hour_of_week))
</code></pre>
<p>Output:</p>
<pre><code> Hour of the week: 41
</code></pre>
<p>This should give you the tools you need to apply in your context. Like so:</p>
<pre><code>df['Date'] = df['Date'].apply(pd.to_datetime)

df['Hour of Week'] = ((df['Date'].dt.dayofweek) * 24 + 24) - (24 - df['Date'].dt.hour)
df['Day of Week'] = df['Date'].dt.dayofweek
df['Hour of Day'] = df['Date'].dt.hour
df = df[['Date', 'Day of Week', 'Hour of Day', 'Hour of Week', 'Price of X', 'Price of Y']]
</code></pre>
<p>Note that, if you definitely wish to start the day with hour 1 rather than zero, you'll need to do:</p>
<pre><code>df['Hour of Week'] = ((df['Date'].dt.dayofweek) * 24 + 24) - (24 - df['Date'].dt.hour) + 1
</code></pre>
<p>and </p>
<pre><code>df['Hour of Day'] = df['Date'].dt.hour + 1
</code></pre>
<p>to avoid confusion.</p>
<p>Just as the following to offset the first day to <code>1</code>:</p>
<pre><code>df['Day of Week'] = df['Date'].dt.dayofweek + 1
</code></pre>
<p>Just remember that the <code>Hour of Day</code> value <code>df['Date'].dt.hour</code> begins with <code>0</code> whenever you are doing comparisons. For this reason, I'd suggest using <code>0</code> as your standard. The same applies to <code>Day of Week</code>.</p>
<p>With <code>Hour of Week</code> starting at <code>0</code>, your dataframe looks something like this with the above:</p>
<pre><code>                Date  Day of Week  Hour of Day  Hour of Week  Price of X  Price of Y
0 2011-01-01 00:30:00            5            0           120          19         172
1 2011-01-01 01:00:00            5            1           121          98         105
2 2011-01-01 01:30:00            5            1           121          40          -6
3 2011-01-01 02:00:00            5            2           122          68         120
4 2011-01-01 02:30:00            5            2           122          16         182
5 2011-01-01 03:00:00            5            3           123          23         187
6 2011-01-01 03:30:00            5            3           123          94         200
7 2019-02-18 00:01:00            0            0             0          23         187
8 2019-02-18 23:15:00            0           23            23          23         187
9 2019-02-24 23:59:00            6           23           167          23         187
</code></pre>
<p>With day and hours incremented by 1:</p>
<pre><code>df['Hour of Week'] = ((df['Date'].dt.dayofweek) * 24 + 24) - (24 - df['Date'].dt.hour) + 1
df['Day of Week'] = df['Date'].dt.dayofweek + 1
df['Hour of Day'] = df['Date'].dt.hour + 1
</code></pre>
<p>You get:</p>
<pre><code>                 Date  Day of Week  Hour of Day  Hour of Week  Price of X  Price of Y
0 2011-01-01 00:30:00            6            1           121          19         172
1 2011-01-01 01:00:00            6            2           122          98         105
2 2011-01-01 01:30:00            6            2           122          40          -6
3 2011-01-01 02:00:00            6            3           123          68         120
4 2011-01-01 02:30:00            6            3           123          16         182
5 2011-01-01 03:00:00            6            4           124          23         187
6 2011-01-01 03:30:00            6            4           124          94         200
7 2019-02-18 00:01:00            1            1             1          23         187
8 2019-02-18 23:15:00            1           24            24          23         187
9 2019-02-24 23:59:00            7           24           168          23         187
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the Date column is a datetime object, I would go with the datetime library</p>
<pre><code>from datetime import timedelta

# Convert to timedelta
df['Hours'] = df.loc[:, 'Date'].apply(lambda x: timedelta(days=x.weekday(), hours=x.hour))
# Calculate the hours
df['Hours'] = df.loc[:, 'Hours'].apply(lambda x: x.total_seconds()/3600)
</code></pre>
</div>
<span class="comment-copy">How are you creating the time entry? Python will handle that much better if you can convert it to a datetime value.</span>
<span class="comment-copy">I have converted it to a date time value with <code>df['Date'] = pd.to_datetime(df['Date'])</code>. Is this what you mean?</span>
<span class="comment-copy">looking at your data, is day_of_week always 6?</span>
<span class="comment-copy">No, day of the week is <code>6</code>when the day is saturday</span>
<span class="comment-copy">Can you show an <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that covers the generation of your data file?</span>
<span class="comment-copy">No that just returns me the hour of the day, I want the hour of the week, i.e. somewhere from <code>0-168 (168=24*7)</code>. Also, what do you mean by the excel link not working?</span>
<span class="comment-copy">Update, the image didn't show up earlier for me</span>
<span class="comment-copy">This solution kind of works, for my first datetime it gives the correct hour of week, however the hour of week should go back down once it reaches 168, however in your solution the hour of week just keeps increasing</span>
<span class="comment-copy">Update to use <code>dayofweek</code> function.</span>
<span class="comment-copy">Yep it works thanks!. Just make sure to add closed brackets after <code>dt.hour + 1</code></span>
<span class="comment-copy">Your solution has the same problem as @ksooklall. With your code, the min hour of a week is <code>25</code> however it should be <code>1</code> and the max in yours is <code>192</code> however the max should be <code>168</code>.</span>
<span class="comment-copy">@user11015000 You got a point. Switched to using weekday instead of isoweekday. <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">Documentation</a></span>
<span class="comment-copy">@ChrisLarson  It should be. After all, both 0 and 168 are essentially the same point. Your end of the week is the beginning of the week too</span>
