<div class="post-text" itemprop="text">
<p>My program to find the second smallest number works as expected, but when running the code to find the second largest number, the second largest output is not correct. I did the second function in a similar way, but flipped the greater than sign. What is the best way to fix the code?</p>
<pre><code>def second_smallest():
    num_list = [1,5,6,44,5,7,2,444,3]
    smallest_num = num_list[0]
    second_smallest_num = num_list[1]
    for i in num_list:
        if i &lt; smallest_num:
            smallest_num = i
        elif smallest_num &lt; i &lt; second_smallest_num:
            second_smallest_num = i
    print("Smallest Number:", smallest_num)
    print("Second smallest number:", second_smallest_num)

def second_largest():
    num_list = [1,5,6,44,5,7,2,444,3]
    largest_num = num_list[0]
    second_largest_num = num_list[1]
    for i in num_list:
        if i &gt; largest_num:
            largest_num = i
        elif second_largest_num &lt; i &lt; largest_num:
            second_largest_num = i
    print("Largest:", largest_num)
    print("Second largest:", second_largest_num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you assign the new highest number, you need to assign the second highest to the old highest number.</p>
<pre><code>def second_smallest():
     num_list = [1,5,6,44,5,7,2,444,3]
     smallest_num = num_list[0]
     second_smallest_num = num_list[1]
     for i in num_list:
         if i &lt; smallest_num:
            smallest_num = i
         elif smallest_num &lt; i &lt; second_smallest_num:
         second_smallest_num = i
     print("Smallest Number:", smallest_num)
     print("Second smallest number:", second_smallest_num)

    def second_largest():
    num_list = [1,5,6,44,5,7,2,444,3]
    largest_num = num_list[0]
    second_largest_num = num_list[1]
    for i in num_list:
        if i &gt; largest_num:
            second_largest_num = largest_num
            largest_num = i
        elif second_largest_num &lt; i &lt; largest_num:
            second_largest_num = i
    print("Largest:", largest_num)
    print("Second largest:", second_largest_num)

    second_smallest()
    second_largest()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You did not set a variable to hold the largest value. It would work if it you create a <code>tmp</code> variable to hold the largest value and assigned it to the second largest afterwards</p>
<pre><code>def second_largest():
num_list = [1,5,6,44,5,7,2,444,3]
largest_num = num_list[0]
second_largest_num = num_list[1]
for i in num_list:
    if i &gt; largest_num:
        tmp = largest_num
        largest_num = i
        second_largest_num = tmp
    elif second_largest_num &lt; i &lt; largest_num:
        second_largest_num = i
print("Largest:", largest_num)
print("Second largest:", second_largest_num)
</code></pre>
<p>Also, if would be better if you start the iteration from index 2 of the array as first and second is already assigned.</p>
</div>
<div class="post-text" itemprop="text">
<p>at the top, where you declare</p>
<pre><code>    num_list = [1,5,6,44,5,7,2,444,3]
    smallest_num = num_list[0]
    second_smallest_num = num_list[1]
</code></pre>
<p>Do you realise that you are accessing the zeroth and first elements in the list, that is</p>
<pre><code>smallest_num = 1
second_smallest_num = 5
</code></pre>
<p>And incidentally the zeroth element (ie = 1) just happens to be the smallest element in that list, which is why it works for one of the functions but not the other.</p>
<p>What should work, is</p>
<pre><code>def second_largest():
num_list = [1,5,6,44,5,7,2,444,3]
largest_num = max(num_list)
### SOME FUNCTION THAT TAKES IN THAT LIST, REMOVES THE LARGEST NUM ELEMENT, AND THEN FINDS AND RETURNS THE NEXT LARGEST ELEMENT - I'll leave this to you ##
for i in num_list:
    if i &gt; largest_num:
        largest_num = i
    elif second_largest_num &lt; i &lt; largest_num:
        second_largest_num = i
print("Largest:", largest_num)
print("Second largest:", second_largest_num)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use heapq?</p>
<pre><code>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; heapq.nlargest(2, num)
[10, 8]
&gt;&gt;&gt; heapq.nsmallest(2, num)
[1, 2]
&gt;&gt;&gt;
</code></pre>
<p>More information on <a href="https://docs.python.org/2/library/heapq.html" rel="nofollow noreferrer">https://docs.python.org/2/library/heapq.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest approach here is simply using the python builtins <code>max()</code> and <code>min()</code>. Note that we're making a copy of the incoming list, so that the original <code>num_list</code> sn't affected by the <code>remove()</code>:</p>
<pre><code>num_list = [1,5,6,44,5,7,2,444,3]

def second_smallest(list):
    temp_num_list = list.copy()
    temp_num_list.remove(min(temp_num_list))
    smallest_num = min(list)
    second_smallest_num = min(temp_num_list)
    return smallest_num, second_smallest_num

def second_largest(list):
    temp_num_list = list.copy()
    temp_num_list.remove(max(temp_num_list))
    largest_num = max(list)
    second_largest_num = max(temp_num_list)
    return largest_num, second_largest_num

largest_num, second_largest_num = second_largest(num_list)
smallest_num, second_smallest_num = second_smallest(num_list)

print("Largest:", largest_num)
print("Second largest:", second_largest_num)

print("Smallest:", smallest_num)
print("Second smallest:", second_smallest_num)
</code></pre>
<p>Output:</p>
<pre><code>Largest: 444
Second largest: 44
Smallest: 1
Second smallest: 2
</code></pre>
<p>There's no nead to do any comparisons. We're simply finding the <code>max</code> and <code>min</code>, then removing them from a copy, and subsequently taking the <code>max</code> and <code>min</code> from the remainders.</p>
<p>Note that I've abstracted <code>num_list</code> from the functions, but leaving them in the functions would work. This approach allows you to reuse the functions with different lists in your code.</p>
<p>Alternatively, as mentioned in another answer here, from @andercruzbr, you can import the <code>heapq</code> module, and simply do:</p>
<pre><code>import heapq

num_list = [1,5,6,44,5,7,2,444,3]

def smallest_nums(list):
    return heapq.nsmallest(2, num_list)

def largest_nums(list):
    return heapq.nlargest(2, list)

print("Largest:", largest_nums(num_list)[0])
print("Second largest:", largest_nums(num_list)[1])

print("Smallest:", smallest_nums(num_list)[0])
print("Second smallest:", smallest_nums(num_list)[1])
</code></pre>
<p>Output:</p>
<pre><code>Largest: 444
Second largest: 44
Smallest: 1
Second smallest: 2
</code></pre>
</div>
<span class="comment-copy">Use the built in <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>sort</code></a> method. <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Sorting HOWTO</a></span>
<span class="comment-copy">I am practicing interview questions, I can't use built in functions.</span>
<span class="comment-copy">FYI, <code>second_smallest</code> doesn't work either. It was just a coincidence that it worked, but when you <code>random.shuffle</code> your <code>num_list</code>, the second smallest number (and thus same goes for largests) is inconsistent.</span>
<span class="comment-copy">@Ravvar597 And if you have some constraints or requirements, please post those, too.</span>
<span class="comment-copy">If your reason for asking is to develop your skills in preparation for an interview, your main goal should be to understand why your solution didn't work. Being able to provide working code without understanding why it works won't get you the job. In this case, you need to go back and try to understand why your code gives the right answer at all, because it's not because your algorithm is correct. Try going through the steps yourself ('by hand') and figure out why.</span>
<span class="comment-copy">Also, it would be helpful for the function to take a list as its argument - so you can use this for any given list of any length.</span>
<span class="comment-copy">but <code>elif second_largest_num &lt; i &lt; largest_num:</code> will throw an error since <code>second_largest_num</code> isn't defined at that stage...</span>
<span class="comment-copy">well you quickly define a function using the clues I gave. So a function that take a list as its argument, it then finds the max value using max(), it will then remove that element (using del() or pop().), the function then uses max() again to find the new max value (which is essentially the second largest of the original list), the function then returns that value and it will be assigned to the variable of second_largest_num inside the function for the second_largest. Give it a go as its a good way to learn, any issues and I'll do it for you</span>
<span class="comment-copy">That's fair, but then why still have the boilerplate code below the comment that won't be relevant in solving it?</span>
