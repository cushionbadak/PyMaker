<div class="post-text" itemprop="text">
<p>Here I defined a normal function:</p>
<pre><code>def abc():
  return 1
</code></pre>
<p>Now when I am iterating using iter function on abc method, I am getting the following error.</p>
<pre><code>for i in iter(abc):
  print i

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'function' object is not iterable
</code></pre>
<p>But now when I am using sentinel, its working.</p>
<pre><code> for i in iter(abc, ''):
  print i

1
1
1
1
1
1
...
</code></pre>
<p>Any idea why the above behaviour happening ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>iter(spam)</code> expects <code>spam</code> to be an iterable, which a function object is not.</p>
<p><code>iter(spam, sentinel)</code> expects <code>spam</code> to be a callable, which it is.  So <code>iter</code> will call <code>spam</code> until it returns the sentinel value.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Docstring:
iter(iterable) -&gt; iterator
iter(callable, sentinel) -&gt; iterator

Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
</code></pre>
<p>So you chose the second form, which means it will forever loop until the sentinel in this case <code>''</code> is returned.</p>
</div>
<span class="comment-copy">Did you read the <i>documentation</i> ? <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#iter</a>  It is explained it it ... why ask here? <code>If the second argument, sentinel, is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its __next__() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.</code></span>
<span class="comment-copy">missed checking it. Thanks for pointing out @PatrickArtner</span>
