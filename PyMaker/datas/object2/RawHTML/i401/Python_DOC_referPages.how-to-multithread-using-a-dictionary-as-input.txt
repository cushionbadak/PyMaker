<div class="post-text" itemprop="text">
<p>I am new to python and trying to understand multithreading</p>
<p>Here is what I have so far:</p>
<pre><code> d_thread = {0:(('instrumentType', 'OPTSTK'), ('symbol', 'INFY'),
                ('expiryDate', 'select'), ('optionType', 'PE'),
                ('strikePrice', '2800'), ('dateRange', 'day'),
                ('fromDate', '11-04-2012'),('toDate', '12-04-2012'),
                ('segmentLink', '9'), ('symbolCount', '')),
            12:(('instrumentType', 'OPTSTK'), ('symbol', 'INFY'), 
                ('expiryDate', 'select'), ('optionType', 'PE'), 
                ('strikePrice', '2400'), ('dateRange', 'day'), 
                ('fromDate', '27-04-2012'), ('toDate', '28-04-2012'), 
                ('segmentLink', '9'), ('symbolCount', ''))}
</code></pre>
<p>This dictionary has around <code>500 keys</code>. The <code>keys</code> are <code>index</code> of pandas <code>dataframe</code>.</p>
<p>I want to create <code>10 workers</code> to make <code>requests</code> and then put the data in the <code>dataframe</code>. I can't figure out how to make the worker select the <code>next</code> key when one thread is finished.</p>
<p>What I have so far:</p>
<pre><code>import threading
from queue import Queue
import requests

hist_lock = threading.Lock()

def opthist_job(worker,d_thread):
      headers = {
    'Pragma': 'no-cache',
    'Accept-Encoding': 'gzip, deflate, br',
    'Accept-Language': 'en-US,en;q=0.9',
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36',
    'Accept': '*/*',
    'Referer': 'https://www.nseindia.com/products/content/derivatives/equities/historical_fo.htm',
    'X-Requested-With': 'XMLHttpRequest',
    'Connection': 'keep-alive',
    'Cache-Control': 'no-cache',
}
params = d_threading[0]    # This is where I need to get the value of key
opthistdf = requests.get('https://www.nseindia.com/products/dynaContent/common/productsSymbolMapping.jsp', headers=headers, params=params)

 with hist_lock: # I am not sure if this is required in this instance.

 #### Some more functions ####

 def threader():
      while True:
          worker = q.get()
          opthist_job(worker)
          q.task_done()

 q = Queue()
 for th in range(len(d_threading.keys())):
       t=threading.Thread(target=threader)
       t.daemon = True
       t.start()
</code></pre>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably need to use something provided by the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="nofollow noreferrer">mulitprocessing.pool</a> library.</p>
<p>Let's try to use the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map" rel="nofollow noreferrer">map</a> function:</p>
<pre><code>from multiprocessing import Pool

def f(parameter):   #in parameter you have a tuple (key, value) from your dict
    result =  requests.get('https://www.nseindia.com/products/dynaContent/common/productsSymbolMapping.jsp', headers=headers, params=parameter[1])
    return (parameters[0], result)


if __name__ == '__main__':
    with Pool() as pool:
        result = pool.map(f, d_thread.items())
        print(result)    #this should show you the results as a list of (key, result)
        print(dict(result))   #here you have a dict of your results
</code></pre>
</div>
<span class="comment-copy">Thanks I guess I went the wrong route when choosing <code>multithreading</code> I will read up on the difference and docs of multiprocessing.</span>
<span class="comment-copy">A quick question if I may, I am getting the result but it is in list format, can I enter the <code>dic</code> key as a parameter either in the list or get a new dict with <code>key</code> and result combination?</span>
<span class="comment-copy">@sid : yes, you could, by default in the function I only returned the result, but you could <code>return (parameters[0], result)</code>where result is the request result, this way you'll have a list that will look like a dict. I updated my answer to follow my comment</span>
