<div class="post-text" itemprop="text">
<p>Lets say i have variables a,b,c,d,e,f.. every time 2 of the 6 variables will have value = 0 randomly. So my code is like this </p>
<pre><code>if(a == 0 and b == 0):
   run c,d,e,f
elif(a == 0 and c == 0):
   run b,d,e,f
...
...
continue until end of all combination
</code></pre>
<p>So the coding will be very long, are there any other approach ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can put all numbers into a list and then feed a list comp of that list into the <code>run</code> function - ignoring elements that are 0:</p>
<pre><code>def run(p1,p2,p3,p4):
    print(p1,p2,p3,p4)

# 3 test cases
for d in [ [ 1,2,0,3,4,0], [0,0,2,3,4,1], [4,3,0,2,1,0]]:
    run(*[x for x in d if x])  #  *[1,2,3] makes python provide the elements as params
</code></pre>
<p>Output:</p>
<pre><code>1 2 3 4
2 3 4 1
4 3 2 1
</code></pre>
<ul>
<li><code>run( *[1,2,3])</code> is the same as <code>run(1,2,3)</code></li>
<li><code>0</code> is Falsy - so <code>*[x for x in d if x]</code> for a <code>d=[0,1,2,3,0]</code> does only use <em>non falsy values</em> of <code>x</code> in <code>d</code>: <code>*[1,2,3]</code></li>
</ul>
<hr/>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value testing</a></li>
<li>you can exchange the list comp <code>run(*[x for x in d if x])</code> against a generator comp if you like <code>run(*(x for x in d if x))</code> to avoid the list creation (not that it matters here ;) )</li>
</ul>
<hr/>
<p>@Mehrdad Dowlatabadi raised an interesting side question - if any other of the params is 0 you get an error due to a mismatch between function parameters and provided parameters from the list comprehension - you can negate that by defining defaults:</p>
<pre><code>def run(p1=0, p2=0, p3=0, p4=0):
    print(p1,p2,p3,p4)
</code></pre>
<p>So if you feed <code>[0,1,2,0,0,0]</code> into it it will still run.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run a function with the variables that aren't set to 0 you can first make a list of elements that are'nt 0</p>
<pre><code>elements = [element for element in a, b, c, d, e if element !=0]
</code></pre>
<p>then call the function with elements list as arguments</p>
<pre><code>run(*elements)
</code></pre>
<p>As a one liner : </p>
<pre><code>run(*[element for element in a, b, c, d, e if element !=0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make run take a list:</p>
<pre><code>def run(lst):
    ...
</code></pre>
<p>then use the filter function:</p>
<pre><code>run(filter(None, [a, b, c, d, e, f]))
</code></pre>
<p><code>filter(None, lst)</code> removes all fals-y elements.</p>
</div>
<span class="comment-copy">what is the meaning of <code>run b,d,e,f</code> ?</span>
<span class="comment-copy">Is <code>run</code> a function call? You want to run a function with the numbers that aren't zero?</span>
<span class="comment-copy">yes yes something along that way</span>
<span class="comment-copy">is it working for [ 1,2,0,0,4,0]?</span>
<span class="comment-copy">@mehrd No - it is not - the other 4 params are not 0 by definition of the question. If you need those, you can use <code>def run(p1=0,p2=0,p3=0,p4=0)</code> to substitute any 0 that were given and filtered out by the list comp.</span>
<span class="comment-copy">i didn't notice.you are right.</span>
