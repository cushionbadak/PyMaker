<div class="post-text" itemprop="text">
<p>I have a structure of the form:</p>
<pre><code>lst= [[['A'], ['B'], ['C']], [['A'], ['B'], ['D'], ['E']], [['B'], ['C']]]
</code></pre>
<p>I want to collapse the innermost layers of the lists such that I get the following structure:</p>
<pre><code>lst= [['A', 'B', 'C'], ['A', 'B', 'D', 'E'], ['B', 'C']]
</code></pre>
<p>I have tried to flatten the list by doing:</p>
<pre><code>[item for sublst in lst for item in sublst]
</code></pre>
<p>But this collapses all layers instead to a one dimensional list.</p>
<p>What is the most pythonic way to address this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to flatten the <em>elements</em> of <code>lst</code>, not <code>lst</code> itself.</p>
<p>So use the double loop list comprehension <em>inside another list comprehension</em>, where the outer comprehension iterates over your top-level list:</p>
<pre><code>[[item for inner in sublst for item in inner] for sublst in lst]
</code></pre>
<p>Since your inner-most lists each only contain a single element, you could also use indexing to get those values:</p>
<pre><code>[[inner[0] for inner in sublst] for sublst in lst]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; lst = [[['A'], ['B'], ['C']], [['A'], ['B'], ['D'], ['E']], [['B'], ['C']]]
&gt;&gt;&gt; [[item for inner in sublst for item in inner] for sublst in lst]
[['A', 'B', 'C'], ['A', 'B', 'D', 'E'], ['B', 'C']]
&gt;&gt;&gt; [[inner[0] for inner in sublst] for sublst in lst]
[['A', 'B', 'C'], ['A', 'B', 'D', 'E'], ['B', 'C']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterate over sublists and index them to get desired output (but this assumes your inner list holds only one element):</p>
<pre><code>lst= [[['A'], ['B'], ['C']], [['A'], ['B'], ['D'], ['E']], [['B'], ['C']]]

result = [[y[0] for y in x] for x in lst]
# [['A', 'B', 'C'], ['A', 'B', 'D', 'E'], ['B', 'C']]
</code></pre>
<p>Optionally, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable</code></a> from <code>itertools</code> (Now this handles any number of elements in inner lists):</p>
<pre><code>from itertools import chain

lst= [[['A'], ['B'], ['C']], [['A'], ['B'], ['D'], ['E']], [['B'], ['C']]]

result = [list(chain.from_iterable(x)) for x in lst]
</code></pre>
</div>
