<div class="post-text" itemprop="text">
<p>I am creating about 200 variables within a single iteration of a python loop (extracting fields from excel documents and pushing them to a SQL database) and I am trying to figure something out. </p>
<p>Let's say that a single iteration is a single Excel workbook that I am looping through in a directory. I am extracting around 200 fields from each workbook.</p>
<p>If one of these fields I extract (lets say field #56 out of 200) and it isn't in proper format (lets say the date was filled out wrong ie. 9/31/2015 which isnt a real date) and it errors out with the operation I am performing.</p>
<p>I want the loop to skip that variable and proceed to creating variable #57. I don't want the loop to completely go to the next iteration or workbook, I just want it to ignore that error on that variable and continue with the rest of the variables for that single loop iteration.</p>
<p>How would I go about doing something like this?</p>
<p>In this sample code I would like to continue extracting "PolicyState" even if ExpirationDate has an error.</p>
<p>Some sample code:</p>
<pre><code>import datetime as dt
import os as os
import xlrd as rd

files = os.listdir(path)

for file in files: #Loop through all files in path directory  
            filename = os.fsdecode(file) 
            if filename.startswith('~'): 
                continue

            elif filename.endswith( ('.xlsx', '.xlsm') ): 
                try:
                    book = rd.open_workbook(os.path.join(path,file)) 
                except KeyError:
                    print ("Error opening file for "+ file) 
                    continue

                    SoldModelInfo=book.sheet_by_name("SoldModelInfo")
                    AccountName=str(SoldModelInfo.cell(1,5).value)
                    ExpirationDate=dt.datetime.strftime(xldate_to_datetime(SoldModelInfo.cell(1,7).value),'%Y-%m-%d')
                    PolicyState=str(SoldModelInfo.cell(1,6).value)
                    print("Insert data of " + file +" was successful")
            else:
               continue               
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As suggested you could use multiple <code>try</code> blocks on each of your extract variable, or you could streamline it with your own custom function that handles the <code>try</code> for you:</p>
<pre><code>from functools import reduce, partial

def try_funcs(cell, default, funcs):
    try:
        return reduce(lambda val, func: func(val), funcs, cell)
    except Exception as e:
        # do something with your Exception if necessary, like logging.
        return default

# Usage:

AccountName = try_funcs(SoldModelInfo.cell(1,5).value, "some default str value", str)
ExpirationDate = try_funcs(SoldModelInfo.cell(1,7).value), "some default date", [xldate_to_datetime, partial(dt.datetime.strftime, '%Y-%m-%d')])
PolicyState = try_funcs(SoldModelInfo.cell(1,6).value, "some default str value", str)
</code></pre>
<p>Here we use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a> to repeat multiple functions, and pass <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>partial</code></a> as a frozen function with arguments.</p>
<p>This can help your code look tidy without cluttering up with lots of <code>try</code> blocks.  But the better, more explicit way is just handle the fields you anticipate might error out individually.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use multiple try blocks. Wrap each decode operation that might go wrong in its own try block to catch the exception, do something, and carry on with the next one.</p>
<pre><code>            try:
                book = rd.open_workbook(os.path.join(path,file)) 
            except KeyError:
                print ("Error opening file for "+ file) 
                continue

            errors = []

            SoldModelInfo=book.sheet_by_name("SoldModelInfo")
            AccountName=str(SoldModelInfo.cell(1,5).value)
            try:
                ExpirationDate=dt.datetime.strftime(xldate_to_datetime(SoldModelInfo.cell(1,7).value),'%Y-%m-%d')
            except WhateverError as e:
                # do something, maybe set a default date?
                ExpirationDate = default_date
                # and/or record that it went wrong?
                errors.append( [ "ExpirationDate", e ])
            PolicyState=str(SoldModelInfo.cell(1,6).value)
            ...
            # at the end
            if not errors:
                print("Insert data of " + file +" was successful")
            else:
                # things went wrong somewhere above. 
                # the contents of errors will let you work out what
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, basically you need to wrap your <code>xldate_to_datetime()</code> call into <code>try ... except</code></p>
<pre><code>import datetime as dt

v = SoldModelInfo.cell(1,7).value

try:
    d = dt.datetime.strftime(xldate_to_datetime(v), '%Y-%m-%d')
except TypeError as e:
    print('Could not parse "{}": {}'.format(v, e)
</code></pre>
</div>
<span class="comment-copy">Chunk under the <code>except</code> after <code>continue</code> isn't even reachable?</span>
<span class="comment-copy">Your indentation looks off. You field extractions should be <i>after</i> the <code>except KeyError</code>, not part of it. You also need to catch (and apparently ignore) errors for each assignment separately.</span>
<span class="comment-copy">Sorry I have code of over 500 lines so it was a pain to provide a sample of it. I would need to do a try-except for every single variable? I guess that isnt a bad solution I just didnt know if that was what it would take. Also, the code under the except IS reachable. I have ran this code many times and it works. If it hits the except it goes to next loop, if not it goes to variable extraction.</span>
<span class="comment-copy">Are your data all consisted of one row within the sheet? It's a bit confusing in your example as each iteration is per file not per row in the <code>xls</code>.  Because my next question would be if they were in multiple rows, if one row has erroneous data is the entire row thrown out or just skip the particular error value.</span>
<span class="comment-copy">I think what @chepner is saying regarding your indentation is that the <code>SoldModelInfo</code> parts should be unindented one level, because once your code hits <code>continue</code> it would no longer execute the codes under <code>SoldModelInfo</code>.  Possibly in your code it is indented correctly just not in your sample.</span>
<span class="comment-copy">Would this have any performance advantage compared to multiple try-excepts?</span>
<span class="comment-copy">No.  In essence it's doing the same thing, and if you are mostly passing in one function at a time you would need to update the <code>try_funcs</code> to not use reduce each time.  This just helps tidy up your code without all the <code>try</code> blocks and help provide a default value in the same line.</span>
<span class="comment-copy">Is there a way to append the variable name that I am setting the try_funcs function to? Ie. could I append "ExpirationDate" automatically if it had an exception when the try_funcs function is called?</span>
<span class="comment-copy">Not automatically without jumping through some hoops (I'd imagine <code>inspect</code> module can come in handy but I'm not sure if it'd work or is worth the trouble)... probably better to just update <code>try_funcs</code> to also include the variable name as a <code>string</code> if that matters to you, then just log the variable name as part of the <code>except</code> clause.  <code>try_funcs('ExpirationDate', SoldModelInfo.cell(1,7).value), "some default", [some_funcs, ...])</code></span>
<span class="comment-copy">Here's a relevant question regarding inspecting the variable name if you're interested: <a href="https://stackoverflow.com/questions/8875202/can-an-object-inspect-the-name-of-the-variable-its-been-assigned-to" title="can an object inspect the name of the variable its been assigned to">stackoverflow.com/questions/8875202/â€¦</a></span>
<span class="comment-copy">xldate_to_datetime is a proprietary function I have created. I am not using the one from xlrd.</span>
<span class="comment-copy">@Coldchain9 I don't understand what you mean. What exception occurs when date is in wrong format?</span>
<span class="comment-copy">I believe the error is coming from Excel because the user typed in '9/31/2015' so Excel doesnt recognize it as a date thus sends it in as a string instead of a float date which is the usual case when extracting an xldate.                                          <code>TypeError: unsupported type for timedelta days component: str </code>                                                                              from function                                   <code>def xldate_to_datetime(xldate):          temp=dt.datetime(1899,12,30)     delta=dt.timedelta(days=xldate)     return temp+delta</code></span>
<span class="comment-copy">Ok, I updated the sample code. Instead of <code>ValueError</code> you need to catch <code>TypeError</code></span>
