<div class="post-text" itemprop="text">
<p>Is there a way that in a class methods I can use an instance variable to perform a calculation?</p>
<p>Very simplified, this is what I am attempting to do:</p>
<pre><code>class Test:

  def __init__(self, a):
    self.a = a

  @classmethod
  def calculate(cls, b):
     return self.a + b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>all I want is to declare a variable 'a', then use it in a class method for calculation purposes.</p>
</blockquote>
<p>If you want to cache a class-wide value, these are your basic options:</p>
<p>Set value explicitly:</p>
<pre><code>class Foo:
    @classmethod
    def set_foo(cls):
        print('Setting foo')
        cls.foo = 'bar'

    def print_foo(self):
        print(self.__class__.foo)

Foo.set_foo()      # =&gt; 'Setting foo'
Foo()
Foo().print_foo()  # =&gt; 'bar'
</code></pre>
<p>Set value at class init:</p>
<pre><code>class Foo:
    print('Setting foo')
    foo = 'bar'

    def print_foo(self):
        print(self.__class__.foo)
# =&gt; 'Setting foo'

Foo()
Foo()
Foo().print_foo()  # =&gt; 'bar'
</code></pre>
<p>Set value at first instance init:</p>
<pre><code>class Foo:
    def __init__(self):
        if not hasattr(self.__class__, 'foo'):
            print('Setting foo')
            self.__class__.foo = 'bar'

    def print_foo(self):
        print(self.__class__.foo)

Foo()              # =&gt; 'Setting foo'
Foo()
Foo().print_foo()  # =&gt; 'bar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the namespacing use <code>@staticmethod</code> instead and let users pass in the variables e.g. <code>Test.calculate(a, b)</code></p>
</div>
<span class="comment-copy">There is no <code>self</code> in a class method. Your method would work perfectly fine as a normal instance method. Why push square peg in a round hole? i.e. why do you think you should have a class method, if you are doing calculations on an instance? Your "very simplified" might have been too simplified to understand - all I see is wrong code easily fixable by removing <code>@classmethod</code> and replacing <code>cls</code> with <code>self</code>.</span>
<span class="comment-copy">The <code>.a</code> of <i>which</i> instance should be used in that method? You don't have a preferred <code>self</code> instance, but you could pass an instance (or multiple instances) as explicit parameter to the class function if you really need to.</span>
<span class="comment-copy">The descriptor protocol explicitly allows this; the dot operator will access the <code>__get__</code> method of a descriptor with both the instance and the class. See <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html#functions-and-methods</a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2589690/creating-a-method-that-is-simultaneously-an-instance-and-class-method">Creating a method that is simultaneously an instance and class method</a></span>
<span class="comment-copy">@Amadan my original problem is something along the lines of instantiating a filename in the init of the class, then using that filename in a classmethod to lazily get a pandas dataframe that will be available for all object instances once opened (to save memory)</span>
<span class="comment-copy">I think my question might've been missunderstood, but all I want is to declare a variable 'a', then use it in a class method for calculation purposes. I think that in my <b>init</b> I should just do Test.a = a.</span>
