<div class="post-text" itemprop="text">
<p>The user inserts multiple values and the program determines how many positive values, negative values, zero values, even values, odd values, and the min, max, average, and total of those values. The code works, however it's quite messy.   </p>
<pre><code>negative=0
zero=0
positive=0
even=0
odd=0
max=0
min=0
a=int(input('Number of values:'))
b=int(input('First value:'))
if b==0:
    zero=1
if b&lt;0:
    negative=1
if b&gt;0:
    positive=1
if b%2==0:
    even=1
else:
    odd=1
if b&gt;max:
        max=b
total=b
for x in range(a-1):
    b=int(input('Next value:'))
    total+=b
    if b==0:
        zero+=1
    if b==0:
          zero+=1
    if b&lt;0:
          negative+=1
    if b&gt;0:
          positive+=1
    if b%2==0:
          even+=1
    else:
         odd+=1
    if b&gt;max:
        max=b
    if b&lt;max:
        min=b
print('Negative values:',negative)
print('Zero values:',zero)
print('Positive values:',positive)
print('Even values:',even)
print('Odd values:',odd)
print('Total:',total)
print('Minimum:',min)
print('Maximum:',max)
print('Average:',total/a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's two parts of the script essentially doing the same thing, except that you're asking the user <code>"First Value"</code> instead of <code>"Next value"</code>. So I would just merge them together in a loop and determine what msg to use.</p>
<p>There's also a lack of white space everywhere which makes it harder to read. Check out Python's <a href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements" rel="nofollow noreferrer">PEP 8</a> guide to standard conventions.</p>
<p>You can also use more descriptive variable names so it's more readable at a glance.</p>
<p>Also be careful naming your variables <code>min</code> and <code>max</code>. Those are already built-in methods in Python that you're overriding. </p>
<pre><code>negative = 0
zero = 0
positive = 0
even = 0
odd = 0
maxVal = 0
minVal = 0
total = 0

count = int(input('Number of values:'))

for i in range(count):
    if i == 0:
        msg = 'First value:'
    else:
        msg = 'Next value:'

    val = int(input(msg))

    total += val

    if val == 0:
        zero += 1

    if val &lt; 0:
        negative += 1

    if val &gt; 0:
        positive += 1

    if val % 2 == 0:
        even += 1
    else:
        odd += 1

    if val &gt; maxVal:
        maxVal = b

    if val &lt;= minVal &lt;= val and val &lt; maxVal:
        minVal = val

print('Negative values:', negative)
print('Zero values:', zero)
print('Positive values:', positive)
print('Even values:', even)
print('Odd values:', odd)
print('Total:', total)
print('Minimum:', minVal)
print('Maximum:', maxVal)
print('Average:', total / count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I made a rendition of your code that in my mind is neater, this way you aren't just storing values you have a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> that remembers all the values put in and the number of times they were used. Also fixed your whitespace and <code>times_to_run</code> is more descriptive than <code>a</code> and <code>value</code> is more descriptive than <code>b</code>. I also just used the iteration number you're on as the <code>n'th</code> number being input</p>
<pre><code>from collections import Counter

total = 0
all_numbers = Counter()

times_to_run = int(input('Number of values: '))

for x in range(times_to_run):
    value = int(input(f'Value {x + 1}: '))
    total += value
    all_numbers[value] += 1

negative = sum(all_numbers[n] for n in all_numbers if n &lt; 0)
zero = all_numbers[0]
positive = sum(all_numbers[n] for n in all_numbers if n &gt; 0)
even = sum(all_numbers[n] for n in all_numbers if abs(n) % 2)
odd = sum(all_numbers[n] for n in all_numbers if not abs(n) % 2)
max = max(all_numbers)
min = min(all_numbers)

print()
print('Negative values:',negative)
print('Zero values:',zero)
print('Positive values:',positive)
print('Even values:',even)
print('Odd values:',odd)
print('Total:',total)
print('Minimum:',min)
print('Maximum:',max)
print('Average:',total / times_to_run)
</code></pre>
<p>To test:</p>
<pre><code>Number of values: 10
Value 1: -1
Value 2: -1
Value 3: 5
Value 4: 2
Value 5: 0
Value 6: 3
Value 7: 55
Value 8: 8
Value 9: 10
Value 10 :4

Negative values: 2
Zero values: 1
Positive values: 7
Even values: 5
Odd values: 5
Total: 85
Minimum: -1
Maximum: 55
Average: 8.5
</code></pre>
</div>
<span class="comment-copy">The only thing that feels messy is the lack of whitespace.</span>
<span class="comment-copy">ok thank, it's been noted. do you think there's too much repetition?</span>
<span class="comment-copy">You could use a <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a></span>
<span class="comment-copy">Hey! Check out <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a> for a good home for this kind of questions!</span>
<span class="comment-copy">I'm voting to close this question as off-topic because posts looking for critique/review of working code are related to <a href="https://codereview.stackexchange.com">Code Review SE</a></span>
<span class="comment-copy">how is i equal to zero?</span>
<span class="comment-copy">Because we're taking the <code>range</code> of the number of values the user wants to put in. So no matter what number is input, the first time the loop iterates <code>i</code> will always equal to <code>0</code>. Try a quick search on what <code>range</code> does if you're still unsure.</span>
<span class="comment-copy">Ah, thanks, buddy your code looks much better and professional than mine lol</span>
<span class="comment-copy">No problem, hopefully, this helps you grasp how to use pythons many libraries. If you have trouble understanding anything let me know!</span>
<span class="comment-copy">I exactly don't really know how to use the counter as I just started coding</span>
<span class="comment-copy">but don't worry I'll figure it out</span>
<span class="comment-copy">If you know what a <code>dict</code> is, it's a <code>dict</code> that assigns a <i><code>number_of_occurances</code></i> integer to a key automatically. and if the key doesn't exist it defaults to 0.</span>
