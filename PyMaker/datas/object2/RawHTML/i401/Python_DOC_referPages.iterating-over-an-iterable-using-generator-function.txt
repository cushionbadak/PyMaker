<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/24527006/split-a-generator-into-chunks-without-pre-walking-it">Split a generator into chunks without pre-walking it</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>im facing this question, and I was hoping some of you might help out:</p>
<blockquote>
<p>Write a function that accepts an iterable and a positive number n. The function returns a new iterator that gives values from the original in tuples of length n. Pad missing values with 'None' if needed for the very last tuple.</p>
</blockquote>
<p>for example:</p>
<p><code>for x in bunch_together(range(10),3): print(x)</code></p>
<p>return values are</p>
<p><code>(0, 1, 2)
(3, 4, 5)
(6, 7, 8)
(9, None, None)</code></p>
<p>This is what I come up with so far:</p>
<pre><code>def bunch_together(iterable,n):
    tup = tuple()
    for item in iterable:
        for i in range(n):
            tup += (i,)
        yield tup
</code></pre>
<p>but this obviously doesn't work because I didnt accounted for the range at all(the output as of now looks something like this:</p>
<pre><code>(0, 1, 2)
(0, 1, 2, 0, 1, 2)
(0, 1, 2, 0, 1, 2, 0, 1, 2)
...#(goes on)
</code></pre>
<p>I could either create a generator of build an iterator (as in building a class composed of init iter and next)
Thanks for the help! </p>
</div>
<div class="post-text" itemprop="text">
<p>Try initializing tuple inside <code>for</code> loop</p>
<pre><code>def bunch_together(iterable,n):

    for k in range(0,len(iterable),n):
        tup = tuple()
        for i in range(k,k+n):
            tup += (iterable[i] if i&lt;len(iterable) else None,) # condition to check overflow
        yield tup

for x in bunch_together(range(10),3): 
    print(x)
</code></pre>
<p>Output</p>
<pre><code>(0, 1, 2)
(3, 4, 5)
(6, 7, 8)
(9, None, None)
</code></pre>
</div>
<span class="comment-copy">Note that <a href="https://stackoverflow.com/q/24527006/364696">the duplicates</a> are actually more complicated than your case (they're trying to avoid filler values). Since you're fine with filler values, <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the <code>grouper</code> recipe from the <code>itertools</code> docs</a> is basically exactly what you need.</span>
