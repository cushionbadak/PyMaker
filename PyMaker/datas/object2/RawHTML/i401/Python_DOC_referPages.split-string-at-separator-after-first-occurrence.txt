<div class="post-text" itemprop="text">
<p>I have a string representing a path:</p>
<pre><code>'../../../folder.123/../..'
</code></pre>
<p>My goal is to split the string in two like this:</p>
<pre><code>('../../../folder.123','/../..')
</code></pre>
<p>In other words, given the first occurrence of a sub string, split at the first available separator (in this case <code>/</code>).</p>
<p>The algorithm I have in mind is:</p>
<ul>
<li>Split the string according os.path.sep</li>
<li>Find the index of the first list element matching a sub string ( '.' i.e.)</li>
<li>Concatenate in two variables the elements of the token list up until and over the found index</li>
</ul>
<p>But it really looks that it has too much work for a pythonic function that splits strings... Is there a built-in function I'm missing or a conditional slicing of sort that I could use to achieve the goal?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try to use regular expressions for this job.</p>
<p>Just note that this is an extremely specific (and, at the same time generic) regular expression based on your only sole example.</p>
<pre class="lang-py prettyprint-override"><code>import re

_REGEX = re.compile('^(((\.\.?)?\/)*[^\/]*)((\/?(\.\.)?)*)$')

def split_path(path):
    structure = _REGEX.match(path or '').groups()
    return structure[0], structure[3]

</code></pre>
<h3>Testing</h3>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; split_path('../../../folder.123/../..')
('../../../folder.123', '/../..')

&gt;&gt;&gt; split_path('../../../folder.123')
('../../../folder.123', '')

&gt;&gt;&gt; split_path('folder.123')
('folder.123', '')

&gt;&gt;&gt; split_path('/')
('/', '')

&gt;&gt;&gt; split_path('')
('', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I understand your question correctly, does this work:</p>
<pre><code>substr = 'folder.123'
location = '../../../folder.123/../..'

separated = location.split(substr, 1)
separated[0] += substr
</code></pre>
<p>This gives:</p>
<pre><code>['../../../folder.123', '/../..']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer"><code>str.parition</code></a> seems to be what you're looking for:</p>
<blockquote>
<p><code>str</code>.<strong><code>partition</code></strong>(<em>sep</em>)</p>
<p>Split the string at the <strong>first occurrence</strong> of <em>sep</em>, and return a 3-tuple containing the part before the separator, the separator
  itself, and the part after the separator. If the separator is not
  found, return a 3-tuple containing the string itself, followed by two
  empty strings.</p>
</blockquote>
<pre><code>s = '../../../folder.123/../..'
p1, p2, p3 = s.partition('folder.123')
my_tup = (p1 + p2, p3)

# ('../../../folder.123', '/../..')
</code></pre>
</div>
<span class="comment-copy">Your string is always in this form <code>../SOMETHING.ELSE/..</code> ?</span>
<span class="comment-copy">Have you tried re.split?</span>
<span class="comment-copy">this is exactly was i was aiming for, thanks!</span>
<span class="comment-copy">this works as intended</span>
