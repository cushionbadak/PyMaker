<div class="post-text" itemprop="text">
<p>Passing the file as an argument and storing to an object reference seems very straightforward and easy to understand for the open() function, however the read () function does not take the argument in, and is using the format file.read() instead. Why does the read function not take in the file as arguments, such as read(in_file), and why is it not included in the Python Standard Library of built-in functions?</p>
<p>I've checked the list of built in functions in the standard library: <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#open</a></p>
<pre><code># calls the open function passing from_file argument and storing to in_file object reference
in_file = open(from_file)

# why is this not written as read(in_file) instead?
in_data = in_file.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not included there because it's not a <em>function</em>, it's a <em>method</em> of the object that's exposing a file-oriented API, which is, in this case, <code>in_file</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you have file reference by <code>in_file = open(from_file)</code> so when you do 
<code>in_file.read()</code> you are calling the read on the reference itself which is equivalent of <code>self</code> it means the object in this case file object </p>
</div>
<span class="comment-copy"><code>open</code> returns an object and that is how you call member functions of a class in Python.</span>
<span class="comment-copy">because, uhm. that is how it is.</span>
<span class="comment-copy">Because that's how OOP naturally does it. You work with <i>objects</i> and call their <i>methods</i>. I don't think we can explain OOP in depth here…</span>
<span class="comment-copy">Python's file reading functions are object-oriented, where <code>read</code> is a method of the <code>file</code> object. Once you get your head around how object oriented programming works, it'll become more obvious to you.</span>
<span class="comment-copy">@JohnGo-Soco thank you for clearing this up. I knew I'll get flak for asking something very simple, but I appreciate you pointing me in the right direction!</span>
<span class="comment-copy">By any chance is it similar to how methods are called in classes? <a href="https://docs.python.org/3/tutorial/classes.html?highlight=method#method-objects" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a>  In this case, the read method (sorry I thought it was a function all along!) is calling object.method instead of class.method as described in the documentation?</span>
<span class="comment-copy">@Antonio: what do you mean by <code>object.method</code> instead of <code>class.method</code>? The object you're referring to is an instance of the class.</span>
<span class="comment-copy">One could easily argue that <code>function</code>, <code>method</code>, <code>procedure</code> etc. are all really the same thing. The difference, in this case, is OOP. <a href="https://softwareengineering.stackexchange.com/a/20948/158109">softwareengineering.stackexchange.com/a/20948/158109</a></span>
<span class="comment-copy">@JohnGo-Soco: No. Since there is a difference, they're not the same thing. The names depend on the language, and in Python, it's definitely different. In C#, they're the same thing. In C++, Python's "methods" are called "member functions".</span>
<span class="comment-copy">I'm going to go with a quote from the person who posted the answer in the link in my previous comment: <code>The point is, none of this is really consistent. It simply reflects the terminology employed by whatever languages are en vogue at the time.</code></span>
