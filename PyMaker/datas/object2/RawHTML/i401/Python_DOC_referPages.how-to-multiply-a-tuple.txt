<div class="post-text" itemprop="text">
<p>I want to multiply a tuple.</p>
<pre><code>y = 0.1, 0.2, 0.2, 0.4, 0.1
x = {('S', 'A', 'C', 'T'): (0.2, 0.1, 0.9, 3, 4), ('S', 'C', 'T'): (0.4. 0.1, 0.3, 3,1)}
</code></pre>
<p>Expected output:</p>
<pre><code>res = {('S', 'A', 'C', 'T'): (0.02, 0.02, 0.18, 1.2, 0.4), ('S', 'C', 'T'): (0.04. 0.02, 0.06, 1.2, 0.1)}
</code></pre>
<p>My code is:</p>
<pre><code>from fuctools import partial:
res = {}
keys = list(set.keys())
vals = list(set.values())
mul = lambda x, y: x*y
for n in vals:
   res.extend(map(partial(mul, x), y))
res = dict(res)
print(res)   
</code></pre>
<p>But it causes an error that the dict has no attribute <code>'extend'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should do the trick:</p>
<pre><code>y = 0.1, 0.2, 0.2, 0.4, 0.1
x = {('S', 'A', 'C', 'T'): (0.2, 0.1, 0.9, 3, 4), ('S', 'C', 'T'): (0.4, 0.1, 0.3, 3,1)}

for k, v in x.items():
    x[k] = tuple(v[i] * y[i] for i in range(len(y)))
</code></pre>
<p>Or alternatively (as Alex Hall suggested in the comment below) you could use the <code>zip</code> function like this:</p>
<pre><code>for k in x.keys():
    x[k] = tuple(a[0] * a[1] for a in zip(y, x[k]))
</code></pre>
<p>I would suggest using one of the above instead of your original approach. But for future reference, the reason you are getting the error <code>dict has no attribute 'extend'</code> is that <code>extend()</code> is a method for lists, not for dictionaries. When you attempt to call <code>res.extend()</code> it is throwing this exception because <code>res</code> is a <code>dict</code>, not a <code>list</code>. If you want to add multiple key/value pairs to a dict, use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>update()</code></a> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the function <code>starmap()</code> with the operator <code>mul</code> inside a dictcomp:</p>
<pre><code>from itertools import starmap
from operator import mul

y = 0.1, 0.2, 0.2, 0.4, 0.1
x = {('S', 'A', 'C', 'T'): (0.2, 0.1, 0.9, 3, 4), ('S', 'C', 'T'): (0.4, 0.1, 0.3, 3, 1)}

{k: tuple(starmap(mul, zip(v, y))) for k, v in x.items()}
# {('S', 'A', 'C', 'T'): (0.020000000000000004, 0.020000000000000004, 0.18000000000000002, 1.2000000000000002, 0.4), ('S', 'C', 'T'): (0.04000000000000001, 0.020000000000000004, 0.06, 1.2000000000000002, 0.1)}
</code></pre>
<p>Alternatively you can use <code>numpy.multiply()</code>:</p>
<pre><code>import numpy as np

y = 0.1, 0.2, 0.2, 0.4, 0.1
x = {('S', 'A', 'C', 'T'): (0.2, 0.1, 0.9, 3, 4), ('S', 'C', 'T'): (0.4, 0.1, 0.3, 3, 1)}

{k: np.multiply(v, y) for k, v in x.items()}
# {('S', 'A', 'C', 'T'): array([0.02, 0.02, 0.18, 1.2 , 0.4 ]), ('S', 'C', 'T'): array([0.04, 0.02, 0.06, 1.2 , 0.1 ])}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can do like follow</p>
<pre><code>from itertools import starmap
import operator
final_dict = { key: list(starmap(operator.mul, zip(value, y))) for key, value in x.items() }
for key, value in final_dict.items():
   print(value)
</code></pre>
</div>
<span class="comment-copy">what's the logic?</span>
<span class="comment-copy">This is good but I would suggest using some longer names and <code>zip</code>.</span>
<span class="comment-copy">Thanks for the feedback Alex. I agree re: longer names and if I had more context on what the application is for, I would use more expressive names. And good call on using zip - I didn't think of that and it definitely is more readable than range(len(y))</span>
<span class="comment-copy">thank you very much this helper my question.. if sum of res <code>(0.02, 0.02, 0.18, 1.2 , 0.4)</code> be <code>(1.82)</code> how about it? I tried using add and sum but not work.</span>
<span class="comment-copy">To sum up a list of numbers you just do <code>sum(the_list_of_numbers)</code>. For examples <code>sum([1,2,3])</code> or <code>a = [5,6,7,8]; sum(a)</code></span>
