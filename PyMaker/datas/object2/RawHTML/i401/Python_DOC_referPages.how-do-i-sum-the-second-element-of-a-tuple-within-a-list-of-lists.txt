<div class="post-text" itemprop="text">
<p>I have a list of lists named <code>allBins</code> which contains several lists which represent different bins, inside those bins are varying numbers of tuples with the format (iD, volume).  I need to iterate through to sum the volumes of the items in each of the bins by summing the second element of the tuples.  </p>
<p>I've tried many things:
<code>sum(bin[1] for bin in allBins)</code> gives me a 'list index out of range' error presumably because some bins have more than one tuple?</p>
<pre><code>allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]
</code></pre>
<p>I need a line of code that, depending on which bin I choose to sum, gives me the following integers:</p>
<p>1st bin: <code>20</code> </p>
<p>2nd bin: <code>17</code></p>
<p>3rd bin: <code>21</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem you have is you want to only sum one bin, but you're trying to sum across all bins. This means when you access the first bin, with the value <code>[(3,20)]</code> and ask for element with index 1, there is only an element with index 0 and you get the out of bounds error. </p>
<p>You want something like this:</p>
<pre><code>def sum_bin(bin_num, data):
    my_bin = data[bin_num]
    return sum(t[1] for t in my_bin)

&gt;&gt;&gt; sum_bin(0, allBins)
20
&gt;&gt;&gt; sum_bin(1, allBins)
17
&gt;&gt;&gt; sum_bin(2, allBins)
21
</code></pre>
<p>as a "one liner", assuming you have a variable capturing the bin you want</p>
<pre><code>sum(t[1] for t in allBins[bin_idx])
</code></pre>
<p>This is called a <a href="https://stackoverflow.com/questions/47789/generator-expressions-vs-list-comprehension">generator comprehension</a>, and while it's similar to a list comprehension, there are subtle differences.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list-comprehension:</p>
<pre><code>allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]

print([sum(y[1] for y in x) for x in allBins])
# [20, 17, 21]
</code></pre>
<p>Treating your actual requirement: <em>"I need some sort of loop or comprehension that, depending on which bin I choose to sum"</em>:</p>
<pre><code>allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]

bin_number = 2
print(sum(x[1] for x in allBins[bin_number-1]))
# 17
</code></pre>
<p>You can specify <code>bin_number</code> and the above finds sum for that particular bin.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were close :-)  Just put the summing fragment you gave inside a <a href="https://docs.python.org/3/glossary.html#term-list-comprehension" rel="nofollow noreferrer">list comprehension</a> so that it runs one summation per bin.</p>
<p>FWIW, you can also use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><em>operator.itemgetter()</em></a> for a beautiful, functional approach:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter

&gt;&gt;&gt; allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]
&gt;&gt;&gt; [sum(map(itemgetter(1), bin)) for bin in allBins]
[20, 17, 21]
</code></pre>
<p>Read this as, "make a list of sums for every bin in all bins" where the sums are "sum of item one in each tuple in a bin".</p>
</div>
<div class="post-text" itemprop="text">
<p>Once iterating over the main list, you can use <code>sum</code> to add up the integers.</p>
<pre class="lang-py prettyprint-override"><code>allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]

def sumup(which, allBins):
    return sum(tup[1] for tup in allBins[which])

print(sumup(1, allBins))
</code></pre>
<p>Doc: <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum built-in</a></p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>for c,b in enumerate(allBins):
    if c == bin_you_choose_to_sum:
        partial=0
        for t in b:
            partial+=t[1]
        print("Bin {}: {}".format(c, partial))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following function:</p>
<pre><code>from operator import itemgetter

allBins = [[(3,20)],[(1,11),(0,6)],[(4,16),(2,5)]]

def func(bin_num, all_bins):
    bin = itemgetter(bin_num)(all_bins)
    s = sum(map(itemgetter(-1), bin))
    return s

print(func(2, allBins))
# 21
</code></pre>
</div>
<span class="comment-copy"><code>[sum(l[1] for l in sublst) for sublst in allBins]</code></span>
<span class="comment-copy">what you've posted returns a list with the sums that I want but what I'm looking for is a single integer which is the sum of a particular bin.  I wasn't clear originally, edited my question to reflect this</span>
<span class="comment-copy">thank you, your 'one liner' works when I apply it to the <code>allBins</code> list that I have in my post.  I didn't include it in the question because I thought it was unnecessary but what I am actually trying to do is define a first fit decreasing bin packing function.  The sum calculated from your answer I was going to use to determine if the bin is full.    When I put your one-liner and later call the function it gives me:  'TypeError: list indices must be integers or slices, not tuple'.  Any ideas why this is?</span>
<span class="comment-copy">Can you share how youâ€™re generating that index?</span>
<span class="comment-copy">The entire function won't fit in the comments so it may warrant a new post, but I receive an error here on the line with the if statement The entire function won't fit in the comments so it may warrant a new post, but I receive an error here on the line with the if statement <code>allBins = [items[0]] for item in items:                for bin in bins:             if sum(i[1] for i in bins[bin]) + item[1] &lt;= bin_cap:</code></span>
<span class="comment-copy">I think <code>bin</code> in this case is the actual bin, not the index to it. This means you don't have to use the index of the bin. The code should be changed in your example to <code>sum(i[1] for i in bin)</code></span>
<span class="comment-copy">you're correct and I removed the index, but now the error I receive when I call the function is: <code>TypeError: 'int' object is not subscriptable</code> on that same line</span>
<span class="comment-copy">Your first example says to use a list comprehension, but then you use a generator comprehension to address the actual requirement.</span>
<span class="comment-copy">@munk, is that the reason for a down vote? OP is asking for a comprehension any way.</span>
<span class="comment-copy">It is. I'm not saying you're not answering the question, but it's subtly misleading. I'm imagining someone new coming along and seeing the two solutions with the different syntax and being confused. If you were to clarify that and explain why you're using one instead of the other, I'd change that downvote to an upvote.</span>
<span class="comment-copy">@munk, agree! Maybe I've missed to explain how one differs from another in elaborate manner. Someone as you say who is likely to confuse can always use the <i>comment</i> feature to ask for clarifications. Anyway, thanks for tossing up.</span>
<span class="comment-copy">Because you missed the critical part of the question "depending on which bin I choose to sum", like most of the other answers.</span>
<span class="comment-copy"><code>if c == bin_you_choose_to_sum</code> ;)</span>
<span class="comment-copy">You don't address the key part of the question. "depending on which bin I choose to sum". You sum all of them. The post you reference has the same problem and is also downvoted by me.</span>
