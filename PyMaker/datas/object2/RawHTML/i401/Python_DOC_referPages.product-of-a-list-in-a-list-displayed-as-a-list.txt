<div class="post-text" itemprop="text">
<p>Input Parameter: takes a list of lists of numbers [[x1, x2, x3, ..., xn],[y1, y2, y3, ..., ym],...]</p>
<p>Returns: a single list of numbers where each element is product of the inner list at that position, [x1*x2*x3*...*xn, y1*y2*y3*...*ym, ...]</p>
<p>Cannot use append operator or other built in functions.</p>
<p>I don't know how to exactly approach this. This is what I have so far:</p>
<pre><code>def listProducts(x):
    y = 1
    z = 0
    q = 0
    l = ""
    for i in x:
        for j in range(len(i)):
            z = int(i[j])
            y = z * y
            q = y
            l = str(q) + l
    l = list(l)
    return l

a = [[1],[2,3,4],[10,10,10,10]]
print(listProducts(a))
</code></pre>
<p>I haven't been able to find anything about it online. And I am not supposed to use any built in functions such as numpy or list operators. Just have loops and conversions like list() as shown above.</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach could be to use a list comprehension, and <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer"><code>functools.reduce</code></a> to multiply all elements in the sublists, where you can multiply all elements in the sublist with <a href="https://docs.python.org/2/library/operator.html" rel="nofollow noreferrer"><code>operator.mul</code></a></p>
<pre><code>a = [[1],[2,3,4],[10,10,10,10]]

from operator import mul
from functools import reduce

[reduce(mul,i) for i in a]
# [1, 24, 10000]
</code></pre>
<hr/>
<p>For a solution with no imports, you could do:</p>
<pre><code>l = [1 for i in range(len(a))]
for ix, i in enumerate(a):
    for j in i:
        l[ix] *= j

print(l)
# [1, 24, 10000]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>reduce</code> method in order to get the result of a list multiplication. And use list comprehension to loop through the lists.</p>
<pre><code>from functools import reduce
a = [[1],[2,3,4],[10,10,10,10]]
a = [reduce(lambda x, y: x*y, i) for i in a]
print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def listProducts(x):
y = 1
l = [0]*len(x)
for i in range(len(x)):
    for j in range(len(x[i])):
        z = int(x[i][j])
        y = z * y
    l[i] = y
return l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do simply:</p>
<pre><code>inputlist=[[1,2,3],[4,5,6,7],[8,9,8,7,6]]
outputlist=[]
for each in inputlist:
    result=1
    for EACH in each:
        result=result*EACH
    outputlist.append(result)
print(outputlist)
</code></pre>
<p>Giving an output:</p>
<pre><code>[6, 840, 24192]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simple solution , without use of external library and list operations</p>
<pre><code>a = [[1],[2,3,4],[10,10,10,10]]


len_a= len(a)
new_list = [0]*len_a
product = 1
for i in range(len(a)):
    for j in range(len(a[i])):
        product *= a[i][j]
    new_list[i] = product 
    product = 1

print(new_list)

# output [1, 24, 10000]
</code></pre>
</div>
<span class="comment-copy">I don't think we are allowed to use operators like that, that is where my struggle is. He wants us to understand the logic behind those sort of operators. If that makes sense</span>
<span class="comment-copy">Updated with a solution with no imports @BrettMullenix</span>
<span class="comment-copy">Thank you! That code worked, I was unaware of the enumerate function. Again thank you!</span>
<span class="comment-copy">My professor won't allow us to use list operators such as append or remove sadly. I've already tried doing it this way</span>
<span class="comment-copy">@BrettMullenix I edited my answer. Please check.</span>
