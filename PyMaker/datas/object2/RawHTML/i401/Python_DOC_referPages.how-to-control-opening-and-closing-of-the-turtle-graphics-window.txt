<div class="post-text" itemprop="text">
<p>I am writing a program for generating images using the python turtle graphics module. Is there a way to control when the window opens and closes? I know that <code>turtle.bye()</code> and <code>turtle.exitonclick()</code> close the window, but then it is problem to open it again. </p>
<p>Currently I open the window just by assigning <code>turtle.Turtle()</code> to a variable like this: </p>
<pre><code>t = turtle.Turtle()
</code></pre>
<p>I looked in documentation and also here but I didn't find anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's something demonstrating how to hide and redisplay the turtle-graphics window without requiring user input to do so. It uses the tkinter <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/universal.html" rel="nofollow noreferrer"><code>after()</code></a> method to schedule a future call to the function I've named <code>do_turtle_stuff()</code> (if you're interested).</p>
<p>It accomplishes this by "reaching under the covers" and getting the underlying <code>tkinter</code> root window and manipulating it. To allow the user to execute several "commands" it reschedules itself to run gain by making a call to <code>after()</code> itself (unless the user typed in "exit"). You may not need to that for what you're doing.</p>
<pre><code>import turtle


def do_turtle_stuff(root):
    user_input = input('Enter command ("foo", "bar", or "exit"): ')

    if user_input == "exit":
        root.withdraw()  # Hide the turtle screen.
        root.quit()  # Quit the mainloop.
        return
    elif user_input == "foo":
        turtle.forward(50)
        turtle.left(90)
        turtle.forward(100)
    elif user_input == "bar":
        turtle.forward(100)
        turtle.left(90)
        turtle.forward(100)
    else:
        print('Unknown command:', user_input)

    root.after(0, lambda: do_turtle_stuff(root))


root = turtle.getscreen()._root
root.after(0, lambda: do_turtle_stuff(root))
root.mainloop()

print('back in main')
input('Press Enter key to do more turtle stuff ')

root.state('normal')  # Restore the turtle screen.
root.after(0, lambda: do_turtle_stuff(root))
root.mainloop()

print('done')
</code></pre>
</div>
<span class="comment-copy">What's supposed to happen while it's closed? In other words: What's the purpose of being able to do this?</span>
<span class="comment-copy">When it's closed, the code's supposed to continue. I want to generate images based on console input and I'd want it to open after input, draw the image and close after viewing. I think it'll be easiest to use it this way.</span>
<span class="comment-copy"><code>turtle</code> graphics is built on top of Python's <code>tkinter</code> module, which is for GUI programming. This means you'll first need to devise some way of terminating the <code>mainloop()</code> that's running when graphics are being displayed. The only way I can see to do that is by providing a callback function to handle some kind of user input event, such as the pressing of a certain key or clicking the mouse somewhere. Is that acceptable, and if so, what should it be? I suppose you could also run a <code>turtle</code>-based script as a separate process, but doing so would require some relatively advanced programming.</span>
<span class="comment-copy">This is something I was looking for, thanks!</span>
<span class="comment-copy">VectorSVK: That's good to hear...so please consider accepting my answer. See <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">Oh, I'm so sorry, I forgot to do that.</span>
<span class="comment-copy">VectorSVK: Thanks. Although it doesn't show how to open and close turtle-graphics windows, I think you might find the <code>TurtleShell</code> <a href="https://docs.python.org/3/library/cmd.html#cmd-example" rel="nofollow noreferrer">example</a> in the <a href="https://docs.python.org/3/library/cmd.html#module-cmd" rel="nofollow noreferrer"><code>cmd</code></a> module's documentation interesting.</span>
