<div class="post-text" itemprop="text">
<p>I have to write a function that accepts a string as a parameter and return a boolean value (True or False) that indicates whether that string represents a valid basic expression.</p>
<p>I have to assume that these valid expressions consist of one or more <strong><em>positive</em></strong> integers that are separated by basic operators (only +, -, *, and /). The string must start and end with integer. Moreover, a single space must always separate integers and operators in a valid expression.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; chandler("1") 
True
&gt;&gt;&gt; chandler("-1") 
False 
&gt;&gt;&gt; chandler("1 + 22") 
True 
&gt;&gt;&gt; chandler(" 1 + 22") 
False # because this string starts with space 
&gt;&gt;&gt; chandler("1 + ")
False 
&gt;&gt;&gt; chandler("1 22 * 333")
False
&gt;&gt;&gt; chandler("1  /  2")
False # because of two spaces instead of one
&gt;&gt;&gt; chandler ("23 + 45 - 17 * 2")
True
</code></pre>
<p>I have no clues how and from where to start.
I am allowed to use only string and list related things (like methods)</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of how to use regular expressions to solve this problem:</p>
<pre><code>import re

def chandler(s):
    regex = r'\d+( [+*/-] \d+)*'
    if re.fullmatch(regex, s):
        return True
    else
        return False
</code></pre>
<p>What we do here is make a regex string that specifies the pattern to recognize, and then call <code>fullmatch()</code> to make sure that the entire string <code>s</code> matches the given pattern. Let's go over each part of that:</p>
<pre><code>r'             # the beginning of a regex string
\d             # this is shorthand for "any digit" - e.g. the characters 0 through 9
\d+            # adding '+' to it means "we want at least one of these"
[+*/-]         # this specifies a *group* of these four operators we're looking for
( [+*/-] \d+)  # We're looking for a single space, followed by any of those four characters, 
               # followed by another single space, followed by at least one digit
( [+*/-] \d+)* # Adding '*' means "we want at least 0 of that entire expression in the parentheses
</code></pre>
<p>We use <code>re.fullmatch()</code> instead of one of <code>re</code>'s other methods to make sure that the entire string matches what we want. If we used <code>re.match()</code>, then it would match anything with a number at the beginning, regardless of whether the rest of the string wasn't what we wanted.</p>
<p><code>re.fullmatch()</code> returns a regex match object if the string matches, or <code>None</code> (which evaluates to false when you put it in an <code>if</code> statement) otherwise. We just test for whether it's <code>None</code> or not, and return <code>True</code> or <code>False</code> accordingly.</p>
</div>
<div class="post-text" itemprop="text">
<p>How is everyone is overcomplicating it that much? Is just one line of code!</p>
<pre class="lang-py prettyprint-override"><code>import re

def chandler(s):
    return bool(re.match(r'^\d+(\ [\+\-\*\/]\ \d+)*$', s))
</code></pre>
<p>Simply, the regex maps the whole string from start <code>^</code> to the end <code>$</code> expecting one number <code>\d</code> (with at least one digit <code>+</code>).</p>
<p>It allows to add one the operation symbols (<code>[\+\-\*\/]</code>) if they are preceded by a space and followed by another space and again one number with at least one digit.</p>
<p>This last part can be repeated multiple times with operator <code>*</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use regex:</p>
<pre><code>import re


def chandler(test_str):
    return bool(re.fullmatch(r'^\d+(\ [+-/*//]\ \d+)*$', test_str))

print(chandler("1"))
# returns True
print(chandler("-1"))
# returns False
print(chandler("1 + 22"))
# returns True
print(chandler(" 1 + 22"))
# returns False
print(chandler("1 +"))
# returns False
print(chandler("1 22 * 333"))
# returns False
print(chandler("1  /  2"))
# returns False
print(chandler("23 + 45 - 17 * 2"))
# returns True
</code></pre>
<p>Regex breakdown:</p>
<pre><code>'\d+'
    '\d'' matches any digit (0-9)
    '+' means at least once,
    so '\d+' means one or more digits i.e. a number

'(\ [+-/*//]\ \d+)*':
    '\ ' This matches a space
        (The '\' is redundant can just have ' ')
    '[+-/*//]' will match one of these: +.-,* or /
        (we need to escape '*' and '/' with a '/' because they are special characters)
    '\ ' again matches a space
    '\d+' again matches a number
    This block will match thing like ' + 16',
        we can have any number of these so we add a '*'
        this is like the '+' but allows us not to have any matches.
    So this means zero or more copies of &lt;space&gt;&lt;operator&gt;&lt;space&gt;&lt;number&gt;
</code></pre>
</div>
<span class="comment-copy">This looks like a job for <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a>. If you're not allowed to use those, however, I'd advise making a <a href="https://brilliant.org/wiki/finite-state-machines/" rel="nofollow noreferrer">finite state machine</a> reading the string: first, look for a number, then look for a space, then for an operator, then a space, then a number, etc.</span>
<span class="comment-copy"><code># Adding '+' means "we want at least 0 of that entire expression in the parenthese"</code>  I think you meant adding <code>'*' </code>?</span>
<span class="comment-copy">thanks a lot, green cloak guy! I had no idea about re. But your breakdown makes it so much easier to understand! You are awesome! I have one question. if I write the group in this order [+-*/] then it shows error. But if I write exactly like yours then it works. why the order is important here?</span>
<span class="comment-copy">Certain regex characters have different meanings in different situations. For example, <code>+</code> and <code>*</code> have their "look for how many of this" meaning normally, but have no particular meaning when within a group. Similarly, the <code>-</code> character stands for "a range of characters" when you're putting it inside a square-bracket group (e.g. <code>0-9</code>). Putting it at the beginning or end is unambiguous that you don't mean it as a range; otherwise, you would need to escape it (write <code>\-</code> instead of <code>-</code>)</span>
<span class="comment-copy">Shorter doesn't mean simpler, nor better.</span>
<span class="comment-copy">It is both in this case ;)</span>
<span class="comment-copy">This one is no working, admits only symbols, negative results...</span>
<span class="comment-copy">I mistakenly put <code>\d*</code> instead of <code>\d+</code>. Fixed, thanks</span>
<span class="comment-copy">Can you breakdown the regex please? Thank you.</span>
<span class="comment-copy">@Moondra will do, thanks</span>
