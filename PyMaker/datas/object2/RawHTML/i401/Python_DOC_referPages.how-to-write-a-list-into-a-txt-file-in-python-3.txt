<div class="post-text" itemprop="text">
<p>I want to make a program (Python 3.6) that can read multiple log files and write all the lines from those files into a txt file.</p>
<p>The code that I've already tried can read all the lines, but can't write all lines to a txt file. I've tried this:</p>
<pre><code>allFiles = glob.glob('C:\Program Files\PostgreSQL\9.6\data\pg_log\*.log')
def readFile(allFiles):
    for file in allFiles:
        f = open(file,'r')
        allLines = []
        for line in f:
            allLines.append(line)
            print(line)
        f.close()

    with open ('readFile.txt',mode='wt', encoding='utf-8') as fileOutput:
        for line in allLines:
            fileOutput.write(line)
        fileoutput.close()
</code></pre>
<p>I expect all the lines from all files can written in a txt file, but results I've got was lines written in txt only line that have the same date as the date of execution of this program.</p>
<p>What should I do ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are resetting allLines to an empty list each time you read a file. Move the <code>allLines = []</code> line to outside your for loop. In other words, the start of your function should be:</p>
<pre><code>def readFile(allFiles):
    allLines = []
    for file in allFiles:
        f = open(file,'r')
</code></pre>
<p>Also, a couple "style notes": It is generally considered bad form to use a variable name that already has meaning in Python, even though the language allows it. Thus it would be a good idea to use something other than "file". Also, Python convention is that underscores are used between words in variable names, not Camel Case. Thus "allLines" would be "all_lines". You might want to see the Python Style Guide at: <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0008/</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>alllines</code> only holds the lines from the <em>last</em> read file - because you reset it <em>inside</em> the loop to <code>alllines=[]</code>. You need to move this before the loop (or get rid of it - see below).</p>
<p>It would be far easiert to simply concat the files: see <a href="https://stackoverflow.com/questions/13613336/python-concatenate-text-files">Python concatenate text files</a></p>
<hr/>
<p>Your code has a second/third problem - if you have 20 files that each have 1 GB you store 20GB ... in memory ... which is highly inefficient. </p>
<p>It would be better to just write line by line into your new file. Beside that your should use the <code>with open(...) as ..:</code> paradigma when using file objcts like so:</p>
<pre><code>def readFile(allFiles):
    with open ('readFile.txt', mode='wt', encoding='utf-8') as fileOutput:
        for file in allFiles:
            with open(file) as reader:
                for line in reader:
                    fileOutput.write(line)


allFiles = glob.glob('C:\Program Files\PostgreSQL\9.6\data\pg_log\*.log')
readFile(allFiles)
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Python 3.7 - File reading/writing</a></p>
</div>
