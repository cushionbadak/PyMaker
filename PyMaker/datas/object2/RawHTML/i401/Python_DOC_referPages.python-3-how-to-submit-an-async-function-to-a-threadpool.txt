<div class="post-text" itemprop="text">
<p>I want to use both <code>ThreadPoolExecutor</code> from <code>concurrent.futures</code> and async functions. </p>
<p>My program repeatedly submits a function with different input values to a thread pool. The final sequence of tasks that are executed in that larger function can be in any order, and I don't care about the return value, just that they execute at some point in the future.</p>
<p>So I tried to do this</p>
<pre><code>async def startLoop():

    while 1:
        for item in clients:
            arrayOfFutures.append(await config.threadPool.submit(threadWork, obj))

        wait(arrayOfFutures, timeout=None, return_when=ALL_COMPLETED)
</code></pre>
<p>where the function submitted is:</p>
<pre><code>async def threadWork(obj):
   bool = do_something() # needs to execute before next functions
   if bool:
       do_a() # can be executed at any time
       do_b() # ^
</code></pre>
<p>where <code>do_b</code> and <code>do_a</code> are async functions.The problem with this is that I get the error: <code>TypeError: object Future can't be used in 'await' expression</code> and if I remove the await, I get another error saying I need to add <code>await</code>.</p>
<p>I guess I could make everything use threads, but I don't really want to do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend a careful readthrough of Python 3's <a href="https://docs.python.org/3/library/asyncio-dev.html" rel="nofollow noreferrer">asyncio development guide</a>, particularly the "Concurrency and Multithreading" section.</p>
<p>The main conceptual issue in your example that event loops are single-threaded, so it doesn't make sense to execute an async coroutine in a thread pool.  There are a few ways for event loops and threads to interact:</p>
<ul>
<li><p>Event loop per thread.  For example:</p>
<pre><code>async def threadWorkAsync(obj):
    b = do_something()
    if b:
        # Run a and b as concurrent tasks
        task_a = asyncio.create_task(do_a())
        task_b = asyncio.create_task(do_b())
        await task_a
        await task_b

def threadWork(obj):
    # Create run loop for this thread and block until completion
    asyncio.run(threadWorkAsync())

def startLoop():
    while 1:
        arrayOfFutures = []
        for item in clients:
            arrayOfFutures.append(config.threadPool.submit(threadWork, item))

        wait(arrayOfFutures, timeout=None, return_when=ALL_COMPLETED)
</code></pre></li>
<li><p>Execute blocking code in an executor. This allows you to use async futures instead of concurrent futures as above.</p>
<pre><code>async def startLoop():
    while 1:
        arrayOfFutures = []
        for item in clients:
            arrayOfFutures.append(asyncio.run_in_executor(
                config.threadPool, threadWork, item))

        await asyncio.gather(*arrayOfFutures)
</code></pre></li>
<li><p>Use threadsafe functions to submit tasks to event loops across threads.  For example, instead of creating a run loop for each thread you could run all async coroutines in the main thread's run loop:</p>
<pre><code>def threadWork(obj, loop):
    b = do_something()
    if b:
        future_a = asyncio.run_coroutine_threadsafe(do_a())
        future_b = asyncio.run_coroutine_threadsafe(do_b())
        concurrent.futures.wait([future_a, future_b])

async def startLoop():
    loop = asyncio.get_running_loop()
    while 1:
        arrayOfFutures = []
        for item in clients:
            arrayOfFutures.append(asyncio.run_in_executor(
                config.threadPool, threadWork, item, loop))

        await asyncio.gather(*arrayOfFutures)
</code></pre>
<p>Note: This is pretty confusing so I don't recommend it, but I included it for completeness's sake.</p></li>
</ul>
</div>
<span class="comment-copy">Don't fully understand your question. If you use threadpool to execute async functions, you take no advantage. So what is the point?</span>
<span class="comment-copy">@Sraw Not everything being executed is async, only a couple functions at the end. I don't want to spawn heaps of threads to handle this, so I thought I might be able to get the last two running async within the spawned thread.</span>
<span class="comment-copy">Thank you for the detailed response! I will try implement this today.</span>
