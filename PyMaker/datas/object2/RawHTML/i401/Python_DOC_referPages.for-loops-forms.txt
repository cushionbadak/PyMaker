<div class="post-text" itemprop="text">
<p>I am learning python, coming from c++. From what I am reading, there only appears to be two forms of for loops in python. I can either iterate over a range, or through the elements of a collection. I suppose the former really is the latter...so maybe one form.</p>
<p>Is there any other form?</p>
<p>I am used to looping until a condition is false. There doesn't seem to be a way to evaluate a condition in a for loop in Python. Is that correct?</p>
<p>Since there is no (init;condition;post) , how would you do something like iterate over every other string in a collection of strings, in python?</p>
<p>C++ would look like:</p>
<pre><code>string mystuff[] = {"poop", "dooky", "doodoo"};
for(size_t index = 0; index &lt; 3; index += 2)
    cout &lt;&lt; mystuff[index];
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A for loop is the same thing as a while loop, just in a slightly different syntax.  If you have a for loop that looks like</p>
<pre><code>for(init; condition; post)
  //do something
</code></pre>
<p>that is equivalent to the while loop</p>
<pre><code>init;
while(condition)
  //do something
  post;
</code></pre>
<p>because Python has while loops, if you wanted to iterate over every other string, you would change</p>
<pre><code>string mystuff[] = {"poop", "dooky", "doodoo"};
for(size_t index = 0; index &lt; 3; index += 2)
  cout &lt;&lt; mystuff[index];
</code></pre>
<p>to</p>
<pre><code>mystuff = [ "poop", "dooky", "doodoo" ]
index = 0
while index &lt; 3:
  print(mystuff[index])
  index += 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(Most Common)Three kinds of loops : </p>
<ol>
<li><code>Count controlled</code> - You dont have this kind of loop in python </li>
<li><p><code>Condition controlled</code> - while loop in python </p></li>
<li><p><code>Collection controlled</code> - for loop in python</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am used to looping until a condition is false. There doesn't seem to
  be a way to evaluate a condition in a for loop in Python. Is that
  correct?</p>
</blockquote>
<p>Correct. For loops don't evaluate conditions by themselfs, they iterate through an iterable. When you write <code>for i in something</code>, that <code>something</code> must be an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a>. See the link for more details.<br/>
The important part is that a for loop goes through <strong>all</strong> the elements of the iterable. If you want to skip one or more elements, you have to implement a condition inside the loop (like <code>if i == certain_value: continue</code>) or build a second iterable where you exclude the elements that must be skipped and use the for loop on that.</p>
<blockquote>
<p>Since there is no (init;condition;post) , how would you do something
  like iterate over every other string in a collection of strings, in
  python?</p>
</blockquote>
<p>There is an high chance that a collection of string is an iterable (depends of what object you use to collect the strings). If you need conditions on the index you can use <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">range()</a> and use indexes, or <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate()</a>. If fact there are several ways to obtain the same result, other answers already pointed out few of them.</p>
<p>Your c++ code:</p>
<pre><code>string mystuff[] = {"poop", "dooky", "doodoo"};
for(size_t index = 0; index &lt; 3; index += 2)
    cout &lt;&lt; mystuff[index];
</code></pre>
<p>can be rendered for example using <em>range()</em>:</p>
<pre><code>ll = ["poop", "dooky", "doodoo"]
for i in range(0, len(ll), 2):
    print(ll[i])
</code></pre>
<p>In this case <code>range(0, len(ll), 2)</code> is an iterable. In python2 would be a list: <code>[0, 2]</code>. In python3 is a range object, which if converted to a list would be again <code>[0, 2]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider this (credit to @Teghan for pointing out [::2] version):</p>
<pre><code>&gt;     myStrs = ['A', 'B', 'C', 'D', 'E', 'F']
&gt; 
&gt;     for i in range(0, len(myStrs), 2):
&gt;         print(myStrs[i])
&gt; 
&gt;     print([(myStrs[i]) for i in range(0, len(myStrs), 2)])
&gt;     print([x+"a" for x in myStrs[::2]])
</code></pre>
<p>Output:</p>
<blockquote>
<pre><code> A
 C 
 E
 ['A', 'C', 'E']
 ['Aa', 'Ca', 'Ea']
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You might be searching for <a href="https://www.w3schools.com/python/python_while_loops.asp" rel="nofollow noreferrer">while</a> loops</p>
</div>
<div class="post-text" itemprop="text">
<p>You want a while loop:</p>
<pre><code>i = 0
n = int
while i &lt; n:

    # do something

    if some_possible_condition = True:

        i = i + 1
</code></pre>
<p>To your specific example:</p>
<blockquote>
<p>how would you do something like iterate over every other string in a collection of strings, in python?</p>
</blockquote>
<p>You could use a for loop and check a condition:</p>
<pre><code>strings = ['string1', 'string2', ... , 'stringN']

for i in range(len(strings)):
    if i % 2 == 0:

         # do things to strings[i]
</code></pre>
<p>But a more pythonic way would be to access only every other element in the list of strings using list indexing, and process each string:</p>
<pre><code>for each_even_string in strings[::2]:

    # do things to each_even_string 
</code></pre>
</div>
<span class="comment-copy">actually there is one form of for. iterating over an iterable. there are lots of iterable data structures (or, more c++esque, there are lots of data structures, implementing iterable interface) - typed arrays, lists, tuples, dicts, strings etc.</span>
<span class="comment-copy">For this kind of iteration you would use range(&lt;start&gt;, &lt;end&gt;, &lt;stepWidth&gt;)... not sure if i got the order right here but you get the idea: range/xrange gives you basically the same functionality as a regular cpp for-loop.</span>
<span class="comment-copy">Iterating through all of them and filtering out the unwanted ones seems less efficient than only iterating through the wanted ones.</span>
<span class="comment-copy">@ChristopherPisz Yes, that was the point.</span>
