<div class="post-text" itemprop="text">
<p>What does the <code>/</code> mean in Python 3.4's <code>help</code> output for <code>range</code> before the closing parenthesis?</p>
<pre><code>&gt;&gt;&gt; help(range)
Help on class range in module builtins:

class range(object)
 |  range(stop) -&gt; range object
 |  range(start, stop[, step]) -&gt; range object
 |  
 |  Return a virtual sequence of numbers from start to stop by step.
 |  
 |  Methods defined here:
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.

                                        ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It signifies the end of the <a href="http://www.python.org/dev/peps/pep-0436/#functions-with-positional-only-parameters" rel="nofollow noreferrer"><em>positional only</em> parameters</a>, parameters you <em>cannot</em> use as keyword parameters. Such parameters can only be specified in the C API.</p>
<p>It means the <code>key</code> argument to <code>__contains__</code> can only be passed in by position (<code>range(5).__contains__(3)</code>), not as a keyword argument (<code>range(5).__contains__(key=3)</code>), something you <em>can</em> do with positional arguments in pure-python functions.</p>
<p>Also see the <a href="https://docs.python.org/3/howto/clinic.html" rel="nofollow noreferrer">Argument Clinic</a> documentation:</p>
<blockquote>
<p>To mark all parameters as positional-only in Argument Clinic, add a <code>/</code> on a line by itself after the last parameter, indented the same as the parameter lines.</p>
</blockquote>
<p>and the (very recent addition to) the <a href="https://docs.python.org/3/faq/programming.html#what-does-the-slash-in-the-parameter-list-of-a-function-mean" rel="nofollow noreferrer">Python FAQ</a>:</p>
<blockquote>
<p>A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position.</p>
</blockquote>
<p>The syntax has also been defined for possible future inclusion in Python, see <a href="https://www.python.org/dev/peps/pep-0457/" rel="nofollow noreferrer">PEP 457 - <em>Syntax For Positional-Only Parameters</em></a>. </p>
<p>This PEP has recently been revived and has been <a href="https://discuss.python.org/t/pep-570-python-positional-only-parameters/1078/148" rel="nofollow noreferrer">accepted for inclusion in Python</a>. With Python 3.8 still in the alpha phase, it may become a reality in that version, or in 3.9, depending on how quickly <a href="https://github.com/pablogsal/cpython_positional_only" rel="nofollow noreferrer">the reference implementation</a> can be finalised.</p>
<p>Positional-only parameters can lead to cleaner and clearer APIs, make pure-Python implementations of otherwise C-only modules more consistent and easier to maintain, and because positional-only parameters require very little processing, they lead to faster Python code.</p>
</div>
<span class="comment-copy">Anyone who comes across this now may be interested to know that <a href="https://www.python.org/dev/peps/pep-0570/" rel="nofollow noreferrer">PEP 570</a> (which according to <a href="https://discuss.python.org/t/pep-570-python-positional-only-parameters/1078/148" rel="nofollow noreferrer">this discussion post</a> is going to be accepted any time now) is making this syntax legal in pure Python function definitions. I'm not certain it will get into Python 3.8, but there's a good chance of it.</span>
<span class="comment-copy">@Blckknght: thanks for the heads-up! It could get into 3.8, certainly, as it is still in the alpha release phase.</span>
