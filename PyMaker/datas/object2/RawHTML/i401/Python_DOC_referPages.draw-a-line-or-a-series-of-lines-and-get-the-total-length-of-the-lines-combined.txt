<div class="post-text" itemprop="text">
<p>I hope I can explain my idea clearly enough so you can help me figure it out.</p>
<p><a href="https://i.stack.imgur.com/q33Rw.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/q33Rw.png"/></a></p>
<p>LetÂ´s say I click start and the program starts "recording" mouse events, then I click and create a point, click somewhere else and create another point, when the second point is created a line is drawn connecting those two points, and so on until I create the last point I desire and click STOP, and then I get in return the length of the lines combined.</p>
<p>How hard is it to accomplish this in Python? There are libraries that can help me implement something like this? </p>
<p>Is there a way to do this without the points at all? Just click and then click again and a line is drawn and so on?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no additional library needed. You can simply bind <code>&lt;Button-1&gt;</code> to an event and calculate distance by using <code>event.x</code> and <code>event.y</code>.</p>
<pre><code>from tkinter import *
from random import randint

root = Tk()
root.configure(background='DeepSkyBlue4')

class DrawLine:
    def __init__(self,master):
        self.canvas = Canvas(master, width=500, height=500,bg="white")
        self.canvas.bind("&lt;Button-1&gt;", lambda e: self._move(e.x,e.y))
        self.previous_pos = None
        self.total_length = 0
        self.t = Label(master, text=f"Total Length: {self.total_length} pixels",font=('Arial',12),pady=5,bg="DeepSkyBlue4",fg="white")
        self.t.pack()
        self.canvas.pack()
        self.random_position()

    def _move(self,new_x,new_y):
        self.canvas.create_oval(new_x + 5, new_y + 5, new_x - 5, new_y - 5, width=0, fill='red')
        if self.previous_pos:
            old_x, old_y = self.previous_pos
            self.canvas.create_line(old_x, old_y, new_x, new_y, width=2)
            self.total_length += ((new_x - old_x) ** 2 + (new_y - old_y) ** 2) ** (1 / 2)
            self.t.config(text=f"Total Length: {round(self.total_length,2)} pixels")
        self.previous_pos = (new_x, new_y)

    def random_position(self):
        self._move(randint(0,500),randint(0,500))
        root.after(1000,self.random_position)

DrawLine(root)

root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Take a look on <code>Canvas</code> (<a href="http://effbot.org/tkinterbook/canvas.htm" rel="nofollow noreferrer">effbot.org/tkinterbook/canvas.htm</a>).</span>
<span class="comment-copy">To get the length, especially, you're going to need the points. Here's some more <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/canvas.html" rel="nofollow noreferrer">documentation</a> on <code>tkinter</code> library's <code>Canvas</code> widgets which have a <code>create_line()</code> method. As far as length goes, for 2D I'd suggest using <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer"><code>math.hypot()</code></a> which would make calculating it pretty easy (by passing it the difference between coordinates, x0-x1 and y0-y1, of the two points making up each line segment).</span>
<span class="comment-copy">Since it's your code that's creating the lines, why not just calculate the length of each line as it's being drawn, then add all the lengths together?</span>
<span class="comment-copy">Thank you guys, I will take a further look into Canvas.</span>
<span class="comment-copy">Thank you very much Henry, your example really helped me to have an idea how to get this done.</span>
