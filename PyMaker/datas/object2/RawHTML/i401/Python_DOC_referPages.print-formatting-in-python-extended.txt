<div class="post-text" itemprop="text">
<p>I would like to know if there is a better(shorter/cleaner) way of formatting the following code.</p>
<pre><code># Debug info
print('#-----------------------------------------------------------------#')
print('')
print('Id: {_id}, Name: {_name}'.format(_id = self._id, _name = self._name))
print('')
print('    Attributes:')
print('')
print('        {_attribute}: (level: {_level}), (experience: {_exp})'.format(_attribute = self._attribs[0]._name, _level = self._attribs[0]._level, _exp = self._attribs[0]._exp))
print('            Rebirth: (level: {_level}), (experience: {_exp})'.format(_level = self._attribs[0]._rebirth[0], _exp = self._attribs[0]._rebirth[1]))
print('            Rank: (level: {_level}), (experience: {_exp})'.format(_level = self._attribs[0]._rank[0], _exp = self._attribs[0]._rank[1]))
print('            Tier: (level: {_level}), (experience: {_exp})'.format(_level = self._attribs[0]._tier[0], _exp = self._attribs[0]._tier[1]))
</code></pre>
<p>This is the <code>output</code>:</p>
<pre><code>#-----------------------------------------------------------------#

Id: 0, Name: End

    Attributes:

        Vitality: (level: 1), (experience: 0.0)
            Rebirth: (level: 0), (experience: 0.0)
            Rank: (level: 0), (experience: 0.0)
            Tier: (level: 0), (experience: 0.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a few things you can do to neaten this up.</p>
<p>Firstly, <code>print('')</code> can be achieved by adding a <code>'\n'</code> to the end of the previous print statement.</p>
<p>Secondly, the spaces for indentation can be achieved by using <code>'\t'</code></p>
<p>Thirdly, you can break the repeated sections into <code>for</code> loops.</p>
<pre><code># Debug info
print('#-----------------------------------------------------------------#\n')
print('Id: {_id}, Name: {_name}\n'.format(_id=self._id, _name=self._name))
print('\tAttributes:\n')
for a in self.__attribs:
    print('\t\t{_name}: (level: {_level}), (experience: {_exp})\n'.format(_name=a._name, _level=a._level, _exp=a._exp))
    for t, at in [('Rebirth', a._rebirth), ('Rank', a._rank), ('Tier', a._tier)]:
        print('\t\t\t{_title}: (level: {_level}), (experience: {_exp}'.format(_title=t, _level=at[0], _exp=at[1])
</code></pre>
<p>If you are using Python 3, you can utilise f-strings for syntactically neater formatting.</p>
<p><a href="https://medium.com/@NirantK/best-of-python3-6-f-strings-41f9154983e" rel="nofollow noreferrer">https://medium.com/@NirantK/best-of-python3-6-f-strings-41f9154983e</a></p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">docs.python.org/3/library/string.html#format-string-syntax</a></span>
<span class="comment-copy">Use multiline strings..?</span>
