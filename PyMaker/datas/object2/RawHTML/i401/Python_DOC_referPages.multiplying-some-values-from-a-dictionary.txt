<div class="post-text" itemprop="text">
<p>I am writing a program that allows users to select options from a menu and based on that, details of the selected option will be printed. I need to multiply the volume and price to get cost. The problem is, my price and volume are in a nested dictionary. If user select option 1&gt; 3AB, it should print out the cost based off 3AB's volume and price. How do i do that?</p>
<pre><code>    stock = {
        '3AB': {'Name': 'Telcom', 'Purchase Date': '12/12/2018', 'Price': '1.55', 'Volume':'3000'},
        'S12': {'Name': 'S&amp;P', 'Purchase Date': '12/08/2018', 'Price': '3.25', 'Volume': '2000'},
        'AE1': {'Name': 'A ENG', 'Purchase Date': '04/03/2018', 'Price': '1.45', 'Volume': '5000'}
        }

def menu():
    menuChoice =True

    while menuChoice:
        print ("""
        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        """)

        menuChoice= input("Enter Choice:  ")
        if menuChoice=="1": 
            option1()
        elif menuChoice=="2":
           print("\n Buy Stock") 
        elif menuChoice=="3":
           print("\n Sell Stock") 
        elif menuChoice=="4":
           print("\n List Holdings") 
        elif menuChoice=="5":
           print("\n List Sold Stock") 
        elif menuChoice=="0":
            break 
        elif menuChoice !="":
             print("\n Invalid. Please Re-enter choice: ")


def option1():
    input1 = input("Please enter code: ").lower()
    test = stock['3AB']['Volume'] * stock['3AB']['Price']
    print(test)
    if input1.upper() == "3AB":
        print("\nCode: " + input1.upper())
        print("Name: " + stock['3AB']['Name'])
        print("Last Purchase Date: " + stock['3AB']['Purchase Date'])
        print("Average Price: " + stock['3AB']['Price'])
        print("Volume: " + stock['3AB']['Volume'])
        print("Investment Cost ($): " + ())

    elif input1.upper() == "S12":
        print("\nCode: " + input1.upper())
        print("Name: " + stock['S12']['Name'])
        print("Last Purchase Date: " + stock['S12']['Purchase Date'])
        print("Average Price: " + stock['S12']['Price'])
        print("Volume: " + stock['S12']['Volume'])

    elif input1.upper() == "AE1":
        print("\nCode: " + input1.upper())
        print("Name: " + stock['AE1']['Name'])
        print("Last Purchase Date: " + stock['AE1']['Purchase Date'])
        print("Average Price: " + stock['AE1']['Price'])
        print("Volume: " + stock['AE1']['Volume'])

    else:
        print("Stock is not found in your portfolio.")
        print(input("Enter another option: "))

menu()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are storing values as strings in your original dict. To solve it, you can just convert the values to float:</p>
<pre><code>test = float(stock['3AB']['Volume']) * float(stock['3AB']['Price'])
</code></pre>
<p>Or don't change the code and store the values as numbers:</p>
<pre><code>stock = {
        '3AB': {'Name': 'Telcom', 'Purchase Date': '12/12/2018', 'Price': 1.55, 'Volume':3000},
        'S12': {'Name': 'S&amp;P', 'Purchase Date': '12/08/2018', 'Price': 3.25, 'Volume': 2000},
        'AE1': {'Name': 'A ENG', 'Purchase Date': '04/03/2018', 'Price': 1.45, 'Volume': 5000}
        }
</code></pre>
<p>And BTW, your code still has one problem in the following line. You have to define a value to print:</p>
<pre><code>print("Investment Cost ($): " + ())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need numbers in your dict - not string. You can also make your code "snappier" by using a dictionary to call your functions instead of a big if-elif-construct. Using functions to ask for numbers/input is also a good move to cut down on repetetive coding (DRY - dont repeat yourself):</p>
<p>Fix numbers in your dict (or directly use numbers):</p>
<pre><code>stock = {
        '3AB': {'Name': 'Telcom', 'Purchase Date': '12/12/2018', 
                'Price': float('1.55'), 'Volume': int('3000')},
        'S12': {'Name': 'S&amp;P', 'Purchase Date': '12/08/2018',    
                'Price': float('3.25'), 'Volume': int('2000')},
        'AE1': {'Name': 'A ENG', 'Purchase Date': '04/03/2018',  
                'Price': float('1.45'), 'Volume': int('5000')} } 
</code></pre>
<p>Don't repeat yourself:</p>
<pre><code>def inputNumber(text,r):
    """Handles numeric input - input must be inside r (f.e. a range/set/list)."""
    while True:
        try:
            choice = int(input(text))
            if choice in r:
                return choice
        except ValueError:
            print("Wrong choice - try again.")

def inputTextUpper(r):
    """Handles text input - text must be inside r (a list/set/...) and is returned as
     upper(). If nothing is inputted the function returns None."""
    while True:
        try:
            choice = input("Choose one: {} - return to skip.".format(str(r))).upper()
            if choice in r:
                return choice
            elif not choice:
                return None  # empty input
        except ValueError:
            print("Wrong choice - try again.")
</code></pre>
<p>Mapping functions to inputs and call them:    </p>
<pre><code>def buy():
    input1 = inputTextUpper([x for x in stock.keys()])
    what = stock.get(input1) # get the inner dict or None if empty input

    if not what:
        print("Back to main menue")
        return

    # using , instead of + to avoid errors when print numbers - you should probably
    # read about str.format() or f""-strings to make formatting "better"
    print("\nCode: ", input1)
    print("Name: ", what['Name'])
    print("Last Purchase Date: ", what['Purchase Date'])
    print("Average Price: ", what['Price'])
    print("Volume: ", what['Volume'])
    print("Investment Cost ($): ", what['Volume']*what['Price'])

def dummy():
    print("Not implemented")

def menu():

    # map an input to a function call (the name of the function to be called)
    funcMapp = {1:buy, 2:dummy, 3:dummy, 4:dummy,5:dummy} # lots of dummies

    while True:
        menuChoice = inputNumber("""
        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        """, range(6))
        if menuChoice == 0:
            break
        # execute the function choosen    

        funcMapp[menuChoice] ()  # this gets the function from the dict and calls it


menu()
</code></pre>
<hr/>
<p>Output of one run:</p>
<pre><code>        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        Dunno
Wrong choice - try again.

        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        2
Not implemented

        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        1
Choose one: ['3AB', 'S12', 'AE1'] - return to skip.None
Choose one: ['3AB', 'S12', 'AE1'] - return to skip.asdf
Choose one: ['3AB', 'S12', 'AE1'] - return to skip.3ab

Code:  3AB
Name:  Telcom
Last Purchase Date:  12/12/2018
Average Price:  1.55
Volume:  3000
Investment Cost ($):  4650.0

        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        1
Choose one: ['3AB', 'S12', 'AE1'] - return to skip.
Back to main menue

        Menu
        1. List Holding and Sold details for a Stock
        2. Buy Stock
        3. Sell Stock
        4. list Holdings
        5. list Sold Stock
        0. Exit
        0 
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">Why dict.get(key) instead of dict[key]?</a> on how to avoid KeyError's and <a href="https://docs.python.org/3/library/string.html#custom-string-formatting" rel="nofollow noreferrer">string formating</a> for more formating-options.</p>
</div>
<span class="comment-copy">Does this code not work? You can just multiply the price and the volume in each of the if statements in <code>option1</code>. Also notice that <code>input1.upper()</code> is the key to extract data from <code>stock</code>, so you don't need any of these if statements.</span>
