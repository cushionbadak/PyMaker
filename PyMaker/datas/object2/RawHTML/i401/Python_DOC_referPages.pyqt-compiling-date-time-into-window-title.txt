<div class="post-text" itemprop="text">
<p>How can I put the compiling date/time into the window title?
The following example will (of course) not work, because it will put the date and time into the title when the program was started.
Well, I could type in the date and time manually in the source code everytime I'm compiling a new version. However, I'm hoping for a smart and automated solution. Any ideas?</p>
<p>The code:</p>
<pre><code>import sys
from datetime import datetime
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox 

class MyWindow(QWidget):
    def __init__(self):
        super(MyWindow,self).__init__()
        self.setGeometry(100,100,400,200)
        self.setWindowTitle('Version ' + datetime.now().strftime("%Y%m%d-%H%M"))
        # define button1 
        self.button1 = QPushButton('Push me',self)
        self.button1.move(100,100)
        self.button1.setStyleSheet("background-color: #ddffdd")
        self.button1.clicked.connect(self.button1_clicked)

    def button1_clicked(self):
        msg = QMessageBox()
        msg.setText("This is a message box")
        msg.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle("plastique")
    window = MyWindow()
    window.show()
    sys.exit(app.exec_())
</code></pre>
<p>Compiling by:</p>
<pre><code>pyinstaller --onefile tbMinimalPyQt5.py
</code></pre>
<p>The .spec file</p>
<pre><code># -*- mode: python -*-

block_cipher = None


a = Analysis(['tbMinimalPyQt5.py'],
             pathex=['C:\\User\\Test'],
             binaries=[],
             datas=[],
             hiddenimports=[],
             hookspath=[],
             runtime_hooks=[],
             excludes=[],
             win_no_prefer_redirects=False,
             win_private_assemblies=False,
             cipher=block_cipher)
pyz = PYZ(a.pure, a.zipped_data,
             cipher=block_cipher)
exe = EXE(pyz,
          a.scripts,
          a.binaries,
          a.zipfiles,
          a.datas,
          name='tbMinimalPyQt5',
          debug=False,
          strip=False,
          upx=True,
          runtime_tmpdir=None,
          console=True )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One solution is that in .spec a code is written that creates a .py with the data:</p>
<pre><code># -*- mode: python -*-

import datetime

data = {
  "BUILD_DATE": datetime.datetime.now().strftime("%Y%m%d-%H%M")
}

with open('constants.py', 'w') as f:
    for k, v in data.items():
      f.write("{} = \"{}\"\n".format(k, v))

block_cipher = None


a = Analysis(['tbMinimalPyQt5.py'],
             pathex=['C:\\User\\Test'],
# ...
</code></pre>
<p>Then in your .py you import the file constants.py using the values generated in the compilation time:</p>
<pre><code>import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox 
import constants

class MyWindow(QWidget):
    def __init__(self):
        super(MyWindow,self).__init__()
        self.setGeometry(100,100,400,200)
        self.setWindowTitle('Version ' + constants.BUILD_DATE)
        # define button1 
        self.button1 = QPushButton('Push me',self)
        self.button1.move(100,100)
        self.button1.setStyleSheet("background-color: #ddffdd")
        self.button1.clicked.connect(self.button1_clicked)

    def button1_clicked(self):
        msg = QMessageBox()
        msg.setText("This is a message box")
        msg.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle("plastique")
    window = MyWindow()
    window.show()
    sys.exit(app.exec_())
</code></pre>
<p>Finally you compile using the .spec:</p>
<pre><code>pyinstaller tbMinimalPyQt5.spec
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you could use <a href="https://docs.python.org/3/library/os.path.html#os.path.getmtime" rel="nofollow noreferrer"><code>os.path.getmtime()</code></a> to grab the timestamp of your EXE file, and then report that in the window title. The only brittle part is making sure you have the path to your EXE known in an absolute fashion...</p>
<p>So you'd change your <code>datetime.now().strftime("%Y%m%d-%H%M")</code> call above to <code>time.ctime(os.path.getmtime(EXEFILE))</code> instead.</p>
</div>
<span class="comment-copy">thank you for your suggestion. Probably also a possible solution (haven't tested yet). However, I see a potential drawback. I guess the data and time of the .exe file could be manipulated.</span>
<span class="comment-copy">Agreed. I was aiming for quick-and-simple, something I'd use if I was just date-stamping an application used by just a few people internal to my organization. The solution from @eyllanesc is definitely more robust against accidental corruption or deliberate tampering.</span>
