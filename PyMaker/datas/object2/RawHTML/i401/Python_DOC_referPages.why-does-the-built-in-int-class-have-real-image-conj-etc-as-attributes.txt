<div class="post-text" itemprop="text">
<p>I was exploring Python internals and came across:</p>
<pre><code>&gt;&gt;&gt; dir(__builtins__.int)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']
</code></pre>
<p>which is fine but a bit confusing because: why should have an integer class have <code>real</code>, <code>imag</code>, <code>denominator</code> and <code>conjugate</code> as attributes? I note that they don't have the <code>__&lt;item&gt;__</code> format, but it just seems odd.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ints have imag and real parts to support mixed numeric arithmetic. It is completely fine (mathematically and in Python) to add an real integer to a complex number. Python supports this by adding the imag and real attributes to the int class. In Python mixed numeric type arithmetic, the "narrower" type is "widened" to the less-narrow type. This means int's get widened to floats and complex numbers when they are used together.</p>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">Numeric types - int, float, complex</a></p>
</div>
<span class="comment-copy">Because they're <a href="https://docs.python.org/3/library/numbers.html#module-numbers" rel="nofollow noreferrer"><code>numbers</code></a>? Also note you can just do <code>dir(int)</code>.</span>
<span class="comment-copy">And it isn't wasteful? I mean i know all real numbers have no conjugates and no imaginary parts and denominators only make sense if you are talking about rationals which are superset of the integers.</span>
<span class="comment-copy">What do you mean <i>"wasteful"</i>? Of what? Again you seem to be treating these as mathematical not OOP types.</span>
<span class="comment-copy">Real numbers have a conjugate (themselves), an imaginary part (0), and so on. Why would taking the conjugate of a real number fail, though it is perfectly defined, just because you didn't explicitely represent it as a complex?</span>
<span class="comment-copy">Every ints can be seen as a complex number with a 0 imaginary part, likewise also a fraction with a denominator of 1.</span>
