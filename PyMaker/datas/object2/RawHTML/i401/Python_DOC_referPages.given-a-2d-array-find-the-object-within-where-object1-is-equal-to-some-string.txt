<div class="post-text" itemprop="text">
<p>I have a list of Arrays:
[ ['ALC', '10.0', 240001], ['ALC','2401', 240010] ]</p>
<p>How do I get the entire second array entry when I have the string '2401'</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>tests = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010] ]
print(list(filter(lambda x: '2401' in x, tests)))
</code></pre>
<p><code>Filter</code> filters out an item based on boolean criteria you provide. 
So here the critera we are providing is <code>2401 in x</code>.</p>
<p>The <code>x</code> in lambda, represents one element of the list your provided as an argument. The list provided is <code>tests</code>, (at the right-end of the lambda function).</p>
<p>Here are some more examples of <code>filter</code></p>
<p><a href="http://book.pythontips.com/en/latest/map_filter.html" rel="nofollow noreferrer">http://book.pythontips.com/en/latest/map_filter.html</a></p>
<p>Here is the documentation:</p>
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#filter</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>arraylist = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010] ]
for array in arraylist:
    if '2401' in array:
        print array
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a simple list comprehension to get a list of matches:</p>
<pre><code>data = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010] ]

search = '2401'
filtered_data = [entry for entry in data if entry[1] == search]
</code></pre>
<p><code>filtered_data</code> contains <code>[['ALC', '2401', 240010]]</code>.</p>
<p>If there are multiple matches:</p>
<pre><code>data = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010], ['ALC','2401', 240011], ['ALC','2401', 240012] ]

search = '2401'
filtered_data = [entry for entry in data if entry[1] == search]
</code></pre>
<p><code>filtered_data</code> will contain <code>[['ALC', '2401', 240010], ['ALC', '2401', 240011], ['ALC', '2401', 240012]]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A generator approach, also capable to find more than one match:</p>
<pre><code>def find_subarray(arr, s):
    for a in arr:
        if a[1]==s:
            yield a
</code></pre>
<p>Test:</p>
<pre><code>loa = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010], ['ALD','2401', 240010], ['ALF','2401', 240010]]
result = find_subarray(loa, "2401")
print(list(result))
# [['ALC', '2401', 240010], ['ALD', '2401', 240010], ['ALF', '2401', 240010]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just need to iterate over the main list and then use the <code>in</code> operator to check if the "term" you are looking for is inside of the "sub-list"</p>
<pre><code>def find_sublist_with_term(l, term):
    for subl in l:
        if term in subl:
            return subl

mylist = [ ['ALC', '10.0', 240001], ['ALC','2401', 240010] ]
found = find_sublist_with_term(mylist, "2401")
</code></pre>
</div>
<span class="comment-copy">Appreciate the comment! Here is a bonus question... What if instead of just '2401' I have a list of desired strings.</span>
<span class="comment-copy">To improve the long-term usefulness of your answer, could you add some description of what is doing, how it works, etc.?</span>
