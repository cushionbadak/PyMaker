<div class="post-text" itemprop="text">
<p>I have a question on creating an r*c matrix with given number of rows and columns.
I wrote this which takes r number of rows and c number of columns but the problem is in the output formatting, i require a exact output format and can't seem to get it even after trying for so long, if anyone could help me.</p>
<pre><code>def matprint(r, c):
max = r*c
l=[]
for i in range(1,max+1):
    l.append(i)
subList = [l[n:n+c] for n in range(0, len(l),c)]
for q in subList:
    list1 = q
    print( ( '{} ' * len(list1) ).format( *list1 ) )
</code></pre>
<p><a href="https://i.stack.imgur.com/gbU00.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/gbU00.jpg"/></a></p>
<p>see the difference is that mine prints "\n" after spaces and also on the last line. it is not a logical problem, just need help with the formatting.
Thank You</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>str.join</code> to join a list of strings.</p>
<p>This code produces a string of items from <code>list1</code>, separeted by <code>' '</code>, but also adds a white space at the end:</p>
<pre><code>print( ( '{} ' * len(list1) ).format( *list1 ) )
</code></pre>
<p>Instead of that, do this:</p>
<pre><code>list_of_strings = [str(x) for x in list1]
print(' '.join(list_of_strings))
</code></pre>
<p>Or, more compact:</p>
<pre><code>print(' '.join(str(x) for x in list1))
</code></pre>
<p>You have the same problem with the newlines. <code>print</code> adds them after each line. You don't want them after the last line, so you should join the lines as well and then print them without a newline:</p>
<pre><code>lines = [' '.join(str(x) for x in list1) for list1 in subList]
sys.stdout.write('\n'.join(lines))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can invert the problem:</p>
<ul>
<li>print a sublist if it is the first one - without newline after it</li>
<li>if it is not the first one, print a newline followed by the next sublist</li>
</ul>
<p>that way your last line does not have to <code>\n</code> at its end:</p>
<pre><code>def matprint(r, c):
    data = list(range(1,r*c+1))               
    l= [data[i*c:i*c+c] for i in range(r)]

    formatter = ('{} ' * c).strip()     # create the format string once - strip spaces at end

    for i,sublist in enumerate(l):
        if i: # 0 is False, all others are True
            print("")
        print( formatter.format( *sublist ), end="" ) # do not print \n at end


matprint(3, 5)
</code></pre>
<p>I optimized the code a bit as well - you should not use things like <code>max,min,list,dict,...</code> as variable names - they hide the build in functions of the same name. </p>
<p>Your list construction can be streamlined by a list comprehension that chunks your numbers list - see <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a> . </p>
<p>You do not need to recompute the length of your sublist - it is <code>c</code> long.</p>
<p>You need <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">the index from <code>enumerate()</code></a> to decide if the list is "first" - and you need <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">the <code>end=""</code> option of print</a> to avoid autoprinting newlines.</p>
<hr/>
<p>A simpler version without enumerate could be done using list slicing:</p>
<pre><code>def matprint(r, c):
    data = list(range(1,r*c+1))
    l= [data[i*c:i*c+c] for i in range(r)]
    formatter = ('{} ' * c).strip()     # create the format string once - strip spaces at end

    print(formatter.format(*l[0]), end="")  # print the 1st element w/o newline
    for sublist in l[1:]: 
        # print all others including a \n in front
        print( "\n"+formatter.format( *sublist ), end="" ) # do not print \n at end
</code></pre>
</div>
<span class="comment-copy">Did you try just <code>print(*list1)</code>?</span>
<span class="comment-copy">the .join method worked, thanks!</span>
