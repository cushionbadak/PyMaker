<div class="post-text" itemprop="text">
<p>I'm trying to override the <code>__add__</code> method so that the duplicate will not be added. What went wrong with my code?</p>
<pre><code>class Ulist(UserList):

    def __init__(self,value=[]):
        UserList.__init__(self)
        self.value = value

    def __add__(self,addvalue):
        for x in addvalue:
            if x in self.value:
                print("It already exists")
            else:
                return self.value.__add__(addvalue)
</code></pre>
<p>If <code>Ulist=[1,2,3]</code>, and I do <code>Ulist.__add__([3])</code>, I am expecting a message of "<strong>it already exists</strong>". But I got <code>[1,2,3,3]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Everything is an object in Python, including classes, modules, lists, etc. You access objects by the name they are bound to.</p>
<p>When you write <code>class Ulist(UserList): ...</code>, you bind a class object to the name <code>Ulist</code>. Since classes are regular objects, you can do something like</p>
<pre><code>Vlist = Ulist
x = Vlist()
</code></pre>
<p>This will produce the same result as if you had called <code>Ulist</code> directly, since the first assignment just binds the class once to another name.</p>
<p>When you subsequently do <code>Ulist = [1, 2, 3]</code>, you discard the class object that the name <code>Ulist</code> was originally bound to, and bind it to a list object instead. This is because an expression in square brackets is always interpreted as a plain <code>list</code>.</p>
<p>To create an instance of <code>Ulist</code> the class, you have to call the initializer:</p>
<pre><code>x = Ulist([1, 2, 3])
</code></pre>
<p>Now the operation <code>x + [3]</code> should print what you originally expected. Note that you aren't normally supposed to call special methods like <code>__add__</code> directly. Either use <code>+</code>, or more rarely, <a href="https://docs.python.org/3/library/operator.html#operator.add" rel="nofollow noreferrer"><code>operator.add</code></a>.</p>
<p>Another thing to keep in mind is that <a href="https://docs.python.org/3/library/collections.html#userlist-objects" rel="nofollow noreferrer"><code>UserList</code></a> already exposes the underlying <code>list</code> via the <a href="https://docs.python.org/3/library/collections.html#collections.UserList.data" rel="nofollow noreferrer"><code>data</code></a> attribute. Your <code>value</code> attribute is overkill at this point and actually prevents you from using all the other nice features of <code>UserList</code>. A better implementation would look something like</p>
<pre><code>class Ulist(UserList):

    def __init__(self, value=[]):
        super().__init__(value)

    def __add__(self, addvalue):
        for x in addvalue:
            if x in self:
                print(f"{x!r} already exists")
            else:
                return super().__add__(addvalue)
</code></pre>
<p>All in all, though, what you are probably looking for is <code>set</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you have initialize <code>Ulist</code> as variable so it will act as object of list:</p>
<p>to work with your code you need to instantiate the object of the class, see below example</p>
<pre><code>class Ulist():

    def __init__(self, value=[]):

        self.value = value

    def __add__(self, addvalue):
        for x in addvalue:
            if x in self.value:
                print("It already exists")
            else:
                return self.value.__add__(addvalue)


o = Ulist(value=[1, 2, 3])

o.__add__([3])

print o.value
</code></pre>
<p><strong>output</strong></p>
<pre><code>It already exists
[1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">If you really initialize <code>Ulist</code> as <code>[1, 2, 3]</code>, then it's just a list and you no longer have a class by that name in your namespace.</span>
<span class="comment-copy">Got it! Thank you!</span>
<span class="comment-copy">I've expanded my answer a bit.</span>
