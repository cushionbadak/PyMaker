<div class="post-text" itemprop="text">
<p>i am new to python i have two csv file one have contain Bacteria name </p>
<pre><code>import csv
import pandas as pd

from collections import Counter
import re
import operator

#Bacteria File Open

Bac = []
with open ("/home/shayez/Desktop/Bacteria.csv", "r") as csv_file1:
    csv_reader1 = csv.reader(csv_file1,delimiter = ',')

    for lines1 in csv_reader1:
        Bac.append(lines1)
       # print(lines1[0])


#Abstract File Open
Abs = []
with open ("/home/shayez/Desktop/Anti.csv", "r") as csv_file:
    csv_reader = csv.reader(csv_file,delimiter = ',')

    for lines in csv_reader:
        Abs.append(lines[2])



abswordlist = []
 for ab in Abs:
 abswordlist.append(Counter(ab.split()))

 #print (abswordlist)

 cntword = Counter(Abs)

 for Bac in Bac:
 print (f"{Bac}:{abswordlist[Bac]}")
</code></pre>
<p>like this :-</p>
<p><a href="https://i.stack.imgur.com/MN2Tr.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/MN2Tr.png"/></a></p>
<p>this is bacteria file which contain approx 2200 bacteria name </p>
<p>the second  file which contain abstract 
Like this :-
<a href="https://i.stack.imgur.com/VDOUi.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/VDOUi.png"/></a></p>
<p>i have to compare word of first bacteria file name to second Abstract column and  count frequency of bacteria into Abstract and save into third csv</p>
<p>Like This :-
<a href="https://i.stack.imgur.com/ze58f.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ze58f.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you use the pandas library to do this task since it seems you will have lots of aggregations to do.</p>
<p>Since you don't provide a [mcve] I had to make one of my own.
So, you have to read your first csv and keep the values as a list. They will later be your columns you will keep.</p>
<p>Then... using this array. I suggest you use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html" rel="nofollow noreferrer"><code>.apply()</code></a>, combined with <code>split()</code> and <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter()</code></a> (from python collections).
Then, <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html" rel="nofollow noreferrer"><code>join()</code></a> all this using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.json.json_normalize.html" rel="nofollow noreferrer"><code>json_normalize()</code></a>. </p>
<pre><code>import pandas as pd

from collections import Counter
from pandas.io.json import json_normalize

to_keep = ['LONER', 'I', 'AM']

df = pd.DataFrame({
        'date' : ['some date', 'some_other_date', 'lol date'],
        'garbage' : ['I AM A LONER', 'AND SO AM I LOL', 'some other weird sentence']
    })
print(df.head())
#               date                    garbage
# 0        some date               I AM A LONER
# 1  some_other_date            AND SO AM I LOL
# 2         lol date  some other weird sentence

# Here I am showing you the inside of what I insert into json_normalize.
# It basically counts the word occurrences per line. You split the words,    
# and count the list items using `Counter()`
print(df['garbage'].apply(lambda x:Counter(x.split())))
# 0                {'I': 1, 'AM': 1, 'A': 1, 'LONER': 1}
# 1       {'AND': 1, 'SO': 1, 'AM': 1, 'I': 1, 'LOL': 1}
# 2    {'some': 1, 'other': 1, 'weird': 1, 'sentence'...

# Then, you use the json_normalize() function to turn all your jsons into a big DataFrame. And join the result to the previously created DataFrame.
df = df.join( json_normalize(df['garbage'].apply(lambda x:Counter(x.split()))) )
print(df)
#               date                    garbage    A  ...    sentence  some  weird
# 0        some date               I AM A LONER  1.0  ...         NaN   NaN    NaN
# 1  some_other_date            AND SO AM I LOL  NaN  ...         NaN   NaN    NaN
# 2         lol date  some other weird sentence  NaN  ...         1.0   1.0    1.0

# And keep the first indices, here, only date, in addition of the columns you wished to keep earlier.
final_df = df[ ['date'] + [*to_keep] ]
print(final_df)
#               date  LONER    I   AM
# 0        some date    1.0  1.0  1.0
# 1  some_other_date    NaN  1.0  1.0
# 2         lol date    NaN  NaN  NaN
</code></pre>
</div>
<span class="comment-copy">what have you done so far</span>
<span class="comment-copy">i have extracted first csv into list1 and second into second list2 and try to compare list but i am not success</span>
<span class="comment-copy">ok cool, go ahead and post the code you've got</span>
<span class="comment-copy">import csv import pandas as pd from collections import Counter import re import operator   #Bacteria File Open  Bac = [] with open ("/home/shayez/Desktop/Bacteria.csv", "r") as csv_file1:     csv_reader1 = csv.reader(csv_file1,delimiter = ',')          for lines1 in csv_reader1:         Bac.append(lines1)           #Abstract File Open Abs = [] with open ("/home/shayez/Desktop/Anti.csv", "r") as csv_file:     csv_reader = csv.reader(csv_file,delimiter = ',')          for lines in csv_reader:         Abs.append(lines[2])</span>
<span class="comment-copy">I mean post it in your question</span>
