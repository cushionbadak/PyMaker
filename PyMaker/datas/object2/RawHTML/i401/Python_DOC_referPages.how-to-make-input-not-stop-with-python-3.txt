<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10941851/grab-user-input-asynchronously-and-pass-to-an-event-loop-in-python">Grab user input asynchronously and pass to an Event loop in python</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<pre><code>import time

i = 0
while True:
    i += 1
    time.sleep(0.2)
    print("i's value is " + str(i))
    input()
</code></pre>
<p>here is my code. So basicly i want to make this to count forever and when i type something is stops -breaks- the but instead it asks for an input for every loop. Is this even possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to split your code into two threads, one which continuously prints and the other which listens for input. When the input listener receives an input it will need to send a message to the printing thread to stop. </p>
<pre><code>import time
import threading

# Create printer function to print output
# make sure you add a lock so the printing doesn't go all funny
def printer(lock): 
    i = 0
    while True:
        i += 1
        time.sleep(0.2)
        with lock:
            print(f"i's value is {i}")

# create a thread lock to allow for printing
lock = threading.Lock()

# Create the thread to print
p = threading.Thread(target=printer, args=(lock,), daemon=True)

# start the thread
p.start()

# wait for input and when received stop the thread.
if input():
    p.join()
</code></pre>
</div>
<span class="comment-copy">You would have to use multithreading to do something like this. <a href="https://www.tutorialspoint.com/python/python_multithreading.htm" rel="nofollow noreferrer">Tutorial on Multithreading</a>, <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Official Documentation</a> One thread measures the time, the other get's the input.</span>
