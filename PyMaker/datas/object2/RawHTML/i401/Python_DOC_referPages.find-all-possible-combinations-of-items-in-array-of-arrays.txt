<div class="post-text" itemprop="text">
<p>I have an array of arrays that looks like this:</p>
<pre><code>arrays = [['a', 'b'], [1, 2], ['x', 'y', 'z']]
</code></pre>
<p>but could also be expanded.</p>
<p>I need to feed these to <code>my_function(a_or_b, one_or_two, x_y_or_x)</code> in all of their possible combinations (<code>a 1 x</code>, <code>a 2 x</code>, <code>a 1 y</code>, <code>a 1 z</code>, ecc). Using numpy is an option.</p>
<p>Though it appears as a simple problem, I have no idea where to start...</p>
<p>Yes, I could loop like:</p>
<pre><code>for array in arrays:
    for ...
</code></pre>
<p>and then what? Looping through the arrays means that on my second iteration <code>arrays[0]</code> would no longer be first and I'd mess up the order. I also would have duplicates.</p>
<p>How can I do this? I don't care in which order these functions are called, but I do care that they're not called twice with the same combination and that the arguments are in order.</p>
<pre><code>my_function(a, 1, x)
my_function(b, 1, x)
my_function(a, 2, x)
my_function(b, 2, x)
my_function(a, 1, y)
my_function(b, 1, y)
my_function(a, 2, y)
ecc...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> does exactly this. It will generate all combinations from your 3 sublists. Then you can unpack them as arguments in your function:</p>
<pre><code>from itertools import product

combs = product(*arrays)
for comb in combs:
    my_function(*comb)
</code></pre>
<p>Calls</p>
<pre><code>my_function('a', 1, 'x')
my_function('a', 1, 'y')
my_function('a', 1, 'z')
my_function('a', 2, 'x')
my_function('a', 2, 'y')
my_function('a', 2, 'z')
my_function('b', 1, 'x')
my_function('b', 1, 'y')
my_function('b', 1, 'z')
my_function('b', 2, 'x')
my_function('b', 2, 'y')
my_function('b', 2, 'z')
</code></pre>
</div>
<span class="comment-copy">Try <code>itertools.product</code> or one of the other very useful tools in itertools</span>
