<div class="post-text" itemprop="text">
<p>I have a python dictionary like </p>
<pre><code>my_list = [{'orderproduct_id': 76, 'orderproduct_quantity': '500', 'orderbatch_id': 'FOX19022019-2'}, 
           {'orderproduct_id': 76, 'orderproduct_quantity': '500', 'orderbatch_id': 'FOX19022019-1'}, 
           {'orderproduct_id': 77, 'orderproduct_quantity': '100', 'orderbatch_id': 'FOX19022019-1'}]
</code></pre>
<p>I want output like </p>
<pre><code>my_list = [{'orderproduct_id': 76, 
            'batches': [{'orderproduct_quantity': '500', 'orderbatch_id': 'FOX19022019-2'}, 
                        {'orderproduct_quantity': '500', 'orderbatch_id': 'FOX19022019-1'}
                       ]
           }, 
           {'orderproduct_id': 77, 
            'batches': [{'orderproduct_quantity': '100', 'orderbatch_id': 'FOX19022019-1'}
                       ]
           }]
</code></pre>
<p>I am using that in Django view so if any Django function or python concept can work please let me know.
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try something like the following! First of all, create a dictionary to keep as key the <code>orderproduct_id</code>, appending every <code>orderproduct_quantity</code> and <code>orderbatch_id</code> (both as a dictionary to a list). Then, just convert the dictionary to a list of dictionaries using a compression list, where the <strong>key</strong> will be the <code>orderproduct_id</code> and the <strong>value</strong>, the <code>batches</code>.</p>
<pre class="lang-py prettyprint-override"><code>output = {}
for p in my_list:
    id = p['orderproduct_id'] 
    if id not in output: # Create empty list for new IDs
        output[id] = []
    d = { 'orderproduct_quantity': p['orderproduct_quantity'],
          'orderbatch_id': p['orderbatch_id'] }
    output[id].append(d)

output = [{ 'orderproduct_id': k, 'batches': v } for k, v in output.items()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use itertools:</p>
<pre><code>from itertools import groupby

new_list = [ {'orderproduct_id': k, 'batches': list(i)}  
              for k, i in groupby(my_list, lambda x: x['orderproduct_id'])  ]
</code></pre>
<p><strong>Edited</strong></p>
<p>Edited to:</p>
<ol>
<li>Sort list to use <code>groupby</code> safely.</li>
<li>Exclude key on inner list.</li>
</ol>
<p>New code:</p>
<pre><code>from itertools import groupby

my_key = lambda x: x['orderproduct_id']

[ {'orderproduct_id': k, 
   'batches': [ d for d in i if d.pop('orderproduct_id')  ]}  
  for k, i in groupby( sorted(my_list,key=my_key), my_key )  ]
</code></pre>
<p><strong>Explanation</strong> </p>
<p>You are grouping by <code>orderproduct_id</code>. Then, the natural way is to use <code>groupby</code> function. When another developer see <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> in few seconds he/she understand that the code is grouping elements.</p>
<p>Also, my approach uses <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> because you are creating new list/dictionaries from another iterables.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can aggregate your items by <code>orderproduct_id</code> is separated dict:</p>
<pre><code>aggregator = defaultdict(list)
for item in my_list:
    aggregator[item.pop('orderproduct_id')].append(item)
</code></pre>
<p>Then make a new list out of aggregated dict items:</p>
<pre><code>new_list = []
for key, value in aggregator.items():
    new_list.append({
        'orderproduct_id': key,
        'batches': value
    })
</code></pre>
</div>
<span class="comment-copy">You have to write some logic using for loop to achieve this</span>
<span class="comment-copy">I tried some logic but it's not working. Can you please suggest me some logic?</span>
<span class="comment-copy">Can you share what you have tried and where you stucked?</span>
<span class="comment-copy">show your models with query. do you use <code>drf</code>?</span>
<span class="comment-copy">This requires that the input list to be sorted by <code>orderproduct_id</code> first, however.</span>
<span class="comment-copy">Also you are including <code>orderproduct_id</code> inside the batches, which isn't a desired behaviour!</span>
<span class="comment-copy">hi @blhsing, thanks about notice it to me! Fixed on answer.</span>
<span class="comment-copy">hi @JosepJoestar , thanks about notice it to me! Fixed on answer.</span>
