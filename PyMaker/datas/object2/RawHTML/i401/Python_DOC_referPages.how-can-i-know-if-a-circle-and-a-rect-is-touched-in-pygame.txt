<div class="post-text" itemprop="text">
<p>There is a circle and a rect moving on the surface in my program. I want to know if a circle and a rect is touched to each other. It had to be very accurate. I'm sorry for not explaining its detail, but I hope you understood.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider a axis aligned rectangle is given by a top left origin and a width and a height:</p>
<pre><code>rect_tl   = (x, y)
rect_size = (width, height)
</code></pre>
<p>And a circle is given by a center point and a radius:</p>
<pre><code>circle_cpt = (x, y)
circle_rad = r
</code></pre>
<p>If you want to test if this both shapes are intersecting, then n order to catch all possible cases 2 tests have to be carried out.</p>
<p>First it has to be tested if the center point of the circle is inside the rectangle. This can be done by <a href="https://www.pygame.org/docs/ref/rect.html#pygame.Rect.collidepoint" rel="nofollow noreferrer"><code>pygame.Rect.collidepoint</code></a> with ease:</p>
<pre class="lang-py prettyprint-override"><code>rect = pygame.Rect(*rect_tl, *rect_size)
isIsect = rect.collidepoint(*circle_cpt)
</code></pre>
<p>Furthermore it has to be tested if <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> corner point of the rectangle is inside the circle. This is the case if the distance between a corner point and the center point of the circle is less than is or equal the radius of the circle. A point can be represented by <a href="https://www.pygame.org/docs/ref/math.html#pygame.math.Vector2" rel="nofollow noreferrer"><code>pygame.math.Vector2</code></a> and the distance between 2 points can be get by <a href="https://www.pygame.org/docs/ref/math.html#pygame.math.Vector2.distance_to" rel="nofollow noreferrer"><code>pygame.math.Vector2.distance_to()</code></a>:  </p>
<pre class="lang-py prettyprint-override"><code>centerPt = pygame.math.Vector2(*circle_cpt)
cornerPts = [rect.bottomleft, rect.bottomright, rect.topleft, rect.topright]
isIsect = any([p for p in cornerPts if pygame.math.Vector2(*p).distance_to(centerPt) &lt;= circle_rad])
</code></pre>
<p>A function which combines both tests may look like this:</p>
<pre class="lang-py prettyprint-override"><code>def isectRectCircle(rect_tl, rect_size, circle_cpt, circle_rad):

    rect = pygame.Rect(*rect_tl, *rect_size)
    if rect.collidepoint(*circle_cpt):
        return True

    centerPt = pygame.math.Vector2(*circle_cpt)
    cornerPts = [rect.bottomleft, rect.bottomright, rect.topleft, rect.topright]
    if [p for p in cornerPts if pygame.math.Vector2(*p).distance_to(centerPt) &lt;= circle_rad]:
        return True

    return False
</code></pre>
</div>
