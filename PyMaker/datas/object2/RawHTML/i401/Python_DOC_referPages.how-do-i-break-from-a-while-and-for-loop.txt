<div class="post-text" itemprop="text">
<p>Given the following code (that doesn't work):</p>
<pre><code>while True:
    #snip: print out current state
    while True:
        ok = get_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y": break 2 #this doesn't work :(
        if ok == "n" or ok == "N": break
    #do more processing with menus and stuff
</code></pre>
<p>Is there a way to make this work? Or do I have do one check to break out of the input loop, then another, more limited, check in the outside loop to break out all together if the user is satisfied?</p>
<p><strong>Edit-FYI:</strong> get_input is a short function I wrote that supports showing a prompt and default values and all that fanciness and returns <code>stdin.readline().strip()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's another approach that is short. The disadvantage is that you can only break the outer loop, but sometimes it's exactly what you want.</p>
<pre><code>for a in xrange(10):
    for b in xrange(20):
        if something(a, b):
            # Break the inner loop...
            break
    else:
        # Continue if the inner loop wasn't broken.
        continue
    # Inner loop was broken, break the outer.
    break
</code></pre>
<p>This uses the for / else construct explained at: <a href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">Why does python use 'else' after for and while loops?</a></p>
<p>Key insight:  It only <em>seems</em> as if the outer loop always breaks. <strong>But if the inner loop doesn't break, the outer loop won't either.</strong> </p>
<p>The <code>continue</code> statement is the magic here. It's in the for-else clause. <a href="https://stackoverflow.com/a/9980752/673991">By definition</a> that happens if there's no inner break. In that situation <code>continue</code> neatly circumvents the outer break.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.python.org/dev/peps/pep-3136/" rel="noreferrer">PEP 3136</a> proposes labeled break/continue.  Guido <a href="http://mail.python.org/pipermail/python-3000/2007-July/008663.html" rel="noreferrer">rejected it</a> because "code so complicated to require this feature is very rare".  The PEP does mention some workarounds, though (such as the exception technique), while Guido feels refactoring to use return will be simpler in most cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, ordinary logic is helpful.  </p>
<p>If, for some reason, the terminating conditions can't be worked out, exceptions are a fall-back plan.  </p>
<pre><code>class GetOutOfLoop( Exception ):
    pass

try:
    done= False
    while not done:
        isok= False
        while not (done or isok):
            ok = get_input("Is this ok? (y/n)")
            if ok in ("y", "Y") or ok in ("n", "N") : 
                done= True # probably better
                raise GetOutOfLoop
        # other stuff
except GetOutOfLoop:
    pass
</code></pre>
<p>For this specific example, an exception may not be necessary.  </p>
<p>On other other hand, we often have "Y", "N" and "Q" options in character-mode applications.  For the "Q" option, we want an immediate exit.  That's more exceptional.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tend to agree that refactoring into a function is usually the best approach for this sort of situation, but for when you <em>really</em> need to break out of nested loops, here's an interesting variant of the exception-raising approach that @S.Lott described.  It uses Python's <code>with</code> statement to make the exception raising look a bit nicer.  Define a new context manager (you only have to do this once) with:</p>
<pre><code>from contextlib import contextmanager
@contextmanager
def nested_break():
    class NestedBreakException(Exception):
        pass
    try:
        yield NestedBreakException
    except NestedBreakException:
        pass
</code></pre>
<p>Now you can use this context manager as follows:</p>
<pre><code>with nested_break() as mylabel:
    while True:
        print "current state"
        while True:
            ok = raw_input("Is this ok? (y/n)")
            if ok == "y" or ok == "Y": raise mylabel
            if ok == "n" or ok == "N": break
        print "more processing"
</code></pre>
<p>Advantages: (1) it's slightly cleaner (no explicit try-except block), and (2) you get a custom-built <code>Exception</code> subclass for each use of <code>nested_break</code>;  no need to declare your own <code>Exception</code> subclass each time.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, you may also consider making the process of getting and validating the input a function; within that function, you can just return the value if its correct, and keep spinning in the <em>while</em> loop if not.  This essentially obviates the problem you solved, and can usually be applied in the more general case (breaking out of multiple loops).  If you absolutely must keep this structure in your code, and really don't want to deal with bookkeeping booleans...</p>
<p>You may also use <em>goto</em> in the following way (using an April Fools module from <a href="http://entrian.com/goto/" rel="noreferrer">here</a>):</p>
<pre><code>#import the stuff
from goto import goto, label

while True:
    #snip: print out current state
    while True:
        ok = get_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y": goto .breakall
        if ok == "n" or ok == "N": break
    #do more processing with menus and stuff
label .breakall
</code></pre>
<p>I know, I know, "thou shalt not use goto" and all that, but it works well in strange cases like this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Introduce a new variable that you'll use as a 'loop breaker'. First assign something to it(False,0, etc.), and then, inside the outer loop, before you break from it, change the value to something else(True,1,...). Once the loop exits make the 'parent' loop check for that value. Let me demonstrate:</p>
<pre><code>breaker = False #our mighty loop exiter!
while True:
    while True:
        if conditionMet:
            #insert code here...
            breaker = True 
            break
    if breaker: # the interesting part!
        break   # &lt;--- !
</code></pre>
<p>If you have an infinite loop, this is the only way out; for other loops execution is really a lot faster. This also works if you have many nested loops. You can exit all, or just a few. Endless possibilities! Hope this helped!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>
keeplooping=True
while keeplooping:
    #Do Stuff
    while keeplooping:
          #do some other stuff
          if finisheddoingstuff(): keeplooping=False
</code></pre>
<p>or something like that. You could set a variable in the inner loop, and check it in the outer loop immediately after the inner loop exits, breaking if appropriate. I kinda like the GOTO method, provided you don't mind using an April Fool's joke module - its not Pythonic, but it does make sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't the prettiest way to do it, but in my opinion, it's the best way.  </p>
<pre><code>def loop():
    while True:
    #snip: print out current state
        while True:
            ok = get_input("Is this ok? (y/n)")
            if ok == "y" or ok == "Y": return
            if ok == "n" or ok == "N": break
        #do more processing with menus and stuff
</code></pre>
<p>I'm pretty sure you could work out something using recursion here as well, but I dunno if that's a good option for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>To break out of multiple nested loops, without refactoring into a function, make use of a "simulated goto statement" with the built-in <a href="https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration" rel="noreferrer">StopIteration exception</a>:</p>
<pre><code>try:
    for outer in range(100):
        for inner in range(100):
            if break_early():
                raise StopIteration

except StopIteration: pass
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/1257744/can-i-use-break-to-exit-multiple-nested-for-loops">this discussion</a> on the use of goto statements for breaking out of nested loops.</p>
</div>
<div class="post-text" itemprop="text">
<p>Factor your loop logic into an iterator that yields the loop variables and returns when done -- here is a simple one that lays out images in rows/columns until we're out of images or out of places to put them:</p>
<pre><code>def it(rows, cols, images):
    i = 0
    for r in xrange(rows):
        for c in xrange(cols):
            if i &gt;= len(images):
                return
            yield r, c, images[i]
            i += 1 

for r, c, image in it(rows=4, cols=4, images=['a.jpg', 'b.jpg', 'c.jpg']):
    ... do something with r, c, image ...
</code></pre>
<p>This has the advantage of splitting up the complicated loop logic and the processing...</p>
</div>
<div class="post-text" itemprop="text">
<p>And why not to keep looping if two conditions are true?
I think this is a more pythonic way:</p>
<pre><code>dejaVu = True

while dejaVu:
    while True:
        ok = raw_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y" or ok == "n" or ok == "N":
            dejaVu = False
            break
</code></pre>
<p>Isn't it?</p>
<p>All the best.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case, as pointed out by others as well, functional decomposition is the way to go. Code in Python 3:</p>
<pre><code>def user_confirms():
    while True:
        answer = input("Is this OK? (y/n) ").strip().lower()
        if answer in "yn":
            return answer == "y"

def main():
    while True:
        # do stuff
        if user_confirms():
            break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a hidden trick in the Python <code>while ... else</code> structure which can be used to simulate the double break without much code changes/additions.  In essence if the <code>while</code> condition is false, the <code>else</code> block is triggered. Neither exceptions, <code>continue</code> or <code>break</code> trigger the <code>else</code> block. For more information see answers to "<a href="https://stackoverflow.com/q/3295938/1548472">Else clause on Python while statement</a>", or <a href="//docs.python.org/2.7/reference/compound_stmts.html#the-while-statement" rel="nofollow noreferrer">Python doc on while (v2.7)</a>.</p>
<pre><code>while True:
    #snip: print out current state
    ok = ""
    while ok != "y" and ok != "n":
        ok = get_input("Is this ok? (y/n)")
        if ok == "n" or ok == "N":
            break    # Breaks out of inner loop, skipping else

    else:
        break        # Breaks out of outer loop

    #do more processing with menus and stuff
</code></pre>
<p>The only downside is that you need to move the double breaking condition into the <code>while</code> condition (or add a flag variable). Variations of this exists also for the <code>for</code> loop, where the <code>else</code> block is triggered after loop completion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way of reducing your iteration to a single-level loop would be via the use of generators as also specified in the <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">python reference</a></p>
<pre><code>for i, j in ((i, j) for i in A for j in B):
    print(i , j)
    if (some_condition):
        break
</code></pre>
<p>You could scale it up to any number of levels for the loop</p>
<p>The downside is that you can no longer break only a single level. It's all or nothing.</p>
<p>Another downside is that it doesn't work with a while loop. I originally wanted to post this answer on <a href="https://stackoverflow.com/questions/21293336/python-break-out-of-all-loops">Python - `break` out of all loops</a> but unfortunately that's closed as a duplicate of this one </p>
</div>
<div class="post-text" itemprop="text">
<p>My reason for coming here is that i had an outer loop and an inner loop like so:</p>
<pre><code>for x in array:
  for y in dont_use_these_values:
    if x.value==y:
      array.remove(x)  # fixed, was array.pop(x) in my original answer
      continue

  do some other stuff with x
</code></pre>
<p>As you can see, it won't actually go to the next x, but will go to the next y instead.</p>
<p>what i found to solve this simply was to run through the array twice instead:</p>
<pre><code>for x in array:
  for y in dont_use_these_values:
    if x.value==y:
      array.remove(x)  # fixed, was array.pop(x) in my original answer
      continue

for x in array:
  do some other stuff with x
</code></pre>
<p>I know this was a specific case of OP's question, but I am posting it in the hope that it will help someone think about their problem differently while keeping things simple.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>By using a function:</strong></p>
<pre><code>def myloop():
    for i in range(1,6,1):  # 1st loop
        print('i:',i)
        for j in range(1,11,2):  # 2nd loop
            print('   i, j:' ,i, j)
            for k in range(1,21,4):  # 3rd loop
                print('      i,j,k:', i,j,k)
                if i%3==0 and j%3==0 and k%3==0:
                    return  # getting out of all loops

myloop()
</code></pre>
<p>Try running the above codes by commenting out the <code>return</code> as well.</p>
<p><strong>Without using any function:</strong></p>
<pre><code>done = False
for i in range(1,6,1):  # 1st loop
    print('i:', i)
    for j in range(1,11,2):  # 2nd loop
        print('   i, j:' ,i, j)
        for k in range(1,21,4):  # 3rd loop
            print('      i,j,k:', i,j,k)
            if i%3==0 and j%3==0 and k%3==0:
                done = True
                break  # breaking from 3rd loop
        if done: break # breaking from 2nd loop
    if done: break     # breaking from 1st loop
</code></pre>
<p>Now, run the above codes as is first and then try running by commenting out each line containing <code>break</code> one at a time from the bottom.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>break_label = None
while True:
    # snip: print out current state
    while True:
        ok = get_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y":
            break_label = "outer"   # specify label to break to
            break
        if ok == "n" or ok == "N":
            break
    if break_label:
        if break_label != "inner":
            break                   # propagate up
        break_label = None          # we have arrived!
if break_label:
    if break_label != "outer":
        break                       # propagate up
    break_label = None              # we have arrived!

#do more processing with menus and stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>break_levels = 0
while True:
    # snip: print out current state
    while True:
        ok = get_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y":
            break_levels = 1        # how far nested, excluding this break
            break
        if ok == "n" or ok == "N":
            break                   # normal break
    if break_levels:
        break_levels -= 1
        break                       # pop another level
if break_levels:
    break_levels -= 1
    break

# ...and so on
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>probably little trick like below will do if not prefer to refactorial into function</p>
<p>added 1 break_level variable to control the while loop condition</p>
<pre><code>break_level = 0
# while break_level &lt; 3: # if we have another level of nested loop here
while break_level &lt; 2:
    #snip: print out current state
    while break_level &lt; 1:
        ok = get_input("Is this ok? (y/n)")
        if ok == "y" or ok == "Y": break_level = 2 # break 2 level
        if ok == "n" or ok == "N": break_level = 1 # break 1 level
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define a variable( for example <em>break_statement</em> ), then change it to a different value when two-break condition occurs and use it in if statement to break from second loop also.    </p>
<pre><code>while True:
    break_statement=0
    while True:
        ok = raw_input("Is this ok? (y/n)")
        if ok == "n" or ok == "N": 
            break
        if ok == "y" or ok == "Y": 
            break_statement=1
            break
    if break_statement==1:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try using an infinite generator.</p>
<pre><code>from itertools import repeat
inputs = (get_input("Is this ok? (y/n)") for _ in repeat(None))
response = (i.lower()=="y" for i in inputs if i.lower() in ("y", "n"))

while True:
    #snip: print out current state
    if next(response):
        break
    #do more processing with menus and stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to remind you that functions in Python can be created right in the middle of the code and can access the surrounding variables transparently for reading and with <code>nonlocal</code> or <code>global</code> declaration for writing.</p>
<p>So you can use a function as a "breakable control structure", defining a place you want to return to:</p>
<pre><code>def is_prime(number):

    foo = bar = number

    def return_here():
        nonlocal foo, bar
        init_bar = bar
        while foo &gt; 0:
            bar = init_bar
            while bar &gt;= foo:
                if foo*bar == number:
                    return
                bar -= 1
            foo -= 1

    return_here()

    if foo == 1:
        print(number, 'is prime')
    else:
        print(number, '=', bar, '*', foo)
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; is_prime(67)
67 is prime
&gt;&gt;&gt; is_prime(117)
117 = 13 * 9
&gt;&gt;&gt; is_prime(16)
16 = 4 * 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully this helps:</p>
<pre><code>x = True
y = True
while x == True:
    while y == True:
         ok = get_input("Is this ok? (y/n)") 
         if ok == "y" or ok == "Y":
             x,y = False,False #breaks from both loops
         if ok == "n" or ok == "N": 
             break #breaks from just one
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An easy way to turn multiple loops into a single, breakable loop is to use <code>numpy.ndindex</code></p>
<pre><code>for i in range(n):
  for j in range(n):
    val = x[i, j]
    break # still inside the outer loop!

for i, j in np.ndindex(n, n):
  val = x[i, j]
  break # you left the only loop there was!
</code></pre>
<p>You do have to index into your objects, as opposed to being able to iterate through the values explicitly, but at least in simple cases it seems to be approximately 2-20 times simpler than most of the answers suggested.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Solutions in 2 Ways</h1>
<p>With an example: Are these two matrices equal/same? <br/>
matrix1 and matrix2 are same size, n, 2 dimentional matrices.<br/></p>
<p><strong>First Solution</strong>, <em>without a function</em> <br/></p>
<pre><code>same_matrices = True
inner_loop_broken_once = False
n = len(matrix1)

for i in range(n):
    for j in range(n):

        if matrix1[i][j] != matrix2[i][j]:
            same_matrices = False
            inner_loop_broken_once = True
            break

    if inner_loop_broken_once:
        break
</code></pre>
<hr/>
<p><strong>Second Solution</strong>, <em>with a function</em>
<br/>This is the final solution for my case <br/></p>
<pre><code>def are_two_matrices_the_same (matrix1, matrix2):
    n = len(matrix1)
    for i in range(n):
        for j in range(n):
            if matrix1[i][j] != matrix2[i][j]:
                return False
    return True
</code></pre>
<p>Have a nice day!</p>
</div>
<div class="post-text" itemprop="text">
<p>Similar like the one before, but more compact.
(Booleans are just numbers)</p>
<pre><code>breaker = False #our mighty loop exiter!
while True:
    while True:
        ok = get_input("Is this ok? (y/n)")
        breaker+= (ok.lower() == "y")
        break

    if breaker: # the interesting part!
        break   # &lt;--- !
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since this question has become a standard question for breaking into a particular loop, I would like to give my answer with example using <code>Exception</code>. </p>
<p>Although there exists no label named breaking of loop in multipally looped construct, we can make use of <a href="https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions" rel="nofollow noreferrer">User-defined Exceptions</a> to break into a particular loop of our choice. Consider the following example where let us print all numbers upto 4 digits in base-6 numbering system: </p>
<pre><code>class BreakLoop(Exception):
    def __init__(self, counter):
        Exception.__init__(self, 'Exception 1')
        self.counter = counter

for counter1 in range(6):   # Make it 1000
    try:
        thousand = counter1 * 1000
        for counter2 in range(6):  # Make it 100
            try:
                hundred = counter2 * 100
                for counter3 in range(6): # Make it 10
                    try:
                        ten = counter3 * 10
                        for counter4 in range(6):
                            try:
                                unit = counter4
                                value = thousand + hundred + ten + unit
                                if unit == 4 :
                                    raise BreakLoop(4) # Don't break from loop
                                if ten == 30: 
                                    raise BreakLoop(3) # Break into loop 3
                                if hundred == 500:
                                    raise BreakLoop(2) # Break into loop 2
                                if thousand == 2000:
                                    raise BreakLoop(1) # Break into loop 1

                                print('{:04d}'.format(value))
                            except BreakLoop as bl:
                                if bl.counter != 4:
                                    raise bl
                    except BreakLoop as bl:
                        if bl.counter != 3:
                            raise bl
            except BreakLoop as bl:
                if bl.counter != 2:
                    raise bl
    except BreakLoop as bl:
        pass
</code></pre>
<p>When we print the output, we will never get any value whose unit place is with 4. In that case, we don't break from any loop as <code>BreakLoop(4)</code> is raised and caught in same loop. Similarly, whenever ten place is having 3, we break into third loop using <code>BreakLoop(3)</code>. Whenever hundred place is having 5, we break into second loop using <code>BreakLoop(2)</code> and whenver the thousand place is having 2, we break into first loop using <code>BreakLoop(1)</code>.</p>
<p>In short, raise your Exception (in-built or user defined) in the inner loops, and catch it in the loop from where you want to resume your control to. If you want to break from all loops, catch the Exception outside all the loops. (I have not shown this case in example).</p>
</div>
<div class="post-text" itemprop="text">
<p>The way I solve this is by defining a variable that is referenced to determine if you break to the next level or not. In this example, this variable is called 'shouldbreak'.</p>
<pre><code>Variable_That_Counts_To_Three=1
while 1==1:
    shouldbreak='no'
    Variable_That_Counts_To_Five=0
    while 2==2:
        Variable_That_Counts_To_Five+=1
        print(Variable_That_Counts_To_Five)
        if Variable_That_Counts_To_Five == 5:
            if Variable_That_Counts_To_Three == 3:
                shouldbreak='yes'
            break
    print('Three Counter = ' + str(Variable_That_Counts_To_Three))
    Variable_That_Counts_To_Three+=1
    if shouldbreak == 'yes':
        break

print('''
This breaks out of two loops!''')
</code></pre>
<p>This gives a lot of control over how exactly you want the program to break, allowing you to choose when you want to break and how many levels to go down.</p>
</div>
<span class="comment-copy">Exceptions are NOT goto, unless this is some strange Python idiom I have yet to learn...</span>
<span class="comment-copy">@monoxide:  Exceptions seem to behave a bit like a specialized goto that jumps out of the normal execution to the containing try block.  Feels a little like a goto to me.</span>
<span class="comment-copy">See my other question from a while back (<a href="http://stackoverflow.com/questions/174458/exceptions-for-flow-control" title="exceptions for flow control">stackoverflow.com/questions/174458/exceptions-for-flow-control</a>), almost everyone agreed that it was a bad idea, and that was a potentially legitimate use.</span>
<span class="comment-copy">Why doesn't Python just have 'break(n)' where n is the number of levels you want to break out of.</span>
<span class="comment-copy">"Specialised GOTO" == oxymoron. If it's specialised, it's a control structure by definition.</span>
<span class="comment-copy">This is another thought I had, since a get_input_yn() function would be useful elsewhere too, I'm sure.</span>
<span class="comment-copy">agreed in this specific case, but in the general case of 'I have nested loops, what do I do' refactoring may not make sense.</span>
<span class="comment-copy">using an exception may be easier when you must yield instead of using return, however you probably should be using itertools.islice() in such a case.</span>
<span class="comment-copy">Its usually possible to refactor the inner loop into its own method, that returns true to continue, false to break the outer loop. while condition1: / if not MyLoop2(params): break.  An alternative is to set a boolean flag, that is tested at both levels. more = True / while condition1 and more: / while condition2 and more: / if stopCondition: more = False / break / ...</span>
<span class="comment-copy">I agree that striving to use <code>return</code> is the right approach. And the reasoning is that, according to the <i>Zen of Python</i>, "flat is better than nested". We have three levels of nesting here and if that starts to get in the way, it is time to reduce the nesting or at least extract the whole nesting into a function of its own.</span>
<span class="comment-copy">@eugeney Why not? The first break will get out of the inner loop.</span>
<span class="comment-copy">@eugeney I feel like I am missing something here. Can you post an example?</span>
<span class="comment-copy">@Mingliang that can go before the continue.</span>
<span class="comment-copy">@RishitBansal Although this is a deep cut: The outer loop does matter because the inner break condition <code>something(a, b)</code> depends on <code>a</code> too.  The outer loop may run as long as <code>something(a, b)</code> is not <code>True</code>.</span>
<span class="comment-copy">Although, refactor/<code>return</code> is usually the way to go, I've seen quite a few cases where a simple concise ‘<code>break 2</code>’ statement would just make so much sense. Also, refactor/<code>return</code> doesn't work the same for <code>continue</code>. In these cases, numeric break and continue would be easier to follow and less cluttered than refactoring to a tiny function, raising exceptions, or convoluted logic involving setting a flag to break at each nest level. It's a shame Guido rejected it.</span>
<span class="comment-copy"><code>break; break</code> would be nice.</span>
<span class="comment-copy">@PyRulez That's as hard as introducing braces.</span>
<span class="comment-copy">I agree with Guido. The Zen of Python says "Flat is better than nested". There are rarely situations where you can't avoid having three or more nested loops.</span>
<span class="comment-copy">@Jeyekomon The problem is that you don't need 3 or more nested loops for this to be a problem. 2 nested loops are pretty common</span>
<span class="comment-copy">I only started learning python last night, so apologies in advance for not thinking of stuff like "ok in...". some good suggestions here, but is an exception really necessary here? There's nothing too exceptional about a user accepting input.</span>
<span class="comment-copy">Seriously, exceptions are <i>extremely</i> cheap and idiomatic python uses lots and lots of them.  It's very easy to define and throw custom ones, as well.</span>
<span class="comment-copy">Interesting idea. I'm torn as to whether to love it or hate it.</span>
<span class="comment-copy">This solution would be more helpful, if it showed the two variations separately. (1) using a flag (<code>done</code>). (2) raising an exception. Merging them together into a single solution just makes it look complicated. For future readers: EITHER use all the lines involving <code>done</code>, OR define <code>GetOutOfLoop(Exception)</code> and raise/except that.</span>
<span class="comment-copy">In general, using try-blocks for anything other then exceptions is very frowned upon. Try-blocks are specifically designed for error handling, and using them for some strange control flow is not very good, stylistically.</span>
<span class="comment-copy">I'm at college at the moment, quickly (since goto's not in the module index), what is comefrom for?</span>
<span class="comment-copy">If it is anything like the COME FROM command in INTERCAL, then nothing</span>
<span class="comment-copy">comefrom in Python allows you to redirect the running program to a different place whenever it reaches a certain label.  There's more info here (<a href="http://entrian.com/goto/" rel="nofollow noreferrer">entrian.com/goto</a>)</span>
<span class="comment-copy">i like the joke, but the point of stack overflow is to promote good code, so i have to vote you down :(</span>
<span class="comment-copy">I think it's a clean and readable enough solution to qualify as good code, so I vote it up. :)</span>
<span class="comment-copy">The point of the question is to avoid this kind of mess.</span>
<span class="comment-copy">this is sort of flag setting!</span>
<span class="comment-copy">This was the right solution for me. My use case was very different than the OP's. I was looping over essentially the same data twice to find permutations, so I didn't want to separate the two while loops.</span>
<span class="comment-copy">why not just <code>while dejaVu:</code>? You set it to true anyway.</span>
<span class="comment-copy">hey that works! I was thinking in two <code>True</code> conditions to skip two loops, but just one is enough.</span>
<span class="comment-copy">@MatthewScharley I think this is to show that this works in nested loops.</span>
<span class="comment-copy">@MauroAspé this will not exactly do what the OP requests. it will still execute the whole outer loop but the target is that if you break the rest of the code will not get executed</span>
<span class="comment-copy">@yamm Could that not be solved with a <code>if not dejaVu: break</code> at the bottom and thus exit the main loop? I think the solution is closest to what was asked. +1</span>
<span class="comment-copy">This does not seem to fulfill the requirement of double breaks. Works for the exact given problem, but not for the actual question.</span>
<span class="comment-copy">@Dakkaron Are you sure you've understood the code correctly? The code does indeed solve the OPs question, and breaks similar to request. It does however not break out of multiple loops, but use the else clause to replace the need of doubling the break.</span>
<span class="comment-copy">From my understanding the question was <code>How to break out of multiple loops in Python?</code> and the answer should have been "It does not work, try something else". I know it fixes the exact given example of the OP, but does not answer their question.</span>
<span class="comment-copy">@Dakkaron, See the problem statement under the code, and in my opinion it does indeed answer the OPs question.</span>
<span class="comment-copy">It works for while loops too, you only need to write your generator as a def (with yield), not as a comprehension.</span>
<span class="comment-copy">Yes, <a href="https://youtu.be/EnSu9hHGq5o?t=19m38s" rel="nofollow noreferrer">a speaker at a PyCon claims here</a> that even @RobertRossney's accepted answer is not truly Pythonic, but a generator is the right way to break multiple loops. (I'd recommend watching the whole video!)</span>
<span class="comment-copy">This is probably not Python. What is the type of array? Probably list, but what does it contain? Even if it contains ints, array.pop(x) will probably not do what you want.</span>
<span class="comment-copy">That's a good point.  I can't find the code that I referenced.  For anyone reading this, array.pop(i) "Removes the item with the index i from the array and returns it." as per python documentation.  So one would need to get the index of item x in the array to make this code work as expected.  There is also the array.remove(x) function which would do what is expected.  I will modify my answer above to fix that error.  This assumes the second array contains no duplicates, as array.remove(x) will only remove the first instance of x found.</span>
<span class="comment-copy">Ok, then I get it. In that case, simply using <code>break</code> instead of <code>continue</code> would do what you want, wouldn't it? :-)</span>
<span class="comment-copy">Yeah, for efficiency and clarity, you'd probably want to use break instead of continue in these examples. :)</span>
<span class="comment-copy">this one breaks up to a certain "label"</span>
<span class="comment-copy">This one uses a level counter to break up a number of levels</span>
<span class="comment-copy">Good point, however in each of levels above our inner level of interest we would need to scan that variable. Feels really bad that the language does not have a GoTo instruction, performance-wise.</span>
<span class="comment-copy">This looks pretty ugly and makes the code harder to understand, as compared to the previous one. Also, It's wrong. It misses out on actually checking if the input is acceptable and breaks after 1 loop.</span>
<span class="comment-copy">Using proper booleans <code>True</code> or <code>False</code> would at least turn this from horrible to merely unattractive.</span>
