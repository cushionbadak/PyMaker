<div class="post-text" itemprop="text">
<p>I am trying to read the frames using imageio API. I have a reader as an object which I have received using <code>imageio.get_reader(video_path,"ffmpeg")</code></p>
<pre><code>nframes =int(reader.get_length())     
for ii in range(nframes):
    while frame_q.qsize() &gt; 500: # so that we dont use huge amounts of memory
        time.sleep(1)
    cur_img = reader.get_next_data()
    frame_q.put(cur_img)
    #shape = cur_img.shape
    #noisy_img = np.uint8(cur_img.astype(np.float) + np.random.randn(*shape) * 20)
    #frame_q.put(noisy_img)
    if ii % 100 == 0:
        print("%i / %i frames in queue" % (ii, nframes))
print("All %i frames in queue" % (nframes))
</code></pre>
<p>Traceback:</p>
<pre><code> Traceback (most recent call last):
  File "/home/prashantb/anaconda3/envs/demo/lib/python3.6/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/home/prashantb/anaconda3/envs/demo/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "multiprocess_detect_actions.py", line 61, in read_frames
    nframes =int(reader.get_length())
OverflowError: cannot convert float infinity to integer
</code></pre>
<p>Initially, the <code>nframe</code> was a float value then I tried to convert it into an integer but then I am getting an OverflowError.I will appreciate your advice on this. Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, float type can be <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer">infinity</a>. To fixe your bug, you check if the value is <code>inf</code> ou <code>-inf</code> before convert to int:</p>
<pre class="lang-py prettyprint-override"><code>def float_to_int(x):
    if x == float('inf') or x == float('-inf'):
        return float('nan') # or a large value you choose
    return int(x)
</code></pre>
<p>As @ShadowRanger noted, this solution just prevent the <code>OverflowError</code> error. You should investigate on the <code>reader</code> to fix the problem of infinite float. </p>
</div>
<div class="post-text" itemprop="text">
<p>According to the new 2019 update 2.5.0 version from <code>imageio</code> : 
"The reader of the <code>ffmpeg</code> plugin now always reports <code>inf</code> as the number of frames. Use <code>reader.count_frames()</code> to get the actual number, or estimate it from the <code>fps</code> and duration in the meta data."
<a href="https://imageio.readthedocs.io/en/stable/releasenotes.html#version-2-5-0-06-02-2019" rel="nofollow noreferrer">imageio update</a></p>
</div>
<span class="comment-copy">What is <code>reader</code>? Seems like it can be a generator with initially unknown length (presumably returning <code>inf</code> implies unknown, not infinite length, or you're going to be waiting a long time on infinite work). Knowing the API would be necessary to figure out how to handle the unknown/infinite reported length (Does <code>get_next_data</code> raise an exception when it runs out of data? Return a sentinel value? Something else?).</span>
<span class="comment-copy">Is <code>reader</code> an instance of a class you've written? If so, you should figure out why its <code>get_length</code> method is returning infinity and fix that. If it comes from a library you're using, then you should check its API documentation to see what it means when it says it has an infinite length. Does it perhaps have an iterator-protocol API you could use insetead of <code>get_length()</code> and <code>get_next_data()</code>? If so, then <code>enumerate</code> could be your friend: <code>for ii, cur_img in enumerate(reader): #or enumerate(reader.something())</code></span>
<span class="comment-copy">@ShadowRanger reader is an object coming from imageio.get_reader() . get_next_data is not raising any exception.  and also no sentinel value.</span>
<span class="comment-copy">Given that they turn around and plug this into <code>range</code>, you're just postponing the error by a line. There is a fundamental flaw with trying to do infinite work; odds are they're misusing their API.</span>
