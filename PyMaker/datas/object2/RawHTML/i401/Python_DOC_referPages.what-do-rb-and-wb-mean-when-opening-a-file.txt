<div class="post-text" itemprop="text">
<p>What are the implications of the binary vs default mode in Python 3?</p>
<p>When I try to open a pickle file that was saved in the other mode I get an error, while in Python 2.7 I could switch between modes without any issue. The problem can be easily fixed, but why does it matter in the first place?</p>
<p>In general:</p>
<ul>
<li>Which mode should be preferred for greater portability? Is there a specific scenario where a mode should be preferred (e.g. dealing with plaintext files, etc.)?</li>
<li>What are the implications of the binary/default modes with respect to encoding such as UTF-8?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html?highlight=print#open" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>As mentioned in the <a href="https://docs.python.org/3/library/io.html#io-overview" rel="nofollow noreferrer">Overview</a>, Python distinguishes between binary and text I/O. Files opened in binary mode (including <code>'b'</code> in the <em>mode</em> argument) return contents as <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer"><code>bytes</code></a> objects without any decoding. In text mode (the default, or when <code>'t'</code> is included in the <em>mode</em> argument), the contents of the file are returned as <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer"><code>str</code></a>, the bytes having been first decoded using a platform-dependent encoding or using the specified <em>encoding</em> if given.</p>
</blockquote>
<p>Unsurprisingly, you should use the (default) text mode for text data, and binary mode for binary data – including <code>pickle</code> data, which is explicitly <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">defined</a> as binary:</p>
<blockquote>
<p>The <a href="https://docs.python.org/3/library/pickle.html#module-pickle" rel="nofollow noreferrer"><code>pickle</code></a> module implements binary protocols for serializing and de-serializing a Python object structure. <em>“Pickling”</em> is the process whereby a Python object hierarchy is converted into a byte stream, and <em>“unpickling”</em> is the inverse operation, whereby a byte stream (from a <a href="https://docs.python.org/3/glossary.html#term-binary-file" rel="nofollow noreferrer">binary file</a> or <a href="https://docs.python.org/3/glossary.html#term-bytes-like-object" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-bytes-like-object</a>) is converted back into an object hierarchy.</p>
</blockquote>
<p>Python 3 approaches the distinction between text and binary data <a href="https://docs.python.org/3/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="nofollow noreferrer">completely differently</a> to Python 2 – indeed, this was the primary reason for the change of major version number. As a result, it's sometimes the case that code which does not adequately consider the distinction appears to "just work" in Python 2 (but will then often bite you in unexpected ways further down the line).</p>
</div>
