<div class="post-text" itemprop="text">
<p>Here below is my code about how to edit text file.</p>
<p>Since python can't just edit a line and save it at the same time,</p>
<p>I save the previous text file's content into a list first then write it out.</p>
<p>For example,if there are two text files called <strong>sample1.txt</strong> and <strong>sample2.txt</strong> in the same folder.</p>
<p><strong>Sample1.txt</strong><br/>
A for apple. </p>
<p>Second line.</p>
<p>Third line.</p>
<p><strong>Sample2.txt</strong><br/>
First line. </p>
<p>An apple a day.</p>
<p>Third line.</p>
<blockquote>
<p>Execute python</p>
</blockquote>
<pre><code>import glob
import os

#search all text files which are in the same folder with python script
path = os.path.dirname(os.path.abspath(__file__))
txtlist = glob.glob(path + '\*.txt')

for file in txtlist:
    fp1 = open(file, 'r+')
    strings = [] #create a list to store the content
    for line in fp1:
        if 'apple' in line:
            strings.append('banana\n') #change the content and store into list
        else:
            strings.append(line) #store the contents did not be changed
    fp2 = open (file, 'w+') # rewrite the original text files
    for line in strings:
        fp2.write(line)
    fp1.close()
    fp2.close()
</code></pre>
<p><strong>Sample1.txt</strong><br/>
banana </p>
<p>Second line.</p>
<p>Third line.</p>
<p><strong>Sample2.txt</strong><br/>
First line. </p>
<p>banana</p>
<p>Third line.</p>
<hr/>
<p>That's how I edit specific line for text file.</p>
<p><strong>My question is :</strong> Is there any method can do the same thing?</p>
<p>Like using the other functions or using the other data type rather than list.</p>
<p>Thank you everyone.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Simplify it to this:</p>
<pre><code>with open(fname) as f:
    content = f.readlines()
    content = ['banana' if line.find('apple') != -1 else line for line in content]
</code></pre>
<p>and then write value of <code>content</code> to file back.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of putting all the lines in a list and writing it, you can read it into memory, replace, and write it using same file.</p>
<pre><code>def replace_word(filename):
    with open(filename, 'r') as file:
       data = file.read()

    data = data.replace('word1', 'word2')

    with open(filename, 'w') as file:
        file.write(data)
</code></pre>
<p>Then you can loop through all of your files and apply this function</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer"><code>fileinput</code></a> module makes this quite simple:</p>
<pre><code>import fileinput
import glob

with fileinput.input(files=glob.glob('*.txt'), inplace=True) as files:
    for line in files:
        if 'apple' in line:
            print('banana')
        else:
            print(line, end='')
</code></pre>
<p><code>fileinput</code> redirects <code>print</code> into the active file.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import glob
import os


def replace_line(file_path, replace_table: dict) -&gt; None:
    list_lines = []
    need_rewrite = False
    with open(file_path, 'r') as f:
        for line in f:
            flag_rewrite = False
            for key, new_val in replace_table.items():
                if key in line:
                    list_lines.append(new_val+'\n')
                    flag_rewrite = True
                    need_rewrite = True
                    break  # only replace first find the words.

            if not flag_rewrite:
                list_lines.append(line)

    if not need_rewrite:
        return

    with open(file_path, 'w') as f:
        [f.write(line) for line in list_lines]


if __name__ == '__main__':
    work_dir = os.path.dirname(os.path.abspath(__file__))
    txt_list = glob.glob(work_dir + '/*.txt')
    replace_dict = dict(apple='banana', orange='grape')

    for txt_path in txt_list:
        replace_line(txt_path, replace_dict)
</code></pre>
</div>
<span class="comment-copy">If you use <code>read</code> you can read the entire file into a string variable and do the substitution there. If you don't want to store the strings in memory at all then you can step through the input line by line and immediately write it out to a second file. But you can't update the file you are reading so you end up with two files. It is then up to your code to delete the old one and rename the new one. You can use the module <code>in_place</code> <a href="https://pypi.org/project/in-place/" rel="nofollow noreferrer">pypi.org/project/in-place</a> to let your code pretend that it is updating the file it is reading, in place.</span>
<span class="comment-copy">You can use the <code>fileinput</code> module to do this. There's a description of how to in <a href="https://stackoverflow.com/questions/5453267/is-it-possible-to-modify-lines-in-a-file-in-place">this</a> answer.</span>
<span class="comment-copy">Thanks for your answering first.If I wanna replace the lines that contain apple not just "apple",what should I do with replace function?</span>
<span class="comment-copy">Then, you have no other option than reading line by line</span>
