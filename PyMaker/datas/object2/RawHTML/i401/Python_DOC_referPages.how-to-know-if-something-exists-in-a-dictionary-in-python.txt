<div class="post-text" itemprop="text">
<p>I'm consuming an API and the info from it would be something like this:</p>
<pre><code>"id": "17",
"address": "Av. Nossa Senhora de Copacabana",
"addressComplement": "A",
"number": "945",
"cityId": "2",
"cityName": "Rio de Janeiro",
"state": "Rio de Janeiro",
"uf": "RJ",
"neighborhood": "Copacabana",
"properties": {},
"telephones": [],
"geolocation": {
    "lat": -22.97625,
    "lng": -43.19002
},
</code></pre>
<p>But, in some records, it doesn't contain the <code>geolocation</code> field, so I have to check if <code>geolocation</code> exists inside my code.</p>
<p>I was trying to use <code>hasattr</code> to do this trick, but I think I'm doing something wrong.</p>
<p>Here is the part of my code:</p>
<pre><code>if hasattr(i, 'geolocation'):
    address_lat = i['geolocation']['lat']
    address_lng = i['geolocation']['lng']
else:
    address_lat = 0.0
    address_lng = 0.0
</code></pre>
<p>My thought here is that it will check if in the position of index <code>i</code> exist something inside <code>geolocation</code>. If there is something, then it returns true and enter inside the condition, else the var will receive <code>0.0</code>.</p>
<p>So, am I doing something wrong? Is this the right way to use <code>hasattr</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p>It's simpler than that:</p>
<pre><code>address_lat = i['geolocation']['lat'] if 'geolocation' in i else 0.0
address_lng = i['geolocation']['ing'] if 'geolocation' in i else 0.0
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#hasattr" rel="noreferrer"><code>hasattr</code></a> is useful for checking if an <em>object</em> has an <em>attribute</em>. This is a more specific case, you just need to check if a <em>key</em> is <code>in</code> a <em>dictionary</em>.</p>
<p>A minor complaint: <code>i</code> is a confusing name for a dictionary, at first sight I thought that was an index. Better rename it to something meaningful!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <code>dict.get</code> method that allows to supply a default value that will be returned if the key does not exist, e.g. like:</p>
<pre><code>geolocation = i.get('geolocation', {"lat": 0., "lng": 0.})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <code>try except</code> clause:</p>
<pre><code>try:
    address_lat = i['geolocation']['lat']
    address_lng = i['geolocation']['lng']
except KeyError:
    address_lat = 0.0
    address_lng = 0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>hasattr</code> is usually using for an object.</p>
<pre><code>&gt;&gt;&gt; class A:
...     i = 10
...
&gt;&gt;&gt; hasattr(A(), 'i')
True
</code></pre>
<p>In your case, the best way to check if a key exists in a dictionary
it's to do something like that</p>
<pre><code>data = {'geolocation': 0.0}
if 'geolocation' in data:
     ...do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use get and set the default values for lat and lng if they doesn't exist.</p>
<pre><code>geolocation = i.get('geolocation',{"lat": 0,"lng":0})
address_lat = geolocation['lat']
address_lng = geolocation['lng']
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary">Check if a given key already exists in a dictionary</a></span>
<span class="comment-copy">You shouldn't use <code>0.0</code> for missing values. It's a valid lat-lng;  <code>np.nan</code> or an out of range number (say, 1000) is probably much more appropriate.</span>
<span class="comment-copy"><code>.get()</code> you mean?</span>
<span class="comment-copy">If 'geolocation' does not exist in <code>i</code>at all this would nevertheless raise a KeyError?</span>
<span class="comment-copy">yup, I just realised that. It's fixed now, thanks for pointing that out!</span>
<span class="comment-copy">removes the need for <code>try/except</code> or <code>if</code> check, +1</span>
