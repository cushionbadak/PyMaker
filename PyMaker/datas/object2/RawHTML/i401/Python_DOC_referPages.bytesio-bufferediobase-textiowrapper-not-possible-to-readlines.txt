<div class="post-text" itemprop="text">
<p>I am trying to read lines from bytes like object. </p>
<p>Here is a very simple example. I know it can be done in a different way but it's important to keep that flow (<code>BytesIO -&gt; BufferedIOBase -&gt; TextIOWrapper</code>).</p>
<pre><code>import io
bytes_io = io.BytesIO(b"a\nb\nc")
buffered_io_base = io.BufferedIOBase(bytes_io)
text_io = io.TextIOWrapper(buffered_io_base)
for line in text_io:
    print(line)
</code></pre>
<p>This end up with an error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
io.UnsupportedOperation: not readable
</code></pre>
<p>Python version 3.6.5</p>
</div>
<div class="post-text" itemprop="text">
<p><code>io.BufferedIOBase</code> <em>should not be instantiated</em>, it isn't even supposed to have a public constructor. You certainly don't need it here, it is a <em>base class</em> there to document the methods that buffered I/O objects must implement, with default implementations that inheriting classes can build upon. </p>
<p>From the <a href="https://docs.python.org/3/library/io.html#io.BufferedIOBase" rel="nofollow noreferrer"><code>io.BufferedIOBase</code> documentation</a>:</p>
<blockquote>
<p>Base class for binary streams that support some kind of buffering. It inherits <code>IOBase</code>. There is no public constructor.</p>
</blockquote>
<p>You only need to use <code>BytesIO</code>, it <em>inherits</em> from <code>BufferedIOBase</code>, it is itself already implementing the methods required to be a buffered I/O object. From the <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>io.BytesIO</code> documenation</a>:</p>
<blockquote>
<p>It inherits <code>BufferedIOBase</code>. [...]</p>
<p>[...]</p>
<p><code>BytesIO</code> provides or overrides these methods in addition to those from <code>BufferedIOBase</code> and <code>IOBase</code>: [...]</p>
</blockquote>
<p>Wrap your <code>BytesIO</code> object directly in a <code>TextIOWrapper()</code> object here:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; bytes_io = io.BytesIO(b"a\nb\nc")
&gt;&gt;&gt; text_io = io.TextIOWrapper(bytes_io)
&gt;&gt;&gt; for line in text_io:
...     print(line, end='')
...
a
b
c
</code></pre>
<p>Where the <code>TextIOWrapper</code> documentation tells you that the first argument is expected to be a <code>BufferedIOBase</code> binary stream, the goal is to tell you you need a subclass of <code>BufferedIOBase</code>, something that <em>implements</em> that interface. <code>BytesIO</code> is such an object, and so are <a href="https://docs.python.org/3/library/io.html#io.BufferedReader" rel="nofollow noreferrer"><code>io.BufferedIOReader()</code></a>, <a href="https://docs.python.org/3/library/io.html#io.BufferedWriter" rel="nofollow noreferrer"><code>io.BufferedIOWriter()</code></a>, <a href="https://docs.python.org/3/library/io.html#io.BufferedRandom" rel="nofollow noreferrer"><code>io.BufferedRandom()</code></a>, and <a href="https://docs.python.org/3/library/io.html#io.BufferedRWPair" rel="nofollow noreferrer"><code>io.BufferedRWPair()</code></a>.</p>
<p>In general, you wouldn't create instances of any of the <a href="https://docs.python.org/3/library/io.html#class-hierarchy" rel="nofollow noreferrer">ABCs listed in the <em>Class Hierarchy</em> section</a> of the documentation. They are there to provide documentation, something to test for when you need to check types, and to be a solid base from which to derive custom implementations.</p>
</div>
