<div class="post-text" itemprop="text">
<p>Say I have the dictionary:</p>
<pre><code>my_dict = [
        {'first': 'James', 'middle': 'Smith', 'last': 'Joule'}, 
        {'first': 'James', 'middle': 'smith', 'last': 'joule'},
        {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
        {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
        {'first': 'Robert', 'middle': 'edward', 'last': 'antonio'},
        {'first': 'Robert', 'middle': 'edwrd', 'last': 'Antonio'},
        {'first': 'James', 'middle': 'Jackson', 'last': 'harden'}, 
        {'first': 'James', 'middle': 'jackson', 'last': 'Harden'},
      ]
</code></pre>
<p>And I have a list called keys:</p>
<pre><code>keys = ["first", "last"]
</code></pre>
<p>I want to filter myDict based on each value in keys, which would result in</p>
<pre><code>filtered_dict = [
        {'first': 'James', 'middle': 'Smith', 'last': 'Joule'}, 
        {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
        {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
        {'first': 'James', 'middle': 'Jackson', 'last': 'harden'}
      ]
</code></pre>
<p>As you can observe in the list dictionary in my_dict list, the duplicate dict values are removed or filtered out from the list and only the first entry for that dict instance is taken in the filtered output. </p>
<p>i need to remove the duplicates if the values of both those keys are same.</p>
<p>Is there an easy way to do this with dictionary/list comprehension in Python? is there another faster way to achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> by using a <code>key</code> of 
<code>(x["first"].lower, x["last"].lower())</code> to group by and then only takte the 0th element of the grouped values:</p>
<pre><code>from itertools import groupby
# https://docs.python.org/3/library/itertools.html#itertools.groupby

my_dict = [
        {'first': 'James', 'middle': 'Smith', 'last': 'Joule'}, 
        {'first': 'James', 'middle': 'smith', 'last': 'joule'},
        {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
        {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
        {'first': 'Robert', 'middle': 'edward', 'last': 'antonio'},
        {'first': 'Robert', 'middle': 'edwrd', 'last': 'Antonio'},
        {'first': 'James', 'middle': 'Jackson', 'last': 'harden'}, 
        {'first': 'James', 'middle': 'jackson', 'last': 'Harden'},
      ]

keys = ["first","last"]

k = [list(data)[0] for key,data in groupby(my_dict, 
                                           key=lambda x: tuple(x[i].lower() for i in keys))]

print(k) 
</code></pre>
<p>Output:</p>
<pre><code>[{'first': 'James', 'middle': 'Smith', 'last': 'Joule'}, 
 {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'}, 
 {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'}, 
 {'first': 'James', 'middle': 'Jackson', 'last': 'harden'}]
</code></pre>
<hr/>
<p>Caveat:</p>
<p>Groupby only works for consecutive keys - if you had a third <code>{'first': 'James', 'middle': 'Smith', 'last': 'JOUle'}</code> at the end of your list he would get it's own entry:</p>
<blockquote>
<p>Make an iterator that returns <em>consecutive</em> keys and groups from the <em>iterable</em><br/>
<em>(from the doku, link above)</em> </p>
</blockquote>
<p>You would need to sort your list first to group then consecutively if you wanted them all in the same group.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, call it <code>my_list</code> instead of <code>my_dict</code>.</p>
<pre><code>my_list = [
    {'first': 'James', 'middle': 'Smith', 'last': 'Joule'},
    {'first': 'James', 'middle': 'smith', 'last': 'joule'},
    {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
    {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
    {'first': 'Robert', 'middle': 'edward', 'last': 'antonio'},
    {'first': 'Robert', 'middle': 'edwrd', 'last': 'Antonio'},
    {'first': 'James', 'middle': 'Jackson', 'last': 'harden'},
    {'first': 'James', 'middle': 'jackson', 'last': 'Harden'}
]
keys = ["first", "last"]
</code></pre>
<p>Then, you could achieve your goal with this comprehension: </p>
<pre><code>import collections
temp = collections.OrderedDict([
    (
        tuple(e[k].lower() for k in keys),    # only some keys will determine duplicates
        e,
    )
    for e in my_list])

my_new_list = list(temp.values())
</code></pre>
<p>By grouping the elements by first and last name, the duplicates will be excluded. Later you just have to cast it to a list again if you need it that way.</p>
<p>And by using <code>OrderedDict</code> you can preserve the original order.</p>
<p>I also used <code>.lower()</code> to find case insensitive duplicates.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution below does not demand any import statements and is capable of being case insensitive. It also considers only the fields supplied in the keys list and ignores all other fields while matching ( <a href="https://stackoverflow.com/a/54753934/4882300">the solution provided by Mstaino</a> takes all fields into account while matching, regardless of what may be in your keys list ).</p>
<pre><code>my_dict = [
        {'first': 'James', 'middle': 'Smith', 'last': 'Joule'}, 
        {'first': 'James', 'middle': 'smith', 'last': 'joule'},
        {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
        {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
        {'first': 'Robert', 'middle': 'edward', 'last': 'antonio'},
        {'first': 'Robert', 'middle': 'edwrd', 'last': 'Antonio'},
        {'first': 'James', 'middle': 'Jackson', 'last': 'harden'}, 
        {'first': 'James', 'middle': 'jackson', 'last': 'Harden'},
      ]
keys = ["first","last"]
fields = [''.join([x.lower() for x in \
                   list(map(lambda x : my_dict[i].__getitem__(x), keys))]) \
          for i,v in enumerate(my_dict)]
filtered_dict = [my_dict[i] for i,v in enumerate(fields) if fields.index(v) == i]
</code></pre>
<p>If you want to eliminate only consecutive repetitions ( like in <a href="https://stackoverflow.com/a/54753817/4882300">the solution provided by Patrick Artner</a> ) you must declare <code>filtered_dict</code> in the following way:</p>
<pre><code>filtered_dict = [ my_dict[i] for i,v in enumerate(fields) if i == 0 or v != fields[i-1] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One solution would be to use a pandas dataframe like below. This would allow for dropping rows of duplicates very much like a CSV file. This does not take into account the case sensitivity though, if you need case insensitive duplicate dropping, that would be a different method. But this works pretty well. </p>
<pre><code>import pandas as pd

my_dict = [
    {'first': 'James', 'middle': 'Smith', 'last': 'Joule'},
    {'first': 'James', 'middle': 'smith', 'last': 'joule'},
    {'first': 'Christian', 'middle': 'Edward', 'last': 'Doppler'},
    {'first': 'Robert', 'middle': 'Edward', 'last': 'Antonio'},
    {'first': 'Robert', 'middle': 'edward', 'last': 'antonio'},
    {'first': 'Robert', 'middle': 'edwrd', 'last': 'Antonio'},
    {'first': 'James', 'middle': 'Jackson', 'last': 'harden'},
    {'first': 'James', 'middle': 'jackson', 'last': 'Harden'}
]


keys = ["first", "last"]

df = pd.DataFrame(my_dict)

df = df.drop_duplicates(keep="first")
print(df)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, clarify that you want to filter case non sensitive.</p>
<p>A python solution to filter upper-lower:</p>
<pre><code>values = list(map(lambda x: set(i.lower() for i in x.values()), my_dict))
my_filter_list = [my_dict[i] for i,x in enumerate(values) if values.index(x)==i]
</code></pre>
</div>
<span class="comment-copy">What's the use of <code>keys</code> list?</span>
<span class="comment-copy">i need to remove the duplicates if the values of both those keys are same.</span>
<span class="comment-copy">You should be asking for a list comprehension, not a dictionary comprehension, because you are building list.</span>
<span class="comment-copy">Possible duplicate from <a href="https://stackoverflow.com/questions/9427163/remove-duplicate-dict-in-list-in-python">remove duplicate dict in list in python</a></span>
<span class="comment-copy">sure. i just edited the question. i am looking for anything pythonic that doesn't need me to write a separate function to check them each in the loops</span>
<span class="comment-copy">does it work with case sensitivity as well?</span>
<span class="comment-copy">What do you mean? Should it be case sensitive or not?</span>
<span class="comment-copy">The stipulation about case sensitivity is a different question/separate issue</span>
<span class="comment-copy">this worked well also.. thank you for the response i will keep this approach in mind as well</span>
