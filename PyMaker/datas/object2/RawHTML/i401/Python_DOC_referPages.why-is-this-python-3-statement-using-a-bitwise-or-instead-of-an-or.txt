<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14526584/what-does-the-xor-operator-do">What does the ^ (XOR) operator do?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>This python code below I found as part of a <a href="https://www.geeksforgeeks.org/divide-two-integers-without-using-multiplication-division-mod-operator/" rel="nofollow noreferrer">problem statement over here</a>:</p>
<p><em>Divide two integers without using multiplication, division and mod operator
Given a two integers say a and b. Find the quotient after dividing a by b without using multiplication, division and mod operator.</em></p>
<pre><code>sign = (-1 if((dividend &lt; 0) ^  
                  (divisor &lt; 0)) else 1); 
</code></pre>
<p>I notice the code doesn't work if you don't have bitwise or operator. Why do you need a "bitwise or" instead of a logical "or" operator?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>^</code> is an <em>exclusive</em> OR, but Python doesn't have a logical exclusive OR. This code  takes advantage of the fact that <code>True == 1</code> and <code>False == 0</code> so that using the bit-wise exclusive-or has the same effect. (For example, <code>True ^ False == 1 ^ 0 == 1 == True</code>.)</p>
<p>Using regular short-circuiting <code>and</code> and <code>or</code>, then test (with redundant parentheses) would look like</p>
<pre><code>sign = -1 if (dividend &lt; 0 and divisor &gt; 0) or (dividend &gt; 0 and divisor &lt; 0) else 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That is a bitwise XOR operator. See <a href="https://www.tutorialspoint.com/python3/bitwise_operators_example.htm" rel="nofollow noreferrer">here</a> for more about XORs. </p>
</div>
<div class="post-text" itemprop="text">
<p>It works because this is not a bitwise OR operator, but rather a bitwise XOR operator. Check out the <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">Python documentation on bitwise operators</a>.</p>
<p>From <a href="https://en.wikipedia.org/wiki/Exclusive_or" rel="nofollow noreferrer">Wikipedia</a>:</p>
<blockquote>
<p>Exclusive or or exclusive disjunction is a logical operation that outputs true only when inputs differ (one is true, the other is false).</p>
</blockquote>
</div>
<span class="comment-copy">^ is the XOR operator, not the OR operator.</span>
<span class="comment-copy">closing the question while it has one good answer and not a zillon others...</span>
<span class="comment-copy">logical exclusive or is useless anyway since you need to evaluate both parts and that would not short circuit.</span>
<span class="comment-copy">I didn't say exclusive-or would short-circuit; I just referred to <code>and</code> and <code>or</code> as short-circuiting (rather than Boolean, since strictly speaking they aren't Boolean operators).</span>
<span class="comment-copy">no problem with your answer. I was just noting that it was useless to have <code>xor</code> since it would be the same thing as <code>^</code>. Well, c++11 has <code>and</code> and <code>&amp;&amp;</code>, that said...</span>
