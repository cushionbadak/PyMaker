<div class="post-text" itemprop="text">
<p>Let's say I wrote a piece of code :</p>
<pre><code>for i in range(10):
    print(i)
    i=11
</code></pre>
<p>Why doesn't the loop terminate now ?</p>
<p>Even when I do this :</p>
<pre><code>n=10
for i in range(n):
    print(i)
    n=0
</code></pre>
<p>It doesn't effect the loop ?</p>
<p>I'm just wondering how python is managing loop variables ?</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>range()</code> function returns a list that you're iterating over
Example <code>for i in range(5)</code> is equivalent to <code>for i in [1,2,3,4,5]</code>
The <code>for</code> loop stops when it receives a <code>StopIteration</code></p>
<p>Now, in your first block,</p>
<pre><code>for i in range(10):
    print(i)
    i=11
</code></pre>
<p>i is assigned to 11 after printing, but after the assignment, the iteration finishes and i is reassigned to the next list element.</p>
<p>Moving the assignment before works as you'd expect</p>
<pre><code>for i in range(10):
    i=11
    print i
</code></pre>
<p>Output:</p>
<pre><code>11
11
11
11
11
11
11
11
11
11
</code></pre>
<p>In your second block: </p>
<pre><code>n=10
for i in range(n):
    print(i)
    n=0
</code></pre>
<p>n is updated after <code>range()</code> has already generated it's list <code>[1...10]</code> so updating n has no effect</p>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>for</code> loops are based on iteration, not a condition. They are stopped when <code>StopIteration</code> is reached, not when a certain Boolean condition evaluates to <code>False</code>.</p>
<p><code>range</code> creates a temporary range object that cannot be changed during iteration. After <code>range(10)</code> or <code>range(n)</code> or whatever is called, this object is completely independent of what was used to create it.</p>
<p>You were probably expecting something like this to happen (C code):</p>
<pre class="lang-c prettyprint-override"><code>for (int i = 0; i &lt; 10; ++i) {
    printf("%d ", i);
    i = 11;
}
</code></pre>
<p>This is not how a for loop works in Python. It is more similar to this:</p>
<pre class="lang-c prettyprint-override"><code>int range[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
for (int count = 0; count &lt; 10; ++count) {
    int i = range[count];
    printf("%d ", i);
    i = 11;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>range()</code> function generates the integer numbers between the given start integer to the stop integer, which is generally used to iterate over with for Loop.</p>
<p><code>i</code> is returned output not the assignment.</p>
<p>Docs: <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#func-range</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The whatever code we give inside the for loop is taken as a single block and will execute 10 times from i=0 to 9.</p>
<p>Even if you assign i=11 or any other variable x=1 inside the for loop , it will print the value that we assigned 10 times.</p>
<p>Please find the attachments. </p>
<p><a href="https://i.stack.imgur.com/WHUi7.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/WHUi7.png"/></a></p>
<p><a href="https://i.stack.imgur.com/aV0Dv.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/aV0Dv.png"/></a></p>
</div>
<span class="comment-copy">use while loop in case like this</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14785495/how-to-change-index-of-for-loop-in-python">How to change index of for loop in Python?</a></span>
<span class="comment-copy">You are answering how to do <code>for loop</code>, OP is asking about the reason behind for it.</span>
