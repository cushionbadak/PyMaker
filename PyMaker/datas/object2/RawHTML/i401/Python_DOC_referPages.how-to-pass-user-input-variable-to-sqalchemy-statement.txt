<div class="post-text" itemprop="text">
<p>I am fairly new to the world of programming. I'm using Python, Pandas and SQLlite; and recently I've started to build Postgresql databases.  I am trying to query a postgres database and create a Pandas dataframe with the results.  I've found that the following works:</p>
<pre><code>import pandas as pd
from sqlalchemy import create_engine # database connection
engine = create_engine('postgresql://postgres:xxxxx@localhost:xxxx/my_postgres_db')
df = pd.read_sql("SELECT * FROM my_table Where province='Saskatchewan'", engine)
</code></pre>
<p>The works perfectly but my problem is how to pass user input to the sql query.  Specifically, I want to do the following:</p>
<pre><code>province_name = 'Saskatchewan' #user input
df = pd.read_sql("SELECT * FROM my_table Where province=province_name", engine)
</code></pre>
<p>However, this returns an error message:
ProgrammingError: (psycopg2.ProgrammingError) column "province_selected" does not exist
LINE 1: SELECT * FROM my_table Where province =province_selec...</p>
<p>Can anyone provide guidance on this matter?  In addition, can anyone advise me as to how to handle field names in a postgres database that have characters such as '/'.  My database has a field (column header) called CD/CSD and when I try to run a query on that field (similar to code above) I just get error messages.  Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the functionality provided by the DBAPI module that SQLAlchemy uses to send parameters to the query. Using psycopg2 that could look like this:</p>
<pre><code>province_name = 'Saskatchewan' #user input
df = pd.read_sql("SELECT * FROM my_table Where province=%s", engine, params=(province_name,))
</code></pre>
<p>This is safer than using Python's string formatting to insert the parameter into the query.</p>
<p><a href="http://initd.org/psycopg/docs/usage.html#passing-parameters-to-sql-queries" rel="nofollow noreferrer">Passing parameters using psycopg2</a></p>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_sql.html" rel="nofollow noreferrer"><code>pandas.read_sql</code> documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>there are many ways to do that, the simplest is:</p>
<pre><code>province_name = 'Saskatchewan' #user input
pd.read_sql("SELECT * FROM my_table Where province='%s'" % province_name, engine)
</code></pre>
<p>But this has security problems if you are not careful to validate that the data does not have some kind of SQL injection.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the first part of your question you can use string formating. The way you specified the query will fail because it will search for a column named "province_name" which does not exist. There are various approaches to format strings, I will suggest one that works in Python 3.5+. Please also check <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="nofollow noreferrer">f strings</a> for Python 3.6+.</p>
<p>Code could look like this:</p>
<pre><code>import pandas as pd
from sqlalchemy import create_engine # database connection
engine = create_engine('postgresql://postgres:xxxxx@localhost:xxxx/my_postgres_db')
province_name = 'Saskatchewan' #user input
query = "SELECT * FROM my_table Where province={}".format(province_name)
df = pd.read_sql(query, engine)
</code></pre>
<p>If you do print(query) you will realize that is exactly the same thing as the one had success with.</p>
</div>
<div class="post-text" itemprop="text">
<p>Regarding the first question, at the moment you are passing the following string to your sql engine:
<code>'SELECT * FROM my_table Where province=province_name'</code></p>
<p>In order to replace <code>'province_name'</code> with the variable <code>province_name</code> from the python code you could use the format method:</p>
<pre class="lang-py prettyprint-override"><code>province_name = 'Saskatchewan' #user input
sql_command = "SELECT * FROM my_table Where province='{}'".format(province_name)
df = pd.read_sql(sql_command , engine)
</code></pre>
<p>The <code>format</code> method will replace the <code>{}</code> with the contents of the variable <code>province_name</code>.
There are many ways to use the <code>format</code> method which are explained well in <a href="https://pyformat.info/" rel="nofollow noreferrer">this guide</a>
edit: Note that as others have stated this has security concerns since you are using raw user input, so other methods are more suitable for this instance.</p>
</div>
<span class="comment-copy">This works, thanks.  However, it doesn't work if you create a variable based on user input: e.g., province_name = raw_input("Type name of desired province: ").  This will work only if the user types the name of the province within single quotes: e.g., 'Saskatchewan'.  Nevertheless, I learned something new from your approach.  Thanks again!!</span>
<span class="comment-copy">Single quotes and double quotes maybe an issue indeed. Users don't need to type the words with single or double quotes(unless you specify it). As for Python 3.5, you may use input (<a href="https://docs.python.org/3/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.0.html#builtins</a>). This will retrive a single quoted string authomatically. Let me know if that works</span>
<span class="comment-copy">This is both unsafe and incorrect as written.</span>
<span class="comment-copy">I accept the security concerns, I hadn't considered that aspect. Added a note to this effect. As for 'incorrect', I edited to add single quotes around the user input, I assume that is what you are referring to?</span>
<span class="comment-copy">Yes that would be it. Sorry I didn't edit just edit your answer since you were on the right track but I didn't right choosing one once I saw the existing answers had more or less the same problems.</span>
<span class="comment-copy">Fair enough. I have upvoted your answer :-)</span>
