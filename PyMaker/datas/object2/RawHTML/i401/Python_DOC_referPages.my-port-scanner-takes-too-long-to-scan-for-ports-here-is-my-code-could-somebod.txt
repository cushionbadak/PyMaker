<div class="post-text" itemprop="text">
<p>Here is my code. Can somebody explain to me how to make my port scanner faster? I made the port scanner by connecting to the ip with the 'connect.ex()' and maybe should I use another command? </p>
<pre><code>try:
    for port in range(1,1000):
        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        result = sock.connect_ex((remoteHost,port))
        if result == 0:
            print(colored("[+] Port {}: Open".format(port), 'green'))
            sock.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So a quick look on Github led me to find <a href="https://github.com/xdavidhu/portSpider" rel="nofollow noreferrer">portSpider</a> which bills itself as </p>
<blockquote>
<p>A lightning fast multithreaded network scanner framework with modules.</p>
</blockquote>
<p>Reading through it, I noticed that it uses <a href="https://github.com/xdavidhu/portSpider/blob/master/modules/manual.py#L45" rel="nofollow noreferrer"><code>socket.connect</code></a> and not <code>connect_ex</code>. It absolutely does multithreading though to increase performance. I would tend toward using an existing solution rather than building one from scratch, unless this is just for tinkering.</p>
<p>To speed up your example in particular, you could do a <em>simple</em> optimization using <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer"><code>multiprocessing.Pool</code></a>.</p>
<pre><code>def scan_port(port):
    try:
        sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        result = sock.connect_ex((remoteHost,port))
        if result == 0:
            print(colored("[+] Port {}: Open".format(port), 'green'))
            sock.close()
    except:
        pass  # you should handle this error

import multiprocessing as mp

p = mp.Pool()  # will parallelize to number of CPUs you have
p.map(scan_port, range(1, 1000))
</code></pre>
</div>
<span class="comment-copy">Is there a reason you aren't using an existing port scanner built by someone who already did the work to optimize its implementation?</span>
<span class="comment-copy">The easiest change is just moving the work into threads, but (1) balancing performance against load is an art, not a science, and not really amenable to a canonical answer; and (2) writing a <i>really</i> high-performance port scanner requires a bunch of close-to-the-OS tricks that typically require root and are <i>very</i> much off-topic here.</span>
<span class="comment-copy">I know a lot of Port scanners but I tried to built one because I am trying to learn more and more.</span>
<span class="comment-copy">I tried it that way but it's still slow.</span>
