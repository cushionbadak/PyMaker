<div class="post-text" itemprop="text">
<p>I have the following timestamp <code>1550588656</code> which translates to <code>2019-02-19 15:04:16+00:00</code> in UTC time convention.</p>
<p>I want to convert it to my country's time convention (UTC or GMT -3 in this time of the year) so it should translate to <code>2019-02-19 12:04:16+00:00</code></p>
<p>I have read on other SO questions that first I have to convert the timestamp to an UTC aware Datetime object <em>and then</em> localize it, I'm doing it like this</p>
<pre><code># string format time
naive_datetime = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

# string parse time
naive_datetime = datetime.strptime(naive_datetime, "%Y-%m-%d %H:%M:%S")

# make naive Datetime object UTC aware
utc_datetime = naive_datetime.replace(tzinfo=pytz.UTC)
</code></pre>
<p>So now it's not a naive Datetime object, from here I should be able to localize it to my country's timezone. In Python that is <code>pytz.timezone('America/Santiago')</code></p>
<p>So it should go something like this</p>
<pre><code>cltime = pytz.timezone('America/Santiago')
local_datetime = utc_datetime.astimezone(cltime)
</code></pre>
<p>But I'm getting <code>2019-02-19 09:04:16-03:00</code> (UTC or GTM -6 ) as a result and I don't know why. </p>
<p>Can someone explain? My intuition tells me it's probably a simple thing I'm not looking at, but I've spent some minutes in it and I haven't been able to tell yet.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer">the documentation for <code>fromtimestamp</code></a>:</p>
<blockquote>
<p>Return the <strong>local</strong> date and time corresponding to the POSIX timestamp</p>
</blockquote>
<p>So the problem is that it is already doing a conversion from UTC to the local time, and you're doing it a second time.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all you have epoc time (UTC timestamp). You need to convert it into datetime object (native) which is followed by converting native time to aware time and than finally convert it to your local time.</p>
<ol>
<li><p>Convert your timestamp to <strong>native</strong> datetime object</p>
<p><code>native_datetime = datetime.fromtimestamp(1550588656)</code></p></li>
<li><p>convert <strong>native</strong> datetime object to <strong>aware</strong> time (add timezone info, <em>will add timezone info to native timezone UTC for current</em>)</p>
<pre><code>import pytz
utc_time = native_datetime.replace(tzinfo=pytz.timezone("UTC"))
</code></pre></li>
<li><p>localising <strong>aware</strong> datetime to your <strong>local</strong> datetime</p>
<p><code>local_time = utc_time.astimezone(pytz.timezone("America/Santiago"))</code></p>
<blockquote>
<p>You can replace <strong>"America/Santiago"</strong> with your local time zone</p>
</blockquote></li>
</ol>
<p>I think this would help you to solve your problem. Thanks!</p>
</div>
<span class="comment-copy">When I do the same thing I get <code>datetime.datetime(2019, 2, 19, 12, 4, 16, tzinfo=&lt;DstTzInfo 'America/Santiago' -03-1 day, 21:00:00 DST&gt;)</code>. Is this really your code?</span>
<span class="comment-copy">It is, <a href="https://i.imgur.com/RvoQLW6.png" rel="nofollow noreferrer">here</a>'s a picture</span>
<span class="comment-copy">In your second paragraph, it translates to <code>2019-02-19 12:04:16-03:00</code>.  You gave the offset as <code>+00:00</code> incorrectly.</span>
<span class="comment-copy">Well, that was it. I guess that's what I get from mindlessly copying and pasting from other answers. The weird thing is, if you print the timezone info of that resulting Datetime (right after the <code>fromtimestamp</code> call) it says None which, apparently, it's not the case. Thanks anyway, you solved it!</span>
<span class="comment-copy">@mfdebian <code>tzinfo=None</code> means "I don't know", which means you need to look at the documentation to figure out the truth. Traditionally <code>datetime</code> doesn't offer its own timezone objects since they're subject to change, so the support is kind of poor.</span>
<span class="comment-copy">Thanks for the clarification Mark! (Also, nice profile picture).</span>
