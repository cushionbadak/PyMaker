<div class="post-text" itemprop="text">
<p>I have a list with around 60000 characters. 
The package I'm using takes only lists above 999 characters... 
So for this example I have to run the function 60000/999 = 61 times.</p>
<p>Here is how a list looks like as an example: </p>
<pre><code>liste=[ 'item1', 'item2', 'item3', 'item4'...]
</code></pre>
<p>Here is the issue, this number of characters will not be the same over time it can be less or more, so I have to take the length of the list into account. </p>
<p>Here is the code I'll use:</p>
<pre><code>ids = function(liste)
for id in ids:
   print(id)
</code></pre>
<p>I guess an idea should be to do a list of lists, the first big one including the 61 lists of 999 characters for each one and then do a loop: </p>
<pre><code>for lists in list: 
    ids = function(lists)
    for id in ids:
        print(id)
</code></pre>
<p>Does someone have a better idea and/or knows how to create a list of lists depending on the length of the first big list?</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to process a long list in shorter chunks.  You don't need to pre-process the list into a list of short lists.  Here's a generator to break a list into sublists.  Adapt as needed:</p>
<pre><code># Quick way to create a long list of numbers.
# I used a size that isn't a multiple of the chunk size to show that it doesn't matter.
items = list(range(105))

# Function to return smaller lists of the larger list.
def chunk(items,n):
    for i in range(0,len(items),n):
        yield items[i:i+n]

# Break the larger list into length 10 lists.
for subitems in chunk(items,10):
    print(subitems) # process as you want...
</code></pre>
<p>Output:</p>
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
[30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
[50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
[60, 61, 62, 63, 64, 65, 66, 67, 68, 69]
[70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
[80, 81, 82, 83, 84, 85, 86, 87, 88, 89]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[100, 101, 102, 103, 104]
</code></pre>
<p>So your code would look something like:</p>
<pre><code>for sublist in chunk(liste,999):
    taxids = accession.taxid(sublist)
    for tax in taxids:
        print(tax)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You seem to be new to Python. While creating lists in python, you don't need to give a length for that list. Why make a list of lists when you can make a list of strings, and still use it as a list of string? So, you DON'T have to the length into account.</p>
<p>I am not very clear about the question you asked, so correct me if I'm wrong. Also, I'm assuming that <code>accession</code> is a user-made function (made by you), to add new elements to the list.</p>
<p>Following is the code for an already defined <code>liste</code></p>
<pre><code># I am assuming the list  'liste' is already defined
taxids = []
for i in liste:
    taxids.append(list(i))
print(taxids)
</code></pre>
<p>Following is the code for when you want take inputs directly</p>
<pre><code>n = input("no. of inputs that are to be given(the no. of elements that you need in the list): ")
for i in range():
    elem = input("Enter the string: ")
    taxids.append(list(elem))
print(taxids)
</code></pre>
<p>Let me know if this help!</p>
</div>
<span class="comment-copy">What do you mean by a "character"? Is <code>'YP_0025910'</code> one "character"? And by "takes only list <b>above</b> 999 characters", do you mean <b>not more than</b> 999 characters?</span>
<span class="comment-copy">Lists in Python are dynamically created. You won't need to specify the length upfront, like in C. <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html</a></span>
<span class="comment-copy">yes characters is one item in a list. I mean that the lists inside the big list should contain &lt;/= 999 items. In another words if the big list contains 10 000 items, then I want to create 11 lists with 10 lists with 999 items and one with 10 items. Because 10*999 + 10 = 10 000 items. To draw it it would be : <code>list=[[list1],[list2],[list3]...]</code></span>
<span class="comment-copy">Thanks, its what I needed, but in order to find the n I used: <code>chunk=len(liste)/999</code> the issue is that this number is not a finit one for instance I guet &gt;&gt;&gt; <code>chunk=len(liste)/999 &gt;&gt;&gt; chunk</code> 54.06206206206206 But I shall need to split it to 55 pieces instead..</span>
<span class="comment-copy">Well I found a solution by using chunk=round(len(liste)/999)+1</span>
<span class="comment-copy">Thank you very much</span>
<span class="comment-copy">@bean <code>n</code> is supposed to be 999 if thatâ€™s the max list you can process. The function <code>chunk</code> returns lists <code>n</code> long (or less for the last remaining chunk).</span>
<span class="comment-copy">Ok thank you :)</span>
<span class="comment-copy">Oh no no, in fact the function <code>taxids = accession.taxid(liste)</code> takes a list composed of Taxa identity number an return the name of the taxa, let's say YP_098768 is Canis lupus for instance. But I have around 50 000 Taxa identity number, so the shape of my list is about 50 000 items, but the issue is that <code>accession.taxid()</code> only take list with 999 items maximum, so I need to split my list in order to get X list composed with 999 items or less. Thanks for your help.</span>
<span class="comment-copy">Ohhh! I completely misunderstood the question... Can you add this detail to the actual question too? That will make it easier for others to understand.   Meanwhile, I'll try to change my answer! : )</span>
