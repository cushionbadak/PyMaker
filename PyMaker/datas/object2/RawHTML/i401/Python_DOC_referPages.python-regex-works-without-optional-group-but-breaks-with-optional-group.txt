<div class="post-text" itemprop="text">
<p>Given an input:</p>
<pre><code>line = " say hi /* comment"
</code></pre>
<p>and a regex:</p>
<pre><code>regex = re.compile(r'\s*(?P&lt;command&gt;.*?)/[/*]')
result = regex.search(line)
print(result.group('command'))
</code></pre>
<p>This will successfully print <code>say hi</code>.</p>
<p>However, switching the last part to an optional group:</p>
<pre><code>regex = re.compile(r'\s*(?P&lt;command&gt;.*?)(/[/*])?')
</code></pre>
<p>now doesn't print anything.  It's not the regex doesn't match it at all, because <code>result</code> isn't <code>None</code>.</p>
<p>Why is it that it works when the regex is not optional, but stops working when it is optional, and how would I go about solving it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe it is not the answer you are looking for, but it may help:</p>
<pre><code>regex = re.compile(r'\s*(?P&lt;command&gt;.*?)/[/*](?P&lt;optional&gt;.*)')
result = regex.search(line)
print(result.group('command','optional'))
</code></pre>
<p>output:</p>
<pre><code>('say hi ', ' comment')
</code></pre>
<p>For details click <a href="https://regex101.com/r/rymaHU/1" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>regex.search()</code> will find first match substring. You can use <code>regex.findall()</code> in this case.</p>
<p><code>regex.search()</code> docs said:</p>
<blockquote>
<p>If there is more than one match, only the first occurrence of the match will be returned</p>
</blockquote>
<p>Because <code>/[/*]</code> optional, it has no constraint to match <code>/</code> character. So it can even match first space, it can match any part.</p>
<p>You can check this regular expression online in <a href="https://regex101.com/" rel="nofollow noreferrer">regex101</a>. you can find its process and results.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the above example, <code>?P&lt;command&gt;.*?</code> use the non-greedy qualifiers *?, +?, ??, or {m,n}?, which match as little text as possible. See <a href="https://docs.python.org/3/howto/regex.html#greedy-versus-non-greedy" rel="nofollow noreferrer">Greedy versus Non-Greedy</a> for more details</p>
<p>And since the <code>(/[/*])?</code> is optional, the <strong>command</strong> group could be match nothing.</p>
<p>If you want to regex a line without comment, use the following</p>
<pre><code>\s*(?P&lt;command&gt;.*?)(?:/[/*]|$)
</code></pre>
<p>to match</p>
<pre><code>" say hi /* comment"
" say hi ..."
</code></pre>
</div>
<span class="comment-copy"><code>\s*</code> can match the leading space, and then <code>.*?</code> (your 'command' group) can match an empty string.  Generally speaking, a non-greedy match has to have <i>something</i> non-optional following it, or it will happily match nothing at all.</span>
