<div class="post-text" itemprop="text">
<p>Given the following file structure,</p>
<pre><code>├── 0=ocfl_object_1.0
├── inventory.json
├── inventory.json.md5
├── v1
│   ├── content
│   │   ├── foo.xml
│   │   └── level1
│   │       └── level2
│   │           └── bar.txt
│   ├── inventory.json
│   └── inventory.json.md5
└── v2
    ├── content
    │   └── duck.txt
    ├── inventory.json
    └── inventory.json.md5
</code></pre>
<p>I'm wondering if it's possible that python's <code>os.walk</code> function returns the folders in different orders on Mac and Linux?  Both are using python 3.5.</p>
<p>Mac:</p>
<pre><code>In [15]: for root,folders,files in os.walk('foo/bar'): 
    ...:     print(folders,files) 
    ...:                                                                                                                                                                                                                                                                                   
['v1', 'v2'] ['inventory.json', '0=ocfl_object_1.0', 'inventory.json.md5']
['content'] ['inventory.json', 'inventory.json.md5']
['level1'] ['foo.xml']
['level2'] []
[] ['bar.txt']
['content'] ['inventory.json', 'inventory.json.md5']
[] ['duck.txt']
</code></pre>
<p>On Linux:</p>
<pre><code>In [54]: for root,folders,files in os.walk('foo/bar'): 
    ...:     print(folders,files) 
    ...:                                                                                                                                                                                                                                                                                   
['v2', 'v1'] ['inventory.json.md5', 'inventory.json', '0=ocfl_object_1.0']
['content'] ['inventory.json.md5', 'inventory.json']
[] ['duck.txt']
['content'] ['inventory.json.md5', 'inventory.json']
['level1'] ['foo.xml']
['level2'] []
[] ['bar.txt']
</code></pre>
<p>In the case of Mac, looks as though the folder <code>v1</code> is encountered first, while on Linux it's <code>v2</code>.  Any insight as to why this might be the case?</p>
</div>
<div class="post-text" itemprop="text">
<p>See the <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">documentation on <code>os.walk</code></a>, relevant part:</p>
<blockquote>
<p><em>Changed in version 3.5:</em> This function now calls <code>os.scandir()</code> instead
  of <code>os.listdir()</code>, making it faster by reducing the number of calls to
  <code>os.stat()</code>.</p>
</blockquote>
<p>And then in <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>os.scandir()</code></a>:</p>
<blockquote>
<p>Return an iterator of <code>os.DirEntry</code> objects corresponding to the entries
  in the directory given by path. <strong>The entries are yielded in arbitrary
  order</strong>, and the special entries <code>'.'</code> and <code>'..'</code> are not included.</p>
</blockquote>
<p>Regardless of <code>listdir()</code> or <code>scandir()</code>, both are returned in arbitrary order anyhow.</p>
<p>In short - order is not to be expected.</p>
<hr/>
<p>Having said that, you should be able to manipulate the <code>dirnames</code> in the loop based on this part:</p>
<blockquote>
<p>When <em>topdown</em> is <code>True</code>, the caller can modify the <em>dirnames</em> list <strong>in-place</strong>
  (perhaps using <code>del</code> or <code>slice</code> assignment), and <code>walk()</code> will only recurse
  into the subdirectories whose names remain in <em>dirnames</em>; this can be
  used to prune the search, <strong>impose a specific order of visiting</strong>, or even
  to inform <code>walk()</code> about directories the caller creates or renames
  before it resumes <code>walk()</code> again. Modifying <em>dirnames</em> when <em>topdown</em> is
  <code>False</code> has no effect on the behavior of the walk, because in bottom-up
  mode the directories in <em>dirnames</em> are generated before <em>dirpath</em> itself
  is generated.</p>
</blockquote>
<p>So if you <code>folders.sort()</code> it should work based on your <code>sorted</code> order.  I just tried it and it works.  I've also bolded the key part <strong>in-place</strong> - the <code>folders</code> must be sorted in place for <code>os.walk()</code> to take the order:</p>
<pre><code>for root,folders,files in os.walk('foo/bar'): 
    folders.sort()   # &lt;--- sort your folders to impose the order. 
    print(folders,files) 
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4813061/non-alphanumeric-list-order-from-os-listdir">Non-alphanumeric list order from os.listdir()</a></span>
<span class="comment-copy">The order depends on what the OS returns, which is arbitrary, even using the same OS on different computers. If you want them in a certain order, it's up to you to do the sorting.</span>
<span class="comment-copy">The additional info with <code>topdown</code> is really useful. I've used <code>os.walk</code> many times and never have read that, so <code>topdown</code> used to be relatively meaningless to me. I must have been lucky when modifying the <code>dirs</code> variable.</span>
<span class="comment-copy">Actually just learned this while answer this question as well.  I always knew it was in arbitrary order but didn't know you could manipulate the order in place to impose the order.  Guess OP got their wishes :)</span>
<span class="comment-copy">Thanks @Idlehands, this not only answers my question, but some helpful commentary on sorting in place.</span>
