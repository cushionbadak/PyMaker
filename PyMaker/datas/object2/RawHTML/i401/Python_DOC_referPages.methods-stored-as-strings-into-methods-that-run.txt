<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9205081/is-there-a-way-to-store-a-function-in-a-list-or-dictionary-so-that-when-the-inde">Is there a way to store a function in a list or dictionary so that when the index (or key) is called it fires off the stored function?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I had a dictionary like this:</p>
<pre><code>dictionary = { "a":function_1(), "b":function_2(), "c":function_3()}
</code></pre>
<p>But as I don't want all my functions to run when I declare the dictionary, I stored them as strings:</p>
<pre><code>dictionary = { "a":"function_1()", "b":"function_2()", "c":"function_3()"}
</code></pre>
<p>What I wanted to do was to call just one function based on the key that is associated with it:</p>
<pre><code>for key,value in dictionary.items():
     if key == something:
          wanted_variable = value
</code></pre>
<p>If I print wanted_variable now it will return "function_1()", and I want it to be what function_1() returns...</p>
<p>Can anyone help me please?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since functions are first class objects, you can pass around references to them without calling them, and call them later:</p>
<pre><code>dictionary = {
    "a":function_1,  # No parens here anymore
    "b":function_2,  # ''
    "c":function_3,  # ''
}

for key,value in dictionary.items():
     if key == something:
          # "Calling" parens here, not in the dictionary values
          wanted_variable = value()   
</code></pre>
<p>Alternatively,</p>
<pre><code>dictionary = {
    "a":function_1,  # No parens here anymore
    "b":function_2,  # ''
    "c":function_3,  # ''
}

func = dictionary.get(key)
if func:
    wanted_variable = func()
</code></pre>
<p>Which ends up doing the same thing but without having to loop though the dictionary items.</p>
<p>For more complicated scenarios, when you want to capture an uncalled function but <em>also</em> the parameters to that function, there's also <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a></p>
<pre><code>from functools import partial

dictionary = {
    "a":partial(function_1, 123), 
    "b":partial(function_2, 456), 
    "c":partial(function_3, 789),
}

for key,value in dictionary.items():
     if key == something:
          # "Calling" parens here, not in the dictionary values
          # This will actually call, for example, function_1(123).
          wanted_variable = value()   
</code></pre>
<p>For example:</p>
<pre><code>from functools import partial

def foo(x):
    print("x is", x)

wrapped_foo = partial(foo, 123)

# Pass wrapped_foo around however you want...
d = {'func': wrapped_foo}

# Call it later
d['func']()   # Prints "foo is 123"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can store functions without doing a call:</p>
<pre><code>dictionary = { "a":function_1, "b":function_2, "c":function_3}  # no ()
</code></pre>
<p>And after it</p>
<pre><code>for key, value in dictionary.items():
    if key == something:
        wanted_variable = value()
</code></pre>
<p>By the way, there is more efficient way of getting <code>wanted_variable</code>:</p>
<pre><code>if something in dictionary:
    wanted_variable = dictionary[something]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to define dictionary with just function names:</p>
<pre><code>dictionary = {"a":function_1, "b":function_2, "c":function_3}
</code></pre>
<p>If you wrap paranthesis after function name, you call it immediately.</p>
<p>Call the required function matching as:</p>
<pre><code>for key, value in dictionary.items():
     if key == 'a':
          wanted_variable = value()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just store the functions without calling them:</p>
<pre><code>dictionary = { "a":function_1, "b":function_2, "c":function_3}
</code></pre>
<p>Then:</p>
<pre><code>for key,value in dictionary.items():
     if key == something:
          wanted_variable = value()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can store functions without the () so they won't execute, then you could do:</p>
<pre><code>def func1():
   x = "func1"
   print(x)
   return x
def func2():
   x = "func2"
   print(x)
   return x


d = {"a":func1, "b":func2}

wanted_variable = d["a"]()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>eval</code> is a more simpler and actual answer to this question of yours.</p>
<pre><code>dictionary = { "a":"function_1()", "b":"function_2()", "c":"function_3()"}

for key, value in dictionary.items():
    if key == something:
        wanted_variable = eval(value)
</code></pre>
</div>
<span class="comment-copy">The loop isn't necessary; only one key can match <code>something</code>, so just index the dictionary directly.</span>
<span class="comment-copy">@chepner I was focusing on the OP's question but good catch -- I added an alternative under the first block using <code>dict.get</code>.</span>
<span class="comment-copy">You can use "<code>wanted_variable = dictionary[something]()</code>" instead of the looped comparison as well</span>
<span class="comment-copy">I can't if <code>dictionary</code> doesn't contain <code>something</code></span>
<span class="comment-copy">Then just check if <code>something</code> is in the dictionary; no need to iterate through all the keys first. <code>if something in dictionary: wanted_variable = dictionary[something]()</code>.</span>
<span class="comment-copy">We were all copying OP's code example, but you're right, I updated my answer</span>
<span class="comment-copy">In the first you checked the dictionary <code>n</code> times, in the latest you check it twice, <i>but you could</i> check it once with something like <code>func = dictionary.get(something); if func: func()</code></span>
<span class="comment-copy">The loop isn't necessary, either: <code>wanted_variable = d["a"]()</code>.</span>
<span class="comment-copy">True, I edited. Thanks @chepner !.</span>
<span class="comment-copy">You don't need <code>eval</code> at <i>all</i> if you are storing references to the functions in the dictionary.</span>
<span class="comment-copy">I have stored the functions as string in dictionary. Not ref. Wouldnt this work?</span>
<span class="comment-copy">Yeah. Don't do that.</span>
<span class="comment-copy">@chepner it is actually the exact case the question poses. Even though I agree this is not the best approach (see the other answer) and also your comment is valid, I do think this is a valuable and correct answer</span>
<span class="comment-copy">Yep. I got the output as expected as well.</span>
