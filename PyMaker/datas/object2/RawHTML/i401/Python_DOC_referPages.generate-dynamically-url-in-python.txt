<div class="post-text" itemprop="text">
<p>I would like to programatically generate a URL made by these parts</p>
<p>Fixed part</p>
<pre><code>https://booking.snav.it/#/booking/rates/
</code></pre>
<p>Outbound route number - changes</p>
<pre><code>1040
</code></pre>
<p>Outbound date - changes</p>
<pre><code>19-02-2019
</code></pre>
<p>Inbound route number - changes</p>
<pre><code>1042
</code></pre>
<p>Inbound date - changes</p>
<pre><code>20-02-2019
</code></pre>
<p>Parameters:</p>
<pre><code>"adults": "1"
"childs":"0"
"infants":"0"
"res": "0"
"vehicle":"0"
</code></pre>
<p>Output</p>
<pre><code>https://booking.snav.it/#/booking/rates/1040/19-02-2019/1042/19-02-2019?adults=1&amp;childs=0&amp;infants=0&amp;res=0&amp;vehicle=0
</code></pre>
<p>I know how to pass parameters with <code>urllib.parse.urlencode</code></p>
<pre><code>params = urllib.parse.urlencode({
   "adults": "1"
    "childs":"0"
    "infants":"0"
    "res": "0"
    "vehicle":"0"
})

url = "https://booking.snav.it/#/booking/rates/"
res = requests.get(url, params=params)
</code></pre>
<p>but don't know how to build dynamically the first part after the fixed URL <code>1040/19-02-2019/1042/19-02-2019</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A URL is really just a string, any of the usual string manipulation techniques would do here. Your component parts don't have any characters in them that would require URL-encoding here either, making the whole process simpler.</p>
<p>If you do have component parts that use characters that are not in the <a href="https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters" rel="nofollow noreferrer">list of unreserved characters</a>, then use the <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow noreferrer"><code>urllib.parse.quote()</code> function</a> to convert those characters to URL-safe components.</p>
<p>You could use <code>str.join()</code> with <code>/</code> to join string parts:</p>
<pre><code>outbound_route = '1040'
outbound_date = '19-02-2019'
inbound_route = '1042'
inbound_date = '20-02-2019'

url = "https://booking.snav.it/#/booking/rates"  # no trailing /
final_url = '/'.join([url, outbound_route, outbound_date, inbound_route, inbound_date])
</code></pre>
<p>or you could use a <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literal</a>:</p>
<pre><code>url = "https://booking.snav.it/#/booking/rates/"
final_url = f'{url}{outbound_route}/{outbound_date}/{inbound_route}/{inbound_date}'
</code></pre>
<p>This approach has the advantage that the components don't have to be strings; if <code>outbound_route</code> and <code>inbound_route</code> are integers, you don't have to explicitly convert them to strings first.</p>
<p>Or, since URL paths work a lot like POSIX filesystem paths, you could use the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePosixPath" rel="nofollow noreferrer"><code>pathlib.PosixPurePath()</code> class</a> to contruct the path:</p>
<pre><code>from pathlib import PosixPurePath

path = PosixPurePath('/booking/rates') / outbound_route / outbound_date / inbound_route / inbound_date
final_url = f"https://booking.snav.it/#{path}"
</code></pre>
<p>In all cases, you end up with a final URL to use in <code>requests</code>:</p>
<pre><code>res = requests.get(final_url, params=params)
</code></pre>
</div>
<span class="comment-copy">You should dig into <a href="https://realpython.com/python-string-formatting/" rel="nofollow noreferrer">Python string formatting</a>. It is one of the basic concepts of the language and you'll benefit a bunch.</span>
<span class="comment-copy">Thank you - surely going to do it.</span>
<span class="comment-copy">Thank you - great comprehensive answer.</span>
