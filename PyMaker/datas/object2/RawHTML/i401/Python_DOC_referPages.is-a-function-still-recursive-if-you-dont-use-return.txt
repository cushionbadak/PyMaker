<div class="post-text" itemprop="text">
<p>I wrote the following code, which works for calculating Fibonacci sequences:</p>
<pre><code>arr = [0]
i = 1
def get_fib(position):
    if position == 0:
        return arr[0]

    if position &gt; 0:
        global i
        arr.append(i)
        i = i + arr[-2]

        get_fib(position - 1)

    return arr[position]
</code></pre>
<p>Is this still recursion, even though I don't use return before get_fib?
Do I need to include return for a function to be recursive?  </p>
</div>
<div class="post-text" itemprop="text">
<p>The function is recursive because it calls itself. So, no, technically you don't need to return the value from that call for it to be recursive.</p>
<p>However, for the function to work, you do. Consider this example:</p>
<pre><code>def factorial(n):
    if n == 0:
        return 1
    else:
        return factorial(n-1) * n
</code></pre>
<p>This is the same as:</p>
<pre><code>def factorial(n):
    if n == 0:
        result = 1
    else:
        result = factorial(n-1) * n
    return result
</code></pre>
<p>What do you think would happen if we change the next to last line to just:</p>
<pre><code>        factorial(n-1) * n
</code></pre>
<p>Now there is no longer a <code>result</code> being assigned and the function will probably fail, claiming <code>result</code> has no value. If we change the original in a similar way:</p>
<pre><code>def factorial(n):
    if n == 0:
        return 1
    else:
        factorial(n-1) * n
</code></pre>
<p>It would calculate <code>factorial(n-1) * n</code>, but it would simply discard the result and since there is no statement after it, the function would return (!) without a return statement, returning <code>None</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes the function is recursive, by definition, because it calls itself. Where the call to <code>return</code> is placed is not what determines whether or not the function is recursive. However, if you write a recursive function, it must return <em>at some point</em> (known as the "base case"), because if it doesn't it will cause infinite recursion, which will throw an exception ("<em>Runtime Error: maximum recursion depth exceeded</em>") once you pass the Python interpreter's <a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">max recursion limit</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider two examples:<br/>
<strong>Example 1:</strong> </p>
<pre><code>&gt;&gt;&gt; def fun_a():
...     fun_a()
</code></pre>
<p>This is a simple function that, calls itself. This function has no terminating condition (the condition when it has to stop calling itself and start popping the stack contents that was build up during the call to itself). This is an example of infinite recursion. If you execute such function, you'll get an error message similar to this:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in fun_a
  File "&lt;stdin&gt;", line 2, in fun_a
  File "&lt;stdin&gt;", line 2, in fun_a
  [Previous line repeated 995 more times]
RecursionError: maximum recursion depth exceeded
</code></pre>
<p><strong>Example 2:</strong> </p>
<pre><code>&gt;&gt;&gt; def fun_b(n):
...     if n == 0:
...             return
...     fun_b(n-1)
</code></pre>
<p>In this case, even though the function is calling itself over and over again, but there is a termination condition, that will stop the function from calling itself again. This is an example of finite recursion and we say that the recursion unfolds on the base case (here base case is when the value of <code>n</code> becomes <code>0</code>).</p>
<p>To conclude, this is what we say is the general format of a finite recursion. The base case and the recursive call should be in the same order as mentioned here. Otherwise, the function will never stop calling itself and will lead to infinite recursion.</p>
<pre><code>function_name(parameters)
  base case
recursive call
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A function can be recursive even if there is no return statement. A classic example is the <code>inorder</code> traversal of a binary tree. It doesn't have a return statement. The only requirement for a function to be recursive is that it should call itself. Below is the code (in C). </p>
<pre><code>void inorder(struct node* root)
{
    if (root)
    {
        inorder(root-&gt;left);
        printf("%d", data);
        inorder(root-right);
    }

}
</code></pre>
</div>
<span class="comment-copy">"Recursive" just means the function calls itself (directly or indirectly), nothing to do with returns. Your function is recursive.</span>
<span class="comment-copy">There is no Python function without return (there is an implicit <code>return None</code>) or exception.</span>
