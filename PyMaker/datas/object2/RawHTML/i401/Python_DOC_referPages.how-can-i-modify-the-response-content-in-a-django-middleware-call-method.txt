<div class="post-text" itemprop="text">
<p>I'm trying to remove all blank lines in xml response by processing it in a middleware as suggested in this example: <a href="https://code.djangoproject.com/wiki/StripWhitespaceMiddleware" rel="nofollow noreferrer">https://code.djangoproject.com/wiki/StripWhitespaceMiddleware</a><br/>
Now the problem is that in Django 2.1 that code is no more current since Dajngo 1.10 the way the Middleware works change quite a bit.<br/>
Now I see that the response.content is of type bytes and so no straightforward editable with regex.<br/>
What is the correct way to do this in Django 1.10+?  </p>
</div>
<div class="post-text" itemprop="text">
<p>As your said, <code>response.content</code> is a <code>bytes</code> so all arguments in the regex have to by of type <code>byte</code>, including the replacement string.</p>
<pre class="lang-py prettyprint-override"><code>    def __init__(self):
        self.whitespace = re.compile(b'^\s*\n', re.MULTILINE)
        #self.whitespace_lead = re.compile(b'^\s+', re.MULTILINE)
        #self.whitespace_trail = re.compile(b'\s+$', re.MULTILINE)


    def process_response(self, request, response):
        if "text" in response['Content-Type']:
        #Use next line instead to avoid failure on cached / HTTP 304 NOT MODIFIED responses without Content-Type
        #if response.status_code == 200 and "text" in response['Content-Type']:
            if hasattr(self, 'whitespace_lead'):
                response.content = self.whitespace_lead.sub(b'', response.content)
            if hasattr(self, 'whitespace_trail'):
                response.content = self.whitespace_trail.sub(b'\n', response.content)
            if hasattr(self, 'whitespace'):
                response.content = self.whitespace.sub(b'', response.content)
            return response
        else:
            return response    
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Both patterns and strings to be searched can be Unicode strings (str)
  as well as 8-bit strings (bytes). <strong>However, Unicode strings and 8-bit
  strings cannot be mixed</strong>: that is, you cannot match a Unicode string
  with a byte pattern or vice-versa; similarly, <strong>when asking for a
  substitution, the replacement string must be of the same type as both
  the pattern and the search string.</strong></p>
</blockquote>
</div>
<span class="comment-copy">Thanks I'll try that approach, I was decoding it to str and reencoding it to be able to do the substitutions</span>
