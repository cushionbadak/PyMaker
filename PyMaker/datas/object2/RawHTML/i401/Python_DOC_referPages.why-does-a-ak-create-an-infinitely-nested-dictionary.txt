<div class="post-text" itemprop="text">
<p>Here is my Python code that creates an infinitely nested dictionary:</p>
<pre><code>a = a['k'] = {}

print(a)
print(a['k'])
print(a['k']['k'])
print(a is a['k'])
</code></pre>
<p>Here is the output:</p>
<pre><code>{'k': {...}}
{'k': {...}}
{'k': {...}}
True
</code></pre>
<p>The output shows that <code>a['k']</code> refers to <code>a</code> itself which makes it infinitely nested.</p>
<p>I am guessing that the statement:</p>
<pre><code>a = a['k'] = {}
</code></pre>
<p>is behaving like:</p>
<pre><code>new = {}
a = new
a['k'] = new
</code></pre>
<p>which would indeed create an infinitely nested dictionary.</p>
<p>I looked at <a href="https://docs.python.org/3.7/reference/simple_stmts.html#assignment-statements" rel="noreferrer">Section 7.2: Assignment statements</a> of <em>The Python Language Reference</em> but I couldn't find anything that implies that <code>a = a['k'] = {}</code> should first set <code>a</code> to the new dictionary <em>and then</em> insert a key/value pair in that dictionary. Here are some excerpts from the reference that I found relevant but did not answer my question:</p>
<blockquote>
<p>If the target list is a single target with no trailing comma, optionally in parentheses, the object is assigned to that target.</p>
</blockquote>
<blockquote>
<p>If the target is a subscription: The primary expression in the reference is evaluated. It should yield either a mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript expression is evaluated.</p>
</blockquote>
<blockquote>
<p>If the primary is a mapping object (such as a dictionary), the subscript must have a type compatible with the mappingâ€™s key type, and the mapping is then asked to create a key/datum pair which maps the subscript to the assigned object. This can either replace an existing key/value pair with the same key value, or insert a new key/value pair (if no key with the same value existed).</p>
</blockquote>
<p>Each of these excerpts define the behaviour of an assignment with a single target such as <code>a = {}</code> and <code>a['k'] = {}</code> but they don't seem to talk about what should happen in case of <code>a = a['k'] = {}</code>. Where is the order of evaluation for such a statement documented?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assignments in an assignment statement are resolved <strong>from left to right</strong>, as per <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">the section 7.2 you quoted</a> (emphasis mine):</p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that
  this can be a single expression or a comma-separated list, the latter
  yielding a tuple) and assigns the single resulting object to each of
  the target lists, <strong>from left to right</strong>.</p>
</blockquote>
<p>That means that yes, indeed your statement is equivalent to:</p>
<pre><code>new = {}
a = new
a['k'] = new
</code></pre>
<p>As a quick counter-proof, swapping the order of the assignments results in error:</p>
<pre><code>a['k'] = a = {}
</code></pre>
<p>raises</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
</code></pre>
</div>
<span class="comment-copy">Thank you. This makes sense. Assignment statement is defined as <code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)</code>, so <code>a = a['k'] = {}</code> has two <code>target_list</code> elements (<code>a</code> and <code>a['k']</code>) and a <code>starred_expression</code> element (<code>{}</code>), so <code>{}</code> is assigned to each of the target lists <code>a</code> and <code>a['k']</code> from left to right.</span>
