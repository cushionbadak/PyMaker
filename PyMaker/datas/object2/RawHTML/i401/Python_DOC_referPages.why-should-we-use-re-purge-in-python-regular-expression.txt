<div class="post-text" itemprop="text">
<p>What is significance of clearing cache while working with <code>re</code> in Python.
Does it help in performance or memory management? What happens if we ignore it. Where should <code>re.purge()</code> called?</p>
</div>
<div class="post-text" itemprop="text">
<p>Most code will not need to worry about purging the <code>re</code> module cache. It brings very little memory benefit, and can actually <em>hurt</em> performance if you purged it.</p>
<p>The cache is used to store <a href="https://docs.python.org/3/library/re.html#regular-expression-objects" rel="nofollow noreferrer">compiled regular expression objects</a> when you use the top-level <code>re.*</code> functions directly rather than use <code>re.compile(pattern)</code>.  For example, if you used <code>re.search(r'&lt;some pattern&gt;', string_value)</code> in a loop, then the <code>re</code> module would compile <code>'&lt;some pattern&gt;'</code> only once and store it in the cache, avoiding having to re-compile the pattern each time.</p>
<p>How many such objects are cached and how the cache is managed is an implementation detail, really, but regular expression objects are light-weight objects, taking up at most a few hundred bytes, and Python won't store more than a few hundred of these (Python 3.7 stores up to 512).</p>
<p>The cache is also automatically managed, so purging is not normally needed at all. Use it if you specifically need to account for regular expression compilation time in a repeated time trial test involving <code>re.*</code> functions, or are testing the caching functionality itself. The only locations in the Python standard library that call <code>re.purge()</code> are in tests (specifically in the <code>test_re</code> unittests for the <code>re</code> module and the reference leak test in the regression test suite).</p>
<p>If your code is creating a lot of regular expression objects that you intent to keep using, it is better to use <code>re.compile()</code> and keep your own references to those compiled expression objects. See the <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer"><code>re.compile()</code> documentation</a>:</p>
<blockquote>
<p>The sequence</p>
<pre><code>prog = re.compile(pattern)
result = prog.match(string)
</code></pre>
<p>is equivalent to</p>
<pre><code>result = re.match(pattern, string)
</code></pre>
<p>but using <code>re.compile()</code> and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.</p>
<blockquote>
<p><strong>Note</strong>: The compiled versions of the most recent patterns passed to <code>re.compile()</code> and the module-level matching functions are cached, so programs that use only a few regular expressions at a time neednâ€™t worry about compiling regular expressions. </p>
</blockquote>
</blockquote>
</div>
