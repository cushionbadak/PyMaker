<div class="post-text" itemprop="text">
<p>I have a simple function that creates a set for faster lookups. The function will be used a lot. Now, it also takes time to create a set, but this set is fixed for the lifetime of the program; should I lift its creation so that it is only created once, or can I expect Python to know to do as much without my interference? </p>
<p>Example: Is it ok to write the function below, or should the definition of <code>drop_chars</code> be lifted outside the function so that it's only executed once?</p>
<pre><code>def strip_by_category(word):
    drop_chars = set("abcdefg")
    return "".join(c for c in word if c not in drop_chars)
</code></pre>
<h3>Notes</h3>
<ol>
<li>Yes, I know I should use <code>str.translate</code> instead for <em>this</em> example. It's a placeholder to show the use of the constant set.</li>
<li>I am asking about the latest and greatest version of Python. Historical versions may differ, that's ok.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>CPython doesn't use constants when function calls are involved, because you can always override <code>set</code> to point to a different function. <a href="https://docs.python.org/3/whatsnew/3.2.html#optimizations" rel="nofollow noreferrer">Python 3.2</a> started supporting <code>LOAD_CONST</code> when a  set literal is used in <code>in</code> conditions, but still not for assignments.</p>
<p>If you only want to create the set once, you can turn it to a default argument and use <code>frozenset</code> instead to prevent unwanted mutations.</p>
<pre><code>def strip_by_category(word, drop_chars=frozenset("abcdefg")):
    return "".join(c for c in word if c not in drop_chars)
</code></pre>
</div>
<span class="comment-copy">I see the example of "lifting creation," but where's the example of the alternative so we can compare actual code?</span>
<span class="comment-copy">Also note that you can easily time various code snippets with the <code>timeit</code> module, so these "which one is faster" questions are largely moot.</span>
<span class="comment-copy">@TigerhawkT3 The questions are not moot, a decent benchmark with <code>timeit</code> over some varied datasets <i>is</i> a valid answer of course</span>
<span class="comment-copy">Sure, I can profile my code, and (with a little help) I could find out what kind of byte code it produces for <i>this</i> function. But I would like to know what I can expect, more generally, in terms of optimising this kind of constructs.</span>
<span class="comment-copy">Still no example of the alternative? I can't even tell whether the posted example is the "fast" one in terms of the function itself (assuming the "slow" one would be <code>...if c not in set('abcdefg')</code>) or the "slow" one (assuming this function is called many times).</span>
<span class="comment-copy">to illustrate this builds the set once prior to function call you could add <code>print(strip_by_category.__defaults__)</code></span>
<span class="comment-copy">Thanks for the answer-- I'd forgotten the pesky redefinition factor! But are you saying that if I write <code>if not in set(...)</code>, the set could be lifted out and created only once, provided the <code>...</code> is immutable? Can the argument be a tuple, or will only a literal be recognized as sufficiently reliable?</span>
<span class="comment-copy">And thanks for the default argument suggestion; it does keep the definition closer, in terms of code logic, than defining it at the module level. But it is not really a sensible argument for my function... I might define it at the module level or live with the inefficiency.</span>
<span class="comment-copy">@alexis No, like I said Python can't optimize anything related to a function call(for eg. <code>set()</code>) in any case, because user can always override these names. It's only applicable when we use a literal like <code>if 'a' not in {1, 2, 3}</code>. This is also applicable to list and tuple literals.</span>
<span class="comment-copy">@alexis Yes global variable is also fine, but global lookup is slow compared to a local variable, I suggested it for the same reason.</span>
