<div class="post-text" itemprop="text">
<p>I am attempting to build unit tests and have been using mock, However upon using two patch statements, I was not able to set the proper return values.</p>
<pre><code>@patch('pulleffect.lib.google.gcal_helper.validate_and_refresh_creds')
@patch('pulleffect.lib.google.gcal_helper.get_google_creds')
def test_get_calendar_list_for_gcalhelper_without_credentials(self, 
                                                              mock_get_google_creds, 
                                                              mock_validate_and_refresh_creds):
    mock_validate_and_refresh_creds = "redirect"
    mock_get_google_creds = "credentials"
    credentials = pulleffect.lib.google.gcal_helper.get_calendar_list("name","widget")
    assert b'redirect' in credentials
</code></pre>
<p>however the assert fails and instead of the expected string <strong>redirect</strong> I instead get </p>
<pre><code>&lt;MagicMock name = "validate_and_refresh_creds() id = 14054613955344&gt;
</code></pre>
<p>I was wondering what is necessary to have redirect returned instead.  I have not encountered this issue when only patching a single method.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was able to fix the issue of </p>
<pre><code>&lt;MagicMock name = "foo()" id = number&gt;
</code></pre>
<p>incorrectly appearing by replacing my earlier code with: </p>
<pre><code>from mock import MagicMock

def test_get_calendar_list_for_gcalhelper_without_credentials(self):

    rtn = { "redirect": "/gcal/authenticate"}       
    pulleffect.lib.google.gcal_helper.validate_and_refresh_creds = MagicMock(name = "sup", return_value  = rtn)
    pulleffect.lib.google.gcal_helper.get_google_creds = MagicMock(name = "sup2", return_value  = "redirect")
    credentials = pulleffect.lib.google.gcal_helper.get_calendar_list("name","widget")
        assert b'redirect' in credentials
</code></pre>
<p>this allowed the return values to be properly set.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>mock_get_google_creds</code> and <code>mock_validate_and_refresh_creds</code> created with patch decorator are ordinary mock objects (Mock or MagicMock). Direct assignment is not the correct way to set return values. Use <code>return_value</code> attribute:</p>
<pre class="lang-python prettyprint-override"><code>mock_validate_and_refresh_creds.return_value = "redirect"
</code></pre>
<p>Also you can set it during <a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow">patching</a>:</p>
<blockquote>
<p><code>patch</code> takes arbitrary keyword arguments. These will be passed to the
  Mock (or new_callable) on construction.</p>
</blockquote>
<pre class="lang-python prettyprint-override"><code>@patch('pulleffect.lib.google.gcal_helper.get_google_creds', return_value="redirect")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend you to use this solution. You should move your functions to helper class and instead static methods user class methods, because it's possible to mock class in this way.</p>
<pre><code>class GCallHelper(object):
     @classmethond
     def validate_and_refresh(cls):
        ...
        return result

def test_get_calendar_list_for_gcalhelper_without_credentials(self):
    with patch('pulleffect.lib.google.gcal_helper') as mocked_gcal:
        mocked_gcal.return_value.validate_and_refresh_creds.return_value = 'redirect'
        mocked_gcal.return_value.get_google_creds.return_value = 'credentials'

        credentials = pulleffect.lib.google.gcal_helper.get_calendar_list("name","widget")
        assert b'redirect' in credentials
</code></pre>
<p>p.s. And you forgot 'return_value' in your example.</p>
</div>
<span class="comment-copy">as you can see I am attempting to run a test on a method, however the entire suite of tests are for a flask application. I don't know if that may have an effect on this.</span>
