<div class="post-text" itemprop="text">
<p>I have the following problem:  </p>
<pre><code># testcase is a list object  
i=0
for e in testcase:
    testclass = e['class']              #unicode Object
    properties = e['properties']        #dict Object

    probertie = testcase[i]['properties']

    tester = test.ScreenshotCounterTest.ScreenshotCounterTest(probertie)

    #tester = InstanceClass(testclass,propertie)

    tester.checkResults()
    i=i+1
</code></pre>
<p>The unicode object <code>testclass</code> contains several unicode strings like <code>test.ScreenshotCounterTest</code> or <code>FileExistTest</code> </p>
<p>I need a way to initialize these Objects with the property argument</p>
<p>a way to dynamically create objects from this <code>testclass</code> list object.</p>
<p>Thanks for your help</p>
</div>
<div class="post-text" itemprop="text">
<p>If I get what you need, then this should help you:</p>
<pre><code>import importlib

qual_name = "my.module.MyClass"
splitted = qual_name.split(".")
class_name = splitted[-1]
module_name = ".".join(splitted[:-1])

module_obj = importlib.import_module(module_name)
class_obj = getattr(module_obj, class_name)
class_inst = class_obj()   # this is instance of my.module.MyClass; assuming that this class has no-argument constructor; in other case use constructor arguments here
</code></pre>
<p><a href="https://docs.python.org/3/library/importlib.html" rel="nofollow"><code>importlib</code></a> interface may have changed between p2.7 and p3k, I'm not sure. Also, there is (was?) <code>__import__</code> built-in function, but I find <code>importlib</code> most reliable.</p>
<p>In your case <code>testclass</code>/<code>e['class']</code> will be used instead of <code>qual_name</code>, and <code>tester</code> should be assigned like <code>class_inst</code> in this example.</p>
</div>
<span class="comment-copy">you're probably looking for the <code>eval()</code> function. It takes a string as an argument and returns the result of what would happen if that string was the actual code</span>
<span class="comment-copy">I would create a dict that holds the string and corresponding class though it may look redundant.</span>
<span class="comment-copy">no the eval() function doesn't help me</span>
<span class="comment-copy">how did the objects get in testcase?</span>
<span class="comment-copy">OK when i take your solution i get TypeError: 'module' object is not callable</span>
<span class="comment-copy">print value of module_name variable and paste it here. Do the same with qual_name, and class_name.</span>
<span class="comment-copy">module_name = test  qual_name = test.ScreenshotCounterTest  class_name = ScreenshotCounterTest</span>
<span class="comment-copy">In your example you used class name test.ScreenshotCounterTest.ScreenshotCounterTest as class name, and that seems to be the problem. ScreenshotCounterTest is both package name (subpackage of test package) and class name. Change qual_name, so it contains full name of class you want to instantiate, then it should work.</span>
<span class="comment-copy">THANK YOU  yes thats the problem, the packacke name and the class name are the same therefore it has to be test.ScreenshotCounterTest.ScreenshotCounterTest</span>
