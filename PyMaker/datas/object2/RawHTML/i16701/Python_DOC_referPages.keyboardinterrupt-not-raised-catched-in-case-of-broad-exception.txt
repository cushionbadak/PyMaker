<div class="post-text" itemprop="text">
<p>Could somebody explain to me the following. Lets take a look at the code:</p>
<pre><code>if __name__ == '__main__':
    try:
        while 1:
            x = 2+2
    except KeyboardInterrupt:
        print('yo')
</code></pre>
<p>If I run this, wait for a while, then press <code>CTRL</code>+<code>C</code> - exception will be processed, message <code>yo</code> will be printed.</p>
<p>If we change the code to catch a broad exception like this:</p>
<pre><code>if __name__ == '__main__':
    try:
        while 1:
            x = 2+2
    except Exception, e:
        print('yo')
        print(e)
</code></pre>
<p>run it, wait for while, press <code>CTRL</code>+<code>C</code> - KeyboardInterrupt exception will not be catched.</p>
<p>According to <a href="http://docs.python.org/2/library/signal.html" rel="nofollow">python documentation</a>:</p>
<blockquote>
<p>Python installs a small number of signal handlers by default: SIGPIPE is ignored (so write errors on pipes and sockets can be reported as ordinary Python exceptions) and <strong>SIGINT is translated into a KeyboardInterrupt exception</strong>. All of these can be overridden.</p>
</blockquote>
<p>So, why in the second case this exception is not catched (or even is not raised)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot catch <code>KeyboardInterrupt</code> by catching <a href="https://docs.python.org/3/library/exceptions.html#exceptions.Exception" rel="nofollow"><code>Exception</code></a> because the former inherits from <a href="https://docs.python.org/3/library/exceptions.html#exceptions.BaseException" rel="nofollow"><code>BaseException</code></a> only.  You can read about this in the <a href="https://docs.python.org/3/library/exceptions.html#exceptions.KeyboardInterrupt" rel="nofollow">docs</a>:</p>
<blockquote>
<p>exception <code>KeyboardInterrupt</code></p>
<p>Raised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly.
  Interrupts typed when a built-in function <code>input()</code> or <code>raw_input()</code> is
  waiting for input also raise this exception. <strong>The exception inherits
  from <code>BaseException</code></strong> so as to not be accidentally caught by code that
  catches <code>Exception</code> and thus prevent the interpreter from exiting. <em>(Emphasis mine)</em></p>
</blockquote>
<p>This means that you would have to do:</p>
<pre><code>except BaseException, e:
</code></pre>
<p>But that is considered a bad practice.  It would be better to just catch <code>KeyboardInterrupt</code> itself like in your first example.</p>
</div>
<span class="comment-copy">thx for clearify this! =)</span>
<span class="comment-copy">+1, but it might be worth noting that catching all BaseExceptions is even worst than catching all Exceptions ...</span>
<span class="comment-copy">its a question for a separate thread, but will ask here. if I want to post-process ALL kinds of program termination (graceful shutdown) - the only way is to add handlers for all corresponding signals?</span>
<span class="comment-copy">@dizpers - Well, if you want to catch <i>everything</i>, then catching <code>BaseException</code> should be fine.  I was saying if you just want to catch <code>KeyboardInterrupt</code>, then just catch <code>KeyboardInterrupt</code>. :)</span>
<span class="comment-copy">If you want to catch everything, just use bare <code>except:</code>.</span>
