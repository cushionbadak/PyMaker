<div class="post-text" itemprop="text">
<pre><code>class Solution:    
    # @param num, a list of integer
    # @return a list of lists of integers
        def permute(self, num):
            self.res = [];
            self.dfs(num, 0)
            return self.res

        def dfs(self, num, level):
            if level == len(num):
                self.res.append(num)
                print(num)
                return
            for i in range(level, len(num)):
                num[i], num[level] = num[level], num[i]
                self.dfs(num, level+1)
                num[i], num[level] = num[level], num[i]
</code></pre>
<p>The above code is used to generate all permutations given a collection of numbers. For example,
num = [1, 3]
The result will be:
[1 3], [3, 1]</p>
<p>But there is a bug for the above code that I don't understand, which is <code>self.res.append(num)</code>.
If I change it to <code>self.res.append(num[:])</code>, then the code is correct. Can anyone explain why?</p>
<p>Using <code>self.res.append(num)</code>, the result is:</p>
<p>[1, 3], [1, 3]</p>
<p>Using <code>self.res.append(num[:])</code>, the result is:</p>
<p>[1, 3], [3, 1]</p>
</div>
<div class="post-text" itemprop="text">
<p>The elements of a python <code>list</code> are references to other objects. When you append using <code>self.res.append(num)</code>, the list is grown by 1 element, and the last element is set to refer to the object pointed to by <code>num</code>.</p>
<p>Now in the first case, there are 2 references to the same <code>list</code> object. As <code>self.res[0]</code> and <code>self.res[1]</code> refer to the same object, all changes performed through either are also visible through the other.</p>
<p>In the second case, using <code>num[:]</code>, <code>[:]</code> operator makes a new list that is copy of the original.</p>
<hr/>
<p>For general algorithm for creating all permutations of a given collection of elements, use the <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; print(list(permutations([1, 3])))
[(1, 3), (3, 1)]
</code></pre>
</div>
<span class="comment-copy">You could also use <code>list(num)</code> to obtain a copy of num.</span>
<span class="comment-copy">True. The <code>[:]</code> is the general way to make a copy of a sequence if mutable, whereas <code>list()</code> is a way to make a list with elements of an iterable</span>
