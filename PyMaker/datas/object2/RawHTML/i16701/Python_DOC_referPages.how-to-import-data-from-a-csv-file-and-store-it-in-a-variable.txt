<div class="post-text" itemprop="text">
<p>I am extremely new to python 3 and I am learning as I go here.  I figured someone could help me with a basic question: how to store text from a CSV file as a variable to be used later in the code.  So the idea here would be to import a CSV file into the python interpreter: </p>
<pre><code>import csv
with open('some.csv', 'rb') as f:
    reader = csv.reader(f)
    for row in reader:
        ...
</code></pre>
<p>and then extract the text from that file and store it as a variable (i.e. <code>w = ["csv file text"]</code>) to then be used later in the code to create permutations:</p>
<pre><code>print (list(itertools.permutations(["w"], 2)))
</code></pre>
<p>If someone could please help and explain the process, it would be very much appreciated as I am really trying to learn.  Please let me know if any more explanation is needed!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.permutations()</code> wants an iterable (e.g. a list) and a length as its arguments, so your data structure needs to reflect that, but you also need to define what you are trying to achieve here. For example, if you wanted to read a CSV file and produce permutations on every individual CSV field you could try this:</p>
<pre><code>import csv
with open('some.csv', newline='') as f:
    reader = csv.reader(f)
    w = []
    for row in reader:
        w.extend(row)

print(list(itertools.permutations(w, 2)))
</code></pre>
<p>The key thing here is to create a flat list that can be passed to <code>itertools.permutations()</code> - this is done by intialising <code>w</code> to an empty list, and then extending its elements with the elements/fields from each row of the CSV file.</p>
<p><strong>Note</strong>: As pointed out by @martineau, for the reasons explained <a href="https://docs.python.org/3/library/csv.html#id3" rel="nofollow">here</a>, the file should be opened with <code>newline=''</code> when used with the Python 3 csv module.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use Python 3 (as you state in the question) and to process the CSV file using the standard <code>csv</code> module, you should be careful about how to open the file. So far, your code and the answers use the Python 2 way of opening the CSV file. The things has changed in Python 3.</p>
<p>As <a href="https://stackoverflow.com/a/23903383/1346705">shengy</a> wrote, the CSV file is just a text file, and the <code>csv</code> module gets the elements as strings. Strings in Python 3 are unicode strings. Because of that, you should open the file in the text mode, and you should supply the encoding. Because of the nature of CSV file processing, you should also use the <code>newline=''</code> when opening the file.</p>
<p>Now extending the explanation of <a href="https://stackoverflow.com/a/23903201/1346705">Burhan Khalid</a>... When reading the CSV file, you get the rows as lists of strings. If you want to read all content of the CSV file into memory and store it in a variable, you probably want to use the list of rows (i.e. list of lists where the nested lists are the rows). The <code>for</code> loop iterates through the rows. The same way the <code>list()</code> function iterates through the sequence (here through the sequence of rows) and build the list of the items. To combine that with the wish to store everything in the <code>content</code> variable, you can write:</p>
<pre><code>import csv

with open('some.csv', newline='', encoding='utf_8') as f:
    reader = csv.reader(f)
    content = list(reader)
</code></pre>
<p>Now you can do your permutation as you wish. The <code>itertools</code> is the correct way to do the permutations.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv
data = csv.DictReader(open('FileName.csv', 'r'))
print data.fieldnames
output = []
for each_row in data:
   row = {}
   try:
     p = dict((k.strip(), v) for k, v in p.iteritems() if v.lower() != 'null')
   except AttributeError, e:
     print e
     print p
     raise Exception()
//based on the number of column   
if p.get('col1'):
    row['col1'] = p['col1']
if p.get('col2'):
    row['col2'] = p['col2']
output.append(row)
</code></pre>
<p>Finally all data stored in output variable</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you need?</p>
<pre><code>import csv
with open('some.csv', 'rb') as f:
    reader = csv.reader(f, delimiter=',')
    rows = list(reader)

print('The csv file had {} rows'.format(len(rows)))

for row in rows:
   do_stuff(row)

do_stuff_to_all_rows(rows)
</code></pre>
<p>The interesting line is <code>rows = list(reader)</code>, which converts each row from the csv file (which will be a list), into another list <code>rows</code>, in effect giving you a list of lists.</p>
<p>If you had a csv file with three rows, <code>rows</code> would be a list with three elements, each element a row representing each line in the original csv file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you care about is to read the raw text in the file (<code>csv</code> or not) then:</p>
<pre><code>with open('some.csv') as f:
    w = f.read()
</code></pre>
<p>will be a simple solution to having <code>w="csv, file, text\nwithout, caring, about columns\n"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You should try pandas, which work both with Python 2.7 and Python 3.2+ :</p>
<pre><code>import pandas as pd
csv = pd.read_csv("your_file.csv")
</code></pre>
<p>Then you can handle you data easily.</p>
<p>More fun <a href="http://pandas.pydata.org/pandas-docs/stable/io.html" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>First, a <code>csv</code> file is a text file too, so everything you can do with a file, you can do it with a <code>csv</code> file. That means <code>f.read()</code>, <code>f.readline()</code>, <code>f.readlines()</code> can all be used. see detailed information of these functions <a href="https://docs.python.org/3.3/tutorial/inputoutput.html" rel="nofollow">here</a>.</p>
<p>But, as your file is a <code>csv</code> file, you can utilize the <code>csv</code> module.</p>
<pre><code># input.csv
# 1,david,enterprise
# 2,jeff,personal

import csv

with open('input.csv') as f:
    reader = csv.reader(f)
    for serial, name, version in reader:
        # The csv module already extracts the information for you
        print serial, name, version
</code></pre>
<p>More details about the <code>csv</code> module is <a href="https://docs.python.org/3/library/csv.html?highlight=file%20object" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">What do you want to do? Do you want to store all values of a particular column? Can you give a small example here?</span>
<span class="comment-copy">What do you want to permute ? Columns ? Rows ?</span>
<span class="comment-copy">Thank you all for the help and your responses -- much appreciated and makes a newbie like myself feel like he's got some support!  All the best to everyone</span>
<span class="comment-copy">Thank you, this ended up working very well for me!</span>
<span class="comment-copy">In Python 3 csv files should be opened with <code>open('some.csv', newline='', ...)</code> for use with the <code>csv</code> module. Also <code>w = [row for row in reader]</code> or <code>w = list(reader)</code> would both be more "Pythonic", as well as a little shorter and faster.</span>
<span class="comment-copy">@martineau: Using the list comprehension or <code>list(reader)</code> is more Pythonic if permutations of <i>rows</i> is required, however, that does not work with the example that I showed, which was to produce a flat list. The OP didn't specify exactly what permutations were required so this was merely an example. But thanks for mentioning the correct way to open files for Python 3 csv use - I wasn't aware of that. I've updated the answer and included a reference for the justification of this.</span>
<span class="comment-copy">Sorry, you're right â€” I should have written <code>w = [item for row in csv.reader(f) for item in row]</code> or <code>w = list(item for row in csv.reader(f) for item in row)</code>.</span>
<span class="comment-copy">Thank you for taking the time to explain the difference -- I really appreciate it!</span>
