<div class="post-text" itemprop="text">
<p>I am making a multiple choice game with pygame and python. I made a seperate program to work on the circle filling/unfilling I <em>mostly</em> have it down. The circles fill and unfill on the way up, but not on the way down. It's hard to explain, I'd suggest you run the code to really understand what I mean. Any help would be very appreciated!</p>
<p>Heres my code:</p>
<pre><code># Imports a library of functions!
import pygame
import random
# Initializes the game engine
pygame.init()
# Defines the colors
BLACK = (  0,   0,   0)
GREEN = (  3, 255,   3)
# Controls the width of the circle
width_1 = 2
width_2 = 2
width_3 = 2
width_4 = 2
# Un-fills circles
filled_1 = False
filled_2 = False
filled_3 = False
filled_4 = False
# Sets the height and width of the screen
size = [720, 575] 
screen = pygame.display.set_mode(size)
# Loops until the user clicks the close button
done = False
clock = pygame.time.Clock()
# While loop
while not done:
    # Leaves the fps at 30
    clock.tick(30)
    # Cleans the screen and sets the screen background
    screen.fill(GREEN)
    for event in pygame.event.get(): # If user did something
        if event.type == pygame.QUIT: # If user clicked close
            done = True
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            # Finds where you clicked            
            x, y = event.pos
            # Check if mouse was over it
            if circle_1.collidepoint(x, y):
                # Lets the circle draw
                filled_1 = True
                width_1 = 0
            elif circle_2.collidepoint(x, y):
                # Lets the circle draw
                filled_2 = True
                width_2 = 0              
            elif circle_3.collidepoint(x, y):
                # Lets the circle draw
                filled_3 = True
                width_3 = 0
            elif circle_4.collidepoint(x, y):
                # Lets the circle draw
                filled_4 = True
                width_4 = 0
    if filled_1 == True:
        filled_2 = False
        filled_3 = False
        filled_4 = False
        width_2 = 2
        width_3 = 2
        width_4 = 2
    elif filled_2 == True:
        filled_1 = False
        filled_3 = False
        filled_4 = False
        width_1 = 2
        width_3 = 2
        width_4 = 2
    elif filled_3 == True:
        filled_1 = False
        filled_2 = False
        filled_4 = False
        width_1 = 2
        width_2 = 2
        width_4 = 2
    elif filled_4 == True:
        filled_1 = False
        filled_2 = False
        filled_3 = False
        width_1 = 2
        width_2 = 2
        width_3 = 2
    # Circles
    circle_1 = pygame.draw.circle(screen, BLACK, [250, 230], 7, width_1)
    circle_2 = pygame.draw.circle(screen, BLACK, [250, 260], 7, width_2)
    circle_3 = pygame.draw.circle(screen, BLACK, [250, 290], 7, width_3)
    circle_4 = pygame.draw.circle(screen, BLACK, [250, 320], 7, width_4)
    # Update the screen
    pygame.display.flip()   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to set the other variables to <code>False</code> that aren't being clicked when you handle the mouse button being pressed. For example, once <code>filled_1</code> is set to <code>True</code> nothing sets it to <code>False</code>, hence the first if statement will <strong>always</strong> execute, and the other things will be set to <code>False</code>.</p>
<p>There are also simpler ways of accomplishing what you are trying to do, I think you might benefit from looking at some of the <a href="https://docs.python.org/3/" rel="nofollow">Python documentation</a>, it would make your more concise, legible, and also, in many cases, faster.</p>
</div>
