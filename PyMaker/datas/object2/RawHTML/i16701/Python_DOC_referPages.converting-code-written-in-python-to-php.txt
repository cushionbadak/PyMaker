<div class="post-text" itemprop="text">
<p>Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?</p>
<p>Maybe like <code>myString[2:end]</code>?</p>
<p>If leaving the second part means 'till the end', if you leave the first part, does it start from the start?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = "Hello World!"
&gt;&gt;&gt; x[2:]
'llo World!'
&gt;&gt;&gt; x[:2]
'He'
&gt;&gt;&gt; x[:-2]
'Hello Worl'
&gt;&gt;&gt; x[-2:]
'd!'
&gt;&gt;&gt; x[2:-2]
'llo Worl'
</code></pre>
<p>Python calls this concept "slicing" and it works on more than just strings. Take a look <a href="https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">here</a> for a comprehensive introduction.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness as nobody else has mentioned it.  The third parameter to an array slice is a step.  So reversing a string is as simple as:</p>
<pre><code>some_string[::-1]
</code></pre>
<p>Or selecting alternate characters would be:</p>
<pre><code>"H-e-l-l-o- -W-o-r-l-d"[::2] # outputs "Hello World"
</code></pre>
<p>The ability to step forwards and backwards through the string maintains consistency with being able to array slice from the start or end.</p>
</div>
<div class="post-text" itemprop="text">
<p>Substr() normally (i.e. PHP and Perl) works this way: </p>
<pre><code>s = Substr(s, beginning, LENGTH)
</code></pre>
<p>So the parameters are <code>beginning</code> and <code>LENGTH</code>.</p>
<p>But Python's behaviour is different; it expects beginning and one after END (!). <strong>This is difficult to spot by beginners.</strong> So the correct replacement for Substr(s, beginning, LENGTH) is</p>
<pre><code>s = s[ beginning : beginning + LENGTH]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A common way to achieve this is by string slicing. </p>
<p><code>MyString[a:b]</code> gives you a substring from index a to (b - 1).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?</p>
<p>Maybe like <code>myString[2:end]</code>?</p>
</blockquote>
<p>Yes, this actually works if you assign, or <a href="https://docs.python.org/reference/simple_stmts.html#assignment-statements" rel="noreferrer">bind</a>, the name,<code>end</code>, to constant singleton, <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; end = None
&gt;&gt;&gt; myString = '1234567890'
&gt;&gt;&gt; myString[2:end]
'34567890'
</code></pre>
<p>Slice notation has 3 important arguments:</p>
<ul>
<li>start</li>
<li>stop</li>
<li>step</li>
</ul>
<p>Their defaults when not given are <code>None</code> - but we can pass them explicitly:</p>
<pre><code>&gt;&gt;&gt; stop = step = None
&gt;&gt;&gt; start = 2
&gt;&gt;&gt; myString[start:stop:step]
'34567890'
</code></pre>
<blockquote>
<p>If leaving the second part means 'till the end', if you leave the first part, does it start from the start?</p>
</blockquote>
<p>Yes, for example:</p>
<pre><code>&gt;&gt;&gt; start = None
&gt;&gt;&gt; stop = 2
&gt;&gt;&gt; myString[start:stop:step]
'12'
</code></pre>
<p>Note that we include start in the slice, but we only go up to, and not including, stop.</p>
<p>When step is <code>None</code>, by default the slice uses <code>1</code> for the step. If you step with a negative integer, Python is smart enough to go from the end to the beginning.</p>
<pre><code>&gt;&gt;&gt; myString[::-1]
'0987654321'
</code></pre>
<p>I explain slice notation in great detail in <a href="https://stackoverflow.com/a/24713353/541136">my answer to Explain slice notation Question.</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>One example seems to be missing here: full (shallow) copy.</p>
<pre><code>&gt;&gt;&gt; x = "Hello World!"
&gt;&gt;&gt; x
'Hello World!'
&gt;&gt;&gt; x[:]
'Hello World!'
&gt;&gt;&gt; x==x[:]
True
&gt;&gt;&gt;
</code></pre>
<p>This is a common idiom for creating a copy of sequence types (not of interned strings), <code>[:]</code>. Shallow copies a list, see <em><a href="https://stackoverflow.com/questions/323689/python-list-slice-used-for-no-obvious-reason">Python list slice syntax used for no obvious reason</a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've got it right there except for "end". It's called slice notation. Your example should read:</p>
<pre><code>new_sub_string = myString[2:]
</code></pre>
<p>If you leave out the second parameter it is implicitly the end of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would like to add two points to the discussion:</p>
<ol>
<li><p>You can use <code>None</code> instead on an empty space to specify "from the start" or "to the end":</p>
<pre><code>'abcde'[2:None] == 'abcde'[2:] == 'cde'
</code></pre>
<p>This is particularly helpful in functions, where you can't provide an empty space as an argument:</p>
<pre><code>def substring(s, start, end):
    """Remove `start` characters from the beginning and `end` 
    characters from the end of string `s`.

    Examples
    --------
    &gt;&gt;&gt; substring('abcde', 0, 3)
    'abc'
    &gt;&gt;&gt; substring('abcde', 1, None)
    'bcde'
    """
    return s[start:end]
</code></pre></li>
<li><p>Python has <a href="https://docs.python.org/3/library/functions.html#slice" rel="noreferrer">slice</a> objects:</p>
<pre><code>idx = slice(2, None)
'abcde'[idx] == 'abcde'[2:] == 'cde'
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>That's pretty simple:</p>
<pre><code>s = 'Hello, World!'
print(s[:]) # prints "Hello, World!"
print(s[:5]) # prints Hello
print(s[5:]) # prints , World!
print(s[3:7]) # prints "lo, "
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe I missed it, but I couldn't find a complete answer on this page to the original question(s) because variables are not further discussed here. So I had to go on searching.</p>
<p>Since I'm not yet allowed to comment, let me add my conclusion here. I'm sure I was not the only one interested in it when accessing this page:  </p>
<pre><code> &gt;&gt;&gt;myString = 'Hello World'
 &gt;&gt;&gt;end = 5

 &gt;&gt;&gt;myString[2:end]
 'llo'
</code></pre>
<p>If you leave the first part, you get   </p>
<pre><code> &gt;&gt;&gt;myString[:end]
 'Hello' 
</code></pre>
<p>And if you left the : in the middle as well you got the simplest substring, which would be the 5th character (count starting with 0, so it's the blank in this case):</p>
<pre><code> &gt;&gt;&gt;myString[end]
 ' '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If myString contains an account number that begins at offset 6 and has length 9. then you can extract the account number this way: <code>acct = myString[6:][:9]</code>.</p>
<p>If the OP accepts that, they might want to try, in an experimental fashion,</p>
<pre><code>myString[2:][:999999]
</code></pre>
<p>It works - no error is raised and no default 'string padding' occurs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using hardcoded indexes itself can be a mess.</p>
<p>In order to avoid that, Python offers a built-in object <code>slice()</code>.</p>
<pre><code>string = "my company has 1000$ on profit, but I lost 500$ gambling."
</code></pre>
<p>If we want to know how many money I got left.</p>
<p>Normal solution:</p>
<pre><code>final = int(string[15:19]) - int(string[43:46])
print(final)
&gt;&gt;&gt;500
</code></pre>
<p>Using slices:</p>
<pre><code>EARNINGS = slice(15, 19)
LOSSES = slice(43, 46)
final = int(string[EARNINGS]) - int(string[LOSSES])
print(final)
&gt;&gt;&gt;500
</code></pre>
<p>Using slice you gain readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on @CopyPastelt answer, if you want substring based on offset and length:</p>
<pre><code>def substring(s, offset=None, length=None):
    return s[offset:][:length]
</code></pre>
<p>Usage example:</p>
<pre><code>string = 'Hello Beautiful World'
substring(string) #returns 'Hello Beautiful World'
substring(string,length=5) #returns 'Hello'
substring(string,6,9) #returns 'Beautiful'
substring(string,16) #returns 'World'
</code></pre>
</div>
<span class="comment-copy">This one contains a clear explanation <a href="https://www.pythoncentral.io/cutting-and-slicing-strings-in-python/" rel="nofollow noreferrer">pythoncentral.io/cutting-and-slicing-strings-in-python</a></span>
<span class="comment-copy">@mtahmed absolutely related to question. What if you wanted to substring by selecting alternate characters from the string? That would be my_string[::2]</span>
<span class="comment-copy">I think it's more likely you wanted to mention the third parameter to slice.  Needing to get every other character from a string may be an important use case somewhere, but I've never had to do it. Not that there's anything wrong with wanting to show off what you know -- what's the point of knowing things if you can't do that. :) But the case for relevance to the question is overstated.</span>
<span class="comment-copy">Sure, the specific example of selecting alternate characters may not be relevant to the question, but understanding there is a 3rd parameter to slicing very much is relevant and the simple examples serve to illustrate how it works. The Python community also has a great history of educating new members in a friendly way :-)</span>
<span class="comment-copy">The beginners should learn the pythonic way when moving to python, not stick to other language habits</span>
<span class="comment-copy">And just for completeness, Java is like Python in that the String.substring() method takes start and one-past-end. This one just bit me hard, I had assumed it was length like every other substring function in the world.</span>
<span class="comment-copy">A (probably) more pythonic way to do that is <code>s[beginning:][:length]</code></span>
<span class="comment-copy">This has almost nothing to do with the question about substring. Doesn't even apply to string. Saying stringA = stringB is enough ...</span>
<span class="comment-copy">The [:] full copy creates a NEW COPY, uses slice syntax and is read as "substring from start to end"</span>
<span class="comment-copy">What’s the point since strings are immutable? <code>a=b</code> should be sufficient.</span>
<span class="comment-copy">@gimel: Actually, <code>[:]</code> on an immutable type doesn't make a copy at all. While <code>mysequence[:]</code> is mostly harmless when <code>mysequence</code> is an immutable type like <code>str</code>, <code>tuple</code>, <code>bytes</code> (Py3) or <code>unicode</code> (Py2), <code>a = b[:]</code> is equivalent to <code>a = b</code>, it just wastes a little time dispatching the slicing byte codes which the object responds to by returning itself since it's pointless to shallow copy when, aside from object identity tests, it's equivalent to just return another reference to one's immutable self.</span>
<span class="comment-copy">Attempting to sum up the other criticisms of this answer: In Python, strings are immutable, therefore there is no reason to make a copy of a string - so <code>s[:]</code> doesn't make a copy at all: <code>s = 'abc'; s0 = s[:]; assert s is s0</code>. Yes it was the idiomatic way to copy a list in Python until lists got <code>list.copy</code>, but a full slice of an immutable type has no reason to make a copy because it can't be changed, so there may as well be only one in memory and we shouldn't waste time copying it. Since this answer is wrong and <b>doesn't even answer the question</b> - should it be deleted?</span>
<span class="comment-copy">I think if you want to use this method <code>myString[offset:][:length]</code> in the case of OP you can just use <code>myString[offset:][:]</code></span>
<span class="comment-copy">@VictorVal   The answer is for those (like me) who have learned Python as a 2nd (3rd, 4th, ...) programming language and want to some familiar 'syntax hooks' to approach the language. Any experts in the language will most likely view my answer as a bit silly.</span>
<span class="comment-copy">Maybe this isn't the best example, because the hardcoded indexes remain and the readability comes from intermediate variables, which you could have used in the first example.</span>
