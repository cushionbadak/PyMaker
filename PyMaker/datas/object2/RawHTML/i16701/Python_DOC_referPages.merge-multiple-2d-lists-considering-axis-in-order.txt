<div class="post-text" itemprop="text">
<p>My purpose is to combine multiple 2d list in order such as:</p>
<pre><code>a = [[1,2],[3,1]]
b= [[3,6],[2,9]]
c = [[5,1],[8,10]]
Expected: [[1,2,3,6,5,1],[3,1,2,9,8,10]]
</code></pre>
<p>Following other's advice from this site, I tried to use collections module like the code below:</p>
<pre><code>from collections import Counter
a = [[1,2],[3,1]]
b= [[3,6],[2,9]]
c = [[5,1],[8,10]]
d = [[k,v] for k,v in (Counter(dict(a)) + Counter(dict(b))+ Counter(dict(c))).items()]
print d
</code></pre>
<p>However, the result is <code>[[1, 2], [3, 1], [3, 6], [2, 9]]</code> which is not what I expected.</p>
<p>Do you have any idea to solve this problem? Maybe if there is function or module to consider the axis to combine the lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip"><code>zip</code></a> and a <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; a = [[1,2],[3,1]]
&gt;&gt;&gt; b = [[3,6],[2,9]]
&gt;&gt;&gt; c = [[5,1],[8,10]]
&gt;&gt;&gt; [x+y+z for x,y,z in zip(a, b, c)]
[[1, 2, 3, 6, 5, 1], [3, 1, 2, 9, 8, 10]]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="noreferrer"><code>itertools.chain.from_iterable()</code></a>:</p>
<pre><code>&gt;&gt;&gt; a = [[1, 2], [3, 1]]
&gt;&gt;&gt; b = [[3, 6], [2, 9]]
&gt;&gt;&gt; c = [[5, 1], [8, 10]]
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; [list(chain.from_iterable(x)) for x in zip(a, b, c)]
[[1, 2, 3, 6, 5, 1], [3, 1, 2, 9, 8, 10]]
</code></pre>
<p>This might be handy if you have an arbitrary number of 2D lists - for example:</p>
<pre><code>&gt;&gt;&gt; list_of_lists = [
...     [[1, 2], [3, 1]],
...     [[3, 6], [2, 9]],
...     [[5, 1], [8, 10]],
...     # ...
...     [[4, 7], [11, 12]]
... ]
&gt;&gt;&gt; [list(chain.from_iterable(x)) for x in zip(*list_of_lists)]
[[1, 2, 3, 6, 5, 1, ..., 4, 7], [3, 1, 2, 9, 8, 10, ..., 11, 12]]
</code></pre>
<p>Note the <code>*</code> before <code>list_of_lists</code> in this last example, which is an example of <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">argument unpacking</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might be another solution using numpy but this is much slower.</p>
<pre><code>import numpy as np

a = [[1,2],[3,1]]
b = [[3,6],[2,9]]
c = [[5,1],[8,10]]

print np.hstack((np.hstack((a,b)),c))

# [[ 1  2  3  6  5  1]
# [ 3  1  2  9  8 10]]
</code></pre>
<p>and if you want it to have a list format then use</p>
<pre><code>np.hstack((np.hstack((a,b)),c)).tolist()
</code></pre>
</div>
<span class="comment-copy">Thank you very much iCodez!</span>
<span class="comment-copy">Thank you Zero Piraeus!</span>
