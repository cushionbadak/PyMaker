<div class="post-text" itemprop="text">
<p>I'm confused about the namespace and scope of variables in python</p>
<p>Suppose I have a test.py:</p>
<pre><code># -*- coding: utf-8 -*-
"""
@author: jason
"""

if __name__ == '__main__':
    global strName
    print strName
</code></pre>
<p>and then, I define a variable named strName and try to access it in the test.py, but it throws an error:</p>
<pre><code>In [9]: strName = "Joe"

In [10]: run test.py hello
---------------------------------------------------------------------------  NameError                              Traceback (most recent call last)  C:\Anaconda\lib\site-packages\IPython\utils\py3compat.pyc in execfile(fname, glob, loc)
    195             else:
    196                 filename = fname
--&gt; 197             exec compile(scripttext, filename, 'exec') in glob, loc
    198     else:
    199         def execfile(fname, *where):

d:\playground\test.py in &lt;module&gt;()
     13         print "hello"
     14         global strName
---&gt; 15         print strName
     16 

NameError: global name 'strName' is not defined

In [11]:
</code></pre>
<p>I was wondering why this happens and is there any way to access strName in test.py?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>global</code> isn't global. <code>global</code> is module-level; truly global variables like <code>min</code> and <code>int</code> live in the <code>__builtin__</code> module (<code>builtins</code> in Python 3). Using a <code>global</code> declaration at module level is redundant.</p>
<p>I strongly recommend you pass your data to <code>test.py</code> another way, such as by defining a function in there and passing your string as an argument:</p>
<p>test.py:</p>
<pre><code>def print_thing(thing):
    print thing
</code></pre>
<p>other code that wants to use test.py:</p>
<pre><code>import test
test.print_thing("Joe")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>test.py:</strong></p>
<pre><code>strName = "John Doe"
print strName
</code></pre>
<p><strong>Interactive Shell:</strong></p>
<pre><code>$ python
&gt;&gt;&gt; from test import strName
&gt;&gt;&gt; print strName
John Doe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Global is specifically for cases where you have a variable defined outside a method, and want to use it inside that method without passing in parameters. It is put at the top of the method  so that python treats that variable as a global variable, rather then a new local variable with the same name. Global is not a way to declare variables, and since strName isn't in existance, global can't figure out where the location of strName is.</p>
</div>
<span class="comment-copy">a. You do not define <code>strName</code>. b. You need to import <code>test</code>. e.g: <code>from test import strName</code></span>
<span class="comment-copy"><code>if</code> statements do not create a new scope (and <code>global</code> doesn't make sense in a module scope).</span>
<span class="comment-copy">I haven't tested, and will never test, but I believe: <code>globals().update({'strName' : 'Joe'})</code> should work. Although, this comment alone is burning my hands from the pure evil that this statement embodies, in the case that this works.</span>
<span class="comment-copy">@anon: <code>globals</code> is module-level too. <code>import __builtin__; __builtin__.strName = "Joe"</code> works, although it's something to only do in case of dire necessity.</span>
<span class="comment-copy">I think this misses the point as he wants the module to access <code>strName</code> from the user, <i>not</i> the other way around.</span>
<span class="comment-copy">Yes I can see that -- However what the OP is trying to do clearly won't work without some magic :)</span>
<span class="comment-copy">@James Mills thanks, but but I'm still wondering what's the scope of strName if I define it by enter strName = 'Joe' in shell? and how can I access this variable within a module (except passing strName as a parameter of function)?</span>
<span class="comment-copy">Precisely what you said (<i>later part</i>). YOu <b>should</b> pass variables as arguments to a function. I'm not even sure that declaring <code>strName</code> as a global would even work in the use-case you're describing.</span>
<span class="comment-copy">In Python 3 this was changed to <code>nonlocal</code> to avoid confusion.</span>
<span class="comment-copy">@JamesMills: It wasn't. <code>global</code> is still there; <code>nonlocal</code> is specifically for referring to variables from outer but nonglobal scopes. You can see in the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">language reference</a> that the definition disallows using it for global variables.</span>
<span class="comment-copy">Ahh you are quite right :) My mistake.</span>
