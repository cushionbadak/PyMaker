<div class="post-text" itemprop="text">
<p>It is possible for a generator to manage a resource, e.g. by <code>yield</code>'ing from inside a context manager.
The resource is freed as soon as the <code>close()</code> method of the generator is called (or an exception is raised).</p>
<p>As it's easy to forget to call <code>close()</code> in the end, I think it's obvious to use a context manager also for that (and also to handle potential exceptions).
I know that I can use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.closing" rel="nofollow"><code>contextlib.closing</code></a> for that, but wouldn't it be much nicer to directly use the generator in the <code>with</code> statement?</p>
<p>Is there a reason why a generator should <em>not</em> be a context manager?</p>
</div>
<div class="post-text" itemprop="text">
<p>In general, the reason you don't see more generators as context managers and visa versa is that they're aimed at solving different problems. Context managers came about because it provided a clean and concise way of scoping executable code to a resource. </p>
<p>There is one very good reason you might want to separate a class that implements <code>__iter__()</code> from also being a context manager, the Single Responsibility Principle. Single Responsibility boils down to the concept</p>
<blockquote>
<p><em>Make a class do one thing and do it well</em></p>
</blockquote>
<p>Lists are iterable but that's because they're a collection. They manage no state other than what they hold and iteration is just another way of accessing that state. Unless you need iteration as a means of accessing the state of a contained object then I can't see a reason to mix and match the two together. Even then, I would go to great lengths to separate it out in true OO style.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like Wheaties said, you want to have classes do only "one thing and do it well". In particular with context managers, they are managing a context. So ask yourself, what is the context here? Most of the time, it will be having a resource open. A while ago I asked about <a href="https://stackoverflow.com/questions/19454878/using-python-queue-with-a-with-statement">using a queue with a context manager</a>, and the response was basically that a queue did not make sense as a context. However, "in a task" was the real context that I was in and it made sense to make a context manager for that.</p>
<p>Additionally, there is no iterated <code>with</code> statement. For example, I cannot open a file and iterate through it in one statement like this:</p>
<pre><code>for line in file with open(filename) as file:
    ...
</code></pre>
<p>It has to be done in two lines:</p>
<pre><code>with open(filename) as file:
    for line in file:
        ...
</code></pre>
<p>This is good because the context being managed is not "we are iterating through the file", it is "we have a file open". So again, <em>what is the context? What are you really doing?</em> Most likely, your managed context is not actually the iteration through the resource. However, if you look at your specific problem you might discover that you do indeed have a situation in which the generator is managing a context. Hopefully understanding what the context really is should give you some ideas on how to appropriately manage it.</p>
</div>
<span class="comment-copy">Not totally clear what you're getting at.  Are you asking why <i>all</i> generators aren't context managers, or why you shouldn't write one that is?  A generator may not have a <code>close</code> method.  A generator may not have any relationship to any resource that needs to be closed.  If you're writing a generator that does have an external resource, it might well be reasonable to make it a context manager too, but that's not always the case for every generator everyone writes.</span>
<span class="comment-copy">You could just wrap the <code>yield</code> statement in a <code>try</code>\ <code>except</code> then put your cleanup code in a <code>finally</code> block within your generator (or <code>__del__</code> for that matter).  If using a generator, it's more likely to be in a <code>for</code> loop context anyway, which, at least to me, makes wrapping it in a <code>with</code> clunkier.</span>
<span class="comment-copy">@BrenBarn: I thought that all generators have a <code>close()</code> method, don't they? I'm talking about the things that are returned if I call a <i>generator function</i>. And sure, not all generators manage resources, but for those that don't, would it hurt if they were context managers?</span>
<span class="comment-copy">@SilasRay: Of course I could use <code>try</code>/<code>except</code> instead of <code>with</code>, but this doesn't change the fact that if the <code>close()</code> method of the generator is not called, the <code>finally</code> block is not reached.</span>
<span class="comment-copy">@Matthias: You're right, generators now do have <code>close()</code>, I forgot about that, but all it does is stop the generator.  I don't think I've ever even used a generator's <code>close()</code> method.  I think the answer by wheaties below is basically correct: it doesn't make sense to add specific functionality to all generators when it would be meaningless for most of them, and it needlessly couples two distinct behaviors.  I'm curious about how you're using generators, though, that leads you to think along these lines (e.g., why are you calling <code>close()</code>).</span>
<span class="comment-copy">I probably should have stated that I'm mainly talking about situations where generators are used as coroutines, where iteration plays only a minor role. I guess Python itself violated the <i>Single Responsibility Principle</i> when enabling generators to be used both for iteration and as coroutines, right? Also, would it be a violation of the principle that <code>open()</code> returns a context manager? I guess it is, but that's (one of the reasons) why I like Python: <i>practicality beats purity</i>.</span>
<span class="comment-copy">That's an interesting point! But in my case the context is not "I'm iterating over a generator" but "I have a generator open", so I guess this would be a valid use case according to your reasoning. I put a link to my concrete use case and to a generalized example in a comment to my original question. In my concrete example the managed context is an open serial connection.</span>
