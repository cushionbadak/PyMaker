<div class="post-text" itemprop="text">
<p>In Python 2.x there was a <code>L</code> suffix after long integer. As Python 3 treats all integers as long integer this has been removed. From <a href="https://docs.python.org/3.0/whatsnew/3.0.html#integers" rel="nofollow">What's New In Python 3.0</a>:</p>
<blockquote>
<p>The repr() of a long integer doesnâ€™t include the trailing L anymore, so code that unconditionally strips that character will chop off the last digit instead. (Use str() instead.)</p>
</blockquote>
<p>From this I get that <code>repr()</code> won't show <code>L</code> suffix, but <code>str()</code> will have the <code>L</code> suffix. But in Python 3.3.3 none of them are showing <code>L</code> suffix.</p>
<pre><code>Python 3.3.3 (v3.3.3:c3896275c0f6, Nov 18 2013, 21:19:30) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; repr(2 ** 64)
'18446744073709551616'
&gt;&gt;&gt; str(2 ** 64)
'18446744073709551616'
</code></pre>
<p>Shouldn't the output of <code>str()</code> be <code>18446744073709551616L</code> as per the doc? I could not find anything in <a href="https://docs.python.org/3/whatsnew/3.1.html" rel="nofollow">What's New In Python 3.1</a>, <a href="https://docs.python.org/3/whatsnew/3.2.html" rel="nofollow">What's New In Python 3.2</a> and <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow">What's New In Python 3.3</a> that says <code>L</code> suffix is removed from <code>str()</code> too. 3.2 says that:</p>
<blockquote>
<p>The str() of a float or complex number is now the same as its repr().</p>
</blockquote>
<p>But it says nothing about integer.</p>
<p>From which version of Python <code>L</code> suffix is removed in <code>str()</code> too? Or am I missing something obvious?</p>
</div>
<div class="post-text" itemprop="text">
<p>You misunderstood the documentation.</p>
<p>The remark is aimed at people trying to strip the <code>L</code> from <code>repr()</code> <strong>in Python 2</strong>. Those people could use <code>str()</code> instead and get the same number without having to strip the <code>L</code> each time.</p>
<p>In other words, <code>str()</code>, when used on a long integer in Python 2, is the better method to convert the number to a string, as it will never add the <code>L</code> suffix that <code>repr()</code> would add:</p>
<pre><code>Python 2.7.6 (default, Apr 28 2014, 17:17:35) 
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print repr(1L)
1L
&gt;&gt;&gt; print str(1L)
1
</code></pre>
<p>Python 3 will never add the <code>L</code>. Not when using <code>repr()</code>, and not when using <code>str()</code>. There would be no point; <strong>all</strong> integers in Python 3 are long integers.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3.0/whatsnew/3.0.html#integers" rel="nofollow noreferrer">docs.python.org/3.0/whatsnew/3.0.html#integers</a> (4th point)</span>
<span class="comment-copy">Thanks for the clarification. Yes, I misunderstood the documentation.</span>
