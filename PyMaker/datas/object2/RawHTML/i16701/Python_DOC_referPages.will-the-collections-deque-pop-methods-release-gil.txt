<div class="post-text" itemprop="text">
<p>I have a piece of code where I have a processing thread and a monitor thread. In the processing thread, I have a call to collections.deque.popleft function. I wanted to know if this function releases GIL because I want run my monitor thread even when the processing function is blocked on the popleft function</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of answering this specific question I'll answer a different question:</p>
<blockquote>
<p>What is the <a href="https://docs.python.org/3/c-api/init.html?highlight=global%20interpreter%20lock#thread-state-and-the-global-interpreter-lock" rel="nofollow">Global Interpreter Lock (GIL)</a>, and when will it block my program?</p>
</blockquote>
<p>In short, the GIL protects the interpreter's state from becoming corrupted by concurrent threads.  </p>
<p>For a sense of what it is <em>for</em>, Consider the low level implementation of <code>dict</code>, which somewhere has an array of keys, organized for quick lookup.  When you write some code like:</p>
<pre><code>myDict['foo'] = 'bar'
</code></pre>
<p>the python interpreter needs to adjust its collection of keys.  That might involve things like making more room for the additional key as well as adding the particular key to that array.  </p>
<p>If multiple, concurrent threads are modifying that dict, then one thread might reallocate the array while another is in the middle of modifying it, which could cause some unpredictable, probably bad behavior (anything from corrupted data, segfault or heartbleed like memory content leak of sensitive data or arbitrary code execution)</p>
<p>Since that's not the sort of state you can reasonably describe or prevent at the level of your python application, the run-time goes to great lengths to prevent those sorts of problems from occuring.  The way it does it is that certain parts of the interpreter, such as the modification of a dict, is surrounded by a <code>PyGILState_Ensure()</code>/<code>PyGILState_Release()</code> pair, so that critical operations always reach a consistent state.</p>
<p>Note however that the <em>scope</em> of this lock is very narrow; it doesn't attempt to protect from general data races, it won't protect you from writing a program with multiple threads overwriting each other's work in a common container (say, a <code>collections.deque</code>), only that even if you do write such a program, it wont' cause the <em>interpreter</em> to crash, you'll always have a valid, working <code>deque</code>.  You can add additional application locks, as in <code>queue.Queue</code> to give good concurrent semantics to your application.</p>
<p>Since every operation that the GIL protects is a change in the interpreter state, it never blocks on external events; since those events won't cause the interpreter state to be changed, a signaling condition variable cannot corrupt memory.</p>
<hr/>
<p>The only time you might have a problem is when you have several <em>unblocked</em> threads, since they are potentially all executing code in the low level interpreter, they'll compete for the GIL, and only one thread can hold it, blocking other threads that also want to do some computation.  </p>
<p>Unless you are writing C extensions, you probably don't need to worry about it, and unless you have <em>multiple, compute bound threads, in python</em>, you won't be affected by it, either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes -- <code>deque</code> is thread-safe (thanks @hemanths) <a href="http://docs.python.org/2/library/collections.html#collections.deque" rel="nofollow">http://docs.python.org/2/library/collections.html#collections.deque</a></p>
<p><strike>No, because <code>collections.deque</code> is not thread-safe.  Use a <a href="https://docs.python.org/2/library/queue.html" rel="nofollow">Queue</a>, or make your own <code>deque</code> subclass.</strike></p>
</div>
<span class="comment-copy">Do you mean <code>queue.Queue</code>? <code>collections.deque</code> has no <code>get</code> method and if it existed, it wouldn't block because <code>deque</code> isn't for concurrency.</span>
<span class="comment-copy">... and assuming you do mean <code>Queue</code>, the answer would be: of course it releases the GIL. Otherwise it would be useless.</span>
<span class="comment-copy">I have written a get function for my custom class derived from <code>collections.deque</code>, I am just calling the popleft function within this function</span>
<span class="comment-copy">Thanks, it was very useful</span>
<span class="comment-copy">I wonder if this is true, according to python documentation <code>collections.deque</code> is in fact thread safe for append and pop operations : [<a href="https://docs.python.org/2/library/collections.html#collections.deque]" rel="nofollow noreferrer">docs.python.org/2/library/collections.html#collections.deque]</a></span>
<span class="comment-copy">oops, @hemanths you're right -- thanks!</span>
