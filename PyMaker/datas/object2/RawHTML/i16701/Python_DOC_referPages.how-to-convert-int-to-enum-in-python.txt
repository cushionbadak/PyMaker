<div class="post-text" itemprop="text">
<p>Using the new Enum feature (via <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer">backport enum34</a>) with python 2.7.6.</p>
<p>Given the following definition, how can I convert an int to the corresponding Enum value?</p>
<pre><code>from enum import Enum

class Fruit(Enum):
    Apple = 4
    Orange = 5
    Pear = 6
</code></pre>
<p>I know I can hand craft a series of if-statements to do the conversion but is there an easy pythonic way to convert? Basically, I'd like a function ConvertIntToFruit(int) that returns an enum value.</p>
<p>My use case is I have a csv file of records where I'm reading each record into an object.  One of the file fields is an integer field that represents an enumeration.  As I'm populating the object I'd like to convert that integer field from the file into the corresponding Enum value in the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You 'call' the <code>Enum</code> class:</p>
<pre><code>Fruit(5)
</code></pre>
<p>to turn <code>5</code> into <code>Fruit.Orange</code>:</p>
<pre><code>&gt;&gt;&gt; from enum import Enum
&gt;&gt;&gt; class Fruit(Enum):
...     Apple = 4
...     Orange = 5
...     Pear = 6
... 
&gt;&gt;&gt; Fruit(5)
&lt;Fruit.Orange: 5&gt;
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes" rel="nofollow noreferrer">Programmatic access to enumeration members and their attributes</a> section of the documentation:</p>
<blockquote>
<p>Sometimes it’s useful to access members in enumerations
  programmatically (i.e. situations where <code>Color.red</code> won’t do because the
  exact color is not known at program-writing time). <code>Enum</code> allows such
  access:</p>
<pre><code>&gt;&gt;&gt; Color(1)
&lt;Color.red: 1&gt;
&gt;&gt;&gt; Color(3)
&lt;Color.blue: 3&gt;
</code></pre>
</blockquote>
<p>In a related note: to map a string value containing the <em>name</em> of an enum member, use subscription:</p>
<pre><code>&gt;&gt;&gt; s = 'Apple'
&gt;&gt;&gt; Fruit[s]
&lt;Fruit.Apple: 4&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it is in simple words is to convert the <code>int</code> value into <code>Enum</code> by calling <code>EnumType(int_value)</code>, after that access the <code>name</code> of the <code>Enum</code> object:</p>
<pre><code>my_fruit_from_int = Fruit(5) #convert to int
fruit_name = my_fruit_from_int.name #get the name
print(fruit_name) #Orange will be printed here
</code></pre>
<p>Or as a function:</p>
<pre><code>def convert_int_to_fruit(int_value):
    try:
        my_fruit_from_int = Fruit(int_value)
        return my_fruit_from_int.name
    except:
        return None
</code></pre>
</div>
<span class="comment-copy">Thanks just got this as I was re-reading the documentation.  Wasn't clear to me on my first skim through.  Also I just tried using a string and nice to see that it works when the enumeration value is a string as well and I'm assuming any arbitrary object value.</span>
<span class="comment-copy">Very good, so conversion is by value. Is there an analogue for by name other than through a list comprehension to filter through the enum list and take the match on the name attributes?</span>
<span class="comment-copy">@jxramos do follow the documentation link in my answer, it is explicitly covered there. Use item access: <code>Fruit['Orange']</code>.</span>
<span class="comment-copy">Bingo, very awesome! I searched the page for <code>convert</code>,<code>coerce</code>, and <code>cast</code> but didn't hit anything. Looks like the magic was <code>access enum members by name, use item access</code>. Perfecto, thanks so much, going to clean up my code with this syntax.</span>
<span class="comment-copy">Even cooler is that I can use the stuff like <code>"foobar" in Fruit.__members__</code> to test for membership and even pull off <code>Fruit.get( 'foobar', Fruit.Orange )</code> to get that default Enum flavor. My code is looking a lot more simplified removing all these accessory lookup scaffolding I laid down earlier.</span>
