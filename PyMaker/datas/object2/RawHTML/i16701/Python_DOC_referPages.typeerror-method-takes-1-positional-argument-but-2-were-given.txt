<div class="post-text" itemprop="text">
<p>If I have a class ...</p>
<pre><code>class MyClass:

    def method(arg):
        print(arg)
</code></pre>
<p>... which I use to create an object ...</p>
<pre><code>my_object = MyClass()
</code></pre>
<p>... on which I call <code>method("foo")</code> like so ...</p>
<pre><code>&gt;&gt;&gt; my_object.method("foo")
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method() takes exactly 1 positional argument (2 given)
</code></pre>
<p>... why does Python tell me I gave it two arguments, when I only gave one?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, this:</p>
<pre><code>my_object.method("foo")
</code></pre>
<p>... is <a href="http://en.wikipedia.org/wiki/Syntactic_sugar">syntactic sugar</a>, which the interpreter translates behind the scenes into:</p>
<pre><code>MyClass.method(my_object, "foo")
</code></pre>
<p>... which, as you can see, does indeed have two arguments - it's just that the first one is implicit, from the point of view of the caller.</p>
<p>This is because most methods do some work with the object they're called on, so there needs to be some way for that object to be referred to inside the method. By convention, this first argument is called <code>self</code> inside the method definition:</p>
<pre><code>class MyNewClass:

    def method(self, arg):
        print(self)
        print(arg)
</code></pre>
<p>If you call <code>method("foo")</code> on an instance of <code>MyNewClass</code>, it works as expected:</p>
<pre><code>&gt;&gt;&gt; my_new_object = MyNewClass()
&gt;&gt;&gt; my_new_object.method("foo")
&lt;__main__.MyNewClass object at 0x29045d0&gt;
foo
</code></pre>
<p>Occasionally (but not often), you really <em>don't</em> care about the object that your method is bound to, and in that circumstance, you can <a href="https://docs.python.org/3/glossary.html#term-decorator">decorate</a> the method with the builtin <a href="https://docs.python.org/3/library/functions.html#staticmethod"><code>staticmethod()</code></a> function to say so:</p>
<pre><code>class MyOtherClass:

    @staticmethod
    def method(arg):
        print(arg)
</code></pre>
<p>... in which case you don't need to add a <code>self</code> argument to the method definition, and it still works:</p>
<pre><code>&gt;&gt;&gt; my_other_object = MyOtherClass()
&gt;&gt;&gt; my_other_object.method("foo")
foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something else to consider when this type of error is encountered:</p>
<p>I was running into this error message and found this post helpful. Turns out in my case I had overridden an <strong>init</strong>() where there was object inheritance.</p>
<p>The inherited example is rather long, so I'll skip to a more simple example that doesn't use inheritance:</p>
<pre><code>class MyBadInitClass:
    def ___init__(self, name):
        self.name = name

    def name_foo(self, arg):
        print(self)
        print(arg)
        print("My name is", self.name)


class MyNewClass:
    def new_foo(self, arg):
        print(self)
        print(arg)


my_new_object = MyNewClass()
my_new_object.new_foo("NewFoo")
my_bad_init_object = MyBadInitClass(name="Test Name")
my_bad_init_object.name_foo("name foo")
</code></pre>
<p>Result is:</p>
<pre><code>&lt;__main__.MyNewClass object at 0x033C48D0&gt;
NewFoo
Traceback (most recent call last):
  File "C:/Users/Orange/PycharmProjects/Chapter9/bad_init_example.py", line 41, in &lt;module&gt;
    my_bad_init_object = MyBadInitClass(name="Test Name")
TypeError: object() takes no parameters
</code></pre>
<p>PyCharm didn't catch this typo. Nor did Notepad++ (other editors/IDE's might).</p>
<p>Granted, this is a "takes no parameters" TypeError, it isn't much different than "got two" when expecting one, in terms of object initialization in Python.</p>
<p>Addressing the topic: An overloading initializer will be used if syntactically correct, but if not it will be ignored and the built-in used instead. The object won't expect/handle this and the error is thrown.</p>
<p>In the case of the sytax error: The fix is simple, just edit the custom init statement:</p>
<pre><code>def __init__(self, name):
    self.name = name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It occurs when you don't specify the no of parameters the <em>init</em>() or any other method looking for </p>
<p>For example</p>
<pre><code>class Dog:
    def __init__(self):
        print("IN INIT METHOD")

    def __unicode__(self,):
        print("IN UNICODE METHOD")

    def __str__(self):
        print("IN STR METHOD")

obj=Dog("JIMMY",1,2,3,"WOOF")
</code></pre>
<p>When you run the above programme ,it gives you an error like that <strong>TypeError: __init__() takes 1 positional argument but 6 were given</strong></p>
<p>how we can get rid of this thing?</p>
<p>just pass the parameters ,what <em>init</em>() method looking for </p>
<pre><code>class Dog:
    def __init__(self, dogname, dob_d, dob_m, dob_y, dogSpeakText):
        self.name_of_dog = dogname
        self.date_of_birth = dob_d
        self.month_of_birth = dob_m
        self.year_of_birth = dob_y
        self.sound_it_make = dogSpeakText

    def __unicode__(self, ):
        print("IN UNICODE METHOD")

    def __str__(self):
        print("IN STR METHOD")


obj = Dog("JIMMY", 1, 2, 3, "WOOF")
print(id(obj))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pass <code>cls</code> parameter into <code>@classmethod</code> to resolve this problem.</p>
<pre><code>@classmethod
def test(cls):
    return ''
</code></pre>
</div>
<span class="comment-copy">In short: Adding <code>self</code> as first argument to the method solves the problem.</span>
<span class="comment-copy">There's no <code>SyntaxError</code> here. The code is syntactically correct; it just correctly defines a method named <code>___init__</code>, which nobody is ever going to call, instead of the special method <code>__init__</code>. That's why no error is detectedâ€”because there isn't one to detect.</span>
