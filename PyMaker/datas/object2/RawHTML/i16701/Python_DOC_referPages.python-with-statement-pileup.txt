<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3024925/create-a-with-block-on-several-context-managers">Create a “with” block on several context managers? [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I tend to use the Python "with" statement quite often. Mostly for cleaning up a directory after I have symlinked or copied some files into the directory, as the tasks still gets executed even if the python script crashes. Here is an example of on of my functions that can be used with the "with" statement.</p>
<pre><code>@contextmanager
def use_symlink(orig, dest):
    os.symlink(orig, dest)
    try: 
        yield
    finally:
        os.unlink(link)
</code></pre>
<p>The way I use these with statements they tend to pile up quite quickly.</p>
<pre><code>#Off to an adventure
with use_symlink(a, b):
    with use_symlink(c, b):
        with use_symlink(d, b):
            with working_dir(dir1):
                #do something
            with working_dir(dir2):
                #do something that creates file dir2_file1, dir2_file2
                with use_symlink(dir2_file1, b):
                   with use_symlink(dir2_file2, b):
                       with working_dir(b):
                           #Do the last thing
#Home safely
</code></pre>
<p>Is there a better way to do the above with the same ease and safety of the powerful "with" statement?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can put multiple context managers under the same <code>with</code> statement:</p>
<pre><code>with use_symlink(a, b), use_symlink(c, b), use_symlink(d, b):
    with working_dir(dir1):
        #do something
    with working_dir(dir2):
        #do something that creates file dir2_file1, dir2_file2
        with use_symlink(dir2_file1, b), use_symlink(dir2_file2, b), working_dir(b):
            #Do the last thing
</code></pre>
<p>On Python 3, you could use the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow"><code>contextlib.ExitStack()</code></a> to manage multiple context managers:</p>
<pre><code>from contextlib import ExitStack

with ExitStack() as stack:
    for combo in ((a, b), (c, b), (d, b)):
        stack.enter_context(use_symlink(*combo))
    with working_dir(dir1):
        # do something
    with working_dir(dir2):
        #do something that creates file dir2_file1, dir2_file2
        for combo in ((dir2_file1, b), (dir2_file2, b)):
            stack.enter_context(use_symlink(*combo))
        with working_dir(b):
            #Do the last thing
</code></pre>
<p>The <code>use_symlink</code> context managers are then torn down in reverse order when <code>ExitStack()</code> exits.</p>
</div>
<span class="comment-copy"><code>with use_symlink(a, b), use_symlink(c, b), ........:</code>?</span>
<span class="comment-copy">Beat me to it. :-) (+1)</span>
<span class="comment-copy">Wow thanks! I wonder why I have never stumbled upon this.</span>
<span class="comment-copy">@SimonStreicher: This is fairly new, the syntax was expanded in Python 2.7 and 3.1 only.</span>
