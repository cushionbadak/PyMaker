<div class="post-text" itemprop="text">
<p>Using python3.4. Here I want use singledispatch to dispatch different type in <code>__mul__</code> method . The code like this :</p>
<pre><code>class Vector(object):

    ## some code not paste  
    @functools.singledispatch
    def __mul__(self, other):
        raise NotImplementedError("can't mul these type")

    @__mul__.register(int)
    @__mul__.register(object)                # Becasue can't use Vector , I have to use object 
    def _(self, other):
        result = Vector(len(self))           # start with vector of zeros
        for j in range(len(self)):
            result[j] = self[j]*other
        return result

    @__mul__.register(Vector)                # how can I use the self't type
    @__mul__.register(object)                # 
    def _(self, other):
        pass # need impl 
</code></pre>
<p>As you can see the code , I want support Vector*Vertor , This has Name error</p>
<pre><code>Traceback (most recent call last):
  File "p_algorithms\vector.py", line 6, in &lt;module&gt;
    class Vector(object):
  File "p_algorithms\vector.py", line 84, in Vector
    @__mul__.register(Vector)                   # how can I use the self't type
NameError: name 'Vector' is not defined
</code></pre>
<p>The question may be How Can I use class Name a Type in the class's method ? I know c++ have  font class statement . How python solve my problem ? And it is strange to see <code>result = Vector(len(self))</code> where the <code>Vector</code> can be used in method body .
update . After have A look at <a href="http://lukasz.langa.pl/8/single-dispatch-generic-functions/" rel="nofollow">http://lukasz.langa.pl/8/single-dispatch-generic-functions/</a>
I can choose this way to implement :</p>
<pre><code>import unittest
from functools import  singledispatch

class Vector(object):
    """Represent a vector in a multidimensional space."""

    def __init__(self, d):
        self._coords = [0 for i in range(0, d)]
        self.__init__mul__()


    def __init__mul__(self):
        __mul__registry = self.__mul__.registry
        self.__mul__ = singledispatch(__mul__registry[object])
        self.__mul__.register(int, self.mul_int)
        self.__mul__.register(Vector, self.mul_Vector)

    def __setitem__(self, key, value):
        self._coords[key] = value

    def __getitem__(self, item):
        return self._coords[item]

    def __len__(self):
        return len(self._coords)

    def __str__(self):
        return str(self._coords)

    @singledispatch
    def __mul__(self, other):
        print ("error type is ", type(other))
        print (type(other))
        raise NotImplementedError("can't mul these type")

    def mul_int(self,other):
         print ("other type is ", type(other))
         result = Vector(len(self))           # start with vector of zeros
         for j in range(len(self)):
             result[j] = self[j]*other
         return result

    def mul_Vector(self, other):
        print ("other type is ", type(other))
        #result = Vector(len(self))           # start with vector of zeros
        sum = 0
        for i in range(0,len(self)):
            sum += self._coords[i] * other._coords[i]
        return sum

class TestCase(unittest.TestCase):
    def test_singledispatch(self):
        # the following demonstrates usage of a few methods
        v = Vector(5)              # construct five-dimensional &lt;0, 0, 0, 0, 0&gt;
        for i in range(1,6):
            v[i-1] = i
        print(v.__mul__(3))
        print(v.__mul__(v))
        print(v*3)

if __name__ == "__main__":
    unittest.main()
</code></pre>
<p>The ans is strange :</p>
<blockquote>
<pre><code>other type is  &lt;class 'int'&gt;
[3, 6, 9, 12, 15]
other type is  &lt;class '__main__.Vector'&gt;
55
error type is  &lt;class 'int'&gt;
Traceback (most recent call last):
  File "p_algorithms\vector.py", line 164, in &lt;module&gt;
    print(v*3)
  File "C:\Python34\lib\functools.py", line 710, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
  File "p_algorithms\vector.py", line 111, in __mul__
    raise NotImplementedError("can't mul these type")
</code></pre>
</blockquote>
<p><code>v.__mul__(3)</code>  can work but <code>v*3</code> can't work. This is strange From my option <code>v*3</code> is just the same as <code>v.__mul__(3)</code> .</p>
<hr/>
<p>Update after @Martijn Pieters's comment, I still want implement v*3 in class. So I try this</p>
<pre><code>import unittest
from functools import  singledispatch

class Vector(object):

    @staticmethod
    def static_mul_int(self,other):
         print ("other type is ", type(other))
         result = Vector(len(self))           # start with vector of zeros
         for j in range(len(self)):
             result[j] = self[j]*other
         return result

    @singledispatch
    @staticmethod
    def __static_mul__(cls, other):
        print ("error type is ", type(other))
        print (type(other))
        raise NotImplementedError("can't mul these type")


    __mul__registry2 = __static_mul__.registry
    __mul__ = singledispatch(__mul__registry2[object])
    __mul__.register(int, static_mul_int)

    def __init__(self, d):
        self._coords = [0 for i in range(0, d)]
        self.__init__mul__()


    def __init__mul__(self):
        __mul__registry = self.__mul__.registry
        print ("__mul__registry",__mul__registry,__mul__registry[object])
        self.__mul__ = singledispatch(__mul__registry[object])
        self.__mul__.register(int, self.mul_int)
        print ("at last __mul__registry",self.__mul__.registry)

    # @singledispatch
    # def __mul__(self, other):
    #     print ("error type is ", type(other))
    #     print (type(other))
    #     raise NotImplementedError("can't mul these type")


    def mul_int(self,other):
         print ("other type is ", type(other))
         result = Vector(len(self))           # start with vector of zeros
         for j in range(len(self)):
             result[j] = self[j]*other
         return result

    def __setitem__(self, key, value):
        self._coords[key] = value

    def __getitem__(self, item):
        return self._coords[item]

    def __len__(self):
        return len(self._coords)

    def __str__(self):
        return str(self._coords)


class TestCase(unittest.TestCase):
    def test_singledispatch(self):
        # the following demonstrates usage of a few methods
        v = Vector(5)              # construct five-dimensional &lt;0, 0, 0, 0, 0&gt;
        for i in range(1,6):
            v[i-1] = i
        print(v.__mul__(3))
        print("type(v).__mul__'s registry:",type(v).__mul__.registry)
        type(v).__mul__(v, 3)
        print(v*3)

if __name__ == "__main__":
    unittest.main() 
</code></pre>
<p>This time . I implemet like I implement <code>v.__mul__(3)</code>. But the error is </p>
<blockquote>
<pre><code>Traceback (most recent call last):
  File "test.py", line 73, in test_singledispatch
    type(v).__mul__(v, 3)
  File "/usr/lib/python3.4/functools.py", line 708, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
TypeError: 'staticmethod' object is not callable
</code></pre>
</blockquote>
<p>For me static methond should act like the instance methond.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot use <code>functools.singledispatch</code> on methods <strong>at all</strong>, not as a decorator at least.</p>
<p>It doesn't matter that <code>Vector</code> isn't defined here yet; the first argument to any method is always going to be <code>self</code>, while you'd use single dispatch for the <em>second argument</em> here.</p>
<p>Because decorators apply to the <em>function objects</em> before the class object is created, you could just as well register your 'methods' as functions instead, <em>outside</em> of the class body, so you have access to the <code>Vector</code> name:</p>
<pre><code>class Vector(object):

    @functools.singledispatch
    def __mul__(self, other):
        return NotImplemented

@Vector.__mul__.register(int)
@Vector.__mul__.register(Vector)                
def _(self, other):
    result = Vector(len(self))           # start with vector of zeros
    for j in range(len(self)):
        result[j] = self[j]*other
    return result
</code></pre>
<p>For non-supported types, you need to return the <code>NotImplemented</code> <em>singleton</em>, not raise an exception. This way Python will try the inverse operation too.</p>
<p>However, since the dispatch is going to key on the <em>wrong argument</em> (<code>self</code>) here anyway, you'll have to come up with your own single dispatch mechanism.</p>
<p>If you really want to use <code>@functools.singledispatch</code> you'd have to delegate to a regular function, with the arguments <em>inversed</em>:</p>
<pre><code>@functools.singledispatch
def _vector_mul(other, self):
    return NotImplemented

class Vector(object):
    def __mul__(self, other):
        return _vector_mul(other, self)


@_vector_mul.register(int)
def _vector_int_mul(other, self):
    result = Vector(len(self))
    for j in range(len(self)):
        result[j] = self[j] * other
    return result
</code></pre>
<p>As for your updates using <code>__init__mul__</code>: <code>v * 3</code> is <em>not</em> translated to <code>v.__mul__(3)</code>. It is instead translated to <code>type(v).__mul__(v, 3)</code>, see <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer"><em>Special method lookup</em></a> in the Python datamodel reference. This <em>always</em> bypasses any methods set directly on the instance.</p>
<p>Here <code>type(v)</code> is <code>Vector</code>; Python looks up the <em>function</em>, it won't use a bound method here. Again, because <code>functools.singledispatch</code> dispatches on the <em>first</em> argument, always, you cannot use single dispatch directly on the methods of <code>Vector</code>, because that first argument is always going to be a <code>Vector</code> instance.</p>
<p>In other words, Python will <em>not</em> use the methods you set on <code>self</code> in <code>__init__mul__</code>; special methods are <em>never</em> looked up on the instance, see <a href="https://docs.python.org/3/reference/datamodel.html#special-lookup" rel="nofollow noreferrer"><em>Special method lookup</em></a> in the datamodel documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a little ugly, as you need to defer binding the implementation of <code>Vector</code>/<code>Vector</code> multiplication until after <code>Vector</code> is actually defined. But the idea is that the single-dispatch function needs the first argument to be of arbitrary type, so <code>Vector.__mul__</code> will call that function with <code>self</code> as the second argument.</p>
<pre><code>import functools

class Vector:

    def __mul__(self, other):
        # Python has already dispatched Vector() * object() here, so
        # swap the arguments so that our single-dispatch works. Note
        # that in general if a*b != b*a, then the _mul_by_other
        # implementations need to compensate.
        return Vector._mul_by_other(other, self)

    @functools.singledispatch
    def _mul_by_other(x, y):
        raise NotImplementedError("Can't multiply vector by {}".format(type(x)))

    @_mul_by_other.register(int)
    def _(x, y):
        print("Multiply vector by int")

@Vector._mul_by_other.register(Vector)
def _(x, y):
    print("Multiply vector by another vector")

x = Vector()
y = Vector()
x * 3
x * y
try:
    x * "foo"
except NotImplementedError:
    print("Caught attempt to multiply by string")
</code></pre>
</div>
<span class="comment-copy"><code>v * 3</code> is not the same as <code>v.__mul__(3)</code>; it is the same as <code>type(v).__mul__(v, 3)</code>. See <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer"><i>Special method lookup</i></a>.</span>
<span class="comment-copy">What i code v.__mul__(3), is indeed like __mul__(v,3), Here v is the object , 3 is the type I register in ·__init__mul__· （like I bind the  second arg of this fun to dispatch）. if type(v).__mul__(v, 3) is not same . what's the difference with v.__mul__(3). In c language level ?</span>
<span class="comment-copy">It is important to know that Python functions act as descriptors; see <a href="https://wiki.python.org/moin/FromFunctionToMethod" rel="nofollow noreferrer">From Function to Method</a> and <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor HOWTO</a>; this is how Python <i>binds</i> a function to an instance, giving you a method.</span>
<span class="comment-copy">However, for <i>special methods</i> (so <code>__mul__</code> and <code>__add__</code> and <code>__hash__</code>, etc., to support creating a hash of a class and other usecases), Python <i>bypasses</i> bound methods and instead manually passes in <code>self</code>; <code>type(v).__mul__(v, 3)</code> takes the unbound function and passes in <code>v</code> as <code>self</code> directly.</span>
<span class="comment-copy">It isn't clear why you are asking your mini question in your bounty message; either way, you cannot use <code>functools.singledispatch</code> on methods, because decorators always apply to the <i>unbound function</i>, not to the method, so the first argument is <i>always</i> <code>self</code>. My answer sidesteps the issue by delegating the method to a separate, outside singledispatch function instead.</span>
<span class="comment-copy">Could you define a static method <code>_mul_by_others(other, self)</code> for use with single dispatch, then have <code>def __mul__(self, other): return Vector._mul_by_other(other, self)</code>?</span>
<span class="comment-copy">@chepner: I guess so; then at least the first argument is the other type.</span>
<span class="comment-copy">@Sardathrion: ah, and I remember the <b>other</b> reason this doesn't work: special methods are looked up on the <b>type</b>, not the instance. So setting a <code>__mul__</code> attribute on the instance is going to be ignored and so is the singledispatch hook.</span>
<span class="comment-copy">I can use Vector in fun body, like Vector() . Indeed , the decorator to the methond in class is liking static var make self.__mul__ = @functools.singledispatch(self.__mul__) so this eval before a class was define ?</span>
<span class="comment-copy">still have a fun outside the Vector , Can we have a way move it in class .</span>
<span class="comment-copy">You can only use <code>Vector()</code> inside a method definition, because the name isn't actually looked up until you call the function <i>after</i> the (global) name <code>Vector</code> has been bound to the class you are defining. You can't use <code>Vector</code> at class scope, because the name doesn't exit yet, and Python doesn't have forward declarations.</span>
