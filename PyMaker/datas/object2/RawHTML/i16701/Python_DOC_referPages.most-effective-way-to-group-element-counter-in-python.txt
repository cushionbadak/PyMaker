<div class="post-text" itemprop="text">
<p>Suppose I have a list/tuple like that: <code>['a', 'b', 'c', 'a', 'b', 'b', 'c']</code>.</p>
<pre><code>Frequency of 'a': 2
Frequency of 'b': 3
Frequency of 'c': 2
</code></pre>
<p>Now I want to group them by these frequencies, expected output: <code>{2: ['a', 'c'], 3: ['b']}</code> or anything else which I can easily to get the frequency and its items.</p>
<p>How can I do that in the most effective way?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>collections.Counter</code></a> with <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict"><code>collections.defaultdict</code></a></p>
<pre><code>&gt;&gt;&gt; from collections import Counter, defaultdict
&gt;&gt;&gt; l = ['a', 'b', 'c', 'a', 'b', 'b', 'c']
&gt;&gt;&gt; 
&gt;&gt;&gt; counts = Counter(l)
&gt;&gt;&gt; freqs = defaultdict(list)
&gt;&gt;&gt; 
&gt;&gt;&gt; for k,v in counts.items():
...     freqs[v].append(k)
... 
&gt;&gt;&gt; freqs
defaultdict(&lt;type 'list'&gt;, {2: ['a', 'c'], 3: ['b']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>, <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt;
&gt;&gt;&gt; freq = Counter(['a', 'b', 'c', 'a', 'b', 'b', 'c']).most_common()
&gt;&gt;&gt; {key:[x for x, _ in grp]
...  for key, grp in groupby(freq, key=lambda tup: tup[1])}
{2: ['a', 'c'], 3: ['b']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do this slightly differently.</p>
<pre><code>from collections import defaultdict

items = ['a', 'b', 'c', 'a', 'b', 'b', 'c']
counts = defaultdict(list)
for item in set(items):
    counts[items.count(item)].append(item)
dict(counts)
</code></pre>
<p>Counts then looks like this</p>
<pre><code>{2: set(['a', 'c']), 3: set(['b'])}
</code></pre>
</div>
<span class="comment-copy"><code>for k, count in counts.items():freqs[count].append(k)</code> makes it clearer with slightly better naming (subjective, of course).</span>
<span class="comment-copy">Exactly what I'm looking for. I'll notice <code>collections</code> package in Python.</span>
<span class="comment-copy">@Tommy Glad I could help. Consider <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work/5235#5235">accepting</a> this answer if it worked for you.</span>
<span class="comment-copy">@arshajii: Yes, of course. I'll but not now, because I have to wait in a few minutes. :)</span>
