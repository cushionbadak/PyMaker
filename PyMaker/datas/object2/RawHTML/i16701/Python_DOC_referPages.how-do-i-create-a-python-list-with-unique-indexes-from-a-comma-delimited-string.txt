<div class="post-text" itemprop="text">
<p>I'm trying to create a list from a string of comma delimited values in python using <code>split()</code>. I am observing when I do this my list appears to have multiple indexes that are the same, which appears to be because some of the values are the same. I'd like to have each element have its own sequential  index, so I can use the index to access them positionally, how do I do this? Here is the code for context:</p>
<pre><code>haproxy_socket_data ='''
pxname,svname,qcur,qmax,scur,smax,slim,stot,bin,bout,dreq,dresp,ereq,econ,eresp,wretr,wredis,status,weight,act,bck,chkfail,chkdown,lastchg,downtime,qlimit,pid,iid,sid,throttle,lbtot,tracked,type,rate,rate_lim,rate_max,check_status,check_code,check_duration,hrsp_1xx,hrsp_2xx,hrsp_3xx,hrsp_4xx,hrsp_5xx,hrsp_other,hanafail,req_rate,req_rate_max,req_tot,cli_abrt,srv_abrt,
fe,FRONTEND,,,0,1,2000,45,0,8415,0,0,45,,,,,OPEN,,,,,,,,,1,1,0,,,,0,0,0,1,,,,0,0,0,45,0,0,,0,1,45,,,
bend,host1,0,0,0,0,,0,0,0,,0,,0,0,0,0,UP,1,1,0,0,0,113,0,,1,2,1,,0,,2,0,,0,L4OK,,0,0,0,0,0,0,0,0,,,,0,0,
'''
haproxy_socket_data = haproxy_socket_data.splitlines()

for line in haproxy_socket_data:
    stats = line.split(',')
    print line
    print stats
    for i in stats:
        print i
        print "index: %s" % stats.index(i)
</code></pre>
<p>Here is the output of this code: <a href="https://gist.github.com/wjimenez5271/74df2b16b540a7d9de0c" rel="nofollow noreferrer">https://gist.github.com/wjimenez5271/74df2b16b540a7d9de0c</a></p>
<p>I found these examples of how do get this data into a list, but none of them addressed my situation where some values are the same:</p>
<p><a href="https://stackoverflow.com/questions/5864485/how-can-i-split-this-comma-delimited-string-in-python">How can I split this comma-delimited string in Python?</a></p>
<p><a href="https://stackoverflow.com/questions/7844118/how-to-convert-comma-delimited-string-to-list-in-python">How to convert comma-delimited string to list in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You're misunderstanding what <code>index()</code> does. The <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow">Python documentation</a> says:</p>
<blockquote>
<pre><code>s.index(x[, i[, j]])
</code></pre>
<p>index of the first occurrence of <em>x</em> in <em>s</em> (at or after index <em>i</em> and before index <em>j</em>)</p>
</blockquote>
<p>So, each time you call <code>stats.index(i)</code> in your code, the index of <strong>first</strong> occurrence of <code>i</code> in <code>stats</code> will be returned.</p>
<p>If you want to keep track of the index of elements of a list as you iterate over it, you want <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate()</code></a>:</p>
<pre><code>for index, item in enumerate(stats):
    print item
    print "index: %s" % index
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason why it <em>seems</em> like you have duplicate indices, but actually list.index() in python will return the <strong>first</strong> occurance of that value.  Try using a for loop that indexes them individually rather than a for in that inherently uses an iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to keep the index, use a <code>for</code> loop with <code>enumerate</code>, or with <code>range()</code>:</p>
<pre><code>haproxy_socket_data = """
pxname,svname,qcur,qmax,scur,smax,slim,stot,bin,bout,dreq,dresp,ereq,econ,eresp,wretr,wredis,status,weight,act,bck,chkfail,chkdown,lastchg,downtime,qlimit,pid,iid,sid,throttle,lbtot,tracked,type,rate,rate_lim,rate_max,check_status,check_code,check_duration,hrsp_1xx,hrsp_2xx,hrsp_3xx,hrsp_4xx,hrsp_5xx,hrsp_other,hanafail,req_rate,req_rate_max,req_tot,cli_abrt,srv_abrt,
fe,FRONTEND,,,0,1,2000,45,0,8415,0,0,45,,,,,OPEN,,,,,,,,,1,1,0,,,,0,0,0,1,,,,0,0,0,45,0,0,,0,1,45,,,
bend,
"""
haproxy_socket_data = haproxy_socket_data.splitlines()
for line in haproxy_socket_data:
    stats = [item for item in line.split(',') if len(item) &gt;= 1] #Gets rid of items like ['']
    print line
    print stats
    for ind, it in enumerate(stats):
        print it
        print "index: %d" % ind
</code></pre>
<p>Or, use <code>range(len())</code>:</p>
<pre><code>haproxy_socket_data ="""
    pxname,svname,qcur,qmax,scur,smax,slim,stot,bin,bout,dreq,dresp,ereq,econ,eresp,wretr,wredis,status,weight,act,bck,chkfail,chkdown,lastchg,downtime,qlimit,pid,iid,sid,throttle,lbtot,tracked,type,rate,rate_lim,rate_max,check_status,check_code,check_duration,hrsp_1xx,hrsp_2xx,hrsp_3xx,hrsp_4xx,hrsp_5xx,hrsp_other,hanafail,req_rate,req_rate_max,req_tot,cli_abrt,srv_abrt,
    fe,FRONTEND,,,0,1,2000,45,0,8415,0,0,45,,,,,OPEN,,,,,,,,,1,1,0,,,,0,0,0,1,,,,0,0,0,45,0,0,,0,1,45,,,
    bend,
    """
haproxy_socket_data = haproxy_socket_data.splitlines()
for line in haproxy_socket_data:
    stats = [item for item in line.split(',') if len(item) &gt;= 1] #Gets rid of items like ['']
    print line
    print stats
    for i in range(len(stats):
        print stats[i]
        print "index: %d" % i
</code></pre>
<p><code>list.index()</code> returns the <strong>first</strong> occurrence of the item:</p>
<pre><code>&gt;&gt;&gt; item = [1, 2, 5, 7, 3, 3, 8, 9, 5]
&gt;&gt;&gt; item.index(5)
2
&gt;&gt;&gt; item[2]
5
&gt;&gt;&gt; item[8]
5
&gt;&gt;&gt; 
</code></pre>
<p>Using <code>enumerate()</code>:</p>
<pre><code>&gt;&gt;&gt; for ind, it in enumerate(item):
...     if it == 5:
...             print ind
... 
2
8
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If data values have a comma in them, then the straightforward <code>split(",")</code> won't be correct.</p>
<p>Check the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">csv</a> module.  It supports figuring out ("sniffing") the proper split and quote parameters.  It also lets you read each row of data into a dictionary, so you can refer to data by name.  No more column counting!</p>
<p>Example. Note the backslash, so the sniffer can read header from the first line of data:</p>
<pre><code>haproxy_socket_data ='''\
pxname,svname,qcur,qmax,scur,smax,slim,stot,bin,bout,dreq,dresp,ereq,econ,eresp,wretr,wredis,status,weight,act,bck,chkfail,chkdown,lastchg,downtime,qlimit,pid,iid,sid,throttle,lbtot,tracked,type,rate,rate_lim,rate_max,check_status,check_code,check_duration,hrsp_1xx,hrsp_2xx,hrsp_3xx,hrsp_4xx,hrsp_5xx,hrsp_other,hanafail,req_rate,req_rate_max,req_tot,cli_abrt,srv_abrt,
fe,FRONTEND,,,0,1,2000,45,0,8415,0,0,45,,,,,OPEN,,,,,,,,,1,1,0,,,,0,0,0,1,,,,0,0,0,45,0,0,,0,1,45,,,
bend,host1,0,0,0,0,,0,0,0,,0,,0,0,0,0,UP,1,1,0,0,0,113,0,,1,2,1,,0,,2,0,,0,L4OK,,0,0,0,0,0,0,0,0,,,,0,0,
'''

import csv, StringIO

dialect = csv.Sniffer().sniff(haproxy_socket_data)

reader = csv.reader( 
    StringIO.StringIO(haproxy_socket_data), dialect=dialect,
    )
for row in reader:
    print row

print

dictr = csv.DictReader( 
    StringIO.StringIO(haproxy_socket_data),
    dialect=dialect,
    )
for drow in dictr:
    print 'svname',drow['svname']
</code></pre>
<p>Output:</p>
<blockquote>
<p>['pxname', 'svname', 'qcur', 'qmax', 'scur', 'smax', 'slim', 'stot',
  'bin', 'bout', 'dreq', 'dresp', 'ereq', 'econ', 'eresp', 'wretr',
  'wredis', 'status', 'weight', 'act', 'bck', 'chkfail', 'chkdown',
  'lastchg', 'downtime', 'qlimit', 'pid', 'iid', 'sid', 'throttle',
  'lbtot', 'tracked', 'type', 'rate', 'rate_lim', 'rate_max',
  'check_status', 'check_code', 'check_duration', 'hrsp_1xx',
  'hrsp_2xx', 'hrsp_3xx', 'hrsp_4xx', 'hrsp_5xx', 'hrsp_other',
  'hanafail', 'req_rate', 'req_rate_max', 'req_tot', 'cli_abrt',
  'srv_abrt', ''] ['fe', 'FRONTEND', '', '', '0', '1', '2000', '45',
  '0', '8415', '0', '0', '45', '', '', '', '', 'OPEN', '', '', '', '',
  '', '', '', '', '1', '1', '0', '', '', '', '0', '0', '0', '1', '', '',
  '', '0', '0', '0', '45', '0', '0', '', '0', '1', '45', '', '', '']
  ['bend', 'host1', '0', '0', '0', '0', '', '0', '0', '0', '', '0', '',
  '0', '0', '0', '0', 'UP', '1', '1', '0', '0', '0', '113', '0', '',
  '1', '2', '1', '', '0', '', '2', '0', '', '0', 'L4OK', '', '0', '0',
  '0', '0', '0', '0', '0', '0', '', '', '', '0', '0', '']</p>
<p>svname FRONTEND svname host1</p>
</blockquote>
</div>
<span class="comment-copy">See here: <a href="http://www.stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order" title="how do you remove duplicates from a list in python whilst preserving order">stackoverflow.com/questions/480214/â€¦</a></span>
<span class="comment-copy"><code>index</code> is the wrong function, it returns the first index of the element provided (in this case <code>i</code>). If you want to iterate over the list while getting this sequential index you are looking for you can use <code>enumerate</code>.</span>
<span class="comment-copy">Do you just want to convert all this into a flat list? If so, you could just re.split(r'[\n\,]+', haproxy_socket_data)</span>
<span class="comment-copy">@filmor yes that seems to be an issue, thanks.</span>
<span class="comment-copy">Thanks for the thorough explanation</span>
