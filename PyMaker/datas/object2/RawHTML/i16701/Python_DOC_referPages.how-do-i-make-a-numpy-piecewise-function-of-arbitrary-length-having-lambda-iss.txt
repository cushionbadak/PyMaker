<div class="post-text" itemprop="text">
<p>I'm trying to plot a piecewise fit to my data, but I need to do it with an arbitrary number of line segments.  Sometimes there are three segments; sometimes there are two.  I'm storing the coefficients of the fit in actable and the bounds on the segments in btable.</p>
<p>Here are example values of my bounds:</p>
<pre><code>btable = [[0.00499999989, 0.0244274978], [0.0244275965, 0.0599999987]]
</code></pre>
<p>Here are example values of my coefficients:</p>
<pre><code>actable = [[0.0108687987, -0.673182865, 14.6420775], [0.00410866373, -0.0588355861, 1.07750032]]
</code></pre>
<p>Here's what my code looks like:</p>
<pre><code>rfig = plt.figure()
&lt;&gt;various other plot specifications&lt;&gt;
x = np.arange(0.005, 0.06, 0.0001)
y = np.piecewise(x, [(x &gt;= btable[i][0]) &amp; (x &lt;= btable[i][1]) for i in range(len(btable))], [lambda x=x: np.log10(actable[j][0] + actable[j][2] * x + actable[j][2] * x**2) for j in list(range(len(actable)))])
plt.plot(x, y)
</code></pre>
<p>The problem is that lambda sets itself to the last instance of the list, so it uses the coefficients for the last segment for all the segments.  I don't know how to do a piecewise function without using lambda.  </p>
<p>Currently, I'm cheating by doing this:</p>
<pre><code>if len(btable) == 2:
    y = np.piecewise(x, [(x &gt;= btable[i][0]) &amp; (x &lt;= btable[i][1]) for i in range(len(btable))], [lambda x: np.log10(actable[0][0] + actable[0][1] * x + actable[0][2] * x**2), lambda x: np.log10(actable[1][0] + actable[1][1] * x + actable[1][2] * x**2)])
else if len(btable) == 3:
    y = np.piecewise(x, [(x &gt;= btable[i][0]) &amp; (x &lt;= btable[i][1]) for i in range(len(btable))], [lambda x: np.log10(actable[0][0] + actable[0][1] * x + actable[0][2] * x**2), lambda x: np.log10(actable[1][0] + actable[1][1] * x + actable[1][2] * x**2), lambda x: np.log10(actable[2][0] + actable[2][1] * x + actable[2][2] * x**2)])
else
    print('Oh no!  You have fewer than 2 or more than 3 segments!')
</code></pre>
<p>But this makes me feel icky on the inside.  I know there must be a better solution.  Can someone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>This issue is common enough that Python's official documentation has an article <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">Why do lambdas defined in a loop with different values all return the same result?</a> with a suggested solution: create a local variable to be initialized by the loop variable, to capture the changing values of the latter within the function. </p>
<p>That is, in the definition of <code>y</code> it suffices to replace </p>
<pre><code>[lambda x=x: np.log10(actable[j][0] + actable[j][1] * x + actable[j][2] * x**2) for j in range(len(actable))]
</code></pre>
<p>by </p>
<pre><code>[lambda x=x, k=j: np.log10(actable[k][0] + actable[k][1] * x + actable[k][2] * x**2) for j in range(len(actable))]
</code></pre>
<hr/>
<p>By the way, one can use one-sided inequalities to specify ranges for numpy.piecewise: the <strong>last</strong> of the conditions that evaluate to True will trigger the corresponding function. (This is a somewhat counterintuitive priority; using the <em>first</em> true condition would be more natural, like SymPy does). If the breakpoints are arranged in increasing order, then one should use "x&gt;=" inequalities:</p>
<pre><code>breaks = np.arange(0, 10)       # breakpoints
coeff = np.arange(0, 20, 2)     # coefficients to use
x = np.arange(0, 10, 0.1)
y = np.piecewise(x, [x &gt;= b for b in breaks], [lambda x=x, a=c: a*x for c in coeff])
</code></pre>
<p>Here each coefficient will be used for the interval that <em>begins</em> with the corresponding breakpoint; e.g., coefficient c=0 is used in the range <code>0&lt;=x&lt;1</code>, coefficient c=2 in the range <code>1&lt;=x&lt;2</code>, and so on.</p>
</div>
<span class="comment-copy">Why not use an actual, non-<code>lambda</code> function?</span>
<span class="comment-copy">This has got nothing to do with the piecewise function. It is due to the <a href="https://stackoverflow.com/questions/938429/scope-of-python-lambda-functions-and-their-parameters">lexical closure</a>. the common solution is to use a "factory function" to return that lambda.</span>
<span class="comment-copy">Thanks!  I added a factory function, and now it works fine:     def segfunc(i):      	return lambda x: np.log10(actable[i][0] + actable[i][1] * x + actable[i][2] * x**2)      y = np.piecewise(x, [(x &gt;= btable[i][0]) &amp; (x &lt;= btable[i][1]) for i in range(len(btable))], [segfunc(j) for j in list(range(len(actable)))])</span>
