<div class="post-text" itemprop="text">
<p>I want to generate a configuration file for some external software package. The configuration file requires some sensitive information like AWS access keys and passwords etc. I want to make these configuration files public on github but obviously I don't want to hardcode and expose these credentials.</p>
<p>The credentials also have to show up in the right place in the config file so I can't just "cat" them on to the end. </p>
<p>I figured that using a tempting language like jinja2,mako, django etc would be a good solution. Then I can just put the the templates online and require the user to make a new file with credentials and run a script (that I provide) to render the template. A template engine would also enable other more sophisticated editing (I think).  </p>
<p>Can someone recommend a particular template engine that would make this easy? I imagine something where you make a template and then render it by providing a dictionary containing the variables to assign. Maybe they all do this. I don't know.</p>
<p>To be a little more specific I would like something that does something like this</p>
<pre><code>Template("Hello {{name}}, you are #{{num}}").render({"name":"Joe","num":1}) 
</code></pre>
<p>All the templates that I see look like this </p>
<pre><code>Template("Hello {{name}}, you are #{{num}}").render(name="Joe", num=1)
</code></pre>
<p>That makes it difficult to write a general program which reads a parameter file of key value pairs and hands them to a template to render. For example, it might require using "eval" which is awkward.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If your templating language only allows <code>render(a=foo, b=bar)</code>, you can work around it like so: <code>d = {"a": foo, "b": bar}; render(**d)</code> -- no need for eval.</p>
<p>For more info, read <a href="https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can do this with any templating system. If your parameters are in a dictionary but the template API requires keywords, use <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">argument unpacking syntax</a>:</p>
<pre><code>my_template.render(**my_parameter_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is rather opinion based, but I use jinja2 in combination with YAML.</p>
<p>Jinja2 is very flexible and allows looping, escaping etc.</p>
<p>YAML is easy to edit, can be converted to python dictionary and values of this Python dictionary can be used as base for rendering your templates.</p>
<p>I was pleased to find SaltStack solution using as default just these two - Jinja2 and YAML. Probably for good reasons.</p>
</div>
<span class="comment-copy">You could always unpack your dictionary into keywords in the function call with <code>.render(**mydict)</code></span>
<span class="comment-copy">try the Mako template language</span>
<span class="comment-copy">Blckknght, I don't understand. Can you give an example? I'd rather not have to change the code when someone adds another key-value pair. For example, someone might want to change my template and add a line like "install XXX user={{XXX_user}} password= {XXX_password}}"</span>
<span class="comment-copy">I want this to work by just adding XXX_user and XXX_password to the other private file. I'd rather not have to have them modify the script which does this substitution.</span>
<span class="comment-copy">This shouldn't be labeled an opinion-based question. I asked for a specific package that could fill out a template from a dictionary. The answer, apparently, was that they all do that if you use the ** syntax. Beyond that, I'm not asking for opinions on which template engine is best. So please take off of hold. It's a valid and educational question.</span>
<span class="comment-copy">Hmm. I did not know that about Python. Cool.</span>
