<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15889131/how-to-find-the-cumulative-sum-of-numbers-in-a-list">How to find the cumulative sum of numbers in a list?</a>
<span class="question-originals-answer-count">
                    18 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I have two lists of the same size in Python, the first: </p>
<pre><code>[100, 200, 300, 400]
</code></pre>
<p>and I want the other to be: </p>
<pre><code>[0, 100, 300, 600] 
</code></pre>
<p>which is each element in the 2nd list equals the sum of all previous elements in the first.</p>
<p>Is there a built-in Python function that does such an operation on a list? Or do I have to think about an algorithm to do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use Python 3.2+, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt;
&gt;&gt;&gt; a_list = [100, 200, 300, 400]
&gt;&gt;&gt; list(itertools.accumulate([0] + a_list[:-1]))
[0, 100, 300, 600]
</code></pre>
<p><strong>UPDATE</strong></p>
<p>To avoid creation of temporary list, use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice</code></a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, accumulate, islice
&gt;&gt;&gt;
&gt;&gt;&gt; a_list = [100, 200, 300, 400]
&gt;&gt;&gt; list(accumulate(chain([0], islice(a_list, 0, len(a_list) - 1))))
[0, 100, 300, 600]
</code></pre>
</div>
<span class="comment-copy">I don't think such a function exists. You can write a simple function to do that</span>
<span class="comment-copy">Nope, no built-in for that in 2.x.</span>
<span class="comment-copy">Are you intentionally ignoring the last element of the first list? A more logical result would be <code>[0, 100, 300, 600, 1000]</code>, or even simply <code>[100, 300, 600, 1000]</code>.</span>
<span class="comment-copy"><code>accumulate(chain([0], islice(a_list, 0, -1))</code> would avoid creation of two temporary lists, for people who care about that kind of things. BTW ignoring the last element of the list seems like a mistake in the question, for which I've asked the submitter for clarification.</span>
<span class="comment-copy">@user4815162342, Thank you for comment. I updated the answer according to you. BTW, <code>itertools.islice</code> does not accept negative index.</span>
<span class="comment-copy">Thanks for the update. The price for increased efficiency is (as is frequently the case) less readable code. But I still believe the OP didn't really intend to ignore the last element of the input list. :)</span>
