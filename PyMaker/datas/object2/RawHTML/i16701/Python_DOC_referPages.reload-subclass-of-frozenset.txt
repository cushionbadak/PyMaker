<div class="post-text" itemprop="text">
<p>I have a class which I want to have all the functions of frozenset but i don't want him to be configurable (by init, frozenset gets iterable).</p>
<p>Additionally, I want him to have the function 'reload' - I am loading static list from a server so the user can not change it (so I don't want the user to think he can change it).
The list on the server can be changed by the admin so I need the reload option.</p>
<p>That's what I hoped for:</p>
<pre><code>class A(frozenset):
    def __init__(self, list_id):
        super().__init__()
        self.list_id = list_id
        self.reload()

    def reload(self):
        #loading staff by self.list_id...
        pass
</code></pre>
<p>But I didn't find a way to 'add' new staff to the class (I tried to re-init it).</p>
<p>May be I am using the wrong staff so if you have anther way for this it fine (I need the option to compare difference between to difference objects):</p>
<pre><code>a = A(1)
b = A(2)
len(a)
iter(a)
a.difference(b)
</code></pre>
<p>May be overloading add and update of set will be good but i don't want to do that (it looks bad in code because there are more update-like functions).</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot update the <code>frozenset</code> contents, no; it remains immutable even when subclassed.</p>
<p>You can subclass the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Set" rel="nofollow"><code>collections.abc.Set()</code> Abstract Base Class</a> instead; it models an immutable set too; all you need to do really is implement the methods listed in the <a href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes" rel="nofollow"><em>Abstract Methods</em> column</a> and the rest is taken care of for you:</p>
<pre><code>from collections.abc import Set

class A(Set):
    def __init__(self, list_id):
        self.list_id = list_id
        self.reload()

    def reload(self):
        values = get_values(self.list_id)
        self._values = frozenset(values)

    def __contains__(self, item):
        return item in self._values

    def __iter__(self):
        return iter(self._values)

    def __len__(self):
        return len(self._values)
</code></pre>
<p>Not <em>all</em> methods of the <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow">built-in <code>frozenset</code> type</a> are implemented; you can easily supply the missing ones as these are aliases of the operator methods:</p>
<pre><code>def issubset(self, other):
    return self &lt;= frozenset(other)

def issuperset(self, other):
    return self &gt;= frozenset(other)

def union(self, *others):
    res = self
    for o in others:
        res |= frozenset(o)
    return res

def intersection(self, *others):
    res = self
    for o in others:
        res &amp;= frozenset(o)
    return res

def difference(self, *others):
    res = self
    for o in others:
        res -= frozenset(o)
    return res

def symmetric_difference(self, other):
    return self ^ frozenset(other)
</code></pre>
</div>
