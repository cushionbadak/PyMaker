<div class="post-text" itemprop="text">
<p>I'm trying to mark future done by timeout with this code:</p>
<pre><code>import asyncio


@asyncio.coroutine
def greet():
    while True:
        print('Hello World')
        yield from asyncio.sleep(1)

@asyncio.coroutine
def main():
    future = asyncio.async(greet())
    loop.call_later(3, lambda: future.set_result(True))
    yield from future
    print('Ready')

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<p>"Timer" loop.call_later sets result to future after 3 seconds. It works, but I'm getting exception too:</p>
<pre><code>Hello World
Hello World
Hello World
Ready
Exception in callback &lt;bound method Task._wakeup of Task(&lt;greet&gt;)&lt;result=True&gt;&gt;(Future&lt;result=None&gt;,)
handle: Handle(&lt;bound method Task._wakeup of Task(&lt;greet&gt;)&lt;result=True&gt;&gt;, (Future&lt;result=None&gt;,))
Traceback (most recent call last):
  File "C:\Python33\lib\site-packages\asyncio\events.py", line 39, in _run
    self._callback(*self._args)
  File "C:\Python33\lib\site-packages\asyncio\tasks.py", line 337, in _wakeup
    self._step(value, None)
  File "C:\Python33\lib\site-packages\asyncio\tasks.py", line 267, in _step
    '_step(): already done: {!r}, {!r}, {!r}'.format(self, value, exc)
AssertionError: _step(): already done: Task(&lt;greet&gt;)&lt;result=True&gt;, None, None
</code></pre>
<p>What can mean this AssertionError? Am I doing something wrong setting future done by loop.call_later?</p>
</div>
<div class="post-text" itemprop="text">
<p>What causes the exception: <code>greet</code> continues to run even after the <code>future.set_result</code> call; By changing<code>while True</code> with <code>if True</code>, you will get what I mean.</p>
<p>How about using <a href="https://docs.python.org/3/library/asyncio-sync.html#event" rel="nofollow"><code>asyncio.Event</code></a>?</p>
<pre><code>import asyncio


@asyncio.coroutine
def greet(stop):
    while not stop.is_set():
        print('Hello World')
        yield from asyncio.sleep(1)


@asyncio.coroutine
def main():
    stop = asyncio.Event()
    loop.call_later(3, stop.set)
    yield from asyncio.async(greet(stop))
    print('Ready')

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't call <code>future.set_result()</code> yourself. The event loop sets the result of the future after the task returns.</p>
</div>
