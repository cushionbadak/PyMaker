<div class="post-text" itemprop="text">
<p>Why does the content of mock.mock_calls differ depending on whether I run in shell or 
in a program? The assertion of <code>mock.mock_calls == expected</code> fails in a program but passes in the shell.
The code is based on the documentation for tracking multiple calls. <a href="https://docs.python.org/3/library/unittest.mock-examples.html#tracking-all-calls" rel="nofollow">(26.5.1.5. Tracking all Calls)</a></p>
<pre><code>&gt;&gt;&gt; from unittest.mock import MagicMock, call
&gt;&gt;&gt; mock = MagicMock()
&gt;&gt;&gt; mock.method()
&lt;MagicMock name='mock.method()' id='57725952'&gt;
&gt;&gt;&gt; mock.attribute.method(10, x=53)
&lt;MagicMock name='mock.attribute.method()' id='57775944'&gt;
&gt;&gt;&gt; mock.mock_calls
[call.method(), call.attribute.method(10, x=53)]
&gt;&gt;&gt; mock.method_calls
[call.method(), call.attribute.method(10, x=53)]
&gt;&gt;&gt; expected = [call.method(), call.attribute.method(10, x=53)]
&gt;&gt;&gt; expected == mock.mock_calls
True
&gt;&gt;&gt; expected == mock.method_calls
True
</code></pre>
<p>So far that is all exactly as expected. But look at what happens to <code>mock.mock_calls</code> in a program: It records additional calls to the <code>__str__</code> method of every method called. mock.method_calls is unaffected.</p>
<pre><code>import unittest.mock
mock = unittest.mock.MagicMock()
print(mock.method())
print(mock.attribute.method(10, x=53))
print('\nmock.mock_calls\n', mock.mock_calls)
print('\nmock.method_calls\n', mock.method_calls)

expected = [unittest.mock.call.method(),
            unittest.mock.call.attribute.method(10, x=53)]
print(expected == mock.mock_calls)
print(expected == mock.method_calls)
</code></pre>
<p>Output:</p>
<pre><code>&lt;MagicMock name='mock.method()' id='45740272'&gt;
&lt;MagicMock name='mock.attribute.method()' id='45850128'&gt;

mock.mock_calls
 [call.method(),
 call.method().__str__(),
 call.attribute.method(10, x=53),
 call.attribute.method().__str__()]

mock.method_calls
 [call.method(), call.attribute.method(10, x=53)]
False
True
</code></pre>
<p>I am running Python 3.4 on a Windows 7 computer.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because you are printing the method calls. It causes the <a href="https://docs.python.org/3.4/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__()</code></a> magic method to be called:</p>
<pre><code>print(mock.method())
print(mock.attribute.method(10, x=53))
</code></pre>
<p>Eliminate the <code>print()</code> call and you'll see the desired behavior:</p>
<pre><code>mock.method()
mock.attribute.method(10, x=53)
</code></pre>
<p>FYI, example from the console:</p>
<pre><code>&gt;&gt;&gt; mock = unittest.mock.MagicMock()
&gt;&gt;&gt; print(mock.method())
&lt;MagicMock name='mock.method()' id='4433183576'&gt;
&gt;&gt;&gt; print(mock.attribute.method(10, x=53))
&lt;MagicMock name='mock.attribute.method()' id='4433223752'&gt;
&gt;&gt;&gt; mock.mock_calls
[call.method(),
 call.method().__str__(),
 call.attribute.method(10, x=53),
 call.attribute.method().__str__()]
</code></pre>
<hr/>
<p>Or, alternatively, use a normal <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class" rel="nofollow"><code>Mock</code></a> class:</p>
<pre><code>&gt;&gt;&gt; mock = unittest.mock.Mock()
&gt;&gt;&gt; print(mock.method())
&lt;Mock name='mock.method()' id='4433235528'&gt;
&gt;&gt;&gt; print(mock.attribute.method(10, x=53))
&lt;Mock name='mock.attribute.method()' id='4433252648'&gt;
&gt;&gt;&gt; mock.method_calls
[call.method(), call.attribute.method(10, x=53)]
&gt;&gt;&gt; mock.mock_calls
[call.method(), call.attribute.method(10, x=53)]
</code></pre>
</div>
