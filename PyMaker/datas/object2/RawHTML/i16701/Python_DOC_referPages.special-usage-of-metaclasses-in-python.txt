<div class="post-text" itemprop="text">
<p>I was messing around with python metaclasses and I came across something very intriguing that I didn't know existed or was valid:</p>
<pre><code>class Meta(type):
    def __new__(metacls, name, bases, kwargs, extra_thing=None):
        if extra_thing is not None:
            print(extra_thing)
        return super().__new__(metacls, name, bases, kwargs)
    def __init__(metacls, name, bases, kwargs, *args, **kwargs_):
        super().__init__(metacls, name, bases, kwargs)

class TestClass(metaclass=Meta, extra_thing='foo'):
    pass
</code></pre>
<p>When you run this, 'foo' is printed.</p>
<p>So apparently, classes can have extra keyword arguments if their metaclasses allow for it.</p>
<p>If a scenario in which this functionality may be useful is found, is it okay to take advantage of it? Or should it be left alone in favour of other methods (such as defining a class wide variable extra_thing)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The behavior is <a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow">documented</a>, so it's probably safe to use, if perhaps confusing to other programmers reading your code. Here's what the docs say:</p>
<blockquote>
<p>Any other keyword arguments that are specified in the class definition are passed through to all metaclass operations described below.</p>
</blockquote>
<p>The "operations" it describes are <code>__prepare__</code> and calling metaclass itself (which will usually call the <code>__new__</code> and/or <code>__init__</code> methods of the metaclass).</p>
</div>
<span class="comment-copy">What do you mean by "is it okay"?  Do you mean "is it documented behavior that I can rely on" or "is it good design"?</span>
<span class="comment-copy">I guess I mean both.</span>
