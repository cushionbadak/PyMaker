<div class="post-text" itemprop="text">
<p>I have a list of integers and I want to find all consecutive sub-sequences of length n in this list. For example:</p>
<pre><code>&gt;&gt;&gt; int_list = [1,4,6,7,8,9]
&gt;&gt;&gt; conseq_sequences(int_list, length=3)
[[6,7,8], [7,8,9]]
</code></pre>
<p>The best I could come up with is:</p>
<pre><code>def conseq_sequences(self, li, length):
    return [li[n:n+length]
            for n in xrange(len(li)-length+1)
            if li[n:n+length] == range(li[n], li[n]+length)]
</code></pre>
<p>This isn't overly readable. Is there any readable pythonic way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a more general solution that works for arbitrary input iterables (not just sequences): </p>
<pre><code>from itertools import groupby, islice, tee
from operator import itemgetter

def consecutive_subseq(iterable, length):
    for _, consec_run in groupby(enumerate(iterable), lambda x: x[0] - x[1]):
        k_wise = tee(map(itemgetter(1), consec_run), length)
        for n, it in enumerate(k_wise):
            next(islice(it, n, n), None) # consume n items from it
        yield from zip(*k_wise)
</code></pre>
<ul>
<li><p><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> finds consecutive substrings such as <code>6, 7, 8, 9</code> in the input. It is based on <a href="https://docs.python.org/2.6/library/itertools.html#examples" rel="nofollow noreferrer">the example from the docs that shows how to find runs of consecutive numbers</a>: </p>
<blockquote>
<p>The key to the solution is differencing with a range generated by
  enumerate() so that consecutive integers all appear in same group
  (run).</p>
</blockquote></li>
<li><p><a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>itertools.tee</code></a> + <code>zip</code> allow to iterate over the substring k-wise -- a generalization of <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>pairwise</code> recipe from the <code>itertools</code> docs</a>. </p></li>
<li><p><code>next(islice(iterator, n, n), None)</code> is from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the <code>consume</code> recipe there</a>.</p></li>
</ul>
<p>Example:</p>
<pre><code>print(*consecutive_subseq([1,4,6,7,8,9], 3))
# -&gt; (6, 7, 8) (7, 8, 9)
</code></pre>
<p>The code uses Python 3 syntax that could be adapted for Python 2 if needed.</p>
<p>See also, <a href="https://stackoverflow.com/q/23075453/4279">What is the most pythonic way to sort dates sequences?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>One solution could be as follows:</p>
<pre><code>import numpy # used diff function from numpy, but if not present, than some lambda or other helper function could be used. 

def conseq_sequences(li, length):
    return [int_list[i:i+length] for i in range(0, len(int_list)) if sum(numpy.diff(int_list[i:i+length]))==length-1]
</code></pre>
<p>Basically, first, I get consecutive sub-lists of given length from the list, and then check if the sum of the differences of their elements is equal to <code>length - 1</code>. </p>
<p>Please not that if elements are consecutive, their difference will add up to <code>length - 1</code>, e.g. for sub-list <code>[5,6,7]</code> the difference of its elements is <code>[1, 1]</code> and sum of it is <code>2</code>.</p>
<p>But to be honest not sure if this solution is clearer or more pythonic than yours. </p>
<p>Just in case you don't have <code>numpy</code>, the <code>diff</code> function can be easly defined as follows:</p>
<pre><code>def diff(l):
  '''For example, when l=[1,2,3] than return is [1,1]'''  
  return [x - l[i - 1] for i, x in enumerate(l)][1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow">operator.itemgetter</a>  and <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a> </p>
<pre><code> def conseq_sequences(li, length):
    res = zip(*(li[i:] for i in xrange(length)))
    final = []
    for x in res:
        for k, g in groupby(enumerate(x), lambda (i, x): i - x):
            get_map = map(itemgetter(1), g)
            if len(get_map) == length:
                final.append(get_map)
    return final
</code></pre>
<p>Without imports.</p>
<pre><code>def conseq_sequences(li, length):
    res = zip(*(li[i:] for i in xrange(length)))
    final = []
    for ele in res:
        if all(x == y+1 for x, y in zip(ele[1:], ele)):
            final.append(ele)
    return final
</code></pre>
<p>Which can be turned into list comprehension:</p>
<pre><code>def conseq_sequences(li, length):
    res = zip(*(li[i:] for i in xrange(length)))
    return [ ele for ele in res if all(x == y+1 for x, y in zip(ele[1:], ele))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code> def condition (tup):
    if tup[0] + 1 == tup[1] and tup[1] + 1 == tup[2] :
        return True
    return False

 def conseq_sequence(li):
   return [x for x in map(None, iter(li), iter(li[1:]), iter(li[2:])) if condition(x)]
</code></pre>
</div>
<span class="comment-copy">You can assume int_list being ordered.</span>
<span class="comment-copy">Looks most elegant to me in terms of using built-in libraries. Will have to look up the links you provided in order to completely get what's happening. Readability is still pretty tough, though!</span>
<span class="comment-copy">This behaves differently from the OP's code on inputs like <code>[4, 1, 5, 2, 6]</code>.</span>
<span class="comment-copy">@user2357112, temporarily brain dead, I completely overlooked the consecutive part.</span>
<span class="comment-copy">This doesnt  respect the consecutiveness-constraint: <code>conseq_sequence([1,4,2,7,3])</code> gives as result <code>[[1, 2, 3], [2, 3, 4]]</code>. However the list <code>[1,2,3]</code> isn't a sublist of our intial list and as for <code>[2,3,4]</code> the number appear in a different order in the initial list and aren't consequitive either.</span>
<span class="comment-copy">Sorry, i forgot about that condition. Now the code also takes care of that condition</span>
<span class="comment-copy">I have made an assumption that the list's length will be greater than 3, that can be checked easily</span>
