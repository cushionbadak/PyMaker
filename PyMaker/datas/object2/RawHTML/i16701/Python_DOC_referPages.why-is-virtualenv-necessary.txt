<div class="post-text" itemprop="text">
<p>I am a beginner in Python. </p>
<p>I read <em><code>virtualenv</code> is preferred during Python project development</em>.</p>
<p>I couldn't understand this point at all. Why is <code>virtualenv</code> preferred?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://virtualenv.readthedocs.org/en/latest/" rel="noreferrer">Virtualenv</a> keeps your Python packages in a virtual environment localized to your project, instead of forcing you to install your packages system-wide.</p>
<p>There are a number of benefits to this, </p>
<ul>
<li>the first and principle one is that you can have multiple virtulenvs, so you
can have multiple sets of packages that for different projects, even
if those sets of packages would normally conflict with one another. 
For instance, if one project you are working on runs on Django 1.4
and another runs on Django 1.6, virtualenvs can keep those projects
fully separate so you can satisfy both requirements at once. </li>
<li>the second, make it easy for you to release your project with its own dependent
modules.Thus you can make it easy to create your requirements.txt
file.</li>
<li>the third, is that it allows you to switch to another installed python interpreter for that project*. Very useful (Think old 2.x scripts), but sadly not available in the now <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer">built-in venv</a>.</li>
</ul>
<p>Note that virtualenv is about "virtual environments" but is <em>not</em> the same as "virtualization" or "virtual machines" (this is confusing to some).  For instance, VMWare is totally different from virtualenv.</p>
</div>
<div class="post-text" itemprop="text">
<p>A Virtual Environment, put simply, is an isolated working copy of Python which allows you to work on a specific project without worry of affecting other projects.</p>
<p>For example, you can work on a project which requires Django 1.3 while also maintaining a project which requires Django 1.0.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>VirtualEnv</strong> helps you create a <strong>Local Environment(not System wide) Specific to the Project</strong> you are working upon.</p>
<p>Hence, As you <strong>start working on Multiple projects</strong>, your projects would have <strong>different Dependencies (e.g different Django versions)</strong> hence you would need a different virtual Environment for each Project. VirtualEnv does this for you.</p>
<p>As, you are using VirtualEnv.. Try <strong>VirtualEnvWrapper</strong> : <a href="https://pypi.python.org/pypi/virtualenvwrapper" rel="nofollow">https://pypi.python.org/pypi/virtualenvwrapper</a></p>
<p>It <strong>provides some utilities</strong> to create switch and remove virtualenvs easily, e.g:</p>
<ol>
<li><strong><code>mkvirtualenv &lt;name&gt;</code></strong>: To create a new Virtualenv</li>
<li><strong><code>workon &lt;name&gt;</code></strong> : To use a specified virtualenv</li>
</ol>
<p>and some others</p>
</div>
<span class="comment-copy">Do you know what virtualenv is what what it's uses are?</span>
<span class="comment-copy">You may have multiple projects on your computer, each of which were built with a different version of Python.</span>
<span class="comment-copy">yeh I know about virtualization. I got it. Thanks Tim and Alex</span>
<span class="comment-copy">@RaiAmmadKhan Is it no necessary, but it helps. And it has nothing to do with virtualization in the form of virtual machines.</span>
<span class="comment-copy">This ignores the installation of multiple python interpreters, which also effectively can creates a localized environment.  What was implied, but is worth explicitly noting, is the same base interpreter is used across the virtual python environments.</span>
