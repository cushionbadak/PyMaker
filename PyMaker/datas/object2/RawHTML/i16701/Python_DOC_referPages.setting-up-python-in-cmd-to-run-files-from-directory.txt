<div class="post-text" itemprop="text">
<p>I have a directory which hosts all of my Django apps (<code>C:\My_Projects</code>). I want to add this directory to my <code>pythonpath</code> so I can call the apps directly.</p>
<p>I have tried adding <code>C:\My_Projects\;</code> to my <code>Path</code> variable from the Windows GUI (<code>My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables</code>). But it still doesn't read the coltrane module and generates this error:</p>
<blockquote>
<p>Error: No module named coltrane</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You know what has worked for me really well on windows.</p>
<p><code>My Computer &gt; Properties &gt; Advanced System Settings &gt; Environment Variables &gt;</code> </p>
<p>Just add the path as C:\Python27 (or wherever you installed python)</p>
<p>OR</p>
<p>Then under system variables I create a new Variable called <code>PythonPath</code>. In this variable I have <code>C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk;C:\other-folders-on-the-path</code></p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/ZGp36.png"/></p>
<p>This is the best way that has worked for me which I hadn't found in any of the docs offered.</p>
<p><strong>EDIT:</strong> For those who are not able to get it,
Please add </p>
<blockquote>
<p>C:\Python27;</p>
</blockquote>
<p>along with it. Else it will <em>never work</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Windows 7 Professional
I Modified @mongoose_za's answer to make it easier to change the python version:</p>
<ol>
<li>[Right Click]Computer &gt; Properties &gt;Advanced System Settings &gt; Environment Variables</li>
<li>Click [New] under "System Variable"</li>
<li>Variable Name: PY_HOME, Variable Value:C:\path\to\python\version
<img alt="enter image description here" src="https://i.stack.imgur.com/kqc2E.png"/></li>
<li>Click [OK]</li>
<li>Locate the "Path" System variable and click [Edit]</li>
<li><p>Add the following to the existing variable:</p>
<p>%PY_HOME%;%PY_HOME%\Lib;%PY_HOME%\DLLs;%PY_HOME%\Lib\lib-tk;
<img alt="enter image description here" src="https://i.stack.imgur.com/XK6YH.png"/></p></li>
<li><p>Click [OK] to close all of the windows. </p></li>
</ol>
<p>As a final sanity check open a command prompt and enter python. You should see </p>
<pre><code>&gt;python [whatever version you are using]
</code></pre>
<p>If you need to switch between versions, you only need to modify the PY_HOME variable to point to the proper directory. This is bit easier to manage if you need multiple python versions installed. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Just append</strong> your installation path (ex. <strong>C:\Python27\</strong>) to the <strong>PATH</strong> variable in <strong>System variables</strong>. Then close and open your <strong>command line and type 'python'</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From Windows command line:</p>
<pre><code>set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
</code></pre>
<p>To set the PYTHONPATH permanently, add the line to your <code>autoexec.bat</code>. Alternatively, if you edit the system variable through the System Properties, it will also be changed permanently.</p>
</div>
<div class="post-text" itemprop="text">
<p>These solutions work, but they work for your code ONLY on your machine. I would add a couple of lines to your code that look like this:</p>
<pre><code>import sys
if "C:\\My_Python_Lib" not in sys.path:
    sys.path.append("C:\\My_Python_Lib")
</code></pre>
<p>That should take care of your problems</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding <em>Python</em> and <em>PythonPath</em> to the Windows environment:</p>
<ol>
<li>Open Explorer.</li>
<li>Right-click <em>'Computer'</em> in the Navigation Tree Panel on the left.</li>
<li>Select <em>'Properties'</em> at the bottom of the Context Menu.</li>
<li>Select <em>'Advanced system settings'</em></li>
<li>Click <em>'Environment Variables...'</em> in the Advanced Tab</li>
<li><p>Under <em>'System Variables'</em>:</p>
<ol>
<li><p>Add</p>
<ul>
<li><p><code>PY_HOME</code></p>
<pre><code>C:\Python27
</code></pre></li>
<li><p><code>PYTHONPATH</code></p>
<pre><code>%PY_HOME%\Lib;%PY_HOME%\DLLs;%PY_HOME%\Lib\lib-tk;C:\another-library
</code></pre></li>
</ul></li>
<li><p>Append</p>
<ul>
<li><p><code>path</code></p>
<pre><code>%PY_HOME%;%PY_HOME%\Scripts\
</code></pre></li>
</ul></li>
</ol></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The easier way to set the path in python is : 
click start&gt; My Computer &gt;Properties &gt; Advanced System Settings &gt; Environment Variables &gt;
second windows &gt; </p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/dxRqY.jpg"/></p>
<p>select Path &gt; Edit &gt; and then add ";C:\Python27\;C:\Python27\Scripts\"</p>
<p>link :<a href="http://docs.python-guide.org/en/latest/starting/install/win/">http://docs.python-guide.org/en/latest/starting/install/win/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add to your <strong>PYTHONPATH</strong> variable instead of Windows <strong>PATH</strong> variable.</p>
<p><a href="http://docs.python.org/using/windows.html" rel="noreferrer">http://docs.python.org/using/windows.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also add a <code>.pth</code> file containing the desired directory in either your <code>c:\PythonX.X</code> folder, or your <code>\site-packages folder</code>, which tends to be my preferred method when I'm developing a Python package.</p>
<p>See <a href="http://bob.ippoli.to/archives/2005/02/06/using-pth-files-for-python-development/">here</a> for more information.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys
sys.path.append("path/to/Modules")
print sys.path
</code></pre>
<p>This won't persist over reboots or get translated to other files. It is however great if you don't want to make a permanent modification to your system.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>Python 3.4</strong> on windows it worked when I added it to <strong>PATH enviroment variable</strong> instead of PYTHONPATH. Like if you have installed Python 3.4 in D:\Programming\Python34 then add this at the end of your PATH environment variable</p>
<pre><code>;D:\Programming\Python34
</code></pre>
<p>Close and reopen command prompt and execute 'python'. It will open the python shell. This also fixed my Sublime 3 issue of <em>'python is not recognized as an internal or external command'</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The python 2.X paths can be set from few of the above instructions.
Python 3 by default will be installed in 
C:\Users\\AppData\Local\Programs\Python\Python35-32\
So this path has to be added to Path variable in windows environment.</p>
</div>
<div class="post-text" itemprop="text">
<p>To augment PYTHONPATH, run regedit and navigate to KEY_LOCAL_MACHINE
\SOFTWARE\Python\PythonCore and then select the folder for the python
version you wish to use. Inside this is a folder labelled PythonPath,
with one entry that specifies the paths where the default install
stores modules. Right-click on PythonPath and choose to create a new
key. You may want to name the key after the project whose module
locations it will specify; this way, you can easily compartmentalize
and track your path modifications.</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>For anyone trying to achieve this with Python 3.3+, the Windows installer now includes an option to add python.exe to the system search path. Read more in <a href="http://docs.python.org/3.3/using/windows.html#finding-the-python-executable" rel="nofollow">the docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This <code>PYTHONPATH</code> variable needs to be set for <code>ArcPY</code> when ArcGIS Desktop is installed. </p>
<p><code>PYTHONPATH=C:\arcgis\bin</code> (your ArcGIS home bin)</p>
<p>For some reason it never was set when I used the installer on a Windows 7 32-bit system.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe a little late, but this is how you add the path to the Windows Environment Variables.</p>
<ol>
<li><p>Go to the Environment Variables tab, you do this by pressing Windows key + Pausa inter.</p></li>
<li><p>Go to Advanced System Settings.</p></li>
<li><p>Click on Environment Variables.</p></li>
<li><p>On the lower window search for the 'Path' value.</p></li>
<li><p>Select it</p></li>
<li><p>Click on Edit</p></li>
<li><p>In the end of the line add your instalation folder and the route to 'Scripts' folder.</p></li>
<li><p>Click ok, aceptar etc.</p></li>
</ol>
<p>You're done, enter cmd and write python from any location of your drive, it should enter the Python program.</p>
<p>Example with my pc (I have <code>Python34</code>)</p>
<pre><code>EXISTING_LINES;C:\Python34;C:\Python34\Scripts\
</code></pre>
<p>Hope it helps.</p>
<p>Greetings from Bogot√°</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do that successfully, is to run the python installer again (after the first installation) and then:</p>
<ol>
<li>choose Modify.</li>
<li>check the optional features which you want and click Next.</li>
<li>here we go, in "Advanced Options" step you must see an option saying "Add Python to environment variables". Just check that option and click Install.
<a href="https://i.stack.imgur.com/HUTlE.png" rel="nofollow noreferrer"><img alt="3rd step" src="https://i.stack.imgur.com/HUTlE.png"/></a>
When the installation is completed, python environment variables are added and you can easily use python everywhere.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>These answers are so bad. The installer has a secret option. Click the installer again, uninstall, then reinstall.</p>
<p><a href="https://i.stack.imgur.com/OPhj4.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/OPhj4.jpg"/></a></p>
</div>
<span class="comment-copy">for "no module named" error: <a href="http://stackoverflow.com/questions/23417941/python-import-error-no-module-named-does-exist/40883739#40883739" title="python import error no module named does exist">stackoverflow.com/questions/23417941/‚Ä¶</a></span>
<span class="comment-copy">I used <a href="https://docs.python.org/3/library/site.html#site.addsitedir1" rel="nofollow noreferrer"><code>site</code> module</a>.</span>
<span class="comment-copy">if you want to run python in command prompt it is answered well here I hope this helps <a href="https://stackoverflow.com/a/54618199/8253662">stackoverflow.com/a/54618199/8253662</a></span>
<span class="comment-copy">You probably want to add <code>C:\Python27</code> in your path.</span>
<span class="comment-copy">@SteveKoch I'm not sure ‚Äî you would have to ask project's maintener. I no longer use Path Editor as I switched to much better <a href="http://www.rapidee.com" rel="nofollow noreferrer">Rapid Environment Editor</a></span>
<span class="comment-copy">It's also important to add C:\Python27\Scripts to the path so that installed scripts can be run from the shell.</span>
<span class="comment-copy">Why would you put <code>C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk</code> in <code>PYTHONPATH</code>? Those are already configured. Directories for scripts go in the system <code>PATH</code>. Directories for libraries (that aren't installed to <code>site-packages</code> or the per-user <code>site-packages</code>) go in <code>PYTHONPATH</code>.</span>
<span class="comment-copy">I had to include %PYTHONPATH% in my PATH as well.</span>
<span class="comment-copy">Tried this and it worked... i would recommend anyone going through the same problem to try this.</span>
<span class="comment-copy">Tried this, it didn't do anything at all.</span>
<span class="comment-copy">I tried the accepted answer above and that didn't work so I would recommend this one.</span>
<span class="comment-copy">@Reihan_amn I mean the wrapping directory that contains the lib, bin, libexec, etc.  Typically these directories are named Python[VERSION_NUMBER]/, but I have also seen python/[VERSION_NUMBER]. Hope this helps</span>
<span class="comment-copy">I tried this and it worked for me.  I had to make one small adjustment which was to click New for each of these entries for Windows 10 when adding them to the PATH variable. <code>%PY_HOME%;%PY_HOME%\Lib;%PY_HOME%\DLLs;%PY_HOME%\Lib\lib-tk;</code>  I also needed to add <code>%PY_HOME%\Scripts</code> so I had access to pip and the modules I install with pip such as pylint</span>
<span class="comment-copy">Didn't work for me with Python 3.4.</span>
<span class="comment-copy">This is answering a completely different question than the one OP was asking.</span>
<span class="comment-copy">Worked but everytime I open dos I had to set the path.</span>
<span class="comment-copy">I prefer to use <code>set path=%PATH%;%PYTHONPATH%;</code></span>
<span class="comment-copy">Dos and editing autoexec.bat..! Have we suddenly slipped back into the 90s?</span>
<span class="comment-copy">Before this, do  <b>echo %PYTHONPATH%</b> if this gives you a path go on, otherwise, do e.g. <b>set PYTHONPATH=.;C:\My_python_lib</b> If you don't, windows will expand %PYTHONPATH% to empty string as expected, it will keep it as  %PYTHONPATH% in the PYTHONPATH and everything will break! Sounds crazy but thats how win7 cmd works...</span>
<span class="comment-copy">Modifying <code>sys.path</code> like this is frowned upon and for good reasons. There are better ways of configuring <code>sys.path</code> ‚Äî <code>PYTHONPATH</code> environment variable and <code>.pth</code> files.</span>
<span class="comment-copy">This is the only solution that worked for me. Also, for those of you who do not have administrator rights, just follow the steps above under "User variables for [yourUsername]" and it will work just as well.</span>
<span class="comment-copy">This is the only solution that also worked for me</span>
<span class="comment-copy">Python on Windows, appreciating node.js a little more right now</span>
<span class="comment-copy">It worked after restarting my computer.</span>
<span class="comment-copy">changing system path changed nothing (deleting it too). But typing in admin cmd worked:    ftype Python.File="C:\Python27\python.exe" "%1" %*</span>
<span class="comment-copy">+1 for the ability to set paths are run time. while arguably "hacky", when writing a proof of concept or a one-off job, this is perfect and leaves the system unmodified.</span>
<span class="comment-copy">I disagree that you only have to do this once. I find that the extra path does not persist past the kernal restarting</span>
<span class="comment-copy">Yeah, this was the only solution to me (Python 3.x). I really have no idea why %PYTHONPATH% isn't resolved on Path parameter. Call the Scripts' folder wasn't  necessary.</span>
<span class="comment-copy">Thank you, its worked for me well.</span>
<span class="comment-copy">It is indeed a little late, since this answer was already provided five years ago :-) It's also not really what is asked here (since the question is about PYTHONPATH, not PATH)...</span>
<span class="comment-copy">What is Pausa inter.?</span>
<span class="comment-copy">I think the question isn't "how to add python to the path" but how to add modules to the path python uses.</span>
<span class="comment-copy">It is no way of setting a path.</span>
<span class="comment-copy">seems like a bunch of robots talking gibberish to me :p</span>
