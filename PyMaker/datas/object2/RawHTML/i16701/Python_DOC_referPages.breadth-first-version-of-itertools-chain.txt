<div class="post-text" itemprop="text">
<p>In <code>itertools</code> there's <code>chain</code>, which combines multiple generators in a single one, and in essence does a depth-first iteration over them, i.e., <code>chain.from_iterable(['ABC', '123'])</code> yields A, B, C, 1, 2, 3. But, there's no breadth-first version, or am I missing something? There's of course <code>izip_longest</code>, but for large numbers of generators this feels awkward, as the tuples will be very long and possibly very sparse.</p>
<p>I came up with the following:</p>
<pre><code>def chain_bfs(*generators):
    generators = list(generators)
    while generators:
        g = generators.pop(0)
        try:
            yield g.next()
        except StopIteration:
            pass
        else:
            generators.append(g)
</code></pre>
<p>It feels a bit verbose to me, is there a more Pythonic approach I'm missing? And would this function be a good candidate for inclusion in <code>itertools</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/2/library/collections.html#collections.deque"><code>collections.deque()</code></a> to rotate through your iterators; rotating a deque is much more efficient. I'd also call it a chained zip, not a 'breath first chain', as such:</p>
<pre><code>from collections import deque

def chained_zip(*iterables):
    iterables = deque(map(iter, iterables))
    while iterables:
        try:
            yield next(iterables[0])
        except StopIteration:
            iterables.popleft()
        else:
            iterables.rotate(-1)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; list(chained_zip('ABC', '123'))
['A', '1', 'B', '2', 'C', '3']
&gt;&gt;&gt; list(chained_zip('AB', '1234'))
['A', '1', 'B', '2', '3', '4']
</code></pre>
<p>There is also a <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes"><code>roundrobin()</code> recipe in the documentation</a> that does the same, using the <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle"><code>itertools.cycle()</code> function</a>:</p>
<pre><code>def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if you'd still consider this too "verbose"...</p>
<pre><code>def chain_bfs2(*generators):
    generators = map(iter, generators)
    while generators:
        for i, generator in enumerate(generators):
            try:
                yield generator.next()
            except StopIteration:
                del generators[i]

print list(chain_bfs2('AB', '123'))  # ['A', '1', 'B', '2', '3']
</code></pre>
</div>
<span class="comment-copy">So you basically want to chain the output of <code>zip()</code> here? I'd not call that breath-first vs. depth-first (that implies a deeper tree).</span>
<span class="comment-copy">I want the resulting generator to output A, 1, B, 2, C, 3 for the given example. And, if supplied with 'AB' and '1234', then A, 1, B, 2, 3, 4.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/3471999/how-do-i-merge-two-lists-into-a-single-list">How do I merge two lists into a single list?</a></span>
<span class="comment-copy">Heh, personally this is clearer than <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>roundrobin</code> from the recipies section of the docs</a>. Good good.</span>
<span class="comment-copy">@Veedrac: ah, I knew there was a itertools recipe for this too, thanks for reminding me about its name. :-)</span>
<span class="comment-copy">Ah, I missed the recipes section. This seems to solve it rather elegantly :) Not sure which version I prefer, the first one is a bit more readable, although the clever use of <b>next</b> also appeals to me.</span>
