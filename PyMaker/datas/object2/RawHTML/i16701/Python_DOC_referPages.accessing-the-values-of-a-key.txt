<div class="post-text" itemprop="text">
<p>I have a dictionary like:</p>
<pre><code>Data = {
    "weight_factors" : {
        "parameter1" : 10,
        "parameter2" : 30,
        "parameter3" : 30
        },
    "other_info" : {
        }
}
</code></pre>
<p>I want to get the sum of all values that are under the key <code>"weight_factors"</code>:</p>
<pre><code>sum = Data["weight_factors"]["parameter1"] + 
      Data["weight_factors"]["parameter2"] + 
      Data["weight_factors"]["parameter3"] 
</code></pre>
<p>Currently, in order to avoid entering <code>Data["weight_factors"]</code> repeatedly, I use the following commands: </p>
<pre><code>d = Data["weight_factors"]
d["parameter1"] + d["parameter2"] + d["parameter3"]
</code></pre>
<p>But, I guess there should be an operator that does the same thing, without storing <code>Data["weight_factors"]</code> as an intermediate variable. I was wondering if such a command or an operator exists.</p>
<pre><code>Data["weight_factors"]&lt;unknown operator&gt;(["parameter1"] + 
                                         ["parameter2"] +
                                          ... 
                                         ["parametern"])&lt;unknown operator&gt;
</code></pre>
<p><strong>EDIT:</strong>
In the example given above, it was just a sum operation. But it could for example be: </p>
<pre><code>Data["weight_factors"]["parameter1"] * Data["weight_factors"]["parameter2"] + Data[‌​"weight_factors"]["parameter3"]
</code></pre>
<p>But I do not want enter <code>Data["weight_factors"]</code> repeatedly. That's the thing I am searching for... I don't know whether such an operator exists. (In MATLAB, there exists such a thing for cell structures).</p>
</div>
<div class="post-text" itemprop="text">
<p>No, that kind of operator does not exist for the <a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow">built-in dict type</a>. </p>
<p>I suppose you <em>could</em> make your own dict type that inherited from <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="nofollow"><code>dict</code></a> and overloaded an operator:</p>
<pre><code>class MyDict(dict):
    def __add__(self, other):
        """Overload the + operator."""
...
</code></pre>
<p>but that is somewhat inefficient and not very good for readability.</p>
<p>If you just want to sum the values, you can use <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow"><code>dict.values</code></a> (<a href="https://docs.python.org/2/library/stdtypes.html#dict.itervalues" rel="nofollow"><code>dict.itervalues</code></a> if you are using Python 2.x):</p>
<pre><code>&gt;&gt;&gt; Data = {
... "weight_factors" : {
...     "parameter1" : 10,
...     "parameter2" : 30,
...     "parameter3" : 30
...     },
... "other_info" : {
...     }
... }
&gt;&gt;&gt; sum(Data["weight_factors"].values())
70
&gt;&gt;&gt;
</code></pre>
<p>Otherwise, I would just use what you have now: </p>
<pre><code>d = Data["weight_factors"]
myvar = d["parameter1"] * d["parameter2"] + d["parameter3"]
</code></pre>
<p>It is about as clean and efficient as you can get.</p>
</div>
<div class="post-text" itemprop="text">
<p>For a general solution to repeatedly get the same item from a mapping or index, I suggest the <code>operator</code> module's <code>itemgetter</code>:</p>
<pre><code>&gt;&gt;&gt; import operator

&gt;&gt;&gt; Data = {
    "weight_factors" : {
        "parameter1" : 10,
        "parameter2" : 30,
        "parameter3" : 30
        },
    "other_info" : {
        }
    }
</code></pre>
<p>Now create our easy getter:</p>
<pre><code>&gt;&gt;&gt; get = operator.itemgetter('weight_factors')
</code></pre>
<p>And call it on the object whenever you want your sub-dict:</p>
<pre><code>&gt;&gt;&gt; get(Data)['parameter1']
</code></pre>
<p>returns:</p>
<pre><code>10
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; sum(get(Data).values())
</code></pre>
<p>returns</p>
<pre><code>70
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this is just "how do I access a dict's values easily and repeatedly?" you should just assign them like this, and you can reuse them again and again.</p>
<p>In Python 2:</p>
<pre><code>vals = Data['weight_factors'].values() 
</code></pre>
<p>In Python 3, values returns an iterator, which you can't reuse, so materialize it in a list:</p>
<pre><code>vals = list(Data['weight_factors'].values()) 
</code></pre>
<p>and then you can do whatever you want with it:</p>
<pre><code>sum(vals)
max(vals)
min(vals)
</code></pre>
<p>etc...</p>
</div>
<span class="comment-copy">I found the answer of @iCodez better; I don't have to import a module... I will probably implement by using <code>'.itervalues()'</code>.</span>
<span class="comment-copy">Oh, so you're just asking how do you get the values from a dict? Someone might flag this as a repeat question...</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/7002429/python-how-to-extract-all-of-the-values-from-a-dictionary">PYTHON how to extract all of the values from a dictionary</a></span>
<span class="comment-copy">As I have written in my question, I'm searching for the <code>&lt;unknown operator&gt;</code> but I couldn't find anything similar or relevant. Therefore, I needed to ask it as a new question. Even at giving a title to my question, I was unsure about how to state it (can be checked through my edit history)...</span>
<span class="comment-copy">@AaronHall, for example in the example given above, it was just a sum operation. But it could for example be: <code>Data["weight_factors"]["parameter1"]*Data["weight_factors"]["parameter2"]+Data["weight_factors"]["parameter3"]</code>. But I do not want enter <code>Data["weight_factors"]</code> repeatedly. That's the thing I am searching for.</span>
<span class="comment-copy">Right, I could use sum() and .values(). Thanks for your response. But I am actually searching for a general solution. If none exists, I would definitely use your suggestion!</span>
<span class="comment-copy">I think you're going to need to be more specific about what kind of "general solution" you're after; iCodez's answer exactly addresses the question I thought you were asking, anyway.</span>
<span class="comment-copy">@DSM I am actually searching for an 'unknown operator', which I have stated in my question. But I don't know whether such an operator exists...</span>
<span class="comment-copy">@iCodez I guess that's the true answer of my question, or more precisely: the answer I was searching for. I don't know whether accepting your reply leads to misunderstanding of some aggressive users and some other readers. Maybe you have to edit your reply a little bit ;)</span>
<span class="comment-copy">@T-1000 - I'll incorporate my comment into my answer then. :)</span>
