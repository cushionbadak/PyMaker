<div class="post-text" itemprop="text">
<p><strong>a is not declared</strong></p>
<pre><code>try:
    a
except:
    pass
</code></pre>
<p>RESULT: test of a produces error which is runs except</p>
<pre><code>if a in locals():pass
if a in globals():pass
</code></pre>
<p>RESULT: produces NameError</p>
<p>Is there a simple pre-built solution to return <code>True</code> / <code>False</code> based on whether the variable exists?</p>
</div>
<div class="post-text" itemprop="text">
<p>Both <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow"><code>locals</code></a> and <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow"><code>globals</code></a> return dictionaries that have string keys:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 2
&gt;&gt;&gt; locals()
{'__package__': None, '__name__': '__main__', '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, 'b': 2, '__doc__': None, 'a': 1}
&gt;&gt;&gt; globals()
{'__package__': None, '__name__': '__main__', '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, 'b': 2, '__doc__': None, 'a': 1}
&gt;&gt;&gt;
</code></pre>
<p>Thus, you need to use strings for your tests:</p>
<pre><code>if "a" in locals():pass
if "a" in globals():pass
</code></pre>
<p>See a demonstration below:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; "a" in locals()
True
&gt;&gt;&gt; "x" in locals()
False
&gt;&gt;&gt; "a" in globals()
True
&gt;&gt;&gt; "x" in globals()
False
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Variable name as a string <code>'a' in globals()</code>?</span>
<span class="comment-copy">How about <code>if "a" in locals():pass</code> ?</span>
<span class="comment-copy">What is the problem with <code>try: except [NameError]:</code>?</span>
<span class="comment-copy">The real solution is, of course, to not get into this position in the first place. Make sure all variables exist unconditionally before they are needed.</span>
<span class="comment-copy">yep yep, ta very much.</span>
