<div class="post-text" itemprop="text">
<p>I'm a C coder developing something in python. I know how to do the following in C (and hence in C-like logic applied to python), but I'm wondering what the 'Python' way of doing it is.</p>
<p>I have a dictionary d, and I'd like to operate on a subset of the items, only those who's key (string) contains a specific substring.</p>
<p>i.e. the C logic would be:</p>
<pre><code>for key in d:
    if filter_string in key:
        # do something
    else
        # do nothing, continue
</code></pre>
<p>I'm imagining the python version would be something like</p>
<pre><code>filtered_dict = crazy_python_syntax(d, substring)
for key,value in filtered_dict.iteritems():
    # do something
</code></pre>
<p>I've found a lot of posts on here regarding filtering dictionaries, but couldn't find one which involved exactly this.</p>
<p>My dictionary is not nested and i'm using python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>How about a <a href="http://www.python.org/dev/peps/pep-0274/">dict comprehension</a>:</p>
<pre><code>filtered_dict = {k:v for k,v in d.iteritems() if filter_string in k}
</code></pre>
<p>One you see it, it should be self-explanatory, as it reads like English pretty well.</p>
<p>This syntax requires Python 2.7 or greater.</p>
<p>In Python 3, there is only <a href="https://docs.python.org/3/library/stdtypes.html#dict.items"><code>dict.items()</code></a>, not <code>iteritems()</code> so you would use:</p>
<pre><code>filtered_dict = {k:v for (k,v) in d.items() if filter_string in k}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Go for whatever is most readable and easily maintainable. Just because you can write it out in a single line doesn't mean that you should. Your existing solution is close to what I would use other than I would user iteritems to skip the value lookup, and I hate nested ifs if I can avoid them:</p>
<pre><code>for key, val in d.iteritems():
    if filter_string not in key:
        continue
    # do something
</code></pre>
<p>However if you realllly want something to let you iterate through a filtered dict then I would not do the two step process of building the filtered dict and then iterating through it, but instead use a generator, because what is more pythonic (and awesome) than a generator?</p>
<p>First we create our generator, and good design dictates that we make it abstract enough to be reusable:</p>
<pre><code># The implementation of my generator may look vaguely familiar, no?
def filter_dict(d, filter_string):
    for key, val in d.iteritems():
        if filter_string not in key:
            continue
        yield key, val
</code></pre>
<p>And then we can use the generator to solve your problem nice and cleanly with simple, understandable code:    </p>
<pre><code>for key, val in filter_dict(d, some_string):
    # do something
</code></pre>
<p>In short: generators are awesome.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>input = {"A":"a", "B":"b", "C":"c"}
output = {k:v for (k,v) in input.items() if key_satifies_condition(k)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Jonathon gave you an approach using dict comprehensions in <a href="https://stackoverflow.com/a/23862438/790387">his answer</a>. Here is an approach that deals with your <em>do something</em> part.</p>
<p>If you want to do something with the values of the dictionary, you don't need a dictionary comprehension at all:</p>
<p><em>I'm using <code>iteritems(</code>) since you tagged your question with <a class="post-tag" href="/questions/tagged/python-2.7" rel="tag" title="show questions tagged 'python-2.7'">python-2.7</a></em></p>
<pre><code>results = map(some_function, [(k,v) for k,v in a_dict.iteritems() if 'foo' in k])
</code></pre>
<p>Now the result will be in a list with <code>some_function</code> applied to each key/value pair of the dictionary, that has <code>foo</code> in its key.</p>
<p>If you just want to deal with the values and ignore the keys, just change the list comprehension:</p>
<pre><code>results = map(some_function, [v for k,v in a_dict.iteritems() if 'foo' in k])
</code></pre>
<p><code>some_function</code> can be any callable, so a lambda would work as well:</p>
<pre><code>results = map(lambda x: x*2, [v for k,v in a_dict.iteritems() if 'foo' in k])
</code></pre>
<p>The inner list is actually not required, as you can pass a <em>generator expression</em> to map as well:</p>
<pre><code>&gt;&gt;&gt; map(lambda a: a[0]*a[1], ((k,v) for k,v in {2:2, 3:2}.iteritems() if k == 2))
[4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="http://book.pythontips.com/en/latest/map_filter.html#filter" rel="nofollow noreferrer">filter function</a> to filter dictionaries, lists, etc. based on specific conditions.</p>
<pre><code>filtered_dict = dict(filter(lambda item: filter_str in item[0], d.items()))
</code></pre>
<p>The advantage is that you can use it for different data structures.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/2844516/python-filter-a-dictionary" title="python filter a dictionary">stackoverflow.com/questions/2844516/python-filter-a-dictionary</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2844516/how-to-filter-a-dictionary-according-to-an-arbitrary-condition-function">How to filter a dictionary according to an arbitrary condition function?</a></span>
<span class="comment-copy">Why not <code>filtered_dict = {k:d[k] for k in d if filter_string in k}</code>?</span>
<span class="comment-copy">@thefourtheye I'm going to <i>guess</i> that mine is faster, as it doesn't incurrent the <code>d[k]</code> lookup.</span>
<span class="comment-copy">Also, he says <code># do something</code> in the comments, but we drop few keys here.</span>
<span class="comment-copy">Do we have <code>iteritems</code> in Python 3? I don't think so. So, my version would be compatible, no?</span>
<span class="comment-copy">In Python 3 you would replace <code>iteritems</code> with <code>items</code>, which is the same as Python 2.7's <code>iteritems</code>.</span>
<span class="comment-copy">My method using <code>iteritems()</code> is going to be more efficient than <code>items()</code>.</span>
<span class="comment-copy">@Jonathin Reinhart I didn't knew about it. Thanks.</span>
<span class="comment-copy">On Python 2.7 only. In Python 3 there is <i>only</i> <code>items()</code>, which acts like Python 2.7's <code>iteritems</code>.</span>
<span class="comment-copy">The question is explicitly for python 2.7</span>
<span class="comment-copy">interesting. how would the some_function be defined? in the first case (k,v), does it just take two parameters? first key then value?</span>
<span class="comment-copy">Yes, just a callable. So <code>map(lambda a: a[0]*a[1], ((k,v) for k,v in {2:2, 3:2}.iteritems() if k == 2))</code> - this will give you <code>[4]</code>.</span>
<span class="comment-copy">This is correct, but more pythonic than using <code>map</code> is a list comprehension. <code>[f(v) for k, v in d.iteritems() if substring in k]</code> I think it is much more readable, and more efficient.</span>
<span class="comment-copy">@memo It wouldn't take two parameters, it would take a single parameter with two elements. There is also <a href="https://docs.python.org/2/library/itertools.html#itertools.starmap" rel="nofollow noreferrer">starmap</a> which will unpack into two arguments, however it is a lazy iterator (must be iterated before it executes, i.e. <code>results = list(starmap(...))</code> or <code>for result in starmap(...): ...</code>).</span>
<span class="comment-copy">Note that <code>items:</code> should be <code>item:</code> in the lambda definition.</span>
<span class="comment-copy">Thank you @bkribbs for pointing out the error. I have rectified it now.</span>
