<div class="post-text" itemprop="text">
<p>I made a python program which stores the user entered data in a sqlite database. I want to upload it to ftp server. I tried using ftplib in python. Here, database file name is same for all the users who uses the program.</p>
<p>Here, my problem is</p>
<p>If user1 upload the file to ftp server, and next user2 uploads it. The file is overwritten. How can I stop this?</p>
<p>Fairly: How can I stop overwriting a existing file and rename the current(file going to be uploaded) file in ftpserver. So, that I will have those 2 files?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/ftplib.html#ftplib.FTP.mlsd" rel="nofollow">ftplib.mlsd()</a> to list the directory before uploading.  If the given file is already there, then don't upload it.</p>
<p>Be careful with this -- if two people are uploading at the same time, it's still possible for user A to upload and overwrite user B.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question lacks details (among the rest: what version of Python you are using, what OS are you on, and most crucially what the naming scheme for the copied files should be).</p>
<p>I'll assume that each client program uses a SQLite file named "userdata.db" and that you want to make sure that on the FTP server each copy is identified by the user name.</p>
<p>So User:Pamar will have userdata.db.pamar on ftp server, while User:Lucy will end up with userdata.db.lucy</p>
<p>(I hope you have some way to be sure that no two users have the same name, btw).</p>
<p>The easiest solution I can think of is:</p>
<p>Use <a href="https://docs.python.org/2/library/shutil.html" rel="nofollow">shutil</a> to make a temporary (local) copy of the db with the desidered name, transfer it by FTP, then delete it.</p>
<p>I.e, in the case of User Pamar you'll have:</p>
<ul>
<li>Step 1: Copy /userhome/pamar/userdata.db -&gt; /userhome/pamar/userdata.db.pamar </li>
<li>Step 2: FTP transfer /userhome/pamar/userdata.db.pamar -&gt; FTPServer </li>
<li>Step 3: Delete /userhome/pamar/userdata.db.pamar</li>
</ul>
<p>It's not very elegant, and you will use some extra space on the (local) filesystem until the copy is completed, and this may be a problem if the userdata.db is particularly large (but then you would probably not use sqlite in the first place).</p>
</div>
<span class="comment-copy">It is not clear how you want to name the files on the destination (FTP server, in your case). Please provide more details.</span>
<span class="comment-copy">If the file exists, I don't want to overwirte it. Instead of that I want to append '1' so that it will be like filename1.</span>
<span class="comment-copy">See if my solution is ok for your needs. I am afraid that just using a number at the end of the filename may still end up with one user overwritting the file from another, so you better think of a more robust naming algorithm.</span>
<span class="comment-copy">Thanks you. But, I want to have both the files in my ftpserver.</span>
<span class="comment-copy">I suggest creating a directory per user on the FTP server.  Each user uploads to his own, clean, directory.  Then you can scan the different directories, moving the files into the real, output directory.</span>
<span class="comment-copy">In that case can I have multiple directory with same name?</span>
<span class="comment-copy">No.  You can write or customize your own FTP server, which behind the scenes writes to a different directory per user, but that sounds... tricky.   Consider restating your project's assumptions and goals, then create another StackOverflow question.   You'll get clearer answers :)</span>
<span class="comment-copy">Thanks for valuable suggestion. May be asking for email of the user and using that as email.db is better choice. Because no 2 users have the same email.</span>
<span class="comment-copy">I'm using python 2.7 under windows xp. I'll make it executable by using cx-feeze once I'll complete it.  My program structure is like :  Main.db   With Table - Lukcy(id, name, username, password)  Once the user logins, then it creates a folder database,   in that it create a db file with username.db  I want to upload this username.db file to ftp server.   My problem is I'll distribute the program to other people over internet. There is no way to check the username among all of them.  It tests on inside the system and allows only one unique username per account.</span>
<span class="comment-copy">The lack of unique ids among the users is a design flaw I am afraid. Any chance to address this by generating and store an ID when your user runs the program for the first time? Like using the email as you propose in the other answer's comments.</span>
