<div class="post-text" itemprop="text">
<p>How do global variables work in Python?  I know global variables are evil, I'm just experimenting.</p>
<p>This does not work in python:</p>
<pre><code>G = None

def foo():
    if G is None:
        G = 1

foo()
</code></pre>
<p>I get an error:</p>
<pre><code>UnboundLocalError: local variable 'G' referenced before assignment
</code></pre>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need the <a href="https://docs.python.org/3/reference/simple_stmts.html#global" rel="noreferrer"><code>global</code></a> statement:</p>
<pre><code>def foo():
    global G
    if G is None:
        G = 1
</code></pre>
<p>In Python, variables <em>that you assign to</em> become local variables by default. You need to use <code>global</code> to declare them as global variables. On the other hand, variables that you <em>refer to but do not assign to</em> do not automatically become local variables. These variables refer to the closest variable in an enclosing scope.</p>
<p>Python 3.x introduces the <a href="http://docs.python.org/dev/3.0/reference/simple_stmts.html#grammar-token-nonlocal_stmt" rel="noreferrer"><code>nonlocal</code></a> statement which is analogous to <code>global</code>, but binds the variable to its nearest enclosing scope. For example:</p>
<pre><code>def foo():
    x = 5
    def bar():
        nonlocal x
        x = x * 2
    bar()
    return x
</code></pre>
<p>This function returns 10 when called.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to declare <code>G</code> as <code>global</code>, but as for why: whenever you refer to a variable inside a function, if you <em>set</em> the variable anywhere in that function, Python assumes that it's a local variable. So if a local variable by that name doesn't exist at that point in the code, you'll get the <code>UnboundLocalError</code>. If you actually meant to refer to a global variable, as in your question, you need the <code>global</code> keyword to tell Python that's what you meant.</p>
<p>If you don't assign to the variable anywhere in the function, but only access its value, Python will use the global variable by that name if one exists. So you could do:</p>
<pre><code>G = None

def foo():
    if G is None:
        print G

foo()
</code></pre>
<p>This code prints <code>None</code> and does not throw the UnboundLocalError.</p>
</div>
<div class="post-text" itemprop="text">
<p>You still have to declare G as global, from within that function:</p>
<pre><code>G = None

def foo():
    global G
    if G is None:
        G = 1

foo()
print G
</code></pre>
<p>which simply outputs</p>
<pre><code>1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Define G as global in the function like this:</p>
<pre><code>#!/usr/bin/python

G = None;
def foo():
    global G
    if G is None:
        G = 1;
    print G;

foo();
</code></pre>
<p>The above python prints <code>1</code>.  </p>
<p>Using global variables like this is bad practice because: <a href="http://c2.com/cgi/wiki?GlobalVariablesAreBad" rel="nofollow noreferrer">http://c2.com/cgi/wiki?GlobalVariablesAreBad</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function">Using global variables in a function</a></span>
<span class="comment-copy">s/variables/names/g s/assign to/bind to/g</span>
<span class="comment-copy">Yes, one can use different terminology, but as long as Python itself talks about "variables" and "assignment" in the error message (as appears in the original question), I think such terminology is perfectly acceptable when explaining the problem.</span>
<span class="comment-copy">Point taken!  The language reference is not always always consistent on the matter, either.</span>
