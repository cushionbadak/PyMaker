<div class="post-text" itemprop="text">
<p>I'm making an application that uses Python's <code>socket</code> library to communicate data across an LAN. The code that is responsible for this has its own executable file. But when it's called a command windows is shown on the desktop.</p>
<p><strong>How can I  run this code without having a shell popping up ?</strong></p>
<p><strong>Details:</strong>
The program only handles the networking; there is no reason for the shell popping up (I never use <code>print()</code>, etc. in the code). Is there a way to stop the shell from being displayed which I am unaware of? The networking program needs to remain separate from the rest of the program so that, if necessary, the user can call it themselves.</p>
<p>The program was converted from python to an windows executable through the cx_Freeze
<code>cx_Freeze</code>, in case that matters)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from cx_Freeze import main
sys.argv = [sys.argv[0], '--target-dir', '%s'%DISTFOLDER, '--base', 'Win32GUI', entrypoint ]
main()
</code></pre>
<p>You’ll need to put in your target directory for DISTFOLDER and your entry point script for entrypoint. </p>
<p><strong>The console-less part is as simple the <code>–base Win32GUI</code> tag.</strong></p>
<p>or:</p>
<pre><code>import sys
from cx_Freeze import setup, Executable

base = None
if (sys.platform == "win32"):
    base = "Win32GUI"    # Tells the build script to hide the console.
</code></pre>
<p>They do pretty much the same thing.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://stackoverflow.com/a/23923073/205580">answer</a> submitted by @Kyllopardium may be exactly what you need. There's no reason to create a console application if you never intend to use the console interface. </p>
<p>That said, given that the networking program also needs to run as a standalone application, you may need to build a separate executable for a console interface. If you prefer to have a single console program, you can instead use the subprocess module to hide the console window when launched from the main application. </p>
<p>Configure an instance of <a href="https://docs.python.org/3/library/subprocess.html#windows-popen-helpers" rel="nofollow noreferrer"><code>STARTUPINFO</code></a> to hide the application window and pass this to the <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer"><code>Popen</code> constructor</a>. You can also pass this parameter to the subprocess <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="nofollow noreferrer">convenience functions</a>, <code>call</code>, <code>check_call</code>, and <code>check_output</code>. For example:</p>
<pre><code>import subprocess

exe = r'\path\to\networking_program.exe'
args = [exe, 'param1', '...', 'paramN']

if hasattr(subprocess, 'STARTUPINFO'):
# Windows
    si = subprocess.STARTUPINFO()
    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW   
    # The following is the initialized default, but
    # setting it explicitly is self-documenting.
    si.wShowWindow = subprocess.SW_HIDE 
else: 
# POSIX
    si = None  

try:    
    subprocess.check_call(args, startupinfo=si)
    # check_call waits for the process to exit.
    # If the return code is non-zero it raises the 
    # following exception:
except subprocess.CalledProcessError as e:
    handle_error(e)
</code></pre>
<p>Note that the program is run directly instead of via the cmd.exe shell. So the window that gets hidden is the program's own console window, not a "cmd shell" window. This window is hosted in a separate process (e.g. conhost.exe in Windows 7+). Multiple applications can share the same console, such as when a parent process (e.g. python.exe) starts a child process and waits for it to exit. If the parent process doesn't have a console (e.g. pythonw.exe), then Windows creates a new console for the child.</p>
</div>
<span class="comment-copy">@eryksun could you please post as an answer and include a short description to help future viewers and avoid link decay? If you don't feel like it, I always could, but I think you deserve credit for your answer.</span>
<span class="comment-copy">@eryksun I take it back. I don't know if I could figure out how to explain this. Help!</span>
<span class="comment-copy">@eryksun I don't want an in-depth explanation, just a (brief) one of how and why it works and how to use it. I program as a hobby, and am by no means an expert.</span>
<span class="comment-copy">@eryksun Update: I've figured out how to use <code>subprocess</code> (for some reason, I was thinking it was part of <code>os</code>, which is what was giving me trouble, but all I get is <code>TypeError: 'float' object is not iterable</code>.</span>
<span class="comment-copy">Then possibly 2 executables need to be created -- both GUI and console mode -- since it also needs to run as a standalone application.</span>
<span class="comment-copy">Personally, I would go with 2. And if the GUI one receives let's say the <code>--console</code> in its arguments, then make a subprocess to call the console mode, or the opposite.  I do think it's a reasonable choice.</span>
<span class="comment-copy">After your snippet, I would assume I would add the <code>setup()</code> function?</span>
<span class="comment-copy">Ah, I was passing each argument separately instead of in a table. This is a beautifully made program and an excellent explanation. As the solution itself was @Kyllopardiun 's I feel that I must accept his answer, but +1 for sure. EDIT: Oops, or not. I don't have the rep.</span>
<span class="comment-copy">subprocess tries but can't really paper over all of the many differences between POSIX and Windows. I used <code>args</code> as a list because that's what POSIX requires, not Windows. When given a list on Windows, it uses <code>subprocess.list2cmdline</code> to convert the list into a command-line string. This isn't just a simple <code>join</code> of the items since it needs to add quoting and escaping according to the rules used by Microsoft's C runtime.</span>
<span class="comment-copy">Ah, I should have mentioned that the program is Windows-specific. Still, nice to know how to make it cross-platform.</span>
