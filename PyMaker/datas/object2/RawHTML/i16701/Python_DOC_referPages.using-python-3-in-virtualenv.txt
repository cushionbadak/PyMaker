<div class="post-text" itemprop="text">
<p>Using <a href="https://virtualenv.pypa.io/en/latest/">virtualenv</a>, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. </p>
<p>I used <code>brew install python3</code> to install it on my Mac. Now, how do I create a virtualenv that uses the new version?</p>
<p>e.g. sudo virtualenv envPython3</p>
<p>If I try:</p>
<pre><code>virtualenv -p python3 test
</code></pre>
<p>I get:</p>
<pre><code>Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix '/usr/local/Cellar/python3/3.4.0_1/Frameworks/Python.framework/Versions/3.4'
New python executable in test/bin/python3.4
Also creating executable in test/bin/python
Failed to import the site module
Traceback (most recent call last):
  File "/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/site.py", line 67, in &lt;module&gt;
    import os
  File "/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/os.py", line 634, in &lt;module&gt;
    from _collections_abc import MutableMapping
ImportError: No module named '_collections_abc'
ERROR: The executable test/bin/python3.4 is not functioning
ERROR: It thinks sys.prefix is '/Users/user/Documents/workspace/test' (should be '/Users/user/Documents/workspace/test/test')
ERROR: virtualenv is not compatible with this system or executable
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>simply run</p>
<pre><code>virtualenv -p python3 envname
</code></pre>
<p>Update after OP's edit:</p>
<p>There was a bug in the OP's version of virtualenv, as described <a href="https://github.com/pypa/virtualenv/issues/463" rel="noreferrer">here</a>. The problem was fixed by running:</p>
<pre><code>pip install --upgrade virtualenv
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 has a built-in support for virtual environments - <a href="https://docs.python.org/3/library/venv.html#module-venv" rel="noreferrer">venv</a>. It might be better to use that instead. Referring to the docs:</p>
<blockquote>
<p>Creation of virtual environments is done by executing the pyvenv
  script:</p>
<p><code>pyvenv /path/to/new/virtual/environment</code></p>
</blockquote>
<p><strong>Update for Python 3.6 and newer:</strong></p>
<p>As <a href="https://stackoverflow.com/users/2829223/pawciobiel">pawciobiel</a> correctly <a href="https://stackoverflow.com/questions/23842713/using-python-3-in-virtualenv#comment68606378_30233408">comments</a>, <code>pyvenv</code> is <a href="https://docs.python.org/3.6/whatsnew/3.6.html#id7" rel="noreferrer">deprecated</a> as of Python 3.6 and the new way is:</p>
<pre><code>python3 -m venv /path/to/new/virtual/environment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Install prerequisites.</p>
<pre><code>sudo apt-get install python3 python3-pip virtualenvwrapper
</code></pre>
<p>Create a Python3 based virtual environment. Optionally enable <code>--system-site-packages</code> flag.</p>
<pre><code>mkvirtualenv -p /usr/bin/python3 &lt;venv-name&gt;
</code></pre>
<p>Set into the virtual environment.</p>
<pre><code>workon &lt;venv-name&gt;
</code></pre>
<p>Install other requirements using <code>pip</code> package manager.</p>
<pre><code>pip install -r requirements.txt
pip install &lt;package_name&gt;
</code></pre>
<hr/>
<p>When working on multiple python projects simultaneously it is usually recommended to install common packages like <code>pdbpp</code> globally and then reuse them in virtualenvs.</p>
<p>Using this technique saves a lot of time spent on fetching packages and installing them, apart from consuming minimal disk space and network bandwidth.</p>
<pre><code>sudo -H pip3 -v install pdbpp
mkvirtualenv -p $(which python3) --system-site-packages &lt;venv-name&gt;
</code></pre>
<hr/>
<h2>Django specific instructions</h2>
<p>If there are a lot of system wide python packages then it is recommended to not use <code>--system-site-packages</code> flag especially during development since I have noticed that it slows down Django startup a lot. I presume Django environment initialisation is manually scanning and appending all site packages from the system path which might be the reason. Even <code>python manage.py shell</code> becomes very slow.</p>
<p>Having said that experiment which option works better. Might be safe to just skip <code>--system-site-packages</code> flag for Django projects.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'v tried <a href="https://github.com/yyuu/pyenv">pyenv</a> and it's very handy for switching python versions (global, local in folder or in the virtualenv):</p>
<pre><code>brew install pyenv
</code></pre>
<p>then install Python version you want:</p>
<pre><code>pyenv install 3.5.0
</code></pre>
<p>and simply create virtualenv with path to needed interpreter version:</p>
<pre><code>virtualenv -p /Users/johnny/.pyenv/versions/3.5.0/bin/python3.5 myenv
</code></pre>
<p>That's it, check the version:</p>
<pre><code>. ./myenv/bin/activate &amp;&amp; python -V
</code></pre>
<p>There are also plugin for pyenv <a href="https://github.com/yyuu/pyenv-virtualenv.git">pyenv-virtualenv</a> but it didn't work for me somehow.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>virtualenv --python=/usr/bin/python3 &lt;name of env&gt;
</code></pre>
<p>worked for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify specific <strong><em>Version of Python</em></strong> while creating environment.<br/>
It's mentioned in <a href="https://github.com/pypa/virtualenv/blob/master/virtualenv.py" rel="noreferrer">virtualenv.py</a> </p>
<pre><code>virtualenv --python=python3.5 envname
</code></pre>
<p>In some cases this has to be the full path to the executable:</p>
<pre><code>virtualenv --python=/Users/username/.pyenv/versions/3.6.0/bin/python3.6 envname
</code></pre>
<p>How <code>-p</code> works</p>
<pre><code>parser.add_option(
    '-p', '--python',
    dest='python',
    metavar='PYTHON_EXE',
    help='The Python interpreter to use, e.g., --python=python3.5 will use the python3.5 '
    'interpreter to create the new environment.  The default is the interpreter that '
    'virtualenv was installed with (%s)' % sys.executable)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same <code>ERROR</code> message. tbrisker's solution did not work in my case. Instead this solved the issue:</p>
<pre><code>$ python3 -m venv .env
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other answers, I recommend checking what instance of virtualenv you are executing:</p>
<pre><code>which virtualenv
</code></pre>
<p>If this turns up something in /usr/local/bin, then it is possible - even likely - that you installed virtualenv (possibly using an instance of easy_tools or pip) without using your system's package manager (brew in OP's case).  This was my problem.</p>
<p>Years ago - when I was even more ignorant - I had installed virtualenv and it was masking my system's package-provided virtualenv.  </p>
<p>After removing this old, broken virtualenv, my problems went away.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python now comes with its own implementation of virtual environment, by the name of "venv". I would suggest using that, instead of virtualenv.</p>
<p>Quoting from <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">venv - docs</a>, </p>
<blockquote>
<p>Deprecated since version 3.6: pyvenv was the recommended tool for
  creating virtual environments for Python 3.3 and 3.4, and is
  deprecated in Python 3.6.</p>
<p>Changed in version 3.5: <strong>The use of venv is now recommended for
  creating virtual environments.</strong></p>
</blockquote>
<p>For windows, to initiate venv on some project, open cmd:</p>
<pre><code>python -m venv "c:\path\to\myenv"
</code></pre>
<p>(Would suggest using double quote around directory path if it contains any spaces. Ex: "C:/My Dox/Spaced Directory/Something")</p>
<p>Once venv is set up, you will see some new folders inside your project directory. One of them would be "Scripts".</p>
<p>To activate or invoke venv you need:</p>
<pre><code>C:\&gt; &lt;venv&gt;\Scripts\activate.bat
</code></pre>
<p>You can deactivate a virtual environment by typing “deactivate” in your shell. With this, you are now ready to install your project specific libraries, which will reside under the folder "Lib".</p>
<p>================================ Edit 1 ==================================== 
The scenario which will be discussed below is not what originally asked, just adding this in case someone use vscode with  python extension</p>
<p>In case, you use vs code with its python extension, you might face an issue with its pylint which points to the global installation. In this case, pylint won't be able to see the modules that are installed in your virtual environment and hence will show errors while importing.</p>
<p><a href="https://lnx.azurewebsites.net/python-dev-environment-with-visual-studio-code-on-linux/#pylintvscodeandvenv" rel="nofollow noreferrer">Here</a> is a simple method to get past this.</p>
<pre><code>cd Workspace\Scripts
.\Activate.ps1
code .
</code></pre>
<p>We are basically activating the environment first and then invoking vs-code so that pylint starts within the environment and can see all local packages.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3.6 I tried 
<code>python3 -m venv myenv</code>, 
as per the documentation, but it was taking so long. So the very simple and quick command is 
<code>python -m venv yourenv</code>
It worked for me on python3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Mac I had to do the following to get it to work.</p>
<pre><code>mkvirtualenv --python=/usr/bin/python3 YourEnvNameHere
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you install python3 (<code>brew install python3</code>) along with <a href="https://github.com/brainsik/virtualenv-burrito" rel="nofollow">virtualenv burrito</a>, you can then do  <code>mkvirtualenv -p $(which python3) env_name</code></p>
<p>Of course, I know virtualenv burrito is just a wrapper, but it has served me well over the years, reducing some learning curves.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>virtualenv --python=/usr/local/bin/python3 &lt;VIRTUAL ENV NAME&gt;</code>
this will add <strong>python3</strong>
 path for your virtual enviroment. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is all you need to run a virtual environment in python / python3</p>
<p>First make sure you have <a href="https://virtualenv.pypa.io/en/stable/installation/" rel="nofollow noreferrer">virtualenv</a> and now</p>
<p>Run:</p>
<pre><code>virtualenv -p python3 &lt;env name&gt;
</code></pre>
<p><strong>Sometime the above cmd fails, simply use this:</strong></p>
<pre><code>python3 -m virtualenv &lt;env_name&gt;  # you can specify full path instead &lt;env_name&gt; to install the file in a different location other than the current location
</code></pre>
<p>Now activate the virtual env:</p>
<pre><code>source &lt;env_name&gt;/bin/activate
</code></pre>
<p>Or:</p>
<pre><code>source `pwd`/&lt;env_name&gt;/bin/activate
</code></pre>
<p>Run (to exit):</p>
<pre><code>deactivate 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>It worked for me</strong></p>
<pre><code>virtualenv --no-site-packages --distribute -p /usr/bin/python3 ~/.virtualenvs/py3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For those having troubles while working with Anaconda3 (Python 3).</p>
<p>You could use </p>
<pre><code>conda create -n name_of_your_virtualenv python=python_version 
</code></pre>
<p>To activate the environment ( Linux, MacOS)</p>
<pre><code>source activate name_of_your_virtualenv
</code></pre>
<p>For Windows</p>
<pre><code>activate name_of_your_virtualenv
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried all the above stuff, it still didn't work. So as a brute force, I just re-installed the anaconda, re-installed the virtualenv... and it worked.</p>
<pre><code>Amans-MacBook-Pro:~ amanmadan$ pip install virtualenv
You are using pip version 6.1.1, however version 8.1.2 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.
Collecting virtualenv
  Downloading virtualenv-15.0.3-py2.py3-none-any.whl (3.5MB)
    100% |████████████████████████████████| 3.5MB 114kB/s 
Installing collected packages: virtualenv
Successfully installed virtualenv-15.0.3
Amans-MacBook-Pro:python amanmadan$ virtualenv my_env
New python executable in /Users/amanmadan/Documents/HadoopStuff/python/my_env/bin/python
Installing setuptools, pip, wheel...done.
Amans-MacBook-Pro:python amanmadan$ 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wanted to keep python 2.7.5 as default version on Centos 7 but have python 3.6.1 in a virtual environment running alongside other virtual environments in python 2.x</p>
<p>I found the below link the best solution for the newest python version ( python 3.6.1)
<a href="https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3" rel="nofollow noreferrer">https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3</a>.
It shows the steps for different platforms but the basic steps are</p>
<ol>
<li>Install python3.x (if not present) for your platform</li>
<li>Install python3.x-devel for your platform</li>
<li>Create virtual environment in python 3.x 
(for example $ python3.6 -m venv virenv_test_p3/ )</li>
<li>Activate the testenvironment for python 3.x 
(for example source virenv_test_p3/bin/activate)</li>
<li>Install the packages which you want to use in your new python 3 virtual environment and which are supported ( for example pip install Django==1.11.2)</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>For those of you who are using <a href="https://docs.pipenv.org/" rel="nofollow noreferrer">pipenv</a> and want to install specific version:</p>
<pre><code>pipenv install --python 3.6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I got the same error due to it being a conflict with miniconda3 install so when you type "which virtualenv" and if you've installed miniconda and it's pointing to that install you can either remove it (if your like me and haven't moved to it yet) or change your environment variable to point to the install you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows command line, the following worked for me. First find out where your python executables are located: </p>
<pre><code>where python
</code></pre>
<p>This will output the paths to the different python.exe on your system. Here were mine:</p>
<pre><code>C:\Users\carandangc\Anaconda3\python.exe
C:\Python27\python.exe
</code></pre>
<p>So for Python3, this was located in the first path for me, so I cd to the root folder of the application where I want to create a virtual environment folder. Then I run the following which includes the path to my Python3 executable, naming my virtual environment 'venv':</p>
<pre><code>virtualenv --python=/Users/carandangc/Anaconda3/python.exe venv
</code></pre>
<p>Next, activate the virtual environment:</p>
<pre><code>call venv\Scripts\activate.bat
</code></pre>
<p>Finally, install the dependencies for this virtual environment:</p>
<pre><code>pip install -r requirements.txt
</code></pre>
<p>This requirements.txt could be populated manually if you know the libraries/modules needed for your application in the virtual environment. If you had the application running in another environment, then you can automatically produce the dependencies by running the following (cd to the application folder in the environment where it is working):</p>
<pre><code>pip freeze &gt; requirements.txt
</code></pre>
<p>Then once you have the requirements.txt that you have 'frozen', then you can install the requirements on another machine or clean environment with the following (after cd to the application folder):</p>
<pre><code>pip install -r requirements.txt
</code></pre>
<p>To see your python version in the virtual environment, run:</p>
<pre><code>python --version
</code></pre>
<p>Then voila...you have your Python3 running in your virtual environment. Output for me:</p>
<pre><code>Python 3.7.2
</code></pre>
</div>
<span class="comment-copy">did you try only updating the interpreter in your current environment or did you just decide to start from scratch?</span>
<span class="comment-copy">Seems like this is a bug with virtualenv that was fixed. See <a href="https://github.com/pypa/virtualenv/issues/463#issuecomment-25904873" rel="nofollow noreferrer">here</a> for more details, to be short - <code>pip install --upgrade virtualenv</code> will hopefully fix it.</span>
<span class="comment-copy">@tbrisker you should add this bug report to your answer so it is self contained.</span>
<span class="comment-copy">The virtualenv upgrade worked, but for some reason I also had to be explicit about python3 executable with <code>virtualenv -p $(which python3) envname</code></span>
<span class="comment-copy">Thanks for the easy step... previously I did a way around procedure and it screwed up my native fiedirectory...</span>
<span class="comment-copy">is it possible to just change the current environment's python interpreter rather than creating a new environment?</span>
<span class="comment-copy">i hope you are correct since i just left virtualenv to work with pyenv along with python 3.5.2</span>
<span class="comment-copy">I have not found any information confirming the location related concerns, relocatable was removed as an option.... is it now unnecessary?  is their a workaround?  or is it just now completely useless to prepare an app?</span>
<span class="comment-copy">Exactly but you could also run:  <code>python3 -m venv /path/v3</code> since pyvenv script has been deprecated as of Python 3.6.</span>
<span class="comment-copy">using the latest anaconda python 3.6 on mac, and <code>python3 -m venv /path/v3</code> errors here. <code>Error: Command '['/path/v3/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit</code> Am I missing something?    With the <code>--without-pip</code> option, it at least creates the venv with activate/deactivate scripts correctly.</span>
<span class="comment-copy">Anybody know how to activate a python3.6 -m venv &lt;venvname&gt;. Theres no Scripts/ in the created directory, nor "activate" in the bin/ subdir.</span>
<span class="comment-copy">I applied this to OSX, it worked (except didn't use <code>apt-get</code> but <code>brew</code>)</span>
<span class="comment-copy">it seems that your method requires to create a new python environment. Can pyenv work with virtualenv and simple change my python version whenever I want?</span>
<span class="comment-copy">Also works for me using Ubuntu 14.04.</span>
<span class="comment-copy">I tried that but is said <code>The executable python3 (from --python=python3) does not exist</code>, what would you do? I wanted to brew isntall python3 but was unsure if that was a good idea or if my system would get confused of which python version I am using</span>
<span class="comment-copy">thanks worked for me on mac with mkvirtualenv.</span>
<span class="comment-copy">Works like a charm in Ubuntu 16.04!</span>
<span class="comment-copy">virtualenv: error: no such option: --python3.6</span>
<span class="comment-copy">I use <code>virtualenv</code> for day-to-day use of virtual environments (<code>workon</code> , etc.), but for reliable creation of new virtual environments in <code>python3.x</code> this is the only way I found that works.</span>
<span class="comment-copy">To find exactly where your desired python version is location use <code>which python2.7</code> or <code>which python3.5</code> or <code>which python3.6</code>, then replace the about <code>--python=DIRECTORY</code></span>
