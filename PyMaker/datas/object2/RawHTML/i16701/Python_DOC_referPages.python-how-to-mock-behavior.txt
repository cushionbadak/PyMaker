<div class="post-text" itemprop="text">
<p>How does one mock the behavior of a function?</p>
<p>For example, if you had the following App Engine code that issued a HTTP request, how would you mock the function to make it return a non 200 response?</p>
<pre><code>def fetch_url(url, method=urlfetch.GET, data=''):
    """Send a HTTP request"""

    result = urlfetch.fetch(url=url, method=method, payload=data,
                            headers={'Access-Control-Allow-Origin': '*'})

    return result.content
</code></pre>
<p>Here is the mock I've written, but I don't know how to mock a non-200 response.</p>
<pre><code>class TestUrlFetch(unittest.TestCase):
    """Test if fetch_url sending legitimate requests"""

    def test_fetch_url(self):
        from console.auth import fetch_url

        # Define the url
        url = 'https://google.com'

        # Mock the fetch_url function 
        mock = create_autospec(fetch_url, spec_set=True) 
        mock(url)

        # Test that the function was called with the correct param
        mock.assert_called_once_with(url)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You test really isn't doing much: its simply testing if the function was called with the parameters <strong>you passed it</strong>.</p>
<p>If you wanted <code>urlfetch.fetch</code> to return a certain value use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>MagicMock</code>:</a></p>
<pre><code>import urlfetch
from unittest.mock import MagicMock

reponse = 'Test response'

urlfetch.fetch = MagicMock(return_value=response)

assert urlfetch.fetch('www.example.com') == response
</code></pre>
<p>So, a quick example of testing your <code>fetch_url</code> function when <code>urlfetch.fetch</code> returns a 500-error:</p>
<pre><code>def test_500_error(self):
    expected_response = 'Internal Server Error'

    urlfetch.fetch = MagicMock(return_value={'code':500,
                                             'content': 'Internal Server Error'})

    assert fetch_url('www.example.com') == expected_result
</code></pre>
</div>
<span class="comment-copy">Are you using the urlfetch service on AppEngine?  or someplace else?</span>
<span class="comment-copy">App Engine. But I'm more interested in the theory of how you go about mocking behavior.</span>
<span class="comment-copy">What I'm interested in is what the correct way to test my <code>fetch_url</code> function above would be, using a Mock. E.g. how would you replicate the function getting back a <code>result.status_code</code> of <code>404</code> using a mock, and then testing how the functions reacts to that? Obviously I'm missing a conceptual piece of what Mock's do, and I get that. It's just that I can't find that conceptual piece anywhere in the documentation, or in any blog post, tutorial or article (I've looked).</span>
<span class="comment-copy">Maybe another way to put it is - if you had to write a test for the <code>fetch_url</code> function above using Mocks to replicate different possible results (e.g. getting a <code>result.status_code</code> of <code>500</code>, etc) how would you do it?   Your test simply checks that the function doesn't have any bugs, and returns the response that you supplied to it. So essentially, it doesn't do anything really different from my test above. So how would you write the test?</span>
<span class="comment-copy">You mock urlfetch.fetch, setting return_value to a status=500 response, and test your fetch_url function. Mocking the thing you're testing directly makes no sense.</span>
<span class="comment-copy">Ok I understand. I'll edit my post to give an example.</span>
