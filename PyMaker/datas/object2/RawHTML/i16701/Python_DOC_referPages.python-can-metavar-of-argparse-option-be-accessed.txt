<div class="post-text" itemprop="text">
<p>I was wondering if there was a way to use the metavar from argparse be grabbed from elsewhere.  Example, there is a -f FILE option, and a -d DIR option. Can I make the help of -d grab the file.metavar or some such?<br/>
Maybe:  </p>
<pre><code> parser.add_argument("-f", "--file",
          metavar = 'FILE',
          action="store", dest="file_name", default="foo.bar",
          help="Name of the {} to be loaded".format(metavar))
parser.add_argument("-d", "--dir",
          metavar = 'DIR',
          action = 'store', dest='file_dir', default=".",
          help="Directory of {} if it is not current directory".format(option.file_name.metavar)
</code></pre>
<p>I know this code is wrong (string doesn't have metavar and options doesn't get set until the parser.parse_args() is run), but I have a few other times I want to just grab the metavar without having a bunch of:  </p>
<pre><code> meta_file = 'FILE'
 meta_dir = 'DIR'
 meta_inquisition = 'SURPRISE'
</code></pre>
<p>floating around.</p>
<p>Thanks.</p>
<p><strong>EDIT:</strong> s/add_option/add_argument/</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>argparse</code> it is <code>add_argument</code>.  This method returns an <code>Action</code> object (actually a subclass of that depending the <code>action</code> parameter).  You can access various parameters of that object, either to use, or even change.  For example:</p>
<pre><code>action1 = parser.add_argument("-f", "--file", metavar = 'FILE', 
    dest="file_name", default="foo.bar", 
    help="Name of the %(metavar)s to be loaded")
action2 = parser.add_argument("-d", "--dir", metavar = 'DIR', 
    dest='file_dir', default=".", 
    help="Directory of %s if it is not current directory"%action1.metavar)
print(action1.metavar)  # read the metavar attribute
action2.metvar = 'DIRECTORY'  # change the metavar attribute
</code></pre>
<p>The <code>help</code> reads:</p>
<p>usage: ipython [-h] [-f FILE] [-d DIR]</p>
<pre><code>optional arguments:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  Name of the FILE to be loaded
  -d DIR, --dir DIR     Directory of FILE if it is not current directory
</code></pre>
<p>I removed <code>action='store'</code> since that is the default value (no big deal though).</p>
<p>I changed the <code>help</code> values to use <code>%(metavar)s</code>.  This is used to incorporate various <code>action</code> attributes.  Most commonly it is used for the <code>default</code>. </p>
<p><a href="https://docs.python.org/3/library/argparse.html#help" rel="nofollow">https://docs.python.org/3/library/argparse.html#help</a></p>
<blockquote>
<p>The help strings can include various format specifiers to avoid repetition of things like the program name or the argument default. The available specifiers include the program name, %(prog)s and most keyword arguments to add_argument(), e.g. %(default)s, %(type)s, etc.:</p>
</blockquote>
<p>I am using <code>action1.metavar</code> to place <code>FILE</code> in the help line for <code>action2</code>.  It's not a common usage, but I don't see anything wrong with it.</p>
<p>Note that <code>action1.metavar</code> is used once when setting up the parser (to create the <code>action2</code> help line), and then later when the <code>help</code> is formatted.</p>
<pre><code>In [17]: action2.help
Out[17]: 'Directory of FILE if it is not current directory'    
In [18]: action1.help
Out[18]: 'Name of the %(metavar)s to be loaded'
</code></pre>
<p><code>py3</code> style formatting can be use for <code>action2</code></p>
<pre><code>help2="Directory of {} if it is not current directory".format(action2.metavar)
action2.help = help2
</code></pre>
<p>but <code>py2</code> style has to be used for <code>action1</code>.  Unless you did</p>
<pre><code>action1.help = "Name of the {} to be loaded".format(action1.metavar)
</code></pre>
<p>After creating both actions you even could use:</p>
<pre><code>action1.help = "Name of the {} to be loaded from {}".format(action1.metavar, action2.metavar)
</code></pre>
<p>But that's just ordinary Python coding.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/dev/library/argparse.html#help" rel="nofollow">the docs for the <code>help</code> argument</a>, the help text can contain format specifiers like <code>%(default)s</code>, <code>%(type)s</code>, etc. You can write <code>%(metavar)s</code> and it will be expanded to the value of the metavar (or <code>None</code> if it's not specified).</p>
<p>I don't think there's a way to grab another's argument metavar.</p>
</div>
<span class="comment-copy">I don`t think so. There is a bunch of questions asking to use the 'default' arg in 'help'. And there is no how.</span>
<span class="comment-copy">this looks promising. I will run through it with my stuff.  Also thanks for the add_argument.  Still stuck using optparse in my brain.</span>
<span class="comment-copy">Bingo. Thanks for the help.</span>
<span class="comment-copy">Shame that it does not work for the default <code>metavar</code> calculated from <code>--my-option</code>: you have to explicitly give <code>metavar=</code>. Python 3.6.5.</span>
<span class="comment-copy">Note the importance of <code>s</code> after <code>%(metavar)</code>, I didn't get it when reading the docs.</span>
