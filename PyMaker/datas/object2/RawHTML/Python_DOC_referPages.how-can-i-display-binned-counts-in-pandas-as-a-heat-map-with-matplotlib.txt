<div class="post-text" itemprop="text">
<p>I'm working with a wine data set and noticed that when viewing counts, the larger numbers appear darker and cause a sort of heat map effect.  I was wondering if there's a way to use MatPlotLib to enhance the effect.</p>
<pre><code>BINS = [0, 50, 100, 150, 200, 1000]
price_by_points = first150.groupby(['points', pd.cut(first150['price'], BINS)]).size().unstack('price').fillna(0)
</code></pre>
<p>Produces:</p>
<pre><code>price   (0, 50]  (50, 100]  (100, 150]  (150, 200]  (200, 1000]
points                                                         
80        871.0       12.0         0.0         0.0          0.0
81       1444.0       23.0         0.0         0.0          2.0
82       3874.0       55.0         4.0         0.0          0.0
83       5717.0       84.0         3.0         1.0          2.0
84       9861.0      238.0        15.0         4.0          2.0
85      11313.0      262.0        21.0         7.0          1.0
86      13874.0      447.0        26.0         1.0          3.0
87      18097.0      857.0        55.0        12.0          4.0
88      14811.0     1122.0        91.0         7.0          3.0
89      10194.0     1238.0        97.0        13.0         15.0
90      11909.0     2244.0       180.0        45.0         26.0
91       6810.0     2148.0       209.0        28.0         15.0
92       5135.0     2575.0       287.0        74.0         48.0
93       2432.0     2162.0       399.0        98.0        106.0
94       1067.0     1361.0       338.0       100.0        140.0
95        322.0      696.0       205.0        81.0        162.0
96         77.0      262.0       100.0        48.0         78.0
97          9.0      117.0        59.0        29.0         88.0
98          1.0       36.0        29.0        10.0         37.0
99          0.0        8.0         5.0         5.0         21.0
100         0.0        5.0         0.0         4.0         12.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use Matplotlib to generate a heat map and annotate it:</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np

plt.figure()
heatmap = plt.pcolor(df, cmap='viridis')

# Add text
for y in range(df.shape[0]):
    for x in range(df.shape[1]):
        plt.text(x + 0.5, y + 0.5, '{:.0f}'.format(df.iloc[y, x]),
                 color='w',horizontalalignment='center',
                 verticalalignment='center',)
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
plt.colorbar(heatmap)
plt.ylabel('points')
plt.xlabel('price')
</code></pre>
<p><a href="https://i.stack.imgur.com/IKN7e.png" rel="nofollow noreferrer"><img alt="Matplotlib heat map" src="https://i.stack.imgur.com/IKN7e.png"/></a></p>
<p>You can also use seaborn to get an annotated heat map more easily:</p>
<pre><code>import seaborn as sns

plt.figure()
sns.heatmap(df, annot=True, fmt='d')
plt.xlabel('Price')
</code></pre>
<p><a href="https://i.stack.imgur.com/rN9Gq.png" rel="nofollow noreferrer"><img alt="Seaborn heat map" src="https://i.stack.imgur.com/rN9Gq.png"/></a></p>
<p>Seaborn does a good job of automatically formatting the text shading so it is visible with the changing background color.</p>
</div>
<span class="comment-copy">easiest probably to use <code>seaborn.heatmap</code>.  <code>import seaborn as sns   ;  sns.heatmap(price_by_points)</code></span>
<span class="comment-copy">You might want to check the <a href="https://matplotlib.org/gallery/images_contours_and_fields/image_annotated_heatmap.html" rel="nofollow noreferrer">Creating annotated heatmaps</a>  example. If this question is about using pandas within a jupyter notebook, you might also be interested in reading the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html" rel="nofollow noreferrer">pandas style guide</a>.</span>
