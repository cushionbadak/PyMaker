<div class="post-text" itemprop="text">
<p>I'm trying to extract the frequency of a note from an mp3 file that includes a synthesized sample of an A3 note, which should be 220 Hz.</p>
<p>This is part of the waveform I obtain using <code>librosa</code>:</p>
<p><img alt="Saw waveform zoom" src="https://i.stack.imgur.com/LJ0cc.png"/></p>
<p>As you can see, the wave seems to repeat itself every 400 samples. Therefore, by dividing the sampling rate, which is 22050 Hz, by 400 I should get the frequency of the waveform. However, I get 55.125 Hz instead of 220. Am I missing something or making a mistake?</p>
<p><strong>EDIT</strong>: Here's the code I'm using</p>
<pre><code>import librosa
from matplotlib import pyplot as plt
import numpy as np
%matplotlib notebook

y, sr = librosa.load("Simple_synth/A3-saw.mp3")

plt.figure(figsize=(18,6))
plt.plot(y[2000:3000])

note_freq = sr/400
</code></pre>
<p>Link to the audio file:
<a href="https://www.filefactory.com/file/7aqmrvq375n9/A3-saw.mp3" rel="nofollow noreferrer">https://www.filefactory.com/file/7aqmrvq375n9/A3-saw.mp3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>For the given audio sample</p>
<pre><code>import librosa
from matplotlib import pyplot as plt
import numpy as np

y, sr = librosa.load("A3-saw.mp3")
</code></pre>
<p>it is possible to calculate fourier transform (see <a href="https://stackoverflow.com/questions/3694918/how-to-extract-frequency-associated-with-fft-values-in-python">how to extract frequency associated with fft values in python</a>)</p>
<pre><code># calculate fast fourier transform
w = np.fft.fft(y)

# frequencies associated to the fourier transform
freqs = np.fft.fftfreq(len(y))
</code></pre>
<p>And then find the highest peak in the fourier transform and its frequency in Hz</p>
<pre><code>idx = np.argmax(np.abs(w))
freq = freqs[idx]
freq_in_hertz = abs(freq * sr)
print(freq_in_hertz)
</code></pre>
<blockquote>
<p>54.90196078431373</p>
</blockquote>
<p>There are also higher harmonics involved in the sample, which can be seen by plotting more peaks</p>
<pre><code>plt.plot(sr*freqs[0:500],abs(w[0:500]))
</code></pre>
<p><a href="https://i.stack.imgur.com/wQGno.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/wQGno.png"/></a></p>
<pre><code>plt.plot(sr*freqs[0:2000],abs(w[0:2000]))
</code></pre>
<p><a href="https://i.stack.imgur.com/suY3I.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/suY3I.png"/></a></p>
</div>
<span class="comment-copy">Hi please include some code so we can help! Consider reading: <a href="https://stackoverflow.com/help/mcve">MCVE</a> to get advice on constructing a good question.</span>
<span class="comment-copy">So is it rather A1 note with frequency 55 Hz than A3 note with frequency 220 Hz?</span>
<span class="comment-copy">It should be an A3. It definitely doesn't sound like an A1</span>
<span class="comment-copy">Can you upload the audio file?</span>
<span class="comment-copy">In that waveform which is not exactly sinusoidal there are also upper harmonics which affect how it sounds.</span>
<span class="comment-copy">Thank you! I guess I'll have to look for other methods for pitch detection</span>
