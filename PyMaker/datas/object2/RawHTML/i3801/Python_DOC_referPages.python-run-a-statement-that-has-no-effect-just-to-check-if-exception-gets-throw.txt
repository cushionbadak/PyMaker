<div class="post-text" itemprop="text">
<p>I want something to happen if user input is not valid (look at the exception block):</p>
<pre><code>try:
    name = raw_input("\nEnter someone's name (x to exit): ")
    table_dictionary[name.title()]  # This is what I am talking about
    fact = raw_input("What do you want to know about " + name.title() + "?: ")
    print name.title() + "'s " + fact + " is " + str(table_dictionary[name.title()][fact.title()])
except KeyError:
    if name == "x":
        print 'Closing'
        break
    print "Error: Invalid input"
</code></pre>
<p>Notice how I run <code>table_dictionary[name.title()]</code> even though it doesn't do anything. I do this in case the user input is not in the dictionary, it will tell the user that it is invalid input. PyCharm highlights it and tells me that <code>statement seems to have no effect</code>. I'm just wondering if this is good practice or not.</p>
<p>Edit: Note that I also want to print "Error: Invalid input" if the user gives invalid input for fact too. My example covers this.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is more elegant and pythonic:</p>
<pre><code>name = raw_input("\nEnter someone's name (x to exit): ")
if name == "x":
    print 'Closing'
    break
try:
    fact_dictionary = table_dictionary[name.title()]
    fact = raw_input("What do you want to know about " + name.title() + "?: ")
    print name.title() + "'s " + fact + " is " + str(fact_dictionary[fact.title()])
except KeyError:
    print "Error: Invalid input"
</code></pre>
<p>This way we catch both possible exceptions for invalid input, and break early if <code>name == 'x'</code></p>
<p>It also makes your code more readable and prevents PyCharm from complaining.</p>
<p>I disagree with some of the other commenters who suggest checking for the keys in the dictionaries and so on, you are right to use exceptions for flow control, <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> is the Python way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Checking for the key in table_dictionary could be a better practice</p>
<pre><code>name = raw_input("\nEnter someone's name (x to exit): ")

if name == "x":
    print 'Closing'
    break
elif name.title() not in table_dictionary:
    print "Error: Invalid input"
else:  
    fact = raw_input("What do you want to know about " + name.title() + "?: ")
    print name.title() + "'s " + fact + " is " + str(table_dictionary[name.title()][fact.title()])
</code></pre>
<p>For better readability, you can move .title() directly to the input</p>
<pre><code>name = raw_input("\nEnter someone's name (x to exit): ").title()

if name == "X":
    print 'Closing'
    break
elif name not in table_dictionary:
    print "Error: Invalid input"
else:  
    fact = raw_input("What do you want to know about " + name + "?: ")
    print name + "'s " + fact + " is " + str(table_dictionary[name][fact.title()])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It can be OK to run some code just to see if it raises an exception, but often there's a better way to test if something is possible or not. In your specific case, I'd suggest testing if the key is in the dictionary using the <code>in</code> operator, with an <code>if</code>, <code>elif</code> and <code>else</code> to resolve the consequences:</p>
<pre><code>name = raw_input("\nEnter someone's name (x to exit): ")
if name.title() in table_dictionary:
    fact = raw_input("What do you want to know about " + name.title() + "?: ")
    print name.title() + "'s " + fact + " is " + str(table_dictionary[name.title()][fact.title()])
elif name == "x":
    print 'Closing'
    break
else:
    print "Error: Invalid input"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest doing something like this. Nothing is useless now.</p>
<pre><code>try:
    name = raw_input("\nEnter someone's name (x to exit): ")
    assert name != 'x', "Closing"
    assert table_dictionary.has_key(name.title()), "Error: Invalid input '%s'" % name
    fact = raw_input("What do you want to know about " + name.title() + "?: ")
    assert table_dictionary[name.title()].has_key(fact.title()), "Error: Invalid input '%s'" % fact
    print name.title() + "'s " + fact + " is " + str(table_dictionary[name.title()][fact.title()])
except AssertionError as err:
    print err
</code></pre>
</div>
<span class="comment-copy">I should have clarified, I want to run "Error: Invalid input" if the user gives a bad fact too. Your example would not do this.</span>
<span class="comment-copy">You can just write <code>assert table_dictionary.has_key(name.title())</code> you don't need <code>== True</code>. I do quite like the approach of using assert for this line as I think it is even more explicit, and allows for the <code>AssertionError</code> to be handled separately to the <code>KeyError</code>. But don't forget that you must also still catch the potential <code>KeyError</code> which occurs on the <code>print</code> line when looking up the <code>fact</code>.</span>
<span class="comment-copy">@rbricheno Thanks for pointing it out. I'll edit my answer according to your suggestions.</span>
