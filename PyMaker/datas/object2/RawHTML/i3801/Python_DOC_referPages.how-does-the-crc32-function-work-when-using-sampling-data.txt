<div class="post-text" itemprop="text">
<p>I would like to ask you about explanation of the following short function in Python..</p>
<pre><code>from zlib import crc32

def test_set_check(identifier, test_ratio):
    return crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32
</code></pre>
<p>The above-mentioned function should be the same as the following function:</p>
<pre><code>import hashlib

def test_set_check(identifier, test_ratio, hash=hashlib.md5):
    return hash(np.int64(identifier)).digest()[-1] &lt; 256 * test_ratio
</code></pre>
<p>Both functions should be used for data sampling (select some rows in a table). For example, if <code>test_ratio</code> is 0.2 then it means that I want to sample 20% data, the value is lower or equal to 51 (~20% of 256). I understand how the second function works but I don't understand the first one. Could you please explain to me the first function? I don't understand the following part: <code>crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>crc32</code> function outputs an unsigned 32-bit number, and the code tests if the CRC value is lower than the test_ratio times the maximum 32-bit number.</p>
<p>The <code>&amp; 0xffffffff</code> mask is there only to <a href="https://docs.python.org/3/library/zlib.html#zlib.crc32" rel="nofollow noreferrer">ensure compatibility with Python 2 and 3</a>. In Python 2 the same function could return a <em>signed</em> integer, in a range from -(2^31) to (2^31) - 1, masking this with the <code>0xffffffff</code> mask normalises the value to a signed.</p>
<p>So basically, either version turns the identifier into an integer, and the hash is used to make that integer reasonably uniformly distributed in a range; for the MD5 hash that's the last byte making the value fall between 0 and 255, for the CRC32 checksum the value lies between 0 and (2^32)-1. This integer is then compared to the full range; if it falls below the <code>test_ratio * maximum</code> cut-off point it is considered selected.</p>
<p>You could also use a random function, but then you'd get a different subset of your input each time you picked a sample; by hashing the identifier you get to produce a <em>consistent</em> subset. The difference between the two methods is that they'll produce a different subset, so you could use both together to pick multiple, independent subsets from the same input.</p>
<p>Compare:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from zlib import crc32
&gt;&gt;&gt; from hashlib import md5
&gt;&gt;&gt; import random
&gt;&gt;&gt; identifier = np.int64(random.randrange(2**63))
&gt;&gt;&gt; md5(identifier).digest()[-1]
243
&gt;&gt;&gt; md5(identifier).digest()[-1] / 256  # as a ratio of the full range
0.94921875
&gt;&gt;&gt; crc32(identifier)
4276259108
&gt;&gt;&gt; crc32(identifier) / (2 ** 32)   # ratio again
0.9956441605463624
&gt;&gt;&gt; identifier = np.int64(random.randrange(2**63))  # different id to compare
&gt;&gt;&gt; md5(identifier).digest()[-1] / 256  # as a ratio of the full range
0.83203125
&gt;&gt;&gt; crc32(identifier) / (2 ** 32)   # ratio again
0.10733163682743907
</code></pre>
<p>So the two different methods produce different outputs, but as long as the CRC32 and MD5 hashes produce reasonably <em>uniformly distributed</em> hash values, then either will give you a fair 20% sampling rate.</p>
</div>
