<div class="post-text" itemprop="text">
<p>I have a difficulty implementing properties and <code>__getattr__</code> so that
when an error happens, it is reported correctly. This is my MWE (python 3.6):</p>
<pre><code>class A:

    @property
    def F(self):
        return self.moo # here should be an error

    @property
    def G(self):
        return self.F

    def __getattr__(self, name):
        print('call of __getattr__ with name =', name)
        if name == 'foo':
            return 0
        raise AttributeError("'{}' object has no attribute '{}'".format(type(self).__name__, name))

a = A()
print(a.G)
</code></pre>
<p>The output is as follows:</p>
<pre><code>call of __getattr__ with name = moo
call of __getattr__ with name = F
call of __getattr__ with name = G
Traceback (most recent call last):
  line 18 in &lt;module&gt;
    print(a.G)
  line 15, in __getattr__
    raise AttributeError("'{}' object has no attribute '{}'".format(type(self).__name__, name))
AttributeError: 'A' object has no attribute 'G'
</code></pre>
<p>But the error that should be raised is:</p>
<pre><code>AttributeError: 'A' object has no attribute 'moo'
</code></pre>
<p>I know that properties and attributes in the <code>__dict__</code> are attempted before <code>__getattr__</code> is called in an error-free scenario.</p>
<ol>
<li><p>It seems incorrect to me that when a property exists but fails, <code>__getattr__</code> is still attempted instead of letting the error from the property to go through. How can this be avoided?</p></li>
<li><p>The initial error message that was generated about failing to get attribute <code>'foo'</code> has been lost. The final error message <code>'A' object has no attribute 'G'</code> is particularly misleading and annoying. How to implement <code>__getattr__</code> in order to see the initial error?</p></li>
<li><p>(EDIT) A related problem is simultaneously to achieve that
<code>hasattr(a, 'moo')</code> returns <code>False</code> while <code>hasattr(a, 'G')</code> returns <code>True</code> or raises an exception of the missing <code>'moo'</code> attribute. Does that make sense?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<h2>What is happening?</h2>
<p>First, a little heads up as to why this happens. From the doc on <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a>:</p>
<blockquote>
<p>Called when the default attribute access fails with an AttributeError [...] or <code>__get__()</code> of a name property raises AttributeError.</p>
</blockquote>
<p>In this case, since you are using <code>@property</code>, we are looking at an <code>AttributeError</code> raised from the <code>__get__</code> method of the property <code>F</code> when trying to recover <code>self.moo</code>. This is what your call stack looks like at that moment.</p>
<pre><code>__main__
a.G.__get__
a.F.__get__
a.__getattr__ # called with 'moo' &lt;-- this is where the error is raised
</code></pre>
<p>The attribute getter protocol sees an error being raised from inside <code>a.F.__get__</code>, it thus fallback on calling <code>a.__getattr__('F')</code> and that despite the fact the error had been raised because of <code>'moo'</code>. The same then happens for <code>a.G.__get__</code></p>
<p>This behaviour is <em>considered normal in Python</em>, since the top-most property that failed to return a value is indeed <code>a.G</code>.</p>
<h2>Solution</h2>
<p>Now what you want is for an <code>AttributeError</code> raised by a <code>__get__</code> method to bubble up instead of being caught. To do that you need <em>not to have</em> a <code>__getattr__</code> method.</p>
<p>Thus, in this particular case, what you want to use is <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattribute__" rel="nofollow noreferrer"><code>__getattribute__</code></a> instead.</p>
<p>Of course, with this solution you have to make sure yourself not to override an existing attribute.</p>
<pre><code>class A:

    @property
    def F(self):
        return self.moo # here should be an error

    @property
    def G(self):
        return self.F

    def __getattribute__(self, name):
        print('call of __getattribute__ with name =', name)
        if name == 'foo':
            return 0
        else:
            return super().__getattribute__(name)
</code></pre>
<h3>Example</h3>
<pre><code>A().G
</code></pre>
<h3>Output</h3>
<pre><code>call of __getattribute__ with name = G
call of __getattribute__ with name = F
call of __getattribute__ with name = moo

Traceback (most recent call last):
...
AttributeError: 'A' object has no attribute 'moo'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a hacky solution, replacing the <code>AttributeError</code> with another exception type:</p>
<pre><code>from functools import wraps

def no_AttributeError(f):
    @wraps(f)
    def wrapped(self):
        try:
            return f(self)
        except AttributeError as e:
            raise Exception('AttributeError inside a property getter') from e
    return wrapped

class A:

    @property
    @no_AttributeError
    def F(self):
        return self.moo # here should be an error

    @property
    @no_AttributeError
    def G(self):
        return self.F

    def __getattr__(self, name):
        print('call of __getattr__ with name =', name)
        if name == 'foo':
            return 0
        raise AttributeError("'{}' object has no attribute '{}'".format(type(self).__name__, name))

a = A()
print(a.G)
</code></pre>
<p>This results in the following output:</p>
<pre><code>call of __getattr__ with name = moo
Traceback (most recent call last):
  File ".\test_getattr_redir.py", line 7, in wrapped
    return f(self)
  File ".\test_getattr_redir.py", line 17, in F
    return self.moo # here should be an error
  File ".\test_getattr_redir.py", line 28, in __getattr__
    raise AttributeError("'{}' object has no attribute '{}'".format(type(self).__name__, name))
AttributeError: 'A' object has no attribute 'moo'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ".\test_getattr_redir.py", line 31, in &lt;module&gt;
    print(a.G)
  File ".\test_getattr_redir.py", line 7, in wrapped
    return f(self)
  File ".\test_getattr_redir.py", line 22, in G
    return self.F
  File ".\test_getattr_redir.py", line 9, in wrapped
    raise Exception('AttributeError inside a property getter') from e
Exception: AttributeError inside a property getter
</code></pre>
<p>As an addendum, to make it explicit why Python does what it does, here's an excerpt from <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>[<code>__getattr__</code> is called] when the default attribute access fails with an <code>AttributeError</code> (either <code>__getattribute__()</code> raises an <code>AttributeError</code> because <code>name</code> is not an instance attribute or an attribute in the class tree for <code>self</code>; <strong>or <code>__get__()</code> of a <code>name</code> property raises <code>AttributeError</code></strong>). This method should either return the (computed) attribute value or raise an <code>AttributeError</code> exception.</p>
</blockquote>
<p>(It looks like you know this but I think it's good to have it written out for other people running into the same issue.)</p>
<p>So that means when <code>self.moo</code> raises an <code>AttributeError</code>, it results in <code>A.__getattr__(a, 'F')</code> being called, which results into another <code>AttributeError</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Given the answers above, I have tried the following solution for the case when <code>__getattr__</code> is already defined by the base class <code>P</code> that we cannot change.</p>
<pre><code>class P:
    def __getattr__(self, name):
        print('call of __getattr__ with name =', name)
        if name == 'foo':
            return 0
        raise AttributeError("Cannot recover attribute '{}'".format(name))

class A(P):
    e = None

    @property
    def F(self):
        return self.moo

    @property
    def G(self):
        return self.F

    def __getattr__(self, name):
        raise A.e

    def __getattribute__(self, name):
        try:
            return object.__getattribute__(self, name)
        except AttributeError as e1:
            try:
                return P.__getattr__(self, name)
            except AttributeError as e2:
                A.e = AttributeError(str(e1) + ' -&gt; ' + str(e2))
                raise AttributeError

a = A()
print(a.G)
</code></pre>
<p>It replicates what python does when looking for attributes: the order of calls and semantics are kept. It only changes the final error message to</p>
<p><code>AttributeError: 'A' object has no attribute 'moo' -&gt; Cannot recover attribute 'moo' -&gt; Cannot recover attribute 'F' -&gt; Cannot recover attribute 'G'</code></p>
<p>However, it might be causing more problems in the derived code than it is solving, so I don't know.</p>
</div>
<span class="comment-copy">This is very helpful. Unfortunately it mean that <b>getattr</b> is not usable exactly because it will be called whenever something somewhere raises AttributeError. In my case it is declared like this in the base class. Does it make sense to override it with a new pair of <b>getattr</b> and <b>getattribute</b> in the derived class?</span>
<span class="comment-copy">I think <code>__getattr__</code> should be really called <code>__AttributeError_handler__</code>  and receive the exception along with the name. That would make sense then, not the actual thing.</span>
<span class="comment-copy">@AlexanderShekhovtsov Unfortunately, overriding the base class getattr method will not do it. The method really need <i>not to be defined</i> for the getattr protocol to change. There are reasons for this protocol to be built this way, namely when using a single property with its own dict of instances for a whole class. One way though would be to make sure all attribute errors are handled in the getattribute method.</span>
<span class="comment-copy">Throwing a different kind of exception is <i>not</i> a good idea. It breaks various things that rely on an AttributeError being thrown. For example, <code>hasattr(a, 'F')</code> throws an exception instead of returning a boolean, which should never happen.</span>
