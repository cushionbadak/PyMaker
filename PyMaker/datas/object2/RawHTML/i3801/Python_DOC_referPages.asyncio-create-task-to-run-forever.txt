<div class="post-text" itemprop="text">
<p>I have the following code</p>
<pre><code>import asyncio

loop = asyncio.get_event_loop()

async def while_loop():
    n = 0
    while True:
        print(f"{n}")
        await asyncio.sleep(2)
        n = n+1

async def some_func():
    await asyncio.sleep(5)
    print("Some Func")

future = loop.create_task(while_loop())
loop.run_until_complete(some_func())
</code></pre>
<p>I expected the <code>while_loop</code> function to run forever but it seems to only executes as a result of calling <code>run_until_complete</code> and it stops printing the while loop once <code>some_func</code> is finished executing. The output I see is:</p>
<pre><code>0
1
2
Some Func
</code></pre>
<p>I expected the numbers to keep printing even after <code>some_func</code> is completed.</p>
<pre><code>0
1
2
Some Func
3
4
5
6
.
.
.
</code></pre>
<p>The only way to get more numbers printed is to call <code>some_func</code> again.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I expected the numbers to keep printing even after <code>some_func</code> is completed.</p>
</blockquote>
<p>The argument to <code>run_until_complete</code> controls how long the event loop is run. And once the event loop stops running, <em>all</em> coroutines are effectively suspended, not just the one that you've been waiting for. But you do have different options:</p>
<ul>
<li><p><code>loop.run_until_complete(some_func())</code> - what you already used; run the event loop until the <code>some_func</code> coroutine finishes. Executes other coroutines in parallel during that time as well, but also stops executing them as soon as the event loop finishes.</p></li>
<li><p><a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_forever" rel="nofollow noreferrer"><code>loop.run_forever()</code></a> - run the event loop until some coroutine or callback invokes <code>loop.stop()</code>. If none of them do that, then the event loop will not halt, even if all the coroutines come to an end. In your case you'd call <code>loop.create_task(while_loop())</code> followed by <code>loop.create_task(some_func())</code> and then <code>loop.run_forever()</code>.</p></li>
<li><p><code>loop.run_until_complete(asyncio.gather(while_loop(), some_func()))</code> run the event loop until <em>both</em> the specified coroutines finish. This (wait for <em>all</em> the tasks) is apparently what you expected <code>loop.run_until_complete()</code> to do automatically even if you name only one, except it doesn't work like that, it stops as soon as the specified coroutine finishes. <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.gather" rel="nofollow noreferrer"><code>asyncio.gather</code></a> can be used to wait for multiple coroutines at once. For a more fine-tuned control of waiting, also see <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.wait" rel="nofollow noreferrer"><code>asyncio.wait</code></a>.</p></li>
</ul>
<p>Since one of your coroutines runs forever, the last two options will be equivalent and will result in the expected output.</p>
</div>
<span class="comment-copy">Now, if I wanted to run <code>some_func</code> (and other functions) later at some random time then would it be best to run a new loop in a separate thread? Otherwise, <code>run_forever</code> is blocking the main thread loop.</span>
<span class="comment-copy">@slaw Consider that coroutines can start other coroutines. Thus the fact you've invoked <code>run_forever</code> doesn't mean that the whole program is stuck or that you can't add new things for the event loop to do. A typical asyncio program is structured around the event loop which services the whole application. The whole thing with the event loop in a background thread is only needed if you need to introduce asyncio into a legacy code base (which the question doesn't indicate).</span>
<span class="comment-copy">Hmm, I wonder if I am seeing strange behavior as I am testing my code inside of a Jupyter notebook. loop.run_forever() blocks indefinitely the moment I execute it after loop.get_event_loop(). I expected to execute loop.run_forever() and then be able to create tasks afterward that get added to the loop. Is this the wrong way to think about it? Essentially, I am exploring data retrieved from a RESTful API but I donâ€™t know apriori how that data is laid out. So I hit 1,000 urls to collect the data, then analyze it to know where other endpoints I might want to grab next.</span>
<span class="comment-copy">@slaw Keep in mind that asyncio is not threaded - you cannot at the same time finish with <code>run_until_complete()</code> and have the numbers keep printing. asyncio is designed for the whole program to run within the event loop. So if you are exploring data retrieved using REST, then write a coroutine that retrieves the data and analyzes it (by spawning other coroutines if needed). This coroutine can consist of a simple <code>while True</code> loop, or it can contain arbitrarily complex logic. Start the coroutine using <code>loop.create_task()</code>, run <code>loop.run_forever()</code>, and let it do the rest.</span>
<span class="comment-copy">Finally a clear explanation of how to go about adding tasks to the loop after <code>run_until_complete()</code> blocks the main thread.</span>
