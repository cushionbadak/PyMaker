<div class="post-text" itemprop="text">
<p>Guys I'm working on a program and came across a problem! I've had a bit of a search for a solution but I couldn't get any of them to work. Here is my code</p>
<pre><code>myList=[]
myList.append(['James', 'Herbert', 23])
myList.append(['John', 'Doe', 10])
myList.append(['Phillip', 'Andrews', 45])
</code></pre>
<p>And I want to be able to print the list out all as strings, However keeping the Integers at the end of the entrys as Integers in the list so that I can use them later in the code. This is how I would like the code to look</p>
<pre><code>James     Herbert    23
John      Doe        10
Phillip   Andrews    45
</code></pre>
<p>Or something along those lines. I have tried a few different methods but couldn't get anything to work that successfully, I'm relatively ne to Python and still trying to learn so if you could give me a brief explanation it would be really beneficial to me :)</p>
<p>Your input is much appreciated!!!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for (first, last, age) in myList:
  print("%10s %10s %d" % (first, last, age))
</code></pre>
<p><code>myList</code> is a list of lists. First we iterate over it using <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">sequence unpacking</a> to unpack the 3 elements. We then format the elements and print them - I use <a href="https://docs.python.org/3/library/stdtypes.html#old-string-formatting" rel="nofollow noreferrer">printf-style formatting</a> here, but the newer <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format</a> formatting is also available. (<a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow noreferrer">Some background</a> on the difference between the two)</p>
</div>
<span class="comment-copy">It's not super clear what you mean here: "<i>I want to be able to print the list out all as strings, However keeping the Integers at the end of the entrys as Integers in the list</i>".  Hopefully your mechanism for printing doesn't involve modifying the original list?</span>
<span class="comment-copy">Why not consider the use of a <code>class</code> or a <code>tuple</code> to store your data? Rather than a <code>list</code> within a <code>list</code>.</span>
<span class="comment-copy">@Sveta I don't know, although I'd probably prefer a list of tuples (<code>[("James", "Herbert", 23), ... ]</code>) I don't think I'd do anything different. Looks like a table of records, which is properly modeled by a list of some record object. Using a tuple seems more idiomatic, but either should work.</span>
<span class="comment-copy">@AdamSmith -  Fair enough. I only suggested a <code>tuple</code> or <code>class</code> because in the question he wants to keep the integers as integers, a <code>tuple</code> or <code>class</code> will allow that. The way it's set up now, if you forget and place quotes around the integer, nothing will warn until you use that integer for calculations, at least with a class you can have error checking when you create an object.</span>
<span class="comment-copy">Given that these pieces of data are used later, and are the reason for keeping the different types, I would have used a sequence  or list of <code>namedtuple</code>s to preserve each field's name - readability ftw</span>
<span class="comment-copy">string interpolation with <code>%</code> is discouraged. Prefer <code>str.format</code> <code>print("{:&gt;10} {:&gt;10} {}".format(first, last, age))</code></span>
<span class="comment-copy">or indeed in Python3.4+ you can use f-strings. <code>print(f"{first:&gt;10} {last:&gt;10} {age}")</code></span>
<span class="comment-copy">Fair points @AdamSmith - add an answer and you'll get my upvote :)</span>
