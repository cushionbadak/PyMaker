<div class="post-text" itemprop="text">
<p>I'm building a module, but I'm having some hard times understanding which is the best-practice to avoid workspace pollution.</p>
<h1>Example code</h1>
<p>My module is:</p>
<pre><code>aModule\
    __init__.py
    aSubModule.py
    someFunctions.py
</code></pre>
<p>The contents of the files are:</p>
<p><strong>init</strong>.py</p>
<pre><code>from .someFunctions import function1, function2
from aModule import aSubModule
</code></pre>
<p>someFunctions.py</p>
<pre><code>from numpy import exp,log,sqrt

def function1():
    print('function1: Hello World!')

def function2():
    print('function2: Hello ' + aUtilityFunction())

def aUtilityFunction(): #This should not be imported
    return 'World!'
</code></pre>
<p>aSubModule.py</p>
<pre><code>from numpy import exp,log,sqrt

def function3():
    print('I am function 3')

def function4():
    print('I am function 4')
</code></pre>
<h1>The problem</h1>
<p>When doing</p>
<pre><code>import aModule
</code></pre>
<p>I would like to be able to access</p>
<pre><code>aModule.function1()
aModule.function2()
aModule.aSubModule.function3()
aModule.aSubModule.function4()
</code></pre>
<p>However I have also the following unwanted behaviour:</p>
<h2>Problem 1</h2>
<p>The file <em>someFunctions.py</em> is imported as a submodule. In other words, I can access function1 both from aModule.function1 and from aModule.someFunctions.function1 . This is, in my opinion, messy.
The only solution I found to this is to rename the file _someFunctions.py . The leading underscore is now telling Python not to import it. This looks fine, but I'm not sure if this is considered good practice.</p>
<h2>Problem 2</h2>
<p>The functions exp, log and sqrt are imported under aModule.aSubModule. I would like to access the functions inside <em>aSubModule</em> doing </p>
<pre><code>aModule.aSubModule.function3()
</code></pre>
<p>but I would like to avoid having exp, log and sqrt inside aModule.aSubModule</p>
<p>This is because inside the "real" sub module i'm working to, I have just 3-4 functions that are relevant to the user, but more than 10-15 imports. Therefore when I try to tab-complete</p>
<pre><code>aModule.aSubModule.&lt;tab&gt;
</code></pre>
<p>about 20 entries pop-up, of which just 3-4 are relevant.</p>
</div>
<div class="post-text" itemprop="text">
<p>I could not find a nice way, but hacks are possible. The trick is that any identifier starting with an underscore will not be used by the help system not for <em>tab</em> autocompletion, even if it is a module identifier. So to avoid automatic access to unnecessary identifier, you can have packages containing <em>private</em> modules</p>
<pre><code>aModule\
    __init__.py
    _someFunctions.py
    aSubModule\
        __init__.py
        _aSubModule.py
</code></pre>
<p>Content of <code>aModule __init__.py</code>:</p>
<pre><code>from ._subFunctions import f1, f2
from . import aSubModule
</code></pre>
<p>Content of <code>aSubModule __init__.py</code>:</p>
<pre><code>from ._aSubModule import f3, f4
</code></pre>
<p>I must admit it is rather hacky and not very Pythonic. Maybe a custom importer would lead to cleaner code, but I could not find my way through the <code>importlib</code> module.</p>
<p>My conclusion is that the Pythonic way is probably not to try to hide names imported through a module, but just import in the current namespace the names you need.</p>
</div>
<span class="comment-copy">You can prefix a function with a underscore (<code>_</code>) to hide it from help and autocompletion. Isn't it enough?</span>
<span class="comment-copy">so I should import numpy as _np, pandas as _pd and name my files _someFunction ?  I think this could work, but I tried to open some modules made by others to see how they did it and never saw this technique. Is this good-practice?</span>
<span class="comment-copy">Unsure of it, but I think that what you want is the <code>from module import *</code> syntax that imports only the symbols explicitely listed in the <code>__all__</code> special variable of the module. More detail in <a href="https://docs.python.org/3/tutorial/modules.html?highlight=__all__#importing-from-a-package" rel="nofollow noreferrer">official doc.</a></span>
<span class="comment-copy">Unfortunately the <code>__all__</code> special variable does not affect the behaviours described in my post. I don't want to use the <code>import *</code> syntax, but just avoid importing sub modules when importing the parent</span>
