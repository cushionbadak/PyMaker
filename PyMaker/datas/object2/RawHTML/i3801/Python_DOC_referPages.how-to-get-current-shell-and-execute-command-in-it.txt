<div class="post-text" itemprop="text">
<p>I have a virtualenv named <code>'venv'</code> and it is activate:</p>
<pre><code>(venv)&gt;
</code></pre>
<p>and I wrote codes that I'll run it in the virtualenv (<code>main.py</code>):</p>
<pre><code>import subprocess
result = subprocess.run('python other.py', stdout=subprocess.PIPE)
</code></pre>
<p>but when I run <code>main.py</code> file:</p>
<pre><code>(venv)&gt; python main.py
</code></pre>
<p><code>subprocess</code> does not execute the command (<code>python other.py</code>) in the virtualenv i.e <code>venv</code></p>
<p>How to run <code>subprocess</code> command in the current virtualenv session?</p>
</div>
<div class="post-text" itemprop="text">
<h3>A child process can't run commands in its parent process without that process's involvement.</h3>
<p>This is why <code>ssh-agent</code> requires usage as <code>eval "$(ssh-agent -s)"</code> to invoke the shell commands it emits on output, for example. Thus, the literal thing you're asking for here is impossible.</p>
<p>Fortunately, it's also unnecessary.</p>
<hr/>
<h3>virtualenvs use environment variables inherited by child processes.</h3>
<p>This means that you don't actually need to use the same shell that has a virtualenv activated to start a new Python interpreter intended to use the interpreter/libraries/etc. from that virtualenv.</p>
<hr/>
<h3><code>subprocess.run</code> must be passed a <strong>list</strong>, or <code>shell=True</code> must be used.</h3>
<p>Either do this (which is better!)</p>
<pre><code>import subprocess
result = subprocess.run(['python', 'other.py'], stdout=subprocess.PIPE)
</code></pre>
<p>Or this (which is worse!)</p>
<pre><code>import subprocess
result = subprocess.run('python other.py', stdout=subprocess.PIPE, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run a script with the same Python executable being used to run the current script, don't use <code>python</code> and rely on the path being set up properly, just use <a href="https://docs.python.org/3/library/sys.html#sys.executable" rel="nofollow noreferrer"><code>sys.executable</code></a>:</p>
<blockquote>
<p>A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.</p>
</blockquote>
<p>This works if you executed the script with <code>python myscript.py</code> relying on the active virtualenv's PATH. It also works if you executed the script with <code>/usr/local/bin/python3.6</code> to ignore the PATH and test your script with a specific interpreter. Or if you executed the script with <code>myscript.py</code>, relying on a shbang line created at installation time by <code>setuptools</code>. Or if the script was run as a CGI depending on your Apache configuration. Or if you <code>sudo</code>d the executable, or did something else that scraped down your environment. Or almost anything else imaginable.<sup>1</sup></p>
<p>As explained in <a href="https://stackoverflow.com/a/50631835/908494">Charles Duffy's answer</a>, you still need to use a list of arguments instead of a string (or use <code>shell=True</code>, but you rarely want to do that). So:</p>
<pre><code>result = subprocess.run([sys.executable, 'other.py'], stdout=subprocess.PIPE)
</code></pre>
<hr/>
<p><sub>1. Well, not quite… Examples of where it <em>doesn't</em> work include custom C programs that embed a CPython interpreter, some smartphone mini-Python environments, old-school Amiga Python, … The one most likely to affect you—and it's a pretty big stretch—is that on some *nix platforms, if you write a program that <code>exec</code>s Python by passing incompatible names for the process and arg0, <code>sys.executable</code> can end up wrong.</sub></p>
</div>
<span class="comment-copy">tried: <code>subprocess.run(['python','other.py'], stdout=subprocess.PIPE)</code> ?</span>
<span class="comment-copy">You <b>can't</b> invoke something in the "current" shell, if by that you mean the one that started your program. It's the parent process. Any creation of a new program is always generating a subprocess; you can't modify the parent process without its active involvement in allowing you to do so.</span>
<span class="comment-copy">That said, your <code>subprocess.run</code> code is broken as-given unless you make it <code>subprocess.run(['python', 'other.py'])</code> or use <code>shell=True</code> (which you shouldn't): As given in the question, it's looking for a program called <code>python other.py</code>, with a space in its filename, not looking for a program called <code>python</code> and passing it an <code>other.py</code> argument.</span>
<span class="comment-copy">@hadi, ...you really, <b>really</b> shouldn't use <code>shell=True</code>. Easy to get security bugs if you're passing arguments to a program started that way, unless being very careful.</span>
<span class="comment-copy">See the warning in the Python docs at <a href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">docs.python.org/2/library/…</a></span>
<span class="comment-copy">why <code>shell=True</code> is worse?</span>
<span class="comment-copy">because you can inject malicious code</span>
<span class="comment-copy">i got it thank you</span>
<span class="comment-copy">While this does work, <code>sys.executable</code> is usually a better answer.</span>
