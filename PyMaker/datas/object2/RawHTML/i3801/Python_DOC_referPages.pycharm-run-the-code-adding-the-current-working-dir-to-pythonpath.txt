<div class="post-text" itemprop="text">
<p>Trying to figure this out, because there is an inconsistency between when I run the code from Pycharm and from terminal.</p>
<p>Pycharm add automatically the current working directory; so if I add a module that is contained in my CWD, that is not in Pythonpath, it works just fine.</p>
<p>But when running from terminal, Python does complain, because my import statements refer to modules that are not reachable, because the CWD is not added to PYTHONPATH (I did verify this printing out the content of the variable, while running from Pycharm and from Terminal).</p>
<p>So at this point I am assuming that in my startup code, I need to add to Pythonpath the current directory, or this is not correct? I have no way to tell where the final user may put my code in; I just assume that the whole directory containing all my different modules, is located in a specific place.</p>
<p>To be more specific, this is where I am at:</p>
<ul>
<li><p>my CWD when I run from Pycharm is <code>/apps/myapp/logic/</code>, I run the script after <code>cd</code> in that directory, and I call the script with <code>./myscript.py</code></p></li>
<li><p>The script has the <code>#!/usr/bin/python3</code> line as first line, instead of running it with <code>python3 -m myscript.py</code></p></li>
<li>The error I get, is when loading a module that is either in the same directory of my script (<code>/apps/myapp/logic/</code>) or one level above (<code>/apps/myapp/</code>); sadly the module load happen before my <code>__main__</code> is running; so I can't add to <code>sys.path</code> the current directory from which the script run. </li>
<li>All these issues are not happening if I just run the script from Pycharm</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>After various trial and error, and thanks to the info that I did get from the comments; I did find 2 ways to solve the issue.</p>
<p>1) Create a shell script or another python script, which is adding the current directory (where all the files lives), and have no import in this file. Then the script call the script that has the main function.</p>
<p>2) On the top of the module, right after import <code>sys</code>, add the statement to add the path, in this way the current directory will be added to the PATH and it will be accessible, when the import try to access the module.</p>
<p>Neither look very nice, but this is all that I was able to find, to solve the issue. Pretty sure there is a more elegant way to do so</p>
</div>
<span class="comment-copy">Are you sure the issue is the current working directory not being added, as opposed to the current working directory being different (e.g., being the same as the directory your script is in for one case but not the other, or being <code>.</code> for one but an absolute path for the other)?</span>
<span class="comment-copy">Anyway, as <a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow noreferrer">the docs</a> explain. <code>sys.path[0]</code> should always be the path to your script's directory if available, <code>''</code> (which is treated the same as <code>'.'</code>) if not. However, <code>''</code> or <code>'.'</code> or something else could be added by a custom <code>PYTHONPATH</code>, <code>site</code>, orâ€¦</span>
<span class="comment-copy">Finally, the usual ways to solve this problem are (a) use <code>setuptools</code> to install your modules into site-packages, (b) use <code>setuptools</code> to install your modules (usually into site-packages) and auto-create an "entry-point" script that finds them wherever they were installed, (c) find the modules based on relative path from the script's own path, or (d) have some configuration to point to the path (usually only used for plugin directories and the like). Finding them off the current working directory is a weird thing to do. Why do you want that in the first place?</span>
<span class="comment-copy">Thanks for your comments. I did triple check and I get a "module not found" because when I run the code from terminal, it does not have the CWD in PYTHONPATH; while in Pycharm, it does run fine and the CWD is in the PYTHONPATH variable. I do run the code mostly from Pycharm, but now I need to deploy it and I did experience the issue</span>
<span class="comment-copy">I am using <code>os.path.dirname(__file__)</code> to get the path of the script that I am running, and as such, I can go to the root of my project easily. Would that be enough to be added to PYTHONPATH, or there is something else that I should do? I did notice no difference (the script fail anyway when running from terminal), if I add the CWD to sys.path with sys,path.insert()</span>
