<div class="post-text" itemprop="text">
<p>I have a module; say it's structured as:</p>
<pre><code>algorithms
 ├─ __init__.py
 └─ algorithm.py
</code></pre>
<p>Inside my algorithm module, I have some global vars, and I would like to create a convenience initializer that sets them up. I would like to use the same names for the initializer's parameters as for the vars, but that leads to a conflict of local and global names. The cleanest way I can think of to implement this is:</p>
<pre><code>lower = None
upper = None

def init_range(lower, upper):
   _lower = lower
   global lower
   lower = _lower

   _upper = upper
   global upper
   upper = _upper
</code></pre>
<p>If this were a class, (I think) I could do something like <code>self.lower = lower</code>. Is there a less verbose way to do what I'm doing for module-global vars? Something like <code>algorithm.lower = lower</code>?</p>
<p>EDIT: Turns out my solution doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a> function to get the dictionary representing the global scope, and <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>update</code></a> it:</p>
<pre><code>def init_range(lower, upper):
   globals().update(lower=lower, upper=upper)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really insist on keeping the parameter names <code>lower</code> and <code>upper</code> (why not just <code>new_lower</code>, <code>new_upper</code> or something like that?) then you could delegate the task to an inner function with alternative variable names.</p>
<pre><code>def init_range(lower, upper):
    def _init_range(_lower, _upper):
        global lower
        global upper
        lower = _lower
        upper = _upper

    _init_range(lower, upper)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; lower is None, upper is None
(True, True)
&gt;&gt;&gt; init_range(lower=1, upper=2)
&gt;&gt;&gt; lower, upper
(1, 2)
</code></pre>
</div>
<span class="comment-copy">You don't want to hear this, but your solution doesn't work and the correct solution is to avoid globals.</span>
<span class="comment-copy">You're correct, it doesn't work :( but in my case, I already use globals everywhere (this is a very minimal example), and there's no time to change that.</span>
<span class="comment-copy">I think this answer is better than mine, because <a href="https://stackoverflow.com/questions/5958793/is-it-safe-to-modify-the-output-of-globals">this</a>, which readers should be aware of.</span>
