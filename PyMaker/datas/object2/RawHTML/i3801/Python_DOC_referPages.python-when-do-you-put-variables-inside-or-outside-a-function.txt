<div class="post-text" itemprop="text">
<p>Check out this code in my interpreter:</p>
<pre><code>$ python3
Python 3.6.5 (default, Apr  1 2018, 05:46:30) 
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&lt;&lt;&lt; first_list = [1,2,3,4,5,6]
&lt;&lt;&lt; second_list = [101,202,303,404]
&lt;&lt;&lt; first_list.reverse()
&lt;&lt;&lt; print(first_list)
[6, 5, 4, 3, 2, 1]
&lt;&lt;&lt; reverse(second_list)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'reverse' is not defined
&lt;&lt;&lt;
</code></pre>
<p>In the first line and second lines, I define two lists.  Then I proceed to reverse the order of the  first_list and second_list in two different ways.  The first reversal succeeds whereas the second way is rejected.</p>
<p>Putting the variable inside the reverse function as a parameter is how I initially would naturally use it if I were to write a script (which evidently would be rejected by the Python interpreter).  </p>
<p>The instructor in the Udemy course I am taking suggests putting the variable in front of the function separated by a dot.  I understand that the computer dictates what works and what doesnâ€™t. I just want to know why since my (faulty) approach comes so much more naturally.</p>
<p>How come variables sometimes have to go in front of the function when other times it can go inside a function as a parameter?  </p>
<p>I suppose the much more important question I now have is this: When I am manipulating variables, how do I know when to put variables outside vs inside?</p>
<p>Thanks for your attention.</p>
</div>
<div class="post-text" itemprop="text">
<p>This occurs because the <code>reverse()</code> function is created as an <code>attribute</code> of the <code>first_list</code> object. Thus, <code>reverse()</code> is not a function you can call and provide <code>first_list</code> as an argument.</p>
<p>It's important to know that everything in Python is an object, and every object has attributes.</p>
<p>For example, if I create a list in the python interpreter, <code>new_list = [1, 2, 3]</code>, and then do <code>dir(new_list)</code> (this shows the attributes of <code>new_list</code>), I get the following:</p>
<pre><code>&gt;&gt;&gt; new_list = [1, 2, 3]
&gt;&gt;&gt; dir(new_list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', 
'__delslice__', '__doc__', '__eq__', '__format__', '__ge__', 
'__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', 
'__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', 
'__lt__', '__mul__',
'__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', 
'__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', 
'__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 
'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</code></pre>
<p>And therein lies the <code>reverse</code> function for the object <code>list</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>reverse is a method of the list data type, python is looking for a definition of reverse when you call it without the dot notation.  If you had in your source code somewhere def reverse()... it would use that, or if you had imported a library that defined reverse.  The first list works because first_list is a object that has a method called reverse.</p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">python3 documentation</a></p>
</div>
<span class="comment-copy">This question might help <a href="https://stackoverflow.com/q/20981789/831878">stackoverflow.com/q/20981789/831878</a></span>
<span class="comment-copy">Do you want <code>list(reversed(second_list))</code>?</span>
<span class="comment-copy"><code>reversed</code> is the built in function that takes an argument. the <code>reverse</code> method of the list object takes no arguments and reverses the list its bound to. You just need to use <code>reversed(second_list)</code> for that last case</span>
