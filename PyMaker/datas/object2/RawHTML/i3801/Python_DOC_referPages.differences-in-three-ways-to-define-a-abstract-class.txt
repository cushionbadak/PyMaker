<div class="post-text" itemprop="text">
<p>I found multiple (slightly different) ways to define abstract classes in Python. I read the documentation and also could not find an answer here on stackoverflow. </p>
<p>The main difference between the three examples (see code below) is:</p>
<ul>
<li><code>A</code> sets a new metaclass <code>abc.ABCMeta</code> explicitly</li>
<li><code>B</code> inherits from <code>abc.ABC</code></li>
<li><code>C</code> inherits from <code>objects</code> but defines <code>@abc.abstractmethod</code> classes</li>
</ul>
<p>It seems that <code>A</code> and <code>B</code> are not different (i.e. also <code>B</code> has the new metaclass <code>abc.ABCMeta</code>). However, class <code>C</code> remains of type <code>type</code>. </p>
<p>What are the impacts of not defining a metaclass for <code>C</code>? When is it necessary to define the metaclass or is it wrong/bad style to not define the <code>abc.ABCMeta</code> metaclass for an abstract class? Nonetheless, the class <code>C</code> seems to behave as I expect from an ABC.</p>
<pre><code>import abc

class A(metaclass=abc.ABCMeta):
    # Alternatively put __metaclass__ = abc.ABCMeta here
    @abc.abstractmethod
    def foo(self):
        raise NotImplementedError


class B(abc.ABC):

    @abc.abstractmethod
    def foo(self):
        raise NotImplementedError


class C(object):

    @abc.abstractmethod
    def foo(self):
        raise NotImplementedError


class Aimpl(A):

    def foo(self):
        print("Aimpl")


class Bimpl(B):
    def foo(self):
        print("Bimpl")


class Cimpl(C):
    #def foo(self):
     #   print("Cimpl")
     pass

Aimpl().foo()                           # Aimpl
print(isinstance(Aimpl, A))             # False
print(issubclass(Aimpl, A))             # True
print(isinstance(Aimpl, abc.ABCMeta))   # True
print(type(A))                          # &lt;class 'abc.ABCMeta'&gt;
print("---")

Bimpl().foo()                           # Bimpl
print(isinstance(Bimpl, B))             # False
print(issubclass(Bimpl, B))             # True
print(isinstance(Bimpl, abc.ABCMeta))   # True
print(type(B))                          # &lt;class 'abc.ABCMeta'&gt;
print("---")

Cimpl().foo()                           # Cimpl
print(isinstance(Cimpl, C))             # False
print(issubclass(Cimpl, C))             # True
print(isinstance(Cimpl, abc.ABCMeta))   # False
print(type(C))                          # &lt;class 'type'&gt;
print("---")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>abc.ABCMeta</code> class is necessary to actually enforce the <code>abstractmethod</code> behaviour. Its itention is to disallow instantiation of any classes which do not implement the abstract method. The decorator itself cannot enforce that, the metaclass is enforcing the decorator upon instantiation:</p>
<pre><code>class Foo:
    @abstractmethod
    def bar(self):
        pass

Foo()  # works
</code></pre>
<p>However: </p>
<pre><code>class Foo(metaclass=ABCMeta):
    @abstractmethod
    def bar(self):
        pass

Foo()
</code></pre>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class Foo with abstract methods bar
</code></pre>
<p>So, without the metaclass, the <code>abstractmethod</code> decorator doesn't do anything.</p>
<p><code>abc.ABC</code> is merely a shorthand so you can do <code>Foo(ABC)</code> instead of <code>Foo(metaclass=ABCMeta)</code>, that is all:</p>
<blockquote>
<p>A helper class that has <code>ABCMeta</code> as its metaclass. With this class,
  an abstract base class can be created by simply deriving from <code>ABC</code>
  avoiding sometimes confusing metaclass usage [..]</p>
<p><sup><a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer">https://docs.python.org/3/library/abc.html#abc.ABC</a></sup></p>
</blockquote>
</div>
<span class="comment-copy"><i>"Nonetheless, the class C seems to behave as I expect from an ABC."</i> â€“ Meaning what exactly? What do you expect and how does it behave?</span>
