<div class="post-text" itemprop="text">
<p>I'm trying to call variable from external file. And for that I wrote this code,</p>
<pre><code>count = 1
while (count &lt;= 3):
   # I want to iterate this line
   # rand_gen is the python file
   # A is the varialbe in rand_gen.py
   # Having this expression A = np.random.randint(1, 100)
   from rand_gen import A

   print('Random number is ' + str(A))
   count = count + 1
</code></pre>
<p>But when I run my code it only calls varible <code>A</code> once and prints the same result. See the output of code,</p>
<pre><code>Random number is 48
Random number is 48
Random number is 48
</code></pre>
<p>How can I call variable <code>A</code> from file <code>rand_gen.py</code> with updated value, every time it goes into loop? Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not how <code>import</code> works in python. Once imported, <code>module</code> in cached in <code>sys.modules</code> as <code>key</code>, <code>value</code> pair of module name and module object. When you try to import the same <code>module</code> again, you simply get the already cached value back. But <code>sys.modules</code> is writable and deleting <code>the</code> key will, cause <code>python</code> to check for module and load again.</p>
<p>Though Olivier's answer is the right way to approach this, for your understanding of <code>import</code>, you can try this:</p>
<pre><code>import sys       # Import sys module

count = 1
while (count &lt;= 3):
   # I want to iterate this line
   # rand_gen is the python file
   # A is the varialbe in rand_gen.py
   # Having this expression A = np.random.randint(1, 100)
   if 'rand_gen' in sys.modules:   # Check if "rand_gen" is cached
       sys.modules.pop('my_rand')  # If yes, remove it
   from my_rand import A           # Import now

   print('Random number is ' + str(A))
   count = count + 1
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Random number is 6754
Random number is 963
Random number is 8825
</code></pre>
<p>Would recommend to read official Python docs on <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">The import system</a> and <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">The module cache</a>, for thorough understanding.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you assign a random value to a variable, referencing that variable does not make the value change regardless of how the value was obtained.</p>
<pre><code>a = np.random.randint(1, 100)

a # 12
# Wait a little
a # still 12
</code></pre>
<p>In the same way, when you imported your module, the module code was execute and a value was assigned to <code>A</code>. Unless the module is reloaded with <code>importlib.reload</code> or you call <code>np.random.randint</code> again, there is no reason for <code>A</code> to change value.</p>
<p>What you might want is to make <code>A</code> a function that returns a random value in the desired range.</p>
<pre><code># In the rand_gen module
def A():
    return np.random.randint(1, 100)
</code></pre>
</div>
<span class="comment-copy">Reading the value <code>A</code> doesn't change the value, it was assigned the first time you loaded the module. Why aren't you just calling <code>np.random.randint(1, 100)</code>. You can force it but it is very unintuitive, e.g. <code>import importlib; importlib.reload(rand_gen)</code></span>
<span class="comment-copy">Alternatively, make <code>A</code> a function and call it, e.g. <code>def A(): return np.random.randint(1, 100)</code> then <code>str(A())</code> will give you a different value each time.</span>
<span class="comment-copy">Thank you @akshat this is what I want. Because my actual code is different and this method works for that. Thank you again.</span>
<span class="comment-copy">glad to be of help :)</span>
