<div class="post-text" itemprop="text">
<p>Is there a way to measure time with high-precision in Python --- more precise than one second?  I doubt that there is a cross-platform way of doing that; I'm interesting in high precision time on Unix, particularly Solaris running on a Sun SPARC machine.</p>
<p><a href="http://docs.python.org/library/timeit.html" rel="noreferrer">timeit</a> seems to be capable of high-precision time measurement, but rather than measure how long a code snippet takes, I'd like to directly access the time values. </p>
</div>
<div class="post-text" itemprop="text">
<p>The standard <code>time.time()</code> function provides sub-second precision, though that precision varies by platform. For Linux and Mac precision is <code>+-</code> 1 microsecond or 0.001 milliseconds. Python on Windows uses <code>+-</code> 16 milliseconds precision due to clock implementation problems due to process interrupts. The <code>timeit</code> module can provide higher resolution if you're measuring execution time.</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()        #return seconds from epoch
1261367718.971009      
</code></pre>
<p>Python 3.7 introduces new functions to the <code>time</code> module that provide higher resolution:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time_ns()
1530228533161016309
&gt;&gt;&gt; time.time_ns() / (10 ** 9) # convert to floating-point seconds
1530228544.0792289
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python tries hard to use the most precise time function for your platform to implement <code>time.time()</code>: </p>
<pre><code>/* Implement floattime() for various platforms */

static double
floattime(void)
{
    /* There are three ways to get the time:
      (1) gettimeofday() -- resolution in microseconds
      (2) ftime() -- resolution in milliseconds
      (3) time() -- resolution in seconds
      In all cases the return value is a float in seconds.
      Since on some systems (e.g. SCO ODT 3.0) gettimeofday() may
      fail, so we fall back on ftime() or time().
      Note: clock resolution does not imply clock accuracy! */
#ifdef HAVE_GETTIMEOFDAY
    {
        struct timeval t;
#ifdef GETTIMEOFDAY_NO_TZ
        if (gettimeofday(&amp;t) == 0)
            return (double)t.tv_sec + t.tv_usec*0.000001;
#else /* !GETTIMEOFDAY_NO_TZ */
        if (gettimeofday(&amp;t, (struct timezone *)NULL) == 0)
            return (double)t.tv_sec + t.tv_usec*0.000001;
#endif /* !GETTIMEOFDAY_NO_TZ */
    }

#endif /* !HAVE_GETTIMEOFDAY */
    {
#if defined(HAVE_FTIME)
        struct timeb t;
        ftime(&amp;t);
        return (double)t.time + (double)t.millitm * (double)0.001;
#else /* !HAVE_FTIME */
        time_t secs;
        time(&amp;secs);
        return (double)secs;
#endif /* !HAVE_FTIME */
    }
}
</code></pre>
<p>( from <a href="http://svn.python.org/view/python/trunk/Modules/timemodule.c?revision=81756&amp;view=markup" rel="noreferrer">http://svn.python.org/view/python/trunk/Modules/timemodule.c?revision=81756&amp;view=markup</a> )</p>
</div>
<div class="post-text" itemprop="text">
<p>David's post was attempting to show what the clock resolution is on Windows. I was confused by his output, so I wrote some code that shows that <code>time.time()</code> on my Windows 8 x64 laptop has a resolution of 1 msec:</p>
<pre><code># measure the smallest time delta by spinning until the time changes
def measure():
    t0 = time.time()
    t1 = t0
    while t1 == t0:
        t1 = time.time()
    return (t0, t1, t1-t0)

samples = [measure() for i in range(10)]

for s in samples:
    print s
</code></pre>
<p>Which outputs:</p>
<pre><code>(1390455900.085, 1390455900.086, 0.0009999275207519531)
(1390455900.086, 1390455900.087, 0.0009999275207519531)
(1390455900.087, 1390455900.088, 0.0010001659393310547)
(1390455900.088, 1390455900.089, 0.0009999275207519531)
(1390455900.089, 1390455900.09, 0.0009999275207519531)
(1390455900.09, 1390455900.091, 0.0010001659393310547)
(1390455900.091, 1390455900.092, 0.0009999275207519531)
(1390455900.092, 1390455900.093, 0.0009999275207519531)
(1390455900.093, 1390455900.094, 0.0010001659393310547)
(1390455900.094, 1390455900.095, 0.0009999275207519531)
</code></pre>
<p>And a way to do a 1000 sample average of the delta:</p>
<pre><code>reduce( lambda a,b:a+b, [measure()[2] for i in range(1000)], 0.0) / 1000.0
</code></pre>
<p>Which output on two consecutive runs:</p>
<pre><code>0.001
0.0010009999275207519
</code></pre>
<p>So <code>time.time()</code> on my Windows 8 x64 has a resolution of 1 msec.</p>
<p>A similar run on <code>time.clock()</code> returns a resolution of 0.4 microseconds: </p>
<pre><code>def measure_clock():
    t0 = time.clock()
    t1 = time.clock()
    while t1 == t0:
        t1 = time.clock()
    return (t0, t1, t1-t0)

reduce( lambda a,b:a+b, [measure_clock()[2] for i in range(1000000)] )/1000000.0
</code></pre>
<p>Returns:</p>
<pre><code>4.3571334791658954e-07
</code></pre>
<p>Which is ~<code>0.4e-06</code></p>
<p>An interesting thing about <code>time.clock()</code> is that it returns the time since the method was first called, so if you wanted microsecond resolution wall time you could do something like this:</p>
<pre><code>class HighPrecisionWallTime():
    def __init__(self,):
        self._wall_time_0 = time.time()
        self._clock_0 = time.clock()

    def sample(self,):
        dc = time.clock()-self._clock_0
        return self._wall_time_0 + dc
</code></pre>
<p>(which would probably drift after a while, but you could correct this occasionally, for example <code>dc &gt; 3600</code> would correct it every hour)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use time.clock() It counts the time used by the process on Unix and time since the first call to it on Windows. It's more precise than time.time().</p>
<p>It's the usually used function to measure performance.</p>
<p>Just call </p>
<pre><code>import time
t_ = time.clock()
#Your code here
print 'Time in function', time.clock() - t_
</code></pre>
<p>EDITED: Ups, I miss the question as you want to know exactly the time, not the time spent... </p>
</div>
<div class="post-text" itemprop="text">
<p>If Python 3 is an option, you have two choices:</p>
<ul>
<li><a href="https://docs.python.org/3.5/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter</code></a> which always use the most accurate clock on your platform. It does include time spent outside of the process.</li>
<li><a href="https://docs.python.org/3.5/library/time.html#time.process_time" rel="noreferrer"><code>time.process_time</code></a> which returns the CPU time. It does <strong>NOT</strong> include time spent outside of the process.</li>
</ul>
<p>The difference between the two can be shown with:</p>
<pre><code>from time import (
    process_time,
    perf_counter,
    sleep,
)

print(process_time())
sleep(1)
print(process_time())

print(perf_counter())
sleep(1)
print(perf_counter())
</code></pre>
<p>Which outputs:</p>
<pre><code>0.03125
0.03125
2.560001310720671e-07
1.0005455362793145
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>time.clock()</code> has 13 decimal points on Windows but only two on Linux.
<code>time.time()</code> has 17 decimals on Linux and 16 on Windows but the actual precision is different.</p>
<p>I don't agree with the documentation that <a href="https://docs.python.org/library/time.html#time.clock" rel="nofollow noreferrer"><code>time.clock()</code></a> should be used for benchmarking on Unix/Linux. It is not precise enough, so what timer to use depends on operating system.</p>
<p>On Linux, the time resolution is high in <code>time.time()</code>:</p>
<pre><code>&gt;&gt;&gt; time.time(), time.time()
(1281384913.4374139, 1281384913.4374161)
</code></pre>
<p>On Windows, however the time function seems to use the last called number:</p>
<pre><code>&gt;&gt;&gt; time.time()-int(time.time()), time.time()-int(time.time()), time.time()-time.time()
(0.9570000171661377, 0.9570000171661377, 0.0)
</code></pre>
<p>Even if I write the calls on different lines in Windows it still returns the same value so the real precision is lower.</p>
<p>So in serious measurements a platform check (<code>import platform, platform.system()</code>) has to be done in order to determine whether to use <code>time.clock()</code> or <code>time.time()</code>.</p>
<p>(Tested on Windows 7 and Ubuntu 9.10 with python 2.6 and 3.1)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.7 introduces 6 new time functions with <em>nanosecond resolution</em>, for example instead of <a href="https://docs.python.org/3.7/library/time.html#time.time" rel="nofollow noreferrer"><code>time.time()</code></a> you can use <a href="https://docs.python.org/3.7/library/time.html#time.time_ns" rel="nofollow noreferrer"><code>time.time_ns()</code></a>:</p>
<pre><code>import time
print(time.time())
# 1522915698.3436284
print(time.time_ns())
# 1522915698343660458
</code></pre>
<p>These 6 functions are described in <a href="https://www.python.org/dev/peps/pep-0564/" rel="nofollow noreferrer">PEP 564</a>:</p>
<blockquote>
<p><code>time.clock_gettime_ns(clock_id)</code></p>
<p><code>time.clock_settime_ns(clock_id, time:int)</code></p>
<p><code>time.monotonic_ns()</code></p>
<p><code>time.perf_counter_ns()</code></p>
<p><code>time.process_time_ns()</code></p>
<p><code>time.time_ns()</code></p>
<p>These functions are similar to the version without the _ns suffix, but
  return a number of nanoseconds as a Python int.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://stackoverflow.com/questions/1938048/high-precision-clock-in-python#comment34577849_3444043">comment left by tiho on Mar 27 '14 at 17:21</a> deserves to be its own answer:</p>
<blockquote>
<p>In order to avoid platform-specific code, use timeit.default_timer()</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I observed that the resolution of time.time() is different between Windows 10 Professional and Education versions.</p>
<p>On a Windows 10 Professional machine, the resolution is 1 ms. 
On a Windows 10 Education machine, the resolution is 16 ms.</p>
<p>Fortunately, there's a tool that increases Python's time resolution in Windows:
<a href="https://vvvv.org/contribution/windows-system-timer-tool" rel="nofollow noreferrer">https://vvvv.org/contribution/windows-system-timer-tool</a></p>
<p>With this tool, I was able to achieve 1 ms resolution regardless of Windows version. You will need to be keep it running while executing your Python codes.</p>
</div>
<div class="post-text" itemprop="text">
<p>For those stuck on windows (version &gt;= server 2012 or win 8)and python 2.7,</p>
<pre><code>import ctypes

class FILETIME(ctypes.Structure):
    _fields_ = [("dwLowDateTime", ctypes.c_uint),
                ("dwHighDateTime", ctypes.c_uint)]

def time():
    """Accurate version of time.time() for windows, return UTC time in term of seconds since 01/01/1601
"""
    file_time = FILETIME()
    ctypes.windll.kernel32.GetSystemTimePreciseAsFileTime(ctypes.byref(file_time))
    return (file_time.dwLowDateTime + (file_time.dwHighDateTime &lt;&lt; 32)) / 1.0e7
</code></pre>
<p><a href="https://docs.microsoft.com/en-us/windows/desktop/api/sysinfoapi/nf-sysinfoapi-getsystemtimepreciseasfiletime" rel="nofollow noreferrer">GetSystemTimePreciseAsFileTime function</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The original question specifically asked for Unix but multiple answers have touched on Windows, and as a result there is misleading information on windows.  The default timer resolution on windows is 15.6ms <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/high-resolution-timers" rel="nofollow noreferrer">you can verify here.</a></p>
<p>Using a slightly modified script from cod3monk3y I can show that windows timer resolution is ~15milliseconds by default.  I'm using a tool available <a href="https://github.com/tebjan/TimerTool" rel="nofollow noreferrer">here</a> to modify the resolution.</p>
<p>Script:</p>
<pre><code>import time

# measure the smallest time delta by spinning until the time changes
def measure():
    t0 = time.time()
    t1 = t0
    while t1 == t0:
        t1 = time.time()
    return t1-t0

samples = [measure() for i in range(30)]

for s in samples:
    print(f'time delta: {s:.4f} seconds') 
</code></pre>
<p><a href="https://i.stack.imgur.com/HEJ4S.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/HEJ4S.png"/></a></p>
<p><a href="https://i.stack.imgur.com/vNIMg.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/vNIMg.png"/></a></p>
<p>These results were gathered on windows 10 pro 64-bit running python 3.7 64-bit.  </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def start(self):
    sec_arg = 10.0
    cptr = 0
    time_start = time.time()
    time_init = time.time()
    while True:
        cptr += 1
        time_start = time.time()
        time.sleep(((time_init + (sec_arg * cptr)) - time_start ))

        # AND YOUR CODE .......
        t00 = threading.Thread(name='thread_request', target=self.send_request, args=([]))
        t00.start()
</code></pre>
</div>
<span class="comment-copy">You mean 'elapsed time' or 'wall clock time', not 'CPU time'. Also, &lt;1s is not considered high-precision. And when you say 'cross-platform', do you only mean 'across Linuxes', or also Windows?</span>
<span class="comment-copy">Related Q&amp;A: <a href="https://stackoverflow.com/questions/38319606/how-to-get-millisecond-and-microsecond-resolution-timestamps-in-python">How to get millisecond and microsecond-resolution timestamps in Python</a></span>
<span class="comment-copy">Note that on Windows time.time() has ~16 milliseconds precision.</span>
<span class="comment-copy">How much delay is in getting this time ? Is this accurate?</span>
<span class="comment-copy">inaccurate on windows (useless)</span>
<span class="comment-copy">I think there's a typo in your code. I believe start2 should be start. And a space before milliseconds might help readability ;-)</span>
<span class="comment-copy">this is greate work cod3monk3y... thank you for sharing!</span>
<span class="comment-copy">On Windows, <code>time.clock</code> measures elapsed time to high precision. On OS X and Linux, it measures CPU time. As of Python 3.3 it is <a href="https://docs.python.org/3/library/time.html#time.process_time" rel="nofollow noreferrer">deprecated</a> in favor of <code>perf_counter</code> to measure elapsed time and <code>process_time</code> to measure CPU.</span>
<span class="comment-copy">This answer is misleading.  Just because your windows has timer resolution set to 1ms at the time you ran this script does not guarantee that another process cannot or will not set it to a higher resolution.  The default resolution is 15.6ms, any process can come along and change that value. I ran your script and I got 15ms delta, then I used <a href="https://github.com/tebjan/TimerTool" rel="nofollow noreferrer">github.com/tebjan/TimerTool</a> and set it to 1ms and ran it again and got 1ms time delta.  Be wary of assuming that windows is holding 1ms timer resolution, you should be explicit and set it yourself at the start of your script if needed.</span>
<span class="comment-copy">Surely it's not that it returns the last value, but that you make multiple calls in a shorter span of time than the clock resolution.</span>
<span class="comment-copy">Your code for linux is different from your code for windows. The Linux code shows a tuple of two time values and your Windows code shows just the fractional portions and a delta. Output of similar code would be easier to compare. If this code shows anything it's that your Linux box has a 2.2 microsecond <code>time.time()</code> resolution or that your Linux calls are taking a while (box is really slow, caught the timer on a transition, etc.). I'll post some code that shows a way to resolve the question you've raised here.</span>
<span class="comment-copy">In order to avoid platform-specific code, use timeit.default_timer()</span>
<span class="comment-copy">It will be interesting to see a benchmark of this on a Raspberry Pi 3.</span>
<span class="comment-copy">@SDsolar I'm planning to try it tomorrow (though maybe on a Pi2)</span>
<span class="comment-copy"><code>time.clock</code> is deprecated since version 3.3</span>
<span class="comment-copy">Nice answer. How much time does it take to invoke the function itself? For example, on my Linux machine, invoking <code>time.time()-time.time()</code> prints a number slightly smaller than 1e-6 (1 us).</span>
