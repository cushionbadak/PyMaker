<div class="post-text" itemprop="text">
<p>Working in python 3 i've got the following problem:</p>
<p>My dictionary consists of units (keys) and lists of activity (values), I have to sort it such that is is ranked by peak activity. Meaning that I want to find per index i, the dict item for which this ith value is the highest value in the list of values.</p>
<pre><code>example_dict = {unit1: [1, 4, 3], unit2: [2, 2, 2], unit3:  [1, 1, 1]}

sorted_dict  = {unit2: [2, 2, 2], unit1: [1, 4, 3], unit3:  [1, 1, 1]}
</code></pre>
<p>I fear it might be the case that there is not per se an optimal solution in which case i'm happy with an arbitrary choice of solution.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>For each list, find the index of the maximum element</li>
<li>Group the lists by that index</li>
<li>Pick an arbitrary element from each group and put it into the result at the correct index</li>
<li>Use the remaining elements to fill the empty slots in the result</li>
</ol>
<pre><code>import operator
import collections

example_dict = {'unit1': [1, 4, 3],
                'unit2': [2, 2, 2],
                'unit3': [1, 1, 1]}

# group the lists by the index of their maximum element
lists_by_max_index = collections.defaultdict(list)

for key, values in example_dict.items():
    # find the index of the maximum element
    max_index, max_value = max(enumerate(values), key=operator.itemgetter(1))
    # and store the key in the corresponding group
    lists_by_max_index[max_index].append(key)

# list_by_max_index is now {1: ['unit1'], 0: ['unit2', 'unit3']}

# make a list representing the sorted dict and initialize it to None
sorted_keys = [None] * len(next(iter(example_dict.values())))
unused_keys = []

# sorted_keys is [None, None, None]

# for each group in the dict we created earlier, put a random key into
# the list
for i, keys in lists_by_max_index.items():
    sorted_keys[i] = keys.pop()
    unused_keys += keys  # store the other keys for later

# sorted_keys is now ['unit3', 'unit1', None]

# iterate over the list and fill any empty slots with arbitrary unused keys
for i, key in enumerate(sorted_keys):
    if key is None:
        sorted_keys[i] = unused_keys.pop()

# sorted_keys is now ['unit3', 'unit1', 'unit2']

# finally, grab the corresponding value for each key and turn the whole thing
# into an OrderedDict
sorted_dict = [(key, example_dict[key]) for key in sorted_keys]
sorted_dict = collections.OrderedDict(sorted_dict)

print(sorted_dict)
# output:
# OrderedDict([('unit3', [1, 1, 1]),
#              ('unit1', [1, 4, 3]),
#              ('unit2', [2, 2, 2])])
</code></pre>
<p>Useful functions and classes I used:</p>
<ul>
<li><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for grouping</li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> to store the result</li>
<li><a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> as a key function for <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> and <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> to get an arbitrary element from a dict</li>
</ul>
</div>
<span class="comment-copy">hopefully the example i gave helps!</span>
<span class="comment-copy">I thought I understood the question, but now that you've added your example I realized that I have no idea how that output is generated.</span>
<span class="comment-copy">Do you mean you dont understand what i want? Or you don't know the solution?</span>
<span class="comment-copy">I'm saying I don't understand the question. The output looks like you want to sort the dict keys by their values, but in your question you're talking about finding the maximum for each index.</span>
<span class="comment-copy">so in this example unit2 is ranked on top, because since all values are 2, the first value:2 is also the highest value. Then because on the second position unit1 has its highest value there (4&gt;1,3) this item gets place two. I suppose one could argue unit3 might as well go there (since 1 is the highest value of unit3) , but I would prefer unit2 to be placed second as 4&gt;1.</span>
<span class="comment-copy">Thank you so much! I believe it works exactly as needed!</span>
