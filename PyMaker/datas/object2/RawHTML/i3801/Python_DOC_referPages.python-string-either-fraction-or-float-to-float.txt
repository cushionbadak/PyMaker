<div class="post-text" itemprop="text">
<p>I have a problem where I want to take a string which could say either a fraction like '1/6' or a float '2.0', and have them both evaluate to a final float value. What I don't know how to do is deal with the potential for either case to come up or how process them so I get the float output of the fraction.</p>
<pre><code>numberArray = []
d1 = 0
d2 = 0

fileInput = f.readlines()

for line in fileInput:
    numberArray.append(line)

for i in numberArray:
    content = i.replace("\n","").split(" ")

    d1 = (float(content[0]))
    //The rest of data in the line is stored below (d2, d3 etc), but this isn't 
    // important. The important part is the first item that comes up in each line, 
    //and whether or not it is a fraction or already a float.
</code></pre>
<p>Input:</p>
<pre><code>1/3 ...(rest of the line, not important)
2.0 ...
</code></pre>
<p>Output:</p>
<pre><code>d1 (line1, item1) = 0.33
d2 (line1, item2) = ...

d1 (line2, item1) = 2.0
d2 (line2, item2) = ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm new to python so this may not be the most elegant solution, but maybe something like:</p>
<pre><code>import re

values = ["3.444", "3", "1/3", "1/5"]

def to_float(str):
    is_frac = bool(re.search("/", str))
    if is_frac:
        num_den = str.split("/")
        return float(num_den[0]) / float(num_den[1])
    else:
        return float(str)

floats = [to_float(i) for i in values]
print(floats)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction" rel="nofollow noreferrer">The <code>fractions.Fraction</code> constructor already knows how to parse both <code>float</code>-like strings and fraction-like strings</a>, and produce a <code>Fraction</code> result. For example:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; float(Fraction('1/3'))
0.3333333333333333
&gt;&gt;&gt; float(Fraction('2.0'))
2.0
</code></pre>
<p>Since <code>Fraction</code> can be converted to <code>float</code>, you can use this to unconditionally produce a <code>float</code> result:</p>
<pre><code>from fractions import Fraction

for line in f:
    content = line.strip('\r\n').split(" ")

    d1 = float(Fraction(content[0]))
    //The rest of data in the line is stored below (d2, d3 etc), but this isn't 
    // important. The important part is the first item that comes up in each line, 
    //and whether or not it is a fraction or already a float.
</code></pre>
<p>I took the liberty of dramatically simplifying your code; <code>f.readlines()</code> would already return a <code>list</code>, so it's pointless to iterate it again to populate <code>numberArray</code>, and since you only seem to populate <code>numberArray</code> to iterate it once anyway, it's simpler to just iterate the file directly rather than making two pointless temporaries. If you really need the <code>list</code>, you just do:</p>
<pre><code>numberArray = f.readlines()
for line in numberArray:
</code></pre>
<p>to load the <code>list</code> once and store it directly, rather than copying element by element.</p>
</div>
<span class="comment-copy">Worked perfectly, thanks a heap.</span>
<span class="comment-copy">There is no need for <code>re</code> here at all. Just test <code>if '/' in str:</code> instead of <code>is_frac = bool(re.search('/', str))</code> and <code>if is_frac:</code></span>
<span class="comment-copy">oh nice, thanks for the heads up.</span>
<span class="comment-copy">This does look rather straight forward actually, not sure why I couldn't find that when trying to find a solution to this before asking a question. Thanks for this answer.</span>
