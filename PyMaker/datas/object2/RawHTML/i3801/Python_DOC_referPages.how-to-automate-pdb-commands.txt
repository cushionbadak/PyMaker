<div class="post-text" itemprop="text">
<p>I am calling pdb on some function <code>func</code> i.e.,</p>
<pre><code>def fun():
    a = 10
    c = fun2(a)
    d = 40
    return c+d
def fun2(a):
    xyz ='str'
    return a+10
</code></pre>
<p>Now I am running pdb using <code>pdb.runcall(func,a,b)</code> now It will open a pdb console for debugging, now suppose I press 2 time <code>s</code>(step) and <code>q</code> to <code>quit</code> in <code>pdb</code> console
but problem is I don't want to do this manually, I want to make some script  which do something like this (automatic tell pdb first two command is <code>s</code> then third is <code>q</code>) , I am asking because there are many functions which needs atleast two time <code>c</code> (continue) to overall excecution of function so that it can yield/return some valid output (like say generators)</p>
<p>Any help will be a serious help for me.</p>
</div>
<div class="post-text" itemprop="text">
<p>Update after better understanding the question:</p>
<p>In general, I don't think this is the ideal way to test code; designing code for testability (e.g. using TDD) will often result in functions that are easier to test (e.g. using mocks/fake objects, dependency injection etc), and I would encourage you to consider refactoring the code if possible. The other issue with this approach is that the tests may become very tightly coupled to the code. However, I'll assume here that you know what you are doing, and that the above is not an option for whatever reason.</p>
<h2>Scripting pdb</h2>
<p>If you want to script pdb from code, this is actually possible by instantiating your own <code>pdb.Pdb</code> class and passing in the <code>stdin</code> and, at the time of writing, <code>stdout</code> argument (I'm not sure both should be required - I've filed <a href="https://bugs.python.org/issue33749" rel="nofollow noreferrer">https://bugs.python.org/issue33749</a>).</p>
<p>Example (I just added the extra input argument to <code>fun</code>):</p>
<pre><code>def fun(i):
    a = 10 + i
    c = fun2(a)
    d = 40
    return c+d
def fun2(a):
    xyz ='str'
    return a+10

import pdb
import io
output = io.StringIO()
# this contains the pdb commands we want to execute:
pdb_script = io.StringIO("p i;; i = 100;; n;; p a;; c;;")
mypdb = pdb.Pdb(stdin=pdb_script, stdout=output)
</code></pre>
<p>Normal result (no scripting):</p>
<pre><code>In [40]: pdb.runcall(fun, 1)
    ...:
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(2)fun()
-&gt; a = 10 + i
(Pdb)
(Pdb) c
Out[40]: 61
</code></pre>
<p>Scripted pdb:</p>
<pre><code>In [44]: mypdb = pdb.Pdb(stdin=pdb_script, stdout=output)

In [45]: mypdb.runcall(fun, 1)
Out[45]: 160

In [50]: print(output.getvalue())
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(2)fun()
-&gt; a = 10 + i
(Pdb) 1
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(3)fun()
-&gt; c = fun2(a)
110
</code></pre>
<p>You may find using <code>pdb_script.seek(0)</code> helpful to reset the script.</p>
<h2>Original answer - using conditional breakpoints</h2>
<p>It sounds like what you really want is to only get into the debugger when your code is in a certain state. This can be done with conditional breakpoints (see <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer"><code>pdb</code> docs</a> for details).
For example, let's say you want to break in <code>fun2</code> if <code>a &gt; 10</code>:</p>
<pre><code>   ...:

In [2]: import pdb

In [3]: pdb.runcall(fun, 1)
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(2)fun()
-&gt; a = 10 + i
(Pdb) break fun2, a &gt; 10
Breakpoint 1 at &lt;ipython-input-1-28966c4f6e38&gt;:6
(Pdb) c
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(7)fun2()
-&gt; xyz ='str'
(Pdb) c
Out[3]: 61

In [4]: pdb.runcall(fun, -1)
&gt; &lt;ipython-input-1-28966c4f6e38&gt;(2)fun()
-&gt; a = 10 + i
(Pdb) c
Out[4]: 59
</code></pre>
<p>Notice in the first case you hit the breakpoint, in the second you didn't.</p>
<h2>Original answer - using breakpoints and executing commands when hit</h2>
<p>You could also try setting a breakpoint and using the <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-commands" rel="nofollow noreferrer">commands</a> facility.</p>
</div>
<span class="comment-copy">Does something like <code>yes "$(echo -e 's\ns\nq\n')" | python yourscript.py</code> work?</span>
<span class="comment-copy">There is no way to tell the <code>pdb</code> that this is the command user entered, <code>without</code> doing it manually into <code>pdb</code> console ?  Also how to write a python script of your answer as I am calling a <code>pdb.runcall</code> on some imported function.</span>
<span class="comment-copy">Can you put these commands in a <code>.pdbrc</code> file?</span>
<span class="comment-copy">No, I want to automate the commands for example, without going into the <code>pdb</code> console and pressing <code>c</code> to continue the execution, I want somehow script tell to pdb that next command is <code>c</code> and <code>pdb</code> can continue it's execution, actually I want this for test the function. In last I will assert the value of function which I will get after calling the <code>pdb.runcall</code></span>
<span class="comment-copy">I've updated my answer!</span>
