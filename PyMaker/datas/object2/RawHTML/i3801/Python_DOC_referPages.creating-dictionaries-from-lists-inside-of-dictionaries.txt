<div class="post-text" itemprop="text">
<p>I'm quite new to Python and I have been stumped by a seemingly simple task.
In part of my program, I would like to create Secondary Dictionaries from the values inside of lists, of which they are values of a Primary Dictionary.</p>
<p>I would also like to default those values to 0</p>
<p>For the sake of simplicity, the Primary Dictionary looks something like this:</p>
<pre><code>primaryDict = {'list_a':['apple', 'orange'], 'list_b':['car', 'bus']}
</code></pre>
<p>What I would like my result to be is something like:</p>
<pre><code>{'list_a':[{'apple':0}, {'orange':0}], 'list_b':[{'car':0}, {'bus':0}]}
</code></pre>
<p>I understand the process should be to iterate through each list in the primaryDict, then iterate through the items in the list and then assign them as Dictionaries.</p>
<p>I've tried many variations of "for" loops all looking similar to:</p>
<pre><code>for listKey in primaryDict:
    for word in listKey:
        {word:0 for word in listKey}
</code></pre>
<p>I've also tried some methods of combining Dictionary and List comprehension,
but when I try to index and print the Dictionaries with, for example:</p>
<pre><code>print(primaryDict['list_a']['apple'])
</code></pre>
<p>I get the "TypeError: list indices must be integers or slices, not str", which I interpret that my 'apple' is not actually a Dictionary, but still a string in a list. I tested that by replacing 'apple' with 0 and it just returns 'apple', proving it true.</p>
<p>I would like help with regards to:</p>
<p>-Whether or not the values in my list are assigned as Dictionaries with value '0'</p>
<p>or</p>
<p>-Whether the mistake is in my indexing (in the loop or the print function), and what I am mistaken with</p>
<p>or</p>
<p>-Everything I've done won't get me the desired outcome and I should attempt a different approach</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the data structure that you desire via:</p>
<pre><code>primaryDict = {'list_a':['apple', 'orange'], 'list_b':['car', 'bus']}
for k, v in primaryDict.items():
    primaryDict[k] = [{e: 0} for e in v]

# primaryDict
{'list_b': [{'car': 0}, {'bus': 0}], 'list_a': [{'apple': 0}, {'orange': 0}]}    
</code></pre>
<p>But the correct nested access would be:</p>
<pre><code>print(primaryDict['list_a'][0]['apple'])  # note the 0
</code></pre>
<p>If you actually want <code>primaryDict['list_a']['apple']</code> to work, do instead</p>
<pre><code>for k, v in primaryDict.items():
    primaryDict[k] = {e: 0 for e in v}

# primaryDict
{'list_b': {'car': 0, 'bus': 0}, 'list_a': {'orange': 0, 'apple': 0}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a dict comprehension that works:</p>
<pre><code>{k: [{v: 0} for v in vs] for k, vs in primaryDict.items()}
</code></pre>
<p>There are two problems with your current code. First, you are trying to iterate over <code>listKey</code>, which is a string. This produces a sequence of characters.</p>
<p>Second, you should use something like </p>
<pre><code>[{word: 0} for word in words]
</code></pre>
<p>in place of</p>
<pre><code>{word:0 for word in listKey}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are close. The main issue is the way you iterate your dictionary, and the fact you do not append or assign your sub-dictionaries to any variable.</p>
<p>This is one solution using only <code>for</code> loops and <code>list.append</code>.</p>
<pre><code>d = {}
for k, v in primaryDict.items():
    d[k] = []
    for w in v:
        d[k].append({w: 0})

{'list_a': [{'apple': 0}, {'orange': 0}],
 'list_b': [{'car': 0}, {'bus': 0}]}
</code></pre>
<hr/>
<p>A more Pythonic solution is to use a single list comprehension.</p>
<pre><code>d = {k: [{w: 0} for w in v] for k, v in primaryDict.items()}
</code></pre>
<hr/>
<p>If you are using your dictionary for counting, which seems to be the implication, an even more Pythonic solution is to use <code>collections.Counter</code>:</p>
<pre><code>from collections import Counter

d = {k: Counter(dict.fromkeys(v, 0)) for k, v in primaryDict.items()}

{'list_a': Counter({'apple': 0, 'orange': 0}),
 'list_b': Counter({'bus': 0, 'car': 0})}
</code></pre>
<p>There are <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">specific benefits</a> attached to <code>collections.Counter</code> relative to normal dictionaries.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>primaryDict = {'list_a':['apple', 'orange'], 'list_b':['car', 'bus']}

for listKey  in primaryDict:
    primaryDict[i] = [{word:0} for word in primaryDict[listKey]]

print(primaryDict)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'list_a':[{'apple':0}, {'orange':0}], 'list_b':[{'car':0}, {'bus':0}]}
</code></pre>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>@qqc1037</strong>, I checked and updated your code to make it working. I have mentioned the problem with your code as comments. Finally, I have also added one more example using <strong>list comprehension</strong>, <strong>map()</strong> &amp; <strong>lambda function</strong>.</p>
<pre><code>import json 

secondaryDict = {}

for listKey in primaryDict:
    new_list = [] # You did not define any temporary list
    for word in primaryDict [listKey]: # You forgot to use key that refers the list
        new_list.append( {word:0}) # Here you forgot to append to list
    secondaryDict2.update({listKey: new_list}) # Finally, you forgot to update the secondary dictionary

# Pretty printing dictionary
print(json.dumps(secondaryDict, indent=4));

"""
{
    "list_a": [
        {
            "apple": 0
        },
        {
            "orange": 0
        }
    ],
    "list_b": [
        {
            "car": 0
        },
        {
            "bus": 0
        }
    ]
}
"""
</code></pre>
<p><strong>Another example:</strong> Using list comprehension, map(), lambda function</p>
<pre><code># Using Python 3.5.2
import json

primaryDict = {'list_a':['apple', 'orange'], 'list_b':['car', 'bus']}

secondaryDict = dict(map(lambda key: (key, [{item:0} for item in primaryDict[key]]), list(primaryDict) ))

# Pretty printing secondary dictionary
print(json.dumps(secondaryDict, indent=4))

"""
{
    "list_a": [
        {
            "apple": 0
        },
        {
            "orange": 0
        }
    ],
    "list_b": [
        {
            "car": 0
        },
        {
            "bus": 0
        }
    ]
}
"""
</code></pre>
</div>
<span class="comment-copy">Thank you for the comprehensive answer!</span>
<span class="comment-copy">Thank you, I'll keep that in mind for dict comprehensions</span>
