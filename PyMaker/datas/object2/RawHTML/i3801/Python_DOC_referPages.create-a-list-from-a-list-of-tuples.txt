<div class="post-text" itemprop="text">
<p>I have a list like this:</p>
<pre><code>mylist = [(20, 'Start', '2008-10-10', 'TBS'),...,(20, 'End', '2008-11-09', 'NG'), 
          (21, 'Start', '2008-12-10', 'TBS'),...,(21, 'End', '2008-12-15', 'G'), 
          (22, 'Start', '2009-01-10', 'TBS'),...,(22, 'End', '2009-12-10', 'B'),..]
</code></pre>
<p>I put '...' in the example above to say there are other items for each id like 20, 21 and 22 in the list but I don't want them. The only items that I want are the items that include 'Start' or 'End'.(Other items have different words than these two words.)</p>
<p>I want to create a nested list like this:</p>
<pre><code>[[20, 'Start', '2008-10-10', 'End', '2008-11-09', 'NG'] ,
 [21, 'Start', '2008-12-10', 'End', '2008-12-15', 'G'], 
 [22, 'Start', '2009-01-10', 'End', '2009-12-10', 'B']]
</code></pre>
<p>Here is my code:</p>
<pre><code>code = 0
brr = []
for row in myList:
    if row[1] == "Start":
        arr = []
        code = row[0]
        arr.append([row[0], row[1], row[2]])
        continue

    if row[0] == code and row[1] == "End":
        arr.append([row[1], row[2], row[3]])
    brr.append(arr)
for k in brr:
    print(k)
</code></pre>
<p>But the problem is that it creates something like this:</p>
<pre><code>[[[20, 'Start', '2008-10-10', 'End'], ['2008-11-09', 'NG']] ,
 [[20, 'Start', '2008-10-10', 'End'], ['2008-11-09', 'NG']] ,
 [[20, 'Start', '2008-10-10', 'End'], ['2008-11-09', 'NG']] ,
 [[21, 'Start', '2008-12-10', 'End'], ['2008-12-15', 'G']], 
 [[21, 'Start', '2008-12-10', 'End'], ['2008-12-15', 'G']],
 [[22, 'Start', '2009-01-10', 'End'], ['2009-12-10', 'B']]]
</code></pre>
<p>And for each items I have multiple rows in the list. I don't know why?
Sorry if my question is too long.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>brr.append(arr)</code> is always adding an array for each row, that's why there are 6 elements in the ouput. Change <code>brr.append(arr)</code> to:</p>
<pre><code>if arr not in brr:
    brr.append(arr)
</code></pre>
<p>As for the format, <code>arr.append([row[0], row[1], row[2]])</code> adds a list of 3 elements, instead of 3 separate elements. Use <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer"><code>extend</code></a> instead.</p>
<p>Your final code should look like this:</p>
<pre><code>code = 0
brr = []
for row in mylist:

    if row[1] == "Start":
        arr = []
        code = row[0]
        arr.extend([row[0], row[1], row[2]])
        # continue not needed here

    if row[0] == code and row[1] == "End":
        arr.extend([row[1], row[2], row[3]])

    if arr not in brr:
        brr.append(arr)

for k in brr:
    print(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use arr.extend() function</p>
<pre><code>arr = []
arr.append([1,2]) # arr = [[1,2]]
arr = []
arr.extend([1,2])  # arr = [1,2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this pretty simply with <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools.groupby</a> as well:</p>
<pre><code>import itertools
from pprint import pprint

mylist = [
    (20, 'Start', '2008-10-10', 'TBS'),
    (20, 'Foo', '2008-10-10', 'TBS'),
    (20, 'End', '2008-11-09', 'NG'),

    (21, 'Start', '2008-12-10', 'TBS'),
    (21, 'End', '2008-12-15', 'G'),

    (22, 'Start', '2009-01-10', 'TBS'),
    (22, 'End', '2009-12-10', 'B'),
]

rows = (x for x in mylist if x[1] in ('Start', 'End'))
grouped = itertools.groupby(rows, key=lambda x: x[0])
output = [[k, *next(grp)[1:3], *next(grp)[1:4]] for k, grp in grouped]
pprint(output)
</code></pre>
<p>Output:</p>
<pre><code>[[20, 'Start', '2008-10-10', 'End', '2008-11-09', 'NG'],
 [21, 'Start', '2008-12-10', 'End', '2008-12-15', 'G'],
 [22, 'Start', '2009-01-10', 'End', '2009-12-10', 'B']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>please try this,</p>
<pre><code>startlist=[]
endlist=[]
for item in mylist:
    if 'Start' in list(item):
        startlist.append(list(item))
    elif 'End' in list(item):
        endlist.append(list(item))
outlist=[i+j for i,j in zip(startlist,endlist)]     
</code></pre>
</div>
<span class="comment-copy">Are start and end always the first and last element of a row?</span>
<span class="comment-copy">No, myList is a list of many tuples. But always start is before end. @user4343502</span>
<span class="comment-copy">Within each tuple, do start and end occur once and only once each?</span>
<span class="comment-copy">Also, you removed <code>TBS</code>, is that intentional?</span>
<span class="comment-copy">For each tuple there is only one word. I want to say if it was start then store it to a list and then by ignoring other words I should search for end for that particular code and save it in the same list as start. @user4343502</span>
<span class="comment-copy">Perfect! extends works here. But I still have multiple rows for each item I don't know why. @Kacper Floria≈Ñski</span>
<span class="comment-copy">I literally just said that... the <code>brr.append(arr)</code> adds <code>arr</code> to <code>brr</code> each loop iteration. You have 6 tuples you iterate over so you will 6 elements in your output.</span>
<span class="comment-copy">I will edit my post with fix for that.</span>
<span class="comment-copy">Perfect! Thanks.</span>
<span class="comment-copy">@TemporalWolf: <code>arr.append</code> takes exactly one argument; <code>arr.append(1, 2)</code> is invalid.</span>
