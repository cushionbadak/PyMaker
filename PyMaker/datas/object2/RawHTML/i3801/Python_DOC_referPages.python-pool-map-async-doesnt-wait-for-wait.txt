<div class="post-text" itemprop="text">
<p>I'm trying to run a fat function which worked pretty well with pool.apply_async</p>
<p>Now, I'm trying out the pool.map_async function (with 2 arguments passed with the functools.partial method) and the program finishes immediately without any error or exceptions... </p>
<pre><code>    files = list_files(mypath) # list of files to process
    csv_rows = None
    result = mp.Queue() #result queue from multiprocessing module

    pool = mp.Pool(4)
    t = pool.map_async( partial(process_file, result), files)
    t.wait() # it doesn't wait HERE ... program exits immediately - no errors
</code></pre>
<p>Any clues on what I might be missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>First off, you probably don't need <code>map_async</code> if you are going to immediately <code>wait</code> on it.  If that is the case, then just use <code>map</code>.  You can potentially also remove your <code>queue</code> and just return the values.  But that's probably not the problem you are having.  </p>
<p>The problem is likely that the <code>wait</code> method <em>doesn't raise remote exceptions</em>.  It is likely that your <code>process_file</code> method is actually failing in the pool processes but that you aren't seeing those exceptions.  Like <strong>Blckknght</strong> mentioned, you should switch to using a <code>get</code> method which, as you can see <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow noreferrer">here</a>, will raise the remote exception.  Here is a simple example where the <code>wait</code> method hides the remote process exceptions and how if you switch to <code>get</code> you can see them again: </p>
<pre><code>import multiprocessing as mp

def just_dies(n):
    raise ValueError("Test")

if __name__ == "__main__":
    pool = mp.Pool(4)
    results = pool.map_async(just_dies, range(10))

    # the wait will immediately silently pass
    #results.wait()

    # this will actually raise the remote exception
    results.get()
</code></pre>
<p>If you run this you will get a traceback error message like so</p>
<pre><code>The above exception was the direct cause of the following exception:
Traceback (most recent call last):
  File "foo.py", line 14, in &lt;module&gt;
    results.get()
  File "XXX/python3.5/multiprocessing/pool.py", line 608, in get
    raise self._value
ValueError: Test
</code></pre>
<p>If you switch to using the <code>wait</code> method then you won't see it.</p>
</div>
<span class="comment-copy">Show us <code>process_file</code>. Also if you're just going to wait immediately you might as well use <code>pool.map()</code> instead.</span>
<span class="comment-copy">You probably do have an error in <code>process_file</code> somewhere, but you won't see the exception in the main process until you call <code>get</code> on <code>t</code>.</span>
<span class="comment-copy">@Blckknght can you show me an example for get? I'm new to the multiprocessing library ,,,</span>
<span class="comment-copy">@AlexHall does the blocking part of map means that I'll wait till all 1000+ processes are finished? even when I know all of them are embarrassingly parallel?</span>
<span class="comment-copy">Just try <code>t.get()</code>. It's documented (alongside the <code>wait</code> method you're already calling) <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow noreferrer">right here</a>.</span>
