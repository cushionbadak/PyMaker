<div class="post-text" itemprop="text">
<p>I am new to Python (from Matlab) and having some trouble with a simple task:</p>
<p>How can I create a regular time series from date X to date Y with intervals of Z units?</p>
<p>E.g. from 1st January 2013 to 31st January 2013 every 10 minutes</p>
<p>In Matlab:</p>
<pre><code>t = datenum(2013,1,1):datenum(0,0,0,0,10,0):datenum(2013,12,31);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use <strong>pandas</strong> then use <strong><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html?highlight=date_range" rel="nofollow noreferrer">pd.date_range</a></strong></p>
<p><strong>Ex:</strong></p>
<pre><code>import pandas as pd
d = pd.date_range(start='2013/1/1', end='2013/12/31', freq="10min")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This function will make an interval of anything, similar to <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a>, but working also for non-integers:</p>
<pre><code>def make_series(begin, end, interval):
    x = begin
    while x &lt; end:
        yield x
        x = x + interval
</code></pre>
<p>You can then do this:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date_x = datetime.datetime(2013,1,1)
&gt;&gt;&gt; date_y = datetime.datetime(2013,12,31)
&gt;&gt;&gt; step = datetime.timedelta(days=50)
&gt;&gt;&gt;
&gt;&gt;&gt; list(make_series(date_x, date_y, step))
[datetime.datetime(2013, 1, 1, 0, 0), datetime.datetime(2013, 2, 20, 0, 0), datetime.datetime(2013, 4, 11, 0, 0), datetime.datetime(2013, 5, 31, 0, 0), datetime
.datetime(2013, 7, 20, 0, 0), datetime.datetime(2013, 9, 8, 0, 0), datetime.datetime(2013, 10, 28, 0, 0), datetime.datetime(2013, 12, 17, 0, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I picked a random date range, but here is how you can essentially get it done:</p>
<pre><code>a = pd.Series({'A': 1, 'B': 2, 'C': 3}, pd.date_range('2018-2-6', '2018-3-4', freq='10Min'))
print(a)
</code></pre>
<p>You can add a date range when creating the DataFrame. The first argument that you enter into the date_range() method is the start date, and the second argument is automatically the end date. The last argument that you enter in this example is the frequency argument, which you can set to 10 minutes. You can set it to 'H' for 1 hour, or to 'M' for 1 minute intervals as well. Another method that is worth noting however is asfreq() method that will let you edit the frequency or store a copy of another dataframe with a different frequency. Here is an example:</p>
<pre><code>copy = a.asfreq('45Min', method='pad')
print(copy)
</code></pre>
<p>That's important if you want to study multiple frequencies. You can just copy your dataframe repeatedly in order to look at various time intervals. Hope that this answer helps. </p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python">Creating a range of dates in Python</a></span>
<span class="comment-copy">Please search the forum before posting (Research == step 0 in  <a href="https://stackoverflow.com/help/how-to-ask">how to ask</a> ) - the dupe gives you possible solutions using pandas, generators and list comps - galore.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1060279/iterating-through-a-range-of-dates-in-python">Iterating through a range of dates in Python</a></span>
<span class="comment-copy">Thank you @Patrick and Mr T for the links. I had looked through several posts and I made several attempts to imitate their answers to work for my problem with no luck. This question is so simple it's almost embarrassing, yet I couldn't find the solution. The answer below by Rakesh is perfect.</span>
