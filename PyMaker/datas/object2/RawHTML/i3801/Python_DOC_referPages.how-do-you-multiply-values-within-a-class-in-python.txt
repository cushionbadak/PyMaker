<div class="post-text" itemprop="text">
<pre><code>class bread:
    def __init__(self,grain,cost,number):
        self.grain=(grain)
        self.cost=int(cost)
        self.number=int(number)
    def price(self):
        p=self.cost*self.number
        print(p)

apple=bread("wholemeal",int(2),int(12))
print(apple.grain,apple.cost,apple.number)
print (apple.price)
</code></pre>
<p>After I enter this block of code I should expect to see 24, but instead I get:</p>
<blockquote>
<p>bound method bread.price of &lt;<strong>main</strong>.bread object at 0x05CC7430&gt;&gt;</p>
</blockquote>
<p>I am new to oop and starting to experiment but I can't find a solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to call <code>price</code>:</p>
<pre><code>apple.price()
</code></pre>
<p>However, variable attribute behavior with methods can be achieved using <code>property</code>:</p>
<pre><code>class bread:
   def __init__(self,grain,cost,number):
    self.grain=grain
    self.cost=cost
    self.number=number
   @property
   def price(self):
     return self.cost*self.number

 apple=bread("wholemeal",2, 12)
 print(apple.price)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this case you don't seem to want to deal with a class object, but just want to get the output. This you can do like so:</p>
<pre><code>class bread:

    def __init__(self, grain, cost, number):

        self.grain = (grain)
        self.cost = int(cost)
        self.number = int(number)

        return self.price()

    def price(self):
        p = self.cost * self.number
        print("%s : %d" % (self.grain, p))

bread("wholemeal", 2, 12)
</code></pre>
<p>As a beginner you should not worry too much about things like <code>property</code> but keep it as simple (and verbose) as possible. Also because you're making the input for the grain type, I'm guessing you want to print that out together with the value. </p>
<p>To unpack the changes I made to your code as an example for some basic coding practices: </p>
<ul>
<li>note the spacing between functions </li>
<li>note the spacing between individual items </li>
<li>note how the output is produced with print()</li>
</ul>
<p>Once all this is done, all we have to do is make the call we would otherwise have to make ourselves everytime, inside <code>__init__</code>. Good luck, and have fun learning python! </p>
</div>
<div class="post-text" itemprop="text">
<p>When you print the function at the end, you actually need to call the function. Currently you are just getting the instance of the method within the object. But you should be using parenthesis () to call the function when you print it. You also don't need to print the function call to get 24 since you are already printing the output of number and cost within your function. But if you do want to print the function, you can use a return value within your function. Here is an example below:</p>
<pre><code>class bread(object):

   def __init__(self, grain, cost, number):
      self.grain = grain
      self.cost = cost
      self.number = number

   def price(self):
      price = self.cost * self.number
      return price

apple=bread("wholemeal", 2, 12)

print(apple.price())
</code></pre>
<p>Notice that at the end of the code We actually called the function () when printing it. You will then print the return value of the function. If you wanted to simply print the value within the function, you could call the function at the bottom of the code without printing it like this:</p>
<pre><code>apple.price()
</code></pre>
<p>and then choose to put the print statement within the price method. Your output from the code above it 24:</p>
<pre><code>24
</code></pre>
</div>
<span class="comment-copy">price is a function, not a property</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Classes</a>.</span>
