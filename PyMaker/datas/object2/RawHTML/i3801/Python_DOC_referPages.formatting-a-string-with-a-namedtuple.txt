<div class="post-text" itemprop="text">
<p>I'm wondering if there is a way to use the variablelist of a namedtuple to format a string efficiently like so:</p>
<pre><code>TestResult = collections.namedtuple('TestResults', 'creation_time filter_time total_time')

test = TestResult(1, 2, 3)
string_to_format = '{creation_time}, {filter_time}, {total_time}'.format(test)
</code></pre>
<p>instead of just writing:</p>
<pre><code>string_to_format = '{}, {}, {}'.format(test.creation_time, test.filter_time, test.total_time)
</code></pre>
<p>If there is a way to do this, would it be considered pythonic?</p>
<p>Thank you for your answers</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>&gt;&gt;&gt; string_to_format = '{0.creation_time}, {0.filter_time}, {0.total_time}'.format(test)
&gt;&gt;&gt; string_to_format
'1, 2, 3'
</code></pre>
<p>Is this Pythonic? I don't know but it does two things that are considered Pythonic: 1. Don't repeat yourself! (<code>test</code> occurs only once) and 2. Be explicit! (the names in a namedtuple are there to be used)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict" rel="nofollow noreferrer"><code>_asdict()</code></a> method to turn your namedtuple into a dict, and then <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">unpack</a> it with the <code>**</code> splat operator:</p>
<pre><code>test = TestResult(1, 2, 3)

string_to_format = '{creation_time}, {filter_time}, {total_time}'
print(string_to_format.format(**test._asdict()))
# output: 1, 2, 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your attempt was close. You should change </p>
<pre><code>'{creation_time}, {filter_time}, {total_time}'.format(test)
</code></pre>
<p>to</p>
<pre><code>'{test.creation_time}, {test.filter_time}, {test.total_time}'.format(test=test)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert it to a dictionary and use it as the parameters for <code>format</code>:</p>
<pre><code>test = TestResult(1, 2, 3)
s = '{creation_time}, {filter_time}, {total_time}'.format(**test._asdict())
print(s)  # 1, 2, 3
</code></pre>
</div>
