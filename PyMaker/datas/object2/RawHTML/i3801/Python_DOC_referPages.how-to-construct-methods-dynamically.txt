<div class="post-text" itemprop="text">
<p>I have designed a class. It is pretty standard, with some method attributes</p>
<pre><code>class foo:
   def f1(self):
      print 'f1'
   def f2(self):
      print 'f2'
   ....
   def fn(self):
      print 'fn'
</code></pre>
<p>Now I would like to create a class which contains a set of foo instances.</p>
<pre><code>class bar:
  self.myfoos=[foo(),foo(),foo()]
</code></pre>
<p>I would then like to class the <code>f1..fn</code> methods on all the foo instances.
I could do:</p>
<pre><code>   class bar:
   ...
   def f1():
     for foo_ in self.myfoos:
        foo_.f1()
</code></pre>
<p>However, my list of <code>f1..fn</code> is quite long so how could I obtain this behavior in a succint way?Maybe with alternative design completely?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just implement <code>__getattr__</code> and delegate that call to list of <code>foos</code>. I'm sure there is a more elegant way to do this:</p>
<pre><code>class foo:
    def f1(self):
        print('f1')
    def f2(self):
        print('f2')

class bar:
    def __init__(self):
        self.foos = [foo() for _ in range(3)]
    def __getattr__(self, fn):
        def fns(*args, **kwargs):
            for f in self.foos:
                getattr(f, fn)(*args, **kwargs)
        return fns

In []:
b = bar()
b.f1()

Out[]
f1
f1
f1

In []:
b.f2()

Out[]:
f2
f2
f2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for a way to construct a bunch of methods dynamically. This is <em>often</em> not a good idea—but sometimes it is. (For example, consider libraries like PyObjC and pythoncom that build dynamic proxies to ObjC and COM classes that you don't even know about until runtime. How else could you do that?)</p>
<p>So, you should definitely think through whether you actually want and need this—but, if you do, there are two basic approaches.</p>
<h3>Building a static class dynamically</h3>
<p>If you're only trying to wrap up a collection of <code>foo</code> objects, you can create all the methods in a loop. Methods aren't anything too magical; you just define them the same as any other function, and assign them to the class.</p>
<p>The only tricky bit there is that you can't just write <code>bar.f1 = …</code>, because <code>f1</code> is only available as a string. So we have to use <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a> to do it:</p>
<pre><code>class bar:
    # your existing stuff
for name in 'f1 f2 f3 f4 f5 f6 f7 f8'.split():
    foometh = getattr(foo, name)
    def f(self):
        for foo in self.myfoos:
            foometh(foo)
    f.__name__ = name
    setattr(bar, name, f)
</code></pre>
<p>If there's some kind of rule that specifies which methods you want to forward, instead of a list of a bunch of method names, you'd do something like:</p>
<pre><code>for name, foometh in inspect.getmembers(foo):
    if name.startswith('_') or not isinstance(foometh, types.FunctionType)) or &lt;rest of your rule&gt;:
        continue
    def f(self):
        # from here it's the same as above
</code></pre>
<h3>Building a dynamic class statically</h3>
<p>If you're trying to wrap up <em>anything</em> that meets some basic qualifications, rather than some specific list of methods of some specific class, you won't know what you want to wrap up, or how you want to wrap it, until someone tries to call those methods. So you have to catch the attempt to look up an unknown method, and build the wrapper on the fly. For this, we override <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a>:</p>
<pre><code>class bar:
    # your existing stuff
    def __getattr__(self, attr):
        if attr.startswith('_') or &lt;other rules here&gt;:
            raise AttributeError
        def f():
            for foo in self.myfoos:
                foometh(foo)
        f.__name__ = attr
        return f
</code></pre>
<p>This version returns functions that act like bound methods if you don't look too closely, rather than actual bound methods that can be introspected. If you want the latter, bind a method explicitly, by adding <code>self</code> as a parameter to <code>f</code>, and then calling <code>__get__</code> on <code>f</code> and returning the result. (And if you don't know what that means, you don't want to write this part…)</p>
</div>
<span class="comment-copy">what do You mean by ‚list of f‘s‘? The functions?</span>
<span class="comment-copy">yes I mean all the functions of foo. I am editing to clarify</span>
<span class="comment-copy">I'm not sure I've understood your question. Can you read my answer to tell me if that's what you're looking for?</span>
<span class="comment-copy">this is exactly what I was looking for. but with this solution, can I still have methods in bar that are not in foo?</span>
<span class="comment-copy">Yes, <code>__getattr__()</code> is only called when an <code>AttributeError</code> would be thrown. So if you define <code>def b1(self)</code> in <code>bar</code> then <code>b.b1()</code> would work as expected.</span>
