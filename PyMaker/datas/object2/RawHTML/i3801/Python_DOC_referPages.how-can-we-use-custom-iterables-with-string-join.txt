<div class="post-text" itemprop="text">
<p>How would one create an iterative function (or iterator object) in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>next()</code>.  The <code>__iter__</code> returns the iterator object and is implicitly called at the start of loops.  The <code>next()</code> method returns the next value and is implicitly called at each loop increment.  <code>next()</code> raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p>
<p>Here's a simple example of a counter:</p>
<pre><code>class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self): # Python 3: def __next__(self)
        if self.current &gt; self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(3, 8):
    print c
</code></pre>
<p>This will print:</p>
<pre><code>3
4
5
6
7
8
</code></pre>
<p>This is easier to write using a generator, as covered in a previous answer:</p>
<pre><code>def counter(low, high):
    current = low
    while current &lt;= high:
        yield current
        current += 1

for c in counter(3, 8):
    print c
</code></pre>
<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>
<p>David Mertz's article, <a href="https://www.ibm.com/developerworks/library/l-pycon/" rel="noreferrer">Iterators and Simple Generators</a>, is a pretty good introduction. </p>
</div>
<div class="post-text" itemprop="text">
<p>There are four ways to build an iterative function:</p>
<ul>
<li>create a generator (uses the <a href="http://docs.python.org/py3k/reference/expressions.html#yield-expressions" rel="nofollow noreferrer">yield keyword</a>)</li>
<li>use a generator expression (<a href="http://docs.python.org/py3k/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">genexp</a>)</li>
<li>create an iterator (defines <a href="http://docs.python.org/py3k/library/stdtypes.html?highlight=__iter__#iterator-types" rel="nofollow noreferrer"><code>__iter__</code> and <code>__next__</code></a> (or <code>next</code> in Python 2.x))</li>
<li>create a class that Python can iterate over on its own (<a href="http://docs.python.org/py3k/reference/datamodel.html?highlight=__getitem__#object.__getitem__" rel="nofollow noreferrer">defines <code>__getitem__</code></a>)</li>
</ul>
<p>Examples:</p>
<pre><code># generator
def uc_gen(text):
    for char in text:
        yield char.upper()

# generator expression
def uc_genexp(text):
    return (char.upper() for char in text)

# iterator protocol
class uc_iter():
    def __init__(self, text):
        self.text = text
        self.index = 0
    def __iter__(self):
        return self
    def __next__(self):
        try:
            result = self.text[self.index].upper()
        except IndexError:
            raise StopIteration
        self.index += 1
        return result

# getitem method
class uc_getitem():
    def __init__(self, text):
        self.text = text
    def __getitem__(self, index):
        result = self.text[index].upper()
        return result
</code></pre>
<p>To see all four methods in action:</p>
<pre><code>for iterator in uc_gen, uc_genexp, uc_iter, uc_getitem:
    for ch in iterator('abcde'):
        print ch,
    print
</code></pre>
<p>Which results in:</p>
<pre><code>A B C D E
A B C D E
A B C D E
A B C D E
</code></pre>
<p><strong>Note</strong>:</p>
<p>The two generator types (<code>uc_gen</code> and <code>uc_genexp</code>) cannot be <code>reversed()</code>; the plain iterator (<code>uc_iter</code>) would need the <code>__reversed__</code> magic method (which must return a new iterator that goes backwards); and the getitem iteratable (<code>uc_getitem</code>) must have the <code>__len__</code> magic method:</p>
<pre><code>    # for uc_iter
    def __reversed__(self):
        return reversed(self.text)

    # for uc_getitem
    def __len__(self)
        return len(self.text)
</code></pre>
<hr/>
<p>To answer Colonel Panic's secondary question about an infinite lazily evaluated iterator, here are those examples, using each of the four methods above:</p>
<pre><code># generator
def even_gen():
    result = 0
    while True:
        yield result
        result += 2


# generator expression
def even_genexp():
    return (num for num in even_gen())  # or even_iter or even_getitem
                                        # not much value under these circumstances

# iterator protocol
class even_iter():
    def __init__(self):
        self.value = 0
    def __iter__(self):
        return self
    def __next__(self):
        next_value = self.value
        self.value += 2
        return next_value

# getitem method
class even_getitem():
    def __getitem__(self, index):
        return index * 2

import random
for iterator in even_gen, even_genexp, even_iter, even_getitem:
    limit = random.randint(15, 30)
    count = 0
    for even in iterator():
        print even,
        count += 1
        if count &gt;= limit:
            break
    print
</code></pre>
<p>Which results in (at least for my sample run):</p>
<pre><code>0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30
0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all the <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools module</a> is incredibly useful for all sorts of cases in which an iterator would be useful, but here is all you need to create an iterator in python:</p>
<blockquote>
<p>yield</p>
</blockquote>
<p>Isn't that cool?  Yield can be used to replace a normal <strong>return</strong> in a function.  It returns the object just the same, but instead of destroying state and exiting, it saves state for when you want to execute the next iteration.  Here is an example of it in action pulled directly from the <a href="http://docs.python.org/lib/itertools-functions.html" rel="nofollow noreferrer">itertools function list</a>:</p>
<pre><code>def count(n=0):
    while True:
        yield n
        n += 1
</code></pre>
<p>As stated in the functions description (it's the <strong>count()</strong> function from the itertools module...) , it produces an iterator that returns consecutive integers starting with n.</p>
<p><a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">Generator expressions</a> are a whole other can of worms (awesome worms!).  They may be used in place of a <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow noreferrer">List Comprehension</a> to save memory (list comprehensions create a list in memory that is destroyed after use if not assigned to a variable, but generator expressions can create a Generator Object... which is a fancy way of saying Iterator). Here is an example of a generator expression definition:</p>
<pre><code>gen = (n for n in xrange(0,11))
</code></pre>
<p>This is very similar to our iterator definition above except the full range is predetermined to be between 0 and 10.</p>
<p>I just found <strong>xrange()</strong> (suprised I hadn't seen it before...) and added it to the above example.  <strong>xrange()</strong> is an iterable version of <strong>range()</strong> which has the advantage of not prebuilding the list.  It would be  very useful if you had a giant corpus of data to iterate over and only had so much memory to do it in.</p>
</div>
<div class="post-text" itemprop="text">
<p>I see some of you doing <code>return self</code> in <code>__iter__</code>. I just wanted to note that <code>__iter__</code> itself can be a generator (thus removing the need for <code>__next__</code> and raising <code>StopIteration</code> exceptions)</p>
<pre><code>class range:
  def __init__(self,a,b):
    self.a = a
    self.b = b
  def __iter__(self):
    i = self.a
    while i &lt; self.b:
      yield i
      i+=1
</code></pre>
<p>Of course here one might as well directly make a generator, but for more complex classes it can be useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>This question is about iterable objects, not about iterators. In Python, sequences are iterable too so one way to make an iterable class is to  make it behave like a sequence, i.e. give it <code>__getitem__</code> and <code>__len__</code> methods. I have tested this on Python 2 and 3.</p>
<pre><code>class CustomRange:

    def __init__(self, low, high):
        self.low = low
        self.high = high

    def __getitem__(self, item):
        if item &gt;= len(self):
            raise IndexError("CustomRange index out of range")
        return self.low + item

    def __len__(self):
        return self.high - self.low


cr = CustomRange(0, 10)
for i in cr:
    print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is an iterable function without <code>yield</code>. It make use of the <code>iter</code> function and a closure which keeps it's state in a mutable (<code>list</code>) in the enclosing scope for python 2.  </p>
<pre><code>def count(low, high):
    counter = [0]
    def tmp():
        val = low + counter[0]
        if val &lt; high:
            counter[0] += 1
            return val
        return None
    return iter(tmp, None)
</code></pre>
<p>For Python 3, closure state is kept in an immutable in the enclosing scope and <code>nonlocal</code> is used in local scope to update the state variable.  </p>
<pre><code>def count(low, high):
    counter = 0
    def tmp():
        nonlocal counter
        val = low + counter
        if val &lt; high:
            counter += 1
            return val
        return None
    return iter(tmp, None)  
</code></pre>
<p>Test;</p>
<pre><code>for i in count(1,10):
    print(i)
1
2
3
4
5
6
7
8
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All answers on this page are really great for a complex object. But for those containing builtin iterable types as attributes, like <code>str</code>, <code>list</code>, <code>set</code> or <code>dict</code>, or any implementation of <code>collections.Iterable</code>, you can omit certain things in your class.</p>
<pre><code>class Test(object):
    def __init__(self, string):
        self.string = string

    def __iter__(self):
        # since your string is already iterable
        return (ch for ch in string)
</code></pre>
<p>It can  be used like:</p>
<pre><code>for x in Test("abcde"):
    print(x)

# prints
# a
# b
# c
# d
# e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you looking for something short and simple, maybe it will be enough for you:</p>
<pre><code>class A(object):
    def __init__(self, l):
        self.data = l

    def __iter__(self):
        return iter(self.data)
</code></pre>
<p>example of usage:</p>
<pre><code>In [3]: a = A([2,3,4])

In [4]: [i for i in a]
Out[4]: [2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inspired by Matt Gregory's answer here is a bit more complicated iterator that will return a,b,...,z,aa,ab,...,zz,aaa,aab,...,zzy,zzz</p>
<pre><code>    class AlphaCounter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def __next__(self): # Python 3: def __next__(self)
        alpha = ' abcdefghijklmnopqrstuvwxyz'
        n_current = sum([(alpha.find(self.current[x])* 26**(len(self.current)-x-1)) for x in range(len(self.current))])
        n_high = sum([(alpha.find(self.high[x])* 26**(len(self.high)-x-1)) for x in range(len(self.high))])
        if n_current &gt; n_high:
            raise StopIteration
        else:
            increment = True
            ret = ''
            for x in self.current[::-1]:
                if 'z' == x:
                    if increment:
                        ret += 'a'
                    else:
                        ret += 'z'
                else:
                    if increment:
                        ret += alpha[alpha.find(x)+1]
                        increment = False
                    else:
                        ret += x
            if increment:
                ret += 'a'
            tmp = self.current
            self.current = ret[::-1]
            return tmp

for c in AlphaCounter('a', 'zzz'):
    print(c)
</code></pre>
</div>
<span class="comment-copy">There are two questions here, both important. How to make a class iterable (ie. that you can loop over with for)? And how to make a function that returns a sequence with lazy evaluation?</span>
<span class="comment-copy">A good exercise I think is to write a class that represents the even numbers (an infinite sequence).</span>
<span class="comment-copy">@ColonelPanic: Okay, added the infinite number example to <a href="http://stackoverflow.com/a/7542261/208880">my answer</a>.</span>
<span class="comment-copy">Note that the <code>next()</code> function does not <code>yield</code> values, it <code>return</code>s them.</span>
<span class="comment-copy">This is invalid in Python 3--- it has to be <code>__next__()</code>.</span>
<span class="comment-copy">This is mostly a good answer, but the fact that it returns self is a little sub-optimal. For example, if you used the same counter object in a doubly nested for loop you would probably not get the behavior that you meant.</span>
<span class="comment-copy">No, iterators SHOULD return themselves. Iterables return iterators, but iterables shouldn't implement <code>__next__</code>. <code>counter</code> is an iterator, but it is not a sequence. It doesn't store its values. You shouldn't be using the counter in a doubly-nested for-loop, for example.</span>
<span class="comment-copy">In the Counter example, self.current should be assigned in <code>__iter__</code> (in addition to in <code>__init__</code>). Otherwise, the object can be iterated only once.  E.g., if you say <code>ctr = Counters(3, 8)</code>, then you cannot use <code>for c in ctr</code> more than once.</span>
<span class="comment-copy">I like this summary because it is complete. Those three ways (yield, generator expression and iterator) are essentially the same, although some are more convenient than others. The yield operator captures the "continuation" which contains the state (for example the index that we are up to). The information is saved in the "closure" of the continuation. The iterator way saves the same information inside the fields of the iterator, which is essentially the same thing as a closure. The <b>getitem</b> method is a little different because it indexes into the contents and is not iterative in nature.</span>
<span class="comment-copy">You aren't incrementing the index in your last approach, <code>uc_getitem()</code> . Actually on reflection, it shouldnt increment the index, because it is not maintaining it. But it also is not a way to abstract iteration.</span>
<span class="comment-copy">@metaperl: Actually, it is.  In all four of the above cases you can use the same code to iterate.</span>
<span class="comment-copy">@EthanFurman I am not an expert, but should there not be a reset of the index in the uc_iter class? I.e. inside <b>iter</b> method set self.index to 0 so that the next invocation of the iterator works</span>
<span class="comment-copy">If you could spare the time I would appreciate an explanation for why you would choose any of the methods over the others.</span>
<span class="comment-copy">as of python 3.0 there is no longer an xrange() and the new range() behaves like the old xrange()</span>
<span class="comment-copy">You should still use xrange in 2._, because 2to3 translates it automatically.</span>
<span class="comment-copy">Great! It so boring writing just <code>return self</code> in <code>__iter__</code>. When I was going to try using <code>yield</code> in it I found your code doing exactly what I want to try.</span>
<span class="comment-copy">But in this case, how would one implement <code>next()</code>? <code>return iter(self).next()</code>?</span>
<span class="comment-copy">@Lenna, it is already "implemented" because iter(self) returns an iterator, not a range instance.</span>
<span class="comment-copy">This the easiest way of doing it, and doesn't involve having to keep track of e.g. <code>self.current</code> or any other counter. This should be the top-voted answer!</span>
<span class="comment-copy">To be clear, this approach makes your class <i>iterable</i>, but not an <i>iterator</i>. You get fresh <i>iterators</i> every time you call <code>iter</code> on instances of the class, but they're not themselves instances of the class.</span>
<span class="comment-copy">I always appreciate a clever use of two-arg <code>iter</code>, but just to be clear: This is more complex and less efficient than just using a <code>yield</code> based generator function; Python has a ton of interpreter support for <code>yield</code> based generator functions that you can't take advantage of here, making this code significantly slower.  Up-voted nonetheless.</span>
