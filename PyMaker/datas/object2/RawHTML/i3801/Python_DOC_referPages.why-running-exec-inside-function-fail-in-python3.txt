<div class="post-text" itemprop="text">
<p>Results running the code for python3:</p>
<pre><code>------- input option 1 - exec code is executed --------
0 - for running inside function, 1 - for running in main programa: 1
option = 1
10

------- input option 0 - exec code not executed inside function ----
0 - for running inside function, 1 - for running in main programa: 0
option = 0
code inside execfunction =&gt; A = 10
Traceback (most recent call last):
  File "myexec.py", line 19, in &lt;module&gt;
    print(A)    
NameError: name 'A' is not defined
---------------------Code --------------------------
</code></pre>
<p><strong>myexec.py</strong></p>
<pre><code>def execfunction(icode):
    print('code inside execfunction =&gt; %s' %(icode))
    exec(icode)

option = int(input("0 - for running inside function, 1 - for running in main programa: "))

print('option = %d' %(option))

code = 'A = 10'

if (option == 1):
    exec(code)
else:
    execfunction(code)  

print(A) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really want <code>execfunction</code> to execute the function in the global scope, you can do</p>
<pre><code>def execfunction(code):
    exec(code, globals())
</code></pre>
<p>Then, this will make the calls to <code>execfunction</code> execute in the global scope, instead of only in the local scope of the function.</p>
<p>For reference: <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#exec</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Is it because exec is a function in python 3 but a statement in python 2?
<a href="https://stackoverflow.com/questions/15086040/behavior-of-exec-function-in-python-2-and-python-3">Have a look at this discussion</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Python compiler will LOAD GLOBAL on encountering the print statement, where it fails as undefined variable 'A'. If you try to disassemble  your code [import dis], you will get to see the execution of the backend process call.</p>
<p>A nice and well defined explanation is given in this
<a href="https://stackoverflow.com/questions/25076883/creating-dynamically-named-variables-in-a-function-in-python-3-understanding-e">Creating dynamically named variables in a function in python 3 / Understanding exec / eval / locals in python 3
</a></p>
</div>
<span class="comment-copy">The code does not "fail". The variable has a different scope if the code is executed within the function. Move the print inside the function and you will see.</span>
<span class="comment-copy">@MikeScotty Thats what I thought, that <code>A</code> was a local variable of the function <code>execfunction()</code> but I tried to <code>print(A)</code> and it still doesn't work, very weird. idk why.</span>
<span class="comment-copy">I did like this, and still not working:</span>
<span class="comment-copy">#myexec.py   def execfunction(icode):     print('code inside execfunction =&gt; %s' %(icode))     exec(icode)     print(A)  option = int(input("0 - for running inside function, 1 - for running in main programa: "))  print('option = %d' %(option))  code = 'A = 10'  if (option == 1):     exec(code)     print(A) else:     execfunction(code)</span>
<span class="comment-copy">Sorry I dont konw how to upgrade my code in this tool</span>
<span class="comment-copy">This works and it is not complcated!</span>
<span class="comment-copy">No, that wouldn't matter in this case. That only matters when passing exec itself as a function. E.g., <code>map(exec, ["a = 1", "b+=2", "c=3"])</code> would work in Python 3, but fails in Python 2. His issue is with scoping.</span>
<span class="comment-copy">Thanks for your attention! I have read the discussion. The workaround suggested is too complicated if one wants to keep his code easy to understand.</span>
<span class="comment-copy">Edward, Thanks, right, scoping. Maybe the compatibility with python3 should have been kept in this case.</span>
<span class="comment-copy">thanks for your link! I have read the link and it seems to be too complicated for a thing that should be simple</span>
