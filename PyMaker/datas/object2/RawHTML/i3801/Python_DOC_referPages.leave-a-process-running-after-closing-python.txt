<div class="post-text" itemprop="text">
<p>I'm looking to leave a process running after terminating the original process.</p>
<p>The following code will not keep it's process running after killing the original.</p>
<pre><code>args = ['yes']
Popen(args, shell=True, stdout=None, stdin=None, stderror=None)
</code></pre>
<p>I've tried everything I can think of, I've used variations of os.spawn() and could not get them to stay open.</p>
<p>It seems to send a keyboard interrupt to the child process(the command yes).</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that even though your subprocess doesn't have access to the console via the standard streams, it will still have a <em>controlling terminal</em>; a process can receive signals such as TSTP (stop, ^Z) and INT (^C) from its controlling terminal. Therefore what you want to have is to detach the process from the controlling terminal and the entire session. When you do this, you'll have a proper daemon process.</p>
<p>In C world and in Python 2 you can achieve this by calling <a href="https://stackoverflow.com/questions/45911705/why-use-os-setsid-in-python"><code>setsid</code></a> in the <em>child</em> process, which will create a new session for the child process. Additionally the new session will not have a controlling terminal. </p>
<p>In Python 3.2+ this is even easier - just pass in <code>start_new_session=True</code> to the <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer"><code>Popen</code></a>:</p>
<blockquote>
<p>If <code>start_new_session</code> is true the <code>setsid()</code> system call will be made in the child process prior to the execution of the subprocess. (POSIX only)</p>
<p>Changed in version 3.2: <code>start_new_session</code> was added.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If handling the multiprocess interface seems too complex there is a application called 'screen' available on most linux distributions that you can call with a one-shot commandline and it will stay active. It is full-featured and easy to interact with.  </p>
<p>it is called something like this.</p>
<pre><code>#!/usr/bin/python
import subprocess
subprocess.call(["screen", "-S", "session_name", "-X", "stuff", "'command here'`echo -ne '\015'`"])
</code></pre>
<p>please remember to check out the <strong>man page</strong> for what each option does and all the features that are available.</p>
<p>I have used this in the past to run watchdog processes on remote servers.
later you can reconnect to the session by invoking screen as follows</p>
<pre><code>screen -d -r -S "session_name"
</code></pre>
<p>When ready to disconnect from the screen process and leave it active you issue the following key-sequence at the commandline.</p>
<pre><code>Ctl-a Ctl-d
</code></pre>
<p>also remember the command to list all available commands</p>
<pre><code>Ctl-a ?
</code></pre>
<p>When outside of screen if you want to see all the instances available use the command</p>
<pre><code>screen -l
</code></pre>
<p>original reference from <a href="https://stackoverflow.com/questions/24481876/how-to-send-command-via-python-to-running-screen-ubuntu-12-04?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Try disabling the command that closes the terminal.</p>
</div>
<span class="comment-copy">@DyZ That does not answer my question, As you can see above I am using the subprocess module but the issue persists.</span>
<span class="comment-copy">reopened. @DyZ that was possibly the worst hammering I've seen this year.</span>
<span class="comment-copy">Thanks Antti! This works correctly. Also note to anyone else that found this solution, If you are using PyCharm, it will automatically kill the new session on close. It works when i run it from my terminal instead.</span>
<span class="comment-copy">I believe PyCharm does some dark magic to track whatever processes are running under it so that it can kill them.</span>
<span class="comment-copy">The point of this question is to be able to close the terminal. Use python to run some command, end that process and anything spawned by python stays up.</span>
