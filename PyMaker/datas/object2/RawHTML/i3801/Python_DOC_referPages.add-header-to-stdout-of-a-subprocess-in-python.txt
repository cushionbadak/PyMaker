<div class="post-text" itemprop="text">
<p>I am merging several dataframes into one and sorting them using <code>unix sort</code>. Before I write the final sorted data I would like to add a prefix/header to that output.</p>
<p>So, my code is something like: </p>
<pre><code>my_cols =  '\t'.join(['CHROM', 'POS', "REF" ....])

my_cmd = ["sort", "-k1,2", "-V", "final_merged.txt"]

with open(output + 'mergedAndSorted.txt', 'w') as sort_data:
    sort_data.write(my_cols + '\n')  
    subprocess.run(my_cmd, stdout=sort_data)
</code></pre>
<p>But, this above doe puts <code>my_cols</code> at the end of the final output file (i.e <strong>mergedAndSorted.txt</strong>)</p>
<p>I also tried substituting:</p>
<pre><code>sort_data=io.StringIO(my_cols)  
</code></pre>
<p>but this gives me an error as I had expected.</p>
<p><br/></p>
<p>How can I add that header to the begining of the subprocess output. I believe this can be achieved by a simple code change.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is a matter of buffering; the tldr is that you can fix it like this:</p>
<pre><code>sort_data.write(my_cols + '\n')
sort_data.flush()
subprocess.run(my_cmd, stdout=sort_data)
</code></pre>
<p>If you want to understand why it happens, and how the fix solves it:</p>
<p>When you open a file in text mode, you're opening a buffered file. Writes go into the buffer, and the file object doesn't necessarily flush them to disk immediately. (There's also stream-encoding from Unicode to bytes going on, but that doesn't really add a new problem, it just adds two layers where the same thing can happen, so let's ignore that.)</p>
<p>As long as all of your writes are to the buffered file object, that's fine—they get sequenced properly in the buffer, so they get sequenced properly on the disk.</p>
<p>But if you write to the underlying <code>sort_data.buffer.raw</code> disk file, or to the <code>sort_data.fileno()</code> OS file descriptor, those writes may get ahead of the ones that went to <code>sort_data</code>.</p>
<p>And that's exactly what happens when you use the file as a pipe in <code>subprocess</code>. This doesn't seem to be explained directly, but can be inferred from <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer">Frequently Used Arguments</a>:</p>
<blockquote>
<p><em>stdin</em>, <em>stdout</em> and <em>stderr</em> specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are <code>PIPE</code>, <code>DEVNULL</code>, an existing file descriptor (a positive integer), an existing file object, and <code>None</code>.</p>
</blockquote>
<p>This implies pretty strongly—if you know enough about the way piping works on *nix and Windows—that it's passing the actual file descriptor/handle to the underlying OS functionality. But it doesn't actually say that. To really be sure, you have to check <a href="https://github.com/python/cpython/blob/3.6/Lib/subprocess.py#L1154" rel="nofollow noreferrer">the Unix source</a> and <a href="https://github.com/python/cpython/blob/3.6/Lib/subprocess.py#L878" rel="nofollow noreferrer">Windows source</a>, where you can see that it is calling <code>fileno</code> or <code>msvcrt.get_osfhandle</code> on the file objects.</p>
</div>
<span class="comment-copy">What does it do wrong? Without telling us that, we can only guess what’s wrong with the code that’s causing it to do something wrong.</span>
<span class="comment-copy">@abarnert : you can see that one of the <code>sort_data=io.StringIO .</code> doesnt work at all. The another one <code>sort_data.write(my_cols + '\n')</code> puts the string at the end of the output file, though it should put it in the beginning.</span>
<span class="comment-copy">I am not sure why the question as simple and clear as this is voted to be closed. Also, I google for more than an hour to find a solution online and tried several code changes to fix it. Why are people so jumpy to close/downvote the question without even reading it fully. Plus, this question is so comprehensive and detailed as it should be.</span>
<span class="comment-copy">Really? How can I see that it doesn't work? I can't run it, because of that <code>....</code>, and not knowing what's in <code>mergedAndSorted.txt</code>, and, even if I could, it doesn't actually produce any output, so how could I see what's wrong with what it's doing? Your edit does explain what it does wrong instead of making us guess, which is a huge improvement—but it's even farther from a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, because it adds a <code>NameError</code> on <code>output</code>. If you're offended by comments asking you for missing information, read the help and include that information in the first place.</span>
<span class="comment-copy">As for downvotes… honestly, you usually don't get them back after you fix the most serious problems in your question (because the original voter usually doesn't come back), but if you edit the question into a good one, you usually get more than enough upvotes to make up for it. But you really shouldn't be focused so much on votes; surely whether or not you get an answer that helps you is more important to you than meaningless internet points?</span>
