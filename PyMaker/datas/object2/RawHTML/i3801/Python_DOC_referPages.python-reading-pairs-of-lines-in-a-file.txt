<div class="post-text" itemprop="text">
<p>I am wanting to read pairs of lines in from a file, and perform operations on them. How do I go about doing this in Python?</p>
<p>I can read the file once with the code below, but I don't know how to turn this into being able to read a whole file of lets say 20 lines, with the rest of my code having to operate on the 10 sets of data that the 20 line file has. There will always be an even amount of lines in the input file.</p>
<pre><code>import sys
input = sys.stdin
favouriteNumbersInput = []

with open("test.txt", 'r') as infile:
    lines_gen = islice(infile, 2)
    for line in lines_gen:

        favouriteNumbersInput.append(line.strip(' ').strip('\n'))
        firstName,lastName = map(str,line.split(" "))
        favouriteNumbers = list(map(int, favouriteNumbersInput))
</code></pre>
<p>Input:</p>
<pre><code>3, 1, 5, 2
John Doe
5, 1, 6, 7
Jane Doe
</code></pre>
<p>Output:</p>
<pre><code>Sum of favourite numbers for John Doe: 11
Sum of favourite numbers for Jane Doe: 19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4+ (3.6+ for the f-string usage), how about this:</p>
<pre><code>from pathlib import Path

flines = Path('test.txt').read_text().splitlines()
nums =  [sum([int(n) for n in l.split(',')]) for l in flines[0::2]]
names = [' '.join(l.split()) for l in flines[1::2]]

for name, num in zip(names, nums):
    print(f"Sum of favorite numbers for {name}: {num}")
</code></pre>
<p>Note that I did not neglect the <code>with ...</code> context manager - <code>Path()</code> handles that for you.</p>
<p>I'm not clear on what you're trying to do with the 'name' line - looks like a no-op, which is how I coded it, but you could wrap the <code>l.split()</code> in <code>reversed()</code> to flip the order.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one easy way to do:</p>
<pre><code>with open('file.txt') as f:
    lines = f.readlines()

x = 0
while x &lt; len(lines):
    print('Sum of favourite numbers for {}: {}'.format(lines[x+1], sum(map(int, lines[x].split(',')))))
    x += 2

# Sum of favourite numbers for John Doe: 11
# Sum of favourite numbers for Jane Doe: 19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I propose to iterate manually in the file with <code>next</code> and use an infinite loop.</p>
<p>When there are no more lines, <code>next</code> throws <code>StopIteration</code> exception, that's where we break the loop.</p>
<p>Then the classic elegant way of summing a comma-separated list of integers is to split then map to integer conversion and feed to <code>sum</code></p>
<pre><code>import sys

with open("test.txt") as infile:
    while True:
        try:
            total = sum(map(int,next(infile).split(",")))
            name = next(infile).rstrip()  # remove linefeed from name
            print("Sum of favourite numbers for {} : {}".format(name,total))
        except StopIteration:
            break
</code></pre>
<p>prints:</p>
<pre><code>Sum of favourite numbers for John Doe : 11
Sum of favourite numbers for Jane Doe : 19
</code></pre>
<p>If the file has an odd number of lines, the last line information is dropped since the <code>StopIteration</code> exception happens when reading the name information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at itertools.islice: <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">https://docs.python.org/3/library/itertools.html#itertools.islice</a></p>
<pre><code>from itertools import islice

with open(&lt;path&gt;) as f:
    lines = list(islice(f, 2))
    while lines:
        print(repr(lines))
        lines = list(islice(f, 2))
</code></pre>
</div>
<span class="comment-copy">with a loop? what's your real issue? you seem to have done the hard part already</span>
<span class="comment-copy">It seems that you are not reading from a file, instead you are reading from stdin. If you want to get even/odd elements from list, then you may use list slicing as <code>even = lst[0:20:2]</code>, <code>odd = lst[1:20:2]</code></span>
<span class="comment-copy">The real issue is reading the lines in pairs and storing the data correctly, which I can't seem to be able to do</span>
<span class="comment-copy">I tried with what I have and after a bit of googling I got it to look like what is in my original post, which I have updated.</span>
