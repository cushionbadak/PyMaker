<div class="post-text" itemprop="text">
<p>I want to calculate the length of (any number of) line segments using Python. I used the following code, but I encounter that tuples can not have subtraction as operands. How can I overcome that? I would like to know if I missed any important Python concept.</p>
<pre><code>from itertools import starmap
import math
class Point(object):
    def __init__(self,x,y):
        self.x=x
        self.y=y
    def move(self,dx,dy):
        self.x+=dx
        self.y+=dy


class LineString(object):

    def __init__(self,*args): # A method with any number of arguments, args

        self.args=[Point(*args) for p in args] # A list of Points

    def length(self):
        pairs=zip(self.args, self.args[1:])
        return sum(starmap(distance,pairs))

def distance(p1, p2):
    a = p1.x,p1.y
    b = p2.x,p2.y

    print (math.sqrt((a[0]-b[0])**2-(a[1]-b[1])**2))
    # calculates distance between two given points p1 and p2
    return math.sqrt((a** 2)+ (b** 2))


if __name__ == '__main__':
    # Tests for LineString
    # ===================================
    lin1 = LineString((1, 1), (0, 2))

    assert lin1.length() == sqrt(2.0)

    lin1.move(-1, -1) # Move by -1 and -1 for x and y respectively

    assert lin1[0].y == 0 # Inspect the y value of the start point.
    # Implement this by overloading __getitem__(self, key) in your class.

    lin2 = LineString((1, 1), (1, 2), (2, 2))

    assert lin2.length() == 2.0

    lin2.move(-1, -1) # Move by -1 and -1 for x and y respectively

    assert lin2.length() == 2.0

    assert lin2[-1].x == 1 # Inspect the x value of the end point.

    print ('Success! Line tests passed!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already mentioned, it has to be <code>Point(*p)</code> intead of <code>Point(*args)</code>. The latter would pass <em>all</em> the point-tuples to the constructor of each point. You also have to fix <code>distance</code>, though.</p>
<pre><code>def __init__(self, *args):
    self.args=[Point(*p) for p in args]

def distance(p1, p2):
    return math.sqrt((p1.x-p2.x)**2 + (p1.y-p2.y)**2)
</code></pre>
<p>However, instead of creating your own <code>Point</code> class, an "important Python concept" that you can use instead are built-in <a href="https://docs.python.org/3/library/functions.html#complex" rel="nofollow noreferrer"><code>complex</code></a> <a href="https://en.wikipedia.org/wiki/Complex_number" rel="nofollow noreferrer">numbers</a>, making <code>distance</code> much simpler:</p>
<pre><code>def __init__(self, *args):
    self.args=[complex(*p) for p in args]

def distance(p1, p2):
    return abs(p1 - p2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't support exponentiation (and other math operations) for tuples. While it's possible to have code like this:</p>
<pre><code>print (1, 2) * 3       # produces (1, 2, 1, 2, 1, 2)
print (1, 2) + (1, 2)  # produces (1, 2, 1, 2)
</code></pre>
<p>it's not a vector computations on the entire tuple. It's just a syntactic sugar for tuples concatenation.</p>
<p>Also it seems that the snippet has a few typos/bugs. </p>
<p>The line <code>self.args=[Point(*args) for p in args]</code> should be rather <code>self.args=[Point(*p) for p in args]</code></p>
<p>Class <code>LineString</code> doesn't have <code>move()</code> method.</p>
<p>And the <code>distance()</code> calculation should be slightly changed (notice that I replaced <code>-</code> with <code>+</code> in the formula):</p>
<pre><code>return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2)
</code></pre>
</div>
