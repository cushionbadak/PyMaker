<div class="post-text" itemprop="text">
<p>I have two lists in Python, like these:</p>
<pre><code>temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two']
</code></pre>
<p>I need to create a third list with items from the first list which aren't present in the second one. From the example I have to get:</p>
<pre><code>temp3 = ['Three', 'Four']
</code></pre>
<p>Are there any fast ways without cycles and checking?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [5]: list(set(temp1) - set(temp2))
Out[5]: ['Four', 'Three']
</code></pre>
<p>Beware that </p>
<pre><code>In [5]: set([1, 2]) - set([2, 3])
Out[5]: set([1]) 
</code></pre>
<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you'll need to use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The existing solutions all offer either one or the other of:</p>
<ul>
<li>Faster than O(n*m) performance.</li>
<li>Preserve order of input list.</li>
</ul>
<p>But so far no solution has both. If you want both, try this:</p>
<pre><code>s = set(temp2)
temp3 = [x for x in temp1 if x not in s]
</code></pre>
<p><strong>Performance test</strong></p>
<pre><code>import timeit
init = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'
print timeit.timeit('list(set(temp1) - set(temp2))', init, number = 100000)
print timeit.timeit('s = set(temp2);[x for x in temp1 if x not in s]', init, number = 100000)
print timeit.timeit('[item for item in temp1 if item not in temp2]', init, number = 100000)
</code></pre>
<p>Results:</p>
<pre><code>4.34620224079 # ars' answer
4.2770634955  # This answer
30.7715615392 # matt b's answer
</code></pre>
<p>The method I presented as well as preserving order is also (slightly) faster than the set subtraction because it doesn't require construction of an unnecessary set. The performance difference would be more noticable if the first list is considerably longer than the second and if hashing is expensive. Here's a second test demonstrating this:</p>
<pre><code>init = '''
temp1 = [str(i) for i in range(100000)]
temp2 = [str(i * 2) for i in range(50)]
'''
</code></pre>
<p>Results:</p>
<pre><code>11.3836875916 # ars' answer
3.63890368748 # this answer (3 times faster!)
37.7445402279 # matt b's answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>temp3 = [item for item in temp1 if item not in temp2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The difference between two lists (say list1 and list2) can be found using the following simple function.</p>
<pre><code>def diff(list1, list2):
    c = set(list1).union(set(list2))  # or c = set(list1) | set(list2)
    d = set(list1).intersection(set(list2))  # or d = set(list1) &amp; set(list2)
    return list(c - d)
</code></pre>
<p>or</p>
<pre><code>def diff(list1, list2):
    return list(set(list1).symmetric_difference(set(list2)))  # or return list(set(list1) ^ set(list2))
</code></pre>
<p>By Using the above function, the difference can be found using <code>diff(temp2, temp1)</code> or <code>diff(temp1, temp2)</code>. Both will give the result <code>['Four', 'Three']</code>. You don't have to worry about the order of the list or which list is to be given first.</p>
<p><a href="https://docs.python.org/2/library/sets.html#set-objects" rel="noreferrer">Python doc reference</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In case you want the difference recursively, I have written a package for python:
<a href="https://github.com/seperman/deepdiff">https://github.com/seperman/deepdiff</a></p>
<h2>Installation</h2>
<p>Install from PyPi:</p>
<pre><code>pip install deepdiff
</code></pre>
<h2>Example usage</h2>
<p>Importing</p>
<pre><code>&gt;&gt;&gt; from deepdiff import DeepDiff
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; from __future__ import print_function # In case running on Python 2
</code></pre>
<p>Same object returns empty</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = t1
&gt;&gt;&gt; print(DeepDiff(t1, t2))
{}
</code></pre>
<p>Type of an item has changed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = {1:1, 2:"2", 3:3}
&gt;&gt;&gt; pprint(DeepDiff(t1, t2), indent=2)
{ 'type_changes': { 'root[2]': { 'newtype': &lt;class 'str'&gt;,
                                 'newvalue': '2',
                                 'oldtype': &lt;class 'int'&gt;,
                                 'oldvalue': 2}}}
</code></pre>
<p>Value of an item has changed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3}
&gt;&gt;&gt; pprint(DeepDiff(t1, t2), indent=2)
{'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}
</code></pre>
<p>Item added and/or removed</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:4}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3, 5:5, 6:6}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff)
{'dic_item_added': ['root[5]', 'root[6]'],
 'dic_item_removed': ['root[4]'],
 'values_changed': {'root[2]': {'newvalue': 4, 'oldvalue': 2}}}
</code></pre>
<p>String difference</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world"}}
&gt;&gt;&gt; t2 = {1:1, 2:4, 3:3, 4:{"a":"hello", "b":"world!"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'values_changed': { 'root[2]': {'newvalue': 4, 'oldvalue': 2},
                      "root[4]['b']": { 'newvalue': 'world!',
                                        'oldvalue': 'world'}}}
</code></pre>
<p>String difference 2</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world!\nGoodbye!\n1\n2\nEnd"}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world\n1\n2\nEnd"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'values_changed': { "root[4]['b']": { 'diff': '--- \n'
                                                '+++ \n'
                                                '@@ -1,5 +1,4 @@\n'
                                                '-world!\n'
                                                '-Goodbye!\n'
                                                '+world\n'
                                                ' 1\n'
                                                ' 2\n'
                                                ' End',
                                        'newvalue': 'world\n1\n2\nEnd',
                                        'oldvalue': 'world!\n'
                                                    'Goodbye!\n'
                                                    '1\n'
                                                    '2\n'
                                                    'End'}}}

&gt;&gt;&gt; 
&gt;&gt;&gt; print (ddiff['values_changed']["root[4]['b']"]["diff"])
--- 
+++ 
@@ -1,5 +1,4 @@
-world!
-Goodbye!
+world
 1
 2
 End
</code></pre>
<p>Type change</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":"world\n\n\nEnd"}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'type_changes': { "root[4]['b']": { 'newtype': &lt;class 'str'&gt;,
                                      'newvalue': 'world\n\n\nEnd',
                                      'oldtype': &lt;class 'list'&gt;,
                                      'oldvalue': [1, 2, 3]}}}
</code></pre>
<p>List difference</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3, 4]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{'iterable_item_removed': {"root[4]['b'][2]": 3, "root[4]['b'][3]": 4}}
</code></pre>
<p>List difference 2:</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 3, 2, 3]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'iterable_item_added': {"root[4]['b'][3]": 3},
  'values_changed': { "root[4]['b'][1]": {'newvalue': 3, 'oldvalue': 2},
                      "root[4]['b'][2]": {'newvalue': 2, 'oldvalue': 3}}}
</code></pre>
<p>List difference ignoring order or duplicates: (with the same dictionaries as above)</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, 3]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 3, 2, 3]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2, ignore_order=True)
&gt;&gt;&gt; print (ddiff)
{}
</code></pre>
<p>List that contains dictionary:</p>
<pre><code>&gt;&gt;&gt; t1 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, {1:1, 2:2}]}}
&gt;&gt;&gt; t2 = {1:1, 2:2, 3:3, 4:{"a":"hello", "b":[1, 2, {1:3}]}}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (ddiff, indent = 2)
{ 'dic_item_removed': ["root[4]['b'][2][2]"],
  'values_changed': {"root[4]['b'][2][1]": {'newvalue': 3, 'oldvalue': 1}}}
</code></pre>
<p>Sets:</p>
<pre><code>&gt;&gt;&gt; t1 = {1, 2, 8}
&gt;&gt;&gt; t2 = {1, 2, 3, 5}
&gt;&gt;&gt; ddiff = DeepDiff(t1, t2)
&gt;&gt;&gt; pprint (DeepDiff(t1, t2))
{'set_item_added': ['root[3]', 'root[5]'], 'set_item_removed': ['root[8]']}
</code></pre>
<p>Named Tuples:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', ['x', 'y'])
&gt;&gt;&gt; t1 = Point(x=11, y=22)
&gt;&gt;&gt; t2 = Point(x=11, y=23)
&gt;&gt;&gt; pprint (DeepDiff(t1, t2))
{'values_changed': {'root.y': {'newvalue': 23, 'oldvalue': 22}}}
</code></pre>
<p>Custom objects:</p>
<pre><code>&gt;&gt;&gt; class ClassA(object):
...     a = 1
...     def __init__(self, b):
...         self.b = b
... 
&gt;&gt;&gt; t1 = ClassA(1)
&gt;&gt;&gt; t2 = ClassA(2)
&gt;&gt;&gt; 
&gt;&gt;&gt; pprint(DeepDiff(t1, t2))
{'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}
</code></pre>
<p>Object attribute added:</p>
<pre><code>&gt;&gt;&gt; t2.c = "new attribute"
&gt;&gt;&gt; pprint(DeepDiff(t1, t2))
{'attribute_added': ['root.c'],
 'values_changed': {'root.b': {'newvalue': 2, 'oldvalue': 1}}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are really looking into performance, then use numpy!</p>
<p>Here is the full notebook as a gist on github with comparison between list, numpy, and pandas.</p>
<p><a href="https://gist.github.com/denfromufa/2821ff59b02e9482be15d27f2bbd4451" rel="noreferrer">https://gist.github.com/denfromufa/2821ff59b02e9482be15d27f2bbd4451</a></p>
<p><a href="https://i.stack.imgur.com/lhT55.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/lhT55.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>i'll toss in since none of the present solutions yield a tuple:</p>
<pre><code>temp3 = tuple(set(temp1) - set(temp2))
</code></pre>
<p>alternatively:</p>
<pre><code>#edited using @Mark Byers idea. If you accept this one as answer, just accept his instead.
temp3 = tuple(x for x in temp1 if x not in set(temp2))
</code></pre>
<p>Like the other non-tuple yielding answers in this direction, it preserves order</p>
</div>
<div class="post-text" itemprop="text">
<p>Can be done using python XOR operator.</p>
<ul>
<li>This will remove the duplicates in each list</li>
<li>This will show difference of temp1 from temp2 and temp2 from temp1.</li>
</ul>
<hr/>
<pre><code>set(temp1) ^ set(temp2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>most simple way,</p>
<p>use <strong>set().difference(set())</strong></p>
<pre><code>list_a = [1,2,3]
list_b = [2,3]
print set(list_a).difference(set(list_b))
</code></pre>
<p>answer is <code>set([1])</code></p>
<p>can print as a list,</p>
<pre><code>print list(set(list_a).difference(set(list_b)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>temp3 = set(temp1) - set(temp2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this could be even faster than Mark's list comprehension:</p>
<pre><code>list(itertools.filterfalse(set(temp2).__contains__, temp1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wanted something that would take two lists and could do what <code>diff</code> in <code>bash</code> does. Since this question pops up first when you search for "python diff two lists" and is not very specific, I will post what I came up with.</p>
<p>Using <a href="https://docs.python.org/3.5/library/difflib.html#difflib.SequenceMatcher" rel="noreferrer"><code>SequenceMather</code></a> from <code>difflib</code> you can compare two lists like <code>diff</code> does. None of the other answers will tell you the position where the difference occurs, but this one does. Some answers give the difference in only one direction. Some reorder the elements. Some don't handle duplicates. But this solution gives you a true difference between two lists:</p>
<pre><code>a = 'A quick fox jumps the lazy dog'.split()
b = 'A quick brown mouse jumps over the dog'.split()

from difflib import SequenceMatcher

for tag, i, j, k, l in SequenceMatcher(None, a, b).get_opcodes():
  if tag == 'equal': print('both have', a[i:j])
  if tag in ('delete', 'replace'): print('  1st has', a[i:j])
  if tag in ('insert', 'replace'): print('  2nd has', b[k:l])
</code></pre>
<p>This outputs:</p>
<pre><code>both have ['A', 'quick']
  1st has ['fox']
  2nd has ['brown', 'mouse']
both have ['jumps']
  2nd has ['over']
both have ['the']
  1st has ['lazy']
both have ['dog']
</code></pre>
<p>Of course, if your application makes the same assumptions the other answers make, you will benefit from them the most. But if you are looking for a true <code>diff</code> functionality, then this is the only way to go.</p>
<p>For example, none of the other answers could handle:</p>
<pre><code>a = [1,2,3,4,5]
b = [5,4,3,2,1]
</code></pre>
<p>But this one does:</p>
<pre><code>  2nd has [5, 4, 3, 2]
both have [1]
  1st has [2, 3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a naive method if the elements of the difflist are sorted and sets.</p>
<pre><code>list1=[1,2,3,4,5]
list2=[1,2,3]

print list1[len(list2):]
</code></pre>
<p>or with native set methods:</p>
<pre><code>subset=set(list1).difference(list2)

print subset

import timeit
init = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'
print "Naive solution: ", timeit.timeit('temp1[len(temp2):]', init, number = 100000)
print "Native set solution: ", timeit.timeit('set(temp1).difference(temp2)', init, number = 100000)
</code></pre>
<p>Naive solution:  0.0787101593292</p>
<p>Native set solution:  0.998837615564</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a <code>Counter</code> answer for the simplest case.</p>
<p>This is shorter than the one above that does two-way diffs because it only does exactly what the question asks: generate a list of what's in the first list but not the second.</p>
<pre><code>from collections import Counter

lst1 = ['One', 'Two', 'Three', 'Four']
lst2 = ['One', 'Two']

c1 = Counter(lst1)
c2 = Counter(lst2)
diff = list((c1 - c2).elements())
</code></pre>
<p>Alternatively, depending on your readability preferences, it makes for a decent one-liner:</p>
<pre><code>diff = list((Counter(lst1) - Counter(lst2)).elements())
</code></pre>
<p>Output:</p>
<pre><code>['Three', 'Four']
</code></pre>
<p><em>Note that you can remove the <code>list(...)</code> call if you are just iterating over it.</em></p>
<p>Because this solution uses counters, it handles quantities properly vs the many set-based answers.  For example on this input:</p>
<pre><code>lst1 = ['One', 'Two', 'Two', 'Two', 'Three', 'Three', 'Four']
lst2 = ['One', 'Two']
</code></pre>
<p>The output is:</p>
<pre><code>['Two', 'Two', 'Three', 'Three', 'Four']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you run into <code>TypeError: unhashable type: 'list'</code> you need to turn lists or sets into tuples, e.g.</p>
<pre><code>set(map(tuple, list_of_lists1)).symmetric_difference(set(map(tuple, list_of_lists2)))
</code></pre>
<p>See also <a href="https://stackoverflow.com/questions/6105777/how-to-compare-a-list-of-lists-sets-in-python">How to compare a list of lists/sets in python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I am little too late in the game for this but you can do a comparison of performance of some of the above mentioned code with this, two of the fastest contenders are,</p>
<pre><code>list(set(x).symmetric_difference(set(y)))
list(set(x) ^ set(y))
</code></pre>
<p>I apologize for the elementary level of coding.</p>
<pre><code>import time
import random
from itertools import filterfalse

# 1 - performance (time taken)
# 2 - correctness (answer - 1,4,5,6)
# set performance
performance = 1
numberoftests = 7

def answer(x,y,z):
    if z == 0:
        start = time.clock()
        lists = (str(list(set(x)-set(y))+list(set(y)-set(y))))
        times = ("1 = " + str(time.clock() - start))
        return (lists,times)

    elif z == 1:
        start = time.clock()
        lists = (str(list(set(x).symmetric_difference(set(y)))))
        times = ("2 = " + str(time.clock() - start))
        return (lists,times)

    elif z == 2:
        start = time.clock()
        lists = (str(list(set(x) ^ set(y))))
        times = ("3 = " + str(time.clock() - start))
        return (lists,times)

    elif z == 3:
        start = time.clock()
        lists = (filterfalse(set(y).__contains__, x))
        times = ("4 = " + str(time.clock() - start))
        return (lists,times)

    elif z == 4:
        start = time.clock()
        lists = (tuple(set(x) - set(y)))
        times = ("5 = " + str(time.clock() - start))
        return (lists,times)

    elif z == 5:
        start = time.clock()
        lists = ([tt for tt in x if tt not in y])
        times = ("6 = " + str(time.clock() - start))
        return (lists,times)

    else:    
        start = time.clock()
        Xarray = [iDa for iDa in x if iDa not in y]
        Yarray = [iDb for iDb in y if iDb not in x]
        lists = (str(Xarray + Yarray))
        times = ("7 = " + str(time.clock() - start))
        return (lists,times)

n = numberoftests

if performance == 2:
    a = [1,2,3,4,5]
    b = [3,2,6]
    for c in range(0,n):
        d = answer(a,b,c)
        print(d[0])

elif performance == 1:
    for tests in range(0,10):
        print("Test Number" + str(tests + 1))
        a = random.sample(range(1, 900000), 9999)
        b = random.sample(range(1, 900000), 9999)
        for c in range(0,n):
            #if c not in (1,4,5,6):
            d = answer(a,b,c)
            print(d[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is another solution:</p>
<pre><code>def diff(a, b):
    xa = [i for i in set(a) if i not in b]
    xb = [i for i in set(b) if i not in a]
    return xa + xb
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>single line version of <strong>arulmr</strong> solution</p>
<pre><code>def diff(listA, listB):
    return set(listA) - set(listB) | set(listA) -set(listB)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you want something more like a changeset... could use Counter</p>
<pre><code>from collections import Counter

def diff(a, b):
  """ more verbose than needs to be, for clarity """
  ca, cb = Counter(a), Counter(b)
  to_add = cb - ca
  to_remove = ca - cb
  changes = Counter(to_add)
  changes.subtract(to_remove)
  return changes

lista = ['one', 'three', 'four', 'four', 'one']
listb = ['one', 'two', 'three']

In [127]: diff(lista, listb)
Out[127]: Counter({'two': 1, 'one': -1, 'four': -2})
# in order to go from lista to list b, you need to add a "two", remove a "one", and remove two "four"s

In [128]: diff(listb, lista)
Out[128]: Counter({'four': 2, 'one': 1, 'two': -1})
# in order to go from listb to lista, you must add two "four"s, add a "one", and remove a "two"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can calculate intersection minus union of lists:</p>
<pre><code>temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two', 'Five']

set(temp1+temp2)-(set(temp1)&amp;set(temp2))

Out: set(['Four', 'Five', 'Three']) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can be solved with one line.
The question is given two lists (temp1 and temp2) return their difference in a third list (temp3).</p>
<pre><code>temp3 = list(set(temp1).difference(set(temp2)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are a few simple, <strong><em>order-preserving</em></strong> ways of diffing two lists of strings.</p>
<p><strong>Code</strong></p>
<p>An unusual approach using <a href="https://docs.python.org/3/library/pathlib.html#module-pathlib" rel="nofollow noreferrer"><code>pathlib</code></a>:</p>
<pre><code>import pathlib


temp1 = ["One", "Two", "Three", "Four"]
temp2 = ["One", "Two"]

p = pathlib.Path(*temp1)
r = p.relative_to(*temp2)
list(r.parts)
# ['Three', 'Four']
</code></pre>
<p>This assumes both lists contain strings with equivalent beginnings.  See the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="nofollow noreferrer">docs</a> for more details.  Note, it is not particularly fast compared to set operations.</p>
<hr/>
<p>A straight-forward implementation using <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest</code></a>:</p>
<pre><code>import itertools as it


[x for x, y in it.zip_longest(temp1, temp2) if x != y]
# ['Three', 'Four']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's say we have two lists</p>
<pre><code>list1 = [1, 3, 5, 7, 9]
list2 = [1, 2, 3, 4, 5]
</code></pre>
<p>we can see from the above two lists that items 1, 3, 5 exist in list2 and items 7, 9 do not. On the other hand, items 1, 3, 5 exist in list1 and items 2, 4 do not.</p>
<p>What is the best solution to return a new list containing items 7, 9 and 2, 4?</p>
<p>All answers above find the solution, now whats the most optimal?</p>
<pre><code>def difference(list1, list2):
    new_list = []
    for i in list1:
        if i not in list2:
            new_list.append(i)

    for j in list2:
        if j not in list1:
            new_list.append(j)
    return new_list
</code></pre>
<p>versus</p>
<pre><code>def sym_diff(list1, list2):
    return list(set(list1).symmetric_difference(set(list2)))
</code></pre>
<p>Using timeit we can see the results</p>
<pre><code>t1 = timeit.Timer("difference(list1, list2)", "from __main__ import difference, 
list1, list2")
t2 = timeit.Timer("sym_diff(list1, list2)", "from __main__ import sym_diff, 
list1, list2")

print('Using two for loops', t1.timeit(number=100000), 'Milliseconds')
print('Using two for loops', t2.timeit(number=100000), 'Milliseconds')
</code></pre>
<p>returns</p>
<pre><code>[7, 9, 2, 4]
Using two for loops 0.11572412995155901 Milliseconds
Using symmetric_difference 0.11285737506113946 Milliseconds

Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an simple way to distinguish two lists (whatever the contents are), you can get the result as shown below :</p>
<pre><code>&gt;&gt;&gt; from sets import Set
&gt;&gt;&gt;
&gt;&gt;&gt; l1 = ['xvda', False, 'xvdbb', 12, 'xvdbc']
&gt;&gt;&gt; l2 = ['xvda', 'xvdbb', 'xvdbc', 'xvdbd', None]
&gt;&gt;&gt;
&gt;&gt;&gt; Set(l1).symmetric_difference(Set(l2))
Set([False, 'xvdbd', None, 12])
</code></pre>
<p>Hope this will helpful.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>tweets=['manoj', 'shekhar', 'manoj', 'rahul', 'mohit','jyohit','sankar','pappu']
netweets=['manoj','pappu', 'shekhar','mohit','gourav']
netweet = []
for i in tweets:
    if i not in netweets:
        netweet.append(i)
print(netweet)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>(list(set(a)-set(b))+list(set(b)-set(a)))
</code></pre>
</div>
<span class="comment-copy">Are the elements guaranteed unique? If you have <code>temp1 = ['One', 'One', 'One']</code> and <code>temp2 = ['One']</code>, do you want <code>['One', 'One']</code> back, or <code>[]</code>?</span>
<span class="comment-copy">@michael-mrozek they are unique.</span>
<span class="comment-copy">Do you want to preserve the order of the elements?</span>
<span class="comment-copy">i didn't know you could subtract lists like this</span>
<span class="comment-copy">@Drewdin: Lists do not support the "-" operand. Sets, however, do, and that what is demonstrated above if you look closely.</span>
<span class="comment-copy">thanks, i ended up using set(ListA).symmetric_difference(ListB)</span>
<span class="comment-copy">symmetric difference can be written with: ^ (set1 ^ set2)</span>
<span class="comment-copy">Please, could you edit your answer and point out that this only returns the temp1-temp2? .. As other said in order to return all the differences you have to use the sysmetric difference: list(set(temp1) ^ set(temp2))</span>
<span class="comment-copy">Additional support for this answer: Ran across a use case where preserving list order was important for performance. When working with tarinfo or zipinfo objects I was using set subtraction. To exclude certain tarinfo objects from being extracted from the archive. Creating the new list was fast but super slow during extraction. The reason evaded me at first. Turns out reordering the tarinfo objects list caused a huge performance penalty. Switching to the list comprehension method saved the day.</span>
<span class="comment-copy">@MarkByers - perhaps I should write an entirely new question for this. But how would this work in a forloop? For instance, if my temp1 and temp2 keep changing.. and I want to append the new information to temp3?</span>
<span class="comment-copy">@Ason: I think you should create a new question. You need to make the question more clear.</span>
<span class="comment-copy">it wouldn't work if list2 has more elemnets than list1</span>
<span class="comment-copy">@haccks Because checking membership of a list is an O(n) operation (iterating over the entire list), but checking membership of a set is O(1).</span>
<span class="comment-copy">Turning <code>temp2</code> into a set before would make this a bit more efficient.</span>
<span class="comment-copy">True, depends if Ockonal cares about duplicates or not (original question doesn't say)</span>
<span class="comment-copy">Comment says the (lists|tuples) don't have duplicates.</span>
<span class="comment-copy">I upvoted your answer because I thought you were right about the duplicates at first. But <code>item not in temp2</code> and <code>item not in set(temp2)</code> will always return the same results, regardless if there are duplicates or not in <code>temp2</code>.</span>
<span class="comment-copy">Up vote for not requiring list items to be hashable.</span>
<span class="comment-copy">Why not set(list1).symmetric_difference(set(list2))?</span>
<span class="comment-copy">This deserves the best answer! Bravo! Saved me hundreds of hours!</span>
<span class="comment-copy">Beyond 1 mln. elements pandas can be even faster!</span>
<span class="comment-copy">There is a difference in the output of both the approaches. Ideally they should have returned the same output sets. np approach shows a length of 28571 and list comprehension approach shows length as 9524.</span>
<span class="comment-copy">@ghosts that is excellent catch! I fixed my answer</span>
<span class="comment-copy">i updated the notebook in the link and also the screenshot. Surprisingly pandas is slower than numpy even when switching to hashtable internally. Partly this maybe due to upcasting to int64.</span>
<span class="comment-copy">hi, I've tried yours. but I got reversed answer. <code>temp1 = ['1','2','3'], temp2 =['2','3','4'] , answer : ['3','2']</code> why?</span>
<span class="comment-copy">What is the complexity  of the algorithm?</span>
<span class="comment-copy">Might want to include the <code>from itertools import filterfalse</code> bit here. Also note that this doesn't return a sequence like the others, it returns an iterator.</span>
<span class="comment-copy">The itertools solution only works when the elements in <code>temp1</code> and <code>temp2</code> line up well. If you, for example, turn around the elements in <code>temp2</code> or insert some other value in the beginning of <code>temp2</code>, the listcomp will just return the same elements as in <code>temp1</code></span>
<span class="comment-copy">Yes,  it is a feature of these approaches.  As mentioned, these solutions are order preserving - they assume some relative order between the lists.  An unordered solution would be to diff two sets.</span>
<span class="comment-copy">What does your answer add exactly? The answers given so far seems far superior in research and solution.</span>
<span class="comment-copy">There are better answers. Please don't write answers without proper research.</span>
<span class="comment-copy">In addition to providing the answer, can you give an explanation for how it works/applies to this particular issue? Answers and solutions are great, but detailed guides and explanations are infinitely better.</span>
