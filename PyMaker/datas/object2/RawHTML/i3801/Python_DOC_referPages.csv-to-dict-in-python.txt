<div class="post-text" itemprop="text">
<p>I have a csv-like file that wants to transfer into dict in Python. Heres the sample file:</p>
<pre><code>file start:
...
...
[section-1] # basically a setup info with &lt;key-value&gt; pair
date,2/16/2018
label,test3
size,25
...
[section-2] # contains test parameters and data
NO,parameter1,parameter2
1,50,30
2,-20,32
...
...
file end
</code></pre>
<p>I roughly have an idea of how to handle this file, to goal is to easily access each record. Something like dict maybe:</p>
<pre><code>{'date':2/16/2018,
'label':test3,
'size':25,
'data':[{'NO':1,'parameter1':50,'parameter2':30}
        {'NO':2,'parameter2':-20,'parameter2',32}]
}
</code></pre>
<p>the usecase is I want to extract these data and load it into database. The [section-1] data will go to top-level table. And [section-2] data will be loaded into child table based on [section-1] info.</p>
<p>I'm very new to Python. Do you think this is the right direction to convert this file? Can someone tell me how to do this? </p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If it were me, I'd parse the file into sections using <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>str.startswith('[')</code></a>, and then use a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator function</a> to pass the resulting lines to <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader()</code></a> and <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer"><code>csv.DictReader()</code></a> for the two sections, respectively.</p>
<p>Here is an example:</p>
<pre><code>from csv import reader, DictReader
from pprint import pprint 

def lines_until_section_mark(f):
    for line in f:
        if line.startswith('['):
            break
        if line.strip():
            yield line

with open('cfg.txt') as f:
    # Eat until first section mark
    for line in lines_until_section_mark(f):
        pass

    # Construct first dictionary from first sectoin
    d = dict(reader(lines_until_section_mark(f)))

    # Construct second dictionary from second section
    d['data'] = list(DictReader(lines_until_section_mark(f)))

pprint(d)
</code></pre>
<p>Input file:</p>
<pre><code>[section-1] # basically a setup info with &lt;key-value&gt; pair
date,2/16/2018
label,test3
size,25

[section-2] # contains test parameters and data
NO,parameter1,parameter2
1,50,30
2,-20,32
</code></pre>
<p>Output:</p>
<pre><code>{'data': [{'NO': '1', 'parameter1': '50', 'parameter2': '30'},
          {'NO': '2', 'parameter1': '-20', 'parameter2': '32'}],
 'date': '2/16/2018',
 'label': 'test3',
 'size': '25'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For parsing csv file you might want to use <a href="https://github.com/hay/dataknead" rel="nofollow noreferrer">dataknead</a> library. It works with Python 3 only.</p>
<p>You can install it like this: <code>pip install dataknead</code> (pip3 if you have different Python versions)</p>
<p>According to its documentation, let's assume you have a cities.csv like this:</p>
<pre><code>city,country,population
Amsterdam,nl,850000
Rotterdam,nl,635000
Venice,it,265000
</code></pre>
<p>You can read it like this:</p>
<pre><code>from dataknead import Knead
data = Knead("cities.csv").data()
</code></pre>
<p>The output of print(data) will be:</p>
<pre><code>[{'city': 'Amsterdam', 'population': '850000', 'country': 'nl'}, {'city': 'Rotterdam', 'population': '635000', 'country': 'nl'}, {'city': 'Venice', 'population': '265000', 'country': 'it'}]
</code></pre>
<p>I suggest you to parse one section firstly. Then you can decide how to divide file's section. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are willing to use pandas you could do something like this. I am making a few assumptions about the data here. I am assuming size value equals the number of rows in your csv file. I am assuming you know the date and what you want to use as a name for the label.  </p>
<p>This code will get you the rows in the csv file and create a dictionary for each row and put it in a list. </p>
<pre><code>import pandas as pd
my_dict = {"date": '06/01/2018', "label":"test3","size":0}
df = pd.read_csv('your_csv_file.csv')

row_list = []

for i, row in enumerate(df.values):
    my_dict['size']+=1
    row_dict = {}
    for i in range(0, len(row)):
        row_dict['col'+str(i)] = row[i]
    row_list.append(row_dict)

my_dict["data"] = row_list
print(my_dict)
</code></pre>
</div>
<span class="comment-copy">What was the file created with?</span>
<span class="comment-copy">Do you have  usecase in mind?</span>
<span class="comment-copy">Do <code>file start</code> and <code>file end</code> literally appear in the file?</span>
<span class="comment-copy">@chrisz it's generated from a tool</span>
<span class="comment-copy">@Robáµ© No sir. I just add it to make i clear</span>
<span class="comment-copy">Thanks for the quick response. One bonus question: How to handle parameters in [section-2] is changing? For example: this file may have "NO,p1,p2". Next file may [section-2] may have "NO,p2,p3". Is there a way that I can get parameter names without doing an iteration?</span>
<span class="comment-copy">After running the above code, you can inspect <code>d['data'].keys()</code> to see the list of parameters. You can test if it changed like so: <code>if set(old_d['data'].keys()) != set(new_d['data'].keys()):</code></span>
