<div class="post-text" itemprop="text">
<p>When I try to return a value after making a variable and putting a while True, try/except commands, the variable doesn't return the value. I am trying to globalize this "starting" so that it can be used.</p>
<pre><code>def start_time():
    while True:
        try:
            starting = int(input("Please enter a starting hour(HH): "))
            if starting &lt; 0:
                print("There are no negative hours!")
            elif starting &gt; 24:
                print("There are only 24 hours in a day!")
            else:
                break
        except ValueError:
            print("Please enter in a correct format (HH)")
    return starting
def end_time():
    while True:
        try:
            ending = int(input("Please enter an ending hour (HH): "))
            if ending &lt; starting:
                print("You can only plan a day!")
            elif ending &lt; 0:
                print("There are only 24 hours in a day!")
            elif ending &gt; 24:
                print("There are only 24 hours in a day!")
            else:
                break
        except ValueError:
            print("Please enter in a correct format (HH)")
    return ending

#obtain starting and ending time
start_time()
end_time()

#confirm starting and ending time
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Right, one amendment is needed to achieve your stated aim:</p>
<p>replace:</p>
<pre><code>start_time()
</code></pre>
<p>with</p>
<pre><code>starting = start_time()
</code></pre>
<p>when a function is called that returns a value without an explicit place for that value to be put python in effect throws away the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of making <code>starting</code> global, return <code>starting</code> value to the caller. Use of global needs to be avoided if possible. Read why it is a bad design <a href="https://stackoverflow.com/a/19158418/9844252">here</a>. To implement in better way, your caller should be modified as:</p>
<pre><code>starting = start_time()
</code></pre>
<p>Now starting time is obtained in <code>starting</code>.</p>
<p>Similarly,</p>
<pre><code>ending = end_time()
</code></pre>
<p>Ending time is obtained in <code>ending</code>.</p>
<p>Also <code>pass</code> does not break out of the infinite <code>while</code> loop. It does nothing, but is used when a statement is required syntactically but the program requires no action.  Use a <code>break</code> in-place of <code>pass</code>. It exits out of the innermost loop.</p>
<p>Read about the usage of <code>break</code> <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">You never break out of the while loop when the input is correct. Replace <code>pass</code> with <code>break</code> (or just an early return there).</span>
<span class="comment-copy">One other thing: you'll need to change the pass to a break on the else branch of your if statement or, more efficiently, put the return statement there or you'll never get out of the infinite loop!</span>
<span class="comment-copy">Thanks! The starting = start_time() worked.</span>
