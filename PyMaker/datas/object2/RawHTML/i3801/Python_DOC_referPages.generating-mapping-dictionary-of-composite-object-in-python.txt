<div class="post-text" itemprop="text">
<p>I need a method in a composite class to return the mapping of the instance.</p>
<pre><code>class Component:
    def __init___(self, a, b):
        self.a = a
        self.b = b

class Entity:
   def __init__(self, component, c, d):
       self.component= component
       self.c = c
       self.d = d

   def as_dict(self):
       mapping_dict = self.__dict__
       mapping_dict['component'] = self.component.__dict__
       return mapping_dict
</code></pre>
<p>This solution will only work once when <code>as_dict()</code> method is called for the first time. When it's called for the second time, this would not work since <code>self.entity</code> will now refer to a dictionary and calling <code>__dict__</code> on it will raise <code>AttributeError</code>. </p>
<p>So I came up with a not so efficient solution;</p>
<pre><code>def as_dict(self):
    temp_1 = temp_2 = deepcopy(self)
    mapping_dict = temp_1.__dict__
    mapping_dict['component'] = temp_2.component.__dict__
    return mapping_dict
</code></pre>
<p>This works but not so efficient because I am making a deepcopy of the instance every time I call the function. </p>
<p>My question is, why when I call <code>self.entity.__dict__</code>, <code>entity</code> becomes type <code>dict</code> instead of type <code>Entity</code>? What is the mechanism behind this? And also whats the most efficient implementation to obtain a mapping of a composite object?</p>
</div>
<div class="post-text" itemprop="text">
<p>As jonrsharpe mentions, this:</p>
<pre><code>mapping_dict = self.__dict__
</code></pre>
<p>does not create a copy of <code>self.__dict__</code> - it only binds the local name <code>mapping_dict</code> to the object also bound to <code>self.__dict__</code> (you definitly want to <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">read this</a> for more about python names / bindings etc).</p>
<p>So this next line:</p>
<pre><code>   mapping_dict['component'] = self.component.__dict__
</code></pre>
<p>is actually the equivalent of:</p>
<pre><code>   self.component = self.component.__dict__
</code></pre>
<p>which is obviously not what you want.</p>
<p>A simple solution is to create a new dict from <code>self.__dict__</code>. Since we need this for both  <code>Component</code> and <code>Entity</code>, the better solution is to factor this out to a <a href="https://en.wikipedia.org/wiki/Mixin" rel="nofollow noreferrer">mixin class</a>:</p>
<pre><code>class AsDictMixin(object):
    def as_dict(self):
        return {
          k:(v.as_dict() if isinstance(v, AsDictMixin) else v) 
          for k, v in self.__dict__.items()
          }

class Component(AsDictMixin):
    def __init___(self, a, b):
        self.a = a
        self.b = b        

class Entity(AsDictMixin):
    def __init__(self, component, c, d):
       self.component= component
       self.c = c
       self.d = d  
</code></pre>
<p>Note that this won't take computed attributes (properties etc) in account, only plain instance attributes, but I assume that it's what you want.</p>
</div>
<span class="comment-copy"><code>mapping_dict = self.__dict__</code> <b>does not</b> create a new dictionary, so the next line is actually overwriting the instance attribute. Why don't you implement e.g. <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping" rel="nofollow noreferrer"><code>Mapping</code></a> so you can use the object itself like a dictionary?</span>
<span class="comment-copy">You don't need to deepcopy the instance; all you need is a shallow copy of the <code>__dict__</code>s.</span>
<span class="comment-copy">Thank you for your answer.</span>
