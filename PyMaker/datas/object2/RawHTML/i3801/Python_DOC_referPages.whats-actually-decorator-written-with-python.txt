<div class="post-text" itemprop="text">
<p>Im struggling to understand decorator with python. 
My understanding is here below;</p>
<p>At first, <code>my_function_too(x,y)</code> method will be defined as func in <code>my_decorator(func)</code> and then <code>function_that_runs_func(*args,**kwargs)</code> methods will be outputed.</p>
<p><strong>1. What is the func in <code>@functools.wraps(func)</code> ?</strong> </p>
<p><strong>2. Why do we need to write <code>return function_that_runs_func</code> and  <code>return my_decorator</code> here ?</strong></p>
<p>My friends explained that <code>function_that_runs_func()</code>method is going to replace <code>my_function_too()</code> method. But I could not understand what he is saying and why.</p>
<p><strong>3. Would anyone please tell gently me what he is implying ?</strong> </p>
<p>CODE:</p>
<pre><code>def decorator_with_arguments(number):
   def my_decorator(func):
       @functools.wraps(func)
       def function_that_runs_func(*args,**kwargs):
           print("In the decorator")
           if number == 56:
               print("Not running the function")
               return None
           else:
               print("Running the 'real' func")
               return func(*args,**kwargs)
        return function_that_runs_func
     return my_decorator
@decorator_with_arguments(57)
def my_function_too(x,y)
    print(x+y)

my_function_too(57,67)
</code></pre>
<p>OUTPUT:</p>
<blockquote>
<p>In the decorator </p>
<p>124</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It may help to think of a decorator that takes args as a decorator factory. So <code>decorator_with_arguments(57)</code> returns <code>my_decorator</code>, which does the actual decorating. </p>
<p>That is, <code>my_decorator</code> receives the original version of <code>my_function_too</code> as its arg and returns the decorated version, binding it to the name <code>my_function_too</code>, just as if you did </p>
<pre><code>my_function_too = my_decorator(my_function_too)
</code></pre>
<p>In your code, the <code>func</code> in <code>@functools.wraps(func)</code> is the function that's passed to <code>my_decorator</code>, which in this case is the original version of <code>my_function_too</code>. <code>functools.wraps</code> is a decorator version of <a href="https://docs.python.org/3/library/functools.html#functools.update_wrapper" rel="nofollow noreferrer"><code>functools.update_wrapper</code></a>. You can read about them both in the linked docs. Don't worry too much about them, they just make the decorated version of the function look more like the original version.</p>
</div>
<span class="comment-copy">How much have you read about decorators?</span>
<span class="comment-copy">1) functools <a href="https://stackoverflow.com/questions/308999/what-does-functools-wraps-do" title="what does functools wraps do">stackoverflow.com/questions/308999/what-does-functools-wraps-do</a></span>
<span class="comment-copy">That is one of the more complex applications of decorators. You should start with understanding how a decorator without arguments and without <code>functools.wraps</code> works.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/a/1594484/2823755">Decorator Basics (SO answer)</a> - It's a long answer but it might give you a better feel for them.  Play around with some simpler decorators. Here are a few (maybe not so simple) to peruse - <a href="https://wiki.python.org/moin/PythonDecoratorLibrary" rel="nofollow noreferrer">Python Decorator Library</a></span>
<span class="comment-copy">Thank you, this what I wanted to make sure of.</span>
<span class="comment-copy">If you dont mind, I would like to make sure of one more thing. What is func in  <code>@functools.wraps(func)</code>?</span>
<span class="comment-copy">I appreciated it</span>
