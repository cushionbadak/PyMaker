<div class="post-text" itemprop="text">
<p>I want to automate a task in Python with the Google API Search Place. Right now, my code with Google Maps API is returning places 'hospital' for one set of geographic coordinates. </p>
<p>But, I have a CSV file which contains many geographic coordinates.</p>
<pre><code>1: Hanoi,10.762622,106.660172  
2: Ho Chi Minh,12.762622,108.660175  
3: Ho Chi Minh,11.8542,108.660175 
4: ...
5: ...
</code></pre>
<p>As you can see in my code, this is not efficient because I need to change the geographic coordinates manually. </p>
<p>For each row (geographic coordinates) in my CSV file, I want my code to read the geographic coordinates 1: Hanoi and give me results 'hospitals' for this geographic coordinates. After read row 2: Ho Chi Minh and same for all the other rows.</p>
<p>How I can achieve that or any good examples of making tasks like this more efficient? </p>
<pre><code>import urllib
import urllib.request
import json

googleGeocodeUrl = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query='
keyword = "hospital"
geolocation = "&amp;location=-12.135,-77.023&amp;radius=5000"
APIKEY = '&amp;key='+'apikey'

url = googleGeocodeUrl + keyword + geolocation + APIKEY
print(url)

url = googleGeocodeUrl + keyword + geolocation + APIKEY
json_response = urllib.request.urlopen(url)
search = json_response.read().decode('utf-8')
searchjson = json.loads(search)

export = open('hopital.csv','w')
for place in searchjson['results']:
    print(place['name'])
    print(place['geometry']['location'])
export.write(place['name']+','+str(place['geometry']['location']['lng'])\
 +','+str(place['geometry']['location']['lat'])+'\n')
export.close() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make use of Python's <code>csv</code> library to help with reading and writing the CSV files. Also it is better to use a format string to aid with inserting your variables into you URL:</p>
<pre><code>import csv
import urllib
import urllib.request
import json

googleGeocodeUrl = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query={}&amp;location={},{}&amp;radius=5000&amp;key={}'
keyword = "hospital"
key = '123'

with open('input.csv', newline='') as f_input, open('hospital.csv', 'w', newline='') as f_output:
    csv_input = csv.reader(f_input)
    csv_output = csv.writer(f_output)
    csv_output.writerow(['Search place', 'Name', 'Lat', 'Long'])

    for search_place, lat, long in csv_input:
        url = googleGeocodeUrl.format(urllib.parse.quote(search_place), lat, long, key)
        json_response = urllib.request.urlopen(url)
        search = json_response.read().decode('utf-8')
        searchjson = json.loads(search)

        for place in searchjson['results']:
            row = [place['name'], place['geometry']['location']['lng'], place['geometry']['location']['lat']]
            csv_output.writerow(row)
</code></pre>
<p>The format string works using quite a powerful mini language, but at its simplest, you just need to add <code>{}</code> as a placeholder for what you want to replace. For each <code>{}</code> that is used, format replaces it with the matching argument when it is called, e.g.</p>
<pre><code>'test{}'.format(123)
'lat is {}, long is {}'.format(123, 456)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>csv</code> library included in Python's standard library for this purpose.</p>
<p>Specifically, <a href="https://docs.python.org/3.6/library/csv.html#csv.DictReader" rel="nofollow noreferrer">csv.DictReader()</a> and <a href="https://docs.python.org/3.6/library/csv.html#csv.writer" rel="nofollow noreferrer">csv.writer()</a></p>
<p><strong><code>csv.DictReader()</code> example:</strong></p>
<pre><code>import csv

with open('places.csv', newline='') as f:
    reader = csv.DictReader(f, fieldnames=["place", "longitude", "latitude"])
    places = [row for row in reader]

for row in places:
    # your code here
</code></pre>
<p><strong><code>csv.writer()</code> example:</strong></p>
<pre><code>import csv

with open('hopital.csv','w', newline='') as f:
    writer = csv.writer(f)
    for place in searchjson['results']:
        writer.writerow([place['name'],
            str(place['geometry']['location']['lng']),
            str(place['geometry']['location']['lat'])])
</code></pre>
<hr/>
<p>Additionally, you could also make use of <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer">urllib.parse.urlencode()</a> for auto generating an argument string from a dict of params and values.</p>
</div>
<span class="comment-copy">Can you <a href="https://stackoverflow.com/posts/50622697/edit">edit</a> the question to give some examples?</span>
<span class="comment-copy">Please ensure the API key you have entered is not your real API key.</span>
<span class="comment-copy">@MartinEvans please see examples</span>
<span class="comment-copy">I assume your CSV is actually of the form  <code>Hanoi,10.762622,106.660172</code> without line numbers</span>
<span class="comment-copy">@MartinEvans yes, it's correct</span>
<span class="comment-copy">I don't get it how you specify to read the latitude and longitude coordinates... My CSV should have headings which specify location, latitude, longitude?</span>
<span class="comment-copy">You have 3 columns. The <code>csv.reader()</code> will read one row and split it automatically into a list of 3 values. The <code>for</code> statement provides one argument for each value. Try adding <code>print(search_place, lat, long)</code> inside the <code>for</code> loop.</span>
<span class="comment-copy">Unfortunately I am unable to test it as I don't have a suitable key. I had assumed your code was working for the manual version.</span>
<span class="comment-copy">I would suggest you add more print statement to see what is being returned, e.g. <code>print(search)</code></span>
<span class="comment-copy">The API key is working in my original code but it's ''invalid key" when I use it in your code.                                        C:\Users\renau\Anaconda3\lib\urllib\request.py", line 650, in http_error_default     raise HTTPError(req.full_url, code, msg, hdrs, fp)  HTTPError: Bad Request  {    "error_message" : "The provided API key is invalid.",    "html_attributions" : [],    "results" : [],    "status" : "REQUEST_DENIED" }</span>
