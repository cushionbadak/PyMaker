<div class="post-text" itemprop="text">
<p>Is it possible to replace a property of an object with 'normal' attribute?</p>
<p>I need this because when I access the attribute for the first, I want the value to be generated by the property. But I no longer need the property afterward:</p>
<pre><code>class A(object):
    @property
    def x(self):
         self.x = "toto"   # Replace property, fail because no setter
         return self.x 

a = A()
print a.x # "toto"
a.x = "tata"
</code></pre>
<p>I know I can store the value in a second attribute like <code>_x</code>and check in the property if <code>_x</code> exist but I want to know if it's possible the replace the property itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>To bypass the lack of a setter, you'd have to directly manipulate the instance <code>__dict__</code> dictionary. However, you can't do what you want with a regular <code>property</code> object, because it is a <a href="https://docs.python.org/3/howto/descriptor.html#descriptor-protocol" rel="nofollow noreferrer"><em>data descriptor</em></a>. Attribute access will <em>always</em> give a data descriptor priority over instance attributes.</p>
<p>You'd have to create a custom descriptor instead, one that doesn't define a <code>__set__</code> or <code>__delete__</code> method:</p>
<pre><code>class CachingProperty(object):
    def __init__(self, fget):
        self.name = fget.__name__
        self.fget = fget

    def __get__(self, instance, owner):
        if instance is None:
            return self
        value = self.fget(instance)
        instance.__dict__[self.name] = value
        return value
</code></pre>
<p>This descriptor also takes care of setting the value directly in the instance <code>__dict__</code> attribute, thus creating an instance attribute.</p>
<p>Use the above class instead of <code>property</code>:</p>
<pre><code>class A(object):
    @CachingProperty
    def x(self):
         return "toto"
</code></pre>
<p>Demo, showing that the getter method is only called once:</p>
<pre><code>&gt;&gt;&gt; class Demo(object):
...     @CachingProperty
...     def foo(self):
...         print("Calling the foo property")
...         return "bar"
...
&gt;&gt;&gt; d = Demo()
&gt;&gt;&gt; d.foo
Calling the foo property
'bar'
&gt;&gt;&gt; d.foo
'bar'
&gt;&gt;&gt; vars(d)
{'foo': 'bar'}
</code></pre>
</div>
