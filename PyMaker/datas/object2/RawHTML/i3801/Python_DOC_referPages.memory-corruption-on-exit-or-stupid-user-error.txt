<div class="post-text" itemprop="text">
<p>I have a problem where the objects holding imported python modules are being corrupted, but only after <code>sys.exit()</code> is explicitly called.  This is also intermittent.  I have stripped out a large portion of the code except for the "standard" <code>pyusb</code> module (I have used the very latest version of that).  Very little actually happens.</p>
<p>If the program calls sys.exit() then some object IDs get changed to garbage values.  If I leave that out then there are no errors!</p>
<p>Is this really a bug in Python? That seems unlikely. What did I do wrong?</p>
<p>===== main program "bug_happens.py"</p>
<pre><code>#!/usr/bin/python3

import sys

import usbtmc

scope = usbtmc.Instrument()
print('in Main')
print('   id of usbtmc.usb: 0x{:x}'.format(id(usbtmc.usb)))
print('   id of usbtmc.usb.util: 0x{:x}'.format(id(usbtmc.usb.util)))
print('   id of usbtmc.usb.util.dispose_resources: 0x{:x}'.format(id(usbtmc.usb.util.dispose_resources)))
print()

print('calling Exit()')
sys.exit()
</code></pre>
<p>===== very stripped down usbtmc module</p>
<pre><code>"""
****** Very stripped down partial Version for debugging a memory corruption issue ******

Python USBTMC driver

Copyright (c) 2012-2017 Alex Forencich

...
"""

import usb.util

class Instrument(object):
    def __init__(self, *args, **kwargs):

        self.connected = False

        print('usbtmc.Instrument created 0x{:x}'.format(id(self)))
        print('   id of usb: 0x{:x}'.format(id(usb)))
        print('   id of usb.util: 0x{:x}'.format(id(usb.util)))
        print('   id of usb.util.dispose_resources: 0x{:x}'.format(id(usb.util.dispose_resources)))
        print()

    def __del__(self):
        print('usbtmc.Instrument.__del__() called for 0x{:x}'.format(id(self)))
        print('   id of usb: 0x{:x}'.format(id(usb)))
        print('   id of usb.util: 0x{:x}'.format(id(usb.util)))
        print('   id of usb.util.dispose_resources: 0x{:x}'.format(id(usb.util.dispose_resources)))
        print('   end of usbtmc.Instrument.__del__()')
        print()
</code></pre>
<p>======================================================</p>
<h1>===== Many times this works fine:</h1>
<pre class="lang-none prettyprint-override"><code>usbtmc.Instrument created 0x7fee5775d9b0
   id of usb: 0x7fee562800e8
   id of usb.util: 0x7fee562247c8
   id of usb.util.dispose_resources: 0x7fee561ad048

in Main
   id of usbtmc.usb: 0x7fee562800e8
   id of usbtmc.usb.util: 0x7fee562247c8
   id of usbtmc.usb.util.dispose_resources: 0x7fee561ad048

calling Exit()
usbtmc.Instrument.__del__() called for 0x7fee5775d9b0
   id of usb: 0x7fee562800e8
   id of usb.util: 0x7fee562247c8
   id of usb.util.dispose_resources: 0x7fee561ad048
   end of usbtmc.Instrument.__del__()
</code></pre>
<p>======================================================</p>
<h1>===== About 50% of the time is does this:</h1>
<pre class="lang-none prettyprint-override"><code>usbtmc.Instrument created 0x7fec34b829b0
   id of usb: 0x7fec336c3278
   id of usb.util: 0x7fec335dbb88
   id of usb.util.dispose_resources: 0x7fec335e5048

in Main
   id of usbtmc.usb: 0x7fec336c3278
   id of usbtmc.usb.util: 0x7fec335dbb88
   id of usbtmc.usb.util.dispose_resources: 0x7fec335e5048

calling Exit()
usbtmc.Instrument.__del__() called for 0x7fec34b829b0
   id of usb: 0xa40060
Exception ignored in: &lt;bound method Instrument.__del__ of &lt;usbtmc.Instrument object at 0x7fec34b829b0&gt;&gt;
Traceback (most recent call last):
  File "/home/don/Electronics/Projects/HF_Meas/Scope_SA/Bug_usb_close/usbtmc.py", line 27, in __del__
AttributeError: 'NoneType' object has no attribute 'util'
</code></pre>
<p>======================================================</p>
<h1>===== Occasionally it does this:</h1>
<pre class="lang-none prettyprint-override"><code>usbtmc.Instrument created 0x7ff75968c9b0
   id of usb: 0x7ff7581af0e8
   id of usb.util: 0x7ff7581537c8
   id of usb.util.dispose_resources: 0x7ff7580dc048

in Main
   id of usbtmc.usb: 0x7ff7581af0e8
   id of usbtmc.usb.util: 0x7ff7581537c8
   id of usbtmc.usb.util.dispose_resources: 0x7ff7580dc048

calling Exit()
usbtmc.Instrument.__del__() called for 0x7ff75968c9b0
   id of usb: 0x7ff7581af0e8
   id of usb.util: 0xa40060
Exception ignored in: &lt;bound method Instrument.__del__ of &lt;usbtmc.Instrument object at 0x7ff75968c9b0&gt;&gt;
Traceback (most recent call last):
  File "/home/don/Electronics/Projects/HF_Meas/Scope_SA/Bug_usb_close/usbtmc.py", line 28, in __del__
AttributeError: 'NoneType' object has no attribute 'dispose_resources'
</code></pre>
<p>Running on a Mint 18.3 system with python3 3.5.1-3
and either python3-usb 1.0.0~b2-2 or a fresh git pull of pyusb-1.0.2</p>
</div>
<div class="post-text" itemprop="text">
<p>When the Python interpreter exits, the runtime is being torn down and the ordering of object deletion is not something you can rely on. In fact, it is not even guaranteed that <code>__del__()</code> methods are called at all when the interpreter exits.</p>
<p>The objects a custom <code>__del__</code> needs to access (including other modules) may already have been deleted or set to <code>None</code>, which would cause exactly the exceptions you're seeing here ('NoneType' object has no attribute...)</p>
<p>That's not really a "memory corruption", it's just poor code written for the <code>Instrument</code> class. Any necessary setup/teardown context should be managed with <code>__enter__</code> and <code>__exit__</code>, since <code>__del__</code> is unsuitable for this purpose. So, this issue is more or less a bug in <code>Instrument</code>. This code could possibly be improved by taking advantage of a datamodel guarantee documented <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>Python guarantees that globals whose name begins with a single underscore are deleted from their module before other globals are deleted; if no other references to such globals exist, this may help in assuring that imported modules are still available at the time when the <code>__del__()</code> method is called.</p>
</blockquote>
</div>
<span class="comment-copy">I found something that sounds similar a few years back, it might provide some clues: <a href="https://github.com/pyusb/pyusb/issues/84" rel="nofollow noreferrer">github.com/pyusb/pyusb/issues/84</a></span>
<span class="comment-copy">It seems more to be a problem with the <code>usbtmc</code> package than with Python itself. Perhaps it's good to browse <a href="https://github.com/python-ivi/python-usbtmc/issues" rel="nofollow noreferrer">the issues on its repository</a> (assuming this is the relevant package), also the recently closed issue, and see if you can find something relevant. Or even file a new issue there.</span>
<span class="comment-copy">Is it just the existence of Instrument.__del__()?  My stripped down version doesn't do any actual deleting?  It just prints some IDs.</span>
<span class="comment-copy">It's not the <i>existence</i> of <code>Instrument.__del__</code> itself that is an issue, it's the fact that the code inside it assumes some other objects are still hanging around.  Those other objects may have already been torn down, so you need to handle that possibility.</span>
<span class="comment-copy">OK.  The actual usbtmc module tries to call usb.util.dispose_resources() which I guess it shouldn't.  I put in the prints trying to track things down and re-introduced the same issue even after I removed the other code.</span>
<span class="comment-copy">Is it possible to use <code>__enter__</code> and <code>__exit__</code> without stuffing everything into a gigantic with block?</span>
