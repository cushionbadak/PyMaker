<div class="post-text" itemprop="text">
<p>I was wondering why my code keeps printing 'tan', I can't seem to get it to print the actual winner.</p>
<pre><code>import turtle
import random

turtles = []


def setup():
    global turtles
    startline = -610
    screen = turtle.Screen()
    screen.bgpic('pavement.gif')
    screen.setup(1290, 720)


    turtle_ycor = [-40, -20, 0, 20, 40]
    turtle_color = ['pink', 'skyblue', 'indigo', 'turquoise', 'tan']

    for i in range(0, len(turtle_ycor)):

        new_turtle = turtle.Turtle()
        new_turtle.shape('turtle')
        new_turtle.penup()
        new_turtle.setpos(startline, turtle_ycor[i])
        new_turtle.color(turtle_color[i])
        new_turtle.pendown()
        turtles.append(new_turtle)


def race():
    global turtles
    winner = False
    finishline = 550

    while not winner:
        for current_turtle in turtles:
            move = random.randint(0, 10)
            current_turtle.forward(move)

        xcor = current_turtle.xcor()
        if (xcor &gt;= finishline):
            winner = True
            current_turtle.forward(0)
            turtle.forward(0)
            winner_color = current_turtle.color()
            print('The winner is', winner_color[1])


setup()
race()

turtle.mainloop()
</code></pre>
<p>I tried <code>winner_color[0]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I may have found the error in this code.</p>
<p>I found out that with your code the <strong>last string value</strong> in the list <code>turtle_color</code> always wins.</p>
<p>This is because of this part of your code:</p>
<pre><code>while not winner:
    for current_turtle in turtles:
        move = random.randint(0, 10)
        current_turtle.forward(move)

    xcor = current_turtle.xcor() #this should be indented, or itll only run this code
                                 #for the last color in the list, in this case, tan
    if (xcor &gt;= finishline):     #and all of this code should be indented too
        winner = True            #so it checks all colors, not just tan
        current_turtle.forward(0)
        turtle.forward(0)
        winner_color = current_turtle.color()
        print('The winner is', winner_color[1])
</code></pre>
<p>So, the correct code (in full) is:</p>
<pre><code>import turtle
import random

turtles = []

def setup():
    global turtles
    startline = -610
    screen = turtle.Screen()
    screen.bgpic('pavement.gif')
    screen.setup(1290, 720)


    turtle_ycor = [-40, -20, 0, 20, 40]
    turtle_color = ['pink', 'skyblue', 'indigo', 'turquoise', 'tan']

    for i in range(0, len(turtle_ycor)):

        new_turtle = turtle.Turtle()
        new_turtle.shape('turtle')
        new_turtle.penup()
        new_turtle.setpos(startline, turtle_ycor[i])
        new_turtle.color(turtle_color[i])
        new_turtle.pendown()
        turtles.append(new_turtle)


def race():
    global turtles
    winner = False
    finishline = 550

    while not winner:
        for current_turtle in turtles:
            move = random.randint(0, 10)
            current_turtle.forward(move)
            xcor = current_turtle.xcor()
            if (xcor &gt;= finishline):
                winner = True
                current_turtle.forward(0)
                turtle.forward(0)
                winner_color = current_turtle.color()
                print('The winner is', winner_color[1])


setup()
race()
</code></pre>
<p>Tell me if there are still any errors (etc)!</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible the winner is in fact 'tan' at the end of every race.</p>
<p>The cause of this can be that <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow noreferrer">random.seed</a> is not called yet.  Therefore, the code will initialize with the same seed every time it is run, causing the same sequence of random numbers generated every time having the same winner as result. You can increase randomization by for instance initializing the seed before every call, or only at the top of your code.</p>
<p>Adding this line:</p>
<pre><code>random.seed()  # initializes seed using current system time
</code></pre>
<p>anywhere in your code should randomize the outcomes.</p>
<p>On the note of reading out the winner_color: I'm assuming</p>
<pre><code>winner_color = current_turtle.color()  # gets the color of the current turtle
</code></pre>
<p>is now a string containing the color 'tan'. In this case, the index [0] will work on a string, and not a list. See for example</p>
<pre><code>&gt;&gt;&gt; a = 'tan'
&gt;&gt;&gt; a[0]
't'
&gt;&gt;&gt; a[1]
'a'
&gt;&gt;&gt; a[2]
'n'
&gt;&gt;&gt; a[:]
'tan'
&gt;&gt;&gt; a[::-1]
'nat'
</code></pre>
<p>Also, have a look at how to <a href="https://meta.stackexchange.com/a/18616/392398">present</a> your question in a nice way (the stackoverflow text editor also shows tooltips on styling). This will increase the chances of your question being answered and studied.</p>
<p>Welcome to stackoverflow, I hoped this helps you get your code to work!</p>
</div>
<span class="comment-copy">Is this your actual indentation? If so, the <code>if (xcor &gt;= finishline):</code> test only happens adter <code>for current_turtle in turtles:</code> has finished, instead of once for each <code>current_turtle</code>. So it's only checking the last turtle. Which is the tan one. To fix that, just indent the last 7 lines of the function to be under the <code>for</code> loop.</span>
<span class="comment-copy">If that's your problem, and you understand why that matters, we can close this as a simple type. If you don't understand why the indentation matters, we can probably find you a duplicate question with a decent answer, but you'd be even better served going back through the section on indentation on whatever book or tutorial you used (or maybe a different one that might explain it differently). If that isn't your problem at all, please edit the question appropriately.</span>
<span class="comment-copy">exactly as abarnert said : right now, you are looping through all your turtles and move them forward. The last value <code>current_turtle</code> takes is tan. In Python, indexation is very important and as the code show here, you continue using <code>current_turtle</code> even after the loop finishes and as such : all the code after your for loop is only done for the last value of <code>current_turtle</code> (tan). Hope this helps clarify.</span>
<span class="comment-copy">Yes, that's my actual indentation. And thank you. That was the problem. :D</span>
<span class="comment-copy">Your explanation about <code>random.seed()</code> seems incorrect, if not opposite to fact.  Create a program that imports random and just does <code>print(random.randint(0, 10))</code> like the OP's code.  You <i>won't</i> get the same number every time you run that program.  The random module is seeded based on  the current system time.  However, if you <i>want</i> the random sequence to be exactly the same every time you run your program, you could use <code>random.seed()</code> to make that happen.  Conceptually the opposite of your explanation.</span>
<span class="comment-copy">Your explanation about <code>winner_color = current_turtle.color()</code> is incorrect.  It returns a tuple, e.g.  <code>('black', 'tan')</code> so indexing works.  However, using <code>pencolor()</code> or <code>fillcolor()</code> to get the color of interest as a string, instead of requesting both and ignoring one, makes more sense in this situation.</span>
