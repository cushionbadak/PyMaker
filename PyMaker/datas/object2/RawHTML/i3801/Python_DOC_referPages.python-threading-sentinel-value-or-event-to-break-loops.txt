<div class="post-text" itemprop="text">
<p>I can think of two ways to break out of a loop in a Python thread, minimal examples below:</p>
<p><strong>1 - Use a sentinel value</strong></p>
<pre><code>from threading import Thread, Event
from time import sleep

class SimpleClass():

    def do_something(self):
        while self.sentinel:
            sleep(1)
            print('loop completed')

    def start_thread(self):
        self.sentinel = True
        self.th = Thread(target=self.do_something)
        self.th.start()

    def stop_thread(self):
        self.sentinel = False
        self.th.join()

simpleinstance = SimpleClass()
simpleinstance.start_thread()
sleep(5)
simpleinstance.stop_thread()
</code></pre>
<p><strong>2 - Use an Event</strong></p>
<pre><code>from threading import Thread, Event
from time import sleep

class SimpleThread(Thread):

    def __init__(self):
        super(SimpleThread, self).__init__()

        self.stoprequest = Event()

    def run(self):
        while not self.stoprequest.isSet():
            sleep(1)
            print('loop completed')

    def join(self, timeout=None):
        self.stoprequest.set()
        super(SimpleThread, self).join(timeout)

simpleinstance = SimpleThread()
simpleinstance.start()
sleep(5)
simpleinstance.join()
</code></pre>
<p>In the Python documentation, it discusses events but not the simpler 'sentinel value' approach (which I see used in many threading answers on Stack Overflow). </p>
<p><strong>Is there any disadvantage to using the sentinel value?</strong> </p>
<p>Specifically, could it cause errors (I have never had one but I imagine if you tried to change the value of the sentinel at exactly the same moment it was being read for the while loop then something could break (or maybe the CPython GIL would save me in this case). What is considered best (safest) practice?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the source of <code>Event</code>, you can see that the function you are using don't have any more value for you:</p>
<pre><code>class Event:
    def __init__(self):
        self._cond = Condition(Lock())
        self._flag = False

    def is_set(self):
        return self._flag

    def set(self):
        with self._cond:
            self._flag = True
            self._cond.notify_all() # No more-value, because you are not using Event.wait
</code></pre>
<p>So in your case <code>Event</code> is just a fancy wrapper for a sentinel value with no actually use, that will also slow down your operation time by a <em>really</em> tiny amount.</p>
<p>Events are only useful if you use their <code>wait</code> method.</p>
</div>
<span class="comment-copy">From my mempry the <code>Event</code> class is just a sentinel value plus a <code>Lock</code> to make it thread safe. Look at the source.</span>
<span class="comment-copy">I had a look at the source, that seems to be what's going on (although some of it went over my head.) My question still applies though, is a simpler sentinel value not thread-safe or is it OK assuming using a Python implementation with GIL</span>
<span class="comment-copy">If you do I/O using select.select() in your thread, you should check [<a href="https://docs.python.org/3/library/socket.html#functions](socket.socketpair())" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>. Sockets are also nice, if you want pass some basic control commands (other than quit).</span>
<span class="comment-copy">@Hinni - Interesting I didn't know you could do that!</span>
<span class="comment-copy">Sorry, I messed up the URL formatting. It is socket.socketpair(). I'm often using it together with a Queue or deque. So, the socket just brings the thread out of the select by writing a single character and than you read the queue.</span>
