<div class="post-text" itemprop="text">
<p>I'm trying to install a module I'm developing. When I use 'pip install -e .', it outputs 'Successfully installed gym-mabifish' but when I try to import the module using 'import gym_mabifish' I'm getting 'ModuleNotFoundError: No module named "gym_mabifish"'.</p>
<p>Here's the structure of the package:</p>
<pre><code>gym-mabifish/
     setup.py ( https://pastebin.com/1wNykyKw )
     gym_mabifish/
          __init__.py ( https://pastebin.com/GtQid3Nk )
          envs/
               __init__.py ( https://pastebin.com/Txfk0ezE )
               mabifish_env.py ( https://pastebin.com/g50zBbus )
</code></pre>
<p>I'm using the random_agent from OpenAI gym to test it. ( <a href="https://pastebin.com/72LETtxd" rel="nofollow noreferrer">https://pastebin.com/72LETtxd</a> )</p>
<p>The package is shown in pip list: </p>
<pre><code>gym-mabifish (0.0.1, x:\path\to\project\gym-mabifish)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most likely, you have two (or more) Python installations, and your <code>pip</code> and <code>python</code> come from different installations.</p>
<p>Ideally, you want to solve that problem. But in some cases, it's very difficult. On Windows, managing the PATH can be a nightmare. On macOS, if you install a second Python 2.7 alongside the Apple pre-installed Python 2.7 (which doesn't come with <code>pip</code>), things get confusing.</p>
<p>So, the officially recommended solution nowadays is to just <a href="https://docs.python.org/3/installing/index.html#basic-usage" rel="nofollow noreferrer">use the <code>-m</code> flag to run pip using whichever command you normally use to run Python</a>. </p>
<p>Everything below is as of early 2018. It's changed a few times in the past few years, and may well change again in the future, so it's always best to go right to <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer">Installing Python Modules</a> in the docs, or the <a href="https://packaging.python.org/" rel="nofollow noreferrer">Python Packaging User Guide</a>. But as a summary:</p>
<p>Ideally you're using a virtual environment, in which case this is just <code>python</code>. But if not:</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0397/" rel="nofollow noreferrer">Windows</a>:

<ul>
<li><code>py</code></li>
</ul></li>
<li><a href="https://www.python.org/dev/peps/pep-0394/" rel="nofollow noreferrer">*nix</a>:

<ul>
<li><code>python</code> only if you're explicitly using whatever came with your OS/distro as a default.</li>
<li><code>python3</code> if you're using 3.x on *nix](<a href="https://www.python.org/dev/peps/pep-0394/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0394/</a>)</li>
<li><code>python2.7</code> if you're using Apple's default Python 2.7 on macOS.</li>
<li><code>python2</code> if you're using any other 2.x on *nix.</li>
</ul></li>
</ul>
<p>So, for example, on Windows, it should be:</p>
<pre><code>py -m pip install gym-mabifish
</code></pre>
<p>… and then when you run your script like this:</p>
<pre><code>py myscript.py
</code></pre>
<p>… it will be able to <code>import gym_mabifish</code>.</p>
</div>
<span class="comment-copy">Are you sure that your <code>pip</code> and your <code>python</code> are both from the same Python version? For example, one common thing macOS users run into is that they install a second Python, which is lower on the PATH than the pre-installed Apple Python, so <code>python</code> runs Apple's Python, but Apple's Python doesn't come with pip, so <code>pip</code> installs packages for the other Python.</span>
<span class="comment-copy">Instead of using 'pip install' I used 'python -m pip install' and it seems to be working. You want to copy your comment into an answer so I can mark it?</span>
