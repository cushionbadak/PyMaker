<div class="post-text" itemprop="text">
<p>I have a question .
I'm making a platformer game in tkinter and I have an issue :
I have for now : player , blocks and coins .
I'm updating the player's move and it's animation and the coin's animation and for some reason when I'm putting too much coins , the player's movement starts lagging. 
Note: I'm using the after function of tkinter for animations for player's movement + animation and same goes for the coins . 
For other things like gravity and etc I'm using just threads . </p>
<p>code of coins updating :</p>
<pre><code>def coinsCheckCollision(self):
    cRemove = None
    indexRemove = -1
    count = 0
    for c in self.frame.coins:
        x, y , width , height = c.getRectangle()
        xP = self.player.getX; yP = self.player.getY; wP = self.player.getWidth; hP = self.player.getHeight
        if collisionDetect(xP , x, yP  , y, wP , width, hP , height) or collisionDetect(x , xP , y , yP , width , wP , height , hP):
            if count not in coinsRemoved:
                indexRemove = count
        if indexRemove != -1:
            if indexRemove not in coinsRemoved:
                coinsRemoved.append(indexRemove)
        count +=1

def coinsUpdateAnimations(self):
    count = 0
    for c in self.frame.coins:
        if count not in coinsRemoved:
            self.img = c.getAnimation()
            self.img = ImageTk.PhotoImage(self.img)
            self.frame.coinsImages[count] = self.img
        else:
            if self.frame.coinsImages[count] is not '' :
                self.frame.coinsImages[count] = ''
                self.frame.canvas.delete('coinB'+str(count))
        what = self.frame.canvas.itemconfig('coin' + str(count), image=self.frame.coinsImages[count])
        count += 1
    self.coinsCheckCollision()
    self.frame.frame.after(40 , self.coinsUpdateAnimations)
</code></pre>
<p>Anyway , the question in short is : why when I'm updating multiple things that aren't really "related" to each other , the gui starts lagging ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your design seems to expect your functions to run every 40ms. Maybe +/- a few ms, but averaging 25 times per second.</p>
<p>But that's not what happens.</p>
<hr/>
<p>First, how many coins do you have, and how complicated is that <code>collisionDetect</code> function? If it only takes a tiny fraction of 1ms to run through that loop, it's no big deal, but think about what happens if it takes, say, 15ms: You wait 40ms, then do 15ms of work, then wait another 40ms, then do 15ms of work, etc. So your work is running only 15 times per second, instead of 25.</p>
<p>Now imagine each coin takes, say, 0.2ms. At 3 coins, there's a lag of 0.6ms, which is barely noticeably. But at 100 coins, there's a lag of 20ms. That slows the coins down by 50%, which is pretty obviously noticeable.</p>
<hr/>
<p>Second, as <a href="http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.after-method" rel="nofollow noreferrer">the docs</a> say:</p>
<blockquote>
<p>Tkinter only guarantees that the callback will not be called earlier than that; if the system is busy, the actual delay may be much longer.</p>
</blockquote>
<p>Being off a few ms randomly in either direction might be fine; it would all average out in the end. But <code>after</code> is always a few ms late, never a few ms early, so instead of averaging out, it just builds up and you get further and further behind.</p>
<p>And, worse, if one of your functions gets behind, it will tend to make the delay in each <code>after</code> a bit longer—so it won't just be your coin animation slowing down 50%, but the whole game slowing down by some unpredictable amount arbitrarily between 0-50%, but probably enough to be noticeable.</p>
<hr/>
<p>To solve both problems, you need to carry around something like the time you expected to run at, then, instead of doing <code>after(40)</code>, you do something like this:</p>
<pre><code>expected_time += 40
delay = expected_time - current_time
after(max(0, delay), func)
</code></pre>
<p>To put it in concrete (although untested) terms, using <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">the <code>datetime</code> module</a>:</p>
<pre><code>def __init__(self):
    self.next_frame_time = datetime.datetime.now()
    self.schedule()

def schedule(self):
    self.next_frame_time += datetime.timedelta(seconds=0.040)
    now = datetime.datetime.now()
    delta = max(datetime.timedelta(), now - self.next_frame_time)
    self.frame.frame.after(delta.total_seconds * 1000, self.coinsUpdateAnimations)

def coinsUpdateAnimations(self):
    # all the existing code before the last two lines
    self.coinsCheckCollision()
    self.schedule()
</code></pre>
<hr/>
<p>This still won't solve things if the total work you do takes more than 40ms, of course. Imagine that you spend 50ms, then do an <code>after(0, func)</code>, which triggers at least 10ms late, and then spend another 50ms, then the next <code>after(0, func)</code> triggers at least 20ms late, and so on. If you can't do all of your work in something that's usually significantly less than 40ms, you won't be able to keep up. You have to either:</p>
<ul>
<li>Find a way to optimize your code (e.g., maybe you can use a better algorithm, or use numpy instead of a <code>for</code> loop),</li>
<li>Redesign your game to do less work, or</li>
<li>Slow down your frame rate to something you actually can keep up with.</li>
</ul>
<hr/>
<p>A possibly better solution is to stop trying to bend Tkinter into a gaming framework. It's not designed for that, doesn't help you get all the fiddly details right, and doesn't work all that well even once you do get them right.</p>
<p>By contrast, something like <a href="https://pygame-zero.readthedocs.io" rel="nofollow noreferrer">Pygame Zero</a> is, as the name implies, designed for creating games. And designed to make it easy enough that people with a lot less Python experience than you seem to have can use it.</p>
<p>For example, instead of an event loop that runs at whatever speed your OS wants to run it, making it your responsibility to get everything timed right, Pygame Zero runs a frame loop that calls your <code>update</code> function N times per second, as close to evenly as possible. And it has built-in functions for things like collision detection, drawing animated sprites, etc.</p>
</div>
<span class="comment-copy">How many coins do you have, and how complicated is that <code>collisionDetect</code> function? Your design seems to rely on the functions running every 40ms. If they only take a tiny fraction of 1ms to run, it'll be close enough—but what happens if they take, say, 15ms to run? Then it runs for 15ms, and waits another 40ms to be run again. So your code is only running 15 times per second instead of 25.</span>
<span class="comment-copy">@abarnert Hello , ty for replying . It doesn't matter how many coins I have but when I have lets say 10 it lags . Also the code to the coins detections is just simple detection between 2 rectangles  EDIT : interesting fact about your solution btw that it works ... when I decrease the amount of time it should wait , it lags less the player . Which is interesting ... I come from java and I used to use timers there . very different here having only one main loop ... and needs to be precise .  Anyway , I think my problem fixed . Thank you :)</span>
<span class="comment-copy">By the way, Tkinter is not at all designed for games, and not very good for them. You may want to look at using something like PyGame Zero, which is designed around a frame loop that automatically tries its hardest to run you code exactly N times per second (and that also has much more efficient and also easier-to-use ways to, e.g., update sprites in the display, calculate collisions, etc.).</span>
