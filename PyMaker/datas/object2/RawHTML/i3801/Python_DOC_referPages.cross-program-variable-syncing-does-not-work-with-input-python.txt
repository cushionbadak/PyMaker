<div class="post-text" itemprop="text">
<p>I am attempting to create a basic module that adds the <code>execfile</code> function from Python 2.* to Python3 (using the function <code>execf(a)</code>). The module takes advantage of imports to run a .py file using something like this:</p>
<pre><code>import fibonacci 
#The file is called 'fibonacci.py', for clarification

fibonacci.main()
#And the program runs...
</code></pre>
<p>I take advantage of this by using the <code>exec</code> function in multiple instances to read the filename and insert it into those functions and strings.</p>
<p>Here is what the module (called <code>execfile</code>) looks like:</p>
<pre><code>def execf(a):
  try:
    a.replace(".py", "") #removes '.py' from filename for use in exec functions
    exec('import {}'.format(a)) #imports the specified file
    exec('{}.main()'.format(a)) #runs the specified file
  except AttributeError:
    pass #Proceeds to rest of code after a sys.exit()
  except ModuleNotFoundError:
    pass #Proceeds to rest of code after program end
</code></pre>
<p>And the <code>fibonacci.py</code> file:</p>
<pre><code>def fibonacci(n):
    if(n &lt;= 1):
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))
n = int(input("Enter number of terms:"))
print("Fibonacci sequence:")
for i in range(n):
    print(fibonacci(i))
</code></pre>
<p>Now, this is the <code>main.py</code> file (the executed file):</p>
<pre><code>from execfile import *

execf('fibonacci.py')
print("That was " + a + " numbers of the Fibonacci sequence.")
</code></pre>
<p>What I want to happen is that the <code>a</code> variable from the <code>fibonacci.py</code> be usable in the <code>main.py</code> file so I can print it, and this should be usable for all variables in the script. However, I want to do all of this in the <code>execf()</code> function and not use Pickle or any other module like that, because my goal is to not have to add anything to the Fibonacci project.</p>
<p>I thought about adding something in a comment that could be scanned for and would detect the variables that need to be added. Something like:</p>
<pre><code>FIBONACCI.PY
---
...
#-;- variables(a) -;-

EXECFILE.PY
---
variables = (scan for variables in last line)
</code></pre>
<p>But I could not find anything on how to make Python "look" for those variables. Please let me know if you have any questions, thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>What you've done is not at all the same thing as <code>execfile</code>. So, it shouldn't be that surprising that it doesn't have the same effect as <code>execfile</code>.</p>
<ul>
<li><code>exec</code> (and <code>execfile</code>) executes some code directly in the current scope.</li>
<li><code>import</code> checks whether the module has already been loaded, executing its code in a brand new scope if not, and then gives you a variable holding that module object in the current scope.</li>
</ul>
<p>For example, let's say we had a file named <code>mod.py</code> that looks like this:</p>
<pre><code>x = 1
print(x)
</code></pre>
<p>Now, let's <code>import</code> it:</p>
<pre><code>&gt;&gt;&gt; import mod
1
&gt;&gt;&gt; mod.x
1
&gt;&gt;&gt; x
NameError: name 'x' is not defined
&gt;&gt;&gt; import mod # nothing will get printed the second and later times
</code></pre>
<p>Compare what happens when you <code>execfile</code> it:</p>
<pre><code>&gt;&gt;&gt; execfile('mod.py')
1
&gt;&gt;&gt; mod.x
NameError: name 'mod' is not defined
&gt;&gt;&gt; x
1
&gt;&gt;&gt; execfile('mod.py')
1
</code></pre>
<hr/>
<p>On top of that, your <code>execf</code> doesn't even work, for multiple reasons:</p>
<ul>
<li>a.replace(".py", "") doesn't mutate <code>a</code>, it just returns a new string that you ignore.</li>
<li>Your <code>fibonacci.py</code> module doesn't have a function named <code>main</code>.</li>
<li>You can't "proceed to rest of code after a sys.exit", because <code>sys.exit</code> exits the program. You can handle this with <code>except SystemExit:</code>, but you shouldn't. At any rate, you definitely can't handle it with <code>except AttributeError:</code>; that will only fire because of, e.g., the fact that the module exists but doesn't have a <code>.main</code> attribute.</li>
</ul>
<hr/>
<p>At any rate, as <a href="https://docs.python.org/3.3/whatsnew/3.0.html?highlight=execfile#builtins" rel="nofollow noreferrer">What's New in Python 3.0</a> explains, the right way to do <code>execfile</code> in Python 3 is to <code>open</code> the file, <code>read</code> its contents, and <code>exec</code> them. In other words:</p>
<pre><code>with open(a) as f:
    exec(f.read())
</code></pre>
<p>If you want to wrap this in a function, notice that it will execute the code inside that function's local environment. If you want to execute it in globals no matter what, or in the environment of its caller, or anything else, you need to specify that. See the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec</code></a> docs for details, but for a simple example:</p>
<pre><code>def execf(a):
    with open(a) as f:
        exec(f.read(), globals())
</code></pre>
<hr/>
<p>As a side note, in the rare case where you really <em>do</em> need to do an <code>import</code> dynamically, you should not <code>exec</code> an <code>import</code> statement, you should use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib.import_module</code></a>:</p>
<pre><code>try:
    mod = importlib.import_module(a)
except ImportError:
    # handle that problem
else:
    mod.main()
</code></pre>
</div>
<span class="comment-copy">This makes no sense at all.  You're trying to execute a <code>main()</code> function in the imported file - but no such function exists in <code>fibonacci.py</code>.  And then you're trying to access a local variable <code>a</code> outside of the function containing it, when it no longer even exists.</span>
<span class="comment-copy">@jasonharper Running <code>fibonacci.main()</code> after importing runs the <code>fibonacci.py</code> file.</span>
<span class="comment-copy">You provided a <code>fibonacci.py</code> file in your question, and it definitely does not have a <code>main</code> function. If you're giving us code that has little relation to your actual code, that's going to make it much harder to debug your actual problems. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in the help for more. There are a number of <i>obvious</i> problems in your code, starting with the fact that <code>execfile</code> doesn't do what you think it does, but even after solving all of them, I'm sure there are other bugs in your code. And some of those problems might not actually be in your code, which will just make any answer confusing to you.</span>
