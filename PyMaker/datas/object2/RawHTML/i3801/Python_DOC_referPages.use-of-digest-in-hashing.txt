<div class="post-text" itemprop="text">
<p>What is the use of .digest() in this statement?  Why do we use it ? I searched on google ( and <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer">documentation</a> also) but still I am not able to figure it out.</p>
<pre><code>train_hashes = [hashlib.sha1(x).digest() for x in train_dataset]
</code></pre>
<p>What I found is that it convert to string. Am I right or wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>.digest()</code> method returns the actual <em>digest</em> the hash is designed to produce.</p>
<p>It is a separate method because the hashing API is designed to accept data in multiple pieces:</p>
<pre><code>hash = hashlib.sha1()
for chunk in large_amount_of_data:
    hash.update(chunk)
final_digest = hash.digest()
</code></pre>
<p>The above code creates a hashing object without passing any initial data in, then uses the <a href="https://docs.python.org/3/library/hashlib.html#hashlib.hash.update" rel="nofollow noreferrer"><code>hash.update()</code> method</a> to put chunks of data in in a loop. This helps avoid having to all of the data into memory all at once, so you can hash anything between 1 byte and the entire Google index, if you ever had access to something that large.</p>
<p>If <code>hashlib.sha1(x)</code> produced the digest <em>directly</em> you could never add additional data to hash first. Moreover, there is also an alternative method of accessing the digest, as a hexadecimal string using the <a href="https://docs.python.org/3/library/hashlib.html#hashlib.hash.hexdigest" rel="nofollow noreferrer"><code>hash.hexdigest()</code> method</a> (equivalent to <code>hash.digest().hex()</code>, but more convenient).</p>
<p>The code you found uses the fact that the constructor of the hash object also accepts data; since that's the all of the data that you wanted to hash you can call <code>.digest()</code> immediately.</p>
<p>The <a href="https://docs.python.org/3/library/hashlib.html#hash-algorithms" rel="nofollow noreferrer">module documentation</a> covers it this way:</p>
<blockquote>
<p>There is one constructor method named for each type of hash. All return a hash object with the same simple interface. For example: use <code>sha256()</code> to create a SHA-256 hash object. You can now feed this object with bytes-like objects (normally bytes) using the <code>update()</code> method. <strong>At any point you can ask it for the digest of the concatenation of the data fed to it so far using the <code>digest()</code> or <code>hexdigest()</code> methods.</strong></p>
</blockquote>
<p>(bold emphasis mine).</p>
</div>
<span class="comment-copy">"This is a bytes object of size digest_size which may contain bytes in the whole range from 0 to 255." -- from that page you linked.</span>
<span class="comment-copy">That's... the output. It's your hash.</span>
