<div class="post-text" itemprop="text">
<p>I have a dict structure that appears like the following:</p>
<pre><code>{
"condition": "AND",
"rules": [
    {
        "id": "monitor_category",
        "field": "monitor_category",
        "type": "string",
        "input": "select",
        "operator": "equal",
        "value": "Competition",
        "decision": True
    },
    {
        "id": "monitor_tag",
        "field": "monitor_tag",
        "type": "string",
        "input": "text",
        "operator": "equal",
        "value": "PassiveTotal",
        "decision": True
    },
    {
        "condition": "OR",
        "rules": [
            {
                "id": "article_tag",
                "field": "article_tag",
                "type": "string",
                "input": "text",
                "operator": "contains",
                "value": "Attack",
                "decision": False
            },
            {
                "id": "article_tag",
                "field": "article_tag",
                "type": "string",
                "input": "text",
                "operator": "contains",
                "value": "Hunt",
                "decision": True
            },
            {
                "id": "article_tag",
                "field": "article_tag",
                "type": "string",
                "input": "text",
                "operator": "contains",
                "value": "Threat",
                "decision": False
            }
        ]
    },
    {
        "id": "monitor_tag",
        "field": "monitor_tag",
        "type": "string",
        "input": "text",
        "operator": "equal",
        "value": "Analysis",
        "decision": False
    }
]
</code></pre>
<p>}</p>
<p>For each rule, I derive a decision and attach it to the policy rule. I do that via a simple recursive walk of the dict. In the above sample policy, the boolean logic equates to the following:</p>
<pre><code>(True and True and (False or True or False) and False)
</code></pre>
<p>I'd like to have a function that takes this policy in and is able to derive the boolean logic in order to return the final evaluation. I know a depth-search first approach is liable to be the direction here, but am struggling with how to maintain the boolean state and know which level I am at within the structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a dictionary to hold <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer">functions that correspond to <code>'conditions'</code></a></p>
<pre><code>import operator, functools
operations = {'AND':operator.and_, 'OR':operator.or_, 'XOR':operator.xor}
</code></pre>
<p>Write a recursive function that will recurse when <code>'conditions'</code> is a key in a rule, otherwise iterate over the rules and accumulate <code>'decisions'</code> in a list.  Use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a> to apply the <code>condition</code> to the decisions.</p>
<pre><code>def f(d):
    func = operations.get(d['condition'], None)
    if func is None:
        return
    decisions = []
    for rule in d['rules']:
        if 'condition' in rule:
            decision = f(rule)
        else:
            decision = rule['decision']
        decisions.append(decision)
    return functools.reduce(func, decisions)
</code></pre>
<hr/>
<p><code>if func is None: return</code> was meant to be the base case but I'm not so sure it's needed - if that happens the dict is messed up and it probably should raise a <code>ValueError</code>  I think this has an implicit base case (if there is such a thing) - it relies on the <code>for rule in d['rules']:</code> loop to run out of items.</p>
<hr/>
<p>If the conditions limited to 'AND' and 'OR' you can use <code>all</code> and <code>any</code>.</p>
<pre><code>ops = {'AND':all, 'OR':any}
def g(d):
    func = ops.get(d['condition'], None)
    if func is None:
        return
    decisions = []
    for rule in d['rules']:
        if 'condition' in rule:
            decision = f(rule)
        else:
            decision = rule['decision']
        decisions.append(decision)
    return func(decisions)
</code></pre>
</div>
<span class="comment-copy">How deep can the structure get? How many levels of nesting?  Can it have other operations besides <code>AND</code> and <code>OR</code>?</span>
<span class="comment-copy">You've got someone else's code and a task to do with it, and now you're struggling to figure out how it works. To get an answer here you need to simplify your question and provide all the info needed to answer. Here are the guidelines on how to create a minimal, complete and verifiable example: <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">@wwii It can nest at a number of levels, but maximum I allow is two. There are no other operations beyond <code>AND</code> and <code>OR</code>.</span>
<span class="comment-copy">That was my original view in the recursion I did to label decisions. If there were no rules, it just considered itself done. Annoyingly, I had went down the path of factoring the conditional into the function, but didn't think of the obvious to pair it with the reduction. Thank you very much!</span>
