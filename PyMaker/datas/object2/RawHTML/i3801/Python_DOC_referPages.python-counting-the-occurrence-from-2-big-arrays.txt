<div class="post-text" itemprop="text">
<p>I have the following script that counts the occurrence of values from one array to another</p>
<pre><code>array_1 = [1,2,0,5,7,0]
array_2 = [1,0,1,1,9,6]
# on array 2 there are 3 occurrence of 1, and 1 occurrence of zero, but because there is another zero at array_1 add 1 more. 3+2 = 5

for r in array_1:
     total_count = total_count + array_2.count(r)

print("total sum: {0}".format(total_count))
</code></pre>
<p>its ok when dealing with small array size, but struggles when the array size increases (1 million for <code>array_1</code> and 1 million <code>array_2</code>). Is there a better to approach this?</p>
<p>sorry for the confusion, i updated the question a little bit.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Note: <a href="https://stackoverflow.com/a/50533752/8472976">The answer by @Netwave</a> is five time faster.</p>
</blockquote>
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>. It is be faster, because it only iterates ones of the list.</p>
<pre><code>from collections import Counter

array_1 = [1,2,0,5,7]
array_2 = [1,0,1,1,9]

c = Counter(array_1)
total_count = sum(c[x] for x in array_2)

print("total sum: {0}".format(total_count))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>set</code> instead of a list:</p>
<pre><code>array1_set = set(array_1)
total_count = sum(1 for x in array_2 if x in array1_set)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If there are a lot of repeated numbers in array 1, you'll save time by caching  them (building a dict in the form {number: count}). A typical caching function would look like this:</p>
<pre><code>counts = {}
def get_count(number):
    if number in counts:
        return counts[number]
    else:
        count = your_counting_function(number)
        counts[number] = count
        return count
</code></pre>
<p>This behavior is packaged into the <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">functools.lru_cache</a> decorator, so that function can be simplified as:</p>
<pre><code>from functools import lru_cache

@lru_cache(maxsize=None)
def get_count(number):
    return array_2.count(number)
</code></pre>
<p>This would be a pretty efficient approach if you have a small number of distinct values in array 1â€”say, a random shuffle of the integers 1 through 10. This is sometimes referred to as array_1 having a <em>low cardinality</em> (a cardinality of 10).</p>
<p>If you have a high cardinality (say 900k distinct values in an array of 1M values), a better optimization would be precomputing <em>all</em> the counts before you even start, so that you only have to make one pass over array_2. Dict lookups are much, much faster than counting through the whole array.</p>
<pre><code>array_2_counts = {}
for number in array_2:
    if number in counts:
        array_2_counts[number] += 1
    else:
        array_2_counts[number] = 1


total_count = 0
for number in array_1:
    total_count += array_2_counts[number]
</code></pre>
<p>Python has a built-in for this, too! The above code can be simplified using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a>:</p>
<pre><code>from collections import Counter

array_2_counter = new Counter(array_2)
for number in array_1:
    total_count += array_2_counter[number]
</code></pre>
</div>
<span class="comment-copy">why has array2 not also 1 occurence of 9? because 9 not in array1?</span>
<span class="comment-copy">i need to count the reoccurring numbers in array 2 using array 1.</span>
<span class="comment-copy">Don't accept my solution, use the one from Netwave.</span>
<span class="comment-copy">I would add that calling <code>count</code> in a loop requires a separate pass over the list for every <code>count</code> call and this is why <code>collections.Counter</code> is faster.</span>
<span class="comment-copy">@Megalng yes his answer is faster, but i have a large number of arrays and the result of yours is correct.</span>
<span class="comment-copy">i need to recount even the duplicates</span>
<span class="comment-copy">@Led The code works correctly.</span>
<span class="comment-copy">it does, but the result is different from what i need.</span>
<span class="comment-copy">@Led, you mean duplicates in <code>array_1</code>?</span>
<span class="comment-copy">@Led I don't think you understand the meaning of the word "correctly". How is the result different from what you need?</span>
<span class="comment-copy">thank you for the elaboration, but i will choose Megalng's answer because he/she posted first. Thank you.</span>
