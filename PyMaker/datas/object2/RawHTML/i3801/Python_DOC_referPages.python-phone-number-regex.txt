<div class="post-text" itemprop="text">
<p>I need your help:
I need to find all phone numbers in a passage of text, so I need to match different number formats, e.g: +420 123 123 123, 123 123 123, +420123123123 and/or 123123123. </p>
<p>If I use a regex pattern with the search method it works perfectly, but if I use findall method it just returns a list of whitespaces.</p>
<pre><code>import re

def detect_numbers(text):
    phone_regex = re.compile(r"(\+420)?(\s*)?\d{3}(\s*)?\d{3}(\s*)?\d{3}")
    print(phone_regex.findall(text))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html#re.findall</a></p>
<p>Findall returns lists of tuples, with each tuple representing the groups from one match. You are grouping the whitespaces but you're not grouping the actual digits.</p>
<p>Try a regex that groups the digits too:</p>
<pre><code>r"(\+420)?(\s*)?(\d{3})(\s*)?\(d{3})(\s*)?\(d{3})"
</code></pre>
<p>E.g.</p>
<pre><code>def detect_numbers(text):
    phone_regex = re.compile(r"(\+420)?\s*?(\d{3})\s*?(\d{3})\s*?(\d{3})")
    print(phone_regex.findall(text))

detect_numbers("so I need to match +420 123 123 123, also 123 123 123, also +420123123123 and also 123123123. Can y")
</code></pre>
<p>prints:</p>
<pre><code>[('+420', '123', '123', '123'), ('', '123', '123', '123'), ('+420', '123', '123', '123'), ('', '123', '123', '123')]
</code></pre>
<p>You could then string-join the group matches to get the numbers, e.g.</p>
<pre><code>def detect_numbers(text):
    phone_regex = re.compile(r"(\+420)?\s*?(\d{3})\s*?(\d{3})\s*?(\d{3})")
    groups = phone_regex.findall(text)
    for g in groups:
        print("".join(g))

detect_numbers("so I need to match +420 123 123 123, also 123 123 123, also +420123123123 and also 123123123. Can y")
</code></pre>
<p>prints:</p>
<pre><code>+420123123123
123123123
+420123123123
123123123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try regex like below for mobile number contains numbers</p>
<pre><code>"/[^0-9 +\-]/"
</code></pre>
<p>If you want to starts with some particular number user like below</p>
<pre><code>preg_match('\+420\d{9}/', mobilenumber)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>findall</code> only returns non-overlapping matches, whereas search returns you the first match.</p>
<p><a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">findall</a></p>
<blockquote>
<p>Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right, and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.</p>
</blockquote>
<p>You can either use <code>search</code> or you can change your regular expression to </p>
<pre><code>^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$
</code></pre>
<p>taken from this <a href="https://stackoverflow.com/a/16699507/3664123">post</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Let's assume your text is relatively well behaved. Then a simple pattern could be to recover all sequence of at least nine digits, spaces and <code>-</code> optionally preceeded by a <code>+</code> with <code>re.findall</code>.</p>
<p>Unless your text contains some weird artifacts or arithmetic operations, this should do the trick. Furthermore, being loose on the format will allow to find numbers that contain format errors.</p>
<pre><code>import re

def find_phone_numbers(text):
    phones = re.findall('(?:\+ *)?\d[\d\- ]{7,}\d', text)
    return [phone.replace('-', '').replace(' ', '') for phone in phones]
</code></pre>
<p>Example:</p>
<pre><code>text = "My phone numbers are 123123123, +234-123-3231 and + 555 123 1234"

print(find_phone_numbers(text)) # ['123123123', '+2341233231', '+5551231234']
</code></pre>
</div>
<span class="comment-copy">do the longer numbers always start with 420?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.findall</a> Findall returns lists of tuples, with each tuple representing the groups from one match. You are grouping the whitespaces but you're not grouping the actual digits.</span>
<span class="comment-copy">Change your groups into non-capturing groups. (?:\+420)? (?:\s*)? etc. Or capture the digits not white spaces.</span>
<span class="comment-copy">Oh, perfect, thank you so much.</span>
<span class="comment-copy">There's a difference between matching, and grouping. `r"This (is a) test"``Will <i>match</i> "This is a test", and there will be one subgroup containing "is a".</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/howto/regex.html#grouping" rel="nofollow noreferrer">docs.python.org/3/howto/regex.html#grouping</a> for more info.</span>
<span class="comment-copy">Unfortunately it doesn't work.</span>
<span class="comment-copy">can you check above one i updated just now</span>
<span class="comment-copy">@somesh remove the ^ in the set</span>
<span class="comment-copy">@Oliver yeah ^ this one no need</span>
