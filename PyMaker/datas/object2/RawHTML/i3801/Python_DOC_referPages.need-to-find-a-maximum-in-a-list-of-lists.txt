<div class="post-text" itemprop="text">
<p>I found this question in 'How to Think like a computer scientist: Learning with Python 3, 3rd edition' by Peter Wentworth. I have added their solution below as well.</p>
<h1>My simple recursive function produces wrong output</h1>
<pre><code>def maximum_in_list(L):
    '''Finds the maximum value from L which is a List_of_List'''
    item=0
    for i in L:
        if type(i)==list:
            item=maximum_in_list(i)
        elif i&gt;item:
            item=i
    return item

print(maximum_in_list([9,18,99,7,4,21,[3,5,[27,57,92],7,76],32,4]))
print(maximum_in_list([2, 9, [1, 13], 8, 6]))
print(maximum_in_list([2, [[100, 7], 90], [1, 13], 8, 6])) #Here the problem occurs
print(maximum_in_list([[[13, 7], 90], 2, [1, 100], 8, 6]))
</code></pre>
<h1>The Books Code produces the correct one, but why the need of a flag?</h1>
<pre><code>def r_max(nxs):
   largest=None
   first_time=True
   for e in nxs:
       if type(e)=type([]):
           val=r_max(e)
       else:
           val=e
       if first_time or val&gt;largest:
           largest=val
           first_time=False
   return largest
</code></pre>
<p>I am unable to understand the requirement of a flag here, though it produces the correct result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a neat fix of your function:</p>
<pre><code>def maximum_in_list(L):
    '''Finds the maximum value from L which is a List_of_List'''
    item = -float('inf')
    for i in L:
        if isinstance(i, list):
            i = maximum_in_list(i)  # see remark
        item = max(item, i)
    return item
</code></pre>
<hr/>
<p><strong>Remark:</strong></p>
<p>when <code>i</code> is a <code>list</code> you can re-assign it to the max of that <code>list</code> (<em>recursively</em>) so that you do not have to use too many <code>if</code> statements further down.</p>
<hr/>
<pre><code>print(maximum_in_list([9,18,99,7,4,21,[3,5,[27,57,92],7,76],32,4]))  # -&gt;  99
print(maximum_in_list([2, 9, [1, 13], 8, 6]))                        # -&gt;  13
print(maximum_in_list([2, [[100, 7], 90], [1, 13], 8, 6]))           # -&gt; 100
print(maximum_in_list([[[13, 7], 90], 2, [1, 100], 8, 6]))           # -&gt; 100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a problem with your recursive approach. Simple fix would be:</p>
<pre><code>item = max(item, maximum_in_list(i))
</code></pre>
<p>Updated code would look like this:</p>
<pre><code>def maximum_in_list(L):
    '''Finds the maximum value from L which is a List_of_List'''
    item=0
    for i in L:
        if type(i)==list:
            item=max(item, maximum_in_list(i))
        elif i&gt;item:
            item=i
    return item

print(maximum_in_list([9,18,99,7,4,21,[3,5,[27,57,92],7,76],32,4]))
print(maximum_in_list([2, 9, [1, 13], 8, 6]))
print(maximum_in_list([2, [[100, 7], 90], [1, 13], 8, 6])) #Here the problem occurs
print(maximum_in_list([[[13, 7], 90], 2, [1, 100], 8, 6]))
</code></pre>
<hr/>
<p>The first time flag is used to prevent comparing a None value to an integer. If you do a comparison without first_time check then it results Type Error. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a more compact recursive solution which uses a generator expression and the built-in <code>max</code> function. It handles negative values correctly, and it will also work with non-numeric data. However, it will raise <code>TypeError</code> if you pass it a list containing items that can't be compared, eg numbers and strings.</p>
<pre><code>def r_max(lst):
    return max(r_max(u) if isinstance(u, list) else u for u in lst)

# test

data = (
    [9,18,99,7,4,21,[3,5,[27,57,92],7,76],32,4],
    [2, 9, [1, 13], 8, 6],
    [2, [[100, 7], 90], [1, 13], 8, 6],
    [[[13, 7], 90], 2, [1, 100], 8, 6],
    [[[-13, -7], -90], -2, [-1, -100], -8, -6],
    ['abc', 'd', ['ef', 'ghi', ['jkl', 'zzz'], 'xy', 'z']],
)

for lst in data:
    print(lst)
    print(r_max(lst))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[9, 18, 99, 7, 4, 21, [3, 5, [27, 57, 92], 7, 76], 32, 4]
99
[2, 9, [1, 13], 8, 6]
13
[2, [[100, 7], 90], [1, 13], 8, 6]
100
[[[13, 7], 90], 2, [1, 100], 8, 6]
100
[[[-13, -7], -90], -2, [-1, -100], -8, -6]
-1
['abc', 'd', ['ef', 'ghi', ['jkl', 'zzz'], 'xy', 'z']]
zzz
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The flag makes sure that the item variable is not reset to 0 every time, thereby producing problematic output. Your code suffers from the problem that whenever the function is called for a sub-list it resets the item variable and then compares for the maximum with 0 instead of the old maximum.</p>
<p>In your problematic input, if you change the position of 6 and 100 you will get the correct output because the last sub-list has been dealt with by then. If you add another sub-list after the now changed 100 (in the position of 6), then you'll again get the problem to occur.</p>
</div>
<span class="comment-copy">The <code>first_time</code> flag is only there to prevent comparing <code>val</code> to <code>None</code> the first time through the loop, which would throw a TypeError.</span>
<span class="comment-copy">When <code>if type(e)=type([]):</code> is true, you <i>never check if the result is higher</i>.</span>
<span class="comment-copy">Pro tip: use <code>if isinstance(e, list):</code> instead of using <code>type()</code>. You don't need to create a new list object each time you test for a type either, <code>list</code> would have been sufficient.</span>
<span class="comment-copy"><code>if type(e)=type([]):</code> has a typo too. It needs <code>==</code></span>
<span class="comment-copy">so basically item=max(item, i) is the key to the problem which i missed. I was simply finding the max of sublist and then assigning it to the item, and discarding the previous maximum. Thanks for helping</span>
<span class="comment-copy">@a2warik Setting <code>i</code> to the maximum is the key.</span>
<span class="comment-copy">@PM2Ring Oops, missed that. Thanks!</span>
<span class="comment-copy"><code>item=0</code> is ok here, but it doesn't work well if the list items are all negative. And it definitely won't work on non-numeric lists.</span>
<span class="comment-copy">Yes, you need to put flag for that and it will look like second code in the question.</span>
<span class="comment-copy">Very Good, thanks for explaining</span>
<span class="comment-copy">There is a way to do it without a flag or an initial maximum value. See my answer for details. ;)</span>
<span class="comment-copy">Wow, just 1 line of code!!! What is it called certainly not list-comprehension nor generator functions. What are these called?</span>
<span class="comment-copy">@a2warik It's called a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a>. It's very similar to a list comprehension, but it doesn't build a list. So in this example the generated values get fed directly to <code>max</code> as they're produced.</span>
