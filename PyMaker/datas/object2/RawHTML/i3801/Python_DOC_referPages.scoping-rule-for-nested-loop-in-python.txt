<div class="post-text" itemprop="text">
<pre><code>def temp():
    temparray = ['a','b']
    temparray_2 = ['c','d','e']
    for i in temparray:
        print('i:' + str(i))
        for i in temparray_2:
            print('first: ' + str(i))
        print('Second: ' + str(i))

    print('final: ' + str(i))
</code></pre>
<p>Why does the above code the following output? The variable i seems to get overwritten by whatever that is last assigned in the inner loop. Does python not obey the scoping rule like Java or C? </p>
<pre><code>i:a
first: c
first: d
first: e
Second: e
i:b
first: c
first: d
first: e
Second: e
final: e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like any function-local assignment, the loop index is in scope for the <em>entire</em> function the <code>for</code> loop appears in. A <code>for</code> loop itself does not create a new scope.</p>
</div>
<span class="comment-copy">duplicate of <a href="https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops">Scoping in Python 'for' loops</a></span>
<span class="comment-copy">I would avoid using the same variable in nested <code>for</code> statements.  If you want one to influence the other, use an assignment.</span>
<span class="comment-copy">Yes, Python doesn't work like Java/C. You can find a simple explanation of these rules <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer">here</a>. The important bit: "Each assignment or import statement occurs within a block defined by a class or function definition or at the module level (the top-level code block)." Note, that only function definitions, class definitions, and the module create a block with their own scope. Nothing else does. Not for-loops, or if-statements etc.</span>
<span class="comment-copy">Also, a <code>for</code> statement represents an assignment operation.</span>
<span class="comment-copy">@MadPhysicist That's what I mean to infer, but I don't think I could have been less explicit :)</span>
<span class="comment-copy">infer-&gt;imply? :)</span>
<span class="comment-copy">I'm going to stop typing now.</span>
