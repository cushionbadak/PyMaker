<div class="post-text" itemprop="text">
<p>I have a <code>dict</code> subclass like this:</p>
<pre><code>class MyDict(dict):
    def __getitem__(self, name):
        return globals()[name]
</code></pre>
<p>This class can be used with <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> and <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> without issues:</p>
<pre><code>&gt;&gt;&gt; eval('bytearray', MyDict())
&lt;class 'bytearray'&gt;
&gt;&gt;&gt; exec('print(bytearray)', MyDict())
&lt;class 'bytearray'&gt;
</code></pre>
<p>But if I instantiate a function object with the <a href="https://docs.python.org/3/library/types.html#types.FunctionType" rel="noreferrer"><code>types.FunctionType</code></a> constructor, the function can't access any builtins:</p>
<pre><code>import types

func = lambda: bytearray
func_copy = types.FunctionType(func.__code__,
                              MyDict(),
                              func.__name__,
                              func.__defaults__,
                              func.__closure__)

print(func_copy())
# Traceback (most recent call last):
#   File "untitled.py", line 16, in &lt;module&gt;
#     print(func_copy())
#   File "untitled.py", line 8, in &lt;lambda&gt;
#     func = lambda: bytearray
# NameError: name 'bytearray' is not defined
</code></pre>
<p>Replacing <code>MyDict()</code> with <code>globals()</code> or <code>dict(globals())</code> or event <code>{'__builtins__': __builtins__}</code> makes the code print <code>&lt;class 'bytearray'&gt;</code> as expected.</p>
<p>I don't understand where this exception is coming from. Can anyone explain this behavior? Why does it work with <code>eval</code> but not with a function object?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not a complete answer, but what seems to be happening is that CPython ignores the custom <code>__getitem__</code> when it accesses the builtins. It seems to treat <code>MyDict</code> like a normal (not subclassed) dict. If the <code>'__builtins__'</code> key is actually present in the dict, then everything works correctly:</p>
<pre><code>class MyDict(dict):
    def __getitem__(self, name):
        return globals()[name]


import types

globs = MyDict()
globs['__builtins__'] = __builtins__

func = lambda: bytearray
func_copy = types.FunctionType(func.__code__,
                              globs,
                              func.__name__,
                              func.__defaults__,
                              func.__closure__)

print(func_copy())
# output: &lt;class 'bytearray'&gt;
</code></pre>
<p>The question remains why this only happens with <code>FunctionType</code>, and not with <code>eval</code> and <code>exec</code>.</p>
</div>
