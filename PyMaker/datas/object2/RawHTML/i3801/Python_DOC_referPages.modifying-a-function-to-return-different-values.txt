<div class="post-text" itemprop="text">
<p>I must modify the function gp so it will handle + and - grades by adding or subtracting 0.3 points. For example, a B + is worth 3.3 points, and a C- is 1.7 points. </p>
<p>Example. </p>
<pre><code>&gt;&gt;&gt; gp('A-')
3.7

&gt;&gt;&gt;gp('B+')
3.3
</code></pre>
<p>The suggestion is I could just add a bunch of elif clauses to test each grade separately, but a similar design is to use a call to s.startswith to figure out the value of the letter grade, then use s.endswith to see if you should add or subtract 0.3 points.</p>
<p>So far this is what I have.</p>
<pre><code>def gp(s):
       A = 4
       return A
       B = 3
       return B
       C = 2
       return C
       D = 1
       return D
       F = 0
       return f
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of a series of <code>if/elif</code> statements, you can store the numeric values for the grades and the suffixes in dictionaries. Also, you do not have to use <code>startswith</code> or <code>endswith</code>, you could just use <code>s[0]</code> and <code>s[1]</code> to get the first or second character in the string, after checking the length. You can also use <code>s[1:]</code> to get everything starting at the <code>1</code>th position, even if it's empty.</p>
<pre><code>grades = {'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}
signs = {'+': 0.3, '-': -0.3, '': 0}
def gp(s):
    return grades[s[0]] + signs[s[1:]]

&gt;&gt;&gt; gp("A+")
4.3
&gt;&gt;&gt; gp("C-")
1.7
&gt;&gt;&gt; gp("F")
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems with the <code>gp</code> function.</p>
<p>While it is possible to enumerate them, I suggest you read the following resources:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">How to declare a Python function</a></li>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow noreferrer">How to use function arguments</a></li>
<li><a href="https://stackoverflow.com/questions/7129285/what-is-the-purpose-of-the-return-statement">What is the purpose of the return statement?</a></li>
</ul>
<p>When you're ready, I strongly recommend you use dictionaries to store your mappings. Here's an example:</p>
<pre><code>grade_dict = dict(zip('ABCDF', (4, 3, 2, 1, 0)))
sign_dict = dict(zip('-+', (-0.3, 0.3)))

def gp(s):

    grade, *sign = s

    if sign:
        return grade_dict[grade] + sign_dict[sign[0]]
    else:
        return grade_dict[grade]

res = gp('A-')  # 3.7
</code></pre>
<p><strong>Edit</strong>: My schooling didn't involve GPA, so I didnt't catch this. If you need to cap at 4.0, you can use this modification:</p>
<pre><code>def gp(s):

    grade, *sign = s

    if sign:
        res = grade_dict[grade] + sign_dict[sign[0]]
    else:
        res = grade_dict[grade]

    return max(res, 4.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My suggestion would be to use a dictionary for how many points each specific grade would get. Using a dictionary is somewhat like the Python equivalent for a <code>switch</code> statement and is generally consider more idiomatic than a long <code>if/elif/else</code> chain. (My answer is assuming you're using the standard 4.0 GPA calculation scale. If not, this can obviously be changed to suite your needs.)</p>
<pre><code>grade_to_points = {
    'A+':   4.0,
    'A':    4.0,
    'A-':   3.7,
    'B+':   3.3,
    'B':    3.0,
    ...
}

def gp(grade):
    points = grade_to_points.get(grade)
    if points is None:
        raise ValueError('{:r} is not a valid grade!'.format(grade))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use dictionnaries</p>
<pre><code>def function(grade)
  dict = {'A':4, 'B':3, 'C':2, 'D':1, 'F':0}
  if grade[1] == '+':
    return dict[grade[0]]+0.3
  elif grade[1] == '-':
    return dict[grade[0]] - 0.3
</code></pre>
<p>Then add or substract 0.3 depending on the sign</p>
</div>
<div class="post-text" itemprop="text">
<p>Another dictionary (hash) approach.</p>
<pre><code>def gp(s):
    gradhash = {
        "A+": 4.0 + 0.3
        ,"A": 4.0
        ,"A-": 4.0 - 0.3
        ,"B+": 3.0 + 0.3
        ,"B": 3.0
        ,"B-": 3.0 - 0.3
        ,"C+": 2.0 + 0.3
        ,"C": 2.0
        ,"C-": 2.0 - 0.3
        ,"D+": 1.0 + 0.3
        ,"D": 1.0
        ,"D-": 1.0 - 0.3
    }

    return gradhash[s]

print(gp('A-'))
</code></pre>
</div>
<span class="comment-copy">You're current function won't work. The <code>return</code>s need to be conditional.</span>
<span class="comment-copy">That's not even close to valid Python code.</span>
<span class="comment-copy">It looks like you've made no real attempt to implement your own suggestions, so it's hard to see what you're asking.</span>
<span class="comment-copy">Make a hash with the letter grades ask keys and values +-0.3.</span>
<span class="comment-copy">Isn't <code>s[1]</code> enough instead of <code>s[1:]</code>? Btw was about to post the same answer. :)</span>
<span class="comment-copy">@Austin It is, but <code>s[1]</code> will fail without an additional check if no <code>+</code> or <code>-</code> is provided, whereas <code>s[1:]</code> will just return <code>''</code>.</span>
<span class="comment-copy">@ChristianDean, Thanks for the feedback. Hopefully, it's a little clearer now.</span>
<span class="comment-copy">Yeah, @jpp, that looks nice! I forgot to when I made my comment earlier, so +1!</span>
<span class="comment-copy">This fails if there is no <code>+</code> or <code>-</code> at all.</span>
<span class="comment-copy">@tobias_k it's also missing a colon and capitalisation is wrong</span>
<span class="comment-copy">It was just an example, he asked for a method</span>
