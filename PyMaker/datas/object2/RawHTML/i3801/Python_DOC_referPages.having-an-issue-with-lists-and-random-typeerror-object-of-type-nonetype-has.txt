<div class="post-text" itemprop="text">
<p>I am making a game right now, but here is the stripped down code of the issues I have run in to. This scenario would be in a class in my game, however recreating it in a test file has yielded the same error message, so I assume that doesn't matter for now.</p>
<p>Here is the code:</p>
<pre><code>import random

list_of_directions = ['right', 'left', 'up', 'down']
new_list = list_of_directions.remove('right')

third_list = []
third_list.append(random.choice(new_list))

print(third_list)
</code></pre>
<p>Again the error message is <code>'TypeError: object of type 'NoneType' has no len()'</code></p>
<p>I thought I understood how <code>.remove()</code> works, but maybe I don't?</p>
<p>Please let me know what the issue is if you know</p>
<p>Thanks in advanced!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.remove</code> is an <em>in-place</em> operation. It returns <code>None</code>.</p>
<p>You need to perform this operation in a separate line to <code>new_list</code>. In other words, instead of <code>new_list = list_of_directions.remove('right')</code>:</p>
<pre><code>new_list = list_of_directions[:]

new_list.remove('right')    
</code></pre>
<p>In the above logic, we assign <code>new_list</code> to a copy of <code>list_of_directions</code> before removing a specific element.</p>
<p>Notice the importance of assigning to a <strong>copy</strong> of <code>list_of_directions</code>. This is to avoid the highly probable scenario of <code>new_list</code> changing with <code>list_of_directions</code> in an undesired manner.</p>
<p>The behaviour you are seeing is noted explicitly in the <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>You might have noticed that methods like <code>insert</code>, <code>remove</code> or <code>sort</code>
  that only modify the list have no return value printed â€“ they return
  the default <code>None</code>. This is a design principle for all mutable data
  structures in Python.</p>
</blockquote>
</div>
<span class="comment-copy">Note: If the goal is to preserve the original <code>list_of_directions</code>, you'd want to reverse the operations; make <code>new_list = list_of_directions[:]</code>, <i>then</i> call <code>new_list.remove('right')</code>. Otherwise, the two lists end up with the same contents, which is fairly pointless. Alternatively, combine the two operations into a list comprehension: <code>new_list = [d for d in list_of_directions if d != 'right']</code> (differs behaviorally, since it will remove multiple instances of <code>'right'</code> if they exist, but probably what is desired in this case).</span>
<span class="comment-copy">@ShadowRanger, Noted, thanks.</span>
