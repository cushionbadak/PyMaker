<div class="post-text" itemprop="text">
<p>I have a list</p>
<pre><code>[25, 35, 54, 70, 68, 158, 78, 11, 18, 12]
</code></pre>
<p>I want to sort this list by fixing the first element i.e: if I fix 35 the sorted list should look like </p>
<pre><code>[35, 54, 68, 70, 78, 158, 11, 12, 18, 25]
</code></pre>
<p>If I fix 158 as the first element the sorted list should look like</p>
<pre><code>[158, 11, 12, 18, 25, 35, 54, 68, 70, 78]
</code></pre>
<p>basically I want to fix the first element and the rest should be in sorted order, if there is a number that is lesser than the first element is found it should not go before first element. Is there a builtin function available for this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just define a key function like:</p>
<h3>Code:</h3>
<pre><code>def sorter(threshold):
    def key_func(item):
        if item &gt;= threshold:
            return 0, item
        return 1, item

    return key_func
</code></pre>
<p>This works by returning a tuple such that the numbers above threshold will sort below the numbers under the threshold.</p>
<h3>Test Code:</h3>
<pre><code>data = [25, 35, 54, 70, 68, 158, 78, 11, 18, 12]
print(sorted(data, key=sorter(70)))
</code></pre>
<h3>Results:</h3>
<pre><code>[70, 78, 158, 11, 12, 18, 25, 35, 54, 68]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will do the job</p>
<pre><code>a = [25, 35, 54, 70, 68, 158, 78, 11, 18, 12]
a.sort()
index = a.index(35)
a = a[index:] + [:index]

print(a) #[35, 54, 68, 70, 78, 158, 11, 12, 18, 25]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can sort the list and then recover the index of the element with <code>lst.index</code> to pivot it.</p>
<h2>Code</h2>
<pre><code>def pivot_sort(lst, first_element):
    lst = sorted(lst)
    index = lst.index(first_element)

    return lst[index:] + lst[:index]
</code></pre>
<h2>Example</h2>
<pre><code>lst = [25, 35, 54, 70, 68, 158, 78, 11, 18, 12]

print(pivot_sort(lst , 70))
# prints: [70, 78, 158, 11, 12, 18, 25, 35, 54, 68]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A fast and simple <strong><code>numpy</code></strong> solution:</p>
<pre><code>def numpy_roll(arr, elem):
    arr = np.sort(arr)
    return np.roll(arr, len(arr)-np.argwhere(arr==elem)[0])

x
# array([17, 30, 16, 78, 54, 83, 92, 16, 73, 47])

numpy_roll(x, 16)
# array([16, 16, 17, 30, 47, 54, 73, 78, 83, 92])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combined use of <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a>.</p>
<p><strong>Code</strong>: </p>
<pre><code>from itertools import cycle, islice

def pivot_sort(lst, pivot):
    sorted_lst = sorted(lst)
    return list(islice(cycle(sorted_lst), sorted_lst.index(pivot), 2*len(sorted_lst)-lst.index(pivot)))


lst = [25, 35, 54, 70, 68, 158, 78, 11, 18, 12]
pivot = 70

print(pivot_sort(lst, pivot))

# [70, 78, 158, 11, 12, 18, 25, 35, 54, 68]
</code></pre>
</div>
<span class="comment-copy">If this is for something like an in-place quicksort, there are lots of existing solutions.</span>
<span class="comment-copy">This works perfectly, thanks</span>
