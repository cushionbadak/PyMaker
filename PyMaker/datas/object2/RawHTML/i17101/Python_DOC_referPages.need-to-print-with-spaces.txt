<div class="post-text" itemprop="text">
<p>I have to print name with spaces, can u help me please?
I got the code like this:</p>
<pre><code>class Perfil:
    def __init__(self,email,nome,cidade):
        self.email=email
        self.nome=nome
        self.cidade=cidade

    def __str__(self):
        return "Perfil de "+self.nome+" ""("+self.email+")"" de "+self.cidade

    def getCidade(self):
        return self.cidade

    def setCidade(self,novo):
        self.cidade=novo

    def getDominio(self):
        t=self.email.rpartition("@")
        return t[2]

    def limpaNome(self):
        new=""
        if self.nome.isalpha()==True:
            return self.nome
        else:
            for i in self.nome:
                if i.isalpha()==True:
                    new +=i
        return new
</code></pre>
<p>When i run the program:</p>
<pre><code>&gt;&gt;&gt; p=Perfil("lol@mail.pt","Ze Car231los", "Porto")
&gt;&gt;&gt; p.limpaNome()
'ZeCarlos'
</code></pre>
<p>I need a print like 'Ze Carlos' (with space)</p>
<p>Basically i need to wrote a program using abstract data types (class Profile) to save information for each user. Each object got the following attributes:</p>
<pre><code>email
name
city
</code></pre>
<p>The class should have the following methods to manipulate the objects above</p>
<pre><code>Method
__init__(self, email, name, city) - constructor
__str__(self)
getCity(self) - return the value of atribute city
getCity(self.new) - return the atribute city with a new value
getDomain(self) - example: lol@mail.com sugestion: use the method partition (i have to return mail.com only)
cleanName(self) - change the atribute name, deleting characters WICH are not alphabetic or spaces sugestion: use method isalpha
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you want to do is remove all occurrences of <code>'0'</code>,<code>'1'</code>,<code>'2'</code>,...,<code>'9'</code> from the string, then you could use <code>str.translate</code> like this:</p>
<pre><code>def limpaNome(self):
    return self.nome.translate({ord(c):None for c in '0123456789'})
</code></pre>
<hr/>
<p>Note that there is no need for getters/setters like this in Python:</p>
<pre><code>def getCidade(self):
    return self.cidade

def setCidade(self,novo):
    self.cidade=novo
</code></pre>
<p>Instead, just let the user access/set the attribute directly: <code>self.cidade</code>. If, at some point, you'd like to run a function whenever the attribute is accessed or assigned to, then you can make <code>cidade</code> a <a href="http://docs.python.org/3/library/functions.html#property" rel="nofollow">property</a> <em>without having to change the usage syntax</em>.</p>
<hr/>
<p>You could even make <code>getDominio</code> and <code>limpaNome</code> properties too:</p>
<pre><code>@property
def dominio(self):
    t=self.email.rpartition("@")
    return t[2]

@property
def limpaNome(self):
    return self.nome.translate({ord(c):None for c in '0123456789'})
</code></pre>
<p>Notice you don't need paretheses when accessing or setting the property. The syntax looks the same as though <code>lipaNome</code> were a plain attribute:</p>
<pre><code>&gt;&gt;&gt; p=Perfil("lol@mail.pt","Ze Car231los", "Porto")
&gt;&gt;&gt; p.limpaNome
Ze Carllos
&gt;&gt;&gt; p.dominio
mail.pt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string

# ... the rest of your code
# ...

    def limpaNome(self):
        whitelist = set(string.ascii_uppercase+string.ascii_lowercase+" ")
        if self.nome.isalpha():
            return self.nome
        else:
            return ''.join(ch for ch in self.nome if ch in whitelist)
</code></pre>
<p>Or with regex:</p>
<pre><code>import re

# ...
# ...

    def limpaNome(self):
        return re.sub(r"[^a-zA-Z ]",'',self.nome)
</code></pre>
<p>Note that if I were you, I'd do:</p>
<pre><code>class Perfil:
    def __init__(self, email, nome, cidade):
        self.email = email
        self.cidade = cidade
        self.nome = limpaNome(nome)
</code></pre>
</div>
<span class="comment-copy">Whose code is this? I feel like if you wrote it, you'd know why it works that way.</span>
<span class="comment-copy">@AdamSmith: Thanks for the correction.</span>
<span class="comment-copy">I love the use of properties here, but IMO for variables that won't change much (if at all!) it's silly to add that overhead for what should be a simple attribute access. Maybe use a <code>dominio.setter</code> to assign <code>self.dominio_</code> to <code>self.email.rpartition("@")[2]</code> then the <code>dominio.getter</code> returns <code>self.dominio_</code>, but....</span>
