<div class="post-text" itemprop="text">
<p>I will start out by saying I have never done events and triggers in anything other than javascript.</p>
<p>I have a thread that runs and processes all the files in a folder. I want this thread to run everytime a new file writes to that folder. I thought events would be the way to do that, but I have no idea how to do that in python.</p>
<p>How do you tell a thread to throw or trigger an event? How does another thread pick this up?</p>
<p>sample thread:</p>
<pre><code>def list_files_thread(dir):
    for filename in os.listdir(dir):
        print filename

thread.start_new_thread(list_files_thread, ('output',))
</code></pre>
<p>Edit: 
I am new to mutlithreading, so maybe I should use this instead?</p>
<pre><code>class list_files_thread(threading.Thread):
    def __init__(self, directory):
        self.directory = directory
    def run(self):
        list_files(self.directory)

def list_files(directory_path):
    for filename in os.listdir(directory_path):
        print filename
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, the typical way to trigger asynchronous events is to use the <a href="http://docs.python.org/3/library/signal.html" rel="nofollow"><code>signal</code></a> module. As the documentation notes, signals <em>cannot</em> be used for inter-thread communication, so threads would be inappropriate in this case. Of course, you can also use threads using <a href="http://docs.python.org/3/library/threading.html#threading.Condition" rel="nofollow"><code>threading.Condition</code></a> objects.</p>
<p>That being said, asynchronous events, threads, and signals are confusing and hard to implement correctly. Are you sure you want to reinvent the wheel? (You very well might be; I just like to check.) If not, <a href="https://pythonhosted.org/watchdog/" rel="nofollow"><code>watchdog</code></a> provides the exact capabilities you require.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, this is not a problem of <code>python events</code> it's more about <em>Operative System Signals</em>. You will need some way of monitoring the changes in the target folder. Since you are planning  your code to be multiplatform I recommend you work with Qt specifically <code>QtCore.QFileSystemWatcher</code>.</p>
<p>Here are you have an aswer that can help you: <a href="https://stackoverflow.com/questions/182197/how-do-i-watch-a-file-for-changes-using-python">How do I watch a file for changes?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the great answers.</p>
<p>This is the code I ended up using:</p>
<pre><code>def list_files(directory_path):
    print directory_path
    parent_dir = os.path.abspath(os.path.join(directory_path, os.pardir))
    print parent_dir
    for filename in os.listdir(parent_dir):
         print filename

class trigger_event_handler(FileSystemEventHandler):
    def on_created(self, event):
        super(trigger_event_handler, self).on_created(event)
        list_files(event.src_path)


new_event_handler = trigger_event_handler()
observer = Observer()
observer.schedule(new_event_handler, output_dir, recursive=False)
observer.start()
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    observer.stop()
observer.join()
</code></pre>
</div>
<span class="comment-copy">not the answer to your question, but you should really use <code>threading</code> and not <code>thread</code>.  The former is the high-level API, the latter is rather low-level.</span>
<span class="comment-copy">Oh, ok. I'm new to multithreading as well...</span>
<span class="comment-copy">Windows or linux?</span>
<span class="comment-copy">I think you might be better suited with multiprocessing than threading. Take a look at multiprocessing.Queue</span>
<span class="comment-copy">What you want is that your code be able to detect when a new file is created in that folder. Is that correct?</span>
<span class="comment-copy">Couldn't I just create a watchdog thread that monitors. In that thread, if it detects a change, it spawns a "list_dir" thread?</span>
<span class="comment-copy">Sure - there's many, many ways to accomplish the same thing (although there is usually one preferred way in python). I'm not sure of your desired end goal, and I'm not sure what a list_dir thread would do. You asked about events specifically, so beyond that, you should really post a separate question.</span>
<span class="comment-copy">Does my answer implement what you were talking about?</span>
<span class="comment-copy">Well, the best way is to find out is to just go ahead and test it! (However, I also won't just leave you hanging - yes, it seems to do what you originally set out to accomplish from the brief description you provided.)</span>
<span class="comment-copy">Thanks! If I have access to the script that would write files to that folder, would this be a different situation?</span>
<span class="comment-copy">Well, of course. Then you only need to implement and <code>obserber pattern</code> and combine it with a <code>Provider consumer pattern</code> I'll update the answer to show what I mean.</span>
