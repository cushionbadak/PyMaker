<div class="post-text" itemprop="text">
<p>In Python, a list of strings can be joined together by</p>
<pre><code>','.join(['ab', 'c', 'def'])
</code></pre>
<p>But how could I easily join a list of numbers or some other things? Like this:</p>
<pre><code>0.join([1, 2, 3])  ---&gt;  [1, 0, 2, 0, 3]
</code></pre>
<p>Now I have to do this:</p>
<pre><code>sum([[x, 0] for x in [1, 2, 3]], [])[:-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could make one:</p>
<pre><code>def join_generator(joiner, iterable):
    i = iter(iterable)
    yield next(i)  # First value, or StopIteration

    while True:
       # Once next() raises StopIteration, that will stop this
       # generator too.
       next_value = next(i)
       yield joiner
       yield next_value

joined = list(join_generator(0, [1, 2, 3, 4]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just because everybody loves unreadable one-liners:</p>
<pre><code>import itertools

def join(sep, col):
    return itertools.islice(itertools.chain.from_iterable(itertools.izip(itertools.repeat(sep), col)), 1, None)
</code></pre>
<p>P.S.: better use <a href="https://stackoverflow.com/a/22788218/142637">RemcoGerlich's answer</a>. It's way more readable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not the way you are wanting to do it. You could write a for loop for the sum or you could write a for loop and have each item added as you go through your list. Otherwise, you won't be able to make the adjustment you're looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>As everyone is telling you, join is a string method instead of a list method.</p>
<p>But you can always do:</p>
<pre><code>[int(x) for x in '0'.join(map(str, [1, 2, 3]))]
</code></pre>
</div>
<span class="comment-copy">Short answer: Nope.</span>
<span class="comment-copy">Note that what you're describing is a different operation: <code>str.join</code> turns a list-of-strings into a string by interleaving and concatenating, your generalized join would turn a list-of-x into a list-of-x by only interleaving and not concatenating. The concatenation part is the whole reason <code>join</code> is a string method instead of a list method.</span>
<span class="comment-copy">You probably want <code>[0].join([[1,2,3], [4,5], [6,7,8]])</code> to represent the same function.</span>
<span class="comment-copy">As a note - your example code uses <code>sum()</code> to join lists - this is generally a really bad idea as <code>sum()</code> isn't optimised for the task. Take a look at RemcoGerlich's generator for the best way to do this. For a general case of joining many lists - you want <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a> (use <code>list()</code> on the resuling generator if you need a list).</span>
<span class="comment-copy">Note you could just do <code>yield next(i)</code> initially (before entering the <code>while</code> loop), no need to assign to <code>next_value</code> - other than that, a nice implementation.</span>
<span class="comment-copy">Pah! We need more one-liners! Everybody loves one-liners! <code>itertools.islice(itertools.chain.from_iterable(itertools.izip(itertools.repeat(joiner), iterable)), 1, None)</code></span>
<span class="comment-copy">@DominicKexel And this isn't a separate answer because?  It's sufficiently different from he posted answer.</span>
<span class="comment-copy">@SethMMorton <a href="http://stackoverflow.com/a/22789137/142637">if you insist...</a></span>
<span class="comment-copy">@Lattyware: thanks, changed it.</span>
<span class="comment-copy">Hmm, that relies on the assumption that all numbers are single digit?</span>
<span class="comment-copy">Not bad. But if the element is float or so, it can loose precision.</span>
<span class="comment-copy">Yep, relies in a lot of assumptions, but does what he wants to</span>
<span class="comment-copy">@tomaspdc I'm pretty sure that the scenario given is a simplified one - assuming single digit seems unlikely to be a real case. The original poster also says 'or some other things'.</span>
<span class="comment-copy">I agree, if you want a generalized use I like @RemcoGerlich solution more.</span>
