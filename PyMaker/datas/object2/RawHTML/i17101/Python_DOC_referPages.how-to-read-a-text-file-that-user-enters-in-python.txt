<div class="post-text" itemprop="text">
<p>All i have gotten this far is this.</p>
<pre><code>f = open(input('enter file'))
lines = f.readlines()
lines[10]
print("lines")
</code></pre>
<p>any help?
i changed it to lines[0,11]</p>
<p>QUESTION HAS BEEN ANSWERED</p>
</div>
<div class="post-text" itemprop="text">
<p>BorrajaX's solution is not ideal because it reads the whole file.  Better is to use python's built in file iterator.  <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> wraps this iterator to count the number of lines returned.</p>
<pre><code>f = open(input('enter file'))
for lnum, line in enumerate(f):
  print(line, end='')
  if lnum == 9:
    break
</code></pre>
<p><strong>Edit</strong>
Another method (credit to Robᵩ):</p>
<pre><code>import itertools
f = open(input('enter file'))
print(''.join(itertools.islice(f, 10)))
</code></pre>
<p>This is slightly faster, but has higher peak memory.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>lines</code> is a list. <code>lines[10]</code> gives you the 11th element of the <code>lines</code> list. It doesn't slice it (check this <a href="https://stackoverflow.com/a/509295/289011">answer</a> about slicing notation).</p>
<p>Also, with <code>print("lines")</code> you're printing the string <code>"lines"</code> , not the <strong>variable</strong> <code>lines</code>. Try:</p>
<pre><code>f = open(input('enter file'))
lines = f.readlines()
print(lines[0:10])
</code></pre>
<p><strong>EDIT:</strong> </p>
<p>Thanks to user <a href="https://stackoverflow.com/users/8747/rob">Robᵩ</a> to help me realize that I've forgotten my basic Python. <strong>:-D</strong></p>
<p>You don't need a <code>min</code> to control the slicing if you have less than 10 elements:</p>
<pre><code>&gt;&gt;&gt; [1,2,3,4,5][0:10]
[1, 2, 3, 4, 5]
</code></pre>
</div>
<span class="comment-copy">If the question has been answered, please "accept" one of the answers by clicking on the check-mark next to the best answer.</span>
<span class="comment-copy">thanks i didnt know how to do that. but i have done so now</span>
<span class="comment-copy">Agree, but I didn't want to deviate too much from the original question (but yeah, that's definitely better memory-wise)</span>
<span class="comment-copy">If we are going to stop iterating after 10, try <code>for line in itertools.islice(f, 10): print(line,end='')</code> or even <code>print(''.join(itertools.isclice(f, 10),end='')</code>.</span>
<span class="comment-copy">Ya was trying to keep it simple.  <code>sys.stdout.write()</code> is a little more efficient than the print, too.  I like your oneliner though.</span>
<span class="comment-copy">The bit about <code>min</code> is wholly unnecessary. Slicing works correctly, even if there are too few elements in lines.</span>
