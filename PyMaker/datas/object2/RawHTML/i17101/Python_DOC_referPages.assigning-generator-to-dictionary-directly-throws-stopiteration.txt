<div class="post-text" itemprop="text">
<p>Why this code throws "StopIteration":</p>
<pre><code>stub_generator = (x for x in range(5))
stub_dict = {}
stub_dict[next(stub_generator)] = list(stub_generator)
</code></pre>
<p>and this works?</p>
<pre><code>stub_generator = (x for x in range(5))
stub_dict = {}
temp_1 = next(stub_generator)
temp_2 = list(stub_generator)
stub_dict[temp_1] = temp_2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This behavior is because of two things:</p>
<ol>
<li><p>The right-hand side of an assignment statement is evaluated before the left-hand side.</p></li>
<li><p>Generator objects can be iterated over only once.</p></li>
</ol>
<hr/>
<p>To explain further, when this code is executed:</p>
<pre><code>stub_dict[next(stub_generator)] = list(stub_generator)
</code></pre>
<p>this part:</p>
<pre><code>list(stub_generator) 
</code></pre>
<p>will be evaluated <em>before</em> this part:</p>
<pre><code>stub_dict[next(stub_generator)]
</code></pre>
<p>Moreover, placing <code>stub_generator</code> in <code>list</code> will cause the generator to be iterated over entirely and thus exhausted.  When <code>next(stub_generator)</code> is then evaluated afterwards, a <code>StopIteration</code> exception is raised because <code>stub_generator</code> is now empty.</p>
<hr/>
<p>This code however is different:</p>
<pre><code>temp_1 = next(stub_generator)
temp_2 = list(stub_generator)
</code></pre>
<p>It will execute <code>next(stub_generator)</code> <em>before</em> executing <code>list(stub_generator)</code>.  Meaning, <code>stub_generator</code> will still have some items in it when it is converted to a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="http://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">language reference for assignment statements</a>,</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (expression_list | yield_expression)
</code></pre>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.</p>
</blockquote>
<p>So, the expression on the right hand side is evaluated first. So, <code>list(stub_generator)</code> is executed first and that exhausts the generator and then you are doing <code>next(stub_generator)</code> which tries to iterate an already exhausted generator. That is why <code>StopIteration</code> is raised.</p>
</div>
