<div class="post-text" itemprop="text">
<p>I have a Python module for which I'm writing a tutorial using Sphinx including doctests. </p>
<p>This module comes with a few helper programs. </p>
<p>I would like to include those helper programs in the documentation <strong>and</strong> have doctest check that the standard output is in sync between the current program version and the documentation. </p>
<p>I suppose I can use the sh module, or popen to check the standard output of a given program but I prefer that those tricks do not show up into the docs, or else non-programmers users will be certainly lost. </p>
<p>Is there a way to achieve that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/doctest.html#module-doctest" rel="nofollow noreferrer"><em>doctest</em></a> module only checks statements than can be run from the python interactive prompt.</p>
<p>Command-line tools can be invoked from the python interactive prompt using the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><em>subprocess</em></a> module:</p>
<pre><code># Create Helper Function
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; run_commandline = lambda cmd: subprocess.check_output(cmd, shell=True).decode()

# Doctestable command-line calls
&gt;&gt;&gt; print(run_commandline('cal 7 2017'))
     July 2017
Su Mo Tu We Th Fr Sa
                   1
 2  3  4  5  6  7  8
 9 10 11 12 13 14 15
16 17 18 19 20 21 22
23 24 25 26 27 28 29
30 31

&gt;&gt;&gt; print(run_commandline('echo $BASH_VERSION'))
3.2.57(1)-release
</code></pre>
<p>There are likely some ways to hack doctest or sphinx to get what you want more directly, but this technique uses the advertised APIs for doctest, sphinx, and subprocess in exactly the ways they were designed to be used (doctest is designed to replay interactive prompt sessions found in docstrings, and subprocess is designed to run command-line tools directly from python and capture their output).</p>
<blockquote>
<p>I suppose I can use the sh module, or popen to check the standard
  output of a given program but I prefer that those tricks do not show
  up into the docs, or else non-programmers users will be certainly
  lost.</p>
</blockquote>
<p>Two thoughts:  First, the details of those calls can mostly be hidden in a helper function to minimize distraction.  Second, if you need to invoke command-line programs from Python, it isn't a trick to use <em>popen</em> or <em>subprocess</em> since those are the tools designed specifically for making those calls from Python.</p>
</div>
<span class="comment-copy">Why the downvotes?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/10886841/sphinx-and-argparse-autodocumenting-command-line-scripts" title="sphinx and argparse autodocumenting command line scripts">stackoverflow.com/questions/10886841/â€¦</a></span>
<span class="comment-copy">I don't think this is a duplicate.  The other question is solely about auto-documentation.  This is primary about a much more interesting topic, using doctest to test command-line tools.</span>
