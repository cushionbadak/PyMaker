<div class="post-text" itemprop="text">
<p>Say I have a week number of a given year (e.g. week number 6 of 2014). </p>
<p>How can I convert this to the date of the Monday that starts that week?</p>
<p>One brute force solution I thought of would be to go through all Mondays of the year:</p>
<pre><code>date1 = datetime.date(1,1,2014)
date2 = datetime.date(12,31,2014)
def monday_range(date1,date2):
    while date1 &lt; date2:
        if date1.weekday() == 0:
            yield date1
        date1 = date1 + timedelta(days=1)
</code></pre>
<p>and store a hash from the first to the last Monday of the year, but this wouldn't do it, since, the first week of the year may not contain a Monday.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just feed the data into <a href="https://docs.python.org/3/library/time.html?highlight=time.asctime#time.asctime" rel="nofollow"><code>time.asctime()</code></a>. </p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; week = 6
&gt;&gt;&gt; year = 2014
&gt;&gt;&gt; atime = time.asctime(time.strptime('{} {} 1'.format(year, week), '%Y %W %w'))
&gt;&gt;&gt; atime
'Mon Feb 10 00:00:00 2014'
</code></pre>
<hr/>
<p><strong>EDIT:</strong>
To convert this to a <code>datetime.date</code> object:</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.fromtimestamp(time.mktime(atime)).date()
datetime.date(2014, 2, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple function to get the Monday, given a date.</p>
<pre><code>def get_monday(dte):
    return dte - datetime.timedelta(days = dte.weekday())
</code></pre>
<p>Some sample output:</p>
<pre><code>&gt;&gt;&gt; get_monday(date1)
datetime.date(2013, 12, 30)
&gt;&gt;&gt; get_monday(date2)
datetime.date(2014, 12, 29)
</code></pre>
<p>Call this function within your loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>All about strptime \ strftime:</p>
<p><a href="https://docs.python.org/2/library/datetime.html" rel="nofollow">https://docs.python.org/2/library/datetime.html</a></p>
<pre><code>mytime.strftime('%U') #for W\C Monday
mytime.strftime('%W') #for W\C Sunday
</code></pre>
<p>Sorry wrong way around</p>
<pre><code>from datetime import datetime
mytime=datetime.strptime('2012W6 MON'. '%YW%U %a')
</code></pre>
<p>Strptime needs to see both the year and the weekday to do this. I'm assuming you've got weekly data so just add 'mon' to the end of the string.
Enjoy</p>
</div>
<span class="comment-copy">Have you tried the <code>datetime</code> module to see if they have such functionality?</span>
<span class="comment-copy">@sshashank124 yes. I use it extensively, but haven't found a way of doing off-the-shelf. Perhaps I need to go through the entire year to store a hash of dates?</span>
<span class="comment-copy">Maybe something like <code>7*week_num</code> and that will be your timedelta in days from Jan 1 or something and then you can find the closest Monday. I'm sorry if it is really vague.</span>
<span class="comment-copy">Thanks! Any way to convert <code>time.strptime('{} {} 1'.format(year, week), '%Y %W %w')</code> to a <code>datetime.date object</code>?</span>
<span class="comment-copy">@user815423426 See edits.</span>
<span class="comment-copy">Thanks, although this solution suffers from an off-by-one error. if I do  <code>convert_week_and_year(week=14, year=2014)</code> I get: <code>datetime.datetime(2014, 4, 7, 0, 0)</code>, which is <b>not</b> consistent with I expected (see <a href="http://whatweekisit.com/" rel="nofollow noreferrer">whatweekisit.com</a>). Week = 14 should correspond to March 31st, not April 7th ....</span>
<span class="comment-copy">@user815423426 Yeah, that can be a problem, different platforms having different 'opinions'. Just add +- 7 days is the easiest way to remove that problem.</span>
<span class="comment-copy">Sadly, that last step seems to raise <code>TypeError: argument must be 9-item sequence, not str</code> for Python 2.7... Any idea?</span>
<span class="comment-copy">For the last one, I get an error. <code>strptime</code> does not seem to be defined</span>
