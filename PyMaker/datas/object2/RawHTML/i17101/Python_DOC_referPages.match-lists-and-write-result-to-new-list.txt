<div class="post-text" itemprop="text">
<p>I have a problem matching lists in python.</p>
<pre><code>list1 = [["id1","string1","string2"],["id2","string3","string4"]]
list2 =   [["id1","string1","string2", "string3"],["id3","string4","string5", "string6"]]
</code></pre>
<p>I want something like this</p>
<pre><code>list3 = [["id1", "string1", "string2", "string3"],["id2","string3","string4"],["id3","string4","string5", "string6"]]
</code></pre>
<p>if an id from list1 is in list2 then write the element from list2 (e.g. <code>["id1","string1","string2"]</code>) to a new list. If it's not in the list take the element from list1 and write it to the new list. At the end the result should look something like this</p>
<p>I tried it this way</p>
<pre><code>for p in list1:
   for d in list2:
       if ( (p[0] in list2)):
          list3.append(d)
          next
       else:
          list3.append(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the order doesn't matter then the best way is to convert them to dictionaries and match them like this</p>
<pre><code>dict1 = {item[0]: item for item in list1}
dict2 = {item[0]: item for item in list2}
print [dict2.get(item, dict1.get(item)) for item in dict1.viewkeys() | dict2]
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['id2', 'string3', 'string4'],
 ['id3', 'string4', 'string5', 'string6'],
 ['id1', 'string1', 'string2', 'string3']]
</code></pre>
<p>If you are using Python 3.x, then use <a href="http://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow"><code>dict.keys</code></a> instead of <a href="http://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow"><code>dict.viewkeys</code></a>, like this</p>
<pre><code>print([dict2.get(item, dict1.get(item)) for item in dict1.keys() | dict2])
</code></pre>
<p>The same can be written like this</p>
<pre><code>[dict2.get(item) or dict1.get(item) for item in dict1.keys() | dict2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's better to transform your lists to dicts, which is easier to do the job, e.g.:</p>
<pre><code>In [259]: list1 = [["id1","string1","string2"],["id2","string3","string4"]]

In [260]: {i[0]:i[1:] for i in list1}
Out[260]: {'id1': ['string1', 'string2'], 'id2': ['string3', 'string4']}
</code></pre>
<p>then you can check if the keys (namely your <code>id</code>s) in the 1st dict are in the 2nd dict:</p>
<pre><code>In [270]: d1 = {i[0]:i[1:] for i in list1}

In [271]: d2 = {i[0]:i[1:] for i in list2}

In [272]: d1.update(d2)

In [273]: d1
Out[273]: 
{'id1': ['string1', 'string2', 'string3'],
 'id2': ['string3', 'string4'],
 'id3': ['string4', 'string5', 'string6']}
</code></pre>
<p>If you want to convert it back to list anyway:</p>
<pre><code>In [275]: [[k]+d1[k] for k in d1]
Out[275]: 
[['id2', 'string3', 'string4'],
 ['id3', 'string4', 'string5', 'string6'],
 ['id1', 'string1', 'string2', 'string3']]
</code></pre>
</div>
<span class="comment-copy">What exactly is the problem then?</span>
<span class="comment-copy">Please demonstrate that you have atleast made an effort with some code and show where you are struggling</span>
<span class="comment-copy">Does the order of elements in the output matter?</span>
<span class="comment-copy">The order doesn't matter. I added an example what I tried, but didn't work</span>
<span class="comment-copy">how does bitwise operator work here? ps. OK, got it, set arithmetics for view</span>
<span class="comment-copy">@m.wasowski When it is used with set like objects, it works as set union operator :)</span>
<span class="comment-copy">yeah, just got it, but thanks for reminding me it exists ;)</span>
<span class="comment-copy">It's working perfectly! Thanks :-)</span>
