<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22431482/python-tuple-assignment-and-checking-in-conditional-statements">Python tuple assignment and checking in conditional statements [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I would like to know if there is any reason that the following code raises a <code>SyntaxError</code>:</p>
<pre><code>&gt;&gt;&gt; if 1,2:
  File "&lt;stdin&gt;", line 1
    if 1,2:
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</code></pre>
<p>Should not <code>1,2</code> be interpreted by Python as a two-item tuple (which would then evaluate to <code>True</code> when tested by the if-statement)?  The below demonstration suggests that it should:</p>
<pre><code>&gt;&gt;&gt; 1,2
(1, 2)
&gt;&gt;&gt; tup = 1,2
&gt;&gt;&gt; bool(tup)
True
&gt;&gt;&gt;
</code></pre>
<p>Moreover, if you look at the <a href="http://docs.python.org/3/reference/compound_stmts.html#the-if-statement" rel="nofollow">documentation</a> for Python's if-statement, you will read this:</p>
<pre>
if_stmt ::=  "if" expression ":" suite
             ( "elif" expression ":" suite )*
             ["else" ":" suite]
</pre>
<p>As you can see, it clearly says that the syntax for an if-statement is the <code>if</code> keyword followed by an expression.  If I am not mistaken, <code>1,2</code> <em>is indeed</em> an expression.  </p>
<p>Finally, it could be argued that this syntax is useless, so why allow it?  That is true, but the <a href="http://www.thezenofpython.com/" rel="nofollow">Zen of Python</a> explicitly says:</p>
<blockquote>
<p>Special cases aren't special enough to break the rules.</p>
</blockquote>
<p>So why the <code>SyntaxError</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is to do with <a href="http://docs.python.org/3.4/reference/expressions.html#expression-lists" rel="nofollow">how Python scans and interprets expressions</a>. You get a <code>SyntaxError</code> because Python <code>if</code> statements do not tolerate having a comma <em>between conditions</em>. </p>
<p>Python reads the statement from left to right, and separates the conditions by a comma unless brackets are explicitly used for separation. This means that your expression is interpreted as this:</p>
<pre><code>(1 == 1), (2)
</code></pre>
<p>So the <code>tuple</code> is not separated but rather the two conditions. As commas are not allowed to separate conditions you get a <code>SyntaxError</code>. With this in mind, we can know why putting the brackets around the tuple gets a different result. The brackets are explicitly used for separation, so Python can interpret the <code>tuple</code> on its own and compare it. In that case there is only one condition- so no error.</p>
</div>
<div class="post-text" itemprop="text">
<p>what you are doing is not what you think.</p>
<p>1==1,2 :you declare two things.  1==1=True and 2.</p>
<p>1==(1,2)=False :they are two different types even.</p>
<p>if 1==1,2:  undoable: not a statement if you think about what I showed you so the (,)comma is not only superfluous it's wrong.</p>
</div>
<span class="comment-copy">Well... <code>1==1,2</code> is indeed an expression, but not what you're expecting I guess. It might return <code>(True, 2)</code>.</span>
<span class="comment-copy">@BrenBarn The question is different, and the answers don't apply to this question.</span>
<span class="comment-copy">@delnan: You're right, I thought my answer there included an explanation of the SyntaxError but it didn't.  That question does ask about this kind of SyntaxError as well, though.  Anyway, I edited my answer there, so that answer now answers this question.</span>
<span class="comment-copy"><code>if 1,2:</code> gives an error as well. The <code>==</code> is not relevant.</span>
<span class="comment-copy">Looks like your use of <code>==</code> in the question is confusing the people answering the question... You can get the same error simply with <code>if 1,2: ...</code></span>
<span class="comment-copy">Feedback is welcome! I am always looking to improve my posts.</span>
<span class="comment-copy">While you may <i>mean</i> the right thing, your terminology is rather confusing and non-standard, and none of this is particular to <code>if</code> as such, only to the kind of expression it requires the condition to be.</span>
<span class="comment-copy">@delnan I am just a student. As long as my answer is correct, feel free to edit it to make the terminology professional and correct. I don't believe that a down-vote is called for here.</span>
<span class="comment-copy">It's not my downvote. And I'm just a student myself ;-) As for editing: I'm really not sure how to fix my complains without essentially rewriting the entire answer. It's not only terminology, it's also that you seem to make this about <i>conditions</i> whereas, by the Python grammar, a "condition" is just a <code>test</code> which is used in many other contexts too (e.g. default values for parameters and <code>print</code> statement arguments).</span>
<span class="comment-copy">Write <code>1 == 1,2</code> in a interpreter and you will see it's a valid expression. The question is: why doesn't <code>if</code> accept this valid expression?</span>
<span class="comment-copy">because its not a testable expression. it's two expressions actually</span>
<span class="comment-copy">The correct answer was given in the question this is a duplicate for and it's a bit more complex, but closely related to the fact that everything is used in the <code>if</code> statement.</span>
<span class="comment-copy">then u should already know its 2 expressions automatically packed into a tuple by python</span>
