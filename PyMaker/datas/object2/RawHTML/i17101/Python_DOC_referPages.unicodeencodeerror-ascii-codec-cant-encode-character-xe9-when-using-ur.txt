<div class="post-text" itemprop="text">
<p>I'm writing a script that goes to a list of links and parses the information.</p>
<p>It works for most sites but It's choking on some with 
"UnicodeEncodeError: 'ascii' codec can't encode character '\xe9' in position 13: ordinal not in range(128)"</p>
<p>It stops on client.py which is part of urlib on python3</p>
<p>the exact link is:
<a href="http://finance.yahoo.com/news" rel="nofollow">http://finance.yahoo.com/news</a>/cafés-growing-faster-than-fast-food-peers-144512056.html</p>
<p>There are quite a few similar postings here but none of the answers seems to work for me.</p>
<p>my code is:</p>
<pre><code>from urllib import request

def __request(link,debug=0):      

try:
    html = request.urlopen(link, timeout=35).read() #made this long as I was getting lots of timeouts
    unicode_html = html.decode('utf-8','ignore')

# NOTE the except HTTPError must come first, otherwise except URLError will also catch an HTTPError.
except HTTPError as e:
    if debug:
        print('The server couldn\'t fulfill the request for ' + link)
        print('Error code: ', e.code)
    return ''
except URLError as e:
    if isinstance(e.reason, socket.timeout):
        print('timeout')
        return ''    
else:
    return unicode_html
</code></pre>
<h1>this calls the request function</h1>
<p>link = '<a href="http://finance.yahoo.com/news" rel="nofollow">http://finance.yahoo.com/news</a>/cafés-growing-faster-than-fast-food-peers-144512056.html'
page = __request(link)</p>
<p>And the traceback is:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 250, in run_nodebug
  File "C:\reader\get_news.py", line 276, in &lt;module&gt;
    main()
  File "C:\reader\get_news.py", line 255, in main
    body = get_article_body(item['link'],debug=0)
  File "C:\reader\get_news.py", line 155, in get_article_body
    page = __request('na',url)
  File "C:\reader\get_news.py", line 50, in __request
    html = request.urlopen(link, timeout=35).read()
  File "C:\Python33\Lib\urllib\request.py", line 156, in urlopen
    return opener.open(url, data, timeout)
  File "C:\Python33\Lib\urllib\request.py", line 469, in open
    response = self._open(req, data)
  File "C:\Python33\Lib\urllib\request.py", line 487, in _open
    '_open', req)
  File "C:\Python33\Lib\urllib\request.py", line 447, in _call_chain
    result = func(*args)
  File "C:\Python33\Lib\urllib\request.py", line 1268, in http_open
    return self.do_open(http.client.HTTPConnection, req)
  File "C:\Python33\Lib\urllib\request.py", line 1248, in do_open
    h.request(req.get_method(), req.selector, req.data, headers)
  File "C:\Python33\Lib\http\client.py", line 1061, in request
    self._send_request(method, url, body, headers)
  File "C:\Python33\Lib\http\client.py", line 1089, in _send_request
    self.putrequest(method, url, **skips)
  File "C:\Python33\Lib\http\client.py", line 953, in putrequest
    self._output(request.encode('ascii'))
UnicodeEncodeError: 'ascii' codec can't encode character '\xe9' in position 13: ordinal not in range(128)
</code></pre>
<p>Any help appreciated It's driving me crazy , I think I've tried all combinations of x.decode    and similar </p>
<p>(I could ignore the offending characters if that is possible.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="http://en.wikipedia.org/wiki/Percent-encoding" rel="nofollow">percent-encoded URL</a>:</p>
<pre><code>link = 'http://finance.yahoo.com/news/caf%C3%A9s-growing-faster-than-fast-food-peers-144512056.html'
</code></pre>
<hr/>
<p>I found the above percent-encoded URL by pointing the browser at </p>
<pre><code>http://finance.yahoo.com/news/cafés-growing-faster-than-fast-food-peers-144512056.html
</code></pre>
<p>going to the page, then copying-and-pasting the 
encoded url supplied by the browser back into the text editor. However, you can generate a percent-encoded URL programmatically using:</p>
<pre><code>from urllib import parse

link = 'http://finance.yahoo.com/news/cafés-growing-faster-than-fast-food-peers-144512056.html'

scheme, netloc, path, query, fragment = parse.urlsplit(link)
path = parse.quote(path)
link = parse.urlunsplit((scheme, netloc, path, query, fragment))
</code></pre>
<p>which yields</p>
<pre><code>http://finance.yahoo.com/news/caf%C3%A9s-growing-faster-than-fast-food-peers-144512056.html
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your URL contains characters that cannot be represented as ASCII characters.</p>
<p>You'll have to ensure that all characters have been properly URL encoded; use <a href="http://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="nofollow"><code>urllib.parse.quote_plus</code></a> for example; it'll use UTF-8 URL-encoded escaping to represent any non-ASCII characters.</p>
</div>
<span class="comment-copy">User Kenneth Reitz's requests library. I cannot recommend it highly enough. It will make all this code much simpler and will almost certainly take care of this issue.</span>
<span class="comment-copy">@JackGibbs: <code>requests</code> indeed would handle URLs with non-ASCII characters in them by re-quoting the URL explicitly.</span>
<span class="comment-copy">@JackGibbs: <a href="http://tools.ietf.org/html/rfc3986" rel="nofollow noreferrer">valid urls have characters that are subset of ascii</a>.</span>
<span class="comment-copy">If it is a part of an url then <code>parse.quote()</code> could be used instead of <code>parse.quote_plus()</code> (used for <code>x-www-form-urlencoded</code>)</span>
<span class="comment-copy">@J.F.Sebastian: Thanks for the correction.</span>
<span class="comment-copy">Thanks that worked I wasn't sure if that could be a problem in other parts of the URL so I split it and then rebuilt it  url_tuple =parse.urlsplit(link) parse.quote_plus(url_tuple[2]) + url_tuple[3] + parse.quote_plus(url_tuple[4]))     encoded_link ="%s://%s%s?%s%s"%(url_tuple[0] , url_tuple[1] , parse.quote(url_tuple[2]) , url_tuple[3] , parse.quote(url_tuple[4]))</span>
<span class="comment-copy">I'm glad you got your solution to work. But use <code>parse.urlunsplit</code> to build the url. That's what it's for.</span>
