<div class="post-text" itemprop="text">
<p>I am trying find an efficient way of creating a list of dates only including the first day of the month for a given period. Something like this but better:</p>
<pre><code>import datetime
dates = [
  datetime.date (2014, 4, 1),
  datetime.date (2014, 5, 1),
  datetime.date (2014, 6, 1),
  datetime.date (2014, 7, 1),
  datetime.date (2014, 8, 1),
  datetime.date (2014, 9, 1),
  datetime.date (2014, 10, 1),
  datetime.date (2014, 11, 1),
  datetime.date (2014, 12, 1),
  datetime.date (2015, 1, 1),
  datetime.date (2015, 2, 1)]
</code></pre>
<p>Alternatively, some direction on what to Google for this. Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; startyear = 2014
&gt;&gt;&gt; startmonth = 4
&gt;&gt;&gt; endyear = 2015
&gt;&gt;&gt; endmonth = 2
&gt;&gt;&gt; [datetime.date(m/12, m%12+1, 1) for m in xrange(startyear*12+startmonth-1, endyear*12+endmonth)]
[datetime.date(2014, 4, 1), datetime.date(2014, 5, 1), datetime.date(2014, 6, 1), datetime.date(2014, 7, 1), datetime.date(2014, 8, 1), datetime.date(2014, 9, 1), datetime.date(2014, 10, 1), datetime.date(2014, 11, 1), datetime.date(2014, 12, 1), datetime.date(2015, 1, 1), datetime.date(2015, 2, 1)]
</code></pre>
<p>For Python 3, you'll need to use <code>range</code> instead of <code>xrange</code>, and <code>//</code> (<a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">floor division</a>) instead of <code>/</code> (which does float division in Python 3):</p>
<pre><code>[datetime.date(m//12, m%12+1, 1) for m in range(startyear*12+startmonth-1, endyear*12+endmonth)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're only creating the list for a few years then efficiency should not be a concern. Clarity of code is the most important aspect.</p>
<pre><code>dates = []
date = datetime.date.today()
while date.year &lt; 2015:
    if date.day == 1:
        dates.append(date)
    date += datetime.timedelta(days=1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no reason to bruteforce this:</p>
<pre><code>import datetime
from pprint import pprint

dt = datetime.date.today()
end = datetime.date(2015, 2, 1)
dates = []

while dt &lt; end:
    if not dt.month % 12:
        dt = datetime.date(dt.year+1, 1, 1)
    else:
        dt = datetime.date(dt.year, dt.month+1, 1)
    dates.append(dt)

pprint(dates)
</code></pre>
<p>Output:</p>
<pre><code>[datetime.date(2014, 4, 1),
 datetime.date(2014, 5, 1),
 datetime.date(2014, 6, 1),
 datetime.date(2014, 7, 1),
 datetime.date(2014, 8, 1),
 datetime.date(2014, 9, 1),
 datetime.date(2014, 10, 1),
 datetime.date(2014, 11, 1),
 datetime.date(2014, 12, 1),
 datetime.date(2015, 1, 1),
 datetime.date(2015, 2, 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With pandas :</p>
<pre><code>   dates= pd.date_range('2018-01-01','2020-01-01' , freq='1M')-pd.offsets.MonthBegin(1)
</code></pre>
<p>result : </p>
<pre><code>`DatetimeIndex(['2018-01-01', '2018-02-01', '2018-03-01', '2018-04-01',
               '2018-05-01', '2018-06-01', '2018-07-01', '2018-08-01',
               '2018-09-01', '2018-10-01', '2018-11-01', '2018-12-01',
               '2019-01-01', '2019-02-01', '2019-03-01', '2019-04-01',
               '2019-05-01', '2019-06-01', '2019-07-01', '2019-08-01',
               '2019-09-01', '2019-10-01', '2019-11-01', '2019-12-01'],
              dtype='datetime64[ns]', freq='MS')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use relativedelta from dateutil, and then create a function to use any date range:</p>
<pre><code>from datetime import date
from dateutil.relativedelta import relativedelta

def mthStList(start_date, end_date):
    stdt_list = []
    cur_date = start_date.replace(day=1) # sets date range to start of month
    while cur_date &lt;= end_date:
        stdt_list.append(cur_date)
        cur_date += relativedelta(months=+1)
    return stdt_list

mthStList(date(2012, 5, 26), date.today())
</code></pre>
</div>
<span class="comment-copy">How the date period is given ? 2 <code>datetime.date</code> objects ?</span>
<span class="comment-copy">Whatever is easier, I'm working on a iPython notebook and my code looked ridiculous with that array :)</span>
<span class="comment-copy">I agree with Andrew on this one (except for the bruteforce) - this is imo. too complex.</span>
<span class="comment-copy">I'll be sure to ask codereview.stackexchange next time.</span>
<span class="comment-copy">There's no reason to get grumpy when someone disagrees with your solution to a particular problem. You don't even have to reply if don't feel like it.</span>
<span class="comment-copy">Yes, this will handle the case of leap years (when we skip a year).</span>
<span class="comment-copy">Nice, but you should specify that it will includes the start of the range (that is '2018-01-01') but not the end (i.e. '2020-01-01')</span>
