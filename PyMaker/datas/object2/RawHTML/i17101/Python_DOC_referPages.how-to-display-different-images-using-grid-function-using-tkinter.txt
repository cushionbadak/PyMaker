<div class="post-text" itemprop="text">
<p>I want to display the images in the folder using <code>grid()</code>. But when I tried with the following code, I got the output with single image iterated. </p>
<p>My code:</p>
<pre><code>def messageWindow():
    win = Toplevel()
    path = 'C:\Users\HP\Desktop\dataset'
    for r in range(7):
        for c in range(10):
            for infile in glob.glob(os.path.join(path,'*.jpg')):
              im = Image.open(infile)
              resized = im.resize((100, 100),Image.ANTIALIAS)
              tkimage = ImageTk.PhotoImage(resized)
              myvar=Label(win,image = tkimage)
              myvar.image = tkimage
              myvar.grid(row=r,column=c)   
root = Tk()
button = Button(app, text='Images in DataSet',command = messageWindow)
button.pack(padx = 1, pady = 1,anchor='ne')
button.place( x = 850, y = 60)
root.mainloop()  
</code></pre>
<p>When I run this code, after 5 minutes a child window will popup, and it will display a single image like this;</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/NrNgX.png"/></p>
<p>But how to get all the images in the dataset? Any suggestions are welcome.
Tkanks for your support!</p>
</div>
<div class="post-text" itemprop="text">
<p>As I said in a comment, you're putting the same image in every row and column of the grid. Here's how to avoid that using the built-in <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow noreferrer"><code>divmod()</code></a> function to iteratively compute the row and column for each one, based on the number of <code>COLUMNS</code> you want to display in each row based on the current value of <code>image_count</code>:</p>
<pre><code>def messageWindow():
    win = Toplevel()
    path = r'C:\Users\HP\Desktop\dataset'
    COLUMNS = 10
    image_count = 0
    for infile in glob.glob(os.path.join(path, '*.jpg')):
        image_count += 1
        r, c = divmod(image_count-1, COLUMNS)
        im = Image.open(infile)
        resized = im.resize((100, 100), Image.ANTIALIAS)
        tkimage = ImageTk.PhotoImage(resized)
        myvar = Label(win, image=tkimage)
        myvar.image = tkimage
        myvar.grid(row=r, column=c)
    win.mainloop()  # Not sure if you need this, too, or not...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You always use the same column and row for all images in the dataset.</p>
<p>Try removing the row and the column for-loop. and do something like this:</p>
<pre><code>      c = 0
      r = 0  
      for infile in glob.glob(os.path.join(path,'*.jpg')):
          im = Image.open(infile)
          resized = im.resize((100, 100),Image.ANTIALIAS)
          tkimage = ImageTk.PhotoImage(resized)
          myvar=Label(win,image = tkimage)
          myvar.image = tkimage
          myvar.grid(row=r,column=c)   
          r += 1
</code></pre>
<p>This should be 70 times faster :)</p>
</div>
<span class="comment-copy">Well, for one thing, the code within the inner-most loop places all the image labels at the same row and column position -- so you're likely just seeing the last one <code>glob.glob()</code> returned.</span>
<span class="comment-copy">I was not knowing about <code>divmod()</code>, really it helped me alot :) Thank you so much :)</span>
<span class="comment-copy">@varsha: Knowing about <code>divmod()</code> isn't important per se, because the function is Python specific. However understanding what it does -- computing <code>a // b</code> and <code>a % b</code> -- is because that's the math behind the fundamental concept of how to turn a 1D (one dimensional) offset value into the 2D values (row and column) representing that position in a grid. It's a very common operation which is why Python provides a built-in to perform the computation quickly.</span>
<span class="comment-copy">its displaying only in row wise, and if I increment the columns then it will display in diagonal wise :(</span>
<span class="comment-copy">You will find a solution. Use <code>if</code>. When should an image apper in a new column?</span>
