<div class="post-text" itemprop="text">
<p>I very like quite new Python convention to print things with <code>.format()</code></p>
<p>Is it possible using it to print element line by line. Assuming of course number of elements is unknown.</p>
<p>Working example will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the string formatter on really any kind of string, including multi-line string. So of course, if you had a format string <code>'{}\n{}\n{}'</code> you could pass three items to it, and they would be all placed on separate lines.</p>
<p>So with a dynamic number of elements you want to print, all you need to do is make sure that the format string contains the same number of format items too. One way to solve this would be to construct the format string dynamically. For example this:</p>
<pre><code>'\n'.join('{}' for _ in range(len(myList))).format(*myList)
</code></pre>
<p>So you essentially create a format string first, by having a generator produce one format item <code>{}</code> per element in <code>myList</code>, and joining these using a newline character. So the resulting string looks something like this: <code>{}\n{}\n…\n{}\n{}</code>.</p>
<p>And then you use that string as the format string, and call <code>format</code> on it, passing the unpacked list as arguments to it. So you are correctly filling all spots of the format string.</p>
<p>So, you <em>can</em> do it. However, this is not really a practical idea. It looks rather confusing and does not convey your intention well. A better way would be to handle each item of your list separately, and format it separately, and only <em>then</em> join them together:</p>
<pre><code>'\n'.join('{}'.format(item) for item in myList)
</code></pre>
<p>As for just printing elements line by line, of course the more obvious way, that wouldn’t require you to build one long string with line breaks, would be to loop over the items and just print them one-by-one:</p>
<pre><code>for item in myList:
    print(item)

    # or use string formatting for the item here
    print('{}'.format(item))
</code></pre>
<p>And of course, as thefourtheye suggested, if each loop iteration is very simple, you can also pass the whole list to the print function, and set <code>sep='\n'</code> to print the elements on separate lines each.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 3.x and your intention is to just printing the list of elements, one in each line, then you can use <a href="http://docs.python.org/3/library/functions.html#print" rel="noreferrer"><code>print</code></a> function itself, like this</p>
<pre><code>my_list = [1, 2, 3, 4]
print(*my_list, sep="\n")
</code></pre>
<p><code>*my_list</code> simply unpacks the list elements and pass each one of them as parameters to the <code>print</code> function (Yes, <code>print</code> is a function in Python 3.x).</p>
<p><strong>Output</strong></p>
<pre><code>1
2
3
4
</code></pre>
<p>If you are using Python 2.x, then you can just import the print function from the future like this</p>
<pre><code>from __future__ import print_function
</code></pre>
<p><strong>Note:</strong> This import should be the first line in the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You mean like <code>print('\n'.join(a_list))</code>? String formatting could probably do something similar to <code>'\n'.join(a_list)</code>, but it doesn't seem necessary here. (see update)</p>
<p>The thing is, <code>.format</code> doesn't print things at all. That's what <code>print</code> is for. <code>format</code> takes some data and returns a string. <code>print</code> is one way to output that string to the terminal/standard output, but <code>print</code> and <code>.format</code> don't really have any real relationship.</p>
<h3>Update:</h3>
<p>I take back what I said about string formatting being able to do this. The format pattern itself predefines the <a href="http://en.wikipedia.org/wiki/Arity" rel="nofollow">arity</a> of the <code>format</code> method, so short of dynamically building the format pattern, you can't use <code>format</code> for this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Keep It Simple</p>
<pre><code>&gt;&gt;&gt; myList = [2,3,5,6,5,4,3,2]

&gt;&gt;&gt; for elem in myList:
    '{}'.format(elem)
</code></pre>
<p>gives</p>
<pre><code>'2'
'3'
'5'
'6'
'5'
'4'
'3'
'2'
</code></pre>
<p>Is it what you wish obtain?</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do it is to use string multiplication:</p>
<pre><code>list = [1, 2, 3, 4, 5]
print( ( '{}\n' * len(list) ).format( *list ) )
</code></pre>
<p>For plain old printing, I'd use the sep option of the print command. The format method is more useful if you are using the python logging facilities (which do not have the sep argument).</p>
</div>
<span class="comment-copy">In first example there is some bug: Traceback (most recent call last):   File "&lt;console&gt;", line 1, in &lt;module&gt; KeyError: '\n'</span>
<span class="comment-copy">@andi Sorry about that; fixed it.</span>
<span class="comment-copy">Strikes me that the <i>right</i> answer is a combination of this and thefourtheye's: <code>print(*['{}'.format(item) for item in myList], sep='\n')</code></span>
<span class="comment-copy">+1 This is definitely the way to go. Few know about the <code>sep</code> argument in <code>print()</code>.</span>
<span class="comment-copy">If you're using Python 2.7, just do <code>from __future__ import print_function</code>.</span>
<span class="comment-copy">@kojiro Thanks man :) Included that in the answer.</span>
<span class="comment-copy">+1, but we're awfully close to violating the <i>one…obvious way to do it</i> clause in <i>Zen</i>.</span>
