<div class="post-text" itemprop="text">
<p>Why do I keep getting </p>
<pre><code>AttributeError: 'dict_keys' object has no attribute 'sort'
</code></pre>
<p>or my code? How can I fix this?</p>
<pre><code>import string

infile = open('alice_in_wonderland.txt', 'r')

text = infile.readlines()

counts = {}

for line in text:
    for word in line:
    counts[word] = counts.get (word, 0) +1
'''
if word != " ":
if word != ".":
'''         

word_keys = counts.keys()
word_keys.sort()

infile.close()

outfile = open("alice_words.txt", 'w')
outfile.write("Word \t \t Count \n")
outfile.write("======================= \n")
for word in word_keys:
outfile.write("%-12s%d\n" % (word.lower(), counts[word]))
outfile.close()
</code></pre>
<p>I'm not sure what else to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>To produce a sorted list of keys, use:</p>
<pre><code>word_keys = sorted(counts)
</code></pre>
<p>instead. This works in both Python 2 and 3.</p>
<p>In Python 3 <code>dict.keys()</code> does not return a list object, but a <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="noreferrer">dictionary view object</a>. You could call <code>list()</code> on that object, but <code>sorted()</code> is much more direct and saves you two additional calls.</p>
<p>I see that you appear to count words in a file; if so, you are instead counting <em>characters</em>, not words; <code>for word in line:</code> iterates over a string, so <code>word</code> is assigned individual characters from the line. </p>
<p>You should be using <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter()</code></a> instead:</p>
<pre><code>from collections import Counter

counts = Counter

with open('alice_in_wonderland.txt') as infile:
    for line in infile:
        # assumption: words are whitespace separated
        counts.update(w for w in line.split())

with open("alice_words.txt", 'w') as outfile:
    outfile.write("Word \t \t Count \n")
    outfile.write("======================= \n")
    for word, count in counts.most_common():
        outfile.write("%-12s%d\n" % (word.lower(), counts[word]))
</code></pre>
<p>This code uses the file objects as context managers (with the <code>with</code> statement) to have them closed automatically. The <code>Counter.most_common()</code> method takes care of the sorting for us, not by key but by word count.</p>
</div>
<span class="comment-copy">Wow, Thanks alot, you're the man. I was going at trying to fix line 9-11 for some reason.</span>
