<div class="post-text" itemprop="text">
<p>I'm an inexperienced python programmer. </p>
<p>Is there a way to use the backgroundworker so that it starts at program startup and closes when program close?</p>
<p>I want it to watch a button, the button returns 1 when pressed. So while the program in running whenever button = 1 button has to do "this".</p>
<p>Can anyone help me with this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Would make sense to start a separate thread within your main program and do anything in the background. As an example check the fairly simple code below:</p>
<pre><code>import threading
import time

#Routine that processes whatever you want as background
def YourLedRoutine():
    while 1:
        print 'tick'
        time.sleep(1)

t1 = threading.Thread(target=YourLedRoutine)
#Background thread will finish with the main program
t1.setDaemon(True)
#Start YourLedRoutine() in a separate thread
t1.start()
#You main program imitated by sleep
time.sleep(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.3, the Thread constructor has a <code>daemon</code> argument. Konstantin's answer works, but I like the brevity of needing only one line to start a thread:</p>
<pre><code>import threading, time

MAINTENANCE_INTERVAL = 60

def maintenance():
    """ Background thread doing various maintenance tasks """
    while True:
        # do things...
        time.sleep(MAINTENANCE_INTERVAL)

threading.Thread(target=maintenance, daemon=True).start()
</code></pre>
<p>As the <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer">documentation mentions</a>, daemon threads exit as soon as the main thread exit, so you still need to keep your main thread busy while the background worker does its thing. In my case, I start a web server after starting the thread.</p>
</div>
<span class="comment-copy">When you add an <code>&amp;</code> at the end when you run the script, it will run in the background. Im not sure though if that will register all keystrokes</span>
<span class="comment-copy">What is <i>the backgroundworker</i> you talk about? <i>I want it to watch a button, the button returns 1 when pressed.</i> Which button are you talking about? <i>So while the program in running whenever button = 1 button has to do "this".</i> What's the meaning of this?</span>
<span class="comment-copy">this is putting on leds, but thats adressing some GPIO</span>
<span class="comment-copy">Thank you, this worked</span>
<span class="comment-copy">Warning, this might not function as you expect.  A Daemon is essentially a thread that is separated from the main thread and therefore will continue to run even when the main thread terminates.  This may not be what OP wants and it can cause all kinds of havoc if your not ready for it.   You may want an asynchronous thread, which will run independently, but also terminate when your main thread does.</span>
<span class="comment-copy">@JamieMarshall could you please explain this a bit? This sounds something I need to use now :)</span>
<span class="comment-copy">@kljuco - how threads are handled has a lot to do with your OS and your hardware, but essentially most threading APIs attempt to keep spawned threads referenced to the "Main" thread that spawned them.  A daemon thread, is a thread that isn't tied to that main thread.  Regular threads will (hopefully) crash/exit if the main thread exits, but daemon threads will not.  When spawning threads you the developer should always be responsible to terminate the threads you spawn safely.  You can do this by calling .join to wait for the thread to terminate.</span>
