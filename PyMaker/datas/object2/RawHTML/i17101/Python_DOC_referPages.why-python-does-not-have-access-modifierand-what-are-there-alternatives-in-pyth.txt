<div class="post-text" itemprop="text">
<p>why python does not have Access modifier like in c#, java i.e public, private etc.what are the alternative way of encapsulation and information hiding in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Objects">Wikipedia</a>:</p>
<blockquote>
<p>[Python] has limited support for private variables using <a href="https://en.wikipedia.org/wiki/Name_mangling#Name_mangling_in_Python">name mangling</a>. See the <a href="http://www.python.org/doc/2.4.2/tut/node11.html#SECTION0011600000000000000000">"Classes" section of the tutorial for details</a>. Many
  Python users don't feel the need for private variables, though. The
  slogan <a href="https://en.wikipedia.org/wiki/Python_syntax_and_semantics#cite_note-9">"We're all consenting adults here"</a> is used to describe this
  attitude. Some consider information hiding to be unpythonic, in
  that it suggests that the class in question contains unaesthetic or
  ill-planned internals. However, the strongest argument for name
  mangling is prevention of unpredictable breakage of programs:
  introducing a new public variable in a superclass can break subclasses
  if they don't use "private" variables. </p>
<p>From the tutorial: 
  <em>As is true
  for modules, classes in Python do not put an absolute barrier between
  definition and user, but rather rely on the politeness of the user not
  to "break into the definition."</em></p>
</blockquote>
<p>The same sentiment is described in the <a href="http://docs.python-guide.org/en/latest/writing/style/#we-are-all-consenting-adults">We are all consenting adults</a> paragraph of <a href="http://docs.python-guide.org/en/latest/">The Hitchhiker’s Guide to Python!</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The alternative is to name your "private" (they are not really private in python) with identifiers that make it easy to identify that those members should not be used from outside.</p>
<p>For example:</p>
<pre><code>class RedmineWriter:

    __server = None
    __connected = False
...
...
...
</code></pre>
<p>However, if the class user really wants to change these attributes he will have no problem. It is his responsability not to do that.</p>
<p>Look at: <a href="http://docs.python.org/2/tutorial/classes.html#tut-private" rel="nofollow">http://docs.python.org/2/tutorial/classes.html#tut-private</a></p>
</div>
<span class="comment-copy">See <a href="http://docs.python.org/3/tutorial/classes.html?highlight=private#private-variables" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Because Python is not C# or Java. Why do those languages not have dynamic types and significant whitespace? Because they are not Python.</span>
<span class="comment-copy">@DanielRoseman I Agree but I understand the shock it may produce for a person used to traditional-mainstream OO languages such a Java or C++. I was shocked when I started learning python.</span>
<span class="comment-copy">@DanielRoseman A question doesn't have to be an implicit criticism, otherwise what's the point of this site? The question is interesting to me to find out the reasoning behind the decisions to better understand programming languages and design. I imagine Guido had a better rationale when designing Python other than "it's not Java."</span>
<span class="comment-copy">@DanielRoseman On the other hand, your answer here: <a href="http://programmers.stackexchange.com/questions/91799/why-arent-there-explicit-access-modifiers-in-python" title="why arent there explicit access modifiers in python">programmers.stackexchange.com/questions/91799/…</a> was very informative!</span>
<span class="comment-copy">Double leading underscores induce name mangling, which is useful if you want subclasses to not deal with those members. If there are no subclasses, or they need to interact with those members (like <code>protected</code> in many static languages), a <i>single</i> leading underscore is more customary.</span>
