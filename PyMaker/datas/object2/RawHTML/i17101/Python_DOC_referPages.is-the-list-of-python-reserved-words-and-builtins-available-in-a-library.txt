<div class="post-text" itemprop="text">
<p>Is the list of Python reserved words and builtins available in a library?  I want to do something like:</p>
<pre><code> from x.y import reserved_words_and_builtins

 if x in reserved_words_and_builtins:
     x += '_'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To verify that a string is a keyword you can use <a href="https://docs.python.org/3/library/keyword.html#keyword.iskeyword" rel="noreferrer"><code>keyword.iskeyword</code></a>; to get the list of reserved keywords you can use <a href="https://docs.python.org/3/library/keyword.html#keyword.kwlist" rel="noreferrer"><code>keyword.kwlist</code></a>:</p>
<pre><code>&gt;&gt;&gt; import keyword
&gt;&gt;&gt; keyword.iskeyword('break')
True
&gt;&gt;&gt; keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 
 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 
 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 
 'while', 'with', 'yield']
</code></pre>
<p>If you want to include built-in names as well (Python 3), then check <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer">the <code>builtins</code> module</a>:</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; dir(builtins)
['ArithmeticError', 'AssertionError', 'AttributeError',
 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',
 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',
 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError',
 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError',
 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError',
 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError',
 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',
 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',
 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning',
 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError',
 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration',
 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit',
 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError',
 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',
 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_',
 '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__',
 '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool',
 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex',
 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval',
 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr',
 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int',
 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map',
 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow',
 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set',
 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple',
 'type', 'vars', 'zip']
</code></pre>
<p>For Python 2 you'll need to use <a href="https://docs.python.org/2/library/__builtin__.html" rel="noreferrer">the <code>__builtin__</code> module</a></p>
<pre><code>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; dir(__builtin__)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '_', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
</code></pre>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/14595922/list-of-python-keywords">List of python keywords</a></span>
<span class="comment-copy">@Abhijit: The main difference is that I asked for all reserved words including built-ins.</span>
<span class="comment-copy">edit: apparently many people use "reserved word" to be synonymous with keyword.  I've edited the question accordingly.</span>
<span class="comment-copy">Note that in python2.6&lt;=x.y&lt;3.0 <code>None</code> is <i>not</i> formally a keyword (according to <code>kwlist</code> and <code>iskeyword</code>) but it <i>is</i> actually a keyword (because <code>None = 1</code> fails with a <code>SyntaxError</code>), although it is listed as built-in together with <code>True</code> and <code>False</code>.</span>
<span class="comment-copy">Just out of curiosity, what is the philosophical justification for having a distinction between keywords and builtins? Shouldn't they all just be reserved?</span>
<span class="comment-copy">@notconfusing: keywords are part of the language's grammar.  Builtins act as if you had done <code>from builtins import *</code>; they can be overridden.</span>
<span class="comment-copy">Thanks for the unexplained downvote.</span>
<span class="comment-copy">@notconfusing: In particular, minimizing keywords means that common words aren't needlessly unavailable in <i>safe</i> scenarios. Sure, assigning <code>set = 1</code> is a terrible idea, but a class with a method or attribute named <code>set</code> (so it's always referenced with <code>instance.set</code>, not as plain <code>set</code>) isn't necessarily awful. There are perfectly legitimate cases for naming a method <code>set</code>; if <code>set</code> was a keyword, you couldn't do that.</span>
