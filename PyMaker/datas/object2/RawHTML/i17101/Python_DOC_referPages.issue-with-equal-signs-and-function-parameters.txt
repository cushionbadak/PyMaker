<div class="post-text" itemprop="text">
<p>I'm trying to build a function that would allow to repeat this (it prevents the console from opening in windows):</p>
<pre><code> if platform.system() == 'Windows':
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        subprocess.call(['myprogram.exe', '-P', arg], 
                       stdout=someFile, startupinfo=startupinfo)
    else:
        subprocess.call(['myprogram.exe', '-P', arg], stdout=someFile)
</code></pre>
<p>Therefore I defined the following function:</p>
<pre><code>def noWinConsole(program):
    if platform.system() == 'Windows':
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        subprocess.call(program, startupinfo=startupinfo)
    else:
        subprocess.call(program)
</code></pre>
<p>But when I call it like this <code>noWinConsole(['myprogram.exe', '-P', arg], stdout=someFile)</code> , I get an error because of <code>stdout=somefile</code>:</p>
<pre><code>TypeError: noWinConsole() got an unexpected keyword argument 'stdout'
</code></pre>
<p>How can I fix this ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>noWinConsole</code> is just a wrapper, and as it stands it's expecting just a single argument, <code>program</code>. Thus it freaks out when you give it two arguments (<code>program</code> as the first positional argument, and then the keyword argument <code>stdout</code> intended for the <code>subprocess</code> call). </p>
<p>Luckily, there's a standard idiom for producing a wrapper that passes along any set of arguments to an inner function. It uses the <a href="http://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer"><code>*</code></a> and <a href="https://stackoverflow.com/a/1769475/2069350"><code>**</code></a> notation for argument packing/unpacking.</p>
<pre><code>def noWinConsole(*args, **kwargs):
    # Other stuff here as needed
    subprocess.call(*args, **kwargs)
</code></pre>
<p>What this does is basically this. The <code>*</code> operator in the function definition takes all the input positional arguments, and packs them into a tuple called <code>args</code>. Then when you call <code>subprocess</code>, the <code>*</code> operator <em>unpacks</em> that tuple, passing in those same arguments in the same order to the next function. </p>
<p>The <code>**</code> operator works essentially the same way, except that it catches keyword arguments like <code>stdout='foo.txt'</code> and packs all of them into a dictionary like <code>{'stdout':'foo.txt'}</code>. This dictionary is then unpacked and converted back into keyword arguments when you use the <code>**</code> again in your call to the inner function.</p>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>noWinConsole</code> only expects <em>one argument</em>, and when you call it:</p>
<pre><code>noWinConsole(['myprogram.exe', '-P', arg], stdout=someFile)
</code></pre>
<p>you are passing <em>two arguments</em>:</p>
<ul>
<li>a list</li>
<li>a keyword argument <code>stdout = someFile</code></li>
</ul>
<p><strong>How to fix this?</strong></p>
<p>You can do this two ways:</p>
<ul>
<li><p>Define your method to get kwargs. Note that you are not using the parameters <code>stdout</code></p>
<pre><code>def noWinConsole(program, **kwargs):
</code></pre></li>
<li><p>Call the function just passing one argument:</p>
<pre><code>noWinConsole(['myprogram.exe', '-P', arg])
</code></pre></li>
</ul>
</div>
<span class="comment-copy">Thank you for you answer, I updated the question with the corrected code, does it seem right to you ?</span>
<span class="comment-copy">@yaka That seems like it will work for your use case, yes. Though it might be clearer later on to use single-star unpacking for the first argument as well. Also, it's generally frowned upon to edit an answer into a question; it murks things up for future visitors. So you should probably remove that. Glad I was able to help!</span>
<span class="comment-copy">@eryksun Yes indeed! I actually considered adding a mention to <code>partial</code> here, but I decided against it since it's kind of tangential to the question that the asker really needed answered ("why doesn't Python automatically pack any number of arguments into a single parameter if that's what's in the function signature").</span>
