<div class="post-text" itemprop="text">
<p>Is there a way in Python 3.x to create a new type? I can only find ways to do it in c++.</p>
<p>Basically what I want to do is create a lexer, where I scan input and python can already do int and string, but if I want another datatype such as name, how could I assign it so that I can do...</p>
<p>EX)</p>
<pre><code># This can be done
&gt;&gt;&gt; a = "string"
&gt;&gt;&gt; type(a)
&lt;class, 'str'&gt;

# How can I do this?
&gt;&gt;&gt; b = myName
&gt;&gt;&gt; type(myName)
&lt;class, 'name'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would want something like this, a <code>class</code>. In the source code all of the object types you see in Python are in <code>class</code> form.</p>
<pre><code>&gt;&gt;&gt; class myName:
...     def __init__(self, name):
...         self.name = name
...     def __str__(self):
...         return self.name
...

&gt;&gt;&gt; b = myName('John')
&gt;&gt;&gt; type(b)
&lt;class '__main__.myName'&gt;
&gt;&gt;&gt; print(b)
John
</code></pre>
<p>The reason the output is slightly different to what you expected is because the name of the <code>class</code> is <code>myName</code> so that is what is returned by <code>type()</code>. Also we get the <code>__main__.</code> before the <code>class</code> name because it is local to the current module.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might have a look at Metaclasses: <a href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/" rel="nofollow">http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example/</a></p>
<p>However, what exactly do you want to achieve?</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is you can't make a new type in python without editing the source code (written in C). </p>
<p>However the answer about creating a <code>class</code> in python is probably the easier route to go since editing the source can create compatibility problems with packages (potentially speaking).</p>
</div>
<span class="comment-copy"><a href="http://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">class declaration</a>. Or do you mean, you want to be able to create name objects using literal values the same way integers use digits, strings use quote marks, and dictionaries use curly brackets and colons? I don't think you can modify the language's syntax to add new things like that.</span>
<span class="comment-copy">See the PyParsing library. It might help you with lexing and parsing.</span>
<span class="comment-copy">See <a href="http://eli.thegreenplace.net/2012/03/30/python-objects-types-classes-and-instances-a-glossary/" rel="nofollow noreferrer">eli.thegreenplace.net/2012/03/30/â€¦</a> for the disctinction of types and classes. You likely want to use classes instead of implementing a new type.</span>
<span class="comment-copy">+1 This is the obvious and correct answer. You could quibble that it fails on "the language's designer wanted to call this thing a 'type'" but that's more a flaw with the question than with the answer.</span>
<span class="comment-copy">This is almost perfect! Is there a way to make the type myName instead of <b>main</b>.myname? Also is there a way to convert strings to this type? EX) <b>main</b>.myName('Jack') like you can int('4')?</span>
<span class="comment-copy">Not sure about when it is local to the module, but doing <code>type(b).__name__</code> would return just <code>'myName'</code> on it's own. You certainly could do type conversion with this, it would work in the same way as with builtins. So for example <code>example = 'bob'; a = myName(example)</code> would work just like that.</span>
<span class="comment-copy">Thank you! Is there a way that when I call print(b) i get John instead of &lt;__main__myName object at #&gt;... much like print('dsds') and print(5)</span>
<span class="comment-copy">@user3324343 See edits, this is exactly what the special <code>__str__</code> function is for. If I have been helpful to you <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">please accept my answer</a>.</span>
<span class="comment-copy">Metaclasses are too much overhead for this task</span>
<span class="comment-copy">This is not true. You can create objects that inherit from type. This is called 'metaclass'.</span>
