<div class="post-text" itemprop="text">
<p>I need help figuring how to work around removing a 'column' from a nested list to modify it.</p>
<p>Say I have</p>
<pre><code>L = [[1,2,3,4],
     [5,6,7,8],
     [9,1,2,3]]
</code></pre>
<p>and I want to remove the second column (so values 2,6,1) to get:</p>
<pre><code>L = [[1,3,4],
     [5,7,8],
     [9,2,3]]
</code></pre>
<p>I'm stuck with how to modify the list with just taking out a column. I've done something sort of like this before? Except we were printing it instead, and of course it wouldn't work in this case because I believe the break conflicts with the rest of the values I want in the list.</p>
<pre><code>def L_break(L):

i = 0
while i &lt; len(L):
    k = 0
    while k &lt; len(L[i]):
        print( L[i][k] , end = " ")
        if k == 1:
            break
        k = k + 1
    print()
    i = i + 1
</code></pre>
<p>So, how would you go about modifying this nested list?
Is my mind in the right place comparing it to the code I have posted or does this require something different?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply delete the appropriate element from each row using <a href="https://docs.python.org/3/tutorial/datastructures.html#the-del-statement" rel="noreferrer"><code>del</code></a>:</p>
<pre><code>L = [[1,2,3,4],
     [5,6,7,8],
     [9,1,2,3]]

for row in L:
    del row[1]  # 0 for column 1, 1 for column 2, etc.

print L
# outputs [[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to <em>extract</em> that column for later use, while removing it from the original list, use a list comprehension with <code>pop</code>:</p>
<pre><code>&gt;&gt;&gt; L = [[1,2,3,4],
...       [5,6,7,8],
...       [9,1,2,3]]
&gt;&gt;&gt; 
&gt;&gt;&gt; [r.pop(1) for r in L]
[2, 6, 1]
&gt;&gt;&gt; L
[[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
<p>Otherwise, just loop over the list and delete the fields you no longer want, as in <a href="https://stackoverflow.com/a/22800048/418413">arshajii's answer</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>map-lambda</code>:</p>
<pre><code>print map(lambda x: x[:1]+x[2:], L)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a>, which is created for this very purpose.</p>
<pre><code>from operator import itemgetter
getter = itemgetter(0, 2, 3)            # Only indexes which are needed
print(list(map(list, map(getter, L))))
# [[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
<p>You can use it in List comprehension like this</p>
<pre><code>print([list(getter(item)) for item in L])
# [[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
<p>You can also use nested List Comprehension, in which we skip the elements if the index is 1, like this</p>
<pre><code>print([[item for index, item in enumerate(items) if index != 1] for items in L])
# [[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
<p><strong>Note:</strong> All these suggested in this answer will not affect the original list. They will generate new lists without the unwanted elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way, updated to take in kojiro's advice.</p>
<pre><code>&gt;&gt;&gt; L[:] = [i[:1]+i[2:] for i in L]
&gt;&gt;&gt; L
[[1, 3, 4], [5, 7, 8], [9, 2, 3]]
</code></pre>
<p>You can generalize this to remove any column:</p>
<pre><code>def remove_column(matrix, column):
    return [row[:column] + row[column+1:] for row in matrix]

# Remove 2nd column
copyofL = remove_column(L, 1) # Column is zero-base, so, 1=second column
</code></pre>
</div>
<span class="comment-copy">Ok so obviously I've still much to get out of python; what exactly is 'row' ? Like, is it something that's built in python? I've never used it before</span>
<span class="comment-copy">@Crisis All we're doing here is looping over the list <code>L</code>. We assign the variable (arbitrarily named) <code>row</code> to each element of <code>L</code> (i.e. each nested list). Then, we delete an element of <code>row</code> using <code>del</code>. You might want to read about Python basics such as for-loops.</span>
<span class="comment-copy">@arashajii Oh ok ok, right I think I understand. My instructor does not want us to use For-loops yet so I wasn't sure. Thank-you.</span>
<span class="comment-copy">Are <code>&gt;&gt;&gt;</code> necessary? They make answer harder to read.</span>
<span class="comment-copy">You may wish to have <code>L[:]</code> on the LHS of that expression to replace the list in-place.</span>
<span class="comment-copy">@kojiro: Excellent advice.</span>
