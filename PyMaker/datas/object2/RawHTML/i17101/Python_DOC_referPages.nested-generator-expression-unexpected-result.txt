<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition">Accessing class variables from a list comprehension in the class definition</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/22692227/why-is-one-class-variable-not-defined-in-list-comprehension-but-another-is">Why is one class variable not defined in list comprehension but another is?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Here's the test code:</p>
<pre><code>units = [1, 2]
tens = [10, 20]
nums = (a + b for a in units for b in tens)
units = [3, 4]
tens = [30, 40]
[x for x in nums]
</code></pre>
<p>Under the assumption that the generator expression on line 3 (<code>nums = ...</code>) forms an iterator I would expect the final result to reflect the final assigned values for <code>units</code> and <code>tens</code>. OTOH, if that generator expression were to be evaluated at line 3, producing the result tuple, then I'd expect the first definitions of <code>units</code> and <code>tens</code> to be used.</p>
<p>What I see is a MIX; i.e., the result is <code>[31, 41, 32, 42]</code>!?</p>
<p>Can anyone explain this behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>A generator expression creates a <em>function</em> of sorts; one with just one argument, the outermost iterable.</p>
<p>Here that's <code>units</code>, and that is bound as an argument to the generator expression when the generator expression is created.</p>
<p><em>All other names</em> are either locals (such as <code>a</code> and <code>b</code>), globals, or closures. <code>tens</code> is looked up as a global, so it is looked up each time you advance the generator.</p>
<p>As a result, <code>units</code> is bound to the generator on line 3, <code>tens</code> is looked up when you iterated over the generator expression on the last line.</p>
<p>You can see this when compiling the generator to bytecode and inspecting that bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; genexp_bytecode = compile('(a + b for a in units for b in tens)', '&lt;file&gt;', 'single')
&gt;&gt;&gt; dis.dis(genexp_bytecode)
  1           0 LOAD_CONST               0 (&lt;code object &lt;genexpr&gt; at 0x10f013ae0, file "&lt;file&gt;", line 1&gt;)
              3 LOAD_CONST               1 ('&lt;genexpr&gt;')
              6 MAKE_FUNCTION            0
              9 LOAD_NAME                0 (units)
             12 GET_ITER
             13 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             16 PRINT_EXPR
             17 LOAD_CONST               2 (None)
             20 RETURN_VALUE
</code></pre>
<p>The <code>MAKE_FUNCTION</code> bytecode turned the generator expression code object into a function, and it is called immediately, passing in <code>iter(units)</code> as the argument. The <code>tens</code> name is not referenced at all here.</p>
<p>This is documented in the <a href="http://www.python.org/dev/peps/pep-0289/" rel="nofollow">original generators PEP</a>:</p>
<blockquote>
<p>Only the outermost for-expression is evaluated immediately, the other
  expressions are deferred until the generator is run:</p>
<pre><code>g = (tgtexp  for var1 in exp1 if exp2 for var2 in exp3 if exp4)
</code></pre>
<p>is equivalent to:</p>
<pre><code>def __gen(bound_exp):
    for var1 in bound_exp:
        if exp2:
            for var2 in exp3:
                if exp4:
                    yield tgtexp
g = __gen(iter(exp1))
del __gen
</code></pre>
</blockquote>
<p>and in the <a href="http://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expressions reference</a>:</p>
<blockquote>
<p>Variables used in the generator expression are evaluated lazily when the <code>__next__()</code> method is called for generator object (in the same fashion as normal generators). However, the leftmost <code>for</code> clause is immediately evaluated, so that an error produced by it can be seen before any other possible error in the code that handles the generator expression. Subsequent <code>for</code> clauses cannot be evaluated immediately since they may depend on the previous for loop. For example: <code>(x*y for x in range(10) for y in bar(x))</code>.</p>
</blockquote>
<p>The PEP has an excellent section motivating <em>why</em> names (other than the outermost iterable) are bound late, see <a href="http://www.python.org/dev/peps/pep-0289/#early-binding-versus-late-binding" rel="nofollow">Early Binding vs. Late Binding</a>.</p>
</div>
<span class="comment-copy">The answer is the same; <code>units</code> is an argument to the generator expression 'function', while <code>tens</code> is looked up as a global. So <code>units</code> is bound at line 3, <code>tens</code> is not.</span>
<span class="comment-copy">Note that this is not Python 3 specific.</span>
<span class="comment-copy">@StevenRumbalski: nope, it applies to all Python versions from 2.4 onwards, where generator expressions were introduced.</span>
<span class="comment-copy">I've just discovered (from the "friend" who sent me this puzzle) that it came from <a href="http://web.archive.org/web/20111003161227/http://web.mit.edu/rwbarton/www/python.html" rel="nofollow noreferrer">web.archive.org/web/20111003161227/http://web.mit.edu/rwbarton/…</a> (and referenced in <a href="http://ballingt.com/2014/03/23/surprising-python.html?utm_source=Python+Weekly+Newsletter&amp;utm_campaign=8d370a904c-Python_Weekly_Issue_132_March_27_2014&amp;utm_medium=email&amp;utm_term=0_9e26887fc5-8d370a904c-312683793" rel="nofollow noreferrer">ballingt.com/2014/03/23/…</a>). I'm not yet clear on the applicable scoping rules, but will continue to pound my head against the explanations provided here until I figure it out. (I think I prefer the scoping rules in Scheme!)</span>
<span class="comment-copy">Can you please point where is this documented? Is kind of unexpected behavior. It is clear from the disassembled code but I'll like to read what's the logic behind it.</span>
<span class="comment-copy">@PauloBu: The <a href="http://docs.python.org/3/reference/executionmodel.html" rel="nofollow noreferrer">execution model</a> and <a href="http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">expressions documentation</a> <i>hint</i> at it; certainly that generator expressions, and list, set and dict comprehensions use a separate scope.</span>
<span class="comment-copy">It isn't unexpected behaviour. The generator references the [10,20] list because it's bound to the name you use in the generator expression. Then you bind another list [30,40] to a name that has nothing to do with the generator.</span>
<span class="comment-copy">Interesting.  I was surprised by this.  Do you know the reason as to why <code>tens</code> is not also closed over?  It has a feeling of arbitraryness that I'm not used to when I use Python.</span>
<span class="comment-copy">@PauloBu: The <a href="http://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression PEP</a> does spell it out.</span>
