<div class="post-text" itemprop="text">
<p>I have a list with entries similar to the following:</p>
<pre><code>[('sw1', 'sw2'), ('sw1', 'sw3'), ('sw1', 'sw4'), ('sw2', 'sw3'), ('sw2', 'sw4'), ('sw3', 'sw4')]
</code></pre>
<p>I would like to convert the tuples to strings and print them on individual lines like so in order to pass them as arguments to another program:</p>
<pre><code>(sw1 , sw2)\n
(sw1 , sw3)\n
(sw1 , sw4)\n
(sw2 , sw3)\n
(sw2 , sw4)\n
(sw3 , sw4)\n
</code></pre>
<p>I tried <code>strip()</code> and <code>split()</code> but those don't appear to be supported for tuples.  I'm assuming I would need some regex expression to accomplish what I'm trying to do, but even then I'm not sure hot to handle the fact that a potential field separator of <code>,</code> is both within and between the tuples.  Any pointers are greatly appreciated.  I'm old and just trying to learn to program.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use string formatting as follows:</p>
<pre><code>a = [('sw1', 'sw2'), ('sw1', 'sw3'), ('sw1', 'sw4'), ('sw2', 'sw3'), ('sw2', 'sw4'), ('sw3', 'sw4')]

for i in a:
    print('({:}, {:})'.format(*i))

# (sw1, sw2)
# (sw1, sw3)
# (sw1, sw4)
# (sw2, sw3)
# (sw2, sw4)
# (sw3, sw4)
</code></pre>
<p>This doesn't change your tuples per se but does format the printing of them as you wished. The code simply iterates over your list and prints the tuples with a given format. The string <code>format</code> method is covered <a href="http://docs.python.org/3/library/functions.html#format" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;li = [('sw1', 'sw2'), ('sw1', 'sw3'), ('sw1', 'sw4'), ('sw2', 'sw3'), ('sw2', 'sw4'), ('sw3', 'sw4')]

&gt;&gt;&gt; print "\n".join([str(item) for item in li])
('sw1', 'sw2')
('sw1', 'sw3')
('sw1', 'sw4')
('sw2', 'sw3')
('sw2', 'sw4')
('sw3', 'sw4')
</code></pre>
<p>Another way</p>
<pre><code>&gt;&gt;&gt; print "\n".join(["%s" %(item,) for item in li])
('sw1', 'sw2')
('sw1', 'sw3')
('sw1', 'sw4')
('sw2', 'sw3')
('sw2', 'sw4')
('sw3', 'sw4')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just explicitly convert the tuples to strings (this works exactly as you hoped)- and finally join them together with the delimiter as what is between the tuples in your desired output: </p>
<pre><code>&gt;&gt;&gt; lst_tups = [('sw1', 'sw2'), ('sw1', 'sw3'), ('sw1', 'sw4'), ('sw2', 'sw3'), ('sw2', 'sw4'), ('sw3', 'sw4')]
&gt;&gt;&gt; my_string = '\n '.join([str(t) for t in lst_tups])
&gt;&gt;&gt; my_string
"('sw1', 'sw2')\n ('sw1', 'sw3')\n ('sw1', 'sw4')\n ('sw2', 'sw3')\n ('sw2', 'sw4')\n ('sw3', 'sw4')"
</code></pre>
<p>You can then easily output it as follows; just by printing it out:</p>
<pre><code>&gt;&gt;&gt; print(my_string)
('sw1', 'sw2')
 ('sw1', 'sw3')
 ('sw1', 'sw4')
 ('sw2', 'sw3')
 ('sw2', 'sw4')
 ('sw3', 'sw4')
</code></pre>
</div>
<span class="comment-copy">Thanks for your help!  The method you suggested does what I was hoping.  I'm very new to Python and programming in general.  I read the string format spec trying to understand how the print formatting example is actually working.  From what I read the curly braces ({}) contain the replacement fields.  The part I'm not understanding is how the colon (:) is resulting in removing the quotes from the other characters.  Thanks for any clarification.</span>
<span class="comment-copy">The quotes in your tuples simply state that they are strings, they're not actually there in the string itself. If you wanted to keep the quotes when you print then you could replace your format string with <code>"('{:}', '{:}')".format(*i)</code> which would print, for e.g. ('sw1', 'sw2').</span>
<span class="comment-copy">No, I didn't want the quotes.  I played around with this a little.  It seems like the following all produce the same results:  print('({:}, {:})'.format(*i))   print('({}, {})'.format(*i))  print('({0}, {1})'.format(*i))</span>
<span class="comment-copy">you don't need to first create a list comprehension to pass to join, just use a generator expression (i.e. get rid of the brackets)</span>
<span class="comment-copy">Please see <a href="http://stackoverflow.com/questions/9060653/list-comprehension-without-python/9061024#9061024">here</a> for a discussion on the string <code>join</code> method. It turns out that list comprehensions will generally be quicker than a generator expression.</span>
