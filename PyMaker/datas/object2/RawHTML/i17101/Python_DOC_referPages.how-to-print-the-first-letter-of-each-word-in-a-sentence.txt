<div class="post-text" itemprop="text">
<p>I got this question in a quiz last week, a lot of people got it wrong, so I am pretty sure it will be on our midterm:</p>
<blockquote>
<p>Write a function that takes as a parameter a list of strings and
  returns a list containing the first letter of each of the strings.
  That is, if the input parameter is ["Daniel","Nashyl","Orla",
  "Simone","Zakaria"], your function should return ['D', 'N', 'O', 'S',
  'Z']. The file you submit should include a main() function that
  demonstrates that your function works.</p>
</blockquote>
<p>I know you can use this <code>[#:#]</code> to print any letters of a word or sentence.</p>
<pre><code>&gt;&gt;&gt; `x = "Java, Python, Ruby"`
&gt;&gt;&gt; `x[:13]`
'Java, Python,'
&gt;&gt;&gt; `x[:-1]`
'Java, Python, Rub'
&gt;&gt;&gt; `x[:1]`
'J'
</code></pre>
<p>But I get confused when it comes to printing the first letter of a bunch of words. I also think that the ".split" function is needed here. I am using python 3.3.3</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def first_letters(lst):
    return [s[:1] for s in lst]

def main():
    lst = ["Daniel","Nashyl","Orla", "Simone","Zakaria"]
    assert first_letters(lst) == ['D', 'N', 'O', 'S', 'Z']

if __name__=="__main__":
    main()
</code></pre>
<p><code>str.split</code> takes a string and breaks it into a list of strings. Your input is already a list of strings, therefore you do not need .split.</p>
<p><code>"mystring"[:1]</code> gets the first character of the string (or <code>""</code> if the string is <code>""</code> to begin with). Apply this to each string in the input list, and return the result.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with a <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. You'll definitely want to read about them! Here's a minimal example that does what you're looking for:</p>
<pre><code>&gt;&gt;&gt; L =  ["Daniel","Nashyl","Orla", "Simone","Zakaria"]
&gt;&gt;&gt; [item[0] for item in L]
['D', 'N', 'O', 'S', 'Z']
</code></pre>
<p>This loops through each name in your list and creates a new list from the first letter of each item in the original list. For example, <code>"Daniel"[0] == 'D'</code>. No <code>.split</code> is needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions are cool, and you should learn to use them indeed, but let me explain a bit what's going on here, since in your question you said you're confused how to do it with a bunch of strings.</p>
<p>So, you have a list of strings. Lists are an <em>iterable collection</em>, which means we can iterate through it using, for example, a <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow">for loop</a>:</p>
<pre><code>words = ["Daniel","Nashyl","Orla", "Simone","Zakaria"]
for word in words:
   print word[:1]
</code></pre>
<p>I'm sure you were taught about loops like this in class. Now, instead of printing the first letter, let's construct a new list that contains those letters:</p>
<pre><code>result = []
for word in words:
   result.append(word[:1])
</code></pre>
<p>Here I created a new list, then for every word, I <a href="http://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow">append</a>ed the starting letter of that word to the new list. A <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> does the same thing, with a more obscure syntax, more elegance, and a bit more efficiency:</p>
<pre><code>result = [word[:1] for word in words]
</code></pre>
<p>This is the gist of it.</p>
</div>
<span class="comment-copy">Code without explanation isn't very useful. Consider: Do you want to give him/her a fish, or teach him/her to fish?</span>
<span class="comment-copy">@T.J.Crowder: yes, you have a point; I have difficulty believing people can muck up something so basic, but the evidence keeps piling up :-/</span>
<span class="comment-copy"><code>item[:1]</code> is a bit safer than <code>item[0]</code> - if you ever apply it against an empty string, <code>""[:1]</code> will return an empty string where <code>""[0]</code> throws an IndexError.</span>
<span class="comment-copy">Hey i tried to use this form as is the one i understand the most, but i didn't get the results i wanted. by the way im trying to use the "input" function.</span>
<span class="comment-copy">That was meant as an illustration of how to get the first letter of each item in the list, not a complete answer to your test question. Try pasting each line into the Python interactive shell.</span>
