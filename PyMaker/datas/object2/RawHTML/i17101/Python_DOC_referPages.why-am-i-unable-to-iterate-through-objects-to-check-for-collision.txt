<div class="post-text" itemprop="text">
<p>I'm trying to make a game where you can move a character around screen and I had it so that if my character ran into a picture of a tree, the character would stop moving. After getting this to work, What I tried to do was change the code so instead of just using the tree variable, I wanted to iterate through a list of widgets, so that if my character runs into any of them, my character stops moving. What's strange is that it works when I have only one widget in the list. For example if I put list[0] or list[1] in my code, then my character will stop when encountering those widgets. But again, if I have more than one widget in the list and try to iterate through the list, it does not work, my character does not stop when encountering any of the widgets.</p>
<p>I'm guessing I did something wrong with the for loop. Ultimately I want it so that if my character runs into any of the images in the list, the character will stop moving.</p>
<p>Here is a snippet of my for loop, and below I have included the entire code (if that helps).</p>
<p>Snippet:</p>
<pre><code>def on_keyboard_down(self, keyboard, keycode, text, modifiers):
    if keycode[1] == 'left':
        self.source = 'selectionscreen/left.zip'
        self.anim_delay=.20
        if self.x &lt; (Window.width * .25):
            bglayout.x += 4
        else:
            for i in listofwidgets:
                if self.collide_widget(i):
                    self.x -=0
                else:
                    self.x -=6
</code></pre>
<p>Full Code:</p>
<pre><code>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.image import Image
from kivy.core.window import Window
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.label import Label
from kivy.uix.behaviors import ButtonBehavior
from kivy.core.audio import SoundLoader
from kivy.uix.relativelayout import RelativeLayout
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.screenmanager import FallOutTransition
from kivy.clock import Clock
from kivy.graphics import Color



gamelayout = FloatLayout(size=(300, 300))
bglayout = FloatLayout()
characterselectionlayout = GridLayout(cols=2)


class Game(Screen):

class Bg(Image):

    def __init__(self, **kwargs):
        super(Bg, self).__init__(**kwargs)
        self.allow_stretch = True
        self.size_hint = (None, None)
        self.size = (1440, 1440)



class Npcs(Image):
    def __init__(self, **kwargs):
        super(Npcs, self).__init__(**kwargs)
        self.allow_stretch=True   



class MoveableImage(Image):

    def __init__(self, **kwargs):
        super(MoveableImage, self).__init__(**kwargs)
        self._keyboard = Window.request_keyboard(None, self)
        if not self._keyboard:
            return
        self._keyboard.bind(on_key_down=self.on_keyboard_down)
        self._keyboard.bind(on_key_up=self.on_keyboard_up)

        self.y = (Window.height/2.1)
        self.app = App.get_running_app()



    def on_keyboard_down(self, keyboard, keycode, text, modifiers):
        if keycode[1] == 'left':
            self.source = 'selectionscreen/left.zip'
            self.anim_delay=.20
            if self.x &lt; (Window.width * .25):
                bglayout.x += 4
            else:
                for i in listofwidgets:
                    if self.collide_widget(i):
                        self.x -=0
                    else:
                        self.x -=6

        elif keycode[1] == 'right':
            self.source ='selectionscreen/right.zip'
            self.anim_delay=.20
            if self.x &gt; (Window.width * .70):
                bglayout.x -= 4
            else:
                for i in listofwidgets:
                    if self.collide_widget(i):
                        self.x += 0
                    else:
                        self.x += 6

        else:
            return False
        return True


class gameApp(App):
    def build(self):
        global sm 
        sm = ScreenManager()
        game = Game(name='game')
        sm.add_widget(game)
        global listofobject
        listofobject = []
        hero = MoveableImage(source='selectionscreen/right1.png', size_hint=(None,None), allow_stretch = False, size=(40, 65))
        self.tree = Npcs(source='selectionscreen/tree.zip', allow_stretch=False, size_hint=(None,None), pos_hint={'x':.20, 'y':.30}, size=(50, 50), pos=(300, 300))
        self.testdude = Npcs(source='selectionscreen/testdude.png', allow_stretch=False, size_hint=(None,None), pos_hint={'x':.60, 'y':.70}, size=(100, 124), pos=(800, 900))
        listofwidgets.append(self.tree)
        listofwidgets.append(self.testdude)
        self.background=Bg(source='selectionscreen/background12.png', pos_hint={'x':0, 'y':0})
        bglayout.add_widget(self.background)
        bglayout.add_widget(self.tree)
        bglayout.add_widget(self.testdude)
        gamelayout.add_widget(bglayout)
        gamelayout.add_widget(hero)
        game.add_widget(gamelayout)

        return sm





if __name__ == '__main__':
    gameApp().run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue you're having is that your character is moved if he <em>fails</em> to collide with <em>each</em> of your objects. So if you have three objects and he doesn't hit any, he'll move at three times his normal speed. If he collides with one of them, he'll be slowed to twice his normal speed, but keep moving.</p>
<p>You need to change your code to test that he doesn't collide with anything before allowing him to move. The built in <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> function may help with this (call it on a generator expression):</p>
<pre><code>if any(self.collide_widget(i) for i in listofwidgets):
    self.x -=0
else:
    self.x -=6
</code></pre>
<p>If you wanted to write an explicit loop, an equivalent one would be:</p>
<pre><code>for i in listofwidgets:
    if self.collide_widget(i):
        self.x -= 0
        break
else: # this block is run only if the loop ran to the end without breaking
    self.x -= 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Walk plus type() is handy here.</p>
<pre><code>for widget in gameApp.walk(self, loopback=False):
      if type(widget) == Npcs:
</code></pre>
<p>This will get you a particular widgets. You could think about rewriting your code somehow like this :</p>
<pre><code>for widget in gameApp.walk(self, loopback=False):
    if type(widget) == Npcs:
        if not self.collide_widget(widget):
             x-=6
             break
</code></pre>
<p>But this looks wrong way round if this game will have a lots, lots of widgets. </p>
</div>
<span class="comment-copy">That makes sense, I'm going to give it a shot.</span>
<span class="comment-copy">what is 'any' ?</span>
<span class="comment-copy"><code>any</code> is a build in function that tests the values in its iterable argument until it finds one that is <code>True</code>. If it does, it returns <code>True</code> as well. If it reaches the end of the iterable without finding a <code>True</code> value, it returns <code>False</code> instead. You could do the same thing with an explicit loop, but there's no need when Python provides it for you!</span>
<span class="comment-copy">that did it! thank you so much.</span>
<span class="comment-copy">I have posted another closely related question, any chance you can help me?</span>
