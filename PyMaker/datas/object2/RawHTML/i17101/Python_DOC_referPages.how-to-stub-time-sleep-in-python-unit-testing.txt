<div class="post-text" itemprop="text">
<p>I want to make a stub to prevent time.sleep(..) to sleep to improve the unit test execution time.</p>
<p>What I have is:</p>
<pre><code>import time as orgtime

class time(orgtime):
    '''Stub for time.'''
    _sleep_speed_factor = 1.0

    @staticmethod
    def _set_sleep_speed_factor(sleep_speed_factor):
        '''Sets sleep speed.'''
        time._sleep_speed_factor = sleep_speed_factor


    @staticmethod
    def sleep(duration):
        '''Sleeps or not.'''
        print duration * time._sleep_speed_factor
        super.sleep(duration * time._sleep_speed_factor) 
</code></pre>
<p>However, I get the following error on the second code line above (class definition):</p>
<pre><code>TypeError: Error when calling the metaclass bases
module.__init__() takes at most 2 arguments (3 given).
</code></pre>
<p>How to fix the error?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pypi.python.org/pypi/mock/">mock</a> library in your tests.</p>
<pre><code>import time
from mock import patch

class MyTestCase(...):


     @patch('time.sleep', return_value=None)
     def my_test(self, patched_time_sleep):
          time.sleep(666)  # Should be instant
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>import time
from time import sleep as originalsleep

def newsleep(seconds):
    sleep_speed_factor = 10.0 
    originalsleep(seconds/sleep_speed_factor)

time.sleep = newsleep
</code></pre>
<p>This is working for me. I am inlcuding it at the beginning of the test I want to speed up, at the end I set back the original sleep just in case. Hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer is still valid. However, <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">unittest.mock</a> is since Python 3.3 an official part of the Python standard library.</p>
<pre><code>import time
from unittest import TestCase
from unittest.mock import patch

class TestMyCase(TestCase):

    @patch('time.sleep', return_value=None)
    def test_my_method(self, patched_time_sleep):
        time.sleep(60)  # Should be instant

        # the mock should only be called once
        self.assertEqual(1, patched_time_sleep.call_count)

    # alternative version using a context manager
    def test_my_method_alternative(self):
        with patch('time.sleep', return_value=None) as patched_time_sleep:
            time.sleep(60)  # Should be instant

        # the mock should only be called once
        self.assertEqual(1, patched_time_sleep.call_count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm using <a href="https://docs.pytest.org" rel="nofollow noreferrer">pytest</a> and have following fixture to monkey patch <code>time.sleep</code>:</p>
<pre><code>import pytest


@pytest.fixture
def sleepless(monkeypatch):

    def sleep(seconds):
        pass

    monkeypatch.setattr(time, 'sleep', sleep)
</code></pre>
<p>Then in test which I need to "speedup" the sleep, I just use this fixture:</p>
<pre><code>import time

def test_sleep(sleepless):
    time.sleep(60)
</code></pre>
<p>So when you run this test, you will see that it completes in much shorter time:</p>
<pre><code>= 1 passed in 0.02 seconds =
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <a href="https://github.com/spulec/freezegun" rel="nofollow noreferrer">freezegun</a> package can help you to do this.</p>
<pre><code># fake.py
import functools
from datetime import datetime, timedelta
from unittest import mock

from freezegun import freeze_time


def fake_sleep(func):
    freezegun_control = None

    def fake_sleep(seconds):
        nonlocal freezegun_control
        utcnow = datetime.utcnow()
        if freezegun_control is not None:
            freezegun_control.stop()
        freezegun_control = freeze_time(utcnow + timedelta(seconds=seconds))
        freezegun_control.start()

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        with mock.patch('time.sleep', fake_sleep):
            rv = func(*args, **kwargs)

            if freezegun_control is not None:
                freezegun_control.stop()
            return rv

    return wrapper


# test.py
from fake import fake_sleep

import time

@fake_sleep
def test_sleep():
    now = datetime.utcnow()

    for sleep_seconds in range(10):
        for i in range(1, 10):

            time.sleep(sleep_seconds)

            assert datetime.utcnow() - now &gt;= timedelta(
                seconds=i * sleep_seconds)
</code></pre>
<blockquote>
<ol>
<li>common demo: please see the <a href="https://github.com/spulec/freezegun/blob/master/README.rst" rel="nofollow noreferrer">freezegun README</a></li>
<li>pytest demo: <a href="https://gist.github.com/linw1995/721d871ea392524a1ff850d5ece53868" rel="nofollow noreferrer">Gist fake sleep function fixture</a></li>
</ol>
</blockquote>
</div>
<span class="comment-copy">you are inheriting from a module not a class</span>
<span class="comment-copy">I accepted the answer, but sadly I cannot test it, since mock is not part the components we can include.</span>
<span class="comment-copy">mock is an open source Python library available on PyPi and works on every platform. Usually there shouldn't be any practical, legal or any other issues including or embedding such a library.</span>
<span class="comment-copy">the problem is that I cannot decide what libraries are being used in my projects (at least not add libraries).</span>
<span class="comment-copy">That is a social problem within your organization. I suggest you take this decision to your team and explain the benefits of using best-practice unit testing tool to make development more efficient. If they don't believe you you can tell a random dude in Internet told you so :) Because the alternative is ripping out code from Mock library and THAT'S UGLY.</span>
<span class="comment-copy">A link to a solution is welcome, but please ensure your answer is useful without it: <a href="//meta.stackexchange.com/a/8259">add context around the link</a> so your fellow users will have some idea what it is and why itâ€™s there, then quote the most relevant part of the page you're linking to in case the target page is unavailable. <a href="//stackoverflow.com/help/deleted-answers">Answers that are little more than a link may be deleted.</a></span>
<span class="comment-copy">This doesn't answer the question. The question is about patching <code>time.sleep()</code>, <i>freezegun</i> only patches <code>datetime</code> and a few related functions in <code>time</code>, but not <code>time.sleep()</code>.</span>
<span class="comment-copy">you can get rid of <code>time.sleep</code>, when using <code>with freeze_time(datetime.now() + timedelta(seconds=666)):</code></span>
