<div class="post-text" itemprop="text">
<p>I need to print how many characters there are in a sentence the user specifies, print how many words there are in a sentence the user specifies and print each word, the number of letters in the word, and the first and last letter in the word. Can this be done?</p>
</div>
<div class="post-text" itemprop="text">
<p>I want you to take your time and understand what is going on in the code below and I suggest you to read these resources.</p>
<p><a href="http://docs.python.org/3/library/re.html" rel="nofollow">http://docs.python.org/3/library/re.html</a></p>
<p><a href="http://docs.python.org/3/library/functions.html#len" rel="nofollow">http://docs.python.org/3/library/functions.html#len</a></p>
<p><a href="http://docs.python.org/3/library/functions.html" rel="nofollow">http://docs.python.org/3/library/functions.html</a> </p>
<p><a href="http://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow">http://docs.python.org/3/library/stdtypes.html#str.split</a> </p>
<pre><code>import re


def count_letter(word):
    """(str) -&gt; int

    Return the number of letters in a word.

    &gt;&gt;&gt; count_letter('cat')
    3
    &gt;&gt;&gt; count_letter('cat1')
    3

    """
    return len(re.findall('[a-zA-Z]', word))


if __name__ == '__main__':
    sentence = input('Please enter your sentence: ')
    words = re.sub("[^\w]", " ",  sentence).split()

    # The number of characters in the sentence.
    print(len(sentence))
    # The number of words in the sentence.
    print(len(words))
    # Print all the words in the sentence, the number of letters, the first
    # and last letter.
    for i in words:
        print(i, count_letter(i), i[0], i[-1])

Please enter your sentence: hello user
10
2
hello 5 h o
user 4 u r
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please read Python's string documentation, it is self explanatory. Here is a short explanation of the different parts with some comments. </p>
<p>We know that a sentence is composed of words, each of which is composed of letters. What we have to do first is to <code>split</code> the sentence into words. Each entry in this list is a word, and each word is stored in a form of a succession of characters and we can get each of them. </p>
<pre class="lang-python prettyprint-override"><code>sentence = "This is my sentence"

# split the sentence
words = sentence.split()
# use len() to obtain the number of elements (words) in the list words
print('There are {} words in the given sentence'.format(len(words)))
# go through each word
for word in words:
    # len() counts the number of elements again,
    # but this time it's the chars in the string 
    print('There are {} characters in the word "{}"'.format(len(word), word))

    # python is a 0-based language, in the sense that the first element is indexed at 0
    # you can go backward in an array too using negative indices.
    #
    # However, notice that the last element is at -1 and second to last is -2,
    # it can be a little bit confusing at the beginning when we know that the second
    # element from the start is indexed at 1 and not 2.
    print('The first being "{}" and the last "{}"'.format(word[0], word[-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We don't do your homework for you on stack overflow... but I will get you started.</p>
<p>The most important method you will need is one of these two (depending on the version of python):</p>
<ul>
<li>Python3.X - <code>input([prompt])</code>,.. If the prompt argument is present, it is written
to standard output without a trailing newline. The function then
reads a line from input, converts it to a string (stripping a
trailing newline), and returns that. When EOF is read, EOFError is
raised. <a href="http://docs.python.org/3/library/functions.html#input" rel="nofollow">http://docs.python.org/3/library/functions.html#input</a></li>
<li>Python2.X <code>raw_input([prompt])</code>,... If the prompt argument is
present, it is written to standard output without a trailing newline.
The function then reads a line from input, converts it to a string
(stripping a trailing newline), and returns that. When EOF is read,
EOFError is raised. <a href="http://docs.python.org/2.7/library/functions.html#raw_input" rel="nofollow">http://docs.python.org/2.7/library/functions.html#raw_input</a></li>
</ul>
<p>You can use them like</p>
<pre><code>&gt;&gt;&gt; my_sentance = raw_input("Do you want us to do your homework?\n")
Do you want us to do your homework?
yes
&gt;&gt;&gt; my_sentance
'yes'
</code></pre>
<p>as you can see, the text wrote was stroed in the <code>my_sentance</code> variable</p>
<p>To get the amount of characters in a string, you need to understand that a string is really just a list! So if you want to know the amount of characters you can use:</p>
<ul>
<li><code>len(s)</code>,... Return the length (the number of items) of an object.
The argument may be a sequence (string, tuple or list) or a mapping
(dictionary). <a href="http://docs.python.org/3/library/functions.html#len" rel="nofollow">http://docs.python.org/3/library/functions.html#len</a></li>
</ul>
<p><em>I'll let you figure out how to use it.</em></p>
<p>Finally you're going to need to use a built in function for a string:</p>
<ul>
<li><code>str.split([sep[, maxsplit]])</code>,...Return a list of the words in the
string, using sep as the delimiter string. If maxsplit is given, at
most maxsplit splits are done (thus, the list will have at most
maxsplit+1 elements). If maxsplit is not specified or -1, then there
is no limit on the number of splits (all possible splits are made).
<a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow">http://docs.python.org/2/library/stdtypes.html#str.split</a></li>
</ul>
</div>
<span class="comment-copy">Of course it can be done. What's your attempt so far?</span>
<span class="comment-copy">def count_letter(word): 	print (len(word)) 	list = word.split() 	 def main(): 	sentence = input("Please enter your sentence. ") 	count_letter(sentence) 	 main()</span>
