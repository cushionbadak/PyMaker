<div class="post-text" itemprop="text">
<p>By convention an image tensor is always 3D : One dimension for its <code>height</code>, one for its <code>width</code> and a third one for its <code>color channel</code>. Its shape looks like <code>(height, width, color)</code>.</p>
<p>For instance a batch of 128 color images of size 256x256 could be stored in a 4D-tensor of shape <code>(128, 256, 256, 3)</code>. The color channel represents here RGB colors. Another example with batch of 128 grayscale images stored in a 4D-tensor of shape <code>(128, 256, 256, 1)</code>. The color could be coded as 8-bit integers.</p>
<p>For the second example, the last dimension is a vector containing only one element. It is then possible to use a 3D-tensor of shape <code>(128, 256, 256,)</code> instead.</p>
<p>Here comes my question : I would like to know if there is a difference between using a 3D-tensor rather than a 4D-tensor as the training input of a deep-learning framework using keras.</p>
<p>EDIT : My input layer is a conv2D</p>
</div>
<div class="post-text" itemprop="text">
<p>I you take a look at the Keras documentation of the <code>conv2D</code> layer <a href="https://keras.io/layers/convolutional/" rel="nofollow noreferrer">here</a> you will see that the shape of the input tensor <em>must</em> be 4D.</p>
<blockquote>
<p><strong>conv2D layer input shape</strong><br/>
  4D tensor with shape: <code>(batch, channels, rows, cols)</code> if <code>data_format</code> is "channels_first" or 4D tensor with shape: <code>(batch, rows, cols, channels)</code> if <code>data_format</code> is "channels_last".</p>
</blockquote>
<p>So the 4th dimension of the shape is mandatory, even if it is only "1" as for a grayscaled image.<br/>
So in fact, it is not a matter of performance gain nor lack of simplicity, it's only the mandatory input argument's shape.<br/>
Hope it answers your question.</p>
</div>
