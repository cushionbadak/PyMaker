<div class="post-text" itemprop="text">
<p>I recently found this <a href="http://blogs.msdn.com/b/nativeconcurrency/archive/2012/03/06/disabling-tdr-on-windows-8-for-your-c-amp-algorithms.aspx" rel="nofollow">article</a> for C++AMP where you can temporaly disable TDR in Windows 8. Is there any way to apply this solution for CUDA? </p>
</div>
<div class="post-text" itemprop="text">
<p>Windows WDDM Driver Timeout Detection and Recovery mechanism can be disabled or the timeout can be extended to be greater than the default 2 seconds.Timeout Detection and Recovery is documented on <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg487368" rel="nofollow noreferrer">MSDN</a>.</p>
<p>(<em>Edited: The above link is dead. The information that it provided might now be available at <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/display/tdr-registry-keys" rel="nofollow noreferrer">https://docs.microsoft.com/en-us/windows-hardware/drivers/display/tdr-registry-keys</a></em>)</p>
<p>Nsight Visual Studio Edition Nsight.Monitor has settings to disable or increase the timeout. Otherwise, you can use the registry keys in the MSDN article. Make sure to restart the computer after making changes.</p>
<p>I recommend that you increase TdrDelay before completely disabling TDR.</p>
<p>Tesla GPUs can use the Tesla Compute Cluster driver which does not have a timeout watchdog.</p>
</div>
<span class="comment-copy">Only the last line of the code snippet in that example is C++ AMP specific.  You should be able to use all of the code up to that point as a precursor in a cuda program to disable the TDR on the graphics device as well.  But there's a pretty important qualifier in that article: "commands on that device are allowed to run for longer than the usual timeout period without causing a TDR, <b>in absence of contention for that GPU</b>."  So if you have multiple GPUs, one of which is not driving any displays, this will allow a workaround.  But I'm not sure it will help much on a display GPU.</span>
<span class="comment-copy">For a GPU that is not handling displays, an NVIDIA driver option in nvidia-smi allows the device to be put in TCC mode, which will also disable the TDR effect for that device.</span>
<span class="comment-copy">In theory i have an Optimus so there should be possibility to handling it (display on Intel, CUDA on geforce), but sadly i can't trigger TCC "Unable to set driver model for GPU 0000:01:00.0.Changing driver model is not sup ported on this device. Treating as warning and moving on. All done."</span>
<span class="comment-copy">It's possible to use the NVIDIA GPU separately for CUDA <a href="http://stackoverflow.com/questions/11377736/cuda-with-optimus-just-to-access-gpgpu">under linux</a>.  However under windows, the optimus driver expects to be able to enable the NVIDIA GPU for windows rendering tasks at any time, and so in effect that NVIDIA GPU is considered a primary GPU in that case, and is assumed to be display-capable, even if it's not handling windows display tasks at the moment.  So you cannot switch it into TCC mode, as optimus would break.</span>
<span class="comment-copy">So i will try later how it works under linux. Its funny because nvidia doesnt even support optimus on linux. Thank you for the answer.</span>
