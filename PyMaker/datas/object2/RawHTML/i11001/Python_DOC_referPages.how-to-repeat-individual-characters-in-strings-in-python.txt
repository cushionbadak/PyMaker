<div class="post-text" itemprop="text">
<p>I know that </p>
<pre><code>"123abc" * 2
</code></pre>
<p>evaluates as <code>"123abc123abc"</code>, but is there an easy way to repeat individual letters N times, e.g. convert <code>"123abc"</code> to <code>"112233aabbcc"</code> or <code>"111222333aaabbbccc"</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>&gt;&gt;&gt; s = '123abc'
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; ''.join([char*n for char in s])
'111222333aaabbbccc'
&gt;&gt;&gt; 
</code></pre>
<p>(changed to a list comp from a generator expression as using a list comp inside join is <a href="https://stackoverflow.com/a/9061024/2302482">faster</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a>-problem-overcomplicating-style option with <code>repeat()</code>, <code>izip()</code> and <code>chain()</code>:</p>
<pre><code>&gt;&gt;&gt; from itertools import repeat, izip, chain
&gt;&gt;&gt; "".join(chain(*izip(*repeat(s, 2))))
'112233aabbcc'
&gt;&gt;&gt; "".join(chain(*izip(*repeat(s, 3))))
'111222333aaabbbccc'
</code></pre>
<p>Or, "I know regexes and I'll use it for everything"-style option:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; re.sub(".", lambda x: x.group() * n, s)  # or re.sub('(.)', r'\1' * n, s) - thanks Eduardo
'112233aabbcc'
</code></pre>
<p>Of course, don't use these solutions in practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or another way to do it would be using <code>map</code>: </p>
<pre><code>"".join(map(lambda x: x*7, "map"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And since I use numpy for everything, here we go:</p>
<pre><code>import numpy as np
n = 4
''.join(np.array(list(st*n)).reshape(n, -1).T.ravel())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to repeat <em>individual</em> letters you can just replace the letter with n letters e.g.</p>
<pre><code>&gt;&gt;&gt; s = 'abcde'
&gt;&gt;&gt; s.replace('b', 'b'*5, 1)
'abbbbbcde'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Bahrom's answer is probably clearer than mine, but just to say that there are many solutions to this problem:</p>
<pre><code>&gt;&gt;&gt; s = '123abc'
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; reduce(lambda s0, c: s0 + c*n, s, "")
'111222333aaabbbccc'
</code></pre>
<p>Note that <code>reduce</code> is not a built-in in python 3, and you have to use <code>functools.reduce</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or using regular expressions:</p>
<p></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '123abc'
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; re.sub('(.)', r'\1' * n, s)
'111222333aaabbbccc'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way:</p>
<pre><code>def letter_repeater(n, string):
    word = ''
    for char in list(string):
        word += char * n
    print word

letter_repeater(4, 'monkeys')


mmmmoooonnnnkkkkeeeeyyyyssss
</code></pre>
</div>
<span class="comment-copy">Try using a for loop and concatenate chars to get desired output.</span>
<span class="comment-copy">ah,  I like using comprehensions, I was having a brain cramp for some reason.</span>
<span class="comment-copy">yeah, that's the obvious imperative way, I figured there was something more Pythonic though. (I'd recommend <code>return word</code> rather than <code>print word</code> by the way)</span>
<span class="comment-copy">@JasonS, I think the other options given are more pythonic, but it gets the job done. And agreed on the <code>return</code> vs. <code>print</code>, just thought it would be quicker to get the point across</span>
<span class="comment-copy">p.s. you also don't need to use <code>list(string)</code> -- strings are iterable already. (And I did upvote you btw!)</span>
