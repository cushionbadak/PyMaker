<div class="post-text" itemprop="text">
<p>I have a 30 character string. I need to place dots in between each character of the string one at a time and store it an array
Basically, if the string was </p>
<pre><code>'vsuidhfsdfiuheu093ruuweorufdsi'
</code></pre>
<p>the array will have these values:</p>
<pre><code>'v.suidhfsdfiuheu093ruuweorufdsi'
'v.s.uidhfsdfiuheu093ruuweorufdsi'
'v.s.u.i.dhfsdfiuheu093ruuweorufdsi'
'v.suid.hfsd.fi.uheu.093ruuweoruf.dsi'
[and a lot more]
</code></pre>
<p>It can't have two dots next to each other, e.g v..s.uidhfsdfiuheu093ruuweorufdsi</p>
</div>
<div class="post-text" itemprop="text">
<p>A list with <strong>all</strong> the possible combinations will be very huge and inneficient. Indeed, for a word of length N, there is 2<sup>N - 1</sup> dots positions possibilities.</p>
<p>You can anyway use a generator: iteration will still be slow, but you do not risk to encounter memory issues.</p>
<p>I would suggest you to use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a> to generate all combinations of dots and then inserting them to the word:</p>
<pre><code>from itertools import product

word = "vsuidhfsdfiuheu093ruuweorufdsi"

for prod in product((".", ""), repeat=len(word) - 1):
    mixed = [char for tpl in zip(word, prod + ("",)) for char in tpl]
    new_word = "".join(mixed)
    print(new_word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are <code>sum(nCr(30, i) for i in range(30)) = 1,073,741,823</code> possible combinations of dots for your 30 character string (29 possible spaces to place dots in). If we assume each output string is 30 bytes long (an underestimate, since the strings could be up to twice as long, depending on how many dots you insert), this means that <em>stored in the most efficient way possible</em>, you would still need 32,212,254,690 bytes of storage to contain it. That means you need an <strong><em>absolute minimum</em> of 32 GB of RAM</strong> to run such a program. Almost certain many times that in practice, since all of the strings will be longer than 30 characters, and for performance reasons, python won’t store the strings in the most memory-compact manner anyway.</p>
<p>What you’re asking is impossible.</p>
</div>
<span class="comment-copy">So what is the rule?  between each character? or all possible combinations or?</span>
<span class="comment-copy"><code>import random lst = ['.'] string = 'Hello world. Hello world.' print ''.join('%s%s' % (x, random.choice(lst) if random.random() &gt; 0.5 else '') for x in string)</code> This adds dots randomly in between strings, whereas I need all possible combinations</span>
<span class="comment-copy">you realize how many combinations there are right?</span>
<span class="comment-copy">It's not clear what you're trying to do, but it sounds like you're asking for gigabytes of output, which suggests that you might be trying to brute-force something better solved with a more intelligent algorithm.</span>
<span class="comment-copy">Why do you need to do this? It might help if you provide the problem you are trying to solve because this is a non-trivial thing to do.</span>
<span class="comment-copy">you do not need to store everything in memory, so it is possible.</span>
<span class="comment-copy">A generator and yield could produce the strings. No need to store all at once</span>
<span class="comment-copy">yes, we could block this into the hard disk in chunks, but what exactly would user3575600 really want to do with ~48 GB of data anyway?</span>
<span class="comment-copy">@mpez0 OP says they want an array, not a generator. This suggests to me they want all the strings stored at once.</span>
