<div class="post-text" itemprop="text">
<pre><code>import os
import codecs
import argparse
os.chdir('C:\\Users\\Kingsaber\\Desktop\\python_excercises')
a = codecs.open('BeforeKichiku.txt', encoding='utf-8')
p = a.read()
print(p)

import re

#ch = u"I am from 美国。We should be friends. 朋友."

b = re.findall(u"[\u4e00-\u9fff]+", a)
for x in b:
    print(x)
</code></pre>
<p><strong>Expected result</strong>: Print everything out in the variable "a" and find all unicode characters between u4e00-\u9fff and print them out below.</p>
<p><strong>What happens</strong>: The document prints out successfully but the regex search comes up with the error below. If I switch the regex to search the string "ch" everything works as it should. For some reason it isn't working on the Unicode document.</p>
<p>Error:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Kingsaber/Desktop/destruga3.py", line 15, in &lt;module&gt;
    b = re.findall(u"[\u4e00-\u9fff]+", a)
  File "C:\Users\Kingsaber\AppData\Local\Programs\Python\Python35-32\lib\re.py", line 213, in findall
    return _compile(pattern, flags).findall(string)
TypeError: expected string or bytes-like object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are passing in the <em>file object</em>:</p>
<pre><code>a = codecs.open('BeforeKichiku.txt', encoding='utf-8')

# ...

b = re.findall(u"[\u4e00-\u9fff]+", a)
</code></pre>
<p>Note how <code>a</code> is the <code>codecs.open()</code> result, and you pass <code>a</code> into <code>re.findall()</code>. You put the file <em>contents</em> in <code>p</code> instead. You may want to use more meaningful variable names rather than 1-letter variables so you can spot such errors more easily.</p>
<p>Note that you really shouldn't be using <code>codecs.open()</code>; that's an older API from Python 2 that has many issues and has been made obsolete by the <a href="https://docs.python.org/3/library/io.html" rel="nofollow"><code>io</code> framework</a> introduced in Python 3 and backported to Python 2. In Python 3, just use the built-in <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code> call</a> (which is an alias for <code>io.open()</code>):</p>
<pre><code>with open('BeforeKichiku.txt', encoding='utf-8') as fileobj:
    contents = fileobj.read()
matches = re.findall("[\u4e00-\u9fff]+", contents)
for match in matches:
    print(match)
</code></pre>
</div>
<span class="comment-copy">Yes, you are using <code>print</code>, not <code>print()</code>. And there is no <code>ur</code> prefix in Python 3, just drop the <code>u</code> prefixes everywhere. But you need to be <i>specific</i> and include your actual full error message.</span>
<span class="comment-copy">oh I forgot to fix the print(). How do I get a more detailed error message? It just says invalid syntax before running.</span>
<span class="comment-copy">If you run this with the Python interpreter, it'll give you a specific line number and a <code>^</code> caret pointing at the tokenizer position. It'll probably point at the end of the <code>ur'...'</code> string because <code>ur</code> is not a recognised prefix in Python 3. Just drop the <code>u</code>.</span>
<span class="comment-copy">Ok I edited it. This should be a better question</span>
