<div class="post-text" itemprop="text">
<p>I have been having trouble finding a way to pull out specific text info from the Guardian API for my dissertation. I have managed to get all my text onto Python but how do you then clean it to get say, just the headlines of the news articles?</p>
<p>This is a snippet of the API result that I want to pull out info from:</p>
<pre><code>{
  "response": {
    "status":"ok",
    "userTier":"developer",
    "total":1869990,
    "startIndex":1,
    "pageSize":10,
    "currentPage":1,
    "pages":186999,
    "orderBy":"newest",
    "results":[
      {
        "id":"sport/live/2016/jul/09/tour-de-france-2016-stage-eight-live",
         "type":"liveblog",
         "sectionId":"sport",
         "sectionName":"Sport",
         "webPublicationDate":"2016-07-09T13:21:36Z",
         "webTitle":"Tour de France 2016: stage eight – live!",
         "webUrl":"https://www.theguardian.com/sport/live/2016/jul/09/tour-de-france-2016-stage-eight-live",
         "apiUrl":"https://content.guardianapis.com/sport/live/2016/jul/09/tour-de-france-2016-stage-eight-live",
         "isHosted":false
       },
       {
         "id":"sport/live/2016/jul/09/serena-williams-v-angelique-kerber-wimbledon-womens-final-live",
         "type":"liveblog",
         "sectionId":"sport",
         "sectionName":"Sport",
         "webPublicationDate":"2016-07-09T13:21:02Z",
         "webTitle":"Serena Williams v Angelique Kerber: Wimbledon women's final – 
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hoping the OP adds the used code to the question.</p>
<p>One solution in python is, that whatever you get (from the methods offered by the requests module?) will be either already deeply nested structures you can well index into or you can easily map it to these structures (via json.loads(the_string_you_displayed). </p>
<p>Sample:</p>
<pre><code>d = json.loads(the_string_you_displayed)
head_line = d['response']['results'][0]['webTitle']
</code></pre>
<p>Would give the value into headline that is stored in the first dict found in the results "array" (index 0) of the response entries value. (The question was updated so now, the full path is visible)</p>
<p>in case I read the sample snippet given correctly, and it has been cut during copy and paste here, as the given sample is (as is) invalid JSON.</p>
<p>If the text does not represent a valid JSON text, it will depend on sifting through text via substring or pattern matching and may well be very brittle ... </p>
<p><strong>Update</strong>: So assuming the full response structure is stored inside a variable named data:</p>
<pre><code>result_seq = data['response']['results']  # yields a list here
headlines = [result['webTitle'] for result in result_seq]
</code></pre>
<p>The last line works like so: This is a list comprehension compactly creating a list from all entries result in the result_seq by picking the value of the key webTitle in each dict.</p>
<p>An explicit for loop like solution picking them all would be:</p>
<pre><code>result_seq = data['response']['results'] 
headlines = []
for result in result_seq:
    headlines.append(result['webTitle'])
</code></pre>
<p>This does not check for errors like result dicts without a key webTitle etc. but Python will raise a matching exception, and one can decide, if one likes to wrap the processing inside a try: except block or hope for the best ...</p>
</div>
<span class="comment-copy">Please add some of the code (that you used to pull "all my text onto Python") as this eases hinting you to solve your problem :-) Otherwise, the coders here are not so much in writing code from scratch for others ... Thanks</span>
<span class="comment-copy">It is Json so use the Json module and access by key</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">The <code>json</code> module</a>.</span>
<span class="comment-copy">@Dilettant does it? They have seemingly recovered the JSON successfully, the processing step doesn't depend on where it came from.</span>
<span class="comment-copy">@Dilettant yes, they could, and in the meantime <b>this is more readable which ever it is</b>. Also, if you think the question needs clarification, <i>don't answer it</i>.</span>
<span class="comment-copy">Hello I have added the code I used</span>
<span class="comment-copy">You might try my suggested expression just with data instead of d, i.e.: print data['response']['results'][0]['webTitle'] for the first entry of key webTitle. The[0] is here the index operator selecting the first list entry. These start in Python with 0. when beginning to learn Python it is good to take care distinguish sitiations wheer [] indexes a list or tuple with an integer from when [] requests a value from a dict to the key between the square brackets</span>
<span class="comment-copy">Hi my comment was a bit long so please see my response above :)</span>
<span class="comment-copy">The question can deal with long text ;-) I referred to your code that you placed in an answer and that still does not work. Instead of asking for a key named 'results' in the data dict, you need to ask for data['response']['results'] instead. That will give you a list. The first item of that list is what the [0] part in my above comment (and proposed answer) selects. This again seems to be a dict, where you find eg. the key webTitle in it and so on.</span>
<span class="comment-copy">You mean like this? print data["response"]["results"].keys() I get AttributeError: 'list' object has no attribute 'keys' if I do this. Sorry about all the questions! I'm a bit confused..</span>
