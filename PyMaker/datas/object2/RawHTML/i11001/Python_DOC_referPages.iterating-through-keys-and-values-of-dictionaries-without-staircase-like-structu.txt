<div class="post-text" itemprop="text">
<p>Is there a way, and if so could someone show me how to get the same result in <code>conf</code> as the code below, without having to do that long staircase like structure for iterating through both keys and values of the two dictionaries? </p>
<pre><code>conf = 0

def dist(instr):
    return {x:instr.count(x)/float(len(instr)) for x in instr}

for k,v in dist("aass").items():
    for x,y in dist("as").items():
        if k == x:
            conf += .5
            if v == y:
                conf +=1
print(conf)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is <em>matching</em> keys, just look up the key in the other dictionary:</p>
<pre><code>d1 = dist('as')
for k, v in dist('aass').items():
    if k in d1:
        conf += 1.5 if d1[k] == v else .5
</code></pre>
<p>You could also create the set intersection of the dictionary keys; in Python 2 you'd use the <a href="https://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow"><code>dict.viewkeys()</code> method</a>, in Python 3 the <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow"><code>dict.keys()</code> method</a>; they produce a <a href="https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects" rel="nofollow"><em>dictionany view</em></a> that acts like a set:</p>
<pre><code>d1, d2 = dist('as'), dist('aass')
for k in d1.viewkeys() &amp; d2.viewkeys():  # use d1.keys() &amp; d2.keys() in Py3
    conf += 1.5 if d1[k] == d2[k] else .5
</code></pre>
</div>
<span class="comment-copy">@jDo: thanks, corrected too.</span>
<span class="comment-copy"><code>conf += 1.5 if condition else .5</code> did not know that was even possible in python. mind blown</span>
<span class="comment-copy">@FakeBrain that's called a conditional expression. :-)</span>
<span class="comment-copy">In this particular case, you could write the conditional expression even more succinctly as <code>conf += 0.5 + (d1[k] == d2[k])</code>.  (Not that I'd recommend to do so.)</span>
<span class="comment-copy">@SvenMarnach yeah, no, I'd reject that outright in a code review as being too clever by half ;-)</span>
