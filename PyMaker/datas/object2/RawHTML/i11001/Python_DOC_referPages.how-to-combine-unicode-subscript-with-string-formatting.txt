<div class="post-text" itemprop="text">
<p>I am trying to get unicode subscripts working with string formatting...
I know I can do something like this...</p>
<pre><code>&gt;&gt;&gt;print('Y\u2081')
Y₁
&gt;&gt;&gt;print('Y\u2082')
Y₂
</code></pre>
<p>But what i really need is something like this since I need the subscript to iterate over a range.  Obviously this doesn't work though.</p>
<pre><code>&gt;&gt;&gt;print('Y\u208{0}'.format(1))
  File "&lt;ipython-input-62-99965eda0209&gt;", line 1
    print('Y\u208{0}'.format(1))
         ^
SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 1-5: truncated \uXXXX escape
</code></pre>
<p>Any help appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p><code>\uhhhh</code> is an <em>escape syntax</em> in the string literal. You'd have to produce a raw string (where the escape syntax is ignored), then <em>re-apply</em> the normal Python parser handling of escapes:</p>
<pre><code>import codecs

print(codecs.decode(r'Y\u208{0}'.format(1), 'unicode_escape'))
</code></pre>
<p>However, you'd be better of using the <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow"><code>chr()</code> function</a> to produce the whole character:</p>
<pre><code>print('Y{0}'.format(chr(0x2080 + 1)))
</code></pre>
<p>The <code>chr()</code> function takes an integer and outputs the corresponding Unicode codepoint in a string. The above defines a hexadecimal number and adds 1 to produce your desired <code>2080</code> range Unicode character.</p>
</div>
<span class="comment-copy">My B, edited....</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/24391892/printing-subscript-in-python">Printing subscript in python</a></span>
<span class="comment-copy">this won’t work for superscripts; unicode superscripts are not a continuous block</span>
<span class="comment-copy">@Kelvin: I wasn't even thinking about superscripts here.</span>
<span class="comment-copy">Worked for me... <code>['Y{0}'.format(chr(0x2080 + i)) for i in range(10)] Out[74]: ['Y₀', 'Y₁', 'Y₂', 'Y₃', 'Y₄', 'Y₅', 'Y₆', 'Y₇', 'Y₈', 'Y₉']</code></span>
<span class="comment-copy">yes, it will, for subscripts. Just pointing out that most ‘special variants’ don’t work this nicely. The superscripts, for example. Neither do the mathematical italics, which for some bizarre reason, the Unicode Consortium decided to encode the <code>'h'</code> in a completely different location than the rest of the alphabet. Assuming that you can count upwards with <code>chr()</code> in a predictable fashion will produce dumb and  hard-to-detect bugs.</span>
<span class="comment-copy">@Kelvin: in which case a manual dictionary is the way out. Here, it's not needed.</span>
