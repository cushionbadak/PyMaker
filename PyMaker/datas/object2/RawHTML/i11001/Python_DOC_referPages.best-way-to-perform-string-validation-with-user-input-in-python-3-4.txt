<div class="post-text" itemprop="text">
<p>I have got a string as is:</p>
<pre><code>line = 'City' /* City can be in 2 or 3 parts */
</code></pre>
<p>----&gt; 2 parts: first char of each part is a capital letter.</p>
<p>----&gt; 3 parts: first char of 1st and 2nd part is a capital letter.</p>
<p>The line I get is always valid because I check it with a regex already,
I now would like to know what is the best way to ask the user for a character, then check if the input is the same as the City's first character (no matter what part of the city), if it is, print the City name to the output.</p>
<p>I am doing this for now but I'm learning Python for 2 days now and I'm kind of struggling right now.</p>
<pre><code>line_ = "Mont de Marsan"

while True:
    inp = input('')
    if 'ABORT' in inp:
        inp = False
        sys.exit(0)                                                                                 
    else:
        inp = input('')
        for c in line_:
            if inp == c:
                print (line_)
            else:
                inp = False
                sys.exit(0)
                break
</code></pre>
<p>I hope the description of my problem is straight forward because it's getting messy in my mind :)</p>
<p>Could you please help me find the best way to perform such things in real time and for a lot of strings ?</p>
<pre><code> /* EDIT */
</code></pre>
<p>expected behaviour of programm if City is 'Pont de Marsan'</p>
<pre><code>&lt;---- d
----&gt; Mont de Marsan
&lt;---- P
----&gt; Pont de Marsan
&lt;---- M
----&gt; Mont de Marsan
&lt;---- l
 program exit.
</code></pre>
<p>Here's some more explanation:</p>
<p>I have a list of City, some can be 'Paris', some can be 'Mont de Marsan' or even 'Pont Neuf'. I now have to ask the user for a single character, if he enters P, I have to print 'Paris' and 'Pont Neuf', if he enters 'd' I have to print 'Mont de Marsan'. It's the same behaviour as the GPS system in cars.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><em>"(...) if the input is the same as the City's first character (no matter what part of the city)"</em></p>
</blockquote>
<p>You can split the city name by space using the string method <code>split()</code> to get a <code>list</code> of its parts:</p>
<pre><code>&gt;&gt;&gt; "Mont de Marsan".split() == ["Mont", "de", "Marsan"]
True
&gt;&gt;&gt;
</code></pre>
<p><code>split()</code> defaults to splitting by space but can split one string by any other string, e.g.</p>
<pre><code>&gt;&gt;&gt; "abc".split("b") == ['a', 'c']
True
&gt;&gt;&gt; 
</code></pre>
<p>You can then go through each part of the city name and check what it starts with using the <code>startswith()</code> method or string indexing if you only want a specific number of letters; e.g. <code>"Paris"[0]</code> to match only the first letter "P".</p>
<p>You didn't mention it but I assume you also want case-insensitive matching so that both "p" and "P" will match "Paris", "Pont Neuf" and "pont neuf". To do this, you could simply convert your city names and the user input to the same case using <code>lower()</code> or <code>upper()</code> but since you're using Python 3.x, you might as well take advantage of the <code>casefold()</code> method that's made for this purpose. From <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow">the docs</a>:</p>
<blockquote>
<p>Casefolding is similar to lowercasing but more aggressive because it
  is intended to remove all case distinctions in a string. For example,
  the German lowercase letter <code>'ß'</code> is equivalent to <code>"ss"</code>. Since it is
  already lowercase, <code>lower()</code> would do nothing to <code>'ß'</code>; <code>casefold()</code>
  converts it to <code>"ss"</code>.</p>
</blockquote>
<p>In the snippet below, you're converting the user input to a boolean (it starts out as a string). There's nothing technically wrong in it - Python won't complain - but is it really what you want?</p>
<pre><code>inp = input('')      &lt;-- a string
if 'ABORT' in inp:   &lt;-- still a string
    inp = False      &lt;-- a boolean
</code></pre>
<p>Maybe you wanted to break the while loop using a boolean? In that case, you could do the following:</p>
<pre><code>done = False

while not done:
    inp = input('') 
    if 'ABORT' in inp:
        done = True
    ...

sys.exit(0) 
</code></pre>
<p>The code above also eliminates the need to repeat <code>sys.exit(0)</code> throughout the code. </p>
<p>An edited version of your code. I might have changed it a bit too much but just use what you can:</p>
<pre><code>import sys

cities = {"Mont de Marsan", "Pont Neuf", "Paris"}

done = False

while not done:
    inp = input('&gt; ')                                                                                
    if any(inp):
        if 'ABORT' in inp:
            done = True
        else: 
            inp = inp.casefold()
            for city in cities:
                city_casefold = city.casefold()
                if city_casefold.startswith(inp):
                    print(city)
                else:
                    for part in city_casefold.split():
                        if part.startswith(inp):
                            print(city)
                            break
    else:
        done = True

sys.exit(0)
</code></pre>
<p>I saved the code in a script called <code>suggestions.py</code>. Testing it...</p>
<pre><code>$ python3 suggestions.py 
&gt; p
Pont Neuf
Paris
&gt; P
Pont Neuf
Paris
&gt; PAR
Paris
&gt; AR
&gt; DE
Mont de Marsan
&gt; de
Mont de Marsan
&gt; d
Mont de Marsan
&gt; D
Mont de Marsan
&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My strategy is to create a dictionary of sets of city names, with the initial letter of each word in a city name as the key. It doesn't take long to create this dictionary, but it makes finding the matching cities very fast.</p>
<p>My input loop ignores empty strings and leading or trailing blank spaces, and it prints "Nothing matches" if it can't find a match because I find it <em>very</em> annoying when a program closes just because I gave it bad input.</p>
<pre><code>from collections import defaultdict

# Create list of city names
cities = '''\
Aix en Provence
Bordeaux
Clermont Ferrand
Le Mans
Le Havre
Limoges
Lyon
Marseille
Mont de Marsan
Montpellier
Nantes
Nice
Nîmes
Paris
Pont Neuf
Saint Denis
Saint Étienne
Strasbourg
Toulon
Toulouse
Tours
'''.splitlines()

# Build a dictionary of cities keyed by the
# 1st letter of each word of the city name
city_index = defaultdict(set)
for city in cities:
    for word in city.split():
        city_index[word[0]].add(city)

# Display the city index
for k in sorted(city_index.keys()):
    print(k, city_index[k])
print()

print('Select cities by an initial letter, or ABORT to quit')
while True:
    s = input('? ')

    #Remove leading or trailing whitespace
    s = s.strip()

    # Ignore empty input
    if not s:
        continue

    if s == 'ABORT':
        break

    #We only want a single leter, so discard anything after the first letter
    s = s[0]

    # Get matching cities
    matches = city_index.get(s)
    if matches:
        print(matches)
    else:
        print('Nothing matches')
</code></pre>
<p><strong>Test run</strong></p>
<pre><code>A {'Aix en Provence'}
B {'Bordeaux'}
C {'Clermont Ferrand'}
D {'Saint Denis'}
F {'Clermont Ferrand'}
H {'Le Havre'}
L {'Le Mans', 'Limoges', 'Lyon', 'Le Havre'}
M {'Le Mans', 'Mont de Marsan', 'Marseille', 'Montpellier'}
N {'Pont Neuf', 'Nice', 'Nantes', 'Nîmes'}
P {'Pont Neuf', 'Aix en Provence', 'Paris'}
S {'Strasbourg', 'Saint Étienne', 'Saint Denis'}
T {'Toulon', 'Tours', 'Toulouse'}
d {'Mont de Marsan'}
e {'Aix en Provence'}
É {'Saint Étienne'}

Select cities by an initial letter, or ABORT to quit
? S
{'Strasbourg', 'Saint Étienne', 'Saint Denis'}
? T
{'Toulon', 'Tours', 'Toulouse'}
? A
{'Aix en Provence'}
? C
{'Clermont Ferrand'}
? K
Nothing matches
? d
{'Mont de Marsan'}
? F
{'Clermont Ferrand'}
? M
{'Le Mans', 'Mont de Marsan', 'Marseille', 'Montpellier'}
? E
Nothing matches
? É
{'Saint Étienne'}
?   Silly
{'Strasbourg', 'Saint Étienne', 'Saint Denis'}
? ABORT
</code></pre>
</div>
<span class="comment-copy">What do you mean, the first letter in any part? Do you mean the first letter of any word of the city's name? And why are you looping to check each letter? Please be more specific. Some examples of input and expected output might help.</span>
<span class="comment-copy">First character of a string is <code>string-name[0]</code>.  Or you can test with <code>string-name.istitle()</code></span>
<span class="comment-copy">It might help if you explain what you're <i>really</i> trying to do. Eg, do you actually have a list of cities, and you want the user to be able to select a city from the list by entering a letter?</span>
<span class="comment-copy">Sorry i knew it wasn't so clear so 'ill try to explain more in details : So i have a list of City, some can be 'Paris', some can be 'Mont de Marsan' or even 'Pont Neuf'. I now have to ask the user for a single character, if he enter P, i have to print 'Paris' and 'Pont Neuf', if he enter 'd' i have to print 'Mont de Marsan'. It's the same behaviour as the GPS system in cars. I hope it's clearer now :)</span>
<span class="comment-copy">Hi, Thomas. Extra explanation like that should really be added to the question itself. Not everybody reads all the comments. :)</span>
<span class="comment-copy">That is exactly what i wanted to understand !! Thanks a lot @jDo, i didn't even know about while 'not' !You really helped my understanding of Python a lot !! thanks again, I'll read the docs right now for more possibilities ;)</span>
<span class="comment-copy">Nice work jDo. But I might as well post my code too, in case Thomas (or some future reader) finds it interesting or useful.</span>
<span class="comment-copy">Thanks, both of you :) I'm glad it's useful. It'll be interesting to see your take on it too, @PM2Ring. I made two changes to my code and will update it in a minute. 1 -  <code>cities</code> should be a <code>set</code>, not a <code>tuple</code> since <code>set</code>s remove duplicates automatically. 2 - in case the user enters "mont de" my current implementation won't match "Mont de Marsan" because of the space between "mont" and "de". Also, because of <code>if 'ABORT' in inp:</code> any user input containing the uppercase word "ABORT" will stop the script. I hope "Mont de ABORTION" doesn't exist but you never know :D</span>
<span class="comment-copy">FWIW, I originally used lists instead of sets in my <code>city_index</code>, but changed it when I saw that "Mont de Marsan" got added twice. :) OTOH, sets use more RAM than lists, but I guess that doesn't really matter unless the number of cities is very large.</span>
<span class="comment-copy">Hey ! Thanks for the 'dictionnary method' explanation it's very useful but it's not exactly the behaviour i need but i may use some interesting parts of it !! Thanks again</span>
