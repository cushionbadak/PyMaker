<div class="post-text" itemprop="text">
<p>I'd like a function in my module to be able to access and change the local namespace of the script that's importing it. This would enable functions like this:</p>
<pre><code>&gt;&gt;&gt; import foo
&gt;&gt;&gt; foo.set_a_to_three()
&gt;&gt;&gt; a
3
&gt;&gt;&gt;
</code></pre>
<p>Is this possible in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>To let the module access your script's namespace, you will have to pass the namespace to the function. For example:</p>
<pre><code>&gt;&gt;&gt; import foo
&gt;&gt;&gt; foo.set_a_to_three(globals(), locals())
&gt;&gt;&gt; a
3
</code></pre>
<p>The inside of the code would look like this:</p>
<pre><code>def set_a_to_three(globalDict, localDict):
    localDict['a'] = 3
</code></pre>
<p>Sidenote: In this case, the globals dictionary is not needed but in cases where you need to modify global variable, you will need to use the globals dictionary. I have included it here for this reason to make the function extensible.</p>
<p>However, it would be easier to just set <code>a = 3</code> as Eli Sadoff said. It isn't a good practice to pass namespaces to other programs.</p>
</div>
<div class="post-text" itemprop="text">
<p>An answer was generously provided by <a href="https://stackoverflow.com/users/573626/omz">@omz</a> in a Slack team:</p>
<pre><code>import inspect
def set_a_to_three():
    f = inspect.currentframe().f_back
    f.f_globals['a'] = 3
</code></pre>
<p>This provides the advantage over the <code>__main__</code> solution that it works in multiple levels of imports, for example if <code>a</code> imports <code>b</code> which imports my module, <code>foo</code>, <code>foo</code> can modify <code>b</code>'s globals, not just <code>a</code>'s (I think)</p>
<p>However, if I understand correctly, modifying the local namespace is more complicated. As someone else pointed out:</p>
<blockquote>
<p>It breaks when you call that function from within another function. Then the next namespace up the stack is a fake dict of locals, which you cannot write to. Well, you can, but writes are ignored.</p>
</blockquote>
<p>If there's a more reliable solution, that'd be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Disclaimer: This solution can only modify global variables, so it's not perfect. See <a href="https://stackoverflow.com/questions/24023601/is-it-good-practice-to-use-import-main">Is it good practice to use <code>import __main__</code>?</a> for pros and cons.</p>
<p>In foo.py:</p>
<pre><code>import __main__

def set_a_to_three():
    __main__.a = 3
</code></pre>
<p><a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer"><code>__main__</code></a> is a name given to the current top-level program. For example, if you import <code>foo</code> from a module <code>bar</code>, then <code>bar</code> can be referenced with the name <code>__main__</code>. If you import <code>foo</code> from <code>bar</code>, which was initially imported from a module <code>qux</code>, then <code>qux</code> is <code>__main__</code>, etc.</p>
<pre><code>bar -&gt; foo
bar is __main__

qux -&gt; bar -&gt; foo
qux is __main__
</code></pre>
<p>If you actually want to modify variables in <code>bar</code> rather than <code>qux</code>, for example because <code>qux</code> contains unit tests, you can use something like this:</p>
<pre><code>import sys
import __main__
if "bar" in sys.modules:
    __main__ = sys.modules["bar"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's easy to set in the <code>__main__</code>, because we know it's name.  </p>
<pre><code>#foo.py
import sys

def set_a_to_three():
    sys.modules['__main__'].a = 3
</code></pre>
</div>
<span class="comment-copy">It's just a dumb example. I'll be doing more complex stuff that needs to come from <code>foo</code> and be assigned from <code>foo</code>. I know how Python assignment works normally, though.</span>
<span class="comment-copy">@LukeTaylor oh sorry. I was confused because you seemed to have a good grasp on python. I'm not sure then.</span>
<span class="comment-copy">@LukeTaylor Accessing the stack frames is an implementation detail though and may not necessarily work in other Python implementations. Also, this still requires you to define <code>a</code> <i>before</i> you call the function, otherwise your script will not even compile because of a NameError.</span>
<span class="comment-copy">@poke Thanks for the more detailed implementation.</span>
<span class="comment-copy">@vaultah I think I'm trying to go the other way</span>
<span class="comment-copy">This is a decent answer in many cases. My situation is <i>slightly</i> more complicated because I'm already thoroughly abusing the Python language by replacing <code>sys.modules[__name__</code> with a custom class implementing <code>__getattr__</code>, meaning my functions aren't being called directly. Thanks a lot, this is a good option in a lot of cases, as it is for most users.</span>
<span class="comment-copy">The view returned from <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> shouldnâ€™t be modified.</span>
<span class="comment-copy">Modifying locals is unsupported.</span>
<span class="comment-copy">@user2357112 Hmm... I've heard that, but the code I have given still works. Why?</span>
<span class="comment-copy">In the current implementation, modifying locals only works at class or module scope, but not inside a function.</span>
<span class="comment-copy">Could this be done with a  <code>setattr</code> if I didn't know its name?</span>
<span class="comment-copy">I said the module's name.</span>
<span class="comment-copy">Right. My bad. Sorry ;)</span>
