<div class="post-text" itemprop="text">
<p>Say I'd like to create an introspection stanza, that displays available details of a function. <br/>Something like the bottom of the following code:</p>
<pre><code>def sample(_range=4):
    """ produce a range of integers """
    for i in range(_range):
        yield i

f = sample
for i in (f.__name__, f.__doc__, f.__dict__, f.__code__, f.__defaults__, f.__globals__, f.__closure__):
    print("XXX", i)
</code></pre>
<p>What I'm failing to achieve is changing the <code>XXX</code> to something that would print the attribute name, e.g., instead of</p>
<pre><code>XXX sample
XXX  produce a range of integers
XXX {}
XXX &lt;code object sample at 0xfff15890, file "/tmp/tmp.py", line 1&gt;
XXX (4,)
XXX {'__loader__': &lt;_frozen_importlib.SourceFileLoader object at 0xfff13b30&gt;, '__package__': None, '__file__': '/tmp/tmp.py', '__cached__': None, 'i': {...}, 'f': &lt;function sample at 0xfff5b1e0&gt;, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__doc__': None, '__spec__': None, '__name__': '__main__', 'sample': &lt;function sample at 0xfff5b1e0&gt;}
XXX None
</code></pre>
<p>I'd like to have</p>
<pre><code>__name__ sample
__doc__  produce a range of integers
__dict__ {}
__code__ &lt;code object sample at 0xfff15890, file "/tmp/tmp.py", line 1&gt;
__defaults__ (4,)
f.__globals__ {'__loader__': &lt;_frozen_importlib.SourceFileLoader object at 0xfff13b30&gt;, '__package__': None, '__file__': '/tmp/tmp.py', '__cached__': None, 'i': {...}, 'f': &lt;function sample at 0xfff5b1e0&gt;, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__doc__': None, '__spec__': None, '__name__': '__main__', 'sample': &lt;function sample at 0xfff5b1e0&gt;}
__closure__ None
</code></pre>
<p>What would you suggest should replace <code>XXX</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If, as in your example, you know the names of the attributes you want, this would work:</p>
<pre><code>for fn in ('__name__', '__doc__', '__dict__', '__code__', '__defaults__', '__globals__', '__closure__'):
    print(fn, getattr(f, fn))
</code></pre>
<p>If you are asking how to get the name when all you have is the function, then I believe you are out of luck; the name isn't a property of the function, but rather how it is referenced, much as you can't ask what the name of the variable containing the number 3 is just from the number.  (Thought exercise: what would the name be for a function that is part of 3 distinct objects, each under a different name?)</p>
<p>I suppose, if you wanted the name of a function in a particular object, you could iterate over the attributes of that object, searching for your function; when you find it, the name you used to reference it would be the one you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you already have a list of the attributes, you could use <code>getattr</code> :</p>
<pre><code>for name in ['__name__', '__doc__', '__dict__', '__code__', '__defaults__', '__globals__', '__closure__']:
    print('{} -&gt; {}'.format(name, getattr(f, name)))
</code></pre>
</div>
<span class="comment-copy">You could use a dictionary? Names as keys and values as attributes</span>
<span class="comment-copy">Why not iterate over the names instead? <code>for name in ['__name__', '__doc__', ...]: ...</code>.</span>
<span class="comment-copy">@MosesKoledoye under the hood, that's exactly what the <code>sample</code> object is!</span>
<span class="comment-copy">@jonrsharpe Right! So with the attributes as names in a list, like you've done, it would suffice to use <code>getattr</code></span>
<span class="comment-copy">In doubt, just do <code>print('__name__', f.__name__)</code>? Also, look at the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module.</span>
<span class="comment-copy">That should be <code>getattr(f, fn)</code></span>
<span class="comment-copy"><code>def foo(): pass</code> actually gives the function object the name <code>foo</code>. So functions can and do have a name; itâ€™s just the variable which name you cannot get.</span>
