<div class="post-text" itemprop="text">
<p>Let's say I have a string like <code>num = "12345"</code>; how do I print it as one character like <code>1</code> or <code>2</code> without using brackets (<code>print(num[0])</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The brackets are probably the correct way to do this, why do not want you to use it?</p>
<p>Anyway, you can <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow">unpack your string</a> (only work with Python 3 as @DeepSpace precised), like this:</p>
<pre><code>letter, *_ = num
print(letter)
# "1"
</code></pre>
<p>It works also for multiple variables anywhere:</p>
<pre><code>letter_1, *_, letter_2 = num
print(letter_1, letter_2)
# "1", "5"
</code></pre>
<hr/>
<p>There is also <a href="https://docs.python.org/3/library/operator.html#operator.getitem" rel="nofollow"><code>operator.getitem(a, b)</code></a>, which behaves like the brackets but as a function:</p>
<pre><code>from operator import getitem

letter = getitem(num, 0)
print(letter)
# "1"
</code></pre>
<hr/>
<p>Finally, as @EliKorvigo pointed it out, there is <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter(item)</code></a> which creates a function acting just like the brackets:</p>
<pre><code>from operator import itemgetter

getter = itemgetter(3)
letter = getter(num)
print(letter)
# "4"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another abuse of Python functions. </p>
<p>You could iterate over the string and only print values which are in a certain position.</p>
<pre><code>num = '12345'

values = (0, 1)
for i, n in enumerate(num):
    if i in values:
        print(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using iterators:</p>
<pre><code>chars = iter("12345")
print(next(chars))  # 1
print(next(chars))  # 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>itertools.islice()</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; num = '123456'
&gt;&gt;&gt; ''.join(islice(num, 0, 1))    # same as num[0]
'1'
&gt;&gt;&gt; n = 4
&gt;&gt;&gt; ''.join(islice(num, n, n+1))  # same as num[4]
'5'
&gt;&gt;&gt; n = 100
&gt;&gt;&gt; ''.join(islice(num, n, n+1))  # _not_ the same as num[100]
''
&gt;&gt;&gt; num[100]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: string index out of range
</code></pre>
<p>Other ways to do it include looping over the input string the required number of times:</p>
<pre><code>num = '123456'
n = 5
for i, c in enumerate(num):
    if i == n:
        print(c)
        break
# 6
</code></pre>
<p>Or popping items off a list copy of the string:</p>
<pre><code>num = '123456'
l = list(num)
n = 5
for i in range(n):
    try:
        _ = l.pop(0)
    except IndexError:
        break
print(l.pop(0))
# 6
</code></pre>
<p>Or looping over an iterator version of the string:</p>
<pre><code>num = '123456'
it = iter(num)
n = 5
for i in range(n):
    _ = next(it)
print(next(it))
</code></pre>
<p>And another way is to use a <a href="https://docs.python.org/3/library/collections.html?highlight=deque#collections.deque" rel="nofollow"><code>collections.deque</code></a>:</p>
<pre><code>from collections import deque

num = '123456'
d = deque(num)
n = 5
d.rotate(-n)
print d.popleft()
</code></pre>
<p>although you would want to length check it in case you rotated beyond the length of the string.</p>
</div>
<span class="comment-copy">Why would want to do this?</span>
<span class="comment-copy">It's my homework but I really am stuck right now. Couldn't think of a way to do it without the brackets.</span>
<span class="comment-copy"><code>letter, *_ = num</code>  will only work in Python3.</span>
<span class="comment-copy">You can also add an <code>itemgetter</code> example.</span>
<span class="comment-copy">@EliKorvigo Thank you, I added it.</span>
