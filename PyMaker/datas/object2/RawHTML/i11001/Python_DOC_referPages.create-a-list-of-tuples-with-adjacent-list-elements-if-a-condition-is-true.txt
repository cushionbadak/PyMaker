<div class="post-text" itemprop="text">
<p>I am trying to create a list of tuples where the tuple contents are the number <code>9</code> and the number before it in the list.  </p>
<p><strong>Input List:</strong></p>
<pre><code>myList = [1, 8, 9, 2, 4, 9, 6, 7, 9, 8]
</code></pre>
<p><strong>Desired Output:</strong></p>
<pre><code>sets = [(8, 9), (4, 9), (7, 9)]
</code></pre>
<p><strong>Code:</strong></p>
<pre><code>sets = [list(zip(myList[i:i], myList[-1:])) for i in myList if i==9]
</code></pre>
<p><strong>Current Result:</strong></p>
<pre><code>[[], [], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Cleaner Pythonic approach:</p>
<pre><code>&gt;&gt;&gt; [(x,y) for x,y in zip(myList, myList[1:]) if y == 9]
[(8, 9), (4, 9), (7, 9)]
</code></pre>
<hr/>
<p>What is the code above doing:</p>
<ul>
<li><code>zip(some_list, some_list[1:])</code> would generate a list of pairs of adjacent elements.</li>
<li>Now with that tuple, filter on the condition that the second element is equal to <code>9</code>. You're done :)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Part of your issue is that <code>myList[i:i]</code> will always return an empty list. The end of a slice is exclusive, so when you do <code>a_list[0:0]</code> you're trying to take the elements of <code>a_list</code> that exist <strong>between</strong> index 0 and index 0.</p>
<p>You're on the right track, but you want to zip the list with itself.</p>
<pre><code>[(x, y) for x, y in zip(myList, myList[1:]) if y==9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were pretty close, I'll show you an alternative way that might be more intuitive if you're just starting out:</p>
<pre><code>sets = [(myList[i-1], myList[i]) for i in range(len(myList)) if myList[i] == 9]
</code></pre>
<p>Get the index in the range of the list lenght, and if the value at the position <code>i</code> is equal to <code>9</code>, grab the adjacent elements.</p>
<p>The result is:</p>
<pre><code>sets
[(8, 9), (4, 9), (7, 9)]
</code></pre>
<p>This is <em>less efficient than the other approaches</em> but I decided to un-delete it to show you a different way of doing it. You can make it go a bit faster by using <code>enumerate()</code> instead:</p>
<pre><code>sets = [(myList[i-1], j) for i, j in enumerate(myList) if j == 9]
</code></pre>
<hr/>
<p><em>Take note</em> that <strong><em>in the edge case where <code>myList[0] = 9</code></em></strong> the behavior of the comprehension without <code>zip</code> and the behavior of the comprehension with <code>zip</code> is <strong>different</strong>.</p>
<p>Specifically, if <code>myList = [9, 1, 8, 9, 2, 4, 9, 6, 7, 9, 8]</code> then:</p>
<pre><code>[(myList[i-1], myList[i]) for i in range(len(myList)) if myList[i] == 9]
# results in: [(8, 9), (8, 9), (4, 9), (7, 9)]
</code></pre>
<p>while:</p>
<pre><code>[(x, y) for x, y in zip(myList, myList[1:]) if y==9]
# results in: [(8, 9), (4, 9), (7, 9)]
</code></pre>
<p>It is up to you to decide which of these fits your criteria, I'm just pointing out that they don't behave the same in all cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also do it without slicing by creating iterators:</p>
<pre><code>l = myList = [1,8,9,2,4,9,6,7,9,8]

it1, it2 = iter(l), iter(l)
# consume first element from it2 -&gt; leaving 8,9,2,4,9,6,7,9,8
next(it2, "")
# then pair up, (1,8), (8,9) ...
print([(i, j) for i,j in zip(it1, it2) if j == 9])
</code></pre>
<p>Or use the <a href="https://docs.python.org/2.7/library/itertools.html#recipes">pairwise recipe</a> to create your pairs</p>
<pre><code>from itertools import tee, izip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</code></pre>
<p>If using python3, just import <em>tee</em> and use the regular <em>zip</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is really surprising that no one has added a functional approach. </p>
<p>Another alternative answer is using a <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a>. This builtin function returns an iterator (list in Python2) consisting of all the elements present in the list that return <code>True</code> for a particular function </p>
<pre><code>&gt;&gt;&gt; myList = [1,8,9,2,4,9,6,7,9,8]
&gt;&gt;&gt; list(filter(lambda x:x[1]==9,zip(myList, myList[1:])))
[(8, 9), (4, 9), (7, 9)]
</code></pre>
<p>It is to be noted that the <a href="https://stackoverflow.com/questions/13638898/how-to-use-filter-map-and-reduce-in-python-3-3-0"><code>list</code> call is needed only in python3+</a>. The difference between the functional approach and list comprehensions is discussed in <a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">detail in this post</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>My solution is similar to one of Jim's advanced with zero-index check</p>
<pre><code>myList = [9, 1, 8, 9, 2, 4, 9, 6, 7, 9, 8]

[(myList[i-1], x) for i, x in enumerate(myList) if x==9 and i!=0]

# [(8, 9), (4, 9), (7, 9)]
</code></pre>
</div>
<span class="comment-copy">Fully identical to my answer :)</span>
<span class="comment-copy">@SuperSaiyan Except that yours doesn't mention the main problem the OP had, their usage of <code>myList[i:i]</code>.</span>
<span class="comment-copy">Related read for the OP <a href="http://stackoverflow.com/q/509211">Explain Python's slice notation</a></span>
<span class="comment-copy">isnt a list already an iterable, why do iter(l),iter(l)?</span>
<span class="comment-copy">@Phillip, when you consume part of an iterator, i.e next(it2), you move to the next element and the first is consumed, so in this example we start at the second element for it2 when we zip</span>
