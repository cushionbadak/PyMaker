<div class="post-text" itemprop="text">
<p>I have a project program,</p>
<pre><code>main.py
</code></pre>
<p>and I want to have the possibility to execute it in 3 different ways, per executable / script.</p>
<pre><code>1 py main.py

2 pyw main.py

3 py main.py bd / pyw main.py bd
</code></pre>
<p>If it would only be on my system, it wouldn't be an issue, but it has to be executed on a system that uses</p>
<pre><code>python3
</code></pre>
<p>instead of</p>
<pre><code>py
</code></pre>
<p>Thus even if I build an easy workaround for my system, I still had to build a second workaround for my university or permanently copy stuff, if I made a slight change to it.</p>
<hr/>
<p>Is there anyway to have 3 different scripts, that start main.py in different ways. Maybe with some tricky python arg that will always start main.py in pyw.</p>
</div>
<div class="post-text" itemprop="text">
<p>for a scrip that execute other scrip, look at the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">subprocess module</a> </p>
<p>to help you processing command-line arguments you can check <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow">argparse module</a> if you don't already</p>
<p>In any case, I see 3 case here</p>
<p>1) make 3 scrip, one for each case and make 4° one to select between them according to the command-line options for example</p>
<pre><code>case1.py
case2.py
case3.py
</code></pre>
<p>and the 4°</p>
<pre><code>#main.py
...
if something:
    import case1 as main
elif something_else:
    import case2 as main
else:
    import case3 as main

main.main(...)
</code></pre>
<p>2) have your main scrip, and make 3 other which only job is calling the main one with the needed options or import the main and executed it as needed</p>
<pre><code>main.py
</code></pre>
<p>and the cases</p>
<pre><code>#caseX.py
import main
main.main([options of case X])
</code></pre>
<p>3) add extra command-line options to select between cases with a suitable default values</p>
<pre><code>#main.py
...
def main(opt):
    ...

if __name__=="__main__":
    options=[]
    #process argv
    ...
    main(options)
</code></pre>
</div>
<span class="comment-copy">Love how everybody voting it down, not even telling me why I am deserving the downvote. I bet they read "Python without console" and thinking 'that got answered like 100 times ... Downvote!' ... If I am missing something, please at least say it. I read most of those question. I cannot use .pyw as an ending and I can't just execute it with pyw.</span>
<span class="comment-copy">you know about the <code>__name__</code> variable and/or <code>sys.argv</code>??</span>
<span class="comment-copy">I use argv all the time and <code>if __name __ == "__main__":</code> is nearly in every of my programs.</span>
<span class="comment-copy">But that has at least from my naive standpoint nothing to do with my problem. <i>Actually bd is an argv for bordered version of the GUI</i></span>
<span class="comment-copy">then look to me that what you really want is to identify when your scrip is called with <code>python</code> or <code>pythonw</code>, with that then a couple of  <code>if</code> will do the trick. Currently how you do that?</span>
<span class="comment-copy">I don't need to check if it is <code>python</code> or <code>pythonw</code> and I don't need to change something if it is either version. I just need the possibility to execute the file in different ways, by different scripts. One script should execute it with console. the second without console. The third should execute it with the argv bd.</span>
<span class="comment-copy">The subprocess module might help, but I really have to work trough it and understand it, to give you a feedback on that.</span>
<span class="comment-copy">I added some changes, that is more like what you need?</span>
