<div class="post-text" itemprop="text">
<p>I've made a small function that will actually measure the max recursion limit:</p>
<pre><code>def f(x):
    r = x
    try:
        r = f(x+1)
    except Exception as e:
        print(e)
    finally:
        return r
</code></pre>
<p>To know what to expect I've checked:</p>
<pre><code>In [28]: import sys

In [29]: sys.getrecursionlimit()
Out[29]: 1000
</code></pre>
<p>However</p>
<pre><code>In [30]: f(0)
maximum recursion depth exceeded
Out[30]: 970
</code></pre>
<p>The number is not fixed, always around ~970, and slightly changes between different instances of python (e.g. from within spyder to system cmd prompt).</p>
<p>Please note that I'm using ipython on python3.</p>
<p>What's going on? <strong>Why is the actual limit I'm getting lower than the <code>sys.getrecursionlimit()</code> value?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>The recursion limit is not the limit on recursion but the maximum depth of the python interpreter stack.There is something on the stack before your function gets executed. Spyder executes some python stuff before it calls your script, as do other interpreters like ipython.</p>
<p>You can inspect the stack via methods in the <code>inspect</code> module.</p>
<p>In CPython for me:</p>
<pre><code>&gt;&gt;&gt;print(len(inspect.stack()))
1
</code></pre>
<p>In Ipython for me:</p>
<pre><code>&gt;&gt;&gt;print(len(inspect.stack()))
10
</code></pre>
<p>As knbk pointed out in the comments as soon as you hit the stack limit a RecursionError is thrown and the interpreter raises the stack limit a bit to give you a possibility to handle the error gracefully. If you also exhaust that limit python will crash.</p>
</div>
<div class="post-text" itemprop="text">
<p>This limit is for stack, not for the function you define. There are other internal things which might push something to stack.</p>
<p>And of course it could depend on env in which it was executed. Some can pollute stack more, some less.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the confusion originates from the difference between the stack size you see when the error occurs and the limit. The thing is that the last call, that caused the crash, likely accounts for more than 1 frame on the stack, because it itself makes some function calls. And by the time you catch the exception, the call and its internal calls are already removed from the stack. Nevertheless, you can see them in the traceback. Let's look at this one. </p>
<pre><code>In [1]: import inspect

In [2]: import sys

In [3]: sys.setrecursionlimit(50)  # I'm setting this to 50 to make the traceback shorter.

In [4]: stack_log = []

In [5]: def recur():
    stack_log.append(len(inspect.stack()))
    recur()
   ...:     

In [6]: recur()
</code></pre>
<p>We get the traceback (<strong>note</strong>: there is no need to read it now, so just move forward to the next section).</p>
<pre><code>---------------------------------------------------------------------------
RecursionError                            Traceback (most recent call last)
&lt;ipython-input-6-45136123341b&gt; in &lt;module&gt;()
----&gt; 1 recur()

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
----&gt; 2     stack_log.append(len(inspect.stack()))
      3     recur()
      4 

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in stack(context)
   1462 def stack(context=1):
   1463     """Return a list of records for the stack above the caller's frame."""
-&gt; 1464     return getouterframes(sys._getframe(1), context)
   1465 
   1466 def trace(context=1):

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getouterframes(frame, context)
   1439     framelist = []
   1440     while frame:
-&gt; 1441         frameinfo = (frame,) + getframeinfo(frame, context)
   1442         framelist.append(FrameInfo(*frameinfo))
   1443         frame = frame.f_back

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getframeinfo(frame, context)
   1412         start = lineno - 1 - context//2
   1413         try:
-&gt; 1414             lines, lnum = findsource(frame)
   1415         except OSError:
   1416             lines = index = None

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in findsource(object)
    742     is raised if the source code cannot be retrieved."""
    743 
--&gt; 744     file = getsourcefile(object)
    745     if file:
    746         # Invalidate cache if needed.

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getsourcefile(object)
    670         return filename
    671     # only return a non-existent filename if the module has a PEP 302 loader
--&gt; 672     if getattr(getmodule(object, filename), '__loader__', None) is not None:
    673         return filename
    674     # or it is in the linecache

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getmodule(object, _filename)
    699     # Try the cache again with the absolute file name
    700     try:
--&gt; 701         file = getabsfile(object, _filename)
    702     except TypeError:
    703         return None

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getabsfile(object, _filename)
    683     if _filename is None:
    684         _filename = getsourcefile(object) or getfile(object)
--&gt; 685     return os.path.normcase(os.path.abspath(_filename))
    686 
    687 modulesbyfile = {}

/Users/ilia/.venvs/py3/bin/../lib/python3.5/posixpath.py in abspath(path)
    355 def abspath(path):
    356     """Return an absolute path."""
--&gt; 357     if not isabs(path):
    358         if isinstance(path, bytes):
    359             cwd = os.getcwdb()

/Users/ilia/.venvs/py3/bin/../lib/python3.5/posixpath.py in isabs(s)
     61 def isabs(s):
     62     """Test whether a path is absolute"""
---&gt; 63     sep = _get_sep(s)
     64     return s.startswith(sep)
     65 

RecursionError: maximum recursion depth exceeded
</code></pre>
<p>What's with the stack log?</p>
<pre><code>In [7]: stack_log[-1]
Out[7]: 39
</code></pre>
<p>Okay, we have 11 missing frames. Now, scroll down the traceback to the last <code>recur</code> call, i.e.</p>
<pre><code>&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
      2     stack_log.append(len(inspect.stack()))
----&gt; 3     recur()
      4 

&lt;ipython-input-5-643b16f38b2e&gt; in recur()
      1 def recur():
----&gt; 2     stack_log.append(len(inspect.stack()))
      3     recur()
      4 

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in stack(context)
   1462 def stack(context=1):
   1463     """Return a list of records for the stack above the caller's frame."""
-&gt; 1464     return getouterframes(sys._getframe(1), context)
   1465 
   1466 def trace(context=1):

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getouterframes(frame, context)
   1439     framelist = []
   1440     while frame:
-&gt; 1441         frameinfo = (frame,) + getframeinfo(frame, context)
   1442         framelist.append(FrameInfo(*frameinfo))
   1443         frame = frame.f_back

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getframeinfo(frame, context)
   1412         start = lineno - 1 - context//2
   1413         try:
-&gt; 1414             lines, lnum = findsource(frame)
   1415         except OSError:
   1416             lines = index = None

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in findsource(object)
    742     is raised if the source code cannot be retrieved."""
    743 
--&gt; 744     file = getsourcefile(object)
    745     if file:
    746         # Invalidate cache if needed.

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getsourcefile(object)
    670         return filename
    671     # only return a non-existent filename if the module has a PEP 302 loader
--&gt; 672     if getattr(getmodule(object, filename), '__loader__', None) is not None:
    673         return filename
    674     # or it is in the linecache

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getmodule(object, _filename)
    699     # Try the cache again with the absolute file name
    700     try:
--&gt; 701         file = getabsfile(object, _filename)
    702     except TypeError:
    703         return None

/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/inspect.py in getabsfile(object, _filename)
    683     if _filename is None:
    684         _filename = getsourcefile(object) or getfile(object)
--&gt; 685     return os.path.normcase(os.path.abspath(_filename))
    686 
    687 modulesbyfile = {}

/Users/ilia/.venvs/py3/bin/../lib/python3.5/posixpath.py in abspath(path)
    355 def abspath(path):
    356     """Return an absolute path."""
--&gt; 357     if not isabs(path):
    358         if isinstance(path, bytes):
    359             cwd = os.getcwdb()

/Users/ilia/.venvs/py3/bin/../lib/python3.5/posixpath.py in isabs(s)
     61 def isabs(s):
     62     """Test whether a path is absolute"""
---&gt; 63     sep = _get_sep(s)
     64     return s.startswith(sep)
     65 

RecursionError: maximum recursion depth exceeded
</code></pre>
<p>And here you are, there are exactly 11 function calls (the arrows on the left), that is 11 frames on the stack that were removed when the exception was raised. </p>
</div>
<span class="comment-copy">It is a guard against a stack overflow. You can change the recursion limit with <code>sys.setrecursionlimit</code>, but doing so is dangerous.</span>
<span class="comment-copy">What happens when you manually set the recursionlimit using <code>sys.setrecursionlimit(limit)</code> (<a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.setrecursionlimit</a>) at the beginning of your code? See also <a href="http://stackoverflow.com/questions/3323001/maximum-recursion-depth" title="maximum recursion depth">stackoverflow.com/questions/3323001/maximum-recursion-depth</a> and <a href="http://stackoverflow.com/questions/5061582/setting-stacksize-in-a-python-script/16248113#16248113" title="setting stacksize in a python script">stackoverflow.com/questions/5061582/…</a></span>
<span class="comment-copy">Just a side note. You shouldn't fix your recursive code by raising the recursion limit, because that is not load-proof. If you really want recursion, then use TCO and a decorator to eliminate the tail calls (there are plenty). Or just stick with an imperative alternative.</span>
<span class="comment-copy">@utkarsh13 - just wrote that before you :)</span>
<span class="comment-copy">@EliKorvigo I don't really see the point of using a tco decorator. They introduce a lot of overhead. Moreover given any tail-code recursive definition it is <b>trivial</b> to convert it into an iterative definition... so just use the iterative solution.</span>
<span class="comment-copy">Great stuff. I get in Ipython console a stack of 23. But shouldn't then <code>len(inspect.stack()) + f(0) == sys.getrecursionlimit()</code>? Because I'm still 7 stack items short... :-)</span>
<span class="comment-copy">What happens if you <code>print(inspect.stack())</code> when you except the exception?</span>
<span class="comment-copy">If I <code>print(inspect.stack())</code> inside the exception I get 994. Close enough to the 7 stack items missing (my function may have a +1 issue which I didn't fully weed out). But then why is an exception being raised? the stack is only 994 full...</span>
<span class="comment-copy">@Theguy the function call, that results in the ecxeption, is already removed from the stack by the time you catch the exception and it can be traced in the traceback of the exception object. You can make your function report the stack size before each recursive call and see the dynamics.</span>
<span class="comment-copy">@Falco Actually (at least in CPython), reaching the stack limit will set a flag and temporarily raise the stack limit (by 50, IIRC) to allow clean handling of the exception. If you reach the new stack limit while handling the exception, a fatal error will occur and your application will crash. Dropping under the first non-temporary limit by 50 or more will reset the flag and the limit, and reaching it again will create a new exception rather than a fatal error. So no, the call to <code>print(e)</code> will not fail.</span>
