<div class="post-text" itemprop="text">
<p><strong>UPDATE</strong>
I have two lists of countries:
one from <a href="https://www.countries-ofthe-world.com/world-currencies.html" rel="nofollow">https://www.countries-ofthe-world.com/world-currencies.html</a> and the second one from <a href="http://www.nationsonline.org/oneworld/country_code_list.htm" rel="nofollow">http://www.nationsonline.org/oneworld/country_code_list.htm</a>. Some country names are different in those list. I need to merge them to get each country name, ISO3 and ISO-4217. To have the full list I need to rename some of the countries. I`m trying to workout a routine to find the country and them rename it by the values found in the second DataFrame.</p>
<p>I have two lists (of countries) it the following format:
Names I need</p>
<pre><code>Country_ISO['Country_or_territory'].tail(10)
    Out[57]: 
    237           Russian Federation
    238                      Vanuatu
    239                    Venezuela
    240                     Viet Nam
    241           Virgin Islands, US
    242    Wallis and Futuna Islands
    243               Western Sahara
    244                        Yemen
    245                       Zambia
    246                     Zimbabwe
    Name: Country_or_territory, dtype: object
</code></pre>
<p>and names that are different</p>
<pre><code>NotIn.Country_or_territory.tail(10)
Out[61]: 
131                     Macau
132                 Macedonia
148          Pitcairn Islands
153    Svalbard and Jan Mayen
163                    Russia
172               South Korea
177                     Syria
178                    Taiwan
180                  Tanzania
193                   Vietnam
Name: Country_or_territory, dtype: object
</code></pre>
<p>I need to find items in the first list (<strong>Country_ISO['Country_or_territory'].tail(10)</strong>) that correspond to items in the second list (<strong>NotIn.Country_or_territory.tail(10)</strong>) and do something with those names (rename them).</p>
<p>I`m trying to do this using nested for loops:</p>
<pre><code>for itemNotIn in NotIn.Country_or_territory.tail(10):
    for item in Country_ISO['Country_or_territory'].tail(10):   
        Tr = itemNotIn[:3] #This here because I need to compare by the first 3 characters)        
        t = re.sub(Tr+'\w+', '*****NOT_IN*****', item)
        print(t)
</code></pre>
<p>But when I run it i get a repetition of len(NotIn.Country_or_territory.tail(10)).</p>
<p>And I just can't find a way to make it work.</p>
<p>Ideally I will have a list like:</p>
<pre><code>*****NOT_IN*****
Vanuatu
Venezuela
*****NOT_IN***** Nam
Virgin Islands, US
Wallis and Futuna Islands
Western Sahara
Yemen
Zambia
Zimbabwe
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As the commenters have suggested, using sets you can get the latter part of your question (ie the differences between the list) using this code:</p>
<pre><code>list1 = ['Russia','Vanuatu','Venezuela','Viet Nam','Virgin Islands, 'US',
'Wallis and Futuna Islands','Western Sahara','Yemen','Zambia','Zimbabwe']

list2 = ['Macau','Macedonia','Pitcairn Islands','Svalbard and Jan Mayen',
'Russia','South Korea','Syria','Taiwan','Tanzania','Vietnam']

temp_set1 = set(list1).difference(list2)
print("Not in list2", temp_set1)

temp_set2 = set(list2).difference(list1)
print("Note in list1", temp_set2)
</code></pre>
<p>Now, the first part of your question actually suggests you wish to find similarities and change the similar items. In that case, you could do</p>
<pre><code>common = list(set(list1).intersection(list2))

In [18]: list(set(list1).intersection(list2))
Out[18]: ['Russia']

def fun(common):
     #do something with common
</code></pre>
<p>Finally, if you still wish to compare using only the first three characters, then do something like this:</p>
<pre><code>set([x[:3] for x in list1]).difference([x[:3] for x in list2])

In [19]: set([x[:3] for x in list1]).difference([x[:3] for x in list2])
Out[19]: {'US', 'Van', 'Ven', 'Vir', 'Wal', 'Wes', 'Yem', 'Zam', 'Zim'}
</code></pre>
</div>
<span class="comment-copy">Have you considered using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a>?</span>
<span class="comment-copy">Converting the lists to <code>set</code>s is definitely the way to do.  Membership lookup is very efficient.</span>
<span class="comment-copy">Comparing countries only on the first three letters seems like a mistake, then <code>Iran</code> would be confused with <code>Iraq</code> or <code>Australia</code> with <code>Austria</code> or <code>Chile</code> and <code>China</code></span>
<span class="comment-copy">In the context I`m working it does work because I have two list one with common name and the other with the official name. And the 4 characters is not the real point.</span>
<span class="comment-copy">I may have stated the problem wrong. I have two lists of countries NotIn.Country_or_territory is already the result of NotIn=Country_Currency_ISO_Code_curr_id[~Country_Currency_ISO_Code_curr_id['Country_or_territory'].isin(Country_ISO['Country_or_territory'])]. What I need is to rename the countries in one list based on the list NotIn.</span>
<span class="comment-copy">@Pavel, so the data is in pandas <code>dataframe</code> and you already have the differences. Two huge favours would help us out a lot. If possible, could you edit your questions with a brief script creating an example <code>dataframe</code> using which we can tinker and also an example of the desired output.</span>
