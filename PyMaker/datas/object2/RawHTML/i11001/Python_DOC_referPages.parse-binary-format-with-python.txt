<div class="post-text" itemprop="text">
<p>I have a binary file with the following header: 4 byte string, 1 byte number then 4 byte uint32 number.</p>
<p>Do I understand this correctly? 
The <code>sbet_data[0:3]</code> is the string, <code>sbet_data[4:5]</code> is the 1 byte number, then how long is the 4 byte uint32 number? Where can I find a good chart for corresponding byte size vs format, for example I would also like to know the size for 8 byte (uint64).</p>
<pre><code>sbet_file = open('abc.dat')
sbet_data = sbet_file.read()

s = struct.Struct('4s b I')
unpacked_data = s.unpack(sbet_data[0:12])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to open your file in binary mode and read only 12 bytes from your file:</p>
<pre><code>import struct

with open('abc.dat', 'rb') as fobj:
    byte_string, n1, n4 = struct.unpack('4sbI', fobj.read(12)) 
</code></pre>
<p>You will get a byte string. Assuming it is ASCII, you can decode like this:</p>
<pre><code>my_string = byte_string.decode('ascii')
</code></pre>
<p>The documentation of the <code>struct</code> contains <a href="https://docs.python.org/3/library/struct.html#format-strings" rel="nofollow">tables of format strings</a>.
According to one of these tables a <code>uint64</code> would be <code>L</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you are trying to extract information from the binary. Well this will work</p>
<pre><code>import struct 
import numpy as np

buffer = np.random.bytes(12)
s = struct.Struct('4sbI')
unpacked_data = s.unpack(buffer)
print unpacked_data[0], unpacked_data[1], unpacked_data[2]
</code></pre>
<p>In this case <code>unpacked_data[0]</code> will be the string, <code>unpacked_data[1]</code> will be the 1 byte number and the 4 byte integer will be <code>unpacked_data[2]</code>.</p>
<p>Keep in mind you can also use numpy to unpack the data using the np.ndarray constructor if you would like to improve the speed. </p>
</div>
<span class="comment-copy">Does this work for you?</span>
