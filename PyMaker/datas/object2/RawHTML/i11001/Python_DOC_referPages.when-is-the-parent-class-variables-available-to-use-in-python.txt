<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33346389/accessing-attribute-from-parent-class-inside-child-class">Accessing attribute from parent class inside child class</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<pre><code>class frozen(object) :
    isFrozen = False
    print 'In base'

class layer(frozen):
    print isFrozen
</code></pre>
<p>I am trying to understand the inheritance concept in Python, the above lines are a silly example. "print" statement in the parent class is working as I try to create an object of layer class. But it's throwing an error at the "print" statement of the child class. Saying "isFrozen" is not defined.</p>
<p>But, if I comment out the "print" statement in child class, I can create an object of the child class and access "isFrozen" as "layerObject.isFrozen".</p>
<p>So, could anyone please point out my misunderstanding here? </p>
</div>
<div class="post-text" itemprop="text">
<p>Class body provides a namespace and classes (unlike functions) are parsed when the module is read (import time). Your problem is that you are calling <code>isFrozen</code> of the <code>frozen</code> class without the namespace. Also to take full advantage of inheritance you need an actual class instance which is usually referred to as <code>self</code>:</p>
<pre><code>class Frozen(object):
    isFrozen = False
    def __init__(self):
      print Frozen.isFrozen
      print "From Base"


class Layer(Frozen):

    def __init__(self):
      print self.isFrozen ##this is defined by the parent
      print "From subclass"
      self.isFrozen = True
      print self.isFrozen


In [7]: test_class = Layer()
False
From subclass
True

In [8]: test_class.isFrozen
Out[8]: True
</code></pre>
<p>And a RTFM is suggested here as well. </p>
</div>
<span class="comment-copy">Have you read <a href="https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables" rel="nofollow noreferrer">the Python tutorial</a>?</span>
<span class="comment-copy">I had come across that particular tutorial. But, it does not help me to understand the cause of error in the above case. "isFrozen" is defined as a class variable. But why can't I access it from child class?</span>
<span class="comment-copy">@MazharulIslam because you're not accessing it on the class, you're treating it as a global. Only names already defined within the current class definition, not those of its parents, are available without qualification.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/datamodel.html#customizing-class-creation" rel="nofollow noreferrer">docs.python.org/3/reference/…</a>: "The class body is executed in a new namespace".</span>
<span class="comment-copy">They're parsed way earlier - before the Python source code is compiled to Python byte code. The class bodies of classes are <b>executed</b>, however, when the <code>class</code> statement itself is executed.</span>
<span class="comment-copy">Nitpicking, but whole module source is <i>parsed</i> before it even can be executed. <a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">Function definitions</a> are executed during module load, which for example leads to the infamous "why is my default list argument preserved between calls". A function definition does not execute the body, which I guess is what you meant.</span>
<span class="comment-copy">@IljaEverilä Yes that is what I meant. Good callout though.</span>
