<div class="post-text" itemprop="text">
<p>This is my current inventory system and I am working on having it register when an item has been picked up, but I am having trouble getting the program to register when the sprite class has been added to the list.</p>
<pre><code>import pygame
import Constants
import item_sys
clock = pygame.time.Clock()
screen = pygame.display.set_mode(Constants.screen_size)
inv = pygame.image.load("inv.png").convert_alpha()

gunx = -200
guny = -200

#sprite groups
item_list = pygame.sprite.Group()

class Invent_Sys():

    def __init__(self):
        self.inventory = []
        self.inventory_state = False
        self.sqaure = 36
    def uninventory(self):
        self.inventory_state = False

    def inventory_u(self):

        ITEMS,time_ms_mine = pygame.USEREVENT +1, 60
        pygame.time.set_timer(ITEMS, time_ms_mine)

        while self.inventory_state:
            pos = pygame.mouse.get_pos()
            x = pos[0]
            y = pos[1]
            pygame.mouse.set_visible(True)
            print(self.inventory)
            screen.blit(inv,(0,0))
            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    pygame.quit

                elif event.type == pygame.MOUSEBUTTONDOWN:
                    print(pos)

                elif event.type == ITEMS:
                    for i, j in enumerate(self.inventory):
                        if j == item_sys.Item1:
                            print('test') 
                            gunx = 14
                            guny = 395
                            gun = item_sys.Item1(gunx,guny)
                            gun.rect.x = gunx
                            gun.rect.y = guny
                            item_list.add(gun)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>if j == item_sys.Item1</code> check will fail because it is not checking the <em>type</em> of <code>j</code> equals <em>class type</em>. Rather, it is checking if the <em>value/object</em> <code>j</code> equals <em>class type</em>.</p>
<p>So, what you need to do is get <code>j</code>s <em>type</em>. To do that, assuming <code>Item1</code> class is not a subclass (if it is, you will need to make use of <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow">isinstance()</a>), you can use <code>if type(j) is Item1</code>. You can read this as: 'if <code>j</code> is a type of <code>Item1</code>'. </p>
<p>To avoid runtime type checking (which is what you are doing here), I'd recommend implementing a method in your <code>Item1</code> class that returns the item type e.g. weapon, armour, consumable, et cetera as that will come in handy as you develop your game. </p>
<p>You could go one step further and implement a method in your <code>Item1</code> class that gets the item's sub type e.g. weapon -&gt; gun, sword, stave, et cetera.</p>
</div>
<span class="comment-copy">Does this inventory system code fail here: <code>if j == item_sys.Item1:</code> hence your question about checking for/registering when a specific Sprite class (Item) is added to the list?</span>
<span class="comment-copy">If you notice the print("test") nothing comes up at all and the sprite doesnt show up</span>
<span class="comment-copy">And just to make sure, your actual code is indented correctly compared to what you've put in your post? Notice the <code>print('test')</code> and subsequent statements are not indented correctly.</span>
<span class="comment-copy">I fixed it so it properly shows what is being indented correctly</span>
<span class="comment-copy">Okay, I'd suggest using either the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">type</a> function or the <a href="https://docs.python.org/3/library/stdtypes.html#instance.__class__" rel="nofollow noreferrer">class</a> attribute to determine what type of class the object is and let me know the results of that. (If the above helps, I'll turn it into an answer). Another way you could approach this is to add a function <code>GetItemType()</code> to your <code>Item1</code> class that returns the item type e.g. weapon, armour, potion, etc. This is something that would no doubt come in handy as you continue to build your game.</span>
