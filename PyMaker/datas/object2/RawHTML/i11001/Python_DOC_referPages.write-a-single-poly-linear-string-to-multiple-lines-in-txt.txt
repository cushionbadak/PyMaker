<div class="post-text" itemprop="text">
<p>I have encountered a strange problem which I am struggling to resolve. When I run a <code>re.findall()</code> through a .txt file, and then try to print and write the results. all of the results I would expect appear, but they do so in different formats.
The code (modified from a similar thread I found earlier):</p>
<pre><code>import re

with open ('test.txt') as text:
    text = text.read()
match = re.findall(r'[\w\.-]+@[\w\.-]+', text)
for i in match:
    with open ('list.txt', 'a') as dest:
        i = str(i)
        print(i)
        dest.write(i)
</code></pre>
<p>The interpreter then produces the result:</p>
<pre><code>a@a
b@b
c@c
</code></pre>
<p>which is exactly what I would expect it to do, given the contents of test.txt.
However, list.txt reads:</p>
<pre><code>(generic existing text goes here)
a@ab@bc@c
</code></pre>
<p>while I want it to (and believe it should) read</p>
<pre><code>(generic existing text goes here)
a@a
b@b
c@c
</code></pre>
<p>I've tried using <code>str.writelines.()</code> in place of <code>str.write()</code> but this was not helpful. What differences between <code>print()</code> and <code>str.write()</code> are causing this ambiguity, and how would one go about avoiding it.</p>
<p>N.B. I am 99% sure that line 8 <code>i = str(i)</code> serves no purpose, but I've left it in because it's what I've been doing. Not really sure why...</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll start with your last comment. What <code>str(i)</code> does is it converts <code>i</code> to its string representation (which is defined in <code>i</code>'s class's <code>__str__</code> method). If you call <code>str(4)</code> you get <code>'4'</code>, for example. This is unnecessary in this case because <code>re.findall</code> returns a list of strings <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow">as per the documentation</a>.</p>
<p>As for your actual issue: you're missing the newlines. I would also prefer to open the file fewer times than you are.</p>
<p>Perhaps try:</p>
<pre><code>import re

with open ('test.txt') as text:
    text = text.read()
match = re.findall(r'[\w\.-]+@[\w\.-]+', text)
with open('list.txt', 'a') as dest:
    for i in match:
        print(i)
        dest.write(i + '\n')
</code></pre>
<p>(You can also remove the <code>print(i)</code> line if you don't want to see the output in the console every time a write is done.)</p>
</div>
<span class="comment-copy">Thanks mate! I thought I'd tried that before to no avail... Must have forgotten the space or something amateurish like that. Anyway, this is exactly what I was looking for.</span>
<span class="comment-copy">Gotta be an egg before you can grok. Happy coding! :)</span>
