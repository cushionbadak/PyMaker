<div class="post-text" itemprop="text">
<p>I am not far from a new bee in Python and i would like to parse a file
as is :</p>
<pre><code>Paris, 458 boulevard Saint-Germain
Paris, 343 boulevard Saint-Germain
Marseille, 343 boulevard Camille Flammarion
Marseille, 29 rue Camille Desmoulins
Marseille, 1 chemin des Aubagnens
</code></pre>
<p>The file contains : City, Street number, Street Type and Street Name</p>
<p>This order is always the same and the City is followed by a comma.</p>
<p>I had done this for now:</p>
<pre><code>#!/usr/bin/python3.4                                                                          

import readline
import sys

try:
    f = open(sys.argv[1])
except:
    sys.exit()

lines = f.readlines()
print(lines)
</code></pre>
<p>And i get this output:</p>
<pre><code>['Paris, 458 boulevard Saint-Germain\n', 'Paris, 343 boulevard Saint-Germain\n', 'Marseille, 343 boulevard Camille Flammarion\n', 'Marseille, 29 rue Camille Desmoulins\n', 'Marseille, 1 chemin des Aubagnens\n']
</code></pre>
<p>Seems to be the thing to do but now i have 2 questions:</p>
<ol>
<li><p>How can I make some lists for each one of the type (City, number, streetType, streetName) ?</p></li>
<li><p>Is there a librairy in Python that parses adresses in a list ? One that you would recommend ?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>There are various data structures that you could store this data in. You could store the data from each line in a tuple containing (city_name, street_number, street_type, street_name), and then store each of those tuples into a list. A slightly nicer option is to store the data into a list of dictionaries. Here's a short demo.</p>
<pre><code>fname = 'citydata.txt'

addresses = []
keys = ('city', 'num', 'type', 'name')

with open(fname) as f:
    for line in f:
        line = line.rstrip()
        city, line = line.split(',', 1)
        num, street_type, street_name = line.split(None, 2)
        t = (city, num, street_type, street_name)
        print(t)
        addresses.append(dict(zip(keys, t)))

print()
for row in addresses:
    print(row)

print()
for row in addresses:
    print(row['num'])
</code></pre>
<p><strong>output</strong></p>
<pre><code>('Paris', '458', 'boulevard', 'Saint-Germain')
('Paris', '343', 'boulevard', 'Saint-Germain')
('Marseille', '343', 'boulevard', 'Camille Flammarion')
('Marseille', '29', 'rue', 'Camille Desmoulins')
('Marseille', '1', 'chemin', 'des Aubagnens')

{'city': 'Paris', 'num': '458', 'type': 'boulevard', 'name': 'Saint-Germain'}
{'city': 'Paris', 'num': '343', 'type': 'boulevard', 'name': 'Saint-Germain'}
{'city': 'Marseille', 'num': '343', 'type': 'boulevard', 'name': 'Camille Flammarion'}
{'city': 'Marseille', 'num': '29', 'type': 'rue', 'name': 'Camille Desmoulins'}
{'city': 'Marseille', 'num': '1', 'type': 'chemin', 'name': 'des Aubagnens'}

458
343
343
29
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(EDIT)</p>
<p>Actually you don't need any extra libs. It is simple operation which could be done with list comprehension or generator or <code>map</code> function and <code>split</code> , <code>strip</code> <code>str</code> object methods if you could split by the single character</p>
<pre><code>with open(sys.argv[1]) as f:
    lines = f.readlines() 
    split = lambda x: x.replace(',', '').split()
    addresses_lists = map(split, lines)
</code></pre>
<p>If you have more complex condition to split - use <a href="https://docs.python.org/2/library/re.html" rel="nofollow"><code>re</code></a> module to parse a pattern you need. Definitely you need <a href="https://docs.python.org/2/library/re.html#re.split" rel="nofollow"><code>split</code> function from <code>re</code> module</a>.</p>
</div>
<span class="comment-copy">Are you familiar with <a href="https://docs.python.org/2/library/string.html" rel="nofollow noreferrer">common string operations</a> in Python?</span>
<span class="comment-copy">1st question:- How can I make some lists for each one of the type:::-- It's already a list of addresses. What else do u want?</span>
<span class="comment-copy">I am quite new to it but i have basic knowledge in programming so i think i could check this out and understand it .. i hope</span>
<span class="comment-copy">Ok maybe i forgot to tell you guys the goal of the project is to make a basic autocomplete from words that we get from that famous .txt file.</span>
<span class="comment-copy">Think through your design first.  Do you really want a list of house numbers?  For example, a dictionary of street names as keys each with a list of house numbers might be useful.</span>
<span class="comment-copy">What an answer ! Thanks it really helps my understanding of this language.</span>
<span class="comment-copy">Last question is : I am currently learning C and C++ and i was wondering if there was a same kind of "error handling" as in C or C++. By that I mean checking returns of open() or other functions ? Thanks a lot for help !</span>
<span class="comment-copy">Use Exception handling in Python - see <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">@ThomasBeaudet: I'm glad you like my answer. Don't forget to upvote it, once you have enough points. :) Yes, Python has exception handling. See <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">Python works at a higher level than C/C++. For example, I have used <code>with</code> to open the file. This automatically closes the file if there is some error inside the <code>with</code> block. In C you'd need to do a lot more explicit error checking.</span>
<span class="comment-copy">Note that this does not strip the comma off the city name.</span>
<span class="comment-copy">@PM2Ring, yep it could be processed after or with more complex lambda used with map for example.</span>
<span class="comment-copy">I feel bad for "stealing" your accept...</span>
<span class="comment-copy">No need, both answers helped me a lot since i'm really new to Python ! i'll just gather every possible infos i can ! Again, thanks a lot guys !</span>
<span class="comment-copy">@PM2Ring, but you had a good point and more obvious syntax. That is good for studying ;)</span>
