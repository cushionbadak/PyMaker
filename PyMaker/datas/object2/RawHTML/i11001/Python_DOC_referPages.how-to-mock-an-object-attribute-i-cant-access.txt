<div class="post-text" itemprop="text">
<p>I'm trying to <strong>mock the parser.html_source attribute</strong> of the following view in my unit test. I want to overwrite it with a former downloaded html of that page.</p>
<p>views.py:</p>
<pre><code>    def parse_online_page(request):
        site_manager = SiteManager(Constants.LOGIN)
        site_manager.login()
        site_manager.change_to_frame(Constants.HEAD)

        parser = HeadParser(html_source=site_manager.page_source)
        parser.parse()

        return redirect('another_page')
</code></pre>
<p>Here's my unit test:</p>
<pre><code>    TESTDATA_PATH = 'core/tests/assets'


    class TestSession(TestCase):
        def test_parser_view(self):
            with patch('core.parsers.HeadParser') as parser_mock:
                with open(os.path.join(TESTDATA_PATH, 'frame_head.html'), encoding='utf8') as f:
                    parser_mock.html_source = f.read()

                    response = self.client.get(reverse('core:parse_online_page'))
                    self.assertEqual(response.status_code, 302)

                    # assert that my html test asset was parsed correctly
</code></pre>
<p>Unfortunatly this does not overwrite the HeadParser's html_source attribute in all instances generated out of this class.</p>
<p>I don't even know if this is the right attribute to mock, I'm totally clueless.</p>
</div>
<div class="post-text" itemprop="text">
<p>Remember the advice in the mock documentation: patch where the class is used, not where it is defined. Here that means you should be mocking <code>'core.views.HeadParser'</code>.</p>
</div>
<span class="comment-copy">Remember the advice in the mock documentation: patch where the class is <i>used</i>, not where it is defined. Here that means you should be mocking 'views.HeadParser'.</span>
<span class="comment-copy">How would I do that? I thought that with patch('core.parsers.HeadParser') as parser_mock would give me a mock of that HeadParser ?  That's exactly why I wrote in the title "an attribute I can't access". the view does not have an attribute for HeadParser. It is local in this function.</span>
<span class="comment-copy">But it must be defined somewhere. You are surely importing it into that views.py module.</span>
<span class="comment-copy">Yes I import it with from core.parsers import HeadParser in my views.py  So you mean I should be patching like "with patch('core.myView.HeadParser') as mock_parser"?</span>
<span class="comment-copy">I don't know what "myView" is there, but if you mean "core.views.HeadParser", then yes.</span>
<span class="comment-copy">I Found the cite you were referring to: <a href="https://docs.python.org/3/library/unittest.mock.html#id5" rel="nofollow noreferrer">docs.python.org/3/library/unittest.mock.html#id5</a></span>
