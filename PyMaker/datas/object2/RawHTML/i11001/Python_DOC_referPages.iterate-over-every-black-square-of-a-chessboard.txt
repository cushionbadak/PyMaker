<div class="post-text" itemprop="text">
<p>I'd like to iterate over every other element of a <code>m</code>-by-<code>n</code> "chessboard", i.e.,</p>
<pre><code>l = []
for i in range(m):
    for j in range(n):
        if (i+j) % 2 == 0:
            l.append(something(i, j))
</code></pre>
<p>I'm using an explicit loop here, but for speed would rather use a list comprehension.</p>
<p>Any hints?</p>
<p>For bonus points, the solution also works for <code>i</code>, <code>j</code>, <code>k</code> with <code>(i+j+k) % 2 == 0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, list comprehension is just like your nested <code>for</code> loop, except that this is done <em>within</em> the list brackets:</p>
<pre><code>my_list = [something(i, j) for i in range(m) for j in range(n) if (i + j) % 2 == 0]
</code></pre>
<p>More generally, for <code>n</code> nested loops, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>, like this:</p>
<pre><code>from itertools import product

my_list = [something(*p) for p in product(range(n), repeat=n) if sum(p) % 2 == 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I understand it, you would like an explicit expression for the x and y coordinates of the black squares on the 'chess board', so that you don't have to evaluate the boolean for every square. Here is an implementation of my solution (for a 2-dimensional board):</p>
<pre><code>import numpy as np

# 'Chess board' dimension
m = 3       # Number of columns
n = 4       # Number of rows

# Counter variable. The length of this array is equal to the total number of black squares.
k = np.arange(0,m*n,2)

x_coords = (k + (k/n) % 2) % n      # x-coordinates of black squares
y_coords = (k + (k/n) % 2) / n      # y-coordinates of black squares

print("x-coordinates: "+str(x_coords))
print("y-coordinates: "+str(y_coords))
</code></pre>
<p>For the 3x4 dimensional board in the example above, this generates the following output:</p>
<pre><code>x-coordinates: [0 2 1 3 0 2]
y-coordinates: [0 0 1 1 2 2]
</code></pre>
<p>which you can verify by drawing a little diagram. Note that the 'helper variable' <code>(k/n) % 2</code> keeps track of whether the row number is even or odd; the odd rows have an 'offset' with respect to the even ones.</p>
</div>
<span class="comment-copy">If you want to handle an arbitrary number of axes, look into <code>itertools.product</code>, but note that <i>"any ideas?"</i> isn't a good SO question.</span>
