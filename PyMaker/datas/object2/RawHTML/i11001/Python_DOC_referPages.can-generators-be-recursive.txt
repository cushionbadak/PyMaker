<div class="post-text" itemprop="text">
<p>I naively tried to create a recursive generator. Didn't work. This is what I did: </p>
<pre><code>def recursive_generator(lis):
    yield lis[0]
    recursive_generator(lis[1:])

for k in recursive_generator([6,3,9,1]):
    print(k)
</code></pre>
<p>All I got was the first item <code>6</code>. </p>
<p>Is there a way to make such code work? Essentially transferring the <code>yield</code> command to the level above in a recursion scheme?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def recursive_generator(lis):
    yield lis[0]
    yield from recursive_generator(lis[1:])

for k in recursive_generator([6,3,9,1]):
    print(k)
</code></pre>
<p>I should point out this doesn't work because of a bug in your function. It should probably include a check that <code>lis</code> isn't empty, as shown below:</p>
<pre><code>def recursive_generator(lis):
    if lis:
        yield lis[0]
        yield from recursive_generator(lis[1:])
</code></pre>
<p>In case you are on Python 2.7 and don't have <code>yield from</code>, <a href="https://stackoverflow.com/questions/17581332/converting-yield-from-statement-to-python-2-7-code">check this question out.</a></p>
</div>
<div class="post-text" itemprop="text">
<h1>Why your code didn't do the job</h1>
<p>In your code, the generator function:</p>
<ol>
<li><em>returns</em> (yields) the first value of the list</li>
<li>then it creates a new <em>iterator object</em> calling the same generator function, passing a slice of the list to it</li>
<li>and then stops</li>
</ol>
<p>The second instance of the iterator, the one <em>recursively created</em>, is never being iterated over. That's why you only got the first item of the list.</p>
<p>A generator function is useful to automatically create an iterator object (an object that implements the <a href="https://docs.python.org/2/library/stdtypes.html#iterator-types" rel="noreferrer">iterator protocol</a>), but then you need to iterate over it: either <em>manually</em> calling the <code>next()</code> method on the object or by means of a loop statement that will automatically use the iterator protocol.</p>
<h1>So, can we recursively call a generator?</h1>
<p>The answer is <strong>yes</strong>. Now back to your code, if you <em>really</em> want to do this with a generator function, I guess you could try:</p>
<pre><code>def recursive_generator(some_list):
    """
    Return some_list items, one at a time, recursively iterating over a slice of it... 
    """
    if len(some_list)&gt;1:
    # some_list has more than one item, so iterate over it
        for i in recursive_generator(some_list[1:]):
            # recursively call this generator function to iterate over a slice of some_list.
            # return one item from the list.
            yield i
        else:
            # the iterator returned StopIteration, so the for loop is done.
            # to finish, return the only value not included in the slice we just iterated on.
            yield some_list[0]
    else:
        # some_list has only one item, no need to iterate on it.
        # just return the item.
        yield some_list[0]

some_list = [6,3,9,1]
for k in recursive_generator(some_list):
    print(k)
</code></pre>
<p><strong>Note:</strong> the items are returned in reversed order, so you might want to use <code>some_list.reverse()</code> before calling the generator the first time.</p>
<p>The important thing to note in this example is: <strong>the generator function recursively calls itself in a <em>for</em> loop</strong>, which sees an iterator and automatically uses the iteration protocol on it, so it actually gets values from it.</p>
<p>This works, but <strong>I think this is really not useful</strong>. We are using a generator function to iterate over a list and just get the items out, one at a time, but... a list is an iterable itself, so no need for generators! 
Of course I get it, this is just an example, maybe there are useful applications of this idea. </p>
<h1>Another example</h1>
<p>Let's recycle the previous example (for lazyness). Lets say we need to print the items in a list, adding to every item the count of previous items (just a random example, not necessarily useful). </p>
<p>The code would be:</p>
<pre><code>def recursive_generator(some_list):
    """
    Return some_list items, one at a time, recursively iterating over a slice of it...
    and adding to every item the count of previous items in the list
    """
    if len(some_list)&gt;1:
    # some_list has more than one item, so iterate over it
        for i in recursive_generator(some_list[1:]):
            # recursively call this generator function to iterate over a slice of some_list.
            # return one item from the list, but add 1 first. 
            # Every recursive iteration will add 1, so we basically add the count of iterations.
            yield i + 1
        else:
            # the iterator returned StopIteration, so the for loop is done.
            # to finish, return the only value not included in the slice we just iterated on.
            yield some_list[0]
    else:
        # some_list has only one item, no need to iterate on it.
        # just return the item.
        yield some_list[0]

some_list = [6,3,9,1]
for k in recursive_generator(some_list):
    print(k)
</code></pre>
<p>Now, as you can see, the generator function is actually doing something before returning list items AND the use of recursion starts to make sense. Still, just a stupid example, but you get the idea.</p>
<p><strong>Note:</strong> off course, in this stupid example the list is expected to contain only numbers. If you really want to go  try and break it, just put in a string in <em>some_list</em> and have fun. Again, this is only an example, not <em>production</em> code!</p>
</div>
<div class="post-text" itemprop="text">
<p>Recursive generators are useful for traversing non-linear structures.  For example, let a binary tree be either None or a tuple of value, left tree, right tree.  A recursive generator is the easiest way to visit all nodes. Example:</p>
<pre><code>tree = (0, (1, None, (2, (3, None, None), (4, (5, None, None), None))),
        (6, None, (7, (8, (9, None, None), None), None)))

def visit(tree):  # 
    if tree is not None:
        try:
            value, left, right = tree
        except ValueError:  # wrong number to unpack
            print("Bad tree:", tree)
        else:  # The following is one of 3 possible orders.
            yield from visit(left)
            yield value  # Put this first or last for different orders.
            yield from visit(right)

print(list(visit(tree)))

# prints nodes in the correct order for 'yield value' in the middle.
# [1, 3, 2, 5, 4, 0, 6, 9, 8, 7]
</code></pre>
<p>Edit: replace <code>if tree</code> with <code>if tree is not None</code> to catch other false values as errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>Up to Python 3.4, a generator function used to have to raise <code>StopIteration</code> exception when it is done.
For the recursive case other exceptions (e.g. <code>IndexError</code>) are raised earlier than <code>StopIteration</code>, therefore we add it manually.</p>
<pre><code>def recursive_generator(lis):
    if not lis: raise StopIteration
    yield lis[0]
    yield from recursive_generator(lis[1:])

for k in recursive_generator([6, 3, 9, 1]):
    print(k)
</code></pre>
<hr/>
<pre><code>def recursive_generator(lis):
    if not lis: raise StopIteration
    yield lis.pop(0)
    yield from recursive_generator(lis)

for k in recursive_generator([6, 3, 9, 1]):
    print(k)
</code></pre>
<p>Note that <code>for</code> loop will catch <code>StopIteration</code> exception.
More about this <a href="https://stackoverflow.com/a/14413978/2248627">here</a></p>
</div>
<span class="comment-copy">You're not yielding when you call it again. It hits the first yield, doesn't see another yield statement, and exits.</span>
<span class="comment-copy">you either need to <code>yield from another_generator()</code>, or yield each element one by one explicitly in while loop. Whether <code>another_generator()</code> is or is not "recursive" in your terminology  - that does not matter.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/8407760/python-how-to-make-a-recursive-generator-function">Python: how to make a recursive generator function</a></span>
<span class="comment-copy">I don't see a need for an <code>else</code> block on the <code>try</code>/<code>except</code>; it would be simpler to just move that code into the <code>try</code> block, wouldn't it?</span>
<span class="comment-copy">Simpler? Yes.  Better? Not according to many experts, starting with GvR.  <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">python.org/dev/peps/pep-0008/#programming-recommendations</a> "Additionally, for all try/except clauses, limit the try clause to the absolute minimum amount of code necessary. Again, this avoids masking bugs."</span>
<span class="comment-copy">Are you sure that a recursive generator can't just return normally when its done? Also, modifying your input in place is generally something you want to avoid.</span>
<span class="comment-copy">@jpmc26 currently, yes.  Starting with 3.6, explicitly raising StopIteration inside a generator function is a RuntimeError.  Typically, just return.  See <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">python.org/dev/peps/pep-0479</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/whatsnew/3.5.html" rel="nofollow noreferrer">Actually since back in 3.5, explicitly raising StopIteration inside a generator function  is deprecated</a> cc: @TerryJanReedy. So Levon's answer is an old recommendation up to 3.4. Most of us never liked writing explicit StopIteration anyway, it was unnecessary.</span>
