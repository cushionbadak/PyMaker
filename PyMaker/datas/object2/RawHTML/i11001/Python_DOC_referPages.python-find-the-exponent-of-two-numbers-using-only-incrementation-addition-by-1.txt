<div class="post-text" itemprop="text">
<p>I am trying to find the exponent of two numbers (<strong>n</strong>,<strong>m</strong>) using the only arithmetic operation of incrementation "+=1" by 1. I can not use any other addition/multiplication or division operators.  The program can be a function or a loop such that the user enters <strong>n</strong>, and them <strong>m</strong> and the program calculates <strong>n</strong> raised to the power of <strong>m</strong>. </p>
<p>There is one question closely related to mine already posted <strong>BUT</strong> it is looking for <strong>one</strong>, <strong>odd</strong> numbered square AND the addition operator is allowed. The related question does not help me raise the value of <strong>n</strong> by the value of <strong>m</strong>. Here is the code I have so far, it will multiply but not square based on user inputs. Thanks in advance!</p>
<pre><code>n=int(input())
m=int(input())

i=0
acc=0
while i &lt; m:
    acc+=n
    i+=1
print(acc)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functional programming works nicely here. Addition is repeated incrementing. Multiplication is repeated addition. Power is repeated multiplication.</p>
<p>By defining a function (<code>repeat</code>) that repeatedly applies a function to an argument a given number of times, one can build up the <code>power</code> function.</p>
<p>Here's the code.</p>
<pre><code>def repeat(f, n, x):
    a = 0
    while a != n:
        x = f(x)
        a = a + 1
    return x

inc = lambda a: a+1
add = lambda a: lambda b: repeat(inc, a, b)
mult = lambda a: lambda b: repeat(add(a), b, 0)
power = lambda a: lambda b: repeat(mult(a), b, 1)

print power(3)(7)
</code></pre>
<p>The only built-in arithmetic performed is incrementing by 1 and an equality comparison in the <code>while</code> loop in the <code>repeat</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>To do this, we need to understand first: What is multiplication?</p>
<p><code>a x b</code> is equivalent to <code>a + a + a +...</code> b times. Then, what is exponent? <code>a^b</code> is equivalent to <code>a x a x a x..</code> b times. So, you would need two while loops and two counters.</p>
<pre><code>n = int(input("n value: "))
m = int(input("m value: "))

def add(a, b):
    num = a
    for i in range(b):
        num += 1
    return num

def multiply(a, b):
    num = 0
    for i in range(b):
        num = add(num, a)
    return num

def exponent(a, b):
    num = 1
    for i in range(b):
        num = multiply(num, a)
    return num

print(exponent(n, m))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With only <code>+= 1</code> as arithmetical operation, your solution could look like this:</p>
<pre><code>def mul(n, m): 
    result = 0 
    mi = 0 
    while mi &lt; m:
        ni = 0 
        while ni &lt; n:
            result += 1
            ni += 1
        mi += 1
    return result

def pow(n, e): 
    result = 1 
    ei = 0 
    while ei &lt; e:
        result = mul(result, n)
    ei += 1
    return result

if __name__ == '__main__':
    n = int(input())
    e = int(input())
    print(pow(n, e))
</code></pre>
</div>
<span class="comment-copy">Paul, thanks for your code it works great! But I am not sure if I can use the Lambda function. I am new to python so it is something I will keep and use for future reference.</span>
<span class="comment-copy">@TheodoreHarrison You should be allowed to use the <code>lambda</code> function as it is just a shorthand for defining a function. Read more <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">MoonCheesez, yes you are correct. After researching it a bit, Lambda is a much simpler, shorter way to define a function. Thank you for the link and @PaulHankin for the solution.</span>
<span class="comment-copy">you should change loop count logic as op cannot use "-=1", but this is trivial modification to make it use +=1 instead</span>
<span class="comment-copy"><code>num += a</code> needs unrolling too.</span>
<span class="comment-copy">Thanks Moon Cheesez, the code you provided is easy for me to follow since it is the same type and level of code I am currently writing. With Paul's and @Lejot's comment included your code is exactly what I was looking for.  Thank you to all!</span>
