<div class="post-text" itemprop="text">
<p>I have a string <code>19:04:01:94891</code>.</p>
<p>When I pass this to <code>datetime.datetime.strptime()</code> as:</p>
<pre><code>datetime.strptime('19:04:01:94891', "%H:%M:%S:%f")
</code></pre>
<p>I get the following result:</p>
<pre><code>datetime.datetime(1900, 1, 1, 19, 4, 1, 948910)
</code></pre>
<p>However I expect the result to be:</p>
<pre><code>datetime.datetime(1900, 1, 1, 19, 4, 1, 94891)
</code></pre>
<p>The difference is in <code>microseconds</code>.</p>
<p>How can I get the expected result without modifying the string as I am reading the string from a file?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that your input isn't zero-padded, so the problem would be even worse if we were at, say, 11 microseconds. Let's fix the problem at it's source, and clean up the input first:</p>
<pre><code>def fixMicroseconds(timestamp):
   parts = timestamp.split(':')

   return ':'.join(
       parts[:-1] + ['{:06d}'.format(int(parts[-1]))]
   )
</code></pre>
<p>Now it will be zero-padded to 6 digits as Python prefers.</p>
<p>Here's an example of this working:</p>
<pre><code>In [1]: def fixMicroseconds(timestamp):
   ....:     parts = timestamp.split(':')
   ....:
   ....:     return ':'.join(
   ....:         parts[:-1] + ['{:06d}'.format(int(parts[-1]))]
   ....:     )
   ....:

In [2]: fixMicroseconds('19:04:01:94891')
Out[2]: '19:04:01:094891'

In [3]: fixMicroseconds('19:04:01:13')
Out[3]: '19:04:01:000013'

In [4]: datetime.datetime.strptime(fixMicroseconds('19:04:01:94891'), "%H:%M:%S:%f")
Out[4]: datetime.datetime(1900, 1, 1, 19, 4, 1, 94891)
</code></pre>
<p>You really need to clean up the input before the call to <code>strptime()</code>, because that's what <code>strptime()</code> expects (6 digits).</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation on <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow"><code>strptime()</code></a>:</p>
<blockquote>
<p>When used with the <code>strptime()</code> method, the <code>%f</code> directive accepts from
  one to six digits and zero pads on the right.</p>
</blockquote>
<p>If your string always contains a 5-digits microseconds number, you could truncate the resulting number after parsing the string:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dt = datetime.strptime("19:04:01:94891", "%H:%M:%S:%f")
&gt;&gt;&gt; dt.replace(microsecond=dt.microsecond//10)
datetime.datetime(1900, 1, 1, 19, 4, 1, 94891)
</code></pre>
<p>A "proper" solution would be to zero-pad the number of microseconds though. Since you already have an example for python2, here's one using python3's extended unpacking:</p>
<pre><code>&gt;&gt;&gt; *a, b =  "19:04:01:94891".split(":")
&gt;&gt;&gt; c = ":".join(a + ["{:0&gt;6}".format(b)])
&gt;&gt;&gt; c
'19:04:01:094891'
&gt;&gt;&gt; datetime.strptime(c, "%H:%M:%S:%f")
datetime.datetime(1900, 1, 1, 19, 4, 1, 94891)
</code></pre>
</div>
<span class="comment-copy">Not really possible without modifying the string: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">"When used with the <code>strptime()</code> method, the <code>%f</code> directive accepts from one to six digits and <b>zero pads on the right</b>."</a></span>
<span class="comment-copy">what is your propose? post-process is one possible and easy solution. if you want pre-process, I agree with @AshwiniChaudhary.</span>
