<div class="post-text" itemprop="text">
<p>Given a list of strings, I want to return a list with the strings in sorted order, except group all the strings that begin with 'x' first. </p>
<p>For example:</p>
<pre><code>['mix', 'xyz', 'apple', 'xanadu', 'aardvark']
</code></pre>
<p>Should yield:</p>
<pre><code>['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</code></pre>
<p>I know it can be done by making 2 lists and sorting each of them before combining them, but I'm not sure how to write the condition in which 'x' is the first character. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#sorted"><code>sorted</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#list.sort"><code>list.sort</code></a> accepts optional <code>key</code> keyword argument. That is the function used to get sort key, and the return value of the function is used to compare instead of the original items.</p>
<pre><code>&gt;&gt;&gt; words = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']
&gt;&gt;&gt; sorted(words, key=lambda word: (word[0] != 'x', word))
['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</code></pre>
<p>used <code>word[0] != 'x'</code>; which return <code>False</code> (0) for word starts with <code>x</code>, <code>True</code> (1) for other words; resulting words start with <code>x</code> come first.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>words = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']
result = [i for _, i in sorted((word[0]!='x', word) for word in words)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just make a particular case in your key method: if starts with x, return a truncated string starting with "0" so it will appear first, but will be still sorted after "x".</p>
<pre><code>z=['mix', 'xyz', 'apple', 'xanadu', 'aardvark']

z.sort(key=lambda x : "0"+x if x.startswith("x") else x)
print(z)
</code></pre>
<p>yields:</p>
<pre><code>['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; sorted(['mix', 'xyz', 'apple', 'xanadu', 'aardvark'],
           key=lambda x: (not x.startswith('x'), x))
['xanadu', 'xyz', 'aardvark', 'apple', 'mix']
</code></pre>
<p>The <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow"><code>sorted()</code></a> builtin returns a new, stable-sorted <code>list()</code> of each element in the input iterable, sorted by <code>key</code>. <code>key</code>, in this case, is a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow"><em>lambda expression</em></a> (basically a "mini-function") which transforms or converts each element in the input list into a sortable value. </p>
<p>In this case, our lambda expression sorts each word in the list by a <code>tuple()</code> which contains <code>False</code> or <code>True</code> indicating whether or not the word starts with <code>"x"</code>, followed by the word itself. Since <code>False</code> is "smaller" than <code>True</code>, the words that start with <code>"x"</code> appear first, and everything else is sorted alphabetically.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort it using the built-in <code>list.sort()</code> and then use list comprehension to get the output you desire as follows:</p>
<pre><code>sl = ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']
sl.sort()
sl = [el for el in sl if el.startswith("x")]+[el for el in sl if not el.startswith("x")]
</code></pre>
</div>
<span class="comment-copy">and what did you tried to code?</span>
<span class="comment-copy">rsm - I'm actually pretty new at this, so I didn't know what to do. I searched this and other sites for a good answer, but couldn't find any, so I posted this here, hoping to get some assistance. Thanks for all your answers, people! (and to Will, for editing my question).</span>
<span class="comment-copy">Hi, could you please add some explanation to your code?</span>
<span class="comment-copy">using <code>_</code> as a variable name is strange for sure. I didn't even know that it worked. Cryptic as hell! Please explain that the returned key is a tuple, and sorting on tuples works by trying first value, and so on which explains why it works.</span>
<span class="comment-copy">Hi, could you please add some explanation to your code? This popped up in the review queue, as code-only answers tend to.</span>
<span class="comment-copy">@Will I believe it's self-explanatory. You don't?</span>
<span class="comment-copy">The code does speak for itself to me, as an experienced Python engineer. However, new users who stumble across this may not understand <code>lambdas</code>, <code>sorted()</code> or <code>str.startswith()</code>. Additionally, adding plain-English explanation is just a part of SO's culture (not sure if an actual requirement). I'll add the type of brief explanation I'm talking about as an example; feel free to improve.</span>
<span class="comment-copy">Ok, check out my edit :) Remember, your audience doesn't always know what you or I know and take for granted.</span>
<span class="comment-copy">@Will Well, I'm sure you could've explained in even much more detail, but you didn't, right? You stopped at some level, just like I did. Our levels just differ. And it's not like I don't want to explain anything, I also did write a <a href="http://stackoverflow.com/a/38164742/1672429">fairly long answer</a> the same day. But don't worry, the reason I'm trying to stay away is just that I have much more important stuff that I should be doing instead.</span>
