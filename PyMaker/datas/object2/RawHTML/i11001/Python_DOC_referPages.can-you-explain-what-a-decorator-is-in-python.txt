<div class="post-text" itemprop="text">
<p>I'm studying Python OOP and I arrived at the topic of decorators but the material I'm using for studying doesn't cover it in depth.
I post the example code:</p>
<pre><code>class Duck:
    def __init__(self, **kwargs):
        self.properties = kwargs

    def quack(self):
        print("Quaaack!")

    def walk(self):
        print("Walk like a duck.")

    def get_properties(self):
        return self.properties

    def get_property(self, key):
        return self.properties.get(key, None)

    @property
    def color(self):
        return self.properties.get("color", None)

    @color.setter
    def color(self, c):
        self.properties["color"] = c

    @color.deleter
    def color(self):
        del self.properties["color"]

def main():
    donald = Duck()
    donald.color = "blue"
    print(donald.color)

if __name__ == "__main__": main()
</code></pre>
<p>Can you help me to understand the importance of decorators?
Can you explain in simple words the concept of decorator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me write some of the things I can simply say about the above code,</p>
<p>Generally decorators are said to be </p>
<blockquote>
<p>"Function decorators are simply wrappers to existing functions"</p>
</blockquote>
<p>Decorators always wrap an another function, Not to mention that the decorator is itself a function</p>
<p>In the above code you are setting,getting,deleting a property/formally  an attribute of a "duck" which is a color.</p>
<p>Decorator always start with the '@'. <code>@property</code> is a predefined decorator function that meant to take your getter,setter and del function of your class</p>
<pre><code>    @property #getter
    def color(self):
        return self.properties.get("color", None)

    @color.setter #setter
    def color(self, c):
        self.properties["color"] = c

    @color.deleter #del
    def color(self):
        del self.properties["color"]
</code></pre>
<p>All you have been doing is passing the functions(getter,setter,del) as an argument to the @property</p>
<p>if you written your main it would be like</p>
<pre><code>if __name__ == "__main__": main()  
    donald = Duck() //creating object
    donald.color = "blue" //call the setter method, look its more intuitive!!  (you don't using the donald.color("blue") syntax)
    print(donald.color)//getter
</code></pre>
<p>We can have our own decorator also, I highly recommend you to read the suggested link for its various uses and advantages</p>
</div>
<span class="comment-copy">There are many articles on decorators on the internet. E.g. <a href="http://thecodeship.com/patterns/guide-to-python-function-decorators/" rel="nofollow noreferrer">thecodeship.com/patterns/guide-to-python-function-decorators</a></span>
<span class="comment-copy"><a href="https://docs.python.org/3/glossary.html#term-decorator" rel="nofollow noreferrer">docs.python.org/3/glossary.html#term-decorator</a>, <a href="https://docs.python.org/3/reference/compound_stmts.html#function" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#function</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/20945366/python-decorators">Python - Decorators</a></span>
<span class="comment-copy">I simply need someone to explain in simple words what a decorator is. (not just comment the code). I don't understand why someone down voted the question. I took a look at a possible duplicate question but in those answers nobody explains in general what a decorator is, so my question is actually unique.</span>
<span class="comment-copy">Check teh second answer here - <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python?rq=1" title="how can i make a chain of function decorators in python">stackoverflow.com/questions/739654/â€¦</a> I agree that while fundamentally basic, there is no straight duplicate for this question - at least not one that has popped up in simple searches</span>
