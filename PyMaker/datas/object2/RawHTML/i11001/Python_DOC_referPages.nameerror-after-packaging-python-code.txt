<div class="post-text" itemprop="text">
<p>I've been using IPython for sometime without ever having to package code. I glanced through the following pages and setup a directory structure for my modules and now use IPython to initiate the program.</p>
<p><a href="https://docs.python.org/3/reference/import.html" rel="nofollow">https://docs.python.org/3/reference/import.html</a></p>
<p><a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">https://docs.python.org/3/tutorial/modules.html</a></p>
<p><a href="http://pythoncentral.io/how-to-create-a-python-package/" rel="nofollow">http://pythoncentral.io/how-to-create-a-python-package/</a></p>
<p><strong>Here is a gist of my setup</strong></p>
<p><strong>root foder</strong></p>
<ol>
<li><p>modules(directory)</p>
<p>1.1 external.py</p>
<p>1.2 getdata.py</p></li>
<li><p>driver.ipynb</p></li>
</ol>
<p>I created a directory called modules and created two files.</p>
<p><strong>modules (directory)</strong></p>
<p>-- external.py (contains the following)</p>
<pre><code>import glob # and many other import statements
</code></pre>
<p>-- getdata.py (contains the following)</p>
<pre><code>def funcname():
    file_list = glob.glob("Data/")

def other_func():
    x = x + 3
</code></pre>
<p>Now I run the following code in an IPython notebook</p>
<pre><code>from modules import external
from modules.getdata import * 
# so that I can funcname() instead of modules.getdata.funcname()

other_func() # runs as expected
funcname() # NameError global name 'glob' is not defined
</code></pre>
<p>Running <em>glob.glob("Data/")</em> in the IPython notebook does not give out any error.</p>
<p>How do I fix this namespace issue without renaming any function? I have a dozen functions and they all have the same issue.</p>
<p>Edit 1:- I forgot to mention <strong><em>stuff that I've already tried</em></strong></p>
<p>import statement in getdata.py</p>
<pre><code>import glob
def funcname():
    file_list = glob.glob("Data/")

def other_func():
    x = x + 3
</code></pre>
<p>I have more than one file which uses glob. Is there any better alternative other that importing modules in every file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Add <code>import glob</code> in <code>getdata.py</code> (<strong>where the <code>glob</code> module is used</strong>), not in the <code>external.py</code>.</p>
<pre><code>import glob  # &lt;--

def funcname():
    file_list = glob.glob("Data/")

def other_func():
    x = x + 3
</code></pre>
</div>
<span class="comment-copy">I thought of that, won't is slow down stuff? I have a few files which use glob, so I'll have to import it in each and every file. Why doesn't my way work?</span>
<span class="comment-copy">@AbhirathMahipal, <code>import</code> in other file does not affect other modules' namespace.</span>
<span class="comment-copy">@AbhirathMahipal, If a module is imported in a module, importing it again in another module does not reload it, but reused the already imported module.</span>
<span class="comment-copy">@AbhirathMahipal, You can experiment this with custom module which print something. Try import it once in a module, and in anothe module; you will see the thing is printed only once.</span>
<span class="comment-copy">@AbhirathMahipal, You can <b>pollute</b> builtin module which is searched last time, but not recommened; which will make your code hard to understand. Anyway here it is: <code>import glob; __builtins__.glob = glob</code> Put this line into the file where it is guaranteed always exectued / imported.</span>
