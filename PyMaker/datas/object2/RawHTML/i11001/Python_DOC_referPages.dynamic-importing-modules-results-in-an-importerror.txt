<div class="post-text" itemprop="text">
<p>So I've been trying to make a simple program that will dynamically import modules in a folder with a certain name. I cd with <code>os</code> to the directory and I run <code>module = __import__(module_name)</code> as I'm in a for loop with all of the files names described being iterated into the variable module_name.</p>
<p>My only problem is I get hit with a: </p>
<pre><code>ImportError: No module named "module_name" 
</code></pre>
<p>(saying the name of the variable I've given as a string). The file exists, it's in the directory mentioned and <code>import</code> works fine in the same directory. But normal even import doesn't work for modules in the cd directory. The code looks as follows. I'm sorry if this is an obvious question. </p>
<pre><code>import os

class Book():
    def __init__(self):
        self.name = "Book of Imps"
        self.moduleNames = []

    # configure path
    def initialize(self):
        path = os.getcwd() + '/Imp-pit'
        os.chdir(path)
        cwd = os.walk(os.getcwd())
        x, y, z = next(cwd)
        # Build Modules
        for name in z:
            if name[:3] == 'Imp':
                module_name = name[:len(name) - 3]
                module = __import__(module_name)

def start_sim():
    s = Book()
    s.initialize()

if __name__ == '__main__':
    start_sim()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think the interpreter dynamically alters <strong><a href="https://docs.python.org/3.5/library/sys.html#sys.path" rel="nofollow"><code>sys.path</code></a></strong> if you simply change the current directory with <code>os.chdir</code>. You'll manually have to insert the <code>path</code> variable into the <code>sys.path</code> list for this to work, i.e:</p>
<pre><code>sys.path.insert(0, path)  
</code></pre>
<p>Python generally searches <code>sys.path</code> when looking for modules, so it will find it if you specify it there. </p>
<p>An additional note; don't use <code>__import__</code>, rather use <strong><a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow"><code>importlib.import_module</code></a></strong>. The interface is exactly the same but the second is generally advised in the <em><a href="https://docs.python.org/3/library/importlib.html#functions" rel="nofollow">documentation</a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the try-except concept, e.g.:</p>
<pre><code>try:
    import csv            
except ImportError:
    raise ImportError('&lt;error message&gt;')
</code></pre>
<p>If I did understand you correct then</p>
<pre><code>try:
    module = __import__(module_name)
except ImportError:
    raise ImportError('&lt;error message&gt;')
</code></pre>
</div>
