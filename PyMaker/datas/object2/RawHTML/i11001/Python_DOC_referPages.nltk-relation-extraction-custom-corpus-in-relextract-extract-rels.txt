<div class="post-text" itemprop="text">
<p>I learnt that there is a built-in function in NLTK which could extract relations from NER-tagged sentences according the following:</p>
<pre><code>   import re

   IN = re.compile(r'.*\bin\b(?!\b.+ing\b)')

   for fileid in ieer.fileids():
       for doc in ieer.parsed_docs(fileid):
           for rel in relextract.extract_rels('ORG', 'LOC', doc, corpus='ieer', pattern = IN):
               print(relextract.rtuple(rel))
</code></pre>
<p>It seems me very promising for general purpose, but I understood that <code>relextract.extract_rels</code> accepts only <code>'ieer'</code> or <code>'conll2002'</code> for the parameter <code>corpus</code>. But in this case, its usage is restricted only to these two corpora, isn't it? How could one utilize it for his own corpus (presuming, of course, that it is NER-tagged).</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be more of a comment but I don't have enough reputation.</p>
<p>You can pass your custom corpus as the <code>doc</code> argument after it's been pos-tagged and converted to a list of chunked trees. For a custom corpus, you should use the <code>corpus='ace'</code>.</p>
<p>For example, in <a href="https://stackoverflow.com/a/27476056/6495334">this answer</a>, they use <code>extract_rels</code> to tag a custom corpus.  </p>
</div>
<div class="post-text" itemprop="text">
<p>What does the <code>r'.*\bin\b(?!\b.+ing\b)'</code> regular expression stands here for exactly? I cannot dechiper.</p>
</div>
<span class="comment-copy">Thank you. I'm a little confused as to why are both <code>doc</code> and <code>corpus</code> necessary here exactly? One needs here only one text input, namely the chunked text that is to be extracted. What does the corpus add here to the process?</span>
<span class="comment-copy">Looking at the source <a href="http://www.nltk.org/_modules/nltk/sem/relextract.html" rel="nofollow noreferrer">here</a> <code>corpus</code> defines the NE(name-entity) classes that are associated with different possible corpus arguments. Look at the dictionary <code>NE_CLASSES</code>.</span>
<span class="comment-copy">.* - any character \b - empty string "in" - literal characters \b - empty string (?!\b.+ing\b) - This expression uses negative lookahead (<a href="https://www.regular-expressions.info/lookaround.html" rel="nofollow noreferrer">regular-expressions.info/lookaround.html</a>) to specify that the word in should not be followed by a word ending in "ing". There's some linguistic reasoning behind this which I'm not entirely familiar with. Altogether this expression matches any number of characters followed by the word "in" as long as "in" is not followed by a word ending in "ing".   <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a></span>
