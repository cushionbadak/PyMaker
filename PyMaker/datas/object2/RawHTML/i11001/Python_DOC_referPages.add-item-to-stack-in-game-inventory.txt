<div class="post-text" itemprop="text">
<p>I've tried working on this problem for over an hour and a half and I've finally capitulated. Try as I might, I cannot get like items to stack in an inventory.</p>
<p>In detail, I randomly generate a 'drop', which has a name and a quantity stored in an array. 'drops' is a 2d array which holds these sub-arrays. I'm trying to search for this drop in a player's inventory which has a quantity as well, which would increase when the drop is added to it...if it worked perfectly.</p>
<pre><code>import random as rd

inventory = []

items = ["gunk","gear","bolt","wheel","pinion"]
drops = []



while True:
    enter = input("")
    if enter == "":
        drops = []
        quantity = 1
        drops.append([rd.choice(items),quantity])
        print("drops",drops)
        for i in range(len(drops)):
            try:
                add_to = inventory.index(drops[i])
                inventory[add_to][1] += quantity
            except:
                inventory.append(drops[i])


        print("inv",inventory)
</code></pre>
<p>Output (repeatedly pressing enter):</p>
<pre><code>drops [['pinion', 1]]
inv [['pinion', 1]]
drops [['gunk', 1]]
inv [['pinion', 1], ['gunk', 1]]
drops [['pinion', 1]]
inv [['pinion', 2], ['gunk', 1]]
drops [['bolt', 1]]
inv [['pinion', 2], ['gunk', 1], ['bolt', 1]]
drops [['pinion', 1]]
inv [['pinion', 2], ['gunk', 1], ['bolt', 1], ['pinion', 1]]
</code></pre>
<p>As you can see, because the quantity doesn't match the amount it's searching for, it just adds a new one. Any idea how to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>A better data type for this kind of thing would be to use <code>dict</code> for the inventory because it can keep track of quantities given a key (item):</p>
<pre><code>import random as rd

inventory = {}

items = ["gunk","gear","bolt","wheel","pinion"]
drops = []



while True:
    enter = input("")
    if enter == "":
        drops = []
        quantity = 1
        drops.append([rd.choice(items),quantity])
        print("drops",drops)

        for drop in drops:
            item = drop[0]
            qty = drop[1]
            if item in inventory:
                    inventory[item] += qty
            else:
                    inventory[item] = qty

        print("inv", [[key, inventory[key]] for key in inventory])
</code></pre>
<p>Here is an example of the output:</p>
<pre><code>drops, [['gunk', 1]]
inv, [['gunk', 1]]
drops, [['wheel', 1]]
inv, [['wheel', 1], ['gunk', 1]]
drops, [['gunk', 1]]
inv, [['wheel', 1], ['gunk', 2]] 
drops, [['gear', 1]]
inv, [['wheel', 1], ['gunk', 2], ['gear', 1]] 
drops, [['pinion', 1]]
inv, [['wheel', 1], ['pinion', 1], ['gunk', 2], ['gear', 1]] 
drops, [['gunk', 1]]
inv, [['wheel', 1], ['pinion', 1], ['gunk', 3], ['gear', 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You didn't state which Python version you're using. Based on your <code>print()</code> syntax, I assume it's Python 3.x, right? </p>
<p>If so, this might be an ideal use case for the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code> class</a> from the <code>collections</code> module. A <code>Counter</code> object is basically a dictionary that stores integer numbers as values. The advantage over a standard dictionary like the one suggested by @Alden is that you don't have to initialize a key the first time it is encountered:</p>
<pre class="lang-py prettyprint-override"><code>import random as rd
import collections

# instead of a dict, use a Counter:
inventory = collections.Counter()

items = ["gunk","gear","bolt","wheel","pinion"]
drops = []



while True:
    enter = input("")
    if enter == "":
        drops = []
        quantity = 1
        drops.append([rd.choice(items),quantity])
        print("drops",drops)
        for add_to, quantity in drops:
            # if no value exists in 'inventory' for the key 
            # 'add_to', the value is assumed to be 0.
            inventory[add_to] += quantity

    print("inv", [[x, inventory[x]] for x in inventory])
</code></pre>
</div>
<span class="comment-copy">Thanks, that worked. I found another workaround and that was just to have a separate inventory for names and for drops.</span>
