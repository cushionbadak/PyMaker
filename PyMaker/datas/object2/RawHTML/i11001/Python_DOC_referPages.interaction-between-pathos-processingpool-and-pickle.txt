<div class="post-text" itemprop="text">
<p>I have a list of calculations I need to run. I'm parallelizing them using </p>
<pre><code>from pathos.multiprocessing import ProcessingPool
pool = ProcessingPool(nodes=7)
values = pool.map(helperFunction, someArgs)
</code></pre>
<p><code>helperFunction</code> does create a class called <code>Parameters</code>, which is defined <em>in the same file</em> as </p>
<pre><code>import otherModule
class Parameters(otherModule.Parameters):
    ...
</code></pre>
<p>So far, so good. <code>helperFunction</code> will do some calculations, based on the <code>Parameters</code> object, change some of its attributes, and finally store them using <code>pickle</code>. Here's the relevant excerpt of the helper function (from a different module) that does the saving:</p>
<pre><code>import pickle
import hashlib
import os
class cacheHelper():

    def __init__(self, fileName, attr=[], folder='../cache/'):
        self.folder = folder

        if len(attr) &gt; 0:
            attr = self.attrToName(attr)
        else:
            attr = ''
        self.fileNameNaked = fileName
        self.fileName = fileName + attr

    def write(self, objects):
        with open(self.getFile(), 'wb') as output:
            for object in objects:
                pickle.dump(object, output, pickle.HIGHEST_PROTOCOL)
</code></pre>
<p>when it gets to <code>pickle.dump()</code>, it raises an Exception which is hard to debug because the debugger wont step into the worker that actually faced that exception. Therefore I created a breakpoint right before the dumping happened, and manually entered that command. Here is the output:</p>
<pre><code>&gt;&gt;&gt; pickle.dump(objects[0], output, pickle.HIGHEST_PROTOCOL)
Traceback (most recent call last):
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/site-packages/IPython/core/interactiveshell.py", line 2885, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-1-4d2cbb7c63d1&gt;", line 1, in &lt;module&gt;
    pickle.dump(objects[0], output, pickle.HIGHEST_PROTOCOL)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 1376, in dump
    Pickler(file, protocol).dump(obj)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 331, in save
    self.save_reduce(obj=obj, *rv)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 396, in save_reduce
    save(cls)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/site-packages/dill/dill.py", line 1203, in save_type
    StockPickler.save_global(pickler, obj)
  File "/usr/local/anaconda2/envs/myenv2/lib/python2.7/pickle.py", line 754, in save_global
    (obj, module, name))
PicklingError: Can't pickle &lt;class '__main__.Parameters'&gt;: it's not found as __main__.Parameters
</code></pre>
<p>The odd thing is that this doesn't happen when I don't parallelize, i.e. loop through <code>helperFunction</code> manually. I'm pretty sure that I'm opening the right <code>Parameters</code> (and not the parent class).</p>
<p>I know it is tough to debug things without a reproducible example, I don't expect any solutions on this part. Perhaps the more general question is:</p>
<h3>What does one have to pay attention to when parallelizing code that uses <code>pickle.dump()</code> via another module?</h3>
</div>
<div class="post-text" itemprop="text">
<p>Straight from the Python <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">docs</a>. </p>
<blockquote>
<p><strong>12.1.4. What can be pickled and unpickled? The following types can be pickled:</strong></p>
<ul>
<li>None, True, and False</li>
<li>integers, floating point numbers, complex</li>
<li>strings, bytes, bytearrays </li>
<li>tuples, lists, sets, and</li>
<li>dictionaries containing only picklable objects functions defined at the top level of a module (using def, not lambda) </li>
<li>built-in functions defined at the top level of a module </li>
<li>classes that are defined at the top level of a module </li>
<li>instances of such classes whose <code>__dict__</code> or the result of calling <code>__getstate__()</code> is picklable (see section Pickling Class Instances for details).</li>
</ul>
</blockquote>
<p>Everything else can't be pickled. In your case, though it's very hard to say given the excerpt of your code, I believe the problem is that the class <code>Parameters</code> is not defined at the top level of the module, hence its instances can't be pickled.  </p>
<p>The whole point of using <code>pathos.multiprocessing</code> (or its actively developing fork <code>multiprocess</code>) instead of the built-in <code>multiprocessing</code> is to avoid <code>pickle</code>, because there are far too many things the later can't dump. <code>pathos.multiprocessing</code> and <code>multiprocess</code> use <code>dill</code> instead of <code>pickle</code>. And if you want to debug a worker, you can use <a href="https://docs.python.org/2/library/trace.html" rel="nofollow">trace</a>.</p>
<p><strong>NOTE</strong> As Mike McKerns (the main contributor of <code>multiprocess</code>) rightfully noticed, there are cases that even <code>dill</code> can't handle, though it will be hard to formulate some universal rules on that matter. </p>
</div>
<span class="comment-copy">This answer is ok, but a little unclear.  I agree that if the OP uses <code>dill</code> instead of <code>pickle</code> for the <code>dump</code> inside the class, then there's a better chance of the object pickling, and also, yes <code>dill.detect.trace</code> can shed light on the object hierarchy that is being pickled.  There are some cases that even <code>dill</code> cannot handle yet, and sometimes things like instances of classes defined across non-installed multi-module user scripts can cause <code>dill</code> to barf.  I'd also suggest the OP try some of the other pickling variants by modifying <code>dill.settings</code>, or alternately try <code>cloudpickle</code>.</span>
