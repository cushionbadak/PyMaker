<div class="post-text" itemprop="text">
<p>I'm trying to print a multiline string in a "for" loop. The problem is I'd like to have the output printed all on the same lines. Example:</p>
<pre><code>for i in range(5):
print('''
{a}
|
{b}
'''.format(a=i,b=i+1))
</code></pre>
<p>The output looks like:</p>
<pre><code>0
|
1


1
|
2


2
|
3


3
|
4


4
|
5
</code></pre>
<p>Instead I'd like it to be:</p>
<pre><code>0 1 2 3 4
| | | | |
1 2 3 4 5
</code></pre>
<p>â€‹But I can't get how to do it. Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try with list concaternation:</p>
<pre><code>x = 5

print (" ".join(str(i) for i in range(x)))
print ('| '*x)
print (" ".join(str(i) for i in range(1,x+1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

myRange = range(5)

for i in myRange:
    sys.stdout.write(str(i))
print()
for i in myRange:
    sys.stdout.write('|')
print()
for i in myRange:
    sys.stdout.write(str(i+1))
print()
</code></pre>
<p>You need <code>sys.stdout.write</code> to write without <code>\n</code>. And this code will not work if you have range more than 9 (10+ has 2+ chars, so you need special rules for spaces before <code>|</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to throw in a fun (but bad, don't do this) answer:</p>
<pre><code>for i in range(5):
    print('{}\033[1B\033[1D|\033[1B\033[1D{}\033[2A'.format(i, i+1), end='')
print('\033[2B')
</code></pre>
<p>This uses terminal control codes to print column by column rather than row by row. Not useful here but something that's good to know about for when you want to do weirder terminal manipulation.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can only print one line at a time. So first you'll have to print the line with all the <code>a</code> elements, then the line with all the bars, and finally the line with all the <code>b</code> elements.</p>
<p>This can be made easier by first preparing every line before printing it:</p>
<pre><code>line_1 = ""
line_2 = ""
line_3 = ""
for i in range(5):
    line_1 += str(i)
    line_2 += "|"
    line_3 += str(i+1)
print(line_1)
print(line_2)
print(line_3)
</code></pre>
<p>There are of course many ways with the same basic idea. I picked the one that is (IMHO) easiest to understand for a beginner.</p>
<p>I didn't take spacing into account and once you do, it gets beneficial to use lists:</p>
<pre><code>line_1_elements = []
line_2_elements = []
line_3_elements = []
for i in range(5):
    line_1_elements.append(str(i))
    line_2_elements.append("|")
    line_3_elements.append(str(i+1))
print(" ".join(line_1_elements))
print(" ".join(line_2_elements))
print(" ".join(line_3_elements))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to Tim's solution, just using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> instead of the genrators, which I think is even more readable in this case:</p>
<pre><code>print(" ".join(map(str, range(i))))
print("| " * i)
print(" ".join(map(str, range(1, i+1))))
</code></pre>
<p>or alternatively, less readable and trickier, a heavily <code>zip</code>-based approach:</p>
<pre><code>def multi(obj):
    print("\n".join(" ".join(item) for item in obj))

r = range(6)
multi(zip(*("{}|{}".format(a, b) for a, b in zip(r, r[1:]))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What's your goal here? If, for example, you print up to n&gt;9, your formatting will be messed up because of double digit numbers.</p>
<p>Regardless, I'd do it like this. You only want to iterate once, and this is pretty flexible, so you can easily change your formatting.</p>
<pre><code>lines = ['', '', '']  
for i in range (5):  
    lines[0] += '%d ' % i  
    lines[1] += '| '  
    lines[2] += '%d ' % (i+1)  
for line in lines:  
    print line  
</code></pre>
</div>
<span class="comment-copy">+1 I feel like this is the most pythonic. I'd say to switch the list comprehensions to generator expressions though. str.join can take any iterable.</span>
<span class="comment-copy">@DavisYoshida I've not come across generator expressions before - is that just using <code>''.join(range(x))</code>?</span>
<span class="comment-copy">@Tim No. But you can just omit the <code>[]</code> brackets, and, thus, save some memory because you avoid building the intermediate list: <code>" ".join(str(i) for i in range(x))</code></span>
<span class="comment-copy">@schwobaseggl <code>str.join</code> reads the entire output of lazy generators into memory before building the output string. So it doesn't save you that much.</span>
<span class="comment-copy">Maybe this helps: <code>sys.stdout.write('|' + ' '*(len(str(i+1))-1))</code></span>
<span class="comment-copy">In Python 3 there is no reason to use <code>sys.stdout.write()</code> for this. Just do <code>print(i, end="")</code>.</span>
<span class="comment-copy">@ThijsvanDien on a sidenote, you can also import the print function in Py2 with <code>from __future__ import print_function</code></span>
