<div class="post-text" itemprop="text">
<p>Given an item, how can I count its occurrences in a list in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only want one item's count, use the <code>count</code> method:</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
</code></pre>
<p><strong>Don't</strong> use this if you want to count multiple items. Calling <code>count</code> in a loop requires a separate pass over the list for every <code>count</code> call, which can be catastrophic for performance. If you want to count all items, or even just multiple items, use <code>Counter</code>, as explained in the other answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using Python 2.7 or 3 and you want number of occurrences for each element:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']
&gt;&gt;&gt; Counter(z)
Counter({'blue': 3, 'red': 2, 'yellow': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Counting the occurrences of one item in a list</strong></p>
<p>For counting the occurrences of just one list item you can use <code>count()</code></p>
<pre><code>&gt;&gt;&gt; l = ["a","b","b"]
&gt;&gt;&gt; l.count("a")
1
&gt;&gt;&gt; l.count("b")
2
</code></pre>
<p>Counting the occurrences of <em>all</em> items in a list is also known as "tallying" a list, or creating a tally counter.</p>
<p><strong>Counting all items with count()</strong></p>
<p>To count the occurrences of items in <code>l</code> one can simply use a list comprehension and the <code>count()</code> method</p>
<pre><code>[[x,l.count(x)] for x in set(l)]
</code></pre>
<p>(or similarly with a dictionary <code>dict((x,l.count(x)) for x in set(l))</code>)</p>
<p>Example: </p>
<pre><code>&gt;&gt;&gt; l = ["a","b","b"]
&gt;&gt;&gt; [[x,l.count(x)] for x in set(l)]
[['a', 1], ['b', 2]]
&gt;&gt;&gt; dict((x,l.count(x)) for x in set(l))
{'a': 1, 'b': 2}
</code></pre>
<p><strong>Counting all items with Counter()</strong></p>
<p>Alternatively, there's the faster <code>Counter</code> class from the <code>collections</code> library</p>
<pre><code>Counter(l)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; l = ["a","b","b"]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(l)
Counter({'b': 2, 'a': 1})
</code></pre>
<p><strong>How much faster is Counter?</strong></p>
<p>I checked how much faster <code>Counter</code> is for tallying lists. I tried both methods out with a few values of <code>n</code> and it appears that <code>Counter</code> is faster by a constant factor of approximately 2.</p>
<p>Here is the script I used:</p>
<pre><code>from __future__ import print_function
import timeit

t1=timeit.Timer('Counter(l)', \
                'import random;import string;from collections import Counter;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
                )

t2=timeit.Timer('[[x,l.count(x)] for x in set(l)]',
                'import random;import string;n=1000;l=[random.choice(string.ascii_letters) for x in range(n)]'
                )

print("Counter(): ", t1.repeat(repeat=3,number=10000))
print("count():   ", t2.repeat(repeat=3,number=10000)
</code></pre>
<p>And the output:</p>
<pre><code>Counter():  [0.46062711701961234, 0.4022796869976446, 0.3974247490405105]
count():    [7.779430688009597, 7.962715800967999, 8.420845870045014]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to get the number of occurrences of each item, in a dictionary:</p>
<pre><code>dict((i, a.count(i)) for i in a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>list.count(x)</code> returns the number of times <code>x</code> appears in a list</p>
<p>see:
<a href="http://docs.python.org/tutorial/datastructures.html#more-on-lists">http://docs.python.org/tutorial/datastructures.html#more-on-lists</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>Given an item, how can I count its occurrences in a list in Python?</h1>
</blockquote>
<p>Here's an example list:</p>
<pre><code>&gt;&gt;&gt; l = list('aaaaabbbbcccdde')
&gt;&gt;&gt; l
['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'e']
</code></pre>
<h2><code>list.count</code></h2>
<p>There's the <code>list.count</code> method</p>
<pre><code>&gt;&gt;&gt; l.count('b')
4
</code></pre>
<p>This works fine for any list. Tuples have this method as well:</p>
<pre><code>&gt;&gt;&gt; t = tuple('aabbbffffff')
&gt;&gt;&gt; t
('a', 'a', 'b', 'b', 'b', 'f', 'f', 'f', 'f', 'f', 'f')
&gt;&gt;&gt; t.count('f')
6
</code></pre>
<h2><code>collections.Counter</code></h2>
<p>And then there's collections.Counter. You can dump any iterable into a Counter, not just a list, and the Counter will retain a data structure of the counts of the elements.</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(l)
&gt;&gt;&gt; c['b']
4
</code></pre>
<p>Counters are based on Python dictionaries, their keys are the elements, so the keys need to be hashable. They are basically like sets that allow redundant elements into them.</p>
<h3>Further usage of <code>collections.Counter</code></h3>
<p>You can add or subtract with iterables from your counter:</p>
<pre><code>&gt;&gt;&gt; c.update(list('bbb'))
&gt;&gt;&gt; c['b']
7
&gt;&gt;&gt; c.subtract(list('bbb'))
&gt;&gt;&gt; c['b']
4
</code></pre>
<p>And you can do multi-set operations with the counter as well:</p>
<pre><code>&gt;&gt;&gt; c2 = Counter(list('aabbxyz'))
&gt;&gt;&gt; c - c2                   # set difference
Counter({'a': 3, 'c': 3, 'b': 2, 'd': 2, 'e': 1})
&gt;&gt;&gt; c + c2                   # addition of all elements
Counter({'a': 7, 'b': 6, 'c': 3, 'd': 2, 'e': 1, 'y': 1, 'x': 1, 'z': 1})
&gt;&gt;&gt; c | c2                   # set union
Counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1, 'y': 1, 'x': 1, 'z': 1})
&gt;&gt;&gt; c &amp; c2                   # set intersection
Counter({'a': 2, 'b': 2})
</code></pre>
<h2>Why not pandas?</h2>
<p>Another answer suggests:</p>
<blockquote>
<p>Why not use pandas? </p>
</blockquote>
<p>Pandas is a common library, but it's not in the standard library. Adding it as a requirement is non-trivial.</p>
<p>There are builtin solutions for this use-case in the list object itself as well as in the standard library.</p>
<p>If your project does not already require pandas, it would be foolish to make it a requirement just for this functionality.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to <strong>count all values at once</strong> you can do it very fast using numpy arrays and <code>bincount</code> as follows</p>
<pre><code>import numpy as np
a = np.array([1, 2, 3, 4, 1, 4, 1])
np.bincount(a)
</code></pre>
<p>which gives</p>
<pre><code>&gt;&gt;&gt; array([0, 3, 1, 1, 2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've compared all suggested solutions (and a few new ones) with <a href="https://github.com/nschloe/perfplot" rel="noreferrer">perfplot</a> (a small project of mine).</p>
<h3>Counting <em>one</em> item</h3>
<p>For large enough arrays, it turns out that</p>
<pre><code>numpy.sum(numpy.array(a) == 1) 
</code></pre>
<p>is slightly faster than the other solutions.</p>
<p><a href="https://i.stack.imgur.com/vTw7i.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/vTw7i.png"/></a></p>
<h3>Counting <em>all</em> items</h3>
<p><a href="https://stackoverflow.com/a/43096495/353337">As established before</a>,</p>
<pre><code>numpy.bincount(a)
</code></pre>
<p>is what you want.</p>
<p><a href="https://i.stack.imgur.com/yE0Dy.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/yE0Dy.png"/></a></p>
<hr/>
<p>Code to reproduce the plots:</p>
<pre><code>from collections import Counter
from collections import defaultdict
import numpy
import operator
import pandas
import perfplot


def counter(a):
    return Counter(a)


def count(a):
    return dict((i, a.count(i)) for i in set(a))


def bincount(a):
    return numpy.bincount(a)


def pandas_value_counts(a):
    return pandas.Series(a).value_counts()


def occur_dict(a):
    d = {}
    for i in a:
        if i in d:
            d[i] = d[i]+1
        else:
            d[i] = 1
    return d


def count_unsorted_list_items(items):
    counts = defaultdict(int)
    for item in items:
        counts[item] += 1
    return dict(counts)


def operator_countof(a):
    return dict((i, operator.countOf(a, i)) for i in set(a))


perfplot.show(
    setup=lambda n: list(numpy.random.randint(0, 100, n)),
    n_range=[2**k for k in range(20)],
    kernels=[
        counter, count, bincount, pandas_value_counts, occur_dict,
        count_unsorted_list_items, operator_countof
        ],
    equality_check=None,
    logx=True,
    logy=True,
    )
</code></pre>
<p>2.</p>
<pre><code>from collections import Counter
from collections import defaultdict
import numpy
import operator
import pandas
import perfplot


def counter(a):
    return Counter(a)


def count(a):
    return dict((i, a.count(i)) for i in set(a))


def bincount(a):
    return numpy.bincount(a)


def pandas_value_counts(a):
    return pandas.Series(a).value_counts()


def occur_dict(a):
    d = {}
    for i in a:
        if i in d:
            d[i] = d[i]+1
        else:
            d[i] = 1
    return d


def count_unsorted_list_items(items):
    counts = defaultdict(int)
    for item in items:
        counts[item] += 1
    return dict(counts)


def operator_countof(a):
    return dict((i, operator.countOf(a, i)) for i in set(a))


perfplot.show(
    setup=lambda n: list(numpy.random.randint(0, 100, n)),
    n_range=[2**k for k in range(20)],
    kernels=[
        counter, count, bincount, pandas_value_counts, occur_dict,
        count_unsorted_list_items, operator_countof
        ],
    equality_check=None,
    logx=True,
    logy=True,
    )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use <code>pandas</code>, then <code>value_counts</code> is there for rescue. </p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; a = [1, 2, 3, 4, 1, 4, 1]
&gt;&gt;&gt; pd.Series(a).value_counts()
1    3
4    2
3    1
2    1
dtype: int64
</code></pre>
<p>It automatically sorts the result based on frequency as well. </p>
<p>If you want the result to be in a list of list, do as below</p>
<pre><code>&gt;&gt;&gt; pd.Series(a).value_counts().reset_index().values.tolist()
[[1, 3], [4, 2], [3, 1], [2, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not using Pandas?</p>
<pre><code>import pandas as pd

l = ['a', 'b', 'c', 'd', 'a', 'd', 'a']

# converting the list to a Series and counting the values
my_count = pd.Series(l).value_counts()
my_count
</code></pre>
<p>Output:</p>
<pre><code>a    3
d    2
b    1
c    1
dtype: int64
</code></pre>
<p>If you are looking for a count of a particular element, say <em>a</em>, try:</p>
<pre><code>my_count['a']
</code></pre>
<p>Output:</p>
<pre><code>3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code># Python &gt;= 2.6 (defaultdict) &amp;&amp; &lt; 2.7 (Counter, OrderedDict)
from collections import defaultdict
def count_unsorted_list_items(items):
    """
    :param items: iterable of hashable items to count
    :type items: iterable

    :returns: dict of counts like Py2.7 Counter
    :rtype: dict
    """
    counts = defaultdict(int)
    for item in items:
        counts[item] += 1
    return dict(counts)


# Python &gt;= 2.2 (generators)
def count_sorted_list_items(items):
    """
    :param items: sorted iterable of items to count
    :type items: sorted iterable

    :returns: generator of (item, count) tuples
    :rtype: generator
    """
    if not items:
        return
    elif len(items) == 1:
        yield (items[0], 1)
        return
    prev_item = items[0]
    count = 1
    for item in items[1:]:
        if prev_item == item:
            count += 1
        else:
            yield (prev_item, count)
            count = 1
            prev_item = item
    yield (item, count)
    return


import unittest
class TestListCounters(unittest.TestCase):
    def test_count_unsorted_list_items(self):
        D = (
            ([], []),
            ([2], [(2,1)]),
            ([2,2], [(2,2)]),
            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
            )
        for inp, exp_outp in D:
            counts = count_unsorted_list_items(inp) 
            print inp, exp_outp, counts
            self.assertEqual(counts, dict( exp_outp ))

        inp, exp_outp = UNSORTED_WIN = ([2,2,4,2], [(2,3), (4,1)])
        self.assertEqual(dict( exp_outp ), count_unsorted_list_items(inp) )


    def test_count_sorted_list_items(self):
        D = (
            ([], []),
            ([2], [(2,1)]),
            ([2,2], [(2,2)]),
            ([2,2,2,2,3,3,5,5], [(2,4), (3,2), (5,2)]),
            )
        for inp, exp_outp in D:
            counts = list( count_sorted_list_items(inp) )
            print inp, exp_outp, counts
            self.assertEqual(counts, exp_outp)

        inp, exp_outp = UNSORTED_FAIL = ([2,2,4,2], [(2,3), (4,1)])
        self.assertEqual(exp_outp, list( count_sorted_list_items(inp) ))
        # ... [(2,2), (4,1), (2,1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had this problem today and rolled my own solution before I thought to check SO.  This:</p>
<pre><code>dict((i,a.count(i)) for i in a)
</code></pre>
<p>is really, really slow for large lists.  My solution</p>
<pre><code>def occurDict(items):
    d = {}
    for i in items:
        if i in d:
            d[i] = d[i]+1
        else:
            d[i] = 1
return d
</code></pre>
<p>is actually a bit faster than the Counter solution, at least for Python 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<p>To count the number of diverse elements having a common type:</p>
<pre><code>li = ['A0','c5','A8','A2','A5','c2','A3','A9']

print sum(1 for el in li if el[0]=='A' and el[1] in '01234')
</code></pre>
<p>gives</p>
<p><code>3</code>  , not 6</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter
country=['Uruguay', 'Mexico', 'Uruguay', 'France', 'Mexico']
count_country = Counter(country)
output_list= [] 

for i in count_country:
    output_list.append([i,count_country[i]])
print output_list
</code></pre>
<p>Output list:</p>
<pre><code>[['Mexico', 2], ['France', 1], ['Uruguay', 2]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It was suggested to use numpy's <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.bincount.html" rel="nofollow noreferrer">bincount</a>, however it works only for 1d arrays with <em>non-negative integers</em>. Also, the resulting array might be confusing (it contains the occurrences of the integers from min to max of the original list, and sets to 0 the missing integers).</p>
<p>A better way to do it with numpy is to use the <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.unique.html" rel="nofollow noreferrer">unique</a> function with the attribute <code>return_counts</code> set to True. It returns a tuple with an array of the unique values and an array of the occurrences of each unique value.</p>
<pre><code># a = [1, 1, 0, 2, 1, 0, 3, 3]
a_uniq, counts = np.unique(a, return_counts=True)  # array([0, 1, 2, 3]), array([2, 3, 1, 2]
</code></pre>
<p>and then we can pair them as</p>
<pre><code>dict(zip(a_uniq, counts))  # {0: 2, 1: 3, 2: 1, 3: 2}
</code></pre>
<p>It also works with other data types and "2d lists", e.g.</p>
<pre><code>&gt;&gt;&gt; a = [['a', 'b', 'b', 'b'], ['a', 'c', 'c', 'a']]
&gt;&gt;&gt; dict(zip(*np.unique(a, return_counts=True)))
{'a': 3, 'b': 3, 'c': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Count of all elements with <code>itertools.groupby()</code></h2>
<p>Antoher possiblity for getting the count of all elements in the list could be by means of <code>itertools.groupby()</code>.</p>
<p><strong>With "duplicate" counts</strong></p>
<pre><code>from itertools import groupby

L = ['a', 'a', 'a', 't', 'q', 'a', 'd', 'a', 'd', 'c']  # Input list

counts = [(i, len(list(c))) for i,c in groupby(L)]      # Create value-count pairs as list of tuples 
print(counts)
</code></pre>
<p>Returns</p>
<pre><code>[('a', 3), ('t', 1), ('q', 1), ('a', 1), ('d', 1), ('a', 1), ('d', 1), ('c', 1)]
</code></pre>
<p>Notice how it combined the first three <code>a</code>'s as the first group, while other groups of <code>a</code> are present further down the list. This happens because the input list <code>L</code> was not sorted. This can be a benefit sometimes if the groups should in fact be separate.</p>
<p><strong>With unique counts</strong></p>
<p>If unique group counts are desired, just sort the input list:</p>
<pre><code>counts = [(i, len(list(c))) for i,c in groupby(sorted(L))]
print(counts)
</code></pre>
<p>Returns</p>
<pre><code>[('a', 5), ('c', 1), ('d', 2), ('q', 1), ('t', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/operator.html#operator.countOf" rel="nofollow"><code>countOf</code></a> method of a built-in module <a href="https://docs.python.org/3/library/operator.html" rel="nofollow"><code>operator</code></a>.</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.countOf([1, 2, 3, 4, 1, 4, 1], 1)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>May not be the most efficient, requires an extra pass to remove duplicates. </p>
<p>Functional implementation : </p>
<pre><code>arr = np.array(['a','a','b','b','b','c'])
print(set(map(lambda x  : (x , list(arr).count(x)) , arr)))
</code></pre>
<p>returns : </p>
<pre><code>{('c', 1), ('b', 3), ('a', 2)}
</code></pre>
<p>or return as <code>dict</code> :</p>
<pre><code>print(dict(map(lambda x  : (x , list(arr).count(x)) , arr)))
</code></pre>
<p>returns : </p>
<pre><code>{'b': 3, 'c': 1, 'a': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Below are the three solutions:</h2>
<p><strong>Fastest is using a for loop and storing it in a Dict.</strong></p>
<pre><code>import time
from collections import Counter


def countElement(a):
    g = {}
    for i in a:
        if i in g: 
            g[i] +=1
        else: 
            g[i] =1
    return g


z = [1,1,1,1,2,2,2,2,3,3,4,5,5,234,23,3,12,3,123,12,31,23,13,2,4,23,42,42,34,234,23,42,34,23,423,42,34,23,423,4,234,23,42,34,23,4,23,423,4,23,4]


#Solution 1 - Faster
st = time.monotonic()
for i in range(1000000):
    b = countElement(z)
et = time.monotonic()
print(b)
print('Simple for loop and storing it in dict - Duration: {}'.format(et - st))

#Solution 2 - Fast
st = time.monotonic()
for i in range(1000000):
    a = Counter(z)
et = time.monotonic()
print (a)
print('Using collections.Counter - Duration: {}'.format(et - st))

#Solution 3 - Slow
st = time.monotonic()
for i in range(1000000):
    g = dict([(i, z.count(i)) for i in set(z)])
et = time.monotonic()
print(g)
print('Using list comprehension - Duration: {}'.format(et - st))
</code></pre>
<p><strong>Result</strong></p>
<blockquote>
<pre><code>#Solution 1 - Faster
</code></pre>
</blockquote>
<pre><code>{1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 234: 3, 23: 10, 12: 2, 123: 1, 31: 1, 13: 1, 42: 5, 34: 4, 423: 3}
Simple for loop and storing it in dict - Duration: 12.032000000000153
</code></pre>
<blockquote>
<pre><code>#Solution 2 - Fast
</code></pre>
</blockquote>
<pre><code>Counter({23: 10, 4: 6, 2: 5, 42: 5, 1: 4, 3: 4, 34: 4, 234: 3, 423: 3, 5: 2, 12: 2, 123: 1, 31: 1, 13: 1})
Using collections.Counter - Duration: 15.889999999999418
</code></pre>
<blockquote>
<pre><code>#Solution 3 - Slow
</code></pre>
</blockquote>
<pre><code>{1: 4, 2: 5, 3: 4, 4: 6, 5: 2, 34: 4, 423: 3, 234: 3, 42: 5, 12: 2, 13: 1, 23: 10, 123: 1, 31: 1}
Using list comprehension - Duration: 33.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>sum([1 for elem in &lt;yourlist&gt; if elem==&lt;your_value&gt;])
</code></pre>
<p>This will return the amount of occurences of your_value</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want a number of occurrences for the particular element:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']
&gt;&gt;&gt; single_occurrences = Counter(z)
&gt;&gt;&gt; print(single_occurrences.get("blue"))
3
&gt;&gt;&gt; print(single_occurrences.values())
dict_values([3, 2, 1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def countfrequncyinarray(arr1):
    r=len(arr1)
    return {i:arr1.count(i) for i in range(1,r+1)}
arr1=[4,4,4,4]
a=countfrequncyinarray(arr1)
print(a)
</code></pre>
</div>
<span class="comment-copy"><code>mylist = [1,7,7,7,3,9,9,9,7,9,10,0]   print sorted(set([i for i in mylist if mylist.count(i)&gt;2]))</code></span>
<span class="comment-copy">I have found that when using this a lot (talking about millions of strings) that it is very slow because of its calls to <code>isinstance</code>. So if you are certain about the data that you're working with, it might be better to write a custom function without type and instance checking.</span>
<span class="comment-copy">@BramVanroy: What <code>isinstance</code> calls? Even with millions of strings, calling <code>Counter</code> only involves one <code>isinstance</code> call, to check whether its argument is a mapping. You most likely misjudged what's eating all your time.</span>
<span class="comment-copy">You misinterpreted what I meant: Counter checks the types of your data before it creates the Counter. This takes relatively much time and if you know the type of your data in advance. If you look at Counter's update method, you'll see it has to go through three if-statements before doing something. If you call update frequently, this adds up quickly. When you have control over your data and you <i>know</i> that the input will be indeed an iterable, then you can skip the first two checks. As I said, I only noticed this when working with millions of updates so it's an edge case.</span>
<span class="comment-copy">@BramVanroy: If you're performing millions of <i>updates</i> rather than just counting millions of strings, that's a different story. The optimization effort in <code>Counter</code> has gone into counting large iterables, rather than counting many iterables. Counting a million-string iterable will go faster with <code>Counter</code> than with a manual implementation. If you want to call <code>update</code> with many iterables, you may be able to speed things up by joining them into one iterable with <code>itertools.chain</code>.</span>
<span class="comment-copy"><code>Counter</code> is <i>way</i> faster for bigger lists. The list comprehension method is O(n^2), <code>Counter</code> should be O(n).</span>
<span class="comment-copy">Counter is not faster by a factor of 2, Counter is faster by a <i>factor of n</i> (O(n^2) vs O(n)).</span>
<span class="comment-copy"><code>count()</code> also works on strings, just saying</span>
<span class="comment-copy">I have found that when using this a lot (talking about millions of strings) that it is very slow because of its calls to <code>isinstance</code>. So if you are certain about the data that you're working with, it might be better to write a custom function without type and instance checking.</span>
<span class="comment-copy">this looks like one of the constructs I often come up with in the heat of the battle, but it will run through a len(a) times which means quadratic runtime complexity (as each run depends on len(a) again).</span>
<span class="comment-copy">would dict((i,a.count(i)) for i in set(a)) be more correct and faster?</span>
<span class="comment-copy">@hugo24: A bit, but it won't be asymptotically faster in the worst case; it will take <code>n * (number of different items)</code> operations, not counting the time it takes to build the set. Using <code>collections.Counter</code> is really much better.</span>
<span class="comment-copy">While "why not Pandas" is appropriate, it should probably be accompanied by "when to use NumPy", i.e. for large numeric arrays. The deciding factor isn't just project limitations, there are memory efficiencies with NumPy which become apparent with big data.</span>
<span class="comment-copy">numpy.bincount() will work only for lists with int items.</span>
<span class="comment-copy">This is a bit "enterprisey"...</span>
<span class="comment-copy">@Wes Turner Happily, you use Python. Imagine the same in Java or C....</span>
<span class="comment-copy">@plaes : How so? If by 'enterprisey', you mean "documented" in preparation for Py3k annotations, I agree.</span>
<span class="comment-copy">This is a great example, as I am developing mainly in 2.7, but have to have migration paths to 2.4.</span>
<span class="comment-copy">Counter sorts the entries while yours does not, hence the speed difference (True at the time of writing, not sure if it was when you wrote the answer. Still, it might be relevant for someone scrolling down.)</span>
<span class="comment-copy">Counter in Python 2 was a little on the slow side, yes. It uses C-optimised code to do the counting in Python 3 however, and now beats your loop with ease.</span>
<span class="comment-copy">Code only answers and not encouraged, and moreover the use of <code>Counter()</code> has been suggested many times in previous answers</span>
<span class="comment-copy">How is <code>countOf</code> is implemented? How does it compare to the more obvious <code>list.count</code> (which benefits from C implementation)? Are there any advantages?</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.</span>
