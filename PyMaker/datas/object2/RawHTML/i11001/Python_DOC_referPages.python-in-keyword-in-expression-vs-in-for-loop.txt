<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25573715/mysterious-for-loop-in-python">Mysterious for loop in python</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I understand what the <code>in</code> operator does in this code:</p>
<pre><code>some_list = [1, 2, 3, 4, 5]
print(2 in some_list)
</code></pre>
<p>I also do understand that <code>i</code> will take on each value of the list in this code:</p>
<pre><code>for i in [1, 2, 3, 4, 5]:
    print(i)
</code></pre>
<p>I am curious if the <code>in</code> operator used in the <code>for</code> loop is the same as the <code>in</code> operator used in the first code.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are the same concept but not the same operators.</p>
<p>In the <code>print(2 in some_list)</code> example, <code>in</code> is an operator that handles several different situations.  The <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="noreferrer">Python docs for the <code>in</code> operator</a> give the details: <code>x in y</code> calls <code>y.__contains__(x)</code> if <code>y</code> has a <code>__contains__</code> member function.  Otherwise, <code>x in y</code> tries iterating through <code>y.__iter__()</code> to find <code>x</code>, or calls <code>y.__getitem__(x)</code> if <code>__iter__</code> doesn't exist.  The complexity is to provide consistent membership testing for older code as well as newer code â€” <code>__contains__</code> is what you want if you're implementing your own classes.</p>
<p>In the <code>for</code> loop, <code>in</code> is just a marker that separates the loop-index variable from whatever you're looping over.  The <a href="https://docs.python.org/3/reference/compound_stmts.html#grammar-token-for_stmt" rel="noreferrer">Python docs for the <code>for</code> loop</a> discuss the semantics: whatever comes after <code>in</code> is evaluated at the beginning of a loop to provide an iterator.  The loop body then runs for each element of the iterator (barring <code>break</code> or other control-flow changes).  The <code>for</code> statement doesn't worry about <code>__contains__</code> or <code>__getitem__</code>.</p>
<p><strong>Edit</strong> @Kelvin makes a good point: you can change the behaviour of <code>in</code> with respect to your own new-style classes (<code>class foo(object)</code>):</p>
<ul>
<li>To change <code>x in y</code>, <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="noreferrer">define <code>y.__contains__()</code></a>.  </li>
<li>To change <code>for x in y</code>, <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="noreferrer">define <code>y.__iter__()</code></a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No, it is not the same. The <code>in</code> test like in your first example is a test for membership and returns a truth value. This <code>in</code> might be thought of as the sequential analogue of <code>==</code> or <code>is</code> (depending on how <code>__contains__</code> is implemented).</p>
<p>The <code>in</code> in your second example is part of the iteration grammar; it temporarily binds your selected variable <code>i</code> to each item in the iterable. This <code>in</code> might be thought of as the sequential analogue of <code>=</code>, the assignment operator.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, although they both use the same word they do different things. <code>in</code> is in both cases a syntax structure, e.g. it is not a name of a object and can't be changed. You can see <a href="https://docs.python.org/3.5/reference/expressions.html#comparisons" rel="nofollow">here</a> and <a href="https://docs.python.org/3.5/reference/compound_stmts.html#the-for-statement" rel="nofollow">here</a> the syntactic definition of each one. As you can see the names are hardcoded and have no relationship.</p>
</div>
<span class="comment-copy">Duplicate or related: <a href="http://stackoverflow.com/q/25573715/1639625">stackoverflow.com/q/25573715/1639625</a></span>
<span class="comment-copy"><code>in</code> and <code>for..in</code> are two different language constructs.</span>
<span class="comment-copy">upvote because you can change the behavior of the first kind of <code>in</code> by defining <code>__contains__</code></span>
<span class="comment-copy">The way it is worded implies to me that operator and keywords are seperate things although I would argue that it's nearly the same or that operators are also keyword.</span>
<span class="comment-copy">@syntonym fixed - thanks :)</span>
<span class="comment-copy">I found out that you could do <code>for...else</code>, so I felt that the <code>in</code> used in the <code>for</code> loop is essentially the same <code>in</code> as the one in the <code>print(2 in some_list)</code> example.</span>
<span class="comment-copy">@Novice that was a very understandable guess :) .  The difference is subtle but real.  For example, <code>__contains__</code> is not called by the <code>for</code> loop.  Anyway, happy coding!</span>
