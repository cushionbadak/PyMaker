<div class="post-text" itemprop="text">
<p>Say I have a Dict that looks like so...</p>
<pre><code>values = {
      'student': [{
                     'field': 'prefix', 
                     'description': 'First name'
                  }, 
                  {
                     'field': 'suffix', 
                     'description': 'Last name'
                  }, 
                  {
                     'field': 'student_email',
                     'description': 'Email address'
                  }],
      'classes':  [{
                     'field': 'course_code', 
                     'description': 'Course code'
                  }]

    }
</code></pre>
<p>I'm trying to get </p>
<pre><code>['prefix', 'suffix', 'student_email', 'course_code']
</code></pre>
<p>But I'm trying to do so without loops in loops.</p>
<p>So this is what I have: </p>
<pre><code>stored = [] # store the field values in a list
for value in values:
    stored.append(value['field'])
</code></pre>
<p>And it's throwing: </p>
<pre><code>TypeError: string indices must be integers
</code></pre>
<p>How can I make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>You get the error because the dictionary is one level deeper than your loop, and you can call <code>items()</code> on the dictionary to get the values part:</p>
<pre><code>[v1['field'] for k, v in values.items() for v1 in v]
# ['prefix', 'suffix', 'student_email', 'course_code']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just need to gather those strings in a list but you are not constrained to arrange them in a specific order, this should work:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; [x['field'] for x in chain(*values.values())]
['course_code', 'prefix', 'suffix', 'student_email']
</code></pre>
<p>The core element of the snippet above is the function <a href="https://docs.python.org/2.7/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also do it completely functionally combining, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">map</a>, <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow">itertools.chain.from_iterable</a> and <a href="https://docs.python.org/3/library/operator.html" rel="nofollow">operator.itemgetter</a>:</p>
<pre><code>from operator import itemgetter
from itertools import chain

print(list(map(itemgetter("field"), chain.from_iterable(values.values()))))
['course_code', 'prefix', 'suffix', 'student_email']
</code></pre>
</div>
<span class="comment-copy">May I ask why you need a dictionary containing "field" and "description"? This doesn't seem like an efficient way of using dictionaries.</span>
<span class="comment-copy">Doh! You're right. Thank you for your help :D</span>
<span class="comment-copy">I'm relatively new to python, but is it cool to use loops in loops like that?</span>
<span class="comment-copy">That is called <code>list comprehension</code> and it is very commonly used in python language. so I would say, feel safe to use it.</span>
<span class="comment-copy">@Modelesq It's "cool" when you have no other choice, which you don't because of the structure of your data. Both solutions so far are merely nested for-loops by another name.</span>
