<div class="post-text" itemprop="text">
<pre><code>import sys
import os.path

class Juvenile(object):
    def createJuv(self, pop, rate):
        self.pop = pop
        self.rate = rate
    def displayJuvpop(self):
        return self.pop
    def displayjuvRate(self):
        return self.rate

class Adult(object):
    def createAd(self, pop, rate, brate):
        self.pop = pop
        self.rate = rate
        self.brate = brate
    def displayAdpop(self):
        return self.pop
    def displayAdRate(self):
        return self.rate
    def displayBirthrate(self):
        return self.brate

class Senile(object):
    def createSe(self, pop, rate):
        self.pop = pop
        self.rate = rate
    def displaySepop(self):
        return self.pop
    def displaySerate(self):
        return self.rate


a = Juvenile()
b = Adult()
c = Senile()
`enter code here`pop_model = raw_input("Enter the number of generations: ")
`enter code here`pop_model = int(pop_model)
newjuv = 0
newsen = 0
newadu = 0

def menu():
    This = True
    while This == True:
        print("1) Enter Generation 0 values")
        print("2) Display Generation 0 values")
        print("3) Run the model")
        print("4) Export data")
        print("5) Quit")
        decision = raw_input("")
        if decision == "1":
            Gen0values()
        elif decision == "2":
            display()
        elif decision == "3":
            run()
        elif decision == "4":
            export()
        elif decision == "5":
            sys.exit()

def run():
    print("Juvenile" + " " + "Adult" + " " + "Senile")
    for i in range(0, pop_model):
        newjuv = b.displayAdpop()* b.displayBirthrate()
        newsen = b.displayAdpop() * b.displayAdRate()
        newadu = a.displayJuvpop() * a.displayjuvRate()

        print(i + 1,newjuv, newadu,newsen)

        a.displayJuvpop() = newjuv
        b.displayAdpop() = newsen
        c.displaySepop() = newadu


def Gen0values():
    a.createJuv(float(raw_input("Enter the juvenile population: ")), float(raw_input("Enter the Juvenile survival rate: ")))
    b.createAd(float(raw_input("Enter the Adult population: ")), float(raw_input("Enter the Adult survival rate: ")), float(raw_input("Enter the birth rate: ")))
    c.createSe(float(raw_input("Enter the Senile population: ")), float(raw_input("Enter the Senile survival rate: ")))


menu()
</code></pre>
<p>The error is coming up here:</p>
<pre><code>    def run():
    print("Juvenile" + " " + "Adult" + " " + "Senile")
    for i in range(0, pop_model):
        newjuv = b.displayAdpop()* b.displayBirthrate()
        newsen = b.displayAdpop() * b.displayAdRate()
        newadu = a.displayJuvpop() * a.displayjuvRate()

        print(i + 1,newjuv, newadu,newsen)

        a.displayJuvpop() = newjuv
        b.displayAdpop() = newsen
        c.displaySepop() = newadu
</code></pre>
<p>The error comes up with "Can't assign to function call, line 60". Due to stack overflow's code to text limit, I've removed parts of the program that are irrelevant, like exporting the data and displaying the values.</p>
<p>Ps: This isn't an indentation error, copying and pasting somewhat disrupted it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>display*pop()</code> functions return a <strong>value</strong>, not a variable. You can't assign to that function result. Just assign directly to the attributes:</p>
<pre><code>a.pop = newjuv
b.pop = newsen
c.pop = newadu
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">That's because you can't</a>. What are you trying to accomplish with <code>a.displayJuvpop() = newjuv</code> and the rest?</span>
<span class="comment-copy">Its a program that calculates the population of a species after multiple generations. The a.displayJuvpop() = newjuv sets the class value to newjuv, so it can calculate it again and display it in a table. for example, it would have the amount of generations on the left and the population on the right. Kind of hard to explain, but the calculations are right. Elaborate on why I can't please.</span>
<span class="comment-copy">See the linked documentation for valid syntax regarding assignment. In short, a function call is not valid left hand side.</span>
<span class="comment-copy">I'll take a look at it, but Martijn already got the solution. I'm fairly new to python, so sorry for being a noob.</span>
<span class="comment-copy">Please look into <code>@property</code> instead of writing explicit getter/setter/deleter functions.</span>
