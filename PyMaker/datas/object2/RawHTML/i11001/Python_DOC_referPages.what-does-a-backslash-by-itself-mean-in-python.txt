<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16060238/what-is-the-purpose-of-a-backslash-at-the-end-of-a-line">What is the purpose of a backslash at the end of a line?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>I found this code in the nltk documentation (<a href="http://www.nltk.org/_modules/nltk/sentiment/vader.html" rel="nofollow">http://www.nltk.org/_modules/nltk/sentiment/vader.html</a>)</p>
<pre><code>if (i &lt; len(words_and_emoticons) - 1 and item.lower() == "kind" and \
            words_and_emoticons[i+1].lower() == "of") or \
            item.lower() in BOOSTER_DICT:
            sentiments.append(valence)
            continue
</code></pre>
<p>Can someone explain what this if condition means?</p>
</div>
<div class="post-text" itemprop="text">
<p>A backslash at the end of a line tells Python to extend the current <em>logical</em> line over across to the next <em>physical</em> line. See the <a href="https://docs.python.org/3/reference/lexical_analysis.html#line-structure" rel="nofollow"><em>Line Structure</em> section</a> of the Python reference documentation:</p>
<blockquote>
<h2>2.1.5. Explicit line joining</h2>
<p>Two or more physical lines may be joined into logical lines using
  backslash characters (<code>\</code>), as follows: when a physical line ends in a
  backslash that is not part of a string literal or comment, it is
  joined with the following forming a single logical line, deleting the
  backslash and the following end-of-line character. For example:</p>
<pre><code>if 1900 &lt; year &lt; 2100 and 1 &lt;= month &lt;= 12 \
   and 1 &lt;= day &lt;= 31 and 0 &lt;= hour &lt; 24 \
   and 0 &lt;= minute &lt; 60 and 0 &lt;= second &lt; 60:   # Looks like a valid date
        return 1
</code></pre>
</blockquote>
<p>There is also the option to use <em>implicit</em> line joining, by using parentheses or brackets or curly braces; Python will not end the logical line until it finds the matching closing bracket or brace for each opening bracket or brace. This is the recommended code style, the sample you found should really be written as:</p>
<pre><code>if ((i &lt; len(words_and_emoticons) - 1 and item.lower() == "kind" and
        words_and_emoticons[i+1].lower() == "of") or
        item.lower() in BOOSTER_DICT):
    sentiments.append(valence)
    continue
</code></pre>
<p>See the <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow">Python Style Guide (PEP 8)</a> (but note the exception; some Python statements don't support <code>(...)</code> parenthesising so backslashes are acceptable there).</p>
<p>Note that Python is not the only programming language using backslashes for line continuation; bash, C and C++ preprocessor syntax, Falcon, Mathematica and Ruby also use this syntax to extend lines; see <a href="https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)#Line_continuation" rel="nofollow">Wikipedia</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is used as a line break so the <code>if</code> condition can be written in the next line.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case, the <code>\</code> is escaping the following new line character. Because Python cares about whitespace, this code is using this to allow code to be continued on a new line.</p>
</div>
<div class="post-text" itemprop="text">
<p>It escapes end of the line - for readability purpose. (extends line to the next one, as the \n character is not visible but it has syntactical meaning.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The backslash is used to indicate a line break in this <code>if</code> condition. The <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a> says:</p>
<blockquote>
<p>Backslashes may still be appropriate at times. For example, long, multiple with -statements cannot use implicit continuation, so backslashes are acceptable: </p>
<pre><code>with open('/path/to/some/file/you/want/to/read') as file_1, \
     open('/path/to/some/file/being/written', 'w') as file_2:
    file_2.write(file_1.read())
</code></pre>
</blockquote>
<p>Apart from these conditions linebreaks are usually indicated by proper indentation.</p>
<h3>Edit:</h3>
<p>Apparently the <code>with</code> statement is an exception that does not allow for line breaks just by indentation and therefore uses the backslash, while <code>if</code> should not be used with <code>\</code>.</p>
</div>
<span class="comment-copy">Might also be worth mentioning it's not Python-specific. From <a href="https://en.wikipedia.org/wiki/Backslash#Usage" rel="nofollow noreferrer">WP</a>: Outside strings, the only common use in languages is at the end of a line to indicate that the trailing newline character should be ignored, so that the following line is treated as if it were part of the current line. In this context it may be called a "continuation".</span>
<span class="comment-copy">@Aya: I found a better WP reference.</span>
<span class="comment-copy">rats, too slow :-(</span>
<span class="comment-copy">However, this is used in an <code>if</code> statetement, where you <i>can</i> use implicit continuation by putting <code>(...)</code> parentheses around the tests.</span>
<span class="comment-copy">Exactly, you <i>can</i> ;) But I think the same applies for <code>if</code> and <code>for</code>, even when you don't <i>have to</i> use the backslash.</span>
<span class="comment-copy">PEP8 explicitly frowns upon using <code>\</code> when implicit continuation is available; the <code>with</code> statement is an exception here. I'd have liked to the <i>documentation</i> about explicitly continuing lines rather than PEP 8 myself.</span>
<span class="comment-copy">Ah okay, I misinterpreted that completely then. Thanks!</span>
