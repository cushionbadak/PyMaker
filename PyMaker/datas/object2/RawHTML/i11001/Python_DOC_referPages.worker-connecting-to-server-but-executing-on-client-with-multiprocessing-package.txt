<div class="post-text" itemprop="text">
<p>First post here, hello everyone.</p>
<p>I have a problem with the multiprocessing package with python 2.7.
I wish to have some processes run in parallel on a server; they do connect but they are executed locally instead.</p>
<p>This is the code I use on the server (Ubuntu 14.04):</p>
<pre><code>from multiprocessing import Process
from multiprocessing.managers import BaseManager
from multiprocessing import cpu_count

class MyManager(BaseManager):
    pass

def server():
    mgr = MyManager(address=("", 2288), authkey="12345")
    mgr.get_server().serve_forever()

if __name__ == "__main__":
    print "number of cpus/cores:", cpu_count()

    server = Process(target=server)

    server.start()
    print "server started"

    server.join()
    server.terminate()
</code></pre>
<p>while this is the code that runs on the client (Mac OS 10.11):</p>
<pre><code>from multiprocessing import Manager
from multiprocessing import Process
from multiprocessing import current_process
from multiprocessing.managers import BaseManager
from math import sqrt

class MyManager(BaseManager):
    pass

def worker(address, port, authkey):
    mgr = MyManager(address=(address, port), authkey=authkey)
    try:
        mgr.connect()
        print "- {} connected to {}:{}".format(current_process().name, address, port)
    except:
        print "- {} could not connect to server ({}:{})".format(current_process().name, address, port)
    current_process().authkey = authkey
    for k in range(1000000000):
         sqrt(k * k)

if __name__ == "__main__":
    # create processes
    p = [Process(target=worker, args=("xx.xx.xx.xx", 2288, "12345")) for _ in range(4)]

    # start processes
    for each in p:
        each.start()
    # join the processes
    for each in p:
        each.join()
</code></pre>
<p>The for loop</p>
<pre><code>for k in range(1000000000):
    sqrt(k * k)
</code></pre>
<p>that's inside the worker function is just to let the workers process a lot, so I can monitor their activity into Activity Monitor or with top.
The problem is that the processes connect (as a matter of fact if I put a wrong address they do not) but they are executed on the local machine, as I see the server CPUs staying idle while the local CPUs going all towards 100%.
Am I getting something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are starting your <code>Process</code> locally on your client. <code>p</code> and <code>for each in p: each.start()</code> is executed on your client, where it is run and starts the workers.</p>
<p>While each <code>Process</code> "connects" to the <code>Manager</code> via <code>mgr.connect()</code> it never interacts with it. The local <code>Process</code>es don't magically transfer to your server just because you opened a connection. Furthermore, a <code>Manager</code> isn't meant to run workers, it is <a href="https://docs.python.org/2.7/library/multiprocessing.html#multiprocessing-managers" rel="nofollow">meant to share data</a>.</p>
<p>You'd have to start workers <em>on the server</em>, then send work to there.</p>
</div>
<span class="comment-copy">You are starting your workers locally, what did you expect? oO</span>
<span class="comment-copy">As an addition, to communicate you could use multiprocessing Clients and Listeners <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#module-multiprocessing.connection" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
