<div class="post-text" itemprop="text">
<p>I'm learning python and have a question about the code presented below:</p>
<pre><code>nums = { 1, 2, 3, 5, 6 } 
nums = { 0, 1, 2, 3 } &amp; nums           # nums = { 1, 2, 3 }
nums = filter(lambda x: x &gt; 1, nums)   # nums = { 2, 3 }
print(len(list(nums)))
</code></pre>
<p>The result of this code must be <code>2</code>. But why? I don't understand this code. Could you explain the last line? I don't understand what <code>list(nums)</code> does.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>nums = { 1, 2, 3, 4, 5, 6 }
</code></pre>
<p>The set containing 1 - 6.</p>
<pre><code>nums = { 0, 1, 2, 3 } &amp; nums
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow">intersection</a> of the set containing 0 - 3 and the previous set, thus { 1, 2, 3 } (the elements common to both).</p>
<pre><code>nums = filter(lambda x: x &gt; 1, nums)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow">filter</a> gets rid of the elements that don't return true when passed through the callable given as its first argument. Thus here it gets rid of the entry <code>1</code>, leaving {2, 3}.</p>
<p>Now you see why the length is 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Questions like this is where the <a href="https://docs.python.org/3/tutorial/interpreter.html" rel="nofollow">REPL</a> can come in handy:</p>
<pre><code>&gt;&gt;&gt; nums = { 1, 2, 3, 5, 6 }
&gt;&gt;&gt; nums
{1, 2, 3, 5, 6}
&gt;&gt;&gt; nums = { 0, 1, 2, 3 } &amp; nums
&gt;&gt;&gt; nums
{1, 2, 3}
&gt;&gt;&gt; nums = filter(lambda x: x &gt; 1, nums)
&gt;&gt;&gt; nums
&lt;filter object at 0x101f465c0&gt;
&gt;&gt;&gt; list(nums)
[2, 3]
</code></pre>
<p>From this we can see that <code>&amp;</code> will join two sets and take the <a href="https://en.wikipedia.org/wiki/Logical_conjunction" rel="nofollow">logical-AND</a> commonality of the two (also called the intersection, or logical conjunction). <a href="http://www.bogotobogo.com/python/python_fncs_map_filter_reduce.php" rel="nofollow"><code>filter</code></a> takes a function (defined by <a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk" rel="nofollow"><code>lambda</code></a>) and walks through a collection, eliminating anything that doesn't return <code>True</code> from the filtering function.</p>
<p>To understand how <code>lambda</code> works, we can also use the interpreter:</p>
<pre><code>&gt;&gt;&gt; f = (lambda x: x &gt; 1)
&gt;&gt;&gt; f(0)
False
&gt;&gt;&gt; f(1)
False
&gt;&gt;&gt; f(2)
True
</code></pre>
<p>In this case we assign a function to <code>f</code>, one that takes a value and returns a boolean indicating whether it is greater than or less than one. Functional programming patterns, such as <code>filter</code> utilize functions in this form a great deal: lambda is how you define such a function, and it can be used in an in-line form to create an 'anonymous' function (that is, a function that is not assigned a name).</p>
<p>One final note, because it will not be clear from your provided sequence:</p>
<pre><code>&gt;&gt;&gt; nums = { 1, 2, 3, 5, 6 }
&gt;&gt;&gt; nums = { 0, 1, 2, 3 } &amp; nums
&gt;&gt;&gt; nums = filter(lambda x: x &gt; 1, nums)  # This is NOT a collection
&gt;&gt;&gt; len(list(nums))  # This returns the expected result
2
&gt;&gt;&gt; len(list(nums))  # !!! What happened?
0
</code></pre>
<p>Note that once you apply <code>list</code> to the <code>filter object</code> provided by calling the <code>filter</code> function, that object will be emptied. Calling <code>list</code> on that object again will result in nothing being returned.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>&amp;</code> gives the intersection of two sets. That is, </p>
<pre><code>{ 1, 2, 3, 4, 5, 6 } &amp; { 0, 1, 2, 3 } == { 1, 2, 3 }
</code></pre>
<p><code>lambda</code> is an anonymous function. It is similar to the code</p>
<pre><code>def func(x):
    return x &gt; 1

filter(func, nums)
</code></pre>
<p><code>filter</code> iterates through nums and calls the <code>lambda</code> function on each one. If the <code>lambda</code> function returns <code>True</code> then the element is included in the returned set. </p>
<p><code>list()</code> converts an iterable to a list type.</p>
<p><code>len()</code> returns the number of elements in the list.</p>
</div>
<span class="comment-copy">Explain 4 lines of code is "too broad"?</span>
<span class="comment-copy">When it shows a near complete lack of Python knowledge, yes.</span>
<span class="comment-copy">I would assert that not knowing <code>&amp;</code>, <code>filter</code> and <code>lambda</code> hardly marks someone as having a 'near complete lack of python knowledge'. None of those are 'basic' concepts: they are intermediate at best.</span>
<span class="comment-copy">@NathanielFord fortunately, we now have this resource called "Google". <a href="https://www.google.com/#q=python+filter" rel="nofollow noreferrer"><code>python filter</code></a> and <a href="https://www.google.com/#q=python+lambda" rel="nofollow noreferrer"><code>python lambda</code></a> both return excellent results. People need to learn to do their own research before asking questions like this.</span>
<span class="comment-copy">That is not a refutation of my assertion, nor good reasoning for a "too broad" close vote. It is excellent reasoning for a down vote or a close-as-duplicate if you find an appropriate one. I, however, do not think that being overly harsh at the OP services the community.</span>
<span class="comment-copy">@Two-BitAlchemist Please see the provided link.</span>
<span class="comment-copy">It's not a mistake that the symbol used is an <code>&amp;</code> symbol, though: this represents the mathematical, logical conjunction: the logical AND. In electronics this is an 'AND-gate'. Not sure why the symmetric difference operator is relevant?</span>
<span class="comment-copy">There is a difference between a <code>^</code> and <code>∧</code>, unfortunately: just like there is a difference between an exponentiation symbol and the logical connective <code>∧</code>. The 'carrot', <code>^</code>, is the common exponentiation symbol, or the symmetric difference symbol.</span>
<span class="comment-copy">Apologies for the spelling mistake. I'm not certain why we are talking about carets? My point was that carets look similar to but are clearly distinct from mathematical notions for the logical conjunction, but the more commonly seen notation (in programming) for that concept is the <code>&amp;</code>. Thanks for the upvote!</span>
