<div class="post-text" itemprop="text">
<p>I have a row in a Pandas Data frame that contains the sales rate of my items.</p>
<p>A look at my data:</p>
<pre><code>block_combine
Out[78]: 
END_MONTH         1    2    3   4    5
Total Listings  168  219  185  89  112
Total Sales      85   85   84  41   46
</code></pre>
<p>I can easily calculate the sales % by doing the following:</p>
<pre><code>block_combine.loc["Total Sales Rate"] = block_combine.ix[1,:] / block_combine.ix[0,:]
block_combine

Out[79]: 
END_MONTH                  1           2           3          4           5
Total Listings    168.000000  219.000000  185.000000  89.000000  112.000000
Total Sales        85.000000   85.000000   84.000000  41.000000   46.000000
Total Sales Rate    0.505952    0.388128    0.454054   0.460674    0.410714
</code></pre>
<p>Now what I am attempting to do is to change the "Total Sales Rate" row to <strong>whole number percentages</strong>. I am able to do this if it was a column however I run into issues when I work with rows.</p>
<p>Here is what I attempted:</p>
<pre><code>block_combine.loc["Total Sales Rate"] = pd.Series(["{0:.0f}%".format(val * 100) for val in block_combine.loc["Total Sales Rate"]])


block_combine

Out[81]: In [82]: 
END_MONTH           1    2    3    4      5
Total Listings    168  219  185   89  112.0
Total Sales        85   85   84   41   46.0
Total Sales Rate  39%  45%  46%  41%    NaN
</code></pre>
<p>The calculations are off/ shifted to the left. The sales rate given for month 1 is actually the sales rate for month 2 (39%)!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>.apply('{:.0%}'.format)</code>:</p>
<pre><code>import pandas as pd

df = pd.DataFrame([(168,219,185,89,112), (85,85,84,41,46)], 
                  index=['Total Listings', 'Total Sales'], columns=list(range(1,6)))
df.loc['Total Sales Rate'] = ((df.loc['Total Sales']/df.loc['Total Listings'])
                              .apply('{:.0%}'.format))

print(df)
</code></pre>
<p>yields</p>
<pre><code>                    1    2    3    4    5
Total Listings    168  219  185   89  112
Total Sales        85   85   84   41   46
Total Sales Rate  51%  39%  45%  46%  41%
</code></pre>
<p>Notice that the Python <code>str.format</code> method has a <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow">built-in <code>%</code> format</a> which multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign.</p>
<hr/>
<p>It is important to be aware that Pandas DataFrame columns must have a single dtype. Changing one value to a string forces the entire column to change
its dtype to the generic <code>object</code> dtype. Thus the <code>int64</code>s or <code>int32</code>s in the
<code>Total Listings</code> and <code>Total Sales</code> rows get recast as plain Python <code>ints</code>.  This
prevents Pandas from taking advantage of fast NumPy-based numerical operations
which only work on native NumPy dtypes (like <code>int64</code> or <code>float64</code> -- not
<code>object</code>).</p>
<p>So while the above code achieves the desired look, it isn't advisable to use
this if further computation is to be done on the DataFrame. Instead, only convert
to strings at the end if you need to do so for presentation.</p>
<p>Or, alternatively, transpose your DataFrame so the <code>Total Sales Rate</code> strings are in a column, not a row:</p>
<pre><code>import pandas as pd

df = pd.DataFrame([(168,219,185,89,112), (85,85,84,41,46)], 
                  index=['Total Listings', 'Total Sales'], columns=list(range(1,6))).T

df['Total Sales Rate'] = ((df['Total Sales']/df['Total Listings'])
                              .apply('{:.0%}'.format))

print(df)
</code></pre>
<p>yields</p>
<pre><code>   Total Listings  Total Sales Total Sales Rate
1             168           85              51%
2             219           85              39%
3             185           84              45%
4              89           41              46%
5             112           46              41%
</code></pre>
<hr/>
<p>The reason why </p>
<pre><code>block_combine.loc["Total Sales Rate"] = pd.Series(["{0:.0f}%".format(val * 100) for val in block_combine.loc["Total Sales Rate"]])
</code></pre>
<p>shifted the values to the left by one column is because the new Series has an index which starts at 0 not 1. Pandas <em>aligns</em> the index of the Series on the right with the index of <code>block_combine.loc["Total Sales Rate"]</code> before assigning values to <code>block_combine.loc["Total Sales Rate"]</code>. </p>
<p>Thus, you could alternatively have used:</p>
<pre><code>block_combine.loc["Total Sales Rate"] = pd.Series(["{0:.0f}%".format(val * 100) 
    for val in block_combine.loc["Total Sales Rate"]], 
    index=block_combine.columns)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df = pd.DataFrame({
        1: [168,85], 
        2: [219,85],  
        3: [185,84],  
        4: [89,41], 
        5: [112,46]
    }, index=['Total Listings', 'Total Sales'])

total_sales_rate = pd.Series(df.loc['Total Sales'] / df.loc['Total Listings'] * 100, name='Total Sales Rate').round()
df = df.append(total_sales_rate)
</code></pre>
<p>Result...</p>
<pre><code>                    1    2    3   4    5
Total Listings    168  219  185  89  112
Total Sales        85   85   84  41   46
Total Sales Rate   51   39   45  46   41
</code></pre>
</div>
