<div class="post-text" itemprop="text">
<p>I came across the following code while reading about metaclasses <a href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Metaprogramming.html#using-init-vs-new-in-metaclasses" rel="nofollow noreferrer">here</a>, although I don't know if this distinction is specific to metaclasses and I suspect that it is not:</p>
<pre><code>class MetaBase(type):
    def __new__(mcl, name, bases, nmspc):
        print('MetaBase.__new__\n')
        return super(MetaBase, mcl).__new__(mcl, name, bases, nmspc)

    def __init__(cls, name, bases, nmspc):
        print('MetaBase.__init__\n')
        super(MetaBase, cls).__init__(name, bases, nmspc)
</code></pre>
<p>Note that the <code>super().__init__()</code> call omits the first argument. I'm guessing it's passed implicitly, as it's calling a method on whatever class is returned by <code>super()</code>. That's the way I've usually seen such calls constructed, although they typically involve <code>self</code> on a normal class rather than cls/mcl on a metaclass.</p>
<p>The <code>super().__new__()</code> call passes <code>mcl</code> explicitly, though. I don't understand why. The signatures look the same to me.</p>
<p>I am confused. Is <code>super()</code> returning something different in each case, perhaps? What's happening here, and should I expect to be bitten by this when overriding other magic methods?</p>
<p>[edit: Someone suggested that this is a duplicate of <a href="https://stackoverflow.com/questions/674304">this question</a>, which describes their different functionality. While the same difference is exhibited in some of the examples there, I see nothing stating why it exists or whether it's unique to <code>__new__</code>.]</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The super().__new__() call passes mcl explicitly, though. I don't
  understand why. The signatures look the same to me.</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a> method is an oddity in that it is a staticmethod but has been special-cased so that you don't have to declare it as such.  Being a staticmethod means that you have to explicitly pass in any variables that are needed (in this case, the metaclass).</p>
<p>In contrast, <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__init__" rel="nofollow noreferrer"><code>__init__</code></a> is like any other regular method.  When you look it up from an instance, the instance is automatically passed in as the first argument.  This works whether you call the parent directly with <code>cls.__init__(name, bases, nmspc)</code> or by using <em>super()</em> with <code>super(MetaBase, cls).__init__(name, bases, nmspc)</code>.  Both of those pass in <em>cls</em> as the first argument.  That is how bound methods work for normal classes and for metaclasses. It doesn't matter whether <em>super()</em> is used or not.</p>
<p>So, the one odd case is <code>__new__</code> because it is a <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">staticmethod</a> which by definition doesn't have automatic prepending behavior.</p>
<blockquote>
<p>should I expect to be bitten by this when overriding other magic
  methods?</p>
</blockquote>
<p>Staticmethods are somewhat rare.  And among magic methods, <code>__new__</code> is the only one I can think of.  So, you should be safe :-)</p>
</div>
<span class="comment-copy"><code>__new__</code> is a static method. <code>__init__</code> is an instance method.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init">Python's use of __new__ and __init__?</a></span>
<span class="comment-copy">About the edit, first sentence of official documentation for <code>__new__</code>: “<a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer">__new__() is a static method (special-cased so you need not declare it as such)</a>”</span>
<span class="comment-copy">Okay, that makes sense. Explain that in an answer and I'll accept it. I would also like to know if there are any other magically static methods to worry about, though -- as far as I can tell there are not, but apparently I can't trust that something that is not marked as static is in fact non-static.</span>
