<div class="post-text" itemprop="text">
<p>I have built a few off-the-shelf classifiers from <code>sklearn</code> and there are some expected scenarios where I know the classifier is bound to perform badly and not predict anything correctly. The sklearn.svm package runs without an error but raises the following warning.</p>
<pre><code>~/anaconda/lib/python3.5/site-packages/sklearn/metrics/classification.py:1074: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 due to no predicted samples.
  'precision', 'predicted', average, warn_for)
</code></pre>
<p>I wish to suppress this warning and instead replace with a message to <code>stdout</code>, say for instance, <code>"poor classifier performance"</code>.</p>
<p>Is there any way to suppress <code>warnings</code> in general?</p>
</div>
<div class="post-text" itemprop="text">
<p>Suppressing all warnings is easy with <code>-Wignore</code> (see <a href="https://docs.python.org/3/using/cmdline.html?highlight=isolated#cmdoption-W" rel="nofollow">warning flag docs</a>)</p>
<p>The <code>warnings</code> module can do some finer-tuning with filters (ignore just your warning type).</p>
<p>Capturing <em>just</em> your warning (assuming there isn't some API in the module to tweak it) and doing something special could be done using the <a href="https://docs.python.org/3/library/warnings.html#warnings.catch_warnings" rel="nofollow"><code>warnings.catch_warnings</code> context manager</a> and code adapted from <a href="https://docs.python.org/3/library/warnings.html#testing-warnings" rel="nofollow">"Testing Warnings"</a>:</p>
<pre><code>import warnings

class MyWarning(Warning):
    pass

def something():
    warnings.warn("magic warning", MyWarning)

with warnings.catch_warnings(record=True) as w:
    # Trigger a warning.
    something()
    # Verify some things
    if ((len(w) == 1) 
            and issubclass(w[0].category, MyWarning) 
            and "magic" in str(w[-1].message)):
        print('something magical')
</code></pre>
</div>
<span class="comment-copy">That worked. I decided to capture all the warning that the snippet could generate and report with a generic message.   <code>with warnings.catch_warnings(record=True) as w:             self.clfObj.fit(self.train_x,self.train_y)             self.preds = list(self.clfObj.predict(self.test_x))             self.predProbabs = self.clfObj.predict_proba(self.test_x)[:,1]             self.evalClassifierPerf()             if len(w) &gt;= 1:                 print("Poor Classifer detected")</code></span>
