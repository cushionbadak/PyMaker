<div class="post-text" itemprop="text">
<p>I have a list of lists in python of the form</p>
<pre><code>A=[[1,2,3,4],
   [5,6,7,8],
   [9,10,11,12]]
</code></pre>
<p>I need to get a fast way to get the row index of an element in that structure.</p>
<pre><code>method(2) = 0

method(8) = 1

method(12) = 2
</code></pre>
<p>and so on. As always, the fastest the method the better, as my actual list of lists is quite large.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this state, <em>the data structure (list of lists) is not quite convenient and efficient for the queries you want to make on it</em>. Restructure it to have it in a form:</p>
<pre><code>item -&gt; list of sublist indexes  # assuming items can be present in multiple sublists
</code></pre>
<p>This way the lookups would be instant, by key - <code>O(1)</code>. Let's use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict(list)</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt;
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for index, sublist in enumerate(A):
...     for item in sublist:
...         d[item].append(index)
... 
&gt;&gt;&gt; d[2]
[0]
&gt;&gt;&gt; d[8]
[1]
&gt;&gt;&gt; d[12]
[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is very simple using <code>next()</code> with a generator expression:</p>
<pre><code>def method(lists, value):
    return next(i for i, v in enumerate(lists) if value in v)
</code></pre>
<p>The problem with that is that it will have an error if <code>value</code> does not occur.  With a slightly longer function call, you can make a default of -1:</p>
<pre><code>def method(lists, value):
    return next((i for i,v in enumerate(lists) if value in v), -1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way using numpy</p>
<pre><code>import numpy

A = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]

my_array = numpy.array(A)

numpy.where(my_array==2) ## will return both the list and the index within the list
numpy.where(my_array==12)

## As a follow up if we want only the index we can always do :
numpy.where(my_array==12)[0][0] # will return 2 , index of list
numpy.where(my_array==12)[1][0] # will return 3 , index within list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>find operation in list is linear. Following is simple code in python to find an element in list of lists.</p>
<pre><code>A=[[1,2,3,4],
   [5,6,7,8],
   [9,10,11,12]]

def method(value):
    for idx, list in enumerate(A):
        if value in list:
            return idx
    return -1

print (method(12))
</code></pre>
</div>
<span class="comment-copy">thanks everyone, ended up using dictionaries to reach my end goal</span>
