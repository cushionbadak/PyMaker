<div class="post-text" itemprop="text">
<p>I am working on a little Python method that needs to read a dictionary from another file that will represent the key, and values.</p>
<p>But it seems I am running into a problem with the representation of the number values that I am sending over. For example, some keys in my dictionary would look like this :</p>
<pre><code>id_dict = {
    'val_a': 0x0000,
    'val_b': 0x1000
}
</code></pre>
<p>But I noticed that when I attempt to iterate through the dictionary, the hexadecimal is replaced with the decimal value. Even in the original <code>id_dict.py</code>, where the dictionary is located, the numbers are converted from hex automatically.</p>
<p>This is my result of trying to iterate through it:</p>
<pre><code>for k,v in id_dict.items():
    print(k,v)

#Results
val_a 0
val_b 4096
</code></pre>
<p>Can someone tell me why the values are being represented in decimal form and not in the hexadecimal form that they are originally stored in? Thanks in advance!</p>
<p>And if there is a way to stop the automatic conversion, that would be great to understand as well!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Can someone tell me why the values are being represented in decimal form and not in the hexadecimal form that they are originally stored in?</p>
</blockquote>
<p>They were not originally stored in hexadecimal. Python does not track any information about base; whether you type <code>0x1000</code> or <code>4096</code> in your source code, it's the same number, and Python stores it the same way.</p>
<p>When Python prints a number, it has to choose a base to display it in, and the default is always decimal. If you want to print it differently, you will need to specify a different way to perform string conversion, such as the <code>hex</code> function:</p>
<pre><code>&gt;&gt;&gt; print 0x1000
4096
&gt;&gt;&gt; print hex(0x1000)
0x1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python stores the numbers the same way, the only thing that changes is the formatting. Your issue is how the numbers are being formatted, not represented, thus, you fix your problem with string formatting:</p>
<pre><code>&gt;&gt;&gt; d = {k:v for k,v in zip('abcdefg',range(1,5000,313))}
&gt;&gt;&gt; d
{'e': 1253, 'g': 1879, 'a': 1, 'd': 940, 'c': 627, 'b': 314, 'f': 1566}
&gt;&gt;&gt; for k,v in d.items():
...   print("{} {:#06x}".format(k,v))
... 
e 0x04e5
g 0x0757
a 0x0001
d 0x03ac
c 0x0273
b 0x013a
f 0x061e
</code></pre>
</div>
<span class="comment-copy">And if you always want to make sure that leading zeroes are displayed, use <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer">format string syntax</a>: <code>print ("{:04x}".format(1)</code>)</span>
<span class="comment-copy">Ah! very cool. Thanks for that information!</span>
