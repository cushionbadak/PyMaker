<div class="post-text" itemprop="text">
<p>I got a question. My NIC has several secondary ip addresses.
I was not able to find a library for ftp in python which allows to pick which ip address to use to connect to a ftp server.
Does anyone know how it can be implemented, i looked into raw sockets and didn't find it too.
I know it's implemented for http/https in jmeter for example, but not for ftp for some reason.</p>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>As I mentionned, standard python ftp lib has a <a href="https://docs.python.org/3/library/ftplib.html#ftplib.FTP" rel="nofollow">source_address</a> parameter. However it's not available for python 2, which you apparently need.</p>
<p>So I suggest the following kludge for python2.7. That's copy-pasting python3 implementation of <code>source_address</code> argument and tweaking it to make it work. Ugly butâ€¦</p>
<pre><code>import ftplib
import socket

class FTP(ftplib.FTP):
    # KLUDGE, MANUAL BACKPORT OF source_address
    #     =&gt; REMOVE WHEN MOVING TO PYTHON3

    def __init__(self, *args, **kwargs):
        self.source_address = kwargs.pop("source_address", None)
        super(FTP, self).__init__(*args, **kwargs)

    def connect(self, host='', port=0, timeout=-999, source_address=None):
        if host != '':
            self.host = host
        if port &gt; 0:
            self.port = port
        if timeout != -999:
            self.timeout = timeout
        if source_address is not None:
            self.source_address = source_address
        self.sock = socket.create_connection((self.host, self.port), self.timeout,
                                             self.source_address)
        self.af = self.sock.family
        self.file = self.sock.makefile('rb')
        self.welcome = self.getresp()
        return self.welcome

    def ntransfercmd(self, cmd, rest=None):
        size = None
        if self.passiveserver:
            host, port = self.makepasv()
            conn = socket.create_connection((host, port), self.timeout,
                                            self.source_address)
            try:
                if rest is not None:
                    self.sendcmd("REST %s" % rest)
                resp = self.sendcmd(cmd)
                if resp[0] == '2':
                    resp = self.getresp()
                if resp[0] != '1':
                    raise ftplib.error_reply, resp
            except:
                conn.close()
                raise
        else:
            sock = self.makeport()
            try:
                if rest is not None:
                    self.sendcmd("REST %s" % rest)
                resp = self.sendcmd(cmd)
                if resp[0] == '2':
                    resp = self.getresp()
                if resp[0] != '1':
                    raise ftplib.error_reply, resp
                conn, sockaddr = sock.accept()
                if self.timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    conn.settimeout(self.timeout)
            finally:
                sock.close()
        if resp[:3] == '150':
            size = ftplib.parse150(resp)
        return conn, size
</code></pre>
<p>It's as ugly as monkey patching. It should do the trick. If you use it, please document this horror so it is removed when you move to python3.</p>
</div>
<div class="post-text" itemprop="text">
<p>As noted by <a href="https://stackoverflow.com/users/3212865/">spectras</a>, the FTP client in the Python 3 standard library allows specifying a <a href="https://docs.python.org/3/library/ftplib.html#ftplib.FTP" rel="nofollow noreferrer">source address</a> as a tuple.  Unless you have a known or static port for the source, setting the port number to zero should pick the next available port.  Using the docs as an example:</p>
<pre><code>from ftplib import FTP

source = ('192.168.1.100', 0)
destination = '172.16.1.1'
with FTP(destination, source_address=source) as ftp:
    ftp.login()
    print(ftp.dir())
</code></pre>
</div>
<span class="comment-copy">I don't think such library exists. In .NET also, if you are a client, you cannot choose, through which connection you want to go out. Just call Connect, and you are going out through your "active connection".</span>
<span class="comment-copy">Standard python ftp lib has a <a href="https://docs.python.org/3/library/ftplib.html#ftplib.FTP" rel="nofollow noreferrer"><code>source_address</code></a> parameter.</span>
<span class="comment-copy">@spectras it turned out it's not backported to python 2</span>
<span class="comment-copy">(note: I just fixed imports, if you copy-pasted before my edit, please copy it again)</span>
<span class="comment-copy">it does the trick, i'm not sure if we move to python 3 though, a lot of code's in python 2</span>
<span class="comment-copy">nice answer, is it python 3 only?</span>
<span class="comment-copy">just checked it, source_address is not supported in python 2(</span>
