<div class="post-text" itemprop="text">
<p>I'm coding a python script to monitor multiple site's status.<br/>
And since it's supposed to check websites status at a precise interval without being blocked by an other website check, I'm using asyncio.<br/>
But it looks like I don't stop it correctly when I catch a SIGINT signal, or may be I'm doing everything wrongly.  </p>
<pre><code>/usr/lib/python3.5/asyncio/unix_events.py:129: RuntimeWarning: coroutine 'exit_sigint' was never awaited
  del self._signal_handlers[sig]
exception calling callback for &lt;Future at 0x7f146da3ee80 state=finished returned list&gt;
Traceback (most recent call last):
  File "/usr/lib/python3.5/concurrent/futures/_base.py", line 297, in _invoke_callbacks
    callback(self)
  File "/usr/lib/python3.5/asyncio/futures.py", line 442, in _call_set_state
    dest_loop.call_soon_threadsafe(_set_state, destination, source)
  File "/usr/lib/python3.5/asyncio/base_events.py", line 532, in call_soon_threadsafe
    handle = self._call_soon(callback, args)
  File "/usr/lib/python3.5/asyncio/base_events.py", line 506, in _call_soon
    self._check_closed()
  File "/usr/lib/python3.5/asyncio/base_events.py", line 334, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
</code></pre>
<p>The source code :<br/>
<a href="https://github.com/DasFranck/Python-Mineur/blob/master/awsum_py/awsum.py" rel="nofollow">https://github.com/DasFranck/Python-Mineur/blob/master/awsum_py/awsum.py</a></p>
<p>What should I change, and what am I doing correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow">asyncio doc</a> :</p>
<blockquote>
<p><code>ensure_future</code> schedules the execution of a coroutine object: wrap it in a future. Return a Task object.</p>
</blockquote>
<p>Your callback runs a coroutine which should be managed by your loop, but you never <code>run_until_complete</code> it, so you never wait for it to finish. In fact, by wrapping the callback like this, you can't call <code>run_until_complete</code> on it.</p>
<p>Anyway, callbacks don't have to be async, so you can just use them like this:</p>
<pre class="lang-py prettyprint-override"><code># exit_sigint doesn't even need the loop as a parameter
def exit_sigint(signame):
  print("%s catched, exiting..." % signame)
  for task in asyncio.Task.all_tasks():
    task.cancel()

loop.add_signal_handler(getattr(signal, "SIGINT"), exit_sigint, "SIGINT")
loop.add_signal_handler(getattr(signal, "SIGTERM"), exit_sigint, "SIGTERM")
</code></pre>
<p>without wrapping them into a future.</p>
</div>
