<div class="post-text" itemprop="text">
<p>I am a very novice coder, and Python is my first (and, practically speaking, only) language. I am charged as part of a research job with manipulating a collection of data analysis scripts, first by getting them to run on my computer. I was able to do this, essentially by removing all lines of coding identifying paths, and running the scripts through a Jupyter terminal opened in the directory where the relevant modules and CSV files live so the script knows where to look (I know that Python defaults to the location of the terminal).</p>
<p>Here are the particular blocks of code whose function I don't understand</p>
<pre><code>  import sys

  sys.path.append('C:\Users\Ben\Documents\TRACMIP_Project\mymodules/')

  import altdata as altdata
</code></pre>
<p>I have replaced the pathname in the original code with the path name leading to the directory where the module is; the file containing all the CSV files that end up being referenced here is also in mymodules.</p>
<p>This works depending on where I open the terminal, but the only way I can get it to work consistently is by opening the terminal in mymodules, which is fine for now but won't work when I need to work by accessing the server remotely. I need to understand better precisely what is being done here, and how it relates to the location of the terminal (all the documentation I've found is overly technical for my knowledge level).</p>
<p>Here is another segment I don't understand</p>
<pre><code>import os.path
csvfile = 'csv/' + model +'_' + exp + '.csv'
if os.path.isfile(csvfile):   # csv file exists 
hcsvfile   = open(csvfile )
</code></pre>
<p>I get here that it's looking for the CSV file, but I'm not sure how. I'm also not sure why then on some occasions depending on where I open the terminal it's able to find the module but not the CSV files. </p>
<p>I would love an explanation of what I've presented, but more generally I would like information (or a link to information) explaining paths and how they work in scripts in modules, as well as what are ways of manipulating them. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<h2><a href="https://docs.python.org/3/library/sys.html#sys.path" rel="nofollow">sys.path</a></h2>
<p>This is simple list of directories where python will look for modules and packages (<code>.py</code> and dirs with <code>__init__.py</code> file, look at <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow">modules tutorial</a>). Extending this list will allow you to load modules (custom libs, etc.) from non default locations (usually you need to change it in runtime, for static dirs you can modify startup script to add needed enviroment variables).</p>
<h2><a href="https://docs.python.org/3/library/os.path.html" rel="nofollow">os.path</a></h2>
<blockquote>
<p>This module implements some useful functions on pathnames.</p>
</blockquote>
<p>... and allows you to find out if file exists, is it link, dir, etc.</p>
<h2>Why you failed loading <code>*.csv</code>?</h2>
<p>Because <code>sys.path</code> responsible for module loading and only for this. When you use relative path:</p>
<pre><code>csvfile = 'csv/' + model +'_' + exp + '.csv'
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code></a> will look in <strong>current working directory</strong></p>
<blockquote>
<p><code>file</code> is either a string or bytes object giving the pathname (absolute or relative to the current working directory)...</p>
</blockquote>
<p>You need to use absolute paths by constucting them with <code>os.path</code> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with cdarke's comment that you are probably running into an issue with backslashes. Replacing the line with:</p>
<p><code>sys.path.append(r'C:\Users\Ben\Documents\TRACMIP_Project\mymodules')</code></p>
<p>will likely solve your problem. Details below.</p>
<p>In general, Python treats paths as if they're relative to the current directory (where your terminal is running). When you feed it an <em>absolute path</em>-- which is a path that includes the root directory, like the <code>C:\</code> in <code>C:\Users\Ben\Documents\TRACMIP_Project\mymodules</code>-- then Python doesn't care about the working directory anymore, it just looks where you tell it to look.</p>
<p>Backslashes are used to make special characters within strings, such as line breaks (\n) and tabs (\t). The snag you've hit is that Python paths are strings first, paths second. So the \U, \B, \D, \T and \m in your path are getting misinterpreted as special characters and messing up Python's path interpretation. If you prefix the string with 'r', Python will ignore the special characters meaning of the backslash and just interpret it as a literal backslash (what you want).</p>
<p>The reason it still works if you run the script from the <code>mymodules</code> directory is because Python automatically looks in the working directory for files when asked. <code>sys.path.append(path)</code> is telling the computer to include that directory when it looks for commands, so that you can use files in that directory no matter where you're running the script. The faulty path will still get added, but its meaningless. There is no directory where you point it, so there's nothing to find there.</p>
<p>As for path manipulation in general, the "safest" way is to use the function in <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow">os.path</a>, which are platform-independent and will give the correct output whether you're working in a Windows or a Unix environment (usually).</p>
<p>EDIT: Forgot to cover the second part. Since Python paths are strings, you can build them using string operations. That's what is happening with the line</p>
<p><code>csvfile = 'csv/' + model +'_' + exp + '.csv'</code></p>
<p>Presumably <code>model</code> and <code>exp</code> are strings that appear in the filenames in the <code>csv/</code> folder. With <code>model = "foo"</code> and <code>exp = "bar"</code>, you'd get <code>csv/foo_bar.csv</code> which is a relative path to a file (that is, relative to your working directory). The code makes sure a file actually exists at that path and then opens it. Assuming the <code>csv/</code> folder is in the same path as you added in <code>sys.path.append</code>, this path <em>should</em> work regardless of where you run the file, but I'm not 100% certain on that. <strong>EDIT:</strong> outoftime pointed out that sys.path.append only works for modules, not opening files, so you'll need to either expand <code>csv/</code> into an absolute path or always run in its parent directory.</p>
<p>Also, I think Python is smart enough to not care about the direction of slashes in paths, but you should probably not mix them. All backslashes or all forward slashes only. <code>os.path.join</code> will normalize them for you. I'd probably change the line to</p>
<p><code>csvfile = os.path.join('csv\', model + '_' + exp + '.csv')</code></p>
<p>for consistency's sake.</p>
</div>
<span class="comment-copy">Some of your issues might be explained with this:  a <b>backslash</b> often gives a special meaning to the character which follows.  You can use double backslashes, forward slashes (works even on Windows), but better to use a <i>raw string</i>, for example <code>r'C:\Users\Ben\Documents\TRACMIP_Project\mymodules'</code>.</span>
<span class="comment-copy"><code>it's able to find the module but not the CSV files.</code> modules always reachable.</span>
<span class="comment-copy">@Goluxas Just to summarize:   1) Using a literal string address an issue with reading the correct pathname.   2) sys.append (if correctly used) tells the script to import the module from that directory (though if the terminal is already in that directory the sys.append is superfluous.       3) Let's say I wanted to open the terminal elsewhere, just as an exercise. The sys.append would need a literal string absolute path (it goes all the way back to the root). How would I tell os.path where to look for the csv file if the terminal isn't in that directory? Please be pedantic; I want to learn.</span>
<span class="comment-copy">@BenL If your terminal isn't in the same directory as the <code>csv</code> folder, you'll have to use the absolute path for the first argument in the <code>os.path.join()</code> call. For example: <code>os.path.join(r'C:\example\path\to\csv', model + '_' + exp + '.csv')</code></span>
