<div class="post-text" itemprop="text">
<p>For example I have two tests:</p>
<pre><code>class Test(unittest.TestCase):
    def setUp(self):
    self.driver = webdriver.Firefox()
    self.driver.get("http://google.com")

def tearDown(self):
    self.driver.quit()

def test_selenium_1(self):
    search_field = self.driver.find_element_by_id("lst-ib")
    search_field.send_keys("Test 1. Number 1")
    search_field.submit()
    time.sleep(2)

def test_selenium_2(self):
    search_field = self.driver.find_element_by_id("lst-ib")
    search_field.send_keys("Test 1. Number 2")
    search_field.submit()
    time.sleep(2)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>How can I execute these two tests in parallel with <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow">concurrent.futures.Executor</a>?</p>
<p>Is it possible? </p>
</div>
<div class="post-text" itemprop="text">
<p>I created Runner for these purposes.</p>
<p>And now I can execute tests in parallel by modules, classes and methods.</p>
<pre><code>import unittest
from concurrent.futures import ThreadPoolExecutor

class Runner():

    def parallel_execution(self, *name, options='by_module'):

        """
        name - name of the class with tests or module with classes that contain tests
        modules - name of the module with tests or with class that contains tests
        options:
            by_method - gather all tests methods in the class/classes and execute in parallel
            by_module - gather all tests from modules in parallel
            by_class - will execute all classes (with tests) in parallel
        """

        suite = unittest.TestSuite()

        if (options=='by_method'):
            for object in name:
                for method in dir(object):
                    if (method.startswith('test')):
                        suite.addTest(object(method))
        elif (options=='by_class'):
            for object in name:
                suite.addTest(unittest.TestLoader().loadTestsFromTestCase(object))

        elif (options=='by_module'):
            for module in name:
                suite.addTest(unittest.TestLoader().loadTestsFromModule(module))
        else:
            raise ValueError("Parameter 'options' is incorrect."
                             "Available options: 'by_method', 'by_class', 'by_module'")

        with ThreadPoolExecutor(max_workers=10) as executor:
            list_of_suites = list(suite)
            for test in range(len(list_of_suites)):
                test_name = str(list_of_suites[test])
                executor.submit(unittest.TextTestRunner().run, list_of_suites[test])
</code></pre>
<p>EXAMPLES:</p>
<pre><code>#by_methods
Runner().parallel_execution(Test1.Test1, Test2.Test22, Test2.Test33, options='by_method')

#by_class
Runner().parallel_execution(Test1.Test1, Test2.Test22, Test2.Test33, options='by_class')

#by_modules
Runner().parallel_execution(Test1, Test2)
</code></pre>
</div>
<span class="comment-copy"><a href="http://nose.readthedocs.io/en/latest/doc_tests/test_multiprocess/multiprocess.html" rel="nofollow noreferrer">nose.readthedocs.io/en/latest/doc_tests/test_multiprocess/â€¦</a></span>
<span class="comment-copy">Are there any ways to do it without nose, pytest, etc. I want to find ways to do it with unittest.</span>
<span class="comment-copy">nose multiprocess code is open source (they list it all on their site) and could provide a lot of insight in how to implement parallel tests</span>
<span class="comment-copy">With this specific example, it looks like you'd have a race condition if those tests executed in parallel...</span>
<span class="comment-copy">I executed about 40 tests and it was ok. Why did you decide it? Maybe I should fix something</span>
