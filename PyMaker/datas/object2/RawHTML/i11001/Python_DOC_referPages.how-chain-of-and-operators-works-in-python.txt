<div class="post-text" itemprop="text">
<p>In my program encountered with this:</p>
<pre><code>&gt;&gt;&gt; True and True and (3 or True)
3

&gt;&gt;&gt; True and True and ('asd' or True)
'asd'
</code></pre>
<p>while I expected to get some boolean value depending on the result in brackets. So if I try comparisons like these <code>(0 or True)</code> or <code>('' or True)</code> python will return <code>True</code>, which is clear because <code>0</code> and <code>''</code> equivalent to <code>False</code> in comparisons. </p>
<p>Why doesn't python return boolean value by converting <code>3</code> and <code>'asd'</code> into <code>True</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html</a>:</p>
<blockquote>
<p>Important exception: the Boolean operations <em>or</em> and <em>and</em> always return
  one of their operands</p>
</blockquote>
<p>The behavior can be most easily seen with:</p>
<pre><code>&gt;&gt;&gt; 3 and True
True

&gt;&gt;&gt; True and 3
3
</code></pre>
<p>If you need to eliminate this behavior, wrap it in a <em>bool</em>:</p>
<pre><code>&gt;&gt;&gt; bool(True and 3)
True
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/4477850/python-and-or-operators-return-value">this question</a></p>
<p>As Reut Sharabani, answered, this behavior allows useful things like:</p>
<pre><code>&gt;&gt;&gt; my_list = []
&gt;&gt;&gt; print (my_list or "no values")
</code></pre>
</div>
<span class="comment-copy">Are you asking <i>what</i> <code>and</code> does, or why it <i>doesn't</i> automatically convert its result to a boolean?</span>
<span class="comment-copy">Also, putting in <code>(0 or True)</code> or <code>('' or True)</code> wouldn't have given you <code>False</code>. You would have gotten <code>True</code>.</span>
<span class="comment-copy">@user2357112 yes, my silly mistake. Updated. Regarding question - I was a bit confused how to set it right. But the answer below clarifies this thing anyway</span>
<span class="comment-copy">Other surprising and silly things: Thanks to inefficiencies in builtin name lookup and function calls compared to syntax based operations, <code>not not x</code> is a faster way of converting from truthy/falsy to <code>True</code> and <code>False</code> than <code>bool(x)</code>. Not that I actually recommend that, unless you're really pressed for cycles and it's the hottest part of your code. The fastest solution is just using the truthy and falsy value directly without converting.</span>
