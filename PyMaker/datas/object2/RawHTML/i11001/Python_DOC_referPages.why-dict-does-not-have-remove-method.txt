<div class="post-text" itemprop="text">
<p>I know python list has a remove() method, which remove the given object from the list.</p>
<pre><code>aList = [123, 'xyz', 'zara', 'abc', 'xyz']
aList.remove('xyz')
</code></pre>
<p>I know that we can use del statement to delete an item from the list by offset: </p>
<pre><code>del aList[-1]
</code></pre>
<p>I also know that we can use del statement to delete an item from the dictionary by key:</p>
<pre><code>aDict = {'a':1, 'b':2 'c':3}
del aDict['a']
</code></pre>
<p>However, there is no remove() method for a dictionary, which I think is perfectly fine:</p>
<pre><code>aDict.remove('a')
</code></pre>
<p>I guess one reason is that <em>remove()</em> does not save any typing than <em>del</em> statement for dictionary, so it is not necessary. Is this correct? </p>
<p>While for list, remove() combines "<em>search index by value</em>" and "<em>delete by index</em>" together, so it has to be there. Is this correct?</p>
<p>What are the other reasons if any?</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that <code>list.remove</code> makes a very strict guarantee - removing the <strong>first</strong> occurrence of a <em>value</em>. Now, the ordering in a <code>dict</code> is arbitrary - there is no "first".</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look at this question: <a href="https://stackoverflow.com/questions/11520492/difference-between-del-remove-and-pop-on-lists">Difference between del, remove and pop on lists</a> : you'll note the main answer points out</p>
<blockquote>
<p>remove: removes the <em>first</em> matching <em>value</em>, not a specific index</p>
<p>del:  removes a specific index</p>
<p>pop: returns the removed element</p>
</blockquote>
<p>So with a Dictionary it simply doesn't need a remove method as there can only be one instance of a key (they have to be unique) and <code>del</code> is sufficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does, it's just called <a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="nofollow"><code>pop</code></a>:</p>
<blockquote>
<p>pop(key[, default])<br/>
  If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries have <code>pop</code>, but not <code>remove</code>. Why not? Because <code>remove</code> finds the <em>first</em> matching <em>value</em> and removes it, and returns nothing. So in a dictionary:</p>
<pre><code>{'a': 5, 'b': 5}
</code></pre>
<p><code>dict.remove</code> ought to remove <em>values</em>. If I use <code>dict.remove(5)</code>, which key should it delete? Additionally this is not even very useful operation. If you need to remove a certain <em>value</em> from a dictionary, then you're using a wrong data structure.</p>
<hr/>
<pre><code>dct.pop(key)
</code></pre>
<p>on the other hand, is not unlike</p>
<pre><code>value = dct[key]
del dct[key]
return value
</code></pre>
<p>This can be contrasted with <code>pop</code> method of lists:</p>
<pre><code>lst.pop(index)
</code></pre>
<p>is analogous to</p>
<pre><code>value = lst[index]
del lst[index]
return value
</code></pre>
<p>that is, both of them operate using the same principle.</p>
</div>
<span class="comment-copy">So you mean apply remove() to dict is conceptually wrong because there is no "first" for dict. I like this.</span>
<span class="comment-copy">It's just the first I could come up with. There are some other issues as well - <code>list</code> is pretty much fixed in size, so you can "guess" how long <code>remove</code> will take. In contrast, <code>dict</code> may be arbitrarily larger than it's data contained.  There are several instances where python avoids having interfaces that would imply quick performance, when they are in fact slow.</span>
<span class="comment-copy">Agreed. However @MisterMiyagi's answer is more close. Thank you anyway.</span>
<span class="comment-copy"><code>dict.pop()</code> has a certain result though, which is what it's usually used for.</span>
<span class="comment-copy">This does not really answer the question of why python does not have a dict.remove() function but does have a list.remove(). As pop is used for something different (and lists have both methods)</span>
<span class="comment-copy">@JGreenwell Who said dicts and lists HAVE to have the same names for their methods?</span>
<span class="comment-copy">@DeepSpace Not true. <code>pop()</code> returns the removed item, <code>del()</code> doesn't. Anyway, I was only making a little joke.</span>
<span class="comment-copy">Note that <code>pop</code> will remove by <i>key</i> identity, whereas <code>remove</code> will remove by <i>value</i> identity.</span>
