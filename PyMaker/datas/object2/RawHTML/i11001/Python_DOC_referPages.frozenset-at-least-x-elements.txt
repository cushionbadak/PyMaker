<div class="post-text" itemprop="text">
<p>I currently have this code, it checks if all elements in the array are the same. If this is the case, return true</p>
<pre><code>def all_equal(lst):
  """
  &gt;&gt;&gt; all_equal([1,1,1,1,1,1,1])
  True
  &gt;&gt;&gt; all_equal([1,2,3,1])
  False
  """
  return len(frozenset(lst)) == 1
</code></pre>
<p>But what I do want to check is if there are atleast 5 elements of the same.</p>
<p>So that</p>
<pre><code>[1,1,1,1,1,2,2]
</code></pre>
<p>Will return True aswell. Since there are 5 times 1</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using a set, use a <a href="https://en.wikipedia.org/wiki/Multiset" rel="nofollow"><em>bag</em> or <em>multiset</em> type</a>. A multiset counts how many times unique values occur.</p>
<p>In Python that's the <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter()</code> object</a>:</p>
<pre><code>from collections import Counter

def all_equal(lst):
    bag = Counter(lst)
    if any(v &gt;= 5 for v in bag.itervalues()):
        # an element occurred at least 5 times
        # (use bag.values() if using Python 3)
        return True
    return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter"><code>collections.Counter()</code></a>:</p>
<pre><code>from collections import Counter

def all_equal(lst, count):
    return any(v &gt;= count for v in Counter(lst).values())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short answer using <code>Counter</code>:</p>
<pre><code>from collections import Counter

def some_equal(lst):
    return max(Counter(lst).values()) &gt;= 5
</code></pre>
<p><code>Counter</code> is a "set" counting occurences of its elements.
 <code>Counter.keys()</code> returns the elements, and <code>Counter().values()</code> returns numbers of their occurences. Thus this <code>max</code> ensures there is an element which occures more than 5 times.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also check as you go, short circuiting as you iterate if any value is 5:</p>
<pre><code>from collections import defaultdict

def five(it):
    d  = defaultdict(int)
    for ele in it:
        d[ele] += 1
        if d[ele] == 5:
            return True
    return False
</code></pre>
<p>You could use a Counter but to just count the <em>defaultdict</em> is as fast and sometimes actually faster.</p>
</div>
<span class="comment-copy">But this returns True even if its not true</span>
<span class="comment-copy">@Sharpless512: so when is it <i>not</i> true? Please be specific.</span>
<span class="comment-copy">@Sharpless512: your question implies you want to return true for two conditions: either there is only 1 unique element, <i>or</i> there are at least 5 occurrences of an element. That's what I coded up, if that is wrong, you need to clarify your question.</span>
<span class="comment-copy">It should only return True if there at atleast 5 occurrences of the same element</span>
<span class="comment-copy">@Sharpless512: so you want to <i>ignore</i> the "only one unique value* case? Then simply drop the first <code>if</code> test. Please do make this clear in your question, it reads now as if you want to <i>add</i> the second test to your existing function.</span>
<span class="comment-copy"><code>max()</code> will look through all values whereas you could stop on the first value &gt;= 5.</span>
<span class="comment-copy">@eugeney Well, asymptotically the complexity is same :)</span>
