<div class="post-text" itemprop="text">
<p><strong>Motivation:</strong></p>
<p>For the sake of abstractness, I have a method treating a list of objects. Here I show a simplified version for illustration purpose (using Python2.7 here):</p>
<pre><code>def foo(obj_lst, f):
    return list(map(f, obj_lst))
</code></pre>
<p>However, for some cases, the input could be <code>foo([obj] * 1000, f)</code>, then in the function call I have to recompute 1000 times of f(obj). We could possibly avoid it because all these are exactly the same object.</p>
<p><strong>My Solution:</strong></p>
<p>I can always cache the calculation result, as</p>
<pre><code>def foo2(obj_lst, f):
    cache_map = {}
    def foo_single(obj):
        if id(obj) not in cache_map:
            cache_map[id(obj)] = f(obj)
        return cache_map[id(obj)]
    result_lst = []
    for obj in obj_lst:
        result_lst.append(foo_single(obj))
    return result_lst
</code></pre>
<p>And this does exactly the job I want and it can indeed speedup the recomputation overhead.</p>
<p><strong>My Question:</strong></p>
<p>This solution is not enough neat to me because I have to manually do so in every function, will there be a better solution for avoiding a general "same-object-recomputation" for non-random functions? A global cache_map with keys from function id and all arguments seems not work because the object ids are only unique during their lifetime.</p>
<p>In general I understand that this may not make too much sense in Python because these objects are mutable. May I ask if there is some existing scheme in functional programming languages like Scala dealing with this problem for immutable objects? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're describing <a href="https://en.wikipedia.org/wiki/Memoization" rel="nofollow">memoization</a>.</p>
<p>This can be done by <a href="http://www.python-course.eu/python3_memoization.php" rel="nofollow">creating your own helper/decorator function</a> or using <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow">functools.lru_cache</a> from the standard library (Python 3.2+)</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this perhaps?</p>
<pre><code> import java.util.{Collections, WeakHashMap}
 case class Memoized[T,R](f: T =&gt; R) extends Function1[T,R] {
    val mem = Collections.synchronizedMap(new WeakHashMap[T,R])
    def apply(t: T) = Option(mem.get(t)).getOrElse { 
      val r = f(t)
      mem.put(t, r)
      r
    }
 }
</code></pre>
<p>You can then just do (among other uses) <code>foo(objectsWithDupes, Memoized(f))</code></p>
</div>
<span class="comment-copy">Maybe some kind of function decorator?</span>
<span class="comment-copy">Hi @ScottHunter, sorry I'm not quite familiar with that, can you give me some pointers?</span>
<span class="comment-copy">Why do you "have to manually do it in every function"? You are passing the function as an argument, aren't you?</span>
<span class="comment-copy">Oh @Dima, I was saying I have a lot of functions doing somewhat similar to  <code>foo</code>.</span>
<span class="comment-copy">Awesome! I'll try this out.</span>
<span class="comment-copy">Right. It's memoization. An alternative I have done is to make the memory call-location-specific. In our particular usage, this made an enormous difference.</span>
<span class="comment-copy">I just tried this but got some questions. Sometimes hashcode overhead may be too large when we have a large object and what we want is exactly whether or not it's the same object in memory pool. But using <code>id(obj)</code> may cause non-uniqueness problem outside <code>obj</code>'s lifetime. How can we properly define the decorator to make it really reflect it's really the same object we've seen? (Let's assume objects are always immutable though)</span>
<span class="comment-copy">Apparently I misunderstood how decorator works! (Even worse maybe I misunderstood closure though...) Now I see that's exactly what I want! That's so awesome!!!</span>
<span class="comment-copy">This depends on T must be hashable, right?</span>
<span class="comment-copy">In some way, yeah ... There needs to be a way to tell if the two instances are "the same" or not. You can replace <code>t</code> with <code>id(t)</code> in <code>get</code> and <code>put</code> if you prefer.</span>
<span class="comment-copy">Does Scala have its equivalent of python <code>id</code>? Sometimes objects itself are huge so compute hashcode itself is not enough reasonable...</span>
<span class="comment-copy">I have no idea what python <code>id</code> is, but can't imagine what else can it possibly do if not returning a ref, and not computing a hashcode. I don't think there is any other way known to human-kind.</span>
<span class="comment-copy">@ShenxiuLiu from python docs: "CPython implementation detail: This is the address of the object in memory.". So, <code>id(t)</code> in python is pretty much the same as just <code>t</code> in scala (somewhat worse actually, because scala overrides  hash and equality for many common kinds of objects). I think, "running into non-uniqueness problem" with it is a pretty looong shot. It's the last thing you need to worry about. More reason to be concerned here is having many different copies of the same object, with different memory addresses.</span>
