<div class="post-text" itemprop="text">
<p>I've looked at the exifread documentation and it says that it's returned as a dictionary, but the problem is that it returns nothing except {}, I don't know if that means there is no meta data in the image, or I made a nooby mistake, well anyway I've spend a good chunk of time looking at my code and documentation, but still can't find the solution, any help would be appreciated :)</p>
<p>Code:</p>
<pre><code>import exifread
import colorama
import urllib2
import urllib
import random
import time
import bs4
import sys

def get_images(target):
    colorama.init()
    print(colorama.Fore.LIGHTGREEN_EX + "[*] Retrieving Meta Data from Target's Page...")
    req = urllib2.Request(target)
    resp = urllib2.urlopen(req)
    page = resp.read()
    soup = bs4.BeautifulSoup(page, "html.parser")
    for img in soup.find_all("img"):
        src = img.get("src")
        if "www" in src or "http" in src or "https" in src:
            rand_num = random.random()
            name = str(rand_num) + ".jpg"
            urllib.urlretrieve(src, name)
            f = open(name, "rb")
            tags = exifread.process_file(f)
            print (tags)
        else:
            s = target + src
            rand_num = random.random()
            name = str(rand_num) + ".jpg"
            urllib.urlretrieve(s, name)
            f = open(name, "rb")
            tags = exifread.process_file(f)
            print (tags)
   return

def main():
    target = raw_input("Enter the target: ")
    print ("\n")
    get_images(target)
    time.sleep(5)
    sys.exit()

if __name__ == "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is you were not passing a <em>base url</em>, you need to pass the host and then join that to the <em>src</em> unless you get an absolute <em>url</em> from the src attribute.</p>
<p>The following code demonstrates a working example, I used <a href="http://docs.python-requests.org/en/master/" rel="nofollow"><em>requests</em></a> in place of <em>urllib</em> but the logic is the same:</p>
<pre><code>import bs4
import sys
import os
import requests
from urlparse import urljoin

def get_images(target, base):
    page = requests.get(target).content
    soup = bs4.BeautifulSoup(page, "html.parser")
    for img in soup.find_all("img", src=True):
        src = img.get("src")
        name = os.path.basename(src)
        if not src.startswith(("www.","http:","https:")):
                src = urljoin(base, src)
        with open(name, "wb+") as f:
            f.write(requests.get(src).content)
            f.seek(0)
            tags = exifread.process_file(f,"rb")
            print (tags)


def main():

    target ="http://www.exiv2.org/sample.html"
    # need base to join to relative src 
    base = "http://www.exiv2.org/"
    get_images(target, base)


if __name__ == "__main__":
    main()
</code></pre>
<p>You will get the exif data for the one image on the page that has some:</p>
<p>A PIL example:</p>
<pre><code>import bs4
import os
import requests
from urlparse import urljoin
import PIL.Image

def get_images(target, base):
    page = requests.get(target).content
    soup = bs4.BeautifulSoup(page, "html.parser")
    for img in soup.find_all("img"):
        src = img.get("src")
        name = os.path.basename(src)
        if not src.startswith(("www.","http:","https:")):
                src = urljoin(base, src)
        with open(name, "wb+") as f:
            f.write(requests.get(src).content)
            f.seek(0)
            try:
                img = PIL.Image.open(f)
                exif_data = img._getexif()
                print(exif_data)
            except AttributeError as e:
                print("No exif data for {}".format(name))
                os.remove(name)
</code></pre>
<p><code>os.remove(name)</code> will remove files that have no exif data, if you don't want that to happen then remove it.</p>
</div>
<span class="comment-copy">What url did you input?</span>
<span class="comment-copy">I've tried <a href="https://docs.python.org/3/" rel="nofollow noreferrer">docs.python.org/3</a> and <a href="https://pypi.python.org/pypi/ExifRead/2.1.2" rel="nofollow noreferrer">pypi.python.org/pypi/ExifRead/2.1.2</a> and <a href="https://www.google.com/" rel="nofollow noreferrer">google.com</a></span>
<span class="comment-copy">Honestly I might try modifying the code so I just read the meta data out of an image on my machine instead of extracting the image from a website, to see if the problem's maybe coming from the website's image's, instead of my code, but right now I'm kinda clueless.</span>
<span class="comment-copy">I mean to run your code, what website did you test it on</span>
<span class="comment-copy">All three listed above.</span>
<span class="comment-copy">Thanks, so much have a wonderful day :)</span>
<span class="comment-copy">No prob, you too.</span>
