<div class="post-text" itemprop="text">
<p>I face myself using a lot of this kind of structure:</p>
<pre><code>for node in range(int(self.num_nodes)):
    dists[str(node)] = -1
</code></pre>
<p>So, my questions is: what does python(3+) uses when <code>str()</code> or <code>int()</code>, for example, are called? It just casts? It converts? (something else?)</p>
<p>How would you advice me to write this kind of code? Keep in mind that the key for dists must be a <code>str</code> and <code>num_nodes</code> is also a <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How expensive <code>str</code> and <code>int</code> are depend entirely on the objects that you pass to them.  Ultimately, they just call the object's <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow"><code>__int__</code></a> hook methods.  For most simple objects, these operations should be pretty fast.  e.g. to convert a simple string to an integer takes my computer about .5 microseconds:</p>
<pre><code>$python -mtimeit -s 'x="1"' 'int(x)'
1000000 loops, best of 3: 0.479 usec per loop
</code></pre>
<p>and the reverse operation only takes a little over .1 microseconds:</p>
<pre><code>$ python -mtimeit -s 'x=1' 'str(x)'
10000000 loops, best of 3: 0.12 usec per loop
</code></pre>
<p>however, it's very easy to create pathological objects for which this would be <em>really</em> expensive.</p>
<pre><code>import time
class Argv(object):
    def __str__(self):
        time.sleep(1000)
        return 'ha ha ha!'
</code></pre>
</div>
<span class="comment-copy"><code>dists = [-1] * int(self.num_nodes)</code> would probably be better. Is there a reason you need a dict whose keys are just string representations of integers?</span>
<span class="comment-copy">Thank you for the examples. :D</span>
