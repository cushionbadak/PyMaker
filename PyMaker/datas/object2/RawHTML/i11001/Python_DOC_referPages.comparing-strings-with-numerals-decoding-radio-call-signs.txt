<div class="post-text" itemprop="text">
<p>I've got a feeling that the core concept of this might be a repeat question but I can't find it.</p>
<p>I have a bunch of radio callsigns and want to find the country of origin from <a href="http://www.arrl.org/international-call-sign-series" rel="nofollow noreferrer">here</a>.</p>
<p>I've tried to do basic comparison to find the country location but the way that Python orders numerals and characters vs the way the callsigns do is different:</p>
<p>In Python <code>"ZR1" &lt; "ZRA" == True</code> but this would be <code>False</code> in the callsign convention.</p>
<p>Is there anyway that I can change Python's ordering from <code>... 7 &lt; 8 &lt; 9 &lt; A &lt; B …</code> to <code>... X &lt; Y &lt; Z &lt; 0 &lt; 1 &lt; 2 …</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create a <code>dict</code> mapping characters to their positions in the "correct" ordering and then compare the lists of positions:</p>
<pre><code>import string
order = {e: i for i, e in enumerate(string.ascii_uppercase + string.digits)}
positions = lambda s: [order[c] for c in s]

def cmp_callsign(first, second):
    return cmp(positions(first), positions(second))  # (cmp removed in Python 3)
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; positions("ZR1")
[25, 17, 27]
&gt;&gt;&gt; cmp("ZR1", "ZRA")  # normal string comparison
-1
&gt;&gt;&gt; cmp_callsign("ZR1", "ZRA")  # callsign comparison
1
&gt;&gt;&gt; sorted(["AR1", "ZR1", "ZRA"], key=positions)
['AR1', 'ZRA', 'ZR1']
</code></pre>
<p>To make this comparison automatic, you could also create a <code>class Callsign</code> and override the <code>__cmp__</code> or <code>__eq__</code> and <code>__lt__</code> methods accordingly:</p>
<pre><code>class Callsign:
    def __init__(self, code):
        self.code = code
    def __lt__(self, other):
        return positions(self.code) &lt; positions(other.code) 

a, b, c = Callsign("ZRA"), Callsign("ZR1"), Callsign("ZR9")
print(a &lt; b &lt; c)  # True
print(a &lt; c &lt; b)  # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functions like <code>sorted()</code> allow you to provide your own <code>cmp</code> function - you just have to implement it. But you're free to say that numbers are over letters and the usual sorting algorithm will take care of the rest.</p>
<p>If you just want to compare things rather than sort, you'll have to implement your own function for it. Go character by character from both strings and make the decision based on that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply write your own key function, like this:</p>
<pre><code>def radio_order(s):
    def character_sorting_order(a):
        if a.isnumeric():
            return ord('z') + 1 + int(a)
        else:
            return ord(a)
    return tuple(map(character_sorting_order, s))

print('z1' &lt; 'zA' &lt; 'za') # native python ordering
print(radio_order('zA') &lt; radio_order('za') &lt; radio_order('z1')) # custom ordering
</code></pre>
<p>It wouldn't be easy to alter behaviour of <code>&gt;</code> and <code>&lt;</code> symbols but I suppose this approach solves your problem. You can also use <code>radio_order</code> as a <code>key</code> param if you were to sort some strings according to this new ordering.</p>
<p>In this case, we can keep python's <a href="https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow">approach</a> to comparing sequences (strings) but want to alter how parts of those sequences (chars) are compared. Hence, we map our chars to stuff (<code>int</code>s) that would get compared in a way we like and then map our strings to <code>tuple</code>s of those <code>int</code>s. Easy to see that resulting <code>tuple</code>s of <code>int</code>s would be compared in a way we need original strings to be compared.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://stackoverflow.com/a/13626849/2077270">string.translate</a> a couple times, though it might be costly... Basically, map the strings to a value that will be compared correctly using the default python comparison operators. </p>
<pre><code>import string

python_order = '0123456789' + string.ascii_uppercase
radio_order = string.ascii_uppercase + '0123456789'
to_py = string.maketrans(radio_order, python_order )
</code></pre>
<p>Assuming you can read in all of the call sign ranges from the website you linked to, I would put them into a list <code>radio_sign_ranges</code> and then translate them and your signs in question</p>
<pre><code>signs = ['D6Z', 'D1Z', 'ZR1', 'ZRA']
signs_py = [ int(s.translate(to_py), 32) for s in signs ]
ranges_py =  [ int(s.translate(to_py), 32) for s in radio_sign_ranges ]
</code></pre>
<p>Then use some numerical tools to find which sign belongs to which country. I would have a look at <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html" rel="nofollow noreferrer"><code>numpy.digitize</code></a> where argument <code>x=signs_py</code> and argument <code>bins=ranges_py</code>, or something like that..</p>
<blockquote>
<p>Is there anyway that I can change python's ordering from "... 7 &lt; 8 &lt; 9 &lt; A &lt; B ..." to "... X &lt; Y &lt; Z &lt; 0 &lt; 1 &lt; 2 ..."?</p>
</blockquote>
<p>Maybe have a look <a href="http://www.rafekettler.com/magicmethods.html#comparisons" rel="nofollow noreferrer">here</a> if you want to dig deeper.</p>
</div>
<span class="comment-copy">It doesn't seem like you need a A-1 ordering.  All countries end with Z.  Many countries are fully resolved using the first 2 chars, which can be stored in a regular dict.  AX=&gt;Australia.  Some countries have ranges of first 2 chars, which can be resolved by a lookup on 1 char, then a simple between test (none of which involve comparing nums and alphas).  Ex. char1  A =&gt; US, Spain, char2 A-L =&gt; USA, L-Z =&gt; Spain.  The C range is illustrative as well.  C, then Y-Z =&gt; Canada.  None of the 2nd char ranges cross A-Z / 0-9.  Specialized 2 step lookup class from the ITU data would do it.</span>
<span class="comment-copy">There are a few examples of where the third char comes into play: 3DA-3DM	Swaziland (Kingdom of) 3DN-3DZ	Fiji (Republic of)  But I only found those when looking now. Good thinking on actually questioning the question</span>
<span class="comment-copy">Thanks, implemented this and it works well.</span>
<span class="comment-copy">Question says nothing about sorting.</span>
<span class="comment-copy">@ScottHunter Not sorting, but ordering in general: "but the way that python orders numerals and characters vs the way the callsigns do is different"</span>
<span class="comment-copy">So would creating a function that gives a weight to each character work and then running a "where sorted(A, B, cmp = custom_cmp)" kind of thing. Hold on, this is clumsy let me thrash it out first</span>
<span class="comment-copy">@RedM Maybe something like <code>if a in string.ascii_letters and b in string.digits: return -1 ; if a in string.digits and b in string.ascii_letters: return 1 ; return a.__cmp__(b)</code></span>
