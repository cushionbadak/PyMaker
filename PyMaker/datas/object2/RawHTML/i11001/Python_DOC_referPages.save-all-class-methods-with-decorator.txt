<div class="post-text" itemprop="text">
<p>i have a class and i want to all its methods in a list inside the class, i want it to work even if i have two methods with the same name, my problem is i can't access the class to put the methods there.
lets say i have the decorator</p>
<pre><code>def dec(func):
    class = ????
    class.methods.append(func)
    return func
</code></pre>
<p>and i have the class</p>
<pre><code>class A(object):
    methods = []
    @dec
    def a(self):
       print 2
    @dec
    def a(self):
       print 3
</code></pre>
<p>i want to be able to do</p>
<pre><code>A.methods[0](A())
A.methods[1](A())
(A() becuase those methods need self)
</code></pre>
<p>or something like that</p>
<p>I already read a lot of problems like this and it looks like what i want is not really possible since A is not exist when the decorator is called, but maybe there is a way to access its variables since the decorator runs inside it?</p>
</div>
<div class="post-text" itemprop="text">
<p>The class object itself is only constructed <em>after</em> the body statements (all the statements inside the <code>class &lt;classname&gt;(&lt;bases,&gt;):</code> block have been executed. Decorators on the other hand are executed together with the function they are decorating.</p>
<p>You could just in the list you want methods to be added to, to your decorator:</p>
<pre><code>class A(object):
    methods = []
    @dec(methods)
    def a(self):
        print 2
    @dec(methods)
    def a(self):
        print 3
</code></pre>
<p>and have the decorator use that list to append your methods:</p>
<pre><code>def dec(methodslist):
    def decorator(f):
        methodslist.append(f)
        return f
    return decorator
</code></pre>
<p>If you are using Python 3, then another option is for you to use a metaclass with a custom <a href="https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace" rel="nofollow"><code>metaclass.__prepare__</code> class method</a> that uses <code>collections.defaultdict()</code> to collect all attributes into lists first so you can still access them even if named the same. Your decorator then only needs to 'mark' each function object with an extra attribute or something. This is a little more involved.</p>
<p>When you then want to call those functions, you are right that they are not bound and won't have <code>self</code> passed in for you. Either manually pass in <code>self</code>, or <em>bind</em> the manually. Functions are <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow"><em>descriptor</em> objects</a>, call their <code>__get__</code> method to bind them to an instance:</p>
<pre><code>for func in self.methods:
    method = func.__get__(self)
    method()
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def dec(methodslist):
...     def decorator(f):
...         methodslist.append(f)
...         return f
...     return decorator
...
&gt;&gt;&gt; class A(object):
...     methods = []
...     @dec(methods)
...     def a(self):
...         print 2
...     @dec(methods)
...     def a(self):
...         print 3
...     def call_all(self):
...         for func in self.methods:
...             method = func.__get__(self)
...             method()
...
&gt;&gt;&gt; A().call_all()
2
3
</code></pre>
</div>
<span class="comment-copy">But you <i>can't</i> have two methods with the same name.</span>
<span class="comment-copy">How about this? <a href="https://ideone.com/FIa3C6" rel="nofollow noreferrer">ideone.com/FIa3C6</a></span>
<span class="comment-copy">@DanielRoseman: but you <i>can</i> add them to the same list, as they are executed in order. The class will only receive the last one as it indeed replaces the first in the class body namespace, but that doesn't mean that the decorator won't be executed and you'll have a reference to the first function object before it is replaced by the second.</span>
<span class="comment-copy">thank falsetru and Martijn Pieters</span>
<span class="comment-copy">thanks! i am using python 2.7 but still intersting solutions</span>
