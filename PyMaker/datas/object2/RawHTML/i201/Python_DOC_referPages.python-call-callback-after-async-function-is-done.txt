<div class="post-text" itemprop="text">
<p>I'm trying to call a callback once a async function is done running</p>
<p>Here's an example of what im trying to do:</p>
<pre class="lang-py prettyprint-override"><code>import asyncio

async def asyncfunction():
    print('Hello')
    await asyncio.sleep(10)
    print('World')
    return 10

def callback(n):
    print(f'The async function returned: {n}')

loop = asyncio.get_event_loop()

# Will block the print until everything is done
callback(loop.run_until_complete(asyncfunction()))
print('Hey')
</code></pre>
<p>Here's what that does:</p>
<pre><code>Hello
World
The async function returned: 10
Hey
</code></pre>
<p>And here's what I want it to do<br/>
Edit: The position of the 'Hey' doesn't really matter, as long as it doesn't have to wait for the async function to be done</p>
<pre><code>Hello
Hey
World
The async function returned: 10
</code></pre>
<p>Edit: after some testing I have found a way that does what I want, although I don't know if its the best way to do it</p>
<pre class="lang-py prettyprint-override"><code>import asyncio
import threading

async def asyncfunction():
    print('Hello')
    await asyncio.sleep(10)
    print('World')
    return 10

def callback(n):
    print(f'The async function returned: {n}')

def wrapper(loop):
    callback(loop.run_until_complete(asyncfunction()))

loop = asyncio.get_event_loop()
thr = threading.Thread(target=wrapper,args=(loop,))
thr.start()
print('Hey')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get that order, you need to continue executing the coroutine after <code>print('Hey')</code>. You also need that <code>'Hey'</code> printed in the "lull" while <code>asyncfunction</code> is sleeping. That can essentially only be scheduled by the event loop itself; since <code>asyncfunction</code> is a black box for all you know and you don't know what it's waiting for or why or can get control back from it explicitly while it's sleeping.</p>
<p>So, execute both <code>asyncfunction</code> and <code>print('Hey')</code> as asynchronous tasks, and mostly <em>hope</em> that the scheduling works out so that 'Hey' is scheduled to run while <code>asyncfunction</code> is sleeping.</p>
<pre><code>val, *_ = loop.run_until_complete(asyncio.gather(
    asyncfunction(),
    asyncio.coroutine(print)('Hey')
))
callback(val)
</code></pre>
<p><code>asyncio.coroutine(print)</code> turns <code>print</code> into an <code>async</code> function, and <code>gather</code> schedules both on the event loop simultaneously, and it will <em>probably</em> work out that <code>print</code> will be executed while <code>asyncfunction</code> is sleeping.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Threading with asyncio is just confusing and most likely not what you want. <code>run_until_complete</code> is one of the blocking call and should likely be the last statement in an <code>asyncio</code> program. </p>
<p>To add code after calling an async function, just create create a wrapper</p>
<pre><code>async def myfunc():
  n = await asyncfunction()
  callback(n)

loop.run_until_complete(myfunc()) # from python 3.7, asyncio.run(myfunc())
</code></pre>
<hr/>
<p>If you just want to schedule some code to run asynchronously and continue with something else, create a task and await at the end</p>
<pre><code>async def a_main():
  task = asyncio.ensure_future(myfunc()) # from python 3.7, asyncio.create_task(...)
  print("Hey")
  # Anything else to run
  await task # wait for the task to complete

loop.run_until_complete(a_main())
</code></pre>
</div>
<span class="comment-copy">Move <code>print('Hey')</code> right after <code>print('Hello')</code>? It is brute force I know, but you have not talked about the logic of your desired output.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.add_done_callback" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
