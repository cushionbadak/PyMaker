<div class="post-text" itemprop="text">
<p>I would like to generate the total number of possibilities from given list of games like  <strong>['France - Germany'</strong>.
Such that total outcome will be <strong>3 possible outcomes</strong> for this case {either the home team wins, they tie, or the away team wins}.</p>
<ul>
<li>Possible outcomes will be 3 </li>
</ul>
<pre>
1   
FRANCE - GERMANY 1
2   
FRANCE - GERMANY x
3   
FRANCE - GERMANY 2
</pre>
<hr/>
<p>And for another case where the list is <strong>['France - Germany', 'Spain - Italia']</strong></p>
<ul>
<li>Possible number of outcomes are 9</li>
</ul>
<pre>
1
FRANCE - GERMANY 1
SPAIN - ITALIA 1 
2   
FRANCE - GERMANY 1
SPAIN - ITALIA x 
3   
FRANCE - GERMANY 1
SPAIN - ITALIA 2
4   
FRANCE - GERMANY x
SPAIN - ITALIA 1
5   
FRANCE - GERMANY x
SPAIN - ITALIA x
6   
FRANCE - GERMANY x
SPAIN - ITALIA 2
7   
FRANCE - GERMANY 2
SPAIN - ITALIA 1
8   
FRANCE - GERMANY 2
SPAIN - ITALIA x
9   
FRANCE - GERMANY 2
SPAIN - ITALIA 2
</pre>
<p>The Following is my code </p>
<pre><code>import itertools

games = ['France - Germany']
case = ["1","X","2"]
results = []
for eachcase in case:
    for game in games:
        results.append("%s %s" % (game, eachcase))


print("\n".join(results)+ "\n %s" %len(results))
</code></pre>
<p>and its output for item in the list is </p>
<pre><code>France - Germany 1
France - Germany X
France - Germany 2
</code></pre>
<p>Which is fine but as the number of items of the list increases it doesn't work. Any help in working this out would be appreciated thanks in advance :)</p>
</div>
<div class="post-text" itemprop="text">
<p>For a given list of games, we can use <code>itertools.product</code> for this:</p>
<pre><code>from itertools import product

def game_product(games):
    for i, res in enumerate(product('1x2', repeat=len(games)), 1):
        print(i)
        for gr in zip(games, res):
            print('{} {}'.format(*gr))
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; game_product(['France - Germany', 'Spain - Italia', 'Brazil - Spain'])
1
France - Germany 1
Spain - Italia 1
Brazil - Spain 1
2
France - Germany 1
Spain - Italia 1
Brazil - Spain x
3
France - Germany 1
Spain - Italia 1
Brazil - Spain 2
4
France - Germany 1
Spain - Italia x
Brazil - Spain 1
5
France - Germany 1
Spain - Italia x
Brazil - Spain x
6
France - Germany 1
Spain - Italia x
Brazil - Spain 2
7
France - Germany 1
Spain - Italia 2
Brazil - Spain 1
8
France - Germany 1
Spain - Italia 2
Brazil - Spain x
9
France - Germany 1
Spain - Italia 2
Brazil - Spain 2
10
France - Germany x
Spain - Italia 1
Brazil - Spain 1
11
France - Germany x
Spain - Italia 1
Brazil - Spain x
12
France - Germany x
Spain - Italia 1
Brazil - Spain 2
13
France - Germany x
Spain - Italia x
Brazil - Spain 1
14
France - Germany x
Spain - Italia x
Brazil - Spain x
15
France - Germany x
Spain - Italia x
Brazil - Spain 2
16
France - Germany x
Spain - Italia 2
Brazil - Spain 1
17
France - Germany x
Spain - Italia 2
Brazil - Spain x
18
France - Germany x
Spain - Italia 2
Brazil - Spain 2
19
France - Germany 2
Spain - Italia 1
Brazil - Spain 1
20
France - Germany 2
Spain - Italia 1
Brazil - Spain x
21
France - Germany 2
Spain - Italia 1
Brazil - Spain 2
22
France - Germany 2
Spain - Italia x
Brazil - Spain 1
23
France - Germany 2
Spain - Italia x
Brazil - Spain x
24
France - Germany 2
Spain - Italia x
Brazil - Spain 2
25
France - Germany 2
Spain - Italia 2
Brazil - Spain 1
26
France - Germany 2
Spain - Italia 2
Brazil - Spain x
27
France - Germany 2
Spain - Italia 2
Brazil - Spain 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do this easily with list comprehensions:</p>
<pre><code>fg = [ ("FRANCE-GERMANY",outcome) for outcome in (1,"x",2) ]
for g1 in fg: print(g1)
print("")

si = [ ("SPAIN-ITALY",outcome) for outcome in (1,"x",2) ]
final = [ (g1,g2) for g1 in fg for g2 in si ]
for g1,g2 in final:
    print(g1)
    print(g2)
    print("")
</code></pre>
<p>If you want a more generalized approach, the product function in the itertools module can also help:</p>
<pre><code>from itertools import product
fg    = list(product(["FRANCE-GERMANY"],(1,"x",2)))
si    = list(product(["SPAIN-ITALY"],(1,"x",2)))
final = list(product(fg,si))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> with the repeat argument to create as many game result products as the total number of games.</p>
<pre><code>from itertools import product
games = ['France - Germany', 'Spain - Italia']
case = ["1","X","2"]

results = []
for i in product(case, repeat = len(games)):
    results.append({k:v for k, v in zip(games, i)})
    #if you prefer list of tuples instead, alternatively,
    #results.append([(k, v) for k, v in zip(games, i)])

print(results)
</code></pre>
<p>Output:</p>
<pre><code>[{'France - Germany': '1', 'Spain - Italia': '1'},
 {'France - Germany': '1', 'Spain - Italia': 'X'},
 {'France - Germany': '1', 'Spain - Italia': '2'},
 {'France - Germany': 'X', 'Spain - Italia': '1'},
 {'France - Germany': 'X', 'Spain - Italia': 'X'},
 {'France - Germany': 'X', 'Spain - Italia': '2'},
 {'France - Germany': '2', 'Spain - Italia': '1'},
 {'France - Germany': '2', 'Spain - Italia': 'X'},
 {'France - Germany': '2', 'Spain - Italia': '2'}]
</code></pre>
</div>
<span class="comment-copy">So <code>1</code>/<code>2</code> is for the first/second team victory and <code>x</code> is for a draw, right?</span>
<span class="comment-copy">yeah correct 1 home team X draw and 2 Away Team</span>
