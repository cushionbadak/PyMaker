<div class="post-text" itemprop="text">
<p>I am currently trying to convert times from UTC and the problem that i am having is that the offsets seem to be backwards. As you can see when i convert the UTC to EST, it shows an offset of -4:56 yet when i print the time, it seems to add 4:56 as opposed to the way it should be. I would really like to be able to convert a UTC time to any other timezone and have it display the local time there without the offset so the UTC here would be converted to something along the lines of 2019-03-06 9:12 EST.</p>
<pre><code>&gt;&gt;&gt; example.created
datetime.datetime(2019, 3, 6, 14, 8, 49, 841881, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; original_utc = example.created
&gt;&gt;&gt; original_utc
datetime.datetime(2019, 3, 6, 14, 8, 49, 841881, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; conv_est = original_utc.replace(tzinfo=pytz.timezone('US/Eastern'))
&gt;&gt;&gt; conv_est
datetime.datetime(2019, 3, 6, 14, 8, 49, 841881, tzinfo=&lt;DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD&gt;)
&gt;&gt;&gt; print(conv_est)
2019-03-06 14:08:49.841881-04:56
&gt;&gt;&gt; print(conv_est.astimezone())
2019-03-06 19:04:49.841881+00:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suspect that you misunderstood the method <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer"><code>.astimezone()</code></a>.</p>
<p>Your original datetime is in UTC</p>
<pre><code>&gt;&gt;&gt; example.created
datetime.datetime(2019, 3, 6, 14, 8, 49, 841881, tzinfo=&lt;UTC&gt;)
</code></pre>
<p>Then you changed the timezone info for the variable <code>conv_est</code>, and indeed it works as designed:</p>
<pre><code>&gt;&gt;&gt; conv_est = original_utc.replace(tzinfo=pytz.timezone('US/Eastern'))
&gt;&gt;&gt; conv_est
datetime.datetime(2019, 3, 6, 14, 8, 49, 841881, tzinfo=&lt;DstTzInfo 'US/Eastern' LMT-1 day, 19:04:00 STD&gt;)
</code></pre>
<p>If you print this variable, it shows the correct info</p>
<pre><code>&gt;&gt;&gt; print(conv_est)
2019-03-06 14:08:49.841881-04:56
</code></pre>
<p>But when you call <code>.astimezone()</code> without any argument, then the return value is a <code>datetime</code> object in <code>UTC</code> zone; that means the method is also working as designed, returning the same point in time but expressed as localtime in <code>UTC</code> (It will be 7PM/19hs in UTC when it is 2PM/14hs in US/Eastern).</p>
<pre><code>&gt;&gt;&gt; print(conv_est.astimezone())
2019-03-06 19:04:49.841881+00:00
</code></pre>
<hr/>
<p>You can test that yourself by calculating the difference (which will be 0):</p>
<pre><code>&gt;&gt;&gt; conv_est == conv_est.astimezone()
True
&gt;&gt;&gt; conv_est - conv_est.astimezone()
datetime.timedelta(0)
</code></pre>
</div>
<span class="comment-copy">Does that answer your question or did I misunderstand your issue?</span>
<span class="comment-copy">Yeah i believe that is whats happening, do you know of a way that i can print out the conv_est in a format where the offset is 0? so have conv_est print out as something like 9:12 est</span>
<span class="comment-copy">You mean to just hide the timezone offset in the output string?</span>
<span class="comment-copy">I figured it out, I was misunderstanding the astimezone method, I found that i can just take the original_utc and call original_utc.astimezone(pytz.timezone('US/Eastern')) and it will give me 09:08:49 which is what i was looking for, thank you for the help! I marked your answer as correct.</span>
