<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/23703109/difference-between-using-and-list-in-python">Difference between using [] and list() in Python</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>This question is rather "conceptual" than a specific programming one. </p>
<p>If you ask the type of this object in Python:</p>
<pre><code>[4,3,2,1]
</code></pre>
<p>Python will tell you it is a list, as can be seen by doing:</p>
<pre><code>type([4,2,3])
Out[12]: list
</code></pre>
<p>In general, the brackets seem to have this effect on a group of objects, whenever you surround them with brackets, they become a list.</p>
<p>Now consider a pandas dataframe. It is known that to get to know the names of the columns you should do, for instance:</p>
<pre><code>list(iris)
Out[13]: ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
</code></pre>
<p>Which will give you the columns names as a list.</p>
<p>Now if I try:</p>
<pre><code>[iris]
</code></pre>
<p>Python returns the whole iris dataframe.</p>
<p>Why is that? Why sometimes the brackets behave as if creating a list out of a group of objects and sometimes not (as in the second case of this example)?</p>
<p>I tried searching Python foruns for this question but was unable to find an answer that I could either understand or be satisfied with.</p>
<p>Best regards,</p>
<p>Gustavo,</p>
</div>
<div class="post-text" itemprop="text">
<p>Because the <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer">list built-in</a> is a function, that creates a new list. When this function receives an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a> as first parameter as in your example, the list will contain all the members of the iterable.</p>
<p>Using square brackets also creates a new list, but with the elements between the square brackets a items.</p>
<p>So calling <code>list(iterable)</code> results in a list containing each element of the iterable while <code>[iterable]</code> results in a list containing the whole iterable itself.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; iterable = range(10)
&gt;&gt;&gt; list(iterable)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; [iterable]
[range(0, 10)]
</code></pre>
<p>For more information about to different ways to create a list, take a look at <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">the documentation for pythons list class</a></p>
</div>
<span class="comment-copy">Hi kalehmann thanks for the quick answer. What do you mean by "its first argument"?. It seems to me that every operator has to work on some "content". I got one answer but it raised another one (the classic learning process :) ). Now I need to understand the difference between "first argument" and "its content". Best regards.</span>
<span class="comment-copy">You're welcome!</span>
<span class="comment-copy">Sorry for my late edit. I pressed enter before finishing writing my whole comment. Anyhow, you will be even more welcome if you elaborate on my new comment about your first answer. Best regards, Gustavo.</span>
<span class="comment-copy">I have updated my answer, feel to mark it as accepted if it answers your questions</span>
<span class="comment-copy">If think I got the point. At first site they give you the same answer but with slightly different methods which in the end may have different results. The function "list" gets the arguments and if they are iterable it iterates over them and produce several itens, one per iterable as a result. The brackets on the other hand creates a list with whatever you give to it, be it iterable or not. Thanks a lot for your help. It helped me clarifying my understanding of Python! Best regards. PS: As soon as I have earned my 15 points I will upvote your answer.</span>
