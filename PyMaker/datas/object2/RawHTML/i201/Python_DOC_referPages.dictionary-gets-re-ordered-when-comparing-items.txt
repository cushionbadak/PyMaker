<div class="post-text" itemprop="text">
<p>I'm comparing a dictionary <code>LIVE_DEPARTURES_DATA</code> of ferry departures to determine if they have the same <code>DEPARTURE TIME</code> and <code>DEPARTURE PORT</code>. As I loop through it and do the relevant checks I noticed the order of the items is changed.</p>
<pre><code>live_departures_data = [{"COMPANY": "Alilauro", "DEPARTURE PORT": "Ischia", "ARRIVAL PORT": "Napoli Molo Beverello", "DEPARTURE DATE": "2019-03-03", "DEPARTURE TIME": "08:40", "ARRIVAL DATE": "2019-03-03", "ARRIVAL TIME": "09:30", "DURATION": "00:50:00", "FERRY TYPE": "Aliscafo", "STATUS": "Active"}, {"COMPANY": "Alilauro", "DEPARTURE PORT": "Procida", "ARRIVAL PORT": "Casamicciola", "DEPARTURE DATE": "2019-03-03", "DEPARTURE TIME": "08:40", "ARRIVAL DATE": "2019-03-03", "ARRIVAL TIME": "09:30", "DURATION": "00:50:00", "FERRY TYPE": "Aliscafo", "STATUS": "Active"}, {"COMPANY": "Alilauro", "DEPARTURE PORT": "Procida", "ARRIVAL PORT": "Napoli Molo Beverello", "DEPARTURE DATE": "2019-03-03", "DEPARTURE TIME": "08:40", "ARRIVAL DATE": "2019-03-03", "ARRIVAL TIME": "09:30", "DURATION": "00:50:00", "FERRY TYPE": "Aliscafo", "STATUS": "Active"}]

for i in range(len(live_departures_data)):
   for j in range(i + 1, len(live_departures_data)):
       if live_departures_data[i]["ARRIVAL PORT"] == live_departures_data[j]["ARRIVAL PORT"] and live_departures_data[i]["DEPARTURE TIME"] == live_departures_data[j]["DEPARTURE TIME"]:  
                live_departures_data[i].update({'STOPS': 'Via Procida'})
                live_departures_data[j].update({'STOPS': 'Via Procida'})

print(live_departures_data) 
</code></pre>
<p>The output is the following - why has the order changed?</p>
<pre><code>[{'STATUS': 'Active', 'ARRIVAL DATE': '2019-03-03', 'DEPARTURE DATE': '2019-03-03', 'STOPS': 'Via Procida', 'DURATION': '00:50:00', 'ARRIVAL PORT': 'Napoli Molo Beverello', 'COMPANY': 'Alilauro', 'ARRIVAL TIME': '09:30', 'FERRY TYPE': 'Aliscafo', 'DEPARTURE TIME': '08:40', ...
</code></pre>
<hr/>
<p>UPDATE:</p>
<p>I've updated to Python 3.7 and run my code. My initial order is kept.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries are defined as unordered key-value pairs. So, you can't rely on their ordering. If you want the order to be stable, use <code>collections.OrderedDict</code></p>
</div>
<span class="comment-copy">because dictionaries are unordered - try using <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> instead.</span>
<span class="comment-copy">@Phydeaux <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">before version 3.6 *</a></span>
<span class="comment-copy">@Daniela you can also just go <code>for live_departure in live_departures_data:</code>, you don't need to use the ranges and indexes. If you DO need the index, you should use <code>enumerate()</code>.</span>
<span class="comment-copy">@Soviut Thanks I didn't know about <code>enumerate()</code> it looks like it's what I need</span>
<span class="comment-copy">@Daniela Your example doesn't need to enumerate at all. You can nest 2 <code>for in</code> loops.</span>
<span class="comment-copy">This is no longer entirely correct. <code>dict</code> <i>is</i> guaranteed to be order as of Python 3.7 (though it was introduced as an implementation detail in CPython 3.6).</span>
<span class="comment-copy">@chepner: interesting!!</span>
