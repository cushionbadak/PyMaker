<div class="post-text" itemprop="text">
<p>consider this :</p>
<pre><code>A,B=[],[]
for i in range(0,n):
    item=manipulate(data,i)
    A += [nextSerieA(data,i,item)]
    B += [nextSerieB(data,i,item)]

for a in A:
    doSmt(a)

for b in B:
    doSmt(b)
</code></pre>
<p>if <code>n</code> is very large number and <code>manipulate</code> takes long to execute ill wait for ever for <code>doSmt</code> to be called.</p>
<p>so i want to use generators to make <code>doSmt</code> start being called sooner for example :</p>
<pre><code>def genA():
    for i in range(0,n):
        item=manipulate(data,i)
        yield nextSerieA(data,i,item)

def genB():
    for i in range(0,n):
        item=manipulate(data,i)
        yield nextSerieB(data,i,item)

for a in genA():
    doSmt(a)

for b in genB():
    doSmt(b)
</code></pre>
<p>The problem with this approach is that <code>manipulate</code> gets called twice for each item in the input serie, and in case manipulate is heavy operation its redundant and i want to avoid it.</p>
<p>The next step towards the most optimal code would be :</p>
<pre><code>def manipulate():
    for i in range(0,n):
        yield i,manipulate(data,i)

def genA():
    for i,item in manipulate():
        yield nextSerieA(data,i,item)

def genB():
    for i,item in manipulate():
        yield nextSerieB(data,i,item)

for a in genA():
    doSmt(a)

for b in genB():
    doSmt(b)
</code></pre>
<p>but still <code>manipulate</code> will be called twice per input. whats the right way to get what i want and make sure its optimal, i.e <code>manipulate</code> called once per input item?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer">itertools.tee</a> which uses queue under the hood to store the generated items. </p>
<pre><code>def manipulate():
    for i in range(0,n):
        yield manipulate(data,i)
(genA,genB) = itertools.tee(manipulate())
</code></pre>
<p>It will save some computational resources as manipulate will be called one per item.</p>
<p>However, if the processing is sequential as in the example (first process genA and the genB), it will require significant auxiliary storage.</p>
</div>
