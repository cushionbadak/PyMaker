<div class="post-text" itemprop="text">
<p>I don't understand how the i in the 2nd for loop of the code below works.</p>
<pre><code>di = [96, 15, 33, 87]
for i in range(len(di)):
    total = di[i]
    for j in range(i+1,len(di)):
        print(i)
0
0
0
1
1
2
</code></pre>
<p>Why is the output 0,0,0,1,1,2. How does i in the 2nd for loop get affected from the first loop? Is there some inheritance? Pardon the newbie here. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>len(di)</code> is 4. So the loop </p>
<pre><code>for i in range(len(di)):
</code></pre>
<p>will repeat 4 times. Because of the way <code>range</code> works (from lower bound, which is 0 by default if not specified, to 1 below the upper bound), <code>i</code> will be <code>0</code> in the first repetition, <code>1</code> in the second repetition, and so on. To calculate out how many objects <code>range(x, y)</code> generates, in this case, how often <code>for i in range(x, y)</code>will repeat, you can simply do <code>number of repetitions = y - x</code>. So in this case: <code>len(di) - 0 (default lower bound) = 4</code>.</p>
<p>The loop </p>
<pre><code>for j in range(i+1, len(di)):
    print(i)
</code></pre>
<p>will repeat the <code>print(i)</code> command <code>len(di) - (i + 1)</code> times. Keep in mind, <code>i</code> is defined by the outer loop. So, during the first loop of</p>
<pre><code>for i in range(len(di)):
</code></pre>
<p><code>i</code> equals <code>0</code>, so the <code>print(i)</code> command will be executed <code>4 - (0+1) = 3</code> times - it will print <code>i(=0)</code>  3 times. In the second loop, <code>i</code>equals 1, so it will be printed 2 times, and so on. So here's whats happening, formatted as code for better readability:</p>
<pre><code>First outer loop: 
i = 0
total = di[i] = di[0] = 96
--&gt; first inner loop of first outer loop:
    j = i + 1 = 1
    i is printed -&gt; prints 0

    second inner loop of first outer loop:
    j = j+1 = 2
    i is printed -&gt; prints 0 again

    third inner loop of first outer loop:
    j = j+1 = 3 --&gt; since len(di) = 4, the upper bound of range(i+1, len(di)) is reached, so this is the last Repetition
    i is printed -&gt; prints 0 again

Second outer loop:
i = 1
total = di[1] = 15
--&gt; first inner loop of second outer loop:
    j = i+1 = 2
    i is printed -&gt; prints 1

    second inner loop of second outer loop:
    j = i+1 = 3  -&gt; upper bound of range reached, last repetition
    i is printed -&gt; prints 1 again

Third outer loop:
i = 2
total = di[2] = 33
--&gt; first inner loop of third outer loop:
    j = i+1 = 3  -&gt; upper bound of range is reached, only Repetition
    i is printed -&gt; prints 2

Fourth (and final) outer loop:
i = 3 -&gt; upper bound of range(len(di)) reached, last Repetition
total = di[3] = 87
since j = i+1 = 4, the inner loop does not get executed at all (both bounds of range are equal), so 3 doesn't get printed

end of code.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In programming language, a variable is available for usage within a scope. When you start for loop with a new variable then it would be available for usage until you end it.</p>
<p>As you are beginning the journey to learn python, one of the really good practice is to read official document. <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To help your understanding, try this: </p>
<pre><code>di = [96, 15, 33, 87]
for i in range(len(di)):
    print("first loop, i =", i)
    total = di[i]
    for j in range(i+1,len(di)):
        print("second loop, j =", j)
        print("second loop, i =", i)
</code></pre>
<p>The i is the same in both loops. each time the outer loop runs, it then runs the inner loop until the "for" statement is complete. </p>
</div>
<span class="comment-copy">Try using a debugger to step through the program and take a look at the values of <code>i</code> and <code>j</code> at each step.</span>
<span class="comment-copy">you are printing <code>i</code> inside the <code>j</code>-loop - <code>i</code> does not change inside of it. It is printed fewer times because the <code>j</code> loop gets shorter the bigger <code>i</code> gets.</span>
<span class="comment-copy">There is is nothing specific to Python in this question. It's a general (newbie) programming question. Try printing (i, j) to see what is happening.</span>
<span class="comment-copy">In Python you should generally avoid the range function. For instance, the outer for loop should be: <code>for total in di:</code></span>
<span class="comment-copy">This question has nothing to do with <code>range</code></span>
