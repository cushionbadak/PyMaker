<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4901815/object-of-custom-type-as-dictionary-key">Object of custom type as dictionary key</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/1608842/types-that-define-eq-are-unhashable">Types that define `__eq__` are unhashable?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/7152497/making-a-python-user-defined-class-sortable-hashable">Making a python user-defined class sortable, hashable</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a class <code>MyClass</code> where I have also overridden the <code>__eq__</code> method for comparing two objects of the class as I want to, and I can do this:</p>
<pre><code>obj1 = MyClass(a = 2)
obj2 = MyClass(a = 2)

obj1 == obj2 # gives me True
</code></pre>
<p>Now my problem is that I have two lists including objects of this class, and I want to compare whether or not the <code>set</code> of these two lists are the same. Such that I expect that:</p>
<pre><code>list1 = [MyClass(a=1), MyClass(a=2)]
list2 = [MyClass(a=2), MyClass(a=1)]

set(list1) == set(list2)
</code></pre>
<p>gives me <code>True</code>. But I run into this error:</p>
<pre><code>TypeError: unhashable type: 'MyClass'
</code></pre>
<p>which is clearly because of the <code>set()</code> line. How can I do this? (I don't care about using or not using <code>set</code> as long as I can compare two lists of objects compared regardless of their order.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at the <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">python docs</a> concerning what makes a class hashable. You will need to implement both <code>__eq__</code> and <code>__hash__</code>. You will need to ensure that objects that are <em>equal</em> to one another also produce the same hash value.</p>
</div>
