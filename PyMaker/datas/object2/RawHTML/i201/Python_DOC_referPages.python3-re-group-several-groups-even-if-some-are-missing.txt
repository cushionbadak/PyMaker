<div class="post-text" itemprop="text">
<p>I have a list of duration times formatted like this:</p>
<pre><code>['PT1H38M55S', 'PT25M28S', 'PT2H26S', ...]
</code></pre>
<p>I tried such grouping:</p>
<pre><code>import re
re.search('PT([0-9]+|)H?([0-9]+|)M?([0-9]+|)S?', x).group(1, 2, 3)
</code></pre>
<p>where x is any element from the list, because I want a time() format from it:</p>
<pre><code>from datetime import time
def parse_duration(x):
    HMS = re.search('PT([0-9]+)H([0-9]+)M([0-9]+)S', x).group(1, 2, 3)
    return time(int(HMS[0]), int(HMS[1]), int(HMS[2]))
</code></pre>
<p>But when there is no match, the code breaks.</p>
<p>Is there a solution to fill unmatched search with zero (for example) or another attempt would be easier?</p>
<p>I've found such method, but I couldn't apply it to my case:
<a href="https://stackoverflow.com/questions/46989264/how-to-ignore-unmatched-group-in-a-string-in-re-python">How to ignore unmatched group in a string in re python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/re.html#re.Match.groups" rel="nofollow noreferrer"><code>Match.groups</code></a>:</p>
<pre><code>def parse_duration(x):
    HMS = re.search('PT(?:([0-9]+)H)?(?:([0-9]+)M)?(?:([0-9]+)S)?', x).groups(0)
    return time(*map(int, HMS))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This solution provides tuples that include <code>None</code> for missing elements:</p>
<pre><code>l = ['PT1H38M55S', 'PT25M28S', 'PT2H26S']
for i in l:
    result = re.search('PT([0-9]+H)?([0-9]+M)?([0-9]+S)?', i)
    if result:
        print(result.groups())
</code></pre>
<p>Output:</p>
<pre><code>('1H', '38M', '55S')
(None, '25M', '28S')
('2H', None, '26S')
</code></pre>
<p>The regular expression reads as follows:
<code>([0-9]+H)?</code> &lt;-- This will match the 1 or more digits followed by a literal <code>H</code>, but the entire term is optional because it is followed by a <code>?</code>.</p>
</div>
<span class="comment-copy">It appears that this solution only captures the H portion of the string and discards the H and M groups due to the non capturing groups. I could be missing something though.</span>
