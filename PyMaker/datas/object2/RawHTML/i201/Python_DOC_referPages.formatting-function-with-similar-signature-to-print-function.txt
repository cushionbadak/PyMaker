<div class="post-text" itemprop="text">
<p>I have some code that prints stuff to console using some of the <code>print</code> function's capabilities, e.g.</p>
<pre><code>print('name'.ljust(44), 'age'.rjust(4), 'idea'.rjust(8), sep=',')
for name, age, idea in items:    
    print(name.ljust(44), str(age).rjust(4), idea.rjust(8), sep=',')
</code></pre>
<p>In other cases I will use the <code>end</code> parameter to write multiple strings to a single line, i.e. </p>
<pre><code>print('hello ', end='')
print('world!')
</code></pre>
<p>My question is how could I most easily write this <code>print</code> formatted output to a stream, a file, or even better just collect into a single string object? If I revert to regular string formatting the syntax will be different and I'll need to re-write all my formatting.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow noreferrer">StringIO</a> allows you to use a string as if it were a file. Along with using <code>print(..., file=...)</code> you can then do:</p>
<pre><code>import io

with io.StringIO() as fp:
    print("hi", "mom", sep=" ", file=fp)
    print('hello ', end='', file=fp)
    print('world!', file=fp)

    str = fp.getvalue()

print(str)
</code></pre>
<p>which gives</p>
<pre><code>hi mom
hello world!
</code></pre>
<p>as (I think) you want. You can also use <code>fp.readlines()</code> if you want a list of strings for each line.</p>
<p>You can also use a <a href="https://docs.python.org/3/library/tempfile.html#module-tempfile" rel="nofollow noreferrer">tempfile</a> which may use the filesystem (but may not), with almost identical syntax:</p>
<pre><code>import tempfile

with tempfile.TemporaryFile(mode="w+") as fp:
    print("hi", "mom", sep=" ", file=fp)
    print('hello ', end='', file=fp)
    print('world!', file=fp)

    fp.seek(0)
    str = fp.read()

print(str)
</code></pre>
<p>You do need to specify the <code>mode</code> as the default gives a binary file which doesn't let you <code>print</code>, and explicitly rewind back to the beginning before reading. (FWIW, an earlier version of my answer had <code>flush=True</code> for each <code>print</code> but I don't think that's needed.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Does pickle help you out?</p>
<p>Something like</p>
<pre><code>import pickle

text = "Hallo welt          Test."

with open('parrot.pkl', 'wb') as f:
    pickle.dump(text, f)


with open('parrot.pkl', 'rb') as f:
    print(pickle.load(f))
</code></pre>
</div>
<span class="comment-copy">What's wrong with <code>print()</code>?  It takes an optional <code>file=</code> parameter, that can specify a file or file-like object (such as <code>StringIO</code> to collect into a string).  If you don't want to modify all your <code>print</code>s to add this parameter, you can temporarily replace <code>sys.stdout</code> with the file or file-like object.</span>
<span class="comment-copy">@jasonharper then that's the answer, thanks.</span>
<span class="comment-copy">It might if I could easily print to the pickle file. Probably is that I don't have a variable like your <code>text</code> that simply contains all the text.</span>
