<div class="post-text" itemprop="text">
<p>In Python 3.7     <code>int(x-1) == x</code> is   <code>True</code>  for <code>x = 5e+17</code>
Why is this so and how do I prevent this bug?</p>
<p>To reproduce, paste this into your Python console:</p>
<pre><code>int(5e+17-1) == 5e+17
&gt;True
</code></pre>
<p>(I am using <code>int</code> because x is the result of a division and I need to parse it as int.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's start by establishing that <code>5 == 5.0</code> is <code>True</code> even though <code>5</code> is an <code>int</code> and <code>5.0</code> is a <code>float</code>. This is by design.</p>
<p>If we keep that in mind, then we can also accept that <code>int(5e+17) == 5e+17</code> is <code>True</code>.</p>
<p>Finally, we see that <code>int(5e+17) == int(5e+17-1)</code> is also <code>True</code> because of <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="noreferrer">precision</a> errors (Thanks @juanpa.arrivillaga for the link). </p>
<p>Now it is clear why <code>int(5e+17-1) == 5e+17</code> is <code>True</code>.</p>
<p>This can be solved by using <a href="https://docs.python.org/3.7/library/decimal.html" rel="noreferrer"><code>Decimal</code></a> but be sure to initialize it with a string:</p>
<pre><code>from decimal import Decimal

Decimal('5e+17') - 1 ==  Decimal('5e+17')

# False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>float</code> is stored as a <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="nofollow noreferrer">double-precision floating point</a> number.  They only have 53 bits of precision, so integers larger than 2<sup>53</sup> stored as floats begin to lose precision.  Here's a clear example of how large numbers begin to lose precision:</p>
<pre><code>&gt;&gt;&gt; x = float(2**53-10)
&gt;&gt;&gt; x
9007199254740982.0
&gt;&gt;&gt; for i in range(20):
...   print(x+i)
...
9007199254740982.0
9007199254740983.0
9007199254740984.0
9007199254740985.0
9007199254740986.0
9007199254740987.0
9007199254740988.0
9007199254740989.0
9007199254740990.0
9007199254740991.0  &lt;--- 2**53-1
9007199254740992.0  &lt;--- 2**53
9007199254740992.0  &lt;--- NOT 2**53+1
9007199254740994.0  &lt;--- 2**53+2
9007199254740996.0
9007199254740996.0
9007199254740996.0
9007199254740998.0
9007199254741000.0
9007199254741000.0
9007199254741000.0
</code></pre>
<p>The above number is approximately 9e+15, so your 1e+17 number is well into loss of precision.  <strong>You have to add/subtract 16 from floats that large to expect a change in stored value</strong>:</p>
<pre><code>&gt;&gt;&gt; x = 1e17
&gt;&gt;&gt; for i in range(20):
...  print(f'{x+i:.1f}')
...
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000000.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
100000000000000016.0
</code></pre>
<p>Python has functions to convert to and from an exact binary floating point value.  The 1 before and 13 hexadecimal digits after the decimal indicate the 53-bit value:</p>
<pre><code>&gt;&gt;&gt; (1e17).hex()
'0x1.6345785d8a000p+56'
&gt;&gt;&gt; print(f"{float.fromhex('0x1.6345785d8a000p56'):.1f}")
100000000000000000.0
</code></pre>
<p>Adding one to the 53-bit value:</p>
<pre><code>&gt;&gt;&gt; print(f"{float.fromhex('0x1.6345785d8a001p56'):.1f}")
100000000000000016.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>5e+17</code> is a <a href="https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-floatnumber" rel="nofollow noreferrer">floating point literal</a> not an integer literal.</p>
<p>In CPython, <code>float</code> type is a double precision float which is <a href="https://en.wikipedia.org/wiki/IEEE_754" rel="nofollow noreferrer">64-bit IEEE 754</a> in most current CPUs. This means you only have 53 bits to represent the digits (about 16 decimal digits). Extra digits will be lost. For example:</p>
<pre><code>&gt;&gt;&gt; 111111111111111119.0 == 111111111111111118.0
True
&gt;&gt;&gt; 0.111111111111111119 == 0.111111111111111118
True
</code></pre>
<p>While:</p>
<pre><code>&gt;&gt;&gt; 111111111111111119 == 111111111111111118
False
</code></pre>
<p>OTH, you can use integers; While 64-bit integers can only represent about 19 decimal digits, Python will automatically create unlimited precision integer objects instead of machine-size integers when required.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; 5*10**17-1
499999999999999999

&gt;&gt;&gt; 5*10**70 -1
49999999999999999999999999999999999999999999999999999999999999999999999

&gt;&gt;&gt; a = 5*10**100 
&gt;&gt;&gt; a
50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
&gt;&gt;&gt; a-1 == a
False
</code></pre>
<p>Since you want to process the result as int, you can convert it to an integer after the division  before further processing to preserve precision:</p>
<pre><code>&gt;&gt;&gt; int(5e+17)-1 == 5 * 10**17
False
</code></pre>
</div>
<span class="comment-copy">If you expand <code>5e+17</code> then it will return <code>False</code> -&gt; <code>(500000000000000000 - 1) == 5e17 [OUT] False</code></span>
<span class="comment-copy">In python, 5e17 is a floating point value and has a limited precision. You can try parsing to int first: <code>int(5e17)-1 == int(5e17)</code> is <code>False</code>.</span>
<span class="comment-copy">it is a decimal approximation failure</span>
<span class="comment-copy">How to prevent it? I mean how to force the precision to be correct?</span>
<span class="comment-copy">I don't understand the precision thing</span>
<span class="comment-copy">Not OP but I was just playing around with this in my console, good answer.  Is there a part in the documentation that talks about this precision?  It would be helpful to understand it further.</span>
<span class="comment-copy">@DeepSpace <code>Decimal</code> should help, but you can't start by feeding it an imprecise <code>float</code>, you have to give it a <code>str</code></span>
<span class="comment-copy">@Carlos Python <code>float</code> objects represent fixed-size (usually 64-bit) floating point numbers, <code>int</code> objects on the other hand have arbitrary size. So see <a href="https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex" rel="nofollow noreferrer">here</a></span>
