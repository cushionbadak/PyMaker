<div class="post-text" itemprop="text">
<p>I want to insert a python script, (which just print out input) inside for loop. Problem: in place of taking "i" as a variable - it just prints "i", not "string1", "string2".
I tried:</p>
<pre><code>for i in ['string1, string2']:
    os.system("python scriptWhichPrintsInput.py i")
...
i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use format or string concatenation:</p>
<pre><code>os.system("python scriptWhichPrintsInput.py " + i)
</code></pre>
<p>Or:</p>
<pre><code>os.system("python scriptWhichPrintsInput.py {}".format(i))
</code></pre>
<p>See docs for <a href="https://docs.python.org/2/library/string.html#custom-string-formatting" rel="nofollow noreferrer">Python 2</a> and for <a href="https://docs.python.org/3.4/library/string.html#string-formatting" rel="nofollow noreferrer">Python 3</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Not too sure why you would want to do it this way, but here goes.</p>
<h2>The TLDR:</h2>
<p>First, you'll want to parse the argument dynamically at runtime (not just the char 'i' in your string!) So try,</p>
<pre><code>for i in ['string1', 'string2']:
    os.system("python scriptWhichPrintsInput.py {}".format(i)) 
...
i
</code></pre>
<ul>
<li>see: <a href="https://docs.python.org/3.4/library/string.html#string-formatting" rel="nofollow noreferrer">the docs here</a> on string formatting.</li>
<li>also fixed (I assume typo) on your strings by closing the apostrophes.</li>
</ul>
<p>Then, I would assume, your other python script is some function, <code>foo()</code>, that takes an input, <code>i</code>, such as; </p>
<pre><code>foo(i, *args, **kwargs):
    # insert your script function here...
    pass
</code></pre>
<h2>The Long Way:</h2>
<p>This is what I'd probably do instead.</p>
<p>Rather than parsing a string representation of my script with the <code>os</code> dependency, I'd make the script importable (call it <code>scriptWhichPrintsInput.py</code>) then just make sure it's on my Python path (read more <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">here</a>). Such as,</p>
<pre><code># your scriptWhichPrintsInput.py file
foo(i, *args, **kwargs):
    # do something with your input...
    print(i)
    return
</code></pre>
<p>Then in your other script (as above),</p>
<pre><code># your scriptWhichPrintsInput.py file
from .scriptWhichPrintsInput import foo if your script is in the same folder, easy!

for i in ['string1', 'string2']:
    foo(i)
...
i # do whatever you need to do here!
</code></pre>
</div>
<span class="comment-copy">you are using i as a hardcoded string. not as a variable</span>
<span class="comment-copy">i should also add, you shouldn't be using os.system to run other python scripts. Take a look at importing other scripts as modules.</span>
<span class="comment-copy">I agree with Paritosh Singh. What is the point to call a python module using <code>os.system</code> ? Use <code>import</code> instead.</span>
<span class="comment-copy">Or with new f-strings <code>os.system(f"python scriptWhichPrintsInput.py {i}")</code></span>
<span class="comment-copy">Thanks @ozlevka . I am coming from the world of bash, so I would like to ask this: if I have string1 and string2 written in text file - myFile, what will be a parallel to "for i in $(cat myFile)...."</span>
<span class="comment-copy">That's <a href="https://mywiki.wooledge.org/DontReadLinesWithFor" rel="nofollow noreferrer">not good style in Bash</a> either. The way to translate <code>while read -r i ... done &lt;myFile</code> to Python is <code>with open('myFile') as f: for line in f: i=line.rstrip('\n') ...</code></span>
<span class="comment-copy">I vote for @tripleee comment</span>
<span class="comment-copy">Out of curiosity, would this method lead to an appreciable difference in performance? I would assume so if you're not explicitly importing a module and performing a file lookup each loop....</span>
