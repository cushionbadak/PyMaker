<div class="post-text" itemprop="text">
<p>I want to take two lists with dict value and find the specific values that appear only in first list.</p>
<p>In this case, only compare 'name' key.</p>
<pre><code>a = [
       {'name': 'joseph', 'age': 33}, 
       {'name': 'Emma', 'age': 11}, 
       {'name': 'apple', 'age': 44}
    ]
b = [ 
       {'name': 'apple', 'age': 44}, 
       {'name': 'Emma', 'age': 22}
    ]
</code></pre>
<p><code>returnOnlyOne(a, b)</code> 
would return <code>[{'name': 'joseph', 'age': 33}]</code>, for instance.</p>
<p>The <code>set()</code> solution is not for this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>For efficiency, we first make a <code>set</code> of the names in <code>b</code>, then <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a> the list <code>a</code>:</p>
<pre><code>from operator import itemgetter

def returnOnlyOne(a, b):
    b_names = set(map(itemgetter('name'), b))
    only_in_a = list(filter(lambda item: item['name'] not in b_names, a))
    return only_in_a
</code></pre>
<p>Sample output:</p>
<pre><code>a = [
       {'name': 'joseph', 'age': 33}, 
       {'name': 'Emma', 'age': 11}, 
       {'name': 'apple', 'age': 44}
    ]
b = [ 
       {'name': 'apple', 'age': 44}, 
       {'name': 'Emma', 'age': 22}
    ]

print(returnOnlyOne(a, b))
# [{'name': 'joseph', 'age': 33}]
</code></pre>
<p>If you don't like <code>itemgetter</code>, <code>filter</code> and the like, you can write the same using comprehensions:</p>
<pre><code>def returnOnlyOne(a, b):
    b_names = set(item['name'] for item in b)
    return [ item for item in a if item['name'] not in b_names]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>list</code> comprehension with <code>map</code>. (BTW, what's inside your <code>list</code> is called <code>dict</code>):</p>
<pre><code>[d for d in a if d.get('name') not in list(map(lambda x:x.get('name'), b))]
# [{'age': 33, 'name': 'joseph'}]
</code></pre>
<p>Explanation:</p>
<ul>
<li><code>list(map(lambda x:x.get('name'), b))</code>: gets all <em>name</em> from <code>b</code></li>
<li><code>d.get('name') not in</code>: checks if <em>name</em> from <code>a</code> doesn't exist in <code>b</code>. (i.e. appear only in first list)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Nearly the same as the others.</p>
<pre><code>print([ item for item in a if item['name'] not in set(item['name'] for item in b)])
</code></pre>
</div>
