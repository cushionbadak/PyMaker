<div class="post-text" itemprop="text">
<p>For given set, and sum, and length of elements, <br/>
I want to get the boolean value whether the set satisfy the condition</p>
<p>For example...</p>
<pre><code>Input : set = [18,0,2,20], sum = 20, length = 2 &lt;br&gt;
Output : True (subset [18,2] satisfy the sum=20 for given length 2)
</code></pre>
<hr/>
<pre><code>Input : set = [18,0,2,20], sum = 22, length = 1 &lt;br&gt;
Output : False
</code></pre>
<p>How can I solve the problem if there is a given length constraint?<br/>
(I can solve it easily if there is no length condition:
<a href="https://www.geeksforgeeks.org/subset-sum-problem-dp-25/" rel="nofollow noreferrer">subset-sum-problem</a>)</p>
<pre><code>def isSubsetSum(set, n, sum):
    if sum == 0:
        return True
    if (sum != 0) and (n == 0):
        return False
    if (set[n-1] &gt; sum):
        return isSubsetSum(set,n-1,sum)
    # (a) including the last element
    # (b) excluding the last element
    # Not "AND", But "OR" !!!!!
    return isSubsetSum(set,n-1,sum) or isSubsetSum(set,n-1,sum-set[n-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're allowed to use imported modules, <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a> has a combinations function that can make this quite easy:</p>
<pre class="lang-py prettyprint-override"><code>from itertools import combinations
set    = [18,0,2,20]
total  = 20
length = 2
result = [ c for c in combinations(set,length) if sum(c) == total ]
if result: 
  print("True, subset ",result[0],"satisfies the sum", total, "given length",length)
else: 
  print("False")
</code></pre>
<p>If you need it to be a recursive function, consider that for each element <code>X</code> in the set, if you can find a subset of <code>N-1</code> elements in the subsequent elements that total <code>sum-X</code>, you have a solution for <code>sum/length=N</code>.</p>
<p>For example:</p>
<pre class="lang-py prettyprint-override"><code>def subSum(numbers,total,length):
  if len(numbers) &lt; length or length &lt; 1:
    return []
  for index,number in enumerate(numbers):
    if length == 1 and number == total:
      return [number]
    subset = subSum(numbers[index+1:],total-number,length-1)
    if subset: 
      return [number] + subset
  return []
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>itertools.combinations</code>:</p>
<pre><code>from itertools import combinations

inp = [18,0,2,20]
length = 2
sum_ = 20

def isSubsetSum(data, length, sum_):
    data = [i[0]+i[1] for i in combinations(data,length)]
    if sum_ in data:
        return True
    return False

print(isSubsetSum(inp,length, sum_))
</code></pre>
</div>
