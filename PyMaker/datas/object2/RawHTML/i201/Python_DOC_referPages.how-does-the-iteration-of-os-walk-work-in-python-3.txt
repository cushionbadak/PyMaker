<div class="post-text" itemprop="text">
<p>According to the Python 3 <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">docs</a> <code>os.walk</code> returns a 3-tuple. However, this does not work:</p>
<pre><code>root, dirs, files = os.walk('path')
</code></pre>
<p>Neither does this:</p>
<pre><code>(root, dirs, files) = os.walk('path')
</code></pre>
<p>It always yields:</p>
<pre><code>ValueError: not enough values to unpack (expected 3, got 1)
</code></pre>
<p>All the examples for <code>os.walk</code> I found embed <code>os.walk</code> in a for loop:</p>
<pre><code>for root, dirs, files in os.walk('path'):
</code></pre>
<p>Why? What exactly will be iterated here? <code>root</code> is a string, <code>dirs</code> and <code>files</code> are lists. However, most examples iterate again over <code>dirs</code> and <code>files</code>:</p>
<pre><code>for root, dirs, files in os.walk('path'):
    for name in files:
        print(name)
    for name in dirs:
        print(name)
</code></pre>
<p>The inner for loops make sense to me, but I don't get what the outer for loop is for.</p>
<p>And why does the assignment to the 3-tuple work when <code>os.walk</code> is embedded in a for loop, but not without one?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.walk</code> doesn't <strong>return a</strong> 3-tuple, it <strong>yields multiple</strong> 3-tuples. From <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>For each directory in the tree rooted at directory <em>top</em> (including <em>top</em> itself), it yields a 3-tuple <code>(dirpath, dirnames, filenames)</code>.</p>
</blockquote>
<p>For how yielding works, see <a href="https://stackoverflow.com/q/231767/4518341">What does the "yield" keyword do?</a> (You can ignore the example code given by OP.) Technically <code>os.walk</code> returns a generator that yields the 3-tuples.</p>
<p>The outer <code>for</code> loop iterates over the 3-tuples. You're probably confused by the unpacking that happens in the same step. So to be clear,</p>
<pre><code>for dirpath, dirnames, filenames in os.walk(top):
</code></pre>
<p>is effectively the same as</p>
<pre><code>for branch in os.walk(top):
    dirpath, dirnames, filenames = branch
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.walk returns an <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer">generator</a> not a tuple!
If you want to look up values from your generator output convert it to a list:</p>
<pre><code>test = list(os.walk("."))
</code></pre>
</div>
<span class="comment-copy">I seems to yield root, dirs and files. So if you are in A, it will yield /A, dirsinsideA and filesinsideA. Next iteration will yield the first subdirectory. It is my guess.</span>
<span class="comment-copy">Just because you can do <code>for x,y,z in some_iterable</code> does <b>not mean</b> you can do <code>x,y,z = some_iterable</code>. In fact, that is almost never the case, it only will ever work if <code>some_iterable</code> contains exactly three objects</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10989005/do-i-understand-os-walk-right">Do I understand os.walk right?</a></span>
<span class="comment-copy">Could you please expand on that? What's the difference between returning and yielding?</span>
<span class="comment-copy">Yielding is for iterators. Instead of returning a full length array, it will return only the needed for the iteration, thus saving memory space.</span>
<span class="comment-copy">@user1785730 See <a href="https://stackoverflow.com/q/231767/4518341">What does the “yield” keyword do?</a> (You can ignore the example code OP gives.)</span>
<span class="comment-copy">Thanks, that was an interesting read and answers most of my questions. The one remaining is: What are the values the outer for loop iterates over?</span>
<span class="comment-copy">@user1785730 I added that to my answer</span>
