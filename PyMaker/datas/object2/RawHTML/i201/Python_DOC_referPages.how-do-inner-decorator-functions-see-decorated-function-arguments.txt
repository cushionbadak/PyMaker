<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/739654/how-to-make-a-chain-of-function-decorators">How to make a chain of function decorators?</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to conquer one of the final basic python features that I've avoided using since I started: decorators. I'm not grocking it like i did with list-comps, and I do not understand how an inner function within a decorator declaration works.</p>
<p>Here's an example of what I mean. Given this chunk-o-code:</p>
<pre><code>def outter(func):
    def inner(*args, **kwargs):
        print('Hi my name is ')
        return func(*args, **kwargs)
    return inner

@outter
def decorated(name):
    print(name)


decorated('Bob')
</code></pre>
<p>I understand that this this will print</p>
<pre class="lang-none prettyprint-override"><code>Hi my name is
Bob
</code></pre>
<p>but what I don't understand is how <code>inner</code> obtains any <code>*args</code> or <code>**kwargs</code> from <code>decorated()</code></p>
<p>My understanding is that</p>
<pre><code>@outter
def decorated(name):
    print(name)
decorated("Bob")
</code></pre>
<p>is equivalent to <code>outter(decorated("Bob"))</code>. If this is the case, how would <code>inner()</code> be able to access the <code>name</code> argument? Syntax issues aside, I'd expect the declaration for inner to look like <code>def inner(func.args, func.kwargs):</code></p>
<p>What's going on here? What am I misunderstanding?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>My understanding is that</p>
<pre><code>@outter
def decorated(name):
    print(name)
decorated("Bob")
</code></pre>
<p>is equivalent to <code>outter(decorated("Bob"))</code>.</p>
</blockquote>
<p>That’s wrong. It’s equivalent to <code>outter(decorated)("Bob")</code>. <code>decorated</code> is replaced with the return value of <code>outer(decorated)</code> (which is <code>inner</code>). When you call <code>decorated</code>, you’re actually calling <code>inner</code>.</p>
<p>You can check that interactively:</p>
<pre><code>&gt;&gt;&gt; def outter(func):
...     def inner(*args, **kwargs):
...         print('Hi my name is ')
...         return func(*args, **kwargs)
...     return inner
...
&gt;&gt;&gt; @outter
... def decorated(name):
...     print(name)
...
&gt;&gt;&gt; decorated
&lt;function outter.&lt;locals&gt;.inner at 0x7f5aec3461e0&gt;
</code></pre>
</div>
<span class="comment-copy">Inner <i>itself</i> is defined as a function that takes <code>*args</code> and <code>**kwargs</code>, this is not something the decorator supplies.</span>
<span class="comment-copy">so does part of the @ syntax involve passing the function arguments to <code>inner</code>?</span>
<span class="comment-copy"><code>@outer</code> is called to replace <code>decorated</code>, so <code>decorated("Bob")</code> is <code>inner('bob')</code>.</span>
<span class="comment-copy">Thank you for interactive check tip. I explained decorators (and HOFs) many times but never used interactive python for that.</span>
<span class="comment-copy">@AlexYu: best practice is to use <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>@functool.wraps</code></a> to copy things like the name, docstring and other metadata and attributes over to the replacement wrapper function, in which case the <code>decorated</code> reference will have almost exactly the same <code>repr()</code> output, which is why you can't simply echo the decorated function object in real-life cases. A poor substitute is to echo <code>decorated.__code__</code>, which only includes the name <code>inner</code>, not the full <code>__qualname__</code>.</span>
<span class="comment-copy">@MartijnPieters I'm aware about best practices. But when I explain something to somebody: at first goes explanation of inner work and only after that cames "best practices" and "why they are the best" and "are they really the best"</span>
<span class="comment-copy">@AlexYu: that's good, but what I mean is that a lot of people encounter decorators in a framework or the standard library, at which point Jonas' illustration here will fall flat. It is one of the reasons you don't see much interactive demonstrations.</span>
<span class="comment-copy">@MartijnPieters OK. You are absolutely correct when it cames to writing actual code. But before one will be able to write code - they must be teached how to do it. And that's where interactive explorations are great</span>
