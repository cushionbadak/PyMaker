<div class="post-text" itemprop="text">
<p>Me again... :)</p>
<p>I tried finding an answer to this question but again I was not fortunate enough. So here it is.</p>
<p>What is the difference between calling a numpy array (let's say "iris") and the whole group of data in this array (by using iris[:] for instance). </p>
<p>IÂ´m asking this because of the error that I get when I run the first example (below), while the second example works fine.</p>
<p>Here is the code:</p>
<p>At this first part I load the library and import the dataset from the internet.</p>
<pre><code>import statsmodels.api as sm
iris = sm.datasets.get_rdataset(dataname='iris',
                            package='datasets')['data']
</code></pre>
<p>If I run this code I get an error:</p>
<pre><code>iris.columns.values = [iris.columns.values[x].lower() for x in range( len( iris.columns.values ) ) ]
print(iris.columns.values)
</code></pre>
<p>Now if I run this code it works fine:</p>
<pre><code>iris.columns.values[:] = [iris.columns.values[x].lower() for x in range( len( iris.columns.values ) ) ]
print(iris.columns.values)
</code></pre>
<p>Best regards,</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that when you do <code>iris.columns.values = ...</code> you try to replace the reference of the <code>values</code> property in <code>iris.columns</code> which is protected (see pandas implementation of <code>pandas.core.frame.DataFrame</code>) and when you do <code>iris.columns.values[:] = ...</code> you access the data of the <code>np.ndarray</code> and replace it with new values. In the second assignment statement you do not overwrite the reference to the numpy object. The <code>[:]</code> is a <code>slice</code> object that is passed to the <code>__setitem__</code> method of the numpy array.</p>
<p><strong>EDIT</strong>:</p>
<p>The exact implementation (there are multiple, here is the <code>pd.Series</code> implementation) of such property is:</p>
<pre><code>    @property
    def values(self):
        """ return the array """
        return self.block.values
</code></pre>
<p>thus you try to overwrite a property that is constructed with a <em>decorator</em> <code>@property</code> followed by a getter function, and cannot be replaced since it is only provided with a getter and not a setter. See <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">Python's docs on builtins - property()</a></p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>iris.columns.values = val
</code></pre>
<p>calls</p>
<pre><code>type(iris.columns).__setattr__(iris.columns, 'values', val)
</code></pre>
<p>This is running <code>pandas</code>' code, because <code>type(iris.columns)</code> is <code>pd.Series</code></p>
<hr/>
<pre class="lang-py prettyprint-override"><code>iris.columns.values[:] = val
</code></pre>
<p>calls</p>
<pre><code>type(iris.columns.value).__setitem__(iris.columns.value, slice(None), val)
</code></pre>
<p>This is running <code>numpy</code>'s code, because <code>type(iris.columns.value)</code> is <code>np.ndarray</code></p>
</div>
<span class="comment-copy">Before you attempt that assignment, what is <code>iris.columns.values</code>?  I.e. <code>type</code>?  Maybe also check <code>iris.columns</code>. And what is <code>sm</code>, as in the <code>sm.datasets</code>?</span>
<span class="comment-copy">The reason I want you to be specific about those types is that I don't think <code>iris.columns.values</code> is an ordinary <code>ndarray</code>.  It may be a property of <code>iris.columns</code>.  As such it could be accessed (get), modified (with the <code>[:]=</code> syntax), but not set.</span>
<span class="comment-copy">The values were: 'Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width', 'Species' and they were stored in: iris.columns.values. Its type is a numpy.ndarray. And sm is statsmodel.api package. I copied the wrong import command. I should have printed: import statsmodels.api as sm. I will try editing my question to reflect that. Thanks for pointing me this.</span>
<span class="comment-copy">By the way I runned into this kind of problem but with iris.keys() and with iris.columns. They are the ones that cannot be modified since they are indexes. I checked here in stackoverflow for this and the solution presented was to change iris.columns.values instead. It worked, but I'd say it worked "too much" since it is changing also something that was not supposed to be changed.</span>
<span class="comment-copy">Keeping on the topic that you raised, what is the difference between modifying a value and setting it? Sorry if this is a naive question, but I'm a hookie in Python language.</span>
<span class="comment-copy">Thanks! Again, the object and its values... And there goes up the learning curve in Python... Best regards mr_mo!</span>
<span class="comment-copy">Have fun! added some supplementary materials  :)</span>
