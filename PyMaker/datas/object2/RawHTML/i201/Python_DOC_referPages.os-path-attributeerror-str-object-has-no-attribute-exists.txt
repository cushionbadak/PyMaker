<div class="post-text" itemprop="text">
<p>I'm trying to reproduce the code from this site: <a href="https://www.guru99.com/python-copy-file.html" rel="nofollow noreferrer">https://www.guru99.com/python-copy-file.html</a></p>
<p>The general idea is to copy a file using python. Although I can work my way around the errors, I also <strong>want to understand what I'm doing wrong</strong> in this case.</p>
<pre><code>import shutil
from os import path
def main(filename):
    if path.exists(filename):
        src = path.realpath(filename)
        head, tail = path.split(src)
        dst = src + ".bak"
        shutil.copy(src,dst)

main('C:\\Users\\test.txt') #This raises the error
main('test.txt') #This works, if the file is in the same folder as the py script
</code></pre>
<p>If used with the full directory (main('C:\Users\test.txt')) The code returns the error <code>AttributeError: 'str' object has no attribute 'exists'</code>. If I remove the line with <code>path.exists()</code> I get a similar error: <code>AttributeError: 'str' object has no attribute 'realpath'</code>.
By using the filename <code>main('test.txt')</code> everything works, as long as the file is in the same folder as the python script that contains the function.</p>
<p>So I tried reading the <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">docs</a>, which states for both <code>path.exists()</code> and <code>path.realpath()</code>:</p>
<blockquote>
<p>Changed in version 3.6: Accepts a path-like object.</p>
</blockquote>
<p>Since <strong>I'm running 3.7.1</strong> I went foward to check what is a "path-like object":</p>
<blockquote>
<p>An object representing a file system path. A path-like object is either a str or bytes object representing a path, or an object implementing the os.PathLike protocol. An object that supports the os.PathLike protocol can be converted to a str or bytes file system path by calling the os.fspath() function; os.fsdecode() and os.fsencode() can be used to guarantee a str or bytes result instead, respectively. Introduced by PEP 519.</p>
</blockquote>
<p>From that, given that I provided a string, I take it should be working. So what I'm missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code:</p>
<pre><code>import shutil
from os import path
def main(filename):
    if path.exists(filename):
        src = path.realpath(filename)
        head, tail = path.split(src)
        dst = src + ".bak"
        shutil.copy(src,dst)

main('C:\\Users\\test.txt') #This raises the error
main('test.txt') #This works, if the file is in the same folder as the py script
</code></pre>
<p>It works fine, but if you re-define a local variable named path, like this:</p>
<pre><code>import shutil
from os import path


def main(filename):
    if path.exists(filename):
        src = path.realpath(filename)
        head, tail = path.split(src)
        dst = src + ".bak"
        shutil.copy(src, dst)

# The path variable here overrides the path in the main function.
path = 'abc'  

main('C:\\Users\\test.txt')  # This raises the error
</code></pre>
<p><strong>This is just your code I guess, obviously this is a wrong example.</strong></p>
<p>I would recommend using the <code>os.path</code> after <code>import os</code>, because the path variable name is very common, it is easy to conflict.</p>
<p>For a good example:</p>
<pre><code>import shutil
import os


def main(filename):
    if os.path.exists(filename):
        src = os.path.realpath(filename)
        head, tail = os.path.split(src)
        dst = src + ".bak"
        shutil.copy(src, dst)

main('C:\\Users\\test.txt')
main('test.txt')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Type on shell</p>
<pre class="lang-py prettyprint-override"><code>Type(path)
</code></pre>
<p>And check result and value, maybe you redefine this import to a variable str.</p>
</div>
<span class="comment-copy">That doesn't sound like it has anything to do with what string you're passing in. That sounds like you named the argument <code>path</code> in one version of your code and completely forgot about it.</span>
<span class="comment-copy">@user2357112 Agreed. Since the code here is fine, voting to close as a problem that can't be reproduced.</span>
<span class="comment-copy">Try <code>print(type(path))</code> just ahead of the first use.  I expect that will produce <code>str</code> rather than a <code>path</code> object.  If so, you need to trace the definition of <code>path</code> back to its source.  Your posted code does not show this problem.</span>
<span class="comment-copy">is this an answer or are you showing what <i>not</i> to do?  because shadowing a name you just imported is a horrible idea.</span>
<span class="comment-copy">@Corey Goldberg  I am showing the cause of the problem.</span>
<span class="comment-copy">then your answer is very unclear</span>
<span class="comment-copy">@Corey Goldberg Ok, I edited my answer.</span>
