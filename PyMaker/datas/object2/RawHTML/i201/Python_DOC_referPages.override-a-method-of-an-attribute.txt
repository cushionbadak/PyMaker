<div class="post-text" itemprop="text">
<p>I have a class that has an attribute as an object from another class. A third class inherits from the first class, and in there, I want to override the attribute's method ...</p>
<pre><code>class Car:
    def __init__(self, door):
        self.door = door

class Door:
    def __init__(self, color):
        self.color = color
    def change_color(self):
        pass

class CarConstruct(Car):
    def __init__(self):
        super(CarConstruct, self).__init__(Door('red'))
        # Here, I want to override self.door.change_color method
</code></pre>
<p>What is the best way to override in such a situation?</p>
</div>
<div class="post-text" itemprop="text">
<p>This technique is called <a href="https://stackoverflow.com/questions/5626193/what-is-monkey-patching">"monkey patching"</a>. In general it should be avoided, because it makes the code very hard to understand and reason about. Avoid it unless you have a very good cause. One of the good causes might be to <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock a method in unit tests</a>.</p>
<p>If you still want to monkey patch just one method on one object <code>self.door</code> - <a href="https://stackoverflow.com/questions/28127874/monkey-patching-python-an-instance-method">check out this answer</a>.</p>
</div>
<span class="comment-copy">What problem are you trying to solve with thism</span>
<span class="comment-copy">You can't override other objects' methods.</span>
<span class="comment-copy">@klausD. A problem in a GUI. The GUI uses a template where its ´self.content´ is class that has a ´FigureCanvasQTAgg´ in it, which is connected to a mouse event. In the main GUI class, I want to override (define) this mouse clicking event</span>
<span class="comment-copy">The proper way to override a method is with a subclass. Define a subclass of <code>Door</code> with the appropriate method, and pass an instance of <i>that</i> class to <code>super().__init__</code>.</span>
<span class="comment-copy">If you have found a monkey patch in one of two thousand tests at a place totally unrelated to the problem you where debugging and after three day of head scratching, then you know how "good" your case is.</span>
<span class="comment-copy">lol. That's the price you have to pay for using a dynamic programming language :)</span>
<span class="comment-copy">…without some discipline. ;-)</span>
