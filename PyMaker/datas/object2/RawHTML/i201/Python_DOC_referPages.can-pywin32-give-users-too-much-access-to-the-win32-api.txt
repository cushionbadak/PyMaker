<div class="post-text" itemprop="text">
<p>I'm developing a tool for a utility group with very high-security standards (for obvious reasons). This tool runs inside ESRI's ArcMap Application (Using the ArcMap API - ArcPy). ArcFM is Software installed on top of ArcMap and is used for utility based analytics (ArcFM has a license separate from ArcMap). The tool I'm developing  requires ArcPy (Python) to check-out the ArcFM license using PyWin32 (see snippet below)</p>
<pre><code>#ArcFM licensing
import win32com.client
app = win32com.client.Dispatch("Miner.Framework.Dispatch.MMAppInitializeDispatch")
runtime = win32com.client.Dispatch("Miner.Framework.Dispatch.MMRuntimeEnvironmentDispatch")
app.Initialize(0x5)
#end ArcFm licensing
</code></pre>
<p>In order to use some of the ArcFM functionalities within the tool I'm developing, the ArcFM license must first be check-out inside the script.</p>
<p>This snippet checks out the license to ArcFM so I can access ArcFM functions outside of the GUI. The IT Director of the Utility Group has been hesitant to install PyWIN on their machines as he/she is concerned that it will give users too much access to there own computers.</p>
<p>From my understanding, Win32 won't give users "extra" access to their computers (it only allows them to access features through the API). For example, if a user doesn't have rights to access registry-keys, Win32 (or PyWin32) will not bypass any security settings assigned to that user profile.</p>
<p>Do I understand this correctly? Is there anything I missed?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/mhammond/pywin32" rel="nofollow noreferrer">[GitHub]: mhammond/pywin32 - Python for Windows (pywin32) Extensions</a> (<strong>emphasis</strong> is mine) states:</p>
<blockquote>
<p>This is the readme for the Python for Win32 (pywin32) extensions, <strong>which provides access to many of the Windows APIs from Python</strong>.</p>
</blockquote>
<p>So, <em>PyWin32</em> is a <strong><em>Python</em> wrapper over <em>WINAPI</em>s</strong> (it just allows them to be called from <em>Python</em> in a friendly manner). Regardless of it (not) being installed on a <em>Python</em> installation, the <em>WINAPI</em>s are still there and can be accessed from:</p>
<ul>
<li><em>C</em></li>
<li><p><em>Python</em> as well (e.g. using <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a>), <strong>but</strong> the code would be much:</p>
<ol>
<li>Longer (all kinds of conversions are required)</li>
<li>Less readable (lots of "maintenance" code - not related to the business logic)</li>
<li>Error prone</li>
</ol>
<p><br/>
You could check <a href="https://stackoverflow.com/questions/31278590/get-the-title-of-a-window-of-another-program-using-the-process-name/31280850#31280850">[SO]: Get the title of a window of another program using the process name (@CristiFati's answer)</a> for difference between the 2 approaches (also check (the last part of) <a href="https://stackoverflow.com/questions/46916726/python-win32service-getting-triggered-startup-information-for-service/47264647#47264647">[SO]: python win32service - Getting triggered startup information for service (@CristiFati's answer)</a>).</p></li>
<li><p>Other languages</p></li>
</ul>
<p>Since <em>Pywin32</em> doesn't have an official doc page, I'll be referencing the next best thing (that I found): <a href="http://docs.activestate.com/activepython/3.3/pywin32/PyWin32.HTML" rel="nofollow noreferrer">[ActiveState.Docs]: PyWin32 Documentation</a>.</p>
<p>Examples:</p>
<ul>
<li>Since you mentioned registry:

<ul>
<li><a href="http://docs.activestate.com/activepython/3.3/pywin32/win32api__RegOpenKeyEx_meth.html" rel="nofollow noreferrer">[ActiveState.Docs]: win32api.RegOpenKeyEx</a> wraps <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winreg/nf-winreg-regopenkeyexw" rel="nofollow noreferrer">[MS.Docs]: RegOpenKeyExW function</a></li>
<li>But maybe it's not the best example, as registry functions are also available via <a href="https://docs.python.org/3/library/winreg.html#module-winreg" rel="nofollow noreferrer">[Python 3]: winreg - Windows registry access</a> (which is part of <em>Python</em>'s standard library)</li>
</ul></li>
<li>Another one (that has something to do with security):

<ul>
<li><a href="http://docs.activestate.com/activepython/3.3/pywin32/win32security__LogonUserEx_meth.html" rel="nofollow noreferrer">[ActiveState.Docs]: win32security.LogonUserEx</a> wraps <a href="https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-logonuserexw" rel="nofollow noreferrer">[MS.Docs]: LogonUserExW function</a></li>
</ul></li>
</ul>
<p><br/></p>
<h2>Bottom line</h2>
<p><strong>There are NO additional privileges (rights) granted (by default) by <em>PyWin32</em></strong>.</p>
<hr/>
<p>However I'm trying to find a reason for management's concern towards having <em>PyWin32</em> installed.</p>
<p>Generally, experts (in the <em>WINAPI</em> area) would most likely know:</p>
<ol>
<li><em>C</em> (number of devs is decreasing)</li>
<li><em>Win</em> internals (not very many here either)</li>
<li>General computer (low level) knowledge</li>
<li>From the 3 above, such users would know what the implications of calling an <em>WINAPI</em> (and if not, they would easily know where / what to search / investigate in order to get answers)</li>
</ol>
<p>From these users' <em>PoV</em>, it makes no difference. But since <em>PyWin32</em> modules can be queried for their content:</p>
<blockquote>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; import win32security
&gt;&gt;&gt;
&gt;&gt;&gt; print([name for name in dir(win32security) if callable(getattr(win32security, name))])
['ACL', 'AcceptSecurityContext', 'AcquireCredentialsHandle', 'AdjustTokenGroups', 'AdjustTokenPrivileges', 'AllocateLocallyUniqueId', 'CheckTokenMembership', 'ConvertSecurityDescriptorToStringSecurityDescriptor', 'ConvertSidToStringSid', 'ConvertStringSecurityDescriptorToSecurityDescriptor', 'ConvertStringSidToSid', 'CreateRestrictedToken', 'CreateWellKnownSid', 'CredHandleType', 'CryptEnumProviders', 'CtxtHandleType', 'DsBind', 'DsCrackNames', 'DsGetDcName', 'DsGetSpn', 'DsListDomainsInSite', 'DsListInfoForServer', 'DsListRoles', 'DsListServersForDomainInSite', 'DsListServersInSite', 'DsListSites', 'DsUnBind', 'DsWriteAccountSpn', 'DuplicateToken', 'DuplicateTokenEx', 'EnumerateSecurityPackages', 'GetBinarySid', 'GetFileSecurity', 'GetKernelObjectSecurity', 'GetNamedSecurityInfo', 'GetPolicyHandle', 'GetSecurityInfo', 'GetTokenInformation', 'GetUserObjectSecurity', 'ImpersonateAnonymousToken', 'ImpersonateLoggedOnUser', 'ImpersonateNamedPipeClient', 'ImpersonateSelf', 'InitializeSecurityContext', 'IsTokenRestricted', 'LogonUser', 'LogonUserEx', 'LookupAccountName', 'LookupAccountSid', 'LookupPrivilegeDisplayName', 'LookupPrivilegeName', 'LookupPrivilegeValue', 'LsaAddAccountRights', 'LsaCallAuthenticationPackage', 'LsaClose', 'LsaConnectUntrusted', 'LsaDeregisterLogonProcess', 'LsaEnumerateAccountRights', 'LsaEnumerateAccountsWithUserRight', 'LsaEnumerateLogonSessions', 'LsaGetLogonSessionData', 'LsaLookupAuthenticationPackage', 'LsaOpenPolicy', 'LsaQueryInformationPolicy', 'LsaRegisterLogonProcess', 'LsaRegisterPolicyChangeNotification', 'LsaRemoveAccountRights', 'LsaRetrievePrivateData', 'LsaSetInformationPolicy', 'LsaStorePrivateData', 'LsaUnregisterPolicyChangeNotification', 'MapGenericMask', 'OpenProcessToken', 'OpenThreadToken', 'PyCredHandleType', 'PyCtxtHandleType', 'PySecBufferDescType', 'PySecBufferType', 'QuerySecurityPackageInfo', 'RevertToSelf', 'SECURITY_ATTRIBUTES', 'SECURITY_DESCRIPTOR', 'SID', 'SecBufferDescType', 'SecBufferType', 'SetFileSecurity', 'SetKernelObjectSecurity', 'SetNamedSecurityInfo', 'SetSecurityInfo', 'SetThreadToken', 'SetTokenInformation', 'SetUserObjectSecurity', 'TranslateName', 'error']
</code></pre>
</blockquote>
<p>that might get one of the other kind of users, ideas.</p>
<p>So the (arguable: <em>false</em>) concern, is that a <strong>great power</strong> (including the one of knowledge) is shared with users that might not have the <strong>great responsibility</strong> required to handle that power. In some cases, that could lead (dramatizing a bit) to disaster (and whether is because of mistake or malintent isn't very relevant).</p>
<p>To draw a parallel with a real life scenario: having a dummy lock on your door (or the wallet in the shoe at the beach):</p>
<ul>
<li>Will stop <em>~90%+</em> of the thieves (the mediocre ones)</li>
<li>Will have no effect against the real masters</li>
</ul>
</div>
