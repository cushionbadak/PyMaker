<div class="post-text" itemprop="text">
<p>I am having troubles pickling a class importing a class from another module.</p>
<p>Immagine I have a file classA.py with the definition of a class A:</p>
<pre><code>class A:
    def execute(self):
        print('Hello from class A!')
</code></pre>
<p>Then I have another file classB.py:</p>
<pre><code>import dill
import classA

class B:
    def __init__(self):
        self.a = classA.A()

    def execute(self):
        self.a.execute()
        print('Hello from class B!')


b = B()

with open('/file/path', 'wb') as f:
    dill.dump(b, f)
</code></pre>
<p>If then I try to unpickle the created file from a  different directory with:</p>
<pre><code>with open('file/path', 'rb') as f:
    b = dill.load(f)
</code></pre>
<p>I get the error:</p>
<pre><code>ModuleNotFoundError: No module named 'classB'
</code></pre>
<p>It works of course in the same folder in which I have the files classA.py and classB.py because the interpreter can find the definition of the two classes.</p>
<p>So I guess I have to somehow bring the definition of the classes into the pickle file. How can I do that?</p>
<p>Thank you
Stefano</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>It works of course in the same folder in which I have the files classA.py and classB.py because the interpreter can find the definition of the two classes.
  So I guess I have to somehow bring the definition of the classes into the pickle file. How can I do that?</p>
</blockquote>
<p>That's not how it works. You don't "bring the definition of the classes into the pickle file" - <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">which would make no sense</a> since only the class qualified name is pickled (qualified name =&gt; packagename.modulename.classname)</p>
<p>Instead, you have to make sure the modules where the classes are defined are importable when unpickling - "importable" meaning that the package or module's parent folder path is in your <code>sys.path</code>. You can do this in a few way (using PYTHONPATH environment variable, messing with <code>sys.path</code> directly in your code - which is often a bad idea and sometimes the proper solution -, installing your module in virtualenv and activating this virtualenv, etc)</p>
<p>NB: The current working directory is always first in your <code>sys.path</code> which is why "It works of course in the same folder".</p>
</div>
<span class="comment-copy">Is the dill library successfully imported or not?</span>
<span class="comment-copy">yes, i get no problems with dill</span>
<span class="comment-copy">the problem rises when I try to unpickle the file in a different session from the one in which I have created the file</span>
<span class="comment-copy">what do you mean "a different session" ?</span>
<span class="comment-copy">Thanks for the answer!  I have notice though that if I put the definition of the classes in the same file in which I dump the class B I don't need to have the modules to be importable.The pickle can just be exttraced anywhere. Why such behaviour? It is not possible to replicate the same having classes defined in other files?</span>
<span class="comment-copy">If the class def is in the same module then it is already imported when you call <code>pickle.load()</code>, and "replicating" this behaviour is actually the whole point of "making the module importable". This is just common sense: you need the class object (yes, "class object" - python classes, functions, modules etc are, at runtime, objects like any other) to create an instance of it, and you cannot use an object  that doesn't exist. <code>pickle.load()</code> takes care of importing the module where the class is defined (if the module is not already in the <code>sys.modules</code> cache) and get the class object from it.</span>
<span class="comment-copy">Ok so there is no way to create a pickle such that I can give just it to whoever and he/she will be able to load and use it, unless I define all the classes  used in the same module I use to dump classB, right? I will always have to provide the module containing classA alongside</span>
<span class="comment-copy">Pickling is about data, not code, so yes, you very obviously have to have the code that goes with the pickle.</span>
