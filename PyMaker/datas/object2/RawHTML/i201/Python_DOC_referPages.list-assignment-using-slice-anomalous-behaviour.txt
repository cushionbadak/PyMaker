<div class="post-text" itemprop="text">
<p>According to the Python documentation on <a href="https://docs.python.org/3/whatsnew/2.3.html#extended-slices" rel="nofollow noreferrer">extended slices</a>:</p>
<blockquote>
<p>If you have a mutable sequence such as a list or an array you can
  assign to or delete an extended slice, but there are some differences
  between assignment to extended and regular slices. Assignment to a
  regular slice can be used to change the length of the sequence:</p>
<pre><code>&gt;&gt;&gt; a = range(3)
&gt;&gt;&gt; a
[0, 1, 2]
&gt;&gt;&gt; a[1:3] = [4, 5, 6]
&gt;&gt;&gt; a
[0, 4, 5, 6]
</code></pre>
<p>Extended slices aren't this flexible. When assigning to an extended
  slice, the list on the right hand side of the statement must contain
  the same number of items as the slice it is replacing:</p>
<pre><code>&gt;&gt;&gt; a = range(4)
&gt;&gt;&gt; a
[0, 1, 2, 3]
&gt;&gt;&gt; a[::2]
[0, 2]
&gt;&gt;&gt; a[::2] = [0, -1]
&gt;&gt;&gt; a
[0, 1, -1, 3]
&gt;&gt;&gt; a[::2] = [0,1,2]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
ValueError: attempt to assign sequence of size 3 to extended slice of size 2
</code></pre>
</blockquote>
<p>I do not understand why the "ordinary" slice method works but the "extended" slice method doesn't work. What differentiates an "ordinary" slice from an "extended" slice, and why does the "extended" slice method fail?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a little easier to see the problem if you try to imagine how</p>
<pre><code>a[::3] = [0, 1, 2]
</code></pre>
<p>would work with a 4-item list:</p>
<pre><code>+---+---+---+---+   +   +---+
| a | b | c | d |       | ? |
+---+---+---+---+   +   +---+
  ^           ^           ^
+---+       +---+       +---+
| 0 |       | 1 |       | 2 |
+---+       +---+       +---+
</code></pre>
<p>We're trying to replace every third value, but our list isn't long enough, so if we went ahead anyway we'd end up with some kind of weird frankenstein list where some of the items don't actually exist. If someone then tried to access <code>a[5]</code> and got an <code>IndexError</code> (even though <code>a[6]</code> works normally), they'd get <em>really</em> confused.</p>
<p>Although you could technically get away with the <code>a[::2]</code> case by extending <code>a</code> by one, for the sake of consistency, Python bans all extended slicing assignments are unless there's already a place for the value to go.</p>
<p>A regular slice always has a stride of one, so there's no chance of any gaps occurring, and so the assignment can safely be allowed.</p>
</div>
<span class="comment-copy">What differentiates it is the third parameter, the step, as described in the opening paragraph. It fails because the list on the right hand side of the statement does not contain the same number of items (3) as the slice it is replacing (2), which is what the text you've copied says is required. That's why they use it as an illustration for that description. It's unclear what you mean by <i>"why"</i>.</span>
