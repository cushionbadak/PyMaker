<div class="post-text" itemprop="text">
<p>I am brand new to <code>Python</code> and programming. I am trying to code a simple <code>GAN</code> to use <code>Keras</code> datasets (see hyperlink to tutorial below). 
I am receiving two warnings followed by an error: </p>
<pre><code>TypeError: 'float' object cannot be interpreted as an integer.
</code></pre>
<p>Any help would be much appreciated. </p>
<p><strong>Details</strong>:</p>
<p>Python 3.7.1, Mac OS High Sierra 10.13.6. I am using IDLE for the Python code and running the program through the terminal. </p>
<p><strong>Error</strong></p>
<p>WARNING:tensorflow:From /Users/darren/miniconda3/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.</p>
<p>Instructions for updating:
Colocations handled automatically by placer.</p>
<p>WARNING:tensorflow:From /Users/darren/miniconda3/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.</p>
<p>Instructions for updating:
Please use <code>rate</code> instead of <code>keep_prob</code>. Rate should be set to <code>rate = 1 - keep_prob</code>.</p>
<blockquote>
<p>--------------- Epoch 1 ---------------</p>
<p>Traceback (most recent call last):</p>
<p>File "gan.py", line 91, in 
      train(400, 128)    File "gan.py", line 75, in train
      for _ in tqdm(range(batch_count)):
       TypeError: 'float' object cannot be interpreted as an integer</p>
</blockquote>
<p><strong>Code:</strong></p>
<pre><code>import os
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
from keras.layers import Input
from keras.models import Model, Sequential
from keras.layers.core import Dense, Dropout
from keras.layers.advanced_activations import LeakyReLU
from keras.datasets import mnist
from keras.optimizers import Adam
from keras import initializers
os.environ["KERAS_BACKEND"] = "tensorflow"
np.random.seed(10)
random_dim = 100
def load_minst_data():
        (x_train, y_train), (x_test, y_test) = mnist.load_data()
        x_train = (x_train.astype(np.float32) - 127.5)/127.5
        x_train = x_train.reshape(60000, 784)
        return (x_train, y_train, x_test, y_test)
def get_optimizer():
        return Adam(lr=0.0002, beta_1=0.5)
def get_generator(optimizer):
        generator = Sequential()
        generator.add(Dense(256, input_dim=random_dim, kernel_initializer=initializers.RandomNormal(stddev=0.02)))
        generator.add(LeakyReLU(0.2))
        generator.add(Dense(512))
        generator.add(LeakyReLU(0.2))
        generator.add(Dense(1024))
        generator.add(LeakyReLU(0.2))
        generator.add(Dense(784, activation='tanh'))
        generator.compile(loss='binary_crossentropy', optimizer=optimizer)
        return generator
def get_discriminator(optimizer):
        discriminator = Sequential()
        discriminator.add(Dense(1024, input_dim=784, kernel_initializer=initializers.RandomNormal(stddev=0.02)))
        discriminator.add(LeakyReLU(0.2))
        discriminator.add(Dropout(0.3))
        discriminator.add(Dense(512))
        discriminator.add(LeakyReLU(0.2))
        discriminator.add(Dropout(0.3))
        discriminator.add(Dense(256))
        discriminator.add(LeakyReLU(0.2))
        discriminator.add(Dropout(0.3))
        discriminator.add(Dense(1, activation='sigmoid'))
        discriminator.compile(loss='binary_crossentropy', optimizer=optimizer)
        return discriminator
def get_gan_network(discriminator, random_dim, generator, optimizer):
        discriminator.trainable = False
        gan_input = Input(shape=(random_dim,))
        x = generator(gan_input)
        gan_output = discriminator(x)
        gan = Model(inputs=gan_input, outputs=gan_output)
        gan.compile(loss='binary_crossentropy', optimizer=optimizer)
        return gan
def plot_generated_images(epoch, generator, examples=100, dim=(10, 10), figsize=(10, 10)):
        noise = np.random.normal(0, 1, size=[examples, random_dim])
        generated_images = generator.predict(noise)
        generated_images = generated_images.reshape(examples, 28, 28)
        plt.figure(figsize=figsize)
        for i in range(generated_images.shape[0]):
                plt.subplot(dim[0], dim[1], i+1) 
                plt.imshow(generated_images[i], interpolation='nearest', cmap='gray_r')
                plt.axis('off')
        plt.tight_layout()
        plt.savefig('gan_generated_image_epoch_%d.png' % epoch)
def train(epochs=1, batch_size=128):
        x_train, y_train, x_test, y_test = load_minst_data()
        batch_count = x_train.shape[0] / batch_size
        adam = get_optimizer()
        generator = get_generator(adam)
        discriminator = get_discriminator(adam)
        gan = get_gan_network(discriminator, random_dim, generator, adam)
        for e in range(1, epochs+1):
                print ('-'*15, 'Epoch %d' % e, '-'*15)
                for _ in tqdm(range(batch_count)):
                        noise = np.random.normal(0, 1, size=[batch_size, random_dim])
                        image_batch = x_train[np.random.randint(0, x_train.shape[0], size=batch_size)]
                        generated_images = generator.predict(noise)|
                        X = np.concatenate([image_batch, generated_images])
                        y_dis = np.zeros(2*batch_size)
                        y_dis[:batch_size] = 0.9
                        discriminator.trainable = True
                        discriminator.train_on_batch(X, y_dis)
                        noise = np.random.normal(0, 1, size=[batch_size, random_dim])
                        y_gen = np.ones(batch_size)
                        discriminator.trainable = False
                        gan.train_on_batch(noise, y_gen)
               if e == 1 or e % 20 == 0:
                        plot_generated_images(e, generator)
if __name__ == '__main__':
        train(400, 128)
</code></pre>
<p><a href="https://www.datacamp.com/community/tutorials/generative-adversarial-networks" rel="nofollow noreferrer">Link to Tutorial</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem comes from the line <code>x_train.shape[0] / batch_size</code>.
By default, in the newer versions of python3, the <code>/</code> operator performs floating point division instead of <code>div</code>.</p>
<p>If you want the result to be an integer, you should instead use the <code>//</code> operator, which behaves like <code>div</code>:</p>
<p><code>x_train.shape[0] // batch_size</code>.</p>
</div>
<span class="comment-copy">Add debug statement just before your loop <code>for _ in....</code>, and print the type of the variable batch_count. For the loop to work, it should be an <code>int</code></span>
<span class="comment-copy">Could you please give me an example as a line of code?</span>
<span class="comment-copy"><code>print(type(batch_count))</code>. Also consider reading this: <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">docs.python.org/3/library/pdb.html</a></span>
<span class="comment-copy">Thanks! I will have a read and add in the statements.</span>
<span class="comment-copy">Thanks Eric! I was able to get past this error but when the program ran it crashed and I got this error:   "Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[NSApplication _setup:]: unrecognized selector sent to instance 0x7fcba9772980'"   Is this due to my code not having a debug statement as suicidalteddy mentioned above?</span>
<span class="comment-copy">The new error you're facing has some other cause. Debug statements are temporary lines of code you add to get a better idea of the state of your program just before or after an error occurs.</span>
<span class="comment-copy">Thanks for the link, I'll have a read.</span>
