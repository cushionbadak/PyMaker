<div class="post-text" itemprop="text">
<p>I have a list in Python that consists of tuples that have the following format: (int, float). I want to write this list to a io byte or io raw stream without having to convert the ints and/or floats to a string. How can I do this? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many formats which can be used to serialize Python objects into bytes. There are pros and cons for each of them.</p>
<p>If the data has only a list of tuples of integers and flaots, that make the job rather simple.</p>
<p>Let's assume, this is the data:</p>
<pre><code>data = 100 * [(1, 1.111), (18, 1.234), (555555, 0.001), (-1, 1e70)]
</code></pre>
<p>Which of them falls into the category of "strings" is not clear to me. The most obvious "string" format would be <code>str(data)</code>. How big is it?</p>
<pre><code>&gt;&gt;&gt; len(str(data))
5500
</code></pre>
<p>This takes up 5500 bytes. The question asks for something more compressed. So, we're looking for something much shorter than 5500 bytes.</p>
<p><strong>JSON</strong> is a very popular format (it is also a string). How big is it?</p>
<pre><code>&gt;&gt;&gt; len(json.dumps(data))
5500
</code></pre>
<p>This has the same size (5500 bytes), but at least it is well defined. Can it be smaller? How about a <strong>BZipped JSON</strong>?</p>
<pre><code>&gt;&gt;&gt; len(bz2.compress(json.dumps(data).encode('utf-8')))
131
</code></pre>
<p>That is much better!</p>
<p>This was probably very good because of a repeating pattern. Is there a format which does not use zipping? Maybe <strong>pickle</strong>?</p>
<pre><code>&gt;&gt;&gt; len(pickle.dumps(data))
862
</code></pre>
<p>Not as good as zip (of course!), but still good.</p>
<p>Could we make a <strong>BZipped pickle</strong>?</p>
<pre><code>&gt;&gt;&gt; len(bz2.compress(pickle.dumps(data)))
155
</code></pre>
<p>Better, but there is no reason for it to be better than BZipped JSON.</p>
<p>How about some other format? You could convert each tuple to the equivalent of this C <strong>structure</strong>, using the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module:</p>
<pre><code>struct {
    int i;
    double f;
};
</code></pre>
<p>However, then you'd have to know how big the int can be. Python int can be as big aas you want, but if you e.g. know that all numbers are between 0 and 255, you just need one byte. For the float, you need 64 bits (i.e. 8 bytes), or you lose precision. So, this will go up to about 1000 bytes. Not very good.</p>
<p>There are also other built-in options documented in <a href="https://docs.python.org/3/library/persistence.html" rel="nofollow noreferrer">Python's documentation on Persistence</a>.</p>
<p>You can also invent your own format.</p>
<p>In the end, you have to decide what suits you best.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can dump integers and floats into bytes directly really easily using the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct module</a>. </p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; data = [(2, 1.0), (3, 2.0), (25, 55.5)]
&gt;&gt;&gt; for tup in data:
    bytes_data = struct.pack("&lt;ld", *tup)
    print(bytes_data)


b'\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
b'\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@'
b'\x19\x00\x00\x00\x00\x00\x00\x00\x00\xc0K@'
</code></pre>
<p>As an aside the string I use as the first argument to the <code>pack</code> function is a format identifier that tells you what type and size of each number, in this case <code>l</code> is a long signed int, <code>d</code> is a float double. </p>
</div>
<span class="comment-copy">If you want to write these objects to a stream, you have to convert them to bytes, one way or a another, i.e. to <a href="https://en.wikipedia.org/wiki/Serialization" rel="nofollow noreferrer">serialize</a> them. If you don't want to use string as the format, you have to choose some other format. What do you want? Why don't you want strings?</span>
<span class="comment-copy">I don't want to convert them to strings because I am streaming data from a server to a client and I want to minimize the size of the payload. My integers are long and take up 32 bytes. My floats are 24 bytes. If I convert them to strings, the size of the payload will increase because each character in a string takes up 1 byte. But how do I serialize and unserialize these to/from bytes? Thanks for your help.</span>
