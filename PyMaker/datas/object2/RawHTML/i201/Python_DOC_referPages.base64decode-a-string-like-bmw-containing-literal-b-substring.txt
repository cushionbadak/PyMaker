<div class="post-text" itemprop="text">
<p>I encoded a comma delimited list (ex. <code>"1,2,3"</code>) of ids to base64 then the returned data from the form looks like <code>x</code> below.</p>
<p>I tried decoding and encoding and all sorts of things but nothing seems to return a the original string.</p>
<pre><code>x = "b'Mw=='"

base64.b64decode(x)
# b'l\xcc'

x.decode()
# AttributeError: 'str' object has no attribute 'decode'

y = x.encode('utf-8')
print(y)
# b"b'Mw=='"
</code></pre>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have <code>b'...'</code> in your data, that's the <code>repr()</code>esentation of a bytestring.</p>
<p>If you can't get your data source to fix their content (it <em>should</em> just be <code>Mw==</code>: what they're giving you isn't valid base64 encoding!), you can use <code>ast.literal_eval()</code> to read it into a bytestring:</p>
<pre><code>&gt;&gt;&gt; import ast, base64
&gt;&gt;&gt; x = "b'Mw=='"
&gt;&gt;&gt; base64.b64decode(ast.literal_eval(x))
'3'
</code></pre>
</div>
<span class="comment-copy"><code>base64.b64decode(b'Mw==')</code>. That thing is supposed to be <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer">bytes</a>, not a string.</span>
<span class="comment-copy">Remove double quotes, i.e. <code>x = b'Mw=='</code>. Also, <code>b64decode</code> does not modify the original string (strings are immutable). It returns a new one.</span>
<span class="comment-copy">I don't control the doublequotes or this is an <code>xy</code> problem. The form I receive the data from has put quotes around the bytes already.</span>
<span class="comment-copy">Someone called <code>str()</code> on a bytes object instead of <code>decode()</code>, giving you a broken <code>x</code>. Need to fix that upstream.</span>
<span class="comment-copy">@AndrasDeak you are right it is ultimately an upstream error.</span>
<span class="comment-copy">Technically this solves the problem but my real issue was upstream feeding me the incorrectly encoded <code>x</code>. So I accept this answer for those who can not control the upstream but in my case I was able to fix the upstream source and decode my string as originally expected.</span>
