<div class="post-text" itemprop="text">
<p>I am a playing around with an inventory program for my python class. It works right now but I was wondering if there was a way to have it delete and edit a vehicle by vin instead of position. Any advice would be awesome! I have tried using remove in place of pop but it would give me an <code>ValueError</code> telling me list.remove(x) = x isn't a list.</p>
<pre><code>class Automobile:

def __init__(self):
    self.vin = " "
    self.year = 0
    self.make = " "
    self.model = " "
    self.color = " "
    self.mileage = 0
    self.price = 0

def add(self):
    self.vin = input("Enter Vin #: ")
    self.year = int(input("Enter Year: "))
    self.make = input("Enter Make: ")
    self.model = input("Enter Model: ")
    self.color = input("Enter Color: ")
    self.mileage = int(input("Enter Mileage: "))
    self.price = int(input("Enter Price: "))

    def __str__(self):
         return (self.vin, self.year, self.make, self.model, self.color, 
         "Mileage:",self.mileage, "Price:", self.price)

vehicle_inventory = []
from ast import literal_eval
with open("vehicle_inventory.txt") as f:
     vehicle_inventory = [list(literal_eval(line)) for line in f]

def edit(vehicle_inventory):
  vin = int(input("Select vehicle you wish to edit:"))
  edit_vehicle = car.add()
  edit_vehicle = car.__str__()
  vehicle_inventory[vin] = edit_vehicle
  print("Edit of vehicle is successful.")

user = True
while user:
  print("""
  1. Add a vehicle to inventory
  2. Delete a vehicle from inventory
  3. View inventory
  4. Edit vehicle in inventory
  5. Save vehicle inventory to file
  6. Quit
  """)
  choice = int(input("Select an option: "))
  if choice == 1:
    car = Automobile()
    car.add()
    vehicle_inventory.append(car.__str__())

elif choice == 2:
    for i in vehicle_inventory:
        vehicle_inventory.pop(int(input("Select vehicle you wish to remove: 
")))
        print("Vehicle Sold!")

elif choice == 3:
    print(vehicle_inventory)

elif choice == 4:
    edit(vehicle_inventory)

elif choice == 5:
    s = open('vehicle_inventory.txt', 'w')
    s.write(str(vehicle_inventory))
    s.close()

elif choice == 6:
    break

else:
    print("Invalid input")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason you're getting a <code>ValueError</code> with <code>remove()</code> is because it removes and element by value , which means the value being entered is not present in the list:</p>
<pre><code>myList = [1 , 2 , 3 , 4 , 5]
myList.remove(2)
print(myList)
</code></pre>
<p>Output:
<code>[1 , 3 , 4 , 5]</code></p>
<pre><code>myList = [1 , 2 , 3 , 4 , 5]
print(myList)
myList.remove(20)
print(myList)
</code></pre>
<p>Output:</p>
<pre><code>Traceback (most recent call last):
  File "main.py", line 77, in &lt;module&gt;
    myList.remove(20)
ValueError: list.remove(x): x not in list
</code></pre>
<p>Furthermore , <code>pop()</code> is used for <a href="https://docs.python.org/3.7/tutorial/datastructures.html#using-lists-as-stacks" rel="nofollow noreferrer">stacks</a>, with <code>pop()</code> you're removing at specified index , if the index is not specified then it removes and returns the last item in the list:</p>
<pre><code>myList = [1 , 2 , 3 , 4 , 5]
print(myList)
myList.pop(2)
print(myList)
</code></pre>
<p>Output:<code>[1 , 2 , 4 , 5]</code></p>
<p>If I'm understanding you're question right , using <code>remove()</code> or <code>pop()</code> is the wrong way to go about this, you may want to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a> instead , a simplified example on how to delete by value via VIN# would look something like this:</p>
<pre><code>def removeVin(vinNumbers, key):
    del vinNumbers[key]
vinNumbers = {'VIN01' : 1200 , 'VIN02' : 1500 , 'VIN03' : 1700} # Where Key is 'VIN0X' and Value is Price
removeVin(vinNumbers , 'VIN03')
print(vinNumbers) 
</code></pre>
<p>To prompt user for a VIN , it may look something like this:</p>
<pre><code>def removeVin(vinNumbers, key):
    del vinNumbers[key]
vinNumbers = {'VIN01' : 1200 , 'VINO2' : 1500 , 'VIN03' : 1700}
removeVin(vinNumbers , input("Enter VIN:"))
print(vinNumbers)
</code></pre>
<p>Likewise for editing:</p>
<pre><code>def editVin(vinNumbers, key):
    vinNumbers[key] = 1500
vinNumbers = {'VIN01' : 1200 , 'VINO2' : 1500 , 'VIN03' : 1700}
editVin(vinNumbers , input("Enter VIN:"))
print(vinNumbers)
</code></pre>
</div>
<span class="comment-copy">Ok, that makes sense. I figured I was going about it possibly the wrong way. I will have to play around with my code to see how it could work. I appreciate the response!</span>
<span class="comment-copy">@scubyfxt12 I would store the VIN number as the key, and a object of the car as the value</span>
