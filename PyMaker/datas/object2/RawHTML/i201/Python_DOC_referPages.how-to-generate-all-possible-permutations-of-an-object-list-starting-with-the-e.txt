<div class="post-text" itemprop="text">
<p>Given a set </p>
<pre><code>{0, 1, 2, 3}
</code></pre>
<p>What's a good way to produce the subsets:</p>
<pre><code>[set(),
 {0},
 {1},
 {2},
 {3},
 {0, 1},
 {0, 2},
 {0, 3},
 {1, 2},
 {1, 3},
 {2, 3},
 {0, 1, 2},
 {0, 1, 3},
 {0, 2, 3},
 {1, 2, 3},
 {0, 1, 2, 3}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> page</a> has exactly a <code>powerset</code> recipe for this:</p>
<pre><code>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; list(powerset("abcd"))
[(), ('a',), ('b',), ('c',), ('d',), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'd'), ('b', 'c', 'd'), ('a', 'b', 'c', 'd')]
</code></pre>
<p>If you don't like that empty tuple at the beginning, you can just change the <code>range</code> statement to <code>range(1, len(s)+1)</code> to avoid a 0-length combination.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is more code for a powerset. This is written from scratch:</p>
<pre><code>&gt;&gt;&gt; def powerset(s):
...     x = len(s)
...     for i in range(1 &lt;&lt; x):
...         print [s[j] for j in range(x) if (i &amp; (1 &lt;&lt; j))]
...
&gt;&gt;&gt; powerset([4,5,6])
[]
[4]
[5]
[4, 5]
[6]
[4, 6]
[5, 6]
[4, 5, 6]
</code></pre>
<p>Mark Rushakoff's comment is applicable here: "If you don't like that empty tuple at the beginning, on."you can just change the range statement to range(1, len(s)+1) to avoid a 0-length combination", except in my case you change <code>for i in range(1 &lt;&lt; x)</code> to <code>for i in range(1, 1 &lt;&lt; x)</code>.</p>
<hr/>
<p>Returning to this years later, I'd now write it like this:</p>
<pre><code>def powerset(s):
    x = len(s)
    masks = [1 &lt;&lt; i for i in range(x)]
    for i in range(1 &lt;&lt; x):
        yield [ss for mask, ss in zip(masks, s) if i &amp; mask]
</code></pre>
<p>And then the test code would look like this, say:</p>
<pre><code>print(list(powerset([4, 5, 6])))
</code></pre>
<p>Using <code>yield</code> means that you do not need to calculate all results in a single piece of memory. Precalculating the masks outside the main loop is assumed to be a worthwhile optimization.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking for a quick answer, I just searched "python power set" on google and came up with this: <a href="http://blog.technomancy.org/2009/3/17/a-powerset-generator-in-python" rel="noreferrer">Python Power Set Generator</a></p>
<p>Here's a copy-paste from the code in that page:</p>
<pre><code>def powerset(seq):
    """
    Returns all the subsets of this set. This is a generator.
    """
    if len(seq) &lt;= 1:
        yield seq
        yield []
    else:
        for item in powerset(seq[1:]):
            yield [seq[0]]+item
            yield item
</code></pre>
<p>This can be used like this:</p>
<pre><code> l = [1, 2, 3, 4]
 r = [x for x in powerset(l)]
</code></pre>
<p>Now r is a list of all the elements you wanted, and can be sorted and printed:</p>
<pre><code>r.sort()
print r
[[], [1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 4], [1, 3], [1, 3, 4], [1, 4], [2], [2, 3], [2, 3, 4], [2, 4], [3], [3, 4], [4]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def powerset(lst):
    return reduce(lambda result, x: result + [subset + [x] for subset in result],
                  lst, [[]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a refinement of powerset:</p>
<pre><code>def powerset(seq):
    """
    Returns all the subsets of this set. This is a generator.
    """
    if len(seq) &lt;= 0:
        yield []
    else:
        for item in powerset(seq[1:]):
            yield [seq[0]]+item
            yield item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_power_set(s):
  power_set=[[]]
  for elem in s:
    # iterate over the sub sets so far
    for sub_set in power_set:
      # add a new subset consisting of the subset at hand added elem
      power_set=power_set+[list(sub_set)+[elem]]
  return power_set
</code></pre>
<p>For example:</p>
<pre><code>get_power_set([1,2,3])
</code></pre>
<p>yield</p>
<pre><code>[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just wanted to provide the most comprehensible solution, the anti code-golf version.</p>
<pre><code>from itertools import combinations

l = ["x", "y", "z", ]

def powerset(items):
    combo = []
    for r in range(len(items) + 1):
        #use a list to coerce a actual list from the combinations generator
        combo.append(list(combinations(items,r)))
    return combo

l_powerset = powerset(l)

for i, item in enumerate(l_powerset):
    print "All sets of length ", i
    print item
</code></pre>
<hr/>
<p><strong>The results</strong></p>
<p>All sets of length  0</p>
<p><code>[()]</code></p>
<p>All sets of length  1</p>
<p><code>[('x',), ('y',), ('z',)]</code></p>
<p>All sets of length  2</p>
<p><code>[('x', 'y'), ('x', 'z'), ('y', 'z')]</code></p>
<p>All sets of length  3</p>
<p><code>[('x', 'y', 'z')]</code></p>
<p>For more <a href="http://docs.python.org/2/library/itertools.html#itertools.combinations" rel="nofollow">see the itertools docs</a>, also  the wikipedia entry on <a href="http://en.wikipedia.org/wiki/Power_set#Example" rel="nofollow">power sets</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I have found the following algorithm very clear and simple:</p>
<pre><code>def get_powerset(some_list):
    """Returns all subsets of size 0 - len(some_list) for some_list"""
    if len(some_list) == 0:
        return [[]]

    subsets = []
    first_element = some_list[0]
    remaining_list = some_list[1:]
    # Strategy: get all the subsets of remaining_list. For each
    # of those subsets, a full subset list will contain both
    # the original subset as well as a version of the subset
    # that contains first_element
    for partial_subset in get_all_subsets(remaining_list):
        subsets.append(partial_subset)
        subsets.append(partial_subset[:] + [first_element])

    return subsets
</code></pre>
<p>Another way one can generate the powerset is by generating all binary numbers that have <code>n</code> bits. As a power set the amount of number with <code>n</code> digits is <code>2 ^ n</code>. The principle of this algorithm is that an element could be present or not in a subset as a binary digit could be one or zero but not both.</p>
<pre><code>def power_set(items):
    N = len(items)
    # enumerate the 2 ** N possible combinations
    for i in range(2 ** N):
        combo = []
        for j in range(N):
            # test bit jth of integer i
            if (i &gt;&gt; j) % 2 == 1:
                combo.append(items[j])
        yield combo
</code></pre>
<p>I found both algorithms when I was taking MITx: 6.00.2x Introduction to Computational Thinking and Data Science, and I consider it is one of the easiest algorithms to understand I have seen.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a quick power set refresher !</p>
<blockquote>
<p>Power set of a set X, is simply the set of all subsets of X including
  the empty set</p>
<p>Example set X = (a,b,c) </p>
<p>Power Set = { { a , b , c } , { a , b } , { a , c } , { b , c } , { a } , { b } , { c } , { } }</p>
</blockquote>
<p>Here is another way of finding power set:</p>
<pre><code>def power_set(input):
    # returns a list of all subsets of the list a
    if (len(input) == 0):
        return [[]]
    else:
        main_subset = [ ]
        for small_subset in power_set(input[1:]):
            main_subset += [small_subset]
            main_subset += [[input[0]] + small_subset]
        return main_subset

print(power_set([0,1,2,3]))
</code></pre>
<p>full credit to <a href="http://www.kosbie.net/cmu/fall-15/15-112/notes/notes-recursion-examples.html" rel="nofollow noreferrer">source</a></p>
</div>
<div class="post-text" itemprop="text">
<h1>TL;DR (go directly to Simplification)</h1>
<p>I know I have previously added an answer, but I really like my new implementation. I am taking a set as input, but it actually could be any iterable, and I am returning a set of sets which is the power set of the input. I like this approach because it is more aligned with the mathematical definition of <a href="https://en.wikipedia.org/wiki/Power_set" rel="nofollow noreferrer">power set</a> (<em>set of all subsets</em>). </p>
<pre><code>def power_set(A):
    """A is an iterable (list, tuple, set, str, etc)
    returns a set which is the power set of A."""
    length = len(A)
    l = [a for a in A]
    ps = set()

    for i in range(2 ** length):
        selector = f'{i:0{length}b}'
        subset = {l[j] for j, bit in enumerate(selector) if bit == '1'}
        ps.add(frozenset(subset))

    return ps
</code></pre>
<p>If you want exactly the output you posted in your answer use this:</p>
<pre><code>&gt;&gt;&gt; [set(s) for s in power_set({1, 2, 3, 4})]
[{3, 4},
 {2},
 {1, 4},
 {2, 3, 4},
 {2, 3},
 {1, 2, 4},
 {1, 2},
 {1, 2, 3},
 {3},
 {2, 4},
 {1},
 {1, 2, 3, 4},
 set(),
 {1, 3},
 {1, 3, 4},
 {4}]
</code></pre>
<h2>Explanation</h2>
<p>It is known that the number of elements of the power set is <code>2 ** len(A)</code>, so that could clearly be seen in the <code>for</code> loop.</p>
<p>I need to convert the input (ideally a set) into a list because by a set is a data structure of unique unordered elements, and the order will be crucial to generate the subsets.</p>
<p><code>selector</code> is key in this algorithm. Note that <code>selector</code> has the same length as the input set, and to make this possible it is using an f-string with padding. Basically, this allows me to select the elements that will be added to each subset during each iteration. Let's say the input set has 3 elements <code>{0, 1, 2}</code>, so selector will take values between 0 and 7 (inclusive), which in binary are:</p>
<pre><code>000 # 0
001 # 1
010 # 2
011 # 3
100 # 4
101 # 5
110 # 6
111 # 7
</code></pre>
<p>So, each bit could serve as an indicator if an element of the original set should be added or not. Look at the binary numbers, and just think of each number as an element of the super set in which <code>1</code> means that an element at index <code>j</code> should be added, and <code>0</code> means that this element should not be added.</p>
<p>I am using a set comprehension to generate a subset at each iteration, and I convert this subset into a <code>frozenset</code> so I can add it to <code>ps</code> (power set). Otherwise, I won't be able to add it because a set in Python consists only of immutable objects.</p>
<h1>Simplification</h1>
<p>You can simplify the code using some python comprehensions, so you can get rid of those for loops. You can also use <code>zip</code> to avoid using <code>j</code> index and the code will end up as the following:</p>
<pre><code>def power_set(A):
    length = len(A)
    return {
        frozenset({e for e, b in zip(A, f'{i:{length}b}') if b == '1'})
        for i in range(2 ** length)
    }
</code></pre>
<p>That's it. What I like of this algorithm is that is clearer and more intuitive than others because it looks quite magical to rely on <code>itertools</code> even though it works as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is wild because none of these answers actually provide the return of an actual Python set. Here is a messy implementation that will give a powerset that actually is a Python <code>set</code>. </p>
<pre><code>test_set = set(['yo', 'whatup', 'money'])
def powerset( base_set ):
    """ modified from pydoc's itertools recipe shown above"""
    from itertools import chain, combinations
    base_list = list( base_set )
    combo_list = [ combinations(base_list, r) for r in range(len(base_set)+1) ]

    powerset = set([])
    for ll in combo_list:
        list_of_frozensets = list( map( frozenset, map( list, ll ) ) ) 
        set_of_frozensets = set( list_of_frozensets )
        powerset = powerset.union( set_of_frozensets )

    return powerset

print powerset( test_set )
# &gt;&gt;&gt; set([ frozenset(['money','whatup']), frozenset(['money','whatup','yo']), 
#        frozenset(['whatup']), frozenset(['whatup','yo']), frozenset(['yo']),
#        frozenset(['money','yo']), frozenset(['money']), frozenset([]) ])
</code></pre>
<p>I'd love to see a better implementation, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my quick implementation utilizing combinations but using only built-ins.</p>
<pre><code>def powerSet(array):
    length = str(len(array))
    formatter = '{:0' + length + 'b}'
    combinations = []
    for i in xrange(2**int(length)):
        combinations.append(formatter.format(i))
    sets = set()
    currentSet = []
    for combo in combinations:
        for i,val in enumerate(combo):
            if val=='1':
                currentSet.append(array[i])
        sets.add(tuple(sorted(currentSet)))
        currentSet = []
    return sets
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple way would be to harness the internal representation of integers under 2's complement arithmetic. </p>
<p>Binary representation of integers is as {000, 001, 010, 011, 100, 101, 110, 111} for numbers ranging from 0 to 7. For an integer counter value, considering 1 as inclusion of corresponding element in collection and '0' as exclusion we can generate subsets based on the counting sequence. Numbers have to be generated from <code>0</code> to <code>pow(2,n) -1</code> where n is the length of array i.e. number of bits in binary representation.</p>
<p>A simple <strong>Subset Generator Function</strong> based on it can be written as below. It basically relies </p>
<pre><code>def subsets(array):
    if not array:
        return
    else:
        length = len(array)
        for max_int in range(0x1 &lt;&lt; length):
            subset = []
            for i in range(length):
                if max_int &amp; (0x1 &lt;&lt; i):
                    subset.append(array[i])
            yield subset
</code></pre>
<p>and then it can be used as</p>
<pre><code>def get_subsets(array):
    powerset = []
    for i in subsets(array):
        powerser.append(i)
    return powerset
</code></pre>
<p><strong>Testing</strong></p>
<p>Adding following in local file</p>
<pre><code>if __name__ == '__main__':
    sample = ['b',  'd',  'f']

    for i in range(len(sample)):
        print "Subsets for " , sample[i:], " are ", get_subsets(sample[i:])
</code></pre>
<p>gives following output</p>
<pre><code>Subsets for  ['b', 'd', 'f']  are  [[], ['b'], ['d'], ['b', 'd'], ['f'], ['b', 'f'], ['d', 'f'], ['b', 'd', 'f']]
Subsets for  ['d', 'f']  are  [[], ['d'], ['f'], ['d', 'f']]
Subsets for  ['f']  are  [[], ['f']]
</code></pre>
</div>
<span class="comment-copy">This is the fastest answer I could find, comparing some other solutions on this page to this one using Python's timeit module. However, in certain cases, if you need to modify the resulting output (e.g. joining the letters to form strings) writing a custom recipe utilizing generators and building up the output you want (e.g. adding together two strings) can be much faster.</span>
<span class="comment-copy">why is <code>s = list(iterable)</code> needed?</span>
<span class="comment-copy">@JackStevens because iterables are not rewindable and are not required to have <code>__len__</code> implemented; try out <code>powerset((n for n in range(3)))</code> without the list wrapping.</span>
<span class="comment-copy">for large strings, this would eat lot of memory!</span>
<span class="comment-copy">This is a creative answer. However, I measured it using timeit to compare it to Mark Rushakoff and noticed it was significantly slower. To generate the power set of 16 items 100 times, my measurements were 0.55 versus 15.6.</span>
<span class="comment-copy">In case of an empty array as input, the above code would return <code>[[][]]</code>, to fix that just separate the cases for length checking <code>if len(seq) == 0:         yield []     elif len(seq) == 1:         yield seq         yield []</code></span>
<span class="comment-copy">For reference, I measured this (with Ayush's edit) using timeit and compared it to the powerset recipe in Mark Rushakoff's answer. On my machine, to generate the powerset of 16 items 100 times, this algorithm took 1.36 seconds while Rushakoff's took 0.55.</span>
<span class="comment-copy">Modifying a loop variable (<code>power_set</code>) in the loop that it governs is a very questionable practice. For example, suppose you wrote this instead of the proposed variable-modifying code: <code>power_set += [list(sub_set)+[elem]]</code>. Then the loop does not terminate.</span>
<span class="comment-copy">Good point, but the OP wants a list of sets as the output, so (in Python 3) you can do <code>[*map(set, chain.from_iterable(combinations(s, r) for r in range(len(s)+1)))]</code>; the function arg of <code>map</code> can be <code>frozenset</code> if you prefer.</span>
