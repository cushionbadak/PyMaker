<div class="post-text" itemprop="text">
<p>While creating a program that backs up my files, I found that os.path.basename() was not working consistently. For example:</p>
<pre><code>import os

folder = '\\\\server\\studies\\backup\\backup_files'
os.path.basename(folder)
</code></pre>
<p>returns <code>'backup_files'</code></p>
<pre><code>folder = '\\\\server\\studies'
os.path.basename(folder)
</code></pre>
<p>returns <code>''</code></p>
<p>I want that second basename function to return 'studies' but it returns an empty string. I ran <code>os.path.split(folder)</code> to see how it's splitting the string and it turns out it's considering the entire path to be the directory, i.e. <code>('\\\\server\\studies', ' ')</code>.</p>
<p>I can't figure out how to get around it.. The weirdest thing is I ran the same line earlier and it worked, but it won't anymore! Does it have something to do with the very first part being a shared folder on the network drive?</p>
</div>
<div class="post-text" itemprop="text">
<p>that looks like a Windows UNC specificity</p>
<p>UNC paths can be seen as equivalent of unix path, only with double backslashes at the start.</p>
<p>A workaround would be to use classical <code>rsplit</code>:</p>
<pre><code>&gt;&gt;&gt; r"\\server\studies".rsplit(os.sep,1)[-1]
'studies'
</code></pre>
<p>Fun fact: with 3 paths it works properly:</p>
<pre><code>&gt;&gt;&gt; os.path.basename(r"\\a\b\c")
'c'
</code></pre>
<p>Now why this? let's check the source code of <code>ntpath</code> on windows:</p>
<pre><code>def basename(p):
    """Returns the final component of a pathname"""
    return split(p)[1]
</code></pre>
<p>okay now <code>split</code></p>
<pre><code>def split(p):
    seps = _get_bothseps(p)
    d, p = splitdrive(p)
</code></pre>
<p>now <code>splitdrive</code></p>
<pre><code>def splitdrive(p):
    """Split a pathname into drive/UNC sharepoint and relative path specifiers.
    Returns a 2-tuple (drive_or_unc, path); either part may be empty.
</code></pre>
<p>Just reading the documentation makes us understand what's going on.</p>
<p>A Windows sharepoint has to contain 2 path parts:</p>
<pre><code>\\server\shareroot
</code></pre>
<p>So <code>\\server\studies</code> is seen as the drive, and the path is empty. Doesn't happen when there are 3 parts in the path.</p>
<p>Note that it's not a bug, since it's not possible to use <code>\\server</code> like a normal directory, create dirs below, etc...</p>
<p>Note that the official documentation for <a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer"><code>os.path.basename</code></a> doesn't mention that (because <code>os.path</code> calls <code>ntpath</code> behind the scenes) but it states:</p>
<blockquote>
<p>Return the base name of pathname path. This is the second element of the pair returned by passing path to the function split(). <strong>Note that the result of this function is different from the Unix basename program</strong></p>
</blockquote>
<p>That last emphasised part at least is true! (and the documentation for <a href="https://docs.python.org/3/library/os.path.html#os.path.split" rel="nofollow noreferrer"><code>os.path.split()</code></a> doesn't mention that issue or even talks about windows)</p>
</div>
<span class="comment-copy">Welcome to StackOverflow! Please add information about OS: is it Windows?</span>
<span class="comment-copy">Yes, it is Windows.</span>
<span class="comment-copy">Take a look at <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a>.</span>
