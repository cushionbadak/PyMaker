<div class="post-text" itemprop="text">
<p>I want to generate a list of ternary numbers of length l and save into a dictionary. Then I want the ability to compare these numbers digit by digit and do modifications too.</p>
<p>For example if the length <code>l=2</code>, the dictionary should contain numbers: <code>00,01,02,10,11,12,20,21,22</code>.</p>
<p>Then I want to do operations like comparing the <code>ith</code> digit of the <code>jth</code> entry in the dictionary with the <code>kth</code> digit of the <code>lth</code> entry. Like in the above list, comparing "0" of the entry "20" with "1" of the entry "21"</p>
<p>Also I should be able to sum up the digits of the <code>ith</code> entry of the dictionary. Like sum of the entry "11" = 2.</p>
<p>Please suggest me a way to do the above things. I am new to coding in python.</p>
<p>Here is my try but this doesn't give me 2 digit numbers. So a suggestion for how to go to tens place from ones place and so on, would be appreciated:</p>
<pre><code>dict = {}
n = 0
dict[0] = 00
while (n &lt; 9):
   dict[n+1]= (dict[n] +1) % 3
   if dict[n+1] = 2
   n = n +1

print (dict)   `
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.product</code> seems to give you what you're looking for. It's often used in place of nested <code>for</code> loops, but has a convenient <code>repeat</code> kwarg that makes your life easier here.</p>
<pre><code>l = 3  # that's a lower-case L. Never use that in code, though, it looks like a 1.

digits = itertools.product(range(3), repeat=l)

# is equivalent to

def my_product():
    """the same as above itertools.product if l==3"""
    for i in range(3):
        for j in range(3):
            for k in range(3):
                yield (i, j, k)
my_digits = my_product()  # YUCK!
</code></pre>
<p>This produces a <em>generator</em> (note: not a list!) that produces all the values you're looking for from <code>(0, 0, 0)</code> to <code>(2, 2, 2)</code>. To make a list, simply cast it to one.</p>
<pre><code>digits = list(itertools.product(range(3), repeat=l))  # still a lower-case L. Still don't do this.
</code></pre>
<p>Then to compare digits, just use indexing like any 2D list.</p>
<pre><code>first_value = digits[0]
first_digit = first_value[0]
assert first_digit == digits[0][0]

second_value = digits[1]
first_digit_of_second_value = second_value[0]
assert first_digit_of_second_value == digits[1][0]

if digits[0][0] == digits[1][0]:
    # that's these two:  v          v
    # digits ==         (0, 0, 0), (0, 0, 1), (0, 0, 2), ...
    do_whatever_you_want()
</code></pre>
<p>If you want to specifically output <code>(0, 0, 0)</code> as <code>000</code>, you can write a function for that:</p>
<pre><code>def sprint_tuple(tup):
    """Takes a tuple of digits and pretty Sprints them.

    &gt;&gt;&gt; sprint_tuple((0, 0, 1))
    '001'
    """

    return ''.join([str(i) for i in tup])
</code></pre>
<p>then loop over your <code>digits</code> and print each:</p>
<pre><code>&gt;&gt;&gt; for tup in digits:
...     print(sprint_tuple(tup))
000
001
002
010
...
222
</code></pre>
</div>
<span class="comment-copy">We don't do suggestions. We help you fix your code. Where is your code? See <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">Are you aware that a dictionary contains keys and values?</span>
<span class="comment-copy">If you are new, start here and learn: <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a></span>
<span class="comment-copy">To start, look at <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertool product</a>.</span>
<span class="comment-copy">I have put my code, please suggest the fix</span>
