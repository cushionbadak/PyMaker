<div class="post-text" itemprop="text">
<p>If I have the following structure:</p>
<pre><code>try:
    do_something_dangerous()
except Exception1:
    handle_exception1()
    handle_all_exceptions()
except Exception2:
    handle_exception2()
    handle_all_exceptions()
...
</code></pre>
<p>What is the most Pythonic way to call <code>handle_all_exceptions</code> if I don't want to do it in every <code>except</code> clause because I have lots of them? Maybe there is a simple way to determine if the exception occured or not inside <code>finally</code> clause?</p>
</div>
<div class="post-text" itemprop="text">
<p>Simplest way I can think is nesting try statements:</p>
<pre><code>try:
   try:
        do_something_dangerous()
    except Exception1:
        handle_exception1()
        raise
    except Exception2:
        handle_exception2()
        raise
except Exception:
    handle_all_exceptions()
</code></pre>
<p>The bare <code>raise</code> reraises the exception.</p>
<p>Another option is to catch all exceptions and do your own dispatching instead of using the <code>try</code> statement for that:</p>
<pre><code>try:
    do_something_dangerous()
except Exception as e:
    if isinstance(e, Exception1):
        handle_exception1()
    if isisntance(e, Exception2):
        handle_exception2()
    handle_all_exceptions()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you could also check for the types of the Exceptions. However, I don't know if this is the most pythonic way:</p>
<p><strong>EDIT:</strong> Looking at the documentation, it seems there isn't a most pythonic way. How you deal with the different types of exceptions inside your function <code>handle_all_exceptions()</code> is up to you. <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">See the doc.</a></p>
<pre><code>try:
    do_something_dangerous()
except Exception as e:
    handle_all_exceptions(e)

def handle_all_exceptions(e):
    if isinstance(e, Exception1):
        handle_exception1()
    elif isinstance(e, Exception2):
        handle_exception2()
</code></pre>
<p>As you don't want to check for instances or similiar, here is another possible way of implementation. Although the list implementation is definitly not nice, it solves the problem without nested try-statements. You can also use boolean statements or similiar, however with the list, you still have access to the error object for further handling.</p>
<pre><code>ex = []
try:
    do_something_dangerous()
except Exception1 as e:
    ex.append(e)
    handle_exception1()
except Exception2 as e:
    ex.append(e)
    handle_exception2()
finally:
    if ex: handle_all_exceptions(ex)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could first define a mapping associating handling function with corresponding exception:</p>
<pre><code>err_handling = {
   Exception1: handle_exception1
   Exception2: handle_exception2
   # ...
}
</code></pre>
<p>Then you could accept the raised exception as an argument of the <code>handle_all_exceptions</code> function, and add it the specific handling using the handling mapping and the type of the raised exception.</p>
<pre><code>def handle_all_exceptions(err):
    # common exception handling
    err_handling[type(err)]()
</code></pre>
<p>Doing it you could handle you exception in a simple manner:</p>
<pre><code>try:
    do_something_dangerous()
except Exception as err:
    handle_all_exceptions(err)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found some tricky solution without <code>type</code> , <code>isinstance</code> and lots of <code>raise</code> in every <code>except</code> clause. Maybe it is not the most Pythonic, but it is interesting at least:</p>
<pre><code>try:
    do_something_dangerous()
except:
    try:
        raise
    except Exception1:
        handle_exception1()
    except Exception2:
        handle_exception2()
    handle_all_exceptions()
</code></pre>
</div>
<span class="comment-copy">Why not use <code>except Exception as ex' ? This will catch all possible exceptions. With the object </code>ex`, or whatever you call it, you can decide what to do further on.</span>
<span class="comment-copy">So, I need to write <code>if isinstance(ex, Exception1): handle_exception1()</code>. Seems not Pythonic.</span>
<span class="comment-copy">@Sanyash that's roughly what the <code>except</code> clause will do, though - check the type of the exception against the sequence of types you provide.</span>
<span class="comment-copy">Ok, all the answers are good, but don't solves my problem 100%. I wish there is a way without using <code>type(exc)</code> and <code>isinstance</code>. @nosklo advice with <code>raise</code> maybe the best, but it requires two <code>try</code> clauses.</span>
<span class="comment-copy">@Sanyash why would you restrict the usage of type or isinstance?</span>
<span class="comment-copy">To also act on subclasses of <code>Exception1</code> and <code>Exception2</code> use <code>isinstance</code> instead of <code>type(...)==</code></span>
