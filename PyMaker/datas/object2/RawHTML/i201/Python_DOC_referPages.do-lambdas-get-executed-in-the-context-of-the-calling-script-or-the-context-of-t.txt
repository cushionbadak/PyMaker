<div class="post-text" itemprop="text">
<p>If the following function is defined in a different file and returned and executed in a separate file, will it give the file name of where it was defined? Or where it was called?</p>
<pre><code>File1.py
-----
def get_current_filename():
        return lambda: os.path.realpath(os.path.abspath(__file__))

File2.py
----
import File1
x= File1.get_current_filename()
x()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will use the filename where it was defined, i.e. <code>File1.py</code>. </p>
<p>The import system populates the <code>__file__</code> attribute on each module object during module loading. Docs <a href="https://docs.python.org/3/reference/import.html#import-related-module-attributes" rel="nofollow noreferrer">here</a>.</p>
<p>Note that there is no supported way to get the calling module's filename (<code>File2.py</code>) here, that's only possible with hacks. Avoid.</p>
</div>
<div class="post-text" itemprop="text">
<p>As wim said, the function gets executed in such a way that <code>__file__</code> will return the name of the file the function is present in (File1.py).</p>
<p>It is however possible to achieve what you want, although again as wim said it is a bit hacky. You can do this by looking at the frame records in the call stack using <a href="https://docs.python.org/3/library/inspect.html#inspect.stack" rel="nofollow noreferrer"><code>inspect.stack</code></a>:</p>
<p>File1.py:</p>
<pre><code>import inspect

def get_current_filename():
        return inspect.stack()[1][1]
</code></pre>
<p>File2.py:</p>
<pre><code>import File1
x = File1.get_current_filename()
print(x)
</code></pre>
<p>Output:</p>
<pre><code>C:\&lt;omitted&gt;\File2.py
</code></pre>
<p>The first <code>[1]</code> indicates to look at the second frame in the call stack (the first frame being the location that called <code>inspect.stack</code>, the second being the location that called that), the second <code>[1]</code> gets the filename from the frame.</p>
</div>
<span class="comment-copy">You could try this yourself by changing the lambda body to <code>print(__file__)</code></span>
<span class="comment-copy">this isn't to do with <code>lambda</code> directly, a regular <code>def</code> function would behave the same</span>
<span class="comment-copy">You're essentially asking if Python is dynamically scoped or statically scoped language (it's the latter). Using a lambda is a irrelevant here, it's not like a lisp lambda.</span>
<span class="comment-copy"><code>lambda</code> is irrelevant, Python uses lexical scoping, and does not support dynamic scoping. Maybe a duplicate of: <a href="https://stackoverflow.com/questions/2295290/what-do-lambda-function-closures-capture" title="what do lambda function closures capture">stackoverflow.com/questions/2295290/â€¦</a> ?</span>
<span class="comment-copy">I don't think it's irrelevant in some languages being that the Lambda is passed to the calling script and executed in the context of the calling script.</span>
<span class="comment-copy">Haha was literally typing up how to get the name with the calling file when your edi popped up. Thank you for the guidance.</span>
<span class="comment-copy">That is fascinating. Thanks for adding this!  Using it!</span>
