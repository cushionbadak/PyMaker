<div class="post-text" itemprop="text">
<p>I'm using Python 3.7.1 on Windows.
When I print a float variable using the % formatting. only the natural part is printed.
Here is an example:</p>
<pre><code>result_2 = 4.523529411764706
statement_2a = "Your text contains an average length of %d letter(s) per words." % result_2

print(result_2)
print(statement_2a)
</code></pre>
<p>This gives the following result:</p>
<pre><code>4.523529411764706
Your text contains an average length of 4 letter(s) per words.
</code></pre>
<p>But what I actually want is:</p>
<pre><code>Your text contains an average length of 4.5235 letter(s) per words.
</code></pre>
<ol>
<li>How do I prevent the print() function from practically deleting the decimal numbers?</li>
<li>How to round the number to four decimal digits</li>
</ol>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>As you try print float number, use %f instead of %d.
This code will print the number to 4 decimal places:</p>
<pre><code>result_2 = 4.523529411764706
statement_2a = "Your text contains an average length of %.4f letter(s) per words." % result_2

print(result_2)
print(statement_2a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A better alternative than <code>%</code> formatting would be to use <code>.format</code>.</p>
<pre><code>result_2 = 4.523529411764706
print(result_2)
print("Your text contains an average length of {} letter(s) per words.".format(result_2))
</code></pre>
<p>For rounding use <code>round</code></p>
<pre><code>result_2 = 4.523529411764706
print(result_2)
print("Your text contains an average length of {} letter(s) per words.".format(round(result_2,4)))
</code></pre>
<p>But if you feel comfortable with <code>%</code> formatting then to print whole number use <code>%s</code></p>
<pre><code>result_2 = 4.523529411764706
statement_2a = "Your text contains an average length of %s letter(s) per words." % result_2
print(result_2)
print(statement_2a)
</code></pre>
<p>For rounding to 4 digits use <code>%1.4f</code></p>
<pre><code>result_2 = 4.523529411764706
statement_2a = "Your text contains an average length of %1.4f letter(s) per words." % result_2
print(result_2)
print(statement_2a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are using "old-style" formatting and used <code>%d</code> as the placeholder. This will represent your number as a decimal number without any fractions. If you want to display floating point numbers, the placeholder is simply <code>%f</code>.</p>
<p>If you want to use the variable's string representation, you can also always just use <code>%s</code>. But since you are on python 3.7, there are some more modern approaches as well.</p>
<ul>
<li>"old-style" formatting: <code>"%s" % var</code></li>
<li>"new-style" formatting using <code>format()</code>: <code>"{}".format(var)</code> (Read up on python formatters for details)</li>
<li>f-strings, which are basically syntactic sugar for <code>format()</code>-based string interpolation. You prefix with <code>f</code> and put the variables in the string literal itself: <code>f"{var}"</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There are several options to evaluate expressions and print them as a string in python. </p>
<p>There are already some good answers, but here are some explicit examples and links to the documentation.</p>
<p><strong>Formatted string literals (f-strings)</strong></p>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-strings</a> allow you to input expressions which are evaluated at run-time. In the f strings expressions are encased by curly brackets.</p>
<p>As an example:</p>
<pre><code>x = 42.222222222

print(f'My value is: {x}')
</code></pre>
<p>prints <code>My value is: 42.222222222</code>.</p>
<p>and with specifying the format:</p>
<pre><code>x = 42.222222222

print(f'My value is: {x:.2f}')
</code></pre>
<p>prints <code>My value is: 42.22</code>.</p>
<p><strong>Str formatting method</strong></p>
<p>Strings have a built-in <a href="https://docs.python.org/2/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>.format()</code></a> method where you can specify replacement fields with curly brackets.</p>
<p>As an example:</p>
<pre><code>x = 42.222222222

print('My value is: {}'.format(x))
</code></pre>
<p>prints <code>My value is: 42.222222222</code>.</p>
<p>and with string formatting:</p>
<pre><code>x = 42.222222222

print('My value is: {:.2f}'.format(x))
</code></pre>
<p>prints <code>My value is: 42.22</code>.</p>
<p><strong>String formatting operator</strong></p>
<p><a href="https://docs.python.org/2/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">String formatting operator</a></p>
<p>As an example:</p>
<pre><code>x = 42.222222222

print('My value is: %' % x)
</code></pre>
<p>prints <code>My value is: 42.222222222</code>.</p>
<p>and with string formatting:</p>
<pre><code>x = 42.222222222

print('My value is: %.2f' % x)
</code></pre>
<p>prints <code>My value is: 42.22</code>.</p>
<p>See @Felk answer for some more qualitive descriptions of the different methods.</p>
</div>
<span class="comment-copy">Format with <code>% round(result_2, 4)</code></span>
<span class="comment-copy">You need <code>%1.4f</code> instead of <code>%d</code> in the string</span>
<span class="comment-copy">A simple solution would be to use <code>%s</code> to print number exactly as string</span>
<span class="comment-copy">@DavidG Thanks! That's worked!</span>
<span class="comment-copy">@skaul05 Awesome, didn't know that one either! Thanks!</span>
