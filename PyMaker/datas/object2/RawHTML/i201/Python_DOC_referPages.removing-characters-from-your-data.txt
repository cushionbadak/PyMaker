<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/385558/extract-float-double-value">Extract float/double value</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a number of strings similar to <code>Current Level: 13.4 db.</code> and I would like to extract just the floating point number. I say floating and not decimal as it's sometimes whole. Can RegEx do this or is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>If your float is always expressed in decimal notation something like</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall("\d+\.\d+", "Current Level: 13.4 db.")
['13.4']
</code></pre>
<p>may suffice.</p>
<p>A more robust version would be:</p>
<pre><code>&gt;&gt;&gt; re.findall(r"[-+]?\d*\.\d+|\d+", "Current Level: -13.2 db or 14.2 or 3")
['-13.2', '14.2', '3']
</code></pre>
<p>If you want to validate user input, you could alternatively also check for a float by stepping to it directly:</p>
<pre><code>user_input = "Current Level: 1e100 db"
for token in user_input.split():
    try:
        # if this succeeds, you have your (first) float
        print float(token), "is a float"
    except ValueError:
        print token, "is something else"

# =&gt; Would print ...
#
# Current is something else
# Level: is something else
# 1e+100 is a float
# db is something else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may like to try something like this which covers all the bases, including not relying on whitespace after the number:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; numeric_const_pattern = r"""
...     [-+]? # optional sign
...     (?:
...         (?: \d* \. \d+ ) # .1 .12 .123 etc 9.1 etc 98.1 etc
...         |
...         (?: \d+ \.? ) # 1. 12. 123. etc 1 12 123 etc
...     )
...     # followed by optional exponent part if desired
...     (?: [Ee] [+-]? \d+ ) ?
...     """
&gt;&gt;&gt; rx = re.compile(numeric_const_pattern, re.VERBOSE)
&gt;&gt;&gt; rx.findall(".1 .12 9.1 98.1 1. 12. 1 12")
['.1', '.12', '9.1', '98.1', '1.', '12.', '1', '12']
&gt;&gt;&gt; rx.findall("-1 +1 2e9 +2E+09 -2e-9")
['-1', '+1', '2e9', '+2E+09', '-2e-9']
&gt;&gt;&gt; rx.findall("current level: -2.03e+99db")
['-2.03e+99']
&gt;&gt;&gt;
</code></pre>
<p>For easy copy-pasting:</p>
<pre><code>numeric_const_pattern = '[-+]? (?: (?: \d* \. \d+ ) | (?: \d+ \.? ) )(?: [Ee] [+-]? \d+ ) ?'
rx = re.compile(numeric_const_pattern, re.VERBOSE)
rx.findall("Some example: Jr. it. was .23 between 2.3 and 42.31 seconds")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html#simulating-scanf" rel="noreferrer">Python docs</a> has an answer that covers +/-, and exponent notation</p>
<pre><code>scanf() Token      Regular Expression
%e, %E, %f, %g     [-+]?(\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?
%i                 [-+]?(0[xX][\dA-Fa-f]+|0[0-7]*|\d+)
</code></pre>
<p>This regular expression does not support international formats where a comma is used as the separator character between the whole and fractional part (3,14159).
In that case, replace all <code>\.</code> with <code>[.,]</code> in the above float regex.</p>
<pre><code>                        Regular Expression
International float     [-+]?(\d+([.,]\d*)?|[.,]\d+)([eE][-+]?\d+)?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>re.findall(r"[-+]?\d*\.\d+|\d+", "Current Level: -13.2 db or 14.2 or 3")
</code></pre>
<p>as described above, works really well!
One suggestion though:</p>
<pre><code>re.findall(r"[-+]?\d*\.\d+|[-+]?\d+", "Current Level: -13.2 db or 14.2 or 3 or -3")
</code></pre>
<p>will also return negative int values (like -3 in the end of this string)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following regex to get integer and floating values from a string:</p>
<pre><code>re.findall(r'[\d\.\d]+', 'hello -34 42 +34.478m 88 cricket -44.3')

['34', '42', '34.478', '88', '44.3']
</code></pre>
<p>Thanks
Rex</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that you'll find interesting stuff in the following answer of mine that I did for a previous similar question:</p>
<p><a href="https://stackoverflow.com/q/5929469/551449">https://stackoverflow.com/q/5929469/551449</a></p>
<p>In this answer, I proposed a  pattern that allows a regex to catch any kind of number and since I have nothing else to add to it, I think it is fairly complete</p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach that may be more readable is simple type conversion. I've added a replacement function to cover instances where people may enter European decimals:</p>
<pre><code>&gt;&gt;&gt; for possibility in "Current Level: -13.2 db or 14,2 or 3".split():
...     try:
...         str(float(possibility.replace(',', '.')))
...     except ValueError:
...         pass
'-13.2'
'14.2'
'3.0'
</code></pre>
<p>This has disadvantages too however. If someone types in "1,000", this will be converted to 1. Also, it assumes that people will be inputting with whitespace between words. This is not the case with other languages, such as Chinese.</p>
</div>
<span class="comment-copy">Will it always have an integer portion? Even if it's 0? Do you need to match 0.4 or .4?</span>
<span class="comment-copy">I would say yes. Input is manually entered so there is chance for inconsistency.</span>
<span class="comment-copy"><code>re.findall(r"[-+]?\d*\.*\d+", "Current Level: -13.2 db or 14.2 or 3")</code> <code>['-13.2', '14.2', '3']</code></span>
<span class="comment-copy">I think you meant "\d+\.\d+"  instead of "\d+.\d+" in your first code block. Right now it would extract something like '13a4'.</span>
<span class="comment-copy">@JuanPablo looks fine but <code>r"[-+]?\d*\.?\d+"</code> is a little more concise and will not accept <code>0..4</code></span>
<span class="comment-copy">that will miss negative integers "-35 um". Should alternation have <code>[-+]?</code> at the beginning:  <code>#"[-+]?\d*\.\d+|[-+]?\d+"</code></span>
<span class="comment-copy">missign thousand separators, scientific expression, better answer available on the page</span>
<span class="comment-copy">Very good! Finally I've found a really good pattern!</span>
<span class="comment-copy">Yes, best pattern ever for numbers. Thanks a lot!</span>
<span class="comment-copy">Adding <code>(?:\+\s*|\-\s*)?</code> at the front would also allow for a space between the sign and the number. Even though I admit this is probably not very "standard" I have seen this pattern "floating around" in some files.</span>
<span class="comment-copy">You probably need an r in front of the pattern string in the very last snippet.</span>
<span class="comment-copy">This regex will also find non-numeric combinations of periods and digits: <code>'.... 1.2.3.4 ..56..'</code> yields: <code>['....', '1.2.3.4', '..56..']</code></span>
<span class="comment-copy">"4x size AAA 1.5V batteries included" :-)</span>
<span class="comment-copy">Those terrible users! Always entering in silly data. TBH, I've intentionally kept this example demonstrative rather than robust. When I begun writing this response, @The MYYN only provided regular expressions in the accepted answer. I wanted to provide an example of another way to go about things.</span>
