<div class="post-text" itemprop="text">
<p>I have the idea of creating a control panel to monitor multiple scripts and processes. Having built the interface in advance, I seem to struggle with detecting the status of subprocess commands, getting a locked-up control panel as the child process has started.</p>
<p>There are methods such as <code>subprocess.communicate()</code> or <code>subprocess.wait()</code> to determine whether a process is alive/finished or not,  yet those lock up the control panel for the lifetime of the child process. As seen in this block. the if clausule is never reached.</p>
<pre><code>htop = subprocess.Popen(["xterm", "-e", "htop"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
output = htop.communicate():
if output:
    print("Succeeded!")
else:
    print("status unknown")
</code></pre>
<p>How would I be able to control and monitor the new process without locking up the control panel? </p>
<p>The idea is that the panel would be able to start/stop servers, and report on their status:</p>
<pre><code>HTTP server status: running
DHCP server status: stopped

[1] start HTTP server 
[2] start DHCP server
[0] stop all servers
</code></pre>
<p>At the moment, it is possible to start a subprocess and see if it did by pressing [1]. It is not however possible to terminate the same subprocess with a different if-statement [0].</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>p.poll()</code> or, if you need to check for output, use <code>subprocess.PIPE</code> for stdout and <a href="https://docs.python.org/3/library/select.html" rel="nofollow noreferrer"><code>select()</code></a> on <code>p.stdout</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've found out how to control the subprocess via two if statements by making the process variable a global variable.</p>
<p>As a result, the code would be as follows (rough sketch):</p>
<pre><code>if command == "run":
    global htop
    htop = subprocess.Popen(["xterm", "-e", "htop"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    if htop.poll() == None:
        htopStatus = "Running"
if command == "stop":
    if htop.poll() == None:
        htop.terminate()
        htopStatus = "Stopped"
</code></pre>
</div>
<span class="comment-copy"><code>htop</code> is very explicitly meant to generate content for interactive viewing by humans. If you want to programatically inspect and interact with the process list, use the <a href="https://pypi.org/project/psutil/" rel="nofollow noreferrer"><code>psutil</code></a> library.</span>
<span class="comment-copy">True as far as it goes, but assumes that the OP's tool selection is fit-to-task (ie. that reading output from <code>htop</code> is a suitable way to track running processes).</span>
<span class="comment-copy">one gripe is that I intend to implement this on a different process that has no static output string to read from (the stdout could be quite random). I've used <code>htop</code> as a way to get a persistent process, rather than something that exits upon success (such as <code>cat text.txt</code>)  Hence why I think I should track the PID of the terminal that is being created, instead.</span>
<span class="comment-copy">Seems like checking <code>poll</code> against <code>None</code> is good enough for you, then. I would not recommend to depend on <code>stdout</code> anyway. It can just be nice to forward output from subprocesses, if they have any.</span>
<span class="comment-copy">agreed, perhaps if I were to implement a log window in said control panel but so far I don't see the need for that since they would have their own terminal window either way.</span>
