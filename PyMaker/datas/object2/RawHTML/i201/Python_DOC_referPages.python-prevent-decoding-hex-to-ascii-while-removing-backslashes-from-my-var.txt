<div class="post-text" itemprop="text">
<p>I want to strip some unwanted symbols from my variable. In this case the symbols are backslashes. I am using a HEX number, and as an example I will show some short simple code down bellow. But I don't want python to convert my HEX to ASCII, how would I prevent this from happening.? I have some long shell codes for asm to work with later which are really long and removing <code>\</code> by hand is a long process. I know there are different ways like using <code>echo -e "x\x\x\x" &gt; output</code> etc, but my whole script will be written in python. 
Thanks</p>
<pre><code>&gt;&gt;&gt; a = "\x31\xC0\x50\x68\x74\x76"
&gt;&gt;&gt; b = a.strip("\\")
&gt;&gt;&gt; print b
1�Phtv

&gt;&gt;&gt; a = "\x31\x32\x33\x34\x35\x36"
&gt;&gt;&gt; b = a.strip("\\")
&gt;&gt;&gt; print b
123456
</code></pre>
<p>At the end I would like it to print my var:</p>
<pre><code>&gt;&gt;&gt; print b
x31x32x33x34x35x36
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are no backslashes in your variable:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; a = "\x31\xC0\x50\x68\x74\x76"
&gt;&gt;&gt; print(a)
1ÀPhtv
</code></pre>
<p>Take newline for example: writing <code>"\n"</code> in Python will give you string with one character -- newline -- and no backslashes. See <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">string literals docs</a> for full syntax of these.</p>
<p>Now, if you really want to write string with such backslashes, you can do it with <code>r</code> modifier:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; a = r"\x31\xC0\x50\x68\x74\x76"
&gt;&gt;&gt; print(a)
\x31\xC0\x50\x68\x74\x76
&gt;&gt;&gt; print(a.replace('\\', ''))
x31xC0x50x68x74x76
</code></pre>
<p>But if you want to convert a regular string to hex-coded symbols, you can do it character by character, converting it to number (<code>"\x31"</code> == <code>"1"</code> --&gt; <code>49</code>), then to hex (<code>"0x31"</code>), and finally stripping the first character:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; a = "\x31\xC0\x50\x68\x74\x76"
&gt;&gt;&gt; print(''.join([hex(ord(x))[1:] for x in a]))
'x31xc0x50x68x74x76'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems in your Code.</p>
<p>First the simple one:
<code>strip()</code> just removes one occurrence. So you should use <code>replace("\\", "")</code>. This will replace every backslash with "", which is the same as removing it. </p>
<p>The second problem is pythons behavior with backslashes:</p>
<p>To get your example working you need to append an 'r' in front of your string to indicate, that it is a raw string. <code>a = r"\x31\xC0\x50\x68\x74\x76"</code>. In raw strings, a backlash doesn't escape a character but just stay a backslash. </p>
<pre><code>&gt;&gt;&gt; r"\x31\xC0\x50\x68\x74\x76"
'\\x31\\xC0\\x50\\x68\\x74\\x76'
</code></pre>
</div>
<span class="comment-copy">Thank you, now it makes sense completely</span>
