<div class="post-text" itemprop="text">
<p>I have read the following question, but it's little different from what I want:
<br/>     
<a href="https://stackoverflow.com/questions/4379570/removing-a-character-in-a-string-one-at-a-time">Removing a character in a string one at a time</a></p>
<p>I'm new to python and I have seen this question somewhere.</p>
<p>Given one number N and one 1-digit integer K, Append K at the last, remove one digit at a time from the number and find the smallest occurrence.</p>
<p>Given:</p>
<pre><code>42 4
24 9
</code></pre>
<p>Output:</p>
<pre><code>24
24
</code></pre>
<p>Here's what I did:</p>
<pre><code>n=input().split(" ")
if "0" not in n:
    conc_string=n[0]+n[1]
    answer=n[0]
    #Here I want to remove each digit from string one at a time and check
    #Example: '424' should be '24','44','42'
    if(any_number&lt;answer):
        answer=any_number
    print(answer)
</code></pre>
<p>But the problem is I have read <em>strings are immutable</em> in python. So how to proceed? Also is there any efficient way other than using strings?</p>
<p>P.S. N can contain any number of digits.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a></p>
<p>What you'll need to do is:</p>
<pre><code>import re

# don't actually use the **, i'm putting those there for emphasis.
s = re.search(r"(?P&lt;group_name1&gt;**pattern goes here**)(?P&lt;group_name2&gt;**pattern goes here**, **name of string goes here**)
</code></pre>
<p>then you can take the group and turn it back into a string by doing</p>
<pre><code>string = str(s.group('group_name'))
</code></pre>
<p>I'll leave you to the logic of finding matches, if you need help just leave another comment :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Turn the strings into lists and work with them. In the end, turn the lists into strings again using <code>join()</code></p>
<pre><code>a = 'abc'
a = list(a)
print(a)
&gt;&gt;&gt;['a', 'b', 'c']
a = ''.join(a)
print(a)
&gt;&gt;&gt;'abc'
</code></pre>
</div>
<span class="comment-copy">what about <code>'421'</code> should it be <code>'42', '21', '41'</code> or rather <code>'14', '12',  '24', '21', '41','42'</code>??? ie is it combinations or permutations?</span>
<span class="comment-copy">perhaps you should do <code>import itertools;mm = lambda x:min([int(''.join(sorted(i))) for i in itertools.combinations(str(x).replace('0',''),2)]);mm('424')</code></span>
<span class="comment-copy"><code>'421'</code> should be <code>'42', '41', '21'</code></span>
<span class="comment-copy">Then in the code i wrote, just remove sorted:<code>import itertools;mm = lambda x:min([int(''.join(i)) for i in itertools.combinations(str(x).replace('0',''),2)]);mm('424')</code></span>
<span class="comment-copy">the number may contain many digits. So i guess it's not possible to write re for each and every digit. Also can't i acheive it using string? Like in C, simply we take <code>char[ ] str='434' </code> and then loop over it.</span>
<span class="comment-copy">Oh I'm sorry, i misread your question. Yaniv's answer will work much better. After you turn the string into a list you can just iterate based on the length of the list and swap things around.</span>
