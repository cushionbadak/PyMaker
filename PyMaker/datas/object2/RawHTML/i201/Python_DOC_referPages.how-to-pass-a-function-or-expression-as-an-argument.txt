<div class="post-text" itemprop="text">
<p>I am trying to make a complete function, that takes in an expression:</p>
<pre><code>def graph(formula):
    fig = plt.figure()
    ax = fig.gca(projection='3d')

    X = np.arange(-50, 50, 0.5)
    X = X[X != 0]
    Y = np.arange(-50, 50, 0.5)
    Y = Y[Y != 0]
    X, Y = np.meshgrid(X, Y)

    Z=[[0],[0]]
    expression = "Z=" + formula
    exec(expression)
</code></pre>
<p>Now I want to do <code>graph("X+Y")</code>, and then it should do Z = X + Y. It doesn't do that. I have tried doing the same with <code>eval</code> instead of <code>exec</code>, but no luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to pass a "formula" that computes <code>Z</code> from <code>X</code> and <code>Y</code>. Rather than using <code>exec</code> or <code>eval</code> and running into issues with namespaces, a better way to do that is to pass in a function. As user <a href="https://stackoverflow.com/users/1417451/s3cur3">s3cur3</a> commented, an easy way to do that is with a <code>lambda</code> expression:</p>
<pre><code>def graph(func):
    # set up X and Y up here

    Z = func(X, Y)

    # do stuff with Z after computing it?

graph(lambda X, Y: X+Y)
</code></pre>
<p>If you need more complicated logic that you can fit in a lambda, you can write out a full function if you need to:</p>
<pre><code>def my_func(x, y):  # this could be done in a lambda too, but lets pretend it couldn't
    if random.random() &lt; 0.5: 
        return x + y
    return x - y

graph(my_func)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I assume you mean to pass to your function like so (to calculate Z),</p>
<pre><code>def graph(formula)
    ...
graph(X+Y)
...
</code></pre>
<p>If so, why not just pass to separate values (or arrays of values)? Such as,</p>
<pre><code>def graph(x, y):
    ...
graph(4, 5)
...
</code></pre>
<p>or,</p>
<pre><code>mypoints = [[1, 3], [4, 8], [8, 1], [10, 3]] # 2-D array
def graph(XY):
    for point in XY:
        x = point[0]
        y = point[1]
.... # everything else

graph(mypoints )
...
</code></pre>
<p>For a full example of this, check out <a href="https://medium.freecodecamp.org/data-science-with-python-8-ways-to-do-linear-regression-and-measure-their-speed-b5577d75f8b" rel="nofollow noreferrer">Method: Stats.linregress( )</a> in this article (scroll down a bit).</p>
<p>Otherwise, you could:</p>
<ul>
<li>pass the data as an array (a <strong>table</strong> of X, Y values if you will).</li>
<li>if it is a super complex formula that will have a bunch of attributes and methods attached to it (such as including complex numbers), perhaps creating a <code>Formula class</code>. </li>
</ul>
<p>You could also write a function using the lambda syntax. This would give you the freedom of having an object (like I suggested above) as well as a "function" (of course they are practically synonymous). Read <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">more</a> in the docs.</p>
</div>
<span class="comment-copy">Are you looking for a <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda</a>?</span>
<span class="comment-copy">Yes, this is what I am looking for! It would be great if I could get rid of the first part somehow and only have X+Y, but this does the job too.</span>
<span class="comment-copy">The issue is that in this case, I will make a 3d graph. So Z = X+Y will create an array containing many Z values, so passing just 4 and 5 isn't an option.  Passing a table of Z would work, however I want to find a way where I can do my graph with just one expression.</span>
<span class="comment-copy">@DunkeyKing Are you passing Z as well? I could not tell from your snippet. Which is why it is both more readable and memorable to you to pass the data individually as parameters. So, then I would create a graph(X, Y, Z) function in your case.</span>
<span class="comment-copy">Hm I guess I could also declare X and Y globally and only pass Z! Thanks</span>
<span class="comment-copy">@DunkeyKing You could declare these values globally, but I would advise against. It would be way to easy to forget and accidently  (X, Y &amp; Z are common variable names in a pinch!) and assign something else to these!</span>
<span class="comment-copy">I'm really confused by this answer, and why it's accepted. It doesn't seem to be addressing the question at all. In the question, the <code>graph</code> function is providing the <code>X</code> and <code>Y</code> values, but you seem to be suggesting that the caller should provide them. That seems backwards. The caller is supposed to be providing some means to compute <code>Z</code> from <code>X</code> and <code>Y</code>.</span>
