<div class="post-text" itemprop="text">
<p>I have this function that I have significantly simplified that calculates the multiplicative and additive keys for decrypting an affine cipher and it works in some cases but there is this one case where it is throwing me an error and I am unsure why. Here is my code:</p>
<pre><code>def InverseMod(a, m):
    for i in range(1,m):
        if ( m*i + 1) % a == 0:
            return ( m*i + 1) // a
    return 'These are not co-prime.'

def decryption_keys_affine(p1, p2, C1, C2, AL):

    s = InverseMod(p1 - p2, AL) * (C1 - C2)

    r = (InverseMod(s, AL) * C2 - p2) % AL

    print("INV(S):", InverseMod(s, AL), "\n" + "R:", r)
</code></pre>
<p>When I give it this input, it outputs the correct answers which are 17 and 26:</p>
<pre><code>&gt;&gt;&gt; decryption_keys_affine(3, 20, 19, 20, 42)
INV(S): 17 
R: 26
</code></pre>
<p>When I give it this input though, it throws me this error:</p>
<pre><code>&gt;&gt;&gt; decryption_keys_affine(5, 20, 9, 26, 26)
Traceback (most recent call last):
  File "&lt;pyshell#9&gt;", line 1, in &lt;module&gt;
    decryption_keys_affine(5, 20, 9, 26, 26)
  File "C:\Users\Herman\Desktop\crypto_math_functions.py", line 96, in decryption_keys_affine
    r = (InverseMod(s, AL) * C2 - p2) % AL
TypeError: unsupported operand type(s) for -: 'str' and 'int'
</code></pre>
<p>It should output:</p>
<pre><code>&gt;&gt;&gt; decryption_keys_affine(5, 20, 9, 26, 26)
INV(S): 7 
R: 20
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>InverseMod()</code> you putted a condition if those calculations are not prime return "A string". So that function returns a String and the <code>r</code> statement becomes like</p>
<p><code>r = ("String" * int  - int) % int</code></p>
<p>Which is not correct</p>
<p>Either return 0 or do some <code>if</code> conditions to solve it</p>
</div>
<div class="post-text" itemprop="text">
<p>This function <code>InverseMod</code> returns different types for different cases.  If you don't pass the <code>if</code> test in the loop or the loop doesn't execute, you return a string instead.</p>
<pre><code>def InverseMod(a, m):
    for i in range(1,m):
        if ( m*i + 1) % a == 0:
            return ( m*i + 1) // a
    return 'These are not co-prime.'
</code></pre>
<p>In general, this kind of behavior should instead be modeled with an exception.</p>
<p>If it had, the failure mode would be more apparent.</p>
<pre><code>def InverseMod(a, m):
    for i in range(1,m):
        if ( m*i + 1) % a == 0:
            return ( m*i + 1) // a
    raise  ValueError('"{}" and "{}" are not co-prime'.format(a, m))
</code></pre>
</div>
<span class="comment-copy">The Traceback says that this line -<code>r = (InverseMod(s, AL) * C2 - p2) % AL</code> - is causing the error. I imagine <code>p2</code> has become a <code>str</code> at that point and the result of <code>(InverseMod(s, AL) * C2</code> is an int - or vis versa.  Print stuff just befor that statement to see what they are or <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the error</a> and inspect/print relevant data in the except suite.  Maybe think about learning the <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">pdb</a> module.</span>
<span class="comment-copy">@the4horsemen the second input producing the error is trying to compute subtraction between <code>str</code> and <code>int</code>: <code>r = ('These are not co-prime.' - p2) % AL</code></span>
