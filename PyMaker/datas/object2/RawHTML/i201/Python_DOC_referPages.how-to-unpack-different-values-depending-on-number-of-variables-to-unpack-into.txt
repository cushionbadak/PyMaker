<div class="post-text" itemprop="text">
<p>I'm scratching my head over how to conditionally unpack variables from a class depending on the number of variables you are unpacking into e.g. I get a different set of variables unpacked depending on the number I set on the left hand side of the assignment.</p>
<p>For example, lets consider a class that has both x, y, z and latitude &amp; longitude positions:</p>
<pre class="lang-py prettyprint-override"><code>class LatLonOrXYZ:
    def __init__(self, x, y, z, lat, lon):
        self.x, self.y, self.z = x, y, z
        self.lat, self.lon = lat, lon

    def __iter__(self):
        # not sure...
        return iter([self.x, self.y, self.z, self.lat, self.lon])
</code></pre>
<p>Now I want to achieve something like the following:</p>
<pre class="lang-py prettyprint-override"><code>pos = LatLonOrXYZ(x=0, y=1, z=2, lat=3, lon=4)

x, y, z = *pos  # 0, 1, 2
lat, lon = *pos  # 3, 4
</code></pre>
<p>Are there any deep python magics that could accomplish this sort of thing or am I better off just writing a couple of methods that feel so unnecessary?</p>
<p>As ever, any help, insights or advice would be greatly received :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is completely doable, but may not be the best application, in your example, of an iterable.</p>
<p>Basically, create a <code>list</code> from your iterable, as in <code>list([*pos])</code>, then slice it as desired like <code>list([*pos])[0:3]</code>.</p>
<p>Here's your example code with this in operation:</p>
<pre><code>class LatLonOrXYZ:
    def __init__(self, x, y, z, lat, lon):
        self.x, self.y, self.z = x, y, z
        self.lat, self.lon = lat, lon

    def __iter__(self):
        # not sure...
        return iter([self.x, self.y, self.z, self.lat, self.lon])

pos = LatLonOrXYZ(x=0, y=1, z=2, lat=3, lon=4)

x, y, z = list([*pos])[0:3]
lat, lon = list([*pos])[3:5]

print(x, y, z)
print(lat, lon)
</code></pre>
<p>Output:</p>
<pre><code>0 1 2
3 4
</code></pre>
<p>As a side note, in your example code, you are calling your actual class object rather than your <code>pos</code> instance. It's important to understand the difference.</p>
<p>Rather than:</p>
<pre><code>pos = LatLonOrXYZ(x=0, y=1, z=2, lat=3, lon=4)

x, y, z = *LatLonOrXYZ  # 0, 1, 2
lat, lon = *LatLonOrXYZ  # 3, 4
</code></pre>
<p>What you want to do is:</p>
<pre><code>pos = LatLonOrXYZ(x=0, y=1, z=2, lat=3, lon=4)

x, y, z = *pos  # 0, 1, 2
lat, lon = *pos  # 3, 4
</code></pre>
<p>The first line creates an object based on the class definition that is an <code>instance</code>, or an object using the structure and behavior of the <code>class</code> that you'll be using as a position in your code.</p>
<p>Consider the following:</p>
<pre><code>pos_1 = LatLonOrXYZ(x=0, y=1, z=2, lat=3, lon=4)
pos_2 = LatLonOrXYZ(x=4, y=3, z=2, lat=1, lon=0)
</code></pre>
<p>These are two different objects with their own characteristics, both structured as the <code>LatLonOrXYZ</code> <code>class</code> has laid out. Separate buildings based on the same blueprint.</p>
<p>This is a really basic description meant to just point out the gist of the thing. You can read more about python <code>classes</code>, here in technical form:</p>
<p><a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python.org Classes Tutorial</a></p>
<p>Or, as an example of the decent explainers, but by far not the only excellent, accessible discussion regarding this stuff for which you should google lots :) , here:</p>
<p><a href="https://realpython.com/python3-object-oriented-programming/" rel="nofollow noreferrer">OOP in Python - at Real Python</a></p>
</div>
<span class="comment-copy">No deep magic that I'm aware of, and even if there was, I'd suggest not using it.  It's hard to tell the intention with that paradigm.  I think it's better just be explicit and use a method. :-)</span>
<span class="comment-copy">What is the role of <code>pos</code> in your snippet? You don't seem to be using it at all after assigning to it.</span>
<span class="comment-copy">Just a side note, but you want to be using your instance, not your class. That is: <code>x, y, z = *pos</code> rather than <code>x, y, z = *LatLonOrXYZ</code>.</span>
<span class="comment-copy">Is there some reason not evident in the example that you wish to use an iterable, rather than something like: <code>x, y, z = pos.x, pos.y, pos.z # 0, 1, 2</code> and <code>lat, lon = pos.lat, pos.lon # 3, 4</code>? I'm not sure I understand why an iterable would be called for here?</span>
