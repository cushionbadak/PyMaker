<div class="post-text" itemprop="text">
<p>How to generate increasing permutations of a list in Python without  itertools.combinations:</p>
<p>I'm trying to create a function that will produce all permutations of a list but limited to only sets of len(n) and only increasing from left to right. For instance, if I have list l = [2,4,5,7,9] and n=4, the results should include [2,4,5,7], [2,4,7,9], [2,5,7,9] but not [9,7,4,2], [9,4,7,2]. This is what I have done so far:</p>
<pre><code>def permutation(lst):

    if len(lst) == 0:
        return []

    if len(lst) == 1:
        return [lst]

    l = []

    for i in range(0, len(lst)):
       m = lst[i]

       new = lst[:i] + lst[i+1:]

       for p in permutation(new):
           l.append([m] + p)
    return l
</code></pre>
<p>test:</p>
<pre><code>data = list([1,2,3,4,5,6])
for p in permutation(data):
    print p
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you're describing is exactly what <code>itertools.combinations</code> does:</p>
<pre><code>from itertools import combinations
l = [2,4,5,7,9]
n = 4
for c in combinations(l, n):
    print(list(c))
</code></pre>
<p>This outputs:</p>
<pre><code>[2, 4, 5, 7]
[2, 4, 5, 9]
[2, 4, 7, 9]
[2, 5, 7, 9]
[4, 5, 7, 9]
</code></pre>
<p>But if you do not want to actually use <code>itertools.combinations</code>, you can refer to how it can be implemented in Python in the <a href="https://docs.python.org/3.4/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if r &gt; n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
</code></pre>
</div>
<span class="comment-copy">Is this for a class, or can you just <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">use <code>itertools.combinations</code></a>? Even if you can't use <code>itertools.combinations</code> itself, the docs for it include two different Python implementations that achieve the same effect.</span>
<span class="comment-copy">Don't delete your code; showing effort is what differentiates good questions from "do my homework for me" questions.</span>
<span class="comment-copy">I have come across this implementation but I was wondering how it can be modified to len(n), for example, n=4. Moreover, I am unclear about how to call this function.</span>
<span class="comment-copy">@J.Dawson: For your example case, <code>combinations([2,4,5,7,9], 4)</code>. It's creates an iterator, not a <code>list</code> (because combinatoric results get huge if you create them eagerly, and it's usually fine to just iterate them one by one and throw them away after), but you can wrap it in the <code>list()</code> constructor to slurp the iterator to make a <code>list</code>. In your example use case you don't need a <code>list</code>, so <code>for comb in combinations([2, 4, 5, 7, 9], 4): print(list(comb))</code> does exactly what you want.</span>
