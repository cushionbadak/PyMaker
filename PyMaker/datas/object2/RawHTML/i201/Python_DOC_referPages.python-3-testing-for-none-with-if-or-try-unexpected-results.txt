<div class="post-text" itemprop="text">
<p>I say unexpected because I am clearly not thinking about Try and None correctly.
I got here because I was calling a function to return a value for MyVar, and then testing with Trys to ensure the function did not return None.
Something like:</p>
<pre><code>def Myfunct():
    return "Some_URL"
MyVar = Myfunct()
try:
    MyVar is not None:
    pass
</code></pre>
<p>I could not get the expected TRY result. So I explicitly stated values and tested again.
Testing for None via IF gives the right results, but doing the same with TRY gives unexpected results, which come from the code below:</p>
<pre><code>Type of My_Var is: &lt;class 'str'&gt; with value:  Some_URL
IF is None: False
IF is not None: True
TRY is None: True
TRY is not None: True
</code></pre>
<p>Both Try is None and Try is not None both return True. How is that possible? What am I missing about checking if a value has been set</p>
<pre><code>My_Var = None
My_Var = "Some_URL"
print ("Type of My_Var is:", type(My_Var), "with value: ", My_Var)

if My_Var is None:
    print ("IF is None: True")
else:
    print ("IF is None: False")

if My_Var is not None:
    print ("IF is not None: True")
else:
    print ("IF is not None: False")    

try:
    My_Var is None
    print ("TRY is None: True" )
    pass

except Exception as e:
    print ("TRY is None: False" )

try:
    My_Var is not None
    print ("TRY is not None: True" )
    pass

except Exception as e:
    print ("TRY is not None: False" )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>try</code> doesn't care about whether a value is <code>True</code>, <code>False</code>, <code>None</code>, or anything else. <code>try</code> executes a block of code if no errors arise, and defers to <code>except</code> if errors do arise.</p>
<p><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">See more here</a></p>
</div>
<span class="comment-copy"><code>try</code> has nothing to do with testing the value of an expression. It's for error-handling. (In particular, the code in a <code>try</code> block is always executed - until an exception is thrown.)</span>
<span class="comment-copy">Maybe you're confusing <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">try</a> with <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">assert</a>?</span>
