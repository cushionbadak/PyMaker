<div class="post-text" itemprop="text">
<p><strong>EDIT FOR CLARITY:</strong> This question is in reference to <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer"><strong>venv</strong></a>, which is often confused with <a href="https://virtualenv.pypa.io" rel="nofollow noreferrer"><strong>virtualenv</strong></a>.</p>
<p><strong>What are the consequences of removing the system's Python installation which was the source used to create virtual environments on the system using <code>venv</code>?</strong></p>
<p>Ultimately, what I'm looking to do is remove the 3.7 installation and install 3.8 when it is released, but I'm unsure of how strongly tethered a virtual environment is to the system environment.</p>
<p>Some system details that may be relevant when asking this question:</p>
<ul>
<li>OS = Red Hat Enterprise Linux 7</li>
<li>3.7 installed from source at Python.org, <strong>not</strong> the <code>rh-Pythonx.x</code> packge in the yum repo.</li>
<li>Python 3.7 is installed to the default location, <code>/usr/local/bin/python3.7</code></li>
<li><code>/usr/local/bin/python3</code> is a link to <code>/usr/local/bin/python3.7</code></li>
</ul>
<p>Given the above details, I am under the impression that Python 3.8 would install to <code>/usr/local/bin/python3.8</code> and <code>python3</code> would then be pointing to that version.</p>
<p>Does the virtual environment have enough within it to be a stable 3.7 environment of its own? Or will it fall apart, trying to reference a system install that no longer exists?</p>
<p>tl;dr:
<strong>What happens to all those virtual environments that were created from a Python source that is no longer existent / replaced with a newer version?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Bad news: You're using <code>venv</code>, and <code>venv</code> virtual environments are not completely standalone. Even when created with <code>--copies</code>, all it copies is the <code>python</code> executable itself, not the standard libraries, not even (if your install creates a shared <code>libpython</code> rather than a static one) <code>libpython</code>; it relies on the system copy. The virtual environment will break if the Python install it was based on goes away. <em>How</em> it breaks will differ based on how it was created. For example, if you created it with:</p>
<pre><code>python3 -mvenv path/to/venv
</code></pre>
<p>when <code>python3</code> meant Python 3.7, then replaced <code>python3</code> with Python 3.8, then you can fix up the virtual env for the new version with:</p>
<pre><code>python3 -mvenv --upgrade path/to/venv
</code></pre>
<p>but your installed third party packages will be (effectively) gone (they'll be in <code>path/to/venv/lib/python3.7</code>, but Python 3.8 will only be looking in <code>path/to/venv/lib/python3.8</code>), so you'll have to reinstall them.</p>
<p>If you created the virtual environment with:</p>
<pre><code>python3.7 -mvenv path/to/venv
</code></pre>
<p>then it's completely broken (at least as documented), <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments" rel="nofollow noreferrer">the <code>--upgrade</code> switch</a> is only documented to work for upgrading when Python was upgraded in place; since the new Python would not be named <code>python3.7</code>, you can't upgrade in place. That said, <code>--upgrade</code> really only works well when upgrading micro versions (from 3.7.1 to 3.7.2 or the like), due to aforementioned per-minor version <code>lib/pythonX.Y</code> directories, so either way, you're best off just creating a new virtual environment from scratch.</p>
<p>To be clear, <a href="https://virtualenv.pypa.io/en/latest/userguide/" rel="nofollow noreferrer">the third party <code>virtualenv</code> package</a> does not have this limitation <em>if and only if</em> the system Python installation statically linked <code>libpython</code>. Oddly, while the <code>--always-copy</code> flag will make it copy the main binary and the standard library modules, it doesn't cause <code>libpython</code> itself (the interpreter core) to be copied, so if the main binary depends on a system copy of <code>libpython.so</code>, then removing the system copy breaks the virtual environment. <em>If</em> you did use <code>--always-copy</code> <em>and</em> your <code>python</code> executable statically linked <code>libpython.a</code> (<code>ldd /path/to/python3</code> should show no <code>libpython</code> dependency), then yes, <code>virtualenv</code> makes much more heavyweight (in local tests on 3.6, forcing copies via the appropriate switch, freshly created <code>venv</code> environments were ~11 MB, while <code>virtualenv</code> environments were ~48 MB; sadly, my <code>python</code> dynamically links <code>libpython.so</code>, so it still wouldn't work) virtual environments that should survive the removal of the system installed copy of Python.</p>
<p>In any event, it's probably best to leave your Python 3.7 install in place, and just upgrade to 3.8 without removing 3.7 (are you really hard up for a few dozen MB of disk space?). Even if you replace <code>python3</code> with the new 3.8 install, <code>python3.7</code>, <code>libpython3.7m.so.1.0</code> or the like and the rest of the 3.7 standard library will continue to exist for the virtual environment to depend on; at worst you might need to manually change the symlink in the virtual environment to point to <code>/path/to/python3.7</code> rather than <code>/path/to/python3</code> to keep using the old version (including all your installed third party packages).</p>
<p>An alternative to trying to keep the old virtual environment working is to just back up the installed state of that virtual environment, delete it, install the new Python, create a fresh virtual environment, and then use the backed up state to reinstall all your packages in the upgraded virtual env. An example might be:</p>
<pre><code>$ source ~/path/to/venv/bin/activate
$ pip freeze &gt; installed_libs.txt
$ deactivate
$ rm -rf ~/path/to/venv
$ ... install new Python/remove old Python ...
$ python3 -mvenv ~/path/to/venv
$ pip install -r installed_libs.txt  # Optionally add --upgrade to install latest, not fixed versions
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <strong>virtualenv</strong> includes a copy of the python binary itself, so nothing should happen. See a more detailed explanation <a href="https://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/" rel="nofollow noreferrer">here</a></p>
<blockquote>
<p>virtualenv solves this problem by creating a completely isolated virtual environment for each of your programs. An environment is simply a directory that contains a complete copy of everything needed to run a Python program, <strong>including a copy of the python binary itself</strong>, a copy of the entire Python standard library, a copy of the pip installer, and (crucially) a copy of the site-packages directory mentioned above. When you install a package from PyPI using the copy of pip that's created by the virtualenv tool, it will install the package into the site-packages directory inside the virtualenv directory. You can then use it in your program just as before.</p>
</blockquote>
<p>Edit (accounting for <strong>venv</strong> vs virtualenv): According to the <a href="https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments" rel="nofollow noreferrer">venv-documentation</a>, it can either copy or symlink the binary:</p>
<blockquote>
<p>The venv module provides support for creating lightweight “virtual environments” with their own site directories, optionally isolated from system site directories. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and can have its own independent set of installed Python packages in its site directories.</p>
</blockquote>
</div>
<span class="comment-copy">Note that you can safely install multiple versions of Python side by side. There is no technical reason to remove your Python 3.7 installation before installing 3.8.</span>
<span class="comment-copy">@Code-Apprentice: Well, depends on how you install it. I'd strongly recommend using <code>make altinstall</code> when installing 3.8 from source, so the system default <code>python3</code> remains whatever shipped with the OS and any scripts shipped with the OS that have <code>python3</code> dependencies don't suddenly have Python upgraded under them in a potentially breaking way (it's rare, but there are scripts/modules that depend on internals of a given minor release and break in subsequent releases).</span>
<span class="comment-copy">It should be noted for anyone reading this that while <code>venv</code> and <code>virtualenv</code> are similar, they are not the same package.</span>
<span class="comment-copy">Good point, edited the answer accordingly</span>
<span class="comment-copy">This answer says a completely different thing than the other answers to this question, namely that it does not break when updating the system python, because it can copy it</span>
<span class="comment-copy">@Ferrybig: That's because <code>virtualenv</code> (third party package) and <code>venv</code> (built-in part of Python standard library) behave differently. This answer was originally answered from the perspective of <code>virtualenv</code> (they missed the OP saying they used <code>venv</code>). As it happens, <code>virtualenv</code> still isn't guaranteed to work if the system Python goes away since <code>libpython.so</code> <i>isn't</i> copied (which seems like a bug in <code>virtualenv</code>, given its guarantees about standalone behavior), but it has a chance to work, where <code>venv</code> definitely won't.</span>
