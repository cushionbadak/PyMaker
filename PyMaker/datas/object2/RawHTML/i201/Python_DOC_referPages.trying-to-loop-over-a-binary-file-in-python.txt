<div class="post-text" itemprop="text">
<p>I'm trying to use Python to loop over a long binary file filled with 8-byte records.</p>
<p>Each record has the format <code>[ uint16 | uint16 | uint32 ]</code><br/>
<em>(which is <code>"HHI"</code> in struct-formatting)</em></p>
<p>Apparently each 8-byte block is getting treated as an <code>int</code>, instead of an array of 8-bytes, then causing the <code>struct.unpack</code> call to fail</p>
<pre><code>with open(fname, "rb") as f:
    sz=struct.calcsize("HHI")
    print(sz)                # This shows 8, as expected 
    for raw in f.read(sz):   # Expect this should read 8 bytes into raw
        print(type(raw))     # This says raw is an 'int', not a byte-array
        record=struct.unpack("HHI", raw ) # "TypeError: a bytes-like object is required, not 'int'"
        print(record)
</code></pre>
<p>How can I read my file as a series of structures, and print them each out?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>f.read(len)</code> only returns a byte string. Then <code>raw</code> will be a single byte.</p>
<p>The correct way of looping is:</p>
<pre><code>with open(fname, 'rb') as f:
    while True:
        raw = f.read(8)
        if len(raw)!=8:
            break # ignore the incomplete "record" if any
        record = struct.unpack("HHI", raw )
        print(record)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">iter</a> builtin, if passed a callable and a sentinel value will call the callable repeatedly until the sentinel value is returned.</p>
<p>So you can create a partial function with <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer">functools.partial</a> (or use a <code>lambda</code>) and pass it to <code>iter</code>, like this:</p>
<pre><code>with open('foo.bin', 'rb') as f:
    chunker = functools.partial(f.read, 8)
    for chunk in iter(chunker, b''):      # Read 8 byte chunks until empty byte returned
        # Do stuff with chunk
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've never used this before, but it looks like an initialization issue:</p>
<pre><code>   with open(fname, "rb") as f:
        fmt = 'HHI'
        raw=struct.pack(fmt,1,2,3)
        len=struct.calcsize(fmt)
        print(len)               # This shows 8, as expected 
        for raw in f.read(len):  # Expect this should read 8 bytes into raw
            print(type(raw))     # This says raw is an 'int', not a byte-array
            record=struct.unpack(fmt, raw ) # "TypeError: a bytes-like object is required, not 'int'"
            print(record)
</code></pre>
<p>You may want to look at iter_unpack() for optimization if you have adequate ram.</p>
<p>Note that in 3.7, the default value changes from bytes to string. see near end of page <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html#struct.pack</a></p>
</div>
<span class="comment-copy">I think <code>f.read(len)</code> is not iterable</span>
<span class="comment-copy">Don't you just want <code>raw = f.read(len)</code>?  This gives you all eight bytes at once, which seems to be what you want.</span>
<span class="comment-copy">Mostly, yes:   I want the first 8bytes, then iterate to get the next 8, and the following 8, etc, until the full file has been processed.</span>
<span class="comment-copy">@PeterDeGlopper Yes, I ended up finding that conflict, and changed the name.  Thx.</span>
