<div class="post-text" itemprop="text">
<p>I need help on converting HEX string to int. I have a big data input, but,
Here's one example from the data:</p>
<pre><code>def convert_hex_to_int(n:int, interval:int):
        splitted = [hex(n)[2:][i:i + interval] for i in range(0, len(hex(n)[2:]), interval)]
        return [float(int(hex(unpack('&lt;H', pack('&gt;H', int(i, 16)))[0]), 16)) for i in splitted]

    a='0x0E070907'
hex_int = int(a, 16)
result_print = (convert_hex_to_int(hex_int, 4))
</code></pre>
<p>and 
instead of</p>
<blockquote>
<p>[1806.0, 1801.0]</p>
</blockquote>
<p>the result is</p>
<blockquote>
<p>[28896.0, 1801.0]</p>
</blockquote>
<p>the function convert_hex_to_int is to split the string into 2 bytes and swap it, with the interval of 4 bytes. And the purpose of the code it to acquire the floating points of the HEX String. I suspected it has to do the Python removing the first zero on the front of 070E, and instead, it becomes 70E0. </p>
<ul>
<li>I have read some similar problems in Stackoverflow but still didn't work. 
And I'm new to python.
Thanks for your help. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.fromhex" rel="nofollow noreferrer">fromhex</a> classmethod of the <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer">bytes</a> builtin to convert the hex to bytes, then unpack them however you please:</p>
<pre><code>&gt;&gt;&gt; a='0x0E070907'
&gt;&gt;&gt; h = bytes.fromhex(a[2:])
&gt;&gt;&gt; h
b'\x0e\x07\t\x07'
&gt;&gt;&gt; struct.unpack('&lt;2H', h)
(1806, 1801)
</code></pre>
<p>If you don't know the number of bytes in advance you can generate a format string to match your data.</p>
<pre><code>&gt;&gt;&gt; a='0x9406920691068F06'
&gt;&gt;&gt; bs = bytes.fromhex(a[2:])
&gt;&gt;&gt; bs
b'\x94\x06\x92\x06\x91\x06\x8f\x06'
&gt;&gt;&gt; len(bs)
8
&gt;&gt;&gt; # Each 'H' is 2 bytes, multiply 'H' by half
&gt;&gt;&gt; # the number of bytes to gt the format string.
&gt;&gt;&gt; fmt = '&lt;' + ('H' * (len(bs)//2))
&gt;&gt;&gt; struct.unpack(fmt, bs)
(1684, 1682, 1681, 1679)
</code></pre>
<p>This will only work if the number of bytes to be unpacked is evenly divisible by the number of bytes in the target data type.  If this is not the case - for example if you're reading a stream from a socket - then you'll have to accumulate data until you have a suitable quantity.</p>
</div>
<span class="comment-copy">You are converting your hex to an int then back to an hex then back to an int then pack it to an hex then unpack it to an int then convert it to an hex then back to an int and finally convert it to a float. Why?</span>
<span class="comment-copy">umm, tbh im not too sure either. the first row should split the data. the input is in string '0x....', so i converted to int with base 16. then in hex, the numbers are splitted in interval 4 and grouped every 2 bytes (0E 07), then on the second row of the function, it was swapped to 07 0E in hex, then converted into int. And because i need it in float &amp; i think float can only have one element() , i finally convert it to float. as i am new to python, do you have any alternative? thanks</span>
<span class="comment-copy">But what if I have a long set of data, for example, <code>a='0x9406920691068F06....'</code> How do I set the limit of the buffer as the unpack requires a buffer of 4 bytes? Thanks</span>
<span class="comment-copy">@RCan I've added info on how to handle not knowing the size of the input in advance.</span>
<span class="comment-copy">Thank you very much!!</span>
