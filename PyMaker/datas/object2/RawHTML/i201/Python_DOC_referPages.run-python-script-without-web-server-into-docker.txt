<div class="post-text" itemprop="text">
<p>I have been working with Docker previously using services to run a website made with Django.</p>
<p>Now I would like to know how I should create a Docker to just run Python scripts without a web server and any service related with websited.</p>
<p>An example of normal docker which I am used to work is:</p>
<pre><code>version: '2'
services:
  nginx:
    image: nginx:latest
    container_name: nz01
    ports:
      - "8001:8000"
    volumes:
      - ./src:/src
      - ./config/nginx:/etc/nginx/conf.d
    depends_on:
      - web
  web:
    build: .
    container_name: dz01
    depends_on:
      - db
    volumes:
      - ./src:/src
    expose:
      - "8000"
  db:
    image: postgres:latest
    container_name: pz01
    ports:
        - "5433:5432"
    volumes:
      - postgres_database:/var/lib/postgresql/data:Z
volumes:
    postgres_database:
        external: true
</code></pre>
<p>How should be the docker-compose.yml file?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can easily run Python interactively without even having to build a container:</p>
<pre><code>docker run -it python
</code></pre>
<p>If you want to have access to some code you have written within the container, simply change that to:</p>
<pre><code>docker run -it -v /path/to/code:/app: python
</code></pre>
<p>Making a Dockerfile is unnecessary for this simple application.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply remove everything from your Dockerfile that has nothing to do with your script and start with something simple, like</p>
<pre><code>FROM python:3

ADD my_script.py /

CMD [ "python", "./my_script.py" ]
</code></pre>
<p>You do not need Docker compose for containerizing a single python script.</p>
<p>The example is taken from this simple tutorial about containerizing Python applications: <a href="https://runnable.com/docker/python/dockerize-your-python-application" rel="nofollow noreferrer">https://runnable.com/docker/python/dockerize-your-python-application</a></p>
<p>You can easily overwrite the command specified in the Dockerfile (via <code>CMD</code>) when starting a container from the image. Just append the desired command to your <code>docker run</code> command, e.g:</p>
<pre><code>docker run IMAGE /path/to/script.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most Linux distributions come with Python preinstalled.  Using Docker here adds significant complexity and I'd pretty strongly advise against Docker just to run a simple script.  You can use a <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">virtual environment</a> to isolate a particular Python package's dependencies from the rest of the system.</p>
<p>(There is a pretty consistent stream of SO questions around getting filesystem permissions and user IDs right for scripts that principally want to interact with the host system.  Also remember that running <code>docker</code> anything implies root-equivalent permissions.  If you don't want Docker's filesystem and user namespace isolation, IMHO it's easier to just not use Docker where it doesn't make sense.)</p>
</div>
<span class="comment-copy">is the path until the folder, or even the script name? I made it using the filename and it opens the STDIN but it doesn't print the script result.</span>
<span class="comment-copy">The path is just the path to 'mount' to. To actually execute the code (say you have a script in the local directory /my_app/test_script.py, the command would be: <code>docker run -v /my_app:/my_app: python python /my_app/test_script.py</code>. The first 'python' is the name of the container, and 'python /my_app/test_script.py' is the command to be run.</span>
<span class="comment-copy">Okey, the thing is that I get an error of mounts denied. The path is not shared 'Desktop/src' but it is under 'users/' which is already shared in docker preferences.</span>
<span class="comment-copy">Already working :) Thanks a lot! The last issue was related with relative and full path. I was using relative path, and it should be full.</span>
<span class="comment-copy">No problem. If this has helped you, please upvote. If it solved your problem, please accept it so the answer.</span>
<span class="comment-copy">what about making the CMD exec variable? For example if you want to call different python script every time? You can ADD the folder I know, but how to make the CMD filename variable of a input for example?</span>
<span class="comment-copy">Just overwrite the CMD when starting the container, I added a short explanation to my answer.</span>
