<div class="post-text" itemprop="text">
<p>I have a scenario where class A is initialized with parameters id,name,email,ticket. Then class B is initialized inside class A's method and the same parameters are required to be passed along and so on and so forth. Can these common attributes be set using a decorator or metaclass during class declaration.</p>
<pre><code>class A:
  def __init__(self, id, name,  email, ticket):
       self.id = id
       self.name=name
       self.email=email
       self.ticket=ticket

  def __somefunc(self):
       # do something
        b = B(self.id, self.name, self.email, self.ticket)
        b.__dosomething()
</code></pre>
<p>Similarly...class C and so on..
I am finding it bit inappropriate sending all these repeated parameters to all the subsequent classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are just trying to reduce the number of characters typed  (appearing in the code), make a dictionary of those values and <em>instantiate</em> the other classes with it.</p>
<pre><code>Class A:
  def __init__(self, id, name,  email, ticket):
       self.id = id
       self.name=name
       self.email=email
       self.ticket=ticket
       self.params = {'id':id, 'name':name,  'email':email, 'ticket':ticket} 

  def __somefunc(self):
       # do something
        b = B(**self.params)
        b.__dosomething()
</code></pre>
<hr/>
<p><code>Can these common attributes be set using a decorator or metaclass during class declaration.</code>?
Yes and probably.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a class decorator to "remember" the parameters as part of the instance, so you would be able to access them using <code>self.args</code> and <code>self.kwargs</code>:</p>
<pre class="lang-py prettyprint-override"><code>import functools


def remember_params(cls):
    @functools.wraps(cls)
    def instance_creator(*args, **kwargs):
        obj = cls(*args, **kwargs)
        obj.args = args
        obj.kwargs = kwargs
        return obj
    return instance_creator


class B:
    def __init__(*args, **kwargs):
        print(args, kwargs)


@remember_params
class C:
    def __init__(self, id, name, email, ticket):
        self.id = id
        self.name = name
        self.email = email
        self.ticket = ticket

    def something(self):
        b = B(*self.args, **self.kwargs)
</code></pre>
</div>
<span class="comment-copy">What are you trying to achieve? Just less typing?</span>
<span class="comment-copy">Maybe have A hold onto a <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">dataclass</a> and just pass that around?</span>
<span class="comment-copy">Is there any further difference between <code>A.__init__</code> and <code>B.__init__</code>? A class method <code>B.from_A</code> might also be appropriate, to encapsulate the process of creating an instance of <code>B</code> given an instance of <code>A</code>.</span>
<span class="comment-copy"><code>Can these common attributes be set using ...</code>? <i>set</i> on the instance created in <code>__somefunc</code> only  or on <code>A</code> also?</span>
<span class="comment-copy">Why did you think of using a a decorator or meta class? You really haven't explained your motivation - what problem are you trying to solve?</span>
