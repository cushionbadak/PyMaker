<div class="post-text" itemprop="text">
<p>How can I see which key has the greatest points value in python?</p>
<pre><code>{
    "258771223473815553": {"total": 32923, "points": 13},
    "235088799074484224": {"total": 154, "points": 154},
    "551515155301662723": {"total": 136, "points": 136},
    "365975655608745985": {"total": 306, "points": 306},
    "548923168530890762": {"total": 815, "points": 3},
    "390249444567941121": {"total": 33442, "points": 1},
    "256599831097638912": {"total": 101, "points": 101},
    "247033712531865600": {"total": 181, "points": 181},
    "294882584201003009": {"total": 106, "points": 106},
    "377586042179551235": {"total": 290, "points": 117},
    "295190202693976065": {"total": 33890, "points": 28},
    "550047284008583168": {"total": 254, "points": 1000}
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries are unordered. However, you can convert a dictionary to list or tuple of dictionaries. Lists/Tuples in python are ordered, so you can sort them, eg:</p>
<pre><code>sorted(json_dict.items(), key=lambda val: val[1]['points'], reverse=True)
</code></pre>
<p>You can change the lambda in key argument to any ordering mechanism you wanted to enforce on your dictionary.</p>
<p>Or, you may want to take a look at <a href="https://docs.python.org/3.7/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">OrderedDict</a> data structure.</p>
<pre><code>from collections import OrderedDict
OrderedDict(sorted(json_dict.items(), key=lambda val: val[1]['points'], reverse=True))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: d = {
   ...:     "258771223473815553": {"total": 32923, "points": 13},...
...
In [2]: max(d.items(), key = lambda tup: tup[1]['points'])[0]
Out[2]: '550047284008583168'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code</p>
<pre><code>a={"258771223473815553": {"total": 32923, "points": 13}, "235088799074484224": {"total": 154, "points": 154}, "551515155301662723": {"total": 136, "points": 136}, "365975655608745985": {"total": 306, "points": 306}, "548923168530890762": {"total": 815, "points": 3}, "390249444567941121": {"total": 33442, "points": 1}, "256599831097638912": {"total": 101, "points": 101}, "247033712531865600": {"total": 181, "points": 181}, "294882584201003009": {"total": 106, "points": 106}, "377586042179551235": {"total": 290, "points": 117}, "295190202693976065": {"total": 33890, "points": 28}, "550047284008583168": {"total": 254, "points": 1000}}
a=a.items()

dic={}

ids=[] #ids list
ke=[] #totals list
va=[] #points list

for key,val in a:
    ids.append(key)
    ke.append(list(val.items())[1][1])
    va.append(list(val.items())[0][1])


def bubbleSort(ids,ke,va):
    for passnum in range(len(ke)-1,0,-1):
        for i in range(passnum):
            if ke[i]&lt;ke[i+1]:
                temp1 = ke[i]
                ke[i] = ke[i+1]
                ke[i+1] = temp1

                temp2 = ids[i]
                ids[i] = ids[i+1]
                ids[i+1] = temp2

                temp3 = va[i]
                va[i] = va[i+1]
                va[i+1] = temp3

bubbleSort(ids,ke,va)
c={}
for i in range(len(va)):
    b={}
    b["total"]=va[i]
    b["points"]=ke[i]
    c[ids[i]]=b
</code></pre>
</div>
<span class="comment-copy">Why do you want to do this? JSON objects are inherently unordered.</span>
<span class="comment-copy">@juanpa.arrivillaga i edited the question to make a little more sense</span>
<span class="comment-copy">You're creating a <a href="https://docs.python.org/3/tutorial/introduction.html?highlight=list#lists" rel="nofollow noreferrer">list</a>, not an <a href="https://docs.python.org/3.4/library/array.html" rel="nofollow noreferrer">array</a> in that first example.</span>
