<div class="post-text" itemprop="text">
<p>I am trying to implement an inplace algorithm to remove duplicates from a string in Python.</p>
<pre><code>str1 = "geeksforgeeks"
for i in range(len(str1)):
    for j in range(i+1,len(str1)-1):
         if str1[i] == str1[j]:  //Error Line
                      str1 = str1[0:j]+""+str1[j+1:]



print str1
</code></pre>
<p>In the above code, I am trying to replace the duplicate character with whitespace. But I get <code>IndexError: string index out of range</code> at <code>if str1[i] == str1[j]</code>. Am I missing out on something or is it not the right way?</p>
<p>My expected output is: <code>geksfor</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do all of this with just a set and a comprehension. No need to complicate things. </p>
<pre><code>str1 = "geeksforgeeks"

seen = set()
seen_add = seen.add
print(''.join(s for s in str1 if not (s in seen or seen_add(s))))
#geksfor
</code></pre>
<blockquote>
<p>"Simple is better than complex."</p>
<p><sup>~ See <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">PEP20</a></sup></p>
</blockquote>
<p><strong>Edit</strong></p>
<p>While the above is more simple than your answer, it is the most performant way of <a href="https://stackoverflow.com/a/480227/225020">removing duplicates from a collection</a> the more simple solution would be to use:</p>
<pre><code>from collections import OrderedDict
print("".join(OrderedDict.fromkeys(str1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is impossible to modify strings in-place in Python, the same way that it's impossible to modify <em>numbers</em> in-place in Python.</p>
<pre><code>a = "something"
b = 3

b += 1        # allocates a new integer, 4, and assigns it to b
a += " else"  # allocates a new string, " else", concatenates it to `a` to produce "something else"
              # then assigns it to a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already pointed <code>str</code> is immutable, so <em>in-place</em> requirement make no sense.
If you want to get desired output I would do it following way:</p>
<pre><code>str1 = 'geeksforgeeks'
out = ''.join([i for inx,i in enumerate(str1) if str1.index(i)==inx])
print(out) #prints: geksfor
</code></pre>
<p>Here I used <code>enumerate</code> function to get numerated (<code>inx</code>) letters and fact that <code>.index</code> method of <code>str</code>, returns lowest possible index of element therefore <code>str1.index('e')</code> for given string is <code>1</code>, not <code>2</code>, not <code>9</code> and not <code>10</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simplified version of <code>unique_everseen</code> from <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools recipes</code></a>.</p>
<pre><code>from itertools import filterfalse

def unique_everseen(iterable)
    seen = set()
    see _ add = seen.add
    for element in filterfalse(seen.__contains__, iterable):
        seen_add(element)
        yield element
</code></pre>
<p>You can then use this generator with <code>str.join</code> to get the expected output.</p>
<pre><code>str1 = "geeksforgeeks"
new_str1 = ''.join(unique_everseen(str1)) # 'geksfor'
</code></pre>
</div>
<span class="comment-copy"><code>i</code> takes on the value of all valid indices of <code>str1</code>. Then <code>j</code> is <code>i+1</code>. When <code>i</code> is the highest valid index, <code>j</code> is thus out of range.</span>
<span class="comment-copy">What is expected value?</span>
<span class="comment-copy">@Alderven When i is 0 and j is 10, I get IndexError</span>
<span class="comment-copy">@Alderven Expected output is: geksfor</span>
<span class="comment-copy">You cannot perform in-place modification of a string in Python. Strings are immutable.</span>
<span class="comment-copy">That's an interesting (non-obvious) use of the <code>or</code> conditional. Which is to say "Thanks! I hate it!"</span>
<span class="comment-copy">I'm sorry? I'm not sure I follow.</span>
<span class="comment-copy">There are simplest solutions: <a href="https://stackoverflow.com/questions/9841303/removing-duplicate-characters-from-a-string" title="removing duplicate characters from a string">stackoverflow.com/questions/9841303/â€¦</a></span>
<span class="comment-copy">Well, while keeping with simplicity and performance I say <a href="https://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-whilst-preserving-order">this answer</a> is what I prefer. And I'm saying simplicity in comparison to OP's solution.</span>
<span class="comment-copy">@AdamSmith - It's lifted from <a href="https://stackoverflow.com/a/480227/2617068">another answer</a>, the citation for which was eventually added in the <a href="https://stackoverflow.com/revisions/54965808/4">fourth revision</a>.</span>
