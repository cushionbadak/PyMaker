<div class="post-text" itemprop="text">
<p>I want to fill out a string with spaces. I know that the following works for zero's:</p>
<pre><code>&gt;&gt;&gt; print  "'%06d'"%4
'000004'
</code></pre>
<p>But what should I do when I want this?:</p>
<pre><code>'hi    '
</code></pre>
<p>of course I can measure string length and do <code>str+" "*leftover</code>, but I'd like the shortest way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with <a href="http://docs.python.org/library/stdtypes.html#str.ljust" rel="noreferrer"><strong><code>str.ljust(width[, fillchar])</code></strong></a>:</p>
<blockquote>
<p>Return the string left justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is a space). The original string is returned if <em>width</em> is less than <code>len(s)</code>.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; 'hi'.ljust(10)
'hi        '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Unless you need to support Python 2.5, you can (and probably should) use the <a href="http://docs.python.org/2/library/string.html#formatstrings" rel="noreferrer">string-formatting mini-language</a>, like so:</p>
<pre><code>'{0: &lt;16}'.format('Hi')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The new(ish) <a href="https://docs.python.org/2/library/string.html#string-formatting" rel="noreferrer">string format method</a> lets you do some fun stuff with nested keyword arguments. The simplest case:</p>
<pre><code>&gt;&gt;&gt; '{message: &lt;16}'.format(message='Hi')
'Hi             '
</code></pre>
<p>If you want to pass in <code>16</code> as a variable:</p>
<pre><code>&gt;&gt;&gt; '{message: &lt;{width}}'.format(message='Hi', width=16)
'Hi              '
</code></pre>
<p>If you want to pass in variables for the <a href="https://docs.python.org/2/library/string.html#format-examples" rel="noreferrer">whole kit and kaboodle</a>:</p>
<pre><code>'{message:{fill}{align}{width}}'.format(
   message='Hi',
   fill=' ',
   align='&lt;',
   width=16,
)
</code></pre>
<p>Which results in (you guessed it):</p>
<pre><code>'Hi              '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>print "'%-100s'" % 'hi'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/library/stdtypes.html#str.ljust" rel="noreferrer"><strong><code>str.ljust()</code></strong></a>:</p>
<pre><code>&gt;&gt;&gt; 'Hi'.ljust(6)
'Hi    '
</code></pre>
<p>You should also consider <a href="http://docs.python.org/library/stdtypes.html#str.zfill" rel="noreferrer"><strong><code>string.zfill()</code></strong></a>, <a href="http://docs.python.org/library/stdtypes.html#str.ljust" rel="noreferrer"><strong><code>str.ljust()</code></strong></a> and <a href="http://docs.python.org/library/stdtypes.html#str.center" rel="noreferrer"><strong><code>str.center()</code></strong></a> for string formatting. These can be chained and have the '<em>fill</em>' character specified, thus:</p>
<pre><code>&gt;&gt;&gt; ('3'.zfill(8) + 'blind'.rjust(8) + 'mice'.ljust(8, '.')).center(40)
'        00000003   blindmice....        '
</code></pre>
<p>These <a href="http://docs.python.org/library/stdtypes.html#string-formatting" rel="noreferrer">string formatting operations</a> have the advantage of working in Python v2 and v3.</p>
<p>Take a look at <a href="http://docs.python.org/library/pydoc.html" rel="noreferrer"><strong><code>pydoc str</code></strong></a> sometime: there's a wealth of good stuff in there.</p>
</div>
<div class="post-text" itemprop="text">
<p>Correct way of doing this would be to use Python's format syntax as described in <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">the official documentation</a></p>
<p>For this case it would simply be:<br/>
<code>'{:10}'.format('hi')</code><br/>
which outputs:<br/>
<code>'hi        '</code></p>
<p>Explanation:  </p>
<pre><code>format_spec ::=  [[fill]align][sign][#][0][width][,][.precision][type]
fill        ::=  &lt;any character&gt;
align       ::=  "&lt;" | "&gt;" | "=" | "^"
sign        ::=  "+" | "-" | " "
width       ::=  integer
precision   ::=  integer
type        ::=  "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"
</code></pre>
<p>Pretty much all you need to know is there ^.</p>
<p>Update: 
as of python 3.6 it's even more convenient with literal string interpolation!</p>
<pre><code>foo = 'foobar'
print(f'{foo:10} is great!')
# foobar     is great!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.6 you can just do</p>
<pre><code>&gt;&gt;&gt; strng = 'hi'
&gt;&gt;&gt; f'{strng: &lt;10}'
</code></pre>
<p>with <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">literal string interpolation</a>.</p>
<p>Or, if your padding size is in a variable, like this (thanks @Matt M.!):</p>
<pre><code>&gt;&gt;&gt; to_pad = 10
&gt;&gt;&gt; f'{strng: &lt;{to_pad}}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can also <strong>center</strong> your string:</p>
<pre><code>'{0: ^20}'.format('nice')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use Python 2.7's <a href="http://docs.python.org/library/string.html#format-specification-mini-language" rel="noreferrer">mini formatting for strings</a>:</p>
<pre><code>'{0: &lt;8}'.format('123')
</code></pre>
<p>This left aligns, and pads to 8 characters with the ' ' character.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just remove the 0 and it will add space instead:</p>
<pre><code>&gt;&gt;&gt; print  "'%6d'"%4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wouldn't it be more pythonic to use slicing?</p>
<p>For example, to pad a string with spaces on the right until it's 10 characters long:</p>
<pre><code>&gt;&gt;&gt; x = "string"    
&gt;&gt;&gt; (x + " " * 10)[:10]   
'string    '
</code></pre>
<p>To pad it with spaces on the left until it's 15 characters long:</p>
<pre><code>&gt;&gt;&gt; (" " * 15 + x)[-15:]
'         string'
</code></pre>
<p>It requires knowing how long you want to pad to, of course, but it doesn't require measuring the length of the string you're starting with.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it using list comprehension, this'd give you an idea about the number of spaces too and would be a one liner.</p>
<pre><code>"hello" + " ".join([" " for x in range(1,10)])
output --&gt; 'hello                 '
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A nice trick to use in place of the various print formats:</p>
<p>(1) Pad with spaces to the right:</p>
<pre><code>('hi' + '        ')[:8]
</code></pre>
<p>(2) Pad with leading zeros on the left:</p>
<pre><code>('0000' + str(2))[-4:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>+= can be used to append to string</p>
<pre><code>&gt;&gt;&gt; string = 'hi'
&gt;&gt;&gt; for s in range(0,5):
...    string += ' '
... 
&gt;&gt;&gt; string
'hi          '
</code></pre>
</div>
<span class="comment-copy">@simon 's answer is more flexible and more useful when formatting more complex strings</span>
<span class="comment-copy">or @abbot 's if you are stuck supporting old versions of python</span>
<span class="comment-copy">ljust() is now deprecated. See <a href="http://stackoverflow.com/questions/14776788/python-how-can-i-pad-a-string-with-spaces-from-the-right-and-left" title="python how can i pad a string with spaces from the right and left">stackoverflow.com/questions/14776788/…</a> for the correct way to do it</span>
<span class="comment-copy">Its gone in python 3? Just wanted to add there is also rjust and center which work much the same way but for different alignments</span>
<span class="comment-copy">ljust(), rjust() have been deprecated from the string module only. They are   available on the str builtin type.</span>
<span class="comment-copy">What if you have '16' in a variable?</span>
<span class="comment-copy">I figured that out as well too. Should have posted it. The docs say this should work for Py2.6, but my findings are otherwise. Works in Py2.7 though.</span>
<span class="comment-copy">I had problems with this type of formatting when I was using national accents. You would want 'kra' and 'krá' to be the same, but they were not.</span>
<span class="comment-copy">@Randy <code>'{message: &lt;{fill}}'.format(message='Hi', fill='16')</code></span>
<span class="comment-copy">Don't use <code>str.format()</code> for templates with only a single <code>{...}</code> and nothing else. Just use the <code>format()</code> function and save yourself the parsing overhead: <code>format('Hi', '&lt;16')</code>.</span>
<span class="comment-copy">this syntax will be deprecated from Python 3 onwards -- better to use the new syntax, as in my example, or <code>str.ljust</code> as in the other answers.  This is probably the weakest answer.</span>
<span class="comment-copy">@simon as someone stuck on a python2.5 system this answer helped me, not a useless answer +1</span>
<span class="comment-copy">Not deprecated any more in 3.3+</span>
<span class="comment-copy">I like this common printf syntax much better. Allows you to write complex strings without countless concatenations.</span>
<span class="comment-copy">For completeness, <code>"'%+100s'" % 'hi'</code> would work for putting spaces to the right of <code>'hi'</code></span>
<span class="comment-copy"><code>f'{strng: &gt;10}'</code> for filling string with leading whitespace to a length of 10. That is magic. And it is not well documented.</span>
<span class="comment-copy">@changye I believe this is also the default behavior of <code>f'{strng:10}'</code>.</span>
<span class="comment-copy">@simon already gave this answer... why posting a duplicate answer?</span>
<span class="comment-copy">I didn't click the 'new responses have been posted, click to refresh' and so missed it.</span>
<span class="comment-copy">No it wouldn't.</span>
<span class="comment-copy">Can you elaborate on that? It's not that I don't believe you, I just want to understand why.</span>
<span class="comment-copy">Sure. The most pythonic way would be to use one of the builtin functions rather than using a homegrown solution as much as possible.</span>
<span class="comment-copy">@MadPhysicist saying that slicing is less pythonic because you should use in built functions is like saying <code>''.join(reversed(str))</code> is more pythonic than <code>str[::-1]</code>, and we all know that's not true.</span>
<span class="comment-copy">@NickA. In that case, we are in violent agreement :)</span>
<span class="comment-copy">or just <code>string += ' ' * 5</code> to avoid an explicit <code>for</code> loop.</span>
