<div class="post-text" itemprop="text">
<blockquote>
<p><em>Suppose we have a string, say, <strong>"122113"</strong> and we are supposed to <strong>find all the occurrences of every character in the String.</strong></em></p>
</blockquote>
<p>A naive approach will be like this:</p>
<pre><code>string = str( raw_input() )  # for example: "122113"
distinct_char = list( set(string) )
occurrences=[]
for element in distinct_char:
    temp=[]
    for j in range(len(string)):
        if(string[j]==element):
            temp.append(j)
    occurrences.append(temp)
print(occurrences)  # output for "122113" would be [[0, 3, 4], [1, 2], [5]]
                    #because 1 occurrs at : 0, 3, 4
                    #        2 occurrs at : 1, 2
                    #        3 occurrs at : 5
</code></pre>
<blockquote>
<p>But, this is quite slow <em>if the length of the String is Large</em>.
  <strong>So, is there any faster solution?</strong></p>
</blockquote>
<p>(Consider the string is only made up of lower english alphabets and the length of the string may be $10^12$</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use a defaultdict (with an empty list as default value) and update the indices list while iterating through the string:</p>
<pre><code>from collections import defaultdict
string = str(raw_input())
occurences = defaultdict(list)
for i, c in enumerate(string):
  occurences[c].append(i)
print occurences
</code></pre>
<p>Then use a list comprehension to get your list of occurrences:</p>
<pre><code>occurences = [l for l in occurences.values()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(Sorry, my earlier answer misunderstood the question.)</p>
<p>You could use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for this:</p>
<pre class="lang-py prettyprint-override"><code>import collections

very_long_string = "abcdefghij" * 1000000

indices = collections.defaultdict(list)
for i, c in enumerate(very_long_string):
    indices[c].append(i)
</code></pre>
<p><code>indices</code> will then be a dict that maps each character into their indices (example obviously not for the <code>very_long_string</code> above, but a shorter one). </p>
<pre class="lang-py prettyprint-override"><code>{
    "a": [0, 10],
    "b": [1, 11],
    "c": [2, 12],
    "d": [3, 13],
    "e": [4, 14],
    "f": [5, 15],
    "g": [6, 16],
    "h": [7, 17],
    "i": [8, 18],
    "j": [9, 19],
}
</code></pre>
<p>It takes about 3 seconds to do this for 10 000 000 characters on my machine.</p>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution is to convert the string characters into numbers and use the number to increment values in an array. The code could be as follows:</p>
<pre><code>import numpy as np

def alph_to_num(alph):
    return ord(alph.lower())-97

string='alsblnasdglasdaoerngeaglbneronbiwernblnerl'
array=np.zeros(26)

for alph in string:
    index=alph_to_num(alph)
    array[index]=array[index]+1
print(array)
</code></pre>
<p>which gives: <code>[5. 4. 0. 2. 5. 0. 3. 0. 1. 0. 0. 6. 0. 6. 2. 0. 0. 4. 3. 0. 0. 0. 1. 0.
 0. 0.]</code></p>
<p>Here I have made the array of length 26 since you know that it is just lowercase english letters. This also means that it is easier to interpret the resulting list. </p>
</div>
<div class="post-text" itemprop="text">
<p>No import solution - given that you know it's only lower case alphabet you can precreate a list of lists of size 26, then iterating through just append the index of each character found to the appropriate position.</p>
<pre><code>input_lst="abcdefgaabbfegddsa"
occurence_lst = [[] for i in range(26)]
for index in range(len(input_lst)):
    occurence_lst[ord(input_lst[index]) - 97].append(index)

print(occurence_lst)

[0, 7, 8, 17], [1, 9, 10], [2], [3, 14, 15], [4, 12], [5, 11], [6, 13], [], [], [], [], [], [], [], [], [], [], [], [16], [], [], [], [], [], [], []]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming Python 2.7, option 1 (I did the dictionary so that one can tell which letter corresponded to the indices):</p>
<pre><code>s = raw_input()
occurances = {}
pos = 0

for let in s:
  if let in occurances:
    occurances[let].append(pos)
  else:
    occurances[let] = [pos]
  pos += 1

print(occurances)
</code></pre>
<p>average time for 10000 runs on '122113': 2.55961418152e-06</p>
<p>average time for 10000 runs on 'a;lkdsfowquebtgafdnga;llkl;uihnbr,afdh;glakhhehjehrjehjeoguhaberna': 2.39794969559e-05</p>
<p>average time for 500 runs on 'alkdsfowquebtgafdngallkl'*1000: 0.00993875598907</p>
<p>option 2:</p>
<pre><code>s = raw_input()
occurances = {}

for i,let in enumerate(s):
  if let in occurances:
    occurances[let].append(i)
  else:
    occurances[let] = [i]

print(occurances)
</code></pre>
<p>average time for 10000 runs on '122113': 7.02269077301e-06</p>
<p>average time for 10000 runs on 'a;lkdsfowquebtgafdnga;llkl;uihnbr,afdh;glakhhehjehrjehjeoguhaberna': 2.39794969559e-05</p>
<p>average time for 500 runs on 'alkdsfowquebtgafdngallkl'*1000: 0.00974810600281</p>
<p>(Test times from repl.it running python 2.7)</p>
<p>Edit: Depending on exactly how it's used in the script, <code>defaultdict</code> can be faster or slower than just using <code>dict</code></p>
</div>
<span class="comment-copy">Hint: iterate once through the list, and update a dictionary mapping characters to positions as you go</span>
<span class="comment-copy">I second that, it scales linearly.</span>
<span class="comment-copy">will it work fast enough if, length(s) becomes significantly large?</span>
<span class="comment-copy">@TuhinKarmakar Well, it took 5 seconds for a 10000000 long string on my super slow computer, you can test for yourself if you want to see whether it's fast or not.</span>
