<div class="post-text" itemprop="text">
<p>I want to help a friend set up the environment for Python 3 in Windows 10 in a quick and easy way. I know that you can just download Python 3 for Windows from python.org and it already comes with Pip by default. I assume that then all you need is an editor and you're good to go, or <em>does this Windows installation lack something essential, like the ability to use command line or something else</em>?</p>
<p>Many people seem to recommend miniconda, but I don't understand what would be its benefit compared to the above method. I just want to get my friend ready to learn and code python with minimal amount of extra hassle in the beginning. Pip will be needed but don't need any pre-installed libraries. </p>
<p>I installed so many different environments in the beginning myself (for example the above method, Winpython, Anaconda, etc.) that I'm not sure which one of them was actually needed and would've sufficed by itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>A very bare-bones install would be to get an uncluttered editor, then just install python from python.org.</p>
<p>I would actually advise against this unless you're only planning on using python a couple of times. As soon as you start using new packages or versions, a proper editor and environment handler becomes really important.</p>
<p>Pycharm does very well at handling conda and virtual environments and allows you to do it through the GUI which is good for people new to programming. You can select packages through the GUI and create environments for different projects very easily; importantly, it's also easy to remove them again. You can even pip/conda install packages through pycharm's terminal if you want to demonstrate the different installation methods.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following things are necessary to know before knowing about package management tool</p>
<ul>
<li>Python is interpreted language and its interpreter is written mainly in C programming language</li>
<li><p>You can write python libraries in the Python programming language or another programming language one I know is<a href="https://github.com/llvm-mirror/llvm" rel="nofollow noreferrer">LLVM</a></p></li>
<li><p>Any code that you write using any compiled language like C, C++, or Java can be integrated or imported into another Python script. This code is considered as an "extension."</p></li>
<li><p>These libraries written in other programming language does not have what so called <strong>setup.py</strong> these package management tools handle dependencies with its own virtual environment  mechanism  </p></li>
</ul>
<p>This is blog for writing extensions in c or c++ programming language <a href="https://docs.python.org/3/extending/building.html" rel="nofollow noreferrer">Check here</a></p>
<p>so these package management tool tries  to do more than what pip does handle Python dependencies as well as dependencies written in another programming language because these pacakage you install does not goes into site-packages</p>
<p><strong>Starting Python</strong> pip is good</p>
<p><strong>Mastering Python</strong> choose any package management alongwith pip</p>
</div>
<span class="comment-copy">I should've mentioned that I'm planning to recommend using Sublime or VS Code because those are the ones I'm familiar with myself and know that they are fine for the things we'll be doing. I'm not very experienced myself by any means either but am able to do simple projects and just want to help the friend get started too. I haven't familiarized myself with packages and virtual environments yet, but do you know if Sublime or VS Code are lacking in this regard compared to, say, Pycharm?</span>
<span class="comment-copy">Alright thanks, they sound needlessly complicated for simple learning projects</span>
