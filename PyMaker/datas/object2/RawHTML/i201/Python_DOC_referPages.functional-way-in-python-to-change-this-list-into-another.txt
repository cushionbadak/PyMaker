<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2161752/how-to-count-the-frequency-of-the-elements-in-a-list">How to count the frequency of the elements in a list?</a>
<span class="question-originals-answer-count">
                    26 answers
                </span>
</li>
</ul>
</div>
<p>I have a list <code>[2,3,0,3]</code>
And want to generate a list </p>
<pre><code>[1,0,1,2]
</code></pre>
<p>The reasoning is that 1 zero appears, no one appears, 1 two appears and 2 threes appear in the input list.</p>
<p>Is there a non <code>for</code> loopy procedural way to do this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> which finds count of elements:</p>
<pre><code>from collections import Counter

lst = [2,3,0,3]

c = Counter(lst)
print([c[x] for x in range(max(lst)+1)])
# [1, 0, 1, 2]
</code></pre>
<p>An alternate way avoiding loops:</p>
<pre><code>from collections import Counter

lst = [2,3,0,3]

c = dict.fromkeys(range(max(lst)+1), 0)
c.update(Counter(lst))

print(c.values())
# # [1, 0, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could probably use the following code:</p>
<pre><code>lst = [2,3,0,1,3]
#Get list unique values using set
set_lst = sorted(set(lst))
#For each unique element, use the count method
counts = [lst.count(i) for i in set_lst]
</code></pre>
<p>At first, we find out all the unique elements of the list, by using a <code>set</code> object, which stores unique elements only. Then we traverse through the list and use the <code>count</code> method to get the counts of each element, which are sorted in order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another solution with <code>count</code>:</p>
<pre><code>l = [2, 3, 0, 3]

assert len(l) == max(l) + 1

[l.count(num) for num, _ in enumerate(l)]
# [1, 0, 1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to avoid <code>for</code> keyword at any price, then you might use <code>map</code> instead, following way:</p>
<pre><code>a = [2,3,0,3]
out = list(map(lambda x:a.count(x), list(range(max(a)+1))))
print(out) #[1, 0, 1, 2]
</code></pre>
<p>This solution assumes that <code>a</code> contains solely non-negative integers and is not empty <code>list</code>.</p>
</div>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></span>
<span class="comment-copy">It is similar to <i>grouping</i> operation in database.</span>
<span class="comment-copy">Thanks Nishant, the guy ubnutu shows Counter, so very close, but i updated my question to have a missing 1</span>
<span class="comment-copy">Your output list should be from <code>min - max</code> or <code>0-max</code>. Suppose the list is <code>[5,9,7]</code> what should be the output?</span>
<span class="comment-copy">That would be something like <code>[my_counter[i] for i in range(max(my_counter))]</code></span>
<span class="comment-copy">I think this is a more built-in method. Obviously, using a <code>Counter</code> or <code>itertools</code> could be faster</span>
<span class="comment-copy">Have an upvote but more importantly look at Austins answer, more elegant</span>
<span class="comment-copy">always fun to see other ideas, but because of the need for the assertion, i still favor Counter  way, have an upvote</span>
