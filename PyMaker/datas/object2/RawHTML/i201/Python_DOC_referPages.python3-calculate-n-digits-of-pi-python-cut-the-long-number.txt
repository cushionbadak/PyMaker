<div class="post-text" itemprop="text">
<p>i need to write a script that get input from client of an number and i need to print back the PI number until client number
for example: client number is 52 --&gt; 3.14159265358979323846264338327950288419716939937510</p>
<p>so far i write this:</p>
<pre><code>sum = 0

for i in range(1, 1001):
    sum += ((-1)**(i+1))*4 / ((i + i)*(i + i + 1)*(i + i + 2))

print(sum)
</code></pre>
<p>the issue is that python showing to me only the 17 decimals digits, and i expect to see the 1000 decimal digits.
there is a way to showing all the decimal digits based on the inputed range?
it's for school task, so i need to write is as simple as it can be.</p>
</div>
<div class="post-text" itemprop="text">
<p>I do not think it is possible to get a a float value with a 1000point precision.</p>
<p>Check <a href="https://stackoverflow.com/a/54967370/11152011">https://stackoverflow.com/a/54967370/11152011</a> to calculate pi up to n-precision</p>
<p>You can then use the "decimal" library to use the string as a number.</p>
<p>The calculation of pi was taken from the above link.</p>
<pre><code>import decimal

DIGITS = 1000

def pi_digits(x):
    k,a,b,a1,b1 = 2,4,1,12,4
    while x &gt; 0:
        p,q,k = k * k, 2 * k + 1, k + 1
        a,b,a1,b1 = a1, b1, p*a + q*a1, p*b + q*b1
        d,d1 = a/b, a1/b1
        while d == d1 and x &gt; 0:
            yield int(d)
            x -= 1
            a,a1 = 10*(a % b), 10*(a1 % b1)
            d,d1 = a/b, a1/b1

digits = [str(n) for n in list(pi_digits(DIGITS))]
str_pi='{}.{}'.format(digits.pop(0), "".join(digits)

context = decimal.Context(prec=100)
decimal.setcontext(context)
pi = decimal.Decimal(str_pi)
print(pi+5)
print(pi*20)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know how accurate is this but for a small class assignment i guess do the following:</p>
<pre><code>num=52 #input
pi=22/7;
print('{:.{}f}'.format(pi, num))
</code></pre>
</div>
<span class="comment-copy">Double precision floating point only offers ~14 significant figures of precision. If you want an arbitrary number of digits you will need a more sophisticated algorithm.</span>
<span class="comment-copy">You can use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module for arbitrary precision floating point arithmetic.</span>
<span class="comment-copy">In addition to the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">decimal</a> module, which is in the Python standard library, you could also use <a href="http://mpmath.org/" rel="nofollow noreferrer">mpmath</a>, which is part of the scipy stack and comes with the Anaconda distribution. The home page for mpmath shows three lines that calculate pi to 50 places. You could easily modify that to whatever number of digits you want. (Change the <code>50</code> in the second line to your desired number of digits.)</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/9004789/1000-digits-of-pi-in-python">1000 digits of pi in python</a></span>
<span class="comment-copy">I believe OP is looking for the <b>precise</b> value of PI up to some specified precision, not an ancient Mesopotamian approximation.</span>
<span class="comment-copy">maybe you can find the code here: <a href="https://stackoverflow.com/q/45416626/9236333">stackoverflow.com/q/45416626/9236333</a></span>
<span class="comment-copy">Thanks for the answer, but the longest decimal digits is 51 digits. can you please also explain about the format use?</span>
<span class="comment-copy">@dor its called precision handling. refer this link: <a href="https://www.geeksforgeeks.org/precision-handling-python/" rel="nofollow noreferrer">geeksforgeeks.org/precision-handling-python</a></span>
<span class="comment-copy">you can find the better code here: <a href="https://stackoverflow.com/q/9004789/9236333">stackoverflow.com/q/9004789/9236333</a></span>
