<div class="post-text" itemprop="text">
<p>I am using uWSGI to deploy my WSGI application. Are the Python file compiled for every request, or are they precompiled once? I don't see any <code>.pyc</code> files.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python caches modules bytecode - directly in the same location for python2.x, under a <code>__pycache__</code> subfolder for python3 - but scripts (the difference is in usage - if you import it it's a module, if you execute it it's a script) are always recompiled (which is why main scripts are usually very very short an simple).</p>
<p>IOW, your main wsgi  script will be recompiled once for each new server process. Typically a wsgi app is served as a long running process which will handle much more than one single request, so even then the initial compilation overhead is really not an issue (short script + only compiled once per process)...</p>
<p>Also, once a Python process is started, imported modules are cached in memory so they are only really imported (loaded) once per process. </p>
<p>Just note that the user under which the process is running must have write permissions on your app's directory in order to create the .pyc files... and of course read permissions on the .pyc files too.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using <code>CPython</code> then by default, no it does not compile every time a request is received unless you manually configure it to do this. </p>
<p>By the first request, the <code>uWSGI</code> will load the python scripts <code>bytecode</code> and will  reload it in 2 different scenarios I know of:</p>
<ol>
<li>There is a new import that has not been loaded before (only the new module will be parsed and converted to bytecode).</li>
<li>You explicitly ran <code>service uwsgi restart</code> </li>
</ol>
<p>Yet, there is still a way to keep reloading python scripts in every request by suppressing it by the interpreter, example: <code>python -B my_amazing_view.py</code></p>
<p>For more details check here:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/16869024/what-is-pycache">What is <strong>pycache</strong></a></li>
<li><a href="https://stackoverflow.com/questions/35618159/should-i-generate-pyc-files-when-deploying/35619259">Should I generate <code>.pyc</code></a></li>
</ol>
</div>
<span class="comment-copy">I'm not questioning validity of your answer but could you point to the official documentation where this difference in behaviour for scripts is described? I did not found anything about it in <a href="https://www.python.org/dev/peps/pep-3147/#proposal" rel="nofollow noreferrer">PEP-3147</a> or in <a href="https://docs.python.org/3/reference/import.html#cached-bytecode-invalidation" rel="nofollow noreferrer">Import. Cached Bytecode Invalidation</a></span>
<span class="comment-copy">@AlexYu this is at least mentionned here: <a href="https://docs.python.org/2/tutorial/modules.html#compiled-python-files" rel="nofollow noreferrer">docs.python.org/2/tutorial/modules.html#compiled-python-files</a> and, in a slightly different way, here: <a href="https://docs.python.org/3/tutorial/modules.html#compiled-python-files" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#compiled-python-files</a></span>
<span class="comment-copy">Thank you! I found in the first link for python-2: <b>"When a script is run by giving its name on the command line, the bytecode for the script is never written to a .pyc or .pyo file""</b>. It looks strange that this sentence is removed from python-3 documentation</span>
<span class="comment-copy">@AlexYu it has been replaced by "it always recompiles and does not store the result for the module thatâ€™s loaded directly from the command line", possibly to account for the <code>python -m modulename</code> CLI option too.</span>
<span class="comment-copy">Thanks a lot @bruno &amp; Alex. Now, I know why my main script should be small and that I should import modules to avoid repeated compilation..</span>
<span class="comment-copy">This is actually a bit more complicated. The Python runtime only compiles (or, more exactly, only cache the compiled code for) modules, not scripts (what makes the difference is actually whether you import the file or execute it).</span>
<span class="comment-copy">Thanks a lot sir, your links did help a lot.</span>
