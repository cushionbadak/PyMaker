<div class="post-text" itemprop="text">
<p>I'm looking for more info on this kind of syntax</p>
<p>function_name[data type]</p>
<p>I don't know what this is called so I hope someone here can point me in the right direction. I'm used to this kind of syntax with referencing values in list and dictionaries but not so much for function definitions.</p>
<p>I came across this when following PyQt5 tutorials, specifically this one</p>
<p><a href="http://zetcode.com/gui/pyqt5/widgets/" rel="nofollow noreferrer">http://zetcode.com/gui/pyqt5/widgets/</a></p>
<p>which contains this line</p>
<pre><code>sld = QSlider(Qt.Horizontal, self)
...
sld.valueChanged[int].connect(...)
</code></pre>
<p>From the Qt5 documentation I can see that this is the definition of the signal function</p>
<pre><code>valueChanged(int value)
</code></pre>
<p><a href="https://doc.qt.io/qt-5.11/qabstractslider.html#signals" rel="nofollow noreferrer">https://doc.qt.io/qt-5.11/qabstractslider.html#signals</a></p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>When coding Qt in C++, you can subscribe to signals using slots with <em>different signatures</em>, using a C++ technique called <em>method overloading</em>. Qt will call the right slot based on the argument type of the changed value. The <a href="https://doc.qt.io/qt-5/signalsandslots.html#a-real-example" rel="nofollow noreferrer">Qt documentation on slots</a> uses an overloaded <code>display()</code> slot definition as an example:</p>
<pre><code>public slots:
    void display(int num);
    void display(double num);
    void display(const QString &amp;str);
    // ...
</code></pre>
<p>and connecting <code>display</code> to a signal that can send <code>int</code> values on changes would connect to the first one of these.</p>
<p>Python, on the other hand, doesn't have such a concept. Python is dynamically typed, function definitions don't include type information.</p>
<p>So the PyQT wrapper around QT lets you define what type of argument to expect by using Python's <a href="https://docs.python.org/3/reference/expressions.html#subscriptions" rel="nofollow noreferrer">subscription syntax</a> on the signal, the same syntax you'd use to address indices and slices in lists or keys in dictionaries. Using this you can connect your slot to a specific 'variant' of a signal. Signals are <em>not methods</em> in this scenario, they are custom wrapper objects that support subscription instead, and the result of that <code>signal[type]</code> is a more specific signal object, one you can then connect to or disconnect from and the slot will only ever be called for that specific type.</p>
<p>For your example, the QAbstractSlider.valueChanged` signal comes in just one variant, one that emits an integer:</p>
<pre><code>void    valueChanged(int value)
</code></pre>
<p>so in Python you'd bind that variant via <code>valueChanged[int]</code>. If a signal takes no arguments, you can use <code>signal</code> directly, no subscription required; e.g. <code>sliderPressed</code>. In fact, you can use any signal that way, but then a default is picked if there are multiple overloads; you may want to check the <code>.signal</code> attribute in that case to see which one is going to be used.</p>
<p>See the <a href="http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html" rel="nofollow noreferrer"><em>Signals and Slots</em> documentation</a> in the PyQT5 manual:</p>
<blockquote>
<p>A bound signal has <code>connect()</code>, <code>disconnect()</code> and <code>emit()</code> methods that implement the associated functionality. It also has a <code>signal</code> attribute that is the signature of the signal that would be returned by Qtâ€™s <code>SIGNAL()</code> macro.</p>
<p>A signal may be overloaded, ie. a signal with a particular name may support more than one signature. A signal may be indexed with a signature in order to select the one required. [...]</p>
<p>If a signal is overloaded then it will have a default that will be used if no index is given.</p>
</blockquote>
</div>
<span class="comment-copy">This is good old indexing syntax like you'd use with a list or dictionary; they've just defined <code>__getitem__</code> on some of their objects so it does something else. It's a Qt thing.</span>
<span class="comment-copy">Don't confuse C++ methods for their Python equivalents. <code>valueChanged</code> is not a function in Python.</span>
<span class="comment-copy">See the <a href="http://pyqt.sourceforge.net/Docs/PyQt5/signals_slots.html" rel="nofollow noreferrer">PyQT5 <i>Signals and Slots</i> documentation</a></span>
<span class="comment-copy">I forgot to mention that I'm aware that the Qt docs are in C++. But things can be referenced by just using a data type?</span>
<span class="comment-copy">So from the PyQt5 documentation I think this would be the relevant statement? " A signal may be indexed with a signature in order to select the one required. A signature is a sequence of types. A type is either a Python type object or a string that is the name of a C++ type." Is this common practice?</span>
