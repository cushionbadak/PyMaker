<div class="post-text" itemprop="text">
<p>I have an array I want to iterate through. The array consists of strings consisting of numbers and signs. 
like this: €110.5M
I want to loop over it and remove all Euro sign and also the M and return that array with the strings as ints.
How would I do this knowing that the array is a column in a table?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a string comprehension:</p>
<pre><code>numbers = [float(p.replace('€','').replace('M','')) for p in a]
</code></pre>
<p>which gives: </p>
<pre><code>[110.5, 210.5, 310.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just <code>strip</code> the characters,   </p>
<pre><code>&gt;&gt;&gt; x = '€110.5M'
&gt;&gt;&gt; x.strip('€M')
'110.5'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sanitize_string(ss):
     ss = ss.replace('$', '').replace('€', '').lower()
     if 'm' in ss:
         res = float(ss.replace('m', '')) * 1000000
     elif 'k' in ss:
         res = float(ss.replace('k', '')) * 1000
     return int(res)
</code></pre>
<p>This can be applied to a list as follows:</p>
<pre><code>&gt;&gt;&gt; ls = [sanitize_string(x) for x in ["€3.5M", "€15.7M" , "€167M"]]
&gt;&gt;&gt; ls
[3500000, 15700000, 167000000]
</code></pre>
<p>If you want to apply it to the column of a table instead:</p>
<pre><code>dataFrame = dataFrame.price.apply(sanitize_string) # Assuming you're using DataFrames and the column is called 'price'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension to construct one list from another:</p>
<pre><code>foo = ["€13.5M", "€15M" , "€167M"]
foo_cleaned = [value.translate(None, "€M")]
</code></pre>
<p>str.translate replaces all occurrences of characters in the latter string with the first argument <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this </p>
<pre><code>arr = ["€110.5M","€110.5M","€110.5M","€110.5M","€110.5M","€110.5M","€110.5M"]

f = [x.replace("€","").replace("M","") for x in arr]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can call <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>.replace()</code></a> on a string as often as you like. An initial solution could be something like this:</p>
<pre class="lang-py prettyprint-override"><code>my_array = ['€110.5M', '€111.5M', '€112.5M']
my_cleaned_array = []

for elem in my_array:
    my_cleaned_array.append(elem.replace('€', '').replace('M', ''))
</code></pre>
<p>At this point, you still have strings in your array. If you want to return them as ints, you can write <code>int(elem.replace('€', '').replace('M', ''))</code> instead. But be aware that you will then lose everything after the floating point, i.e. you will end up with <code>[110, 111, 112]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use Regex to do that.</p>
<pre><code>import re

str =  "€110.5M"
x = re.findall("\-?\d+\.\d+", str )
print(x)
</code></pre>
<p>I didn't quite understand the second part of the question.</p>
</div>
<span class="comment-copy">It would be helpful if you could provide code you’ve already written and input along with expected output.</span>
<span class="comment-copy">Why are you so concerned about it being a one-line for loop?  I think creating a separate function to clean up values would be a Good Thing.  Also, it's not clear what you expect to be done with "€110.5M".  Is that supposed to become <code>110.5</code> (which is actually a float) or is it supposed to become <code>110500000</code>?  If all you want do is remove the the Euro symbol and the M, then use <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>.strip()</code></a>.</span>
<span class="comment-copy">it is supposed to be 11050000 yes.</span>
<span class="comment-copy">This is definitely the best answer, IMHO. +1</span>
<span class="comment-copy">Just an FYI: I find <code>.strip()</code> better for this case. :-)</span>
<span class="comment-copy">But <code>€13.5M</code> should become 13500000 as indicated by OP</span>
