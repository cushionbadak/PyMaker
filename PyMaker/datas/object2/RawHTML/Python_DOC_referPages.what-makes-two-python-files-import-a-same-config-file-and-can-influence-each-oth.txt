<div class="post-text" itemprop="text">
<p>maybe this tiltle cannot explain my questions, here has an example.</p>
<p>There are three python files, <code>demo.py</code>、<code>fun.py</code>、<code>config.py</code>.</p>
<p>in the <code>config.py</code> file:</p>
<pre><code>from easydict import EasyDict as edict

__C = edict()
cfg = __C
__C.TRAIN = edict()
__C.TRAIN.LEARNING_RATE = 0.001
</code></pre>
<p>in the <code>fun.py</code>:</p>
<pre><code>from config import cfg
def function():
    print(cfg.TRAIN.LEARNING_RATE)
    cfg.TRAIN.LEARNING_RATE = 1
    pass
</code></pre>
<p>in the <code>demo.py</code>:</p>
<pre><code>from config import cfg
from fun import function

cfg.TRAIN.LEARNING_RATE = 0.1

function()

print(cfg.TRAIN.LEARNING_RATE)
</code></pre>
<p>run the <code>demo.py</code>,results in :</p>
<pre><code>0.1
1
</code></pre>
<p>I am curious about why <code>fun.py</code> can change the values in the <code>demo.py</code> although they import a same config file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you answered your own question: they import the same config file.</p>
<p>Keep in mind you're not changing a value in <code>demo.py</code> or <code>fun.py</code>. Instead, when you do <code>cfg.TRAIN.LEARNING_RATE = 0.1</code> you're changing the variable in memory <code>cfg</code>, which is tied to <code>config.py</code>. </p>
<p>Since both <code>demo.py</code> and <code>fun.py</code> import the same <code>config.py</code>, the interpreter loads the whole thing into memory once and gives those other two files access to the <code>cfg</code> variable stored in memory. In other words, they're both manipulating the same variable, which they accessed independently.</p>
<p>(The reason the program never outputs <code>0.001</code> is that, while <code>cfg.TRAIN.LEARNING_RATE</code> is initialized to that value as soon as you load <code>config.py</code> into memory for the first time, you never actually print it before reassigning it to <code>0.1</code>.)</p>
</div>
<span class="comment-copy">It is not as obvious as you suggest it, if I change the files to : <code>config.py</code> file:      var = 0.001  <code>fun.py</code>:      from config import var     def function():         print(var)         var = 1  <code>demo.py</code>:      from config import var     from fun import function      var = 0.1      function()      print(var)  I get :     UnboundLocalError: local variable 'var' referenced before assignment Adding a <code>global var</code> to <code>fun.py</code> give the expected result.</span>
