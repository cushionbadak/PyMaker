<div class="post-text" itemprop="text">
<p><strong>How does XPath deal with XML namespaces?</strong></p>
<p>If I use</p>
<pre><code>/IntuitResponse/QueryResponse/Bill/Id
</code></pre>
<p>to parse the XML document below I get 0 nodes back. </p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;IntuitResponse xmlns="http://schema.intuit.com/finance/v3" 
                time="2016-10-14T10:48:39.109-07:00"&gt;
    &lt;QueryResponse startPosition="1" maxResults="79" totalCount="79"&gt;
        &lt;Bill domain="QBO" sparse="false"&gt;
            &lt;Id&gt;=1&lt;/Id&gt;
        &lt;/Bill&gt;
    &lt;/QueryResponse&gt;
&lt;/IntuitResponse&gt;
</code></pre>
<p>However, I'm not specifying the namespace in the XPath (i.e. <code>http://schema.intuit.com/finance/v3</code> is not a prefix of each token of the path). How can XPath know which <code>Id</code> I want if I don't tell it explicitly? I suppose in this case (since there is only one namespace) XPath could get away with ignoring the <code>xmlns</code> entirely. But if there are multiple namespaces, things could get ugly.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Defining namespaces in XPath <sub><sup>(recommended)</sup></sub></h2>
<p>XPath itself doesn't have a way to bind a namespace prefix with a namespace.  Such facilities are provided by the hosting library.</p>
<p>It is recommended that you use those facilities and define namespace prefixes that can then be used to qualify XML element and attribute names as necessary.</p>
<hr/>
<p>Here are some of the various mechanisms which XPath hosts provide for specifying namespace prefix bindings to namespace URIs:</p>
<p><strong>XSLT:</strong></p>
<pre class="lang-xml prettyprint-override"><code>&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:i="http://schema.intuit.com/finance/v3"&gt;
   ...
</code></pre>
<p><strong>Perl (<a href="http://search.cpan.org/dist/XML-LibXML/lib/XML/LibXML/XPathContext.pod" rel="nofollow noreferrer">LibXML</a>):</strong></p>
<pre class="lang-perl prettyprint-override"><code>my $xc = XML::LibXML::XPathContext-&gt;new($doc);
$xc-&gt;registerNs('i', 'http://schema.intuit.com/finance/v3');
my @nodes = $xc-&gt;findnodes('/i:IntuitResponse/i:QueryResponse');
</code></pre>
<p><strong>Python (<a href="http://lxml.de/xpathxslt.html#namespaces-and-prefixes" rel="nofollow noreferrer">lxml</a>):</strong></p>
<pre class="lang-python prettyprint-override"><code>from lxml import etree
f = StringIO('&lt;IntuitResponse&gt;...&lt;/IntuitResponse&gt;')
doc = etree.parse(f)
r = doc.xpath('/i:IntuitResponse/i:QueryResponse', 
              namespaces={'i':'http://schema.intuit.com/finance/v3'})
</code></pre>
<p><strong>Python (<a href="https://stackoverflow.com/q/14853243/290085">ElementTree</a>):</strong></p>
<pre class="lang-python prettyprint-override"><code>namespaces = {'i': 'http://schema.intuit.com/finance/v3'}
root.findall('/i:IntuitResponse/i:QueryResponse', namespaces)
</code></pre>
<p><strong>Java (SAX):</strong></p>
<pre class="lang-java prettyprint-override"><code>NamespaceSupport support = new NamespaceSupport();
support.pushContext();
support.declarePrefix("i", "http://schema.intuit.com/finance/v3");
</code></pre>
<p><strong>Java (XPath):</strong></p>
<pre class="lang-java prettyprint-override"><code>xpath.setNamespaceContext(new NamespaceContext() {
    public String getNamespaceURI(String prefix) {
      switch (prefix) {
        case "i": return "http://schema.intuit.com/finance/v3";
        // ...
       }
    });
</code></pre>
<ul>
<li>Remember to call
<a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#setNamespaceAware%28boolean%29" rel="nofollow noreferrer"><code>DocumentBuilderFactory.setNamespaceAware(true)</code></a>.</li>
<li>See also:
<a href="https://stackoverflow.com/questions/10720452/java-xpath-queries-with-default-namespace-xmlns">Java XPath: Queries with default namespace xmlns</a></li>
</ul>
<p><strong>xmlstarlet:</strong></p>
<pre class="lang-sh prettyprint-override"><code>-N i="http://schema.intuit.com/finance/v3"
</code></pre>
<p><strong>JavaScript:</strong></p>
<p>See <a href="https://developer.mozilla.org/en-US/docs/Introduction_to_using_XPath_in_JavaScript#Implementing_a_User_Defined_Namespace_Resolver" rel="nofollow noreferrer">Implementing a User Defined Namespace Resolver</a>:</p>
<pre class="lang-js prettyprint-override"><code>function nsResolver(prefix) {
  var ns = {
    'i' : 'http://schema.intuit.com/finance/v3'
  };
  return ns[prefix] || null;
}
document.evaluate( '/i:IntuitResponse/i:QueryResponse', 
                   document, nsResolver, XPathResult.ANY_TYPE, 
                   null );
</code></pre>
<p><strong>PhP:</strong></p>
<p>Adapted from <a href="https://stackoverflow.com/a/6475568/290085">@Tomalak's answer using DOMDocument</a>:</p>
<pre><code>$result = new DOMDocument();
$result-&gt;loadXML($xml);

$xpath = new DOMXpath($result);
$xpath-&gt;registerNamespace("i", "http://schema.intuit.com/finance/v3");

$result = $xpath-&gt;query("/i:IntuitResponse/i:QueryResponse");
</code></pre>
<p>See also <a href="https://stackoverflow.com/q/44894426/290085">@IMSoP's canonical Q/A on PHP SimpleXML namespaces</a>.</p>
<p><strong>C#:</strong></p>
<pre class="lang-cs prettyprint-override"><code>XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);
nsmgr.AddNamespace("i", "http://schema.intuit.com/finance/v3");
XmlNodeList nodes = el.SelectNodes(@"/i:IntuitResponse/i:QueryResponse", nsmgr);
</code></pre>
<p><strong>VBA:</strong></p>
<pre class="lang-vba prettyprint-override"><code>xmlNS = "xmlns:i='http://schema.intuit.com/finance/v3'"
doc.setProperty "SelectionNamespaces", xmlNS  
Set queryResponseElement =doc.SelectSingleNode("/i:IntuitResponse/i:QueryResponse")
</code></pre>
<p><strong>VB.NET:</strong></p>
<pre class="lang-vb.net prettyprint-override"><code>xmlDoc = New XmlDocument()
xmlDoc.Load("file.xml")
nsmgr = New XmlNamespaceManager(New XmlNameTable())
nsmgr.AddNamespace("i", "http://schema.intuit.com/finance/v3");
nodes = xmlDoc.DocumentElement.SelectNodes("/i:IntuitResponse/i:QueryResponse",
                                           nsmgr)
</code></pre>
<p><strong>Ruby (Nokogiri):</strong></p>
<pre class="lang-rb prettyprint-override"><code>puts doc.xpath('/i:IntuitResponse/i:QueryResponse',
                'i' =&gt; "http://schema.intuit.com/finance/v3")
</code></pre>
<p>Note that Nokogiri supports removal of namespaces,</p>
<pre class="lang-rb prettyprint-override"><code>doc.remove_namespaces!
</code></pre>
<p>but see the below warnings discouraging the defeating of XML namespaces.</p>
<hr/>
<p>Once you've declared a namespace prefix, your XPath can be written to use it:</p>
<pre><code>/i:IntuitResponse/i:QueryResponse
</code></pre>
<hr/>
<h2>Defeating namespaces in XPath <sub><sup>(not recommended)</sup></sub></h2>
<p>An alternative is to write predicates that test against <code>local-name()</code>:</p>
<pre><code>/*[local-name()='IntuitResponse']/*[local-name()='QueryResponse']/@startPosition
</code></pre>
<p>Or, in XPath 2.0:</p>
<pre><code>/*:IntuitResponse/*:QueryResponse/@startPosition
</code></pre>
<p>Skirting namespaces in this manner works but is not recommended because it</p>
<ul>
<li>Under-specifies the full element/attribute name.</li>
<li><p>Fails to differentiate between element/attribute names in different
namespaces (the very purpose of namespaces).  Note that this concern could be addressed by adding an additional predicate to check the namespace URI explicitly<sup>1</sup>:</p>
<pre><code>/*[    namespace-uri()='http://schema.intuit.com/finance/v3' 
   and local-name()='IntuitResponse']
/*[    namespace-uri()='http://schema.intuit.com/finance/v3' 
   and local-name()='QueryResponse']
/@startPosition
</code></pre>
<p><sup>1</sup>Thanks to <a href="https://stackoverflow.com/users/317052/daniel-haley">Daniel Haley</a> for the <code>namespace-uri()</code> note.</p></li>
<li><p>Is excessively verbose.</p></li>
</ul>
</div>
<span class="comment-copy">Your XPath should not return any node : <a href="http://www.xpathtester.com/xpath/db27cc0f978057b5faabc32c6aa149c8" rel="nofollow noreferrer">INFO - XPath returned 0 items (compiled in 0ms, evaluated in 1ms)</a>. How did you execute the XPath?</span>
<span class="comment-copy">@har07 I did it in Java using import <code>javax.xml.xpath.XPath</code>. I agree it doesn't work using an online tester. That was one of the perplexing things.</span>
<span class="comment-copy">Excellent question!  XPath itself provides no way to specify a default namespace or the binding of a namespace prefix to a namespace.  Fortunately, however, hosting languages and libraries do.  <a href="http://stackoverflow.com/a/40796315/290085"><b>See my answer below for details</b></a>...</span>
<span class="comment-copy">Not quite sure why a question should be upvoted so highly when it has been asked and answered 1000 times before....</span>
<span class="comment-copy">I for one was impressed with this question because, unlike most previous askers, Adam not only included a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, he sensed and conveyed the need for XPath to deal with XML namespaces <i>somehow</i>.  Most such questions merely post an XPath, maybe some XML (and if we're lucky it's not an image or a link to a humongous off-site resource), and state that it "doesn't work."  Adam sensed it had to do with namespaces, nailed the title, and wrote what I considered to be a question worthy of a  canonical answer.</span>
<span class="comment-copy">Thank you for such a complete answer. One thing I still don't understand though is how when I use a library like Javax or Pugi XML to parse the XML above with the path I specified, I actually do get results (i.e. a node list) back. Do some of these libraries have an ability to somehow infer simple namespaces?</span>
<span class="comment-copy">pugi: nonconformance declaration in docs + odd behavior observation = turn and run / life's too short.   Javax: Don't forget to call <a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#setNamespaceAware%28boolean%29" rel="nofollow noreferrer"><b><code>setNamespaceAware(true)</code></b></a> on the <code>DocumentBuilderFactory</code>.</span>
<span class="comment-copy">Turns out pugixml doesn't support xml namespaces at all (<a href="http://stackoverflow.com/questions/1042855/using-boost-to-read-and-write-xml-files" title="using boost to read and write xml files">stackoverflow.com/questions/1042855/…</a>). Turning and running.</span>
<span class="comment-copy">@DougGlancy: Sorry, VBA was one of the few examples I'd not yet provided. Remedied by adding now.  Note that unqualified attribute names are not automatically placed in the default namespace specified on ancestor elements.  I've reopened your other question since other than this detail, you'd already accounted for namespaces properly.  Let me know here if I can help in general with XPath and namespaces or over on your question if particular to that issue.  Thanks.</span>
<span class="comment-copy">Thanks, very helpful.</span>
