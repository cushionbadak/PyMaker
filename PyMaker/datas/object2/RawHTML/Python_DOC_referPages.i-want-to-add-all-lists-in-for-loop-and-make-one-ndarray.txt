<div class="post-text" itemprop="text">
<p>for example
I have a list of list</p>
<pre><code>[[1,2,3], [4,5,6], [7,8,9], [10,11,12], ...]
</code></pre>
<p>I want to add all lists in for loop and make one ndarray,</p>
<p>like follwing</p>
<pre><code>for list in lists:
    sum function...
</code></pre>
<p>and result what i want is that</p>
<pre><code>[22, 26, 30]
</code></pre>
<p>how can i write it in a nice code?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using NumPy, it is quite simple:</p>
<pre><code>import numpy as np

l = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
arr = np.array(l)
result = arr.sum(axis=0)
print(result)
# [22 26 30]
</code></pre>
<p>For a pure Python solution:</p>
<pre><code>l = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
result = [sum(column) for column in zip(*l)]
print(result)
# [22, 26, 30]
</code></pre>
<p>The NumPy solution will be faster.</p>
<pre><code>In [1]: import numpy as np

In [2]: arr = np.arange(10 ** 6).reshape(10 ** 3, 10 ** 3)

In [3]: %timeit arr.sum(axis=0)
881 µs ± 22.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

In [4]: l = arr.tolist()

In [5]: %timeit [sum(x) for x in zip(*l)]
76.8 ms ± 1.84 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do that without the need of Numpy just using the basic of python. (All sublists must have the same length)</p>
<pre><code>l =  [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
result = [sum(subL[i] for subL in l) for i in range(len(l[0]))]
</code></pre>
<p>Or, without list comprehension:</p>
<pre><code>result = []
for i in range(len(l[0])):
    n = 0
    for x in l:
        n += subL[i]
    result.append(n)
</code></pre>
<p>Both produce the output <code>[22, 26, 30]</code>.</p>
<p>If you are interested in performance, I wrote this (not sure if it is accurated):</p>
<pre><code>from timeit import timeit
import numpy as np

l = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]

def listComprehension():
    result = [sum(subL[i] for subL in l) for i in range(len(l[0]))]

def basic():
    result = []
    for i in range(len(l[0])):
        n = 0
        for subL in l:
            n += subL[i]
        result.append(n)

def zipped():
    result = [sum(column) for column in zip(*l)]

def numpyied():
    arr = np.array(l)
    result = arr.sum(axis=0)

print(timeit("listComprehension()", setup = "from __main__ import listComprehension"))
# 3.738487364
print(timeit("basic()", setup = "from __main__ import basic"))
# 1.953782115
print(timeit("zipped()", setup = "from __main__ import zipped"))
# 1.413262091
print(timeit("numpyied()", setup = "from __main__ import numpyied"))
# 9.576366059999998
</code></pre>
<p>Surprisingly <code>numpy</code> is slower, but I can't say why. (The last two functions were taken from <a href="https://stackoverflow.com/a/55252317/7655838">@Tomothy32's answer</a>)</p>
</div>
<span class="comment-copy">Are you sure <code>numpy</code> is fast? I've just done a crude performance testing (see my answer) and it said that numpy is slower., not sure why but the numbers show it. Do you know more about this?</span>
<span class="comment-copy">@EnderLook Your timing includes the creation of the array, skewing the results. In addition to this, the array you are using is awfully small. Python will be similar to NumPy for these small arrays. If you were to use a larger array, say <code>arr = np.arange(10 ** 6).reshape(10 ** 3, 10 ** 3)</code>, you will see that NumPy will be a few orders of magnitude faster than pure Python.</span>
<span class="comment-copy">@EnderLook I updated my answer to include some of my tests.</span>
<span class="comment-copy">Ohh, thanks for the clarification.</span>
