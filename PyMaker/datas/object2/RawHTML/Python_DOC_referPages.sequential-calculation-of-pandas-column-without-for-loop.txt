<div class="post-text" itemprop="text">
<p>I have the sample dataframe below </p>
<pre><code>        perc    2018_norm
0   0.009069    27.799849
1   0.011384    0.00
2   -0.000592   0.00
3   -0.002667   0.00
</code></pre>
<p>The value of the first row of  <code>2018_norm</code> comes from another DataFrame. I then want to calculate the value of the second row through the end of the DataFrame of the <code>2018_norm</code> column using the percentage change in the <code>perc</code> column and previous row's value in <code>2018_norm</code> column, which I can currently achieve using a For Loop to give the following result:</p>
<pre><code>       perc      2018_norm
0   0.009069    27.799849
1   0.011384    28.116324
2   -0.000592   28.099667
3   -0.002667   28.024713
4   -0.006538   27.841490
</code></pre>
<p>For Loops on DataFrames are just slow so I know I am missing something basic but my google searching hasn't yielded what I am looking for.</p>
<p>I've tried variations of <code>y1df['2018_norm'].iloc[1:] = (y1df['perc'] * y1df['2018_norm'].shift(1)) + y1df['2018_norm'].shift(1)</code> that just yield:</p>
<pre><code>       perc      2018_norm
0   0.009069    27.799849
1   0.011384    28.116324
2   -0.000592   0.00
3   -0.002667   0.00
4   -0.006538   0.00`
</code></pre>
<p>What am I missing?</p>
<p>EDIT: To clarify, a basic For loop and <code>df.iloc</code> were not preferable and a for loop with iterrows sped the computation up substantially such that a for loop using that function is a great solution for my use. Wen-Ben's respone also directly answers the question I didn't mean to ask in my original post.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use df.iterrows() to loop much more quickly through a pandas data frame:</p>
<pre><code>for idx, row in y1df.iterrows():
    if idx &gt; 0: # Skip first row
        y1df.loc[idx, '2018_norm'] = (1 + row['perc']) * y1df.loc[idx-1, '2018_norm']

print(y1df)

           perc  2018_norm
    0  0.009069  27.799849
    1  0.011384  28.116322
    2 -0.000592  28.099678
    3 -0.002667  28.024736
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is just <code>cumprod</code></p>
<pre><code>s=(df.perc.shift(-1).fillna(1)+1).cumprod().shift().fillna(1)*df['2018_norm'].iloc[0]
df['2018_norm']=s
df
Out[390]: 
       perc  2018_norm
0  0.009069  27.799849
1  0.011384  28.116322
2 -0.000592  28.099678
3 -0.002667  28.024736
</code></pre>
</div>
<span class="comment-copy">I don't think you can do this without a loop. Your calculation in each row is based on the output of the previous calculation, so you have to do them in sequence rather than as an array operation.</span>
<span class="comment-copy">You're correct, should've clarified that I needed something more streamlined with pandas like iterrows instead of a basic for loop and <code>df.iloc</code></span>
<span class="comment-copy">@ChristophBurschka you do not need for loop here</span>
<span class="comment-copy">Thank you, I knew there had to be something with iterrows I wasn't easily figuring out in the docs.</span>
<span class="comment-copy">No problem. Once you figure out how to use it, it makes pandas a whole lot faster!</span>
<span class="comment-copy">This is a nice answer.</span>
<span class="comment-copy">Yes, thanks for submitting. This is surely because I am newer but the iterrows solution is easier for me to fully understand and ultimately re-use, but you're answer does directly address how I initially posed my question.</span>
