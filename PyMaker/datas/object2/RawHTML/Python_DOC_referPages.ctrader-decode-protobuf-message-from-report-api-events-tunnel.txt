<div class="post-text" itemprop="text">
<p>i am dealing with cTrader Trading platform.
My project is written in python 3 on tornado. </p>
<p>And have issue in decoding the prtobuf message from report API Events.</p>
<p>Below will list everything what i achieved and where have the problem.</p>
<ol>
<li>First cTrader have Rest API for Report

<ul>
<li>so i got the .proto file and generated it for python 3</li>
<li>proto file is called : cTraderReportingMessages5_9_pb2</li>
<li>from rest Report API getting the protobuf message and able to decode in the following way because i know which descriptor to pass for decoding</li>
</ul></li>
</ol>
<pre><code>    from models import cTraderReportingMessages5_9_pb2
    from protobuf_to_dict import protobuf_to_dict

    raw_response = yield async_client.fetch(base_url, method=method, body=form_data, headers=headers)
    decoded_response = cTraderReportingMessages5_9_pb2._reflection.ParseMessage(descriptors[endpoint]['decode'], raw_response.body)
</code></pre>
<p>descriptors[endpoint]['decode'] = is my descriptor know exactly which descriptor to pass to decode my message</p>
<p>my content from cTraderReportingMessages5_9_pb2</p>
<pre><code># here is .proto file generated for python 3 is too big cant paste content here

https://ufile.io/2p2d6
</code></pre>
<p><strong>So until here using rest api and know exactly which descriptor to pass, i am  able to decode protobuf message and go forward.</strong></p>
<p><strong>2. Now the issue i face</strong></p>
<p>Connecting with python 3 to the tunnel on 127.0.0.:5672</p>
<p>i am listening for events and receiving this kind of data back</p>
<pre><code>b'\x08\x00\x12\x88\x01\x08\xda\xc9\x06\x10\xb6\xc9\x03\x18\xa1\x8b\xb8\x01 \x00*\x00:\x00B\x00J\x00R\x00Z\x00b\x00j\x00r\x00z\x00\x80\x01\xe9\x9b\x8c\xb5\x99-\x90\x01d\x98\x01\xea\x9b\x8c\xb5\x99-\xa2\x01\x00\xaa\x01\x00\xb0\x01\x00\xb8\x01\x01\xc0\x0
1\x00\xd1\x01\x00\x00\x00\x00\x00\x00\x00\x00\xd9\x01\x00\x00\x00\x00\x00\x00\x00\x00\xe1\x01\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01\x00\xf0\x01\x01\xf8\x01\x00\x80\x02\x00\x88\x02\x00\x90\x02\x00\x98\x02\x00\xa8\x02\x00\xb0\x02\x00\xb8\x02\x90N\xc0\x02\x00\xc8\x0
2\x00
</code></pre>
<p>as recommendation i got, i need to use same .proto file generated for python that i did in step 1 and decode the message but without any success because i don't know the descriptor need to be passed.</p>
<p><strong>so in 1 step was doing and working perfect this way</strong> </p>
<pre><code>decoded_response = cTraderReportingMessages5_9_pb2._reflection.ParseMessage(descriptors[endpoint]['decode'], raw_response.body)
</code></pre>
<p><strong>but in second step can not decode the message using in the same way, what i am missing or how to decode the message using same .proto file?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Finally found a workaround by my self, maybe is a primitive way but only this worked for me.</p>
<p>By the answer got from providers need to use same .proto file for both situations</p>
<p><strong>SOLUTION:</strong></p>
<p><strong>1. Did list with all the descriptors from .proto file</strong></p>
<pre><code>    here is .proto file generated for python 3 is too big cant paste content here

    https://ufile.io/2p2d6

    descriptors = [cTraderReportingMessages5_9_pb2.descriptor_1, cTraderReportingMessages5_9_pb2.descriptor_2]
</code></pre>
<p><strong>2. Loop throw list and pass one by one</strong></p>
<pre><code>for d in descriptors:
    decoded_response = cTraderReportingMessages5_9_pb2._reflection.ParseMessage(d, raw_response.body)
</code></pre>
<p><strong>3. Check if decoded_response is not blank</strong></p>
<pre><code>   if decoded_response:
       # descriptor was found
       # response is decoded
   else:
       # no descriptor
</code></pre>
<p><strong>4. After decoded response we go parse it into dict:</strong></p>
<pre><code>from protobuf_to_dict import protobuf_to_dict

decoded_response_to_dict = protobuf_to_dict(decoded_response)
</code></pre>
<p>This solution that spent weeks on it finally worked.</p>
</div>
<span class="comment-copy">You need to know what message-type you are expecting. If it isn't known, you will have to figure it out, frankly. A good place to start would be something like <a href="https://protogen.marcgravell.com/decode" rel="nofollow noreferrer">protogen.marcgravell.com/decode</a> - give it a binary payload, and it'll describe the data for you. From there, you might be able to figure out which message it is.</span>
<span class="comment-copy">@MarcGravell i added my binary there on the link u gave but nothing happens. By the way i gave to my binary response the schema descriptor that i guess could be but was empty response without error. There is a way somehow to give the entire schema i have and to try to find inside anything possible? Because i want back from where this response is coming and told me have to use same .proto file generated that i attached in question above. Nothing else.</span>
<span class="comment-copy">"but nothing happens." - that's very odd and unexpected; do you literally mean nothing? I've just tested it, and it seems to be working; I'm the author of that tool - if something isn't working, and <b>if</b> your data doesn't contain any privileged / secret / PII etc data, I'd be very interested in investigating if you can share the file with me somehow. But I <b>really do not want</b> any file that contains data with data protection concerns.</span>
<span class="comment-copy">@MarcGravell have good news, by guessing around all descriptors in my proto file finally managed to decode. i would say this is a luck of totally no docs and by guessing around manage to decode. so from what i see the best solution to list all descriptors into list and loop around all and check when response is not blank managed to decode it.</span>
