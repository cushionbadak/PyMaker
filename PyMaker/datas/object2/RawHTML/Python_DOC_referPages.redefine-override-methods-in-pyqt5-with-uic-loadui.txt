<div class="post-text" itemprop="text">
<p>I'm actually developping a small soft using PyQt5 and QtDesigner since few weeks now. I've watched a lot of tutos and looked for many answers on SO but I can't find the one concerning the way to override a QWidget's method using uic.loadUI().</p>
<p>Note that I've simplify as much as I could my testing code to point out precisely where my problem is:</p>
<p>1/ This one does not work, it loads my file.ui correctly but clicking doesn't do anything:</p>
<pre><code>import sys
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QWidget

class Window(QWidget):
    def __init__(self):
        super().__init__() # Or QWidget.__init__(self)
        self.dlg = uic.loadUi("file.ui")
        self.dlg.show()

    def mousePressEvent(self, event):
        print("click !")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Window()
    app.exec_()
</code></pre>
<p>2/ But I've figured out that that one is actually working:</p>
<pre><code>class Window(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        self.setWindowTitle("My window")
        self.show()

    def mousePressEvent(self, event):
        print("click !")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Window()
    app.exec_()
</code></pre>
<p>So as I can see it seems to be because I can't override the event's method. Due to the fact that mousePressEvent is not a method attached to my QWidget subclass <code>self.dlg</code>.</p>
<p>Now that I know why, I'd like to know how can I override the mousePressEvent method and use it. I was wondering about 'loading' the method after overrided it, or calling the QWidget method to redefining it, or simply create my own method to catch any event, but everything I tried completely failed.</p>
<p>Anyhow, thanks in advance for your answers / tips / prayers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that when creating file.ui you are using the Widget template:</p>
<p><a href="https://i.stack.imgur.com/0Di8Y.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/0Di8Y.png"/></a></p>
<p>Then the solution is the following:</p>
<pre><code>import sys
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QWidget

class Window(QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi("file.ui", self)
        self.show()

    def mousePressEvent(self, event):
        print("click !")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Window()
    app.exec_()
</code></pre>
<p><strong>Why did not it work when using</strong> <code>self.dlg = uic.loadUi (" file.ui ")</code><strong>?</strong> Because as you point out the widget created <code>is self.dlg</code> which is still an attribute of the win window that was never shown, in the case of <code>uic.loadUi("file.ui", self)</code> you are pointing out that it does not create a window but that fills the existing window</p>
<h2>Update:</h2>
<p>According to the error you get:</p>
<pre><code>TypeError: ('Wrong base class of toplevel widget', (&lt;class '__main__.Window'&gt;, 'QMainWindow'))
</code></pre>
<p>It allows me to deduce that you have not used a QWidget as a basis, but a QMainWindow, so Window must inherit from QMainWindow:</p>
<pre><code>import sys
from PyQt5 import uic
from PyQt5.QtWidgets import QApplication, QMainWindow

class Window(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi("file.ui", self)
        self.show()

    def mousePressEvent(self, event):
        print("click !")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    win = Window()
    app.exec_()
</code></pre>
</div>
<span class="comment-copy">@Nqsir you could share the .ui file</span>
<span class="comment-copy">@Nqsir see my update</span>
<span class="comment-copy">Indeed, I just noticed when I looked closer at the error... Thank you very much, I am probably unlocked, many thanks !</span>
