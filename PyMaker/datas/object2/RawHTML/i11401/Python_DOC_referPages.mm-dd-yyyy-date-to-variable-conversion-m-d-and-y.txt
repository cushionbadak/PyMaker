<div class="post-text" itemprop="text">
<p>I am struggling to find the best way to convert the date input given by the user as mm/dd/yyyy to 3 variables. I am unable to split this because I receive an error since it is a 'float'.</p>
<pre><code>&gt;&gt;&gt; date=3/2/2016
&gt;&gt;&gt; date.split('/')
Traceback (most recent call last):
  File "&lt;pyshell#152&gt;", line 1, in &lt;module&gt; date.split('/')
AttributeError: 'float' object has no attribute 'split'
</code></pre>
<p>what do I need to add to this to make sure it doesn't evaluate the date with division?</p>
<pre><code>def main():
    date=input("Enter date mm/dd/yyyy: ") 
</code></pre>
<p>I want the input date given as mm/dd/yyyy, and then a way to convert this to 3 variables as m=month d=day y=year</p>
<p>What's the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3.5/library/stdtypes.html#str.split" rel="nofollow noreferrer">str.split</a>:</p>
<pre><code>&gt;&gt;&gt; test_date = "05/12/2016"
&gt;&gt;&gt; month, day, year = test_date.split('/')
&gt;&gt;&gt; print("Month = %s, Day = %s, Year = %s") % (month, day, year)
Month = 05, Day = 12, Year = 2016
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this following piece of code and it works perfectly fine.</p>
<pre><code>&gt;&gt;&gt; date='3/2/2016'
&gt;&gt;&gt; new=date.split('/')
&gt;&gt;&gt; new
['3', '2', '2016']
&gt;&gt;&gt; 
&gt;&gt;&gt; m,d,year=new
&gt;&gt;&gt; m
'3'
&gt;&gt;&gt; d
'2'
&gt;&gt;&gt; year
'2016'
&gt;&gt;&gt; 
</code></pre>
<p>Like Jessica Smith has already pointed it out, date=3/2/2016 evaluates expressions and divides the numbers. It has to be of string string type to be split.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error <em>"'float' object has no attribute 'split'"</em> suggests that <code>type(date) == float</code> in your example that implies that you are trying to run Python 3 code using Python 2 interpreter where <code>input()</code> evaluates its input as a Python expression instead of returning it as a string.</p>
<p>To get the date as a string on Python 2, use <code>raw_input()</code> instead of <code>input()</code>:</p>
<pre><code>date_string = raw_input("Enter date mm/dd/yyyy: ") 
</code></pre>
<p>To make it work on both Python 2 and 3, add at the top of your script:</p>
<pre><code>try: # make input() and raw_input() to be synonyms
    input = raw_input
except NameError: # Python 3
    raw_input = input
</code></pre>
<p>If you need the old Python 2 <code>input()</code> behavior; you could call <code>eval()</code> explicitly.</p>
<p>To validate the input date, you could <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">use <code>datetime.strptime()</code></a> and catch <code>ValueError</code>:</p>
<pre><code>from datetime import datetime

try:
    d = datetime.strptime(date_string, '%m/%d/%Y')
except ValueError:
    print('wrong date string: {!r}'.format(date_string))
</code></pre>
<p><code>.strptime()</code> guarantees that the input date is valid otherwise <code>ValueError</code> is raised. On success, <code>d.year</code>, <code>d.month</code>, <code>d.day</code> work as expected.</p>
<p>Putting it all together (not tested):</p>
<pre><code>#!/usr/bin/env python
from datetime import datetime

try: # make input() and raw_input() to be synonyms
    input = raw_input
except NameError: # Python 3
    raw_input = input

while True: # until a valid date is given
    date_string = raw_input("Enter date mm/dd/yyyy: ") 
    try:
        d = datetime.strptime(date_string, '%m/%d/%Y')
    except ValueError: # invalid date
        print('wrong date string: {!r}'.format(date_string))
    else: # valid date
        break 

# use the datetime object here
print("Year: {date.year}, Month: {date.month}, Day: {date.day}".format(date=d))
</code></pre>
<p>See <a href="https://stackoverflow.com/q/23294658/4279">Asking the user for input until they give a valid response</a>.</p>
<p>You could use <code>.split('/')</code> instead of <code>.strptime()</code> if you must:</p>
<pre><code>month, day, year = map(int, date_string.split('/'))
</code></pre>
<p>It doesn't validate whether the values form a valid date in the Gregorian calendar.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Try:</strong></p>
<pre><code>def main():
    month, day, year = [int(x) for x in raw_input("Enter date mm/dd/yyyy: ").split('/')]
    print "Month: {}\n".format(month), "Day: {}\n".format(day), "Year: {}".format(year)

main()
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>Enter date mm/dd/yyyy: 03/09/1987
Month: 3
Day: 9
Year: 1987
</code></pre>
</div>
<span class="comment-copy">I don't understand your input data or your error message. Please provide a sample.</span>
<span class="comment-copy">&gt;&gt;&gt; date=3/2/2016 &gt;&gt;&gt; date.split('/') Traceback (most recent call last):   File "&lt;pyshell#152&gt;", line 1, in &lt;module&gt;     date.split('/') AttributeError: 'float' object has no attribute 'split' &gt;&gt;&gt;</span>
<span class="comment-copy">i believe it should be  date='3/2/2016'  The problem is that python is doing divides and creating the float 0.000744047619047619 instead of inputting as a string</span>
<span class="comment-copy">def main():     date=input("Enter date mm/dd/yyyy: ")</span>
<span class="comment-copy">You need to learn about <a href="https://docs.python.org/3.4/tutorial/introduction.html#using-python-as-a-calculator" rel="nofollow noreferrer">the differences between the basic data types in Python (notably, strings and numbers)</a>.</span>
<span class="comment-copy">that worked!! thank you</span>
