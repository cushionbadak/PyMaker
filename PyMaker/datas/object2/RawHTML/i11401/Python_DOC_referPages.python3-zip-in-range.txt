<div class="post-text" itemprop="text">
<p>I'm new to Python and I'm trying to zip 2 lists together into 1, which I was already able to do. I've got 2 lists with several things in them, but I'm asking the user to input a number, which should determine the range.
So i've got List1: A1, A2, A3, A4, A5, A6 and List2: B1,B2,B3,B4,B5,B6
I know how to display the 2 complete lists, but what I'm trying to do is, if the user enters number "3", the zip should only display: (A1,B1), (A2,B2), (A3,B3) instead of the whole list. So here's what I tried:</p>
<pre><code>a = ["A1", "A2", "A3", "A4", "A5", "A6"]
b = ["B1", "B2", "B3", "B4", "B5", "B6"]
c = zip(a,b)
number = int(input("please enter number"))
for x in c:
    print(x[:number])
</code></pre>
<p>But this doesn't work. I tried to look it up, but couldn't find anything. I would be glad, if someone could help me out.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can slice the result of <code>zip()</code> with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice"><code>itertools.islice()</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; list(islice(c, number))
[('A1', 'B1'), ('A2', 'B2'), ('A3', 'B3')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need a <code>for</code> loop here - you only need to do the operation you're trying to do once. Also, a generator object returned by <code>zip</code> can't be "subscripted" (accessed using <code>[]</code>), so you need to convert it to a list first using <code>list</code>.</p>
<p>Here's some modified code that works:</p>
<pre><code>a = ["A1", "A2", "A3", "A4", "A5", "A6"]
b = ["B1", "B2", "B3", "B4", "B5", "B6"]
c = list(zip(a,b))
number = int(input("please enter number"))
print(c[:number])
</code></pre>
<p>Example of usage and output:</p>
<pre><code>please enter number 3
[('A1', 'B1'), ('A2', 'B2'), ('A3', 'B3')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When in doubt, use print:</p>
<pre><code>&gt;&gt;&gt; a = ["A1", "A2", "A3", "A4", "A5", "A6"]
&gt;&gt;&gt; b = ["B1", "B2", "B3", "B4", "B5", "B6"]
&gt;&gt;&gt; c = zip(a,b)
&gt;&gt;&gt; number = 3
&gt;&gt;&gt; for x in c:
...  print(x)
... 
('A1', 'B1')
('A2', 'B2')
('A3', 'B3')
('A4', 'B4')
('A5', 'B5')
('A6', 'B6')
</code></pre>
<p>As you can see, <code>x</code> is a pair, so <code>x[:number]</code> would only show the <code>number</code> first items of the pair.</p>
<p>What you actually want to do is show the <code>number</code> first pairs:</p>
<pre><code>&gt;&gt;&gt; c = list(zip(a,b))
&gt;&gt;&gt; print(c[:3])
[('A1', 'B1'), ('A2', 'B2'), ('A3', 'B3')]
</code></pre>
<p>(Note that I used <code>list()</code> on the value returned by <code>zip()</code>, because <code>zip</code> objects as not subscriptable)</p>
<p>If you want to iterate instead of just printing them like this, it's easy:</p>
<pre><code>&gt;&gt;&gt; for x in c[:3]:
...     print(x)
... 
('A1', 'B1')
('A2', 'B2')
('A3', 'B3')
</code></pre>
</div>
<span class="comment-copy">Take a look at the <code>enumerate</code> function and the <code>break</code> keyword - that will get you to where you need to be.  Alternatively, look at <code>itertools.islice</code>.</span>
