<div class="post-text" itemprop="text">
<p>What other approach can I use instead of 'lambda'</p>
<pre><code>def calculate_fees(self):
    return sum(map(lambda x: x.fee, self.bookings.values()))

def calculate_donations(self):
    return sum(map(lambda x: x.donation, self.bookings.values()))

def __str__(self):
    output = 'Event: {0} {1} {2}\n'.format(self.event_id, self.event_date, self.venue) + \
             'Miles: {0}\n'.format(self.miles) + \
             'Max Places: {0}\n'.format(self.max_places) + \
             'Basic Fee: Â£{0}'.format(self.basic_fee)

    if self.bookings:
        output += '\nRunners:\n' + \
                  '\n'.join(map(lambda x: '{0} {1}'.format(x.runner_id, x.club_id), self.bookings.values()))
    return output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first occurence of <code>lambda</code> could be replaced with a <a href="https://docs.python.org/3/glossary.html">generator</a>:</p>
<pre><code>return sum(x.fee for x in self.bookings.values())
</code></pre>
<p>Similar for the second:</p>
<pre><code>return sum(x.donation for x in self.bookings.values())
</code></pre>
<p>The third:</p>
<pre><code>'\n'.join('{0} {1}'.format(x.runner_id, x.club_id) for x in self.bookings.values())
</code></pre>
<p>Since <code>sum</code> and <code>string.join</code> can deal with a generator, you can use the generator expression directly as an argument to these functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a generator:</p>
<pre><code>return sum(x.fee for x in self.bookings.values())
</code></pre>
<p>Generally, generators and comprehensions improve readability, especially if you have to use a <code>lambda</code> to make <code>map</code> or <code>filter</code> work. Moreover, <code>map</code> and <code>lambda</code> don't play well together performance-wise (<a href="https://stackoverflow.com/questions/1247486/python-list-comprehension-vs-map">Python List Comprehension Vs. Map</a>).</p>
</div>
<span class="comment-copy">you forgot the 'in'</span>
<span class="comment-copy">@polku Thx for attention! Updated my answer.</span>
