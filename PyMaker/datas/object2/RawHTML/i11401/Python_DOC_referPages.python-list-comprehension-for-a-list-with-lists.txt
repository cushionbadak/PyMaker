<div class="post-text" itemprop="text">
<p>I am doing string replacement in a file and using the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> writer to write tabs in the output.  Using the csv writer means I need a well formed list to give to the csv writer for output.  I take a line of input that specifies tabs and newlines and place that into a list that the csv writer knows how to write out.</p>
<p>I have the code below that actually does the task needed, what I would like to know is if that code can be further refined using list comprehension on the for loop to break tabs into their own lists and replace the existing item in the list.   Here is the code:</p>
<pre><code>testInput = "\\t//blah/...\\t//blah_blah/...\\n\\t-//blah/...\\t//blah/...\\n\\t//blah/...\\t//blah_blah/...\\n\\t//blah/...\\t//blah/...\\n"

new_lines = [z for z in testInput.split('\\n') if z]

x=-1
if testInput.find("\\t") &gt;= 0:
    for line in new_lines:
        x+=1
        lines = line.split("\\t")
        new_lines[x] = lines
replacement_value = new_lines
</code></pre>
<p>With this code, the for for loop transforms new_lines from this:</p>
<p><img alt="watchWindow" src="https://i.imgur.com/mxcIjn4.png"/></p>
<p>To this:</p>
<p><img alt="NewWatchWindow" src="https://i.imgur.com/dhUu5o9.png"/></p>
<p>Can that for loop be re-written using list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can do it with a list comp inside a list comp like this...</p>
<pre><code>[[s for s in z.split("\\t")] for z in testInput.split('\\n') if z]
</code></pre>
<p>Since I was curious, looks like you can go back the other way like this...</p>
<pre><code>"\\n".join(["\\t".join([a for a in x]) for x in new_lines])+"\\n"
</code></pre>
</div>
<span class="comment-copy">You should really post this to <a href="http://codereview.stackexchange.com">codereview.stackexchange.com</a></span>
<span class="comment-copy">I'm confused. What is this "csv writer" of which you speak? I see none in your code.</span>
<span class="comment-copy">Is there some reason you want a list comprehension?  In your case, the <code>for</code> loop you have will yield better performance re.: your iteration.</span>
<span class="comment-copy">@Daniel: Will it? Typically list comprehensions beat equivalent <code>for</code> loops (not always, but often). The <code>for</code> loop could be sped up using <code>enumerate</code> instead of a manually adjusted index value (<code>for x, line in enumerate(new_lines):</code>), but it would likely go even faster if it created the correct <code>list</code> from the get-go instead of creating a <code>list</code> of lines, then converting all the entries to <code>list</code>s of fields.</span>
<span class="comment-copy">@ShadowRanger Yes; creating the correct <code>list</code> initially would do wonders for performance, here.  I was trying to highlight the fact that list comps aren't a magic elixir for performance in all cases.  I guess the OP could <code>timeit</code> each approach if they really wanted to get technical :)</span>
<span class="comment-copy">Or just for fun, the <code>map</code> and <code>filter</code> approach to push the work to the C level in CPython: <code>from operator import methodcaller</code>, <code>map(methodcaller('split', '\\t'), filter(None, testInput.split('\\n')))</code>; if on Py3 and you need a <code>list</code> of <code>list</code>s, not a generator of <code>list</code>s, wrap the <code>map</code> call in <code>list</code>. :-)</span>
<span class="comment-copy">clutton's answer did exactly what the for loop did so that answer is correct.  I am a bit perplexed at how you debug this though?  With the for loop, I can step through the code and see changes being made.  WIth the list comprehension method, I can set a breakpoint on the line and step, but the only variable you can watch is s in this case.  Is this a common problem with list comprehension or am I just doing it wrong?</span>
