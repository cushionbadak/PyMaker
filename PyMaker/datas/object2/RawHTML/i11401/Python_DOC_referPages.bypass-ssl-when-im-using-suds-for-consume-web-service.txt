<div class="post-text" itemprop="text">
<p>I'm using SUDS for consuming web service. I tried like bellow:</p>
<pre><code>client = Client(wsdl_url)
list_of_methods = [method for method in client.wsdl.services[0].ports[0].methods]
print(list_of_methods)
</code></pre>
<p>I got this error:</p>
<pre><code>urllib.error.URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:645)&gt;
</code></pre>
<p>I saw <a href="https://stackoverflow.com/questions/27835619/ssl-certificate-verify-failed-error">link</a> but it is just solution for python 2.7. How can I bypass SSL with SUDS? Or is there any none python solution (For example add fake certificate in windows OS)?   I'm using python 3(So I have to use urllib instead of urllib2).</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>suds</code> client uses a subclass of <a href="https://bitbucket.org/jurko/suds/src/94664ddd46a61d06862fa8fb6ba7b9e054214f57/suds/transport/__init__.py?at=default&amp;fileviewer=file-view-default#__init__.py-128" rel="noreferrer"><code>suds.transport.Transport</code></a> to process requests.</p>
<p>The default transport used is an instance of <a href="https://bitbucket.org/jurko/suds/src/94664ddd46a61d06862fa8fb6ba7b9e054214f57/suds/transport/https.py?at=default&amp;fileviewer=file-view-default#https.py-27" rel="noreferrer"><code>suds.transport.https.HttpAuthenticated</code></a>, but you can override this when you instantiate the client by passing a <code>transport</code> keyword argument.</p>
<p>The http and https transports are implemented using <code>urllib.request</code> (or <code>urllib2</code> for python2) by creating an urlopener. The list of handlers used to create this urlopener is retrieved by <a href="https://bitbucket.org/jurko/suds/src/94664ddd46a61d06862fa8fb6ba7b9e054214f57/suds/transport/http.py?at=default&amp;fileviewer=file-view-default#http.py-138" rel="noreferrer">calling</a> the <code>u2handlers()</code> method on the transport class. This means that you can create your own transport by subclassing the default and overriding that method to use a <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPSHandler" rel="noreferrer">HTTPSHander</a> with a specific <a href="https://docs.python.org/3/library/ssl.html#context-creation" rel="noreferrer">ssl context</a>, e.g:</p>
<pre><code>from suds.client import Client
from suds.transport.https import HttpAuthenticated
from urllib.request import HTTPSHandler
import ssl

class CustomTransport(HttpAuthenticated):

    def u2handlers(self):

        # use handlers from superclass
        handlers = HttpAuthenticated.u2handlers(self)

        # create custom ssl context, e.g.:
        ctx = ssl.create_default_context(cafile="/path/to/ca-bundle.pem")
        # configure context as needed...
        ctx.check_hostname = False

        # add a https handler using the custom context
        handlers.append(HTTPSHandler(context=ctx))
        return handlers

# instantiate client using this transport
c = Client("https://example.org/service?wsdl", transport=CustomTransport())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code worked for me:</p>
<pre><code>from suds.client import Client
import ssl

if hasattr(ssl, '_create_unverified_context'):
    ssl._create_default_https_context = ssl._create_unverified_context
cli = Client('https://your_lik_to?wsdl')

print(cli)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pypi.python.org/pypi/suds_requests" rel="nofollow">https://pypi.python.org/pypi/suds_requests</a> to leverage the requests library for the transport. This gives you the ability to disable the ssl verification.</p>
<p>Or try my new soap library, it supports it out of the box: <a href="http://docs.python-zeep.org/en/latest/#transport-options" rel="nofollow">http://docs.python-zeep.org/en/latest/#transport-options</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This is what I came up with that seems to work well:</p>
<pre><code>class MyTransport(HttpAuthenticated):

    def u2handlers(self):
        """
        Get a collection of urllib handlers.

        @return: A list of handlers to be installed in the opener.
        @rtype: [Handler,...]

        """
        handlers = []
        context = ssl._create_unverified_context()
        handlers.append(urllib2.HTTPSHandler(context=context))
        return handlers
</code></pre>
<p>Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can add the code below before instantiate your suds client:</p>
<pre><code>import ssl


try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context
</code></pre>
<p>See my own website for details: <a href="https://lucasmarques.me/bypass-ssl/" rel="nofollow noreferrer">https://lucasmarques.me/bypass-ssl/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I use this:</p>
<pre><code>with mock.patch('ssl._create_default_https_context', ssl._create_unverified_context):
    client = Client(url)
</code></pre>
<p>See: <a href="https://bitbucket.org/jurko/suds/issues/78/allow-bypassing-ssl-certificate#comment-39029255" rel="nofollow noreferrer">https://bitbucket.org/jurko/suds/issues/78/allow-bypassing-ssl-certificate#comment-39029255</a></p>
</div>
<span class="comment-copy">What is value of cafile? How can I set it?</span>
<span class="comment-copy">That's just an example of how you may create a context. In this case <code>cafile</code> would be the path to the server's ssl certificate (pem-encoded). You can of course also use <code>ctx = ssl._create_unverified_context()</code> instead like in the answer you linked to skip verification. Or you can <a href="http://superuser.com/questions/97201/how-to-save-a-remote-server-ssl-certificate-locally-as-a-file">save the certificate</a> as pem file so you don't have to disable verification entirely.</span>
<span class="comment-copy">I get an error: Exception: (415, u"Cannot process the message because the content type 'text/xml; charset=utf-8' was not the expected ty pe 'application/soap+xml; charset=utf-8'.") even tho I have headers set to soap</span>
<span class="comment-copy">@TadejVengust - That seems unrelated to this question, you should probably ask a new question. Make sure to include the complete error message and how/where you set the headers.</span>
<span class="comment-copy">@TadejVengust So how are you setting the headers? If you use a custom transport, you should use something like <code>c = Client("https://example.org/service?wsdl", transport=CustomTransport(headers={'Content-Type': 'application/soap+xml; charset=utf-8'}))</code>, that is pass the headers to the <i>Transport</i> constructor, not the <i>Client</i> constructor.</span>
