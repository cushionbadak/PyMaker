<div class="post-text" itemprop="text">
<p>Consider this:</p>
<pre><code>def function1():
   def nestedfunc(param1, **kw):
      logging.info("nested function %s" % kw) #error
   function2(nestedfunc("is called"), string="not default")


def function2(func, string="default"):
   try:
      #doing some setting
      func()
   finally:
      #reset back to setting
</code></pre>
<p>I am getting:</p>
<pre><code>func()
TypeError: 'NoneType' object is not callable
</code></pre>
<p>I am assuming the func() is not passing parameters and it causes the error. </p>
<p>To clarify, the desire result is to be able to call func() with any number of parameters added.</p>
<p>Does anyone know what is the proper way to do it? Any advice would be thankful!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>function2</code> recieves <code>func=None</code> because that's the (default) return value of <code>nestedfunc()</code>, which is called with the parameter <code>"is called"</code>. You could use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a> to 'freeze' some function's arguments:</p>
<pre><code>from functools import partial

def function1():
   def nestedfunc(param1, **kw):
      logging.info("nested function %s" % kw) #error
   function2(partial(nestedfunc, "is called"), string="not default")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>nestedfunc("is called")</code> is the value returned by the function call: <code>None</code>. You should pass <code>nestedfunc</code> to <code>function2</code> <em>without</em> calling it first.</p>
<p>If you want to pass a parameter to <code>nestedfunc</code>, pass it to <code>function2</code> first.</p>
<pre><code>def function1():
   def nestedfunc(param1, **kw):
      logging.info("nested function %s" % kw) #error
   function2(nestedfunc, "is called", string="not default")


def function2(func, funcparam, string="default"):
   try:
      #doing some setting
      func(funcparam)
   finally:
      #reset back to setting
</code></pre>
</div>
<span class="comment-copy">the desire result is to be able to call func() with any number of parameters added.</span>
<span class="comment-copy">Very nice, <code>functool.partial</code> is the right way to go.</span>
<span class="comment-copy">just tried it. Perfect! thanks.</span>
<span class="comment-copy">this is what i did, but my goal is to add the func() with any number of params. not sure if it is possible.</span>
<span class="comment-copy">The other answer does what you want.</span>
