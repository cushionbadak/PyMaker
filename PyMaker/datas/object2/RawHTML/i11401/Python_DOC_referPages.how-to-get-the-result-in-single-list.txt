<div class="post-text" itemprop="text">
<p>I'm creating Fare Estimator on the basis of a Codefight Code challenge.</p>
<p>That can tell you how much your ride will cost before you request it. It works by passing approximated ride distance and ride time through this <strong>formula</strong>:</p>
<p><strong><code>(Cost per minute) * (ride time) + (Cost per mile) * (ride distance)</code></strong></p>
<hr/>
<p><strong>Example</strong></p>
<p><strong>For</strong> </p>
<ul>
<li>ride_time = 30,</li>
<li>ride_distance = 7,</li>
<li>cost_per_minute = [0.2, 0.35, 0.4, 0.45]</li>
<li>cost_per_mile = [1.1, 1.8, 2.3, 3.5], <strong>the output should be</strong></li>
<li><strong>fareEstimator</strong>(ride_time, ride_distance, cost_per_minute,
cost_per_mile) = [13.7, 23.1, 28.1, 38]</li>
</ul>
<p><strong>Where Output must be in a list</strong></p>
<hr/>
<p><strong>Since:</strong> </p>
<ul>
<li>30 * 0.2 + 7 * 1.1 = 6 + 7.7 = 13.7</li>
<li>30 * 0.35 + 7 * 1.8 = 10.5 + 12.6 = 23.1</li>
<li>30 * 0.4 + 7 * 2.3 = 12 + 16.1 = 28.1</li>
<li>30 * 0.45 + 7 * 3.5 = 13.5 + 24.5 = 38</li>
</ul>
<hr/>
<h2>Here is my Code:</h2>
<pre><code>def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):

    for cpm, cpmile in zip(cost_per_minute, cost_per_mile):
        result = round(( ride_time * cpm ) + ( ride_distance * cpmile ), 1)
        print([result])

fareEstimator(30, 7, [0.2, 0.35, 0.4, 0.45], [1.1, 1.8, 2.3, 3.5])
</code></pre>
<h2>Its output</h2>
<pre><code>[13.7]
[23.1]
[28.1]
[38.0]
</code></pre>
<p>I've tried using List Comprehension where I am getting <code>TypeError: 'float' object is not iterable</code></p>
<p>Now please help me to get the result in a single list Like this.</p>
<h2>[13.7, 23.1, 28.1, 38]</h2>
</div>
<div class="post-text" itemprop="text">
<p>Instead of printing, append to a list that you then return:</p>
<pre><code>result = []
for cpm, cpmile in zip(cost_per_minute, cost_per_mile):
    value = round(ride_time * cpm + ride_distance * cpmile, 1)
    result.append(value)
return result
</code></pre>
<p>This is easily converted to a list comprehension; just put the <code>result</code> expression at the front:</p>
<pre><code>return [round(ride_time * cpm + ride_distance * cpmile, 1)
        for cpm, cpmile in zip(cost_per_minute, cost_per_mile)]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):
...     return [round(ride_time * cpm + ride_distance * cpmile, 1)
...             for cpm, cpmile in zip(cost_per_minute, cost_per_mile)]
...
&gt;&gt;&gt; fareEstimator(30, 7, [0.2, 0.35, 0.4, 0.45], [1.1, 1.8, 2.3, 3.5])
[13.7, 23.1, 28.1, 38.0]
</code></pre>
<p>Note that this <em>returns</em> the new list, if you still need to print this result, do so where you called <code>fareEstimator()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is here:</p>
<pre><code>print([result])
</code></pre>
<p>For each result, you create a list containing only the result, and print it.
What you want to do seems to be in the lines of creating an empty list, and add each result to it.</p>
<p>Like this:</p>
<pre><code>def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):
    results = []
    for cpm, cpmile in zip(cost_per_minute, cost_per_mile):
        result = round(( ride_time * cpm ) + ( ride_distance * cpmile ), 1)
        results.append(result)
    print(results)
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">https://docs.python.org/3/tutorial/datastructures.html</a> to know more about the operations you can do on a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need to use list comprehension and return the result from the function:</p>
<pre><code>def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):    
    return [round(( ride_time * cpm ) + ( ride_distance * cpmile ), 1) 
            for cpm, cpmile in zip(cost_per_minute, cost_per_mile)]

&gt;&gt;&gt; fareEstimator(30, 7, [0.2, 0.35, 0.4, 0.45], [1.1, 1.8, 2.3, 3.5])
[13.7, 23.1, 28.1, 38.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simplest (editing-wise) approach is to just replace the <code>print([result])</code> with <code>yield result</code> and your <code>fareEstimator</code> would become <a href="https://wiki.python.org/moin/Generators" rel="nofollow">a generator</a> function.</p>
<p>If you need a list (e.g. for indexed access) and not just some iterable, call it like this:</p>
<pre><code>print(list(fareEstimator(...)))
</code></pre>
<p>Or, if you know always need a list you may also do it like this:</p>
<pre><code>def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):
    result = []
    for cpm, cpmile in zip(cost_per_minute, cost_per_mile):
        value = round((ride_time * cpm) + (ride_distance * cpmile), 1)
        result.append(value)
    return result
</code></pre>
<p>Or, better, the same written as a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):
    return [round((ride_time * cpm) + (ride_distance * cpmile), 1)
            for cpm, cpmile in zip(cost_per_minute, cost_per_mile)]
</code></pre>
<p>And</p>
<pre><code>print(fareEstimator(...))
</code></pre>
<p>Would print that list.</p>
</div>
<span class="comment-copy">â™¦ It is working well thank you :)</span>
<span class="comment-copy">But Output must be [13.7, 23.1, 28.1, 38] not [13.7, 23.1, 28.1, 38.0]</span>
<span class="comment-copy">Why would that be? Rounding produces floats, always. Creating an integer just because the decimal portion is 0 does not make much sense and would be inconsistent.</span>
<span class="comment-copy">Yes I know but codefight console is not  submitting my code..</span>
<span class="comment-copy">the behavior of codefight might be because it's a javascript or similar thing</span>
<span class="comment-copy">can you please suggest me some good sites where I can find more coding challenges to make my programming concepts more clear..</span>
<span class="comment-copy">Op seems to be learning how to use lists; not sure introducing generators right away is a good idea.</span>
<span class="comment-copy">@ValentinLorentz yes, you're right. That wast just what came to my mind as a simplest change - editing-wise (least edits necessary). A list comprehension is probably the best choice for OP - it returns a familiar <code>list</code>, and it's extremely widely used in Python and certainly worth learning about.</span>
