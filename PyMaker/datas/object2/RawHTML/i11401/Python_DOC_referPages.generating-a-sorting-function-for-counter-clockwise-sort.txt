<div class="post-text" itemprop="text">
<p>As part of a script I am making, I want to sort a series of points in a counter-clockwise order around a central point, which we will call 'a'.</p>
<p>I have a function that determines, for two points 'b' and 'c', if c is to the right of or left of the ray a-&gt;b. This function is right_of(a, b, c), and it is tested and works.</p>
<p>I want to use this function to sort a list of tuples with 2-d coordinates e.g. [(0, 0), (0, 1), (1, 1),...]. However, each time I sort, there will be a different point 'a' to pass to the function right_of(). What I want is a 'function' returnSortFunction(a) that will return a function with two arguments, f(b, c),  and and when f(b, c) is called on each pair of coordinates as I sort, it should return the result of right_of(a, b, c) with 'a' already filled in.</p>
<p>I have tried to implement this using a factory, but I don't think I understand factories well enough to do it correctly, or determine if that is not what a factory is for. How can I build this feature?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can have a function return a function, no problem. A simple way to do it is something like</p>
<pre><code>def returnSortFunction(a):
    return lambda b,c: right_of(a,b,c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need a wrapper function around your right_of function.  You could use a lambda, but I think your logic is going to be more complicated than that.  Assuming you want to pass in a function as a comparator to your sorting method, it's going to look something like this:</p>
<pre><code>def returnSortFunction(a):
    def comparator(p1, p2, a = a):
        if p1 == p2:
            return 0
        elif right_of(a, p1, p2):
            return 1
        else:
            return -1
    return comparator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Functions are first class objects in python, so you can do something like this:</p>
<pre><code>def prepare_funcs(number):
    def inc(a):
        return number + a
    def mult(a):
        return number * a
    return inc, mult

inc5, mult5 = prepare_funcs(5)
inc2, mult2 = prepare_funcs(2)

inc5(2) #Out: 7
mult2(10) #Out: 20
</code></pre>
<p>For your specific context you should also check out <a href="https://docs.python.org/2/library/functools.html" rel="nofollow">functools</a> module, specifically partial function. With it, you can 'partially' prepare arguments to your function like this:</p>
<pre><code>right_of_5 = functools(right_of, 5)
right_of_5(b, c)
</code></pre>
<p>That will work, because right_of_5 will automatically fill right_of first argument - a - with number 5.</p>
</div>
<span class="comment-copy"><code>def returnSortFunction(a): return</code> <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a><code>(right_of,a)</code>  That is what you seem to be asking for but I don't think it will solve your problem, maybe include the code you are working with and show the input / output and desired output.</span>
<span class="comment-copy">Nope that is exactly what I am looking for. Thank you for the fast answer.</span>
