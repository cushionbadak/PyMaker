<div class="post-text" itemprop="text">
<p>I want to time a bunch of statements. For example:</p>
<pre><code>s = """\
for i in range (0,3):
    for j in range (0,4):
        if alpha_beta[i,j] == 0 and vect2[i] != 0.0 and alpha[j] == 1 :
            print(i,j)
            alpha_beta[i,j] = vect2[i]
"""
timeit.timeit(stmt=s, number=100)
</code></pre>
<p>But it throws error: <code>name 'alpha_beta' is not defined</code>. </p>
<p>Variables <code>alpha_beta</code>, <code>vect2</code> and <code>alpha</code> are defined earlier. I cannot include those in the timer, because that will include their initialization overheads too. </p>
<p>I am new to Python and an answer modifying my code will be highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could import them in <code>setup</code>:</p>
<pre><code>timeit.timeit(stmt=s, setup='from __main__ import alpha_beta, vect2, alpha', number=100)
</code></pre>
<p>Starting from Python 3.5 <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow"><code>timeit.timeit</code></a> may also execute code in the provided <code>globals</code> namespace. Setting it to <code>globals()</code> will enable <code>stmt</code> to access names from your module's namespace:</p>
<pre><code>timeit.timeit(stmt=s, number=100, globals=globals())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One solution is to provide a function rather than a string. This way your code can easily access the globals in the context it was created.</p>
<p>That is, your code would become:</p>
<pre><code>def f():
    for i in range (0,3):
        for j in range (0,4):
            if alpha_beta[i,j] == 0 and vect2[i] != 0.0 and alpha[j] == 1 :
                print(i,j)
                alpha_beta[i,j] = vect2[i]   

timeit.timeit(stmt=f, number=100)
</code></pre>
</div>
