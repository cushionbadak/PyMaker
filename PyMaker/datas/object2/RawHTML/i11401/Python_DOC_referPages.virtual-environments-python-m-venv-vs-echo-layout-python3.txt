<div class="post-text" itemprop="text">
<p>I'm fairly new to python, but have built a few small projects. I have been taught, and have always used, the following commands to start a virtual environment: <code>echo layout python3 &gt; .envrc</code> and then <code>direnv allow</code>.</p>
<p>What are the differences or advantages to using <code>python -m venv &lt;virtualenv name&gt;</code> versus <code>echo layout</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Those two commands do entirely different things.</p>
<h1><code>venv</code></h1>
<p>The <code>python -m venv &lt;env_name&gt;</code> command <a href="https://docs.python.org/3/library/venv.html#creating-virtual-environments" rel="nofollow noreferrer"><em>creates</em> a virtual environment</a> as a subdirectory full of files in your filesystem.  When it's done, a new virtual environment is sitting there ready for you to activate and use, but this command doesn't actually <em>activate</em> it yet.</p>
<p>Activating the virtual environment so you can <em>use</em> it is a separate step.  The command to do this depends on which operating system and which shell you're using (see the "Command to activate virtual environment" table in the docs linked above).</p>
<p>The activation command alters only your <em>current</em> command-line shell session.  This is why you have to re-activate the virtual environment in every shell session you start.  This kind of annoyance is also what <code>direnv</code> exists to solve.</p>
<h1><code>direnv</code> and <code>.envrc</code></h1>
<h2>First, about that <code>echo</code> command...</h2>
<p>In both MS-DOS and Unix / Linux (and presumably recent versions of Macintosh), <code>echo layout python3</code> just emits a string <code>"layout python3"</code>.</p>
<p>The <code>&gt;</code> redirects the <code>echo</code> command's output to a file, in this case <code>.envrc</code>.  The redirection creates the file if it doesn't already exist, and then replaces its contents (if any) with that string.  The end result is a file in your current working directory containing just:</p>
<pre><code>layout python3
</code></pre>
<h2>The <code>.envrc</code> file, and <code>direnv allow</code></h2>
<p><code>.envrc</code> is a config file used by the <code>direnv</code> application.  Whenever you <code>cd</code> into a directory containing a <code>.envrc</code> file, <code>direnv</code> reads it and executes the <code>direnv</code> instructions found inside.</p>
<p><code>direnv allow</code> is a security feature.  Since malicious <code>.envrc</code> files could be hidden almost anywhere (especially in world-writable directories like <code>/var/tmp/</code>), you could <code>cd</code> into a seemingly innocent directory and get a nasty surprise from someone else's <code>.envrc</code> land mine.  The <code>allow</code> command specifically white-lists a directory's <code>.envrc</code> file, and apparently un-lists it if it discovers the <code>.envrc</code> file has changed since it was <code>allow</code>ed.</p>
<h2>Finally, back to <code>direnv</code></h2>
<p>I don't use <code>direnv</code>, but <a href="http://direnv.readthedocs.io/en/latest/commands/direnv-stdlib/#layout-type" rel="nofollow noreferrer"><code>layout &lt;language&gt;</code></a> is a <code>direnv</code> command to adjust your environment for developing in <em>language</em>, in this case activating a Python 3 virtual environment.  The docs hint that it's more "helpful" than just that, but they don't go into any detail.  (Also, you could have written your own <code>direnv</code> function called <code>python3</code> that does something completely different.)</p>
<p>The goal of all that is to automatically enable your Python virtual environment as soon as you <code>cd</code> into its directory.  This eliminates one kind of human error, namely forgetting to enable the virtual environment.  For details, see Richard North's "<a href="https://rnorth.org/practical-direnv" rel="nofollow noreferrer">Practical <code>direnv</code></a>", especially the "<a href="https://rnorth.org/practical-direnv#automatic-python-virtualenv-switching" rel="nofollow noreferrer">Automatic Python <code>virtualenv</code> switching</a> section.</p>
<h1>(Dis-)Advantages and Opinions</h1>
<p>If that's the kind of mistake you've made frequently, <em>and</em> you trust that the <code>direnv</code> command will never fall prey to a malicious <code>.envrc</code> file (or otherwise "helpfully" mess up something you're working on), then it might be worth it to you.</p>
<p>The biggest down-side I see to <code>direnv</code> (aside from the security implications) is that <strong>it trains you to forget about a vital step</strong> in using Python virtual environments... namely, actually <em>using</em> the virtual environment.  This goes double for any other "help" it silently provides without telling you.  (The fact that I keep putting "help" in quotes should suggest what I think of utilities like this.)</p>
<p>If you ever find yourself working somewhere <code>direnv</code> isn't installed, the odds are good that you'll forget to activate your virtual environments, or forget whatever else <code>direnv</code> has been doing for you.  And the odds are even better that you'll have forgotten <em>how</em> to do it.</p>
</div>
<span class="comment-copy">What an awesome answer. Thanks Kevin. Given your opinion on "helpful" utilities like <code>direnv</code>, do you recommend sticking to using python's stdlib venv? Do you see any advantages to possibly using <code>virtualenv</code>? From my reading/research, I don't see very many other options for virtual environments, other than python's venv, direnv, and virtualenv.</span>
<span class="comment-copy">@JuanathanCruz: I don't get to use more recent versions of Python very much, so I haven't been able to use the new <code>venv</code>.  It seems <i>very</i> similar to the older <code>virtualenv</code> (many command-line options are identical), although I don't know whether the Python standard library adopted and renamed <code>virtualenv</code> or just mostly-copied it.  I would only recommend switching to the older <code>virtualenv</code> if it solved some problem that you can't work around with the <code>venv</code> you're already using.</span>
