<div class="post-text" itemprop="text">
<p>I have a function that creates all combinations of list items, representing this as a list of lists:</p>
<pre><code>def makeCombos(arr):
  yield (sum([map(list, combinations(arr, i)) for i in range(len(arr) + 1)], []))
</code></pre>
<p>Calling <code>makeCombos([1,2,3,4,5])</code> gives me a generator object, but calling <code>.next()</code> does not give me one combo at a time, it gives me the entire list of combos.</p>
<p>How can I turn this into a generator function that I can call?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sum(iterable, [])</code> doesn't create a list of lists. It actually flattens things.</p>
<p><code>yield (sum(...))</code> in this line you're just yielding a single item, the flattened list of all combinations.</p>
<p>For Python 2.X <code>sum([(map(list, combinations(arr, i))) ...])</code> will work, but in Python 3.X <code>map</code> no longer returns a list. Instead it returns a map object. So, if anyones on Python 3.X simply turn this into <code>list(map(.....))</code> for this to run on 3.X.</p>
<p>I think what you actually want is something like this:</p>
<pre><code>from itertools import combinations
def makeCombos(arr):
     for i in range(len(arr) + 1):
         for combo in map(list, combinations(arr, i)):
            yield combo

#Or call next 

combos = makeCombos([1, 2, 3, 4, 5])
for combo in combos:
     print combo
</code></pre>
<p>An alternative from the comment(s) for a one-liner:</p>
<p>Instead of yielding we can <em>return</em> a generator object and cycle through just as we would with the <code>yield</code>.</p>
<p>e.g. -</p>
<pre><code>from itertools import combinations

def makeCombos(arr):

     return (combo for i in range(len(arr) + 1) for combo in map(list, combinations(arr, i)))

combos = makeCombos([1, 2, 3, 4, 5])
....
</code></pre>
<p>As for this being "Pythonic" I wouldn't really say so. I actually prefer the nested forloop it is by far more readable.</p>
<p>Although, we can still try to clean it up some more / compact it by doing a few "tricks"</p>
<pre><code>from itertools import combinations as cs #or some other name)

def makeCombos(arr):

    return (c for i in range(len(arr) + 1) for c in map(list, cs(arr, i)))
</code></pre>
<p>But, now you've lost all readability and this looks like something you'd see in <em>Perl</em>. (the horror!)</p>
<p>Output:</p>
<pre><code>[]
[1]
[2]
[3]
[4]
[5]
[1, 2]
[1, 3]
[1, 4]
[1, 5]
[2, 3]
[2, 4]
[2, 5]
[3, 4]
[3, 5]
[4, 5]
[1, 2, 3]
[1, 2, 4]
[1, 2, 5]
[1, 3, 4]
[1, 3, 5]
[1, 4, 5]
[2, 3, 4]
[2, 3, 5]
[2, 4, 5]
[3, 4, 5]
[1, 2, 3, 4]
[1, 2, 3, 5]
[1, 2, 4, 5]
[1, 3, 4, 5]
[2, 3, 4, 5]
[1, 2, 3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools</code> already has a method for joining iterables together: it's called <code>chain</code>.  What you want is something like the following:</p>
<pre><code>def makeCombos(arr):
    return chain.from_iterable(combinations(arr, i) for i in range(len(arr) + 1))
</code></pre>
<p>Simple, short, and fairly Pythonic in my opinion.</p>
</div>
<span class="comment-copy">so you want the power set of <code>arr</code>?, there is a recipe for that in <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipes</a></span>
<span class="comment-copy">With a name like Pythonista, how can I argue. Haha. One question: Is there a more "pythonic", "one-line" way of stating that nested for loop?</span>
<span class="comment-copy">See the edit :)</span>
<span class="comment-copy"><code>def makeCombos(arr): return (combo for i in range(len(arr) + 1) for combo in map(list, combinations(arr, i)))</code>. Yes, <code>return</code>. I.e., turn the double comprehension directly into a generator.</span>
<span class="comment-copy">@alexis isn't this what I have? Not following.</span>
<span class="comment-copy">Ah, nevermind missed a parenthesis !</span>
<span class="comment-copy">instead of creating a list, better use <code>chain.from_iterable</code></span>
<span class="comment-copy">@Copperfield Thanks, I'll edit the answer.</span>
<span class="comment-copy">@Atsch I believe the question was asking for combinations, not permutations.  I don't see how permutations would help here</span>
