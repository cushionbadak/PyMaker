<div class="post-text" itemprop="text">
<p>Are functions passed parameters enclosed in parentheses because they are handled as tuples, or just a result of f(x) convention?</p>
<p>i.e. is (b, a, r) a tuple here:</p>
<pre><code>def foo(b, a, r):
    pass
</code></pre>
<p>Or, is it something more like the way parentheses are used in math equations, e.g.</p>
<pre><code>&gt;&gt;&gt; 3 * 2 + 1
7
&gt;&gt;&gt; 3 * (2 + 1)
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can answer this by looking at the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">Python Grammar.</a></p>
<p>The relevant lines are:</p>
<pre><code>funcdef: 'def' NAME parameters ['-&gt;' test] ':' suite
parameters: '(' [typedargslist] ')'
</code></pre>
<p>So in your example, the grammar would say that <code>(b, a, r)</code> is a <code>typedargslist</code> surrounded by brackets.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't see those as tuples. Tuples don't take <code>keyword=value</code> arguments, for example, but the call syntax <em>does</em>.</p>
<p>Tuples are not formed by parentheses <em>anyway</em>, they are formed by <strong>commas</strong>, and you only have to use parentheses around a tuple when disambiguating a tuple from other uses of commas in Python. Like in a function call, where commas separate positional arguments.</p>
<p>The Python grammar defines both the parentheses and commas in a call as <a href="https://docs.python.org/2/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="nofollow">part of the call expression syntax</a>:</p>
<blockquote>
<pre><code>call                 ::=  primary "(" [argument_list [","]
                          | expression genexpr_for] ")"
</code></pre>
</blockquote>
<p>while elsewhere tuples are defined as being formed by commas. See <a href="https://docs.python.org/2/reference/expressions.html#expression-lists" rel="nofollow"><em>expression lists</em></a>:</p>
<blockquote>
<pre><code>expression_list ::=  expression ( "," expression )* [","]
</code></pre>
<p>An expression list containing at least one comma yields a tuple. The length of the tuple is the number of expressions in the list.</p>
</blockquote>
<p>Note that only the <code>","</code> commas are part of the literal syntax, the <code>(...)</code> parentheses here are part of the syntax defining the grammar.</p>
<p>The other use of parentheses (grouping expressions) is defined in <a href="https://docs.python.org/2/reference/expressions.html#parenthesized-forms" rel="nofollow"><em>parethezised forms</em></a>:</p>
<blockquote>
<p>A parenthesized form is an optional expression list enclosed in parentheses, note again the literal <code>"("</code> and <code>")"</code> characters:</p>
<pre><code>parenth_form ::=  "(" [expression_list] ")"
</code></pre>
<p>A parenthesized expression list yields whatever that expression list yields: if the list contains at least one comma, it yields a tuple; otherwise, it yields the single expression that makes up the expression list.</p>
</blockquote>
<p>There are a few more places in the Python grammar where parentheses are used, see the <a href="https://docs.python.org/2/reference/grammar.html" rel="nofollow">full grammar specification</a>; these usually echo either the call syntax (e.g. <a href="https://docs.python.org/2/reference/compound_stmts.html#function-definitions" rel="nofollow">function</a> and <a href="https://docs.python.org/2/reference/compound_stmts.html#class-definitions" rel="nofollow">class</a> definitions, decorators) or the parenthesised form (grouping imported names, for example), plus <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">generator expressions</a>.</p>
</div>
<span class="comment-copy">Those parenthesis are part of a specific syntax for function definitions and function calls. They are not tuples, nor normal parenthesis.</span>
<span class="comment-copy">How is this unclear question? Good explanation with examples, no need to downvote him.</span>
<span class="comment-copy">@MarkusMeskanen: this is easily researched however. I don't see any research references; the <a href="https://docs.python.org/2/reference" rel="nofollow noreferrer">Python reference documentation</a> is very well written, and the answer lies within that documentation. There's the <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="nofollow noreferrer">call expression section</a>, or the <a href="https://docs.python.org/2/reference/expressions.html#parenthesized-forms" rel="nofollow noreferrer">parenthesized forms</a> or <a href="https://docs.python.org/2/reference/expressions.html#expression-lists" rel="nofollow noreferrer">expression list</a> sections. Or read up about tuples on Stack Overflow.</span>
<span class="comment-copy">@MartijnPieters Good point, that is true and justifies the downvotes. Still, an instant -3 score with no explanation (until yours now) isn't really helping anyone. Someone also voted to close as "unclear what you're asking", so I thought the downvote(s) were for that too.</span>
<span class="comment-copy">@MarkusMeskanen: I can't speak for anyone who voted to close, nor why anyone might have voted; it was mere speculation on my part as to what the question is lacking in my eyes.</span>
