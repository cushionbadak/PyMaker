<div class="post-text" itemprop="text">
<p>First time posting here. Teaching myself python and was curios on how to solve the following problem using recursion. 
We have a company where every employee has a max of 7 reports. Given depth x of the organization, find the max number of employees including the CEO. This is basically finding the number of max nodes of a binary tree, except instead of base 2 we have base 7. </p>
<p>I was able to solve it linearly using the formula (b**(d+1))/(b-1) where b is the base and d is the depth of the tree.</p>
<pre><code>def MaxNodes(d):
minions = ((7**(d+1)) - 1) / 6
return minions
</code></pre>
<p>I also solved it iteratively:</p>
<pre><code>def answer(x):
    minions = 1
    for levels in range(x):
        if (levels == 0):
            minions = 7
        else:
            minions += (minions * 7)
    return minions + 1
</code></pre>
<p>So we pretty much have value 1 in level 0, and starting from level 1, we start with value 7 and keep multiplying by 7 and adding to the previous result:
1 + (7x1) + (7x7) + (49x7) ...
Sorry if this is very straight forward but I can't wrap my head around how to solve this recursively.</p>
<p>Thanks in advance for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple recursive implementation:</p>
<pre><code>def nodes(d):
    if d == 0:
        return 1
    else:
        return 1 + 7 * nodes(d - 1)

print [nodes(i) for i in range(5)] # [1, 8, 57, 400, 2801]
</code></pre>
<p>Depth is passed as parameter and when it reaches 0 function returns 1 thus stopping the recursion. Otherwise the function will call itself in order to get the number on lower level, multiply the result with 7 and add current level to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you want to find <code>7**x</code> recursively:</p>
<pre><code>def max_siblings(depth, degree=7, total=1):
    """How many siblings maximum at the given *depth*."""
    return max_siblings(depth-1, degree, total*degree) if depth else total
</code></pre>
<p>If you want to find <code>((7**(depth+1)) - 1) // 6</code> recursively:</p>
<pre><code>def max_nodes(depth, degree=7, total=1):
    return max_nodes(depth-1, degree, total+max_siblings(depth)) if depth else total
</code></pre>
<p>Example:</p>
<pre><code>for depth in range(5): 
    print(max_nodes(depth))
</code></pre>
<p>Output:</p>
<pre><code>1
8
57
400
2801
</code></pre>
<p>You could cache <code>max_siblings()</code> computations using <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow"><code>@lru_cache(maxsize=None)</code> decorator</a></p>
</div>
<span class="comment-copy"><code>MaxNodes</code> and <code>answer</code> do not do the same thing...</span>
<span class="comment-copy">Untested and not recursive: <code>sum([7**i for i in range(depth)])</code></span>
<span class="comment-copy">@KlausD. the question already has the exact formula: <code>((7**(depth+1)) - 1) // 6</code> and you don't need <code>[]</code> inside <code>sum()</code>.</span>
<span class="comment-copy">You are right @TadhgMcDonald-Jensen, on second look I am not sure why i put an addition there, Should just keep multiplying by 7. Thanks for pointing that out.</span>
<span class="comment-copy">Thanks! now that I see it it makes sense. Looks like I need a lot of practice.</span>
<span class="comment-copy">Is there a reason to pass the <code>total</code> value up the call tree, rather than doing the math on the return values? E.g. <code>def max_siblings(depth, degree=7): return max_siblings(depth-1, degree) * degree if depth else 1</code> and <code>def max_nodes(depth, degree=7): return max_nodes(depth-1, degree) + max_siblings(depth) if depth else 1)</code>? Cpython at least doesn't do any tail-call elimination.</span>
<span class="comment-copy">@Blckknght: <a href="http://stackoverflow.com/questions/13274207/python3-recursivley-sum-digits-of-an-integer/13274806#comment18103138_13274806">this is the reason</a>. Related <a href="http://stackoverflow.com/questions/17127355/python-recursive-function-that-prints-from-0-to-n/17127379#comment24784883_17127379">discussion</a>. Here's <a href="https://github.com/lihaoyi/macropy#tail-call-optimization" rel="nofollow noreferrer">TCO decorator</a>.</span>
<span class="comment-copy">I like using defaults to shorten the implementation. Thanks!</span>
