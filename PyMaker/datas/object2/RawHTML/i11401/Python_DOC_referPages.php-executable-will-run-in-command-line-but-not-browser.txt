<div class="post-text" itemprop="text">
<p>So using 'php index.php' gives me the output I want in the command line. But will not give the output on the webpage. 
So first of all I have this python file which basically does everything I want:</p>
<pre><code>import subprocess

subprocess.call("sudo nmap -sP 192.168.1.0/24 &gt; /home/pi/whohome.txt", shell=True)

searchfile = open("/home/pi/whohome.txt", "r")
for line in searchfile:
    if "android-5ab6eb374b5fd6" in line: print "Jeremy is home (phone)"
    if "Jeremys-MBP" in line: print "Jeremy is home (computer)"
    if "LMCMs-iPhone" in line: print "Liam is home (phone)"
    if "Liam" in line: print "Liam is home (computer)"
    if "android-4a186cbbeb2c5229" in line: print "Lara is home (phone)"
    if "LaraD" in line: print "Lara is home (computer)"
    if "KristiansiPhone" in line: print "Martin is home (phone)"
    if "Martins-MBP" in line: print "Martin is home (computer)"

searchfile.close()
</code></pre>
<p>Secondly I just have a sh executable that will put the output of this python command into another text file: </p>
<pre><code>python /home/pi/myRoomMates.py &gt; /var/www/html/website.txt
</code></pre>
<p>I then have the php file on an apache web server running on the raspberry pi, it reads:</p>
<pre><code>&lt;?php
shell_exec('/home/pi/whoishome.sh');

echo file_get_contents ("/var/www/html/website.txt");

?&gt;
</code></pre>
<p>So if I'm not wrong, each time the page is refreshed it should execute that, wait for the exec to finish, then display the txt file contents? I have tried both shell_exec and just exec, they both do the same..</p>
</div>
<div class="post-text" itemprop="text">
<p>There are many rights, you have to ensure:</p>
<ol>
<li>the apache user has to be in the sudoers group</li>
<li>the apache user must write to <code>/home/pi/whohome.txt</code></li>
<li>the apache user must write to <code>/var/www/html/website.txt</code></li>
<li><code>/home/pi/whoishome.sh</code>must be executable for the apache user</li>
</ol>
<p>For point 1 to 3, it is normally not a good idea, to give the apache users these rights.</p>
<p>You can make it easier if you start your python script as CGI:</p>
<pre><code>import subprocess

ADDRESS = "192.168.1.0/24"

USERS = {
    "android-5ab6eb374b5fd6": ("Jeremy", "phone"),
    "Jeremys-MBP": ("Jeremy", "computer"),
    "LMCMs-iPhone": ("Liam", "phone"),
    "Liam": ("Liam", "computer"),
    "android-4a186cbbeb2c5229": ("Lara", "phone"),
    "LaraD": ("Lara", "computer"),
    "KristiansiPhone": ("Martin", "phone"),
    "Martins-MBP": ("Martin", "computer"),
}


nmap = subprocess.Popen(["sudo", "nmap", "-sP", ADDRESS], stdout=subprocess.PIPE)
for line in nmap.stdout:
    for user, name in USERS.items():
        if user in line:
            print "%s is home(%s)" % name
nmap.wait()
</code></pre>
<p>The only point 1 and 4 must be fullfilled.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suspect your problem is the <code>sudo</code> part of the <code>nmap</code> command line.  If you replace the <code>subprocess.call</code> with <a href="http://docs.python.org/4/library/subprocess.html#subprocess.check_call" rel="nofollow"><code>subprocess.check_call</code></a>, I think you will find that command raises a <a href="http://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow"><code>CalledProcessError</code></a>.</p>
<p>Presumably, your user account is in the <code>/etc/sudoers</code> file, but the Web server is not.</p>
<p>Since the first thing the shell's output redirect operator (<code>&gt;</code>) does is truncate the output file, that failed attempt to run <code>nmap</code> results in a zero-byte <code>whohome.txt</code>.  The rest of the Python script then does the same to <code>website.txt</code>, and you end up with nothing to display on your Web site.</p>
<h1>Solutions</h1>
<h2>No <code>sudo</code> required.</h2>
<p>On my Linux desktop, <strong>I do <em>not</em> need to run <code>nmap</code> as root</strong> to do a local ping scan.  If that's true on your system, then you should be able to just drop the <code>sudo</code> part of your <code>nmap</code> command, and be done with it.</p>
<p>There <em>is</em> a difference, though.  <code>nmap</code> will perform a more thorough testing of each target when the <code>-pS</code> ping sweep is run by <code>root</code>.  From an old <code>nmap</code> man page (emphasis added):</p>
<blockquote>
<p><strong><code>-sP</code> (Skip port scan) .</strong></p>
<p>[...]</p>
<p>The <code>-sP</code> option sends an ICMP echo request, TCP SYN to port 443, TCP ACK to port 80, and an ICMP timestamp request by default.  <strong>When executed by an unprivileged user</strong>, only SYN packets are sent (using a connect call) to ports 80 and 443 on the target.  <strong>When a privileged user</strong> tries to scan targets <strong>on a local ethernet</strong> network, ARP requests are used unless <code>--send-ip</code> was specified.  [...]</p>
</blockquote>
<h2>Enable <code>sudo</code> for your Web server.</h2>
<p>If you need this extra information (and it sounds like you do), you'd need to run <code>nmap</code> (or the Python script that calls it) with super-user privileges.  I've never tried to force a Web server to do this, but I assume you would at least have to add your Web server's user to <code>/etc/sudoers</code>.  Something like:</p>
<pre class="lang-sudoers prettyprint-override"><code>apache    localhost=/usr/bin/nmap -sP
</code></pre>
<p>or:</p>
<pre class="lang-sudoers prettyprint-override"><code>httpd    ALL=/usr/local/bin/nmap
</code></pre>
<p>...and so on, depending on the user name, where your <code>nmap</code> is located, how strictly you want to limit the arguments to <code>nmap</code>, etc.</p>
<h2>Create an SUID executable to run <code>nmap</code> for you.</h2>
<p>Alternatively (and I hate myself for recommending this --- there <em>must</em> be a better way) is to write a tiny SUID (Set User ID) program that executes <em>only</em> the <code>nmap</code> command you want.  Here's a C program that will do it:</p>
<pre class="lang-C prettyprint-override"><code>#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main(void);

int main(void) {
    int retval = 0;
    char* const error_string = "ERROR: Failed to execute \"/usr/bin/map\"";
    char* const nmap_args[] = {
      "/usr/bin/nmap",
      "-sP",
      "192.168.1.0/24",
      NULL
    };

    retval = execv("/usr/bin/nmap", nmap_args);
    /* execv returns _only_ if it fails, so if we've reached this
     * point, print an error and exit.
     */
    perror(error_string);
    return retval;
}
</code></pre>
<p>Save the above as something like <code>nmap_lan.c</code>, and compile with:</p>
<pre class="lang-none prettyprint-override"><code>$ gcc -Wall -o nmap_lan nmap_lan.c
</code></pre>
<p>Then, move it to wherever you keep your Web site's scripts, and <em>as root</em>, change its ownership and permissions:</p>
<pre class="lang-none prettyprint-override"><code># chown root:root nmap_lan  # Or whatever group name you use.
# chmod 4555 nmap_lan
</code></pre>
<p>The leading <code>4</code> sets the SUID bit.  A color <code>ls</code> of the directory will probably show that file highlighted.  The permissions should look like this:</p>
<pre class="lang-none prettyprint-override"><code># ls -l nmap_lan
-r-sr-xr-x. 1 root root 6682 May 23 03:04 nmap_lan
</code></pre>
<p>Any user who runs <code>nmap_lan</code> will be temporarily promoted to whoever owns the <code>nmap_lan</code> file (in this case, <code>root</code>) until the program exits.  That's extraordinarily generous, which is why I hard-coded <em>everything</em> in that program...  To change anything it does --- even just the IP range to scan --- you'll have to edit <code>nmap_lan.c</code> file, re-compile, and re-install.</p>
<p>I've tested <code>nmap_lan</code> on my command line, and it produces privileged-user <code>nmap</code> output when run by an unprivileged user who normally gets only limited output.</p>
<h1>Comments on the Python script</h1>
<p>In general, Python is <em>vastly</em> better at parsing shell arguments than the shell is (the default value for <code>shell</code> is <code>False</code> for a reason), so have your Python script do as much of the job as possible, including parsing the shell command, redirecting input, and redirecting output.</p>
<p>A major advantage of doing the work in Python is that failure to open, read, write, or close any of your files will result in an immediate crash and a stack trace --- instead of the silent failure you've been dealing with.</p>
<p>I'd rewrite that <code>call</code> command to use a list of explicitly separated arguments.  You can handle the output redirection by passing an opened file stream to the <code>stdout</code> parameter.  You can eliminate your last bit of shell redirection by having Python open your output file and write to it explicitly.</p>
<pre class="lang-python3 prettyprint-override"><code>nmap_file='/home/pi/whohome.txt'
with open(nmap_file, 'wt', encoding='ascii') as fout:
    subprocess.call(
      ['/usr/bin/nmap', '-sP', '192.168.1.0/24'],  # Or just ['nmap_lan']
      stdout=fout,
      universal_newlines=True,
      )

output_file='/var/www/html/website.txt'
with open(nmap_file, 'rt', encoding='ascii') as fin:
    with open(output_file, 'wt', encoding='ascii') as fout:
        for line in fin:
            ...
            print('Output here', file=fout)  # Add `file=...` to each print.
</code></pre>
<p>Also, unless you need that <code>whohome.txt</code> file for something else, you can eliminate it entirely by using <a href="http://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>check_output</code></a> to store the output from the <code>nmap</code> command as a string, and then splitting it into separate lines.  (The <code>universal_newlines</code> parameter also handles converting the <code>bytes</code> object into a <code>str</code>, at least in Python 3.)</p>
<pre class="lang-python3 prettyprint-override"><code>lines = subprocess.check_output(
  ['/usr/bin/nmap', '-sP', '192.168.1.0/24'],  # Or just ['nmap_lan']
  universal_newlines=True
  ).split('\n')

output_file='/var/www/html/website.txt'
with open(output_file, 'wt', encoding='ascii') as fout:
    for line in lines:
        ...
        print('Output here', file=fout)  # Add `file=...` to each print.
</code></pre>
<p>Note that I used <code>with</code> blocks to get the file closing for free.</p>
<p>(Finally, that series of <code>if</code> commands is crying out to be rewritten as a <code>for machine in machines_dict:</code> loop, with the strings you're searching for as the keys in that dictionary, and the output you want to print as the values.)</p>
</div>
<span class="comment-copy">im betting on permissions.</span>
<span class="comment-copy">I'm doubling @Dagon's bet</span>
<span class="comment-copy">@Darren we cant lose, i have a system</span>
<span class="comment-copy">@KevinJ.Chase Just puts a question mark next to the file, but googled how to disable SELinux and did those commands but doesn't look like SELinux is anywhere on the system.</span>
<span class="comment-copy">@KevinJ.Chase delivers both with zero bytes after the page is reloaded, but when php is run in command line, they both contain correct outputs. So the python command is working as such, just producing an output of 0..</span>
<span class="comment-copy">Absolute legend, you're spot on, it was the sudo command. Not entirely sure why I even had sudo for an nmap as it works without. But deleting sudo and everything just worked. Thank you Kevin!</span>
<span class="comment-copy">The only thing is, running nmap as sudo is needed as some devices do not show up on the nmap scan if it isn't run as sudo..</span>
<span class="comment-copy">@JeremydeRooy:  I've updated my answer.  I can't easily or reliably test <code>sudo</code> under Apache on the setup I have, so I can't do much more than point to <code>/etc/sudoers</code> (and maybe included files under <code>/etc/sudoers.d/</code>), and suggest that your Apache user needs permission to run either <code>nmap</code> or your Python script through <code>sudo</code>.  (An alternative is to write a tiny Set-User-ID (SUID) program that runs <i>only</i> <code>nmap -sP ...</code>, but you'd want to do that in a compiled language like C.  SUID scripts are very hard to secure (and SUID <i>shell</i> scripts are basically impossible to secure).</span>
<span class="comment-copy">@JeremydeRooy: I've added the SUID program to my answer as a third possible solution.  (I <i>hate</i> it, though.  There must be a way to do this using Apache, or PHP, or <code>sudo</code>, or... anything else.)</span>
<span class="comment-copy">Damn this is an impressive answer - nice!</span>
