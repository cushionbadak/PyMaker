<div class="post-text" itemprop="text">
<p>I stumbled on the 'x = [m]*n' and running it in the interpreter I can see that the code allocates an n element array initialized with m.  But I can't find a description of this type of code online. What is this called?</p>
<pre><code>&gt;&gt;&gt; x = [0]*7
&gt;&gt;&gt; x
[0, 0, 0, 0, 0, 0, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="noreferrer">the Python docs' description</a>, the multiplication operator <code>*</code> used between an integer <code>n</code> and a primitive sequence type performs sequence repetition of the items in the sequence <code>n</code> times. So I suppose the term you are looking for is <strong>sequence repetition</strong>. Note that this is not "sequence copying", as no copies of the items are created -  you have <code>n</code> references to the very same sequence. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>*</code> is just a multiplication - as <code>+</code> for lists is an intuitive thing, meaning concatenate both operands, the next step is multiplication by a scalar - with <code>[0] * N</code>  meaning "concatenate this list with itself N times"!</p>
<p>In other words: <code>*</code> is an operator defined in Python for its primitive sequence types and an integer to concatenate the sequence with itself that number of times. It will work with lists, tuples and even strings.</p>
<p>That is somewhat natural in Python also because the language allows for operator overloading - so Python programmers do expect operators to do meaningful things with objects.  </p>
<p>One should take some care that the objects that compose the resulting list are not copies of the objects on the original list - but references to the same object. Thus, if the contents of the original list were just numbers or some other immutable object, there are no surprises - but if it contains mutable objects, such as inner lists, one could be struck by severe side effects when changing them - like in this snippet:</p>
<pre><code>In [167]: a = [[0]] * 7

In [168]: a
Out[168]: [[0], [0], [0], [0], [0], [0], [0]]

In [169]: a[0].append(1)

In [170]: a
Out[170]: [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]]
</code></pre>
</div>
<span class="comment-copy"><a href="https://github.com/python/cpython/blob/master/Objects/listobject.c#L506" rel="nofollow noreferrer">list repeat</a></span>
<span class="comment-copy">works with strings as well</span>
<span class="comment-copy">Wish I could accept two answers.  Thank you both.  Steve S</span>
<span class="comment-copy">Just a note I took my time to learn while writing  y answer here: the <code>*</code> is not actually defined for any sequence - it is defined for the built-in sequence types (list tuple, ste, bytes, bytearray), but is not present as a mixin functionality for the <code>collections.abc.Sequence</code> which "de facto" defines a "Sequence protocol".   (In Python 2.x, just  <code>collections.Sequence</code>)</span>
<span class="comment-copy">@jsbueno: This is because <code>collections.abc.Sequence</code> can't assume that your constructor will take an iterable object like a standard sequence would.  The same problem occurs with sets, but omitting all the set operators would leave you with a set that isn't much of a set, so they bit the bullet and made the assumption in a private method you can override.</span>
<span class="comment-copy">The second part is what really matters about this syntax.</span>
