<div class="post-text" itemprop="text">
<p>I'm working with a few things at the moment where there will be 2<sup>n</sup> possible outcomes that I need to iterate over in a binary manner. </p>
<p>I'd like some kind of binary <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow">enumeration</a> or similar that I could use to switch on and off operators and/or functions in each iteration.</p>
<p>An example where the <em>sign</em> (or +/- operator) is changing over 2<sup>3</sup>=8 iterations may be:</p>
<pre><code>loop1: + var1 + var2 + var3
loop2: + var1 + var2 - var3
loop3: + var1 - var2 + var3
loop4: + var1 - var2 - var3
loop5: - var1 + var2 + var3
loop6: - var1 + var2 - var3
loop7: - var1 - var2 + var3
loop8: - var1 - var2 - var3
</code></pre>
<p>Sort of a binary tree, but as a code structure as opposed to a data structure?</p>
<p>Is there a helpful builtin?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just produce the product of binary flags; if you need to switch 3 different things, generate the product of <code>(False, True)</code> three times:</p>
<pre><code>from itertools import product

for first, second, third in product((False, True), repeat=3):
</code></pre>
<p>You can also produce the product of operators; your sample could use <a href="https://docs.python.org/2/library/operator.html" rel="nofollow"><code>operator</code> module functions</a>:</p>
<pre><code>import operator
from itertools import product

unary_op = operator.pos, operator.neg

for ops in product(unary_op, repeat=3):
    result = sum(op(var) for op, var in zip(ops, (var1, var2, var3)))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; import operator
&gt;&gt;&gt; var1, var2, var3 = 42, 13, 81
&gt;&gt;&gt; unary_op = operator.pos, operator.neg
&gt;&gt;&gt; for ops in product(unary_op, repeat=3):
...     vars = [op(var) for op, var in zip(ops, (var1, var2, var3))]
...     print('{:=3d} + {:=3d} + {:=3d} = {sum:=4d}'.format(*vars, sum=sum(vars)))
...
 42 +  13 +  81 =  136
 42 +  13 + -81 = - 26
 42 + -13 +  81 =  110
 42 + -13 + -81 = - 52
-42 +  13 +  81 =   52
-42 +  13 + -81 = -110
-42 + -13 +  81 =   26
-42 + -13 + -81 = -136
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a Numpythonic approach you can create all products of <code>[1, -1]</code> with length 3, then multiply it with your variables then sum the result. In Numpy you can do it with following two steps:</p>
<pre><code>perm = np.vstack((np.repeat(a, 4), np.tile(np.repeat(a, 2), 2), np.tile(a, 4))).T
(perm * (var1, var2, var3)).sum(axis=1)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; var1 = 5
&gt;&gt;&gt; var2 = 7
&gt;&gt;&gt; var3 = 2
&gt;&gt;&gt; a = np.array([ 1, -1])
&gt;&gt;&gt; perm = np.vstack((np.repeat(a, 4), np.tile(np.repeat(a, 2), 2), np.tile(a, 4))).T
&gt;&gt;&gt; 
&gt;&gt;&gt; perm * (var1, var2, var3)
array([[ 5,  7,  2],
       [ 5,  7, -2],
       [ 5, -7,  2],
       [ 5, -7, -2],
       [-5,  7,  2],
       [-5,  7, -2],
       [-5, -7,  2],
       [-5, -7, -2]])
&gt;&gt;&gt; 

&gt;&gt;&gt; (perm * (var1, var2, var3)).sum(axis=1)
array([ 14,  10,   0,  -4,   4,   0, -10, -14])
</code></pre>
</div>
<span class="comment-copy">I like, very good.</span>
