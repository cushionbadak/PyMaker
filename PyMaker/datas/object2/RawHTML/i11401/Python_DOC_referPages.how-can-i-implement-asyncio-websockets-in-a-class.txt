<div class="post-text" itemprop="text">
<p>I would like to connect to a websocket via <code>asyncio</code> and <code>websockets</code>, with a format as shown below. How would I be able to accomplish this?</p>
<pre><code>from websockets import connect


class EchoWebsocket:

    def __init__(self):
        self.websocket = self._connect()

    def _connect(self):
        return connect("wss://echo.websocket.org")

    def send(self, message):
        self.websocket.send(message)

    def receive(self):
        return self.websocket.recv()

echo = EchoWebsocket()
echo.send("Hello!")
print(echo.receive())  # "Hello!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How to write async programs?</p>
<ol>
<li>You should define async funcs with <code>async</code></li>
<li>You should call async
funcs with <code>await</code></li>
<li>You need <a href="https://docs.python.org/3/library/asyncio-eventloop.html#base-event-loop">event loop</a> to start your async program</li>
</ol>
<p>All other is almost same as with regular Python programs.</p>
<pre><code>import asyncio
from websockets import connect


class EchoWebsocket:
    async def __aenter__(self):
        self._conn = connect("wss://echo.websocket.org")
        self.websocket = await self._conn.__aenter__()        
        return self

    async def __aexit__(self, *args, **kwargs):
        await self._conn.__aexit__(*args, **kwargs)

    async def send(self, message):
        await self.websocket.send(message)

    async def receive(self):
        return await self.websocket.recv()


async def main():
    async with EchoWebsocket() as echo:
        await echo.send("Hello!")
        print(await echo.receive())  # "Hello!"


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
</code></pre>
<p>Output:</p>
<pre><code>Hello!
</code></pre>
<p>As you see, code is almost same as you wrote.</p>
<p>Only difference is that <code>websockets.connect</code> designed to be async context manager (it uses <code>__aenter__</code>, <code>__aexit__</code>). It's necessary to release connection and will also help you to make async operations during class initialization (since we have no async version of <code>__init__</code>).</p>
<p>I advise you to organize your class same way. But if you really don't want to use context manager for some reason you can use new <code>__await__</code> method to make async initialization and some other async function to release connection:</p>
<pre><code>import sys
import asyncio
from websockets import connect


class EchoWebsocket:
    def __await__(self):
        # see: http://stackoverflow.com/a/33420721/1113207
        return self._async_init().__await__()

    async def _async_init(self):
        self._conn = connect("wss://echo.websocket.org")
        self.websocket = await self._conn.__aenter__()
        return self

    async def close(self):
        await self._conn.__aexit__(*sys.exc_info())

    async def send(self, message):
        await self.websocket.send(message)

    async def receive(self):
        return await self.websocket.recv()


async def main():
    echo = await EchoWebsocket()
    try:
        await echo.send("Hello!")
        print(await echo.receive())  # "Hello!"
    finally:
        await echo.close()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
</code></pre>
<p>Many examples of using <code>websockets</code> you can find in it's <a href="https://websockets.readthedocs.io/en/stable/intro.html">docs</a>.</p>
</div>
<span class="comment-copy">This answer deserves a thanks.</span>
<span class="comment-copy">this closes after it received a reply. How could it continue receiving messages?</span>
<span class="comment-copy">@FeedTheWeb just keep receiving replies inside context manager.</span>
