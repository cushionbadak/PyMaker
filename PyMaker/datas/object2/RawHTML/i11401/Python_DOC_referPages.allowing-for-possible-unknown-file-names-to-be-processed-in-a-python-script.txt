<div class="post-text" itemprop="text">
<p>I am using a script that overlays an input pdf onto another that is essentially a letterhead. However, I am not sure how to allow for the process to be automated to allow for many files to be processed one at a time, without previously knowing what the file will be named. I am using python 2.7.</p>
<pre><code>from pyPdf import PdfFileWriter, PdfFileReader


output = PdfFileWriter()
input1 = PdfFileReader(file("example.pdf", "rb"))

# add page 1 from input1 to output document, unchanged
output.addPage(input1.getPage(0))

# add page 2 from input1, but first add a watermark from another pdf:
page2 = input1.getPage(0)
watermark = PdfFileReader(file("template.pdf", "rb"))
page2.mergePage(watermark.getPage(0))

output.addPage(page2)


# finally, write "output" to document-output.pdf
outputStream = file("example.pdf", "wb")
output.write(outputStream)
outputStream.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Import os and use os.listdir to look in a particular directory for the files:</p>
<p><a href="https://docs.python.org/2/library/os.html#os.listdir" rel="nofollow">https://docs.python.org/2/library/os.html#os.listdir</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem seems to have an easy solution with command line arguments.</p>
<p>You can import the sys module and use sys.argv to get the list of command line arguments. There's a tutorial which should work with 2.7 at this <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm" rel="nofollow">link</a>. sys.argv is an array and sys.argv[1] is the first argument that you pass since sys.argv[0] is the executable name.</p>
<p>From the command line you can execute as:</p>
<pre><code>python your_program.py file_name_to_work_with.pdf
</code></pre>
<p>It's possible to insert command line arguments with IDLE if you're using that. If you need to know how leave a comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>You will probably be safest with something like <a href="https://docs.python.org/3/howto/argparse.html?highlight=argparse" rel="nofollow">argparse</a> </p>
<p>argparse offers you very felxible manipulation of command line parameters to implement a control interface for scripts.</p>
<pre><code>$ python your_program.py -t &lt;template&gt; -i &lt;input1&gt; &lt;input2&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you for all of the contributions.
This is what I ended up using:</p>
<pre><code>from pyPdf import PdfFileWriter, PdfFileReader
import os, sys, glob, shutil

path = glob.glob ('p:\letter2pdf\processing\*.pdf')
template = 'p:/letter2pdf/processing/template/template.pdf'
dest1 = 'p:\letter2pdf\output'
dest2 = 'p:\letter2pdf\processing'

for files in sorted(path):

    output = PdfFileWriter()
    input1 = PdfFileReader(file(files,"rb"))

    print "title = %s" % (input1.getDocumentInfo().title)

# add page 1 from input1 to output document, unchanged
    output.addPage(input1.getPage(0))

#add a watermark from another pdf:
    page2 = input1.getPage(0)
    watermark = PdfFileReader(file (template, "rb"))
    page2.mergePage(watermark.getPage(0))



# finally, write "output" to document-output.pdf
    outputStream = file(input1.getDocumentInfo().title, "wb")
    output.write(outputStream)
    outputStream.close()
</code></pre>
</div>
<span class="comment-copy">Would it be possible for you to feed in the file name as input, rather than hardcoding it?</span>
<span class="comment-copy">This is what ended up working!</span>
<span class="comment-copy">Would I just set the lisdir inside where the "example.pdf" is?</span>
<span class="comment-copy">I see your question also asks about running your code with multiple files. There are many ways to do this. For example, you can pass a variable number of command line args which would each be the name of a file to your program and have your program process them all with a loop inspecting the length of sys.argv.</span>
<span class="comment-copy">I ended up going a different route, for some reason when I had tried using sys.argv I kept getting an error saying it was out of range for some reason.</span>
