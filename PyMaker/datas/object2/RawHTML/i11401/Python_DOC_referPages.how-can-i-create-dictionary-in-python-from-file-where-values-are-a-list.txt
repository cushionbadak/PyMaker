<div class="post-text" itemprop="text">
<p>I have a txt file and I want to read values into a dictionary. Different from common dictionary, the value of each <code>key</code> is a value pair, for example:</p>
<pre><code>tiger eat meat
tiger eat people
rabbit eat carrot
people can walk
trees has root
people has hand
</code></pre>
<p>I want to get a dictionary that,</p>
<pre><code>tiger, {eat, meat}, {eat, people}
rabbit, {eat, carrot}
trees, {has, root}
people, {can, walk}, {has, hand}
</code></pre>
<p>Should I just <code>read lines</code>, <code>split(\n)</code> into 3 items and store the first one as the key and the rest two ones as the values? Or there is a better way to store the two values?</p>
<p>My objective is that, when I query what does a tiger eat, I want to get the answer <code>meat</code> and <code>people</code>.     </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import collections

lines=[]
with open('data1', 'r') as f:
    lines=list(map(lambda line:line.strip(), f.readlines()))

d, flag=collections.defaultdict(list), False
for line in lines:
    temp=list(map(lambda x:x.strip(), line.split()))
    d[temp[0]].append(temp[1:])
print(d)
</code></pre>
<p>Here is the output:  </p>
<pre><code>$ cat data1
tiger eat meat
tiger eat people
rabbit eat carrot
people can walk
trees has root
people has hand
$ python3 a.py 
defaultdict(&lt;class 'list'&gt;, {'rabbit': [['eat', 'carrot']], 'trees': [['has', 'root']], 'tiger': [['eat', 'meat'], ['eat', 'people']], 'people': [['can', 'walk'], ['has', 'hand']]})
</code></pre>
<p><strong>And if you want this structure:</strong> </p>
<pre><code>$ python3 a.py 
defaultdict(&lt;class 'list'&gt;, {'people': [{'can': 'walk'}, {'has': 'hand'}], 'tiger': [{'eat': 'meat'}, {'eat': 'people'}], 'trees': [{'has': 'root'}], 'rabbit': [{'eat': 'carrot'}]})
</code></pre>
<p>replace the 2nd last line in the script to:    </p>
<pre><code>d[temp[0]].append({temp[1]:temp[2]})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, you can accumulate the data, based on the subjects and the verbs, like this</p>
<pre><code>data = {}
with open("Input.txt") as fin:
    for line in fin:
        subject, verb, obj = line.strip().split()
        data.setdefault(subject, {}).setdefault(verb, []).append(obj)
</code></pre>
<p>Now, <code>data</code> will look like this</p>
<pre><code>{'people': {'can': ['walk'], 'has': ['hand']},
 'rabbit': {'eat': ['carrot']},
 'tiger': {'eat': ['meat', 'people']},
 'trees': {'has': ['root']}}
</code></pre>
<p>we basically have created nested dictionaries with the values as lists.</p>
<p>Now, its just a simple matter of iterating and printing the result, in the manner you like</p>
<pre><code>for subject in data:
    print subject,
    for verb in data[subject]:
        for obj in data[subject][verb]:
            print "{{{}, {}}}".format(verb, obj),
    print
</code></pre>
<p><strong>Output</strong></p>
<pre><code>tiger {eat, meat} {eat, people}
trees {has, root}
rabbit {eat, carrot}
people {has, hand} {can, walk}
</code></pre>
<hr/>
<p><strong>Note:</strong> If the original order of the data is important, then instead of using normal dictionaries, you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>, like this</p>
<pre><code>from collections import OrderedDict


data = OrderedDict()
with open("Input.txt") as fin:
    for line in fin:
        subject, verb, obj = line.strip().split()
        data.setdefault(subject, OrderedDict()).setdefault(verb, []).append(obj)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a dictionary whose keys are the subjects and whose values is a list containing dictionaries with verbs as keys and objects as values (see results).</p>
<pre><code>animal_attr = {} #Don't mind the name :)
with open (filename,"r") as f:
    for line in f:
        items = line.split()
        if items[0] not in animal_attr.keys():
            animal_attr[items[0]] = []            
        animal_attr[items[0]].append({items[1]: items[2]})

print(animal_attr)
#{'tiger': [{'eat': 'meat'}, {'eat': 'people'}], 'trees': [{'has': 'root'}],
# 'rabbit': [{'eat': 'carrot'}], 'people': [{'can': 'walk'}, {'has': 'hand'}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once, you have read the lines from the file, you can create a <a href="https://stackoverflow.com/a/5029958/2549021">nested <code>defaultdict</code></a> for this purpose:</p>
<pre><code>d = defaultdict(lambda: defaultdict(list))

for line in lines:
    words = line.split()
    d[words[0]][words[1]].append(words[2])
</code></pre>
<p>If you <code>print(d)</code> you will get following:</p>
<pre><code>defaultdict(&lt;function &lt;lambda&gt; at 0x7fa858444320&gt;, {'tiger': defaultdict(&lt;type 'list'&gt;, {'eat': ['meat', 'people'], 'eats': []}), 'trees': defaultdict(&lt;type 'list'&gt;, {'has': ['root']}), 'rabbit': defaultdict(&lt;type 'list'&gt;, {'eat': ['carrot']}), 'people': defaultdict(&lt;type 'list'&gt;, {'has': ['hand'], 'can': ['walk']})})
</code></pre>
<p>And, you can access what tiger eats as following:</p>
<pre><code>&gt;&gt;&gt; d['tiger']['eat']
['meat', 'people']
</code></pre>
<p>If, you want to see what all can a <code>people</code> do:</p>
<pre><code>&gt;&gt;&gt; d['people']['can']
['walk']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import collections

d=collections.defaultdict(list)
with open('text.txt', 'r') as lines:
    for line in lines:
        temp=line.split()
        d[temp[0]].append({temp[1]: temp[2]})
print(d)
</code></pre>
<p>Output:</p>
<pre><code>defaultdict(&lt;type 'list'&gt;, {'tiger': [{'eat': 'meat'}, {'eat': 'people'}], 'trees': [{'has': 'root'}], 'rabbit': [{'eat': 'carrot'}], 'people': [{'can': 'walk'}, {'has': 'hand'}]})
</code></pre>
</div>
<span class="comment-copy">Can you show the actual dictionary structure you want, rather than this strange non-Python pseudocode?</span>
<span class="comment-copy">You need to upload what you've done so far. More so, your data structure does not have any dictionary. Is this what you intend: <code>{'tiger': [{'eat': 'meat'}, {'eat': 'people'}]}</code>?</span>
<span class="comment-copy">@MosesKoledoye yes~</span>
