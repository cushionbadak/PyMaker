<div class="post-text" itemprop="text">
<p>Is there a utility/pattern to override multiple global variables within a context in Python 2.7? IE something like</p>
<pre><code>var1 = someval
var2 = someotherval
with my_context(var1=newval1, var2=newval2,...):
  print var1   # prints newval1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, but the fact that it's <a href="https://docs.python.org/3/library/unittest.mock.html#the-patchers" rel="nofollow"><code>unittest.mock.patch</code></a> should tell you something about what this is intended to be used for:</p>
<pre><code>import unittest.mock

with unittest.mock.patch('module.thing', replacement_thing):
    do_whatever()
</code></pre>
<p>If you want to patch several things in the same call, you can use <a href="https://docs.python.org/3/library/unittest.mock.html#patch-multiple" rel="nofollow"><code>unittest.mock.patch.multiple</code></a>:</p>
<pre><code>from unittest.mock import patch

with patch.multiple(module, thing1=replacement_thing, thing2=other_thing):
    # module.thing1 and module.thing2 are now patched
    do_whatever()
</code></pre>
<p>Just make sure none of the things you want to patch happen to collide with the argument names of that function (<code>target</code>, <code>spec</code>, <code>create</code>, <code>spec_set</code>, <code>autospec</code>, or <code>new_callable</code>). If they do, fall back to the regular <code>patch</code>.</p>
<p>If you want to do this for non-unit-testing purposes, you may want to reconsider your design.</p>
<p>If you're on Python 2 and <code>unittest.mock</code> isn't in the standard library, you can download the <a href="https://pypi.python.org/pypi/mock" rel="nofollow">backport</a> from PyPI. This one is called <code>mock</code> rather than <code>unittest.mock</code>.</p>
</div>
<span class="comment-copy">Yikes ... Global state that you want to mutate?  I doubt that this exists because it doesn't seem like something most people would want...</span>
<span class="comment-copy">Consider using <code>unittest.mock.patch.multiple</code> instead, which seems to do exactly what the OP wants.</span>
<span class="comment-copy">@ppperry: Oh, huh. I didn't know that was a thing! Thanks for the tip.</span>
<span class="comment-copy">And I suppose that <code>patch.dict</code> could be used to patch <code>globals()</code> in the current module if necessary ...</span>
