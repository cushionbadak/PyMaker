<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><code>reversed(seq)</code></a> built-in in Python indicates that <code>seq</code> must have a <code>__reversed__()</code> method or support the sequence protocol. Lists and tuples both obviously support the sequence protocol, but lists have their own <code>__reversed__()</code> method used instead. </p>
<pre><code>&gt;&gt;&gt; hasattr(list, '__reversed__')
True
&gt;&gt;&gt; hasattr(tuple, '__reversed__')
False
</code></pre>
<p>Then there must be some faster optimization in <code>__reverse__()</code> for a list than the sequence protocol would provide for reversing. So I took a look at the <a href="https://hg.python.org/cpython/file/c6880edaf6f3/Objects/listobject.c#l2986" rel="nofollow">source code where <code>__reversed__()</code> is implemented</a> for listobject.c, and with my pitifully limited C knowledge I cannot understand why a tuple (<a href="https://bitbucket.org/python_mirrors/cpython/src/d81d4b3059e4e5dca67515315c2ada6dfe1c52a4/Objects/tupleobject.c?at=default&amp;fileviewer=file-view-default" rel="nofollow">tupleobject.c</a>) wouldn't have similar internal reversing methods, as a tuple appears to me to bean array with some optimizations (<code>PyTuple_MAXSAVESIZE</code>) on allocations and memory, and a list to be a more familiar array. </p>
<p>What is the C magic I am missing that makes implementing a <code>__reversed__()</code> method an optimization for the list type, but the standard iterator protocol better for tuples? </p>
</div>
<div class="post-text" itemprop="text">
<p>Tuples simply rarely are iterated over in reverse order.</p>
<p>That's because tuples are <em>heterogenous</em>, lists are <em>homogenous</em>; while lists have order, tuples are meant to have <em>structure</em>. As result, tuples are meant to be relatively <em>small</em>, while lists can be (very) large. See <a href="https://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples/626871#626871">What's the difference between lists and tuples?</a></p>
<p>As such, there is simply no need to create a reverse iterator for tuples; it would be a premature optimisation, creating a maintenance cost for very little gain.</p>
</div>
<span class="comment-copy">Ah, so I was seeing it as an optimization to <i>not</i> have a <code>__reversed__()</code> method for tuples, but it's really just a matter of not being worth implementing, didn't even consider that for some reason, immediately thought optimization. Thanks!</span>
