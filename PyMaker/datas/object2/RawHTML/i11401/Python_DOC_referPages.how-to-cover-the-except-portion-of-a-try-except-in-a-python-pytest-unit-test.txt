<div class="post-text" itemprop="text">
<p>I'm new to Python. I need to unit test the except part of a try-except statement in python. I'm using pytest. The problem is that I don't know how to force the try part to raise an exception. Here is my code:</p>
<pre><code>try:
    if master_bill_to is False:
        master.update(
            dbsession,
            company_id=master.company_id,
        )
except Exception as e:
    dbsession.rollback()
    raise Conflict(e.message)
</code></pre>
<p>The master.update method is called to make an update to the database. But how do I mock this code so that it somehow raises an exception in the try portion?</p>
<p>I'm trying to use monkeypatch with this code. The master object is an instance of the BillTo class so I'm thinking of putting that as the first parameter to monkeypatch.setattr.</p>
<pre><code>def test_create_bill_to_fails_when_master_update_fails(dbsession, invoice_group1, company1,
                                                   monkeypatch):

def raise_flush_error():
    raise FlushError

context = TestContext()
monkeypatch.setattr(BillTo, 'update', raise_flush_error)

with pytest.raises(FlushError):
    create_bill_to(
        context,
        dbsession=dbsession,
        invoice_group_id=invoice_group1.id,
        company_id=company1.id,
    )
</code></pre>
<p>But for some reason, the error is not raised.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use mock library and <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow">side_effect</a> to throw <em>Exception</em> during test case</p>
</div>
<div class="post-text" itemprop="text">
<p>Mock <code>master</code> and raise an exception in the <code>update</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I figured it out. I learned that you must pass parameters to the method called by monkeypatch. These parameters must match the signature of the method being replaced or mocked. Actually I also renamed the method with a prefix fake_ to denote the mocking. Here is what I did:</p>
<pre><code>@staticmethod
def fake_update_flush_error(dbsession, company_id=None, address_id=None, proportion=None,
                            company_name=None, receiver_name=None, invoice_delivery_method=None,
                            invoice_delivery_text=None, master_bill_to=False):
    raise FlushError


def test_create_bill_to_fails_when_master_update_fails(dbsession, invoice_group1, company1,
                                                       bill_to1, monkeypatch):

    context = TestContext()
    monkeypatch.setattr(BillTo, 'update', fake_update_flush_error)

    with pytest.raises(Conflict):
        create_bill_to(
            context,
            dbsession=dbsession,
            invoice_group_id=invoice_group1.id,
            company_id=company1.id,
            address_id=None,
            ...
    )
</code></pre>
<p>The BillTo.update method needed all those parameters.</p>
</div>
<span class="comment-copy">Have you tried searching for Python mocking?</span>
