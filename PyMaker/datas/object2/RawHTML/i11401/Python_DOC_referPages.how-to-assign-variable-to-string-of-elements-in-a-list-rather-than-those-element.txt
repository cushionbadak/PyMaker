<div class="post-text" itemprop="text">
<p>I'm having some trouble in regards to assigning a variable to a specific string of elements.  Here's a simplified version of my code:</p>
<pre><code>import random
import string

def printsl(string):
    import sys
    sys.stdout.write(string)
    sys.stdout.flush()



l = random.sample(string.ascii_lowercase, 26)
w = random.sample(l, random.randint(4, 10))

for elem in w:
    x = elem     #&lt;------- 
    printsl(x)

print('')
printsl(x)
</code></pre>
<p>And when I run this code the output is something along the lines of </p>
<pre><code>npabjcevz
z
</code></pre>
<p>or</p>
<pre><code>znoyhe
e
</code></pre>
<p>etc.</p>
<p>The first line of output is what I wanted it to be, however for some reason the second line only prints the last letter of the string.  Correct me if I'm wrong but I'm guessing it's because instead of <code>elem</code> equaling the whole string of random elements it gets reassigned to 4-10 different elements and prints all of them for <code>printsl(x)</code> under <code>for elem in w</code> but the second time it just uses the most recent letter.  </p>
<p>How do I get it to print the full string both times? Or more specifically how to I get <code>x</code> to equal the entire string of output?</p>
<p>The only thing I could think of to try was changing <code>x = elem</code> to <code>x = str(elem)</code> but it gave the same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you are producing a separate list of characters here, because <code>random.sample()</code> <em>always</em> returns a list:</p>
<pre><code>l = random.sample(string.ascii_lowercase, 26)
w = random.sample(l, random.randint(4, 10))
</code></pre>
<p>The first line picks a <em>list</em> of 26 unique and random characters from the sequence <code>string.ascii_lowercase</code>. That the input is also 26 characters long means you basically have produced a randomly shuffled list of the 26 letters of the alphabet.  The second line then picks between 4 and 10 characters from that shuffled list, shuffling those again.</p>
<p>You are confusing yourself somewhat by using a custom <code>printls</code> function that does not add newlines after everything it prints, so each character the <code>for elem in w:</code> loop prints appears right after the previous one. The <code>for</code> loop variable <code>elem</code> ends up being bound to the last character from the <code>w</code> list when the loop is complete.</p>
<p>You could get the same result by using <code>random.sample()</code> <strong>once</strong>, directly on <code>string.ascii_lowercase</code></p>
<pre><code>w = random.sample(string.ascii_lowercase, random.randint(4, 10))
</code></pre>
<p>This is still a list but you can just join the result back into a single string with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a>:</p>
<pre><code>result = ''.join(w)
</code></pre>
<p>Now, <em>usually</em> when people pick random characters from <code>string.ascii_lowercase</code> they don't mind if characters repeat. You'll get a better password if you do, for example. Use the <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow"><code>random.choice()</code> function</a> to pick <em>one</em> random character at a time, and repeat this process in a loop to pick your desired number of letters. A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow"><em>list comprehension</em></a> can make this easier, putting all the results into a list, you'll have to join the result again:</p>
<pre><code>result = ''.join([random.choice(string.ascii_lowercase)
                  for _ in range(random.randint(4, 10))])
</code></pre>
</div>
<span class="comment-copy">You'd be able to see what you did much better by using <code>print(repr(w))</code>.</span>
<span class="comment-copy">@MartijnPieters when I use print(repr(w)) it shows me all the commas and brackets (list form) which I don't want?</span>
<span class="comment-copy">I didn't say that that would produce what you want, I said you'd be better able to see what you did. :-) That shows you that <code>w</code> is a <i>list</i> of single characters.</span>
<span class="comment-copy">okay I see, so how do I make x equal the whole string of elements?  is there some kind of, whatever you call the "str()" or "int()" or "len()" thype things that I can put around "elem" that will tell it to be a single string?  (soz not familiar with all the programming lingo) @MartijnPieters</span>
<span class="comment-copy">Please do try and read my answer carefully and understand what happens at each step. Try things out in the Python interactive interpreter perhaps. I do explain how to get from a list of strings to a single string, for example.</span>
<span class="comment-copy">I'm not sure if I'm interpreting this correctly, but I changed it to                  for elem in w:     x = ''.join(random.sample(string.ascii_lowercase, random.randint(4, 10)))     printsl(x)  print('') printsl(x)    and the output is qmenskxwyuqcukaydwjdfzabpdniomyvklutgwmenzyuqtxwatrikq watrikq ??</span>
<span class="comment-copy">also the reason I'm keeping L and w separate is because in my actual code (this one was just simplified because of all the busy junk) i want to keep L as the same order of letters but i had 10 different Ws (if that makes sense)</span>
<span class="comment-copy">You no longer need your <code>for elem in w</code> loop. All you need is the <code>w = random.sample()</code> line and the <code>result = ''.join(w)</code> line. You can use <code>x</code> instead of <code>result</code>, but <code>x</code> is not a very descriptive variable name.</span>
<span class="comment-copy">@zeurosis: your <code>L</code> is <i>redundant</i>; it doesn't add anything over just using <code>string.ascii_lowercase</code> directly.</span>
<span class="comment-copy">well I will need L separate for when I add other parts to this program, but yeah I see what you mean for this particular part it's redundant.  okay so I changed it to just "for elem in w:     x = ''.join(w)     print(x)" but now it's printing the string of output multiple times instead of once?  I'm not sure how to fix this</span>
