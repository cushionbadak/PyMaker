<div class="post-text" itemprop="text">
<p>Python sometimes generates strange cryptic byte arrays. I have no clue how to interpret them.</p>
<p>Consider the following example.</p>
<pre><code>import struct
floats = [3.14, 2.7, 0.0, -1.0, 1.1]
s = struct.pack('f'*len(floats), *floats)
print("The bytes:")
print(s)
</code></pre>
<p>The struct.pack function should output the 'bytes-representation' of each value in the list. The list consists of 64-bit floating point numbers (my computer is 64-bit), so I would expect every float to be represented by 8 bytes:</p>
<pre><code> 3.14 -&gt; 0x40 0x09 0x1E 0xB8 0x51 0xEB 0x85 0x1F
 2.7  -&gt; 0x40 0x05 0x99 0x99 0x99 0x99 0x99 0x9A
 0.0  -&gt; 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
-1.0  -&gt; 0xBF 0xF0 0x00 0x00 0x00 0x00 0x00 0x00
 1.1  -&gt; 0x3F 0xF1 0x99 0x99 0x99 0x99 0x99 0x9A
</code></pre>
<p>By the way, I have used the following website to make the proper conversion: <a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html" rel="nofollow">http://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html</a></p>
<p>Unfortunately, Python does not output those bytes I would expect. Instead, Python outputs some very cryptic list of bytes. But is this really a list of bytes? The thing that Python outputs is so strange:</p>
<pre><code>b'\xc3\xf5H@\xcd\xcc,@\x00\x00\x00\x00\x00\x00\x80\xbf\xcd\xcc\x8c?'
</code></pre>
<p>Please help me to understand what Python is doing here.</p>
<p><strong>EDIT</strong></p>
<p>Apparently I should use <code>'d'</code> instead of <code>'f'</code>, since I'm using double precision floating point numbers on my machine. Thank you mr. Rad Lexus for your answer. But I'm still a bit puzzled about the Python outputs. Let me clarify.</p>
<p>I start with the following code that you gave me:</p>
<pre><code>import struct
floats = [3.14, 2.7, 0.0, -1.0, 1.1]
s = []
for f in floats:
    s.append(struct.pack('d', f))
</code></pre>
<p>Before proceeding, I inspect the object <code>s</code> to get a grasp of what is happening. This is what I get from <code>s</code>:</p>
<pre><code>&gt;&gt;&gt; s
[ b'\x1f\x85\xebQ\xb8\x1e\t@', 
  b'\x9a\x99\x99\x99\x99\x99\x05@',
  b'\x00\x00\x00\x00\x00\x00\x00\x00', 
  b'\x00\x00\x00\x00\x00\x00\xf0\xbf',
  b'\x9a\x99\x99\x99\x99\x99\xf1?'     ]
</code></pre>
<p>Some entries in <code>s</code> are 8 bytes long. That is what I would expect. But some entries are shorter. Anyway, there is no entry that gives the correct 8-byte representation of the corresponding float number - except for the float <code>0.0</code>.</p>
<p>Your code continues with some magic to extract the actual correct 8 bytes per float:</p>
<pre><code>print("The bytes:")
for floatInHex in s:
    for byteval in floatInHex:
        print ('%02x' % byteval, end="")
</code></pre>
<p>Now we get the correct result. But why is the <code>s</code> object not yet containing the correct 8-bytes per float, to begin with? Why is this extra magic needed?</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Format <code>f</code> is for 32bit float, you need to use <code>d</code> to denote 64bit float (double). See <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow">Format characters - <code>struct</code></a></li>
<li><a href="https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment" rel="nofollow">Explicitly specify <code>&gt;</code> to get same result with the site (big-endian)</a></li>
<li>Use <a href="https://docs.python.org/3/library/binascii.html#binascii.hexlify" rel="nofollow"><code>binascii.hexlify</code></a> to conver the binary string to hexadecimal representation.</li>
</ul>
<hr/>
<pre><code>&gt;&gt;&gt; binascii.hexlify(struct.pack('&gt;d', floats[0]))
b'40091eb851eb851f'
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; import binascii
&gt;&gt;&gt;
&gt;&gt;&gt; floats = [3.14, 2.7, 0.0, -1.0, 1.1]
&gt;&gt;&gt; s = struct.pack('&gt;' + 'd'*len(floats), *floats)
&gt;&gt;&gt; binascii.hexlify(s)
b'40091eb851eb851f400599999999999a0000000000000000bff00000000000003ff199999999999a'
</code></pre>
<p>If you want to get each float representation separately, you need to iterate them and conver them. (using loop or list comprehension, ..)</p>
<pre><code>&gt;&gt;&gt; for f in floats:
...     print(' '.join('0x{:02x}'.format(c) for c in struct.pack('&gt;d', f)))
...
0x40 0x09 0x1e 0xb8 0x51 0xeb 0x85 0x1f
0x40 0x05 0x99 0x99 0x99 0x99 0x99 0x9a
0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
0xbf 0xf0 0x00 0x00 0x00 0x00 0x00 0x00
0x3f 0xf1 0x99 0x99 0x99 0x99 0x99 0x9a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to unpack as <code>double</code> but in the program you use the specifier for <code>float</code>: <code>f</code>. So that's what you get:</p>
<pre><code>c3 f5 48 40 for 3.14
</code></pre>
<p>(See <a href="https://stackoverflow.com/q/2008871/2564301">python struct pack double</a> for why you see some ASCII characters.)</p>
<p>This code will print out one line of hex per number:</p>
<pre><code>import struct
floats = [3.14, 2.7, 0.0, -1.0, 1.1]
s = []
for f in floats:
    s.append(struct.pack('d', f))
print("The bytes:")
for floatInHex in s:
  for byteval in floatInHex:
    print ('%02x' % byteval, end=""),
  print ()
</code></pre>
<p>Result:</p>
<pre><code>The bytes:
1f85eb51b81e0940
9a99999999990540
0000000000000000
000000000000f0bf
9a9999999999f13f
</code></pre>
</div>
<span class="comment-copy">I'm still a bit puzzled about what Python outputs. Please check the <b>EDIT</b> on my question. Thank you so much.</span>
<span class="comment-copy">@K.Mulier, Python repesent character i a string as a character (instead of escaped hexadecimal format) if it's representable that way. <code>b'@' == b'\x40'</code></span>
<span class="comment-copy">Thank you so much. In that case, things start to make sense to me. I notice though that the sequence of bytes is reversed in order. Is that correct?</span>
<span class="comment-copy">@K.Mulier, As I wrote in the answer, you need to specify byte order (<code>&gt;</code>) to get the desired output. Otherwise, it will use systems' byte order (little endian for your system).</span>
<span class="comment-copy">@K.Mulier, About byte order, please refer this: <a href="https://en.wikipedia.org/wiki/Endianness" rel="nofollow noreferrer">en.wikipedia.org/wiki/Endianness</a></span>
<span class="comment-copy">I'm still a bit puzzled about what Python outputs. Please check the <b>EDIT</b> on my question. Thank you so much. @Rad Lexus</span>
