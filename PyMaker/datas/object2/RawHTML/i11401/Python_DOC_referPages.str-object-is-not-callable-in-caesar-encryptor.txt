<div class="post-text" itemprop="text">
<pre><code>def encrypt_caesar(plaintext):
    s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    d = dict(map(s,s[3:]+ s[:3]))
    return ''.join(map(lambda l: d.get(l,l), plaintext.lower()))
</code></pre>
<p>Tried to copy this code from Stanford lecture slide and run it but it gives <code>'str' object is not callable</code> error, what am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>I guess the author of the slide didn't actually <em>test</em> the code.</p>
<p>The code you produced is trying to use <code>map()</code> to call <code>s</code> as a function:</p>
<pre><code>map(s,s[3:]+ s[:3])
#   ^ This must be a *callable object*, like a function
</code></pre>
<p>If you wanted to create a dictionary mapping ASCII letters to a letter 3 spots along in the alphabet, use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code> function</a> instead:</p>
<pre><code>d = dict(zip(s, s[3:] + s[:3]))
</code></pre>
<p><code>zip()</code> then pairs up each element in <code>s</code> with each element in <code>s[3:] + s[:3]</code>, and those <code>(letter, letter + 3)</code> pairs are then passed to <code>dict()</code> to form key-value pairs:</p>
<pre><code>&gt;&gt;&gt; s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
&gt;&gt;&gt; dict(zip(s, s[3:] + s[:3]))
{'A': 'D', 'I': 'L', 'L': 'O', 'X': 'A', 'N': 'Q', 'D': 'G', 'S': 'V', 'B': 'E', 'V': 'Y', 'C': 'F', 'K': 'N', 'W': 'Z', 'R': 'U', 'O': 'R', 'T': 'W', 'P': 'S', 'F': 'I', 'J': 'M', 'M': 'P', 'E': 'H', 'Q': 'T', 'H': 'K', 'G': 'J', 'Z': 'C', 'U': 'X', 'Y': 'B'}
</code></pre>
<p>Next, your last line will completely <em>fail</em> to do any encryption, because your map only handles <strong>uppercase letters</strong>, but you <strong>lowercased</strong> your input. Either produce a lowercase map, or lowercase your input.</p>
<p>Lowercasing the map could look like this:</p>
<pre><code>def encrypt_caesar(plaintext):
    s = "abcdefghijklmnopqrstuvwxyz"
    d = dict(zip(s, s[3:] + s[:3]))
    return ''.join(map(lambda l: d.get(l, l), plaintext.lower()))
</code></pre>
<p>or you could just use the <a href="https://docs.python.org/3/library/string.html#string.ascii_lowercase" rel="nofollow"><code>string.ascii_lowercase</code> constant</a>:</p>
<pre><code>from string import ascii_lowercase

def encrypt_caesar(plaintext):
    d = dict(zip(ascii_lowercase, ascii_lowercase[3:] + ascii_lowercase[:3]))
    return ''.join(map(lambda l: d.get(l,l), plaintext.lower()))
</code></pre>
<p>Using this method is <em>rather slow</em>, however. For blazingly-fast 'encryption', use the <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate()</code> method</a>; the input map for that is best produced with <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow"><code>str.maketrans</code></a>:</p>
<pre><code>from string import ascii_lowercase as alc

def encrypt_caesar(plaintext, shift=3):
    map = str.maketrans(alc, alc[shift:] + alc[:shift])
    return plaintext.lower().translate(map)
</code></pre>
<p>I added a <code>shift</code> parameter to define how much of an alphabet shift should be applied.</p>
<p>I'll leave handling both lowercase and uppercase letters as an exercise to the reader!</p>
</div>
<span class="comment-copy">What do you expect the <code>map()</code> to produce? You are trying to use <code>s</code> as a <i>function</i> there.</span>
<span class="comment-copy">You are very correct sir, it appears I can't even copy a code correctly :(</span>
<span class="comment-copy">the last example is also really succinct, thanks !</span>
