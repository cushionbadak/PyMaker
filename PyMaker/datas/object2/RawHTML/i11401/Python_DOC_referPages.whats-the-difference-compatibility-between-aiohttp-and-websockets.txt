<div class="post-text" itemprop="text">
<p>What's the difference between <code>aiohttp</code>'s websocket support (i.e. <code>WebSocketResponse</code>) and <a href="https://pypi.python.org/pypi/websockets" rel="nofollow noreferrer">websockets</a>   (both offer an async support)? Can they be mixed?</p>
</div>
<div class="post-text" itemprop="text">
<p>They are two different libraries maintained by different people. Both are built on top of <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio</code></a>.</p>
<p><a href="https://github.com/aaugustin/websockets" rel="nofollow noreferrer"><code>websockets</code></a> aims to be a simple easy to use library to implement websockets clients and servers and is maintained mostly by a <a href="https://github.com/aaugustin/websockets/graphs/contributors" rel="nofollow noreferrer">single developer</a>. On the other hand, <a href="https://github.com/aio-libs/aiohttp" rel="nofollow noreferrer"><code>aiohttp</code></a> is a quite bigger library maintained by <a href="https://github.com/aio-libs/aiohttp/graphs/contributors" rel="nofollow noreferrer">bigger team</a>, offering not only websockets but, as the name suggests, HTTP functionality as well. Some of its functionality overlaps that of <a href="http://flask.pocoo.org/" rel="nofollow noreferrer"><code>flask</code></a> and <a href="http://docs.python-requests.org/en/master/" rel="nofollow noreferrer"><code>requests</code></a>, but in a async fashion.</p>
<p>In terms of size, <code>websockets</code> is about 4k LOC, while <code>aiohttp</code> is about 40k LOC. If you just need a simple and easy to use websockets client, go for <code>websockets</code>. If you are already using <code>aiohttp</code> and need websockets functionality, use what <code>aiohttp</code> has to offer. I don't see a point in mixing them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Noting a detail that may force the choice for folks that need to support the system Python in Debian 8: <code>aiohttp</code> sets its <a href="https://aiohttp.readthedocs.io/en/stable/faq.html#why-is-python-3-5-3-the-lowest-supported-version" rel="nofollow noreferrer">minimum supported version</a> at Python 3.5.3 (which is the system Python version in Debian 9).</p>
<p>While the <code>aiohttp</code> folks have good reasons for making that decision, the smaller feature set in <code>websockets</code> allows that project to maintain support for the Python 3.4.x system Python in Debian 8, albeit with some adaptation of your own application code to be Python 3.4 compatible: <a href="https://websockets.readthedocs.io/en/stable/intro.html#python-lt-36" rel="nofollow noreferrer">https://websockets.readthedocs.io/en/stable/intro.html#python-lt-36</a></p>
</div>
<span class="comment-copy">you could probably mix them but is there any reason you don't just want to use aiohttp's built-in websockets?</span>
<span class="comment-copy">the two are on top of Pythonâ€™s asynchronous I/O support introduced in PEP 3156, so I think the performance is really similar</span>
<span class="comment-copy">autobhan also seems to be an alternative.</span>
<span class="comment-copy">@Rhangaun I recommend not wasting your time with autobahn. If your task is simple, just use <code>websockets</code>. Autobahn is a lot harder to debug and much more complex and likely be an overkill in most cases.</span>
