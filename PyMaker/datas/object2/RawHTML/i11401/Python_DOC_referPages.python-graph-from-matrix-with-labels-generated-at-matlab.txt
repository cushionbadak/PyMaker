<div class="post-text" itemprop="text">
<p>I have matrix of signals generated in Matlab (24 x 121) and labels file (1x 24). After I loaded it, it is :
labels</p>
<pre><code>[array(['1-2'], 
      dtype='&lt;U3') array(['1-3'], 
      dtype='&lt;U3')
 array(['1-4'], 
      dtype='&lt;U3') array(['2-2'], 
      dtype='&lt;U3')
 array(['2-3'], 
      dtype='&lt;U3') array(['2-4'], 
      dtype='&lt;U3')
 array(['49-2'], 
      dtype='&lt;U4') array(['49-3'], 
      dtype='&lt;U4')
 array(['49-4'], 
      dtype='&lt;U4') array(['50-2'], 
      dtype='&lt;U4')
 array(['50-3'], 
      dtype='&lt;U4') array(['50-4'], 
      dtype='&lt;U4')
 array(['51-2'], 
      dtype='&lt;U4') array(['51-3'], 
      dtype='&lt;U4')
 array(['51-4'], 
      dtype='&lt;U4') array(['52-2'], 
      dtype='&lt;U4')
 array(['52-3'], 
      dtype='&lt;U4') array(['52-4'], 
      dtype='&lt;U4')
 array(['53-2'], 
      dtype='&lt;U4') array(['53-3'], 
      dtype='&lt;U4')
 array(['53-4'], 
      dtype='&lt;U4') array(['54-2'], 
      dtype='&lt;U4')
 array(['54-3'], 
      dtype='&lt;U4') array(['54-4'], 
      dtype='&lt;U4')]
</code></pre>
<p>and X</p>
<pre><code>[[ 1.31973026  1.04553767  0.98759242 ...,  0.87344433  0.8734996
   0.88148139]
 [ 1.54466891  1.50167134  1.43233076 ...,  0.71953425  0.72355352
   0.76595696]
 [ 0.26974139  0.27669694  0.26486576 ...,  0.86765017  0.84838513
   0.83147331]
 ..., 
 [ 1.28762992  1.21298643  1.08822084 ...,  0.81903216  0.7559759
   0.62566092]
 [ 0.96190193  0.97199575  0.93630357 ...,  0.88570213  0.78969704
   0.69140163]
 [ 1.70054223  1.6876721   1.66986342 ...,  0.90825585  0.92562056
   0.93568893]]
</code></pre>
<p>I want to draw graph based on 1-correlation measure similarity, and not show branch if it is weight &gt;0.7. The code I'm using is:</p>
<pre><code>import scipy.io
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm  # Large set of colormaps
import pandas as pd
from scipy.cluster import hierarchy
from sklearn import datasets
from sklearn import metrics
from sklearn import cluster
from scipy.spatial.distance import pdist
import networkx as nx
from matplotlib import pyplot as plt
import pylab
import networkx as nx
from matplotlib import pyplot as plt


o1 = scipy.io.loadmat('out.mat')
X=(o1['out'])
print(X)

o1 = scipy.io.loadmat('labels.mat')
labels=o1['labels']
labels = labels[0]
print(labels)
corr=1-np.corrcoef(X)
print(corr)
m, n = np.shape(corr)
G = nx.Graph()
corr[np.where(corr&gt;0.7)]=0
for i in range(m):
    for j in range(n):
            s=labels[i]
            b=labels[j]
            w=corr[i,j]
            G.add_edge(s,b,weight=w)
nx.draw(G)
plt.show()
</code></pre>
<p>I get an error </p>
<blockquote>
<p>Traceback (most recent call last):   File
  "C:/Users/Kristina/Desktop/NOBS/source/grafovi.py", line 36, in
  
      G.add_edge(s,b,weight=w)   File "C:\Python34\lib\site-packages\networkx\classes\graph.py", line 706,
  in add_edge
      if u not in self.node: TypeError: unhashable type: 'numpy.ndarray'</p>
</blockquote>
<p>I cannot figure out what the problem is.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your objects <code>s</code> and <code>b</code> are elements of the <code>labels</code> variable, which is a list <em>of arrays</em>, each looking like this:</p>
<pre><code>array(['51-3'],dtype='&lt;U4')
</code></pre>
<p>When you call <code>Graph.add_node</code>, it <a href="https://networkx.github.io/documentation/networkx-1.10/reference/classes.graph.html#networkx.Graph" rel="nofollow noreferrer">expects something like this</a>:</p>
<pre><code>&gt;&gt;&gt; G.add_edge(1, 2, weight=4.7 )
</code></pre>
<p>As both the error message and <a href="https://stackoverflow.com/questions/37279633/python-graph-from-matrix-with-labels-generated-at-matlab#comment62085017_37279633">Moritz noted</a>, either (probably both) of the variables passed to <code>G</code> has to be hashable, but numpy arrays are <em>not</em> hashable.</p>
<p>It's far from clear to me exactly what you're trying to do, but if you just want to use the contents of each array (such as <code>'51-3'</code>) in your graph, just access the zeroth element of each of your arrays, since in your current implementation <code>s</code> and <code>b</code> always seem to be single-element arrays anyway. What I mean is changing to this:</p>
<pre><code>for i in range(m):
    for j in range(n):
            s=labels[i][0]  # change here
            b=labels[j][0]  # change here
            w=corr[i,j]
            G.add_edge(s,b,weight=w)
</code></pre>
<p>although I'm pretty sure you should use <code>G.add_edges_from</code> instead of looping. And, as always, if you run into unexpected errors and unexpected types, use <code>print()</code> and <code>type()</code> to determine what your variables actually are, instead of what you expect them to be.</p>
</div>
<span class="comment-copy">Maybe s and b are lists and <code>G.add_edge</code> wants something else (e.g a tuple). Lists are unhashable. All immutable objects are hashable (typle etc.). See: <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">docs.python.org/3/glossary.html</a>  and search for <code>hashable</code> In case <code>G.add_edge</code> wants to construct a dictionary and use either s and b as key, it has to be hashable.</span>
<span class="comment-copy">It works, thanks a lot for such fast answer!</span>
<span class="comment-copy">@KristinaVakarov thanks for the feedback, I'm glad I could help:)</span>
<span class="comment-copy">Nice answer Andras</span>
<span class="comment-copy">@Drew thank you, sir:)</span>
