<div class="post-text" itemprop="text">
<p>I'm trying to write simpler code for adding unique elements into a python list. I have a dataset that contains a list of dictionaries, and I'm trying to iterate through a list inside the dictionary</p>
<p>Why doesn't this work? It's adding all the items, including the duplicates, instead of adding unique items.</p>
<pre><code>unique_items = []
unique_items = [item for d in data for item in d['items'] if item not in unique_items]
</code></pre>
<p>vs. the longer form which works:</p>
<pre><code>unique_items = []
for d in data:
    for item in d['items']:
        if (item not in unique_items):
            unique_items.append(item)
</code></pre>
<p>Is there a way of making this work using list comprehension, or am I stuck with using double for loops? I want to keep the ordering for this.</p>
<p>Here's the list of dictionaries:</p>
<pre><code>[{"items":["apple", "banana"]}, {"items":["banana", "strawberry"]}, {"items":["blueberry", "kiwi", "apple"]}]
</code></pre>
<p>output should be ["apple", "banana", "strawberry", "blueberry", "kiwi"]</p>
<p>I noticed someone asking a similar question on another post: <a href="https://stackoverflow.com/questions/12681753/python-list-comprehension-with-unique-items">Python list comprehension, with unique items</a>, but I was wondering if there's another way to do it without OrderedDict or if that's the best way</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to use <code>OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict
from itertools import chain

l = [{"items":["apple", "banana"]}, {"items":["banana", "strawberry"]}, {"items":["blueberry", "kiwi", "apple"]}]
OrderedDict.fromkeys(chain.from_iterable(d['items'] for d in l)).keys() # ['apple', 'banana', 'strawberry', 'blueberry', 'kiwi']
</code></pre>
<p>If you want alternatives check <code>OrderedSet</code> <a href="http://code.activestate.com/recipes/576694/" rel="nofollow">recipe</a> and <a href="https://pypi.python.org/pypi/ordered-set" rel="nofollow">package</a> based on it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>all_items</code> isn't continuously overwritten during the list comprehension, so you're constantly looking for things in an empty list.</p>
<p>I would do this instead:</p>
<pre><code>data = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 3, 4,]

items = []
_ = [items.append(d) for d in data if d not in items]
print(items)
</code></pre>
<p>and I get:</p>
<pre><code>[1, 2, 3, 4, 5, 6]
</code></pre>
<p>But there are more efficient ways to do this anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not just use <code>set</code>?</p>
<p>e.g. - </p>
<pre><code>&gt;&gt;&gt; data = {1: {'items': [1, 2, 3, 4, 5]}, 2: {'items': [1, 2, 3, 4, 5]}}
&gt;&gt;&gt; {val for item in data for val in data[item]['items']}
&gt;&gt;&gt; {1, 2, 3, 4, 5}
</code></pre>
<p>If you want a list:</p>
<pre><code>&gt;&gt;&gt; list(repeat above)
&gt;&gt;&gt; [1, 2, 3, 4, 5]
</code></pre>
<p>Instead of the curly braces <code>{}</code> for the set you could also just use the <code>set</code> keyword, since the braces may be overly obscure for some.</p>
<p>Here's a link to the <a href="https://docs.python.org/3/reference/expressions.html#set-displays" rel="nofollow">syntax</a></p>
</div>
<span class="comment-copy">Please provide more information: your list of dicts would be of great use to anyone providing help.</span>
<span class="comment-copy">use a set better, it get rip of all duplicates for you</span>
<span class="comment-copy">Do you want to keep the ordering?</span>
<span class="comment-copy">Yes, ordering is important</span>
<span class="comment-copy">In that case the response in the other question is the easiest way. If you really want alternatives check <a href="http://code.activestate.com/recipes/576694/" rel="nofollow noreferrer">OrderedSet recipe</a>.</span>
<span class="comment-copy">This worked for me. Thanks!</span>
<span class="comment-copy">What are some more efficient ways of doing this?</span>
<span class="comment-copy"><code>set</code> like in the other answer, <code>numpy.unique</code>, etc</span>
<span class="comment-copy">It might be worth to note that this doesn't preserve the ordering like the example code in question or the answer to <a href="http://stackoverflow.com/questions/12681753/python-list-comprehension-with-unique-items" title="python list comprehension with unique items">stackoverflow.com/questions/12681753/â€¦</a></span>
