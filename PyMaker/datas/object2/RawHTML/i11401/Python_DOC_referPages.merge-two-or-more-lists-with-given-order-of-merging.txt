<div class="post-text" itemprop="text">
<p>On start I have 2 lists and 1 list that says in what order I should merge those two lists.
For example I have first list equal to <code>[a, b, c]</code> and second list equal to <code>[d, e]</code> and 'merging' list equal to <code>[0, 1, 0, 0, 1]</code>.</p>
<p>That means: to make merged list first I need to take element from first list, then second, then first, then first, then second... And I end up with <code>[a, d, b, c, e]</code>. 
To solve this I just used for loop and two "pointers", but I was wondering if I can do this task more pythonic... I tried to find some functions that could help me, but no real result.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create iterators from those lists, loop through the ordering list, and call <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> on one of the iterators:</p>
<pre><code>i1 = iter(['a', 'b', 'c'])
i2 = iter(['d', 'e'])
# Select the iterator to advance: `i2` if `x` == 1, `i1` otherwise
print([next(i2 if x else i1) for x in [0, 1, 0, 0, 1]]) # ['a', 'd', 'b', 'c', 'e']
</code></pre>
<p>It's possible to generalize this solution to any number of lists as shown below</p>
<pre><code>def ordered_merge(lists, selector):
    its = [iter(l) for l in lists]
    for i in selector:
        yield next(its[i])
</code></pre>
<pre><code>In [4]: list(ordered_merge([[3, 4], [1, 5], [2, 6]], [1, 2, 0, 0, 1, 2]))
Out[4]: [1, 2, 3, 4, 5, 6]
</code></pre>
<p>If the ordering list contains strings, floats, or any other objects that can't be used as list indexes, use a dictionary:</p>
<pre><code>def ordered_merge(mapping, selector):
    its = {k: iter(v) for k, v in mapping.items()}
    for i in selector:
        yield next(its[i])
</code></pre>
<pre><code>In [6]: mapping = {'A': [3, 4], 'B': [1, 5], 'C': [2, 6]}

In [7]: list(ordered_merge(mapping, ['B', 'C', 'A', 'A', 'B', 'C']))
Out[7]: [1, 2, 3, 4, 5, 6]
</code></pre>
<p>Of course, you can use integers as dictionary keys as well.</p>
<hr/>
<p>Alternatively, you could remove elements from the left side of each of the original lists one by one and add them to the resulting list. Quick example:</p>
<pre><code>In [8]: A = ['a', 'b', 'c']
   ...: B = ['d', 'e']
   ...: selector = [0, 1, 0, 0, 1]
   ...: 

In [9]: [B.pop(0) if x else A.pop(0) for x in selector]
Out[9]: ['a', 'd', 'b', 'c', 'e']
</code></pre>
<p>I would expect the first approach to be more efficient (<code>list.pop(0)</code> is <em>slow</em>).</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this,</p>
<pre><code>list1 = ['a', 'b', 'c']
list2 = ['d', 'e']
options = [0,1,0,0,1] 

list1_iterator = iter(list1)
list2_iterator = iter(list2)

new_list = [next(list2_iterator) if option else next(list1_iterator) for option in options]

print(new_list)
# Output
['a', 'd', 'b', 'c', 'e']
</code></pre>
</div>
<span class="comment-copy">FWIW, there are a variety of algorithms for this problem, as well as a timing script at <a href="http://stackoverflow.com/q/42028606/4014959">python - replace the boolean value of a list with the values from two different lists</a>.</span>
