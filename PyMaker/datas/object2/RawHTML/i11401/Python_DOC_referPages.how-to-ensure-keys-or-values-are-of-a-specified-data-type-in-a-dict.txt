<div class="post-text" itemprop="text">
<p>My python program uses dicts and there are a massive amount of "if" statements just for checking the type of the retrieved value.</p>
<p>I want to avoid this but instead do it a more programatically correct way.</p>
<p>Here is an example:</p>
<pre><code># golddb should only contain str keys and int values
golddb = dict()

def gainGold(playername):
  global golddb
  golddb[playername] += 1  # error may happen if I try to += a non-int type
  golddb[playername] = "hello"  # I want python to give an error when I try to assign a str to be a value in the dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To verify that all keys/values of a <code>dict</code> are of a particular type you could use the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all()</code></a> function:</p>
<pre><code>if all(isinstance(k, str) for k in playerdb):
    print("all keys are strs")
</code></pre>
<p>To enforce the types when <em>storing</em> values you could use a custom function to mediate access to the dictionary or, better yet,  subclass <code>dict</code> and override the <code>__setitem__</code> method, e.g.:</p>
<pre><code>&gt;&gt;&gt; class mydict(dict):
...     def __setitem__(self, key, val):
...         if not isinstance(key, str):
...             raise ValueError("key must be a str")
...         if not isinstance(val, int):
...             raise ValueError("value must be an int")
            dict.__setitem__(self, key, val)
...
&gt;&gt;&gt; d = mydict()
&gt;&gt;&gt; d["key"] = 1
&gt;&gt;&gt; d["key"] = "value"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 6, in __setitem__
ValueError: value must be an int
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python is not type safe. So the values stored in a dictionary can be of any type. One way to prevent values of other types to be added to the dictionary is to define a function which adds the data only if the type matches. Then only use this function to append to the dictionary.</p>
<pre><code>def gain_gold(playername, amount):
    if isinstance(amount, int):
        playerdb[playername] = amount
    else:
       raise Exception('invalid type')
</code></pre>
</div>
<span class="comment-copy">Can you please provide more code and input data examples? The question is incomplete.</span>
<span class="comment-copy">are you aware of <code>type()</code> and yes your question is very vague, try to provide some code</span>
<span class="comment-copy">check this <a href="http://docs.scipy.org/doc/numpy-1.10.1/user/basics.rec.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy-1.10.1/user/basics.rec.html</a></span>
<span class="comment-copy">@Ni <a href="https://cloud.google.com/appengine/docs/python/ndb/entity-property-reference" rel="nofollow noreferrer">cloud.google.com/appengine/docs/python/ndb/…</a> Check this. Can numpy be a JsonProperty? If it can't, it won't be of help to me.</span>
<span class="comment-copy">I'm suggesting to use numpy structures instead of python dict to ensure data types</span>
<span class="comment-copy">Very helpful and thanks! But how do I parase mydict as a dict into a JsonProperty? Will casting it work? "d as dict" <a href="https://cloud.google.com/appengine/docs/python/ndb/entity-property-reference" rel="nofollow noreferrer">cloud.google.com/appengine/docs/python/ndb/…</a></span>
<span class="comment-copy">@Ryan: you can use <code>dict(d)</code> to get a <code>dict</code> instance, but since <code>mydict</code> <b>is-a</b> <code>dict</code>, you shouldn't be needing this</span>
<span class="comment-copy">@eugeney Since mydict may define new members not present in dict, wouldn't casting mydict to dict be an issue? How does python deal with that? Ignore new members?</span>
<span class="comment-copy">@Ryan: nope, you need to learn how subclassing works :)</span>
<span class="comment-copy">@eugeney <a href="http://stackoverflow.com/questions/2465921/how-to-copy-a-dictionary-and-only-edit-the-copy" title="how to copy a dictionary and only edit the copy">stackoverflow.com/questions/2465921/…</a> If d contains many kvps, wouldn't dict(d) be a very expensive operation? Is "dict(d)" equivalent to "d as dict"?</span>
