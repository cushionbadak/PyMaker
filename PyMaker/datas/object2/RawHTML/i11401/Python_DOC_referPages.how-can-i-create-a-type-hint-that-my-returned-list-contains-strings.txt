<div class="post-text" itemprop="text">
<p>I want to use Type Hints in my Python program. How can I create Type Hints for complex data structures like </p>
<ul>
<li>lists with strings</li>
<li>a generator returning integers?</li>
</ul>
<p><strong>Example</strong></p>
<pre><code>def names() -&gt; list:
    # I would like to specify that the list contains strings?
    return ['Amelie', 'John', 'Carmen']

def numbers():
    # Which type should I specify for `numbers()`?
    for num in range(100):
        yield num    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/typing.html"><code>typing</code> module</a>; it contains <em>generics</em>, type objects you can use to specify containers with constraints on their contents:</p>
<pre><code>import typing

def names() -&gt; typing.List[str]:  # list object with strings
    return ['Amelie', 'John', 'Carmen']

def numbers() -&gt; typing.Iterator[int]:  # iterator yielding integers
    for num in range(100):
        yield num
</code></pre>
<p>Depending on how you design your code and how you want to use the return value of <code>names()</code>, you could also use the <a href="https://docs.python.org/3/library/typing.html#typing.Sequence"><code>types.Sequence</code></a> and <a href="https://docs.python.org/3/library/typing.html#typing.MutableSequence"><code>types.MutableSequence</code></a> types here, depending on wether or not you expect to be able to mutate the result.</p>
<p>A generator is a specific type of <em>iterator</em>, so <code>typing.Iterator</code> is appropriate here. If your generator also accepts <code>send()</code> values and uses <code>return</code> to set a <code>StopIteration</code> value, you can use the <a href="https://docs.python.org/3/library/typing.html#typing.Generator"><code>typing.Generator</code> object</a> too:</p>
<pre><code>def filtered_numbers(filter) -&gt; typing.Generator[int, int, float]:
    # contrived generator that filters numbers; returns percentage filtered.
    # first send a limit!
    matched = 0
    limit = yield
    yield  # one more yield to pause after sending
    for num in range(limit):
        if filter(num):
            yield num
            matched += 1
    return (matched / limit) * 100
</code></pre>
<p>If you are new to type hinting, then <a href="https://www.python.org/dev/peps/pep-0483/">PEP 483 â€“ <em>The Theory of Type Hints</em></a> may be helpful.</p>
</div>
