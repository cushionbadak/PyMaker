<div class="post-text" itemprop="text">
<p>I have strings containing code that can have whitespace in front of it (tabs &amp; spaces):</p>
<pre><code>        for foo in bar:
            foo += 1
            for i in range(0, foo):
                print(foo * foo)
</code></pre>
<p>Since whitespace defines scope in python, this won't compile. So what is a good way to remove whitespace from the start of each line ONLY if it occurs on every line in the string, giving the following result:</p>
<pre><code>for foo in bar:
    foo += 1
    for i in range(0, foo):
        print(foo * foo)
</code></pre>
<p>The code is both generated and compiled in the same python program, so no other tools allowed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard library's <code>textwrap.dedent</code> function does exactly what you want.</p>
<p><a href="https://docs.python.org/3/library/textwrap.html#textwrap.dedent" rel="noreferrer">https://docs.python.org/3/library/textwrap.html#textwrap.dedent</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Read first line to string <code>a</code>, then :</p>
<pre><code>lead_space=len(a) - len(a.lstrip()))
</code></pre>
<p>Now for each line <code>a</code> print :</p>
<pre><code>print(a[lead_space:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this,</p>
<pre><code>s = '''
        for foo in bar:
            foo += 1
            for i in range(0, foo):
                print(foo * foo)
    '''

lines = s.split('\n')[1:]  # remove the first empty line, just for this case
nrof_spaces = len(lines[0]) - len(lines[0].lstrip())

result = list()
for line in lines:
    result.append(line[nrof_spaces:])


print('\n'.join([''.join(line) for line in result]))
# Output
for foo in bar:
    foo += 1
    for i in range(0, foo):
        print(foo * foo)
</code></pre>
</div>
<span class="comment-copy">Thank you, that is exactly what i'm looking for!</span>
<span class="comment-copy">Elegant solution. You earned my upvote.</span>
<span class="comment-copy">@sparkandshine Why wouldn't it work?</span>
<span class="comment-copy">For instance, First line, <code>[8 spaces]for foo in bar:</code>; the nth line, <code>[4 spaces]if cond:</code>.</span>
<span class="comment-copy">If your are considering such conditions too, then you may add the <code>lead_space</code> calculation to check if <code>new_lead_space</code> is lesser than the old <code>lead_space</code>. If yes then trim as per new variable else continue the old process.</span>
