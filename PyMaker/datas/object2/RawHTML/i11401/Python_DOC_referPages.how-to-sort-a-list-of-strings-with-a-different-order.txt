<div class="post-text" itemprop="text">
<p>I am writing a function in Python which can sort my list. The problem is that I don't want it in the same order that the <code>sorted()</code> method used. I tried using the <code>sorting()</code> method, but when I sort this string, which I it comes out like this:</p>
<pre><code>0123456789abcdefghijklmnopqrstuvwxyzßàáäåæçèéêìíîñòóôöøùúüžα
</code></pre>
<p>The order I want it to be in is:</p>
<pre><code>0123456789aàáäåæbcçdeèéêfghiìíîjklmnñoòóôöøpqrsßtuùúüvwxyzžα
</code></pre>
<p>Now, I've got a list like this (example):</p>
<pre><code>list = ['x', 'h', 'ê', 'ø', '5', 'ž', 'z', 'α', '3', '1']
</code></pre>
<p>And I want so sort it. If I'd use the <code>sorted()</code> method, it would look like this:</p>
<pre><code>['1', '3', '5', 'h', 'x', 'z', 'ê', 'ø', 'ž', 'α']
</code></pre>
<p>But I want it to be in the same order as the string I gave before.</p>
</div>
<div class="post-text" itemprop="text">
<p>The idea is to associate to each char the index in the specified order and use the indexes of the string chars to do the order comparison.</p>
<p><strong>Note</strong>: only works with Python 3</p>
<p><strong>Sort one char strings</strong></p>
<pre><code>ORDER = "0123456789aàáäåæbcçdeèéêfghiìíîjklmnñoòóôöøpqrsßtuùúüvwxyzžα"
# associate each char with the index in the string
# this makes sort faster for multiple invocations when compared with
# ORDER.index(c)
POS = {c:p for (p, c) in enumerate(ORDER)}

lst = ['x', 'h', 'ê', 'ø', '5', 'ž', 'z', 'α', '3', '1']

lst.sort(key = lambda c: POS[c])
# or, suggested by wim
lst.sort(key = POS.get)
</code></pre>
<p><strong>Sort any length strings</strong></p>
<pre><code>class MyStrOrder:
    def __init__(self, inner):
        self.inner = inner

    def __lt__(self, other):
        for i in range(min(len(self.inner), len(other.inner))):
            a = POS.get(self.inner[i])
            b = POS.get(other.inner[i])
            if a != b:
                return a &lt; b
        return len(self.inner) &lt; len(other.inner)

lst = ["abc", "ab", "aá"]
lst.sort()
print(lst)

lst = ["abc", "ab", "aá"]
lst.sort(key = MyStrOrder)
print(lst)
</code></pre>
<p>Outputs:</p>
<pre><code>['ab', 'abc', 'aá']
['aá', 'ab', 'abc']
</code></pre>
</div>
<span class="comment-copy">See the <a href="https://docs.python.org/2/howto/sorting.html#key-functions" rel="nofollow noreferrer">python tutorial on sorting</a>, especially the second on <code>key</code> functions.  You want something like <code>key = lambda s: reference.index(s)</code> where reference is the string you've listed above with the proper sorting order.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/33900759/sort-list-by-a-given-custom-order">Sort list by a given custom order</a></span>
<span class="comment-copy">The first part of your answer lies in the <code>key</code> parameter to <a href="http://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a>.  The second part is to describe that key function.  The obvious way is a hard-coded <code>dict</code> mapping all of the variants of "a" to just <code>'a'</code>.  Coming up with that on your own might be hard, because there are a <i>lot</i> of Unicode characters that are some variant of an ASCII letter like "a".  (Does "a with combining vector arrow" count?)  Such a function might already be available in a library somewhere.</span>
<span class="comment-copy">no. these are the only characters I need to use!</span>
<span class="comment-copy">@KevinJ.Chase I don't see how there are two "parts" to the question.  The question is how to implement a custom sort order (based on the location of each object to be sorted in a string provided).  I chose my duplicate because the question essentially is sort based on a custom order (based on location in a list provided), abstractly the same question and the solution there could be used in this case with minimal modification.</span>
<span class="comment-copy">good, but <code>lst.sort(key=pos.get)</code> lambda not needed</span>
<span class="comment-copy">@wim That's a great suggestion. Thanks.</span>
<span class="comment-copy">This works great for single-character strings. I don't know if that's sufficient for the OP, but the answer would be much more useful for the ages if you could generalize it to arbitrary length strings.</span>
<span class="comment-copy">@MarkRansom I update the answers. Thanks for the suggestion.</span>
<span class="comment-copy">There's a small bug in <code>__lt__</code>, it fails when one string is a subset of the other. You can fix it by replacing <code>return False</code> with <code>return len(a) &lt; len(b)</code>. And someone should mention that this is Python 3 where strings are Unicode by default.</span>
