<div class="post-text" itemprop="text">
<pre><code>a = ['a', 'b', 'c', 'd']
b = set(a)
print isinstance(a, types.ListType)
print isinstance(b, types.ListType)
</code></pre>
<p>The result shows that b is not of types.ListType. However, there is no 'SetType' in Python. So what is the type 'XXXType' so that isinstance(b, types.XXXType) is True?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>isinstance(b, set)</code>.</p>
<p>The <code>types</code> references to built-in types are just there for convenience<sup>*</sup> and are otherwise deprecated (they have been removed from the <a href="https://docs.python.org/3/library/types.html" rel="nofollow">Python 3.x version of the <code>types</code> module</a>). As such <code>set</code> was never added.</p>
<p>For example, <code>types.ListType</code> is just an alias for <code>list</code>:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.ListType is list
True
&gt;&gt;&gt; isinstance([1, 2, 3], list)
True
</code></pre>
<p>If you <strong>must</strong> have a <code>SetType</code> reference in the <code>types</code> module, simply add the alias yourself:</p>
<pre><code>types.SetType = set
</code></pre>
<p>If you are looking for an <em>abstract base class</em> for the basic container type, use the <a href="https://docs.python.org/2/library/collections.html#collections-abstract-base-classes" rel="nofollow"><code>collections</code> module ABCs</a>; these signal what <em>methods</em> a type support and checking against these types can let you detect a wider set of types that support specific operations (rather than be an instance of just the <code>list</code> and <code>set</code> types):</p>
<pre><code>&gt;&gt;&gt; from collections import Set, MutableSequence
&gt;&gt;&gt; isinstance([1, 2, 3], MutableSequence)
True
&gt;&gt;&gt; isinstance({1, 2, 3}, Set)
True
</code></pre>
<hr/>
<p><sup>*</sup> <em>History lesson</em>: Once upon a time, the built-in types like <code>int</code> and <code>list</code> were not really classes, and the built-in names <code>int()</code> and <code>list()</code> were simply <em>functions</em> to convert to the built-in types. That means that the names were simply not the same object as <code>types.IntType</code> and <code>types.ListType</code> and you <em>had</em> to use the <code>types</code> module to be able to use <code>isinstance()</code> on a list object. That time is now long, long behind us, and the role of the <code>types</code> module has changed.</p>
</div>
<span class="comment-copy"><code>isinstance(a, list)</code> and <code>isinstance(b, set)</code> return True.</span>
