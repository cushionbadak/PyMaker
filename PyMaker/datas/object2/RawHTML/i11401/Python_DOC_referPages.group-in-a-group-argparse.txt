<div class="post-text" itemprop="text">
<p>So I'm using argparse and I'm trying to create something that I can't seem to find the solution anywhere.</p>
<p>I'm trying to do <code>[A | [B C]]</code>. So either I have <code>A</code> or <code>(B and C)</code>.</p>
<p>EDIT
So some example of code would be</p>
<pre><code>parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required=False)
group.add_argument("-a")
more = group.add_mutually_exclusive_group()
more.add_argument("-b")
more.add_argument("c")
</code></pre>
<p>This however ends up giving me <code>[A | [B | C]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The mutually exclusive group mechanism is just for a simple (flat) exclusive or group.  There's no mechanism for nesting one group in another, or for applying other logic (<code>and</code>, <code>any</code> etc). </p>
<p>You need to do your own testing after parsing.  As long as the defaults are reasonable (e.g. the default default <code>None</code>) that isn't hard.</p>
<p>Subparsers provide another kind of grouping logic, which may work for you.</p>
<p>This has been raised in other SO questions, and a Python bug/issue, if you need to explore it in more detail.</p>
<p>===============</p>
<p><code>argument groups</code>, despite the name, do not work with mutually exclusive groups.  Their intended purpose is entirely different (grouping of help lines).  You can nest one mutually exclusive group within another, but the net effect is to put everything in one group.</p>
<p><a href="https://stackoverflow.com/questions/35369448/argparse-some-mutually-exclusive-arguments-in-required-group">argparse: some mutually exclusive arguments in required group</a></p>
<p>============================</p>
<pre><code>import argparse

usage = '%(prog)s [A | [B ? C]]'
parser = argparse.ArgumentParser(usage=usage)
parser.add_argument('-a')
parser.add_argument('-b')
parser.add_argument('-c')
args=parser.parse_args()

print(args)
if args.a is not None:
   if not(args.b is None and args.c is None):
      parser.error('Cannot use b or c with a')
</code></pre>
<p>with resulting runs</p>
<pre><code>1722:~/mypy$ python3 stack37311550.py -a 1
Namespace(a='1', b=None, c=None)
1726:~/mypy$ python3 stack37311550.py -a 1 -b2
Namespace(a='1', b='2', c=None)
usage: stack37311550.py [A | [B ? C]]
stack37311550.py: error: Cannot use b or c with a
1726:~/mypy$ python3 stack37311550.py -c3 -b2
Namespace(a=None, b='2', c='3')
1726:~/mypy$ python3 stack37311550.py -c3 -b2 -a1
Namespace(a='1', b='2', c='3')
usage: stack37311550.py [A | [B ? C]]
stack37311550.py: error: Cannot use b or c with a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import argparse

parser = argparse.ArgumentParser(description='test group')
subparsers = parser.add_subparsers(help='sub-commands help')
sp = subparsers.add_parser('A', help='A command')
sp.set_defaults(cmd = 'A')
sp = subparsers.add_parser('B', help='B command')
sp.set_defaults(cmd = 'B')
sp.add_argument('C', help='C option')

args = parser.parse_args()

if (args.cmd == 'A'):
    print("running A mode")
else:
    print("running B mode with C=%s" % args.C)
</code></pre>
<p>Here's execution log:</p>
<pre><code>$ python test.py A
running A mode
$ python test.py B
usage: test.py B [-h] C
$ python test.py B some
running B mode with C=some
</code></pre>
<p>Mutually exclusive groups are intended for cases when user have to select exactly one option out of a given set.</p>
</div>
<span class="comment-copy">Sounds like you need <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">sub-commands</a>, but more information and some sample code would be helpful.</span>
