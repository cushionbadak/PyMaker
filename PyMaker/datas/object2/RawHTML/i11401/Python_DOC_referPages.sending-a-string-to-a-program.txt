<div class="post-text" itemprop="text">
<p>I am trying to send a string from a <kbd>program 1</kbd> to another program <kbd>program 2</kbd>, both in python 3<br/>
e.g.</p>
<pre><code>#_____________________________________1.py
a = input('Type in a string: ')
#                                     send somehow a string a from this program
#                                     to the second program
</code></pre>
<p>I want to somehow send a string <strong><code>a</code></strong> to my second program so it will print out <code>a</code>:</p>
<pre><code>#_____________________________________2.py
#                                     receive somehow a string from the first
#                                     program and store it in a
print(a)
</code></pre>
<p><strong>How do I do this?</strong></p>
<p>I am still a beginner programmer and would love it if you could help me.</p>
<ol>
<li>I need to be able to enter the string in <code>1.py</code></li>
<li>I need then be able to access the string that I entered from <code>2.py</code>.</li>
<li>I have to have them as two separate files.</li>
</ol>
<hr/>
<p>ANSWER:</p>
<p>I found a way to solve this.</p>
<pre><code>import subprocess
username = input()
subprocess.Popen(['python.exe', 'file.py', username])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have many way communicate between two or N python program, Ex:</p>
<ul>
<li><a href="https://docs.python.org/3/library/socket.html" rel="nofollow">Socket</a></li>
<li>Database - MySQL, Mongodb, SQL Server... etc</li>
</ul>
<p>or maybe you can try ZeroMQ</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to do that, you could use <kbd>socket</kbd>, <kbd>file</kbd>, <kbd>pipe</kbd>, <kbd>shared-memory</kbd>, <kbd>message</kbd>, ... to transfer a string from one process to another.</p>
<p>As an example of using <kbd>messages</kbd>, <strong><code>ZeroMQ</code></strong> provides an easy messaging library to do that smarter, than with system (raw, low level) sockets:<br/>
for more details look into <a href="http://zguide.zeromq.org/" rel="nofollow">http://zguide.zeromq.org/</a></p>
<p>A HelloWorld server example:</p>
<pre><code>import time
import zmq

context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://*:5555")

while True:
    #  Wait for next request from client
    message = socket.recv()
    print("Received request: %s" % message)

    #  Do some 'work'
    time.sleep(1)

    #  Send reply back to client
    socket.send(b"World")
</code></pre>
<p>A HelloWorld client example:</p>
<pre><code>import zmq

context = zmq.Context()

#  Socket to talk to server
print("Connecting to hello world server…")
socket = context.socket(zmq.REQ)
socket.connect("tcp://localhost:5555")

#  Do 10 requests, waiting each time for a response
for request in range(10):
    print("Sending request %s …" % request)
    socket.send(b"Hello")

    #  Get the reply.
    message = socket.recv()
    print("Received reply %s [ %s ]" % (request, message))
</code></pre>
<p>With files, you write a <kbd>file</kbd> with program A then poll on it with program B.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># file_1.py
def get_input():
    return input('Type in a string: ')

# file_2.py
from file_1 import get_input

print(get_input())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most common way of two programs communicating together is through http, tcp or other protocol. The same way as your browser (one program) communicates with the web server (another program).</p>
<p>You can send http request from one program and the second has to listen for that.</p>
<p>If you want more info, look for SOA. It is a bit more complicated than that, so if you have any questions, ask.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found the answer.</p>
<pre><code>import subprocess
username = input()
subprocess.Popen(['python.exe', 'file.py', username], subprocess.creationflags=CREATE_NEW_CONSOLE)
</code></pre>
</div>
<span class="comment-copy">and what are you trying to achieve specifically?</span>
<span class="comment-copy">@Divisadero  I basically have one program with takes the account you are logging in to and says to the other program that it is logged into an account e.g. "Greg"</span>
<span class="comment-copy">@Divisadero Better explanation: A user types in their username and password and the program checks if it username and password is correct. If the information is correct, it runs another program which is the program you do all your account stuff in. I need the program to know that you are user "Dave" or whatever.</span>
<span class="comment-copy">In that case maybe you do NOT need SOA, if the first program can facilitate the second directly by using its modules. The question is if it can :D</span>
<span class="comment-copy">@Divisadero I found a way to do what I wanted to do. I edited my post for the answer.</span>
<span class="comment-copy">Wow, this is complicated.</span>
<span class="comment-copy">Would there be a way to send the string through a function parameter or something?</span>
<span class="comment-copy">Question is about two different programs running, not just importing modules.</span>
<span class="comment-copy">Levi, look at the edit I made in the last paragraph. I must have them as two separate programs.</span>
<span class="comment-copy">Ahh, I see. Similar question was answered here: <a href="http://stackoverflow.com/questions/16213235/communication-between-two-python-scripts">link</a></span>
<span class="comment-copy">Although this code may answer the question, providing additional context regarding <i>why</i> and/or <i>how</i> it answers the question would significantly improve its long-term value.  Please <a href="https://stackoverflow.com/posts/37203848/edit">edit</a> your answer to add some explanation.</span>
<span class="comment-copy">ill research up about SOA</span>
<span class="comment-copy">Could I use the module socket?</span>
<span class="comment-copy">of course, @AlexGarcia is right... there must be a platform for SOA programming in python world, I dont know... I alwayes used C# WCF for that</span>
<span class="comment-copy">Welcome to StackOverflow, Nic. Great sign that you try to find solutions on your own for your initial question. With a hope you would not consider it impolite/harmfull, let me post a few notes about the proposal made in this answer. While it might look as a solution, there are several weaknesses and your further learning shall benefit from these points of view. The worst is, that process 1 cannot send anything to process 2 in arbitrary time. That is the strongest objection. Next, your architecture requires process 2 not to exist before 1 decides to send the 1st &amp; the only piece of data.</span>
<span class="comment-copy">Thanks @user3666197 I edited my answer as I realized that I had left some things out. It may not be the correct way of doing it but it dose exactly what I want it to do.</span>
