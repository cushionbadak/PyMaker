<div class="post-text" itemprop="text">
<p>How do I package a Python module together with a precompiled <code>.so</code> library? Specifically, how do I write <code>setup.py</code> so that when I do this in Python</p>
<pre><code>&gt;&gt;&gt; import top_secret_wrapper
</code></pre>
<p>It can easily find <code>top_secret.so</code> without having to set <code>LD_LIBRARY_PATH</code>?</p>
<p>In my module development environment, I have the following file structure:</p>
<pre><code>.
├── top_secret_wrapper
│   ├── top_secret.so
│   └── __init__.py
└── setup.py
</code></pre>
<p>Inside <code>__init__.py</code>, I have something like:</p>
<pre><code>import top_secret
</code></pre>
<p>Here's my <code>setup.py</code></p>
<pre><code>from setuptools import setup, Extension

setup(
    name = 'top_secret_wrapper',
    version = '0.1',
    description = 'A Python wrapper for a top secret algorithm',
    url = None,
    author = 'James Bond',
    author_email = 'James.Bond.007@mi6.org',
    license = 'Spy Game License',
    zip_safe = True,
)
</code></pre>
<p>I'm sure my <code>setup.py</code> is lacking a setting where I specify the location of <code>top_secret.so</code>, though I'm not sure how to do that.</p>
</div>
<div class="post-text" itemprop="text">
<p>If that library should also be compiled during install you can describe this as an <a href="https://docs.python.org/2/distutils/setupscript.html#describing-extension-modules" rel="nofollow">extension module</a>. If you just want to ship it add it as <a href="https://docs.python.org/2/distutils/setupscript.html#installing-package-data" rel="nofollow">package_data</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>As is mentioned in <a href="https://docs.python.org/3/distutils/setupscript.html#installing-package-data" rel="nofollow noreferrer">setupscript.html#installing-package-data</a>:</p>
<pre><code>setup(
    ...
    package_data={'top_secret_wrapper': ['top_secret.so']},
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What I ended up doing is: </p>
<pre><code>setup(
    name='py_my_lib',
    version=version,  # specified elsewhere
    packages=[''],
    package_dir={'': '.'},
    package_data={'': ['py_my_lib.so']},
)
</code></pre>
<p>This way I get to import the lib by its name, and don't have another level of nestedness:</p>
<pre><code>import py_my_lib
</code></pre>
<p>and not</p>
<pre><code>from py_my_lib_wrapper import py_my_lib
</code></pre>
</div>
<span class="comment-copy">Compiling the <code>.so</code> is not an option, since I do not have the C source for it.</span>
<span class="comment-copy">Make it package_data then?</span>
