<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python">this</a> quieston's answer </p>
<blockquote>
<p><em>is will return True if two variables point to the same object, == if the objects referred to by the variables are equal.</em></p>
</blockquote>
<p>Aren't <code>dir(1)</code> and <code>dir(True)</code> point to the same object? Both of them prints a list of the same methods. Am I missing something about <em>object</em> here?</p>
<pre><code>&gt;&gt;&gt; dir(1) == dir(True)
True
&gt;&gt;&gt; dir(1) is dir(True)
False
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <code>True</code> is not <code>1</code>:</p>
<pre><code>&gt;&gt;&gt; True is not 1
True
</code></pre>
<p>Second, as the <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow">documentation</a> says</p>
<blockquote>
<p><code>dir([object])</code> </p>
<p>[...] With an argument, attempt to return a list of valid attributes for that object. </p>
<p>If the object has a method named <code>__dir__()</code>, this method will be called and must return the list of attributes. This allows objects that implement a custom <code>__getattr__()</code> or <code>__getattribute__()</code> function to customize the way <code>dir()</code> reports their attributes.</p>
<p>If the object does not provide <code>__dir__()</code>, the function tries its best to gather information from the objectâ€™s <code>__dict__</code> attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom <code>__getattr__()</code>.</p>
<p>The resulting list is sorted alphabetically. [...]</p>
</blockquote>
<hr/>
<p>Now, <code>int</code> and <code>bool</code> both have the <code>__dir__</code> slot filled from <code>object.__dir__</code>:</p>
<pre><code>&gt;&gt;&gt; int.__dir__
&lt;method '__dir__' of 'object' objects&gt;
&gt;&gt;&gt; bool.__dir__
&lt;method '__dir__' of 'object' objects&gt;
</code></pre>
<hr/>
<p>And the documentation for <a href="https://docs.python.org/3/reference/datamodel.html#object.__dir__" rel="nofollow"><code>object.__dir__</code></a> adds this one extra bit of information:</p>
<blockquote>
<p><strong><code>object.__dir__(self)</code></strong></p>
<p>Called when <code>dir()</code> is called on the object. A sequence must be returned. <code>dir()</code> converts the returned sequence to a list and sorts it.</p>
</blockquote>
<p>As the documentation says, <code>dir</code> constructs a <em>new</em> list for <em>each invocation</em> and then <em>sorts</em> it. (We could also look into the code for <a href="https://github.com/python/cpython/blob/fa2b18ad4ea6479f43fd31e3a42baeac8784289c/Objects/object.c#L1300" rel="nofollow"><code>_dir_object</code></a> which calls <a href="https://github.com/python/cpython/blob/fa2b18ad4ea6479f43fd31e3a42baeac8784289c/Objects/object.c#L1319" rel="nofollow"><code>PySequence_List</code></a> on the return value of <code>__dir__</code>; <code>PySequence_List</code> takes a sequence as an argument, and returns a <em>new</em> list with the same elements as the original sequence; this newly created list is then <a href="https://github.com/python/cpython/blob/fa2b18ad4ea6479f43fd31e3a42baeac8784289c/Objects/object.c#L1323" rel="nofollow">sorted</a> and <a href="https://github.com/python/cpython/blob/fa2b18ad4ea6479f43fd31e3a42baeac8784289c/Objects/object.c#L1327" rel="nofollow">returned</a>)</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; dir(a) is dir(a)
False
</code></pre>
<hr/>
<p>Third, <code>True</code> is an instance of type <code>bool</code>, which is a subclass of <code>int</code>.</p>
<pre><code> &gt;&gt;&gt; isinstance(True, bool)
 True
 &gt;&gt;&gt; isinstance(1, int)
 True
 &gt;&gt;&gt; issubclass(bool, int)
 True
 &gt;&gt;&gt; isinstance(True, int)
 True
</code></pre>
<p>Additionally, <code>bool</code> does not add any methods that are not already present in <code>int</code>. And because the resulting list is sorted alphabetically,</p>
<pre><code>&gt;&gt;&gt; dir(1) == dir(True)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Everytime thet you execute <code>dir</code> the new object is created.</p>
<pre><code>&gt;&gt;&gt; dir(True) is dir(True)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dir</code> creates a new object for the <code>int</code> that it's returning each time.</p>
<p>Basically you got confused between <code>1 is True</code> and <code>dir(1) is dir(True)</code> and <code>dir(1) == dir(True)</code>.</p>
</div>
<span class="comment-copy">You answered yourself.</span>
<span class="comment-copy">They point to two distinct objects, which happen to have the same content</span>
<span class="comment-copy"><i>"As the documentation says"</i> - Where does it?</span>
<span class="comment-copy">@StefanPochmann the documentation says that <code>dir()</code> gathers the data from the object's <code>__dict__</code> attribute, and then sorts it alphabetically. However I need to add a clarification that there is <code>__dir__</code> there</span>
<span class="comment-copy">@StefanPochmann fixed</span>
<span class="comment-copy">@AnttiHaapala Third part is helped me for understand this.</span>
<span class="comment-copy">If <code>(1).__dir__()</code> always returns the same list and the "conversion" is like <code>if not isinstance(x, list): x = list(x)</code> and the sorting is like <code>x.sort()</code>, then <code>dir</code> would always return the same list, not a new one.</span>
