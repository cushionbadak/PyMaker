<div class="post-text" itemprop="text">
<p>just asked a question about multiplying matrices and that can be found <a href="https://stackoverflow.com/questions/37232397/how-to-multiply-two-matrices-together-in-python?noredirect=1#comment61994574_37232397">here</a>, I have one more question though about multiplying matrices.  Say I have the following matrices:</p>
<pre><code>matrix_a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

matrix_b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>
<p>How could I get a result like this:</p>
<pre><code>[[1, 4, 9], [16, 25, 36], [49, 64, 81]]
</code></pre>
<p>...so that each element is basically being multiplied by the single corresponding element of the other array. Does anyone know how to do that?</p>
<p>Thanks guys!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could express the element-wise product (and matrix product) using <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>, <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a>, and the <a href="http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/" rel="nofollow"><code>*</code> argument-unpacking operator</a>:</p>
<pre><code>matrix_a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]    
matrix_b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

elementwise_product = [[ai*bi for ai, bi in zip(*rows)] 
                       for rows in zip(matrix_a, matrix_b)]    
print(elementwise_product)
# [[1, 4, 9], [16, 25, 36], [49, 64, 81]]

matrix_product = [[sum([ai*bi for ai, bi in zip(row_a, col_b)])
                   for col_b in zip(*matrix_b)]
                  for row_a in matrix_a]
print(matrix_product)
# [[30, 36, 42], [66, 81, 96], [102, 126, 150]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The numpy package provides an array object that can do both element-wise and matrix-wise calculations:</p>
<pre><code>import numpy as np
matrix_a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
matrix_b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

matrix_a*matrix_b
np.dot(matrix_a, matrix_b)
</code></pre>
<p>This outputs:</p>
<pre><code>array([[ 1,  4,  9],
       [16, 25, 36],
       [49, 64, 81]])

array([[ 30,  36,  42],
       [ 66,  81,  96],
       [102, 126, 150]])
</code></pre>
<p>Numpy is available using <code>pip install numpy</code> or by using one of the numerical python distributions such as anaconda or pythonxy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since those lists are equal, you can just multiply it with itself. Here is a slightly verbose way to iterate the matrix and store the result in a new one.</p>
<pre><code>matrix = [[1,2,3],[4,5,6],[7,8,9]]

result_matrix = [[],[],[]]

print (matrix)

for i in range(0, len(matrix)):
    for j in range(0,len(matrix[i])):
        result_matrix[i].append(matrix[i][j] * matrix[i][j])
print (result_matrix)
</code></pre>
<p><strong>Ouput</strong></p>
<pre><code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
[[1, 4, 9], [16, 25, 36], [49, 64, 81]]
</code></pre>
</div>
<span class="comment-copy">Is there a reason you're not using NumPy?</span>
<span class="comment-copy">This is awesome! Thank you so much for the help!</span>
