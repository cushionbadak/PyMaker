<div class="post-text" itemprop="text">
<p>I have a set of three variables x, y, z and I want to check if they <strong>all share the same value</strong>. In my case, the value will either by 1 or 0, but I only need to know if they are all the same. Currently I'm using</p>
<pre><code>if 1 == x and  1 == y and 1 == z: 
    sameness = True
</code></pre>
<p>Looking for the answer I've found:</p>
<pre><code>if 1 in {x, y, z}:
</code></pre>
<p>However, this operates as</p>
<pre><code>if 1 == x or  1 == y or 1 == z: 
    atleastOneMatch = True
</code></pre>
<p>Is it possible to check if 1 is in each: x, y, and z? 
Better yet, is there a more concise way of checking simply if x, y, and z are the same value?</p>
<p>(if it matters, I use python 3)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have an arbitrary sequence, use the <a href="https://docs.python.org/3/library/functions.html#all"><code>all()</code> function</a> with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions">generator expression</a>:</p>
<pre><code>values = [x, y, z]  # can contain any number of values
if all(v == 1 for v in values):
</code></pre>
<p>otherwise, just use <code>==</code> on <em>all three variables</em>:</p>
<pre><code>if x == y == z == 1:
</code></pre>
<p>If you only needed to know if they are all the same value (regardless of what value that is), use:</p>
<pre><code>if all(v == values[0] for v in values):
</code></pre>
<p>or</p>
<pre><code>if x == y == z:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check if they are all the same (either 1 or 2):</p>
<pre><code>sameness = (x == y == z)
</code></pre>
<p>The parentheses are optional, but I find it improves readability</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>x == y == z == 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use something similar to what you have:</p>
<pre><code>sameness = (len({x, y, z}) == 1)
</code></pre>
<p>This allows for any number of variables.  For example:</p>
<pre><code>variables = {x, y, z, a, b, ...}
sameness = (len(variables) == 1)
</code></pre>
<p><strong>Note:</strong> Creating a set means that each variable needs to be hashed and the hashed values need to be stored, but <code>all()</code> with a generator expression is short-circuiting and keeps track of only two values at a time.  Therefore, besides its readability, the generator expression is more efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way:</p>
<pre><code>sameness = all(e == 1 for e in [x, y, z])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In my case, the value will either by 1 or 2, <strong>but I only need to know if they are all the same</strong></p>
</blockquote>
<blockquote>
<p>Is it possible to check if 1 is in each: x, y, and z?
  <strong>Better yet, is there a more concise way of checking simply if x, y, and z are the same value?</strong></p>
</blockquote>
<p>Sure:</p>
<pre><code>x == y == z
</code></pre>
<p>which is equivalent to</p>
<pre><code>(x == y) and (y == z)
</code></pre>
<p>If you have an arbitrary (nonzero) number of values to compare:</p>
<pre><code>all(values[0] == v for v in values[1:])
</code></pre>
</div>
<span class="comment-copy">One note of caution about these techniques; by trying to make your code more succinct, you are losing the ability to short-circuit the expression. This maybe not have an impact with simple variables but if you were using function calls it might be important.</span>
<span class="comment-copy">For the third one, we can also use this: values[1:] == values[:-1]</span>
<span class="comment-copy">@DeSanta: but that creates two new lists.</span>
<span class="comment-copy">Wow. I dint know that. Can you please explain how?</span>
<span class="comment-copy">@DeSanta: slicing a list returns a new list object. <code>values[1:]</code> creates a new list object with the references for indices 1 and up copied over. Same for the <code>values[:-1]</code>.</span>
<span class="comment-copy">Got it. Thank you.</span>
<span class="comment-copy">Neat use of <code>set</code> behaviour, but kinda obscures the intention, don't you think?</span>
<span class="comment-copy">@das-g: Fortunately, the variable name makes the intention clear. Once the intention is clear, it is easy to see how the code works.</span>
<span class="comment-copy">Creating a set is not without cost; each value has to be hashed (in addition to the equality tests), plus the memory allocation for the set object itself. <code>all()</code> with a generator expression or a chain of <code>==</code> <i>short circuit</i>, so not all values need to be tested if at least one value is not equal to the others.</span>
<span class="comment-copy">@MartijnPieters: Yes.  I have added a note to that effect.</span>
