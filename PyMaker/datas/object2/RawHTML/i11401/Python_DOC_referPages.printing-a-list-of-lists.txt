<div class="post-text" itemprop="text">
<p>I'm learning about making List of Lists by designing a family tree.  Below is one way of doing it that I came up with but am having trouble printing the result.  For example:</p>
<p>if A has 2 children, B &amp; C...
then B has 2 children, D &amp; E...
while C only has on child, F...</p>
<p>I would want the result to print: [A, [B, [D, E]], [C, [F]]]</p>
<p>Would appreciate any improvements in my code, advice on how to print the result as above, or print it in a graphical form.</p>
<pre><code>class FamilyTree:
    def __init__(self, root):
        self.name = [root]
        nmbr = int(input("How many children does " + root + " have?"))
        if nmbr is not 0:
            for i, child in enumerate(range(nmbr)):
                name = input("What is one of " + root + "'s child's name?")
                setattr(self, "child{0}".format(i), FamilyTree(name))
r = print(FamilyTree('A'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__str__#object.__str__" rel="nofollow"><code>__str__</code></a> method which is called by <code>print()</code> function:</p>
<pre><code>class FamilyTree:
    def __init__(self, root):
        self.name = root
        self.children = []
        nmbr = int(input("How many children does " + root + " have? "))
        if nmbr is not 0:
            for i, child in enumerate(range(nmbr)):
                name = input("What is one of " + root + "'s child's name? ")
                self.children.append(FamilyTree(name))
    def __str__(self):
        return '[' + self.name + ''.join(', ' + str(c) for c in self.children) + ']'
r = print(FamilyTree('A'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's a good idea to split the object creation from the input and output. Also, using <code>setattr</code> will make it more difficult to write the output.</p>
<p>Here is a solution that allows you to create a <code>FamilyTree</code> with or without reading input from the user:</p>
<pre><code>class FamilyTree:
    def __init__(self, root, childs = []):
        self.name = root
        self.childs = childs

    def read(self):
        nmbr = int(input("How many children does " + self.name + " have? "))
        if nmbr is not 0:
            for _ in range(nmbr):
                name = input("What is one of " + self.name + "'s child's name? ")
                child = FamilyTree(name)
                child.read()
                self.childs.append(child)

    def __repr__(self):
        if len(self.childs) == 0:
            return str("{}".format(self.name))
        else:
            return str("{}, {}".format(self.name, self.childs))

# creates a FamilyTree directly so we can test the output
r = FamilyTree(
        'A',
        [
            FamilyTree(
                'B',
                [FamilyTree('C'), FamilyTree('C')]
            ),
            FamilyTree(
                'C',
                [FamilyTree('F')]
            )
        ]
    )

# or read input from the user
# r = FamilyTree('A')
# r.read()

print(r)
</code></pre>
<p>Output</p>
<pre><code>A, [B, [C, C], C, [F]]
</code></pre>
</div>
<span class="comment-copy">You can't print a tree while you're building it... (unless you build it in-order that is).</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/20242479/printing-a-tree-data-structure-in-python">Printing a Tree data structure in Python</a></span>
