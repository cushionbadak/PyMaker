<div class="post-text" itemprop="text">
<p>I am making a GUI with tkinter that allows me to click a button that will run a port scan. I have a script for a port scan that functions correctly, I have managed to open the port scanner through the button on the GUI but then I receive an error that I otherwise don't receive when running the port scanner alone. </p>
<pre><code>Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Users\Steve\AppData\Local\Programs\Python\Python35-32\lib\tkinter\__init__.py", line 1550, in __call__
    return self.func(*args)
  File "&lt;string&gt;", line 51, in Scan
NameError: name 'IP_Input' is not defined
</code></pre>
<p>My code:</p>
<pre><code>class CallWrapper:
    """Internal class. Stores function to call when some user
    defined Tcl function is called e.g. after an event occurred."""
    def __init__(self, func, subst, widget):
        """Store FUNC, SUBST and WIDGET as members."""
        self.func = func
        self.subst = subst
        self.widget = widget

    def __call__(self, *args):
        """Apply first function SUBST to arguments, than FUNC."""
        try:
            if self.subst:
                args = self.subst(*args)
            return self.func(*args)           # THIS IS THE ERROR #
        except SystemExit:
            raise
        except:
            self.widget._report_exception()


class XView:
    """Mix-in class for querying and changing the horizontal position
    of a widget's window."""

    def xview(self, *args):
        """Query and change the horizontal position of the view."""
        res = self.tk.call(self._w, 'xview', *args)
</code></pre>
<h1>THIS IS THE CODE FOLLOWING FOR THE LINE 51 ERROR</h1>
<pre><code>def Scan():
    print ('Scan Called.') #Debugging
    IP = str(IP_Input.get(0.0, tkinter.END))    #THIS IS ERROR LINE 51#
    print ("IP #Debugging")
    Start = int(PortS.get(0.0, tkinter.END))
    End = int(PortE.get(0.0, tkinter.END))
    TestSocket = socket.socket()
    CurrentPort = Start
    OpenPorts = 0
    print ('Starting scan...')
    HowFar = int(CurrentPort/End * 100)
    ProgText = HowFar, r'%'
    Label1.config(text=('Percentage Done:', ProgText))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with your <code>exec</code> statement. You're opening your other <code>.py</code> file named <code>port_scanner.py</code> and then calling <code>exec(open("./port scanner.py))</code>.</p>
<p>This just isn't going to work.</p>
<p><strong>Why this doesn't work:</strong></p>
<p>When you do <code>exec(open("path to .py file").read())</code> exec is of course executing this code, but the problem is that the global variables in this file aren't within the scope. </p>
<p>So, to make this work (which I don't recommend) you'd have to use:</p>
<pre><code>exec(open(path).read(), globals())
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow">documentation</a></p>
<blockquote>
<p>If the globals dictionary does not contain a value for the key <strong>builtins</strong>, a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own <strong>builtins</strong> dictionary into globals before passing it to exec().</p>
</blockquote>
<p>If you really want to call your file this way then you should just use <code>os.system</code>.</p>
<p><strong>Alternative approach:</strong></p>
<p>You really don't need to call your file this way. You now have two instances of <code>Tk()</code> running. If you need another window then a widget is provided for this purpose. It is the <code>Toplevel</code> widget. You can restructure your code to create a <code>Toplevel</code> instance containing the port scanner app on your button click. An example being, create your port scanner app with the Toplevel widget (in your other file if you wish) then import the "app" into your file and on the button click have it initialize the app.</p>
<p><strong>Additional Notes:</strong></p>
<p>You're calling a <code>while</code> loop and if this runs (for any noticeable amount of time) then this is going to block the GUI's main event loop and causing your GUI to "hang". </p>
<p>Your first guess should not be that a part of the <em>widely tested and used</em> python standard library is flawed. The problem is (99.9% of the time)</p>
<pre><code>while True:
    print("In your own code.")
</code></pre>
</div>
<span class="comment-copy">hi, cheers i hope this helps:</span>
<span class="comment-copy">IP_Input = tkinter.Text(win) IP_Input.pack(expand=tkinter.YES, fill=tkinter.NONE) IP_Input.place_configure(width=120, height=20) IP_Input.place_configure(x=40, y=10) print ("IP_Input Done")</span>
<span class="comment-copy">this is my basic GUI - <a href="http://pastebin.com/1qgWQ4EL" rel="nofollow noreferrer">pastebin.com/1qgWQ4EL</a>, This is the port scanner - <a href="http://pastebin.com/df2QQr8A" rel="nofollow noreferrer">pastebin.com/df2QQr8A</a>, but the problems seems to be with this <i>init</i>.py file <a href="http://pastebin.com/j03AxHPN" rel="nofollow noreferrer">pastebin.com/j03AxHPN</a></span>
<span class="comment-copy">The error seems pretty self-explanatory. It says you haven't defined <code>IP_Input</code>, and there's nowhere in your code that you've set it.</span>
<span class="comment-copy">Thank you very much i found this very useful, i am curious tho, why would one not do it this way, exec(open(path).read(), globals())</span>
