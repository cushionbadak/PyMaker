<div class="post-text" itemprop="text">
<p>I am trying to make a leaderboard.
Here is a list i have :</p>
<pre><code>list=['rami4\n', 'kev13\n', 'demian6\n']
</code></pre>
<p>I would like to be able to sort this list from highest number to smallest, or even smallest to highest, giving something like : </p>
<pre><code>list=['kev13\n', 'demian6\n', 'rami4\n']
</code></pre>
<p>I tried to use stuff like    <code>re.findall('\d+', list[loop])[0]</code> but i only managed to get, out of the list, the best player. Not wanting to repeat the code for as many players as there are, does anyone have an idea ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You indeed have to use the <a href="https://docs.python.org/3/library/re.html" rel="nofollow"><code>re</code></a> module, but also the <code>key</code> parameter of the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sort()</code></a> method.</p>
<pre><code>reg = re.compile('\w*?(\d+)\\n')
lst.sort(key=lambda s: int(reg.match(s).group(1)))
</code></pre>
<p>It works fine using <code>findall()</code> as you did too:</p>
<pre><code>reg = re.compile('\d+')
lst.sort(key=lambda s: int(reg.findall(s)[0]))
</code></pre>
<p>Note that I <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow"><code>compile()</code></a> the regular expression so it is computed once and for all rather than for each element in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have an other solution based on Object Oriented Programming and the overriding of the <code>__lt__</code> special methods of <code>str</code>.</p>
<pre><code>import re

class SpecialString(str):
    def __lt__(self, other):
        pattern=re.compile(r"\d+")
        return int(pattern.search(str(self)).group(0)) &lt;  int(pattern.search(str(other)).group(0))

if __name__ == "__main__":
    listing = ['rami4\n', 'kev13\n', 'demian6\n']
    spe_list = [SpecialString(x) for x in listing]
    spe_list.sort()
    print(spe_list)
</code></pre>
<p>Which print to the standard output:</p>
<pre><code>['rami4\n', 'demian6\n', 'kev13\n']
</code></pre>
<p>This method allows you to not rewrite the <code>sort</code> function and use the built-in one (which is probably optimized). More over, since your strings may be thinked like "specialization of the <code>str</code> class", the inheritance mecanism is very suitable because you keep all its properties but re-write its comparison mecanism.</p>
</div>
<span class="comment-copy">Thanks Delgan, that worked. However could you explain a bit more about the compile() you used ?</span>
<span class="comment-copy">@ArwanCredoz Some information, <a href="https://msdn.microsoft.com/library/8zbs0h2f%28v=vs.110%29.aspx" rel="nofollow noreferrer">here</a>. In short, a Regex is a string that is first converted to a sequence of instructions, which are then applied to your string to match. The compilation save the first step, and so increase speed if you have to match the same regex to multiple strings. In reality, it does not really matter because Python internally cache the computed regex. But I think it is best practice to do this explicitly.</span>
