<div class="post-text" itemprop="text">
<p>I saw the following in a student's script, and to my surprise it works:</p>
<pre><code>&gt;&gt;&gt; import os.path
</code></pre>
<p>The question, in brief, is: How is this <strong>different</strong> from simple <code>import os</code>? Or is it the same, except for necessitating that <code>os.path</code> exists?</p>
<p>As you can see below, it doesn't define <code>path</code> in my scope but <code>os</code>. </p>
<pre><code>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'os']
</code></pre>
<p>So the question is: What does python do with this? For sure, it imports (and hence executes) the module <code>os</code>. It also ensures that <code>os.path</code> does resolve to something valid. (Thanks to @Lee and @Stuart for the links to the documentation that confirms it.) But is there more? Or is <code>import pkg.submod</code> always equivalent to <code>import pkg</code> (provided <code>pkg.submod</code> exists)?</p>
<p>If I import <code>os</code>, it already imports/executes any modules that <code>os</code> itself imports; so <code>os.path</code> is already loaded. Are there arrangements (not too exotic) where importing <code>pkg.submod</code> could lead to different code being executed, or in different order, or otherwise having different side effects, than just importing <code>pkg</code>? And are there legitimate use cases for the multi-segment form? (To put it differently: What's the point?)</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/import.html#searching" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>[The fully qualified name of the module] will be used in various phases of the import search, and it
  may be the dotted path to a submodule, e.g. <code>foo.bar.baz</code>. In this case,
  Python first tries to import <code>foo</code>, then <code>foo.bar</code>, and finally
  <code>foo.bar.baz</code>. If any of the intermediate imports fail, an <code>ImportError</code>
  is raised.</p>
</blockquote>
<p>So, to answer your original question, it seems that if <code>os</code> is a valid package, then the <strong>whole</strong> module is imported. So, as you suggest, the sub-module form would be used to validate that <code>os.path</code> exists within the <code>os</code> module, rather than just importing the module <code>os.path</code>.</p>
<p>If you want to <strong>only</strong> import the <code>path</code> module, then you can use the <code>from ... import ...</code> syntax:</p>
<pre><code>&gt;&gt;&gt; from os import path
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__', 'path']
</code></pre>
<p>See also: <a href="https://stackoverflow.com/a/21547572/341459"><code>from â€¦ import</code> vs <code>import .</code></a></p>
</div>
<span class="comment-copy">the relevant docs are here <a href="https://docs.python.org/3.5/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3.5/tutorial/modules.html#packages</a></span>
<span class="comment-copy">Note that <code>os.path</code> is a special case, since there is no actual submodule by that name; <code>os</code> itself imports <code>posixpath</code> or <code>ntpath</code> as <code>path</code> as appropriate.</span>
<span class="comment-copy">The whole module is imported for sure, sorry I didn't make it clear that I knew that. The question is what other effects there are. Are there differences? If I just import <code>os</code>, doesn't it already import everything <code>os</code> imports, hence also <code>path</code>?</span>
<span class="comment-copy">Yes, I guess that <code>import os.path</code> can be used to validate that <code>path</code> exists within the <code>os</code> module, otherwise it would raise an <code>ImportError</code>.</span>
