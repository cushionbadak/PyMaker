<div class="post-text" itemprop="text">
<p>Let's say I have a list of:</p>
<p><code>5 10 10 20 50 50 20</code></p>
<p>(there are 4 distinguish numbers).</p>
<p>I want to convert them to:</p>
<p><code>0 1 1 2 3 3 2</code></p>
<p>(then convert back to the original form).</p>
<p>There are tons of ways to do that, but I am not sure what is the best and Pythonic way?</p>
<p>(a way is to generate a set, convert the set to a list, sort the list, then generate output by the sorted list, but I think it is not the best one)</p>
</div>
<div class="post-text" itemprop="text">
<p>The suggested answer by Delgan is O(n^2) due to the nested loops in <code>back</code>. This solution is O(n).</p>
<p>An alternative solution is as follows:</p>
<pre><code>lst = [5, 10, 10, 20, 50, 50, 20]

# Convert (and build reverse mapping)
mapping = {}
reverse_mapping = {}
conv = []
for i in lst:
    v = mapping.setdefault(i, len(mapping))
    reverse_mapping[v] = i
    conv.append(v)

# Convert back
back = [reverse_mapping[v] for v in conv]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is a good problem for make use of <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow"><code>itertools.count()</code></a> methods.</p>
<pre><code>from itertools import count
from collections import defaultdict

c = count()
dct = defaultdict(lambda: next(c))

lst = [5, 10, 10, 20, 50, 50, 20]

conv = [dct[i] for i in lst]
# [0, 1, 1, 2, 3, 3, 2]

back = [k for c in conv for k, v in dct.items() if v == c]
# [5, 10, 10, 20, 50, 50, 20]
</code></pre>
</div>
<span class="comment-copy">Sounds like an X-Y problem. Why do you need to do this? Maybe there's a better approach.</span>
<span class="comment-copy">I have a data like above, and I need to convert it to <code>0..n</code> to process further.</span>
<span class="comment-copy">A simple function using logic could work. Does it need to be as fast as possible?</span>
