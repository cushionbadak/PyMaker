<div class="post-text" itemprop="text">
<p>I want to replace those elements of <code>list1</code> whose indices are stored in list <code>indices</code> by <code>list2</code> elements. Following is the current code:  </p>
<pre><code>j=0
for idx in indices:
   list1[idx] = list2[j]
   j+=1
</code></pre>
<p>Is it possible to write a one-liner for the above four lines using <strong>lambda function</strong> or <strong>list comprehension</strong>?</p>
<p><strong>EDIT</strong><br/>
<code>list1</code> contains float values<br/>
<code>list2</code> contains float values<br/>
<code>indices</code> contain integers between <code>0</code> and <code>len(list1)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow">conditional expressions</a>, </p>
<pre><code># A test case
list1 = [0, 1, 2, 3, 4, 5, 6]
list2 = ['c', 'e', 'a']
indices = [2, 4, 0]

# Use conditional expressions
new_list = [list2[indices.index(idx)] if idx in indices else v for idx, v in enumerate(list1)] # idx2 = indices.index(idx), for list2

print(new_list)
# Output
['a', 1, 'c', 3, 'e', 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although it is not a one liner, here is an alternative that I think is more readable:</p>
<pre><code>for i, v in zip(indices, list2):
    list1[i] = v
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not so pretty but you could solve it like this :</p>
<pre><code>map(list1.__setitem__, indices, list2)
</code></pre>
</div>
<span class="comment-copy">No, list comprehensions can't modify existing lists.</span>
<span class="comment-copy">Can you give an example of what <code>list1</code>, <code>list2</code> and <code>incides</code> would contain?</span>
<span class="comment-copy">@MorganThrapp The option of creating a new list is <i>open</i>!</span>
<span class="comment-copy">@MorganThrapp It's bad practice, but they can: <code>x = [0, 0, 0];  [x.__setitem__(i, 5) for i in range(3)]; print(x)</code> would print <code>[5, 5, 5]</code>.</span>
<span class="comment-copy">@OrangeFlash81 I mean, yes, you can do that. If you do that in production code though, I will hurt you.</span>
<span class="comment-copy">Hi, this one doesn't seem right. Why select <code>idx</code> entry of <code>list2</code>? <code>list1[idx]</code> entry is to be replaced with <code>list2</code> entries (in a serial way).</span>
<span class="comment-copy">@vvy, thx, I edited my answer with an example. The result is consistent with your original code.</span>
<span class="comment-copy">and of course if you move <code>list1[i] = v</code> onto the same line as the <code>for</code> loop it would then be 1 line, this is definitely the cleanest answer!</span>
<span class="comment-copy">You'd say that it doesn't work in Python 3.</span>
<span class="comment-copy">Though clever, PEP 20 may object.</span>
<span class="comment-copy">I agree with you guys but OP asked for a "one liner", I delivered it :)</span>
