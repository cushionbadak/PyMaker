<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2087370/decode-html-entities-in-python-string">Decode HTML entities in Python string?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I am using <code>requests</code> to request a page. The task is very simple, but I have a problem with encoding. The page contains non-ascii, Turkish characters, but in the HTML source, the result is as below:</p>
<pre><code>ÇINARTEPE # What it looks like
&amp;#199;INARTEPE # What it is like in HTML source
</code></pre>
<p>So, the operations below do not return what I expected:</p>
<pre><code># What I have tried as encoding
req.encoding = "utf-8"
req.encoding = "iso-8859-9"
req.encoding = "iso-8859-1"

# The operations
"ÇINARTEPE" in req.text # False, it must return True
bytes("ÇINARTEPE", "utf-8") in req.content # False
bytes("ÇINARTEPE", "iso-8859-9") in req.content # False
bytes("ÇINARTEPE", "iso-8859-1") in req.content # False
</code></pre>
<p>All I want is to find out if <code>"ÇINARTEPE"</code> string is in HTML source.</p>
<h3>Further Information</h3>
<p>An example:</p>
<pre><code>req = requests.get("http://www.eshot.gov.tr/tr/OtobusumNerede/290")
"ÇINARTEPE" in req.text # False
req.encoding = "iso-8859-1"
"ÇINARTEPE" in req.text # False
req.encoding = "iso-8859-9"
"ÇINARTEPE" in req.text # False
# Supposed to return True
</code></pre>
<hr/>
<h3>Environment</h3>
<ul>
<li>python 3.5.1</li>
<li>requests 2.10.0</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>What you need to do is unescape the HTML Codes in your HTML.
There are some answers in stackoverflow already, check <a href="https://stackoverflow.com/questions/11405996/how-can-i-use-python-to-replace-html-escape-characters">this post</a>.</p>
<p>But basically one method is </p>
<pre><code>from HTMLParser import HTMLParser
parser = HTMLParser()
html_decoded_string = parser.unescape(html_encoded_string)
</code></pre>
<p><strong>UPDATE</strong></p>
<p>Got a better answer from python3 <a href="https://docs.python.org/3/library/html.html" rel="nofollow noreferrer">docs</a> and tested</p>
<pre><code>&gt;&gt;&gt; import html
&gt;&gt;&gt; html.unescape("&amp;#199;INARTEPE")
'ÇINARTEPE'
</code></pre>
</div>
<span class="comment-copy">How are you handling it? Show us some code!</span>
<span class="comment-copy">updated the question</span>
<span class="comment-copy">Isn't it just <code>html.unescape("&amp;#199;INARTEPE")</code>? <i>^checks^</i> yep I think that is it.</span>
<span class="comment-copy">@TadhgMcDonald-Jensen, waiting for you to write the answer to mark as valid.</span>
<span class="comment-copy">JEan PAul beat me to it, I'd rather miss out on some rep then post a duplicate answer.</span>
<span class="comment-copy">the OP is using "python 3.5.1" and this is the module name for python 2.  the python 3 equivalent is <code>html.parser</code></span>
<span class="comment-copy">also note that the <code>unescape</code> method was made accessible from just the <code>html</code> module so in python 3 you could really just use <code>import html ; html_decoded_string = html.unescape(html_encoded_string)</code></span>
<span class="comment-copy">I just installed and gave me <code>ImportError</code> of <code>markupbase</code> module which is in 2.x versions. @TadhgMcDonald-Jensen is right.</span>
<span class="comment-copy">the odd thing is that <code>html.escape("ÇINARTEPE")</code> doesn't change it, I wonder why?</span>
<span class="comment-copy">Tadhg, the answer is in <code>'ç' in html.entities.codepoint2name</code> and I guess it is related to HTML's markup symbols since it is not one of them and don't need to be escaped.</span>
