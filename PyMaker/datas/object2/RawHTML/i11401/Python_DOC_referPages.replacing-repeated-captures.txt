<div class="post-text" itemprop="text">
<p>This is sort of a follow-up to <a href="https://stackoverflow.com/questions/37375828/python-regex-replace-single-quotes-and-brackets">Python regex - Replace single quotes and brackets</a> thread.</p>
<p><strong>The task:</strong></p>
<p>Sample input strings:</p>
<pre><code>RSQ(name['BAKD DK'], name['A DKJ'])
SMT(name['BAKD DK'], name['A DKJ'], name['S QRT'])
</code></pre>
<p>Desired outputs:</p>
<pre><code>XYZ(BAKD DK, A DKJ)
XYZ(BAKD DK, A DKJ, S QRT)
</code></pre>
<p>The number of <code>name['something']</code>-like items is <em>variable</em>.</p>
<p><strong>The current solution:</strong></p>
<p>Currently, I'm doing it through <em>two separate <code>re.sub()</code> calls</em>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; s = "RSQ(name['BAKD DK'], name['A DKJ'])"
&gt;&gt;&gt; s1 = re.sub(r"^(\w+)", "XYZ", s)
&gt;&gt;&gt; re.sub(r"name\['(.*?)'\]", r"\1", s1)
'XYZ(BAKD DK, A DKJ)'
</code></pre>
<p><strong>The question:</strong></p>
<p>Would it be possible to combine these two <code>re.sub()</code> calls into a single one?</p>
<p>In other words, I want to replace something at the beginning of the string and then multiple similar things after, all of that in one go.</p>
<hr/>
<p>I've looked into <a href="https://pypi.python.org/pypi/regex" rel="nofollow noreferrer"><code>regex</code> module</a> - it's ability to <a href="https://stackoverflow.com/questions/9764930/capturing-repeating-subpatterns-in-python-regex">capture repeated patterns</a> looks very promising, tried using <code>regex.subf()</code> but failed to make it work.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can indeed use the regex module and repeated captures. The main interest is that you can check the structure of the matched string:</p>
<pre><code>import regex

regO = regex.compile(r'''
    \w+ \( (?: name\['([^']*)'] (?: ,[ ] | (?=\)) ) )* \)
    ''', regex.VERBOSE);

regO.sub(lambda m: 'XYZ(' + (', '.join(m.captures(1))) + ')', s)
</code></pre>
<p><em>(Note that you can replace <code>"name"</code> by <code>\w+</code> or anything you want without problems.)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Please do not do this in any code I have to maintain.</p>
<p>You are trying to parse syntactically valid Python.  Use <a href="https://docs.python.org/3/library/ast.html" rel="noreferrer"><code>ast</code></a> for that.  It's more readable, easier to extend to new syntax, and won't fall apart on some weird corner case. </p>
<p>Working sample:</p>
<pre><code>from ast import parse

l = [
    "RSQ(name['BAKD DK'], name['A DKJ'])",
    "SMT(name['BAKD DK'], name['A DKJ'], name['S QRT'])"
]

for item in l:
    tree = parse(item)
    args = [arg.slice.value.s for arg in tree.body[0].value.args]

    output = "XYZ({})".format(", ".join(args))
    print(output)
</code></pre>
<p>Prints:</p>
<pre><code>XYZ(BAKD DK, A DKJ)
XYZ(BAKD DK, A DKJ, S QRT)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do this.  Though I don't think it's very readable.  And doing it this way could get unruly if you start adding more patterns to replace.  It takes advantage of the fact that the replacement string can also be a function.</p>
<pre><code>s = "RSQ(name['BAKD DK'], name['A DKJ'])"
re.sub(r"^(\w+)|name\['(.*?)'\]", lambda m: 'XYZ' if m.group(1) else m.group(2), s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.findall()</code> and a simple string formatting:</p>
<pre><code>&gt;&gt;&gt; s = "SMT(name['BAKD DK'], name['A DKJ'], name['S QRT'])"
&gt;&gt;&gt; 
&gt;&gt;&gt; 'XYZ({})'.format(','.join(re.findall(r"'([^']+)'", s)))
'XYZ(BAKD DK,A DKJ,S QRT)'
</code></pre>
</div>
<span class="comment-copy">The strings have more than 3 <code>name['...']</code> ?</span>
<span class="comment-copy">An interesting way to do this would be using a function (since <code>re.sub()</code> can take a function instead of a string as the "replacement") but I'm not sure if that would be any cleaner for what you want...</span>
<span class="comment-copy">i found a solution..though, it works for PCRE engine only..check <b><a href="https://regex101.com/r/gX2mP2/1" rel="nofollow noreferrer">here</a></b></span>
<span class="comment-copy"><i>Do you think it would be possible to solve it without a replacement function and (somehow) referencing the captured groups in the replacement string?</i>  - Not possible with <code>regex</code> nor <code>re</code>, but it is possible with Boost or PCRE2 regex. There, you have access to a conditional replacement pattern, where you still right an <code>if-then</code> construction/logic.</span>
<span class="comment-copy">The input sample vs. the desired output smacks of symmetry and variable length. There is a sense of nesting as well. This is not a recipe for regular expressions with replacement. Problem 1: Even if you use a PCRE engine to handle balanced text, replacement is a nightmare, you'd have to construct a new string as you go, and involves recursion on a core. Problem 2: If no nesting, there is variable number of the same construct in the body. Conclusion: Dot net is the only viable engine that can match/replace all of these in a single pass. For all other <i>lame</i> engines, it takes 2 passes.</span>
<span class="comment-copy">Thanks so much for providing a <code>regex</code>-module specific approach! Do you think it would be possible to solve it without a replacement function and (somehow) referencing the captured groups in the replacement string?</span>
<span class="comment-copy">@alecxe: No, you can't because there is no way to build a replacement string or a formatted string for an undetermined number of repeated captures.</span>
<span class="comment-copy">Out of the box thinking, interesting option, thanks!</span>
<span class="comment-copy">Except you're basically ignoring the first regex check/match, assuming it exists, and manually doing the <code>XYZ</code> replace.</span>
<span class="comment-copy">@BrendanAbel There is no need for that since OP wants to replace all that words with <code>XYZ</code> if there is another word except <code>XYZ</code> it can be replace in <code>'XYZ({})'</code>.</span>
