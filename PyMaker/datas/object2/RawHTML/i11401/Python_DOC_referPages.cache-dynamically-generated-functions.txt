<div class="post-text" itemprop="text">
<p>I have the probability density functions <code>func1</code> and <code>func2</code> (including the <code>support</code> of each) of two random variables. Now I need the probability density function of the sum of these both random variables, which I create via:</p>
<pre><code>import numpy as np
import scipy.integrate
[...]
def density_add(func1, func2, support):
   return np.vectorize(lambda xi: scipy.integrate.simps(func1(support) * func2(xi-support), support))
</code></pre>
<p>The problem with that is the huge redundancy. Many values have to be calculated more than once. So I tried to cache but problems appeared due to the dynamically generated functions without unique names.</p>
<pre><code>from joblib import Memory
mem = Memory(cachedir="/tmp/joblib", verbose=0)
[...]
def density_add(func1, func2, support):
   return np.vectorize(mem.cache(lambda xi: scipy.integrate.simps(func1(support) * func2(xi-support), support))


/usr/lib/python3/dist-packages/numpy/lib/function_base.py:2232: JobLibCollisionWarning: Cannot detect name collisions for function '&lt;lambda&gt; [...]
/usr/lib/python3/dist-packages/numpy/lib/function_base.py:2232: JobLibCollisionWarning: Possible name collisions between functions '&lt;lambda&gt;' [...]
</code></pre>
<p>What is a better approach to cache such dynamically generated functions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Could you use <code>functools.lru_cache</code>?  <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow">https://docs.python.org/3/library/functools.html#functools.lru_cache</a>.  It would be all in memory, so you would lose values between restarts of your program, but the cache would warm up.</p>
<p>from functools import lru_cache</p>
<h1>lru_cache as a decorator</h1>
<pre><code>&gt;&gt;&gt; @lru_cache()
&gt;&gt;&gt; def myfunc(x):
&gt;&gt;&gt;     print('sleeping')
&gt;&gt;&gt;     return x + 1
&gt;&gt;&gt; myfunc(1)
sleeping
2
&gt;&gt;&gt; myfunc(1)
2
</code></pre>
<h1>lru_cache as a function</h1>
<pre><code>&gt;&gt;&gt; myfunc2 = lru_cache()(lambda x: myfunc(x) *2)
&gt;&gt;&gt; myfunc2(2)
sleeping
6
&gt;&gt;&gt; myfunc2(2)
6
</code></pre>
</div>
<span class="comment-copy">Yes, in-memory is no problem and <code>lru_cache</code> works fine. Thank you!</span>
