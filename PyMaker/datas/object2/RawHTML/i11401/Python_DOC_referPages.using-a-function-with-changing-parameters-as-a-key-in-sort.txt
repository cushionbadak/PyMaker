<div class="post-text" itemprop="text">
<p>I am trying to sort a list of points in the x-y plane according to their polar angle with a point selected from the list that has the minimum y value.</p>
<p>I used </p>
<pre><code>min(listPts, key=lambda t: (t[1], -t[0]))
</code></pre>
<p>to find the minimum y value in listPts</p>
<p>I have a function theta to find the angles between two points</p>
<pre><code>def theta(pointA, pointB):

    dx = pointB[0] - pointA[0]
    dy = pointB[1] - pointA[1]
    if abs(dx) &lt; 1.e-6 and abs(dy) &lt; 1.e-6:
        t = 0
    else:
         t = dy / (abs(dx) + abs(dy))
    if dx &lt; 0:
        t = 2 - t
    elif dy &lt; 0:
        t = 4 + t
    return t * 90
</code></pre>
<p>I was wondering if its possible to somehow use this function as a key in the .sort() method as each point being check will have a different pointB for theta?</p>
<p>cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. <a href="https://docs.python.org/3/library/stdtypes.html?highlight=list#list.sort" rel="nofollow">Read the documentation for <code>list.sort</code></a>, and it's right there. Argument even has the same name as for <code>min</code>.</p>
<p><strong>Update</strong>: If I understand your real problem, <code>theta</code> is computing relative angles between points, and you want to sort point <em>pairs</em> based on their <code>theta</code> scores somehow?</p>
<p>If that's correct, you really need a multi-step process:</p>
<ol>
<li>Generate all point pairs for each origin point and destination (either all possible point permutations/combinations, or through some initial pairing algorithm that is more selective)</li>
<li>Sort the pairs based on their theta scores</li>
</ol>
<p>To do so, you use <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a> to generate the pairs (or sort first to get some consistent point ordering, then use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>itertools.combinations</code></a> so you don't create pairs for points <code>(A, B)</code> and <code>(B, A)</code>), then sort the resulting pairs using <code>theta</code> to order the pairs by their relative angles. For example:</p>
<pre><code>import itertools
from operator import itemgetter

points = [(1, 0), (1, 1), (4, -3), (5, 5), (-2, 0), (-4, 1), (-3, -2)]

points.sort(key=itemgetter(1, 0))  # Sorts by y then by x; caps theta to range(0, 180)

point_pairs = itertools.combinations(points, 2)  # Generates unique pairs of points

# Sort using key function that unpacks point pairs as arguments to theta
point_pairs = sorted(point_pairs, key=lambda x: theta(*x))

print(point_pairs)
</code></pre>
<p>which outputs:</p>
<pre><code>[((-2, 0), (1, 0)), ((-4, 1), (1, 1)), ..., ((1, 0), (-4, 1)), ((4, -3), (-3, -2))]
</code></pre>
<p>corresponding to <code>theta</code> values of <code>[0.0, 0.0, ..., 165.0, 168.75]</code>.</p>
</div>
<span class="comment-copy">Thanks for the reply, this question was worded really badly. I understand that a function can be passed as a key from the documentation but in this case it needs to be given a new second parameter for each point it is sorting through (pointB)?</span>
<span class="comment-copy">@saleem: That's the <code>cmp</code> function (only in Py2). But if you read the documentation (seriously, I linked the documentation right here), it links directly to a utility for converting old-style <code>cmp</code> functions to <code>key</code> functions, it's trivial.</span>
<span class="comment-copy">@saleem: That said, having read the function you're using, it's not a comparator function (the return value is not negative, 0 or positive to indicate relative ordering). It's just saying how far apart any two points are, angle wise. But you can't sort discrete points on relative angles; how do you handle 2 point pairs in different locations, but with identical relative positioning? Do you want point pairs sorted by relative positions, so a single point would actually appear many times in the results?</span>
<span class="comment-copy">thank you for persisting with me. I ended up creating a new function sortAng which constructed a dictionary and paired each tuple point with the angle it constructed with the given point and the sorted that. It might not run in the best time but seems to be working for now and I can adjust this later</span>
