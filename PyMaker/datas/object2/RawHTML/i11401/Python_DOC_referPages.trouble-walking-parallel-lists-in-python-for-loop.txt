<div class="post-text" itemprop="text">
<p>I'm trying to write code that draws each rectangles represented by the length-width pairs in the list <strong>sides</strong> at the x-y co-ordinates contained at the same index in the list <strong>coords</strong>. </p>
<p>Where the variable <strong>coords</strong> contains sub-lists of size 2, with each of these values representing an x and a y co-ordinate.</p>
<p>And the variable sides also contains sub-lists of size 2, with each of these values representing the length then the width of a rectangle.</p>
<p>I already wrote a function called <strong>draw_rectangle</strong> which takes as its parameters two integers representing the length then the width of a rectangle.</p>
<p>Having said that now I'm confused to make a <code>for</code> loop.
This is what I came out with and doesn't seem to work</p>
<pre><code>for pair in sides:
    penup()
    goto(coords[index])
    pendown()
    draw_ractangle(sides[index][0], sides[index][1])
</code></pre>
<p>or do I have to go </p>
<pre><code>for draw_ractangle()
</code></pre>
<p>Any suggestions? Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a problem for <code>enumerate()</code> and structure assignment:</p>
<pre><code>sides = [(34, 23), (65, 72)]
coords = [(10, 100), (-45, 60)]

# ...

for index, (width, height) in enumerate(sides):
    penup()
    goto(coords[index])
    pendown()
    draw_rectangle(width, height)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would prefer to see this handled with a zip:</p>
<pre><code>for (location, dimensions) in zip(coords, sides):
  penup()
  goto(location)
  pendown()
  draw_rectangle(*dimensions)
</code></pre>
<p>In general, python style prefers to avoid looping over indices in favor of looping over contents. The <code>zip</code> function is a nice way to achieve this, by creating a list of tuples. 
I am left with a concern about the parallel list pattern, which is in general fragile and prone to breakage, and would prefer to see a data structure representing each object to be drawn, to avoid the danger of location and dimension coming out of sync. </p>
</div>
<span class="comment-copy">what happens now with the current code you have?</span>
<span class="comment-copy">That won't work because you haven't told Python what <code>index</code> is. However, there's a better way: you can loop over <code>coords</code> and <code>sides</code> in parallel using the built-in<code>zip</code> function, which you can read about in the <a href="https://docs.python.org/3/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">tutorial</a>.</span>
