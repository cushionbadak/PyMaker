<div class="post-text" itemprop="text">
<pre><code>import pyping

server = ["jeff", "bob", "dave", "ryan", "drew"]

for i in server:
    online = 1
    try:
        result = pyping.ping(i)
        online = result.ret_code
        if len(i) &gt; 7:
            print("|\tServer: "+ i +"\tIp: "+ result.destination_ip +"\tTime: "+ result.avg_rtt +"\t |")
        else:
            print("|\tServer: "+ i +"\t\tIp: "+ result.destination_ip +"\tTime: "+ result.avg_rtt +"\t |")

    except:
        print("|\tServer: "+ i +" Returned: OFFLINE!!!\t\t\t\t |")
</code></pre>
<p>please help me ping all of the servers at the same time to make it quicker</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>import threading

def worker(i):
    online = 1
    try:
        result = pyping.ping(i)
        online = result.ret_code
        if len(i) &gt; 7:
            print("|\tServer: "+ i +"\tIp: "+ result.destination_ip +"\tTime: "+ result.avg_rtt +"\t |")
        else:
            print("|\tServer: "+ i +"\t\tIp: "+ result.destination_ip +"\tTime: "+ result.avg_rtt +"\t |")

    except:
        print("|\tServer: "+ i +" Returned: OFFLINE!!!\t\t\t\t |")

server = ["jeff", "bob", "dave", "ryan", "drew"]

for i in server:
    t = threading.Thread(target=worker, args=(i,))
    t.start()
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/q/12101239/4279">Multiple ping script in Python</a></span>
<span class="comment-copy">What about using <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a>?</span>
<span class="comment-copy">The subprocess script would do, however as this is I/O operation my approach would use Thread(s). I think some of the examples on the web that show how to deal with multiple threads (and use beautifulsoup) can be adapted to do exactly that</span>
