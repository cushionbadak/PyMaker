<div class="post-text" itemprop="text">
<p>I'm using Python 3.4 on a Windows 64-bit machine.</p>
<p>I currently have a xml file which has multiple hierarchies. There are a number of elements going by the name "paragraph" in the xml tree. But they might be on different hierarchies. </p>
<p>Is there any way to count the number of these elements in an easy way? Traversal through the whole tree seems way too time-consuming.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you were to use <a href="http://lxml.de/" rel="nofollow"><code>lxml.etree</code></a>, then you would have a full XPath support and can use <a href="https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/count" rel="nofollow"><code>count()</code></a>:</p>
<pre><code>import lxml.etree as ET

tree = ET.parse(xml)
paragraphs = tree.xpath('count(//p)')
print(paragraphs)
</code></pre>
<p>In <a href="https://docs.python.org/3/library/xml.etree.elementtree.html" rel="nofollow"><code>xml.etree.ElementTree</code></a> you would have to do it in Python via <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findall" rel="nofollow"><code>findall()</code></a> and <code>len()</code> because of the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xpath-support" rel="nofollow">limited XPath support</a>:</p>
<pre><code>import xml.etree.ElementTree as ET

tree = ET.parse(xml)
paragraphs = tree.findall('//p')
print(len(paragraphs)) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read the xml file and get the content in xmlString. If all you need is the number of occurrences of the word "paragraph", you can do something like this -</p>
<pre><code>xmlString.count("&lt;paragraph&gt;")
</code></pre>
<p>This makes several assumptions about how your xml file looks like and may not work in all cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>I now have found a easy approch to do the job using <code>xml.dom.minidom</code>:</p>
<pre><code>import xml.dom.mimidom as DM
tree = DM.parse(xml_file)
paragraphs = tree.getElementByTagName('paragraph')
print(len(paragraphs))
</code></pre>
</div>
<span class="comment-copy">You kind of need to traverse the whole tree twice: once to parse it, and another to count each paragraph tag. I believe the <code>count</code> solutions will still traverse the tree again. You might be able to only traverse the tree once if you integrate counting the tags with parsing the tree, but this would be a lot of work.</span>
<span class="comment-copy">What does <code>'count(//p)'</code> mean?</span>
<span class="comment-copy">@joewong <code>count()</code> is an XPath function (I've added a link to it), <code>//p</code> would find all <code>p</code> elements in the document recursively.</span>
<span class="comment-copy">Hold on that thought, continue xml parsing with minidom for a while, then come back and tell me things are still easy :)</span>
<span class="comment-copy">@alecxe All I'm saying is this works for me.</span>
