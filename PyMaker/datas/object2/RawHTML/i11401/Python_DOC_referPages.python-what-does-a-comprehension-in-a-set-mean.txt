<div class="post-text" itemprop="text">
<p>I saw something like:</p>
<pre><code>set(x for x in [1, 2, 3])
</code></pre>
<p>I know <code>x for x in [1, 2, 3]</code> is a comprehension, but I cannot find a valid grammar for it, since <code>x for x in [1, 2, 3]</code> itself is invalid.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow">python3 reference</a></p>
<pre><code>call ::=  primary "(" [argument_list [","] | comprehension] ")"
comprehension ::=  expression comp_for
</code></pre>
<p>check:</p>
<pre><code>set(x for x in [1, 2, 3])
</code></pre>
<p><code>set</code> is <code>primary</code>, <code>x</code> is <code>expression</code> and <code>for x in [1, 2, 3]</code> is <code>comp_for</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It is to create a set based on the comprehension. Example:</p>
<pre><code>a = set(x for x in [1, 2, 3])
print(a)
</code></pre>
<p>The result will be a set:</p>
<pre><code>{1, 2, 3}
</code></pre>
<p>In the above example, it happen to be the logic can be simplified to:</p>
<pre><code>a = set([1, 2, 3])
</code></pre>
<p>Where you do not need a comprehension at all</p>
</div>
<div class="post-text" itemprop="text">
<p>It's a <em>generator expression</em>. They are normally surrounded by parens, but the parens can be omitted if the expression is the only argument to a function call:</p>
<pre><code>&gt;&gt;&gt; generator = (x for x in [1, 2, 3])
&gt;&gt;&gt; generator.next()
1
&gt;&gt;&gt; set(generator)
set([2, 3])
</code></pre>
<p>Generator objects can be iterated over, they produce values one by one. Compared to using a list comprehension here, the advantage is that no intermediate list object has to be created (which matters more if there are, say, a million elements rather than three).</p>
<p>Documentation: <a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow">https://docs.python.org/2/reference/expressions.html#generator-expressions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>python's set based on comprehension. example for list with strings</p>
<pre><code>&gt;&gt;&gt; address = set(city for city in ["Paris", "Paris", "London","Berlin","Paris","Paris"])

&gt;&gt;&gt; print address
set(['Paris', 'Berlin', 'London'])

&gt;&gt;&gt; type(address)
&lt;type 'set'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>(x for x in [1, 2, 3])</code> is a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow">Generator Expressions</a></p>
<p>It reduces an iterable input to a single value.</p>
<pre><code>&gt;&gt;&gt; (x for x in [1, 2, 3])
&lt;generator object &lt;genexpr&gt; at 0x7f1b23bea8c0&gt;
&gt;&gt;&gt; type(x for x in [1,2,3])
&lt;type 'generator'&gt;
</code></pre>
<p>It match with the constructor of the <code>set</code> class.</p>
<pre><code>def __init__(self, seq=()): # known special case of set.__init__
        """
        set() -&gt; new empty set object
        set(iterable) -&gt; new set object

        Build an unordered collection of unique elements.
        # (copied from class doc)
        """
</code></pre>
<p>There are in <strong>Python 3</strong> a set comprehension like that:</p>
<pre><code>{x for x in [1, 2, 3]}
</code></pre>
<p>So you don't need <code>set(x for x in [1, 2, 3])</code> anymore in <strong>Python 3</strong>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">Thanks for actually explaining <i>why</i> the parentheses from the generator expression can be omitted.</span>
