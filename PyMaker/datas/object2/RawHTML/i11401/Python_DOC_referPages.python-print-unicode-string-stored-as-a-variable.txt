<div class="post-text" itemprop="text">
<p>In Python (3.5.0), I'd like to print a string containig unicode symbols (more precisely, IPA symbols retrieved from Wiktionary in JSON format) to the screen or a file, e.g.</p>
<pre><code>print("\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n")
</code></pre>
<p>correctly prints</p>
<pre><code>ˈwɔːtəˌmɛlən
</code></pre>
<p>- however, whenever I use the string in a variable, e.g.</p>
<pre><code>ipa = '\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n'
print(ipa)
</code></pre>
<p>it just prints out the string as-is, i.e.</p>
<pre><code>\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n
</code></pre>
<p>which isn't of much help.</p>
<p>I have tried out several ways to avoid this (like going via <code>deocde</code>/<code>encode</code>) but non of that helped.</p>
<p>I cannot work with</p>
<pre><code>u'\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n'
</code></pre>
<p>either since I am already retrieving the string as a variable (as the result of a regex-match) and at no point in my code enter the actual literals.</p>
<p>It might as well be that I made a mistake during the conversion from the JSON result; by now I have converted the byte stream into a string using <code>str(f.read())</code>, extracted the IPA part via regex (and done a replace on the double backslashes) and stored it in a string variable.</p>
<p>Edit:<br/>
This is the code I had so far:<br/></p>
<pre><code>def getIPAen(word):
    url = "https://en.wiktionary.org/w/api.php?action=query&amp;titles=" + word + "&amp;prop=revisions&amp;rvprop=content&amp;format=json"
    jsoncont = str((urllib.request.urlopen(url)).read())
    jsonmatch = re.search("\{IPA\|/(.*?)/\|", jsoncont).group(1)
    #print("jsomatch: " + jsonmatch)
    ipa = jsonmatch.replace("\\\\", "\\")
    #print("ipa: " + ipa)
    print(ipa)
</code></pre>
<p>After modification with <code>json.loads</code>:</p>
<pre><code>def getIPAen(word):
    url = "https://en.wiktionary.org/w/api.php?action=query&amp;titles=" + word + "&amp;prop=revisions&amp;rvprop=content&amp;format=json"
    jsoncont = str((urllib.request.urlopen(url)).read())
    jsonmatch = re.search("\{IPA\|/(.*?)/\|", jsoncont).group(1)
    #print("jsonmatch: " + jsonmatch)
    jsonstr = "\"" + jsonmatch + "\""
    #print("jsonstr: " + jsonstr)
    jsonloads = json.loads(jsonstr)
    #print("jsonloads: " + jsonloads)
    print(jsonloads)
</code></pre>
<p>For both versions, when calling it with</p>
<pre><code>getIPAen("watermelon")
</code></pre>
<p>what I get is:</p>
<pre><code>\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n
</code></pre>
<p>Is there any way to have the string printed/written as already decoded, even when passed as a variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have this value:</p>
<pre><code>ipa = '\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n'
</code></pre>
<p>because <em>that</em> value prints just fine:</p>
<pre><code>&gt;&gt;&gt; ipa = '\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n'
&gt;&gt;&gt; print(ipa)
ˈwɔːtəˌmɛlən
</code></pre>
<p>You <em>at the very least</em> have literal <code>\</code> and <code>u</code> characters:</p>
<pre><code>ipa = '\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n'
</code></pre>
<p>Those <code>\\</code> sequences are <strong>one</strong> backslash each, but escaped. Since this is JSON, the string is probably also surrounded by double quotes:</p>
<pre><code>ipa = '"\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n"'
</code></pre>
<p>Because that string has literal backslashes, that is exactly what is being printed:</p>
<pre><code>&gt;&gt;&gt; ipa = '"\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n"'
&gt;&gt;&gt; print(ipa)
"\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n"
&gt;&gt;&gt; ipa[1]
'\\'
&gt;&gt;&gt; print(ipa[1])
\
&gt;&gt;&gt; ipa[2]
'u'
</code></pre>
<p>Note how the value <em>echoed</em> shows a string literal you can copy and paste back into Python, so the <code>\</code> character is escaped again for you.</p>
<p>That value is valid JSON, which <em>also</em> uses <code>\uhhhh</code> escape sequences. Decode it as JSON:</p>
<pre><code>import json

print(json.loads(ipa))
</code></pre>
<p>Now you have a proper Python value:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads(ipa)
'ˈwɔːtəˌmɛlən'
&gt;&gt;&gt; print(json.loads(ipa))
ˈwɔːtəˌmɛlən
</code></pre>
<p>Note that in Python 3, almost <em>all</em> codepoints are printed directly even when <code>repl()</code> creates a literal for you. The <code>json.loads()</code> result directly shows all text in the value, even though the majority is non-ASCII.</p>
<p>This value does not contain literal backslashes or <code>u</code> characters:</p>
<pre><code>&gt;&gt;&gt; result = json.loads(ipa)
&gt;&gt;&gt; result[0]
'ˈ'
&gt;&gt;&gt; result[1]
'w'
</code></pre>
<p>As a side note, when debugging issues like this, you really want to use the <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow"><code>repr()</code></a> and <a href="https://docs.python.org/3/library/functions.html#ascii" rel="nofollow"><code>ascii()</code></a> functions so you get representations that let you properly reproduce the value of a string:</p>
<pre><code>&gt;&gt;&gt; print(repr(ipa))
'"\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n"'
&gt;&gt;&gt; print(ascii(ipa))
'"\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n"'
&gt;&gt;&gt; print(repr(result))
'ˈwɔːtəˌmɛlən'
&gt;&gt;&gt; print(ascii(result))
'\u02c8w\u0254\u02d0t\u0259\u02ccm\u025bl\u0259n'
</code></pre>
<p>Note that only <code>ascii()</code> on a string with actual Unicode codepoints beyond the Latin-1 range produces actual <code>\uhhhh</code> escape sequences. (For <code>repl()</code> output Python can still fall back to <code>\uhhhh</code> escapes if you terminal or console can't handle specific characters).</p>
<p>As for your update, just parse the <em>whole response</em> as JSON, and load the right data from that. Your code instead converts the <code>bytes</code> response body to a <code>repr()</code> (the <code>str()</code> call on bytes does <strong>not</strong> decode the data; instead you <em>doubly</em> escape escapes this way). Decode the bytes from the network as UTF-8, then feed that data to <code>json.loads()</code>:</p>
<pre><code>import json
import re
import urllib.request
from urllib.parse import quote_plus


baseurl = "https://en.wiktionary.org/w/api.php?action=query&amp;titles={}&amp;prop=revisions&amp;rvprop=content&amp;format=json"

def getIPAen(word):
    url = baseurl.format(quote_plus(word))
    jsondata = urllib.request.urlopen(url).read().decode('utf8')
    data = json.loads(jsondata)
    for page in data['query']['pages'].values():
        for revision in page['revisions']:
            if 'IPA' in revision['*']:
                ipa = re.search(r"{IPA\|/(.*?)/\|", revision['*']).group(1)
                print(ipa)
</code></pre>
<p>Note that I also make sure to <em>quote</em> the <code>word</code> value into the URL query string.</p>
<p>The above prints out any IPA it finds:</p>
<pre><code>&gt;&gt;&gt; getIPAen('watermelon')
ˈwɔːtəˌmɛlən
&gt;&gt;&gt; getIPAen('chocolate')
ˈtʃɒk(ə)lɪt
</code></pre>
</div>
<span class="comment-copy">Please create a short, <b>complete</b> program that demonstrates the problem. Please copy-paste into your question the program and its output. See <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> and, more generally, <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> for more information.</span>
<span class="comment-copy"><a href="http://ideone.com/nEa33B" rel="nofollow noreferrer">Here</a> is an example program that produces your desired output.</span>
<span class="comment-copy">@Robᵩ I added my full code to my post. Is ist okay like this? - I thought it would become too long then. Sorry for the inconvenience, it's my first post here. For your example program: Thanks, it works - and actually my example does too, can't reconstruct at the moment why I thought it didn't or what I acutally had before explaining it that way.</span>
<span class="comment-copy">For the first issue (doing <code>ipa = \u...</code>), I can't figure out why I thought it didn't work or what the actual problem was before phrasing it that way, but as you say, this works totally fine. I'm sorry, don't know why I wrote it didn't.</span>
<span class="comment-copy">For the second issue regarding the backslashes: The string I extracted from JSON does not have double quotes but indeed the double backslashes, which I then, as I wrote, replaced by single ones (<code>.replace("\\\\", "\\"</code>) - if I left this away, it would print double backslashes. Therfore my string to be printed out does look like in the example that I posted, i.e. <code>\\u02c8w\\u0254\\u02d0t\\u0259\\u02ccm\\u025bl\\u0259n</code> which then prints the version with the single backslahes.</span>
<span class="comment-copy">Your hint with <code>json.loads(ipa)</code> works - after manually adding double quotes - when I try it out just like this but not in my function and I can't see why at the moment. I'll add my actual code to my original post in a minute.</span>
<span class="comment-copy">And thanks for the hint on <code>repr()</code> and <code>ascii()</code>, didn't know about that.</span>
<span class="comment-copy">@lemontree: there, updated. You were mangling the JSON by causing a double-encoding. Don't call <code>str()</code> on a bytes object. Just decode the JSON instead and <i>work with the data given</i>.</span>
