<div class="post-text" itemprop="text">
<p>I have a python file B with all my function and a main code which is in loop of 0.25 sec, and I want to call this file in a loop in my file A. Can you get my weird mind ? 
What I did but only read the loop from file B once :</p>
<pre><code>#FileA  
while 1:
    from FileB import * 
</code></pre>
<p>And my file B :</p>
<pre><code>#FileB
while t&lt;0.25:
    #my stuff
</code></pre>
<p>Thanks.</p>
<p>PS : I forget to mention that i can't modify the file B.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>import</code> statement only reads the target module one time.</p>
<p>If you have control of both files, I'd suggest that you make your loop a function in file B:</p>
<pre><code>def main():
    while t&lt;0.25:
        #my stuff

if __name__ == '__main__':
    main()
</code></pre>
<p>Then you can call it repeatedly from file A:</p>
<pre><code>from fileB import main as Bmain

while 1:
    Bmain()
</code></pre>
<p>If you don't have control of the source code for the files (meaning: if the code comes from someone else), there are a few options. Probably the easiest and fastest to code would be to use the <a href="https://docs.python.org/3/library/os.html?highlight=os.system#os.system" rel="nofollow"><code>os.system(command)</code></a> function to run the contents of fileB in a separate process.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="https://docs.python.org/2/tutorial/controlflow.html#defining-functions" rel="nofollow">functions</a>, you don't have any functions in your questions. Here is an example:</p>
<pre><code># fileA.py
import time
from fileB import myFunction

def main():
    while True:
        ret = myFunciton()
        time.sleep(3)
main()

# fileB.py
def myFunction():
    print "running myFunction"
    return "result"    
</code></pre>
</div>
<span class="comment-copy">why is your loop the main code if you want to call back on it multiple times? That is what a function is for!</span>
<span class="comment-copy">I'd strongly suggest using <code>subprocess.call</code> (or one of the other tools in the <code>subprocess</code> module) instead of <code>os.system</code>. From the <code>os.system</code> docs (liked in the answer): "The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function."</span>
