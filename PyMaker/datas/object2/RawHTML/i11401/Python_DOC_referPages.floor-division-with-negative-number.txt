<div class="post-text" itemprop="text">
<p>The expression <code>6 // 4</code> yields <code>1</code>, where floor division produces the whole number after dividing a number. </p>
<p>But with a negative number, why does <code>-6 // 4</code> return <code>-2</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>//</code> operator explicitly <em>floors</em> the result. Quoting the <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="noreferrer"><em>Binary arithmetic operations</em> documentation</a>:</p>
<blockquote>
<p>the result is that of mathematical division with the ‘floor’ function applied to the result.</p>
</blockquote>
<p>Flooring is not the same thing as rounding to 0; flooring always moves to the <em>lower integer value</em>. See the <a href="https://docs.python.org/3/library/math.html#math.floor" rel="noreferrer"><code>math.floor()</code> function</a>:</p>
<blockquote>
<p>Return the floor of <em>x</em>, the largest integer less than or equal to <em>x</em>. </p>
</blockquote>
<p>For <code>-6 // 4</code>, first the result of <code>-6 / 4</code> is calculated, so <code>-1.5</code>. Flooring then moves to the lower integer value, so <code>-2</code>.</p>
<p>If you want to round towards zero instead, you'll have to do so explicitly; you could do this with the <code>int()</code> function on true division:</p>
<pre><code>&gt;&gt;&gt; int(-6 / 4)
-1
</code></pre>
<p><code>int()</code> removes the decimal portion, so always rounds towards zero instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Floor division will also round down to the next lowest number, not the next lowest absolute value.</p>
<p><code>6 // 4 = 1.5</code>, which rounds down to 1, and up to 2.</p>
<p><code>-6 // 4 = -1.5</code>, which rounds down to -2, and up to -1.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>//</code> in Python is a "floor division" operator. That means that the result of such division is the floor of the result of regular division (performed with / operator).</p>
<p>The floor of the given number is the biggest integer smaller than the this number. For example</p>
<pre><code>7 / 2 = 3.5 so 7 // 2 = floor of 3.5 = 3.
</code></pre>
<p>For negative numbers it is less intuitive: <code>-7 / 2 = -3.5,</code> so <code>-7 // 2 = floor of -3.5 = -4</code>. Similarly <code>-1 // 10 = floor of -0.1 = -1.</code></p>
<p><code>//</code> is defined to do the same thing as <code>math.floor()</code>: return the largest integer value less than or equal to the floating-point result. <code>Zero is not less than or equal to -0.1.</code></p>
</div>
<div class="post-text" itemprop="text">
<p>A useful way to understand why floor division // yields the results it does for negative values is see this as complimenting the modulo, or remainder, % operator.</p>
<pre><code>5/3  is equivalent to 1 remainder 2 
</code></pre>
<p>i.e.</p>
<pre><code>5//3 = 1
5%3 = 2
</code></pre>
<p>But </p>
<pre><code>-5/3 = -2
-5%3 = 1
</code></pre>
<p>Or</p>
<pre><code>-2 + 1/3rd which is -1.6667 (ish)
</code></pre>
<p>It can seem strange, but it ensures results such as
<code>-2,-2,-2,-1,-1,-1,0,0,0,1,1,1,2,2,2,3,3,3</code>  etc. when generating sequences.</p>
</div>
<span class="comment-copy">Because that is floor division. <code>-2 &lt; -6/4 &lt;  -1</code></span>
<span class="comment-copy">Pretty weird question, you give the answer yourself</span>
<span class="comment-copy">Because the result of the division is <i>always floored</i>. Flooring goes down, not up.</span>
<span class="comment-copy"><code>-6/4 = -1.5</code> round that down and you have <code>-2</code></span>
<span class="comment-copy">Hence <code>floor</code>, not <code>ceiling</code></span>
