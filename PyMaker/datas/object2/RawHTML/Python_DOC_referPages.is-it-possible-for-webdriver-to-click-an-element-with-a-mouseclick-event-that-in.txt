<div class="post-text" itemprop="text">
<p>This is a question I have that arises from <a href="https://stackoverflow.com/questions/55185997/python3-selenium-issue/">another user's question</a>. If you look at my answer there, you will get some context for this question. The URL for the web page I am going to is <a href="https://hotels.ctrip.com/hotel/347422.html?isFull=F#ctm_ref=hod_sr_lst_dl_n_1_8" rel="nofollow noreferrer">https://hotels.ctrip.com/hotel/347422.html?isFull=F#ctm_ref=hod_sr_lst_dl_n_1_8</a> if you want to check it out for yourself.  </p>
<p>Consider the python selenium script found at the bottom of the question.  Nothing happens when selenium tries to click on this element:  </p>
<p><code>browser.find_element_by_xpath('//*[@id="cPageBtn"]').click()</code></p>
<p>Same thing with this element</p>
<pre><code>browser.find_element_by_xpath('//*[@id="appd_wrap_close"]').click()
</code></pre>
<p>When debugging my selenium script for each element, I confirmed that selenium can find the element just fine;  it is not hidden, inside an iFrame, disabled, or any other oddity that I normally check for failed selenium actions.</p>
<p>However, it has a mouseclick event that invokes an interesting JavaScript file, and I was actually able to access it by navigating to URL shown here:</p>
<p><a href="https://i.stack.imgur.com/xWrJf.png" rel="nofollow noreferrer"><img alt="Test Tracker" src="https://i.stack.imgur.com/xWrJf.png"/></a> </p>
<p>Hovering over the URL revealed that it is <a href="https://webresource.c-ctrip.com/ResUnionOnline/R3/float/floating_normal.min.js?20190306:2" rel="nofollow noreferrer">https://webresource.c-ctrip.com/ResUnionOnline/R3/float/floating_normal.min.js?20190306:2</a>.</p>
<p>At the very beginning of the file I found</p>
<pre><code>document.getElementById("ab_testing_tracker") &amp;&amp; "abTestValue_Value" != h ? 
document.getElementById("ab_testing_tracker").value
</code></pre>
<p>So I search (via CSS selector in the dev console) the webpage HTML for an element with an id of <code>"ab_testing_tracker"</code> and I am less than surprised that it returns nothing.  Then I unminified and searched through the file for all instances of "ab_testing_tracker".  That led me to this element:</p>
<p><code>document.getElementsByTagName("body")[0].insertAdjacentHTML("afterBegin","&lt;input type='hidden' name='ab_testing_tracker' id='ab_testing_tracker' value='"+h.split("|")[1]+"'&gt;")</code></p>
<p>Well, it appears there is a hidden input node inserted in the <code>body</code> of the document for the purpose of automation tracking.  Google searching revealed that automation tracking is often accomplished by looking at the <code>navigator.userAgent</code> property and finding userAgents that indicate automation.  But the script is using a random legitimate userAgent every time, so I don't think the userAgent is how the detection is finding selenium. </p>
<h2>Summary and possible workarounds</h2>
<p>Selenium can't click certain elements on the web page likely due to testing tracking by the website. There are a couple things I thought of to get around
it: maybe I can disable click events when using selenium? This I don't know how to do and couldn't find a way after searching online. Next, I tried to click on it with a Javascript executor, but that didn't work. </p>
<p><strong>Does anyone know a way to get around the test tracker and click the desired element?</strong> </p>
<pre><code>from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.by import By

# url
url = "https://hotels.ctrip.com/hotel/347422.html?isFull=F#ctm_ref=hod_sr_lst_dl_n_1_8"

# User Agent
User_Agent_List = ["Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2",
                   "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
                   "Mozilla/5.0 (compatible; MSIE 10.0; Macintosh; Intel Mac OS X 10_7_3; Trident/6.0)",
                   "Opera/9.80 (X11; Linux i686; U; ru) Presto/2.8.131 Version/11.11",
                   "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.2 (KHTML, like Gecko) Chrome/22.0.1216.0 Safari/537.2",
                   "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
                   "Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25"]

# Define the related lists
Score = []
Travel_Types = []
Room_Types = []
Travel_Dates = []
Comments = []

DEFINE_PAGE = 10

def next_page():

    current_page = int(browser.find_element_by_css_selector('a.current').text)

    # First, clear the input box
    browser.find_element_by_id("cPageNum").clear()
    print('Clear the input page')

    # Second, input the next page
    nextPage = current_page + 1
    print('Next page ',nextPage)
    browser.find_element_by_id("cPageNum").send_keys(nextPage)

    # Third, press the goto button
    browser.find_element_by_xpath('//*[@id="cPageBtn"]').click()



def scrap_comments():
    """
    It is a function to scrap User comments, Score, Room types, Dates.
    """
    html = browser.page_source
    soup = BeautifulSoup(html, "lxml")
    scores_total = soup.find_all('span', attrs={"class":"n"})
    # We only want [0], [2], [4], ...
    travel_types = soup.find_all('span', attrs={"class":"type"})
    room_types = soup.find_all('a', attrs={"class":"room J_baseroom_link room_link"})
    travel_dates = soup.find_all('span', attrs={"class":"date"})
    comments = soup.find_all('div', attrs={"class":"J_commentDetail"})
    # Save score in the Score list
    for i in range(2,len(scores_total),2):
        Score.append(scores_total[i].string)
    Travel_Types.append(item.text for item in travel_types)
    Room_Types.append(item.text for item in room_types)
    Travel_Dates.append(item.text for item in travel_dates)
    Comments.append(item.text.replace('\n','') for item in comments)

if __name__ == '__main__':

    # Random choose a user-agent
    user_agent = random.choice(User_Agent_List)
    print('User-Agent: ', user_agent)

    # Browser options setting
    options = Options()
    options.add_argument(user_agent)
    options.add_argument("disable-infobars")

    # Open a Firefox browser
    browser = webdriver.Firefox(options=options)
    browser.get(url)


    browser.find_element_by_xpath('//*[@id="appd_wrap_close"]').click()

    page = 1    
    while page &lt;= DEFINE_PAGE:
        scrap_comments()
        next_page()

    browser.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is not the tracking or the click event, the problem is timing and possibly browser size. 
Maximize the browser window and add explicit wait when searching for the banner close button</p>
<pre><code>browser = webdriver.Firefox(options=options)
browser.maximize_window()
browser.get(url)

wait = WebDriverWait(browser, 10)

wait.until(EC.element_to_be_clickable((By.ID, 'appd_wrap_close'))).click()
wait.until(EC.invisibility_of_element_located((By.ID, 'appd_wrap_default')))

current_page = int(browser.find_element_by_css_selector('a.current').text)
next_page = current_page + 1

page_number_field = wait.until(EC.visibility_of_element_located((By.ID, 'cPageNum')))
page_number_field.clear()
page_number_field.send_keys(next_page)
wait.until(EC.element_to_be_clickable((By.ID, 'cPageBtn'))).click()
</code></pre>
</div>
<span class="comment-copy">This sounds like an <a href="http://xyproblem.info/" rel="nofollow noreferrer">X-Y problem</a>. Instead of asking for help with your solution to the problem, edit your question and ask about the actual problem. What are you trying to do?</span>
<span class="comment-copy">@DebanjanB I want to know exactly why this click at the end of my <code>next_page()</code> function doesn't get executed: <code>browser.find_element_by_xpath('//*[@id="cPageBtn"]').click()</code>  To clarify, I have already found a workaround so that the script executes as desired, so that is not my problem.  I tried to provide all of the information I got from investigating this issue (the click not being executed) but it is entirely possible I have gone down the wrong path and the root cause has nothing to do with my findings.</span>
<span class="comment-copy">I have read this question and the linked question which you have answered. If you can exactly provide the information about the exact <b>element</b> on which  you want to click and exactly on which <b>webpage</b>, I can give a go !!!</span>
<span class="comment-copy">@Debanjan Thanks for taking the time to go through all of that!  Sorry it's so long, I just wanted to provide as much information as possible.   The webPage is here: <a href="https://hotels.ctrip.com/hotel/347422.html?isFull=F#ctm_ref=hod_sr_lst_dl_n_1_8" rel="nofollow noreferrer">hotels.ctrip.com/hotel/…</a>  and the button I am trying to click looks is this:   You can find it in the DOM by searching the xpath `'//*[@id="cPageBtn"]'.  note: the element is only visible when an animation at the bottom of the page is expanded.  The behavior I've found is that it is expanded when you open it in Firefox but minimized when you open in chrome.</span>
<span class="comment-copy">@DebanjanB please let me know any more information I could provide that could be helpful.  I can add a screenshot to my question showing the element I want to click if that helps, but it didn't seem like you can add one in a comment.</span>
<span class="comment-copy">Thank you for your answer.  I’ve already tried adding a wait before the button click and I gave it another shot this morning, but Unfortunately this yields the same result for me: everything in the script is executed correctly but the button. also just tried maximizing the window after launching the browser, and it still failed to click the element. Then I tried surrounding the button click with a try/except and no exceptions were raised.      I’m guessing that the goal of maximizing the window is to ensure the button is on screen, but it already is visible when I launch Firefox from selenium.</span>
<span class="comment-copy">@C.Peck Do you have any errors? and don't use try except, this is just masking the problem, not solving it.</span>
<span class="comment-copy">By the way, you tried waiting before <code>appd_wrap_close</code>? the banner takes few seconds to load.</span>
<span class="comment-copy">Try except was a debugging attempt to see if clicking that button would raise an exception, which it does not.  And no, I don’t have any errors. One of the main reasons I thought it was related to the onClick event is that I CAN successfully click several other  buttons which don’t trigger an event and it worked fine. Thanks for your input, any knowledge you can share is greatly appreciated.</span>
<span class="comment-copy">@C.Peck Updated my answer, this worked for me.</span>
