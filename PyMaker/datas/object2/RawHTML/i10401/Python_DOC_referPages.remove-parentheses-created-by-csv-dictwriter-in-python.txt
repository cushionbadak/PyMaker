<div class="post-text" itemprop="text">
<p>when i'm saving a dictionary representing a graph with the format:</p>
<pre><code>graph_dict = {'b': ['a', 'c'], 'a': [], 'c': ['a'], 'd': []}
</code></pre>
<p>and save it with the csv.DictWriter and load it i get:</p>
<pre><code>loaded_graph ={'b': "['a', 'c']", 'c': "['a']", 'a': '[]', 'd': '[]'}
</code></pre>
<p>How  can i avoid the added quotation marks for the value lists or what code do i have to use to remove them when reading the file? Help would be appreciated!</p>
<pre><code>print(graph_dict)

with open('graph.csv', 'w') as csvfile:

    graph = ['vertices', 'edges']
    writer = csv.DictWriter(csvfile, fieldnames=graph)

    writer.writeheader()

    for vertex in graph_dict:
        edges = graph_dict[vertex]

        writer.writerow({'vertices': vertex, 'edges': edges})


print("reading")

loaded_graph = {}

with open('graph.csv') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        loaded_graph[row['vertices']] = row['edges']

print(loaded_graph)
</code></pre>
<p>the csv file opened in editor looks like this:</p>
<pre><code>vertices,edges
b,"['a', 'c']"
a,[]
c,['a']
d,[]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have</p>
<pre><code>graph_dict = {'b': ['a', 'c'], 'a': [], 'c': ['a'], 'd': []}
</code></pre>
<p>Then</p>
<pre><code>    edges = graph_dict[vertex]
    writer.writerow({'vertices': vertex, 'edges': edges})
</code></pre>
<p>This writes a list to the file -- it is converted to str.</p>
<p>Do, for example</p>
<pre><code>writer.writerow({'vertices': vertex, 'edges': ','.join(edges)})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to "serialize" this data using CSV, which might be appropriate if you want to analyze the file outside of Python. If not, your problem will be solved more easily with the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">pickle</a> module.</p>
<p>If you must use CSV, make sure the values you save as "edges" to the file are all strings. Then when you read them back from the file, turn them back to a list.</p>
<pre><code>import csv

graph_dict = {'b': ['a', 'c'], 'a': [], 'c': ['a'], 'd': []}

file_path = 'graph.csv'

with open(file_path, 'w', newline='') as outfile:
    fieldnames = ['vertices', 'edges']
    writer = csv.DictWriter(outfile, fieldnames=fieldnames)
    writer.writeheader()

    for vertex, edges in graph_dict.items():
        # Save multiples as "x,y,z"
        edges = ','.join(edges)
        row = {'vertices': vertex, 'edges': edges}
        writer.writerow(row)

loaded_graph = {}
with open(file_path, 'r', newline='') as infile:
    reader = csv.DictReader(infile)
    for row in reader:
        edges = row['edges']
        # Read empty as [], full as ['x', 'y', 'z']
        edges = edges.split(',') if edges else []
        loaded_graph[row['vertices']] = edges
</code></pre>
<p>That gives <code>{'a': [], 'b': ['a', 'c'], 'c': ['a'], 'd': []}</code> as requested.</p>
</div>
<div class="post-text" itemprop="text">
<p>CSV is not intended for nested data structures; it has no meaningful way of dealing with them (it's converting your <code>list</code> values to <code>str</code> for output).</p>
<p>You either need to use a more appropriate format (e.g. JSON or <code>pickle</code>), or use horrible hacks to convert the <code>repr</code> of the values back to their original values, e.g. <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a> (except that won't work properly if some of the original values were supposed to be strings).</p>
</div>
<span class="comment-copy">Parentheses? Do you mean quotes/quotation marks? CSV is not an appropriate format for nested data structures, so you're already barking up the wrong tree.</span>
<span class="comment-copy">Use <a href="http://stackoverflow.com/questions/17043860/python-dump-dict-to-json-file">JSON instead of CSV</a> and move on. CSV is designed for flat table-like data format, not for arbitrary nested data. Use proper tool for effect you're trying to achieve.</span>
<span class="comment-copy">That's just masking tape on the problem, because it means parsing the "poor CSV within true CSV" manually when you read it back in.</span>
<span class="comment-copy">Thanks a lot for the answers! I'm not that experienced so thanks for the hint to pickle and json. Basicaly i was just looking to store the data after working on it and calling the saved data when beginning the next time. In addition i want to visualize the data in gephi which uses csv (and others). But when i looked it up i found that there is a json importer so my problems is solved. Thanks!</span>
