<div class="post-text" itemprop="text">
<p>I use the excellent <a href="http://click.pocoo.org/5/" rel="noreferrer">Python Click</a> library for handling command line options in my tool. Here's a simplified version of my code (full script <a href="https://github.com/ewels/MultiQC/blob/master/scripts/multiqc" rel="noreferrer">here</a>):</p>
<pre><code>@click.command(
    context_settings = dict( help_option_names = ['-h', '--help'] )
)
@click.argument('analysis_dir',
                 type = click.Path(exists=True),
                 nargs = -1,
                 required = True,
                 metavar = "&lt;analysis directory&gt;"
)

def mytool(analysis_dir):
   """ Do stuff """

if __name__ == "__main__":
    mytool()
</code></pre>
<p>If someone runs the command without any flags, they get the default click error message:</p>
<pre><code>$ mytool

Usage: mytool [OPTIONS] &lt;analysis directory&gt;

Error: Missing argument "analysis_dir".
</code></pre>
<p>This is nice, but I'd quite like to tell (very) novice users that more help is available by using the help flag. In other words, add a custom sentence to the error message when the command is invalid telling people to try <code>mytool --help</code> for more information.</p>
<p>Is there an easy way to do this? I know I could remove the <code>required</code> attribute and handle this logic in the main function, but that feels kind of hacky for such a minor addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>Message construction for most errors in python-click is handled by the show method of the UsageError class: <code>click.exceptions.UsageError.show</code>. </p>
<p>So, if you redefine this method, you will be able to create your own customized error message. Below is an example of a customization which appends the help menu to any error message which answers this <a href="https://stackoverflow.com/questions/35642202/python-click-return-the-helper-menu">SO question</a>:</p>
<pre><code>def modify_usage_error(main_command):
    '''
        a method to append the help menu to an usage error

    :param main_command: top-level group or command object constructed by click wrapper 
    :return: None
    '''

    from click._compat import get_text_stderr
    from click.utils import echo
    def show(self, file=None):
        import sys
        if file is None:
            file = get_text_stderr()
        color = None
        if self.ctx is not None:
            color = self.ctx.color
            echo(self.ctx.get_usage() + '\n', file=file, color=color)
        echo('Error: %s\n' % self.format_message(), file=file, color=color)
        sys.argv = [sys.argv[0]]
        main_command()

    click.exceptions.UsageError.show = show
</code></pre>
<p>Once you define your main command, you can then run the modifier script:</p>
<pre><code>import click
@click.group()
def cli():
    pass

modify_usage_error(cli)
</code></pre>
<p>I have not explored whether there are runtime invocations of ClickException other than usage errors. If there are, then you might need to modify your custom error handler to first check that ctx is an attribute before you add the line <code>click.exceptions.ClickException.show = show</code> since it does not appear that ClickException is fed ctx at initialization.</p>
</div>
<span class="comment-copy">I'm having exactly the same issue. I'd either like to automatically print out the help if a mistake happens, or at the very least tell the user how to print out help. Otherwise we have to assume that everyone using our tool is familiar with unix-based thinking. I like click so far but am disheartened that this question hasn't been answered, because I want something that will help build tools that novices can easily use.</span>
<span class="comment-copy">Just found this, which might be a solution: <a href="http://stackoverflow.com/questions/35642202/python-click-return-the-helper-menu" title="python click return the helper menu">stackoverflow.com/questions/35642202/â€¦</a></span>
<span class="comment-copy">Nope, that didn't work.</span>
<span class="comment-copy">What about <a href="http://click.pocoo.org/6/exceptions/#what-if-i-don-t-want-that" rel="nofollow noreferrer">click.pocoo.org/6/exceptions/#what-if-i-don-t-want-that</a> ?</span>
<span class="comment-copy">Yes - I looked at exactly this @blubberdiblub but couldn't figure out how to actually implement it when not using the <code>command.main(['command-name', 'args', 'go', 'here'])</code> syntax. I couldn't find any examples anywhere and gave up. If you have any pointers as to how to apply this with the syntax in the example above, that would be really helpful!</span>
<span class="comment-copy">Fantastic, thanks RJ! This works perfectly with one exception - I had to remove the final function call to <code>main_command()</code> as this caused a recursion error.</span>
<span class="comment-copy">This felt good! <a href="https://github.com/ewels/MultiQC/commit/62cc60" rel="nofollow noreferrer">github.com/ewels/MultiQC/commit/62cc60</a> I've had a low level of annoyance about not being able to do this for seven months now! Thanks again!</span>
<span class="comment-copy">Any suggestion how to overwrite all the click exception types at once? Ideally so it doesn't break when click add's new exceptions?</span>
<span class="comment-copy">You might try to iterate over dir(click.exceptions), exclude the built-in methods <a href="https://stackoverflow.com/a/21542780/4941585">stackoverflow.com/a/21542780/4941585</a> and then setattr(object, 'show', show). <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#setattr</a> However this may cause unexpected behavior.</span>
