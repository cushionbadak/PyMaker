<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>I'm solving some cryptographic problem,</p>
<p>I need the  cube root of <code>4.157786362549383e+37</code>, which gives me <code>3464341716380.1113</code></p>
<p>using</p>
<pre><code>x = x ** (1. / 3)
</code></pre>
<p>I thought it was weird at first, so I did try:</p>
<pre><code>x=1000
print(x)
x= pow(x,1/3)
print(x)
</code></pre>
<p>but got <code>9.99999998</code></p>
<p>I have even tried somewhere <a href="https://repl.it/languages/python3" rel="nofollow">else</a>. But i got the same result. Is there something wrong? How can I calculate the true cube root?</p>
</div>
<div class="post-text" itemprop="text">
<p>Due to floating-point arithmetic, this is hard to represent.</p>
<p>Using <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow">decimal</a> somewhat resolves it but is still problematic in certain numbers, and allows rounding only to integrals. Try using a decimal like so:</p>
<pre><code>&gt;&gt;&gt; (1000 ** (Decimal(1)/3)).to_integral_exact()
Decimal('10')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is normal when dealing with floating-point numbers on a computer. No decimal fraction can be represented precisely in binary, which deals in negative powers of 2, so you need to get used to getting very close approximations.</p>
<p>In this specific case, if you know your result is supposed to be an integer, simply use <code>round()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Both answers are correct within the accuracy of the hardware's numerical representation.  1/3 is a repeating "decimal" in binary: 0.010101010101...
It can't be represented precisely.</p>
<p>If you want a "true" cube root, you need to implement an algorithm that handles the round-off problems and corner cases you find useful.  Given the representation problem, you could certainly cover integer cubes.  However, noting even simple cases, such as cube_root(1.728) =&gt; 1.2, would be problematic: neither decimal number converts precisely to binary.</p>
</div>
<div class="post-text" itemprop="text">
<p>As discussed in other answers, this is due to the limited precision of floating point numbers. It's just not possible to exactly represent values, unless your math is done symbolically. If you are fine with limited precision but just need more precision than the built in datatypes give you, I suggest an arbitrary precision arithmetic library, such as <a href="http://mpmath.org/" rel="nofollow">this one</a>.</p>
</div>
<span class="comment-copy">This looks like a floating point issue ... <a href="http://stackoverflow.com/q/588004/748858">stackoverflow.com/q/588004/748858</a> .  You probably won't get any better without some library for working with symbolic manipulation (e.g. <code>sympy</code>)</span>
<span class="comment-copy">Look at <a href="http://stackoverflow.com/questions/14057835/more-decimal-places-needed-in-python" title="more decimal places needed in python">stackoverflow.com/questions/14057835/â€¦</a>, it won't be a true cube root but it may be closer.</span>
<span class="comment-copy">Why do you think that 3464341716380.1113 is incorrect?</span>
<span class="comment-copy">this works for 1000, but not for large values. Not even if all af them are Decimal.</span>
