<div class="post-text" itemprop="text">
<p>Lets say I have datetime in the format</p>
<pre><code>12 September, 2016
September 12, 2016
2016 September, 12
</code></pre>
<p>I need regex like it should return match in same order always for any dateformat given above</p>
<pre><code>match-1 : 12
match-2 : September
match-3 : 2016
</code></pre>
<p>I need results in the same order always. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can't switch the group order but you can name your groups:</p>
<pre><code>(r'(?P&lt;day&gt;[\d]{2})(?:\s|,|\?|$)|(?P&lt;month&gt;[a-zA-Z]+)|(?P&lt;year&gt;[\d]{4})')
</code></pre>
<ul>
<li><p><code>(?P&lt;day&gt;[\d]{2})(?:\s|,|\?|$)</code>: matches a day, can be accessed in python with <code>l.group("day")</code></p></li>
<li><p><code>(?P&lt;month&gt;[a-zA-Z]+)</code>: matches a month, can be accessed in python with <code>l.group("month")</code></p></li>
<li><p><code>(?P&lt;year&gt;[\d]{4})</code>: matches a year, can be accessed in python with <code>l.group("year")</code></p></li>
</ul>
<p>Example:</p>
<pre><code>import re

data = """
12 September, 2016
September 12, 2016
2016 September, 12
September 17, 2012
17 October, 2015
"""

rgx = re.compile(r'(?P&lt;day&gt;[\d]{2})(?:\s|,|\?|$)|(?P&lt;month&gt;[a-zA-Z]+)|(?P&lt;year&gt;[\d]{4})')

day = ""
month = ""
year = ""

for l in rgx.finditer(data):
        if(l.group("day")):
                day = l.group("day")
        elif(l.group("month")):
                month = l.group("month")
        elif(l.group("year")):
                year = l.group("year")

        if(day != "" and month != "" and year != ""):
                print "{0} {1} {2}".format(day, month, year)
                day = ""
                month = ""
                year = ""
</code></pre>
<p><a href="https://ideone.com/4o0vfQ" rel="nofollow">Demo</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Named groups as suggested below is a good way of doing it (especially if you already have the regexes set up) but for completion's sake here's how to handle it with the <code>datetime</code> module.</p>
<pre><code>from datetime import datetime as date

def parse_date(s):
    formats = ["%d %B, %Y",
               "%B %d, %Y",
               "%Y %B, %d"]

    for f in formats:
        try:
            return date.strptime(s, f)
        except ValueError:
            pass

    raise ValueError("Invalid date format!")

arr = ["12 September, 2016",
       "September 12, 2016",
       "2016 September, 12",
       "12/9/2016"]

for s in arr:
    dt = parse_date(s)      
    print(dt.year, dt.strftime("%B"), dt.day)

"""

2016 September 12
2016 September 12
2016 September 12
Traceback (most recent call last):
  File "C:/Python33/datetest.py", line 22, in &lt;module&gt;
    dt = parse_date(s)
  File "C:/Python33/datetest.py", line 19, in parse_date
    raise ValueError("Invalid date format!")
ValueError: Invalid date format!

"""
</code></pre>
<p>For more information, see the <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow">datetime documentation page</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot change group orderings. You need to do a "or" of 3 patterns and then pass through the result to determine which group mapped to what, which should be pretty simple.</p>
</div>
<span class="comment-copy">Thanks bro!. this is actually what i want. It works...</span>
<span class="comment-copy">You might want to cater for the case where data doesn't meet one of those three formats otherwise you'll risk getting a <code>NameError</code> - or potentially and even worse, re-using the previous date where the current one doesn't match...</span>
<span class="comment-copy">Good point, fixed!</span>
<span class="comment-copy">Cool - alternatively - you can wrap it in a function like <a href="https://stackoverflow.com/a/23581184">here</a></span>
<span class="comment-copy">That certainly looks a lot more elegant. I'm new to SO, should I just go ahead and use your idea in my answer or would it be more appropiate to let you submit it as an answer yourself?</span>
<span class="comment-copy">You're fine as is :)</span>
