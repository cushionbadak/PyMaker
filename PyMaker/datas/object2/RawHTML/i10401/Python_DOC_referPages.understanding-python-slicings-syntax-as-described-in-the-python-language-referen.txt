<div class="post-text" itemprop="text">
<p>The following is the slicings syntax that I copied from <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="nofollow">The Python Language Reference</a>:</p>
<pre><code>slicing      ::=  primary "[" slice_list "]"
slice_list   ::=  slice_item ("," slice_item)* [","]
slice_item   ::=  expression | proper_slice
proper_slice ::=  [lower_bound] ":" [upper_bound] [ ":" [stride] ]
lower_bound  ::=  expression
upper_bound  ::=  expression
stride       ::=  expression
</code></pre>
<p>Per my understanding, this syntax equates to <code>SomeMappingObj[slice_item,slice_item etc...]</code> which again equates to something like <code>a[0:2:1,4:7:1]</code> and <code>a =[i for i in range(20)]</code>. </p>
<p>But, I can't test this in IPython and I did not find any questions about multiple slicings. Is my interpretation about multiple slicing in python correct? What am I doing incorrectly?</p>
<pre><code>In [442]: a=[i for i in range(20)]

In [443]: a[0:12:2]
Out[443]: [0, 2, 4, 6, 8, 10]

In [444]: a[0:12:2,14:17:1]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-444-117395d33bfd&gt; in &lt;module&gt;()
----&gt; 1 a[0:12:2,14:17:1]

TypeError: list indices must be integers or slices, not tuple
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <code>slice_list</code> should contain as many "dimensions" as the object being indexed. The multi-dimensional capability is not used by any Python library object that I am aware of, but you can test it easily with <code>numpy</code>:</p>
<pre><code>import numpy as np
a = np.array([[1, 2], [3, 4]])
a[0:1, 0]
</code></pre>
<p>There are a number of such features in the Python language that are not used directly in the main library. The <code>__matmul__</code> magic method (<code>@</code> operator) is another example.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's valid syntax, so you didn't get a SyntaxError. It's just not a meaningful or supported operation on Python lists. Similarly, <code>"5" + fish</code> isn't a SyntaxError, <code>1/0</code> isn't a SyntaxError, and <code>I.am.a.monkey</code> isn't a SyntaxError.</p>
<p>You can't just expect all syntactically valid expressions to be meaningful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note that the grammar is structured this way to allow two things:</p>
<ol>
<li><p>A family of <code>slice</code> literals:</p>
<ol>
<li><code>x:y:z == slice(x, y, z)</code></li>
<li><code>x:y == slice(x, y, None)</code></li>
<li><code>x: == slice(x, None, None)</code></li>
<li><code>x::z == slice(x, None, z)</code></li>
<li><code>::z == slice(None, None, z)</code></li>
<li><code>:y:z == slice(None, y, z)</code></li>
<li><code>:: == slice(None, None, None)</code></li>
<li><code>:y: == slice(None, y, None)</code></li>
</ol>
<p>There are a few other patterns possible (<code>x:y:</code>, <code>:y</code>, etc), but each
is a variation on one of the above.</p></li>
<li><p>Slice literals may <em>only</em> be used inside <code>[...]</code>, not in any arbitrary expression.</p></li>
</ol>
<p>Otherwise, the comma-separate list is treated like any other tuple. When you write an expression like <code>f[1, 2:3, 5::7]</code>, then <code>f.__getitem__</code> receives a tuple <code>(1, slice(2, 3, None), slice(5, None, 7)</code> as its argument. What <code>f.__getitem__</code> <em>does</em> with that argument is entirely up to <code>type(f)</code>'s implementation of <code>__getitem__</code>. For instance, lists and strings only accept <code>int</code> and <code>slice</code> values as arguments, and dicts only accept hashable values.</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't a syntax issue hence no <code>SyntaxError</code>, <em>this syntax is totally supported</em>. <code>list</code>'s just don't know what to do with your slices. Take for example a dummy class that does <em>nothing</em> but define <code>__getitem__</code> that receives the contents of subscriptions <code>[]</code>:</p>
<pre><code>class DummySub:
    def __getitem__(self, arg):
        print(arg)

f = DummySub()
</code></pre>
<p>It just prints its <code>arg</code>. We can supply slices, as permitted by the grammar, but, <em>it's up to the implementing object to decide if these are an operation</em> that's supported and act on them (like <code>nparray</code>s do) or not (and raise a <code>TypeError</code>):</p>
<pre><code>f[1:2:3, 4:4:4]
(slice(1, 2, 3), slice(4, 4, 4))
</code></pre>
<p>Heck:</p>
<pre><code>f[1:2:3, 4:5:6, 7:8:9, ...]  # totally valid
(slice(1, 2, 3), slice(4, 5, 6), slice(7, 8, 9), Ellipsis)
</code></pre>
<p>By reading further on in the <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="nofollow"><em>reference for slicings</em></a> you should see that:</p>
<blockquote>
<p>The semantics for a slicing are as follows. The primary is indexed (using the same <code>__getitem__()</code> method as normal subscription) with a key that is constructed from the slice list, as follows. <em>If the slice list contains at least one comma, the key is a tuple containing the conversion of the slice items</em>; otherwise, the conversion of the lone slice item is the key. </p>
</blockquote>
<p><sup><em>(emphasis mine)</em></sup></p>
</div>
<span class="comment-copy">what are you expecting as an output for <code>a[0:12:2,14:17:1]</code>?</span>
<span class="comment-copy">That is what I wanted to find out. From the syntax, it seems to be a valid operation. Common sense would make me guess the result as [0,2,4,6,8,10,14,15,16].</span>
<span class="comment-copy">For your purpose use <code>a[0:12:2] + a[14:17:1]</code></span>
<span class="comment-copy">I have to say, this question is much more insightful than the title initially led me to expect. Nice work.</span>
<span class="comment-copy">Might be  'not supported operation' but I question 'not a meaningful operation' part. If I want to extract the slice [0,2,4,6,8,10,14,15,16] from a, the easiest and most obvious way is to have multiple slices. I am not sure if something not supported would make it to the language syntax specification. Can you please provide any reference?</span>
<span class="comment-copy">@sudheernalubolu: You're assuming that comma-separated slices mean something completely different from what they actually mean. As vishes_shell said in the comments, you want <code>a[0:12:2] + a[14:17:1]</code>. Comma-separated slices are for multidimensional objects.</span>
<span class="comment-copy">@sudheernalubolu The <i>grammar</i> allowing any <code>primary</code> to be sliced is what allows you to define <code>__getitem__</code> for any class. The parser first has to allow the expression before you can define the semantics. Extended slice notation simply isn't defined for any builtin type.</span>
<span class="comment-copy">(Ignore the last sentence in my comment above; it's just wrong.)</span>
