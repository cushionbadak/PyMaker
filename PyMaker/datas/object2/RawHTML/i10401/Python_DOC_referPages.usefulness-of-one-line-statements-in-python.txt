<div class="post-text" itemprop="text">
<p>Is using one line loops, even nested loops always a good practice in Python? I see a lot of people just  love "one-liners", but to me they're hard to read sometimes, especially if we're talking about nested loops.</p>
<p>Moreover most of nested loops I've seen so far exceed the recommended 79 characters per line.</p>
<p>So I'd like to know if "one-liners" offer anything extra apart being compact? Do they use less memory maybe?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, they may be easily faster, since more code may be run in C (in explicit loop all of immediate steps has to be available to interpreter, in one-liner list comprehension it does not have to). There is also overhead of <code>.append</code> method call, method look-up etc. In list comprehension all of that is avoided:</p>
<pre><code>import timeit


def f1():
    result = []
    for x in range(100):
        for y in range(100):
            result.append(x * y)
    return result


def f2():
    return [x * y for y in range(100) for x in range(100)]


print('loop: ', timeit.timeit(f1, number=1000))
print('oneliner:', timeit.timeit(f2, number=1000))
</code></pre>
<p>Results (Python 3):</p>
<pre><code>loop:  1.2545137699926272
oneliner: 0.6745600730064325
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Depends on the one-liner, some can be much more efficient and very readable.</p>
<p>Take the case of list comprehension. Lets say you want to take all numbers from 1 to 10 and output a list of their product multiplied by 2.</p>
<p>Input: <code>[1,2,3,...,9,10]</code><br/>
Output: <code>[2,4,6,...,18,20]</code></p>
<p>You can do it in a for loop like so:</p>
<pre><code>output = []
for i in range(1, 11):
    output.append(i*2)
</code></pre>
<p>Or you can just use list comprehension:</p>
<pre><code>[i*2 for i in range(1,11)]
</code></pre>
<p>You'll see the list comprehension is MUCH faster, and also quite readable.</p>
<p>The same can be said for dict comprehension, set comprehension and generator expressions. Also the use of <code>map()</code> and <code>filter()</code> are highly encouraged as long as it's understandable.</p>
</div>
<div class="post-text" itemprop="text">
<p>For discussion... they all do the same.</p>
<p>'a'  a list comprehension... the smoking one-liner...
'b'  same thing, but you can provide annotation within a list comprehension... it is still technically a one-liner
'c'  the conventional approach.
If speed is a concern, I am less worried about the speed unless, I perform the same task day in day out and it takes a really long time to perform.  Comparing speed when you are talking micro or nanoseconds may be of academic interest, but it will not impact the vast majority of users.
I always vote for clarity of expression over compactness of code.</p>
<pre><code>a = [i**2 for i in range(20) if i &gt; 5 and i &lt; 10]

b = [i**2               # do this  
     for i in range(20) # using these  
     if (i &gt; 5) and     # where this and  
        (i &lt; 10)        # this is good  
     ]  

c = []  
for i in range(20):  
    if (i &gt; 5) and (i &lt; 10):  
        c.append(i**2)  
</code></pre>
<p>EDIT
The example given of producing the product of a range of numbers, is a good indicator, that the oneliner need not be the issue, but the method used to obtain the result.  I will illustrate with determining the product using only 10 values... try it with 100 if you like.  I will do it in full format, but could reduce everything to a oneliner if need (import excluded).</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; b = np.arange(10).reshape(10,1)
&gt;&gt;&gt; a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; b
array([[0],
       [1],
       [2],
       [3],
       [4],
       [5],
       [6],
       [7],
       [8],
       [9]])
&gt;&gt;&gt; a*b
array([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18],
       [ 0,  3,  6,  9, 12, 15, 18, 21, 24, 27],
       [ 0,  4,  8, 12, 16, 20, 24, 28, 32, 36],
       [ 0,  5, 10, 15, 20, 25, 30, 35, 40, 45],
       [ 0,  6, 12, 18, 24, 30, 36, 42, 48, 54],
       [ 0,  7, 14, 21, 28, 35, 42, 49, 56, 63],
       [ 0,  8, 16, 24, 32, 40, 48, 56, 64, 72],
       [ 0,  9, 18, 27, 36, 45, 54, 63, 72, 81]])
</code></pre>
<p>or as a one-liner</p>
<pre><code>&gt;&gt;&gt; out = np.arange(10) * np.arange(10).reshape(10,1)
</code></pre>
<p>and of course there are built-in functions to do this without the full expression I have shown.</p>
<p>The point being made, speed isn't everything.  Clarity of code AND choosing the right tools to do the job should be considered first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. This is good practice. </p>
<p>Usually experienced programmers use anonymous functions (see, lambda: <a href="http://www.secnetix.de/olli/Python/lambda_functions.hawk" rel="nofollow">http://www.secnetix.de/olli/Python/lambda_functions.hawk</a>) in one-line loops and it gives better performance. </p>
</div>
<span class="comment-copy">Depends on the specific one-liner. Certain Python constructs (e.g.: list comprehensions) can potentially be optimized by the interpreter to produce "better" machine code than if you wrote a normal for-loop to fill a list. However as you pointed out readability of code suffers if you overcomplicate them and it's the programmer's job to decide at what point the code becomes unreadable (and therefore unmaintainable)</span>
<span class="comment-copy">If would help if you could show some comprehension which is unreadable. Often it's salvageable by using correct naming and some whitespace. But it's hard to demonstrate without concrete sample.</span>
<span class="comment-copy">Just look at the stacked list comprehension in my example.. it need not even be a physical one-liner even though it technically is</span>
<span class="comment-copy">One-liners are often more readable. In that case they are good. If they are less readable, then they are not good ;)</span>
<span class="comment-copy">Great answer, exactly what I was looking for. Looks like it's time I dive into list comprehensions and learn them properly. Just out of curiosity: what if I come across a long nested loop that exceeds PEP recommandation of 79 chars? (I know that I could just name iterator 'x' or something similar to keep it short, but what if even with this it would exceed 79 chars)</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/5809059/line-continuation-for-list-comprehensions-or-generator-expressions-in-python">You may use newlines in list comprehensions</a>. Another common technique for cartesian nested loops is using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> instead of nested looping.</span>
<span class="comment-copy"><code>if i &gt; 5 and i &lt; 10</code> -&gt; <code>if 5 &lt; i &lt; 10</code> and suddenly we talk about super simple comprehension - one loop, one if, reads super easy.</span>
<span class="comment-copy">check my addendum to show an even better alternative.  This option scales nicely when data inputs are quite large.... which is another consideration.  Not all approaches time uniformly and are often dependent on data size.</span>
<span class="comment-copy">How is saying "use numpy" an alternative to list comprehensions? numpy is a (3rd party) library specifically for numerical computation, while list comprehensions (and other one-liners) can be generic and used for many different cases that are not related to numerical computation</span>
<span class="comment-copy">that was my exact point. If you have a task, choosing the right tool  is as important as choosing the method of implementing the algorithm.  BTW numpy is not limited to numerical computation, it handles text data quite nicely since vectorization of operations is one of its tenants.  Please note the first sentence in my post.... For discussion.  If everyone wants to bring out time comparisons, then the point of computer methods and their application will be lost.</span>
