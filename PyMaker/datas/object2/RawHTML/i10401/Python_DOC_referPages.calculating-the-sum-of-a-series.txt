<div class="post-text" itemprop="text">
<p>This is my assignment and for the life of me i cant seem to think of a way to do it. This is the code I have so far:</p>
<pre><code>sum = 0
k = 1
while k &lt;= 0.0001:
     if k % 2 == 1:
       sum = sum + 1.0/k
     else:
      sum = sum - 1.0/k
 k = k + 1
 print()
</code></pre>
<p>This is my assignment :</p>
<blockquote>
<p>Create a python program named sumseries.py that does the following:
  Put comments at the top of your program with your name, date, and
  description of what the program does.</p>
<p>Write a program to calculate and display the sum of the series:</p>
<p>1 - 1/2 + 1/3 - 1/4 + ...</p>
<p>until a term is reached that is less than 0.0001.</p>
</blockquote>
<p>The answer with 10,000 iterations appears to be 0.6930971830599583</p>
<p>I ran the program with 1,000,000,000 (billion) iterations and came up with a number of 0.6931471810606472. I need to create a loop to programmably create the series.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, you could write this shorter:</p>
<pre><code>Answer = sum(1.0 / k if k % 2 else -1.0 / k for k in range(1, 10001))
</code></pre>
<hr/>
<h3>What this code does:</h3>
<ul>
<li>the innermost part is a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> expression, which computes the elements of a series 'on the fly'

<ul>
<li><code>1.0 / k if k % 2 else -1.0 / k</code> results in <code>1.0 / k</code> if <code>k</code> is odd and <code>-1.0 / k</code> otherwise (<code>a - b</code> is the same as <code>a + (-b)</code>)</li>
<li><code>for k in range(1, 10001)</code> goes through all <code>k</code>s in range from 1 (included) to 10001 (excluded)</li>
</ul></li>
<li><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> can compute the sum of any sequence (any <a href="https://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols"><em>iterable</em></a>, to be precise), be it a list, a tuple, or a generator expression</li>
</ul>
<hr/>
<h3>The same without generator expressions:</h3>
<pre><code>Answer = 0
for k in range(1, 10001):
    if k % 2:
        Answer += 1.0 / k
    else:
        Answer -= 1.0 / k

    # or simply:
    # Answer += 1.0 / k if k % 2 else -1.0 / k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're  almost there, all you need to do is to replace </p>
<pre><code>while k &lt;= 0.0001:
</code></pre>
<p>with:</p>
<pre><code> while term &lt;= 0.0001:
</code></pre>
<p>term is naturally 1/k</p>
</div>
<div class="post-text" itemprop="text">
<p>To make the teacher happy, you must follow the details of the problem, as well as the spirit of the problem. The problem clearly states to print the sum, not all the partial sums. You will anger the teacher by submitting a solution that spews 10000 lines of crap not requested.</p>
<p>Some have suggested pre-calculating a loop limit of 10000, but that was not the requested algorithm. Instead, one is to calculate successive terms (1, -1/2, 1/3, -1/4, ...) until reaching a term less than 0.0001.</p>
<p>The reason the problem was specified that way is that one ends up with a more generally useful program, applicable to a wide class of term formulas. Not a fragile one that gets the wrong answer if the term formula is changed from <code>(-1)**(k-1)/k</code>, to say <code>1/k</code> or <code>1/k^2</code>.</p>
<p>The teacher's wording "term less than 0.0001" is imprecise and assumed some math knowledge. They want the magnitude (absolute value) of the term to be less than 0.0001. Otherwise, iteration would stop at the second term -1/2, as someone pointed out.</p>
<p>So, this answer would not be complete without a pompous pedantic solution that skips ahead a chapter. ;) Note that previous some answers will not work in Python2.x without a conversion to float.</p>
<pre><code>def term(k):
    return (-1)**(k - 1) / float(k)

err = 0.0001

def terms():
    k = 1
    t = term(k)
    while abs(t) &gt;= err:
        yield t
        k += 1
        t = term(k)

print(sum(terms()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the answer your teacher is looking for for full credit.<br/>
until &lt; .0001 means while &gt;= 0.0001  This modifies your code the least, so makes it a correction of what you wrote</p>
<pre><code>sum = 0
k = 1
while 1.0/k &gt;= 0.0001:
     if k % 2 == 1:
       sum = sum + 1.0/k
     else:
       sum = sum - 1.0/k
     k = k + 1
print(sum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Absolutly simplest way would be the following
<code>sum((-1)**(k) / k for k in range(1, 10001))</code></p>
</div>
<span class="comment-copy"><i>"until a term is reached that is less than 0.0001."</i> This seems to imply you may stop at <code>1/k &lt; 0.0001</code>, right?</span>
<span class="comment-copy">Your <code>k</code> is an integer that denotes current iteration step, starting at <code>1</code>. How this integer would ever be smaller than <code>0.0001</code>?</span>
<span class="comment-copy">Since a series is a sum, the second term is -1/2, which is already less than 0.0001.</span>
<span class="comment-copy">Using <code>sum</code> as the name of an identifier is a bad idea since <code>sum</code> is a built-in function.</span>
<span class="comment-copy">You could simply do <code>print(math.log(2))</code>, though I suspect that wouldn't be what the instructor is looking for :)</span>
<span class="comment-copy">Or <code>sum((-1)**(~k % 2) / k for k in range(1, 10001))</code>.</span>
<span class="comment-copy">Absolutely beautiful, but if I saw a student hand this in, I'd scratch my head about his/her own programming efforts that went into answering the question. :)</span>
<span class="comment-copy">This is what i ended up with, it prints all 10001 outputs on the screen, which i think i the teacher wants x = 0 y = 0 for k in range (1,10001):      if k % 2 == 0:        x += 1.0/k      else:        y += 1.0/k       print (y - x - 1.0/10001**2)</span>
<span class="comment-copy">@JamieSchwiderski, why use two variables if you could do <code>x += 1.0 / k if k % 2 else -1.0 / k</code> instead of the <code>if/else</code> case?</span>
<span class="comment-copy">we are in a for loop or while loop in our chapter</span>
<span class="comment-copy">I need to create a loop to programmably create the series, which looks like what I was doing in the solution following</span>
<span class="comment-copy">You're almost done, but your program needs to stop when 1/k &lt;= 0.0001</span>
