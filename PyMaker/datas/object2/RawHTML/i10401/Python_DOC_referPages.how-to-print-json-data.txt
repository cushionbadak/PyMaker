<div class="post-text" itemprop="text">
<p>I have following json file and python code and i need output example...</p>
<p><strong>json file</strong></p>
<pre><code>{"b": [{"1": "add"},{"2": "act"}],
"p": [{"add": "added"},{"act": "acted"}],
"pp": [{"add": "added"},{"act": "acted"}],
"s": [{"add": "adds"},{"act": "acts"}],
"ing": [{"add": "adding"},{"act": "acting"}]}
</code></pre>
<p><strong>python</strong></p>
<pre><code>import json
data = json.load(open('jsonfile.json'))
#print data
</code></pre>
<p><strong>out put example</strong></p>
<pre><code>&gt;&gt; b
&gt;&gt; p
&gt;&gt; pp
&gt;&gt; s
&gt;&gt; ing
</code></pre>
<p>any ideas how to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>This doesn't have anything to do with JSON. You have a dictionary, and you want to print the keys, which you can do with <code>data.keys()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a working example (it's emulating your file using <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="nofollow">io.StringIO</a>):</p>
<pre><code>import json
import io

jsonfile_json = io.StringIO("""
{
    "b": [{"1": "add"}, {"2": "act"}],
    "p": [{"add": "added"}, {"act": "acted"}],
    "pp": [{"add": "added"}, {"act": "acted"}],
    "s": [{"add": "adds"}, {"act": "acts"}],
    "ing": [{"add": "adding"}, {"act": "acting"}]
}
""")

data = json.load(jsonfile_json)

for k in data.keys():
    print(k)
</code></pre>
<p>As you can see, the answer to your question is using <code>keys()</code> method</p>
</div>
<div class="post-text" itemprop="text">
<p>For the sake of completeness:</p>
<pre><code>d = {'p': 'pstuff', 'pp': 'ppstuff', 'b': 'bstuff', 's': 'sstuff'}
print('\n'.join(d))
</code></pre>
<p>Works in any version of Python. If you care about order:</p>
<pre><code>print('\n'.join(sorted(d)))
</code></pre>
<p>Though in all honesty, I'd probably do Jim's approach:</p>
<pre><code>print(*d, sep='\n'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply unpack the <code>keys</code> with <code>*</code> in a print call, this provides the keys as positional arguments to <code>print</code>; use <code>sep = '\n'</code> if you want each key on a different line:</p>
<pre><code>print(*data.keys(), sep= '\n')
</code></pre>
<p>This will print out:</p>
<pre><code>b
pp
p
ing
s
</code></pre>
<p>As noted by @WayneWerner <code>print(*data, sep='\n')</code> is in effect like calling <code>data.keys()</code> and achieves the same result.</p>
</div>
<span class="comment-copy">but it would print <code>dict_keys(['ing', 'past', 's-es-ies', 'past-participle', 'base'])</code> , how can i just print strings?</span>
<span class="comment-copy">You can loop through.</span>
<span class="comment-copy">You don't need <code>d.keys</code>. Dicts iterate over the keys by default in both Python2 and Python3, so <code>print(*d, sep='\n')</code> will suffice.</span>
<span class="comment-copy">@WayneWerner Right, updated to note that, thanks.</span>
<span class="comment-copy">If you run <code>dis.dis('print(*d)')</code> and <code>dis.dis('print(*d.keys())')</code> you'll see that <b>no</b>, it's not shorthand for <code>d.keys()</code>. <code>dict</code> is an <i>iterable</i>, which means it can be unpacked, but iterating over a dictionary means iterating over its keys, and has meant that at the very least since 2.7 but probably long before that. It has the same effect, but it's not shorthand (also in 2.7 <code>d.keys()</code> returns a list, while 3.x <code>d.keys()</code> returns a dict_keys view - very different things!)</span>
<span class="comment-copy">@WayneWerner I've changed the 'shorthand' comment but I'd like to point out that in the end the same <code>dictiter_new</code> call is made, the difference mainly lies in how it is reached. With <code>*d</code> it is fast with <code>dict_iter</code> while with <code>*d.keys()</code> you get a <code>dictview</code> and go through <code>dictkeys_iter</code> . In the end the main difference is that <code>*d</code> is probably more efficient ;-)</span>
