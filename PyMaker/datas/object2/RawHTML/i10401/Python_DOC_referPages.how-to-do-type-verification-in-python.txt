<div class="post-text" itemprop="text">
<p>(Maybe b/c I'm from a C++ world)
I want to verify some python variable is</p>
<p><code>list(string)</code> or <code>list(dict(int, string))</code> or <code>SomethingIterable(string)</code></p>
<p>Is there a simple and unified way to do it?
(Instead of writing customized code to iterate and verify each instance..)</p>
<p>I emphasize that I understand in Python <code>list</code> can have elements of different types, which is exactly the reason why I ask how to verify a <code>list</code> which are composed by just a certain type e.g. <code>string</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python lists can be composed of mixed types, there is no way to do something like setting the "type" of a list. Also, even if you could, this "type" is not enforced and could change at any time.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you are looking for an array (<a href="https://docs.python.org/3/library/array.html" rel="nofollow"><code>array.array</code></a>), not a list:</p>
<pre><code>&gt;&gt;&gt; l = [1]
&gt;&gt;&gt; l.append('a')
&gt;&gt;&gt; import array
&gt;&gt;&gt; a = array.array('l')
&gt;&gt;&gt; a.append(3)
&gt;&gt;&gt; a.append('a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: an integer is required (got type str)
&gt;&gt;&gt; a
array('l', [3])
</code></pre>
<p>As you get more and more comfortable with Python, though, you will gradually learn how to structure your code in such a way that type-checking becomes unnecessary. Personally, I've never had to use an <code>array.array</code> in Python (except in cases like this, where I'm specifically working with that module).</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">typing</a> module</p>
<p>Typically: </p>
<pre><code>from typing import List

def method(value: List[str]):
    pass
</code></pre>
</div>
<span class="comment-copy">Have you tried <code>isinstance</code>?</span>
<span class="comment-copy"><code>hasattr(var, "__iter__")</code>?</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/2225038/determine-the-type-of-a-python-object">Determine the type of a Python object</a></span>
<span class="comment-copy">when you say list, do you actually need a list, or an iterable, or a subscriptable, or both?</span>
<span class="comment-copy">So I think everyone is showing this is the <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>: Why do you want to do type verification? Python is an <a href="http://stackoverflow.com/questions/11360858/what-is-the-eafp-principle-in-python">EAFP</a> language</span>
<span class="comment-copy">This. <code>["Hi", 0, count()]</code> is a valid list in python.</span>
<span class="comment-copy">Note: As a rule, <code>list</code>s <i>should</i> typically be of homogeneous type. But yeah, it's completely unenforced/unenforceable; we're all adults, and if you want to do terrible things with <code>list</code>s, that's between you, your conscience, and the pitchfork wielding mobs of programmers who have to read/maintain your code later. <code>tuple</code> is either homogeneous (if being used logically as an immutable <code>list</code>), or heterogeneous (when being used logically as a "lightweight object"; e.g. any case where <code>collections.namedtuple</code> might be appropriate).</span>
<span class="comment-copy">That's type annotation, but it's purely for static analysis; it performs no checking at all either at compile or run time.</span>
<span class="comment-copy">that's still a start, though.</span>
