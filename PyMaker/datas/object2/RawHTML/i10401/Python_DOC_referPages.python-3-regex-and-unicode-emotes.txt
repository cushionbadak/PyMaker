<div class="post-text" itemprop="text">
<p>Using Python 3, a simple script like the following should run as intended, but appears to choke on unicode emote strings:</p>
<pre><code>import re

phrase = "(╯°□°)╯ ︵ ┻━┻"
pattern = r'\b{0}\b'.format(phrase)

text = "The quick brown fox got tired of jumping over dogs and flipped a table: (╯°□°)╯ ︵ ┻━┻"

if re.search(pattern, text, re.IGNORECASE) != None:
    print("Matched!")
</code></pre>
<p>If I substitute the word "fox" for the contents of the phrase variable, the pattern does indeed match. I've been puzzled as to why it doesn't like this particular string though, and my expeditions into the manual and Stack Overflow haven't illuminated the issue. From all I can tell, Python 3 should handle this without issue.</p>
<p>Am I missing something painfully obvious?</p>
<p>Edit: Also, dropping the boundaries (\b) doesn't affect the ability to match the string either.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>(╯°□°)╯ ︵ ┻━┻
</code></pre>
<p>This expression has brackets in them, you need to escape them. Otherwise they are interpreted as group.</p>
<pre><code>In [24]: re.search(r'\(╯°□°\)╯ ︵ ┻━┻', text, re.IGNORECASE)
Out[24]: &lt;_sre.SRE_Match object; span=(72, 85), match='(╯°□°)╯ ︵ ┻━┻'&gt;

In [25]: re.findall(r'\(╯°□°\)╯ ︵ ┻━┻', text, re.IGNORECASE)
Out[25]: ['(╯°□°)╯ ︵ ┻━┻']
</code></pre>
<p><a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow">Escape the regex string</a> properly and change your code to:</p>
<pre><code>import re

phrase = "(╯°□°)╯ ︵ ┻━┻"
pattern = re.escape(phrase)

text = "The quick brown fox got tired of jumping over dogs and flipped a table: (╯°□°)╯ ︵ ┻━┻"

if re.search(pattern, text, re.IGNORECASE) != None:
    print("Matched!")
</code></pre>
<p>And then it will work as expected:</p>
<pre><code>$ python3 a.py
Matched!
</code></pre>
</div>
<span class="comment-copy">That would do it lol. It's amazing how you can be blind to something that obvious when you're staring at a problem for long enough. I need the word boundaries though, for my particular case, which also seems to cause a problem. (The goal is to avoid a variation of the Scunthorpe Problem while matching phrases in a config file, otherwise I'd just be using "if string in string")</span>
<span class="comment-copy">Could you open a new question with the exact requirements? What do you mean by <code>I *need* the word boundaries</code>?</span>
<span class="comment-copy">It's the same problem. Assuming that the "phrase" isn't hardcoded, removing the surrounding \b introduces the Scunthorpe Problem.</span>
<span class="comment-copy">Eh, whatever, I'll just approach it differently. You solved the question I asked anyway.</span>
<span class="comment-copy">@redwall_hp Build your pattern with <code>r'\b{0}\b'.format(re.escape(phrase))</code>.</span>
