<div class="post-text" itemprop="text">
<p>So I'm deploying a web app that can't use pandas. I'm using python3 and elastic beanstalk on aws, and various dependencies just aren't available at the moment.</p>
<p>I only need pandas in a single function - the usage is pretty simple: make some data frames, and search them via <code>df.loc</code>. --&gt; Does anyone know a good alternative to pandas that has a <code>df.loc[index, col]</code> functionality?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would just use <code>numpy</code>.  Also, indexing <code>numpy</code> is faster than indexing w/ <code>pandas</code></p>
<pre><code>Ar_data = np.array([["gyrados","raichu","mu","dragonair","vaporeon"],["water","electric","normal","dragon","water"], [0,0,0,1,2]]).T
Ar_data
# array([['gyrados', 'water', '0'],
#        ['raichu', 'electric', '0'],
#        ['mu', 'normal', '0'],
#        ['dragonair', 'dragon', '1'],
#        ['vaporeon', 'water', '2']], 
#       dtype='&lt;U9')

# Index w/ ints `.iloc`
Ar_data[3,1]
# 'dragon'

fields = ["pokemon","status","meta"]
observations = ["p1","p2","p3","p4","p5"]

# Index w/ labels `.loc`
Ar_data[3,fields.index("pokemon")]
# 'dragonair'

Ar_data[observations.index("p4"),fields.index("pokemon")]
# 'dragonair'

# Time it
DF_data = pd.DataFrame(Ar_data, columns=fields, index=observations)
%timeit DF_data.iloc[3,1]
%timeit Ar_data[3,1]
# 10000 loops, best of 3: 129 Âµs per loop
# The slowest run took 21.69 times longer than the fastest. This could mean that an intermediate result is being cached.
# 1000000 loops, best of 3: 384 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You best option would be to use lists in a dict:</p>
<pre><code>df_eq = {'col1' : [list, of, column, data],
         'col2' : [list, of, column, data],
         ...,
         'coln-1' : [list, of, column, data],
         'coln' : [list, of, column, data]}
</code></pre>
<p>Then you can use something like <code>loc</code>:</p>
<pre><code>df_eq['coln'][idx]
</code></pre>
</div>
<span class="comment-copy">If you don't have pandas, get pandas. Using the built in dict object to capture a 750 Mb file can take up over 20 gb ram while pandas will read it with like 4.  <a href="https://www.youtube.com/watch?v=lsJLLEwUYZM" rel="nofollow noreferrer">youtube.com/watch?v=lsJLLEwUYZM</a></span>
<span class="comment-copy">can you use numpy? Otherwise, the next best thing might be a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a></span>
