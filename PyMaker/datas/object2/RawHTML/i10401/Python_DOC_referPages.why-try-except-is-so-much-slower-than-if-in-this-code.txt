<div class="post-text" itemprop="text">
<p>I was just looking at the Python FAQ because it was mentioned in another question. Having never really looked at it in detail before, I came across <a href="http://docs.python.org/3/faq/design.html#how-fast-are-exceptions" rel="nofollow noreferrer">this question</a>: “How fast are exceptions?”:</p>
<blockquote>
<p>A try/except block is extremely efficient. Actually catching an exception is expensive. In versions of Python prior to 2.0 it was common to use this idiom:</p>
<pre><code>try:
    value = mydict[key]
except KeyError:
    mydict[key] = getvalue(key)
    value = mydict[key]
</code></pre>
</blockquote>
<p>I was a little bit surprised about the <em>“catching an exception is expensive”</em> part. Is this referring only to those <code>except</code> cases where you actually save the exception in a variable, or generally all <code>except</code>s (including the one in the example above)?</p>
<p>I’ve always thought that using such idioms as shown would be very pythonic, especially as in Python <em>“it is Easier to Ask Forgiveness than it is to get Permission”</em>. Also many answers on SO generally follow this idea.</p>
<p>Is the performance for catching Exceptions really that bad? Should one rather follow LBYL (“Look before you leap”) in such cases?</p>
<p><em>(Note that I’m not directly talking about the example from the FAQ; there are many other examples where you just look out for an exception instead of checking the types before.)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Catching exceptions <em>is</em> expensive, but exceptions should be <em>exceptional</em> (read, not happen very often).  If exceptions are rare, <code>try/catch</code> is faster than LBYL.</p>
<p>The following example times a dictionary key lookup using exceptions and LBYL when the key exists and when it doesn't exist:</p>
<pre><code>import timeit

s = []

s.append('''\
try:
    x = D['key']
except KeyError:
    x = None
''')

s.append('''\
x = D['key'] if 'key' in D else None
''')

s.append('''\
try:
    x = D['xxx']
except KeyError:
    x = None
''')

s.append('''\
x = D['xxx'] if 'xxx' in D else None
''')

for i,c in enumerate(s,1):
    t = timeit.Timer(c,"D={'key':'value'}")
    print('Run',i,'=',min(t.repeat()))
</code></pre>
<h3>Output</h3>
<pre><code>Run 1 = 0.05600167960596991       # try/catch, key exists
Run 2 = 0.08530091918578364       # LBYL, key exists (slower)
Run 3 = 0.3486251291120652        # try/catch, key doesn't exist (MUCH slower)
Run 4 = 0.050621117060586585      # LBYL, key doesn't exist
</code></pre>
<p>When the usual case is no exception, <code>try/catch</code> is "extremely efficient" when compared to LBYL.</p>
</div>
<div class="post-text" itemprop="text">
<p>The cost depends on implementation, obviously, but I wouldn't worry about it. It's unlikely going to matter, anyway. Standard protocols raise exceptions in strangest of places (think <code>StopIteration</code>), so you're surrounded with raising and catching whether you like it or not.</p>
<p>When choosing between LBYL and EAFP, worry about readability of the code, instead of focusing on micro-optimisations. I'd avoid type-checking if possible, as it might reduce the generality of the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the case where the key is not found is more than exceptional, I would suggest using the 'get' method, which provide a constant speed in all cases :</p>
<pre><code>s.append('''\
x = D.get('key', None)
''')

s.append('''\
x = D.get('xxx', None)
''')
</code></pre>
</div>
<span class="comment-copy">Pretty much what I was going to say. It's using exceptions to control your normal program flow that's really expensive.</span>
<span class="comment-copy">Doing some quick math, the numbers indicate try/except should only be used if you expect the key won't be found at most 8.95% of time (about 1 in 11 calls). I don't have room to derive the equation I used but: let <code>cbn</code> = cost of branching method in normal case, <code>cbx</code> = cost of branch method in exceptional case, <code>ctn</code> = cost of try/except in normal case, <code>ctx</code> = cost of try/except in exceptional case, and px = probability of exceptional case occurring; then for all <code>px &lt;= (ctn-cbn)/(ctn-ctx+cbx-cbn)</code>, the try/except method will be faster in the long term.</span>
<span class="comment-copy">Just an addendum - since measuring and calculating these sorts of things tends to get time-consuming in itself, I try to use a rule of thumb for python that anything which occurs more than 1/8 times is not an "exceptional" case, and should probably use another method - which has also proved useful when designing an api, as well as writing code.</span>
<span class="comment-copy">"exceptions should be exceptional" is a good mantra.  I forget it too often.</span>
<span class="comment-copy">Yes, avoid premature optimization.</span>
<span class="comment-copy">Sorry, actually it's slower.</span>
<span class="comment-copy">You can use <code>dict.setdefault</code> instead. But then again, the code was just a simple example from the FAQ.</span>
