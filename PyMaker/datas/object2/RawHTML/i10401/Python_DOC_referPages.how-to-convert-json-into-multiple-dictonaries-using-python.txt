<div class="post-text" itemprop="text">
<p>I'd like to take the following JSON and convert it into multiple dicts so I can access each setting under the top level nodes only for that environment.  This is a config file that will maintain settings for different environments, I'd like to be able to grab a top level node/environment and then use all the underlying nodes/settings just for that environment.</p>
<p>My example JSON</p>
<blockquote>
<p>{   "default": </p>
<p>{</p>
<pre><code>"build": {
  "projectKey": "TEST",
  "buildKey": "ME"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}
</code></pre>
<p>},</p>
<p>"dev": {</p>
<pre><code>"build": {
  "projectKey": "TEST",
  "buildKey": "YOU"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}
</code></pre>
<p>},</p>
<p>"qa": {</p>
<pre><code>"build": {
  "projectKey": "TEST",
  "buildKey": "THEM"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}
</code></pre>
<p>} 
  }</p>
</blockquote>
<p>I tried doing this by pulling out the top level keys but couldn't see how to break them up into multiple dictionaries using Python so I could collect each environment's settings and use them without duplication.  Checking the underlying nodes I could see doing by checking the len of the node, to see if there are any more nodes underneath, but from the top level and splitting each one to its own dict I couldn't work out.</p>
<p>Or perhaps there is a better way to do this, than I am not aware of.  The length underneath could vary, but that should be irrelevant if I can split these up.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your question is really confusing but I'll try guessing a little bit, let's assume you got a json file (I'll emulate that using python3.x <a href="https://docs.python.org/3/library/io.html" rel="nofollow">io.StringIO</a>).</p>
<p>I assume you want to know how to load that file into a python dictionary, to do that use <a href="https://docs.python.org/2/library/json.html#json.load" rel="nofollow">json.load</a> method and you're pretty much done. Here's a mcve example showing you how to load your hypothetical file and then process it with the different configurations:</p>
<pre><code>import json
import io

f = io.StringIO("""{
    "default": {
        "build": {
            "projectKey": "TEST",
            "buildKey": "ME"
        },
        "headers": {
            "json": "application/json",
            "xml": "application/xml"
        }
    },
    "dev": {
        "build": {
            "projectKey": "TEST",
            "buildKey": "YOU"
        },
        "headers": {
            "json": "application/json",
                    "xml": "application/xml"
        }
    },
    "qa": {
        "build": {
            "projectKey": "TEST",
            "buildKey": "THEM"
        },
        "headers": {
            "json": "application/json",
            "xml": "application/xml"
        }
    }
}""")


def processor(config, stage):
    print('----Processing stuff for {0} server----'.format(stage))
    print(config[stage])
    print('----End----')

config = json.load(f)

for stage in ['default', 'dev', 'qa']:
    processor(config, stage)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's std lib capable of doing it</p>
<pre><code>import json
my_dct = json.loads(json_string)
</code></pre>
<p>for more, see <a href="https://docs.python.org/3.5/library/json.html#json.loads" rel="nofollow">https://docs.python.org/3.5/library/json.html#json.loads</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Store above data within a variable like below and convert it to dict using json.loads
It converts text to dictionary, then you can loop over dictionary based on env to get the properties</p>
<pre><code>text='''
{ "default":

{

"build": {
  "projectKey": "TEST",
  "buildKey": "ME"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}

},

"dev": {

"build": {
  "projectKey": "TEST",
  "buildKey": "YOU"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}

},

"qa": {

"build": {
  "projectKey": "TEST",
  "buildKey": "THEM"
},
"headers": {
  "json": "application/json",
  "xml": "application/xml"
}

} }'''
import json
dict=json.loads(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need <code>json.loads()</code> to convert your <code>string</code> to <code>json</code> object. Below is the code to open the file and load the json as <code>dict</code> or <code>list</code> based on the structure of json (in your case <code>dict</code>)</p>
<pre><code>import json
json_file = open('/path/to/config_file')
json_str = json_file.read()
json_data = json.loads(json_str)
</code></pre>
</div>
<span class="comment-copy">"flatten it into a dict" - you're going to have to explain what you actually mean by that.</span>
<span class="comment-copy">@user2357112 Does that make it clearer?  Flattening was a term I got into thinking about for this, rather than the JSON nodes.  Shouldn't have used it here</span>
<span class="comment-copy">No, it's still pretty unclear. What do you think "JSON nodes" are, and why do you think you don't already have a dict? It sure sounds like you already have a dict. That, or you have a string, in which case you'd use <code>json.loads(your_string)</code> to parse it and get a dict, but it sounds like you already have a dict.</span>
<span class="comment-copy">It sounds like you might just need to get more comfortable with loops and indexing. For example, you can iterate over the dict's entries with <code>for env_name, env_settings in your_dict.items()</code>.</span>
<span class="comment-copy">This is actually very close to what I wanted to do...thanks</span>
