<div class="post-text" itemprop="text">
<p>I am trying to create the concrete class <code>Val15</code> class with the Mixins, <code>MyCollection</code>, <code>Val5</code>, <code>Val10</code>. <code>Val15</code> is trying to inherit <code>values</code> from <code>MyCollection</code>. When <code>Val15</code> is instantiated, I am trying to call both <code>Val10</code>'s and <code>Val5</code>'s  <code>value</code> and add them to <code>Val15</code>, <code>values</code>. </p>
<p>However, it turns out that <code>Val15</code> will inherit only <code>Val10</code>'s value and all the classes will call <code>Val10</code>'s value. How exactly can you overturn this problem?</p>
<pre><code>class MyCollection(object):
    def __init__(self):
        super().__init__()
        self.values = []


class MyMessage(object):
    def __init__(self):
        super().__init__()

    def message(self):
        print('Hello World')


class Val10(object):
    def __init__(self):
        super().__init__()
        print('Call 10')
        self.values.append(self.value())

    def value(self):
        print('Value 10')
        return 10


class Val5(object):
    def __init__(self):
        super().__init__()
        print('Call 5')
        self.values.append(self.value())

    def value(self):
        print('Value 5')
        return 5


class Val15(Val10, Val5, MyMessage, MyCollection):
    def __init__(self):
        super().__init__()

    def my_sum(self):
        return sum(self.values)


val15 = Val15()
val15.my_sum()
val15.message()

# Result:
# Call 5
# Value 10
# Call 10
# Value 10
# Hello World
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the interesting part:</p>
<pre><code>class Val10(object):
    def value(self):
        return 10

class Val5(object):
    def value(self):
        return 5
</code></pre>
<p>To get the sum of parents' values, you have to call each of them:</p>
<pre><code>class Val15(Val10, Val5):
    def value(self):
        return Val10.value(self) + Val5.value(self)
</code></pre>
<h2>Alternative solution</h2>
<p>Another approach is to define that <code>value</code> always returns the sum of all inherited values, whatever they may be, without knowing which parent classes' <code>value</code> to call:</p>
<pre><code>class Val10:
    def value(self):
        previous = getattr(super(), 'value', lambda: 0)()
        return previous + 10

class Val5:
    def value(self):
        previous = getattr(super(), 'value', lambda: 0)()
        return previous + 5

class Val15(Val10, Val5):
    def value(self):
        return getattr(super(), 'value', lambda: 0)()

Val15().value()  # 15
</code></pre>
<p>This solution does not make any assumptions about the way inheritance is going to be configured.</p>
<p><strong>Remarks:</strong></p>
<ul>
<li>The answer assumes that this is Python 3, because of the <code>super()</code> syntax</li>
<li><code>getattr(super(), 'value', lambda: 0)</code> returns the bound <code>value</code> method of the parent class, if such exists, or defaults to a function which returns 0.</li>
</ul>
</div>
<span class="comment-copy">This is one of the few cases where leading double underscores would actually make sense, to avoid this kind of clash (see e.g. <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html#private-variables</a>).</span>
<span class="comment-copy">I tried doing that for both classes, and I still have the same problem.</span>
<span class="comment-copy">The problem is <code>self</code> is always a <code>Val15</code>, so its own method is first in the MRO. Without being explicit (<code>self.values.append(Val10.value(self))</code> or invoking <code>super</code> in various places this is the behaviour you should expect.</span>
<span class="comment-copy">I think you need to reconsider the structure of your classes. For instance, what should <code>val15.value()</code> print and what value should it return? Should it print both <code>5</code> and <code>10</code> or just <code>15</code>, or neither of those options?</span>
<span class="comment-copy">I like your first solution. It;s cleaner</span>
