<div class="post-text" itemprop="text">
<p>I'm trying to make a function that will always return me a pre-fixed number of elements from an array which will be larger than the pre-fixed number:</p>
<pre><code>def getElements(i,arr,size=10):
    return cyclic array return
</code></pre>
<p>where <code>i</code> stands for index of array to fetch and <code>arr</code> represent the array of all elements:</p>
<h2>Example:</h2>
<pre><code>a = [0,1,2,3,4,5,6,7,8,9,10,11]
b = getElements(9,a)
&gt;&gt; b
&gt;&gt; [9,10,11,0,1,2,3,4,5,6]
b = getElements(1,a)
&gt;&gt; b
&gt;&gt; [1,2,3,4,5,6,7,8,9,10]
</code></pre>
<p>where <code>i = 9</code> and the array return the <code>[9:11]+[0:7]</code> to complete <strong>10 elements</strong> with <code>i = 1</code> don't need to cyclic the array just get <code>[1:11]</code></p>
<p>thanks for the help</p>
<h2>Initial code (not working):</h2>
<pre><code>def getElements(i,arr,size=10):
    total = len(arr)
    start = i%total
    end = start+size
    return arr[start:end]

#not working cos not being cyclic
</code></pre>
<h2>EDIT:</h2>
<p>I can't make any  <code>import</code> for this script</p>
</div>
<div class="post-text" itemprop="text">
<p>You could return </p>
<pre><code>array[i: i + size] + array[: max(0, i + size - len(array))]
</code></pre>
<p>For example</p>
<pre><code>In [144]: array = list(range(10))

In [145]: array
Out[145]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [146]: i, size = 1, 10

In [147]: array[i: i + size] + array[: max(0, i + size - len(array))]
Out[147]: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]

In [148]: i, size = 2, 3

In [149]: array[i: i + size] + array[: max(0, i + size - len(array))]
Out[149]: [2, 3, 4]

In [150]: i, size = 5, 9

In [151]: array[i: i + size] + array[: max(0, i + size - len(array))]
Out[151]: [5, 6, 7, 8, 9, 0, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools</code></a>
is a fantastic library with lots of cool things. For this case we can use <code>cycle</code> and <code>islice</code>.</p>
<pre><code>from itertools import cycle, islice
def getElements(i, a, size=10):
    c = cycle(a) # make a cycle out of the array
    list(islice(c,i)) # skip the first `i` elements
    return list(islice(c, size)) # get `size` elements from the cycle
</code></pre>
<p>Works just as you wanted.</p>
<pre><code>&gt;&gt;&gt; getElements(9, [0,1,2,3,4,5,6,7,8,9,10,11])
[9, 10, 11, 0, 1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_elements(i, arr, size=10):
    if size - (len(arr) - i) &lt; 0:
        return arr[i:size+i]
    return arr[i:] + arr[:size - (len(arr) - i)]
</code></pre>
<p>Is that what you want? <strong>Updated to work with lower numbers.</strong></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a=[1, 2, 3]
def cyclic(a, i):
    b=a*2
    return b[i:i+len(a)]
print(cyclic(a, 2))
</code></pre>
</div>
<span class="comment-copy">that's an great way of thinking thanks for the answer, but my array size is in 60K size can your code be more memory efficient?</span>
<span class="comment-copy">@AlvaroJoao See update.</span>
<span class="comment-copy">hey thanks!! worked for me</span>
<span class="comment-copy">thanks for the answer  but I really can't make any import for this script, sorry for not explaining this on the question.</span>
<span class="comment-copy">not quite if i = 1 the answer will be an huge array, thanks for the answer</span>
<span class="comment-copy">@AlvaroJoao what's the desired output if it's 1 ?</span>
<span class="comment-copy">just updated the question, thanks!</span>
<span class="comment-copy">@AlvaroJoao updated my answer too</span>
<span class="comment-copy">I like this answer (in fact, it was my original version). The OP commented on this version that he'd like to conserve memory, but, for the original question, this is the simplest.</span>
