<div class="post-text" itemprop="text">
<p>I have a long list of numberseries formated like this:</p>
<pre><code>["4450[0-9]", "6148[0-9][0-9]"]
</code></pre>
<p>I want to make a list from one of those series with single numbers:</p>
<pre><code>[44500,44501,..., 44509]
</code></pre>
<p>i need to do this for many series within the original list and i'm wondering what the best way is for doing that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably not the best solution, but you can approach it recursively looking for the <code>[x-y]</code> ranges and <a href="https://wiki.python.org/moin/Generators" rel="nofollow">generating</a> values (using <code>yield</code> and <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow"><code>yield from</code></a> in this case, hence for Python 3.3+):</p>
<pre><code>import re

pattern = re.compile(r"\[(\d+)-(\d+)\]")

def get_range(s):
    matches = pattern.search(s)
    if not matches:
        yield int(s)
    else:
        start, end = matches.groups()
        for i in range(int(start), int(end) + 1):
            repl = pattern.sub(str(i), s, 1)
            yield from get_range(repl)


for item in get_range("6148[0-9][0-9]"):
    print(item)
</code></pre>
<p>Prints:</p>
<pre><code>614800
614801
...
614898
614899
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def invertRE(x):
    if not x:
        yield []
    else:
       idx = 1 if not x.startswith("[") else x.index("]") + 1
       for rest in invertRE(x[idx:]):
           if x.startswith("["):
               v1,v2 = map(int,x[1:idx-1].split("-"))
               for i in range(v1,v2+1):
                  yield [str(i),]+rest
           else:
               yield [x[0],] + rest

print(map("".join,invertRE("123[4-7][7-8]")))
</code></pre>
<p>Im pretty sure this will work ... but really you should try something on your own before comming here ...</p>
</div>
<div class="post-text" itemprop="text">
<p>Found this module which seems to do what i want.</p>
<p><a href="https://pypi.python.org/pypi/braceexpand/0.1.1" rel="nofollow">https://pypi.python.org/pypi/braceexpand/0.1.1</a></p>
<pre><code>&gt;&gt;&gt; from braceexpand import braceexpand
&gt;&gt;&gt; s = "1[0-2]"
&gt;&gt;&gt; ss = "1[0-2][0-9]"
&gt;&gt;&gt; list(braceexpand(s.replace("[", "{").replace("-","..").replace("]","}")))
['10', '11', '12']
&gt;&gt;&gt; list(braceexpand(ss.replace("[", "{").replace("-","..").replace("]","}")))
['100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129']
</code></pre>
<p>alecxe's answer is still the "best" answer and not a shortcut tho</p>
</div>
<span class="comment-copy">I'm hoping there is some python module that does this instead of me diving deep into regexp or whatnot</span>
<span class="comment-copy">probably better than my solution :P clearly good thinking with yeild :P</span>
<span class="comment-copy">@JoranBeasley thanks, I like the way you think about it as "invert re" :)</span>
<span class="comment-copy">lol to be fair the RE is very tightly defined here :P as only matching the problem statement</span>
