<div class="post-text" itemprop="text">
<p>From what I've learned so far, metaclass and inheritance from superclass in Python serve a very similar purpose, but superclass inheritance is more powerful.</p>
<p>Why would I prefer metaclass over superclass inheritance? In what kind of case metaclass would be helpful?</p>
<p>Sorry if there is any wrong assumption. I just learned metaclass today. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think you've misunderstood. Inheritance is the classic object oriented technique of reusing code by putting the commonly used stuff in a base class and deriving from that. </p>
<p>Metaclasses in a nutshell) allow you to customise the process of creation of a class (specifically the <code>__new__</code> method) so that you can dynamically add attributes and things like that. It's a little complicated and in most cases, you won't need this. There are some details over at this answer <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python#6581949">What is a metaclass in Python?</a></p>
</div>
<span class="comment-copy">"metaclass and inheritance from superclass in Python serve a very similar purpose" - what? No. Where did you get that idea? Metaclasses serve a very different role.</span>
<span class="comment-copy">At the very least it looks very similar for me as someone who just learn metaclass.  May I know the differences?</span>
<span class="comment-copy">Why would I want to customize the creation process?</span>
<span class="comment-copy">"Metaclasses ... allow you to customise the process of creation of a class" - they let you customize much more than just the creation process. <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">You want a class <code>Color</code> where <code>Color['red']</code> works and does something meaningful?</a> Metaclasses let you do that. <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">You want a class <code>Iterable</code> where <code>isinstance(thing, Iterable)</code> is true if and only if <code>thing</code> is iterable?</a> Metaclasses let you do that.</span>
<span class="comment-copy">Perhaps to make sure that you return only one of a pre created set of classes (e.g. like a thread pool) or maybe (like in an ORM), you create a class with a bunch of attributes for db columns (e.g. date, name etc.) and you automatically get methods like "filter_by_date", "filter_by_name" etc.</span>
