<div class="post-text" itemprop="text">
<p>If I am correct, dynamic typing is, for example, in Python</p>
<pre><code>x=1
x='abc'
</code></pre>
<p><code>x</code> can refer to values of different types at different points at run time.</p>
<p>In the above example, which does <code>x</code> refer to here, </p>
<ul>
<li>the name i.e.identifier <code>x</code>, </li>
<li>the memory which <code>x</code> refers to, </li>
<li>or something else?</li>
</ul>
<p>My question is about the concept of dynamic typing in programming languages in general, not specific to Python, although we can use Python as an example.</p>
<p>Generally in programming languages, not just Python, which of the following explanations does dynamic typing refer to:</p>
<ol>
<li><p>A name is binded to different memory places at different points
during run time, and the different memory places stores values of
different types. </p>
<p>This sounds like dynamically changing the binding between a name and
an object, i.e. like a specific usage of dynamic scoping where when changing the object which a name refers to, it also happens to change the type of the referred object. So that specific usage of dynamic scoping looks similar to dynamic typing, in that the type of the object changes in both cases. </p>
<p>So if this one is true, what differences are between dynamic typing and that particular usage of dynamic scoping for changing types?</p></li>
<li><p>A name is binded to a fixed memory place, and the memory place
stores some value, and we can change the value and its type stored
in the memory place at run time.</p></li>
<li><p>Or something else</p></li>
</ol>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to look at dynamic typing <em>in context</em>; here that context is the contrasting concept of <em>static typing</em>.</p>
<p>C, C++ and Java are all statically typed languages, where you fix what type a variable can refer to <em>at compile time</em>. Python's variables are not fixed like that; you do not specify what type a variable is. A variable is just a reference to an object instead, and thus the type <code>x</code> references is determined at runtime instead.</p>
<p>So <code>x</code> is the <em>name</em>, the identifier. In Python it is type-less. In static languages it has been assigned a type. Quite often, in terms of implementation, a statically-typed language will simply translate a variable name in the source code to a memory address the compiled code references, but that's not the case in Python.</p>
<p>How Python actually implements names is not something you as a Python developer need to worry about, and can vary from specific implementation to implementation. In CPython (the implementation you download from Python.org), identifiers are references to specific locations in the <em>heap</em>, an area of memory reserved for Python objects. Objects are added to and removed from the heap as needed, dynamically.</p>
</div>
<div class="post-text" itemprop="text">
<p>Dynamic scoping appears to be something completely different. From <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping" rel="nofollow">wikipedia</a>:</p>
<blockquote>
<p>With dynamic scope, a global identifier refers to the identifier associated with the most recent environment, and is uncommon in modern languages.[4] In technical terms, this means that each identifier has a global stack of bindings. Introducing a local variable with name x pushes a binding onto the global x stack (which may have been empty), which is popped off when the control flow leaves the scope. Evaluating x in any context always yields the top binding. Note that this cannot be done at compile-time because the binding stack only exists at run-time, which is why this type of scoping is called dynamic scoping.</p>
</blockquote>
<p>So no, this has nothing whatsoever to do with dynamic scoping.</p>
</div>
<span class="comment-copy">3: memory addresses are not a feature of Python, and you shouldn't care about them.</span>
<span class="comment-copy">The built-in function id's documentation has the info you need imho: <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#id</a></span>
<span class="comment-copy">In your example the name <code>x</code> rebinds to a different object with a different identity and a different type. The internal implementation will probably choose to put it in different memory but that doesn't matter.</span>
<span class="comment-copy"><i>"Generally in programming languages"</i> is clearly too broad, and there isn't just one way to do it.</span>
<span class="comment-copy">@imreal does what you say sound like dynamic scoping, i.e. changing the object which the name <code>x</code> binds to at run time? See my point 1.</span>
<span class="comment-copy">thanks. I kind of understand dynamic typing and dynamic scoping are for different purposes. However, in my original post, I missed to specify that dynamic scoping that I mentioned is a specific usage where when an object referred by a name changes, the type of the object happens to also change. So this specific usage of dynamic scoping look similar to dynamic typing, in that the type of the object changes in both cases. I hope that my comment helps you to understand my confusion between dynamic typing and this particular usage of dynamic scoping for changing types.</span>
