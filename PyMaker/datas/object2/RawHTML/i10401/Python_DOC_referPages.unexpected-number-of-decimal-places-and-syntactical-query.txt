<div class="post-text" itemprop="text">
<p>I'm trying to find the intersection between the curves $ y= x^2+3x+2 $ and $ y=x^2+2x+1$. For this, I have written the following python program:</p>
<pre><code>from numpy import *
import numpy as np
for x in np.arange(-100, 100, 0.0001):
    y_1=x**2+3*x+2
    y_2=x**2+2*x+1
    if round(y_1, 5)==round(y_2,5):
        print x
print 'end'
</code></pre>
<p>The console displays:</p>
<pre><code>-0.999999996714
end
</code></pre>
<p>I have three questions. </p>
<p>1) Why must I include <code>y_1=x**2+3*x+2</code> and <code>y_2=x**2+2*x+1</code> in the for statement? Why can I not simply include them after the line <code>from numpy import*</code>?</p>
<p>2) Why is the output to 12 decimal places when I have specified the step in <code>np.arange</code> to be 4 decimal places?</p>
<p>3) Why is -1.0000 not outputted?</p>
<p>Please go easy on me, I'm just starting to use python and thought I would try and solve some simultaneous equations with it.</p>
<p>Thanks,</p>
<p>Jack</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Because the <code>y_1</code> and <code>y_2</code> lines are computing specific values, not defining functions.  Plain Python does not have a built-in concept of symbolic equations.  (Although you can implement symbolic equations various ways.)</li>
<li>Because binary floating-point, as used in Python, cannot exactly represent 0.0001 (base 10).  Therefore, the step is rounded, so your steps are not exactly ten-thousandths.  The Python <code>print</code> statement does not round, absent specific instructions to do so, so you get exactly the value the system is using, even though that's not quite the value you asked for.</li>
<li>Same reason: Since the steps are not exactly ten-thousandths, the point at which the functions are close enough to test as equal under rounding is not exactly at -1.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>1) First you have (probably) redundant import statements:</p>
<pre><code>from numpy import *
import numpy as np
</code></pre>
<p>The first statement imports the <code>__all__</code> variable from the package the second statement imports the numpy package then aliases it as <code>np</code>. The normal convention is to import numpy as <code>np</code>, so I would delete your first line and keep the second. </p>
<p>Now to more clearly answer your question, you need to include your equations in the for loop because <code>x</code> is representing each element in the <code>np.array</code> using the <code>for</code> loop.</p>
<p>2 and 3) The value is probably being interpreted as a float in your equations. The rounding error is inherent to how python (and most programing languages) interpret fractions. <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow">See more here</a>.  </p>
</div>
<span class="comment-copy">1) You cannot use <code>x</code> before it is created.</span>
<span class="comment-copy">why? because you're using variables. your equaition is calculated ONCE and then the result stored. python will not time travel and retroactively recalculate the equations for you, which is why you do the calculations INSIDE the loop, so you get a result for every value of <code>x</code> you're generating.</span>
<span class="comment-copy"><a href="https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems" rel="nofollow noreferrer">en.wikipedia.org/wiki/Floating_point#Accuracy_problems</a></span>
<span class="comment-copy">2) <code>arange(..., ..., 0.0001)</code> does not format your output. It only tells a <i>step</i> of sequence.</span>
<span class="comment-copy">okay thanks Marc B and Jeon</span>
<span class="comment-copy">Thanks, your answer is very helpful.</span>
<span class="comment-copy">what does 'np' mean? I only included <code>import numpy as np</code> because (according to a google search) I needed it to use the np.arange function</span>
<span class="comment-copy"><code>np</code> means nothing. The <code>as</code> statement changes the name of a module in your file. I can write <code>import numpy as hyped_math_library</code> then in implement your <code>for</code> loop as <code>for x in hyped_math_library.arange(-100, 100, 0.0001)</code></span>
<span class="comment-copy">Thanks Liam this is very helpful</span>
