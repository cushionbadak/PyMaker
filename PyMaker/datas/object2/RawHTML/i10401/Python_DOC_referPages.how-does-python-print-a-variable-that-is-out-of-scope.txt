<div class="post-text" itemprop="text">
<p>I have the following function in Python that seems to be working:</p>
<pre><code>def test(self):
    x = -1
    # why don't I need to initialize y = 0 here?
    if (x &lt; 0):
        y = 23

    return y
</code></pre>
<p>But for this to work why don't I need to initialize variable y? I thought Python had block scope so how is this possible? </p>
</div>
<div class="post-text" itemprop="text">
<p>This appears to be a simple misunderstanding about <a href="https://stackoverflow.com/q/291978/674039">scope in Python</a>.  Conditional statements don't create a scope.  The name <code>y</code> is in the local scope inside the function, because of this statement which is present in the syntax tree:</p>
<pre><code>y = 23
</code></pre>
<p>This is determined at function definition time, when the function is parsed.  The fact that the name <code>y</code> might be used whilst unbound at runtime is irrelevant.  </p>
<p>Here's a simpler example highlighting the same issue:</p>
<pre><code>&gt;&gt;&gt; def foo():
...     return y
...     y = 23
... 
&gt;&gt;&gt; def bar():
...     return y
... 
&gt;&gt;&gt; foo.func_code.co_varnames
('y',)
&gt;&gt;&gt; bar.func_code.co_varnames
()
&gt;&gt;&gt; foo()
# UnboundLocalError: local variable 'y' referenced before assignment
&gt;&gt;&gt; bar()
# NameError: global name 'y' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you misunderstood this part of <a href="https://docs.python.org/3/reference/executionmodel.html" rel="nofollow" title="4. Execution model">Python's documentation</a>:</p>
<blockquote>
<p>A Python program is constructed from code blocks. A block is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition.<br/>
  ...<br/>
  A scope defines the visibility of a name within a block. If a local variable is defined in a block, its scope includes that block.</p>
</blockquote>
<p>So in this case block is <em>something completely different</em> from visual blocks of your code. Thereby <code>if</code>, <code>for</code>, <code>while</code> statements doesn't have their own scopes. But it is worth noting that <strong>comprehensions and generator expressions are implemented using a function scope</strong>, so they have their own scopes.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is actually no block scope in python.
Variables may be local (inside of a function) or global (same for the whole scope of the program).</p>
<p>Once you've defined the variable y inside the 'if' block its value is kept for this specific function until you specifically delete it using the 'del' command, or the function exits.
From the moment y is defined in the function, it is a local variable of this function.</p>
</div>
<div class="post-text" itemprop="text">
<p>As in <a href="https://stackoverflow.com/questions/2829528/whats-the-scope-of-a-python-variable-declared-in-an-if-statement">What's the scope of a Python variable declared in an if statement?</a>: "Python variables are scoped to the innermost function or module; control blocks like if and while blocks don't count."</p>
<p>Also useful: <a href="https://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules">Short Description of the Scoping Rules?</a> </p>
</div>
<span class="comment-copy">It works because you assign <code>y</code>. If you didn't, it wouldn't.</span>
<span class="comment-copy">Python has function scope - the variable is attached to the function it lives in... if it is declared outside of a function then to the module.</span>
