<div class="post-text" itemprop="text">
<p>I use python 3</p>
<p>I have a list L, which contains another lists, which contains turples of point (x,y):</p>
<pre><code>L=[A, B, C, D ...]
A = [(1,1),(3,3),(4,5)...]
B=[(1,2),..(6,7)]
</code></pre>
<p>I want to merge all lists from L, which have a adjacent points.
As above: we must to union A,B because they have a adjacent points: (1,1) from A, and (1,2) from B. And obtain: L =[A+B, C, ...]</p>
<p>I tried code something like this:</p>
<pre><code>if (x-1,y-1) in L[i] or (x-1,y) in L[i] or (x-1,y+1) in L[i] or (x,y-1) in L[i] or (x,y+1) in L[i] or (x+1,y-1) in L[i] or (x+1,y) in L[i] or (x+1,y+1) in L[i]:
</code></pre>
<p>But I can't union all of the list from L.
Help</p>
<p>*
adjacent points are point , distance between them = 1, for example (1,1) and (1,2). (5,6) and (6,7). (8,7) and (7,7)</p>
</div>
<div class="post-text" itemprop="text">
<p>This is my crack at your algorithm:</p>
<pre><code>def adjacent(list_1, list_2):
    for elem_1 in list_1:
        for elem_2 in list_2:
            if abs(elem_1[0] - elem_2[0]) == 1 or\
               abs(elem_1[1] - elem_2[1]) == 1:
                   return True
    return False

def join_adjacent_points(L):
    result = []
    while len(L) &gt; 0:
        result.append(L[0])
        L = L[1:]
        i = 0
        while i &lt; len(L):
            if adjacent(L[i], result[-1]):
                result[-1] += L[i]
                del L[i]
                i = 0
            i += 1
    return result
</code></pre>
</div>
<span class="comment-copy">What do you mean by adjacent points?</span>
<span class="comment-copy">Are lists A and B the same size (this will affect the answer)? As to your code you can use the <a href="https://docs.python.org/3/library/functions.html#abs" rel="nofollow noreferrer">absolute value method</a> to avoid having to do both addition and subtraction in your if statements.</span>
<span class="comment-copy">Do wish to retain only adjacent points and discard the rest?</span>
<span class="comment-copy">I want merge all list with their points, which have adjacent point, For example L=[A,B] A=[(1,1),(1,3)]. B=[(2,2)].  After we obtain L = [(1,1),(1,3),(2,)] we merge A and B because A hars (1,1) and B has (2,2) and this points are agjucted</span>
<span class="comment-copy">Thank you! But I have some trouble: <code>Traceback (most recent call last):   File "new2.py", line 47, in &lt;module&gt;     NEW_L=join_adjacent_points(L)   File "new2.py", line 15, in join_adjacent_points     if adjacent(L[i], result[-1]): IndexError: list index out of range</code></span>
<span class="comment-copy">@veingrow Could you provide me with a sample list?</span>
<span class="comment-copy">Of couse, [[(0, 0), (0, 1), (1, 0)], [(0, 4), (0, 5), (1, 5)], [(0, 8), (0, 9), (1, 10), (0, 11), (0, 12), (0, 13)], [(2, 2), (2, 3), (3, 3), (3, 2)], [(1, 8), (2, 8), (3, 9), (2, 10)], [(3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8), (8, 7)], [(5, 0), (6, 0)], [(7, 5), (8, 5), (9, 5), (10, 6), (10, 7)], [(10, 5), (11, 5), (12, 6), (13, 5), (12, 5), (13, 4), (12, 4)], [(10, 13), (10, 14), (11, 13), (12, 14), (12, 13)], [(11, 1), (11, 2), (12, 2), (13, 1), (14, 1), (13, 0), (12, 0), (11, 0)], [(12, 8), (12, 9)], [(14, 5)]]</span>
<span class="comment-copy">Ok, I see the error... I will modify the code in a sec</span>
<span class="comment-copy">You make my day, man!</span>
