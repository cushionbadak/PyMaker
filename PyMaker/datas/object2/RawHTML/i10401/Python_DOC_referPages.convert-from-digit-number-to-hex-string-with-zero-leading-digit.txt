<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>a = 1
b = 10
c = 100
</code></pre>
<p>How do I display a leading zero for all numbers with less than two digits?</p>
<p>That is,</p>
<pre><code>01
10
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2 you can do:</p>
<pre><code>print "%02d" % (1,)
</code></pre>
<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprintf</code>.</p>
<hr/>
<p>For Python 3.+ the same behavior can be achieved with:</p>
<pre><code>print("{:02d}".format(1))
</code></pre>
<hr/>
<p>For Python 3.6+ the same behavior can be achieved with f-strings:</p>
<pre><code>print(f"{1:02d}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#str.zfill" rel="noreferrer"><code>str.zfill</code></a>:</p>
<pre><code>print str(1).zfill(2) 
print str(10).zfill(2) 
print str(100).zfill(2) 
</code></pre>
<p>prints:</p>
<pre><code>01
10
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.6+ and 3.0+, you would use the <a href="https://docs.python.org/library/stdtypes.html#str.format" rel="noreferrer"><code>format()</code></a> string method:</p>
<pre><code>for i in (1, 10, 100):
    print('{num:02d}'.format(num=i))
</code></pre>
<p>or using the built-in (for a single number):</p>
<pre><code>print(format(i, '02d'))
</code></pre>
<p>See the <a href="http://www.python.org/dev/peps/pep-3101" rel="noreferrer">PEP-3101</a> documentation for the new formatting functions.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print('{:02}'.format(1))
print('{:02}'.format(10))
print('{:02}'.format(100))
</code></pre>
<p>prints:</p>
<pre><code>01
10
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or this:</p>
<p><code>print '{0:02d}'.format(1)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>Python &gt;= 3.6</strong>, you can do this succinctly with the new f-strings that were introduced by using:</p>
<pre><code>f'{val:02}'
</code></pre>
<p>which prints the variable with name <code>val</code> with a <a href="https://docs.python.org/3/library/string.html#grammar-token-fill" rel="noreferrer"><code>fill</code></a> value of <code>0</code> and a <a href="https://docs.python.org/3/library/string.html#grammar-token-width" rel="noreferrer"><code>width</code></a> of <code>2</code>. </p>
<p>For your specific example you can do this nicely in a loop:</p>
<pre><code>a, b, c = 1, 10, 100
for val in [a, b, c]:
    print(f'{val:02}')
</code></pre>
<p>which prints:</p>
<pre><code>01 
10
100
</code></pre>
<hr/>
<p>For more information on f-strings, take a look at <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP 498</a> where they were introduced.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = [1, 10, 100]
for i in x:
    print '%02d' % i
</code></pre>
<p>results in:</p>
<pre><code>01
10
100
</code></pre>
<p>Read <a href="https://pyformat.info/" rel="nofollow noreferrer">more information about string formatting using %</a> in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Pythonic way to do this:</p>
<pre><code>str(number).rjust(string_width, fill_char)
</code></pre>
<p>This way, the original string is returned unchanged if its length is greater than string_width. Example:</p>
<pre><code>a = [1, 10, 100]
for num in a:
    print str(num).rjust(2, '0')
</code></pre>
<p>Results:</p>
<pre><code>01
10
100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or another solution.  </p>
<pre><code>"{:0&gt;2}".format(number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a format string - <a href="http://docs.python.org/lib/typesseq-strings.html" rel="noreferrer">http://docs.python.org/lib/typesseq-strings.html</a></p>
<p>For example:</p>
<pre><code>python -c 'print "%(num)02d" % {"num":5}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>width = 5
num = 3
formatted = (width - len(str(num))) * "0" + str(num)
print formatted
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use:</p>
<pre><code>'00'[len(str(i)):] + str(i)
</code></pre>
<p>Or with the <code>math</code> module:</p>
<pre><code>import math
'00'[math.ceil(math.log(i, 10)):] + str(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I do it:</p>
<pre><code>str(1).zfill(len(str(total)))
</code></pre>
<p>Basically zfill takes the number of leading zeros you want to add, so it's easy to take the biggest number, turn it into a string and get the length, like this:</p>
<pre>
Python 3.6.5 (default, May 11 2018, 04:00:52) 
[GCC 8.1.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; total = 100
&gt;&gt;&gt; print(str(1).zfill(len(str(total))))
001
&gt;&gt;&gt; total = 1000
&gt;&gt;&gt; print(str(1).zfill(len(str(total))))
0001
&gt;&gt;&gt; total = 10000
&gt;&gt;&gt; print(str(1).zfill(len(str(total))))
00001
&gt;&gt;&gt; 
</pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on your tips, I let my working function. Thank you.</p>
<pre><code>def number2binlist(number, leading = 8):
    #Convert Binary to 0/1 list array with leading zeros, default 8
    bin2dec = int(str(bin(number))[2:])
    theformat = "{:0"+str(leading)+"d}"
    dec2str = list(theformat.format(bin2dec))
    output = [int(z) for z in dec2str]
    output.reverse()
    return output
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s=1    
s="%02d"%s    
print(s)
</code></pre>
<p>the result will be 01</p>
</div>
<div class="post-text" itemprop="text">
<p>!/usr/bin/env python3</p>
<p>Copyright 2009-2017 BHG <a href="http://bw.org/" rel="nofollow noreferrer">http://bw.org/</a></p>
<pre><code>x = 5

while (x &lt;= 15):
    a =  str("{:04}".format(x))
    print(a)
    x = x + 1;
</code></pre>
<p><a href="https://i.stack.imgur.com/u7Eve.png" rel="nofollow noreferrer">same code as an image</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If dealing with numbers that are either one or two digits:</p>
<p><code>'0'+str(number)[-2:]</code> or <code>'0{0}'.format(number)[-2:]</code></p>
</div>
<span class="comment-copy">Example: print "%05d" % result['postalCode'] for a 5 digit postal code.</span>
<span class="comment-copy"><code>x = "%02d.txt" % i</code> raises TypeError (cannot concatenate 'str' and 'int' objects), but <code>x = "%02d.txt" % (i,)</code> does not. Interesting. I wonder where is that documented</span>
<span class="comment-copy">Maybe. In 2.7.6 there is no exception if format value isn't tuple (at least for this example). Looking at the date of my comment I guess I was running 2.7.3 back then, and at that time I didn't know that putting single variable in a tuple gets you on a safe side while using <code>%</code> string formater.</span>
<span class="comment-copy">To elaborate, the <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">docs</a> explain this here: "When no explicit alignment is given, preceding the width field by a zero ('0') character enables sign-aware zero-padding for numeric types. This is equivalent to a fill character of '0' with an alignment type of '='."</span>
<span class="comment-copy">In Python3 use <code>"{:02}".format(1)</code></span>
<span class="comment-copy">I like this solution, as it helps not only when outputting the number, but when you need to assign it to a variable... e.g. x = str(datetime.date.today().month).zfill(2) will return x as '02' for the month of feb.</span>
<span class="comment-copy">I would upvote this but 777 looks SO much better!</span>
<span class="comment-copy">Works in Python 2.7.5 as well. You can also use '{:02d}'.format(1) if you don't want to use named arguments.</span>
<span class="comment-copy">Works fine in 2.7.2, with a floating point "{0:04.0f}".format(1.1) gives 0001 (:04 = at least 4 characters, in this case leading 0's, .0f = floating point with no decimals). I am aware of the % formatting but wanted to modify an existing .format statement without rewriting the <i>whole</i> thing. Thanks!</span>
<span class="comment-copy">This way let you repeat the argument several times within the string: <code>One zero:{0:02}, two zeros: {0:03}, ninezeros: {0:010}'.format(6)</code></span>
<span class="comment-copy">Only compatible with Python 3. If using Python 2.7, do <code>print '{:02}'.format(1)</code></span>
<span class="comment-copy">The documentation example sucks. They throw mapping in with the leading zero sample, so it's hard to know which is which unless you already know how it works. Thats what brought me here, actually.</span>
<span class="comment-copy">Magic of python ! Great answer</span>
<span class="comment-copy">great solutions!!!</span>
<span class="comment-copy">It is more clear, Thank you .</span>
<span class="comment-copy">This would be the Python way, although I would include the parameter for clarity - <code>"{0:0&gt;2}".format(number)</code>, if someone will wants nLeadingZeros they should note they can also do:<code>"{0:0&gt;{1}}".format(number, nLeadingZeros + 1)</code></span>
<span class="comment-copy">Doesn't this contradict <a href="https://stackoverflow.com/questions/134934/display-number-with-leading-zeros">Datageek's answer</a>?</span>
<span class="comment-copy">What question are you answering?</span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and links to documentation. Raw code snippets are not very helpful without some phrases around it. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
