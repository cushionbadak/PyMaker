<div class="post-text" itemprop="text">
<p>I need to write a simple hangman function that takes in one string (the word that's being guessed) and a list of letters (the letters that are guessed).
This is the code I'm using:</p>
<pre><code>def WordGuessed(Word, letters):
    if letters == []:
        return False
    else:
        for i in letters:
            if i not in Word:
                return False
        else:
            if i == letters[-1]:
                return True
</code></pre>
<p>The code usually works, but I am finding that occasionally prints the wrong answer. For example, if </p>
<pre><code>WordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't', 'u'])
</code></pre>
<p>It prints False when it should be printing True. Can anyone see where my code is wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>@jonhopkins said it right: instead of checking that word contains all guessed letters we should check if all word's letters were guessed.</p>
<p>But your code can be much cleaner:</p>
<ul>
<li><p>if you need to check if <code>list</code> instance is empty just <a href="https://stackoverflow.com/a/53522/5997596">use negation</a>,</p></li>
<li><p>if we've reached <code>else</code> block of <code>for</code>-<code>else</code> that means that we've reached the end of iterable without <code>return</code>ing or <code>break</code>ing, no need to additionally check that.</p></li>
</ul>
<p>So solution can be written as</p>
<pre><code>def WordGuessed(Word, letters):
    if not letters:
        return False
    else:
        for i in Word:
            if i not in letters:
                return False
        else:
            return True
</code></pre>
<p>Finally, since we only need to check letters appearance once, we can work with unique collections of letters like <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code>s</a></p>
<pre><code>def WordGuessed2(Word, letters):
    return set(Word).issubset(set(letters))
</code></pre>
<h1>Test</h1>
<pre><code>&gt;&gt;&gt; word = 'durian'
&gt;&gt;&gt; guessed_letters = ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't']
&gt;&gt;&gt; WordGuessed(word, guessed_letters)
False
&gt;&gt;&gt; WordGuessed2(word, guessed_letters)
False
&gt;&gt;&gt; guessed_letters.append('u')
&gt;&gt;&gt; WordGuessed(word, guessed_letters)
True
&gt;&gt;&gt; WordGuessed2(word, guessed_letters)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are returning False as soon as you find a guessed letter that is not in the word. In your example, the very first letter is not in the word.</p>
<p>It would work if instead you loop through <code>Word</code> and check each letter if it is in the array <code>letters</code>:</p>
<pre><code>def WordGuessed(Word, letters):
    if letters == []:
        return False
    else:
        for i in Word:
            if i not in letters:
                return False
        else:
            if i == Word[-1]:
                return True

# prints True
print(WordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't', 'u']))

# prints False, missing 'u'
print(WordGuessed('durian', ['h', 'a', 'c', 'd', 'i', 'm', 'n', 'r', 't']))
</code></pre>
</div>
