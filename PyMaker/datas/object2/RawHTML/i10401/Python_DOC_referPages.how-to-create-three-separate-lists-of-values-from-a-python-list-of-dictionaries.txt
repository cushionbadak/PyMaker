<div class="post-text" itemprop="text">
<p>I am new to Python. My question might come across as simple to experienced developers and coders but I haven't been able to find out an answer to this. </p>
<p>I am retrieving some data through a database query. I have succeeded in organising each row returned by query as a dictionary having three keys and a corresponding value to each key. Essentially, I have organised all rows of data returned by the query into a list of dictionaries.</p>
<p>The list of dictionaries looks somewhat like this:</p>
<pre><code>[
    {'Date': date1, 'price': price1, 'itemnumber': number1},
    {'Date': date2, 'price': price2, 'itemnumber': number2},
    ...
]
</code></pre>
<p>How can I convert this list of dictionaries into three separate lists corresponding to each key i.e. Date, Price and itemnumber?</p>
<p>Thank you for your help. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code># Defining lists
dates = []
prices = []
item_numbers = []
# Loop through list
for dictionary in your_list:
    dates.append(dictionary["Date"]) # Add the date to dates
    prices.append(dictionary["price"]) # Add the price to prices
    # Add item number to item_numbers
    item_numbers.append(dictionary["itemnumber"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <em>list comprehensions</em>:</p>
<pre><code>date = [d['Date'] for d in list_of_dicts]
price = [d['price'] for d in list_of_dicts]
itemnumber = [d['itemnumber'] for d in list_of_dicts]
</code></pre>
<hr/>
<p>One could also do this in a less readable one liner:</p>
<pre><code>date, price, itemnumber = zip(*[(d['Date'], d['price'], d['itemnumber']) for d in list_of_dicts])
</code></pre>
<p>Use <code>map(list, ...)</code> to turn the returned tuples into lists in the second case.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could combine a listcomp and a dictcomp:</p>
<pre><code>In [95]: ds
Out[95]: 
[{'Date': 'date1', 'itemnumber': 'number1', 'price': 'price1'},
 {'Date': 'date2', 'itemnumber': 'number2', 'price': 'price2'}]

In [96]: {key: [subdict[key] for subdict in ds] for key in ds[0]}
Out[96]: 
{'Date': ['date1', 'date2'],
 'itemnumber': ['number1', 'number2'],
 'price': ['price1', 'price2']}
</code></pre>
<p>Note that we have three separate lists, they're just more conveniently stored as values in a dictionary.  This way, if we decide that we want to add an additional trait (say, "purchaser"), we don't need to change any of the logic.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for (field,values) in [(field,
            [result.get(field) for result in results]
        ) for field in results[0].keys()]:
    # this is ugly, but I can't see any other legal way to
    # dynamically set variables.
    eval "%s=%s" % (field, repr(value))
</code></pre>
<p><em>Edited to not [illegally] modify the <code>locals()</code> dictionary :(</em></p>
</div>
<span class="comment-copy">Tried this! Works well. Thank you!</span>
<span class="comment-copy">Depending on the context of the code, you might also want to write the first one as <code>columns = [ [d[key] for d in list_of_dicts] for key in ('Date', 'price', 'itemnumber')]</code></span>
<span class="comment-copy">@SteveJessop It would also be a more intuitive replacement for the transpose on <code>zip</code>. Good one!</span>
<span class="comment-copy">@Moses and Steve Jessop, your answers are immensely helpful. It is needless to say that I have tried and they work. I have learned something new. Thank you!</span>
<span class="comment-copy">Elegant! tried this as well and it is excellent!. Thank you all for your promt help.</span>
<span class="comment-copy">The documentation for <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> specifically says not to modify it, and in practice it won't work in a function in CPython, if memory serves.</span>
<span class="comment-copy">you're right, i was taking a shortcut.  it actually does work in my python 2.6.6 interpreter, but I will fix.</span>
