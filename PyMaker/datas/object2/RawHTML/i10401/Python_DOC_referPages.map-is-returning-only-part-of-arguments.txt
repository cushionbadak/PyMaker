<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>a = '0'
b = '256'
mod_add = ['300', '129', '139']
list(map(lambda a, b, x: (a &lt; x) and (x &lt; b), a, b, mod_add))
</code></pre>
<p>I'd like to check every element in mod_add, but </p>
<pre><code>list(map(lambda a, b, x: (a &lt; x) and (x &lt; b), a, b, mod_add))
</code></pre>
<p>returns only one <code>False</code>.
With some values <code>(a = '100', b = '200')</code> it returns <code>'False', 'False', 'False'</code>.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really have to use <code>map</code>:</p>
<pre><code>list(map(lambda x: (a &lt; x) and (x &lt; b), mod_add))
</code></pre>
<p>Edit:</p>
<p>In response to the desire to <code>map</code> only one element from the list, it really doesn't make such sense to me to do that. But if that's what you wish to do, you can try:</p>
<pre><code>list(map(lambda x: (a &lt; x) and (x &lt; b), [mod_add[0]]))
</code></pre>
<p>I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>a</code> and <code>b</code> are strings, they will be rightly treated as <em>iterables</em> by <code>map</code>, not constants as you intend. You should either use a list comprehension or not pass <code>a</code> and <code>b</code> as parameters to <code>map</code>:</p>
<pre><code>&gt;&gt;&gt; [a &lt; x &lt; b for x in mod_add]
[False, True, True]
</code></pre>
<p>Comparisons can be chained arbitrarily, so <code>(a &lt; x) and (x &lt; b)</code> can be replaced with <code>a &lt; x &lt; b</code></p>
<hr/>
<p>Comparing integers instead of strings (which is probably what you want) is just another step away:</p>
<pre><code>&gt;&gt;&gt; [int(a) &lt; int(i) &lt; int(b) for i in mod_add]
[False, True, True]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is really the kind of thing you should prefer list comprehensions for.</p>
<pre><code>min_, max_ = '0', '256'
# do you mean for these to be compared lexicographically?!
# be aware that '0' &lt; '1234567890' &lt; '256' is True

mod_add = ['300', '129', '139']

result = [min_ &lt; mod &lt; max_ for mod in mod_add]
# [False, True, True]
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> and <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow"><code>reduce</code></a> (now <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a>) are mighty tools to be sure, but Python tends to shy away from them in favor of more verbose, easier to read expressions.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = '0'
b = '256'
mod_add['300', '129', '139']
map(lambda x: int(a)&lt;int(x)&lt;int(b), mod_add)
</code></pre>
<p>Output :</p>
<pre><code>[False, True, True]
</code></pre>
</div>
<span class="comment-copy">Are you intending to compare strings or would you like to compare the integer values? E.g., 20 &lt; 100 but '20' &gt; '100'</span>
<span class="comment-copy">thank you! I also tried to slightly change it (if I need to check only one element for example, but it returns a error:  <code>&gt;&gt;&gt; list(lambda x: (a &lt; x) and (x &lt; b), mod_add[0]) Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; TypeError: list() takes at most 1 argument (2 given) </code></span>
<span class="comment-copy">It really does not make sense to map a single element of a list. But you can , if you really insist, do: <code>list(map(lambda x: (a &lt; x) and (x &lt; b), [mod_add[0]]))</code>.</span>
<span class="comment-copy">I mean, I don't use map() now - I would like to check single element. I'm using <code>list(lambda x: (a &lt; x) and (x &lt; b), mod_add[0])</code>, still I see error ' list() takes at most 1 argument (2 given)'. (I already changed a and b to integers (and mod_add to list of integers too))</span>
<span class="comment-copy">@grindelwaldus, did the edit help?</span>
<span class="comment-copy">yes, it works fine. but it still returns error when i try to get rid of map() - can you please explain why it happens?</span>
<span class="comment-copy">Just intersted, is there way to check it with map(), if I change type to int?</span>
<span class="comment-copy">@grindelwaldus Yes, I don't see why not</span>
