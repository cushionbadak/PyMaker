<div class="post-text" itemprop="text">
<p>I have a program that asks for input of a sentence, then asks for a word, and tells you the position of that word:</p>
<pre><code>sentence = input("enter sentence: ").lower()
askedword = input("enter word to locate position: ").lower()
words = sentence.split(" ")

for i, word in enumerate(words):
     if askedword == word :
          print(i+1)
    #elif keyword != words :
         #print ("this not")
</code></pre>
<p>However I cannot get the program to work correctly when I edit it to say that if the input word is not in the sentence, then print "this isn't in the sentence"</p>
</div>
<div class="post-text" itemprop="text">
<p>Lists are sequences, as such you can use <a href="https://docs.python.org/3.5/library/stdtypes.html#common-sequence-operations" rel="nofollow">the <code>in</code> operation</a> on them to test for membership in the <code>words</code> list. If inside, find the position inside the sentence with <code>words.index</code>:</p>
<pre><code>sentence = input("enter sentence: ").lower()
askedword = input("enter word to locate position: ").lower()
words = sentence.split(" ")

if askedword in words:
    print('Position of word: ', words.index(askedword))
else:
    print("Word is not in the given sentence.")
</code></pre>
<p>With sample input:</p>
<pre><code>enter sentence: hello world

enter word to locate position: world
Position of word: 1
</code></pre>
<p>and, a false case:</p>
<pre><code>enter sentence: hello world

enter word to locate position: worldz
Word is not in the given sentence.
</code></pre>
<p>If you're looking to check against multiple matches then a list-comprehension with <code>enumerate</code> is the way to go:</p>
<pre><code>r = [i for i, j in enumerate(words, start=1) if j == askedword]
</code></pre>
<p>Then check on whether the list is empty or not and print accordingly:</p>
<pre><code>if r:
    print("Positions of word:", *r)
else:
    print("Word is not in the given sentence.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Jim's answer—combining a test for <code>askedword in words</code> with a call to <code>words.index(askedword)</code>—is the best and most Pythonic approach in my opinion.</p>
<p>Another variation on the same approach is to use <code>try</code>-<code>except</code>:</p>
<pre><code>try:
    print(words.index(askedword) + 1) 
except ValueError:
    print("word not in sentence")
</code></pre>
<p>However, I just thought I'd point out that the structure of the OP code looks like you might have been attempting to adopt the following pattern, which also works:</p>
<pre><code>for i, word in enumerate(words):
    if askedword == word :
        print(i+1)
        break
else:    # triggered if the loop runs out without breaking
    print ("word not in sentence")
</code></pre>
<p>In an unusual twist unavailable in most other programming languages, this <code>else</code> binds to the <code>for</code> loop, not to the <code>if</code> statement (that's right, get your editing hands off my indents). <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow">See the python.org documentation here.</a></p>
</div>
<span class="comment-copy">this only locates the first time the word is there in the sentence, for example if i input sentence dog sat on the dog, its should come up with 1 and 5, is there anyway i can do this ?</span>
<span class="comment-copy">@Dummy8123 right, none of the answers apparently caught on you wanted to check for multiple occurrences, I updated my answer to address that.</span>
<span class="comment-copy">i have tried the try and except one however it only seems to be outputted the first locatioin</span>
