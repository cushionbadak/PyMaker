<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/threading.html" rel="nofollow">Python <code>threading</code> documentation</a> lists the following example of a producer:</p>
<pre><code>from threading import Condition
cv = Condition()

# Produce one item
with cv:
    make_an_item_available()
    cv.notify()
</code></pre>
<p>I had to review threading and I looked at <a href="http://en.cppreference.com/w/cpp/thread/condition_variable/notify_all" rel="nofollow">the C++ documentation, which states</a>:</p>
<blockquote>
<p>The notifying thread does not need to hold the lock on the same mutex
  as the one held by the waiting thread(s); in fact doing so is a
  pessimization, since the notified thread would immediately block
  again, waiting for the notifying thread to release the lock.</p>
</blockquote>
<p>That would suggest doing something like this:</p>
<pre><code># Produce one item
with cv:
    make_an_item_available()
cv.notify()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't read C++ documentation to understand Python APIs. Per <a href="https://docs.python.org/3/library/threading.html#threading.Condition.notify" rel="nofollow">the actual Python docs</a>:</p>
<blockquote>
<p>If the calling thread has not acquired the lock when this method is called, a <code>RuntimeError</code> is raised.</p>
</blockquote>
<p>Python explicitly requires that the lock be held while <code>notify</code>ing.</p>
</div>
<span class="comment-copy">Oh, I missed that.  Won't the consumer block immediately then?</span>
<span class="comment-copy">@NeilG: Yes, but that would have happened anyway (most of the time), they need <a href="https://wiki.python.org/moin/GIL" rel="nofollow noreferrer">the GIL</a> to even begin execution again, and <code>notify</code> doesn't release the GIL. The thread that called <code>notify</code> will finish up its time slice (which, assuming they called <code>notify</code> at the end of the <code>with</code> block for the <code>Condition</code>, usually gives it time to release the <code>Condition</code>) before releasing the GIL, at which point the <code>notify</code>-ed thread wakes, and hopefully acquires both GIL and <code>Condition</code>. It may take some time if other threads acquire GIL first.</span>
<span class="comment-copy">Makes sense, thanks.</span>
