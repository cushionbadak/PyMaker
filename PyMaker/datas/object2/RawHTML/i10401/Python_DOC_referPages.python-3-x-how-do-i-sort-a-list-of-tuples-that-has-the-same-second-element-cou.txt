<div class="post-text" itemprop="text">
<p>So for example</p>
<pre><code>['John','John','Mike','Mike','Kate','Kate']
</code></pre>
<p>Should return:</p>
<pre><code>[('John', 2), ('Kate', 2), ('Mike', 2)]
</code></pre>
<p>How can I write code so there is order instead of those three pairs just being in random order?</p>
<p>I need to sort the list of tuples by count from biggest to smallest unless there are ties, then I need to sort the times alphabetically.</p>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>&gt;&gt;&gt; names = ['John','John','Mike','Mike','Kate','Kate']
&gt;&gt;&gt; sorted(Counter(names).items(), key=lambda item: (-item[1], item[0]))
[('John', 2), ('Kate', 2), ('Mike', 2)]
</code></pre>
<p>The counter's items will give you tuples of <code>(name, count)</code>.  Normally you'd use <code>Counter.most_common</code> to get the items in order of their counts, but as far as I can tell, it only sorts by count and disregards any key (name) information in the sorting.</p>
<p>Since we have to re-sort again anyway, we might as well use <code>sorted</code> on the items instead.  Since tuples sort lexicographically, and you want to sort primarily by the count, the key function should return a tuple of the format <code>(count, name)</code>.  However, since you want this to be <em>decreasing</em> by count, but <em>increasing</em> by name, the only thing we can do is return a tuple of the format <code>(-count, name)</code>.  This way, larger count will result in a lower value so it will sort <em>before</em> values with lower counts.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort your result using <code>sorted()</code> function using the <code>key</code> argument to define how to sort the items:</p>
<pre><code>result = [('John', 2), ('Kate', 2), ('Mike', 3)]
sorted_result = sorted(result, key=lambda x: (-x[1], x[0]))
</code></pre>
<p>As you want to sort the result in descending order on the count value and then the name in ascending order, so the key <code>(-x[1], x[0])</code> will do the trick.</p>
<p>The <code>sorted_result</code> will be:</p>
<pre><code>[('Mike', 3), ('John', 2), ('Kate', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways to do this. In the first method, a sorted list is returned. In the second method, the list is sorted in-place.</p>
<pre><code>import operator

# Method 1
a = [('Mike', 2), ('John', 2), ('Kate', 2), ('Arvind', 5)]
print(sorted(a, key = lambda x : (x[0],)))

# Method 2
a = [('Mike', 2), ('John', 2), ('Kate', 2), ('Arvind', 5)]
a.sort(key=operator.itemgetter(0))
print(a)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/8459231/sort-tuples-based-on-second-parameter">Sort tuples based on second parameter</a></span>
<span class="comment-copy">No. I need to sort them by the second element UNLESS there is a tie..which then idk what to do.</span>
<span class="comment-copy">Get the first instance and the <code>.count()</code>, then put into list</span>
<span class="comment-copy">I don't follow you :(</span>
<span class="comment-copy">Sorry. I'm not sure if I follow you. I'm new to Python...I don't want to just use this code and not understand it. I need to sort the list of tuples by count from biggest to smallest unless there are ties, then I need to sort the times alphabetically.</span>
<span class="comment-copy">it should be <code>sorted(Counter(names).items(), key=lambda item: item[::-1])</code> and for input: <code>names  = ['John','John','Mike','Mike','Kate','Kate','ADF','ABCD','ACD','DF','BC']</code> I got output as <code>[('ABCD', 1), ('ACD', 1), ('ADF', 1), ('BC', 1), ('DF', 1), ('John', 2), ('Kate', 2), ('Mike', 2)]</code> Is this correct output @Random Stuff?</span>
<span class="comment-copy">The ones with the biggest count should be in the front, but other than that yes. Can you explain to me how this works?</span>
<span class="comment-copy">@RandomStuff -- I've done my best to illuminate the key points in the text.  Is there any specific part that you're not following?</span>
<span class="comment-copy">I am following it, but I'm actually new to Counter(), key, lambda, and using items() in this case. It would be also impossible for me to think of this alone...I am looking everything up right now, but if you can explain those terms, that'd be great!!!!!!</span>
<span class="comment-copy">Thanks! I did     result.sort(key=lambda x: (-x[1], x[0])    and it works....but can you thoroughly explain how this works? I don't exactly know what key or lambda do...Also, does the negative sign before the x[1] make it go the other order?</span>
<span class="comment-copy"><code>key</code> is the named argument for <code>sorted</code> function, details can be refer to <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#sorted</a>.  <code>lambda</code> is used to define nameless function in-place.  The first <code>-x[1]</code> in <code>(-x[1], x[0])</code> will sort the original <code>count</code> part in reverse order.  The second <code>x[0]</code> will be used to sort the original <code>name</code> part in ascending order if the <code>count</code> part is the same.</span>
<span class="comment-copy">Ahhh kk. Is there a way to do this without using any of this? With just for loops and if statements?</span>
<span class="comment-copy">Hi. I need to sort the list of tuples by count from biggest to smallest unless there are ties, then I need to sort the times alphabetically. How can I do this in addition to the string value?</span>
