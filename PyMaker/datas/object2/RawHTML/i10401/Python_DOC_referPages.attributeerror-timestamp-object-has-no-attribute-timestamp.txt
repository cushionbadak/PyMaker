<div class="post-text" itemprop="text">
<p>While converting a <code>panda</code> object to a timestamp, I am facing this strange issue.</p>
<p>Train['date'] value is like <code>01/05/2014</code> which I am trying to convert into linuxtimestamp.</p>
<p>My code:</p>
<pre><code>Train = pd.read_csv("data.tsv", sep='\t') # use TAB as column separator
Train['timestamp'] = pd.to_datetime(Train['date']).apply(lambda a: a.timestamp())
</code></pre>
<p>And I get this error:</p>
<pre><code>Traceback (most recent call last):
  File "socratis.py", line 11, in &lt;module&gt;
    Train['timestamp'] = pd.to_datetime(Train['date']).apply(lambda a: a.timestamp())
  File "/home/ubuntu/.local/lib/python2.7/site-packages/pandas/core/series.py", line 2220, in apply
    mapped = lib.map_infer(values, f, convert=convert_dtype)
  File "pandas/src/inference.pyx", line 1088, in pandas.lib.map_infer (pandas/lib.c:62658)
  File "socratis.py", line 11, in &lt;lambda&gt;
    Train['timestamp'] = pd.to_datetime(Train['date']).apply(lambda a: a.timestamp())
AttributeError: 'Timestamp' object has no attribute 'timestamp'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The method to_datetime will return a <code>TimeStamp</code> instance.  I'm not sure what you are hoping to accomplish by the lambda function, but it appears you are trying to convert some object to a <code>TimeStamp</code>. </p>
<p>Try removing the apply section so it looks like this:</p>
<p><code>Train['timestamp'] = pd.to_datetime(Train['date'])</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow"><code>datetime.timestamp()</code></a>, which was added in Python 3.3. Pandas itself isn't involved.</p>
<blockquote>
<p><em>N.B.</em> <code>.timestamp()</code> will localize naive timestamps to the computer's UTC offset. To the contrary, suggestions in this answer are timezone-agnostic.</p>
</blockquote>
<p>Since pandas <a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#timestamp-limitations" rel="nofollow">uses nanoseconds internally</a> (numpy <a href="http://docs.scipy.org/doc/numpy/reference/arrays.datetime.html#datetime-units" rel="nofollow">datetime64[ns]</a>), you should be able to do this even with Python 2:</p>
<pre><code>Train['timestamp'] = pd.to_datetime(Train['date']).value / 1e9
</code></pre>
<p>Or be more explicit wtih something like this (from the datetime docs):</p>
<pre><code>import pandas as pd
from datetime import datetime, timedelta

def posix_time(dt):
    return (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)

Train['timestamp'] = pd.to_datetime(Train['date']).apply(posix_time)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://pandas.pydata.org/pandas-docs/version/0.21/generated/pandas.Timestamp.to_datetime.html" rel="nofollow noreferrer">to_datetime seems to be deprecated.</a> Use <code>to_pydatetime()</code> instead... </p>
</div>
<span class="comment-copy">if we do this, it does not convert date into linux timestamp. Which I need</span>
<span class="comment-copy">Try this. if it works ill update the  answer:  <code>Train['timestamp'] = time.mktime(pd.to_datetime(Train['date']).timetuple())</code></span>
<span class="comment-copy">which python do you use? Iam getting <code>AttributeError: 'Series' object has no attribute 'timetuple' </code></span>
