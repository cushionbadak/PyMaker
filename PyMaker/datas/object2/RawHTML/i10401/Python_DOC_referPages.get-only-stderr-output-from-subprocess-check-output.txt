<div class="post-text" itemprop="text">
<p>I want to run an external process in python, and process its <code>stderr</code> only.</p>
<p>I know I can use <code>subprocess.check_output</code>, but how can I redirect the stdout to <code>/dev/null</code> (or ignore it in any other way), and receive only the <code>stderr</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Unfortunately you have tagged this <a class="post-tag" href="/questions/tagged/python-2.7" rel="tag" title="show questions tagged 'python-2.7'">python-2.7</a>, as in python 3.5 and up this would be simple using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow"><code>run()</code></a>:</p>
<pre><code>import subprocess

output = subprocess.run(..., stdout=subprocess.DEVNULL,
                        stderr=subprocess.PIPE).stderr
</code></pre>
<p>With <code>check_output()</code> stdout simply cannot be redirected:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(('ls', 'asdfqwer'), stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/subprocess.py", line 566, in check_output
    raise ValueError('stdout argument not allowed, it will be overridden.')
ValueError: stdout argument not allowed, it will be overridden.
</code></pre>
<p>Use <a href="https://docs.python.org/2/library/subprocess.html#popen-objects" rel="nofollow"><code>Popen</code></a> objects and <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>communicate()</code></a> with python versions less than 3.5. Open <code>/dev/null</code> using <a href="https://docs.python.org/2/library/os.html#os.devnull" rel="nofollow"><code>os.devnull</code></a> in python 2.7:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; import os
&gt;&gt;&gt; with open(os.devnull, 'wb') as devnull:
...     proc = subprocess.Popen(('ls', 'asdfqwer'),
...                             stdout=devnull,
...                             stderr=subprocess.PIPE)
...     proc.communicate()
...     proc.returncode
... 
(None, "ls: cannot access 'asdfqwer': No such file or directory\n")
2
</code></pre>
<p>Communicate sends input to stdin, if piped, and reads from stdout and stderr until end-of-file is reached.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a simple trick:</p>
<pre><code>import subprocess
stderr_str = subprocess.check_output('command 2&gt;&amp;1 &gt;/dev/null')
</code></pre>
<p>This will filter out the stdout, and keeps only the stderr.</p>
</div>
<span class="comment-copy">the duplicate was wrong, <code>check_output</code> does not allow overriding <code>stdout</code>!</span>
<span class="comment-copy">Is there a reason you need this for Python 2.7 only?</span>
<span class="comment-copy">so do you want to catch the output in the case of an <i>error</i> or <i>success</i> or both?</span>
<span class="comment-copy">@JRichardSnape: I need it for Python 2.7 only because my code base is on python 2.7.</span>
<span class="comment-copy">@AnttiHaapala In case of both error and success I want to catch only stderr</span>
<span class="comment-copy">Thanks for your help. I found a simple way to do it.</span>
