<div class="post-text" itemprop="text">
<p>I want to convert all the even letters using one function and all the odd numbers  using another function. So, each letter represents 0-25 correspsonding with a-z, so a,c,e,g,i,k,m,o,q,s,u,w,y are even characters.</p>
<p>However, only my even letters are converting correctly. </p>
<pre><code>def encrypt(plain):
    charCount = 0
    answer=[]
    for ch in plain:
        if charCount%2==0:
            answer.append(pycipher.Affine(7,6).encipher(ch))
        else:
            answer.append(pycipher.Affine(3,0).encipher(ch))
    return ''.join(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This are my two cents on that. What @mgilson is proposing also works of course but not in the way you specified (in the comments). Try to debug your code in your head after writing it.. Go through the for loop and perform 1-2 iterations to see whether the variables take the values you intended them to. <code>charCount</code> is never reassigned a value. It is always 0. And, yes <code>charCount += 1</code> would make it change but <strong>not</strong> in the way you want it to..</p>
<pre><code>def encrypt(plain):
    alphabet = 'abcdefghijklmnopqrwstuvwxyz'
    answer = ''
    for letter in plain:
        try:
            if alphabet.index(letter.lower()) % 2 == 0:
                answer += pycipher.Affine(7, 6).encipher(letter)
            else:
                answer += pycipher.Affine(3, 0).encipher(letter)
        except:
            answer += letter
    return answer

my_text = 'Your question was not very clear OP'
encripted_text = encrypt(my_text)
</code></pre>
<p>Also, i would not use <code>ord(ch)</code> because <code>ord('a') = 97</code> and not <code>0</code> therefore odd instead of even.</p>
</div>
<div class="post-text" itemprop="text">
<p>You never change <code>charCount</code> in your loop -- So it starts at <code>0</code> and stays at <code>0</code> which means that each <code>ch</code> will be treated as "even".</p>
<p>Based on your update, you actually want to check if the character is odd or even based on it's "index" in the english alphabet.  Having some sort of mapping of characters to numbers is helpful here.  You could build it yourself:</p>
<pre><code>alphabet = 'abcde...'  # string.ascii_lowercase?
mapping = {k: i for i, k in enumerate(alphabet)}
</code></pre>
<p><em>OR</em> we can use the builtin <code>ord</code> noticing that <code>ord('a')</code> produces an odd result, <code>ord('b')</code> is even, etc.</p>
<pre><code>def encrypt(plain):
    answer=[]
    for ch in plain:
        if ord(ch) % 2 == 1:  # 'a', 'c', 'e', ...
            answer.append(pycipher.Affine(7,6).encipher(ch))
        else:  # 'b', 'd', 'f', ...
            answer.append(pycipher.Affine(3,0).encipher(ch))
    return ''.join(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your basic approach is to re-encrypt a letter each time you see it. With only 26 possible characters to encrypt, it is probably worth pre-encrypting them, then just performing a lookup for each character in the plain text. While doing that, you don't need to compute the position of each character, because you know you are alternating between even and odd the entire time.</p>
<pre><code>import string

def encrypt(plain):
    # True == 1, False == 0
    fs = [pycipher.Affine(3,0).encipher,
          pycipher.Affine(7,6).encipher]
    is_even = True  # assuming "a" is even; otherwise, just set this to False
    d = dict()
    for ch in string.ascii_lowercase:
        f = fs[is_even]
        d[ch] = f(ch)
        is_even = not is_even

    return ''.join([d[ch] for ch in plain]) 
</code></pre>
<p>You can also use <code>itertools.cycle</code> to simplify the alternation for you.</p>
<pre><code>def encrypt(plain):
    # again, assuming a is even. If not, reverse this list
    fs = itertools.cycle([pycipher.Affine(3,0).encipher,
                          pycipher.Affine(7,6).encipher])
    d = dict((ch, f(ch)) for f, ch in zip(fs, string.ascii_lowercase))
    return ''.join([d[ch] for ch in plain])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your notion of <em>even letter</em> is based on the position of a character in the alphabet, you could use <a href="https://docs.python.org/3/library/functions.html?highlight=ord#ord" rel="nofollow"><code>ord()</code></a>, like this:</p>
<pre><code> if ord(ch)%2==0:
</code></pre>
<p>Note that <code>ord('a')</code> and <code>ord('A')</code> are both odd, so that would make <code>a</code> go in the <code>else</code> part. If you want the opposite, then just negate the condition:</p>
<pre><code> if ord(ch)%2!=0:
</code></pre>
</div>
<span class="comment-copy">what do you mean by <i>even letters</i>? letters in words that correspond to an even index when the words are viewed as python strings?</span>
<span class="comment-copy">Each letter represents 0-25 correspsonding with a-z, so a,c,e,g,i,k,m,o,q,s,u,w,y are even characters</span>
<span class="comment-copy">Please edit the question and incorporate the information you provided in the comments in it.</span>
<span class="comment-copy">i tried incrementing charCount by doing: charCount=charCount+1, but it still gave me the wrong results</span>
<span class="comment-copy">this converts the string based on the index of letters in the string that is being converted and not the alphabet as the OP wants.</span>
<span class="comment-copy">@Ev.Kounis -- OP hadn't specified that at the time that I answered.</span>
<span class="comment-copy">even or odd refers to the position of letter in the alphabet and not in the string to be enciphered.. So all letters in 'aaaaaaaaaaaa' are <i>"even"</i></span>
<span class="comment-copy">Yeah, I'm currently re-working the entire answer.</span>
<span class="comment-copy">depending on how computationally heavy the encryption algorithm is, the quality of this answer varies between very good and brilliant. The <code>d[p]</code> inside the for loop should be a <code>d[ch]</code>, right?</span>
<span class="comment-copy">Also it seems that the <code>is_even</code> has to be <code>False</code> assuming "a" is even.</span>
<span class="comment-copy">Oh, right; I used the shell convention of 0=success, 1=failure. I fixed by swapping the order the functions are stored in the list.</span>
<span class="comment-copy">but 'a' in 'abc...' has an even index number (0).</span>
<span class="comment-copy">True, I now just put both ways....</span>
