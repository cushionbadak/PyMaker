<div class="post-text" itemprop="text">
<p>Suppose</p>
<pre><code>    type(a) = &lt;type 'numpy.ndarray'&gt;
</code></pre>
<p>now I have another variable <code>b</code> (maybe a <code>&lt;type 'list'&gt;</code>), I want to convert it into the same type of <code>a</code>. How to do this? For example, </p>
<pre><code>    &gt;&gt;&gt; type(a)
    &lt;type 'numpy.ndarray'&gt;
    &gt;&gt;&gt; b = [[[100, 200, 300]]]
    &gt;&gt;&gt; type(b)
    &lt;type 'list'&gt;
</code></pre>
<p>Now, I want to </p>
<pre><code>    &gt;&gt;&gt; type(b)
    &lt;type 'numpy.ndarray'&gt;
</code></pre>
<p>I want to do this in a python script. I don't know in advance what is the type of <code>a</code>. I just take <code>numpy.ndarray</code> as an example.</p>
<p><strong>UPDATE:</strong></p>
<p>In fact, in the python script, it receive some strings from <code>sys.argv</code>. And then it will assign these strings into some predefined variables in this script. These predefined variables may be <code>int</code>, <code>list</code>, <code>numpy.ndarray</code>, or else. For <code>int</code> or <code>list</code>, this can be done by <code>from ast import literal_eval; MyDict[sys.argv[1]] = literal_eval(sys.argv[2])</code>. But if <code>MyDict[sys.argv[1]]</code> is a <code>numpy.ndarray</code>, the <code>literal_eval</code> cann't reassign the list <code>[[[100, 200, 300]]]</code> into a <code>numpy.ndarray</code>. So I'm seeking a more effective way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert a <code>list</code> into a python array, use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray.html" rel="nofollow"><code>numpy.asarray</code></a>.
For example:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; a = np.asarray(a)
&gt;&gt;&gt; a
array([1, 2, 3, 4])
&gt;&gt;&gt; type(a)
&lt;class 'numpy.ndarray'&gt;
</code></pre>
<p>More generally, how to convert the type depends on what conversion you want.
To convert to a string use <a href="https://docs.python.org/3/library/stdtypes.html#textseq" rel="nofollow"><code>str</code></a>, to convert to an integer use <code>int</code>, and so on.
Note that in python the variables to not have a fixed "type", so you can simply reassign a variable to convert its type. For example</p>
<pre><code>&gt;&gt;&gt; a = '2' # we can start from a string..
&gt;&gt;&gt; a = int(a) # and than get an int
&gt;&gt;&gt; a
2
&gt;&gt;&gt; a = [1, 2, 3] # we can now completely change and make *a* a list
&gt;&gt;&gt; a = tuple(a) # or maybe you want a tuple?
&gt;&gt;&gt; a
(1, 2, 3)
</code></pre>
<p>To check if a variable is of a certain type you can use <code>isinstance</code>, so to convert the type of <code>b</code> depending on the type of <code>a</code> you can do something like</p>
<pre><code>def conditional_conversion(a, b):
    if isinstance(a, int):
        b = int(b)
    elif isinstance(a, str):
        b = str(b)
    elif isinstance(a, list):
        b = list(b)
    return b

&gt;&gt;&gt; a = 12
&gt;&gt;&gt; b = '51'
&gt;&gt;&gt; b = conditional_conversion(a, b)
51
</code></pre>
<p>Of course, you'd need to consider the various possibilities that you could incur into.
Also, this type of conversion will likely throw exception if <code>b</code> cannot be converted into the type of <code>a</code>, so a try-catch construct will probably be beneficial.</p>
</div>
<div class="post-text" itemprop="text">
<p>Presumably you don't <em>just</em> want to convert the type; you also want to preserve the existing value.  (Otherwise you could just assign <code>b</code> to an empty object of the new type and be done with it.)</p>
<p>Very generally, you would call the new type's constructor, passing in the old value.  For example, if you have an integer and you want to covert it to a string, call <code>str()</code> on the integer value:</p>
<pre><code>a = 5        # type(a) is &lt;type 'int'&gt;
a = str(a)   # type(a) is now &lt;type 'str'&gt;
</code></pre>
<p>Or to convert a string to a list:</p>
<pre><code>a = "hello"  # type(a) is &lt;type 'str'&gt;
a = list(a)  # type(a) is now &lt;type 'list'&gt;
</code></pre>
<p>However this method is <em>very</em> generic and won't be usable in a lot of cases.</p>
</div>
<span class="comment-copy">Reassign that variable to be that type?</span>
<span class="comment-copy">@Mr.goosberry, yes!</span>
<span class="comment-copy">@Mr.goosberry, I want to do this in a python script. I don't know in advance what type of the <code>a</code> is. I just take <code>numpy.ndarray</code> as an example.</span>
<span class="comment-copy">There's not a general way to do this, and there shouldn't be. What if <code>a</code> is an int and <code>b</code> is a list. How would you convert <code>b</code> to the type of <code>a</code>. Why do you need to do this?</span>
<span class="comment-copy">@MorganThrapp, yes, so we can add some <code>try ... catch ...</code> in the script. But if <code>a</code> and <code>b</code> could be compatible, then we just reassign the type of <code>b</code>.</span>
<span class="comment-copy">Thank you. But maybe <code>a</code> is another type. I just take <code>numpy.ndarray</code> as an example.</span>
<span class="comment-copy">@mining Python has many ways to convert from different data types. Pick one for your specfic case, and use it.</span>
<span class="comment-copy">@Mr.goosberry, yes, but the <code>a</code> may be another types, e.g., <code>list</code>, <code>dict</code>, etc. And also <code>b</code> may be another types, not just a <code>list</code> type.</span>
<span class="comment-copy">Yes, I know this kind of conversion. I want to reassign the type of one variable according to that of another variable.</span>
<span class="comment-copy">@mining but do you know what <code>b</code>'s type will be?</span>
<span class="comment-copy">Hi, thank you for answer. In fact, in the python script, it receive some strings from <code>sys.argv</code>. And then it will assign these strings into some predefined variables in this script. These predefined variables may be <code>int</code>, <code>list</code>, or <code>numpy.ndarray</code>. For <code>int</code> or <code>list</code>, this can be done by <code>from ast import literal_eval; MyDict[sys.argv[1]] = literal_eval(sys.argv[2])</code>. But if <code>MyDict[sys.argv[1]]</code> is <code>numpy.ndarray</code>, the <code>literal_eval</code> cann't reassign the list <code>[[[100, 200, 300]]]</code> into a <code>numpy.ndarray</code>.</span>
<span class="comment-copy">If your question was about converting specifically from <code>list</code> to <code>numpy.ndarray</code>, then you should have asked that specific question.  You asked for a <i>general</i> solution, and I gave one, with the caveat that it won't work in many cases.</span>
<span class="comment-copy">Thanks, John. Sorry for unclear description. I know the conversion from <code>list</code> to <code>numpy.ndarray</code>.  Yes, I post this question for a more effective way to achieve this goal, not many <code>if else</code>.</span>
