<div class="post-text" itemprop="text">
<p>I'm not sure how you name the <code>n</code> in the following <code>for</code> loop. Is there are a term for it? </p>
<pre><code>for n in [1,2,3,4,5]:
    print i
</code></pre>
<p>And, am I correct that the list itself is the <code>iterator</code> of the <code>for</code> loop ? </p>
</div>
<div class="post-text" itemprop="text">
<p>The example you gave is an <a href="https://en.wikipedia.org/wiki/For_loop#Iterator-based_for-loops" rel="nofollow">"iterator-based for-loop"</a></p>
<p><code>n</code> is called the <code>loop variable</code>.</p>
<p>The role that <code>list</code> plays is more troublesome to name.</p>
<p>Indeed, after an interesting conversation with @juanpa.arrivillaga I've concluded that there simply isn't a "clearly correct formal name", nor a commonly used name, for that syntactic element.</p>
<p>That being said, I do think that if you referred to it in context in a sentence as "the loop iterator" everyone would know what you meant.</p>
<p>In doing so, you take the risk of confusing yourself or someone else with the fact that the syntactic element in that position is not in fact an iterator, its a collection or (loosely, but from the definition in the referenced article) an "iterable of some sort".</p>
<p>I suspect that one reason why there isn't a name for this is that we hardly ever have to refer to it in a sentence.  Another is that they types of element that can appear in that position vary widely, so it is hard to safely cover them all with a label. </p>
</div>
<div class="post-text" itemprop="text">
<p>While <code>n</code> is called a <em>loop variable</em> the list is absolutely <strong>not</strong> an iterator. It is iterable object, i.e. and <em>iterable</em>, but it is not an <em>iterator</em>. An iterable may be an iterator itself, but not always. That is to say, iterators are iterable, but not all iterables are iterators. In the case of a <code>list</code> it is simply an iterable. </p>
<p>It is an iterable because it implements an <code>__iter__</code> method, which returns an iterator:</p>
<p>From the <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow">Python Glossary</a> an <strong>iterable</strong> is:</p>
<blockquote>
<p>An object capable of returning its members one at a time. Examples of
  iterables include all sequence types (such as list, str, and tuple)
  and some non-sequence types like dict, file objects, and objects of
  any classes you define with an <code>__iter__()</code> or <code>__getitem__()</code> method.
  Iterables can be used in a for loop and in many other places where a
  sequence is needed (zip(), map(), ...). <strong>When an iterable object is
  passed as an argument to the built-in function <code>iter()</code>, it returns an
  iterator for the object. This iterator is good for one pass over the
  set of values. When using iterables, it is usually not necessary to
  call iter() or deal with iterator objects yourself. The for statement
  does that automatically for you, creating a temporary unnamed variable
  to hold the iterator for the duration of the loop.</strong> </p>
</blockquote>
<p>So, observe:    </p>
<pre><code>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; iterator = iter(x)
&gt;&gt;&gt; type(iterator)
&lt;class 'list_iterator'&gt;
&gt;&gt;&gt; next(iterator)
1
&gt;&gt;&gt; next(iterator)
2
&gt;&gt;&gt; next(iterator)
3
&gt;&gt;&gt; next(iterator)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>It is illuminating to understand that a for-loop in Python such as the following:</p>
<pre><code>for n in some_iterable:
    # do something
</code></pre>
<p>is equivalent to:</p>
<pre><code>iterator = iter(some_iterable)
while True:
    try:
        n = next(iterator)
        # do something
    except StopIteration as e:
        break
</code></pre>
<p>Iterators, which are returned by a call to an object's <code>__iter__</code> method, also implement the <code>__iter__</code> method (usually returning themselves) but they <strong>also</strong> implement a <code>__next__</code> method. Thus, an easy way to check if something is an iterable is to see if it implements a <strong>next</strong> method</p>
<pre><code>&gt;&gt;&gt; next(x)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not an iterator
</code></pre>
<p>Again, from the <a href="https://docs.python.org/3/glossary.html#term-iterator" rel="nofollow">Python Glossary</a>, an <strong>iterator</strong> is:</p>
<blockquote>
<p>An object representing a stream of data. Repeated calls to the
  iteratorâ€™s <code>__next__()</code> method (or passing it to the built-in function
  <code>next()</code>) return successive items in the stream. When no more data are
  available a StopIteration exception is raised instead. At this point,
  the iterator object is exhausted and any further calls to its
  <code>__next__()</code> method just raise StopIteration again. <strong>Iterators are required to have an <code>__iter__()</code> method that returns the iterator object
  itself so every iterator is also iterable and may be used in most
  places where other iterables are accepted. One notable exception is
  code which attempts multiple iteration passes. A container object
  (such as a list) produces a fresh new iterator each time you pass it
  to the iter() function or use it in a for loop. Attempting this with
  an iterator will just return the same exhausted iterator object used
  in the previous iteration pass, making it appear like an empty
  container.</strong></p>
</blockquote>
<p>I've illustrated the bevahior of an iterator with the <code>next</code> function above, so now I want to concentrate on the bolded portion.</p>
<p>Basically, an iterator can be used in the place of an iterable because iterators are always iterable. However, an iterator is good for only a single pass. So, if I use a non-iterator iterable, like a list, I can do stuff like this:</p>
<pre><code>&gt;&gt;&gt; my_list = ['a','b','c']
&gt;&gt;&gt; for c in my_list:
...   print(c)
... 
a
b
c
</code></pre>
<p>And this:</p>
<pre><code>&gt;&gt;&gt; for c1 in my_list:
...   for c2 in my_list:
...     print(c1,c2)
... 
a a
a b
a c
b a
b b
b c
c a
c b
c c
&gt;&gt;&gt; 
</code></pre>
<p>An iterator behaves almost in the same way, so I can still do this:</p>
<pre><code>&gt;&gt;&gt; it = iter(my_list)
&gt;&gt;&gt; for c in it:
...   print(c)
... 
a
b
c
&gt;&gt;&gt; 
</code></pre>
<p>However, iterators do not support multiple iteration (well, you can make your an iterator that does, but generally they do not):</p>
<pre><code>&gt;&gt;&gt; it = iter(my_list)
&gt;&gt;&gt; for c1 in it:
...   for c2 in it:
...     print(c1,c2)
... 
a b
a c
</code></pre>
<p>Why is that? Well, recall what is happening with the iterator protocol which is used by a <code>for</code> loop under the hood, and consider the following:</p>
<pre><code>&gt;&gt;&gt; my_list = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; iterator = iter(my_list)
&gt;&gt;&gt; iterator_of_iterator = iter(iterator)
&gt;&gt;&gt; next(iterator)
'a'
&gt;&gt;&gt; next(iterator)
'b'
&gt;&gt;&gt; next(iterator_of_iterator)
'c'
&gt;&gt;&gt; next(iterator_of_iterator)
'd'
&gt;&gt;&gt; next(iterator)
'e'
&gt;&gt;&gt; next(iterator_of_iterator)
'f'
&gt;&gt;&gt; next(iterator)
'g'
&gt;&gt;&gt; next(iterator)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; next(iterator_of_iterator)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; 
</code></pre>
<p>When I used <code>iter()</code> on an iterator, it returned itself!</p>
<pre><code>&gt;&gt;&gt; id(iterator)
139788446566216
&gt;&gt;&gt; id(iterator_of_iterator)
139788446566216
</code></pre>
</div>
<span class="comment-copy">I've seen  it referred to as an "item". The variable name usually depends on what's being iterated over (e..g <code>for line in file</code>,  <code>for row in rows</code> etc.)</span>
<span class="comment-copy">@linusg  I doubt whether a  basic programming book specifies what we call those elements.  As just one example, <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">this primer on for loops</a> does not name them.</span>
<span class="comment-copy">@GreenAsJade - Agreed, but knowing how a <code>for</code> loop works in Python would be a good start. Later on, he can learn all those fancy names like iterator and so on.</span>
<span class="comment-copy">Thanks for your help all. @ linusg I believe that I do understand how the <code>for</code> loop works, but I'm trying to explain its use to other students in my class, hence it's very useful to be able to give it a distinct name that does not confuse it with other concepts.</span>
<span class="comment-copy">"Loop variable" is common programmer talk, but I don't know if there is an official Python term. Note that in Python there can be multiple loop variables: <code>for n,item in enumerate(a_list)</code>, <code>for k,v in a_dict.items()</code>, <code>for x,y,z in coords_list</code> etc.</span>
<span class="comment-copy">Note: I think you could refer to the list as just "the iterator", but "the loop iterator" is clearer, which is preferable because "iterator" is a heavily overloaded term.</span>
<span class="comment-copy">The list is not the iterator.</span>
<span class="comment-copy">As discussed in the comment to your answer, the list is not a <code>python iterator</code> but nonetheless, it is the <code>loop iterator</code> in this <code>iterator-based for-loop</code> construct.</span>
<span class="comment-copy">I think you are confounding two uses of the unfortunately-overloaded term <code>iterator</code>.  Python has a formal definition of an <code>iterator</code>, and it is true that a list is not one of those.   However, in basic taxonomic terms, a python for loop is a <a href="https://en.wikipedia.org/wiki/For_loop#Iterator-based_for-loops" rel="nofollow noreferrer">iterator-based for-loop</a> . The components of this construct are the <code>loop variable</code> and the (loop) <code>iterator</code>.  It is unfortunate that these different definitions/usages exist... but they do.  And the latter one serves the OP's purpose. You have not provided an alternative in your answer.</span>
<span class="comment-copy">@GreenAsJade I'm sorry, but I still disagree. From your own link: "It is usually characterized by the use of an implicit or explicit iterator, in which the loop variable takes on each of the values in a sequence or other data collection." In the Python for-each construct, the loop-iterator is implicit. The loop variable we agree on, and the list is the sequence or other data collection.</span>
<span class="comment-copy">"usually".  This allows for other situations.   In Python we have the luxury of using a <code>list</code> there also.   I agree that it is not ideal as a terminology clash, but as far as I can see it <i>is</i> the answer to the question.  I am not aware of any other taxonomy for this construct.</span>
<span class="comment-copy">@GreenAsJade Also, if you follow the link to the <a href="https://en.wikipedia.org/wiki/Iterator" rel="nofollow noreferrer">iterator article</a>, it reads: "In computer programming, an iterator is an object that enables a programmer to traverse a container, particularly lists." The iterator is not the container, it is an object that enables traversal.</span>
<span class="comment-copy">Once again: I am not saying  that the list in this constuct is a <code>python iterator</code>.   Clearly it is not.  However, it is playing the role of the <code>iterator</code> in the <code>iterator-based for-loop</code> construct.  This is the <i>name</i> of the <i>role</i> that it is playing.   Python happens to support placing a list in that role.</span>
