<div class="post-text" itemprop="text">
<p>I have a few classes each of which has a number of attributes. What all of the attributes have in common is that they should be numeric properties. This seems to be an ideal place to use python's decorators, but I can't seem to wrap my mind around what the correct implementation would be. Here is a simple example:</p>
<pre><code>class Junk(object):
    def __init__(self, var):
        self._var = var

    @property
    def var(self):
        """A numeric variable"""
        return self._var

    @var.setter
    def size(self, value):
        # need to make sure var is an integer
        if not isinstance(value, int):
            raise ValueError("var must be an integer, var = {}".format(value))
        self._var = value

    @var.deleter
    def size(self):
        raise RuntimeError("You can't delete var")
</code></pre>
<p>It seems to me that it should be possible to write a decorator that does everything so that the above can be transformed into:</p>
<pre><code>def numeric_property(*args, **kwargs):
    ...

class Junk(object):
    def __init__(self, var):
        self._var = var

    @numeric_property
    def var(self):
        """A numeric variable"""
        return self._var
</code></pre>
<p>That way the new <code>numeric_property</code> decorator can be used in many classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>@property</code> is just a special case of Python's <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptor protocol</a>, so you can certainly build your own custom versions. For your case:</p>
<pre><code>class NumericProperty:
    """A property that must be numeric.

    Args:
      attr (str): The name of the backing attribute.

    """

    def __init__(self, attr):
        self.attr = attr

    def __get__(self, obj, type=None):
        return getattr(obj, self.attr)

    def __set__(self, obj, value):
        if not isinstance(value, int):
            raise ValueError("{} must be an integer, var = {!r}".format(self.attr, value))
        setattr(obj, self.attr, value)

    def __delete__(self, obj):
        raise RuntimeError("You can't delete {}".format(self.attr))

class Junk:

    var = NumericProperty('_var')

    def __init__(self, var):
        self.var = var
</code></pre>
<p>In use:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; j = Junk('hi')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/jonrsharpe/test.py", line 29, in __init__
    self.var = var
  File "/Users/jonrsharpe/test.py", line 17, in __set__
    raise ValueError("{} must be an integer, var = {!r}".format(self.attr, value))
ValueError: _var must be an integer, var = 'hi'
&gt;&gt;&gt; j = Junk(1)
&gt;&gt;&gt; del j.var
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/jonrsharpe/test.py", line 21, in __delete__
    raise RuntimeError("You can't delete {}".format(self.attr))
RuntimeError: You can't delete _var
&gt;&gt;&gt; j.var = 'hello'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/jonrsharpe/test.py", line 17, in __set__
    raise ValueError("{} must be an integer, var = {!r}".format(self.attr, value))
ValueError: _var must be an integer, var = 'hello'
&gt;&gt;&gt; j.var = 2
&gt;&gt;&gt; j.var
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Option 1: inherit from <code>property</code></h2>
<p><code>property</code> is a descriptor. See <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">Descriptor HowTo on python.org</a>.</p>
<p>So, can inherit from <code>property</code> and override the relevant methods.</p>
<p>For example, to enforce int on setter:</p>
<pre><code>class numeric_property(property):
    def __set__(self, obj, value):
        assert isinstance(value, int), "numeric_property requires an int"
        super(numeric_property, self).__set__(obj, value)

class A(object):
    @numeric_property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = value
</code></pre>
<p>And now you have integers enforced:</p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.x = 'aaa'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __set__
AssertionError: numeric_property requires an int
</code></pre>
<hr/>
<h2>Option 2: Create a better descriptor</h2>
<p>On the other hand, it may be even better to implement a brand new descriptor which does not inherit from property, which would enable you to define the property in one go.</p>
<p>It would be nicer to have this kind of interface:</p>
<pre><code>class A(object):
    x = numeric_property('_x')
</code></pre>
<p>For that you would implement a descriptor which takes the attribute name:</p>
<pre><code>class numeric_property(object):
    def __init__(self, private_attribute_name, default=0):
        self.private_attribute_name = private_attribute_name
        self.default = default

    def __get__(self, obj, typ):
        if not obj: return self
        return getattr(obj, self.private_attribute_name, self.default)

    def __set__(self, obj, value):
        assert isinstance(value, int), "numeric_property requires an int"
        setattr(obj, self.private_attribute_name, value)
</code></pre>
<hr/>
<p><strong>Disclaimer :)</strong></p>
<p>I would rather not enforce strict typing in Pyhon, because Python is much more powerful without it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may just create a function that does it for you . As simple as it can get, no need to create a custom descriptor:</p>
<pre><code>def numprop(name, privname):
    @property
    def _numprop(self):
        return getattr(self, privname)

    @_numprop.setter
    def _numprop(self, value):
        if not isinstance(value, int):
            raise ValueError("{name} must be an integer, {name} = {}".format(value, name=name))
        setattr(self, privname, value)

    @_numprop.deleter
    def _numprop(self):
        raise RuntimeError("You can't delete var")
    return _numprop


class Junk(object):
    def __init__(self, var):
        self._var = var
    var = numprop("var", "_var")
</code></pre>
</div>
<span class="comment-copy">What would the <code>numeric_property</code> do that <code>property</code> does not do already? Raise an exception if the returned value in not a number? Strict typing is really not Python style. IMO enforcing it in Python makes your code as inflexible as e.g. Java, but still as slow as Python.</span>
<span class="comment-copy">You can certainly do that, read <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html</a></span>
<span class="comment-copy">Why do you want <code>numeric_property </code> to be a decorator at all?  Why not just a function that returns a property, so you just do <code>var = numeric_property('_var')</code> in your class definition?  (You could make it accept the docstring as another argument if you want.)</span>
<span class="comment-copy">you should check for <code>numbers.Integral</code> instead of <code>int</code>, so you can use any numeric type.</span>
<span class="comment-copy">@Daniel that bit's up to the OP, I'm just showing how to implement their logic as a descriptor. FWIW I'd probably also make it a <code>TypeError</code>!</span>
<span class="comment-copy">@Daniel: Or, depending on needs, just call <code>operator.index</code> to convert to a true Python <code>int</code> (or possibly <code>long</code> on Py2), which all <code>numbers.Integral</code> will support, and gets you a predictable exact type.</span>
<span class="comment-copy">@jonrsharpe and that's what you call touch√©.</span>
<span class="comment-copy"><i>"no need to create a descriptor"</i> - you <i>are</i> creating a descriptor, but in an indirect and awkward way</span>
<span class="comment-copy">I believe making a small function is easier, more efficient, and clearer than a custom-made descriptor. No need to start digging into the descriptor protocol. Many know what a property is, not many know about descriptors.</span>
<span class="comment-copy">You're entitled to your opinion, but I disagree that it's easier or clearer (and efficiency isn't a matter of opinion). What you're calling <i>"digging into the descriptor protocol"</i> I'd recast as <i>"knowing what you're doing"</i>. Not to mention that descriptor classes are reusable in a way that functions that return individual properties simply aren't.</span>
<span class="comment-copy">You can reinvent the wheel my friend, and create a custom descriptor and metaclass for pretty much everything. If you know what you're doing you can also recreate <code>type</code> and <code>object</code>. But then again, what is simple for you is not necessarily simple for the OP, else he wouldn't have asked the question.  Regarding efficiency, using the builtins is almost always faster than custom made classes. You can also teach the OP about <code>__slots__</code> and weak references.</span>
<span class="comment-copy">I'll let Raymond Hettinger reply: <i>"Learning about descriptors not only provides access to a larger toolset, it creates a deeper understanding of how Python works and an appreciation for the elegance of its design... Descriptors simplify the underlying C-code and offer a flexible set of new tools for everyday Python programs."</i> But, again, you're entitled to your opinion.</span>
