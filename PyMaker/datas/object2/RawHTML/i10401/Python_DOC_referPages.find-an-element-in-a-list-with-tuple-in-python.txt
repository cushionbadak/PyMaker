<div class="post-text" itemprop="text">
<p>I have a little complicated data and want to find specific element with <em>key</em> tuple. <em>target</em> tuple is a little different from <em>key</em>, because it has an <em>id</em> property. So I cannot use <strong><em>key in target</em></strong>.</p>
<p>So what's the best way to implement smart searching in this case?</p>
<pre><code>targets = [
    {"id": 0, "X": (), "Y": (), "Z": () },
    {"id": 1, "X": (1,), "Y": (5,), "Z": ()},
    {"id": 2, "X": (1,), "Y": (5, 7), "Z": ()},
    {"id": 3, "X": (2,), "Y": (5, 7), "Z": (1,)},
    {"id": 4, "X": (1, 2), "Y": (5, 7), "Z": (1,)},
    {"id": 5, "X": (1, 2), "Y": (5, 7), "Z": (1,3)},
]

key = {"X": (1,), "Y": (5, 7), "Z": ()}
</code></pre>
<p>I want to implement <em>find</em> method to extract expected slot like below.</p>
<pre><code>In []: find(targets, key)
Out[]: {'id': 2, 'X': (1,), 'Y': (5, 7), 'Z': ()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the key-value pairs must match exactly, you can use <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow"><em>Dictionary view objects</em></a> to treat the key-value pairs as <em>sets</em>. You want to find a <a href="https://docs.python.org/2/library/stdtypes.html#set.issubset" rel="nofollow"><em>strict subset</em></a>:</p>
<pre><code>def find(targets, key):
    for target in targets:
        if key.items() &lt; target.items():
            return target
</code></pre>
<p>This finds the <em>first</em> match only.</p>
<p>You could turn this into a one-liner:</p>
<pre><code>next((target for target in targets if key.items() &lt; target.items()), None)
</code></pre>
<p>If you must produce <strong>all</strong> matches, you can replace <code>return</code> with <code>yield</code> in the above method to turn it into a generator, or you could use a list comprehension:</p>
<pre><code>[target for target in targets if key.items() &lt; target.items()]
</code></pre>
<p>The above uses Python 3 syntax. In Python 2, dictionary views are available through the special <code>.viewkeys()</code>, <code>.viewvalues()</code> and <code>.viewitems()</code> methods, so add in <code>view</code> to the method name:</p>
<pre><code>def find(targets, key):
    # Python 2 version
    for target in targets:
        if key.viewitems() &lt; target.viewitems():
            return target
</code></pre>
<p>Demo (on Python 3):</p>
<pre><code>&gt;&gt;&gt; targets = [
...     {"id": 0, "X": (), "Y": (), "Z": () },
...     {"id": 1, "X": (1,), "Y": (5,), "Z": ()},
...     {"id": 2, "X": (1,), "Y": (5, 7), "Z": ()},
...     {"id": 3, "X": (2,), "Y": (5, 7), "Z": (1,)},
...     {"id": 4, "X": (1, 2), "Y": (5, 7), "Z": (1,)},
...     {"id": 5, "X": (1, 2), "Y": (5, 7), "Z": (1,3)},
... ]
&gt;&gt;&gt; key = {"X": (1,), "Y": (5, 7), "Z": ()}
&gt;&gt;&gt; def find(targets, key):
...     for target in targets:
...         if key.items() &lt; target.items():
...             return target
...
&gt;&gt;&gt; find(targets, key)
{'Y': (5, 7), 'X': (1,), 'Z': (), 'id': 2}
&gt;&gt;&gt; next((target for target in targets if key.items() &lt; target.items()), None)
{'Y': (5, 7), 'X': (1,), 'Z': (), 'id': 2}
&gt;&gt;&gt; [target for target in targets if key.items() &lt; target.items()]
[{'Y': (5, 7), 'X': (1,), 'Z': (), 'id': 2}]
</code></pre>
</div>
<span class="comment-copy"><code>(1)</code> is not a tuple; that's just a single integer. The <code>()</code> only groups there, you need a <i>comma</i> to produce a tuple: <code>(1,)</code>.</span>
<span class="comment-copy">There are lots of brute-force ways to do this. What have you tried?</span>
<span class="comment-copy">Have you tried anything yourself yet? This is no different from other 'search for a value in a dictionary* questions, really. The solution is to brute-force (search every value in every dictionary), or build an index you re-use and maintain that maps the other direction.</span>
<span class="comment-copy">If your data is not very large why don't you just brute force it? If the data is very huge you ll have to restructure it anyways...</span>
<span class="comment-copy">@PeterWood: <code>target.items() &lt; key.items()</code> on Python 3, <code>target.viewitems() &lt; key.viewitems()</code> on Python 2. As long as the values are hashable that is (which is the case here).</span>
<span class="comment-copy">Thank you for your comment. I could confirm your code. But find(targets, {"X": (1,), "Y": (7, 5), "Z": ()}) is not working because of "Y"'s values order is different from one. Are there any way to ignore the order?</span>
<span class="comment-copy">@jef: yes, the <code>'Y'</code> tuple has a different order. Order <i>matters</i> in tuples. If you must ignore order, store <code>set</code> or <code>frozenset</code> objects instead of tuples.</span>
<span class="comment-copy">@jef: see <a href="http://pastebin.com/JerxTERt" rel="nofollow noreferrer">pastebin.com/JerxTERt</a> for a <code>set()</code> example.</span>
<span class="comment-copy">@jef: if you <b>must</b> support tuples and these <b>must</b> be matched in any order, you'd have to convert the key to using sets first, then test for each target with the values converted to sets:  <code>key = {k: set(v) for k, v in key.items()}</code> at the top of the function, then <code>if key.items() &lt;= set((k, set(v) for k, v in target.items() if isinstance(v, tuple)):</code> in the loop (replacing the current <code>if</code> test). This is a lot more costly.</span>
