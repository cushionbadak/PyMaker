<div class="post-text" itemprop="text">
<p>I tried to write output file as a CSV file but getting either an error or not the expected result. I am using Python 3.5.2 and 2.7 also.</p>
<p>Getting error in Python 3.5:</p>
<pre><code>wr.writerow(var)
TypeError: a bytes-like object is required, not 'str'
</code></pre>
<p>and </p>
<p>In Python 2.7, I am getting all column result in one column. </p>
<p>Expected Result:<br/>
An output file same format as the input file.</p>
<p>Code:</p>
<pre><code>import csv

f1 = open("input_1.csv", "r") 

resultFile = open("out.csv", "wb")
wr = csv.writer(resultFile, quotechar=',') 

def sort_duplicates(f1):
  for i in range(0, len(f1)):
      f1.insert(f1.index(f1[i])+1, f1[i])
      f1.pop(i+1)

for var in f1:
      #print (var)
      wr.writerow([var]) 
</code></pre>
<p>If I am using <code>resultFile = open("out.csv", "w")</code>, I get one row extra in the output file. </p>
<p>If I am using above code, getting one row and column extra.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have answered that you should open the output file in text mode when using Python 3, i.e.</p>
<pre><code>with open('out.csv', 'w', newline='') as resultFile:
    ...
</code></pre>
<p>But you also need to parse the incoming CSV data. As it is your code reads each line of the input CSV file as a single string. Then, without splitting that line into its constituent fields, it passes the string to the CSV writer. As a result, the <code>csv.writer</code> will treat the string as a sequence and output each <em>character</em> , including any terminating new line character, as a separate field. For example, if your input CSV file contains:</p>
<pre>
1,2,3,4
</pre>
<p>Your output file would be written like this:</p>
<pre>
1,",",2,",",3,",",4,"
"
</pre>
<p>You should change the <code>for</code> loop to this:</p>
<pre><code>for row in csv.reader(f1):
    # process the row
    wr.writerow(row)
</code></pre>
<p>Now the input CSV file will be parsed into fields and <code>row</code> will contain a list of strings - one for each field. For the previous example, <code>row</code> would be:</p>
<pre><code>for row in csv.reader(f1):
    print(row)
</code></pre>
<pre>
['1', '2', '3', '4']
</pre>
<p>And when that list is passed to the <code>csv.writer</code> the output to the file will be:</p>
<pre>
1,2,3,4
</pre>
<hr/>
<p>Putting all of that together you get this code:</p>
<pre><code>import csv

with open('input_1.csv') as f1, open('out.csv', 'w', newline='') as resultFile:
    wr = csv.writer(resultFile, dialect='excel')
    for row in csv.reader(f1):
        wr.writerow(row)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3, <code>csv</code> <em>requires</em> that you open the file in text mode, not binary mode. Drop the <code>b</code> from your file mode. You should really use <code>newline=''</code> too:</p>
<pre><code>resultFile = open("out.csv", "w", newline='')
</code></pre>
<p>Better still, use the file object as a context manager to ensure it is closed automatically:</p>
<pre><code>with open("input_1.csv", "r") as f1, \
     open("out.csv", "w", newline='') as resultFile:
    wr = csv.writer(resultFile, dialect='excel')
    for var in f1:
        wr.writerow([var.rstrip('\n')])
</code></pre>
<p>I've also <em>stripped</em> the lines from <code>f1</code> (just to remove the newline) and put the line in a list; <code>csv.writer.writerow</code> wants a sequence with columns, not a single string.</p>
<p>Quoting the <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow"><code>csv.writer()</code> documentation</a>:</p>
<blockquote>
<p>If <em>csvfile</em> is a file object, it should be opened with <code>newline=''</code> [1]. <em>[...]</em> All other non-string data are stringified with <code>str()</code> before being written.</p>
<p>[1] If <code>newline=''</code> is not specified, newlines embedded inside quoted fields will not be interpreted correctly, and on platforms that use <code>\r\n</code> linendings on write an extra <code>\r</code> will be added. It should always be safe to specify <code>newline=''</code>, since the csv module does its own (<a href="https://docs.python.org/3/glossary.html#term-universal-newlines" rel="nofollow">universal</a>) newline handling.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>open file without b mode</p>
<p>b mode open your file as binary</p>
<p>you can open file as w</p>
<pre><code>open_file = open("filename.csv", "w")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are opening the input file in normal read mode but the output file is opened in binary mode, correct way</p>
<pre><code>resultFile = open("out.csv", "w")
</code></pre>
<p>As shown above if you replace "wb" with "w" it will work.</p>
</div>
<span class="comment-copy">You're opening the out file in binary mode. Just remove the <code>b</code> from the <code>open("out.csv", "wb")</code>.</span>
<span class="comment-copy">@Sevanteri: I tried but getting one row is extra in result file</span>
<span class="comment-copy">Hi All, Now I getting expected result. Thank you all :)</span>
<span class="comment-copy">@krish, can you mark this as the accepted answer to help others ?</span>
<span class="comment-copy">Typically newline is required on windows or you have blank lines inserted after each lines because of the added CR chars</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre: and for any other platform where <code>\n</code> is not the default newline character (as the <code>\n</code> character is going to be replaced on any of those).</span>
<span class="comment-copy">@Martijn Pieters: I used newline but getting each letter is separate column</span>
<span class="comment-copy">@krish: updated; you can't pass in a single string, as that'll be seen as a row with columns (each letter a separate column). I've put it in a <i>list</i> here.</span>
<span class="comment-copy">@Martijn Pieters: thanks, now getting expected result :)</span>
<span class="comment-copy">While opening without b, I getting one row blank in result file.</span>
