<div class="post-text" itemprop="text">
<p>Prompt: Write a program that adds all the digits in an integer. If the resulting sum is more than one digit, keep repeating until the sum is one digit. For example, the number 2345 has the sum <code>2+3+4+5 = 14</code> which is not a single digit so repeat with <code>1+4 = 5</code> which is a single digit.</p>
<p>This is the code I have so far. It works out for the first part, but I can't figure out how to make it repeat until the sum is a single digit. I'm pretty sure I'm supposed to nest the code I already have with another <code>while</code> statement</p>
<pre><code>n = int(input("Input an integer:"))
sum_int=0  
while float(n)/10 &gt;= .1:   
    r= n%10
    sum_int += r
    n= n//10   
    if float(n)/10 &gt; .1: print(r,  end= " + ") 
    else: print(r,"=",sum_int)
</code></pre>
<p>this is a sample output of the code</p>
<p>Input an integer: 98765678912398</p>
<p>8 + 9 + 3 + 2 + 1 + 9 + 8 + 7 + 6 + 5 + 6 + 7 + 8 + 9 = 88</p>
<p>8 + 8 = 16</p>
<p>1 + 6 = 7</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work, no division involved.</p>
<pre><code>n = int(input("Input an integer:"))
while n &gt; 9:
    n = sum(map(int, str(n)))
print(n)
</code></pre>
<p>It basically converts the integer to a string, then sums over the digits using a list comprehension and continues until the number is no greater than 9.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try this solution, 
if n=98 then your output will be 8</p>
<pre><code>def repitative_sum(n):
    j=2
    while j!=1:
        n=str(n)
        j=len(n)
        n=list(map(int,n))
        n=sum(n)
    print(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to convert your integer to a float here; just use the <a href="https://docs.python.org/3/library/functions.html#divmod" rel="nofollow"><code>divmod()</code> function</a> in a loop:</p>
<pre><code>def sum_digits(n):
    newnum = 0
    while n:
        n, digit = divmod(n, 10)
        newnum += digit
    return newnum
</code></pre>
<p>By making it a function you can more easily use it to repeatedly apply this to a number until it is smaller than 10:</p>
<pre><code>n = int(input("Input an integer:"))
while n &gt; 9:
    n = sum_digits(n)

print(n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could utilize recursion.</p>
<p>Try this:</p>
<pre><code>def sum_of_digits(n):
    s = 0

    while n:
        s += n % 10
        n //= 10

    if s &gt; 9:
        return sum_of_digits(s)

    return s

n = int(input("Enter an integer: "))
print(sum_of_digits(n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure if it's anti-practice in Python because I know nothing about the language, but here is my solution.</p>
<pre><code>n = int(input("Input an integer:"))

def sum_int(num):
    numArr = map(int,str(num))
    number = sum(numArr)
    if number &lt; 10:
        print(number)
    else:
        sum_int(number)

sum_int(n)
</code></pre>
<p>Again I am unsure about the recursion within a function in Python, but hey, it works :)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you like <strong>recursion</strong>, and you must:</p>
<pre><code>&gt;&gt;&gt; def sum_digits_rec(integ):
        if integ &lt;= 9:
            return integ
        res = sum(divmod(integ, 10)) 
        return sum_digits(res)

&gt;&gt;&gt; print(sum_digits_rec(98765678912398))
7
</code></pre>
</div>
<span class="comment-copy">Seems like an excellent opportunity to use recursion.</span>
<span class="comment-copy">use an if statement and <code>len()</code></span>
<span class="comment-copy">Why are you having your program do all that arithmetic? Turn a number into a string, then turn each character into a digit.</span>
<span class="comment-copy">For the termination condition: what can be said about the <i>numeric value</i> of a 'single decimal digit'? How can this be used in context? This can, and probably should, be solved without the use of floats or strings.</span>
<span class="comment-copy">no more one digit like this? while n&gt;9</span>
<span class="comment-copy">You don't strictly need to send a list to <code>sum</code> - if you remove the brackets, it'll be a generator. Or, since the function you're mapping to is a built-in, you can just use <code>n = sum(map(int, str(n)))</code>.</span>
<span class="comment-copy"><i>"You need to"</i> is put too strong: an iterative solution is also possible, and as this is a case of tail recursion, it is quite straightforward without recursion.</span>
<span class="comment-copy">You are right, I adjusted the text accordingly</span>
