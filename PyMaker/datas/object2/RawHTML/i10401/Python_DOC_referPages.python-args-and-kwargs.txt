<div class="post-text" itemprop="text">
<p>I have seen the previous stack overflow posts on this topic, but I am still unable to create use these two commands when I try to run my function. I have coded a demo example of a simple moving average that I would like to run through the args,kwargs command.</p>
<pre><code>import numpy as np
def moving_average(data,lookback=7,SMA=True): #MA function
    if SMA==True:
        weights=np.repeat(1.0,lookback)/lookback
        smas=np.convolve(data,weights,'valid')
        return smas
</code></pre>
<p>Just running this function works as expected.</p>
<pre><code>data=np.random.randn(100) #randomly 
moving_average(data,lookback=7,SMA=True) #this outputs the correct set of numbers
</code></pre>
<p>However the second I try to add args and kwargs it breaks down.</p>
<pre><code>def test1(*args,**kwargs):
    return moving_average(data,lookback,SMA)
test1(data,lookback=7,SMA=True) #this returns an error, saying my global lookback is not defined
</code></pre>
<p>What exactly in the *args **kwargs logic am I getting wrong? Ive tried inputting both a tuple and a dictionary but neither of those seem to work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass the <code>*args</code> and <code>**kwargs</code> to your function not the argument(s) and named argument(s):</p>
<pre><code>def test1(*args,**kwargs):
    return moving_average(*args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your example using *args and **kwargs:</p>
<pre><code>def test1(*args,**kwargs):
    return moving_average(data,lookback,SMA)
</code></pre>
<p><code>data</code>, <code>lookback</code> and <code>SMA</code> are no longer defined. It could be:</p>
<pre><code>def test1(*args, **kwargs):
    return moving_average(args[0], kwargs['lookback'], kwargs['SMA'])
</code></pre>
<p>or</p>
<pre><code>def test1(*args, **kwargs):
    return moving_average(*args, **kwargs)
</code></pre>
<p>The Python tutorial has a section that might help: <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">Unpacking Argument Lists</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def test1(*args,**kwargs):
</code></pre>
<p>Your function now has two local variables, <code>args</code> and <code>kwargs</code>. One holds the positional arguments that were passed in (as a tuple), the other the keyword arguments (as a dictionary).</p>
<pre><code>return moving_average(data,lookback,SMA)
</code></pre>
<p>Here you use three variable names (data, lookback and SMA) that don't exist in your function, so you get an error.</p>
<p>You could have done</p>
<pre><code>return moving_average(args[0], kwargs['lookback'], kwargs['SMA'])
</code></pre>
<p>But then your test1 function will only work with an exact call like <code>test1(data,lookback=7,SMA=True)</code>. A call like <code>test1(data, 7, True)</code> won't work, as then the parameters are all in <code>args</code>, none in <code>kwargs</code>).</p>
<p>Your function could also pass on the parameters exactly as it received them:</p>
<pre><code>return moving_average(*args, **kwargs)
</code></pre>
<p>That works, but there's no benefit to the <code>test1</code> function, it just calls <code>moving_average</code> and returns its results, why not call <code>moving_average</code> directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can understand args and kwargs in python at PyMentor. Hope it helps you understand.
<a href="http://pymentor.in/understand-args-kwargs-python/" rel="nofollow noreferrer">http://pymentor.in/understand-args-kwargs-python/</a></p>
</div>
<span class="comment-copy">That's... not what args and kwargs is for. If you know the argument names, and you just want to pass them on, why do you want to use args/kwargs?</span>
