<div class="post-text" itemprop="text">
<p>Here is my code and error message, anyone have any ideas why there are such exception? Thanks.</p>
<p><strong>Source Code</strong>,</p>
<pre><code>import sys
import tensorflow as tf

def main(argv):
  print 'in main'
def f():
    # this method will call def main(argv)
    try:
        tf.app.run()
    except:
        print "tf.app.run error ", sys.exc_info()

if __name__ == "__main__":
    f()
</code></pre>
<p><strong>Error Code</strong>,</p>
<pre><code>in main
tf.app.run error  (&lt;type 'exceptions.SystemExit'&gt;, SystemExit(), &lt;traceback object at 0x10fa33f38&gt;)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is expected behavior: <a href="https://github.com/tensorflow/tensorflow/blob/4f9a3a4def1d0e0bcc0c2ca4cd06d993024fd469/tensorflow/python/platform/app.py#L26" rel="nofollow"><code>tf.app.run()</code></a> passes the result of <code>main()</code> to <a href="https://docs.python.org/2/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit()</code></a> (to make it easier to set an edit code), and <code>sys.exit()</code> raises an <a href="https://docs.python.org/2/library/exceptions.html#exceptions.SystemExit" rel="nofollow"><code>exceptions.SystemExit</code></a> exception.</p>
<p>It's important to mention that using <code>tf.app.run()</code> is <strong>completely optional</strong>. Many TensorFlow scripts include it because it is more compatible with the Google Python coding style. However, if you need to customize the logic in your script, you are free to omit <code>tf.app.run()</code>. (The same applies to <code>tf.app.flags</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>It's coming from the <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit()</code></a> call, about which the following is said:</p>
<blockquote>
<p>Since exit() ultimately “only” raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted.</p>
</blockquote>
<p>In your case, <code>sys.exit</code> seems to be called from the function <a href="https://github.com/tensorflow/tensorflow/blob/f6990bffe06ac38f6cc4595eade32f0e0af4113d/tensorflow/python/platform/app.py#L30" rel="nofollow"><code>run()</code></a> unconditionally, so avoid intercepting <code>SystemExit</code>. </p>
<p>If you want to handle all kinds of application-relevant exception, try catching <code>Exception</code> instead of the bare <code>except</code>, since <a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="nofollow"><code>SystemExit</code></a>:</p>
<blockquote>
<p>...inherits from BaseException instead of Exception so that it is not accidentally caught by code that catches Exception. This allows the exception to properly propagate up and cause the interpreter to exit.</p>
</blockquote>
</div>
<span class="comment-copy">This is why you should <b>never</b> use a bare <code>except:</code> clause. It catches <i>all</i> exceptions, including those that are used to terminate your program. So if your code in some place has to fail and stop, the <code>except</code> will prevent it from doing so. If you use <code>except Exception:</code> instead it will not catch such exceptions.</span>
<span class="comment-copy">Thanks mrry, is that an error I should handle? Name <code>exceptions</code> sounds to me something wrong and output such stuff seems not very elegant?</span>
<span class="comment-copy">I doubt that you'd want to handle it, since it is only raised at the end of <code>main()</code>.</span>
<span class="comment-copy">Thanks mrry, is there something special of <code>tf.app.run</code>? I write a lot of Python script and execute <code>__main__</code> from beginning to complete does not see it raising ` exceptions.SystemExit` exception.</span>
<span class="comment-copy">Yes, this behavior is specific to <code>tf.app.run()</code>. Note that you do <b>not</b> need to start your script with <code>tf.app.run()</code> to use TensorFlow; it's just a convention that makes it easier for Google developers to use the same scripts inside and outside the Google codebase.</span>
<span class="comment-copy"><code>tf.app.run()</code> does not support running code after <code>main()</code> returns (other than by catching the <code>SystemExit</code> exception, which is undocumented behavior). Fortunately you <b>do not need to call <code>tf.app.run()</code></b> to use TensorFlow, so you are free to structure your script however you like.</span>
<span class="comment-copy">Thanks bereal, is that an error I should handle? Name <code>exceptions</code> sounds to me something wrong and output such stuff seems not very elegant?</span>
<span class="comment-copy">@LinMa no, you should not handle it, unless you want to do something else after the called application exits.</span>
<span class="comment-copy">Thanks bereal, is there something special of <code>tf.app.run</code>? I write a lot of Python script and execute <code>__main__</code> from beginning to complete does not see it raising ` exceptions.SystemExit` exception.</span>
<span class="comment-copy">BTW, there is issues if I need to run any code after <code>tf.app.run()</code>, since <code>tf.app.run()</code> will make interpreter to exit, any ideas how to handle it? Thanks.</span>
<span class="comment-copy">Then intercept it and reraise later if needed, or preferably use other API tensorflow exposes (which I'm sure it does, but have no experience with it).</span>
