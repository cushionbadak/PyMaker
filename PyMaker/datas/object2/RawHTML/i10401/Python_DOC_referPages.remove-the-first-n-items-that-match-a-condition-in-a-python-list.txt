<div class="post-text" itemprop="text">
<p>If I have a function <code>matchCondition(x)</code>, how can I remove the first <code>n</code> items in a Python list that match that condition?</p>
<p>One solution is to iterate over each item, mark it for deletion (e.g., by setting it to <code>None</code>), and then filter the list with a comprehension. This requires iterating over the list twice and mutates the data.  Is there a more idiomatic or efficient way to do this?</p>
<pre><code>n = 3

def condition(x):
    return x &lt; 5

data = [1, 10, 2, 9, 3, 8, 4, 7]
out = do_remove(data, n, condition)
print(out)  # [10, 9, 8, 4, 7] (1, 2, and 3 are removed, 4 remains)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way using <a href="https://docs.python.org/3/library/itertools.html#itertools.filterfalse"><code>itertools.filterfalse</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.count"><code>itertools.count</code></a>:</p>
<pre><code>from itertools import count, filterfalse

data = [1, 10, 2, 9, 3, 8, 4, 7]
output = filterfalse(lambda L, c=count(): L &lt; 5 and next(c) &lt; 3, data)
</code></pre>
<p>Then <code>list(output)</code>, gives you:</p>
<pre><code>[10, 9, 8, 4, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Write a generator that takes the iterable, a condition, and an amount to drop.  Iterate over the data and yield items that don't meet the condition.  If the condition is met, increment a counter and don't yield the value.  Always yield items once the counter reaches the amount you want to drop.</p>
<pre><code>def iter_drop_n(data, condition, drop):
    dropped = 0

    for item in data:
        if dropped &gt;= drop:
            yield item
            continue

        if condition(item):
            dropped += 1
            continue

        yield item

data = [1, 10, 2, 9, 3, 8, 4, 7]
out = list(iter_drop_n(data, lambda x: x &lt; 5, 3))
</code></pre>
<p>This does not require an extra copy of the list, only iterates over the list once, and only calls the condition once for each item.  Unless you actually want to see the whole list, leave off the <code>list</code> call on the result and iterate over the returned generator directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer was a little too magical for my liking.  Here's one where the flow is hopefully a bit clearer to follow:</p>
<pre><code>def matchCondition(x):
    return x &lt; 5


def my_gen(L, drop_condition, max_drops=3):
    count = 0
    iterator = iter(L)
    for element in iterator:
        if drop_condition(element):
            count += 1
            if count &gt;= max_drops:
                break
        else:
            yield element
    yield from iterator


example = [1, 10, 2, 9, 3, 8, 4, 7]

print(list(my_gen(example, drop_condition=matchCondition)))
</code></pre>
<p>It's similar to logic in <a href="https://stackoverflow.com/a/39580319/674039">davidism</a> answer, but instead of checking the drop count is exceeded on every step, we just short-circuit the rest of the loop.</p>
<p><em>Note:</em> If you don't have <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer"><code>yield from</code></a> available, just replace it with another for loop over the remaining items in <code>iterator</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If mutation is required:</p>
<pre><code>def do_remove(ls, N, predicate):
    i, delete_count, l = 0, 0, len(ls)
    while i &lt; l and delete_count &lt; N:
        if predicate(ls[i]):
           ls.pop(i) # remove item at i
           delete_count, l = delete_count + 1, l - 1 
        else:
           i += 1
    return ls # for convenience

assert(do_remove(l, N, matchCondition) == [10, 9, 8, 4, 7])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Straightforward Python:</p>
<pre><code>N = 3
data = [1, 10, 2, 9, 3, 8, 4, 7]

def matchCondition(x):
    return x &lt; 5

c = 1
l = []
for x in data:
    if c &gt; N or not matchCondition(x):
        l.append(x)
    else:
        c += 1

print(l)
</code></pre>
<p>This can easily be turned into a generator if desired:</p>
<pre><code>def filter_first(n, func, iterable):
    c = 1
    for x in iterable:
        if c &gt; n or not func(x):
            yield x
        else:
            c += 1

print(list(filter_first(N, matchCondition, data)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehensions:</p>
<pre><code>n = 3
data = [1, 10, 2, 9, 3, 8, 4, 7]
count = 0
def counter(x):
    global count
    count += 1
    return x

def condition(x):
    return x &lt; 5

filtered = [counter(x) for x in data if count &lt; n and condition(x)]
</code></pre>
<p>This will also stop checking the condition after <em>n</em> elements are found thanks to boolean short-circuiting.</p>
</div>
<span class="comment-copy">@wcarroll for python 2.x it is <code>ifilterfalse</code></span>
<span class="comment-copy">@JonClements Just out of curiosity, is using keyword arguments (i.e. <code>c=count())</code> within the lambda function signature the preferred way to create local variables within the lambda expression?</span>
<span class="comment-copy">@wcarroll it's not remarkably pleasant - but for something like this it keeps scope to something relevant...</span>
<span class="comment-copy">It would be nice if we don't have to keep checking the [first] condition each and every time once the max drop count is exceeded.</span>
<span class="comment-copy">I've never heard of <code>filterfalse</code> - why use it instead of the built-in <code>filter</code> with a negated condition (in this case, <code>L &gt;= 5 or next(c) &gt;= 3</code>)?  Doesn't the existence of <code>filterfalse</code> break Python's golden rule, "There's only one correct way to do anything"?</span>
<span class="comment-copy">Note that the complexity of this approach is O(N * len(ls)), which is far from optimal.</span>
<span class="comment-copy">No need for the <code>counter</code> function, Python already has that built in: <code>filtered = (x for i, x in enumerate(data) if i &gt; n or condition(x))</code></span>
<span class="comment-copy">That doesn't quite work because <code>enumerate</code> will iterate over the indexes but this needs to keep track of the number of elements that have already met the condition.</span>
