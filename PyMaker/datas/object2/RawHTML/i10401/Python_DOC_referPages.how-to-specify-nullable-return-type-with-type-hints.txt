<div class="post-text" itemprop="text">
<p>Suppose I have a function:</p>
<pre><code>def get_some_date(some_argument: int=None) -&gt; %datetime_or_None%:
    if some_argument is not None and some_argument == 1:
        return datetime.utcnow()
    else:
        return None
</code></pre>
<p>How do I specify the return type for something that can be <code>None</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/typing.html#typing.Optional" rel="noreferrer"><code>Optional</code></a>.</p>
<p>Since your return type can either be <code>datetime</code> (as returned from <code>datetime.utcnow()</code>) or <code>None</code> you should use <code>Optional[datetime]</code>:</p>
<pre><code>from typing import Optional

def get_some_date(some_argument: int=None) -&gt; Optional[datetime]:
    # as defined
</code></pre>
<p>From the documentation on typing, <code>Optional</code> is shorthand for:</p>
<blockquote>
<p><code>Optional[X]</code> is equivalent to <code>Union[X, None]</code>.</p>
</blockquote>
<p>where <code>Union[X, Y]</code> means a value of type <code>X</code> or <code>Y</code>.</p>
<hr/>
<p>If you want to be explicit due to concerns that others might stumble on <code>Optional</code> and not realize it's meaning, you could always use <code>Union</code>:</p>
<pre><code>from typing import Union

def get_some_date(some_argument: int=None) -&gt; Union[datetime, None]:
</code></pre>
<p>But I doubt this is a good idea, <code>Optional</code> is an indicative name and it does save a couple of keystrokes.</p>
<p><sub>As pointed out in the comments by @Michael0x2a <code>Union[T, None]</code> is tranformed to <code>Union[T, type(None)]</code> so no need to use <code>type</code> here.</sub></p>
<p>Visually these might differ but programatically, in both cases, the result is <em>exactly the same</em>; <code>Union[datetime.datetime, NoneType]</code> will be the type stored in <code>get_some_date.__annotations__</code><sup>*</sup>:</p>
<pre><code>&gt;&gt;&gt; from typing import get_type_hints
&gt;&gt;&gt; print(get_type_hints(get_some_date))
{'return': typing.Union[datetime.datetime, NoneType],
 'some_argument': typing.Union[int, NoneType]}
</code></pre>
<p><sup>*</sup>Use <code>typing.get_type_hints</code> to grab the objects' <code>__annotations__</code> attribute instead of accessing it directly.</p>
</div>
<span class="comment-copy">You can simplify <code>Union[datetime, type(None)]</code> to <code>Union[datetime, None]</code> -- according to <a href="https://www.python.org/dev/peps/pep-0484/#using-none" rel="nofollow noreferrer">PEP 484</a>, using <code>None</code> within a type annotation is always treated as being equivalent to <code>type(None)</code>. (The <code>typing</code> documentation actually uses <code>None</code> in most cases, but doesn't here, which is an oversight).</span>
<span class="comment-copy">@Michael0x2a didn't know that, interesting. Added it :)</span>
<span class="comment-copy">I went ahead and submitted <a href="http://bugs.python.org/issue28073" rel="nofollow noreferrer">a patch</a> to fix this just now, so hopefully the docs will be more consistent about this in the near future!</span>
