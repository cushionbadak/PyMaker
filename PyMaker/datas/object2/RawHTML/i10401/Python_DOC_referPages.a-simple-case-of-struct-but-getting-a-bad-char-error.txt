<div class="post-text" itemprop="text">
<p>I'm attempting to read a section of a binary file, and decode it as a string of characters using the struct. module. </p>
<p>It's a simple enough case. Here is the bytes argument:</p>
<pre><code>b'11:10:00\x00ng '
</code></pre>
<p>and here is the function I am attempting to use: </p>
<pre><code>struct.unpack('utf-8', b'11:10:00\x00ng ')
</code></pre>
<p>The output should be twelve characters, no?:</p>
<pre><code>'11:10:00 ng '
</code></pre>
<p>It returns <code>"struct.error bad char in struct format"</code> for some reason. What's going on? I tried a lot of resources but nobody had an example of this happening. I've tried other formats besides <code>'utf-8'</code>, such as <code>'ascii'</code>.</p>
<p>edit - there seems to be confusion; maybe i should have given my problem in less general terms: </p>
<p>I am attempting to write a command that will decode a bytes object created using f.read, in a variable format, and I tried to do it this way: </p>
<p>Value = struct.unpack(Format, Bytes)[0]</p>
<p>where
Bytes = f.read(Length)
and
Format = 'i' 
or 'd' or whatever it needs to be. </p>
<p>What I tried worked great for the case of an integer ('i') but did not work for the case of a string of characters - I got the error instead, and I'm trying to figure out why. Thanks for any help!</p>
<p>edit2 - for anyone coming after me, it looks like this is simply not possible to handle in python with a single function, because the struct.unpack function doesn't handle unicode strings and the decode. function doesn't handle encoded numbers. The only way to do what I need to do appears to be to use an if: to apply the proper function for the format</p>
</div>
<div class="post-text" itemprop="text">
<h1>EDIT</h1>
<ol>
<li>no <code>"i"</code> is not a valid encoding to use <code>str.decode</code>
<ul>
<li>see <a href="https://docs.python.org/2/library/codecs.html#standard-encodings" rel="nofollow">https://docs.python.org/2/library/codecs.html#standard-encodings</a></li>
</ul></li>
<li>no <code>"utf-8"</code> is not a valid format string to pass to <code>struct.unpack</code>
<ul>
<li>see <a href="https://docs.python.org/3/library/struct.html#format-characters" rel="nofollow">https://docs.python.org/3/library/struct.html#format-characters</a></li>
</ul></li>
</ol>
<h1>old anser ...</h1>
<p><code>struct.unpack</code> is not the right tool to use here</p>
<pre><code>b'11:10:00\x00ng '.decode("utf8")
b'+\r\x00\x00'.decode("utf8")
</code></pre>
<p>you simply want to decode the bytes to a unicode string I believe</p>
<p>if you want to <code>struct.unpack</code> a string you can ... but its just unpacking a bytestring</p>
<pre><code>fmt = "bb5s" #2 bytes and a string of length 5
struct.unpack(fmt,b"\x00\x12\x33\x43\x55\x77\x65")

#result: (0, 18, b'3CUwe')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The struct module does a completely different job from what you're trying to do. It's for deserializing data that looks like serialized C structs (hence the name). <code>int</code>s, <code>double</code>s, fixed-size <code>char</code> arrays, things like that, packed together in a rigid layout with fixed alignment and padding. If you look at the <a href="https://docs.python.org/2/library/struct.html" rel="nofollow">docs</a>, you'll see nothing related to Unicode codecs, and the format string argument format looks nothing like a codec name.</p>
<p>You want the built-in bytestring <code>decode</code> method, which does Unicode decoding:</p>
<pre><code>b'11:10:00\x00ng '.decode('utf-8')
</code></pre>
<p>though that <code>\x00</code> will still be a Unicode NUL, not a space, because Unicode doesn't work like that.</p>
</div>
<span class="comment-copy"><code>struct.unpack('utf-8', ...</code> - hold on. What the heck do you think <code>struct.unpack</code> does?</span>
<span class="comment-copy">for example, struct.unpack('i', b'+\r\x00\x00') unpacks the bytes object as an integer, 3371.</span>
<span class="comment-copy">in this case, however, I need to unpack it as ascii characters. I don't understand what you're getting at.</span>
<span class="comment-copy">the thing is, that won't work for the example of b'+\r\x00\x00' which is in the integer format. I get the error "unknown encoding 'i'"</span>
<span class="comment-copy">what? you make no sense ... thats not the string you showed and there is no encoding i involved... <a href="http://ideone.com/29Pn3B" rel="nofollow noreferrer">ideone.com/29Pn3B</a></span>
<span class="comment-copy">see my edit - I have an arbitrary bytes string encoded in a variable fashion, and I need a single line which can handle the case of a string of characters, like  b'11:10:00\x00ng ', or also an integer, like b'+\r\x00\x00'</span>
<span class="comment-copy">@Nate you're asking for two different things, getting a string from bytes and getting an int from bytes. The procedures for the two are very different. You aren't going to get a single statement that can handle them interchangeably.</span>
<span class="comment-copy">It could be that there just isn't that functionality in the struct. module, but I wouldn't know!</span>
<span class="comment-copy">So, am I right in saying that I simply can't handle the cases I am trying to handle with a single function? struct.unpack works fine for integer/float formats, I know, but it doesn't work with unicode strings.  decode on the other hand doesn't work with integers etc, but will decode strings. I know what they are for, I was just trying to find a way to handle all of these cases without if/then loops.</span>
<span class="comment-copy">@Nate: Unicode encoding/decoding is simply not part of the task the <code>struct</code> module was designed for. It was designed for structs.</span>
<span class="comment-copy">thank you. i'm a chemist, not a programmer, and so my fundamentals are pretty weak. I wouldn't have known what a struct is, or the difference between 'i' and 'utf8' as formats for a bytestring. I'm actually only doing this to decode a proprietary format for IR spectra, but I'm having success so far.</span>
