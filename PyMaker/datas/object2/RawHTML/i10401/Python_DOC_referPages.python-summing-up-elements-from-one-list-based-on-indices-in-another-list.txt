<div class="post-text" itemprop="text">
<p>So here is what I am trying to achieve in Python:</p>
<ul>
<li>I have a list "A" with unsorted and repeated indices. </li>
<li>I have a list "B" with some float values</li>
<li>Length A = Length B</li>
<li>I want list "C" with summed values of B based on the repeated indices in A in a sorted ascending manner.</li>
</ul>
<p>Example:</p>
<p><code>A=[0 , 1 , 0 , 3 , 2 , 1 , 2] (indicates unsorted and repeated indices)</code></p>
<p><code>B=[25 , 10 , 15 , 10 , 5 , 30 , 50] (values to be summed)</code></p>
<p><code>C=[25+15 , 10+30 , 5+50 , 15] (summed values in a sorted manner)</code></p>
<p>So far I know how to do the sorting bit with:</p>
<p><code>C= zip(*sorted(zip(A, B)))</code></p>
<p>Getting the result:</p>
<p><code>[(0, 0, 1, 1, 2, 2, 3), (15, 25, 10, 30, 5, 50, 10)]</code></p>
<p>But I do not know how to do the sum.</p>
<p>What would be a good way to create list C?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>zip()</code> in combination with a <code>dict</code>:</p>
<pre><code>A = [0 , 1 , 0 , 3 , 2 , 1 , 2] 
B = [25 , 10 , 15 , 10 , 5 , 30 , 50]

sums = {}
for key, value in zip(A,B):
    try:
        sums[key] += value
    except KeyError:
        sums[key] = value
print(sums)
# {0: 40, 1: 40, 2: 55, 3: 10}
</code></pre>
<p>And see <a href="http://ideone.com/OxbT5s" rel="nofollow"><strong>a demo on ideone.com</strong></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">groupby</a>, if the order matters:</p>
<pre><code>In [1]: A=[0 , 1 , 0 , 3 , 2 , 1 , 2]

In [2]: B=[25 , 10 , 15 , 10 , 5 , 30 , 50]

In [3]: from itertools import groupby

In [4]: from operator import itemgetter

In [5]: C = [sum(map(itemgetter(1), group))
   ...:      for key, group in groupby(sorted(zip(A, B)),
   ...:                                key=itemgetter(0))]

In [6]: C
Out[6]: [40, 40, 55, 10]
</code></pre>
<p>or <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>defaultdict(float)</code></a>, if it does not:</p>
<pre><code>In [10]: from collections import defaultdict

In [11]: res = defaultdict(float)

In [12]: for k, v in zip(A, B):
    ...:     res[k] += v
    ...:     

In [13]: res
Out[13]: defaultdict(float, {0: 40.0, 1: 40.0, 2: 55.0, 3: 10.0})
</code></pre>
<p>Note that <code>dict</code>s in python are unordered (you are not to trust any CPython implementation details).</p>
</div>
<div class="post-text" itemprop="text">
<p>It is actually a bit unclear what you want, but if you want them to be <em>indexed</em> by whatever the number is, you shouldn't even use a list, but a Counter instead:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; A = [0, 1, 0, 3, 2, 1, 2]
&gt;&gt;&gt; B = [25, 10, 15, 10 , 5, 30, 50]
&gt;&gt;&gt; for k, v in zip(A, B):
...     c[k] += v
...
&gt;&gt;&gt; c
Counter({2: 55, 0: 40, 1: 40, 3: 10})
&gt;&gt;&gt; c[0]
40
</code></pre>
<p>If you really want a list, you can use</p>
<pre><code>&gt;&gt;&gt; [i[1] for i in sorted(c.items())]
</code></pre>
<p>but then any missing key would cause the rest of the values show up upper, which might or might not be that what you wanted.</p>
</div>
<span class="comment-copy">Could you add the code you have tried so far?</span>
<span class="comment-copy">Sorry, I have edited the message including this</span>
