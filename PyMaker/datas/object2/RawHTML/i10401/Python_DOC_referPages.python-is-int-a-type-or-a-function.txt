<div class="post-text" itemprop="text">
<p>I did this in Python 3.4:</p>
<pre><code>&gt;&gt;&gt; type(int)
&lt;class 'type'&gt;
&gt;&gt;&gt; int(0)
0
</code></pre>
<p>Now I am wondering what int actually is. Is it a type, or is it a function? Is it both? If it is both, is it also true that all types can be called like functions?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>int</code> is a <strong><a href="https://docs.python.org/3.5/tutorial/classes.html">class</a></strong>. The type of a class is usually <code>type</code>.</p>
<p>And yes, <em>almost</em> all classes can be called like functions. You create what's called an <strong>instance</strong> which is an object that behaves as you defined in the class. They can have their own functions and have special attributes.</p>
<p>(<code>type</code> is also a class if you're interested but it's a special class. It's a bit complicated but you can read more on it if you'll search for metaclasses)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>int</code> is a built-in class/type:</p>
<pre><code>&gt;&gt;&gt; isinstance(int, type)
True
</code></pre>
<hr/>
<p>When you invoke <code>int('123')</code>, Python finds out that <code>int</code> itself is nota function, but then attempts to call <code>int.__call__('123')</code>; this itself resolves to  <code>type.__dict__['__call__']</code>; this is called with <code>(int, '123')</code> as arguments. The default <code>__call__</code> implementation of <code>type</code> tries to construct a new object of the type given as the first argument (here <code>int</code>, by calling the <code>__new__</code> method on that type class; thus the behaviour of <code>int('123')</code> indirectly comes from <code>int.__new__(int, '123')</code>, which constructs a new <code>int</code> instance that has the value of the given string parsed as an integer.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's both. In Python, the types have associated functions of the same name, that coerce their argument into objects of the named type, if it can be done.  So, the type <code>int</code> <code>&lt;type 'int'&gt;</code>has a function <code>int</code> along with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>What happens when an integer is defined in a Python script like this one?</p>
<pre><code>&gt;&gt;&gt; a=1
&gt;&gt;&gt; a
1
</code></pre>
<p>When you execute the first line, the function <code>PyInt_FromLong</code> is called and its logic is the following:</p>
<pre><code>if integer value in range -5,256:
    return the integer object pointed by the small integers array at the
    offset (value + 5).
else:
    if no free integer object available:
        allocate new block of integer objects
    set value of the next free integer object in the current block
    of integers.
    return integer object
</code></pre>
<p>If you really want to dig deeper into this, and know how <code>int</code> works in Python, visit <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/" rel="nofollow">Python integer objects implementation</a> which I referred for answering this.</p>
</div>
<span class="comment-copy"><code>type(int)</code> returns <code>type</code>. <code>int(0)</code> creates an object of type <code>int</code>.</span>
<span class="comment-copy">Im not familiar with python at all but it looks like an object</span>
<span class="comment-copy">All types/classes in Python are generally <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer">callables</a> (function-like) as well.</span>
<span class="comment-copy">@SamOrozco Well, <i>everything</i> in Python is an object, including types and functions, so that doesn't really answer this question. It's pretty much like saying "it's a thing."</span>
<span class="comment-copy"><code>object.__dict__['__call__']</code> doesn't exist. I think you mean <code>type.__dict__['__call__']</code>.</span>
<span class="comment-copy">Yeah, I guess so...</span>
<span class="comment-copy">I couldn't find a confirmation for this. May I ask you to expand your answer a bit with some evidence and/or references?</span>
<span class="comment-copy">I don't think it is both. It is callable, and calls <code>__new__</code> and <code>__init__</code> on the class object if they exist.</span>
<span class="comment-copy">I strongly disagree. Read this: <a href="http://www.laurentluce.com/posts/python-integer-objects-implementation/" rel="nofollow noreferrer">laurentluce.com/posts/python-integer-objects-implementation</a></span>
<span class="comment-copy">The implementation of the so called native types has evolved over time and as far as I remember the answer is not completely wrong, it just apllies to acient Python versions (before 2).</span>
<span class="comment-copy">@KlausD. Right. <code>type(3) is int</code> is false in Python 2.1, but true since the first stage of type/class unification in Python 2.2 (which was released in 2001). So this answer is only about 15 years out of date. :-)</span>
