<div class="post-text" itemprop="text">
<p>I want to find whether a particular character is occurring continuously in the a word of the string or find if the word contains only numbers and remove those as well. For example,</p>
<pre><code>df
All aaaaaab the best 8965
US issssss is 123 good 
qqqq qwerty 1 poiks
lkjh ggggqwe 1234 aqwe iphone5224s
</code></pre>
<p>I want to check for two conditions, where in the first condition check for repeating characters more than 3 times and also check if a word  contains only numbers. I want to remove only when the word contains only numbers and when a character occurs more than 3 times continuously in the word.</p>
<p>the following should be the output,</p>
<pre><code>df
All the best 
US is good 
qwerty poiks
lkjh aqwe iphone5224s
</code></pre>
<p>The following are my trying,</p>
<p><code>re.sub('r'\w[0-9]\w*', df[i])</code> for number. but this is not removing single character numbers. Also for the repeated characters, I tried, <code>re.sub('r'\w[a-z A-Z]+[a-z A-Z]+[a-z A-Z]+[a-z A-Z]\w*', df[i])</code> but this is removing every word here. instead of repeated letter. </p>
<p>Can anybody help me in solving these problems?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest</p>
<pre><code>\s*\b(?=[a-zA-Z\d]*([a-zA-Z\d])\1{3}|\d+\b)[a-zA-Z\d]+
</code></pre>
<p>See the <a href="https://regex101.com/r/qA0aS0/1" rel="nofollow">regex demo</a></p>
<p>Only alphanumeric words are matched with this pattern:</p>
<ul>
<li><code>\s*</code> - zero or more whitespaces</li>
<li><code>\b</code> - word boundary</li>
<li><code>(?=[a-zA-Z\d]*([a-zA-Z\d])\1{3}|\d+\b)</code> - there must be at least 4 repeated consecutive letters or digits in the word OR the whole word must consist of only digits</li>
<li><code>[a-zA-Z\d]+</code> - a word with 1+ letters or digits.</li>
</ul>
<p><a href="http://ideone.com/5OiEtS" rel="nofollow">Python demo:</a></p>
<pre><code>import re
p = re.compile(r'\s*\b(?=[a-z\d]*([a-z\d])\1{3}|\d+\b)[a-z\d]+', re.IGNORECASE)
s = "df\nAll aaaaaab the best 8965\nUS issssss is 123 good \nqqqq qwerty 1 poiks\nlkjh ggggqwe 1234 aqwe iphone5224s"
strs = s.split("\n")                   # Split to test lines individually
print([p.sub("", x).strip() for x in strs])
# =&gt; ['df', 'All the best', 'US is good', 'qwerty poiks', 'lkjh aqwe iphone5224s']
</code></pre>
<p>Note that <code>strip()</code> will remove remaining whitespaces at the start of the string.</p>
<p>A similar solution in R with a TRE regex:</p>
<pre><code>x &lt;- c("df", "All aaaaaab the best 8965", "US issssss is 123 good ", "qqqq qwerty 1 poiks", "lkjh ggggqwe 1234 aqwe iphone5224s")
p &lt;- " *\\b(?:[[:alnum:]]*([[:alnum:]])\\1{3}[[:alnum:]]*|[0-9]+)\\b"
gsub(p, "", x)
</code></pre>
<p>See a <a href="http://ideone.com/k51nyu" rel="nofollow">demo</a></p>
<p><em>Pattern details</em> and <a href="https://regex101.com/r/sL0wE8/1" rel="nofollow">demo</a>:</p>
<ul>
<li><code>\s*</code> - 0+ whitespaces</li>
<li><code>\b</code> - a leading word boundary</li>
<li><code>(?:[[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*|[0-9]+)</code> - either of the 2 alternatives:

<ul>
<li><code>[[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*</code> - 0+ alphanumerics followed with the same 4 alphanumeric chars, followed with 0+ alphanumerics</li>
<li><code>|</code>  - or</li>
<li><code>[0-9]+</code> - 1 or more digits</li>
</ul></li>
<li><code>\b</code> - a trailing word boundary</li>
</ul>
<p>UPDATE:</p>
<p>To also add an option to remove 1-letter words you may use</p>
<ol>
<li><strong>R</strong> (add <code>[[:alpha:]]|</code> to the alternation group): <code>\s*\b(?:[[:alpha:]]|[[:alnum:]]*([[:alnum:]])\1{3}[[:alnum:]]*|[0-9]+)\b</code> (see <a href="https://regex101.com/r/sL0wE8/3" rel="nofollow">demo</a>)</li>
<li><strong>Python</strong> lookaround based regex (<a href="https://regex101.com/r/qA0aS0/2" rel="nofollow">add</a> <code>[a-zA-Z]\b|</code> to the lookahead group): <code>*\b(?=[a-zA-Z]\b|\d+\b|[a-zA-Z\d]*([a-zA-Z\d])\1{3})[a-zA-Z\d]+</code></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Numbers are easy:</p>
<pre><code>re.sub(r'\d+', '', s)
</code></pre>
<p>If you want to remove words where the same letter appears twice, you can use capturing groups (see <a href="https://docs.python.org/3/library/re.html" rel="nofollow">https://docs.python.org/3/library/re.html</a>):</p>
<pre><code>re.sub(r'\w*(\w)\1\w*', '', s)
</code></pre>
<p>Putting those together:</p>
<pre><code>re.sub(r'\d+|\w*(\w)\1\w*', '', s)
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'\d+|\w*(\w)\1\w*', '', 'abc abbc 123 a1')
'abc   a'
</code></pre>
<p>You may need to clean up spaces afterwards with something like this:</p>
<pre><code>&gt;&gt;&gt; re.sub(r' +', ' ', 'abc   a')
'abc a'
</code></pre>
</div>
<span class="comment-copy">So, you also need to handle the whitespace, too? Remove before the word or after, depending on the word position? And is the <code>R</code> or <code>Python</code> tag relevant?</span>
<span class="comment-copy">@WiktorStribi≈ºew I can handle the spaces by using re.sub(' +',' ',x) along with lstrip, rstrip on top of  it. The reason for taggin R and python is, I am open to do this in both the coding languages. So either of the language is fine.</span>
<span class="comment-copy"><code>\w</code> matches a word, I think you want to be using <code>\b</code> to match a word boundary. With that fix, I believe the pattern you want for digits is <code>\b[0-9]+\b</code>.</span>
<span class="comment-copy">Thanks.. it worked. Can you also help me in identifying single letter words? for ex, a , s .. for identifying these?</span>
<span class="comment-copy">Single letter words - add <code>|[a-zA-Z]\b</code> to the alternatives in the Python solution. See <a href="https://regex101.com/r/qA0aS0/2" rel="nofollow noreferrer"><code>\s*\b(?=[a-zA-Z]\b|\d+\b|[a-zA-Z\d]*([a-zA-Z\d])\1{3})[a-zA-Z\d]+</code></a>.</span>
<span class="comment-copy">But doesn't that remove every word which contains a-z or A-Z ?</span>
<span class="comment-copy">for ex, re.sub(r'[a-zA-Z]', ' ', 'qqqq qwerty 1 poiks s') gives output of only 1</span>
<span class="comment-copy">You must have used the regex incorrectly. See <a href="https://regex101.com/r/qA0aS0/2" rel="nofollow noreferrer"><code>re.sub(r'\s*\b(?=[a-zA-Z]\b|\d+\b|[a-zA-Z\d]*([a-zA-Z\d])\1{3})[a-zA-Z\d]+', '', s)</code></a></span>
<span class="comment-copy">thanks it works..</span>
