<div class="post-text" itemprop="text">
<p>I'm using Python 3.5. </p>
<p>As part of a problem, I'm trying to design a function that takes a list as input and reverts it. So if <code>x = [a, b, c]</code> the function would make <code>x = [c, b, a]</code>.</p>
<p>The problem is, I'm not allowed to use any built-in functions, and it has got me stuck. My initial thought was the following loop inside a function:</p>
<pre><code>for revert in range(1, len(x) + 1):
    y.append(x[-revert])
</code></pre>
<p>And it works. But the problem is I'm using <code>len(x)</code>, which I believe is a built-in function, correct? </p>
<p>So I searched around and have made the following very simple code:</p>
<pre><code>y = x[::-1]
</code></pre>
<p>Which does exactly what I wanted, but it just seems almost too simple/easy and I'm not sure whether <code>"::"</code> counts as a function. </p>
<p>So I was wondering if anyone had any hints/ideas how to manually design said function? It just seems really hard when you can't use any built-in functions and it has me stuck for quite some time now.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>range</code> and <code>len</code> are both <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in functions</a>. Since <code>list</code> <em>methods</em> are accepted, you could do this with <a href="https://docs.python.org/3.5/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>insert</code></a>. It is <em>reeaallyy slow</em><sup>*</sup> but it does the job for <em>small</em> lists without using any built-ins:</p>
<pre><code>def rev(l):
    r = []
    for i in l:
        r.insert(0, i)
    return r
</code></pre>
<p>By continuously inserting at the zero-th position you end up with a reversed version of the input list:</p>
<pre><code>&gt;&gt;&gt; print(rev([1, 2, 3, 4]))
[4, 3, 2, 1]
</code></pre>
<p>Doing:</p>
<pre><code>def rev(l): 
    return l[::-1] 
</code></pre>
<p>could also be considered a solution. <code>::-1</code> (<code>::</code> has a different result) isn't a function (it's a slice) and <code>[]</code> is, again, a list method. Also, contrasting <code>insert</code>, it is faster and way more readable; just make sure you're able to understand and explain it. A nice explanation of how it works can be found <em><a href="https://stackoverflow.com/questions/766141/reverse-a-string-in-python?lq=1">in this S.O answer.</a></em></p>
<p><sup>*Reeaaalllyyyy slow, see juanpa.arrivillaga's answer for cool plot and <code>append</code> with <code>pop</code> and take a look at in-place <code>reverse</code> on lists as done in Yoav Glazner's answer.</sup></p>
</div>
<div class="post-text" itemprop="text">
<p><code>::</code> is not a function, it's a <em>python literal</em>. as well as <code>[]</code></p>
<p>How to check if <code>::, []</code> are functions or not. Simple,</p>
<pre><code>    import dis
    a = [1,2]
    dis.dis(compile('a[::-1]', '', 'eval'))
      1           0 LOAD_NAME                0 (a)
                  3 LOAD_CONST               0 (None)
                  6 LOAD_CONST               0 (None)
                  9 LOAD_CONST               2 (-1)
                 12 BUILD_SLICE              3
                 15 BINARY_SUBSCR
                 16 RETURN_VALUE
</code></pre>
<p>If <code>::,[]</code> were functions, you should find a label <code>CALL_FUNCTION</code> among python instructions executed by <code>a[::-1]</code> statement. So, they aren't. </p>
<p>Look how python instructions looks like when you call a function, lets say <code>list()</code> function</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('list()', '', 'eval'))
  1           0 LOAD_NAME                0 (list)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE
</code></pre>
<p>So, basically</p>
<pre><code>def rev(f):
    return f[::-1]
</code></pre>
<p>works fine. But, I think you should do something like Jim suggested in his answer if your question is a homework or sent by you teacher. But, you can add this quickest way as a side note.</p>
<p>If you teacher complains about <code>[::-1]</code> notation, show him the example I gave you. </p>
</div>
<div class="post-text" itemprop="text">
<p>Another way ( just for completeness :) )</p>
<pre><code>def another_reverse(lst):
    new_lst = lst.copy() # make a copy if you don't want to ruin lst...
    new_lst.reverse() # notice! this will reverse it in place
    return new_lst
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution that doesn't use built-in <em>functions</em> but relies on list methods. It reverse in-place, as implied by your specification:</p>
<pre><code>&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; def reverse(seq):
...   temp = []
...   while seq:
...     temp.append(seq.pop())
...   seq[:] = temp
... 
&gt;&gt;&gt; reverse(x)
&gt;&gt;&gt; x
[4, 3, 2, 1]
&gt;&gt;&gt; 
</code></pre>
<h2>ETA</h2>
<p>Jim, your answer using <code>insert</code> at position 0 was driving me nuts! That solution is quadratic time! You can use <code>append</code> and <code>pop</code> with a temporary list to achieve linear time using simple list methods. See (<code>reverse</code> is in blue, <code>rev</code> is green):
<a href="https://i.stack.imgur.com/IiqWK.png" rel="nofollow noreferrer"><img alt="" src="https://i.stack.imgur.com/IiqWK.png"/></a></p>
<p>If it feels a little bit like "cheating" using <code>seq[:] = temp</code>, we could always loop over <code>temp</code> and append every item into <code>seq</code> and the time complexity would still be linear but probably slower since it isn't using the C-based internals.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your example that works:</p>
<pre><code>y = x[::-1]
</code></pre>
<p>uses Python <a href="https://docs.python.org/2.3/whatsnew/section-slices.html" rel="nofollow">slices notation</a> which is not a function in the sense that I assume you're requesting. Essentially <code>::</code> acts as a separator. A more verbose version of your code would be:</p>
<pre><code>y = x[len(x):None:-1]
</code></pre>
<p>or</p>
<pre><code>y = x[start:end:step]
</code></pre>
<p>I probably wouldn't be complaining that python makes your life really, really easily.</p>
<hr/>
<p>Edit to be super pedantic. Someone could argue that calling <code>[]</code> at all is using an inbuilt python function because it's really syntactical sugar for the method <code>__getitem__()</code>.</p>
<pre><code>x.__getitem__(0) == x[0]
</code></pre>
<p>And using <code>::</code> does make use of the <code>slice()</code> object.</p>
<pre><code>x.__getitem__(slice(len(x), None, -1) == x[::-1]
</code></pre>
<p>But... if you were to argue this, anything you write in python would be using inbuilt python functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way for completeness, <code>range()</code> takes an optional step parameter that will allow you to step backwards through the list:</p>
<pre><code>def reverse_list(l):
    return [l[i] for i in range(len(l)-1, -1, -1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most pythonic and efficient way to achieve this is by list slicing. And, since you mentioned you do not need any inbuilt function, it completely suffice your requirement. For example:</p>
<pre><code>&gt;&gt;&gt; def reverse_list(list_obj):
...     return list_obj[::-1]
...
&gt;&gt;&gt; reverse_list([1, 3, 5 , 3, 7])
[7, 3, 5, 3, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just iterate the list from right to left to get the items.. </p>
<pre><code>a = [1,2,3,4]

def reverse_the_list(a):
   reversed_list = []
   for i in range(0, len(a)):
     reversed_list.append(a[len(a) - i - 1])
   return reversed_list

new_list = reverse_the_list(a)
print new_list
</code></pre>
</div>
<span class="comment-copy">Awesome explanation!!!</span>
<span class="comment-copy">Oh yes, reeaaalllyyyy slow. I hate myself too :-)</span>
<span class="comment-copy">range is a builtin - the OP asked how not to use a builtin</span>
<span class="comment-copy">I assumed he meant not using the builtin <code>reversed()</code> or <code>list.reverse()</code> since OP used <code>range()</code> in their example. As another answer also pointed out it's sort impossible to much in Python with out using a built in function since even <code>list[x]</code> calls a built in method of the list.</span>
<span class="comment-copy">This answer might also be useful for another person in the future looking for a way to reverse a list without using <code>reversed()</code>/<code>list.reverse()</code></span>
