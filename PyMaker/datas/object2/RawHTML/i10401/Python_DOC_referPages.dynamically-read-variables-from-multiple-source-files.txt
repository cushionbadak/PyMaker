<div class="post-text" itemprop="text">
<p>I have a directory storing some python source files (<code>a_dir/*.py</code>).
Each *.py file has <code>a_var</code> object.</p>
<p>I want to have a script under the same directory of <code>a_dir</code> to construct a list <code>a_var_list</code> containing all <code>a_var</code> value.</p>
<p>My though is to loop through python source files in <code>a_dir</code>, temporary load each module and read object <code>a_var</code> to construct a python list of a_var's value.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe like this?</p>
<p>import</p>
<pre><code>import os
import sys
sys.path.append("a_dir")
a_list = []

for directory in os.walk("a_dir"): #should only iterate once
    for file in directory[2]:
        if file.split(".")[-1] == "py":
            module = __import__(".".join(file.split(".")[:-1]))
            if "a_var" in dir(module):
                a_list.append(module.a_var)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to do text parsing, you could try importing all the files and accessing the a_var variable. To make this possible you should have written yor files using the "famous"</p>
<pre><code>if __name__ == '__main__':
    &lt;code&gt;
</code></pre>
<p>If you did not use that method, the fastest way is still file parsing. I would use something like the following:</p>
<pre><code>import glob
import re

results = []

avar_regex = re.compile(r'\s*a_var\s*=\s*(.*)\s*') 
# to define the regex it would be important to know a little bit
#+more about the variable you are looking for.

# glob can be used to create a list with all the file names
for f in glob.glob('a_dir/*.py'): 
    with open(f) as fc:
        while l in fc:
            match = avar_regex.match(l)
            if match:
                results.append(match.group(1))
                break
</code></pre>
</div>
<span class="comment-copy">What approaches have you tried? Try <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer">glob</a> module.</span>
<span class="comment-copy">Please unhold, I will answer my question.</span>
<span class="comment-copy">This will re-execute all the python files  if they are not well done (as I mentioned in my answer...)</span>
<span class="comment-copy">I got AttributeError: 'module' object has no attribute 'a_var'</span>
<span class="comment-copy">ah, yeah this assumes that every module in the directory has a_var defined. I'll edit the solution to account for that</span>
