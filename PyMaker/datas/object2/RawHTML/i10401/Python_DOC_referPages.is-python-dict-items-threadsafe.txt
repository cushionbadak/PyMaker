<div class="post-text" itemprop="text">
<p>Python raises an exception if a dictionary changes its size during iteration using <code>iteritems()</code>.</p>
<p>I am hit by this problem since my program is <em>multithreaded</em> and there are cases that I need to iterate over the <code>dict</code> while another thread is adding keys into the <code>dict</code>.</p>
<p>Fortunately, I don't need the iteration to be very precise on every element in the <code>dict</code>. Therefore I am thinking to use <code>items()</code> instead of <code>iteritems()</code> to do the iteration. I think <code>items()</code> makes a static snapshot of the <code>dict</code> and I would work around the problem. </p>
<p>My question is: does <code>items()</code> raises an exception if the <code>dict</code> size is changing at the same time with <code>items()</code> execution?</p>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>As the excellent comments noted:</p>
<ol>
<li><p>This is not thread safe.</p></li>
<li><p>You should really use a lock when doing such things.</p></li>
</ol>
<p>It is possible to see this in <a href="https://svn.python.org/projects/python/trunk/Objects/dictobject.c" rel="nofollow">the CPython source code, <code>dictobject.c</code></a>:</p>
<p>If you look at the function</p>
<pre><code>static PyObject *
dict_items(register PyDictObject *mp)
</code></pre>
<p>which is used for <code>items</code>, you can see that (after some clever pre-allocation for the results), it basically iterates over the array <code>mp-&gt;ma_table</code> (using a mask to see where there are entries).</p>
<p>Now if you look at the function</p>
<pre><code>static int
dictresize(PyDictObject *mp, Py_ssize_t minused)
</code></pre>
<p>which is used when the table needs to be resized, then you can see that <code>ma_table</code>'s elements can be moved into a completely different buffer, and then it can be freed using <a href="https://docs.python.org/3.1/c-api/memory.html#PyMem_Free" rel="nofollow"><code>PYMem_Free</code></a>.</p>
<p>So, you have a very real risk of accessing garbage memory, if things are done concurrently without synchronization.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>items()</code> method in <em>CPython</em>'s implementation of <em>Python 2</em> is guaranteed to succeed.</p>
<p>Since the <code>items()</code> method is <a href="https://github.com/python/cpython/blob/2.7/Objects/dictobject.c#L1364" rel="nofollow noreferrer">implemented</a> purley in <em>C</em> without releasing the <a href="https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock" rel="nofollow noreferrer"><code>GIL</code></a> beforehand or during its execution, no other thread may acquire it and the underlying data structure remains unchanged while this method is executed.</p>
</div>
<span class="comment-copy">My advice: When in doubt, use a lock :-)</span>
<span class="comment-copy">Presumably items() will have to iterate over the the dictionary as part of constructing its snapshot.  So calling items() won't solve the problem, only move the problem from your code into the implementation of the items() method.  A better solution would be to serialize access to the dictionary using a mutex.</span>
<span class="comment-copy"><a href="http://effbot.org/pyfaq/what-kinds-of-global-value-mutation-are-thread-safe.htm" rel="nofollow noreferrer">effbot.org/pyfaq/â€¦</a> says that dict.keys() is atomic, it is strange to me that items() is not. In the same article, it says that "L1[i:j] = L2" is atomic but "L[i] = L[j]" not, which is strange too. Can I trust that article?</span>
<span class="comment-copy">Python 2 or Python 3 (it makes a huge difference in this case)? In Python 2 <code>items()</code> gives you a <i>new</i> list of tuples for each call, hence if <code>items()</code> itself is atomic (note: it takes the GIL) your iteration is, too. But anyway: When in doubt use a lock.</span>
<span class="comment-copy">I think you're wrong. Please review <a href="https://stackoverflow.com/a/55482753/3903832">my answer</a>.</span>
