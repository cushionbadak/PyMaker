<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6256983/how-are-deques-in-python-implemented-and-when-are-they-worse-than-lists">How are deques in Python implemented, and when are they worse than lists?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I am wondering about the time complexity of the get operation of deque in Python. </p>
<p>I know that it is implemented as a doubly link in Python. Does that mean that its time complexity is O(n)? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>deque</code> are implemented a little smarter than just doubly-linked lists. They're a doubly-linked list of <em>blocks</em> of Python objects, where the left and right sides may be incomplete blocks.</p>
<p>The Big-O cost of accessing in the middle is still <code>O(n)</code>, but it has a constant divisor (implementation dependent, <a href="https://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c#l21" rel="noreferrer">CPython 3.5 allocates blocks that can store 64 objects</a>). So if your <code>deque</code> has 1000 members, accessing in the middle still involves only around 7-8 "linked list-style" traversals, not 500-some. If the <code>deque</code> is smallish (65 to 128 elements, depending on how the empty slots align with the head and tail blocks), then lookup of any element is equal cost.</p>
</div>
<span class="comment-copy">Also note documentation <a href="https://docs.python.org/3/library/collections.html#collections.deque.maxlen" rel="nofollow noreferrer">"Indexed access is O(1) at both ends but slows to O(n) in the middle."</a></span>
