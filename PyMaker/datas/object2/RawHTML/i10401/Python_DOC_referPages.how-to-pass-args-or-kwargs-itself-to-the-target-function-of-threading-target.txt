<div class="post-text" itemprop="text">
<p>A function accepts <code>*args</code> and <code>**kwargs</code>:</p>
<pre><code>def b(num, *args, **kwargs):
    print('num', num)
    print('args', args)
    print('kwargs', kwargs)
</code></pre>
<p>calling it as <code>b(5, *[1, 2], **{'a': 'b'})</code> produces the following output:</p>
<pre><code>num 5
args (1, 2)
kwargs {'a': 'b'}
</code></pre>
<p><code>threading.Thread(target=b, args=[5, [1, 2], {'a': 'b'}]).start()</code> gives:</p>
<pre><code>num 5
args ([1, 2], {'a': 'b'})
kwargs {}
</code></pre>
<p><code>threading.Thread(target=b, kwargs={'num': 5, '*args': [1, 2], '**kwargs': {'a': 'b'}}).start()</code> gives:</p>
<pre><code>num 5
args ()
kwargs {'**kwargs': {'a': 'b'}, '*args': [1, 2]}
</code></pre>
<p>What's the correct way to pass *args and **kwargs to this function?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>threading.Thread(target=b, args=[5, 1, 2], kwargs={'a': 'b'}).start()
</code></pre>
<p>gives the expected output. Another option is to use functools. The following code also passes arguments correctly:</p>
<pre><code>threading.Thread(target=functools.partial(b, 5, *[1, 2], **{'a': 'b'})).start()
</code></pre>
</div>
<span class="comment-copy">Your sample call is the same thing as <code>b(5, 1, 2, a='b')</code>. Or <code>b(5, 1, 2, **{'a': 'b'})</code> or <code>b(5, a='b', *[1, 2])</code>. Don't confuse the use of <code>*</code> and <code>**</code> in the <i>function signature</i> with the similar syntax in a <i>call expression</i>. The two are related but the function signature does not mean you have to use the <code>*</code> and <code>**</code> syntax in the call.</span>
<span class="comment-copy">All this isn't really specific to <code>threading.Thread()</code>, let alone to <a href="https://stackoverflow.com/questions/tagged/python-multithreading">python-multithreading</a>.</span>
<span class="comment-copy">Yes, that's rather obvious once you read the <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer"><code>threading.Thread()</code> documentation</a>.</span>
