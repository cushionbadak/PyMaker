<div class="post-text" itemprop="text">
<p>I'm trying to perform the following:</p>
<pre><code>firstoctet * 256 + secondoctet = * 256 + thirdoctet = * 256 + fourthoctet = x
</code></pre>
<p>When I use this as an example :</p>
<pre><code>64.233.187.99 (google.com)
64 * 256 + 233 = * 256 + 187 = * 256 + 99 = http://1089059683/
</code></pre>
<p>Can someone please provide a method as to how this can be done? The mathematical sequence is no problem, i'm just unsure as to how I can take the octet values out of the decimal points to perform the math functions. </p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're on Python 3.3 or higher, you can leverage <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow">the <code>ipaddress</code> module</a> to avoid reinventing the wheel, and it even provides a useful view as <code>bytes</code> that <code>int.from_bytes</code> can efficiently convert to a real <code>int</code>:</p>
<pre><code>from ipaddress import IPv4Address

ip_as_addr = IPv4Address("64.233.187.99")
ip_as_int = int.from_bytes(ip_as_addr.packed, 'big')
print(ip_as_int, hex(ip_as_int))
</code></pre>
<p>gets you output of <code>1089059683 0x40e9bb63</code>.</p>
<p>You could do this by hand if you really wanted to, I just like the self-documenting aspect of the above code. If Py 3.3+ isn't an option, you can get the same results with:</p>
<pre><code>octets = map(int, "64.233.187.99".split('.'))
ip_as_int = sum(octet &lt;&lt; ((3 - i) * 8) for i, octet in enumerate(octets))
</code></pre>
<p>That just splits the octets apart, converts them to <code>int</code>, then shifts each of them left by 24, 16, 8 and 0 bits (to align the octets properly), which then allows <code>sum</code> to combine them into a single <code>int</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Convert an IP address string to a list of integers like this:</p>
<pre><code>ip_as_string = "64.233.187.99"
ip_as_ints = [int(a) for a in ip_as_string.split('.')]
</code></pre>
<p><code>ip_as_ints</code> will be [64, 233, 187, 99].</p>
<p>I will guess that the mathematical expression that you intend to perform is RPN for converting the byte sequence from a base-256 representation to a single number.  (Thanks to ShadowRanger for showing this).  You can obtain that single number easily as follows:</p>
<pre><code>x = functools.reduce(lambda x,y: (x &lt;&lt; 8) | y, ip_as_ints, 0)
print(x)
</code></pre>
<p>x is 1089059683.</p>
</div>
<span class="comment-copy">There is an <code>ipaddress</code> module you can use. What are you trying to do with the ip adresses exactly? Don't solve stuff that is already available (unless thats what you're trying to do).</span>
<span class="comment-copy">Nice answer and good insight into what the OP probably wants to do.</span>
