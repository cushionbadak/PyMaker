<div class="post-text" itemprop="text">
<p>I am fiddling around with outputting a json file with some attributes of the files within a directory.  My problem is, when appending to the file there is no separator between each object.  I could just add a comma after each 'f' and delete the last one, but that seems like a sloppy work around to me.  </p>
<pre><code>import os
import os.path
import json

#Create and open file_data.txt and append 
with open('file_data.txt', 'a') as outfile:

    files = os.listdir(os.curdir)


    for f in files:

        extension = os.path.splitext(f)[1][1:]
        base = os.path.splitext(f)[0]
        name = f

        data = {
            "file_name" : name,
            "extension" : extension,
            "base_name" : base
                }

        json.dump(data, outfile)
</code></pre>
<p>This outputs:</p>
<p><code>{"file_name": "contributors.txt", "base_name": "contributors", "extension": "txt"}{"file_name": "read_files.py", "base_name": "read_files", "extension": "py"}{"file_name": "file_data.txt", "base_name": "file_data", "extension": "txt"}{"file_name": ".git", "base_name": ".git", "extension": ""}</code></p>
<p>What I would like is actual JSON:</p>
<p><code>{"file_name": "contributors.txt", "base_name": "contributors", "extension": "txt"},{"file_name": "read_files.py", "base_name": "read_files", "extension": "py"},{"file_name": "file_data.txt", "base_name": "file_data", "extension": "txt"}{"file_name": ".git", "base_name": ".git", "extension": ""}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>What you're getting is not a JSON object, but a stream of separate JSON objects.</p>
<p>What you would like is <em>still</em> not a JSON object, but a stream of separate JSON objects with commas between them. That's not going to be any more parseable.*</p>
<p><sub>* The <a href="http://www.json.org/" rel="noreferrer">JSON spec</a> is simple enough to parse by hand, and it should be pretty clear that an object followed by another object with a comma in between doesn't match any valid production.</sub></p>
<hr/>
<p>If you're trying to create a JSON array, you can do that. The obvious way, unless there are memory issues, is to build a list of dicts, then dump that all at once:</p>
<pre><code>output = []
for f in files:
    # ...
    output.append(data)
json.dump(output, outfile)
</code></pre>
<p>If memory is an issue, you have a few choices:</p>
<ul>
<li>For a quick-and-dirty solution, you can fake it by writing the <code>[</code>, <code>,</code>, and <code>]</code> manually. (But note that it is not valid JSON to have an extra trailing comma after the last value, even if some decoders will accept it.)</li>
<li>You can wrap your loop up in a generator function that yields each <code>data</code>, and extend <code>JSONEncoder</code> to convert iterators to arrays. (Note that this is actually used as <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder.default" rel="noreferrer">the example in the docs</a> of why and how to extend <code>JSONEncoder</code>, although you might want to write a more memory-efficient implementation.)</li>
<li>You can look for a third-party JSON library that has some kind of built-in iterative streaming API.</li>
</ul>
<hr/>
<p>However, it's worth considering what you're trying to do. Maybe a stream of separate JSON objects actually <em>is</em> the right file format/protocol/API for what you're trying to do. Because JSON is self-delimiting, there's really no reason to add a delimiter between separate values. (And it doesn't even help much with robustness, unless you use a delimiter that isn't going to show up all over the actual JSON, as <code>,</code> is.) For example, what you've got is exactly what JSON-RPC is supposed to look like. If you're just asking for something different because you don't know how to parse such a file, that's pretty easy. For example (using a string rather than a file for simplicity):</p>
<pre><code>i = 0
d = json.JSONDecoder()
while True:
    try:
        obj, i = d.raw_decode(s, i)
    except ValueError:
        return
    yield obj
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem because I needed to <code>yield</code> objects into a file because I didn't want to load the whole list of objects into memory.
Here's my approach (but I think it's a bit hacky though):</p>
<pre><code>json_begin = '{"objects":['
json_end = ']}'

with open('file_data.txt', 'a') as outfile:
   files = os.listdir(os.curdir)

   outfile.write(json_begin)

   for f in files:

       extension = os.path.splitext(f)[1][1:]
       base = os.path.splitext(f)[0]
       name = f

       data = {
           "file_name" : name,
           "extension" : extension,
           "base_name" : base
       }

       json.dump(data, outfile)
       if f != files[-1]:
           outfile.write(',')

   outfile.write(json_end)
</code></pre>
</div>
