<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I'm trying to modify the list of lists:</p>
<pre><code>list = [['0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0']]
</code></pre>
<p>in particular when I assign <code>list[0][1]='X'</code>, <code>list</code> is now:</p>
<pre><code>[['0', 'X', '0', '0', '0', '0'], ['0', 'X', '0', '0', '0', '0'], ['0', 'X', '0', '0', '0', '0'], ['0', 'X', '0', '0', '0', '0'], ['0', 'X', '0', '0', '0', '0']]
</code></pre>
<p>instead of just reassigning the second element of the first sub list, it reassigns the first element of every sub list. I don't understand why this is happening. Does anyone know?</p>
</div>
<div class="post-text" itemprop="text">
<p>You must have created <code>list</code> like so:</p>
<pre><code>list = [['0', '0', '0', '0', '0', '0']] * 5
</code></pre>
<p>Doing this creates a list with five <em>references</em> to the <em>same</em> list object:</p>
<pre><code>&gt;&gt;&gt; list = [['0', '0', '0', '0', '0', '0']] * 5
&gt;&gt;&gt; id(list[0])
27391360
&gt;&gt;&gt; id(list[1])
27391360
&gt;&gt;&gt; id(list[2])
27391360
&gt;&gt;&gt;
</code></pre>
<p>So, when you modify one sublist, they all get changed.</p>
<hr/>
<p>To fix the problem, use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> instead:</p>
<pre><code>lst = [['0', '0', '0', '0', '0', '0'] for _ in range(5)]
</code></pre>
<p>Unlike your current code, this solution will create a list with five <em>unique</em> sublists. Consequentially, changing one will not affect the others.</p>
<p>Also, I changed the name of your list to <code>lst</code> to avoid shadowing the <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow">built-in</a>.  You should never create a name that is the same as a built-in.</p>
<hr/>
<p>Note that you could also write:</p>
<pre><code>lst = [['0'] * 6 for _ in range(5)]
</code></pre>
<p>Doing <code>['0'] * 6</code> is not a problem here because strings are <a href="https://docs.python.org/3/glossary.html#immutable" rel="nofollow">immutable objects</a> in Python.  So, <code>['0'] * 6</code> creates a list with six unique string objects.  Lists however are <a href="https://docs.python.org/3/glossary.html#mutable" rel="nofollow">mutable objects</a> and therefore cannot be created like this.</p>
</div>
<span class="comment-copy">This is because of how you created <code>list</code>. Please show how you did that.</span>
<span class="comment-copy">Because your <code>list</code> contains multiple references to the same other list.</span>
<span class="comment-copy">This is a dup of a few dozen questions on SO (I'm searching for the best one), plus <a href="https://docs.python.org/3/faq/programming.html#how-do-i-create-a-multidimensional-list" rel="nofollow noreferrer">an entry in the official Python FAQ</a>.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/18667942/two-dimensional-list-wrongly-assigning-values-in-python/18667977#18667977">Two-dimensional list wrongly assigning values in python</a> is another nice one.</span>
<span class="comment-copy"><code>lst = [ 6*['0'] for _ in range(5) ]</code> more succinctly.</span>
<span class="comment-copy">@khelwood - Good idea.  I'll mention it.</span>
<span class="comment-copy">Thanks guys, problem solved. One question though. if the list ['0', '0', '0', '0', '0', '0'] is not always the same but it is stored in some variable a, how do you rewrite the part of the "for _ in ..."?</span>
<span class="comment-copy">@JavierRabba - You can make a copy of the list by putting it in <code>list</code>:  <code>lst = [list(a) for _ in range(5)]</code>.  Although I personally would probably use slice notation: <code>lst = [a[:] for _ in range(5)]</code>.  It may not be as readable to some, but it is more concise and generally faster.</span>
<span class="comment-copy">Perfect. ty very much</span>
