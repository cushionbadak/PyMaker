<div class="post-text" itemprop="text">
<p>I am making a small interactive text game in python.<br/>
i need to check if a string, from the user, is <code>1234</code> (a number in a string that would work with <code>int()</code> ) or <code>foo</code> (just a string, python would traceback if I called <code>int()</code> on it)</p>
<pre><code>while(True):
    IN = input("[Number] &gt;&gt; ")
    if(isNumber(IN)):
        break
    else:
        print("Please enter a number.")
        continue
IN = int(IN) #guaranteed to work at this point
someFunction(IN)
</code></pre>
<p>thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to know if something is "a number in a string, one that would work with int()", you do that by just calling <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow"><code>int</code></a>:</p>
<pre><code>try:
    i = int(myvar)
    # It's an int, and we have the value if you want it
except ValueError:
    # It's not an int
</code></pre>
<p>This is a general case of the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP</a> principle: It's Easier to Ask Forgiveness than Permission. Instead of trying to guess whether something would fail, it's usually easier to just try it and see if it fails.</p>
<p>That's especially try in cases where trying to guess is more complicated than it looks. For example, people always suggest using the <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>isdigit</code></a> method here, but that fails in a number of cases. For example:</p>
<ul>
<li><code>isdigit</code> is false for negative numbers, because the <code>'-'</code> character is not a digit.</li>
<li><code>isdigit</code> is false for numbers with trailing whitespace (e.g., because you're not <code>rstrip</code>ping newlines from your input).</li>
<li><code>isdigit</code> is true for hundreds of non-western digits and special-form digits that can't be used with <code>int</code>.</li>
<li><code>int</code> has changed its rules at least twice between Python 2.0 and 3.4, and could always change again.</li>
</ul>
<p>You probably <em>could</em> come up with a complicated rule that was exactly the same as "would work with int()" as interpreted in some specific Python version, but why, when <code>int</code> is  obviously guaranteed to always do the same thing as <code>int</code>?</p>
</div>
<span class="comment-copy">Have you tried anything or are you just looking for people to do it for you?</span>
<span class="comment-copy">This is really not good example code. For one thing, it's not legal code (missing a colon after the <code>def</code>, missing an indent after the <code>def</code>). And it's confusing to use <code>/if</code> for <code>else</code>, even in a comment. And <code>standardin</code> is not a builtin function, so how do we know what it runs (Is it a <code>str</code> or a <code>bytes</code>? Does it include a trailing newline? And so on.) And most of the code seems irrelevant to the problem. Also, the bizarre mix of capitalization styles, unnecessary parentheses, etc. don't help. Please read <a href="http://stackoverflow.com/help/mcve">MCVE</a> in the help.</span>
<span class="comment-copy">Excellent explanation and +1 for mentioning EAFP.</span>
<span class="comment-copy">thanks @abarnert also inadvertently explained 'try' for me :D</span>
