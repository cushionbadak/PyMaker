<div class="post-text" itemprop="text">
<p>I am trying to write a simple Python program. It's supposed to return a a closure that returns successive fibonacci numbers:</p>
<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    n = 1
    def fib():
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib

f = fibGen()
for i in range(0,10):
    print(f())
</code></pre>
<p>I get this error at run time:
<code>UnboundLocalError: local variable 'n_1' referenced before assignment</code></p>
<p>EDIT: In my original post, I had not included <code>n = 1</code> in the definition of <code>fibGen</code> but it was actually a typo. I would still get the same error anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python determines the scope of variables at compile time, based on <em>binding behaviour</em>. If you assign to a name, or use it as an <code>import</code> target (and a few other ways) you are binding the name in a scope.</p>
<p>You are binding to <code>n_1</code> and <code>n_2</code> in the <code>fib()</code> function; both are being assigned to. This makes those two names <em>local</em> in <code>fib()</code>, and Python won't even look at the surrounding scope.</p>
<p>You'll need to override this behaviour, and you can do this by using the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement"><code>nonlocal</code> statement</a>:</p>
<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib
</code></pre>
<p><code>nonlocal</code> tells the compiler <em>explicitly</em> that you don't want it to look at binding behaviour but instead treat the names as closures.</p>
<p>Next, you are using <code>n</code> in the first branch of the <code>if</code> test, but you haven't defined it anywhere outside of the <code>else</code> branch. You should just return <code>1</code> there anyway:</p>
<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n_1
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib
</code></pre>
<p>Last but not least, you can swap two variables by using tuple assignment, no intermediaries needed:</p>
<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
        else:
            n_1, n_2 = n_1 + n_2, n_1
        return n_1
    return fib
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't modified enclosing variables, n_1, n_2 is in <code>enclosing</code> space not in space of function that's why you can't cahnge the variables.</p>
<p>Use <code>nonlocal</code> keyword</p>
<pre><code>def fibGen():
    n_1 = 0
    n_2 = 0 
    def fib():
        nonlocal n_1, n_2
        if n_1 ==0 and n_2 ==0:
            n_1 = 1
            return n_1 # return `n_1` here not `n`
        else:
            n = n_1 + n_2
            n_2 = n_1
            n_1 = n  
            return n
    return fib

f = fibGen()
for i in range(0,10):
    print(f())
</code></pre>
</div>
<span class="comment-copy"><code>n</code> is not defined in your code in <code>if</code> clause.</span>
<span class="comment-copy">why i got downvote?</span>
<span class="comment-copy">I just upvoted you to cancel the effect :)</span>
<span class="comment-copy">@novice66 But my answer is good to explain what's the problem in your code.</span>
<span class="comment-copy">I know, that's why I "upvoted" it to cancel the downvote you got from someone else.</span>
<span class="comment-copy">Interesting that answers like this can now be posted without mention that it is a py3 feature.  Maybe we're finally over the py2-&gt;py3 tipping point.  Also, +1 because you look like you were 1 minute ahead of the accepted answer but that answer uses your same function, vaiable names and all.  People with &lt;300K need some upvote lovin' too.</span>
