<div class="post-text" itemprop="text">
<p>Given a list in python, I would like to find how many equal elements are in the beginning of the list.</p>
<p>Example input:</p>
<pre><code>x1 = ['a','a','b','c','a','a','a','c']
x2 = [1, 1, 1, 3, 1, 1, 1, 8]
x3 = ['foo','bar','foobar']
</code></pre>
<p>Some magical function (or a one liner) would output:</p>
<pre><code>f(x1) = 2 # There are 2 'a' values in the beginning.
f(x2) = 3 # There are 3 1-values in the beginning.
f(x3) = 1 # Only 1 'foo' in beginning.
</code></pre>
<p>If I do:</p>
<pre><code>sum([1 if x=='a' else 0 for x in x1])
</code></pre>
<p>I just get the number of occurrences of 'a' in x1, not the number of leading values in a row. Would be nice to have a one liner which doesn't need to know the first value.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.groupby</code> can help ...</p>
<pre><code>from itertools import groupby

def f(lst):
    if_empty = ('ignored_key', ())
    k, v = next(groupby(lst), if_empty)
    return sum(1 for _ in v)
</code></pre>
<p>And of course we can turn this into a 1-liner (sans the import):</p>
<pre><code>sum(1 for _ in next(groupby(lst), ('ignored', ()))[1])
</code></pre>
<p>But I wouldn't really recommend it.</p>
<hr/>
<p>demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; 
&gt;&gt;&gt; def f(lst):
...     if_empty = ('ignored_key', ())
...     k, v = next(groupby(lst), if_empty)
...     return sum(1 for _ in v)
... 
&gt;&gt;&gt; f(x1)
2
&gt;&gt;&gt; f(x2)
3
&gt;&gt;&gt; f(x3)
1
&gt;&gt;&gt; f([])
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow"><code>takewhile</code></a>.</p>
<pre><code>import itertools

xs = [1, 1, 1, 3, 1, 1, 1, 8]

sum(1 for _ in itertools.takewhile(lambda x: x == xs[0], xs))
</code></pre>
<p>In a function:</p>
<pre><code>def count_first(iterable):
    i = iter(iterable)
    first = next(i)
    return 1 + sum(1 for _ in itertools.takewhile(lambda x: x == first, i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Maybe is better check the first occurrence of something that is not equal to the first value:</p>
<pre><code>x1 = ['a','a','b','c','a','a','a','c']
x2 = [1, 1, 1, 3, 1, 1, 1, 8]
x3 = ['foo','bar','foobar']
x4 = []
x5 = [1,1,1,1,1,1]

def f(x):
    pos = -1
    for pos,a in enumerate(x):
        if a!=x[0]:
            return pos
    return pos+1


print(f(x1))
print(f(x2))
print(f(x3))
print(f(x4))
print(f(x5))

2
3
1
0
6
</code></pre>
</div>
<span class="comment-copy">Thanks! This is perfect.</span>
<span class="comment-copy">Neat and simple. Thanks.</span>
