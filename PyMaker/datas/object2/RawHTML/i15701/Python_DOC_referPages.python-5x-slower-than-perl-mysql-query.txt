<div class="post-text" itemprop="text">
<p>I am translating a code from perl to python.
Even if it works exactly the same, there  is a part of the code that is 5x slower in python than in perl and I cannot figure out why.</p>
<p>Both perl and python are in the same machine, as well as the mysql database.</p>
<p>The code queries a db to download all columns of a table and then process each row.
There are more than 5 million rows to process and the big issue is in retrieving the data from the database to the python processing.</p>
<p>Here I attach the two code samples: 
Python:</p>
<pre><code>import os
import mysql.connector **&lt;--- import mySqlDb**
import time

outDict = dict()
## DB parameters
db = mysql.connector.connect **&lt;----- mySqlDb.connect( ...** 
     (host=dbhost, 
user=username, # your username
passwd=passw, # your password
db=database) # name of the data base
cur = db.cursor(prepared=True)
sql = "select chr,pos,lengthofrepeat,copyNum,region from db.Table_simpleRepeat;"
cur.execute(sql)
print('\t eDiVa public omics start')
s  = time.time()
sz = 1000
rows = cur.fetchall()
for row in rows:
    ## process out dict    
print time.time() - s 
cur.close()
db.close()        
</code></pre>
<p>While here comes the Perl equivalent script:</p>
<pre><code>use strict;
use Digest::MD5 qw(md5);
use DBI;
use threads;
use threads::shared;

my $dbh = DBI-&gt;connect('dbi:mysql:'.$database.';host='.$dbhost.'',$username,$pass) 
    or die "Connection Error!!\n";    
    my $sql = "select chr,pos,lengthofrepeat,copyNum,region from   db.Table_simpleRepeat\;";
    ## prepare statement and query
    my $stmt = $dbh-&gt;prepare($sql);
    $stmt-&gt;execute or die "SQL Error!!\n";
    my $c = 0;
    #process query result
    while (my @res = $stmt-&gt;fetchrow_array) 
    {
        $edivaStr{ $res[0].";".$res[1] } = $res[4].",".$res[2]; 
        $c +=1;
    }
    print($c."\n");
    ## close DB connection
    $dbh-&gt;disconnect();    
</code></pre>
<p>The runtime for these two scripts is:</p>
<ul>
<li>~40s for the Perl script</li>
<li>~200s for the Python script</li>
</ul>
<p>I cannot figure out why this happens [I tried using fetchone() or fetchmany() to see if there are memory issues but the runtime at most reduces 10% from the 200s].</p>
<p>My main problem is understanding why there is such a relevant performance difference between the two functionally equivalent code blocks.</p>
<p>Any idea about how can I verify what is happening would be greatly appreciated.</p>
<p>Thanks!</p>
<h2>UPDATE ABOUT SOLUTION</h2>
<p>Peeyush'comment could be an answer and I'd like him to post it because it allowed me to find a solution.</p>
<p>The problem is the python connector. I just changed that for mySqlDb module which is a C compiled module. That made the python code slightly faster than the perl code.</p>
<p>I added the changes in the python code with a &lt;---- "" to show how easy it has been to gain performance.</p>
</div>
<div class="post-text" itemprop="text">
<p>the <code>cursor.fetchall</code> means you load all your data in memory at once, instead of doing it slowly when needed.</p>
<p>Replace</p>
<pre><code>row = cur.fetchall()
for row in rows:
</code></pre>
<p>by </p>
<pre><code>for row in cur:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is the python connector. I just changed that for mySqlDb module which is a C compiled module. That made the python code slightly faster than the perl code.</p>
<p>I added the changes in the python code with a &lt;---- "" to show how easy it has been to gain performance</p>
</div>
<div class="post-text" itemprop="text">
<p>I encounter the same problem. With Python cx_Oracle, here's my environment performance stats -- Python takes very long to connect to Oracle DB.</p>
<ul>
<li><strong>connect to DB, elaps:0.38108</strong></li>
<li>run query, elaps:0.00092</li>
<li>get filename from table, elaps:8e-05</li>
<li>run query to read BLOB, elaps:0.00058</li>
<li>decompress data and write to file, elaps:0.00187</li>
<li>close DB connection, elaps:0.00009</li>
<li><strong>Over all, elaps:0.38476</strong></li>
<li><strong>same function in Perl, elaps:0.00213</strong></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Python <code>for</code> loops are quite slow. You should look into an alternative to treat your query.<br/>
From python wiki : <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops" rel="nofollow">https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops</a></p>
</div>
<span class="comment-copy">I tried this very same code without the internal processing. the runtime just decreased by 5s . And the processing is just fill a dictionary with out_dict[chr';'pos]= pos,region  [all these are strings extracted by the database row]</span>
<span class="comment-copy">I don't know enough Python to be sure - but is that a server-side cursor you have instantiated? Seems a waste if you then just fetch everything.</span>
<span class="comment-copy">I honestly don't know, I am not a Python expert. But could it justify the time difference?</span>
<span class="comment-copy">What types are the columns, and what type are the values you get? Python may be decoding all of the database strings to unicode, or could be coverting some columns into instances of other Python types.</span>
<span class="comment-copy">I think the problem here is that perl mysql driver is a wrapper on the mysql client libraries, whereas mysql connector is purely written in python which implements the client server protocol in python itself which is slow. You can check the mysql connector python 2.1.0(C extension) at <a href="http://labs.mysql.com/" rel="nofollow noreferrer">labs.mysql.com</a> , but since its in labs its not good to use it in production.</span>
<span class="comment-copy">Thank you  Arthur. I applied that change and the runtime is 177s. It helped but it does not explain to me how the Perl alternative is so much faster.</span>
<span class="comment-copy">I don't know much Perl, but I see you are importing threading libs, are you using them in your processing ?  If your processing can be done on multiple objects at the same time, you can probably use the concurrent.futures module to speed things up : <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">docs.python.org/3/library/concurrent.futures.html</a></span>
<span class="comment-copy">Thanks for the observation, But it seems it is super slow in loading the data from the database that affects the runtime mostly</span>
