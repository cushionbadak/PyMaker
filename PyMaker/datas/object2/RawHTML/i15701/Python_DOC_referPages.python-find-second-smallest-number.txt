<div class="post-text" itemprop="text">
<p>I found this code on this site to find the second largest number:</p>
<pre><code>def second_largest(numbers):
    m1, m2 = None, None
    for x in numbers:
        if x &gt;= m1:
            m1, m2 = x, m1
        elif x &gt; m2:
            m2 = x
    return m2
</code></pre>
<p>Source: <a href="https://stackoverflow.com/questions/16225677/get-the-second-largest-number-in-a-list-in-linear-time">Get the second largest number in a list in linear time</a></p>
<p>Is it possible to modify this code to find the second <em>smallest</em> number? So for example</p>
<pre><code>print second_smallest([1, 2, 3, 4])
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The function can indeed be modified to find the second smallest:</p>
<pre><code>def second_smallest(numbers):
    m1, m2 = float('inf'), float('inf')
    for x in numbers:
        if x &lt;= m1:
            m1, m2 = x, m1
        elif x &lt; m2:
            m2 = x
    return m2
</code></pre>
<p>The old version relied on a Python 2 implementation detail that <code>None</code> is always sorted before anything else (so it tests as 'smaller'); I replaced that with using <code>float('inf')</code> as the sentinel, as infinity always tests as <em>larger</em> than any other number. Ideally the original function should have used <code>float('-inf')</code> instead of <code>None</code> there, to not be tied to an implementation detail other Python implementations may not share.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def second_smallest(numbers):
...     m1, m2 = float('inf'), float('inf')
...     for x in numbers:
...         if x &lt;= m1:
...             m1, m2 = x, m1
...         elif x &lt; m2:
...             m2 = x
...     return m2
... 
&gt;&gt;&gt; print second_smallest([1, 2, 3, 4])
2
</code></pre>
<p>Outside of the function you found, it's almost just as efficient to use the <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="noreferrer"><code>heapq.nsmallest()</code> function</a> to return the two smallest values from an iterable, and from those two pick the second (or last) value:</p>
<pre><code>from heapq import nsmallest

def second_smallest(numbers):
    return nsmallest(2, numbers)[-1]
</code></pre>
<p>Like the above implementation, this is a O(N) solution; keeping the heap variant each step takes logK time, but K is a constant here (2)! Whatever you do, <em>do not use sorting</em>; that takes O(NlogN) time.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [6,5,4,4,2,1,10,1,2,48]
s = set(a) # used to convert any of the list/tuple to the distinct element and sorted sequence of elements
# Note: above statement will convert list into sets 
print sorted(s)[1] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or just use heapq</p>
<pre><code>import heapq
def second_largest(numbers):
    return heapq.nsmallest(2, numbers)[-1]

second_largest([1, 2, 3, 4])
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per the Python in-built function <code>sorted</code></p>
<pre><code>sorted(my_list)[0]
</code></pre>
<p>gives back the smallest number, and <code>sorted(my_list)[1]</code> does accordingly for the second smallest, and so on and so forth.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use in built function '<em>sorted</em>'</p>
<pre><code>def second_smallest(numbers):

count = 0
l = []
for i in numbers:
    if(i not in l):
        l.append(i)
        count+=1
    if(count==2):
        break

return max(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def second_min_index(ls):
    min_value = min(ls)
    max_value = max(ls)

    # The smallest number changes into the largest.
    for value in ls:
        if value == min_value:
            ls[ls.index(value)] = max_value

    return ls.index(min(ls))
</code></pre>
<p>It's slightly faster than the sort method, and it modifies the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, except that code relies on a small quirk (that raises an exception in Python 3): the fact that <code>None</code> compares as smaller than a number.</p>
<p>Another value that works is <code>float("-inf")</code>, which is a number that is smaller than any other number.</p>
<p>If you use that instead of <code>None</code>, and just change <code>-inf</code> to <code>+inf</code> and <code>&gt;</code> to <code>&lt;</code>, there's no reason it wouldn't work.</p>
<p>Edit: another possibility would be to simply write <code>-x</code> in all the comparisons on <code>x</code>, e.g. do <code>if -x &lt;= m1:</code> et cetera.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here we want to keep an invariant while we scan the list of numbers, for every sublist it must be</p>
<blockquote>
<p><code>m1&lt;=m2&lt;={all other elements}</code></p>
</blockquote>
<p>the minimum length of a list for which the question (2nd smallest) is sensible is 2, so we establish the invariant examining the first and the second element of the list (no need for magic numbers), next we iterate on all the remaining numbers, maintaining our invariant.</p>
<pre><code>def second_smaller(numbers):
    # if len(numbers)&lt;2: return None or otherwise raise an exception

    m1, m2 = numbers[:2]
    if m2&lt;m1: m1, m2 = m2, m1

    for x in numbers[2:]:
        if x &lt;= m1:
            m1, m2 = x, m1
        elif x &lt; m2:
            m2 = x
    return m2
</code></pre>
<p><strong><em>Addendum</em></strong></p>
<p>BTW, the same reasoning should be applied to the <code>second_largest</code> function mentioned by the OP</p>
</div>
<div class="post-text" itemprop="text">
<p>I am writing the code which is using recursion to find the second smallest element in a list.</p>
<pre><code>def small(l):
 small.counter+=1;
 min=l[0];

 emp=[]

 for i in range(len(l)):
    if l[i]&lt;min:
        min=l[i]

 for i in range(len(l)):
    if min==l[i]:
     emp.append(i)

 if small.counter==2:
    print "The Second smallest element is:"+str(min)
 else:
   for j in range(0,len(emp)):

     l.remove(min)

   small(l)
small.counter = 0

list=[-1-1-1-1-1-1-1-1-1,1,1,1,1,1]
small(list)
</code></pre>
<p>You can test it with various input integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a easy way to do . First sort the list and get the second item from the list.</p>
<pre><code>def solution(a_list):

    a_list.sort()
    print a_list[1]

solution([1, 2, -8, -2, -10])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def SecondSmallest(x):
    lowest=min(x[0],x[1])
    lowest2 = max(x[0],x[1])
    for item in x:
         if item &lt; lowest:
            lowest2 = lowest
            lowest = item
         elif lowest2 &gt; item and item &gt; lowest:
            lowest2 = item
    return lowest2

SecondSmallest([10,1,-1,2,3,4,5])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = [41,9000,123,1337]

# second smallest
sorted(l)[1]
123


# second biggest
sorted(l)[-2]
1337
</code></pre>
</div>
<span class="comment-copy">why not give it a try?</span>
<span class="comment-copy">@yurib: that requires knowing why <code>None</code> works as a sentinel for finding the largest values.</span>
<span class="comment-copy">@MartijnPieters that would be a good question to ask here, <i>after</i> he gave it a try...</span>
<span class="comment-copy">I take it this is merely used as an exercise, right? Otherwise, something like<code>sorted(numbers)[1]</code> would probably be preferable.</span>
<span class="comment-copy">@TimPietzcker: why is that preferable? <code>heapq</code> would be preferable, really.</span>
<span class="comment-copy">wow great thoughts!</span>
<span class="comment-copy">A problem with this though that the original doesn't have, if the input sequence is empty or of length 1 getting <code>float('inf')</code> returned back is a bit confusing compared to <code>None</code> in the original</span>
<span class="comment-copy">@GP89: it is easy enough to add a <code>if len(numbers) &lt; 2: return None</code> at the top.</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">Right, just a warning :)</span>
<span class="comment-copy">While the answer may be correct, please add some explanation rather than just a code dump. Also, if I may add, Try to format your code so that there are not blank lines between the lines of code</span>
<span class="comment-copy">In this case, the code is so simple and self-explanatory, that a textual explanation won't add anything useful.</span>
<span class="comment-copy">This is O(NlogK), a little better than <code>sorted()</code> O(NlogN). It beats out the O(N) algorithm until you get to about 10k elements, because <code>heapq</code> uses C optimisations.</span>
<span class="comment-copy">two different n's. O(Nlog(n)) where N is length of the list and <code>n</code> is the <code>n</code> parameter in <code>nsmallest</code></span>
<span class="comment-copy">Ah, yes, fair enough. Still larger than O(N) of course. :-)</span>
<span class="comment-copy">And just for the record: this is not actually an answer to the stated question.</span>
<span class="comment-copy">hmm. I modified it by deleting 7 lines and adding 2</span>
<span class="comment-copy">How does this work if the list is, for example: <code>[19, 19, 20, 21]</code>. If I pick <code>x[1]</code> I will still get the lowest number.</span>
<span class="comment-copy"><code>sorted(list(set(my_list)))[1]</code></span>
<span class="comment-copy">@boldbrandywine  sorted(list(set)), why you need extra list &lt;-&gt; set conversion?   list conversion could be removed</span>
<span class="comment-copy">Not just a quirk, an implementation detail. An artefact of the Python 2 requirement that heterogenous sequences are sortable, so a choice had to be made where <code>None</code> sorts. The choice is arbitrary however.</span>
<span class="comment-copy">it is wrong in case if there r repeatable items, like [1, 1, 2, -8]</span>
<span class="comment-copy">That depends on context. If you have an array of distances of objects from the origin, you might want to know if the second closest object is the same distance as the closest.</span>
