<div class="post-text" itemprop="text">
<p>So I've been getting all caught up in unicode and <code>utf-8</code> as i have a script which grabs images and their titles off the web. Works great, except when their title has special characters (eg. Jökulsárlón.) </p>
<p>it comes out as unicode :-</p>
<pre><code>J\\xc3\\xb6kuls\\xc3\\xa1rl\\xc3\\xb3n
</code></pre>
<p>So i want a way to turn that string into plain text- whether is turning them into nearest 'normal' letters (like plain o instead of ö) or printing those actual symbols (rather than \xc3 etc.) I've tried a billion different ways, but a lot of the things i've been reading havent worked for me in python 3.</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>It's indeed UTF-8 but they're bytes:</p>
<pre><code>&gt;&gt;&gt; b = b'J\xc3\xb6kuls\xc3\xa1rl\xc3\xb3n'
&gt;&gt;&gt; b
b'J\xc3\xb6kuls\xc3\xa1rl\xc3\xb3n'
&gt;&gt;&gt; b.decode('utf-8')
'Jökulsárlón'
</code></pre>
<p>As this is Python 3.x, this is a Unicode string.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>J\xc3\xb6kuls\xc3\xa1rl\xc3\xb3n</code> is not unicode. It may be UTF-8 though.</p>
<p>To turn them into Unicode you have to decode them. <code>s.decode('utf-8')</code> if it were UTF-8, for example.</p>
<p>Before printing or writing you have to encode them again. If you encode to ASCII, the <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">encode method</a> accepts an option that tells it what to do with code points that cannot be represented in the given encoding.</p>
<p>For example: <code>print(s.encode('ascii', errors='ignore')</code></p>
<p><code>errors</code> accepts more options.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your string is <code>&lt;class 'str'&gt;</code> and it prints literally <code>J\\xc3\\xb6kuls\\xc3\\xa1rl\\xc3\\xb3n</code>, then the last line below will decode it:</p>
<pre><code>&gt;&gt;&gt; s='J\\xc3\\xb6kuls\\xc3\\xa1rl\\xc3\\xb3n'
&gt;&gt;&gt; type(s)
&lt;class 'str'&gt;
&gt;&gt;&gt; s
'J\\xc3\\xb6kuls\\xc3\\xa1rl\\xc3\\xb3n'
&gt;&gt;&gt; s.encode('latin1').decode('unicode_escape').encode('latin1').decode('utf8')
'Jökulsárlón'
</code></pre>
<p>How it got that convoluted is unknown. If this isn't the solution, then update your question with the type of the variable holding the string (<code>type(s)</code> for example) and the exact value as shown above for my example.</p>
</div>
<span class="comment-copy">Decode doesnt work in python 3, any equivalent?</span>
<span class="comment-copy">@user3662991: it works on bytes objects, not string objects. If you have a string object, something may be going wrong down the line. Or, alternatively, an encoding option needs to be set to ensure you're getting the Unicode string you need.</span>
<span class="comment-copy">Ah yep my bad, get them confused.   When i do that, it just returns: "AttributeError: 'str' object has no attribute 'decode'". I have a feeling that's because im on python 3 and that was used in python 2, i just dont know what the equivalent is?</span>
<span class="comment-copy">Ah! It doesn't have a decode because it's str, it's already Unicode, just proceed to encode.</span>
<span class="comment-copy">Thats the thing, so i have s = str(get the string here), then c = s.encode('utf-8'). and then print (c)- it still prints it with \xc2\ etc. :(</span>
<span class="comment-copy">Try this: print(s.encode('ascii', errors='ignore'). There are more options for <code>errors</code>.</span>
<span class="comment-copy">No luck. Still the same un-decoded /x15 etc. throughout :(. Thanks for your help anyway, doesnt look like its going to cooperate. I'll have to find a workaround</span>
