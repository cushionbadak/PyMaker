<div class="post-text" itemprop="text">
<p>I'm a self-taught, amateur, purely recreational programmer.  I don't understand all the fancy programming lingo, and I certainly don't have any good resources, apart from this website, where I can go for help.  (i.e., <em>Please dumb it down for me!</em>)  I would imagine my question here is somewhat common, but I honestly couldn't find any answers on Google or this website, probably because I don't know the proper terminology to search for.</p>
<p>~~~</p>
<p>Having said that, I feel I have a pretty solid grasp on the basics of Python.  And now, I've created an application that I'd like to share with a friend.  My application accesses JPEG image files on my computer using a directory path that I've written into the code itself.  However, I'd like my friend to be able to store these image files anywhere on their computer, not necessarily in the file folder that I've been using.</p>
<p>I <em>assume</em> the best way to accomplish this is to allow my friend to choose the directory path for themselves and then to write their chosen directory path to a file <em>at a predetermined location</em> on their computer.  My application would then have <strong>that</strong> file's location prewritten into its code.  This way, it would be trivially easy to open the file at the predetermined location, and then that file would point my application to my friend's chosen directory path.</p>
<p><strong>1.) Are any of my intuitions here misguided?  Are there better ways of doing this?</strong></p>
<p><strong>2.) If you think my general approach is a reasonable one, then is there a good/common place on the computer where applications typically store their directory paths upon installation?</strong></p>
<p>Any advice - or any recommended resources - would be very much appreciated!  Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, the <em>standard</em> way to do this is a lot more complicated and platform-specific:</p>
<p>On traditional Unix, this is pretty simple; you create a text file in some simpler format (e.g., that used by <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">ConfigParser</a>, named, say, <code>~/.myprogram.cfg</code>, and you write a line to it that looks like <code>image_path=/path/to/images</code>.</p>
<p>On most modern Linux systems, or any other FreeDesktop/XDG-based system, you should (<em>at least</em> for GUI apps) instead use a special directory looked up in the environment as <a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html" rel="nofollow noreferrer"><code>XDG_CONFIG_HOME</code></a>, falling back to <code>~/.config</code>, instead of using <code>~</code>.</p>
<p>On Windows, the standard place to store stuff like this is the Windows Registry (e.g., by using <a href="https://docs.python.org/3/library/winreg.html" rel="nofollow noreferrer"><code>winreg</code></a>), by creating a key for your program and storing a value with name <code>image_path</code> and value <code>/path/to/images</code> there.</p>
<p>On Mac, the standard place to store stuff like this is in the <code>NSUserDefaults</code> database (e.g., by using <a href="https://pythonhosted.org/pyobjc/" rel="nofollow noreferrer"><code>PyObjC</code></a>, which isn't part of the stdlib but does come built-in with Apple's pre-installed Python) by opening the default domain for your program and adding a value with key <code>image_path</code> and valueâ€¦ well, you probably want a Cocoa bookmark (maybe even a security-scoped one), not a path.</p>
<p>That probably all sounds way, way too complicated.</p>
<p>One option is to use a library that wraps this all up for you. If you're already using a heavy-duty framework like, say, Qt, it probably has functionality built-in to do that. Otherwise, it may take a lot of searching to find something.</p>
<p>A simpler alternative is to just pretend everything is like traditional Unix. That will work on Windows and Mac. It will be slightly annoying on some Windows versions that your config file will be visible in their home directory, but not a huge deal. It means you won't get some of the bonus features that Mac provides, like being able to magically follow the directory if the user moves it somewhere else on his hard drive, or remembering the settings if he reinstalls OS X and migrates his old settings, but again, usually that's fine.</p>
<p>In between the extremes, you can pretend everything is like Linux, using a special, and unobtrusive, location for the files on Windows and Mac just as you do there. Both platforms have APIs to look up special directories, called "application data" on Windows and "application support" on Mac. Using PyWin32 or PyObjC, respectively, these are pretty easy to look up. (For example, see <a href="https://stackoverflow.com/questions/2063508/find-system-folder-locations-in-python">this answer</a>.) Then you just create a subdirectory there named <code>My App</code> on Windows, or <code>com.mydomain.myapp</code> on Mac, and store the file there.</p>
</div>
<span class="comment-copy">That is absolutely correct. The bad news is that it's OS-specific, and you need to understand how all 3 work at that level in order to do it correctly.</span>
<span class="comment-copy">OK, but where can I go to learn how to do that?  What's the first step?  Is there an article / resource somewhere that could get me started?</span>
<span class="comment-copy">Thank you, thank you, thank you, thank you!  You're awesome!  Totally answered my question.  This is exactly what I was looking for!</span>
<span class="comment-copy">@MikeS.: Do you need any additional info, like where to find the MSDN and Apple docs on how to name your registry key/prefs domain or which functions to call, or is this enough to get started?</span>
<span class="comment-copy"><a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html" rel="nofollow noreferrer">standards.freedesktop.org/basedir-spec/basedir-spec-latest.html</a></span>
<span class="comment-copy">@abarnert: Are you suggesting there's a particular way I'm supposed to name my registry entries in order for them to work properly?  If I wanted to do this for Windows, for example, couldn't I just create a registry associated with my application and then create any keys as I see fit?  Or is there a particular way I'm supposed to do it?  And I think I can figure out the modules and functions on my own, but I appreciate the help :)</span>
<span class="comment-copy">@MikeS.: The <code>image_path</code> part, you can call anything you want. I usually try to use the same names for reg-keys/prefs/config-entries across platforms, but you don't even have to do that, you can load <code>ImagePath</code> on one platform, <code>Image Path</code> on another, and <code>image_path</code> on another.</span>
