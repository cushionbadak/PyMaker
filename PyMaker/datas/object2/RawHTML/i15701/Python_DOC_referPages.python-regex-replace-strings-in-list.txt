<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/493367/python-for-each-list-element-apply-a-function-across-the-list">Python: For each list element apply a function across the list</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>What is the best way to get from this:</p>
<pre><code>['\n    62\n    ', '\n    178\n    ', '\n    7,800\n    ']
</code></pre>
<p>...to this in Python?</p>
<pre><code>['62', '178', '7,800']
</code></pre>
<p>I am trying to strip all non-alphanumeric characters from the strings like below,</p>
<pre><code>import re
re.sub(r'\W+', '', my_string)
</code></pre>
<p>...but with lists/arrays.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its what that <a href="https://docs.python.org/2/library/stdtypes.html#str.strip" rel="nofollow"><code>str.strip([chars])</code></a> is for !  <code>str.strip</code> Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing <strong>whitespace</strong>.</p>
<pre><code>&gt;&gt;&gt; l=['\n    62\n    ', '\n    178\n    ', '\n    7,800\n    ']
&gt;&gt;&gt; [i.strip() for i in l]
['62', '178', '7,800']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run a function over every member of an iterable, like a list, you can do that in three ways: an explicit <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow"><code>for</code></a> statement, a call to the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> function, or a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">comprehension</a>.</p>
<p>A comprehension looks like this:</p>
<pre><code>my_new_strings = [re.sub(r'\W+', '', my_string) for my_string in my_strings]
</code></pre>
<p>But, even if you read the tutorial sections above, this may not make sense unless you first think about how to write it with an explicit loop:</p>
<pre><code>my_new_strings = []
for my_string in my_strings:
    my_new_string.append(re.sub(r'\W', '', my_string))
</code></pre>
<p>A comprehension is basically this pattern condensed. They're nice because they eliminate some boilerplate (which gets in the way of reading code, and provides more places to make mistakes while writing code), can be used in the middle of an expression, and are a little faster. But ultimately, they do the same thing.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x=['\n    62\n    ', '\n    178\n    ', '\n    7,800\n    ']
&gt;&gt;&gt; [re.sub('\W+','',i) for i in x ]
['62', '178', '7800']
</code></pre>
</div>
<span class="comment-copy">@Eric: Thanks. I figured this had to be a dup, but I couldn't find a question with a good answer that would make sense to this OP; that one is perfect.</span>
<span class="comment-copy">@downvoter  please tell the reason of your downvote to community and me to improve my answer !</span>
<span class="comment-copy">Why has this been downvoted? It works well.</span>
<span class="comment-copy">@octosquidopus like you i am surprised an waiting for reason !</span>
<span class="comment-copy">@octosquidopus i thinks this is a pythonc answer for your question ! so if you find this question helpful you can tell this to community with vote or accept the answer !</span>
