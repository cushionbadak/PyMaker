<div class="post-text" itemprop="text">
<p>What is the appropriate exception to raise in a function to signal that a precondition was not met?</p>
<p>Examples:</p>
<pre><code>def print_stats(name, age):
    if name is None:
        raise Exception("name cannot be None")
    if not type(name) is str:
        raise Exception("name must be a string")

    if age is None:
        raise Exception("age cannot be None")
    if age &lt; 0:
        raise Exception("age cannot be negative")

    print("{0} is {1} years old".format(name, age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use both <code>TypeError</code> and <code>ValueError</code>.</p>
<p>The first three exceptions should be <code>TypeError</code>s because we are signaling that the arguments are of an incorrect type.  From the <a href="https://docs.python.org/3/library/exceptions.html#TypeError" rel="nofollow">docs</a>:</p>
<blockquote>
<p><em>exception</em> <code>TypeError</code></p>
<p>Raised when an operation or function is applied to <strong>an object of
  inappropriate type</strong>. The associated value is a string giving details
  about the type mismatch.</p>
</blockquote>
<p>The last exception however should be a <code>ValueError</code> because <code>age</code> is the correct type but has an incorrect value (it is negative).  From the <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow">docs</a>:</p>
<blockquote>
<p><em>exception</em> <code>ValueError</code></p>
<p>Raised when a built-in operation or function receives an argument that
  <strong>has the right type but an inappropriate value</strong>, and the situation is
  not described by a more precise exception such as <code>IndexError</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I also think you should use <code>TypeError</code> and <code>ValueError</code> but you can also improve the way you apply your preconditions.</p>
<p>Some time ago I was playing with postconditions and preconditions. Python allows you to write a much more elegant solution using decorators instead those <code>if</code> statements inside the function.</p>
<p>For instance:</p>
<pre><code>def precondition(predicate, exception, msg):        // 1
    def wrapper(func):
        def percond_mechanism(*args, **kwargs):     // 2
            if predicate(*args, **kwargs):
                return func(*args, **kwargs)        // 3
            else:
                raise exception(msg)                // 4
        return percond_mechanism
    return wrapper
</code></pre>
<ol>
<li>The condition, the exception you want to raise if the condition is not fulfilled and the message you want to show.</li>
<li>This part check if the condition is fulfilled.</li>
<li>If everething is ok, just return the result of the original funcion.</li>
<li>If not, raise the exception you pass with your message.</li>
</ol>
<p>Now you can write your function like this:</p>
<pre><code>@precondition(lambda name, age: name is not None, ValueError, "name can't be None")
@precondition(lambda name, age: type(name) is str, TypeError, "name has to be str")
# You can continue adding preconditions here.
def print_stats(name, age):
    print("{0} is {1} years old".format(name, age))
</code></pre>
<p>This way is much more easier to read what can and can't be done. And actualy, you can use this <code>precondition</code> decorator in any function you want to.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would go with <code>ValueError</code>: </p>
<blockquote>
<p>Raised when a built-in operation or function receives an argument that
  has the right type but an inappropriate value, and the situation is
  not described by a more precise exception such as IndexError.</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/2/library/exceptions.html" rel="nofollow">https://docs.python.org/2/library/exceptions.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I like <a href="https://stackoverflow.com/a/26916460/240490">Raydel Miranda's answer</a> using decorator pre-conditions for the function. Here is an somewhat similar approach that, instead of decorators, uses introspection and <code>eval</code>. It would be less efficient, but arguably slightly more concise and expressive.</p>
<pre><code>import inspect

class ValidationError(ValueError):
    pass

def validate(assertion, exc=ValidationError, msg=''):
    """
    Validate the given assertion using values
    from the calling function or method. By default,
    raises a `ValidationException`, but optionally
    raises any other kind of exeception you like.
    A message can be provided, and will be formatted
    in the context of the calling function. If no
    message is specified, the test assertion will be
    recapitulated as the cause of the exception.
    """
    frame = inspect.currentframe().f_back
    f_locals, f_globals = frame.f_locals, frame.f_globals
    result = eval(assertion, f_globals, f_locals)
    if result:
        return
    else:
        if msg:
            msg = msg.format(**f_locals)
        else:
            msg = 'fails test {0!r}'.format(assertion)
        raise(exc(msg))

def r(name):
    validate('isinstance(name, str)', msg='name must be str (was {name!r})')
    validate('name.strip() != ""',    msg='name must be non-empty (was {name!r})')
    print(name,)

def r2(name, age):
    validate('isinstance(name, str)', TypeError,  'name must be str (was {name!r})')
    validate('name.strip() != ""',    ValueError, 'name must be non-empty (was {name!r})')
    validate('isinstance(age, int)',  TypeError,  'age must be int (was {age!r})')
    validate('age &gt;= 0',              ValueError, 'age must be non-negative (was {age!r})')
    print(name,)

r('Joe')
r('')
r2('Dale', -3)
r2('Dale', None)
</code></pre>
<p>This will raise exceptions such as:</p>
<pre><code>ValidationError: name must be non-empty (was '')
</code></pre>
<p>Also nice: If you don't specify any message, it still gives reasonable output. For example:</p>
<pre><code>def r2simple(name, age):
    validate('isinstance(name, str)')
    validate('name.strip() != ""')
    validate('isinstance(age, int)')
    validate('age &gt;= 0')
    print(name,)

r2simple('Biff', -1)
</code></pre>
<p>Yields:</p>
<pre><code>ValidationError: fails test 'age &gt;= 0'
</code></pre>
<p>This will work under either Python 2 or 3.</p>
</div>
<span class="comment-copy">Out of curiosity, a <code>TypeError</code> applies to <code>an operation or function is applied to an object of inappropriate type</code>. Strictly speaking - is it preferred to treat it as a TypeError while performing the operation ("let it fail"), or to treat it as a validation error (ValueError)? I'm looking at the phrases "operation or function receives an argument" vs "operation or function is applied to an object", if that makes sense. (I understand that None is the wrong type in this specific instance.)</span>
<span class="comment-copy"><code>ValueError</code> is not exactly a "validation error".  That would be more of an <code>AssertionError</code>.  The difference between <code>TypeError</code> and <code>ValueError</code> is simply the question "does the inappropriate object have the right type?"  If it does, raise a <code>ValueError</code>.  Otherwise, raise a <code>TypeError</code>.  The two exceptions are basically the same thing other than that; they both mean we encountered an inappropriate object.</span>
