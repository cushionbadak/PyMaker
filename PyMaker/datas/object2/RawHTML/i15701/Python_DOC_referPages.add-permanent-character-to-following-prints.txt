<div class="post-text" itemprop="text">
<p>Is there an easy way in python to add a permanent character (or string) to several prints ?</p>
<p>Example:</p>
<pre><code>add_string('Hello ')
print('World')
print('You')
</code></pre>
<p>would output</p>
<pre><code>Hello World
Hello You
</code></pre>
<p>Is there a way to do it without changing the following part of the code:</p>
<pre><code>print('World')
print('You')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have your <code>add_string</code> function overwrite the builtin <code>print</code> function:</p>
<pre><code>from __future__ import print_function  # for python 2.x

def add_string(prefix):
    def print_with_prefix(*args, **kwargs):
        if prefix:
            args = (prefix,) + args
        __builtins__.print(*args, **kwargs)
    global print
    print = print_with_prefix
</code></pre>
<p>You can set or unset the prefix while preserving any other arguments passed to <code>print</code>.</p>
<pre><code>print("foo")                                  # prints 'foo'
add_string("&gt;&gt;&gt;")
print("bar")                                  # prints '&gt;&gt;&gt; bar'
print("bar", "42", sep=' + ', end="###\n")    # prints '&gt;&gt;&gt; + bar + 42###'
add_string(None)
print("blub")                                 # prints 'blub'
</code></pre>
<p>If you are using the <code>print</code> statement (i.e. <code>print "foo"</code> instead of <code>print("foo")</code>) then you have to redefine <code>sys.stdout</code> with a custom writer:</p>
<pre><code>import sys
stdout = sys.stdout
def add_string(prefix):
    class MyPrint:
        def write(self, text):
            stdout.write((prefix + text) if text.strip() else text)
    sys.stdout = MyPrint() if prefix else stdout
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you want to add it to several, but not all, it might be best to use a self-made function that adds something, so you can just call that function for the cases where you want to add it, and don't in the cases you don't want to add it </p>
<pre><code>def custom_print(text):
    print('Hello ' + text)

custom_print('World') # output: Hello World
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from __future__ import print_function # needed for python 2.7


def print(*args, **kwargs):
    return __builtins__.print("Hello",*args, **kwargs)

print('World')
Hello World
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try like this:</p>
<pre><code>def my_print(custom="Hello",my):
    print(custom + ' ' + my)
my_print(my='world')
my_print(my="you")
my_print(custom="Hey",'you')
</code></pre>
<p>output:</p>
<pre><code>Hello world
Hello you
Hey you
</code></pre>
<p>you can use custom key argument of form <code>kwarg = Value</code><br/>
for more check here <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow">https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments</a></p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/550470/overload-print-python">overload print python</a>.</span>
<span class="comment-copy">Thanks for your answer. However, I've got numerous print with python 2.x syntax (print 'haha'), and they produce errors with python 3.</span>
<span class="comment-copy">In this case you will have to replace <code>sys.stdout</code> with a custom writer.</span>
