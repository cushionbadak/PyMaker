<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>{'a': 1, 'b': [2, 3], 'c': [8, 5]}
</code></pre>
<p>I want to get only the maximum value wherever there is a list in the value place of the dictionary. Like for this example, I want:</p>
<pre><code>{'a':1, 'b': 3, 'c':8}
</code></pre>
<p>as the output.</p>
<p>I was doing:</p>
<pre><code>for key in s_dict:
    x = s_dict.values()
    for elem in x:
        y = max(elem)
</code></pre>
<p>But, I'm getting an error:</p>
<pre><code>  y = max(elem)
TypeError: 'int' object is not iterable`.
</code></pre>
<p>Could somebody please tell me how to fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dict comprehension</a> and test whether each value is a list with <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow"><code>isinstance</code></a>:</p>
<pre><code>&gt;&gt;&gt; s_dict = {'a': 1, 'b': [2, 3], 'c': [8, 5]}
&gt;&gt;&gt; {k: max(v) if isinstance(v, list) else v for k,v in s_dict.items()}
{'c': 8, 'a': 1, 'b': 3}
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use numpy's max(), then it doesn't matter whether the element is a list:</p>
<pre><code>import numpy as np
for key in s_dict:
    x = s_dict.values()
    for elem in x:
        y = np.max(elem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>try/except</code>, as @AdamSmith suggested, in a generator function.</p>
<pre><code>d = {'a': 1, 'b': [2, 3], 'c': [8, 5]}
def foo(d):
    # use d.iteritems() for Python v2.x
    for k, v in d.items():
        try:
            yield k, max(v)
        except TypeError:
            yield k, v
</code></pre>
<p>Usage</p>
<pre><code>&gt;&gt;&gt; f = foo(d)
&gt;&gt;&gt; f
&lt;generator object foo at 0x03377198&gt;
&gt;&gt;&gt; dict(f)
{'a': 1, 'c': 8, 'b': 3}
&gt;&gt;&gt;
&gt;&gt;&gt; list(foo(d))
[('a', 1), ('c', 8), ('b', 3)]
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">because half the time you're trying to do <code>max(1)</code> not <code>max([2,3])</code>. <code>1</code> is not iterable. Instead do: <code>try: y = max(elem) except TypeError: y = elem</code></span>
<span class="comment-copy">not bad, though I prefer <code>if hasattr(v, '__iter__')</code></span>
<span class="comment-copy">Well, I went with <code>isinstance</code> because there is nothing to suggest that the values could be anything other than ints and lists.  Interesting fun fact though: you can make an iterable type without an <code>__iter__</code> method by overloading <code>__getitem__</code> instead.  So, <code>if hasattr(v, '__iter__')</code> would also fail if the values can be some other kind of iterable. :)</span>
