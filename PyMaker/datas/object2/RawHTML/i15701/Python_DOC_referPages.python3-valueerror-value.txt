<div class="post-text" itemprop="text">
<p>I am trying to write a function using <code>python3</code>, with <code>exception handling</code>.
I thought <code>ValueError</code> is the right tool to check if the value is in given range, as given <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">here in python3 doc</a> which says:</p>
<blockquote>
<p>function receives an argument that has the right type but an inappropriate value</p>
</blockquote>
<p>So, in this my tiny snippet, I am expecting to use ValueError to check range(0-1) which is not doing:</p>
<pre><code>while True:
    try:
        imode = int(input("Generate for EOS(0) or S2(1)"))
    except (ValueError):
        print("Mode not recognised! Retry")
        continue
    else:
        break
print(imode)
</code></pre>
<p>which yeilds:</p>
<pre><code>Generate for EOS(0) or S2(1)3
3
</code></pre>
<p>Sure, I can do the value checking as:</p>
<pre><code>if (imode &lt; 0 or imode &gt; 1):
    print("Mode not recogised. RETRY!")
    continue
else:
    break
</code></pre>
<p>but the ValueError seems do do this thing. </p>
<p>There are several question on <code>ValueError</code> here, but none of them checking "inappropriate value, e.g. <a href="https://stackoverflow.com/questions/17165427/python-exception-valueerror-error-handling">this</a>
I am a novice and python is not my main language.
Kindly give me some insight.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you misunderstand what <code>ValueError</code> (and in general, an <code>Exception</code>) is.</p>
<p><code>Exceptions</code> are a way for a method to signal to its caller that some critical error condition has been encountered that would prevent that method from executing as intended. Python's <a href="https://docs.python.org/2/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer"><code>try-except-finally</code></a> control structure provides a way for the caller to detect those error conditions and react accordingly.</p>
<p><code>ValueError</code> is a standard <code>Exception</code> raised by various methods that perform range-checking of some kind to signal that a value provided to the method fell outside the valid range. In other words, it's a universal way of signaling that error condition. <code>ValueError</code> by itself doesn't do any kind of checking. There are many other standard <code>Exceptions</code> like this; <code>KeyError</code> signifies that you tried to access a key in a mapping structure (like a <code>dict</code> or <code>set</code>) that didn't exist, <code>IndexError</code> means you tried to index into a list-like structure to an invalid location, etc. None of them actually do anything special in and of themselves, they're simply a way of directly specifying exactly what kind of problem was encountered by the called method. </p>
<p><code>Exceptions</code> go hand in hand with the idiom in python that it is generally considered <a href="https://stackoverflow.com/questions/6092992/why-is-it-easier-to-ask-forgiveness-than-permission-in-python-but-not-in-java">'easier to ask forgiveness than permission'</a>. Many languages support exceptions of course, but Python is one of the few where you will very frequently see code where the <code>Exception</code> case is actually a commonly-followed code path rather than one that only happens when something has gone really wrong.</p>
<p>Here is an example of the correct use of a <code>ValueError</code>:</p>
<pre><code>def gen(selection):
    if imode == 0:
        # do EOS stuff here
    elif imode == 1:
        # do S2 stuff here
    else:
        raise ValueError("Please Select An Option Between 0-1")

def selector():
    while True:
        try:
            gen(int(input("Generate for EOS(0) or S2(1)")))
            break
        except ValueError as e: # This will actually satisfy two cases; If the user entered not a number, in which case int() raises, or if they entered a number out of bounds, in which chase gen() raises.
            print(e) 
</code></pre>
<p>Note there are probably much more direct ways to do what you want, but this is just serving as an example of how to correctly use a <code>ValueError</code>.</p>
</div>
<span class="comment-copy">What made you think that ValueError knows your range?</span>
<span class="comment-copy">Just use a normal check. Exceptions handlers are used where a normal check with the <code>if</code> construct is not enough. In your case is sufficient ;)</span>
<span class="comment-copy">But if you want to prevent conversion errors (you try to convert to <code>int</code>, but the user enters a <code>char</code>), then you should catch the <code>ValueError</code> exception!</span>
<span class="comment-copy">I recommend you to see more about exceptions and how to handle them, then you will understand better when to use them ;)</span>
