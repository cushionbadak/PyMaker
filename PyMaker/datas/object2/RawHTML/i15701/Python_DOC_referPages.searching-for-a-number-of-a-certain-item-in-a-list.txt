<div class="post-text" itemprop="text">
<p>I want to look for a certain item in a list, but there may be more than 1 of this item in the list, but I want it so that for each item in the list, it will do something.</p>
<p>For example:</p>
<pre><code>list = ["1", "1", "2"]
for "1" in list:
    print ("hi")
</code></pre>
<p>and it should print out <code>'hi'</code> twice, for the 2 <code>'1'</code>s in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the count method to do this:</p>
<pre><code>lst = ["1", "1", "2"]
for i in range(lst.count("1")):
   print "Hi"
</code></pre>
<p><strong>One liner</strong>:</p>
<pre><code>print "Hi\n" * lst.count("1")
</code></pre>
<p><strong>Note</strong>: I have changed the variable name 'list' to 'lst' as a good practice to avoid the python's keyword overriding.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this easily with python's built in filter syntax:</p>
<pre><code>def hi(number, lst):
    for item in (element for element in lst if element == number):
        print('hi')
</code></pre>
<p>The advantage of this method over the others presented is that you can actually do something with the elements that match your criteria as you iterate, should you wish to.</p>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt;hi(1,[1,1,2])
hi
hi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the simplest, most readable syntax.  It says exactly what it does, imports no modules, calls no functions and creates no temporary variables.  It would be easy to substitute any comparison and any function taking <code>item</code> as a parameter.</p>
<pre><code>for item in lst:
    if element == number:
        print('hi')
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html#for-statements</a></span>
<span class="comment-copy">This seems the closest to what the question asked for but unfortunately the syntax is not correct - you need the full generator expression.  It would be nice if python did do this.</span>
<span class="comment-copy">@neil doh, you're right, was answering on my cellphone and got lazy typing. Fixed</span>
<span class="comment-copy">That's better - and it gives you access to each item to do whatever.</span>
<span class="comment-copy">@neil And python kind of does with list-comps, I.E. this could be re-written into simply <code>[print('hi') for element in lst if item == element]</code>, it just doesn't allow you to do it without creating a useless list of the returns from your method in a case this simple, or a needlessly verbose for-loop with a generator. I agree it would be quite handy to have a <code>map()</code> that didn't allocate a list, it simply did the iterate+apply-method. Or just made <code>for</code> loops nearly as fast as <code>map</code> or list comprehensions.</span>
