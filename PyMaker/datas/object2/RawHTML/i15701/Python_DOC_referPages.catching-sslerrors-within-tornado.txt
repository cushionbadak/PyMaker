<div class="post-text" itemprop="text">
<p>I'm running Tornado 4.0.2 in a Python 2.7.5 virtualenv using SSL and a self-signed certificate and am the following SSLError is showing up repeatedly:</p>
<pre><code>SSLError: [Errno 1] _ssl.c:1419: error:14094418:SSL routines:SSL3_READ_BYTES:tlsv1 alert unknown ca
</code></pre>
<p>A few questions follow:</p>
<ol>
<li><p>I'm assuming these exceptions are due to clients freaking out about my self-signed certificate. Is this correct?</p></li>
<li><p>Assuming this is the case - I don't care about this exception, and I don't want to see it in the log. (It's an internal webserver - we're never going to pay for a CA. All connections are just going to have to be untrusted.) In an attempt to catch the exceptions myself, I've tried subclassing IOLoop as follows:</p>
<pre><code>class MyIOLoop(IOLoop):
    def handle_callback_exception(callback):
        print "Exception in callback", callback

if __name__ == "__main__":
    app = Application(urls, compress_response = True)
    ioloop=MyIOLoop.instance()
    http_server = httpserver.HTTPServer(app, ssl_options={"certfile": "cert.pem", "keyfile": "key.pem" }, io_loop=ioloop )
    http_server.listen(8888)
    ioloop.start()
</code></pre></li>
</ol>
<p>But this hasn't helped - I still get the full stack trace.</p>
<p>What do I need to do to handle (i.e. ignore) such exceptions myself? I've experimented with setting <code>cert_reqs" : ssl.CERT_NONE</code> in the ssl_options but that also hasn't helped.</p>
<ol start="3">
<li>Is there anything else I need to do - such as close the connection myself - when I've caught such an exception? If so, what, and how?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I also <a href="https://groups.google.com/forum/#!topic/python-tornado/MnNbTemU6ps" rel="nofollow">asked this question on the Tornado mailing list</a>, and got the following response:</p>
<blockquote>
<p>This error is coming from HTTP1ServerConnection, not IOLoop (I think
  it's uncommon for errors to make it all the way up to the IOLoop these
  days). You're correct that this means that a client has refused to
  connect because it doesn't trust your certificate. It's arguably
  useful to log something in this case (you'd want to know if this
  started happening a lot), but it should be at most one line instead of
  a full stack trace. It might also be better to treat it as more like
  ECONNRESET and log nothing.</p>
<p>We don't currently expose any useful ways to customize this logging,
  but you have options in the logging module itself. You could attach a
  Filter to the logger and block entries where exc_info[0] is SSLError
  and exc_info[1] has the right error code, for example.</p>
</blockquote>
<p>I ended up adding a filter to Tornado's logger as suggested. One slight snag was that <code>record.exc_info</code> was sometimes <code>None</code>, but in such situations I was able to get enough information out of <code>record.args</code> to decide if I want to filter it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following on from <a href="https://stackoverflow.com/a/26936729/320036">helgridly's own answer</a>: the error <a href="https://groups.google.com/forum/#!topic/python-tornado/MnNbTemU6ps" rel="nofollow noreferrer">can't be caught</a>, but you can <a href="https://docs.python.org/3/library/logging.html#logging.Filter" rel="nofollow noreferrer">filter</a> the logs.</p>
<ol>
<li>Create a function that checks for the presence of an SSL error in a log record, and rejects certain such errors</li>
<li>Install it as a filter for the <code>tornado.general</code> logger</li>
</ol>
<p>For example:</p>
<pre><code>def ssl_log_filter(record):
    if record.exc_info is not None:
        e = record.exc_info[1]
    elif len(record.args) &gt;= 3 and isinstance(record.args[2], Exception):
        e = record.args[2]
    else:
        e = None

    if isinstance(e, SSLEOFError):
        return False
    if isinstance(e, SSLError):
        if e.reason in {'NO_SHARED_CIPHER'}:
            return False

    return True


logging.getLogger('tornado.general').addFilter(ssl_log_filter)
</code></pre>
<p>The code above will only work for Python 3.2+. For older versions, subclass <code>Filter</code> instead.</p>
</div>
<span class="comment-copy">Interesting, but how did you add the filter?</span>
