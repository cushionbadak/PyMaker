<div class="post-text" itemprop="text">
<p>I have a program written in C++ and all it does is divide 1/0 to produce an exception.</p>
<p>I run the .exe of this program via Python's subprocess library. My goal is to capture and log the exception that C++ program makes, within Python.</p>
<pre><code>p = subprocess.Popen(['C:\\Users\\name\\Desktop\\Win32Project1.exe'])
</code></pre>
<p>When this line of code executes p is a non zero value meaning an error has occured.
I'm running windows 7 and using Python 3.4.1</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm quite sure you can't track exceptions from a different process.
You should try-catch the exception within the C++ program and pass it by one of the many inter-process communication means.</p>
<p>HTH,
Cabbi</p>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>cmd = ['C:\\Users\\name\\Desktop\\Win32Project1.exe']
out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
print out  # this prints the output of the execution
print err  # this prints if any error is returned
</code></pre>
<p>I don't have windows, so this is not tested, but might help you, for more info have a look <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can also pass other parameters to subprocess.Popen that specify where stdin and stderr go.</p>
<p>Then you can say <strong>something</strong> like:</p>
<pre><code>p = subprocess.Popen('C:\\Users\\name\\Desktop\\Win32Project1.exe', stdout=PIPE, stderr=PIPE)
(stdout_data, stderr_data) = p.communicate()

rc = p.returncode

# assume 0 return code means o.k.
if rc:
  parse_error(stderr_data)
  # end if
</code></pre>
</div>
<span class="comment-copy">Depending on how much control you need you will need to handle stdout and stderr pipes + wait() for the return value.  Maybe <a href="https://docs.python.org/3.3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">check_output</a> does the job for you?</span>
<span class="comment-copy"><i>When this line of code executes p is a non zero value meaning an error has occured</i> - no, that's not what happens. <code>subprocess.Popen</code> returns a Popen object that is never zero. You can call <code>p.wait()</code> and get the return code if you'd like.</span>
<span class="comment-copy">When I run the process with windbg, it tracks the exception and logs the error, so it must be possible, yeah? Going through the C++ code and modifying it would not be an option in my case.</span>
<span class="comment-copy">You can use python to interact with a platform's debug facilities. I searched <a href="https://www.google.com/search?client=ubuntu&amp;channel=fs&amp;q=call+windows+debug+hooks+from+python&amp;ie=utf-8&amp;oe=utf-8" rel="nofollow noreferrer">call windows debug hooks from python</a> and got some interesting answers like <a href="http://winappdbg.sourceforge.net/" rel="nofollow noreferrer">winappdbg</a>. But to be fair to @cabbi, you kinda blindsided him here by not mentioning that you are trying to write a debugger. For most users, you don't try to grab an exception from other programs.</span>
<span class="comment-copy">The best solution I've found and might work (I didn't test it) is starting the process in a new Application Domain. Here an example in C#: <a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/62259e21-3280-4d10-a27c-740d35efe51c/catch-another-process-unhandled-exception?forum=csharpgeneral" rel="nofollow noreferrer">social.msdn.microsoft.com/Forums/vstudio/en-US/â€¦</a></span>
<span class="comment-copy">@tdelaney winappdbg is what ultimately solved my problem, Thank you!</span>
