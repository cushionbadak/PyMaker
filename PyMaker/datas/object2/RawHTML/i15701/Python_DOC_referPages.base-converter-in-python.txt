<div class="post-text" itemprop="text">
<p>I am writing a program to convert in any base to base 10 in Python. The code for the program is shown below.</p>
<pre><code>print("Enter the number you want to convert to base 10: ")
number = input()
"""length of the digit entered"""
length = len(number)
print("Enter the base of the number: ")
base = input()

for i in range(len(number)):
    length = length - 1
    """Computes the sum for each digit"""
    s = number[i] * (int(base) ^ length) 
    s += s
print(s)
</code></pre>
<p>The problem is that for any number I enter the answer is always 1111. Any advice on how to fix this issue will be welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>^</code> is the <a href="https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations" rel="nofollow">bitwise XOR operator</a>, not the power operator. In Python the <a href="https://docs.python.org/3/reference/expressions.html#the-power-operator" rel="nofollow">power operator is <code>**</code></a>:</p>
<pre><code>s = number[i] * (int(base) ** length)
</code></pre>
<p>There are other mistakes too; <code>s += s</code> is simply <code>s *= 2</code>, you are doubling the number there. You probably want to start with <code>s = 0</code> <em>outside</em> the loop then sum to that:</p>
<pre><code>s = 0
for i in range(len(number)):
    length = length - 1
    """Computes the sum for each digit"""
    s += number[i] * (int(base) ^ length) 
</code></pre>
<p>but you are not converting <code>number[i]</code> to an actual numeric value there yet.</p>
<p>You'll want a mapping from 'digit' to numerical value here:</p>
<pre><code>digits = {c: i for i, c in enumerate('0123456789abcdefghijklmnopqrstuvwxyz')}
</code></pre>
<p>This creates a dictionary mapping from string digit to numerical value, so <code>'7'</code> maps to <code>7</code> and <code>f</code> maps to 15, etc. giving you a mapping all the way up to base 36.</p>
<p>Now you can use <code>digits</code> to map from string digit to numerical value:</p>
<pre><code>s = 0
base = int(base)
for i, digit in enumerate(reversed(number.lower())):
    s += digits[digit] * (base ** i) 
</code></pre>
<p>I reversed the processing of the digits here; much easier to go from smaller to larger. <code>enumerate()</code> gives us an index count, and you can loop <em>directly</em> over <code>number</code> to yield characters, rather than use <code>range()</code> and index into <code>number</code>. I lowercase <code>number</code> so that <code>a</code> and <code>A</code> both mean <code>10</code> in bases that go that high.</p>
<p>This then can be turned into a one-liner in a function:</p>
<pre><code>digits = {c: i for i, c in enumerate('0123456789abcdefghijklmnopqrstuvwxyz')}

def parse_number(number, base):
    return sum(digits[digit] * (base ** i)
               for i, digit in enumerate(reversed(number.lower())))

print(parse_number(number, int(base)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To find the value for any digit, you need to know not only its position and base, but the set and ordering of the possible digits. In the code:</p>
<pre><code>s = number[i] * (int(base) ^ length) 
</code></pre>
<p>I don't see a conversion from the character representation of a digit <code>number[i]</code> to a numeric value. The line after it is even odder, as you just double <code>s</code>, rather than collecting a sum of values. </p>
<p>(As a side note, Python's <code>int</code> type already handles bases from 2 to 36.)</p>
<p>Just because the exercise is fun, here's a slightly different approach:</p>
<pre><code>import string

number = input("Enter a number: ")
base = int(input("Enter the base: "))
digits = (string.digits+string.ascii_lowercase)[:base]

result = 0
for digit in number.lower():
    result = result*base + digits.index(digit)

print(result)
</code></pre>
</div>
<span class="comment-copy">Use <code>raw_input</code> and <code>enumerate(number[::-1])</code></span>
<span class="comment-copy">@Dabrion <code>raw_input</code> is obsolete in python 3. Don't recommend it to new programmers.</span>
<span class="comment-copy">@simonzack fair enough, should be flagged python3 in that case.</span>
<span class="comment-copy">I changed it to ** but it gives me 11 as answer for any number. Any help please?</span>
<span class="comment-copy">It works, thanks!!!</span>
<span class="comment-copy">Sure <code>int()</code> already does this, but then the OP wouldn't have a coding exercise anymore. :-P</span>
