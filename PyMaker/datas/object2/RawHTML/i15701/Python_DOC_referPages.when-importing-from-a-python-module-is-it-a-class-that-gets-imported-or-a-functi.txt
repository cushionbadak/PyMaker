<div class="post-text" itemprop="text">
<p>In Code Academy's python training there's a lesson about importing datetime. The syntax is: </p>
<p>from <em>datetime</em> import <em>datetime</em></p>
<p>After importation I'm able to write <strong>now = datetime.now()</strong> and evaluate <strong>now.hour</strong>, <strong>now.minute</strong> and <strong>now.second</strong>. I see in the datetime module that .now (), .hour, .minute and .second are defined in the datetime class. Which leads me to interpret the import statement as saying: </p>
<p>from <em>datetime module</em> import <em>datetime class</em> </p>
<p>And so it seems that access to the datetime class is what gave me access to the .now(), .hour, .minute and .second definitions.</p>
<p>But later I discovered that I'm also able to evaluate <strong>now.month</strong>, <strong>now.day</strong> and <strong>now.year</strong>. Even though .month .day and .year are <strong>not</strong> in the datetime class. Rather they're in a different class called <strong>date</strong>.</p>
<p>How could I access definitions from the date class when it seems I only imported the datetime class?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you look through the source of <code>datetime.py</code>, you'll notice this line (line 1290 in 3.4.2):</p>
<pre><code>class datetime(date):
</code></pre>
<p>This is the class definition for the <code>datetime</code> class, which is inheriting from the previously-defined <code>date</code> class. Therefore, a datetime object (an instantiation of the <code>datetime</code> class) can access properties and methods defined in the <code>date</code> class, as long as they were not overridden by <code>datetime</code>.</p>
<p>You can read more about classes <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow">here</a>, and about inheritance in particular <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">Your question title is quite different than what you're actually asking in the question body. To answer the title: It depends! You can import classes and functions, but you can also import other things too. If you use <code>import some_module</code>, you'll get a module object (which probably contains other things). If you use <code>from some_module import some_name</code>, you'll get whatever object <code>some_name</code> references in <code>some_module</code> (it could be a class or a function, but could also be any other kind of object). There's no way to know (without reading the module documentation) what type of object you'll get.</span>
<span class="comment-copy">The title reflects my initial misunderstanding about classes vs functions. I just started learning programming this weekend. As I was typing the body I managed to flesh out my actual question but forgot to change the title. Either way, I'm glad you answered the title specifically because I just learned something else.</span>
<span class="comment-copy">Ahhh! That explains it very well. Gracias.</span>
