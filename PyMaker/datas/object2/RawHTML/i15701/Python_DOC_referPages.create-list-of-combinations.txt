<div class="post-text" itemprop="text">
<p>I would like to create a list of numbers with three values and would like to cover every combination from 0 - 3. For example:</p>
<pre><code>0, 0, 0
0, 0, 1
...
1, 0, 3
1, 1, 3
</code></pre>
<p>all the way to <code>3, 3, 3</code>. </p>
<p>Is there a better way to do this than using multiple for loops? </p>
<p>Here is the code that I used: </p>
<pre><code>for i in range (0, 4):
    for x in range (0, 4):
        for t in range (0, 4):
        assign = [i, x, t]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>:</p>
<p><code>list(itertools.product(range(4), repeat=3))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>itertools.product()</code> function for that:</p>
<pre><code>from itertools import product

for i, x, t in product(range(4), repeat=3):
    print (i, x, t)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for i, x, t in product(range(4), repeat=3):
...     print (i, x, t)
... 
(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 0, 3)
(0, 1, 0)
# ... truncated for readability ...
(3, 2, 3)
(3, 3, 0)
(3, 3, 1)
(3, 3, 2)
(3, 3, 3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product({0, 1, 2, 3}, repeat=3))
[(0, 0, 0), (0, 0, 1), (0, 0, 2), (0, 0, 3), (0, 1, 0), (0, 1, 1), (0, 1, 2), (0, 1, 3), (0, 2, 0), (0, 2, 1), (0, 2, 2), (0, 2, 3), (0, 3, 0), (0, 3, 1), (0, 3, 2), (0, 3, 3), (1, 0, 0), (1, 0, 1), (1, 0, 2), (1, 0, 3), (1, 1, 0), (1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 0), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 0), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 0, 0), (2, 0, 1), (2, 0, 2), (2, 0, 3), (2, 1, 0), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 0), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 0), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 0, 0), (3, 0, 1), (3, 0, 2), (3, 0, 3), (3, 1, 0), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 0), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 0), (3, 3, 1), (3, 3, 2), (3, 3, 3)]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>itertools.product()</code> is a great solution, but if you should happen to want a list of lists and not tuples, you could use this:</p>
<pre><code>[ [x,y,z] for x,y,z in itertools.product(range(4), repeat=3)]
</code></pre>
<p>or the equivalent list comprehension:</p>
<pre><code>[ [x,y,z] for x in range(0,4)
            for y in range(0,4)
                for z in range(0,4)]
</code></pre>
</div>
