<div class="post-text" itemprop="text">
<p>I am currently trying to make a text file with numbers into a list
the text file is </p>
<pre><code>1.89
1.99
2.14 
2.51  
5.03  
3.81  
1.97 
2.31  
2.91  
3.97 
2.68 
2.44
</code></pre>
<p>Right now I only know how to read the file. How can i make this into a list?
afterwards how can I assign the list to another list?
for example </p>
<pre><code>jan = 1.89
feb = 1.99 
</code></pre>
<p>etc</p>
<p>Code from comments:</p>
<pre><code>inFile = open('program9.txt', 'r') 
lineRead = inFile.readline() 
while lineRead != '': 
    words = lineRead.split() 
    annualRainfall = float(words[0]) 
    print(format(annualRainfall, '.2f')) 
    lineRead = inFile.readline() 
inFile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A file is already an iterable of lines, so you don't have to do <em>anything</em> to make it into an iterable of lines.</p>
<p>If you want to make it specifically into a <em>list</em> of lines, you can do the same thing as with any other iterable: call <a href="https://docs.python.org/3/library/functions.html#list" rel="nofollow"><code>list</code></a> on it:</p>
<pre><code>with open(filename) as f:
    lines = list(f)
</code></pre>
<p>But if you want to convert this into a list of floats, it doesn't matter what kind of iterable you start with, so you might as well just use the file as-is:</p>
<pre><code>with open(filename) as f:
    floats = [float(line) for line in f]
</code></pre>
<p>(Note that <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow"><code>float</code></a> ignores trailing whitespace, so it doesn't matter whether you use a method that strips off the newlines or leaves them in place.)</p>
<hr/>
<p>From a comment:</p>
<blockquote>
<p>now i just need to find out how to assign the list to another list like jan = 1.89, feb = 1.99 and so on</p>
</blockquote>
<p>If you know you have exactly 12 values (and it will be an error if you don't), you can write whichever of these looks nicer to you:</p>
<pre><code>jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec = (float(line) for line in f)
jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec = map(float, f)
</code></pre>
<p>However, it's often a bad idea to have 12 separate variables like this. Without knowing how you're planning to use them, it's hard to say for sure (see <a href="http://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow">Keep data out of your variable names</a> for some relevant background on making the decision yourself), but it might be better to have, say, a single dictionary, using the month names as keys:</p>
<pre><code>floats = dict(zip('jan feb mar apr may jun jul aug sep oct nov dec'.split(),
                  map(float, f))
</code></pre>
<p>Or to just leave the values in a list, and use the month names as just symbolic names for indices into that list:</p>
<pre><code>&gt;&gt;&gt; jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec = range(12)
&gt;&gt;&gt; print(floats[mar])
2.14
</code></pre>
<p>That might be even nicer with an <a href="https://docs.python.org/3/library/enum.html#enum.IntEnum" rel="nofollow"><code>IntEnum</code></a>, or maybe a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a>. Again, it really depends on how you plan to use the data after importing them.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>months = ('jan', 'feb', ...)

with open('filename', 'rb') as f:
  my_list = [float(x) for x in f]

res = dict(zip(months, my_list))
</code></pre>
<p>This will however work ONLY if there are the same number of lines than months!</p>
</div>
<span class="comment-copy">entire file is supposed to be a list these numbers are for a program that read the total rainfall for each of the 12 months into a list that i need to write</span>
<span class="comment-copy">inFile = open('program9.txt', 'r')  lineRead = inFile.readline()            while lineRead != '':                      words = lineRead.split()        annualRainfall = float(words[0])        print(format(annualRainfall, '.2f'))                        lineRead = inFile.readline()                      inFile.close()</span>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a>, <a href="https://docs.python.org/2/library/stdtypes.html#file.readlines" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#file.readlines</a></span>
<span class="comment-copy">Ah, float! This is the best solution :) I am deleting mine</span>
<span class="comment-copy">is it possible to do without using "with open"?</span>
<span class="comment-copy">with open creates an execution context which will ensure the file gets automatically closed when this indented block ends</span>
<span class="comment-copy">this works great for my function!! thank you abarnert... now i just need to find out how to assign the list to another list like  jan = 1.89,  feb = 1.99 and so on...</span>
<span class="comment-copy">@spuriousarbiter: Sure, it's possible to do it without a <code>with</code> statement, but why would you want to?</span>
<span class="comment-copy">Why would you read the whole file and call <code>splitlines</code> on it just to get something you can use as an iterable of lines, which the file already was?</span>
<span class="comment-copy">No, you can't call <code>splitlines()</code> on a file object; that's a method on <code>str</code>. Just don't call it at all. (Also, while we're at it, why are you opening the file in binary mode?)</span>
<span class="comment-copy">I thought I had removed it too, just re-edited it.</span>
