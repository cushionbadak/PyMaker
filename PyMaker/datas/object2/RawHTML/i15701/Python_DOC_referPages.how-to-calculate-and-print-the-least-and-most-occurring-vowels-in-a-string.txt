<div class="post-text" itemprop="text">
<p>I am required to input a string, calculate the number of vowels in that string, and then calculate the most and least occurring vowels. When the string contains no vowels at all, a message should print saying "no vowels were entered". Where there are vowels which occur the same number of times (e.g. if a and e both occur twice ), these vowels should both appear as being most or least occurring. However, if some vowels are in the string but not all, then the ones which do not appear in the sting should be ignored (rather than printing "a=0"). I think the counting part at the start is correct to an extent, but not quite. As for the most/least occurrences, I don't even know where to begin. Any help would be appreciated!</p>
<pre><code>myString = str(input("Please type a sentence: ").lower())

count = [0, 0, 0, 0, 0]

for vowel in myString:

    if vowel == "a" :
        count[0]=count[0]+1
    if vowel == "e" :
        count[1]=count[1]+1
    if vowel == "i" :
        count[2]=count[2]+1
    if vowel == "o" :
        count[3]=count[3]+1
    if vowel == "u" :
        count[4]=count[4]+1

    while count[0] &gt; 0:
        print ("acount :",count[0])
        break
    while count[1] &gt; 0:
        print ("ecount :",count[1])
        break
    while count[2] &gt; 0:
        print ("icount :",count[2])
        break
    while count[3] &gt; 0:
        print ("ocount :",count[3])
        break
    while count[4] &gt; 0:
        print ("ucount :",count[4])
        break

else:
    if count[0] == 0 and count[1] == 0 and count[2] == 0 and count[3] == 0 and count[4] == 0:
        print ("No vowels were found")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import Counter

d = Counter(input("Enter Sentence:"))
print sorted("aeiou",key=lambda x:d.get(x,0))
</code></pre>
<p>seems like a much easier way to do it ...</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, you've got a list, <code>count</code>, with 5 counts in it. How do you find out which count is the highest? Just call <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a> on it:</p>
<pre><code>&gt;&gt;&gt; count = [7, 1, 3, 10, 2]
&gt;&gt;&gt; max(count)
10
</code></pre>
<p>Now that you know the max is 10, how do you know which letters have counts of 10?</p>
<pre><code>&gt;&gt;&gt; max_count = max(count)
&gt;&gt;&gt; for i, n in enumerate(count):
...     if n == max_count:
...         # use i the same way you use it above
</code></pre>
<p>You should be able to figure out how to do the minimum count as well.</p>
<p>But there's one extra problem for minimum count: it sounds like you want the minimum that's not 0, not the absolute minimum. I'd write it like this:</p>
<pre><code>&gt;&gt;&gt; min_count = min(x for x in count if x&gt;0)
</code></pre>
<p>â€¦ or, maybe more compactly:</p>
<pre><code>&gt;&gt;&gt; min_count = min(filter(bool, count))
</code></pre>
<p>But I'm guessing you don't understand comprehensions yet. In which case, you'll need to explicitly loop over the values, keeping track of the minimum value(s) that aren't 0. This implementation of <code>max</code> should help guide you in the right direction:</p>
<pre><code>def my_max(iterable):
    max_value = None
    for value in iterable:
        if max_value is None or value &gt; max_value:
            max_value = value
    return max_value
</code></pre>
<hr/>
<p>All that being said, this is one of many cases where using the right data structure makes the job a lot easier. For example, if you used a dictionary instead of a list, you could replace the whole first half of your code with this:</p>
<pre><code>count = dict.from_keys('aeiou', 0)
for vowel in myString:
    if vowel in 'aeiou':
        count[vowel] += 1
</code></pre>
<p>Using a <code>defaultdict</code> or a <code>Counter</code> makes it even easier; then you don't need to explicitly initialize the counts to 0.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>count=[0,0,0,0,0]
myString = str(input("Please type a sentence: ").lower())
for x in mystring:
    flag = 'aeiou'.find(x)
    if flag&gt;=0:
        count[flag] +=1
print max(count)
</code></pre>
<p>here <code>find</code> function will try to find the 'x' from <code>aeiou</code> if found return position of 'x` else return -1. so in flag i will get the position else -1</p>
</div>
<span class="comment-copy">First, why not make <code>count</code> into a dictionary instead of a list, so you can just do <code>count[vowel] += 1</code> and scrap that whole chain of <code>if</code> statements? Second, why are you using <code>while</code> instead of <code>if</code> in the second block?</span>
<span class="comment-copy">I'm fairly new to python, never used dictionaries before.</span>
<span class="comment-copy">Well, dictionaries should be the next thing you learn. (In general, as soon as you're writing code that makes you repeat yourself over and over, you're ready to learn the abstraction that makes that repetition unnecessary.)</span>
<span class="comment-copy">could you please explain what flag means as well as the find(x)</span>
<span class="comment-copy">now you get why flag is used</span>
