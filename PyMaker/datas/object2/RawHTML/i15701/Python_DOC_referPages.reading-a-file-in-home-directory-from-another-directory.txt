<div class="post-text" itemprop="text">
<p>I am trying to read a file in another directory. My current script is in <code>path/to/dir</code>. However, I want to read a file in <code>~/</code>. I'm not sure how to do this.</p>
<p>I tried <code>f = open("~/.file")</code> but I am getting an error</p>
<p><code>IOError: [Errno 2] No such file or directory: '~/.file'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/3/library/os.path.html#os.path.expanduser" rel="nofollow"><code>os.path.expanduser</code></a>:</p>
<pre><code>import os
with open(os.path.expanduser('~/.file')) as f:
    print f.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work</p>
<pre><code>from os.path import expanduser
home = expanduser("~")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>os.path.expanduser will help you</p>
</div>
<div class="post-text" itemprop="text">
<p>The short answer is: use <a href="https://docs.python.org/3/library/os.path.html#os.path.expanduser" rel="nofollow noreferrer"><code>os.path.expanduser</code></a>, as <a href="https://stackoverflow.com/a/26812300/908494">m.wasowski shows</a>:</p>
<pre><code>f = open(os.path.expanduser("~/.file"))
</code></pre>
<p>But why do you have to do this?</p>
<p>Well, <code>~/.file</code> doesn't actually mean what you think it does. It's just asking for a file named <code>.file</code> in a subdirectory named <code>~</code> in the current working directory.</p>
<p>Why does this work on the command line? Bcause shells don't just pass your arguments along as typed, they do all kinds of complicated processing.</p>
<p>This is why <code>./myscript.py *txt</code> gives you <code>['./myscript.py', 'a.txt', 'b.txt', 'c.txt', 'd e f.txt']</code> in your <code>argv</code>â€”because the shell does glob expansion on <code>*.txt</code> by looking in the directory for everything that matches that pattern and turns it into <code>a.txt b.txt c.txt "d e f.txt"</code>.</p>
<p>In the same way, it expands <code>~/.file</code> into <code>/Users/me/.file</code> by looking at the appropriate environment variables and platform-specific defaults and so on. You can read the gory details for <a href="http://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html" rel="nofollow noreferrer"><code>bash</code></a>; things are similar with <code>dash</code>, <code>tcsh</code>, and most other shells (except Windows <code>cmd</code> and <code>PowerShell</code>).</p>
<p>Python talks to the filesystem directly, it doesn't go through the shell to do it. So, if you want to do the same things shells do, you have to do them explicitly: <code>glob.glob</code>, <code>os.path.expanduser</code>, <code>os.path.expandvars</code>, <code>subprocess.check_output</code>, etc.</p>
<p>The cool thing about doing it all in Python is that it works the same way everywhere. Even on Windows, where the shell doesn't know what <code>~/.file</code> means, and the right answer may be some hideous thing like <code>'C:\\Documents and Settings\\me\\Documents'</code> or <code>'\\\\FileServer\\RoamingProfiles\\me'</code>, <code>os.path.expanduser</code> will give you the right hideous thing.</p>
</div>
<span class="comment-copy">Expand out the <code>~</code> fully. On *NIX systems, <code>~</code> is shorthand for your home directory</span>
<span class="comment-copy">it works on Windows too, according to docs.</span>
<span class="comment-copy">@PadraicCunningham: That only works if your name happens to be <code>username</code> and you happen to be on certain specific linux distros.</span>
<span class="comment-copy">@PadraicCunningham: And you presumed the OP wanted to hardcode a path so that the program will never run for any other user or on any other machine?</span>
<span class="comment-copy">@abarnert, yes that is exactly what I thought, you are a mind reader</span>
<span class="comment-copy">There's no reason to just expand <code>~</code> by itself. Then you'd have to <code>os.path.join</code> it into the rest of the path. Easier to just expand <code>~/.file</code> in the first place, as in m.wasowski's answer.</span>
