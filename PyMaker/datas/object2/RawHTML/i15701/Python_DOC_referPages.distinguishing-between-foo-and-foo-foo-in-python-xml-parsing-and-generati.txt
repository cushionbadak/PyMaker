<div class="post-text" itemprop="text">
<p>I have been using Python's ElementTree to create an XML document, and so far so good. Yet the problem I am now facing is that due to project requirements, I need to produce an XML document which has elements with start and end tags as well as self-closing tag elements. I need to output empty tags with start/end tags and also keep self-closed tag elements. The current implementation either produces self-closing tags when there are empty elements and thus keeps the self-closing tags, this is not correct due to project requirements. Also, if I force start/end tags for empty elements, the self-closing tags are also transformed into start/end tag elements, this is not correct either.</p>
<p>Can some one please help me out and point me to a possible solution, any all suggestions are welcomed. I need to use Python 2.7. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the XML standard is concerned, an empty tag means the exact same thing as a self-closing tag.</p>
<p>So, first, this probably isn't a good idea in the first place.</p>
<p>And second, most XML libraries probably aren't going to let you distinguish between the two.</p>
<p>But if you need to do this, you can always patch any library you want. Since you're already using <code>ElementTree</code>, that seems like the obvious choice to patch.</p>
<hr/>
<p>In the latest versions of <code>ElementTree</code> (including the version that comes with Python 3.4+, but in older Pythons you'll need to install the latest externally-maintained version), you can actually control this <em>globally</em>, with the <code>short_empty_elements</code> argument to <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" rel="nofollow"><code>write</code></a> and related functions. But, as you say, this isn't what you actually want; you need some elements to be self-closing and some not.</p>
<p>I think you'd be better off starting from the externally-maintained version of <code>ElementTree</code>, rather than the version that comes built in with Python 2.7. But I'm not sure where its official repo is, so I'm going to link to the Python 3.4 code instead. Hopefully that gives you enough to take it from there.</p>
<p>The key function is <a href="https://hg.python.org/cpython/file/3.4/Lib/xml/etree/ElementTree.py#l900" rel="nofollow"><code>serialize_xml</code></a>. I <em>think</em> that function isn't C-accelerated, so you only need to change the pure Python version. In which case it's just one line:</p>
<pre><code>if text or len(elem) or not short_empty_elements:
</code></pre>
<p>Change it to:</p>
<pre><code>if text or len(elem) or not getattr(elem, 'short_empty', short_empty_elements):
</code></pre>
<p>And now, if you set <code>node.short_empty = True</code> or <code>node.short_empty = False</code> on an empty node, it will override the global settings for <code>short_empty_elements</code>.</p>
<hr/>
<p>Except… I think if you're using the C accelerator, you can't add attributes (I mean Python attributes, like <code>node.short_empty</code>, not XML attributes) to an <code>Element</code>. Which means you'll either need to patch <code>Element</code> to allow this (which <a href="https://hg.python.org/cpython/file/3.4/Modules/_elementtree.c#l1830" rel="nofollow"><em>is</em> partly in C</a>—you'll have to not disable the <code>__dict__</code> and modify the <code>else</code> to call <code>PyObject_GenericSetAttr</code> instead of raising), or fake it by, e.g., using some fake XML attribute, which you strip out when serializing.</p>
<p>Of course if you're using <code>ElementTree</code> rather than <code>cElementTree</code> in 2.7, you're not using the C accelerator, so you probably don't need to worry about this part.</p>
<hr/>
<p>You might want to consider looking at the <a href="http://lxml.de/" rel="nofollow"><code>lxml</code></a> implementation of the <code>ElementTree</code> API to see if it's easier to patch.</p>
<hr/>
<p>Meanwhile, considering that they've added <code>short_empty_elements</code> to the library, the maintainers might be interested in accepting your patch upstream.</p>
</div>
<span class="comment-copy">The problem is that, as far as the XML spec is concerned, an empty tag means the exact same thing as a self-closing tag, so it seems unlikely that any general-purpose XML library is going to do what you want (except maybe accidentally, and not documented to continue to work that way). You're probably going to have to hook or patch one of them. That may not be too hard, but it's not going to be trivial.</span>
<span class="comment-copy">Who is imposing those requirements? Sounds like someone else wrote some bad code and it is impacting you. I would explain to my superior that the <b>official XML standard</b> treats these as equivalent, and the consumer needs to do the same. The right thing to do is for whoever botched the consumption to fix it; that will be much better for the project in the long run than you making your code worse because theirs is bad.</span>
<span class="comment-copy">@jpmc26 has the right of this -- if you don't fix the code that's making this distinction, it's going to be a headache every time you introduce a new component, as <i>every</i> standard-compliant parser/generator behaves this way -- as the standard says it can. In fact, the C14N XML standard defines that the canonical form for any XML document is with start-end tag pairs, so any transformation that has output in canonical form will lose whatever data you're encoding by using self-closing tags.</span>
<span class="comment-copy">@jpmc26, thank you, unfortunately this is a legacy system and we have to conform to its current form in order to not break it :)</span>
<span class="comment-copy">Be bold: fix the legacy system. Don't allow its errors to spread like a cancer into new code.</span>
<span class="comment-copy">thank you for the pointers, will look into this, I need this to work, I will come back here in case I need more support. Of course, if there are any other tutorials/examples that can guide me, that would be great since this would be my first ever patch.</span>
