<div class="post-text" itemprop="text">
<p>I want to extract the table containing the <a href="http://www.nirsoft.net/countryip/za.html" rel="nofollow">IP blocks from this site</a>.</p>
<p>Looking at the HTML source I can clearly see that the area I want is structured like this:</p>
<pre><code>[CONTENT BEFORE TABLE]
&lt;table border="1" cellpadding="6" bordercolor="#000000"&gt;
[IP ADDRESSES AND OTHER INFO]
&lt;/table&gt;
[CONTENT AFTER TABLE]
</code></pre>
<p>So I wrote this little snippet:</p>
<pre><code>import urllib2,re
from lxml import html
response = urllib2.urlopen('http://www.nirsoft.net/countryip/za.html')

content = response.read()

print re.match(r"(.*)&lt;table border=\"1\" cellpadding=\"6\" bordercolor=\"#000000\"&gt;(.*)&lt;/table&gt;(.*)",content)
</code></pre>
<p>The content's of the page is fetched (and correct) without problems. The regex match always returns <code>None</code> however (the print here is just for debugging).</p>
<p>Considering the structure of the page, I can't understand why there isn't a match. I would expect there to be three groups with the second group being the table contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, <code>.</code> does not match newlines.  You need to specify the <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow">dot-all flag</a> to have it do this:</p>
<pre><code>re.match(..., content, re.DOTALL)
</code></pre>
<p>Below is a demonstration:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; content = '''
... [CONTENT BEFORE TABLE]
... &lt;table border="1" cellpadding="6" bordercolor="#000000"&gt;
... [IP ADDRESSES AND OTHER INFO]
... &lt;/table&gt;
... [CONTENT AFTER TABLE]
... '''
&gt;&gt;&gt; pat = r"(.*)&lt;table border=\"1\" cellpadding=\"6\" bordercolor=\"#000000\"&gt;(.*)&lt;/table&gt;(.*)"
&gt;&gt;&gt; re.match(pat, content, re.DOTALL)
&lt;_sre.SRE_Match object at 0x02520520&gt;
&gt;&gt;&gt; re.match(pat, content, re.DOTALL).group(2)
'\n[IP ADDRESSES AND OTHER INFO]\n'
&gt;&gt;&gt;
</code></pre>
<p>The dot-all flag can also be activated by using <code>re.S</code> or by placing <code>(?s)</code> at the start of your pattern.</p>
</div>
<div class="post-text" itemprop="text">
<p>For parsing <code>HTML</code> i would prefer <code>BeautifulSoup</code>:</p>
<pre><code>from bs4 import BeautifulSoup
import urllib2
soup = BeautifulSoup(urllib2.urlopen('http://www.nirsoft.net/countryip/za.html').read())
for x in soup.find_all('table', attrs={'border':"1",'cellpadding':"6",'bordercolor':"#000000"}):
    print x
</code></pre>
<p>for better result:</p>
<pre><code>for x in soup.find_all('table', attrs={'border':"1",'cellpadding':"6",'bordercolor':"#000000"}):
    for y in x:
        try:
            if y.name == 'tr':
                print "\t".join(y.get_text().split())
       except:pass
</code></pre>
</div>
<span class="comment-copy">Please use an HTML parser</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags" title="regex match open tags except xhtml self contained tags">stackoverflow.com/questions/1732348/â€¦</a></span>
<span class="comment-copy">@sshashank124 Not an option in this case.</span>
<span class="comment-copy">Does your task specifically require you to use regex?</span>
<span class="comment-copy">@sshashank124 Yes, I need to demonstrate regex to extract the table and I can't figure out why it doesn't work with this large string when I can get regex to work on other strings.</span>
<span class="comment-copy">Thanks! Didn't know about the DOTALL</span>
<span class="comment-copy">Thanks, I needed regex but I will look into Beautiful Soup it looks neat</span>
<span class="comment-copy">@Juicy BeautifulSoup is great Utility to parse an html page</span>
