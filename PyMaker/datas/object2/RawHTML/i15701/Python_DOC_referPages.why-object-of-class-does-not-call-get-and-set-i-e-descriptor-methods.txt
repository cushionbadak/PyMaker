<div class="post-text" itemprop="text">
<p>Class is as follows </p>
<pre><code>class Descriptor(object):
    def __init__(self,name=None):
        self.n = name
    def __get__(self,instance,cls):
        print ("Get",self.n)
    def __set__(self,instance,value):
        print ("set",self.n,value)
</code></pre>
<p>Now if I create object of <code>Descriptor</code> class and access attribute <code>n</code>, then shouldn't it access the <code>__get__</code> method?</p>
<pre><code>obj = Descriptor() 
print (obj.n)
</code></pre>
<p>If I create another class which inherits <code>Descriptor</code> class and I create object of <code>Descriptor</code> inside derived class, then <code>__get__</code> and <code>__set__</code> are getting called.</p>
<pre><code>class Test(Descriptor):
    d = Descriptor("ansh")

t = Test()
print (t.d)
</code></pre>
<p>I am confused by this behavior.</p>
<p>According to <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">the docs</a>, descriptors are invoked by the <code>__getattribute__()</code> method <code>object.__getattribute__()</code> and <code>type.__getattribute__()</code> make different calls to <code>__get__()</code>, what is <code>object.__getattribute__()</code> over here?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>obj.n</code> is <em>not</em> a descriptor object. It doesn't have any methods that would make it a descriptor. <code>type(obj).__dict__['n'].__get__</code> does not exist. It is just a string object.</p>
<p>The fact that <code>obj</code> <em>itself</em> has such methods doesn't matter here, because <code>obj</code> is not the attribute, <code>obj.n</code> is.</p>
<p><code>t.d</code> <strong>is</strong> a descriptor object, <code>type(t).__dict__['d'].__get__</code> <em>does</em> exist. So when you access <code>t.d</code>, you get the result of the call to the <code>__get__</code> method.</p>
<p>It is always the <em>attribute itself</em> that implement the descriptor protocol. It must <em>directly</em> have descriptor methods for those to be called.</p>
</div>
<span class="comment-copy">I'm not sure what you are asking. Why do you expect attributes <b>on the descriptor itself</b> to be treated as a descriptor? The whole point of descriptors is that they are bound to the class they are an attribute on. <code>n</code> is not a descriptor here.</span>
<span class="comment-copy">I am confused, according to Python doc,""" descriptor is an object attribute with “binding behavior”, one whose attribute access has been overridden by methods in the descriptor protocol""" then wouldn't get and set methods are applied to n</span>
<span class="comment-copy">Because <code>n</code> is not a descriptor. It is <i>just an attribute</i> (and not one that exists). Only <code>Test.d</code> is a descriptor object. You access <code>d</code> <i>on <code>Test()</code></i>, so <code>d</code> is bound to <code>Test()</code>. So <code>d</code> is an attribute that implements the descriptor protocol (<code>t.d.__get__</code> exists).</span>
<span class="comment-copy">Thanks, "Because n is not a descriptor.It is just an attribute. Only Test.d is a descriptor object " Again d is attribute to class T similar to n? how to identity attribute v/s descriptor object?</span>
<span class="comment-copy">You seem to think that attributes <i>on</i> a descriptor are also descriptors. That's not the case. Each attribute has to be a descriptor in their own right. <code>d</code> has a <code>__get__</code> and a <code>__set__</code> method, so those get called. <code>obj.n</code> is not a descriptor, because it doesn't have a <code>__get__</code> or <code>__set__</code> or <code>__del__</code> attribute. It doesn't matter here that <code>obj</code> has those methods, because <code>obj</code> is not the attribute here!</span>
