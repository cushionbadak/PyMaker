<div class="post-text" itemprop="text">
<p>I have the following lists:</p>
<pre><code>path='/my/path/'
l1=[2,0,1]
l2=[['a.txt','b.txt','c.txt'],['d.txt','f.txt','g.txt'],['h.txt','i.txt','j.txt']]
</code></pre>
<p>and I wrote a list comprehension to add the full path:</p>
<pre><code>[os.path.join(path, 'list%d'%l1_index, l2_value) for l1_index in l1 for l2_value in l2[l1_index]]
</code></pre>
<p>but lost the original nesting. </p>
<p>Here's what I'd like to get:</p>
<pre><code>[ ['/my/path/list2/h.txt','/my/path/list2/i.txt','/my/path/list2/j.txt'], ['/my/path/list0/a.txt','/my/path/list0/b.txt','/my/path/list0/c.txt'], ['/my/path/list1/d.txt','/my/path/list1/f.txt','/my/path/list1/g.txt'] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow">nested list comprehension</a> instead of a single one with two <code>for ... in ...</code> clauses:</p>
<pre><code>[[os.path.join(path, 'list%d'%l1_index, l2_value) for l2_value in l2[l1_index]] for l1_index in l1]
</code></pre>
<p>If you were to spread this out, it would look like:</p>
<pre><code>[
    [
        os.path.join(path, 'list%d'%l1_index, l2_value)
        for l2_value in l2[l1_index]
    ]
    for l1_index in l1
]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; path='/my/path/'
&gt;&gt;&gt; l1=[2,0,1]
&gt;&gt;&gt; l2=[['a.txt','b.txt','c.txt'],['d.txt','f.txt','g.txt'],['h.txt','i.txt','j.txt']]
&gt;&gt;&gt; [[os.path.join(path, 'list%d'%l1_index, l2_value) for l2_value in l2[l1_index]] for l1_index in l1]
[['/my/path/list2\\h.txt', '/my/path/list2\\i.txt', '/my/path/list2\\j.txt'], ['/my/path/list0\\a.txt', '/my/path/list0\\b.txt', '/my/path/list0\\c.txt'], ['/my/path/list1\\d.txt', '/my/path/list1\\f.txt', '/my/path/list1\\g.txt']]
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally I'd avoid the nested list comprehensions in this case. It's not especially clear what's going on.</p>
<pre><code>import os

path = '/my/path'
l1 = [2,0,1]
l2 = [
  ['a.txt','b.txt','c.txt'],
  ['d.txt','f.txt','g.txt'],
  ['h.txt','i.txt','j.txt']
]

pathset = []
for l in l1:
    to_add = l2[l]
    paths = [os.path.join(path, 'list%s' % l, filename) for filename in to_add]
    pathset.append(paths)
</code></pre>
</div>
<span class="comment-copy">Is there a good reason for using a list comprehension here? It's one of those cases where you end up obscuring the intent of the code.</span>
<span class="comment-copy">That works great! Many thanks!</span>
