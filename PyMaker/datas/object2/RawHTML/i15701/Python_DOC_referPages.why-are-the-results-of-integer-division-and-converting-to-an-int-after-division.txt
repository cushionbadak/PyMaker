<div class="post-text" itemprop="text">
<pre><code>print(10**40//2)
print(int(10**40/2))
</code></pre>
<p>Output of the codes:</p>
<pre><code>5000000000000000000000000000000000000000
5000000000000000151893014213501833445376
</code></pre>
<p>Why different values? Why the output of the second <code>print()</code> looks so?</p>
</div>
<div class="post-text" itemprop="text">
<p>The floating point representation of <code>10**40//2</code> is not accurate:</p>
<pre><code>&gt;&gt;&gt; format(float(10**40//2), '.0f')
'5000000000000000151893014213501833445376'
</code></pre>
<p>That's because floating point arithmetic is only ever an approximation, especially when you go beyond what your CPU can accurately model (as floating point is handled in hardware).</p>
<p>The integer division never has to represent the <code>10**40</code> number as a float, it only has to divide the integer, which in Python can be arbitrarily large without precision loss.</p>
<p>Also see:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer"><em>Floating Point Arithmetic: Issues and Limitations</em></a> in the Python tutorial</li>
<li><a href="http://floating-point-gui.de/" rel="nofollow noreferrer"><em>What Every Programmer Should Know About Floating-Point Arithmetic</em></a></li>
<li><a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow noreferrer"><em>What Every Computer Scientist Should Know About Floating-Point Arithmetic</em></a></li>
</ul>
<p>Also look at the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code> module</a> if you must use higher-precision floating point arithmetic.</p>
</div>
<span class="comment-copy">Take a look at <code>10**40/2</code> directly.</span>
<span class="comment-copy">Strictly speaking, <code>10**40</code> never gets represented as a float in either case: true division of two integers doesn't convert both arguments to floats and <i>then</i> divide: instead, it does a single correctly-rounded division, as though computing the quotient to infinite precision and then rounding it to fit the float format.</span>
<span class="comment-copy">@MarkDickinson: right; adjusted the example to turn the int into a float to make that clearer.</span>
