<div class="post-text" itemprop="text">
<p>I came across a piece of code (simplified for the question) structured like so:</p>
<pre><code>while True:
    if x == y: break
</code></pre>
<p>My understanding of Python thus far is that the interpreter is highly dependent on tabs/spaces to understand the contents of things like loops and conditionals, but the above code style runs without issue, suggesting this isn't quite true. </p>
<p>Can someone explain the nuance?</p>
</div>
<div class="post-text" itemprop="text">
<p>The full details are explained in <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow">Compound Statements</a> in the reference docs. But as a brief summary:</p>
<p>Any "compound statement", like <code>if</code> can take <em>either</em> an <strong>indented suite</strong> of statements, or an inline <strong>simple statement list</strong>.*</p>
<p>So, what's the difference between these?</p>
<pre><code>if x == y:
    break

if x == y: break
</code></pre>
<p>Really, nothing, except that the first is usually considered more readable and idiomatic. (<a href="http://legacy.python.org/dev/peps/pep-0008/#other-recommendations" rel="nofollow">PEP 8</a>, the official style guide, says the second form is "generally discouraged", but "sometimes it's okay to put an if/for/while with a small body on the same line".)**</p>
<p>These have the exact same semantics, performance, etc. They'll even compile to the exact same bytecode. There is a small syntactic difference, but it only affects which error messages you get if you embed these in various illegal constructs.</p>
<hr/>
<p>So, can you put something more complicated than <code>break</code> there?</p>
<p>Yes. Notice that it's a simple statement <em><strong>list</strong></em>. That means you can have multiple simple statements, separated by semicolons:</p>
<pre><code>if x == y: print('Hey!'); x = -x; break
</code></pre>
<p>However, this is incredibly bad style. Unless you're trying to win a code-golf competition, don't do that.</p>
<p>But there are limits, too. Notice that it's a <em><strong>simple</strong></em> statement list. That means no compound statements. This is illegal:</p>
<pre><code>if x == y: while True: print('loopy')
</code></pre>
<p>You can see the full list of simple statements <a href="https://docs.python.org/3/reference/simple_stmts.html" rel="nofollow">here</a>.</p>
<hr/>
<p><sub>* An inline statement list is still considered a suite in the official grammar. But in loose discussion, suite more often means just the indented block alternative, not the inline alternative.</sub></p>
<p><sub>** In my experience, the most common place to see this in code by experienced devs is actually one of the places PEP 8 says to never do it: a class with a bunch of empty functions may have them on one line, like <code>def spam(self): pass</code>. That can make them hard to paste into the interactive interpreter, which is probably why PEP 8 says to never do it.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Indentation here is not required because your have <a href="https://docs.python.org/2/reference/simple_stmts.html" rel="nofollow"><code>simple_stmt</code></a>, <code>break</code>, in the <a href="https://docs.python.org/2/reference/compound_stmts.html#the-if-statement" rel="nofollow"><code>if</code></a>'s <a href="https://docs.python.org/2/reference/compound_stmts.html#grammar-token-suite" rel="nofollow"><code>suite</code></a>:</p>
<pre><code>...
if_stmt      ::=  "if" expression ":" suite
                 ("elif" expression ":" suite)*
                 ["else" ":" suite]
...
suite         ::=  stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
statement     ::=  stmt_list NEWLINE | compound_stmt
...
stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
...
</code></pre>
<p>In this case indentation is not required.</p>
<p>You can do this only with <a href="https://docs.python.org/2/reference/simple_stmts.html" rel="nofollow">simple statements</a>,like  <code>return</code> or <code>break</code>, but you can't have a <a href="https://docs.python.org/2/reference/compound_stmts.html#grammar-token-compound_stmt" rel="nofollow">compound statements</a>, <code>if</code> like <code>while</code>, without indentation .</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python you can always replace an intended block with a single line if the block consists only of a single statement.</p>
<p>E.g.</p>
<pre><code>def f(x): return x

def f(x):
    return x
</code></pre>
<p>are equivalent. The same is true for any other block-expecting syntax in Python:</p>
<ul>
<li>if, else, elif, for, while, def, class, ...</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Thats the difference between a statemment and a compound statement. For example, in <code>C</code> you might do something like </p>
<pre><code>for(i=0; i&lt;10; i++) printf("something");
</code></pre>
<p>or </p>
<pre><code>for(i=0; i&lt;10; i++) {printf("something");}
</code></pre>
<p>The <code>for</code> loop just executes a statement. However, when you include more than one statements within curly braces, like for example,</p>
<pre><code>for(i=0; i&lt;10; i++) {printf("something"); printf("something else");}
</code></pre>
<p>Then the entire thing within the curly braces is treated like one statement. </p>
<p>Its the same with Python ...</p>
<pre><code>if x == y: 
    print 'abcd'   # These two statements are treated as 1 block
    break          # of statements 
</code></pre>
<p>If you just had one statement, you wouldnt need to define a block. </p>
</div>
<span class="comment-copy">Fantastic breakdown of the differences. Thank you for that. The lack of assumptions of the reader's Python knowledge/skillset made this answer the winner.</span>
<span class="comment-copy">I was thinking showing the actual grammar would be a bad idea, but now that I see it posted here, I think even many novices will get it. Definite +1.</span>
<span class="comment-copy">That's not the right rule. There are plenty if single statements you can't put inline (like another single-line block statement), and you can easily put multiple statements on the line, like <code>if foo: print(x), print(y)</code>.</span>
<span class="comment-copy">The reason why using a <code>,</code> works is because <code>print(x), print(y)</code> evaluates to a <code>tuple</code>. So in the case that you just described, <code>print(x), print(y)</code> is asking python to evaluate one statement which will return one <code>tuple</code>. This is often used in statements like <code>x, y = 5, 6</code>. In fact, you can place any constant in your code in a separate line, and program flow will <i>not</i> be affected. That is because every line is evaluated and if an <code>=</code> operator isnt present, the result is just discarded. This is the reason why some people often use multiple line strings rather than <code>#</code> for their comments.</span>
<span class="comment-copy">@ssm: Sorry, that was a typo for <code>if foo: print(x); print(y)</code>, which is a statement list containing two simple statements.</span>
<span class="comment-copy">This really is a false parallel. Especially because you can write <code>if x == y: print 'abcd'; break</code> and it works just fine.</span>
<span class="comment-copy">Actually, using a semicolon to separate lines is still considered a compound statement in Python: <a href="https://docs.python.org/2/reference/compound_stmts.html" rel="nofollow noreferrer">docs.python.org/2/reference/compound_stmts.html</a></span>
<span class="comment-copy">No it isn't. That's a <code>stmt_list</code>, which is not a kind of <code>compound_stmt</code>. In fact, if you look at it, <code>statement</code> on that page is defined as either a <code>stmt_list</code> or a <code>compound_stmt</code>, so they're clearly distinct things.</span>
<span class="comment-copy">I see your point. thanks.</span>
