<div class="post-text" itemprop="text">
<p>I come from a solid Java (and Matlab) background, and have been trying to teach myself Python (3.4) recently. In the Java API docs (<a href="http://docs.oracle.com/javase/7/docs/api/" rel="nofollow noreferrer">http://docs.oracle.com/javase/7/docs/api/</a>), the documentation for a particular class always shows a nice overview of the ancestors of that class (see e.g. <a href="https://i.imgur.com/tA7ataB.png" rel="nofollow noreferrer">this screenshot</a>).</p>
<p>Now I'm wondering if there is any way of viewing a similar ancestor hierarchy for Python classes. I am working from the assumption that, since Python is an object-oriented language, all non-primitive types will be objects (please correct me if I'm wrong). Understanding the ancestry for different types should probably greatly aid my understanding of iterables, sequences, views, and lists.</p>
<p>I've tried several things, as suggested in answers to similar questions (such as <a href="https://stackoverflow.com/questions/1401661/python-list-all-base-classes-in-a-hierarchy">here</a>); but <code>inspect.mro(cls)</code> does not always seem to work; for instance, the following gives an error:</p>
<p><code>inspect.getmro(dict_keys)</code></p>
<p>even though dict_keys is a type:</p>
<p><code>In[30]: type({}.keys())
Out[30]: dict_keys</code></p>
<p>I was also highly surprised to learn that list does not inherit from iterable:</p>
<p><code>In[34]: inspect.getmro(list)
Out[34]: (list, object)
</code></p>
<p>So, although my question is mainly about how to view (and, ideally, browse) the hierarchy of the standard Python library, any other comments on how to understand the default types' hierarchy, mainly how lists/sequences/views/iterables relate formally, would also be very welcome. The (otherwise excellent) Python tutorial does not really cover this stuff, it seems.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just because something is a type doesn't mean you have a reference to that type in the global namespace.  This is the case with dict_keys.  e.g.</p>
<pre><code>&gt;&gt;&gt; inspect.getmro(type({}.viewkeys()))  # using python2.x :-(
(&lt;type 'dict_keys'&gt;, &lt;type 'object'&gt;)
</code></pre>
<p>So it does have an MRO, and it is inspectable -- You just didn't have a handle on the <code>dict_keys</code> type before now.</p>
<p>Note that the MRO can be a bit deceiving:</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; issubclass(list, collections.Iterable)
True
</code></pre>
<p>so we see that <code>list</code> at least <em>thinks</em> that it is a subclass of <code>collections.Iterable</code> even though you won't find it in the MRO.  This is because <code>collections.Iterable</code> actually <a href="https://docs.python.org/2/library/abc.html#abc.ABCMeta.register" rel="nofollow"><code>register</code></a>s itself using the <code>abc</code> module.</p>
<p>I think that this is one of the basic differences between python and java.  In python, you typically care more about the interface the object provides rather than the actual type and inheritance tree.  At some level this statement may seem a bit pedantic -- After all, you need to know the inheritance tree to know the interface an object provides.  But the fact that we work in interfaces is exactly why <code>tuple</code>, <code>list</code> and <code>generator</code> objects can be iterated over despite not having a real common base class (<code>collections.Iterable</code> doesn't count as it is a <em>virtual</em> base class) above <code>object</code> (which can't be iterated over).</p>
</div>
<span class="comment-copy"><i>Everything</i> in Python is an object.</span>
<span class="comment-copy">Yes, @Ffisegydd, that is exactly the assumption I was working from :) However, then why does <code>type({}.keys())</code> yield 'dict_keys', yet doing <code>dict_keys</code> yields 'name dict_keys is not defined'...</span>
<span class="comment-copy">Overview at <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">Ah thanks, that at least answers part of my confusion. Thinking about it, if of course makes sense that dict_keys did not exist in the global namespace if I didn't explicitly import it. It still leaves open the question of whether there is a convenient way of browsing the class hierarchy, though. But I'm starting to suspect this hierarchy is a lot more complicated for Python than for Java, what with "virtual subclasses" etc. :) In Java every class (except Object) has exactly one parent, and additionally can implement any number of interfaces. This may be misleading me.</span>
<span class="comment-copy">@EelkeSpaak: Indeed, one of Java's fundamental design choices was to only support single inheritance. Python allows multiple inheritance. mgilson's answer mentions "interfaces" in a plain-English way, but of course Java has an actual language construct called <code>interface</code>, which it could be argued complicates class relationships in ways reminiscent of multiple inheritance. Ultimately, while I do think some knowledge of Java can help in learning Python, you have to be careful not to take analogies too far.</span>
<span class="comment-copy">@JohnY -- Thanks.  Unfortunately I don't know a whole lot of Java so I can't take things too far.  I mean "interface" in the go-lang sense of the word.  Of course there it's a formal concept too whereas what I'm talking about is much less formal.</span>
<span class="comment-copy">@mgilson: The "taking things too far" part of my comment wasn't directed at you. It was directed at folks who are trying to "bootstrap" their Python knowledge by applying what they know from Java. Some Pythonistas recommend unlearning everything Java when learning Python; personally I don't think that's necessary, but then I do have to stress that the similarities can only take you so far.</span>
<span class="comment-copy">@JohnY -- Cool.  As somebody who hopes to learn a little java in the near future, it's good to know that I might not have to unlearn <i>all</i> my python ;-).  Thanks for the comments.</span>
