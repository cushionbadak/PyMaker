<div class="post-text" itemprop="text">
<p>I got 2 lists:</p>
<pre><code>alist = ['A','B','C','D']
anotherList = ['A','C','B','D']
</code></pre>
<p>would like to write a function which returns <code>True</code> if both lists contain the exact same elements, and are same length. I'm kinda new on this stuff, so I got this, which I'm pretty sure it's terrible, and I'm trying to find a more efficient way. Thanks!</p>
<pre><code>def smyFunction(aList,anotherList):
    n = 0
    for element in aList:
        if element in anotherList:
            n = n+1
    if n == len(aList):
        return True
    else:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sort the lists with <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> and then compare them with <code>==</code>:</p>
<pre><code>&gt;&gt;&gt; alist = ['A','B','C','D']
&gt;&gt;&gt; anotherList = ['A','C','B','D']
&gt;&gt;&gt; def smyFunction(aList,anotherList):
...     return sorted(aList) == sorted(anotherList)
...
&gt;&gt;&gt; smyFunction(alist, anotherList)
True
&gt;&gt;&gt;
</code></pre>
<p>You need to sort them first in case the elements are out of order:</p>
<pre><code>&gt;&gt;&gt; alist = ['A','B','C','D']
&gt;&gt;&gt; anotherList = ['D','A','C','B']
&gt;&gt;&gt; alist == anotherList
False
&gt;&gt;&gt; sorted(alist) == sorted(anotherList)
True
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Actually, it would probably be better to test the length of the lists first and then use <code>sorted</code>:</p>
<pre><code>return len(alist) == len(anotherList) and sorted(alist) == sorted(anotherList)
</code></pre>
<p>That way, we can avoid the sorting operations if the lengths of the list are different to begin with (using <code>len</code> on a list has <code>O(1)</code> (constant) complexity, so it is very cheap).</p>
</div>
<div class="post-text" itemprop="text">
<p>The two ways that come to mind are:</p>
<p>1) Use <code>collections.Counter</code></p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(alist) == Counter(anotherList)
True
</code></pre>
<p>2) Compare the sorted lists</p>
<pre><code>&gt;&gt;&gt; sorted(alist) == sorted(anotherList)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If there aren't duplicates, use a <code>set</code>, it doesn't have an order:</p>
<pre><code>set(alist) == set(anotherList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try like this:</p>
<pre><code>def check(a,b):
    return sorted(a) == sorted(b)
</code></pre>
</div>
<span class="comment-copy">Don't forget to test the length of the two lists first for a speed improvement when the two lists are of different sizes.</span>
<span class="comment-copy">@StevenRumbalski - Good idea.  I'll implement it.</span>
<span class="comment-copy">The <code>Counter</code> solution is nice because it's linear O(n) rather than O(n log n).</span>
<span class="comment-copy">@JohnKugelman - The <code>sorted</code> solution is <i>a lot</i> faster with smaller lists.  Running a simple <code>timeit</code> test yields <code>36.708395899478845</code> for <code>Counter</code> and just <code>3.7142343510138858</code> for <code>sorted</code>.  I would only recommend using <code>Counter</code> for large lists.</span>
<span class="comment-copy">@iCodez in case there aren't duplicates, would it be faster to use, return set(alist) == set(anotherList) ?</span>
<span class="comment-copy">@DWeiss23 - Yes, that is the fastest solution with a time of <code>2.1685054944136937</code>.  Of course, you should not just take my word for it but run your own tests.  <a href="https://docs.python.org/3/library/timeit.html#timeit.timeit" rel="nofollow noreferrer"><code>timeit.timeit</code></a> is available in every standard build of Python.</span>
<span class="comment-copy">-0.  Set doesn't work because <code>set([1, 2, 2, 3]) == set([1, 1, 2, 3])</code>.</span>
<span class="comment-copy">@StevenRumbalski: don't need to rush, please <i>read</i> my answer.</span>
<span class="comment-copy">Fair enough.  I'm still partial to using either <code>sorted</code> or <code>Counter</code> because it works whether or not there are duplicates.</span>
