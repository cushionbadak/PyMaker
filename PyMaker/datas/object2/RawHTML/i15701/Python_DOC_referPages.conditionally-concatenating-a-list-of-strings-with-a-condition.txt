<div class="post-text" itemprop="text">
<p>I would appreciate suggestions for a more efficient way to conditionally concatenate a list.</p>
<p>This technique seems to work:</p>
<pre><code>sentence = ['this ','is ','are ','a ','sentence']
string = ''
for i in sentence:
    if i != 'are ':
        string += i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> and a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>sentence = ['this ','is ','are ','a ','sentence']
string = ''.join([i for i in sentence if i != 'are '])
</code></pre>
<p>And yes, I used a list comprehension purposefully.  It is <a href="https://stackoverflow.com/a/9061024/2555451">generally faster</a> than a generator expression when using <code>str.join</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can filter out the <code>are</code> and concatenate with <code>"".join</code>, like this</p>
<pre><code>&gt;&gt;&gt; "".join(item for item in sentence if item != "are ")
</code></pre>
<p>Here, <code>"".join</code> means that, join the strings returned by the generator expression with no filling character. If you have <code>",".join</code>, then all the elements will be joined by <code>,</code>.</p>
<p>Actually, <code>"".join</code> will be faster with a list, than with a generator expression. So, just convert the generator expression to a list with list comprehension, like this</p>
<pre><code>&gt;&gt;&gt; "".join([item for item in sentence if item != "are "])
</code></pre>
</div>
<span class="comment-copy">On my computer the OP's solution is about 5% faster than the list comprehension+join</span>
<span class="comment-copy">I'll have to ask another question on SO about why a list comprehension outperforms a generator here.</span>
<span class="comment-copy">@mattkaeo It is already there. <a href="http://stackoverflow.com/a/9061024/1903116">Answered by one of the Python's core developers, Raymond Hettinger</a></span>
