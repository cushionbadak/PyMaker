<div class="post-text" itemprop="text">
<p>I want to compare the <code>s</code> in the for-loop to a bunch of numbers that are multiples of <code>5</code> and I don't want to write out all of the <code>or</code>'s in-between. Is there an easier way to write this?</p>
<pre><code>for s in range(0,50):
    lst = []
    if s == 5,10,15,20,25,30,35,40,45:
         lst.append(" ")
    else:
         lst.append(letter) #letter is defined earlier
</code></pre>
<p>Of course, it's not correct syntax the way I've written it and it comes up with a bunch of errors.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what the <a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow"><code>in</code> operator</a> is for<sup>1</sup>:</p>
<pre><code>if s in (5, 10, 15, 20, 25, 30, 35, 40, 45):
</code></pre>
<p>In this specific case however, you could just see if the number is divisible by <code>5</code>:</p>
<pre><code>if not s % 5:
# or
if s % 5 == 0:
</code></pre>
<p>Also, you need to move this line outside of the loop:</p>
<pre><code>lst = []
</code></pre>
<p>Otherwise, <code>lst</code> will be redefined with each iteration.</p>
<hr/>
<p><sup>1</sup>In Python 3.3 or greater, it would be more efficient to use a set literal here instead of a tuple literal:</p>
<pre><code>if s in {5, 10, 15, 20, 25, 30, 35, 40, 45}:
</code></pre>
<p>The newer versions of Python are smart enough to recognize constants such as this, evaluating them just once instead of each time they are encountered.  Thus, it is better to use a set, which has <code>O(1)</code> (constant) lookup time, rather than a tuple, which has <code>O(n)</code> (linear) lookup time.</p>
</div>
<span class="comment-copy">Thanks, that worked!</span>
<span class="comment-copy">I have done so, thanks for your help!</span>
<span class="comment-copy">Oh, and additionally, it was my intention to re-define lst every time through the loop because I am writing each lst to a line in a file -- triple-stacked for-loop, unfortunately :p</span>
