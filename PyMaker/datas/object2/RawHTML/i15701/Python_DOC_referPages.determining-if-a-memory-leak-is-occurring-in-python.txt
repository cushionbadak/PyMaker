<div class="post-text" itemprop="text">
<p>My understanding is that a memory leak in Python (&gt; Cpython 2.0 at least) can <em>only occur</em> under the following circumstances:</p>
<ol>
<li>A circular reference graph that contains one or more objects
with a <code>__del__</code> method</li>
<li>An extension C/C++ or other native code module that executes and leaks memory internally</li>
</ol>
<p>Of course, we need to make a distinction between an <strong><em>actual memory leak</em></strong> (a program where objects can never be reclaimed via the Garbage Collector or regular reference counting) versus a program which simply runs out of memory because it keeps allocating objects which never die - (but remain in reach) - usually because their reference graph connects with some global variable.</p>
<p>In order to distinguish between these two circumstances (i.e. actual memory leak vs. program which just keeps allocating collectable objects which never go out of reach), can we simply continuously call <code>gc.collect()</code> and check that the return value is <code>0</code> ?</p>
<p>In other words, if the following program never fails with an <code>AssertionError</code> (due to the assertion in Thread 2) have we effectively <em>proved</em> that there is <strong><em>no memory leak</em></strong> (as defined above)?</p>
<pre><code>Thread 1:
   ... run actual application code ...

Thread 2:
  while True:
    num = gc.collect()
    assert num == 0
    time.sleep(WAIT_TIME)
</code></pre>
<p>To be clear, I'm only asking if this program would prove that an actual memory leak, as defined by cases (1) and (2) above is NOT happening - I realize it wouldn't prove that the program will never run out of memory due to too many allocations.</p>
</div>
<div class="post-text" itemprop="text">
<p>This program is very likely to throw an <code>AssertionError</code> even if there is no memory leak.  It will do so any time the GC collects anything (<code>gc.collect()</code> returns nonzero in that case).  OTOH, <code>gc.collect()</code> does not collect what you refer to as "actual memory leaks," so they will <em>not</em> be reported in the <code>gc.collect()</code> return value.</p>
<p>In short, no, this program will not detect memory leaks correctly at all.  If you want to catch case (1), you can periodically check to make sure <code>gc.garbage</code> is empty, but that will not catch case (2), because the GC only becomes involved in managing an extension module's memory if the module asks (and even then, only to the extent that the module correctly tracks its owned references).  You need something like <a href="http://valgrind.org/" rel="nofollow">Valgrind</a> for the general case.</p>
</div>
<span class="comment-copy">Ref this: <a href="https://docs.python.org/2/library/gc.html#gc.garbage" rel="nofollow noreferrer">docs.python.org/2/library/gc.html#gc.garbage</a> Just because an object is currently unreachable, I don't think that means it can never be collected. E.g. I think cycle of objects with <code>__del__</code> will be reported as unreachable but you if you subsequently manually break the cycle then the GC will be able to collect them.</span>
<span class="comment-copy">Note that python3.4 changed quite a bit the part about cycles and <code>__del__</code> methods, so in python3.4 the gc is able to collect much more cases of cycles than before. Read the What's new section <a href="https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442" rel="nofollow noreferrer"><i>Safe object finalization</i></a> and <a href="http://legacy.python.org/dev/peps/pep-0442/" rel="nofollow noreferrer">PEP-442</a>.</span>
<span class="comment-copy">Hmm... I'm confused.  The docs don't seem to agree with what you're saying.  The docs say the <code>gc.collect()</code>: number of unreachable objects found is returned. (See <a href="https://docs.python.org/3/library/gc.html#gc.collect" rel="nofollow noreferrer">docs.python.org/3/library/gc.html#gc.collect</a>).  Am I misunderstanding the meaning of "unreachable objects found" ?  I thought that <code>gc.collect()</code> will basically return the number of objects it can't destroy due to them having a <code>__del__</code> method - but I understand your point about C modules - certainly <code>gc.collect()</code> has no way of knowing about general C allocation</span>
<span class="comment-copy">The "number of unreachable objects found" means "the number of objects which were eligible for collection."  I'm not entirely sure if that includes case (1), but it certainly includes anything which actually was collected, and it cannot possibly include case (2) because the GC may not be aware of case (2) objects in the first place (e.g. because your extension module just calls <code>malloc()</code> and leaks the result).</span>
