<div class="post-text" itemprop="text">
<p>I want to create a code that will return "true" (if I type in a palindrome regardless of case or if there are special characters in it), and "false" otherwise. The code I have so far works for phrases with no special characters such as commas, apostrophes, spaces, etc. </p>
<pre><code>def is_palindrome(my_str):
    my_str= my_str.casefold()
    rev_str= reversed(my_str)

if list(my_str) == list(rev_str):
   print("True")
else:
   print("False")
</code></pre>
<p>when I do:</p>
<pre><code> print (is_palindrome("Rats live on no evil star"))
</code></pre>
<p>it returns True because it is a palindrome</p>
<p>when I do:</p>
<pre><code> print (is_palindrome("Hello World!"))
</code></pre>
<p>it returns False because it is not a palindrome</p>
<p>when I do:</p>
<pre><code> print (is_palindrome("Madam, I'm Adam"))
</code></pre>
<p>it returns False. but I want to create a code that considers this a palindrome</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to filter before testing then:</p>
<pre><code>letters = [c.casefold() for c in my_str if c.isalpha()]
</code></pre>
<p>would pick out only the letters and lowercase them, after which you can test of those letters form a palindrome:</p>
<pre><code>return letters == letters[::-1]
</code></pre>
<p>This works because <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="noreferrer"><code>str.isalpha()</code></a> returns <code>True</code> only for letters.</p>
<p>Combined into your function:</p>
<pre><code>def is_palindrome(my_str):
    letters = [c.casefold() for c in my_str if c.isalpha()]
    return letters == letters[::-1]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def is_palindrome(my_str):
...     letters = [c.casefold() for c in my_str if c.isalpha()]
...     return letters == letters[::-1]
... 
&gt;&gt;&gt; is_palindrome("Rats live on no evil star")
True
&gt;&gt;&gt; is_palindrome("Hello World!")
False
&gt;&gt;&gt; is_palindrome("Madam, I'm Adam")
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_str = my_str.casefold()
my_str = ''.join(e for e in my_str if e.isalpha())
</code></pre>
<p>This should recreate my_str with only alphabetical characters, using .isalpha(). Then do the test on that. If you want to keep a record of original string, just stored the recreated version is a temporary string.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to exclude punctuation and spaces you can use <code>str.translate</code>:</p>
<pre><code>from string import punctuation

d = {k: None for k in punctuation}
d[" "] = None

def is_palindrome(my_str):
    trans = str.maketrans(d)
    my_str = my_str.translate(trans).casefold()
    return my_str == my_str[::-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may get just alphanumeric character in your string;</p>
<pre><code>re.sub(r'[^a-zA-Z0-9]+', '', your_string).lower()
</code></pre>
<p>By the way this one works, if you ignores non-ASCII chars.</p>
</div>
<span class="comment-copy">Every character is special in its own way.</span>
<span class="comment-copy">Why not just remove all unacceptable characters before you test it?</span>
<span class="comment-copy">You need to come up with a rule for what you do and don't want to count. The fact that you're using <code>casefold</code> instead of <code>lower</code> implies that you might care about non-ASCII letters. For example, if you just skip everything that's not an ASCII letter, <code>Ã…rhus</code> and <code>suhr</code> count as reverses of each other. (You also might want to normalize to combined form before comparing, too.)</span>
<span class="comment-copy">But <code>\W</code> doesn't mean "alphanumeric", it means "valid as an identifier". It includes <code>_</code>, may or may not include non-ASCII letters, and does not include non-ASCII digits.</span>
<span class="comment-copy">I do not say \W means "alphanumeric", but you are right about _.</span>
