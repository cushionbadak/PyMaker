<div class="post-text" itemprop="text">
<p>I want to do the following: I want to define a recursive function <code>funct</code> in which the last reference of itself return a number of the array <code>temp</code>. The problem is that <code>funct</code> must do an integral of itself (see the code below) and this would be very easy if <code>funct</code> could accept the colon <code>:</code> as an argument. So, I have this (simplified) code so far:</p>
<pre><code>import numpy as np   
import scipy.integrate as ints

temp = np.array([[1,2,3,4,5],[4,0,6,7,8],[7,8,9,10,11],[1,2,3,4,5],[6,7,8,9,10]])

def funct(x,y,n):
    if n&gt;1:
        return (temp[x,y] + ints.cumtrapz(temp[x,:]*funct(:,y,n-1), x=None, dx=1, initial=0)[-1])
    else:
        return temp[x,y]
funct = np.vectorize(funct)
funct(1,1,3)
</code></pre>
<p>The problem is that <code>funct</code> can't accept the colon <code>:</code> as argument, it doesn't matter if I want to <em>vectorize</em> to <code>funct</code> later in the code.</p>
<p>For instance, If I change this part of the above code </p>
<pre><code>ints.cumtrapz(temp[x,:]*funct(:,y,n-1), x=None, dx=1, initial=0)[-1]) 
</code></pre>
<p>for </p>
<pre><code>ints.cumtrapz(temp[x,:]*temp[:,y], x=None, dx=1, initial=0)[-1]) 
</code></pre>
<p>I have no problems. I just want to do the last part recursively.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, Python doesn't have "range operators" like some other languages. The <code>:</code> generates <code>slice</code>s, which are a completely different type from <code>range</code>s. And, more importantly, the <code>:</code> syntax is part of the <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="nofollow">slicing</a> (aka extended indexing or extended subscription) syntax, it doesn't stand on its own.</p>
<p>So, the simple way to write your code is to use a <code>slice</code> literal:</p>
<p>Of course you could also avoid all this mess and just use an explicit slice literal:</p>
<pre><code>def funct(x, y, n):
    if n&gt;1:
        return (temp[x,y] + ints.cumtrapz(temp[x,:]*funct(slice(None),y,n-1), x=None, dx=1, initial=0)[-1])
    else:
        return temp[x,y]
</code></pre>
<hr/>
<p>So, why isn't there a syntax for "slice literals" that's more convenient than calling the <code>slice</code> constructor? Because nobody's come up with a compelling argument, worked out potential syntax ambiguities, and submitted a patch.*</p>
<p><sub>* Note that Python <em>did</em> add a syntax for ellipsis literals on their own—<code>...</code> is a literal for <code>Ellipsis</code>, the singleton value of type <code>ellipsis</code>. A lot of people wanted that, there were no ambiguities except in code that was already illegal, someone wrote a patch, and it was accepted with little fuss.</sub></p>
<hr/>
<p>While the syntax for extended indexing and the syntax for function calls are somewhat similar, they're not identical. That means you can't use function calls as, e.g., a domain-specific language for wrapping up delayed slicing.</p>
<p>One thing you <em>can</em> do is create a slice-wrapper type, to using slicing expressions themselves as such a domain-specific language:</p>
<pre><code>class Slicer:
    def __getitem__(self, idx):
        return idx
s = Slicer()
</code></pre>
<p>Now <code>s[:]</code> is a constructor for <code>slice(None)</code>, and <code>s[3:23:2, ..., 4]</code> is a constructor for <code>(slice(3, 23, 2), Ellipsis, 4)</code>. So you can write things like this:</p>
<pre><code>funct(s[:,y,n-1])
</code></pre>
<p>Your <code>funct</code> class will get a tuple of <code>slice</code> objects and integers, which it can later use to index an array by calling its <code>__getitem__</code> directly.</p>
<p>And you can wrap up more of that if you want. For example:</p>
<pre><code>class SliceCallable(object):
    def __init__(self, f):
        self.f = f
    def __getitem__(self, idx):
        if isinstance(idx, collections.abc.Sequence):
            return self.f(*idx)
        else:
            return self.f(idx)
    def __call__(self, *args):
        return self.f(*args)

@SliceCallable
def funct(x, y, n):
    if n&gt;1:
        return (temp[x,y] + ints.cumtrapz(temp[x,:]*funct[:,y,n-1], x=None, dx=1, initial=0)[-1])
    else:
        return temp[x,y]
</code></pre>
<p>Now, <code>funct</code> can be called as either <code>funct(1, 2, 3)</code> or <code>funct[1, 2, 3]</code>—or as <code>funct[:, 2, 3]</code> or <code>funct[4:-1]</code>. That just means that <code>x</code> will be <code>slice(None, None, None)</code> or <code>slice(4, -1, None)</code>. And you can use that in an indexing expression; <code>temp[slice(None, None), 3]</code> may not look as nice as <code>temp[:, 3]</code>, but it means the same thing.</p>
</div>
<span class="comment-copy">A colon is not a range operator for Python or an <code>ndarray</code>.  What dp ypu want to pass as the argument?</span>
<span class="comment-copy">Thank you @abarnet!!. This is just the information I was looking for..!!!</span>
<span class="comment-copy">Note for the particular use of <code>numpy</code>, you can use e.g. <code>np.s_[4:6]</code> to return a <code>slice</code> object.  See <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/numpy.s_.html</a></span>
