<div class="post-text" itemprop="text">
<p>I am struggling to find any documentation anywhere on what this actually is. I understand just an ordinary dictionary. This consists of key and value pairs so if you search for a key its corresponding value is returned, For example:</p>
<pre><code>myDict = {‘dog’ : ’fido’, ‘cat’ : ’tiddles’, ‘fish’ : ’bubbles’, ’rabbit’ : ’thumper’}
</code></pre>
<p>And then you can invoke certain methods on this like:</p>
<pre><code>myDict[‘fish’]
</code></pre>
<p>returns</p>
<pre><code>'bubbles'
</code></pre>
<p>or</p>
<pre><code>myDict.has_key(‘tiddles’)
</code></pre>
<p>returns</p>
<pre><code>True
</code></pre>
<p>How would a two-level dictionary compare to this?</p>
<p>It appears nested dictionaries was what I was looking for.</p>
<p>One more question, say I have a nested dictionary which links words to text files where the first integer is the number of the text file and the second is the number of occurrences:</p>
<pre><code>myDict = {'through':{1:18,2:27,3:2,4:15,5:63}, 'one':{1:27,2:15,3:24,4:9,5:32}, 'clock':{1:2,2:5,3:9,4:6,5:15}
</code></pre>
<p>How would I use the file numbers to work out the total number of text files that were present? i.e is there a way of extracting the number of key / value pairs in the inner dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess a two level dictionary could be a dictionary of dictionaries i.e</p>
<pre><code>dict = {'a':{"cool":1,"dict":2}}
</code></pre>
<p>you could use it like</p>
<pre><code>dict['a']['cool'] 
&gt;&gt; 1
</code></pre>
<p>so you can do</p>
<pre><code>dict['a'].has_key('cool')
&gt;&gt; True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is just a nested dictionary, meaning it contains other dictionaries, for example</p>
<pre><code>d = {'mike':{'age':10, 'gender':'male'}, 'jen':{'age':12, 'gender':'female'}}
</code></pre>
<p>I can access inner values such as</p>
<pre><code>&gt;&gt;&gt; d['mike']['age']
10
</code></pre>
<p>Common examples of deeply nested dictionaries in Python are reading and writing of <a href="https://docs.python.org/3/library/json.html" rel="nofollow">JSON</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you mean a two-way dictionary, here's a recipe (from <a href="https://stackoverflow.com/questions/1456373/two-way-reverse-map">Two way/reverse map</a>):</p>
<pre><code>class TwoWayDict(dict):
    def __setitem__(self, key, value):
        # Remove any previous connections with these values
        if key in self:
            del self[key]
        if value in self:
            del self[value]
        dict.__setitem__(self, key, value)
        dict.__setitem__(self, value, key)

    def __delitem__(self, key):
        dict.__delitem__(self, self[key])
        dict.__delitem__(self, key)

    def __len__(self):
        """Returns the number of connections"""
        return dict.__len__(self) // 2
</code></pre>
<p>usage:</p>
<pre><code>myDict = {‘dog’ : ’fido’, ‘cat’ : ’tiddles’, ‘fish’ : ’bubbles’, ’rabbit’ : ’thumper’}

twowaydict = TwoWayDict() # can't instantiate with old dict, need to setitem
for key in myDict: 
    twowaydict[key] = myDict[key]

twowaydict.has_key('tiddles')
</code></pre>
<p>returns <code>True</code></p>
<p>If you mean a dict of dicts, that's fairly common construct, where the values of the containing dict are also dicts.</p>
<pre><code>dofd = {'key1': {'subkey1': 'value1,1', 'subkey2': 'value1,2'}
        'key2': {'subkey1': 'value2,1', 'subkey2': 'value2,2'}
       }
</code></pre>
<p>and you'd access the internal values like this:</p>
<pre><code>dofd['key1']['subkey2']
</code></pre>
<p>should return <code>value1,2</code></p>
</div>
<span class="comment-copy">I think he means a two-way dictionary.</span>
<span class="comment-copy">"Two-level dictionary" isn't really an official term, but it's a reasonably common way to describe a nested dictionary of exactly two levels—that is, a dictionary which has only dictionaries for values (but those sub-dictionaries don't have dictionaries for values).</span>
<span class="comment-copy">tiddles is a value, not a key, it should return False if he doesn't mean a two-way dict. I give an answer below</span>
<span class="comment-copy">Yes I think a dictionary of dictionaries is what I am looking for. I have another question though?</span>
<span class="comment-copy">I might be wrong, but beware with <code>return dict.__len__(self) // 2</code>. What happens if <code>twowaydict['a'] = 'a'</code>?</span>
<span class="comment-copy">It's got some semantics to iron out, but it's just a recipe.</span>
