<div class="post-text" itemprop="text">
<p>How does Django translate this <code>&lt;bound method Child.parent_identity of &lt;Child: &gt;&gt;</code> object in a string object, and displays it as such in my django-admin  "inline" Child class idparent field ? 
What does Django do ?</p>
<p>I have the following application structure:</p>
<pre><code>##========================models.py
...
from django_extensions.db.fields import UUIDField

class Parent(models.Model):
    id           = UUIDField(primary_key=True)

class Child(models.Model):
    parent      = models.ForeignKey(Parent)
    idparent    = models.CharField(max_length=100)
    def parent_identity(self):
        return self.parent_id

#========================admin.py
class ChildForm(forms.ModelForm):
    class Meta:
        model   = Child
        exclude = []
    def __init__(self, *args, **kwargs):
        super(ChildForm, self).__init__(*args, **kwargs)
        #print self.instance.parent_identity
        self.initial['idparent']   = self.instance.parent_identity        

class ChildInline(admin.TabularInline):
    model = Child
    extra = 1
    form  = ChildForm

class ParentAdmin(admin.ModelAdmin):
    exclude = []
    inlines = [ChildInline]
    #list_display, etc
admin.site.register(Parent,ParentAdmin)
</code></pre>
<p>My inline <code>idparent</code> field displays the Parent id field CORRECTLY in the admin inline interface. Being a newbie, it's magic for me, because <code>self.instance.parent_identity</code> is initially not a string object.</p>
<pre><code>print self.instance.parent_identity
#it prints  : &lt;bound method Child.parent_identity of &lt;Child: &gt;&gt;
</code></pre>
<p>But how to explictly print the string content as follows </p>
<pre><code>&gt;&gt;print self.instance.parent_identity
#would print  : fffeee29-7ac6-42eb-8a8d-eb212d2365ff
</code></pre>
<p>That is, how to get it so as to deal with it in the ChildForm class ?</p>
<h1>UPDATE</h1>
<p>I do not mind specifically about "UUID in the form when the instance hasn't been created yet"
and i do not want to provide an initial value myself.</p>
<p>I want my still empty (extra) Child fields (one field in my example code: idparent) to contain by default something which is Parent variable.</p>
<p>Is it possible ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Django templates automatically <em>call</em> any object that is callable; e.g. the <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable()</code> function</a> returns <code>True</code> when you pass the object in. From the <a href="https://docs.djangoproject.com/en/stable/topics/templates/#variables" rel="nofollow noreferrer"><em>Variables</em> section in the template documentation</a>:</p>
<blockquote>
<p>If the resulting value is callable, it is called with no arguments. The result of the call becomes the template value.</p>
</blockquote>
<p>Bound methods are callable, so instead of using <code>self.instance.parent_identity</code>, the template uses the output of <code>self.instance.parent_identity()</code>.</p>
<p>In your own code, you generally already know that something is a method and you call it explicitly:</p>
<pre><code>def __init__(self, *args, **kwargs):
    super(ChildForm, self).__init__(*args, **kwargs)
    self.initial['idparent']   = self.instance.parent_identity()
</code></pre>
<p>You can treat the <code>parent_identity</code> method as an attribute; have Python call it automatically without you having to call it explicitly. If you never have to pass in an argument, then that might make sense. You do this by decorating the method with the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>@property</code> decorator</a>:</p>
<pre><code>class Child(models.Model):
    parent      = models.ForeignKey(Parent)
    idparent    = models.CharField(max_length=100)

    @property
    def parent_identity(self):
        return self.parent_id
</code></pre>
<p>at which point <code>self.instance.parent_identity</code> will give you the return value of that method.</p>
<p>Take into account that the <code>UUIDField</code> only is given a value on <a href="https://docs.djangoproject.com/en/stable/howto/custom-model-fields/#preprocessing-values-before-saving" rel="nofollow noreferrer">pre-save</a>; it'll be <code>None</code> until the object is saved in a database. </p>
<p>If you really wanted to UUID in the form when the instance hasn't been created yet, you'll have to provide an initial value yourself:</p>
<pre><code>import uuid 

class ParentAdmin(admin.ModelAdmin):
    exclude = []
    inlines = [ChildInline]

    def __init__(self, *args, **kwargs):
        super(ParentAdmin, self).__init__(*args, **kwargs)
        self.fields['id'].initial = uuid.uuid4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are calling a function, which means you need to use it as such:</p>
<pre><code>self.initial['idparent']   = self.instance.parent_identity()
</code></pre>
<p>Alternately you could wrap it with the <code>@property</code> decorator and continue using it as you are, <strong>notice that you need to use</strong> <code>self.parent.id</code> <strong>if you want to access the parent's id</strong>:</p>
<pre><code>class Child(models.Model):
    parent      = models.ForeignKey(Parent)
    idparent    = models.CharField(max_length=100)

    @property
    def parent_identity(self):
        return self.parent.id
</code></pre>
</div>
<span class="comment-copy">1) If i do, as i am now : <code>self.instance.commune_identity</code> It displays the uuid in my inline field 2) If i make it a method, or add the <code>@property</code> decorator: It returns None</span>
<span class="comment-copy">@Learner: then <i>at that point</i> the parent id is still <code>None</code>, perhaps because it hasn't been assigned an id just yet.</span>
<span class="comment-copy">@Learner: looking at the source code for that field I see it uses a <code>pre_save</code> method, meaning it'll only generate a value when the object is being saved.</span>
<span class="comment-copy">Thanks for your help Martijn. That's the point. I am trying to set the default value of the inline Child class <code>idparent</code> <code>extra</code> field. As such, Child has no content recorded at all. But Parent does !</span>
<span class="comment-copy">@Learner: then you either have to force the parent object to be saved first, or not display a UUID when first creating your objects.</span>
<span class="comment-copy">Ok, excepted that it must be <code>self.parent_id</code> instead of <code>self.parent.id</code></span>
