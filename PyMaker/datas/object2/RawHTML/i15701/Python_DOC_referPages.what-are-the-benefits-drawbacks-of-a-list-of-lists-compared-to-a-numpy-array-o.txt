<div class="post-text" itemprop="text">
<p>I'm trying to understand the memory and other overhead implications that using <code>numpy</code> lists would have for arrays of <strong><code>dtype</code></strong> <code>object</code> compared to lists of lists.</p>
<p><strong>Does this change with dimensionality?</strong> eg 2D vs 3D vs N-D.</p>
<p>Some of the the benefits I can think of when using <code>numpy</code> arrays are that things like <strong><code>.shape</code></strong>, <strong><code>.T</code></strong> and that you can cast them as matrices with <code>np.matrix</code> much faster.</p>
<p><strong>Is there anything else?</strong></p>
<p>Also, if anyone is interested the object I'm using is:</p>
<pre><code>import gmpy2 as gm
gm.mpfr( '0' )                                           # &lt;-- this is the object
</code></pre>
<p>EDIT:</p>
<p>Just to clarify I'm interested in the case where the <code>numpy</code> array type is <code>object</code> not a native numpy-type.</p>
<p>EDIT 2:</p>
<p>Relevant follow up with regards to speed.</p>
<p><a href="https://stackoverflow.com/questions/26768013/what-are-the-benefits-drawbacks-of-a-list-of-lists-compared-to-a-numpy-array-o">What are the benefits / drawbacks of a list of lists compared to a numpy array of OBJECTS with regards to SPEED?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to answer your primary question, and leave the others (performance of transpose, etc.) out. So:</p>
<blockquote>
<p>I'm trying to understand the memory and other overhead implications that using numpy lists would have … Just to clarify I'm interested in the case where the numpy array type is <code>object</code> not a <code>float</code>, <code>double</code> or <code>int</code></p>
</blockquote>
<p>A Python list is an array of pointers to Python objects wrapping whatever actual values you've stored in it—plus some extra slack to allow it to be expanded on the fly efficiently. Let's call that slack 20%, just for the sake of easy computation. For example, an list of 10000 32-bit integers takes up, say, 96000 bytes for the array, plus around 240000 bytes for the Python integer objects, plus a small overhead for the list itself, say 80 bytes again.</p>
<p>A NumPy array is an array of whatever actual values you've stored in it. For example, an array of 10000 32-bit integers takes up 40000 bytes, plus a small overhead for the array itself, say 80 bytes. But when you're using dtype <code>object</code>, each "actual value" is just a pointer to a Python object, just as with a <code>list</code>. </p>
<p>So, the only real difference here is the slack: The array is going to use 320080 bytes, while the list is going to use 336080 bytes. Not a huge difference, but it can matter.</p>
<hr/>
<blockquote>
<p>Also, does one become faster than the other in 2D vs ND or with the size along a given dimension.</p>
</blockquote>
<p>Yes, the nested list will increase faster… but not by a huge amount.</p>
<p>A multidimensional array in numpy is stored as one giant array (in either C or Fortran striding order), so whether the shape is <code>(10000,)</code>, <code>(100, 100)</code>, or <code>(10, 10, 10, 10)</code>, it's the same size. (The overhead may get a few bytes bigger to store more information about the striding, but if we're talking about, say, 256 bytes vs. 80 out of 320K, who cares?)</p>
<p>A nested list, on the other hand, has more lists, with slack and overhead at every level. For example, a list of 10 lists of 10 lists of 10 lists of integers has 1+10+100+1000 arrays of 12 pointers, and 1+10+100+1000 list headers.</p>
<p>So, the array is still using 320080 bytes, or maybe 320256, but the list is using 435536.</p>
<hr/>
<p>If you want to know more about how <code>list</code> is implemented… well, that depends on the implementation you're using. But in CPython, the <a href="https://docs.python.org/3/c-api/list.html#list-objects" rel="nofollow">C API</a> pretty much guarantees that it's going to be storing a contiguous array of <code>PyObject *</code>, and the fact that appending is amortized constant time pretty much requires that it leave slack that grows proportionately. And you can see in <a href="https://hg.python.org/cpython/file/default/Include/listobject.h" rel="nofollow">the headers</a> and <a href="https://hg.python.org/cpython/file/default/Objects/listobject.c" rel="nofollow">the source</a> that this is exactly what it does. (Also, keep in mind that the specific sizes you get from that source will generally depend on the platform you compile it on. Most importantly, because there are pointers all over the place, 64-bit platforms tend to have somewhere between 50-100% more overhead per object for most objects than 32-bit platforms.)</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/q/993984/3923281">This question</a> and its answers may be relevant...</span>
<span class="comment-copy">indeed. though one thing that worries me is the fact that numpy is faster for floating points but what happens when you have objects instead of floating points? Does a numpy array dumb down to a list of lists?</span>
<span class="comment-copy">This seems like too broad of a question. There are a number of specific questions buried in here, like comparing the memory usage of, say, a 10x10x10x10, 100x100, and 10000 array of int32 vs. the equivalent nested list of ints, but each one deserves its own question.</span>
<span class="comment-copy">Hm... ok so should I try to break it into a memory question as you said and a speed question? also, the int32 case is a native numpy type so I'm not sure if it's relevant to the question. The main point of the question is what happens when arrays are of dtype <code>object</code></span>
<span class="comment-copy">@evan54: Yeah, making this just about memory, and just about <code>object</code>, makes it a good question.</span>
<span class="comment-copy">This is very interesting and along the lines of what I thought may be the case, +1. I'd be interested in exact values for the slack size and overhead size in general for lists / object arrays. Any pointers to where I can read up on that?</span>
<span class="comment-copy">@eickenberg: I've edited the answer. Since it's not documented anywhere, you need to pick a Python implementation and version that you care about and read the source. I've linked to the source for the trunk version of CPython.</span>
<span class="comment-copy">Yes, beautiful, thanks very much for these very helpful links</span>
<span class="comment-copy">@eryksun: Thanks for the catch! Edited.</span>
