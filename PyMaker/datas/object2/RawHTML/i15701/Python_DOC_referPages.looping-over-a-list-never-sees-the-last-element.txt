<div class="post-text" itemprop="text">
<p>I do not know why, when I enter the <code>"apathetic"</code> mood, it just does not work.</p>
<pre><code>'''
Mood Assessment Application.
'''

#function to prompt the user to enter mood
#and check to see whether the mood entered
#is valid or not. allowed moods: (happy, sad, angry, apathetic)
def getMood(message):
    moods = ['happy', 'sad', 'angry', 'apathetic']

    mood = ' '
    run = True
    while run:
        mood = input("Please enter mood: ")
        mood = mood.lower()
        for i in range(len(moods)-1):
            #print("%s == %s" % (mood, moods[i]))
            if mood == moods[i]:
                run = False
                break
    return mood

#function to write mode to the moods.txt
#file in append mode
def writeMood(mood):

    myFile = open("moods.txt", "a")
    myFile.write(mood + "\n")
    myFile.close()

#function to count for mood frequencies
def moodFrequencies(moods):
    #['happy', 'sad', 'angry', 'apathetic']
    freq = [0, 0, 0, 0]
    i = 0
    s = len(moods) - 1

    #read the moods in reverse order
    #count last 7 or less
    while s &gt;= 0 and i &lt; 7:
        m = moods[s].lower()
        s -= 1
        i += 1
        #print(m)
        if m == 'happy':
            freq[0] += 1
        elif m == 'sad':
            freq[1] += 1
        elif m == 'angry':
            freq[2] += 1
        else:
            freq[3] += 1
    return freq

#function to load all the moods into the list
#return the list
def loadMoods():
    myFile = open("moods.txt")

    moods = []

    for line in myFile:
        moods.append(line.strip())

    return moods

#function to compute the average mood and display it
def averageMood(f):
    #['happy', 'sad', 'angry', 'apathetic']
    total = (f[0] * 1) + (f[1] * 2) + (f[2] * 3) + (f[3] * 4)
    avg = int(total / 7)

    if avg == 1:
        print("You average mood is HAPPY")
    elif avg == 2:
        print("You average mood is SAD")
    elif avg == 3:
        print("You average mood is ANGRY")
    else:
        print("You average mood is APATHETIC")


#main method
def main():

    run = True

    #interact with the user and get the input for
    #mood
    while run:
        mood = getMood("Please Enter Your Mood Today: ")

        #write to the file
        writeMood(mood)

        #if the user want to enter more
        ch = input("\nWould you like to enter another? (y/n): ")

        #exit loop if he/she don't
        if ch.lower() == 'n':
            run = False

    #load moods
    moods = loadMoods()

    #calculate frequencies of the mood read from the file
    #['happy', 'sad', 'angry', 'apathetic']
    freq = moodFrequencies(moods)

    #average mood
    averageMood(freq)
    #print(freq)
    #mood diagnosis
    if freq[0] &gt;= 5:
        print("You are diagnosed as manic")
    elif freq[1] &gt;= 4:
        print("You are diagnosed as depressive")
    elif freq[3] &gt;= 6:
        print("You are diagnosed as schizoid")

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's because of this line:</p>
<pre><code>for i in range(len(moods)-1):
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer"><code>range</code></a> returns a <em>half-open</em> range. For example, <code>range(4)</code> gives you the four numbers <code>0, 1, 2, 3</code>. So, <code>range(4-1)</code> gives you the three numbers <code>0, 1, 2</code>.</p>
<hr/>
<p>Meanwhile, it's worth noting that avoiding off-by-one errors like this is a major part of the reason you should just be looping over sequences directly. Instead of this:</p>
<pre><code>for i in range(len(moods)):
    if mood == moods[i]:
        # etc.
</code></pre>
<p>â€¦ just do this:</p>
<pre><code>for m in moods:
    if mood == m:
        # etc.
</code></pre>
<hr/>
<p>Or, as <a href="https://stackoverflow.com/users/541038/joran-beasley">Joran Beasley</a> points out in the comments, if the only thing you're doing is checking whether <code>mood</code> is equal to any of <code>moods</code>, you can do that much more simply:</p>
<pre><code>run = mood not in moods
</code></pre>
<hr/>
<p>But you can simplify this even further. You set a flag to break out of the outer loop, then <code>break</code> out of the inner loop, all so that you can <code>return</code>. Why not just <code>return</code> directly?</p>
<pre><code>def getMood(message):
    moods = ['happy', 'sad', 'angry', 'apathetic']
    while True:
        mood = input("Please enter mood: ")
        mood = mood.lower()
        if mood in moods:
            return mood
</code></pre>
</div>
<span class="comment-copy">or just <code>if mood.lower() in moods:break</code> ... +1 all the same as that is exactly his problem</span>
