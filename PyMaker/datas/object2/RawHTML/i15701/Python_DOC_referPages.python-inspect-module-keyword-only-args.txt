<div class="post-text" itemprop="text">
<p>The phrase "keyword only args" in Python is a bit ambiguous - usually I take it to mean args passed in to a <code>**kwarg</code> parameter.  However, the <code>inspect</code> module seems to make a distinction between <code>**kwarg</code> and something called "keyword only arguments".</p>
<p>From <a href="https://docs.python.org/3.4/library/inspect.html#inspect.getfullargspec" rel="noreferrer"><strong>the docs</strong></a>:</p>
<blockquote>
<p><strong>inspect.getfullargspec(func)</strong></p>
<p>Get the names and default values of a Python functionâ€™s arguments. A
  named tuple is returned:</p>
<p><code>FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,
            annotations)</code></p>
<p><code>args</code> is a list of the argument names. <code>varargs</code> and <code>varkw</code> are the names
  of the <code>*</code> and <code>**</code> arguments or <code>None</code>. defaults is an n-tuple of the
  default values of the last n arguments, or None if there are no
  default arguments. <code>kwonlyargs</code> is a list of keyword-only argument
  names. <code>kwonlydefaults</code> is a dictionary mapping names from <code>kwonlyargs</code> to
  defaults. <code>annotations</code> is a dictionary mapping argument names to
  annotations.</p>
</blockquote>
<p>So the inspect module has something called <code>kwonlyargs</code> and <code>kwonlydefaults</code>.  What does this mean in an actual function signature?  If you have a function signature that accept a <code>**kwarg</code> argument, you can't really know the <em>names</em> of the keyword arguments until runtime, because the caller can basically just pass any arbitrary dictionary.  So, what meaning does <code>kwonlyargs</code> have in the context of a <em>function signature</em> - which is what the <code>inspect.getfullargspec</code> provides.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong>:  Keyword-only arguments are not the same as normal keyword arguments.</p>
<hr/>
<p>Keyword-only arguments are arguments that come after <code>*args</code> and before <code>**kwargs</code> in a function call.  As an example, consider this generic function header:</p>
<pre><code>def func(arg, *args, kwonly, **kwargs):
</code></pre>
<p>In the above, <code>kwonly</code> takes a keyword-only argument.  This means that you must supply its name when giving it a value.  In other words, you must explicitly write:</p>
<pre><code>func(..., kwonly=value, ...)
</code></pre>
<p>instead of just passing a value:</p>
<pre><code>func(..., value, ...)
</code></pre>
<hr/>
<p>To explain better, consider this sample call of the function given above:</p>
<pre><code>func(1, 2, kwonly=3, kw=4)
</code></pre>
<p>When Python interprets this call, it will:</p>
<ul>
<li><p>Assign <code>arg</code> to <code>1</code> because its position in the function signature matches the position of <code>1</code> in the call.</p></li>
<li><p>Place <code>2</code> in <code>*args</code> because <code>*args</code> collects any extra positional arguments and <code>2</code> is extra.</p></li>
<li><p>Assign <code>kwonly</code> to <code>3</code> because we have (as is necessary) explicitly told it to.  Note that if we had done this instead:</p>
<pre><code>func(1, 2, 3, kw=4)
</code></pre>
<p><code>3</code> would also be placed in <code>*args</code> and a <code>TypeError</code> would be raised for not supplying an argument to <code>kwonly</code> (since we did not give it a default value in this case).</p></li>
<li><p>Place <code>kw=4</code> in <code>**kwargs</code> because it is an extra keyword argument, which are collected by <code>**kwargs</code>.</p></li>
</ul>
<p>Below is a demonstration of what I said above:</p>
<pre><code>&gt;&gt;&gt; def func(arg, *args, kwonly, **kwargs):
...     print('arg:', arg)
...     print('args:', args)
...     print('kwonly:', kwonly)
...     print('kwargs:', kwargs)
...
&gt;&gt;&gt; func(1, 2, kwonly=3, kw=4)
arg: 1
args: (2,)
kwonly: 3
kwargs: {'kw': 4}
&gt;&gt;&gt;
&gt;&gt;&gt; func(1, 2, 3, kw=4)  # Should have written: 'kwonly=3'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: func() missing 1 required keyword-only argument: 'kwonly'
&gt;&gt;&gt;
</code></pre>
<p>Basically, you can look at keyword-only arguments as keyword arguments where you must supply the name of the parameter when giving them a value.  A positional value will not suffice, as with normal keyword arguments.</p>
<pre><code>&gt;&gt;&gt; def func(kw=None):
...     print('kw:', kw)
...
&gt;&gt;&gt; func(kw=1)
kw: 1
&gt;&gt;&gt; func(1)  # Do not need the name in this case.
kw: 1
&gt;&gt;&gt;
&gt;&gt;&gt; def func(*, kwonly=None):
...     print('kwonly:', kwonly)
...
&gt;&gt;&gt; func(kwonly=1)
kwonly: 1
&gt;&gt;&gt; func(1)  # Always need the name with keyword-only arguments.
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: func() takes 0 positional arguments but 1 was given
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Finally, I know that some people are thinking "Why have keyword-only arguments anyways?"  The answer is simply that they make things more readable in some cases (especially with functions that take a variable number of arguments).</p>
<p>As an example, consider the built-in <code>max</code> function and its keyword-only <code>key</code> argument.  What is more readable to you?  Doing something like this:</p>
<pre><code>max(lambda x: -x, arg1, arg2, arg3)
</code></pre>
<p>and having people <em>remember</em> that the first argument to <code>max</code> is always the <a href="https://docs.python.org/3/glossary.html#term-key-function">key function</a> or doing this:</p>
<pre><code>max(arg1, arg2, arg3, key=lambda x: -x)
</code></pre>
<p>and making it clear to everyone that <code>lambda x: -x</code> is your key function.  Plus, making <code>key</code> a keyword-only argument allows you to simply omit the key function if you do not need one:</p>
<pre><code>max(arg1, arg2, arg3)
</code></pre>
<p>instead of doing:</p>
<pre><code>max(None, arg1, arg2, arg3)
</code></pre>
<hr/>
<p>For more information, you can check out these sources:</p>
<ul>
<li><a href="https://docs.python.org/3/reference/compound_stmts.html#function">https://docs.python.org/3/reference/compound_stmts.html#function</a></li>
<li><a href="https://docs.python.org/3/reference/expressions.html#calls">https://docs.python.org/3/reference/expressions.html#calls</a></li>
<li><a href="https://docs.python.org/3/glossary.html#term-parameter">https://docs.python.org/3/glossary.html#term-parameter</a></li>
</ul>
</div>
