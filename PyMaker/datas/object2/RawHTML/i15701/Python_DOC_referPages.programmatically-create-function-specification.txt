<div class="post-text" itemprop="text">
<blockquote>
<p><strong>UPDATE</strong>: I'm not asking about a variable number of arguments. The end result (if possible) should be a function defined <em>exactly</em> as per
  my example below, or at least behaving exactly in that way - I've
  added some examples to the question to try and clarify this.</p>
<p>(It may be the case that the only way to achieve this is to use <code>func(*args, **kwargs)</code> and then manually process those and raise the appropriate exceptions if the inputs don't exactly match expectations, in which case that would be a valid answer)</p>
</blockquote>
<p>For my own entertainment, I was wondering how to achieve the following:</p>
<pre><code>functionA = make_fun(['paramA', 'paramB'])
functionB = make_fun(['arg1', 'arg2', 'arg3'])
</code></pre>
<p>equivalent to</p>
<pre><code>def functionA(paramA, paramB):
    print(paramA)
    print(paramB)

def functionB(arg1, arg2, arg3):
    print(arg1)
    print(arg2)
    print(arg3) 
</code></pre>
<p>This means the following behaviour is required:</p>
<pre><code>functionA(3, paramB=1)       # Works
functionA(3, 2, 1)           # Fails
functionB(0)                 # Fails
</code></pre>
<p>The focus of the question is on the variable argspec - I comfortable creating the function body using the usual decorator techniques.</p>
<p>For those that are interested, I was playing around with trying to programmatically create classes like the following. Again the difficulty is in generating the <code>__init__</code> method with programmatic parameters - the rest of the class appears straightforward using a decorator or maybe a metaclass.</p>
<pre><code>class MyClass:
    def __init__(self, paramA=None, paramB=None):
        self._attr = ['paramA', 'paramB']
        for a in self._attr:
            self.__setattr__(a, None)

    def __str__(self):
        return str({k:v for (k,v) in self.__dict__.items() if k in self._attributes})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> to construct the function object from a string containing Python code:</p>
<pre><code>def make_fun(parameters):
    exec("def f_make_fun({}): pass".format(', '.join(parameters)))
    return locals()['f_make_fun']
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; f = make_fun(['a', 'b'])
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; print(inspect.signature(f).parameters)
OrderedDict([('a', &lt;Parameter at 0x1024297e0 'a'&gt;), ('b', &lt;Parameter at 0x102429948 'b'&gt;)])
</code></pre>
<p>If you want more functionality (e.g., default argument values), it's a matter of adapting the string that contains the code and having it represent the desired function signature.</p>
<p>Disclaimer: as pointed out below it's important that you verify the contents of <code>parameters</code> and that the resulting Python code string is safe to pass to <code>exec</code>. You should construct <code>parameters</code> yourself or put restrictions in place to prevent the user from constructing a malicious value for <code>parameters</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the possible solutions using a class:</p>
<pre><code>def make_fun(args_list):
    args_list = args_list[:]

    class MyFunc(object):
        def __call__(self, *args, **kwargs):
            if len(args) &gt; len(args_list):
                raise ValueError('Too many arguments passed.')

            # At this point all positional arguments are fine.
            for arg in args_list[len(args):]:
                if arg not in kwargs:
                    raise ValueError('Missing value for argument {}.'.format(arg))

            # At this point, all arguments have been passed either as
            # positional or keyword.
            if len(args_list) - len(args) != len(kwargs):
                raise ValueError('Too many arguments passed.')

            for arg in args:
                print(arg)

            for arg in args_list[len(args):]:
                print(kwargs[arg])

    return MyFunc()

functionA = make_fun(['paramA', 'paramB'])
functionB = make_fun(['arg1', 'arg2', 'arg3'])

functionA(3, paramB=1)       # Works
try:
    functionA(3, 2, 1)           # Fails
except ValueError as e:
    print(e)

try:
    functionB(0)                 # Fails
except ValueError as e:
    print(e)

try:
    functionB(arg1=1, arg2=2, arg3=3, paramC=1)                 # Fails
except ValueError as e:
    print(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another way to do it using <code>functools.wrap</code>, which preserves signature and docstring, at least in python 3.  The trick is to create the signature and documentation in dummy functions which never get called.  Here are a couple of examples.</p>
<h1>Basic example</h1>
<pre><code>import functools

def wrapper(f):
    @functools.wraps(f)
    def template(common_exposed_arg, *other_args, common_exposed_kwarg=None, **other_kwargs):
        print("\ninside template.")
        print("common_exposed_arg: ", common_exposed_arg, ", common_exposed_kwarg: ", common_exposed_kwarg)
        print("other_args: ", other_args, ",  other_kwargs: ", other_kwargs)
    return template

@wrapper
def exposed_func_1(common_exposed_arg, other_exposed_arg, common_exposed_kwarg=None):
    """exposed_func_1 docstring: this dummy function exposes the right signature"""
    print("this won't get printed")

@wrapper
def exposed_func_2(common_exposed_arg, common_exposed_kwarg=None, other_exposed_kwarg=None):
    """exposed_func_2 docstring"""
    pass

exposed_func_1(10, -1, common_exposed_kwarg='one')
exposed_func_2(20, common_exposed_kwarg='two', other_exposed_kwarg='done')
print("\n" + exposed_func_1.__name__)
print(exposed_func_1.__doc__)
</code></pre>
<p>And the result is:</p>
<pre><code>&gt;&gt; inside template.
&gt;&gt; common_exposed_arg:  10 , common_exposed_kwarg:  one
&gt;&gt; other_args:  (-1,) ,  other_kwargs:  {}
&gt;&gt;  
&gt;&gt; inside template.
&gt;&gt; common_exposed_arg:  20 , common_exposed_kwarg:  two
&gt;&gt; other_args:  () ,  other_kwargs:  {'other_exposed_kwarg': 'done'}
&gt;&gt;  
&gt;&gt; exposed_func_1
&gt;&gt; exposed_func_1 docstring: this dummy function exposes the right signature
</code></pre>
<p>Calling <code>inspect.signature(exposed_func_1).parameters</code> returns the desired signature.  Using <code>inspect.getfullargspec(exposed_func_1)</code>, however, still returns the signature of <code>template</code>.  At least if you put any arguments common to all functions you want to make in the definition of <code>template</code>, those will appear.</p>
<p>If this is a bad idea for some reason, please let me know!</p>
<h1>More complicated example</h1>
<p>And you can get much more complicated than this, by layering in more wrappers and defining more distinct behaviors in an inner function:</p>
<pre><code>import functools

def wrapper(inner_func, outer_arg, outer_kwarg=None):
    def wrapped_func(f):
        @functools.wraps(f)
        def template(common_exposed_arg, *other_args, common_exposed_kwarg=None, **other_kwargs):
            print("\nstart of template.")
            print("outer_arg: ", outer_arg, " outer_kwarg: ", outer_kwarg)
            inner_arg = outer_arg * 10 + common_exposed_arg
            inner_func(inner_arg, *other_args, common_exposed_kwarg=common_exposed_kwarg, **other_kwargs)
            print("template done")
        return template
    return wrapped_func

# Build two examples.
def inner_fcn_1(hidden_arg, exposed_arg, common_exposed_kwarg=None):
    print("inner_fcn, hidden_arg: ", hidden_arg, ", exposed_arg: ", exposed_arg, ", common_exposed_kwarg: ", common_exposed_kwarg)

def inner_fcn_2(hidden_arg, common_exposed_kwarg=None, other_exposed_kwarg=None):
    print("inner_fcn_2, hidden_arg: ", hidden_arg, ", common_exposed_kwarg: ", common_exposed_kwarg, ", other_exposed_kwarg: ", other_exposed_kwarg)

@wrapper(inner_fcn_1, 1)
def exposed_function_1(common_exposed_arg, other_exposed_arg, common_exposed_kwarg=None):
    """exposed_function_1 docstring: this dummy function exposes the right signature """
    print("this won't get printed")

@wrapper(inner_fcn_2, 2, outer_kwarg="outer")
def exposed_function_2(common_exposed_arg, common_exposed_kwarg=None, other_exposed_kwarg=None):
    """ exposed_2 doc """
    pass
</code></pre>
<p>It's a bit verbose, but the point is that there is a lot of flexibility in where the dynamic inputs from you (the programmer) come in when using this to create functions, and so with where the exposed inputs (from user of the function) get used.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/919680/python-can-a-variable-number-of-arguments-be-passed-to-a-function">Python: Can a variable number of arguments be passed to a function?</a> or <a href="http://stackoverflow.com/questions/17075603/python-unpack-argument-list-for-format-string">Python Unpack Argument List for Format String</a></span>
<span class="comment-copy">I'm not asking to pass a variable number of args. I want to programmatically create a function spec of any form. Decorators and metaclasses can be used to programmatically create functions and classes - but every example I've come across has the function specification hard coded.</span>
<span class="comment-copy">Nice, just keep in mind not to use it with user input, otherwise one could use it like this: <code>make_fun(['):\n    import sys\n    sys.exit()\n    if (True'])()</code> and make your code blow up :P</span>
<span class="comment-copy">@kroolik: yes, that's a good point. Added a disclaimer to be sure. It's indeed important to make sure the constructed code is safe for execution.</span>
<span class="comment-copy">Accepted since this is the simplest solution - and the only sure way to get identical behaviour to defining the function manually.</span>
<span class="comment-copy">I like this as a general approach for processing *arg and **kwarg but IMO overcomplicates the use-case I am looking for. Although... constructing and executing a string does seem a little clunky!</span>
