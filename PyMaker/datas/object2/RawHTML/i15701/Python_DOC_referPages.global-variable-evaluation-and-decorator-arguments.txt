<div class="post-text" itemprop="text">
<p>I'm coding with unittest and i have question.
I want to skip test case depend on global variable.</p>
<pre><code>import unittest

_SKIP_TEST = False
all_suites = unittest.TestSuite()

class Test1(unittest.TestCase):
    @unittest.skipIf(_SKIP_TEST, 'Test should be run')
    def runTest(self):
        global _SKIP_TEST
        _SKIP_TEST = True
        print('Test1 executed')
all_suites.addTest(Test1())

class Test2(unittest.TestCase):
    @unittest.skipIf(_SKIP_TEST, 'Test should skipped')
    def runTest(self):
        print('Test2 executed')
all_suites.addTest(Test2())

if __name__ == '__main__':
    unittest.TextTestRunner(verbosity=2).run(all_suites
</code></pre>
<p>I thought test2 would be skipped after execution test1 (global variable _SKIP_TEST set to True), but both test was executed.</p>
<pre><code>$ python test.py                                                                        
runTest (__main__.Test1) ... Test1 executed
ok
runTest (__main__.Test2) ... Test2 executed
ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</code></pre>
<p>It maybe come from variable scope or evaluation timing issue, or something i dont know....
How can i make this code work as i expected?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The decorator is applied <em>at module import time</em>; by the time you set <code>_SKIP_TEST</code> to <code>True</code> that decorator has long since been applied.</p>
<p>You could call the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.skipTest" rel="nofollow"><code>TestCase.skipTest()</code> method</a> in the test instead:</p>
<pre><code>class Test1(unittest.TestCase):
    def runTest(self):
        if _SKIP_TEST:
            self.skipTest(_SKIP_TEST, 'Test should be run')

        global _SKIP_TEST
        _SKIP_TEST = True
        print('Test1 executed')

class Test2(unittest.TestCase):
    def runTest(self):
        if _SKIP_TEST:
            self.skipTest(_SKIP_TEST, 'Test should be skipped')
        print('Test2 executed')
</code></pre>
<p>or write your own decorator that uses that raises the <a href="https://docs.python.org/3/library/unittest.html#unittest.SkipTest" rel="nofollow"><code>unittest.SkipTest()</code> exception</a> based on a <em>callable</em>:</p>
<pre><code>from functools import wraps
from unittest import SkipTest

def dynamicSkipIf(callable, reason):
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kw):
            if callable():
                raise SkipTest(reason)
            return f(*args, **kw)
        return wrapper
    return decorator
</code></pre>
<p>then use that as:</p>
<pre><code>class Test1(unittest.TestCase):
    @dynamicSkipIf(lambda: _SKIP_TEST, 'Test should be run')
    def runTest(self):
        global _SKIP_TEST
        _SKIP_TEST = True
        print('Test1 executed')
all_suites.addTest(Test1())

class Test2(unittest.TestCase):
    @dynamicSkipIf(lambda: _SKIP_TEST, 'Test should skipped')
    def runTest(self):
        print('Test2 executed')
</code></pre>
<p>Not <code>_SKIP_TEST</code> is tested <em>when the test is executed</em> rather than at module import time.</p>
</div>
