<div class="post-text" itemprop="text">
<p>Is it possible to pass an OrderedDict instance to a function which uses the <code>**kwargs</code> syntax and retain the ordering?</p>
<p>What I'd like to do is :</p>
<pre><code>def I_crave_order(**kwargs):
    for k, v in kwargs.items():
        print k, v

example = OrderedDict([('first', 1), ('second', 2), ('third', -1)])

I_crave_order(**example)
&gt;&gt; first 1
&gt;&gt; second 2
&gt;&gt; third -1
</code></pre>
<p>However the actual result is:</p>
<pre><code>&gt;&gt; second 2
&gt;&gt; third -1
&gt;&gt; first 1
</code></pre>
<p>ie, typical random dict ordering.</p>
<p>I have other uses where setting the order explicitly is good, so I want to keep <code>**kwargs</code> and not just pass the OrderedDict as a regular argument</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.6, <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep468" rel="noreferrer">the keyword argument order is preserved</a>. Before 3.6, it is not possible since the <code>OrderedDict</code> gets turned into a <code>dict</code>.</p>
<hr/>
<p>The first thing to realize is that the value you pass in <code>**example</code> does not automatically become the value in <code>**kwargs</code>. Consider this case, where <code>kwargs</code> will only have part of <code>example</code>:</p>
<pre><code>def f(a, **kwargs):
    pass
example = {'a': 1, 'b': 2}
f(**example)
</code></pre>
<p>Or this case, where it will have more values than those in example:</p>
<pre><code>example = {'b': 2}
f(a=1, c=3, **example)
</code></pre>
<p>Or even no overlap at all:</p>
<pre><code>example = {'a': 1}
f(b=2, **example)
</code></pre>
<hr/>
<p>So, what you're asking for doesn't really make sense.</p>
<p>Still, it might be nice if there were some way to specify that you want an ordered <code>**kwargs</code>, no matter <em>where</em> the keywords came from—explicit keyword args in the order they appear, followed by all of the items of <code>**example</code> in the order they appear in <code>example</code> (which could be arbitrary if <code>example</code> were a <code>dict</code>, but could also be meaningful if it were an <code>OrderedDict</code>).</p>
<p>Defining all the fiddly details, and keeping the performance acceptable, turns out to be harder than it sounds. See <a href="http://legacy.python.org/dev/peps/pep-0468/" rel="noreferrer">PEP 468</a>, and the linked threads, for some discussion on the idea. It seems to have stalled this time around, but if someone picks it up and champions it (and writes a reference implementation for people to play with—which depends on an <code>OrderedDict</code> accessible from the C API, but that will hopefully be there in 3.5+), I suspect it would eventually get into the language.</p>
<hr/>
<p>By the way, note that if this <em>were</em> possible, it would almost certainly be used in the constructor for <code>OrderedDict</code> itself. But if you try that, all you're doing is freezing some arbitrary order as the permanent order:</p>
<pre><code>&gt;&gt;&gt; d = OrderedDict(a=1, b=2, c=3)
OrderedDict([('a', 1), ('c', 3), ('b', 2)])
</code></pre>
<hr/>
<p>Meanwhile, what options do you have?</p>
<p>Well, the obvious option is just to pass <code>example</code> as a normal argument instead of unpacking it:</p>
<pre><code>def f(example):
    pass
example = OrderedDict([('a', 1), ('b', 2)])
f(example)
</code></pre>
<p>Or, of course, you can use <code>*args</code> and pass the items as tuples, but that's generally uglier.</p>
<p>There might be some other workarounds in the threads linked from the PEP, but really, none of them are going to be better than this. (Except… IIRC, Li Haoyi came up with a solution based on his <a href="https://github.com/lihaoyi/macropy" rel="noreferrer">MacroPy</a> to pass order-retaining keyword arguments, but I don't remember the details. MacroPy solutions in general are awesome if you're willing to use MacroPy and write code that doesn't quite read like Python, but that isn't always appropriate…)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="noreferrer">This is now the default in python 3.6</a>.</p>
<pre><code>Python 3.6.0a4+ (default:d43f819caea7, Sep  8 2016, 13:05:34)
&gt;&gt;&gt; def func(**kw): print(kw.keys())
...
&gt;&gt;&gt; func(a=1, b=2, c=3, d=4, e=5)
dict_keys(['a', 'b', 'c', 'd', 'e'])   # expected order
</code></pre>
<p>It's not possible to do it before as noted by the other answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>When Python encounters the <code>**kwargs</code> construct in a signature, it expects <code>kwargs</code> to be a "mapping", which means two things: (1) to be able to call <code>kwargs.keys()</code> to obtain an iterable of the keys contained by the mapping, and (2) that <code>kwargs.__getitem__(key)</code> can be called for each key in the iterable returned by <code>keys()</code> and that the resulting value is the desired one to be associated for that key.</p>
<p>Internally, Python will then "transform" whatever the mapping is into a dictionary, sort of like this:</p>
<pre><code>**kwargs -&gt; {key:kwargs[key] for key in kwargs.keys()}
</code></pre>
<p>This looks a little silly if you think that <code>kwargs</code> is already a <code>dict</code> -- and it would be, since there is no reason to construct a totally equivalent <code>dict</code> from the one that is passed in. </p>
<p>But when <code>kwargs</code> is not necessarily a <code>dict</code>, then it matters to bring its contents down into a suitable default data structure so that the code which carries out the argument unpacking always knows what it's working with.</p>
<p>So, you <em>can</em> mess with the way a certain data type gets unpackaged, but because of the conversion to <code>dict</code> for the sake of a consistent arg-unpacking-protocol, it just happens that placing guarantees on the order of argument unpacking is not possible (since <code>dict</code> doesn't keep track of the order in which elements are added). If the language of Python brought <code>**kwargs</code> down into an <code>OrderedDict</code> instead of a <code>dict</code> (meaning that the keys' order as keyword args would be the order in which they are traversed), then by passing either an <code>OrderedDict</code> or some other data structure where <code>keys()</code> respects some kind of ordering, you <em>could</em> expect a certain ordering on the arguments. It's just a quirk of the implementation that <code>dict</code> is chosen as the standard, and not some other type of mapping.</p>
<p>Here's a dumb example of a class that can "be unpacked" but which always treats all unpacked values as 42 (even though they aren't really):</p>
<pre><code>class MyOrderedDict(object):
    def __init__(self, odict):
        self._odict = odict

    def __repr__(self):
        return self._odict.__repr__()

    def __getitem__(self, item):
        return 42

    def __setitem__(self, item, value):
        self._odict[item] = value

    def keys(self):
        return self._odict.keys()
</code></pre>
<p>Then define a function to print the unpacked contents:</p>
<pre><code>def foo(**kwargs):
    for k, v in kwargs.iteritems():
        print k, v
</code></pre>
<p>and make a value and try it out:</p>
<pre><code>In [257]: import collections; od = collections.OrderedDict()

In [258]: od['a'] = 1; od['b'] = 2; od['c'] = 3;

In [259]: md = MyOrderedDict(od)

In [260]: print md
OrderedDict([('a', 1), ('b', 2), ('c', 3)])

In [261]: md.keys()
Out[261]: ['a', 'b', 'c']

In [262]: foo(**md)
a 42
c 42
b 42
</code></pre>
<p>This customized delivery of key-value pairs (here, dumbly always returning 42) is the extent of your ability to tinker with how <code>**kwargs</code> works in Python.</p>
<p>There is slightly more flexibility for tinkering with how <code>*args</code> gets unpackaged. For more on that see this question: &lt; <a href="https://stackoverflow.com/questions/19526300/does-argument-unpacking-use-iteration-or-item-getting">Does argument unpacking use iteration or item-getting?</a> &gt;.</p>
</div>
<span class="comment-copy">Thanks for the detailed answerws.  What I ended up doing was to allow an optional first argument (an ordered dict) which would be used in preference to the **kwargs if provided. Great info, though</span>
<span class="comment-copy"><b>See also:</b> <a href="https://duckduckgo.com/?q=pep468" rel="nofollow noreferrer">duckduckgo.com/?q=pep468</a></span>
<span class="comment-copy">Could you update this answer for python 3.6?</span>
<span class="comment-copy">+1 for the details, and my new favorite go-to code review response <code>So, what you're asking for doesn't really make sense.</code>. Thanks for that.</span>
<span class="comment-copy">Thanks for the good links. The pep is an interesting one, because it says **kwargs is guaranteed to be a insert-order preserving mapping, but the very next pep says that the new implementation of dict is order preserving, but this should be considered an implementation feature. On 3.7, when I inspect the type of the **kwargs value, it's a dict.  So I guess the current implementation of the kwargs pep is lazily depending on the current dict implementation to be order preserving.</span>
