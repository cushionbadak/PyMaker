<div class="post-text" itemprop="text">
<p>I want to be able to call <code>foo.py -R a b -R c d -R e f</code> and get something like <code>[('a', 'b'), ('c', 'd'), ('e', 'f')]</code> in a variable.  I can instead use <code>foo.py -R a=b -R c=d -R e=f</code> and do the splitting manually, but I'd rather not do this, because I'm building a wrapper around another program and would like to mimic it's command line option input format.</p>
<p>I have tried the following:</p>
<pre><code>#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser(description='Foo')
parser.add_argument('-R', metavar=('A', 'B'), dest='libnames', type=str, default=('.', 'Top'), nargs=2)

if __name__ == '__main__':
    args = parser.parse_args()
    print(args.libnames)
</code></pre>
<p>but then I get <code>['e', 'f']</code> when I call it as <code>foo.py -R a b -R c d -R e f</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a custom <code>argparse.Action</code> class.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#argparse.Action" rel="nofollow">https://docs.python.org/3/library/argparse.html#argparse.Action</a></p>
<pre><code>import argparse

class Pairs(argparse.Action):
    def __call__(self, parser, namespace, values, opts, **kwargs):
        lst = getattr(namespace, self.dest)
        if lst is None:
            lst = []
            setattr(namespace, self.dest, lst)
        lst.append(tuple(values))

parser = argparse.ArgumentParser()   
parser.add_argument('-R', nargs='+', dest='libnames', action=Pairs)
print parser.parse_args("-R a b -R c d -R e f".split())
</code></pre>
<p>output:</p>
<pre><code>Namespace(libnames=[('a', 'b'), ('c', 'd'), ('e', 'f')])
</code></pre>
</div>
<span class="comment-copy">Using <code>action='append' should produce </code>[['a', 'b'], ['c', 'd'], ['e', 'f']]`.  That's close, a list of lists, rather than a list of tuples.</span>
<span class="comment-copy">I believe you mean <code>class Pairs</code>, instead of <code>def Pairs</code>, since only classes can subclass another class. Otherwise, +1 to this solution. However, please completely adapt this example to the OP's scenario, for completeness sake.</span>
<span class="comment-copy">@VooDooNOFX Good catch, and thanks for the push.</span>
