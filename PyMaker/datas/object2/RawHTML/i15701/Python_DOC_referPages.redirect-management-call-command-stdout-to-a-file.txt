<div class="post-text" itemprop="text">
<p>I've been trying to redirect the standard output of a custom django command using this piece of code:</p>
<pre><code>from django.core.management.base import BaseCommand
from django.core import management


class Command(BaseCommand):

    def handle(self, *args, **options):
        f = open('/tmp/output', 'r+')
        management.call_command('basequery', 'list', 'log', stdout=f)
        f.close()
</code></pre>
<p>However, when I call this from manage.py the standard output appears on the console and the /tmp/output file is created but empty. </p>
<p>Here's the django <a href="https://docs.djangoproject.com/en/1.7/ref/django-admin/#running-management-commands-from-your-code" rel="noreferrer">documentation</a> of what I'm trying to do</p>
</div>
<div class="post-text" itemprop="text">
<p>Your command is probably just using <code>print</code> directly.  To be able to capture or redirect prints in a management command, you'll want to use the <code>self.stdout</code> handle of the command instance:  </p>
<pre><code>from __future__ import print_function

class Command(BaseCommand):

    def handle(self, *args, **options):
        # incorrect way to print in a management command:
        print('This line will go to the terminal')

        # correct ways to print in a management command:
        print('This line will go into the StringIO', file=self.stdout)
        self.stdout.write('This will also go into the StringIO')
</code></pre>
<p>If you absolutely can not change the buggy print statements of the command (it's the code in <code>'basequery'</code> command at fault in your example), then you can use a context manager to <em>temporarily</em> redirect stdout in order to capture that output.  It's important to restore the old stdout after redirection.  See <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout" rel="nofollow noreferrer"><code>contextlib.redirect_stdout</code></a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you have control over the code of the management command, then you should follow the answer by @wim. This answer assumes you can't/won't change the command itself.</p>
<p>The method by @Igor is the best way when available, but some commands ignore <code>stdout</code> argument. </p>
<p>@Phob1a has a solution that is basically okay but has the problem of closing <code>stdout</code> (so future output to it doesn't work). With some changes:</p>
<pre><code>from django.core.management import call_command
import sys

stdout_backup, sys.stdout = sys.stdout, open('output_file', 'w+')
call_command('your_command')
sys.stdout = stdout_backup
</code></pre>
<p>Note that if you want to just throw away output, you should replace the first command:</p>
<pre><code>from os import devnull
stdout_backup, sys.stdout = sys.stdout, open(devnull, 'a')
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am using this to redirect output to file</p>
<pre><code>    f = open('/path/to/file', 'w')
    buf = StringIO()
    call_command('compile_game_data', 'kingdom', indent=4, stdout=buf)
    buf.seek(0)
    f.write(buf.read())
    f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried Igor's approximation using the following code:</p>
<pre><code>class Command(BaseCommand):

    def handle(self, *args, **options):
        f = open('/tmp/output', 'w+')
        out = StringIO()
        management.call_command('basequery', 'list', 'log', stdout=out)
        out.seek(0)
        f.write(out.read())
        f.close()
</code></pre>
<p>I got the same result tough: empty file and stdout appearing in the console. Maybe that's because I'm calling django commands from a django command?</p>
<p>Anyway, I managed to solve the problem this way:</p>
<pre><code>    sys.stdout = open('/tmp/output', 'w+')
    management.call_command('basequery', 'list', 'log')
    sys.stdout.close()
</code></pre>
<p>I know it is an ugly solution but it's the only way I made it work.</p>
</div>
<span class="comment-copy">I'm guessing maybe because <code>open('/tmp/output', 'r+')</code> opens the file for <i>reading</i> only, but you need to be able to write to it</span>
<span class="comment-copy">@Anentropic 'r+' means read and write. I already tried with 'w' and I get the same result</span>
<span class="comment-copy">oops, you are correct! :)</span>
<span class="comment-copy">If you're only using this new management command to call another that writes it's output to a file, you could just pipe the results to a file on the command line.</span>
<span class="comment-copy">@schillingt I'm using this new management command to trigger multiple django commands and capture their stdout and stderr to calculate metrics.</span>
<span class="comment-copy">I've tried your method but I get the same result. The command line keeps printing the stdout and the StringIO .read() method after doing .seek(0) is returning nothing. The same result as passing stdout=f.</span>
<span class="comment-copy">Can you provide actual code that you use with StringIO?</span>
<span class="comment-copy">sure. I posted it as an answer below.</span>
<span class="comment-copy">This doesn't work if the command defines its own stdout parameter.</span>
<span class="comment-copy">This breaks stdout, if you print anything after this code you get <code>ValueError: I/O operation on closed file.</code></span>
<span class="comment-copy">couldn't it be fixed by saving <code>sys.stdout</code> to a temporary variable and restoring it after?</span>
