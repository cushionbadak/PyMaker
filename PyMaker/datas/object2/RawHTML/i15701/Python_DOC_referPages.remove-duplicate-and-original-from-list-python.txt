<div class="post-text" itemprop="text">
<p>given a list of string (i am not aware of list), i want to remove the duplicate and original word.</p>
<p>for example:</p>
<pre><code>lst = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
</code></pre>
<p>the output should should remove the duplicates 
so something like this <code>['a', 'b', 'd']</code></p>
<p>I do not need to preserve the order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter()</code> object</a>, then keep only those values with a count of 1:</p>
<pre><code>from collections import counter

[k for k, v in Counter(lst).items() if v == 1]
</code></pre>
<p>This is a O(N) algorithm; you just need to loop through the list of N items once, then a second loop over fewer items (&lt; N) to extract those values that appear just once.</p>
<p>If order is important and you are using Python &lt; 3.6, separate the steps:</p>
<pre><code>counts = Counter(lst)
[k for k in lst if counts[k] == 1]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; lst = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
&gt;&gt;&gt; [k for k, v in Counter(lst).items() if v == 1]
['a', 'b', 'd']
&gt;&gt;&gt; counts = Counter(lst)
&gt;&gt;&gt; [k for k in lst if counts[k] == 1]
['a', 'b', 'd']
</code></pre>
<p>That the order is the same for both approaches is a coincidence; for Python versions before Python 3.6, other inputs may result in a different order.</p>
<p>In Python 3.6 the implementation for dictionaries changed and input order is now retained. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>t = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
print [a for a in t if t.count(a) == 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lst = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
from collections import Counter
c = Counter(lst)
print([k for k,v in c.items() if v == 1 ])
</code></pre>
<p><a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">collections.Counter</a> will count the occurrences of each element, we keep the elements whose <code>count/value is == 1</code> with <code>if v == 1</code> </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>@Padraic:</strong></p>
<p>If your list is:</p>
<pre><code>lst = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
</code></pre>
<p>then</p>
<pre><code>list(set(lst))
</code></pre>
<p>would return the following:</p>
<pre><code>['a', 'c', 'b', 'e', 'd']
</code></pre>
<p>which is not the thing adhankar wants..</p>
<p><strong>Filtering all duplicates completely</strong> can be easily done with a list comprehension:</p>
<pre><code>[item for item in lst if lst.count(item) == 1]
</code></pre>
<p>The output of this would be:</p>
<pre><code>['a', 'b', 'd']
</code></pre>
<p><em>item</em> stands for every item in the list <em>lst</em>, but it is only appended to the new list if <em>lst.count(item)</em> equals 1, which ensures, that the item only exists once in the original list <em>lst</em>.</p>
<p>Look up List Comprehension for more information: <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">Python list comprehension documentation</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a secondary empty list and only append items that aren't already in it.</p>
<pre><code>oldList = ['a', 'b', 'c', 'c', 'c', 'd', 'e', 'e']
newList = []
for item in oldList:
    if item not in newList:
        newList.append(item)
print newList
</code></pre>
<p>I don't have an interpreter with me, but the logic seems sound.</p>
</div>
<span class="comment-copy">your algorithm is quadratic</span>
<span class="comment-copy">really? python list comprehensions with an if have quadratic time complexity? could you explain this? what's the time complexity of your algorithm?</span>
<span class="comment-copy">what do you think lst.count(item) is doing?</span>
<span class="comment-copy">oh yeah, now I get your point...sry, it's too late for me^^</span>
<span class="comment-copy">whats the complexity of your solution?</span>
<span class="comment-copy">This also gives me ['a', 'b', 'c', 'd', 'e'], i need the output to be ['a', 'b', 'd']</span>
