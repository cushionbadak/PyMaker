<div class="post-text" itemprop="text">
<p>In the Python <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future" rel="noreferrer">docs</a> I see:</p>
<blockquote>
<p><code>concurrent.futures.Future</code>... ...should not be created directly
  except for testing.</p>
</blockquote>
<p>And I want to use it as a promise in my code and I'm very surprised that it is not recommended to use it like this.</p>
<p>My use case:<br/>
I have a <em>single</em> thread that reads data packets coming from socket, and I have <em>many</em> callbacks that are called depending on some information contained in packets. Packets are responses to consumers requests, and all consumers use single connection. Each consumer receives a promise and adds some handlers to it, that are invoked when response arrives.</p>
<p>So I cant use <code>Executor</code> subclass here, because I have only one thread, but I need to create many Futures (promises).</p>
<p>Promise is pretty widespread programming technique and, I thought that <code>Future</code> is Python's promise implementation. But if it is not recommended to use it like promise, what pythonistas are commonly use for this purpose?</p>
<h2>Note</h2>
<p>I use  Python 2.7 <a href="https://pythonhosted.org/futures/" rel="noreferrer">backport of <code>concurrent.futures</code> to 2.7</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It's perfectly <em>fine</em> to use <code>Future</code> in order to wrap non-promise APIs into promises.</p>
<p>The reason it <em>generally</em> should not be created is because most times people create futures directly it's because they're <a href="https://stackoverflow.com/questions/23803743/what-is-the-deferred-antipattern-and-how-do-i-avoid-it">doing the deferred anti pattern</a> and wrapping an executor created future in another future.</p>
<p>It's worth mentioning that this future implementation is <em>very weak</em>, it's akin to Java's old futures, the cool stuff promises give you like chaining is simply missing. It's worth mentioning that languages like JavaScript <a href="https://stackoverflow.com/questions/23375321/is-twisteds-deferred-same-as-promise-in-javascript">got their promises</a> from Python's Twisted, which has a better implementation, even if it's intertwined with other things.</p>
</div>
<span class="comment-copy">The Executor class does not even implement creating futures - subclasses do. I just used the Future class. There was no problem with this. Maybe the author knows why this is written there.</span>
<span class="comment-copy">@User I meant subclass. I think I will just use them too. p.s. Cool nickname.</span>
<span class="comment-copy">What can you say about the docs? <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future" rel="nofollow noreferrer"><i>"should not be created directly except for testing"</i></a> or <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.set_result" rel="nofollow noreferrer">_"should only be used by Executor implementations and unit tests"</a> - these are very precise statements, they are explicitly say, where <code>Future</code> should created directly and prohibit everything else.</span>
<span class="comment-copy">Re: "cool stuff promises give you like chaining is simply missing" - that annoyed me greatly, so put together <code>concurrent.futures.Future</code> extended to support Promises/A+ <code>.then(success, error)</code> API (<a href="https://github.com/dvdotsenko/python-future-then" rel="nofollow noreferrer">github.com/dvdotsenko/python-future-then</a>)</span>
<span class="comment-copy">"Python's Twisted, which has a better implementation": you mean Twisted implementation is better compared to <code>concurrent.futures</code>, not compared to to JavaScript, right? I was under the impression that a Promises/A+ compliant implementation is superior to Twisted - and IIUC by now all popular JavaScript implementations include Promise/A+ compliance plus some helpful extras.</span>
<span class="comment-copy">@max you understand correctly - although modern Python has better futures now anyway.</span>
