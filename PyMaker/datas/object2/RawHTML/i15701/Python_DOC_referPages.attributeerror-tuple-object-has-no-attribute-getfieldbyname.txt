<div class="post-text" itemprop="text">
<p>Another Python newbie question, but I can't find an answer by Googling.  What am I doing wrong?</p>
<pre><code>  for dbTrack in db.execute('SELECT * FROM tracks'):
     genre  = dbTrack.getFieldByName(genre)
     artist = dbTrack.getFieldByName(artist)
     album  = dbTrack.getFieldByName(album)
     title  = dbTrack.getFieldByName(title)

Traceback (most recent call last):
  File "G:/personal/Python/Mp3Gen/test.py", line 207, in &lt;module&gt;
    genre  = dbTrack.getFieldByName(genre)
AttributeError: 'tuple' object has no attribute 'getFieldByName'
</code></pre>
<hr/>
<p>[Update]  <code>db</code> is from <code>db = sqlite3.connect(SQLITE_DATABSE_NAME)</code></p>
<p>How do I go about getting those fields?  <code>dbTrack = {tuple}(None, 'The Verve Pipe', 'Villains', 'The Freshmen')</code>  Do I just use <code>dbTracks[0]</code>, etc?  </p>
<p>I agree with @ abarnert that that is not good practice. I would not do it in any other programming language, but being so new to Python, I can't seem to find how to <code>getFieldByName</code></p>
</div>
<div class="post-text" itemprop="text">
<p>By default, any Python database library that meets the <a href="https://www.python.org/dev/peps/pep-0249" rel="nofollow">DB-API 2.0</a> standard will give you some kind of sequence for each row, usually a tuple or list. (In <code>sqlite3</code>, it's a tuple.) Obviously you can't call methods like <code>getFieldByName</code> on a tuple or list.</p>
<p>Even though it isn't part of the standard, many libraries provide a way to specify a <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory" rel="nofollow"><code>row_factory</code></a>, and may provide built-in alternative row factories. For example, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Row" rel="nofollow"><code>sqlite3.Row</code></a> allows you to access it as if it were a tuple, or a dict (using the column names as keys).</p>
<p>So, most likely, you copied and pasted your code from some other program that uses custom a row type that has a <code>getFieldByName</code> method, but you didn't copy the code that sets that custom row type as the row factory.</p>
<hr/>
<p>As a side note, even if you fix this, this line isn't going to work:</p>
<pre><code> genre = dbTrack.getFieldByName(genre)
</code></pre>
<p>At this point, the variable <code>genre</code> either doesn't exist (in which case it'll raise an <code>UnboundLocalError</code> or <code>NameError</code>), or has some irrelevant value. You almost certainly wanted the literal string <code>'genre'</code>.</p>
<hr/>
<p>If you're using sqlite3, I think you'd be a lot better off using its built-in <code>Row</code> type than some custom type that's more verbose and not standardized, wherever it comes from. So:</p>
<pre><code>db.row_factory = sqlite3.Row

# ...

for dbTrack in db.execute('SELECT * FROM tracks'):
    genre  = dbTrack['genre']
    artist = dbTrack['artist']
    album  = dbTrack['album']
    title  = dbTrack['title']
</code></pre>
</div>
<span class="comment-copy"><code>dtTrack</code> is a tuple, not whatever you are thinking it is. Without knowing what exactly <code>db</code> is, it's hard to tell you any more than that, except that you probably want to put those field names in quotes (<code>"genre"</code>, <code>"artist"</code>, etc.).</span>
<span class="comment-copy">just log the content of <code>dbTrack</code>, you'll see what it looks like, and why it is not that object with that method you want to call</span>
<span class="comment-copy">Why did you think the SQL result rows would have a <code>getFieldByName()</code> method? You probably can just use <code>genre, artist, album, title = dbTrack</code> here.</span>
<span class="comment-copy">if you are doing this in the intepreter, run a <code>dir(dbTrack)</code> to list the methods that dbTrack has, you will notice <code>getFieldByName</code> is not one of them. Also you did not google this, i just googled it and about 37,200  results came up</span>
<span class="comment-copy">@MartijnPieters: That's relying on the order (and number) of columns returned by <code>*</code>, which is at best not robust, and in theory not even guaranteed to work in the first place (although in practice you'll get away with it with sqlite).</span>
