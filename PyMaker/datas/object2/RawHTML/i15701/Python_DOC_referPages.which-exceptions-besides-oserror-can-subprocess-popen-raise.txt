<div class="post-text" itemprop="text">
<p>In (this section)[<a href="https://docs.python.org/3/library/subprocess.html#exceptions]" rel="nofollow">https://docs.python.org/3/library/subprocess.html#exceptions]</a> about exceptions with subprocess.Popen the documentation says that "The most common exception raised is OSError".</p>
<p>Are there other, undocumented Exceptions that might by raised that are not of type OSError and are not due to invalid arguments?</p>
<p>I am asking this because I have the following code:</p>
<pre><code>try:
    obj = subprocess.Popen(*args)
    #....
except OSError as e:
    pass
</code></pre>
<p>and I want this to be 100% exception free. The system I am working on is Debian GNU/Linux 7.7 (wheezy).</p>
<p>I not only ask this for a safe way to write my program but also out of curiousity for the python <code>os.Popen</code> implementation. So please be a bit more specific than just saying to catch <code>Exception</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just catch <code>Exception</code>, if you want to be very sure you're catching everything.  That still won't catch things like <code>SystemExit</code>, but most of the time you don't want to catch those anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>this will covers most of it:</p>
<pre><code>try:
    obj = subprocess.Popen(*args)
    #....
except OSError as e:       # to catch OSError
    print e
    pass
except ValueError as e:    # to catch ValueError  
    print e
    pass
except:pass                # others
</code></pre>
</div>
<span class="comment-copy"><code>ValueError</code> is also raised if <code>Popen</code> is called with invalid argument</span>
<span class="comment-copy">If you were on windows you might run the risk of an <code>AssertionError</code> if you tried to set <code>pass_fds</code>.</span>
<span class="comment-copy">Hm, I'm still interested what other Error can be thrown when... kinda curious</span>
<span class="comment-copy">@WorldSEnder: That is an implementation detail.  Contractually, any exception may be raised at any time, unless the documentation promises otherwise.</span>
