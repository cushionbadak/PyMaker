<div class="post-text" itemprop="text">
<p>I would like to shuffle a relatively long array (length ~400). While I am not a cryptography expert, I understand that using a random number generator with a period of less than <code>400!</code> will limit the space of the possible permutations that can be generated.</p>
<p>I am trying to use Python's <code>random.SystemRandom</code> number generator class, which, in Windows, uses <code>CryptGenRandom</code> as its <code>RNG</code>.</p>
<p>Does anyone smarter than me know what the period of this number generator is? Will it be possible for this implementation to reach the entire space of possible permutations?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are almost correct: you need a generator not with a <em>period</em> of 400!, but with <em>an internal state</em> of more than log2(400!) bits (which will also have a period larger than 400!, but the latter condition is not sufficient). So you need at least 361 bytes of internal state. CryptGenRandom doesn't qualify, but it ought to be sufficient to generate 361 or more bytes with which to seed a better generator.</p>
<p>I think Marsaglia has versions of MWC with 1024 and 4096 bytes of state.</p>
</div>
<span class="comment-copy"><i>"I would like to shuffle a relatively long array"</i> Then why not just use <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a>? Also, a list of 400 elements is not very large at all in most programming contexts, especially relating to RNGs.</span>
<span class="comment-copy">See also: <a href="http://stackoverflow.com/questions/25616756">stackoverflow.com/questions/25616756</a></span>
<span class="comment-copy">You can use same sub arrays with different seeds. The Seeds you can generate in first stage with time or three id or some think else.</span>
<span class="comment-copy">Python's <code>random</code> module uses a Mersenne Twister generator routine with a state space of 19937 bits. This is seeded from the os <code>CryptGenRandom</code> entropy source on import of the module. So for less than 2080 elements this should be ok.</span>
<span class="comment-copy">I'm not fond of Mersenne twister, but it would work. You would still need to make sure you seed it with at least 361 bytes from CryptGenRandom.</span>
