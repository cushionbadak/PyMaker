<div class="post-text" itemprop="text">
<p>I currently have a method which needs to be optimized!
I'm still learning python so help would be much appreciated!</p>
<p>I'm trying to run the method below against a very large corpus and I need to optimize/reduce the run time for this method as it already takes up about 6 seconds to execute.</p>
<p><strong>Requirements:</strong></p>
<ol>
<li>Check the word only consist of alphabets, hyphen and apostrophe</li>
<li>First character of word must be alphabet</li>
<li>Last character of word must be alphabet or apostrophe only.</li>
<li>Use of re library (regex) strictly not allowed</li>
</ol>
<p><strong>Below is the code:</strong></p>
<pre><code>def delUnknownChar(w):
    wf = []
    for c in w:
        if (c == "'" or c == "-" or c.isalpha()):
            wf.append(c)

    w = "".join(wf)
    wf.clear()

    if (len(w) &gt; 1):
        while(not w[0].isalpha()):
            w = w[1:]

        while (w[-1] == "-"):
            w = w[:-1]

        return w
    else:
        return None

string1 = delUnknownChar("-'test'-")
print(string1)
</code></pre>
<p>Output will be <strong>test'</strong>
The code above will take about 5 seconds to run.</p>
<p>If I change lines 2-7 of the code to this line:</p>
<pre><code>w = "".join(c for c in w if c == "'" or c == "-" or c.isalpha())
</code></pre>
<p>The runtime somehow increases by 1 more second.</p>
<p>Does anyone here have a better idea or an improved optimized way to check for this at a much faster speed? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a>:</p>
<pre><code>from string import punctuation,digits

def delUnknownChar(s):
    trans = """!"#$%&amp;()*+,./:;&lt;=&gt;?@[\]^_`{|}~0123456789"""
    return s.translate(None,trans).lstrip("-'").rstrip("-")
</code></pre>
<p>Python 3:</p>
<pre><code>trans = """!"#$%&amp;()*+,./:;&lt;=&gt;?@[\]^_`{|}~0123456789"""
d = {k: "" for k in trans}
def delUnknownChar1(s):
    return s.translate(str.maketrans(d)).lstrip("-'").rstrip("-")
</code></pre>
<p>without translate:</p>
<pre><code>def delUnknownChar1(s):
    good = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-'")
    clean = ""
    for ele in s:
        if ele in good:
            clean += ele
    return clean.lstrip("-'").rstrip("-")
</code></pre>
<p><strong>static str.maketrans(x[, y[, z]])</strong></p>
<p><em>This static method returns a translation table usable for str.translate().
If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals.
If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.</em></p>
<pre><code>In [30]: timeit Filter(s)
100 loops, best of 3: 10.48 ms per loop

In [31]: timeit delUnknownChar(s) # yours
100 loops, best of 3: 8.41 ms per loop

In [32]: timeit delUnknownChar1(s) # mine
100 loops, best of 3: 2.46 ms per loop
In [25]: timeit delUnknownChar1(s)
100 loops, best of 3: 3.72 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use one of </p>
<pre><code>def Filter(In):
    # First alpha character
    for b in range(len(In)):
        if In[b].isalpha():
            break
    if b == len(In):
        return ""

    # Last alpha' character
    for e in range(len(In), 0, -1):
        if In[e - 1].isalpha() or In[e - 1] == "'":
            break

    # Middle alpha-' characters
    Out= [In[b]]  
    for i in range(b + 1, e):
      if In[i].isalpha() or In[i] == "-" or In[i] == "'":
        Out+= In[i]   

    return "".join(Out)
</code></pre>
<p>or </p>
<pre><code>def Filter(In):
    # First alpha character
    for b in range(len(In)):
        if In[b].isalpha():
            break
    if b == len(In):
        return ""

    # Last alpha' character
    for e in range(len(In), 0, -1):
        if In[e - 1].isalpha() or In[e - 1] == "'":
            break

    # Middle alpha-' characters
    Out= In[b]
    for i in range(b + 1, e):
      if In[i].isalpha() or In[i] == "-" or In[i] == "'":
        Out+= In[i] 

    return Out
</code></pre>
<p>Depending on your distribution of strings and Python version/platform, use the fastest.</p>
<p>UPDATE: this is a new version based on better understanding of the specs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a few standard libraries:</p>
<pre><code>import string

filter_set = set(string.ascii_letters + "-'")

def delUnknownChar(w):
    return ''.join(c for c in w if c in filter_set).lstrip("'-").rstrip("-")
</code></pre>
<p>Alternative method using <code>translate</code>:</p>
<pre><code>import string

keep = string.ascii_letters + "-'"
allchars = string.maketrans('', '')
delchars = ''.join([c for c in allchars if c not in keep])

def delUnknownChar(w):
    return w.translate(None, delchars).lstrip("'-").rstrip("-")
</code></pre>
<p>(based on <a href="http://code.activestate.com/recipes/59857-filter-a-string-and-only-keep-a-given-set-of-chara/" rel="nofollow">this solution</a>)</p>
</div>
<span class="comment-copy">This question appears to be off-topic because it may be a fit for codereview.stackexchange.com, but doesn't have a demonstrable error or problem to diagnose.</span>
<span class="comment-copy">I see ok! Sorry am new here!</span>
<span class="comment-copy">Is there a reason regex is not allowed, or is it just for a challenge?</span>
<span class="comment-copy">Your question is not consistent: you are describing criteria to "check" a word (usually meaning returning a Boolean decision), and programming a function that returns a string.</span>
<span class="comment-copy">Are you sure that your function needs to be optimized?  In my test, I found it takes a bit less than your reported 5s, namely 2.5s. I mean, 2.5s for 1,000,000 executions (that's <code>timeit</code> default). Now, it may be slower or faster than other solutions but it's fast --- to state that it's fast enough needs a knowledge of your program as a whole, but I'd be surprised if it isn't indeed fast enough.</span>
<span class="comment-copy">Not sure how this code works and doesn't return value as expected. only returned true or false.</span>
<span class="comment-copy">if the value is True then the string is in the correct format so just return the string</span>
<span class="comment-copy">@python1010101, are you cleaning the text or actually just checking for the requirements as listed in your question?</span>
<span class="comment-copy">I'm cleaning the text! sorry if it's not clear! I tried your edited method but it doesn't strip - in start nor end of text</span>
<span class="comment-copy">NameError: name 'punctuation' is not defined</span>
<span class="comment-copy">The second code works fastest! It ran under 3 seconds! However doesn't produce the output based on requirement.  s1="-test'-#--" . Output I got was test'--</span>
<span class="comment-copy">Thank you for the update! Achieved output as expected but during runtime it was still a little slow clocking at 7 secs and 6 secs respectively. Thanks for the update I will look into the code as well!</span>
<span class="comment-copy">How long are the strings used for the benchmarking (or the real case) ?</span>
<span class="comment-copy">wow! That is very little code! It works on a sample word for now! That's good! Let me try on the corpus and let you know the result!</span>
<span class="comment-copy">Code is short and easy to understand. But the runtime has increased from 6 seconds to 12 seconds using this short method :(</span>
<span class="comment-copy">@PadraicCunningham lstrip() filters the starting characters and rstrip() filters the ending characters.</span>
<span class="comment-copy">@python1010101 what happens if you replace lines 2-7 with just the join and not the <code>.lstrip("'-").rstrip("-")</code> ?  Also, remove the wf.clear() line, it's unnecessary.</span>
<span class="comment-copy">once again the runtime doubled from 6 seconds to 12 seconds to complete if I made the changes as mentioned :/</span>
