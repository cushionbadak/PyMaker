<div class="post-text" itemprop="text">
<p>Why does Python have the built-in function <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed</code></a>?</p>
<p>Why not just use <code>x[::-1]</code> instead of <code>reversed(x)</code>?</p>
<hr/>
<p><strong>Edit</strong>: <em>@TanveerAlam <a href="https://stackoverflow.com/a/26985860/2223706">pointed out</a> that</em> <code>reversed</code> <em>is not actually a function, but rather a class, despite being listed on the page <a href="https://docs.python.org/3.4/library/functions.html" rel="nofollow noreferrer">Built-in Functions</a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>reversed</code> returns a reverse iterator.</p>
<p><code>[::-1]</code> asks the object for a slice</p>
<p>Python objects try to return what you probably expect</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3][::-1]
[3, 2, 1]
&gt;&gt;&gt; "123"[::-1]
'321'
</code></pre>
<p>This is convenient - particularly for strings and tuples.</p>
<p>But remember the majority of code doesn't need to reverse strings.</p>
<p>The most important role of <code>reversed()</code> is <strong>making code easier to read and understand</strong>.</p>
<p>The fact that it returns an iterator without creating a new sequence is of secondary importance</p>
<p><a href="https://docs.python.org/2/whatsnew/2.4.html#pep-322-reverse-iteration" rel="nofollow">From the docs</a></p>
<blockquote>
<p>PEP 322: Reverse Iteration A new built-in function, reversed(seq)(),
  takes a sequence and returns an iterator that loops over the elements
  of the sequence in reverse order.</p>
</blockquote>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; for i in reversed(xrange(1,4)):
...    print i
...
3
2
1
</code></pre>
<blockquote>
<p>Compared to extended slicing, such as range(1,4)[::-1], reversed() is
  easier to read, runs faster, and uses substantially less memory.</p>
<p>Note that reversed() only accepts sequences, not arbitrary iterators.
  If you want to reverse an iterator, first convert it to a list with
  list().</p>
</blockquote>
<pre><code>&gt;&gt;&gt;
&gt;&gt;&gt; input = open('/etc/passwd', 'r')
&gt;&gt;&gt; for line in reversed(list(input)):
...   print line
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a= [1,2,3,4,5,6,7,8,9,10]
&gt;&gt;&gt; a[::-1]
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; reversed(a)
&lt;listreverseiterator object at 0x10dbf5390&gt;
</code></pre>
<p>The first notation is generating the reverse eagerly; the second is giving you a reverse iterator, which is possibly cheaper to acquire, as it has potential to only generate elements as needed</p>
</div>
<div class="post-text" itemprop="text">
<p>reversed return a reverse iterator.</p>
<p>x[::-1] return a list.</p>
<pre><code>In [1]: aaa = [1,2,3,4,5]

In [4]: aaa[::-1]
Out[4]: [5, 4, 3, 2, 1]

In [5]: timeit(aaa[::-1])
1000000 loops, best of 3: 206 ns per loop

In [6]: reversed(aaa)
Out[6]: &lt;listreverseiterator at 0x104310d50&gt;

In [7]: timeit(reversed(aaa))
10000000 loops, best of 3: 182 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <code>reversed</code> is not a built-in function.</p>
<pre><code>&gt;&gt;&gt; type(reversed)
&lt;type 'type'&gt;
</code></pre>
<p>It's a class which itrates over a sequence and gives a reverse order of sequence.</p>
<p>Try:</p>
<pre><code>&gt;&gt;&gt; help(reversed)
Help on class reversed in module __builtin__:

class reversed(object)
 |  reversed(sequence) -&gt; reverse iterator over values of the sequence
</code></pre>
<p>And when we pass a parameter to it, it acts as a iterator,</p>
<pre><code>&gt;&gt;&gt; l = [1, 2, 3, 4]
&gt;&gt;&gt; obj = reversed(l)
&gt;&gt;&gt; obj
&lt;listreverseiterator object at 0x0220F950&gt;
&gt;&gt;&gt; obj.next()
4
&gt;&gt;&gt; obj.next()
3
&gt;&gt;&gt; obj.next()
2
&gt;&gt;&gt; obj.next()
1
&gt;&gt;&gt; obj.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<p>whereas a slice operation returns the whole list which is not memory efficient for larger lists.</p>
<p>That is why, in Python 2, we have <code>range</code> (which returns whole list) as well as <code>xrange</code> (which generates each element on every iteration).</p>
<pre><code>&gt;&gt;&gt; l[::-1]
[4, 3, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>aList = [123, 'xyz', 'zara', 'abc', 'xyz'];
print type(reversed(aList))

bList = [123, 'xyz', 'zara', 'abc', 'xyz'];
print type(bList[::-1])
</code></pre>
<p>Output:</p>
<pre><code>&lt;type 'listreverseiterator'&gt;
&lt;type 'list'&gt;
</code></pre>
<p>The <code>reversed</code> function returns a reverse iterator. The <code>[::-1]</code> returns a list. </p>
</div>
<div class="post-text" itemprop="text">
<p>Because reversed returns an iterator.</p>
</div>
<span class="comment-copy">Ask Guido? Hes the one who will know.</span>
<span class="comment-copy"><code>for x in my_list[::-1]</code> is just ugly.</span>
<span class="comment-copy"><code>x[::-1]</code> is much less efficient than <code>reversed(x)</code>; it creates a whole new list, whereas <code>reversed()</code> simply creates an iterator that walks in the opposite direction.</span>
<span class="comment-copy">idk why people downvote good question, this type of question is really good</span>
<span class="comment-copy">@Hackaholic, I disagree. "Why does X have Y?" inherently requires either research into publicly-available email archives (with respect to creators' intent) or firsthand knowledge (ie. the person who made the decision to be present on StackOverflow) to have an objective and factual answer; otherwise it's speculation and opinion, which are off-topic here. Now, "what benefit does Y have that X does not?" is a fine question, but it's a <b>different</b> question, and if that's what was intended, then it's what should have been asked.</span>
<span class="comment-copy">I guess this page called <a href="https://docs.python.org/3.4/library/functions.html" rel="nofollow noreferrer">Built-in Functions</a> is slightly misleading since I now see there's both classes (<code>reversed</code>, <code>zip</code>, etc) and functions.</span>
<span class="comment-copy">So does <code>(elem for elem in listOfThings[::-1])</code></span>
<span class="comment-copy">@LegoStormtroopr, yes, but that one constructs an inverted list and iterates over it, completely defeating the point (with respect to memory and performance efficiency).</span>
<span class="comment-copy">I'm not saying using the slice is better, but "returning an iterator" isn't the whole reason for it as other answers have shown.</span>
