<div class="post-text" itemprop="text">
<p>My 2.7.5 version of <code>__future__.print_function</code> doesn't allow use of the <code>new</code> argument:</p>
<pre><code>&gt;&gt;&gt; print('hi', end='')
Parsing error SyntaxError: invalid syntax (line 1)
</code></pre>
<p>I'll ask about why this is in a separate post if I can't figure that out. For now, I wanted to see what arguments were available in my environment's version of this function. </p>
<p>I looked at <a href="https://stackoverflow.com/questions/218616/getting-method-parameter-names-in-python">this SO post</a> and some related ones, but these do not seem to work when I try:</p>
<pre><code>&gt;&gt;&gt; print.func_code.co_varnames
Parsing error SyntaxError: invalid syntax (line 1)
&gt;&gt;&gt; print_function.func_code.co_varnames
Runtime error 
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
AttributeError: _Feature instance has no attribute 'func_code'
</code></pre>
<p>I'm guessing that the special nature of <code>__future__</code> functions is why this standard technique fails. </p>
<p>Is there another way to check what args my version <code>__future__.print_function</code> takes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to treat a built-in function (implemented in C) as a user-defined function. They are not the same thing.  <code>.func_code</code> is only defined for user-defined functions (implemented in Python).</p>
<p>The <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow noreferrer"><code>__future__</code> module</a> only holds metadata about features, the <code>__future__.print_function</code> object is not the same object as the <code>print()</code> function. Instead, the object tells you more about what version of Python first supported the feature, and in what version the feature becomes mandatory (and the <code>from __future__</code> import becomes a no-op), as well as a bitfield flag for the <code>compile()</code> function:</p>
<pre><code>&gt;&gt;&gt; import __future__
&gt;&gt;&gt; __future__.print_function
_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)
&gt;&gt;&gt; __future__.print_function.optional
(2, 6, 0, 'alpha', 2)
&gt;&gt;&gt; __future__.print_function.mandatory
(3, 0, 0, 'alpha', 0)
&gt;&gt;&gt; __future__.print_function.compiler_flag
65536
</code></pre>
<p>In Python 2.7, built-in function objects such as <code>print()</code> simply do not have enough information for you to discover what arguments they support. In Python 3, this is slowly changing as <a href="https://stackoverflow.com/questions/25847035/what-are-signature-and-text-signature-used-for-in-python-3-4">more and more built-in types are given metadata</a>, but the <code>print()</code> function is not yet among them:</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.signature(print)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mpietre/Development/Library/buildout.python/parts/opt/lib/python3.4/inspect.py", line 2045, in signature
    return _signature_internal(obj)
  File "/Users/mpietre/Development/Library/buildout.python/parts/opt/lib/python3.4/inspect.py", line 1947, in _signature_internal
    skip_bound_arg=skip_bound_arg)
  File "/Users/mpietre/Development/Library/buildout.python/parts/opt/lib/python3.4/inspect.py", line 1884, in _signature_from_builtin
    raise ValueError("no signature found for builtin {!r}".format(func))
ValueError: no signature found for builtin &lt;built-in function print&gt;
</code></pre>
<p>I'm not sure where you got the idea from that <code>new</code> is a valid keyword for <code>print()</code> in <em>any</em> Python version however. No version of Python exists that supports that argument.</p>
<p>The only argument that is missing from <code>print()</code> in Python 2 and present in Python 3.3 and up, is the <code>flush</code> argument, see the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">Python 3 docs for <code>print()</code></a>:</p>
<blockquote>
<p>[...] if the <em>flush</em> keyword argument is true, the stream is forcibly flushed.</p>
<p><em>Changed in version 3.3</em>: Added the <em>flush</em> keyword argument.</p>
</blockquote>
<p>The only way to test for that (other than testing with <code>sys.version_info &gt;= (3, 3)</code>) is to try and use it:</p>
<pre><code>from io import StringIO

try:
    print('', end='', flush=False, file=StringIO())
    print_supports_flush = True
except TypeError:
    print_supports_flush = False
</code></pre>
</div>
<span class="comment-copy">What REPL are you using that gives a parsing error there?</span>
<span class="comment-copy">Also, <code>print()</code> in 3.x doesn't support <code>new</code> either.</span>
<span class="comment-copy">thx. that's consistent w/Martijn's info. not sure what "REPL" is but this is Python 2.7.5.</span>
<span class="comment-copy">Great. Thanks for all that background on <b>future</b> functions...I got the "new" argument from this post: <a href="http://stackoverflow.com/questions/493386/how-to-print-in-python-without-newline-or-space" title="how to print in python without newline or space">stackoverflow.com/questions/493386/â€¦</a>. Did I misunderstand that?</span>
<span class="comment-copy">@Roland: I think you did; there is no mention of a <code>new</code> argument there, just that the <code>print()</code> function is new.</span>
<span class="comment-copy">hmm, I was looking at the 3rd example in CodeLogic's answer. It's talking about Python 3.x (which could be my problem).</span>
<span class="comment-copy">Yet none of his examples use a <code>new</code> argument. His last example does use <code>flush</code> which is Python 3.3 and up only.</span>
<span class="comment-copy">what about <code>print('.', end="")</code>? It's just before the <code>flush</code> example.</span>
