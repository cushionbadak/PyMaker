<div class="post-text" itemprop="text">
<p>So I have this directory structure:</p>
<pre><code>proj/
|
---/subDirA
   |
   ---__init__.py
   ---fileA.py
|
---/subDirB
   |
   ---__init__.py
   ---fileB.py
|
---start.py
</code></pre>
<p>So what I'm trying to do is from fileB.py import a function in FileA.py. So I tried this:</p>
<pre><code>from subDirA.fileA import funct
</code></pre>
<p>When I do this I get the following error:</p>
<pre><code>ImportError: cannot import name funct
</code></pre>
<p>But If I do this instead:</p>
<pre><code>from subDirA.fileA import *
</code></pre>
<p>I dont get the error.. Can some one explain why am I getting this error?</p>
<p><strong>Note</strong></p>
<p>The file FileA.py only has two functions, the first function I import it when I run start.py using from subDirA.fileA import funct. I get the error when I run start.py and in fileB.py I try to import the second function using from subDirA.fileA import funct2</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no <code>funct</code> on your <code>fileA</code> module object at import-time.  While circular imports are the most common cause of this problem, it is also possibly a typo, or one of a few other issues.</p>
<p>If you import the module as a whole and refer to <code>funct</code> as <code>fileA.funct</code>, the issue might go away because then <code>fileA.funct</code> will only need to be available at run-time instead of import-time.</p>
<p>You might also try doing a <code>print(dir(fileA))</code> immediately after importing it to see what things are in it at that point.  You might also put a <code>print()</code> immediately after the definition of <code>funct</code> in <code>fileA.py</code> to see whether the definition is executed before you get this error:</p>
<pre><code>def funct(args):
    do_stuff()
print('funct() declared!')
</code></pre>
<p>If you are trying to execute <code>fileB.py</code> by itself, you would not expect these imports to work because the working directory is not <code>proj</code>.  The working directory must be <code>proj</code> for these imports to resolve correctly.  However, that is clearly not the issue here or you would not be able to do a star-import.</p>
</div>
<span class="comment-copy">See the Python FAQ questions <a href="https://docs.python.org/3/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other" rel="nofollow noreferrer">here</a>, and also a bunch of questions on SO about circular imports. In this case, the simplest solution, as long as you're not calling <code>funct</code> as part of your top-level code, is to just <code>from subDirA import fileA</code> and use <code>fileA.funct</code>.</span>
<span class="comment-copy">Thanks Kevin, in this case fileB is importing a function in fileA and start.py is importing a second function from fileA. fileA does not import fileB. Is this the same problem ? and if it is how can improve it.</span>
<span class="comment-copy">@vic: Ah, I misinterpreted your question.  I'm going to rewrite the answer in a moment, so abarnert's links probably won't make sense after that.</span>
<span class="comment-copy">@Kevin tried importing the module as a whole and didn't work. But if I remove the SubDirA directory and move the fileA.py to the top level directory I was able to import it in start.py and fileB.py..</span>
