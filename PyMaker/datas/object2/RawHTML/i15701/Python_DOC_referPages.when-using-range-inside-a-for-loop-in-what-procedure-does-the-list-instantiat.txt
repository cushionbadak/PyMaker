<div class="post-text" itemprop="text">
<p>I'm wondering about the <code>range()</code> function when used in a python <code>for loop</code></p>
<pre><code>for x in range(100):
    print x
</code></pre>
<p>Does range initialize the entire iter-able list before entering the loop or is it smart enough to generate the values as it increments?</p>
<p>In other words if I say.  Will there be overhead from very large ranges like such?    </p>
<pre><code>  for x in range(1000**1000):
      value = x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow">In Python 3, range</a> produces an "immutable sequence" not a generator or iterator </p>
<p><a href="https://docs.python.org/2/library/functions.html#range" rel="nofollow">In Python 2, range</a> generates a list Python 2 also has <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow">xrange</a> to make an object which is an "opaque sequence" which has virtually no memory overhead but <code>xrange</code> is not available in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>This depends on the Python version:</p>
<ul>
<li>In Python 3, <code>range()</code> is a generator-like object that produces values on demand.</li>
<li>In Python 2, <code>range()</code> creates a materialised list. If you want a generator-like object, use <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow"><code>xrange()</code></a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In case of any doubt, it is easy to check. In IDLE (e.g. using Python 3.3):</p>
<pre><code>&gt;&gt;&gt; r = range(10)
&gt;&gt;&gt; print(r)
range(0, 10)
&gt;&gt;&gt; print(list(r))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes! python initialize the entire iter-able list before entering the loop if <code>range()</code> is used. But there is an easy way of overcoming this overhead using <code>xrange()</code> which generate the values as it increments. This can be verified as:</p>
<pre><code>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; xrange(10)
xrange(10)
</code></pre>
</div>
<span class="comment-copy">In which directory/file could I see the implementation of range()?  I would like to learn how Python works, but I don't know where to start reading code.</span>
<span class="comment-copy">@Matt you can see it <a href="https://hg.python.org/cpython/file/tip/Objects/rangeobject.c" rel="nofollow noreferrer">here</a> for the CPython implementation</span>
<span class="comment-copy">@DSM noted, thanks</span>
<span class="comment-copy">It's a little pedantic, but Python 3's <code>range</code> isn't really a generator or an iterator, which is why you can do <code>10**1000 in range(10**999)</code> instantly, and why <code>next(range(10))</code> generates <code>TypeError: 'range' object is not an iterator</code>.</span>
<span class="comment-copy">Not in Python 3.</span>
