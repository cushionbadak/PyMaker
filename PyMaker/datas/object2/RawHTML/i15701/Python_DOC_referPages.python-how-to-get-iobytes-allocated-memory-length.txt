<div class="post-text" itemprop="text">
<p>This is the code i am using to test the memory allocation </p>
<pre><code>import pycurl
import io


url = "http://www.stackoverflow.com"
buf = io.BytesIO()


print(len(buf.getvalue()))   #here i am getting 0 as length


c = pycurl.Curl()
c.setopt(c.URL, url)
c.setopt(c.CONNECTTIMEOUT, 10)
c.setopt(c.TIMEOUT, 10)
c.setopt(c.ENCODING, 'gzip')
c.setopt(c.FOLLOWLOCATION, True)
c.setopt(c.IPRESOLVE, c.IPRESOLVE_V4)
c.setopt(c.USERAGENT, 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:8.0) Gecko/20100101 Firefox/8.0')
c.setopt(c.WRITEFUNCTION, buf.write)
c.perform()
c.close()

print(len(buf.getvalue()))    #here length of the dowloaded file


print(buf.getvalue())
buf.close()
</code></pre>
<p>How to get the allocated buffer/memory length by BytesIO ?
what am i doing wrong here ? python doesn't allocate fixed buffer length ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure what you mean by allocated buffer/memory length, but if you want the length of the user data stored in the <code>BytesIO</code> object you can do</p>
<pre><code>&gt;&gt;&gt; bio = io.BytesIO()
&gt;&gt;&gt; bio.getbuffer().nbytes
0
&gt;&gt;&gt; bio.write(b'here is some data')
17
&gt;&gt;&gt; bio.getbuffer().nbytes
17
</code></pre>
<p>But this seems equivalent to the <code>len(buf.getvalue())</code> that you are currently using.</p>
<p>The actual size of the BytesIO object can be found using <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="noreferrer"><code>sys.getsizeof()</code></a>:</p>
<pre><code>&gt;&gt;&gt; bio = io.BytesIO()
&gt;&gt;&gt; sys.getsizeof(bio)
104
</code></pre>
<p>Or you could be nasty and call <code>__sizeof__()</code> directly (which is like <code>sys.getsizeof()</code> but without garbage collector overhead applicable to the object):</p>
<pre><code>&gt;&gt;&gt; bio = io.BytesIO()
&gt;&gt;&gt; bio.__sizeof__()
72
</code></pre>
<p>Memory for <code>BytesIO</code> is allocated as required, and some buffering does take place:</p>
<pre><code>&gt;&gt;&gt; bio = io.BytesIO()
&gt;&gt;&gt; for i in range(20):
...     _=bio.write(b'a')
...     print(bio.getbuffer().nbytes, sys.getsizeof(bio), bio.__sizeof__())
...
1 106 74
2 106 74
3 108 76
4 108 76
5 110 78
6 110 78
7 112 80
8 112 80
9 120 88
10 120 88
11 120 88
12 120 88
13 120 88
14 120 88
15 120 88
16 120 88
17 129 97
18 129 97
19 129 97
20 129 97
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>io.BytesIO()</code> returns a standard file object which has function <code>tell()</code>. It reports the current descriptor position and does not copy the whole buffer out to compute total size as <code>len(bio.getvalue())</code> of <code>bio.getbuffer().nbytes</code>. It is a very fast and simple method to get the exact size of used memory in the buffer object. </p>
<p>I posted an example code and a more detailed answer <a href="https://stackoverflow.com/a/54030779/1887559">here</a></p>
</div>
<span class="comment-copy">show the stack trace.</span>
<span class="comment-copy">Why not use a more decent client library such as <a href="http://docs.python-requests.org/" rel="nofollow noreferrer"><code>requests</code></a>?</span>
<span class="comment-copy">@WeaselFox there is no errror i just want to know how to get the allocated memory length</span>
<span class="comment-copy">You didn't write anything into the stream so its contents are empty. What's the issue? What memory allocation are you talking about?</span>
<span class="comment-copy">@interjay python doesn't allocate fixed memory size for buffers ?</span>
<span class="comment-copy">So you are saying that memory is allocated dynamically as needed ?</span>
<span class="comment-copy">@user4046642: Yes, that's what I was trying to show. If you want a fixed size buffer, there might be something in <code>numpy</code> that you can use, e.g. <code>numpy.empty(50, dtype=numpy.character)</code></span>
