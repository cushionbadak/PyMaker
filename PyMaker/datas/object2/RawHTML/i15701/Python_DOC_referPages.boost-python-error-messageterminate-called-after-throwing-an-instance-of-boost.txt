<div class="post-text" itemprop="text">
<p>I have a main.py which I loaded in c++ and run with </p>
<pre><code>void runscript ( std::string script )
{
    try {
        PyRun_SimpleStringFlags ( script.c_str() ,NULL );
    }
    catch ( const boost::python::error_already_set&amp; ) {
        std::cout&lt;&lt;"test error"&lt;&lt;std::endl;
    }
}
</code></pre>
<p>the main.py has line: </p>
<pre><code>import test
</code></pre>
<p>(which is test.py)<br/>
located in the same folder inside main.py.
when test.py has an error I cannot cach what error I got, application crash with:</p>
<p>terminate called after throwing an instance of 'boost::python::error_already_set'</p>
<p>is there a way to cache which file or which line got an error?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>eval</code> or <code>exec</code> instead (<a href="http://www.boost.org/doc/libs/1_57_0/libs/python/doc/v2/exec.html" rel="nofollow">doc reference</a>).</p>
<pre><code>try {
    bp::exec(script);
}
catch (bp::error_already_set) {
}
</code></pre>
<p>The real problem is getting error information from exception object.</p>
<p>It's easy to print exception to stdout by <code>PyErr_Print()</code> from <code>catch</code> block, but if you need more complicated analysis the code becomes cumbersome. </p>
<p>In <code>catch</code> block you have to get exception info by <a href="https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Fetch" rel="nofollow"><code>PyErr_Fetch</code></a>, normalize by <a href="https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NormalizeException" rel="nofollow"><code>PyErr_NormalizeException</code></a> and, say, analyze call stack by iterating over traceback objects.</p>
</div>
<span class="comment-copy">Use a debugger to see the stack trace when the app crashes.</span>
