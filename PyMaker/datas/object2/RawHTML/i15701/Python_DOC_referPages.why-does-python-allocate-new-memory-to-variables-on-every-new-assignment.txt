<div class="post-text" itemprop="text">
<p>Why is it that when a variable is reassigned a new value in python new memory is allocated? Why can't modification take in place like it happens if an extra value is appended to a list, but when it is reassigned with the current list plus some new list, new memory is allotted.</p>
<pre><code>&gt;&gt;&gt; a=2
&gt;&gt;&gt; id(a)
13332800
&gt;&gt;&gt; a=a+2    # reassigning allocates new memory
&gt;&gt;&gt; id(a)
13332752
&gt;&gt;&gt; a=[1,2,3,4]
&gt;&gt;&gt; id(a)
139923169899008
&gt;&gt;&gt; a.append(2)  # change takes in place
&gt;&gt;&gt; id(a)
139923169899008
&gt;&gt;&gt; a=a+[3,2]    # this way causes new memory allocation
&gt;&gt;&gt; id(a)
139923169899656
</code></pre>
<p>Is there any way to avoid reallocation of memory on every new assignment?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python was designed to have integers be <a href="https://docs.python.org/3/glossary.html#immutable" rel="nofollow">immutable objects</a>.  Meaning, you can never mutate (change) them and every operation with them yields a new integer object:</p>
<pre><code>&gt;&gt;&gt; a = 2
&gt;&gt;&gt; id(a)
505911000
&gt;&gt;&gt; id(a + 1)
505911016
&gt;&gt;&gt; a += 2
&gt;&gt;&gt; id(a)
505911032
&gt;&gt;&gt;
</code></pre>
<p>Lists on the other hand were designed to be <a href="https://docs.python.org/3/glossary.html#mutable" rel="nofollow">mutable objects</a>.  This means that you <em>can</em> change/update their contents without creating a new list object.  Moreover, this is exactly what the <code>list.append</code> method does.  It adds a new item to the list without creating a new object.</p>
<p>This code however:</p>
<pre><code>a=a+[3,2]
</code></pre>
<p>is different than <code>list.append</code> in that it <em>does</em> create a new list object because you used the <code>+</code> operator.  <code>a+[3,2]</code> creates a new list object that is the combination of <code>a</code> and <code>[3,2]</code>.  You then assign this new object to the name <code>a</code>, overshadowing the old list object and causing <code>a</code> to now refer to the new list.  That is why <code>id(a)</code> returns a different number.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/q/3402679/1205368">stackoverflow.com/q/3402679/1205368</a></span>
<span class="comment-copy">Thanks for the explanation. It helped. But could you please explain what happens to the previous variables. Does they release memory. If not, what is the best way to avoid such memory wastage.</span>
<span class="comment-copy">@BHATIRSHAD - Python is not like C/C++ in that it is an interpreted language.  Meaning, you do not have to manually free memory that you use.  Instead, the Python <a href="https://docs.python.org/3.2/glossary.html#garbage-collection" rel="nofollow noreferrer">garbage collector</a> will <i>automatically</i> recycle the memory held by objects as soon as they are no longer in use.  It is very efficient at this too.  Besides, the cost of creating integers is negligible.  In fact, Python automatically caches small integers as well as those that appear in literals.</span>
