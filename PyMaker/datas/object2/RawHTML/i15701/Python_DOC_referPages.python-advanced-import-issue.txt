<div class="post-text" itemprop="text">
<p>I'm trying to make my first advanced python project but I'm struggling long time with imports.</p>
<p>Can someone describe me the usage of imports in python? Docs found about python imports in the official page is not so suffucient for me...</p>
<p>Here is an example:</p>
<p>I have the following source structure:</p>
<pre><code>$ ls -ltrR
.:
total 1
drwx------+ 1 Administrators None  0 Nov 15 14:09 b
-rwx------+ 1 Administrators None 24 Nov 15 14:10 a.py

./b:
total 6
-rwx------+ 1 Administrators None  0 Nov 15 14:08 c.py
-rwx------+ 1 Administrators None 16 Nov 15 14:10 __init__.py
drwx------+ 1 Administrators None  0 Nov 15 14:10 __pycache__
-rwx------+ 1 Administrators None 61 Nov 15 14:10 b.py
</code></pre>
<p>and the content of the files:</p>
<pre><code>$ cat a.py
import b

b.B().printC()

$ cat b/b.py
import c

class B:
  def printC(self):
    print(c.C().get())

$ cat b/c.py
class C():
  def get(self):
    return 'This is C'

$ cat __init__.py
from .b import *
</code></pre>
<p>When I start a.py it says: <code>ImportError: No module named 'c'</code>.
When I start b.py only it says everything's fine.</p>
<p>Another solution when in b.py i'm modifying the import to "import b.c" -&gt; in this case when I call a.py it will work, but when I call only b.py it is not going to work as b.py doesn't know b package.</p>
<p><em>Why do I need to start a.py and b.py also?</em> a.py should be an executor for UTs, and b.py should be a UT.
That's why it can happen that I would like to call all of the UTs and start a.py, and also it can happen that I'm just starting a specific UT (b.py).</p>
</div>
<div class="post-text" itemprop="text">
<p>In your a.py, instead of just having <code>import b</code>, try <code>from b import b</code> because you want to import b.py from the b module.
Alternatively, in your b/<strong>init</strong>.py, have <code>from b import *</code> But this is a question of preference (Look at <a href="https://stackoverflow.com/questions/1944569/how-do-i-write-good-correct-package-init-py-files">this thread</a> for more information on this topic)</p>
<p><a href="http://www.tutorialspoint.com/python/python_modules.htm" rel="nofollow noreferrer" title="This">This</a> is a good tutorial to get started with modules and packages. (For Python 2)</p>
<p>If you are using Python 3, then it's a little bit different. Python 3 no longer supports implicit package name imports. <a href="http://python3porting.com/problems.html#relative-import-problems" rel="nofollow noreferrer">This link</a> explains this well. So you are required to explicitly mention where the package actually is from by using relative import - <code>from . import c</code> instead of <code>import c</code> (in your b.py) and in a.py: <code>from b import b</code> instead of <code>import b</code>.</p>
<p>We avoid using relative importing in a.py, because we want to run it as a script. In Python 3, simply running a module that uses relative import, as a script will throw the Error: <code>SystemError: Parent module '' not loaded, cannot perform relative import</code>. <a href="http://charmeleon.github.io/2012/10/19/relative-imports-in-python-3/" rel="nofollow noreferrer">This link</a> explains this issue and provides a solution. If you want to execute a module like a stand alone script you can use the -m flag: <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow noreferrer">check the docs</a>.</p>
<p>So, in your case:</p>
<p>a.py:</p>
<pre><code>from b import b

b.B().printC()
</code></pre>
<p>b.py:</p>
<pre><code>from . import c

class B:
    def printC(self):
        print(c.C().get())
</code></pre>
<p>c.py: no change
Its good to explicitly cite only the modules/classes/functions you really need to import instead of importing a whole module, for lookup efficiency. But if you really wanted to just import the whole "b" package by using <code>import b</code> instead of just importing the b.py module from the b package using <code>from b import b</code>, you need to include all the modules that you mean to ship out in the <strong>all</strong> variable in your b/<strong>init</strong>.py like so:</p>
<pre><code>__all__ = ['b', 'c']
from . import *
</code></pre>
<p>As explained very well in <a href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html" rel="nofollow noreferrer">this post</a>. </p>
<p>Hope this was useful.</p>
</div>
<span class="comment-copy">from b import b  is not sufficient as b folder is a folder containing lot of UTs and I don't want to list UTs one by one.. btw I tried your suggestion but it is not ok, the error is the same. from b import * is still not OK.  ...thanks for tuts i will check them</span>
<span class="comment-copy">I ran your code on my end and it works fine. Which version of Python are you using?</span>
<span class="comment-copy">$ python --version Python 3.3.2  (maybe i did something wrong, could you please share your code?)</span>
<span class="comment-copy">I am going to try the code using your version. I tried it using 2.7.3</span>
<span class="comment-copy">It worked on my end because Python 2 supported implicit imports from with packages. Python 3 does not. I have edited the answer to reflect that.</span>
