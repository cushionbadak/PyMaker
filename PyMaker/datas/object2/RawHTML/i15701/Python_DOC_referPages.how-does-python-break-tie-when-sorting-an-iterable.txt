<div class="post-text" itemprop="text">
<p>I wonder how Python decides the order between two items that would be in a tie based on some specified key of a sort. For example, given: <code>l = [[1, 2, 3], [1, 2], [1], [2, 3, 4], [1, 2, 4, 5]]</code>, how does Python order <code>[1, 2, 3]</code> and <code>[2, 3, 4]</code> in this sort:</p>
<p><code>sorted(l, key=lambda i: len(i), reverse=True)</code></p>
<p>Does it keep the original (relative) order between items in a tie? Or does it order them randomly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Also in <a href="https://wiki.python.org/moin/HowTo/Sorting" rel="nofollow">wiki</a>:</p>
<blockquote>
<p>Starting with Python 2.2, sorts are guaranteed to be stable. That
  means that when multiple records have the same key, their original
  order is preserved.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow">docs</a>:</p>
<blockquote>
<p>The built-in sorted() function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal â€” this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).</p>
</blockquote>
</div>
<span class="comment-copy"><a href="http://en.wikipedia.org/wiki/Timsort" rel="nofollow noreferrer">Timsort</a> is stable; they keep their original order.</span>
