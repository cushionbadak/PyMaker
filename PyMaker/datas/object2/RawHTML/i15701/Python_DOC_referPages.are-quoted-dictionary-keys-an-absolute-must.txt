<div class="post-text" itemprop="text">
<p>Just curious, made an interesting observation that I got away with defining my dictionary keys without having to quote them. I guess this is a vulnerability in Python? </p>
<p>Within a sample, and not in REPL, the following does not raise an exception:</p>
<pre><code>&gt;&gt;&gt; {foo:'foo', bar:'bar'}
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
 NameError: name 'foo' is not defined
</code></pre>
<p>How do Pythonistas handle their keys? Do you advocate unquoted or quoted keys, and why?</p>
</div>
<div class="post-text" itemprop="text">
<p>A dictionary's keys can be any <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="noreferrer">hashable</a> object (a string, an integer, a tuple, etc.):</p>
<pre><code>&gt;&gt;&gt; dct = {'a': 1, 1: 'a'}
&gt;&gt;&gt; dct['a']
1
&gt;&gt;&gt; dct[1]
'a'
&gt;&gt;&gt;
</code></pre>
<p>Quoting a key simply means that the key is a string, as with <code>'a'</code> above.</p>
<hr/>
<p>As far as your claim that:</p>
<blockquote>
<p>I got away with defining my keys without having to quote them</p>
</blockquote>
<p>I assume that you mean you did something like this:</p>
<pre><code>dct = {key1: 1, key2: 'a'}
</code></pre>
<p>There is really nothing special about the code above.  It just means that the names <code>key1</code> and <code>key2</code> refer to hashable objects, which now become the keys of the dictionary. An example is below:</p>
<pre><code>&gt;&gt;&gt; key1 = 'a'
&gt;&gt;&gt; key2 = 1
&gt;&gt;&gt; dct = {key1: 1, key2: 'a'}
&gt;&gt;&gt; dct[key1]
1
&gt;&gt;&gt; dct[key2]
'a'
&gt;&gt;&gt; dct['a']
1
&gt;&gt;&gt; dct[1]
'a'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>On the other hand, if you mean that you used the <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="noreferrer"><code>dict</code></a> built-in to make a dictionary:</p>
<pre><code>dct = dict(key1='a', key2=1)
</code></pre>
<p>Then you should know that the keys are <em>still normal strings</em>:</p>
<pre><code>&gt;&gt;&gt; dct = dict(key1='a', key2=1)
&gt;&gt;&gt; dct
{'key2': 1, 'key1': 'a'}
&gt;&gt;&gt; dct[key1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'key1' is not defined
&gt;&gt;&gt; dct['key1']
'a'
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Finally, regarding your question of whether or not you should always use string keys, the answer is <em>it depends</em>.  If you need your keys to hold data that can only be represented as a string (such as a person's name), use strings.  If you need the keys to hold numerical data (such as id numbers), use integers or floats or whatever is appropriate.</p>
<p>Simply put, do whatever makes the most sense for your program.</p>
</div>
<span class="comment-copy">Could you give an example of what you mean?</span>
<span class="comment-copy">are you referring to <code>dict(key=1)</code> and <code>{'key':1}</code>?</span>
<span class="comment-copy">yes, like the above, except <code>{key:1}</code> where <code>key</code> is not a pre-existing variable. "Got away" because in REPL this throws exception.</span>
<span class="comment-copy">@rpattiso indeed, +1</span>
<span class="comment-copy">I think rpattiso may be right, and he may be thinking of constructor syntax: <code>dict(key1=1, key2='a')</code>, which means the same thing as <code>{'key1': 1, 'key2': 'a'}</code>. Then again, maybe not; it's not easy to tell from the questionâ€¦</span>
<span class="comment-copy">yes, sorry for the ambiguity. was mostly something like <code>{foo:'foo', bar:'bar'}</code></span>
<span class="comment-copy">@iCodez i had to read it twice, but yeah, it did answer my question!</span>
<span class="comment-copy">actually @iCodez, the question was that the keys were not variables. i'll update the question now.</span>
<span class="comment-copy">@aug2uag - The exception is being thrown because the name <code>foo</code> is not defined.  You need to define it before using it, something like <code>foo = 'whatever'</code>.</span>
