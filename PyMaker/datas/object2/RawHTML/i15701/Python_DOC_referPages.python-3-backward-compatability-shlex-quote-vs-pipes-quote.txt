<div class="post-text" itemprop="text">
<p>One of my projects uses <code>shlex.quote</code> which is available since <em>python 3.3</em>. But that <code>shlex.quote</code> is the same as <code>pipes.quote</code> which is deprecated after moving to shlex.</p>
<p>Now for compatibility I am using this code:</p>
<pre><code>def cmd_quote(string):
    import sys
    if int(sys.version[2]) &lt; 3:
        import pipes
        return pipes.quote(string)
    else:
        import shlex
        return shlex.quote(string)
</code></pre>
<p>Are any better practices exists?</p>
</div>
<div class="post-text" itemprop="text">
<p>First, if you want to do numerical comparisons against version, use <a href="https://docs.python.org/3/library/sys.html#sys.version_info"><code>version_info</code></a>, don't try to parse the string in <code>version</code>.*</p>
<p>This also means you can take advantage of the way tuples are compared and write code like:</p>
<pre><code>if sys.version_info &lt; (3, 3):
</code></pre>
<p>… and it won't break if Python gets to 3.10.0 or 4.0 ever come out.</p>
<p><sub>* Unless you need to worry about 1.5 vs. 2.0, in which case you've obviously got a time-machine gatewaying between Usenet and StackOverflow, and surely you can think of better uses for that.</sub></p>
<hr/>
<p>Anyway, it's probably better to just test for <code>shlex.quote</code> existing in the first place. That way, it's obvious to the reader what you're doing: using <code>shlex.quote</code> if possible, falling back to <code>pipes.quote</code> if not.</p>
<p>You'll see that pattern all over the place—even in the stdlib, where code is imported from C accelerator modules if possible, but fallback code is used if not (e.g., if you're using PyPy instead of CPython).</p>
<hr/>
<p>Also, note that <code>pipes.quote</code> is <em>only</em> documented in 2.7. Not 3.0-3.2 (which is what it seems like you care about…), or 2.6, or any other version. You're relying on something that happens to be there in a particular implementation. (Well, practically, in all of them,* but still, why rely on that if you don't have to?)</p>
<p><sub>* As far as I know, there aren't any 3.2 implementations that have <code>pipes</code> and <code>shlex</code> but don't have <code>pipes.quote</code>. And there probably won't be too many new 3.2 implementations created in the future.</sub></p>
<hr/>
<p>Also, while it can occasionally be useful to <code>import</code> in the middle of a function, it's kind of a weird thing to do. If there's a problem with the installation on a machine you deploy this on, would you really expect to be able to import your module successfully, but then later get an <code>ImportError</code> on calling some function? That's the kind of thing people get baffled by and run to SO for help with all the time. :) (It's also obviously a bit of a performance hit to do all this looking in <code>sys.modules</code> and converting strings to ints and so on when you don't need to, but I doubt that's going to matter.)</p>
<hr/>
<p>So, I think the way I'd write it would be:</p>
<pre><code>try:
    from shlex import quote as cmd_quote
except ImportError:
    from pipes import quote as cmd_quote
</code></pre>
</div>
