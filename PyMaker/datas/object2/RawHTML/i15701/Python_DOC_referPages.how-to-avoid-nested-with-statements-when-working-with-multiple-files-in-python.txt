<div class="post-text" itemprop="text">
<p>When working with multiple files in Python code can get ugly when using the recommended style:</p>
<pre><code>with open("foo.txt") as foo:
    with open("bar.txt", "w") as bar:
         with open("baz.txt", "w") as baz:
              # Read from foo, write different output to bar an baz
</code></pre>
<p>That's three indentation levels just for working with files! The alternative would be this</p>
<pre><code>foo = open("foo.txt")
bar = open("bar.txt", "w")
baz = open("baz.txt", "w")
# Read from foo, write different output to bar an baz
foo.close()
bar.close()
baz.close()
</code></pre>
<p>I have a feeling that either of these examples could be refactored to something more elegant. Any examples?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.7 and up let you specify multiple context managers in one <code>with</code> statement:</p>
<pre><code>with open("foo.txt") as foo, open("bar.txt", "w") as bar, open("baz.txt", "w") as baz:
    # Read from foo, write different output to bar an baz
</code></pre>
<p>The line <em>does</em> get long, and you cannot use parentheses to keep that below 80 characters. You can use <code>\</code> backslash continuations however:</p>
<pre><code>with open("foo.txt") as foo,\
        open("bar.txt", "w") as bar,\
        open("baz.txt", "w") as baz:
    # Read from foo, write different output to bar an baz
</code></pre>
<p>Another option would be to use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer"><code>contextlib.ExitStack()</code> context manager</a> (only in Python 3.3 and up):</p>
<pre><code>from contextlib import ExitStack

with ExitStack() as stack:
    foo = stack.enter_context(open("foo.txt"))
    bar = stack.enter_context(open("bar.txt"))
    baz = stack.enter_context(open("baz.txt"))
</code></pre>
</div>
<span class="comment-copy"><code>with open('file1.txt') as f1, open('file2.txt') as f2:</code> do like this.</span>
