<div class="post-text" itemprop="text">
<p>I'm still very new to Python and am still wrapping my head around everything it can do. I'm currently working on a small app to help me in my job. It's got a graphical menu that lets me choose apps to install on a PC. The problem I have is some of the buttons have two installers that they run (32 and 64 bit). I need the program to wait for one to be finished before starting the next one. How do I do this?</p>
<p>Here's the code...</p>
<pre><code>def retranslateUi(self, Form):
    Form.setWindowTitle(_translate("Form", "Form", None))
    self.label.setText(_translate("Form", "What would you like to install?", None))
    self.adobe_reader.setText(_translate("Form", "Adobe Reader", None))
    self.flash.setText(_translate("Form", "Flash", None))
    self.java_7.setText(_translate("Form", "Java 7", None))
    self.java_8.setText(_translate("Form", "Java 8", None))
    self.adobe_reader.clicked.connect(self.adobe)
    self.flash.clicked.connect(self.flash13)
    self.java_7.clicked.connect(self.java7)
    self.java_8.clicked.connect(self.java8)

def adobe(self):
    os.startfile("C:\\Users\\Erik\\Desktop\\install_reader_11.exe")

def flash13(self):
    os.startfile("C:\\Users\\Erik\\Desktop\\install_flash_13_IE.exe")
    os.startfile("C:\\Users\\Erik\\Desktop\\install_flash_13_nonIE.exe")

def java7(self):
    os.startfile("C:\\Users\\Erik\\Desktop\\install_java-7u71-x32.exe")
    os.startfile("C:\\Users\\Erik\\Desktop\\install_java-7u71-x64.exe")

def java8(self):
    os.startfile("C:\\Users\\Erik\\Desktop\\install_java-8u25-x32.exe")
    os.startfile("C:\\Users\\Erik\\Desktop\\install_java-8u25-x64.exe")
</code></pre>
<p>Here's the edited code after I made the changes from Steve... also an error message I get in the python terminal after running an installer (which seems to work).</p>
<pre><code>def adobe(mycmd):

    mycmd = r"C:\Users\Erik\Desktop\install_reader_11.exe"

    try:
        retcode = call(mycmd,shell = True)
        if retcode &lt; 0:
            print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode
        else:
            print &gt;&gt;sys.stderr, "Child returned", retcode

    except OSError as e:
        print &gt;&gt;sys.stderr, "Execution failed:", e
        retcode = -1

    return retcode

def flash13(mycmd):

    mycmd = r"C:\Users\Erik\Desktop\install_flash_13_IE.exe"

    try:
        retcode = call(mycmd,shell = True)
        if retcode &lt; 0:
            print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode
        else:
            print &gt;&gt;sys.stderr, "Child returned", retcode

    except OSError as e:
        print &gt;&gt;sys.stderr, "Execution failed:", e
        retcode = -1

    return retcode
</code></pre>
<p>Error Msg...</p>
<pre><code>print &gt;&gt; sys.stderr, "Child returned", retcode
TypeError: unsupported operand type(s) for &gt;&gt;: 'builtin_function_or_method' and
'_io.TextIOWrapper'
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Everywhere that you're using <code>os.startfile(cmd)</code> use <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess.call(cmd)</code></a>.  At the top of your script put</p>
<pre><code>import subprocess
</code></pre>
<p>And change everywhere that has </p>
<pre><code>os.startfile("C:\\Users\\Erik\\Desktop\\whatever.exe")
</code></pre>
<p>to </p>
<pre><code>subprocess.call("C:\\Users\\Erik\\Desktop\\whatever.exe")
</code></pre>
<p>The problem with using <code>os.startfile</code> for your script is that it is not blocking.  That means that your script <em>does not wait</em> for the user to interact with the installers that pop up; it just keeps going, and it can pop up several installers at once.  <code>subprocess.call</code> <em>is</em> blocking.  That means that <em>it waits for whatever you launch</em> to be finished, and your script will start right back up when the installer is closed.</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than os.startfile use something like the following example, I would put it into a function:</p>
<p>early in your code you need:</p>
<pre><code>from subprocess import call

def SafeExtern(mycmd):
    """ Wrapper to call external programs checking the results """
    try: # This allows exceptions to be caught
        retcode = call(mycmd, shell=True) # Call the external program
        if retcode &lt; 0: # Check the return code errors should be &lt;0
            print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode
        else:
            print &gt;&gt;sys.stderr, "Child returned", retcode # For information
    except OSError as e: # Catch OSErrors and let the user know
        print &gt;&gt;sys.stderr, "Execution failed:", e
        retcode = -1 # Obviously this is an error
    return retcode
</code></pre>
<p>You can then use the above function to call external programs waiting for the result in each case.</p>
<p>Note that if you prefix each string with r you can get rid of the double backslashes, e.g.:</p>
<pre><code>r"C:\Users\Erik\Desktop\install_java-7u71-x32.exe"
</code></pre>
<p>rather than</p>
<pre><code>"C:\\Users\\Erik\\Desktop\\install_java-7u71-x32.exe"
</code></pre>
</div>
<span class="comment-copy">Thanks for the reply. When I try to start an exe with subprocess.call I get this - "OS Error: [WinError 740] The requested operation requires elevation"  I'm assuming that means they need admin privileges? I am the admin on my PC and have no problem installing them normally.</span>
<span class="comment-copy">@sloppyfrenzy Strange.  When I try it the installers launches like normal, asking the user to elevate privileges.  You <i>can</i> start your python script as administrator, but that's not very elegant.</span>
<span class="comment-copy">Weird. I'm running Win 8.1 if that makes any difference. When I right-click on the python file I don't see a run as admin option. Is Subprocess better to use than OS in general?</span>
<span class="comment-copy">You have way more control whenever you use <code>subprocess.call</code> than <code>os.startfile</code>.  Also, <code>os.startfile</code> is available on Windows only.  There are probably situations when you would want to use <code>os.startfile</code>, but I can't think of when they would be.</span>
<span class="comment-copy">Thanks for the reply. I'm not sure what that code does to be honest, at least in relation to the problem I'm having. Where would I put that in my code? Thanks for the adding "r" tip.</span>
<span class="comment-copy">@sloppyfrenzy I have expanded the example to a function you can use and commented it.</span>
<span class="comment-copy">Thanks for the explanation. I'm still unclear about a couple things. What does "print &gt;&gt; sys.stderr" do specifically? Also, i figured out how to get it working, however I'm not sure how to use this code for more than one file path. Currently I have the file path in the "mycmd" variable. I've edited my post with the updated code I've tried and an error msg I get in the python terminal after I run one of the installs. The installer runs, but then I get the error.</span>
<span class="comment-copy">Are you running python 2.x.x or 3.x.x? In python2 print &gt;&gt;sys.stderr, somethings prints to the standard error output rather than the standard console (stdio), the equivalent statement would be print (somethings, file=sys.stderr).  The idea was to have one function like that above and call it within each selection handler with the path as the parameter.</span>
