<div class="post-text" itemprop="text">
<p>I am trying to filter a Django queryset by timestamp (less than a certain value). However, the filter seems to be letting through records that are NOT less than the specified timestamp.  Here is an example function:</p>
<pre><code>def check_jobs_status_3():
    current_time = datetime.utcnow()
    time_threshold = current_time - timedelta(seconds=60)
    print("$$$$$$$$$$$$ current_time = {}, timedelta = {}, time_threshold = {}".format(current_time,timedelta(seconds=60),time_threshold))
    stuck_jobs_qs = Job.objects.filter(last_updated__lt=time_threshold)
    for stuck_job in stuck_jobs_qs:
        print("############################## Job #{} (last_updated = {}) no encoding status after {} seconds. Re-enqueueing.".format(stuck_job.id,stuck_job.last_updated,get_video_encoding_timeout_seconds()))
</code></pre>
<p>Here is the output:</p>
<pre><code>$$$$$$$$$$$$ current_time = 2019-03-14 20:54:15.221554, timedelta = 0:01:00, time_threshold = 2019-03-14 20:53:15.221554
############################## Job #20 (last_updated = 2019-03-14 20:54:15.221264+00:00) no encoding status after 60 seconds. Re-enqueueing.
</code></pre>
<p>As you can see, I am receiving a record with last_updated set to 2019-03-14 20:54:15, which is NOT less than the filter value of 2019-03-14 20:53:15</p>
<p>Here is the definition of the last_updated field:</p>
<pre><code>last_updated = models.DateTimeField(auto_now=True)
</code></pre>
<p>What could the problem be?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Django's timezone-aware method <a href="https://docs.djangoproject.com/en/dev/topics/i18n/timezones/#naive-and-aware-datetime-objects" rel="nofollow noreferrer"><code>django.utils.timezone.now</code></a>.</p>
<pre><code>from django.utils import timezone

# ...

def check_jobs_status_3():
    current_time = timezone.now()  # change this
    time_threshold = current_time - timedelta(seconds=60)
    print("$$$$$$$$$$$$ current_time = {}, timedelta = {}, time_threshold = {}".format(current_time,timedelta(seconds=60),time_threshold))
    stuck_jobs_qs = Job.objects.filter(last_updated__lt=time_threshold)
    for stuck_job in stuck_jobs_qs:
        print("############################## Job #{} (last_updated = {}) no encoding status after {} seconds. Re-enqueueing.".format(stuck_job.id,stuck_job.last_updated,get_video_encoding_timeout_seconds()))
</code></pre>
</div>
<span class="comment-copy">Please try with django's <a href="https://docs.djangoproject.com/en/2.1/topics/i18n/timezones/#naive-and-aware-datetime-objects" rel="nofollow noreferrer"><code>timezone.now()</code></a> instead of <code>datetime.utcnow()</code> and see if it fixes the issue.</span>
<span class="comment-copy">last_updated__lt=time_threshold.date() should fix your problem</span>
<span class="comment-copy">That worked great, thanks!</span>
