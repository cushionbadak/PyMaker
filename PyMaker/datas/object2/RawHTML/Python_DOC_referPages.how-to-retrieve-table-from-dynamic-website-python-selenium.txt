<div class="post-text" itemprop="text">
<p>I want to retrieve all the information from a table on a dynamic website and I have the following code for it:</p>
<pre><code>from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
import sys
reload(sys)
import re
import csv
from time import sleep
sys.setdefaultencoding('utf-8') #added since it would give error for certain values when using str(i)

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
prefs = {'profile.managed_default_content_settings.images':2}
chrome_options.add_experimental_option("prefs", prefs)
driver = webdriver.Chrome(chrome_options=chrome_options) 

maxcr = 1379
listofrows = []


url = "http://biggestbook.com/ui/catalog.html#/itemDetail?itemId=HERY4832YER01&amp;uom=CT"
print(url) 
driver.get(url)
wait = WebDriverWait(driver,10)
# Trying to get the table 
tableloadwait = (wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".panel-body"))))
table = driver.find_elements_by_css_selector(".panel-body")
print(table)
RowsOfTable = table.get_attribute("tr")
</code></pre>
<p>However, I keep getting error but it doesn't work so far. How do I retrieve the information of the table?
Thanks a lot!</p>
<p>error:
RowsOfTable = table.get_attribute("tr")
AttributeError: 'list' object has no attribute 'get_attribute'</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is the code to get the product details</p>
<pre><code>tableloadwait = (wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".panel-body"))))
driver.find_element_by_xpath("//span[contains(.,'Product Details')]").click()
rows = driver.find_elements_by_xpath("//span[contains(.,'Product Details')]/ancestor::div[@class='accordion-top-border']//tr[(@ng-repeat='attr in attributes' or @ng-repeat='field in fields') and @class='visible-xs']")

for rowNum in range(len(rows)):
    print(rows[rowNum].get_attribute('innerText'))
driver.quit()
</code></pre>
<p>We have to trim the values or break the values as per your requirement.</p>
<p>if you would like to get the data based on row text use the below.</p>
<pre><code>upcData = driver.find_element_by_xpath("//strong[.='UPC']/parent::td").get_attribute('innerText').replace('UPC','').replace('\n','').replace('    ','')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Expand the accordion with the appropriate + button first then select the table. Add waits for items to be present. Change the <code>expandSigns</code> index to 2 if you want the other table.</p>
<pre><code>from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd

url = 'http://biggestbook.com/ui/catalog.html#/itemDetail?itemId=HERY4832YER01&amp;uom=CT'
driver = webdriver.Chrome()
driver.get(url)
expandSigns = WebDriverWait(driver,10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".glyphicon-plus")))
expandSigns[1].click()
WebDriverWait(driver,10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "td")))

table = driver.find_element_by_css_selector('table')
html = table.get_attribute('outerHTML')

df  = pd.read_html(html)
print(df)
driver.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to scrape, not test, you can use <strong>requests</strong> to get data. Below code is example how you can get data from the page.</p>
<pre><code>import requests
import re

# Return header page(html) to get token and list key
response = requests.get("http://biggestbook.com/ui/catalog.html#/itemDetail?itemId=HERY4832YER01&amp;uom=CT")

# Get token using regular expression
productRecommToken = re.search("'productRecommToken','(.+)'", response.text)[1]

# Get list of keys using regular expression
listKey = re.search("'listKey',\\['(.*?)'\\]", response.text)[1].split("','")

# Create header with token
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Referer': 'http://biggestbook.com/ui/catalog.html',
    'Origin': 'http://biggestbook.com',
    'DNT': '1',
    'token': productRecommToken,
    'BiggestBook-Handle-Errors-Generically': 'true',
}

# Create parameters with list keys and search values
params = (
    ('listKey', listKey),
    ('uom', 'CT'),
    ('vc', 'n'),
    ('win', 'HERY4832YER01'),
)

# Return json with all details about product
response = requests.get('https://api.essendant.com/digital/digitalservices/search/v1/items',
                       headers=headers,
                       params=params)
data = response.json()

# Get items from json, probably could be more than one
items = data["items"]

# Iterate and get details you need. Check "data" to see all possible details you can get
for i in items:
    print(i["manufacturer"])
    print(i["description"])
    print(i["actualPrice"])

    # Get attributes
    attributes = i["attributes"]

    # Example hot you can get specific one attribute.
    thickness = list(filter(lambda d: d['name'] == 'Thickness', attributes))[0]["value"]

    # Print all attributes as name = value
    for a in attributes:
        print(f"{a['name']} = {a['value']}")
</code></pre>
</div>
<span class="comment-copy">what is the error and where does it occur?</span>
<span class="comment-copy">always show full error (Traceback) in question.</span>
<span class="comment-copy">you will get <code>AttributeError: 'list' object has no attribute 'get_attribute'</code> error as <code>tr</code> is not an attribute. what data you are trying to get from table?</span>
<span class="comment-copy"><code>find_elements_</code> (with <code>s</code> in <code>elements</code>) always gives list with many elements - so you have to use <code>for</code> loop to get every element and use <code>get_attribute</code> with every element separatelly.</span>
<span class="comment-copy">error: RowsOfTable = table.get_attribute("tr") AttributeError: 'list' object has no attribute 'get_attribute'</span>
<span class="comment-copy">In this, I actually want to get the product details and not 6 tables. I thought (".panel-body") would only be applicable to that table?</span>
<span class="comment-copy">is there a way here to get only the 'global product type' from this table?</span>
<span class="comment-copy">with your first solution, I only get the table upto a 'special features'. If I want to get any one of the following attributes then what would I need to do? for example, if rather than wanting 'Global Product Type' I want the UPC or UNSPSC? Because when I put any of the following (Carton Weight Carton Pack Quantity UPC UNSPSC)  in the above code (code from the comment) it gives a blank. If I run the first code you gave then these dont show up but other attributes show up. I am a bit confused now</span>
<span class="comment-copy">@suppurturi Yes I had done that as well. However, with replacing with part to 'UPC' or UNSPSC both give blanks. In fact even if I run the first code you gave for the entire table, these particular ones along with some other attributes do not show up. Any reason for them not showing up?</span>
<span class="comment-copy">sent you a message on chat!</span>
<span class="comment-copy">I want to write the outputs to the files, but it gives everything in one cell but I want it to be in different rows. Now I am confused as to what's going on.  <code>df  = pd.read_html(html) print(html)  listofrows.append(df) print(listofrows)  for rows in listofrows: 	with open('listofData.csv', 'w') as listofData: 		for rows in listofrows: 			rowlistwriter = csv.writer(listofData)     			rowlistwriter.writerow(rows)</code></span>
<span class="comment-copy">Also, I want to not have chrome open up (using your method) but for some reason it still opens up and saturates everything  <code>chrome_options = webdriver.ChromeOptions() chrome_options.add_argument('--headless') driver = webdriver.Chrome(chrome_options=chrome_options) </code></span>
<span class="comment-copy">Why not use df.to_csv? As for headless not sure why that doesn't work. At a quick scan, what you have written looks right. I would have to test.</span>
<span class="comment-copy">As you suggested I did the following: df[0].to_csv("output.csv") and it worked. But how do I convert it to columns? It gives rows atm</span>
<span class="comment-copy">Also, if I keep feeding multiple pages, will it keep writing to new rows?</span>
