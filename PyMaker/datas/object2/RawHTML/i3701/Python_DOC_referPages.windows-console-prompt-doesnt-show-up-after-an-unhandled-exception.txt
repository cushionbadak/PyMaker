<div class="post-text" itemprop="text">
<p>Feeling really stupid right now. I opened a python file in my Windows console and the file raised an error (such as <code>TypeError</code>, <code>AttributeError</code>, etc.) and the console won't work anymore so I have to close it and open a new window everytime I get an error. There should be a shortcut or something to exit but <code>Ctrl+C</code> doesn't work. I have Windows 10 and Python 3.6.</p>
<p>When I run my file in the console happens this:</p>
<pre><code>C:\Users\...path...&gt;python my_file.py

Traceback (most recent call last):
  File "C:\Users\...path...\my_file.py", line 74, 
  ...stuff...
AttributeError: my error
</code></pre>
<p>And after this I can't do anything. If someone could help. </p>
</div>
<div class="post-text" itemprop="text">
<p>On an unhandled exception, a Python program normally quits, and you get the console prompt back. If yours doesn't, it means that it hangs instead.</p>
<p><strong>If Ctrl-C doesn't work, you can force-kill a Windows console program with Ctrl-Break.</strong></p>
<p>But you really should find out why it hangs, as it's not normal. My guess is you're swallowing all exceptions somewhere, e.g. with an unqualified <code>except:</code> which is strongly discouraged exactly for this reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>May be because of bug/error your program become freeze. Please try to use exception handling.
An example : </p>
<pre><code>try:
    your_codes()
except Exception as ex:
    print(ex)
</code></pre>
<p>This is just an example of exception handling. You can do it in much better (but complicated!) approach.
You can read <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">this doc</a>.</p>
</div>
<span class="comment-copy">Will you please share your code?</span>
<span class="comment-copy">The code isn't important, what I want to know is how to be able to write another command in the console, because after an error I can't do anything.</span>
<span class="comment-copy">Could it be related to <a href="https://stackoverflow.com/questions/33883530/why-is-my-command-prompt-freezing-on-windows-10">Why is my command prompt freezing on windows 10?</a></span>
<span class="comment-copy">@ThierryLathuille it was actually a problem with my program that kept freezing the console, but that problem I have too, thanks!</span>
<span class="comment-copy">I have no <code>except</code> in my program, I am using PyQt5 with a GUI so the problem could be there, thanks!! I don't know which key is break, could you clarify?</span>
<span class="comment-copy">@AntoniaCobo <a href="https://en.wikipedia.org/wiki/Break_key" rel="nofollow noreferrer">en.wikipedia.org/wiki/Break_key</a></span>
<span class="comment-copy">Ctrl+Break doesn't forcibly kill a console program. It sends a <code>CTRL_BREAK_EVENT</code> by injecting a thread in the target process that runs <code>CtrlRoutine(CTRL_BREAK_EVENT)</code>, in which <code>CtrlRoutine</code> is an undocumented kernel32.dll export (e.g. try <code>ctypes.WinDLL('kernel32').CtrlRoutine(1)</code>, or 0 for Ctrl+C). The default handler, if called, exits via <code>ExitProcess</code>, in which case at least DLL cleanup code still runs. You can install a custom handler to exit gracefully via Ctrl+Break. The CRT's control handler maps this to <code>SIGBREAK</code>, which can be assigned to a Python function using the <code>signal</code> module.</span>
<span class="comment-copy">@eryksun Gee, thanks for the info! Anyway, the important thing is, Python doesn't catch it by default and makes it disproportionally hard to catch it otherwise, so this will work almost always. While Ctrl-C won't if there's so much as the dreaded <code>except:</code>.</span>
<span class="comment-copy">Handling Ctrl+Break isn't hard. Set a handler function via, e.g.,  <code>signal.signal(signal.SIGBREAK, sigbreak_handler)</code>. The handler should try to exit gracefully but fall back on a hard exit via <code>os._exit</code>.</span>
