<div class="post-text" itemprop="text">
<p>i have the below string that i am trying to split into a dictionary with specific names.</p>
<pre><code>string1 = "fdsfsf:?x=klink:apple&amp;nn=specialtime&amp;tr=instruction1&amp;tr=instruction2&amp;tr=instruction3"
</code></pre>
<p>what I am hoping to obtain is:</p>
<pre><code>&gt;&gt;&gt; print(dict)

{'namy_names': 'specialtime', 'tracks': ['instruction1', 'instruction2', 'instruction3']}
</code></pre>
<p>i'm quite new to working with dictionaries, so not too sure how it is supposed to turn out. </p>
<p>I have tried the below code, but it only provides <code>instruction1</code> instead of the full list of <code>instructions</code></p>
<pre><code>delimiters = ['&amp;nn', '&amp;tr']

values = re.split('|'.join(delimiters), string1)
values.pop(0)  # remove the initial empty string
keys = re.findall('|'.join(delimiters), string1)
output = dict(zip(keys, values))

print(output)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use url-parsing.</p>
<pre><code>from urllib import parse

url = "fdsfsf:?x=klink:apple&amp;nn=specialtime&amp;tr=instruction1&amp;tr=instruction2&amp;tr=instruction3"
d = parse.parse_qs(parse.urlparse(url).query)

print(d)
</code></pre>
<p>Returns:</p>
<pre><code>{'nn': ['specialtime'],
 'tr': ['instruction1', 'instruction2', 'instruction3'],
 'x': ['klink:apple']}
</code></pre>
<p>And from this point, if necessary..., you would simply have to rename and pick your vars. Like this:</p>
<pre><code>d = {
    'namy_names':d.get('nn',['Empty'])[0],
    'tracks':d.get('tr',[])
}

# {'namy_names': 'specialtime', 'tracks': ['instruction1', 'instruction2', 'instruction3']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This looks like url-encoded data, so you can/should use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs" rel="nofollow noreferrer"><code>urllib.parse.parse_qs</code></a>:</p>
<pre><code>import urllib.parse

string1 = "fdsfsf:?x=klink:apple&amp;nn=specialtime&amp;tr=instruction1&amp;tr=instruction2&amp;tr=instruction3"

dic = urllib.parse.parse_qs(string1)
dic = {'namy_names': dic['nn'][0],
       'tracks': dic['tr']}
# result: {'namy_names': 'specialtime',
#          'tracks': ['instruction1', 'instruction2', 'instruction3']}
</code></pre>
</div>
<span class="comment-copy">Where does <code>namy_names</code> come from?</span>
<span class="comment-copy"><code>namy_names</code> comes from <code>&amp;nn</code> which I hope to rename (if possible). same with <code>tracks</code> which comes from <code>&amp;tr</code></span>
<span class="comment-copy">This seems to have an extra key, but I don't think that can be helped.</span>
<span class="comment-copy">Thanks both for your comments! I think I will accept this answer because it returns me all the items as a dictionary item, and then I can just rename and take what I want / need. Might be good for other people viewing this answer.</span>
<span class="comment-copy">@Anton vBR, was hoping you can share more about the last section of the codes for the renaming of the <code>keys</code>? What is <code>['Empty']</code> and <code>[]</code>?</span>
<span class="comment-copy">@jakewong Those are defaultvalues. So let's say that the first dictionary does not have any 'nn' then it returns ['Empty'] and same with tracks. Try for instance to pass a string without those params.</span>
<span class="comment-copy">This also seems to be hardcoded for two keys only...</span>
<span class="comment-copy">@coldspeed Well, yes. I <i>could</i> add a way to configure which key is renamed to what and whether each key should be a list or a string, but I think that's probably over-engineered.</span>
<span class="comment-copy">Thanks @Aran-Fey for your answer!</span>
