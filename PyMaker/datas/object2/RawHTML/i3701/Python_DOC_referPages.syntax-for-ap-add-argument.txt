<div class="post-text" itemprop="text">
<p>I am new to OpenCV. I am using anaconda spyder console to write Python code. I took code form here (<a href="https://www.pyimagesearch.com/2014/08/25/4-point-opencv-getperspective-transform-example/" rel="nofollow noreferrer">https://www.pyimagesearch.com/2014/08/25/4-point-opencv-getperspective-transform-example/</a>)
The code was that I am struck at is:</p>
<pre><code># USAGE
# python transform_example.py --image images/example_01.png --coords "[(73, 239), (356, 117), (475, 265), (187, 443)]"
# python transform_example.py --image images/example_02.png --coords "[(101, 185), (393, 151), (479, 323), (187, 441)]"
# python transform_example.py --image images/example_03.png --coords "[(63, 242), (291, 110), (361, 252), (78, 386)]"

# import the necessary packages
from pyimagesearch.transform import four_point_transform
import numpy as np
import argparse
import cv2

# construct the argument parse and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", help = "path to the image file")
ap.add_argument("-c", "--coords",
    help = "comma seperated list of source points")
args = vars(ap.parse_args())

# load the image and grab the source coordinates (i.e. the list of
# of (x, y) points)
# NOTE: using the 'eval' function is bad form, but for this example
# let's just roll with it -- in future posts I'll show you how to
# automatically determine the coordinates without pre-supplying them
image = cv2.imread(args["image"])
pts = np.array(eval(args["coords"]), dtype = "float32")

# apply the four point tranform to obtain a "birds eye view" of
# the image
warped = four_point_transform(image, pts)

# show the original and warped images
cv2.imshow("Original", image)
cv2.imshow("Warped", warped)
cv2.waitKey(0)
</code></pre>
<p>At line no. 13 - 17 can someone tell exactly what is happening. I know that I need to get image, get coordinates of paper (and these lines are for this purpose) but I can't get image file.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the link provided, the arguments are parsed using <strong>optional arguments</strong>, i.e. arguments must be preceded with the string mentioned in <code>add_argument()</code>.</p>
<p>So in your case you have:</p>
<pre><code>ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", help = "path to the image file")
ap.add_argument("-c", "--coords", help = "comma seperated list of source points")
args = vars(ap.parse_args())
</code></pre>
<p>Notice <code>"--image"</code> and <code>"--coords"</code>. These are optional arguments and these strings must be mentioned before you execute the code in the terminal.</p>
<p>So type this on the terminal:</p>
<pre><code>python transform_example.py --image images/example_01.png --coords "[(73, 239), (356, 117), (475, 265), (187, 443)]"
</code></pre>
<p>See <a href="https://docs.python.org/3.6/howto/argparse.html" rel="nofollow noreferrer">THIS PAGE</a> for more details on argument parsing and their various ways. </p>
</div>
<span class="comment-copy">You have to run the code on a terminal <code>python filename.py image_path coordinates</code></span>
<span class="comment-copy">When I tried: python transform_example.py images/example_01.png "[(73, 239), (356, 117), (475, 265), (187, 443)]" It gave me error "invalid syntax"</span>
<span class="comment-copy">The arguments need to be prefixed with the option name. Try <code>python transform_example.py --image images/example_01.png --coords "[(73, 239), (356, 117), (475, 265), (187, 443)]"</code>. More info about argparse here: <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a></span>
