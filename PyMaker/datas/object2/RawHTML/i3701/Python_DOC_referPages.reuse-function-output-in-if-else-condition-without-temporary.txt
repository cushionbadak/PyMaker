<div class="post-text" itemprop="text">
<p>Hi and thanks for checking, I am programming in Python and have a simple question to which I did not find an answer so far.
I have a function output, which I need to use multiple times in an if-else statement.</p>
<p>Here an example code:</p>
<pre><code>result = fooB(fooA()) if fooA()==*someComparison* else fooA()
</code></pre>
<p>Is there an elegant way to use such a function output multiple times without calling the function multiple times (computationally expensive) or having to temporarily save the output in a previous line?</p>
</div>
<div class="post-text" itemprop="text">
<p>As of yet, what you want is not possible because the python ternary operator only allows expressions and not statements. If you are curious about the difference I would recommend reading <a href="https://stackoverflow.com/a/29456463/962190">this amazing answer on the topic</a>. But the important part for this question is that what you are asking for is an assignment (i.e. something like <code>tmp = fooA()</code>, as you correctly noted yourself), which is a statement.</p>
<p>Luckily, other people like you (and me) would appreciate the option to share temporary results within a single block, expression, or statement, which is the goal of <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572</a>, due for python3.8 in late 2019. Given the PEP gets accepted.</p>
<p>You can try it already by compiling <a href="https://github.com/Rosuav/cpython/tree/assignment-expressions" rel="nofollow noreferrer">the POC</a> from source. This is what it would look like:</p>
<pre><code>&gt;&gt;&gt; my_func = lambda: 'foo'
&gt;&gt;&gt; tmp + 'bar' if (tmp := my_func()) == 'foo' else tmp
foobar
&gt;&gt;&gt; tmp + 'bar' if (tmp := my_func()) == 'baz' else tmp
foo
</code></pre>
<p>Which is imo prettier and more straight forward than what you currently have to do with temporary variables:</p>
<pre><code>&gt;&gt;&gt; tmp = my_func()   # store the temp var
&gt;&gt;&gt; if tmp == 'foo':  # the test
...    tmp += 'bar'   # the optional change
&gt;&gt;&gt; tmp               # printing/reassigning the temp var
foobar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd just assign the value to a variable on a previous line, if it would be the same from all three calls.</p>
<p>As Hearner already wrote in the comments, your example is slightly confusing since you're not assigning the value of the ternary to anything, implying that <code>fooB(x)</code> is some function with side effects that you want to call, but not assign to a variable. In that case using the ternary operator isn't very pretty, I think.</p>
<p>In the case that <code>fooB(fooA())</code> returns some value you want to assign if the comparison is true, or else assign <code>fooA()</code>, then </p>
<pre><code>a = fooA()
b = fooB(a) if a == bar else a
</code></pre>
<p>is surely the way to go and not particularly inelegant.</p>
<p>In the case that <code>fooB</code> is some function with side effects which you only want to call if the comparison is true, you could write e.g.</p>
<pre><code>a = fooA()
a == bar and fooB(a)
</code></pre>
<p>but not everyone likes that idiom so</p>
<pre><code>a = fooA()
if a == bar:
    fooB(a)
</code></pre>
<p>might be preferrableâ€¦</p>
</div>
<div class="post-text" itemprop="text">
<p>If <code>fooA()</code> depends only on it's arguments, you could use memoization, but you'll still have the overhead of calling the function thrice (and the overhead of looking up the memo cache of course), so the answer is no, the only sensible solution here is definitly to store the result of the first call in an intermediate variable.</p>
</div>
<span class="comment-copy">is <code>a = fooA()</code> not elegant enough?</span>
<span class="comment-copy">Is it ternary conditional operator you are looking for ? I don't understand you want to execute <code>fooB(fooA())</code> if the comparaison is true, else execute <code>fooA()</code> only ?</span>
<span class="comment-copy">Keep it simple and readable: <code>a = fooA(); if a == *some*: a = fooB(a)</code></span>
<span class="comment-copy">@Hearner: correct, this is what I want to do and yes I want to use ternary conditional operator. Actually what I could do is  <code>[fooB(val) if val ==*someComparison* else val for val in [fooA()]][0]</code> but that looks quite ugly to me</span>
<span class="comment-copy">If <code>lambda</code> becomes "too small" for what you're trying to do within it, then yes, write a <code>def</code> function instead.</span>
<span class="comment-copy">Nitpick: the ternary operator doesn't "only allow" expressions, it <i>is</i> an expression, called the <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a>. It can be used in other expressions and statements.</span>
<span class="comment-copy">what I meant was that you can only use expressions within a conditional expression (for both condition and consequences), since OP asked for something that, today, only exists as a statement. Does your nit apply to that still?</span>
<span class="comment-copy">I didn't want to use the term conditional expression because I use the word <code>expression</code> a lot already, and mean something very specific with it.</span>
<span class="comment-copy">Actually I think I misunderstood what you meant, sorry. Yes, you're right, a conditional expression only allows expressions (because it is itself an expression).</span>
<span class="comment-copy">You should at least propose an alternative working solution rather than suggesting people to compile a specific Python branch and enjoy a feature not even yet accepted... <code>result = fooA(); if result == bar: result = fooB(result)</code> looks fine to me.</span>
