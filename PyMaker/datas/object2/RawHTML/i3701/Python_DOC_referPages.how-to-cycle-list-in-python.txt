<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/464864/how-to-get-all-possible-combinations-of-a-list-s-elements">How to get all possible combinations of a listâ€™s elements?</a>
<span class="question-originals-answer-count">
                    24 answers
                </span>
</li>
</ul>
</div>
<p>Suppose I begin with the following list <code>[a,b,c]</code>, and that I from this list want to create the following list <code>[[a,b,c], [c,a,b], [b,c,a]]</code>which contains all the cycles of the original list. How can I do that in the most efficient way possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>with <code>list comprehension</code> or you want something special ? </p>
<pre><code>lst = ['a','b','c']

n_lst = [lst[x:] + lst[:x] for x in range(len(lst))]
print(n_lst)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['a', 'b', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b']]
</code></pre>
<p>Something special for all peremutations</p>
<pre><code>import itertools
list(itertools.permutations(lst))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[
  ('a', 'b', 'c'), 
  ('a', 'c', 'b'), 
  ('b', 'a', 'c'), 
  ('b', 'c', 'a'), 
  ('c', 'a', 'b'), 
  ('c', 'b', 'a')
]
</code></pre>
<p>Also i check the time of execution of a <code>list comprehension</code> and of build-in function <code>rotate</code> from <code>collections.deque</code> object from @jpp answer.</p>
<pre><code>lst = list(range(10000))

# list comprehension time
1.923051118850708

# rotate from collections.deque time
1.6390318870544434
</code></pre>
<p><a href="https://docs.python.org/2/library/collections.html#deque-objects" rel="nofollow noreferrer">rotate</a> is faster</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a> and its method <code>rotate</code>:</p>
<pre><code>from collections import deque

A = deque(['a', 'b', 'c'])

res = []
for i in range(len(A)):
    A.rotate()
    res.append(list(A))

print(res)

[['c', 'a', 'b'],
 ['b', 'c', 'a'],
 ['a', 'b', 'c']]
</code></pre>
</div>
<span class="comment-copy">you try something ?</span>
<span class="comment-copy">I could define a function that rotates a list ` def rotate(l, n):     return l[n:] + l[:n]` but to me it seem like there should be a more efficient way of doing this.</span>
<span class="comment-copy">Are you just looking for permutations of a list? Cycling typically refers to something else.</span>
