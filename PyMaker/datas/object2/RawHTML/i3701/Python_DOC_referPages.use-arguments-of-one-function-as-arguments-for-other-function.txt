<div class="post-text" itemprop="text">
<p>Suppose I have the following function</p>
<pre><code>def f(x,y,**kwargs):
    if 'z' in kwargs:
        z = kwargs['z']
    else:
        z = 0
    print(x + y + z)
</code></pre>
<p>which takes two arguments and an optional keyword argument. I now want to get a function g that works just as f but for which the value of z is predetermined. Hence, I could do the following</p>
<pre><code>def g(x,y):
    z = 3 
    f(x,y, z = 3)
</code></pre>
<p>But what can I do if I do not know the number of non-keyword arguments that f takes. I can get the list of these arguments by</p>
<pre><code>args = inspect.getargspec(f)[0]
</code></pre>
<p>But, if I now define g as</p>
<pre><code>g(args):
    z = 3
    f(args, z=z)
</code></pre>
<p>this of course does not work as only one mandatory argument is passed to f. How do I get around this? That is, if I have a function that takes keyword arguments, how do I define a second function exactly the same expect that the keyword arguments take predeterminde values?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a few options here:</p>
<ol>
<li><p>Define <code>g</code> with <a href="https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">varargs</a>:</p>
<pre><code>def g(*args):
    return f(*args, z=3)
</code></pre>
<p>Or, if you need keyword arguments as well:</p>
<pre><code>def g(*args, **kwargs):
    kwargs['z'] = 3
    return f(*args, **kwargs)
</code></pre></li>
<li><p>Use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>:</p>
<pre><code>import functools

g = functools.partial(f, z=3)
</code></pre>
<p>See also this related question: <a href="https://stackoverflow.com/questions/277922/python-argument-binders">Python Argument Binders</a>.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>functools.partial</code> to achieve this</p>
<pre><code>import functools
f = functools.partial(f, z=2)

# the following example is the usage of partial function f
x = f(1, 2)
y = f(1, 2, k=3)
z = f(1, 2, z=4)
</code></pre>
</div>
<span class="comment-copy">if you add a <code>*</code> before <code>args</code> in <code>f</code>, such as <code>f(*args, z=z)</code>, it should work?</span>
<span class="comment-copy">Thanks for your answer, but it's not quite yet what I was hoping for. In my first example, where the number of arguments were known, the resulting function g had no varargs or keyword arguments.  In your first example however you have varargs and in your second example you have kwargs.</span>
<span class="comment-copy">@lbf_1994 Why do you care whether <code>g</code> has varargs or not? If you pass too few or too many arguments, it'll still throw an error as it should.</span>
