<div class="post-text" itemprop="text">
<p>I want to do some kind of hack for a 4numberic lock in a csv file and find out the lock-code.</p>
<p>I saw a title <a href="https://stackoverflow.com/questions/49024459/hashing-a-csv-file-in-python-with-a-key">here</a> but it was not the same question.</p>
<p>In this project I must import just "hashlib" and "csv".</p>
<p>The program should be just in a def task.</p>
<pre><code>import hashlib
import csv

def hash_password_hack(input_file_name, output_file_name):
    # all the task must be here
</code></pre>
<p>The csv file contains a name and a hashlib-sha256 code like:</p>
<pre><code>jack,99b057c8e3461b97f8d6c461338cf664bc84706b9cc2812daaebf210ea1b9974
huge,85432a9890aa5071733459b423ab2aff9f085f56ddfdb26c8fae0c2a04dce84c
</code></pre>
<p>The code is something between 0000 and 9999. The desired output is the code.</p>
<pre><code>jack,5104
huge,9770
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you only have possible combinations in the range <code>0000</code> to <code>9999</code>, it is possible to create the sha256 hashes for all of the possible combinations. These can be stored in a dictionary in the same format as is present in the CSV file you have been given, namely a hex digest. This is done using <code>range()</code> to provide the all of the numbers, and then <code>.format()</code> to convert the number into a string with leading zeros. This can then be encoded into bytes and passed to the hashlib.</p>
<p>Once the dictionary has been created, it is then possible to simply look up each hash directly in the dictionary to get the matching combination. Python's CSV library can be used to help with both reading and writing the CSV files. When reading, this automatically splits the line and returns each entry as a list. For writing the opposite is done, namely you give it a list of items and it will write them with the comma delimiter automatically added between them. You should also specify <a href="https://docs.python.org/3/library/csv.html?highlight=csv%20writer#csv.writer" rel="nofollow noreferrer"><code>newline=''</code></a> for your files.</p>
<pre><code>import hashlib
import csv

def hash_password_hack(input_file_name, output_file_name):
    # Generate all possible combinations
    hash_lookup = {}

    for combination_int in range(10000):
        combination_str = '{:04}'.format(combination_int)
        m = hashlib.sha256(combination_str.encode('ascii'))
        hash_lookup[m.hexdigest()] = combination_str

    with open(input_file_name, newline='') as f_input, open(output_file_name, 'w', newline='') as f_output:
        csv_input = csv.reader(f_input)
        csv_output = csv.writer(f_output)

        for user, hash in csv_input:
            csv_output.writerow([user, hash_lookup[hash]])

hash_password_hack('input.csv', 'output.csv')    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sha256 hashing algorithm is known to be non invertible. That means that there is no direct way to find back the original string from its hash.</p>
<p>But here the entropy of the possible keys is very limited: only 10000 possible values. In that case, the best way is a brute force attack: compare each of the hashes to one the the 10000 possible values. A slight optimization could be to pre-compute the 10000 hashes and only use string comparisons from then.</p>
<p>Pseudo-code:</p>
<pre class="lang-none prettyprint-override"><code>build a list for hashes of byte string from `b'0000'` to `b'9999'`
for each line of the input csv file
    search index of second field in list of hashes
    raise an error of print a warning message if not found
    use it to write into output csv
</code></pre>
<p>What to remember from that:</p>
<p>Whatever the quality of the hashing algorythm, when the entropy is poor the password is week: never use values can could be used in simple dictionary attacks.</p>
</div>
<span class="comment-copy">This sounds like either a homework question, or something malicious.</span>
<span class="comment-copy">Ok, so have you written any code yet?</span>
<span class="comment-copy">yes it is a learning project .</span>
