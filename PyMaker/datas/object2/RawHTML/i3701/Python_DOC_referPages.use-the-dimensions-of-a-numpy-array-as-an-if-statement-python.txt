<div class="post-text" itemprop="text">
<p>I will loop through different numpy arrays. Some will be 2D, some will be 1D. If the assessed array is 1D, I will want to tile it into a 2D array. 
Example:</p>
<pre><code>c = {'a': np.array([1, 2, 3]), 'b' : np.array([[1, 2, 3], [4, 5, 6]])}

for k in c:
    if c[k].shape #is 1D:
        c[k] = np.tile(c[k], (len(c[k]),1))
</code></pre>
<p>I don't know how to run that condition. Any ideas?
I have tried things like</p>
<pre><code>aa = np.array([1, 2, 3])
aa.shape[0]
# 3
aa.shape[1]
# Gives an out of range error
</code></pre>
<p>I guess it would be possible to find out it is a 1D array by finding there isn't a second dimension. But I don't know how to code this in an if-statement.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>NumPy arrays have an attribute called <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ndim.html" rel="nofollow noreferrer"><code>ndim</code></a>, which represents exactly what you think it does: the number of the array's dimensions. So, you can do this:</p>
<pre><code>if c[k].ndim == 1:
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to check how many elements <code>array.shape</code> has. So you can check for 1D array by running the following</p>
<pre><code>if len(c[k].shape) == 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do </p>
<pre><code>if len(aa.shape)==1:
   # something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer">dir</a> has always helped me, esp when dealing with not so well documented interfaces. Unlike <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.ndarray.html#array-attributes" rel="nofollow noreferrer"><code>ndarray</code>.</a></p>
<p><code>dir(np.array([]))</code></p>
<p><code>['T', '__abs__', '__add__', '__and__', '__array__', '__array_finalize__', '__array_interface__', '__array_prepare__', '__array_priority__', '__array_struct__', '__array_wrap__', '__class__', '__complex__', '__contains__', '__copy__', '__deepcopy__', '__delattr__', '__delitem__', '__delslice__', '__div__', '__divmod__', '__doc__', '__eq__', '__float__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__hex__', '__iadd__', '__iand__', '__idiv__', '__ifloordiv__', '__ilshift__', '__imod__', '__imul__', '__index__', '__init__', '__int__', '__invert__', '__ior__', '__ipow__', '__irshift__', '__isub__', '__iter__', '__itruediv__', '__ixor__', '__le__', '__len__', '__long__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__setitem__', '__setslice__', '__setstate__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__xor__', 'all', 'any', 'argmax', 'argmin', 'argpartition', 'argsort', 'astype', 'base', 'byteswap', 'choose', 'clip', 'compress', 'conj', 'conjugate', 'copy', 'ctypes', 'cumprod', 'cumsum', 'data', 'diagonal', 'dot', 'dtype', 'dump', 'dumps', 'fill', 'flags', 'flat', 'flatten', 'getfield', 'imag', 'item', 'itemset', 'itemsize', 'max', 'mean', 'min', 'nbytes', 'ndim', 'newbyteorder', 'nonzero', 'partition', 'prod', 'ptp', 'put', 'ravel', 'real', 'repeat', 'reshape', 'resize', 'round', 'searchsorted', 'setfield', 'setflags', 'shape', 'size', 'sort', 'squeeze', 'std', 'strides', 'sum', 'swapaxes', 'take', 'tobytes', 'tofile', 'tolist', 'tostring', 'trace', 'transpose', 'var', 'view']</code></p>
</div>
<span class="comment-copy">This is great and very simple! I am obviously a newbie in python, and although I researched for hours before posting on here, I didn't find anything.  Thanks!</span>
<span class="comment-copy">That is also useful. Thank you!</span>
