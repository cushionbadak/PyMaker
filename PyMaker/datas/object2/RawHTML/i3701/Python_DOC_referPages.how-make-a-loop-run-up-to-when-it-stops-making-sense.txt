<div class="post-text" itemprop="text">
<p>I have a loop inside a program which should be </p>
<pre><code>while number &gt;= lst[count]:
    rank -= 1
    count += 1
</code></pre>
<p>where I would like the while to run until it stops making sense. I've attempted somethings which have not worked (see the end of the post), but the following has worked:</p>
<pre><code>lst = [int(x) for x in input().split()]
number = int(input())
count = 0
rank = 0

def attempt(lst, a):
    try:
        result = lst[a]
    except:
        result = float('inf')
    return result


while number &gt;= attempt(lst, count):
    rank -= 1
    count += 1
print(rank)
</code></pre>
<p>However, I don't think this is very elegant and seems contrived. Is there a more elegant solution (for this case, and also in general for a given condition)?  </p>
<hr/>
<p>Other attempts (which were unsuccessful):</p>
<pre><code>while aliceScores[i] &gt;= lst[count] and count &lt; len(lst):
    rank -= 1
    count += 1
</code></pre>
<p>The above fails because the while tries to run for count = len(lst) and runs an error, since lst[len(lst)] does not exist.</p>
<pre><code>while aliceScores[i] &gt;= lst[count] and count &lt; len(lst)-1:
    rank -= 1
    count += 1
</code></pre>
<p>The above fails because I want to modify the rank if the condition happens also in the case lst[len(lst) - 1], which would not be seem in the above code.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only reason why</p>
<pre><code>while aliceScores[i] &gt;= lst[count] and count &lt; len(lst):
    rank -= 1
    count += 1
</code></pre>
<p>does not work is that you cannot evaluate lst[count] when count is too big, however you can exploit the fact python <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">short-circuits and/or operators</a></p>
<pre><code>while count &lt; len(lst) and aliceScores[i] &gt;= lst[count]:
    rank -= 1
    count += 1
</code></pre>
<p>This way the loop will stop properly either if count is too big, or if the second condition becomes False.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use a <code>for</code> to iterate the list, and an <code>enumerate</code> to count the number of tries.
It would be more pythonic than a <code>while</code> imho.</p>
<pre><code>def get_rank(...):
   for index, lst_number in enumerate(lst):
       if number &lt; lst_attempt:
           return -index
   return -len(lst)
</code></pre>
</div>
<span class="comment-copy">Perfect! Thank you. It is a little strange that "and" is not effectively commutative.</span>
<span class="comment-copy">It's a nearly universal convention for the boolean operators to short-circuit, which is far more useful than commutativity would be.</span>
