<div class="post-text" itemprop="text">
<p>This program is supposed to remove duplicate elements from a list but it doesn't seem to work,</p>
<pre><code> import random
 def func():
    a=random.sample(range(10),7)
    b=random.sample(range(10),6)
    list=a+b
    print(list)
    print(len(list))
    for x in list:
        for y in list:
            if x==y and list.index(x)!=list.index(y):
                list.remove(y)
print(func())
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>[2, 6, 4, 7, 0, 9, 3, 8, 3, 5, 7, 0, 1]
13
None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've used indexing to retrieve elements from a list, </p>
<pre><code>import random
def func():
    a=random.sample(range(10),7)
    b=random.sample(range(10),6)
    list1=a+b
    print(list1)
    print(len(list1))
    for i in range(len(list1)-1):
        for j in range(i+1,len(list1)):
            if list1[i]==list1[j]:
                list1.remove(list1[j])
                break
    return list1            

print(func())
</code></pre>
<p>as others are solving this using set() which is impressive, but i guess you are a beginner like me so i wrote this program from basics just like you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not returning anything from <code>func()</code>, so it defaults to returning <code>None</code>. </p>
<p>In order to return something, use <code>return</code>.</p>
<pre><code> import random
 def func():
     a=random.sample(range(10),7)
     b=random.sample(range(10),6)
     list=a+b
     print(list)
     print(len(list))
     for x in list:
         for y in list:
             if x==y and list.index(x)!=list.index(y):
                 list.remove(y)
     return(list)
 print(func())
</code></pre>
<p>There's also a much simpler way of doing this.</p>
<pre><code>import random


def func():
    a=random.sample(range(10),7)
    b=random.sample(range(10),6)

    random_list = a + b
    print(random_list, len(random_list))

    seen = set()
    nondup_list = [x for x in random_list if not (x in seen or seen.add(x))]

    return(nondup_list)


print(func())
</code></pre>
<p>The <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set</a> can only contain unique elements by definition - therefore, casting to a set removes duplicates. It is, however, unordered by default, so instead of just casting to a set we add members to a new list one by one, checking they're not already in our new list and, if they're not, adding them to our <code>seen</code> set. Credit for that method to <a href="http://www.martinbroadhurst.com/removing-duplicates-from-a-list-while-preserving-order-in-python.html" rel="nofollow noreferrer">Martin Broadhurst</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I'll put that as an answer. but note that you should probably clarify your title.</p>
<p>Firstly, if your main goal is to remove duplicate, your best bet is to cast your <code>list</code> as a <code>set</code> since <code>set</code> don't allow duplicate internally. </p>
<pre><code>a=random.sample(range(10),7)
b=random.sample(range(10),6)
my_list=a+b
print(set(list))
</code></pre>
<p>Also note that you could use that for a better output:</p>
<pre><code>a=random.sample(range(10),7)
b=random.sample(range(10),6)
my_list=a+b
print (','.join(str(v) for v in set(my_list)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Besides for all the other good answers how to get the result you're looking for the logic is flawed.</p>
<p><code>a_list.index(value)</code> will always return the first instance of <code>value</code> inside the list.</p>
<p>in your instance <code>list.index(x) != list.index(y)</code> will never be true since you will always be matching the first occurrence of the value represented by <code>x</code> and <code>y</code>.</p>
<p>Therefore whenever <code>x == y</code> then <code>list.index(x)</code> will always equal <code>list.index(y)</code>.</p>
</div>
<span class="comment-copy">The function does not <code>return</code> anything so there is nothing to <code>print</code>.</span>
<span class="comment-copy">btw Don't use built-in names for your variables. You are using <code>list</code>.</span>
<span class="comment-copy">Please explain ,why always only the first indexes will be compared,there  will be cases when x and y are equal and their indexes are different.</span>
<span class="comment-copy">In this for loop x and y are the actual values in your list not the index. So the first time through the inner loop <code>x = 2</code> and <code>y = 2</code> etc. When you get to the point that x is the first 3 and y is the second 3 you expect to remove 3. However <code>list.index(x)</code> &amp; <code>list.index(y)</code>  are both really <code>list.index(3)</code> this will always return <code>6</code> which is the first index in the list that contains the value <code>3</code>.</span>
<span class="comment-copy">thanks, understood</span>
