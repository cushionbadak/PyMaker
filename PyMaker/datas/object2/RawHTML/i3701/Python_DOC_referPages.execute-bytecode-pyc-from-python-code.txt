<div class="post-text" itemprop="text">
<p>I have a bytecode document that declares functions and a logo. I also have a .py file where I call the bytecode to output the logo and strings in the functions. How do I go about actually executing the bytecode? I was able to dissemble it and see the assembly code. How can I actually run it?</p>
<p>question.py</p>
<pre><code>import dis
import logo
def work_here():
    # execute the bytecode

def main():
    work_here()

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try something like:</p>
<pre><code>import dis

code = 'some byte code'

b_code = dis.Bytecode(code)

exec(b.codeobj)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To import a <code>.pyc</code> file, you just do the same thing you do with a <code>.py</code> file: <code>import spam</code> will find an appropriately-placed <code>spam.pyc</code> (or rather, something like <code>__pycache__/spam.cpython-36.pyc</code>) just as it will find an appropriately-placed <code>spam.py</code>. Its top-level code gets run, any functions and classes get defined so you can call them, etc., exactly the same as with a <code>.py</code> file; the only difference is that there isn't source text to show for things like tracebacks or debugger stepping.</p>
<hr/>
<p>If you want to programmatically import a <code>.pyc</code> file by explicit path, or execute one without importing it, you again do the same thing you do with a <code>.py</code> file.</p>
<p>Look at the <a href="https://docs.python.org/3/library/importlib.html#examples" rel="nofollow noreferrer">Examples</a> in <code>importlib</code>. For example:</p>
<pre><code>path = 'bytecoderepo/myfile.pyc'
spec = importlib.util.spec_from_file('myfile', path)
mod = importlib.util.module_from_spec(spec)
spec.loader.exec_module(mod)
</code></pre>
<p>And now, the code in <code>bytecoderepo/myfile.pyc</code> has been executed, and the resulting module is available in the variable <code>mod</code>, but it isn't in <code>sys.modules</code> or stored as a global.</p>
<hr/>
<p>If you actually need to dig into the <code>.pyc</code> format and, e.g., extract the bytecode of some function so you can <code>exec</code> it (or build a function object out of it) without executing the main module code, the details are only documented in the source, and subject to change between Python versions. Start with <a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L485" rel="nofollow noreferrer"><code>importlib</code></a>; being able to (validate and) skip over the header and <code>marshal.loads</code> the body may be as far as you need to learn, but probably not (since ultimately, that's what the module loader already does for you in the sample code above, so if that's not good enough, you need to get deeper into the internals).</p>
</div>
<span class="comment-copy">I'm assuming that "bytecode document" means a <code>.pyc</code> file, and one for your appropriate version of Python. But I don't know what you mean by "executing the bytecode". Do you just want to import the <code>pyc</code> module? Run the module's code without importing it? Extract some function's bytecode without running the module, so you can run that bytecode? â€¦?</span>
<span class="comment-copy">I am actually brand new to python and I was given this assignment. I imported a .pyc file and I am using python 3.4 I am trying to run the bytecode.</span>
<span class="comment-copy">You don't need to "run the bytecode". If you <code>import</code>ed it, the top-level code has already been run. If there are any functions, classes, etc., you just call them, the same way you do for anything else. The fact that you don't have the accompanying <code>.py</code> file that the <code>.pyc</code> file was compiled from doesn't matter, except that things like tracebacks or stepping through in the debugger won't be as nice.</span>
<span class="comment-copy">Cool! That makes sense. I had several functions inside of my bytecode and due to dependencies, they did not output because I had them in incorrect order. I was able to "execute" the bytecode and run those functions. Thanks!</span>
<span class="comment-copy">what is b.codeobj?</span>
