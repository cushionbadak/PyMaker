<div class="post-text" itemprop="text">
<p>I am working with strings like:</p>
<pre><code>"AAAA xsdfe123 BBBB 1jhfhfs CCCC 13 AAAA hjhj 300 DDDD hfh3 BBBB 14 x"
</code></pre>
<p>I need to get all the values after AAAA, BBBB, CCCC and DDDD, please note that AAAA, BBBB, CCCC and DDDD can be in any order and can be repeated multiple times.
or sometimes we may have some of them (not all), e.g., "BBBB 14 x"</p>
<p>The output I am looking for should be in the following format:</p>
<pre><code>{"AAAA":["xsdfe123", "hjhj 300"], "BBBB":["1jhfhfs", "14 x"], "CCCC":["13"], "DDDD":["hfh3"]}
</code></pre>
<p>how can I do this efficiently in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way using <code>collections.defaultdict</code> for an O(n) solution. Since we use <code>str.split</code>, it's necessary to keep track of counts so that we join multiple values which appear after a key.</p>
<p>There is an edge case, where your string does not begin with a key, unaccounted for. I leave that as an exercise.</p>
<pre><code>from collections import defaultdict

s = 'AAAA xsdfe123 BBBB 1jhfhfs CCCC 13 AAAA hjhj 300 DDDD hfh3 BBBB 14 x'

d = defaultdict(list)

valid_keys = {'AAAA', 'BBBB', 'CCCC', 'DDDD'}

for item in s.split():
    if item in valid_keys:
        count = 0
        key = item
    else:
        count += 1
        if count == 1:
            d[key].append(item)
        else:
            d[key][-1] = '{0} {1}'.format(d[key][-1], item)

defaultdict(list,
            {'AAAA': ['xsdfe123', 'hjhj 300'],
             'BBBB': ['1jhfhfs', '14 x'],
             'CCCC': ['13'],
             'DDDD': ['hfh3']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can do this with a regular expression match (using a lookahead to tell us where to stop) and a <code>defaultdict</code> to store the data in:</p>
<pre><code>import collections
import re

text = "AAAA xsdfe123 BBBB 1jhfhfs CCCC 13 AAAA hjhj 300 DDDD hfh3 BBBB 14 x"

pattern = "(AAAA|BBBB|CCCC|DDDD) (.*?)(?:$|(?= AAAA| BBBB| CCCC| DDDD))"

results = collections.defaultdict(list)
for abcd, following_text in re.findall(pattern, text):
    results[abcd].append(following_text)
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; results
defaultdict(list,
            {'AAAA': ['xsdfe123', 'hjhj 300'],
             'BBBB': ['1jhfhfs', '14 x'],
             'CCCC': ['13'],
             'DDDD': ['hfh3']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>import itertools
import re
s = "AAAA xsdfe123 BBBBjhfhfs CCCC 13 AAAA hjhj 300 DDDD hfh3 BBBB 14 x"
headers = ['AAAA', 'BBBB', 'CCCC', 'DDDD']
new_s = re.findall('{}|\w+'.format('|'.join(headers)), s)
new_s = [list(b) for a, b in itertools.groupby(new_s, key=lambda x:x in headers)]
grouped_s = [new_s[i]+new_s[i+1] for i in range(0, len(new_s), 2)]
final_result = {a:[' '.join(i[1:]) for i in b] for a, b in itertools.groupby(sorted(grouped_s, key=lambda x:x[0]), key=lambda x:x[0])}
</code></pre>
<p>Output:</p>
<pre><code>{'AAAA': ['xsdfe123', 'hjhj 300'], 'BBBB': ['jhfhfs', '14 x'], 'CCCC': ['13'], 'DDDD': ['hfh3']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my pretty basic way to do this:</p>
<pre><code>import re

my_string = "AAAA xsdfe123 BBBB 1jhfhfs CCCC 13 AAAA hjhj 300 DDDD hfh3 BBBB 14 x"

my_dict = {}
my_list = re.findall("[A-Z]+[^A-Z]+", my_string)
for item in my_list:
    item = item.strip()
    key = re.sub(" .*", "", item)
    value = re.sub("^[A-Z]+\s+", "", item)
    if key in my_dict:
        my_dict[key] = my_dict[key] + [value]
    else:
        my_dict[key] = [value]

print(my_dict)
</code></pre>
<p>result:</p>
<pre><code>{'AAAA': ['xsdfe123', 'hjhj 300'], 'BBBB': ['1jhfhfs', '14 x'], 'CCCC': ['13'], 'DDDD': ['hfh3']}
</code></pre>
<p>I'm simply chopping up the string sort of using any A-Z as the delimiters as given in the sample data.  Then assign those as keys and values for a dictionary.  There are lots of clever ways to do this, I'm just trying to keep it simple and easy to read.</p>
</div>
<span class="comment-copy">I edited the question, lets assume they are space-separated</span>
<span class="comment-copy">What have you tried so far ? Show examples of your code.</span>
<span class="comment-copy">thanks, if I want to get set of values instead of list, what should I do?</span>
<span class="comment-copy">should we initialize count  before for loop? what about variable key?</span>
<span class="comment-copy">"Readability counts."</span>
<span class="comment-copy">thanks but i'm getting  SyntaxError on _, *c SyntaxError: invalid syntax</span>
<span class="comment-copy">@Alex Please see my recent edit. That is because you are using Python2, while list unpacking during iteration is only valid in Python3.</span>
<span class="comment-copy">In the general case, you'd have to <a href="https://docs.python.org/3/library/re.html#re.escape" rel="nofollow noreferrer"><code>re.escape</code></a> the headers.</span>
<span class="comment-copy">thanks for your edit now I'm getting SyntaxError in this line new_s = re.findall(f'{"|".join(headers)}|\w+', s)</span>
<span class="comment-copy">I don't think it's a good idea to rely on the keys being all-uppercase and everything else being all-lowercase...</span>
<span class="comment-copy">Normally I would agree, but in his example that's how he's chopping them up.  I would hope he would put in <code>2342 ffff</code> if that were possible for a key value pair</span>
