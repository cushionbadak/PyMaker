<div class="post-text" itemprop="text">
<p>I was <a href="http://diveintopython.net/power_of_introspection/getattr.html">reading about the <code>getattr()</code> function</a>. The problem is that I still can't grasp the idea of its usage. The only thing I understand about <code>getattr()</code> is that <code>getattr(li, "pop")</code> is the same as calling <code>li.pop</code>.</p>
<p>I didn't understand when the book mentioned how you use it to get a reference to a function without knowing its name until run-time. Maybe this is me being a noob in programming, in general. Could anyone shed some light to the subject? When and how do I use this exactly?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can view a full example here:</p>
<ul>
<li><a href="https://linux.die.net/diveintopython/html/power_of_introspection/index.html" rel="nofollow noreferrer">https://linux.die.net/diveintopython/html/power_of_introspection/index.html</a></li>
</ul>
<p>Introspection can be used for different purpose, the one presented in 'Dive Into Python' is simply a way to add functionality (plug-in) dynamically in your application.</p>
<p>By <strong>dynamically</strong> I mean without doing modification in the core application to add a new feature.</p>
<p>Taking the 'Dive Into Python' example - <em>a simple app to extract attribute from file of different file</em> - you can add the handling of a new file format without doing modification to the original application.</p>
<p><em>I recommend that you finish the book.  As you read, everything will become increasingly clear.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Objects in Python can have attributes -- data attributes and functions to work with those (methods). Actually, every object has built-in attributes.</p>
<p>For example you have an object <code>person</code>, that has several attributes: <code>name</code>, <code>gender</code>, etc.</p>
<p>You access these attributes (be it methods or data objects) usually writing: <code>person.name</code>, <code>person.gender</code>, <code>person.the_method()</code>, etc.</p>
<p>But what if you don't know the attribute's name at the time you write the program? For example you have attribute's name stored in a variable called <code>attr_name</code>.</p>
<p>if</p>
<pre><code>attr_name = 'gender'
</code></pre>
<p>then, instead of writing</p>
<pre><code>gender = person.gender
</code></pre>
<p>you can write</p>
<pre><code>gender = getattr(person, attr_name)
</code></pre>
<p>Some practice:</p>
<pre><code>Python 3.4.0 (default, Apr 11 2014, 13:05:11)

&gt;&gt;&gt; class Person():
...     name = 'Victor'
...     def say(self, what):
...         print(self.name, what)
... 
&gt;&gt;&gt; getattr(Person, 'name')
'Victor'
&gt;&gt;&gt; attr_name = 'name'
&gt;&gt;&gt; person = Person()
&gt;&gt;&gt; getattr(person, attr_name)
'Victor'
&gt;&gt;&gt; getattr(person, 'say')('Hello')
Victor Hello
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#getattr" rel="noreferrer"><code>getattr</code></a> will raise <code>AttributeError</code> if attribute with the given name does not exist in the object:</p>
<pre><code>&gt;&gt;&gt; getattr(person, 'age')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Person' object has no attribute 'age'
</code></pre>
<p>But you can pass a default value as the third argument, which will be returned if such attribute does not exist:</p>
<pre><code>&gt;&gt;&gt; getattr(person, 'age', 0)
0
</code></pre>
<p>You can use <code>getattr</code> along with <a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir</code></a> to iterate over all attribute names and get their values:</p>
<pre><code>&gt;&gt;&gt; dir(1000)
['__abs__', '__add__', ..., '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']

&gt;&gt;&gt; obj = 1000
&gt;&gt;&gt; for attr_name in dir(obj):
...     attr_value = getattr(obj, attr_name)
...     print(attr_name, attr_value, callable(attr_value))
... 
__abs__ &lt;method-wrapper '__abs__' of int object at 0x7f4e927c2f90&gt; True
...
bit_length &lt;built-in method bit_length of int object at 0x7f4e927c2f90&gt; True
...

&gt;&gt;&gt; getattr(1000, 'bit_length')()
10
</code></pre>
<p>A practical use for this would be to find all methods whose names start with <code>test</code> and <a href="https://docs.python.org/3/library/unittest.html#organizing-test-code" rel="noreferrer">call them</a>.</p>
<p>Similar to <a href="https://docs.python.org/3/library/functions.html#getattr" rel="noreferrer"><code>getattr</code></a> there is <a href="https://docs.python.org/3/library/functions.html#setattr" rel="noreferrer"><code>setattr</code></a> which allows you to set an attribute of an object having its name:</p>
<pre><code>&gt;&gt;&gt; setattr(person, 'name', 'Andrew')
&gt;&gt;&gt; person.name  # accessing instance attribute
'Andrew'
&gt;&gt;&gt; Person.name  # accessing class attribute
'Victor'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me, getattr is easiest to explain this way:</p>
<p><strong>It allows you to call methods based on the contents of a string instead of typing the method name.</strong></p>
<p>For example, you cannot do this:</p>
<pre><code>obj = MyObject()
for x in ['foo', 'bar']:
    obj.x()
</code></pre>
<p>because x is not of the type "builtin", but "str". However, you CAN do this:</p>
<pre><code>obj = MyObject()
for x in ['foo', 'bar']:
    getattr(obj, x)()
</code></pre>
<p>It allows you to dynamically connect with objects based on your input. I've found it useful when dealing with custom objects and modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>A pretty common use case for <code>getattr</code> is mapping data to functions.  </p>
<p>For instance, in a web framework like Django or Pylons, <code>getattr</code> makes it straightforward to map a web request's URL to the function that's going to handle it.  If you look under the hood of Pylons's routing, for instance, you'll see that (by default, at least) it chops up a request's URL, like:</p>
<pre><code>http://www.example.com/customers/list
</code></pre>
<p>into "customers" and "list".  Then it searches for a controller class named <code>CustomerController</code>.  Assuming it finds the class, it creates an instance of the class and then uses <code>getattr</code> to get its <code>list</code> method.  It then calls that method, passing it the request as an argument.</p>
<p>Once you grasp this idea, it becomes really easy to extend the functionality of a web application:  just add new methods to the controller classes, and then create links in your pages that use the appropriate URLs for those methods.  All of this is made possible by <code>getattr</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick and dirty example of how a class could fire different versions of a save method depending on which operating system it's being executed on using <code>getattr()</code>.</p>
<pre><code>import os

class Log(object):
    def __init__(self):
        self.os = os.name
    def __getattr__(self, name):
        """ look for a 'save' attribute, or just 
          return whatever attribute was specified """
        if name == 'save':
            try:
                # try to dynamically return a save 
                # method appropriate for the user's system
                return getattr(self, self.os)
            except:
                # bail and try to return 
                # a default save method
                return getattr(self, '_save')
        else:
            return getattr(self, name)

    # each of these methods could have save logic specific to 
    # the system on which the script is executed
    def posix(self): print 'saving on a posix machine'
    def nt(self): print 'saving on an nt machine'
    def os2(self): print 'saving on an os2 machine'
    def ce(self): print 'saving on a ce machine'
    def java(self): print 'saving on a java machine'
    def riscos(self): print 'saving on a riscos machine'
    def _save(self): print 'saving on an unknown operating system'

    def which_os(self): print os.name
</code></pre>
<p>Now let's use this class in an example:</p>
<pre><code>logger = Log()

# Now you can do one of two things:
save_func = logger.save
# and execute it, or pass it along 
# somewhere else as 1st class:
save_func()

# or you can just call it directly:
logger.save()

# other attributes will hit the else 
# statement and still work as expected
logger.which_os()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other than all the amazing answers here, there is a way to use <code>getattr</code> to save copious lines of code and keeping it snug. This thought came following the dreadful representation of code that sometimes might be a necessity.</p>
<p><strong>Scenario</strong></p>
<p>Suppose your directory structure is as follows:</p>
<pre><code>- superheroes.py
- properties.py
</code></pre>
<p>And, you have functions for getting information about <code>Thor</code>, <code>Iron Man</code>, <code>Doctor Strange</code> in <code>superheroes.py</code>. You very smartly write down the properties of all of them in <code>properties.py</code> in a compact <code>dict</code> and then access them.</p>
<p><strong><code>properties.py</code></strong></p>
<pre><code>thor = {
    'about': 'Asgardian god of thunder',
    'weapon': 'Mjolnir',
    'powers': ['invulnerability', 'keen senses', 'vortex breath'], # and many more
}
iron_man = {
    'about': 'A wealthy American business magnate, playboy, and ingenious scientist',
    'weapon': 'Armor',
    'powers': ['intellect', 'armor suit', 'interface with wireless connections', 'money'],
}
doctor_strange = {
    'about': ' primary protector of Earth against magical and mystical threats',
    'weapon': 'Magic',
    'powers': ['magic', 'intellect', 'martial arts'],
}
</code></pre>
<p>Now, let's say you want to return capabilities of each of them on demand in <code>superheroes.py</code>. So, there are functions like</p>
<pre><code>from .properties import thor, iron_man, doctor_strange


def get_thor_weapon():
    return thor['weapon']


def get_iron_man_bio():
    return iron_man['about']


def get_thor_powers():
    return thor['powers']
</code></pre>
<p>...and more functions returning different values based on the keys and superhero.</p>
<p>With the help of <code>getattr</code>, you could do something like:</p>
<pre><code>from . import properties


def get_superhero_weapon(hero):
    superhero = getattr(properties, hero)
    return superhero['weapon']


def get_superhero_powers(hero):
    superhero = getattr(properties, hero)
    return superhero['powers']
</code></pre>
<p>You considerably reduced the number of lines of code, functions and repetition!</p>
<p>Oh and of course, if you have bad names like <code>properties_of_thor</code> for variables , they can be made and accessed by simply doing</p>
<pre><code>def get_superhero_weapon(hero):
    superhero = 'properties_of_{}'.format(hero)
    all_properties = getattr(properties, superhero)
    return all_properties['weapon']
</code></pre>
<p>NOTE: For this particular problem, there can be smarter ways to deal with the situation, but the idea is to give an insight about using <code>getattr</code> in right places to write cleaner code.</p>
</div>
<div class="post-text" itemprop="text">
<p>I sometimes use <code>getattr(..)</code> to lazily initialise attributes of secondary importance just before they are used in the code. </p>
<p>Compare the following:</p>
<pre><code>class Graph(object):
    def __init__(self):
        self.n_calls_to_plot = 0

    #...
    #A lot of code here
    #...

    def plot(self):
        self.n_calls_to_plot += 1
</code></pre>
<p>To this:</p>
<pre><code>class Graph(object):
    def plot(self):
        self.n_calls_to_plot = 1 + getattr(self, "n_calls_to_plot", 0)
</code></pre>
<p>The advantage of the second way is that <code>n_calls_to_plot</code> only appears around the place in the code where it is used. This is good for readability, because (1) you can immediately see what value it starts with when reading how it's used, (2) it doesn't introduce a distraction into the <code>__init__(..)</code> method, which ideally should be about the conceptual state of the class, rather than some utility counter that is only used by one of the function's methods for technical reasons, such as optimisation, and has nothing to do with the meaning of the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quite frequently when I am creating an XML file from data stored in a class I would frequently receive errors if the attribute didn't exist or was of type <code>None</code>.  In this case, my issue wasn't not knowing what the attribute name was, as stated in your question, but rather was data ever stored in that attribute.</p>
<pre><code>class Pet:
    def __init__(self):
        self.hair = None
        self.color = None
</code></pre>
<p>If I used <code>hasattr</code> to do this, it would return <code>True</code> even if the attribute value was of type <code>None</code> and this would cause my ElementTree <code>set</code> command to fail.</p>
<pre><code>hasattr(temp, 'hair')
&gt;&gt;True
</code></pre>
<p>If the attribute value was of type <code>None</code>, <code>getattr</code> would also return it which would cause my ElementTree <code>set</code> command to fail.  </p>
<pre><code>c = getattr(temp, 'hair')
type(c)
&gt;&gt; NoneType
</code></pre>
<p>I use the following method to take care of these cases now:</p>
<pre><code>def getRealAttr(class_obj, class_attr, default = ''):
    temp = getattr(class_obj, class_attr, default)
    if temp is None:
        temp = default
    elif type(temp) != str:
        temp = str(temp)
    return temp
</code></pre>
<p>This is when and how I use <code>getattr</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># getattr

class hithere():

    def french(self):
        print 'bonjour'

    def english(self):
        print 'hello'

    def german(self):
        print 'hallo'

    def czech(self):
        print 'ahoj'

    def noidea(self):
        print 'unknown language'


def dispatch(language):
    try:
        getattr(hithere(),language)()
    except:
        getattr(hithere(),'noidea')()
        # note, do better error handling than this

dispatch('french')
dispatch('english')
dispatch('german')
dispatch('czech')
dispatch('spanish')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another use of getattr() in implementing a switch statement in Python. It uses both reflection to get the case type.</p>
<pre><code>import sys

class SwitchStatement(object):
    """ a class to implement switch statement and a way to show how to use gettattr in Pythion"""

    def case_1(self):
        return "value for case_1"

    def case_2(self):
        return "value for case_2"

    def case_3(self):
        return "value for case_3"

    def case_4(self):
        return "value for case_4"

    def case_value(self, case_type=1):
        """This is the main dispatchmethod, that uses gettattr"""
        case_method = 'case_' + str(case_type)
        # fetch the relevant method name
        # Get the method from 'self'. Default to a lambda.
        method = getattr(self, case_method, lambda: "Invalid case type")
        # Call the method as we return it
        return method()

def main(_):
    switch = SwitchStatement()
    print swtich.case_value(_)

if __name__ == '__main__':
    main(int(sys.argv[1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is also clarifying from <a href="https://www.programiz.com/python-programming/methods/built-in/getattr" rel="nofollow noreferrer">https://www.programiz.com/python-programming/methods/built-in/getattr</a> </p>
<pre><code>class Person:
    age = 23
    name = "Adam"

person = Person()
print('The age is:', getattr(person, "age"))
print('The age is:', person.age)
</code></pre>
<p>The age is: 23</p>
<p>The age is: 23</p>
<pre><code>class Person:
    age = 23
    name = "Adam"

person = Person()

# when default value is provided
print('The sex is:', getattr(person, 'sex', 'Male'))

# when no default value is provided
print('The sex is:', getattr(person, 'sex'))
</code></pre>
<p>The sex is: Male</p>
<p>AttributeError: 'Person' object has no attribute 'sex'</p>
</div>
<span class="comment-copy">Which part are you having trouble with? Attributes as strings? First-class functions?</span>
<span class="comment-copy">I think my problem is understanding the concept of getattr(). I still don't understand its purpose.</span>
<span class="comment-copy">@Terence doesn't my answer make things clearer ?</span>
<span class="comment-copy">@Alois, your answer definitely cleared some of my doubts, but I still can't fully understand what getattr() is for.</span>
<span class="comment-copy">@S.Lott, I did. The documentation only had the definition so I was kind of confused about its usage. I understand getattr now after reading more about it though.</span>
<span class="comment-copy">I think I can understand the concept of introspection. What really boggles me is the usage of getattr(). Will I understand it better if I just read ahead?</span>
<span class="comment-copy">Yes for sure, did you read the part I send as link ? you have a really concrete usage of getattr() inside. <a href="http://diveintopython.org/object_oriented_framework/index.html" rel="nofollow noreferrer">diveintopython.org/object_oriented_framework/index.html</a></span>
<span class="comment-copy">I haven't finished reading it yet. Thanks for the tip. I'll accept this as the answer.</span>
<span class="comment-copy">I think the only way to fully understand that is to facing a situation where you must use it, or maintain it. It's how it work for me, but I'm self-educated.</span>
<span class="comment-copy">"Domain for sale!" Here's an archived version of the page: <a href="https://web.archive.org/web/20180901124519/http://www.diveintopython.net/power_of_introspection/index.html" rel="nofollow noreferrer">web.archive.org/web/20180901124519/http://…</a></span>
<span class="comment-copy">So it seems to me that <code>getattr(..)</code> should be used in 2 scenarios: 1. when the attribute name is a value inside of a variable (e.g. <code>getattr(person, some_attr)</code>) and 2. when we need to use the third positional argument for the default value (e.g. <code>getattr(person, 'age', 24)</code>). If I see a scenario like <code>getattr(person, 'age')</code> it seems to me that it is identical to <code>person.age</code> which leads me to think that <code>person.age</code> is more Pythonic. Is that correct?</span>
<span class="comment-copy">@wpcarro yes, correct</span>
<span class="comment-copy">This is a pretty straight forward and precise answer.</span>
<span class="comment-copy">+1 for pointing out "mapping data to functions"</span>
<span class="comment-copy">Could you elaborate more your answer adding a little more description about the solution you provide?</span>
<span class="comment-copy">yes add some explanation other remove your answer</span>
