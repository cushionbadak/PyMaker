<div class="post-text" itemprop="text">
<p>I've written a <code>parse_area</code> function which parses the string <code>'1,500 sqft'</code> into the number <code>1500</code>, like so:</p>
<pre><code>import re
import pytest

def parse_area(string):
    return int(re.sub(',', '', re.search(r'[\d,]+(?= sqft)', string)[0]))

def test_parse_area():
    assert parse_area('1,500 sqft') == 1500


if __name__ == "__main__":
    pytest.main([__file__])
</code></pre>
<p>I was wondering whether it might be possible to write this function more concisely, by not capturing the <code>,</code> elements in the <code>[\d,]</code> character set in the first place. I thought of using a non-capturing group, but according to <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a> the parentheses, etc. have no special meaning inside a character set.</p>
<p>Is this the most concise the function can be?</p>
</div>
<div class="post-text" itemprop="text">
<p>I considered that it might be better to do the parsing in two steps anyways in order to cover the case that no match can be found, in which case I'd like the <code>parse_area</code> function to return <code>None</code> instead of throwing an error. So I finally wrote it like this:</p>
<pre><code>import pytest
import re


def parse_area(string):
    """Parse the string '1,500 sqft' into the integer 1500"""
    m = re.search(r'[\d,]+(?= sqft)', string)
    return int(m[0].replace(',', '')) if m else None

def test_parse_area():
    assert parse_area('1,500 sqft') == 1500

def test_parse_area_null_case():
    assert parse_area('no area here') == None


if __name__ == "__main__":
    pytest.main([__file__])
</code></pre>
<p>and both tests pass. (Note that with the original implementation, the second test would throw a <code>'NoneType' not subscriptable</code> error).</p>
</div>
<span class="comment-copy">Well, using <code>re.sub</code> just to remove the commas instead of using simple string methods (<code>replace</code> or <code>translate</code>) makes it less concise than it could be, but that isn't the part you're asking about…</span>
<span class="comment-copy">More importantly: Does your format explicitly need the lookahead for <code>sqft</code>? If not, do you actually need to capture only the first block of digits-and-commas, ignoring any digits that may come later in the string (so, e.g., you can turn <code>1,500 ft^2</code> into <code>1500</code> instead of <code>15002</code>?), or is that not an issue?</span>
<span class="comment-copy">Actually, come to think of it, I think <code>replace</code> will end up the exact same length, and <code>translate</code> even longer, not shorter. I think it's conceptually simpler, and it might be more efficient to boot, but I was wrong to suggest it as more concise.</span>
<span class="comment-copy">In the end, looks like this is the only answer you'll get. I wouldn't even recommend my own answer because it's pretty dumb to the context.</span>
<span class="comment-copy">Well, this definitely isn't more concise than your original code, but I think it's more readable, and, as you point out, it allows more flexibility in error handling, so… great (self-)answer, but you might want to edit your question to fit better.</span>
<span class="comment-copy">you can make nicer and shorter, but if this is the only place in your code that use re - I would avoid unnecessary import</span>
<span class="comment-copy">@Drako Away with you and your "unnecessary imports". I don't think python is the right language for you. Stick to your assembly languages.</span>
