<div class="post-text" itemprop="text">
<p>Here I have a list</p>
<pre><code>[9,1,2,11,8]
</code></pre>
<p>I need to print the top 3 in this list like,</p>
<pre><code>[9,11,8]
</code></pre>
<p>It is easy to sort and take top values and loop over the same copied list to find the top values in the given order
But I shouldn't use new list for this task.
Is that possible?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def k_largest(iterable, k=3):
    it = iter(iterable)
    result = [next(it) for _ in range(k)] # O(k) space
    r_min = min(result)
    for elem in it:
        if elem &gt; r_min:
            result.remove(r_min)  # O(n*k) time
            result.append(elem)
            r_min = min(result)
    return result
</code></pre>
<p>First value wins in case of tie. If you wanted last value wins instead, simply change the <code>&gt;</code> into <code>&gt;=</code>.</p>
<p>This is a good approach for large data and small selects, i.e. where n &gt;&gt; k with n being the length of input and k being the number selected. 
 In this case, the k term is insignificant so the approach is <em>O(n)</em> time-complexity, favorable to <em>O(n log n)</em> of sorting-based approaches. If k is large, this will no longer be a good solution. You should look at maintaining a sorted result set, bisecting it for insertions, and perhaps using <a href="https://en.wikipedia.org/wiki/Quickselect" rel="nofollow noreferrer">quickselect</a> to find the maxima.</p>
<p>Another option which has simpler code is available using Python stdlib's <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="nofollow noreferrer"><code>heapq.nlargest</code></a>, though it may generally be slower in practice:</p>
<pre><code>import heapq
from operator import itemgetter

def k_largest_heap(iterable, k=3):
    ks = heapq.nlargest(k, enumerate(iterable), key=itemgetter(1))
    return [k for i, k in sorted(ks)]
</code></pre>
<p>I <em>think</em> this is <em>O(n log(k))</em>, although admittedly I'm reaching the edges of my knowledge here.</p>
<p>Some timings with a list of 10,000 integers:</p>
<pre><code>from random import randint
nums =  [randint(1, 10000) for _ in range(10000)]
%timeit k_largest(nums)
# 331 µs ± 4.69 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
%timeit k_largest_heap(nums)
# 1.79 ms ± 27.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
%timeit top_three(nums)
# 1.39 ms ± 16.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
</code></pre>
<p><em>Note:</em> <code>top_three</code> implementation is the solution from user Delirious Lettuce <a href="https://stackoverflow.com/a/50707227/674039">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would modify a <a href="https://en.wikipedia.org/wiki/Selection_sort" rel="nofollow noreferrer">select-sort</a> to capture (n) as MAX instead of just one. and instead of running n2, just go thru the list once.</p>
<p>so [9,1,2,11,8]</p>
<p>you'd initialize with a MAX list [0,0,0]
then loop thru your list plucking things that are bigger than MAX</p>
<ol>
<li>[9,0,0] </li>
<li>[9,1,0] </li>
<li>[9,1,2] </li>
<li>[9,11,2] </li>
<li>[9,11,8]</li>
</ol>
<p>the trickiest part is step 4 where you need to decide to keep 9, and 2 and replace 1 with 11.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also implement a wrapper class for your list. Have private data members (In your case 3) for the largest values in the list. Update these variables upon performing insertion and deletion.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried to create a sample program based on the input and the output you have asked for. I thought of giving a try. Please feel free to optimize or provide feedback. I tried to explain steps in the code itself. Thank you.</p>
<pre><code>package com.test;

import java.util.ArrayList;
import java.util.List;

public class ArrangeList {
    public static void main(String[] args) {
        List&lt;Integer&gt; givenList = new ArrayList&lt;&gt;();
        givenList.add(9);
        givenList.add(1);
        givenList.add(2);
        givenList.add(11);
        givenList.add(8);

        int currentIndex = 0; //gives the current index
        while (givenList.size() != 3) {
            int nextIndex = currentIndex + 1; //gives you the next index 
            int currentValue = givenList.get(currentIndex); //gives you the current value for the current index 
            int nextValue = givenList.get(nextIndex); //gives you the next value for the next index

            if (nextValue &lt; currentValue) { //check if the next value is greater than current value. If true, then remove the next value from the list
                givenList.remove(nextIndex);
            } else {
                currentIndex++; //increment the index if you if the current value is greater than the upcoming value from the list
            }

        }
        System.out.println(givenList); //prints the values stored in the list

    }
}
</code></pre>
<p>The output after execution of the program is: </p>
<pre><code>[9, 11, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT:</p>
<p>I'm curious as to why I'm being downvoted. The solution by <code>@wim</code> willingly ignores the restriction in the original question about "without making a new list". The only response was to temporarily change it to a deque in an odd attempt to get around that restriction. Currently, this is the only answer which adheres to all of OPs requirements (listed below as two separate comments).</p>
<hr/>
<blockquote>
<p>Print largest values of a list in the same order without making a new list</p>
<p>I need to print the top 3 in this list like</p>
</blockquote>
<p>This answer assumes that the number is always three for how many of the top numbers you need to extract, in their original order. If that is the case, this answer seems to be <code>O(n)</code> time and <code>O(1)</code> space.</p>
<pre><code>def top_three(nums):
    if len(nums) &lt;= 3:
        return nums

    a = b = c = float('-inf')
    dex_a = dex_b = dex_c = None
    for i, num in enumerate(nums):
        if num &gt; a and num &gt; b and num &gt; c:
            a, b, c = num, a, b
            dex_a, dex_b, dex_c = i, dex_a, dex_b
        elif num &gt; b and num &gt; c:
            b, c = num, b
            dex_b, dex_c = i, dex_b
        elif num &gt; c:
            c = num
            dex_c = i

    if dex_a &lt; dex_b &lt; dex_c:
        print(a, b, c)
    elif dex_a &lt; dex_c &lt; dex_b:
        print(a, c, b)
    elif dex_b &lt; dex_a &lt; dex_c:
        print(b, a, c)
    elif dex_b &lt; dex_c &lt; dex_a:
        print(b, c, a)
    elif dex_c &lt; dex_a &lt; dex_b:
        print(c, a, b)
    elif dex_c &lt; dex_b &lt; dex_a:
        print(c, b, a)
</code></pre>
<p>Tests:</p>
<pre><code>In[3]: top_three([9, 1, 2, 11, 8])
9 11 8
In[4]: top_three([9, 1, 2, 11, 8, 9])
9 11 9
In[5]: top_three([3, 3, 1, 0, 4, 3, 2, 5])
3 4 5
</code></pre>
</div>
<span class="comment-copy">What is your expected output for input  <code>[9,1,2,11,8,9]</code> ?</span>
<span class="comment-copy">Oops, just noticed the "same order" requirement. Nonetheless, the following might be of interest: <a href="https://stackoverflow.com/questions/4215472/python-take-max-n-elements-from-some-list" title="python take max n elements from some list">stackoverflow.com/questions/4215472/…</a></span>
<span class="comment-copy">Do you mean you do not want any "new list" at all, or just a list of the full length of the original list? You certainly need a small list, since that is what you return. Is using a list of size 3 in your example acceptable?</span>
<span class="comment-copy">@RoryDaulton Acceptable</span>
<span class="comment-copy">If the question was for n instead of 3, it seems like you might be on the right track. Otherwise, wouldn't this be inefficient compared to O(n) time and O(1) space needed to solve this question (if for top 3 only)?</span>
<span class="comment-copy">With <code>n = len(iterable)</code>, I'm assuming n &gt;&gt; k.  This is justified because 1) the OP wants to avoid a full copy of the list (suggesting n is large), and 2) the OP has <a href="https://stackoverflow.com/questions/50705975/print-largest-values-of-a-list-in-the-same-order-without-making-a-new-list/50706822#comment88422244_50705975">commented</a> that allocating for k is acceptable (suggesting k is small).</span>
<span class="comment-copy">OP said a list of size 3 is acceptable, no word on whether that changes. If it doesn't change (example: always 3), it seems like there is an easier way to do solve this.</span>
<span class="comment-copy">@DeliriousLettuce  Even with a fixed k=3, I'm happy with this code as-is.  If you feel there is an easier way, feel free to post your own answer.  More interesting IMO is the generalization to large k, where this is no longer a good approach.</span>
<span class="comment-copy">I like your answer, it's just hard to know when OP won't confirm questions like whether it's always the top three or it could be top n. I posted my naive version.</span>
<span class="comment-copy">"But I shouldn't use new list for this task"</span>
<span class="comment-copy">Since the items need to keep their order, shouldn't your #4 be <code>[9, 2, 11]</code>?</span>
<span class="comment-copy">Bit unclear why this "shouldn't make a new list" restriction is in the OP, but you could achieve the same goal as this answer with 3 scalar variables rather than a list of three elements.  You'd just have a lot more if statements instead of looping through the output list.  This answer would probably be easier to implement if you try to keep the output list sorted.  Otherwise you'd need to find/track the index of the smallest thing in the output list to replace.</span>
<span class="comment-copy">Why a java answer on a question tagged [python]?</span>
<span class="comment-copy"><code>"Print largest values of a list in the same order without making a new list"</code> -&gt; <code>givenList = new ArrayList&lt;&gt;();</code>? Ignoring that you answered in the wrong language, the first thing you did was break the main restriction by making a new list?</span>
<span class="comment-copy">@Delirious Lettuce - That was the initial list to hold data. i did not create a NEW list to store the sorted data... You can get from argument i.e arg but again, you need a list to begin with</span>
<span class="comment-copy">@YogeshGhimire <code>"// prints the values stored in the list"</code> and no word on why you used Java instead of Python...</span>
<span class="comment-copy">@Delirious Lettuce I think you did not see "Here I have a list [9,1,2,11,8] " that author mentioned....</span>
