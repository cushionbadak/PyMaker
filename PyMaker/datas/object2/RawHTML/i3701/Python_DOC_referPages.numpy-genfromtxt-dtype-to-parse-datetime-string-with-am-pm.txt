<div class="post-text" itemprop="text">
<p>I have several data files with thousands of records like this:</p>
<pre><code>4844,05/24/18 07:30:00 AM,75.312,0.428
4845,05/24/18 07:40:00 AM,75.312,0.435
4846,05/24/18 07:50:00 AM,75.312,0.429
</code></pre>
<p>and I'm trying to pull it into NumPy using <code>numpy.genfromtxt()</code> like this:</p>
<pre><code>data = np.genfromtxt(file_name, dtype=[('recordId','i8')
    , ('trn_date','datetime64[s]'), ('temperature','f8'), ('depth','f8')]
    , delimiter=',', skip_header=2)
</code></pre>
<p>Unfortunately, I cannot figure out the correct dtype format tuple for the trn_date field to get these datetime strings to be parsed correctly because they use AM/PM suffixes instead of being in "military time".</p>
<p>Any help would be appreciated.  I've tried to RTFM...</p>
</div>
<div class="post-text" itemprop="text">
<p>You might need to pass in a custom converter leveraging <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.datetime.strptime</code></a> for the dates with the <code>converters=</code> argument, since NumPy datetime parsing <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.datetime.html#string-parsing" rel="nofollow noreferrer">isn't super flexible</a> beyond the ISO 8601 format. </p>
<p>If you look at the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">table of format codes</a> for <code>strptime</code> you can see it can handle AM/PM with the <code>%p</code> directive.</p>
<pre><code>import datetime as dt

def date_parser(d_bytes):
    s = d_bytes.decode('utf-8')
    return np.datetime64(dt.datetime.strptime(s, '%m/%d/%y %I:%M:%S %p'))

data = np.genfromtxt(
    # ... 
    converters={1: date_parser})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The trouble here is that the way numpy.getfromtxt() parses datetimes is in the format: 'YYYY-MM-DDT00:00:00'
e.g. '2018-05-27T01:45:45'
<a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.datetime.html" rel="nofollow noreferrer">See the docs</a></p>
<p>The solution is to re-write the text to this format. There are a number of ways to do this such as making a new file, or maybe using StringIO.</p>
<p>Here is my example of cleaning the text and writing it to a new file:</p>
<pre><code>with open(input_text, 'r') as file_io:
    for line in file_io: 
        split_line = line.split(',')
        split_datetime = split_line[1].split(' ')
        print(split_datetime)
        split_date = split_datetime[0].split('/')
        print(split_date)
        #put the date back in
        fixed_datetime = '20' + split_date[2] \
                          + '-' + split_date[0] \
                          + '-' + split_date[1] \
                          + 'T' + split_datetime[1]

        prepared_text = prepared_text + split_line[0] + ',' \
                                      + fixed_datetime[1] + ',' \
                                      + split_line[2] + ',' \
                                      + split_line[3] 

secondary_file = 'secondary_data_file.txt'

with open(secondary_file, 'w') as sec_file_io:
    sec_file_io.write(prepared_text)
</code></pre>
<p>You can do this different ways. You dtype was right though!</p>
</div>
<span class="comment-copy">Thank you, this is an elegant solution that worked perfectly!</span>
