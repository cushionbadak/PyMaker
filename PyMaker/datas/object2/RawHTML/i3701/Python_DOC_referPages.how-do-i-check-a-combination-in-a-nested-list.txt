<div class="post-text" itemprop="text">
<p>I'm making a noughts and crosses game and I'm looking to see if a combination is valid.</p>
<p>I have a list of winning combinations e.g [0, 1, 2]</p>
<p>How would I check if 'X' is in all three, here's what I got so far:</p>
<pre><code>def draw_grid():
  print("-------------")
  print('|', grid[0], '|', grid[1], '|', grid[2], '|')
  print("-------------")
  print('|', grid[3], '|', grid[4], '|', grid[5], '|')
  print("-------------")
  print('|', grid[6], '|', grid[7], '|', grid[8], '|')
  print("-------------")

Symbol = 'X'

def Checker():
  Winning = [[0, 1, 2]]

  #statement to check...



global grid
grid = ['X', 'X', 'X', 3, 4, 5, 6, 7, 8]

draw_grid()
Checker()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this:</p>
<pre><code>def Checker(g,what):
    """Checks if any index combination inside Winner has all X"""
    Winning = [[0, 1, 2], [0,3,6], ] # you need to add all other 6 wind conditions here
    return any(  all( g[a]==what for a in x) for x in Winning)

win =  ['X', 'X', 'X', 3, 4, 5, 6, 7, 8]
win2 = ['X', 2, 3, 'X', 4, 5, 'X', 7, 8]
loose = ['X', 'X', 'o', 3, 4, 5, 6, 7, 8]

print (win, Checker(win,'X'))
print (win2, Checker(win2,'X'))
print (loose, Checker(loose,'X'))
</code></pre>
<p>Output:</p>
<pre><code>['X', 'X', 'X', 3, 4, 5, 6, 7, 8] True
['X', 2, 3, 'X', 4, 5, 'X', 7, 8] True
['X', 'X', 'o', 3, 4, 5, 6, 7, 8] False
</code></pre>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">all()</a>  checks if the test if valid for <em>all</em> elements of an iterable</li>
<li><a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">any()</a>  checks if <em>any</em> element of an iterable statisfies a condition</li>
</ul>
<hr/>
<p><strong>Example to understand <code>any()</code>/<code>all()</code></strong></p>
<pre><code>t = [2,4,6]

print( all( x % 2 == 0 for x in t) )  # are all elements of t even?
print( any( x // 3 == 2 for x in t) ) # is any element of t divided by 3 == 2 ?
print( any( x % 2 == 1 for x in t) ) # is any element in t odd?
</code></pre>
<p>Output:</p>
<pre><code>True
True
False
</code></pre>
<hr/>
<p>The line</p>
<pre><code>return any(  all( g[a]==what for a in x) for x in Winning)
</code></pre>
<p>simply checks if <em>any</em> element of your <code>Winning</code> (either <code>[0,1,2]</code> or <code>[0,3,6]</code> - 6 more conditions to be added by yourself) has all grid-indexes <code>g[..]</code> (as given in this condition)  with a value given by <code>what</code> - so you can check for <code>X</code> or <code>O</code> - either one might win.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know weather this is what you are wanting, but here's something that might work:</p>
<pre><code>def draw_grid():
  print("-------------")
  print('|', grid[0], '|', grid[1], '|', grid[2], '|')
  print("-------------")
  print('|', grid[3], '|', grid[4], '|', grid[5], '|')
  print("-------------")
  print('|', grid[6], '|', grid[7], '|', grid[8], '|')
  print("-------------")

Symbol = 'X'

def Checker():
  Winning = [[0, 1, 2]]
  if grid[winning[0]] == Symbol and grid[winning[1]] == Symbol and grid[winning[2]] == Symbol:
      return "Match"



global grid
grid = ['X', 'X', 'X', 3, 4, 5, 6, 7, 8]

draw_grid()
Checker()
</code></pre>
<p>Hope this helped.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me suggest an object-oriented solution. Since what you want to implement is a nested list with additional functionality, we can implement a <code>Grid</code> class.</p>
<p>In particular, its method <code>iter_winning_pos</code> will return a generator for all the legal winning positions. It then suffices to pick your favorite way to check <a href="https://stackoverflow.com/q/3844801/5079316">if all elements in a list are identical</a>.</p>
<h3><code>Grid</code> class</h3>
<pre><code>class Grid():
    def __init__(self, n=3):
        self._grid = [[None] * n for _ in range(n)]

    def __getitem__(self, item):
        x, y = item
        return self._grid[x][y]

    def __setitem__(self, key, value):
        x, y = key
        self._grid[x][y] = value

    def __str__(self):
        s = ''
        for row in self._grid:
            s += '-' * (2 * len(self._grid) + 1) + '\n'
            s += ('|{}|\n'.format('|'.join([x if x is not None else ' ' for x in row])))
        s += '-' * (2 * len(self._grid) + 1) + '\n'
        return s

    def iter_winning_pos(self):
        for i in range(len(self._grid)):
            yield [(i, j) for j in range(len(self._grid))]
            yield [(j, i) for j in range(len(self._grid))]

        yield [(i, i) for i in range(len(self._grid))]
        yield [(i, len(self._grid) - 1 - i) for i in range(len(self._grid))]


    def is_winning(self):
        for line in self.iter_winning_pos():
            first = self[line[0]]
            if first is not None and all(self[x] == first for x in line):
                return first
        return None
</code></pre>
<h3>Example</h3>
<pre><code>g = Grid()
print('{} is winning'.format(g.is_winning()))

g[0, 0] = 'X'
g[1, 1] = 'O'
g[0, 1] = 'X'
g[0, 2] = 'X'

print(g)
print('{} is winning'.format(g.is_winning()))
</code></pre>
<h3>Output</h3>
<pre><code>None is winning
-------
|X|X|X|
-------
| |O| |
-------
| | | |
-------

X is winning
</code></pre>
</div>
<span class="comment-copy">I can't help you atm, but it would be easier if you used <code>grid[x][y]</code> instead of the grid number, e.g. grid=[['X','X','X'],[0,0,0],[0,0,0]]</span>
<span class="comment-copy">I had that before but someone recommended using one list rather than looping around nested lists.</span>
<span class="comment-copy">@Ruthless It makes absolutely no difference in python.</span>
<span class="comment-copy">I'll see if I can work something out</span>
<span class="comment-copy">@coldspeed I know what you're trying to say but I just prefer this way.</span>
<span class="comment-copy">Would you mind explaining 'return any(  all( g[a]=="X" for a in x) for x in Winning)'?</span>
<span class="comment-copy">@Ruthless more clear now?</span>
<span class="comment-copy">This doesn't work for diagonals, <a href="https://tio.run/##bVFBboMwELzzilF6CEhW1UCbVJU49Qk9NBLiYIIBq9SObKOQ19O1aUmpalnW7M7s7No@X12nVTZNtWjw2onThzBxyy4dd8lLBFqbzSbkLWQDrq6QqhYjTvqzkoo7qRVlrKwF3qVSwqDjFrzvcaTK4ODzUrXIURQPDDuGtGQgmLE9gTKIjHCDUb5BDF8eoy14med@EjTagFMbjEnAo8fftkkUXSjKgWJ73DLcjozhkeGJYc9wYHguvTD1YwQ6DYoAZ1mAs7DX2opFOR/6X8u7t04PfY1K0ITkz1ANjm7TSuuEoZegjV5be@@7Z4vnbjXA4khRGUVnI5VDHOx@PsUHxCbJLzZd0emaD3e4Cebwr0O2cshmfpq@AA" rel="nofollow noreferrer" title="TIO link">(Try it online link)</a>, like <code>win3 = ['X', 1, 2, 3, 'X', 5, 6, 7, 'X']</code>.</span>
<span class="comment-copy">@Graham - Provide the win condition inside <code>Winning</code> and it will - currently only 2 axis are defined - try to debug the code to see what I mean. <code>Winning = [[0, 1, 2], [0,3,6], [0,4,8],]</code>  .. there are more conditions to be specified - thats not what the question was about so I only added one to the one the OP provided</span>
<span class="comment-copy">Oh, I see. I misread the code as more sophisticated because I didn't understand the any() and all() construction... and it just clicked!</span>
<span class="comment-copy">This does work but as @Patrick Artner says I would have to do it with all 8 solutions. Meaning a lot of extra code. Thanks anyway</span>
<span class="comment-copy">yep, that's why its kinda bad, but I'm bad at python. See Patrick Artner's answer for something better.</span>
