<div class="post-text" itemprop="text">
<p>Lets say I have a list</p>
<pre><code>x = [1,2,3,4,5,6,7,8,9,10]
</code></pre>
<p>And I want to print this list by calling a function. Here is my function to print the list</p>
<pre><code>def print_list(list_received):
        for var in list_received:       
                print var
</code></pre>
<p>And I am calling <code>print_list()</code> like below</p>
<pre><code>print_list(x)
    |      |
 method   arguement
  name
</code></pre>
<p>So above function call looks similar to one we used to do in C/C++.</p>
<p>Now lets say I have a list called <code>my_list</code></p>
<pre><code>my_list = [1,2,3,4,5,6,7,8,9,10]
</code></pre>
<p>And I want to convert <code>my_list</code> to tuple &amp; I will be doing like below</p>
<pre><code>my_tuple = tuple(my_list)
</code></pre>
<p>Now Here this <code>tuple(my_list)</code> is called <strong>typecasting</strong> as I read from here <a href="http://www.pitt.edu/~naraehan/python2/data_types_conversion.html" rel="nofollow noreferrer">http://www.pitt.edu/~naraehan/python2/data_types_conversion.html</a></p>
<p>now above <strong>typecasting</strong> looks completely different from <code>C</code> or <code>C++</code> as in <code>C</code> we used to do</p>
<pre><code>int x = 10;
char ch = (char)x
</code></pre>
<p>My first doubt is what is the rational theory or consideration about changing <code>C</code> looks like  <code>(tuple)my_list</code> to <code>tuple(my_list)</code> ? Answer may be <code>Python</code> is not <code>C</code> but I want to know more.</p>
<p>My second question is how python interpreter will decides whether its a <strong>function call</strong> or <strong>type conversion function</strong> i.e both calling convention of <code>my_print(x)</code> and <code>tuple(my_list)</code> looks similar but actually both are doing different job.  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>my_tuple = tuple(my_list)</code> creates an instance of the class tuple from <code>my_list</code> object. It's not quite what a type casting like <code>(tuple)my_list</code> does in C since a new object is created.</p>
<p><code>my_tuple = tuple(my_list)</code> is closer to the C++ <code>my_tuple = new Tuple(my_list)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why it should be identified as a normal function or type conversion function? It is just a function.</p>
<p>Or as almost everything in python is an object, actually function is also a kind of object which implements <code>__call__</code>.</p>
<p>Further, there isn't a type conversion function in fact. <code>tuple</code> acts as an constructor, it takes an iterable object and return a tuple object. </p>
</div>
<div class="post-text" itemprop="text">
<p>I may answer your second question, Python interpreter works on the basis of scope (local,enclosing,global,default).</p>
<p>for example:</p>
<pre><code>def tuple(l_list):
     print l_list

l_list = [1,2]
tuple(l_list)
</code></pre>
<p>In above case it doesn't do type conversion instead it executes above function. Why because once we started execution it searches for tuple object and does job. If it didn't find then it considers default keyword and converts. In nutshell It is purely on scope of objects</p>
</div>
<span class="comment-copy">but <i>type conversion functions</i> are also <b>functions</b></span>
<span class="comment-copy">Thanks @Ev.Kounis yes <code>tuple()</code> is also builtin.  But can I say here that  I am calling <code>tuple()</code> method in statement <code>tuple(my_list)</code> ?</span>
<span class="comment-copy">There's no difference between a function call and a type conversion function. You call the <code>tuple</code> function. It returns a tuple. End of story.</span>
<span class="comment-copy">But Normally in <code>C</code> explicit typecasting is not consider as function call, isn't it ?  In python <code>int(x)</code> and in C <code>(int)x</code> both works same but convention are different, where <code>x</code> is float variable .</span>
<span class="comment-copy">In python, <code>int(x)</code> calls <code>x.__int__()</code>, which could be <code>int.__int__</code>, <code>float.__int__</code>, <code>numpy.int64.__int_</code> etc. depending on the type of <code>x</code></span>
<span class="comment-copy">Thanks. can you tell me path or source of tuple class implementation or python standard where I can see the implementation.</span>
<span class="comment-copy">This is the <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow noreferrer"><code>tuple</code> documentation</a> and the source is <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c#L657" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">Thank you very much. This is what I needed.</span>
<span class="comment-copy">yes I agree with on <code>tuple</code> being returning tuple object. But internally how it will initialize/convert list into tuple ? by calling some methods like constructor of the class ? correct me if I am wrong ?</span>
<span class="comment-copy">Like Jacques Gaudin says, it does work like a constructor. It can convert not only <code>list</code> but any object which is iterable.</span>
<span class="comment-copy">it does not work "like" a constructor: tuple is a class</span>
<span class="comment-copy">yes @bobrobbob <code>tuple</code> is a class but <code>__init__()</code> method of <code>tuple</code> class will initialize it.</span>
<span class="comment-copy">sorry, i was just being pedantic to avoid misunderstanding. it is not <i>like</i> a constructor, it <i>is</i> a constructor</span>
