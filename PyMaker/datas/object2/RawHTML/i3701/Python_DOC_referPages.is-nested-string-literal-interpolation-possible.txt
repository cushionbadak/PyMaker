<div class="post-text" itemprop="text">
<p>When using <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer">formatted string literal</a>, it is possible to have nested <em>f-strings</em> to some extent.</p>
<pre><code>a = 3
b = 7

res = f"{f'{a*b}'}"

print(res) # '21'
</code></pre>
<p>Although, the same does not work if the inner expression is a variable containing a string.</p>
<pre><code>a = 3
b = 7

expr = 'a*b'

res = f"{f'{expr}'}"

print(res) # 'a*b'
</code></pre>
<p>Is there a way to make this work and to have the second output to be <code>'21'</code> as well? If not, what is the difference between the first and second string that prevents it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it can be helpful to see what is actually happening under the hood when each of these expressions is called.  </p>
<h2><code>f"{f'{a*b}'}"</code></h2>
<pre><code>def om1(a, b):
    return f"{f'{a*b}'}"

dis.dis(om1)
  2           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 BINARY_MULTIPLY
              6 FORMAT_VALUE             0
              8 FORMAT_VALUE             0
             10 RETURN_VALUE
</code></pre>
<p>The outer <em>f-string</em> encounters an expression which it evaluates, and the inner <em>f-string</em> also finds an expression which it evaluates, which results in the call to <code>BINARY_MULTIPLY</code></p>
<h2><code>f"{f'{expr}'}"</code></h2>
<pre><code>def om2(a, b):
    expr = 'a*b'
    return f"{f'{expr}'}"

dis.dis(om2)
  2           0 LOAD_CONST               1 ('a*b')
              2 STORE_FAST               2 (expr)

  3           4 LOAD_FAST                2 (expr)
              6 FORMAT_VALUE             0
              8 FORMAT_VALUE             0
             10 RETURN_VALUE
</code></pre>
<p>Here, the first <em>f-string</em> encounters an expression and evaluates it, and the inner <em>f-string</em>, encounters a string, resulting in the call to <code>LOAD_FAST</code> instead of evaluating the contents of the string as Python code.</p>
<p>Also it is important to note in this second example the missing <code>LOAD_FAST</code> calls to both <code>a</code> and <code>b</code>, which are present in the first example.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a few libraries that have developed functions for evaluating numerical and logical expressions <em>safely</em> ("safe" being the key).</p>
<p>First, the setup - </p>
<pre><code>a = 3
b = 7
op = '*'
</code></pre>
<h3><code>numexpr.evaluate</code></h3>
<pre><code>&gt;&gt;&gt; import numexpr as ne
&gt;&gt;&gt; ne.evaluate(f'{a} {op} {b}')
array(21, dtype=int32)
</code></pre>
<p><a href="http://numexpr.readthedocs.io/en/latest/" rel="nofollow noreferrer"><code>numexpr</code></a> is smart enough to optimise your expressions, and is even faster than numpy in some instances. Install using <code>pip</code>.</p>
<hr/>
<h3><code>pandas.eval</code></h3>
<p>A <em>safe</em> eval from the <a href="https://pandas.pydata.org" rel="nofollow noreferrer">Pandas</a> API similar to <code>ne.evaluate</code>.</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; pd.eval(f'{a} {op} {c}')
12
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's called "string <em>literal</em> interpolation". The string must be a literal, i.e. at the time the compilation takes place compiler will turn the string into a proper executable code. If you already have a string as a value (not as a literal), it's too late for that.</p>
<p>I don't have access to Python that has PEP 498 enabled, so my examples will be in Ruby, which has had this mechanism for a long time. The Ruby syntax for Python's <code>f"...{expr}..."</code> is <code>"...#{expr}..."</code>.</p>
<p>In Ruby, <code>"a#{2 * 3}b"</code> is syntactic sugar for <code>["a", (2 * 3), "b"].join</code> (as in, they produce exactly the same bytecode). If you have the string <code>"2 * 3"</code> already as a value, the compiler can't do anything about it; the only way to turn a string value into a result is to evaluate it.</p>
<p>In the first example, you have a string literal inside a string literal; both are processed by the compiler at compile time: when the compiler sees the outer literal, it compiles it, finds another string literal there, compiles that as well, produces code. As a matter of fact, <code>"a#{"#{2 * 3}"}b"</code> produces exactly the same byte code, again.</p>
<p>The fact that this is done at compile time is also the reason why string literal interpolation will raise a syntax error if the expression inside is malformed, even if the line in question is never executed: <code>if false; "#{1+}"; end</code> will produce a <code>SyntaxError</code>.</p>
<p>The fact that this is done at compile time means strings already in variables are not eligible for this mechanism. In your code, by the time <code>res</code> is evaluated, <code>expr</code> could have been anything; the only way out is <code>evil</code> (or another, safer, evaluator).</p>
</div>
<span class="comment-copy">Just to clarify, you are wondering if you can get the second to output 21?</span>
<span class="comment-copy">Maybe you can put an <code>eval</code> in, i.e. <code>res = f"{f'{eval(expr)}'}"</code></span>
<span class="comment-copy">If anyone posts an answer with eval they are getting downvoted.</span>
<span class="comment-copy">@user3483203 I take you up on that bet and raise you two options</span>
<span class="comment-copy">Somewhat related: <a href="https://stackoverflow.com/q/41215365/8033585">stackoverflow.com/q/41215365/8033585</a></span>
<span class="comment-copy">It is a good idea to display the bytecode. This answer has been really helpful, but would not have been quite sufficient if it was not for the key fact, given in @Amadan answer, that f-string code is generated at compile time, not at runtime and that it <i>does not</i> rely on calling an eval. If I could acceot both answers I would as it is combined that they give the best explanation.</span>
<span class="comment-copy">Wasn't it you on a question 10 minutes ago that took an oath to downvote anything using eval?</span>
<span class="comment-copy">@OlivierMelançon builtin <code>eval</code>, yes. And I still will</span>
<span class="comment-copy">That's fair, I am more interested in knowing <i>why</i> it cannot be done with f-strings if it actually cannot, but your answer is interesting. Why is pandas.eval considered safe?</span>
<span class="comment-copy">@OlivierMelançon Why doesn't it work? I'm not sure, but I can answer the second question. <code>pandas.eval</code> actually has code to parse expressions it receives, and it is strict about the kinds of operations it considers valid and what not. For example, import statements to <code>pd.eval</code> are a strict no-no.</span>
