<div class="post-text" itemprop="text">
<p>Given a list of numbers, create a new list of numbers such that the first and last numbers are added and stored as the first number, the second and second-to-last numbers are stored as the second number, and so on  </p>
<pre><code>num_list = [1,2,3,4,5,6]
num_list2 = [num_list[-1] + num_list[0], num_list[-2] + num_list[1], 
num_list[-3] + num_list[2]]
print(num_list2)
</code></pre>
<p>output is [7,7,7]</p>
<p>I got the correct output this way but I am sure this is not an efficient way to do it. Is there a better way? I also am supposed to check for even and odd length of the list and if its an odd number of integers, add the central integer in the original list to the end of the new list but don't know how I would go about doing this </p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is more efficient, i just simply did a for loop:</p>
<pre><code>num_list2 = []
num_list = [1,2,3,4,5,6]
for i in range(round(len(num_list)/2)):
   num_list2.append(num_list[i]+num_list[-(i+1)])
print(num_list2)
</code></pre>
<p>Output:</p>
<pre><code>[7, 7, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let us using <code>reversed</code></p>
<pre><code>[x + y for x, y in zip(num_list, list(reversed(num_list)))][:len(num_list)//2]
Out[406]: [7, 7, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an inefficient[1], but clear way of doing this:</p>
<pre><code>from itertools import zip_longest  # or izip_longest in Python2

lst = [1,2,3,4,5,6]

chop_index = len(lst) // 2 # (or +1, depending on how you want to handle odd sized lists)

lh, rh = lst[:chop_index], lst[:chop_index-1:-1]

print(lh, rh)  # To see what's going on in the "chopping"

sums = [x + y for (x,y) in zip_longest(lh, rh, fillvalue=0)]

print(sums)
</code></pre>
<p>You could improve it by using <code>islice</code> and <code>reversed</code> iterators, or use index math exclusively.</p>
<p>Output:</p>
<pre>
lst = [1,2,3,4,5,6]   =&gt; [7, 7, 7]

lst = [1,2,3,4,5,6,7] =&gt; [8, 8, 8, 4]
</pre>
<p>[1] This makes two copies of the list parts.  For long lists this is silly, and you shouldn't use this method.  It was mostly written to highlight <code>zip_longest</code>'s fillvalue optional argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> on a generator:</p>
<pre><code>from itertools import islice

num_list = [1,2,3,4,5,6]
generator = (x + y for x, y in zip(num_list, num_list[::-1]))
print(list(islice(generator, len(num_list)//2)))

# [7, 7, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following method, which is compatible with asymmetrical list.</p>
<pre><code>def sum_start_end(list_):
     result = [x + y for x, y in zip(list_, list_[::-1])][:len(list_) // 2]
     if len(list_) % 2 != 0:
         result.append(list_[len(list_) // 2])
     return result
</code></pre>
<p>so for a symmetric list</p>
<pre><code>&gt;&gt;&gt; num_list = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; sum_start_end(num_list)
[7, 7, 7]
</code></pre>
<p>and for asymmetric list</p>
<pre><code>&gt;&gt;&gt; num_list = [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; sum_start_end(num_list)
[8, 8, 8, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's simpler than you imagine.
Just observe your manual attempt and try to infer from it. We can simply do</p>
<pre><code>x = len(num_list)//2 + len(num_list)%2
for i in range(x):
    sumBoth = num_list[i] + num_list[-i-1]
    num_list2.append(sumBoth)
</code></pre>
<p>or with a simpler one-liner</p>
<pre><code>num_list2 = [ num_list[i] + num_list[-i-1] for i in range(len(num_list)//2+len(num_list)%2)]
</code></pre>
<p>This works for even as well as odd lengths because of the <code>len(num_list)%2</code> at the end in the range.</p>
</div>
<span class="comment-copy">Why is the round() needed here?</span>
<span class="comment-copy">@JaneDoe Because if i don't use round here it will trough an error <code>TypeError: 'float' object cannot be interpreted as an integer</code></span>
<span class="comment-copy">@JaneDoe Thanks for accepting my answer, now you got the up vote privilege so can you also please up vote me</span>
<span class="comment-copy">Thanks @U8-Forward for the edits</span>
<span class="comment-copy">Surya Your welcome</span>
