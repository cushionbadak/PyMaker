<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="noreferrer"><code>typing</code> module documentation</a> says that the two code snippets below are equivalent.</p>
<pre class="lang-py prettyprint-override"><code>from typing import NamedTuple

class Employee(NamedTuple):
    name: str
    id: int
</code></pre>
<p>and</p>
<pre class="lang-py prettyprint-override"><code>from collections import namedtuple

Employee = namedtuple('Employee', ['name', 'id'])
</code></pre>
<p>Are they the exact same thing or, if not, what are the differences between the two implementations?</p>
</div>
<div class="post-text" itemprop="text">
<p>The type generated by subclassing <code>typing.NamedTuple</code> is equivalent to a <code>collections.namedtuple</code>, but with <code>__annotations__</code>, <code>_field_types</code> and <code>_field_defaults</code> attributes added. The generated code will behave the same, for all practical purposes, since nothing in Python currently acts on those typing related attributes (your IDE might use them, though).</p>
<p>As a developer, using the <code>typing</code> module for your namedtuples allows a more natural declarative interface:</p>
<ul>
<li>You can easily specify default values for the fields (<strong><em>edit</em></strong>: in Python 3.7, <code>collections.namedtuple</code> <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">got a new <code>defaults</code> keyword</a> so this is no longer an advantage</li></ul></div>
<span class="comment-copy">And since it is a class, you can also pass it defaults, which you cant do from the collections namedtuple I think.</span>
<span class="comment-copy">@dfundako  It was possible with a <code>collections.namedtuple</code>, by subclassing the generated type. But <code>typing.NamedTuple</code> allows an easier interface.</span>
