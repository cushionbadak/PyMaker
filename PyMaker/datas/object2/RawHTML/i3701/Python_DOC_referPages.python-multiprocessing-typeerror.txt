<div class="post-text" itemprop="text">
<p>I am new to multiprocessing and I need your help. </p>
<p>I have four variables that each of them can take up to 4 values (integers or floats) and I stored all of them in a list called <code>par=[A, B, C, D]</code>. (see below)</p>
<p>I have created a list of possible combinations with <code>par = itertools.product(*par)</code> .</p>
<p>Then, I call a function <code>func1</code>, that takes these arguments and some more and calculates stuff. With the results of the <code>func1</code>, I call another function that calculates stuff and then writes to a file.</p>
<p>I want to run these as a whole in parallel with <code>multiprocessing.Pool</code> I thought to embed <code>func1</code> and <code>func2</code> in another function, called <code>func_run</code>, and map this with the list <code>par</code> I created above. </p>
<p>To summarize, my code looks like:</p>
<pre><code>#values that I will use for func1

r   = np.logspace(np.log10(5),np.log10(300),300)
T   = 200*r

#Parameters for the sim
A = [0.1, 0.05, 0.001, 0.005]
B = [0.005, 0.025, 0.05, 0.1]
C = [20, 60, 100, 200]
D = [10, 20, 40, 80]

#Store them in a list
par = [A, B, C, D]

#Create a list with all combinations
par = list(itertools.product(*par))             

def func_run(param):
    for i in range(len(param)):

# Call func1
        values = func1(param[i][0],param[i][1],param[i][2], param[i][3], r, T)

        x = values[0]
        y = values[1]
        # and so on

# Call func2
        results = func2(x,y,...)

        z = results[0]
        w = results[1]
        # and so on

        data_dict = {'result 1': [param[i][0]], 'result 2' : [param[i][1]]}

    df = pd.DataFrame(data=data_dict)
        with open(filename, 'a') as f:
                df.to_csv(f, header=False)

    return
</code></pre>
<p>Then, I call the <code>func_run</code> with <code>multiprocessing</code>.</p>
<pre><code>from multiprocessing import Pool
pool = Pool(processes=4)
results = pool.map(func_run, par)
</code></pre>
<p>As a result, I get a, <code>TypeError</code> with traceback:</p>
<pre><code>---------------------------------------------------------------------------
RemoteTraceback                           Traceback (most recent call last)
RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/user/anaconda3/lib/python3.6/multiprocessing/pool.py", line 119, in worker
result = (True, func(*args, **kwds))
  File "/home/user/anaconda3/lib/python3.6/multiprocessing/pool.py", line 44, in mapstar
return list(map(*args))
  File "&lt;ipython-input-14-5ce94acfd95e&gt;", line 5, in run
values = calc_val(param[i][0],param[i][1],param[i][2], param[i][3], r, T)
TypeError: 'float' object is not subscriptable
"""

The above exception was the direct cause of the following exception:

TypeError                                 Traceback (most recent call last)
&lt;ipython-input-15-f45146f68f66&gt; in &lt;module&gt;()
      1 pool    = Pool(processes=4)
----&gt; 2 test    = pool.map(run,par)

~/anaconda3/lib/python3.6/multiprocessing/pool.py in map(self, func, iterable, chunksize)
264         in a list that is returned.
265         '''
--&gt; 266         return self._map_async(func, iterable, mapstar, chunksize).get()
267 
268     def starmap(self, func, iterable, chunksize=None):

~/anaconda3/lib/python3.6/multiprocessing/pool.py in get(self, timeout)
642             return self._value
643         else:
--&gt; 644             raise self._value
645 
646     def _set(self, i, obj):

TypeError: 'float' object is not subscriptable
</code></pre>
<p>Unfortunately, it is impossible to add the whole functions and what are they doing because they are hundreds of lines. I hope that you can get the feeling though even though you cannot really reproduce it by yourselfs. </p>
<p>Is it possible to run something like this with multiprocessing or I need a different approach?
It would be great if anyone can help me understand the error and make it run. </p>
<p>Cheers!</p>
<p>`</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of</p>
<pre><code>par = list(itertools.product(*par))
</code></pre>
<p>is a list of tuples of floats (and ints). <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#multiprocessing.pool.Pool.map" rel="nofollow noreferrer"><code>Pool.map()</code></a> takes an <em>iterable</em> as the 2nd argument and maps over its items, passing them individually to given <em>func</em>. In other words in the function <code>func_run(param)</code> <em>param</em> is not a list of tuples of numbers, but a tuple of numbers, and so</p>
<pre><code>param[i][0]
</code></pre>
<p>is trying to access the <em>ith</em> float object's 0th item, which of course makes no sense, and so the exception. You probably should remove the for-loop in <code>func_run()</code>:</p>
<pre><code>def func_run(param):
    values = func1(param[0], param[1], param[2], param[3], r, T)
    ...
</code></pre>
</div>
<span class="comment-copy">Please provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> and the full traceback instead of just the error message without a context.</span>
<span class="comment-copy">Thank you for the comment. I edited it to make it as "code" as possible with a traceback, but still I am not sure if this can help as I explain above.</span>
<span class="comment-copy">Thank you for the explanation ! It is running now !</span>
