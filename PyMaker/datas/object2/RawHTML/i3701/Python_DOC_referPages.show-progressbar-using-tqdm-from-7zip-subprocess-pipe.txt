<div class="post-text" itemprop="text">
<p>I'm using this function (based on <a href="https://stackoverflow.com/a/47025171/5593051">this</a> awnser) to compress a folder to an encrypted .zip file using 7zip in a subprocess:</p>
<pre><code>def zipbkp(directoryToZip):

    zipFileName = directoryToZip+".zip"
    password = "minmin3"

    appPath = "C:\Program Files\\7-Zip"
    zApp    = "7z.exe"
    zAction = 'a'
    zPass   = '-p{0} -mhe'.format(password)
    zAnswer = '-y'
    zDir    = directoryToZip
    progDir = os.path.join(appPath,zApp)

    print("[*] Trying to create .zip File, please wait...")
    cmd = [zApp, zAction, zipFileName, zPass, zAnswer, zDir]
    zipper = subprocess.Popen(cmd, executable=progDir, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)

    #Lacking Progressbar here

    zipper.wait()
    print("[*] Successfully created .zip File")
    return zipFileName
</code></pre>
<p>This works fine as is.
My only problem is since the directory to zip is pretty huge i want to give information about the compression progress.</p>
<p>I've installed and used <a href="https://github.com/tqdm/tqdm" rel="nofollow noreferrer">tqdm</a> succesfully before to display a progressbar but can't get it to work with this 7zip subprocess.</p>
<p>For reference, this is how i used tqdm on a ftp upload script:</p>
<pre><code>with tqdm(unit = 'blocks', unit_scale = True, leave = False, miniters = 1, desc = 'Uploading', total = filesize) as tqdm_instance:
        ftp.storbinary('STOR ' + filename, tmp, 2048, callback = lambda sent: tqdm_instance.update(len(sent)))
</code></pre>
<p>tqdm even provides an example on how to use pipes but i don't really understand 
 it. The example also is using grep which isn't available on Windows.</p>
<p><a href="https://i.stack.imgur.com/HhPmV.png" rel="nofollow noreferrer"><img alt="example" src="https://i.stack.imgur.com/HhPmV.png"/></a></p>
<p>I also found <a href="https://github.com/tqdm/tqdm/blob/master/examples/7zx.py" rel="nofollow noreferrer">this example</a> which is even worse to understand.</p>
<p>Any idea how to get and parse the information provided by 7zip using tqdm?</p>
</div>
<div class="post-text" itemprop="text">
<p>To use the <code>tqdm</code> progress bar you can simply instantiate the progress bar with the parameter <code>total</code>, as done <a href="https://github.com/tqdm/tqdm/blob/master/examples/7zx.py#L73" rel="nofollow noreferrer">here</a>, then call <code>update</code> (<a href="https://github.com/tqdm/tqdm/blob/master/examples/7zx.py#L97" rel="nofollow noreferrer">as done here</a>) passing the <em>increment</em> on the bar. You can also specify that the total is in bytes and you want to show it with <code>unit='B'</code> and <code>unit_scale=True</code></p>
<p>This with 7zip can be done in three steps:</p>
<ol>
<li><p>By invoking <code>7z l {zip file name}</code> you can get the size of the files and their names, so the script can invoke the command and parse the output. The recommended way with recent  Python versions is through the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module.</p></li>
<li><p>Instantiate the tqdm object with the total final size of the uncompressed files</p></li>
<li><p>Using <code>subprocess.Popen</code> you can invoke <code>['7z', 'x', '-bd', filename]</code> (<code>-bd</code> avoid builtin progress reporting)  , and pass <code>stdout=subprocess.PIPE</code> to be able to read the standard output of the process using <code>process.stdout.readline()</code> where process is the value returned by <code>Popen</code>, and parse the output to get the current status. When a file is decompressed it reports its name and so you can call <code>tqdm.update</code> with the relative size retrieved at step 1.</p></li>
</ol>
</div>
<span class="comment-copy">I'm not trying to decompress, i'm trying to get the progress of the compression.</span>
