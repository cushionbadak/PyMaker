<div class="post-text" itemprop="text">
<pre><code>import copy

a=”deepak”
b=1,2,3,4
c=[1,2,3,4]
d={1:10,2:20,3:30}

a1=copy.copy(a)
b1=copy.copy(b)
c1=copy.copy(c)
d1=copy.copy(d)


print "immutable - id(a)==id(a1)",id(a)==id(a1)
print "immutable   - id(b)==id(b1)",id(b)==id(b1)
print "mutable - id(c)==id(c1)",id(c)==id(c1)
print "mutable   - id(d)==id(d1)",id(d)==id(d1)
</code></pre>
<p>I get the following results -</p>
<pre><code>immutable - id(a)==id(a1) True
immutable   - id(b)==id(b1) True
mutable - id(c)==id(c1) False
mutable   - id(d)==id(d1) False
</code></pre>
<p>If I perform deepcopy -</p>
<pre><code>a1=copy.deepcopy(a)
b1=copy.deepcopy(b)
c1=copy.deepcopy(c)
d1=copy.deepcopy(d)
</code></pre>
<p>results are the same -</p>
<pre><code>immutable - id(a)==id(a1) True
immutable   - id(b)==id(b1) True
mutable - id(c)==id(c1) False
mutable   - id(d)==id(d1) False
</code></pre>
<p>If I work on assignment operations -</p>
<pre><code>a1=a
b1=b
c1=c
d1=d
</code></pre>
<p>then results are -</p>
<pre><code>immutable - id(a)==id(a1) True
immutable   - id(b)==id(b1) True
mutable - id(c)==id(c1) True
mutable   - id(d)==id(d1) True
</code></pre>
<p>Can somebody explain what exactly makes a difference between the copies? Is it something related to mutable &amp; immutable objects? If so, can you please explain it to me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Normal assignment operations will simply point the new variable towards the existing object. The <a href="http://docs.python.org/2/library/copy.html" rel="noreferrer">docs</a> explain the difference between shallow and deep copies:</p>
<blockquote>
<p>The difference between shallow and deep copying is only relevant for
  compound objects (objects that contain other objects, like lists or
  class instances):</p>
<ul>
<li><p>A shallow copy constructs a new compound object and then (to the    extent possible) inserts references into it to the objects found in the original.</p></li>
<li><p>A deep copy constructs a new compound object and then, recursively,    inserts copies into it of the objects found in the
  original.</p></li>
</ul>
</blockquote>
<p>Here's a little demonstration:</p>
<pre><code>import copy

a = [1, 2, 3]
b = [4, 5, 6]
c = [a, b]
</code></pre>
<p>Using normal assignment operatings to copy:</p>
<pre><code>d = c

print id(c) == id(d)          # True - d is the same object as c
print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
</code></pre>
<p>Using a shallow copy:</p>
<pre><code>d = copy.copy(c)

print id(c) == id(d)          # False - d is now a new object
print id(c[0]) == id(d[0])    # True - d[0] is the same object as c[0]
</code></pre>
<p>Using a deep copy:</p>
<pre><code>d = copy.deepcopy(c)

print id(c) == id(d)          # False - d is now a new object
print id(c[0]) == id(d[0])    # False - d[0] is now a new object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For immutable objects, there is no need for copying because the data will never change, so Python uses the same data; ids are always the same. For mutable objects, since they can potentially change, [shallow] copy creates a new object.</p>
<p>Deep copy is related to nested structures. If you have list of lists, then deepcopy <code>copies</code> the nested lists also, so it is a recursive copy. With just copy, you have a new outer list, but inner lists are references.</p>
<p>Assignment does not copy. It simply sets the reference to the old data. So you need copy to create a new list with the same contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>For immutable objects, creating a copy don't make much sense since they are not going to change. For mutable objects <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer"><code>assignment</code></a>,<a href="https://docs.python.org/3/library/copy.html#copy.copy" rel="noreferrer"><code>copy</code></a> and <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="noreferrer"><code>deepcopy</code></a> behaves differently. Lets talk about each of them with examples.</p>
<p>An assignment operation simply assigns the reference of source to destination e.g:</p>
<pre><code>&gt;&gt;&gt; i = [1,2,3]
&gt;&gt;&gt; j=i
&gt;&gt;&gt; hex(id(i)), hex(id(j))
&gt;&gt;&gt; ('0x10296f908', '0x10296f908') #Both addresses are identical
</code></pre>
<p>Now <code>i</code> and <code>j</code> technically refers to same list. Both <code>i</code> and <code>j</code> have same memory address. Any updation to either
of them will be reflected to the other. e.g: </p>
<pre><code>&gt;&gt;&gt; i.append(4)
&gt;&gt;&gt; j
&gt;&gt;&gt; [1,2,3,4] #Destination is updated

&gt;&gt;&gt; j.append(5)
&gt;&gt;&gt; i
&gt;&gt;&gt; [1,2,3,4,5] #Source is updated
</code></pre>
<p>On the other hand <code>copy</code> and <code>deepcopy</code> creates a new copy of variable. So now changes to original variable will not be reflected
to the copy variable and vice versa. However <code>copy(shallow copy)</code>, don't creates a copy of nested objects, instead it just 
copies the reference of nested objects. Deepcopy copies all the nested objects recursively.</p>
<p>Some examples to demonstrate behaviour of <code>copy</code> and <code>deepcopy</code>: </p>
<p><strong>Flat list example using <code>copy</code>:</strong></p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; i = [1,2,3]
&gt;&gt;&gt; j = copy.copy(i)
&gt;&gt;&gt; hex(id(i)), hex(id(j))
&gt;&gt;&gt; ('0x102b9b7c8', '0x102971cc8') #Both addresses are different

&gt;&gt;&gt; i.append(4)
&gt;&gt;&gt; j
&gt;&gt;&gt; [1,2,3] #Updation of original list didn't affected copied variable
</code></pre>
<p><strong>Nested list example using <code>copy</code>:</strong></p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; i = [1,2,3,[4,5]]
&gt;&gt;&gt; j = copy.copy(i)

&gt;&gt;&gt; hex(id(i)), hex(id(j))
&gt;&gt;&gt; ('0x102b9b7c8', '0x102971cc8') #Both addresses are still different

&gt;&gt;&gt; hex(id(i[3])), hex(id(j[3]))
&gt;&gt;&gt; ('0x10296f908', '0x10296f908') #Nested lists have same address

&gt;&gt;&gt; i[3].append(6)
&gt;&gt;&gt; j
&gt;&gt;&gt; [1,2,3,[4,5,6]] #Updation of original nested list updated the copy as well
</code></pre>
<p><strong><em>Flat list example using <code>deepcopy</code>:</em></strong> </p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; i = [1,2,3]
&gt;&gt;&gt; j = copy.deepcopy(i)
&gt;&gt;&gt; hex(id(i)), hex(id(j))
&gt;&gt;&gt; ('0x102b9b7c8', '0x102971cc8') #Both addresses are different

&gt;&gt;&gt; i.append(4)
&gt;&gt;&gt; j
&gt;&gt;&gt; [1,2,3] #Updation of original list didn't affected copied variable
</code></pre>
<p><strong>Nested list example using <code>deepcopy</code>:</strong></p>
<pre><code>&gt;&gt;&gt; import copy
&gt;&gt;&gt; i = [1,2,3,[4,5]]
&gt;&gt;&gt; j = copy.deepcopy(i)

&gt;&gt;&gt; hex(id(i)), hex(id(j))
&gt;&gt;&gt; ('0x102b9b7c8', '0x102971cc8') #Both addresses are still different

&gt;&gt;&gt; hex(id(i[3])), hex(id(j[3]))
&gt;&gt;&gt; ('0x10296f908', '0x102b9b7c8') #Nested lists have different addresses

&gt;&gt;&gt; i[3].append(6)
&gt;&gt;&gt; j
&gt;&gt;&gt; [1,2,3,[4,5]] #Updation of original nested list didn't affected the copied variable    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's see in a graphical example how the following code is executed:</p>
<pre><code>import copy

class Foo(object):
    def __init__(self):
        pass


a = [Foo(), Foo()]
shallow = copy.copy(a)
deep = copy.deepcopy(a)
</code></pre>
<p><a href="https://i.stack.imgur.com/L6s7A.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/L6s7A.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>a, b, c, d, a1, b1, c1 and d1 are references to objects in memory, which are uniquely identified by their ids.</p>
<p>An assignment operation takes a reference to the object in memory and assigns that reference to a new name.  <code>c=[1,2,3,4]</code> is an assignment that creates a new list object containing those four integers, and assigns the reference to that object to <code>c</code>.  <code>c1=c</code> is an assignment that takes <em>the same reference to the same object</em> and assigns that to <code>c1</code>.  Since the list is mutable, anything that happens to that list will be visible regardless of whether you access it through <code>c</code> or <code>c1</code>, because they both reference the same object.</p>
<p><code>c1=copy.copy(c)</code> is a "shallow copy" that creates a new list and assigns the reference to the new list to <code>c1</code>.  <code>c</code> still points to the original list.  So, if you modify the list at <code>c1</code>, the list that <code>c</code> refers to will not change.</p>
<p>The concept of copying is irrelevant to immutable objects like integers and strings.  Since you can't modify those objects, there is never a need to have two copies of the same value in memory at different locations.  So integers and strings, and some other objects to which the concept of copying does not apply, are simply reassigned.  This is why your examples with <code>a</code> and <code>b</code> result in identical ids.</p>
<p><code>c1=copy.deepcopy(c)</code> is a "deep copy", but it functions the same as a shallow copy in this example.  Deep copies differ from shallow copies in that shallow copies will make a new copy of the object itself, but any references <em>inside</em> that object will not themselves be copied.  In your example, your list has only integers inside it (which are immutable), and as previously discussed there is no need to copy those.  So the "deep" part of the deep copy does not apply.  However, consider this more complex list:</p>
<p><code>e = [[1, 2],[4, 5, 6],[7, 8, 9]]</code></p>
<p>This is a list that contains other lists (you could also describe it as a two-dimensional array).</p>
<p>If you run a "shallow copy" on <code>e</code>, copying it to <code>e1</code>, you will find that the id of the list changes, but each copy of the list contains references to the same three lists -- the lists with integers inside.  That means that if you were to do <code>e[0].append(3)</code>, then <code>e</code> would be <code>[[1, 2, 3],[4, 5, 6],[7, 8, 9]]</code>.  But <code>e1</code> would also be <code>[[1, 2, 3],[4, 5, 6],[7, 8, 9]]</code>.  On the other hand, if you subsequently did <code>e.append([10, 11, 12])</code>, <code>e</code> would be <code>[[1, 2, 3],[4, 5, 6],[7, 8, 9],[10, 11, 12]]</code>.  But <code>e1</code> would still be <code>[[1, 2, 3],[4, 5, 6],[7, 8, 9]]</code>.  That's because the outer lists are separate objects that initially each contain three references to three inner lists.  If you modify the inner lists, you can see those changes no matter if you are viewing them through one copy or the other.  But if you modify one of the outer lists as above, then <code>e</code> contains three references to the original three lists plus one more reference to a new list.  And <code>e1</code> still only contains the original three references.</p>
<p>A 'deep copy' would not only duplicate the outer list, but it would also go inside the lists and duplicate the inner lists, so that the two resulting objects do not contain any of the same references (as far as mutable objects are concerned).  If the inner lists had further lists (or other objects such as dictionaries) inside of them, they too would be duplicated.  That's the 'deep' part of the 'deep copy'.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, when we assign objects like list, tuples, dict, etc to another object usually with a ' = ' sign, python creates copy’s <strong>by reference</strong>. That is, let’s say we have a list of list like this :</p>
<pre><code>list1 = [ [ 'a' , 'b' , 'c' ] , [ 'd' , 'e' , 'f' ]  ]
</code></pre>
<p>and we assign another list to this list like :</p>
<pre><code>list2 = list1
</code></pre>
<p>then if we print list2 in python terminal we’ll get this :</p>
<pre><code>list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]
</code></pre>
<p>Both list1 &amp; list2 are pointing to same memory location, any change to any one them will result in changes visible in both objects, i.e both objects are pointing to same memory location.
If we change list1 like this :</p>
<pre><code>list1[0][0] = 'x’
list1.append( [ 'g'] )
</code></pre>
<p>then both list1 and list2 will be :</p>
<pre><code>list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g'] ]
list2 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g’ ] ]
</code></pre>
<p>Now coming to <strong>Shallow copy</strong>, when two objects are copied via shallow copy, the child object of both parent object refers to same memory location but any further new changes in any of the copied object will be independent to each other.
Let’s understand this with a small example. Suppose we have this small code snippet :</p>
<pre><code>import copy

list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]      # assigning a list
list2 = copy.copy(list1)       # shallow copy is done using copy function of copy module

list1.append ( [ 'g', 'h', 'i'] )   # appending another list to list1

print list1
list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ]
list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] ]
</code></pre>
<p>notice, list2 remains unaffected, but if we make changes to child objects like :</p>
<pre><code>list1[0][0] = 'x’
</code></pre>
<p>then both list1 and list2 will get change :</p>
<pre><code>list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ] 
list2 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] ]
</code></pre>
<p>Now, <strong>Deep copy</strong> helps in creating completely isolated objects out of each other. If two objects are copied via Deep Copy then both parent &amp; it’s child will be pointing to different memory location.
Example :</p>
<pre><code>import copy

list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f ']  ]         # assigning a list
list2 = deepcopy.copy(list1)       # deep copy is done using deepcopy function of copy module

list1.append ( [ 'g', 'h', 'i'] )   # appending another list to list1

print list1
list1 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ]
list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f '] ]
</code></pre>
<p>notice, list2 remains unaffected, but if we make changes to child objects like :</p>
<pre><code>list1[0][0] = 'x’
</code></pre>
<p>then also list2 will be unaffected as all the child objects and parent object points to different memory location :</p>
<pre><code>list1 = [ [ 'x', 'b', 'c'] , [ 'd', 'e', ' f '] , [ 'g', 'h', 'i'] ] 
list2 = [ [ 'a', 'b', 'c'] , [ 'd', 'e', ' f  ' ] ]
</code></pre>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Below code demonstrates the difference between assignment, shallow copy using the copy method, shallow copy using the (slice) [:] and the deepcopy. Below example uses nested lists there by making the differences more evident.</p>
<pre><code>from copy import deepcopy

########"List assignment (does not create a copy) ############
l1 = [1,2,3, [4,5,6], [7,8,9]]
l1_assigned = l1

print(l1)
print(l1_assigned)

print(id(l1), id(l1_assigned))
print(id(l1[3]), id(l1_assigned[3]))
print(id(l1[3][0]), id(l1_assigned[3][0]))

l1[3][0] = 100
l1.pop(4)
l1.remove(1)


print(l1)
print(l1_assigned)
print("###################################")

########"List copy using copy method (shallow copy)############

l2 = [1,2,3, [4,5,6], [7,8,9]]
l2_copy = l2.copy()

print(l2)
print(l2_copy)

print(id(l2), id(l2_copy))
print(id(l2[3]), id(l2_copy[3]))
print(id(l2[3][0]), id(l2_copy[3][0]))
l2[3][0] = 100
l2.pop(4)
l2.remove(1)


print(l2)
print(l2_copy)

print("###################################")

########"List copy using slice (shallow copy)############

l3 = [1,2,3, [4,5,6], [7,8,9]]
l3_slice = l3[:]

print(l3)
print(l3_slice)

print(id(l3), id(l3_slice))
print(id(l3[3]), id(l3_slice[3]))
print(id(l3[3][0]), id(l3_slice[3][0]))

l3[3][0] = 100
l3.pop(4)
l3.remove(1)


print(l3)
print(l3_slice)

print("###################################")

########"List copy using deepcopy ############

l4 = [1,2,3, [4,5,6], [7,8,9]]
l4_deep = deepcopy(l4)

print(l4)
print(l4_deep)

print(id(l4), id(l4_deep))
print(id(l4[3]), id(l4_deep[3]))
print(id(l4[3][0]), id(l4_deep[3][0]))

l4[3][0] = 100
l4.pop(4)
l4.remove(1)

print(l4)
print(l4_deep)
print("##########################")
print(l4[2], id(l4[2]))
print(l4_deep[3], id(l4_deep[3]))

print(l4[2][0], id(l4[2][0]))
print(l4_deep[3][0], id(l4_deep[3][0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The GIST to take is this:
Dealing with shallow lists (no sub_lists, just single elements) using "normal assignment" rises a "side effect" when you create a shallow list and then you create a copy of this list using "normal assignment". This "side effect" is when you change any element of the copy list created, because it will automatically change the same elements of the original list. That is when <code>copy</code> comes in handy, as it won't change the original list elements when changing the copy elements.</p>
<p>On the other hand, <code>copy</code> does have a "side effect" as well, when you have a list that has lists in it (sub_lists), and <code>deepcopy</code> solves it. For instance if you create a big list that has nested lists in it (sub_lists), and you create a copy of this big list (the original list). The "side effect" would arise when you modify the sub_lists of the copy list which would automatically modify the sub_lists of the big list. Sometimes (in some projects) you want to keep the big list (your original list) as it is without modification, and all you want is to make a copy of its elements (sub_lists). For that, your solution is to use <code>deepcopy</code> which will take care of this "side effect" and makes a copy without modifying the original content.</p>
<p>The different behaviors of <code>copy</code> and <code>deep copy</code> operations concerns only compound objects (ie: objects that contain other objects such as lists).</p>
<p>Here are the differences illustrated in this simple code example:</p>
<p><strong><em>First</em></strong> </p>
<p>let's check how <code>copy</code> (shallow) behaves, by creating an original list and a copy of this list:</p>
<pre><code>import copy
original_list = [1, 2, 3, 4, 5, ['a', 'b']]
copy_list = copy.copy(original_list)
</code></pre>
<p>Now, let's run some <code>print</code> tests and see how the original list behave compared to its copy list:</p>
<p>original_list and copy_list have different addresses</p>
<pre><code>print(hex(id(original_list)), hex(id(copy_list))) # 0x1fb3030 0x1fb3328
</code></pre>
<p>elements of original_list and copy_list have the same addresses</p>
<pre><code>print(hex(id(original_list[1])), hex(id(copy_list[1]))) # 0x537ed440 0x537ed440
</code></pre>
<p>sub_elements of original_list and copy_list have the same addresses</p>
<pre><code>print(hex(id(original_list[5])), hex(id(copy_list[5]))) # 0x1faef08 0x1faef08
</code></pre>
<p>modifying original_list elements does NOT modify copy_list elements</p>
<pre><code>original_list.append(6)
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b']]
</code></pre>
<p>modifying copy_list elements does NOT modify original_list elements</p>
<pre><code>copy_list.append(7)
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]
</code></pre>
<p>modifying original_list sub_elements automatically modify copy_list sub_elements</p>
<pre><code>original_list[5].append('c')
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 7]
</code></pre>
<p>modifying copy_list sub_elements automatically modify original_list sub_elements</p>
<pre><code>copy_list[5].append('d')
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 7]
</code></pre>
<p><strong><em>Second</em></strong> </p>
<p>let's check how <code>deepcopy</code> behaves, by doing the same thing as we did with <code>copy</code> (creating an original list and a copy of this list):</p>
<pre><code>import copy
original_list = [1, 2, 3, 4, 5, ['a', 'b']]
copy_list = copy.copy(original_list)
</code></pre>
<p>Now, let's run some <code>print</code> tests and see how the original list behave compared to its copy list:</p>
<pre><code>import copy
original_list = [1, 2, 3, 4, 5, ['a', 'b']]
copy_list = copy.deepcopy(original_list)
</code></pre>
<p>original_list and copy_list have different addresses</p>
<pre><code>print(hex(id(original_list)), hex(id(copy_list))) # 0x1fb3030 0x1fb3328
</code></pre>
<p>elements of original_list and copy_list have the same addresses</p>
<pre><code>print(hex(id(original_list[1])), hex(id(copy_list[1]))) # 0x537ed440 0x537ed440
</code></pre>
<p>sub_elements of original_list and copy_list have different addresses</p>
<pre><code>print(hex(id(original_list[5])), hex(id(copy_list[5]))) # 0x24eef08 0x24f3300
</code></pre>
<p>modifying original_list elements does NOT modify copy_list elements</p>
<pre><code>original_list.append(6)
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b']]
</code></pre>
<p>modifying copy_list elements does NOT modify original_list elements</p>
<pre><code>copy_list.append(7)
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]
</code></pre>
<p>modifying original_list sub_elements does NOT modify copy_list sub_elements</p>
<pre><code>original_list[5].append('c')
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b'], 7]
</code></pre>
<p>modifying copy_list sub_elements does NOT modify original_list sub_elements</p>
<pre><code>copy_list[5].append('d')
print("original_list is:", original_list) # original_list is: [1, 2, 3, 4, 5, ['a', 'b', 'c', 'd'], 6]
print("copy_list is:", copy_list) # copy_list is: [1, 2, 3, 4, 5, ['a', 'b', 'd'], 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;lst=[1,2,3,4,5]
</code></pre>
<blockquote>
<blockquote>
<p>a=lst</p>
<p>b=lst[:]</p>
<blockquote>
<p>b
      [1, 2, 3, 4, 5]</p>
<p>a
      [1, 2, 3, 4, 5]</p>
<p>lst is b
      False</p>
<p>lst is a
      True</p>
<p>id(lst)
      46263192</p>
<p>id(a)
      46263192 ------&gt;  See here id of a and id of lst is same so its called deep copy and even boolean answer is true</p>
<p>id(b)
      46263512 ------&gt;  See here id of b and id of lst is not same so its called shallow copy and even boolean answer is false although output looks same.</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<span class="comment-copy">is assginment is same as shallow copy?</span>
<span class="comment-copy">@Dshank No. A shallow copy constructs a new object, while an assignment will simply point the new variable at the existing object. Any changes to the existing object will affect both variables (with assignment).</span>
<span class="comment-copy">@grc "Any changes to the existing object will affect both variables (with assignment)" - this statement is true only for mutable objects and not immutable types like string, float, tuples.</span>
<span class="comment-copy">@grc <code>A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</code> Do you mean that as I do shallow copy to mutable object, the new object might be influenced by the original copied one?</span>
<span class="comment-copy">@Stallman If you shallow copy a <i>compound</i> object containing mutable objects, then the mutable objects only exist once. All changes to the mutable objects will be reflected in both the original compound object and the copied compound object.</span>
<span class="comment-copy"><code>With just copy, you have a new outer list but inner lists are references.</code> For the inner lists, would the copied one influenced by original one? I create a list of lists like <code>list_=[[1,2],[3,4]] newlist = list_.copy() list_[0]=[7,8]</code> and the <code>newlist</code> remains the same, so does the inner list are references?</span>
<span class="comment-copy">@Stallman you are not changing the referenced list here, just creating a new list and assigning it as the first item of one of the copies. try doing <code>list_[0][0] = 7</code></span>
