<div class="post-text" itemprop="text">
<p>Is there a command argument parser for Discord.py similar to the 'argparse' module? I created a discord bot that accepts 2 integers and 1 string variable, processes them and outputs the result to the client. It's all well and good when users use it properly, but when they don't I need an easy way to pass errors to the client to tell the user that they used the command incorrectly. It'd be great if I could use argparse for this, else I'll have to write a parser from scratch - which would be a pain! Here's the code:</p>
<pre><code>import discord
from discord.ext import commands
from discord.ext.commands import Bot
import random
import asyncio

client = discord.Client()
bot = commands.Bot(command_prefix='#')

#Tells you when the bot is ready.
@bot.event
async def on_ready():
    print('Logged in as')
    print(bot.user.name)
    print(bot.user.id)
    print('------')

#The bot listens in on every message. 
@bot.event
async def on_message(message):
    #New command beginning with # to make the bot say "Hello there!" Always remember to begin with # as you have specified the command prefix as # above.
    if message.content.lower().startswith("#greet"):
        userID = message.author.id
        await bot.send_message(message.channel, "&lt;@" + userID + "&gt;" + " Hello there!")

    #Another command that accepts parameters.
    if message.content.lower().startswith("#say"):
        args = message.content.split(" ")   #This turns everything in the string after the command "#say" into a string.
        await bot.send_message(message.channel, args[1:])
        await bot.send_message(message.channel, " ".join(args[1:])) #This joins all the strings back without [] and commas.

    #Another, more sophisticated command that accepts parameters parses them.
    if message.content.lower().startswith("#compton_scatter_eq"):
        args = message.content.split(" ")
        a = int(args[1])
        b = int(args[2])
        c = args[3]
        result = str(a + b) + c
        await bot.send_message(message.channel, result)

bot.run(...)
</code></pre>
<p>Could you please tell me if there is a module similar to argparse or if there is a way to use argparse module with Discord.py?</p>
<p>Edit: </p>
<p>@Rishav - you're awesome dude! It worked, but now I have a new problem. Here's my code:</p>
<pre><code>#Another, more sophisticated command that accepts parameters parses them.
    if message.content.lower().startswith("#compton_scatter_eq"):
        args = message.content.split(" ")

        #Pass arguments through argparse module.
        parser = argparse.ArgumentParser(description="Example program to get my bot to use argparse")
        parser.add_argument("a", nargs='?', type=int, default=10, help="This is your first variable.")
        parser.add_argument("b", nargs='?', type=int, default=10, help="This is your second variable.")
        parser.add_argument("c", nargs='?', type=str, default="East", help="This is your third variable.")

        #Catch errors and pass them back to the client.
        try:
            await bot.send_message(message.channel, vars(parser.parse_args(args[1:])))
        except BaseException as e:
            await bot.send_message(message.channel, str(e))
</code></pre>
<p>Unfortunately, the errors come up in the command line terminal, but not in the client. How do I pass the error back to the client? And how do I access variables a, b and c? Thank you for your help so far!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're importing the <code>discord.ext.commands</code> extension, but you're not actually using it. <a href="https://discordpy.readthedocs.io/en/rewrite/ext/commands/commands.html#parameters" rel="nofollow noreferrer">It has great, easy to write command parsing built in</a>.</p>
<pre><code>from discord.ext import commands

bot = commands.Bot('#')

@bot.command(pass_context=True)
async def greet(ctx):
    await bot.say("{} Hello there!".format(ctx.author.mention))

@bot.command(pass_context=True, name="say")
async def _say(ctx, *, message):
    await bot.say(message)

@bot.command(pass_context=True)
async def compton_scatter_eq(ctx, a: int, b: int, c):
    await bot.say(str(a + b) + c)

@bot.event
async def on_command_error(ctx, error):
    channel = ctx.message.channel
    if isinstance(error, commands.MissingRequiredArgument):
        await bot.send_message(channel, "Missing required argument: {}".format(error.param))
    elif isinstance(error, commands.BadArgument):
        bot.send_message(channel, "Could not parse commands argument.")
</code></pre>
<p>If you want to have more granular error handling, you can implement <a href="https://discordpy.readthedocs.io/en/rewrite/ext/commands/commands.html#error-handling" rel="nofollow noreferrer">per-command error handlers</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, see <a href="https://docs.python.org/3/library/argparse.html#beyond-sys-argv" rel="nofollow noreferrer">this</a> example from the argparse docs.</p>
<p>It describes your need perfectly I think.</p>
<blockquote>
<pre><code>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument(
...     'integers', metavar='int', type=int, choices=range(10),
...     nargs='+', help='an integer in the range 0..9')
&gt;&gt;&gt; parser.add_argument(
...     '--sum', dest='accumulate', action='store_const', const=sum,
...     default=max, help='sum the integers (default: find the max)')
&gt;&gt;&gt; parser.parse_args(['1', '2', '3', '4'])
Namespace(accumulate=&lt;built-in function max&gt;, integers=[1, 2, 3, 4])
&gt;&gt;&gt; parser.parse_args(['1', '2', '3', '4', '--sum'])
Namespace(accumulate=&lt;built-in function sum&gt;, integers=[1, 2, 3, 4])
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Not clear what you are asking. But <a href="https://github.com/pallets/click" rel="nofollow noreferrer">this</a> is superior in every aspect to argparse.</span>
