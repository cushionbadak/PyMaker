<div class="post-text" itemprop="text">
<p>Is the following code doing anything wrong with <code>with</code> statement and exception handling of python3? If no, what is the correct way of writing my expected output?</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def test():
    print("Hello")
    yield
    print("goodbye")

try:
    with test():
        print("inside test")
        raise KeyError
except KeyError:
    print("KeyError")
else:
    print("else")
finally:
    print("finally")
</code></pre>
<p>and the output is</p>
<pre><code>Hello
inside test
KeyError
finally
</code></pre>
<p>and I <strong>expect</strong> the output is:</p>
<pre><code>Hello
inside test
goodbye
KeyError
finally
</code></pre>
<p>which I believe <a href="https://stackoverflow.com/questions/713794/catching-an-exception-while-using-a-python-with-statement">other people</a> write similarly in the hope that the file would be closed when an exception was raised during the processing of the file.</p>
<p>My python3 version is:</p>
<pre><code>Python 3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.version)
3.5.2 (default, Nov 23 2017, 16:37:01) 
[GCC 5.4.0 20160609]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The exception from within the block governed by the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">with</a> statement is propagated to your generator context manager through <a href="https://docs.python.org/3/reference/expressions.html#generator.throw" rel="nofollow noreferrer"><code>generator.throw()</code></a> as shown in <a href="https://www.python.org/dev/peps/pep-0343/#generator-decorator" rel="nofollow noreferrer">PEP 343: "Generator Decorator"</a>, which raises the exception at the point where the generator was paused. In other words you should wrap the <code>yield</code> in a try/except or try/finally:</p>
<pre><code>@contextmanager
def test():
    print("Hello")
    try:
        # The block of the with statement executes when the generator yields
        yield

    finally:
        print("goodbye")
</code></pre>
<p>To quote the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer">official documentation</a> on the subject:</p>
<blockquote>
<p>...If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a <a href="https://docs.python.org/3/reference/compound_stmts.html#try" rel="nofollow noreferrer">try</a>…<a href="https://docs.python.org/3/reference/compound_stmts.html#except" rel="nofollow noreferrer">except</a>…<a href="https://docs.python.org/3/reference/compound_stmts.html#finally" rel="nofollow noreferrer">finally</a> statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">with</a> statement that the exception has been handled, and execution will resume with the statement immediately following the <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">with</a> statement.</p>
</blockquote>
</div>
<span class="comment-copy">I get it...I didn't think so deeply when I was writing my test().</span>
