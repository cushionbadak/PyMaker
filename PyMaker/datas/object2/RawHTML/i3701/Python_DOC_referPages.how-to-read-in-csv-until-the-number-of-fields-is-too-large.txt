<div class="post-text" itemprop="text">
<p>I have a csv which I read in with:</p>
<pre><code>df = pd.read_csv("file.csv")
</code></pre>
<p>All the rows have 37 fields until one with 38 and from there it is corrupted. How can I just read in the rows with 37 fields?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the doc : <a href="http://pandas.pydata.org/pandas-docs/version/0.23/generated/pandas.read_csv.html" rel="nofollow noreferrer">http://pandas.pydata.org/pandas-docs/version/0.23/generated/pandas.read_csv.html</a></p>
<blockquote>
<p>error_bad_lines : boolean, default True</p>
<p>Lines with too many fields (e.g. a csv line with too many commas) will by default cause an exception to be raised, and no DataFrame will
  be returned. If False, then these “bad lines” will dropped from the
  DataFrame that is returned.</p>
</blockquote>
<p>So you can use :</p>
<pre><code>df = pd.read_csv("file.csv", error_bad_lines=False)
</code></pre>
<p>But it might be better editing your .csv file and fix the concerned row properly. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify a range of columns, just have to unpack it with <code>*</code>:</p>
<pre><code>df = pd.read_csv("file.csv", usecols=[*range(37)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It will be easier to preprocess the csv file, leave only the lines you are interested with and proceed to using <code>pd.read_csv</code> method as you normally do.</p>
<p>However, if you would like to try, you can have a look at the read_csv documentation <a href="http://pandas.pydata.org/pandas-docs/version/0.23/generated/pandas.read_csv.html" rel="nofollow noreferrer">here</a>, it seems that there are some useful options there like <code>skiprows</code> for example</p>
</div>
<span class="comment-copy">You can specify the nrows like df = pd.read_csv("file.csv",nrows=37)</span>
<span class="comment-copy">Thank you. I need this to be automated so any preprocessing would also have to be in the script. Is there a nice way to count the number of fields in each row?</span>
<span class="comment-copy">I'm not sure about this, if you want to work entirely with Python you can try the module <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv</a> to preprocess errors. Good luck with your project !</span>
<span class="comment-copy">Apparently <code>import csv def f(s):return map(len,csv.reader(s.split("\n"))</code> let's you count the number of fields in each line which will basically solve the problem.</span>
<span class="comment-copy">btw, Ofer, you can create this list by passing it to a list constructor as well, rather than using <code>*</code>, like this: <code>usecols=list(range(37))</code>. And if you use Python2, then <code>range</code> will automatically be a list and not a generator</span>
<span class="comment-copy">That's true, you can edit those details in if you want, or i'll do it later (on mobile now)</span>
<span class="comment-copy">Is there are a nice way to count the number of fields in each row for the preprocessing?</span>
