<div class="post-text" itemprop="text">
<p>I have a Python question that is more syntax related than anything else. I know that you can access variables dynamically with evaluate, like so, which is useful in a function:</p>
<pre><code>def price_checker(coin):
    if float(eval(coin + 'price')) &gt;= 5:
         do_something
</code></pre>
<p>This logic has been working very well for me. I have hundreds of variable names, updated constantly through API requests in hundreds of threads. My main loop compares prices with my trading strategy to see what fits the criteria through the usage of functions. An example of the code that would be accessed is:</p>
<pre><code>BTCUSDTprice = 7000
ETHUSDTprice = 500
</code></pre>
<p>I would then call the function and input whatever coin matched a previous criteria to then check its price, along with some other variables named like so. I am now trying to accomplish the same thing with arrays. I would have an array, like so:</p>
<pre><code>BTCUSDTclosingpricearray = [7000, 7010, 10, 5000000]
ETHUSDTclosingpricearray = [500, 600, 1000, 600]
</code></pre>
<p>I need to be able to access these arrays dynamically in the very same way that I access variables, and changing my method to do so is not an option, as all of the functions are already created and must stay as they are. With the usage of functions, how can I dynamically access these variables based on function parameters in a way similar to how I access variables with function parameters?
Thank you all in advance. This is very much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have is a name-to-value- or name-to-values-mapping. The solution for that is a dictionary:</p>
<pre><code>prices = {
    "BTC": 7,
    "EDT": 10.5,
}
price_array = {
    "Something": [1, 2, 3, 4],
}
</code></pre>
<p>and then you can use <code>prices[coin]</code>, or with lists <code>price_array[coin][index]</code>.</p>
<p>If you really want to access variables, you can use <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals()</code></a>:</p>
<pre><code>a_price = 1
b_price = 2
globals()[coin + "_price"]
</code></pre>
<p>This is a bad idea in an API, since you give the API-caller access to your internal variables. May end badly.</p>
<p>And you should definitely not use the abomination with <code>eval()</code>, since that actually executes that user-supplied string as code. Will end badly. If you insist, adding <code>"[index]" to the end of your</code>eval`ed string is not that hard. Just a bad idea.</p>
</div>
<span class="comment-copy">you should use a dictionary not loads of variables</span>
<span class="comment-copy">You almost never should use dynamic variable names. There are dict for that. If you want to ever use this code again and maybe even in production, rewrite it.</span>
