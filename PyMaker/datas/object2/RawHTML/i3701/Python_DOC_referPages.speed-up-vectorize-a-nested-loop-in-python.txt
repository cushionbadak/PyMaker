<div class="post-text" itemprop="text">
<p>I have implemented a Python script and I need to use 4 nested loops. I have realized it makes the solution very slow. I have also noticed that a similar loop in Matlab is much faster than in Python.</p>
<p>1) Why is the same loop in Matlab faster than in Python? </p>
<p>2) How can I improve my Python code (e.g. vectorization)? I have tried the functions of itertools (combinations, product), but they don't make the calculation faster.</p>
<p>I created a class of points - each point has coordinates and velocities and I calculate the distance between them and other quantities</p>
<pre><code>N = 1000
for i in range(0,N-1):
    for i2 in range(0,10):
        if p[i].id[i2] == 1:    # check if point is active
            ri = p[i].r[i2]
            vi = p[i].v
        else:
            pass

        for j in range(i+1,N):
            for j2 in range(0,10):
                if p[j].id[j2] == 1:
                    rj = p[j].r[j2]
                    vj = p[j].v
                else:
                    pass

#            and the rest of my function
</code></pre>
<p>Can someone help me?</p>
<p>many thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>In regards to the performance of Python vs Matlab I recommend looking at
<a href="http://wiki.scipy.org/PerformancePython" rel="nofollow noreferrer">http://wiki.scipy.org/PerformancePython</a>. Obviously speed is related to the problem needed to be solved, but I'd imagine for purely mathematical / physical calculations and simulations Matlab will have the upper hand (being, of course, designed for those purposes).</p>
<p>With respect to your code, Python does have a variety of tools available to increase the performance, for example using generators, or, for mathematical applications, Numpy's (backended in C) ndarrays. If you are serious about high performance python you might also want to check out PyPy or Cython.</p>
<p>Also I remember reading somewhere (will update if I find the link) that just by using function calls and python classes, code execution speeds up drastically since the bytecode can be more effectively interpreted.</p>
<p>I'd also point you in the direction of this reply <a href="https://stackoverflow.com/a/16752469/9889462">https://stackoverflow.com/a/16752469/9889462</a> as a starter for speeding up your code using generators. Hope this helps</p>
</div>
<span class="comment-copy">1. a minimum working example could have helped. 2. you cannot improve that code unless there is some information about what your data class is and what is desired behaviour 3. most likely you have to change your data structure</span>
<span class="comment-copy">store <code>p[i]</code> in a variable in the outer loop to save indexed access and drop the <code>else: pass</code> statement.</span>
<span class="comment-copy">Python 2 or 3? <code>range</code> has different performance.</span>
<span class="comment-copy">Is there a possibility of overwriting <code>ri</code> and <code>vi</code> for example? You could <code>break</code> once you find a match. Also you can <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><b><code>zip</code></b></a> <code>pi.id</code> and <code>pi.r</code></span>
<span class="comment-copy">You can first compute all active pairs and then loop over pairs of active pairs.</span>
