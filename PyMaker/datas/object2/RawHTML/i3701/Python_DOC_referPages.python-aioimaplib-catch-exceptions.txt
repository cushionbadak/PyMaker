<div class="post-text" itemprop="text">
<p>im trying to check multiple imap login informations asynchronously with aioimaplib.
This code works as long as the imap servers are reachable and / or the clients don't time out. </p>
<p><strong>What is the correct way to catch the exceptions?</strong></p>
<p>Example exception:</p>
<pre><code>ERROR:asyncio:Task exception was never retrieved future: &lt;Task finished coro=&lt;BaseEventLoop.create_connection() done, defined at G:\WinPython-3.5.4\python-3.5.4.amd64\lib\asyncio\base_events.py:679&gt; exception=TimeoutError(10060, "Connect call failed ('74.117.114.100', 993)")&gt;
</code></pre>
<p>Code:</p>
<pre><code>account_infos = [
    # User            Password     Server
    ('user1@web.com', 'password1', 'imap.google.com'),
    ('user2@web.com', 'password2', 'imap.yandex.com'),
    ('user3@web.com', 'password3', 'imap.server3.com'),
]


class MailLogin:
    def __init__(self):
        self.loop = asyncio.get_event_loop()
        self.queue = asyncio.Queue(loop=self.loop)
        self.max_workers = 2

    async def produce_work(self):
        for i in account_infos:
            await self.queue.put(i)
        for _ in range(max_workers):
            await self.queue.put((None, None, None))

    async def worker(self):
        while True:
            (username, password, server) = await self.queue.get()
            if username is None:
                break

            while True:
                try:
                    s = IMAP4_SSL(server)
                    await s.wait_hello_from_server()
                    r = await s.login(username, password)
                    await s.logout()
                    if r.result != 'NO':
                        print('Information works')
                except Exception as e:
                    # DOES NOT CATCH
                    print(str(e))
                else:
                    break

    def start(self):
        try:
            self.loop.run_until_complete(
                asyncio.gather(self.produce_work(), *[self.worker() for _ in range(self.max_workers)],
                               loop=self.loop, return_exceptions=True)
            )
        finally:
            print('Done')


if __name__ == '__main__':
    MailLogin().start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are <a href="https://docs.python.org/3/library/asyncio-dev.html#detect-exceptions-never-consumed" rel="nofollow noreferrer">several ways</a> to do this but the <code>TimeoutError</code> is probably caught in your <code>except</code>. You don't see it because str(e) is an empty string.</p>
<p>You can see the stacks <a href="https://docs.python.org/3/library/asyncio-dev.html#asyncio-debug-mode" rel="nofollow noreferrer">enabling debug mode</a> of asyncio.</p>
<p>First, you can catch the exception as you did: </p>
<pre><code>async def fail_fun():
    try:
        imap_client = aioimaplib.IMAP4_SSL(host='foo', timeout=1)
        await imap_client.wait_hello_from_server()
    except Exception as e:
        print('Exception : ' + str(e))

if __name__ == '__main__':
    get_event_loop().run_until_complete(fail_fun())
</code></pre>
<p>Second, you can catch the exception at <code>run_until_complete</code> </p>
<pre><code>async def fail_fun():
    imap_client = aioimaplib.IMAP4_SSL(host='foo', timeout=1)
    await imap_client.wait_hello_from_server()

if __name__ == '__main__':
    try:
        get_event_loop().run_until_complete(fail_fun())
    except Exception as e:
        print('Exception : ' + str(e))
</code></pre>
<p>The connection is established wrapping the <code>loop.create_connection</code> coroutine with <code>create_task</code> : we wanted to establish the connection in the IMAP4 constructor and <code>__init__</code> <a href="https://stackoverflow.com/questions/2491819/how-to-return-a-value-from-init-in-python">should return None</a>. </p>
<p>So if your host has a wrong value, you could test it before, or wait for the timeout : </p>
<pre><code>socket.gaierror: [Errno -5] No address associated with hostname
</code></pre>
<p>if a host is not responding before the timeout, you can raise the timeout. And if the connection is lost during the connection, you can add a connection lost callback in the IMAP4 constructor.</p>
</div>
