<div class="post-text" itemprop="text">
<p>Is there an analog, in the <code>asyncio</code> module, to the <a href="https://docs.python.org/3.4/library/subprocess.html#subprocess.CalledProcessError" rel="nofollow noreferrer"><code>CalledProcessError</code></a> exception from the <code>subprocess</code> module?</p>
<p>I would have expected there to be an analog, because the <code>asyncio</code> module creates the <a href="https://docs.python.org/3/library/asyncio-task.html#timeouterror" rel="nofollow noreferrer"><code>TimeoutError</code></a> exception to replace the <a href="https://docs.python.org/3.4/library/subprocess.html#subprocess.TimeoutExpired" rel="nofollow noreferrer"><code>TimeoutExpired</code></a> exception from the <code>subprocess</code> module. But there does not seem to be one.</p>
<p>As a sub-question: Does the <code>CalledProcessError</code> exception only work with instances of the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>Popen</code></a> class? Or does it also work with other classes (e.g. <a href="https://docs.python.org/3/library/asyncio-subprocess.html#process" rel="nofollow noreferrer"><code>Process</code></a> from <code>asyncio</code> or <a href="http://www.tornadoweb.org/en/stable/process.html#tornado.process.Subprocess" rel="nofollow noreferrer"><code>Subprocess</code></a> from <code>tornado.process</code>) which implement (child) process functionality?</p>
<p>It seems to be the case that the <code>CalledProcessError</code> exception might work with instances of classes similar, but distinct to <code>Popen</code>. For example, one can find on GitHub <a href="https://github.com/jupyterhub/batchspawner/blob/master/batchspawner/batchspawner.py#L197" rel="nofollow noreferrer">examples</a> of people calling <code>CalledProcessError</code> with an instance of the <code>Subprocess</code> class from <code>tornado.process</code>.</p>
<p>Note that in the above example, while it is true that <code>tornado.process</code> does have an alias for <code>subprocess.CalledProcessError</code>, based on the <code>import</code> statements at the top of the file that is <em>not</em> the exception being called; it is really <code>subprocess.CalledProcessError</code> being called.</p>
<p>If <code>CalledProcessError</code> also works with instances of the <code>Process</code> class from <code>asyncio</code>, then why doesn't <code>TimeoutExpired</code> also work with instances of the <code>Process</code> class from <code>asyncio</code>? In other words, in <code>asyncio</code> why was it necessary to create a new version (<code>TimeoutError</code>) of the <code>TimeoutExpired</code> exception, but <em>not</em> necessary to create a new version of the <code>CalledProcessError</code> exception?</p>
<p>At the end of the day <a href="https://github.com/python/cpython/blob/master/Lib/subprocess.py#L60" rel="nofollow noreferrer">the source code for <code>CalledProcessError</code></a> isn't that complicated, so if I wanted to create a duplicate version for instances of the <code>Process</code> class from <code>asyncio</code>, I suppose I probably could, but it would seem desirable to first try avoid such code duplication.</p>
<p><strong>Note:</strong> My current working mental model is that the "<code>asyncio.subprocess</code> module aims to do everything that the <code>subprocess</code> module does but asynchronously". To the extent that this mental model is incorrect, this question will likely contain inherent preconceptions/misconceptions.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>asyncio</code> does not contain any equivalent for <code>CalledProcessError</code>, because it does not contain any equivalent for the things that raise <code>CalledProcessError</code>. There is no equivalent for <code>check_call</code>, <code>check_output</code>, <code>check_returncode</code>, or the <code>check</code> argument to <code>run</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no such exception, no. The <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer"><code>asyncio.subprocess</code> implementation</a> should be seen as the equivalent of <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer"><code>subprocess.Popen()</code></a>. From <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process" rel="nofollow noreferrer"><code>asyncio.subprocess.Process</code> documentation</a>:</p>
<blockquote>
<p>The API of the <code>Process</code> class was designed to be close to the API of the <code>subprocess.Popen</code> class[.]</p>
</blockquote>
<p>The <code>CalledProcessError</code> exception is only thrown by the higher-level functions in the same module (such as <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>suprocess.run()</code></a>), each of which drives <code>Popen()</code> under the hood.</p>
<p>Just raise your own exception when the <a href="https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.returncode" rel="nofollow noreferrer"><code>Process.returncode</code> value</a> is non-zero. You can re-use <code>CalledProcessError</code> for this if you want to, all it is is a container for the command run, return code, and the <code>stderr</code> and <code>stdout</code> strings. These are all built-in Python types, nothing <code>subprocess</code> specific.</p>
</div>
<span class="comment-copy"><code>asyncio</code> is not intended to be a <code>subprocess</code> substitute. Your basic premise is wrong.</span>
<span class="comment-copy">@user2357112: but there <i>is</i> <a href="https://docs.python.org/3/library/asyncio-subprocess.html" rel="nofollow noreferrer"><code>subprocess</code>-like support in the <code>asyncio</code> module</a>, which is what I think the OP is referring to. I think the OP meant that that support is supposed to be the co-routine awaitable equivalent.</span>
<span class="comment-copy">@MartijnPieters Yes, it sounds like what you are saying is more correct than what I said.</span>
<span class="comment-copy">I would upvote if I had sufficient reputation. This and the other answer are both very helpful; for this answer I like the last part clarifying how to write one's exception for this case.</span>
