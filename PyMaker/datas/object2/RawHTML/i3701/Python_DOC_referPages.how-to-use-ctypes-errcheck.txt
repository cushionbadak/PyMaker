<div class="post-text" itemprop="text">
<p>The <em>Python Library Reference, Release 3.6.5, paragraph 16.16 ctypes - A foreign function library for Python</em>, gives this example, demonstrating <em>output parameters</em>, in section <em>Function prototypes</em>:</p>
<p>The win32 <em>GetWindowRect</em> function:</p>
<pre><code>WINUSERAPI BOOL WINAPI GetWindowRect(HWND hWnd, LPCRECT lprect);
</code></pre>
<p>The <em>ctypes</em> wrapper:</p>
<pre><code>from ctypes             import POINTER, WINFUNCTYPE, windll, WinError
from ctypes.wintypes    import BOOL, HWND, RECT

prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
paramflags = (1, 'hwnd'), (2, 'lprect')
GetWindowRect = prototype(('GetWindowRect', windll.user32), paramflags)
</code></pre>
<p>Now, how do I actually use <em>GetWindowRect</em>?</p>
<p>Trying</p>
<pre><code>from ctypes import byref, cast
r = RECT()
h = cast(65552, HWND)   # _65552_ is the return value of _GetDesktopWindow_ on my system
result = GetWindowRect([h, byref(r)])
</code></pre>
<p>returns <code>ctypes.ArgumentError: argument 1: &lt;class 'TypeError'&gt;: wrong type</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">[Python]: ctypes - A foreign function library for Python</a> doesn't provide a complete example.</p>
<p><em>code.py</em>:</p>
<pre><code>import sys
import ctypes
from ctypes import wintypes


def errcheck(result, func, args):
    if not result:
        raise ctypes.WinError()
    rc = args[1]
    return rc.left, rc.top, rc.bottom, rc.right


def test_get_window_rect(desktop_wnd_handle):
    print("\n{:s}\n".format(test_get_window_rect.__name__))
    prototype = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.HWND, ctypes.POINTER(wintypes.RECT))
    paramflags = (1, "hwnd"), (2, "lprect")
    GetWindowRect = prototype(("GetWindowRect", ctypes.windll.user32), paramflags)

    print("Without errcheck:\n")
    result = GetWindowRect(ctypes.windll.user32.GetDesktopWindow())
    print("Left: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(result.left, result.top, result.right, result.bottom))
    result = GetWindowRect(0)
    print("Left: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(result.left, result.top, result.right, result.bottom))

    GetWindowRect.errcheck = errcheck

    print("\nWith errcheck:\n")
    result = GetWindowRect(desktop_wnd_handle)
    print("Left: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(*result))
    result = GetWindowRect(0)
    print("Left: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(*result))


def test_get_window_rect_old_style(desktop_wnd_handle):
    print("\n{:s}\n".format(test_get_window_rect_old_style.__name__))
    user32_dll = ctypes.WinDLL("user32")
    get_windows_rect_func = user32_dll.GetWindowRect
    get_windows_rect_func.argtypes = [wintypes.HWND, ctypes.POINTER(wintypes.RECT)]
    get_windows_rect_func.restype = wintypes.BOOL
    rect = wintypes.RECT()
    result = get_windows_rect_func(desktop_wnd_handle, ctypes.byref(rect))
    print("Result: {:d}\nLeft: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(result, rect.left, rect.top, rect.right, rect.bottom))
    rect = wintypes.RECT()
    result = get_windows_rect_func(0, ctypes.byref(rect))
    print("Result: {:d}\nLeft: {:d}, Top: {:}, Right: {:d}, Bottom: {:}".format(result, rect.left, rect.top, rect.right, rect.bottom))




def main():
    hwnd = ctypes.windll.user32.GetDesktopWindow()
    test_get_window_rect_old_style(hwnd)
    test_get_window_rect(hwnd)


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    main()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Function call happens normally (no argument processing - placing them in a list), and only <strong>input</strong> arguments specified</li>
<li><code>errcheck</code> "magic" illustrated</li>
<li>Also included the old fashioned way of calling the function</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre><code>(py35x64_test) e:\Work\Dev\StackOverflow\q050669907&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32


test_get_window_rect_old_style

Result: 1
Left: 0, Top: 0, Right: 1920, Bottom: 1080
Result: 0
Left: 0, Top: 0, Right: 0, Bottom: 0

test_get_window_rect

Without errcheck:

Left: 0, Top: 0, Right: 1920, Bottom: 1080
Left: 0, Top: 0, Right: 0, Bottom: 0

With errcheck:

Left: 0, Top: 0, Right: 1080, Bottom: 1920
Traceback (most recent call last):
  File "code.py", line 58, in &lt;module&gt;
    main()
  File "code.py", line 53, in main
    test_get_window_rect(hwnd)
  File "code.py", line 30, in test_get_window_rect
    result = GetWindowRect(0)
  File "code.py", line 9, in errcheck
    raise ctypes.WinError()
OSError: [WinError 1400] Invalid window handle.
</code></pre>
</blockquote>
</div>
