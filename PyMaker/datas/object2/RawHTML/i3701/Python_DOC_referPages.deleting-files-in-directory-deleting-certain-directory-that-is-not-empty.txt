<div class="post-text" itemprop="text">
<p>I am creating a login system and I want to reset the info whenever the system is restarted. I have stored my information in text files in a directory called <code>accounts</code>. There are text files and subdirectories in the <code>data/accounts</code> directory.</p>
<p>I thought that I can use <code>os.remove</code>, but it does not work. So far, I have tried this.</p>
<pre><code>import os

def infoReset():
    os.remove("data/accounts/")
</code></pre>
<p>But it just gives me back an <code>"operation not permitted"</code> error. How can I delete the <code>data/accounts</code> directory and its contents?</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer">TemporaryDirectory</a>, which will be automatically removed after you're done with it. This prevents bugs related to your manual and potentially insecure management of a directory.</p>
<p>According to the <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer">documentation</a>,</p>
<blockquote>
<p>On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem.</p>
<p>The directory name can be retrieved from the name attribute of the returned object. When the returned object is used as a context manager, the name will be assigned to the target of the as clause in the with statement, if there is one.</p>
<p>The directory can be explicitly cleaned up by calling the cleanup() method.</p>
</blockquote>
<p>Here's an abridged example that applies to your use case:</p>
<pre><code>import tempfile

# At the beginning of your program, create a temporary directory.
tempdir = tempfile.TemporaryDirectory()

...

# Later, remove the directory and its contents.
tempdir.cleanup()
</code></pre>
<p>Alternatively, depending on how feasible this would be in your project, use a context manager.</p>
<pre><code>import tempfile

with tempfile.TemporaryDirectory() as tmpdirname:
    # Write files in the directory...
    # ...

    # As soon as your exit this block, the directory is automatically cleaned up.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.remove()</code> is for files, not directories. <code>os.rmdir()</code> is for removing directories, but only empty directories. To delete a directory and its contents, use <code>shutil.rmtree()</code>.</p>
<pre><code>import shutil

def infoReset():
    shutil.rmtree("data/accounts/")
</code></pre>
</div>
<span class="comment-copy"><code>os.remove()</code> will remove a file. <code>os.rmdir()</code> will remove an empty directory. <code>shutil.rmtree()</code> will delete a directory and all its contents.</span>
<span class="comment-copy">from the docs <a href="https://docs.python.org/3.6/library/os.html#os.remove" rel="nofollow noreferrer">docs.python.org/3.6/library/os.html#os.remove</a> "Remove (delete) the file <i>path.</i> If <i>path</i> is a directory, <code>OSError</code> is raised. Use <code>rmdir()</code> to remove directories."</span>
<span class="comment-copy">Also, trying to homebrew login systems is usually (basically always) a bad idea. Go with a tested and vetted package if you can possibly find one that works for you.</span>
<span class="comment-copy">To save yourself the headache of manual resource management, consider using a <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory" rel="nofollow noreferrer">TemporaryDirectory</a>. See <a href="https://stackoverflow.com/a/50691408">my answer</a> below.</span>
