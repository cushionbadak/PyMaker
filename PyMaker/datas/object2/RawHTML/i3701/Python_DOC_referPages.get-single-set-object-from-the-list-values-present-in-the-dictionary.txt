<div class="post-text" itemprop="text">
<p>I'm trying to build a set from the values of a dictionary. Each dictionary value is a list of strings.</p>
<pre><code>{'a': ['a','b','c'],'b':['a','b','d'],...}
</code></pre>
<p>I am trying to use <code>.update(x)</code> to concatenate a set containing values from the dictionary. I already have success with a standard for-loop:</p>
<pre><code>ingredientSet = set()
for values in recipes.values():
    ingredientSet.update(values)
</code></pre>
<p>What I would like to do, if possible, is to do this in a set comprehension. So far I have this:</p>
<pre><code>ingredientSet = { ingredientSet.update(x) for x in recipes.values() }
</code></pre>
<p>but my IDE is giving me an error that "ingredientSet" is referenced before its assignment. </p>
<p>Is it possible to use <code>.update(x)</code> in the comprehension, or is there another way to concatenate the items into the set in a comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a comprehension you can do that with two <code>for</code>s like:</p>
<h3>Code:</h3>
<pre><code>values_set = {item for items in data.values() for item in items}
</code></pre>
<h3>Test Code:</h3>
<pre><code>data = {'a': ['a','b','c'],'b':['a','b','d']}

values_set = {item for items in data.values() for item in items}
print(values_set)
</code></pre>
<h3>Result:</h3>
<pre><code>{'d', 'b', 'c', 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a functional way to achieve this using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><strong><code>itertools.chain.from_iterable(...)</code></strong></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; my_dict = {'a': ['a','b','c'],'b':['a','b','d']}

&gt;&gt;&gt; set(chain.from_iterable(my_dict.values()))
{'a', 'b', 'c', 'd'}
</code></pre>
<p>Also, adding here the <em>jonsharpe's</em> amswer from the comment using <code>set().union(...)</code>: </p>
<pre><code>&gt;&gt;&gt; set().union(*my_dict.values())
{'a', 'b', 'd', 'c'}
</code></pre>
<hr/>
<h1>Performance Comparison</h1>
<p>Below is the <code>timeit</code> comparison of all the answers on Python3:</p>
<ul>
<li><p><strong>Using <code>itertools.chain.from_iterable</code></strong> - 0.558 usec per loop</p>
<pre><code>mquadri$ python3 -m timeit -s "from itertools import chain; my_dict = {'a': ['a','b','c'],'b':['a','b','d']}" "set(chain.from_iterable(my_dict.values()))"
1000000 loops, best of 3: 0.558 usec per loop
</code></pre></li>
<li><p><strong>Using <em>set comprehension</em></strong> - 0.585 usec per loop</p>
<pre><code>mquadri$ python3 -m timeit -s "from itertools import chain; my_dict = {'a': ['a','b','c'],'b':['a','b','d']}" "{item for items in my_dict.values() for item in items}"
1000000 loops, best of 3: 0.585 usec per loop
</code></pre></li>
<li><p><strong>Using <code>set().union(...)</code></strong> - 0.614 usec per loop</p>
<pre><code>mquadri$ python3 -m timeit -s "from itertools import chain; my_dict = {'a': ['a','b','c'],'b':['a','b','d']}" "set().union(*my_dict.values())"
1000000 loops, best of 3: 0.614 usec per loop
</code></pre></li>
</ul>
</div>
<span class="comment-copy">Don't you just want <code>set().union(*recipes.values())</code>?</span>
<span class="comment-copy">@jonrsharpe This works, thank you! I guess we never learned about the <code>*</code> functionality.</span>
<span class="comment-copy">This works, too, thank you!!</span>
<span class="comment-copy">So these are all very close from a performance point of view.  itertools can often be faster if the data set is larger.  What happens with a lot more data?</span>
