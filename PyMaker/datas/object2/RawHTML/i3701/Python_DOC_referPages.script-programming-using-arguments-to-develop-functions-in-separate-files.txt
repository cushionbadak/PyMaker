<div class="post-text" itemprop="text">
<p>When programming in a scripting language (Python, Perl, Ruby or R), I try to write functions and keep them in separate files to keep my code modular.</p>
<p>For debugging, I often put the arguments of the function inside the function body and un-comment them as soon as I'm done.</p>
<p>Moreover, I often place a call to the function right after its definition, which I also uncomment when I'm done testing.</p>
<p>So in the end, my file looks like this</p>
<pre><code>def add(a, b):
    # a = 1
    # b = 2
    c = a + b
    return c

# add(1, 2)
</code></pre>
<p>Is there a more elegant way to achieve this?</p>
<p>Moreover, I think common practice would be to remove these comments when shipping the code to others. Is there a way to achieve this in a JavaDoc like manner, while keeping "real" comments (i.e. not uncommented code)?</p>
<p>I should mention, that I often write wrapper functions around calls to plot functions in Matplotlib or R (ggplot, etc) and since in these cases the output is a graph, it doesn't fit so well into test-driven development frameworks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The proper way would be to write some unit tests.<br/>
If you want to have your tests very close to a source code, you should check out <a href="https://docs.python.org/3/library/doctest.html#module-doctest" rel="nofollow noreferrer">doctest</a> module, it allows you to run tests placed directly in doc comments.<br/>
Neat thingy.
<br/><strong>Edit:</strong> 
In yours example it would look like this:</p>
<pre><code>def add(a, b): 
    """ Returns sum of a and b

    &gt;&gt;&gt; add(1, 2)
    3

    """
    c = a + b
    return c
</code></pre>
<p>And run the tests like this:</p>
<pre><code>python -m doctest -v yourFile.py
</code></pre>
</div>
<span class="comment-copy">What exactly is it that you're hoping to achieve? It's not clear to me what part you're asking about.</span>
<span class="comment-copy">First, putting the argument values in the function seems kind of pointless—you still need to write the code to call the function, with two arguments, so why ignore the parameter values like that?</span>
<span class="comment-copy">As for the second option: One option is to turn those calls into permanent unit tests instead of temporary debugging code. For a bit of extra setup cost, you get a lot more flexibility, and you get free regression tests to make sure you don't break the function later.</span>
<span class="comment-copy"><i>"Is there a more elegant way to achieve this?"</i> Yes it is called test driven development (TDD) and it involves using a testing framework to create assertions (expectations) as to the intended behavior of a method and then running these tests to ensure the functionality is correct. If it does not pass the test you fix the method until it does pass the test. Terms to look into TDD, Red Green Refactor.</span>
<span class="comment-copy">If you put each function in a separate <code>.py</code> file (which makes it a module), you could also put the call to the function at the end of each one inside an <code>if __name__ == '__main__':</code> statement because that way it will only be executed if the <code>.py</code> file is run directly—but not when the module the function is in is <code>import</code>ed by some other script file.</span>
<span class="comment-copy">Nobody should have down-voted this; it's the correct answer. Tests self-document code while helping you keep it modular.</span>
<span class="comment-copy">Thanks for pointing to the doctest framework. Its slightly different approach in comparison to other unit tests is very interesting for me.</span>
