<div class="post-text" itemprop="text">
<p>Using argparse in a Jupyter Notebook throws a TypeError. The same code works fine if I execute the same code as a script. MWE:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Foo')
parser.add_argument('--name', '-n', default='foo', help='foo')

args = parser.parse_args()
</code></pre>
<p>Result:</p>
<pre><code>TypeError: 'level' is an invalid keyword argument for this function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ipython is running some command-line arguments in the background. This interfers with argparse and optparse.</p>
<p>See <a href="https://github.com/spyder-ide/spyder/issues/3883" rel="nofollow noreferrer">this bug for Spyder</a> (Ipython IDE), where <code>-f</code> was being added as a command option and crashing as there was no handler for <code>-f</code>.</p>
<p>You could try checking the arguments currently in play (as they did for the Spyder bug) and putting a dummy handler in place.</p>
<p>Run </p>
<pre><code>import sys
print(sys.argv)
</code></pre>
<p>inside Ipython and see what it outputs.</p>
<p>On my system, it gives </p>
<blockquote>
<p>['/usr/lib/python3.6/site-packages/ipykernel_launcher.py', '-f', '/run/user/1000/jupyter/kernel-7537e4dd-b5e2-407c-9d4c-7023575cfc7c.json']</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/argparse.html#prog" rel="nofollow noreferrer">Argparse assumes the first entry is the program name</a> (<code>sys.argv[0]</code>). In order to fix this, I had to call</p>
<pre><code>parser = argparse.ArgumentParser(prog='myprogram', description='Foo')
</code></pre>
<p>... and now <code>argparse</code> works in my notebook.</p>
</div>
<div class="post-text" itemprop="text">
<p>One solution is to parse an empty list of arguments:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Foo')
parser.add_argument('--name', '-n', default='foo', help='foo')

args = parser.parse_args([])
</code></pre>
<p>Another is to use parse_known_args:</p>
<pre><code>args, _ = parser.parse_known_args()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When I run your code in a Notebook, I get an <code>argparse</code> usage error message:</p>
<pre><code>usage: ipykernel_launcher.py [-h] [--name NAME]
ipykernel_launcher.py: error: unrecognized arguments: -f /run/user/1000/jupyter/kernel-a6504c0c-bed2-4405-8704-c008f52dcba6.json
</code></pre>
<p>With a <code>print(sys.argv)</code> I get</p>
<pre><code>['/home/paul/.local/lib/python3.6/site-packages/ipykernel_launcher.py', '-f', '/run/user/1000/jupyter/kernel-a6504c0c-bed2-4405-8704-c008f52dcba6.json']
</code></pre>
<p><code>sys.argv</code>, which <code>parser</code> parses, contains the values used to launch the Notebook server, which this particular <code>parser</code> is not setup to handle.  </p>
<p><code>parser.parse_known_args()</code> displays:</p>
<pre><code>(Namespace(name='foo'),
 ['-f',
  '/run/user/1000/jupyter/kernel-a6504c0c-bed2-4405-8704-c008f52dcba6.json'])
</code></pre>
<p>That extra stuff that your parser can't handle is put in the <code>extras</code> list.</p>
<p>Run with a custom <code>argv</code> list works:</p>
<pre><code>parser.parse_args(['-n', 'foobar'])
Namespace(name='foobar')
</code></pre>
<hr/>
<p>It's a good idea to put <code>argparse</code> code (at least the <code>parse_args</code> line) in a <code>__main__</code> block, so it is not run when the script is imported. It will still run when the script is run as a script.</p>
<pre><code>if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Foo')
    parser.add_argument('--name', '-n', default='foo', help='foo')

    args = parser.parse_args()
    print(args)
</code></pre>
<p>This script also works when using <code>%run stack50763033.py</code>.  You can even give it arguments as you would with a script:</p>
<pre><code>%run stack50763033.py -n testing
</code></pre>
<hr/>
<p>I have no idea what code is producing the <code>level</code> keyword error.  You'll have to give us the traceback if you want help with that.</p>
</div>
<span class="comment-copy">Thanks for your comment! Unfortunately, the import does not work for me (ModuleNotFound).</span>
<span class="comment-copy">Looks like Ipython has the option of including a set of pip modules (like argparse) which you can use without them being system-installed. These they call the external modules. If you have a standard system install of argparse, ignore the external ref. The first point still stands though - you need to follow what the Spyder team did. Run print(sys.argv), find out what is missing, add a dummy handler.</span>
