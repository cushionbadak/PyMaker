<div class="post-text" itemprop="text">
<p>In Python, I'd like to test for the existence of a keyword in the output of a Linux command. The keywords to test for would be passed as a list as shown below. I've not spent a lot of time with Python so brute-force approach is below. Is there a cleaner way to write this? </p>
<pre><code>def test_result (result, mykeys):

  hit = 0
  for keyword in mykeys:
     if keyword in result:
        hit = 1
        print "found a match for " + keyword

  if hit == 1:
     return True


result = "grep says awk"
mykeys = ['sed', 'foo', 'awk']
result = test_result (result, mykeys)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>any</code> built-in will do it.</p>
<pre><code>def test_result(result, mykeys):
    return any(key in result for key in mykeys)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a regular expression to accomplish this. A regular expression of the form <code>a|b|c</code> matches any of <code>a</code>, <code>b</code> or <code>c</code>. So, you'd want something of the form:</p>
<pre><code>import re
p = re.compile('|'.join(mykeys))
return bool(p.search(result))
</code></pre>
<p><code>p.search(result)</code> searches the entire string for a match of the regular expression; it returns a match (which is truth-y) if present and returns <code>None</code> (which is false-y) otherwise. Converting the result to <code>bool</code> gives <code>True</code> if it matches and <code>False</code> otherwise.</p>
<p>Putting this together, you'd have:</p>
<pre><code>import re

def test_result(result, mykeys):
  p = re.compile('|'.join(mykeys))
  return bool(p.search(result))
</code></pre>
<p>You can also make this more concise by not pre-compiling the regular expression; this should be fine if it's a one-time use:</p>
<pre><code>def test_result(result, mykeys):
  return bool(re.search('|'.join(mykeys), result))
</code></pre>
<p>For reference, read about <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python's <code>re</code> library</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function does two things, printing and returning the result. You could break them up like so:</p>
<pre><code>def test_result(result, mykeys):
    return [k in result for k in mykeys]

def print_results(results):
    for result in results:
        print("found a match for " + result)
</code></pre>
<p><code>test_result</code> will return a list with all the found keys, or an empty list. The empty list is falsey, so you can use it for whatever tests you want. The print_results is only needed if you actually want to print, otherwise you can use the result in some other function.</p>
<p>If you only want to check for the presence and don't care about which key you found, you can do something like:</p>
<pre><code>def test_result(result, my_keys):
    return any(map(lambda k: k in result, mykeys))
</code></pre>
<p>If you're using python3 (as you should be), I believe this will be lazy and only evaluate as much of the list as necessary. </p>
<p>See <a href="https://stackoverflow.com/questions/50703721/a-more-concise-way-to-write-this-python-code/50703846#50703846">A more concise way to write this Python code</a> for a more concise version of this last function.</p>
</div>
<div class="post-text" itemprop="text">
<p>To search for an element in a list, you can use a <code>for-else</code> statement. In particular, this allows to return the found element.</p>
<pre><code>def test_result (result, mykeys):
   for keyword in mykeys:
     if keyword in result: break
   else:
       return None
   return keyword

print(test_result("grep says awk", ['sed', 'foo', 'awk'])) # 'awk'
print(test_result("grep says awk", ['bar', 'foo'])) # None
</code></pre>
</div>
<span class="comment-copy">You might want to ask here <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">Had no idea.  That would be best. Thanks</span>
<span class="comment-copy">do NOT use the identity operator (<code>is</code>) for equality testing. Your <code>if hit is 1</code> test only seems to work because of an implementation detail in CPython, you want <code>if hit == 1</code></span>
<span class="comment-copy">Agreed. I've fixed it in the question. Thanks for the catch.</span>
<span class="comment-copy">I think this is a better approach, you can avoid those ifs easily with this method</span>
<span class="comment-copy">'Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems.'</span>
