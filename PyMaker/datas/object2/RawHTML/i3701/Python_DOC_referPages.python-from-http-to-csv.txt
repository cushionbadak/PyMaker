<div class="post-text" itemprop="text">
<p>I need to write a string from <a href="http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826" rel="nofollow noreferrer">HTTP</a> into CSV file.
My columns have to be: <code>LATITUDE,LONGITUDE, OSM_ID, HIGHWAY, UPDATED_AT</code></p>
<p>This is a sample of the output of HTTP link starting from top:</p>
<pre><code>{
  "datetime": "2018-06-08T08:26:09.375Z",
  "success": true,
  "bbox": {
    "xmin": "12.335513",
    "ymin": "42.035682",
    "xmax": "12.758896",
    "ymax": "42.050826"
  },
  "data": [
    {
      "aggregate_id": 30201274,
      "ppe": 0.316954620298806,
      "geom": {
        "type": "Point",
        "coordinates": [
          12.532972800901,
          42.045435384225
        ]
      },
      "osm_id": "37015042",
      "highway": "motorway",
      "updated_at": "2018-01-20T03:27:11.047Z"
    },
    {
      "aggregate_id": 30201275,
      "ppe": 0.318124963244448,
      "geom": {
        "type": "Point",
        "coordinates": [
          12.5329908742,
          42.045615145535
        ]
      },
      "osm_id": "37015042",
      "highway": "motorway",
      "updated_at": "2018-01-20T03:27:11.047Z"
    },
    {
      "aggregate_id": 30201276,
      "ppe": 0.204792151096739,
      "geom": {
        "type": "Point",
        "coordinates": [
          12.533008947499,
          42.045794906844
        ]
      },
      "osm_id": "37015042",
      "highway": "motorway",
      "updated_at": "2018-01-20T03:27:11.047Z"
    },
    {
      "aggregate_id": 30201277,
      "ppe": 0.194797261691664,
      "geom": {
        "type": "Point",
        "coordinates": [
          12.533030586679,
          42.045974206816
        ]
      },
      "osm_id": "37015042",
      "highway": "motorway",
      "updated_at": "2018-01-20T03:27:11.047Z"
    }
  ]
}
</code></pre>
<p>Each row is separated by ','.</p>
<p>I wrote this code</p>
<pre><code>import pandas as pd
import csv
import urllib.request

from urllib.request import urlopen

CSV_URL = 'http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826'

request = urllib.request.Request(CSV_URL)
response = urllib.request.urlopen(request)
response.read().decode('utf-8')

#write into csv
colNames = ["longitude","latitude","ppe","osm_id","highway","updated_at"]
data = pd.read_csv(CSV_URL, names=colNames, sep=',')
</code></pre>
<p>The problem is how to split the string from http into rows. Someone can help me?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple implementation using <code>pandas</code> and <code>requests</code>:</p>
<pre><code>import pandas as pd
import requests

url = 'http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826'
response = requests.get(url).json()

df = pd.DataFrame(response['data'])
</code></pre>
<p>You can extract the <code>longitude</code> and <code>latitude</code> from the <code>geom</code> column like this:</p>
<pre><code>df['longitude'] = df.apply(lambda row: dict(row['geom'])['coordinates'][0], axis=1)
df['latitude'] = df.apply(lambda row: dict(row['geom'])['coordinates'][1], axis=1)
</code></pre>
<p>Finally, save the required columns to a <code>csv</code> file like so:</p>
<pre><code>df[['latitude', 'longitude', 'osm_id', 'highway', 'updated_at']].to_csv('output.csv', index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way to do it : </p>
<pre><code>import pandas as pd
import urllib.request
from urllib.request import urlopen
CSV_URL = "http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826"

request = urllib.request.Request(CSV_URL)
response = urllib.request.urlopen(request)
test = json.loads(response.read())["data"]

def transform_row(x):
  x["longitude"] = x["geom"]["coordinates"][0]
  x["latitude"] = x["geom"]["coordinates"][1]
  del x["geom"]
  return x

res = list(map(transform_row, test))
pd.DataFrame(res)[['latitude', 'longitude', 'osm_id', 'highway', 'updated_at']].to_csv('output.csv', index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A straightforward approach.</p>
<ol>
<li>Fetch the data</li>
<li>Order the data</li>
<li>Export to CSV</li>
</ol>
<pre class="lang-py prettyprint-override"><code>import csv
import requests


def main():
    url = 'http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826'
    data = fetch_data(url)
    rows = [row(r) for r in data]
    fields = ['LATITUDE', 'LONGITUDE', 'OSM_ID', 'HIGHWAY', 'UPDATED_AT']
    with open('output.csv', "w") as output:
        writer = csv.writer(output, lineterminator='\n')
        writer.writerows([fields])
        writer.writerows(rows)


def row(data):
    r = list()
    r.append(data['geom']['coordinates'][0])  # LATITUDE
    r.append(data['geom']['coordinates'][1])  # LONGITUDE
    r.append(data['osm_id'])  # OSM_ID
    r.append(data['highway'])  # HIGHWAY
    r.append(data['updated_at'])  # UPDATED_AT
    return r


def fetch_data(url):
    response = requests.get(url).json()
    return response['data']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding to other answers, here is another way of doing it with <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv.writer</code></a>:</p>
<pre><code>from requests import get
from csv import writer

CSV_URL = 'http://www.smartroadsense.it/bb/12.335513/42.035682/12.758896/42.050826'

response = get(CSV_URL).json()

headers = ['LATITUDE', 'LONGITUDE', 'OSM_ID', 'HIGHWAY', 'UPDATED_AT']
columns = ["osm_id", "highway", "updated_at"]

with open('output.csv', 'w') as out:
    csv_writer = writer(out)
    csv_writer.writerow(headers)
    for row in response['data']:
        items = row['geom']['coordinates'] + [row[col] for col in columns]
        csv_writer.writerow(items)

print(open('output.csv').read())
</code></pre>
<p>Which outputs this csv file:</p>
<pre><code>LATITUDE,LONGITUDE,OSM_ID,HIGHWAY,UPDATED_AT
12.532972800901,42.045435384225,37015042,motorway,2018-01-20T03:27:11.047Z
12.5329908742,42.045615145535,37015042,motorway,2018-01-20T03:27:11.047Z
12.533008947499,42.045794906844,37015042,motorway,2018-01-20T03:27:11.047Z
12.533030586679,42.045974206816,37015042,motorway,2018-01-20T03:27:11.047Z
...
</code></pre>
</div>
<span class="comment-copy">The question has nothing to do with <code>machine-learning</code> - kindly do not spam the tag (edited &amp; removed).</span>
<span class="comment-copy">It has nothing to do with requests either (tag removed).</span>
<span class="comment-copy">Your source string's format is not CSV, it's JSON. Use <code>json.load()</code> to parse it into a Python dict, then build your csv from this dict (you don't need panda for this, the stdlib's <code>csv</code> module will be enough).</span>
<span class="comment-copy">Thanks for your time! I have another question: could you explain me the following instruction, please? 'lambda row: dict(row['geom'])['coordinates'][0]', in particular I didn't understand how the program can read each row.</span>
<span class="comment-copy">the apply function (with axis=1) applies some transformation to all the rows of the DataFrame.</span>
