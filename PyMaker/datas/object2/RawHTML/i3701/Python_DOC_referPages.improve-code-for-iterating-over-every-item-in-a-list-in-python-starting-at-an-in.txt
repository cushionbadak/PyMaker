<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/36341484/get-day-name-from-weekday-int">Get Day name from Weekday int</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>In this code I wanted to iterate over each item in the list starting at index [4] finishing at index [3].  Is there any way to improve the cumbersome manner in which I have written the code to achieve this?  I tried "for a in days[4:3] but this only iterated indexes 4 to 6 and never 0-3;</p>
<pre><code>mar = int(input())
days = ["0","1","2","3","4","5","6"]
count = 0
x = "0"
while count &lt; mar:
  for a in days[4],[5],[6],[0],[1],[2],[3]:
    if count &lt; mar:
      count += 1
      x = a   
print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>input = '4'                       
start_day = int(input)             
days = ["0","1","2","3","4","5","6"]
days_before = []
# Loop                
for day in days: 
    if int(day) &gt; start_day:      # Either print
        print day    
    else:
        days_before.append(day)   # Or dump to second list
else:                             # When finished
    for day in days_before:       # Print second list
        print day
</code></pre>
<hr/>
<p>Edit: since you now told us your purpose below, I think all you need is <a href="https://stackoverflow.com/a/36341648/6060083">this</a>. </p>
</div>
<div class="post-text" itemprop="text">
<h3>itertools islice + cycle</h3>
<p>You can use <code>itertools</code> to create an iterator. This is a lazy solution which requires you to call <code>next</code> on the iterator over a specified range.</p>
<pre><code>from itertools import islice, cycle

c = islice(cycle(days), 5, None)

for _ in range(len(days)):
    print(next(c))

5
6
0
1
2
3
4
</code></pre>
<p>Only recommended <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">for small iterables</a>:</p>
<blockquote>
<p>Note, this member of the toolkit may require significant auxiliary
  storage (depending on the length of the iterable).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Many thanks for your review and suggestion which works perfectly.  I was thinking of something similar to your suggestion i.e creating two lists so I am glad to see that as a novice to python programming I am thinking the right way.  Please see below your suggestion integrated into my original code to deliver what I was attempting;</p>
<pre><code> #This programme is intended to find the number of day of week for N-th day (mar) of a year provided that in this year January 1 is based on user entry (start_day). Days of week are numbered as: 0 — Sunday, 1 — Monday, 2 — Tuesday, ..., 6 — Saturday. An integer K in the range 1 to 365 is given.                        
start_day = int (input("Enter day number to start:- ")) 
mar = int(input("Enter nth day of the year to find:-"))    
count = 0      
days = ["0","1","2","3","4","5","6"]
days_before = []
while count &lt; mar:
# Loop                
  for day in days: 

    if int(day) &gt; start_day: 
      if count &lt; mar:
        count += 1     # Either print
        print (day)    
    else:
        days_before.append(day)   # Or dump to second list
  else:                             # When finished
    for day in days_before: 
      if count &lt; mar:
        count += 1       # Print second list
        print (day)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>start = 4
for i in range(start, start+min(mar, len(days))):
    print(days[i % len(days)])

# mar = 4 --&gt; 4, 5, 6, 0
# mar = 10 --&gt; 4, 5, 6, 0, 1, 2, 3
</code></pre>
</div>
<span class="comment-copy">you are checking in whole list. try for a in days:</span>
<span class="comment-copy">Yes I wanted to iterate over the whole list based on a user specific starting index and finish based on a user specific number of index iterations.  thx</span>
<span class="comment-copy">That's actually pretty nice and lean. Can you guess what 'small' is? I.e. will it perform good bad above 10, 100, 1000, 10000 etc?</span>
<span class="comment-copy">@sudonym, Thanks - but lean only for small iterables. Sorry, I haven't tested myself about what small means. I'll do some testing if I have some time.</span>
<span class="comment-copy">I also have a look myself - this is good for rotating user agents (for example)</span>
<span class="comment-copy">I have up-voted but as I am new to the forum it doesn't seem to count.</span>
<span class="comment-copy">So all you want to do is to tell the weekday of, for example, the 136th day of year x, am I correct? Why not just use the datetime module?</span>
<span class="comment-copy">Correct.  But it was an exercise I was given to complete whereby the days had to be represented by the numbers given in the list and return the 2n"th day using the allocated number.  Believe it or not I passed the exercise with the code I cobbled together but I was aware it was cumbersome and kept thinking there must be a more elegant and flexible way to accomplish the goal.  It wasn't a great exercise but it did get me thinking about iterating over all items in a list from a chosen index which meant i learnt something useful anyway.</span>
<span class="comment-copy">get it. Good attitude</span>
<span class="comment-copy">mar = 10 should return 6?</span>
<span class="comment-copy">An explanation of the logic would be more helpful.</span>
