<div class="post-text" itemprop="text">
<p>I want to mock the method <code>is_room_member</code> where <code>invitee</code> is a string and
<code>occupants</code> is a list of string. </p>
<p>If <code>invitee = 'batman'</code> and <code>occupants = ['batman', 'superman']</code> the method <code>is_room_member</code> returns <code>True</code>.</p>
<pre><code>class Foo:
    @staticmethod
    def is_room_member(invitee, msg):
        return invitee in msg.frm.room.occupants
</code></pre>
<p><code>msg</code> is the object which needs to be mocked so that I can test this method.</p>
<p>How can I test this method since it'll require this <code>msg</code> object which has nested attributes ?</p>
<p>I want the test to be something like:</p>
<pre><code>class Testing(unittest.TestCase):
    def test_is_room_member(self):
        occupants = ['batman', 'superman']
        # mocking 
        # msg = MagicMock()
        # msg.frm.room.occupants = occupants
        self.assertTrue(Foo.is_room_member('batman', msg))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is an existing answer for your question:
<a href="https://stackoverflow.com/questions/11978945/mocking-nested-properties-with-mock">Mocking nested properties with mock</a></p>
<pre><code>import unittest
import mock

class Foo:
    @staticmethod
    def is_room_member(invitee, msg):
        return invitee in msg.frm.room.occupants

class Testing(unittest.TestCase):
    def test_is_room_member(self):
        occupants = ['batman', 'superman']

        # mocking
        mocked_msg = mock.MagicMock()
        mocked_msg.frm.room.occupants = occupants

        self.assertTrue(Foo.is_room_member('batman', mocked_msg))

if __name__ == '__main__':
    unittest.main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since MagicMock is so magical...it is exactly what you wrote.</p>
<pre><code>class Testing(unittest.TestCase):
    def test_is_room_member(self):
    occupants = ['batman', 'superman']
    msg = MagicMock()
    msg.frm.room.occupants = occupants
    print(msg.frm.room.occupants) # &gt;&gt;&gt; ['batman', 'superman']
    self.assertTrue(Foo.is_room_member('batman', msg))
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">unittest docs</a>:</p>
<blockquote>
<p>Mock and MagicMock objects create all attributes and methods as you access them and store details of how they have been used. </p>
</blockquote>
<p>Unless you say otherwise, everything returns a MagicMock!</p>
</div>
