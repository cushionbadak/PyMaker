<div class="post-text" itemprop="text">
<p>I'm just getting back into python, and I'm trying to search over two characters at a time through a string, and replace them with something else. Such as searching through the string "aah" for the string "aa" and replacing it with something else, such as "xx" but when I try to run it, it says type must be a string, not int. This is my code, any help would be greatly appreciated, thanks</p>
<pre><code>test = input("enter words to encrypt\n")
#print(test)

#change a letter
def changea(test):
    #print(test)
    outp = ""
    for i in test:
        if i &amp; i+1  == "aa":
            outp += "x"
        else:
            outp += i

    print(outp)
changea(test)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ideally, you should use <code>replace</code> or <code>re.sub</code>. But if you are committed to using a loop, here's what you may try:</p>
<pre><code>def changea(test):
    pairs = zip(test, test[1:] + "$")
    out = ""
    for x, y in pairs:
        if x == "a" and y == "a":
            out += "x"
            next(pairs) # Skip the next iteration
        else:
            out += x
    return out

changea("Maary haad aa little laamb")
#'Mxry hxd x little lxmb'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>&amp;</code> operator does a <code>bitwise and</code> on two integers. Your for-loop loops over a string so the loop variable <code>i</code> takes successive characters of the string as its values. Hence the error: you are applying the <code>&amp;</code> operator on a character. In addition, <code>i+1</code> is meaningless: it tries to apply the <code>+</code> operator to a character and an integer - python will complain that you cannot concatenate a character and an integer.</p>
<p>The <code>i &amp; i+1</code> expression was meant to give you two adjacent characters but it's wrong.</p>
<p>There are a few ways to proceed: one is to loop over the string using indices (which I guess is what you were trying to do, since you named the for-loop variable <code>i</code>, the traditional name for a loop index).</p>
<pre><code>for i in range(len(test)):
</code></pre>
<p>will make <code>i</code> an integer ranging from <code>0</code> to <code>len(test)-1</code>. Then you need to slice off two characters of the string starting at position <code>i</code>:</p>
<pre><code>for i in range(len(test)):
     if test[i:i+2] == "aa":
         outp += "x"
     else:
         outp += test[i]
</code></pre>
<p>You have to remember that the index over a string goes from <code>0</code> to <code>len(string) - 1</code> and you also have to remember that the slice <code>test[i:j]</code> is the piece of the string between indices <code>i</code> and <code>j-1</code> (<em>NOT</em> <code>j</code>).</p>
<p>This is not particularly idiomatic python, but I hope it's understandable.      </p>
</div>
<span class="comment-copy">the logical and operator in Python is the keyword <code>and</code>. <code>&amp;</code> is the <i>bitwise</i> and operator.</span>
<span class="comment-copy">To address your main problem, <code>i+1</code> fails because <code>i</code> is a string from the string <code>test</code>, and <code>1</code> is an integer. You probably meant to <i>index</i> the string with the integer, rather than directly attempt to add the integer and string.</span>
<span class="comment-copy">Related - <a href="https://stackoverflow.com/q/21303224/2823755">Iterate over all pairs of consecutive items in a list</a> - This accepted answer would work for a string also.</span>
<span class="comment-copy">you can use if test.count("a") == 2:  # do something</span>
<span class="comment-copy">You may find <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> useful</span>
<span class="comment-copy">So how would you change this to not exclude the last character? Would that be with using the replace function?</span>
<span class="comment-copy">Actually I switched to replacing, thanks</span>
<span class="comment-copy">Smart move; but I fixed it, anyway.</span>
