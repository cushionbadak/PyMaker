<div class="post-text" itemprop="text">
<p>How to calculate center point of each grid box which is closest to the point x,y. Here is the code for generating grid.I want to save all the center points in a list centers and then find closest center point. here is the code.</p>
<pre><code>from PIL import Image, ImageDraw

if __name__ == '__main__':
    height = 600
    width = 600
    centers=[]
    image = Image.new(mode='L', size=(height, width), color=255)

    # Draw some lines
    draw = ImageDraw.Draw(image)
    y_start = 0
    y_end = image.height
    step_size = int(image.width / 10)

    for x in range(0, image.width, step_size):
        line = ((x, y_start), (x, y_end))
        draw.line(line, fill=128)

    x_start = 0
    x_end = image.width

    for y in range(0, image.height, step_size):
        line = ((x_start, y), (x_end, y))
        draw.line(line, fill=128)

    del draw

    image.show()
</code></pre>
<p>I found centroids like this</p>
<pre><code>for x in range(0, image.width, step_size):
        for y in range(0, image.height, step_size):
            centers.append([(x+(x+step_size))/2,(y+(y+step_size))/2])
</code></pre>
<p>How to find a centroid which is near to (x,y) point which is obtained on mouse click?</p>
</div>
<div class="post-text" itemprop="text">
<p>The same question about Euclidean distance was asked <a href="https://codereview.stackexchange.com/questions/28207/finding-the-closest-point-to-a-list-of-points">here</a>. In your case, that would look like this:</p>
<pre><code>def closest_node(node, nodes):
    nodes = np.asarray(nodes)
    dist = np.sum((nodes - node)**2, axis=1)
    return np.argmin(dist)

mouse_xy = (20, 20)
closest_centroid = centers[closest_node(mouse_xy, centers)]

print(closest_centroid)

[30, 30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Someone could definitely improve on this but <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">you can use the min function</a> built in for python. I threw this together:</p>
<pre><code># Simulated mouse click
x_click = 542
y_click = 253

find_closest_x = min(centers, key=lambda x_center: abs(x_click - x_center[0]))
find_closest_y = min(centers, key=lambda y_center: abs(y_click - y_center[1]))
closest = find_closest_x[0], find_closest_y[1]
print(closest)
</code></pre>
<p>Although a little bit whacky, this find the closest  values for x and y in the list <code>centers</code></p>
</div>
<span class="comment-copy">Your code produces the correct centroids. So what is the problem you're having?</span>
<span class="comment-copy">I want a centroid in the list "centers" who is near to x,y co-ordinates. x,y is obtained after click of mouse on image.</span>
<span class="comment-copy">What is your definition of "near"?</span>
<span class="comment-copy">Having least distance to centroid.</span>
<span class="comment-copy">Thank you, This solution also worked for me.</span>
