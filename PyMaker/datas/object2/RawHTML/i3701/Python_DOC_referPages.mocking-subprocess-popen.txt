<div class="post-text" itemprop="text">
<p>I have a module utils.py which has this run_cmd() method</p>
<pre><code>def run_cmd(cmd):
    pipe = subprocess.Popen(cmd,
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)
    print(pipe.communicate())
    print(pipe.returncode)
    stdout, stderr = [stream.strip() for stream in pipe.communicate()]
    output = ' - STDOUT: "%s"' % stdout if len(stdout) &gt; 0 else ''
    error = ' - STDERR: "%s"' % stdout if len(stderr) &gt; 0 else ''
    logger.debug("Running [{command}] returns: [{rc}]{output}{error}".format(
                 command=cmd,
                 rc=pipe.returncode,
                 output=output,
                 error=error))

    return pipe.returncode, stdout, stderr
</code></pre>
<p>I wrote a unit-test using mock and this link <a href="https://stackoverflow.com/questions/25692440/mocking-a-subprocess-call-in-python?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa">stackoverflow</a> as a reference</p>
<pre><code>  @patch('subprocess.Popen')
  @patch('utils.logger.debug')
  def test_run_cmd(self, mock_popen, mock_log):
    cmd = 'mock_command'
    mocked_pipe = Mock()
    attrs = {'communicate.return_value': ('output', 'error'), 'returncode': 0}
    mocked_pipe.configure_mock(**attrs)
    mock_popen.return_value = mocked_pipe
    log_calls = [call('Running [mock_command] returns: [0]outputerror')]
    utils.run_cmd(cmd)
    mock_popen.assert_called_once_with(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    mock_log.assert_has_calls(log_calls)
</code></pre>
<p>I got this as output when I run the nosetest</p>
<pre><code>        stdout, stderr = [stream.strip() for stream in pipe.communicate()]
ValueError: need more than 0 values to unpack
-------------------- &gt;&gt; begin captured stdout &lt;&lt; ---------------------
&lt;MagicMock name='Popen().communicate()' id='140197276165008'&gt;
&lt;MagicMock name='Popen().returncode' id='140197276242512'&gt;

--------------------- &gt;&gt; end captured stdout &lt;&lt; ----------------------
FAILED (errors=1)
</code></pre>
<p>Why is the pipe.communicate() not printing the ('output', 'error') or the pipe.returncode not printing the 0, but their mock methods? Where did it go wrong? How could I solve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ah, You already have an answer of your question. look closely and you will know why. You have to mock like you did for <code>logger</code>. You forgot to mention <code>utils</code> while creating mocked object.</p>
<pre><code>@patch('utils.subprocess.Popen')
</code></pre>
<p>Now, mocking the nested function with multiple values, I think you should look at the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer">side_effects</a> and <a href="https://stackoverflow.com/questions/12523189/how-to-mock-nested-functions">here</a>.</p>
<p>I haven't tested the below code but I hope it should work or at least give you some sort of lead.</p>
<pre><code>mocked_open.return_value.communicate.return_value = ('output', 'error')
mocked_open.return_value.returncode = 0
</code></pre>
<p>Hope that will help!</p>
</div>
<span class="comment-copy">I'm still getting the same error :(</span>
<span class="comment-copy">I can mock the pipe.communicate() this way. <code>@patch('utils.subprocess.Popen.communicate', return_value=('output', 'error'))</code>       How can I mock the pipe.returncode?</span>
<span class="comment-copy">Updated Answer to use <code>side_effects</code> and other</span>
<span class="comment-copy">Hi, thanks for the suggestion. I solved it finally. But I patched subprocess instead of subprocess.Popen.  <code>mock_subprocess.Popen.return_value.communicate.return_value = ('output', 'error')</code> <code>mock_subprocess.Popen.return_value.returncode = 0</code></span>
<span class="comment-copy">Awesome. You made it!</span>
