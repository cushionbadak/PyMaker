<div class="post-text" itemprop="text">
<p>to be more specific I want to write a simple budget tracking program, and I would like to know how I can tell a program how much money I spent today and on what, so that I can open the program the next day with the altered budget from the last day?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the program isn't really big you can use files and store the data there.
You load the data on program load, read and do your calculations and save the files on program close.</p>
<p>If your program gets really big you might want to use a database.</p>
<ul>
<li><a href="http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python" rel="nofollow noreferrer">Tutorial on python files</a></li>
<li><a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">Official files documentation for python 3.6</a></li>
<li><a href="http://docs.python-guide.org/en/latest/scenarios/db/" rel="nofollow noreferrer">Databases</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could use a simple text file on to which you append records, whenever you need to. As time goes, you can always transform this to something more elaborate:</p>
<pre><code>class Record:

    archive = 'archive.txt'

    def __init__(self, date, purpose, amount):
        self.date = date
        self.purpose = purpose
        self.amount = amount
        self.save_record()

    def save_record(self):
        with open('archive.txt', 'a') as f:
            f.write(str(self))

    def __str__(self):
        return f'{self.date}, {self.purpose}, {self.amount}\n'


if __name__ == '__main__':

    Record('20180604', 'candy', 3.20)
    Record('20180507', 'chocolate', 4.20)
</code></pre>
<p>You could look up the the various formats of timestamps that python offers, as well as the <code>csv</code> module for ideas about how to improve on this.</p>
<p>A simple file read script, would go a long way to retrieve records.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could use a text file, similarly to this:</p>
<pre><code>def func():
    action = input("Action: ")
    if action == "save":
        savedataL1 = input("&gt;")
        savedataL2 = input("&gt;")
        savedataL3 = input("&gt;")
        savedataL4 = input("&gt;")
        savedataL5 = input("&gt;")
        file = open("foo.txt","w+")
        file.truncate()
        file.write(str(banoffee.hexlify(bytes(savedataL1, 'utf8'))).replace("b'","").replace("'","") + "\n")
        file.write(str(banoffee.hexlify(bytes(savedataL2, 'utf8'))).replace("b'","").replace("'","") + "\n")
        file.write(str(banoffee.hexlify(bytes(savedataL3, 'utf8'))).replace("b'","").replace("'","") + "\n")
        file.write(str(banoffee.hexlify(bytes(savedataL4, 'utf8'))).replace("b'","").replace("'","") + "\n")
        file.write(str(banoffee.hexlify(bytes(savedataL5, 'utf8'))).replace("b'","").replace("'","") + "\n")

    elif action == "load":
        file = open("foo.txt","r")
        lines=file.readlines()
        print("")
        print(str(banoffee.unhexlify(bytearray(lines[0].strip(), 'utf8')))[2:-1])
        print(str(banoffee.unhexlify(bytearray(lines[1].strip(), 'utf8')))[2:-1])
        print(str(banoffee.unhexlify(bytearray(lines[2].strip(), 'utf8')))[2:-1])
        print(str(banoffee.unhexlify(bytearray(lines[3].strip(), 'utf8')))[2:-1])
        print(str(banoffee.unhexlify(bytearray(lines[4].strip(), 'utf8')))[2:-1])


    else:
        func()
func()
</code></pre>
</div>
<span class="comment-copy">Probably, you need to use some kind of persistence level, like a database or a simple file</span>
<span class="comment-copy">Have you even searched what choices you have ? Questions without no effort does not encourage us to give you answers. If you did, then edit what kind of modules you have tried and what part of them didn't meet your expectations.</span>
<span class="comment-copy">Save to a file of some sort is necessary, to keep data between different runs of the same code. That's the whole idea of files. That file can be a text only file that you later parse yourself, a json encoded file for easier parsing, or a database. This is like the first or second lesson in python, so if you don't know it yet, I suggest looking up python beginners tutorials.</span>
<span class="comment-copy">Have a look at the Tutorial: <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Reading and Writing Files</a></span>
<span class="comment-copy">Pickle is a great tool to save python objects directly. See this link on how to use pickle: <a href="https://wiki.python.org/moin/UsingPickle" rel="nofollow noreferrer">wiki.python.org/moin/UsingPickle</a></span>
