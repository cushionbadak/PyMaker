<div class="post-text" itemprop="text">
<p>Im using <code>lexer.input(sys.stdin.read())</code> to be able to write in console with freedom and to tokenize if´s, for´s etc in lexer ,but I want that when someone write "exit" it send CTRL+D so sys.stdin.read() stop reading and end my program .
Tried to do this in my code:</p>
<pre><code>lexer.input(sys.stdin.read())
for tok in lexer:
    if tok.value == "exit":
        sys.stdin.read(0o4)
</code></pre>
<p>But it didnt exit. The 004 is because in this page <a href="https://mail.python.org/pipermail/python-list/2002-July/165325.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/python-list/2002-July/165325.html</a> they say what is the code for CTRL+D but it doesnt say how to send it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.stdin.read()</code> will read all of stdin before returning, so the input function in </p>
<pre><code>lexer.input(sys.stdin.read())
</code></pre>
<p>cannot be prematurely terminated by anything done inside the lexer. The entire input has been read before <code>lexer.input</code> has even been called.</p>
<p>You can read up to (but not including) the first line containing <code>exit</code> with the following:</p>
<pre><code>from itertools import takewhile
lexer.input(''.join(takewhile(lambda line: 'exit' not in line, sys.stdin)))
</code></pre>
<p>although I'd personally prefer something like</p>
<pre><code>from itertools import takewhile
notdone = lambda line: not line.lstrip().startswith('exit')
lexer.input(''.join(takewhile(notdone, sys.stdin)
</code></pre>
<p>That won't get confused by lines which happen to contain <code>exit</code> in the middle of something, but will still stop if it hits a line whose first word just starts with <code>exit</code>. (Fortunately, the only such words in standard English are simple variations on the word <code>exit</code> itself.)</p>
</div>
<span class="comment-copy">What is <code>lexer</code>? (i.e. how did you create it?)</span>
<span class="comment-copy">How about <code>sys.exit()</code> or putting things into functions from which you can just <code>return</code>?</span>
<span class="comment-copy">@KlausD.: <code>sys.stdin.read()</code> doesn’t return until the EOF, so there’s no way to detect <code>"exit"</code> like this to begin with.</span>
<span class="comment-copy">Try use <code>exit()</code></span>
<span class="comment-copy">Well, that's why I shouldn't answer without testing. Got the order of arguments to takewhile wrong. I made it an answer, after a bit of testing.</span>
<span class="comment-copy">Thank you very much rici (again by the way), just one other favor, can you explain me how does that work? Im really very python newbie and I would love to understand it as much as possible</span>
<span class="comment-copy">It's all about generators. A file (such as <code>sys.stdin</code>) is a generator which produces lines from the file. <code>takewhile</code> takes a function and a generator and uses the function to decide when to stop generating (so its result is a truncated generator.) <code>''.join(...)</code> concatenates the values from a generator, and therefore forces all its values to be computed. Understanding generators is an essential part of understanding Python; look around on <a href="http://docs.python.org" rel="nofollow noreferrer">docs.python.org</a> for a good introduction.</span>
<span class="comment-copy">@Sebas: i didn't find a good intro on the official site, but I'm sure I've seen one. However, google found me this, which doesn't look awful: <a href="http://www.bogotobogo.com/python/python_generators.php" rel="nofollow noreferrer">bogotobogo.com/python/python_generators.php</a>. Sadly, the signal-to-noise ratio on the modern internet is really low. Maybe your professor/TA can help. Good luck.</span>
<span class="comment-copy">By the way, lambda is just way to write an anonymous function. (Functions are values in Python; that's also important to understand.) Think of <code>lambda x: ...</code> as kind of like <code>def &lt;anonymous&gt;(x): return ...</code></span>
<span class="comment-copy">@Sebas: This is the one I was thinking of: <a href="https://docs.python.org/3/howto/functional.html" rel="nofollow noreferrer">docs.python.org/3/howto/functional.html</a>. Skip the introduction and read it again when you finish the rest of the document. That document was written for Python 2 and while it's been updated, it might still have some things which don't work on Python 3; still, it's a good introduction to the concepts. Again, good luck. And sorry there aren't more good resources. (Peor aún en castellano.)</span>
