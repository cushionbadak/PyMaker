<div class="post-text" itemprop="text">
<p>I am trying to create an sqlite db on a volume within a docker container. When execution reaches <code>c = conn.cursor()</code> a receive the following error:</p>
<pre><code>sqlite3.ProgrammingError: Cannot operate on a closed database.
</code></pre>
<p>I wanted to re-use the connection process so built the following functions, which I think might be where the problem is:</p>
<pre><code>def create_sqlite_conn(db):
    try:
        conn = sqlite3.connect(db, detect_types=sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES)
        return conn
    except sqlite3.Error as e:
        logging.warning("WARNING: Error accessing DB: {}".format(db), e)
    finally:
        conn.close()

def create_db(db):
    conn = create_sqlite_conn(db)
    c = conn.cursor()
    c.execute('''CREATE TABLE table1(id INTEGER PRIMARY KEY AUTOINCREMENT, ip_ver TEXT, date_time DATETIME)''')
    conn.commit()
</code></pre>
<p>This is called with:</p>
<pre><code>create_db('/home/web/data/new_db.sql')
</code></pre>
<p>This code runs outside of the docker container, which is why I wonder whether this is alpine or docker related. My docker file looks like this:</p>
<pre><code>FROM alpine:3.7

RUN apk --no-cache add python3 build-base linux-headers python3-dev \
        &amp;&amp; pip3 install virtualenv \
        &amp;&amp; addgroup -g 500 web \
        &amp;&amp; adduser -D -u 1000 -G web web

WORKDIR /home/web

ENV PYTHONPATH /home/web/myapp

USER web

RUN mkdir -p /home/web/env /home/web/myapp /home/web/data/

COPY myapp/__init__.py /home/web/myapp/
COPY myapp/myapp.py /home/web/myapp/
COPY setup.py /home/web/myapp/
COPY requirements.txt /home/web/myapp/
COPY README.txt /home/web/myapp/

RUN /usr/bin/virtualenv -p python3 /home/web/env \
        &amp;&amp; source /home/web/env/bin/activate \
        &amp;&amp; python -m pip install ./myapp/ \
        &amp;&amp; python -m pip install -r ./myapp/requirements.txt

VOLUME ["./data"]

CMD ["/home/web/env/bin/myapp"]
</code></pre>
<p>Starting the docker container I have tried with and without the '--privileged' flag and still get the same error.</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>This is unrelated to <code>docker</code>. From <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>A finally clause is always executed before leaving the try statement,
  whether an exception has occurred or not.</p>
</blockquote>
<p>This is easily testable, <code>b</code> will exist regardless:</p>
<pre><code>try:
    a = int(2)
except:
    pass
finally:
    b = 3

print(b)
</code></pre>
<p>So it doesn't make sense to <code>close()</code> a connection in a <code>finally</code> block. I don't see any reason to close the connection at all in this function because it only tried to do one thing: open a connection. Either the connection is successful or it fails and therefore does not need closing (indeed, calling <code>close()</code> in the exception handler is likely to throw an error because the name <code>conn</code> will not exist).</p>
</div>
<span class="comment-copy">From the docs: "A finally clause is always executed before leaving the try statement, whether an exception has occurred or not." Why do you close the connection in a <code>finally</code> block? This is unrelated to <code>docker</code>.</span>
<span class="comment-copy">Actually, I'm not sure if it's completely unrelated. I don't know whether you actually succeed in making the connection because it just gets closed either way. I suspect it would throw <code>NameError</code> though if the connection was not successful because <code>conn</code> wouldn't exist.</span>
<span class="comment-copy">It runs if I put it all in the same function so I think you're right, this isn't docker related, apologies. However, having the db in a separate function is helpful so I don't have to litter other functions with try/except blocks but any help resolving this approach would be great</span>
<span class="comment-copy">I'm not sure exactly what issue this would solve. Either the function can return a connection or it returns <code>None</code> (or something) so you'd still have to check the function output every time you called it for a connection. Plus, if it failed once, it fails everywhere in the code because the database simply doesn't exist so it's likely you program can't function at all.</span>
<span class="comment-copy">I think we'll have to rule some stuff out here because I don't understand what's going on. What happens if you remove the <code>finally</code> block?</span>
<span class="comment-copy">Thanks, that makes sense but what I don't understand is why the conn doesn't appear to be successfully returned to the calling function?</span>
<span class="comment-copy">@Adam the connection is returned, it is just returned in a closed state.</span>
