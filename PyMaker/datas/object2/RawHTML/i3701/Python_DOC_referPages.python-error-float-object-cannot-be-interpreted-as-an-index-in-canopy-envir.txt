<div class="post-text" itemprop="text">
<p>I am using the 2.1.9.3717 version of Canopy to run a code written by someone else, on plotting a histogram for the bootstrapping analysis of a previous data series, and I encounter this error every time. I tried all reinstalling numpy or changing the known number variables to int instead of float, nothing has worked. I am really new at programming and this has caused a lot of confusion for me. Here is the code:</p>
<hr/>
<pre><code>from __future__ import division 
import numpy as np
import matplotlib as mpl
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import pylab
import lmfit
import math
import random
from scipy.optimize import curve_fit
from scipy.optimize import leastsq
from scipy.stats import gamma
import csv
import ntpath
import pandas as pd

end = 0
bslist = []

path = '/Users/....../'

proj_name = '180607'

data_input = '180607_BootstrapGlobal.csv'

bs_param_CIs=pd.DataFrame()

#Extract data supplied as a .csv file
fn = ntpath.basename(path) 
datafile = fn.split(".")[0]
datafile2 = path+data_input
bootstrap=pd.read_csv(datafile2, sep=None, header=0,engine= 'python')


def ctend_plot(point, ci, y, label):                          #function to define central tendency and error bars
        plt.plot(ci,[y,y],"-", color="g", linewidth=4, label=label)
        plt.plot(point, y, "o", color="r", markersize=10)


for column in bootstrap: 
    fig = plt.figure()
    ax = fig.add_subplot(111)      
    bsmean = np.mean(bootstrap[column])
    bsstd = np.std(bootstrap[column])
    bsmed= np.median(bootstrap[column])                  # HERE WE ARE USING THE MEDIAN TO CALC CI
    plt.hist(bootstrap[column],bins=math.ceil(np.sqrt(len(bootstrap[column]))))
    bsmean_y = 10
    lower=2.5                                           #CHANGE lower and upper TO CALC SOMETHING OTHER THAN 95% CI!
    upper=97.5
    percCI= int(upper-lower)
    bsiqr= np.percentile(bootstrap[column],[lower,upper])
    ctend_plot(bsmed,bsiqr,bsmean_y-8, "%s %i CI" %(column, percCI)) 
    plt.legend();
    lgd = ax.legend(bbox_to_anchor=(1.05,1.05), loc=5, borderaxespad=0)
    plt.savefig('{0}{1}_{2}%CI_{3}.png'.format(path, proj_name,percCI,column), dpi=300)
    plt.clf()
    plt.close()
    bs_param_CI_one=pd.DataFrame({ 'Param' : ['%s'%(column)],
                                    'Mean': ['%f'%(bsmean)],
                                    'Median': ['%f'%(bsmed)],
                                    '%s_CI'%(percCI): ['%s'%(bsiqr)] })
    bs_param_CI_one=bs_param_CI_one[['Param','Mean','Median','%s_CI'%(percCI)]]
    frames =[bs_param_CIs, bs_param_CI_one]
    bs_param_CIs=pd.concat(frames)

bs_param_CIs.to_csv("{0}{1}_bootstrap_CIs.csv".format(path, proj_name),index=None)  
</code></pre>
<hr/>
<p>And the output:</p>
<pre><code>TypeErrorTraceback (most recent call last)
/Users/.../bootstrap_figs.py in &lt;module&gt;()
     44     bsstd = np.std(bootstrap[column])
     45     bsmed= np.median(bootstrap[column])                  # HERE WE ARE USING THE MEDIAN TO CALC CI
---&gt; 46     plt.hist(bootstrap[column],bins=math.ceil(np.sqrt(len(bootstrap[column]))))
     47     bsmean_y = 10
     48     lower=2                                         #CHANGE lower and upper TO CALC SOMETHING OTHER THAN 95% CI!
/Users/yasmin_m/Library/Enthought/Canopy/edm/envs/User/lib/python2.7/site-packages/matplotlib/pyplot.pyc in hist(x, bins, range, normed, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, hold, data, **kwargs)
   3080                       histtype=histtype, align=align, orientation=orientation,
   3081                       rwidth=rwidth, log=log, color=color, label=label,
-&gt; 3082                       stacked=stacked, data=data, **kwargs)
   3083     finally:
   3084         ax._hold = washold
/Users/yasmin_m/Library/Enthought/Canopy/edm/envs/User/lib/python2.7/site-packages/matplotlib/__init__.pyc in inner(ax, *args, **kwargs)
   1890                     warnings.warn(msg % (label_namer, func.__name__),
   1891                                   RuntimeWarning, stacklevel=2)
-&gt; 1892             return func(ax, *args, **kwargs)
   1893         pre_doc = inner.__doc__
   1894         if pre_doc is None:
/Users/yasmin_m/Library/Enthought/Canopy/edm/envs/User/lib/python2.7/site-packages/matplotlib/axes/_axes.pyc in hist(self, x, bins, range, normed, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, **kwargs)
   6190             # this will automatically overwrite bins,
   6191             # so that each histogram uses the same bins
-&gt; 6192             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)
   6193             m = m.astype(float)  # causes problems later if it's an int
   6194             if mlast is None:
/Users/yasmin_m/Library/Enthought/Canopy/edm/envs/User/lib/python2.7/site-packages/numpy/lib/function_base.py in histogram(a, bins, range, normed, weights, density)
    727 
    728         # Initialize empty histogram
--&gt; 729         n = np.zeros(bins, ntype)
    730         # Pre-compute histogram scaling factor
    731         norm = bins / (mx - mn)
TypeError: 'float' object cannot be interpreted as an index
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You say:</p>
<blockquote>
<p>I tried all reinstalling numpy or changing the known number variables to int instead of float</p>
</blockquote>
<p>… but you don't seem to actually be converting to int, just calling <a href="https://docs.python.org/2/library/math.html#math.ceil" rel="nofollow noreferrer"><code>math.ceil</code></a> on them. That doesn't change the type:</p>
<blockquote>
<p>Return the ceiling of x <strong><em>as a float</em></strong>, the smallest integer value greater than or equal to x.</p>
</blockquote>
<p>What you want is probably <code>int(math.ceil(…))</code>, which gets the ceiling as a float, then converts that int to a float (by truncating it, but since you've already ceilinged it, that should be fine), which can then be used as an index.</p>
<hr/>
<p>If the code you borrowed was written for Python 3, the Python 3 version of <a href="https://docs.python.org/3/library/math.html#math.ceil" rel="nofollow noreferrer"><code>math.ceil</code></a> does return an int.<sup>1,2</sup> So it worked in Python 3, but your backport to Python 2 doesn't.</p>
<p>(Which raises the question of why you're backporting code to Python 2 instead of just using Python 3, but… maybe you have a reason for that.)</p>
<hr/>
<p><sub>1. Actually, it only returns an <code>int</code> when called on a <code>float</code>. When called on some other type, it is guaranteed to return something that matches <code>Integral</code>, but that doesn't necessarily mean it's usable as an index. But this is rarely going to be an issue, and it isn't here.</sub></p>
<p><sub>2. Python 2 was designed around returning the types a C expert would expect; Python 3 was designed around returning whatever is confusing or most useful. The most famous example is that <code>5/2</code> is 2 in 2.x, 2.5 in 3.x.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>You are getting this error because you need to pass an int rather than a float. The <a href="https://docs.python.org/3/library/math.html#math.ceil" rel="nofollow noreferrer">ciel</a> function returns a float. You may want to typecast it to integer.</p>
</div>
<span class="comment-copy">Was this code written for Python 3? It looks like it may be relying on Python 3 behavior of <code>math.ceil</code>.</span>
<span class="comment-copy">Is there any reason you need to use Python 2 here? Backporting working 3.x code to 2.x used to be something you had to do all the time because some library or other you needed hadn't been updated yet, but there's rarely a good reason for it in 2018 (you're more likely to have dependencies that only work in 3.x than that only work in 2.x).</span>
<span class="comment-copy">Canopy 2.1 supports both Python 2 and Python 3. As others have indicated, it looks like you might be trying to run Python 3 code in a Python 2 environment. To switch environments, see <a href="https://docs.enthought.com/canopy/2.1/configure/python-environments.html" rel="nofollow noreferrer">docs.enthought.com/canopy/2.1/configure/…</a></span>
<span class="comment-copy">@user2357112  No, it was written in Python2. This is the final step of the modeling process and all the other ones have been written in Python2.</span>
<span class="comment-copy">I changed the math.ceil to "int" and it worked, thank you for your answer!</span>
