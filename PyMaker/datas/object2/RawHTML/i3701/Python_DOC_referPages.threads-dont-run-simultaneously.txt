<div class="post-text" itemprop="text">
<p>I have a simple multi-threading code in which some threads put items to queue and some threads get items from queue:
<a href="https://repl.it/@chuoi123/simpleThreading" rel="nofollow noreferrer">https://repl.it/@chuoi123/simpleThreading</a></p>
<p>Full code if you don't want to visit link above:
</p>
<pre><code>import threading
import queue
import time

def PutWorker(maxValue):
    global item
    while True:
        with putLock:
            if item &gt; maxValue:
                break
            q.put(item)
            print('Added item ' + str(item))
            item += 1
        time.sleep(0.5)

def GetWorker():
    while True:
        item = q.get()
        if item is None:
            break
        with getLock:
            print('Deleted item ' + str(item))
        q.task_done()
        time.sleep(1)

## main process from here
q = queue.Queue()
threads = []
putLock = threading.Lock()
getLock = threading.Lock()
item = 1

while True:
    try:
        numValue = int(input('Number of items in queue: '))
        numThreadsGet = int(input('Number of getting threads: '))
        numThreadsPut = int(input('Number of putting threads: '))
        break
    except:
        print('Input must be ingeter.')

for i in range(numThreadsPut):
    t = threading.Thread(target=PutWorker(numValue),daemon = True)
    t.start()
    threads.append(t)

for i in range(numThreadsGet):
    t = threading.Thread(target=GetWorker,daemon = True)
    t.start()
    threads.append(t)
</code></pre>
<p>My problem is putting threads and getting threads don't run simultaneously, so one type run after another base in their order in code. The result of current code:</p>
<pre class="lang-none prettyprint-override"><code>Added item 1
Added item 2
Added item 3
Added item 4
Added item 5
...
Deleted item 1
Deleted item 2
Deleted item 3
Deleted item 4
Deleted item 5
...
</code></pre>
<p>And I want result like this:</p>
<pre class="lang-none prettyprint-override"><code>Added item 1
Added item 2
Deleted item 1
Added item 3
Deleted item 2
Added item 4
Deleted item 3
Added item 5
Deleted item 4
Deleted item 5
...
</code></pre>
<p>Why this happened and What I can do for archive my goal?</p>
<p><strong>Edit</strong>: after try solution in @user68014's answer, I found another way is remove parameter from <code>def PutWorker()</code> and simple using global variable there like <code>item</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with this line:</p>
<pre><code>t = threading.Thread(target=PutWorker(numValue),daemon = True)
</code></pre>
<p>You're actually <em>calling</em> PutWorker to get the target to Thread. So it's all happening before the thread is actually created. You should be passing in the function itself.</p>
<p>So something like:</p>
<pre><code>t = threading.Thread(target=PutWorker, ...
</code></pre>
<p>No arguments, no call, it's just a function (which Thread will call to start the thread)</p>
<p>Since it has a parameter, you need to "Curry" that in. I'd do it like this:</p>
<pre><code>from functools import partial
</code></pre>
<p>...</p>
<pre><code>t = threading.Thread(target=partial(PutWorker, numValue), ...
</code></pre>
</div>
<span class="comment-copy">Python threads do not run simultaneously. They only might seem to if they perform tasks which block.</span>
<span class="comment-copy"><code>partial</code> worked nice. Thank you.</span>
<span class="comment-copy">The usual way of creating a <code>Thread</code> with a function that takes parameters is: <code>t = threading.Thread(target=PutWorker, args=(numValue,))</code></span>
<span class="comment-copy">Nice didn't know you could do that!</span>
<span class="comment-copy">nice answer @quamrana. Missed this from python docs: <a href="https://docs.python.org/3/library/threading.html#threading.Thread" rel="nofollow noreferrer">docs.python.org/3/library/threading.html#threading.Thread</a></span>
