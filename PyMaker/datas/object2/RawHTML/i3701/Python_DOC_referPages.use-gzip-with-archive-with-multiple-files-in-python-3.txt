<div class="post-text" itemprop="text">
<p>So basically I have a file system like this:</p>
<pre><code>main_archive.tar.gz
  main_archive.tar
    sub_archive.xml.gz
      actual_file.xml
</code></pre>
<p>There are hundreds of files in this archive... So basically, can the <code>gzip</code> package be used with multiple files in Python 3? I've only used it with a single file zipped so I'm at a loss on how to go over multiple files or multiple levels of "zipping".</p>
<p>My usual method of decompressing is:</p>
<pre><code>with gzip.open(file_path, "rb") as f:
  for ln in f.readlines():
    *decode encoding here*
</code></pre>
<p>Of course, this has multiple problems because usually "f" is just a file... But now I'm not sure what it represents?</p>
<p>Any help/advice would be much appreciated!</p>
<p>EDIT 1:</p>
<p>I've accepted the answer below, but if you're looking for similar code, my backbone was basically:</p>
<pre><code>tar = tarfile.open(file_path, mode="r")
for member in tar.getmembers():
    f = tar.extractfile(member)
    if verbose:
        print("Decoding", member.name, "...")
    with gzip.open(f, "rb") as temp:
        decoded = temp.read().decode("UTF-8")
        e = xml.etree.ElementTree.parse(decoded).getroot()
        for child in e:
            print(child.tag)
            print(child.attrib)
            print("\n\n")

tar.close()
</code></pre>
<p>Main packages used were <code>gzip</code>, <code>tarfile</code>, and <code>xml.etree.ElementTree</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>gzip</code> only supports compressing a single file or stream. In your case, the exrtacted stream is a <code>tar</code> object, so you'd use Python's <a href="https://docs.python.org/3/library/tarfile.html" rel="nofollow noreferrer"><code>tarfile</code> library</a> to manipulate the extracted contents. This library actually knows how to cope with <code>.tar.gz</code> so you don't need to explicitly extract the <code>gzip</code> yourself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Python's tarfile to get the contained files, and then Python's gzip again inside the loop to extract the xml.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/15857792/how-to-construct-a-tarfile-object-in-memory-from-byte-buffer-in-python-3" title="how to construct a tarfile object in memory from byte buffer in python 3">stackoverflow.com/questions/15857792/â€¦</a> has some useful code examples.</span>
