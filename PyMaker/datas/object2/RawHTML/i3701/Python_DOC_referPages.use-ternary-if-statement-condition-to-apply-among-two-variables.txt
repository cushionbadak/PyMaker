<div class="post-text" itemprop="text">
<p>I'm trying to apply a one line if else statement but using the condition to determine which variable to apply the assignment to. Is that possible?</p>
<p>This example is obviously incorrect, but hopefully helps having an idea of what I want to do:</p>
<pre><code>a = 4
var1 = a if a == 4 else var2 = a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>with tuple unpacking:</p>
<pre><code>var1, var2 = (a, var2) if a == 4 else (var1, a)
</code></pre>
<p>edit: i answered for the fun but the good answer is Mel's (regular if)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write a normal <code>if</code> statement</p>
<pre><code>if a == 4:
    var1 = a
else:
    var2 = a
</code></pre>
<p>The python ternary operator does not work with assignments.</p>
</div>
<div class="post-text" itemprop="text">
<p>sounds like a XY problem. If <code>var1</code> and <code>var2</code> can hold the same content, then they could be stored in a <code>list</code> of variables. In that case, use the result of the test to compute the index:</p>
<pre><code>a = 4
vars = [0,0]

vars[a==4] = a

&gt;&gt;&gt; vars
[0, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you ask is possible to do using <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer">globals</a> dictionary in python. Even if <code>var1</code> nor <code>var2</code> are defined.</p>
<p>e.g:</p>
<pre><code>globals()['var1' if a == 4 else 'var2'] = a
</code></pre>
<p>But, I don't think it is a good practice, if you need to access <code>var1</code> or <code>var2</code> latter on in the code, one of the two it will causes an error</p>
<p>e.g given the code</p>
<pre><code>a = 0

if a == 4:
  var1 = a
else:
  var2 = a

print("var1={}, var2={}".format(var1, var2))
</code></pre>
<p>will cause:</p>
<pre><code>NameError: name 'var1' is not defined
</code></pre>
<p>To avoid this, it is best to define the variable beforehand.</p>
<pre><code>a = 0

var1 = None
var2 = None

if a == 4:
  var1 = a
else:
  var2 = a
</code></pre>
<p>If you prefer one-liner you can have 2 one-liners:</p>
<pre><code>var1 = a if a == 4 else None
var2 = a if a !=4 else None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Its horrendous and shouldn't be done, but should work.</p>
<pre><code>var1, var2 = [var1,a][a==4], [b,var2][a==4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://repl.it/repls/ExcellentCreepyDonateware" rel="nofollow noreferrer">https://repl.it/repls/ExcellentCreepyDonateware</a></p>
<pre><code>a = 4

var1=0
var2=0

(var1,var2) = (a,var2) if a == 4 else (var1,a)

print (var1,var2) 
</code></pre>
</div>
<span class="comment-copy">Why make life complicated when separate lines work and is more readable?</span>
<span class="comment-copy">No, <code>var2 = a</code> is not an expression and produces no value.</span>
<span class="comment-copy">@Prateek not a duplicate of this. in that case, target variables are different</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre retracted flag.</span>
<span class="comment-copy">Presumably, both <code>var1</code> and <code>var2</code> are defined earlier, otherwise you'll get a <code>NameError</code> further down the track if you try to access the one that didn't get assigned.</span>
<span class="comment-copy">This only works if <code>var1</code>/<code>var2</code> are <i>already</i> defined, also overcomplicatd</span>
<span class="comment-copy">True @Chris_Rands, but otherwise it does the trick. Thanks @bobrobbob!</span>
<span class="comment-copy">@Chris Good point, but if those names aren't already defined you're in for a world of pain anyway, as I mention in my comment on the question, so it's reasonable to assume they are previously defined.</span>
<span class="comment-copy">Yes, I was just curious to know whether it was possible too using ternary if statements</span>
<span class="comment-copy">Not in this case (see <a href="https://stackoverflow.com/a/394814/4720935">stackoverflow.com/a/394814/4720935</a>)</span>
<span class="comment-copy">upvoted just because this is the only sane option.</span>
<span class="comment-copy">Alexandre Nixon, unless you want to alienate more people who read your code - an <code>if</code> above is highly preferred. <code>if else</code> operator in python is has controversial itself compared to other languages.</span>
<span class="comment-copy">You're right, manhandling <code>globals</code> should be avoided in real code unless there's no sane alternative (using <code>exec</code> doesn't count as sane). IMHO, it can be instructive to see examples of how not to do things, but some Python regulars strongly disagree with this philosophy. The rest of your answer has good info, so hopefully you won't get any downvotes.</span>
<span class="comment-copy">@PM2Ring, I agree with you, it was for the sack of the example. I would never use <code>globals()</code> neither in my code but it does exist. Also, it is unique one-liner solution that works without having <code>var1</code> nor <code>var2</code> defined previously in this thread (so far). That said, my point was really to point out the importance of undefined variable <b>especially in python</b> against trendy one-liner. I think defining new variable inside local scopes is evil in most languages. Thanks for your constructive comment anyway :)</span>
