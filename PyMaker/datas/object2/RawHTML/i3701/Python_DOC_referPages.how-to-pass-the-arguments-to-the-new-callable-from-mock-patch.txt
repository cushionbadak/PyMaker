<div class="post-text" itemprop="text">
<p>I've got the code and the test files:</p>
<p>code.py</p>
<pre><code>class Code:

    def do_something_inside(self, a, b, c):
        return a-b-c

    def do_something(self, b, c):
        self.do_something_inside(30, b, c)
</code></pre>
<p>test.py</p>
<pre><code>import unittest
import unittest.mock as mock
from code import Code

class TestStringMethods(unittest.TestCase):
    def setUp(self):
        self.code = Code()

    def do_something_inside_stub(self, a, b, c):
        return a+b+c

    @mock.patch('code.Code.do_something_inside', new_callable=do_something_inside_stub)
    def test_add(self):
        self.assertEquals(self.code.do_something(10, 5), 45)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>I want to mock the do_something_inside method using do_something_inside_stub, but the execution failed:</p>
<pre><code>E
======================================================================
ERROR: test_add (__main__.TestStringMethods)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python3.6/unittest/mock.py", line 1171, in patched
    arg = patching.__enter__()
  File "/usr/lib/python3.6/unittest/mock.py", line 1293, in __enter__
    new = Klass(**_kwargs)
TypeError: do_something_inside_stub() missing 4 required positional arguments: 'self', 'a', 'b', and 'c'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
</code></pre>
<p>I don't know how to pass the arguments to the new_callable from mock.patch.</p>
</div>
<div class="post-text" itemprop="text">
<p>new_callable requires a class inherited from Mock, whose object will be created for this mock. The functionality you are looking for is side_effect. Ref: <a href="https://docs.python.org/3/library/unittest.mock.html#the-mock-class" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#the-mock-class</a></p>
<p>Use the following code:</p>
<pre><code>@mock.patch('code.Code.do_something_inside', side_effect=do_something_inside_stub)
def test_add(self, do_something_inside_mock):
    do_something_inside_mock.assert_called
</code></pre>
</div>
<span class="comment-copy">I'm not sure if it is correct. I've add <code>side_effect=do_something_inside_stub</code> (won't work with <code>self</code>), but the result is <code>TypeError: test_add() takes 1 positional argument but 2 were given</code></span>
<span class="comment-copy">@DawidWolski The <code>mock.patch</code> response (which will be a Mock object) should also be a parameter to the <code>test_add</code> function. I have edited my code to reflect the same</span>
