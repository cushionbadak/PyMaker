<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/18842779/string-concatenation-without-operator">String concatenation without '+' operator</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I am running on Python 3.6.1 and today I missed a comma, as follows:</p>
<pre><code>nt = namedtuple('Record', ['c', 'a' 'b'])
# instead the following is what I actually want
nt = namedtuple('Record', ['c', 'a', 'b'])
</code></pre>
<p>But I just wonder why the first way is valid Python in any way? Should not it complains with syntax error?</p>
<p>I just tried in 3.5.2 and 2.7.11. Seems all valid. But it is valid?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">Python tutorial</a>:</p>
<blockquote>
<p>Two or more string literals (i.e. the ones enclosed between quotes)
  next to each other are automatically concatenated.</p>
<pre><code>&gt;&gt;&gt; 'Py' 'thon'
'Python'
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Python will concatenate adjacent strings which are delimited by whitespace:
<a href="https://docs.python.org/2.0/ref/string-catenation.html" rel="nofollow noreferrer">https://docs.python.org/2.0/ref/string-catenation.html</a></p>
</div>
<span class="comment-copy"><code>'a' 'b'</code> is <code>'ab'</code> which is valid</span>
<span class="comment-copy">Yes, consecutive string literals are concatenated. Just like in C or several other languages.</span>
<span class="comment-copy">I have been working in Python for two years and this is the first time I know this. May I know what is the philosophy behind this?  @MartijnPieters I believe it is a source a bug -- it should just tell me syntax error in my opinion</span>
<span class="comment-copy">I have been working in Python for two years and this is the first time I know this. May I know what is the philosophy behind this?</span>
<span class="comment-copy">It's in the link: it's useful for breaking up long strings over multiple lines.</span>
<span class="comment-copy">But in my case it is source of error. We have """""" format and ('' \n '') format already right</span>
<span class="comment-copy">Well, i guess it is just design decision. I will just keep this in mind</span>
<span class="comment-copy">No, triple quotes and <code>\n</code> are for creating strings that contain newlines. This is for long strings that don't contain newlines but need to be broken into multiple lines of source code to avoid very long lines of code. It simply removes the need for <code>+</code>. I agree the benefit is still not great and it can cause errors, I've been bitten by it before as well. I can't say why it was decided that the benefit outweighed the risks. Maybe it's because errors like this will usually be spotted very quickly.</span>
