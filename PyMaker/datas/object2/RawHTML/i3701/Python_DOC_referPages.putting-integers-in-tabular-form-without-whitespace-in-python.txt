<div class="post-text" itemprop="text">
<p>Sorry that I ask this here, because this seems really elementary and is most likely asked before. However, I have been searching and trying for hours and I couldn't find anything that helped me out. I want to write a program that asks for an upper bound and returns a table with pairs of numbers (m,n) such that the sum of of divisors of n (excluding n) equals m, and vice versa. </p>
<p>Now I wrote the following </p>
<pre><code>bound = int(input('upper bound = '))
l = len(str(bound))
for x in range(1,l):
    print(' ', end='')
print('m', end='  ')
for y in range(1,l):
    print(' ', end='')
print('n', end='')
for i in range(1,bound):
    for j in range (1, bound):
        if j == i:
            break
        som_i = 0
        som_j = 0
        for k in range(1,i):
            if i % k == 0:
                som_i += k
        for l in range(1,j):
            if j % l == 0:
                som_j += l
        if som_i == j and som_j == i:
            print('{:{prec}d}'.format(j, prec = l).rstrip(''), end="")
            print('{:{prec}d}'.format(i, prec = l+2).lstrip(''), end="")
</code></pre>
<p>The problem is that I want the pair to be displayed in tabular form side to side and with the right indentation, depending on the length of the number. Whatever I tried (I read so many treads with similar questions already) Python keeps adding a whitespace. </p>
<p>Can anyone help me out on this? I am really new to Python and I cannot figure this out myself. If relevant,  I am using version 3.6.</p>
<p>EDIT:</p>
<p>For example, when I run the program I get:</p>
<pre><code>upper bound = 300
  m    n        
220
284
</code></pre>
<p>while I would like to get</p>
<pre><code>upper bound = 300
  m    n        
220  284
</code></pre>
<p>And similar for larger inputs. </p>
<p><strong>EDIT2</strong> My question is not a duplicate, since i already tried adding </p>
<pre><code>end=""
</code></pre>
<p>which did not work. </p>
</div>
<div class="post-text" itemprop="text">
<p>The first problem is that you're not using <code>end=''</code> after printing the <code>j</code> value, but you apparently already know about that. You also <em>are</em> using it after printing the <code>n</code> header, which you don't want.</p>
<p>Your edited version fixes the missing <code>end=''</code> after the <code>j</code> print, but then adds one after the <code>i</code> print, which, again, you don't want.</p>
<p>I'm not sure you understand what <code>end=''</code> means, so you're just putting it into your code randomly. That isn't going to get you very far. You can read the docs for <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a>, but the short version is: use <code>end=''</code> when you're printing something that isn't supposed to be the end of a line, like that <code>m</code> header and <code>j</code> value, but <em>don't</em> use it when you're printing something that <em>is</em> supposed to be the end of a line, like that <code>n</code> header and <code>i</code> value.</p>
<hr/>
<p>The second problem is that <code>l</code> is just way too big. After <code>for l in range(1,j):</code>, it's going to be the same value as <code>j</code>, which means it's going to be 219, so you're going to print that <code>220</code> filled out to 219 characters, and that <code>284</code> filled out to 221 characters. So, unless your terminal is more than 446 characters wide, it's going to scroll across multiple lines and look like a mess. I think what you may want here is to use <code>3</code> and <code>5</code>.</p>
<p>Or, maybe, you have some other variable that's supposed to be 3, and you want to use (let's call that variable <code>x</code>) <code>x</code> and <code>x+2</code> instead of <code>l</code> and <code>l+2</code>. But I don't see any obvious candidates in your code.</p>
<p>So:</p>
<pre><code># ... unchanged lines
print('n') # no end='' here
# ... more unchanged lines
        # using 3 and 5 instead of l and l+2, and adding end=''
        print(('{:{prec}d}'.format(j, prec = 3)).rstrip(''), end='')
        print(('{:{prec}d}'.format(i, prec = 5)).lstrip(''))
</code></pre>
<p>And now, the output is:</p>
<pre><code>upper bound = 300
  m    n
220  284
</code></pre>
</div>
<span class="comment-copy">Can you provide an example of the current output and your expected output?</span>
<span class="comment-copy">Okay, sorry I did not make this clear. I made an edit to clearify. Please let me know if you want to see some output for larger inputs.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/12102749/how-can-i-suppress-the-newline-after-a-print-statement">How can I suppress the newline after a print statement?</a></span>
<span class="comment-copy">It's not a duplicate, I tried that already before posting and that method did not work.</span>
<span class="comment-copy">Edit your question to include the <code>end=""</code>, and to show the (reproducible) results of running it that way.</span>
<span class="comment-copy">Thank you very much for your detailed answer, I really appreciate your help. And again sorry if my question was not clear but I'm really new to Python so I had a hard time explaining this properly. There were a few mistakes with the 'end' command. I thought I understood it properly, but I didn't. The big mistake however, was by choosing 'l' somewhere in in a for loop, while I defined 'l' as the length of the input.</span>
