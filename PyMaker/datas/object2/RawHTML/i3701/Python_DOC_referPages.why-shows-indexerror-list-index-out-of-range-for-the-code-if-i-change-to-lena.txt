<div class="post-text" itemprop="text">
<pre><code>A= [i for i in str(2635384)]
for i in range(len(A),0,-1):
    print(A[i]) 
</code></pre>
<p>shows </p>
<blockquote>
<p>IndexError: list index out of range for the code</p>
</blockquote>
<p>Whereas</p>
<pre><code>A= [i for i in str(2635384)]
for i in range(len(A)-1,0,-1):
    print(A[i])
</code></pre>
<p>can run </p>
</div>
<div class="post-text" itemprop="text">
<p>Note: I make the asumption that you use Python 3, where <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><em>range()</em></a> is a function which yields values instead of generating a list like in Python 2 (the equivalent function is <a href="https://docs.python.org/2/library/functions.html#xrange" rel="nofollow noreferrer"><em>xrange()</em></a> ).</p>
<p>The <em>range()</em> function is documented in the topic <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow noreferrer">Built-in Types —&gt; Ranges</a>.</p>
<p>Quoting the documentation:</p>
<blockquote>
<p>The arguments to the range constructor must be integers (either built-in <code>int</code> or any object that implements the <code>__index__</code> special method). If the <em>step</em> argument is omitted, it defaults to 1. If the <em>start</em> argument is omitted, it defaults to 0. If <em>step</em> is zero, <code>ValueError</code> is raised.</p>
<p>For a positive <em>step</em>, the contents of a range <em>r</em> are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <code>r[i] &lt; stop</code>.</p>
<p>For a negative <em>step</em>, the contents of the range are still determined by the formula <code>r[i] = start + step*i</code>, but the constraints are <code>i &gt;= 0</code> and <code>r[i] &gt; stop</code>.</p>
</blockquote>
<p>With your example <code>range(len(A), 0, -1)</code>, you iterate from the value <code>len(A)</code> inclusive to <code>0</code> exclusive. Actually, <a href="http://python-history.blogspot.com/2013/10/why-python-uses-0-based-indexing.html" rel="nofollow noreferrer">by convention in the Python language</a> , the <em>start</em> index is inclusive and the <em>stop</em> index is exclusive. Ie.: in your case, your range will generate the indexes <code>len(A)</code>, <code>len(A) – 1</code>, ..., <code>2</code>, <code>1</code>; but it will never reach <code>0</code>.</p>
<p>This is the same rule for slicing. Given a list <em>L</em>, <code>L[a:b]</code> is the slice of <em>L</em> from index <em>a</em> inclusive to index <em>b</em> exclusive (so <em>b – 1</em>).</p>
<p>So, to answer your question, the index <code>len(A)</code> is out of range: only indexes from <code>0</code> to <code>len(A) – 1</code> are valid.</p>
<p>For your case, the best practice is to use <a href="https://docs.python.org/2/library/functions.html#reversed" rel="nofollow noreferrer"><em>reversed</em></a>, to iterate the sequence in reverse order:</p>
<pre><code>for letter in reversed(str(2635384)):
    print(letter)
</code></pre>
<p>You get:</p>
<pre><code>4
8
3
5
3
6
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the first example, you try to access the item at  index len(A), but len(A) equals 7, and the list index has a maximum of 6.</p>
<p>khelwood was pointing to that already.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why? 
Well, because list indexing in python is starting at zero and goes up to <code>len(&lt;iterable&gt;)-1</code>, that's why.</p>
<p>So trying to get <code>A[len(A)]</code> will always fail.</p>
<p>But when working with <code>range</code> i'd suggest you do a quick test in the python shell to see if everything is working as planned, for example:</p>
<pre><code>for x in range(3,0,-1):
     print(x)
</code></pre>
<p>would present you the output:</p>
<pre><code>3
2
1
</code></pre>
<p>This shows you what's going on. 
In this case we can clearly see that the first list element would not be used since the <code>0</code> is missing.</p>
<p>So, what you probably want is <code>range(len(A)-1,-1,-1)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>A= [i for i in str(2635384)]

for i in range(len(A)-1,-1,-1):
    print(A[i])
</code></pre>
<p>This is what you want. ^</p>
<p>range(len(A),0,-1) iterates from 7 to 0 backwards, but since <strong>Python list indexing starts at 0</strong> instead of 1, you need to subtract 1 from both parameters of the range.</p>
<p>Giving you:</p>
<pre><code>for i in range(len(A)-1,-1,-1):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>range()</code> function, the first argument is always an index that exists in the list. If there is an array <code>A = ["a", "b", "c", "d"]</code> then <code>len(A)</code> would return <code>4</code> and the indexes would be <code>0, 1, 2, 3</code> so if you use <code>range(Len(A), 0, -1)</code> it would cause an error since 4 is out of range of the indexes in the list.</p>
<p>If you use <code>range(Len(A) - 1, 0, -1)</code> then the output would be <code>"d", "c", "b"</code> and "a" would not be included in the output since the range goes to <code>0</code> and in the range function the range ends at 1 value before the second argument.</p>
<p>So simply put, for <code>range(3, 0, -1)</code> the indexes are <code>3, 2, 1</code> and for <code>range(0, 3, 1)</code> the indexes are <code>0, 1, 2</code>. The <code>range()</code> function stops 1 value before the second argument.</p>
</div>
<span class="comment-copy">The first element in <code>range(len(A),0,-1)</code> is <code>len(A)</code>, which is not a valid index for <code>A</code>.</span>
<span class="comment-copy">Thank you so much Laurent! it really helps me:)</span>
<span class="comment-copy">Please, don’t use <code>list</code> as a variable name.  It’s a builtin function.</span>
<span class="comment-copy">Good point, changed it to: A.</span>
