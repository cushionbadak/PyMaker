<div class="post-text" itemprop="text">
<p><strong>Disclaimer</strong>: I hesitated on the title, due to the broad nature of this question (see below ;-), other options included:</p>
<ul>
<li>How to send a mail from localhost, using Python code only?</li>
<li>How to send email from Python code, without usage of external SMTP server?</li>
<li>Is it possible to send an email DIRECTLY to it's destination, using localhost and Python only?</li>
</ul>
<hr/>
<p>First, <strong>a little bit of context</strong>:<br/>
For the sake of learning I am building a website with user registration feature. The idea is that after registration user will receive an email with activation link. I would like to compose &amp; send email from Python code, and that is the part where I would like to ask for some clarifications.</p>
<hr/>
<p><strong>My understanding, before I began</strong> (obviously naive =) can be illustrated like this (given that there is a legitimate email address <em>user@example.com</em>):</p>
<p><a href="https://i.stack.imgur.com/pKexQ.jpg" rel="noreferrer"><img alt="My naive understanding" src="https://i.stack.imgur.com/pKexQ.jpg"/></a></p>
<p>After searching for examples, I bumped into some questions &amp; answers on stackoverflow (<a href="https://stackoverflow.com/questions/6270782/how-to-send-an-email-with-python">1</a>, <a href="https://stackoverflow.com/a/47571812/8554766">2</a>, <a href="https://stackoverflow.com/questions/24270715/send-anonymous-mail-from-local-machine">3</a>, <a href="https://stackoverflow.com/questions/9763455/how-to-send-a-mail-directly-to-smtp-server-without-authentication?rq=1">4</a>). From these I've distilled the following snippet, to compose and send an email from Python code:</p>
<pre class="lang-python prettyprint-override"><code>import smtplib

from email.message import EmailMessage

message = EmailMessage()
message.set_content('Message content here')
message['Subject'] = 'Your subject here'
message['From'] = 'me@example.com'
message['To'] = 'user@example.com'

smtp_server = smtplib.SMTP('smtp.server.address:587')
smtp_server.send_message(message)
smtp_server.quit()
</code></pre>
<p>Next (obvious) question was what to pass to <code>smtplib.SMTP()</code> instead of <code>'smtp.server.address:587'</code>. From the comments to <a href="https://stackoverflow.com/a/2691249/8554766">this answer</a>, I discovered that local SMTP server (just for testing purposes though) could be started via <code>python3 -m smtpd -c DebuggingServer -n localhost:1025</code>, then <code>smtp_server = smtplib.SMTP('smtp.server.address:587')</code> could be changed to <code>smtp_server = smtplib.SMTP('localhost:1025')</code> and all the sent emails will be displayed in the console (from where <code>python3 -m smtpd -c DebuggingServer -n localhost:1025</code> command was executed), being enough for testing — it was not what I wanted (my aim was — the ability to send a mail to 'real-world' email address from local machine, using Python code only).</p>
<p>So, the next step would be to setup a local SMTP server, capable of sending an email to external 'real-world' email-address (as I wanted to do it all from Python code, so the server itself would better be implemented in Python too). I recalled reading in some magazine (in early 2000), that spammers use local servers for sending mails (that particular article was talking about <a href="https://en.wikipedia.org/wiki/Sambar_Server" rel="noreferrer">Sambar</a>, development for which have ended in 2007, and which was not written in Python :-) I thought there should be some present-day solution with similar functionality. So I started searching, my hope was to find (on stackoverflow or elsewhere) a reasonably short code snippet, which will do what I wanted. I haven't found such a code snippet, but I came across a snippet titled <a href="https://www.example-code.com/python/send_email_without_mail_server.asp" rel="noreferrer">(Python) Send Email without Mail Server</a> (which uses <a href="https://www.chilkatsoft.com/python.asp" rel="noreferrer">chilkat</a> API), though all I needed (supposedly) was right there, in the comments to code, the first line clearly stated:</p>
<blockquote>
<p>Is it really possible to send email without connecting to a mail server?  Not really.</p>
</blockquote>
<p>and a few lines below:</p>
<blockquote>
<p>Here's what happens inside those other components that claim to not need a mail server: The component does a DNS MX lookup using the intended recipient's email address to find the mail server (i.e. SMTP server) for that domain.  It then connects to that server and delivers the email. You're still connecting to an SMTP server — just not YOUR server.</p>
</blockquote>
<p>Reading that, made me understand — I, clearly, was lacking some details in my understanding (reflected on picture above) of the process. To correct this I have read the whole <a href="https://tools.ietf.org/html/rfc5321.html" rel="noreferrer">RFC on SMTP</a>.</p>
<hr/>
<p>After reading the RFC, <strong>my improved understanding</strong> of the process, might be pictured like this:
<a href="https://i.stack.imgur.com/q3Tn3.jpg" rel="noreferrer"><img alt="My improved understanding" src="https://i.stack.imgur.com/q3Tn3.jpg"/></a></p>
<hr/>
<p>From this understanding, came the <strong>actual questions</strong> I'd like to clarify:</p>
<ol>
<li>Can my "<em>improved understanding</em>" be considered correct, as a general picture?</li>
<li><p>What addresses, exactly, are returned by MS lookup?</p>
<ul>
<li><p>using <code>host -t mx gmail.com</code> command (suggested by <a href="https://superuser.com/a/44267/820330">this answer</a>), I was able to retrieve the following:</p>
<pre><code>gmail.com mail is handled by 10 alt1.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 20 alt2.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 40 alt4.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 30 alt3.gmail-smtp-in.l.google.com.
gmail.com mail is handled by 5 gmail-smtp-in.l.google.com.
</code></pre></li>
<li>but none of these are mentioned in the <a href="https://support.google.com/a/answer/176600?hl=en" rel="noreferrer">official docs</a> (ones that are there: <code>smtp-relay.gmail.com</code>, <code>smtp.gmail.com</code>, <code>aspmx.l.google.com</code>)</li>
</ul></li>
<li><p>Is authentication always needed to pass an email to SMTP-server of an established mail service (say gmail)?</p>
<ul>
<li><p>I understand that to use, say <code>smtp.gmail.com</code> for mail submission, you'll need, regardless if the recipient has a <code>@gmail</code> address or not (as it stated in <a href="https://support.google.com/a/answer/176600?hl=en" rel="noreferrer">docs</a>):</p>
<blockquote>
<p>Your full Gmail or G Suite email address is required for authentication.</p>
</blockquote></li>
<li><p>But, if an email to <code>user@gmail.com</code> is submitted to SMTP-server not owned by gmail, then it'll be redirected to one of the gmail servers (directly or via gateway/relay). In this case (I assume) sender of an email will only need to authenticate on mail submission, so after that gmail server will accept the mail without authentication? </p>
<ul>
<li>If yes, what is preventing me from "pretending" to be such a gateway/relay and hand over emails directly to their designated SMTPs? Then it, also should be pretty easy to write a "proxy-SMTP", which will just search for an appropriate server via MX lookup, and hand an email to it sort of directly. </li>
</ul></li>
</ul></li>
<li><p><a href="https://support.google.com/a/answer/176600?hl=en" rel="noreferrer">Documentation on gmail SMTP</a>, also mentions <code>aspmx.l.google.com</code> server, which does not require authentication, though:</p>
<blockquote>
<p>Mail can only be sent to Gmail or G Suite users.</p>
</blockquote>
<p>With that being said, I assume the following snippet should work, for submitting a mail to <code>ExistingUser@gmail.com</code> mailbox:</p>
<pre class="lang-python prettyprint-override"><code>import smtplib

from email.message import EmailMessage

message = EmailMessage()
message.set_content('Message test content')
message['Subject'] = 'Test mail!'
message['From'] = 'me@whatever.com'
message['To'] = 'ExistingUser@gmail.com'

smtp_server = smtplib.SMTP('aspmx.l.google.com:25')
smtp_server.send_message(message)
smtp_server.quit()
</code></pre>
<p>When ran, the code above (with <code>ExistingUser@gmail.com</code> replaced by the valid mail) throws <code>OSError: [Errno 65] No route to host</code>. All I want to confirm here is that the communication to <code>aspmx.l.google.com</code> is handled correctly in code.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Your understanding of how mail works is roughly correct. Some additional notes that may clear things up:</p>
<ul>
<li><p>SMTP is used for two distinct purposes. You seem to be confusing these two.:</p>
<ul>
<li><p>The first use, typically called "submission", is to send a mail from an MUA (Mail User Agent, your mail program, Outlook, Thunderbird, ...) to an MTA (Mail Transfer Agent, typically called "mail server"). MTAs are run by your <a href="https://en.wikipedia.org/wiki/Internet_service_provider" rel="nofollow noreferrer">ISP</a>, or by mail-providers such as GMail. Typically, their use is restricted by either IP address (only customers of said ISP can use it), or username/password.</p></li>
<li><p>The second use is to send mail from one MTA to another MTA. This part is, usually, wide open, since you are probably willing to accept inbound mail from anyone. This is also the location where anti-spam measures are taken.</p></li>
</ul></li>
</ul>
<p>In order to send a mail, you need, at least, the second part of SMTP: the ability to talk to another MTA to deliver the mail.</p>
<p>The typical way to send mails is to compose the mail in your application, then send it off to an MTA mail server for delivery. Depending on your setup, that MTA can be either installed on the same machine as your Python code is running on (localhost), or can be a more "central" mail server (possibly requiring authentication).</p>
<p>"Your" MTA will take care of all the nasty details of delivering mail such as:</p>
<ul>
<li><p>Doing DNS lookups to find out the MTA's to contact to relay the mail. This includes MX-lookup, but also other fallback mechanisms such as <a href="https://en.wikipedia.org/wiki/List_of_DNS_record_types#A" rel="nofollow noreferrer">A-records</a>.</p></li>
<li><p>Retrying delivery, if the first attempt fails temporarily</p></li>
<li><p>Generating a bounce message, if the message fails permanently</p></li>
<li><p>Make multiple copies of the message, in case of multiple recipients on different domains</p></li>
<li><p>Signing the message with <a href="https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail" rel="nofollow noreferrer">DKIM</a> to reduce the chance of it being marked as SPAM.</p></li>
<li><p>...</p></li>
</ul>
<p>You could, of course, re-implement all these features within your own Python code, and effectively combine an MTA with your application, but I strongly advise against it. Mail is surprisingly hard to get right...</p>
<p>Bottom line: Try to send the mail via SMTP to the mail server of your provider or another mail service. If that is not possible: think really hard if you want to run your own mail server. Being marked as a spammer happens easily; getting removed from spam-lists is much harder. Don't re-implement SMTP-code in your application.</p>
</div>
<span class="comment-copy">im just upvoting this based on content alone... well done sir.</span>
<span class="comment-copy">Such a huge question... But I think if you actually want to use a local smtp server to send email, then gmail won't be your choice and your question can be simplified into "Is there a smtp server written in python?". Or if you can accept using gmail, then there isn't any difference between using gmail or any other external smtp server...</span>
<span class="comment-copy">@IljaEverilä, from the <a href="https://docs.python.org/3/library/smtplib.html#smtplib.SMTP" rel="nofollow noreferrer">documentation</a> it might seem so :-) In source code, though, you <a href="https://github.com/python/cpython/blob/97fe1b493df979956c66c57095bc7fce22104faf/Lib/smtplib.py#L251" rel="nofollow noreferrer">can see</a>, that it just calls <code>self.connect(host, port)</code>. And <a href="https://github.com/python/cpython/blob/97fe1b493df979956c66c57095bc7fce22104faf/Lib/smtplib.py#L324" rel="nofollow noreferrer"><code>connect</code> method will</a>, in turn, parse <code>port</code> from <code>host</code>, passed to it (in case if <code>port</code> is <code>0</code>, which it is by default). Am I missing anything?</span>
<span class="comment-copy">Today I learned :)</span>
<span class="comment-copy">@Sraw, perhaps I didn't make it clear enough. I am interested in internal mechanics of how SMTP servers work and communicate with each other. Of course there are SMTP servers in Python (say <a href="https://docs.python.org/3/library/smtpd.html" rel="nofollow noreferrer">SMTPD</a>), and it's surely not too hard to check the docs on how to retrieve an email from gmail (or any other mail provider), though it involves usage of <a href="https://support.google.com/mail/answer/7126229?hl=en" rel="nofollow noreferrer">IMAP</a> or <a href="https://support.google.com/mail/answer/7104828?hl=en" rel="nofollow noreferrer">POP</a> rather than SMTP, I think =).</span>
