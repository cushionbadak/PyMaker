<div class="post-text" itemprop="text">
<p>Hi I'm a beginner at Python and am currently using Python 3.4.1 on PyCharm. I have recently made a project that calculates the amount of days between 2 dates, but there are 2 problems.</p>
<pre><code>def get_first_day():
    while True:
        try:
            print('First Date')
            day = int(input('Day:'))
            month = int(input('Month:'))
            year = int(input('Year:'))
            print(day, '/', month, '/', year)
            date = [day, month, year * 365]
            get_second_day(date)
        except ValueError:
            print('You were supposed to enter a date.')

 def get_second_day(date_1):
    while True:
       try:
           print('Second Date')
           day = int(input('Day:'))
           month = int(input('Month:'))
           year = int(input('Year:'))
           print(day, '/', month, '/', year)
           date = [day, month, year * 365]
           convert_dates_and_months(date_1, date)
       except ValueError:
           print('You were supposed to enter a date.')


def convert_dates_and_months(date_1, date_2):
    days_unfiltered = [date_1[0], date_2[0]]
    months_unfiltered = [date_1[1], date_2[1]]
    year = [date_1[2], date_2[2]]
    date_unfiltered = zip(days_unfiltered, months_unfiltered, year)
    for d, m, y in date_unfiltered:
        if m in [1, 3, 5, 7, 8, 10, 12]:
            a = 31
        elif m in [4, 6, 9, 11]:
            a = 30
        elif m in [2, 0] and int(y) % 4 is 0:
            a = 29
        else:
            a = 28
        m *= a
    days = list(filter(lambda x: 0 &lt; x &lt; (a + 1), days_unfiltered))
    months = list(filter(lambda x: 0 &lt; x &lt; 13, months_unfiltered))
    date_1 = [days[0], months[0], year[0]]
    date_2 = [days[1], months[1], year[1]]
    determine_date_displacement(date_1, date_2)


def determine_date_displacement(date_1, date_2):
    full_dates = zip(date_1, date_2)
    days = -1
    for k, v in full_dates:
        days += (int(v) - int(k))
    if days &lt; 0:
        days *= -1
    print(days)


get_first_day()
</code></pre>
<p>The first problem is that the counter returns an incorrect number of days between 2 dates. The second is that def get_second_day repeats at the end for some reason. I'll show you what I mean:</p>
<pre><code>First Date
Day:10
Month:09
Year:03
10 / 9 / 3

Second Date
Day:06
Month:06
Year:06
6 / 6 / 6

1087

Second Date
Day:
</code></pre>
<p>I know for a fact there are exactly 1,000 days between 10/09/03 and 06/06/06, yet the project returns 1,087 days. </p>
<p>If anyone could explain why this project is returning an incorrect number, as well as why it asks me to fill the second date again at the end, that would be perfect.</p>
<p>As this is my first question and I'm a beginner at Python, I apologise in advance for any weird phrasing/bad practices seen in this question.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Problem 1:</h2>
<p>Your leap year calculation is off: </p>
<p>Leap years are <code>years % 4 == 0</code> but only for years not <code>year % 100 == 0</code> unless 
they are also <code>year % 400 == 0</code>:</p>
<pre><code>2004,2008,2012 : leap year (%4==0, not %100==0)
1700,1800,1900 : no leap year (%4 == 0 , % 100 == 0 but not %400 == 0)
1200,1600,2000 : leap years (* 1200 theor. b/c gregorian cal start)
</code></pre>
<h2>Problem 2:</h2>
<p>In your input you premultiply the year by 365 w/o checking for leap-years - they schould have 366 days but got 365 - which would result in lacking days when computing the amount of days for years that leap(ed).</p>
<h2>Problem 3:</h2>
<p>You have a controlflow-issue: the <code>get_second_day()</code> repeats because you do:</p>
<pre><code>get_first_date()
    while without end:
        do smth
        call get_second_date(..)
             while without end:
                 do smth 
                 call some calculation functions
                     that calc and print and return with None 
                 back in get_second_date(), no break, so back to the beginning
                 of its while and start over forever - you are TRAPPED
</code></pre>
<ul>
<li>fix it by putting a <code>break</code> after <code>convert_dates_and_months(date_1, date)</code> inside <code>get_second_day(..)</code></li>
</ul>
<hr/>
<p><strong>Suggestions:</strong></p>
<p>You can streamline the input by reducing the amount of duplicate code between <code>get_first_day()</code> and <code>get_second_day()</code> - this follows the DRY principle (<strong>D</strong>on't <strong>R</strong>epeat <strong>Y</strong>ourself):</p>
<pre><code>def getDate(text):
    while True:
        try:
            print(text)
            day = int(input('Day:'))
            month = int(input('Month:'))
            year = int(input('Year:'))
            print(day, '/', month, '/', year)
            return [day, month, year * 365]  # see Problem 2
        except ValueError:
            print('You were supposed to enter a date.')


def get_first_day():
    date1 = getDate("First Date")
    # rest of code omitted 

def get_second_day(date_1):
    date = getDate("Second Date")
    # rest of code omitted 
</code></pre>
<hr/>
<p>A better solution would utilize <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">datetime and datettime-parsing</a>, especially if you want to handle input validation and leap-year estimation you would need far more checks.</p>
<p>Using <code>datetime</code> module would simplyfy this a lot:</p>
<pre><code>import datetime

def getDate(text):
    while True:
        try:
            print(text)
            day = int(input('Day:'))
            month = int(input('Month:'))
            year = int(input('Year (4 digits):'))
            print(day, '/', month, '/', year)

            # this will throw error on invalid dates: 
            # f.e. 66.22.2871 or even (29.2.1977) and user
            # gets a new chance to input something valid
            return datetime.datetime.strptime("{}.{}.{}".format(year,month,day),"%Y.%m.%d")
        except (ValueError,EOFError):
            print('You were supposed to enter a valid date.')


def get_first_day():
    return getDate("First Date")

def get_second_day():
    return getDate("Second Date")

# while True: # uncomment and indent next lines to loop endlessly
first = get_first_day()     # getDate("First Date") and getDate("Second Date") 
second = get_second_day()   # directly would be fine IMHO, no function needed
print( (second-first).days) 
</code></pre>
<p>Output:</p>
<pre><code>First Date
Day:10
Month:9
Year (4 digits):2003
10 / 9 / 2003
Second Date
Day:6
Month:6
Year (4 digits):2006
6 / 6 / 2006
1000 
</code></pre>
<p>Good read: <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">How to debug small programs (#1)</a> - following it, could have at least lead you to the control-flow issue.</p>
</div>
<span class="comment-copy">I understand you may want to do it yourself for learning purpose, but may i suggest a simple way to do it : <a href="https://stackoverflow.com/questions/151199/how-do-i-calculate-number-of-days-between-two-dates-using-python" title="how do i calculate number of days between two dates using python">stackoverflow.com/questions/151199/â€¦</a></span>
<span class="comment-copy">I'd recommend to use the library <code>datetime</code> and its convenient functions for this topic.</span>
<span class="comment-copy">@JeffProd Thanks for the link!</span>
<span class="comment-copy">@SpghttCd I was aware of datetime, but I created it from built-ins just for learning purposes, as JeffProd said. Still, thanks though!</span>
<span class="comment-copy">also <code>arrow</code> package extremely useful and ftiendly</span>
