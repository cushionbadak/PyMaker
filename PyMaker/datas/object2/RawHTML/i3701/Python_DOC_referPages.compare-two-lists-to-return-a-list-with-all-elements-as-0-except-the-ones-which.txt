<div class="post-text" itemprop="text">
<p>I am a bit stuck on this:</p>
<pre><code>a = [1,2,3,2,4,5]
b = [2,5]
</code></pre>
<p>I want to compare the two lists and generate a list with the same items as <code>a</code>, but with any items that don't occur in <code>b</code> set to 0. Valid outputs would be these:</p>
<pre><code>c = [0,2,0,0,0,5]
# or
c = [0,0,0,2,0,5]
</code></pre>
<p>I would not know the number elements in either list beforehand.</p>
<p>I tried <code>for</code> loops but</p>
<pre><code>['0' for x in a if x not in b]
</code></pre>
<p>It removes all instances of 2. Which I only want to remove once(it occurs once in <code>b</code> for the moment). I need to add a condition in the above <code>loop</code> to keep elements which match.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following would work:</p>
<pre><code>a = [1,2,3,2,4,5]
b = [2, 5]

output = []

for x in a:
    if x in b:
        b.remove(x)
        output.append(x)
    else:
        output.append(0)
</code></pre>
<p>or for a one-liner, using the fact that <code>b.remove(x)</code> returns <code>None</code>:</p>
<pre><code>a = [1,2,3,2,4,5]
b = {2, 5}

output = [(b.remove(x) or x) if x in b else 0 for x in a]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the elements in <code>b</code> are unique, this is best done with a <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><code>set</code></a>, because sets allow very efficient membership testing:</p>
<pre><code>a = [1,2,3,2,4,5]
b = {2, 5}  # make this a set

result = []
for num in a:
    # If this number occurs in b, remove it from b.
    # Otherwise, append a 0.
    if num in b:
        b.remove(num)
        result.append(num)
    else:
        result.append(0)

# result: [0, 2, 0, 0, 0, 5]
</code></pre>
<hr/>
<p>If <code>b</code> can contain duplicates, you can replace the set with a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>, which represents a multiset:</p>
<pre><code>import collections

a = [1,2,3,2,4,5]
b = collections.Counter([2, 2, 5])

result = []
for num in a:
    if b[num] &gt; 0:
        b[num] -= 1
        result.append(num)
    else:
        result.append(0)

# result: [0, 2, 0, 2, 0, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way using <code>set</code>. Downside is the <code>list</code> copy operation and initial <code>set</code> conversion. Upside is O(1) removal and lookup operations.</p>
<pre><code>a = [1,2,3,2,4,5]
b = [2,5]

b_set = set(b)
c = a.copy()

for i in range(len(c)):
    if c[i] in b_set:
        b_set.remove(c[i])
    else:
        c[i] = 0

print(c)

[0, 2, 0, 0, 0, 5]
</code></pre>
</div>
<span class="comment-copy"><code>[b.pop(b.index(x)) if x in b else 0 for x in a]</code></span>
<span class="comment-copy">@Ev.Kounis Yuck. List comprehension with side effects and quadratic complexity? No thanks. Can you post that as answer so I can downvote it?</span>
<span class="comment-copy">If we set <code>a = [1, 2]</code> and <code>b = [1]</code>, would <code>c = [0, 1]</code> be a valid output?</span>
<span class="comment-copy">@Aran-Fey, no it wouldn't be valid. I have to feed this list into a <code>df</code> column and match it with the previous columns value.</span>
<span class="comment-copy">Thank you. This works perfectly. Just wondering and waiting to see if it can be done in a simple one line.</span>
<span class="comment-copy">The other post got deleted but seemed to use sets and then do the needful. The tuple thing is not really something I want to use.</span>
<span class="comment-copy">Updated with a better one-liner</span>
<span class="comment-copy">Nice one. "sets allow very efficient membership testing": is it because all the elements are hashable?</span>
<span class="comment-copy">@JacquesGaudin Exactly. In the average case, a membership test in a set is just a hashing operation followed by a modulo to calculate an index, and then a check if the bucket at that index is empty. (All of that is <code>O(1)</code>.) In a list, you have to iterate over all the elements in the list until you find one that matches, which is <code>O(n)</code>.</span>
