<div class="post-text" itemprop="text">
<p>If I store the tuple <code>(1, 2, 3)</code> in a txt file as a string, how could I extract it from the txt file and convert it back to the original tuple?</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you could use</p>
<pre><code>s="(1, 2, 3)"
tuple(int(x) for x in s.strip('()').split(','))
</code></pre>
<p>Remove the '(' and ')' and then use <code>tuple()</code>.</p>
<p>Thanks to <a href="https://stackoverflow.com/users/3044673/bla">@bla</a> for pointing out that <code>s.strip('()')</code> can be used instead of <code>s.replace('(').replace(')')</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if __name__ == "__main__":
    # read it from a file
    with open("filename.txt", "r") as myfile:
        # loop through your text file line by line (if you have multiple of these)
        lines = []
        while True:
            # read a line from text
            line = myfile.readline()
            # add the line to a list
            lines.append(line)
            # if there are no more lines to read, step out of loop
            if not line:
                break
    # create a list of tuples
    list_of_tup = []
    for line in lines:
        # remove next line tag "\n"
        line = line[:-1]
        # use eval() to evaluate a string
        list_of_tup.append(eval(line))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your file only contains the tuple, you could simply use <code>eval</code>.</p>
<pre><code>In [1]: with open('tuple.txt') as f:
   ...:     t = eval(f.read())
   ...:     

In [2]: t
Out[2]: (1, 2, 3)
</code></pre>
<p>Note that <code>eval</code> should <em>not</em> be used with untrusted input! That means don't use <code>eval</code> on some random data that a user can enter or that your program has downloaded from the internet. </p>
<p>Creating <code>tuple.txt</code> is not very hard, assuming <code>t</code> references the tuple:</p>
<pre><code>In [4]: with open('tuple.txt', 'w') as f:
   ...:     f.write(str(t))
   ...:
</code></pre>
<hr/>
<p><em>In general</em> though, I would advise you to use the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> module <em>whenever possible</em>. It is a pretty general data format that is also easy for people to read. The latter is a good thing for generating test data and catching bugs.</p>
<p>If you have tabular data, then <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">sqlite3</a> could be a good choice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let suppose your tuple is in <code>MyTuple.txt</code> then you can try below code written in <code>ReadTuple.py</code> to read tuple from a file. </p>
<p>» ReadTuple.py</p>
<pre><code># Open file in read mode
with open('MyTuple.json', encoding='utf-8') as f:
    content = f.read()
    t = eval(content);

# print tuple t read from file
print(t);

# print type of t
print(type(t));
</code></pre>
<p>» MyTuple.txt
<a href="https://i.stack.imgur.com/l3Vrh.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/l3Vrh.png"/></a></p>
<p>Finally, if you will run above code using <code>python ReadTuple.py</code> then you will be able to see the read tuple and its type on your screen.</p>
<p>» Output </p>
<pre><code>(1, 2, 3)
&lt;class 'tuple'&gt;
</code></pre>
</div>
<span class="comment-copy">saving and loading JSON to files may be the way to go</span>
<span class="comment-copy"><b>@Milan</b>, I've updated my answer with again with images. Now I've tested it &amp; it perfectly works. Thanks to <b>@Zev</b> who realized me my mistake that I had done by using <b>json</b> module.</span>
<span class="comment-copy">@Zev You're right. I did a complete re-write. Will it work?</span>
<span class="comment-copy">Yup, looks almost exactly the same as what I came up with. I didn't see that you reposted but I think you got it in there first, so no point of having two of the same answers. I'll remove mine. You just have a quote out of place on that first line.</span>
<span class="comment-copy">@Zev Yeah, thanks. Edited.</span>
<span class="comment-copy">I think you can do <code>s.strip('()')</code> instead of <code>s.replace('(', '').replace(')', '')</code></span>
<span class="comment-copy">You are welcome, :)</span>
<span class="comment-copy">Ah yes, the old Python semicolon. Did you test this? A tuple as OP wrote it by iteself isn't valid json.</span>
<span class="comment-copy"><b>@Zev</b>, I have updated my answer with 3 images. Now I've tested my code. Now it perfectly works. Please check and let me know.</span>
<span class="comment-copy">Looks better. Not sure why you went with images over code snippets.</span>
<span class="comment-copy">No, I'd just added to make it more clear. Any way everyone is smart in this world. I removed 2 images. I just only kept 1 image. Thanks.</span>
