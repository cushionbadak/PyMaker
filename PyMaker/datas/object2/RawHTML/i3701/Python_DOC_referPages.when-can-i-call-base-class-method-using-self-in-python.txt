<div class="post-text" itemprop="text">
<p>What's the difference between using <code>super().method()</code> and <code>self.method()</code>, when we inherit something from a parent class and why use one instead of another?</p>
<p>The only thing that comes to my mind is that with static methods it becomes obviously impossible to call <code>self.method()</code>. As for everything else I can't come up with justification to use <code>super()</code>.</p>
<p>Could someone present a dummy example when choosing one over another matters and explain why, or is it just convention thing?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>self</strong></p>
</blockquote>
<p><strong>self</strong>, which is mostly used as the first parameter of instance methods of classes, always represents the calling object/instance of the class.</p>
<blockquote>
<p><strong>super()</strong></p>
</blockquote>
<p><strong>super()</strong> refers to object of parent class. It is useful in case of method overriding and this is in case of numerous programming languages including C++, Java etc. In Java, <strong>super()</strong> is used to call the constructor of parent class.</p>
<p>Please have a look at the below little example.</p>
<pre><code>class TopClass(object):
    def __init__(self, name, age):
        self.name = name;
        self.age = age;

    def print_details(self):
        print("Details:-")
        print("Name: ", self.name)
        print("Age: ", self.age)
        self.method()

    def method(self):
        print("Inside method of TopClass")

class BottomClass(TopClass):
    def method(self):
        print("Inside method of BottomClass")    

    def self_caller(self):
         self.method()

    def super_caller(self):
         parent = super()
         print(parent)
         parent.method()

child = BottomClass ("Ryan Holding", 26)
child.print_details()

"""
Details:-
Name:  Ryan Holding
Age:  26
Inside method of BottomClass
"""

parent = TopClass("Rishikesh Agrawani", 26)
parent.print_details()

"""
Details:-
Name:  Rishikesh Agrawani
Age:  26
Inside method of TopClass
"""

child.self_caller()
child.super_caller()

"""
Inside method of BottomClass
&lt;super: &lt;class 'BottomClass'&gt;, &lt;BottomClass object&gt;&gt;
Inside method of TopClass
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>super().method()</code> will call the parent classes implementation of <code>method</code>, even if the child has defined their own.  You can read the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">documentation for <code>super</code></a> for a more in-depth explanation.</p>
<pre><code>class Parent:
    def foo(self):
        print("Parent implementation")

class Child(Parent):
    def foo(self):
        print("Child implementation")
    def parent(self):
        super().foo()
    def child(self):
        self.foo()

c = Child()
c.parent()
# Parent implementation
c.child()
# Child implementation
</code></pre>
<p>For singular-inheritance classes like <code>Child</code>, <code>super().foo()</code> is the same as the more explicit <code>Parent.foo(self)</code>.  In cases of multiple inheritance, <code>super</code> will determine which <code>foo</code> definition to use based on the <a href="https://www.python.org/download/releases/2.3/mro/" rel="nofollow noreferrer">Method Resolution Order, or MRO</a>.</p>
<p>A further motivating example: which method gets called if we subclass <code>Child</code> and write another implementation of <code>foo</code>?</p>
<pre><code>class Grandchild(Child):
    def foo(self):
        print("Grandchild implementation")

g = Grandchild()
g.parent()
# Parent implementation
g.child()
# Grandchild implementation
</code></pre>
</div>
<span class="comment-copy">Good concise answer. I suggest also referring to the docs</span>
<span class="comment-copy">@Afterlook I think in that case they're identical.</span>
<span class="comment-copy">@Afterlook if the child is lacking an explicit implementation of a method you don't use <code>super</code> for "normal" usage because the fact that the method is looked up in a parent class is an implementation detail. You only use <code>super</code> when you explicitly and consciously need the parent class implementation.</span>
<span class="comment-copy">The follow up questions that were answered by @PatrickHaugh and @timgeb were about when <code>super</code> and <code>self</code> produce the same results and the case when to use one over the other. I deleted the comments because I decided to explore on my own. Didn't expect you guys to be co quick. Thanks.</span>
<span class="comment-copy">Hey Patrick, just saw you earned the gold Python badge a couple of hours ago. Contrags! Have fun wielding Mjolnir ;-)</span>
