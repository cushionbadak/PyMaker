<div class="post-text" itemprop="text">
<p>This is a rather silly question...yet it bugs the heck out of me. In the <code>threading</code> module we have a <code>Thread.join()</code> method.
I understand that it blocks the calling thread, but why is <code>.join()</code> called 'join'?  Why is it not called <code>main_thread_wait</code> or <code>block_parent_thread</code> or something like that?</p>
<p>Every time I see <code>.join()</code>, I feel the child thread is joining something to get caclulations done. Is there some reason why this particular keyword was chosen for a method name?</p>
</div>
<div class="post-text" itemprop="text">
<p>This name is far older than Python.  It appears in the POSIX threading library (libpthread) as <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_join.html" rel="nofollow noreferrer"><strong><code>pthread_join()</code></strong></a> (the "pthread" prefix is used because C has no namespaces).  However, for process level concurrency, both <a href="https://docs.python.org/3/library/os.html#os.wait" rel="nofollow noreferrer">Python</a> and <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/wait.html" rel="nofollow noreferrer">POSIX</a> use the name <code>wait()</code>.</p>
<p>Other parts of the pthread library do use the term wait, but usually for higher-level synchronization primitives, such as <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_barrier_wait.html" rel="nofollow noreferrer"><code>pthread_barrier_wait()</code></a> or <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_cond_wait.html" rel="nofollow noreferrer"><code>pthread_cond_wait()</code></a>.  I imagine that <code>pthread_wait()</code> would have been ambiguous between "wait for [some synchronization object]" and "wait for a thread to terminate."</p>
</div>
<div class="post-text" itemprop="text">
<p>The child-thread joins the parent. <code>Thread.start</code> makes the parent give birth to a thread and let it free. <code>Thread.join</code> makes the parent block (wait) until the child is done doing its job.</p>
<p>You can imagine it like this:</p>
<ul>
<li>the parent thread is a mighty god that can live for a long time</li>
<li>with <code>Thread.start</code> it gives birth to a mortal</li>
<li>right after its birth, the mortal runs away and starts living its own life (executing its <code>run</code> method)</li>
<li>the god may continue minding his own business</li>
<li>he also may want to take a look at his offspring, to see whether, literally, it <code>is_alive</code></li>
<li>he also may start observing the whole life of the offspring, waiting for him to come back, right until the death of the latter (this is the <code>join</code> method). While doing that, the god cannot do anything else, because he enjoys admiring his creature so much (the call to <code>join</code> blocks the parent thread), but after the mortal dies, the god can continue his life</li>
</ul>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/25345418/the-join-function-in-threading" title="the join function in threading">stackoverflow.com/questions/25345418/…</a> . First answer.  And a visual <a href="https://stackoverflow.com/questions/15085348/what-is-the-use-of-join-in-python-threading" title="what is the use of join in python threading">stackoverflow.com/questions/15085348/…</a></span>
<span class="comment-copy">The name is copied from <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_join.html" rel="nofollow noreferrer">POSIX</a>, which I believe copied it from various Unixy threading implementations written before threading was standardized.</span>
