<div class="post-text" itemprop="text">
<p>So I have the following script, test.py:</p>
<pre><code>&gt;cat test.py
def foo(x):
    y=x*2
    return y

print foo(100)
x = "aaa100"
print x
</code></pre>
<p>I can run it well:</p>
<pre><code>&gt;python test.py
200
aaa100
</code></pre>
<p>But inside the interactive interpreter, I cannot import it:</p>
<pre><code>&gt;python
Python 2.6.6 (r266:84292, Aug 18 2016, 15:13:37) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-17)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import test                                                       
Traceback (most recent call last):                                    
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;                                 
  File "test.py", line 6, in &lt;module&gt;                                 
    x + 10                                                            
TypeError: cannot concatenate 'str' and 'int' objects 
</code></pre>
<p>Do you see what is wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is already a test module (<a href="https://docs.python.org/3/library/test.html" rel="nofollow noreferrer">https://docs.python.org/3/library/test.html</a> or <a href="https://docs.python.org/2/library/test.html" rel="nofollow noreferrer">https://docs.python.org/2/library/test.html</a>), which is loaded before your local test.py on the PYTHONPATH because you used import.</p>
<p>In the interpreter, you can see where it is</p>
<pre><code>&gt; import test
&gt; test
&lt;module 'test' from 'C:\Python27\lib\test\__init__.pyc'&gt;
</code></pre>
<p>Yours may not be the test module. It tends to successfully import. You must have another test.py on your PYTHONPATH.</p>
<p>Your command line does not have an import, so it is free to use the local filename when you pass it directly to the python executable as an argument.</p>
<p>A simple way to avoid the name conflict, name your file "test_foo.py" and import test_foo. (unless you use test_foo.py in multiple places)</p>
<p>Additionally, consider a run function, in combination with </p>
<pre><code>if __name__ == __main__:
</code></pre>
<p>because right now it will execute those prints as part of the import. You will want to do that also in ... whatever other "test.py" you have.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's either these two cases:</p>
<p>1) Python built-in module "test" (<a href="https://docs.python.org/2.7/library/test.html" rel="nofollow noreferrer">https://docs.python.org/2.7/library/test.html</a>) is being loaded and not your local test.py, however, you shouldn't have any problem importing your local test.py since its a default module, its strange that you are getting an error when you try importing it (unless you have modified it). You can try this to see the imported module cache and check for the test module path
<code>import sys
 print sys.modules</code><br/>
If this is the case then you simply have to open a new python interpreter to make sure no test module has been cached. If its still cached, then change the name of your test.py to something_test.py </p>
<p>2) The code you are representing above is not complete and you have a line "x + 10" and since you are assigning x as a string and trying to add integer, your import isn't working. I doubt this being true as I am sure if this was the case you would be aware of it :-) </p>
</div>
<span class="comment-copy">i think you are importing the wrong file</span>
<span class="comment-copy">The code you are importing has a line of code with <code>x + 10</code>. The code you show here does not have that. So either you did not show the whole code or the file you are importing is different than the one you think you are.</span>
