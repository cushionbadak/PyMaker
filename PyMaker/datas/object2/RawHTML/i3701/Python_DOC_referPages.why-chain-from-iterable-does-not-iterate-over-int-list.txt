<div class="post-text" itemprop="text">
<p>why <code>chain.from_iterable</code> gives error if argument given to it is <code>sus(7)</code> which is a list of integers instead it works perfectly fine when <code>[sus(7)]</code> is passed to it.</p>
<pre><code>import itertools as p

def sus(n):

    a = []
    for i in range(n):
        a.append(i)
    return a

print(sus(7))

for i in p.chain(sus(7)):
    print('a1',i)
for i in p.chain.from_iterable(sus(7)):
    print('a2',i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you look at the source of chain.from_iterable:</p>
<pre><code>def from_iterable(iterables):
# chain.from_iterable(['ABC', 'DEF']) --&gt; A B C D E F
    for it in iterables:
        for element in it:
            yield element
</code></pre>
<p>You can see that it expects an iterable, such as a list, of iterables. This works fine if you have, e.g., a list of strings. However, if your list elements cannot be iterated over, and that applies to any numeric value such as an int, it will throw the error you got.</p>
</div>
<span class="comment-copy">Because it takes an iterable of iterables, and a list of ints is an iterable of ints, and ints are not iterable. Looking at the documentation’s example correct use of <code>itertools.chain.from_iterable</code> might help.</span>
<span class="comment-copy">Thanks a lot. Now I get it.</span>
<span class="comment-copy">That's not the source code of <code>chain.from_iterable</code>; that's an example Python implementation of equivalent functionality.</span>
<span class="comment-copy">Ok but I got it from the docs at  <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@PaulaThomas <a href="https://github.com/python/cpython/blob/master/Modules/itertoolsmodule.c" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Modules/itertoolsmodule.c</a></span>
<span class="comment-copy">@PaulaThomas: The docs say <code>chain.from_iterable</code> is <i>roughly equivalent to</i> that Python function, not that that's the actual implementation.</span>
