<div class="post-text" itemprop="text">
<p>I have a python list: </p>
<pre><code>['AM43',
 'AM22',
 'AM51',
 'AM43',
 'AM22',
 'AM51',
 'AM43',
 'AM22',
 'AM51']
</code></pre>
<p>I want the output to be a list:</p>
<pre><code>['AM43',
 'AM43',
 'AM43',
 'AM22',
 'AM22',
 'AM22',
 'AM51',
 'AM51',
 'AM51']
</code></pre>
<p>I tried <code>sort()</code> but that also rearranges the order. I don't want that. I want the output to be in the same order as the input list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dict that stores the index of the first occurrence of each value, and use the dict to perform the sort:</p>
<pre><code>lst = ["AM43", "AM22", "AM51", "AM43", "AM22", "AM51", "AM43", "AM22", "AM51"]

ix = {k: i for i, k in reversed(list(enumerate(lst)))}
res = sorted(lst, key=ix.get)
# ['AM51', 'AM51', 'AM51', 'AM22', 'AM22', 'AM22', 'AM43', 'AM43', 'AM43']
</code></pre>
<p>Edit: @emsimposon92 provides a 2-pass linear-time solution implementable as follows:</p>
<pre><code>from collections import Counter

ctr = Counter(lst)
visited = set()
res2 = list()
for x in lst:
    if x in visited:
        continue
    res2.extend([x] * ctr[x])
    visited.add(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a list for each unique number and then just concatenate them based on the original input order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Following Yakym Pirozhenko's answer, to get the appropriate order you need to reverse-enumerate <code>lst</code> when building the index dict:</p>
<pre><code>lst = ["AM43", "AM22", "AM51", "AM43", "AM22", "AM51", "AM43", "AM22", "AM43"]

ix = {k: i for i, k in zip(range(len(lst), -1, -1), reversed(lst))}

res = sorted(lst, key=ix.get)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using <code>collections.Counter</code>, <code>itertools</code> and <code>toolz.unique</code>. Note the last uses a 3rd party library, but the source code is just an <code>itertools</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">unique_everseen recipe</a>.</p>
<pre><code>from collections import Counter
from itertools import repeat, chain
from toolz import unique

lst = ['AM43', 'AM22', 'AM51', 'AM43', 'AM22',
       'AM51', 'AM43', 'AM22', 'AM51']

c = Counter(lst)
uniques = unique(lst)

res = list(chain.from_iterable(repeat(u, c[u]) for u in uniques))

res

['AM43', 'AM43', 'AM43',
 'AM22', 'AM22', 'AM22',
 'AM51', 'AM51', 'AM51']
</code></pre>
</div>
<span class="comment-copy">for small lists <code>sorted(lst, key=lst.index)</code></span>
<span class="comment-copy">There is no inbuilt function that will do what you are after. This seems like a really interesting problem, and something that might even be a good interview question. Use the opportunity to improve your problem solving skills. If you absolutely need a hint, a data structure that will help is a list of lists. Appending to that will allow you to maintain the order you want.</span>
<span class="comment-copy">How can you group values without changing their order?</span>
<span class="comment-copy">For the order they want remove<code>reversed()</code></span>
<span class="comment-copy">I was composing a similar solution, <code>seq = sorted(seq, key=seq.index)</code>, which works along the same lines. But this is more efficient since <code>dict.get</code> is O(1) and <code>list.index</code> is O(N).</span>
<span class="comment-copy">Note this common algorithm with <code>visited</code> replicates <code>toolz.unique</code> or the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools unique_everseen recipe</a>.</span>
<span class="comment-copy">Hmm, maybe you <i>did</i> need the <code>reversed</code> after all. But it needed to be outside the enumerate, rather than inside. But you can't natively reverse an enumerate object, so you'd need <code>{k: i for i, k in reversed(list(enumerate(lst)))}</code></span>
<span class="comment-copy">@JacquesGaudin thanks for spotting the error.</span>
