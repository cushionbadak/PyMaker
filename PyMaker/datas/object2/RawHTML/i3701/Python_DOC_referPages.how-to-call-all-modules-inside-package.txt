<div class="post-text" itemprop="text">
<p>I have a project which has this hierarchy</p>
<pre><code>tasker/
        table/
                __init__.py
                user.py
                task.py
                ...
        __init__.py
        tasker.py
</code></pre>
<p>every file inside <code>table</code> folder (except <code>__init__.py</code>) contains a class that has a same name as the file name except the first letter is capitalized. I want to call and instantiate every class inside <code>table</code> folder in <code>tasker.py</code>. I can do it by writing</p>
<pre><code>import table
</code></pre>
<p>inside <code>tasker.py</code>. But, it turns out that I have to write for example</p>
<pre><code>table.user.User()
</code></pre>
<p>to instantiate class inside <code>user.py</code> and it looks very ugly. Is there any way so that I only type at least</p>
<pre><code>user.User()
</code></pre>
<p>or even better,</p>
<pre><code>User()
</code></pre>
<p>to instantiate those classes?</p>
<p>Note: Every files inside <code>table</code> folder is dinamically changed. I might add or remove file in <code>table</code> folder.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest doing most of the work automatically. You can register your modules of interest in <code>tasker.table.__init__</code>:</p>
<pre><code>table_registry = ['user', 'task', ...]
</code></pre>
<p>You don't need to import anything at this point and I wouldn't recommend using <code>__all__</code> as it serves a different purpose altogether. The advantage of using a manually created list is that your package can contain other modules without any interference.</p>
<p>Now <code>tasker.tasker</code> can do all the work dynamically:</p>
<pre><code>from .table import table_registry
from importlib import import_module

pkg = 'tasker.table'
for name in table_registry:
    mod = import_module('.' + name, package=pkg)
    name = name.titlecase()
    # Check if module contains uppercased class name
    if hasattr(mod, name):
        cls = getattr(mod, name)
        # Check if it's a class
        if isinstance(cls, type):
            # Assign to current module
            globals()[name] = cls

del name, mod, cls
</code></pre>
<p>If you don't want to bother with manually registering your modules of interest, you can dynamically discover them using the utilities in <a href="https://docs.python.org/3/library/pkgutil.html" rel="nofollow noreferrer"><code>pkgutil</code></a>. In This version, <code>tasker.table.__init__</code> can remain empty. <code>tasker.tasker</code> will get the module list like this:</p>
<pre><code>from pkgutil import walk_packages
from importlib import import_module

for info in walk_packages(tasker.table.__path__, prefix='tasker.table.'):
    if info.ispkg: continue
    mod = import_module(info.name)
    name = info.name.split('.')[-1].titlecase()
    if hasattr(mod, name):
        ...
</code></pre>
<p>The remainder of the code is the same as for the manual version. This version will recurse into any sub-packages it finds. It will work fine as long as you don't do anything crazy with your <code>__path__</code> attributes.</p>
</div>
<div class="post-text" itemprop="text">
<p>This might work</p>
<pre><code>from table import user

user.User()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can import all modules inside a package at once using asterisks:</p>
<pre><code>from table import *
</code></pre>
</div>
<span class="comment-copy">@abdul_niyas_pm. Your answer wasn't that bad. There was no need to delete it.</span>
<span class="comment-copy">I don't understand part <code>globals()[name] = cls()</code>. Is that putting an instance of class inside a variable? Is that mean variable <code>User</code> is already an instance and not a class? Because I want to instantiate class multiple times inside <code>tasker.tasker</code>. Is it okay if I write <code>globals()[name] = cls</code> instead?</span>
<span class="comment-copy">@fahadh4ilyas. Yes of course. I misunderstood your requirement</span>
<span class="comment-copy">I've tried it and it's working. But, it's kind of slow when I do <code>from tasker.tasker import something</code>. Is it because for loop?</span>
<span class="comment-copy">@fahadh4ilyas. Could be. How many tables do you have?</span>
<span class="comment-copy">It's working but I have to manually write <code>from table import module</code>. Is there any way to do it dinamically?</span>
