<div class="post-text" itemprop="text">
<p>I have the following class. It has two instance variables represented as arrays. They will not necessarily have the same length:</p>
<pre><code>class A(object):

    def __init__(self, input):
        self.input = []
        for data in input:
            self.input.append(data)
        self.other_information = []
</code></pre>
<p>Both <code>self.input</code> and <code>self.other_information</code> will contain objects from other classes. In my <code>__str__</code> method, I will need to iterate over them both. Defining an <code>__iter__</code> method to handle an object with an instance variable with a single array is no problem. If the two arrays had the same length, this wouldn't be an issue, but can I do a single <code>__iter__</code> method to iterate over two instance variables in my <code>__str__</code> method that have different lengths? I've seen the non- OOP posts on here, but what of something like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use itertools.chain() to iterate on your two arrays sequentially</p>
<pre><code>import itertools


class A(object):
    def __init__(self, input):
        self.input = []
        for data in input:
            self.input.append(data)
        self.other_information = list(range(5))

    def __iter__(self):
        return itertools.chain(self.input, self.other_information)


a = A(['a', 'b', 'c'])

for i in a:
    print(i)

# a
# b
# c
# 0
# 1
# 2
# 3
# 4
</code></pre>
<p>You can also use "yield from". The result will be the same.</p>
<pre><code>def __iter__(self):
    yield from self.input
    yield from self.other_information
</code></pre>
</div>
<span class="comment-copy">What do you expect the output to look like?  There are a whole bunch of ways to iterate over two things: zipped, interleaved, one after another, etc.  Which do you want to use?</span>
<span class="comment-copy">Sequentially. One array, then the other. Really unsure of my options in an oop context. In a functional context, I can do anything. This seems different.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.chain</a>, then; it's not clear why the lengths are relevant. Or just write the functional version, Python is multi-paradigm.</span>
