<div class="post-text" itemprop="text">
<p>I am trying to write to a different file every N iterations in a loop, and store everything that happened between that batch.
I can accomplish this by using lists. 
For example, </p>
<pre><code>import os

def write_to_file(data, fileName):
    file = os.path.join('/home/user/data', fileName)
    with open(file, 'a') as f:
        f.write(str(data))

TEMP = [] 
for i in range(50):
    TEMP.append(i)
    if i != 0 and i % 10 == 0:
        write_to_file(TEMP, 'data{}.txt'.format(i))
        TEMP = []
</code></pre>
<p>This will effectively write into a different file every 10th iteration , as expected, like the following:</p>
<pre class="lang-none prettyprint-override"><code>File #1: [0, ... , 10]
File #2: [11, ..., 20]
...
</code></pre>
<p>But is there any other way of doing this without having to use a <code>list</code>?
I am not having performance issues or anything but I feel like there most be another way of doing this without having to explicitly call a <code>list</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to temporarily store the work, your only option is to write to the file incrementally, like this:</p>
<pre><code>nfilenum=0
newfileevery=7

fd = None
try: 
   for i in xrange(50):

      if (i%newfileevery)==0
         if fd is not None: fd.close()
         fd = open("{}.txt".format(nfilenum), 'w')

      fd.write("{} ".format(i)) # The stuff

finally:
   if fd is not None: fd.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper</code> recipe</a> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> to accomplish your task:</p>
<pre><code>from itertools import zip_longest


def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

for g in grouper(range(1, 51), 10):
    write_to_file(g, 'data{}.txt'.format(g[-1]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://stackoverflow.com/a/312464/9209546">this chunking recipe</a> to write a list each time. In addition, you can <code>enumerate</code> to extract an index for each chunk. For example:</p>
<pre><code>def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

def write_to_file(data, fileName):
    file = os.path.join('/home/user/data', fileName)
    with open(file, 'a') as f:
        f.writelines(', '.join(map(str, data))+'\n')

for i, chunk in enumerate(chunks(list(range(1, 51)), 10)):
    write_to_file(chunk, 'data{}.txt'.format(i))
</code></pre>
</div>
<span class="comment-copy">Sure sounds like <a href="https://en.wikipedia.org/wiki/Program_optimization#When_to_optimize" rel="nofollow noreferrer">premature optimzation</a> to me.</span>
