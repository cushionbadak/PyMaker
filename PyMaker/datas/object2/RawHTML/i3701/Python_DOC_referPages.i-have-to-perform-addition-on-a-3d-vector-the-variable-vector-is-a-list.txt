<div class="post-text" itemprop="text">
<pre><code>class Vector:
    def __init__(self, vector):
        self.vector = vector


    def __eq__(self, other):   
        return self.vector==other.vector

#above must not be changed. Below is my work.
#def __str__(self):
#     return self.vector ---Not sure how to use __str__ on a list---



    def __add__(self,other):
        vector = Vector(self.vector+other.vector)
        return vector
</code></pre>
<p>I know this is a wrong method but I have no clue how to work with a list. I just want to know how to work with a list in a class. 
Also, the following statement should work:</p>
<pre><code>x=Vector([2,4,6]) #This is a list right? This is where I get stuck.
y=Vector([7,8,9])
print(x+y==Vector([9.12.15]))
</code></pre>
<p>I don't want the answer to all the operations just the <strong>add</strong> is enough. I just don't understand how to output lists in classes without the statement "a.vector" which clearly was not used the commands given above when creating objects for classes.</p>
<p>Also please specify if any clarification is required.
Any help is appreciated!
I am new to programming and just learnt classes in Python.
Thanks a lot on advance </p>
</div>
<div class="post-text" itemprop="text">
<p>The result of adding two vectors of length 3 should be a vector with 3 elements, where each element is the sum of the corresponding elements in the original two vectors.</p>
<pre><code>def __add__(self,other):
    return Vector([a+b for a,b in zip(self.vector, other.vector)])
</code></pre>
<p>This uses <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to iterate through both the starting vectors together, and constructs the new list using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</p>
<pre><code>&gt;&gt;&gt; x = Vector([2,4,6])
&gt;&gt;&gt; y = Vector([7,8,9])
&gt;&gt;&gt; x+y==Vector([9,12,15])
True
</code></pre>
<p><em>More:</em></p>
<p>If you want to support scalar multiplication, as indicated by your comments, then your <code>other</code> operand is not another vector, but a number. So you need to multiply each element individually by that number.</p>
<pre><code>def __mul__(self, other):
    return Vector([a*other for a in self.vector])
__rmul__ = __mul__
</code></pre>
<p>This should allow you to perform both <code>v*5</code> and <code>5*v</code> where <code>v</code> is a <code>Vector</code> object.</p>
<pre><code>&gt;&gt;&gt; x = Vector([2,4,6])
&gt;&gt;&gt; x*5==Vector([10,20,30])
True
</code></pre>
<p><em>More</em></p>
<p>Here is an example of how you might write a dot-product between two vectors:</p>
<pre><code>def dot(self, other):
    return sum(a*b for (a,b) in zip(self.vector, other.vector))

&gt;&gt;&gt; x = Vector([1,2,3])
&gt;&gt;&gt; y = Vector([3,2,1])
&gt;&gt;&gt; x.dot(y)
10
</code></pre>
</div>
<span class="comment-copy">You can simply zip the lists together and sum each pair of items. But The best way I think is to just use Numpy arrays that have this functionality in themselves by default plus many other useful methods for working with vectors and linear algebra in general.</span>
<span class="comment-copy">Thank you! Zip works as answered below!</span>
<span class="comment-copy">It works! But I have never heard of zip before. That is why...</span>
<span class="comment-copy">Another better alternative is to just use <code>map</code> and <code>operator.add</code>.  Like <code>list(map(add, [1, 2], [3, 4]))</code>.</span>
<span class="comment-copy">@Kasramvd Better because...?</span>
<span class="comment-copy">@khelwood Pure built-in, functional and more memory efficient in most of the cases that you don't want a list as result (necessarily). However, the <code>zip()</code> solution is the most ad-hoc and neat way to go at these situations and you got my up-v for that ;)).</span>
<span class="comment-copy">@khelwood  how do I tackle this statement?:</span>
