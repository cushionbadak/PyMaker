<div class="post-text" itemprop="text">
<p>I have a number of text files (.txt), the first one is named 1_1_A_A and the last one is named 10_10_B_C. The first element in the names goes from 1 to 10, the second also goes from 1 to 10, the third can be A or B and the fourth can be A, B or C. It makes a total of 600 instances. I want python to read them with CSV reader. For the first two elements, I use <code>%s</code> in two loops and it works properly. But what should I do to iterate the characters in third and fourth place?</p>
<p>The code is something like this, iterating the firs two elements:</p>
<pre><code>for i in range (len(JobSize)):
    for j in range(len(Iteration)):
        with open('%s_%s_A_A.txt' % (JobSize[i], Iteration[j]), 'rt') as Data:
            reader = csv.reader(Data, delimiter='\t')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over any iterable the same way. It doesn't have to be a <code>range</code>; <code>for i in range(3):</code> does the same thing as <code>for i in [1, 2, 3]:</code>. And the values don't have to be ints—you can do <code>for i in ['A', 'B', 'C']</code>. Or, even more simply, a string is itself an iterable of characters, so <code>for i in 'ABC':</code>.</p>
<p>And, while we're at it, this means you can iterate over the lists <code>JobSize</code> and <code>Iteration</code> directly. Instead of using <code>for i in range(len(JobSize)):</code> and then <code>JobSize[i]</code>, just do <code>for i in JobSize:</code> and use <code>i</code> directly.</p>
<p>So:</p>
<pre><code>for i in JobSize:
    for j in Iteration:
        for k in 'AB':
            for l in 'ABC':
                with open('%s_%s_%s_%s.txt' % (i, j, k, l), 'rt') as Data:
</code></pre>
<hr/>
<p>However, four levels of nesting is pretty ugly, and pushes your code off the right edge of the screen. You'll probably find this nicer with <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>product</code></a>:</p>
<blockquote>
<p>Roughly equivalent to nested for-loops… The nested loops cycle like an odometer with the rightmost element advancing on every iteration.</p>
</blockquote>
<p>In other words, this does exactly the same thing as the above:</p>
<pre><code>import itertools
for i, j, k, l in itertools.product(JobSize, Iteration, 'AB', 'ABC'):
    with open('%s_%s_%s_%s.txt' % (i, j, k, l), 'rt') as Data:
</code></pre>
<hr/>
<p>Or, even more simply: instead of using tuple unpacking to get separate <code>i, j, k, l</code> variables, just keep it as a single <code>ijkl</code> and pass it to <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>join</code></a>:</p>
<pre><code>for ijkl in itertools.product(JobSize, Iteration, 'AB', 'ABC'):
    with open('_'.join(ijkl), 'rt') as Data:
</code></pre>
<hr/>
<p>If the elements of <code>JobSize</code> and <code>Iteration</code> aren't strings, that last version won't work—but if you <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> them all to strings, it works just as well as <code>%s</code>:</p>
<pre><code>for ijkl in itertools.product(JobSize, Iteration, 'AB', 'ABC'):
    with open('_'.join(map(str, ijkl)), 'rt') as Data:
</code></pre>
<hr/>
<p>Of course you probably want to come up with a better name than <code>ijkl</code>. Maybe <code>name_components</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over any iterable, including strings like:</p>
<h3>Code:</h3>
<pre><code>for i in range(1, 4):
    for j in 'abc':
        print('{}_{}'.format(i, j))
</code></pre>
<h3>Results:</h3>
<pre><code>1_a
1_b
1_c
2_a
2_b
2_c
3_a
3_b
3_c
</code></pre>
</div>
<span class="comment-copy"><code>for k in['A', 'B', ...]:</code></span>
<span class="comment-copy">But what is the problem of using the same thing "adding another two loops for the chars" ?</span>
<span class="comment-copy">Great. Iteration is simply 1 to 10, that I can use it directly. JobSize is a list of 10 different numbers ranging from 5 to 500. Thanks dude.</span>
<span class="comment-copy">@user1594832 That's fine. If JobSize is <code>[5, 100, 20, 15, 50, 500, 12, 12, 99, 100]</code>, then <code>for i in JobSize:</code> will give you 5, then 100, then 20, etc. Try it out in the interactive interpreter: <code>for i in JobSize: print(i)</code>.</span>
<span class="comment-copy">Yes, it works. Much better than writing in len(JobSize) and then referencing it as Jobsize[i]. Thanks a lot.</span>
