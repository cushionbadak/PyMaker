<div class="post-text" itemprop="text">
<p>How can I create a for loop with a counter? I have a list, and I want to read an element after each <code>n</code> elements. I'd initially done this</p>
<pre><code>for i in enumerate(n):
    print(i)
</code></pre>
<p>But as expected it prints every element instead of every nth element, what would be the Python way of solving this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure wich kind of value is <code>n</code> but usually there are this ways: (for me, <code>n</code> is a list)</p>
<pre><code>for index, item in enumerate(n):
   if index % nth == 0: # If the output is not like you want, try doing (index + 1), or enumerate(n, start=1).
       print(item)
</code></pre>
<p>Other way could be:</p>
<pre><code>for index in range(0, len(n), nth): # Only work with sequences
   print(n[index]) # If the output is not like you want, try doing n[index + 1]
</code></pre>
<p>Or:</p>
<pre><code>for item in n[::nth]: # Low perfomance and hight memory consumption warning!! Only work with sequences
    print(item)
</code></pre>
<p>Even you can combine the first one with the last one:</p>
<pre><code>for i, item in list(enumerate(n))[::nth]: # Huge low perfomance warning!!!
    print(item)
</code></pre>
<p>But I'm not sure if that has an advantage...</p>
<p>Also, if you are willing to make a function, you could do something similar to the <code>enumerate</code> function:</p>
<pre><code>def myEnumerate(sequence, start=0, jump=1):
    n = start
    j = start // Or j = 0, that is your decision.
    for elem in sequence:
        if j % jump == 0:
            yield n, elem
            n += 1
        j += 1

for index, item in myEnumerate(n, jump=1):
    print(item)
</code></pre>
<p>Personally, I wouldn't do this last one. I'm not sure why but it's a feeling.</p>
<h3>Perfomance test</h3>
<pre><code>n = 'a b c d e f g h i j k l m n ñ o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 ! " · $ % &amp; / ( ) = ? ¿ Ç ç } { [ ] ; : _ ¨ ^ * ` + ´ - . , º ª \ /'.split(" ")
nth = 3    
def a():
    for i, item in enumerate(n):
       if i % nth == 0:
           item       
def b():
    for item in range(0, len(n), nth):
       n[item]           
def c():
    for item in n[::nth]:
        item    
def d():
    for i, item in list(enumerate(n))[::nth]:
       if i % nth == 0:
           item    
def enumerates(sequence, start=0, jump=1):
    n = start
    j = start
    for elem in sequence:
        if j % jump == 0:
            yield n, elem
            n += 1
        j += 1            
def e():
    for i, item in enumerates(n, jump= nth):
        item    
if __name__ == '__main__':
    import timeit
    print(timeit.timeit("a()", setup="from __main__ import a")) # 10.556324407152305
    print(timeit.timeit("b()", setup="from __main__ import b")) # 2.7166204783010137
    print(timeit.timeit("c()", setup="from __main__ import c")) # 1.0285353306076601
    print(timeit.timeit("d()", setup="from __main__ import d")) # 8.283859051918608
    print(timeit.timeit("e()", setup="from __main__ import e")) # 14.91601851631981
</code></pre>
<p>But if you are really looking for perfomance you should read <a href="https://stackoverflow.com/a/50786774/7655838">@Martijn Pieters answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code> object</a> to limit iteration to every <code>n</code>-th object, this is <em>at least</em> twice as fast as any other proposed solution:</p>
<pre><code>from itertools import islice

n = 5
for ob in islice(iterable, None, None, n):
    print(ob)
</code></pre>
<p>The above efficiently produces every 5th object, <em>starting</em> at the first:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; from string import ascii_uppercase as iterable
&gt;&gt;&gt; n = 5
&gt;&gt;&gt; for ob in islice(iterable, None, None, n):
...     print(ob)
...
A
F
K
P
U
Z
</code></pre>
<p>Replace the first <code>None</code> with <code>n - 1</code> if you want to skip to the <code>n</code>th object as the first to use:</p>
<pre><code>&gt;&gt;&gt; for ob in islice(iterable, n - 1, None, n):
...     print(ob)
...
E
J
O
T
Y
</code></pre>
<p>No copy of the input sequence is created to achieve this, so no additional memory or time is needed to produce the results. And taking every <code>n</code>-th object is done more efficiently than a <code>%</code> modulus test against an index from <code>enumerate()</code> could ever make it, or using <code>range()</code> to generate an index. That's because no further Python bytecode steps are needed to make those extra tests or index operations.</p>
<p>If you <em>also</em> needed to have the index of the items selected this way, add <code>enumerate()</code> back in by wrapping the iterable:</p>
<pre><code>&gt;&gt;&gt; for i, ob in islice(enumerate(iterable), n - 1, None, n):
...     print(i, ob)
...
4 E
9 J
14 O
19 T
24 Y
</code></pre>
<p><code>islice()</code> beats any other solution hands-down if you need speed:</p>
<pre><code>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; import random
&gt;&gt;&gt; testdata = [random.randrange(1000) for _ in range(1000000)]  # 1 million random numbers
&gt;&gt;&gt; def islice_loop(it):
...     for ob in islice(it, None, None, 5): pass
...
&gt;&gt;&gt; def range_loop(it):
...     for i in range(0, len(it), 5): ob = it[i]
...
&gt;&gt;&gt; def slice_loop(it):
...     for ob in it[::5]: pass
...
&gt;&gt;&gt; def enumerate_test_loop(it):
...     for i, ob in enumerate(it):
...         if i % 5 == 0: pass
...
&gt;&gt;&gt; def enumerate_list_slice_loop(it):
...     for i, ob in list(enumerate(it))[::5]: pass
...
&gt;&gt;&gt; timeit('tf(t)', 'from __main__ import testdata as t, islice_loop as tf', number=1000)
4.194277995004086
&gt;&gt;&gt; timeit('tf(t)', 'from __main__ import testdata as t, range_loop as tf', number=1000)
11.904250939987833
&gt;&gt;&gt; timeit('tf(t)', 'from __main__ import testdata as t, slice_loop as tf', number=1000)
8.32347785399179
&gt;&gt;&gt; timeit('tf(t)', 'from __main__ import testdata as t, enumerate_list_slice_loop as tf', number=1000)
198.1711291699903
</code></pre>
<p>So, for 1 million inputs, and 1000 tests, the <code>enumerate()</code> approach took <em>sixteen times</em> as much time as the <code>islice()</code> version, and the <code>list(enumerate(...))[::n]</code> copy-and-slice operation took almost 3 minutes to run the 1000 tests, clocking in at almost <strong>fifty times slower execution time</strong>. Don't ever use that option!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use a range:</p>
<pre><code>for i in range(0, size, n):
    print (i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>enumerate</code> returns a sequence of tuples that look like  <code>(index, value)</code></p>
<p>Say your list is <code>my_list</code>. You could do something like</p>
<pre><code>for index, value in enumerate(my_list):
    if index % n == 0: #it's an nth item
        print(value)
</code></pre>
<p>This is the python way of adding an index to a for loop.</p>
<p><strong>Some Alternatives</strong></p>
<p>If your goal is to do something with the list elements by n's, here are some alternative solutions that don't necessarily add an index to your loop, but will get you where you need to be:</p>
<p><strong>Array Slicing</strong></p>
<p>You could also use an array slice with a step</p>
<pre><code>nth_elements = my_array[0::n]
for e in nth_elements:
    print(e)
</code></pre>
<p>The advantage is you're now working with a smaller list, at the cost of more memory and the time to make a copy, but that might be advantageous if you're doing several operations with it. It's quick to write and easy to read. </p>
<p><strong>Range</strong></p>
<p>You could so something similar with the range function</p>
<pre><code>for index in range(0, len(my_list), n):
    print(n)
</code></pre>
<p>Note: if you're using python2, use <code>xrange</code> is preferred.</p>
<p>This just gets you the index, not the index and value. It's fast and memory efficient. <code>range</code> (or <code>xrange</code>) is lazy and you're using an index directly into the array, so you don't have to touch each element.</p>
<p><strong>Itertools</strong></p>
<p>If you would like a lazy sequence, you could use <code>itertools</code>. This might be useful if having the subsequence is too large to fit in memory comfortably. </p>
<pre><code>from itertools import islice
for element in islice(my_list, 0, len(my_list), n):
    print(element)
</code></pre>
<p>This is fast and memory efficient, but it requires an import. Sure, it's from the standard library, but if you're writing code for a small device, maybe it's not available.</p>
</div>
<span class="comment-copy"><code>for i, item in enumerate(n):</code>. <code>i</code> is your counter.</span>
<span class="comment-copy">Use range(0,len(your list), n) for instance.</span>
<span class="comment-copy"><code>enumerate()</code> is basically used to iterate over items of a list as well as to have an access to its index.</span>
<span class="comment-copy">I'm not sure if you want new index numbering after adding steps. Then yes, you can combine slicing and enumerating, e.g.: <code>for index, value in enumerate(n[::nth]): print(index, value)</code> (but it will cost memory, because it's a copy)</span>
<span class="comment-copy">Slicing gives you a <i>copy</i> of the input list object. Both the <code>range()</code> and the slice options only work on sequences, just iterables (which the <code>enumerate()</code> version would do).</span>
<span class="comment-copy">@MartijnPieters I know that slicing gives you a copy, is that a problem? Also I know that my ideas doesn't work on everything. That is why I said <i>usually</i> work. But I can't give a better answer because I lack of the knowledge :)</span>
<span class="comment-copy">Creating a copy could be a problem if the input is <i>large</i>, or if this part of the code is in a critical part of the code (copying takes time).</span>
<span class="comment-copy">@MartijnPieters You have right with that. I didn't say it because I thought he would be doing something small, but I should add it to my answer. I'm editing it right now.</span>
<span class="comment-copy">I don't know that rewriting enumerate is a great idea given that's a builtin, but it is nice to show how it might work.</span>
<span class="comment-copy">I'm not the downvoter, nor do I think it deserves it, but what issue is being sidestepped with this instead of <code>range()</code> with a step size, or what the OP title actually asked which is to add a counter to their loop?</span>
<span class="comment-copy">@roganjosh: it's not clear to me why the OP is using the <code>enumerate()</code> call; if it is only used as a <i>partial</i> solution towards their problem, then it is no longer needed here. <code>islice()</code> would be more efficient than the other solutions.</span>
<span class="comment-copy">@roganjosh: if you do want to add the index, then just replace <code>iterable</code> with <code>enumerate(iterable)</code> and you get the individual indices <i>too</i>, but again more efficiently.</span>
<span class="comment-copy">This only produces indices, and presumes a sequence as the input (with a set length). You'd have to use <code>sequence[i]</code> to get to the actual <code>n</code>-th value of the input sequence.</span>
