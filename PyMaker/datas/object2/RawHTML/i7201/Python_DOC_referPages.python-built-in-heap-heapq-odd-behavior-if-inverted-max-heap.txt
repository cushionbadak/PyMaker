<div class="post-text" itemprop="text">
<p>I'm trying to use the Python (2.0) built-in min-heap data structure from the heapq module (<a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">https://docs.python.org/3/library/heapq.html</a>) to build a max-heap. To do that I simply use the negative of the numbers I need to push into my heap.</p>
<p>Using this (max-heap version):</p>
<pre><code>import heapq
h=[]
for i in xrange(10):
    heapq.heappush(h,-i)
    print h
</code></pre>
<p>I get something which doesn't look correct:</p>
<pre><code>[0]
[-1, 0]
[-2, 0, -1]
[-3, -2, -1, 0]
[-4, -3, -1, 0, -2]
[-5, -3, -4, 0, -2, -1]
[-6, -3, -5, 0, -2, -1, -4]
[-7, -6, -5, -3, -2, -1, -4, 0]
[-8, -7, -5, -6, -2, -1, -4, 0, -3]
[-9, -8, -5, -6, -7, -1, -4, 0, -3, -2]
</code></pre>
<p>The min-heap version instead looks fine:</p>
<pre><code>import heapq
h=[]
for i in xrange(10):
    heapq.heappush(h,i)
    print h
</code></pre>
<p>As you can see:</p>
<pre><code>[0]
[0, 1]
[0, 1, 2]
[0, 1, 2, 3]
[0, 1, 2, 3, 4]
[0, 1, 2, 3, 4, 5]
[0, 1, 2, 3, 4, 5, 6]
[0, 1, 2, 3, 4, 5, 6, 7]
[0, 1, 2, 3, 4, 5, 6, 7, 8]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>What am I missing?</p>
<p>I've checked other SE questions/answers (e.g., <a href="https://stackoverflow.com/questions/14189540/python-topn-max-heap-use-heapq-or-self-implement/14189741#14189741">python topN max heap, use heapq or self implement?</a>, <a href="https://stackoverflow.com/questions/2501457/what-do-i-use-for-a-max-heap-implementation-in-python/2501527#2501527">What do I use for a max-heap implementation in Python?</a>, etc.) but they don't mention this issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>As @user2357112 already mentioned, it is a min-heap. There is nothing wrong with the output. The difference between the 2 inputs is that, in the first scenario you enter the data in sorted fashion and in the second scenario, you input the data in reverse sorted fashion. </p>
<blockquote>
<p>the min-heap property: the value of each node is greater than or equal
  to the value of its parent, with the minimum-value element at the
  root.</p>
</blockquote>
<p>Case 1 : Reverse Sorted Input = 10,9,8,7,6</p>
<pre><code>         10
        [10]

         9
        /
      10
      [9,10]


        8
       / \
     10   9
     [8,10,9]


        7
       / \
      8   9
     /
    10
    [7, 8,9,10]

        6
       / \
      7   9
     / \
    10  8
    [6,7,9,10,8]
</code></pre>
<p>Case 2 : Sorted Input = 1,2,3,4,5</p>
<pre><code>         1
        [1]

         1
        /
       2
      [1,2]


        1
       / \
      2   3
     [1,2,3]


        1
       / \
      2   3
     /
    4
    [1,2,3,4]

        1
       / \
      2   3
     / \
    4   5
    [1,2,3,4,5]
</code></pre>
<p>If you are interested in how the heap is built and how it balances after every input, go to the following url. You can insert one element at a time and see it in action. 
<a href="https://www.cs.usfca.edu/~galles/JavascriptVisual/Heap.html" rel="nofollow noreferrer">https://www.cs.usfca.edu/~galles/JavascriptVisual/Heap.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The invariant of a min-heap is that each node is less than either of its children; there is no implied ordering between the two children (and therefore, there can be many valid orderings of a given set of values; the only value that has an absolutely fixed position is the minimum one, at the root of the tree).  Note that this is true of your output:</p>
<pre><code>                  ,------------------,
  ,---+---,   ,---|----------+---,   |
  |   V   V   |   |          V   V   V
[-9, -8, -5, -6, -7, -1, -4, 0, -3, -2]
      |   |   ^   ^   ^   ^
      `---|---+---'   |   |
          `-----------+---'
</code></pre>
<p>The fact that your other example ended up in completely sorted order is merely a coincidence, based on the different order in which items were inserted into the heap.</p>
</div>
<span class="comment-copy">You've posted the same code for both examples...</span>
<span class="comment-copy">It's a heap, not a sorted list. Everything is fine.</span>
<span class="comment-copy">Many thanks for your answer Renuka. Your tree-graph visualization has been particularly useful, included the mentioned link with the interactive visualization. The website <a href="https://www.cs.usfca.edu/~galles/JavascriptVisual/Algorithms.html" rel="nofollow noreferrer">https://www.cs.usfca.edu/~galles/JavascriptVisual/Algorithms.html</a> for various data structures is actually very well made.</span>
