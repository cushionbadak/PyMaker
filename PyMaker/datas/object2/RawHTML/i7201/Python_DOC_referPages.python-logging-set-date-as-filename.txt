<div class="post-text" itemprop="text">
<p>I am working on implementing logging within my Python project and have hit a bit of a snag.  I am trying to set up my logging such that the Handlers, and Formatters are all organized into a configuration file.  What I am trying to do at the moment is to set up my <code>fileHandler</code> such that it will create a log file that looks something like this: <code>YYYY_MM_DD.log</code> obviously with the Y's representing the year, M's representing the month, and D's representing the day.</p>
<p>This is what I have attempted with my config file:</p>
<pre><code>[loggers]
keys=root,MainLogger

[handlers]
keys=fileHandler, consoleHandler

[formatters]
keys=logFormatter, consoleFormatter

[logger_root]
level=DEBUG
handlers=fileHandler

[logger_MainLogger]
level=DEBUG
handlers=fileHandler, consoleHandler
qualname=MainLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)

[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=logFormatter
args=(datetime.now().strftime('%Y_%m_%d.log'), 'a')

[formatter_logFormatter]
format=%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s

[formatter_consoleFormatter]
format=%(asctime)s | %(levelname)-8s | %(fillname)s-%(funcName)s-%(lineno)04d | %message)s
</code></pre>
<p>The file I am using to test the configuration is pretty simple:</p>
<pre><code>import logging
import logging.config

logging.config.fileConfig('logging.conf')
logger = logging.getLogger('MainLogger')
logger.debug("TEST")
</code></pre>
<p>The specific error I am getting at the moment is:</p>
<pre><code>configparser.InterpolationSyntaxError: '%' must be followed by '%' or '(', found: "%Y_%m_%d.log'), 'a')"
</code></pre>
<p>I've tried changing the <code>%Y</code>, <code>%m</code>, and <code>%d</code> as the error says, but that doesn't fix the problem.  How do I go about setting up the config file so that my log files look the way I want them to?</p>
<p>I should note when I change the filename to <code>test.log</code> everything worked fine, so this is the only error I seem to be having with this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use <code>datetime</code> in a config file, as it doesn't know what it means. You can however add the <code>Filehandler</code> in the python file itself:</p>
<pre><code>import logging.config
from datetime import datetime

logging.config.fileConfig('aaa.conf')
logger = logging.getLogger('MainLogger')

fh = logging.FileHandler('{:%Y-%m-%d}.log'.format(datetime.now()))
formatter = logging.Formatter('%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s')
fh.setFormatter(formatter)

logger.addHandler(fh)
logger.debug("TEST")
</code></pre>
<p>This way you can set the date as the file name in the handler.</p>
<p>This is the config file, note that you had a typo in the last formatter, you put <code>fillname</code> instead of <code>filename</code> and you forgot <code>(</code> in <code>message</code>.</p>
<pre><code>[loggers]
keys=root,MainLogger

[handlers]
keys=consoleHandler

[formatters]
keys=consoleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_MainLogger]
level=DEBUG
handlers=consoleHandler
qualname=MainLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)

[formatter_consoleFormatter]
format=%(asctime)s | %(levelname)-8s | %(filename)s-%(funcName)s-%(lineno)04d | %(message)s
</code></pre>
<p>This Should work just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me.</p>
<p>Update This: 
args=(datetime.now().strftime('%Y_%m_%d.log'), 'a')</p>
<p>To </p>
<p>args=(__import__("datetime").datetime.now().strftime('%Y_%m_%d.log'), 'a')</p>
<p>Reference (Example no 3): <a href="http://python-reference.readthedocs.io/en/latest/docs/functions/eval.html" rel="nofollow noreferrer">http://python-reference.readthedocs.io/en/latest/docs/functions/eval.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you can use Python's <code>TimedRotatingFileHandler</code> instead. You can set the interval to create a new log file every day with the date as the suffix.</p>
<p>Documentation--</p>
<ul>
<li>Python 2: <a href="https://docs.python.org/2/library/logging.handlers.html#timedrotatingfilehandler" rel="nofollow noreferrer">https://docs.python.org/2/library/logging.handlers.html#timedrotatingfilehandler</a></li>
<li>Python 3: <a href="https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler" rel="nofollow noreferrer">https://docs.python.org/3/library/logging.handlers.html#timedrotatingfilehandler</a></li>
</ul>
<p>Note that the current day's log file won't have a date. This file handler only adds the date suffix when a new day starts.</p>
<p>Also, the suffix it uses is "%Y-%m-%d", which is a little different than what you want. But there's a SO question <a href="https://stackoverflow.com/questions/338450/timedrotatingfilehandler-changing-file-name">here</a> about how you can alter that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe try changing the name <em>after</em> you've loaded the config file:</p>
<pre><code>from datetime inport datetime

logging.config.fileConfig('logging.conf')
logging.basicConfig(filename = datetime.now().strftime('%Y_%m_%d.log'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This uses content from your config file, but does not access the file directly.  You create your own filehandler and then add it to the logger.</p>
<pre><code>import logging
from datetime import datetime

# Create logger.
logger = logging.getLogger('MainLogger')
logger.setLevel(logging.DEBUG)

# Create filehandler with desired filename.
fh = logging.FileHandler('{}.log'.format(datetime.now().strftime('%Y_%m_%d')))
fh.setLevel(logging.DEBUG)
log_formatter = logging.Formatter('%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s')
fh.setFormatter(log_formatter)

# Add filehandler to logger.
logger.addHandler(fh)
</code></pre>
<p>Note that <code>a</code> (append) is the default <code>mode</code> parameter for a FileHandler.</p>
</div>
<div class="post-text" itemprop="text">
<p>This also works</p>
<pre><code>from dateime import datetime
log_file = str(datetime.utcnow().strftime('%m_%d_%Y_%I_%M_%S')) + '.log'
logging.basicConfig(filename=log_file, format='%(levelname)s | %(asctime)s | %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.DEBUG)
</code></pre>
<p>Logfile name:04_30_2018_10_03_01.log</p>
</div>
<div class="post-text" itemprop="text">
<p>Using double '%'-characters in the format string in combination with the approach suggested by <a href="https://stackoverflow.com/a/48678131/10026070">Abhishek</a> led to a working solution in my case (Python 3.5):</p>
<p>The filehandler in the config file should then look similar to this one:</p>
<pre><code>[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=defaultFormatter
args=(__import__("datetime").datetime.now().strftime('/your_path/your_file_name_%%Y-%%m-%%d_%%H-%%M-%%S.log'), 'a')
</code></pre>
</div>
<span class="comment-copy">How are you importing datetime?  This could be an error not getting handled correctly due to the common mistake of using <code>datetime.now()</code> instead of <code>datetime.datetime.now()</code>.</span>
<span class="comment-copy">......I suppose I am not importing datetime.  Though I did just change my config file to <code>datetime.datetime.now()</code> and still got the same error.  Would I be importing it in my Python script?</span>
<span class="comment-copy">Yeah, try putting <code>from datetime import datetime</code> at the top of your script.</span>
<span class="comment-copy">Hold on. Is that in the <b>logging.conf</b> file? That's not a python script, that just text...</span>
<span class="comment-copy">Yeah I realize the <code>logging.conf</code> file is just text.  That's why I am asking if anyone knows a way to in the configuration file set the Date as the file name.  Or is this a case where instead of using a configuration file I should be hard coding it in the script?</span>
<span class="comment-copy">Not sure if they works in the way I need it to.  From my understanding after looking at the links you provided the <code>TimedRotatingFileHandler</code> is for when you are planning on having a program running for multiple days and you want separate log files for each day.  In my case my program may be getting used 30 minutes to an hour for each use, but I still need to be able to track the date of when it is used.</span>
<span class="comment-copy">Unfortunately this does not work.  Once the config file loads, I appear to be unable to make modifications to the file name</span>
<span class="comment-copy">Yeah, it was just a guess really, try nofinator's suggestion below: <i>timedrotatingfilehandler</i></span>
<span class="comment-copy">I've been taking a look at it, I'll mark it as an answer if it helps.  Thanks for the assistance.</span>
<span class="comment-copy">I assume the import is suppose to be in the Python script?  I am still getting the same error :\</span>
