<div class="post-text" itemprop="text">
<p>I want to know if someone knows of a python function that returns a combination of columns without repetition. For example</p>
<pre><code>a= [[1,2],
    [3,4]] 
# 1,4 is allowed since not the same column.
# 2,3 is allowed since not the same column.
# 1,3  is not allowed since its the same column.
# 2,4 is not allowed since its the same column.
</code></pre>
<p>Even if its a custom function you have made I would like to see it and understand the logic behind it. </p>
<p>Also if possible I want functions from modules readily available in python by default so don't want something like numpy where I have to manually install it via pip.</p>
<p>Thanks :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> and exclude items in the same column after generating column indices using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>from itertools import product 

def prod(*args):
   for (i, x), (j, y) in product(*map(enumerate, args)):
      if i != j:
         yield (x, y)

a= [[1,2],
    [3,4]] 
print(list(prod(*a)))
# [(1, 4), (2, 3)]

a= [[1,2,3],
    [4,5,6]]
print(list(prod(*a)))
# [(1, 5), (1, 6), (2, 4), (2, 6), (3, 4), (3, 5)]
</code></pre>
<p>You can generalize this for multiple rows and columns by checking that no column in each combination is repeated:</p>
<pre><code>from itertools import product 

def prod(*args):
   for items in product(*map(enumerate, args)):
      if len({i for i, _ in items}) == len(items):
         yield tuple(x for _, x in items)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For larger square matrices, you could take use permutations of columns:</p>
<pre><code>from itertools import *

b = [
        [1,2,3],
        [4,5,6],
        [7,8,9],
    ]


def combs(mat=b):
    ncols = len(b[0])
    yield from ([mat[i][j] for i, j in inds]
            for inds in map(enumerate,
                permutations(range(ncols))))

# In [86]: list(q.combs()) 
# Out[86]: [[1, 5, 9], [1, 6, 8], [2, 4, 9], [2, 6, 7], [3, 4, 8], [3, 5, 7]]
</code></pre>
<p>Regarding the last line: given an <code>N x N</code> matrix, there are exactly <code>N!</code> ways to pick an element from each row without ever picking two or more from any column: You have <code>N</code> choices in the first row, <code>N-1</code> in the second, etc. Hence, each combination that meets your requirement is pinned down by a permutation. <code>map(enumerate, permutations(range(ncols)))</code> gives a list of all valid indexes. For a given index <code>inds</code>, <code>[mat[i][j] for i, j in inds]</code> gives a list corresponding to that index.</p>
</div>
<span class="comment-copy">seems like you need only one combination. for that you can generate random indexes and pull them. For eg <code>a[0][random(2)],a[1][random(2)]</code></span>
<span class="comment-copy">what is the input?</span>
<span class="comment-copy">My actual input is a  square matrix  mat = [[1,2,3],[4,5,6],[7,8,9]].</span>
<span class="comment-copy">Your code works with my example but when I change input from my example to a square matrix  it fails. For example a = [[1,2,3],[4,5,6],[7,8,9]] can't scale it up.</span>
<span class="comment-copy">@pyCharmer Updated my answer</span>
<span class="comment-copy">Damn that's some beautiful code right there. Need to mess around with this so I can understand.</span>
<span class="comment-copy">Could you please explain this line ,    len({i for i,_ in items}) and a bit more about the syntax about the if statement.</span>
<span class="comment-copy">The builds a set from the column indices and checks that the length of the set is the same as the number of rows in the matrix. You can read about set comprehensions.</span>
<span class="comment-copy">why the ugly <code>from itertools import *</code> though?</span>
<span class="comment-copy">not sure why it's ugly, but true, you only need <code>permutations</code>.</span>
<span class="comment-copy">I am getting a syntax error on the yield from line. I don't  why this is the case. Also could you explain that line in a simple way.</span>
<span class="comment-copy">@YakymPirozhenko <a href="https://www.python.org/dev/peps/pep-0008/#imports" rel="nofollow noreferrer">python.org/dev/peps/pep-0008/#imports</a> (see the last bullet). In summary, it i) pollutes the current namespace with all the unnecessary declarations from <code>itertools</code> ii) the code is less readable - you do not know where was which function defined</span>
<span class="comment-copy">@RobinNemeth the standard makes sense but this is a matter of taste. I personally like the wildcard import from <code>itertools</code>, <code>operator</code> or <code>math</code> because there is little ambiguity and it makes interactive development faster. I'm sure a case can be made for either practice.</span>
