<div class="post-text" itemprop="text">
<p>So I am trying to implement logging within my Python program.  The goal is to set it up so that a log file is created and everything the program does through it's various modules is logged (based on logging level).  This is what my current code looks like:</p>
<p>Text File for Log Configuration:</p>
<pre><code>#logging.conf
[loggers]
keys=root,MainLogger

[handlers]
keys=consoleHandler

[formatters]
keys=consoleFormatter

[logger_root]
level=DEBUG
handlers=consoleHandler

[logger_MainLogger]
level=DEBUG
handlers=consoleHandler
qualname=MainLogger
propagate=0

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=consoleFormatter
args=(sys.stdout,)

[formatter_consoleFormatter]
format=%(asctime)s | %(levelname)-8s | %(filename)s-%(funcName)s-%lineno)04d | %(message)s
</code></pre>
<p>External Module to Test Logs:</p>
<pre><code>#test.py
import logging

logger = logging.getLogger(__name__)

def testLog():
    logger.debug("Debug Test")
    logger.info("Info Test")
    logger.warning("Warning Test")
    logger.error("Error Test")
</code></pre>
<p>Main file:</p>
<pre><code>#__init__.py
import logging
import logging.config
from datetime import datetime

logging.config.fileConfig('logging.conf', disable_existing_loggers = False)
logger = logging.getLogger('MainLogger')
fileHandler = logging.FileHandler('{:%Y-%m-%d}.log'.format(datetime.now()))
formatter = logging.Formatter('%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s')
fileHandler.setFormatter(formatter)
logger.addHandler(fileHandler)

if __name__ == "__main__":

    import test
    logger.debug("Debug Test")
    test.testLog()
</code></pre>
<p>Currently, all log messages are currently being displayed withing the IDLE3 shell when I run <code>__init__.py</code> and the log file is being created.  However within the log file itself the only message being recording is the "Debug Test" from <code>__init__.py</code>.  None of the messages from the <code>test.py</code> module are being recorded in the log file.</p>
<p>What is my problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>test.py</code> it grabs a <code>logger</code> object before you configure it later in your <code>__init__.py</code>. Make sure you configure the logging module first before grabbing any logger instance.</p>
</div>
<span class="comment-copy">Would a solution to this be to move the <code>logger = logging.getLogger(__name__)</code> line to inside of the <code>testLog()</code> method?  with that said would that mean for every method in every Module I use I should start the method by creating a logging object that exists over the scope of that method?</span>
<span class="comment-copy">No that doesn't help because you're getting a logger object outside of the function.  What will help is moving the <code>fileConfig</code> call to the top level in your <code>__init__.py</code>, <i>before</i> importing test,  so that it is the first thing ever to be executed when your package is loaded</span>
<span class="comment-copy">Ahh alright.  So import the logging libraries, implement the logging stuff, the import and run everything else.  Gotcha</span>
<span class="comment-copy">yes, have a look here <a href="https://docs.python.org/3/howto/logging.html#logging-from-multiple-modules" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
<span class="comment-copy">I made those changes but it still isn't working. :\</span>
