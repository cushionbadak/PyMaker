<div class="post-text" itemprop="text">
<p>I have a dataframe that provides two integer columns with the Year and Week of the year:</p>
<pre><code>import pandas as pd
import numpy as np
L1 = [43,44,51,2,5,12]
L2 = [2016,2016,2016,2017,2017,2017]
df = pd.DataFrame({"Week":L1,"Year":L2})

df
Out[72]: 
   Week  Year
0    43  2016
1    44  2016
2    51  2016
3     2  2017
4     5  2017
5    12  2017
</code></pre>
<p>I need to create a datetime-object from these two numbers.</p>
<p>I tried this, but it throws an error:</p>
<pre><code>df["DT"] = df.apply(lambda x: np.datetime64(x.Year,'Y') + np.timedelta64(x.Week,'W'),axis=1)
</code></pre>
<p>Then I tried this, it works but gives the wrong result, that is it ignores the week completely:</p>
<pre><code>df["S"] = df.Week.astype(str)+'-'+df.Year.astype(str)
df["DT"] = df["S"].apply(lambda x: pd.to_datetime(x,format='%W-%Y'))

df
Out[74]: 
   Week  Year        S         DT
0    43  2016  43-2016 2016-01-01
1    44  2016  44-2016 2016-01-01
2    51  2016  51-2016 2016-01-01
3     2  2017   2-2017 2017-01-01
4     5  2017   5-2017 2017-01-01
5    12  2017  12-2017 2017-01-01
</code></pre>
<p>I'm really getting lost between Python's <code>datetime</code>, Numpy's <code>datetime64</code>, and pandas <code>Timestamp</code>, can you tell me how it's done correctly?</p>
<p>I'm using Python 3, if that is relevant in any way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>In [19]: pd.to_datetime(df.Year.astype(str), format='%Y') + \
             pd.to_timedelta(df.Week.mul(7).astype(str) + ' days')
Out[19]:
0   2016-10-28
1   2016-11-04
2   2016-12-23
3   2017-01-15
4   2017-02-05
5   2017-03-26
dtype: datetime64[ns]
</code></pre>
<blockquote>
<p>Initially I have timestamps in <code>s</code></p>
</blockquote>
<p>It's much easier to parse it from UNIX epoch timestamp:</p>
<pre><code>df['Date'] = pd.to_datetime(df['UNIX_Time'], unit='s')
</code></pre>
<p><strong>Timing</strong> for 10M rows DF:</p>
<p>Setup:</p>
<pre><code>In [26]: df = pd.DataFrame(pd.date_range('1970-01-01', freq='1T', periods=10**7), columns=['date'])

In [27]: df.shape
Out[27]: (10000000, 1)

In [28]: df['unix_ts'] = df['date'].astype(np.int64)//10**9

In [30]: df
Out[30]:
                       date    unix_ts
0       1970-01-01 00:00:00          0
1       1970-01-01 00:01:00         60
2       1970-01-01 00:02:00        120
3       1970-01-01 00:03:00        180
4       1970-01-01 00:04:00        240
5       1970-01-01 00:05:00        300
6       1970-01-01 00:06:00        360
7       1970-01-01 00:07:00        420
8       1970-01-01 00:08:00        480
9       1970-01-01 00:09:00        540
...                     ...        ...
9999990 1989-01-05 10:30:00  599999400
9999991 1989-01-05 10:31:00  599999460
9999992 1989-01-05 10:32:00  599999520
9999993 1989-01-05 10:33:00  599999580
9999994 1989-01-05 10:34:00  599999640
9999995 1989-01-05 10:35:00  599999700
9999996 1989-01-05 10:36:00  599999760
9999997 1989-01-05 10:37:00  599999820
9999998 1989-01-05 10:38:00  599999880
9999999 1989-01-05 10:39:00  599999940

[10000000 rows x 2 columns]
</code></pre>
<p>Check:</p>
<pre><code>In [31]: pd.to_datetime(df.unix_ts, unit='s')
Out[31]:
0         1970-01-01 00:00:00
1         1970-01-01 00:01:00
2         1970-01-01 00:02:00
3         1970-01-01 00:03:00
4         1970-01-01 00:04:00
5         1970-01-01 00:05:00
6         1970-01-01 00:06:00
7         1970-01-01 00:07:00
8         1970-01-01 00:08:00
9         1970-01-01 00:09:00
                  ...
9999990   1989-01-05 10:30:00
9999991   1989-01-05 10:31:00
9999992   1989-01-05 10:32:00
9999993   1989-01-05 10:33:00
9999994   1989-01-05 10:34:00
9999995   1989-01-05 10:35:00
9999996   1989-01-05 10:36:00
9999997   1989-01-05 10:37:00
9999998   1989-01-05 10:38:00
9999999   1989-01-05 10:39:00
Name: unix_ts, Length: 10000000, dtype: datetime64[ns]
</code></pre>
<p>Timing:</p>
<pre><code>In [32]: %timeit pd.to_datetime(df.unix_ts, unit='s')
10 loops, best of 3: 156 ms per loop
</code></pre>
<p><strong>Conclusion:</strong> I think 156 milliseconds for converting 10.000.000 rows is not that slow</p>
</div>
<div class="post-text" itemprop="text">
<p>You need <code>%w</code> for specify which day is first in week:</p>
<pre><code>df["DT"] = pd.to_datetime(df.Week.astype(str)+
                          df.Year.astype(str).add('-0') ,format='%W%Y-%w')
print (df)

  Week  Year         DT
0    43  2016 2016-10-30
1    44  2016 2016-11-06
2    51  2016 2016-12-25
3     2  2017 2017-01-15
4     5  2017 2017-02-05
5    12  2017 2017-03-26
</code></pre>
<hr/>
<pre><code>df["DT"] = pd.to_datetime(df.Week.astype(str)+
                          df.Year.astype(str).add('-1') ,format='%W%Y-%w')
print (df)
   Week  Year         DT
0    43  2016 2016-10-24
1    44  2016 2016-10-31
2    51  2016 2016-12-19
3     2  2017 2017-01-09
4     5  2017 2017-01-30
5    12  2017 2017-03-20

df["DT"] = pd.to_datetime(df.Week.astype(str)+
                          df.Year.astype(str).add('-2') ,format='%W%Y-%w')
print (df)

   Week  Year         DT
0    43  2016 2016-10-25
1    44  2016 2016-11-01
2    51  2016 2016-12-20
3     2  2017 2017-01-10
4     5  2017 2017-01-31
5    12  2017 2017-03-21
</code></pre>
</div>
<span class="comment-copy">Are the <code>Week</code> values <a href="https://en.wikipedia.org/wiki/ISO_week_date" rel="nofollow noreferrer">ISO week numbers</a> or do they represent units of 7 days?</span>
<span class="comment-copy">Initially I have timestamps in <code>s</code>, they are converted using <code>pd.to_datetime()</code>, the week is then extracted by using <code>dt.week</code> on the Timestamp.</span>
<span class="comment-copy">There is a subtle pitfall here -- If <code>s</code> contains the date <code>2016-1-1</code>, then its ISO week number (returned by <code>dt.week</code>) is 53, and its ISO year (which you didn't record) is 2015. If you try to reconstitute the date using the year 2016 and ISO week 53, then you get 2017-01-02 (assuming Monday begins the week). So you can't roundtrip correctly unless you also record the ISO year (which is not always the same as the actual year.)</span>
<span class="comment-copy">@unutbu Thanks, this is good to know.</span>
<span class="comment-copy">Maybe directly using the timestamps is a better idea indeed. However I'm working with tens of millions of lines, and the <code>datetime</code> stuff is notoriously slow.</span>
<span class="comment-copy">@Khris, yes, using this method we can convert it precisely</span>
<span class="comment-copy">@Khris, i've added timing - please check</span>
<span class="comment-copy">Initially I'm doing a conversion at one point and then save all values to avoid having to do later conversions. But I didn't anticipate I would need to convert back like that, so it's probably the best to directly go from the epoch timestamps.</span>
<span class="comment-copy">@MaxU - Can you compare week solutions? Because question is about converting with <code>week</code> and <code>year</code>.</span>
<span class="comment-copy">Weird, the docs imply that the first day is already defined by using <code>%W</code> or <code>%U</code>: <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
