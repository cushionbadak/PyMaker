<div class="post-text" itemprop="text">
<p><strong>PROBLEM:</strong>
Every time I run this python function in my monkeyrunner.py script, it opens a new background instance of (cmd, adb, and conhost). And so, in my automation script, if I have a loop that uses that 100 times, I'm going to see 100 of each cmd, adb, and conhost running in the background (I know this because I enter "ps" in powershell to get the list of processes.) The purpose of the function, if you're curious, is to look for logcat messages from the USB attached Android tablet, to see when processes are finished, so that the script knows when to command screen touches to move forward with automation testing.</p>
<pre><code>action = "____"
waitTime = 1
def adb(logMessage, action):
    start = time.time()
    p = subprocess.Popen("adb logcat -v time", shell=True, cwd="C:\Users\&lt;USERNAME&gt;\AppData\Local\Android\sdk\platform-tools", stdout=subprocess.PIPE)
    for line in p.stdout:
        if logMessage in line:
            print("Found message!")
            break
            pass
        else:
            continue
</code></pre>
<p><strong>QUESTION:</strong>
How can I use "subprocess" to open adb WITHOUT opening a new instance each time? Is there a way to close the subprocess in the same function?</p>
</div>
<div class="post-text" itemprop="text">
<p>2 things.</p>
<ol>
<li><code>adb logcat</code> is a blocking call. It doesn't return unless you send it a SIGINT (ctrl +c). So inside a script you have to send it the "-d" flag. If you forget your script will keep waiting.</li>
<li><strike>you can wait for a subprocess to complete with <code>p.wait()</code></strike></li>
</ol>
<p>Therefore you can try this</p>
<pre><code>action = "____"
waitTime = 1
def adb(logMessage, action):
    start = time.time()
    p = subprocess.Popen("adb logcat -d -v time", shell=True, cwd="C:\Users\&lt;USERNAME&gt;\AppData\Local\Android\sdk\platform-tools", stdout=subprocess.PIPE)
    #p.wait()
    for line in p.stdout:
        if logMessage in line:
            print("Found message!")
            break
            pass
        else:
            continue
</code></pre>
<p>This will ensure that every adb session launched to look at logact terminates properly and its output is looked at only after it returns</p>
<p><strong>EDIT</strong>: You are absolutely right, p.wait() isn't needed and is actually wrong! because the logcat writes more than 4kb to stdout in yourcase. You could try to use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">commuinicate</a> instead to help with that</p>
</div>
<div class="post-text" itemprop="text">
<p>I figured it out. To prevent a new session of adb from opening in the background per each time this function is called, all I had to do is place the "p" variable outside the function.... like this...</p>
<pre><code>p = subprocess.Popen("adb logcat -v time", shell=True, cwd="C:\Users\&lt;USERNAME&gt;\AppData\Local\Android\sdk\platform-tools", stdout=subprocess.PIPE)
action = "____"
waitTime = 1
def adb(logMessage, action):
    start = time.time()
    for line in p.stdout:
        if logMessage in line:
            print("Found message!")
            break
            pass
        else:
            continue
</code></pre>
<p>There is still the issue of a single adb session that opens and does not close after the script is run. So, now, instead of 180 sessions (or more) opening, there is a single one. If I find out how to close the session I will update this ticket.</p>
</div>
<span class="comment-copy">I tried the example you provided, but when I use it, the function appears to get stuck on the p.wait(). It never gets to the "for line in p.stdout:" loop, to look for the specified message. It just waits indefinitely.</span>
<span class="comment-copy">I appreciate the suggestion, but "communicate()" waits for a process to terminate. I need somethings, that works on Windows, that will terminate (or kill) the adb subprocess once it breaks out of the "if logMessage in line:" loop. The problem is, the python libs (modules) that Android gives you for MonkeyRunner is very limited, and things like "terminate()" or "kill()" do not exist in this version.</span>
<span class="comment-copy">but isn't that what the <code>-d</code> option does to logcat? you don't have to kill adb because it will exit itself after dumping the log</span>
