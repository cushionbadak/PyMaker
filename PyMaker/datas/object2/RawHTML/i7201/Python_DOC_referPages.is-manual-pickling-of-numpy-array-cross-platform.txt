<div class="post-text" itemprop="text">
<p>I use python3 to pickle a dictionary that contains text keys to text or <code>scipy.sparse.lil_matrix</code> (linked list) with an integer <code>dtype</code>.</p>
<p>Is that file cross platform (over machines that installed python3, scipy, and numpy) ?</p>
<p>Is pickled dictionary containing just text and numpy array cross platform?</p>
<p>pickle is cross-platform: <a href="https://stackoverflow.com/questions/1849523/is-pickle-file-of-python-cross-platform">Is pickle file of python cross-platform?</a></p>
<p>numpy's <code>.npy</code> file format is cross platform: <a href="https://stackoverflow.com/questions/28953804/is-numpy-save-cross-platform">Is numpy.save cross platform?</a> ... </p>
<p>Not sure about what happens if I manually pickle a numpy array. I checked on two different machines with intel cpu for an integer numpy array and the values remain the same.</p>
<p>manual pickling a numpy array:</p>
<pre><code>import numpy as np
import pickle
x = np.random.randint(0, 2**63 - 1, dtype=np.int32)
d = {
    'x': x,
    'blah': "blah blah blah"
}
with open('bomb.pickle', 'wb+') as f:
    pickle.dump(d, f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Manual pickling of numpy array with integer dtype if we don't have to fix import.</p>
<p>This is because if the an object has a reduce method, pickle will use it.</p>
<p><code>numpy.ndarray.__reduce__</code>'s doc <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.__reduce__.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.<strong>reduce</strong>.html</a></p>
<p>"How numpy ndarray get pickled" does not reference the source code: <a href="https://stackoverflow.com/questions/45391834/how-does-python-3-know-how-to-pickle-extension-types-especially-numpy-arrays">How does Python 3 know how to pickle extension types, especially Numpy arrays?</a></p>
<p>In anceint time, Pickling with protocol 0 is <strong>not portable</strong> for floats, NaN, Inf:
<a href="https://mail.python.org/pipermail/tutor/2010-May/075980.html" rel="nofollow noreferrer">https://mail.python.org/pipermail/tutor/2010-May/075980.html</a></p>
<p>Official doc on pickling floats on python 3.1 with text protocol:
<a href="https://docs.python.org/3/whatsnew/3.1.html" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.1.html</a></p>
<blockquote>
<p>The new algorithm depends on certain features in the underlying
  floating point implementation. If the required features are not found,
  the old algorithm will continue to be used. Also, the text pickle
  protocols assure <em>cross-platform</em> portability by using the old
  algorithm.</p>
</blockquote>
<p>numpy's source code for writing to a file is in <code>format.write_array</code> and <code>npyio.save</code></p>
<p>(<a href="https://github.com/numpy/numpy/blob/v1.13.0/numpy/lib/format.py" rel="nofollow noreferrer">https://github.com/numpy/numpy/blob/v1.13.0/numpy/lib/format.py</a>,
<a href="https://github.com/numpy/numpy/blob/v1.13.0/numpy/lib/npyio.py#L435-L512" rel="nofollow noreferrer">https://github.com/numpy/numpy/blob/v1.13.0/numpy/lib/npyio.py#L435-L512</a>)</p>
<p>The header can be saved as text.
The data is simply a <code>pickle.dump</code> if pickling argument is true, which is the default value for <code>numpy.save</code>.
In <code>format.write_array</code>, I found:</p>
<blockquote>
<p>pickle.dump(array, fp, protocol=2, **pickle_kwargs)</p>
</blockquote>
<p><code>format.py</code> also says:</p>
<blockquote>
<p>The <code>.npy</code> format is the standard binary file format in NumPy for
  persisting a <em>single</em> arbitrary NumPy array on disk. The format stores
  all of the shape and dtype information necessary to reconstruct the
  array correctly even on another machine with a different architecture.</p>
</blockquote>
<p>So manual pickling of numpy array is cross platform (if we don't have to fix imports) because <code>np.save</code> also use pickle and is cross platform.</p>
<p><code>np.save</code> uses protocol 2. The <code>pickle.DEFAULT_PROTOCOL</code> is 3 for the two python 3 on the two machines.</p>
</div>
<span class="comment-copy">It should be cross platform but to unpickle the content you need to have scipy installed as well.</span>
<span class="comment-copy">i mean it like that on other computers with a different OS, if scipy is installed, the unpicking should work.</span>
<span class="comment-copy">it depends on how pickle works on a numpy array object... if it is copying the binary bytes from memory, then change of endianness will mess up that even for integers. Forget about floating points formats compatibility for different cpus if it is a memory dump. I don't know how the C part of numpy array get saved by pickle. The Python part of the dictionary and numpy array will be cross platform when it is pickled. If manually pickled numpy array is cross platform, then the manually pickled scipy sparse matrices, which is built with numpy array, will be cross platform as well.</span>
<span class="comment-copy">Have you tried hdf5 instead? E.g. using pytables or h5py. This should take care of all Python and platform differences.</span>
<span class="comment-copy">those are old part of the code. new part of the code already uses hdf5.</span>
<span class="comment-copy">hopefully that means manual pickling of scipy sparse array also works.</span>
<span class="comment-copy"><code>np.save</code> writes a block with attributes like shape and dtype, followed by an image of the databuffer (which can read as a memmap).  Dtype objects are saved via pickle.  Conversely a pickle of an array is its <code>save</code>.</span>
<span class="comment-copy">I'm not sure about pickle for sparse classes;  they are not a subclass of <code>np.ndarray</code>.  Recent scipy versions have a <code>sparse.save_npz</code> function, which creates a <code>npz</code> archive with the required arrays and attributes.  I recommend looking at its code.  <code>scipy.io.savemat</code> can also write a sparse matrix in a matlab compatible format.  Following the <code>save_npz</code> model I could write a sparse matrix with <code>h5py</code>.</span>
<span class="comment-copy"><code>save_npz</code> does not save <code>lil</code> or <code>dok</code> formats, because the data isn't in numeric array format.  <code>h5py</code> would also have problems with these.  <code>coo</code> and <code>csr</code> are better for array oriented saving.</span>
<span class="comment-copy">I suspect, but should verify, that all <code>sparse</code> classes depend on the inherited <code>.__reduce__</code>, thus pickling in the same way as most user defined classes.</span>
