<div class="post-text" itemprop="text">
<p>Working with scientific data, specifically climate data, I am constantly hard-coding paths to data directories in my Python code. Even if I were to write the most extensible code in the world, the hard-coded file paths prevent it from ever being truly portable. I also feel like having information about the file system of your machine coded in your programs could be security issue.</p>
<p>What solutions are out there for handling the configuration of paths in Python to avoid having to code them out explicitly? </p>
</div>
<div class="post-text" itemprop="text">
<p>I believe there are many ways around this, but here is what I would do:</p>
<ol>
<li>Create a JSON config file with all the paths I need defined.</li>
<li>For even more portability, I'd have a default path where I look for this config file but also have a command line input to change it.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion passing arguments from command line would be best solution. You should take a look at <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> . This allows you to create nice way to handle arguments from the command line. for example:
<code>myDataScript.py /home/userName/datasource1/</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One of the solution rely on using configuration files.</p>
<p>You can store all your path in a json file like so : </p>
<pre><code>{
     "base_path" : "/home/bob/base_folder",
     "low_temp_area_path" : "/home/bob/base/folder/low_temp"
}
</code></pre>
<p>and then in your python code, you could just do :</p>
<pre><code>import json

with open("conf.json") as json_conf : 
    CONF = json.load(json_conf)
</code></pre>
<p>and then you can use your path (or any configuration variable you like) like so :</p>
<pre><code>print "The base path is {}".format(CONF["base_path"])
</code></pre>
</div>
<span class="comment-copy">How about environment variables?</span>
<span class="comment-copy">How about command line arguments? Configuration files?</span>
<span class="comment-copy">You could try taking user input for the data.  So when the program is run it requests the user to type their own file path and file name.  Then you don't need to worry about hard coding.  If this is a solution you'd want, I could try and write out some basic stuff explaining how it works soon-ish.</span>
<span class="comment-copy">@reubano On systems at work where I'm not the administrator (aka all of them) I can't guarantee the presence of particular environment variables. I suppose in an <b>init</b> module I could use os.getenv() to set environment variables temporarily, but that again involves hard coding them somewhere in my project.</span>
<span class="comment-copy">See also: <a href="https://softwareengineering.stackexchange.com/questions/271565/hard-coded-file-paths-solution" title="hard coded file paths solution">softwareengineering.stackexchange.com/questions/271565/â€¦</a></span>
<span class="comment-copy">I like argparse, but all of the code required to set up the argument parser clutters up the code, in my opinion. But this is a perfectly valid option I always forget about. Thanks!</span>
<span class="comment-copy">Remember that you can pass file contents as arguments. <code>cat fileWithPaths | xargs python myDataScript.py</code>. This way every line from <code>fileWithPaths</code> will be seperate element in <code>sys.argv</code> list</span>
<span class="comment-copy">Depends on the number of argument you need to parse and if they are mandatory or not.</span>
