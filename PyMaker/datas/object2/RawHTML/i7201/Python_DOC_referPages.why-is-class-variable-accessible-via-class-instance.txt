<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/12409714/python-class-members">Python Class Members</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I have created class <code>Circle</code> with no instance variables. I've added a class-method <code>from_diameter</code> to generate the circle with given diameter.</p>
<pre><code>class Circle:

    @classmethod
    def from_diameter(cls, diameter):
        cls.diameter = diameter
        return cls
</code></pre>
<p><code>diameter</code> is a class (static) variable. However - it looks like it exists as an instance variable and class variable as well.</p>
<pre><code>myCircle = Circle.from_diameter(10)
print Circle.diameter
print myCircle.diameter
</code></pre>
<p>Output:</p>
<pre><code>10
10
</code></pre>
<p>Why does it work? There is no instance variable <code>diameter</code>.
I suppose <code>print myCircle.diameter</code> should throw an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>when you try to access the variable with a class it look into only </p>
<pre><code>cls.__dict__
</code></pre>
<p>but when you try to access the variable with instance it looks first </p>
<pre><code>self.__dict__ 
</code></pre>
<p>if find then return or if can't find then it also looks in </p>
<pre><code>cls.__dict__
</code></pre>
<p>here cls is the class </p>
<pre><code>class Test:
    temp_1=10
    temp_2=20

    def __init__(self):
        self.test_1=10
        self.test_2=20

    @classmethod
    def c_test(cls):
        pass

    def t_method(self):
        pass


print Test.__dict__
print Test().__dict__
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>{'c_test': &lt;classmethod object at 0x7fede8f35a60&gt;, '__module__': '__main__', 't_method': &lt;function t_method at 0x7fede8f336e0&gt;, 'temp_1': 10, '__doc__': None, '__init__': &lt;function __init__ at 0x7fede8f335f0&gt;, 'temp_2': 20}

{'test_2': 20, 'test_1': 10}
</code></pre>
<p>For detail <a href="https://docs.python.org/2/library/stdtypes.html#object.__dict__" rel="nofollow noreferrer">class special attribute</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>There's no instance variable, it's just that name lookup in Python objects first looks into the instance, then, if no match has been found, into the class.</p>
<blockquote>
<h3>Class instances</h3>
<p>A class instance is created by calling a class object (see above). A class instance has a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found there, and the instance’s class has an attribute by that name, the search continues with the class attributes. [...] If no class attribute is found, and the object’s class has a <code>__getattr__()</code> method, that is called to satisfy the lookup.</p>
</blockquote>
<p>(<a href="https://docs.python.org/2/reference/datamodel.html#index-54" rel="nofollow noreferrer">Python 2</a>, <a href="https://docs.python.org/3/reference/datamodel.html#index-49" rel="nofollow noreferrer">Python 3</a>)</p>
</div>
<span class="comment-copy">Finding class variables via a class instance is EXACTLY how class methods are found when you call them on an instance.  In other words, classes would be completely useless unless they worked this way.</span>
