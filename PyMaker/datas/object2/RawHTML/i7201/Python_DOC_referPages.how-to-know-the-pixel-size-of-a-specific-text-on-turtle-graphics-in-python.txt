<div class="post-text" itemprop="text">
<p>As title, when I execute the following code </p>
<pre><code>
import turtle
turtle.write("some text")
</code></pre>
<p>I want to know the whole size (including height and width) of the string <code>some text</code> on the canvas of the turtle graphics.<br/>
How can I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The font size only tells you <strong><em>half</em></strong> of what you need to know, i.e. the height:</p>
<blockquote>
<p>The size of a font is typically taken to be the distance from the top
  of the highest character to the bottom of the lowest character.</p>
</blockquote>
<p>From <a href="http://reference.wolfram.com/language/ref/FontSize.html" rel="nofollow noreferrer">FontSize.html</a></p>
<p>But we can get the width via setting the <code>move=</code> option of <code>turtle.write()</code> to <code>True</code>.  Here's a example where I want to draw a tight box around the text I've just drawn:</p>
<pre><code>from turtle import Turtle, Screen

TEXT = "Penny for your thoughts"  # arbitrary text
POSITION = (150, 150)  # arbitrary position

FONT_SIZE = 36  # arbitrary font size
FONT = ('Arial', FONT_SIZE, 'normal')

X, Y = 0, 1

def box(turtle, lower_left, upper_right):
    """ Draw a box but clean up after ourselves """

    position = turtle.position()
    isdown = turtle.isdown()

    if isdown:
        turtle.penup()
    turtle.goto(lower_left)
    turtle.pendown()
    turtle.goto(upper_right[X], lower_left[Y])
    turtle.goto(upper_right)
    turtle.goto(lower_left[X], upper_right[Y])
    turtle.goto(lower_left)

    turtle.penup()
    turtle.setposition(position)
    if isdown:
        turtle.pendown()

screen = Screen()

marker = Turtle(visible=False)
marker.penup()
marker.goto(POSITION)

start = marker.position()
marker.write(TEXT, align='center', move=True, font=FONT)
end = marker.position()

# Since it's centered, the end[X] - start[X] represents 1/2 the width
box(marker, (2 * start[X] - end[X], start[Y]), (end[X], start[Y] + FONT_SIZE))

screen.exitonclick()
</code></pre>
<p><a href="https://i.stack.imgur.com/JreaJ.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/JreaJ.png"/></a></p>
<p>Now, here's a harder problem of drawing the box first, filling it, and then drawing the text into it.  The trick used is to draw the text off-screen:</p>
<pre><code>from turtle import Turtle, Screen

TEXT = "Penny for your thoughts"  # arbitrary text
POSITION = (150, 150)  # arbitrary position

FONT_SIZE = 36  # arbitrary font size
FONT = ('Arial', FONT_SIZE, 'normal')

X, Y = 0, 1

def box(turtle, lower_left, upper_right):
    """ same as above example """

screen = Screen()

marker = Turtle(visible=False)
marker.penup()
marker.speed('fastest')
marker.fillcolor('pink')
marker.setx(screen.window_width() + 1000)

start = marker.position()
marker.write(TEXT, align='center', move=True, font=FONT)
end = marker.position()
marker.undo()  # clean up after ourselves

marker.speed('normal')
marker.goto(POSITION)

# Since it's centered, the end[X] represents 1/2 the width
half_width = end[X] - start[X]
marker.begin_fill()
box(marker, (POSITION[X] - half_width, POSITION[Y]), (POSITION[X] + half_width, POSITION[Y] + FONT_SIZE))
marker.end_fill()

marker.write(TEXT, align='center', font=FONT)

screen.exitonclick()
</code></pre>
<p><a href="https://i.stack.imgur.com/eklyR.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/eklyR.png"/></a></p>
<p>Another approach would be to draw the text in place in the background color first, measure it, draw and fill the box, and finally redraw the text in a different color.</p>
</div>
<div class="post-text" itemprop="text">
<p>The default font for <code>turtle.write</code> is 'Arial' with a font-size of 8px as described in the documentation <a href="https://docs.python.org/3/library/turtle.html#turtle.write" rel="nofollow noreferrer">https://docs.python.org/3/library/turtle.html#turtle.write</a>.</p>
<p>The height and width of the text is dependent on the <code>font</code> parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>Though Brandon pretty much gave the answer, let me give you an example:</p>
<pre><code>&gt;&gt;&gt;&gt;import turtle
&gt;&gt;&gt;&gt;turtle.write('hey hello this is DSP',font=('consolas',8,'bold'))
</code></pre>
<p>This would do your job, Consolas is the font type, 8 is the font's size, and bold is the font type. Other than bold you can go for italic or normal as well.</p>
</div>
<span class="comment-copy">I do not think this is possible. <code>turtle</code> is a toy module and has very limited functionality.</span>
<span class="comment-copy">Wow, what you have done is my final goal. Thank you very much. I want to use turtle graphics to layout text such like latex.</span>
<span class="comment-copy">So that I can have an estimation of width by <code>len(string)*8</code>?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/2922295/calculating-the-pixel-size-of-a-string-with-python" title="calculating the pixel size of a string with python">stackoverflow.com/questions/2922295/â€¦</a></span>
<span class="comment-copy">I found a similar solution about tkinter, but no solution about turtle graphics...</span>
