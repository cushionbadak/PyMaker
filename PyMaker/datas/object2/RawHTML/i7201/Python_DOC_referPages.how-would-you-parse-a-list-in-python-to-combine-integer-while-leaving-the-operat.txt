<div class="post-text" itemprop="text">
<p>How would you parse a list in python to combine integer while leaving the operator of an equation alone?</p>
<pre><code>list =['(' ,'1', '+', '2', ')', '+', '(', '2', '0'. '0', '/', '2', '5', ')']
</code></pre>
<p>I would like to ultimately be able to use a list like this to create a calculable equation taken from user input. Is it possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the object is to do the calculation, skip converting to integers entirely and do an <code>eval</code>. Suppose you have this string from input <code>'(1+2)+(200/25)'</code>, you can do:</p>
<pre><code>calc_result = eval(calc_input) # equals 11
</code></pre>
<p>However be careful, the use of eval can run any python code that is given to it, so if it's a program for public use someone will figure out a way to use this part to insert code you never intended to allow.</p>
<p><code>eval</code> and <code>exec</code> should generally be avoided because they can be a security risk. For details, please see <a href="https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a> by SO veteran Ned Batchelder (thanks to @PM2Ring for the comment)</p>
</div>
<div class="post-text" itemprop="text">
<p>if you do not mind using <a href="http://www.sympy.org/" rel="nofollow noreferrer"><code>sympy</code></a>:</p>
<pre><code>from sympy import sympify

lst = ['(', '1', '+', '2', ')', '+', '(', '2', '0', '0', '/', '2', '5', ')']

res = sympify(''.join(lst))
print(res)  # 11
</code></pre>
<p>(not sure what you mean by <em>leaving the operator of an equation alone</em>. your expression is not an equation...).</p>
</div>
<div class="post-text" itemprop="text">
<p>To do this sort of thing properly, you will need a parser. You <em>can</em> create your own: parsing algorithms are well-documented. However, you don't need to build a parser from scratch, you can use a package like <a href="http://pyparsing.wikispaces.com/" rel="nofollow noreferrer">pyparsing</a> to create a parser.</p>
<p>If you can <em>guarantee</em> that your user input is <strong>totally</strong> safe, then you can get Python to evaluate it for you via the built-in <code>eval</code> function. However, <code>eval</code> is slow, and it is a security hole because it can be used to execute arbitrary code, as mentioned in the article by Ned Batchelder that's linked in Ofer Sadan's answer.</p>
<p>But to answer your immediate question, we can easily grab the digits from that list of strings, join them together, and convert the resulting number strings into integers. Grouping the digits and separating them from the non-digits is easily done using <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. You just need to give it a function it can use to identify the groups; we can use <code>str.isdigit</code> for that. Here's a short demo:</p>
<pre><code>from itertools import groupby

lst = ['(' ,'1', '+', '2', ')', '+', '(', '2', '0', '0', '/', '2', '5', ')']
a = [int(''.join(g)) if k else next(g) for k, g in groupby(lst, str.isdigit)]
print(a)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['(', 1, '+', 2, ')', 200, '/', 25, ')']
</code></pre>
<p>If you also want to handle <code>+</code> and <code>-</code> signs and decimal points, it's not too hard to write a function that does that. Proper handling of all floating-point numbers is a little trickier, and it's possibly better to use a parser that already knows how to do that. ;)</p>
</div>
<span class="comment-copy">Have a look at the <a href="https://en.m.wikipedia.org/wiki/Shunting-yard_algorithm" rel="nofollow noreferrer">Shunting Yard Algorithm</a>. Yes, it is possible.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/114586/smart-design-of-a-math-parser">Smart design of a math parser?</a></span>
<span class="comment-copy">You neither say what is the exact output and the expected input, you give no context on what you are trying to achieve. I'm sorry but this is <i>unclear</i>.</span>
<span class="comment-copy">Please do not advice to use the <i>evil <code>eval</code></i> when <code>ast.literal_eval</code> can do the job.</span>
<span class="comment-copy">That's like giving a user way to inject SQL!</span>
<span class="comment-copy">@SergeBallesta How would you use <code>ast.literal_eval</code> to evaluate <code>'(1+2)+(200/25)'</code>? It can evaluate expressions containing <code>+</code> and <code>-</code>, as a side-benefit of its ability to evaluate complex numbers, and it can even handle parenthesised expressions, but it doesn't do multiplication or division.</span>
<span class="comment-copy">For <code>ast.literal_eval</code> see also <a href="https://stackoverflow.com/q/20748202/216074">this question</a> which covers the expression evaluation property of it, how itâ€™s just a side effect of the necessary parsing behavior, and how to <i>safely</i> evaluate simple expressions instead.</span>
