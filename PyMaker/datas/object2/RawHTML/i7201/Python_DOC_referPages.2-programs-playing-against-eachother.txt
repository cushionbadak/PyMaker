<div class="post-text" itemprop="text">
<p>I'm currently writing 2 programs in python that must play a number game against each other. One program picks a number between 1 and 100. Then the other attempts to guess what that number is. Each time the guesser gives it's guess, the chooser then replies with 'too big', 'too small', or 'you got it'. According to what the reply is the guesser adjusts its next guess accordingly.</p>
<p>Here's my code for the program that chooses:</p>
<pre><code>    import random
from guesser import g

guessCount = 0

number = random.randint(1, 100)
print("I'm thinking of a number between 1 and 100.")

outfile = open ('response.txt', 'w')
guess = 50
print (guess)
if guess &lt; number:
    print('Your guess is too low.') 
    switch = '1'
    outfile.write (switch + '\n')

elif guess &gt; number:
    print('Your guess is too high.')
    switch = '2'
    outfile.write (switch + '\n')
else:
    print('Correct, You guessed the number in', guessCount, 'guesses.')
    switch = '3'
    outfile.write (switch + '\n')



while guessCount &lt; 8:
    guess = g
    print (guess)
    guessCount += 1

    if guess &lt; number:
        print('Your guess is too low.') 
        switch = '1'
        outfile.write (switch + '\n')

    elif guess &gt; number:
        print('Your guess is too high.')
        switch = '2'
        outfile.write (switch + '\n')
    else:
        print('Correct, You guessed the number in', guessCount, 'guesses.')
        switch = '3'
        outfile.write (switch + '\n')
        break

outfile.close()
print('The number was',number)
</code></pre>
<p>And here's the code for the program that gives the guesses:</p>
<pre><code>low = 1
high = 100
guess = 0


guessCounter = 0

infile = open ('response.txt', 'r')  
switch = int (infile.readline())

def g (switch):

    while switch != 3 and guessCounter &lt; 8:
        guess = (low+high)//2
        guessCounter += 1

        if switch == 1:
            high = guess

        elif switch == 2:
            low = guess + 1

        return guess    
</code></pre>
<p>My <strong>main question</strong> is how to get the 2 programs to interact with eachother. I'm currently trying to use a method of having them communicate through a text file called response, but surely there's an easier way?</p>
<p>The <strong>main problem</strong> I'm having it seems is that when chooser tries to get the variable g from guesser it can't because there's no response currently in response.txt meaning switch = int ('')</p>
<blockquote>
<p>Traceback (most recent call last):   File
  "C:\Users\Jash\Downloads\guesser.py", line 8, in 
      switch = int (infile.readline()) ValueError: invalid literal for int() with base 10: ''</p>
</blockquote>
<p>And yes, they must be 2 separate programs. And it must be done in python.</p>
</div>
<div class="post-text" itemprop="text">
<p>It would be a lot easier to put both players in the same program.</p>
<p>If you really want to use 2, though, you can run them like this on unix or linux:</p>
<pre><code>echo "" &gt; somefile
tail -f somefile | program1 | program2 &gt;&gt; somefile
</code></pre>
<p>This will effectively pipe each program's output into the other's input.  Of course anything you want to see should be printed to standard error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can open the child scripts from your main script like this:</p>
<pre><code>from subprocess import Popen, PIPE

prog = Popen("child.py", shell=True, stdin=PIPE, stdout=PIPE)

prog.stdin.write("Message to child.py maybe from another child?\n")
print prog.stdout.read() #Response from child

prog.wait() # Wait for script to finish run next script
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as mentioned by Matt Timmermans:
if it is not absolutely neccessary, put the whole logic into one program:</p>
<pre><code>import random

def createNum():
    return random.randint(1,101)

lastGuess = 0
randMin, randMax = 1, 101
def guessNum(sigmoidAdjustmentInt):
    # sigmoidAdjustmentInt represents a number which is negative, equal to zero or positiv; e.g. [-1 / 0 / +1]
    #   0 == no information about to big or to small number
    #   -1 == number has to be smaller this time
    #   1 == number has to be bigger this time
    # guess somehow; e.g. with random again
    if sigmoidAdjustmentInt &lt; 0:
        randMax = lastGuess-1
    elif 0 &lt; sigmoidAdjustmentInt:
        randMin = lastGuess+1
    return random.randint(randMin,randMax)

def main():
    secretNumber = createNum()
    guessedCorrectly = False
    triesCounter = 0
    sigmoidAdjustmentInt = 0 # set here for the first call
    while not guessedCorrectly:
        triesCounter = 0
        if guessNum(sigmoidAdjustmentInt) == secretNumber:
            guessedCorrectly = True
            break
        # print here if too high or low
    print("needed guesses: "+ triesCounter)
    # do something else
</code></pre>
<p>please note that the random.randint(...)-calls of createNum and guessNum are only placeholders for your preferred implementations of it.</p>
<p>see also: <a href="https://docs.python.org/3/library/random.html#random.randint" rel="nofollow noreferrer">random.randint</a></p>
<p>as for your question how to execute multiple scripts.
say you have 3 files:</p>
<pre><code>a.py
b.py
c.py
</code></pre>
<p>you start <code>a.py</code>, it does something, calls <code>b.py</code> and after that calls <code>c.py</code> with the result.
you can do it this way:</p>
<pre><code># in a.py
import subprocess

args = ( # rebuild the commandline call of the file here; the following stands for the comandline command: python b.py
    "python", # every whitespace in the cmd-command is a comma in this args-tuple
    "b.py"
)
popen = subprocess.Popen(args, stdout=subprocess.PIPE)
popen.wait()
resultsOfB, errorsOfB = popen.communicate()
del popen

args = ( # this represents: python c.py someStringValueContainedInResultFromB
    "python",
    "c.py",
    resultOfB # lets just say this var contains a string =&gt; if not convert it to one
)
popen = subprocess.Popen(args, stdout=subprocess.PIPE)
popen.wait()
resultsOfC, errorsOfC = popen.communicate()
# do something with the results of c.py
</code></pre>
<p>again: if you write all three of the files, consider to put them together into one. this method is good if you have to call third party software or something like that (e.g.:)</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a third, <em>referee</em> program. Take two arguments - the names of the picker and the guesser programs. Have the referee program open read/write pipes to the two programs, and using either the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> or the <a href="https://pypi.python.org/pypi/pexpect" rel="nofollow noreferrer"><code>pexpect</code></a> module.</p>
</div>
<span class="comment-copy">Do you want to start your scripts seperatly or is it okay for you if you have one main script which creates subprocesses for the others?</span>
<span class="comment-copy">Or you can use sockets.</span>
<span class="comment-copy">@michip96 It doesn't matter if they start separately or not, this is for a group project for one of my classes. I've reached the point where I'm just trying to bang on it til it works haha Any help is greatly appreciated.</span>
