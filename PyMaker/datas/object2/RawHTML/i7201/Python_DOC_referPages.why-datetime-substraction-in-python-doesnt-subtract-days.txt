<div class="post-text" itemprop="text">
<p>I expect that if I substract two datetimes in Python, I'll get datetime with substracted days, weeks, etc...</p>
<p>Here is my sample. What I get are just substracted hours, minutes and seconds. Date variable is taken from database. On type() function returns datetime.datetime.</p>
<pre><code>def elapsed_time(date):
    """
        Custom filter that format time to "x time age".
    :param date:
    :return:
    """
    if date is None:
        return 'No time given'
    now = datetime.datetime.now()
    elapsed = (now - date).seconds
    if elapsed &lt; 60:
        return '{} seconds ago'.format(elapsed)
    elif elapsed &lt; 3600:
        return '{} minutes ago'.format(int(elapsed / 60))
    elif elapsed &lt; 86400:
        return '{} hours ago'.format(int(elapsed / 3600))
    else:
        return '{} days ago'.format((elapsed / 86400))
</code></pre>
<p>My current example:</p>
<p>Given datetime is    2017-07-27 01:18:58.398231</p>
<p>Current datetime is  2017-07-31 20:23:36.095440</p>
<p>Result is            19 hours (68677 seconds)</p>
</div>
<div class="post-text" itemprop="text">
<p>The following line returns only the 'seconds' component of the difference and does not take into account the days/hours/minutes components of it.</p>
<pre><code>elapsed = (now - date).seconds
</code></pre>
<p>What you need is to use total_seconds() instead of just seconds since that's what you're trying to compare in subsequent conditions. Use it as follows:</p>
<pre><code>elapsed = (now - date).total_seconds()
</code></pre>
<p>The rest of the code remains the same and you will get your desired output.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you subtract two datetime objects the result will be a timedelta</p>
<pre><code>import datetime as dt
import time

t1 = dt.datetime.now()

time.sleep(4)

t2 = dt.datetime.now()


dt1 = t2 - t1
print(dt1)
print(dt1.total_seconds())
print(type(dt1))


dt2 = t1 - t2
print(dt2.total_seconds())
print(dt2)

print(type(dt2))
</code></pre>
<p>If the second timestep was earlier than the first one, the results can be irritating. See negative day in example.</p>
<p><code>dt.seconds</code> is only a part of the result, you are looking for </p>
<pre><code>timedelta.total_seconds()
</code></pre>
</div>
<span class="comment-copy">Please show a self-contained example demonstrating the problem.</span>
<span class="comment-copy">Why aren't you using the built in <a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#timesince" rel="nofollow noreferrer"><code>timesince</code></a> filter?</span>
<span class="comment-copy">@DanielRoseman I'm using Flask. But if I find source code, it would be great idea</span>
<span class="comment-copy">The <code>seconds</code> attribute doesn't mean "this timedelta in seconds". It's the seconds component of a days-seconds-microseconds representation.</span>
<span class="comment-copy">Why not use built-in timedelta from datetime library? <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a></span>
<span class="comment-copy">That's exactly what I was looking for! I feel so embarrased. Thanks</span>
