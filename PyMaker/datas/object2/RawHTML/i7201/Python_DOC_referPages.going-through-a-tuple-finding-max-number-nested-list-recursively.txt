<div class="post-text" itemprop="text">
<p>Doing it for a homework,but don't get right results.</p>
<p>I am trying to write a function which returns the maximum value from either a list or tuple or tuple containing a list.
Facing difficulty in determining how to exactly loop through a tuple and if it has a list look into it,and when all's done,find the maximum value recursively. Read the for example for what I mean.</p>
<pre><code>def max_val(t): 
    """ t, tuple or list
        Each element of t is either an int, a tuple, or a list
        No tuple or list is empty
        Returns the maximum int in t or (recursively) in an element of t """ 
    # Your code here
</code></pre>
<p>For example, </p>
<p>• max_val((5, (1,2), [[1],[2]])) returns 5.
• max_val((5, (1,2), [[1],[9]])) returns 9.</p>
<p>So far, I have tried the max and sorting t,but that does not give right answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Disclaimer: as you mentioned in the question that this is a homework assignment, I strongly suggest you to first have a go solving the problem yourself, before "peeking" into the following solution (although there are many ways to do this). A good way to learn solving a complex problem is to first break it down into smaller "chunks", come up with some very simple inputs and expected outputs, followed by implementing your own codes. Use Google searches to find tips / hints. I'm putting my own solution here purely for the benefit of sparking inspirations. There may be more elegant / efficient way to do this.)</p>
<h1> Step 1: Break this problem into two smaller parts</h1>
<p>For ease of understanding I'd break this down into two steps:</p>
<ul>
<li>Part 1: flatten the deeply nested tuple/list into a flatten list. <a href="https://stackoverflow.com/questions/2158395/flatten-an-irregular-list-of-lists#answer-42490267">I've found this recursive tuple/list deep flattening solution pretty easy to understand</a>. If the input is an <code>int</code>, just return a list with that one <code>int</code> in it.</li>
<li>Part 2: once we have a flatten list, use the <code>max</code> function to find the max integer of the flatten list.</li>
</ul>
<h1> Step 2: Visualise sample inputs and expected outputs</h1>
<p>Before even attempting implementing codes, I always find it beneficial to "visualise" some very simple example inputs and expected outputs. Let's visualise some scenarios.</p>
<h3> Scenario 1 - Input is an already flatten list</h3>
<ul>
<li>input: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 2 - Input is an already flatten tuple</h3>
<ul>
<li>input: <code>(1, 2, 3, 4, 5, 6)</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 3 - Input is a deeply nested list</h3>
<ul>
<li>input: <code>[1, [2, [3, 4, 5, 6]]]</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 4 - Input is a deeply nested tuple</h3>
<ul>
<li>input: <code>(1, (2, (3, 4, 5, 6)))</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 5 - Input is a deeply nested list/tuple combined. eg 1</h3>
<ul>
<li>input: <code>[1, (2, [3, 4, 5, 6])]</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 6 - Input is a deeply nested list/tuple combined. eg 2</h3>
<ul>
<li>input: <code>(1, [2, (3, 4, 5, 6)])</code></li>
<li>part 1 (deep flattening) output: <code>[1, 2, 3, 4, 5, 6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 7 - Input is an integer</h3>
<ul>
<li>input: <code>6</code></li>
<li>part 1 (deep flattening) output: <code>[6]</code></li>
<li>part 2 (max element in list) output: <code>6</code></li>
</ul>
<h3> Scenario 8 - (optional) Input is an empty list</h3>
<ul>
<li>input: <code>[]</code></li>
<li>part 1 (deep flattening) output: <code>[]</code></li>
<li>part 2 (max element in list) output: <code>None</code></li>
</ul>
<h3> Scenario 9 - (optional) Input is an empty tuple</h3>
<ul>
<li>input: <code>()</code></li>
<li>part 1 (deep flattening) output: <code>[]</code></li>
<li>part 2 (max element in list) output: <code>None</code></li>
</ul>
<h1> Step 3 - implement Part 1 (deep flattening)</h1>
<p>This is my code (works for some test case scenarios above. Tweak as needed to make it more robust).</p>
<pre><code>def deep_flatten(t):

    # if t is an int, just return a list with that int in it. No recursions needed.
    if isinstance(t, int):
        return [t]

    # if t is a list or tuple, do some recursions to deep-flatten it:        
    elif isinstance(t, (list, tuple)):

        # initialise result
        result = []

        # define a recursive function
        def update_result(t):
            for item in t:
                if isinstance(item,(list, tuple)):
                    update_result(item)
                else:    
                    result.append(item)

        # mutate result by performing recursions
        update_result(t)  

        # return it
        return result
</code></pre>
<h1> Step 4 - implement Part 2 (max element of a list)</h1>
<p>This is the ultimate code in question, using the <code>deep_flatten</code> helper function.</p>
<pre><code>def max_val(t):
    """ t, tuple or list
        Each element of t is either an int, a tuple, or a list
        No tuple or list is empty
        Returns the maximum int in t or (recursively) in an element of t """

    # use our helper deep flattening function to output a flatten list
    t_flatten = deep_flatten(t)

    # empty tuple / list case
    if len(t_flatten) == 0:
        return None

    # return the max element in a non-empty list / tuple input
    return max(t_flatten)
</code></pre>
<h1> Step 5 - do some testing</h1>
<p>Do some testings against the scenarios. print out the variables to check result is as expected.</p>
<h3>Scenario 1</h3>
<pre><code>t1 = [1, 2, 3, 4, 5, 6]
t1_flatten = deep_flatten(t1) # -&gt; [1, 2, 3, 4, 5, 6]
t1_max = max_val(t1)  # -&gt; 6
</code></pre>
<h3>Scenario 2</h3>
<pre><code>t2 = (1, 2, 3, 4, 5, 6)
t2_flatten = deep_flatten(t2) # -&gt; [1, 2, 3, 4, 5, 6]
t2_max = max_val(t2)  # -&gt; 6
</code></pre>
<h3>Scenario 3</h3>
<pre><code>t3 = [1, [2, [3, 4, 5, 6]]]
t3_flatten = deep_flatten(t3) # -&gt; [1, 2, 3, 4, 5, 6]
t3_max = max_val(t3)  # -&gt; 6
</code></pre>
<h3>Scenario 4</h3>
<pre><code>t4 = (1, (2, (3, 4, 5, 6)))
t4_flatten = deep_flatten(t4) # -&gt; [1, 2, 3, 4, 5, 6]
t4_max = max_val(t4)  # -&gt; 6
</code></pre>
<h3>Scenario 5</h3>
<pre><code>t5 = [1, (2, [3, 4, 5, 6])]
t5_flatten = deep_flatten(t5) # -&gt; [1, 2, 3, 4, 5, 6]
t5_max = max_val(t5)  # -&gt; 6
</code></pre>
<h3>Scenario 6</h3>
<pre><code>t6 = (1, [2, (3, 4, 5, 6)])
t6_flatten = deep_flatten(t6) # -&gt; [1, 2, 3, 4, 5, 6]
t6_max = max_val(t6)  # -&gt; 6
</code></pre>
<h3>Scenario 7</h3>
<pre><code>t7 = 6
t7_flatten = deep_flatten(t7) # -&gt; [6]
t7_max = max_val(t7)  # -&gt; 6
</code></pre>
<h3>Scenario 8</h3>
<pre><code>t8 = []
t8_flatten = deep_flatten(t8) # -&gt; []
t8_max = max_val(t8)  # -&gt; None
</code></pre>
<h3>Scenario 9</h3>
<pre><code>t9 = ()
t9_flatten = deep_flatten(t9) # -&gt; []
t9_max = max_val(t9)  # -&gt; None
</code></pre>
<h3> Sample case as per the question:</h3>
<pre><code>print(  max_val((5, (1,2), [[1],[2]]))  ) # -&gt; 5

print(  max_val((5, (1,2), [[1],[9]]))  )  # -&gt; 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Im not going to do your homework for you ... but ill give you a hint</p>
<pre><code>def max_val(t): 
    """ t, tuple or list
        Each element of t is either an int, a tuple, or a list
        No tuple or list is empty
        Returns the maximum int in t or (recursively) in an element of t """ 
    current_max = float("-inf")
    for item in t:
        if isinstance(item,(list,tuple)):
            #do one thing here
        else:
           #do a different thing here
    return current_max
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def max_val(t):
   weird_list = t
   weird_string = str(weird_list)
   weird_string = weird_string.replace('[','').replace(']','').replace(' ','').replace('(','').replace(')','')
   nice_list = list(map(int, weird_string.split(',')))
   max_number = max(nice_list)
   return max_number
</code></pre>
<p>One approach is to convert the tuple to a string first.</p>
</div>
<div class="post-text" itemprop="text">
<p>The main idea about this problem is think recursively:</p>
<pre><code>def max_val(t): 
    """ t, tuple 
        Each element of t is either an int, a tuple, or a list
        No tuple or list is empty
        Returns the maximum int in t or (recursively) in an element of t """ 
    # Your code here
    result = 0
    for e in t:
        try:
            if e &gt; result:
                result = e
        except:
            if max_val(e) &gt; result:
                result = max_val(e)
    return result

print(max_val((5, (1, 2), [[1], [2]])))
print(max_val((5, (1, 2), [[1], [9]])))
</code></pre>
<p>will return 5 and 9 respectively.</p>
</div>
<span class="comment-copy">What have you tried so far? (Hint, this should help: <a href="https://stackoverflow.com/questions/1952464/in-python-how-do-i-determine-if-an-object-is-iterable" title="in python how do i determine if an object is iterable">stackoverflow.com/questions/1952464/…</a>)</span>
<span class="comment-copy">Alternatively, since you know that the input will either be an int, or a tuple or a list, and nothing else, you can use the inbuilt <code>type</code> function. Read the documentation here: <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#type</a></span>
<span class="comment-copy">you should really not use type to typecheck in python ... it creates bad habits that will fail with more complicated types (ie inheritance)</span>
<span class="comment-copy">You can make it a string first (see answer below)</span>
<span class="comment-copy">+1 for putting in far more effort than this question deserves ... but i doubt that this will satisfy his homework requirement as i suspect recursivly building a 1d list is insufficient and the teacher expects a recursive solution that only is O(N) (ie not simply calling max on a modified list) +1 all the same though....</span>
<span class="comment-copy">Fantastic explanation Atlas7 English is little week, but this how I learn, reading code. I tried but couldn't flatten the tuple or list. knew to call max.</span>
<span class="comment-copy">@Joran Beasley, thank for suggestion,but this solution works.</span>
<span class="comment-copy">problem is,I don't get how to find a max for either a tuple or a list. meaning,if I try and find a max in a tuple, tuple has max value,what if list nested in it has higher value?</span>
<span class="comment-copy">maybe where it says do one thing here ... try printing your "item" and in the other case also think about what you need to do...</span>
<span class="comment-copy">+1 for a very short and neat template. @raven_richard I strongly recommend you to try implementing a solution based on this template too - it could be more efficient than mine and you will learn a great deal in solving the same problem in multiple way.</span>
