<div class="post-text" itemprop="text">
<p>I'm working on a side project and I've encountered this problem. Basically, the input I'm dealing with is a list of lists, where the inner lists look something like this:</p>
<pre><code>- ['operating', 'alive', 'effective', 'rapid', 'progressive', 'working', 'mobile']
- ['enjoyable', 'pleasant', 'entertaining', 'amusing', 'lively', 'boisterous', 'convivial', 'merry', 'witty']
</code></pre>
<p>There can be any number of inner lists (but I've considered creating a limitation). What I want to achieve is to return lists of words from each of the lists that begin with the same letter. For example, from the above, we'd get something like:</p>
<pre><code>[alive, amusing], [effective, enjoyable], [effective, entertaining], [progressive, pleasant] ...
</code></pre>
<p>My question is, what is a good approach? I've considered going through the entire alphabet and using a boolean array to keep track of which letters had a word in each list starting with that letter, but it seems inefficient, and I'm not satisfied with the approach. </p>
<p>For example (not complete, but just for reference..):</p>
<pre><code>d = dict.fromkeys(ascii_lowercase, False)    
for c in ascii_lowercase:
    found = False
    for item in description:
        for syn in item:
           if syn.startswith(c):
               found = True
        d[c] = found
</code></pre>
<p>And then just grabbing the words starting with the letters marked 'True' from each list to build the output list. </p>
<p>Am I missing a simpler approach? I'm new to Python, so I'm not sure if I'm missing a built in function that could be helpful in this case.</p>
<p>Thanks for reading!</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension will make the job much simpler!</p>
<p>You need to iterate through the first inner list <code>l[0]</code> as <code>i</code>, with that in hand, iterate through every element in second inner list, <code>l[1]</code> as <code>j</code>. If your condition satisfies, then add them to the list!</p>
<pre><code>&gt;&gt;&gt; l
[['operating', 'alive', 'effective', 'rapid', 'progressive', 'working', 'mobile'], ['enjoyable', 'pleasant', 'entertaining', 'amusing', 'lively', 'boisterous', 'convivial', 'merry', 'witty']]

&gt;&gt;&gt; [[i,j] for j in l[1] for i in l[0] if j.startswith(i[0])]
[['effective', 'enjoyable'], ['progressive', 'pleasant'], ['effective', 'entertaining'], ['alive', 'amusing'], ['mobile', 'merry'], ['working', 'witty']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One option could be to sort a flattened version of your list, then use <code>groupby</code> with a custom key to get the different first letters as groups.</p>
<pre><code>[list(grp) for _,grp in groupby(sorted(chain.from_iterable(li)), key=itemgetter(0))]
</code></pre>
<p><strong>Example</strong></p>
<pre><code>&gt;&gt;&gt; from itertools import groupby, chain
&gt;&gt;&gt; from operator import itemgetter

&gt;&gt;&gt; li = [['operating', 'alive', 'effective', 
           'rapid', 'progressive', 'working', 'mobile'], 
          ['enjoyable', 'pleasant', 'entertaining', 'amusing',
           'lively', 'boisterous', 'convivial', 'merry', 'witty']]

&gt;&gt;&gt; [list(grp) for _,grp in 
     groupby(sorted(chain.from_iterable(li)), key=itemgetter(0))]
[['alive', 'amusing'],
 ['boisterous'],
 ['convivial'],
 ['effective', 'enjoyable', 'entertaining'],
 ['lively'],
 ['merry', 'mobile'],
 ['operating'],
 ['pleasant', 'progressive'],
 ['rapid'],
 ['witty', 'working']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a dictionary "char":listOfWords[], and fill it while iterating your lists...</p>
<p>For each list element of all lists: </p>
<pre><code>if dictionary contains the "char" with whom the element starts with 
</code></pre>
<p>you add the element to the list of the key "char"</p>
<pre><code>else 
</code></pre>
<p>you create the new element in the dictionary with the new starting char, initialize his list and add the element to the new list.</p>
<p>The resulting dictionary will be something like:</p>
<pre><code>"a":[alive, amusing],"b":[boisterous],"c":[convivial], ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictionary that maps each letter to a list of words. This is some sample code:</p>
<pre><code>from collections import defaultdict

letterWordsDict = defaultdict(lambda: [])

# Let ls contain sub-lists of words.
for subls in ls:
    for word in subls:
        letterWordsDict[word[0]].append(word)

groupedWords = letterWordsDict.values()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to list the words that starts with same character, you can use the following snippet.</p>
<p><strong>Python 3 (Assumed you have only lowercase letters)</strong>:</p>
<pre><code>import string 

outer = [
    ['operating', 'alive', 'effective', 'rapid', 'progressive', 'working', 'mobile'],
    ['enjoyable', 'pleasant', 'entertaining', 'amusing', 'lively', 'boisterous', 'convivial', 'merry', 'witty']
]

lowercase = string.ascii_lowercase
data = {lowercase[i]:[] for i in range(26)}
for inner in outer:
    for word in inner:
        data[word[0]].append(word)

flat_list = []
for character in sorted(data.keys()):
    if len(data[character])!=0:
        flat_list.append(sorted(data[character]))

print(flat_list)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[['alive', 'amusing'], ['boisterous'], ['convivial'], ['effective', 'enjoyable', 'entertaining'], ['lively'], ['merry', 'mobile'], ['operating'], ['pleasant', 'progressive'], ['rapid'], ['witty', 'working']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I flattened the list of lists first, then i sorted by the first letter to group by that key, finally i've extracted the group value into a list then wrapped the whole into a list as a result.</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; from itertools import chain

&gt;&gt;&gt; items = [['operating', 'alive', 'effective', 'rapid', 'progressive', 'working', 'mobile'], ['enjoyable', 'pleasant', 'entertaining', 'amusing', 'lively', 'boisterous', 'convivial', 'merry', 'witty']]


&gt;&gt;&gt; first_item = itemgetter (0)

&gt;&gt;&gt; flattened_items = chain.from_iterable (items)

&gt;&gt;&gt; list (list (gitems) for _, gitems in groupby (sorted (flattened_items, key = first_item), key = first_item))

[['alive', 'amusing'], ['boisterous'], ['convivial'], ['effective', 'enjoyable', 'entertaining'], ['lively'], ['mobile', 'merry'], ['operating'], ['progressive', 'pleasant'], ['rapid'], ['working', 'witty']]
</code></pre>
</div>
<span class="comment-copy">Why there are two lists of words that starts with 'E' in your example?</span>
<span class="comment-copy">My vote to this answer, a pure pythonic way. Can you please explain in steps the list comprehension does?. Much thanks.</span>
<span class="comment-copy">@Ajay2588 Check out <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby()</code></a>,  <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain.from_iterable()</code></a>, <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter()</code></a>, and <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> - if you have any specific questions let me know!</span>
