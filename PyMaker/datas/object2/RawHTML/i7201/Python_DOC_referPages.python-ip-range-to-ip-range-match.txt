<div class="post-text" itemprop="text">
<p>Is there any method to check if some IP addresses from a network range are present in the subnets of another IP range?</p>
<pre><code>Example: 10.0.1.0/18 in 123.1.0.0/8 
</code></pre>
<p>If it exists, I need it to return True, else False.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.3, you can use the <a href="https://docs.python.org/3/library/ipaddress.html" rel="noreferrer">ipaddress</a> module of the standard library:</p>
<pre><code>from ipaddress import IPv4Address, IPv4Network

IPv4Address('192.0.2.6') in IPv4Network('192.0.2.0/28')
# True
IPv4Address('10.0.1.0') in IPv4Network('192.0.2.0/28')
# False
</code></pre>
<p>If you mean if the networks overlap, use <code>overlaps</code>:</p>
<pre><code>In [14]: IPv4Network('10.0.1.0/24').overlaps(IPv4Network('192.0.2.0/28'))
Out[14]: False
</code></pre>
<p>Note that this module was marked as provisional in Python 3.3, but no longer is in 3.6. So enjoy it!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from ipaddress import ip_address, ip_network
</code></pre>
<p>NOTE: Other answers specifically point at IPv4Address, IPv4Network, but ip_address and ip_network simply call the IPv4 OR IPv6 version when needed.</p>
<pre><code>addr = ip_address('10.0.1.0')
</code></pre>
<p>NOTE: the sample network you provided is not a true <code>/8</code> network, so the ip_network will respond with an error of <code>ValueError: 123.1.0.0/8 has host bits set</code></p>
<p>To get past this, by forcing the ipaddress library to essentially round down to the nearest network address, you can set <code>strict=False</code> and Python will find the nearest, lower address for a <code>/8</code> network: <code>123.0.0.0</code></p>
<pre><code>netw = ip_network('123.1.0.0/8', strict=False)

print(addr in netw)
</code></pre>
<p>Then it is simply a matter of testing using the <code>in</code> keyword.</p>
<p>If you want to test every address in a network range against every address in another network range, then:</p>
<pre><code>net1 = ip_network('10.0.1.0/18', strict=False)
net2 = ip_network('123.1.0.0/8', strict=False)

for addr in net1:
    if addr in net2:
        print(addr, 'True')
    else:
        print(addr, 'False')
</code></pre>
<p>In addition, networks can be converted into sets:</p>
<pre><code>n1 = set(net1)
n2 = set(net2)
</code></pre>
<p>And Python sets have the ability show any overlap OR inclusion (subset/superset relationships).</p>
<pre><code>n1.isdisjoint(n2)
n1.issubset(n2)
n2.issubset(n1)
n2.issuperset(n1)
</code></pre>
<p>etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the accepted answer in this <a href="https://stackoverflow.com/questions/819355/how-can-i-check-if-an-ip-is-in-a-network-in-python">question</a> should help you:</p>
<p>If you can't go for any reason on this link here is the answer:</p>
<pre><code>import socket,struct

def makeMask(n):
    "return a mask of n bits as a long integer"
    return (2L&lt;&lt;n-1) - 1

def dottedQuadToNum(ip):
    "convert decimal dotted quad string to long integer"
    return struct.unpack('L',socket.inet_aton(ip))[0]

def networkMask(ip,bits):
    "Convert a network address to a long integer" 
    return dottedQuadToNum(ip) &amp; makeMask(bits)

def addressInNetwork(ip,net):
   "Is an address in a network"
   return ip &amp; net == net

address = dottedQuadToNum("192.168.1.1")
networka = networkMask("10.0.0.0",24)
networkb = networkMask("192.168.0.0",24)
print (address,networka,networkb)
print addressInNetwork(address,networka)
print addressInNetwork(address,networkb)
</code></pre>
<p>Return True or False (in the example first you have False then True).</p>
<p>Or in one function:</p>
<pre><code>import socket,struct

def addressInNetwork(ip,net):
   "Is an address in a network"
   ipaddr = struct.unpack('L',socket.inet_aton(ip))[0]
   netaddr,bits = net.split('/')
   netmask = struct.unpack('L',socket.inet_aton(netaddr))[0] &amp; ((2L&lt;&lt;int(bits)-1) - 1)
   return ipaddr &amp; netmask == netmask
</code></pre>
<p>The answer is inspired by the question I linked, give credits to the people if it work for you.</p>
</div>
<span class="comment-copy">This is for only "/32" Ip not range. Read the question properly</span>
<span class="comment-copy">Thanks for the Overlaps Suggestion thats what I was looking for exactly</span>
<span class="comment-copy">I need a range to range match not for a third IP, Please read the question correctly</span>
<span class="comment-copy">Sir: three of us are trying to answer your question and your reply to most of us has been: read the question properly. I might suggest that the question could be phrased more carefully: potentially with a more concrete example of what you mean by "check if one Ip from a network range is present in the subnets of Other Ip range". That might help all of us provide an answer that meets your needs.</span>
<span class="comment-copy">Thanks for the answer</span>
<span class="comment-copy">Using netaddr you can test only "/32" Ip you cant search a range to range</span>
<span class="comment-copy">My bad, sorry, I'll edit my answer then.</span>
<span class="comment-copy">No Problem Thanks :)</span>
