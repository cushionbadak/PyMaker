<div class="post-text" itemprop="text">
<p>I am fairly new to Python, but i was wondering if i could utilize Python and its modules. To retrieve a href from page 1, and then the first paragraph in page 2.</p>
<p>Q2: Also, how could I scrape the first 10 link hrefs with the same div class on page one, and then scrape the first 10 paragraphs, while looping?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, I believe you should be able to.</p>
<p>Try to lookup the requests and beautifulsoup python modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two python modules that I would use for this: <a href="http://docs.python-requests.org/en/master/user/quickstart/" rel="nofollow noreferrer">requests</a> and <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a>. I would use requests to get the website raw html and then use a regex to get for example your paragraph:</p>
<pre><code>import requests, re
site = requests.get("http://somewebsite.com").text
paragraphs = re.findall(r"&lt;p&gt;(.*?)&lt;/p&gt;", site, re.DOTALL)
firstPara = paragraphs[0]
print(firstPara)
</code></pre>
<p>the requests line here is self-explanatory and the regex says look for the first <code>&lt;p&gt;</code> tag then the brackets mean return just this bit of <code>.*?</code> which is as many <code>(*)</code> of any charachters <code>(.)</code> up to <code>(?)</code> the closing <code>&lt;/p&gt;</code> tag. Finally the re.DOTALL just means that it will math newlines as part of the lookup</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative to using beautifulsoup would be to use the <a href="https://docs.python.org/2/library/webbrowser.html" rel="nofollow noreferrer">webbrowser</a> module.
With the <a href="https://pymotw.com/2/webbrowser/" rel="nofollow noreferrer">webbrowser</a> module you can open in the default webbrowser or even specify a preferred browser to open (using the default is preferable, however, as of course there is no guarantee that the user's preference will match yours!)</p>
<p>So you could open a url like so:</p>
<pre><code>import webbrowser

webbrowser.open_new('https://stackoverflow.com/help/formatting')
</code></pre>
<p>or like this:</p>
<pre><code>import webbrowser

a = webbrowser.get('chrome') #target chrome (e.g)
a.open('https://www.stackoverflow.com')
</code></pre>
<p>Unfortunately, if you just stick a hashtag (for an anchor) onto the end of a url, webbrowser doesn't seem to like this. Instead you should define your anchor using a variable and pass it into a function as a parameter:</p>
<pre><code>def open_anchor(self, anchor):
        """ Open selected anchor in the default webbrowser
        """
        webbrowser.open( anchor )
</code></pre>
<p>There are more webbrowser examples on this <a href="http://www.programcreek.com/python/example/615/webbrowser.open" rel="nofollow noreferrer">page</a></p>
<p>Hope this helps</p>
</div>
<span class="comment-copy">Joe, just tried your code, however i am getting a list index out of range. on line 4 firstPara = paragraphs[0]</span>
<span class="comment-copy">That would mean that the <code>re.findall</code> is not returning any matches. Could you send a link to the raw html that you are trying to match? Are you sure that there are paragraph tags in it?</span>
<span class="comment-copy">Also see <a href="https://wiki.python.org/moin/HelpOnLinking#Anchors" rel="nofollow noreferrer">wiki.python.org/moin/HelpOnLinking#Anchors</a></span>
