<div class="post-text" itemprop="text">
<p>I'm looking for a formatted byte string literal. Specifically, something equivalent to</p>
<pre><code>name = "Hello"
bytes(f"Some format string {name}")
</code></pre>
<p>Possibly something like <code>fb"Some format string {name}"</code>.</p>
<p>Does such a thing exist?</p>
</div>
<div class="post-text" itemprop="text">
<p>No.  <a href="https://www.python.org/dev/peps/pep-0498/#no-binary-f-strings" rel="noreferrer">The idea is explicitly dismissed in the PEP</a>:</p>
<blockquote>
<p>For the same reason that we don't support <code>bytes.format()</code>, you may
  not combine <code>'f'</code> with <code>'b'</code> string literals. The primary problem
  is that an object's <code>__format__()</code> method may return Unicode data
  that is not compatible with a bytes string.</p>
<p>Binary f-strings would first require a solution for
  <code>bytes.format()</code>. This idea has been proposed in the past, most
  recently in <a href="https://www.python.org/dev/peps/pep-0461/" rel="noreferrer">PEP 461</a>. The discussions of such a feature usually
  suggest either</p>
<ul>
<li><p>adding a method such as <code>__bformat__()</code> so an object can control   how it is converted to bytes, or</p></li>
<li><p>having <code>bytes.format()</code> not be as general purpose or extensible   as <code>str.format()</code>.</p></li>
</ul>
<p>Both of these remain as options in the future, if such functionality
  is desired.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>From python 3.6.2 this percent formatting for bytes works:</p>
<p><code>print(b"Some stuff %a. Some other stuff" % my_byte_or_unicode_string)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This was one of the bigger changes made from python 2 to python3.  They handle unicode and strings differently.   </p>
<p>This s how you'd convert to bytes.</p>
<pre><code>string = "some string format"
string.encode()
print(string)
</code></pre>
<p>This is how you'd decode to string. </p>
<pre><code>string.decode()
</code></pre>
<p>I had a better appreciation for the difference between Python 2 versus 3 change to unicode through this <a href="https://www.coursera.org/learn/python-data-visualization/lecture/i6B2i/unicode-characters-and-strings" rel="nofollow noreferrer">coursera lecture</a> by Charles Severence.  You can watch the entire 17 minute video or fast forward to somewhere around 10:30 if you want to get to the differences between python 2 and 3 and how they handle characters and specifically unicode. </p>
<p>I understand your actual question is how you could format a string that has both strings and bytes.  </p>
<pre><code>inBytes = b"testing"
inString = 'Hello'
type(inString) #This will yield &lt;class 'str'&gt;
type(inBytes) #this will yield &lt;class 'bytes'&gt;
</code></pre>
<p>Here you could see that I have a string a variable and a bytes variable.  </p>
<p>This is how you would combine a byte and string into one string. </p>
<pre><code>formattedString=(inString + ' ' + inBytes.encode())
</code></pre>
</div>
<span class="comment-copy">I don't think so. <code>bytes</code> don't even have a <code>.format</code> method, so, I'd be surprised if they had f-string equivalents. The closest you'll get is <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-bytes-formatting" rel="nofollow noreferrer">bytes formatting</a></span>
<span class="comment-copy">Also, btw, always tag python questions with the generic [python] tag. Use  version-specific tag <i>in addition</i> to the generic tag if the question is version specific.</span>
<span class="comment-copy">Awesome, this is exactly what I wanted. I was having a hard time finding a reference. Thanks!</span>
<span class="comment-copy">I appreciate your time and efforts, but your answer is irrelevant to the question.</span>
<span class="comment-copy">I understood Enrico's question specifically how he could convert bytes and strings in Python 3, an area which changed significantly in the new version.  My answer was meant to help him understand how that change happened and how he could handle a similar operation in Python 3.  That's why I feel this response is relevant to his question.</span>
