<div class="post-text" itemprop="text">
<p>I am trying to do a script that read a seismic USGS bulletin and take some data to build a new txt file in order to have an input for other program called Zmap to do seismic statistics
SO I have the following USGS bulletin format:</p>
<pre><code>time,latitude,longitude,depth,mag,magType,nst,gap,dmin,rms,net,id,updated,place,type,horizontalError,depthError,magError,magNst,status,locationSource,magSource
2016-03-31T07:53:28.830Z,-22.6577,-68.5345,95.74,4.8,mww,,33,0.35,0.97,us,us20005dm3,2016-05-07T05:09:39.040Z,"43km NW of San Pedro de Atacama, Chile",earthquake,6.5,4.3,,,reviewed,us,us
2016-03-31T07:17:19.300Z,-18.779,-67.3104,242.42,4.5,mb,,65,1.987,0.85,us,us20005dlx,2016-04-24T07:21:05.358Z,"55km WSW of Totoral, Bolivia",earthquake,10.2,12.6,0.204,7,reviewed,us,us
</code></pre>
<p>this has many seismics events, so I did the following code which basically tries to read, split and save some variables in list to put them all together in a final *txt file.</p>
<pre><code>import os, sys
import csv
import string
from itertools import (takewhile,repeat)
os.chdir('D:\\Seismic_Inves\\b-value_osc\\try_tonino')
archi=raw_input('NOMBRE DEL BOLETIN---&gt; ')
ff=open(archi,'rb')
bufgen=takewhile(lambda x: x, (ff.read(1024*1024) for _ in repeat(None)))
numdelins= sum(buf.count(b'\n') for buf in bufgen if buf) - 1
with open(archi,'rb') as f:
    next(f)
    tiempo=[]
    lat=[]
    lon=[]
    prof=[]
    mag=[]
    t_mag=[]
    leo=csv.reader(f,delimiter=',')
    for line in leo:
        tiempo.append(line[0])
        lat.append(line[1])
        lon.append(line[2])
        prof.append(line[3])
        mag.append(line[4])
        t_mag.append(line[5])
    tiempo=[s.replace('T', ' ') for s in tiempo] #remplaza el tema de la T por espacio
    tiempo=[s.replace('Z','') for s in tiempo] #quito la Z
    tiempo=[s.replace(':',' ') for s in tiempo] # quito  los :
    tiempo=[s.replace('-',' ') for s in tiempo] # quito los -
</code></pre>
<p>From the USGS catalog I'd like to take the: Latitude (lat), longitude(lon), time(tiempo), depth (prof), magnitude (mag), type of magnitude (t_mag), with this part of teh code I took the variables I needed:</p>
<pre><code>    next(f)
    tiempo=[]
    lat=[]
    lon=[]
    prof=[]
    mag=[]
    t_mag=[]
    leo=csv.reader(f,delimiter=',')
    for line in leo:
        tiempo.append(line[0])
        lat.append(line[1])
        lon.append(line[2])
        prof.append(line[3])
        mag.append(line[4])
        t_mag.append(line[5]) 
</code></pre>
<p>but I had some troubles with the tim, so I applied my newbie knowledge to split the time from <code>2016-03-31T07:53:28.830Z</code> to <code>2016 03 31 07 53 28.830</code>.
Now I am suffering trying to have in one list the year (<code>[2016,2016,2016,...]</code>) in other list the months (<code>[01,01,...03,03,...12]</code>), in other the day ([<code>12,14,...03,11</code>]), in other the hour ([<code>13,22,14,17...</code>]), and the minutes with seconds merged by a point (.) like (<code>[minute.seconds]</code>) or (<code>[12.234,14.443,...]</code>), so I tryied to do this (to plit the spaces) and no success</p>
<pre><code>tiempo2=[]
for element in tiempo:
    tiempo2.append(element.split(' '))
print tiempo2
</code></pre>
<p>no success because i got this result:</p>
<pre><code>[['2016', '03', '31', '07', '53', '28.830'], ['2016', '03', '31', '07', '17', '19.300'].
</code></pre>
<p>can you give me a hand in this part?, or is there a pythonic way to split the date like I said before.
Thank you for the time you spent reading it.
best regards.
Tonino</p>
</div>
<div class="post-text" itemprop="text">
<p>suppose our tiempo2 holds the following value extracted from the csv : </p>
<pre><code>&gt;&gt;&gt; tiempo2 = [['2016', '03', '31', '07', '53', '28.830'], ['2016', '03', '31', '07', '17', '19.300']]

&gt;&gt;&gt; list (map (list, (map (float, items) if index == 5 else map (int, items) for index, items in enumerate (zip (*tiempo2)))))

[[2016, 2016], [3, 3], [31, 31], [7, 7], [53, 17], [28.83, 19.3]]
</code></pre>
<p>here we used the zip function to zip years, months, days, etc ...</p>
<p>I applied the conditional mapping for each item to an int if the index of the list is not the last otherwise to a float</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest using the <code>time.strptime()</code> function to parse the time string into a Python <code>time.struct_time</code> which is a <code>namedtuple</code>. That means you can access any attributes you want using <code>.</code> notation.</p>
<p>Here's what I mean:</p>
<pre><code>import time

time_string = '2016-03-31T07:53:28.830Z'

timestamp = time.strptime(time_string, '%Y-%m-%dT%H:%M:%S.%fZ')

print(type(timestamp))
print(timestamp.tm_year)   # -&gt; 2016
print(timestamp.tm_mon)    # -&gt; 3
print(timestamp.tm_mday)   # -&gt; 31
print(timestamp.tm_hour)   # -&gt; 7
print(timestamp.tm_min)    # -&gt; 53
print(timestamp.tm_sec)    # -&gt; 28
print(timestamp.tm_wday)   # -&gt; 3
print(timestamp.tm_yday)   # -&gt; 91
print(timestamp.tm_isdst)  # -&gt; -1
</code></pre>
<hr/>
<p>You could process a <code>list</code> of time strings by using a <code>for</code> loop as shown below:</p>
<pre><code>import time

tiempo = ['2016-03-31T07:53:28.830Z', '2016-03-31T07:17:19.300Z']

for time_string in tiempo:
    timestamp = time.strptime(time_string, '%Y-%m-%dT%H:%M:%S.%fZ')
    print('year: {}, mon: {}, day: {}, hour: {}, min: {}, sec: {}'.format(
            timestamp.tm_year, timestamp.tm_mon, timestamp.tm_mday,
            timestamp.tm_hour, timestamp.tm_min, timestamp.tm_sec))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>year: 2016, mon: 3, day: 31, hour: 7, min: 53, sec: 28
year: 2016, mon: 3, day: 31, hour: 7, min: 17, sec: 19
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution with the iso8601 add-on (<code>pip install iso8601</code>)</p>
<pre><code>&gt;&gt;&gt; import iso8601
&gt;&gt;&gt; dt = iso8601.parse_date('2016-03-31T07:17:19.300Z')
&gt;&gt;&gt; dt.year
2016
&gt;&gt;&gt; dt.month
3
&gt;&gt;&gt; dt.day
31
&gt;&gt;&gt; dt.hour
7
&gt;&gt;&gt; dt.minute
17
&gt;&gt;&gt; dt.second
10
&gt;&gt;&gt; dt.microsecond
300000
&gt;&gt;&gt; dt.tzname()
'UTC'
</code></pre>
<h2>Edited 2017/8/6 12h55</h2>
<p>IMHO, it is a bad idea to split the <code>datetime</code> timestamp objects into components (year, month, ...) in individual lists. Keeping the <code>datetime</code> timestamp objects as provided by <code>iso8601.parse_date(...)</code> could help to compute time deltas between events, check the chronological order, ... See the doc of the <code>datetime</code> module for more <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html</a></p>
<p>Having distinct lists for year, month, (...) would make such operations difficult. Anyway, if you prefer this solution, here are the changes</p>
<pre><code>import iso8601

# Start as former solution

with open(archi,'rb') as f:
    next(f)
    # tiempo=[]
    dt_years = []
    dt_months = []
    dt_days = []
    dt_hours = []
    dt_minutes = []
    dt_timezones = []

    lat=[]
    lon=[]
    prof=[]
    mag=[]
    t_mag=[]
    leo=csv.reader(f,delimiter=',')
    for line in leo:
        # tiempo.append(line[0])
        dt = iso8601.parse_date(line[0])
        dt_years.append(dt.year)
        dt_months.append(dt.month)
        dt_days.append(dt.day)
        dt_hours.append(dt.hour)
        dec_minutes = dt.minute + (dt.seconds / 60) + (dt.microsecond / 600000000)
        dt_minutes.append(dec_minutes)
        dt_timezones.append(dt.tzname())

        lat.append(line[1])
        lon.append(line[2])
        prof.append(line[3])
        mag.append(line[4])
        t_mag.append(line[5])
</code></pre>
</div>
<span class="comment-copy">cool, time to test it</span>
<span class="comment-copy">dear @marsouf, it works, i just added  <code>tiempo3=[]</code>  and did your suggestion, after that <code>year=tiempo3[0] mes=tiempo3[1]  dia=tiempo3[2] hora=tiempo3[3] minu=tiempo3[4] segu=tiempo3[5]</code> so then <code>pres1=zip(lon, lat, year, mes, dia, mag, prof, hora, minu, segu)          data=open('ZmapIN.dat','w')     for l in pres1:         linea=' '.join(str(x) for x in l)         data.write(linea +'\n')     data.close()</code> to have a txt file with all information needed, thank you so much</span>
<span class="comment-copy">Dear @martineau thanks I will try it!!!</span>
<span class="comment-copy">Gonzalo: Note that the values, such as <code>tm_year</code>, will be integers (i.e. they are no longer strings).</span>
<span class="comment-copy">dear @martineau, as my variable <code>tiempo</code> is a list of almost 1000 items <code>[2016-03-31T07:53:28.830Z, 2016-03-31T08:22:26.124Z, 2016-03-29T09:21:44.210Z ........]</code> , I tried to convert the <b>tiempo list</b> to string with <code>tiempos=','.join(tiempo)</code> <b>tiempos</b> is a new string list variable but it did not work, can you give me a hand, thank you a lot.</span>
<span class="comment-copy">Gonzalo: Making <code>tiempo</code> one long string like that won't work. You need to process each string separately as shown in my update.</span>
<span class="comment-copy">Dear @martineau, this is a good and well done example to keep in my mind, it works nice, thank you, I wish I could give +1, thank you for your time,have a nice sunday</span>
<span class="comment-copy">dear @glenfant; great, in case of list should I change the list to string rigth?</span>
<span class="comment-copy">@Gonzalo Fernandez Can you please rephrase your question ? What are these "strings" and "lists" related to ?</span>
<span class="comment-copy">dear @glenfant my 'tiempo' variable is a list like this:  <code>tiempo=['2016-03-31T07:53:28.830Z', '2016-03-31T07:17:19.300Z', '2016-03-29T20:56:41.520Z', '2016-03-29T20:32:26.150Z',...,]</code> (almost 1000 items). So should I need to use <code>TT=','.join(tiempo)</code> to have a string format?.</span>
<span class="comment-copy">@GonzaloFernandez to makeit clearer, just write what you expect based on these first four timestanps samples.</span>
<span class="comment-copy">dear @glenfant tiempo is a list of dates and times (seismic all of them) I am trying to have in <code>year_list = [2016,2016,2016..., ..., 2016]</code> , <code>month_list=[03, 03, 03, ..., 02]</code> , <code>date_list=[31, 31, 29, ..., 22 ]</code>  , <code>hour_list=[10, 12...etc]</code> , <code>nimute_seoncd_list=[33.23,43.11,22.33..etc]</code> so if I have them splitted then I'd be able to build a txt file with all the information like: <code>lon lat depth year month day hour minute_seconds</code></span>
