<div class="post-text" itemprop="text">
<p>I have been debugging a program I have been trying to get running correctly, and it all comes down to the first line of code as below. I have a dictionary of keys (string) and values (integer). I am trying to sort these in place in ascending order so that I can get the smallest element. However the order of the returned values doesn't make sense. It is not returning the smallest first, in fact it returns the largest (even though documentation clearly says it should be in ascending order). It is not in alphabetical order either, even though the first string is AAAAA..AAA - but it doesn't follow an alphabetical order. I am not even sure how to access the elements of what is returned by sorted and what type it is. According to the errors I have received while experimenting, it is a "list". How can I solve this problem? This one line is making the computation all wrong. </p>
<pre><code>    kmerMin = (sorted(topkmerdict,key=lambda x: x[1]))
    print kmerMin
    print kmerMin[0]
    print topkmerdict[kmerMin[0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you wrote returns a list of the dict's keys, sorted by the value of the 2nd character of the keys (<code>x[1]</code> picks out the 2nd character of key <code>x</code>).</p>
<p>It's not clear you want instead.  If, e.g., you want the keys sorted by their associated <em>values</em>, then here's one way to do it:</p>
<pre><code>&gt;&gt;&gt; d = {"a": 12, "b": 6, "c": 3}
&gt;&gt;&gt; sorted(d, key=lambda k: d[k])
['c', 'b', 'a']
</code></pre>
<p>Another way to do exactly the same, faster but perhaps less obvious:</p>
<pre><code>&gt;&gt;&gt; sorted(d, key=d.__getitem__)
['c', 'b', 'a']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have a dictionary of keys (string) and values (integer). I am trying to sort these in place in ascending order so that I can get the smallest element. </p>
</blockquote>
<p>You can make a list of keys sorted by the values by using <code>__getitem__</code> as the <a href="https://docs.python.org/3/glossary.html#term-key-function" rel="nofollow noreferrer">key-function</a>:</p>
<pre><code>&gt;&gt;&gt; topkmerdict = {
       'ATCCCAGCACTTTGGGAGGCCGAGGCAGGT': 6,
       'CTGTAATCCCAGCACTTTGGGAGGCCGAGG': 71,
       'AGCACTTTGGGAGGCCGAGGCAGGTGGATC': 8,
       'GGTGGCTCACGCCTGTAATCCCAGCACTTT': 53,
       'TGTTTGAGTTCATTGTAGATTCTGGATATT': 8,
       'CGGTGGCTCACGCCTGTAATCCCAGCACTT': 40,
       'GTAATCCCAGCACTTTGGGAGGCCGAGGCA': 27,
}
&gt;&gt;&gt; kmerMin = sorted(topkmerdict, key=topkmerdict.__getitem__)
&gt;&gt;&gt; kmerMin[0]
'ATCCCAGCACTTTGGGAGGCCGAGGCAGGT'
&gt;&gt;&gt; topkmerdict[kmerMin[0]]
6
</code></pre>
<p>If writing <em>__getitem__</em> looks too weird, you can still use a <em>lambda</em> for the key-function:  <code>kmerMin = sorted(topkmerdict, key=lambda k: topkmerdict[k])</code>.</p>
<p>FYI, if all you want is the smallest element, there is no need to do a full sort.  The <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><em>min()</em></a> function would be cleaner, clearer, and much more efficient:</p>
<pre><code>&gt;&gt;&gt; min(topkmerdict, key=topkmerdict.__getitem__)
'ATCCCAGCACTTTGGGAGGCCGAGGCAGGT'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you will see interesting results by changing:</p>
<pre><code>key=lambda x: x[1]
</code></pre>
<p>to: </p>
<pre><code>key=lambda x: x
</code></pre>
<p>This will sort your keys based on the entire key and not just the second character.</p>
</div>
<span class="comment-copy">please show what <code>topkmerdict</code> looks like</span>
<span class="comment-copy">Please read and follow the posting guidelines in the help documentation.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">I think you can fix this with one line to assign a value to <code>topkmerdict</code>, and then show the output you expected and what you got.</span>
<span class="comment-copy">@asiviero I have added what topkmerdict and what is returned with sorted line looks like</span>
<span class="comment-copy">@Prune Thanks, I added them. What I expect is to have a sorted by value data structure so that I can get the element with the minimum value</span>
<span class="comment-copy">sorted(topkmerdict,key=topkmerdict.__getitem__) did just what I wanted. Thanks for the explanation.</span>
