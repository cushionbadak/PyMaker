<div class="post-text" itemprop="text">
<p>I'm in a conundrum to decide what's the best way to insert a unique identifier for every row within a database containing over 60 million rows (and this is just one such dump, with similar sized ones arriving every month). </p>
<p>The table (which I later import into a python dictionary) looks like this right now:</p>
<pre><code>- id
- deviceTimeStamp
- data1
- data2
- ...
- dataN
</code></pre>
<p>So far my strategy has been running the gamut on a random number concatenated with the <code>deviceTimeStamp</code> and then SHA-256 hashing it. <em>(BTW, security is not an issue here, for the record. We're driving the rows into a mining engine, but as they are realtime IoT data, there are at times certain rows which have the same <code>deviceTimeStamp</code>. Also, <code>deviceTimeStamp</code> has milisecond information.)</em></p>
<p>I run a loop and do the following (adding only relevant parts of the script): </p>
<pre><code>import random
import hashlib
import mysql.connector   

for row in cursor: 
   rng = random.SystemRandom()
   randNo = rng.randint(100000, 999999)
   id_string = "%d-%s" % (randNo, mydict['deviceTimeStamp'])
   scan_idbytes = str.encode(id_string)
   unique_id = hashlib.sha256(scan_idbytes).hexdigest()
</code></pre>
<p>After doing this, I realized that it might be the case that we could have the same hex digest for different rows, which beats the purpose of having a unique ID column. Any ideas or recommendations? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>uuid.uuid4()</code> will do.</p>
<p>See <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">uuid</a> for more information.</p>
<pre><code>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; id_ = uuid.uuid4()
&gt;&gt;&gt; print(id_)
UUID('762008dd-7aa7-4537-bd30-3e2d5fc81362')
&gt;&gt;&gt; str(id_)
'762008dd-7aa7-4537-bd30-3e2d5fc81362'
&gt;&gt;&gt; uuid.uuid4().hex
'762008dd7aa74537bd303e2d5fc81362'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building upon comments above, I've created a unique identifier using <code>uuid</code> and then run a SHA-256 hex on it to obtain a (possibly) random number: </p>
<pre><code>mystring = str(rng.randint(100000, 999999)) + str(uuid.uuid1())
scan_idbytes = str.encode(mystring)
unique_id = hashlib.sha256(scan_idbytes).hexdigest()
</code></pre>
</div>
<span class="comment-copy">Why use a hash if it's just for a unique identifier? Use the row number</span>
<span class="comment-copy">@NickA: for future proofing purposes, there is a chance this data would be stored into a NoSQL database. And there might be collisions if we end up using the MySQL row number as the unique identifier</span>
<span class="comment-copy">Just add the current timestamp in the mix + a running counter</span>
<span class="comment-copy">How big are these rows? You could hash the row data, rather than just using a timestamp &amp; a random number.</span>
<span class="comment-copy">@PM2Ring: not that big, but excellent idea!</span>
