<div class="post-text" itemprop="text">
<p>I'd like to map over a property, so I tried</p>
<pre><code>map(lambda o: cls.prop(o), list_of_objects)
</code></pre>
<p>The property is defined in an external library as:</p>
<pre><code>@property
def prop(self):
</code></pre>
<p>However, I get a <code>TypeError</code> error.</p>
<p>I tested it "unmapped", and <code>cls.prop(an_object)</code> works just fine, as it should be, is equivalent to <code>an_object.prop</code>.</p>
<p>What am I doing wrong? How could I achieve this?</p>
<p>(I'm aware list comprehension <code>[o.prop for o in list_of_objects]</code>, but I want to learn and understand what went wrong above).</p>
</div>
<div class="post-text" itemprop="text">
<p>A property, accessed on the class, returns the <code>property</code> object itself, and not the wrapped function. A property wraps <em>three</em> functions, the getter, setter and deleter (each of these can be <code>None</code>):</p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     @property
...     def prop(self):
...         return 'bar'
...
&gt;&gt;&gt; Foo.prop
&lt;property object at 0x107102bd8&gt;
&gt;&gt;&gt; Foo.prop.fget, Foo.prop.fset, Foo.prop.fdel
(&lt;function Foo.prop at 0x1073366a8&gt;, None, None)
</code></pre>
<p>You need to access the <code>fget</code> attribute to get just the getter:</p>
<pre><code>map(lambda o: cls.prop.fget(o), list_of_objects)
</code></pre>
<p>However, this is overkill, just access the attribute directly:</p>
<pre><code>map(lambda o: o.prop, list_of_objects)
</code></pre>
<p>or use a <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="noreferrer"><code>operator.attrgetter()</code> object</a>:</p>
<pre><code>from operator import attrgetter

map(attrgetter('prop'), list_of_objects)
</code></pre>
<p>The latter has the advantage that the <code>map()</code> C loop won't have to step back into the Python interpreter loop to execute the <code>lambda</code> bytecode, <code>attrgetter()</code> can do it's job entirely in C making the combination faster.</p>
</div>
<span class="comment-copy">I strongly doubt that the unmapped access worked. You didn't have a property if it did.</span>
<span class="comment-copy"><code>map(lambda o: o.prop, list_of_objects)</code> I don't know how I did not see this! I feel stupid. Will use <code>attrgetter</code>, thanks for sharing the knowledge wrt. performance!</span>
