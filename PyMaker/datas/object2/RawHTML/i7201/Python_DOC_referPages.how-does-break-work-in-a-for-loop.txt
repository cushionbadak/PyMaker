<div class="post-text" itemprop="text">
<p>I am new in Python and I got confused about the way that "break" works in a for loop. There is an example in Python documentation(<a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="nofollow noreferrer">break and continue Statements</a>) which calculates prime numbers in range (2, 10):</p>
<pre><code>for n in range(2, 10):
   for x in range(2, n):
       if n % x == 0:
           print(n, 'equals', x, '*', n//x)
           break
   else:
       # loop fell through without finding a factor
       print(n, 'is a prime number')
</code></pre>
<p>and the output is:</p>
<pre><code>2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3
</code></pre>
<p>however when I outdent "break" in the code:</p>
<pre><code>for n in range(2, 10):
   for x in range(2, n):
       if n % x == 0:
           print(n, 'equals', x, '*', n//x)
       break
   else:
       # loop fell through without finding a factor
       print(n, 'is a prime number')
</code></pre>
<p>the output will be:</p>
<pre><code>2 is a prime number
4 equals 2 * 2
6 equals 2 * 3
8 equals 2 * 4
</code></pre>
<p>Can you please explain what happens in the code after I outdent "break"? Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Sure - Simply put out-denting the "Break" means it's no longer subject to the "if" that precedes it.</p>
<p>The code reads the if statement, acts on it, and then regardless of whether that if statement is true or false, it executes the "break" and drops out of the for loop.</p>
<p>In the first example the code only drops out of the 'for' loop if the n%x==0 statement is true.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try executing this code - it might make it more clear:</p>
<pre><code>for n in range(2, 10):
for x in range(2, n):
    if n % x == 0:
        print(n, 'equals', x, '*', n//x)
        break
    print('loop still running...')
else:
    # loop fell through without finding a factor
    print(n, 'is a prime number')
</code></pre>
<p>vs:</p>
<pre><code>for n in range(2, 10):
for x in range(2, n):
    if n % x == 0:
        print(n, 'equals', x, '*', n//x)
    break
    print('loop still running...')
else:
    # loop fell through without finding a factor
    print(n, 'is a prime number')
</code></pre>
<p>I'm sure the output would help you understand what is going on. #1 is breaking only if the if condition is satisfied, while #2 breaks always regardless of the if condition being satisfied or not.</p>
</div>
<span class="comment-copy">What precisely don't you understand? If it's not inside the <code>if</code> clause, it gets reached on the first iteration.</span>
<span class="comment-copy">Thanks, why it doesn't show 9?</span>
<span class="comment-copy">For the same reason it doesn't print any other odd number. It's not clear what's surprising you. Maybe run it through e.g. <a href="http://pythontutor.com/" rel="nofollow noreferrer">pythontutor.com</a></span>
<span class="comment-copy">Got it now. Thank you</span>
<span class="comment-copy">Thank you It's clear now.</span>
<span class="comment-copy">No worries. If this is satisfactory, feel free to flag it as having answered your question. If not let me know.</span>
<span class="comment-copy">Thank you for your help. The only question remains is why it doesn't show 9?</span>
<span class="comment-copy">It's because it breaks after only one go in the "for" loop. You start from 2, and go up to n. But on 2 (the first value) you break out of the loop. For 9, it needs to reach 3, but it never does.</span>
