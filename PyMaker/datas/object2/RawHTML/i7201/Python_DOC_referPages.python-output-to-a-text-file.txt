<div class="post-text" itemprop="text">
<p>I need to output the values that I calculate from my code to a text file in a certain format. First I will explain how my output from the python code look like and then explain how I want the text file to be.</p>
<pre><code>Column A
1
2
3
4
Column B
3
4
1
9
Column C
20
56
89
54
</code></pre>
<p>How I want the text file is as below</p>
<pre><code>Number    Column A    Column B     Column C
0         1           3            20
1         2           4            56
2         3           1            89
3         4           9            54
</code></pre>
<p>all the output on the screen are due to print statement of variable value that I am calculating using the code. Can you help me on how I can do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the items come in that order you will have to save it to a list, dictionary or something and then print. Look at this example:</p>
<pre><code>output = [[] for i in range(5)] # [[],[],[],[],[]]

for ind, item in enumerate(["Column A","1","2","3","4"]):
    print(item)
    output[ind].append(item)    

for ind, item in enumerate(["Column B","3","4","1","9"]):
    print(item)
    output[ind].append(item)

with open("output.txt", "w") as f:
    for row in output:
        f.write('\t'.join(row))
        f.write('\n')
</code></pre>
<p>prints:</p>
<pre><code>Column A
1
2
3
4
Column B
3
4
1
9
</code></pre>
<p>Output:</p>
<pre><code>[['Column A', 'Column B'], ['1', '3'], ['2', '4'], ['3', '1'], ['4', '9']]
</code></pre>
<p>"output.txt":</p>
<pre><code>Column A    Column B
1   3
2   4
3   1
4   9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have a <code>print()</code> statement that already does exactly what you want then you only have to redirect the output to a textfile.</p>
<pre><code>with open(r'path_to\my_file.txt','w') as textfile:
    ... your existing code goes here ...
    ...
    print ( ... whatever your print statement does ..., file=textfile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your <code>print</code> statement is creating that output exactly the way you want, I strongly suggest using the new-ish <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> module</a> (available in Python &gt;= 3.4) to create your file. It is great for working with path-like objects (both Windows and for other OSes). </p>
<p>If your file content is stored as a string in <code>data</code>, you can just do this: </p>
<pre><code>from pathlib import Path

file_path = Path('some_file.txt') # a relative file path - points within current directory
file_path.write_text(data) # overwrites existing file of same name
file_path.write_text(data, mode='a') # appends to an existing file of same name 
</code></pre>
<p>Here's a little <code>Path</code> tutorial.  </p>
<h2><a href="https://xkcd.com/1416/" rel="nofollow noreferrer">It's Paths - Paths all the way down</a></h2>
<p>To simplify: you can build up any path (directory and file path objects are treated exactly the same) as an object, which can be an <em>absolute path object</em> or a <em>relative path object</em>. </p>
<p>Simple displaying of some useful paths- such as the current working directory and the user home- works like this: </p>
<pre><code>from pathlib import Path

# Current directory (relative):
cwd = Path() # or Path('.')
print(cwd)

# Current directory (absolute):
cwd = Path.cwd()
print(cwd)

# User home directory:
home = Path.home()
print(home)

# Something inside the current directory
file_path = Path('some_file.txt') # relative path; or 
file_path = Path()/'some_file.txt' # also relative path
file_path = Path().resolve()/Path('some_file.txt') # absolute path
print(file_path)
</code></pre>
<p>To navigate down the file tree, you can do things like this. Note that the first object, <code>home</code>, is a <code>Path</code> and the rest are just strings: </p>
<pre><code>file_path = home/'Documents'/'project'/'data.txt' # or
file_path = home.join('Documents', 'project', 'data.txt')
</code></pre>
<p>To read a file located at a path, you can use its <code>open</code> method rather than the <code>open</code> function: </p>
<pre><code>with file_path.open() as f:
    dostuff(f)
</code></pre>
<p>But you can also just grab the text directly! </p>
<pre><code>contents = file_path.read_text()
content_lines = contents.split('\n')
</code></pre>
<p>...and WRITE text directly!</p>
<pre><code>data = '\n'.join(content_lines)
file_path.write_text(data) # overwrites existing file
</code></pre>
<p>Check to see if it is a file or a directory (and exists) this way: </p>
<pre><code>file_path.is_dir() # False
file_path.is_file() # True
</code></pre>
<p>Make a new, empty file without opening it like this (silently replaces any existing file): </p>
<pre><code>file_path.touch()
</code></pre>
<p>To make the file <em>only if it doesn't exist</em>, use <code>exist_ok=False</code>:</p>
<pre><code>try:
    file_path.touch(exist_ok=False)
except FileExistsError:
    # file exists
</code></pre>
<p>Make a new directory (under the current directory, <code>Path()</code>) like this: </p>
<pre><code>Path().mkdir('new/dir') # get errors if Path()/`new` doesn't exist
Path().mkdir('new/dir', parents=True) # will make Path()/`new` if it doesn't exist
Path().mkdir('new/dir', exist_ok=True) # errors ignored if `dir` already exists
</code></pre>
<p>Get the file extension or filename of a path this way:</p>
<pre><code>file_path.suffix # empty string if no extension
file_path.stem # note: works on directories too
</code></pre>
<p>Use <code>name</code> for the entire last part of the path (stem and extension if they are there):</p>
<pre><code>file_path.name # note: works on directories too
</code></pre>
<p>Rename a file using the <code>with_name</code> method (which returns the same path object but with a new filename):</p>
<pre><code>new_path = file_path.with_name('data.txt')
</code></pre>
<p>You can iterate through all the "stuff' in a directory like so using <code>iterdir</code>: </p>
<pre><code>all_the_things = list(Path().iterdir()) # returns a list of Path objects
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I searched and found that it was better for me to print the values in the terminal exactly like how I want in the text file. So I rewrote my code to display the values as one complete tab limited row and it worked. I appreciate all your help.
I am not sure if this can be marked as an answer. If not let me know, I will add as a comment.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>numpy.savetxt</code> and use the header-keyword</p>
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html" rel="nofollow noreferrer">https://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html</a></p>
</div>
<span class="comment-copy">Show us what you tried yourself and what your problem with that is.</span>
<span class="comment-copy">@IrmendeJong meant: post your code.</span>
<span class="comment-copy">Try to print the first line.</span>
<span class="comment-copy">My code is 200 lines long. Is it possible to attach it?</span>
<span class="comment-copy">Maybe you could add it to a gist and share the link: <a href="https://gist.github.com/" rel="nofollow noreferrer">gist.github.com</a></span>
<span class="comment-copy">While this is kind of interesting, it is not really relevant for solving the problem in the question.</span>
<span class="comment-copy">@mkrieger1 I disagree. The OP wanted to know how to write data to a file. That's the first thing I show how to do. My intention here is to "sell" the OP on using the <code>pathlib</code> module for future problems as well, because it is awesome and will save OP a ton of trouble. <code>pathlib</code> is still fairly new and most people don't seem to know about it.</span>
