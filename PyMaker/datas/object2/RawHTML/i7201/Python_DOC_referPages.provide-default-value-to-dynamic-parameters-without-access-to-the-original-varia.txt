<div class="post-text" itemprop="text">
<p>So this is the default behavior when you give a bad variable name:</p>
<pre><code>&gt;&gt;&gt; foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
&gt;&gt;&gt; 
</code></pre>
<p>what I'm looking for is something like:</p>
<pre><code>&gt;&gt;&gt; set_name_error_handling('assign_default',None)
&gt;&gt;&gt; foo
&gt;&gt;&gt;
</code></pre>
<p>(<code>foo</code> is automatically assigned None)</p>
<p>I'm using this on dynamic parameter handling and would like to use a behavior that if the parameter is not given, a default value is being used. And I have some code that I don't have control of that have used <code>None</code> handling. Is it possible for me to just add some dynamic header like below and save the mess by not changing all other code?</p>
<pre><code># This may work in python2 but not python3
def foo(self,params):
    local = locals()
    for key in params:
        local[key] = params[key]
    # Do important things onwards, cannot change
</code></pre>
<p>Edit: A way to do the specific problem above, is to provide a default option, let's say:</p>
<pre><code>options = foo.get_default_params()
# do whatsoever changes to modify options
result = foo.call(options)
</code></pre>
<p>This assumes that a default parameter table is available. Is it still doable when you don't even have the default parameter table or it's not possible to generate one (infinite possible parameters like print())?</p>
<p>Edit: To center the question into methodology I have rephrased the title and removed reference to override NameError.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think Python offers something like that. However, you could always do:</p>
<pre><code>try:
    foo
except NameError:
    foo = None

# do whatever with foo
</code></pre>
<p>If you are trying to define a function, I would define it like this:</p>
<pre><code>def baz_func(foo=None):
    # function body here
</code></pre>
<p>You can call this as both <code>baz_func()</code> or <code>baz_func(foo=5)</code>.</p>
</div>
<span class="comment-copy">This sounds like a terrible idea</span>
<span class="comment-copy">This is like running VB without putting "Options Explicit" at the beginning of your program.</span>
<span class="comment-copy">Yes, I think this is a terrible (development pattern wise) idea that will make errors undetectable, I just would like to know whether it is doable. A full refactoring could have been another way but it is costly.</span>
<span class="comment-copy">Assigning to <code>locals</code> entries doesn't even work, as the documentation <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">explicitly warns about</a>. Why aren't you just using the <code>get</code> method of <code>params</code>, or default argument values, or a <code>defaultdict(lambda: None)</code>, or any of the much better options than what you have here?</span>
<span class="comment-copy">There are definitely lots of better action if I have the control over that part of code (Or to say, I can refactor). Are there any good ways to deal with this when variables are already referenced as function parameters in old code and I can't change it but still want the benefits of a param dict?</span>
<span class="comment-copy">Why the downvote, though?</span>
<span class="comment-copy">Two reasons.  1. you already have <code>NameError</code> raised by <code>if not foo</code>.  2.  Actually, what he asked for <i>is possible</i> in Python.</span>
<span class="comment-copy">Understood. I edited my answer to what I originally meant to write, but I didn't know Python offered something like that. Thank you.</span>
<span class="comment-copy">Well, I was asking for if "you do not know the parameter list". Is it still possible?</span>
