<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1894269/convert-string-representation-of-list-to-list">Convert string representation of list to list</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have a string like</p>
<pre><code>"['foo', 'bar', 'baz', 0, 1]"
</code></pre>
<p>and want to convert this into a list like</p>
<pre><code>['foo', 'bar', 'baz', 0, 1]
</code></pre>
<p>I have tried various methods of slicing the string into a list, but while that does work, it is keeping <code>0</code> and <code>1</code> as strings, while also being unable to change easily for different lists.</p>
<p>Is there an easier way, aside from massive <code>for</code> loops and slicing? </p>
</div>
<div class="post-text" itemprop="text">
<p>Not that I'm advocating for the use of <code>eval</code>, you can just do</p>
<p><code>eval("['foo', 'bar', 'baz', 0, 1]")</code></p>
<p>I'll suggest that you instead use <code>ast.literal_eval</code>, a "safer" <code>eval</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If it just contains primitive objects (like strings, integers and such like) you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("['foo', 'bar', 'baz', 0, 1]")
['foo', 'bar', 'baz', 0, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider the <code>literal_eval</code> function for a direct conversion.  If you care to do your own processing, then try this:</p>
<pre><code>in_str = "['foo', 'bar', 'baz', 0, 1]"
no_bracket = in_str[1:-1]
print no_bracket
my_list = no_bracket.split(', ')
print my_list
</code></pre>
<p>Output:</p>
<pre><code>["'foo'", "'bar'", "'baz'", '0', '1']
</code></pre>
<p>Can you finish from there?  Each element is a string image of the value you want.  For the true strings, you'll have to strip off the extra quotation marks; for the numeric values, you'll have to use <code>int()</code>.</p>
<p>To tell which is which, try the <code>isdigit</code> method.</p>
</div>
<span class="comment-copy">I would ask "Why the downvote?" but I've realised by now that whenever I ask a question in SO that I'm guaranteed to lose some rep, so I won't bother. (Yes I appreciate the irony of bothering to write this.)</span>
<span class="comment-copy">downvote probably because this is a duplicate...</span>
<span class="comment-copy">@jmoon that's no reason to downvote. It's not my fault that someone else in the millions, yes millions, of SO users had the same problem, and a downvote should be used to suggest that the post can be improved, not that it's been done before.</span>
<span class="comment-copy">People abuse the downvote button. I'm not saying I downvoted (I see no reason to), but people do mistake the downvote button for flagging. Also suggesting that if you want to continue this discussion that this be moved to the meta.</span>
<span class="comment-copy">@jmoon no need to move this to Meta; I'm well aware that people don't know how to vote on SE. Just a shame really.</span>
<span class="comment-copy">You have my vote..when security is not an issue eval is a useful too...since you might not want to import an entire module. I also believe that this was the purpose eval built in module was made for.. is it not?</span>
