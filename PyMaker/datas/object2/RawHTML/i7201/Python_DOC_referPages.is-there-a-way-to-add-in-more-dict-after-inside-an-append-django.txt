<div class="post-text" itemprop="text">
<p>Apologize if the title is a bit hard to understand.
Not too sure how to explain it within a line.</p>
<p>What I want to do is...</p>
<p>actually I have this code</p>
<pre><code>    output = []

    objs = Model.objects.filter(abc=abc) # this would return a some queryset
    for obj in objs:
        output.append({
            TITLE: obj.title,
            TYPE: obj.type,
            # I want to add something here which is kind of like, if `obj.type` is 'hello' then print obj.word
        })

    return output
</code></pre>
<p>for example, if my <code>obj.type</code> is 'hello'</p>
<p>I want</p>
<pre><code>        output.append({
            TITLE: obj.title,
            TYPE: obj.type,
            WORD: obj.word,
        })
</code></pre>
<p>if my <code>obj.type</code> is 'world'</p>
<p>I want</p>
<pre><code>        output.append({
            TITLE: obj.title,
            TYPE: obj.type,
            NADA: obj.nada,
        })
</code></pre>
<p>I thought of doing something such as</p>
<pre><code>    output = []

    objs = Model.objects.filter(abc=abc) # this would return a some queryset
    for obj in objs:
        if obj.type == 'hello':
            output.append({
                TITLE: obj.title,
                TYPE: obj.type,
                WORD: obj.word,
            })
        if obj.type == 'world':
            output.append({
                TITLE: obj.title,
                TYPE: obj.type,
                NADA: obj.nada,
            })
    return output
</code></pre>
<p>the above should work but if there is another better way, I would love to know another way of doing this because the above seems too redundant.</p>
<p>Thanks in advance for any advices</p>
</div>
<div class="post-text" itemprop="text">
<p>Well what you have seems alright, but if you really hate code repetition, you could always make the dictionnary outside the if first. </p>
<pre><code>output = []
objs = Model.objects.filter(abc=abc) # this would return a some queryset
for obj in objs:
    current_dict = {
        "TITLE": obj.title,
        "TYPE": obj.type,
    }
    if obj.type == "world":
        current_dict["NADA"] = obj.nada
    else:
        current_dict["WORD"] = obj.world

    output.append(current_dict)

return output
</code></pre>
<p>But you might be slowing things down a little.. (Though time is won by not doing the second check :P) </p>
<p>Use timeit (<a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html</a>) to see if the "beautiful code" is worth the time, maybe it doesn't change much for your use case. </p>
<p>Also, for one-liner lovers : </p>
<p>As of python 3.5 and like suggested in <a href="https://www.python.org/dev/peps/pep-0448" rel="nofollow noreferrer"> Pep 448</a>, you can do: </p>
<pre><code>return [
    {
        **{
            "TITLE": obj.title,
            "TYPE": obj.type
        },
        **{"NADA": obj.nada} if obj.type == "word" else **{"WORD": obj.word}
    } for obj in Model.objects.filter(abc=abc)
]
</code></pre>
<p>Which can also be put in a single line. 
If you really love conciseness, that is, but some will argue it's wayyy worse than what you had. ^-^</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>output = []

objs = Model.objects.filter(abc=abc)  # this would return a some queryset

for obj in objs:

    start_dict = {
        'TITLE': obj.title,
        'TYPE': obj.type
    }

    if obj.type == 'hello':
        start_dict['WORD'] = obj.word
    elif obj.type == 'world':
        start_dict['NADA'] = obj.nada

    output.append(start_dict)

return output
</code></pre>
</div>
<span class="comment-copy">could you please just lower obj.Nada case it hurts my pep8 eyes :) also one should be word</span>
<span class="comment-copy">Ahah indeed, was busy editing answer and trying to understand quoteless dictionnary. &gt;&lt;</span>
<span class="comment-copy">@Alceste_ other than hating to see the duplicates, I thought would be faster too especially if I have 15 fields instead of just two fields.  So it would seem more likely what I did before would give it a better time performance?</span>
<span class="comment-copy">Well what you did was double-checking the type, while you could simply have done an if-else. So the time will probably not be much different.   However, if you were also using if-else statement, appending to a dict might be slower.  My last approach might be very well optimized in late python, you should try to see if it gives better results. (If you don,t want to use timeit, which can seem heavy for little tests, you can use <code>from time import clock</code> and do the difference between startpoint and after thousand calls.)</span>
<span class="comment-copy">@Alceste_ Python 3.5 you mean :P</span>
