<div class="post-text" itemprop="text">
<p>Numpy provides both <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.absolute.html" rel="noreferrer"><code>np.absolute</code></a> and the alias <a href="https://github.com/numpy/numpy/blob/698ddea57384e12bbdea18592b36b33566ca49b0/numpy/core/__init__.py#L60" rel="noreferrer"><code>np.abs</code></a> defined via</p>
<pre><code>from .numeric import absolute as abs
</code></pre>
<p>which seems to be in obvious violation of <a href="https://www.python.org/dev/peps/pep-0020/" rel="noreferrer">the zen of python</a>:</p>
<blockquote>
<p>There should be one-- and preferably only one --obvious way to do it.</p>
</blockquote>
<p>So I'm guessing that there is a good reason for this.</p>
<p>I have personally been using <code>np.abs</code> in almost all of my code and looking at e.g. the number of search results for <a href="https://www.google.se/search?safe=off&amp;q=site%3Ahttps%3A%2F%2Fstackoverflow.com+%22np.abs%22&amp;oq=site%3Ahttps%3A%2F%2Fstackoverflow.com+%22np.abs%22&amp;gs_l=psy-ab.3...3492.3722.0.4098.3.3.0.0.0.0.94.204.3.3.0....0...1.1.64.psy-ab..0.0.0.6tR-xgAcgXk" rel="noreferrer">np.abs</a> vs <a href="https://www.google.se/search?safe=off&amp;q=site%3Ahttps%3A%2F%2Fstackoverflow.com+%22np.absolute%22&amp;oq=site%3Ahttps%3A%2F%2Fstackoverflow.com+%22np.absolute%22&amp;gs_l=psy-ab.3...88032.88555.0.88657.5.4.0.0.0.0.0.0..0.0....0...1.1.64.psy-ab..5.0.0.x7feo4fakBo" rel="noreferrer">np.absolute</a> on Stack Overflow it seems like an overwhelming majority does the same (2130 vs 244 hits).</p>
<p>Is there any reason i should preferentially use <code>np.absolute</code> over <code>np.abs</code> in my code, or should I simply go for the more "standard" <code>np.abs</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's likely because there a built-in functions with the same name, <a href="https://docs.python.org/library/functions.html#abs" rel="noreferrer"><code>abs</code></a>. The same is true for <code>np.amax</code>, <code>np.amin</code> and <code>np.round_</code>.</p>
<p>The aliases for the NumPy functions <a href="https://github.com/numpy/numpy/blob/v1.13.1/numpy/core/__init__.py#L59-L60" rel="noreferrer"><code>abs</code>, <code>min</code>, <code>max</code> and <code>round</code></a> are only defined in the top-level package.</p>
<p>So <code>np.abs</code> and <code>np.absolute</code> are completely identical. It doesn't matter which one you use.</p>
<p>There are several advantages to the short names: They are shorter and they are known to Python programmers because the names are identical to the built-in Python functions. So end-users have it easier (less to type, less to remember).</p>
<p>But there are reasons to have different names too: NumPy (or more generally 3rd party packages) sometimes need the Python functions <code>abs</code>, <code>min</code>, etc. So inside the package they define functions with a different name so you can still access the Python functions - and just in the top-level of the package you expose the "shortcuts". Note: Different names are not the only available option in that case: One could work around that with the Python module <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer"><code>builtins</code></a> to access the built-in functions if one shadowed a built-in name.</p>
<p>It might also be the case (but that's pure speculation on my part) that they originally only included the long-named functions <code>absolute</code> (and so on) and only added the short aliases later. Being a large and well-used library the NumPy developers don't remove or deprecate stuff lightly. So they may just keep the long names around because it could break old code/scripts if they would remove them.</p>
</div>
<span class="comment-copy">I think this is purely a matter of preference - the functionality <i>should</i> be completely identical</span>
<span class="comment-copy">Then why does <code>np.absolute</code> exist?</span>
<span class="comment-copy"><code>np.absolute</code> was introduced first in the API.  Rather than breaking code, they aliased it to <code>np.abs</code></span>
<span class="comment-copy">The plain python <code>abs(x)</code> also works, since it delegates the task to the <code>x.__abs__</code> method.</span>
<span class="comment-copy">Why builtin <code>abs</code> works, <a href="https://stackoverflow.com/q/20953127">stackoverflow.com/q/20953127</a></span>
<span class="comment-copy">Hmm... what you write is certainly true for <code>abs</code>/<code>absolute</code>, but <code>np.maximum</code> and <code>np.max</code> are not identical. The former operates element-wise on two arrays and the latter is a reduction operation along an axis of one input.</span>
<span class="comment-copy">@kazemakase You're right. I was thinking about the wrong functions. I corrected the names (<code>amax</code> and <code>amin</code> instead of <code>maximum</code> and <code>minimum</code>). Thank you :)</span>
<span class="comment-copy">Yep, <code>np.amax is np.max</code> :)  (I didn't even know about <code>amax</code>/<code>amin</code>)</span>
<span class="comment-copy"><i>"But there are reasons to have different names"</i> That's not actually the best way how to avoid name shadowing, is it? One can simply prepend a module name in front of the function name.</span>
<span class="comment-copy">@Jeyekomon I didn't mean to imply it's the best approach or even a good one. It's just one possibility. I guess the question how to approach that simply cannot be changed anymore because NumPy tries to be backwards-compatible. So any discussion about which one would be better/the best makes no sense in that context anymore.</span>
