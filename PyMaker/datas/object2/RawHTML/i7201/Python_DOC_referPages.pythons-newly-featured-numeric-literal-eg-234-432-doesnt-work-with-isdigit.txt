<div class="post-text" itemprop="text">
<p>I always understood that if something can be converted to integer (ie; something is string representation of numeric), isdigit() return True. This is not the case with the new feature. Here is the sample below:</p>
<p><a href="https://i.stack.imgur.com/80YER.png" rel="nofollow noreferrer">Code Sample</a></p>
<p>But why?</p>
</div>
<div class="post-text" itemprop="text">
<p>To answer your question, looking at the python 3.6 <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">documentation</a> for the <code>isdigit</code> method.</p>
<blockquote>
<p>Return true if all characters in the string are digits and there is at least one character, false otherwise.</p>
</blockquote>
<p>Since an underscore isn't a digit, the new format will not work well with the current implementation of <code>isdigit</code>. As I commented before, the immediate work around would be: <code>str.replace("_", "").isdigit()</code> where <strong>str</strong> is string containing the newly formatted number, while avoiding a try-except block with <code>int</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You also need to take out the negative sign for negative integers. This way negative integers will work as well. <code>str.replace("_", "").lstrip("-").isdigit()</code>.</p>
</div>
<span class="comment-copy"><code>isdigit</code> does not mean "valid integer literal". <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">Read the docs.</a></span>
<span class="comment-copy">Which python version you are using ?</span>
<span class="comment-copy">If you want to know whether you can call <code>int</code> on something, just call <code>int</code> on it.</span>
<span class="comment-copy">Usually i don't use try except, but isdigit to check integers. Recently, these integers have been modified, in my project, to be in numeric literal form so that they don't look confusing and suddenly the project falls apart. That's why I asked why.  Is there isdigit equivalence that works in both cases?</span>
<span class="comment-copy">I know it's not much of an answer but str.replace("_", "").isdigit() if you want to avoid a try-except would be an easy work around.</span>
<span class="comment-copy">And then you get True for '1-', or for '--1'.</span>
<span class="comment-copy">That is True...</span>
<span class="comment-copy">I changed it to .strip which will help against --1 cases</span>
<span class="comment-copy">This still gives True for '--1'.</span>
<span class="comment-copy">It strips all of the negatives from the beggining</span>
