<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13646245/is-it-possible-to-make-abstract-classes-in-python">Is it possible to make abstract classes in Python?</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I use pep8 in visual studio code and I just tried to write some abstract classes.</p>
<p>The problem is I get the error <code>[pylint] E1101:Instance of 'MyAbstract' has no 'child_method' member</code> because pep8 does not realise that the method is well defined, but in the child classes.</p>
<p>To illustrate my problem here is a code snippet that is reducted to the minimum for clarity:</p>
<pre><code>class MyAbstract:

    def some_method(self):
        newinfo = self.child_method()
        # use newinfo 

class MyChild(MyAbstract):

    def child_method(self):
        # Do something in a way

class OtherChild(MyAbstract):

    def child_method(self):
        # Do the same thing in a different way
</code></pre>
<p><strong>So my questions are:</strong></p>
<ul>
<li>Is it ok to write classes like this? </li>
<li>How would you solve the error? (disable error, use another pattern, ...)</li>
</ul>
<p><strong>Clarification</strong></p>
<p>The MyAbstract class shouldn't be instanciated, and the child classes will inherit the <code>some_method</code>. The idea is to use it on child class instances.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want <code>MyAbstract</code> to be an abstract class with abstract method <code>child_method</code>, Python has a way of expressing that in the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer"><code>abc</code></a> module:</p>
<pre><code>import abc

class MyAbstract(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def child_method(self):
        pass

    def some_method(self):
        newinfo = self.child_method()
        do_whatever_with(newinfo)
</code></pre>
<p>Your linter will no longer complain about the nonexistent method, and as a bonus, Python will detect attempts to instantiate a class with unimplemented abstract methods.</p>
</div>
<span class="comment-copy">you should define the method on the abstract class; either have it be an empty method using <code>pass</code> if you don't intend to require the child to override it, or have it throw an error if you do</span>
<span class="comment-copy">thank you for thjis suggestion, will be easier to do than to add rule deactivations everywhere!</span>
<span class="comment-copy">Indeed, I just read the answer that you indicated and it indirectly solves my problem. Thank you!</span>
