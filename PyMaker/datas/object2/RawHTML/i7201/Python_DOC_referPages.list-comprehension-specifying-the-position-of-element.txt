<div class="post-text" itemprop="text">
<p>Here is a list</p>
<pre><code>l = ['Bear', 'Apple', 'Bread', 'Apes', 'Bones', 'Axes']
</code></pre>
<p>I want to sort this list through list comprehension. Putting words starting with 'A' in front and with 'B' at the end. I want the code to be in the fashion below -</p>
<pre><code>l = [putfirst(i) if i.startswith('A') else putlast(i) else for i in l] 
</code></pre>
<p>After doing this I want it to be like  </p>
<pre><code>l = ['Apple','Apes','Axes','Bear','Bread','Bones']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions process things in the same order your input iterable produces them. They <em>can't be used to re-order the entries</em>.</p>
<p>Use <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> or <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort()</code></a> instead:</p>
<pre><code>sorted(l, key=lambda word: word[0])
l.sort(key=lambda word: word[0])
</code></pre>
<p><code>sorted()</code> produces a new list, <code>list.sort()</code> sorts an existing list in-place.</p>
<p>The <code>key</code> callable here tells <code>sorted()</code> to only use the first letter when deciding to sort. Words with the same starting letter are left in the same relative order:</p>
<pre><code>&gt;&gt;&gt; l = ['Bear', 'Apple', 'Bread', 'Apes', 'Bones', 'Axes']
&gt;&gt;&gt; sorted(l, key=lambda word: word[0])
['Apple', 'Apes', 'Axes', 'Bear', 'Bread', 'Bones']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>sorted()</code> function:</p>
<pre><code>l = ['Bear','Apple','Bread','Apes','Bones','Axes']

new_l = sorted(l, key=lambda x: x[0])
</code></pre>
<p>Output:</p>
<pre><code>['Apple', 'Apes', 'Axes', 'Bear', 'Bread', 'Bones']
</code></pre>
</div>
<span class="comment-copy">What do you mean <i>"preserve the order of the list"</i>? The order of the original list <code>l</code> <i>is</i> preserved. <code>sorted()</code> returns a <i><b>new</b></i> list, so <code>l</code> is unaffected. The <code>sort</code> method of list however, <i>does</i> change the list.</span>
<span class="comment-copy">You <b>do</b> want to sort. Sorting is altering the order based on certain rules. You are sorting on the first letter <i>only</i>.</span>
<span class="comment-copy">You mean you don't want to alphabetize the list of words.  @Martin Pieters answer does what you want with Python's sorting functions, where you can specify the type of sorting you'd like.</span>
<span class="comment-copy">If it's all about <code>A</code>'s and <code>B</code>'s then you could you filter them out and join: <code>[x for x in l if x.startswith('A')] + [x for x in l if not x.startswith('A')]</code>.</span>
<span class="comment-copy">@AshwiniChaudhary I know the other methods. I specifically wanted to know if there is possibility in list comprehension to put elements at specific place.</span>
<span class="comment-copy">Thanks ! I couldn't phrase the question correctly. But got the answer from your first line.</span>
