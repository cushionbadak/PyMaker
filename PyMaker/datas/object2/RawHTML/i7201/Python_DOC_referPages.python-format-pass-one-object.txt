<div class="post-text" itemprop="text">
<p>If i define the below custom class in Python:</p>
<pre><code>class Test:
    hey = 'ho'
    yo = 'go'
    fo = 'sho'
</code></pre>
<p>Is there any way when using the string <code>format()</code> method to only have to pass in my object once and to then access that in all the arguments. Ideally I would like to be able to do something like this:</p>
<pre><code>test_class = Test()
print "Hey {0.hey}, let's {1.yo}. Fo' {2.sho}".format(test_class)
</code></pre>
<p>But I have to do this:</p>
<pre><code>test_class = Test()
print "Hey {0.hey}, let's {1.yo}. Fo' {2.sho}".format(test_class, test_class, test_class)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you found out for yourself, you can use keyword arguments, but you don't even have to do that:</p>
<pre><code>In [4]: print("Hey {0.hey}, let's {0.yo}. Fo' {0.fo}".format(t))
Hey ho, let's go. Fo' sho

In [5]: class Test:
   ...:     hey = 'ho'
   ...:     yo = 'go'
   ...:     fo = 'sho'
   ...:

In [6]: t = Test()

In [7]: print("Hey {0.hey}, let's {0.yo}. Fo' {0.fo}".format(t))
Hey ho, let's go. Fo' sho
</code></pre>
<p>The <code>0</code> refers to the <em>zeroth</em> argument to <code>format</code>, the problem was you had no 1st and second argument, because you <em>didn't need it</em>.</p>
<h2>Warning as an aside:</h2>
<p>Also, since you seem to be coming to python from other languages, you might be making a common mistake. Note that the way you have defined your class;</p>
<pre><code>class Test:
    hey = 'ho'
    yo = 'go'
    fo = 'sho'
</code></pre>
<p>uses only <em>class-level</em> variables, which will act like <em>static members</em> to borrow terminology from other languages. In other words, <code>hey</code>, <code>yo</code>, and <code>fo</code> are not <em>instance attributes</em>, although your instances have access to the class-level namespace. Check out <a href="https://stackoverflow.com/a/69067/5014455">this answer</a>. Of course, this doesn't matter for the purposes of this question, but it can lead to bugs if you don't understand the semantics of the class definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>As soon as I posted this I realised I could just keyword arguments.</p>
<pre><code>test_class = Test()
print "Hey {my_class.hey}, let's {my_class.yo}. Fo' {my_class.sho}".format(my_class=test_class)
</code></pre>
<p>In addition, as per my original question this is possible by just reusing the <code>0</code> positional argument as below:</p>
<pre><code>test_class = Test()
print "Hey {0.hey}, let's {0.yo}. Fo' {0.sho}".format(test_class)
</code></pre>
<p>Also, as pointed out by Ryan in the comments Python 3.6+ comes with the new f-string, which means I could also do this:</p>
<pre><code>test_class = Test()
print(f"Hey {test_class.hey}, let's {test_class.yo}. Fo' {test_class.sho}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>{0.hey} is referring to the 'hey' attribute of the first argument passed to format.</p>
<p>So you just have to refer to the correct argument:</p>
<pre><code>test_class = Test()
print "Hey {0.hey}, let's {0.yo}. Fo' {0.fo}".format(test_class)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for posterity, as said in the comments, anyone using Python 3.6 and greater can make use of the new <em>format string</em> literals specified in <a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a>:</p>
<pre><code>class Test:
    hey = 'ho'
    yo = 'go'
    fo = 'sho'

test = Test()
print(f"Hey {test.hey}, let's {test.yo}. Fo' {test.fo}")
# Hey ho, let's go. Fo' sho
</code></pre>
<p>More format strings(f-strings for short) can be found in the <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="nofollow noreferrer"><em>Formatted string literals</em></a> section of Python documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you change <code>1</code> and <code>2</code> by <code>0</code> you reuse the same argument and <code>format</code> does what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can also use a dict to pass values:</p>
<pre><code>dict_ = {
    "hey": 'ho',
    "yo":'go',
    "fo":'sho'
    }

print("Hey {0[hey]}, let's {0[yo]}. Fo' {0[fo]}".format(dict_))
</code></pre>
<p>Or an ordered dict:</p>
<pre><code>from collections import OrderedDict

dict_ = OrderedDict([('hey','ho'),('yo','go'),('fo','sho')])

print("Hey {}, let's {}. Fo' {}".format(*dict_.values()))
print("Hey {0}, let's {1}. Fo' {2}".format(*dict_.values()))
</code></pre>
</div>
<span class="comment-copy">Just reuse 0 that should do it</span>
<span class="comment-copy"><a href="https://cito.github.io/blog/f-strings/" rel="nofollow noreferrer">fast forward to 3.6</a></span>
<span class="comment-copy">@RyanHaining - they look cool. Shame I'm stuck on 2.7 :-(</span>
<span class="comment-copy">Thanks for the thorough answer @juanpa.arrivillaga. I have been caught out by class level variables before but this was more a question of formatting than the class semantics themselves, but thanks for the insight - always nice to get a reminder!</span>
