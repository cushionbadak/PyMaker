<div class="post-text" itemprop="text">
<p><code>str.zfill</code> is a useful tool to pad strings with leading zeros:</p>
<pre><code>In [1]: '123'.zfill(5)
Out[1]: '00123'
</code></pre>
<p>However, is there a more generic version that will take any filler character and pad a string with it? I'm looking for something like this:</p>
<pre><code>In []: 'txt'.foo(' ', 5)
Out[]: '   txt'

In []: '12'.foo('#', 5)
Out[]: '###12'
</code></pre>
<p>Does such a function exist? </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there are the string justification methods, <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="nofollow noreferrer"><code>ljust</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>rjust</code></a>.</p>
<pre><code>&gt;&gt;&gt; '12'.rjust(5, '#')
'###12'
&gt;&gt;&gt; 'txt'.rjust(5, ' ')
'  txt'
&gt;&gt;&gt; '12'.ljust(5, '#')
'12###'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Implementing your own version should be straightforward enough:</p>
<pre><code>def xfill(string, num, filler='0'):
    if len(filler) != 1:
        raise TypeError('xfill() expected a character, but string of length %d found' %len(filler))
    return filler * max(0,  num - len(string)) + string
</code></pre>
<p>The <code>assert</code> ensures the filler is a single, valid character only.</p>
<hr/>
<p><code>xfill(string, num [, filler])</code>:</p>
<ol>
<li><p><code>string</code>: the string to be padded</p></li>
<li><p><code>num</code>: the total width of the field (similar to <code>str.zfill</code>)</p></li>
<li><p><code>filler</code>: to pad with. Defaults to <code>0</code> to mimic <code>str.zfill</code> functionality</p></li>
</ol>
<hr/>
<p>Examples:</p>
<pre><code>In [321]: xfill('123', 5)
Out[321]: '00123'

In [322]: xfill('123', 5, '#')
Out[322]: '##123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add a little more flexibility for alternative patterns instead of just a character:</p>
<pre><code>def filler(string, pattern, width):
    left_filler = (pattern * width)[:max(0, width - len(string))]
    return left_filler + string

&gt;&gt;&gt; filler(string='some text', pattern='*.', width=15)
# Output:
# '*.*.*.some text'

&gt;&gt;&gt; filler(string='some text', pattern='*.', width=14)
# Output:
# '*.*.*some text'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you need is simple padding, I'd go with  @PM2Ring's answer, but there is another, more versatile way, using the <code>str.format</code> method (Python 2.6 onward). This method allows you to interpolate the format specifier by nesting the replacement fields:</p>
<pre><code>'{string:{fill}&gt;{num}}'.format(string=string, fill=fill, num=num)
</code></pre>
<p>Replace <code>&gt;</code> with <code>&lt;</code> if you need to left-align the string instead.</p>
</div>
<span class="comment-copy">I'm pretty amazed this question hasn't been asked before...</span>
<span class="comment-copy">@SwiftsNamesake I'm surprised vaultah hasn't come swooping down on his magical flying carpet with his dupe hammer.</span>
<span class="comment-copy">This is nice. I did not know <code>str.xjust</code> took a second parameter!</span>
<span class="comment-copy">@COLDSPEED If only there was a Hoogle for Python</span>
<span class="comment-copy"><code>str.format</code> works too</span>
<span class="comment-copy">@SwiftsNamesake Maybe... I don't know how to use format that way :)</span>
<span class="comment-copy">@SwiftsNamesake Turn it into an answer!</span>
<span class="comment-copy">Done. Gobbledygook to please the SO algorithm.</span>
<span class="comment-copy">The <code>str.format</code> method was added in 2.6, and I just tested your code successfully in 2.6.6.</span>
<span class="comment-copy">Yes, <code>str.format</code> has been around for a while, but I don't think it's always supported 'dynamic' specifiers.</span>
<span class="comment-copy">I'm pretty sure that <code>str.format</code> has always supported nested replacement fields; they're mentioned in <a href="https://docs.python.org/2.6/library/string.html#format-string-syntax" rel="nofollow noreferrer">the 2.6 docs</a>; FWIW, <code>str.format</code> was back-ported to 2.6 from Python 3.</span>
<span class="comment-copy">Alright, I'll edit then.</span>
