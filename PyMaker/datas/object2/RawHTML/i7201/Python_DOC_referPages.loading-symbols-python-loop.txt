<div class="post-text" itemprop="text">
<p>The question is in the title.</p>
<p>I'd like to do it in  <a class="post-tag" href="/questions/tagged/python" rel="tag" title="show questions tagged 'python'">python</a>. What I'd like to do in this example in <a class="post-tag" href="/questions/tagged/c" rel="tag" title="show questions tagged 'c'">c</a>:</p>
<pre class="lang-c prettyprint-override"><code>#include &lt;stdio.h&gt;

int main() {
    int i;
    for (i=0; i&lt;10; i++) printf(".");
    return 0;
}
</code></pre>
<p>Output:</p>
<pre><code>..........
</code></pre>
<p>In Python:</p>
<pre><code>&gt;&gt;&gt; for i in xrange(0,10): print '.'
.
.
.
.
.
.
.
.
.
.
&gt;&gt;&gt; for i in xrange(0,10): print '.',
. . . . . . . . . .
</code></pre>
<p>In Python <code>print</code> will add a <code>\n</code> or a space, how can I avoid that? Now, it's just an example. Don't tell me I can first build a string then print it. I'd like to know how to "append" strings to <code>stdout</code>.</p>
</div>
<div class="post-text" itemprop="text">
<h2>General way</h2>
<pre><code>import sys
sys.stdout.write('.')
</code></pre>
<p>You may also need to call</p>
<pre><code>sys.stdout.flush()
</code></pre>
<p>to ensure <code>stdout</code> is flushed immediately.</p>
<h2>Python 2.6+</h2>
<p>From Python 2.6 you can import the <code>print</code> function from Python 3:</p>
<pre><code>from __future__ import print_function
</code></pre>
<p>This allows you to use the Python 3 solution below.</p>
<h2>Python 3</h2>
<p>In Python 3, the <code>print</code> statement has been changed into a function. In Python 3, you can instead do:</p>
<pre><code>print('.', end='')
</code></pre>
<p>This also works in Python 2, provided that you've used <code>from __future__ import print_function</code>.</p>
<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>
<pre><code>print('.', end='', flush=True)
</code></pre>
<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>.</p>
<h2>Sources</h2>
<ol>
<li><a href="https://docs.python.org/2/library/functions.html#print" rel="noreferrer">https://docs.python.org/2/library/functions.html#print</a></li>
<li><a href="https://docs.python.org/2/library/__future__.html" rel="noreferrer">https://docs.python.org/2/library/__future__.html</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#print" rel="noreferrer">https://docs.python.org/3/library/functions.html#print</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>It should be as simple as described at this link by Guido Van Rossum:</p>
<p>Re: How does one print without a c/r ?</p>
<p><a href="http://legacy.python.org/search/hypermail/python-1992/0115.html" rel="noreferrer">http://legacy.python.org/search/hypermail/python-1992/0115.html</a></p>
<blockquote>
<p>Is it possible to print something but not automatically have a
  carriage return appended to it ?</p>
</blockquote>
<p>Yes, append a comma after the last argument to print. For instance,
this loop prints the numbers 0..9 on a line separated by spaces. Note
the parameterless "print" that adds the final newline:</p>
<pre><code>&gt;&gt;&gt; for i in range(10):
...     print i,
... else:
...     print
...
0 1 2 3 4 5 6 7 8 9
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Note: The title of this question used to be something like "How to printf in python?"</em></p>
<p>Since people may come here looking for it based on the title, Python also supports printf-style substitution:</p>
<pre><code>&gt;&gt;&gt; strings = [ "one", "two", "three" ]
&gt;&gt;&gt;
&gt;&gt;&gt; for i in xrange(3):
...     print "Item %d: %s" % (i, strings[i])
...
Item 0: one
Item 1: two
Item 2: three
</code></pre>
<p>And, you can handily multiply string values:</p>
<pre><code>&gt;&gt;&gt; print "." * 10
..........
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the python3-style print function for python2.6+   <em>(will also break any existing keyworded print statements in the same file.)</em></p>
<pre><code># for python2 to use the print() function, removing the print keyword
from __future__ import print_function
for x in xrange(10):
    print('.', end='')
</code></pre>
<p>To not ruin all your python2 print keywords, create a separate <code>printf.py</code> file</p>
<pre><code># printf.py

from __future__ import print_function

def printf(str, *args):
    print(str % args, end='')
</code></pre>
<p>Then, use it in your file</p>
<pre><code>from printf import printf
for x in xrange(10):
    printf('.')
print 'done'
#..........done
</code></pre>
<p>More examples showing printf style</p>
<pre><code>printf('hello %s', 'world')
printf('%i %f', 10, 3.14)
#hello world10 3.140000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not the answer to the question in the title, but it's the answer on how to print on the same line:</p>
<pre><code>import sys
for i in xrange(0,10):
   sys.stdout.write(".")
   sys.stdout.flush()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The new (as of Python 3.0) <code>print</code> function has an optional <code>end</code> parameter that lets you modify the ending character. There's also <code>sep</code> for separator.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using functools.partial to create a new function called printf</p>
<pre><code>&gt;&gt;&gt; import functools

&gt;&gt;&gt; printf = functools.partial(print, end="")

&gt;&gt;&gt; printf("Hello world\n")
Hello world
</code></pre>
<p>Easy way to wrap a function with default parameters.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just add <code>,</code> in the end of <code>print</code> function so it won't print on new line.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> function in python automatically generates a new line. You could try:</p>
<p><code>print("Hello World", end="")</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it with <code>end</code> argument of <code>print</code>. In Python3, <code>range()</code> returns iterator and <code>xrange()</code> doesn't exist.</p>
<pre><code>for i in range(10): print('.', end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Code for Python 3.6.1</strong></p>
<pre><code>for i in range(0,10): print('.' , end="")
</code></pre>
<p><strong>Output</strong></p>
<pre><code>..........
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>import sys
import time
# Keeps the initial message in buffer.
sys.stdout.write("\rfoobar bar black sheep")
sys.stdout.flush()
# Wait 2 seconds
time.sleep(2)
# Replace the message with a new one.
sys.stdout.write("\r"+'hahahahaaa             ')
sys.stdout.flush()
# Finalize the new message by printing a return carriage.
sys.stdout.write('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, printing is a function. When you call</p>
<pre><code>print ('hello world')
</code></pre>
<p>Python translates it to</p>
<pre><code>print ('hello world', end = '\n')
</code></pre>
<p>You can change end to whatever you want.</p>
<pre><code>print ('hello world', end = '')
print ('hello world', end = ' ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i recently had the same problem..</p>
<p>i solved it by doing:</p>
<pre><code>import sys, os

# reopen stdout with "newline=None".
# in this mode,
# input:  accepts any newline character, outputs as '\n'
# output: '\n' converts to os.linesep

sys.stdout = os.fdopen(sys.stdout.fileno(), "w", newline=None)

for i in range(1,10):
        print(i)
</code></pre>
<p>this works on both unix and windows ... have not tested it
on macosx ...</p>
<p>hth</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the same in python3 as follows :</p>
<pre><code>#!usr/bin/python

i = 0
while i&lt;10 :
    print('.',end='')
    i = i+1
</code></pre>
<p>and execute it with <code>python filename.py</code> or <code>python3 filename.py</code></p>
</div>
<div class="post-text" itemprop="text">
<p>@lenooh satisfied my query. I discovered this article while searching for 'python suppress newline'. I'm using IDLE3 on Raspberry Pi to develop Python 3.2 for PuTTY. I wanted to create a progress bar on the PuTTY command line. I didn't want the page scrolling away. I wanted a horizontal line to re-assure the user from freaking out that the program hasn't cruncxed to a halt nor been sent to lunch on a merry infinite loop - as a plea to 'leave me be, I'm doing fine, but this may take some time.' interactive message - like a progress bar in text.</p>
<p>The <code>print('Skimming for', search_string, '\b! .001', end='')</code> initializes the message by preparing for the next screen-write, which will print three backspaces as ⌫⌫⌫ rubout and then a period, wiping off '001' and extending the line of periods. After <code>search_string</code> parrots user input, the <code>\b!</code> trims the exclamation point of my <code>search_string</code> text to back over the space which <code>print()</code> otherwise forces, properly placing the punctuation. That's followed by a space and the first 'dot' of the 'progress bar' which I'm simulating. Unnecessarily, the message is also then primed with the page number (formatted to a length of three with leading zeros) to take notice from the user that progress is being processed and which will also reflect the count of periods we will later build out to the right.</p>
<pre><code>import sys

page=1
search_string=input('Search for?',)
print('Skimming for', search_string, '\b! .001', end='')
sys.stdout.flush() # the print function with an end='' won't print unless forced
while page:
    # some stuff…
    # search, scrub, and build bulk output list[], count items,
    # set done flag True
    page=page+1 #done flag set in 'some_stuff'
    sys.stdout.write('\b\b\b.'+format(page, '03')) #&lt;-- here's the progress bar meat
    sys.stdout.flush()
    if done: #( flag alternative to break, exit or quit)
        print('\nSorting', item_count, 'items')
        page=0 # exits the 'while page' loop
list.sort()
for item_count in range(0, items)
    print(list[item_count])
#print footers here
 if not (len(list)==items):
    print('#error_handler')
</code></pre>
<p>The progress bar meat is in the <code>sys.stdout.write('\b\b\b.'+format(page, '03'))</code> line. First, to erase to the left, it backs up the cursor over the three numeric characters with the '\b\b\b' as ⌫⌫⌫ rubout and drops a new period to add to the progress bar length. Then it writes three digits of the page it has progressed to so far. Because <code>sys.stdout.write()</code> waits for a full buffer or the output channel to close, the <code>sys.stdout.flush()</code> forces the immediate write. <code>sys.stdout.flush()</code> is built into the end of <code>print()</code> which is bypassed with <code>print(txt, end='' )</code>. Then the code loops through its mundane time intensive operations while it prints nothing more until it returns here to wipe three digits back, add a period and write three digits again, incremented.</p>
<p>The three digits wiped and rewritten is by no means necessary - it's just a flourish which exemplifies <code>sys.stdout.write()</code> versus <code>print()</code>. You could just as easily prime with a period and forget the three fancy backslash-b ⌫ backspaces (of course not writing formatted page counts as well) by just printing the period bar longer by one each time through - without spaces or newlines using just the <code>sys.stdout.write('.'); sys.stdout.flush()</code> pair.</p>
<p>Please note that the Raspberry Pi IDLE3 Python shell does not honor the backspace as ⌫ rubout but instead prints a space, creating an apparent list of fractions instead.</p>
<p>—(o=8&gt; wiz</p>
</div>
<div class="post-text" itemprop="text">
<p>python <strong>2.6+</strong>:</p>
<pre><code>from __future__ import print_function # needs to be first statement in file
print('.', end='')
</code></pre>
<p>python <strong>3</strong>:</p>
<pre><code>print('.', end='')
</code></pre>
<p>python &lt;= <strong>2.5</strong>:</p>
<pre><code>import sys
sys.stdout.write('.')
</code></pre>
<p>if extra space is OK after each print, in python 2</p>
<pre><code>print '.',
</code></pre>
<p><strong>misleading</strong> in python 2 - <strong>avoid</strong>:</p>
<pre><code>print('.'), # avoid this if you want to remain sane
# this makes it look like print is a function but it is not
# this is the `,` creating a tuple and the parentheses enclose an expression
# to see the problem, try:
print('.', 'x'), # this will print `('.', 'x') `
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will notice that all the above answers are correct. But I wanted to make a shortcut to always writing the " end='' " parameter in the end.</p>
<p>You could define a function like</p>
<pre><code>def Print(*args,sep='',end='',file=None,flush=False):
    print(*args,sep=sep,end=end,file=file,flush=flush)
</code></pre>
<p>It would accept all the number of parameters. Even it will accept all the other parameters like file, flush ,etc and with the same name.</p>
</div>
<div class="post-text" itemprop="text">
<p>you want to print something in for loop right;but you don't want it print in new line every time..
for example:</p>
<pre><code> for i in range (0,5):
   print "hi"

 OUTPUT:
    hi
    hi
    hi
    hi
    hi
</code></pre>
<hr/>
<p>but you want it to print like this:
hi hi hi hi hi hi right????
just add a comma after print "hi"</p>
<p>Example:</p>
<p><code>for i in range (0,5):
   print "hi",
OUTPUT:
hi hi hi hi hi
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Many of these answers seem a little complicated. In Python 3.X you simply do this,</p>
<pre><code>print(&lt;expr&gt;, &lt;expr&gt;, ..., &lt;expr&gt;, end=" ")
</code></pre>
<p>The default value of end is "\n". We are simply changing it to a space or you can also use end="".</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in xrange(0,10): print '.',
</code></pre>
<p>This will work for you. here comma (,) is important after print.
Got help from : <a href="http://freecodeszone.blogspot.in/2016/11/how-to-print-in-python-without-newline.html" rel="nofollow noreferrer">http://freecodeszone.blogspot.in/2016/11/how-to-print-in-python-without-newline.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Or have a function like:</p>
<pre><code>def Print(s):
   return sys.stdout.write(str(s))
</code></pre>
<p>Then now:</p>
<pre><code>for i in range(10): # or `xrange` for python 2 version
   Print(i)
</code></pre>
<p>Outputs:</p>
<pre><code>0123456789
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for i in xrange(0,10): print '\b.',
</code></pre>
<p>This worked in both 2.7.8 &amp; 2.5.2 (Canopy and OSX terminal, respectively) -- no module imports or time travel required.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a general way of printing without inserting a newline.</p>
<p><strong>Python 3</strong></p>
<pre><code>for i in range(10):
  print('.',end = '')
</code></pre>
<p>In Python 3 it is very simple to implement</p>
</div>
<div class="post-text" itemprop="text">
<p>There are general two ways to do this:</p>
<p><strong>Print without newline in Python 3.x</strong></p>
<p>Append nothing after the print statement and remove '\n' by using <code>end=''</code>  as:</p>
<pre><code>&gt;&gt;&gt; print('hello')
hello  # appending '\n' automatically
&gt;&gt;&gt; print('world')
world # with previous '\n' world comes down

# solution is:
&gt;&gt;&gt; print('hello', end='');print(' world'); # end with anything like end='-' or end=" " but not '\n'
hello world # it seem correct output
</code></pre>
<p><strong>Another Example in Loop</strong>:</p>
<pre><code>for i in range(1,10):
    print(i, end='.')
</code></pre>
<p><strong>Print without newline in Python 2.x</strong></p>
<p>Adding a trailing comma says that after print ignore <code>\n</code>.</p>
<pre><code>&gt;&gt;&gt; print "hello",; print" world"
hello world
</code></pre>
<p><strong>Another Example in Loop</strong>:</p>
<pre><code>for i in range(1,10):
    print "{} .".format(i),
</code></pre>
<p>Hope this will help you.
You can visit this <a href="https://www.geeksforgeeks.org/print-without-newline-python/" rel="nofollow noreferrer">link</a> .</p>
</div>
<div class="post-text" itemprop="text">
<p>...you do not need to import any library. Just use the delete character:</p>
<pre><code>BS=u'\0008' # the unicode for "delete" character
for i in range(10):print(BS+"."),
</code></pre>
<p>this removes the newline and the space (^_^)*</p>
</div>
<span class="comment-copy">For those who search the string formating documentation of python: <a href="http://docs.python.org/library/stdtypes.html#string-formatting" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#string-formatting</a></span>
<span class="comment-copy">Remember that xrange is only in python 2.</span>
<span class="comment-copy">Looks like a similar question had been asked previously: <a href="https://stackoverflow.com/q/255147/9325817">https://stackoverflow.com/q/255147/9325817</a></span>
<span class="comment-copy">Python 3 Print function is explained in this video: <a href="https://www.youtube.com/watch?v=63r4WsW8Ues" rel="nofollow noreferrer">youtube.com/watch?v=63r4WsW8Ues</a>. Only end value should be set to empty string.</span>
<span class="comment-copy">Won't the second example also print ten spaces?</span>
<span class="comment-copy">It's probably also worth noting that, under certain circumstances, you may need to call <code>sys.stdout.flush()</code> manually, if the output isn't showing up immediately.</span>
<span class="comment-copy">To use the third example in Python 2.6+, use <code>from __future__ import print_function</code>, recommended for forward compatibility.</span>
<span class="comment-copy"><code>sys.stdout.write('.')</code> will work with both versions 2.x and 3.x without any additional changes.</span>
<span class="comment-copy"><b>Note</b> that the <code>flush</code> argument [only works on python 3.3] as "They did not backport the flush argument to Python 2.7"   [1]: <a href="http://stackoverflow.com/questions/230751/how-to-flush-output-of-python-print" title="how to flush output of python print">stackoverflow.com/questions/230751/…</a></span>
<span class="comment-copy">This is the best pythonic answer.</span>
<span class="comment-copy">This is specifically listed in the question as undesirable behavior because of the spaces</span>
<span class="comment-copy">On the contrary, the answer should be deleted for two reasons: it has undesirable side effects which you can't disable (included extra spaces), and It isn't forward compatible with python 3 (the parenthesis force a conversion to a tuple).  I expect these sorts of shoddy constructs from PHP, not Python.  So it's best to not ever use this.</span>
<span class="comment-copy">// , This is the simplest way to get it done in Python 2, though, and there is a LOT of one-off code out there for really old OSes. Probably not the best solution, or even recommended.  However, one of the great advantages of StackOverflow is that it lets us know what weirdo tricks are out there. KDP, would you include a quick warning at the top about what @Eric Leschinski said? It does make sense, after all.</span>
<span class="comment-copy">@nathanbasanese Simple or not, it has a side effect that <i>the asker explicitly does not want</i>. Downvoted.</span>
<span class="comment-copy">This is missing the point.</span>
<span class="comment-copy">Indeed, it is missing the point. :) Since there was already a great answer to the question I was just elaborating on some related techniques that might prove useful.</span>
<span class="comment-copy">Based on the title of the question, I believe this answer is more appropriate analog to how one commonly uses printf in C/C++</span>
<span class="comment-copy">This answers the title of the question, but not the body.  That said, it provided me with what I was looking for.  :)</span>
<span class="comment-copy">@Vanuan, I explained in the bottom of my answer that the title of the question changed at some point. :)</span>
<span class="comment-copy">flush()ing stdout on every write may impact performance</span>
<span class="comment-copy">// , This actually made it print out nothing. Don't we need to then add another print statement without an argument at the end, as shown in <a href="http://stackoverflow.com/a/493500/2146138">stackoverflow.com/a/493500/2146138</a>? Would you be willing to edit this answer with a reeeally short two or three line example?</span>
<span class="comment-copy">This one works great for python2.7 on win7</span>
<span class="comment-copy">The OP doesn;t want a space appended</span>
<span class="comment-copy">Didn't answer the question.  No spaces.</span>
<span class="comment-copy">this works but only for python 3</span>
<span class="comment-copy">Is this true for all versions of Python?</span>
<span class="comment-copy">It only works in Python 3.</span>
<span class="comment-copy">Breaks <code>sys.__stdout__</code></span>
<span class="comment-copy">As said, backspace characters do not always work</span>
<span class="comment-copy">It do not run, it complaints that <code>*arg</code> is in beginning (python 2.7), and putting it at the end did run, but did not work completely right. I defined a function that only took <code>Print(*args)</code>, and then just called print with <code>sep='', end=''</code>. And now it works as I want. So one upvote for the idea.</span>
<span class="comment-copy">No, the OP wants hihihihihi, not hi hi hi hi hi</span>
<span class="comment-copy">That prints backspace characters to standard output. It might <i>look</i> correct if standard output happens to be a terminal, but if it's redirected to a file that file will contain control characters.</span>
<span class="comment-copy">True, but I can't imagine that anyone would want to use this for anything other than a low-tech progress bar ...</span>
<span class="comment-copy">Nevertheless, the Python code does not do the same thing as the C code in the question.</span>
<span class="comment-copy">What about the space?</span>
<span class="comment-copy">use <code>end=" "</code> e.g.: print('hello', end='' ");print('world')</span>
<span class="comment-copy">Your 2.7 solution does not remove the space.</span>
<span class="comment-copy"><a href="https://paiza.io/projects/e/35So9iUPfMdIORGzJTb2NQ" rel="nofollow noreferrer">paiza.io/projects/e/35So9iUPfMdIORGzJTb2NQ</a></span>
<span class="comment-copy">I mention that remove '\n' not space, space is by default in python2. See what this looks: <code>print 'hello' ;print'there'</code> in <a href="https://paiza.io/projects/e/35So9iUPfMdIORGzJTb2NQ" rel="nofollow noreferrer">paiza.io/projects/e/35So9iUPfMdIORGzJTb2NQ</a></span>
