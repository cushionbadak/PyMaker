<div class="post-text" itemprop="text">
<p>I need to call a task every second (say) to poll some sensor data on a piece of hardware. In the unit test, all I want to do, is to check that the right methods are called and that errors (such as sensor has blown up or vanished) do get caught.</p>
<p>Here is a <em>toy</em> example that mimics the real code:</p>
<pre><code>import pytest
import asyncio
import mock


async def ook(func):
    while True:
        await asyncio.sleep(1)
        func()


@pytest.mark.asyncio
async def test_ook():
    func = mock.Mock()
    await ook(func)
    assert func.called is True
</code></pre>
<p>As expected, running this will block forever.</p>
<p>How can I cancel the <code>ook</code> task so that the unit test does not block?</p>
<p>A work around would be to split the loop into another function and define it as no testable. I want to avoid doing that.  Note also that messing with <code>func</code> (to call <code>loop.close()</code> or some such) does not work either as it is there just so the toy example test can assert something.</p>
</div>
<div class="post-text" itemprop="text">
<p>As it stands, the way you've designed the <code>ook</code> method is the cause of your issue.</p>
<p>Due to the <code>ook</code> method, it will always be a blocking operation. I assume, since you're using <code>asyncio</code> you want <code>ook</code> to be non-blocking on the main thread?</p>
<p>If thats the case, <code>asyncio</code> actually comes with an event loop built in, see <a href="https://stackoverflow.com/a/30467159/4996535">this comment for an example.</a>, which will run an task on another thread and gives you ways to control that task.</p>
<p>Documentation/samples for the event loop are <a href="https://docs.python.org/3/library/asyncio-eventloop.html#event-loop-examples" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Based off <a href="https://stackoverflow.com/users/4996535/duff">duFF</a>'s <a href="https://stackoverflow.com/a/45484015/232794">answer</a>, here is the fixed toy code:</p>
<pre><code>import pytest
import asyncio
import mock


async def ook(func):
    await asyncio.sleep(1)
    func()
    return asyncio.ensure_future(ook(func))


@pytest.mark.asyncio
async def test_ook():
    func = mock.Mock()
    task = await ook(func)
    assert func.called is True
    task.cancel()
</code></pre>
<p>When run:</p>
<pre><code>; py.test tests/ook.py
============================= test session starts ==============================
platform linux -- Python 3.6.1, pytest-3.1.3, py-1.4.34, pluggy-0.4.0           
run-last-failure: rerun last 4 failures first                                   
rootdir: /home/usr/blah, inifile: setup.cfg                             
plugins: xvfb-1.0.0, xdist-1.18.2, colordots-0.1, asyncio-0.6.0                 
collected 1 item s 

ook.py::test_ook PASSED

---------- generated xml file: /home/yann/repos/raiju/unit_tests.xml -----------
============================== 0 tests deselected ==============================
=========================== 1 passed in 0.02 seconds ===========================
</code></pre>
</div>
