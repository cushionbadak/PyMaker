<div class="post-text" itemprop="text">
<p>I am trying to expand a tuple in a yield statement but I'm getting a <code>SyntaxError</code>. Is this even possible, or is the <code>*</code> operator only for function calls? </p>
<p>Here is an example below:</p>
<pre><code>class Inner(object):
    def __init__(self):
        self._vals = {'a': 1,
                      'b': 2,
                      'c': 3,
                      'd': 4}

    def __iter__(self):
        for key, val in self._vals.items():
            yield key, val

class Outer(object):
    def __init__(self):
        self._morevals = {"foo": Inner(),
                          "bar": Inner()}

    def __iter__(self):
        for key, moreval in self._morevals.items():
            for val in moreval:
                yield key, *val    # !!! &lt;--- This is where the error is

object_under_test = Outer()

for outer_key, inner_key, inner_value in object_under_test:
    print("{} {} {}".format(outer_key, inner_key, inner_value))

    # Want:
    # foo a 1
    # foo b 2
    # foo c 3
    # foo d 4
    # bar a 1
    # bar b 2
    # bar c 3
    # bar d 4
</code></pre>
<p>Instead, I'm getting this error:</p>
<pre><code>    yield key, *val
               ^
SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add parentheses, either around the tuple:</p>
<pre><code>yield (key, *val)
</code></pre>
<p><code>yield</code> is special here in that the form only accepts an expression list, not a <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="noreferrer"><code>starred_list</code> form</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to parenthesize it. In short, use:</p>
<pre><code>yield (key, *val)
</code></pre>
<hr/>
<p>Alternatively, you could shorten it by using <code>yield from</code> with a comprehension. All in all, your <code>__iter__</code> looking like:</p>
<pre><code> def __iter__(self):
    items = self._morevals.items()
    yield from ((k, *v) for k, vals in items for v in vals)
</code></pre>
<p>Similarly, using <code>yield from</code> in <code>ClassOne.__iter__</code>:</p>
<pre><code>def __iter__(self):
    yield from self._vals.items()
</code></pre>
</div>
