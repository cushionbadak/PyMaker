<div class="post-text" itemprop="text">
<p>So I am trying to organize data through a CSV file using pandas so I can graph it in matplotlib, I have different rows of values in which some are control and others are experimental. I am able to separate the rows to graph however I can not seem to make it work, I have attempted for loops (seen below) to graph although I keep getting 'TypeError: 'type' object is not subscriptable'.</p>
<pre><code>import pandas as pd
import numpy as np
import matplotlib as plt

df = pd.read_csv('C:\\Users\\User\\Desktop\\Ubiome samples\\samples.csv')

group = (df['Group'])
count = (df['Count'])
time = (df['Time'])

for steps in range [group]:
    plt.plot([time],[count],'bs')
    plt.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a typo in your for loop :</p>
<pre><code>for steps in range [group]:
</code></pre>
<p>Should be</p>
<pre><code>for steps in range(group):
</code></pre>
<p>Your for loop tries to call <code>__getitem__</code> on <code>range</code>, but since this method isn't defined for <code>range</code>, you get a <code>TypeError: 'type' object is not subscriptable</code>. Check <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer">python documentation for <strong>getitem</strong>()</a> for more details.</p>
<p>However, you cannot use <code>range</code> on a pandas <code>Series</code> to loop over every item in it, since <code>range</code> expects integers as it's input. Instead you should use :</p>
<pre><code>for steps in group:
</code></pre>
<p>This will loop over every row in your csv file, and output the exact same plot for each row. I'm quite sure this is not what you actually want to do.</p>
<p>If I understand your question well, you want to plot each group of experimental/control values you have in your csv.</p>
<p>Then you should try (untested) : </p>
<pre><code>import pandas as pd
import numpy as np
import matplotlib as plt

df = pd.read_csv('C:\\Users\\User\\Desktop\\Ubiome samples\\samples.csv')

for group in df['Group'].unique():
    group_data = df[df['Group'] == group]
    plt.plot(group_data['Time'], group_data['Count'], 'bs')
    plt.show()
</code></pre>
<p><code>for group in df['Group'].unique()</code> will loop over every piece of data in the Group column, <strong>ignoring duplicates</strong>.
For instance, if your column have 1000 strings in it, but all of these strings are either "experimental" or "control", then this will loop over <code>['experimental', 'control']</code> (actually a numpy array, also, do note that <code>unique()</code> doesn't sort, so the order of the output depends on the order of the input).</p>
<p><code>df[df['Group'] == group]</code> will then select all the rows where the column 'Group' is equal to group. 
Check <a href="https://pandas.pydata.org/pandas-docs/stable/indexing.html#the-where-method-and-masking" rel="nofollow noreferrer">pandas documentation for where method and masking</a> for more details.</p>
</div>
<span class="comment-copy">This particular error is from <code>range [group]</code>.  The proper way to call range is <code>range(n)</code>, where <code>n</code> is an integer.  <a href="https://docs.python.org/3.6/library/stdtypes.html#range" rel="nofollow noreferrer">See the documentation.</a>  You probably have other problems too.  For more help, consider providing a few lines of code that give us a dataframe to work with.</span>
<span class="comment-copy">Thank you that works great to answer my question and the link has helped more so, do you however know how to make them a single graph?</span>
<span class="comment-copy">If you want only one graph, then don't do the <code>plt.show()</code>in the loop, but after the loop.</span>
