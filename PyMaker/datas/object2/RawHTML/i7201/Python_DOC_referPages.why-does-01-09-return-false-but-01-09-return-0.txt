<div class="post-text" itemprop="text">
<p>When adding boolean expressions in python, it seems that enclosing them in parentheses casts them into <code>int</code> when you add them, but not doing so maintains their types:</p>
<pre><code>&gt;&gt;&gt; ((0&gt;1) + (0&gt;9))
0
&gt;&gt;&gt; (0&gt;1 + 0&gt;9)
False
&gt;&gt;&gt; (0&gt;1 + (0&gt;9))
False
</code></pre>
<p>Why is this? It seems to me that parentheses should only be used to change the order of operations (except for some cases where you use parentheses to define tuples), not the type of the contents, so I would expect:</p>
<pre><code>(&lt;expression&gt;) == &lt;expression&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; ((0&gt;1) + (0&gt;9)) 
0
</code></pre>
<p>This is integer addition, since <code>False</code> is an integer instance.  <code>bool</code> doesn't define addition, so <code>False + False</code> is resolved on the parent class <code>int.__add__</code>.</p>
<pre><code>&gt;&gt;&gt; (0&gt;1 + 0&gt;9)
False
</code></pre>
<p>This is a chained comparison, it's <code>0 &gt; 1 &gt; 9</code> in disguise.</p>
<pre><code>&gt;&gt;&gt; (0&gt;1 + (0&gt;9))
False
</code></pre>
<p>This is a regular comparison, it's <code>0 &gt; 1 + False</code> in disguise.</p>
</div>
<span class="comment-copy">Ah. I was under the impression that comparison operator had precedence over arithmetic ones, but it makes sense that they dont, otherwise things like 1+0&gt;9 would be really unintuitive.  <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
