<div class="post-text" itemprop="text">
<p>I have a superclass as below:</p>
<pre><code>class Container(object):
    """ Holds hashable objects. Objects may occur 0 or more times """
    def __init__(self):
        """ Creates a new container with no objects in it. I.e., any object 
            occurs 0 times in self. """
        self.vals = {}
    def insert(self, e):
        """ assumes e is hashable
            Increases the number times e occurs in self by 1. """
        try:
            self.vals[e] += 1
        except:
            self.vals[e] = 1
    def __str__(self):
        s = ""
        for i in sorted(self.vals.keys()):
            if self.vals[i] != 0:
                s += str(i)+":"+str(self.vals[i])+"\n"
        return s
</code></pre>
<p>And I worked on a subclass:</p>
<pre><code>class Bag(Container):
    def remove(self, e):
        """ assumes e is hashable
            If e occurs in self, reduces the number of 
            times it occurs in self by 1. Otherwise does nothing. """
        # write code here
        if e in self.vals.keys():
            self.vals[e] -= 1

    def count(self, e):
        """ assumes e is hashable
            Returns the number of times e occurs in self. """
        # write code here
        if e not in self.vals.keys():
            return 0
        else:
            return self.vals[e]

    def __add__(self, other):
        new_dict = other.vals
        for e in self.vals.keys():
            if e in other.vals.keys():
                new_dict[e] += self.vals[e]
            else:
                new_dict[e] = self.vals[e]
        return new_dict

    def __str__(self):
        s1 = ""
        for i in sorted(self.new_dict.keys()):
            s1 += str(i)+":"+str(self.new_dict[i])+"\n"
        return s1
</code></pre>
<p>When run test cases:</p>
<ul>
<li>a = Bag() </li>
<li>a.insert(3) </li>
<li>a.insert(5) </li>
<li>b = Bag() </li>
<li>b.insert(5) </li>
<li>b.insert(5)</li>
<li>b.insert(5) </li>
<li>print(a+b)</li>
</ul>
<p>My output is:</p>
<p>{3: 1, 5: 4}</p>
<p>However, the expected output should be:</p>
<p>3:1</p>
<p>5:4</p>
<p>How could I get the right format output? Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<p>Currently your <code>__add__</code> function returns a normal dict instead of an instance of <code>Bag</code>. Instead of that you can use the <code>new_dict</code> with a new instance of <code>Bag</code> and return it.</p>
<pre><code>def __add__(self, other):
    new_dict = other.vals.copy()  # copy required to prevent updating `other.vals`
    for e in self.vals.keys():
        if e in other.vals.keys():
            new_dict[e] += self.vals[e]
        else:
            new_dict[e] = self.vals[e]

    # Create a new instance and populate it with new_dict
    new_instance = Bag()
    new_instance.vals.update(new_dict)
    return new_instance

def __str__(self):
    # Use self.vals here not sef.new_dict
    s1 = ""
    for i in sorted(self.vals.keys()):
        s1 += str(i)+":"+str(self.vals[i])+"\n"
    return s1
</code></pre>
<p><strong>Demo:</strong></p>
<pre><code>&gt;&gt;&gt; a + b
&lt;__main__.Bag object at 0x1046c2470&gt;    
&gt;&gt;&gt; print(a + b)
3:1
5:4
</code></pre>
<hr/>
<p>You may also want to checkout bag data-structure(<a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>) provided by Python's standard lib for other functionalities possible with it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because once you add <code>a</code> and <code>b</code> you no longer have a <code>Bag</code>, just a regular dict. </p>
<pre><code>&gt;&gt;&gt; type(a)
__main__.Bag
&gt;&gt;&gt; type(b)
__main__.Bag
&gt;&gt;&gt; type(a+b)
dict
</code></pre>
<p>If you want addition of Bags to return another Bag, you have to modify your <code>__add__</code> function accordingly, such that it returns a <code>Bag</code> as opposed to <code>new_dict</code>, which is just a regular dict. </p>
</div>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">Specifically, <code>__add__()</code> returns <code>new_dict</code>, which is a plain dict.</span>
<span class="comment-copy">Thank you all for the explaination. Very clear and straight forward.</span>
