<div class="post-text" itemprop="text">
<p>How do I use type hints to annotate a function that returns an <code>Iterable</code> that always yields two values: a <code>bool</code> and a <code>str</code>?  The hint <code>Tuple[bool, str]</code> is close, except that it limits the return value type to a tuple, not a generator or other type of iterable.</p>
<p>I'm mostly curious because I would like to annotate a function <code>foo()</code> that is used to return multiple values like this:</p>
<pre><code>always_a_bool, always_a_str = foo()
</code></pre>
<p>Usually functions like <code>foo()</code> do something like <code>return a, b</code> (which returns a tuple), but I would like the type hint to be flexible enough to replace the returned tuple with a generator or list or something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are always returning <em>one</em> object; using <code>return one, two</code> simply returns a tuple.</p>
<p>So yes, <code>-&gt; Tuple[bool, str]</code> is entirely correct.</p>
<p><em>Only</em> the <code>Tuple</code> type lets you specify a <em>fixed number</em> of elements, each with a distinct type. You really should be returning a tuple, always, if your function produces a <em>fixed</em> number of return values, especially when those values are specific, distinct types.</p>
<p>Other sequence types are expected to have <em>one</em> type specification for a variable number of elements, so <code>typing.Sequence</code> is not suitable here. Also see <a href="https://stackoverflow.com/questions/626759/whats-the-difference-between-list-and-tuples">What's the difference between lists and tuples?</a></p>
<blockquote>
<p>Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong></p>
</blockquote>
<p>Python's type hint system adheres to that philosophy, there is currently no syntax to specify an iterable of fixed length and containing specific types at specific positions.</p>
<p>If you <em>must</em> specify that any iterable will do, then the best you can do is:</p>
<pre><code>-&gt; Iterable[Union[bool, str]]
</code></pre>
<p>at which point the caller can expect booleans and strings <em>in any order</em>, and of unknown length (anywhere between 0 and infinity).</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/33945261/how-to-specify-multiple-return-types-using-type-hints">How to specify multiple return types using type-hints</a></span>
<span class="comment-copy">@StevenM.Vascellaro This is not a duplicate of that question</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">language specification</a> allows returning other iterables; <code>foo()</code> could do <code>yield True; yield "blah"</code> and <code>a, b = foo()</code> would still work.  Or <code>foo()</code> could return a list.  I reworded my question to make it clear that I'm interested in hinting an arbitrary iterable, not a tuple.</span>
<span class="comment-copy">@RichardHansen: that may well be, but type hinting only provides you with <code>Tuple</code> to express a heterogenous, fixed length return value.</span>
<span class="comment-copy">"What you want is not possible" is a good answer, assuming it's correct.  :)</span>
<span class="comment-copy">I had to add <code>from typing import Tuple</code> for the Tuple annotation to work.</span>
<span class="comment-copy">@PHPirate: yes, and you'd have to do the same for <code>Iterable</code> and <code>Union</code>.  Since we are discussing their specific use here, the import is implied.</span>
