<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33582162/confused-about-backslashes-in-regular-expressions">Confused about backslashes in regular expressions [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to name a text file after the last directory in a file path.  I need to be able to get this name for OS's that use either forward or backward slashes. I've successfully used the string split() method for forward slash file paths but not backslash. Also, when I try to print the backslash directory name the slashes are not included (probably reading as escape sequences); however, when I use re.search() method it still finds the slash.</p>
<p>How do I fix this?</p>
<p>See code below:</p>
<pre><code>import re
import sys

targetDirectory = sys.argv[1]
filePathDirectorySeparator = ''
usesForwardSlashSeparator = re.search('/', targetDirectory)
if(usesForwardSlashSeparator):
    filePathDirectorySeparator = '/'
else:
    filePathDirectorySeparator = '\\'

fileName = targetDirectory.split(filePathDirectorySeparator)[-1]
file = open(fileName, 'w+')
file.write('HELLO')
file.close()
</code></pre>
<p>The link shows my console output (I'm not allowed to embed images yet apparently...)</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're trying harder than you need to. Python has an <code>os</code> module which has a function to do exactly what you want, independent of platform. Here, you just need to use</p>
<pre><code>fileName=os.path.basename(targetDirectory)
</code></pre>
<p>Also, if you're using Python you should seriously consider moving away from camel case (<code>fileName</code>) to the more Pythonic snake case (<code>file_name</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>A small example,</p>
<pre><code>&gt;&gt;&gt; print s
this/hello\
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('/',s)
['this', 'hello\\']
&gt;&gt;&gt; re.split('\\',s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/re.py", line 171, in split
    return _compile(pattern, flags).split(string, maxsplit)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/re.py", line 251, in _compile
    raise error, v # invalid expression
sre_constants.error: bogus escape (end of line)
&gt;&gt;&gt; re.split(r'\\',s)
['this/hello', '']
</code></pre>
<p>'r' prefix matters!</p>
<p><a href="https://stackoverflow.com/questions/2241600/python-regex-r-prefix">Reference</a>! </p>
<p>That is,</p>
<blockquote>
<p>When an "r" or "R" prefix is present, a character following a
  backslash is included in the string without change, and all
  backslashes are left in the string. For example, the string literal
  r"\n" consists of two characters: a backslash and a lowercase "n".
  String quotes can be escaped with a backslash, but the backslash
  remains in the string; for example, r"\"" is a valid string literal
  consisting of two characters: a backslash and a double quote; r"\" is
  not a valid string literal (even a raw string cannot end in an odd
  number of backslashes). Specifically, a raw string cannot end in a
  single backslash (since the backslash would escape the following quote
  character). Note also that a single backslash followed by a newline is
  interpreted as those two characters as part of the string, not as a
  line continuation.</p>
</blockquote>
</div>
<span class="comment-copy">I don't see the link so I've uploaded to imgur: <a href="http://imgur.com/a/ijLgK" rel="nofollow noreferrer">imgur.com/a/ijLgK</a></span>
<span class="comment-copy">I'd guess that your shell is interpreting the backslashes, so that they never show up in <code>sys.argv</code> in Python. Can you try escaping them on the command line?</span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">os.path</a>, and note that you can also use forward slashes in your Windows paths.</span>
<span class="comment-copy">It doesn't look like this code actually uses <code>re.split</code>.</span>
<span class="comment-copy">@user2357112 you're right, i'll update the post</span>
<span class="comment-copy">plus one for noting the camel case!</span>
<span class="comment-copy">Thank you for your help!</span>
<span class="comment-copy">Please quote the reference a little bit. If that link changes, that explanation becomes useless, so always include a relevant snippet from any link you post.</span>
<span class="comment-copy">yeah sure. Thanks!</span>
<span class="comment-copy">Thank you for your help!</span>
<span class="comment-copy">we can use re.split('\\\\',s) because \ will be take it as \\\\ likewise if its \n \t \a means we need to mention corresponding escape code</span>
<span class="comment-copy">nice answer with good clarification about apostrophy r . i had confuse on it before now i am clear</span>
