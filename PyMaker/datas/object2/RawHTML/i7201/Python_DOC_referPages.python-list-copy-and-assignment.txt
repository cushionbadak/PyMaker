<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/44861468/variable-a-assigned-to-variable-b-when-a-changes-shouldnt-a-change-too">Variable A assigned to variable B. When A changes, shouldn't A change too?</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm using Python 3.x</p>
<p>Executed the below code and couldn't formulate a reason.  </p>
<pre><code>alist = [10,1000,100]
blist = alist

alist += [34]

print('alist after adding', alist) #this is reflected in blist too
print('change reflects in blist ', blist) 

alist = 35 #but this is not reflected in blist

print('alist after assigning ', alist)
print('change not reflected blist ', blist)
</code></pre>
<p>You can execute it at the below link</p>
<p><a href="http://www.pythontutor.com/visualize.html#code=%0Aalist%20%3D%20%5B10,1000,100%5D%0Ablist%20%3D%20alist%0A%0Aalist%20%2B%3D%20%5B34%5D%0A%0Aprint%28'alist%20after%20adding',%20alist%29%0Aprint%28'change%20reflects%20in%20blist%20',%20blist%29%0A%0Aalist%20%3D%2035%0A%0Aprint%28'alist%20after%20assigning%20',%20alist%29%0Aprint%28'change%20not%20reflected%20blist%20',%20blist%29%0A%0A&amp;cumulative=false&amp;curInstr=5&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false" rel="nofollow noreferrer">Click to Run</a></p>
<p>I couldn't find a justification, any pointers to find the root cause or your findings on it if you had came across it will be helpful.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is what happens ... </p>
<ul>
<li><code>alist = [10,1000,100]</code> means alist references to an object of type list.</li>
<li><code>blist = alist</code> means blist also points to the same object type as alist points i.e. a list.</li>
<li><code>alist += [34]</code> adds 34 to <code>alist</code> and resultant will be in <code>alist</code>. alist is still referencing to an object of type <code>list</code>.</li>
<li><code>alist = 35</code> means you have changed the reference type of <code>alist</code> from <code>list</code> to a <code>int</code> whose value is 35 and not <code>list</code> anymore. </li>
<li>Doing so doesn't impact the actual list hence <code>blist</code> displays list and <code>alist</code> displays 35.</li>
</ul>
<p>Use <code>type(variable)</code> to understand better, Check this... </p>
<pre><code>alist = [10,1000,100]
blist = alist

alist += [34]
print("BEFORE: type of alist", type(alist))
print("BEFORE: type of blist", type(blist))

alist = 35 #but this is not reflected in blist
print("AFTER: type of alist", type(alist))
print("AFTER: type of blist", type(blist))
</code></pre>
<p>Sample Run</p>
<pre><code>BEFORE: type of alist &lt;class 'list'&gt;
BEFORE: type of blist &lt;class 'list'&gt;
AFTER: type of alist &lt;class 'int'&gt;
AFTER: type of blist &lt;class 'list'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The statement <code>alist += [35]</code> is shorthand for <code>alist.extend([35])</code>. See the <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">docs for extend</a>.</p>
<p>The variable <em>alist</em> is a reference to a list. This list will be appended with 35. Since the variable blist is a reference to the same list, the same happens there. </p>
<p>When you assign <code>35</code> to the variable <code>alist</code>, what alist references changes. It now points to this value and blist still references the list.</p>
<p>All the datastructures you create in your program are stored in the memory, and your variables are just references to those pieces of memory. Some operations will alter the data that is references in the memory, for example <code>extend</code>. Variable assignment will change what the variable points too.</p>
</div>
<span class="comment-copy">python is a loosely typed language. That's you have to keep in mind</span>
<span class="comment-copy">@ArpitSolanki No, Python is a strongly-typed language, however, it might <i>appear</i> to be weakly-typed, because <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Other languages have "variables", Python has "names"</a>, and Python names do not carry type information. That information is held by the Python objects themselves. While it's <i>possible</i> to change the type of a Python object, it's not particularly easy, and rarely useful.</span>
<span class="comment-copy">thumbs-up man, I forget that point, yes you're right, it incarnates into a int type</span>
<span class="comment-copy">You can use <code>type(variable)</code> to know its type. Please accept the answer and vote up, if it has resolved your question :)</span>
<span class="comment-copy">This is a very badly worded way of explaining <i>references</i>. Nothing “changes the datatype”. <code>alist = 35</code> makes the variable <code>alist</code> just refer to some other object which has nothing to do with the original list object.</span>
<span class="comment-copy"><code>alist = alist + [34]</code> is completely different from <code>alist += [34]</code>. The first changes the reference of <code>alist</code> whereas the latter doesn't.</span>
<span class="comment-copy">You appear to have some misunderstandings about how Python's data model works. You, too, should take a look at <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Other languages have "variables", Python has "names"</a>. For more in-depth info, please see <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, which was written by SO veteran Ned Batchelder.</span>
<span class="comment-copy">Can you rephrase your answer, thanks for lending a helping hand _/_</span>
