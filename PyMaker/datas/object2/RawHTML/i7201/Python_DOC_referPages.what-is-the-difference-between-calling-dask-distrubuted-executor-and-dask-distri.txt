<div class="post-text" itemprop="text">
<p>I have a question about the concurrent futures gist from the dask documentation: <a href="https://gist.github.com/mrocklin/ef9ccd29a6ec5f4de84d6192be95042a" rel="nofollow noreferrer">https://gist.github.com/mrocklin/ef9ccd29a6ec5f4de84d6192be95042a</a></p>
<p>When we instantiate an Executor, does that mean it instantiates a scheduler as well? The repr of the executor says </p>
<p><code>&lt;Client: scheduler='tcp://127.0.0.1:60329' processes=4 cores=4&gt;</code></p>
<p>So what is the difference between calling Client() and Executor()? The documentation seems to be very similar if not the same. In the concurrent futures examples some first instantiate a Client and then an Executor with the IP address of the Client.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are exactly the same.  Executor is an older name for Client.</p>
<p>Originally Dask used the term <code>Executor</code> to match the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">concurrent.futures</a> API.  However this term was confusing for Spark users, for which <code>Executor</code> was used for their worker equivalent.  We changed the term <code>Executor</code> to <code>Client</code> in 2016 and will eventually deprecate this term.</p>
</div>
