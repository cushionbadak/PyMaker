<div class="post-text" itemprop="text">
<p>I have an object that has different methods like <code>SGD</code>, <code>Adam</code>, <code>Adamax</code> and I can call it like this:</p>
<pre><code>optim.SGD(parameters, lr, momentum=0.9)
optim.Adam(parameters, lr, momentum=0.9)
optim.Adamax(parameters, lr, momentum=0.9)
</code></pre>
<p>How can I call it all in the cycle. I have the following algo:</p>
<pre><code>models = [..., ..., ...]
lrs =    [..., ..., ...]
criterions = [..., ..., ...]

for model in models:
    for criterion in criterions:
        for lr in lrs:
            optimizer = optim.SGD(model.params(), lr=lr, momentum=0.9)
            train(model=model,
                  criterion=criterion,
                  optimizer=optimizer,
                  lr=lr)
</code></pre>
<p>How can I call <code>train()</code> with all <code>optimizer</code>'s algorithms that I mention(<code>optim.SGD</code>, <code>optim.Adam</code>, <code>optim.Adamax</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a>  to get the <code>train</code> attribute of each optimizer, then call it:</p>
<pre><code>...
getattr(optimizer , 'train')(model=model,
                              criterion=criterion,
                              optimizer=optimizer,
                              lr=lr)
</code></pre>
<p>There's also <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator.methodcalller</code></a> which does exactly the same thing with a slight change of syntax:</p>
<pre><code>from operator import methodcaller

...
methodcaller('train', model=model,
                  criterion=criterion,
                  optimizer=optimizer,
                  lr=lr)(optimizer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Directly enumerate the optimize function</p>
<pre><code>models = [..., ..., ...]
lrs =    [..., ..., ...]
criterions = [..., ..., ...]

optim_funcs = [optim.SGD, optim.Adam, optim.Adamax]

for model in models:
    for criterion in criterions:
        for lr in lrs:
            for func in optim_funcs:
                optimizer = func(model.params(), lr=lr, momentum=0.9)
                train(model=model,
                      criterion=criterion,
                      optimizer=optimizer,
                      lr=lr)
</code></pre>
</div>
