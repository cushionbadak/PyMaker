<div class="post-text" itemprop="text">
<pre><code>import random

welcomes = ["Hello","Hi","What's up","YO", "Piss off"]

chosen = random.choice(welcomes)

print("You have entered the welcome cave ----- {} -----".format(chosen))
</code></pre>
<p>How do I make sure that <code>Hello</code> for example isn't repeated twice in a row? It's fine if they're repeated again later, just not straight after.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>random.sample</code> instead of <code>random.choice</code>. <a href="https://repl.it/JthV" rel="nofollow noreferrer">Find online demo</a></p>
<pre><code>import random

welcomes = ["Hello","Hi","What's up","YO", "Piss off"]

chosen = random.sample(welcomes,2)

for item in chosen:
  print("You have entered the welcome cave ----- {} -----".format(item))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to generate a very long stream of greetings having the property: no consecutive greetings are the same (Online demos: <a href="https://repl.it/JtjJ/0" rel="nofollow noreferrer">last version</a>):</p>
<pre><code>import random

def random_hello():
    welcomes = ["Hello", "Hi", "What's up", "YO", "Piss off"]
    last_hello = None
    while 1:
        random.shuffle(welcomes)
        if welcomes[0] == last_hello:
            continue
        for item in welcomes:
            yield item
        last_hello = welcomes[-1]


hellower = iter(random_hello())
for _ in range(1000):
    print(next(hellower))
</code></pre>
<p>Or when you worry about deterministic time, swap elements (with 1st):</p>
<pre><code>if welcomes[0] == last_hello:
    welcomes[0], welcomes[1] = welcomes[1], welcomes[0]
</code></pre>
<p>or random:</p>
<pre><code>if welcomes[0] == last_hello:
    swap_with = random.randrange(1, len(welcomes))
    welcomes[0], welcomes[swap_with] = welcomes[swap_with], welcomes[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The use of <code>random.sample</code> like other answers suggested is only useful when you know you'll only need a certain number of items, like 2. The best way to ensure randomness and no repeats is to use <code>random.shuffle</code>:</p>
<pre><code>import random
welcomes = ["Hello","Hi","What's up","YO", "Piss off"]
random.shuffle(welcomes)
</code></pre>
<p>Which well shuffle the list in-place, and then you can just start to <code>pop</code> items away from the list, until it's done:</p>
<pre><code>while len(welcomes)&gt;0:
    print("You have entered the welcome cave ----- {} -----".format(welcomes.pop())
</code></pre>
<p>That will work for a list of any length, and you can use this process until the entire list is done. You can also add another loop around the whole process if you want to keep it going forever and not just until the list is over.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it with a hit&amp;miss approach:</p>
<pre><code>import random

class RandomChoiceNoImmediateRepeat(object):
    def __init__(self, lst):
        self.lst = lst
        self.last = None
    def choice(self):
        if self.last is None:
            self.last = random.choice(self.lst)
            return self.last
        else:
            nxt = random.choice(self.lst)
            # make a new choice as long as it's equal to the last.
            while nxt == self.last:   
                nxt = random.choice(self.lst)
            # Replace the last and return the choice
            self.last = nxt
            return nxt
</code></pre>
<p>One chould refine it with <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> and weights (requires python-3.6) but that approach should work for all python versions:</p>
<pre><code>&gt;&gt;&gt; welcomes = ["Hello","Hi","What's up","YO", "Piss off"]
&gt;&gt;&gt; gen = RandomChoiceNoImmediateRepeat(welcomes)
&gt;&gt;&gt; gen.choice()
'YO'
</code></pre>
<hr/>
<p>Or if you don't like hit&amp;miss you can also draw a random index between 0 and the length of the list - 2 and add 1 if it's equal or higher than the previous one. That ensures that no repeats can happen and only requires one call to <code>random</code> to get the next choice:</p>
<pre><code>import random

class RandomChoiceNoImmediateRepeat(object):
    def __init__(self, lst):
        self.lst = lst
        self.lastidx = None

    def choice(self):
        if self.lastidx is None:
            nxtidx = random.randrange(0, len(self.lst))
        else:
            nxtidx = random.randrange(0, len(self.lst)-1)
            if nxtidx &gt;= self.lastidx:
                nxtidx += 1
        self.lastidx = nxtidx
        return self.lst[nxtidx]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My take: We create two identical lists. In a loop we pop one value from one list and if the length of that list is smaller than the original list - 1 we reset the list to its original state:</p>
<pre><code>import random

origin = ["Hello","Hi","What's up","YO", "Piss off"]
welcomes = origin.copy()

for i in range(5):
    if len(welcomes) &lt; len(origin) - 1:
        welcomes = origin.copy()
    random.shuffle(welcomes) # shuffle
    chosen = welcomes.pop() # pop one value
    print("You have entered the welcome cave ----- {} -----".format(chosen))
</code></pre>
<p>E.g output with 5 loops:</p>
<pre><code>You have entered the welcome cave ----- Piss off -----
You have entered the welcome cave ----- YO -----
You have entered the welcome cave ----- Piss off -----
You have entered the welcome cave ----- YO -----
You have entered the welcome cave ----- What's up -----
</code></pre>
</div>
<span class="comment-copy">Sample pairs like <code>random.sample(welcomes,2)</code></span>
<span class="comment-copy">You could use a loop to save on that code duplication</span>
