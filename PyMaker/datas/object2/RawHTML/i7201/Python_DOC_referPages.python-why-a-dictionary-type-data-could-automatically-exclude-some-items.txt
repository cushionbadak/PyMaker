<div class="post-text" itemprop="text">
<p>I created a dictionary containing six items as below:</p>
<pre><code> &gt;&gt;&gt; dict1 = {
'A': ['A','A'],
'AB':['A','B'], 
'A':['A','O'],
'B':['B','B'],
'B':['B','O'],
'O':['O','O']
}
</code></pre>
<p>But when I check the dictionary I found that the items <code>"{'A': ['A', 'A'], 'B': ['B', 'B']}"</code> have been excluded.</p>
<pre><code>&gt;&gt;&gt; dict1
Out[19]: {'A': ['A', 'O'], 'AB': ['A', 'B'], 'B': ['B', 'O'], 'O': ['O', 'O']}
&gt;&gt;&gt; len(dict1)
Out[17]: 4
</code></pre>
<p>However if I create a new dictionary with the excluded items.It becomes normal.</p>
<pre><code>&gt;&gt;&gt; dict2 ={'A': ['A', 'A'], 'B': ['B', 'B']}
&gt;&gt;&gt; dict2
Out[21]: {'A': ['A', 'A'], 'B': ['B', 'B']}
</code></pre>
<p>Could anybody explain me why is that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot have duplicate keys but you can have multiple values. In other words,  <strong>each key is unique.</strong> </p>
<p>So each time you assign new values to the same key, you override the previous values of the key.</p>
<p>A way <strong>to assign 2 values</strong> (or lists) like in your example can be the following:</p>
<pre><code>dict1 = {'A': [['A','A'],['A','O']], 'B':[['B','B'],['B','O']], 'O':['O','O'], 'AB':['A','B']}
</code></pre>
<p><strong>Result</strong></p>
<pre><code>{'A': [['A', 'A'], ['A', 'O']], 'B': [['B', 'B'], ['B', 'O']], 'AB': ['A', 'B'], 'O': ['O', 'O']}
</code></pre>
<p><strong>Finally, you can access each key as follows:</strong></p>
<pre><code>dict1['A']
</code></pre>
<p><strong>Result</strong></p>
<pre><code>[['A', 'A'], ['A', 'O']]
</code></pre>
<p>This seems to be what you want to do.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The thing with dictionaries in Python is that <strong>each key is unique</strong>. That is, when you add an existing entry the previous value stored is overwritten by the new one.</p>
<p>When you typed:</p>
<pre><code>dict1 = {
  'A': ['A','A'],
  'AB':['A','B'], 
  'A':['A','O'], # Overrides ['A', 'A']
  'B':['B','B'],
  'B':['B','O'], # Overrides previous entry
  'O':['O','O']
}
</code></pre>
<p>You gave the dictionary two values for the keys <code>'A'</code> and <code>'B'</code>. That is you asked the dict to <strong>change</strong> the value previously stored.</p>
<p>I hope my answer was clear enough :)</p>
<p>EDIT: format &amp; language</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <code>python dictionary</code> you cannot have duplicate keys. If any duplicate key is present into the <code>python dictionary</code>,  <code>python</code> automatically replaces the first values by the new ones. <code>python dictionary</code> behaves as <code>unique</code> key.</p>
<p>In your example:</p>
<pre><code>dict1 = {
  'A': ['A','A'],
  'AB':['A','B'], 
  'A':['A','O'], # 'A': ['A','A'] and 'A': ['A','O'] override.
  'B':['B','B'],
  'B':['B','O'], # 'B': ['B','B'] and 'B': ['B','O'] override.
  'O':['O','O']
}
</code></pre>
<p>Then your <code>dictionary</code> will be:</p>
<pre><code>dict1 = {
  'A': ['A','O'],
  'AB':['A','B'], 
  'B':['B','O'],
  'O':['O','O']
}
</code></pre>
<p>I think, It will be helpfull .</p>
</div>
<div class="post-text" itemprop="text">
<p>As Python Documentation says </p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output.</p>
<p>The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key.</p>
</blockquote>
<p>Reference : <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html</a></p>
</div>
<span class="comment-copy">You cannot have duplicate keys in a python dict so Python automatically replaces the first values by the new ones</span>
<span class="comment-copy">I posted an answer showing how you can assign a lot of values to a specific key.</span>
