<div class="post-text" itemprop="text">
<p>This is my piece of code with two generators defined:</p>
<pre><code>one_line_gen = (x for x in range(3))

def three_line_gen():
    yield 0
    yield 1
    yield 2
</code></pre>
<p>When I execute:</p>
<pre><code>for x in one_line_gen:
    print x

for x in one_line_gen:
    print x
</code></pre>
<p>The result is as expected:</p>
<pre><code>0
1
2
</code></pre>
<p>However, if I execute:</p>
<pre><code>for x in three_line_gen():
    print x

for x in three_line_gen():
    print x
</code></pre>
<p>The result is:</p>
<pre><code>0
1
2
0
1
2
</code></pre>
<p>Why? I thought any generator can be used only once.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>three_line_gen</code> is not a generator, it's a function. What it returns when you call it is a generator, a brand new one each time you call it. Each time you put parenthesis like this:</p>
<pre><code>three_line_gen()
</code></pre>
<p>It is a brand new generator to be iterated on. If however you were to first do</p>
<pre><code>mygen = three_line_gen()
</code></pre>
<p>and iterate over <code>mygen</code> twice, the second time will fail as you expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>no, you can not iterate over a generator twice. a generator is exhausted once you have iterated over it. you may make a copy of a generator with <a href="https://docs.python.org/3/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><code>tee</code></a> though:</p>
<pre><code>from itertools import tee

one_line_gen = (x for x in range(3))
gen1, gen2 = tee(one_line_gen)
# or: 
# gen1, gen2 = tee(x for x in range(3))

for item in gen1:
    print(item)

for item in gen2:
    print(item)
</code></pre>
<p>for the other issues see <a href="https://stackoverflow.com/a/45400058/4954037">Ofer Sadan's answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why? I thought any generator can be used only once.</p>
</blockquote>
<p>Because every call to <em>three_line_gen()</em> creates a new generator.</p>
<p>Otherwise, you're correct that generators only run forward until exhausted.</p>
<blockquote>
<p>Can generator be used more than once?</p>
</blockquote>
<p>Yes, it is possible if the results are buffered outside the generator.  One easy way is to use <a href="https://docs.python.org/2.7/library/itertools.html#itertools.tee" rel="nofollow noreferrer"><em>itertools.tee()</em></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import tee
&gt;&gt;&gt; def three_line_gen():
        yield 0
        yield 1
        yield 2

&gt;&gt;&gt; t1, t2 = tee(three_line_gen())
&gt;&gt;&gt; next(t1)
0
&gt;&gt;&gt; next(t2)
0
&gt;&gt;&gt; list(t1)
[1, 2]
&gt;&gt;&gt; list(t2)
[1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because in One liner is <code>Generator</code> Object while the three liner is a <code>function</code>.
They meant to be different.</p>
<p>These two are similar.</p>
<pre><code>def three_line_gen_fun():
    yield 0
    yield 1
    yield 2

three_line_gen = three_line_gen_fun()
one_line_gen = (x for x in range(3))

type(three_line_gen) == type(one_line_gen)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, generator can be used only once. but you have <strong>two</strong> generator object.</p>
<pre><code># Python 3


def three_line_gen():
    yield 0
    yield 1
    yield 2

iterator = three_line_gen()
print(iterator)
for x in iterator:
    print(id(iterator), x)

iterator2 = three_line_gen()
print(iterator2)
for x in iterator2:
    print(id(iterator2), x)
</code></pre>
<p>And the result is:</p>
<pre><code>&lt;generator object three_line_gen at 0x1020401b0&gt;
4328784304 0
4328784304 1
4328784304 2
&lt;generator object three_line_gen at 0x1020401f8&gt;
4328784376 0
4328784376 1
4328784376 2
</code></pre>
</div>
<span class="comment-copy">Don't confuse a generator <b>function</b> with the generator it produces.</span>
<span class="comment-copy">Put differently, if you used <code>def one_line_gen(): return (x for x in range(3))</code>, your first example would be equivalent (producing a generator every time you called the function).</span>
<span class="comment-copy">Closely related: <a href="//stackoverflow.com/q/10958771">Generator Expression vs yield: Why isn't 'next()' working?</a></span>
