<div class="post-text" itemprop="text">
<p>I have the following string:</p>
<p><code>"TTTHTHTTHTTTTHTTTHTTTTTTHTTTTTHTH"</code></p>
<p>I would like to be able to group by the T's into a list and then count the number of T's to the first H.</p>
<p>i.e. so like</p>
<p><code>[3, 1, 2, 4, 3, 6, 5, 1]</code></p>
<p>Whats the most efficient way to do this in python ?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> is your friend</p>
<pre><code>from itertools import groupby

s = "TTTHTHTTHTTTTHTTTHTTTTTTHTTTTTHTH"

res = [sum(1 for _ in g) for k, g in groupby(s) if k == 'T']
print(res)

# [3, 1, 2, 4, 3, 6, 5, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this in one line with a list comprehension:</p>
<pre><code>my_string = "TTTHTHTTHTTTTHTTTHTTTTTTHTTTTTHTH"
my_list = [len(i) for i in my_string.split('H') if len(i)&gt;0]
</code></pre>
<p>Output of <code>my_list</code>:</p>
<pre><code>[3, 1, 2, 4, 3, 6, 5, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this with itertools:</p>
<pre><code>import itertools
s = "TTTHTHTTHTTTTHTTTHTTTTTTHTTTTTHTH"
counts = []
count = 1
for a, b in zip(s, s[1:]):
    if a==b:
        count += 1
    elif a == "T":
        counts.append(count)
        count = 1
</code></pre>
<p>gives:</p>
<pre><code>   counts
=&gt; [3, 1, 2, 4, 3, 6, 5, 1]
</code></pre>
</div>
<span class="comment-copy">Alternatively, <code>[sum(1 for _ in g) for k, g in groupby(s) if k == 'T']</code>. This avoids creating the <code>g</code> lists, so it's a bit more efficient, and it avoids using RAM for those temporary lists. That's irrelevant here, but it's handy when the groups are expected to be large.</span>
<span class="comment-copy">That is true, I keep forgetting about the handy <code>sum(1 for _ in x)</code>. I'll edit that in. Thanks.</span>
<span class="comment-copy">No worries. But don't totally delete the <code>len(list(g))</code>: It's good for people to know about both options.</span>
<span class="comment-copy">Thanks for the response - I had originally tried it this way, but it includes 0's in the output which isn't what i want.</span>
<span class="comment-copy">I edited to reflect that, still works better (and more readable, and less code) than other answers</span>
<span class="comment-copy">@tim You could always filter out the 0s...</span>
<span class="comment-copy">Yeah thanks - I think I missed the itertools however - which might help with some of the other stuff i'm doing :)</span>
<span class="comment-copy">Your question, your choice... happy to help</span>
