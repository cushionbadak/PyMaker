<div class="post-text" itemprop="text">
<p>I have an argparser that has a verbose flag and I'm trying to minimize the amount I have to write to get the verbose output.</p>
<p>This works as expected:</p>
<pre><code>#!/usr/bin/python
verbose=True
print(verbose)
if verbose:
    print("verbose output")
</code></pre>
<p>outputs:</p>
<pre><code>$ ./example.py
True
verbose output
</code></pre>
<p>but</p>
<pre><code>#!/usr/bin/python
verbose=True
print(verbose)
print("verbose output") if verbose
</code></pre>
<p>throws an error:</p>
<pre><code>$ ./example.py
  File "./example.py", line 5
    print("verbose output") if verbose
                                     ^
SyntaxError: invalid syntax
</code></pre>
<p>I thought the python had the <code>statement if condition else condition</code> syntax? Have I made some mistake?</p>
<pre><code>$ python -V
Python 3.6.2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python <code>if</code> <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">ternary operator syntax</a> requires an <code>else</code>, like so:</p>
<pre><code>x = 2 if y &lt; 5 else 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For verbose output like this you're best off using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">Logging</a> module:</p>
<pre><code>import logging
logger = logging.getLogger(__name__)
logger.debug('foo') # prints nothing
logger.setLevel(logging.DEBUG)
logger.debug('foo') # prints 'DEBUG:name:foo'
</code></pre>
<p>You can update the format of the string it uses, links are in the documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Define an alias for <code>print</code> that either prints its argument or does nothing, depending on the value of <code>verbose</code>:</p>
<pre><code>if verbose:
    print_verbose = print
else:
    def print_verbose(*args, **kwargs):
        pass

print_verbose("This only gets printed if verbose is True")
</code></pre>
</div>
<span class="comment-copy">There is no shorthand <code>if test</code> syntax, no. There is only the <i>conditional expression</i> <code>&lt;true_expr&gt; if &lt;test_expr&gt; else &lt;false_expr&gt;</code>.</span>
<span class="comment-copy">It has the <code>expression if condition else  expression</code> syntax. It doesn't have <code>statement if condition</code>.</span>
<span class="comment-copy">You should not use that here, there is no need to 'shorten' anything. If you must, put the expression on the same line as the <code>if</code> test: <code>if verbose: print('verbose output')</code>.</span>
<span class="comment-copy">You may be thinking of Perl, which does have such a statement modifier.</span>
<span class="comment-copy"><code>logging</code> is an option, but not necessarily the appropriate one to simply control when a <code>print</code> function actually produces output. See <a href="https://docs.python.org/2/howto/logging.html#when-to-use-logging" rel="nofollow noreferrer">docs.python.org/2/howto/logging.html#when-to-use-logging</a>.</span>
<span class="comment-copy">I've read that, yes - and I think this is exactly what it's for. "Report events that occur during normal operation of a program (e.g. for status monitoring or fault investigation" - that's really what verbose output is for.</span>
<span class="comment-copy">I think of it this way: <code>print</code> is for implementing what a program does, logging is for describing how it does it.</span>
<span class="comment-copy">Depends what the OP wants verbose messages for, I suppose</span>
<span class="comment-copy">This seems to recreate the logging module, but in a harder-to-follow way</span>
<span class="comment-copy">It's not recreating the logging module. The logging module provides <i>many</i> ways to modify what exactly is output, where it is output to, and whether or not it gets output at all (especially if logging configuration is loaded from a configuration file). The only thing I am allowing to be configured is whether or not a <code>print</code> function is called. If it <i>is</i> called, what it does is still under full control of the code as written.</span>
