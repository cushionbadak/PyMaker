<div class="post-text" itemprop="text">
<blockquote>
<p>Why I need to add 5 backslash on the left if I want to show three of them in Python? How to count the backslash?</p>
</blockquote>
<pre><code># [ ] print "\\\WARNING!///"
print('"\\\\\Warning///"')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>\</code> is used for special characters like <code>'\n'</code>, <code>'\t'</code> etc. You should type <code>2n</code>  or  <code>2n-1</code> <code>\</code> for printing  <code>n</code> <code>\</code>.</p>
<pre><code>&gt;&gt;&gt; print('\warning') # 1 \
\warning
&gt;&gt;&gt; print('\\warning') # 2 \
\warning
&gt;&gt;&gt; print('\\\warning') # 3 \
\\warning
&gt;&gt;&gt; print('\\\\warning') # 4 \
\\warning
&gt;&gt;&gt; print('\\\\\warning') # 5 \
\\\warning
&gt;&gt;&gt; print('\\\\\\warning') # 6 \
\\\warning
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a "raw string" by adding <code>r</code>:</p>
<pre><code>print(r'"\\\Warning///"')
</code></pre>
<p>This helps to avoid the backslash's "escape" properties, which python uses to control the use of special characters </p>
</div>
<div class="post-text" itemprop="text">
<p>Backslash is taken as escape sequence most of the time thus for printing single <code>\</code> one needs to use <code>\\</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike standard C, any unrecognized escape sequences are left unchanged in python.</p>
<pre><code>&gt;&gt;&gt; print('\test')
'    est'  # '\t' evaluates to tab + 'est'

&gt;&gt;&gt; print('\\test')
'\test'  # '\\' evaluates to literal '\' + 'test'

&gt;&gt;&gt; print('\\\test')
'\    est'  # '\\' evaluates to literal '\' + '\t' evaluates to tab + 'est'

&gt;&gt;&gt; print('\\\\test')
'\\test'  # '\\' evaluates to literal '\' + '\\' evaluates to literal '\' + 'test'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>according to <a href="https://docs.python.org/2.0/ref/strings.html" rel="nofollow noreferrer">https://docs.python.org/2.0/ref/strings.html</a></p>
<blockquote>
<p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the string. </p>
</blockquote>
<p>since <code>\W</code> is not a valid escape sequence, <code>\W</code> is printed as it is. on the other hand <code>\\</code> is printed as <code>\</code>.</p>
<p>so <code>\\\\\W</code> is printed as <code>\\\W</code></p>
<p>However, in python 3.6, according to <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">Strings and bytes literals</a></p>
<blockquote>
<p>Changed in version 3.6: Unrecognized escape sequences produce a DeprecationWarning. In some future version of Python they will be a SyntaxError.</p>
</blockquote>
<p>So your code might give SyntaxError in future python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually you should type 2n backslashes to represent n of them, technically. In a strict grammar, backslash is reserved as an escape character and has a special meaning, i.e., it does not represent "backslash". So, we took it from our character set to give it a special meaning then how to represent a pure "backslash"? The answer is represent it in the way newline character is represented, namely '\' stands for a backslash.</p>
<p>And the reason why you get 3 backslashes printed when 5 is typed is: The first 4 of them is interpreted as I said above and when it comes to the fifth one, the interpreter found that there is no definition for '\W' so it treated the fifth backslash as a normal one instead of a escape character. This is an advanced convenience feature of the interpreter and might not be true in other versions of it or in other languages (especially in more strict ones).</p>
</div>
<span class="comment-copy">\ is used for special characters like <code>'\n'</code>, <code>'\t'</code> etc... and so \ is coded as a special character as well as <code>'\\'</code>. So just double all your \. (It may work sometimes without doubling them, but it will work for sure if you always double them.)</span>
<span class="comment-copy">Follow this <a href="https://stackoverflow.com/questions/39323050/in-python-syntaxerror-eol-while-scanning-string-literal">question</a>, it has good explanation.</span>
<span class="comment-copy">raw strings don't necessarily work: <code>r"\"</code> is broken.</span>
<span class="comment-copy">You're right, I didn't know that... But it does work for multiple backspaces like OP wants</span>
