<div class="post-text" itemprop="text">
<p>I have been using python to do ascii-to-binary translations and kept running into issues with parsing the result. Eventually I thought to look at what the Python commands were generating.</p>
<p>There seems to be a rouge <code>0xc2</code> inserted in the output (for example):</p>
<pre><code>$ python -c 'print("\x80")' | xxd
00000000: c280 0a                                  ...
</code></pre>
<p>Indeed this happens regardless of where such bytes are used:</p>
<pre><code>$ python -c 'print("Test\x80Test2\x81")' | xxd
00000000: 5465 7374 c280 5465 7374 32c2 810a       Test..Test2...
</code></pre>
<p>On a hunch, I poked around at <a href="http://www.utf8-chartable.de/unicode-utf8-table.pl?start=128&amp;number=128&amp;names=-&amp;utf8=0x" rel="nofollow noreferrer">UTF-8</a> and sure enough, <code>U+0080</code> is encoded as <code>0xc2 0x80</code>. Apparently, Python takes the liberty of assuming by <code>\x80</code> I <em>actually</em> meant the encoding for <code>U+0080</code>. Is there  a way to change this default behavior or otherwise explicitly dictate my intention of including the singlar byte <code>0x80</code> and not the UTF encoding?</p>
<p><code>Python 3.6.2</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 does the right thing of inserting a character into a <code>str</code> which is string of characters, not a byte sequence.</p>
<p>UTF8 is the default encoding. If you need to insert a byte, a different encoding where that character is represented as a byte is needed.</p>
<pre><code>$ PYTHONIOENCODING=iso-8859-1 python3 -c 'print("\x80")' | xxd
00000000: 800a
</code></pre>
<blockquote>
<p>PYTHONIOENCODING</p>
<p>If this is set before running the interpreter, it overrides the encoding used for stdin/stdout/stderr, in the syntax
  encodingname:errorhandler. Both the encodingname and the :errorhandler
  parts are optional and have the same meaning as in str.encode().</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you want to output raw bytes in Python 3 you shouldn't be using the <code>print</code> function, since it's for outputting text in your default encoding. Instead, you can use <code>sys.stdout.buffer.write</code>.</p>
<p>ASCII is a 7 bit encoding, so if your so-called ASCII contains characters like <code>b'\x80'</code> it's not legal ASCII. Perhaps your data is actually encoded with iso-8859-1, aka latin-1, or it could be the closely-related Windows variant <a href="https://en.wikipedia.org/wiki/Windows-1252" rel="nofollow noreferrer">cp1252</a>. To do this kind of thing correctly you need to determine the actual encoding that was used to create the data.</p>
<p>If you want to output <code>"Test\x80Test2\x81"</code> and have the hex dump look like this:</p>
<pre><code>00000000  54 65 73 74 80 54 65 73  74 32 81                 |Test.Test2.|
</code></pre>
<p>You can do</p>
<pre><code>import sys
s = "Test\x80Test2\x81"
sys.stdout.buffer.write(s.encode('latin1'))
</code></pre>
<p>This works because Latin-1 is a subset of Unicode. Here's a quick demo:</p>
<pre><code>import binascii

a = ''.join([chr(i) for i in range(256)])
b = a.encode('latin1')
print(binascii.hexlify(b))
</code></pre>
<p><strong>output</strong></p>
<pre><code>b'000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff'
</code></pre>
<p>However, if you're actually working with binary data then you shouldn't be storing it in text strings in the first place, you should be using <code>bytes</code>, or possibly <code>bytearray</code>. The sane way to produce the <code>b</code> bytes string from my previous example is to do </p>
<pre><code>b = bytes(range(256))
</code></pre>
<p>And if you have a <code>bytes</code> object like <code>b"Test\x80Test2\x81"</code> you can dump those bytes to stdout with </p>
<pre><code>sys.stdout.buffer.write(b"Test\x80Test2\x81")
</code></pre>
</div>
<span class="comment-copy">Are you aware of pythons <code>bytes</code> type? <a href="https://docs.python.org/3/library/stdtypes.html#bytes-objects" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#bytes-objects</a></span>
<span class="comment-copy">Changing the global encoding for strings is a (quite inelegant) global solution to a local problem. If OP is building a bytes sequence and not a character sequence he should use <code>byte</code> objects and not <code>str</code> objects (or, of anything, encode just the relevant <code>str</code> objects to Latin1 using the <code>encode</code> method).</span>
<span class="comment-copy">@MatteoItalia Yes, but I do not understand this case like a "local problem". The OP asked for changing the default and mentioned that ascii-to-binary translations are what he is using the program for.</span>
<span class="comment-copy">Fair enough, although the OP isn't <i>really</i> doing ascii-to-binary translation, since <code>b'\x80'</code> isn't legal ASCII.</span>
<span class="comment-copy">@PM2Ring, Such pendantism. Sure, <code>\x80</code> is not legal printable ASCII, but it was clear what my intentions were. Perhaps <i>hex to binary</i> is a better description.</span>
<span class="comment-copy">@sherrellbc Perhaps it is a bit pedantic, but when you're doing stuff with character encodings it pays to be pedantic. ;)</span>
<span class="comment-copy">Thanks for the example. There is no data storage. My use-case was to generate a string of ASCII and non-printables and then pipe it directly to stdin of a program under test.</span>
<span class="comment-copy">@sherrellbc No worries. In that case you definitely don't want to use text strings for this, do everything with <code>bytes</code> and <code>bytearray</code>s.</span>
<span class="comment-copy">@sherrellbc And if the program that you're piping this binary data to is a Python 3 program then you should get it to read the data from <code>sys.stdin.buffer</code>, don't read it by calling <code>input</code>, because that expects text strings.</span>
