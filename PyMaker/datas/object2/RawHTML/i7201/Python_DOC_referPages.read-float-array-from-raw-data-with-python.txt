<div class="post-text" itemprop="text">
<p>I have a binary file containing the position of 8000 particles. 
I know that each particle value should look like "-24.6151..." (I don't know with which precision the values are given by my program. I guess it is double precision(?).</p>
<p>But when I try to read the file with this code:</p>
<pre><code>In: with open('.//results0epsilon/energybinary/energy_00004.dat', 'br') as f:
    buffer = f.read()
    print ("Lenght of buffer is %d" % len(buffer))

    for i in buffer:
        print(int(i))
</code></pre>
<p>I get as output:</p>
<pre><code>Lenght of buffer is 64000

10

168

179

43
...
</code></pre>
<p>I skip the whole list of values but as you can see those values are far away from what I expect. I think I have some kind of decoding error.</p>
<p>I would appreciate any kind of help :) </p>
</div>
<div class="post-text" itemprop="text">
<p>What you are printing now are the <code>bytes</code> composing your floating point data. So it doesn't make sense as numerical values.</p>
<p>Of course, there's no 100% sure answer since we didn't see your data, but I'll try to guess:</p>
<p>You have 8000 values to read and the file size is 64000. So you probably have <code>double</code> IEEE values (8 bytes each). If it's <em>not</em> IEEE, then you're toast.</p>
<p>In that case you could try the following:</p>
<pre><code>import struct
with open('.//results0epsilon/energybinary/energy_00004.dat', 'br') as f:
    buffer = f.read()
    print ("Length of buffer is %d" % len(buffer))

    data = struct.unpack("=8000d",buffer)
</code></pre>
<p>if the data is printed bogus, it's probably an endianness problem. So change the <code>=8000</code> by <code>&lt;8000</code> or <code>&gt;8000</code>.</p>
<p>for reference and packing/unpacking formats: <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html</a></p>
</div>
<span class="comment-copy">I can try <code>struct</code> library to unpack binary files - <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">docs.python.org/3/library/struct.html</a></span>
<span class="comment-copy">You cn use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module to unpack (or pack) binary data.</span>
<span class="comment-copy">with print(data) I got the following output (-24.615130168305804, -24.61513016830572...) as expected. Now I can process it further. Thank you very much :)</span>
