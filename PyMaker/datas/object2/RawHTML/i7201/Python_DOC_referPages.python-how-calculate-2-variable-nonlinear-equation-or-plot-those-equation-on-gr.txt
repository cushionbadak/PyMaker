<div class="post-text" itemprop="text">
<p>I hope to gain some solutions (x and y) from two nonlinear equations.
So I write some code, and insert the equations, but It does not work.</p>
<p>As I know, The problem is generated at f2=math.acos(~~~) , that is "ValueError: math domain error"
(Actually, When I erase math.acos and they show some wrong but specific solution.)</p>
<p>So, please I ask some help to know the way, 
   (1) how I gain certain solution of 'f1=~', 'f2=~' as x, y. 
   (2) how I draw some plot for 'sub_equation=~' and 'f1=~'.</p>
<p>I am really looking for some help. Thank you.</p>
<pre><code>from scipy.optimize import fsolve
import math
import numpy as np
import matplotlib.pyplot as plt




###Input###
Angle = 120.0
length_Porpyrin =18.6
length_linker = 12.5
###parameter###
length_1 = length_Porpyrin/2.0
lenght_2 = length_linker/2.0
delta = np.pi*Angle/180.0/2.0
ramda = 30.18/180.0*np.pi
bond_angle = 2.0*np.pi/3.0
length_d = 1.35



def equations(p):
    x,y = p
    ### modified Variable ###
    atr1 = np.arctan(length_1 / x)
    atr2 = np.arctan(lenght_2 / y)
    sub_equation = ( length_d ** 2+(y/np.cos(np.arctan(lenght_2 / y))) ** 2-(x/np.cos(np.arctan(length_1 / x))) ** 2 )*np.cos(np.arctan(lenght_2 / y)) / ( 2 * length_d * y )
    ##########################
    f1 = (  (x/np.cos(np.arctan(length_1 / x))) ** 2 + (y/np.cos(np.arctan(lenght_2 / y))) ** 2 - 2 *( x/np.cos(np.arctan(length_1 / x))) * (y/np.cos(np.arctan(length_1 / x))) *  np.cos(ramda-np.arctan(length_1 / x)-np.arctan(lenght_2 / y))  ) - length_d ** 2
    f2 = math.acos(sub_equation)  -  ( bond_angle -(np.pi-np.arctan(lenght_2 / y)-delta))
    return (f1, f2)


solution = fsolve(equations, (25,25))
radius1 = solution[0]
radius2 = solution[1] 


print('[solution]')
print(solution)
print('radius1', radius1)
print('radius2', radius2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the error might be in the fact that when you use an inverse trig function (like arccos (acos), arcsin (asin)). Some inverse trig functions have domains, and if a value that happens to be plugged in that is it out of that domain, it will result in a domain error.</p>
<p>Below are the <strong>domains of each inverse trig function</strong> (R = all real nums): </p>
<p><a href="https://i.stack.imgur.com/hJtM5.gif" rel="nofollow noreferrer"><img alt="Inverse Trig Function Domains" src="https://i.stack.imgur.com/hJtM5.gif"/></a></p>
<p>So the solution would be to put some kind of bounds on the parameter that can be entered into the inverse (arc) functions. Or you could try handling the exception using a try except block. Here's the Python Documentation for that: <code>https://docs.python.org/3/tutorial/errors.html</code> (go to section 8.3).</p>
</div>
<div class="post-text" itemprop="text">
<p>slongo has already explained what the error means: <code>math.acos()</code> was called with an argument either greater than 1 or smaller than -1 -- and that should never happen.</p>
<p>In other words: Try directly plotting the value of <code>sub_equation</code> -- that should always stay within [-1;1]. If does not, then there is probably something wrong, either with your definition of <code>sub_equation</code> or with the values of the variables you put into it.</p>
<p>I assume that you have an idea of what the meaning of those equations and the individual terms is, so if there is an error in the definition of <code>sub_equation</code> but you can't easily find it, I'd suggest looking at the individual parts of it: define and plot them separately, to see which ones are what you'd expect and which ones are not.</p>
</div>
<span class="comment-copy">Yes, I see. I need to bound the inner term of math.acos() to [-1,1]. But how? with defining the each equations and variable(x,y). It make some error.</span>
<span class="comment-copy">Thank you, Zak. Yes, I catch the point, maybe inert term sould be bounded to [-1,1]. But, How.. I have searched quite webpage, but it does not work.</span>
<span class="comment-copy">@Dasol, if your equation can produce a number outside of [-1,1], that means there's probably an error in it. That means either it has not been derived correctly, or implemented wrong. My recommendation is that you plot <code>sub_equation</code> and check whether the numbers make any sense.</span>
