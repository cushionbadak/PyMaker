<div class="post-text" itemprop="text">
<p>I'm trying to write 32 bit integer to byte array (which is Node.js buffer).</p>
<p>As i know, Node.js Buffer objects <code>allocUnsafe</code> function returns array of pseudo-randomly generated numbers encoded in hexadecimal format.</p>
<p>So i interpreted Node.js <code>Buffer.allocUnsafe(n)</code> method in Python:</p>
<p><code>[c.encode('hex') for c in os.urandom(n)]</code></p>
<p>But then, <code>allocUnsafe</code> function has its own nested functions <code>writeInt32BE(value, offset)</code> and <code>writeInt32LE(value, offset)</code>, I have read the official documentation, But i didn't understand what was exactly returned from these functions.</p>
<p>Is there any equivalent method for these Node.js functions in Python? As i know equal action in Python can be done with <code>struct</code> module and <code>from_bytes</code> method works too, But i'm not sure how. Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python provides methods like <code>int.to_bytes(size,byteorder)</code> See <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer">here</a><br/>
So in order to convert number to 32 bit we take length in to_bytes method to be 4 i.e <code>4*8 = 32 bits</code>.<br/>
<code>int.from_bytes</code> function converts the bytes to int See <a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer">here</a> </p>
<pre><code> &gt;&gt;&gt; n = 512
 &gt;&gt;&gt; n_byte = (n).to_bytes(4,byteorder='big')
 b'\x00\x00\x02\x00'
 &gt;&gt;&gt; int.from_bytes(n_byte,byteorder='big')
 512
</code></pre>
<p>Default representation in bytes is signed representation of integer.<br/>
From docs :  </p>
<pre><code>&gt;&gt;&gt; int.from_bytes(b'\x00\x10', byteorder='big')   16  
&gt;&gt;&gt; int.from_bytes(b'\x00\x10', byteorder='little')  4096  
&gt;&gt;&gt; int.from_bytes(b'\xfc\x00', byteorder='big', signed=True)  
-1024  
&gt;&gt;&gt; int.from_bytes(b'\xfc\x00', byteorder='big', signed=False) 64512  
&gt;&gt;&gt; int.from_bytes([255, 0, 0], byteorder='big')   16711680
</code></pre>
<p>You can check out the hex representation to converting to integer   </p>
<pre><code>&gt;&gt;&gt; hex(6)
'0x6'  
&gt;&gt;&gt; int('0xfeedface',16)
4277009102
</code></pre>
</div>
<span class="comment-copy">Hello, Thanks for the answer. Sorry if i misunderstood, But on Node.js buffer of <code>28 9f 04 03 01 00 00 00 04 00</code> returns <code>6</code> on <code>writeUInt32BE</code> method, But in Python <code>int.from_bytes(b'(\x9f\x04\x03\x01\x00\x00\x00\x04\x00', "big", signed=False)</code> returns <code>191827980698406220727296</code> Were arguments entered incorrectly? (First argument of the from_bytes function is Node.js's buffer characters decoded in hex).</span>
<span class="comment-copy">@ShellRox If you have read the method in docs correctly. the function writeUInt32BE has arguments integer and offset where offset decide from where to put the representation in buffer. The integer gets converted into hex form and crossponding characters are stored in the buffer.  <code>const buff = Buffer.allocUnsafe(4);</code> <code>buff.writeUInt32BE(16, 0);</code> which makes buff <code>&lt;Buffer 00 00 00 10&gt;</code> i.e. hex representation stored in Buffer.</span>
<span class="comment-copy">@ShellRox Can you specifically tell what problem you are facing or ask for the community in a fresh question thread. Since your problem has changed much. Do give a shot to reading documentation again hope it helps. <a href="https://nodejs.org/api/buffer.html" rel="nofollow noreferrer">nodejs.org/api/buffer.html</a></span>
<span class="comment-copy">In docs you can read a line <a href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size" rel="nofollow noreferrer">nodejs.org/api/â€¦</a> Here you will get to know that the integer you want to put inside will be stored in unitialized memory so you will see some random numbers in the buffer.</span>
<span class="comment-copy">@ShellRox See here for better understanding <a href="https://repl.it/JrwD/4" rel="nofollow noreferrer">repl.it/JrwD/4</a> I can't be more clear than this.</span>
