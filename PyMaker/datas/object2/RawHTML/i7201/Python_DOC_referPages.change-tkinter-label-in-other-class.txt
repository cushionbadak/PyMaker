<div class="post-text" itemprop="text">
<p>Can somebody help me please, I'm making an exercise about class and running task on other thread then tkinter. I want to change the label in another class. Can't get my script to work.</p>
<p>I tried different things but I'm having some troubles with understanding the inheriting from classes and the threads, so this is just an example to learn more about it.</p>
<pre><code>from tkinter import *
import tkinter as tk
from tkinter import ttk
import threading

#Gloabl for stopping the run task
running = True

#class 1 with window
class App():

     def __init__(self):
          #making the window
          self.root = tk.Tk()
          self.root.geometry("400x400+300+300")
          self.root.protocol("WM_DELETE_WINDOW", self.callback)
          self.widgets()
          self.root.mainloop()

     # stop task and close window
     def callback(self):
          global running
          running = False
          self.root.destroy()

     # all the widgets of the window
     def widgets(self):
          global labelvar
          #startbutton
          self.start_button = tk.Button(self.root, text="Start",     command=lambda:App2())
          self.start_button.pack()

          #stopbutton
          self.stop_button = tk.Button(self.root, text="Stop", command=lambda:self.stop())
          self.stop_button.pack()

          #Defining variable for text for label
          labelvar = "Press start to start running"
          self.label = tk.Label(self.root, text=labelvar)
          self.label.pack()

     #stop the task
     def stop(self):
          global running
          running = False


#class 2 with task in other thread
class App2(threading.Thread):

     def __init__(self):
          global running
          #check if task can be run
          running = True
          threading.Thread.__init__(self)
          self.start()

     def run(self):
               #starting random work
               for i in range(10000):
                    print(i)
                    labelvar = "running"
                    App.label.pack()
                    #checking if task can still be running else stop task
                    if running == False:
                         break
                         labelvar = "stopped"
                         App.label.pack()

#initiate main app
app = App()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As I said in a comment, <code>tkinter</code> doesn't support multithreading itself, but you <em>can</em> do it as long as only one thread, usually the main one, uses (or "talks") it.</p>
<p>If you want to affect what the GUI displays, the other thread(s) must communicate somehow with the GUI thread. This is often done through a <a href="https://docs.python.org/3/library/queue.html#" rel="nofollow noreferrer"><code>queue.Queue</code></a>, but in this relatively simple case it can be done through a <code>global</code> variable <em>provided that concurrent access to it is controlled</em> by some means—sharing memory space (i.e. global variables) is one of the advantages of multithreading vs multitasking, but it has to be done and done correctly.</p>
<p>An easy way to share a resource like this is by using a <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer"><code>threading.Lock</code></a> dedicated for that purpose. (See the Wikipedia article <a href="https://en.wikipedia.org/wiki/Lock_(computer_science)" rel="nofollow noreferrer"><strong><em>Lock (computer science)</em></strong></a> for more details.)
All references to this shared resource (the <code>running</code> flag) should only be done after "acquiring" the <code>Lock</code> and "releasing" it afterwards. Fortunately it's trivial to do this using a Python <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code></a> statement (as shown below).</p>
<p>Another crucial aspect of the multithreading problem is how any information exchanged between the two threads is processed. In this case I choose to make the <code>tkinter</code> thread <strong>poll</strong> the running flag, watch for changes, and update any affected widgets accordingly. This can be done by using the universal widget method <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/universal.html" rel="nofollow noreferrer"><code>after()</code></a> which tells <code>tkinter</code> to schedule a future call (inside the 'mainloop') to a user-supplied function or method and to pass it certain arguments. To get this to happen repeatedly, the called function can reschedule <em>itself</em> to run again by calling <code>after()</code> before it finishes.</p>
<p>Below is a modified version of your code that does these thing. Note that <code>App2</code> never calls <code>tkinter</code> or touches any of its widgets, which is why it works.</p>
<pre><code>import threading
from time import sleep
from tkinter import *
import tkinter as tk
from tkinter import ttk

DELAY = 100  # millisecs between status label updates

# global flag and a Lock to control concurrent access to it
run_flag_lock = threading.Lock()
running = False


# class 1 with window
class App():
    def __init__(self):
        global running
        self.root = tk.Tk()
        self.root.geometry("400x400+300+300")
        self.root.protocol("WM_DELETE_WINDOW", self.quit)
        self.create_widgets()
        with run_flag_lock:
            running = False
        self.root.after(DELAY, self.update_status, None)  # start status widget updating
        self.root.mainloop()

    # create all window widgets
    def create_widgets(self):
        self.start_button = tk.Button(self.root, text="Start", command=self.start)
        self.start_button.pack()

        self.stop_button = tk.Button(self.root, text="Stop", command=self.stop)
        self.stop_button.pack()

        self.status_label = tk.Label(self.root, text='')
        self.status_label.pack()

    def update_status(self, run_state):
        """ Update status label text and state of buttons to match running flag. """
        # no need to declare run_flag_lock global since it's not being assigned a value
        with run_flag_lock:
            if running != run_state:  # status change?
                if running:
                    status_text = 'Press Stop button to stop task'
                    run_state = True
                else:
                    status_text = 'Press Start button to start task'
                    run_state = False
                self.status_label.config(text=status_text)
                # also update status of buttons
                if run_state:
                    self.start_button.config(state=DISABLED)
                    self.stop_button.config(state=ACTIVE)
                else:
                    self.start_button.config(state=ACTIVE)
                    self.stop_button.config(state=DISABLED)

        # run again after a delay to repeat status check
        self.root.after(DELAY, self.update_status, run_state)

    # start the task
    def start(self):
        global running
        with run_flag_lock:
            if not running:
                app2 = App2()  # create task thread
                app2.start()
                running = True

    # stop the task
    def stop(self):
        global running
        with run_flag_lock:
            if running:
                running = False

    # teminate GUI and stop task if it's running
    def quit(self):
        global running
        with run_flag_lock:
            if running:
                running = False
        self.root.destroy()


# class 2 with task in another thread
class App2(threading.Thread):
    def __init__(self):
        super(App2, self).__init__()  # base class initialization
        self.daemon = True  # allow main thread to terminate even if this one is running

    def run(self):
        global running
        # random work
        for i in range(10000):
            print(i)
            # Normally you shouldn't use sleep() in a tkinter app, but since this is in
            # a separate thread, it's OK to do so.
            sleep(.25)  # slow printing down a little
            # stop running if running flag is set to false
            with run_flag_lock:
                if not running:
                    break  # stop early

        with run_flag_lock:
            running = False  # task finished

# create (and start) main GUI app
app = App()
</code></pre>
</div>
<span class="comment-copy"><code>tkinter</code> doesn't inherently support multithreading. Only the main thread can make calls to it to update the GUI—so while you <i>can</i> use threads, you'll need to be mindful of that restriction and code around it.</span>
<span class="comment-copy">Thank you for the clear info and a possible solution. I will have to go deeper in threading.Is it the delay that is causing my loop to run slower?  Is that anything i can avoid or is that something i would want in my code ?</span>
<span class="comment-copy">You didn't use the .pack() after changing the status_text, is that because you update the whole frame every 100 milisec? Is this kind of updating the frame something i better use in every program using a sort of 'interactive' tkinter frame? I just saw the .sleep statement you use in the loop to slow it down , didn't see that.</span>
<span class="comment-copy">I intentionally added a call to <code>sleep()</code> inside the <code>for</code> loop that's in the <code>App2.run()</code> method <b>to</b> slow it down, which I see you figured-out. You only have to <code>pack()</code> a widget once. After that you can adjust its settings at any time by just using its <code>config()</code> method. How often (the speed-of-updating) is up to you. I chose 100 ms because it's less than the .25 sec delay I added to the 'for' loop in the thread (so it'll always keep-up with it).</span>
<span class="comment-copy">That's good to hear...and in that case, please accept my answer. See <a href="http://stackoverflow.com/help/someone-answers"><i>What should I do when someone answers my question?</i></a> Also, as far as always using this technique. You always have to do something to handle any information exchange between the threads. A <code>Lock</code> is just one way to do so that was good enough for this. For other types of data, a <code>Queue</code> might be a better choice—depends on exactly you're doing and the type and amount of information.</span>
