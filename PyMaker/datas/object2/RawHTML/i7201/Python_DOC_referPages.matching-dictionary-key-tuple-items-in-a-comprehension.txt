<div class="post-text" itemprop="text">
<p>When using a comprehension expression that scans a dictionary,
if I know the keys of the dictionary are simple 2 items tuples,
is it possible to "expand" them to named  variables?</p>
<p>e.g. if I have: </p>
<pre><code>d = { ('car','blue') : 24,
      ('car',    'red'  ): 5,
      ('plant',     'green'): 12,
      ('box','blue' ): 3
}
</code></pre>
<p>I know I can do </p>
<pre><code>[d[key] for key in d.keys() if key[1]=='blue']
</code></pre>
<p>and get</p>
<pre><code>[24, 3]
</code></pre>
<p>But this loses a lot of the semantics and I wanted to know if I can somehow do something more like:</p>
<pre><code>[count for {(object,color):count} in d if color=='blue']
</code></pre>
<p>(which I know does not work).
Also I don't understand why the error returned for the last expression is: </p>
<p><code>SyntaxError: can't assign to literal</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I would go with:</p>
<p><code>[count for (object, color), count in d.items() if color == 'blue']</code></p>
<p>as the clearest solution.</p>
<p>The error you are getting is because when using the <code>in</code> keyword python is trying to assign an item from <code>d</code> dictionary to <code>{(object,color):count}</code> which is a literal means create a new dictionary. instead, use <code>(object, color), count</code> as this is how python expands dict items.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't quite do that, but you can get close if you "upgrade" your keys to <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuples</a>. I'm using 'kind' as the name of the first item in the namedtuple because <code>object</code> is a built-in type, and although we can safely use it here I think it'd make the code a bit confusing.</p>
<pre><code>from collections import namedtuple

d = { ('car', 'blue') : 24,
      ('car', 'red'): 5,
      ('plant', 'green'): 12,
      ('box', 'blue'): 3
}

Thing = namedtuple('Thing', ('kind', 'color'))
d = {Thing(*key): count for key, count in d.items()}
print(d)

lst = [count for key, count in d.items() if key.color == 'blue']
print(lst)
lst = [count for key, count in d.items() if key.kind == 'car']
print(lst)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{Thing(kind='car', color='blue'): 24, Thing(kind='car', color='red'): 5, Thing(kind='plant', color='green'): 12, Thing(kind='box', color='blue'): 3}
[24, 3]
[24, 5]
</code></pre>
<hr/>
<p>Actually, you don't really <em>need</em> namedtuples, although I think they make it a bit nicer. ;)</p>
<pre><code>d = { ('car', 'blue') : 24,
      ('car', 'red'): 5,
      ('plant', 'green'): 12,
      ('box', 'blue'): 3
}

lst = [count for (kind, color), count in d.items() if color == 'blue']
print(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible. Try:</p>
<pre><code>  [d.get((object,color)) for object,color in d.keys() if color == 'blue']
</code></pre>
<p>this returns </p>
<pre><code>  [24, 3]
</code></pre>
</div>
<span class="comment-copy"><code>[count for (object, color), count in d.items() if color == 'blue']</code>?</span>
<span class="comment-copy"><code>[d[object,color] for object,color in d if color=='blue']</code></span>
<span class="comment-copy">I'll pay that. ;)</span>
<span class="comment-copy">Great, this is exactly what I was looking for.  So 3 mistakes on my side: 1) no need for <code>{ }</code>'s around the the variables into which the unpacking happens 2)The key and value part should be separated by a comma and not a colon 3) use <code>in d.items()</code> and not <code>in d</code>.</span>
<span class="comment-copy">no need for <code>.get</code> because the keys come from the dictionary itself so it is assured they exist there.</span>
