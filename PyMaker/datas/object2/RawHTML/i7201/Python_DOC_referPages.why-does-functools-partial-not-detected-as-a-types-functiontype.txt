<div class="post-text" itemprop="text">
<p>In my code I need to detect if a variable is a function or not and preform some actions on it. </p>
<p>Everything went well until I now created a partial function using <code>functools</code> and suddenly some of my tests fail:</p>
<pre><code>import types
import functools

def f(s):
    print(s)

l = lambda s: print(s)

pf = functools.partial(f, 'Hello World')
pl = functools.partial(l, 'Hello World')
test_f = isinstance(f, types.FunctionType) # True
test_l = isinstance(l, types.FunctionType) # True
test_pf = isinstance(pf, types.FunctionType) # False
test_pl = isinstance(pl, types.FunctionType) # False
</code></pre>
<p>Why is there a difference between those? Both varieties are callable... Even more importantly, how can I detect if some variable is a function or not even when it's a partial function if I can't use <code>types.FunctionType</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> is a <em>class</em> with a <code>__call__</code> method, it says in the documents:</p>
<blockquote>
<p>Return a new <code>partial</code> <strong>object</strong> which when called will <strong>behave like</strong> <em>func</em></p>
</blockquote>
<p>(bold emphasis added by me)</p>
<p>We can confirm this in our Python REPL:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; add_one = partial(sum, 1)
&gt;&gt;&gt; type(add_one)
&lt;class 'functools.partial'&gt;
</code></pre>
<p>A Python equivalent would be something like this:</p>
<pre><code>class Partial:

    def __init__(self, func, *args, **kwargs):
        self.func = func
        self.args = args
        self.kwargs = kwargs

    def __call__(self, *args, **kwargs):
        return self.func(*self.args, *args, **self.kwargs, **kwargs)
</code></pre>
<p>So it creates a simple wrapper object around the function, and an object like this simply isn't a function. <code>types.FunctionType</code> only works on actual functions.</p>
<p>What you're looking for is a way to check if an object is <em>callable</em>, for that you can use the built-in <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a> function:</p>
<pre><code>&gt;&gt;&gt; callable(sum)
True
&gt;&gt;&gt; callable(3)
False
&gt;&gt;&gt; callable(functools.partial(sum, 1))
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In most cases, you don't <em>need</em> to know if something is a function.  Frequently, all you care about is that the object is <em>callable</em>.  To check this, python has a builtin function called <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a>.</p>
<p>Note that just because <code>callable</code> returns <code>True</code>, it does not mean that calling the object will succeed.  However, the same could easily be said for calling functions :-).</p>
<hr/>
<p>If you really only want to handle functions and <code>partial</code> objects, then you can write your check as:</p>
<pre><code>isinstance(obj, (types.FunctionType, functools.partial))
</code></pre>
<p>But this isn't sufficiently "ducky" for my tastes.</p>
</div>
<span class="comment-copy">Why do you need to check if something is a function explicitly?  Is it good enough to check if that something is <a href="https://docs.python.org/3/library/functions.html#callable" rel="nofollow noreferrer"><code>callable</code></a>?</span>
<span class="comment-copy"><i><code>types.FunctionType</code>, <code>types.LambdaType</code> - The type of user-defined functions and functions created by <code>lambda</code> expressions.</i> â€” clearly doesn't include whatever <code>partial</code> returns.</span>
<span class="comment-copy">@mgilson it's possible, I'm not entirely against it if there is no other solution, but was hoping there is</span>
<span class="comment-copy">@deceze the docs claim that a function is returned: <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">docs.python.org/3/library/functools.html</a></span>
<span class="comment-copy">@OferSadan The docs say: "Return a new partial object which when called will behave like func"</span>
<span class="comment-copy">Nice answer, but are you sure it's an object like that? The docs claim it's a function: <a href="https://docs.python.org/3/library/functools.html" rel="nofollow noreferrer">docs.python.org/3/library/functools.html</a></span>
<span class="comment-copy">@OferSadan -- No, the docs claim that it's <i>roughly equivalent</i> to the function listed.</span>
<span class="comment-copy"><code>isinstance(obj, (types.FunctionType, functools.partial))</code> please no, this is just begging for future bugs</span>
