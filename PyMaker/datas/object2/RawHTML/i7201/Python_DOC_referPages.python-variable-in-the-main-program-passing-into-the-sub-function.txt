<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/291978/short-description-of-the-scoping-rules">Short description of the scoping rules?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>Python rookie question, in the following code,how does batch_size passing into sub function eval_on_data ? Is it global variable? </p>
<pre><code>epochs = 10 
batch_size = 128

def eval_on_data(X, y, sess):
    total_acc = 0
    total_loss = 0
    for offset in range(0, X.shape[0], batch_size):
        end = offset + batch_size
        X_batch = X[offset:end]
        y_batch = y[offset:end]

       loss, acc = sess.run([loss_op, accuracy_op], feed_dict={features: X_batch, labels: y_batch})
        total_loss += (loss * X_batch.shape[0])
        total_acc += (acc * X_batch.shape[0])

   return total_loss/X.shape[0], total_acc/X.shape[0]

   ...

   val_loss, val_acc = eval_on_data(X_val, y_val, sess)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Variables that are only referenced inside a function are implicitly
  global. If a variable is assigned a value anywhere within the
  function’s body, it’s assumed to be a local unless explicitly declared
  as global.</p>
</blockquote>
<p>From: <a href="https://docs.python.org/3/faq/programming.html" rel="nofollow noreferrer">https://docs.python.org/3/faq/programming.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Look at the following code snippet as an explanation:</p>
<pre><code>a, b, c = 1, 2, 3

def fun1():
  a = 4
  def fun2():
    b = 5
    print a,b,c

  fun2()
</code></pre>
<p>
<pre><code>&gt;&gt;&gt; fun1()
4 5 3
&gt;&gt;&gt; print a,b,c
1 2 3
</code></pre>
<p>When you define a function, it 'inherits' variables from the calling scope.<br/>
Obviously, once you redefine that variable locally within a function, then the local definition applies for the remainder<sup>1</sup> of the function.</p>
<p>This is why <code>fun1</code> inherits <code>b</code> and <code>c</code>, defined at "top level" (i.e. <code>fun1</code>'s enclosing scope), which it then passes on further to the 'nested' function <code>fun2</code>.</p>
<p><code>fun2</code> (whose enclosing scope is <code>fun1</code>) then inherits <code>a</code> as defined within <code>fun1</code>, as well as <code>b</code> and <code>c</code>, since this was inherited by <code>fun1</code>.</p>
<p>Specifically, note that <code>a</code> inside <code>fun2</code> is <code>4</code>, not the global <code>1</code> (as another answer here seemed to suggest).</p>
<p>When you only have one function defined at top level, you could conceptually perceive that as being 'nested' at the top level, and therefore inherits the variables defined at top level (i.e. effectively global scope, even if not explicitly defined as such via the global keyword).</p>
<p>Have a look at <code>help("NAMESPACES")</code> for more details</p>
<hr/>
<p><sup>1.To be clear, I don't mean that you can use the inherited value for a while and suddenly define a local version half-way through; if you do this python will complain that you tried to "use a local variable before assignment". I just mean that you either use the inherited version, or explicitly redefine it, which effectively makes it a local variable of the same name for use in that function.</sup></p>
</p></div>
<div class="post-text" itemprop="text">
<p>Edit: Pythons global variable access is not as strictly enforced as in other languages. See <a href="https://stackoverflow.com/a/423668/8375919">this Answer</a>. 
Similarly, python's encapsulation is unlike other languages, too. See <a href="https://stackoverflow.com/a/26216917/8375919">this</a> or <a href="https://stackoverflow.com/a/1641236/8375919">this Answer</a> </p>
</div>
<span class="comment-copy">I feel this quote is misleading as the context here seems to be specific to toplevel functions. The more pertinent quote from the documentation is this one: "When a name is used in a code block, it is resolved using the <i>nearest</i> enclosing scope.  The set of all such scopes visible to a code block is called the block's <i>environment</i>. If a name is bound in a block, it is a local variable of that block.  If a name is bound at the module level, it is a global variable. If a variable is used in a code block but not defined there, it is a <i>free variable</i>."</span>
<span class="comment-copy">Example of fun 2 is great! thanks!</span>
<span class="comment-copy">Except Python <i>does</i> have class encapsulation, just not specified class access control. Which is a different matter entirely from global variable access.</span>
