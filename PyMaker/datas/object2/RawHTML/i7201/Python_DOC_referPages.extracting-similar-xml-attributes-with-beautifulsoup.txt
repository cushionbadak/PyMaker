<div class="post-text" itemprop="text">
<p>Let's assume I have the following XML:</p>
<pre><code>&lt;time from="2017-07-29T08:00:00" to="2017-07-29T09:00:00"&gt;
    &lt;!-- Valid from 2017-07-29T08:00:00 to 2017-07-29T09:00:00 --&gt;
    &lt;symbol number="4" numberEx="4" name="Cloudy" var="04"/&gt;
    &lt;precipitation value="0"/&gt;
    &lt;!-- Valid at 2017-07-29T08:00:00 --&gt;
    &lt;windDirection deg="300.9" code="WNW" name="West-northwest"/&gt;
    &lt;windSpeed mps="1.3" name="Light air"/&gt;
    &lt;temperature unit="celsius" value="15"/&gt;
    &lt;pressure unit="hPa" value="1002.4"/&gt;
&lt;/time&gt;
&lt;time from="2017-07-29T09:00:00" to="2017-07-29T10:00:00"&gt;
    &lt;!-- Valid from 2017-07-29T09:00:00 to 2017-07-29T10:00:00 --&gt;
    &lt;symbol number="4" numberEx="4" name="Partly cloudy" var="04"/&gt;
    &lt;precipitation value="0"/&gt;
    &lt;!-- Valid at 2017-07-29T09:00:00 --&gt;
    &lt;windDirection deg="293.2" code="WNW" name="West-northwest"/&gt;
    &lt;windSpeed mps="0.8" name="Light air"/&gt;
    &lt;temperature unit="celsius" value="17"/&gt;
    &lt;pressure unit="hPa" value="1002.6"/&gt;
&lt;/time&gt;
</code></pre>
<p>And I want to collect <code>time from</code>, <code>symbol name</code> and <code>temperature value</code> from it, and then print it out in the following manner: <code>time from: symbol name, temperaure value</code> -- like this: <code>2017-07-29, 08:00:00: Cloudy, 15°</code>. </p>
<p>(And there are a few <code>name</code> and <code>value</code> attributes in this XML, as you see.)</p>
<p>As of now, my approach was quite straightforward:</p>
<pre><code>#!/usr/bin/env python
# coding: utf-8

import re
from BeautifulSoup import BeautifulSoup

# data is set to the above XML
soup = BeautifulSoup(data)
# collect the tags of interest into lists. can it be done wiser?
time_l = []
symb_l = []
temp_l = []
for i in soup.findAll('time'):
    i_time = str(i.get('from'))
    time_l.append(i_time)
for i in soup.findAll('symbol'):
    i_symb = str(i.get('name'))
    symb_l.append(i_symb)
for i in soup.findAll('temperature'):
    i_temp = str(i.get('value'))
    temp_l.append(i_temp)
# join the forecast lists to a dict
forc_l = []
for i, j in zip(symb_l, temp_l):
    forc_l.append([i, j])
rez = dict(zip(time_l, forc_l))
# combine and format the rezult. can this dict be printed simpler?
wew = ''
for key in sorted(rez):
    wew += re.sub("T", ", ", key) + str(rez[key])
wew = re.sub("'", "", wew)
wew = re.sub("\[", ": ", wew)
wew = re.sub("\]", "°\n", wew)
# print the rezult
print wew
</code></pre>
<p>But I imagine there must be some better, more intelligent approach? Mostly, I'm interested in collecting the attributes from the XML, my way seems rather dumb to me, actually. Also, is there any simpler way to print out a dict <code>{'a': '[b, c]'}</code> nicely? </p>
<p>Would be grateful for any hints or suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from bs4 import BeautifulSoup
with open("sample.xml", "r") as f: # opening xml file
    content = f.read() # xml content stored in this variable
soup = BeautifulSoup(content, "lxml")
for values in soup.findAll("time"):
    print("{} : {}, {}°".format(values["from"], values.find("symbol")["name"], values.find("temperature")["value"]))
</code></pre>
<p>Output:</p>
<pre><code>2017-07-29T08:00:00 : Cloudy, 15°
2017-07-29T09:00:00 : Partly cloudy, 17°
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more, also you can fetch xml data by importing <code>xml.dom.minidom</code> module.
Here is the data you want:</p>
<pre><code>from xml.dom.minidom import parse
doc = parse("path/to/xmlfile.xml") # parse an XML file by name
itemlist = doc.getElementsByTagName('time')
for items in itemlist:
    from_tag =  items.getAttribute('from')    
    symbol_list = items.getElementsByTagName('symbol') 
    symbol_name = [d.getAttribute('name') for d in symbol_list ][0] 
    temperature_list = items.getElementsByTagName('temperature') 
    temp_value = [d.getAttribute('value') for d in temperature_list ][0]
    print ("{} :  {}, {}°". format(from_tag, symbol_name, temp_value))
</code></pre>
<p>Output will be as follows:</p>
<pre><code>2017-07-29T08:00:00 :  Cloudy, 15°
2017-07-29T09:00:00 :  Partly cloudy, 17°
</code></pre>
<p>Hope it is useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you can also use an alternate way using builtin module(i'm using python 3.6.2):</p>
<pre><code>import xml.etree.ElementTree as et # this is built-in module in python3
tree = et.parse("sample.xml")
root = tree.getroot()
for temp in root.iter("time"): # iterate time element in xml
    print(temp.attrib["from"], end=": ") # prints attribute of time element
    for sym in temp.iter("symbol"): # iterate symbol element within time element
        print(sym.attrib["name"], end=", ")
    for t in temp.iter("temperature"): # iterate temperature element within time element
        print(t.attrib["value"], end="°\n")
</code></pre>
</div>
<span class="comment-copy">"Also, is there any simpler way to print out a dict {'a': '[b, c]'} nicely" - Try <b><a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint</code></a></b></span>
<span class="comment-copy">Brilliant, thanks!</span>
