<div class="post-text" itemprop="text">
<p>Numpy arrays, being extension types (aka defined using in extensions the C API), declare additional fields outside the scope of the Python interpreter (for example the <code>data</code> attribute, which is a <code>Buffer Structure</code>, as documented in Numpy's <a href="https://docs.scipy.org/doc/numpy/reference/arrays.interface.html" rel="nofollow noreferrer">array interface</a>.<br/>
To be able to serialize it, Python 2 used to use the <code>__reduce__</code> function as part of the pickle protocol, as stated in the <a href="https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-extension-types" rel="nofollow noreferrer">doc</a>, and explained <a href="https://stackoverflow.com/questions/19855156/whats-the-exact-usage-of-reduce-in-pickler">here</a>.</p>
<p>But, even if <code>__reduce__</code> still exists in Python 3, the <code>Pickle protocol</code> section (and <code>Pickling and unpickling extension types</code> a fortiori) was removed from the doc, so it is unclear what does what.<br/>
Moreover, there are additional entries that relate to pickling extension types:</p>
<ul>
<li><a href="https://docs.python.org/3/library/copyreg.html#module-copyreg" rel="nofollow noreferrer">copyreg</a>, described as a <code>Pickle interface constructor registration for extension types</code>, but there's no mention of extension types in the copyreg module itself.</li>
<li><a href="https://www.python.org/dev/peps/pep-3118/" rel="nofollow noreferrer">PEP 3118 -- Revising the buffer protocol</a> which released a new buffer protocol for Python 3. (and maybe automates pickling for this buffer protocol).</li>
<li>New-style class: One can assume that the new-style classes have an influence on the pickling process.</li>
</ul>
<p>So, how does all of this relate to Numpy arrays:</p>
<ol>
<li>Does Numpy array implement special methods, such as <code>__reduce__</code> to inform Python on how to pickle them (or <code>copyreg</code>)? Numpy objects still expose a <code>__reduce__</code> method, but it may be for compatibility reasons.</li>
<li>Does Numpy uses Python's C-API structures that are supported out of the box by Pickle (like the new <code>buffer protocol</code>), so nothing supplementary is necessary in order to pickle numpy arrays?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 <code>pickle</code> still <a href="https://docs.python.org/3/library/pickle.html#object.__reduce__" rel="noreferrer">supports <code>__reduce__</code></a>, it is covered under the <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="noreferrer"><em>Pickling Class Instances</em> section</a>.</p>
<p>Numpy's support has not changed in this regard; it implements <code>__reduce__</code> on arrays to support pickling in either Python 2 or 3:</p>
<pre><code>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.array(0).__reduce__()
(&lt;built-in function _reconstruct&gt;, (&lt;class 'numpy.ndarray'&gt;, (0,), b'b'), (1, (), dtype('int64'), False, b'\x00\x00\x00\x00\x00\x00\x00\x00'))
</code></pre>
<p>A three-element tuple is returned, consisting of a function object to recreate the value, a tuple of arguments for that function, and a state tuple to pass no <code>newinstance.__setstate__()</code>.</p>
</div>
<span class="comment-copy"><code>__reduce__</code> still exists in Python 3.</span>
<span class="comment-copy">..<a href="https://docs.python.org/3/library/pickle.html?highlight=pickle#object.__reduce__" rel="nofollow noreferrer">and here is the piece of documentation where <code>__reduce__</code> is mentioned in Python 3</a>.</span>
<span class="comment-copy">The point is that the mentions to extension types in the <code>reduce</code> doc have been removed, even if <code>reduce</code> still exists. But that was said is still true, as stated by the accepted answer (and in the following comments).</span>
<span class="comment-copy">So what is said in <a href="https://docs.python.org/2.7/library/pickle.html#pickling-and-unpickling-extension-types" rel="nofollow noreferrer">Pickling and Unpickling extension types</a> is still true? Why did they move the <code>__reduce__</code> doc from <code>extension types</code> to the more general <code>class instances</code> section?</span>
<span class="comment-copy">@Phylliade: yes, everything is still true. The method is not exclusive for extension types (and the line between custom Python classes and extension types has largely been blurred).</span>
<span class="comment-copy">@Phylliade: <code>__reduce__</code> is the lower-level copy protocol implementation; custom Python classes should implement the higher-level (<code>__getnewargs_ex__ </code> / <code>__getstate__</code> / <code>__setstate__</code>) methods) if possible, a default <code>__reduce__</code> implementation then uses those.</span>
