<div class="post-text" itemprop="text">
<p>I have the following timeout creation decorator function:</p>
<pre><code>class TimeoutError(Exception): pass


def timeout(seconds, error_message = 'Function call timed out'):
    def decorated(func):
        print "timeout: \t" + func.__name__
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)


        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                print "timeout wrapper: \t" + func.__name__
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return functools.wraps(func)(wrapper)

    return decorated
</code></pre>
<p>And another decorator:</p>
<pre><code>import inspect

class withHostAndToken(object):

    __name__ = "withHostAndToken"
    __doc__ = "Get the Host and Token for the API call"

    def __init__(self, func):
        print "withHostAndToken: \t" + func.__name__
        self.func = func
        self.HOST = ''
        self.TOKEN = ''

    def __call__(self,*args, **kwds):

        if self.HOST == '':
            self.HOST = "HOST"
        if self.TOKEN == '':
            self.TOKEN = "TOKEN"

        argsspec = inspect.getargspec(self.func)
        function_args = argsspec[0]
        if 'HOST' in function_args:
            if 'TOKEN' in function_args:
                return self.func(self.HOST , self.TOKEN , *args, **kwds)
            else:
                return self.func(self.HOST  , *args, **kwds)
        elif 'TOKEN' in function_args:
            return self.func(self.TOKEN, *args, **kwds)
</code></pre>
<p>When I try to apply both to a function I don;t get the function code to be called:</p>
<pre><code>@timeout(2)
@withHostAndToken
def testDecorators():
    print __name__
    while True:
        print '.'

testDecorators()
</code></pre>
<blockquote>
<p>the output of this is:</p>
<p>withHostAndToken:     testDecorators<br/>
  timeout:  withHostAndToken<br/>
  timeout wrapper:  withHostAndToken</p>
<p>Process finished with exit code 0</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You problem does not lies there, and the chaining of decorators works fine.</p>
<p>Here is an example code demonstrating it with your decorators:</p>
<pre><code>&gt;&gt;&gt; @timeout(2)
@withHostAndToken
def bar(*args):
    print(*args)
    i = 0;
    while True:
        dummy = sys.stderr.write('.')


&gt;&gt;&gt; bar('foo')
host token foo
....................................................................................................................................................................................................................................................................................................................................................................................................................Traceback (most recent call last):
  File "&lt;pyshell#48&gt;", line 1, in &lt;module&gt;
    bar('foo')
  File "&lt;pyshell#2&gt;", line 10, in wrapper
    result = func(*args, **kwargs)
  File "&lt;pyshell#5&gt;", line 19, in __call__
    return self.func(self.HOST , self.TOKEN , *args, **kwds)
  File "&lt;pyshell#47&gt;", line 7, in bar
    dummy = sys.stderr.write('.')
... message list truncate for brievety ...
  File "&lt;pyshell#2&gt;", line 4, in _handle_timeout
    raise TimeoutError(error_message)
TimeoutError: Function call timed out
&gt;&gt;&gt; 
</code></pre>
<p>So the function is correctly interupted after about 2 seconds as expected.</p>
<hr/>
<p>But in your use case, you used <code>time.sleep</code> inside the most inner function. And in Linux and other Unix, <code>sleep</code> is implemented through... <code>SIGALRM</code>!</p>
<p>So here is what happens:</p>
<ul>
<li>external decorators asks an alarm to be raised in 10 seconds</li>
<li>inner decorator passes additional parameter to the function</li>
<li>the function is called and calls <code>sleep(20)</code>
<ul>
<li>the <code>sleep</code> function call resets the alarm timeout to 20 seconds!</li>
</ul></li>
</ul>
<p>That's the reason why the function actually lasts 20 seconds instead of 10...</p>
</div>
<span class="comment-copy">Isn't the problem here that your <i>inner</i> decorator class doesn't wrap property? It should retain <code>__name__</code> and <code>__doc__</code>; see e.g. <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.wraps</a></span>
<span class="comment-copy"><code>__name__</code> and <code>__doc__</code> are not supposed to be methods. Make them regular instance attributes or properties.</span>
<span class="comment-copy">Thanks, but the way I tested it is by putting a breakpoint on the sleep line and I never got to this breakpoint.</span>
<span class="comment-copy">@EranWitkon: IDEs do their best to emulate sleep and SIGALRM, but the result is not always what is expected...</span>
<span class="comment-copy">Just update the question to show that it has nothing to do with sleep. the code in the new format does not print anything</span>
<span class="comment-copy">@EranWitkon: Sorry but I cannot reproduce. The code works fine under IDLE and no active debugging.</span>
<span class="comment-copy">Sorry, going to close the question, the code works fine</span>
