<div class="post-text" itemprop="text">
<p>How to use loops to get this output</p>
<pre><code>AGR Anggora  
PRS Persia  
MNC Main Coon
</code></pre>
<p>from this data structure:</p>
<pre><code>a = [('AGR', 'Anggora'), ('PRS', 'Persia'), ('MNC', 'Main Coon')]
</code></pre>
<p>I have tried like this but it fails:</p>
<pre><code>for i in range(len(a)):
   for z in range(len(a)):
       print(a[i][z], a[z][i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply unpack (using <code>*</code>) each tuple from your list in <code>print</code>:</p>
<pre><code>a = [('AGR', 'Anggora'), ('PRS', 'Persia'), ('MNC', 'Main Coon')]
for tup in a:
    print(*tup)
</code></pre>
<p>Result:</p>
<pre><code>AGR Anggora
PRS Persia
MNC Main Coon
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i found my solution.<br/>
it's kinda weird, but it works ._.</p>
<p>here my code.</p>
<pre><code>for i in range(len(a)):
    print(a[i][0], a[i][1])
</code></pre>
<p>i think my answer is almost same like @StellarDoor5319 answer.</p>
<p>Thank for you guys who help me for this problem :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join(iterable)</code></a> function:</p>
<blockquote>
<p>Return a string which is the concatenation of the strings in iterable.
  A TypeError will be raised if there are any non-string values in
  iterable, including bytes objects. The separator between elements is
  the string providing this method.</p>
</blockquote>
<p>Your code will look like this:</p>
<pre><code>a = [('AGR', 'Anggora'), ('PRS', 'Persia'), ('MNC', 'Main Coon')]

for t in a:
    print(" ".join(t))
</code></pre>
<p>and the output will be:</p>
<pre><code>AGR Anggora
PRS Persia
MNC Main Coon
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following code:</p>
<pre><code>for b in a:
    print(b[0], b[1])
</code></pre>
</div>
<span class="comment-copy"><code>for abbreviation, name in a: print(f'{abbreviation} {name}')</code></span>
<span class="comment-copy">@MaartenFabré You are assuming OP is using Python 3.6</span>
<span class="comment-copy">it shouldn't be that hard to find out for the OP to see how to print this if he isn't</span>
<span class="comment-copy">@MaartenFabré And yet it would be better to provide a generic answer that works on all versions of Python.</span>
<span class="comment-copy">thank you sir for answer, i will try later. maybe answer from @StellarDoor5319 is better for newbie like me hehehehe</span>
<span class="comment-copy">I am not sure, but probably not the greatest option for someone (apparently) just starting to use Python: too magic</span>
<span class="comment-copy">@SergeyAntopolskiy My answer demonstrates a less "magic" solution - printing each value separately.</span>
<span class="comment-copy">It's hard to know what is too "magic". That always depends on what topics are already known. But for this problem unpacking is definitely the shortest and best suited solution, isn't it?</span>
<span class="comment-copy">thank you sir for answer, but i don't understand. your code is work but i really really don't understand -_-</span>
<span class="comment-copy">@Oncom You might want to have a look at <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">"Unpacking argument lists"</a>. There the Python documentation covers the unpacking operator :)</span>
<span class="comment-copy">hi sir, i already found answer for my problem. but very thank you for helping me :) later, i will read about <code>join</code> :)</span>
<span class="comment-copy">you don't need to iterate with the index</span>
<span class="comment-copy">@MaartenFabré Thanks for the tip. I adapted the solution to the code posted but It's better without the index.</span>
<span class="comment-copy">It's better to avoid variable names that shadow built-in functions (for example <code>tuple</code>).</span>
<span class="comment-copy">@MSeifert I usually do, this just illustrates the code better. I'll change it.</span>
<span class="comment-copy">hi sir thanks for answer, what if a is a lot ? so i have to put b[number] ?</span>
<span class="comment-copy">@Oncom If you mean that there are, say, 200 tuples within <code>a</code>, then you can simply leave the code as it is. If you mean that there are 200 items in each tuple, replace the contents of the print function's brackets with <code>*b</code>.</span>
<span class="comment-copy">@StellarDoor5319 hmmm, i see i see. i understand now sir. thank you :)</span>
