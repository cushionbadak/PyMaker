<div class="post-text" itemprop="text">
<p>I am curious whether there is a better way to achieve something like this?
My intentions are to avoid unnecessary boilerplate. The provided example is obviously just simple enough to let the others understand what I had on my mind.</p>
<pre><code>def create_parametrized_class(animal):
    class SomeClass:
        def __init__(self, name):
            self.name = name

        def __str__(self):
            return "{}: {}".format(animal, self.name)

    return SomeClass

class Cat(create_parametrized_class("Cat")):
    pass

class Dog(create_parametrized_class("Dog")):
    pass

cat = Cat("Micka")
dog = Dog("Rex")
assert str(cat) == "Cat: Micka", "Cats..."
assert str(dog) == "Dog: Rex", "Dogs..."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to presume that <code>type(self).__name__</code> won't suffice here (for both your example classes that value is equal to the parameter value you passed in).</p>
<p>To set up per-class values at class-definition time, as of Python 3.6 you can use the <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="nofollow noreferrer"><code>__init_subclass__</code> classmethod</a>:</p>
<pre><code>class Animal:
    def __init_subclass__(cls, animal_name, **kw):
        super().__init_subclass__(**kw)
        self._animal_name = animal_name

    def __str__(self):
        return "{}: {}".format(self._animal_name, self.name)


class Cat(Animal, animal_name='Cat'):
    pass

class Dog(Animal, animal_name='Dog'):
    pass
</code></pre>
<p><code>__init_subclass__</code> is called for all new subclasses, and any parameters you specify in the <code>class Subclass(...)</code> line are passed into that method, letting you parameterise that specific subclass.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you're better off with simple inheritance and a class variable:</p>
<pre><code>class Animal(object):
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return '{}: {}'.format(type(self).name, self.name)

class Cat(Animal):
    name = 'Cat'

class Dog(Animal):
    name = 'Dog'
</code></pre>
<p>This looks cleaner to me (especially if you have more variables than just one), and uses less "advanced" features (i.e. someone reading your code doesn't have to google how <code>__init_subclasses__</code> works).</p>
<p>Also it works for both Python 2 and 3:</p>
<pre><code>&gt;&gt;&gt; cat = Cat('Micka')
&gt;&gt;&gt; print(cat)
'Cat: Micka'
</code></pre>
<hr/>
<p>If you were to use <a href="https://stackoverflow.com/a/3203659/2505645"><code>classproperty</code></a>, you could even have it default to the class's name and be overriddable with a simple class variable. This prevents you from using the same name for the class and instance variables though, so you'd have to use something like <code>animal_name</code>:</p>
<pre><code>class Animal(object):

    @classproperty
    def animal_name(cls):
        return cls.__name__

    def __init__(self, name):
        self.name = name

    def __str__(self):
        return '{}: {}'.format(self.animal_name, self.name)


class Cat(Animal):
    pass

class Dog(Animal):
    animal_name = 'Doggo'
</code></pre>
<p>Usage example:</p>
<pre><code>&gt;&gt;&gt; dog = Dog('Mike')
&gt;&gt;&gt; cat = Cat('Bob')
&gt;&gt;&gt; str(dog)
'Doggo: Mike'
&gt;&gt;&gt; str(cat)
'Cat: Bob'
</code></pre>
</div>
<span class="comment-copy">What Python version is this? Seems like 3.6+, since Martijn Pieters' answer sufficed, but you should tag it for others who might run into the same issue too. <code>__init_subclass__</code> won't work pre 3.6.</span>
<span class="comment-copy">OK, I add Python 3.6 tag. I didnt know <b>init_subclass</b> so I am not sure what Python version it is.</span>
<span class="comment-copy">you should always tag it <i>with the version you are using</i>, so people can provide answers based on that. You can see the version with <code>python --version</code> or <code>python3 --version</code></span>
<span class="comment-copy">Well, I know what version I am using :) The problem is I would not expect the solution to be 3.6 specific. But since I use 3.6 I dont mind that. But thanks for your hints, anyway.</span>
<span class="comment-copy">There was me thinking about a boring <code>return type(animal, (SomeClass,), {})</code>...</span>
<span class="comment-copy">@MarkusMeskanen: now explicitly noted in the answer.</span>
<span class="comment-copy">Also, not that it matters for the answer, but since we're already on 3.6, why not <code>return f'{self._animal_name}: {self.name}'</code> ;)</span>
<span class="comment-copy">@MarkusMeskanen: because I was focusing on the major aspect of the question; I try to only introduce syntax changes if they materially improve on the style of the code. Sure, I prefer the new <code>f'...'</code> syntax too, but I felt it would distract from the focus of the answer. :-)</span>
<span class="comment-copy">Fair enough, one new feature at a time. (Although I personally make f-strings an exception, they're too alluring).</span>
<span class="comment-copy">Yep, seems fine. Thank you. I would prefer to keep Python 3.6 solution as my origin intentions were to learn something new. :)</span>
