<div class="post-text" itemprop="text">
<p>My code is becoming incredibly verbose in certain areas, and it would be nice if there was a more Pythonic way to accomplish the following task:</p>
<pre><code>total1 = 0
total2 = 0
total3 = 0
for x in list:
    total1 += x.field1
    total2 += x.field2
    total3 += x.field3
</code></pre>
<p>I'm still new to Python, but I know about some tricks, like I could cut the lines I'm writing in half with...</p>
<pre><code>total1 = sum(x.field1 for x in list)
total2 = sum(x.field2 for x in list);
total3 = sum(x.field3 for x in list);
</code></pre>
<p>but I don't want to sacrifice performance by re-iterating my lists over and over again just to save SLOC. What I'd like to do is something like this...</p>
<pre><code>total1, total2, total3 = sum(x.field1, x.field2, x.field3 for x in list)
</code></pre>
<p>I've tried several versions of this but I keep getting syntax errors. Is there any way to do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC, you want to have <code>sum</code> sum up 3 fields in parallel. This is just not possible with the current builtin. I'd recommend the best, and possibly the only option without resorting to any other libraries: a <code>for</code> loop.</p>
<pre><code>total1 = total2 = total3 = 0

for x in your_list:
    total1 += x.field1
    total2 += x.field2
    total3 += x.field3
</code></pre>
<p>If you want to get creative, and account for an unknown number of attributes, you can use a <code>dict</code> to store your totals and <code>getattr</code> to dynamically access fields.</p>
<pre><code>fields = ['field1', 'field2', 'field3'] # keep in mind these are the string names of your fields
total_dict = {f : 0 for f in fields}

for x in your_list:
    for f in fields:
        total_dict[f] += getattr(x, f)
</code></pre>
<p>This is still roughly linear because the inner loop is constant in size.</p>
<hr/>
<p>If you want to <code>sum</code> in one line, I'm afraid this isn't possible unless you go for a number crunching library like numpy.</p>
<pre><code>import numpy as np
numbers = np.array([[x.field1, x.field2, x.field3] for x in your_list])

sum = numbers.sum(axis=0)
</code></pre>
<p>An example:</p>
<pre><code>In [1316]: numbers = np.array([[1, 2, 3], [1, 2, 3], [1, 2, 3]])

In [1317]: numbers.sum(axis=0)
Out[1317]: array([3, 6, 9])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>sum</code> function just only return one number. Maybe you can write one function to return many numbers:</p>
<pre><code>def my_sum(l, fields):   
  _my_sum = lambda l, f: sum(getattr(i, f) for i in l)   
  return tuple(_my_sum(l, f) for f in fields)

total1, total2, total3 = my_sum(l, ["field1", "field2", "field3"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're somehow opposed to using an explicit loop here and don't want to rely on additional third party libraries, you could take a functional approach and use something like <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a>.</p>
<pre><code>from functools import reduce
total1, total2, total3 = reduce(
    lambda x, y: (x[0]+y.field1, x[1]+y.field2, x[2]+y.field3),
    items,
    (0,0,0)
)
</code></pre>
</div>
<span class="comment-copy">Not sure what <code>x</code> is, but if it is a custom class, define an <code>__add__</code> method and call <code>sum(your_list)</code> directly.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ x is just a placeholder name. in Python, you can perform operations on a list by typing, for instance <code>sum(x.field1 for x in list)</code> and it will sum the field for you. Really convenient, but now I'm trying to get it to work with multiple fields in the same list.</span>
<span class="comment-copy">I'm sorry but you cannot shoehorn <code>sum</code> to return 3 outputs. Just use a loop.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ isn't there a Pythonic way, though?</span>
<span class="comment-copy">You're overestimating the significance of making multiple passes.</span>
<span class="comment-copy">Well, a for loop is kind of where I am already, and the dict idea, though creative, is just as many lines of code but more complex. What I'm really looking for is a way to achieve the same result in one or two lines.</span>
<span class="comment-copy">@Jace Well, you can use numpy. Take a look at my edit.</span>
<span class="comment-copy">Yes! Numpy was exactly what I was looking for, thanks!</span>
<span class="comment-copy">Yup, no problemo.</span>
<span class="comment-copy">@Jace: Note that proper use of NumPy is going to have a much, much greater impact on your performance than whether you make 1 or 3 passes over a list. If you're going to bring in NumPy, you might want to take some time to read up on what it offers and how to use it efficiently.</span>
<span class="comment-copy">This just puts sugar on everything OP does <i>not</i> want to do.</span>
