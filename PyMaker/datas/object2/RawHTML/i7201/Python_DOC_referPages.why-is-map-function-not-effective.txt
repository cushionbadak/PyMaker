<div class="post-text" itemprop="text">
<p>I am not struck or anything, but I feel this weird. Below is the code snippet I have worked on:</p>
<pre><code>from hashClass import HashTable

a = HashTable(11)
input_value = list((54,26,93,17,77,31,44,55,20))

map(lambda x: a.put(x,x),input_value))
print(a.data)
</code></pre>
<p>I have created my own hash table class. It has a method called put which accepts key-value pair and "HashTable.data" attribute displays all the values in the table.</p>
<p>It works completely fine when I use put method with normal key-value pairs. I know that the solution can be implemented using:</p>
<pre><code>for i in input_value: a.putt(i,i)
</code></pre>
<p>But I would like to know why the map function is not effective? When I try to map every input_value with "put" method, it has to add the value to the instance if I am not wrong. My reason is I may not be using the mapped value but syntactically when I am mapping, it is supposed to update the instance variable.</p>
<p>Below is the hash Class I have created for reference.</p>
<pre><code>class HashTable(object):

    def __init__(self,size):
        self.size = size
        self.slots = self.size*[None]
        self.data = self.size*[None]
        self.values = 0

    def put(self,key,value):
        hashValue = self.hashFunction(key)
        if self.slots[hashValue] == None:
            self.slots[hashValue] = key
            self.data[hashValue] = value
            self.values += 1
        elif self.slots[hashValue] == key:
            self.data[hashValue] = value
        else:
            hashValue = self.reHash(hashValue)
            while self.slots[hashValue] != None and self.slots[hashValue] != key:
                hashValue = self.reHash(hashValue)
            self.slots[hashValue] = key
            self.data[hashValue] = value
            self.values += 1


    def reHash(self,oldValue):
        return (oldValue+1)%self.size

    def __len__(self):
        return self.values


    def get(self,key):
        hashValue = self.hashFunction(key)
        if self.slots[hashValue] == None:
            return "No Value associated"
        elif self.slots[hashValue] == key:
            return self.data[hashValue]


    def hashFunction(self,key):
        return key%self.size
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to go out on a limb here and assume you are using Python3. </p>
<p>With python3, a <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> facilitates lazy evaluation, meaning it will <em>not</em> carry out its functionality unless it really needs to. What you are trying to do is use a <code>map</code> to produce side effects. Sure, you can do this with:</p>
<pre><code>list(map(lambda x: a.put(x,x), input_value)))
</code></pre>
<p>The <code>list()</code> forces evaluation to take place.</p>
<p>However, using <code>map</code> for side effects is somewhat of an anti-pattern. I would prefer something clearer and more idiomatic such as the <code>for</code> loop you mentioned.</p>
<hr/>
<p>As an example:</p>
<pre><code>In [854]: s = set()

In [862]: m = map(lambda x=x: s.add(x), [1, 2, 3])

In [863]: s
Out[863]: set()
</code></pre>
<p>Nothing happened to <code>s</code> thus far. Now, apply <code>list()</code> to the <code>map</code> object.</p>
<pre><code>In [864]: list(m)
Out[864]: [None, None, None]
</code></pre>
<p>The <code>None</code>s are classic symptoms of side-effects. However...</p>
<pre><code>In [865]: s
Out[865]: {1, 2, 3}
</code></pre>
<p>So, it works. But it certainly doesn't look good.</p>
</div>
<span class="comment-copy">Your <code>map</code> line seems to have an extra right paren?</span>
<span class="comment-copy">I suspect you're using Python 3, where <code>map</code> returns an iterator. So <code>map</code> won't call the function until you iterate over the map iterator. However, you shouldn't use <code>map</code> purely for side-effects like this.</span>
<span class="comment-copy">@PM2Ring: Yeah, this makes sense. I am using python3</span>
<span class="comment-copy">Similarly, it's bad style to do something like this <code>[a.put(x,x) for x in input_value]</code>, since it's using a list comprehension for the side-effect of the method call and you don't actual want the list, which is probably full of <code>None</code>.</span>
<span class="comment-copy">This is a huge change, will never dear to change to python3 then :D more over, does an assignment like <code>l = map(...)</code> trigger the lazy evaluation? don't have a python3 to try.</span>
<span class="comment-copy">should be <code>m = map(lambda x: s.add(x), [1, 2, 3])</code> in your example by the way, can't edit the answer cause the 6 characters rule didn't meet</span>
<span class="comment-copy">@armnotstrong 1. It does not, and 2. It is valid syntax - a scope specifier for the lambda.</span>
<span class="comment-copy">did I <a href="https://i.stack.imgur.com/vzSIv.png" rel="nofollow noreferrer">miss something</a>?</span>
<span class="comment-copy">@armnotstrong Possible. This works on Python3!</span>
