<div class="post-text" itemprop="text">
<p>I have to convert a number to a list depending on its decimal value. For example, the number <code>300</code>(<code>0x012C</code>) would be <code>[1, 44]</code> because <code>1</code> and <code>44</code> are <code>0x01</code> and <code>0x2c</code> respectively.</p>
<p>How can I do that? </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a basic approach:</p>
<pre><code>In [10]: def by_two_byte(number, mod=16*16):
    ...:     rest, rem = number // mod, number % mod
    ...:     if not rest:
    ...:         return [rem]
    ...:     else:
    ...:         return by_two_byte(rest, mod) + [rem]
    ...:
    ...:

In [11]: by_two_byte(300)
Out[11]: [1, 44]

In [12]: by_two_byte(9635)
Out[12]: [37, 163]
</code></pre>
<p>You could also do this iteratively, but likely it won't be necessary unless you are dealing with <em>very large integers</em>. Note, the above function takes <code>int</code> input, so pass it <code>int('300')</code> if you want to start with a string.</p>
<p>Note the way this generalizes:</p>
<pre><code>In [13]: 0xaf23ff65
Out[13]: 2938371941

In [14]: by_two_byte(2938371941)
Out[14]: [175, 35, 255, 101]

In [15]: list(map(hex,by_two_byte(2938371941)))
Out[15]: ['0xaf', '0x23', '0xff', '0x65']

In [16]: 0x4f8ac # odd number of hexadecimal digits
Out[16]: 325804

In [17]: list(map(hex,by_two_byte(325804)))
Out[17]: ['0x4', '0xf8', '0xac']
</code></pre>
<p>Dispensing with the decimal literals, using hexadeciml literals:</p>
<pre><code>In [18]: list(map(hex, by_two_byte(0xfffffffff)))
Out[18]: ['0xf', '0xff', '0xff', '0xff', '0xff']

In [19]: list(map(hex, by_two_byte(0xfafbfcfd)))
Out[19]: ['0xfa', '0xfb', '0xfc', '0xfd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For an iterative approach:</p>
<pre><code>def convertToByteList(num):
    byteList = []
    while num &gt; 0:
        byteList.insert(0, num &amp; 0xFF)
        num = num &gt;&gt; 8

    return byteList
</code></pre>
<p>Or in one line:</p>
<pre><code>[num &gt;&gt; (8*i) &amp; 0xFF for i in range((num.bit_length() - 1) // 8,-1,-1)]
</code></pre>
<p>This uses shifting and bit masking to extract each byte, and uses the length of the integer in bits to determine how long the list should be.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Python 3, then the <a href="https://docs.python.org/3/library/stdtypes.html#int.to_bytes" rel="nofollow noreferrer"><code>int.to_bytes</code></a> method does most of what you need:</p>
<pre><code>&gt;&gt;&gt; n = 300
&gt;&gt;&gt; n.to_bytes(2, "big")
b'\x01,'
&gt;&gt;&gt; list(n.to_bytes(2, "big"))
[1, 44]
</code></pre>
<p>That <code>2</code> is the number of bytes in the output; it's a required argument. You can compute how many bytes you need for a given <code>n</code> using the <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer"><code>int.bit_length</code></a> method:</p>
<pre><code>&gt;&gt;&gt; n = 9635
&gt;&gt;&gt; nbytes = -(-n.bit_length() // 8)  # divide by 8, round up
&gt;&gt;&gt; list(n.to_bytes(nbytes, "big"))
[37, 163]
</code></pre>
<p>And a larger example:</p>
<pre><code>&gt;&gt;&gt; n = 2160376691
&gt;&gt;&gt; list(n.to_bytes(-(-n.bit_length()//8), "big"))
[128, 196, 187, 115]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So, you're trying to convert you decimal integer to a hex digits pair. For small (16-bit decimal ints), you can do it like this:</p>
<pre><code>&gt;&gt;&gt; list(divmod(300,256))
[1, 44]

&gt;&gt;&gt; list(divmod(9635,256))
[37, 163]
</code></pre>
</div>
<span class="comment-copy">Hu? <code>l</code> is not a syntactically valid list literal, and anyways, it contains <code>int</code>s not <code>bytes</code></span>
<span class="comment-copy"><code>l[0]*256+l[1]</code>?</span>
<span class="comment-copy">I need decimal rapresentation of each byte of a number</span>
<span class="comment-copy">Do you want to input 300 and get l = [1,44] or do you want to input l = [1,44] and get 300?</span>
<span class="comment-copy">'300' -&gt; [1, 44]</span>
<span class="comment-copy">You could replace rest, rem = number // mod, number % mod with rest,rem = divmod(number,mod)</span>
<span class="comment-copy">@SamCraig I could, but I prefer using the operators to save on a function call. It's a silly micro-optimization, but it bothers me all the same, and I find the operator version just as readable...</span>
<span class="comment-copy">Aren't operators really not just function calls as well? So you're trading one function call for two function calls.</span>
<span class="comment-copy">@mkrieger1 they are, but they are optimized, since <code>divmod</code> could be <i>anything</i>, since you could easily do <code>def divmod(x,y): return 'foo'</code>. You can time it yourself, the operator version is faster. Essentially, when you sue the operator Python can go directly to the correct function, whereas if you use the function, it has to resolve the name first.</span>
<span class="comment-copy">Also, can't you just use the hexadecimal literals in your examples <code>In [14]</code> and <code>In [17]</code>, and remove <code>In [13]</code> and <code>In [16]</code>? Or did I miss the point for explicitly showing inputs 13 and 16?</span>
<span class="comment-copy">Ah, yea, <code>&gt;&gt; 8</code> is a good approach.</span>
<span class="comment-copy">Great, it works! Thank you!</span>
<span class="comment-copy">Bitewise operators for the win! I really, really like this solution.</span>
<span class="comment-copy">@itsp You're welcome, also added a list comprehension version.</span>
<span class="comment-copy">Yes, but this method doesn't work with number larger than 65536.</span>
<span class="comment-copy">@itsp yeah, you need to strip off two hexadecimal places at a time, my solution basically recurses on the above...</span>
<span class="comment-copy">@itsp, of course it doesn't. I've explicitly stated that it works only for 16-bit ints. <b>The solution for larger numbers in left as an exercise for the reader</b>.</span>
