<div class="post-text" itemprop="text">
<p>If I'm writing a python package in python 3.6, then how do I ensure my code can be downloaded and ran in other python 3 environments, like python 3.5?</p>
<p>What makes some python packages (e.g. <a href="https://github.com/tensorflow/tensorflow" rel="nofollow noreferrer">Tensorflow</a>) compatible with all python 3 minor versions, while other python packages (e.g. <a href="https://github.com/openai/gym" rel="nofollow noreferrer">OpenAI Gym</a>) only compatible with Python 3.5?</p>
<p>Finally: if my goal is to write code that is compatible for Python 3.5 and 3.6, then would it be better to just use a python 3.5 environment?</p>
</div>
<div class="post-text" itemprop="text">
<p>The glib-but-true answer:
<strong>Test your 3.6 code with those other versions of Python.</strong>
If you want to see if something runs correctly in environment <em>X</em>, there's no substitute for actually running it in environment <em>X</em>.</p>
<p><a href="https://pypi.python.org/pypi/tox" rel="nofollow noreferrer">Tox</a>
is a Python testing framework designed to do exactly this on your workstation.
Something like this is often part of a larger
<a href="https://en.wikipedia.org/wiki/Continuous_integration" rel="nofollow noreferrer">continuous integration</a>
framework or service, which might be hosted on a remote server.</p>
<p>Writing your code in the earliest syntax you need to support is always a good idea, but it's not enough.
You still need to test <em>later</em> versions, because functions or classes can change, and even bug-fixes can break your code if you were unwittingly depending on their behavior.</p>
<hr/>
<p>As for why some packages don't work under a specific minor version, the most likely reason is that they <strong>use a Python language feature that was introduced later</strong>.
(Possibly it's one of their dependencies that requires the language feature.)
This can include language syntax changes like
Python 3.5's
<a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465" rel="nofollow noreferrer"><code>@</code> matrix-multiplication operator</a>,
all the way down to seeming trivia like
Python 3.1's
<a href="https://docs.python.org/3/whatsnew/3.1.html#pep-378-format-specifier-for-thousands-separator" rel="nofollow noreferrer">printing commas as thousands-separators</a>,
which is still enough to raise an exception.</p>
<p>It's actually a bit more complicated than just
"supports version <em>x</em> or greater",
because there are some gaps in Python's history.
The most likely headache is the <code>u''</code> Unicode literal syntax from Python 2.
It was removed in Python 3.0...
and then
<a href="https://docs.python.org/3/whatsnew/3.3.html#summary-release-highlights" rel="nofollow noreferrer">restored in Python 3.3</a>,
after its absence caused more grief than expected.
That one change means any script with a <code>u'Unicode literal'</code> could work under Python 2.7 and 3.3+ while <em>not</em> working under Python 3.0, 3.1, or 3.2.</p>
<p>The Python documentation is very good about keeping track of when a feature was introduced.
For instance, the first thing the
<a href="https://docs.python.org/3/library/typing.html#module-typing" rel="nofollow noreferrer"><code>typing</code> module</a>
tells you is:</p>
<blockquote>
<p><strong>26.1. <code>typing</code> - Support for type hints</strong></p>
<p><em>New in version 3.5.</em></p>
</blockquote>
<p>A <code>Ctrl-F</code> style search for "new in" or "changed in" will generally turn up all the most important changes.</p>
</div>
<span class="comment-copy"><a href="https://tox.readthedocs.io/en/latest/" rel="nofollow noreferrer">tox</a></span>
