<div class="post-text" itemprop="text">
<p>I m using Argparser in Python to parse the command line arguments. Here is my code:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('input', type=str)
parser.add_argument('method', type=str)
parser.add_argument('output', type=str)
args = parser.parse_args()
</code></pre>
<p>If I specify <code>python argparser.py input.txt hello_world output.txt</code>, it works fine. I want to support something like, <code>python argparser.py -i input.txt -m hello_world -o output.txt</code> and <code>python argparser.py --input input.txt --method hello_world --output output.txt</code></p>
<p>I tried this, <code>parser.add_argument('-i', 'input', type=str)</code> but this does not seem to work. It keeps throwing error. How can I fix this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code(it is fully working on my side):</p>
<pre><code>import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, help="input file")
    parser.add_argument("-m", "--method", type=str, help="message")
    parser.add_argument("-o", "--output", type=str, help="output file")
    args = parser.parse_args()
    return args

arguments = parse_args()

print(arguments)
print(arguments.input)
print(arguments.method)
print(arguments.output)
</code></pre>
<p><strong>Usage example:</strong> python3 parse.py -i some</p>
<p><strong>Result:</strong>
Namespace(i='some', m=None, o=None)</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this</p>
<pre><code> parser.add_argument('-i', '--input', help='Input')
</code></pre>
<p>You can check out the different options in the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">documentation</a></p>
<p>EDIT: I never tried with -i=input but the option without using <strong>=</strong> works for me</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-i','--input', type=str)
parser.add_argument('-m','--method', type=str)
parser.add_argument('-o','--output', type=str)
args = parser.parse_args()
</code></pre>
</div>
<span class="comment-copy">This works if i specify <code>python filename.py -i input.txt -m hello_world -o output.txt</code>. This does not work if i specify <code>python filename.py --input input.txt --method hello_world --output output.txt</code>. I want to support both of these.</span>
<span class="comment-copy">It works on both cases: <code>'code</code>ppikh@ppikh:~$ python3 parse.py -i input.txt -m hello_world -o output.txt Namespace(input='input.txt', method='hello_world', output='output.txt') input.txt hello_world output.txt ppikh@ppikh:~$  ppikh@ppikh:~$ python3 parse.py --input input.txt --method hello_world --output output.txt Namespace(input='input.txt', method='hello_world', output='output.txt') input.txt hello_world output.txt ppikh@ppikh:~$  <code>code</code></span>
<span class="comment-copy">Try only my code save in file and try to run this file using command: python3 parse.py --input input.txt --method hello_world --output output.txt  where parse.py - filename</span>
<span class="comment-copy">Ah my bad, i m too sorry, it was all a '-' that i missed. thanks.</span>
<span class="comment-copy">No problem :) I happy to help you.</span>
