<div class="post-text" itemprop="text">
<p>I have the code in C++:</p>
<pre><code>unsigned char LRC_form(char* cadr)
{
  unsigned char LRC=0;
  unsigned int t=0;
  LRC=0;
  for (t=1;t&lt;0x0D;t=t+2)
  {
    LRC=LRC+ASCII2hex(cadr[t])*16+ASCII2hex(cadr[t+1]);
  }
  return ((~(LRC))+1);
}
int main(int argc, char *argv[])
{
    char *p={":010600000045"};
    cout&lt;&lt;LRC_form(p);
}
</code></pre>
<p>where ASCII2Hex is a function which translate ASCII code of a char to HEX. 
I must write the same in Python so I do this:</p>
<pre><code>def LRC_FORM():
    LRC=0
    string_to_send = "010600000045"
    Arr = list(string_to_send)
    #LRC = int(Arr[1])+2
    #print(LRC)
    counter=0
    for i in string_to_send:
        numb = int(i, 16)
        if counter%2 == 0:
            LRC = LRC + numb * 16
        else:
            LRC = LRC + numb
        counter = counter + 1
</code></pre>
<p>But how should I implement (~LRC) + 1 since LRC is a unsigned char, in my case it is int, I can use some module like ctypes or struct, but when I do it like this: </p>
<pre><code>import ctypes
import struct
cchar1=(struct.pack('1B',LRC)) 
cchar2= ctypes.c_char(LRC) 
</code></pre>
<p>it does not give me result I am expecting. <code>LRC = 77</code>, and I though I should get <code>LRC = '77'</code>, but I am getting <code>b'L'</code> so it does not give the same result like code in C++. 
How can I convert it the correct way? </p>
<p>Thank you in advance!</p>
<p>P.S. 
output of C++ program </p>
<pre><code>char *p={":010600000045"};
cout&lt;&lt;LRC_form(p);
</code></pre>
<p>is giving <code>76</code>
I am trying to get the same with Python 3</p>
<p><strong>EDIT 1</strong></p>
<pre><code>return LRC; 
</code></pre>
<p>in C program gives <code>76</code>. 
and it is the same I can get in my Python code. 
but </p>
<pre><code>return ((~(LRC))+1);
</code></pre>
<p>gives <code>180</code> and I do not know what should I do to get the same in Python..</p>
<p><strong>EDIT 2</strong></p>
<p>ASCII2Hex function:</p>
<pre><code>unsigned char ASCII2hex (char ASCII)
{
  if (ASCII&lt;0x40)
    return (ASCII-0x30);
  else
    return (ASCII-0x37);
}
    enter code here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easy way to do this is to let <a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow noreferrer"><code>binascii.unhexlify</code></a> do most of the work. We just have to send it a <code>bytes</code> string, not a text string.</p>
<pre><code>import binascii

def lrc(s):
    # Convert string s to bytes
    b = s.encode('ascii')

    # Interpret hex data in b
    h = binascii.unhexlify(b)

    # Add the byte values
    return sum(h)

# test

s = "010600000045"
print(lrc(s))
</code></pre>
<p><strong>output</strong></p>
<pre><code>76
</code></pre>
<hr/>
<p>We can make that function much more compact, although the result is less readable:</p>
<pre><code>def lrc(s):
    return sum(binascii.unhexlify(s.encode('ascii')))
</code></pre>
<hr/>
<p>We can easily do <code>((~(LRC))+1)</code> in Python, but we have to be careful, for two reasons. Firstly, Python doesn't have unsigned integers, secondly, Python's integers are of unlimited precision. But we can deal with both of those things by supplying a suitable mask. If we want to restrict the result to 8 bits we can use a mask of <code>0xff == 255</code>:</p>
<pre><code>l = 76
print(l, (0xff &amp; ~l) + 1)
</code></pre>
<p><strong>output</strong></p>
<pre><code>76 180
</code></pre>
<p>Or we can do the addition after inverting the bits but before we do the masking:</p>
<pre><code>0xff &amp; (~l + 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply AND with 0xff to force the result back into the unsigned char range:</p>
<pre><code>return ((~LRC)+1) &amp; 0xff
</code></pre>
</div>
<span class="comment-copy">I've edited your question because your code is C++, not C.</span>
<span class="comment-copy">You're close: <code>b'L'[0] == 76</code>. But there are more compact ways to do this in Python.</span>
<span class="comment-copy">Thank you! I can't understand it.. so L is supposed to be an array ..? Can you please show more compact way to achieve it in Python?</span>
<span class="comment-copy">What does ASCII2hex do exactly?</span>
<span class="comment-copy"><code>b'L'</code> is a literal <code>bytes</code> string. It's a bit funny because it <i>looks</i> like a string, but if you iterate over it, or index single bytes in it you get the integer values. Try this in the interpreter: <code>for i in b'ABCD': print(i)</code></span>
<span class="comment-copy">Thank you, how to get 180 which is done by  return ((~(LRC))+1);</span>
<span class="comment-copy"><code>(~76 + 1) &amp; 0xFF</code>  -&gt; 180</span>
<span class="comment-copy">@John Please see the update.</span>
