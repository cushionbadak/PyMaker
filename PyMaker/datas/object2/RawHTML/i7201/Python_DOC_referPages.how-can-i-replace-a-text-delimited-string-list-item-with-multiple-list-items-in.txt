<div class="post-text" itemprop="text">
<p>Given a list:</p>
<pre><code>mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']
</code></pre>
<p>I'd like a one-liner to return a new list:</p>
<pre><code>['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another trick is first to join the list with underscores and then re-split it:</p>
<pre><code>"_".join(mylist).split('_')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use 2 <code>for</code> clauses in your comprehension, e.g.:</p>
<pre><code>&gt;&gt;&gt; mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']
&gt;&gt;&gt; [animal for word in mylist for animal in word.split('_')]
['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not a one liner, but is nevertheless a valid option to consider if you want to return a generator:</p>
<pre><code>def yield_underscore_split(lst):
     for x in lst:
         yield from x.split('_')
</code></pre>
<p></p>
<pre><code>&gt;&gt;&gt; list(yield_underscore_split(mylist))
['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
<hr/>
<p>Original answer valid only for versions Python 3.3-3.7, kept here for interested readers. Do not use!</p>
<pre><code>&gt;&gt;&gt; list([(yield from x.split('_')) for x in l]) 
['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipe</a> to flatten a list you could do this:</p>
<pre><code>from itertools import chain

mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']

new_list = list(chain.from_iterable(item.split('_') for item in mylist))
print(new_list) 
# ['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
<p>...or does the import statement violate your one-liner requirement?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since so many answers here were posted (over ten), I thought it'd be beneficial to show some timing stats to compare the different methods posted:</p>
<pre><code>-----------------------------------------
AChampion time: 2.6322
-----------------------------------------
hiro_protagonist time: 3.1724
-----------------------------------------
Eugene_Sh time: 1.0108
-----------------------------------------
cᴏʟᴅsᴘᴇᴇᴅ time: 3.5386
-----------------------------------------
jdehesa time: 2.9406
-----------------------------------------
mogga time: 3.1645
-----------------------------------------
Ajax1234 time: 2.4659
-----------------------------------------
</code></pre>
<p>Here's the script I used to test:</p>
<pre><code>from timeit import timeit

setup = """
from itertools import chain
mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']
"""

methods = {
    'AChampion': """[animal for word in mylist for animal in word.split('_')]""",
    'hiro_protagonist': """list(chain.from_iterable(item.split('_') for item in mylist))""",
    'Eugene_Sh': """'_'.join(mylist).split('_')""",
    'cᴏʟᴅsᴘᴇᴇᴅ': """list([(yield from x.split('_')) for x in mylist])""",
    'jdehesa': """sum((s.split("_") for s in mylist), [])""",
    'mogga': """[i for sublist in [j.split('_') for j in mylist] for i in sublist]""",
    'Ajax1234': """list(chain(*[[i] if "_" not in i else i.split("_") for i in mylist]))"""
}

print('-----------------------------------------')
for author, method in methods.items():
    print('{} time: {}'.format(author, round(timeit(setup=setup, stmt=method), 4)))
    print('-----------------------------------------')
</code></pre>
<p>Each method is tested against the sample list given in the question about one million times. To keep things readable, each timing result was rounded to four decimal places.</p>
<hr/>
<p><strong>Note:</strong> If you have a new, <strong>unique</strong> method that has not been posted here yet, contact me in the comments and I'll try to add a timing for it too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Split each item into sublists and flatten them:</p>
<p><code>[item for sublist in mylist for item in sublist.split("_")]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>One-liners are over-rated. Here's a solution using a "traditional" <code>for</code> loop.</p>
<pre><code>mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']

out = []
for s in mylist:
    if '_' in s:
        out.extend(s.split('_'))
    else:
        out.append(s)

print(out)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
<p>This also works:</p>
<pre><code>out = []
for s in mylist:
    out.extend(s.split('_'))
</code></pre>
<p>It's shorter, but I think the previous version is clearer.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']
result = sum((s.split("_") for s in mylist), [])
print(result)
&gt;&gt;&gt; ['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>[i for sublist in [j.split('_') for j in mylist] for i in sublist]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>from itertools import chain

mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']

new_list = list(chain(*[[i] if "_" not in i else i.split("_") for i in mylist]))
</code></pre>
<p>Output:</p>
<pre><code>['dog', 'cat', 'mouse', 'bear', 'lion', 'tiger', 'rabbit', 'ant']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mylist = ['dog', 'cat', 'mouse_bear', 'lion_tiger_rabbit', 'ant']
animals = [a for item in mylist for a in item.split('_')]
print (animals)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what I would actually do:</p>
<pre><code>newlist = []

for i in mylist:
    newlist += i.split('_')
</code></pre>
</div>
<span class="comment-copy">ok, show us the code attempt</span>
<span class="comment-copy">is this a code golf? one-liner seems an unneccessary restriction.</span>
<span class="comment-copy">I'm shocked: 10 answers and not a single upvote on the question.</span>
<span class="comment-copy">@Jean-FrançoisFabre Now 11 :p Let's get this to trending!</span>
<span class="comment-copy">@COLDSPEED dupe of what? now it's time to dupehammer.</span>
<span class="comment-copy">clever sidestep! and the fastest solution... this works for my use case too</span>
<span class="comment-copy">very similar to my response and thaavik's but sooo much more readable and pythonic - thanks</span>
<span class="comment-copy">that is very nice! never thought of it...</span>
<span class="comment-copy">@hiroprotagonist Ty. If OP is on 3.3 or above I would recommend this as being succinct as hell :)</span>
<span class="comment-copy">could not agree more. thank <i>you</i>!</span>
<span class="comment-copy">This is actually invalid syntax in Python 3.8 and up (a deprecation warning is issued in 3.7), don't use <code>yield</code> in comprehensions! See <a href="//stackoverflow.com/q/32139885">yield in list comprehensions and generator expressions</a></span>
<span class="comment-copy">@MartijnPieters Thanks for the PSA, edited.</span>
<span class="comment-copy">amazing to see this...</span>
<span class="comment-copy">ha... very similar to mine below although I think I prefer the @jdehesa answer for it's readability</span>
<span class="comment-copy">yours might be more performant and also maybe a little more readable than mine</span>
<span class="comment-copy">don't use <code>sum</code> for lists. performance suffers a lot (<a href="https://stackoverflow.com/questions/42593904/could-sum-be-faster-on-lists" title="could sum be faster on lists">stackoverflow.com/questions/42593904/…</a>)</span>
<span class="comment-copy">@Jean-FrançoisFabre I wasn't aware of that (or I was and then I forgot). I may still prefer <code>sum</code> to a nested generator in small cases for clarity (for lack of a <code>flatten</code> or <code>concatenate</code> function in the standard library), but it's good to know the performance impact.</span>
<span class="comment-copy">this isn't a one-liner.</span>
<span class="comment-copy">@Jean-FrançoisFabre I'm aware it isn't a one-liner, but it's code I would actually use seeing as a nested list comprehension is the other option.</span>
<span class="comment-copy">I'm just sayin'. There are a lot of 1-liner answers already.</span>
