<div class="post-text" itemprop="text">
<p>I have a string like this:</p>
<pre><code>la lala 135 1039 921\r\n
</code></pre>
<p>And I can't remove the <code>\r\n</code>.</p>
<p>Initially this string was a bytes object but then I converted it to string</p>
<p>I tried with <code>.strip("\r\n")</code> and with <code>.replace("\r\n", "")</code> but nothing...</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that the string contains a literal backslash followed by a character.  Normally, when written into a string such as <code>.strip("\r\n")</code> these are interpreted as escape sequences, with <code>"\r"</code> representing a carriage return (0x0D in the ASCII table) and <code>"\n"</code> representing a line feed (0x0A).</p>
<p>Because Python interprets a backslash as the beginning of an escape sequence, you need to follow it by another backslash to signify that you mean a literal backslash.  Therefore, the calls need to be <code>.strip("\\r\\n")</code> and <code>.replace("\\r\\n", "")</code>.</p>
<p>You can see the list of escape sequences Python supports in the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">String and Byte Literals</a> subsection of the Lexical Analysis section in the Python Language Reference.</p>
<p>For what it's worth, I would not use <code>.strip()</code> to remove the sequence.  <a href="https://docs.python.org/3/library/stdtypes.html?highlight=strip#str.strip" rel="nofollow noreferrer"><code>.strip()</code></a> removes all characters in the string (it treats the string as a set, rather than a pattern match).  <code>.replace()</code> would be a better choice, or simply using slice notation to remove the trailing <code>"\\r\\n"</code> off the string when you detect it's present:</p>
<pre><code>if s.endswith("\\r\\n"):
    s = s[:-4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; my_string = "la lala 135 1039 921\r\n"
&gt;&gt;&gt; my_string.rstrip()
'la lala 135 1039 921'
</code></pre>
<p>Alternate solution with just slicing off the end, which works better with the bytes-&gt;string situation:</p>
<pre><code>&gt;&gt;&gt; my_string = b"la lala 135 1039 921\r\n"
&gt;&gt;&gt; my_string = my_string.decode("utf-8")
&gt;&gt;&gt; my_string = my_string[0:-2]
&gt;&gt;&gt; my_string
'la lala 135 1039 921'
</code></pre>
<p>Or hell, even a regex solution, which works better:</p>
<pre><code>re.sub(r'\r\n', '', my_string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also determine the length of the string say 20 characters then truncate it to 18 regardless of the last two characters or verify they are the characters before you do that.  Sometimes it helps to compare the ascii value first pseudo logic:</p>
<p>if last character in string is tab, cr, lf or ? then shorten the string by one.  Repeat till you no longer find ending characters matching tab, cr, lef, etc.</p>
</div>
<span class="comment-copy">You need <code>.strip()</code></span>
<span class="comment-copy">In your example, is <code>\r</code> a literal backslash and an 'r'?  If so, then you need to change your call to be <code>.strip("\\r\\n")</code> or <code>.replace("\\r\\n", "")</code>.</span>
<span class="comment-copy">@ChristianDean So it would seem! What jszakmeister posted is correct then.</span>
<span class="comment-copy">@jszakmeister it works, thanks! if you write an answer I'll accept it!</span>
<span class="comment-copy">You could also just slice off the end like <code>my_string[0:-5]</code>. Or use <code>re.sub(r'\\r\\n', '', mystr)</code></span>
<span class="comment-copy">Your strip solution is dangerous, for example <code>"return\\r\\n".strip("\\r\\n")</code> becomes just <code>"etu"</code>.</span>
<span class="comment-copy">It wasn't meant to be a solution of how to remove the characters, it was meant to show why the OP's solution wasn't working.  But you're right, <code>.strip()</code> is inappropriate here.</span>
<span class="comment-copy">doesn't work :\</span>
<span class="comment-copy">@AllExJ How strange. is the <code>\r\n</code> not at the end of the string?</span>
<span class="comment-copy">it is at the end</span>
<span class="comment-copy">Ah, I figured it out. if I do <code>str(b'la lala 135 1039 921\r\n').replace("\\r\\n", "")</code> it works. I'll leave the answer, though, just in case someone googles it and sees it.</span>
<span class="comment-copy">thanks anyway !</span>
