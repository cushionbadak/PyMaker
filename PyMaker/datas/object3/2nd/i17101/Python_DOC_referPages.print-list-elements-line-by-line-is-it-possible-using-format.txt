Natural Text
I very like quite new Python convention to print things with Is it possible using it to print element line by line. Assuming of course number of elements is unknown.Working example will be appreciated.
You can use the string formatter on really any kind of string, including multi-line string. So of course, if you had a format string  you could pass three items to it, and they would be all placed on separate lines.So with a dynamic number of elements you want to print, all you need to do is make sure that the format string contains the same number of format items too. One way to solve this would be to construct the format string dynamically. For example this:So you essentially create a format string first, by having a generator produce one format item  per element in , and joining these using a newline character. So the resulting string looks something like this: .And then you use that string as the format string, and call  on it, passing the unpacked list as arguments to it. So you are correctly filling all spots of the format string.So, you can do it. However, this is not really a practical idea. It looks rather confusing and does not convey your intention well. A better way would be to handle each item of your list separately, and format it separately, and only then join them together:As for just printing elements line by line, of course the more obvious way, that wouldnâ€™t require you to build one long string with line breaks, would be to loop over the items and just print them one-by-one:And of course, as thefourtheye suggested, if each loop iteration is very simple, you can also pass the whole list to the print function, and set  to print the elements on separate lines each.
If you are using Python 3.x and your intention is to just printing the list of elements, one in each line, then you can use  function itself, like this simply unpacks the list elements and pass each one of them as parameters to the  function (Yes,  is a function in Python 3.x).OutputIf you are using Python 2.x, then you can just import the print function from the future like thisNote: This import should be the first line in the file.
You mean like ? String formatting could probably do something similar to , but it doesn't seem necessary here. (see update)The thing is,  doesn't print things at all. That's what  is for.  takes some data and returns a string.  is one way to output that string to the terminal/standard output, but  and  don't really have any real relationship.Update:I take back what I said about string formatting being able to do this. The format pattern itself predefines the arity of the  method, so short of dynamically building the format pattern, you can't use  for this.
Keep It SimplegivesIs it what you wish obtain?
Another way to do it is to use string multiplication:For plain old printing, I'd use the sep option of the print command. The format method is more useful if you are using the python logging facilities (which do not have the sep argument).


Answer URL
