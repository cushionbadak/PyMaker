Natural Text
This question already has an answer here:Python attributeError on __del__                    1 answer                This code...Produces the following error...But this code does not.The only difference I see is the last variable name is "vb" vs. "v".I am leaning Python and am working on the OOP stuff now.
Yes, although it is not the so much the variable name that causes this, not directly.When Python exits, all modules are deleted too. The way modules are cleaned up is by setting all globals in a module to  (so those references no longer refer to the original objects). Those globals are keys in a dictionary object, and as dictionaries are ordered arbitrarily, renaming one variable can change the order in which variables are cleared.When you renamed  to , you altered the order in which variables are cleared, and now  is cleared last.One work-around is to use  in the  method instead:because the instance will always have a reference to the class still, or test if  is not set to :Two notes:CPython 3.4 no longer sets globals to  (in most cases), as per Safe Object Finalization; see PEP 442.CPython 3.3 automatically applies a randomized hash salt to the  keys used in a  dictionary; this makes the behaviour you observed even more random, merely re-running your code several times may or may not trigger the error message.


Answer URL
https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442
