Natural Text
I wrote a small program in sample.py file, and loaded as  module using commandBut i see that interpreter does not check the binding of f2 during loading of module.Interpreter only realises that f2 name is not binded to its value when i callAnother example, where interpreter checks the binding of name  , while loading the file as  module using command      throws an error saying My question is:1)Why python interpreter does not take an effort to check whether all names are bind during loading of sample.py file as  module and defer to using that name ?2) Do you think large projects will create complexity, Because the test cases written must make sure each  is used for testing before it goes for production?
Consider this example:If a user enters  when prompted, then  will execute correctly, but not otherwise.This is a perfectly legal python program, and the line  may or may not execute correctly, dependent completely on user input. So python cannot determine at module load time whether execution of this code will result in a name error or not.Addressing some additional confusion:It might seem that python does sometimes do static name-checking. Ie, if we have :and you do , no error will be printed. The function  has been defined, but not run. We could also do , which will open up an interpreter. If in the interpreter we then type , now the code will run, and we'll get the lookup error for .Consider a second file :Here, there is no function being defined. We're simply running a  statement at the top-level. Doing  will cause a lookup error for , since running  constitutes actually running that print statement, as opposed to only defining a function that would run the print statement when called.So it's not that python sometimes does static name-checking -- python will only throw a name error when code involving that name is actually run. It's just that when code gets run depends on where it is (in a function vs being top-level).


Answer URL
https://docs.python.org/3/library/unittest.mock.html#the-patchers
