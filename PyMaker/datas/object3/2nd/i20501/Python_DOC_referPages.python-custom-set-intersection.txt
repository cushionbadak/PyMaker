Natural Text
So, there exists an easy way to calculate the intersection of two sets via set.intersection(). However, I have the following problem:( is a base-class provided by my ORM that implements basic  and  functionality, which essentially adds every member of the class to the hash. In other words, the  returned will be a hash of every element of the class)At this stage, I would like to run a set intersection operation by  only, to find, say, . (the typical  at this point would not give me anything, I can't override  or  on the  class, as this would override the original set union (I think)What's the best way to do this in Python 2.x?EDIT: Note that the solution doesn't have to rely on a . However, I need to find unions and then intersections, so it feels like this is amenable to a set (but I'm willing to accept solutions that use whatever magic you deem worthy, so long as it solves my problem!)
Sounds likeis what you want, since  is your unique key?
If you want the  to be irrelevant with respect to comparing, you should override  and  in  although you have it in your .If you need this behaviour only in this (and similiar) contexts, you could create a wrapper object which contains the  and behaves differently, such asand then do(untested)
I hate answering my own questions, so I'll hold off on marking this as the 'answer' for a little while yet.Turns out the way to do this is as follows:It's certainly dirty and it relies on , but it's less intensive than the best solution proposed so far (glglgl's solution) as my actual  can contain potentially in the order of thousands of items, so this will save me re-creating objects every time I run this intersection procedure.
How about:It might be faster to throw  at your ORM, in which case you wouldn't build dictionaries, just collect names in lists.
This is clunky, but...
You'll have to override  and the comparision methods if you want to use sets like this.If you don't, thenwill always be false.If your objects are managed by an ORM, then you'll have to check how it compares objects.Usually it only looks at the objects id and comparision only works if both objects are managed. If you try to compare an object you got from the ORM with an instance you created yourself before it's persisted to the db, then they are likely to be different. Anyway, an ORM shouldn't have problems with you supplying your own comparision logic.But if for some reasons you can't override  and , then you can't use sets for intersection and union with the original objects. You could:calculate the intersection/union yourselfcreate a wrapper class which is comparable:


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-lookup
