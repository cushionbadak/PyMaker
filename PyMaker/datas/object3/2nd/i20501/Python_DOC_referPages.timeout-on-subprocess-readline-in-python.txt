Natural Text
I have a small issue that I'm not quite sure how to solve. Here is a minimal example:What I haveWhat I would likeI read a line from a subprocess and do something with it. What I want is to exit if no line arrived after a fixed time interval. Any recommendations? 
Thanks for all the answers!I found a way to solve my problem by simply using select.poll to peek into stdout.
Here's a portable solution that enforces the timeout for reading a single line using :
I used something a bit more general in python (IIRC also pieced together from SO questions, but I cannot recall which ones).Be warned, though, this uses an interrupt to stop whatever function you give it. This might not be a good idea for all functions and it also prevents you from closing the program with ctrl+c during the timeout (i.e. ctrl+c will be handled as a timeout)You could use this an call it like:Might be a bit overkill, though. I suspect there is a simpler option for your case that I don't know.
In Python 3, a timeout option has been added to the subprocess module. Using a structure likewould be a proper solution.Since the output is expected to contain a new line character, it's safe to assume that it is text (as in printable, readable), in which case  flag is strongly recommended.If Python2 is a must, please use https://pypi.python.org/pypi/subprocess32/ (backport)For a pure-python Python 2 solution, look at Using module 'subprocess' with timeout.
Try using signal.alarm:A couple of runs to show it works:For more detailed example see pGuides.
A portable solution is to use a thread to kill the child process if reading a line takes too long:where  class is like  that can be restarted and/or blocked:
while your (Tom's) solution works, using  in the  idiom is more compact. this is the equivalent of your answerthe rest is the same.see .[Note: this is Unix-specific, as are some of the other answers.][Note 2: edited to add line buffering as per OP request][Note 3: the line buffering may not be reliable in all circumstances, leading to readline() blocking]


Answer URL
https://docs.python.org/3/library/asyncio
