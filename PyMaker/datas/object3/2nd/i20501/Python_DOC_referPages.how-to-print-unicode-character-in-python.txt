Natural Text
I want to make a dictionary where English words point to Russian and French translations. How do I print out unicode characters in Python?  Also, how do you store unicode chars in a variable?
To include Unicode characters in your Python source code, you can use Unicode escape characters in the form  in your string, and prefix the string literal with 'u'.Here's an example running in the Python interactive console:Strings declared like this are Unicode-type variables, as described in the Python Unicode documentation.If running the above command doesn't display the text correctly for you, perhaps your terminal isn't capable of displaying Unicode characters.For information about reading Unicode data from a file, see this answer:Character reading from file in Python
Print a unicode character in Python:Print a unicode character directly from python interpreter:Unicode character  is a checkmark.  The interpreter prints the checkmark on the screen.Print a unicode character from a python script:Put this in test.py:Run it like this:If it doesn't show a checkmark for you, then the problem could be elsewhere, like the terminal settings or something you are doing with stream redirection.Store unicode characters in a file:Save this to file: foo.py:Run it and pipe output to file:Open tmp.txt and look inside, you see this:Thus you have saved unicode e with a obfuscation mark on it to a file.
If you're trying to  Unicode, and getting ascii codec errors, check out this page, the TLDR of which is do  before firing up python (this variable controls what sequence of bytes the console tries to encode your string data as).  Internally, Python3 uses UTF-8 by default (see the Unicode HOWTO) so that's not the problem; you can just put Unicode in strings, as seen in the other answers and comments.  It's when you try and get this data out to your console that the problem happens.  Python thinks your console can only handle ascii.  Some of the other answers say, "Write it to a file, first" but note they specify the encoding (UTF-8) for doing so (so, Python doesn't change anything in writing), and then use a method for reading the file that just spits out the bytes without any regard for encoding, which is why that works.
In Python 2, you declare unicode strings with a , as in  and use  and  to translate to and from unicode, respectively.It's quite a bit easier in Python 3. A very good overview can be found here.  That presentation clarified a lot of things for me.
I use Portable winpython in Windows, it includes IPython QT console, I could achieve the following.your console interpreter should support unicode in order to show unicode characters.
Just one more thing that hasn't been added yetIn Python 2, if you want to print a variable that has unicode and use , then do this (make the base string that is being formatted a unicode string with :
This fixes UTF-8 printing in python:


Answer URL
https://docs.python.org/3/howto/unicode.html
