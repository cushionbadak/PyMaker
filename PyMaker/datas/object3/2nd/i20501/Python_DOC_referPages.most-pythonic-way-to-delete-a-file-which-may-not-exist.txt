Natural Text
I want to delete the file  if it exists.  Is it proper to sayIs there a better way? A one-line way? 
A more pythonic way would be:Although this takes even more lines and looks very ugly, it avoids the unnecessary call to  and follows the python convention of overusing exceptions.It may be worthwhile to write a function to do this for you:
I prefer to suppress an exception rather than checking for the file's existence, to avoid a TOCTTOU bug.  Matt's answer is a good example of this, but we can simplify it slightly under Python 3, using :If  is a  object instead of a string, we can call its  method instead of using .  In my experience, Path objects are more useful than strings for filesystem manipulation.Since everything in this answer is exclusive to Python 3, it provides yet another reason to upgrade.
 returns  for folders as well as files. Consider using  to check for whether the file exists instead.
In the spirit of Andy Jones' answer, how about an authentic ternary operation:
Another way to know if the file (or files) exists, and to remove it, is using the module glob.Glob finds all the files that could select the pattern with a *nix wildcard, and loops the list.
is a one-liner.Many of you may disagree - possibly for reasons like considering the proposed use of ternaries "ugly" - but this begs the question of whether we should listen to people used to ugly standards when they call something non-standard "ugly".
Matt's answer is the right one for older Pythons and Kevin's the right answer for newer ones.If you wish not to copy the function for , this functionality is exposed in path.py as remove_p:
In Python 3.4 or later version, the pythonic way would be:
Something like this? Takes advantage of short-circuit evaluation. If the file does not exist, the whole conditional cannot be true, so python will not bother evaluation the second part. 
A KISS offering:And then:
This is another solution:
I have used  which can force to delete nonexistent files with  as an option to . We can also use safe-rm ()Safe-rm is a safety tool intended to prevent the accidental deletion  of important files by replacing /bin/rm with a wrapper, which checks  the given arguments against a configurable blacklist of files and  directories that should never be removed.First I check whether folder/file path exist or not. This will prevent setting variable fileToRemovefolderToRemove-r /`.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink
