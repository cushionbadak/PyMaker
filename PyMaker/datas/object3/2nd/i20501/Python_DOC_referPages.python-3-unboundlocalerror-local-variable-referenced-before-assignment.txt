Natural Text
This question already has an answer here:Python variable scope error                    11 answers                The following code gives the error :How can I fix this? Thanks for any help!
You can fix this by passing parameters rather than relying on Globals
This is because, even though  exists, you're also using an assignment statement on the name  inside of the function ( at the bottom line). Naturally, this creates a variable inside the function's scope called  (truthfully, a  or  will only update (reassign) an existing variable, but for reasons unknown (likely consistency in this context), Python treats it as an assignment). The Python interpreter sees this at module load time and decides (correctly so) that the global scope's  should not be used inside the local scope, which leads to a problem when you try to reference the variable before it is locally assigned.Using global variables, outside of necessity, is usually frowned upon by Python developers, because it leads to confusing and problematic code. However, if you'd like to use them to accomplish what your code is implying, you can simply add:inside the top of your function. This will tell Python that you don't intend to define a  or  variable inside the function's local scope. The Python interpreter sees this at module load time and decides (correctly so) to look up any references to the aforementioned variables in the global scope.Some Resourcesthe Python website has a great explanation for this common issue.Python 3 offers a related  statement - check that out as well.
If you set the value of a variable inside the function, python understands it as creating a local variable with that name. This local variable masks the global variable.In your case,  is considered as a local variable, and it's used before being set, thus the error.To solve this problem, you can explicitly say it's a global by putting  in you function.
I don't like this behavior, but this is how Python works. The question has already been answered by others, but for completeness, let me point out that Python 2 has more such quirks.Python 2.7.6 returns an error:Python sees the  is used as a local variable in , and decides that it is also a local variable in . You could add a  statement:It does work; however, f becomes 3 at the end... That is,  now changes the global variable  to , so it is not a function any more.Fortunately, it works fine in Python3 after adding the parentheses to .
Why not simply return your calculated value and let the caller modify the global variable. It's not a good idea to manipulate a global variable within a function, as below:or even make local copies of the global variables and work with them and return the results which the caller can then assign appropriately


Answer URL
https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value
https://docs.python.org/3/reference/simple_stmts.html#nonlocal
