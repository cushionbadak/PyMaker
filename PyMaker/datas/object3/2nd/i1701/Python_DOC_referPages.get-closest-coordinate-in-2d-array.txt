Natural Text
What is the best way so that a given value xy can be compared to a 2D list of coordinates, and return the index number of the closest coordinate?In this example, xy would be compared to the coordinates list and thus return the closest coordinate (-225.0, -299.5) or, more ideally, the index number 0.I've tried researching for a method with itertools or numpy, but couldn't seem to understand how to get the result I want in my example.
You can use  with a proper  function. Sth along the following lines for instance:
Your question is equivalent to : How do I sort a Python list using a custom method to define the sorting key. This can be done in raw python without using external libraries.When using the  function of python you can pass a lambda to the  argument to get the sort done on a specific key.From there you just have to define the key as your own distance calculation method (here using the distances between the points):From there you can just take the first element of the list if you want the closer point, etc. If you still want to external module I think you can use some third parties function such as  as the key parameter of the sort.
You could simply create a function that iterates through the list of coordinates and keep the index of the one in which the distance between two points is the smallest (using the Pythagorean theorem).However, if you need something fast given by an external module rather than writing your own, I am not aware of libraries I already used that already have that function, so I'm not helpful here.
Using scipy.spatial.KDTree:The kd-tree method is O(N*log(N)) and is much faster than Brute Force method that takes O(N**2) time for large enough N.


Answer URL
https://docs.python.org/3/library/math.html#math.hypot
