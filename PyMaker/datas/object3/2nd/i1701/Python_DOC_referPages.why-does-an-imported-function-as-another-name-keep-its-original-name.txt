Natural Text
Here:we get: .Why not ? Which attribute would give ?
You can view  as just an assignment. You would not expect a function to change its  attribute when you assign another name to the function.Thanks. What attribute of the variable  would return the string  then?There is no such attribute. Names () refer to values (the function object) unidirectionally.The  attribute of a function is set as the name the function was defined with using the syntax. That's why you don't get a meaningful  attribute if you define an anonymous function and assign the name  after it has been created.
Importing an object just binds a new variable, and all that adding  does is let you pick an alternative name to use for the variable in the current namespace.The  attribute on an object says nothing about the name it is currently bound to, you can have any number of variables as well as containers such as lists or dictionaries pointing to the same object, after all:The above created 4 additional references to the function object; you can't have  reflect all of those, and the references in  and  do not (directly) have names.Since , ,  and  all just set the name  in the current module, they are treated the exact same way as other assignments. You could import the function more than once, under different names, too.Instead, the  value of a function is set to name it was defined with in the  statement. It is a debugging aid, at most. It is used in tracebacks, for example, to make it easier to identify lines of code shown in the traceback. You'd only set the  to something else if that would help identify the location better. (Note: in Python 3, there is also the  attribute, which is used instead of  as it includes more information on where the function is defined when nested or defined on a class).
The  is syntactical sugar in the file/session of the import, while the  attribute is part of the function object.


Answer URL
https://docs.python.org/3/library/stdtypes.html#definition.__qualname__
