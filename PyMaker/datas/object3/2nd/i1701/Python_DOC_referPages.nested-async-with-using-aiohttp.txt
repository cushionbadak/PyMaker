Natural Text
I would like to create a scheduler class that uses aiohttp to make API calls. I tried this:but this just results in an error: . A second approach for the  function:works well. Is this a good construct? It doesn't adhere to examples of how to use aiohttp. Also wondering why the first approach isn't working?
You can't use  inside a function and have the context manager remain open, no. The  block exits as soon as you use  to exit the  coroutine!For the specific case, entering a  context manager does nothing but return . So for that type, just creating the instance and storing it in , and awaiting on  suffices here, yes.The general pattern for a nested asynchronous context manager is to await the  and  methods of a nested async context manager from your own such methods (and perhaps pass along the exception information):Technically speaking, you should first assure that there is an actual  attribute before entering a nested context manager:See the official PEP that added the concept.
You can manage that dependency externally:When that  chain becomes too ridiculous you can use :


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.AsyncExitStack
