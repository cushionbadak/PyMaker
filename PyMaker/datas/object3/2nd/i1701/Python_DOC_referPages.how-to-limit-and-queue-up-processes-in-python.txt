Natural Text
Lets say I have 10000 tasks at hand. How can I process them in parallel, running precisely 8 processes at any time? The moment a task is finished, the next task should be fetched for execution immediately.I want to do this because my CPU has only 8 hardware threads. Swarming it with 10000 tasks at once will slow down the overall computation due to the switching overhead. My memory is also limited.(Edit: This is not a duplicate of this question as I am not asking how to fork a process.)
I think if you split the "for" loop for join statement your problem might be solved. Right now you start a fork and want the result to come back and go do another fork process. And no fork is closed right now. Or just go with pool and map functions. 
For Pool to work here I need to call get() too.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
