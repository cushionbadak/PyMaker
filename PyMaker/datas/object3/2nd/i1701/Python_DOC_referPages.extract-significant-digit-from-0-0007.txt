Natural Text
I want to extract significant digit of 7 from The code is as followsBut  becomes not . Can anyone help me?
In some sense, you were lucky to start out with the value . As it turns out, that value is one of the (many!) decimal values that cannot be represented exactly in a floating point format.A floating point number gets usually stored in the common IEEE-754 format as powers of 2. Just like a whole number such as 175 is stored as the sum of bits with increasing powers-of-two values (165 = 128 + 32 + 4 + 1), fractions are stored as a sum of 1/power-of-two numbers. That means that a value of 1/2, 1/4, and 1/65536 can be stored exactly (and sums thereof, such as 3/4), but your  can not. Its closest value is actually 0.0000699999999999999992887633748495. ("Closest" in the sense that adding just one more one-bit at the end will make it slightly larger than 0.0007, and the difference is ever so slightly larger than this lower one.)In your calculation, you use the double divide slash , which instructs Python to do an integer division and discard the fractional part. So while the intermediate calculation is correct and you get something like , this gets truncated and you end up with .If you use a single slash, the result will keep its (exact!) decimals but Python will represent it as , give or take a few zeroes. By default, Python displays only a small number of decimals.Note that this still "is" not the exact value . The calculation starts out with an imprecise number, and although there may be some intermediate rounding here and there, there is only a small chance you end up with a precise integer. Again, not for all decimals, but for a large number of them. Other fractional values may be stored fractionally larger than the value you enter – , for examplea – but the underlying 'problem' of accuracy is also present there. It's just not as visible as with yours.If you want a nearest integer result, use a single divide slash for the exact calculation, followed by  to force the number to the nearest integer anyway.a To be precise, as somewhere about 0.000400000000000000019168694409544. After your routine, Python will display it as  but internally it's still just a bit larger than that.


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
