Natural Text
I am trying to compress a string in Python, but my result is not what I expected.The string I am trying to compress for example:Here is what my end result should be:First try:Results in:The result is almost what I am looking for, but the header part is different. Both results (my one and the expected one) decompress to the same string, so they both seem to work. I still would like to know why I am not getting the correct header in the base64 compressed string.Could I maybe get a better result using zlib? I tried, but got a completely different result, which worked when decompressed, too.
You have exactly the same compressed data stream. The only difference is that your expected data stream has the MTIME field of the header set to 0 and the XFL flag set to 0, not 2:The  function just uses the  class to do the actual compressing, and it'll use  for the MTIME field whenever the  argument is left to the default .I'd not expect that to actually matter, both strings will result in the exact same decompressed data.If you must have the same output, then the easiest method is to just replace the header:The above replaces the existing header with one that will have the parts that matter set to the same values as your expected output; both MTIME and the XFL flag set to 0. Note that when you use  that only the MTIME bytes would ever vary, and the XFL field is not actually used when decompressing.While you could use the  class to produce compressed output with MTIME set to 0 (pass in ), you can't change what the XFL field is set to; that is currently hard-coded to .Note that even accounting for the MTIME and XFL differences, like data compressed with different implementations of the DEFLATE compression algorithm could still result in a different compressed stream, even when using the same compression settings! That's because DEFLATE encodes data based on the frequency of snippets, and different implementations are free to make different choices when there are multiple snippets with the same frequency available when compressing. So the only correct way to test if your data has been compressed correctly, is to decompress again and compare the result.


Answer URL
https://docs.python.org/3/library/gzip.html#gzip.GzipFile
