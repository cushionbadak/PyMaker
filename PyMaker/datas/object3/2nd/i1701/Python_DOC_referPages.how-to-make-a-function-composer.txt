Natural Text
I am trying to make a function that rounds other functions for my university degree . For example I would like to call the and when i call the  it has to shows me  instead of . What I am trying is this:but this doesn't work.EDIT: The function should have only one parameter. For examplethe start of the function should be so in this function the  function needs to be rounded. so when I call  it shows me .
For your specific example, you can writeAlex's answer generalizes this; he defines a function that creates  for you. If the function is already defined, you just pass it as an argument to :Of course, you don't need to define  if you don't want to.  can be called directly, although it's far more efficient to safe the return value of  if you expect to use it multiple times, rather than redefining it each time.Otherwise, the decorator syntax is just short for (using Alex's example)As I said in my comment, this is an example of implementing composition. Mathematically, composition is simple, because mathematical functions always take a single argument and return a single argument. As such, the composition of two functions  and  could always be defined simply asThen(Ignoring all sorts of practical concerns around the implementation, Python could in theory even provide a Unicode operator  for functions: . Explaining why this won't happen is beyond the scope of this answer.)In Python, though, functions are far more complicated. They can take multiple arguments, they can accept arbitrary numbers of arguments and arbitrary keyword arguments, and while each technically returns a single value, that value can be a tuple which is thought of as multiple values or a . As a result, there may be many ways you might expect to pass the return value of  to a function , more than can easily be accommodated in a simple  function.
You should check out closures:Then you can decorate functions using the  character:outputs Supplementary:You can use  in your closure so you don't lose information (e.g. docstring, function name) about the original function.There are a bunch of resources for learning about closures (e.g. 1, 2) and decorators (e.g. 1, 2) that you can find by Googling those terms.
Function composition isn't supported natively in Python. You can use a decorator as per @Alex's solution. You can define a new function explicitly as per @chepner's solution.Or you can use a 3rd party library. For example, via :


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
