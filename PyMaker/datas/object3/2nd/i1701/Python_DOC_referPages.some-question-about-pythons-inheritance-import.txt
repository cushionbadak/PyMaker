Natural Text
I'm new to python, but skilled on java. Now I'm facing a annoying question when training on python3.5, I have such a src structure:  in main.py:  in modulescript.py:  in BaseModel.py:in BaseAction.py:in ModelImpl.py:in ActionImpl.py:Now when I input python3 main.py in terminal, I got printed result:  but if I input python3 module function.py, I got error:  Traceback (most recent call last):File "modulescript.py", line 1, in (module) from BaseAction import BaseAction File "/home/jerry/projects/test/python/base/BaseAction.py", line 1, in (module) from .BaseModel import BaseModel SystemError: Parent module '' not loaded, cannot perform relative importI found that It's cause by import statement in BaseAction.py:  If I change to , the modulescript.py runs ok, but the main.py will got a error:  File "main.py", line 225, in (module) from ActionImpl import ActionImplFile "/home/jerry/projects/test/python/ActionImpl.py", line 1, in (module) from base.BaseAction import BaseActionFile "/home/jerry/projects/test/python/base/BaseAction.py", line 1, in (module) from BaseModel import BaseModelImportError: No module named 'BaseModel'Oops. annoying!In java, you can import any Class from any where if you provide the right path of the class like so, what's the right way to import in python?
This is Python, not Java, you group modules related to eachother in a single package, which is a folder.To be able to import from a package, you must do a few things first.Create  in your package to let interpreter know that it's a package. If there's no such file in a folder, it won't even budge whether you want to import from there or not, it's not a package to it and that's all.Additionally, if you want (and you should when you're creating a package for others to use) import classes functions and etc in your  to allow to import them from the package itself directly.I made a simple example::EDIT: if you want examplepkg to have a "nested" package, as in, package it depends on in some way, you create another folder, and put another  in it and do the same thing, then in  of examplepkg you can further "export" it for the top level modules to see. How you do it is up to you, just be consistent.:::For more information, read this.


Answer URL
https://docs.python.org/3/tutorial/modules.html
