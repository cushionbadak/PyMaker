Natural Text
When  method is called in Python 3, I noticed that it doesn't return a long-length integer when taking in  data type but with  type.Is this supposed to work this way? If that actually is the case, for the  type to have a short hash value, won't it cause collision since it's too short?The Result:
In CPython, default Python interpreter implementation, built-in  is done in this way:For numeric types, the hash of a number x is based on the reduction     of x modulo the prime P = 2**_PyHASH_BITS - 1.  It's designed so that     hash(x) == hash(y) whenever x and y are numerically equal, even if     x and y have different types is  (64-bit systems) or  (32-bit systems)(defined here)So on 64-bit system built-in  looks like this function:That's why for small ints you got the same values, while for example  returns  and  returns 
The only purpose of the  function is to produce an integer value that can be used to insert an object into a dict. The only thing  guarantees is that if , then . For a user-defined class , it is the user's responsibility to ensure that  and  enforce this guarantee.Anything else is implementation-dependent, and you shouldn't read anything into the value of  for any value . Specifically,  is allowed for , and  is not required for any particular .
You should use hashlib module:


Answer URL
https://docs.python.org/3/library/hashlib.html?highlight=hashlib
https://docs.python.org/3/library/functions.html?highlight=hash#hash
