Natural Text
Sometimes python seems to treat them as the same whereas other times it returns False when False is used but returns nothing with None. It seems to behave very differently to null in other languages.Some specific examples are:True and None returns nothingFalse and None returns False
Different values in Python can be described as being "truthy" or "falsy", even if they aren't  values, which means they are interpreted as  or  in a situation that expects a  value (such as an  condition). As defined in the documentation, every value in Python, regardless of type, is interpreted as being  except for the following values (which are interpreted as ):Constants defined to be false:  and .Zero of any numeric type: , , , ,  Empty sequences and collections: , , , , , To your specific situation, using the  situation, the following statement:would be functionally identical to:This is because, as shown in the list above, the value  is automatically converted to  for the purposes of the  condition. This is something referred to as "syntactic sugar", which is a feature of the language that exists to make the developer's life easier.However, just because  is interpreted as  in this particular scenario, that doesn't mean the two values are equal to each other. This is because  is meant to be part of the True/False pair indicating binary concepts like "yes/no", "on/off", etc. , on the other hand, represents the concept of nothing. Variables with a value of  means they have no value at all. To compare it to  in the form of a metaphor,  would be like answering somebody by saying "No", where  would be like not answering them at all. As a more programming-oriented example, see the following code snippet:
 is a singleton and  is a boolean.In python both behave the same way in a boolean context.Example 1:None of the  statements prints anything.However, as I said, there are not the .Example 2:


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
