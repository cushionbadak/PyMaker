Natural Text
If it were just checking whether letters in a test_string are also in a control_string, I would not have had this problem.I will simply use the code below.But I also face a rather convoluted task of discerning whether the overlapping letters in the control_string are in the same sequential order as those in test_string.For example,I thought of using the for iterator to compare the indices of the alphabets, but it is quite hard to think of the appropriate algorithm.My plan is to compare the primary index factor to the next factor, and if primary index factor turns out to be larger than the other, the function returns False. I am stuck on how to compare those index_factors in a for loop.How should I approach this problem?
You can use  to find occurence of desired letter after processed letters.If test string have duplicate letters like:With commented line and with uncommented line 
You could just  the characters in your  string to a regular expression, allowing for any other characters  in between, and then  that pattern in the  string.Without using regular expressions, you can create an  from the  string and use two nested loops,1) ing from the inner loop and  returning  until all the characters in  are found in . It is important to create the , even though  is already iterable, so that the inner loop will continue where it last stopped.You could even do this in one (well, two) lines using  and :Complexity for both approaches should be O(n), with n being the max number of characters.1) This is conceptually similar to what @jpp does, but IMHO a bit clearer.
Here's one solution. The idea is to iterate through the  string first and yield a value if it matches the next  character. If the total number of matches equals the length of , then your condition is satisfied.@tobias_k's answer has cleaner version of this. If you want some additional information, e.g. how many letters align before there's a break found, you can trivially adjust the  function to return .
Recursion is the best way to solve such problems. Here's one that checks for sequential ordering.Outputs:and  for Here's an Iterative approach that does the same thing,
An elegant solution using a generator:First check if all the letters in the  are contained in the . Then check if the order is similar to the  order.
A simple way is making use of the  argument in , which serves as a key for the sort comparison:Thus this is computing the intersection of the two sets and sorting it according to the longer string. Having done so you only need to compare the result with the shorter string to see if they are the same.The function returns True or False accordingly. Using your examples:


Answer URL
https://docs.python.org/3/library/re.html
