Natural Text
I'm working on an exercise that requires me to build two dictionaries, one whose keys are country names, and the values are the GDP. This part works fine.The second dictionary is where I'm lost, as the keys are supposed to be the letters A‚ÄêZ and the values are sets of country names. I tried using a for loop, which I've commented on below, where the issue lies.If the user enters a string with only one letter (like A), the program should print all the countries that begin with that letter. When you run the program, however, it only prints out one country for each letter.The text file contains 228 lines. ie:And here's my code.this for loop should spit out 248 values (one for each country), where the key is the initial and the value is the country name. However, it only spits out 26 values (one country for each letter in the alphabet)I'd appreciate any input leading me in the right direction.
Use  to make sure each value of your initials dict is a set, and then use the  method. If you just use  you'll be overwriting the initial keys value each time,  is an easier way of using an expression like:See the full working example below, and also note that i'm using  instead of , which i'd also recommend:Result:see: https://docs.python.org/3/library/collections.html#collections.defaultdict
The values for  should be such that they can contain a list of countries. One option is to use a list as the values in your dictionary. In your code, you are overwriting the values for each key whenever a new country with the same initial is to be added as the value.Moreover, you can use the  method of the  type. This code:should be enough to create the second dictionary elegantly., either returns the value for the key (in this case the key is set to the first letter of the country name) if it already exists, or inserts a new key (again, the first letter of the country) into the dictionary with a value that is an empty set . editif you want your values to be set (for faster lookup/membership test), you can use the following lines:
Here's a link to a live functioning version of the OP's code online.The keys in Python  objects are unique. There can only ever be one  key a single . What happens in your code is that first the key/value pair  is inserted into . However, in a subsequent iteration of the  loop,  is overwritten by . This kind of overwriting is sometimes referred to as "clobbering".FixOne way to get the result that you seem to be after would be to rewrite that  loop:Also, you have to rewrite the related  statement beneath that:ExplanationHere's a complete explanation of the  line above:If  is a key in , this will return the associated value. If  is not in the dictionary, it will return the empty set  instead.This creates a new set with a single member in it, .The  operator adds all of the members of two sets together and returns the result.The right hand side of the line either creates a new set, or adds to an existing one. This bit of code assigns that newly created/expanded set back to .NotesThe above code sets the values of  as sets. If you want to use list values, use this version of the  loop instead:
You're very close to what you're looking for, You could populate your dictionaries respectively while looping over the contents of the file  that you're reading. You can also read the contents of the file first and then perform the necessary operations to populate the dictionaries. You could achieve your requirement with nice oneliners in python using dict comprehensions and . Here's an example:You now have a list of all lines in the  as follows:As you loop over the items, you can  and use the  and  index values as required.You could use dictionary comprehension as follows:Which results in:Similarly using  from  you can obtain:Which results in the required dictionary of A complete example is as follows:Explanation:The line:loops over the following list and splits each entry in the list by It then takes the value at index  and  which are the country names and the per capita value and makes them into a dictionary.This line, extracts the name of all the countries from the dictionary created before into a list and sorts them alphabetically for  to work correctly.This lambda expression takes the input as the list of countries and groups together the names of countries where each  starts with  into .


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
