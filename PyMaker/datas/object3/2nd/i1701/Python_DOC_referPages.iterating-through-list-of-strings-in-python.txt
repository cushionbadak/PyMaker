Natural Text
I am trying to wrap my head around why the top code works and the bottom code does not. They are both for loops, just written differently, that appear to do the same thing but the second one fails with 'int object is not iterable'.  Maybe I am missing something obvious herethis worksthis does not work
Problem with the second approachThis makes sense, since here if you call this with, for example , then in the first iteration  will be .Now if we call  that thus means that Python will first evaluate  which is  and thus , and then we call , on . But  is not an iterable (a list, generator, or any "collection" of values). Calculating the "maximum of 5" is strange, so hence the error.Even if Python would allow to, for one non-iterable, just return that element, it would still not work, since that means that it would return the length of the first element.Why the first approach worksIn the first implementation:you construct an iterable:  is not a  loop, it is a generator that, when you iterate over it, will yield the lengths of the . The thus  takes as first (and only) argument an iterable of egers. This means that the  function will iterate over this iterable, and keep track of the maximum. When the generator is "exhausted", it returns the maximum object it has seen.
Firstly, you are returning as soon as you get the first word in your list of words. Secondly,  gives you an integer of how long the thing you call it on is. So, doing  you'd be getting the max of a single number, which is why you get the error you do. The reason this works in your first example:is because  is giving you an iterable, from which you can get the max element. 
Because  works on an iterable or two numbers, if you check the definition of the max() method. And when you do like  its not a iterable object nor arguments are two integers, its just an integer value. Check out the link for info on max() : https://www.programiz.com/python-programming/methods/built-in/max


Answer URL
https://docs.python.org/3/library/functions.html#max
https://docs.python.org/3/glossary.html#term-iterable
