Natural Text
Title explains it all pretty much (even though I know it isn't too descriptive :/), I am trying to make a game where the hero starts on the map at position [0],[0]. I can't work out why the hell I'm sometimes generating fewer items than other times.Edit: Thanks for all of your feedback, and sorry for wasting your time with my stupid mistake :/. I'm going to blame it on the lack of coffee.
You're only checking if the player is overwritten, not if the objects are, you should first get the random coordinates and then check if something's there.a more compact solution as suggested in the comments is
Since the problem space is so small, it's probably not a terrible idea to just generate three of them that are guaranteed unique. guarantees  non-duplicated random results from .  gives you a random element from .
Sometimes  returns the same thing several times, thus some point is reassigned.This could be solved by generating the coordinates together with the type and only executing the rest of the loop if that point is currently unoccupied. This would also eliminate the need for a separate (0,0) test-case.
To avoid overwriting previously placed items, you can use , which will pick random items from the input sample without replacement.There are several other convenient functions for sequences in the  module.I've rewritten your code and turned it into a function that can generate rectangular maps of any size and number and type of items. We use modular arithmetic to convert the position value which is a number in the range 1 to 36 into x,y coordinates on a 6Ã—6 grid. This is a very common and useful operation in computer graphics.This is such a common operation that python has a built-in function you can use for this exact thing.I will not explain all of the code, but I encourage you to read through the answers and try to understand how every line works. You can learn a lot from reading other people's solutions to the same problem as you have solved yourself.
Less items are generated because there are times where the same coordinates are generated again. One way to avoid this is to check if the location already has an item before assigning it. This way, you will solve the issue of replacing your hero too. 
If your map isn't too big, you could use  to  Choose at random from combinations.


Answer URL
https://docs.python.org/3/library/random.html#functions-for-sequences
https://docs.python.org/3/library/random.html#random.sample
