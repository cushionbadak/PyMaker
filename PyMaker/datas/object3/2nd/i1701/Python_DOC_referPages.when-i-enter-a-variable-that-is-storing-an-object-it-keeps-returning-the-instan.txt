Natural Text
I am trying to have the list returned when I call upon the object in interactive mode. This is what keeps happening:
I think the methodology you may be looking for is documented here:https://docs.python.org/3/tutorial/classes.html#class-and-instance-variablesModified example code:The 'push' method appends items to the 'stack_list' when it's called.
The Python interactive shell prints the representation, not the string, so you need to implement a  method. But both  and  should always return a string. So try:
I'd suggest first to override  instead of  to match your goal, however below you can find both approaches for the class: Basically, what happened earlier you were triggering the representation of the object which is what you've called when you simply put .To have it transform to, let's say, a string representation you could do:Analogously, you could do it for .A example of its execution:For deeper reference on the differences among them, you could check following thread Difference between __str__ and __repr__?
Instead of returning the '' from the  function, you can return the list as shown below:Output:
There are two things to note here:When the REPL evals an object, it uses its  method for presentation.Your  method will cause errors because it does not return a string.After running your code, the following behavior can be observed:To fix these issues, implement , for example like this:Nowshows the content of . In addition, you can remove the  method, because when printing,  will be called as a fallback when there's no  implementation.If you want to keep , make sure to modify it in order to return a  object, otherwise you'll get a  as demonstrated above.A little more about :Ideally, the method should return a string such that when copy pasted into the interpreter, an equal object will be built. Since your  method accepts no arguments, it's not possible here to display an informative string that would be evaluated as an instance of  and show the content of the stack at the same time. If you changed  toyou could change  towhich would look like this when implemented:... eval'ing this string would create a  with the same content.While we're at it, consider implementing  for good measure...... such that:


Answer URL
https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables
