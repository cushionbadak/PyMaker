Natural Text
Using Python 3's function annotations, it is possible to specify the type of items contained within a homogeneous list (or other collection) for the purpose of type hinting in PyCharm and other IDEs?A pseudo-python code example for a list of int:I know it's possible using Docstring...... but I prefer the annotation style if it's possible.
Answering my own question; the TLDR answer is No Yes. Update 2In September 2015, Python 3.5 was released with support for Type Hints and includes a new typing module. This allows for the specification of types contained within collections. As of November 2015, JetBrains PyCharm 5.0 fully supports Python 3.5 to include Type Hints as illustrated below.Update 1 As of May 2015, PEP0484 (Type Hints) has been formally accepted. The draft implementation is also available at github under ambv/typehinting.Original AnswerAs of Aug 2014, I have confirmed that it is not possible to use Python 3 type annotations to specify types within collections (ex: a list of strings).The use of formatted docstrings such as reStructuredText or Sphinx are viable alternatives and supported by various IDEs.It also appears that Guido is mulling over the idea of extending type annotations in the spirit of mypy: http://mail.python.org/pipermail/python-ideas/2014-August/028618.html
Now that Python 3.5 is officially out, there is the Type Hints supporting module -  and the relevant  "type" for the generic containers.In other words, now you can do:
With support from the BDFL, it's almost certain now that python (probably 3.5) will provide a standardized syntax for type hints via function annotations.https://www.python.org/dev/peps/pep-0484/As referenced in the PEP, there is an experimental type-checker (kind of like pylint, but for types) called mypy that already uses this standard, and doesn't require any new syntax. http://mypy-lang.org/
Type comments have been added since PEP 484This is currently working for me on PyCharm with Python 3.6.4Example Picture in Pycharm


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html#generics
