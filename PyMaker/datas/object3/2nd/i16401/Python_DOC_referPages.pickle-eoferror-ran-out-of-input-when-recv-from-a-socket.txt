Natural Text
I am running a very simple python (3.x) client-server program (both locally on my PC) for a school project (not intended for the real world) which just sends messages back-and-forth (like view customers, add customer, delete customer, etc... real basic).Sometimes the data can be multiple records which I had stored as namedTuples (just made sense) and then went down the path of using Pickle to transfer then.So for example on the client I do something like this:Now ever so often I get the following error:My fear is that this has something to do with my socket (TCP) transfer and maybe somehow I am not getting all the data in time for my pickle.loads - make sense? If not I am really lost as to why this would be happening so inconsistently.However, even if I am right I am not sure how to fix it (quickly), I was considering dropping pickle and just using strings (but couldn't this suffer from the same fate)? Does anyone have any suggestions?Really my message are pretty basic - usually just a command and some small data like "1=John" which means command (1) which is FIND command and then "John" and it returns the record (name, age, etc...) of John (as a namedTuple - but honestly this isn't mandatory).Any suggestions or help would be much appreciated, looking for a quick fix...
The problem with your code is that , when used on a TCP socket, might return different amount of data from what you might have expected, as they are sliced at packet boundaries.The easy solution is to prefix each message with length; for sending likethen for receivingHowever, Python standard library already has a support for message oriented pickling socket, namely multiprocessing.Connection, that supports sending and receiving pickles with ease using the  and  respectively.Thus you can code your server as and client as
For receiving everything the server sends until it closes its side of the connection try this:I've used  because  has the same ”problem” as : It's not guaranteed everything is sent.   returns the number of bytes actually sent, and the programmer has to make sure that matches the length of the argument and if not to send the rest until everything is out.  After sending the writing side of the connection is closed () so the server knows there is no more data coming from the client.  After that, all data from the server is received until the server closes its side of the connection, resulting in the empty bytes object returned from the  call.Here is a suitable  for the client:It reads the complete data from the client and puts it into a JSON encoded response with some other, fixed items.  Instead of the low level socket operations it makes use of the more convenient file like objects the  offers for reading and writing from/to the connection.  The connection is closed by the  after the  method finished.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Connection
