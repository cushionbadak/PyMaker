Natural Text
VB (and C99 and C#, actually) have a way to set multiple attributes on one object with a contracted syntax where you don't have to repeat the object name before "." . Is there a way to do this in Python without having to loop over a dictionary, calling  on each item?Something like
First, keep in mind that you're really not saving much spaceâ€”and you could save a lot more space, and make your style more Pythonic, by just temporarily binding the object to a shorter name:Compare that to VB-ish syntax:You're really only typing and reading one extra character per line. Is that too much of a burden?This wouldn't work in languages with C-style variables with value-copying semantics, because you'd just be setting attributes on a copy of . But in Python,  makes  into another name for the value that  names, it doesn't copy anything. (If you're coming from a C background, it may help to think of this as  followed by a bunch of lines starting .)If you really want to do this, the safest way is to write  as a loop around :The reason you want to use  rather than modifying the object's  or  is that not all attributes are stored in the object's . They may be stored in , or  descriptors on the class, or get-set methods on a C extension object, or some custom thing provided by the metaclass. So, modifying the  may fail in some cases, or may appear to work but do nothing, or, worst of all, do the wrong thing in a way that's very hard to tell (like hiding a property instead of setting it).  is guaranteed to work whenever direct access would work, and to fail whenever direct access would fail.While much of the Python community thinks actual VB-style  syntax is a bad thing (although I can't find the link to Guido's blog post about it), your more explicit syntax seems readable and not at all misleading to me, so if you really want to use this function, go ahead. But again, I don't think there's much need.
Let's write a function!Let's use the function!The output!
If your objective is just to avoid repetition and you are working with your own objects, you could use a fluent interface like this:
Perhaps this is unpythonic but VB-style With blocks can help make the program structure clearer.  This is useful when setting up hierarchical structures, such as GUI layouts.The "quick, dirty and perhaps unpythonic" way to do this is:


Answer URL
https://docs.python.org/3/library/functions.html#setattr
