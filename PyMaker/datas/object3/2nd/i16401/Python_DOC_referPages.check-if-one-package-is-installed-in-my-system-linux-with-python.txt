Natural Text
How can I check is some package is installed in my system (linux or even better if it could works in other OSs), is there any python module or script that could do it?I can not find anything about.Edit: I mean OS specific package (like could be .deb)
To find out whether you've installed a .deb, .rpm, etc. package, you need to use the appropriate tools for your packaging system.APT has a Python wrapper named  in Debian, or just  at PyPI. RPM has a whole slew of Python tools—in fact, most of Redhat's installer ecosystem is built on Python, and you should already have the  module installed. Read Programming RPM with Python (or, better, search for a newer version…) before looking for a high-level wrapper, so you understand what you're actually doing; it's only a couple lines of code even with the low-level interface.As far as I know, nobody has wrapped these up in a universal tool for every packaging format and database that any linux distro has ever used (and, even if they had, that wouldn't do you much good on linux systems that don't use a packaging system). But if you just want to handle a handful of popular systems,  and either Redhat's own tools or search PyPI for RPM, and that will cover almost everything you care about.Alternatively,  is the closest thing to a universal notion of "packages installed on this system". Every linux system will have it (and most other non-Windows systems), but not every package registers with pkg-config. Still, if this is what you're looking for,  is the Python answer.
The word "package" has a half-dozen similar but incompatible meanings, but the fact that you said "package or module" implies you specifically want to know about Python packages and modules, as in the things you can .In which case, the way to test it is to  them.Manually, do this:Well,  isn't installed.Programmatically:Note that this doesn't actually tell you  is missing, just that it couldn't be imported. In a simple "test whether you have this" script, that's generally what you want to actually check for. But what if you really want to check "is installed (even if broken)"?In recent Python (I think 3.4+), the  will have additional information in it that you can access— for the name you were trying to import,  if it was found, etc. However, this is one of those cases where EAFP may not be better than LBYL. You can use  to search for the module without trying to import it, like this:What if you're using an older Python? There are similar features going back to 3.2, but not quite as nice, and if you're using 2.7, there's really nothing worth using, because the import machinery wasn't exposed very well.For that case (and many, many other cool things related to package installation), use —which isn't in the stdlib, but a huge number of third-party packages depend on it (until recently it was the cornerstone of Python package installation, even if unofficially):However, that looks for a //PyPI package, not a Python module or package. There's a lot of overlap there, but they're not exactly the same thing. For a simple example, when you , you get the  PyPI package, which installs the  Python package into your site-packages.


Answer URL
https://docs.python.org/3/library/importlib.html
