Natural Text
DISCLAIMER: I know that what I'm doing should probably never ever be done in a real program.I recently just learnt about python's  and  and it got me interested in creating functions manually via these classes. So as a small test, I started with a function that looked something like this:and wanted to see if I could move the parameters around to turn it into this:Essentially I want to make an ordinary parameter into a keyword-only argument. This is the code I used to do such a mutation:Strangely enough the tooltip seems to show up correctly (the little yellow rectangle of text that shows up in the IDLE interpretter when you begin typing a function call), it displays "a, b=0, *c, d=0, e=0, **f". But the behaviour the function had was interesting to say the least:The first parameter was still getting sent in as , and the second element is still getting sent in as .Is there a way to fix this? If there is, would it require delving into the  and breaking apart the opcodes, or is there a simpler method?
Functions and their code objects are tightly coupled. Arguments are handed in as locals, and locals are looked up by index:Note the integers after the  byte codes, those are indices into the locals array. Reshuffling your arguments did not alter those bytecode indices.The  list is only used for introspection (such as the  output), to map indices back to names, not the other way around.You'd have to apply surgery to the bytecode to alter this; see the  module for more details.If you are using Python 3.4 or newer, you can make use of the new  function to iterate over an information-rich sequence of  objects, which should make such surgery doable. Look for the  instructions, and map indices as you produce new bytecode. objects don't have a method (yet) to convert them back to bytes; adding one is trivial:Demo:Now all you have to do is map the  argument of instructions with  to a new index.


Answer URL
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/library/dis.html#dis.get_instructions
