Natural Text
I have a file containing unsigned 64 bit integers in little endian format shown belowI'm looking for a way to read these numbers in and then convert them to their decimal equivilantThe code I have so far is as follows:which gives me the following output from the first numberI've been looking at how to use structs for this as it seems like it is what it was made for but I've been unable to find the correct syntax using them.Any help would be hugely appreciated!
should work I think ...
The key is the  module—in particular, —just as Joran Beasley explains.So, loop over your file, reading 8 bytes at a time until the end:… unpacking each 8 bytes as a little-endian 64-bit unsigned int:… and doing whatever you want with each number—maybe adding it to a list?… but let's just print it out for now:… and you're done.
According to this comment:It's working now but I'm not sure it's giving me the correct output (or atleast the output I'm expecting) Assuming the first 8 bytes of the file are code in  as it's in little endian this should be  in normal hex I believe. which is 1 in standard decimal. but when I run it using both answers I get the following output instead - I'm willing to bet you're wrong about your file format. Look at this:Now, hex  is the ASCII for the character . As you can see by just re-packing the data you unpacked:That's enough to tell us that the file is almost certainly a series of 64-bit numbers encoded as ASCII hex. It's not enough to tell us whether they're separated in any way. You'll have to look at the file to see. (If you can't figure out how to do it in an editor or with / or the like, just  and post the result here and someone else can tell you.)But let's assume the ASCII hex numbers are whitespace-separated. So, what you want is this:That's it.


Answer URL
https://docs.python.org/3/library/struct.html#struct.unpack
