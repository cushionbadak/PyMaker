Natural Text
I'm using this code to calculate hash value for a file: when I tried it on a folder "folder"I got How could I calculate the hash value for a folder ?
This Recipe provides a nice function to do what you are asking. I've modified it to use the MD5 hash, instead of the SHA1, as your original question asksYou can use it like this:The output looks like this, as it hashes each file:The returned value from this function call comes back as the hash. In this case, 
Use checksumdir python package available for calculating checksum/hash of directory. It's available at https://pypi.python.org/pypi/checksumdir/1.0.5Usage :
I'm not a fan of how the recipe referenced in the answer was written. I have a much simpler version that I'm using:I found exceptions were usually being thrown whenever something like an  was encountered (shows up in the , but you can't directly open it). The  check takes care of those issues.If there were to be an actual file within a directory I'm attempting to hash and it couldn't be opened, skipping that file and continuing is not a good solution. That affects the outcome of the hash. Better to kill the hash attempt altogether. Here, the  statement would be wrapped around the call to my  function.
I keep seeing this code propagated through various forums.The ActiveState recipe answer works but, as Antonio pointed out, it is not guaranteed to be repeatable across filesystems, due to not being able to present the files in the same order (try it).  One fix is to changeto(Yes I'm being lazy here.  This sorts the filenames only and not the directories.  The same principle applies)
Here is an implementation that uses pathlib.Path instead of relying on os.walk. It sorts the directory contents before iterating so it should be repeatable on multiple platforms. It also updates the hash with the names of files/directories, so adding empty files and directories will change the hash.Version with type annotations (Python 3.6 or above):Without type annotations:Condensed version if you only need to hash directories:Usage: 
I have optimized further on Andy's response.The following is a python3 rather than python2 implementation. It uses SHA1, handles some cases where encoding is needed, is linted, and includes some doctrings.


Answer URL
https://docs.python.org/3/library/os.html#os.walk
