Natural Text
As we know in Python 3  is a function, is it possible to create a decorated version of it wrapped under for ex.Calling  should produce the same result as 
You don't need a decorator per se to do that.  Just define a new function and call it :You can use the  module as shown to access the original print function.The thing is that doing this doesn't really gain anything over calling your new function something besides , except it will confuse people.If you want to really confuse people you could store , define your new function as  (accessing the original as ) and then do .  Then your modified  will actually replace the regular , even in other modules that know nothing about your shenanigans.  But that is an even worse idea.
Alternatively, take a look at pprint.https://docs.python.org/3/library/pprint.html
Thanks to @Adam Smith for this gist, posting it here for a reference. 
No, it's not possible since  is a builtin function and it's not even a builtin C-level class. This answer provides a way to subclass a builtin object like a  and apply a decorator to one of it's methods.


Answer URL
https://docs.python.org/3/library/pprint.html
