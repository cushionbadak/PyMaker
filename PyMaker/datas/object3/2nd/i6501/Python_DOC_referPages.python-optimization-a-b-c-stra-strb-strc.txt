Natural Text
I need to turn a list of various entities into strings. So far I use:Is there an optimized way of doing that?EDIT: I then need to find which of these contain certain string. So far I have:
Whenever you have a , then  in a loop pattern, consider using a list comprehension. A list comprehension builds a list from a loop, without having to use  lookups and calls, making it faster:This directly echoes the code you had, but with the expression inside  moved to the front of the  loop.If you don't actually need a list, but only need to iterate over the  conversions you should consider lazy conversion options. You can turn the list comprehension in to a generator expression:or, when only applying a function, the faster alternative in the  function:both of which lazily apply  as you iterate over the resulting object. This helps avoid creating a new list object where you don't actually need one, saving on memory. Do note that a generator expression can be slower however; if performance is at stake consider all options based on input sizes, memory constraints and time trials. For your specific search example, you could just embed the  call:which would produce a list of matching strings, without creating an intermediary list of string objects that you then don't use anywhere else.
Use the  function. This will take your existing list, run a function on each item, and return a new list/iterator (see below) with the result of the function applied on each element.In Python 3+,  will return an iterator, while in Python 2 it will return a list. An iterator can have optimisations you desire since it generates the values when demanded, and not all at once (as opposed to a list).


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/classes.html#generator-expressions
https://docs.python.org/3/library/functions.html#map
