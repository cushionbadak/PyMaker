Natural Text
I'm wondering if I can do these jobs with blinker library(or maybe with whatever libraries).I run a web application using Flask and within this application(maybe ), I define a signal named updated(e.g. ).In a separate process, I connect(subscribe) any function(I'll call it ) to the updated signal. And this process runs forever like a daemon.Whenever an update occurs on the web side, I want the  function to be called.So I wrote some codes:app.py (Flask application)background.pyAnd ran the web application with  command. Now when I visit , I can see  message in browser but I can't see the message  from other process.Is my approach wrong? If it is, how can I do such jobs? Waiting for your answers, thanks.
Blinker's description is:A fast Python in-process signal/event dispatching system.Emphasis mine, so no you can't use the library to send signals between two processes.What can you do instead? Well, the Python Standard Library's documentation has a whole chapter on Interprocess Communication and Networking. It's not clear what you're trying to build, but if you need to build a task queue (with "workers"), for instance, try Celery or TaskTiger. If you do need to actually send messages between processes, something more complex like ZeroMQ would be appropriate.


Answer URL
https://docs.python.org/3/library/ipc.html
