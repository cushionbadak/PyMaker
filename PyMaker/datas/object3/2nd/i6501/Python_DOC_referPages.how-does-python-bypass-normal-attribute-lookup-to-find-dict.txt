Natural Text
I understand that   in  is a descriptor attribute of , so the lookup for  is .From https://stackoverflow.com/a/46576009It's tempting to say that  has to be a descriptor because  implementing it as a  entry would require you to find the   before you can find the , but Python already  bypasses normal attribute lookup to find  when looking up  other attributes, so that's not quite as compelling as it initially  sounds. If the descriptors were replaced with a  key in  every ,  would still be findable.How does "Python already bypasses normal attribute lookup to find "? What does "normal attribute lookup" mean? According to the context of the quote in the link, I don't think when the author wrote that, he referred to   that the lookup for  is .
Normal attribute lookup is done by calling the  hook, or more precisely, the C-API  slot. The default implementation for this is in the  C-API function.It is the job of  to invoke descriptors if they exist, and to look at the instance . And indeed, there is a  descriptor, but it is faster for  to just access the  slot in the instance memory structure directly, and that is what the actual implementation does:Note the Inline  comment; this is a performance optimisation, as instance attribute lookups are frequent.If you try to access  fromPython code, then the descriptor is invoked; it is a data descriptor object so is invoked before instance attributes are even looked at. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattro
https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetAttr
https://docs.python.org/3/reference/datamodel.html#special-lookuphttps://docs.python.org/3/reference/datamodel.html#special-lookup
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
