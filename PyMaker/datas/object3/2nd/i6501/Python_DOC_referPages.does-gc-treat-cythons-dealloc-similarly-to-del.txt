Natural Text
Python's optional garbage collector  ignores cycles that contain any object with a  method:Changed in version 3.4: Following PEP 442, objects with a  method donâ€™t end up in  anymore.Cython extension types can have a  method, but no  method:Note: There is no  method for extension types.For the purpose of collecting cycles, is the presence of  treated by the garbage collector as if a  method is present? Or is  invisible to the garbage collector?
If you look at the generated C code you can see that Cython generates the destructor in the  slot, rather than the  slotgenerates:You can easily verify that this is the case for other examples too (e.g. classes with automatically generated ).Therefore, for Python 3.4+:Starting with Python 3.4, this list should be empty most of the time, except when using instances of C extension types with a non-NULL tp_del slot.Cython classes should not end up in this list of uncollectable stuff since they don't have  defined.For earlier versions of Python I think you're also fine. Mostly because  you still don't have a  method, but also because cython automatically generates  and  functions that should allow Python to break reference cycles involve Cython classes.You can disable the generation of these  and  functions. I'm a little unclear on what happens to objects that are in a reference cycle but don't have methods to detect it, or to break it. It's quite likely that they just continue to exist somewhere, but are inaccessible.I think the concern (before Python 3.4) was that  methods could make an object accessible again: is called after the point of no return, and so this isn't allowed (you just get a segmentation fault if you access ). Therefore they don't have to be stuck in  in their indeterminate state.


Answer URL
https://docs.python.org/3/library/gc.html
https://docs.python.org/3/library/gc.html#gc.garbage
https://docs.python.org/3/library/gc.html#gc.garbage
