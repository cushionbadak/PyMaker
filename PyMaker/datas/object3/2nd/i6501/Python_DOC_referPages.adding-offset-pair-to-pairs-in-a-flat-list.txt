Natural Text
I have a flat list of coordinates:and I need to add an offset pair (dx,dy) to all of them:Since this is done quite often, efficiency is important. Is there a better method than
You can add more elegance to the code by using , and adding elements from the cycle object in turns:You could easily extend this into a list comprehension if you need to create a new list:OTOH, if you want to go super efficient you can perform the addition using numpy (requires installation of numpy):
Is  allowed. I would use  for this kind of thing:
So, using the suggestions above, a quick performance test. Since I need a copy of the input list, I do an explicit copy if the code is not doing one:The size of the input array (50*6) is representative of the number of triplets that describe a character in many fonts. The results:So yes, the plain loop is the fastest of the lot, but the 50% performance penalty of the cycle() solution in a comprehension is compensated by the terseness of the code.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
