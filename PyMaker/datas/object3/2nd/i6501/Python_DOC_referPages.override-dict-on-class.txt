Natural Text
I'm trying to make a -like class in Python.When you make a class, you have certain methods that tell Python how to make a built-in class. For example, overriding the  method tells Python what to return if the user uses  on an instance of the class. Same for . You can even control how Python would make an iterable object of the class by overriding the  method (which can help Python make s and s of your class). My question is how would you tell Python how to make a  of your custom class? There is no special  method, so how would you go about doing it? I want something like the following:I've tried making the class inherit from , but it raises an error later in the code because of subclasses trying to inherit from  and , so inheriting from  isn't a possibility. Is there any other way to do it?Also, I've overridden the  method already so that it would return a  object (what gets returned when you use  on a ), but it still doesn't seem to work how it should.
 can be called with an iterable of pairs, so if you design your  to return an iterable of tuples, your example works as you'd like:If you want your class to behave like a python dictionary, in that iterating over an instance iterates over its keys, you can implement the interface defined by . You can do this either by implementing , , and , and inheriting from , or by implementing all of , ,  , , , , , , and .
Although the approach in the answer from @ForeverWintr is fairly clever and works, I think it's a little obscure since it takes advantage of some of the arcane details about the attributes of the argument passed to the  class constructor. For that reason a better approach might be what I was saying in my comments about just adding a method that does what you want (plus shows how simply giving it a name indicating exactly what's going on).Example code:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
https://docs.python.org/3/library/collections.abc.html
