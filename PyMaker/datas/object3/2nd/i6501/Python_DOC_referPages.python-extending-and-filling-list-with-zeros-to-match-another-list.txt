Natural Text
I have a list  with a few elements. I have another list  with more elements. I need to extend  to match  in size, using zeros to fill. In the new list that will come out, the original  sits in a position determined by , as explained by example in the following.Small example of my situation:I need The first non-zero element is in third position here, to match where  becomes equal or greater than 3, and similarly the last non-zero element is in fifth position as a result of the comparison with .The final output is always ; if there are too many zeros at the start to fit all of , then elements from  are dropped.

Use bisection to find the first position in  greater or equal to , with the  moduleBisection lets you find the point in O(logN) time.An alternative is to use a generator function; loop over  and yield s until an equal or larger value to  is found, then yield  until exhausted and go back to zeros:Demo:and for edge cases;  too short, dropping values from :First value of  matching:
Try this
You could try this with list comprehensions


Answer URL
https://docs.python.org/3/library/bisect.html
