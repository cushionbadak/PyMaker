Natural Text
I'm a beginner at programming (and also an older person), so I don't really know how to express what I want correctly. I've tried to describe my question as thoroughly as possible, so really appreciate your patience! I would like to store the winning scores associated with each user.Each user would have different number of winning scores.I do not need to seperate users first name and last name, they can all be one string.I do not need the scores to be ordered in any way, and I don't need to be able to change them. I only need to be able to add the scores whenever the user wins and sort users by amount of wins.I will extract all the winning scores for statistics, but the statistics will not be concerned with what score belongs to what user.   Once the program stops, it can all be erased from memory.From what I've researched so far it seems my best options are to either create a user class, where I store a list and add to the list each time. Or to create a dictionary with a key for each user. But since each user may have a different amount of winning scores, I don't know if I can use dictionaries with that (unless each key is associated with a list maybe?). I don't think I need something like a numpy array, since I want to create very simple statistics without worrying about what score belongs to what user. I need to think about not using an unnecessary amount of memory etc., especially because there may be a hundred winning scores for each user. But I can't really find clear information on what the benefits of dictionaries vs classes are. The programming community is amazingly helpful and full of answers, but unfortunately I often don't understand the answers. Greatful for any help I can get! And don't be afraid to tell me my ideas are dumb, I want to learn how to think like a programmer.
This is a good question because it discusses two possible solutions. The class based solution and the dictionary based solution. The class based solution is more elegant and versatile so I will describe that one.Then you could do something likeHopefully this covers the basics of what you need!
Welcome to SO!Building on Hallsville3's answer, I think you could achieve a similar outcome by simply subclassing list like so:Then you can create a list of users and add to it easily:This data model has only two layers Userlist => Scorelist/User Object, as opposed to having Userlist => User Object => Scorelist, which should make accessing it slightly simpler.You can also expand your object to return statistics per user:And use this to return all the users averages:There are literally thousands of ways to structure your data, from simple implementations like this, up to SQL databases if you are doing this on a big scale. I think it makes sense to start with a simple model then buiild up complexity as you build up your skills.Good Luck!
You can use  as values in dicts can be  like a  where you can keep all the scores/winning scores for each user.If this is not an exercise that you will repeat dicts make sense but if it is an exercise that might need to be done again in future  are better alternative as explained in other answers by Stuart and Hallsville3.Hope it helps!
Since there is already an answer covering the class option, I give the simplest dictionary base solution I could come up with.I personally would prefer to use a plain dictionary approach first and maybe switch to a more flexible class implementation later if it is needed.A basic scores dictionary and its usage could look like this:Output for this would look like this:Maybe you could experiment with this approach and see if it fits your needs.
class is used when there is both state and behavior . dict is used when there's only state. since you have both  use class.  
From your description, all you need is a  with a  as default.If each user has only one score, you could use a .


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/reference/datamodel.html#slots
