Natural Text
Take in two numbers and a letter. If the letter is "a", the numbers will be added, if "s", subtracted, if "m", multiplied, and if "d", divided.This is what I have:  But my professor is telling me it is wrong. What can I do to fix it?
Your real problem here is that you're thinking out of order. You read the problem, and then started writing a solution before you really understood what it was asking for. That's actually really common to do when you see a big blob of text, and it takes practice and skill to go from there to a correctly working program.Let's take this step by step:Take in two numbers and a letter. If the letter is "a", the numbers will be added, if "s", subtracted, if "m", multiplied, and if "d", divided.Here's the assignment. Rather than leave it in this form, let's convert it to a form that's easier to think about piece by piece:Take in two numbers and a letterif the letter is 'a', the numbers will be addedif the letter is 's', subtractedif 'm', multipliedand if 'd', dividedYou'll notice that I didn't change any of the text here, I just shifted the formatting around. If you read the two, you'll see that there's no difference between them.Now we can think about turning that into code, because it's layed out like code. You may have heard the term "pseudocode", which means "something that is code-like". We could even do that here.You'll notice that this already looks an awful lot like Python. We can clean it up a little:Of course now the comments are a bit superfluous - all they describe is exactly what the code is doing. We're also using  instead of , which is a bit ambiguous and less efficient (not that that really matters at this point, but it's still true). So let's clean up the code just a little bit more:Bonus - On DebuggingIf your professor has not been teaching you about the REPL then they're doing you a disservice. The REPL is great, and especially for beginners. You can experiment and get feedback immediately. Let's consider part of your original code:You could just copy and paste this into the REPL, or even better, skip out on the input part, and just assign the values you want:Great! We got what we expected! But... that's not actually how you verify an experiment. You have to design something that should fail. So what if we try ?Huh. Well, that's not right. We should have just got nothing. Luckily, this is pretty simple, it's just an  statement and a call to the  function. We know it's not the  that's the problem, our code never should have made it to that point. So let's check on what's in the  statement:Oh. That's a string. Hm. It's not an empty string, and it's true. Maybe you remember this from class, but maybe you don't. So let's go to google and type in 'python why is my non-empty string true?'When I do that the first result I get is https://stackoverflow.com/a/9573259/344286 Which does a pretty good job of explaining it, and better yet, it even links us to the official documentation that tells us:By default, an object is considered true... Here are most of the built-in objects considered false:...  empty sequences and collections: ...Ahh! So because our string is not empty () it's going to evaluate to ! Well, okay. So what do we actually want to do instead? We probably don't want to be adding strings together. Can we compare things instead? What if we try ?Hm. Well, that's not what we expected, was it? I guess let's see what the values are:Oh. Well yeah, those aren't equal! And  isn't the letter . Oh that's right! We said that , so of course it's not a letter. Maybe in the future we shouldn't use letters for variable names. If we take a step back and think about what we want () then we have the answer. We want to compare  to :Ah. Perfect!
An if statement works by testing if the expression you put after the  keyword is true. What you’re doing is adding two strings. In python, a string with characters will always come out to true, thus, the first if is always executed. What I have done is modify your conditions to match what you want: See how I test if  (your operation input) is equal to the corresponding letter? That’s what you want. I also added a try/except that makes sure your program doesn’t crash if you divide by zero. 



Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
