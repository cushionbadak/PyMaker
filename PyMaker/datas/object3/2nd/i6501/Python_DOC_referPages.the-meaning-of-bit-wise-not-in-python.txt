Natural Text
This question already has an answer here:bit-wise operation unary ~ (invert)                    5 answers                Why bitwise not does not act as expected for toggling bits? See for example below:This is the output:The question is why the first bit from the left is not toggled?Considering that Python documentation says:~ x Returns the complement of x - the number you get by switching each  1 for a 0 and each 0 for a 1.Edit: Are you saying that "~" is not the operator for simple toggling of bits, but instead it is the operator for twos complement?If so, why the sentence quoted from documentation does not tell that. The sentence above from Python documentation does not imply this to me.
It is toggling all the bits. All of them, including an infinite number of leading zeros, producing an infinite number of leading ones:because Python simulates an infinite-bit representation, not 3-bit or 32-bit or 64-bit or any finite number.Python can't show you an infinite number of leading ones, so instead, it shows you  with a  sign in front.  is  and  is , so you see


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
