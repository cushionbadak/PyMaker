Natural Text
I have a large list called .  Each item in the list is a tuple that contains 2 integers. The integers denote the starting and ending indexes for a series of substrings that I want to concatenate into one larger string.  For example, if the  list only had 2 entries that looked like:  I want to have an output string that consists of the characters between index position 1 and 5, and the characters between index position 10-15.... I.E concatenating those two slices together.To be a little more specific - my main string is actually the string version of a large number of hexidecimal values.  I will be ultimately be converting my final string back to the binary version and then writing that to a file.  Currently my process is REALLY slow on large data sets and looks like this:Currently the above is really slow and I suspect there is a way to speed it up.  Thoughts?
Using  is usually a pretty good way to concat strings like that. Could looks something like this:
You  method because :' '.join is usually better than using +, because something like  "a"+"b"+"c" would also create the intermediary string "ab", and only  then "abc", while ''.join(['a', 'b', 'c']) would directly create  'abc'. Using less memory, and being faster.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
