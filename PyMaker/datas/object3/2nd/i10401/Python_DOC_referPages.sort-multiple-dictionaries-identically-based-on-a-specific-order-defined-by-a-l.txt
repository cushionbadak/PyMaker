Natural Text
I had a special case where multiple existing dictionaries had to be sorted based on the exact order of items in a list (not alphabetical). So for example the dictionaries were:And the list was:With the expected result being the ability to create a file like this:Note:In my case, the real use was an Excel file using pyexcel-xls, but the CSV-like example above is probably closer to what is usually done, so the answers might be more universally applicable for CSV than Excel.
I had a bit of hard time to find any good answers in Stack Overflow for this case, but eventually I got the sorting working, which I could use to create the file. The header row can simply be taken directly from the  list below. Here's how I did it - hope it helps someone:
This can be achieved in a one liner, although it is harder to read. In case it is useful for someone:
This is a classic use case for , because your expected output is CSV-like (semi-colon delimiters instead of commas is supported) which would handle all of this for you, avoiding the need for ridiculous workaround involving , and making it easy to read the data back in without worrying about corner cases ( automatically quotes fields if necessary, and parses quoted fields on read in as needed):That's it,  handles ordering, (it knows the correct order from the  passed as  to the  constructor), formatting, etc.If you had some need to pull the values in a specific order from many s without writing them (since your use case doesn't even use the keys),  can be used to simplify this dramatically:which leaves  as a  with the requested fields in the requested order, , and runs significantly faster than repeatedly indexing at the Python layer ( creates a C level "functor" that can retrieve all the requested values in a single call, with no Python level byte code at all for built-in keys like ).


Answer URL
https://docs.python.org/3/library/csv.html#csv.DictWriter
https://docs.python.org/3/library/operator.html#operator.itemgetter
