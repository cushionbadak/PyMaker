Natural Text
I have got a list of about 7000 names in a csv file that is arranged by surname, name, date of birth etc.  I also have a folder of about 7000+ scanned documents (enrolment forms) which have the name of each person as a filename. Now the filenames may not exactly match the names in the csv ie. John Doe in the csv, filename will be John-Michael Doe etc..How would I go abouts writing a program that looks through the csv and see what filenames are missing in the scanned folder?I am a complete novice in programming and any advice is appreciated. 
The first thing you want to do is read the CSV into memory. You can do this with the  module. The most useful tool there is , which takes the first line of the file as keys in a dictionary, and reads the remainder:In windows, the path would look different, and would be something like  (note the forward-slashes instead of backslashes).This will show the first 100 rows from the file. For example if you have columns named "First Name", "Last Name", "Date of Birth", this will look like:Next you want to get a list of all the 7000 files, using :Now you'll need some way to extract the names from the files. This depends crucially on the way the files are structured. The tricky-to-use but very powerful tool for this task is called a regular expression, but probably something simple will suffice. For example, if the files are named like "first-name last-name.pdf", you could write a simple parsing method like:The exact implementation will depend on how the files are named, but the key things to get you started are ,  and a few others in that same class. You might also take a look at the  module for handling regular expressions. As I said, that's a more advanced/powerful technique, so it may not be worth worrying about right now.A simple algorithm to do the matching would be something like the following:This should give you an output spreadsheet with whatever rows you could match automatically matched up, and the remaining ones blank. Depending on how clean your data is, you might be able to just match the remaining few entries by hand. There's only 7000, and the "dumb" heuristic will probably catch most of them. If you need more advanced heuristics, you might look at Jaccard similarity of the "words" in the name, and the difflib module for approximate string matching.Of course most of this code won't quite work on your problem, but hopefully it's enough to get you started.


Answer URL
https://docs.python.org/3/library/csv.html
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/difflib.html
