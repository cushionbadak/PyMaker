Natural Text
I've been using python to do computations for my research. In an effort to clean up my terrible code, I've been reading Code Like a Pythonista: Idiomatic Python by David Goodger. In this article, Goodger advises against "wild-card" imports of the formMy code uses a lot of these. I'd like to clean my code up, but I'm not sure how. I'm curious if there is a way to check what names from  I have used in my code. This way I could either explicitly import these names or replace the names with . Is there a tool designed to accomplish such a task?
Use a tool like  (which you should use anyway) to note which names in your code become undefined after you replace  with . Once you've positively identified every instance of a name imported from , you can assess whether toAlways use  and  for  imported from .Use  and  if the module name is long.Selectively import some names from  into the module namespace with The above three are not mutually exclusive; as an extreme example, you can use all three in the same module:all in the same code. (I don't recommend using all three in the same module. Stick with either the full module name or the alias throughout a single module, but there is no harm importing common, obvious names directly and using the fully qualified name for more obscure module attributes.)
OverviewOne approach is to:Manually (or even automatically) identify each of the modules you've imported from using the  approach, Import them in a separate file,And then do a search-and-replace if they appear in , which keeps track of which objects from a Python module have been loaded.See for yourself  in action:You can either manually check if a function name you're not sure of appears here using , or you can write a neat automated script that goes through each entry in .I would favour the latter for anything too sophisticated, and the former for diagnostic purposes.Rough Implementation of Automatic ToolA very, very, very quick-and-dirty example of how to write such an automated script:This is not very robust, and you shouldn't use it as-is! You may find yourself overwriting names not from the module but that are defined anyway. It's probably best to allow some form of user interaction to confirm you want to apply a change for each function name found. But it gets the gist across.This has been tested with the following simple example file:becomes EDIT: I have since created a much more robust and useful command line utility here


Answer URL
https://docs.python.org/3/reference/import.html#loaders
