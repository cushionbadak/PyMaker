Natural Text
This question already has an answer here:In Python, why is list[] automatically global?                    5 answers                To avoid accidentally modifying a global variable, python requires an explicit  statement before assigning to a global variable. However, modifying a global variable by calling its method can be done without any extra statement:This seemed slightly inconsistent. Is this design choice made because it's considered less dangerous / less of a bad practice to modify global mutable objects through a method call, compared to replacing them with an entire new object? If so, why?
From the documentation:In Python, variables that are only referenced inside a function are  implicitly global. If a variable is assigned a value anywhere  within the function’s body, it’s assumed to be a local unless  explicitly declared as global.In your case  is referenced inside of the function, thus implicitly global. On the other hand,  is assigned a value, thus it must be local unless explicitly declared otherwise.And the documentation goes further to answer your questions:Though a bit surprising at first, a moment’s consideration explains  this. On one hand, requiring global for assigned variables provides a  bar against unintended side-effects. On the other hand, if global was  required for all global references, you’d be using global all the  time. You’d have to declare as global every reference to a built-in  function or to a component of an imported module. This clutter would  defeat the usefulness of the global declaration for identifying  side-effects.
It's not really about mutability at the value level, which is how you're looking at it; it's about mutability of variable references, i.e. what a named item (a variable) is pointing at.Note that the name 'x' is now pointing at a new thing (a newly-created list), whereas the .append operation on y has not changed what the name 'y' is pointing at.
In one sentence:"without declaring it explicitly, python will not let you change the  of a global variable".Now let's explain what you have just read, assignment of object to a variable is actually making a , which is a memory address to where the object lays in the memory.When we write:What actually happens that somewhere in the memory the list object is allocated with all its function references and members and other shit. This address is what actually kept in .We may use the function  to notice the change:


Answer URL
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
