Natural Text
For a list  and an item in the list , how do I get its index (1) in Python?
Reference: Data Structures > More on ListsCaveats followNote that while this is perhaps the cleanest way to answer the question as asked,  is a rather weak component of the  API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about  follow. It is probably worth initially taking a look at the docstring for it:Linear time-complexity in list lengthAn  call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give  a hint. For instance, in this snippet,  is roughly five orders of magnitude faster than straight , because the former only has to search 10 entries, while the latter searches a million:Only returns the index of the first match to its argumentA call to  searches through the list in order until it finds a match, and stops there. If you expect to need indices of more matches, you should use a list comprehension, or generator expression.Most places where I once would have used , I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for , take a look at these excellent python features.Throws if element not present in listA call to  results in a  if the item's not present.If the item might not be present in the list, you should either Check for it first with  (clean, readable approach), orWrap the  call in a  block which catches  (probably faster, at least when the list to search is long, and the item is usually present.)
One thing that is really helpful in learning Python is to use the interactive help function:which will often lead you to the method you are looking for.
The majority of answers explain how to find a single index, but their methods do not return multiple indexes if the item is in the list multiple times. Use :The  function only returns the first occurrence, while  returns all occurrences.As a list comprehension:Here's also another small solution with  (which is pretty much the same approach as enumerate):This is more efficient for larger lists than using :
To get all indexes:
 returns the first index of value!|  index(...)   |      L.index(value, [start, [stop]]) -> integer -- return first index of value
A problem will arise if the element is not in the list. This function handles the issue:

You have to set a condition to check if the element you're searching is in the list
All of the proposed functions here reproduce inherent language behavior but obscure what's going on.Why write a function with exception handling if the language provides the methods to do what you want itself?
If you want all indexes, then you can use NumPy:It is clear, readable solution.
Finding the index of an item given a list containing it in PythonFor a list  and an item in the list , what's the cleanest way to get its index (1) in Python?Well, sure, there's the index method, which returns the index of the first occurrence:There are a couple of issues with this method:if the value isn't in the list, you'll get a if more than one of the value is in the list, you only get the index for the first oneNo valuesIf the value could be missing, you need to catch the . You can do so with a reusable definition like this:And use it like this:And the downside of this is that you will probably have a check for if the returned value  or  None:More than one value in the listIf you could have more occurrences, you'll not get complete information with :You might enumerate into a list comprehension the indexes:If you have no occurrences, you can check for that with boolean check of the result, or just do nothing if you loop over the results:Better data munging with pandasIf you have pandas, you can easily get this information with a Series object:A comparison check will return a series of booleans:Pass that series of booleans to the series via subscript notation, and you get just the matching members:If you want just the indexes, the index attribute returns a series of integers:And if you want them in a list or tuple, just pass them to the constructor:Yes, you could use a list comprehension with enumerate too, but that's just not as elegant, in my opinion - you're doing tests for equality in Python, instead of letting builtin code written in C handle it:Is this an XY problem?The XY problem is asking about your attempted solution rather than your actual problem.Why do you think you need the index given an element in a list? If you already know the value, why do you care where it is in a list?If the value isn't there, catching the  is rather verbose - and I prefer to avoid that.I'm usually iterating over the list anyways, so I'll usually keep a pointer to any interesting information, getting the index with enumerate.If you're munging data, you should probably be using pandas - which has far more elegant tools than the pure Python workarounds I've shown.I do not recall needing , myself. However, I have looked through the Python standard library, and I see some excellent uses for it. There are many, many uses for it in , for GUI and text parsing.The  module uses it to find comment markers in the module to automatically regenerate the list of keywords in it via metaprogramming.In Lib/mailbox.py it seems to be using it like an ordered mapping:andIn Lib/http/cookiejar.py, seems to be used to get the next month:In Lib/tarfile.py similar to distutils to get a slice up to an item:In Lib/pickletools.py:What these usages seem to have in common is that they seem to operate on lists of constrained sizes (important because of O(n) lookup time for ), and they're mostly used in parsing (and UI in the case of Idle). While there are use-cases for it, they are fairly uncommon. If you find yourself looking for this answer, ask yourself if what you're doing is the most direct usage of the tools provided by the language for your use-case.
All indexes with the  function:
Getting all the occurrences and the position of one or more (identical) items in a listWith enumerate(alist) you can store the first element (n) that is the index of the list when the element x is equal to what you look for.Let's make our function findindexThis function takes the item and the list as arguments and return the position of the item in the list, like we saw before.OutputSimpleOutput:
Simply you can go with
Another option
A variant on the answer from FMc and user7177 will give a dict that can return all indices for any entry:You could also use this as a one liner to get all indices for a single entry. There are no guarantees for efficiency, though I did use set(a) to reduce the number of times the lambda is called.
And now, for something completely different...  ... like confirming the existence of the item before getting the index.  The nice thing about this approach is the function always returns a list of indices -- even if it is an empty list.  It works with strings as well.When pasted into an interactive python window:UpdateAfter another year of heads-down python development, I'm a bit embarrassed by my original answer, so to set the record straight, one can certainly use the above code; however, the much more idiomatic way to get the same behavior would be to use list comprehension, along with the enumerate() function.  Something like this:  Which, when pasted into an interactive python window yields:And now, after reviewing this question and all the answers, I realize that this is exactly what FMc suggested in his earlier answer.  At the time I originally answered this question, I didn't even see that answer, because I didn't understand it.  I hope that my somewhat more verbose example will aid understanding.  If the single line of code above still doesn't make sense to you, I highly recommend you Google 'python list comprehension' and take a few minutes to familiarize yourself.  It's just one of the many powerful features that make it a joy to use Python to develop code.
This solution is not as powerful as others, but if you're a beginner and only know about loops it's still possible to find the first index of an item while avoiding the ValueError:
This accounts for if the string is not in the list too, if it isn't in the list then location = -1
Since Python lists are zero-based, we can use the zip built-in function as follows:where "haystack" is the list in question and "needle" is the item to look for.(Note: Here we are iterating using i to get the indexes, but if we need rather to focus on the items we can switch to j.)
There is a more functional answer to this.More generic form:
Python  method throws an error if the item was not found, which sucks!So instead you can make it similar to the  function of JavaScript which returns  if the item was not found:
Finding index of item x in list L:
There is two possibility if the list has no repeated items that you need to check the index for if its repeated means it will give you only the first indexIf you need to get all the index where the item is present meansto get that you need to do it like then you will get a list of index as o/p like [1,3] 
Letâ€™s give the name  to the list that you have. One can convert the list  to a . And, then use numpy.where to get the index of the chosen item in the list. Following is the way in which you will implement it.
For those coming from another language like me, maybe with a simple loop it's easier to understand and use it:I am thankful for So what exactly does enumerate do?. That helped me to understand.
If performance is of concern:It is mentioned in numerous answers that the built-in method of  method is an O(n) algorithm. It is fine if you need to perform this once. But if you need to access the indices of elements a number of times, it makes more sense to first create a dictionary (O(n)) of item-index pairs, and then access the index at O(1) every time you need it.If you are sure that the items in your list are never repeated, you can easily:If you may have duplicate elements, and need to return all of their indices:
As indicated by @TerryA, many answers discuss how to find one index. is a third-party library with tools to locate multiple indices within an iterable. GivenCodeFind indices of multiple observations:Test multiple items:See also more options with .  Install via .
using dictionary , where process the list first and then add the index to it 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
