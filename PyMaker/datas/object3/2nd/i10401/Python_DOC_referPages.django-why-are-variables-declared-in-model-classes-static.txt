Natural Text
I have been reading and working with Django for a bit now. One of the things that I am still confused with is why the model classes that we create in Django are made up of static variables and not member variables. For instanceI read this page here which explains static and instance variables in python however i am still confused as to why Django wants the field variables in models be static ?
Django uses a metaclass to create the model class. Just as a class's  method creates a new instance, the metaclass's  method creates the class itself. All variables, functions, properties, etc. defined in the class body are passed to the  function. Strictly speaking, just defining a variable in the class body does not create a static/class variable -- only when the  function receives the variable and sets it on the class, will it be a class/static variable. Django overrides this behavior when it comes to fields and the special  inner class, by providing a custom  method. The options in the inner  class are converted to an  instance, and that instance is stored as  rather than . Similarly, any fields you define are stored in  rather than as class/static variables. You will notice that in your example, the class  does not have a  attribute:  will simply raise an . This is because the metaclass moves the field from the class to . Instances of  do have an  attribute, but this is not the field. Instead, it's the database value related to the field. The  method of a model uses  to populate any attributes with either the value that is passed to , or with the default value, to assure that the instance variable exists.Only class variables are passed to the  method. If you were to define a field as an instance variable inside , the field would never be passed to , and Django simply doesn't know about the field. You will be able to access , but this will be the actual field instance, not the related database value. Basically you would be missing the magic that makes a model into a model. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#customizing-class-creation
