Natural Text
Is it possible to have a static property on a class that would be computed as a one off. The idea would be to be able to do it like so:I thought of using  as well.Not sure the implications of that though.
If you want it computed at class definition time, see chepner's answer - although I would recommend just to use a module level function instead.If you want it lazily evaluated, then you might be interested in a .  Note: it seems every man and his dog has an implementation of memo decorators in Python, this is one of many.  If you're on Python 3, consider functools.lru_cache because it's in the core libraries.  
Here you go, I made a small descriptor for you :-)Upon accessing the attribute, it will be computed and cached.The way it works is rather simple:Upon using the decorator syntax, I save the function internally.Upon access, I call the function and set the value as the class value with the same name as the original function.That's all there is to it. Simple and efficient.
Until the class is actually created,  is just a regular function. It needs to be defined before you attempt to call it, since you want to call it while the  statement is being executed. Once you are done with it, you can simply delete it.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
