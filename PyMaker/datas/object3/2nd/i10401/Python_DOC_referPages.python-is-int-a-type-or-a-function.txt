Natural Text
I did this in Python 3.4:Now I am wondering what int actually is. Is it a type, or is it a function? Is it both? If it is both, is it also true that all types can be called like functions?
 is a class. The type of a class is usually .And yes, almost all classes can be called like functions. You create what's called an instance which is an object that behaves as you defined in the class. They can have their own functions and have special attributes.( is also a class if you're interested but it's a special class. It's a bit complicated but you can read more on it if you'll search for metaclasses)
 is a built-in class/type:When you invoke , Python finds out that  itself is nota function, but then attempts to call ; this itself resolves to  ; this is called with  as arguments. The default  implementation of  tries to construct a new object of the type given as the first argument (here , by calling the  method on that type class; thus the behaviour of  indirectly comes from , which constructs a new  instance that has the value of the given string parsed as an integer.
It's both. In Python, the types have associated functions of the same name, that coerce their argument into objects of the named type, if it can be done.  So, the type  has a function  along with it.
What happens when an integer is defined in a Python script like this one?When you execute the first line, the function  is called and its logic is the following:If you really want to dig deeper into this, and know how  works in Python, visit Python integer objects implementation which I referred for answering this.


Answer URL
https://docs.python.org/3/library/functions.html#callable
