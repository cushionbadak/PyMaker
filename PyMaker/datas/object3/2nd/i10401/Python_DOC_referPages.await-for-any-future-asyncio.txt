Natural Text
I'm trying to use asyncio to handle concurrent network I/O. A very large number of functions are to be scheduled at a single point which vary greatly in time it takes for each to complete. Received data is then processed in a separate process for each output.The order in which the data is processed is not relevant, so given the potentially very long waiting period for output I'd like to  for whatever future finishes first instead of a predefined order.Normally, awaiting in order in which futures were queued is fine:Blue color represents time each task is in executor's queue, i.e.  has been called, but the function was not yet executed, as the executor runs only 5 tasks simultaneously; green is time spent on executing the function itself; and the red is the time spent waiting for all previous futures to .In my case where functions vary in time greatly, there is a lot of time lost on waiting for previous futures in queue to await, while I could be locally processing GET output. This makes my system idle for a while only to get overwhelmed when several outputs complete simultaneously, then jumping back to idle waiting for more requests to finish.Is there a way to  whatever future is first completed in the executor?
Looks like you are looking for asyncio.wait with .


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed
