Natural Text
I am looking at the example of the UDP echo server:It seems that the call......is doing all the work here. The method documentation states the following for the first argument ():protocol_factory must be a callable returning a protocol instance.My questions:What defines a ?Is  a different wording for ?How does the  in the example fulfill this requirement?
What defines a protocol instance?A protocol is a class you define that implements one of the interfaces defined in the Protocols section, i.e. provides implementations for a set of callbacks, e.g. Connection Callbacks.So for the UDP echo server example you have posted, the  user defined class actually defines a protocol by implementing the  and .In summary, if you implement one of those callbacks in a class, you are said to be defining a . So an instance/object of that class would be a protocol instance.Is returning a protocol instance a different wording for initiating a protocol object?Formally YES. Before you would return a protocol instance, you would have initialized it. So basically one is a prerequisite of the other.How does the  in the example fulfill this requirement?So first of all, as answered the first question, the  defines a protocol. Thus the next thing is to provide a , which is defined as: must be a callable returning a protocol instance.So to satisfy this requirement, you could just have this simple method:Note, that this factory first initializes the protocol instance and then returns it.So the thing that might confuse you in the example, is that the class  itself is passed as the , but if you summarize what I've said, you will see that the  is actually a callable, and when it gets called, i.e.  it actually initializes a  instance, and returns it.So yep, the example fulfills the requirement.


Answer URL
https://docs.python.org/3/library/asyncio-protocol.html#udp-echo-server-protocol
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_datagram_endpoint
https://docs.python.org/3/library/asyncio-protocol.html#protocol-classes
https://docs.python.org/3/library/asyncio-protocol.html#connection-callbacks
https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseProtocol.connection_made
https://docs.python.org/3/library/asyncio-protocol.html#asyncio.DatagramProtocol.datagram_received
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_datagram_endpoint
