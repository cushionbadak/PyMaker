Natural Text
I'm using a YAML configuration file. So this is the code to load my config in Python:This code actually creates a dictionary. Now the problem is that in order to access the values I need to use tons of brackets.YAML:Python:I'd prefer something like that (dot notation):So, my idea is to utilize the PyStache render() interface.Would that be a "good" solution? If not, what would be a better alternative?Additional question [Solved]I've decided to use Ilja Everilä's solution. But now I've got an additional question: How would you create a wrapper Config class around DotConf?The following code doesn't work but I hope you get the idea what I'm trying to do:Error: SolutionYou just need to pass  to the constructor of the super class.Even better soltution (Ilja Everilä)
The SimpleYou could use  to extract the value from the config:This solution is easy to maintain and has very few new edge cases, if your YAML uses a very limited subset of the language.The CorrectUse a proper YAML parser and tools, such as in this answer.The ConvolutedOn a lighter note (not to be taken too seriously), you could create a wrapper that allows using attribute access:Do note that this fails for keywords, such as "as", "pass", "if" and the like.Finally, you could get really crazy (read: probably not a good idea) and customize  to handle dotted string and tuple keys as a special case, with attribute access to items thrown in the mix (with its limitations):
On the one hand your example takes the right approach by using  instead of solving the dotted access with attributes. I am not sureif you realised that on purpose you were not trying to do the more intuitive:which you can't get to work, even when overloading , as  is a Python language element.However your example describes only a very restricted subset of YAML files as it doesn't involve any sequence collections, nor any complex keys.If you want to cover more than the tiny subset you can e.g. extend the powerful round-trip capable objects of :¹Once that is set up you are can run the following:giving:showing that with a bit more forethought and very little extra work you can have flexible dotted access to many to a vast range of YAML files, and not just those consisting of recursive mappings with string scalars as keys.As shown you can directly call mysql.user.pass instead of defining and using this works with strings and integers as mapping keys, but can be easily extended to support other key types (boolean, date, date-time).¹ This was done using ruamel.yaml a YAML 1.2 parser, of which I am the author.
I had the same problem a while ago and built this getter:The getter looks-up a config value from  in a recursive manner (by using ).If you have trouble adjusting this for your case, feel free to ask for further help.
It's quite old question, but I came here hunting for the answer, but looking for more simpler solution. Finally, came up with my own solution using  library; installed using Now, simply call  with the valid :


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
