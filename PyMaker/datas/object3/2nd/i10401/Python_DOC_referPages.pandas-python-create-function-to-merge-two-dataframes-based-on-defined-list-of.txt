Natural Text
In the script that I am writing, I want to frequently repeat the same piece of code, where I create a "numerator" dataframe with one group by, and then a "denominator" dataframe with a different group by. I then merge the two together so that I have the numerator and denominator in one place. I am trying to create a function where all I have to pass to it is the list of fields I want included in the numerator and denominator.Here is the function:Here is the script I'm trying to use it in:However, when I run this, I only get to printing "test 2" in def calcfractions, something fails after that point. I think it might have to do with trying to append denomlist to numlist. Any thoughts?EDIT: The script doesn't "fail", there is no error. It just ends.
So, after concocting my own dataframe with bogus values and trying to work through this, I have found that I run into a . This is due to the fact that you are appending a list to a list and trying to use that as a column index in your df:Try this instead:Is this entire provided snippet wrapped up in some  clause somewhere? In any case, if this doesn't solve your problem, please provide us with a small version of your dataframe.Edit: From the docs on exceptions: "The last except clause may omit the exception name(s), to serve as a wildcard. Use this with extreme caution, since it is easy to mask a real programming error in this way!" Definitely look through the linked docs, but here is the gist of the immediate problem. It's considered poor practice to write try/except clauses like this:because the  excepts  of all types. To parrot the quoted docs, this makes it seem like there is no error. Furthermore, as this entire question exemplifies, this makes it impossible to know what is exactly causing an error (if you even manage to detect one). In nearly all cases, you should have an expectation of what kind of error your code can throw, so your try/except's should look like:If you have to do a wildcard  for some crazy reason, ideally refactor, so that such a thing isn't necessary, but at the very least,  some kind of message indicating that the  failed. Generally, to avoid this problem (as it relates to wildcard or even specific exceptions), do your best to ensure that the try/except clause wraps as little code as is necessary to accomplish your goals. 
You are not capturing the return value from . in , change to  then  to see what you get.This is assuming these are methods of a class. If they are just functions, just do away with the whole  bit, it's syntax used for classes only, to pass in the instance as the first argument.


Answer URL
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
