Natural Text
I have a single script as below:Output is:On the other hand, the same code with command line:The output is .What is the difference between the 2 ways?When python script running, how does Python VM to manage the integer objects?I see that the number from -5 to 256 is generated by VM automatically when VM started and VM will also assign the empty int blocks(chain struct) to avoid allocating memory frequently for large number storage.Will these blocks be released automatically by python VM when memory is not enough? For my understanding, Python just keeps these blocks to avoid allocating memory frequently so that them will never be released automatically once allocated?Just test with following code:The memory is:Here is the result of :It seems that the memory is never released. Is this right?If I want to release the integer objects when memory is not enough, how can I do?Thanks a lot.=============================== Update ===============================range() in Python2 returns the full list which keeps all the items and xrange() in Python2 returns a generator.xrange() is the range() function in Python3.Here is the link for generator in python and also the PEP link,https://wiki.python.org/moin/Generators & https://www.python.org/dev/peps/pep-0255/
Regarding your first question, it basically related to the peephole optimizer which simplifies the expressions. i.e. using one integer object for all equal values. It also use this approach for interning the strings.The reason that you don't see such behavior within the interactive shell is that every command executes separately and gives the corresponding result, whereas in a file or in a function (even in terminal) all the commands interpreted at once. Here is an example:Regarding your second question, there are actually plenty of misunderstandings here. First off, the duty of VM in python is executing the machine code corresponding to each bytecode, while managing the integers and actually parsing the code and compiling to the bytecode is the interpreter and compiler's task. And as it's mentioned in comments,  in python 2 returns a list while in python 3 it's a smart object that preserves the start, end and step, and is a generator like object which generated the items on demand.Also about the functionality of , as mentioned in documentation when you don't pass an argument to it,  run a full collection, and:The free lists maintained for a number of built-in types are cleared  whenever a full collection or collection of the highest generation (2)  is run. Not all items in some free lists may be freed due to the  particular implementation, in particular float


Answer URL
https://docs.python.org/3/library/gc.html#gc.collect
