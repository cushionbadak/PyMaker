Natural Text
I'm coming to Python from Clojure, and was wondering if there is a way to have a "temporary variable" inside a generator.In Clojure, I can use a  inside a for generator to name an intermediary computation on the item:In Python, I need to use a generator twice to filter out the  results:So, is there a way to do something like the following? If not, what is the most Pythonic way?
No, there is no direct equivalent of Clojure's .  The basic structure of Python's list comprehension is:where the  part is optional.  That is all that the grammar provides for.In your specific case though, you could put a generator expression inside the list comprehension:Demo:Also, you will notice that I removed the  part of your condition.  While it is generally a good idea to explicitly test for , it is not needed in this case since  always returns either a match object (a truthy value) or  (a falsey value).


Answer URL
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
