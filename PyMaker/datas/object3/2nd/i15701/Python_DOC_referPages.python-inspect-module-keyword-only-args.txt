Natural Text
The phrase "keyword only args" in Python is a bit ambiguous - usually I take it to mean args passed in to a  parameter.  However, the  module seems to make a distinction between  and something called "keyword only arguments".From the docs:inspect.getfullargspec(func)Get the names and default values of a Python functionâ€™s arguments. A  named tuple is returned: is a list of the argument names.  and  are the names  of the  and  arguments or . defaults is an n-tuple of the  default values of the last n arguments, or None if there are no  default arguments.  is a list of keyword-only argument  names.  is a dictionary mapping names from  to  defaults.  is a dictionary mapping argument names to  annotations.So the inspect module has something called  and .  What does this mean in an actual function signature?  If you have a function signature that accept a  argument, you can't really know the names of the keyword arguments until runtime, because the caller can basically just pass any arbitrary dictionary.  So, what meaning does  have in the context of a function signature - which is what the  provides.
TL;DR:  Keyword-only arguments are not the same as normal keyword arguments.Keyword-only arguments are arguments that come after  and before  in a function call.  As an example, consider this generic function header:In the above,  takes a keyword-only argument.  This means that you must supply its name when giving it a value.  In other words, you must explicitly write:instead of just passing a value:To explain better, consider this sample call of the function given above:When Python interprets this call, it will:Assign  to  because its position in the function signature matches the position of  in the call.Place  in  because  collects any extra positional arguments and  is extra.Assign  to  because we have (as is necessary) explicitly told it to.  Note that if we had done this instead: would also be placed in  and a  would be raised for not supplying an argument to  (since we did not give it a default value in this case).Place  in  because it is an extra keyword argument, which are collected by .Below is a demonstration of what I said above:Basically, you can look at keyword-only arguments as keyword arguments where you must supply the name of the parameter when giving them a value.  A positional value will not suffice, as with normal keyword arguments.Finally, I know that some people are thinking "Why have keyword-only arguments anyways?"  The answer is simply that they make things more readable in some cases (especially with functions that take a variable number of arguments).As an example, consider the built-in  function and its keyword-only  argument.  What is more readable to you?  Doing something like this:and having people remember that the first argument to  is always the key function or doing this:and making it clear to everyone that  is your key function.  Plus, making  a keyword-only argument allows you to simply omit the key function if you do not need one:instead of doing:For more information, you can check out these sources:https://docs.python.org/3/reference/compound_stmts.html#functionhttps://docs.python.org/3/reference/expressions.html#callshttps://docs.python.org/3/glossary.html#term-parameter


Answer URL
https://docs.python.org/3/glossary.html#term-key-function
https://docs.python.org/3/reference/compound_stmts.html#function
https://docs.python.org/3/reference/expressions.html#calls
https://docs.python.org/3/glossary.html#term-parameter
