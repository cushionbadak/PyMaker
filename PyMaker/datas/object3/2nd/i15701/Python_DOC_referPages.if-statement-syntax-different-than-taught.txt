Natural Text
I've been seeing code like this on the internet and in response to my questions in people's if statements. Could someone break that down? This is in the context of a raw input being compared to a phrase not given. 
Let's start with the top:This is two terms separated by :The meaning of that  is pretty obvious, so let's give it a better name:But you're still mystified by that , so let's break it down the same way. It's a parenthesized expression, which is the same as what's inside the parens, so let's skip that part and go right to:These should now be small enough to parse in your head. If not, you can go one step furtherâ€”but note that you can also just add some  calls, like  and run the program and see if that helps.Anyway, let's give them names:And now you're done: you're checking that the letter is a new letter (neither in the word, nor guessed), and not a space.If you wanted to take this to the limit, it would look something like this:*And then you can go step by step, eliminating the ones that do nothing, giving intermediate names to the meaningful ones from the lowest level up, and so on.But in real life, you'd never go that far unless you were trying to interpret code by hand to understand the language definition or something.* In fact, if you really want to break it down exactly the way Python does, you can ask Python to do it for you, by using the  module.
try like this:why unnwanted brackets, if can handle the statment
if either the lowercase letter is not in the word or the lowercase letter is not in the list of guessed numbers, and the letter is not a space, then do something ... it is likely for a hangman type gameusually the something you do is add it to the list of guessed letters (at a minimum)


Answer URL
https://docs.python.org/3/library/ast.html
