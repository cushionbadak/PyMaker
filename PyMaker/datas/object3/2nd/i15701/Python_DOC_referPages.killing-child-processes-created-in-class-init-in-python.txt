Natural Text
(New to Python and OO - I apologize in advance if I'm being stupid here)I'm trying to define a Python 3 class such that when an instance is created two subprocesses are also created. These subprocesses do some work in the background (sending and listening for UDP packets). The subprocesses also need to communicate with each other and with the instance (updating instance attributes based on what is received from UDP, among other things).I am creating my subprocesses with os.fork because I don't understand how to use the subprocess module to send multiple file descriptors to child processes - maybe this is part of my problem.The problem I am running into is how to kill the child processes when the instance is destroyed.  My understanding is I shouldn't use destructors in Python because stuff should get cleaned up and garbage collected automatically by Python.  In any case, the following code leaves the children running after it exits.What is the right approach here?Running the above produces:
Actually, you should use destructors. Python objects have a  method, which is called just before the object is garbage-collected.In your case, you should definewithin your  that sends the appropriate kill signals to your child processes. Don't forget to store the child PIDs in your parent process, of course.
As suggested here, you can create a child process using multiprocessing module with flag daemon=True.Example:
There's no point trying to reinvent the wheel.  does all you want and more, though  will simply the process, so we'll use that.You can use  to create connections and can send messages back and forth between a pair of processes. You can make a pipe "duplex", so both ends can send and receive if that's what you need. You can use  to create a shared  between processes (sharing a state between listener, sender and parent). There is a warning with using ,  or . Any mutable object assigned to them will not see changes made to that object until it is reassigned to the managed object. eg.If you need to have more than one process write to the same attribute then you will need to use synchronisation to prevent concurrent modification by one processes wiping out changes made by another process.Example code:Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__del__
