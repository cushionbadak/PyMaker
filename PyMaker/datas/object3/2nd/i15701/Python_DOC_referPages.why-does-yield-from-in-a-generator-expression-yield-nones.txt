Natural Text
I have the following code:The output is:... etc. Why do the s appear? If I instead have:Then I get what I would expect:... etc. Further, is there a way to write it as the generator expression to get the same result as the latter?
 is an expression, and its value is whatever is sent into the generator with .  If nothing is sent in, the value of  is None.  In your example  yields the values from the list, but the value of the  expression itself is None, which is yielded at each iteration of the enclosing generator expression (i.e., every value of ).Your example is equivalent to:Note the extra .You will always have this issue if you try to use  in a generator expression, because the generator expression already yields its target values, so if you add an explicit , you are adding an extra expression (the  expression) whose value will also be output in the generator.  In other words, something like  already yields the numbers in ; if you do something like , you're going to get the values of the  expression in addition to the numbers.As far as I know, there is no way to get the simple  behavior (without extra Nones) using a generator comprehension.  For your case, I think you can achieve what you want by using :(Edit: I realized you can get the  behavior in a generator comprehension by using nested  clauses: .  However, I don't think this is any more readable than using .)


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
