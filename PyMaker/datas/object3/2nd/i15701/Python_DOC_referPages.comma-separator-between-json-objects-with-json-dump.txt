Natural Text
I am fiddling around with outputting a json file with some attributes of the files within a directory.  My problem is, when appending to the file there is no separator between each object.  I could just add a comma after each 'f' and delete the last one, but that seems like a sloppy work around to me.  This outputs:What I would like is actual JSON:
What you're getting is not a JSON object, but a stream of separate JSON objects.What you would like is still not a JSON object, but a stream of separate JSON objects with commas between them. That's not going to be any more parseable.** The JSON spec is simple enough to parse by hand, and it should be pretty clear that an object followed by another object with a comma in between doesn't match any valid production.If you're trying to create a JSON array, you can do that. The obvious way, unless there are memory issues, is to build a list of dicts, then dump that all at once:If memory is an issue, you have a few choices:For a quick-and-dirty solution, you can fake it by writing the , , and  manually. (But note that it is not valid JSON to have an extra trailing comma after the last value, even if some decoders will accept it.)You can wrap your loop up in a generator function that yields each , and extend  to convert iterators to arrays. (Note that this is actually used as the example in the docs of why and how to extend , although you might want to write a more memory-efficient implementation.)You can look for a third-party JSON library that has some kind of built-in iterative streaming API.However, it's worth considering what you're trying to do. Maybe a stream of separate JSON objects actually is the right file format/protocol/API for what you're trying to do. Because JSON is self-delimiting, there's really no reason to add a delimiter between separate values. (And it doesn't even help much with robustness, unless you use a delimiter that isn't going to show up all over the actual JSON, as  is.) For example, what you've got is exactly what JSON-RPC is supposed to look like. If you're just asking for something different because you don't know how to parse such a file, that's pretty easy. For example (using a string rather than a file for simplicity):
I had the same problem because I needed to  objects into a file because I didn't want to load the whole list of objects into memory.Here's my approach (but I think it's a bit hacky though):


Answer URL
https://docs.python.org/3/library/json.html#json.JSONEncoder.default
