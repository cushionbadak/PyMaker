Natural Text
I currently have a method which needs to be optimized!I'm still learning python so help would be much appreciated!I'm trying to run the method below against a very large corpus and I need to optimize/reduce the run time for this method as it already takes up about 6 seconds to execute.Requirements:Check the word only consist of alphabets, hyphen and apostropheFirst character of word must be alphabetLast character of word must be alphabet or apostrophe only.Use of re library (regex) strictly not allowedBelow is the code:Output will be test'The code above will take about 5 seconds to run.If I change lines 2-7 of the code to this line:The runtime somehow increases by 1 more second.Does anyone here have a better idea or an improved optimized way to check for this at a much faster speed? Thanks!
Try str.translate:Python 3:without translate:static str.maketrans(x[, y[, z]])This static method returns a translation table usable for str.translate().If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals.If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.
Use one of or Depending on your distribution of strings and Python version/platform, use the fastest.UPDATE: this is a new version based on better understanding of the specs.
Use a few standard libraries:Alternative method using :(based on this solution)


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
