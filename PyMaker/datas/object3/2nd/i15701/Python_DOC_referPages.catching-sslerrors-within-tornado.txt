Natural Text
I'm running Tornado 4.0.2 in a Python 2.7.5 virtualenv using SSL and a self-signed certificate and am the following SSLError is showing up repeatedly:A few questions follow:I'm assuming these exceptions are due to clients freaking out about my self-signed certificate. Is this correct?Assuming this is the case - I don't care about this exception, and I don't want to see it in the log. (It's an internal webserver - we're never going to pay for a CA. All connections are just going to have to be untrusted.) In an attempt to catch the exceptions myself, I've tried subclassing IOLoop as follows:But this hasn't helped - I still get the full stack trace.What do I need to do to handle (i.e. ignore) such exceptions myself? I've experimented with setting  in the ssl_options but that also hasn't helped.Is there anything else I need to do - such as close the connection myself - when I've caught such an exception? If so, what, and how?
I also asked this question on the Tornado mailing list, and got the following response:This error is coming from HTTP1ServerConnection, not IOLoop (I think  it's uncommon for errors to make it all the way up to the IOLoop these  days). You're correct that this means that a client has refused to  connect because it doesn't trust your certificate. It's arguably  useful to log something in this case (you'd want to know if this  started happening a lot), but it should be at most one line instead of  a full stack trace. It might also be better to treat it as more like  ECONNRESET and log nothing.We don't currently expose any useful ways to customize this logging,  but you have options in the logging module itself. You could attach a  Filter to the logger and block entries where exc_info[0] is SSLError  and exc_info[1] has the right error code, for example.I ended up adding a filter to Tornado's logger as suggested. One slight snag was that  was sometimes , but in such situations I was able to get enough information out of  to decide if I want to filter it.
Following on from helgridly's own answer: the error can't be caught, but you can filter the logs.Create a function that checks for the presence of an SSL error in a log record, and rejects certain such errorsInstall it as a filter for the  loggerFor example:The code above will only work for Python 3.2+. For older versions, subclass  instead.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Filter
