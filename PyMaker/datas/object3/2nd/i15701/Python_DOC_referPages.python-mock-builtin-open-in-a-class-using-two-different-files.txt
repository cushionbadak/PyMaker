Natural Text
I am having trouble figuring out how to mock two file opens in a class when they both use context managers. I know how to do it for one context-managed file using the mock module like this:My problem is how to do this when a class opens two different files in the same call. In my case, the class  preloads the files into two maps. This class is used in other classes. I want to mock the loading of these two files to provide my test data so that the other classes that use the IfAddrConfig object can be tested against my preloaded test file content.Here's an example of the class I am struggling with that loads two files in , both of which I want to mock to load my test injected file contents. getInterfaceMap() is the function that is called frequently so I do not want that to be loading and parsing the files every call, hence the reason for preloading the maps in  once.
You must use  attribute of your patched  object () and don't forget to set the  for  method.[EDIT]I found a much more elegant way to do it Mock builtin 'open" function when used in contextlibSo you can rewrote test likeAnd from python 3.4 you can use also readline(), readlines() without mocking anything else.
You'd create two 'file' mocks, and mock  to return these in sequence as  is called. The  attribute lets you do just that:The mocked  call returns first  when called, then . Either object then responds to  being called with a mock that returns a given tuple for the  call.
If you need much more control over file content you can use a wrapper function.It substitutes the content of a file according to the filename as the original  does.In the  chain you set "file contents" for each existing file path.Tests:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect
