Natural Text
I am trying to extracting information from a table using bs4 and python.when I am using the following code to extract information from header of the table: It works, but for the following codes that I am trying to extract information from the first row to the end of the table: There is the following error: Can anyone help me to edit it. This is table information:This is the output for tr_all:
For Your first question,yieldsAnd regarding Your second questiontr_header=table.findAll("tr")[0] i do not get a listTrue,  is indexing operation, which selects first element from list, thus You get single element.  is slicing operator (take a look at nice tutorial if You need more information). Actually, You get list two times, for each call of table.findAll("tr") - for header and rest of rows. Sure, this is quite redundant.If You want to separate tokens from header and rest, I think You likely want something like thisand regarding third questionIs it possible to edit this code to add table information from the first row to the end of the table?Given Your desired output in comments below:yields
JustMe answered this question correctly.Another equivalent variant would be:This strange construction in the critical line serves as flattening of the list of list 'tds_all'. lambda z: [x for y in z for x in y] flattens the list of list z. I replaced x and y and z according to this specific situation.Actually I came to it, because I had as an inbetween-step as the critical line:tds_all = [[td.get_text()  for td in each_tr.findAll("td")] for each_tr in tr_all ]which generates a list of lists for tds_all:[[u'active ', u'Active', u'This account is active and may be used.'], [u'inactive ', u'Inactive', u'This account is inactive\n and should not be used to track financial information.']]To flatten this, one needs this [x for y in z for x in y] composition.But then I thought, why not apply this structure right to the critical line and flatten it thereby?z is the list of bs4-objects (tr_all). In this 'for ... in ...'-construct, each_tr (a bs4-object) is taken from the list 'tr_all', and the each_tr object generates in the behind 'for-in'-construct a list of all 'td' matches, by the expression each_tr.findAll("td") from which every match "td" is isolated by this behind 'for ... in ...'-loop, and at the very beginning of this listexpession stands what should be then collected in the final list:the text isolated from this object("td.get_text()"). And this resulting final list is assigned to td_all.The result of this code is this result list:The two longer elements were missing in the example is of JustMe. I think, Mary, you want to have them included, isn't it?


Answer URL
https://docs.python.org/3/tutorial/introduction.html
