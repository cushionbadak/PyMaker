Natural Text
I am learning generator from this thread. This is really a good example for generator. But I am confused by one of the example code.When hsbc.crisis is reset to False, the corner_steet_atm can not yield anything but StopIteration.Why does this happen. I think the corner_street_atm is not empty after crisis.
The problem is coming from the fact that when you sayYou are calling the function once, and that is all the times it will be called.  Thus, let's keep a view of what is happeningNow, we can ask the question of where our method is looking when crisis is True, and we find that it is point at the spot shown below:Well, there is nothing there, so you get an error.What you are really looking for appears to be an infinite loop in atm.  Something like this:Careful with this, as your final call will loop forever because you currently don't see how much cash is in the atm (So as long as there isn't a crisis it will just spew out dollar bills.
Generally it is due to that you called the  after you set the . If you do it like this, you would have no problem:The reason is the the  is a generator(iterator) object, and once The generator created in this case will call o with no arguments for each call to its next() method; if the value returned is equal to sentinel,  will be raised, otherwise the value will be returned[1].The thing is once you call the  after the , the Exception will be raised. And once the exception is raised, there is not way to loop this object any more and unless you create a new object!
The problem here is that your generator (which is a type of iterator) has been exhausted. Once it has been exhausted, an iterator should not flip back and forth between yielding values and raising the  (in other words your example is behaving as it should even though it isn't what you want it to do). Here is some more about the iterator protocol:https://docs.python.org/3/tutorial/classes.html#iteratorsThe reason the generator stops yielding values in this particular case is that once you exit the  loop (which happens as soon as  is called when  is True), there is no way to re enter the loop. What you most likely want to be doing is using the  magic method on a separate  object. More about that here:https://docs.python.org/3/library/functions.html#iterIt might look something like this: You'll want to get an atm iterator this way: The last line uses an optional form of the  function since a second argument is supplied. The iterator returned by this second form raises  if  returns the sentinel value that was supplied to . In this case the sentinel is . And iterate through it like this:NOTE: an  object never runs out of money if you don't use  with the  sentinel argument! 


Answer URL
https://docs.python.org/3/tutorial/classes.html#iterators
https://docs.python.org/3/library/functions.html#iter
