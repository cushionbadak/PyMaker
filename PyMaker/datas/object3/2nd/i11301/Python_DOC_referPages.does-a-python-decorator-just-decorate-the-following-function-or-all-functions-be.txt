Natural Text
I've got a class definition as follows:What I want to know is, does the  decorator apply to all functions beneath until it hits another decorator, or just the following function?If I want to decorate , do I need to repeat  above it as well?
You can easily test this out yourself, by definining a decorator that will tell you whether you decorated something. For example this one:Then, when used with your class:… you get the following output:So the decorator is only applied to the function it is directly decorating. And if you think about it, this makes a lot of sense, since there is no syntax to undecorate a function. And since you can apply multiple decorators to single functions, there’s also no concept of overwriting a decorator.And finally, as per the zen of Python, “explicit is better than implicit”. So we rather want to explicitly list the decorator for every single function it should apply to instead of implicitly having rules that applies it in some magic way because it syntactically appeared before.
Decorators only apply to the function following it, if it was the other way, what would happen if i didn't want to decorate the function? so they only apply to the following function.So you have to use  on the  function if you want to cache it.
In addition to poke's answer: how about looking at the formal syntax of function's definition?See https://docs.python.org/3/reference/compound_stmts.html#function-definitions.So any decorators modifying a function have to be listed directly before the line that starts with def. No other code can jump in between.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
