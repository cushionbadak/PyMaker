Natural Text
I am trying to read a file with lines that look like this:With this code:And I get the following error: The program works perfectly when it evaluates a number, but won't work when it does with a Punctuated String.EDIT 1: The desired output was to have the numeric strings stored as numbers, and the strings as strings.Example: the list 'Line' would now look like this:
As I mentioned in my comment above, using  is a pretty awful idea, and lots of people much smarter and more experienced than me agree, so I go with it, and you should too.First, we are assuming that each line has the same structure and the same number of elements with the same transformation requirements (string, int, float). How much work you put into parsing these lines depends on what you need to do with the results. If you don't mind values like  and  being floats, the parsing is easy:You are now free to use  as you wish.If the  values in the middle of the list need to remain integers, the parsing takes two more lines, but is still straightforward:Here we're using list comprehensions to tackle slices of the  list - add the first two strings, then call  on the 3rd item, then call  on the 4th through 7th, then  again on the rest.
 evaluates an expression. So the string that you pass in has to evaluate to a value. When Python tries to evaluate  it hits an error as expected. To both Python and human readers that string looks like junk. An acceptable input string would be something like  where  is already defined previously in the script.An example using eval:
 returns the evaluated result of whatever string is passed to it.In your case "1A11:A" can't be evaluated to a values. Even if you remove that element what about the second element is it a variable? else that also would return an error.
I used eval in a unit test program. I wanted to pass a tuple (96,6,6,x) to an object. When x was set equal to '\"'+'9:30'+'\"', the equivalent to a hard-coded (96,6,6,"9:30"), it would never pass that value through. But without changing anything else, passing (96,6,6,(eval x)) worked. All I'm trying to do is run my unit test to exercise the object that will actually be used in a production program. I didn't want to spend a long time figuring out why the unit test itself was broken, although the object is working fine for its actual real-world scenario. And so is the unit test, if I code it that way.I think if you consider eval as a "rhs" tool, you will have no problem. Meaning, you cannot write eval("x=7") and expect eval to create the variable x and set it to 7. Any characters like that '=' could stray outside what it can do.P.S. To other newbies. Think before you post on Stack Overflow. Check what eval is supposed to do before you think you are stumped. In this case, a quickdirect python interpreter session, i.e.:eval("1A11:A")      Traceback (most recent call last):        File "", line 1, in         File "", line 1          1A11:A             ^      SyntaxError: invalid syntax


Answer URL
https://docs.python.org/3/library/functions.html#eval
https://docs.python.org/3/library/ast.html#ast.literal_eval
