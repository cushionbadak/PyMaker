Natural Text
Consider the simplest possible :It does precisely nothing.But suppose something goes wrong while we're doing nothing, how should the command return a non-zero exit code to the user?Return values seem to be ignored; the documentation says only:All terminal output and filesystem interaction should be done by run().which seems relevant without being particularly helpful.Perhaps we should infer to :This works, of course.But it's not clear to me that it's the right thing to do: if the command is run as a part of a longer process, or it's overriding a built-in command, presumably nothing further will execute.We could raise a relevant exception directly instead, assuming it might be more likely to be well-handled, but then there's a nasty traceback when we exit - what if we've already logged something nicer ourselves?Is this safe to do; is there a better alternative?
While exit will defintely work, raising any of the  with the error message desired to halt execution is how distutils handle problems internally.  For instance, if one wish to prevent editable (develop) installation method provided by setuptools, using only  API, raising  can be achieve this.Running that with the develop option may result in this:Execution will halt, as that is trapped and a  will be raised (now if somehow the whole process is wrapped by some other Python libraries that trap all exceptions including  or some other process expect a non-zero exit code, a traceback or other unexpected output will likely be produced).  While on the surface this is not too different than raising  (or calling ) directly, there are prefixes that do get generated for errors such as  that one might raise in a custom  class.  So with all that said, calling  is fine.


Answer URL
https://docs.python.org/3/distutils/apiref.html#distutils.cmd.Command.run
https://docs.python.org/3/distutils/apiref.html#module-distutils.errors
