Natural Text
When I create a class with method like this:I would expect the  to return the first statement of the method, since both are strings. Unfortunately, this does not happen:  outputs  4 times. Also the example herehttps://docs.python.org/3.4/library/functools.html?highlight=doc#functools.wrapsseems to fail, as the docstring is  for me:Which also prints .Why are the 's not set to the specified strings?ideone snipplet: http://ideone.com/cZNUQe
Update: Based on @user2357112's suggestion, I found a way to reproduce ideone's behavior in a local interpreter, and it's likely the cause for the weird discrepancies. Specifically, it looks like ideone is running a wrapper script in Python without the  flag, but using the  builtin function to compile the user provided code with  as the argument, then ing the resulting compiled code object. It looks like this causes the the split behavior previously mentioned;  is , and  is  (matching the state of the outer interpreter), but docstrings and  statements are stripped (matching the optimization level used when  is called).To reproduce, run the following script with Python without passing the  flag:The output is:where the first two lines behave as if running without , while the next two lines (and the absence of an ) behave as if  is in effect. It looks like  checks are performed at runtime (which means they reflect the main interpreter state),  is half and half ( checks and possibly other conditional logic is performed at compile time, while other usage is runtime, note how  s as , but tests as ), while stripping docstrings and s is finished entirely during compilation (so they reflect the state of 's  flag).Old answer that applies more often outside ideone:For non-ideone cases, behavior like this would indicate you're running with the  switch (double optimized). When run with , docstrings are stripped during byte code compilation, replaced with ; setting  environment variable to  would have the same effect.


Answer URL
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/using/cmdline.html#cmdoption-OO
https://docs.python.org/3/library/py_compile.html
