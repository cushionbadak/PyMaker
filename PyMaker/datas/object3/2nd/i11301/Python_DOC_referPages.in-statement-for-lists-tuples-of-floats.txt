Natural Text
Should the use of in or not in be avoided when dealing with lists/tuples of floats? Is its implementation something like the code below or is it something more sophisticated?
 and  should be your preferred way of membership testing. Both operators can make use (via ) of any optimized membership test that the container offers.Your problem is with the  part, because  makes an equality comparison with  (optimized to check for identity, first).In general, for floating point comparing for equality does not yield the desired results. Hence for lists of floats, you want something likeUse with sorting and binary search to find the closest matching float at your convenience.
Here's the part of the documentation saying that  checks for equality on sequence types. So no, this should not be used for sequences of floats.
The  operator uses regular equality checks behind the scenes, so it has the same limitations as   when it comes to floats. Use with caution if at all.
Since  operator uses equality check, it'll frequently fail, since floating point math is "broken" (well, it's not, but you get a point).You may easily achieve similar functionality by using :
Python's  type has its  method implemented in C:A literal translation to Python might be:Your example is a more idiomatic translation.In any case, as the other answers have noted, it uses equality to test the list items against the element you're checking for membership. With  values, that can be perilous, as numbers we'd expect to be equal may not be due to floating point rounding.A more -safe way of implementing the check yourself might be:where  is some small value. How small it needs to be will depend on the size of the numbers you're dealing with, and how precise you care to be. If you can estimate the amount of numeric error that might differentiate  an equivalent value in the list, you can set  to one order of magnitude larger and be confident that you'll not give a false negative (and probably only give false positives in cases that are impossible to get right).


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
