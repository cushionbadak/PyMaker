Natural Text
I'd like to implement a Counter which drops the least frequent element when the counter's size going beyond some threshold. For that I need to remove the least frequent element.What is the fastest way to do that in Python?I know , but it creates a whole list and seems slow when done extensively? Is there a better command (or maybe a different data structure)?
You may implement  by borrowing implementation of  and performing necessary changes.Refer to  source in Py2.7:To change it in order to retrieve least common we need just a few adjustments.Tests:
Since your stated goal is to remove items in the counter below a threshold, just reverse the counter (so the values becomes a list of keys with that value) and then remove the keys in the counter below the threshold.Example:In this example, all counts less than or equal to 2 are removed. Or, just recreate the counter with a comparison to your threshold value:
If you only want to get the least common value, then the most efficient way to handle this is to simply get the minimum value from the counter (dictionary).Since you can only say whether a value is the lowest, you actually need to look at all items, so a time complexity of O(n) is really the lowest we can get. However, we do not need to have a linear space complexity, as we only need to remember the lowest value, and not all of them. So a solution that works like  in reverse is too much for us.In this case, we can simply use  with a custom key function here:Of course, since dictionaries are unordered, you do not get any influence on which of the lowest values is removed that way in case there are multiple with the same lowest occurrence.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
