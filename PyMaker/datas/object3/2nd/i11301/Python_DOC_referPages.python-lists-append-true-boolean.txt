Natural Text
The following [incomplete] code is designed to take in an n to x number, of length x-n, and return the value of the next pandigital number. The code identifies which number between n and x is missing from the number passed in as an argument to the function, and returns (for the time being, until the function is further developed), two lists, the original number itself with its individual digits as members of a list, and a list, with the numbers n to x as members, with those numbers which are present in the original number of length x-n being replaced by the Boolean value True.Although, for the input parameters of  in Enthought Canopy, the second list returned should read , the value of the second list returned is, in fact , with the 1 from the original  list not being replaced by .I know that there is no issue with the loop, or the general flow of the code, for when the  line of code is commented, and the currently commented code is uncommented, the code works as it is intended to, with all digits in  being replaced by the String value ''I have attempted to resolve this issue. However, I am not able to pinpoint its source. I have considered to fact that  returns True. However, when the value True is replaced by False, in the line , the code still works as it is intended to.Any answer/help/suggestion/advice on this matter would be highly appreciated. Thank you in advance.
The issue is with using  to find where to assign to. Since  is equal to 1, you're mistakenly thinking that the  you entered for  is the  you want to replace next.A solution would be to use  to get indexes as you iterate over your list, rather than needing to find them later using :A better solution in general would be to use a list comprehension to create the list in one go, rather than starting with numbers and replacing some of them later:I'm also getting rid of the unnecessary calls to  in the membership test against . You were doing substring testing, rather than testing if the numbers themselves were in the list. That probably wasn't going to cause errors, since the numbers you care about are all one digit long, and the string representation of a list doesn't have any extraneous digits. But in general, its not a good idea to use string operations when you don't need to.
You are checking the same list that you are updating and that is always dangerous. At the second iteration your variables are:So when you are doing  there is a match but it does not reach the  since it happens in  so it returns that the index But in general, this implementation is not much pythonic, better check Blckknght's answer


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
