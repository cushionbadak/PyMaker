Natural Text
I have to files, main.py and child.py.I am trying to send a string to the stdin of main.py.This is my incomplete code:main.pychild.pyI have no idea how to do this.I am running windows 10 with python 3.5.1-ThanksEDIT:When I am sending the argument back to main.py, I can not re-open the program. os.system re-opens the program which is not useful in my case.These programs are a small demo of what I am trying to do. In my actual program, I am not able to do that as the two programs are "communicating" with each other an need to be open at all times.What I need answered is a way to send an argument to main.py perhaps using stdin but when I am sending my argument, It can not re-open the program. Some examples like os.system re-open the program which is not what I am trying to do. I need main.py open at all times.I have my new current code which is not working. A window pops up and then closes.main.pychild.pyThat is my code.
What you need is something along the lines of (in ):You're assuming  (in your mockup demo, ) is communicating with  via , however these I/O's are used to communicate with the shell that spawned the process.Much like the childs  will be communicating with the shell that spawned that process, in this case .Each spawned child process of  will be isolated with it's own , otherwise every subprocess would make a huge mess of your main process stdout/stdin. This means you'll have to check for output on that particular subprocess and write to it accordingly as done in the above example.One way to look at it is this:You're starting , and you communicate with it via  and . Each  in  will output something to  so you can read it.Exactly the same logic applies to  where every  will output something to it's  (- But remember -  is not a shared variable across processes).But a simple  would do the same because it will essentially output the  to  for you.Edit 2018: Don't forget to close your inputs and outputs, as they might leave open file descriptors on your file system, hogging resources and causing problems later in life.Other conveyers of informationAssuming you have control of the code to  and you can modify the communication pipe in any way, some other options are:sockets - Use regular sockets to communicate, on *nix the most efficient would be Unix sockets.Some other solutions can be found here: Best way to return a value from a python scriptMore cautionary tails! will assume there's a  somewhere in your data, most likely at the end. I switched to  for two reasons,  will hang and wait for  unless you specify exactly how many bytes to read, if I'm not out on a bicycle. To be able to read all kinds of output you need to incorporate select.select() into your code - or a buffer of some sort where you call  to read one byte at a time. Because if you try to read  and there's not 1024 bytes in the buffer, your read will hang until there are 1024 characters.I left a bug in your  code on purpose (mine works) - It's trivial and basic Python - in hopes that it's a learning experience on how to debug errors (you mentioned you're not good at it, this is a way to learn).


Answer URL
https://docs.python.org/3/library/select.html
