Natural Text
I'm making a Twitter API, I get tweets about a specific word (right now it's 'flafel'). Everything is fine except this tweetb'And when I\'m thinking about getting the chili sauce on my flafel  and the waitress, a Pinay, tells me not to get it cos "hindi yan  masarap."\xf0\x9f\x98\x82'I use  to see tweets, but this one gives me UnicodeEncodeError every time and if I erase  from that line like  I can see the actual tweet like above, but I want to convert that  part to a str. I tried everyting, every version of decodes-encodes etc. How can I solve this problem?Edit: Well I just went to that user's Twitter account to see what is that non-ASCII part, and it turns out it's a smile:Is it possible to convert that smiley?Edit2: The codes are;
The problem could arise at the moment you try to use the unicode character  on Windows. Python-3 is fine for converting it from utf-8 to full unicode an back again, but windows is not able to display it.I tried this piece of code in different ways on a Windows 7 box:Are here is what happened:in IDLE (Python GUI interpretor based on Tk), I got this error:UnicodeEncodeError: 'UCS-2' codec can't encode characters in position 139-139: Non-BMP character not supported in Tkin a console using a non unicode codepage I got this error:UnicodeEncodeError: 'charmap' codec can't encode character '\U0001f602' in position 139: character maps to <undefined>(for the attentive reader BMP means here Basic Multilingual Plane)in a console using utf-8 codepage (chcp 65001) I got no error but a weird display:My conclusion is that the error in not in the conversion utf-8 <-> unicode. But it looks that Window Tk version does not support this character, nor any console code page (except for 65001 that simply tries to display the individual utf8 bytes!)TL/DR: The problem is not in core Python processing nor in the UTF-8 converter, but only at the system conversion that is used to display the character But hopefully, as core Python has no problem in it, you can easily change the offending  with a  for example with a mere  (after the code shows above):If you want a special processing for all characters outside the BMP, it is enough to know that the highest code for it is . So you could use code like that:
As I mentioned in the comments, you can get the names of Unicode codepoints using the standard unicodedata module. Here's a small demo:outputAnother option is to test if a character is in the Unicode "Symbol_Other" category. We can do that by replacing the test in  with When we do that, we get this output:


Answer URL
https://docs.python.org/3/library/unicodedata.html#module-unicodedata
