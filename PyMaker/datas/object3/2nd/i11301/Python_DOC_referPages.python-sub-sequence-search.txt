Natural Text
I have a sequence 'abccabac' and a subsequence 'abc'. I need to get indices of all occurences of subsequence 'abc' in the sequence.What is the memory efficient way of doing it?   Example:Input:Output: 
the absolute most strait forward way I can think of is using If your actual sequence contains lots of characters that are not even in the subsequence then filtering out the irrelevant characters before starting the  would definitely provide a substantial efficiency boost:as well instead of joining each combination you can just use  which will only check characters until one is found to be not equal:Here is a different alternative I just put together, I imagine the algorithm could be optimized even more but this is about the best I could come up with.  The  creates a list of indices for each letter of the sub sequence, then the  for each level of the recursion goes through all indices for the next letter of the subsequence starting after the indice of the last letter.In terms of memory this will make a list for each character of the subsequence, containing the indices in the main sequence where that character is present.  A tuple of these lists, and a list of the indices that is continually updated and a tuple for each time a combination is ed, and iterators like  so this is extremely memory efficient, however since I have not extensively tested it I cannot give any guarantee it is bug free.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
