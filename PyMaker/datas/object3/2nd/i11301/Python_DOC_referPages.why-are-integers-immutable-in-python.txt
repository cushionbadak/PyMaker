Natural Text
This question already has an answer here:Immutable vs Mutable types                    16 answers                I understand the differences between mutable and immutable objects in Python. I have read many posts discussing the differences. However, I have not read anything regarding WHY integers are immutable objects.Does there exist a reason for this? Or is the answer "that's just how it is"?Edit: I am getting prompted to 'differentiate' this question from other questions as it seems to be a previously asked question. However, I believe what I'm asking is more of a philosophical Python question rather than a technical Python question.It appears that 'primitive' objects in Python (i.e. strings, booleans, numbers, etc.) are immutable. I've also noticed that derived data types that are made up of primitives (i.e. dicts, lists, classes) are mutable. Is the where the line is drawn whether or not an object is mutable? Primitive vs derived?
Making integers mutable would be very counter-intuitive to the way we are used to working with them.Consider this code fragment:After these assignments are executed we expect a to have the value 1 and b to have the value 3. The addition operation is creating a new integer value from the integer stored in a and an instance of the integer 2.If the addition operation just took the integer at a and just mutated it then both a and b would have the value 3.So we expect arithmetic operations to create new values for their results - not to mutate their input parameters.However, there are cases where mutating a data structure is more convenient and more efficient. Let's suppose for the moment that  did not modify  but returned a new copy of  with  appended.Then a function like this:would just return the empty list. (Remember - here  doesn't alter  - it returns a new list with  appended. But this new list isn't saved anywhere.)We would have to write the  routine like this:(This, in fact, is very similar to the situation with Python strings up until about 2.6 or perhaps 2.5.)Moreover, every time we assign  we would be copying a list that is increasing in size resulting in quadratic behavior.For those reasons we make lists mutable objects.A consequence to making lists mutable is that after these statements:the list b has changed to . This is something that we live with even though it still trips us up now and then.
What are the design decisions to make numbers immutable in Python?There are several reasons for immutability, let's see first what are the reasons for immutability?1- MemorySaves memory. If it's well known that an object is immutable, it can be easily copied creating a new reference to the same object.Performance. Python can allocate space for an immutable object at creation time, and the storage requirements are fixed and unchanging.2- Fast execution.It doesn't have to copy each part of the object, only a simple reference.Easy to be compared, comparing equality by reference is faster than comparing values.3- Security:In Multi-threading apps Different threads can interact with data contained inside the immutable objects, without to worry about data consistency.The internal state of your program will be consistent even if you have exceptions.Classes should be immutable unless there's a very good reason to make them mutable....If a class cannot be made immutable, limit its mutability as much as possible4- Ease to useIs easier to read, easier to maintain and less likely to fail in odd and unpredictable ways.Immutable objects are easier to test, due not only to their easy mockability, but also the code patterns they tend to enforce.5- Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary key. This is something that you want to use.Going back to the integers:Security (3), Easy to use (4) and capacity of using numbers as keys in dictionaries (5) are reasons for taken the decision of making numbers immutable.Has fixed memory requirements since creation time (1).All in Python is an object, the numbers (like strings) are "elemental" objects. No amount of activity will change the value 8 to anything else, and no amount of activity will change the string “eight” to anything else. This is because a decision in the design too.


Answer URL
https://docs.python.org/3/faq/design.html#why-must-dictionary-keys-be-immutable
https://docs.python.org/3/faq/design.html#why-are-python-strings-immutable
