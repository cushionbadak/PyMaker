Natural Text
In Python (more specifically Python 3.x), what happens if I say , where  is either a reference to a mutable (like ) or a reference to an immutable (like ) on the low-level? Does the compiler simply ignore such nonsense?More specifically, what does the compiler do if we have the following case:For those who haven't noticed,  effectively gets assigned to itself through the function, . I know this case with  above seems silly, but I am trying to keep my code clean and readable by clearly initializing all my member variables inside the  function (in a different class that I am implementing for real). I just want to know for interest's sake whether the compiler optimizes that step away, or whether it does some operations in any case, even though the statement does not result in anything (I'm guessing it gets optimized away, but I want to be sure - you never know).
Result:This shows that even in the most trivial case,  is NOT optimised away (in CPython, which is what  is for).
I just want to know for interest's sake whether the compiler optimizes that step away, or whether it does some operations in any case, even though the statement does not result in anything.Unless the Python Language Reference says something about it1, then any optimization or lack of it is implementation specific2.  You can investigate what a particular Python implementation does with this, but you cannot generalize to all Python implementations.1 - My cursory search of this copy of the spec does not real any relevant discussion of optimization.  Ergo, my reading would be that valid optimizations are permitted but not required.  (A valid optimization would be one that does not alter any observable behavior of a valid Python program that is clearly required by the spec.)2 - Indeed the spec says this: "Each of these implementations [listed above in the spec] varies in some way from the language as documented in this manual, or introducesspecific information beyond what’s covered in the standard Python documentation. Please refer to the implementation-specific documentation to determine what else you need to know about the specific implementation you’re using."
This may seem very strange, but it is not actually possible to implement the optimization you suggested, as python is far too dynamic.Consider the following code:The  in the  method suddenly starts having an effect! It doubles the value of a. Python is very dynamic indeed.


Answer URL
https://docs.python.org/3/howto/descriptor.html
