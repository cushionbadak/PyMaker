Natural Text
Given a string, lets say "TATA__", I need to find the total number of differences between adjacent characters in that string. i.e. there is a difference between T and A, but not a difference between A and A, or _ and _.My code more or less tells me this. But when a string such as "TTAA__" is given, it doesn't work as planned. I need to take a character in that string, and check if the character next to it is not equal to the first character. If it is indeed not equal, I need to add 1 to a running count. If it is equal, nothing is added to the count.This what I have so far:When I run it using num_diffs("TATA__") I get 4 as the response. When I run it with num_diffs("TTAA__") I also get 4. Whereas the answer should be 2. If any of that makes sense at all, could anyone help in fixing it/pointing out where my error lies? I have a feeling is has to do with state[char2]. Sorry if this seems like a trivial problem, it's just that I'm totally new to the Python language.
There are a couple of ways you might do this.First, you could iterate through the string using an index, and compare each character with the character at the previous index.Second, you could keep track of the previous character in a separate variable. The second seems closer to your attempt. is the character from the previous loop iteration. You assign it to  (the current character) at the end of each iteration so it will be available in the next.
To open this up a bit, it maps , , over  and  beginning at the 2nd character. The  function accepts multible iterables as arguments and passes elements from those one by one as positional arguments to given function, until one of the iterables is exhausted ( in this case will stop first).The  results in an iterable of boolean values, but since  in python inherits from  you can treat it as such in some contexts. Here we are interested in the  values, because they represent the points where the adjacent characters differed. Calling  over that mapping is an obvious next step.Apart from the string slicing the whole thing runs using iterators in python3. It is possible to use iterators over the string  too, if one wants to avoid slicing huge strings:
You might want to investigate Python's  function which helps with this kind of analysis.This would display:The  function works by grouping identical entries together. It returns a  and a , the key being the matching single entry, and the group being a list of the matching entries. So each time it returns, it is telling you there is a difference.
Trying to make as little modifications to your original code as possible:One of the problems with your original code was that the  variable was not initialized within the body of the function, so it was impossible to predict the function's behaviour.However, working with indices is not the most Pythonic way and it is error prone (see comments for a mistake that I made).  You may want rewrite the function in such a way that it does one loop over a pair of strings, a pair of characters at a time:Finally, that very logic can be written much more succinctly â€” see @Ilja's answer.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
