Natural Text
folder structure:main py: mod.py:__init__.py:If I run , I get no error. But if I edit  to  , I get this error: AttributeError: 'module' object has no attribute 'mod'I'm not asking how to make that  command work. I can use other  syntax in  to make it work. The question is: I'm curious about that  in the . If i can do  then when I replace to , which means import everything, why do I get an error instead?So what does the  really mean inside that ?Anyone can help? Thanks
Short answerSo what does the  really mean inside that ?The  imports itself.ExplanationYou can only import modules, not packages. Packages are just containers for modules or sub-packages. When you "import" a package you actually import the module .The  with this content:imports the module  into . Therefore, it will be availablein your  via  (remember  is represented by ).When you change the content of  to:You are importing the module , the very same file you are in.This works (a second import just triggers a lookup in ) but won't give you the content of .This means, you can use:but you cannot sensibly use this with an empty :Because  is actually represented by the  and there is nothing in it yet. You can check this (interactively or in  file):In  you can write:and then in :works. Because the function  is now in the global name space of thefile .As mentioned in the answer by mozman, you can use  in  tolist the modules that should be imported if  is used. This is designed for this case.The  has only this content:Now you can do this in :If you extend your :You can do this in :But if you remove the  from :You will get an error:because the  is only used for the  case.Now we are back to the  imports itself.
See also: In Python, what exactly does “import *” import?adding __all__ to packages.__init__:and module 'mod' will be imported, else 'mod' is not in the namespace of 'packages', but I can not explain why 'import *' without __all__ do not import 'mod'.
you can load the modules inside the same packages directly. The following code works and it loads all the modules inside mod.py.Inside __init__.pyEfficient import - loads only hello function In your code,   you are telling the interpreter to look for a modules inside (in the same directory as ). But it does not exist there. It exist one directory above the . (I suspect my terminologies are wrong)Here is a reference that explains how to load the containing package itself.FOUND ITIt was very interesting to read about python import mechanisms. Ref1 Ref2 Ref3Apparently the parent modules is loaded first. For example, Ref3 states that, the code  inside  is automatically interpreted as . Now I have to find out what happens if you write . Ref1 is more up-to-date with python3 conventions. Refer it for more info. Hope this helps you.


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
