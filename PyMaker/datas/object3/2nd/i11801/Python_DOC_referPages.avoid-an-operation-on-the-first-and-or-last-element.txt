Natural Text
I have a list with some text:And I want as output a string like this:If I make this, I get an aditional   at the endsame with this approach, but now at the beginning:Only thing I can think to solve it is to keep track of the indicesBut this seems like a very common issues, and I wonder whether is a more pythonic way to solve it. 
Use the join method to convert your list to a string. Provide a separator that will go between each element that is extracted from the list that goes in to your string. In this case  and a space ' ' after the comma:By printing s we will have:Just some extra notes about why using  here would actually be preferable, is because it actually runs at C speed as opposed to the speed you get from a Python loop. Read about performance tips here.Finally, a warning when doing this. The  always expects an iterable of strings. Which means, if you have a list of integers . You will not be able to call  directly on this. You would have to cast each of those values to an . A simple example would be something like this: So, to further explain what just happened in the above example. Since we actually have a list of integers. In order to successfully create our string from that list, we need to cast each element in the list to a string. In order to do this, we will use a list-comprehension to create this list of string integers, and then call your join method. Now, the reason why we are actually not using a generator expression here and using a list comprehension, is because in fact the join method will actually scan the iterable twice, therefore the comprehension in this case is actually faster. This is actually very nicely explained here. 
Is this what you want?


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
