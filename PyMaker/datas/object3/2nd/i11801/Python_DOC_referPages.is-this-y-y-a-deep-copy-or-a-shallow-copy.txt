Natural Text
Let this codeIs  a deep or shallow copy of ?
It's a shallow copy, but in this case there's no difference between a shallow and a deep copy, since the integers inside the list are immutable. In fact, they're all small enough that the standard Python interpreter (cpython) will cache them (every  is the same object), so a deep copy would have the exact same contents as a shallow copy (the contents will be the same by identity, not just value).
This line performs a shallow copy of the list :Why do you think it would  be a deep copy?But since ints are atomic and immutable, the term "copy" does not really apply. For your example it simply does not matter. If  contained some objects, yeah, then it's a shallow copy, because the contained elements are not copied.Python's man page for the module "copy" contains all the information you need to understand the difference between a shallow and a deep copy: https://docs.python.org/3/library/copy.html
I would not call what you are doing a copy-operation at all. You are building a new list  and assign it to the name .The  operator does not copy anything when using it on lists, so the items in  and the items in  will be the same (as in literally the same objects in memory). This holds true whether or not the contents of any of the lists are mutable, mutability should not be brought into this discussion.The only thing to watch out for when dealing with mutable elements is that changes to any of the mutable elements will be seen across all containers which hold a reference to them.


Answer URL
https://docs.python.org/3/library/copy.html
