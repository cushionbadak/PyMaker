Natural Text
In Japanese, there are combining diacritical marks that apply to certain kana, so there is a logical relationship between say "か" (ka) and "が" (ga) - the ga character is voiced.I'm wondering if there is any natural way (in Python, preferably, though a generalized answer about unicode is fine, too) to do the equivalent of transforming voiced characters to their unvoiced equivalents, and vice-versa - something akin to the  method that applies in latin scripts. An example of what I'm looking to do:At the moment, the best approach I seem to be able to come up with is to generate a lookup table indexed by row, column and voicing, then look up the character I have and translate it in the right direction. That said, I'd like to know if there's a more natural way to do it.One potential pitfall is that it seems to me that the unicode combining characters do not seem to compare equal to their single-codepoint equivalents:I am mainly concerned with the ones that do not involve combining diacriticals, since it seems easy enough to detect and strip off the combining marks.Note: I am not sure I understand Japanese phonology well enough to know what the correct behavior is for  (u) and  (vu - rare / obsolete), which again is why it would be nice if there were a "natural" way to do this.
You can de-voice by decomposing the character (moving from the NFC to NFD forms), using the  functionso  can be implemented as:If voicing always adds  (which it looks like), you can just add that to the entered kana and return the  combined normal form:It looks like semivoiced means you add :You could possibly use  to test if there is a decomposition:


Answer URL
https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize
