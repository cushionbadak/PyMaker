Natural Text
Say I already have a method with type annotations:Which I will then subclass multiple times:As you can see, I'm duplicating the  quite a lot. Say I have 10 different shapes, with multiple methods like this, some of which contain parameters too. Is there a way to just "copy" the annotation from the parent class, similar to what  does with docstrings?
This might work, though I'm sure to miss the edge cases, like additional arguments:which will assign "wrapper" function's  attribute from  (keep in mind that it is not a copy).According to documents the  function's default for assigned includes  already, but I can see why you'd not want to have all the other attributes assigned from wrapped.With this you can then define your  and  asand the resultAs a side effect your methods will have an attribute , which will point to  in this case.A less standard (if you can call the above use of update_wrapper standard) way to accomplish handling of overridden methods can be achieved using a class decorator:and then:Again, this will not handle overriding methods with additional arguments.
You can use a class decorator to update your subclass methods annotations. In your decorator you will need to walk through your class definition then update only those methods that are present in your superclass. Of course to access the superclass you need to use the it  which is just the tuple of the class, subclass, till . Here we are interested in the second element in that tuple which is at index  thus  or using the . Last and not least your decorator must return the class.Demo:


Answer URL
https://docs.python.org/3/library/functools.html#functools.update_wrapper
