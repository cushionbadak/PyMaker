Natural Text
Consider this example:My task is to write unit tests for ,  and  classes (especially for ).But how can I test  class if I cannot use some of it methods directly?Should I just test only  and  classes (which have implementation for )or maybe there is common way for testing abstract classes in Python?
You don't really have an abstract base class, at least as far as the language is concerned. Nothing is stopping you from instantiating it.If you were using the  module to define classes that you can't instantiate:then you can make  instantiable by overriding its set of abstract methods:In either case, you can still test that an abstract method either raises or test its default implementation as needed.
 exists on , so test it on . The helper methods exist on the concrete classes so test them there. You can use the  module to temporarily patch the abstract class so it will work with your test, and also patching the abstract method to return a specific value -- so that its logic is not under test. Given all that, this is how I would test an abstract class.Given some abstract class:This is how I would test it.
You should test logic, not the implementation. A's do_stuff() method has no logic itself, right? What it does depends on whether you are dealing with B or C. Instead it seems to me that it would make more sense to test B's and C's do_stuff() methods - you know what exactly they should do.
As @chepner has already answered your question, not to digress, but you should try to avoid using abstract classes in Python. Abstract classes don't or rather shouldn't serve much purpose much purpose in Dynamic DuckTyped languages like Python, Ruby etc. In Duck-typing as long as particular instance responds to a particular behavior, one shouldn't enforce it to be a child of a particular abstract class.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
