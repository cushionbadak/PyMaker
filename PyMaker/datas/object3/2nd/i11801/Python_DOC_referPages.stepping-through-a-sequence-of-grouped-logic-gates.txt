Natural Text
I'm performing a simulation of protein-protein interactions. I'm using Python to code logic gates as functions to model protein interactions. My model is basically a series of groups ( to ) containing logic gates (see image). Initially, I set up a  containing my groups, and then for each group a  that contains proteins (nodes) with their starting values (their so-called , which are the starting parameters for the network at ).My question is this: is there some way of iterating through my groups (and their logic gate functions), that begins at group 0 ( in the image) at , and that at  executes groups  and , then executes the three groups ,  and  at , and so on until , where  is the number of iterations wanted?Clarification: Perhaps I am unclear. My problem is this: say that I write a function that steps through my groups, one at a time. It  starts at  at time , and executes, stores and outputs all the  gates in that group, plus all the gates "ahead" of itself ( to  ). When this is done, the function ticks time one step forward  () and goes to  and exeuctes again, including outputting  groups  to . Now is where an error creeps in: for an accurate  model, I need to execute  at time  too, before the  program steps to . How can I make my program output  such  sequential "waves" of execution? I imagine I might need to use  recursion, but I don't know how.See example image of what I mean with "groups" here.Image notes: A and B are switches (the program is supposed to change them, as a way of studying perturbations), C is a constant (never changed). J is the output (mostly for show). D and F are built that way to oscillate, whenever A = 0.I have searched for this on Stack Exchange and Stack Overflow; while I see many questions that tangent my area of interest (1, 2), I don't see any that I determine specifically solve my problems. Thank you for your time.
It seems to me your problem reduces to a couple of nested loops.  If you put all the groups into a list named , and you increment time  in steps from 0 to some value , it looks like this in Python...Each time you increment , one more group gets executed in addition to all the previous ones.  Apologies if I still haven't understood.
For event-driven digital simulation or discrete event simulation, a "time wheel" or "timing wheel" is often used as basic data structure. The wheel is basically an array where every element points to a list or dynamic vector of simulated events which share the same value for "time mod wheelsize". Timewheel as depicted here:A timewheel is more efficient than a priority queue, which could also be used to process the simulation events in ascending order of their timestamps.Pseudo-code of event-driven logic simulation:To handle the grouping of gates, you could treat each group as a super-gate with multiple outputs. It might be necessary to model different latency delays within a given group of gates.Rather than writing your own simulator, you could describe your circuit in a Hardware Description Language like Verilog and use a ready-made simulator.


Answer URL
https://docs.python.org/3/library/queue.html?highlight=priorityqueue#queue.PriorityQueue
