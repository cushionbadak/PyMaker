Natural Text
If we have  and , does it necessarily imply that ?Here is a counter-example, but it's a cheat:And I could not create a counterexample like this:To clarify my question - without overriding equality operators to do something insane, is it possible for a class to exist at two different memory locations or does the import system somehow prevent this?  If so, how can we demonstrate this behavior - for example, doing weird things with reload or ? If not, is that guaranteed by the language or documented anywhere?Epilogue:Finally, this is what clarified the real behaviour for me (and it's supporting the claims in Blckknght answer)So, although code that uses  could break type checking by class identity, it will also break  anyway.  
No, there's no way to create two class objects that compare equal without being identical, except by messing around with metaclass  methods.This behavior though is not something unique to classes. It's the default behavior for any object without an  method defined in its class. The behavior is inherited from , which is the base class for all other (new-style) classes. It's only overridden for builtin types that have some other semantic for equality (e.g. container types which compare their contents) and for custom classes that define an  operator of their own.As for getting two different refernces to the same class at different memory locations, that's not really possible due to Python's object semantics. The memory location of the object is its identity (in cpython at least). Another class with identical contents can exist somewhere else, but like in your  and  example, it's going to be seen as a different object by all Python logic.
I'm not aware of any documentation about how  works for types, but it definitely works by identity. You can see that the CPython 2.7 implementation is a pointer comparison:In CPython 3.5,  doesn't implement its own , so it inherits the default equality comparison from , which is a pointer comparison:


Answer URL
https://docs.python.org/3/library/importlib.html?highlight=reload#importlib.reload
