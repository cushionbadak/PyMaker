Natural Text
I found similar code somewhere:And in another file:Is this a security vulnerability?
In contrast to what you were told on IRC, there definitely is an  that makes  dangerous, so saying it just like that without any restrictions is wrong too.Imagine a custom object that implements  differently. The documentation says on  that it “should look like a valid Python expression that could be used to recreate an object with the same value”. But there is simply nothing that can possibly enforce this guideline.So instead, we could create a class that has a custom  that returns a string which when evaluated runs arbitrary code. For example:Calling  on an object of that type shows that it returns a string that can surely be evaluated:Here, that would just involve making a request to example.com. But as you can see, we can import arbitrary modules here and run code with them. And that code can have any kind of side effects. So it’s definitely dangerous.If we however limit that  to known types of which we know what calling  on them will do, then we can indeed say when it’s impossible to run arbitrary code with it. For example, if that  is a string, then the implementation of   makes sure that everything is properly escaped and that evaluating the  of that object will always return a proper string (which even equals ) without any side effects.So we should check for the type before evaluating it:Note that we do not use  here to do an inheritance-aware type check. Because I could absolutely make  above inherit from :So you should really test against concrete types here.Note that for strings, there is actually no reason to call  because as mentioned above, this will result in  itself. So you could just assign  directly.Coming to your actual use case however, you do have a very big security problem here. You want to create a variable assignment and store that code in a Python file to be later run by an actual Python interpreter. So you should absolutely make sure that the right side of the assignment is not arbitrary code but actually the repr of a string:As you can see, evaluating the  will put the actual content on the right side of the assignment (since it’s equivalent to ). But that can then lead to malicious code running when you import that file. So you should really just insert the repr of the string there, and completely forget about using  altogether.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
