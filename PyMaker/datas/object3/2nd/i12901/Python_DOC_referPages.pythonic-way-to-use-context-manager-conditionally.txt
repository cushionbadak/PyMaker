Natural Text
This is something I think must come up quite often but I haven't been able to find a good solution for it. Say I have a function which may be passed an open resource as an argument (like a file or database connection object) or needs to create one itself. If the function needs to open a file on its own, best practice is usually considered something like:to ensure the file is always closed when the  block is exited. However if an existing file handle is passed in the function should probably not close it itself.Consider the following function which takes either an open file object or a string giving a path to the file as its argument. If it is passed a file path it should probably be written as above. Otherwise the  statement should be omitted. This results in duplicate code:This could of course be avoided by defining a helper function and calling it in both places, but this seems inelegant. A better way I thought of was to define a context manager class that wraps an object like so:This works but unless there's a built-in object that does this (I don't think there is) I either have to copy-paste that object everywhere or always have to import my custom utilities module. I'm feeling like there's a simpler way to do this that I've missed.
However, I prefer, I don't know how pythonic it is, but it's straightforwardthe problem could be solved nicer with singledispatch from python 3.4 
This solution avoids an explicit boolean value like  (that is mentioned in a comment of the answer from @kAlmAcetA), and instead just checks the identity of the input parameter  to the file handle . A try/finally clause is the only way to do this without creating a helper class as a context manager.If you need to do something like this in more than one function then, yes, you probably should create a utility module with a context manager class to do it, like this:Then you could unconditionally wrap like this:


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
