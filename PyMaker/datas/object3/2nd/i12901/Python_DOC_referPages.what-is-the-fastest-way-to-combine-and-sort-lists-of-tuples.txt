Natural Text
I have a list of lists of tuples. Each tuple has the form , e.g.Think of the 's as counts of each string in different blocks of text.What I need to do is produce a list of top- occurring strings together with their cumulative counts. So in the example above,  appears 5 times,  appears twice,  appears 24 times etc. If , then I would have to produce either a pair of parallel lists  and  or a list of tuples . I need to do it as quickly as possible. My machine has lots of RAM so memory is not an issue.I have this implementation:There's gotta be a better way, but what would it be?
Use :Output:The  is basically a dictionary with some added functionality, so looking up a value and adding to it's current count is really fast.  will just turn the list of tuples into a regular dict, mapping strings to numbers, then the  method of  will add those counts (instead of just overwriting the values, as a regular dict would do).Alternatively, a more manual approach using a :As pointed out by John in comments, the  is indeed much faster:
Another option, using :This will get you counts () for each unique character () in the lists, not just the top . This should be pretty fast, but might be heavy on memory.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.defaultdict
