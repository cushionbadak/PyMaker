Natural Text
I have a dictionary:The output is:I want to know why it is not: I do know dict_a is a not sorted object, but still want to know why the key order is a, c, b, e, d, not in the other orders.Thanks
Dictionaries are not just sorted, they are unordered. Dictionaries are, in the deeper level, keys pointing to memory addresses.Let's tackle this another way. In traditional languages you have arrays. Internally, arrays are contiguous memory, i.e.  and  are next to eachother in memory. Dictionaries meanwhile are loose collections of pointers.  and  have no physical relationship they have no order.
See longer discussions earlier:Why is python ordering my dictionary like so?Why is the order in dictionaries and sets arbitrary?(And this should rather have been a comment, but I don't have the reputation to write one...)
As you said, dictionaries are not ordered objects. So no matter what order you add items to it they will be jumbled up. Dictionary do not support indexing, so therefore it has no reason to be in the correct order. I guess it saves memory not having to know what position the items are supposed to be.In a way you can say they have indexing using keys to obtain the associated value and not position as in lists. You can only have a distinct key point to a value as you can only have 1 value at position 0 in a list.More info at Python documentation
Because the regular dictionay does not contains insertion order process. It use arbitrary order. So if you want to use a dictionary as ordered you should use OrderedDict, and it contains insertion order process. But you need to consider your sutition when you use ordered dictionary, because it slower then regular dictionary when you insert item and update it.
If you want to maintain the order of the items in your dictionary, you can use an :Then the order of the dictionary will be maintained:
So, first I thought it was zip that was causing it. However it is not zip since when I enter The output is from left to rightSo I considered maybe it has to do with memory storage between our systems (I'm using windows10). I checked with the same input and got the same outputNow, I checked the documentation at python built-in types. Their code is more what you'd expect where has the output from right to left, (which I'm guessing after zipping the two lists the dictionary adds from popping values and using the update function).No matter how you put in the different dictionaries it still has the same output (dictionaries like sets as OP states order does not matter).The python manual states for built in types If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argumentGiven that the key arugments don't change even with or without changing zip I tried one last thing. I decided to switch the keys and items Which outputted what we expectedOrdered by numbers. My only explanation is that during the actual compiling the letters 'a','b','c','d','e' are being stored as another form (e.g. hexadecimal not ascii) which would change the order of a,b,c,d,e in the list that is used for keys in the dictionary.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
