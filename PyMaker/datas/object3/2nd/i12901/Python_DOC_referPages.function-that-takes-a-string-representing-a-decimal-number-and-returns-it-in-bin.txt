Natural Text
I'm trying to get a function to take a string dec, representing a decimal number, for example "11" and I want said function to return a string, which contains the corresponding binary format, in this case "1011".So this is what I have so far:I'm very new to Python, so I'm not sure how to turn a number into a string (using str()) in the first place and how to make it return the corresponding binary value. Can anyone point me in the right direction?
Assuming you can use  to convert the string to an integer:let's test itBasically, it scans the integer obtained from the string and checks every bit in it.It shifts the number to the right and checks the least significant bit and-ing it with the value  (alternatively we could shift the mask to the left and leave the number unchanged).The result of each bit-check is used to populate a list, which is then reversed and joined to form a string.If using list comprehensions would make you look too cool to be true, use a  loop:Another solution, in case you can use python's builtin  function, would be:Further note to clarify the algorithm (the main assumption is that we are only talking about unsigned integers):Computers use binary representation of data (i.e. bits, zero and ones). Put one after the other, from right to left, they form a number in ascending powers of two, just like decimal digits do.For example the number thirteen (13 is its representation in base ten: 1*10^1+3*10^0) is written as 1101 in binary (1*2^3+1*2^2+0*2^1+1*2^0) and stored in memory as bits within bytes (8-bits).The LSB (Least Significant Bit) is the least powerful bit (binary digit), i.e. the rightmost one in 1101, because it weighs the least in terms of power of two.Python allows a variable size for integers, that is why I use the  method to find out how many bits are necessary to store that number. Other languages (e.g. C) allocate a predefined size to numbers, normally the same (or less) as the width of the registers the CPU provides.
This should work: converts the string  into an integer.  converts it into its binary representation (a string again). The  drops the first two characters, which are only an indicator for the binary representation.
The following will work:You can test it like this:
Here is a function that also allows you to choose the number of digits in the output.  It normally takes an int:  but you can use a string by converting it to int first:


Answer URL
https://docs.python.org/3/library/string.html#format-specification-mini-language
