Natural Text
My python module uses some functions from another module, but I have several implementations of that module interface. How to point out, which one to use?Simple example:A.py:main.py:my_B_impl.py:output:
In python this could be most elegantly done with inheritance:A.py:my_B_impl.py:main.py:output:You can also use the factory pattern to avoid explicit declaration of class  and :A.pymy_B_impl.py:main.py:
What you ask is not directly possible. There is no parameterisation capability built in to Python's module system. If you think about it, it's not clear how such a proposal ought to work: if modules  and  both import module , but they supply different parameters, which parameter is used when  is imported? Is it imported twice? What would that mean for module-level configuration (as in )? It gets worse if a third module  attempts to import  without parameters. Also, the "open-world" idea that you could override any  statement from the outside violates the language-design principle that "the code you wrote is the code that ran".Other languages have incorporated parameterised modules in a variety of ways (compare Scala's object model, ML's modules and signatures, and - stretching it - C++'s templates), but it's not clear that such a feature would be a good fit for Python. (That said, you could probably hack something resembling parameterised modules using  if you were determined and masochistic enough.)Python does have very powerful and flexible capabilities for dynamic dispatch, however. Python's standard, day-to-day features like functions, classes, parameters and overriding provide the basis for this support.There are lots of ways to cut the cake on your example of a function whose behaviour is configurable by its client.A function parameterised by a value:A class parameterised by a value:A class with a virtual method:A function parameterised by a function:There are more options (I'm avoiding the Java-y example of objects invoking other objects) but you get the idea. In each of these cases, the selection of the behaviour (the passing of the parameter, the overriding of the method) is decoupled from the code which uses it and could be put in a different file. The right one to choose depends on your situation (though here's a hint: the right one is always the simplest one that works).Update: in a comment you mention that you'd like an API which sets up the dependency at the module-level. The main problem with this is that the dependency would be global - modules are singletons, so anyone who imports the module has to use the same implementation of the dependency.My advice is to provide an object-oriented API with "proper" (per-instance) dependency injection, and provide top-level convenience functions which use a (configurable) "default" set-up of the dependency. Then you have the option of not using the globally-configured version. This is roughly how  does it.


Answer URL
https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-functions
