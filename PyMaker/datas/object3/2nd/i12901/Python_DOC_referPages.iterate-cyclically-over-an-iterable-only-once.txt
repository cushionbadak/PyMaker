Natural Text
I would like to iterate cyclically over a list (or any other iterable for that matter), and I know you can do this with the  function from  (as shown here), but this function loops indefinitely. I was wondering if there's a smart way to do this only once (and without using the modulo operator). What I mean is that I would like to iterate over an iterable in such a way that the last item is the first one. So I would like to start iterating and stop whenever the iterator reaches the beginning of the iterable.Something like this but less ugly:
Could you explain what you're asking a bit better.What do you mean with  and ?Isn't that just a ?EDIT: what I understood about the problem, was that you want to iterate over all the items starting from any index.If so, then:Another Edit: ¿did I get the question right?If what you're asking is stopping at the first item, then you just have iterate on the iterator for the remaining items (and maybe then rebuild the iterator?).
Sure, but with  and  (for sequences) or  (for iterators):Asterisk is used to unpack argument lists.Answer by Ale (chain without repeat) is even better if the iterable is already assigned to a variable and you need actually two cycles, as opposed to say, eight, or any other finite number.UpdateCode equivalent to the one in the updated question:Which is basically equivalent to the original answer by Tomás Glaría.
Why don't you chain or concatenate the iterable?That seems simple enough


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/itertools.html#itertools.repeat
https://docs.python.org/3/library/itertools.html#itertools.tee
