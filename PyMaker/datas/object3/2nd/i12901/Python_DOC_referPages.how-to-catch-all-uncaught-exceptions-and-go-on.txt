Natural Text
EDIT: after reading the comments and the answers I realize that what I want to do does not make much sense. What I had in mind was that I  have some places in my code which may fail (usually some   calls which may not go though) and I wanted to catch them instead of  putting a  everywhere. My specific problem was such that I would  not care if they fail and would not influence the rest of the code  (say, a watchdog call).I will leave this question for posterity as an ode to "think about the  real problem first, then ask"I am trying to handle all uncaught (otherwise unhandled) exceptions:This outputsSo, while the raise was indeed caught,  it did not work the way I thought: a call to , then resume with the .How can I do so?
You can't do this because Python calls  for uncaught exceptions.In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits. There's no way to resume the execution of the program or "supress" the exception in .The closest I can think of isThere's no  clause, therefore  won't be caught, but the  block is guaranteed to be executed. Thus, the exception hook will still be called and  will be printed, but the  clause will be executed before :If an exception occurs in any of the clauses and is not handled, the  exception is temporarily saved. The finally clause is executed. If  there is a saved exception it is re-raised at the end of the finally  clause.(from here)
Are you after:


Answer URL
https://docs.python.org/3/library/sys.html#sys.excepthook
https://docs.python.org/3/reference/compound_stmts.html#finally
