Natural Text
I'm trying to figure out how to simply start a number of long running shell commands in a non-blocking way, and asynchronously handle their output when they finish, in the order they finish, even if that is another order than they started, using the asyncio python library available in Python 3.4 and forward.I couldn't find a simple example of doing this, even in the asyncio documentation itself, which also seems to be quite low-level.
Use  coroutines, to get shell commands output asynchronously and pass the coroutines to , to get the results in the order they finish:
 is what you are looking for. It will return a  instance, which you can  on, or  with.
I have exactly the same situation as yours. In my case, I am running multiple  command in several repo directories.In the first trial, the code looks like this (and  is ):This function works on one repo, and the caller creates tasks for multiple repos and runs an event  to complete them.Although the program runs and the outcome on disk is correct, the  outputs from different repos are interleaved. The reason is that  could give back control to the caller (the loop scheduler) any time IO blocks (file, network, etc).  A simple change fixes it:Here the rationale is to redirect the  so that it's in one place. In my case, I simply print it out. If you need the output, you can return it in the end.Also, the printing order may not be the same as the start order, which is fine in my case.The source code is here on github. To give some context, that project is a command line tool to manage multiple git repos, which delegates git command execution from any working directory. There are less than 200 lines of code and it should be an easy read.


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.wait
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.communicate
