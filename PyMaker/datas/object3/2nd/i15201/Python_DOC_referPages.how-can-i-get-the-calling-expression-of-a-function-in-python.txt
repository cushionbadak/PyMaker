Natural Text
For educational purpose, I would like to be able to print the complete calling expression of the current function. Not necessarily from an exception handler.After some research, I ended up with this pretty straightforward piece of code:Result:It does exactly what I want, as long as the calling expression stands on a single line. But with multiple lines expressions, it will only get the last line, obviously needing me to dig the calling context even more.Which gives us:How could I properly print the complete calling expression?"Play with the lineno value and apply some regex/eval trick" is not an acceptable answer. I'd prefer something cleaner that just works. I don't mind having to import more modules as long as they are part of the Python 3.x standard library. But nonetheless I would be interested in any reference.
For the curious, here is my final working code for such an unproductive purpose. Fun is everywhere! (almost)I do not mark this as the accepted answer right away, in the hope someone can enlighten us with a better option in a near future...It extracts the entire calling expression as expected. This code assumes the calling expression to be a bare function call, without any magic, special trick or nested/recursive calls. These special cases would have made the detection part less trivial obviously and are out-of-topic anyway.In details, I used the current function name to help locate the AST node of the calling expression, as well as the line number provided by  as a starting point.I couldn't use  to isolate the caller's block, which would have been more optimized, because I found a case where it was returning an incomplete source code. For example when the caller's code was directly located in main's scope. Don't know if it's supposed to be a bug or a feature tho'...Once we have the source code, we just have to feed  to get the root AST node and walk the tree to find the latest call to the current function, and voila!You should get something like this:It still feels a bit messy but OTOH, it is quite an unusual goal. At least unusual enough in Python it seems.For example, at first glance, I was hoping to find a way to get direct access to an already loaded AST node that could be served by  through a frame object or in a similar fashion, instead of having to create a new AST node manually.Note that I have absolutely no idea if this is a CPython specific code. It should not be tho'. At least from what I've read from the docs.Also, I wonder how come there's no official pretty-print function in the  module (or as a side module).  would probably do the job with an additional  argument to allow formatting the output and to debug the  more easily.As a side note, I found this pretty neat and small function to help working with the AST.


Answer URL
https://docs.python.org/3/library/ast.html
