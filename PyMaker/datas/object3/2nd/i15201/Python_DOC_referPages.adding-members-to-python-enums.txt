Natural Text
I understand that this is NOT the standard use case, but I need to dynamically add elements to a  derived class in Python. Notice that dynamically creating the Enum using the functional API is not enough. I need to add elements to an existing enum. How can I do this?Background: For those of you wondering why would somebody want to do this. I am wrapping a library and the values for the enum are defined within the library. I can query the names and values using the library API. But I cannot do it upon initialization as it depends on components which are dynamically loaded by the library upon user request. I could load all components at start up and use the functional API to create the enum upon import but this is time consuming and has side effects.
Enums are immutable, that's rather the point. You can create a new enum that replaces the original instead:but any existing references (say, in other modules) would continue to use the old definition. can be:A string containing member names, separated either with spaces or commas.  Values are incremented by 1 from  (which can be set as a keyword argument and defaults to 1).An iterable of member names (as in the code above).  Values are incremented by 1 from .An iterable of (member name, value) pairs.A mapping of member name -> value pairs.
This is a job for the  function from the aenum library1.A couple sample s: in action:Which gives us:1 Disclosure:  I am the author of the Python stdlib , the  backport, and the Advanced Enumeration ()  library.


Answer URL
https://docs.python.org/3/library/enum.html
