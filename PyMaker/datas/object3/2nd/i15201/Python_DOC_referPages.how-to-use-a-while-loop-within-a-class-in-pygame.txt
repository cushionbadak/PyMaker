Natural Text
I'm trying to make an instance class (Block) spawn when the mouse is clicked and fade out slowly, and i want to be able to spawn an infinite number of blocks that fade out provided that the mouse is clicked fast enough. To do this, I want to initiate the fade() function when the instance is first spawned and set ticks to 255 and set the alpha to ticks.However, when using a while loop, the function completes itself without updating the display because the program gets constrained to the while loop in the fade() function.Can someone help me with calling the fade function 255 times per instance?
I have one solution for you that ought to accomplish what you want it to, but I concede that it does not answer the question exactly as asked.The first and most hindering problems you may be having are that you need to use  and not , since  doesn't work with .It's also possible that you aren't noticing when blocks fade in any solution because  isn't being refreshed prior to . New, faded blocks are being drawn over 'brighter' ones, producing no difference (overlapping blocks notwithstanding). I've added a stopgap to my solution code below that fills the screen with blue, but I imagine you'll want something different. It's marked with a comment.What I would suggest is having each  process its alpha locally during a call from the main loop in your  block before you blit it. This version of your code should give you the result you want, although it does it using just the main loop, rather than parallel loops like you were asking about...There's a small problem with it, which is that vanishing Blocks trigger a 'flicker' in other remaining Blocks (or at least the next one in ) and I'm not sure why or how.While I was looking, I found a few other things you might want to consider:...in :-Consider using  instead of . This way, you can use something like  instead of loading the image for a moment, just to know its size. Since all s use the same graphic, it shouldn't make a difference, and this way, you won't have to reacquire the offset if you change  during runtime!-Consider assigning a copy of 's sprite to each instance instead of using the class's Surface. This will take up more processing power, but only momentarily if you use it as a  instead. For instance:Alternatively, you could use  in  rather than on main and forego the return entirely. Because the alpha is set locally, it won't have to be reset every time  runs, and 's unbound  can stay fresh!Anyway, I hope this solves your problem, even if it does not (exactly) answer your question!
You probably want to use threads. These allow you to run multiple things at once. For your code, change it like this:This also adds an entry point to your program, which was lacking. Also,  wouldn't actually do what you want, as you only  once. I fixed that with a  loop instead. Also, note that you can now just  to break out of the whole game.


Answer URL
https://docs.python.org/3/library/threading.html
