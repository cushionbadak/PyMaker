Natural Text
can somebody help me understand how the timeout parameter works in the subprocess module, and how to properly use the subprocess.TimeoutExpired exception?My usecase is I have a main runner program that runs a child process as part of its repeated routine. The child process is known to hang from time to time. I would like to prevent this hang from holding everything up.I was thinking i could use the timeout parameter to give the child only so long to run. However, in my sample programs below the behavior is not what I expected.  When parent.py is run, it does launch child.py and I can see the output of child.py counting up. After 4s parent.py does get the subprocess.TimeoutExpired exception, however output from child.py keeps coming. This leads me to believe that child.py process has not actually been killed.  The docs seem to suggest it will be killed however:The timeout argument is passed to Popen.wait(). If the timeout expires, the child process will be killed and then waited for again. The TimeoutExpired exception will be re-raised after the child process has terminated.So how might I finish this problem off? Do I need to somehow kill my child process myself when I receive the timeout exception?Thanks for the help.parent.pychild.py
It does appear you need to add a callbefore the  in your parent process -- per the current docs at https://docs.python.org/3/library/subprocess.html#subprocess.Popen the bit you quote only applies to , and that's not what you're using here.
Taken from the documentation:Meaning that you can catch the exception and unless you kill the process (or python) the process will continue executing. In your case since you're doing a Then python itself will be terminated and the Popen object will be garbage collected.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
