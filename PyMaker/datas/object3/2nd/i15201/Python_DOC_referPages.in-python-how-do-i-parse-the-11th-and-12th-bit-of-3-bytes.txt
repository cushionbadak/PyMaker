Natural Text
If I have 3 bytes , which can be represented with the bits , how do I then parse the 11th and 12th bit  most efficiently?Here positions:I have the following code:Which returns:Is there a computationally faster way for me to get the information that doesn't require me to calculate floor and modulo?To put things into context I am parsing this file format:http://pngu.mgh.harvard.edu/~purcell/plink/binary.shtmlUpdate 01feb2015:Thanks to @Dunes I read the documentation on from_bytes and found out that I can avoid doing  by just doing  with . The final function I adapted into my code is . I can't get  to work, so I'm not sure about the relative speeds of functions.
You could try:It doesn't appear to be any quicker though, just terser.However,  is the most time consuming part of that code snippet by a factor 2 to 1. If you can convert your data from  to  once, at the beginning of the program, then you will see quicker bit masking operations.
Is there a computationally faster way for me to get the information that doesn't require me to calculate floor and modulo?Not really. But there is .
The fastest way is to convert your byte string into a numeric type that can be checked using a bitmask:I'm not sure about the timing of your code, because I couldn't get it to work.Update: Turns out there is a faster check() implementation:Update 2: adopting Dunes' nicely terse solution the whole thing becomes a two-liner (note my test runs in Python 2, apparently much slower than Dune's Python3):
You can do binary operations in Python:Convert the byte[s] you care about to an integer - in this case you only care about the middle byte, so we will just parse that:Now you can do binary AND with the & operator:To expand on this more generally, you can convert any arbitrary binary [string] to it's integer value with something like:And now you can apply the bitmask again:


Answer URL
https://docs.python.org/3/library/stdtypes.html#additional-methods-on-integer-types
