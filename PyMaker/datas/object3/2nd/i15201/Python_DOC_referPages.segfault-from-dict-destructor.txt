Natural Text
I have problem with boost python, base object destructor.When object boost::python::dict is created and destroyed in py_init scope then everything is fine.But in py_smth scope dict is only created success, after constructor executrion when local dict descructor is called then I have segmentation fault.Libs version:-boost version 1.54-python 3.4.2And I don't know why...Ok. this is sample code which is not workingmain.cpp file:smth.hBacktrace:Compilation:g++ -std=c++0x -fPIC -I/usr/include/python3.4m -c main.cpp -o app.o  g++ -std=c++0x app.o -lboost_python3 -lpython3.4m
The program is invoking undefined behavior as the  object is being created and destroyed by a thread that does not hold the Global Interpreter Lock (GIL).  If a thread is doing anything that affects reference counting of python managed object, then it needs to have acquired the GIL.  To resolve this, acquire and release the GIL within the  constructor.It may be worth considering using RAII classes to help manage the GIL.  For example, with the following  class, when a  object is created, the calling thread will acquire the GIL.  When the  object is destructed, it releases the GIL.The  constructor could then be written as:Here is an annotated version of the minimal original code.  It accentuates that the caller does not hold the GIL once 's constructor returns.  Thus, both the creation and destruction of the  results in undefined behavior.In Python 3.4, one can also use  function to check if the calling thread holds the GIL.  Per the documentation, it is mainly a helper/diagnostic function.  For earlier versions, one can perform a similar check by directly accessing one of the Python globals:The  function cannot be used for this type of diagnostics, as it issues a fatal error if no threads are holding the GIL, which is a valid state.


Answer URL
https://docs.python.org/3/glossary.html#term-global-interpreter-lock
https://docs.python.org/3/c-api/init.html?highlight=pygilstate_check#c.PyGILState_Check
