Natural Text
I'm writing a Python 2.7 extension module in Cython.  How do I create a Python object implementing the new-style buffer interface that wraps a chunk of memory given to me by a C library?  The chunk of memory is just a string of bytes, not a structure or multidimensional array.  I'm given a  pointer and a length, and some details about how long the pointer stays valid.I can't copy the memoryâ€”that would kill performance for my application.With the old-style buffer objects I could simply use , but I can't seem to find a similarly easy way to produce a new-style buffer object.Do I have to create my own class that implements the buffer interface?  Or does Cython provide an easy way to do this?I've read the Unicode and Passing Strings and Typed Memoryviews pages from the Cython documentation, but the documentation is imprecise and not very complete and there are no examples that look similar to what I want to do.Here's what I've tried ():
You can define an extension type that implements the buffer protocol by defining the  and  special methods.  For example:With the above (named ) you get the following behavior:I don't know if there's an easier way.
Python 3.3 has  C-API function, which creates a  Python object from supplied C buffer.  objects indeed implement new-style buffer interface.If you look into its sources, you'll notice that they're rather simple.It does that same thing as  does, except the formerfills  with  itself.Since the latter one exists in Python 2.7, so why we can't just call  ourselves?Note that, however, that the returned value will have a repr that looks like this: . This is because Cython seems to wrap bare  inside . Since  objects implement buffer interface already, you should probably simply return the result of  call instead.Additionally, you're responsible for managing the lifetime of your buffer.  objects created this way will not free memory automatically. You must do it yourself, ensuring that you only do that once no  references it. In this regard, answer by Richard Hansen is much better alternative.


Answer URL
https://docs.python.org/3/c-api/memoryview.html#c.PyMemoryView_FromMemory
