Natural Text
For some school assignments I've been trying to get pyplot to plot some scientific graphs based on data from Logger Pro for me. I'm met with the errorThis is the program:And the input file is containing this:This is the error message I recieve when I'm running the program:
You have a UTF-8 BOM in your data file; this is what my Python 2 interactive session states is being converted to a float:The  bytes is a UTF-8 encoded U+FEFF ZERO WIDTH NO-BREAK SPACE, commonly used as a byte-order mark, especially by Microsoft products. UTF-8 has no byte order issues, the mark isn't required to record the byte ordering like you have to for UTF-16 or UTF-32; instead Microsoft uses it as an aid to detect encodings.On Python 3, you could open the file using the  codec; this codec expects the BOM at the start and will remove it:On Python 2, you could use the  constant to detect and strip;As the  documentation explains it:As UTF-8 is an 8-bit encoding no BOM is required and any  character in the decoded string (even if it’s the first character) is treated as a .Without external information it’s impossible to reliably determine which encoding was used for encoding a string. Each charmap encoding can decode any random byte sequence. However that’s not possible with UTF-8, as UTF-8 byte sequences have a structure that doesn’t allow arbitrary byte sequences. To increase the reliability with which a UTF-8 encoding can be detected, Microsoft invented a variant of UTF-8 (that Python 2.5 calls ) for its Notepad program: Before any of the Unicode characters is written to the file, a UTF-8 encoded BOM (which looks like this as a byte sequence: , , ) is written. As it’s rather improbable that any charmap encoded file starts with these byte values (which would e.g. map toin iso-8859-1), this increases the probability that a  encoding can be correctly guessed from the byte sequence. So here the BOM is not used to be able to determine the byte order used for generating the byte sequence, but as a signature that helps in guessing the encoding. On encoding the  codec will write , ,  as the first three bytes to the file. On decoding  will skip those three bytes if they appear as the first three bytes in the file. In UTF-8, the use of the BOM is discouraged and should generally be avoided.


Answer URL
https://docs.python.org/3/library/codecs.html#encodings-and-unicode
