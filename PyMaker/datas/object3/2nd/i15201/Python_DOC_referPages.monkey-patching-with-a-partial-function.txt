Natural Text
This question already has an answer here:functools.partial on class method                    1 answer                I'm trying to monkeypatch a method on  from an imported package:Where  and  are in the default call signature of :I'm aware that monkeypatching is not good practice, but we need a workaround while we fix some issues that otherwise can't be tackled.  The above approach works FINE, but we'd like to use partial functions to do this.  For example:The partial function is being called because we need to pass different **kwargs.  But when I try to overload now:I get an error related to the number of arguments passed, but it's very specific to my problem so pasting it might not be helpful...  The error I think is related to the call signature of  taking two positional arguments (), and my partial functions aren't passing a reference to the  and  correctly.  I've tried different constructions like:I'm sorry that I can't produce a minimal working example.  I hoped maybe an expert would just recognize this issue from experience and tell me if what I'm attempting is even possible within the scope of .Thanks
Here's a quick example:This fails with a . The reason for this is that  is a bound method which expects its first argument to be a  instance, but that the  object is not, and hence Python will not add  for you when you call . (This is not entirely correct, but the true reason is quite technical. See the Descriptor How-To linked below.)  Calling  would work. To work around this, you'll have to make  a method again:See also:Closely related: Adding a Method to an Existing Object, functools.partial on class methodLoosely related, on functions vs. methods and when/how methods are bound:Documentation on Method ObjectsHow-To guide for descriptorsBind an unbound method
Replace:with:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partialmethod
