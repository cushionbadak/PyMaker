Natural Text
I found a very strange behavior in the Enum class in Python. So the enumerated type is simple:So I use this enumerated type in for step objects so that they store it in the attribute analysis, as follows:Very simple so far, so when I have a few of these steps in a list, then I try to see the enumerated type and it has been assigned correctly. But they are not equal:which printsThis is not correct, but I have no ideas on how to debug this.UPDATEFollowing the suggestion by @martineau, I created an  instead and that solved my problem. Yet, I don't understand why the normal  doesn't work.
In the comments, you say:The input file contains many steps, and every time I add a new step I  have to set up the analysis typeIf I understand you correctly, you're saying that you create a new  object each time you add a new step. This may be why you're seeing your "bug". The values of two different  objects, despite having the same name and order, do not necessarily compare as equal. For example:But:This happens because the equality operator is not defined for  objects, as far as I can tell, so the default behavior of checking s is used.As @martineau suggests in the comments, one way of avoiding this issue is to instead use the  type, which subclasses , and therefore defines the equality operator in terms of the value of the , not the :Then:Why have  and ?It may seem at first glance that  is always what we want. So what's the point of ?Suppose you want to enumerate two sets of items, say, fruits and colors. Now, "orange" is both a fruit, and a color. So we write:But now:But, philosophically speaking, "orange" (the fruit) is not the same as "orange" (the color)! Shouldn't we be able to distinguish the two? Here, the subclassing of  by  works against us, as both  and  equate to . Of course, as we saw above, comparison of s compares s, not values. Since  and  are unique objects, they do not compare as equal:So that:and we no longer live in a world where some colors are things that you can find in the produce section of your local grocery store.


Answer URL
https://docs.python.org/3/library/enum.html#intenum
