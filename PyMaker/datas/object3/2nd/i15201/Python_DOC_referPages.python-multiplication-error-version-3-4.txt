Natural Text
I have been using Python 2.7 since very soon after it was released. I just recently had problems with 2.7 not doing everything I needed, so I updated (finally). However, after a few days, I am noticing some problems with multiplication. But is it something I'm doing or a problem with Python itself?If I run a loop like this:The output is:When I do a loop like this, however:It prints out the correct numbers. I have even run the first loop with a range of +/- 1,000,000, and about 40% of the numbers end up this way. Why is this happening?
The reason for the difference is that integers can be represented accurately in binary, whereas many decimal numbers cannot (given finite memory).The float  is an example of this:It's not exactly . So multiplying by the float  is not quite the same as dividing by . It gives a different result, as you observe:Of course, neither result here is exactly , it's just that the multiplication by the float  has a slightly greater margin of error than dividing by the integer . The difference between the two is just enough that the division gets rounded to one decimal place, but the multiplication does not.
The problem is the floating point in python. As you can read on that link, python uses to round numbers, because they actually have a lot of digits. But when you multipli by .1 python asumes that you spect to see a point floating number, thats why the issue doesn't happen when you divide by 10.However, you can format your numbers if you wantHope that helps.


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
