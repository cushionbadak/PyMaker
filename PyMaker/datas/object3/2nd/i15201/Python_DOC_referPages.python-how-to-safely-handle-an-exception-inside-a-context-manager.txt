Natural Text
I think I've read that exceptions inside a  do not allow  to be call correctly. If I am wrong on this note, pardon my ignorance.So I have some pseudo code here, my goal is to use a lock context that upon  logs a start datetime and returns a lock id, and upon  records an end datetime and releases the lock:How can I still raise errors in addition to existing the context safely?Note: I intentionally raise the base exception in this pseudo-code as I want to exit safely upon any exception, not just expected exceptions.Note: Alternative/standard concurrency prevention methods are irrelevant, I want to apply this knowledge to any general context management. I do not know if different contexts have different quirks.PS. Is the  block relevant?
The  method is called as normal if the context manager is broken by an exception. In fact, the parameters passed to  all have to do with handling this case! From the docs:Exit the runtime context related to this object. The parameters describe the exception that caused the context to be exited. If the context was exited without an exception, all three arguments will be None.If an exception is supplied, and the method wishes to suppress the exception (i.e., prevent it from being propagated), it should return a true value. Otherwise, the exception will be processed normally upon exit from this method.Note that  methods should not reraise the passed-in exception; this is the callerâ€™s responsibility.So you can see that the  method will be executed and then, by default, any exception will be re-raised after exiting the context manager. You can test this yourself by creating a simple context manager and breaking it with an exception: When you run this code, you should see everything you want (might be out of order since  tends to end up in the middle of tracebacks):


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__exit__
https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
