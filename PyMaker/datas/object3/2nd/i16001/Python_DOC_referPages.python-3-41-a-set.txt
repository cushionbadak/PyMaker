Natural Text
This question already has an answer here:Why is the order in dictionaries and sets arbitrary?                    6 answers                I have two questions about sets.1.So as I read sets are unordered, but when I started experimenting with them I found out that actually there is some kind of ordering thing.As you can see, there is nothing special in this set:But this one is different:I guess, it's because this time I wrote down more closer numbers, and it started to make sense to set those numbers ascending sequence...?2.And the second question is about pop(). I read that there is no way to control which value gets removed with pop() method, it is completely arbitrary. Bet when I use pop() method it always (I never saw differently) takes the first item from the left side in sets. As you can see:So is it really completely arbitrary?
Note that the order of the elements depends (also) on the order of the insertions. You can easily see this when there are collisions:As you can see in  the first element is  and the last is  while in  the first is  and the last is .If there were no collisions:note how the order didn't change. (Well, the hash is used modulus some  so there can be collisions even if the hashes are different, depending on the size of the underlying table).In other words the values aren't enough to determine the order of the elements of a , even if you know how they are implemented. You must also know the order of the insertions.In general s do have a well defined order inside a single interpreter run (due to randominzation in python3.3+), however which order is used is depends on the insertions performed (both the value and the order in which they are done), and is arbitrary, i.e. in python3.5 they can change the order without notice, so you cannot rely on it.They could truly randomize the outputs but this would simply add overhead for no benefit.
Yes, the ordering is arbitrary, by definition. Even if items where stored in sorted order, it would still be arbitrary. "Arbitrary" means that Python doesn't promise to order data in any particular way. Because memory is linear it has to use some ordering, but you should never rely on that ordering because it may be changed without notice. (In fact, in the latest versions of Python, the order of items in a  is partially randomized.)Your second example shows that the order of printing is the same as the order of popping. This makes sense:  walks the items in the order they are stored in memory, and  apparently returns the first item according to that same order. Again, you cannot rely on this: it's an implementation detail and if the Python developers figure out a faster way to do , they're free to break any code that relies on  ordering.If you want to know how this works, read up on hash tables.
It is not completely arbitrary. But it does not matter. We call the set unordered because you, as a user or client of that code, must not depend on a specific order. However, based on details of the implementation of the set, it is likely that there is some order. The same with regards to . It is very likely that the specific implementation of python you use has logic that will lead to clearly deterministic results. However, your code might be used with a python interpreter that uses a different implementation.  is the only guarantee you get from the implementation. To summarize, the documentation gives you a set of guarantees that any compliant python implementation will follow. Additional effects that you observe are implementation details and might change at any time. 


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
