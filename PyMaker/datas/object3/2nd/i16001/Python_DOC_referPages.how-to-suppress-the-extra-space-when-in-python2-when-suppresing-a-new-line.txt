Natural Text
I have this code:I want to output , without  like this:Is it possible?
There are a number of ways of achieving your result. If you're just wanting a solution for your case, use string multiplication as @Ant mentions. This is only going to work if each of your  statements prints the same string. Note that it works for multiplication of any length string (e.g.  works).If you want to do this in general, build up a string and then print it once. This will consume a bit of memory for the string, but only make a single call to . Note that string concatenation using  is now linear in the size of the string you're concatenating so this will be fast.Or you can do it more directly using sys.stdout.write(), which  is a wrapper around. This will write only the raw string you give it, without any formatting. Note that no newline is printed even at the end of the 20 s.Python 3 changes the  statement into a print() function, which allows you to set an  parameter. You can use it in >=2.6 by importing from . I'd avoid this in any serious 2.x code though, as it will be a little confusing for those who have never used 3.x. However, it should give you a taste of some of the goodness 3.x brings.
From PEP 3105: print As a Function in the Whatâ€™s New in Python 2.6 document:Obviously that only works with python 3.0 or higher (or 2.6+ with a  at the beginning). The  statement was  removed and became the  function by default in Python 3.0.
You can suppress the space by printing an empty string to stdout between the  statements.However, a cleaner solution is to first build the entire string you'd like to print and then output it with a single  statement.
You could print a backspace character ():result:
Python 3.x:Python 2.6 or 2.7:
If you want them to show up one at a time, you can do this: is necessary to force the character to be written each time the loop is run.
Just as a side note: Printing is O(1) but building a string and then printing is O(n), where n is the total number of characters in the string. So yes, while building the string is "cleaner", it's not the most efficient method of doing so.The way I would do it is as follows:Now you have a "print function" that prints out any string you give it without returning the new line character each time.The output will be: Hello, World!However, if you want to print integers, floats, or other non-string values, you'll have to convert them to a string with the str() function.The output will be: 2 4
Either what Ant says, or accumulate into a string, then print once:
without what?do you mean?
this is really simple for python 3+ versions you only have to write the following codesjust convert the loop to the following codes, you don't have to worry about other things
WOW!!!It's pretty long time agoNow, In python 3.x it will be pretty easycode:output:More about print() functionHere:you can print multiple values using commas3 values will be separated by '-' character you can use any character instead of that even string like sep='@' or sep='good'by default print function put '\n' charater at the end of outputbut you can use any character or string by changing end variale valuelike end='$' or end='.' or end='Hello'this is a default value, system standard outputusing this argument you can create a output file stream likeby this code you will create a file named output.txt where your outputI am a Programmer will be storedIt's a default value using flush=True you can forcibly flush the stream
as simple as that  


Answer URL
https://docs.python.org/3/whatsnew/2.6.html#what-s-new-in-python-2-6
