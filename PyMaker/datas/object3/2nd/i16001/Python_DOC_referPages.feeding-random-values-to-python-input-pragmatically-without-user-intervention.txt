Natural Text
I am looking to find a way to pass random values to a python code which takes multiple user inputs from the user command line from following python command. I think it could help me in testing.Is there any method/way to automatically (programatically) pass values to these python input() functions without waiting for user input on console ?Also, my code takes multiple inputs from user based on a user input which specifies how many user inputs to fetch. My code:
You can replace the  function with your own. A dedicated package for doing this during testing is part of the Python standard library: .In your test you'd mock  and have it return specific values, or entirely random values:In the above code, a new  object is inserted into your module, masking the built-in  function. When it is called by code in , each time another value from the  attribute list is returned.In this specific test, the strings are not valid numbers; your real tests would use values that can be converted to integers.When testing, always pass in predictable values; you want your unit tests to be solid and repeatable, not fail just some of the time.
Another way to feed data to a program that's expecting console input is to use input redirectionYou just put the data you want to input into a plain text file (eg data.txt), with one input string per line, and then you can do:python myprog.py < data.txtThere are variations on this theme, eg feeding the output of one program into the input of another, as the Wikipedia article explains.The main advantage of this method is that you don't have to modify  in any way, but the disadvantage is that the stuff printed by your input prompts will look a little bit weird because the data read from the file will not be echoed to the console. Also, this technique isn't as flexible as the techniques discussed by Wolf and Martijn Pieters. But it can be very handy.
There is a very obvious way to replace the built-in input function. Just insert two lines at the beginning of the part you dedicated to testing:You asked for randomness that's why I used it - I'd probably start with a constant input:
I would rather replace  when you are doing the testing:Step through the example above at https://dbgr.cc/4u#autoPlay=true
As quamrana suggested in a comment, you can pass your own input function as parameter. Output (depending on  and your input) may look like this:BTW: Testability is only one reason for isolating function logic from specific ways of input and output.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect
