Natural Text
In the ThreadPoolExecutor (TPE), is the callback always guaranteed to run in the same thread as the submitted function? For example, I tested this with the following code. I ran it many times and it seemed like  and  always ran in the same thread. However, it seemed to fail when I removed the  statements, i.e. at least a few  functions and  did not run in the same thread. For a project that I am working on, the callback must always run on the same thread as the submitted function, so I wanted to be sure that this is guaranteed by TPE. (And also the results of the test without the random sleep seemed puzzling). I looked at the source code for executors and it does not seem like we switch the thread to the main thread before we run the callback. But just wanted to be sure. 
The documentation does not guarantee which thread callbacks run in. The only documented guarantee is that callbacks will be run in a thread belonging to the process that added the callback, but that could be any thread, since you're using a ThreadPoolExecutor instead of a ProcessPoolExecutor:Added callables are called in the order that they were added and are always called in a thread belonging to the process that added them.In the current ThreadPoolExecutor implementation, the thread a callback executes in depends on the state of the  at the time the callback is added, and whether or not the  is cancelled. These are implementation details; you should not rely on them, as they may be different in different Python implementations or different versions, and they are subject to change without notice.If you add the callback after the  completes, the callback will execute in whatever thread you called  in. You can see this by looking at the  source:If the state of the  indicates it's cancelled or finished,  is just immediately called in the current thread of execution. Otherwise, it's added to an internal list of callbacks to run when the  is complete.For example:If a future is cancelled by a successful  call, then the thread performing the cancellation immediately invokes all callbacks:Otherwise, callbacks are invoked by the thread that executes the future's task.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.add_done_callback
