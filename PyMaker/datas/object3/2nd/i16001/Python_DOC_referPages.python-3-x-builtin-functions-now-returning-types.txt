Natural Text
While I was away, something strange happened to Python (3.4) builtin functions. Functions like  and  now return objects (not lists or tuples).When were these added to Python?Why were they added?And, most importantly, will this break any code of mine?
Short answer: These are iterables, used to prevent allocating an entire list if only a limited number of elements are required. Since 3.0I guess these are lazy function calls (or coroutines).A lazy function call returns an object that will calculate objects only if needed.For instance say you have a list of  items, but you only need the first  of the map. Then the iterator, will only compute the first three.This can also be used to perform operations on infinite lists. Say you have a list of all prime numbers. This is an iterator. Of course you can never store all prime numbers. You only compute the next one, if that's really necessary.Based on the documentation, I would say at 3.0?In order to emit all items in your iterator and convert them to a list, you can use the  function:Example Infinite list.Say you use the old list  but now you want a list that repeats the given list such that the total length is  instead of doing all the calculus yourself (for instance determining what the last element will be, you can perform):In other words, you can perform operations over the infinite iterator [1,2,3,1,2,3,...]. Don't perform  on such iterators, they will cause an out of memory exception.As shown in the documentation, you can also take the th element:And thus for instance determine whether element  of the infinite Fibonacci sequence is even:You can define in other words a sequence that is able to calculate each element, and still perform arithmetic on the first , the -th,... without having to store all these values explicitly in a list per se.


Answer URL
https://docs.python.org/3/library/functions.html#map
