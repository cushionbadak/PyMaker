Natural Text
For a recent script I had to iterate possible flows through a branching tree. I built a dictionary that would contain the run state for each item in order for me to evaluate. For example:Unfortunately, it started out small but grew to over a dozen states. How could this be reduced to eliminate all of the nested loops?Would a similar answer differ if some of the states had 3 or 4 states instead of 2?Similarly, how would the same issue be affected if each loop was from a function list? I suspected it would be the same. For example:
Once again, it's a problem begging for a solution from .For the first problem, simply use . If you have more states per indicator, either a) every indicator has the same number of states and you can simply change the argument of , or b) different indicators have different numbers of states, in which case you could do something similar to the answer below, replacing the  call with  and having a list of state numbers instead of .For the second one, you probably want to build a list of iterables which you can then use  on.In general, if you ever have a problem that involves any sort of combination or transformation of iterators, you should first look for an  function or recipe.
You want all permutation between all of  dictionary values so you can use  module for find that , which is more pythonic and  and  functions to concatenate them !some of output :


Answer URL
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/itertools.html#itertools-recipes
