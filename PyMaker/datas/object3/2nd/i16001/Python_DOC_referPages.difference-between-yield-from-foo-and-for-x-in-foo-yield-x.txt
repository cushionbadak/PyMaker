Natural Text
In Python most examples of yield from explain it with saying that is similar to On the other hand it doesn't seem to be exactly the same and there's some magic thrown in. I feel a bit uneasy about using a function that does magic that I don't understand. What do I have to know about the magic of  to avoid getting into a situation where the magic does something I don't expect? What advantages does the magic provide, that I should be aware of?
When  returns a regular iterable, the two are equivalent. The 'magic' comes into play when  is a generator too. At that moment, the  and  cases differ materially.A generator can be sent data too, using the  method. When you use the  loop, the  expression 'receives' the sent data; the  generator will never see this. But when you use  the sent data goes straight to whatever  expression the delegated-to generator is currently paused at. In other words,  passes on the sent data so the delegated-to generator can receive it instead.You can also raise exceptions in a generator, with ; with the  loop case, the exception is raised from the  line, while with  the exception is passed on again; the exception is raised inside  instead.Together, this means that  in essence replaces the current generator for the duration of the delegated iteration.The delegated-to generator also gets to communicate with the parent generator, when done the  attribute of the  exception raised is returned as the value of the  expression. You can set the value of that exception by using  in the delegated-to  generator, or you can use  explicitly. was introduced into the language with PEP 380: Syntax for Delegating to a Subgenerator.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator.send
https://docs.python.org/3/reference/expressions.html#generator.throw
