Natural Text
Have noticed someone write an enum like this:And I thought it was a mistake which would make a runtime error because dog's value was actually a tuple.  To my surprise it works, and .  This works:with the empty tuple being converted to integer 0 somehow (possibly argument splatting to a call to ?).  This doesn't work though:We get .  I see this on both python3 and the enum34 backport to python 2.  How/why  or his metaclass implicitly converts tuples to integers? 
I had to look into  to understand what happens. In fact, when you enter a value that is not a tuple, it is converted to , and if a tuple it is left unchanged. Then for a  the actual value is computed with .Ok, now what happens :if you give a simple int : , all is fineif you give a tuple containing a single int : conversion leads to same caseif you give a list :  gives an errorif you give a tuple (string_value, base) example  : you correctly get 31 !But I could not find any trace of it in module documentation, and I thing it must be considered as an implementation detail ...
To support  and  methods, your values are converted to tuples and passed as arguments to the  or  method to produce the values of the enum. To support multiple arguments, any existing tuples are not converted.In Allowed members and attributes of enumerations it states:Note: if your enumeration defines  and/or  then whatever value(s) were given to the enum member will be passed into those methods. See  for an example.And in the Planet example:If  or  is defined the value of the enum member will be passed to those methods.For your case then, this happens:Single non-tuple values are converted to a tuple, so  becomes Tuple values are left untouched, so  or  stay tuples.after which the  method is called as .Now what happens: is . is . is .You can extend this to support arbitrary base integers:As an interesting side note, to make matters just a little more complicated, if you mix in  with , the tuple value is wrapped in another tuple so you can still pass it to  as a single argument.


Answer URL
https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations
https://docs.python.org/3/library/enum.html#planet
