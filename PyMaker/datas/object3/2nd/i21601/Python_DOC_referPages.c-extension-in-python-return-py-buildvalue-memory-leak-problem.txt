Natural Text
I have a huge memory leak problem involving a C-extension I'm developing. In C, I have an array of doubles called  and an int variable called that I want to pass to Python. Well, in my C-extension module I do the following:So in Python i recieve this list and the int like this:Where Pyt_A and Pyt_int are the list and the integer I get from my C-extension "", from the function "" that I described earlier.The problem is that, in Python, I use this  array (so that's why I use  instead of a simple  statement, to do an INCREF in order to save this variable for a moment from the garbage collector) but then I need to dereference it somehow in order to free that allocated memory. The problem is that I use the  function several times, and this produces a memory leakage because I don't know how to dereference the array that I get in python in order to get rid of it.I tried just returning the array by doing a  in the C part of the code instead of the , but that only results in a Segmentation Fault when I try to use it in python (probably because the garbage collector did his work)......what am I missing here? Can anybody help me?
If you look at the documentation for  (http://docs.python.org/3/c-api/arg.html#c.Py_BuildValue) you can see that under the  typecode, it says that the reference count of the passed in object is incremented by one (Note: an earlier section in that page describes the  typecode for , which doesn't increment the reference count, but also isn't relevant here).So, after the call to , the refcount for your list is , but you only want it to be .Instead of returning the result of  directly, save it to a  pointer, decrement the  reference count, then return your result.You should be checking the result of the  call anyway, since you also need to free  in the event that  fails (i.e. returns ).
Thanks for clearing it up Ignacio, now it makes so much sense! Finally, the solution was to, instead of returning directly the Py_BuildValue, do:It worked like a charm!


Answer URL
