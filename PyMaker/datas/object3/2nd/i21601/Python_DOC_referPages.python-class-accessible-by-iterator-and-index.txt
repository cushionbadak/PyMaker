Natural Text
Might be a n00b question, but I currently have a class that implements an iterator so I can do something like but I want to be able to access the class by index as well like How can I do that?Thanks!
Implement both  and  et alia methods.
The current accepted answer from @Ignacio Vazquez-Abrams is sufficient. However, others interested in this question may want to consider inheriting their class from an abstract base class () (such as those found in the standard module ). This does a number of things (there are probably others as well):ensures that all of the methods you need to treat your object "like a ____" are thereit is self-documenting, in that someone reading your code is able to instantly know that you intend your object to "act like a ____".allows  to work correctly.often provides methods auto-magically so we don't have to define them ourselves(Note that, in addition to the above, creating your own  can allow you to test for the presence of a specific method or set of methods in any object, and based on this to declare that object to be a subclass of the , even if the object does not inherit from the directly. See this answer for more information.)Example: implement a read-only, -like class using Now as an example, let's choose and implement an  for the class in the original question. There are two requirements:the class is iterableaccess the class by indexObviously, this class is going to be some kind of collection. So what we will do is look at our menu of  ABC's to find the appropriate  (note that there are also  ABCs). The appropriate  is dependent upon which abstract methods we wish to use in our class. We see that an  is what we are after if we want to use the method , which is what we need in order to do things like . However, an  does not include  the method , which is what we need in order to do things like . So we'll need to use a different . On down the  menu of abstract base classes, we see that a  is the simplest  to offer the functionality we require. And - would you look at that - we get  functionality as a mixin method - which means we don't have to define it ourselves - for free! We also get , , , and . Which, if you think about it, are all things that should be included in any indexed object. If you had forgotten to include them, users of your code (including, potentially, yourself!) might get pretty annoyed (I know I would). However, there is a second  that also offers this combination of functionality (iterable, and accessible by ): a . Which one do we want to use?We recall that the requirement is to be able to access the object by index (like a  or a ), i.e. not by key (like a ). Therefore, we select  instead of .Sidebar: It's important to note that a  is read-only (as is a ), so it will not allow us to do things like , or . If we want to be able do things like that, we need to continue down the menu of s and use a  (or a ), which will require implementing several additional methods.Example CodeNow we are able to make our class. We define it, and have it inherit from . If we try to use it, the interpreter will tell us which methods we need to implement before it can be used (note that the methods are also listed on the Python docs page): This tells us that if we go ahead and implement  and , we'll be able to use our new class. We might do it like this in Python 3:It works!


Answer URL
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
https://docs.python.org/3/library/numbers.html
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping
https://docs.python.org/3/library/abc.html
