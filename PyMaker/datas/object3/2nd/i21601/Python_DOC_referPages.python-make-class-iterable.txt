Natural Text
I have inherited a project with many large classes constituent of nothing but class objects (integers, strings, etc). I'd like to be able to check if an attribute is present without needed to define a list of attributes manually.Is it possible to make a python class iterable itself using the standard syntax? That is, I'd like to be able to iterate over all of a class's attributes using  (or even ) without needing to create an instance of the class first. I think I can do this by defining , but so far I haven't quite managed what I'm looking for.I've achieved some of what I want by adding an  method like so:However, this does not quite accomplish what I'm looking for:Even so, this works:
Add the  to the metaclass instead of the class itself (assuming Python 2.x):For Python 3.x, use
You can iterate over the class's unhidden attributes with .A less horrible way to spell that is:then
this is how we make a class object iterable. provide the class with a iter and a next() method, then you can iterate over class attributes or their values.you can leave the next() method if you want to, or you can define next() and raise StopIteration on some condition.e.g:this class iterates over attribute value of class Book.A class object can be made iterable by providing it with a getitem method too.e.g:now when the object of BenTen class is used in a for-in loop, getitem is called with succesively higher index value, till it raises IndexError.
As of Python 3.4+, making a class iterable is a bit easier using .



Answer URL
https://docs.python.org/3/library/enum.html#creating-an-enum
