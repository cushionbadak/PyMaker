Natural Text
I have two lists of dictionaries:And now for each dict_x in dict_list1, I want to know if there is a dict_y on dict_list2 that contains every key,value from dict_x.I cannot think of another way of doing this other then:
 views can perform quick "is subset" testing via the inequality operators. So:will only return true if every key/value pair in  also appears in .This won't change anything in terms of big-O performance, but it does make the code somewhat cleaner:Note that creating the views costs something (it's just a fixed cost, not dependent on  size), so if performance matters, it may be worth caching the views; doing so for  is free:but some eager conversions would be needed to cache both:You could also collapse the loop using  (which removes the need to  since  short-circuits), so the first (simplest) check could become:This could be further collapsed to a single list comprehension that results in the various matches, but at that point the code is going to be pretty cramped/ugly:though without knowing what you'd really do (as opposed to just printing ) that's getting a little pointless.
Below, I use the fact that the  view implements  operations to check for each  if there exists a , such that  is a subset of 
You can use  and :Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
