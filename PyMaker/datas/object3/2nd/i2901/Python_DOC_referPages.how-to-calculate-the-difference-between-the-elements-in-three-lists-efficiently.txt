Natural Text
I have 3 very large lists of strings, for visualization purposes consider:How can I calculate the difference between this lists in order to get only the elements that are not repeating in the other lists. For example:
With sets:convert all lists to setstake the differencesconvert back to listsThe (possible) problem with this is that the final lists are no longer ordered, e.g.This could be fixed by sorting by the original indicies, but then the time complexity will dramatically increase so the benefit of using sets is almost entirely lost.With list-comps (for-loops):convert lists to setsuse list-comps to filter out elements from the original lists that are not in the other setswhich then produces a result that maintains the original order of the lists:Summary:In conclusion, if you don't care about the order of the result, convert the lists to sets and then take their differences (and not bother converting back to lists). However, if you do care about order, then still convert the lists to sets (hash tables) as then the lookup will still be faster when filtering them (best case  vs  for lists).
Method 1You can arbitrarily add more lists just by changing the first line, e.g. . uses a dictionary comprehension to create sets for each of the lists.  The key to the dictionary is the lists order ranking in .Each set is then differenced with all other sets in the dictionary (barring itself) and then converted back to a list.The ordering of  corresponds to the ordering in .Method 2You can use  to get all unique items (i.e. those that only appear in just one list and not the others), and then use a list comprehension to iterate through each list and select those that are unique.
You can iteratively go thru all lists elements adding current element to set if its not there, and if its there remove it from list. This way you will use additional up to O(n) space complexity, and O(n) time complexity but elements will remain in order.
You can also use a function define purposely to check the difference between three list. Here's an example of such a function:The function  takes three list and checks if an element in the first list  is also in either  or . The deference can be determined by simple calling the function in the right configuration:with outputs:Using a function is advantageous because the code is reusable. 


Answer URL
https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter
