Natural Text
Here is example test:Queston:How I can avoid of duplicate code for setting "return_value" in each test in TestCase?I expect something in "setUp" method or something similar.Is it possible?PS: mock version mock==1.3.0, django version Django==1.8.4
You can set the  right there in the  decorators:(Note: when decorating with  the decorators are applied from the bottom on up, so for  to be passed in as the first argument you need to put the decorator closest to the class definition).The  keyword argument to  is passed to the  constructor. See the  documentation:Like ,  takes arbitrary keyword arguments for configuring the mock object it creates.and the  documentation: takes several optional arguments that specify the behaviour of the  object:[...]: The value returned when the mock is called. By default this is a new  (created on first access). See the  attribute.If you also want to avoid setting the mocks outside of your test case or don't like the additional arguments to each test function, then you you can also can create patchers in the  method, which then are removed again when the test ends by registering a callback via the  method.The patchers are applied for each test, by calling the  methods, which returns the new mock object:Note that the  method will stop all mock patchers that have started. You can also pass the  attributes of each of the patchers:If you have to create a lot of such setups, you could create a helper function that'll take care of the repeated parts:and perhaps use this in a loop over a mapping:The  approach in a  method makes it easier to use inheritance, where a base testcase case is used as the basis for several test cases that all use the same shared mocking setup.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch-object
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup
https://docs.python.org/3/library/unittest.mock.html#patch-methods-start-and-stop
