Natural Text
Imagine we have following list of strings:The output of our program should group each set of anagram and return them all together as a list as following:My current solution finds the first set of anagrams but fails to detect the other two and instead, duplicates the first groups into the list:and the output is:How to fix this issue?EDIT:I have fixed the duplication in appending by appending the  into  outside of second loop:Yet, it does not detect the other two sets of anagrams.
you can do it using defaultdict of python in-built collections library and sorted :to fix your the solution you need add the variable to check is allready added, for exanmple(and the while walk through the  i use enumerate for little performance in the search of the anagrams):
Use 
Using only lists, as requested in the title of the question:The second line  takes all the letters of each  in , sorts them, and recreates a string composed of the sorted letters of the word; it creates a list of all the these sorted letters strings, in the same order as the original sequence of words --> this will be used to compare the possible anagrams (the letters of anagrams produce the same string when sorted)The 3rd line  hold  or  values, to indicate if the corresponding word has been extracted already, and avoid duplicates.The following code is a double loop that for each s_word, determines which other s_word is identical, and uses its index to retrieve the corresponding word in the original list of words; it also updates the truth value of the indices.output:
The way you implemented your function, you are only looking at rotations of the strings (that is you shift a letter from the beginning to the end, e.g. a-t-e -> t-e-a -> e-a-t). What your algorithm cannot detect is single permutations were you only switch two letters (n-a-t -> t-a-n). In mathematical language you only consider the even permutations of the three letter strings and not the odd permutations.A modification of your code could for example be:The output isEdit: modified the code to work with all lengths of strings.
https://docs.python.org/3/library/itertools.html#itertools.permutations after refactoring code and stopping it from producing redundant result  your code still doesn't give expected result as logic for producing anagram is not completely correct


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
