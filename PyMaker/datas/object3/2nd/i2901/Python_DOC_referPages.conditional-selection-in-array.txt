Natural Text
I have following list with arrays:What I want is to mark rows as "1" or "0", conditional on whether the row matches "10" AND "7" OR "10" AND "3".returns What's the correct syntax to get into the array of the array?Expected output:Note:What is ? After training an CountVectorizer/LDA topic classifier in Scikit, the following script assigns topic probabilities to new documents. Topics above the threshold of 0.2 are then stored in an array.Thanks!
You need to use  combined with , and avoid using  and  which are binary operators in python.output:If you want it as a list as the edited question shows:result:
Your input data is a plain Python list of Numpy arrays of unequal length, thus it can't be simply converted to a 2D Numpy array, and so it can't be directly processed by Numpy. But it can be process using the usual Python list processing tools. Here's a list comprehension that uses  to test if a row contains any of (3, 7, 8). We first use simple  testing to see if the row contains 10, and only call  if it does so; the Python  operator will not evaluate its second operand if the first operand is false-ish.We use  to see if any row item passes each test.  returns a Boolean value of  or , but we can pass those values to  to convert them to 0 or 1.outputI've just performed some  tests. Curiously, Reblochon Masque's code is faster on the data given in the question, presumably because of the short-circuiting behaviour of plain Python ,  & . Also, it appears that  is faster than , even though the docs recommend using the latter in new code.Here's a new version that's about 10% slower than Reblochon's. Of course, the true speed on large amounts of real data may vary from what my tests indicate. And time may not be an issue: even on my slow old 32 bit single core 2GHz machine I can process the data in the question almost 3000 times in one second.hpaulj has suggested an even faster way. Here's some timeit test info, comparing the various versions. These tests were performed on my old machine, YMMV.typical outputNice work, hpaulj!


Answer URL
https://docs.python.org/3/library/timeit.html#module-timeit
https://docs.python.org/3/library/timeit.html#timeit.Timer.repeat
