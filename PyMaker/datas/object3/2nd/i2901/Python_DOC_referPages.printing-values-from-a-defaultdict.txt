Natural Text
I'm writing some code that looks like this:This will give me a defaultdict with a key of the  and a list of all the inventory there, which is information that has data in it in a further dictionary like received date, transferred date, serial number, state, etc.  So it is a dictionary that maps to  multiple values inside of it. So what we have is dictionary of a list of dictionaries. I want to print some, but not all of those values. So to the end of the function above I add:and I getI also have tried using :and I getCan anyone help show me my error? I looked for similar questions, but most of the dictionary questions are about printing a 1:1 value, not a 1:many value.
Your first bit of codeis throwing an error because  iterates through the keys of a dictionary, setting each key as . When you try to access , you're telling python to access the character in position  of string . However, you have used a string (), so python is telling you that it expects an integer.The second snippetmakes the same error, but  in this case is a tuple of . The more common way to use this syntax is to access both keys and values, as follows:returnsIf you want to iterate through the data within each of the nested dictionaries, do so as if you were accessing a top-level item, i.e.Output:If you want to access data in the nested dictionary directly, you can do so using by key:Output:If you have a list of dictionaries, you can iterate through it using , where each  will be dictionary:Output:or access a value directly:Output:Put all this together to access data within a dictionary of lists of dictionaries:Output:If in doubt, I highly recommend adding  statements to your code to work out what each variable looks like (is it a string? a tuple? a dictionary? etc.). It will help you immensely with understanding and debugging your code.All of this information can be gleaned from reading the python documentation on dictionaries and lists.
I think the problems is not quite understanding the nature of the data being iterated over in your  loops. And perhaps not understanding what inside the  parameter. is a . When iterating over a  as shown above one gets  a sequence of all the  in the dict. In your dict those keys are "apparently" . I say that by reverse engineering the error you're showing:That's the error one gets when running:So... first issue for you is to understand the data in  sequence. The elements apparently have a 'store_site', but that value there is a string, not some higher level data structure. In your second example:The items() method on a  generates a sequence of key/value tuples. It does not generate a sequence of keys (what I think you equate to "stores"). And that explains why  fails as it does.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
