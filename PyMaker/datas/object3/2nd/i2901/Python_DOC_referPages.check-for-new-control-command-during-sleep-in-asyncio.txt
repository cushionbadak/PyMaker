Natural Text
I'm looking for a pythonic asyncio "pattern" for a construct that appears quite often in my programs.A worker task performs some operations usually consisting of several steps. The details of those operations are controlled by commands sent from a controlling function to the worker task. There are sleeps between individual steps and the worker is able to accept new commands only during these sleeps. A new command should wake up the worker task from sleep immediately.The commands represent a desired target state. I'm using a Queue for communication. However, there can be only one target, that's why the commands do not build a real queue, but the last one replaces all previous ones. The queue has one item at most.Currently I'm using other async library. I want to switch to standard . An example:I could rewrite that form of  to an asyncio code:but I think maybe there is a simpler solution. OTOH If you have asyncio experience and think a Queue with timeout is the way to go, that would help me too.I tried to search, but could not find proper keywords for my problem (same holds for the question title).
There is certainly nothing wrong with your timeout implementation. Methods on asyncio synchronization primitives intentionally don't support explicit timeout arguments, leaving it to the caller to use cancellation or  to time out when needed.As for a single-element queue  I would consider replacing it with a , which is not only designed to hold a single value, but is also very lightweight in asyncio  given that it is the basic abstraction used to build almost everything else.Instead of , you'd write , and instead of , you'd write . The only important difference is that a future is one-shot, so after getting an item, you need to assign a new future to .


Answer URL
https://docs.python.org/3/library/asyncio-sync.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future
