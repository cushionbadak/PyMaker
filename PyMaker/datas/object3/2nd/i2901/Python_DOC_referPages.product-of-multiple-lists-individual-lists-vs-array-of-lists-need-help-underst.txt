Natural Text
This question already has an answer here:How to apply itertools.product to elements of a list of lists?                    2 answers                Forewarning: I'm new to Python and I'm teaching myself, so this question may just have a trivial solution--any help (and patience) is very much appreciated!Okay, big picture is that I want to get the union of all possible intersections of a variable number of lists. I'm not really sure how to explain the general-case problem I'm running into, so for the sake of this question, I'll just use an example with 3 lists (but again, the actual number of lists will vary):Suppose we have the following:My questions are:Why doesn't ?Using , how can I get the same output as ?For more context:Ultimately, the goal is to get the union of all possible combinations of the intersections of the lists. I.e.;Except, because I don't know how many lists I'll have (in my code, they're being appended onto  by a loop), I want line  to be something like , not .
1) Why doesn't list(product(array))=list(product(l1,l2,l3))?Well the  takes in iterables and then produces the Cartesian product amongst them. So when you do list(product(array)) you are basically trying to take cartesian product of a single list(?) and notice the commas in the output of the same signifying cartesian product between one list and empty iterable.2) Using array, how can I get the same output as list(product(l1,l2,l3))?Notice your problem boils down to being to convert the  list to  while calling the function.We have the  operator for this, So for the answer just do:From the python documentation:If the syntax *expression appears in the function call, expression  must evaluate to an iterable. Elements from this iterable are treated  as if they were additional positional arguments; if there are  positional arguments x1, ..., xN, and expression evaluates to a  sequence y1, ..., yM, this is equivalent to a call with M+N positional  arguments x1, ..., xN, y1, ..., yM.Since you must mentioned that you are learning on your own,this is also covered in the python tutorial, in a section titled Unpacking argument lists.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
