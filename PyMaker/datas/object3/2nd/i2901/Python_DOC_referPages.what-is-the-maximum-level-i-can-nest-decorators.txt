Natural Text
TLDRHow many functions can I wrap the actual decorator under? By actual decorator I mean the function that accepts the target function the as argument.When passing arguments to a decorator in Python we do something like the following:This code is taken from this answer. Notice that there is a wrapper around the actual decorator that handles the arguments that are given to the actual decorator.The weird part is that you can decorate the target function with wrapper rather than use the decorator like so:So my question is that how many functions can I wrap around the actual decorator?Take the code below as an example:Calling  printsSo is there a depth limit of just 2? Or am I doing something wrong?Let me know if any other details from my side is required.
Try this and you will see the difference between "foo" in level0 and level1.Decorators are just syntactic sugar.in your case python will dohowever if your code change to thispython will do
Decorator "overwrites" the function. It calls a function pointer obtained from a function call that takes as an argument the function. That function pointer is than called with the argument passed to original function.What you are doing, you are creating a function which returns a decorator and then calling that function, like this:You can't get more then two levels this way. You can create a function which will return a function which will return a decorator, and so on, but I would interpret that as function nesting, not decorator nesting.As to the questions:What is the maximum level I can nest decorators?I guess this is how you nest decorators:The python language reference only says decorators can be nested, I couldn't find any limit. For fun&testing I have created the following shell script:Was able to go up to more than 400000 levels, when my pc started to lag. Probably the levels of decorators are depended on how much memory your system has and how good your python interpreter is.@edit:Just discovered that calling a function pointer returned by a function inside a decorator statement is not allowed. However you still can obtain a pointer to the decorator, and then overload the function.The decorator regular expression (from python reference) is:The   are optional and may be specified only once. Probably we could make a simple workaround to do the calls ourselves:And that's still function nesting.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
