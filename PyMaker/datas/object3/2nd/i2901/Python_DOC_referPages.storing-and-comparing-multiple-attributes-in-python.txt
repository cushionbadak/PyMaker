Natural Text
I'm trying to build a Survivor game that will allow me to compare stored characters against one another individually and as members of a tribe. I can sort of do it with one attribute, but can not figure out the best way to expand it to multiple attributes.  Example:What I'd like to do is have each Survivor house their own attribues, and then use their names as a key that can then be pulled into similar scenarios as above. Something like this: Any advice?
Your first problem is that you've got the syntax wrong:In Python, you call a constructor like a normal function, with parentheses:Your second problem is that you can't  a dict with just a list of keys; you need to update it with a dict (or a list of key-value pairs). How else could it know what values you want? So:But there's really no reason to create an empty dict just to  it; just create it in one go:If having to write each name twice seems repetitive, you can fix that by using a dict comprehension:Or, alternatively, maybe you don't want to create these variables in the first place; you can just store the objects straight in the dict:Your third problem is that you're getting the comprehension syntax wrong:You have to put the whole comprehension inside the parentheses passed to . Also, you want to sort them by strength, so you want the strength to come first, not send, in the pair. And finally, if your tribe is a dict, you can't just loop over the dict—that just gives you the keys. You need to loop over the values:But notice that this will give you back not just the strongest survivor, but a pair of two values, the strongest survivor's strength and the survivor. You could just throw away the one you don't want:… but it's probably better to use a key function, as explained in the Sorting HOWTO:
This should work:To remove the strongest player from TribeA, use this:
You can define a method used determine the overall rating of a , presumably the  of all attributes, and use it as a  for  to determine the strongest :This outputs:


Answer URL
https://docs.python.org/3/howto/sorting.html#sortinghowto
