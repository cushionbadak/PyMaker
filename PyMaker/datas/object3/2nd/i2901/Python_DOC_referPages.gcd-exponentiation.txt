Natural Text
I have been trying to determine a shorter method for calculating gcd((a^n + b^n), abs(a-b)). I noticed that, if I were to calculate (using the above formula) say a = 100 and b = 4, starting from 1 and ending at n (a loop), at a certain point, the answer becomes constant. For a = 100, b = 4 and n = 100, I create a loop from 1 to n, and at each point, I apply the formula, the first answer (n = 1) is 8, thereafter it is 32 till when n becomes 100. For optimization, I break out of the loop once two equal consecutive numbers are found and the latest number (32 here), becomes the answer. Does anyone know a straightforward formula for calculating gcd((a^n + b^n), a-b), or better still, my primary concern, a global formula for finding (a^n + b^n)Note:1. 1<=a,b,n<=10^12(a^n - b^n) can be simplified as https://math.stackexchange.com/questions/406703/how-to-simplify-an-bn. But can't find a version for (a^n + b^n)Following Rory Daulton's anwser, I have implemented Exponentiation by Squaring shown below in a functionMy Python Code for the above explanation follows suite:Exponentiation by Squaring
I see two ways to speed up your code.First, use the mathematical fact that(if  is not zero). So you do not need to compute  in full, you just need it modulo . And you can do that by finding  and  then adding those modulo .Now, find  by the exponentiation by squaring method. That involves a loop that executes  times. In each pass through the loop, take the remainder mod  to keep your numbers low and speed up the calculations.So there is your algorithm. Find  and  by exponentiation by squaring and modulus at each step. Then add them and take the modulus again. Finally, find the GCD of that value with . In some situations, such as  prime, I can see some shortcuts. The modulus of the powers of a number do repeat, as you note. However, finding out just when they repeat is a non-trivial problem for large values of , especially if  is composite and hard to factor. Unless you have some additional information on the values of  and your other parameters, I suggest you not use the repetitions. If the values of  and  are small and known in advance (as in your example of  and , the repetitions are more attractive and you could pre-compute the values of powers modulus .Rather than use this code, you should probably use Python's built-in pow function. See here for documentation. Hat tip to @DSM.By request, here is my routine for exponentiation by squaring modulo a given number. There are some variations that could be done, of course. This version does no error checking on the parameters an does a little bit-twiddling for minor efficiencies.
Try to optimize your exponentiation using this method:


Answer URL
https://docs.python.org/3/library/functions.html#pow
