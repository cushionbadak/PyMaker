Natural Text
I want to do something like  which returns:How do I do this in Python?
The previous answers have used % formatting, which is being phased out in Python 3.0+.  Assuming you're using Python 2.6+, a more future-proof formatting system is described here:http://docs.python.org/library/string.html#formatstringsAlthough there are more advanced features as well, the simplest form ends up looking very close to what you wrote:
You can do it three ways:Use Python's automatic pretty printing:Showing the same thing with a variable:Use 'classic' string substitutions (ala C's printf). Note the different meanings here of % as the string-format specifier, and the % to apply the list (actually a tuple) to the formatting string. (And note the % is used as the modulo(remainder) operator for arithmetic expressions.)Note if we use our pre-defined variable, we'll need to turn it into a tuple to do this:Use Python 3 string formatting. This is still available in earlier versions (from 2.6), but is the 'new' way of doing it in Py 3. Note you can either use positional (ordinal) arguments, or named arguments (for the heck of it I've put them in reverse order. Note the names 'one' ,'two' and 'three' can be whatever makes sense.)
You're looking for string formatting, which in python is based on the sprintf function in C.For a complete reference look here:    http://docs.python.org/library/stdtypes.html#string-formatting
To print elements sequentially use {} without specifying the index(works since python 2.7 and python 3.1)
You haven't formulated yourself very commendably, but I'll venture a guess this is what you're looking for:
I think that this combination is missing :P
You have lot of solutions :)simple way (C-style):Use str.format()Use str.Template()You can read PEP 3101 -- Advanced String Formatting
PEP 498 which landed in  added literal string interpolation, which is basically a shortened form of .You can now do:Common other uses I find useful are:Which will produce:
If you don't know how many items are in list, this aproach is the most universalIt is mouch simplier for list of strings


Answer URL
https://docs.python.org/3/library/string.html#string.Template.template
https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals
