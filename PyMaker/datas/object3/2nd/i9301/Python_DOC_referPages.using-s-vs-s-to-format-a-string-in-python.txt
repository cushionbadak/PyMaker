Natural Text
I'm really curious about  format string in Python 3. The documentation says  is conversion and that  is .It also says  will apply , but it doesn't say anything similar about . I think there's no significant difference between them, but I want to be sure. Can anyone clarify these?Some code example:It's still confusing, but let me wrap up with my own (layperson's) words. is always .Use  if you want convert the object into  before formatting. means that the object(or the converted object) will be treated as  during some internal formatting process. It's the default .Is anything wrong here?
, and its brethren  and  apply ,  and  respectively before interpolation and formatting. These are called conversion flags, and are part of the Format String Syntax spec, not the per-field formatting spec applied to values when interpolating:The conversion field causes a type coercion before formatting. Normally, the job of formatting a value is done by the  method of the value itself. However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting. By converting the value to a string before calling , the normal formatting logic is bypassed.Bold emphasis mine. only applies afterwards to the conversion result (or the original object if no conversion had been applied), and only if the  method for the type of object supports that formatting option. Usually, only objects of type  support this formatter; it's there as the default, mostly because the Format Specification Mini-Language allows for the existence of a type character and because the older   -style formatting had a  format. If you tried to apply the  type to an object that doesn't support it, you'd get an exception.Use  (or  or ) when you have an object that is not itself a string and either doesn't support formatting otherwise (not all types do) or would format differently from their ,  or  conversions:Note: all formatting specified by the format spec are the responsibility of the  method; the last line does not apply the alignment operation in the  formatting spec, the  method only used it as literal text in a formatting operation (using a  conversion here).For the converted values, on the other hand, the  method is used and the output is aligned to the right in a 50 character wide field, padded with spaces on the left.
You're unlucky you used strings as the value to be formatted. Using pretty much any other object you'd get how these aren't the same.In (as much as I can) layman's terms:The absence or existence of the conversion flag specifies the type of the value we going to format and, by extent, who's  we'll be calling. As Martjin points out, by using this we can bypass certain behavior and treat the value more generically (like a string). It comes in three different flavors that correspond to the three different ways an object can choose to represent itself as a string.The type specifier, coupled with other specifiers, specifies how the type we have should finally be presented. For strings there isn't a rich set of options (a string is presented as is) but, for types like s, you can have different presentations.I do think, though, that  is probably a confusing name to give this specifier.
From the documentation, Python String Formatting:The field_name is optionally followed by a conversion field, which is preceded by an exclamation point '!', and a format_spec, which is preceded by a colon ':'.So no, it's not the same.For example:If you want to print a float as a string, you need a conversion (float â†’ string).If you don't use the conversion mark, you will get an error.


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/library/string.html#formatspec
https://docs.python.org/3/library/string.html#format-specification-mini-language
https://docs.python.org/3/library/stdtypes.html#old-string-formatting
