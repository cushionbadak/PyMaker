Natural Text
I am trying to understand the following behavior and would welcome any references (especially to official docs) or comments.Let's consider a list:This works as expectedBut I am surprised the following is empty:Consequently, I am surprised the following is not emptyespecially given thatand also thatis empty.
The fact thatshould not surprise you! It is fairly obvious that you can slice a list from the last to the fourth-last element in backwards steps, but not from the first element.Inthe  must be  in order to resolve to an index  for the result to contain an element.The syntax of slice is simple that way: means, the slice starts at  (here: ) and ends before  (or the index referenced by any negative ).  resolves to , ergo a slice starting at  and ending at  is of length , contains no elements. , however, will resolve to the actual , resulting in a slice of length  starting at .Leaving  empty in a backward slice is more intuitively understood:
I was pointed to the reference implementation (hattip to the Anonymous Benefactor) and found that it is fairly straightforward to understand the behavior from there. To be complete, IMHO this behavior is unintuitive, but it nevertheless is well defined and matches the reference implementation.Two CPython files are relevant, namely the ones describing list_subscript and PySlice_AdjustIndices. When retrieving a slice from a list as in this case, list_subscript is called. It calls PySlice_GetIndicesEx, which in turn calls PySlice_AdjustIndices.Now PySlice_AdjustIndices contains simple if/then statements, which adjust the indices. In the end it returns the length of the slice. To our case, the linesare of particular relevance. After the adjustment,  becomes  and the length 1 is returned. However, when  is passed to adjust, it becomes  of length 0. In other words,  in this case.It is amusing to note that there is the following comment in PySlice_AdjustIndices:Finally, note that the handing of the situation in question is not described in the python docs.
go from 0 to 2 using -1 steps?


Answer URL
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
