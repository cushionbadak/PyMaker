Natural Text
One of the things that has confused me when studying best software engineering practices is how to handle methods in classes that don't alter or otherwise interact with the state.In this article I like how the author discusses the separation of data and logic. But in trying to apply this in practice, I have cases where I have an odd-out function outside the class that doesn't change the state of the object but isn't really relevant outside the object.For example:vs.Is there a general software engineering principle or best practice (from any reasonable paradigm) that suggests which of these approaches should be followed? For multiple reasons my intuition tells me that the top one is better, except doing this:  bothers me, so I am unsure. I did some reading but didn't find a clear answer on best practices for cases like these.
That is what a staticmethod is good for.A static method does not receive an implicit first argument.You can use it just like a function:and in your method:
This isn't really a full answer, but I don't quite have a high enough rep to just make a comment.  I'm no expert on OOP best practices, but my gut feeling is that the colour analysis function would be best implemented as an interface, because that way the specifics of the implementation can be left up to the given class, but there can be some degree of standardisation across classes.Turns out Python doesn't really do interfaces though apparently (according to this).  Others who know better about the SOLID principles could advise better than I.


Answer URL
https://docs.python.org/3/library/functions.html#staticmethod
