Natural Text
I am using PyCharm (Python 3) to write a Python function which accepts a dictionary as an argument with .In the IDE,  is colored yellow. Moving the mouse over it shows a warning.Default arguments value is mutableThis inspection detects when a mutable value as list or dictionary is  detected in a default value for an argument.Default argument values are evaluated only once at function definition  time, which means that modifying the default value of the argument  will affect all subsequent calls of the function.What does this mean and how can I resolve it?
If you don't alter the "mutable default argument" or pass it anywhere where it could be altered just ignore the message, because there is nothing to be "fixed".In your case you only unpack (which does an implicit copy) the "mutable default argument" - so you're safe.If you want to "remove that warning message" you could use  as default and set it to  when it's :Just to explain the "what it means": Some types in Python are immutable (, , ...) others are mutable (like , , , ...). If you want to change immutable objects another object is created - but if you change mutable objects the object remains the same but it's contents are changed.The tricky part is that class variables and default arguments are created when the function is loaded (and only once), that means that any changes to a "mutable default argument" or "mutable class variable" are permanent:PyCharm probably shows this Warning because it's easy to get it wrong by accident (see for example “Least Astonishment” and the Mutable Default Argument and all linked questions). However, if you did it on purpose (Good uses for mutable function argument default values?) the Warning could be annoying.
You can replace mutable default arguments with . Then check inside the function and assign the default:This works because  evaluates to  so we then assign an empty dictionary.In general you may want to explicitly check for  as other values could also evaluate to , e.g. , , , , etc, are all . If your default isn't  and is  for example, then you wouldn't want to stomp on  being passed as a valid parameter:
One way to remove the warning is to change {} to dict().  This will retain the existing method logic, requiring only a change in the parameter defaults.  As follows:
To rephrase the warning: every call to this function, if it uses the default, will use the same value.  So long as you never change that value, the fact that it is mutable won't matter.  But if you do change it, then subsequent calls will start with the modified value, which is probably not what you want.One solution to avoid this issue would be to have the default be a immutable value, and set the parameter to  if that default is used:


Answer URL
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element
