Natural Text
This question already has an answer here:How to properly ignore exceptions                    11 answers                How not to stop the execution of other function in python in case of Exception/Error                    3 answers                Generally,  clauses are used to handle errors and exceptions, catch them and act accordingly. But suppose, there is a script and the user is not sure where the exceptions can be raised. Now instead of applying try/except everywhere, is there any module or decorator which can catch any exception to occur and simply let the program not break?Edit : This can not be a duplicate of try/except question. Of course I am aware of it and can apply it to all the possible places I know the exception may occur. I'm specifically looking for some module or a decorator which deals with exception handling. A builtin function which is called just before an error is raised would solve the problem too.
The proper way to handle exceptions is to use a / block surrounding the piece of code in which the exception could be raised. Sometimes this means wrapping your  function (or whatever function runs the entire program) in a / block. That's fine. If you want to ignore the exception entirely, you can use , which is also fine and saves you a couple lines of code.Now, if for some reason you need to react to uncaught exceptions and you are not able to surround the relevant piece of code with /, you can set  to a function that accepts the exception info as arguments and implements whatever handling you want, e.g. logging the exception. This is a fairly crude mechanism and I wouldn't recommend using it under normal circumstances, though. (And as far as I know, it cannot prevent the exception from being raised, if that's what you're asking - it can only give you a chance to run some of your own code before the stack unwinds and the program ends.)


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
https://docs.python.org/3/library/sys.html#sys.excepthook
