Natural Text
The create_connection function from Python 3's asyncio module takes as it's first parameter a protocol factory. The documentation has the following note:Note protocol_factory can be any kind of callable, not necessarily a class. For example, if you want to use a pre-created protocol instance, you can pass lambda: my_protocol.So you can pass in an instance using a  like so:An alternative would be to define  to  such that you could just pass the instance without defining a lambda.Is there any reason to use a lambda as the documentation suggests over defining  on the class?
Notice the difference between these two lines:Here is the echo client example from asyncio docs, modified to work with the Option #1:If you choose to use Option #2, you will need to implement  which works on instances of .Although this might work OK for , since your  will be called only once, this does not work well for the  parameter of :Here  is called multiple times to create new  instances.  Using  and defining  will reuse only one instance of !
Short answer: The lambda should be used in preference because it is more readable - it can be understood easily without having to scrutinise the Protocol class code. Explanation:BaseEventLoop.create_connection yields from BaseEventLoop._create_connection_transport ref, which instantiates a protocol object from the Protocol class as follows:We can present the problem in a simplified manner without the event loop code to demonstrate how the Protocol is being instantiated:So, "protocol = Protocol()" needs to work with the parameters. This can be by using a lambda: Or the alternate suggestion that the OP suggested would be making the object a callable:Functionally both will work, and thus it is a question of what is better practice. I would argue that the lambda approach is better, because looking the final line  makes it clear that we are passing to the create_connection function that returns an object when called, whereas passing an a callable object makes the code less readable - because one needs to scrutinise the Protocol class for ascertain that the instantiated object is also a callable entity.Udi answer to this question says that using , will not work with  (which as an aside is not what the question asked) as it will reuse one instance of an instantiated object. This observation is correct, but what is omitted from that answer is that the callable can easily be adjusted to work with the . For example:The bottom line is using  should work as will the lambda approach. The reason why lambda should be used in preference is for readability reasons.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_connection
https://docs.python.org/3/library/asyncio-protocol.html#tcp-echo-server-protocol
