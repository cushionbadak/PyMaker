Natural Text
We can (shallow) copy a  by using :We can also (shallow) copy it by using :and now  will be . I understand how these slices work after reading the answers in Explain Python's slice notation.But, my question is, is there any difference between these two internally? Is one more efficient than the other in copying or do they do exactly the same things?
Absolutely no difference between them, at least in Python 3. You can check the byte-code produced for each of these using  if you'd like: Byte-code emitted for :while, byte-code emitted for :as you can see, they're exactly the same. Both load some 's (the two 's) for the values of  and  used for building the slice () and apply it. s are the default for these as stated in the docs for  in the Standard Type hierarchy:Special read-only attributes:  is the  bound;  is the upper bound;  is the  value; each is  if omitted. These attributes can have any type.Use , it's less key-strokes.It's actually interesting to note that in Python  the byte code generated is different and, due to less commands for  it might be slightly more performant:While, for :Even though I haven't timed these (and I won't, the difference should be tiny) it seems that, due to simply less instructions needed,  might be slightly better.This similarity doesn't of course exist only for lists; it applies to all Sequences in Python:similarly for others.
Per the Python language reference section 6.3.2, Subscriptions, the inner expression for a sequence must evaluate to either an integer or a slice. Both these examples produce the same slice, and are therefore identical. There are also numerous other slices that have the same effect, by explicitly stating defaults (,  or more, ). 


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
https://docs.python.org/3/reference/expressions.html#subscriptions
