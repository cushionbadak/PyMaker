Natural Text
I'm trying to convert a timestamp with a specific timezone(Europe/Paris) to a datetime format in UTC. From my laptop it works with the solution below but when I'm executing my code in a remote server(AWS- Lambda function in Ireland), I've a shift of 1 hour because the local timezone of the server is different from mine. How can I have a code who can work on my laptop and at the same time in a remote server(dynamically handle local timezone)? Thanks
I am not sure what  is, but I think what you want is For completeness, here is another way to accomplish the same thing by referencing 's  time zone:(I added in the  and  conditions to mimic the  interface.) Note that I'm including this just in case you have a similar problem that needs to make reference to the local time zone for some reason - if you have something that will give you the right answer in UTC, it's best to use that and then use  to get it into whatever local zone you want it in.How it worksSince you expressed that you were still a bit confused about how this works in the comments, I thought I would clarify why this works. There are two functions that convert timestamps to  objects,  and : will give you a naive  that represents the time in UTC. You can then do  (or any other  implementation - , , etc) to get an aware datetime and convert it to whatever time zone you want., when  is not , will give you an aware  equivalent to . If  is , instead of converting too the specified time zone, it converts to your local time (equivalent to ), and then returns a naive .Starting in Python 3.6, you can use  on naive datetimes, and the time zone will be assumed to be system local time. So if you're developing a Python >= 3.6 application or library, you can use  or  as equivalents.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp
https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp
https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone
