Natural Text
First, I've sorted out my issue when I found this:in python: iterate over each string in a listOriginally I was getting what I thought was weird behavior when I would iterate over a "list" with a single string.  In those instances, the string was being treated as a group of characters, and the iteration was sequentially returning each character in the string.Being new to Python, I did not realize there's a somewhat strict difference between using [] and () to define a list.  My list definitions were using ().  However, when the lists would contain more than one string, the iteration was return each complete string sequentially.  To illustrate:Output:But if i do this, that is, add a second string to the () group:It gets treated as if I used [] (as you're supposed to).  Output:Now, I get the expected behavior either way if I use [] to define my lists, so that's what I'm doing now.  I just thought this was interesting behavior.Can someone point me towards some documentation that explains the way Python interprets parens, especially relative to strings? I didn't see anything in the Python docs for data structures:https://docs.python.org/3/tutorial/datastructures.htmlThanks!
That's because parentheses don't define lists.  They sometimes define tuples , which are similar to lists, but even in the code you provide, that is not a tuple.Is a parenthesized expression.  It's value is .Is a 1-tuple that contains a single element, the string  
In the first case, the parenthesis are ambiguous. Do you mean a single element tuple or do you mean a parenthesized expression? The Python parser assumes parenthesized expression. You then are iterating over the string:This is in contrast to creating a list literal or set literal with a single string literal since there is no ambiguity what you mean:In the second case, you are creating a tuple with two elements and then iterating over that tuple:If you want the first case to act like the second case, add a comma to create a one element tuple:Or, you do not have to use parenthesis to define a tuple:The tuple constructor in this case is the comma which allows this idiom in Python for swapping values without a temporary variable:(And please do not use  as a variable name. That redefines the  function...)


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
