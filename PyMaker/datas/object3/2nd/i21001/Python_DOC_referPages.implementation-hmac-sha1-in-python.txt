Natural Text
I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.I am wondering how to implement this in Python?
Pseudocodish:Signature errors usually reside in the base-string, make sure you understand this (as stated by the OAuth1.0 spec here: http://tools.ietf.org/html/draft-hammer-oauth-10#section-3.4.1).The following inputs are used to generate the Signature Base String:HTTP Method (for example GET)Path (for example http://photos.example.net/photos)Parameters, alphabetically, such as (line breaks for readability): Concatenate and URL encode each part and it ends up as:
For the love of God, if you do ANYTHING with oauth, use the  library for Python! I tried to implement HMAC-SHA1 using the  library in Python and it's a lot of headaches, trying to create the correct oauth base string and such. Just use requests and it's as simple as:Requests AuthenticationRequests Oauth Library
It's already there Keyed-Hashing for Message Authentication
Finally here's an actually working solution (tested with Python 3) utilizing oauthlib.I use the first OAuth step given as an example in the official RTF 1:The value for  is what we would like to calculate.The following defines what we want to sign:And here we go:
There are multiple python libraries available at the oauth website, but if you're just interested in a specific implementation you could have a look at one of them.
You can try following method.
In Python 3.7 there is an optimized way to do this. HMAC(key, msg, digest).digest() uses an optimized C or inline implementation, which is faster for messages that fit into memory.Return digest of msg for given secret key and digest. The function is  equivalent to HMAC(key, msg, digest).digest(), but uses an optimized C  or inline implementation, which is faster for messages that fit into  memory. The parameters key, msg, and digest have the same meaning as  in new().CPython implementation detail, the optimized C implementation is only  used when digest is a string and name of a digest algorithm, which is  supported by OpenSSL.https://docs.python.org/3/library/hmac.html#hmac.digest


Answer URL
https://docs.python.org/3/library/hmac.html#module-hmac
https://docs.python.org/3/library/hmac.html#hmac.digest
