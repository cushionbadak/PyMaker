Natural Text
The following piece of codeworks fine in Python 2, but in Python 3 I get an error:It only works for  and .
You need to provide the rich comparison methods for ordering in Python 3, which are  , , , , , and . See also: PEP 207 -- Rich Comparisons. is no longer used.More specifically,  takes  and  as arguments, and needs to return whether  is less than . For example:(This isn't a sensible comparison implementation, but it's hard to tell what you were going for.)So if you have the following situation:This will be equivalent to:which would return .  would return  if the points are equal and  otherwise. The other methods work analogously.If you use the  decorator, you only need to implement e.g. the  and  methods:
This was a major and deliberate change in Python 3.  See here for more details.The ordering comparison operators (, , , ) raise a  exception when the operands don’t have a meaningful natural ordering. Thus, expressions like ,  or  are no longer valid, and e.g.  raises  instead of returning . A corollary is that sorting a heterogeneous list no longer makes sense – all the elements must be comparable to each other. Note that this does not apply to the  and  operators: objects of different incomparable types always compare unequal to each other. and  no longer accept the  argument providing a comparison function. Use the  argument instead. N.B. the  and  arguments are now “keyword-only”.The  function should be treated as gone, and the  special method is no longer supported. Use  for sorting,  with , and other rich comparisons as needed. (If you really need the  functionality, you could use the expression  as the equivalent for .)
In Python3 the six rich comparison operatorsmust be provided individually. This can be abbreviated by using . This however turns out rather unreadable and unpractical most of the time. Still you have to put similar code pieces in 2 funcs - or use a further helper func.So mostly I prefer to use the mixin class  shown below. This reestablishes the single  method framework, which was and is quite clear and practical in most cases. One can still override selected rich comparisons.Your example would just become:The PY3__cmp__ mixin class:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/reference/datamodel.html#object.__gt__
https://docs.python.org/3/reference/datamodel.html#object.__le__
https://docs.python.org/3/reference/datamodel.html#object.__ge__
https://docs.python.org/3/reference/datamodel.html#object.__eq__
https://docs.python.org/3/reference/datamodel.html#object.__ne__
