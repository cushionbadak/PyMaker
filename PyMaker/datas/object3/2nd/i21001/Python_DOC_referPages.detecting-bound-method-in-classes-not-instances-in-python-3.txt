Natural Text
Given a class  with a function or method , I use  (where  is an instance of ) to find out if  is bound method or not. Is there a way to do the same directly at the class level (without creating an object)? inspect.ismethod does not work as this:results in this (in Python 3):I guess I need to check if the function/method is member of a class and not static but I was not able to do it easily. I guess it could be done using  as shown here How would you determine where each property and method of a Python class is defined?but I was hoping there was another more direct way.
There are no unbound methods in Python 3, so you cannot detect them either. All you have is regular functions. At most you can see if they have a qualified name with a dot, indicating that they are nested, and their first argument name is :This of course fails entirely for static methods and nested functions that happen to have  as a first argument, as well as regular methods that do not use  as a first argument (flying in the face of convention).For static methods and class methods, you'd have to look at the class dictionary instead:That's because  is the actual  instance, before binding to the class.
Could you use ? Running it with your class  I get:Combining the results of  with the results of  may enable you to infer what you need to know.Edit: dm03514's answer suggests you might also try :Though as Hernan has pointed out, the results of  change in python 3.
Since inspect.ismethod returns True for both bound and unbound methods in Python 2.7 (ie., is broken), I'm using:It also works for methods of classes implemented in C, e.g., int:But is not very useful in that case because inspect.getargspec does not work for functions implemented in C.is_bound_method works unchanged in Python 3, but in Python 3, inspect.ismethod properly distinguishes between bound and unbound methods, so it is not necessary.


Answer URL
https://docs.python.org/3/glossary.html#term-qualified-name
https://docs.python.org/3/howto/descriptor.html
