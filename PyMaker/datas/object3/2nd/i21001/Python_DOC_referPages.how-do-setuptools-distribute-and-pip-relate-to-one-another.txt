Natural Text
I've been teaching myself Python through the book "Learn Python The Hard Way" (2nd Edition).  In exercise 46 it told me to read up on Pip, Distribute, and a few other packages.The documentation for pip was clear enough.  It allows me to install/uninstall, and upgrade packages.  Reading the documentation for distribute, it basically seems to do the same thing:Easily download, build, install, upgrade, and uninstall Python packagesWhat's the difference between pip and distribute, and how do they relate to one another?
[2014-10 TL;DR: is dead, use , the new , and, for binary distributions, .  More below.][Original answer]Distribute is was a fork of the older setuptools so nearly all comments that follow apply equally to Distribute and setuptools.  Setuptools was an attempt to fill in a number of holes in the even older Python standard library package, Distutils.  Setuptools added functions like automatic downloads of packages via a command-line interface, , and some level of dependency management.  However, a segment of the Python community is of the opinion that setuptools is too intrusive and has too much behind-the-scenes magic for some of its features. is a higher-level interface on top of setuptools or Distribute.  It uses them to perform many of its functions but avoids some of their more controversial features, like zipped eggs.   also provides features not available in , like an uninstall command and the ability to define fixed sets of requirements and reliably reproduce a set of packages.  There is a more complete feature comparison here.Why are there so many components (and there are more, like )?  Lots of reasons: solutions must work across all of the major platforms on which Python is supported (i.e. Unix-y, Windows, Mac OS X), so building and installation present a complex set of problems; like many open-source projects, Python is essentially all-volunteer and many developers just aren't all that interested in packaging and installation issues; there is a natural conservatism about adding major new unproven features to the standard library; differences in opinions, etc etc.At the moment, there is a project underway to provide a replacement for Distutils and possibly for some of the higher-level add-ons.  It is planned to be released in the Python 3.3 standard library as the  package and as an add-on for older versions of Python as .To summarize, the current relationship is:UPDATE (2012-07): Prior to feature code cutoff for Python 3.3, it was decided that  was not quite ready yet for release in the standard library so it has been removed from the 3.3 release.  Work will continue on  which is available via PyPI and on what will be included in the standard library for Python 3.4.UPDATE (2014-10): There have been further changes in the world of Python packaging since this answer was last updated.Most importantly, since mid-2013, the rift between  and has been healed and development activity has been mergedinto a new  project.   is nowdeprecated and no longer maintained; use the new  insteadbut don't use its  as an installer. has become the de-facto and blessed installer tool (for Pythonpackages not otherwise provided by your platform's package manager)either in- or outside of virtual environments ( or ).Instead of the old  bdist ,  havebecome the blessed binary distribution format for Python packages.As of Python 3.4, a version of  with  supportis now shipped with the official  binary installers andsource packages and it is anticipated that  will also beincluded in the next maintenance release of Python 2.7 (2.7.9). and  are now dormant.More details in the new Distributing Python Modules section of the Python 3 docs and the new Python Packaging User Guide.


Answer URL
https://docs.python.org/3/library/venv.html
https://docs.python.org/3/library/ensurepip.html
https://docs.python.org/3/distributing/index.html
