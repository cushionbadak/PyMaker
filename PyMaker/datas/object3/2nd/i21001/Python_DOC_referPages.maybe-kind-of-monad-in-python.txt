Natural Text
Trying to find a way to clean up some of my code.So, I have something like this in my Python code:Having read a tutorial on Haskell's monads (in particular Maybe), I was wondering if it's possible to write it in another way.
EAFP
Exploit the short-circuit behavior and that a custom object is true by default and  is false:
Python does not have a particularly nice syntax for monads. That being said, if you want to limit yourself to using something like the  monad (Meaning that you'll only be able to use ; you won't be able to make generic functions that deal with any monad), you can use the following approach:Then, make all of the methods that currently return  return either  or  instead. This allows you to write this code:You can of course adapt the lambdas to store the intermediate results in variables; it's up to you how to do that properly.
Have you checked PyMonad ?https://pypi.python.org/pypi/PyMonad/It not only includes a Maybe monad, but also a list monad, a Functor and Applicative functor classes. Monoids and more.In your case it would be something like:Easier to understand and cleaner than EAFP.

I think this is a perfect fit for:getattr(object, name[, default])I find  essential when working with objects and attributes. It's pretty much the equivalent to .
More "Pythonic" than trying to implement a different paradigm (not that it is not interesting and cool) would be to add intelligence to your objects so that they can find their attributes (and whether they exist at all), by themselves.Bellow is an example of a base class that uses your "find" method and the correlation of the Id  attribute names and class names to work with your example - I put in  minimal Person and Company classes for a search for the company to work:And on the console, after pasting the code above:With this  your code above could just be:


Answer URL
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/stdtypes.html#dict.get
