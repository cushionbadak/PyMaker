Natural Text
If I have a list of strings for example:What should I do in order to find anagrams in that list? For example .I tried using for loop for each string and I used  in order to ignore strings in different lengths but I can't get the right result. How can I go over each letter in the string and compare it to others in the list in different order?I have read several similar questions, but the answers were too advanced. I can't import anything and I can only use basic functions.
In order to do this for 2 strings you can do this:  As for the iteration on the list, it is pretty straight forward
Create a dictionary of (sorted word, list of word). All the words that are in the same list are anagrams of each other.Or:
One solution is to sort the word you're searching anagrams for (for example using ), sort the alternative and compare those.So if you would be searching for anagrams of 'rac' in the list , your code could look like this:
Sort each element then look for duplicates. There's a built-in function for sorting so you do not need to import anything
There are multiple solutions to this problem:Classic approachFirst, let's consider what defines an anagram: two words are anagrams of each other if they consist of the same set of letters and each letter appears exactly the same number or time in both words. This is basically a histogram of letters count of each word. This is a perfect use case for  data structure (see docs). The algorithms is as follows:Build a dictionary where keys would be histograms and values would be lists of words that have this histogram.For each word build it's histogram and add it to the list that corresponds to this histogram.Output list of dictionary values.Here is the code:Note that constructing  is , while sorting each word is  where l is the length of the word.Solving anagrams using prime numbersThis is a more advanced solution, that relies on the "multiplicative uniqueness" of prime numbers. You can refer to this SO post: Comparing anagrams using prime numbers, and here is a sample python implementation.

Solution in python can be as below:First create a duplicate list of same words with indexes representing their position indexes.Then sort the individual strings of the duplicate list Then sort the duplicate list itself based on strings.Finally print the original list with indexes used from duplicate array.The time complexity of above is O(NMLogN + NMLogM) = O(NMlogN)
I'm using a dictionary to store each character of string one by one. Then iterate through second string and find the character in the dictionary, if it's present decrease the count of the corresponding key from dictionary.

Simple Solution in Python:
This one is gonna help you:Assuming input is given as comma separated stringsconsole input:abc,bac,car,rac,pqr,acb,acr,abc
Most of previous answers are correct, here is another way to compare two strings.The main benefit of using this strategy versus sort is space/time complexity which is n log of n. 1.Check the length of string2.Build frequency Dictionary and compare if they both match then we have successfully identified anagram words
This works fine: 
A set is an appropriate data structure for the output, since you presumably don't want redundancy in the output. A dictionary is ideal for looking up if a particular sequence of letters has been previously observed, and what word it originally came from. Taking advantage of the fact that we can add the same item to a set multiple times without expanding the set lets us get away with one for loop.A faster way of doing it takes advantage of the commutative property of addition:
Calculate each word length. Calculate each word ascii character sum.Sort each word characters by their ascii values and set ordered word.Group words according to their lengths.For each group regroup list according to their ascii character sum.For each small list check only words ordered. If ordered words same these words anagram.Here we have 1000.000 words list.1000.000 words 
here is the impressive solution.funct alphabet_count_mapper:for each word in the file/list1.create a dictionary of alphabets/characters with initial count as 0.2.keep count of all the alphabets in the word and increment the count in the above alphabet dict.3.create alphabet count dict and return the tuple of the values of alphabet dict.funct anagram_counter:1.create a dictionary with alphabet count tuple as key and the count of the number of occurences against it.2.iterate over the above dict and if the value > 1, add the value to the anagram count.run it with file path as command line argument
You convert each of the character in a word into a number (by ord() function), add them up for the word. If two words have the same sum, then they are anagrams. Then filter for the sums that occur more than twice in the list.
Logic:Start from first word and reverse the word.Check the reversed word is present in the list.If present, find the index and pop the item and store it in the dictionary, word as key and reversed word as value.
If you want a solution in java, 


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
