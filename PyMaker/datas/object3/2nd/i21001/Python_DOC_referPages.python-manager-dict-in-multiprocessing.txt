Natural Text
Here is a simple multiprocessing code:Output I get is:Why don't I get  as the output?
Here is what you wrote:Here is what you should have written:
I think this is a bug in manager proxy calls. You can circumvent avoiding call methods of shared list, like:
The reason that the new item appended to  is not printed is stated in Python's official documentation:Modifications to mutable values or items in dict and list proxies will  not be propagated through the manager, because the proxy has no way of  knowing when its values or items are modified. To modify such an item,  you can re-assign the modified object to the container proxy.Therefore, this is actually what happens:Reassigning  with a new list, or even with the same list once again, after it was updated, triggers the manager to propagate the change:The line  would have worked as well.Alternatively, Since Python 3.6, per this changeset following this issue, it's also possible to use nested Proxy Objects which automatically propagate any changes performed on them to the containing Proxy Object. Thus, replacing the line  with  would correct the issue as well:Unfortunately, this bug fix was not ported to Python 2.7 (as of Python 2.7.13).NOTE (running under the Windows operating system):Although the described behaviour applies to the Windows operating system as well, the attached code snippets would fail when executed under Windows  due to the different process creation mechanism, that relies on the  API rather than the  system call, which isn't supported.Whenever a new process is created via the multiprocessing module, Windows creates a fresh Python interpreter process that imports the main module, with potentially hazardous side effects. In order to circumvent this issue, the following programming guideline is recommended:Make sure that the main module can be safely imported by a new Python interpreter without causing unintended side effects (such a starting a new process).Therefore, executing the attached code snippets as is under Windows would try to create an infinite number of processes due to the  line. This can be easily fixed by creating the  and  objects inside the  clause and passing the  object as an argument to , as done in this answer.More details on the issue may be found in this answer.



Answer URL
https://docs.python.org/3/whatsnew/3.6.html#multiprocessing
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.list
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods
