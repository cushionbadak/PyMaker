Natural Text
I find particularly difficult reading binary file with Python. Can you give me a hand?I need to read this file, which in Fortran 90 is easily read byIn detail, the file format is:How can I read this with Python? I tried everything but it never worked. Is there any chance I might use a f90 program in python, reading this binary file and then save the data that I need to use?
Read the binary file content like this:then "unpack" binary data using struct.unpack:The start bytes: The body: ignore the heading bytes and the trailing byte (= 24); The remaining part forms the body, to know the number of bytes in the body do an integer division by 4; The obtained quotient is multiplied by the string  to create the correct format for the unpack method:The end byte: 
In general, I would recommend that you look into using Python's struct module for this. It's standard with Python, and it should be easy to translate your question's specification into a formatting string suitable for .Do note that if there's "invisible" padding between/around the fields, you will need to figure that out and include it in the  call, or you will read the wrong bits.Reading the contents of the file in order to have something to unpack is pretty trivial:This unpacks the first two fields, assuming they start at the very beginning of the file (no padding or extraneous data), and also assuming native byte-order (the  symbol). The s in the formatting string mean "unsigned integer, 32 bits".
You could use , which can read data from both text and binary files. You would first construct a data type, which represents your file format, using , and then read this type from file using .
To read a binary file to a  object:To create an  from bytes 0-3 of the data:To unpack multiple s from the data:



Answer URL
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/stdtypes.html#int.from_bytes
https://docs.python.org/3/library/struct.html
