Natural Text
I get the following error when I'm reading my .pkl files on spyder (python 3.6.5):The context:My program is made of one file: In the program, a class  is defined as well as many functions. A simplified overview of the program is provided below:The function  will return a list of tuples of the form:With, of course, the Signal_i_k being an object . This list will be saved in .pkl format. Moreover, I'm doing a lot of iteration with different parameters for the  functions. Many iterations will use past computed data as a starting point, and thus will read the corresponding and needed .pkl files.Finally, I'm using several computers at the same time, each of them saving the computed data on the local network. Thus each computer can access the data generated by the others and use it as a starting point.Back to the error:My main issue is that I never have this error when I start my programs by double-clicking the file or by the windows cmd or PowerShell. The program never crashes throwing this error and runs without apparent issues.However, I can not read a .pkl file in spyder. Every time I try, the error is thrown.Any idea why I got this weird behavior?Thanks!
When you dump stuff in a  you should avoid pickling classes and functions declared in the main module. Your problem is (in part) because you only have one file in your program.  is lazy and does not serialize class definitions or function definitions. Instead it saves a reference of how to find the class (the module it lives in and its name). When python runs  a script/file directly it runs the program as the  module (regardless of its actual file name). However, when a file is loaded and is not the main module (eg. when you do something like ) then its module name is based on its name. So  gets called .When you are running from the command line you are doing the former, and the module is called . As such, pickle creates references to your classes like . When  tries to load the pickle file it gets told to import  and look for . But, spyder's  module is the module that is used to start  and not your  and so pickle fails to find . You can inspect the contents of a pickle file by running ( is prints a description of each command). From this you will see that your class is being referenced as .And you'll see something like:SolutionsThere are a number of solutions available to you:Don't serialise instances of classes that are defined in your  module. The easiest and best solution. Instead move these classes to another module, or write a  script to invoke your program (both will mean such classes are no longer found in the  module).Write a custom derserialiserWrite a custom serialiserThe following solutions will be working with a pickle file called  created by the following code (in a file called ):The Custom Deserialiser SolutionYou can write a customer deserialiser that knows when it encounters a reference to the  module what you really mean is the  module.This is the easiest way to load pickle files that have already been created. The program is that it pushes the responsibility on to the deserialising code, when it should really be the responsibility of the serialising code to create pickle files correctly.The Custom Serialisation SolutionIn contrast to the previous solution you can make sure that serialised pickle objects can be deserialised easily by anyone without having to know the custom deserialisation logic. To do this you can use the  module to inform  how to deserialise various classes. So here, what you would do is tell  to deserialise all instances of  classes as if they were instances of  classes. You will need to register a custom serialiser for each class


Answer URL
https://docs.python.org/3/library/copyreg.html#copyreg.pickle
