Natural Text
How can I do the following in Python?Essentially:replace all the Nones with empty strings, and thencarry out a function.
You can totally do that, it's just an ordering issue:In general,And, for list comprehensions with  conditions only,Note that this actually uses a different language construct, a conditional expression, which itself is not part of the comprehension syntax, while the  after the  is part of list comprehensions and used to filter elements from the source iterable.Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the ternary operator  that exists in other languages. For example:
One way:Although then you have:Or you can use a lambda inline.
Here is another illustrative example:It exploits the fact that  evaluates to  for  and to  for all other values generated by the function . Therefore the list comprehension evaluates as follows:
The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions.Here is an example that shows how conditionals can be written inside a list comprehension:Note that in the first list comprehension for , the order is: value for expression1 if expression2and in the last list comprehension for , the order is:value1 if expression1 else value2 for expression2I always find it hard to remember that value1 has to be before if and value2 has to be after else. My head wants both to be either before or after. I guess it is designed like that because it resembles normal language, e.g. "I want to stay inside if it rains, else I want to go outside"
The other solutions are great for a single  /  construct. However, ternary statements within list comprehensions are arguably difficult to read.Using a function aids readability, but such a solution is difficult to extend or adapt in a workflow where the mapping is an input. A dictionary can alleviate these concerns:
(venv) $ python list_comp.py Affichage de my_list [0, 1, 2, 3, 4, 5] Affichage de my_result_list [0, 5, 4, 7, 8, 9]So, for you:


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator
