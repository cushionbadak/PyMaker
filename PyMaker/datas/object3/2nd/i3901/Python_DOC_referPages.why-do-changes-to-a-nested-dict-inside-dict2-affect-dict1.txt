Natural Text
This question already has an answer here:assigning value in python dict (copy vs reference)                    2 answers                I don't understand these cases:In the case above the content of d1 is changed after the variable content is updated.However in this case d1 is not altered even if the variable content was changed. I don't understand why... any idea?
see shallow vs deep copy.The copy here is a shallow copy so the first level entries are copies but the nested structures are references.A shallow copy constructs a new compound object and then (to the    extent possible) inserts references into it to the objects  found in    the original. A deep copy constructs a new compound object and then,    recursively, inserts copies into it of the objects found in the  original.
The key difference between your two snippets is that  is a completely different operation than . In the first case, you're modifying the inner dictionary by changing its  key. In the latter case, you're replacing the value in the dictionary without modifying it.It's confusing when everything's a dictionary, so let's replace the dictionaries with variables and instances of a class:The key points to note here are that doesn't make a copy of the Person; similar to how  doesn't make a copy of the  dict. modifies the Person; similar to how  modifies the inner dict.The equivalent of your 2nd snippet looks like this:This time, no object is ever modified. All we're doing is overwriting the value of the  variable, exactly how  overwrites the value of the  key in your dict.If you don't want the changes in the inner dicts to be reflected in other dicts, you have to copy them with :
If we replace the  with a simple assignment:We get:(Which is different from what  does in your example.) This is because  accepts an iterable (e.g. a dictionary) and copies the key value pairs inside. It's equivalent to doing:And of course, the  values are immutables and so their reassignment does not affect the original.


Answer URL
https://docs.python.org/3/library/copy.html
https://docs.python.org/3/library/copy.html#copy.deepcopy
