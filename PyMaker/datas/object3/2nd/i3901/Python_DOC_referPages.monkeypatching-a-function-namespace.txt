Natural Text
Inspired by "Define @property on function", I tried to override a function's namespace:Why can  resolve, but  can't?
Short version: Because CPython's  function isn't subclass friendly (it's not intended to be, to be clear;  functions are all specialized to  itself, not generalized mappings).Long version: Retrieving an attribute invokes . For classes which don't explicitly define a custom  or  (and  does not), this ends up calling . Assuming nothing is found on the class itself,  (well, the private API function that implements it) retrieves  as normal, then calls  to retrieve the value.  explicitly uses 's C-level internals to perform the access, bypassing any custom  you might have defined. So your custom  is never invoked; for all practical purposes, your  subclass is just a .I originally hoped that you might be able to make this particular case work via the officially supported  hook, but it turns out that's only invoked when the equivalent of  () is invoked, not through the C level direct access APIs like  (which don't go through  at all).Basically, CPython seems to have made a choice to prioritize performance over complete flexibility here. Any  subclass used as  will be accessed as if it were a plain  (which might get a little screwy if the subclass is doing some magic to store one value while pretending it stores a different value, since the magic is bypassed), and all mappings that aren't  subclasses are rejected at time of assignment (you get a  when you try to assign them to ).
The first sentence in the documentation for  reads:  "Called to implement evaluation of self[key]."  You are assuming (hoping) that the evaluation of  performs the explicit operation , but it doesn't.  If you put a print statement in the first line of  you will see that this function never gets called by your code.I'm not sure why this is, but I suspect that it's for performance reasons.  In any case, I can't think of a good use case for replacing a function's .  There are way too many ways that can fail.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__missing__#object.__missing__
