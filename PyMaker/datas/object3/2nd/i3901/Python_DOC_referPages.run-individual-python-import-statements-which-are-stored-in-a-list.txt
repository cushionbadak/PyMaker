Natural Text
I have a list of libraries i'd like to import, but some of them may not be in the filesystem.Basically, i want to do something like this:The reason i want to do this, is because some of the libraries in the list may not be in the filesystem, and i don't want one failure to make the entire file to throw an import error.How do i do this?
You can try like this:Explanation:Iterating over each element from the list using  you can execute those  statements. So if there is no error it will import that modules
First, you probably don't actually want to do this—and if you explained why you think you do, we could probably show you a better way to do it.But there are some cases where it might be reasonable. For example, I could imagine a  file that pre-loads a bunch of modules for an interactive session; as an interactive user, you can then look at what got loaded and decide what to do.If you only need a handful of these, it's probably best to do them explicitly:For anything other than interactive use, you're probably going to actually want something like  rather than , unless you want to wrap a bunch of / tests all over your code.If you want to make each one a 1-liner instead of a 4-liner, you can do that using , at the cost of repeating yourself:If you need to do a whole bunch of these, you may be better off writing a wrapper function, using  again:If you have a dynamically-generated list of modules, you need to figure out how you want to store the results, because presumably you also need to access them dynamically. One obvious possibility is to stick them into a dict:… or, if you want to skip missing modules instead of using :… or, if this is for something quasi-static, like the interactive example, maybe a namespace, so you can just access :… or, if you want to dump them into globals, so you can access them as , that's just as simple:If you really need to build a list of statements rather than a list of modules, use :But notice that, besides having to repeat yourself a lot more this way than with the other dynamic options, you also can't do anything sensible like  without parsing the statement inside the  block, because otherwise you don't have the name . That isn't exactly hard in this case, but it adds even more complexity, and code smell…


Answer URL
https://docs.python.org/3/library/importlib.html#examples
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/importlib.html#examples
https://docs.python.org/3/library/functions.html#exec
