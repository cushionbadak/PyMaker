Natural Text
In recent Python 3.x, the default behavior of  is to open files in the universal newlines mode (), which means that if I open a file like this:then all the different line endings (CRLF/CR/LF) get converted into  when using , , etc.However, when dealing with , the different line endings are not converted (at least on Linux, reading a CRLF file means that the result of  ends with ). This means that  is opened using a different  setting. Is there any way of influencing the parameters that are used for opening ?More generally, is there in Python something akin to Perl's  that would allow changing the way reading from  / writing to  works?Just to be clear, I know that I can do the CRLF→LF conversion myself. That is not what this question is about.
There's no way to fully replace how Python wraps the stdin and stdout pipes in  and . (There is some limited control, like the  option`, but that's it.)However, you're asking for multiple other things, all of which are possible, and some of which might be what you want.First,  is just a normal , as returned by  (in text mode). This means you can access its underlying binary object, or the raw unbuffered file object underneath that, or the OS file descriptor underneath that, the same as for any other text file:Often, that's all you need. You wouldn't want to actually replace . That would break , the  module, and who knows what else that's expecting  to be a text file. But you can just use  instead of , and it's roughly the equivalent of what I think you were looking for from perl's .And you want a  with different options wrapped around the same underlying file, you can do that too.For the simplest cases, the easiest way to do that is just to call  the way you wanted to call , passing the file descriptor:For less trivial cases, you may need to read the  docs (and  and other types in the  module) and wrap exactly the part you want in exactly the way you want. But usually,  will be good enough.Either way, you can just use  in place of .Or, since this now is a perfectly good  (assuming you ed in text mode), it is safe and reasonable to replace :… and now , etc., will continue to work—and will work the way you wanted them to.
This can be solved as follows:This causes  to behave as if it were opened using  with default parameters (including ). TextIOWrapper's constructor takes the same parameters  does, so we can also do things like:etc.We thus have a way of influencing the way stdin/stdout is opened, similarly to Perl's  (the  version).Thanks to @abarnert for the comment about TextIOWrapper.


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-u
https://docs.python.org/3/library/io.html#io.TextIOWrapper
