Natural Text
If I can choose between list of objects, lists of integers and dictionaries (is there any other data structure option?), which is the most efficient data structure to discover if a group is a subgroup of other group, and how to implement? I have a class with unique integers atributes, so I can "represent" the class object's by the integer they contain, or the object (pointer) itself.One option is to use issubset, as bellow:However, using the issubset function with a list of atributes, my code would take months to years to finish to run, as this has to be performed billions of times. Usually, one list has from 1 to 4 elements while the other has from 200 to 2000 elements.What is the best approach for this problem?
Using  methods should be fairly efficient. In particular, if you do , only the size of  matters since a  uses hashing to check if it contains a given item.Although, if you are instantiating a set for every comparison, then you are adding a big overhead to your computations.One solution is to instantiate a new  in your  method only and to populate it in your  method. To allow attribute deletion as well, you can define a  method that removes elements from the . Finally, you can use the  method to execute the subset comparison when using the keyword .Example
Look at python sets.  The  datatype has all of the operations you need (e.g. ) and is really fast.  If you can streamline your calling code and let the sets do the work, you will see this perform well.So I put this in a loop.  It ran 100,000,000 times in 27 seconds.I think that if you pre-compute your sets instead of building them for each comparison, you will find this to be a super-effective way of handling it.https://docs.python.org/3/tutorial/datastructures.html#sets


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
