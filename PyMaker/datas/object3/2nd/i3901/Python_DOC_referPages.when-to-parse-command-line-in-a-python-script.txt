Natural Text
Should sys.argv for checking command line arguments be done in the beginning of a script, after the import statements? Is it acceptable to check for a command line argument anywhere but the start of a script? I couldn't find it in PEP8.
PEP8 is about code style, not the algorithms that code implements. It's completely up to you.More often that not, a program needs the result of its command line parsing early so that it knows what to do. If the command line includes logging options, you probably need it ASAP 'cuz you need to set up logging ASAP to, like, log any unhandled exceptions that can occur anywhere -- or you won't know about them ifwhen they happen!That's the sole reason why command line is usually parsed early.
Yes @ovunctuzel, it is totally up to you to decide the point/location of use of sys.argv in your code/script.Always perform input checks and validations at the beginning i.e. have validated inputs before moving forward/continue with the execution of latter parts of code. It will reduce the chance of crash.sys.argv is a list containing the command line arguments.sys.argv[0] is name of the python source  file, the first command line argument (required).If your script deals with command line arguments and is based on these arguments then it's better to write the code at the beginning of script.Have a look at the below great links about the use of sys module, sys.argv list etc. You can make great applications based on this concept in addition with exception handling. It's super.References: http://www.pythonforbeginners.com/system/python-sys-argvhttp://www.pythonforbeginners.com/argv/more-fun-with-sys-argv
As a general rule of thumb, you want to parse all of the arguments up front. But parsing them immediately doesn't necessarily mean processing them immediately, or even validating them.When you're just using a bunch of strings out of  there is no parsing, so this doesn't come up. But non-trivial programs often have flags, or numeric arguments, or named sub-commands, etc. If you're not using a third-party library like  or , you probably want to use . And then the distinction is pretty clear.So, when do you use the argumetn? As ivan_pozdeev explains, you pretty much need to handle a log-level flag as soon as possible. But that doesn't apply to everything. Consider a typical Unix command-line tool like :It didn't validate all three files and give me an error; it tried the three files one by one, giving me errors on the ones that failed (to ), and output on the ones that didn't (to ). This is often a lot more useful than validating all the files up front. , on the other hand, would fail up-front for an unknown flag.In Python, that would look like:This is a pretty typical organizationâ€”but it's just "rule of thumb":This is usually the order you want to do things in.The textual layout of your program will often follow the sequencing order of what it does.Therefore, you'll frequently end up writing things this way.If you have a good reason to do things in a different order, maybe that should raise a minor flag to make you double-check your reasons. But once you've thought it through, definitely violate the rule of thumb. If you have some processing that's always worth doing before even looking at the arguments, that will have been valid even if you bail out with a  message, then do it. Python won't stop you.And as for readability: If you're doing something a little unusual, the fact that your code organization is a tiny bit unusual is, if anything, a useful signal to the reader.


Answer URL
https://docs.python.org/3/library/argparse.html
