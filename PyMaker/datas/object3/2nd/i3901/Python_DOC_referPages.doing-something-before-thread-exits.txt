Natural Text
I have a class that uses a worker thread to offload work into the background. The class inherits threading.Thread so the class itself is the worker thread. It has a number of functions that communicate with the worker thread including shutting it down.Problem now is that sometimes I get an exception in the main code and the programs exits without ever calling the worker.shutdown() method. Python then ends the main thread and waits for the worker thread to finish, which it never does.How can I terminate the worker thread when the main thread dies?
The arguably cleaner way would be to add exception handling to your main code and call  if an exception is caught that you consider severe enough to warrant termination of the program.Another solution is to flag the worker as daemon thread before starting them (see Hannu's answer). Please be aware that this will ungracefully terminate the worker.From the docs:Daemon threads are abruptly stopped at shutdown. Their resources (such  as open files, database transactions, etc.) may not be released  properly.
Set the worker thread as daemonic. Now your threads will be killed if your main program exits for any reason. 


Answer URL
https://docs.python.org/3/library/sys.html#sys.excepthook
