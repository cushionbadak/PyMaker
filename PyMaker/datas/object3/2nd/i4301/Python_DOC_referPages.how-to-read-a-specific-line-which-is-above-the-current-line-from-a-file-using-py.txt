Natural Text
I have a file, after reading a line from the file I have named it , I want to fetch the 4th line above the current_line. How can this be done using python?Now  say I have fetched line 6 and I have madeNow i want 4 the line from above (ie) N now want line 2 PS: I dont want to read the file from bottom.
You can keep a list of the last 4 lines while iterating over the lines of your file. A good way to do it is to use a deque with a maximum length of 4:Once a bounded length deque is full, when new items are added, a  corresponding number of items are discarded from the opposite end.We read the file line by line and only keep the needed lines in memory.Imagine we have just read line 10. We have lines 6 to 9 in the queue. If the condition is met, we retrieve line 6 at the start of the queue and use it.We append line 10 to the deque, the first item (line 6) gets pushed out, as we are sure that we won't need it anymore, we now have lines 7 to 10 in the queue.
My approach would be converting the contents to a list splitting on  and retrieving required line by index.Since you are reading from file, you don't need to explicitly split on . You could read from file as list of lines using :
You can use  for your . For example:To go back to the i-4 line, you may think about using .But why do you need to go back?
you can do:
As I can see you are reading the file line by line. I suggest you to read whole file into the list as below example.with open("filename.txt","r") as fd:    lines=fd.readlines()   # this will read each line and append it to lines listlines[line_number] will give you the respected line.
 not effective solution. If you work on huge file why do you want to read all file into memory?There is no much more options to solve that kind of a problem. you could also use  and  methods to  play around but generally no need for ninja :). If you using on huge file just do not forget to use  
This is how you could do it with a generator, avoids reading the whole file into memory.Update: used collections.deque (deque stands for "double ended queue") as recommended by Thierry Lathuille. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/collections.html#collections.deque
