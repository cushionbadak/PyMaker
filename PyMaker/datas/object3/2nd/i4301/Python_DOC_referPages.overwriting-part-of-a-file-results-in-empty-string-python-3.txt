Natural Text
EDIT: The solution was simply changing how I was opening the file (thanks Primusa), not how I was replacing the information.I am attempting to overwrite parts of a file, but my code does not work. When it runs, it completely erases everything in the file, leaving nothing behind.Here is my code:Key:: a string variable corresponding to a file name without the file type.: a dictionary containing file name keys as string and integer values.: a file containing multiple lines of integer lists.: an integer variable used to determine the integer to be accessed. and : variables with values set as the column and row (respectively) of the integer to be accessed in the file.: a variable stored as either a boolean or , used to determine whether the accessed integer should increase or decrease, and by how much.: a currently unused integer variable used to truncate part of the file.Example of use:Say I have a file , which has the following information stored in it:0,2,3,711,3,6,4I want to increase the "6" value by 2, so I run the code with  set to  and add  to , since "6" is the 7th number in the file (regardless of list length).What should happen: is modified and now contains:0,2,3,711,3,8,4What actually happens: still exists, but now contains:Which is to say it is empty.What is wrong with my code? Am I handling the file incorrectly, the variable calculations, syntax, or something else entirely?
Opening a file in mode "w+" truncates the file, which means it deletes everything inside of it. All of the operations you do after this statement are on an empty file.What I would suggest would be opening the file in read mode:Loading the file into memory, making your changes, and then opening the file in "w+" mode and putting the file back down.Lets do this on the foo example:Note this is a very basic example so it doesn't take into account the newlines.


Answer URL
https://docs.python.org/3/library/functions.html#open
