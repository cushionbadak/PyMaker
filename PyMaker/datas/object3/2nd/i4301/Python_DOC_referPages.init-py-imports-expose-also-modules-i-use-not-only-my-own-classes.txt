Natural Text
This question already has an answer here:Can someone explain __all__ in Python?                    10 answers                There's something that I'm not grasping about python imports. I've read dozens of articles but I'm not finding a satisfactory answer. The situation is this:I'm writing a package made of several modules. Let's say that the package is named . In the  file, in order to expose the classes and functions I defined in my modules, I wrote:Now, in module 1:My problem is that when Iin another project, I see  in 's namespace. Do I have to import each one of the 100 classes separately in the  file in order to avoid this and keep my namespace clean? Do I have to do some hack with the inspect module in  in order to identify the classes that were defined and not imported (I think this would be very ugly)? Or, as I suspect, I'm mistaking something about how I should handle the module structure or the import statements?
Wildcard imports import everything defined in the global namespace in that module. It does not discriminate between "local" classes, modules that were imported, functions or variables.There are two ways around this:Import exactly what you want, instead of using wildwards. Explicit is better than implicit, according to .Use the special  variable to define exactly what should be imported when the module is wildcard-imported. See Can someone explain __all__ in Python?


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
