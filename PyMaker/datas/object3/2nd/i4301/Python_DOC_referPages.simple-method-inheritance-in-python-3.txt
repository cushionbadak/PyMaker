Natural Text
Newbie python inheritance question.. when you write the following:producesIt looks as if Python creates an attribute  which is bound to  and it knows that  is an  method. Should I think of inheritance as simply creating pointers to the base class objects (and the interpreter knows it's a base class object) as opposed to creating a copy of the attribute in the deriving class? Seems like this is an important point but somehow wasn't clear to me initially - came to this question while playing around with .
You are partially correct, let's start by what you got wrong.Should I think of inheritance as simply creating pointers to the base class objectsThat would be incorrect. When you access an attribute, either with  or by doing , Python first recovers the attribute through the method resolution order. In particular this means that this does not happen at class creation, but at attribute lookup instead.It looks as if Python creates an attribute  which is bound to Here you are correct. Binding a class or instance method created a new object in the process.After having recovered the attribute, Python may need to bind it. It first checks if it is a descriptor, that is an object with a  method to allow binding it to a certain instance.Here is a Python implementation of the  to help visualize what happens when you retrieve an attribute.First this is how Python resolves a class attribute using the mro.Then, this is how  would be implemented if it were in Python.Keep in mind that the above omits a few steps for the sake of sticking to your question. By example, it will not rely on  and  as the builtin  would.


Answer URL
https://docs.python.org/3/howto/descriptor.html
