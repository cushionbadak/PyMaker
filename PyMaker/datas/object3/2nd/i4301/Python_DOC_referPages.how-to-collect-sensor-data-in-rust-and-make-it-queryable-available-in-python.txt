Natural Text
How to use Rust to collect a time series/stream of sensor data and then make this data available from Python (whilst Rust continues to collect data)?The objective would be for Rust to continue collecting the data and allow for Python to call functions which would allow to query/retrieve this data. For example all the observations over the past 5 minutes.Is this possible to achieve without copying memory (similar to view of numpy arrays) or does memory have to be copied when it is received in the Python runtime? If memory needs to be copied how does the runtime cost of doing it in Rust compare to a doing it in C? Would C be simpler/easier to implement when compared to Rust (as a novice C programmer I like the safety/tools Rust offers)?In summary, I would like to understand how to:Collect sensor data and continue to collect it in Rust in the backgroundAllow the data collected in Rust to be queried from PythonDoes the data need to be copied when queried from Python or can memory views similar to numpy be implemented?If the data needs to be copied how does the overhead compare to C?How does the complexity of implementing this is Rust compare to C?
Your question is to vague to be answered correctly, let me suggest you some approaches.1. Using an intermediate layerYou can use some sort of database (e.g. sqlite, postgresql, ...), filesystem storage (plain text file, sockets) or even build a Webserver with a (JSON) API.Depending on what you want to use, there are crates for everything (plain text is in std, sqlite, postgres, diesel, hyper, serde, etc).The neat thing about this implementation is, that it is programming language indepenent, if you for example decide to reprogram your code in Java later (for whatever reason :) ), you just have to change the way java reads the code out of the database/socket/webserver.2. Using FFIYou can take a look at the example from alex at github.com, but be aware of the types you can use in FFI, e.g. integer types like i32, u32, i8, pointer, floatings but things like strings can get very hairy, so if you are fine with integer only, use that.


Answer URL
https://docs.python.org/3/c-api/buffer.html
