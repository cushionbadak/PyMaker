Natural Text
This question already has an answer here:What does the built-in function sum do with sum(list, [])?                    3 answers                I'm using python 3.6. I came across the below way to flatten the nested list using :which returns:What exactly is going on here? Sum takes an iterable, in this case a list, and a start value. I don't understand what python reads to flatten the list.
This is just a result of how Python interprets addition of lists. From the docs Sums start and the items of an iterable from left to right and returns the total.Since  starts by adding the first element of the iterable to the  argument, you have:Then it continues adding items from the iterable:
 produces .In your example, , , , and  are , , , and . produces , which is  because  is concatenation for lists.This is absurdly inefficient, because every  operation involved requires copying all the data from each of its arguments: takes quadratic time, whereas a more efficient implementation takes linear time. Never do .
As the  document says:Sums  and the items of an  from left to right and returns the total.  defaults to 0. The â€™s items are normally numbers, and the start value is not allowed to be a string.So, in the example you shared:Here,  is  (which is ) and  is . Hence, the resultant is equivalent to:
The  argument gives the function the starting point. It's what is being added to. So  returns  and  returns . In your case, because you're passing in an 2-d list and an empty list, the function is going to add everything in the first argument to the second argument. Essentially, you're doing this:It's a bit of a quirk of python's operator overloading.


Answer URL
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/library/functions.html#sum
