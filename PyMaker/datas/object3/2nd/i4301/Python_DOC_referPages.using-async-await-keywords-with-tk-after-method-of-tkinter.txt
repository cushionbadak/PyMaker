Natural Text
I am creating a cryptocurrency exchange API client using Python3.5 and Tkinter. I have several displays that I want to update asynchronously every 10 seconds. I am able to update the displays every 10 seconds using  like in this exampleIn order for the  method to continue to update continuously every 10 seconds the function  needs to be passed as a callable into  inside of the function.Now the part that is stumping me, when I make this function asynchronous with python's new async and await keywordsThe problem here is that I can not await a callable inside of the parameters for the  method. So I get a runtime warning. .My initial function call IS placed inside of an event loop.The display populates just fine initially but never updates.How can I use  to continuously update a tkinter display asynchronously?
 accepts a normal function, not a coroutine. To run the coroutine to completion, you can use , just as you did the first time:Also, don't call , since you'll need the loop again.The above quick fix will work fine for many use cases. The fact is, however, that it will render the GUI completely unresponsive if  takes a long time due to slow network or a problem with the remote service. A good GUI app will want to avoid this.While Tkinter and asyncio cannot share an event loop yet, it is perfectly possible to run the asyncio event loop in a separate thread. The main thread then runs the GUI, while a dedicated asyncio thread runs all asyncio coroutines. When the event loop needs to notify the GUI to refresh something, it can use a queue as shown here. On the other hand, if the GUI needs to tell the event loop to do something, it can call  or .Example code (untested):


Answer URL
https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading
