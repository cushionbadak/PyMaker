Natural Text
How to use recursion to implement "Finding the maximum value in an array"  in Python ?The following is a simple test code I wroteI want to do it by recursionI'm learning algorithms, learning recursion. Thanks very much!
If you want to use recursion, it's very important to define carefully the end cases.The maximum of the elements of a list is, obviously, either the first element or the maximum of the rest of the list: it's the greatest of the two values. That's actually the recursion you are looking for.But what happens when there is no first element? You have an empty list, and an undefined behaviour. Why not ? Because it would lead to some inconsistency: . (You could also try , but this won't be very intuitive!)What if the rest of the list is empty? No problem, you have just one element and it is the maximum.Just translate this analysis into code:More on I will try to give a value to . I repeat the argument above. For any given , . This implies that, for every , . The only value that meets this condition is . Why not define ? Imagine you create a  function. For symetrical reasons, you will have to define . Hence it exists a list  such that . No one would accept such a possibility.What should we do now? There are two main possibilities: defensive programming or use a contract. In defensive programming, the function will check the arguments it has received, and fail if one of these arguments is not correct. That's what I did:If you use a contract, you will basically say: if you give this function an empty list, then the behaviour is undefined. It might return any value, crash, loop forever, .... Here, you would have something like:It seems the same, but there is a huge difference. You can use, for implementation reasons,  as the return value for , because it is now clear that it doesn't have any meaning. Someone who tries to check if  for  clearly breaks the contract and won't be surprised by the result. Of course, if you want to make it robust, you will write:
Try this (using recursion, as requested by the OP):No built-in functions are used (such as ) because the OP has stated that they don't wish to use any built-in functions.The  part of the function s either the first element of the  or the largest number in the list (excluding the first element) depending on whichever number is larger.Each time the  part is executed, the  bit checks which number is largest inside  without the first element. This means that, at one point,  will contain two elements. When it does so, a one-line  statement is used to compare the two elements and s the larger element.Eventually, the code recurses back to the first level and s the largest element.
I would write  and  can be called with any number of argumentsOr use  to unpack argumentsIt even works when 0 inputs are given

 and  are built-in functions. So you want to avoid using those identifiers yourself.Here's a simple version that uses recursion:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
