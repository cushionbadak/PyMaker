Natural Text
Sample input stream: Suppose you have a sentence , where each letter is either a character or word, depending on tokenization.Then your bag-of-bigrams is .From here, I need an algorithm to list all the possible permutations of sentences with the same length as the original sentence, given these bigrams. Here,  (the original sequence) and  are both valid, possible sentences, but  is not. This example is for bigrams, but I also need this to work for any . Any ideas?
Build a directed graph and then use recursion to enumerate all possible paths of length k. To wit,
Here's a very straightforward solution. First, compute all n-grams; second, get all possible sublists of these n-grams and get all permutations of those sublists.The n-grams (may be optional, given your sample input stream)You can use a comprehension list. Take  times the list with a start from indices  to : . For  and , you get . You just have to zip the lists and join the resulting tuples (note the star to unpack the arguments):This gives:List sentencesYou can use , specifically  and . The  function gives the "r length subsequences of elements from the input iterable":You have to take the combinations for every possible length. The  function will permute all this subsequences:Or with a generator comprehension:This gives 206 possibilities:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
