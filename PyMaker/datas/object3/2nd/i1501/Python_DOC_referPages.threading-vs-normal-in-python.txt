Natural Text
I found interesting presentetion about GIL and Threading:http://www.dabeaz.com/python/NewGIL.pdfSo I wrote similar code, but get strange results:As you can see, threading method ran faster than normal one or equally (0.28s not too much).I found some articles and similar questions, but everywhere results were like in presentetion- threading is slower.Am I doing something wrong or new Python version improved GIL?However, Multiprocessing also went crazy and work 20x faster than others! Is it ok? 
In modern Python, the GIL isn't as bad as it used to be (previously, you could expect CPU bound threaded code to run meaningfully slower), so your observation is roughly what you'd expect.From personal experience, a bunch of CPU bound threads on CPython 2.7 could use close to two cores of CPU, and accomplish less than 75% of a core's worth of work. Since they rewrote the GIL in CPython 3.2, that overhead largely disappeared; you still don't gain anything from the threading, but you end up using 1-1.1 cores' worth of compute and accomplish 95-100% of a core's worth of work. Basically, the GIL doesn't meaningfully slow code anymore, but it still prevents you from reaping a benefit from threading with CPU bound code that isn't based on third party GIL-releasing extensions like .


Answer URL
https://docs.python.org/3/whatsnew/3.2.html#multi-threading
