Natural Text
I am trying to create nested Python classes using the 3 argument  function. I want to construct an analogue of this:The naive attempt isbut that is not quite right, since  is actually created outsideand before  and is only put inside `AA later.The difference isdemonstrated by:How can I create nested classes reflectively/dynamically that are completely equivalent to nested definitions?I want to use this to reflectively generate a  api. The idiom there is to create an outer Graphene class with an inner Meta class pointing to the correponding SQLAchemy model class (http://docs.graphene-python.org/projects/sqlalchemy/en/latest/tutorial/#schema) eg:The  class above is pretty cookie cutter and should be constructable programmatically from the  class. This should then be doable for an entire schema.
In the Python 3.7  documentation, it says:The [1st argument] is the class name and becomes the  attribute.So, I think the only difference between your 2 examples is that  is  in the 1st example, and  in the 2nd. If you want the  to be the same, you can do this:Otherwise, as far as I can tell, both examples are functionally equivalent.
Actually, the only difference you get there is the  class attribute.The  is created by the code object running the class body, and passed as an ordinary attribute to the metaclass  method (usually ) .Therefore all you need to get this level of equivalence is to explicitly pass a proper   when creating the class:This will likely be enough for you, but beware that there are more subtle differences between classes created dynamically. One of the last metaclass questions I answered is exactly about that, but with the opposite approach: the challenge was to actually be able to distinguish classes created with both styles.Detect if class was defined declarative or functional - possible?(warning: that contains what likely is the "deepest black magic" Python code I ever put in an answer here)


Answer URL
https://docs.python.org/3/library/types.html#types.new_class
