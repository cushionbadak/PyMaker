Natural Text
Strongly related question.When writing docstrings for my functions in python, I sometimes want to write something like this about argument specifications:However, this is not perfectly precise, because in this example  could be returning any object that will be evaluated to  in the if-statement when the conditions XXX is fulfilled. Such a callable would be a perfectly valid argument to pass to .How should I formulate my documentation to reflect that  does not strictly requires 's output to be a boolean?My first move was to write something like "[...] must return an object that will be evaluated to True if ...", but I find it obfuscated.
This is a slang question! I've always wanted to answer one of these!Ahem.The term for something that evaluates to  when used in an  statement is "truthy". The term for something that evaluates to  when used in an  statement is "falsy" or "falsey". So, your documentation can be written like this:"Iff" is more slang, this time from the mathematical world. It means "if and only if". These words are commonly used in programming contexts, so I expect most programmers will understand them; if not, truthy, falsy, falsey and iff all come up with their respective correct meanings when searched in a search engine.
I'm not sure if there's a standard for this, but based on python's Truth Value Testing you would probably be safe writing something like
I would suggest that is is just fine to say "must return True if XXX and False otherwise." Because of duck typing, I read this the way you intend. Further, this seems to be standard in how the Python standard library documents things.In fact, if you do strictly require the value to be  or  and use this language, I will have a very bad day tracking down this bug!As others have said, "truthy" and "falsy" are fine, well-understood alternatives if you are still concerned.


Answer URL
https://docs.python.org/3/library/stdtypes.html
