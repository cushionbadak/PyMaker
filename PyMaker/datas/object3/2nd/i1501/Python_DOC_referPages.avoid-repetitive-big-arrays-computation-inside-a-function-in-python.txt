Natural Text
I call repetitively - during a minimisation process - a function that requires big arrays. Here is a dummy exampleDuring the minimisation process, the array size  doesn't change, so I would like to use the same array to avoid useless computation and memory allocation.Also I would like the function  to be self-consistent, meaning that I don't want another function to create the array and give it to  during the minimisation process.Given these requirements, I was thinking to use a callable object with the array as an attribute. What do you think about this? Is there a more pythonic way to do?
a self contained approach (without global variable) would be to use a mutable default argument (that you shouldn't call your function with) to memoize the previously allocated arrays given their sizeif the array size isn't in the dictionary, create it, and add it.The main problem with this approach is that it disables the garbage collector for this array, so if  changes too much, you can have memory exhaustion. Same technique, but using a LRU cache can solve the issue:(don't define  inside  or the cache is going to be reinitialized at each call)


Answer URL
https://docs.python.org/3/library/functools.html
