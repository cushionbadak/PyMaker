Natural Text
I'm trying to understand the write() and read() methods of io.BytesIO.My understanding was that I could use the io.BytesIO as I would use a File object.The above code will return b'hello' as expected, but the code below will return an empty string b''.My questions are:-What is  doing exactly?-What is the difference between io.BytesIO.read() and io.BytesIO.getvalue()?I assume that the answer is related to io.BytesIO being a stream object, but the big picture is not clear to me.
The issue is that you are positioned at the end of the stream. Think of the position like a cursor. Once you have written , your cursor is at the end of the stream. When you try to , you are reading everything after the position of the cursor - which is nothing, so you get the empty bytestring.To navigate around the stream you can use the  method:Note that, just like a filestream in  () mode, the initial bytes  have been overwritten by your writing of . just returns the entire contents of the stream regardless of current position.
this is a memory stream but still a stream. The position is stored, so like any other stream if you try to read after having written, you have to re-position:prints:while  doesn't need the final  as it returns the contents of the stream from position 0.
 does behave like a file, only one that you can both read and write. The confusing part, maybe, is that the reading and writing position is the same one. So first you do:This gives you a bytes buffer in  with the contents  and with the read/write position at the beginning (before the first ). When you do:You are effectively overwriting  with  (and actually getting one byte further), and now you have the position at the end (after the last ). So when you do:You see nothing because there is nothing to read after the current position. You can, however, use  to move the position, so if you doYou get:Note that you do not see the initial  because it was overwritten. If you want to write after the initial content, you can first seek to the end:Output:EDIT: About , as pointed out by other answers, it gives you the full internal buffer, independently of the current position. This operation is obviously not available for files.


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.seek
https://docs.python.org/3/library/io.html#io.BytesIO.getvalue
