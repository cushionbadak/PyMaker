Natural Text
I understand the basics of closures. The common example I have seen on some questions here from learning python is:I understand the outcomes of running maker, and I understand that action retains some state information, N, even once the enclosing scope of maker is gone. I also understand that different values of N are stored in different calls to action. What I don't understand however is how the interpreter 'knows' that N is referenced in action.If a function's body is only run upon a call to that function, then how is it possible that the interpreter even knows to associate the data of N to the nested action function? I thought perhaps when there is a nested structure like this exists, python maybe looks inside to check if there are any references. I tried this:If it's the case that python looks into nested functions to determine if they reference variables in enclosing scopes, then wouldn't it also throw an error when it comes across an undefined variable in f2? My guess is that it doesn't (since it doesn't spit out an error here, even when f1 is called).So my question is then how can python know to associate names from enclosing scopes to nested functions, if the bodies of those nested functions are never executed until they are called?
to add some more detail to @DYZ's answer, try the difference between: successfully evaluates to 15 fails to evaluate, because the parser didn't "know" that  would be needed later succeeds because it knows it will need  later and hence builds a closure that binds it.  if byte code generation was smarter it might realise that the  was unreachable and hence not build the closure, but it doesn't do that for me in Python 3.7the  module might make it more obvious what Python is doing behind the scenes, for example:prints out the bytecode associated with  try comparing with the other functions


Answer URL
https://docs.python.org/3/library/dis.html
