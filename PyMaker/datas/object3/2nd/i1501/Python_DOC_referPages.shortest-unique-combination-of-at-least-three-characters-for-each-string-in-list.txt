Natural Text
I want to find the shortest unique combination of characters for each element in a list of strings. Each combination should consist of the string's first character and its two rarest characters at least (more if necessary) and order matters. If a character appears more than once in one string, it should get more weight.Consider the following example:for , both  and  appear 4 times overall, but since  appears twice in , it should be used in the combination.What is the most efficient way to write this logic in python?
You could do something like this:OutputThe idea is to create a tuple of the priority criterias representing each unique letter. So  is a list containing tuples represeting:: The overall count (as you want the rarest multiply by -1): The specific count of the letter in the word: represents the firs position of the letter: the letter itself.Once you create the list  with:Note that as the characters must be unique we use a set () to guarantee uniqueness. Finally you use heapq.nlargest to get the top  elements according to the above criterias.


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
