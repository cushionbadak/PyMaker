Natural Text
I have an app written in Electron/Typescript and I need to validate that a user input is a valid Python expression.For example: I have no way of producing the correct type and value of the operands for these expressions. I need something which parses the expression and tells me if there is an expression error.The Python  function parses and evaluates the expression. I need only a parsing.Is there something for that need?
You may want full compilation into a full Python code object, or you can just parse into an abstract syntax tree. You can use the  function to achieve either, or just use  to produce the tree.Parsing into an AST tokenizes the input and outputs a tree of syntax objects that you can then further analyse or transform. Compiling into bytecode goes one step further, using that AST to create a Python code object that you can optionally execute with either  or the  function; note that the latter always returns  and is probably not the best choice to evaluate an expression code object. uses  to compile a string argument to a code object, then execute it, so  would give you the same result without execution.Use  as the mode if only an expression is valid, or  if full Python statements are to be accepted.  (and ) raises a   exception if the input is not a valid Python expression () or not valid statements ().Demo:Parsing to an AST would let you discover what names the code expects to be able to access; you can collect names by looking for  nodes:Note that the above ignored context, so the  attribute name is listed too. Write a  subclass if you need to process a syntax tree with more context.


Answer URL
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/library/ast.html#ast.parse
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/ast.html#ast.NodeVisitor
https://docs.python.org/3/library/inspect.html#inspect.signature
