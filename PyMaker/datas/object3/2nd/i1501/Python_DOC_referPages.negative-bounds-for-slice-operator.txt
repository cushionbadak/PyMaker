Natural Text
This question already has an answer here:Understanding slice notation                    31 answers                I am new to python and one of the things every newbie do come across is the slice operator. I have a list:As per my understanding calling  is same as calling  and it is but when using it with a negative steps things do not work exactly as I thought they would. So getting to my question why the result of but the result ofLooking forward to some explanation of how the negative step is being treated in this scenario.
The key is that missing (or None) start value is not always automatically set to 0. Please read the note 5 in sequence operations for  If i or j are omitted or None, they become “end” values (which end  depends on the sign of k)To simplify the situation, consider negative step -1 instead of -2. Step -1 is often used to reverse a list.The first example shows, what are the real "end values" for the slice.
So, your list is First, understand what exactly happens in slicing.Slicing can't be done in backward direction without using step. Take an example, we wan't to print , we can't do this using . because, slicing can't go backward as stated (we can't go backwards from index -1 to 0), and will return empty list .(We have to do this using )So what happens here is: you have a list , using a negative step will swap the indexes as .(Once swapping of indexes is done, you should consider it as a positive step) and then print out your output w.r.t. your provided step(only the magnitude).Now, all that I mentioned above might seem useless, but it would help you understand next part. So, coming to your question, when you write , first,indexes are swapped. So, it is same as . and as I have stated above, we can't go backwards (index  to ) without using a negative step, so it returns the empty list.but, when you give input as , It swaps the indexes and becomes  and we now easily know what will be the output ().So, don't consider the blank space in  as  but as left end.(for better understanding)Hope this helped.


Answer URL
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
