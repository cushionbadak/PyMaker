Natural Text
I am trying to create a custom logger as in the code below. However, no matter what level I pass to the function, logger only prints warning messages. For example even if I set the argument level = logging.DEBUG by default my code fails to log the debug or info messages. Can someone point out the problem here. 
A couple of points to know (Read these logging docs for details)A parent's / ancestor's log level takes precedence while evaluating the effective log levelA root logger, for example that created with getLogger, has WARNING as it default log levelYou have set the log level of the handler (logHandler) but not the root (logger). At this point, no handler can have a log level less than the root's, ie, WARNINGSo, set the root level to something reasonable and you should be good to go
You are missing the fact that a) every logger's ultimate ancestor is the root logger (which has level  by default) and b) that both, loggers and handlers have levels. The docs state:When a logger is created, the level is set to NOTSET (which causes all  messages to be processed when the logger is the root logger, or  delegation to the parent when the logger is a non-root logger).So, you create a logger and a StreamHandler with their default level . Your logger is an implicit descendant of the root logger. You set the handler to level , but not the logger using that handler. Since the level on your logger still is , when a log event occurs, its chain of ancestors is traversed ... ... until either an ancestor with a level other than NOTSET is found, or  the root is reached.[...]If the root is reached, and it has a level of NOTSET, then all  messages will be processed. Otherwise, the rootâ€™s level will be used  as the effective level.Which means, you immediately end up at the root logger to determine the effective log level; it is set to  as per the root logger's default.You can check this with the  and  properties and the  method on the  object:To have your logger handle the messages on and above the desired level itself, simply set it on the logger via  in your  function.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Logger.setLevel
