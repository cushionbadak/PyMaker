Natural Text
Say I have a python class which may set a dictionary upon instantiating:and then in another place in my code, I want to look up a key in that dict - but of course only if it exists. Is the best Python style then to 1) make a "checking method" in the class, even if it's only one line, or 2) directly reference the class' dictionary attribute? Let's say the class was instantiated as  the options are then1) Class method:which is then used asor, 2) directly reference in the code where its used. Is it okay (style-wise) to reference class attributes directly or is it considered bad/unsafe practice? I am somewhat familiar with the  decorator, as discussed in this post: What's the pythonic way to use getters and setters?, but not sure if that answers my question.
According to the EAFP-Principle, using exceptions for control flow is pythonic. Currently, you are looking before you leap.I would code (either as a function or method):If you have multiple functions/methods that need the same exception handling, for reusability it would make sense to write an additional wrapper around the exception handling which returns  if no exception occured and a appropriate sentinel value (e.g. ) if an exception occured. You could also consider to use the linein , then you don't have to think about s any longer.
Maybe you needobject.__contains__ methodAnd in your code


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
