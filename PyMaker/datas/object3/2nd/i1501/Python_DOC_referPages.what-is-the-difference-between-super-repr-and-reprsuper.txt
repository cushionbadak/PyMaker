Natural Text
In python (3.5.2), I was expecting the  function to call the magic method  of 's class. However calling both of them do not seem to yield the same result. Can anyone explain why ?Sample code : result : 
Calling  directly accesses the  on the  class (technically, the  of the C  struct defining the  type). Most special dunder methods behave this way when called implicitly (as opposed to explicitly calling them as methods).  isn't equivalent to . You can think of  as being defined as:while you were expecting it to be:This behavior is intentional; one, customizing dunder methods per-instance makes little sense, and two, prohibiting it allows for much more efficient code at the C level (it has much faster ways of doing what the illustrative methods above do).By contrast,  looks up the method on the  instance, and  defines a custom  (roughly equivalent to defining a custom  method), which means lookups on the instance are intercepted before they find the / of the class, and instead are dispatched through the custom attribute getter (which performs the superclass delegation).
If you consult the docs, you'll see that  returns a proxy object which delegates method calls to the appropriate class according to method resolution order.So  gets you the representation of the proxy object. Whereas the method call  gives you the representation defined by the next class in the method resolution order.If you want the superclass itself, try
In  you're calling the repr class of the super object so you get In the second, you're calling repr of the . what does  output?  so you're effectively calling repr on some class hierarchy


Answer URL
https://docs.python.org/3/library/functions.html#super
