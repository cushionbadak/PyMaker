Natural Text
 replaces dashes in optional arguments by underscores to determine their destination:However the user has to remember whether the option is  or ; using the wrong variant raises an error.This can cause some frustration as the variable  in the code does not make it clear which variant was defined.How can I make  accept both  and  as valid ways to define this optional argument?
 translates the '-' to '_' because the use of '-' in flags is well established POSIX practice.  But  is not acceptable Python.  In other words, it does the translation so the  will be a valid Python variable or attribute name.Note that  does not perform this translation with .  In that case the programmer has full control over the  parameter, and can choose anything that's convenient.  Since the  only uses  and  when accessing the , the constraints on a valid  are minimal.There are two users.  There's you, the programmer, and there's your end user.  What's convenient for you might not be optimal for the other.You can also specify a  with defining an .  And  gives you further control over the  display.It's  that performs the '-' replace:
 accepts more than one flag for an argument (link to documentation). One easy way to make the parser accept both variants is to declare the argument asHowever both options will show up in the help, and it is not very elegant as it forces one to write the variants manually.An alternative is to subclass  to make the matching invariant to replacing dashes by underscore. This requires a little bit of fiddling, as both  and  have to be modified to handle this matching and abbrevations, e.g. .I ended up with the following subclassed method, where the matching to abbrevations is delegated from  to :A lot of this code is directly derived from the corresponding methods in  (from the CPython implementation here). Using this subclass should make the matching of optional arguments invariant to using dashes  or underscores .


Answer URL
https://docs.python.org/3/library/argparse.html#name-or-flags
