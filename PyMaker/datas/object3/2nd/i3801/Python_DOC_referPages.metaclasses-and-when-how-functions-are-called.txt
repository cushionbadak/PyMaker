Natural Text
I'm trying to learn how metaclasses work in python 3. Things I want to know are: which functions are called, in what order, and their signatures and returns.As an example, I know  gets called when a class with a metaclass is instantiated with arguments  and returns a dictionary representing the future namespace of the instantiated object. I feel like I understand 's step in the process well. What I don't, though, are , , and . What are their arguments? What do they return? How do they all call each other, or in general how does the process go? Currently, I'm stuck on understanding when  is called.Here is some code I've been messing around with to answer my questions:From this and some googling, I know that  is really a static method that returns an instance of some object (usually the object where  is defined, but not always), and that  is called of an instance when it is made. By that logic, I'm confused as to why  isn't being called. Could someone illuminate?The output of this code prints 'hello', so an instance of Thing is being created, which further confuses me about init. Here's the output:Any help understanding metaclasses would be appreciated. I've read quite a few tutorials, but I've missed some of these details.
First of all:  is optional, you don't need to supply an implementation if all you are doing is return a default  empty dictionary.Metaclasses work exactly like classes, in that when you call them, then they produce an object. Both classes and metaclasses are factories. The difference is that a metaclass produces a class object when called, a class produces an instance when called.Both classes and metaclasses define a default  implementation, which basically does:Call  to produce a new object.if that new object is an instance of self / a class with thismetaclass, then also call  on that object.You produced your own  implementation, which doesn't implement that second step, which is why  is never called.You may ask: but the  method is defined on the metaclass. That's correct, so it is exactly that method that is called when you call the class with . All special methods (starting and ending with ) are called on the type (e.g.  is the class, and  is the metaclass) precisely because Python has this multi-level hierarchy of instances from classes from metaclasses; a  method on the class itself is used to make instances callable. For  calls, it is the  object itself that provides the  implementation. That's right, metaclasses are both subclasses and instances of , at the same time.When writing a metaclass, you should only implement  if you want to customise what happens when you call the class. Leave it at the default implementation otherwise.If I remove the  method from your metaclass (and ignore the  method), then  is once again called:
In the metaclass's  method, you're calling 's  only, but not . It seems that the default behaviour of  is to invoke both of them, as seen when we call the metaclass's inherited :This prints:


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-lookup
https://docs.python.org/3/reference/datamodel.html#object.__new__
