Natural Text
Python 3.7 is around the corner, and I wanted to test some of the fancy new +typing features. Getting hints to work right is easy enough, with both native types and those from the  module:But one other thing that I wanted to try was forcing the type hints as conditions during runtime, i.e. it should not be possible for a  with incorrect types to exist. It can be implemented nicely with :This kind of  function works for native types and custom classes, but not those specified by the  module:Is there a better approach to validate an untyped list with a -typed one? Preferably one that doesn't include checking the types of all elements in any , , , or  that is a ' attribute.
Instead of checking for type equality, you should use . But you cannot use a parametrized generic type () to do so, you must use the "generic" version (). So you will be able to check for the container type but not the contained types. Parametrized generic types define an  attribute that you can use for that.Contrary to Python 3.6, in Python 3.7 most type hints have a useful  attribute. Compare:andNotable exceptions being ,  and â€¦ Well, anything that is a  does not define . Fortunately:But parametrized types define an  attribute that store their parameters as a tuple:So we can improve type checking a bit:This is not perfect as it won't account for  or  for instance, but it should get things started.Next is the way to apply this check.Instead of using , I would go the decorator route: this could be used on anything with type hints, not only :Usage being:Appart from validating some type hints as suggested in the previous section, this approach still have some drawbacks:type hints using strings () are not taken into account by : you may want to use  and  instead;a default value which is not the appropriate type is not validated:does not raise any . You may want to use  in conjuction with  if you want to account for that (and thus forcing you to define );variable number of arguments can't be validated as you would have to define something like  and, as said at the beginning, we can only validate containers and not contained objects.Thanks to @Aran-Fey that helped me improve this answer.


Answer URL
https://docs.python.org/3/library/typing.html#typing.get_type_hints
https://docs.python.org/3/library/inspect.html#inspect.signature
https://docs.python.org/3/library/inspect.html#inspect.Signature.bind
https://docs.python.org/3/library/inspect.html#inspect.BoundArguments.apply_defaults
