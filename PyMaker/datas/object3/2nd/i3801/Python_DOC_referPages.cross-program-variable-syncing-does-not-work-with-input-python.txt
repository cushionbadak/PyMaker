Natural Text
I am attempting to create a basic module that adds the  function from Python 2.* to Python3 (using the function ). The module takes advantage of imports to run a .py file using something like this:I take advantage of this by using the  function in multiple instances to read the filename and insert it into those functions and strings.Here is what the module (called ) looks like:And the  file:Now, this is the  file (the executed file):What I want to happen is that the  variable from the  be usable in the  file so I can print it, and this should be usable for all variables in the script. However, I want to do all of this in the  function and not use Pickle or any other module like that, because my goal is to not have to add anything to the Fibonacci project.I thought about adding something in a comment that could be scanned for and would detect the variables that need to be added. Something like:But I could not find anything on how to make Python "look" for those variables. Please let me know if you have any questions, thanks!
What you've done is not at all the same thing as . So, it shouldn't be that surprising that it doesn't have the same effect as . (and ) executes some code directly in the current scope. checks whether the module has already been loaded, executing its code in a brand new scope if not, and then gives you a variable holding that module object in the current scope.For example, let's say we had a file named  that looks like this:Now, let's  it:Compare what happens when you  it:On top of that, your  doesn't even work, for multiple reasons:a.replace(".py", "") doesn't mutate , it just returns a new string that you ignore.Your  module doesn't have a function named .You can't "proceed to rest of code after a sys.exit", because  exits the program. You can handle this with , but you shouldn't. At any rate, you definitely can't handle it with ; that will only fire because of, e.g., the fact that the module exists but doesn't have a  attribute.At any rate, as What's New in Python 3.0 explains, the right way to do  in Python 3 is to  the file,  its contents, and  them. In other words:If you want to wrap this in a function, notice that it will execute the code inside that function's local environment. If you want to execute it in globals no matter what, or in the environment of its caller, or anything else, you need to specify that. See the  docs for details, but for a simple example:As a side note, in the rare case where you really do need to do an  dynamically, you should not  an  statement, you should use :


Answer URL
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/importlib.html#importlib.import_module
