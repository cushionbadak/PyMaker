Natural Text
I have a problem with a problem, that got a bit problematic as problems go.situation:I need to combine items in list(s) of variable sizes, with variable sized elements, store those combinations and then iterate through them. I tried itertools, but I get too many combinations, which I have no idea how to properly "clean".I get correct combinations by just creating as many for loops as the number of "op" elements in the input list is.example:NOTE: number of "op" dictionaries may vary! Ignore values as such, what matters is, I use list of "op" dictionaries to basically get all custom controls in Nuke GUI element called NoOp node. I need to iterate through each of the controls for each value, making all possible combinations:For now i am just trying to get my head around how to define the base case :/ATM this script just recursively prints the controlsHow do I use recursion for this case, and more importantly, should I use recursion at all, and if yes, how do I approach such a case and break it down to it's components?Cheers,
Not 100% sure what you are trying to achieve, but if you want to get all the combination of options, you should use :If you want to combine those with the respective , you could write a helper function to get the pairs, then get the  of those:
Absolutely you should use recursion:
Here is a way to print all combinations in three steps:Go from  to . This is done by the  function.Transform  to a list of . This is done by .Take a product of such lists across all different op's.Format and print. 3 and 4 are handled by .Alternatively, all possible combinations may be listed more compactly by combining different op dicts:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
