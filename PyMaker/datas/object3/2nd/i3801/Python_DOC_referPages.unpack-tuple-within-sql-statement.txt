Natural Text
I am using  and . I want to fetch a number of items from a  MySQL database according to their ids:I am using the formatted string literals (, https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498) to evaluate the tuple inside the SQL statement.However,I want to get back the items in the order specified by the tuple so firstly the item with  and then the item with . To accomplish this I have to use the  clause (see also here: Ordering by the order of values in a SQL IN() clause). But if I write something like this:then  in the  clause is considered as an undeclared python variableand if I write something like this:then  in the  clause is considered as a string and not as a SQL variable and in this case  does not do anything. How can I evaluate the tuple  in the SQL statement by maintaining  as a SQL variable in the  clause?Obviously I can sort the items after they have returned from the database according to  and without bothering so much with MySQL but I was just wondering how to do this.
Please don't use f-strings, or any string formatting, for passing values to SQL queries. That's the road to SQL injection. Now you may be thinking: "it's a tuple of integers, what bad could happen?" First of all a single element Python tuple's string representation is not valid SQL. Secondly, someone may follow the example with user controllable data other than tuples of ints (so having these bad examples online perpetuates the habit). Also the reason why you have to resort to your "cunning" solution is using the wrong tools for the job.The correct way to pass values to SQL queries is to use placeholders. In case of pymysql the placeholder is – a bit confusingly – . Don't mix it with manual %-formatting. In case of having to pass a variable amount of values to a query you do have to resort to some string building, but you build the placeholders, not the values:
A solution with  is the following:A rather tricky solution with  is the following:But as  mentions,  I may get a  with it because  cannot  accommodate one-element tuples as such.Additionally, using  to unpack tuples in strings is perhaps more difficult than using  as others have mentioned before (Formatted string literals in Python 3.6 with tuples) since you cannot use  to unpack a tuple within a . However, perhaps you may come up with a solution for this (which is using a iterator?) to produce this even though I do not have the solution for this in my mind right now. You are welcome to post a solution of this kind if you have it in your mind.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
