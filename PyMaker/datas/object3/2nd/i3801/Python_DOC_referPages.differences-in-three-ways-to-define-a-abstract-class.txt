Natural Text
I found multiple (slightly different) ways to define abstract classes in Python. I read the documentation and also could not find an answer here on stackoverflow. The main difference between the three examples (see code below) is: sets a new metaclass  explicitly inherits from  inherits from  but defines  classesIt seems that  and  are not different (i.e. also  has the new metaclass ). However, class  remains of type . What are the impacts of not defining a metaclass for ? When is it necessary to define the metaclass or is it wrong/bad style to not define the  metaclass for an abstract class? Nonetheless, the class  seems to behave as I expect from an ABC.
The  class is necessary to actually enforce the  behaviour. Its itention is to disallow instantiation of any classes which do not implement the abstract method. The decorator itself cannot enforce that, the metaclass is enforcing the decorator upon instantiation:However: So, without the metaclass, the  decorator doesn't do anything. is merely a shorthand so you can do  instead of , that is all:A helper class that has  as its metaclass. With this class,  an abstract base class can be created by simply deriving from   avoiding sometimes confusing metaclass usage [..]https://docs.python.org/3/library/abc.html#abc.ABC


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABC
