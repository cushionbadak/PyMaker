Natural Text
Check out this code in my interpreter:In the first line and second lines, I define two lists.  Then I proceed to reverse the order of the  first_list and second_list in two different ways.  The first reversal succeeds whereas the second way is rejected.Putting the variable inside the reverse function as a parameter is how I initially would naturally use it if I were to write a script (which evidently would be rejected by the Python interpreter).  The instructor in the Udemy course I am taking suggests putting the variable in front of the function separated by a dot.  I understand that the computer dictates what works and what doesnâ€™t. I just want to know why since my (faulty) approach comes so much more naturally.How come variables sometimes have to go in front of the function when other times it can go inside a function as a parameter?  I suppose the much more important question I now have is this: When I am manipulating variables, how do I know when to put variables outside vs inside?Thanks for your attention.
This occurs because the  function is created as an  of the  object. Thus,  is not a function you can call and provide  as an argument.It's important to know that everything in Python is an object, and every object has attributes.For example, if I create a list in the python interpreter, , and then do  (this shows the attributes of ), I get the following:And therein lies the  function for the object .
reverse is a method of the list data type, python is looking for a definition of reverse when you call it without the dot notation.  If you had in your source code somewhere def reverse()... it would use that, or if you had imported a library that defined reverse.  The first list works because first_list is a object that has a method called reverse.python3 documentation


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
