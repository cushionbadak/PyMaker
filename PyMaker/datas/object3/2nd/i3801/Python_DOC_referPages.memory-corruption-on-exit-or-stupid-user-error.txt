Natural Text
I have a problem where the objects holding imported python modules are being corrupted, but only after  is explicitly called.  This is also intermittent.  I have stripped out a large portion of the code except for the "standard"  module (I have used the very latest version of that).  Very little actually happens.If the program calls sys.exit() then some object IDs get changed to garbage values.  If I leave that out then there are no errors!Is this really a bug in Python? That seems unlikely. What did I do wrong?===== main program "bug_happens.py"===== very stripped down usbtmc module=========================================================== Many times this works fine:=========================================================== About 50% of the time is does this:=========================================================== Occasionally it does this:Running on a Mint 18.3 system with python3 3.5.1-3and either python3-usb 1.0.0~b2-2 or a fresh git pull of pyusb-1.0.2
When the Python interpreter exits, the runtime is being torn down and the ordering of object deletion is not something you can rely on. In fact, it is not even guaranteed that  methods are called at all when the interpreter exits.The objects a custom  needs to access (including other modules) may already have been deleted or set to , which would cause exactly the exceptions you're seeing here ('NoneType' object has no attribute...)That's not really a "memory corruption", it's just poor code written for the  class. Any necessary setup/teardown context should be managed with  and , since  is unsuitable for this purpose. So, this issue is more or less a bug in . This code could possibly be improved by taking advantage of a datamodel guarantee documented here:Python guarantees that globals whose name begins with a single underscore are deleted from their module before other globals are deleted; if no other references to such globals exist, this may help in assuring that imported modules are still available at the time when the  method is called.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__del__
