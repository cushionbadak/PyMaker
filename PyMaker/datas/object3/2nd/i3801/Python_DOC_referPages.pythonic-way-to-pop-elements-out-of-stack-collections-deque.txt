Natural Text
TL;DR: see code at the bottom.I'm implementing a Reverse Polish Notation calculator in Python, using the collections.deque stack implementation.Since I'm handling also the case of functions with multiple arguments, I use a separator symbol that I place before the actual arguments. For example, given the following expression as input: , the Shunting Yard algorithm produces the following iterable: .When I iterate over it, the separator and the numbers are pushed onto a stack; if a function is encountered, all the previous elements up to the separator are "popped" out of the stack and appended into a list.Is there a more pythonic way to pop out elements from the end of a stack up to a certain condition?My code so far:
What you've got is fine; there is no reasonable way to accomplish this task with the iterator protocol (which is usually how you'd clean up stuff like this).In theory, if you flipped the order of your  (so the top was on the left, not the right), you might be able to use  to find the separator, then do a bulk slice and , then a bulk  slice, but it's hardly worth the trouble (especially when the separator is likely to be found relatively quickly).
Here is another solution with iterators. I wouldn't call it an improvement over your current solution, but it is different.
With the help of a friend we ended up the iter keyword with  as sentinel:which should be one of the most pythonic and KISS way to solve this, so I'm going to accept this as the answer.Thanks for the help folks!


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/functions.html#iter
