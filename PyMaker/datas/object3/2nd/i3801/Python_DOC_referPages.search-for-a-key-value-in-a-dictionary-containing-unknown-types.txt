Natural Text
I haven't found is there a way to do this.Let's say I recieve a JSON object like this:It's hard to instantly say, how should I get value from 3_data key: I know about , it helps to understand structure a bit.But sometimes data is huge, and it takes timeAre there any methods that may help me with that?
Here are a family of recursive generators that can be used to search through an object composed of dicts and lists.  yields a tuple containing a list of the dictionary keys and list indices that lead to the key that you pass in; the tuple also contains the value associated with that key. Because it's a generator it will find all matching keys if the object contains multiple matching keys, if desired.outputTo get a single key list you can pass  to the  function. And if you want to use a key list to fetch the associated value you can use a simple  loop.outputIf the key may be missing, then give  an appropriate default tuple. Eg:outputNote that this code is for Python 3. To run it on Python 2 you need to replace all the  statements, eg replacewithHow it worksTo understand how this code works you need to be familiar with recursion and with Python generators. You may also find this page helpful: Understanding Generators in Python; there are also various Python generators tutorials available online.The Python object returned by  or  is generally a dict, but it can also be a list. We pass that object to the  generator as the  arg, along with the  string that we want to locate.  then calls either  or , as appropriate, passing them the object, the key, and an empty list , which is used to collect the dict keys and list indices that lead to the key we want. iterates over each (k, v) pair at the top level of its  dict arg. If  matches the key we're looking for then the current  list is yielded with  appended to it, along with the associated value. Because  is recursive the yielded (indices list, value) pairs get passed up to the previous level of recursion, eventually making their way up to  and then to the code that called . Note that this is the "base case" of our recursion: it's the part of the code that determines whether this recursion path leads to the key we want. If a recursion path never finds a key matching the key we're looking for then that recursion path won't add anything to  and it will terminate without yielding anything.If the current  is a dict, then we need to examine all the (key, value) pairs it contains. We do that by making a recursive call to , passing that  is its starting object and the current  list. If the current  is a list we instead call , passing it the same args. works similarly to  except that a list doesn't have any keys, it only contains values, so we don't perform the  test, we just recurse into any dicts or lists that the original list contains.The end result of this process is that when we iterate over  we get pairs of (indices, value) where each  list is the sequence of dict keys and list indices that succesfully terminate in a dict item with our desired key, and  is the value associated with that particular key.If you'd like to see some other examples of this code in use please see how to modify the key of a nested Json and How can I select deeply nested key:values from dictionary in python. Also take  look at my new, more streamlined  function.


Answer URL
https://docs.python.org/3/tutorial/classes.html#generators
