Natural Text
I am writing a program in python which contains many constant variables. I would like to create a file which will hold all these variables like .h file in C that contains many #define. I tried to use configparser however I didn't find it easy and fun to use. Do you know a better way? 
Python does not allow constant declarations like C or C++.Normally in Python, constants are capitalized (PEP 8 standards) which helps the programmer know it's a constant. Ex. Another valid way of doing it which I don't use but heard of, is using a method:Now in theory, calling  acts just like a constant.EDITLike the comments says, someone can go and change the value by callingbut don't forget the same person can call  in the first example and change the initial value. In both cases it is unlikely but possible.
There are no constants in Python, the way they exist in C or Java. You can imitate them by functions:You can wrap the function call in a property, and thus make it look like a variable:With a bit of meta stuff, one can get unsettable attributes with a terse syntax:Now you can access  as a normal value, but can't assign to it. You can define several classes decorated with , as you might use several  files.
You can use something like this:Files structure:settings.py__init__.pymain.pyOverwritten __setattr__ in Settings class makes all the attributes read-only.The only requirement is to have all the constants in your settings.py written in capital letters.But be aware, that it's not gonna work if you import variables directly:
Python isn't preprocessed. You can just create a file constant.pyImport constant.py file when ever you want constant values like below example.This way you can use constants across project.You also have the option, if the constants are tied to a particular class and used privately within that class of making them specific to that class:If you want to define and use entire module, making them on top of the module


Answer URL
https://docs.python.org/3/library/configparser.html
