Natural Text
I have designed a class. It is pretty standard, with some method attributesNow I would like to create a class which contains a set of foo instances.I would then like to class the  methods on all the foo instances.I could do:However, my list of  is quite long so how could I obtain this behavior in a succint way?Maybe with alternative design completely?
You could just implement  and delegate that call to list of . I'm sure there is a more elegant way to do this:
You're looking for a way to construct a bunch of methods dynamically. This is often not a good idea—but sometimes it is. (For example, consider libraries like PyObjC and pythoncom that build dynamic proxies to ObjC and COM classes that you don't even know about until runtime. How else could you do that?)So, you should definitely think through whether you actually want and need this—but, if you do, there are two basic approaches.Building a static class dynamicallyIf you're only trying to wrap up a collection of  objects, you can create all the methods in a loop. Methods aren't anything too magical; you just define them the same as any other function, and assign them to the class.The only tricky bit there is that you can't just write , because  is only available as a string. So we have to use  to do it:If there's some kind of rule that specifies which methods you want to forward, instead of a list of a bunch of method names, you'd do something like:Building a dynamic class staticallyIf you're trying to wrap up anything that meets some basic qualifications, rather than some specific list of methods of some specific class, you won't know what you want to wrap up, or how you want to wrap it, until someone tries to call those methods. So you have to catch the attempt to look up an unknown method, and build the wrapper on the fly. For this, we override :This version returns functions that act like bound methods if you don't look too closely, rather than actual bound methods that can be introspected. If you want the latter, bind a method explicitly, by adding  as a parameter to , and then calling  on  and returning the result. (And if you don't know what that means, you don't want to write this part…)


Answer URL
https://docs.python.org/3/library/functions.html#setattr
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
