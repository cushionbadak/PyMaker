Natural Text
I have a virtualenv named  and it is activate:and I wrote codes that I'll run it in the virtualenv ():but when I run  file: does not execute the command () in the virtualenv i.e How to run  command in the current virtualenv session?
A child process can't run commands in its parent process without that process's involvement.This is why  requires usage as  to invoke the shell commands it emits on output, for example. Thus, the literal thing you're asking for here is impossible.Fortunately, it's also unnecessary.virtualenvs use environment variables inherited by child processes.This means that you don't actually need to use the same shell that has a virtualenv activated to start a new Python interpreter intended to use the interpreter/libraries/etc. from that virtualenv. must be passed a list, or  must be used.Either do this (which is better!)Or this (which is worse!)
If you want to run a script with the same Python executable being used to run the current script, don't use  and rely on the path being set up properly, just use :A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.This works if you executed the script with  relying on the active virtualenv's PATH. It also works if you executed the script with  to ignore the PATH and test your script with a specific interpreter. Or if you executed the script with , relying on a shbang line created at installation time by . Or if the script was run as a CGI depending on your Apache configuration. Or if you d the executable, or did something else that scraped down your environment. Or almost anything else imaginable.1As explained in Charles Duffy's answer, you still need to use a list of arguments instead of a string (or use , but you rarely want to do that). So:1. Well, not quite… Examples of where it doesn't work include custom C programs that embed a CPython interpreter, some smartphone mini-Python environments, old-school Amiga Python, … The one most likely to affect you—and it's a pretty big stretch—is that on some *nix platforms, if you write a program that s Python by passing incompatible names for the process and arg0,  can end up wrong.


Answer URL
https://docs.python.org/3/library/sys.html#sys.executable
