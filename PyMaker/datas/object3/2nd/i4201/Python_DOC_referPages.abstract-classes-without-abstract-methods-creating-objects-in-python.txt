Natural Text
Basically, I knew that abstract base classes are used as skeleton classes just like regular classes, but enforces that abstract methods should be overridden by the child/inherited classes if it has one like belowSo we can create an object of  as aboveWe know we can't instantiate an abstract class as it meant to be just skeleton and we will get an error if we try to instantiate it as belowBut what my actual query about posting this  is if we create an abstract class by using , without abstract methods, I can able to create an instance of the abstract class which should not be the case(correct me if I am wrong)OOOPPPSS it worked, we can actually create an object of abstract classes without abstract methods? So please let me know the key points behind this
From the docs:A class that has a metaclass derived from  cannot be  instantiated unless all of its abstract methods and properties are  overridden.Conversely, this means that any class with no abstract methods or properties like your  can be instantiated.If you want to disallow instantiation of the topmost parent class, you can write a custom class that performs a type check in its  method:You can also write a  method that prevents instantiation of classes with no abstract methods:
Since Python is a dynamic languages, the very idea of enforcing classes to inherit from a particular class goes against duck typing. Hence, the use case of Abstract classes in Python is pretty limited and provided more for a conventional reason. Still if you want to block the instantiation of a class without declaring virtual methods, you can,  however,


Answer URL
https://docs.python.org/3/library/abc.html#abc.abstractmethod
https://docs.python.org/3/reference/datamodel.html#object.__new__
