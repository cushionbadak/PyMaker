Natural Text
I am working on a project involving object detection through deep learning, with the underlying detection code written in C. Due to the requirements of the project, this code has a Python wrapper around it, which interfaces with the required C functions through ctypes. Images are read from Python, and then transferred into C to be processed as a batch.In its current state, the code is very unoptimized: the images (640x360x3 each) are read using  then stacked into a numpy array. For example, for a batch size of 16, the dimensions of this array are (16,360,640,3). Once this is done, a pointer to this array is passed through ctypes into C where the array is parsed, pixel values are normalized and rearranged into a 2D array. The dimensions of the 2D array are 16x691200 (16x(640*360*3)), arranged as follows.`The C code for doing this currently looks like this, where the pixel values are accessed through strides and arranged sequentially per image. nb is the total number of images in the batch (usually 16); h, w, c are 360,640 and 3 respectively.And the corresponding Python code that calls this function: (array is the original numpy array)As of now, this ctypes implementation takes about 35 ms for a batch of 16 images. I'm working on a very FPS critical image processing pipeline, so is there a more efficient way of doing these operations? Specifically:Can I read the image directly as a 'strided' one dimensional array in Python from disk, thus avoiding the iterative access and copying? I have looked into numpy operations such as:  which should achieve something similar, but this is actually taking more time possibly because of it being called in Python.Would Cython help anywhere during the read operation?
Regarding the  method, I'm assuming that it's pretty slow as python has to do some memory works to return a C-like contiguous array. EDIT 1: I saw this answer, apparently openCV's  function should already return a contiguous array.I am not very familiar with , but happen to use the PyBind library and can only recommend using it. It implements Python's buffer protocol hence allowing you to interact with python data with almost no overhead.I've answered a question explaining how to pass a  array from Python to C/C++, do something dummy to it in C++ and return a dynamically created array back to Python.EDIT 2 : I've added a simple example that receives a Numpy array, send it to C and prints it from C. You can find it here. Hope it helps!EDIT 3 :To answer your last comment, yes you can definitely do that.You could modify your code to (1) instantiate a 2D numpy array in C++, (2) pass its reference to the data to your C function that will modify it instead of declaring a Matrix and (3) return that instance to Python by reference.Your function would become:And you'd add, in your C++ wrapper code Do not forget to modify the prototype of the C++ wrapper function to return a  array like:This should work, I didn't test it though :)


Answer URL
https://docs.python.org/3/c-api/buffer.html
