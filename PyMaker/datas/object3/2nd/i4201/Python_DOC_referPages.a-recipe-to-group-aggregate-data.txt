Natural Text
I have some data stored in a list that I would like to group based on a value.For example, if my data isand I want to group it by the first value in each tuple to gethow would I go about it?More generally, what's the recommended way to group data in python? Is there a recipe that can help me?
The go-to data structure to use for all kinds of grouping is the dict. The idea is to use something that uniquely identifies a group as the dict's keys, and store all values that belong to the same group under the same key.As an example, your data could be stored in a dict like this:The integer that you're using to group the values is used as the dict key, and the values are aggregated in a list.The reason why we're using a dict is because it can map keys to values in constant O(1) time. This makes the grouping process very efficient and also very easy. The general structure of the code will always be the same for all kinds of grouping tasks: You iterate over your data and gradually fill a dict with grouped values. Using a  instead of a regular dict makes the whole process even easier, because we don't have to worry about initializing the dict with empty lists.Once the data is grouped, all that's left is to convert the dict to your desired output format:The Grouping RecipeThe following section will provide recipes for different kinds of inputs and outputs, and show how to group by various things. The basis for everything is the following snippet:Each of the commented lines can/has to be customized depending on your use case.InputThe format of your input data dictates how you iterate over it.In this section, we're customizing the  line of the recipe.A list of valuesMore often than not, all the values are stored in a flat list:In this case we simply iterate over the list with a  loop:Multiple listsIf you have multiple lists with each list holding the value of a different attribute likeuse the  function to iterate over all lists simultaneously:This will make  a tuple of .Multiple dicts or a list of dictsIf you want to combine multiple dicts likeFirst put them all in a list:And then use two nested loops to iterate over all  pairs:In this case, the  variable will take the form of a 2-element tuple like  or .GroupingHere we'll cover various ways to extract group identifiers from your data.In this section, we're customizing the  line of the recipe.Grouping by a list/tuple/dict elementIf your values are lists or tuples like  and you want to group them by the nth element:The syntax is the same for dicts, so if you have values like  and you want to group by the first name:Grouping by an attributeIf your values are objects like  and you want to group them by an attribute, like :Grouping by a key functionSometimes you have a function that returns a value's group when it's called. For example, you could use the  function to group values by their length:Grouping by multiple valuesIf you wish to group your data by more than a single value, you can use a tuple as the group identifier. For example, to group strings by their first letter and their length:Grouping by something unhashableBecause dict keys must be hashable, you will run into problems if you try to group by something that can't be hashed. In such a case, you have to find a way to convert the unhashable value to a hashable representation.sets: Convert sets to frozensets, which are hashable:dicts: Dicts can be represented as sorted  tuples:Modifying the aggregated valuesSometimes you will want to modify the values you're grouping. For example, if you're grouping tuples like  and  by the first element, you might want to remove the first element from each tuple to get a result like  rather than .In this section, we're customizing the  line of the recipe.No changeIf you don't want to change the value in any way, simple delete the  line from your code.Keeping only a single list/tuple/dict elementIf your values are lists like  and you only want to keep the :Or if they're dicts like  and you only want to keep the first name:    Removing the first list/tuple elementIf your values are lists like  and  and you want to discard the first element of each tuple to get a group like , use the slicing syntax:Removing/Keeping arbitrary list/tuple/dict elementsIf your values are lists like  or dicts like  and you want delete or keep only some of these elements, start by creating a set of elements you want to keep or delete. For example:Then choose the appropriate snippet from this list:To keep list elements: To delete list elements: To keep dict elements: To delete dict elements: OutputOnce the grouping is complete, we have a  filled with lists. But the desired result isn't always a (default)dict.In this section, we're customizing the  line of the recipe.A regular dictTo convert the defaultdict to a regular dict, simply call the  constructor on it:A list of  pairsTo get a result like  from the dict , use a list comprehension:A nested list of just valuesTo get a result like  from the dict , use :A flat list of just valuesTo get a result like  from the dict , flatten the dict with a list comprehension:Flattening iterable valuesIf your values are lists or other iterables likeand you want a flattened result likeyou have two options:Flatten the lists with a dict comprehension:Avoid creating a list of iterables in the first place, by using  instead of . In other words, changetoAnd then just set .A sorted listDicts are unordered data structures. If you iterate over a dict, you never know in which order its elements will be listed. If you don't care about the order, you can use the recipes shown above. But if you do care about the order, you have to sort the output accordingly.I'll use the following dict to demonstrate how to sort your output in various ways:Keep in mind that this is a bit of a meta-recipe that may need to be combined with other parts of this answer to get exactly the output you want. The general idea is to sort the dictionary keys before using them to extract the values from the dict:Keep in mind that  accepts a key function in case you want to customize the sort order. For example, if the dict keys are strings and you want to sort them by length:Once you've sorted the keys, use them to extract the values from the dict in the correct order:Remember that this can be combined with other parts of this answer to get different kinds of output. For example, if you want to keep the group identifiers:For your convenience, here are some commonly used sort orders:Sort by number of values per group: Counting the number of values in each groupTo count the number of elements associated with each group, use the  function:If you want to count the number of distinct elements, use  to eliminate duplicates:An exampleTo demonstrate how to piece together a working solution from this recipe, let's try to turn an input ofintoIn other words, we're grouping lists by their 2nd element.The first two lines of the recipe are always the same, so let's start by copying those:Now we have to find out how to loop over the input. Since our input is a simple list of values, a normal  loop will suffice:Next we have to extract the group identifier from the value. We're grouping by the 2nd list element, so we use indexing:The next step is to transform the value. Since we only want to keep the first element of each list, we once again use list indexing:Finally, we have to figure out how to turn the dict we generated into a list. What we want is a list of values, without the groups. We consult the Output section of the recipe to find the appropriate dict flattening snippet:Et voilÃ :
itertools.groupbyThere is a general purpose recipe in  and it's .A schema of this recipe can be given in this form:The two relevant parts to change in the recipe are:define the grouping key (extractKey): in this case getting the first item of the tuple:aggregate grouped results (if needed) (aggregate):  contains all the matching tuples for each key  (e.g. ,  for key , and  for key ), we want to take only the second item of the tuple and concatenate all of those in one string:Example:Sometimes, , , or both can be inlined into a one-liner (we omit sort key too, as that's redundant for this example):Pros and consComparing this recipe with the recipe using  there are pros and cons in both cases. tends to be slower (about twice as slower in my tests) than the  recipe.On the other hand,  has advantages in the memory constrained case where the values are being produced on the fly; you can process the groups in a streaming fashion, without storing them;  will require the memory to store all of them.
Pandas groupbyThis isn't a recipe as such, but an intuitive and flexible way to group data using a function. In this case, the function is .AdvantagesFits nicely into workflows that only require  output at the end of a sequence of vectorisable steps.Easily adaptable by changing  to  or other reducing function.DisadvantagesOverkill for an isolated task: requires  ->  ->  conversion.Introduces dependency on a 3rd party library.
Multiple-parse list comprehensionThis is inefficient compared to the  and  solutions.However, for small lists where performance is not a concern, you can perform a list comprehension which parses the list for each unique identifier.The solution can be split into 2 parts: extracts the unique set of identifiers which we iterate via a  loop within the list comprehension. applies the logic we require for the desired output.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#func-tuple
https://docs.python.org/3/library/functions.html#hash
https://docs.python.org/3/library/functions.html#func-set
https://docs.python.org/3/library/functions.html#func-frozenset
https://docs.python.org/3/library/functions.html#func-dict
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/library/functions.html#func-dict
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/stdtypes.html#dict.values
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#func-set
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.groupby
