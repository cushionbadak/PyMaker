Natural Text
I am trying to understand python's class inheritance methods and I have some troubles figuring out how to do the following:How can I inherit a method from a class conditional on the child's input?I have tried the following code below without much success.I get the following output:While I would like to see:I guess the reason why  is used (instead of ) has to do with the python's MRO.
Calling  on either parent class does not change the inheritance structure of your classes, no. You are only changing what initialiser method is run in addition to  when an instance is created.  inherits from both  and , and all methods of  are shadowed by those on  due to the order of inheritance.If you need to alter class inheritance based on a value in the constructor, create two separate classes, with different structures. Then provide a different callable as the API to create an instance:The user of your API still has name  to call;  produces an instance of a different class from , but they both implement the same interface so this doesn't matter to the caller.If you have to have a common 'C' class to use in  or  tests, you could mix one in, and use the  method to override what subclass is returned: is called to construct the new instance object; if the  method returns an instance of the class (or a subclass thereof) then  will automatically be called on that new instance object. This is why  returns the result of  or ;  is going to be called for you.Demo of the latter:If neither of these options are workable for your specific usecase, you'd have to add more routing in a new  implementation on , which then calls either  or  based on . This becomes cumbersome really quickly when you have to do this for every single method, but a decorator could help there:then use that on empty methods on your class:This is, however, becoming very unpythonic and ugly.
While Martijn's answer is (as usual) close to perfect, I'd just like to point out that from a design POV, inheritance is the wrong tool here. Remember that implementation inheritance is actually a static and somehow restricted kind of composition/delegation, so as soon as you want something more dynamic the proper design is to eschew inheritance and go for full composition/delegation, canonical examples being the State and the Strategy patterns. Applied to your example, this might look something like:Then if you need to allow the user to specify the strategy by name (as string), you can add the factory pattern to the solution
Martijn's answer explained how to choose an object inheriting from one of two classes. Python also allows to easily forward a method to a different class:But here class C does not inherit from A or B:Below is my original solution using monkey patching:it avoids the  attribute in C class, but is less readable...


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
