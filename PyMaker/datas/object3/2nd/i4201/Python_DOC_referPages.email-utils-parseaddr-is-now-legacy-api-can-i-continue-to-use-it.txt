Natural Text
I've spent some time reading the documentation of the email library module. We have got a new API. The old API is now marked legacy.I have only one small email application and I expected it won't be difficult to rewrite it to use the new and better API only. However I am unable to find a simple replacement for the simple  function. They say:There is no need to directly use these with the new API, since the  parsing and formatting they provide is done automatically by the  header parsing machinery of the new API.It may be true regarding the  module alone, but I need to pass RFC821-style addresses to  module functions expecting  and . Those SMTP Envelope addresses are basically stripped message header addresses and  can create them easily:Is there a comparably simple alternative in the new API (I must have overseen it)? If not, should I expect that a "legacy" API will stay in the library or it will be rather deprecated in the future?Note: I know  can extract the addresses from the message headers. I still like to pass addresses explicitly.
Short answer: Yes, you can keep using it, as of now.Long answer:PEP 4 specifies that before supported APIs are removed, they must be deprecated; specifies a process for deprecation; and lists all deprecated modules, current and historical.None of the "Legacy API" submodules currently documented under  are marked "deprecated" in PEP 4 or in their Python 3.6.5 documentation.  There is an open proposal to deprecate support for the  option in , but that is the only proposed deprecation to the  module I was able to turn up in searching.Documentation elsewhere in the  package indicates, to me anyway, that this is an API that receives a fair amount of attention and care, and is not neglected.  I see no obvious reason to fear that currently documented APIs there will be deprecated any time soon, even the ones in the "Legacy API" section.For example, this remark in :This module is part of the legacy (Compat32) email API. Its functionality is partially replaced by the contentmanager in the new API, but in certain applications these classes may still be useful, even in non-legacy code.tells me that the designation of "legacy" implies only that it is no longer considered the best, most preferred module to use for the most common purposes; there is no actual deprecation warning that the API will soon disappear.Of course, seeing no proposal for deprecation today is no guarantee that it will not suddenly be deprecated tomorrow; and I suppose one might expect a "Legacy API" to be a more likely target for deprecation.  But until deprecation is formally proposed, if not approved, there is in theory no reason to fear using an API; and considering the amazing length of the Python 2 to 3 transition period (what is it, 11 years now?), I think you have little to worry about with this API.


Answer URL
https://docs.python.org/3/library/email.html#module-email
https://docs.python.org/3/library/email.util.html
https://docs.python.org/3/library/email.mime.html
https://docs.python.org/3/library/email.mime.html
