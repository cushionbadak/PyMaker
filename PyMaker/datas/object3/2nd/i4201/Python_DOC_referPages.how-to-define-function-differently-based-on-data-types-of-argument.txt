Natural Text
I am trying to define a function that works differently based on given argument. Below is a predicate filter, which is for given string type argument, it tags part-of-speeches of each word then returns that is adjective, adverb or verb. But sometimes, the given argument could be a list in my entire system pipelines, of course, I could define another one, however I don't want to define another function which exactly works the same.I could do :if type(sentence) == list -> blahblahblah and if type(sentence) == string -> blahblahblah.This is good, but I just wonder there would be another better way to do this.Any advice?     
This is exactly the kind of thing that both overloaded methods and generic functions are made for.Here's how to use  to implement it with generic functions:Of course I'm assuming that a bunch of your "stuff" is the same for the two cases, and it's a small, refactorable part of your "stuff" that has to differ. If the whole thing ends up being different, then you really should have two functions. If, on the other hand, the small part that's different is trivial—or if it's nearly impossible to factor out because it's closely coupled to everything else you're doing—you probably do want type-switching. But by checking , not checking :
This is a matter of style in my opinion, but what I would suggest is assessing the input at the top of the function, and then the rest of the function should be able to assume the same type. Something like..
I assume your filer function just process  type so far. and you have some sentence like:"hello girl! How do you do?"But there are also another data input with list like:["hello", "girl", "how", "do", "you", "do?"]and if I assume right. how about this, just simple covert the list to string which you have already implement the function can process this.
If you want your function to behave differently based on the type of the sentence argument, one way to accomplish this is as follows:


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
