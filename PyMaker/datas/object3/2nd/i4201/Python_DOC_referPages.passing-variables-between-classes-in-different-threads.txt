Natural Text
Assume I have two classes that use threadsThe variable  in  will change over time and  needs to be aware of these changes. It makes sense to me, but I wonder if there is something fundamental here that could fail eventually. is this correct in python?
The actual sharing part is the same question as "how do I share a value with another object?" without threads, and all the same solutions will work. For example. you're already passing the  instance into the  initializer, so just get it from there:But is this thread-safe?Well, yes, but only because you never actually start the background thread. But I assume in your real code, you're going to have two threads running at the same time, both accessing that  value. In which case it's not thread-safe without some kind of synchronization. For example:And now, instead of this:… you do this:And likewise, instead of this:… you do this:Or… as it turns out, in CPython, updating a value for a single key in a dict (only a builtin , not a subclass or custom mapping class!) has always been atomic, and probably always will be. If you want to rely on that fact, you can. But I'd only do that if the lock turned out to be a significant performance issue. And I'd comment every use of it to make it clear, too.If you'd rather pass values instead of share them, the usual answer is  or one of its relatives.But this requires a redesign of your program. For example, maybe you want to pass each new/changed key-value pair over the queue. That would go something like this:
Although it is highly inefficient and certainly not the most common way you could use files to transfer the data. One thread writes the data into the file e.g. as a json string and the other thread reads it. 


Answer URL
https://docs.python.org/3/library/queue.html
