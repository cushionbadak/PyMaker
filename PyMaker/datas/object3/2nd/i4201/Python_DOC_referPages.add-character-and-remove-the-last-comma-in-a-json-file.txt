Natural Text
I am trying to create a JSON file through a CSV. Below code creates the data however not quite where I want it to be. I have some experience in python. From my understanding the JSON file should be written like this [{},{},...,{}].How do I?:I am able to insert the ',', however how do I remove the last ','?How do I insert '[' at the very beginning and ']' at the very end? I tried inserting it into outputfile.write('['...etc), it shows up too many places. Not include header on the first line of json file.Names.csv: Code: Output so far: 
First, how do you skip the header? That's easy:However, you may want to consider using a  for input. It handles reading the header line, and using the information there to create a dict for each row, and splitting the rows for you (as well as handling cases you may not have thought of, like quoted or escaped text that can be present in CSV files):Now onto the harder problem.A better solution would probably be to use an iterative JSON library that can dump an iterator as a JSON array. Then you could do something like this:The stdlib  has an example in the docs that does exactly this—although not very efficiently, because it first consumes the entire iterator to build a list, then dumps that:And really, if you're willing to build a whole list rather than encode line by line, it may be simpler to just do the listifying explicitly:You can go further by also overriding the  method, but this will be a lot less trivial, and you'd probably want to look for an efficient, well-tested streaming iterative JSON library on PyPI instead of building it yourself from the  module.But, meanwhile, here's a direct solution to your question, changing as little as possible from your existing code:This trick—treating the first element special rather than the last—simplifies a lot of problems of this type.Another way to simplify things is to actual iterate over adjacent pairs of lines, using a minor variation on the  example in the  docs:This is just as efficient as the previous version, and conceptually simpler—but a lot more abstract.
With a minimal edit to your code, you can create a list of dictionaries in Python and dump it to file as JSON all at once (assuming your dataset is small enough to fit in memory):As an aside, you should not use  as a variable name in Python as it is a built-in function.
Pandas can handle this with ease:
Seems like it would be a lot easier to use the  class instead of reinventing the wheel:Contents of  file folloing execution (I used  just to make it more human readable):


Answer URL
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/library/json.html#json.JSONEncoder.default
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/functions.html#id
