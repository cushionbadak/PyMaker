Natural Text
suppose  is a dict that contains a list of listssuch as I want to merge each value in  and then flatten it once to a list so that it will become .
If you only need unique elements from the list without maintaining the order of elements in initial list, then you may use  here with . You may use these with list comprehension to achieve your desired list as:Note: since dictionaries are unordered in Python <3.6, the order of sub-lists in the resultant lists might differ.For preserving the order of elements in the sublist while merging, take a look at: Pythonic way to merge two overlapping lists, preserving order
you can achieve the same result with a one-line comprehension, chaining and using a set + sortoutputs:
I found a possible solution, but could anyone tell me if there's a simpler way?
You can use  with list comprehension:Output:


Answer URL
https://docs.python.org/3/library/functions.html#func-set
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
