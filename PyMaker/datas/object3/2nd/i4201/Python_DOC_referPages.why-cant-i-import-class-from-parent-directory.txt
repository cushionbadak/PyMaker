Natural Text
I am running Python 2.5.This is my folder tree:(I also have  in each folder, omitted here for readability)How do I import the  module from inside the  module? I am hoping it is possible to do without tinkering with sys.path.Note: The main module being run is in the  folder.
It seems that the problem is not related to the module being in a parent directory or anything like that.You need to add the directory that contains  to PYTHONPATHYou said that  worked with you, that probably means that you added  itself (not its parent) to PYTHONPATH.
You could use relative imports (python >= 2.5):(What’s New in Python 2.5) PEP 328: Absolute and Relative ImportsEDIT: added another dot '.' to go up two packages
Relative imports (as in ) only work in a package.To import 'mymodule' that is in the parent directory of your current module:edit: the  attribute is not always given. Instead of using  I now suggested using the inspect module to retrieve the filename (and path) of the current file
If adding your module folder to the PYTHONPATH didn't work, You can modify the sys.path list in your program where the Python interpreter searches for the modules to import, the python documentation says:When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. sys.path is initialized from these locations:the directory containing the input script (or the current directory).PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).the installation-dependent default.After initialization, Python programs can modify sys.path. The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. Knowing this, you can do the following in your program:
I posted a similar answer also to the question regarding imports from sibling packages. You can see it here. The following is tested with Python 3.6.5, (Anaconda, conda 4.5.1), Windows 10 machine.Solution without sys.path hacksSetupI assume the same folder structure as in the questionI call the  the root folder, and in my case it is located in .Steps1) Add a setup.py to the root folderThe contents of the  can be simplyBasically "any" setup.py would work. This is just a minimal working example.2) Use a virtual environmentIf you are familiar with virtual environments, activate one, and skip to the next step. Usage of virtual environments are not absolutely required, but they will really help you out in the long run (when you have more than 1 project ongoing..). The most basic steps are (run in the root folder)Create virtual envActivate virtual env (Linux) or  (Win)To learn more about this, just Google out "python virtual env tutorial" or similar. You probably never need any other commands than creating, activating and deactivating. Once you have made and activated a virtual environment, your console should give the name of the virtual environment in parenthesis3) pip install your project in editable stateInstall your top level package  using . The trick is to use the  flag when doing the install. This way it is installed in an editable state, and all the edits made to the .py files will be automatically included in the installed package. In the root directory, run (note the dot, it stands for "current directory")You can also see that it is installed by using  4) Import by appending  to every importIn this example, the  would be . This has the advantage that you will not run into name collisions with other module names (from python standard library or 3rd party modules).Example Usagenib.pylife.pyRunning life.py
You can use OS depending path in "module search path" which is listed in sys.path .So you can easily add parent directory like following If you want to add parent-parent directory,
Don't know much about python 2.In python 3, the parent folder can be added as follows:...and then one is able to import modules from it
Here is an answer that's simple so you can see how it works, small and cross-platform.It only uses built-in modules (,  and ) so should workon any operating system (OS) because Python is designed for that.Shorter code for answer - fewer lines and variablesFor less lines than this, replace the second line with ,add  at the start of  (line 3) and remove the first line. - however this imports all of the module so could need more time, memory and resources.The code for my answer (longer version)It uses an example from a Stack Overflow answer How do I get the path of the currentexecuted file in Python? to find the source (filename) of running code with a built-in tool.Next, wherever you want to find the source file from you just use:My code adds a file path to , the python path listbecause this allows Python to import modules from that folder.After importing a module in the code, it's a good idea to run  on a new linewhen that added folder has a module with the same name as another module that is importedlater in the program. You need to remove the list item added before the import, not other paths.If your program doesn't import other modules, it's safe to not delete the file path becauseafter a program ends (or restarting the Python shell), any edits made to  disappear.Notes about a filename variableMy answer doesn't use the  variable to get the file path/filename of runningcode because users here have often described it as unreliable. You shouldn't use itfor importing modules from parent folder in programs used by other people.  Some examples where it doesn't work (quote from this Stack Overflow question):• it can't be found on some platforms • it sometimes isn't the full file path doesn't have a  attribute, but there is a workaroundWhen you run from IDLE with  there is no  attributeOS X 10.6 where I get 
Here is more generic solution that includes the parent directory into sys.path (works for me):

For me the shortest and my favorite oneliner for accessing to the parent directory is:or:os.getcwd() returns the name of the current working directory, os.path.dirname(directory_name) returns the directory name for the passed one.Actually, in my opinion Python project architecture should be done the way where no one module from child directory will use any module from the parent directory. If something like this happens it is worth to rethink about the project tree.Another way is to add parent directory to PYTHONPATH system environment variable.
When not being in a package environment with  files the pathlib library (included with >= Python 3.4) makes it very concise and intuitive to append the path of the parent directory to the PYTHONPATH:
Above mentioned solutions are also fine. Another solution to this problem isIf you want to import anything from top level directory. Then,Also, if you want to import any module from the parent directory. Then,Also, if you want to import any module from the parent directory. Then,This way you can import any particular method if you want to.
same sort of style as the past answer - but in fewer lines :Pfile returns the location you are working in
Work with libraries.Make a library called nib, install it using setup.py, let it reside in site-packages and your problems are solved.You don't have to stuff everything you make in a single package. Break it up to pieces.
In a Linux system, you can create a soft link from the "life" folder to the nib.py file. Then, you can simply import it like:


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/reference/import.html#the-module-cache
