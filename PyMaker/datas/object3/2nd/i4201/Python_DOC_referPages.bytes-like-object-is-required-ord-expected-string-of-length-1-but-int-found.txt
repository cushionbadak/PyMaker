Natural Text
I'm trying to work with:softScheck/tplink-smartplugI'm stuck in a loop of errors.  The fix for the first, causes the other, and the fix for the other, causes the first.  The code is all found in tplink-smartplug.py at the git link.As it is, result = 'Ðòøÿ÷Õï¶Å Ôùðè·Ä°Ñ¥ÀâØ£òçöÔîÞ£Þ' and I get the error (on line 92 in original file: sock_tcp.send(encrypt(cmd)):a bytes-like object is required, not 'str'so I change the function call too:and my error changes too: ord() expected string of length 1, but int foundI understand what ord() is trying to do, and I understand the encoding.  But what I don't understand is...how am I supposed to send this encrypted message to my smart plugin, if I can't give the compiler what it wants?  Is there a work around?  I'm pretty sure the original git was written in Python 2 or earlier. So maybe I'm not converting to Python 3 correctly?Thanks for reading, I appreciate any help.
In Python 2, the result of  is a  byte-string, which is a sequence of 1-byte  values. So, when you do , each  is a , and you have to call  to turn it into a number from 0 to 255.In Python 3, the result of  is a  byte-string, which is a sequence of 1-byte integers. So when you do , each  is already an  from 0 to 255, so you don't have to do anything to convert it. (And, if you try to do it anyway, you'll get the  you're seeing.)Meanwhile, you're building  up as a . In Python 2, that's fine, but in Python 3, that means it's Unicode, not bytes. Hence the other  you're seeing.For more details on how to port Python 2 string-handling code to Python 3, you should read the Porting Guide, especially Text versus binary data, and maybe the Unicode HOWTO if you need more background.One way you can write the code to work the same way for both Python 2 and 3 is to use a  for both values:Notice the  prefix on , which makes sure it's Unicode even in Python 2, and the  prefix on , which makes sure it's bytes even in Python 3. Although since you know  is pure ASCII, it might be simpler to just do this:If you don't care about Python 2, you can just for  without converting it to a , but you still probably want to use one for . (Being able to  an int directly to it makes for simpler code—and it's even more efficient, as a nice bonus.)


Answer URL
https://docs.python.org/3/howto/pyporting.html#text-versus-binary-data
https://docs.python.org/3/howto/unicode.html
