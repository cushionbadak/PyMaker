Natural Text
This is not a duplicate of Assignment inside lambda expression in Python, i.e., I'm not asking how to trick Python into assigning in a  expression.I have some λ-calculus background.  Considering the following code, itlooks like Python is quite willing to perform side-effects in expressions:But if I uncomment the linesI'll getWhy not?  What is the deeper reason behind this?As the code demonstrates, it cannot be about “purity” in afunctional sense.The only explanation I can imagine is that assignemts do notreturn anything, not even .  But that sounds lame and wouldbe easy to fix (one way: make lambda expressions return  ifbody is a statement).Not an answer:Because it's defined that way (I want to know why it's defined that way).Because it's in the grammar (see above).Use  if you need statements (I did not ask for how to getstatements into a function).“This would change syntax / the language / semantics” would be ok as an answer if you can come up with an example of such a change, and why it would be bad.
The entire reason  exists is that it's an expression.1 If you want something that's like  but is a statement, that's just .Python expressions cannot contain statements. This is, in fact, fundamental to the language, and Python gets a lot of mileage out of that decision. It's the reason indentation for flow control works instead of being clunky as in many other attempts (like CoffeeScript). It's the reason you can read off the state changes by skimming the first object in each line. It's even part of the reason the language is easy to parse, both for the compiler and for human readers.2Changing Python to have some way to "escape" the statement-expression divide, except maybe in a very careful and limited way, would turn it into a completely different language, and one that no longer had many of the benefits that cause people to choose Python in the first place.Changing Python to make most statements expressions (like, say, Ruby) would again turn it into a completely different language without Python's current benefits.And if Python did make either of those changes, then there'd no longer be a reason for  in the first place;2,3 you could just use  statements inside an expression.What about changing Python to instead make assignments expressions? Well, it should be obvious that would break "you can read off the state changes by skimming the first object in each line". Although Guido usually focuses on the fact that  is an error more often than a useful thing.The fact that Python does give you ways to get around that when needed, like  or even explicitly calling  on , doesn't mean it's something that should have direct syntactic support. Something that's very rarely needed doesn't deserve syntactic sugar—and even more so for something that's unusual enough that it should raise eyebrows and/or red flags when it actually is done.1. I have no idea whether that was Guido's understanding when he originally added  back in Python 1.0. But it's definitely the reason  wasn't removed in Python 3.0.2. In fact, Guido has, multiple times, suggested that allowing an LL(1) parser that humans can run in their heads is sufficient reason for the language being statement-based, to the point that other benefits don't even need to be discussed. I wrote about this a few years ago if anyone's interested.3. If you're wondering why so many languages do have a  expression despite already having : In many languages, ranging from C++ to Ruby, function aren't first-class objects that can be passed around, so they had to invent a second thing that is first-class but works like a function. In others, from Smalltalk to Java, functions don't even exist, only methods, so again, they had to invent a second thing that's not a method but works like one. Python has neither of those problems.4. A few languages, like C# and JavaScript, actually had perfectly working inline function definitions, but added some kind of  syntax as pure syntactic sugar, to make it more concise and less boilerplatey. That might actually be worth doing in Python (although every attempt at a good syntax so far has fallen flat), but it wouldn't be the current  syntax, which is nearly as verbose as .
There is a syntax problem: an assignment is a statement, and the body of a lambda can only have expressions. Python's syntax is designed this way1. Check it out at https://docs.python.org/3/reference/grammar.html.There is also a semantics problem: what does each statement return?I don't think there is interest in changing this, as lambdas are meant for very simple and short code. Moreover, a statement would allow sequences of statements as well, and that's not desirable for lambdas.It could be also fixed by selectively allowing certain statements in the lambda body, and specifying the semantics (e.g. an assignment returns , or returns the assigned value; the latter makes more sense to me). But what's the benefit?Lambdas and functions are interchangeable. If you really have a use-case for a particular statement in the body of a lambda, you can define a function that executes it, and your specific problem is solved.Perhaps you can create a syntactic macro to allow that with MacroPy3 (I'm just guessing, as I'm a fan of the project, but still I haven't had the time to dive in it).For example MacroPy would allow you to define a macro that transforms  into , so it should not be impossible to define the syntax for a lambda that calls a function you defined.1 A good reason to not change it is that it would cripple the syntax, because a lambda can be in places where expressions can be. And statements should not. But that's a very subjective remark of my own.
My answer is based on chepner's comment above and doesn't draw from any other credible or official source, however I think that it will be useful.If assignment was allowed in lambda expressions, then the error of confusing  (equality test) with  (assignment) would have more chances of escaping into the wild.Example:
As long as  (and ) is allowed inside , you can do assignments inside :But since lambda expressions allow only 1 expression to be defined inside their body (at least in Python ...), what would be the point of to allow an assignment inside a lambda? Its net effect would be to assign directly (without using any lambda) , isn't it?It would be even faster than doing it over a defined lambda, since you have at least one function lookup and execution less to execute  ...
There's not really any deeper reasons, it has nothing to do with lambda or functional language designs, it's just to avoid programmers from mixing = and == operators, which is a very common mistake in other languagesIF there's more to this story, I assume like MAYBE because python bdfl GVR has expressed his unloving sides to lambda and other functional features and attempted(and conceded) to remove them from python 3 altogether https://www.artima.com/weblogs/viewpost.jsp?thread=98196At the time of this writing the core devs were seen having a heated discussions recently on whether to include a limited name binding expression assignment, the debate is still on going so perhaps someday we may see it in lambda(unlikely)As you said it yourself it is definitely not about side effects or purity, they just don't want lambda to be more than a single expression... ... ...With that said, here's something about multi expressions assignments in lambda, read on if you're interestedIt is not at all impossible in python, in fact it was sometimes necessary to capture variable and sidestep late bindings by (ab)using kwargs(keyword arguments)edit:code example
As it stands, Python was designed as a statement-based language. Therefore assignment and other name bindings are statements, and do not have any result.The Python core developers are currently discussing PEP 572, which would introduce a name-binding expression.
I think all the fellows answered this already. We use mostly lambdas function when we just want to:-create some simple functions that do the work perfectly in a specific place(most of the time hidden inside some other big functions-The lambda function does not have a name -Can be used with some other built-ins functions such as map, list and so forth ...Please visit this webpage , this could be useful.Keep it up !!! https://www.python-course.eu/lambda.php


Answer URL
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/reference/expressions.html#lambda
