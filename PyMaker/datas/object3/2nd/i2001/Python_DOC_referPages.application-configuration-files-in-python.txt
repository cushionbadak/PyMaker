Natural Text
I am designing a multi tenant workload automation software (software to run Jobs automatically). For this I am creating a default Job configuration class. Configurations specified in this class will be applied to all types of Jobs by default. Tenants (owners of Jobs) can opt to override these default configurations for their specific class of Jobs.For example:Now if some tenant wants to override the default application configuration for their specific type of jobs, they can inherit from DefaultConfiguration class and override the configurations that they want to override. For example:For all other types of jobs, default configurations will be used. Individual jobs too have their definitions (mentioned in XML form). In an individual job definition XML file, class of job is also specified. For example, Hive Job will specify its class as "hive" in its definition. Example of job_definition file for one of the hive jobs:At runtime, Job Executor will check the class of Job that is specified in its definition file and pick the configuration class accordingly (for example: DefaultConfigurations, HiveJobs or SparkJobs in the example above). Job executor will construct a job_definition object from XML file and pass that Job definition object to the corresponding configuration class to get the final configurations that are needed to execute this job. This is needed so that some configurations can be added/removed based on some run time parameters too. Please note that the preference will be given to configurations overridden in individual Job definition file. I am not sure if the above way is the best way to write such configuration files in Python. 
Just parameterize  to set the attribute values as needed.If you don't want users manually passing around database and repository types, define class methods to wrap them.In neither case do I seen any reason to define distinct types to reflect information that is stored in the attributes.... unless the distinct typesoverride various methods in such a way that you no longer need to store the database and repository type information explicitly. (We're getting into designissues that can't be judged based solely on the information in your question, though.)
I am not sure if the above way is the best way to write such configuration files in Python.If the configuration is not required to be a XML, Python has a very good integration with json, so instead of using xml, you could json in your configuration. For example:Then, reading the config file will be simply:Now,  is a python object and you can access it normally such as:If XML is a requirement, I would suggest use a parser, such as etree or lxml, and then converting that into a python object.
I believe the most natural way to store this type of information in python is to use dictionnaries.Not only do they store (key, value) pairs, they can also overwrite each other, sparing your user the burden of inheritance.
I think the most frequently used way of configuration is py file in Python world. In flask and Django, they use py file as configuration file by default.User can define their configuration in a py file config.py like this:Simple to read and writeYou just need to tell your tenants those configuration fields, They need not to care about your implementation details.one config file for one job category, for example: config_hive.py for hive jobs.You can have a look at  module and  example.Flask config module also support construct configurations from a normal class, which is similar with your method. In my opinion, construct configuration from py file is more simple and stupid. User may not want to inherit from your configuration class and write  in their code,  is just clear and enough.You can also have a look at YAML, it seems that many system define their configuration in a YAML file, for example: Kubernetes job config, travis-ci config and so on.
You can use the ConfigParser, which is very easy to use, example:


Answer URL
https://docs.python.org/3/library/configparser.html
