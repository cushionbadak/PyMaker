Natural Text
I'd like to explore the hash table,The addresses tell that the keys are far away from each other,  especially key "python",I assumed that they are adjacent to one another.How could this happen? Is it running in high performance?                                
There are two ways we can interpret your confusion: either you expected the  to be the hash function for the keys, or you expected keys to be relocated to the hash table and, since in CPython the  value is a memory location, that the  values would say something about the hash table size. We can address both by talking about Python's dictionary implementation and how Python deals with objects in general.Python dictionaries are implemented as a hash table, which is a table of limited size. To store keys, a hash function generates an integer (same integer for equal values), and the key is stored in a slot based on that number using a modulo function:This can lead to collisions, so having a large range of numbers for the hash function to pick from is going to help reduce the chances there are such collisions. You still have to deal with collisions anyway, but you want to minimise that.Python does not use the  function as a hash function here, because that would not produce the same hash for equal values! If you didn't produce the same hash for equal values, then you couldn't use multiple  strings as a means to find the right slot again, as  then  would produce different  values and thus hash to different slots and you would not that the specific string value has already  been used as a key.Instead, objects are expected to implement a  method, and you can see what that method produces for various objects with the  function.Because keys stored in a dictionary must remain unchanged, Python won't let you store mutable types in a dictionary. Otherwise, if you can change their value, they would no longer be equal to another such object with the old value and shame hash, and you wouldn't find them in the slot that their new hash would map to.Note that Python puts all objects in a dynamic heap, and uses references everywhere to relate the objects. Dictionaries hold references to keys and values; putting a key into a dictionary does not re-locate the key in memory and the  of the key won't change. If keys were relocated, then a requirement for the  function would be violated, the documentation states: This is an integer which is guaranteed to be unique and constant for this object during its lifetime.As for those collisions: Python deals with collisions by looking for a new slot with a fixed formula, finding an empty slot in a predictable but psuedorandom series of slot numbers; see the  source code comments if you want to know the details. As the table fills up, Python will dynamically grow the table to fit more elements, so there will always be empty slots.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/library/functions.html#hash
https://docs.python.org/3/library/functions.html#id
