Natural Text
I hope that this is not a duplicate, I apologise if so, but have done some googling and looking around stack overflow and not found anything as yet...MCVEI understand that if a function keeps calling itself, this can't keep happening indefinitely without a stack overflow, and so an error is raised after a certain limit. For example:This gives rise to the following error:However, if I write a function such as the following:I get a slightly different error:The questionWhat is the  "in comparison" referring to in the above error. I guess what I'm asking is what is difference between these two situations, that gives rise to two different errors.
When a  is raised, the python interpreter may also offer you the context of the call that caused the error. This only serves for debugging, to give you a hint where in your code you should look in order to fix the problem.See for example this circular -call setup that leads to a different message:There is no documentation of this behaviour on the issue discussion where  was introduced, but you can just search the cpython code for occurences of Py_EnterRecursiveCall. Then you can see the actual contexts that will be returned depending on where the error is raised:
I played around with it and found some interesting results.As we know:Gives rise to What I found wasBoth  and  give rise to And then Both  and  give rise to My intuition here is that python knows you are doing a comparison using the comparators  and that this comparison never reaches the 'base case' condition (within the limits of the maximum depth). So python is letting you know that your comparison never converges to meet the condition.This helpfulness starts to break down when you tryBut in the end python can only be so helpful with error messages.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__eq__
