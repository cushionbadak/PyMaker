Natural Text
I'm studying how python loads modules.I'm starting from  that loads .I have found those line:in file called That import is a relative one, so I'm looking for the folder  or Those files don't exist.Thankfully  defines a new module loader, so the import  requires  core python module instead.But I don't understand how the  is loaded.I've not found that kind of import.Is there a way to know which module loads  directly?I have tried with  global variable as suggested here. Its value is  but  doesn't load that file.
The  expression causes  to be loaded first. Python always loads all packages in a nested package reference to a module.So  causes Python first to look for , then for , and so on. The import machinery does so by looking for the full name in , and if it is not there, triggers a module search and load for each.The first time this happens,  doesn't exist yet, the import machinery finds the file , imports that, before it'll look for more names.And, as you discovered, the very act of importing the  module file, causes that module to add  and further references to standard library modules.Python's import machinery is quite a complex beast; the Python reference documentation covers this comprehensively in The import system; the specific entries to look for are:A direct call to  performs only the module search and, if found, the module creation operation. While certain side-effects may occur, such as the importing of parent packages, and the updating of various caches (including sys.modules), only the import statement performs a name binding operation.and under Regular packagesImporting  will implicitly execute  and  Subsequent imports of  or  will execute  and  respectively.and under The module cache:The first place checked during import search is . This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths. So if  was previously imported,  will contain entries for , , and . Each key will have as its value the corresponding module object.(bold emphasis in quoted sections added by me).Note that everything in the  directory is a vendorized package; a project that normally would be installed independently, but which the  project has decided to package up with their own distribution to avoid having to worry about what versions to support.  is such an independent project, you can install it from PyPI.You can find more information on the  virtual package in the  project documentation. It's purpose is to make it easier for library developers to write code that is compatible both with Python 2 and Python 3, without having to worry about what standard library name to import on either version.
One notable thing about import function in Python is that it can import not only modules themselves but also variables, classes, functions (generally namespaces) from inside them.In the example, you have provided:import statement refers to moves variable from  module, which is defined at line 316 of that file and being assigned to an instance of class _MovedItems:and http_client is a property or method of this class instance


Answer URL
https://docs.python.org/3/reference/import.html#regular-packages
https://docs.python.org/3/reference/import.html#regular-packages
https://docs.python.org/3/reference/import.html#the-module-cache
