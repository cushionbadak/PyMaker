Natural Text
I am redirecting stdout to a logger, and now I spawned a process using multiprocessing.Process. However even though the processes stdout is redirected to the parent stdout, it ignores the sys.stdout override. Here is an example:I expected it to print but Instead I get It completely ignores the sys.stdout ... Why is that? Can the first case be achieved?Note: This is on Windows 7 - seems like it might play a role.
You're on Windows, so you're using the spawn method for starting multiprocessing workers. This method starts a fresh Python interpreter from scratch and imports your script as a module before starting work.Because your workers are started from scratch instead of forked, they don't automatically inherit setup performed by the main process, including setup like your stdout wrapper, and they don't redo that setup because it's inside the  guard. They just have the regular .You'll have to arrange for the workers to set up their own stdout wrappers, perhaps by placing the wrapper setup outside the  guard.
Based the comments and @user2357112's answer, I've eventually ended up using threading.Thread for handling logs from child process (exchanged through Queue), while still using Process for actual work. Here it is in case someone will need something similar.Basically after adding:we can just replace  with . Now child process logs are mixed into the parent process logger, in this case resulting intoI've added some additional process info around, but original intent could be still satisfied, plus now it can be for example all put into same single log file by the parent process, or whatever is needed.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
