Natural Text
I am trying to read bytes from an image, and get all the int (16 bit) values from that image.After I parsed the image header, I got to the pixel values. The values that I get when the pair of bytes are like b"\xd4\x00" is incorrect. In this case it should be 54272, not 3392.This are parts of the code:I use a generator to get the bytes:After I get the header correctly using the  method, I get to the part with the pixel values, where I use the  method. Here, I get the bad results.This is what I get:But the actual sequence of bytes that should be interpreted is: , which equals to , so that my  and . Something happens when I have a sequence of bytes when the second one is .Got any ideas? Thanks!
There are much better ways of converting bytes to integters: takes bytes input, and a byte order argument:The  function lets you convert a whole series of bytes to integers following a pattern:The  module lets you read binary data representing homogenous integer data into a memory structure efficiently:However,  can't be told what byte order to use. You'd have to determine the current architecture byte order and call  to reverse order if the machine order doesn't match the file order.When reading image data, it is almost always preferable to use the  module to do the parsing. You generally then use  calls with specific sizes; if the header consists of 10 bytes, use:and go from there. For examples, look at the Pillow / PIL image plugins source code; here is how the Blizzard Mipmap image format header is read:Because  always returns tuples, you can assign individual elements in a tuple to  names on the left-hand size, including  assignments to extract a single result.The separate set of read calls above could also be compressed into fewer calls:followed by specific attribute assignments.


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.from_bytes
https://docs.python.org/3/library/struct.html#struct.unpack
https://docs.python.org/3/library/array.html
