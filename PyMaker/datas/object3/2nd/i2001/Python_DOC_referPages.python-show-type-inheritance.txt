Natural Text
I'm trying to look under the hood in idle to wrap my head around python custom classes and how they are stored in memory. Suppose I have the following code: Given the following output: I know that since my class consists of no code, when I create an object of type , an object of type  is implicitly created from which the  object  inherits such methods as  etc. However, I cant seem to see the connection ie. when I type , I dont see any attribute that stores a reference to an object of type . Am I misunderstanding how it works or is there some attribute that I am unaware of? 
There is no (direct) instance of type  involved. When you call , a  instance is created, and nothing else. Inheritance is a mechanism that operates on classes, not on instances.Python objects have two properties: Their type and their value. The type of  is . The value of  is represented by its , which is empty (because it has no attributes):There is no reference to an  instance, because no such instance exists. The inheritance from  manifests in the class :So the reason why  can use  methods is because  inherits from , not because there's a hidden  instance stored in . You can see that  has access to all  methods:So, by proxy,  has access to all  methods as well.
you may be looking for ? the method resolution order of the class . it tells you in what order python will go looking for methods if you call . in your case this will be:


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=__mro__#class.__mro__
