Natural Text
I am trying to understand why does the inner function has access to the outer list (arr) but not the outer boolean variable (found). Output:Can someone please clarify. Why does the list have the same id even though we are doing append operation in the inner function ?
Because redefining  in  makes it local. Nothing to do with mutable or not.
It's because Python uses static scope/is statically scoped. At implementation level Python has what is called a Symbol Table which has entries for things you define in code like variables and functions.Each of those things are represented by a lexeme and have attributes like "value" and "scope". For example for the first found, you have:When you defined a second found, an entry was generated for that found with a scope "inner". So at the moment of execution of   Python searched the Symbol Table for an entry of "found" and used the most recent one (the one with the inner scope). Like this:The array is just unique, so when searching for that  you again get the last entry for that lexeme or symbol and get the value of the unique outer array.It's not about mutable or immutable but rather about scope.
From python FaqPython, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.Try not to assign value to  and see its id.Let's see some examples:The outputs are:


Answer URL
https://docs.python.org/3/faq/programming.html#id9
