Natural Text
I'm serialising  to mongo, but I want to intercept setting t. How can I do that without having to rename the attribute to in order to use a property with a setter? I know that I could replace my existing  attribute with a , and use a setter this way:But that means that serialising  would store the name  in the database, not , breaking my existing stored data.I would really like it to be:But in the latter case the setter calls itself - generally it doesn't work.Is this achievable? Any thoughts?
It appears that your real question is this:I'm serialising  to mongo, but I want to intercept setting . How can I do that without having to rename the attribute to  in order to use a property with a setter?You can't just assign no the same name on the instance, no.  is and always will be handled by the  object. If you are interested in the technical nitty gritty, then read the descriptor howto; a  object is a data descriptor which means that all access to  is handled exclusively by the   property object. No exceptions.You can do any of the following:Access the same name in :This bypasses the normal  paths and goes straight to the source.Not use a property; you can intercept attribute setting on instances with the  hook:This would intercept all  access, but only if  is  will you actually do something with that value.Define a custom method on a base class that can handle serialisation for you, and add configuration to your class to the method looks for to help it decide what attributes to serialise, or let the method autodetect  objects. That'd let you include a  to  translation.Use a MongoDB ORM library to handle your object serialisation. I'm sure some of those allow for custom setters for their fields, or at least allow for defining your own custom field types that let you alter values on setting.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#object.__setattr__
