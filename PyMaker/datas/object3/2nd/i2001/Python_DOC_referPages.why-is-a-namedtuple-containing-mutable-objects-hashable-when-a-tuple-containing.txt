Natural Text
I understand why a  which contains a mutable object like  is not hashable, since  items in the tuple can still be updated.example:While this is not hashable:The above make sense to me.But when I create a  with  items it is still hashable:and when I add a :Why this difference between tuples and namedtuples?
But when I create a namedtuple with list as items it is still  hashable...You never do that. You create a named-tuple with a ,  and an , The following:AndDo not create  objects, they create  classes. According to the docs:Returns a new tuple subclass named typename.In other words,  is a factory function that returns a class. If you create instances of those classes, their instances follow the same rules as regular  instances.So consider:TestTuple, the return value of the  factory function, is not a namedtuple instance, it is an instance of , like all other classes.When you create instances of this class:They follow the usual rules of hashability that regular  objects do:Note, the fieldnames argument accepts either a sequence (e.g. a list) of fieldnames, or for convenience, a space/comma-delimited string of fieldnames, so also from the docs:...  The field_names are a sequence of strings such as ['x', 'y'].  Alternatively, field_names can be a single string with each fieldname  separated by whitespace and/or commas, for example 'x y' or 'x, y'.


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
