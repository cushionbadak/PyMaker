Natural Text
I'm trying to understand python asyncio lib, but it's a pain and each time I think i know how the code will behave, something suprises me.I have the following code:Would result with the following output as suspected:and so on.On the other hand I have a codeThis time it outputs just "task nr 0".In the first one creates 10 tasks and then starst all of them. The second one merges those two loops - why it affects behaviour of the program?
The second one merges those two loops - why it affects behaviour of the program?Because your first code runs  for all ten coroutines before getting to an .Since  schedules the execution of the coroutine, in the first example all ten coroutines are happily executing in parallel while you are awaiting the first one (which, as the other answer points out, will never complete because the coroutines are infinite). In the second loop you are only executing one  before the infinite await, so you only get one coroutine running.If you are familiar with threads, perhaps the following analogy will help: You can think of  as spawning a thread, and  as joining it. In the first example you've spawned ten of them, and in the second only one.
Your  is an infinite coroutine. The process of awaiting it will never complete. Meaning that in your second snippet the  loop will never enter next iteration. It is basically "blocked" forever on .


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task
