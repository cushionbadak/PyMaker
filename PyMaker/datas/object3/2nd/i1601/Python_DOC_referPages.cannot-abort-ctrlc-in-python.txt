Natural Text
I wrote this code to continually ask for more input, if the input is not an integer. However, when I try to abort it in the python interactive session, it keeps asking for input.Why does it do this, even though I'm pressing Ctrl+C, which means abort.
When you press Ctrl + C the Python interpreter catches the interrupt and throws a  exception. Because your bare  is equivalent to  and  is a subclass of  your  will catch the . You have no exception handling (like re-raising) in the  block so the program will continue.At the very least change the  to an  because the exceptions that are subclasses of  but don't subclass  (, , and ) are not really meant to be swallowed. In some rare cases it makes sense to catch them and do some clean-up before you re-raise them. But there's almost never a use-case for catching them and not raising them again.The Python documentation actually contains a hierarchy visualization of built-in exceptions that might be handy:You may notice that  could also catch some exceptions that you probably cannot recover from. For example , , or  normally indicate that something went (really) wrong and these shouldn't be swallowed because these may not be "recoverable" (at least in most cases).That means you should observe which Exceptions could be thrown by your code and under which circumstances and then decide which ones you can recover from.In your case:the  is not supposed to fail, so you might as well put it outside the . Similarly, you wouldn't expect the comparisons to fail, so these can also be put outside the  block. Because you only want that code to run if the  succeeded you need to guard it, for example in the  block of the . The  can fail because of a  in case it's an unsupported type,  however  always returns a string. String is an acceptable type for  so one wouldn't expect that to happen.So the only "expected" exception you'll likely encounter here is a . It is thrown if the string couldn't be interpreted as integer.So I would use:Or in case you don't want the  block, you could also  in the  block:Which one you use is mostly a matter of preference. Both should work identical.To summarize it:Identify the minimal amount of code that is allowed (from your point of view) to fail, don't put anything else inside the  block.Make sure you only catch "recoverable" exceptions. In most cases the exception type is enough. But sometimes it could make sense to also check the exception message to make sure it's really the exception you want to catch.Never use  or . The only exception is if you really want to catch ,  or  and know how to deal with them appropriately. You may get away with , but for any code that you want to use regularly (or in production code) you should invest the time to find the more appropriate exceptions.
Ctrl+C means , but your  block catches and ignores it (as well as all other exceptions). Even Ctrl+D doesn't stop the execution, so you should just kill the process, to my mind.
You made the   block inside  loop. So whenever the script throwing an error the  is just passing and going back to  loop.


Answer URL
https://docs.python.org/3/library/exceptions.html#exception-hierarchy
