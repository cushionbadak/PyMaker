Natural Text
I was asked to create an inverted index and save its binary in multiple ways (with and without compression). Long story short, I noticed that using a  representation takes much less disk space than transforming into a .Sample:If you check both files sizes, you will notice the difference. So, I am willing to know how and why they are different. Any additional information would be much appreciated
The  list consists of more objects. You have an outer list of tuples, each tuple a key-value pair. Each value is another list. Those tuples are the reason you need more space.The dictionary pickle format doesn't have to use tuple objects to store key-value pairs; it is already known up front that a dictionary consists of a series of pairs, so you can serialise key and value per such pair directly without the overhead of a wrapping tuple object.You can analyse pickle data with the  module; using a simpler dictionary with just one key-value, you can see the difference already:If you consider  +  to be the equivalent of  + , then the only real difference in that stream in the addition of the  /  pair of opcodes. It's those opcodes that take the extra space.
A  can natively handle key-value pairs, while a  must use a separate container.Your  is a straightforward representation of  - pairs plus some structure. Since the structure is runtime only, it can be ignored for storage.Your  uses a helper for pairs, resulting in  - pairs plus wrapper. Since the wrapper is needed to reconstruct the pairs, it cannot be ignored for storage.You can also inspect this in the pickle dump. The  dump contains markers for the additional tuples.While the surrounding  and  are both stored as a sequence of pairs, the pairs are stored differently. For the , only key, value and stop are stored flatly. For the , an additional  is needed for each pair.


Answer URL
https://docs.python.org/3/library/pickletools.html
