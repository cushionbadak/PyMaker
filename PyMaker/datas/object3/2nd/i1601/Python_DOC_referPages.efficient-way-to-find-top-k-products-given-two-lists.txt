Natural Text
Given two lists of equal length , I want to find the  largest products that can be made by multiplying an element from each list. For example, ifthe result is  or , found byIs there a more efficient algorithm that doesn't involve multiplying out all  pairs?
As already noted, the first step is to sort both lists  and  in descending order (or just the K largest of both lists). Then, all the max K products will sit in a roughly triangular area in the top-left corner, the max product being . In other words, if  is in the top K, then so must be both  and  (assuming ).Thus, you can start in the top-left corner and then use a Heap to expand both the "lower" and the "right" neighbor of the current element and put those onto the heap, too, until you have all the K elements you need. Or start with all the K largest elements of A paired with the largest from B already on the heap and only expand in one direction.Example in Python, using the  module, but the same will work in almost any other language. Note that we are adding negative products to the heap as the heap will be sorted smallest-first.Example:The complexity should be about  for sorting  and  and then about  iterations with heap-operations in the loop. Each cell in the triangular "target" region will only be expanded once from its left neighbor, and cells added to the heap but not used are also limited to K (one in each "row"), giving a maximum of 2*K elements inspected.
Practical solution:Find largest  elements from list A and  largest elements from list B by using partial_sort (this is a well-known modification of quick sort, and I am sure python has the same in its library). Largest products formed by these new lists are also the largest products of the original lists. Then use max-heap (priority queue) to find  largest products from new lists.
If we would find out K max values from both the lists, we would have the max  products from both the lists. I would suggest two approaches to find out K max values:If  (  in 10s and  in millions  ) Here you have couple of options.You can use selection algorithm K times for both the lists. That would take K iterations of either Selection Sort or Bubble Sort. You would have  max values at either at the beginning or at the end of the array depending on the type of implementation. Even that would be Note that because  you can say that  is almost  can be as same as In this case, The best bet would be to just sort both the lists using Merge Sort or Quick Sort. That would be 


Answer URL
https://docs.python.org/3/library/heapq.html
