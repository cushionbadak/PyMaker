Natural Text
The following code outputs False, when according to the Python Order of Operations it should output True (the order should be in -> ==, not the other way around). Why is == coming before in?Output
The existing answers give helpful advice that you shouldn't compare booleans to  because it's redundant. However, none of the answers actually answer the root question: "why does  evaluate to ?".That question was answered in a comment by juanpa.arrivillaga:Also, this is an instance of operator chaining, since  and  both count as comparison operators. So this is evaluated as In Python, comparison operators can be chained. For example, if you want to check that , , , and  are increasing, you can write  instead of . Similarly, you can check that they are all equal with .Chained comparisons are described in the Python documentation here:Comparisons can be chained arbitrarily, e.g.,  is equivalent to , except that  is evaluated only once (but in both cases  is not evaluated at all when  is found to be false).
In python, comparisons, memberships tests and identity tests all have the same precedence.The keyword  which checks for membership returns a , there is no need for extra compare with a second . However, you can group the expressions like so...


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
