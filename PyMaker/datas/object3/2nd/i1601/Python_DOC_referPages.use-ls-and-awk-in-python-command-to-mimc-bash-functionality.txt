Natural Text
I want to assign the output of a command I run using  to a variable and prevent it from being output to the screen. But, in the below code ,the output is sent to the screen and the value printed for  is 0, which I guess signifies whether the command ran successfully or not. Is there any way to assign the command output to the variable and also stop it from being displayed on the screen?
From "Equivalent of Bash Backticks in Python", which I asked a long time ago, what you may want to use is :From the docs for Python 3.6, This is implemented using subprocess.Popen; see that classâ€™s  documentation for more powerful ways to manage and communicate with  subprocesses.Here's the corresponding code for :
You might also want to look at the  module, which was built to replace the whole family of Python -type calls.The advantage it has is that there is a ton of flexibility with how you invoke commands, where the standard in/out/error streams are connected, etc.
The commands module is a reasonably high-level way to do this:status is 0, output is the contents of /etc/services.
I know this has already been answered, but I wanted to share a potentially better looking way to call Popen via the use of  and functions:
For python 3.5+ it is recommended that you use the run function from the subprocess module. This returns a  object, from which you can easily obtain the output as well as return code. Since you are only interested in the output, you can write a utility wrapper like this.
i do it with os.system temp file:
Python 2.6 and 3 specifically say to avoid using PIPE for stdout and stderr.The correct way is 


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.run
https://docs.python.org/3/library/subprocess.html#security-considerationshttps://docs.python.org/3/library/subprocess.html#security-considerations
