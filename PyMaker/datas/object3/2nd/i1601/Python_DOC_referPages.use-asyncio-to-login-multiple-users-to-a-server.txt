Natural Text
I have a server which I need to login many users to. During each login the server has to do lots of things that take a while like make requests to other servers/databases and wait for them. So whilst one user is logging in I would like the other users to start logging in too.I have tried to figure out how the asyncio module works but have not found any code that does what I want it to do. Note: I am using python 3.6 so some of the asyncio features are different to 3.7.I would like to know:Is asyncio the right tool for what I am trying to doHow I would use asyncio to do itHere is what I want/think asyncio can do:Create an event loop,Add coroutines to this loop and run them,When it gets to a certain point e.g. an await statement it stops running that coroutine and moves on to the next one in the loop, pushing that one to the back of the loopI don't have a great understanding of asyncio so am probaby very mistaken but hopefully you can understand what the problem I have is.
When it gets to a certain point e.g. an await statement it stops running that coroutine and moves on to the next one in the loop, pushing that one to the back of the loopThat is exactly what asyncio is good at. To execute tasks in parallel, your code needs to satisfy two pre-requisites:It needs to actually be async;It needs to request the coroutines to run in parallel and not await them in series.The first point becomes clear if you take a careful look at the content of coroutines from the question, such as . Although they technically are coroutines (they all begin with ), they don't  anything, so they never offer asyncio a chance to suspend their execution to do something else.To make them useful you need to replace every invocation of blocking code with a non-blocking equivalent. The simplest bad-aid to do that while still using  is to use  to postpone execution to another thread. In other words, replace:withThe second point can be met by a simple change to . Rather than awaiting each coroutine in series (which basically ensures that they will not run in parallel), it needs to start them all in advance and wait for them to complete, for example using :Note that using  will use threads under the hood, and will only allow as many parallel connections as there are workers in the thread pool. To make better use of asyncio, you can switch to aiohttp which supports multiple connections without each being backed by an OS thread.
There are two kinds of libraries in python. Async-libraries and blocking-libraries. You should try only to use asyncio-libraries when you use asyncio.requests is a blocking libarie. Here is an example, how to use it with asyncio: https://stackoverflow.com/a/23784727/4493241I prefer not to use blocking-libraries at all. So I would recommend to rewrite your code without request. Here is a http-client example with asyncio: https://asyncio.readthedocs.io/en/latest/http_client.html


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor
