Natural Text
I noticed, that when I do something like this:Regardless of my python version, the hexdump of the resulting file will have zero bytes in the first portion of the :Is that guaranteed, intended behavior that can be counted on across operating systems? If so, where is that fact documented?
Is [zeroed out areas] intended behavior that can be counted on across operating systems? If so, where is that fact documented?Across operating systems?  Probably not: if Python is ported to some ancient OSes, those writes might either not produce a gap at all (ignoring the seek), or fail.  However, modern systems all support sparse files, or at least fake them to the point of making the above work just fine and behave that way.  If someone doing such a backport cares, they could add a faking layer.You're probably safe if you rely on this.  Just don't assume that the holes will stay holes: some systems may fill them in when restoring from backup or migrating files across a cluster or whatever.  If you seek a few terabytes in and write one byte, the file might take only a little space until the fill-in point, if and when it ever occurs.
A binary file has a pointer that indicates the file position at which the next read or write operation will take place. Position is counted in terms of bytes. Read and write operations always move the pointer so it's at the end of whatever was just read or written.Seeking to a position past the end of the file results in the file size being increased as needed, with the new bytes filled with 0. In the code above, you're creating a new file and using  incrementing filepointer's (In python, there are no pointers, so this is ) start position. This will add 0's.In Binary files, the current  is the bytes offset from the start of the file. If you increase stream position, all previous positions will be filled with 0 in a binary file.Is this across operating systems; probably YES for all latest or LTS OSes. Might not be promising in some legacy systems. Stream Position Documentation -https://docs.python.org/3/library/io.html#binary-i-o


Answer URL
https://docs.python.org/3/library/io.html#binary-i-o
