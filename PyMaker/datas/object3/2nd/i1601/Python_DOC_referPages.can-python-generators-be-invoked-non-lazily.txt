Natural Text
I know that in Python, generators are invoked lazily. For example:The line  was evaluated only after the first  was called.I wonder whether there is a simple way to invoke the generator non-lazily. This means that when calling , the function would calculate everything up to and including the first  result, without actually yielding. Then, on the first call to , the already-calculated result will be yielded, and also everything up to and including the second  result would be calculated. And so on.How can this be achieved? Here is the expected behavior under this non-lazy scheme:Here is a solution attempt, which does not work:This fails since the value is yielded only after the  statement, while the calculation of everything up to the next  happens before the  statement. This example made me realize that it may not be possible to perform what I am seeking for, since it would require doing steps after the function has returned (might require multi-threading).
You could probably write some kind of decorator for it, such as:Then you can simply decorate your normal generators:which will work as follows:
credit: this was inspired by @L3viathan answerIn this version, itertools.tee is used to store the one yielded value the wrapper is behind the original generator.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
