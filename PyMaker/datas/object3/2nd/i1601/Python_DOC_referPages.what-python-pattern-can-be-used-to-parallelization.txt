Natural Text
 is a function that process the argument x print the output to stdout. For example, it may beA serial program calling  looks like the following.To speed up the program, I'd like it run in parallel. The stdout output can be out-of-order, but the output from a single x must not be broken by the output from another x.There can be various ways to implement this in python. I figure out something like this.Is this the best way to implement this in python in terms of code simplicity/readability and efficiency?Also, the above code runs OK on python3. But not on python2, I got the following error. Is it a problem that may cause errors?/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/joblib/externals/loky/backend/semlock.py:217: RuntimeWarning: semaphore are broken on OSX, release might increase its maximal value  "increase its maximal value", RuntimeWarning)Thanks.
in standard library https://docs.python.org/3/library/threading.htmlUsing lock guarantees that the code between  and  is only executed by one thread at a time.  method is already thread-safe in python3 so the output will not be interrupted even without a lock. But if you have any state shared between threads (an object they modify) you need a lock.
If you're using python3, then you can use concurrent.futures from standard library insteadConsider following usage:
I would approach the issue in the question with the following code (assuming we talk about CPU bound operations):Output:EDIT - another implementation to get result immedeately after calculation -  and  instead of  and :Output:


Answer URL
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/logging.html
