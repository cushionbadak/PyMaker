Natural Text
I have a dictionary containing a list as value (see below) and want to save it to a csv. Saving works fine so far, but when I read it back into my program, I get the results below, where the two lists [1,2,3] and [4,5,6] aren't lists anymore, but strings ("[1,2,3]" and "[4,5,6]").How can I load the list from the csv as list and not as string? So that I can access the elements in the list again and not the single chars (see below).Result:Problem:So now the lists are strings and I can't access the numbers in the list, since it is a list of chars now.Is anyone able to help me or offer me an alternative?Thanks a lot in advance!
CSV isn't really made for storing nested lists in this fashion. You could use , but it is quite a security hassle since it would allow people to run code on your computer, if you for instance would have people upload their files to your server. Instead I would recommend you to store your dictionary as a JSON object. This would take care of a lot of special cases that might come up later. And then to load it:
I agree with @Jimmy: CSVs are not really well suited to storing lists. Switching to JSON, as he suggests, is the best off-the-shelf solution.If you can't or don't want to switch to JSON for some reason, you should pack your lists yourself so they can be stored and retrieved as single cells in the CSV, and handle the unpacking yourself. IF all your list data are lists of integers, you could pack and unpack them like this:Since you used ";" as the field separator in the CSV, I used "," as the list separator. This is not necessary if your writer quotes properly, but it's cleaner.
The root problem here is that CSV only stores strings. So, putting a  in a CSV cell inherently means automatically stringifying that list and then forcing you to parse it back out again.If the list really is just a list of integers,  will work. (And it the list is supposed to be just a list of integers, but turns out to actually be something different—whether because of bugs, or because of malicious users—it'll give you a nice error instead of silently doing something dangerous or raising some bewildering exception that makes no sense.) But this is rarely a good idea. Python's  is not meant to be a data serialization or interchange format; it's meant to be a format that helps human programmers understand their data.The Input/Output chapter of the tutorial explains the options that are meant for data serialization and interchange: , , and * in the stdlib. Or you can turn to third-party modules like , or store things in a database, etc. If you read up on the strengths and weaknesses of each,  is the obvious answer in this case, as Jimmy C's answer demonstrates.* Yes, you can use lists of comma-separated values within a row of a CSV file, as long as you either use different delimiters, or allow  to quote things. See alexis's answer for a simple way to do it, or search the ActiveState recipes for a fancy way to store 2-level lists of lists by using  and  recursively. But usually, you don't want to do this; JSON has the advantage of being arbitrarily-recursive, instead of just 2-level recursive, and the even bigger advantage of being dead simple to use.
I would use pickle


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
https://docs.python.org/3/library/ast.html#ast.literal_eval
