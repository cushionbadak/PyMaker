Natural Text
I've stumbled across some odd python (2.7) import behaviour, which, whilst easy to work around, has me scratching my head.Given the following folder structure:Where test/package/__init__.py contains the followingAnd test/package/x.py contains the followingWhy would running  from a REPL result in the following output?I would have expected  to reference the top level  module, however what the second import does instead, is to import the whole local  module (not just  as I expected), effectively trampling on the first import.Can anyone explain the mechanics of the import here?
The  realizes that  needs to be a module. It then checks the corresponding entry in ; if it is found there, then  is imported into the calling module.However, if  does not exist yet, the module is loaded; and as the last step of loading the  is set to point to the newly loaded module, even if you explicitly did not ask for it. Thus the second import overrides the name of the first import.This is by design, otherwiseandwouldn't be interchangeable.I am unable to find good documentation on this behaviour in the Python 2 documentation, but the Python 3 behaviour is essentially the same in this case:When a submodule is loaded using any mechanism (e.g.  APIs, the  or - statements, or built-in  ) a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package  has a submodule , after importing ,  will have an attribute  which is bound to the submodule.[...]The invariant holding is that if you have  and  (as you would after the above import), the latter must appear as the  attribute of the former.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
