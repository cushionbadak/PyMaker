Natural Text
I'm writing two scripts which are intended to be run from the command line.  Let's call them  and .  In addition, I have a utility module called  which is to be shared by both of these scripts.  How do I structure my code so that  and  can both have a simple line like ?  Currently, my directory structure is like this:Within , I want to be able to write  and  but I dont' want to be able to write , because they are independent programs which have no reason to use each others' code.Update: A slightly modified version of chepner's solution, I've found something that seems to work for me.  My project is now structured like this: can write  and  can do something similar, and both  and  can do 
I would suggest the following layout:  and , as scripts, can be placed anywhere. You should install in a known place the following packages:Then, use , , and  to access the individual modules where and when necessary.As abarnert pointed out, you can't hide  from , nor should you care about doing so.
Put  in . That's where any modules that you want to be able to  into multiple projects are supposed to go.
The , given your current structure, does not import your util: it imports Python's util module. To solve this, you have to add __init__.py to util directory, which makes it valid Python package.In order to import your util, you can either do relative import (which would violate your second wish and require even your app to be a package) or use  to run your script.If you wanted to use util as a library, it belongs to a  directory, located implicitly in .
I think what you're missing here is that building an installable -based package solves your problem without actually requiring you to install anything system-wide.First, this kind of thing is exactly what  was created for. (Or, if you're on 3.4+, the stdlib's .) You create a new virtual environment. Within that environment, you  your  library, and now it's in that environment's . And then you can run  and  and whatever else you want inside that environment, and they can all —but nothing has changed in your main system environment.Even if you don't want to use  for some reason (but you really should…), if you build your setup right, it will allow you to run everything in "development" mode, which does a fake install to a directory under your source tree and sets up all the links to make it work. This can be a bit fussy when you're trying to install multiple separate scripts as well as modules that they share, but it does work.A full tutorial on how to layout distributions, make  auto-generate the wrapper scripts and install them to , etc. is way too big for an answer here, and the PyPA people already wrote one. There are some complicated bits, so you probably will get stuck at some point, but when you do, you'll have another good question to ask at SO. :)


Answer URL
https://docs.python.org/3/library/venv.html
