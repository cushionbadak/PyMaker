Natural Text
I have a Python project with the following structure:All of the modules are empty except  which has the following code:and  which defines :Now from the root I import :The result of the import surprises me, because it shows that the second  statement has overwritten . Yet the docs state that the from statement will not bind a module name:The from form does not bind the module name: it goes through the list  of identifiers, looks each one of them up in the module found in step  (1), and binds the name in the local namespace to the object thus  found.And indeed, when in a terminal I use a  statement, no module names are introduced:I suspect this has to do with Python, at the time of the second import statement, trying to import  which refers to  and failing but I'm not certain.What is happening here?
From the import system documentation:When a submodule is loaded using any mechanism (e.g.  APIs,  the  or  statements, or built-in )  a binding is placed in the parent module’s namespace to the submodule  object. For example, if package  has a submodule , after  importing ,  will have an attribute  which is  bound to the submodule. Let’s say you have the following directory  structure:and  has the following lines in it:then executing the following puts a name binding to  and  in  the  module:Given Python’s familiar name binding rules this might seem surprising,  but it’s actually a fundamental feature of the import system. The  invariant holding is that if you have  and   (as you would after the above import), the  latter must appear as the  attribute of the former.If you do , the import statement will not load  into the local namespace. However, the import machinery will load  into the  namespace, to make further imports work right. It just happens that in your case,  is also the local namespace, so you're getting a surprise.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
