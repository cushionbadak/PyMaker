Natural Text
I have some confusions regarding raw string in the following code:As how I understand the raw string, without r, the \ is treated as escape character; with r, the backslash \ is treated as itself literally. However, what I cannot understand in the above code is that: In the regular expression Line 5, even though there is a r, the "\d" inside is treated as one number [0-9] instead of one backslash \ plus one letter d. In the second print Line 8, all characters are treated as raw strings.   What is the difference?   Additional Edition:I made the following Four variations, with or without r: And get the following output: Could you explain these Four situations specifically? 
You're getting confused by the difference between a string and a string literal.A string literal is what you put between  or  and the python interpreter parses this string and puts it into memory. If you mark your string literal as a raw string literal (using ) then the python interpreter will not change the representation of that string before putting it into memory but once they've been parsed they are stored exactly the same way.This means that in memory there is no such thing as a raw string. Both the following strings are stored identically in memory with no concept of whether they were raw or not.Both these strings contain  and there is nothing to say that this came from a raw string. So when you pass this string to the  module it sees that there is a  and sees it as a digit because the  module does not know that the string came from a raw string literal.In your specific example, to get a literal backslash followed by a literal d you would use  like so:Alternatively, without using raw strings:I hope that helps somewhat.Edit: I didn't want to complicate things but because  is not a valid escape sequence python does not change it, so  is true. Since  is a valid escape sequence it gets changed to , so you get the behaviour . Strings get confusing sometimes.Edit2: To answer your edit, let's look at each line specifically: receives the two strings  and . Hopefully this behaves as you expect now.Again (because  is not a valid string escape it doesn't get changed, see my first edit)  receives the two strings  and . Since  doesn't get changed by the python interpreter . If you understand my first edit then hopefully you should understand why these two cases behave the same.This case is a bit different because ,  and  are all valid escape sequences, they are replaced with the unicode character whose decimal representation  is given by the number. That's quite complex but it basically boils down to:This means that  receives the first string as it has done in the first two examples () but the second string is actually . So  replaces the match with that second string exactly but since none of the three (,  or ) are printable characters python just prints a stock place-holder character instead.This behaves like the third example because , as explained in the second example.
There is a distinction you have to make between the python interpreter and the  module.In python, a backslash followed by a character can mean a special character if the string is not rawed. For instance,  will mean a newline character,  will mean a carriage return,  will mean the tab character,  represents a nondestructive backspace. By itself,  in a python string does not mean anything special.In regex however, there are a bunch of characters that would otherwise not always mean anything in python. But that's the catch, 'not always'. One of the things that can be misinterpreted is  which in python is a backspace, in regex means a word boundary. What this implies is that if you pass on an unrawed  to the regular expression part of a regex, this  gets substituted by the backspace before it is passed to the regex function and it won't mean a thing there. So you have to absolutely pass the  with its backslash and to do that, you either escape the backslash, or raw the string.Back to your question regarding ,  has no special meaning whatsoever in python, so it remains untouched. The same  passed as a regular expression gets converted by the regex engine, which is a separate entity to the python interpreter.Per question's edit:The first two should be straightforward.  does its thing by matching the numbers and forward slashes and replacing them in a different order with hyphens instead. Since  does not have any special meaning in python,  passed on to  whether the expression is rawed or not.The third and fourth happens because you have not rawed the strings for the replace expression. ,  and  have a special meaning in python, representing a white (or unfilled) smiley face, a black (filled) smiley face and a heart respectively (if the characters cannot be displayed, you get these 'character boxes'). So instead of replacing by the captured groups, you are replacing the strings by specific characters.
Not all  will cause problems.Python has some inbuilts like  etc.So now if  is not there,python will consider  as its own rather than  for regex.When it it used with  mode then  is left as it is.That's in layman language.Not much into technicals. is not a special inbuilt in python ,so that will be safe even without  mode.Here you can see the list.This is the list which python understands and will interpret.like  , and not .In the first  the  interpretation is being done by regex module not by python.In the second  it is being done by python.As it is in  mode it will put as it is.
I feel like the above answers are way over complicating it.  If you're running , the string you send is parsed through two layers:Python interprets \ characters you write through this filter.Then, regular expression interprets \ characters you write through its own filter.They happen in that order.The "raw" string syntax  is for when you want to bypass the Python interpreter, it doesn't affect :Note that a newline is printed in the first example, but the actual characters  and  are printed in the second, because it's raw.Any strings you send to  go through the regular expression interpreter, so to answer your specific question,  means "digit 0-9" in regular expression.


Answer URL
https://docs.python.org/3/library/re.html#re.sub
