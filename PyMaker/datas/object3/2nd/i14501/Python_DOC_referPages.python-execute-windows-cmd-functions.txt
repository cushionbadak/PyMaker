Natural Text
I know you can run Linux terminal commands through Python scripts using subprocessBut I can't find a way to do the same thing on windowsis it possible using Python without heavy tinkering?Should I stick to good old fashioned batch files?
dir is not a file, it is an internal command, so the shell keyword must be set to True.
Try this import osos.system("windows command")ex: for date os.system("date")
Almost everyone's answers are right but it seems I can do what I need using os.popen -- 
First of all, to get a directory listing, you should rather use . If you invoke  instead, you'll have to parse its output to make any use of it, which is lots of unnecessary work and is error-prone.Now, is a  built-in command, it's not a standalone executable.  itself is the executable that implements it.So, you have two options (use  instead of  if you need to get the output instead of just printing it):use 's  switch (execute a command and quit):use   option (execute command line through the system shell):The first way is the recommended one. That's because:In the 2nd case, , will do any shell transformations that it normally would (e.g. splitting the line into arguments, unquoting, environment variable expansion etc). So, your arguments may suddenly become something else and potentially harmful. In particular, if they happen to contain any spaces and  special characters and/or keywords. uses the "default system shell" (pointed to via  environment variable in the case of Windows), so if the user has redefined it, your program will behave unexpectedly.


Answer URL
https://docs.python.org/3/library/os.html?highlight=os%20listdir#os.listdir
https://docs.python.org/3/library/subprocess.html?highlight=popen#subprocess.check_output
https://docs.python.org/3/library/subprocess.html?highlight=popen#popen-constructor
https://docs.python.org/3/library/subprocess.html#security-considerations
