Natural Text
As far as I know, Python's threading library uses POSIX threads for threading and it does not run on multiple cores. So is it possible that we implement a multicore threading system for Python threads using Open MP?
multiprocessing:The multiprocessing package offers both local and remote concurrency,  effectively side-stepping the Global Interpreter Lock by using  subprocesses instead of threads. Due to this, the multiprocessing  module allows the programmer to fully leverage multiple processors on  a given machine. It runs on both Unix and Windows.
CPython ("default" Python implementation) is not utilizing multiple cores because of Global Interpreter Lock. So every Python statement has to hold that lock. But modules that are written in C may release interpreter lock before time-consuming operation. I.e. numpy does that: http://wiki.scipy.org/ParallelProgrammingThey have handy example for that:Since OpenMP is also a tool for C, I think that is what you seek for.
CPython has a Global Interpreter Lock a.k.a . The GIL ensures that only one thread runs in the interpreter at once. Can your multicore threading system beat the GIL?More about GIL:Understanding the Python GILWhy the Global Interpreter Lock?


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/glossary.html#term-global-interpreter-lock
