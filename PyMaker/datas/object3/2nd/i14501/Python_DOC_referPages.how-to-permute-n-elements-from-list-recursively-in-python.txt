Natural Text
I'm trying to figure out how to create all possible n sized permutations from a list recursively. For example the result of  and  would be:or   and :(sort of like cartesian product).I've managed to come up with this piece of code:but it doesn't give permutations like  etc.Does anybody have a solution for me?How can I make this without using  and ?
This isn't sort of like cartesian product; it's exactly like cartesian product.The polyfill for  is the following:But since you can't use itertools, you might as well take the liberty of writing a slightly more efficient solution to your problem. Since we are just computing the product of  identical iterables, let's just call it a cartesian exponent:Or recursively using yet another incomprehensible list comprehension:Which can be compressed to one line:But then you would be sacrificing readability for terseness and that's no bueno. The incomprehensible list comprehension is already opaque enough.Some tests:
The result you are looking for is the Cartesian product which is the set of all ordered pairs (a, b) where a ∈ A and b ∈ B. Or, all permutations of all combinations.This process, however, is already covered by an itertools functions: product


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/functions.html#func-list
