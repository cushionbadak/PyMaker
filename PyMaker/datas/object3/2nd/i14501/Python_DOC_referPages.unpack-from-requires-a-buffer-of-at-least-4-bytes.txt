Natural Text
I am receiving a packet from client, consisting of many fields. I read all fields successfully, but when it comes to the last field which is tag_end, python gives me an error:unpack_from requires a buffer of at least 4 bytes not found.this is the code:and this is some constants used in the code:and initialization of the packet object, where it initializes the fields:def init(self, **kwargs):    if 'buf' in kwargs:        self.set_bin(kwargs['buf'])    else:        assert kwargs['command'] in Packet.RTCINET_COMMANDS.values() and kwargs['subcommand'] in Packet.RTCINET_COMMANDS.values(), 'Undefined protocol command'        assert isinstance(kwargs['data'], bytearray), 'invalid type for data field'        for field in ('command', 'subcommand', 'data'):            setattr(self, '_' + field, kwargs[field])I have made sure that I read all fields in the right order, as it was written in the packet by the client program. but still I couldn't manage to solve this problem. Do you have any idea how this could be solved?
The problem seems to be that you're converting things to  all over the place for no good reason.In some places, like , it makes your code less readable and understandable, but doesn't affect the actual output. For example,  is already a , so  is the same .But in other places, it's far worse than that. In particular, look at all the lines like . There,  is a . (It has to be, because you  it.) Calling  on a  gives you the string representation of that . For example:That string representation is obviously not generally going to have the same length as the actual buffer you're representing. So it's no wonder that you get errors about the length being wrong. (And if you got really unlucky and didn't have any such errors, you'd be reading garbage values instead.)So, what should you do to convert the  into something the  module can handle? Nothing! As the docs say:Several struct functions (and methods of Struct) take a buffer argument. This refers to objects that implement the Buffer Protocol and provide either a readable or read-writable buffer. The most common types used for that purpose are  and â€¦


Answer URL
https://docs.python.org/3/library/struct.html
