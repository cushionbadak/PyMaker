Natural Text
I'm developing an application with some threads, each one running an infinite loop with a time sleep. What I want is to finish all threads once the main one has finished, here an example:The problem with this solution is that I don't know if condition.wait has finished because the timeout or because has been notified. In the second case while loop should finish.At first I was doing a time.sleep(t) and using threading events but then the application has to wait until t on all threads has passed.I'm thinking about a mixed solution using threading.Condition and Event but I don't know if it's the nicest thing to do (Condition for the 'sleep' and Event to replace while True).
After all it was very simple, I was just focusing on the wrong thing: I just needed a sleep that could be stopped with an event and thats what Event.wait(t) does. The problem then, can be solved just with Events.
The easy way to do this is to use Python 3.2 or later, or get the backport of the current  to 3.1/2.7/etc. from PyPI, or just copy the code for that method from, say, 3.4's source.As the docs for  explain:The return value is  unless a given timeout expired, in which case it is .Changed in version 3.2: Previously, the method always returned .As a side note, I'm not sure you need a  here at all; you're not checking a flag inside the loop, or doing anything else that should be susceptible to a race condition, you're just waiting to be notified. That implies that, as long as you don't need magic auto-reset, an  should be just fine. And  has had the / return since 2.7/3.1+, rather than 3.2+.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Condition.wait
