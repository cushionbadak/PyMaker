Natural Text
I'm working with a couple of binary files and I want to parse UTF-8 strings that exist.I currently have a function that takes the starting location of a file, then returns the string found:Some strings in the file are separated by , is it possible to split these like PHP's explode? I'm new to Python so any pointers on code improvements are welcome.Sample file: which is , I've noted the  separator by enclosing it with  bars.So:Similarly:
I'm going to assume you are using Python 2 here, but write the code to work on both Python 2 and Python 3.You have UTF-16 data, not UTF-8. You can read that as binary data and split on the four NUL bytes with the  method:The resulting data is encoded as UTF-16 little-endian (you may or may not have omitted the UTF-16 BOM at the start; you can decode the data with:This will however fail as we just cut off the text at that last NUL byte; Python splits on the first 4 NULs found, and won't skip that last NUL byte that is part of the text.The better idea is to decode to Unicode first, then split on a Unicode double-NUL codepoint:Putting this together as a function would be:If the file as a BOM at the start, consider opening the file as UTF-16 instead to start with:and remove the explicit decoding.Python 2 demo:
First you need to open the file in binary mode.Then you  the  (or , dependend on the version of Python) with a delimiter of four zero bytes :Furthermore you need to handle the encoding, since  only returns the binary data and your test data is in UTF-16 little endian like Martijn Pieters noted:Besides: test with  for a variable not to be .


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
