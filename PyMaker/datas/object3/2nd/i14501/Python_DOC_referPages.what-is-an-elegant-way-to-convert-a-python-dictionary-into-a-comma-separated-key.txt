Natural Text
I have a dictionary as follows:-To convert it into into a comma separated keys string  and a comma separated values string  I do the following:-The result isIs there a more efficient/elegant way to do this?
Use  (Hint: don't name your dict ):Output:Note that a dictionary has no order. So the output does not have any order you can rely on, too.
The obvious solution is to just use  and  instead of :If you're worried about the keys and values showing up in different orders, while Python allows dicts to iterate in any order they want, it does document here that if you iterate them over and over without doing anything else between you will get the same order:If , , , , , and  are called with no intervening modifications to the dictionary, the lists will directly correspond.(The 2.7 docs were never updated to say so, but it's also true for , , and .)At least in CPython, it will probably be slightly more efficient to use  and  instead of  and  (because, when given an iterator, the CPython implementation of  just makes a list out of it), but I doubt that matters. As Padraic Cunningham points out in the comments, for the keys (but not the values), you may be able to get the same list even faster with just  instead of  (although maybe notâ€”it avoids a  call, but at the cost of a , unless you've first copied  to a local so it can be ed).Finally, if you want to do it with  (let's say you're using a broken not-quite-compliant Python interpreter that randomizes the iteration order each time), you can use  for that:That turns a sequence of pairs into a pair of sequences.
You could do it like this:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/stdtypes.html#dict
