Natural Text
I have a large program with multiple classes. They are inherited by other classes: Some variables will be having similar names. I am afraid of accidentally overriding an existing variable and creating nasty bugs: Keeping track of all those variables to avoid accidents seems impractical, so I was thinking of using mangling: and get what i expect: Mangling solves my problem, but reading this highly upvoted answer stating that:If you want to use it eventually, you can, but it is neither usual nor  recommended.and the "This is culture" section of that answer makes me sceptical. Questions: - Should I use mangling as in the example? - If not, what are my alternatives to avoid accidental overriding of variables?   
Using mangling to produce 'private' attributes is neither usual nor recommended, because there is no such thing as truly private attributes in Python.Using mangling for what it was designed to do, reduce the likelyhood of subclasses clashing on attribute names, is absolutely pythonic and fine.From the documentation:Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.Emphasis mine.However, the use-case is pretty rare; there are not many situations where you want the attribute to not be accidentally overridden. But if you are building base classes that are going to be widely subclassed (in a large project or as part of a framework or library intended for a wide range of uses), then using double-underscore names for implementation details is perfectly fine.
It is unusual, because what you're doing here is unusual. However, given your requirements, I would say that using name-mangled variables is a perfectly appropriate thing to do.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
