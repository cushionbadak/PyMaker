Natural Text
Can magic methods be overridden outside of a class?When I do something like thisit prints '5' instead of '10'. Do I do something wrong or magic methods just can't be overridden outside of a class?
Short answer; not really.You cannot arbitrarily change the behaviour of  a builtin function (*which internally calls )  on arbitrary builtin types such as (s).You can however change the behaviour of custom objects like this:Example:Demo:This overrides two things here and implements two special methods: which get called by  which get called by the  operator.Update: As per the comments above; techincally you can redefine the builtin function ; Example:However this is not recommended and does not change the overall behaviour of the object .Update #2: The reason you cannot change the behaviour of bultin types (without modifying the underlying source or using Cuthon or ctypes) is because builtin types in Python are not exposed or mutable to the user unlike Homoiconic Languages (See: Homoiconicity). -- Even then I'm not really sure you can with Cython/ctypes; but the reason question is "Why do you want to do this?"Update #3: See Python's documentation on Data Model ( for example).
You can redefine a top-level  function, but nobody ever calls that.As implied in the Data Model documentation, when you write , that calls , not .And even that isn't really true. First,  is a special method, meaning it's allowed to call  rather than , but that doesn't matter here. Second, it's not required to call  unless you give it something that isn't already an  (and call it with the one-argument form). So, it could be as if it's was written like this:So, there is no way to change what  will do… short of just shadowing the builtin  function with a different builtin/global/local function of the same name, of course.But what if you wanted to, say, change ? That's not an , so it's going to call . So, all we have to do is monkeypatch that, right?Well, yes, except that Python allows builtin types to be immutable, and most of the builtin types in CPython are. So, if you try it:However, if you're defining your own types, that's a different story:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__complex__
https://docs.python.org/3/reference/datamodel.html#object.__complex__
https://docs.python.org/3/reference/datamodel.html#object.__complex__
