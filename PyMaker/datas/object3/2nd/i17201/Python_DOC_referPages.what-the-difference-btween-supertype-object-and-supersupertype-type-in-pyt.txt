Natural Text
Won't  and  all return the object of super class of ? What's the difference?
The difference is huge;  with a type (class) second argument instead of an object (instance) gives you unbound methods, not bound methods (just like accessing those methods on a class would).I'll explain first how  works with an instance second argument. inspects the MRO of , finds the first argument ( or ) in the MRO, then finds the next object that has the requested attribute.Demo:The MRO of  is ;  finds this MRO by looking at the second argument, using . The search for  starts at the next class after the first argument given.The  method is bound here, you can just call it.If you give  a type as the second argument, then it'll use the MRO of that type, e.g. instead of using  it just goes for . However it then has no instance to bind the methods to.  is unbound:To call  I have to explicitly pass in a  argument.(In Python 3, the above would return the  function object instead of an unbound method, but the principle is the same).The method returned is also, again, from the next class in the MRO chain;  was returned there.This is down to the  method (i.e. the descriptor protocol, responsible for binding), as it returns an unbound object (an unbound method in Python 2, the function itself in Python 3) when passed a class to bind to. (For  objects,  does return a bound object when passed in a class).So, TL;DR, for methods  returns a bound method,  returns unbound methods. 


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#super
