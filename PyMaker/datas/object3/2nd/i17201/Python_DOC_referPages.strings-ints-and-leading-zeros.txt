Natural Text
I need to record SerialNumber(s) on an object. We enter many objects. Most serial numbers are strings - the numbers aren't used numerically, just as unique identifiers - but they are often sequential. Further, leading zeros are important due to unique id status of serial number.When doing data entry, it's nice to just enter the first "sequential" serial number (eg 000123) and then the number of items (eg 5) to get the desired output - that way we can enter data in bulk see below:The problem is that when you take the first number-as-string, turn to integer and increment, you loose the leading zeros.Not all serials are sequential - not all are even numbers (eg FDM-434\RRTASDVI908)But those that are, I would like to automate entry. In python, what is the most elegant way to check for leading zeros (*and, I guess, edge cases like 0009999) in a string before iterating, and then re-application of those zeros after increment?I have a solution to this problem but it isn't elegant. In fact, it's the most boring and blunt alg possible.Is there an elegant solution to this problem?EDITTo clarify the question, I want the serial to have the same number of digits after the increment. So, in most cases, this will mean reapplying the same number of leading zeros. BUT in some edge cases the number of leading zeros will be decremented. eg: 009 -> 010; 0099 -> 0100
I develop my comment here,  being a string:It's like @owen-s answer : print the number and pad with leading 0.Regarding , it's just one way of printing. From PEP3101: In Python 3.0, the % operator is supplemented by a more powerful  string formatting method, format(). Support for the str.format()  method has been backported to Python 2.6.So you may want to use format insteadâ€¦ Anyway, you have an integer at the right of the  sign, and it will replace the  inside the left string. means print a minimum of 6 (6) digits (d) long, fill with 0 (0) if necessary.As  is a string, you have to convert it to an integer before the increment: . And because the right side takes an integer, we can leave it like that.Now, for the left part, as we can't hard code 6, we have to take the length of . But this is an integer, so we have to convert it back to a string, and concatenate to the rest of the expression %0 6 d : . ThusNow, with format (format-specification):is replaced in the same way by 
Try :
You could check the length of the string ahead of time, then use  to pad to the same length afterwards:You can check a serial number for all digits using:


Answer URL
