Natural Text
Whenever I use , the new directory will be added. However, once I close python, the list will revert to the previous (default?) values. How do I permanently add a directory to ?
You need to add your new directory to the environment variable , separated by a colon from previous contents thereof.  In any form of Unix, you can do that in a startup script appropriate to whatever shell you're using ( or whatever, depending on your favorite shell) with a command which, again, depends on the shell in question; in Windows, you can do it through the system GUI for the purpose. may be a better place to ask further, i.e. for more details if you need specifics about how to enrich an environment variable in your chosen platform and shell, since it's not really a programming question per se.
If you're using bash (on a Mac or GNU/Linux distro), add this to your 
Instead of manipulating  you can also create a path configuration file. First find out in which directory Python searches for this information:For some reason this doesn't seem to work in Python 2.7. There you can use:Then create a  file in that directory containing the path you want to add (create the directory if it doesn't exist).For example:
This works on WindowsOn Windows, with Python 2.7 go to the Python setup folder.Open Lib/site-packages.Add an example.pth empty file to this folder.Add the required path to the file, one per each line.Then you'll be able to see all modules within those paths from your scripts.
You could add the path via your pythonrc file, which defaults to ~/.pythonrc on linux. ie.You could also set the  environment variable, in a global rc file, such  on mac or linux, or via Control Panel -> System -> Advanced tab -> Environment Variables on windows.
In case anyone is still confused - if you are on a Mac, do the following:Open up TerminalType In the text file that pops up, add this line at the end: Save the file, restart the Terminal, and you're done
To give a bit more explanation, Python will automatically construct its search paths (as mentioned above and here) using the  script (typically located in sys.prefix +  as well as ). One can obtain the value of sys.prefix:The site.py script then adds a number of directories, dependent upon the platform, such as ,  to the search path and also searches these paths for  config files which contain specific additional search paths. For example easy-install maintains its collection of installed packages which are added to a system specific file e.g on Ubuntu it's . On a typical system there are a bunch of these .pth files around which can explain some unexpected paths in sys.path:So one can create a .pth file and put in any of these directories (including the sitedir as mentioned above). This seems to be the way most packages get added to the sys.path as opposed to using the PYTHONPATH.Note: On OSX there's a special additional search path added by site.py for 'framework builds' (but seems to work for normal command line use of python):  (e.g. for Python2.7: ) which is where 3rd party packages are supposed to be installed (see the README in that dir). So one can add a path configuration file in there containing additional search paths e.g. create a file called  which contains  and then the system python will add that search path.
On linux you can create a symbolic link from your package to a directory of the PYTHONPATH without having to deal with the environment variables. Something like:
For me it worked when I changed the  file. Just changing  file worked only till I restarted the shell.For python 2.7 it should look like:at the end of the  file.
Adding  to the ~/.bashrc might not work if  does not currently exist (because of the ).Adding the above to my ~/.bashrc did the trick for me on Ubuntu 16.04
Just to add on awesomo's answer, you can also add that line into your  or 
I added permanently in Windows Vista, Python 3.5System > Control Panel > Advanced system settings > Advanced (tap) Environment Variables > System variables > (if you don't see PYTHONPATH in Variable column) (click) New > Variable name: PYTHONPATH > Variable value: Please, write the directory in the Variable value. It is details of Blue Peppers' answer.
The add a new path to PYTHONPATH is doing in manually by:adding the path to your ~/.bashrc profile, in terminal by:paste the following to your profilethen, make sure to source your bashrc profile when ever you run your code in terminal:Hope this helps.
On MacOS, Instead of giving path to a specific library. Giving full path to the root project folder in made my day, for example: after this do: 
In Python 3.6.4 you can persist sys.path across python sessions like this:I strongly suggest you use virtualenv and virtualenvwrapper otherwise you will clutter your path
The script below works on all platforms as it's pure Python. It makes use of the pathlib Path, documented here https://docs.python.org/3/library/pathlib.html, to make it work cross-platform. You run it once, restart the kernel and that's it. Inspired by https://medium.com/@arnaud.bertrand/modifying-python-s-search-path-with-pth-files-2a41a4143574.


Answer URL
https://docs.python.org/3/library/pathlib.html
