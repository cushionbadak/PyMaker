Natural Text
what is the difference between curly brace and square bracket in python?when I print  and  on my terminal, they made no difference. Is it real?And sometimes, I noticed some code use  and  to initialize different variables. E.g. , Is there any difference there?
Curly braces create dictionaries or sets. Square brackets create lists.They are called literals; a set literal:or a dictionary literal:or a list literal:To create an empty set, you can only use .Sets are collections of unique elements and you cannot order them. Lists are ordered sequences of elements, and values can be repeated. Dictionaries map keys to values, keys must be unique. Set and dictionary keys must meet other restrictions as well, so that Python can actually keep track of them efficiently and know they are and will remain unique.There is also the  type, using a comma for 1 or more elements, with parenthesis being optional in many contexts:Note the comma in the  definition; it is that comma that makes it a , not the parenthesis.  is not a tuple, it has no comma. Without the parentheses all you have left is a string, instead.See the data structures chapter of the Python tutorial for more details; lists are introduced in the introduction chapter.Literals for containers such as these are also called displays and the syntax allows for procedural creation of the contents based of looping, called comprehensions.
They create different types.
These two braces are used for different purposes. If you just want a list to contain some elements and organize them by index numbers (starting from 0), just use the  and add elements as necessary.  are special in that you can give custom id's to values like . Now, instead of making a list with ages and remembering whose age is where, you can just access John's age by . The  is called a list and  is called a dictionary (in Python). Dictionaries are basically a convenient form of list which allow you to access data in a much easier way. However, there is a catch to dictionaries. Many times, the data that you put in the dictionary doesn't stay in the same order as before. Hence, when you go through each value one by one, it won't be in the order you expect. There is a special dictionary to get around this, but you have to add this line  and replace  with . But, I don't think you will need to worry about that for now. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/library/stdtypes.html#tuple
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
