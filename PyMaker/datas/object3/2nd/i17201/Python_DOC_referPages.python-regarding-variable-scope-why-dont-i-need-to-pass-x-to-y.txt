Natural Text
Consider the following code, why don't I need to pass x to Y?Thank you to the top answers, they really helped me see what was the problem, namely misunderstanding regarding variable scope.  I wish I could choose both as correct answer as they are enlightening in their own way.
From The Python Tutorial:Although scopes are determined statically, they are used dynamically.  At any time during execution, there are at least three nested scopes  whose namespaces are directly accessible:the innermost scope, which is searched first, contains the local namesthe scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but alsonon-global names the next-to-last scope contains the current moduleâ€™sglobal names the outermost scope (searched last) is the namespace containing built-in namesIn your case  puts  into the global namespace.  Since you did not define  locally in   (innermost scope), python searches for the variable definition using the above rules and finds that 'x' is defined in the outermost scope.  Therefore when you reference  in  it resolves just fine.
When python compiles a  into a function, it tries to figure out if the things you are referencing are locals - and if they're not, you must be referring to a global.  For example:Well, you haven't defined  within the scope of , so you must be referring to a global.This is all that's happening in your above code.  You haven't defined  within the scope of , so  must be a global.  As it happens, you define the global:before you call it:so everything works out okay.In case you are going "hm, I'm not sure if I believe you, roippi" just look at the bytecode:aha.
It's because you've instantiated x=X(), so that x.a, x.b, and x.c can be accessed. If you try z=X(), you'll notice it doesn't work.
Python looks up variables by first looking in the local scope (i.e. within a function) and if does not find it, it will use the variable from the global scope, if it exists. After that it will look for Python built-in names. When the statement  is reached,  has already been declared in the global scope. This means that when the function  is called,  can be looked up in the global scope.More information about variable scope can be found here: Short Description of the Scoping Rules?
It takes it from current scope. If you remove  it will throw a error.You can use variables from current scope and variable from all parent scopes inside a function.For details on how scope is defined check python language reference on Naming and BindingAlso, since you are not changing x it works just fine. But if you would've try to change variable from parent scope it would throw error:In such case you need to use  keyword:


Answer URL
