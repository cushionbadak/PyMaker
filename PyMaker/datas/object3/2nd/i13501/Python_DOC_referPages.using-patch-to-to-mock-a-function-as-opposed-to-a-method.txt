Natural Text
I want to do something like the following example (found here)However this is patching the method called  on .  I want to patch a generic function within a context.  Ideally something looking like... is called deep within  and therefore is difficult to mock out directly.  This seems like it should be straight forward but I can't find the right syntaxEDIT  In the module that  lives I import  like followingsSo I need a way to be able to tell mock to patch that from outside the module.  Is this possible?EDIT 2 I think this makes it more clear what I am looking forThis works but is not ideal:However I would much rather have it work like this (or something similar)
Your attempt to patch with  does not work because the import statement creates a local symbol  which points to whatever value  has in  at the time of import. You later patch  but it does not matter because you already have a local copy of .If the file that contains the  call is the main module (the file that  initially loaded), you should be able to do it by patching :If the file that contains the  call is loaded as a module from the main module then  won't work and you need to pass the absolute module name of the module that contains your  call to  rather than .
You can see function like module object's static method. To patch a function   in module  you can use You should take care of Where to patch and if the function is in the same module where you have the test should use  as patch argument. like  can be useed as decorator, context or by  and  method.Now when in a module you import a function from an other module like:You create a new reference to  in the new module called . Every time in this module you call  you will use the reference to  that you load when you imported it: if you whould like change this behavior you should patch  in the new module.To make it more clear I build an example where you have  that contain ,  that include  and use ,  that use  and use bot  and In other words what really rules on choosing where to patch is how the function is referenced where you want use the patched version.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
