Natural Text
I don't understand exactly why the  special method just returns the object it's called on (if it's called on an iterator).  Is it essentially just a flag indicating that the object is an iterator?EDIT: Actually, I discovered that "This is required to allow both containers and iterators to be used with the  and  statements."  https://docs.python.org/3/library/stdtypes.html#iterator.iterAlright, here's how I understand it: When writing a  loop, you're allowed to specify either an iterable or an iterator to loop over.  But Python ultimately needs an iterator for the loop, so it calls the  method on whatever it's given.  If it's been given an iterable, the  method will produce an iterator, and if it's been given an iterator, the  method will likewise produce an iterator (the original object given).
When you loop over something using , then the loop actually calls  first, so it has something to work with. In general, the for loop is approximately equivalent to something like this:So as you already figured out yourself, in order to be able to loop over an iterator, i.e. when  is already an iterator, iterators should always return themselves when calling  on them. So this basically makes sure that iterators are also iterable.
This depends what object you call iter on. If an object is already an iterator, then there is no operation required to convert it to an iterator, because it already is one. But if the object is not an iterator, but is iterable, then an iterator is constructed from the object.A good example of this is the list object:Lists are iterable, but they are not themselves iterators. The result of  is not the original list.
In  when ever you try to use , or try to iterate over any object like below..Lets try to understand for  object..If we iterate over the above list..When you try to do this  over , Python  loop checks for  which intern return an iterator object.To understand this more, lets customize the  and create anew list class..Here I've created  class which intern  from  and overrided  method to raise .And i've created anew list using  class, and since it's list object it should iterate in the same way as  does.If we try to  over  object , we'll endup getting  exception..


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator.__iter__
