Natural Text
I want to do something, for functions, not classes, like So that whenever I change the interface of , this is automatically updated in . Is there a notion of an "abstract base interface" for functions or a mechanism to do this?
Not sure how useful this is but decorators may give you a least part of what you are looking for.  Consider:Defining *args and **kw for function_B makes it flexible for function_A to change its signature.  Any parameters passed into function_B will be mapped to function_A's following the normal rules; too many args, multiple values for argument, etc. will raise TypeErrors.If you change the signature of function_A, any calls to function_B that still match can be called successfully (assuming the module has been reloaded).  The rest will fail obviously and you'll need to update the calls to function_B.Hope this helps!  YMMV.
I would not do this at runtime, and you cannot change the signature automatically but you can definitely test that in your testing suite using the inspect module.For instance:This will print:You can use this to compare the signature of functions in your test suite. Check out the inspect module for other things you can introspect.
Under Python 3 you can easily get the signature:Problem is, there is not much you can do with that without being really hacky. You can compare a function's signature to another:But you cannot dynamically update B to match A.


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html
