Natural Text
I've spent hours googling this, but haven't been able to find any answers.  I'm trying to install a package for Python 3.4, but keep running into problems.  First, I tried just running "python setup.py install":After a long time of searching, I downloaded mingw, added C:/MinGW/bin to my path, made sure MinGW has gcc, and made my distutils.cfg file with [build] and compiler = mingw32 in it.  On running python setup.py install again, I got the same error.I tried what it suggested, passing -c mingw32 to setup.py.  It can't do it for setup.py install, so I did setup.py build:That all seems well and good, but when I try to install after building it tries to build it all over again, and because I can't pass in the compiler for some reason it fails.How can I get setup.py to work?  If it helps, I'm trying to install the noise package, and am using Windows Vista 64-bit (I don't have much money...).
I had similar issues recently.Some tips for Windows builds:Check your Python binary at a Windows command prompt: Did you forget to activate a virtualenv?Check your env vars:  and Ref: https://docs.python.org/3/using/cmdline.html#environment-variablesClean-up a previous build: If you forget the , it is useless for most use cases.  (More like a dusting.)View  online help.For : For  command:  For  command:  For  command:  Order of operations should be: clean (optional), build, installClean: Build:  (Optional argument: )Install: The optional arguments  help to uninstall if you broken something.After install, check the folder  for the Python installation.  Do you see the package?  Usually, you can see  files, which are similar to DLLs.Never underestimate the complexity of build and run environments.  (I often make this mistake.)  It is easy to have a single, errant environment variable break a build or run.Open a new command prompt before the build.Open a new command prompt for the test run after install.


Answer URL
https://docs.python.org/3/using/cmdline.html#environment-variables
