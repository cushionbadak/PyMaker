Natural Text
 and  seem to return the same result. Is there any performance difference between them and why?
deque.popleft() is faster than list.pop(0), because the deque has been optimized to do popleft() approximately in O(1), while list.pop(0) takes O(n) (see deque objects).Comments and code in _collectionsmodule.c for deque and listobject.c for list provide implementation insights to explain the performance differences. Namely that a deque object "is composed of a doubly-linked list", which effectively optimizes appends and pops at both ends,  while list objects are not even singly-linked lists but C arrays (of pointers to elements (see Python 2.7 listobject.h#l22 and Python 3.5 listobject.h#l23), which makes them good for fast random access of elements but requires O(n) time to reposition all elements after removal of the first.For Python 2.7 and 3.5, the URLs of these source code files are: https://hg.python.org/cpython/file/2.7/Modules/_collectionsmodule.chttps://hg.python.org/cpython/file/2.7/Objects/listobject.chttps://hg.python.org/cpython/file/3.5/Modules/_collectionsmodule.c https://hg.python.org/cpython/file/3.5/Objects/listobject.cUsing %timeit, the performance difference between deque.popleft() and list.pop(0) is about a factor of 4 when both the deque and the list have the same 52 elements and grows to over a factor of 1000 when their lengths are 10**8. Test results are given below. 
Is there performance difference?Yes.  is  -- a constant time operation. While  is  -- linear time operation: the larger the list the longer it takes.Why?CPython list implementation is array-based.  removes the first item from the list and it requires to shift left  items to fill the gap. implementation uses a doubly linked list. No matter how large the deque,  requires a constant (limited above) number of operations.
Yes, and it's considerable if you have a long list or deque. All elements in a list are placed contiguously in memory, so if you remove any element, all subsequent elements must be shifted one position to the left - therefore, the time required to remove or insert an element at the start of a list is proportional to the length of the list. A deque, on the other hand, is specifically constructed to allow fast insertions or removal at either end (typically by allowing "empty" memory locations at the beginning of the deque, or to wrap around so that the end of the memory segment occupied by the deque can contain elements that are actually considered to be at the beginning of the deque).Compare the performance of these two snippets:


Answer URL
https://docs.python.org/3/reference/
