Natural Text
I have two lists x and y, both of length n, with xi and yi forming a pair. How could I take a random sample of m values from these two lists while preserving the pairing information (e.g. x[10] and y[10] would be together in the resulting sample) My initial idea is this.use zip to create a list of tuplesshuffle the list of tuplesselect the first m tuples from the listbreak up the tuples into new paired listsAnd the code would look something like this.This seems rather kludgy to me. Is there any way I could make this more clear, concise, or Pythonic?
maybe you mean sampling m elements
If you have two lists with elements that are direct pairs of each other and simply  them (and in python 3, cast that object into a ), then use  to take a sample.
If you have two lists of the same dimensions, you just want to sample a subset of these elements and pair the results.
You can implement the  itertools recipe.  I will use a third-party library, , that implements this recipe for us.  Install this library via .CodeResultsIt is not clear in what form the OP wants the results, but you can group  and  together, e.g. :See also  and  for grouping consecutive items.Alternatively, you may  further to group along  and , e.g.  :Note, this approach accepts any number of iterables, , , , etc.DetailsFrom the itertools recipes:We can see the function indeed accepts multiple arguments which each become a collection of pools.  The size of the pool scales by the value of  keyword. A random selection is made from each pool and tupled together as the final result.See also  docs for more tools.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
