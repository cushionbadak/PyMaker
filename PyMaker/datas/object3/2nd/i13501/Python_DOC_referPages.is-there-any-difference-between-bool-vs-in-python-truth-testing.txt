Natural Text
I have two questions.Can ANYTHING (objects, types, operations, functions..) in python return a boolean value when it is called upon by the bool() method?Why dont the following two lines of code return the same answer?
The two,  and , are different.  is for equality testing, whereas  returns the result of truth value testing for the object passed to it as parameter.According to documentation of  -class bool([x])Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise it returns True.The standard truth testing procedure can be found in the documentation -Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:zero of any numeric type, for example, , , , .any empty sequence, for example, , , .any empty mapping, for example, .instances of user-defined classes, if the class defines a  or  method, when that method returns the integer zero or bool value False.All other values are considered  — so objects of many types are always true.When you do , you are checking the truth value for , which is True.But when you do , you are doing equality (please note this is not truth value testing, it is equality). In this case  and  are not equal so that results in .
Yes. The docs for bool() say:class bool([x])Return a Boolean value, i.e. one of True or False. x is converted using the standard truth testing procedure.The standard truth testing procedure works on any object:Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false: [...] All other values are considered true — so objects of many types are always true. is not equal to True. However, when asking "is  a truthy value", i.e. would  evaluate the true branch or the false branch, the answer is "yes, it would evaluate the true branch". 
Yes every object in Python returns a boolean value, when used with  which calls the -method of this objectbecause the first  does not call the  method.


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/expressions.html#not-in
