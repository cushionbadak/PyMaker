Natural Text
I'm building a visual Python debugger (http://thonny.org) which relies on instrumenting the code before compiling it. I insert certain marker calls into AST, so I get to know eg. which expression is about to be executed.At the moment I'm instrumenting only the main module, but I'd like to get extra information also for some imported modules.How can I override the compilation part of import system? I suppose I need to create a new loader, but how to register it?
First of all, are you sure that modifying the AST is the way to go? Python already provides means to trace function calls. See  and  for example.These functions are intended to be used to implement debuggers.Anyway, if you want to implement and register a new module loader you have to look at . The hooks used to register custom importers are described in PEP 302.Basically you simply have to implement a finder class and insert it into either  or  depending on when you want it to execute. This finder class, when provided with a module name, will implement a  method which will return the custom loader for the given module.The loader class can do literally anything in its . You probably want to use the  module to parse the contents of the module, modify it as you are doing with the main module and then using  or the equivalent to obtain a code object.


Answer URL
https://docs.python.org/3/library/importlib.html#module-importlib
https://docs.python.org/3/library/importlib.html#importlib.abc.PathEntryFinder.find_loader
https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module
