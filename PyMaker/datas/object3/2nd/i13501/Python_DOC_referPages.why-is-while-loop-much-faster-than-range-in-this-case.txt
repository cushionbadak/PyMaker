Natural Text
According to this post, range loop should be faster than while loop in python, but please have a look at the following code. It is simply used to test if a number is prime and return the divisor if n is not a prime.Run the code and you will find the while loop is much faster than the range loop.I am guessing that the range(0,aLargeNumber) takes a very long time to run. But why in the last post mentioned above, the range method is much quicker? Any answers? 
Since you are using Python 2+ ( your code needs to use integer division to work in Python 3+ ) you are running into the fact that Python 2+  generates a list of all elements and then iterates over them.This would explain the differences in time that it takes for the  and  functions to run.Incedentally the code for Python 3+ needs the following change: This Python Blog Post  explains in great detail the differences between  (returns a list) and  (returns an iterator) in Python 2+ and how Python 3+ has changed this functionality.A pick of the most relevent paragraph from that source is here:When you're using an iterator, every loop of the for statement produces the next number on the fly. Whereas the original range() function produced all numbers instantaneously, before the for loop started executing. The problem with the original range() function was that it used a very large amount of memory when producing a lot of numbers. However it tends to be quicker with a small amount of numbers. Note that in Python 3.x, you can still produce a list by passing the generator returned to the list() function.
As mentioned by others, the main issue appears to be using  instead of  in Python 2.7.  Using , both functions are almost the same if one were to use  (Python 2.7).  isPrimeRange: Line ProfilerisPrimeWhile: Line ProfilerUsing iPython's memory profiler, you can see that both use the same amount of memory.  isPrimeRange: Memory ProfilerisPrimeWhile: Memory Profiler
you might as well try using1.28746032715e-05 while seconds6.91413879395e-06 while seconds


Answer URL
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/timeit.html
