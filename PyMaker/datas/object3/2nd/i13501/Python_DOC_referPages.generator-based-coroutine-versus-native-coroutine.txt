Natural Text
I just read PEP0492 talking about the new approach on coroutines but the PEP failed to make me understand the difference between generator-based coroutines and native ones. Can someone tell me the difference (maybe with examples)?For what I understood they uses different words (yield/yield from and await/async/yield). I understand that at the end of a native coroutine a yield is expected, but this also stands true for generator-based ones.
There is no functional difference. "Native coroutines" using the  and  keywords are just syntactic sugar for what was previously implemented in "generator-based coroutines."The use of  and  is recommended in the 3.5 docs if there is no need to support older Python versions.
To expand on what Mike S wrote: native coroutines in CPython share most of the same code as generators, so there's little functional difference. However, I think that PEP-492 rises above the threshold of just "syntactic sugar". Generators and native coroutines have separate purposes, so the new syntax clarifies an author's intent and can do things the old syntax cannot. Here are some examples:Generators are iterable, and native coroutines are not.Native coroutines also permit new syntaxes like async context managers and async iterators.Coroutines have useful debugging messages, e.g. a warning if you never  a coroutine object.The new syntax also nicely mirrors the  library and resembles keywords used in other languages.
Well, conventionally the way to write coroutines involved callbacks. Even though callbacks might be convenient initially, but in my opinion, they lead to highly complicated and complex code, which is not pythonic to say the least. Besides,  (especially  since python 3.3), has made implementing coroutines a lot easier and pythonic.With generators, you can easily divide your code into initial part and callbacks.


Answer URL
https://docs.python.org/3/library/asyncio-task.html
https://docs.python.org/3/reference/expressions.html#yield-expressions
