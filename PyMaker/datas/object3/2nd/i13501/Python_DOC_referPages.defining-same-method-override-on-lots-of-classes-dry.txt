Natural Text
Suppose I have a large number of classes defined by an  of a large library codebase, which I don't want to hack around with for reasons of maintainability. They all inherit from BaseClass, and BaseClass contains a method which I want to augment. I think the following is a workable solutionThe question. Is there a way to take, say,  a list of  tuples, and write code that defines the MyXxxClasses? And is it sufficiently comprehensible that it beats the repetition in the above?
Use three-arg  to define the classes, then set them on the module's global dictionary:If the names to define follow the fixed pattern you gave (`"My" + base class name), you can repeat yourself even less by dynamically constructing the name to define:And if you are trying to wrap all the classes from a given module, you can avoid even explicitly listing the classes by introspecting the module to generate  programmatically (if you know the module has or lacks  you can just use the appropriate approach instead of trying one and defaulting to the other):


Answer URL
https://docs.python.org/3/library/functions.html#type
