Natural Text
I am wondering what the most efficient data structure would be to represent the following: Essentially I would like to create a dictionary to represent lexical entries with specific grammatical properties. Each set of properties consists of attribute-value pairs.Example:I now want to be able to retrieve all dictionary entries with a given set of properties, e.g. all dictionary entries with  or  or .What is a suitable and effective way to do this in Python?  
Storing a list of dictionaries seems like overkill for the data you have described. If each dictionary has the same structure as you have described, then there is no need to use a dictionary because you don't gain any advantages to hashing the data. I think you could accomplish your needs with a single dictionary.By using a single dictionary you can search for individual words within your dictionary.If you want to return all the dictionaries of a certain value, you will still have to iterate through the dictionary with a for loop and an if then statement.The ^ operator is python's built in and/or operator.
You can use a list comprehension to get the relevant entries:
Have you considered pandas. It is designed to efficiently store and manipulate tabular data.
I am not a python guy, It might be very easy to do with python syntax. Here is my attempt to the problem.From a Data-Structure perspective, you can create a  to represent each entry in the dictionary.Now to perform the quick queries on the , you can create HashMap of respective  attributes.For Example: Create maps for  and , that will provide you  object in O(1) complexity. The value part will be a list of all the  objects and you can keep them in sorted order to performing intersection ( operation) in liner time. 
itemgetter approachThe pandas solution is a nice one.  If you want a pure python - standard library solution, one option is to use  (https://docs.python.org/3/library/operator.html).  You pass  a list of your dictionary keys that you care about and it returns a function that will fetch those keys from the dictionary (works for lists with numeric indices also).This allows you to deal with an arbitrary number of keys to match.  For instance, you could specify a few sets of things to match:This approach will return duplicates.  Ideally you could make the matches object a  rather than a  and update it in the loop.  Unfortunately a  cannot be added to a , so that won't work directly.attrgetter approachFinally, if you have a list of class instances where the fields you care about are attributes of the objects, you could use the  method in a similar approach as described above.  You could then use a  to weed out duplicates.


Answer URL
https://docs.python.org/3/library/operator.html
