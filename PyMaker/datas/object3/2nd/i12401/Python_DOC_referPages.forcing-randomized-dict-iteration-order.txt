Natural Text
I have a fairly complex set of data (dict of keys-to-list-of-dicts of etc.) that passes through a fairly complex set of transformation functions to arrive at a final structure.Very rarely during testing, the unit tests I have fail with an error due to one of the lists coming back with the items in an unexpected order. I believe this is due to iterating over a dict without sorting the keys, but I cannot find a case where that happens by code review, and trying to inspect the intermediate values is difficult because the failures only happen on our CI server.Is it possible to instruct python to randomize the order of all dict iteration? I'm pretty sure that doing so would make it easy to debug locally (or rule out my hunch entirely).I'm open to doing hacky things like messing with the metaclass of dict or w/e, just for local testing. I cannot easily do things like "manually wrap all dicts with this function call" since I've already tried similar with  and it didn't fix things.
If you have to use a  (and can't use an  as @Oscar Loper is suggesting), use .
Python 2.7.3 (among others) supports hash randomization (off by default in the 2.x series at least), which can be turned on via  or the  CLI argument. Thanks @jonrsharpe for pointing out that such exists.See: https://mail.python.org/pipermail/python-dev/2012-April/118676.html


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
