Natural Text
Given a list of sets:What is a pythonic way to compute the corresponding list of sets of elements having no overlap with other sets?Is there a way to do this with a list comprehension?
To avoid quadratic runtime, you'd want to make an initial pass to figure out which elements appear in more than one set:Then you can simply make a list of sets retaining all elements that only appear once:Alternatively, instead of constructing  from  directly, we can make an additional pass to construct a set of all elements that appear in exactly one input. This requires an additional statement, but it allows us to take advantage of the  operator for set intersection to make the list comprehension shorter and more efficient:Timing seems to indicate that using an  set produces a substantial speedup for the overall duplicate-elimination process. It's up to about a 3.5x speedup on Python 3 for heavily-duplicate input sets, though only about a 30% speedup for the overall duplicate-elimination process on Python 2 due to more of the runtime being dominated by constructing the Counter. This speedup is fairly substantial, though not nearly as important as avoiding quadratic runtime by using  in the first place. If you're on Python 2 and this code is speed-critical, you'd want to use an ordinary  or a  instead of a .Another way would be to construct a  set from  and use  instead of  in the list comprehension, as suggested by munk. Whether this performs better or worse than using an  set and  would depend on the degree of duplication in your input and what Python version you're on, but it doesn't seem to make much of a difference either way.
Yes it can be done but is hardly pythonic Some reference on sets can be found in the documentation. The  operator is called unpacking operator. 
A slightly different solution using Counter and comprehensions, to take advantage of the  operator for set difference.
Another solution with :Also doable without the unpacking and using  instead.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/collections.html#collections.Counter
