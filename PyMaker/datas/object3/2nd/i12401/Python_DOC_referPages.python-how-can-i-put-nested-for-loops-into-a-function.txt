Natural Text
I am writing a python script, in which I have multiple for loops that are all identical EXCEPT for the number of for loops nested within them.Let me show you what I mean:Please remember that this is just an example to demonstrate the problem. The actual data I'm working with is not numeric, and I'm performing a lot more operations for each iteration.Alright, now here's the question:How can I put all of this code into a nice function so that I could just do something like this:This would be a HUGE help to me if you guys can answer this. I'm not creative enough to solve this puzzle on my own. :(Also, sorry for posting this question if the answer already exists out there -- I don't know what this thing is called, so I didn't know what to search for.Thanks in advance!~PMUpdate:Thanks everybody for your help. I think this will work. You all were extremely helpful!
No problem. As a word of advice, so many nested for-loops is bad style and can make your code a pain to understand, even to you! You should probably avoid going more than two loops deep. If something else needs a loop, you can write a function for that.There's actually a function in  (https://docs.python.org/3/library/itertools.html#itertools.product) that can do what you're looking for, called .  will give you the Cartesian product of an iterable like a like, so for example, if  then  will give you . You can vary how many times the list repeats itself. Do that for both  and  like soThis function will generate an iterable of the sums of the Cartesian product of your first list, and then do the same for your other list. Keep in mind, you probably want to be able to pass in your lists as arguments and not treat them as some nonlocal variables.
My approach would be to first negate your  lists. That way, you could use something like:Note that this code is in Python 2.7 and has not been tested in Python 3.X. But, in essence, your loops iterate over the tuples in the Cartesian product generated by your lists, so using  saves you all the looping.
You can generate Cartesian Products using itertools:You can generate your list of lists using a loop or a list comprehension:And then use the cartesian product:You can add a function to take care of each sublist:Example call:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
