Natural Text
When checking if a floor is an int, the recommend method would be :However, I get a weird behaviour with the results of the  function:Furthermore:Is this normal?
 simply doesn't give you exactly 5:As the docs say,  is "calculated as log(x)/log(base)". And neither  nor  can be represented exactly, and you get rounding errors. Sometimes you're lucky, sometimes you're not. Don't count on it.
When you want to compare float numbers, use .When you want to convert a float number that is close to an integer, use .Float numbers are too subject to error for "conventional" methods to be used. Their precision (and the precision of functions like ) is too limited, unfortunately. What looks like a 5 may not be an exact 5.And yes: it is normal. This is not a problem with Python, but with every language I'm aware of (they all use the same underlying representation). Python offers some ways to work around float problems:  and . Both have their own drawbacks, but sometimes they help. For example, with , you can represent 1/3 without loss of precision. Similarly, with , you can represent 0.1 exactly. However, you'll still have problems with , , irrational numbers, numbers that require many digits to be represented and so on.


Answer URL
https://docs.python.org/3/library/math.html#math.log
https://docs.python.org/3/library/math.html#math.isclose
https://docs.python.org/3/library/functions.html#round
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/fractions.html
