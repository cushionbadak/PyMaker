Natural Text
Doing something likeuses multiple cores, and it runs nicely.The elements in , though, are 64-bit floats (or 32-bit in 32-bit platforms?), and I'd like to multiply 8-bit integer arrays. Trying the following, though:results in the dot product not using multiple cores, and thus running ~1000x slower on my PC.I understand NumPy uses BLAS, which doesn't support integers, but if I use the SciPy BLAS wrappers, ie.the computation is multi-threaded. Now,  runs with exactly the same timing as  for float32's, but for non-floats it converts everything to  and outputs floats, which is something  doesn't do. (In addition,  is now in  order, which is a lesser issue). So, if I want to do integer matrix multiplication, I have to do one of the following:Use NumPy's painfully slow  and be glad I get to keep the 8-bit integers.Use SciPy's  and use up 4x memory.Use Numpy's  and only use up 2x memory, with the caveat that  is much slower on float16 arrays than on float32 arrays, more so than int8.Find an optimized library for multi-threaded integer matrix multiplication (actually, Mathematica does this, but I'd prefer a Python solution), ideally supporting 1-bit arrays, although 8-bit arrays is also fine... (I'm actually aiming to do multiplication of matrices over the finite field Z/2Z, and I know I can do this with Sage, which is quite Pythonic, but, again, is there something strictly Python?)Can I follow option 4? Does such a library exist?Disclaimer: I'm actually running NumPy + MKL, but I've tried a similar test on vanilly NumPy, with similar results.
Option 5 - Roll a custom solution: Partition the matrix product in a few sub-products and perform these in parallel. This can be relatively easy implemented with standard Python modules. The sub-products are computed with , which releases the global interpreter lock. Thus, it is possible to use threads which are relatively lightweight and can access the arrays from the main thread for memory efficiency.Implementation:With this implementation I get a speedup of approximately x4, which is the physical number of cores in my machine:
"Why is it faster to perform float by float matrix multiplication compared to int by int?" explains why integers are so slow: First, the CPUs have high-throughput floating point pipelines. Second, BLAS has no integer-type.Workaround: Converting the matrices to  values gets big speedups. How's 90x speedup on a 2015 MacBook Pro? (Using  is half as good.)


Answer URL
https://docs.python.org/3/library/threading.html
