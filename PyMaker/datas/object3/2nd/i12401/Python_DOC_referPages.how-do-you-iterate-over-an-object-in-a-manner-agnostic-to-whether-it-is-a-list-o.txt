Natural Text
As part of some of the code I am trying to write, I am trying to validate some user input before using it.  I would like to do something akin to the following that operates identically regardless of whether the collection is a list or a dictionary, preferably without having to always convert it into one of the two.Edit:Just to be clear, I will only expect integer keys for dictionaries. Also, I want the indicies of a list to be an addr if only for consistency reasons.
I'd use  or  depending on what it is. Then you have  pairs in both cases and can use the same code.
Just assume it's a  and try to convert it to a . If it fails, then you already have a .Note that this will only produce correct results if the dictionary version will always have integer keys starting at 0 and increasing by 1 with each item. Otherwise, you will have to find some other way of filling in these missing data. Also note that, if that is indeed a consistent pattern, instead of checking each key or index you can just check the length of the object. You can also use  to streamline this (and you don't need  after ):
Here's a way to have just a single loop. It uses a single iterator that gives successive  pairs. If the parameter is a list,  is always  and the s are the successive list elements; if the parameter is a dict,  are the dict's items. I'm assuming that elements of lists are analogous to the values of dicts; adjust accordingly if they're analogous to keys.Take it for a spin:Exception-raising:Changing the upper bounds to , both lists and dicts raise for values out of range.
You could handle lists and dictionaries separately by checking the type. Here's an example:
You could use the  operator at the beginning of the loop to grab the intended iterator:For example,Note that you can replace  by either  or  in the definition of the agnostic iterator, depending on exactly what part of the dictionary (if that is what it is) you want to iterate over.


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
