Natural Text
I'm trying to find a code to select a random winner from all generated raffles and is there a faster way Python can generate more raffles quicker and generate millions if so how. Here's my code so far.
Your current raffle ticket generation algorithm has a problem: it may produce the same ticket more than once. A simple way to prevent that is to just generate the tickets in order. If you want to generate the tickets randomly, that's possible too, but you'll need to keep track of all the tickets generated to prevent duplicates.The code below creates a list of all valid ticket numbers, shuffles that list, and then converts each number to a color + number string. My code only generates simple number strings, but that can be easily fixed to create numbers of the form xxxx xxxx if you want.First, I'll illustrate the function that does the conversion.outputNow here's the code that shuffles the tickets and selects one at random. This code uses the  function so that the results are reproducible. If you don't call , or if you call it with an argument of  (i.e. ), then the pseudo-random sequence will be seeded with a random number provided by the OS, so the results will vary each time you run the program.From the  module docs:Initialize the random number generator.If  is omitted or , the current system time is used. If  randomness sources are provided by the operating system, they are used  instead of the system time (see the  function for  details on availability).outputIf you're using Python 3 you need to change this line:to this:On my old 2 GHz machine with 2GB of RAM I can shuffle 10000000 tickets in about 30 seconds.Here's a modified version that prints the tickets in the form . It also allows you to specify the number of winners to generate. If you want the numbers to be different each time simply supply a new argument to  each time, or just delete the  call altogether.outputAnd here's the output of the "winners" section of the code when I change   to 1500000That takes around 5 seconds on my machine.Here's yet another version that should be more to your liking... However, it does run slower: generating 1,500,000 tickets (without printing them) takes around 12 seconds on my machine.output


Answer URL
https://docs.python.org/3/library/random.html#random.seed
