Natural Text
I'm trying to set up a "processing pipeline" for data that I'm reading in from a data source, and applying a sequence of operators (using generators) to each item as it is read. Some sample code that demonstrates the same issue. Desired : Actual: Python seems to not be saving the value of  each time through the for loop, so it instead applies the third function each time. Is there a way to "bind" the actual operator function to the generator expression each time through the for loop?I could get around this trivially by changing the generator expression in the for loop to a list comprehension, but since the actual data is much larger, I don't want to be storing it all in memory at any one point.
You can force a variable to be bound by creating the generator in a new function. eg.However,  is pretty much identical to the  builtin (in python 3.x). So just use that instead.
You can define a little helper which composes the functions but in reverse order:I.e. you can use  to generate a lambda expression equivalent to . This order is uncommon, but ensures that your functions are applied left-to-right (which is probably what you expect):Using this, your  becomes just
This may be what you want - create a composite function:
The reason for this problem is that you are creating a deeply nested generator of generators and evaluate the whole thing after the loop, when  has been bound to the last element in the list -- similar to the quite common "lambda in a loop" problem.In a sense, your code is roughly equivalent to this:One (not very pretty) way to fix this would be to  the values with another generator, repeating the same operation:


Answer URL
https://docs.python.org/3/library/functions.html#map
