Natural Text
This question already has an answer here:How to find integer nth roots?                    11 answers                Recently I encountered a problem:I want to calculate various roots of various numbers like this:None of the methods I know result in a working code.Method 1:Printed value is 28.0 instead of 3.7798Method 2:Printed value is 18.0 istead of 3.7798Method 3:Printed value is 5.99 instead of 6Is there a way that would work with y being up to 20?Edit: Another suggested method:prints 4
Since everyone else has already told you why your Method 3 is correct, I'll stick to getting you an accurate answer. You can read more about why you're not getting exactly 6, but basically it's because your computer doesn't represent the 1/3 exactly when doing the calculation and makes the final answer off.So, the easiest solution is to use sympy:
You don't seem to understand (yet) order of operations in a programming language.  You need parentheses to make sure you add 1 to y, then take the reciprocal, and then use that as an exponent.  The "natural" order is the opposite.
What you want is this (assuming you are using Python 3):For Python 2, either of the following will work:or (also fine on Python 3):The issue is you need to apply the parentheses in the correct locations to get the order of operations right.Method 3 is to do with floating point arithmetic. See: https://docs.python.org/3.5/tutorial/floatingpoint.htmlFor more info on Python 2 vs. Python 3 division:Division in Python 2.7. and 3.3
Only your last code works because  has higher precedence than  (and  has higher precendence than ).The value is not exactly 6, because floating point numbers are not perfectly accurate. A third can not be represented as a float.
All your values are just as expected. According to the  python operator precedence: is parsed as , and is actually .What you probably want is .  Note, that  is a floating point number, causing the whole expression to be evaluated as floats.  This also means that you will work with finite precision, e.g., getting  instead fo  is to be expected.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
