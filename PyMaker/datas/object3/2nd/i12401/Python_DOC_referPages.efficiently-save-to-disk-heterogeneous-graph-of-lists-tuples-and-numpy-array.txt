Natural Text
I am regularly dealing with large amounts of data (order of several GB), which are stored in memory in NumPy arrays. Often, I will be dealing with nested lists/tuples of such NumPy arrays. How should I store these to disk? I want to preserve the list/tuple structure of my data, the data has to be compressed to conserve disk space, and saving/loading needs to be fast.(The particular use case I'm facing right now is a 4000-element long list of 2-tuples  where  and .)I have tried several options, but all have downsides: storage into a  archive. This works well, and results in acceptable disk space usage, but is extremely slow and consumes a lot of memory while saving.. Is much faster than , but unfortunately only allows either a sequence of numpy arrays (not nested tuples/lists as I have) or a dictionary-style way of specifying the arguments.Storing into HDF5 through . This seems too cumbersome for my relatively simple needs. More importantly, I looked a lot into this, and also there does not seem to be a straightforward way to store heterogeneous (nested) lists. seems to do exactly what I want, however unfortunately it's incompatible with Python 3 at the moment (which is what I'm using).I was thinking of writing a wrapper around , which would determine the nested structure of the data, store this structure in some variable , flatten the full graph, and store both  and all the flattened data using . Then, the corresponding wrapper around  would understand the  variable, and re-create the graph and return it. However, I was hoping there is something like this already out there.
You may like the  package. It effectively wraps heterogeneous pickled objects in a convenient file.  is oriented more toward a "persistent storage" than classic save-to-file model. The main benefit of using  is that you can conveniently save most kinds of structured data.  The main disadvantage of using  is that it is Python-specific. Unlike HDF-5 or saved Matlab files or even simple CSV files, it isn't so easy to use other tools with your data.Example of saving (Out of habit, I created objects and copy them to , but you don't need to do this. You could just save directly to items in ):Following the above example, recovering data:


Answer URL
https://docs.python.org/3/library/shelve.html
