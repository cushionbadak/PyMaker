Natural Text
I know python does not allow us to overload functions. However, does it have inbuilt overloaded methods?Consider this:The first statement dynamically adds variables to objects during run time, but the second one attaches outside functions to classes at run time.The same function does different things based on its arguments. Is this function overload? 
The function  is always the same as , regardless of the type of foo.  There is no overloading here.In Python 3, limited overloading is possible with , but  is not implemented with that.A far more interesting example, in my opinion, is .   does two entirely different things depending on how you call it:If called with a single argument, it returns the type of that argument.If called with three arguments (of the correct types), it dynamically creates a new class.Nevertheless,  is not overloaded.  Why not?  Because it is implemented as one function that counts how many arguments it got and then decides what to do.  In pure Python, this is done with the variadic  syntax, but  is implemented in C, so it looks rather different.  It's doing the same thing, though.
Python, in some sense, doesn't need a function overloading capability when other languages do. Consider the following example in C:If you wish to extend the notion to include stuff that are not integers you would need to make another function:In Python, all you need is:It works fine for both, and it isn't considered function overloading. You can also handle different cases of variable types using methods like . The major issue, as pointed out by this question, is the number of types. But in your case you pass the same number of types, and even so, there are ways around this without function overloading.
overloading methods is tricky in python. However, there could be usage of passing the dict, list or primitive variables.I have tried something for my use cases, this could help here to understand people to overload the methods.Let's take the example:a class overload method with call the methods from different class.pass the arguments from remote class:OR  So, handling is being achieved for list, Dictionary or primitive variables from method overloading.try it out for your codes


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
