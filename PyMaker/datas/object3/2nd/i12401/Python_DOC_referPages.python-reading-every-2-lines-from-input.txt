Natural Text
I am coding a python script that parses a text file. The format of this text file is such that each element in the file uses two lines and for convenience I would like to read both lines before parsing. Can this be done in Python?I would like to some something like:But this breaks saying that:ValueError: Mixing iteration and read methods would lose dataRelated:What is the most “pythonic” way to iterate over a list in chunks?
Similar question here. You can't mix iteration and readline so you need to use one or the other.
 returns an iterator, so it'll work well even if the file is billions of lines long.If there are an odd number of lines, then  is set to  on the last iteration.On Python2 you need to use  instead.In the comments, it has been asked if this solution reads the whole file first, and then iterates over the file a second time.I believe that it does not. The  line opens a file handle, but does not read the file.  is an iterator, so its contents are not read until requested.  takes iterators as arguments, and returns an iterator.  is indeed fed the same iterator, f, twice. But what ends up happening is that  is called on the first argument and then on the second argument. Since  is being called on the same underlying iterator, successive lines are yielded. This is very different than reading in the whole file. Indeed the purpose of using iterators is precisely to avoid reading in the whole file.I therefore believe the solution works as desired -- the file is only read once by the for-loop.To corroborate this, I ran the zip_longest solution versus a solution using . I put a  at the end to pause the scripts, and ran  on each: 4520  2712  93908 91680 The  clearly reads in the whole file at once. Since the  uses much less memory, I think it is safe to conclude it is not reading in the whole file at once.
use , eg
I would proceed in a similar way as ghostdog74, only with the try outside and a few modifications:This keeps the code simple and yet robust. Using the  closes the file if something else happens, or just closes the resources once you have exhausted it and exit the loop.Note that  needs 2.6, or 2.5 with the  feature enabled.
how about this one, anybody seeing a problem with it
Works for even and odd-length files. It just ignores the unmatched last line.If you have large files, this is not the correct approach. You are loading all the file in memory with readlines(). I once wrote a class that read the file saving the fseek position of each start of line. This allows you to get specific lines without having all the file in memory, and you can also go forward and backward.I paste it here. License is Public domain, meaning, do what you want with it. Please note that this class has been written 6 years ago and I haven't touched or checked it since. I think it's not even file compliant. Caveat emptor. Also, note that this is overkill for your problem. I'm not claiming you should definitely go this way, but I had this code and I enjoy sharing it if you need more complex access.


My idea is to create a generator that reads two lines from the file at a time, and returns this as a 2-tuple, This means you can then iterate over the results.If you have an odd number of lines, it won't work perfectly, but this should give you a good outline.
I have worked on a similar problem last month. I tried a while loop with f.readline() as well as f.readlines().My data file is not huge, so I finally chose f.readlines(), which gives me more control of the index, otherwiseI have to use f.seek() to move back and forth the file pointer.My case is more complicated than OP. Because my data file is more flexible on how many lines to be parsed each time, soI have to check a few conditions before I can parse the data.Another problem I found out about f.seek() is that it doesn't handle utf-8 very well when I use codecs.open('', 'r', 'utf-8'), (not exactly sure about the culprit, eventually I gave up this approach.)
Simple little reader. It will pull lines in pairs of two and return them as a tuple as you iterate over the object. You can close it manually or it will close itself when it falls out of scope.
Right now, you can read file every two line. If you like you can also check the f status before 
If the file is of reasonable size, another approach that uses list-comprehension to read the entire file into a list of 2-tuples, is this:
This Python code will print the first two lines:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
