Natural Text
Say I'd like to have a class which holds multiple unmanaged resources, such as files. I'd also like the public interface of that class to allow the user to use it in an exception-safe manner, i.e. not to leak unmanaged resources/leave them at the mercy of the garbage-collector, which isn't ever guaranteed to run at any point (deterministic resource reclamation).Take, for instance, the following case:This is not exception-safe, because if the line opening the second file in  fails, the first file is leaked in the sense that it is left at the mercy of the garbage collector (no matter whether I use the class via a -statement or not).My question is this: what's the cleanest way to achieve what I'd like, preferably in a manner which I'd be able to scale up to more than two unmanaged resources, and which doesn't clutter the public interface of my class too horribly (if at all)? The idea of having an initialization method separate to the  method came to mind, but it sounds a bit odd.
If you're on Python 3, this looks like a job for . If you're on Python 2, there appears to be a backport of this feature available.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
