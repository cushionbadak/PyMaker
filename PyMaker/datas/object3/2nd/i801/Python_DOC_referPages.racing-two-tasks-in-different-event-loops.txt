Natural Text
I am using the Docker SDK, and I am trying to race a task that times out after some number of seconds against another task that waits on a Docker container to finish. In effect, I want to know if a given container finishes within the timeout I've set.I have the following code to do it (adapted from this post):Unfortunately, I keep getting the following error:It seems I can't race with the wait task because it belongs to a different loop. Is there any way I can get around this error so that I can determine which task finishes first?
The problem is simple, there is one default loop in every thread. Which is set by . Then you can get this loop by .So the problem is, mostly, some packages use  by default to get current running loop. Take  as an example:As you can see, it accepts  parameter to specify running loop. But You can also just leave it blank to use  by default.Your problem is you are launching coroutines in a new created loop. But you cannot confirm that all your interal operations are also using this new created one. As they may use , they will be attached into another loop which is the default loop in current thread.As far as I think, you don't really need to create a new one, but let users do that. Just like the example above, you accept an argument , and if it is , use the default one.Or you need to carefully inspect your code to ensure that every possible coroutine is using the loop you create.


Answer URL
https://docs.python.org/3/library/profile.html#module-cProfile
