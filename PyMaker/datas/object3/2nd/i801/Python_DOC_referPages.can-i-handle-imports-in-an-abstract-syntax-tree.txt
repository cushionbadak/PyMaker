Natural Text
I want to parse and check  for admissible nodes. can import other config files, which also must be checked.Is there any functionality in the  module to parse  and  objects to  objects?Here is a code example, I am checking a configuration file (), but I want to also check any files that it imports:
This is a little more complex than you think.  is a valid way of importing both an object defined in the  module, and the  module, so you may have to try both forms to see if they resolve to a file. Python also allows for aliases, where code can import , but the actual module is really defined as  and made available as an attribute of the  package. You can't detect all of these cases purely by looking at  and  nodes.If you ignore those cases and only look at the  name, then you'll still have to turn the module name into a filename, then parse the source from the file, for each import.In Python 2 you can use  to get an open file object for the module (*). You want to keep the full module name around when parsing each module, because you'll need it to help you figure out package-relative imports later on.  can't handle package imports so I created a wrapper function:I'd also track what module names you already imported so you don't process them twice; use the name from the  object to make sure you track their canonical names.Use a stack to process all the modules:In case of  imports, if  is a package then   is skipped and it is assumed that  will be a module.(*)  is deprecated for Python 3 code. On Python 3 you would use  to get the module loader spec, and then use the  attribute to get the filename.  knows how to handle packages.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.util.find_spec
https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec.origin
https://docs.python.org/3/library/ast.html#ast.NodeTransformer
