Natural Text
I understand that  can be used to define the use of  for a new class. What is the equivalent for defining the use of ?I would like to create a class  that contains a dictionary , and I would like  to return I understand that I could probably just use , but this seems needlessly verbose if methods can be used to avoid similar issues with things like  and .
You have a number of options. If you what your class to quack like a , your best The best bet is probably just to extend  instead of referencing one and attempting to redirect all the methods:This will allow you to index right into , list the keys, iterate over the values, etc. At the same time, you can add whatever additional attributes, properties and methods your heart desires.The literal answer to your question is ,  and . You can implement the three use-cases of the indexing operator with these methods:The methods are invoked on an instance of  in exactly the same way that  redirects them to .For future reference, the methods shown here (including your example of ) are called magic, special or dunder methods. All dunder (double underscore) attributes are reserved by the interpreter. They serve many purposes, including operator overloading in custom objects. The (nearly) complete spec of existing names is available in the documentation of the Python Data Model.
What you are looking for is:edit:more specifically, what you want is:edit2: delete some irrelevant text on  and  (see comments)


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/datamodel.html#object.__setitem__
https://docs.python.org/3/reference/datamodel.html#object.__delitem__
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/datamodel.html#special-method-names
