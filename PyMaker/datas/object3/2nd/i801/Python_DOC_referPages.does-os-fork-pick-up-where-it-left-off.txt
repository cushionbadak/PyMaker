Natural Text
I have a function where certain data is being processed, and if the data meets a certain criteria, it's to be handled separate while the rest of the data is being processed. As an arbitrary example if I'm scraping a web page and collecting all the attributes of an element, one of the elements is a form and just so happens to be hidden, I want to handle it separate, while the rest of the elements can continue being processed:Can this be done with os.fork() or is it intended for another purpose?I know that os.fork() copies everything about the object, but I could just change values before forking, as stated in this post.
 basically creates a clone of the process calling it with a new address space and new PID.From that point on, both processes would continue running next instruction after the  call. For this purpose, you normally inspect it's return value and decide what is appropriate action. If it return  greater than , it's the PID of child process and you know you are in its parent... you continue parents work. If it's equal to , you are in a child process and should do child's work. Value less then  means  has failed, Python would handle that and raise  which you should handle (you're still in and there only is a parent).Now the absolute minimum you'd need to take care of having forked a child process is to also make sure you  for them and reap their return codes properly, otherwise you will (at least temporarily) create zombies. That actually means you may want to implement a  handler to reap your process' children remains as they are done with their execution.In theory you could use it the way you've described, but it may be a bit too "low level" (and uncomfortable) for that and perhaps would be easier to do and read/understand if you had dedicated code for what you want to handle separately and use  to handle running this extra work in separate processes.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join
