Natural Text
I have a problem with  or the for loop.in C++, the for loop can be used like this:My Python script that causes the error looks like this:I hope to get How can I achieve this without the use of ?
You can simply use a generator expression, likeOr, if you want your "power range" to be a reusable function, you can create your own, i.e.
You can't use  for this. The third argument for range is a fixed step used to increment the value: it can't be used to multiply or divide the previous value.Instead, use a  loop:If you really want to use a list comprehension, you can do as suggested by Albin Paul:
The built-in range is not meant to be used this way. It takes three arguments:  and goes from  to  with a constant stepsize.If you want to use a single function, you could use numpy's logspaceIt looks like this:If you don't want to rely on numpy, the solution with a while loop seems very pythonic to me.Benchmark time :DA comment pointed out that this solution might be:non obviousslowThe first point is a matter of taste, but I disagree on performance:Of course, this depends a lot on the number of list elements that you want to produce. Numpy introduces overhead but scales better. So for shorter lists, python wins.
To change make a  time complexity loop you need the log function or use while loops to do the job I still think while loops are the way to go
The arguments for  are: start, stop and step, where the step is int. Maybe you want to see the result as this:[1, 10, 100]Overall take a look at a nice learning course, for example, "Automate the Boring Stuff with Python":Here is the video right about loops And here is the wholecourse (available online for free)
When you use the for loop as  The way it takes place is that firstEdit: The first part is explanation why it won't workYou get a list generated by the range function(Not since python3 though), now it only returns a function range and its current state, this can be of float or int, so using  there will do nothing other than Invalid syntax, because range only accepts integers.Only after this does x gets initialized and starts taking values present in the dictionary in an indexed way.You can however use Welcome to python and happy coding.Thanks to @GPhilo for pointing out the errors.


Answer URL
https://docs.python.org/3/library/stdtypes.html#ranges
