Natural Text
This question already has an answer here:Assigning values to variables in a list using a loop                    5 answers                I have a list of variables, where I would like to change the values.I tried this but apparently doesn't workActual case: I wanted to make it more concise as they are similar, only node.left and node.right is different. This is a part of a string to binary tree.
you can try this
Your list of object contains integer objects. In Python a name is mapped (I believe it is the word) to the object. When the FOR loop is executing the name i is mapped to a copy of the integer object that is mapped by a (b and c successively). So in fact you are changing a copy and not the original object.If i am not mistaken....Another thing, if you do the following you'll notice that x is a list of integers and not a list of variable:
For a variable number of named variables, use a dictionary:If you only care about the end result, just use :Then use , , etc to retrieve values.
I feel like the answers have no really answered your question properly.Firstly, lists are mutable, this means that their contents can be changed at will. Integers are immutable, this means their contents cannot be changed. This is a simplification, for further reading on this see this. - This constructs a list with the instantaneous values of a, b, and c.When you iterate over this list you can change the contents of the list because the list is mutable, however, the integers themselves do not change as they are immutable. What Python does here (behind the scenes) is create a new integer object of value 1, and switch the pointer to that new object.As a result, when you ask for the original values of a, b, and c, they are unchanged - because they cannot be changed, only replaced. Here is an example code block that demonstrates this better hopefully:This prints the following:In essence, the list can be changed in place, it is still the same list and still points to the same piece of memory. When we change the integers the previous integers we used are unchanged because integers are immutable, and so new integers must be created.In order to achieve what you desire, you can do a number of things, the first thing I can think of is just initialise them as a list and use them like that, like so:Let me know if my answer is incomplete or you are still confused.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.fromkeys
