Natural Text
I'm trying to create a matrix class that stores the original input, and then creates 2 more variables from the original input, called rows and columns, meaning that I can access specific rows or columns by doing something like matrix([[1, 2], [3, 4]]).rows[0] to get [1, 2] or matrix([[1, 2], [3, 4]]).columns[0] to get [1, 3]. So far this works quite well, however if I wanted to reassign a row or column to another value, such as:which gives me:[1, 2]but if I were to perform this block of code further down to update a column like this, and then print out A again, it would give me the original input, [[1, 2], [3, 4]]but printing a.columns[0] gives me the updated column, [5, 6]and printing a.columns as a whole gives me[[5, 6], [2, 4]]How would I code it in such a way that doing A.columns[0] updates both the input variable and the column variable?Here's my original code:still gives[[1, 2, 3], [4, 5, 6], [7, 8, 9]]when I want it to give me [[1, 4, 3], [4, 4, 6], [7, 4, 9]], but of course updating the columns variable would have nothing to do with self.values (which is the original input variable), since its like having 2 completely separate variables. How do I link them together so that any changes from self.values updates into self.columns and self.rows and any changes from self.columns and self.rows update self.values?
What you are asking is not easy. You want to: Define something that looks like a attribute in a class But you don't want that attribute to hold any value. Show a transformation of another attributeBe able to retrieve or set a slice of that transformationOn way to do that is create a property attribute that will give you what you want instead of copying the values when you create an instance. That property attribute could then override the method to simulate an index in your . It could look like:There could be other ways to do that but it's probably the simpler way to do that unless you have additional requirements.


Answer URL
https://docs.python.org/3/library/functions.html#property
