Natural Text
The following example returns  in Python 2.x, while it returns  in Python 3.xI can't find any explanation for the difference.  returns  in both Python 2.x and Python 3.x. I will expect the value true as the byte sequence contains an element there evaluates to True.Which part of the language specification / documentation have I miss? 
On Python 2.x, when iterating over a byte string such as , its components are yielded by the iterator as sub strings:This is because byte strings are just strings in Python 2 and thus show the same behaviour.OTOH, if we use python 3, a byte string yields its contents as s:And from this difference, everything else is clear: as we already have noted,  is  while  is .The same holds true when iterating over one element strings:  gives  in Py2 and  in Py3,  gives  in Py2 vs.  in Py3, and thus the difference.Note that are semantically the same: iterate over the given object, get the truth value of every item and return of any of them is .TLDR:  in Python 2 and  in Python 3.
In Python2, b'\x00' is type . In Python3, b'\x00' is \type .In Python3While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, [...](https://docs.python.org/3/library/stdtypes.html#binaryseq)Thus, in Python3, your byte string is composed of the integer 0, which is . In Python2, it is composed of a  "character", which is nonempty, and therefore .


Answer URL
https://docs.python.org/3/library/stdtypes.html#binaryseq
