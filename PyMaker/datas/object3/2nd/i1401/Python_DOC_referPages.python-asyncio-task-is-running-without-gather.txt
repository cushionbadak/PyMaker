Natural Text
I was trying to reproduce & better understand the TaskPool example in this blog post by Cristian Garcia, and I ran into a very interesting result.Here are the two scripts that I used. I swapped out an actual network request with a random sleep call And The command  on python 3.7.1 yields the following result.I have a few questions based on this result.I would not have expected the tasks to run until the context manager exited and triggered , because that is the only trigger for . However the print statements strongly suggest that the  jobs are occuring even before the . What's happening, exactly? Are the tasks running? If so, what started them? Related to (1). Why is the context manager exiting before all the jobs have returned?The  job is supposed to return a tuple. How can I access this value? For a web-based application, I imagine the developer may want to do operations on the data returned by the website.Any help is greatly appreciated!
A task starts as soon as  is called.Straight from the documentation, first line:Wrap the coro coroutine into a Task and schedule its execution.it should not, but. Look at the code in your question:There are three issues:This is a regular synchronous function. Change it to  and add the mandatory  for invoking . Here you don't call  you just create the task but never run it. Your python surely complains about you never awaiting a task. Those warnings must never be ignored because they mean something is going very wrong in your program.[edit:] as user4815162342 pointed out below, the construction you wrote will actually work, though probably not for the intended reasons â€” it works because the coroutine function returned by calling  without awaiting it will be returned and used as if it was aexit's own. You don't want this, make it async and await.Once this is fixed,  will print "aexit triggered" and then calls , which waits for tasks to complete. Therefore messages from tasks not yet completed will appear after the "aexit triggered" message.The return value of  is ignored, unless the exit happens because an exception was raised. In that case,  will swallow the exception. Drop the So that part, fixed:Your  must make the result of tasks available. It is yours to design, python will not do any magic under the hood. From what you have, a simple way would be for  to store the result of  as an attribute of the task pool.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task
