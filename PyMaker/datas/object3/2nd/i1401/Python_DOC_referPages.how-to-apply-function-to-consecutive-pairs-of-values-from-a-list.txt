Natural Text
I have a dictionary and  are elements of lists.We compare this element and previous element in list.For example in BTC:          149 with 200    98 with 149    44 with 98              I want to get new dictionary with tickers and states in every day.First day no state because first day didn't have previous.where elements are state in every day of each ticker.How can i do it?
If you reverse the order of input arguments of  from  to  then the problem of applying a function to consecutive pairs of values of your lists becomes quite easy. I came up with the following function:Examples of usage: If you can't reverse the inputs:If it's impossible to change the order of inputs, we could adopt our function a bit:and you could use it like this:Explanation:In order to get consecutive pairs of elements, we could use a helper function from recipes of :It works like this:Now for each pair of elements we would like to apply your  function. Here  can be useful. It works like this:The only thing left is to prepend the values yielded by  by . As  makes an iterator, we could use  to combine the first  with the rest of the elements.P.S.: Applying this to values of your  dict should be easy enough. I will leave it to you.
You could compare each consecutive pair of values in your lists with a function that loops through the list and uses enumerate to enable access to the previous list item for comparison. Then use dict comprehension with your function to produce a mapped version of your original dict with the compared values.In the example below, it loops through a slice of the list starting with the second list item so the previous element is accessed by the current value of  because the slice has essentially shifted the index values by 1.


Answer URL
https://docs.python.org/3/tutorial/classes.html#iterators
