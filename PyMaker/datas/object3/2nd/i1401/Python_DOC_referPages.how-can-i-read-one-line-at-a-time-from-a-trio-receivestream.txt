Natural Text
asyncio has , allowing something like:(I don't see  available in asyncio but that would be the obvious evolution)How do I achieve the equivalent with trio?I don't see any high level support for this directly in trio 0.9. All I see is  which returns arbitrary sized binary chunks; it seems non-trivial to me to decode and convert this to something line-wise. Is there a standard library function or snippet I can use? I found the io stdlib module which looks promising, but I don't see any way to provide a "feed" method.
You're right, there's no highlevel support for this included in Trio currently. There should be something, though I'm not 100% sure what it should look like. I opened an issue to discuss it.In the mean time, your implementation looks reasonable.If you want to make it even more robust, you might (1) use a  instead of  for your buffer, to make appending and deleting amortized O(n) instead of O(n^2), (2) put a limit on the maximum line length, so evil peers can't force you to waste infinite memory buffering infinitely long lines, (3) resume each call to  at the place where the last one left off instead of restarting from the beginning each time, again to avoid O(n^2) behavior. None of this is super important if you're only dealing with reasonable line-lengths and well-behaved peers, but it doesn't hurt, either.Here's a tweaked version of your code that tries to incorporate those three ideas:(Feel free to use under whatever license you like.)
I ended up writing this. Not properly tested (bugfixes welcome), but it seems to work:Then I can wrap the  with a  and use its  method. Adding  and  would then be trivial, but I don't need it in my case (I'm porting something to trio that doesn't use  anyway).The other flaw with this is that it assumes UTF-8 or a similar encoding where  newlines exist in the encoded bytes object unmodified.It'd be nice to rely on library functions to handle this though; other answers appreciated.


Answer URL
https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readline
