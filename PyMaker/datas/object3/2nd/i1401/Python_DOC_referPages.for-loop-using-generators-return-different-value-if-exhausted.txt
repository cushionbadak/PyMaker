Natural Text
I am looping over an  object and for efficiency, the loop breaks once the item is found. I understand that because I used the  loop I am unable to catch the  error when the generator is exhausted and the item is not found.So far I have implemented a  flag, but it seems kinda hacky.I also thought of checking  to see if it is exhausted but the item might be found in the generator's last item and will return  anyways.From a Pythonic view, is there a way to manage looping over a generator that stops and return when an item is found and returns a different value only when the generator is exhausted.
The Pythonic way is to use a  loop.EditMy initial reply was to how to avoid using the  flag and I wasn't paying attention to what you were actually trying to do. The  construct is also a very useful and often neglected language construct that I wanted to highlight.However, if you just want to check if the set of string is a permutation of another, then why not justThis avoids the need to go through all possible permutation of the words in the string.
From a Pythonic view, is there a way to manage looping over a  generator that stops and return when an item is found and returns a  different value only when the generator is exhausted.As you don't actually return anything - if you fix that part of your function, you'll return  if there are no matches:
There are two approaches. One is to test a membership of an iterator:We can also avoid the function altogether with a ternary operator:If the iterator at hand happens to be the , then we can get away without considering every permutation and count words instead.More generally, if we have a test condition other than membership, we can do:Note on membership in an iterator. According to the official documentation, For user-defined classes which do not define contains() but do  define iter(), x in y is True if some value z with x == z is  produced while iterating over y. If an exception is raised during the  iteration, it is as if in raised that exception.Since  has an  method, testing for membership is possible.For example,


Answer URL
https://docs.python.org/3/reference/expressions.html#membership-test-operations
https://docs.python.org/3/reference/expressions.html#membership-test-operations
