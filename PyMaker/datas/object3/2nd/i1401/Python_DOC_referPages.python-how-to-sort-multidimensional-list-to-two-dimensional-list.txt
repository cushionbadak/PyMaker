Natural Text
How i can sort multidimensional list to two-dimensional list?Multidimensional input: Desired two-dimensional output: all same depth list items need to be in same list.
The idea is basically the same that the one in @TerryA answer, but using setdefault and checking at the end of the for loop if something of the depth was added:Output
You could perhaps use a defaultdict here to measure the depth of each element, along with recursion:The defaultdict will then look like this:You'll then need to translate the defaultdict back to what you want. Note that the default dict will not contain an empty list because it can't detect it (ie:  and  are both lists), but what it will have is a gap in the range (notice how the depth  is missing in the defaultdict).Very messy, I'm sure improvements could be made.
My option with recursion and without any dependencies:To show How it works, I split the method in two: is a recursive method that builds a flat list of tuples where each tuple contains the value and the deep inside the original list.So the call  returns:Then  builds a list of  empty sub-list, where  is the maximum depth, it iterates over the result of  and append each element by index to the proper sub-list.The  does almost the same.
You can do this by first generating a dictionary of elements at each depth (with depth as key in this dictionary and list of elements of that depth as value). The recursive function  below does this. Then all you need to do is flatten the values of that dictionary. (the function  below does what you need).
The recursive approach taken by the other answers comes with the recursion limit imposed by Python and the overhead of two passes. A more efficient one-pass iterative approach is to implement breadth-first search using a queue of tuples of lists and associated depths:so that:returns:
Somebody recently posted a similar question which, by the time I composed my answer, was closed as a duplicate. So I figured I'd add my answer here.Testing:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
