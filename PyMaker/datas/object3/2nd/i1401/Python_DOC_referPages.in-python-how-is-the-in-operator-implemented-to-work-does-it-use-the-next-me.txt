Natural Text
In Python, it is known that in checks for membership in iterators (lists, dictionaries, etc) and looks for substrings in strings. My question is regarding how in is implemented to achieve all of the following: 1) test for membership, 2) test for substrings and 3) access to the next element in a for-loop.  For example, when  or  is executed, does in call ? If it does call it, how then does it work with strings, given that str objects are not iterators(as checked in Python 2.7) and so do not have the next() method? If a detailed discussion of in's implementation is not possible, would appreciate if a gist of it is supplied here. Thanks!
A class can define how the  operator works on instances of that class by defining a  method.The Python data model documentation says:For objects that donâ€™t define , the membership test first tries iteration via , then the old sequence iteration protocol via , see this section in the language reference.Section 6.10.2, "Membership test operations", of the Python language reference has this to say:The operators  and  test for membership.  evaluates to  if x is a member of s, and  otherwise.  returns the negation of . All built-in sequences and set types support this as well as dictionary, for which  tests whether the dictionary has a given key. For container types such as list, tuple, set, frozenset, dict, or collections.deque, the expression  is equivalent to .For the string and bytes types,  is  if and only if x is a substring of y. An equivalent test is . Empty strings are always considered to be a substring of any other string, so  will return .For user-defined classes which define the  method,  returns  if  returns a true value, and  otherwise.For user-defined classes which do not define  but do define ,  is  if some value  with  is produced while iterating over . If an exception is raised during the iteration, it is as if  raised that exception.Lastly, the old-style iteration protocol is tried: if a class defines ,  is  if and only if there is a non-negative integer index i such that , and all lower integer indices do not raise  exception. (If any other exception is raised, it is as if  raised that exception).The operator  is defined to have the inverse true value of .As a comment indicates above, the expression operator  is distinct from the keyword  which forms a part of the  statement. In the Python grammar, the  is "hardcoded" as a part of the syntax of :So in the context of a  statement,  doesn't behave as an operator, it's simply a syntactic marker to separate the  from the .
Python has  special method that is used when you do .For example, here's a class that "__contains__" all even numbers:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/reference/expressions.html#membership-test-details
https://docs.python.org/3/reference/expressions.html#membership-test-details
https://docs.python.org/3/reference/compound_stmts.html#for
