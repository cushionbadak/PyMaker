Natural Text
handling of zero length matches has changed with python 3.7. Consider the following with python 3.6 (and previous):We get the following with python 3.7:I understand this is the standard behavior of PCRE. Furthermore, re.finditer() seems to have always detected the additional match:That said, I'm interested in retrieving the behavior of python 3.6 (this is for a hobby project implementing sed in python).I can come with the following solution:which gives:However, this seems very crafted for these examples.What would be the right way to implement python 3.6 behavior for re.sub() zero length matches with python 3.7?
Your solution may be in the regex egg:Regex Egg IntroductionThis regex implementation is backwards-compatible with the standard  ‘re’ module, but offers additional functionality.  The re module’s behaviour with zero-width matches changed in Python  3.7, and this module will follow that behaviour when compiled for Python 3.7.Installation: Usage: With , you can specify the version (, ) which regex pattern will be compiled with, i.e.:Note:  Version can be indicated by  or  flag, or  in the  pattern.Sources:Regex thread - issue2636regex 2018.11.22
According to the 3.7 What's New,The previous behavior can be restored by changing the pattern to .See https://docs.python.org/3/whatsnew/3.7.html under "Changes in the Python API". It seems that the solution would therefore be to modify such a regex; it doesn't seem like there's a flag you can pass to  to request this behavior.
PCRE (including Python 3.7+) that satisfies the original examples would be:https://regex101.com/r/zTpV1t/3However,  would get substituted to  (instead of the Python 3.6- version of  which produced ) - it might still be good enough for some people.


Answer URL
https://docs.python.org/3/whatsnew/3.7.html
