Natural Text
I have a regex which works perfectly in Python 2:this regex will split an expression into 5 parts, for example,etc.But in Python 3 this regex works quite differently,In general, in Python 3, each character in a part will be split into a separate part, and removed spaces(including none existing leading and trailing ) will become an empty part('') and will be added into the part list.I think this Python 3 regex behavior differs QUITE big with Python 2, could anyone tell me the reason why Python 3 will change this much, and what is the correct regex to split an expression into 5 parts as in Python 2?
The ability to split on zero-length matches was added to  in Python 3.7. When you change your split pattern to  instead of , the behavior will be as expected in 3.7+ (and unchanged in Python < 3.7):test:The  module, a drop-in replacement for , has a "V1" mode that makes existing patterns behave like they did before Python 3.7 (see this answer).


Answer URL
https://docs.python.org/3/library/re.html#re.split
