Natural Text
Take a look at this code snippet:I've created getters and setters for all the faces. Is there any way to make this code more compact, maybe by dynamically creating the getters and setters?
The following code assumes that youhave a reason to have the  dict instead of setting attributes like  directly on the instanceand/or want to implement some meaningful getter and setter logic for the keys in .Otherwise, this exercise is pretty pointless because as Corentin Limier noted you can simply set , and so on.You can use descriptors, a class variable holding the face names and a class decorator. Think of descriptors as reusable properties.In the following sample code I added a  instance variable to  and the face  just for demonstration purposes.In action:
Assuming that's all your class does, you could do something like
if you really want to do that you could use  and  :but as you set  in the  methoud you could just as well make it a regular member...
Your code is redundant, since instance attributes are already stored in a dictionary which is the __dict__ property. I recognize that you are focused on writing your code in fewer lines. It is a good challenge to keep yourself growing, but in the long term you should be focused on the clarity of your code instead.Here is a simpler way to write your code without using properties:It is a tenet of encapsulation that you should hide your "attributes" behind "properties". Even though this isn't strongly enforced in python, it's not a bad idea to do that. Here's the proper way to do that:To answer your question at the end, yes you can dynamically create properties. https://stackoverflow.com/a/1355444/3368572But keep in mind that writing dynamic code should be reserved for special cases since it will make it more difficult for your IDE to follow the flow of your program. If you use the conventions as they are intended then your code becomes self-explanatory to people and to your IDE.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__getattr__
https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__setattr__
