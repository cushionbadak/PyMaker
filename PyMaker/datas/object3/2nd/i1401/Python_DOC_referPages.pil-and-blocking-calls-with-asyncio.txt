Natural Text
I have an asyncio app which uses server from  and async sockets with My code contains some blocking calls from the PIL library like Even though the calls are not blocking for too much time, still, can my web server freeze if I use these blocking calls? More precisely, is it possible that the event loop will miss events because of blocking code? If yes, what is the replacement for these functions, that integrate with asyncio? there is no asyncio version of PIL.  In general, what is considered a 'blocking code' in asyncio? besides the obvious operations like socket, read file, etc.For example, does  is considered ok? what about working on a  array?
can my web server freeze if I use these blocking calls? More  precisely, is it possible that the event loop will miss events because  of blocking code?Server will precisely freeze for time of executing image functions. You won't miss any events, but all events handling will be delayed for the time image functions are executing.Freezing event loop is a bad situation - you should avoid it.If yes, what is the replacement for these functions, that integrate  with asyncio? there is no asyncio version of PIL.Easiest and universal way to avoid freezing event loop - to execute blocking function in another thread or another process using asyncio.run_in_executor. Code snippet there shows how to do it and contains good explanation when to use process or thread:I only want to add that process pool may not be always good solution for every CPU-bound operations. If your image functions don't take much time (or especially if your server doesn't have multiple processor cores) it may still be more productive to run them in a thread.In general, what is considered a 'blocking code' in asyncio? besides  the obvious operations like socket, read file, etc. For example, does  os.path.join() is considered ok? what about working on a numpy array?Roughly saying any function is blocking: it blocks event loop for some time. But many functions like  take so little time so they're not a problem and we don't call them "blocking".It's hard to say exact limit when execution time (and event loop freezing) becomes a problem, especially considering that this time will be different for different hardware. My biased advice - if your code takes (or may take) > 50 ms before returning control to event loop, consider it blocking and use .Upd:Thanks, does it make sense to use one event loop (of the main thread),  and using another thread that will add tasks using the same loop?I'm not sure what you mean here, but I think not. We need another thread to run some job in, not to add tasks in there.I need some way for the thread to inform the main thread after the  image processing is completed`Just await result of  or start task with it.  - is a coroutine that executes something in background thread without blocking event loop. It will look like this:


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
