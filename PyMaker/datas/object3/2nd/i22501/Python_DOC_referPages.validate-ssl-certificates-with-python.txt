Natural Text
I need to write a script that connects to a bunch of sites on our corporate intranet over HTTPS and verifies that their SSL certificates are valid; that they are not expired, that they are issued for the correct address, etc.  We use our own internal corporate Certificate Authority for these sites, so we have the public key of the CA to verify the certificates against.Python by default just accepts and uses SSL certificates when using HTTPS, so even if a certificate is invalid, Python libraries such as urllib2 and Twisted will just happily use the certificate.Is there a good library somewhere that will let me connect to a site over HTTPS and verify its certificate in this way?How do I verify a certificate in Python?
From release version 2.7.9/3.4.3 on, Python by default attempts to perform certificate validation.This has been proposed in PEP 467, which is worth a read: https://www.python.org/dev/peps/pep-0476/The changes affect all relevant stdlib modules (urllib/urllib2, http, httplib).Relevant documentation:https://docs.python.org/2/library/httplib.html#httplib.HTTPSConnectionThis class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior ssl._create_unverified_context() can be passed to the context parameter.https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnectionChanged in version 3.4.3: This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior ssl._create_unverified_context() can be passed to the context parameter.Note that the new built-in verification is based on the system-provided certificate database. Opposed to that, the requests package ships its own certificate bundle. Pros and cons of both approaches are discussed in the Trust database section of PEP 476.
I have added a distribution to the Python Package Index which makes the  function from the Python 3.2  package available on previous versions of Python.http://pypi.python.org/pypi/backports.ssl_match_hostname/You can install it with:Or you can make it a dependency listed in your project's . Either way, it can be used like this:
You can use Twisted to verify certificates.  The main API is CertificateOptions, which can be provided as the  argument to various functions such as listenSSL and startTLS.Unfortunately, neither Python nor Twisted comes with a the pile of CA certificates required to actually do HTTPS validation, nor the HTTPS validation logic.  Due to a limitation in PyOpenSSL, you can't do it completely correctly just yet, but thanks to the fact that almost all certificates include a subject commonName, you can get close enough.Here is a naive sample implementation of a verifying Twisted HTTPS client which ignores wildcards and subjectAltName extensions, and uses the certificate-authority certificates present in the 'ca-certificates' package in most Ubuntu distributions.  Try it with your favorite valid and invalid certificate sites :).
PycURL does this beautifully.Below is a short example. It will throw a  if something is fishy, where you get a tuple with error code and a human readable message.You will probably want to configure more options, like where to store the results, etc. But no need to clutter the example with non-essentials.Example of what exceptions might be raised:Some links that I found useful are the libcurl-docs for setopt and getinfo.http://curl.haxx.se/libcurl/c/curl_easy_setopt.htmlhttp://curl.haxx.se/libcurl/c/curl_easy_getinfo.html
Here's an example script which demonstrates certificate validation:
Or simply make your life easier by using the requests library:A few more words about its usage.
M2Crypto can do the validation. You can also use M2Crypto with Twisted if you like. The Chandler desktop client uses Twisted for networking and M2Crypto for SSL, including certificate validation.Based on Glyphs comment it seems like M2Crypto does better certificate verification by default than what you can do with pyOpenSSL currently, because M2Crypto checks subjectAltName field too.I've also blogged on how to get the certificates Mozilla Firefox ships with in Python and usable with Python SSL solutions.
Jython DOES carry out certificate verification by default, so using standard library modules, e.g. httplib.HTTPSConnection, etc, with jython will verify certificates and give exceptions for failures, i.e. mismatched identities, expired certs, etc.In fact, you have to do some extra work to get jython to behave like cpython, i.e. to get jython to NOT verify certs. I have written a blog post on how to disable certificate checking on jython, because it can be useful in testing phases, etc.Installing an all-trusting security provider on java and jython.http://jython.xhaus.com/installing-an-all-trusting-security-provider-on-java-and-jython/
The following code allows you to benefit from all SSL validation checks (e.g. date validity, CA certificate chain ...) EXCEPT a pluggable verification step e.g. to verify the hostname or do other additional certificate verification steps.
pyOpenSSL is an interface to the OpenSSL library. It should provide everything you need.
I was having the same problem but wanted to minimize 3rd party dependencies (because this one-off script was to be executed by many users). My solution was to wrap a  call and make sure that the exit code was . Worked like a charm.


Answer URL
https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
https://docs.python.org/3/library/ssl.html#ssl.SSLSocket
