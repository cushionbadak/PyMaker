Natural Text
Is there any way to run one last command before a running Python script is stopped by being killed by some other script, keyboard interrupt etc.
If you need to catch other OS level interrupts, look at the signal module:http://docs.python.org/library/signal.htmlSignal Example
You could use the  module. With it, you can register a function which will be called at program termination. An example from here: http://docs.python.org/library/atexit.htmlYou can also pass positional and keyword parameters to the function you want to call at program termination.Note that there are a few circumstances listed in the docs in which your handler won't be called:Note: The functions registered via this module are not called when the program is killed by a signal not handled by Python, when a Python fatal internal error is detected, or when  is called.As such, you may want to also register a signal handler.

WIth apologies to 'Unknown' for taking their answer and correcting it as though it was my own answer, but my edits were rejected.The approved answer contains an error that will cause a segfault.You cannot use sys.exit() in a signal handler, but you can use os._exit so that it becomes:SIGBREAK may be used if the target platform is Windows.Depending on the use case and the need to cleanup in the event of fatal errors - you may add SIGSEGV and SIGILL but generally this is not advised since the program state may be such that you create an infinite loop.
Use the atexit module to register a function that will be called at the end.


Answer URL
https://docs.python.org/3/library/os.html#os._exit
