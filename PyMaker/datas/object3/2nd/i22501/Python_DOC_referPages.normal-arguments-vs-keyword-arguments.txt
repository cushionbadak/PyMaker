Natural Text
How are "keyword arguments" different from regular arguments? Can't all arguments be passed as  instead of using positional syntax?
there are two related concepts, both called "keyword arguments".On the calling side, which is what other commenters have mentioned, you have the ability to specify some function arguments by name. You have to mention them after all of the arguments without names (positional arguments), and there must be default values for any parameters which were not mentioned at all.The other concept is on the function definition side: You can define a function that takes parameters by name -- and you don't even have to specify what those names are. These are pure keyword arguments, and can't be passed positionally. The syntax isAny keyword arguments you pass into this function will be placed into a dictionary named kwargs. You can examine the keys of this dictionary at run-time, like this:
There is one last language feature where the distinction is important. Consider the following function:The  argument will store all of the positional arguments passed to , with no limit to how many you can provide.The  argument will store any keyword arguments:And of course, you can use both at the same time:These features are rarely used, but occasionally they are very useful, and it's important to know which arguments are positional or keywords.
Using keyword arguments is the same thing as normal arguments except order doesn't matter. For example the two functions calls below are the same:
Positional ArgumentsThey have no keywords before them. The order is important!Keyword ArgumentsThey have keywords in the front. They can be in any order!You should also know that if you use default arguments and neglect to insert the keywords, then the order will then matter!
There are two ways to assign argument values to function parameters, both are used.By Position.  Positional arguments do not have keywords and are assigned first.By Keyword.  Keyword arguments have keywords and are assigned second, after positional arguments.Note that you have the option to use positional arguments.If you don't use positional arguments, then -- yes -- everything you wrote turns out to be a keyword argument.When you call a function you make a decision to use position or keyword or a mixture.  You can choose to do all keywords if you want.  Some of us do not make this choice and use positional arguments.
I'm surprised that no one seems to have pointed out that one can pass a dictionary of keyed argument parameters, that satisfy the formal parameters, like so.
Using Python 3 you can have both required and non-required keyword arguments:Optional: (default value defined for 'b')Required (no default value defined for 'b'):This can help in cases where you have a many similar arguments next to each other especially when of the same type, in that case I prefer using named arguments or I create a custom class if arguments belong together.
I'm surprised no one has mentioned the fact that you can mix positional and keyword arguments to do sneaky things like this using  and  (from this site):This allows you to use arbitrary keyword arguments that may have keys you don't want to define upfront.
I was looking for an example that had default kwargs using type annotation:example:


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
