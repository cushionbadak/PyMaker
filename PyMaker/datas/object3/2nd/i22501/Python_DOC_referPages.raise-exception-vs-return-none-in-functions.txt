Natural Text
What's better practice in a user-defined function in Python:  an exception or ?  For example, I have a function that finds the most recent file in a folder.Another option is leave the exception and handle it in the caller code, but I figure it's more clear to deal with a  than an . Or is it bad form to re-raise an exception with a different name?
It's really a matter of semantics.  What does  mean?Is it perfectly reasonable that there's no latest file?  Then sure, just return None.Are you expecting to always find a latest file?  Raise an exception.  And yes, re-raising a more appropriate exception is fine.If this is just a general function that's supposed to apply to any directory, I'd do the former and return None.  If the directory is, e.g., meant to be a specific data directory that contains an application's known set of files, I'd raise an exception.
I would make a couple suggestions before answering your question as it may answer the question for you.Always name your functions descriptive.   means very little to anyone but looking over your function  gets the latest pdf.  I would suggest that you name it .As soon as I did this it became clear what it should return..  If there isn't a pdf raise an exception. But wait there more..Keep the functions clearly defined.  Since it's not apparent what somefuc is supposed to do and it's not (apparently) obvious how it relates to getting the latest pdf I would suggest you move it out.  This makes the code much more readable.Hope this helps!
I usually prefer to handle exceptions internally (i.e. try/except inside the called function, possibly returning a None) because python is dynamically typed.  In general, I consider it a judgment call one way or the other, but in a dynamically typed language, there are small factors that tip the scales in favor of not passing the exception to the caller:Anyone calling your function is not notified of the exceptions that can be thrown.  It becomes a bit of an art form to know what kind of exception you are hunting for (and generic except blocks ought to be avoided). is a little easier than .  Seriously, I hate having to remember to type  at the top of all my django files just to handle a really common use case.  In a statically typed world, let the editor do it for you.Honestly, though, it's always a judgment call, and the situation you're describing, where the called function receives an error it can't help, is an excellent reason to re-raise an exception that is meaningful.  You have the exact right idea, but unless you're exception is going to provide more meaningful information in a stack trace thanwhich, nine times out of ten, is what the caller will see if you return an unhandled None, don't bother.(All this kind of makes me wish that python exceptions had the  attributes by default, as in java, which lets you pass exceptions into new exceptions so that you can rethrow all you want and never lose the original source of the problem.)
In general, I'd say an exception should be thrown if something catastrophic has occured that cannot be recovered from (i.e. your function deals with some internet resource that cannot be connected to), and you should return None if your function should really return something but nothing would be appropriate to return (i.e. "None" if your function tries to match a substring in a string for example).
with python 3.5's typing:example function when returning None will be:and when raising an exception will be:option 2 seem more readable and pythonic(+option to add comment to exception as stated earlier.)


Answer URL
https://docs.python.org/3/library/typing.html
