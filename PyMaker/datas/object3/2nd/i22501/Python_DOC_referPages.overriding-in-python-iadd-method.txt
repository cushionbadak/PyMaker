Natural Text
Is it possible to override += in Python?
Yes, override the  method. Example:
In addition to what's correctly given in answers above, it is worth explicitly clarifying that when  is overriden, the  operation does NOT end with the end of  method.Instead, it ends with . In other words, Python assigns the return value of your  implementation to the object you're "adding to", AFTER the implementation completes.This means it is possible to mutate the left side of the  operation so that the final implicit step fails. Consider what can happen when you are adding to something that's within a list:Now, if your  implementation (a method of an object at ) erroneously or on purpose removes the first item () from the beginning of the list, Python will then run your  method) & try to assign its return value to . Which will no longer exist (it will be at ), resulting in an . Or, if your  inserts something to beginning of  of the above example, your object will be at , not , and whatever was earlier at  will now be at and be assigned the return value of the  invocation.Unless one understands what's happening, resulting bugs can be a nightmare to fix.
In addition to overloading  (remember to return self!), you can also fallback on , as x += y will work like x = x + y. (This is one of the pitfalls of the += operator.)It even trips up experts:What values do you expect , , and  to have?
http://docs.python.org/reference/datamodel.html#emulating-numeric-typesFor instance, to execute the statement  x += y, where x is an instance of a  class that has an __iadd__() method,  x.__iadd__(y) is called.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=iadd#object.__iadd__
