Natural Text
Suppose I have two Python dictionaries -  and . I need to find out if there are any keys which are present in  but not in . What is the fastest way to go about it?Should I convert the dictionary keys into a set and then go about?Interested in knowing your thoughts... Thanks for your responses.Apologies for not stating my question properly.My scenario is like this - I have a  which can be the same as  or may have some keys missing as compared to  or else the value of some keys might be different which has to be set to that of  key's value.Problem is the dictionary has no standard and can have values which can be dict of dict.SaySo 'key2' value has to be reset to the new value and 'key13' has to be added inside the dict.The key value does not have a fixed format. It can be a simple value or a dict or a dict of dict.
You can use set operations on the keys:Here is a class to find all the possibilities: what was added, what was removed, which key-value pairs are the same, and which key-value pairs are changed.Here is some sample output:Available as a github repo:https://github.com/hughdbrown/dictdiffer
In case you want the difference recursively, I have written a package for python:https://github.com/seperman/deepdiffInstallationInstall from PyPi:Example usageImportingSame object returns emptyType of an item has changedValue of an item has changedItem added and/or removedString differenceString difference 2Type changeList differenceList difference 2:List difference ignoring order or duplicates: (with the same dictionaries as above)List that contains dictionary:Sets:Named Tuples:Custom objects:Object attribute added:
not sure whether its "fast" or not, but normally, one can do this
As Alex Martelli wrote, if you simply want to check if any key in B is not in A,  would be the way to go.To find the keys that are missing:So those two solutions are pretty much the same speed. 
If you really mean exactly what you say (that you only need to find out IF "there are any keys" in B and not in A, not WHICH ONES might those be if any), the fastest way should be:If you actually need to find out WHICH KEYS, if any, are in B and not in A, and not just "IF" there are such keys, then existing answers are quite appropriate (but I do suggest more precision in future questions if that's indeed what you mean;-).
Use :
There is an other question in stackoverflow about this argument and i have to admit that there is a simple solution explained: the datadiff library of python helps printing the difference between two dictionaries. 
The top answer by hughdbrown suggests using set difference, which is definitely the best approach:The problem with this code is that it builds two lists just to create two sets, so it's wasting 4N time and 2N space. It's also a bit more complicated than it needs to be.Usually, this is not a big deal, but if it is:You don't need to convert the right dict to a set; set difference takes any iterable (and a dict is an iterable of its keys).You also don't need to convert the left dict to a set, because anything that complies with  has a  that acts like a .Python 2In Python 2,  returns a list of the keys, not a . So you have to ask for  directly.For dual-version 2.7/3.x code, you're hopefully using  or something similar, so you can use :In 2.4-2.6, there is no . But you can at least cut the cost from 4N to N by building your left set directly out of an iterator, instead of building a list first:ItemsI have a dictA which can be the same as dictB or may have some keys missing as compared to dictB or else the value of some keys might be differentSo you really don't need to compare the keys, but the items. An  is only a  if the values are hashable, like strings. If they are, it's easy:Recursive diffAlthough the question isn't directly asking for a recursive diff, some of the example values are dicts, and it appears the expected output does recursively diff them. There are already multiple answers here showing how to do that.
Here's a way that will work, allows for keys that evaluate to , and still uses a generator expression to fall out early if possible. It's not exceptionally pretty though.EDIT:THC4k posted a reply to my comment on another answer.  Here's a better, prettier way to do the above:Not sure how that never crossed my mind...
This is an old question and asks a little bit less than what I needed so this answer actually solves more than this question asks. The answers in this question helped me solve the following:(asked) Record differences between two dictionariesMerge differences from #1 into base dictionary(asked) Merge differences between two dictionaries (treat dictionary #2 as if it were a diff dictionary)Try to detect item movements as well as changes(asked) Do all of this recursivelyAll this combined with JSON makes for a pretty powerful configuration storage support.The solution (also on github):
what about standart (compare FULL Object)PyDev->new PyDev Module->Module: unittest
If on Python â‰¥ 2.7:
Here is a solution for deep comparing 2 dictionaries keys:
here's a solution that can compare more than two dicts:usage example:
My recipe of symmetric difference between two dictionaries:And result is:
As mentioned in other answers, unittest produces some nice output for comparing dicts, but in this example we don't want to have to build a whole test first.Scraping the unittest source, it looks like you can get a fair solution with just this:soResults in:Where:'-' indicates key/values in the first but not second dict'+' indicates key/values in the second but not the first dictLike in unittest, the only caveat is that the final mapping can be thought to be a diff, due to the trailing comma/bracket.
@Maxx has an excellent answer, use the  tools provided by Python:Then, anywhere in your code you can call:The resulting output looks like the output from , pretty-printing the dictionaries with  or  prepending each line that is different.
Not sure if it is still relevant but I came across this problem, my situation i just needed to return a dictionary of the changes for all nested dictionaries etc etc. Could not find a good solution out there but I did end up writing a simple function to do this. Hope this helps, 
If you want a built-in solution for a full comparison with arbitrary dict structures, @Maxx's answer is a good start.
Based on ghostdog74's answer,will print differ value of dicta
Below i created two dictionaries. I need to return the key and value differences between them. I am stuck here. I am not sure which way is correct. I need to know how to get the key value difference. I want to first check if they are the same and if they are not to print key -value differences. I dont want to use deep diff. I dont know to compare if they are the same ?output : currently {1: 0, 2: 1}{1: 0, 2: 6}
Try this to find de intersection, the keys that is in both dictionarie, if you want the keys not found on second dictionarie, just use the not in...


Answer URL
https://docs.python.org/3/library/collections.abc.html
