Natural Text
I'm looking to use a local webserver to run a series of python scripts for the user. For various unavoidable reasons, the python script must run locally, not on a server. As a result, I'll be using HTML+browser as the UI, which I'm comfortable with, for the front end.I've been looking, therefore, for a lightweight web server that can execute python scripts, sitting in the background on a machine, ideally as a Windows service. Security and extensibility are not high priorities as it's all running internally on a small network. Should I run a native python webserver as a Windows service (in which case, how)? Or is it just as easy to install Apache onto the user's machine and run as CGI? Since this is all local, performance is not an issue either.Or am I missing something obvious?
Don't waste a lot of time creating Windows service.Don't waste a lot of time on Windows Apache.Just make a Python service that responds to HTTP requests.  Look at https://docs.python.org/2/library/basehttpserver.htmlhttps://docs.python.org/3/library/http.server.html for version 3Python offers an HTTP server that you can extend with your server-side methods.Look at http://docs.python.org/library/wsgiref.htmlPython offers a WSGI reference implementation that makes your server easy and standards-compliant.Also http://fragments.turtlemeat.com/pythonwebserver.php"I'm trying to avoid making the user run python stuff from the command prompt."I don't see how clicking a web page is any different from clicking desktop icons.Starting a web server based on Python is relatively easy, once you have the web server.  First, build the server.  Later, you can make sure the server starts.  Let's look at some ways.Your user can't use a random browser to open your local page.  They need a bookmark to  launch "localhost:8000/myspecialserverinsteadofthedestop/"  That bookmark can be a .BAT file that (1) runs the server, (2) runs firefox with the proper initial URL.You can put the server in the user's start-this menu.You can make your Python program a windows "service".
Best way is to make your own local server by using command prompt.Make a new folder say ProjectMake a new folder inside project & name it as "cgi-bin"(without quotes)Paste your .py file inside the cgi-bin folderOpen cmd and change to the directory from which you want to run the server and type "python -m CGIHTTPServer"(without quotes)Minimize the cmd window & open your browser and type "localhost:8000/cgi-bin/yourpythonfilename.py"(without quotes).
Running a native python webserver as a windows service should be a no brainer. Check out the documentation for writing windows services (win32api, ActiveState python) in python and also the documentation for subclassing BaseHttpServer and SimpleHttpServer.BTW: I had a similar question on stackoverflow: How to stop BaseHTTPServer.serve_forever() in a BaseHTTPRequestHandler subclass?Basically, you subclass BaseHTTPServer (you have to anyway...) and then... but just read the accepted answer - it set me on the right track!


Answer URL
https://docs.python.org/3/library/http.server.html
