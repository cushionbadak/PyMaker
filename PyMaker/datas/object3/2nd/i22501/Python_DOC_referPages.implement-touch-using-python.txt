Natural Text
 is a Unix utility that sets the modification and access times of files to the current time of day.  If the file doesn't exist, it is created with default permissions.How would you implement it as a Python function? Try to be cross platform and complete.(Current Google results for "python touch file" are not that great, but point to os.utime.)
Looks like this is new as of Python 3.4 - .This will create a  at the path.--Path.touch(mode=0o777, exist_ok=True)Create a file at this given path. If mode is given, it is combined with the processâ€™ umask value to determine the file mode and access flags. If the file already exists, the function succeeds if exist_ok is true (and its modification time is updated to the current time), otherwise FileExistsError is raised.  
This tries to be a little more race-free than the other solutions.  (The  keyword is new in Python 2.5.)Roughly equivalent to this.Now, to really make it race-free, you need to use  and change the timestamp of the open filehandle, instead of opening the file and then changing the timestamp on the filename (which may have been renamed).  Unfortunately, Python doesn't seem to provide a way to call  without going through  or similar...EDITAs noted by Nate Parsons, Python 3.3 will add specifying a file descriptor (when ) to functions such as , which will use the  syscall instead of the  syscall under the hood.  In other words:

Why not try this?:I believe this eliminates any race condition that matters.  If the file does not exist then an exception will be thrown.The only possible race condition here is if the file is created before open() is called but after os.utime().  But this does not matter because in this case the modification time will be as expected since it must have happened during the call to touch().
Here's some code that uses ctypes (only tested on Linux):
This answer is compatible with all versions since Python-2.5 when keyword  has been released.1. Create file if does not exist + Set current time(exactly same as command )A more robust version:2. Just create the file if does not exist(does not update time) 3. Just update file access/modified times(does not create file if not existing)Using  does not simplify the code:Bonus: Update time of all files in a directory
Simplistic:The  ensures there is a file therethe  ensures that the timestamps are updatedTheoretically, it's possible someone will delete the file after the , causing utime to raise an exception. But arguably that's OK, since something bad did happen.

Complex (possibly buggy):This tries to also allow setting the access or modification time, like GNU touch.
It might seem logical to create a string with the desired variables, and pass it to os.system:This is inadequate in a number of ways (e.g.,it doesn't handle whitespace), so don't do it.  A more robust method is to use subprocess :While this is much better than using a subshell (with os.system), it is still only suitable for quick-and-dirty scripts; use the accepted answer for cross-platform programs.
"open(file_name, 'a').close()"  did not work for me in Python 2.7 on Windows.  "os.utime(file_name, None)" worked just fine.Also, I had a need to recursively touch all files in a directory with a date older than some date.  I created hte following based on ephemient's very helpful response.  


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.Path.touch
https://docs.python.org/3/library/pathlib.html#pathlib.Path.touch
