Natural Text
In Python 2.x when you want to mark a method as abstract, you can define it like so:Then if you forget to override it, you get a nice reminder exception. Is there an equivalent way to mark a field as abstract? Or is stating it in the class docstring all you can do?At first I thought I could set the field to NotImplemented, but when I looked up what it's actually for (rich comparisons) it seemed abusive.
Yes, you can. Use the  decorator. For instance, if you have a field called "example" then can't you do something like this:Running the following produces a  just like you want.
Alternate answer:This is like Evan's, but concise and cheap--you'll only get a single instance of NotImplementedField.
A better way to do this is using Abstract Base Classes:Note that you should still have  instead of something like , because there is nothing preventing the inheriting class from calling , and if the abstract  is just , this will fail silently.
Note the passing of the class type into , so if multiple inherited classes use this, they don't all validate the most-derived-class's fields.  You might be able to automate this with a metaclass, but I didn't dig into that.  Defining a field to None is accepted.
And here is my solution:It can be used as
An interesting pattern to handle this is to set attribute to  in the parent class and to access the attribute with a function that ensure it has been set in the child class.Here is an example from django-rest-framework:


Answer URL
https://docs.python.org/3/library/abc.html
