Natural Text
What's a good way to check if a package is installed while within a Python script? I know it's easy from the interpreter, but I need to do it within a script. I guess I could check if there's a directory on the system that's created during the installation, but I feel like there's a better way. I'm trying to make sure the Skype4Py package is installed, and if not I'll install it.My ideas for accomplishing the checkcheck for a directory in the typical install pathtry to import the package and if an exception is throw, then install package
If you mean a python script, just do something like this:
Updated answerA better way of doing this is:The result:Check if  is installed:Why this way? Sometimes you have app name collisions. Importing from the app namespace doesn't give you the full picture of what's installed on the system.Old answerA better way of doing this is:For pip>=10.x use:Why this way? Sometimes you have app name collisions. Importing from the app namespace doesn't give you the full picture of what's installed on the system.As a result, you get a list of  objects. See the following as an example:Make a list of it:Check if  is installed:
If you want to have the check from the terminal, you can runand if nothing is returned, the package is not installed.If perhaps you want to automate this check, so that for example you can install it if missing, you can have the following in your bash script:
As of Python 3.3, you can use the find_spec() method
As an extension of this answer:For Python 2.*,  will perform the same task.For example  will return the following or alike:
You can use the pkg_resources module from setuptools. For example:Note that there is a difference between python module and a python package. A package can contain multiple modules and module's names might not match the package name. 
I'd like to add some thoughts/findings of mine to this topic.I'm writing a script that checks all requirements for a custom made program. There are many checks with python modules too. There's a little issue with the solution. In my case one of the python modules called , but you import it with  and as you see the names mismatch. Therefore the test with the above solution returns a False result, and it also imports the module on hit, but maybe no need to use a lot of memory for a simple test/check.I also found that  will have only the packages has been installed with pip.On my system  returns over  python modules, while  has only , the one I installed manually (python-nmap).Another solution below that I know it may not relevant to the question, but I think it's a good practice to keep the test function separate from the one that performs the install it might be useful for some.The solution that worked for me. It based on this answer How to check if a python module exists without importing itNOTE: this solution can't find the module by the name  too, I have to use  instead (easy to live with) but in this case the module won't be loaded to the memory whatsoever.
If you'd like your script to install missing packages and continue, you could do something like this (on example of 'krbV' module in 'python-krbV' package):
A quick way is to use python command line tool.Simply type You see an error if module is missing.
Go option #2.  If  is thrown, then the package is not installed (or not in ).


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.util.find_spec
