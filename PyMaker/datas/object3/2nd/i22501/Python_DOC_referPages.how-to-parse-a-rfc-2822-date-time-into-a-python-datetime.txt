Natural Text
I have a date of the form specified by RFC 2822 -- say , as a string. Is there a quick and/or standard way to get it as a  object in Python 2.5? I tried to produce a strptime format string, but the +0000 timezone specifier confuses the parser.
The problem is that parsedate will ignore the offset.Do this instead:
I'd like to elaborate on previous answers.  and  both return tuples, since the OP needs a  object, I'm adding these examples for completeness:Or:Note that  and  are both naive datetime objects, there's no timezone information stored. If you need aware datetime objects, check the   arg.Alternatively you could use the dateutil module
Documentation.
There is a parsedate function in email.util.It parses all valid RFC 2822 dates and some special cases.
It looks like Python 3.3 going forward has a new method  in email.utils that takes care of the intermediate steps:email.utils.parsedate_to_datetime(date) The inverse of format_datetime(). Performs the same function as parsedate(), but on  success returns a datetime. If the input date has a timezone of -0000,  the datetime will be a naive datetime, and if the date is conforming  to the RFCs it will represent a time in UTC but with no indication of  the actual source timezone of the message the date comes from. If the  input date has any other valid timezone offset, the datetime will be  an aware datetime with the corresponding a timezone tzinfo.New in version 3.3.http://python.readthedocs.org/en/latest/library/email.util.html#email.utils.parsedate_to_datetime
 is the function to use. Following are some variations.Email date/time string (RFC 5322, RFC 2822, RFC 1123) to unix timestamp in float seconds:Make sure you do not use  (which interprets the time_struct in your computer’s local time, not UTC); use  or  instead (but beware caveat for  in the next paragraph).If you are sure that you have python version 2.7.4, 3.2.4, 3.3, or newer, then you can use  instead of . Before that,  gave incorrect times when invoked during the local time zone’s fall daylight savings transition (bug 14653).Thanks to @j-f-sebastian for caveats about mktime and mktime_tz.Email date/time string (RFC 5322, RFC 2822, RFC 1123) to “aware”  on python 3.3:On python 3.3 and above, use , which returns an aware  with the original zone offset:Caveat: this will throw  if the time falls on a leap second e.g. .Email date/time string (RFC 5322, RFC 2822, RFC 1123) to “aware”  in UTC zone:This just converts to timestamp and then to UTC :Email date/time string (RFC 5322, RFC 2822, RFC 1123) to python “aware”  with original offset:Prior to python 3.2, python did not come with tzinfo implementations, so here an example using  ():If you are using python 3.2, you can use the builtin  implementation :  instead of the third-party .Thanks to @j-f-sebastian again for note on clamping the leap second.


Answer URL
https://docs.python.org/3/library/email.util.html#email.utils.parsedate_tz
https://docs.python.org/3/library/time.html#time.mktime
https://docs.python.org/3/library/calendar.html#calendar.timegm
https://docs.python.org/3/library/email.util.html#email.utils.mktime_tz
https://docs.python.org/3/library/email.util.html#email.utils.mktime_tz
https://docs.python.org/3/library/email.util.html#email.utils.parsedate_to_datetime
https://docs.python.org/3/library/datetime.html#datetime.timezone
