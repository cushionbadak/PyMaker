Natural Text
I'm building a simple helper script for work that will copy a couple of template files in our code base to the current directory. I don't, however, have the absolute path to the directory where the templates are stored. I do have a relative path from the script but when I call the script it treats that as a path relative to the current working directory. Is there a way to specify that this relative url is from the location of the script instead?
In the file that has the script, you want to do something like this:This will give you the absolute path to the file you're looking for.  Note that if you're using setuptools, you should probably use its package resources API instead.UPDATE:  I'm responding to a comment here so I can paste a code sample.  :-)Am I correct in thinking that  is not always available (e.g. when you run the file directly rather than importing it)?I'm assuming you mean the  script when you mention running the file directly.  If so, that doesn't appear to be the case on my system (python 2.5.1 on OS X 10.5.7):However, I do know that there are some quirks with  on C extensions.  For example, I can do this on my Mac:However, this raises an exception on my Windows machine.
you need  (sample below adds the parent directory to your path)
As mentioned in the accepted answer I just want to add thatthe latter string can't begin with the backslash , infact no string  should include a backslashIt should be something likeThe accepted answer can be misleading in some cases , please refer to this link for details
Consider my code:
See sys.pathAs initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter. Use this path as the root folder from which you apply your relative path
It's 2018 now, and Python have already evolve to the  long time ago. So how about using the amazing  coming with Python 3.4 to accomplish the task instead of struggling with , , , , etc.So we have 3 paths here (possibly duplicated):: which is the path of the simple helper script: which contains a couple of template files waiting to be copied.: current directory, the destination of those template files.and the problem is: we don't have the full path of , only know it's relative path to the .Now let's solve this with the the amazing :In the future, it just that simple. :D Moreover, we can select and check and copy/move those template files with :
Instead of using as in the accepted answer, it would be more robust to use:because using __file__ will return the file from which the module was loaded, if it was loaded from a file, so if the file with the script is called from elsewhere, the directory returned will not be correct. These answers give more detail: https://stackoverflow.com/a/31867043/5542253 and https://stackoverflow.com/a/50502/5542253
This code will return the absolute path to the main script.This will work even in a module.
Hi first of all you should understand functions os.path.abspath(path) and os.path.relpath(path) In short os.path.abspath(path) makes a relative path to absolute path. And if the path provided is itself a absolute path then the function returns the same path.similarly os.path.relpath(path) makes a absolute path to relative path. And if the path provided is itself a relative path then the function returns the same path.Below example can let you understand the above concept properly
An alternative which works for me: 
What worked for me is using . Then I specified the  directory I needed to go. For example I just needed to go up one directory.
I'm not sure if this applies to some of the older versions, but I believe Python 3.3 has native relative path support.For example the following code should create a text file in the same folder as the python script:(note that there shouldn't be a forward or backslash at the beginning if it's a relative path)


Answer URL
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/pathlib.html
