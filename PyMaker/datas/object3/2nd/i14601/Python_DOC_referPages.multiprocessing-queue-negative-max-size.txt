Natural Text
There are some examples of code that specify a negative number for the  of a  like soI could not find anything in the documentation that specifies what a negative value means so I looked at the  source code.I can't seem to find the value for . Does a negative number create the biggest Queue possible supported by the OS? Is there any documentation that clarifies this magic value?
The docs for  apparently don't say this directly, but it's strongly implied in two  places.First, the  docs say: implements all the methods of  except for  and .And earlier, in Exchanging objects between processes:The  class is a near clone of .And, if you follow the link:Constructor for a FIFO queue. maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If maxsize is less than or equal to zero, the queue size is infinite.So, yes, -1 is documented to mean infiniteâ€¦ although maybe not in the most direct way possible.You could file a doc bug on this. Maybe all of the classes should explicitly say "The interface is exactly like > except as specified below", instead of leaving you to find that information elsewhere in the docs?Since you actually asked two questions, not one, here's where  is defined:In , the top-level code for the  module, it's added dynamically to the  of the  type.The value it gets set to is platform-specific, but it's generally going to be your platform's  or . The former is defined in POSIX 2004 as part of , and just specifies:The maximum value a semaphore may have.The source comments may be a bit confusing.I don't know about NetBSD, but IIRC, old FreeBSD did the same: the value is provided as a signed integer (actually, it's just a  preprocessor macro, but that makes it an -typed constant), but the APIs that use it take unsigned values. In C, you can just pass  to a function that takes an  and it's the same as passing  (4294967295). Python doesn't have those casting rules, so the module just converts a -1 to  (2147483647), which is safer, and you're not going to have more than 2.1 billion semaphores. I believe current FreeBSD and its descendants, like OS X, just give you  (32767), which makes this unnecessary, but there may be other OS's that do the same.
I can't seem to find the value for _multiprocessing.SemLock.SEM_VALUE_MAXTry this:Specific values found so far (please edit and update accordingly):This may be a good case to suggest an improvement to the documentation. If you would be so kind.Documentation hintsI could not find anything in the documentation that specifies what a negative value means It is actually platform dependent, use the above command the get the actual value.While there does not seem to be documentation on  specific to , the standard library's Queue documentation has this to offer:If maxsize is less than or equal to zero, the queue size is infinite.and multiprocessing's guide states thatThe Queue class is a near clone of Queue.Queue.Hence I suppose it is fair to assume that your interpretation is correct, i.e. create the biggest Queue possible supported by the OS. Actually, we don't have to revert to assumptions, it's a fact:The gory detailsIf you want the gory details of how  is determined at compile time, read on.  Is there any documentation that clarifies this magic value?No -- If you really want to know, you have to follow the code... For CPython there are these #include files multiprocessing.h and the platform C library's limits.h, the latter eventually being included by Python.h. In other words,  is set depending on the host platform. As per Open Group's documentation on limits.h It is is defined as The maximum value a semaphore may have. Minimum Acceptable Value: _POSIX_SEM_VALUE_MAX So  is the minimum which in turn is defined as:The maximum value a semaphore may have. Value: 32 767 


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue
https://docs.python.org/3/library/queue.html#queue.Queue
https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue
https://docs.python.org/3/library/queue.html#queue.Queue
