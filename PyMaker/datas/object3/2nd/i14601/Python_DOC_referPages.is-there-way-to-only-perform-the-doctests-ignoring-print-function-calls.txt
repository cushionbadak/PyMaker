Natural Text
Hypothetically speaking, my function returns a value and has lot of print statements (maybe 100 or more). Is there a way to run  such that all the other printing work can be ignored/skipped (I am familiar with the  directive, which is for skipping  examples), i.e. when I execute my function (or run my module as a script) with s:Or: I should get:nothing, in case of success; orerror messages in case any test example fails;and nothing else. Running  should not give me a terminal window full of outputs / text from those  function calls.Please don't suggest using unit testing (e.g. ) as it'll kill the essence of the question.
 uses , not , to show messages from any failing tests. Therefore you cannot patch out  as this answer originally suggested - this will suppress your  calls and any messages from .One option is to define functions that  with an additional  parameter, so that you can suppress this when necessary.Although you have to change the functions, this also gives you useful options when not testing.Another is to explicitly supply the appropriate  function to the functions that use it, allowing you to pass a NOOP at runtime:This also requires changes to function definitions, but at least avoids changes in the bodies of those functions.A third option is to patch out  for the whole module under test, for example:Note that this affects the outputs that  sees, too, so you don't include any of the  output in the docstring (I assume this is good news!) It won't work with , though.
in addition to jonrsharpe's excellent answer, there is one more way, that does work with the  construct.Here is what the output looks like, depending on how it's called.and for :


Answer URL
https://docs.python.org/3/library/doctest.html
https://docs.python.org/3/library/unittest.html
