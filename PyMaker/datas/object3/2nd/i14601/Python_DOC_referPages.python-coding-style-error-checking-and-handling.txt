Natural Text
I'm writing some software in python and had a question on the preferred coding style of python.Imagine you have a function that takes some raw data, decodes it to a dict and prints the key-value pairsThis is all fine until  starts throwing exceptions everywhere and the whole program comes crashing down. So, we use a try/catch block. But there are a couple ways of doing this and I'm wondering what method is preferred.Everything inside Only  inside  with Only  inside  with All of these methods have some advantages and disadvantages and I don't know which one to pick, and whether it really matters.
The first one is clearly the simplest, but it has a problem: If anything else in the rest of the suite could possibly raise a , it's not clear whether you caught the  you expected and wanted to handle, or an unexpected one that probably means a bug in your code so you probably should have let abort and print a traceback.When you know for sure that's not an issue, go for it.Although really, you should almost certainly be handling the error like this:… or something similar. That way, if you do get that impossible unexpected , you'll be able to tell from the unexpected message, instead of not knowing that you've been throwing away valid data because of a bug for the last 3 months of runs.When that isn't appropriate, the other two ideas both work, but it's usually more idiomatic to use an  block.If you do need to do #2 (maybe you've got, say, a mess of  statements inside  statements or something…), you don't need the  at the top, and shouldn't have it. There should be no way you could have gotten past the  without assigning to . So, if somehow the impossible has happened, you want to get an exception and see that, not silently treat it as .In #3, the  actually is necessary. Which is a problem. The whole idea of "predeclaring" variables before setting them, then checking whether they've been set, is not only not idiomatic, it also often disguises bugs—e.g., what if  is a valid return from ?
The "prefered coding style" is to not "handle" errors unless you can really handle them. This means that at the library level, you should have almost none error handling - just let errors propagate to the application level. At the application level you wanta top-level error handler that will properly log unhandled errors with the full traceback ( is your friend), present the user a user-friendly error message and crash.where you actually can ask the user for a correction (try again, select another file, whatever), do it. Just printing the error message - without teh full traceback etc - is just a waste of everyone time. 


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
