Natural Text
This question already has an answer here:List comprehension rebinds names even after scope of comprehension. Is this right?                    5 answers                I can't find anywhere that defines this behaviour:How safe is this code? Will  always be assigned to the last element in the list if any element in the list is greater than 0? 
In Python 2.x, variables defined inside list comprehensions leak into their enclosing scope, so yes,  will always be bound to the last value bound to  during the list comprehension (as long as the result of the comprehension is a non-empty, and therefore "truthy", list).However, in Python 3.x, this is no longer the case:The behaviour is (just barely) documented here:In Python 2.3 and later releases, a list comprehension “leaks” the control variables of each  it contains into the containing scope. However, this behavior is deprecated, and relying on it will not work in Python 3.... with the change in Python 3.x documented here:[...] note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a  constructor, and in particular the loop control variables are no longer leaked into the surrounding scope.It would appear that the 2.x behaviour wasn't something anyone was particularly proud of, and in fact Guido van Rossum refers to it as 'one of Python's "dirty little secrets"' in a blog post.
Is it not easier like that?


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#changed-syntax
https://docs.python.org/3/library/stdtypes.html#list
