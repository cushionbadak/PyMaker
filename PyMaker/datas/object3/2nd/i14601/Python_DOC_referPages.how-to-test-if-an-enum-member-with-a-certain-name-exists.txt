Natural Text
Using Python 3.4 I want to test whether an Enum class contains a member with a certain name.Example:gives:I could catch the  and take the exception as indication of existence but maybe there is a more elegant way?
You could use  - an ordered dictionary mapping names to members:
I would say this falls under EAFP (Easier to ask for forgiveness than permission), a concept that is relatively unique to Python. Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.This contrasts with LBYL (Look before you leap), which is what I think you want when you say you are looking for "a more elegant way."Look before you leap. This coding style explicitly tests for pre-conditions before making calls or lookups. This style contrasts with the EAFP approach and is characterized by the presence of many if statements.In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the looking” and “the leaping”. For example, the code, if key in mapping: return mapping[key] can fail if another thread removes key from mapping after the test, but before the lookup. This issue can be solved with locks or by using the EAFP approach.Therefore based on the documentation, it is actually better to use / blocks for your problem.TL;DRUse / blocks to catch the  exception.
Could use the following to test if the name exists:Of use x.value to test for the enum value:


Answer URL
https://docs.python.org/3/library/enum.html#iteration
