Natural Text
How do we test whether X quacks like a list/tuple?By that I mean we can possibly subset it by 0 and 1 (etc), though it cannot be a string (which could also be subset).I thought to test  and , but that would mean a dictionary would still pass which I do not want it to. You could then also test it is not a dictionary, but I wouldn't be so sure about sublasses of dicts etc.Is there a more official way to test whether something quacks like a list or tuple under this simple specification?E.g. allowed input should be:
Would you like to check if a value is a sequence?An iterable which supports efficient element access using integer indices via the getitem() special method and defines a len() method that returns the length of the sequence. Some built-in sequence types are list, str, tuple, and bytes. Note that dict also supports getitem() and len(), but is considered a mapping rather than a sequence because the lookups use arbitrary immutable keys rather than integers.Old way (deprecated in 2.7):New way:They are not equivalent - the latter is more accurate but custom types need to be registered withÂ it.Also, strings are sequences according to both definitions. You might want to treat  specially.
Don't allow a bare string as an argument; it's a special case waiting to bite you. Instead, document that the input must be in the form of a tuple/list/whatever, but the second element is optional. That is,are legal, but notThis way, your function can assume that  will be an email address, and  may exist and be an alias, but it is the user's problem if they supply something else.
Duck typing means you just do want you want to do, and if it doesn't work it means you're not dealing with a duck.If you specifically don't want to get strings, check for strings and raise an exception.And then do whatever you want to do, no type checking.
A solution based on Kevin's useful comment:Mappings such as dicts and sets will not pass the first test. Strings will, but they will obviously fail on the second test.


Answer URL
https://docs.python.org/3/glossary.html#term-sequence
