Natural Text
so far i'm trying to create a frequency analysis program.so far I have:We now need to swap the key with the most frequent letters.EG. input: Hellofind frequency: L,L,O,H,Eswap with most frequency letters from top of code(letters).  then put back in order of hello.
what @tommy was suggesting does help, but you have to read through a bit of text.
Here is a bit of code I have that performs frequency analysis alright. I notice that this is basically an implementation of what paddyg suggested:I also included some other functions to generate a caesar cipher key and encode and decode things with a key, so that the switch_crack function that performs frequency analysis can be put to use immediately.HoweverThis does letter frequency analysis. While one can certainly rank the frequency of letters in the English language, this is far from infallible. This method would require a huge sample to reliably guess the key of a switch cipher. For example, I pasted the entire wikipedia entry on elephants into this. It correctly guessed some of the letters, like which letter was e, however, it had a number of letters switched or misplaced.What I am saying is, this basic algorithm can be made much, much better if one includes ways to pay attention to the words. It could, for example, conceivably know which combinations are words, and switch around its letter guesses if it recognizes that gibberish is coming out. Or it could look at a three letter word it is pretty sure ends with e and guess that it is "the" and update it's key accordingly. The functions I have above are a clean implementation of basic frequency analysis with letters, but there is a lot more to good frequency analysis then just looking at letters.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
