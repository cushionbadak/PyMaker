Natural Text
I have a package with a directory "tests" in which I'm storing my unit tests. My package looks like:From my package directory, I want to be able to find both  and . I'd prefer not to have to install a third-party library ( or etc) or have to manually build a  to run this in.Surely there's a way to tell  not to stop looking once it's found a test?  will find  and  will find . Isn't there a way to find both?
In doing a bit of digging, it seems that as long as deeper modules remain importable, they'll be discovered via . The solution, then, was simply to add a  file to each directory to make them packages.So long as each directory has an ,  can import the relevant  module.
If you're okay with adding a  file inside tests, you can put a  function there that will handle discovery for you.If a test package name (directory with ) matches the          pattern then the package will be checked for a 'load_tests' function. If          this exists then it will be called with loader, tests, pattern.If load_tests exists then discovery does  not recurse into the package,          load_tests is responsible for loading all tests in the package.I'm far from confident that this is the best way, but one way to write that function would be:Pretty ugly, I agree.First you add all subdirectories to the test packages's path (Docs).Then, you use  to walk the path, looking for packages or modules.When it finds one, it then checks the module members to see whether they're classes, and if they're classes, whether they're subclasses of .  If they are, the tests inside the classes are loaded into the test suite.So now, from inside your project root, you can typeUsing the  pattern switch.  If all goes well, you'll see what I saw, which is something like:Which is what was expected, each of my two example files contained two tests,  and  each.Edit: After some more digging, it looks like you could specify this function as:This uses the  method instead of the  method I used above.  It still modifies the  package path and walks it looking for modules, which I think is the key here.The output looks a bit different now, since we're adding a found testsuite at a time to our main testsuite :But we still get the 4 tests we expected, in both classes, in both subdirectories.


Answer URL
https://docs.python.org/3/library/pkgutil.html
