Natural Text
As we all know, a computer works with numbers. I'm typing this text right now, the server makes a number out of it and when you want to read it, you'll get text from the server. How can I do this on my own? I want to encrypt something with my own algorithm and my algorithm works fine with integers, but now I want to encrypt a String and I don't know how to convert a Unicode string to an integer number and vice versa. I'm using Python 3. Is there anybody who knows an elegant solution for my problem?
You are looking for the  function, I think:This gives you the integer number for the Unicode codepoint. To convert a whole set of characters use a list comprehension:It's inverse is the  function:Note that when you encrypt end decrypt text, you usually encode text to a binary representation with a character encoding. Unicode text can be encoded with different encodings with different advantages and disadvantages. These days the most commonly used encoding for Unicode text UTF-8, but others exist to. In Python 3, binary data is represented in the  object, and you encode text to bytes with the  method and go back by using : values are really just sequences, like lists and tuples and strings, but consisting of integer numbers from 0-255:Personally, when encrypting, you want to encode and encrypt the resulting bytes. If all this seems overwhelming or hard to follow, perhaps these articles on Unicode and character encodings can help out:What every developer needs to know about UnicodeNed Batchelder’s Pragmatic UnicodePython’s Unicode HOWTO
The usual way to convert the Unicode string to a number is to convert it to the sequence of bytes. The Unicode characters are pure abstraction, each character has its own number; however, there is more ways to convert the numbers to the stream of bytes. Probably the most versatile way of doing that is to encode the string to the UTF-8 encoding. You can choose many ways to get integer number from it. Here is one (I have borrowed the nice string from Ivella -- I hope no bad words are inside :) :Now we have sequence of bytes where the ones with the number from 128 to 255 are displayed as hex-coded escape sequences. Let's convert all bytes to their hexcodes as a bytestring.And we can look at it as at a big number written (as text) in hexadecimal notation. The  allows us to convert it to the abstract number that--when printed--is more usually converted to decimal notation.Now you can store it as a number, encrypt it (although it is more usual to encrypt the earlier sequence of bytes), and later convert it back to the integer. Beware, there is not many languages (and probably no database) that are able to work with that big integers. Let's go back to the original string. Firstly convert it to the hexadecimal representation (string).We had to remove the  as it only says that the rest are the hexadecimal characters that represent the number. Notice that the  is of the  type. As we are in Python 3 (see the top), the  means Unicode string. The next step is to convert the couples of hexa numerals back to bytes. Let's try :Oops! it accept only bytestrings. Then, encode each hexa numeral in Unicode to hexa numeral in the bytestring. The way to go is to encode; however, encoding to ASCII is trivial.Now we have similar bytestring as after the first . Let's use the inverse operation -- decode from UTF-8. We should get the same Unicode string that we started with.:)
From python's documentation:The binascii module contains a number of methods to convert between  binary and various ASCII-encoded binary representations.For example you may use  to obtain an hexadecimal representation of the binary string "LOL", and turn it into an integer through the int built-in function:Since you need to apply this to unicode strings, you'll need first to encode them as binary strings. You can use the method  for this purpose:That's it.For the vice versa, you will need to reverse each step. Firstly turn the integer in a hexadecimal representation as binary string (you can go with  and then encode it), turn the hex in ascii with  and finally decode as utf-8:This was a step-by-step explanation, if you really will be using this facilities it would be a good idea to arrange them in form of functions.
Building on the solution given by Martijn Pieters, you can make your string a huge number, what Python 3 can deal very well, since it's int type is arbitrarily large (that is not "how computers works", see my commentary of your question).Given the list of character numerical codes:And knowing, from Wikipedia's page on Unicode that the greatest unicode character number is 10FFFF (in hexadecimal), you can do:Thus:Where this 0x110000 (from 10FFFF + 1) is the number of different foreseen Unicode characters (1114112, in decimal). If you are sure you are only using English alphabet, you can use here 128, and if you are using some Latin language with accents, it is safe to use 256. Either way your number will be much smaller, but it will be unable to represent every Unicode character.
This converts each character to a number...


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes
https://docs.python.org/3/library/stdtypes.html#str.encode
https://docs.python.org/3/library/stdtypes.html#bytes.decode
https://docs.python.org/3/howto/unicode.html
