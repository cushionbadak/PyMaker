Natural Text
I have a Django model that relies on a tuple. I'm wondering what the best practice is for refering to constants within that tuple for my Django program. Here, for example, I'd like to specify "" as something that is more readable and does not require commenting. Any suggestions?EDIT:If possible I'd like to avoid using a number altogether. Somehow using the string 'Requires attention' instead would be more readable.
It is quite common to define constants for the integer values as follows:By moving the constants and  inside the class, you keep the module's namespace cleaner, and as a bonus you can refer to  wherever you import the  model.
Keep in mind that as others noted, the proper way is to put these variablesinside your Model class. That's also how the official django example does it.There is only one reason where you'd want to put it outside the class namespaceand that is only if these semantics are equally shared by other models of your app. i.e.you can't decide in which specific model they belong.Though it doesn't seem like this is the case in your particular example.
Python 3.4+: You write "If possible I'd like to avoid using a number altogether."and indeed a named representation is clearly more pythonic.A bare string, however, is susceptible to typos.Python 3.4 introduces a module called  providing  and  pseudoclassesthat help with this situation.With it, your example could work as follows:and once the Django team picks up , the will even be built into Django.
You could use a , using an Immutable for a constant seems fitting. ;-)Using attributes on  as constants like in Alasdair's answer makes more sense in this case, but namedtuples are very cheap substitutes for dicts and objects that don't change. Especially very handy if you want to have lots of them in memory. They are like regular tuples with a bonus of a descriptive  and attribute access.
One possible approach could be to use python range function with the combination of tuple.
My approach:This allows you to write convenient expressions:Also, it allows you to not create unnecessary global variables.If you really want to use integer field:And:
You could use a dictionary for a small improvement in clarity:
I don't use Django, but I do something like the following quite a bit under Pyramid and Twisted ...So the essence is this:There is a base "constants" class , and another class for each type.  the class defines the keywords to a value in ALLCAPSI toss in the plaintext  into the class too.  why? because i might need to build out some DB tables with them, or I might want them for error/status messages.  I use the numbers and not the ALLCAPS variable name as a personal preference.  i initialize a  class variable which basically monkeypatches the class by precompiling a bunch of variables within a dict because...the class is derived from that base class, which offers classmethod functionality to search for a value or do other standard things you often need to do with constants.It's not a one-size-fits-all approach, but I've generally come to really like this.  You can easily use a dict to define the pairs , have the 'mapping' function setup some other attributes, such as giving you tuples of the pair values as k,v or v,k or any weird format you might need.my code can then looks like this:whenever you need to use the constants in another way, you just add or alter the classmethods of the base.  
Sometimes I have to create some huge choice list. I do not like to type like a monkey, so I rather to create a funcion like this:And use like this:


Answer URL
https://docs.python.org/3/library/enum.html
