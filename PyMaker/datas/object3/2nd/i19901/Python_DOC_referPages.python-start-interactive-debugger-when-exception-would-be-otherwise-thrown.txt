Natural Text
Is there any way to make a python program start an interactive debugger, like what  instead of actually throwing an exception?I know the difficulty of making this work, but it would be much more valuable than a huge stack trace after which I have to use to figure out where to insert breakpoints and then restart the program to debug it. I know that simply making the debugger start instead of throwing an exception would not make sense because any exception can be caught at a level or another, so if I could just select a list of exceptions for which an interactive debug session would start instead of them being thrown (because I know the exceptions in this list would really be "errors" and no meaningful program behavior could follow afterwards)...I've heard that Common Lisp has something like this, but I don't know how it works exactly, just that "true lispers" praise it a lot...
The simplest way is to wrap your entire code inside a  block like this:There is a more complicated solution which uses  to override the handling of uncaught exceptions, as described in  this recipe:The above code should be included in a file called  inside  directory, which is automatically imported by python. The debugger is only started when python is run in non-interactive mode.
This question is quite old, so this is mainly for future me
If you are inside the REPL, you can doSee https://docs.python.org/2/library/pdb.html and https://docs.python.org/3/library/traceback.html
I wrote a package to start pdb on exception. It takes @boreis-gorelik's answer, and modifies the interpreter state at runtime so no code changes are necessary:InstallationUsageWhen the exception occurs, the pdb repl should start in the given terminal 


Answer URL
https://docs.python.org/3/library/site.html
https://docs.python.org/3/library/traceback.html
