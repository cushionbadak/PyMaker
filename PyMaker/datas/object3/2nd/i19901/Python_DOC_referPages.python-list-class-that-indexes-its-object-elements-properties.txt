Natural Text
I am looking for the best way to create a list in python that creates hashed indexes (dicts) for all the properties of the objects put into the list.I imagine the data structure of the IndexingList would then look like this:where the objects within the 'indexes' nodes refer to the same objects in 'items'.I think property values that are themselves objects could receive unique index-keys by using str(property) to obtain something to stick in 'indexes'.
This is actually pretty easy to do using some s - although you might consider using an actual database if you are using this a lot.Used like so:
I must say that Lattyware provides a really nice solution. I'll still provide my own quick and dirty approach, as when when indexing on unique items it's a simple one liner. Instead of building a nice wrapper container I sometimes create an index on a certain column:Provided the key in that column is unique and we don't add any new elements to the list nor modify the value we indexed on we may use:So we can use it like:However, if we wish to index on the 0th column we must use a defaultdictUsage:If instead of tuples you're using dictionaries or even named tuples (provided all elements have the field you're indexing on) you could just provide the field name for the columnObviously one might also choose to use a temporary sqlite database in memory.


Answer URL
