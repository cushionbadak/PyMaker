Natural Text
argvWhat on Earth is it!?Edit: If you can, will you please write a line or two and explain how it works? 
Try this simple program, name it as and try executingNote what is argv now.
It means arguments vector and it contains the arguments passed to the program. The first one is always the program name.For example, if you executed your Python program like so......then your  will contain  and .
Before you waste time "starting to learn some higher levels of code", you need to learn how to find information like this. Knowing how to look up an unfamiliar function/class/variable, without having to wait 30-60 minutes for people on SO to answer you (and apparently rack up multiple downvotes in the process), will come in far more useful than adding one more piece of information to your repertoire.From the built-in help:This works with any module. Often, individual classes and functions within the modules have more detailed information (but that doesn't work for argv, since it's just a , and lists don't have custom help).If that's not enough information, the documentation (or the 2.x documentation) says:sys.argvThe list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter, argv[0] is the empty string.To loop over the standard input, or the list of files given on the command line, see the fileinput module.The first web result for googling "python argv" is a blog post by Python author Guido that may be a bit too advanced for you, but the second one is a tutorial on "Command Line Arguments".As most of these things tell you, many simple scripts can often just use  instead of dealing with  directly, while more complicated scripts often need to use  (or , , or other alternatives, if you need to work with Python 2.6 or earlier).One example where  is just right is this trivial program to convert relative pathnames to absolute (for those who aren't on linux or other platforms that come with an abspath, GNU readlink, or similar tool built-in):Or this "add" tool that just adds a bunch of numbers (for those stuck with cmd.exe or other defective shells that don't have arithmetic built in):
You can run python program with or without arguments. If you use arguments they are inside argv vector. For examplePYTHON PROGRAM!!!RUN SCRIPT LIKE THISAND RESULT ISexamples are from tutorialspoint
If you have an executable python script and call it with arguments like this:then  is a list containing:Using it is the only way to access these arguments, and that is its main use.  However, most applications use libraries such as the argparse module to access this information without needing to use  directly.
sys .argv will display the command line args passed when running a script or you can say sys.argv will store the command line arguments passed in python while running from terminalIt stores the arguments in a list ds. sample usage: Create a file say: cmdlineargs.py and put the following in it: Now run the file in your terminal/cli : or something likeNotice what happens now. Your script will print everything passed in your cmd line argument while you ran that script. Important to know: You can look up each specific argument passed like this, probably:Sample result:Say you run the following in your terminal.Your result should look something like: Notice argument 0 is the same as the file name  . Hope this was helpful.Thanks for the upvotes, improving my answer for the loop. A little more pythonian answer should look like this:I too am new to python so I had a habit of declaring i and j for traversing arrays. :)
Script printArgv.py: Run it with:You would find the output:Which means the sys.argv is a list of parameters you input following the script name.


Answer URL
