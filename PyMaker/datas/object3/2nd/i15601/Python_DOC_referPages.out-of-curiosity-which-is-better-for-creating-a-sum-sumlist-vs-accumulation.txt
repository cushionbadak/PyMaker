Natural Text
I am calculating the total distance of a route (for a traveling salesman problem) and I am curious about which is better:  summing a list of integers, or using total += value (not sure what the technical term for this is.. concatenation I believe?).  In other words:ordistance() returns an  value, and the number of locations varies between about 0 to 100 for different routes.Thoughts on either method (or a completely different way) appreciated!Edit:Accumulation , not Concatenation.
Why not use a generator expression with :This solution avoids creating an unnecessary list like the first solution (saves on memory consumption) and is also a lot more concise than the second (cleanliness counts).That said, you could always merge the first solution into a one-liner:But then, as I said above, why create a list just to throw it away?
Best is to just use a generator expression with This saves the overhead of creating a list.totalDistance = [distance(location, location+1) for location in route]The  loop version also doesn't create a list. It's fine, just a little verbose compared to using .  exists precisely for cases like thisHow does  work? Seems like it should be the next item from routeFor interest I compared @iCodez examples in PyPy 2.2.1. First run of each function is to allow the JIT to compile the functionWow..genexp performance is much worse
On my machine, iterate through a generator is slower than a list:


Answer URL
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
