Natural Text
Here's the codeI wanted to try and do a quick breakdown, to see if I understand how exactly this works. Here we go: 1) import csv brings in the csv method2) We define a function, which takes 'file_obj' as its argument3) the reader variable makes a call to a function within csv called "DictReadre", which subsequently takes arguments from 'file_obj' and specifies a 'delimiter'4) I get confused with this for loop, why is that we don't have to define line beforehand? Is it that line is already defined as part of 'reader'? 5) I'm really confused when it comes to 'name' and 'main', are these somehow related to how we specify a 'file_obj'? I'm equally confused with how we end up specifying the 'file_obj' in the end; I've been assuming 'f_obj' somehow manages to fill this role. --edit-- Awesome, this is starting to make a whole lot more sense to me. So, when I make a 'class' call to DictReader(), I'm creating an instance of it in the variable 'reader'? Maybe I'm going too far off the beaten path, but what in the DictReader() class allows for it to determine the structure of fields like 'last_name' or 'first_name'? I'm assuming it has something to do with how CSV files are structures, but I'm not entirely certain.
1) import csv brings in the csv methodWell, not quite; it brings in the  module.** â€¦ which includes the  class, which has a  method that you call implicitly, but that's not important here.2) We define a function, which takes 'file_obj' as its argumentExactly.** Technically, there's a distinction between arguments and parameters, or between actual vs. formal arguments/parameters. You probably don't want to learn that yet. But if you do, formal parameters go in function definitions; actual arguments go in function calls.3) the reader variable makes a call to a function within csv called "DictReadre", which subsequently takes arguments from 'file_obj' and specifies a 'delimiter'Again, not quite; it makes a call to the class . Calling a class constructs an instance of that class. Arguments are passed the same way as in a function call.* You can see the parameters that  takes by looking it up in the help.* In fact, constructing a class actually calls the class's  method, and then (usually) its  method. But that's only important when you're writing new classes; when you're just using classes, you don't care about  or . That's why the documentation shows, e.g., .4) I get confused with this for loop, why is that we don't have to define line beforehand? Is it that line is already defined as part of 'reader'?No, that's exactly what  statements do: each time through the loop,  gets assigned to the next value in . The tutorial explains in more detail.A simpler example may help:This assigns  to , prints out that , then assigns  to , prints out that , then assigns  to , prints out that , then it's done.Also, you may be confused by other languages, which need variables to be declared before they can be used. Python doesn't do that; you can assign to any name you want anywhere you want, and if there wasn't a variable with that name, there is now.5) I'm really confused when it comes to 'name' and 'main'This is a special case where you have to learn something reasonably advanced a little early.The same source code file can be used as a script, to run on the command line, and also as a module, to be imported by other code. The way you distinguish between the two is by checking . If you're being run as a script, it will be . If you're being used as a module by some other script, it will be whatever the name of your module is.So, idiomatically, you define all your public classes and functions and constants that might be useful to someone else, then you do  and put all the "top-level script" code there that you want to execute if someone runs you as a script.Again, the tutorial explains in more detail.


Answer URL
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/tutorial/controlflow.html#for-statements
https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts
