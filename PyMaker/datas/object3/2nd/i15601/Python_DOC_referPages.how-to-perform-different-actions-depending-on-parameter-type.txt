Natural Text
In languages that use static binding like java you can define multiple functions all having the same name but different parameters. Learning Python, until now I considered the lack of this mainly as "safety issue" (like  might be interpreted as  because of the quotes). I thought I would simply need to be more careful.Now I found a situation, where the lack of static binding is simply inconvenient. Please consider this tupel:To remove an item from  with static binding one could do something like this(pseudocode:I find this very convenient, because no conditions are needed to select the right action to perform. Furthermore this code makes overloading easier, as one can decide to just overload one of the functions or both.Trying to deal with a situation like this in Python, I only find inconvenient solutions like some if-clauses that check for the type.Is there a better way?
Python doesn't have overloading of methods so you're going to have to check the type of the argument sorry.
check out this question: Differences between isinstance() and type() in pythonIf you end up doing the if type approach suggested, you may want to consider duck typing or isinstance alternatives
Your problem could be tackled by using generic methods/functions. These don't come built-in with python, but can be roped in by either a 3rd-party library, or you write one yourself.I have been working happily with PEAK rules a few years ago, but while it should still work, it seems to have fallen out of favour a bit.The new PEP 443 (single argument dispatch) is accompanied by external implementation, singledispatch. https://pypi.python.org/pypi/singledispatch/3.4.0.3With that, your problem could be solved like this:
The particular case you give seems like one where overloading is not needed anyway.Another option is to use optional keyword argumentsThere are lots of previous questions on python overloading, and this is one answer that might help understand why it's not seen as a problem not to have it.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#function-annotations
