Natural Text
I'm having issues finding something that seems like it would be relatively simple to me. I'm using Celery 3.1 with Python 3 and am wanting to initialize my workers with arguments so that they can use these details for setup.In specific: These workers will be consuming tasks which require interacting with a third-party API using authentication credentials. It's necessary for the worker to pass the authentication details to API server prior to consuming any tasks (authentication details are stored in cookies after the first authentication request).I would like to pass these login credentials to the worker when it is started from the CLI. I would then like the worker to authenticate using them and store the session for use when consuming future tasks (ideally this would be stored in an attribute that can be accessed from tasks). Is this possible with Celery?As a side note, I have considered passing a  object (from the Python  library) as a task argument but that would require serializing which looks like is frowned upon.
I would suggest using an abstract task base class and caching the .From the Celery docs:A task is not instantiated for every request, but is registered in the task registry as a global instance.This means that the __init__ constructor will only be called once per process, and that the task class is semantically closer to an Actor.This can also be useful to cache resources...Now when you create the tasks that will make API requests:Also you can pass the API authentication options using the  decorator as an extra argument which will be set on the  of the task, for example:And make the base class use the passed authentication options:You can read more on the Celery docs site:Tasks InstantiationTask Abstract ClassesNow back to your original question which is passing extra arguments to the worker from the command line:There is a section about this in the Celery docs Adding new command-line options, here's an example of passing a username and a password to the worker from the command line:The code:
I would think you could call the script you wrote using command line arguments. Something like the following:Inside your script, you can have your main function wrapped in an  or  decorator. Something like that should get you started. Be sure to also check out Python's argparse for more sophisticated argument parsing.


Answer URL
https://docs.python.org/3/library/argparse.html
