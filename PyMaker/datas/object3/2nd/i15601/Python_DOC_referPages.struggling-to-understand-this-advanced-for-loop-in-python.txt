Natural Text
I know how to do basic for loops but I'm struggling to understand the for loop in this code snippet. I am looking for a way to find a substring within a list and grab the index (so I can take that string and slice it - in this example, extract the value 25 given there is a list item X minute[s]).This code works and returns 3, but I am struggling to understand i for i etc. - I've only ever worked on for loops that start with for. Note i haven't defined i or s. I do understand the enumeration. Note theres probably other ways to do this but when I started down this road I realised I didn't understand the many examples I found which are similar to the for loop below, so I'm fixated now on understanding this method. Much appreciate the explanation in advance
The first term here, , is what gets returned for each iteration of the loop (assuming the condition is true - more on that later).In the second part,  the  function will make the list of strings into a list of tuples that can be iterated over like this:Then, multiple assignment happens for each iteration in the loop. For example, if you do  then  will be 0 and  will be 1. The only difference is that in this case, the tuples are coming from the  function and are being assigned to  and .Finally, the last portion,  will only cause the first  to be returned when the condition is true (i.e., when "minutes" is in the  variable that is currently being looked at). If you add a second term to  containing the string "minutes",  will then contain multiple numbers because the condition will be true for multiple elements in the list.
The function  will return a list of tuples in the form  and a conditional list comprehension is used to filter that list, finally only the indexes are chosen. 
List comprehensions can be directly translated to explicit  statements.You take everything from the first  clause and nest them as separate statements. In the innermost statement, you  the expression before the  clause to the list. That's the entire rule. So, this:â€¦ means:For a longer explanation, see List Comprehensions in the official tutorial.  For the fully gritty details of the syntax and semantics, see Displays for sets, lists, and dictionaries in the language reference.*If you don't understand , that's just a way of getting both the index and value of each element of a list (or other iterable).  gives you , then , then .So, each time through the loop,  is one of the values from , and  is the index of that value. So at the end, we have a list of all the indices from  whose corresponding values included the string . For example, given this:You'll get , because elements #1 and #3 contain .* Note that some of the details have changed over time, so if you're using an older version, especially a 2.x version, switch to the right version in the docs.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
https://docs.python.org/3/library/functions.html#enumerate
