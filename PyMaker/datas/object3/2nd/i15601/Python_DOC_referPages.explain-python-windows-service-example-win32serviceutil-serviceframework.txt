Natural Text
Most python windows service examples based on the win32serviceutil.ServiceFramework use the win32event for synchronization.For example:http://tools.cherrypy.org/wiki/WindowsService (the example for cherrypy 3.0)(sorry I dont have the reputation to post more links, but many similar examples can be googled)Can somebody clearly explain why the win32events are necessary (self.stop_event in the above example)? I guess its necessary to use the win32event due to different threads calling svcStop and svcRun? But I'm getting confused, there are so many other things happening: the split between python.exe and pythonservice.exe, system vs local threads (?), python GIL..
For the top of What exactly do you mean by system threads vs local threads? You mean threads created directly from C outside the GIL?The  just related the names to callable python objects and a bunch of properties, like the accepted methods.For example a the accepted controls from the ServiceFramework:I suppose the events are recommended because that way you could interrupt the interpreter from outside the GIL, even if python is in a blocking call from the main thread, e.g.:  you could interrupt from those points outside the GIL and avoid having an unresponsive service.Most of the win32 services calls are in between the python c macros:Py_BEGIN_ALLOW_THREADS/Py_END_ALLOW_THREADS
It may be that, being examples, they don't have anything otherwise interesting to do in SvcDoRun. SvcStop will be called from another thread, so using an event is just an easy way to do the cross-thread communication to have SvcDoRun exit at the appropriate time. If there were some service-like functionality that blocks in SvcDoRun, they wouldn't necessarily need the events. Consider the second example in the CherryPy page that you linked to. It starts the web server in blocking mode, so there's no need to wait on an event.


Answer URL
https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock
