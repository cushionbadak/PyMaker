Natural Text
Context managers define setup/cleanup functions  and . Awesome. I want to keep one around as a member variable. When my class object goes out of scope, I want this cleanup performed. This is basically the behavior that I understand happens automatically with C++ constructors/destructors.
I  give classes a  function if it makes sense and then use the  context manager:And then use it like:
Python doesn't do C++-style RAII ("Resource Acquisition Is Initialization", meaning anything you acquire in the constructor, you release in the destructor). In fact, almost no languages besides C++ do C++-style RAII. Python's context managers and  statements are a different way to achieve the same thing that C++ does with RAII, and that most other languages do with  statements,  statements, etc. (Python also has , of course.)What exactly do you mean by "When my class object goes out of scope"?Objects don't go out of scope; references (or variables, or names, whatever you prefer) do. Some time after the last reference goes out of scope (for CPython, this is immediately, unless it's involved in a reference cycle; for other implementations, it's usually not), the object will be garbage-collected.If you want to do some cleanup when your objects are garbage-collected, you use the  method for that. But that's rarely what you actually want. (In fact, some classes have a  method just to warn users that they forgot to clean up, rather than to silently clean up.)A better solution is to make  itself a context manager, so it can manage other context managersâ€”or just manage things explicitly. Then you can write:Here's an example:(Just falling off the end of  like that means that, after calling , we successfully do nothing if there was no exception, or re-raise the same exception if there was one. So, you don't have to write anything explicit to make that happen.)But usually, if you're going to make a class into a context manager, you also want to add an explicit . Just like files do. And once you do that, you really don't need to make  into a context manager; you can just use .


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.closing
