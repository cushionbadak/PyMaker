Natural Text
I have a module which has a function that will generate a sequence 'n' items long. I then have specific sequence names that will generate a specific set of items associated with that name. My issue is that I don't want the module to actually build all the sequences during definition, but only build it once that name is called. My current scheme is like so (the actual  function is much more complicated but the idea remains the same) :Now the user can use the sequence name to retrieve the generator, which then can be evaluated for the actual sequence.The main problem with this approach is that for every new named sequence in the named , I have to create a function specifically for that generator. Some sequences like  are a concatenation of multiple sequence generators, so if I put those in the mapper dictionary, it will evaluate them at definition time, which I do not want. Is there a better approach to this, or is making a function for each named generator and then a mapping dictionary like I have the best way to do this?
You can use lambdas instead of creating lots of named functions that are only used in this one place.
Do you really need those sequences to be actual lists? In many cases, all you really need is a generator which will yield the desired numbers. That's a lot more compact than constructing actual lists, and if you do need an actual list you can just pass the generator to the  constructor.I've modified your  dict so that instead of storing functions it now stores lists of args to pass to the  constructor. My  function uses those args to construct a matching generator, with the help of .output


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
