Natural Text
Edit: My first attempt at asking this might be a bit unfocused/poorly worded here's a better explanation of what I'm trying to do:I'm trying to modify the default behavior of the print function for the entire environment python is running in without having to modify each file that's being run.I'm attempting to decorate the print function (I know there are many ways to do this such as overriding it but that's not really the question I'm asking) so I can have it print out some debugging information and force it to always flush. I did that like so:However what I'm trying to do is modify this behavior throughout my entire application. I know I can manually decorate/override/import the print function in each file however I'm wondering if there is some way I can globally configure my python environment to decorate this function everywhere. The only way I can think to do this would be to edit the python source code and build the modified version.EDIT:Here's the behavior I wanted implemented, thank you Match for your help.It prints out the line number and filename everywhere you call a print function within your python environment. This means you don't have to import or override anything manually in all of your files.https://gist.github.com/MichaelScript/444cbe5b74dce2c01a151d60b714ac3a
You can use  script from the  module to achieve something like this.First, find out where your user site-packages directory is:/home/foo/.local/lib/python3.6/site-packagesNext, in that directory, create a script called  - this script will now be run first whenever python is run.One* way to replace  is to override the  dict and replace it with a new method - something like:Drop this into the  script and you should see all python scripts from then on being overridden. You can temporarily disable calling this script by calling   with the  flag.*(Not sure if this is the correct way of doing this - there may be a better way - but the main point is that you can use  to deliver whatever method you choose).
There's no real reason to define a decorator here, because you are only intending to apply it to a single, predetermined function. Just define your modified  function directly, wrapping it around  to avoid recursion.You can use  to simplify this.


Answer URL
https://docs.python.org/3/library/site.html
