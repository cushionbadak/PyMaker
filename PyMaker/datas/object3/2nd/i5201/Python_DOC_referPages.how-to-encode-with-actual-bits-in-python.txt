Natural Text
I have built a huffman encoder in Python, but because I'm storing the bits (which represent the characters) as strings, the encoded text is larger than the original. How can I use actual bits to compress text properly?
You can convert a  of 1s and 0s to an  type variable like this:And you can convert s back to s of 1s and 0s like this:Also, note that you can write  literals in binary using a leading , like this:Now, before you say "No, I asked for bits, not ints!" think about that for a second. An  variable isn't stored in the computer's hardware as a base-10 representation of the number; it's stored directly as bits.EDIT: Stefan Pochmann points out that this will drop leading zeros. Consider:So how do you keep the leading zeros? There are a few ways. How you go about it will likely depend on whether you want to type cast each character into an  first and then concatenate them, or concatenate the strings of 1s and 0s before type casting the whole thing as an . The latter will probably be much simpler. One way that will work well for the latter is to store the length of the code and then use that with this syntax:where  tells the format function to pad the left of the string with enough zeros to ensure a minimum length of 12.  So you can use it in this way:Finally, if that  and second  is unfamiliar to you, read up on string formatting.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.format
