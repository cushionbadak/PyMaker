Natural Text
Practicing with decorators, found this behavior strange:Why does the first  in the decorator show empty containers? Further, if I defined  as:I know it will fail because of nested function scoping. I'm just not sure why they somehow don't exists before the call to  and suddenly return to scope.
You have two different callables here:the wrapper returned by , .You are confusing the two. The first is called with only the class, becauseis really justThat call is only passed one argument, the class being decorated, which is assigned to the  name. The  and  arguments to that call remain empty.When you then call , you are really calling . That call is passed arguments that are captured by the local  and  objects, and passed to  (which references the original class object). Those arguments are not lost, they clearly are being passed on to the  method and the instance attributes by the same names are correctly set.To distinguish the different catch-all parameters, start with giving them different names and augment your  output:Now the output becomes:Note that the Decorator called with ... output was produced when the  statement was executed, while the  call triggered the build() wrapper called ... output.


Answer URL
https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example
