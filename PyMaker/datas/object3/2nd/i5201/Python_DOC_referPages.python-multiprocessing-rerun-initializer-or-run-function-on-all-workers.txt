Natural Text
With multiprocessing, it is possible to execute the same function on all workers at creation time of the pool with the  and  options in the  factory function.Is it possible to run something, with a guarantee, on all workers?  I would like to do this periodically, but realize it is not a very popular use case and may not be possible without re-implementing Pool based on multiprocessing primitives...
You can simply use a  to ensure the initializer is called once again after a given interval. This is a pretty standard way to re-schedule an action periodically.Each worker of the  will update its state periodically and independently.EDIT:The  design paradigm goal is to abstract the management of tasks and workers de-coupling the main loop from the execution of the jobs. While doing so, it restricts the access to the workers to protect the overall logic.If what you need is to share and update the state among the workers, the only feasible approach is to let the workers poll for state updates. You can either use the above approach or let the worker check the state at any new job.As a  is asynchronous by design, there is no way to synchronously provide information to the workers. 
If what you want to run has nothing to do with the task submitted to pool, you can simply replace  with your own version, which add initializer at first.Note that the statements added in  are ran in current process, not the work process. Overwrite  if you want to run in each work process.


Answer URL
https://docs.python.org/3/library/threading.html#timer-objects
