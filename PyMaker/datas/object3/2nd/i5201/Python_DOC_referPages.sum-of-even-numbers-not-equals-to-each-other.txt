Natural Text
Need help for a task. I should to sum even numbers not equal to each other, for example I have a list of ints like  the output should be , and if a list all numbers are the same it should sum only 2 numbers, for instance  it should print out  but I don't understand how to check the equality of the numbers in a loop:
There are many methods , Here are two methods :First one , using dict , dict key can't be same so just assign the value as keys in dict and it will be unique :And then just boolean condition :How does this condition work?booleans are a subclass of int , so [len(output)==1] produce a integer value but ['false','true'] takes it as index value.output:If same values as you said then you want two number sum in this condition:output:Second one using the set:output:
Don't use a loop to check for duplicates. Instead,  the numbers after putting them into a .If you only want to filter out consecutive equal numbers, you could "collapse" those ranges with :and if a list all numbers are the same it should sum only 2 numbersI still believe this to be a misunderstanding of the task or a mistake in the given example, but if this is really the desired behaviour, you can, again, convert the list to a set and see if the set has only one element, and in this case take the sum times two.The first part of this expression is the same as above, and the second part is a ternary that returns the factor 1 or 2 depending on the size of the set.
I have missed this part of your question:if a list all numbers are the same it should sum only 2 numbers, for  instance [2, 2, 2, 2] it should print out 4To do that you can simply add an if else structure such as:Try to use amazint Python data structures =) In my example I have created a set of numbers so that we can sum up only unique values.Also hidden conversion to bool is used in  In addition you cat use more clear solution. Little bit improved version of your answer:It uses set as more effective data structure then a list when we talk about searching an element. Also it sums elements at the same time with adding them to the set.During the discussion in comments I realized that you may need a code to sum up only non-duplicated numbers, not unique ones. I suggest to use functional Python features:So that here for  we will get 1+3+4 = 8.Also you can achieve it in a more traditional way:
What I would do is :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
