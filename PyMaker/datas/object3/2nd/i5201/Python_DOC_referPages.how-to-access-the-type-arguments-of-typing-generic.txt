Natural Text
The  module provides a base class for generic type hints: The  class.Subclasses of  accept type arguments in square brackets, for example:My question is, how can I access these type arguments?That is, given  as input, how can I get  and  as output?Basically I'm looking for a function such that
Possibility 1As of Python 3.6. there is a public  and () field.For instance:This contains the generic parameters (i.e. ), whilst  contains the generic itself (i.e. ). Possibility 2Use typing_inspect.getargsWhich to use follows PEP8. Both PEP8 and  are coauthored by Guido van Rossum. A double leading and trailing underscore is defined in  as: "“magic” objects or attributes that live in user-controlled namespaces".The dunders are also commented in-line; from the official repository for typing wecan see:* " is a tuple of all arguments used in subscripting, e.g., ".However, the authors also note:* "The typing module has provisional status, so it is not covered by the high standards of backward compatibility (although we try to keep it as much as possible), this is especially true for (yet undocumented) dunder attributes like . If you want to work with typing types in runtime context, then you may be interested in the  project (part of which may end up in typing later)."I general, whatever you do with  will need to be kept up-to-date for the time being. If you need forward compatible changes, I'd recommend writing your own annotation classes.
It seems that this inner method will do the trickwhich returns the tuple:But this a private API, probably there is a better answer.
As far as I know, there is no happy answer here.What comes to mind is the  undocumented attribute which stores this information:but there is no mention of it in the documentation of the  module.It is worth noting that it was very close to be mentioned in the documentation though:Probably we should also discuss whether we need to document all keyword arguments for . There are , , , , and . I think we could say something about first three (they correspond to , , and  and these are used by most things in typing).But it did not quite make it:I added  to  and added docstrings to  and  following the discussion in the issue.  I decided not to describe  and friends in docstrings. Instead, I just added a comment at the place where they are first used.From there, you still have three non-mutually exclusive options:wait for the  module to reach full maturity and hope these features will be documented soonjoin the Python ideas mailing list and see if enough support can be gathered to make these internals public / part of the APIwork in the meantime with the undocumented internals, making a gamble that there won't be changes to these or that the changes will be minor.Note that the third point can hardly be avoided as even the API can be subject to changes:The typing module has been included in the standard library on a provisional basis. New features might be added and API may change even between minor releases if deemed necessary by the core developers.
Use the  on your constructs. So the magic function you need is something like --My question is, how can I access these type arguments?In situations like these -- how do I access ...Use Python's powerful introspection features.Even as a non-pro programmer I know I am trying to inspect stuff and  is a function which is like IDE in terminal. So afterI want to see if there's anything that does the magic you want soI see too much info, to see if I am correct I verifyNow let us find the methods which were designed specifically for generic typesamong these, , ,  and  sound helpful.  and  won't work without self so we are left with  and .Hence the answer.Introspection allows 's  statements to make JUnit derived testing frameworks look obsolete. Even languages like JavaScript / Elm / Clojure don't have a straight-forward thingy like  of Python. Python's naming convention allows you to discover the language without actually reading (grokking in some cases such as these) the documentations.So hunt using introspection and read documentation/mailing-lists to confirm your findings.P.S. To OP -- this method also answers your question What's the correct way to check if an object is a typing.Generic? use discovery if you can't commit to mailing list or are a busy developer - that's the way to do it in python.


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html#typing.Generic
