Natural Text
I'm building a function that takes a list which contains three different types of elements: integers, floats, and strings. The function converts the list to a dictionary with keys for each of these three different categories. Then each element in that original list is placed into the appropriate key-value pair (e.g. all string elements in the list get assigned to the "string" key). I'm able to get this working correctly, however I'm unable to sort the values inside the dictionary values (which are lists). Here's what I have:this returns:so structurally the function gets me what I want, except that the value-lists are sorted. The exact output that I'd like is:Ideally I want to avoid doing an import here (e.g. operator), I'm just looking for a simple/basic way of sorting the value-lists. I tried using  and  but couldn't figure out how to build them in to what I already have.Is there a clean way of doing this or is there a more efficient way?
You could just go over the values and sort them:
Note that you could also use the  of the mixed elements as the dictionary key, so it can be calculated directly from the elements as they are inserted, and so that when retrieving later, you don't need to know a special string (e.g. "wait, did I use 'integer' or 'int' for the key?")...In the last result, note that default string sorting is going to put  at the front. You'd need to write your own string comparator that would evaluate any string as less than the empty string if you need it to be sorted to the final position.
Here is a minimalist solution via  and . With , your list is guaranteed to be always sorted.Note I have also replaced your type-checking with  and added a dictionary mapping types to keys. The purpose of this is to separate logic from configuration / variables.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html?highlight=isinstance#isinstance
