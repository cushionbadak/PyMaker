Natural Text
I'm working with a list that contains three different categories that I'm interested in: integers, floats, and strings. I want to convert that list into a dictionary and make each of these three categories into a key, then assign each element of that list to the appropriate key-value (e.g. if an element in the list is a string, then it will be assigned to the value for the "string" key). So for instance:the structure of the dictionary should be something like this:From the sample list above, the output would look like this:I'm using dict() and zip() to convert the dictionary into a list, but I'm not sure how to build in the conditionals to place each element of the original list into the correct key-value pair. Here's what I have so far:Is this the correct approach or should I be doing something differently? If it is the correct approach, how can I add conditionals to place all of the list elements into the appropriate key value? I tried working with a for loop and .append(), but neither worked. 
You want to group your data based on some predicate. The essential steps are:Identify what group the item belongs toPlace the item into the corresponding "bucket" for that group.There are quite a few ways of achieving this. Some more direct than others. Option 1This is a good use case for . The predicate here is the  of an element.Note, however, that this won't work if your data isn't sorted by type to begin with. This could cause problems, so pre-sort your data first:Now, call , and unpack each group as a list inside a dict comprehension:Option 2Here's an alternative approach using  from the  API. This does not require a pre-sorting step.Option 3Here's a third option using a dictionary with  (similar to the other answer with a ):If we're talking efficiency, however, the  approach in the other answer is slightly more efficient compared to  + .
You can use  from  module:Output:And you can convert  into a regular :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
