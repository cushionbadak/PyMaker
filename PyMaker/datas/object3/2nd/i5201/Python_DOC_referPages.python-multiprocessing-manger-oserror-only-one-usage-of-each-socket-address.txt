Natural Text
I am creating a communication platform in python (3.4.4) and using the multiprocessing.managers.BaseManager class. I have isolated the problem to the code below.The intention is to have a ROVManager(role='server') instance running in one process on the main computer and providing read/write capabilities to the system dictionary for multiple ROVManager(role='client') instances running on the same computer and a ROV (remotely operated vehicle) connected to the same network. This way, multiple clients/processes can do different tasks like reading sensor values, moving motors, printing, logging etc, all using the same dictionary. start_reader() below is one of those clients.CodeErrorThis results in the following output and error:My researchTotal while loops are usually in the range 15000-16000. From my understanding it seems like a socket is created and terminated each time mgr.system().get('shutdown') is called. Windows then runs out of available sockets. I can't seem to find a way to set socket.SO_REUSEADDR.Is there a way of solving this, or isn't Managers made for this kind of communication? Thanks :)
As error suggests   in general , you can/should bind only a single process to a socket ( unless you design your application accordingly, by passing  option while creating socket).   These lines creates two processes on same port  & so the error.You can refer here to learn how to use  & its implications but i am quoting the main part which should get you goingThe second socket calls setsockopt with the optname parameter set to  SO_REUSEADDR and the optval parameter set to a boolean value of TRUE  before calling bind on the same port as the original socket. Once the  second socket has successfully bound, the behavior for all sockets  bound to that port is indeterminate. For example, if all of the  sockets on the same port provide TCP service, any incoming TCP  connection requests over the port cannot be guaranteed to be handled  by the correct socket â€” the behavior is non-deterministic.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager
