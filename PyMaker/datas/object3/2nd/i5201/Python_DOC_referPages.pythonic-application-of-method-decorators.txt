Natural Text
I'm trying to understand how to write a decorator which checks the main_val attribute for every method, especially when the position of the main_val attribute could change, or even have a default. Separately, is there a more pythonic way to apply this condition?I wrote an example below to visually describe the problem, hoping someone with more experience can shed light.For each method below, main_val should be the only attribute my decorator should be checking. I'm not sure how force the decorator to always check main_val, unless it's passed as a key=value attribute or refers to hardcoded the position in *args.Returns error as expectedReturns (calc_two) - another_val: 2 main_val: 5 val_num_two: 3Returns (calc_two) - another_val: 2 val_num_two: 5 main_val: 100What are some ways to approach this problem?
Use  to determine the signature, bind arguments, apply defaults, and figure out the final value of :This does more work than you need, because it determines bindings for all the other arguments too, but it's a lot more convenient than performing the introspection manually.


Answer URL
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
