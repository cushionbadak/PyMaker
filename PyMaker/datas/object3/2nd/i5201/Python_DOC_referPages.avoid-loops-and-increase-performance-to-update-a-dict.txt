Natural Text
I have a dict of the form:dict1[element1] : reference1dict1[element2] : reference2dict1[element3] : reference2There a some elements have the same reference (like  and  have).I need to convert this into a dict with the following form:dict2[reference1] : [element1]dict2[reference2] : [element2,element3]To get this I wrote:This works fine until  is not very large, but if  is large (some 1000 keys) it takes hours to get the result.Is there a faster way to do it?
This:is probably the main culprit. It turns a O(1) lookup () into a O(n) one. This plus the overhead of the one-function-call per key is certainly suboptimal indeed.A much simpler solution is to use a :
Use a  instead of a vanilla dict to avoid those membership checks and you can remove the function calls which adds a non trivial overhead with repeated calls:
You can use a  or just :A function seems unnecessary for such a simple call.
Instead of defaultdicts that were already mentioned, you could also create the dict with the setdefault method, like so:There is no need for the if statement you made. In my benchmark, this is around 2 times faster than your method. The method of Moses Koledoye beats those (on my machine) for some reason, which is in turn beaten by bruno desthuilliers' method. For the dictionaryI get (transform_0 being your method with together with the for loop, transform_d Moses' and transform_d2 being Bruno's methods) as average over 200 calls:benchmark for "transform_0": 133.516 msbenchmark for "transform": 50.696 msbenchmark for "transform_d": 43.967 msbenchmark for "transform_d2": 38.408 ms 


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
