Natural Text
I have an audio file, . The title and length can be read with  to result in the output being sent to STDERR.I want to run  through subprocess, and have done so successfully. I then retrieve the output (piped to ) with  as indicated that I should by the Python docs. returns a tuple, , with the output from the  object. The proper index for  is then accessed and decoded from a byte string into a Python 3 UTF-8 string.This decoded output is then parsed with a multiline regex pattern matching the format of the  metadata output. The match groups are then placed appropriately into a dictionary, with each first group converted to lowercase, and used as the key for the second group (value).Here is an example of the output and the working regex.The data can be accessed through the dictionary keys as expected. But upon concatenating the values together (all are strings), the output appears mangled.This is the output I would expect:Instead, this is what I get:I don't understand why the strings appear to "overlap" each other and result in a mangled form. Can anyone explain this and what I have done wrong?Below is the complete code that was run to produce the results above. It is a reduced section of my full project.Can anyone explain this unpredictable output?I have asked this question here earlier, however I dont think it was very clear. In the raw output when this is run on multiple files, you can see that towards the end the strings start becoming as unpredictable as not even printing part of the  value at all.Thanks.
Reproduce:Output:Issue:End-Of-Line is . re  matches .  remains in the matching group.Fix:Insert  before  in your re pattern. i.e. Or use  as a Popen argument and remove as the output will be text with  instead of .Or  before re processing. Alternative:ffprobe can output a json string. Use  module which loads the stringand returns a dictionary.i.e. commandThe json string will be the stdout stream.
You are catching up the "\r" symbol. At printing, cursor is returned to the beginning of the string, so the next print and overwrites the first part. Stripping whitespaces (will also remove trailing "\r") should solve the problem:


Answer URL
https://docs.python.org/3/library/json.html
https://docs.python.org/3/library/json.html#json.loads
