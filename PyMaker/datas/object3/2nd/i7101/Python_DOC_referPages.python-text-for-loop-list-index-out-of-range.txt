Natural Text
Given the following listI'd like to create a new list , which consists of elements for which the current and next value of  are summed. It will contain 1 less element than .Like this:(from 0+1, 1+2, and 2+3)Here's what I've tried:The trouble is I keep getting this error:I'm pretty sure it occurs because by the time I get the the last element of a (3), I can't add it to anything because doing so goes outside of the value of it (there is no value after 3 to add). So I need to tell the code to stop at 2 while still referring to 3 for the calculation.
In your  loop, you're iterating through the elements of a list . But in the body of the loop, you're using those items to index that list, when you actually want indexes.Imagine if the list  would contain 5 items, a number 100 would be among them and the for loop would reach it. You will essentially attempt to retrieve the 100th element of the list , which obviously is not there. This will give you an .  We can fix this issue by iterating over a range of indexes instead:and access the 's items like that: . This won't give any errors.In the loop's body, you're indexing not only , but also . This is also a place for a potential error. If your list contains 5 items and you're iterating over it like I've shown in the point 1, you'll get an . Why? Because  is essentially , so when the loop reaches 4, you will attempt to get the  item. Since indexing in Python starts with 0 and your list contains 5 items, the last item would have an index 4, so getting the  would mean getting the sixth element which does not exist.To fix that, you should subtract 1 from  in order to get a range sequence . Since you're using an index , you'll still get the last element, but this way you will avoid the error.There are many different ways to accomplish what you're trying to do here. Some of them are quite elegant and more "pythonic", like list comprehensions:This does the job in only one line.
When you call , you are getting the actual elements, not the indexes.  When we reach the last element, that is ,  looks for , doesn't find one and then fails.  Instead, try iterating over the indexes while stopping just short of the last one, like Your current code won't work yet for the do something part though ;)
You are accessing the list elements and then using them to attempt to index your list. This is not a good idea. You already have an answer showing how you could use indexing to get your sum list, but another option would be to  the list with a slice of itself such that you can sum the pairs. 
Try reducing the range of the for loop to :This can also be written as a list comprehension:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
