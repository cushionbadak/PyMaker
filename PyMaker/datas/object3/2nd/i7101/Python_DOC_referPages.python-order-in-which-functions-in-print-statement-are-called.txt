Natural Text
Let's say I haveI would expect the output to be:But instead I get something which surprised me:Why does Python call the functions first before printing the "Hello"? It seems like it would make more sense to print "Hello", then call , have it print its output, and then print "None" as it's return type. Then call  and print that output, and print "None" as it's return type. Is there a reason Python (or maybe other languages) call the functions in this way instead of executing each argument in the order they appear?Edit: Now, my followup question is what's happening internally with Python somehow temporarily storing return values of each argument if it's evaluating the expressions left to right? For example, now I understand it will evaluate each expression left to right, but the final line says , so is Python somehow remembering from the execution of each function that the second argument and third arguments have a return value of ? For example, when evaluating , it will print  and then hit no return statement, so is it storing in memory that  didn't return a value?
Quoting from the documentation:Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.Bold emphasis mine. So, all expressions are first evaluated and then passed to .Observe the byte code for the print call: () and  () are first called, followed by  ( - 3 positional args).As to the question of where these intermediate computed values are stored, that would be the call stack.  accesses the return values simply by poping them off of the stack. - Christian Dean
As is specified in the documentation:Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.This thus means that if you write:It is equivalent to:So the arguments are evaluated before the function call.This also happens when we for instance have a tree:This prints as:Since Python thus evaluates arguments left-to-right. It will first evaluate , but in order to evaluate , it first needs to evaluate , followed by . Then it can all  with the results of the previous calls.Then it wants to evaluate the second argument . But in order to do this, it thus first evaluates  and . Next it can evaluate , and then finally it can evaluate the final expression: .So the evaluation is equivalent to:
The enclosing function is not called until all of its arguments have been evaluated. This is consistent with the basic rules of mathematics that state that operations within parentheses are performed before those outside. As such  will always happen after both  and .
The answer is simple:In python the arguments of a function like  are always first evaluated left to right. Take a look at this stackoverflow question: In which order is an if statement evaluated in Python And  is just the return value of the function. It executes the function first and then print its return value


Answer URL
https://docs.python.org/3/reference/expressions.html#evaluation-order
