Natural Text
I'm fairly new in 'recursive functions'. So, I'm trying to wrap my head around why we use recursive functions and how recursive functions work and I think I've a fairly good understanding about it.Two days ago, I was trying to solve the shortest path problem. I've a following graph(it's in python): I'm just trying to find a path, not the shortest path.So, here is the code:My starting vertex is 'a' and the ending vertex is 'd'.In the fourth line I just printed the 'path' to see where the path goes.On line 17th I also printed the 'path', again just to test. And here is the result: The first four lines of the result is the result of 'print(path)' on line 4 of the code. But, line 5th, 6th and 7th is the result of 'print(path)' on line 17th of the code.My question is why the list of the path is decreasing by one vertex each time?I've been trying to find it's solution for 2 days. I've went to forums, read the documentation about recursion and watched videos. But, no luck.I would be greatful if somebody can answer.
First I am just going to give an explanation of what backtracking means. I also posted this answer here. Recursion means to call the function from within that same function. Now what happens is that when the function encounters a call to itself.. imagine that a new page opens up and control is transferred from the old page onto this new page to the start of the function, when the function encounters the call again in this new page, another page opens up beside it and in this way new pages keep popping up beside the old page. Do note that all the local variables are only in scope with their respective pages. That is if you want to access the value in the previous page you either pass it to the function in parameters or make the variable global.The only way to go back is using return statement. When the function encounters it the control goes from the new page back to the old page on the same line from where it was called and starts executing whatever is below that line. This is where backtracking starts. In order to avoid issues like feeding data again when its filled up you usually need to put a return statement after every call to the function.Now in your code, And note that your  variable is not a global variable. It's a local. This means everytime you call its resetted. To avoid this you are passing the path value again in the function parameters (in the last). So finally when the function returns after it has found  it returns to the previous state where the path variable has only  in it. that's what you print out.Edit:- Just in case anybody objects, my explanation of recursion using pages is purely non-technichal, if you want to know how it really happens then you'll have to read about activation record and how it pushes all the state onto a stack
This is because recursion yields results from "innermost" to "outermost" calls. That is the first line 17  statement occurs from the deepest recursion level where the path has the most nodes. After that level returned the next level "upwards" is printed (one node less in the path). Note that your  function comes after the recursive call to .You can visualize it as follows:If you want the single (sub-)paths to be printed in "increasing" order then you can simply place the  function before the recursive call to .It's the  variable which holds the recursively found path while  just holds the path to the current node.By the way the  clause might fail if the previous  branch has not been entered yet because then  is undefined.
1) The  method is first called with  as the start node which sets the path as  and calls the  method with  as the start node before printing path on line 17.2) The call to  method with  as the start node sets the path as  and calls the  method with  as the start node before printing path on line 17.3) The call to  method with  as the start node sets the path as  and calls the  method with  as the start node before printing path on line 17.4) The call to  method with  as the start node sets the path as  prints it on line 4 and returns.5) Now it returns on line 14 in the execution of method  with  as the start node (which had set the path as  as mentioned in point 3)  and prints path on line 17 (which is line 5th of your result) and returns.6) This returns on line 14 in the execution of method  with  as the start node (which had set the path as  as mentioned in point 2) and prints path on line 17 (which is line 6th of your result) and returns.7) This returns on line 14 in the execution of method  with  as the start node (which had set the path as  as mentioned in point 1) and prints path on line 17 (which is line 6th of your result) and returns.You can imagine it as LIFO (Last In First Out)


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-380
