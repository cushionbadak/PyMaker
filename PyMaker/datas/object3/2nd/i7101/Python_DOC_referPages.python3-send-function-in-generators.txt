Natural Text
According to docs, the send() function: "Resumes the execution and “sends” a value into the generator function. The value argument becomes the result of the current yield expression. The send() method returns the next value yielded by the generator, or raises StopIteration if the generator exits without yielding another value. When send() is called to start the generator, it must be called with None as the argument, because there is no yield expression that could receive the value."But i can't understand, why "The value argument becomes the result of the current yield expression" is not happened in the following example:So why x variable stays 'None' dispite i send 100 to it by c.send(100)? It seems, that yield expression in right hand side works in two steps: first it return the value to generator's caller and the second it returns argument of send function inside generator. And if add extra next(c) before send(42) i'll get expected behavior and programm prints '100'. It's not clear for me from documentation, why these two steps should not happen simultaneously when i call send().
I think I've figured it out.You create a genertor in the  variable, there none of the generator's code is executed.Then you use the  function, the  function go to the next  statement who is  here.So this  returns  and stops the generator's execution to try to catch a value.The next line is, so the  was waiting for a value and you provided it, but this value isn't saved.The  method also execute the rest of the generator until the next  statement who is:So the yield here return 42 and stops the generator program to try to catch a value. But after that you callAnd you didn't provided a value so  is None now. Then the rest of the code is executed (until the next  statement, don't forget)So it prints  who is None and then the  returns 2 and try to catch a value.Try to write thisAnd it will work (understand why !)
So why x variable stays 'None' dispite i send 100 to it by  c.send(100)?Because the current  is not the one you think it is, it's the one before. When you send 100, the generator is still stopped at , not yet at , hence 100 will be the result of , not of .To see this clearer, if you modify the generator in order to retrieve the content of  in a  variable, you'll see that  does contain 100:And that's the reason why an extra  will print . Back to your code:


Answer URL
https://docs.python.org/3/reference/expressions.html#generator.send
