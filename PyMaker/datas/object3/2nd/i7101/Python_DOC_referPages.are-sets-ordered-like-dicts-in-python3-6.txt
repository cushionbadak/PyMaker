Natural Text
Due to changes in  implementation in Python 3.6 it is now ordered by default. Do s preserve order as well now?I could not find any information about it but as both of those data structures are very similar in the way they work under the hood I thought it might be the case.I know there is no promise for s to be ordered in all cases but they are most of the time. As stated in Python docs:The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon
No, s are still unordered.You can verify this just by displaying a  that should have a "well-defined hash order"1 to make sure we don't accidentally get a  that looks ordered but actually isn't:If it were ordered you would expect  and  as result of the examples.While s are actually ordered (same example just a bit modified):1 "well-defined hash order":For integers that satisfy  the  is just the number itself. That means if the set is ordered "based" on the hash (and not ordered based on the insertion "time") and the hash values don't collide (that's why I used small numbers and numbers that only differ by one) the order should be deterministic because they occupy slots inside the set that are next to each other: Either from smallest to highestor a from a specific value to the highest and then from the smallest to the specific value. This case happens if the next (in the sense of neighboring) free slot in the set is the first one.As an example for the latter:
s are not ordered in Python 3.6, not even as a CPython implementation detail. A simple example illustrates this:The Python 3 docs are clear on this:A set is an unordered collection with no duplicate elements.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
