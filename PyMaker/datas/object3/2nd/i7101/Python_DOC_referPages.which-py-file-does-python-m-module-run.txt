Natural Text
What is the  file for, what sort of code should I put into it, and when should I have one?
Often, a Python program is run by naming a .py file on the command line:You can also create a directory or zipfile full of code, and include a .  Then you can simply name the directory or zipfile on the command line, and it executes the  automatically:You'll have to decide for yourself whether your application could benefit from being executed like this.Note that a  module usually doesn't come from a  file. It can, but it usually doesn't. When you run a script like , the script will run as the  module instead of the  module. This also happens for modules run as , or in several other ways.If you saw the name  in an error message, that doesn't necessarily mean you should be looking for a  file.
What is the  file for?When creating a Python module, it is common to make the module execute some functionality (usually contained in a  function) when run as the entry point of the program. This is typically done with the following common idiom placed at the bottom of most Python files:You can get the same semantics for a Python package with . This is a linux shell prompt, , if you don't have Bash (or another Posix shell) on Windows just create these files at  with contents in between the s:(In a Posix/Bash shell, you can do the above without the s and ending s by entering Ctrl+D, the end-of-file character, at the end of each cat command)And now:You can derive this from the documention. The documentation says: — Top-level script environment is the name of the scope in which top-level code executes.  A module’s  is set equal to  when read from standard  input, a script, or from an interactive prompt.A module can discover whether or not it is running in the main scope  by checking its own , which allows a common idiom for  conditionally executing code in a module when it is run as a script or  with  but not when it is imported:For a package, the same effect can be achieved by including a   module, the contents of which will be executed when the module is run with .ZippedYou can also package this into a single file and run it from the command line like this - but note that zipped packages can't execute sub-packages or submodules as the entry point:
 is used for python programs in zip files. The  file will be executed when the zip file in run. For example, if the zip file was as such:and the contents of  was Then if we were to run  we would get  out.So the  file run when python is called on a zip file.
You create  in  to make it executable as:
If your script is a directory or ZIP file rather than a single python file,  will be executed when the "script" is passed as an argument to the python interpreter.


Answer URL
https://docs.python.org/3/library/__main__.html
