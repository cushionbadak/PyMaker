Natural Text
So I am working on this existing code base which has about 150 or so functions as time seriesI wanted to store them in a class in order to prevent namespace pollution. This is what existsEach one of these functions is a unique name without any pattern. I tired to put them in a classMy hope was that this would lead to me simply being able to import the time series and use it likeBut this approach throws the following errorTypeError: unbound method f() must be called with TimeSeries instance as first argument (got date instead)please advise on how I should proceed with a huge collection of functions. I am new to programming and I want to do this correctly.
You're probably better off creating a submodule rather than a class with multiple functions. However, if you really want to do it the way you described, you need to use static methods instead of methods:Alternately, because you already have ,The  function takes a function and returns a static method-y version of it. Thus, it can also be used as a function decorator.You can (should?) programatically generate your time series functions if your inputs to  can be generated algorithmically. You can use  or update  to add your functions to a submodule (or object in this module, but that's less elegant, IMHO).
I think what you really should do is separate your functions out into separate modules if you are trying to prevent name-space pollution. However, you could just use a :And now you've conveniently organized your name-spaces:Although, they will still be under the module's namespace if you do a simple . Even though  is essentially a class, equivalent to the following:


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
