Natural Text
Okay, I do understand that this topic is old as hell, but I couldn't find an answer to the particular question that I am asking.Let's say that we have a very simple structure: two files,  and , their contents being:Trying to run , we get:BUT if we move the  line AFTER the  class, the script launches and produces no errors.I have not found any mention of this whatsoever in any answers here on SO.  The question here is: Why does this happen and how to escape this?This is a particularly important question for the Django framework. When I have many models, I try splitting them into many files. It is very easy to get a cyclic import there.
In python when you import a module then it first import all module that defines at the top of the module, If a module is not in sys.modules, then an import creates the new module entry in sys.modules and then executes the code in the module. so when you try to import b.py module in a.py then it first import all module that listed in b.py is a.py (import a) if module not listed in sys.modules .  and still module b.py not completely executed so b.py module is not added into sys.modulesafter that, it tries to import a.py and in a.py it tries first import all module that import in a.py is b.py so it's a basic cycle  a.py try to import b.py and b.py try to import a.py   For that problem, Solution is import one module or class  inside the class, Not at the top of the module as per your examplea.pyb.pyor a.pyb.pyfor detailed information discussionPython issue
Actually @Kallz already provided the right answer, but you are being bit stubborn :) You are creating circual reference which would end in infinite loop. Python has a mechanizm to avoid such loop by going line by line. 1st you open b.py - it gets loaded into the sys.modules as '__main__' and starts to be loaded. While loading it comes to 'import a'. So it looks for module 'a'. It finds it and puts it into the sys.modules. sys.modules now has '__main__' and 'a'. It starts to load module 'a' where it encounters 'import b'. So it finds 'b.py' and puts it into sys.modules. Now you have '__main__', 'a', 'b' and it starts to load 'b' where it encounters 'import a' - this time module 'a' is already in sys.modules and loading of it has already started! So Python knows something fishy is going on and you get yourself an ImportError.


Answer URL
https://docs.python.org/3/reference/import.html
