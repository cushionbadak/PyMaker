Natural Text
Given a list of multiple iterables, I want to test if all items are disjoint.  two sets are said to be disjoint if they have no element in commonExample:Python sets have an  method which works, but it is designed for testing two elements at a time.  One approach is to apply this method to each pairwise group of elements:Here I modified the  itertools recipe to attach the first element one last time.  This is not quite right however as it only tests neighboring items rather than each item against all other items in the list.  I would like to test all elements more elegantly, with less code.  Is there a simpler way to do this?
IIUC, you can take your list of strings, combine them, and then check if the combined length is equal to the length of the set equivalent of that string or not.You can use  to join your strings and define your function:Now, test:
First of all,  would result in in the set .Second, by enumerating over  and then using  one only looks at the upper diagonal and avoids the need to compare values against itself or the other pair.  For example, if , then [(s1, s2) for n, s1 in enumerate(s) for s2 in s[n+1:]] would result in: .  This is equivalent to the result from  if one were to import  from .Given the above, I use the  generator to compare the lack of any intersection between each subset.Because of the  construct, it will short circuit upon the first observation of a common element, avoiding the need to calculate each pair.  
Given what you said about wanting to test that each item is disjoint with all other items, I think this does what you want:
I add these answers for others who are interested.Approach 1: I realize this can be done with a multiset ().Approach 2: From the  library,  yields all unique items from every iterable.  The following code compares the lengths of the results to the original iterables:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
