Natural Text
I am using a modified form of the  recipe provided by the python docs:This seems to work fine. I can do something like:However, when I run the exact same code in IPython, I get a :Where is the warning coming from and why do I not see it in the regular Python console? What can I do to make the warning go away?I am using Python 3.6.2 and IPython 6.1.0
This is a change to Python that is being gradually phased in between Python 3.5 and Python 3.7. The details are explained in PEP 479, but I'll try to give a quick overview.The issue is  exceptions that are leaking out of generator functions. It might seem like that's OK, since raising a  is the signal an iterator is finished. But it can cause problems with refactoring generators. Here's an example showing the trouble:Say you had this generator function (which works fine in Python versions prior to 3.5, where it started emitting warnings):Since the condition of the  is truthy, the generator will stop after yielding two values (not yielding  or ). However, what if you try to refactor the middle part of the function? If you move the part from  to  into a helper generator, you'll see an issue:In this version,  will be skipped, but  will still be yielded. That's because the  ate the  that was raised in the helper generator function. It assumed that only the helper generator should be stopped, and so the outer generator kept running.To fix this, the Python devs decided to change how generators work. Starting in Python 3.7, a  exception that leaks out of a generator function will be changed by the interpreter to a  exception. If you want to exit a generator normally, you need to use . Furthermore, you can now  a value from a generator function. The value will be contained in the  exception that gets raised by the generator machinery, and a  expression will evaluate to the returned value.So the generators above could properly be refactored to:If you want to write future-compatible code now, you should put  at the top of your module. Then you need to track down places where you're leaking  exceptions and wrap them with  and  logic. For the code in your question:
The deprecation warning is thrown because of an upcoming non-backwards compatible change in the Python language which will be active from version 3.7 on and is documented in PEP-479.The most important parts:AbstractThis PEP proposes a change to generators: when  is raised  inside a generator, it is replaced it with  . (More  precisely, this happens when the exception is about to bubble out of  the generator's stack frame.) Because the change is backwards  incompatible, the feature is initially introduced using a   statement.andTransition planPython 3.5: Enable new semantics under   import; silent deprecation warning if  bubbles out of a  generator not under  import.  Python 3.6: Non-silent deprecation warning.  Python 3.7: Enable new semantics everywhere.The documentation you have linked should be updated.
Deprecation warning is thrown when a module will be deprecated in future.For now,you re fine to use it. Just include the following to your code to not see these warnings:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
