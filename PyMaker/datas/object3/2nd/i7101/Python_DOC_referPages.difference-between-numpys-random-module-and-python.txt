Natural Text
I have a big script in Python. I inspired myself in other people's code so I ended up using the  module for some things (for example for creating an array of random numbers taken from a binomial distribution) and in other places I use the module .Can someone please tell me the major differences between the two?Looking at the doc webpage for each of the two it seems to me that  just has more methods, but I am unclear about how the generation of the random numbers is different.The reason why I am asking is because I need to seed my main program for debugging purposes. But it doesn't work unless I use the same random number generator in all the modules that I am importing, is this correct?Also, I read here, in another post, a discussion about NOT using , but I didn't really understand why this was such a bad idea. I would really appreciate if someone explain me why this is the case.
You have made many correct observations already!Unless you'd like to seed both of the random generators, it's probably simpler in the long run to choose one generator or the other. For , the main difficulty is that it is not thread-safe - that is, it's not safe to use if you have many different threads of execution, because it's not guaranteed to work if two different threads are executing the function at the same time. If you're not using threads, and if you can reasonably expect that you won't need to rewrite your program this way in the future,  should be fine.  If there's any reason to suspect that you may need threads in the future, it's much safer in the long run to do as suggested, and to make a local instance of the  class. As far as I can tell,  is thread-safe (or at least, I haven't found any evidence to the contrary).The  library contains a few extra probability distributions commonly used in scientific research, as well as a couple of convenience functions for generating arrays of random data. The  library is a little more lightweight, and should be fine if you're not doing scientific research or other kinds of work in statistics.Otherwise, they both use the Mersenne twister sequence to generate their random numbers, and they're both completely deterministic - that is, if you know a few key bits of information, it's possible to predict with absolute certainty what number will come next. For this reason, neither numpy.random nor random.random is suitable for any serious cryptographic uses. But because the sequence is so very very long, both are fine for generating random numbers in cases where you aren't worried about people trying to reverse-engineer your data. This is also the reason for the necessity to seed the random value - if you start in the same place each time, you'll always get the same sequence of random numbers!As a side note, if you do need cryptographic level randomness, you should use the secrets module, or something like Crypto.Random if you're using a Python version earlier than Python 3.6.
From Python for Data Analysis, the module  supplements the Python  with functions for efficiently generating whole arrays of sample values from many kinds of probability distributions.By contrast, Python's built-in  module only samples one value at a time, while  can generate very large sample faster. Using IPython magic function  one can see which module performs faster:
The source of the seed and the distribution profile used are going to affect the outputs - if you are looking for cryptgraphic randomness, seeding from os.urandom() will get nearly real random bytes from device chatter (ie ethernet or disk) (ie /dev/random on BSD)this will avoid you giving a seed and so generating determinisitic random numbers.  However the random calls then allow you to fit the numbers to a distribution (what I call scientific random ness - eventually all you want is a bell curve distribution of random numbers, numpy is best at delviering this.SO yes, stick with one generator, but decide what random you want - random, but defitniely from a distrubtuion curve, or as random as you can get without a quantum device.


Answer URL
https://docs.python.org/3/library/secrets.html
