Natural Text
I have a sorted list of numbers like:I need to find the max index of each values which is divisible by 100.Output should be like: My Code:Output of above code: 
In case people are curious, I benchmarked the dict comprehension technique against the backward iteration technique. Dict comprehension is about twice the speed. Changing to  resulted in MASSIVE slowdown. About 15x slower than the dict comprehension.
Use a simple dict-comprehension or  with divisible items as the keys, old values will be replaced by newest values automatically.Another way will be to loop over reversed list and use a  to keep track of items seen so far( may be slightly faster than  for tiny lists).You can see the sort-of equivalent code of the above here.
You could use  since your data is sorted:Although this is a little cryptic.Here's a complicated approach using only a list-iterator and accumulating into a list:I think this is best dealt with a dictionary approach like @AshwiniChaudhary It is more straightforward, and much faster:The  approach is pretty slow, note, the complicated approach is faster, and not far-off form the dict-comprehension approach:Edit Note, the performance difference narrows if we call  on the dict-comprehension :
it seemed like a good idea at the start, got a bit twisty, had to patch a couple of cases...   enumerate, zip to create  which mates 100's numerator(s) with indices   then zip again,  lagging the numerator tuple to allow the lagged difference to give a selection logic for the last index of each run but the lastadd the last 100's match because its always the end of the last run 


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
