Natural Text
Lets say, there is a nested list, like:When the function  is called on this:The output received is Why and How does it work? What are some use cases of it?
How are lists and other sequences compared in Python?Lists (and other sequences) in Python are compared lexicographically and not based on any other parameter.Sequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted.What is lexicographic sorting?From the Wikipedia page on lexicographic sorting lexicographic or lexicographical order (also known as lexical order, dictionary order, alphabetical order or lexicographic(al) product) is a generalization of the way the alphabetical order of words is based on the alphabetical order of their component letters.The  function returns the smallest value in the iterable. So the lexicographic value of  is the least in that list. You can check by using What is happening in this case of ?Going element wise on , firstly  and . Now from the docs If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively.Thus the value of  is less than , because the second element of , which is,  is lexicographically higher than the value of the second element of , which is, . Now comparing  and , and adding another reference from the docsIf one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one. is an initial sub-sequence of . Therefore the value of  on the whole is smaller than that of . Hence  is returned as the output. This can be validated by using the  functionWhat if the list has multiple minimum elements?If the list contains duplicate min elements the first is returnedThis can be confirmed using the  function callWhat do I need to do to prevent lexicographic comparison in ?If the required comparison is not lexicographic then the  argument can be used (as mentioned by Padraic)The  function has an additional optional argument called . The  argument takes a function.The optional key argument specifies a one-argument ordering function  like that used for . The key argument, if supplied, must be  in keyword form (for example, ).For example, if we need the smallest element by length, we need to use the  function. As we can see the first shortest element is returned here. What if the list is heterogeneous?Until Python2If the list is heterogeneous type names are considered for ordering, check Comparisions, Objects of different types except numbers are ordered by their type namesHence if you put an  and a  there you will get the integer value as the smallest as  is of lower value than . Similarly  would be of higher value than both of this. Python3 and onwardsHowever this confusing technique was removed in Python3. It now raises a . Read What's new in Python 3.0 The ordering comparison operators (, , , ) raise a  exception when the operands don’t have a meaningful natural ordering. Thus, expressions like ,  or  are no longer valid, and e.g.  raises  instead of returning . A corollary is that sorting a heterogeneous list no longer makes sense – all the elements must be comparable to each other.But it works for Comparable types, For exampleHere we can see that the  contains  values and  values. But as  and  are comparable types,  function works in this case. 
One simple use case for lexicographical sorting is with making a sortable  class.
Two lists are compared element wiseEven if sizes of two lists are different the two lists are compared element wise starting the comparison from the first element. Now suppose that every element of a list has been checked and they are the same and there is no next element in the shorter list. Then the shorter list is declared to be smaller than the longer one.Examples:
it compares the lists elementwise:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
