Natural Text
I have a function with one optional argument, like this:I want to write a new function that calls  and also has an optional argument, but if no argument is passed, I want to keep the default in .I was thinking something like this:Is there a more pythonic way of doing this?
I would replace  with , so that if you pass  (or any other "falsy" value) as argument to  it will be passed to .Apart from that it seems pretty pythonic to me: clear and explicit. (albeit maybe a bit useless, depending on what you're trying to do!)A little more cryptic way that relies on calling  with the correct keyword arguments (e.g. :
Make the default value of  in  and then pass it always to 
The way you did it is fine. Another way is for  to have the same defaults as , so you can pass the same parameters right through. E.g., if you do , then you can always call  just like that.For simple cases, the above will work fine. For more complex cases, you may want to use  and  (explained here and here). Specifically, you can pass in all your keyword arguments as a dictionary (conventionally called ). In this case, each function would set its own independent defaults, and you would just pass the whole dictionary through:If  is empty when passed to  ( is not specified), it will be set to the default in  by the statement . If  is specified, it will be passed through as-is. Note that in , you can access  with its own, independent default value and still get the behavior you are looking for.While this may seem like overkill for your example, extracting a couple of arguments at the beginning of a function is not a big deal if the function is complex enough. It also gives you a lot more flexibility (such as avoiding many of the common gotchas).
Using  from , you can just take a function and create a new one specifying the defaults at runtime. You can put all this in a decorator so that at the point of where you write your code it will keep things tidy, whilst still giving the reader a clue about what you are trying to accomplish. It also allows the exact same call signature for  as  -- all arguments can be positional, or all arguments can be keywords, or any valid mix thereof, and any arguments with default values are optional. Should play nice with positional arguments () and keyword arguments () too.
Using , you can get the default values (fourth item of the returned tuple = ):OR (in Python 2.7+)In Python 3.5+, it's recommend to use  instead:
You can also use: Version which will not fail if x or a are None:


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.signature
