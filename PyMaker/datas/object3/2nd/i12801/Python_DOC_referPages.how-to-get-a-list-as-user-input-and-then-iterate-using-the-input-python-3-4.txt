Natural Text
So I was trying some things out and then I found a problem with my code.I am trying to get the user to select a list and then iterate something for the number of items in that list.I have simplified it here but you can still see the problem.This outputs the following:You can see this code does not iterate the number of times I want it to. I was wondering if anyone could explain why this is or help me find a solution?
When you get user input into a, it is a string. When you are iterating through it in your example; you are iterating through the actual string 'list1'. If you wanted to go through the items in the list you need to link them somehow. Try this:Note:That lists[a] references that list; you can do what you want with it now; like use range/len....
In case you are using Python3 (you must be, otherwise the code works fine), is a string, not the variable itself.You can verify it doingwhich gives youSo you can try this instead:which producesFrom the official docs:vars([object])Return the dict attribute for a module, class, instance, or any other object with a dict attribute.  Objects such as modules and instances have an updateable dict attribute; however, other objects may have write restrictions on their  dict attributes (for example, classes use a dictproxy to prevent direct dictionary updates).  Without an argument, vars() acts like locals(). Note, the locals dictionary is only useful for reads since updates to the locals  dictionary are ignored.As an alternative, you can use but it's not recommended (see the official docs) sinceThis function can also be used to execute arbitrary codeNote: there are several ways to solve this problem. For example, as pointed out below, you could decide which list to use by checking the input with an  and hard-code the list in either branch taken. The problem with this option is that it does not fit a higher/variable/dynamic number of lists.Another approach could be to store the lists in a dictionary and look them up using the input key, as suggested in another answer. This one and mine have the benefit of being able to handle any number of lists, not just a few and even lists created dynamically in the namespace.


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/functions.html#eval
