Natural Text
Can not able to understand, if None is not equals to zero,then how the below if condition is passing?
There are many things in python which are considered 'falsy' when used in  a boolean context (like an if statement or with boolean operators like , , , etc).Specifically None, False, any numerical data type which compares equal to , or any type which implements  and for which .For more information consider:For more information see the docs
Let's ask the python shell...So that might give you a hint why  is returning False. For further hint..Armed with this information we could dig into python's truth system...The following values are considered false:NoneFalsezero of any numeric type, for example, 0, 0L, 0.0, 0j.So yes, Both  and  is considered false for / conditionals, but that doesn't mean all things evaluates to "False"  are themselves equal. As some of them have different types, they are not equivalent.So the bottom line is :[1] Not everything evaluates to  in a / statement are themselves equal.[2] The reason for this is Python's Type system
Comparisons in Python are typesafe*, which means even though 2 variables are both truthy (or not truthy) does not imply that their direct comparison returns true.*except that  and  are guaranteed and the  operator is overloadable.
See Truth Value Testing chapter in Python's docs.Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:NoneFalsezero of any numeric type, for example, 0, 0L, 0.0, 0j.any empty sequence, for example, '', (), [].any empty mapping, for example, {}.instances of user-defined classes, if the class defines a nonzero() or len() method, when that method returns the integer zero or bool value False. 1All other values are considered true â€” so objects of many types are always true.Operations and built-in functions that have a Boolean result always return 0 or False for false and 1 or True for true, unless otherwise stated. (Important exception: the Boolean operations or and and always return one of their operands.)


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
