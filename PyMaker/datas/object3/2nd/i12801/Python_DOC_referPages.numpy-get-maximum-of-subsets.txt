Natural Text
I have an array of values, said , (e.g. ) and an array of indexes, say  (e.g.            ).I know, for instance, how to take the first element of each group, in a very numpythonic way, doing:returns:Is there any thonic way (avoiding explicit loops) to get the maximum of each subset?Tests:Since I received two good answers, one with the python  and one with a  routine, and I was searching the most performing, here some timing tests:As a result I get:Interestingly, most of the slowdown of the  method is due to the  call. If I do not try to reconvert my  result to a  ( but I have to, because  returns an iterator:  https://docs.python.org/3/library/functions.html#map )
You can use :More about the workings of the ufunc  method can be found here.Remark about performance is very fast. Generating the indices  is what takes most of the time here.While  is an elegant way to get the indices, it is not particularly quick.The reason is that  needs to sort the array first, which is O(n log n) in complexity. For large arrays, this is much more expensive than using several O(n) operations to generate . Therefore, for large arrays it is much faster to use the following instead:
Here's one convoluted vectorized approach using  and   that puts each group into rows of a regular 2D array and then finds maximum along each row -Sample run -
You can create your mask like following and use  function :If you don't want to get a generator with  you can use a list comprehension to achieve same result in list, and note that the iteration of list comprehension has performed at C language speed inside the interpreter, like built-in functions.But I think the numpythonic solution still is better to use.


Answer URL
https://docs.python.org/3/library/functions.html#map
