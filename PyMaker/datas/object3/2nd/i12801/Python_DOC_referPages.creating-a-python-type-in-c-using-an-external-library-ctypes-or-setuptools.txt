Natural Text
I'm writing some sort of Python C extension. It uses my own *.so library and headers from another project (let's say they're in  and ).I don't know which strategy to follow. I came up with two:As a pure Python extensionWrite a Python C extension just as described in the official docs. The problem here is that I don't know how to link with my own library and headers; to compile, I write a setup.py file and run . I don't know if I can include some option to the former command, or if I can write something in setup.py to include my headers and binaries (if so, I will also have to worry about making this distributable?).With ctypesWrite a C library (with my other project's build system). Include Python by passing  to find headers and the   binary. Then use  to wrap around that library and get the functions, types, objects, etc. The inconvenience here is that I need to manually wrap around every single function/type/variable from ctypes; I don't think I can use  since I'm not creating the module in C but in the Python wrapper (with ctypes).Also, I tried the second approach, but I could not successfully get my custom PyTypeObject from ctypes. If the second approach sounds good to any more expert brain here on SO, I would post the code to get any help =).
The second approach also yields problems with distribution. And if you create a Python object in C you should do it in the context of a module. For scenarios where distribution is problematic, you could link this module statically instead.For your issue with linking you'll find more information about Library options in the documentation. Since your library resides in a directory which should be in the standard library search path, you'd only need to define your library with the  option of the  class:If you're not using the standard  prefix you'd need to use  instead.


Answer URL
https://docs.python.org/3/distutils/setupscript.html#library-options
