Natural Text
...do something here... should be :What's the easiest way to do this?
The  method of a string (either ASCII or Unicode is fine) does this:However, look out for strings with embedded apostrophes, as noted in the docs.The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:
The  method can't work well, Try  method, From the python docs on capwords:Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.
Just because this sort of thing is fun for me, here are two more solutions.Split into words, initial-cap each word from the split groups, and rejoin.  This will change the white space separating the words into a single white space, no matter what it was.EDIT: I don't remember what I was thinking back when I wrote the above code, but there is no need to build an explicit list; we can use a generator expression to do it in lazy fashion.  So here is a better solution:Use a regular expression to match the beginning of the string, or white space separating words, plus a single non-whitespace character; use parentheses to mark "match groups".  Write a function that takes a match object, and returns the white space match group unchanged and the non-whitespace character match group in upper case.  Then use  to replace the patterns.  This one does not have the punctuation problems of the first solution, nor does it redo the white space like my first solution.  This one produces the best result.I'm glad I researched this answer.  I had no idea that  could take a function!  You can do nontrivial processing inside  to produce the final result!
Copy-paste-ready version of @jibberia anwser:
Here's a summary of different ways to do it, they will work for all these inputs:- The simplest solution is to split the sentence into words and capitalize the first letter then join it back together: - If you don't want to split the input string into words first, and using fancy generators:- Or without importing itertools:- Or you can use regular expressions, from steveha's answer: Now, these are some other answers that were posted, and inputs for which they don't work as expected if we are using the definition of a word being the start of the sentence or anything after a blank space:using ' ' for the split will fix the second output, but capwords() still won't work for the firstBe careful with multiple blank spaces
Why do you complicate your life with joins and for loops when the solution is simple and safe??Just do this:
If str.title() doesn't work for you, do the capitalization yourself.Split the string into a list of wordsCapitalize the first letter of each wordJoin the words into a single stringOne-liner:Clear example:
An empty string will raise an Error if you access [1:], therefore I would use:to uppercase the first letter only.
As Mark pointed out you should use :However, if would like to make the first letter uppercase inside a django template, you could use this:or using a variable:
To capitalize words...@Gary02127 comment, below solution work  title with apostrophe 
The suggested method str.title() does not work in all cases.For example:instead of . I think, it is better to do something like this:
Don't overlook the preservation of white space. If you want to process  and you get  instead of , you've corrupted your white space. Some of the above solutions will lose white space.  Here's a solution that's good for Python 2 and 3 and preserves white space.
If only you want the first letter:'hello world'.capitalize()Output:Hello worldBut to capitalize each word:'hello world'.title()Output:Hello world
**In case you want to downsize **
I really like this answer:Copy-paste-ready version of @jibberia anwser:But some of the lines that I was sending split off some blank '' characters that caused errors when trying to do s[1:].  There is probably a better way to do this, but I had to add in a if len(s)>0, as in


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.title
