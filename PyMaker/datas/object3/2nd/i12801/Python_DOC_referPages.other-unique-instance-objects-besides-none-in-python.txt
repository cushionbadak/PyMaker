Natural Text
The python language reference mentions three objects which have a single, unique instance: , , and  (section 3.2 "The Standard Type Hierarchy").  The test  is a common idiom made possible by the guaranteed uniqueness of .  I cannot find any other mention of unique-instance objects, either in python documentation or on stack overflow.  A few questions, like this one have interesting suggestions for ways to construct such objects, but what I want to know is whether there are any beyond these three built-ins that I've missed.For example,  appears to be unique (in admittedly very limited testing in CPython), so is the test  safe?  Or is  mandatory for this case?
Nope, there are no other built in types that have single values. The only relative of these singletons is the  type which allows for two values (namely  and )*.In  (I cannot find them in ) you can see this limitation by importing  from the  module and realize that it is explicitly not with it's fancy custom : is unfortunately not unique, it represents an empty tuple, if the type  was unique in the sense that  is unique then all its instances would require to have the same value.If you want to take a closer look at these, they are located in  in lines  and  for  and  respectively. Ellipsis is yet to be found.*Update: Apparently,  and  are also singletons, according to :The values False and True will be singletons, like None.  Because      the type has two values, perhaps these should be called      "doubletons"?  The real implementation will not allow other      instances of bool to be created
Well... you can think of any global object as being "unique" in the sense that it is always the same object.For example:There is nothing special about:What you are probably wondering is why you should test  rather than .The answer is:  will call  which may return  in all sorts of situations where  is not actually  (although in reality that is not very common).Instance?Well, you may say there is a difference:  is an instance.Well, the truth is, everything in Python is an object, which means everything is an instance. In my examples,  and  are instances of ,  is instance of  and  is instance of  (note that  is an instance of , so there are no exceptions to the rule).There is one special thing about  - it is the only instance of  and you cannot make others (unless there is some good trick?)But that is actually a property of  - it does not let you make new instances:But that is not really essential for the whole story.EDIT  These "unique-instance objects" are called singletons. You can make some of yours, of course.
For what is worth,  is not unique in PyPy 4.0.1:


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
