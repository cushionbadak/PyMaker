Natural Text
Where is the difference when I write something on one line, seperated by a  and on two lines. Apparently I do not understand the difference, because I though the two functions below should return the same.But
This is because of Python's tuple unpacking. In the first one, Python collects the values on the right, makes them a tuple, then assigns the values of the tuple individually to the names on the left. So, if a == 1 and b == 2:But in the second example, it's normal assignment:
To find a replacement foryou must become aware that this assignment is performed "step by step".So its equivalent isDemo:
Your difference comes in on the lines:1) vs:2) in the first case,  and  before the variable's values have changed.  You're basically saying "with  at given state X, set  to values ."A good way to see the difference in these sort of things is to use the disassembly module (follow link to see meaning of codes):
The difference is because in the second example you set  to  before referencing . Your values on the second example will be off. Here is an example:ex.1:ex.2:The first example is correct
A perfect explanation from Raymond Hettinger can be found in this PyCon 2013 video between 33:13 and 38:17:https://www.youtube.com/watch?v=OSGv2VnC0goQuote from his presentation:don't underestimate the advantages of updating state variabes at the same timeeliminates an entire class of errors due to out-of-order updates
At the first case, the commandswill do first the sum  and then will do the assignment. In that case, b always contains 1. This explains why the final result is 6, because you are adding 1 six times.The second code you posted its correct.


Answer URL
https://docs.python.org/3/library/dis.html
