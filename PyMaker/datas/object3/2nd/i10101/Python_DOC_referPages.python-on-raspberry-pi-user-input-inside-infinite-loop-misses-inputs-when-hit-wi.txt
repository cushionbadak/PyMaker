Natural Text
I have a very basic parrot script written in Python that simply prompts for a user input and prints it back inside an infinite loop. The Raspberry Pi has a USB barcode scanner attached for the input.When you scan at a "normal" speed it works reliably and the command output looks like this:But when you really hammer it with many scans in close succession it is possible to make it miss inputs and the command output looks like this:Notice how  was input but never printed back. It got lost in the confusion.See a video demonstration of my test at: https://youtu.be/kdsfdKFhC1M My question: Is this an inevitability of using a low powered device like a Pi? Will it always be true that a user with a barcode scanner will be able to out-run the hardware's ability to keep up? 
You should probably read from  directly using code similar to the following:This code should handle the case that multiple lines are read at once. The  buffer size is arbitrary and you might have to change it depending on how much data you need to handle.
I know this is a little late, but after a closer look at the raw_input() docs I think it is pretty plain that raw_input is not designed to handle multi-line inputs. When it encounters a multi-line input it seems to only read the last line. (as demonstrated by your test). So my question is, how is raw_input getting a multi-line input in the first place? is the delay caused by the python program not being able to process the raw_input fast enough? Or is the delay inside the USB scanner/driver, and as a result it outputs two numbers instantaneously causing raw_input to process the last line without giving it an opportunity to process the first? 


Answer URL
https://docs.python.org/3/library/sys.html#sys.stdin
