Natural Text
I'm using the following code for finding primitive roots modulo  in Python:Code:Output:Code fragment extracted from: Diffie-Hellman (Github)Can the  method be simplified or optimized in terms of memory usage and performance/efficiency? 
One quick change that you can make here (not efficiently optimum yet) is using list and set comprehensions:Now, one powerful and interesting algorithmic change that you can make here is to optimize your  function using memoization. Or even better you can simply use built-in  function form  module in Python-3.5+ or  module in former versions:Then:As mentioned in comments, as a more pythoinc optimizer way you can use  (or for Python-3.5+ ).
Based on the comment of Pete and answer of Kasramvd, I can suggest this:Output:Changes:It now uses pow method's 3-rd argument for the modulo.Switched to gcd built-in function that's defined in  (for Python ) for a speed boost.Additional info about built-in gcd is here: Co-primes checking
You can greatly improve your isNotPrime function by using a more efficient algorithm.  You could double the speed by doing a special test for even numbers and then only testing odd numbers up to the square root, but this is still very inefficient compared to an algorithm such as the Miller Rabin test.  This version in the Rosetta Code site will always give the correct answer for any number with fewer than 25 digits or so.  For large primes, this will run in a tiny fraction of the time it takes to use trial division.  Also, you should avoid using the floating point exponentiation operator ** when you are dealing with integers as in this case (even though the Rosetta code that I just linked to does the same thing!).  Things might work fine in a particular case, but it can be a subtle source of error when Python has to convert from floating point to integers, or when an integer is too large to represent exactly in floating point.  There are efficient integer square root algorithms that you can use instead.  Here's a simple one:
In the special case that p is prime, the following is a good bit faster:


Answer URL
https://docs.python.org/3/library/math.html#math.gcd
https://docs.python.org/3/library/math.html#math.gcd
https://docs.python.org/3/library/math.html#math.gcd
