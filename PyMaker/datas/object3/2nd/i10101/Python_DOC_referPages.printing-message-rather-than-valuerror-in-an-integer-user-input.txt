Natural Text
I have a decimal to binary converter as seen below:The user input is immediately declared as an integer so anything other than numbers entered terminates the program and returns a . How can I make it so a message is printed instead of the program terminating with a ?I tried taking the method I used from my binary to decimal converter:Which I soon realised won't work as  is an integer rather than a string. I was thinking that I could leave the user input at the default string and then later convert it to  but I feel like this is the lazy and crude way. However, am I right in thinking that anything I try to add after the user input line will not work because the program will terminate before it gets to that line?Any other suggestions?
What I believe is considered the most Pythonic way in these cases is wrap the line where you might get the exception in a try/catch (or try/except) and show a proper message if you get a  exception:Another option you have (but is much slower than handling the exception) is, instead of converting to  immediatly, checking whether the input string is a number using the  method of the strings and skip the loop (using the  statement) if it's not.
You need to handle the  exception using  block. Your code should be like:In case user enters any value which can not be converted to , it will raise  exception, which will be handled by the  Block and will print the message you mentioned.Read Python: Errors and Exceptions for detailed information. As per the doc, the  statement works as follows:First, the  clause (the statement(s) between the  and  keywords) is executed.If no exception occurs, the  clause is skipped and execution of the  statement is finished.If an exception occurs during execution of the  clause, the rest of the clause is skipped. Then if its type matches the exception named after the except keyword, the except clause is executed, and then execution continues after the try statement.If an exception occurs which does not match the exception named in the  clause, it is passed on to outer  statements; if no handler is found, it is an unhandled exception and execution stops with a message as shown above.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/reference/simple_stmts.html#continue
https://docs.python.org/3/tutorial/errors.html
