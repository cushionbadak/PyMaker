Natural Text
I wrote a script to pull down a list of aws tags and then read the last octect and tell me which one is the highest IP. For example. here is the list of tags that are returned:['vlslabmc, 172.16.0.13/24', 'vlslabmc,172.16.0.5/24', 'vlslabmc,172.16.0.3/24', 'vlslabmc,172.16.0.12/24', 'vlslabmc,172.16.0.16/24', 'vlslabmc,172.16.0.6/24', 'vlslabmc,172.16.0.1/24', 'vlslabmc,172.16.0.11/24', 'vlslabmc,172.16.0.15/24', 'vlslabmc,172.16.0.17/24', 'vlslabmc,172.16.0.4/24', 'vlslabmc,172.16.0.7/24', 'vlslabmc,172.16.0.10/24', 'vlslabmc,172.16.0.9/24', 'vlslabmc,172.16.0.8/24', 'vlslabmc,172.16.0.2/24', 'vlslabmc,172.16.0.14/24']Here's my code to workout the largest IP from the tagLis (note that the largest is 17, 172.16.0.17)I'm not sure why.. but when I print the value of largestIP it always prints out 16. Ive gone through the code it should have worked (I'm avoiding using the max function as I'm just learning to code)Any help as aways is greatly appreciated.ThanksEdit with the answer below, and a questionOk so thanks to a clue from cmarie I got it working the problem was mainlyHere's the code running before with an added print statement on the list append:Basically what was happening is that during this loop :The loop stops at the 1st largest integer. in this case that is 16. *I'm not sure why it does but it doesHere's the working code:and the result:Note it found 17.
Although other people have already provide you some alternative ways to find the answer, if you want to keep using your program, here is some way of fixing it:The differences from this and your program are that here I:set make ipList contain integers, rather than stringsset , instead of taking the first number of the ipList (since you shouldn't assume the list is sorted)remove the loop to find the largest number outside the first loop [on the ] - just for eliminating unnecessary iterationsIf I would do that task, however, I would try to use regular expressions. Here is a way to do it:
Why are doing this so complex. Here is oneliner for this
The code is quite convoluted (much more than needed) but the error is that  gets filled with strings and then its elements are compared with an integer.This in Python 2 was a silent source of problems (you got a nonsensical but stable / result when comparing different types instead of an error) and in Python 3 it became an error.a much simpler implementation would in my opinion be:with the meaning: to take the part after the comma to take the part before the slash to take the last part of IP address to convert to integer to do this for all elements and keeping the maxor using a regexp with
So I had to refactor your code a little bit. I assumed ipList was an empty list. Are you sure you tested to see if it actually ran? Specifically your if statementwould return abecause you would be assigning a string to largestIP and then in the next iteration, you would compare a string with an int. Aside from that, your code seems functional. It returns 17 as the largest last octet for me which seems right.If your intention is to return the largest last octet of your list of ip addresses, you might want to approach this a little bit differently.Option 1: Accumulate list of IP Addresses firstInstead of nesting a for loop in your loop to iterate through all the tags, you can first just accumulate the tags and then go through and find the max. This way, you go through the tag list once, and then the ip list once, instead of going through your entire ip list each time you iterate through your tag list.Option 2: Create a list of only the last octetSimilar to option 1, you would iterate through your tagList and accumulate all the last octets of the ip addresses casted to ints into a list, instead of the entire ip address. In a loop afterwards, you can call max on the list with the octets (I'm guessing you want to avoid this).Option 3: Have a running greatest valueI think this is the best solution. As you're going through the tag list, you can keep a variable that will have the greatest last octet so far. This way you only need to loop through the tag list once, and still come out with the greatest last octet thus far.If you want to grab the entire IP address, options 1 and 3 would still work, but for option 2, you might want to look into python dictionaries.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
