Natural Text
How do I find the location of my site-packages directory?
There are two types of site-packages directories, global and per user.Global site-packages ("dist-packages") directories are listed in  when you run:For a more concise list run  from the site module in Python code:Note: With virtualenvs getsitepackages is not available,  from above will list the virtualenv's site-packages directory correctly, though.The per user site-packages directory (PEP 370) is where Python installs your local packages:If this points to a non-existing directory check the exit status of Python and see  for explanations.Hint: Running  or  gives you a list of all installed per user site-packages.Practical Tips lets you identify the location(s) of a specific package: (details) lets you identify the location of a specific module: (difference)Run  to show Debian-style package information:
(or just first item with )
From "How to Install Django" documentation (though this is useful to more than just Django installation) - execute the following from the shell:Formatted for readability (rather than use as a one-liner), that looks like the following:
For Ubuntu,...is not correct.It will point you to This folder only contains packages your operating system has automatically installed for programs to run.On ubuntu, the site-packages folder that contains packages installed via setup_tools\easy_install\pip will be in The second folder is probably the more useful one if the use case is related to installation or reading source code.If you do not use Ubuntu, you are probably safe copy-pasting the first code box into the terminal.
This is what worked for me:
Let's say you have installed the package 'django'. import it and type in dir(django). It will show you, all the functions and attributes with that module. Type in the python interpreter - You can do the same thing if you have installed mercurial.This is for Snow Leopard. But I think it should work in general as well.
As others have noted,  has the relevant settings:...though the default  does something a bit more crude, paraphrased below:(it also adds  and adds both paths for  as well, should that constant be different).That said, what's the context? You shouldn't be messing with your  directly; setuptools/distutils will work for installation, and your program may be running in a virtualenv where your pythonpath is completely user-local, so it shouldn't assume use of the system site-packages directly either.
The native system packages installed with python installation in Debian based systems can be found at :/usr/lib/python2.7/dist-packages/In OSX - by using this small code :However, the list of packages installed via  can be found at :/usr/local/bin/Or one can simply write the following command to list all paths where python packages are.Note: the location might vary based on your OS, like in OSX
All the answers (or: the same answer repeated over and over) are inadequate. What you want to do is this:The final line shows you the installation dir. Works on Ubuntu, whereas the above ones don't. Don't ask me about windows or other dists, but since it's the exact same dir that easy_install uses by default, it's probably correct everywhere where easy_install works (so, everywhere, even macs). Have fun. Note: original code has many swearwords in it.
A side-note: The proposed solution () does not work when there is more than one site-packages directory (as recommended by this article). It will only return the main site-packages directory.Alas, I have no better solution either. Python doesn't seem to keep track of site-packages directories, just the packages within them.
This works for me.It will get you both dist-packages and site-packages folders.If the folder is not on Python's path, it won't bedoing you much good anyway.Output (Ubuntu installation):
An additional note to the  function mentioned already: on some platforms different directories are used for platform specific modules (eg: modules that require compilation).  If you pass  to the function you get the site packages for platform specific packages.
This should work on all distributions in and out of virtual environment due to it's "low-tech" nature. The os module always resides in the parent directory of 'site-packages'To change dir to the site-packages dir I use the following alias (on *nix systems):

pip show will give all the details about a package:https://pip.pypa.io/en/stable/reference/pip_show/  [pip show][1]To get the location:
A modern stdlib way is using  module, available in version 2.7 and 3.2+. Python currently uses eight paths (docs):stdlib: directory containing the standard Python library files that are not platform-specific.platstdlib: directory containing the standard Python library files that are platform-specific.platlib: directory for site-specific, platform-specific files.purelib: directory for site-specific, non-platform-specific files.include: directory for non-platform-specific header files.platinclude: directory for platform-specific header files.scripts: directory for script files.data: directory for data files.In most cases, users finding this question would be interested in the 'purelib' path (in some  cases, you might be interested in 'platlib' too).  Unlike the currently accepted answer, this method should not misbehave depending on whether or not you have a virtualenv activated.At system level (this is Python 3.7.0 on mac OS):With a venv, you'll get something like this A shell script is also available to display these details, which you can invoke by executing  as a module:Note:  (source) is not to be confused with the  submodule (source) mentioned in several other answers here. That is an entirely different module and it's lacking the  function discussed above.
Answer to old question. But use ipython for this. This will give the following output about imaplib package -
I had to do something slightly different for a project I was working on: find the relative site-packages directory relative to the base install prefix.  If the site-packages folder was in , I wanted the  part.  I have, in fact, encountered systems where  was in , and the accepted answer did NOT work on those systems. Similar to cheater's answer, my solution peeks deep into the guts of Distutils, to find the path that actually gets passed around inside .  It was such a pain to figure out that I don't want anyone to ever have to figure this out again.That should print something like  or .
If it is already added to the  you can also do something like


Answer URL
https://docs.python.org/3/library/sysconfig.html
https://docs.python.org/3/library/sysconfig.html#installation-paths
