Natural Text
For example, I have some module() with next code:And module  with similiar code:I just can't understand why next happens:They are two mocked:It is seemed to patch only  method due to , but it is not.I know that I can just get  calling out of  scope, but there are cases where I just run in context manager one method that calls many other, and I want to patch  only in one module.Is there any way to solve this? Without changing imports in module
The two locations  and  refer to the same object, so mock it in one place and you mock it in the other.  Imagine how you might implement patch.  You have to find where the symbol is located and replace the symbol with the mock object.  On exit from the with context you will need to restore the original value of the symbol.  Something like (untested):So your problem is that the you are mocking the object in the request module, which you then are referring to from both foo and bar.Following @elethan's suggestion, you could mock the requests module in foo, and even provide side effects on the get method:A more direct solution is to vary your code so that  and  pull the reference to  directly into their name space.foo.py:bar.py:main.py:producing:Updated with a more complete explanation, and with the better solution (2016-10-15)Note: added  to call the underlying function after side effect. 
Not to steal @Neapolitan's thunder, but another option would be to simply mock  instead of :I think the reason why both methods get mocked in your case is that, since  is not explicitly imported in ,  will have to look up the method in the  module and mock it there, rather than mocking it in the  object already imported into , so that when  later imports  and accesses  it is geting the mocked version. However, if you   instead, you are just patching the module object already imported into , and the original  module will not be affected.Although not particularly helpful for this particular problem, this article is very useful for understanding the subtleties of 


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
