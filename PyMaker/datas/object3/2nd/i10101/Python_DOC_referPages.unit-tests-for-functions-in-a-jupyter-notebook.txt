Natural Text
I have a Jupyter notebook that I plan to run repeatedly. It has functions in it, the structure of the code is this:I'd like to write tests for  and . What's the most sensible way to do this?Some approaches I've considered:Move the functions out into a utility file, and write tests for that utility file in some standard Python testing library. Possibly the best option, though it means that not all of the code is visible in the notebook.Write asserts within the notebook itself, using test data (adds noise to the notebook).Use specialised Jupyter testing to test the content of the cells (don't think this works, because the content of the cells is going to change). 
It is possible to use Python standard testing tools, such as doctest or unittest, directly in the notebook.DoctestA notebook cell with a function and a test case in a docstring:A notebook cell (the last one in the notebook) that runs all test cases in the docstrings:Output:UnittestA notebook cell with a function:A notebook cell (the last one in the notebook) that contains a test case. The last line in the cell runs the test case when the cell is executed:Output:Debugging a Failed TestWhile debugging a failed test, it is often useful to halt the test case execution at some point and run a debugger. For this, insert the following code just before the line at which you want the execution to halt:For example:For this example, the next time you run the doctest, the execution will halt just before  the return statement and the Python debugger (pdb) will start. You will get a pdb prompt directly in the notebook, which will allow you to inspect the values of  and , step over lines, etc.I created a Jupyter notebook for experimenting with the techniques I have just described.
In my opinion the best way to have a Unit tests in Jupyter notebook is the following package:https://github.com/JoaoFelipe/ipython-unittestexample from the package docs:
After researching a bit, I reached my own solution where I have my own testing code looks like thisWhat it does isCheck if  equals .If they are different it shows the arguments in red.If they are the same it says 'okay'.If the result of the comparison is an array it checks if  is true.I put the function on top of my notebook and I test something like thisPros of this approach areI can test cell by cell and see the result as soon as I change something of a function.I don't need to add extra code something like  that I have to add if I use doctest.Error messages are simple.I can customize my testing (assert) code.


Answer URL
https://docs.python.org/3/library/pdb.html
