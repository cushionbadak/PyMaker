Natural Text
I've tried all the solutions mentioned on the internet so far nothing worked for me.I have a python code, to speed it up, I want that my code runs the heavy calculations in a C function.I already wrote this C function.Then, to share the library, I did this in the terminal :which returns no error. The problem; comes when i try to launch the C function in python. Let's consider the following simple function in C :I launch python3 (3.5.2), and then :The library should be ready to use in python by doing :When doing that, it works and python returns Problem is, that the function i want to use ( the multiplier function I use is just for the example ) is supposed to take floats as input and return a float. But if I now consider the same multiplier function as before but with float :I recompile using gcc, I reimport ctypes and re-do ctypes.CDLL, and I do in python3 :(the types.c_float are here to convert the 2 in python into a float in C ), python will return :This is weird because if I add a printf within the function to print lol, python will print :but still return 2, or 18 sometimes. Even though I printf and return the same variable "lol".I tried a lot of things, and none of it worked. Do somebody have a idea please ? Thank You.
While @falsetru's answer is the better way of doing it an alternative is to simply write your C function to use doubles.Floats are automatically promoted to double when  calling a function without a parameter list.
You need to specify ,  of the function:According to Specifying the required argument types (function prototypes):It is possible to specify the required argument types of functions exported from DLLs by setting the  attribute.and Return types in  module documentation:By default functions are assumed to return the C int type. Other return types can be specified by setting the  attribute of the function object.


Answer URL
https://docs.python.org/3/library/ctypes.html#specifying-the-required-argument-types-function-prototypes
https://docs.python.org/3/library/ctypes.html#return-types
https://docs.python.org/3/library/ctypes.html
