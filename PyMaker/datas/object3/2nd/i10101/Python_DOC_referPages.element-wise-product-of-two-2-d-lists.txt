Natural Text
I can't use Numpy or any other library function as this is a question I have to do, I have to define my own way.I am writing a function that takes two lists (2 dimensional) as arguments. The function should calculate the element-wise product of both lists and store them in a third list and return this resultant list from the function.An example of the input lists are:list1:list2:The function prints the following list: That is , ,  ... and so on.This is my code below, but it is only for a list with 2 lists (elements) inside in it like the example above and works perfectly fine for that, but what I want is to edit my code so that no matter how many number of lists (elements) are there in the 2-D list, it should print out its element-wise product in a new 2-D list e.g. it should also work for or or any number of lists there are within the whole list.
You can  the two lists in a list comprehension, then further  the resulting sublists and then finally multiply the items:Should in case the lists/sublists do not have the same number of elements,  can be used to generate fill values such as an empty sublist for the smaller list, or 0 for the shorter sublist:You may change the inner  from 0 to 1 to return the elements in the longer sublists as is, instead of a homogeneous 0.Reference:List comprehensions
Here is a function that can handle any type of iterable, nested to any level (any number of dimensions, not just 2):This function works recursively. For each element in a list, it checks if the element is iterable. If it is, the output element is a list containing the elementwise multiplication of the iterables. If not, the product of the numbers is returned.This solution will work on mixed nested types. A couple of assumptions that are made here are that all the levels of nesting are the same size, and that an element that is a number in one iterable (vs a nested iterable), is always a number in the other.In fact, this snippet can be extended to apply any n-ary function to any n iterables:To do multiplication, you would use :produces
In Python, it's generally better to loop directly over the items in a list, rather than looping indirectly using indices. It makes the code easier to read as well as more efficient since it avoids the tedious index arithmetic.Here's how to solve your problem using traditional  loops. We use the built-in  function to iterate over two (or more) lists simultaneously.outputWe can use list comprehensions to make that code a lot more compact. It may seem harder to read at first, but you'll get used to list comprehensions with practice.
You could use numpy arrays. They are your best option as they run on a C background and hence are much faster computationallyFirst, install numpy. Shoot up your terminal (CMD if you're in windows), typeor, if in Linux, Then, go on to write your code


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
