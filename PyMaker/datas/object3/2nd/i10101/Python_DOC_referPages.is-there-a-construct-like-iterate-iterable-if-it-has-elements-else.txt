Natural Text
Is there a more compact way to iterate an iterable if it has elements, or do something else if it hasn't?My "problem" is in Python but I'd be interested in other languages as well.Currently I test the number of elements first:The  statement has an :but its "suite" (block) is also executed when the iteration is completed:I realize there is not much to gain here (one line and indent level) but I am curious if something like this exists.
Most of the time you just test for length and exit early:At any rate, because iteration will not take place on an empty list, the following is also sufficient, no  required:The  suite is only useful for loops that exit early; the  suite is executed for all loops that completed. If a  was used the  is skipped. This makes it unsuitable for detecting empty sequences, as iteration on those completes successfully regardless of the number of elements in the absence of a  statement.
Since you ask for other languages, here is Squeak/Pharo Smalltalk, since the paradigms are sufficiently close to Python:you would write something like:You could as well create a new method in Collection:Then use it like this:Note that isEmpty is defined as  by default, which is an heresy for possibly lazy or infinite collections... So I propose this new definition:Just to see that testing emptyness or performing a loop is more or less the same task ;)Conclusion, in Smalltalk there is a very low level of syntactic sugar.The block closures enable differed, conditional, or repeated evaluation.Thus all the constructs like branches and loops and combinations of these are just ordinary messages taking block closures as parameters and you can add your own construct at will.This facility is often abused with overkill selectors for a very small added value, so the need for new constructs should allways be put in balance with the maintenance cost (more methods to implement, test, and learn for a newcomer, etc...). Let's remember: "Small is beautiful".


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
