Natural Text
Python's namedtuple can be really useful as a lightweight, immutable data class. I like using them for bookkeeping parameters rather than dictionaries. When some more functionality is desired, such as a simple docstring or default values, you can easily refactor the namedtuple to a class. However, I've seen classes that inherit from namedtuple. What functionality are they gaining, and what performance are they losing? For example, I would implement this asFor the sole purpose of being able to document the attrs cleanly, and  is used to prevent the creation of a  (keeping the lightweight nature of namedtuples).Is there a better recommendation of a lightweight data class for documenting parameters? Note I'm using Python 2.7.
NEW UPDATE:In python 3.6+, you can use the new typed syntax and create a . The new syntax supports all the usual python class creation features (docstrings, multiple inheritance, default arguments, methods, etc etc are available as of 3.6.1):The class objects created by this version are mostly equivalent to the original , except for a few details.You can also use the same syntax as the old named tuple:Original AnswerShort answer: no, unless you are using Python < 3.5The P3 docs seem to imply pretty clearly that unless you need to add calculated fields (i.e., descriptors), subclassing  is not considered the canonical approach. This is because you can update the docstrings directly (they are now writable as of 3.5!). Subclassing is not useful for adding new, stored fields. Instead, simply create a new named tuple type from the  attribute...Docstrings can be customized by making direct assignments to the  fields...UPDATE:There are now a couple other compelling possibilities for lightweight data classes in the latest versions of Python.One is  (Python 3.3 and later). It is not structured like , but structure isn't always necessary.One thing to note about : by default it is required to explicitly designate the field names when instantiating the class. This can be got around fairly easily, though, with a call to :Another intriguing option- which will be available as of Python 3.7 (not yet released)- is  (see PEP 557):Note that both of these suggestions are mutable by default, and that  is not required for either one.


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions
