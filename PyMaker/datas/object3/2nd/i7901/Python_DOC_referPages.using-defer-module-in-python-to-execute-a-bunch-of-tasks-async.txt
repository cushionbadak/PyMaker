Natural Text
I saw this page suggesting the usage of defer module to execute a series of tasks asynchronously.I want to use it for my Project:Calculate the median of each list of numbers I have (Got a list, containing lists of numbers)Get the minimum and maximum medians, of all medians.But for the matter of fact, I did not quite understand how to use it.I would love some explanation about defer in python, and whether you think it is the appropriate way achieving my goal (considering the Global Interpreter Lock).Thanks in advance!
No, using asynchronous programming (cooperative routines, aka coroutines), will not help your use case. Async is great for I/O intensive workloads, or anything else that has to wait for slower, external events to fire.Coroutines work because they give up control (yield) to other coroutines whenever they have to wait for something (usually for some I/O to take place). If they do this frequently, the event loop can alternate between loads of coroutines, often far more than what threading could achieve, with a simpler programming model (no need to lock data structures all the time).Your use-case is not waiting for I/O however; you have a computationally heavy workload. Such workloads do not have obvious places to yield, and because they don't need wait for external events, there is no reason to do so anyway. For such a workload, use a multiprocessing model to do work in parallel on different CPU cores.Asynchronous programming does not defeat the GIL either, but does give the event loop the opportunity to move the waiting for I/O parts to C code that can unlock the GIL and handle all that I/O processing in parallel while other Python code (in a different coroutine) can execute.See this talk by my colleague ≈Åukasz Langa at PyCON 2016 for a good introduction to async programming.


Answer URL
https://docs.python.org/3/library/multiprocessing.html
