Natural Text
So, I am compressing a JSON file.So can I decode the compressed byte file?I am trying thisbut this gives an error.I think i am doing something theoretically wrong or can i decode the compressed file?How can I get a compressed JSON file as i am trying to compress a JSON only? I am using python3.
You are doing two things wrong:You are trying to treat compressed data as UTF-8. It is not UTF-8, it is binary data. Decompress first, then decode as UTF-8.You are not creating compressed JSON. You are creating compressed Python data representations. Don't decode the JSON to Python if you want to write compressed JSON.You can compress the JSON data directly without decoding; I'd do it in chunks directly to an output file to keep memory usage efficient:Note that I open the input file as binary, there is no reason to decode the data from UTF-8 just to compress it (which opening the file in text mode would do).To decode the compressed JSON again, using Python, just open the gzipped file with the  function again, this time in text mode:The GZIP file object that  returns handles compression and UTF-8 decoding for you; the  function can decompress the contained JSON document from there.It is always a good idea to explicitly state the encoding of the file, rather than to rely on your locale being set correctly for every file you open. That said, as of Python 3.6  will also accept binary input, and detect what UTF encoding was used, so in that case use:where the default mode is .
You don't need to use the json module at all for this: you could simply compress the JSON file data. However, by loading the JSON into a Python object & converting it back to JSON you can get rid of excess whitespace. You could also perform other transformations, eg ensure that the data is ASCII-safe.As Martijn said, you should be compressing JSON data not the str representation of the Python object that you loaded with the JSON data. And to decompress that data you need to call the decompress method.  decodes UTF-8 bytes to a Unicode string object.Here's a short demo. To test it, I created this tiny JSON file.test.jsonAnd here's the code.outputNote that the compressed version is actually larger than the compressed data (although both are smaller than the original data). That's to be expected when compressing such a tiny amount of data. 


Answer URL
https://docs.python.org/3/library/gzip.html
