Natural Text
I have a Python dict object . . My problem is really simple. I want to reference a variable to the elements of . For example, something like:Is that even possible? But as far as I know  objects are mutable.
As others have pointed out, this is not really possible in Python, it doesn't have C++ style references. The closest you can get is if your dictionary value is mutable, then you can mutate it outside and it will be reflected inside the dictionary (because you're mutating the same object as the object stored in the dictionary). This is a simple demonstration: But in general, this is a bad pattern. Don't do this if you can avoid it, it makes it really hard to reason about what's inside the dictionary. If you wanna change something in there, pass the key around. That's what you want. 
No, this is not possible.  After executing the lineThe situation does not look like this:Rather, it looks like this:The name  is bound directly to whatever object was resolved as the value for key .  The variable  knows nothing about the dict , and you could even delete the dict  now.  
Not always, but if the associated dictionary value is something mutable, such as a , you can effectively create a pointer to it if you're using the CPython interpreter by using the built-in  function coupled with its inverse, as shown below:


Answer URL
https://docs.python.org/3/library/functions.html#id
