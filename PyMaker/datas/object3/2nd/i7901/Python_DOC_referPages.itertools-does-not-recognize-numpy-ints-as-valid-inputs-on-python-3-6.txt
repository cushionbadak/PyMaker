Natural Text
Take this code:On Python 2.7 it prints  as expected.On Python 3.6 it throws an exception:The same goes for , and other methods of the  package throw similar errors, e.g. when you use  you get .I couldn't find much on this apart from  this numpy issue and related ones, but that one was closed 3 years ago implying it was solved.And basic things like indexing with numpy ints  or boolean comparisons like  work just fine.Am I missing something? Could this be a Python 3 bug?
a  is apparently not a subclass of Numpy documentationThe documentation mentions this explicitlyWarningThe int_ type does not inherit from the int built-in under Python 3,  because type int is no longer a fixed-width integer type.Solutionor numpy slicing
I'm not sure if it's a bug in Python 3 or not, but it looks like the behaviour has changed since 2.7.  As the numpy issue you linked described, under py27, either  or  would appear to be a subclass of  (depending on whether you use a 32- or 64-bit build of Python); under py3, the types are no longer related (numpy has fixed-width numeric types, python's  is variable-width).The implementation of  requires its arguments to be objects of type PyLong (which is the Python API name for the Python  type).  Specifically, it calls , which converts a Python object into a C  value.  This method seems to require that its argument is actually a Python  object, since it calls .  I think this method is broadly equivalent to Python's , which explains the difference in behaviour between py2 and py3 here.Normal list indexing uses another more tolerant method to coerce arguments into positive integer values, called .  This checks if its argument is an , and, if not, falls back to trying to call its argument's  method; as @MarkDickinson points out, numpy's numeric types implement this method, so everything works fine.  Perhaps this would be a more intuitive thing for  to do.
This looks like a case for the  magic method (which numpy's integers already implement). I suggest raising an issue on the tracker, requesting this as an enhancement - that islice accept any object that implements .
If you want to keep a /-like object, use :since  is a  object, it doesn't mind the  integers.


Answer URL
https://docs.python.org/3/c-api/long.html
https://docs.python.org/3/reference/datamodel.html#object.__index__
