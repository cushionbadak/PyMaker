Natural Text
i am implementing a python class that provides some nested data structure. i want to add support for copying through  and deep copying through , which, as the docs for the copy module describe, involves writing  and  special methods.i know how to teach my class to make a copy of itself, but i want to avoid going through  on the new instance, since  does some things that my copying logic does not want (or need) to do.what i ended up with is this method, which works as intended:my question is: is calling  the right approach for a  implementation that wants to skip  for the copy? or is there a more "pythonic" approach that i overlooked?
I don't know if this is more pythonic, but you could use a flag.In the  above, the conditional setup stuff is only done if . The only way to avoid this is by calling  with the first parameter being an instance of itself with . This way, it's easy to flip the setup switch in different methods.The  blocks look clunky to me, but it's a way to make sure every method starts and ends with .


Answer URL
https://docs.python.org/3/library/copy.html
