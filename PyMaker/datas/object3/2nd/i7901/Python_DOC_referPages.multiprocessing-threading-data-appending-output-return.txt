Natural Text
I have a lengthy function called  below that contains a few instances of appending data.However, using multiprocessing no data is appended. In addition, the function  returns several values that need to be added to , , and  and I am not sure how to retrieve those values. I chose multiprocessing because running  in a -loop is slow and each iteration was independent of the rest. I would like to incorporate GPU acceleration in this code later for anyone that has any ideas on that.So my questions are the following:Should I even be using multiprocessing as opposed to threading?Why is  not being appended to ?How can I retrieve the output of  within the multiprocessing block?Edit:...Output & Error Message:
Multiprocessing spawns a different Process with it's own global variables copies from current environment. All the changes in variable made in that process does not reflect in parent process. You need to share memory between the process and variables in shared memory can be exchanged. You can use  to create a shared object like list or dictionary, and manipulate that object. Processes are assigned to different cores/thread of your processor. If you have a 4 core/8 thread system, spawn a maximum of 7 processes to maximize performance, any more than that some processes will interfere with other processes and can slow down/reduce the cpu time allotted to your os which can crash your system. It's always the cpu cores/cpu threads -1 processes for stable processing leaving atleast one core to os to handle other operations.You can modify your code like this
The way multiprocessing works, each subtask runs in its own memory space and gets its own copy of any global variables. A common way around this limitation to effectively have shared data is to use a  to coordinate concurrent access to it and transparently prevent any problems simultaneous access to it might cause. Below is an example of doing that based on your sample code. It also uses a  which makes it easy to create a fixed-size collection of process objects that can each provide asynchronous results each subtask (or wait until all of them are finished before retrieving them, as is being done here). Output:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.managers
