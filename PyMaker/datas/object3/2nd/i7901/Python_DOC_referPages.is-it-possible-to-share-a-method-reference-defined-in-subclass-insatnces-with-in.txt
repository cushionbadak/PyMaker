Natural Text
I have a class called :class  will be sub-classed by class . class  however, contains methods that need to be registered as a  pair in instances of class 's dictionary. This is so class  can do work using the methods.Here is an example of what I mean:Is there an idiomatic way to solve this? Or is something like this not possible, and it would be better to change my codes structure.Note this is not a duplicate of Auto-register class methods using decorator because my register is not global, it is an instance variable of a class. This means using a meta-class like shown in the selected answer would not work.
If you will declare all classes you need, and after that worry about instance registers have references to all declared methods in all subclasses, you just need to performa a "register" information when declaring the subclasses themselves. That is easy to do in Python 3.6 (but not 3.5) with the new  mechanism. In Python 3.5 and before that, it is easier performed using a metaclass. The code here is meant to be simple - the custom dict class will "copy on read" values of the A.regiser dictionary into the instance dictionary. If you need a more consistent dictionary that include this behavior (for example, one that will iterate correctly the keys, values and items of both itself and the fallback dictionary) you'd better implement the "FallbackDict" class as an instance of collections.abc.MutableMapping instead (and just use an aggregate dictionary to actually keep the data)You don't need the custom dict at all if you plan to create all your classes that register new methods before creating any instance of "A" - or if newly created classes don't have to update the existing instances - but in that case, you should copy A.register to the instance's "self.register" inside .If you can't change to Python 3.6 you will also need a custom metaclass to trigger the  method above. Just keep it as is, so that your code is ready to move to Python 3.6 and eliminate the metaclass, and add a metaclass something like:
I think the link to this question you mentioned in your post really can be used to solve your problem, if I understand it correctly.The information you're trying to register is global information. While you want each instance to have a register containing this global information, all you really need to do is have  copy the global register into the instance register.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__
