Natural Text
I'm trying to have a class act in every way like a tuple that's an attribute of the class, so len(instance) would be the same as len(instance.tup), instance[3] would return instance.tup[3], etc. Here's the class:I canBut if I try to:mt does in fact have a __len__ that I can call:(I even renamed it __len__). As near as I can tell, this should look just as if I did:But python won't let me len(mt) (or mt[2] or mt [1:5] for that matter).
The reason this isn't working as you have hoped is because doing:Is not equivalent to In the latter case, your method is a property of the class because it is defined in class scope. It would be the equivlanet of . If you check  you will see it there. However, in the former case,  is a property of the instance. So it will be in .  checks the class for a  method, and doesn't find one. Hence the error. Your  is never actually called, and even if it were, it wouldn't allow you to use . You can use  diretly, though.
New-style classes look-up "special methods"—those that start and end with two underscore characters—on an instance's class not the instance involved, so when  is called it tries to call . So the proper way to do what you want would be to use one of the Abstract Base Classes for Containers in the  module (since Python 3.3)
 does not use  to get the  function - it calls  directly.Calling  is like calling  - which will return the  method object. works behind the scene, so it can access this method directly, without invoking the  helper.Try to add a print statement in your  to see what is printed when calling  (hint: nothing). 


Answer URL
https://docs.python.org/3/library/collections.abc.html#module-collections.abc
