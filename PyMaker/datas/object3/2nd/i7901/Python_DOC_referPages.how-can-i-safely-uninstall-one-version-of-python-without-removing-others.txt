Natural Text
I went ahead and downloaded the latest version of python3 onto my mac from python.org/downloads/, however, I was having trouble using pip in my terminal, so I used Homebrew to install python via the command line. It looks like Homebrew installed a 2.x version. I also know that my mac already has some python2.x version built in. I would like to remove the 2.x versions and only use the python3.6.1 that I have. How can I accomplish this?
There are several aspects to your question: invoking different major Python versions, removing unneeded Homebrew-installed packages, and identifying which installation is in use.Major Python versions, 2 and 3, use different command names to invoke them. The first, , uses the system default according to your configured  environment variable and should default to Python 2, but does not on all systems. Reference: https://www.python.org/dev/peps/pep-0394/Instead, explicitly invoke the version you want, e.g. by running . Note that virtual environments (created by running  or ) will create an isolated environment using the Python version of your choice where  will always use that version, and  will install packages relative to, instead of system-wide, which may avoid the requirement of superuser () privileges.Note that Homebrew might not override the default versions provided by the system, requiring you to make changes to your  to force Homebrew's versions to be preferred.  After installing a package Homebrew will inform you of this type of information, and you can get the messages later by running: Uninstalling a brew-installed package requires running: For more information, run: As mentioned above, identifying just which Python you're using starts with the . To quickly identify the executable you invoke when typing , , or  into your shell is by running:  â€” this can help identify if you're using the Homebrew installed version or the system version, or if you are using a version from an active virtual environment. You can also use  to identify the  or  command location.This gets you the first part of the equation. The second then boils down to: where does Python think things are?  Invoking it then running the following will tell you exactly where it thinks things (imports) are:This can help track down issues related to why you can't import that package you just installed with .I can highly recommend using a virtual environment to isolate your projects from system level packages and differences. Within one,  and  will basically always behave as expected, as you determined when creating the environment.


Answer URL
https://docs.python.org/3/library/venv.html
