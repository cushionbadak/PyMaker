Natural Text
I'm using the REST API for a Cisco CMX device, and trying to write Python code which makes a GET request to the API for information. The code is as follows and is the same as that in the file except with the necessary information changed.However, I am continuously getting the following error: I also tried updating OpenSSL but that had no effect.
I had the same error and google brought me to this question, so here is what I did, hoping that it helps others in a similar situation.This is applicable for OS X.Check in the Terminal which version of OpenSSL I had:As my version of OpenSSL was too old, the accepted answer did not work.So I had to update OpenSSL. To do this, I updated Python to the latest version (from version 3.5 to version 3.6) with Homebrew, following some of the steps suggested here:Then I was having problems with the PATH and the version of python being used, so I just created a new  making sure that the newest version of python was taken:Issue solved.
The only thing you have to do is to install  in your virtualenv. You should not have to use Python 3 (it should work in Python 2.7). Moreover, if you are using a recent version of macOS, you don't have to use  to separately install OpenSSL either. allows requests to use the latest version of TLS when negotiating the connection. The built-in openssl on macOS supports TLS v1.2.Before you install your own version of OpenSSL, ask this question: how is Google Chrome loading https://github.com?
None of the accepted answers pointed me in the right direction, and this is still the question that comes up when searching the topic, so here's my (partially) successful saga.Background: I run a Python script on a Beaglebone Black that polls the cryptocurrency exchange Poloniex using the python-poloniex library. It suddenly stopped working with the TLSV1_ALERT_PROTOCOL_VERSION error.Turns out that OpenSSL was fine, and trying to force a v1.2 connection was a huge wild goose chase - the library will use the latest version as necessary. The weak link in the chain was actually Python, which only defined , and therefore started supporting TLS v1.2, since version 3.4.Meanwhile, the version of Debian on the Beaglebone considers Python 3.3 the latest. The workaround I used was to install Python 3.5 from source (3.4 might have eventually worked too, but after hours of trial and error I'm done):Maybe not all those packages are strictly necessary, but installing them all at once saves a bunch of retries. The  prevents the install from clobbering existing python binaries, installing as  instead, though that does mean you have to re-install additional libraries. The  took a good five or ten minutes. The  took a couple of hours.Now this still didn't work until I finally ranWhich also installs ,  and . I suspect  was the key, so maybe  would have been sufficient but I've spent far too long on this already to make sure.So in summary, if you get TLSV1_ALERT_PROTOCOL_VERSION error in Python, it's probably because you can't support TLS v1.2. To add support, you need at least the following:OpenSSL 1.0.1Python 3.4requests[security]This has got me past TLSV1_ALERT_PROTOCOL_VERSION, and now I get to battle with SSL23_GET_SERVER_HELLO instead.Turns out this is back to the original issue of Python selecting the wrong SSL version. This can be confirmed by using this trick to mount a requests session with . Without it, SSLv23 is used and the SSL23_GET_SERVER_HELLO error appears. With it, the request succeeds.The final battle was to force TLSv1_2 to be picked when the request is made deep within a third party library. Both this method and this method ought to have done the trick, but neither made any difference. My final solution is horrible, but effective. I edited  and changedtoand voila, my script can finally contact the server again.
I believe  is alerting you that the server doesn't want to talk TLS v1.0  to you. Try to specify TLS v1.2 only by sticking in these lines:Note, you may need sufficiently new versions of Python (2.7.9+ perhaps?) and possibly OpenSSL (I have "OpenSSL 1.0.2k  26 Jan 2017" and the above seems to work, YMMV)
For Mac OS X1) Update to Python 3.6.5 using the native app installer downloaded from the official Python language website https://www.python.org/downloads/ I've found that the installer is taking care of updating the links and symlinks for the new Python a lot better than homebrew. 2) Install a new certificate using "./Install Certificates.command" which is in the refreshed Python 3.6 directory 
As of July 2018, Pypi now requires that clients connecting to it use TLS 1.2. This is an issue if you're using the version of python shipped with MacOS (2.7.10) because it only supports TLS 1.0. You can change the version of ssl that python is using to fix the problem or upgrade to a newer version of python. Use homebrew to install the new version of python outside of the default library location. 
I got this problem too.In macos, here is the solution:Step 1: brew restall python. now you got python3.7 instead of the old pythonStep 2: build the new env base on python3.7. my path is now, you'll not being disturbed by this problem.


Answer URL
https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2
