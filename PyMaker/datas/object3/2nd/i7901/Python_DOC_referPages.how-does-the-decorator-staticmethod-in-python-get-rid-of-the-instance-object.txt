Natural Text
As far as I have understood, a decorator is a function that takes another function as a parameter, performs some operation on it and then returns it.Talking about the decorator @staticmethod, what exactly does that decorator do to eliminate the instance object that is being passed by default ?
The  decorator returns a  object. This object implements the descriptor protocol, same as functions do.What this does is not that it gets rid of the instance, instead the  ignores binding altogether and just returns the unaltered function object. For regular functions,  would instead bind by returning a method object (which then tracks the instance and the function to combine them when called).You can reproduce this by manually invoking the descriptor protocol:By accessing the attributes of the  class through , we bypass the descriptor protocol normally enforced by the  method. As you can see, for a regular method a function object is returned, but for  a  object is found instead.Calling  on either to invoke the descriptor protocol then produces a method object, and the un-altered function object, respectively. This is exactly what direct access to the same names on an instance produces:Note that the same protocol is also the reason that  objects are passed  instead of the instance as a first argument, and also why  objects call the underlying function on access.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/howto/descriptor.html#static-methods-and-class-methods
