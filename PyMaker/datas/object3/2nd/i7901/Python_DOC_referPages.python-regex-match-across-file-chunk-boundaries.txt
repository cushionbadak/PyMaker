Natural Text
Huge plain-text data fileI read a huge file in chunks using python. Then I apply a regex on that chunk. Based on an identifier tag, I want to extract the corresponding value. Due to the chunk size, data is missing at the chunk boundaries.Requirements:The file must be read in chunks.The chunk sizes must be smaller thanor equal to 1 GiB.Python code exampleChunk data examplesGood: number of tags equivalent to number of valuesIdentifier: value Identifier: value Identifier: value  Identifier: valueDue to the chunk size, you get varying boundary issues as listed below.  The third identifier returns an incomplete value, "v" instead of "value". The next chunk contains "alue". This causes missing data after parsing.Bad: identifier value incompleteIdentifier: value Identifier: value Identifier: vHow do you solve chunk boundary issues like this?
Assuming this is your exact problem you could probably just adapt your regex and read line by line (which won't load the full file into memory):
You can control chunk forming and have it close to 1024 * 1024 * 1024, in that case you avoid missing parts:Alternativelly, you can go two times over same file with different starting point of  (first time from: 0, second time from max length of matched string collected during first iteration), store results as dictionaries, where , that position would be same for each iteration, so it shall not be a problem to merge results, however I think it would be more accurate to do merge by start position and length of matched string.Good Luck !
If the file is line-based, the  object is a lazy generator of lines, it will load the file into memory line by line (in chunks), based on that, you can use:
I have a solution very similar to Jack's answer:You could use a another part of the regex API to have the same result:Which we could simplify using a generator expression and a list comprehension
If the matched result string's length is known, the easiest way I think is to cache the last chunk's bytes around the boundary.Suppose the result's length is 3, keep the last 2 chars of the last chunk, then add it to the new chunk for matching.Pseudo-code:


Answer URL
https://docs.python.org/3/tutorial/classes.html#generator-expressions
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
