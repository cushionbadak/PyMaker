Natural Text
So, let's say I want to write my own class, rewriting  function. Every time, when someone calls attribute, which was not defined, I want it to generate a random int.Obviously, I can't write something like this, as it would cause a recursion.    How, without using , can I get an information about defined attributes?
I strongly urge you to reconsider overriding  and use the  hook instead. That method is called automatically for any missing attribute, and won't interfere with  or  introspection:Your own implementation is flawed because you failed to check the class for your attribute.  is a descriptor on the class, and trying to access  is handled by  too, triggering your infinite recursion. You can avoid the issue entirely by using   first. You could just catch the  exception this could throw:The more painful path would be to re-implement the descriptor protocol to retrieve your  attribute before testing:or you could access  via . You do have to test the class MRO too, because those provide attributes for your instances too; you wouldn't want  to return a random integer rather than  itself.However, this use-case is already covered by implementing  instead, a much cleaner and simpler option.Last but not least, instead of using , you should use  to ensure you are not skipping any other  hooks in your class hierarchy.
If you need to bypass your own , for example to get at the "real" , you can explicitly call the superclass :However, for your case, it'd probably be easier to just implement  instead of .  is only called for attribute lookups that  raises an  on:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/howto/descriptor.html
