Natural Text
I'm working on a project where I need to change numerical values into alphabetical characters, currently, I have this:I would like to know if there's a way to reduce that to a shorter code line, thanks!
This should work, no dictionaries needed. If you want it even shorter:
You don't need any intermediate data structures; use the ASCII value (or Unicode code point in Python 3) of .If you didn't have a nice, implicit rule like this, you can use  to make a translation table, and  to apply that table to your input. acts as an identity function if the first argument does not appear in the translation table:
Use a dictionary:
In this case, a dictionary is probably what you're looking for.An advantage of a dictionary is that you may map several keys to the same value, for example if you wanted both  and  to map to , you could sayFurther, there are two reasonable ways of acquiring your value from a key (such as "2" to "a").The first is convenient because it throws a useful error and can be certain that the key is not in your dictionary, while the second has many other conveniences, such as being able to return itself if the key is missing.Classically, this type of table is used to look up a character set, such as ASCII where many characters may be stored in a compact way (how else would you express a letter to a computer than as a number?) and later interpreted by a program.A more modern form of this is called unicode, which can be used to describe a very great number of different characters beyond the "normal" Latin Alphabet.
if you use digits as string in dictionary then represent it as string in whole snippet.
You can abuse of  built-in and get:Without hard-coding a list for it.

Use thisor simpler


Answer URL
https://docs.python.org/3/library/functions.html#chr
