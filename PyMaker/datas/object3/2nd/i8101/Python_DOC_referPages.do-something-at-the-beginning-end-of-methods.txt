Natural Text
Is there an easy way to do something at the beginning and end of each function in a class? I've looked into , but I don't think that I can use it in this situation?Here's a simplified version of what I'm trying to do:
You can use decorators (if you don't know them you can refer to PEP-318):You might want to use  if you want the decorated method to "look like" the original method. The  is just syntactic sugar, you could also apply the decorator explicitly:In case you really want to apply it to all methods you can additionally use a class decorator:
As an alternative to the accepted answer, if you want this decoration to only be applicable for instance methods, you could use .This requires  and will not work for old-style classes in Python 2. was removed in Python 3.0, but returned in 3.2. Alternatively,  can be used.If you'd like to wrap class methods and static methods differently, you could inherit from a custom  :The above  is Python 3 syntax. In Python 2, it must be defined as:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/library/functions.html#callable
