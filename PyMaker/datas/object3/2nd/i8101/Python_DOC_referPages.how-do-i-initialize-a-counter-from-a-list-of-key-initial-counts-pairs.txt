Natural Text
If I have a sequence of  pairs, I can quickly initialize a dictionary like this:I would like to do the same with a  dictionary; but how? Both the constructor and the  method treat the ordered pairs as keys, not key-value pairs:The best I could manage was to use a temporary dictionary, which is ugly and needlessly circuitous:Is there a proper way to directly initialize a  from a list  of  pairs? My use case involves reading lots of saved counts from files (with unique keys).
I would just do a loop:You could also just call the parent  method:Lastly, there isn't anything wrong with your original solution:The expensive part of creating dictionaries or counters is hashing all of the keys and doing periodic resizes.  Once the dictionary is made, converting it to a Counter is very cheap about as fast as a dict.copy().  The hash values are reused and the final Counter hash table is pre-sized (no need for resizing).
From docs:Elements are counted from an iterable or initialized from another mapping (or counter)So it's a No, you need to convert it to mapping and then initialize . And Yes when you initialized with  it was the right move.UPDATEI agree that @RaymondHettinger code looks good, and actually it's fasterTested with Python 3.6.1 and IPython 6Initialization with :OutputUpdate with Output:
If your list of keys in the  pairs are already unique -- no duplicates -- you can use Raymond Hettinger's great solution.Beware though you only get the last value for any given key if there are duplicate keys:Same with :But Counters are most often used to count totals including of duplicates. If you want the sum of 'a' and 'b' entries, you need to loop over all the pairs:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
