Natural Text
How do I specific a function can take a list of numbers which can be ints or floats? I tried making a new type using Union like so:However, mypy didn't like this:Is there a Type that encompasses ints and floats?
The short answer to your question is you should use either TypeVars or Sequence -- using  would actually potentially introduce a bug into your code!In short, the problem is that Lists are invariant according to the PEP 484 type system (and in many other typesystems -- e.g. Java, C#...). You're attempting to use that list as if it were covariant instead. You can learn more about covariance and invariance here and here, but perhaps an example of why your code is potentially un-typesafe might be useful.Consider the following code:If this code were permitted to typecheck, we just broke our code! Any code that relies on  being of exactly type  would now break. Or more precisely, even though  is a legitimate subtype of , that doesn't mean that  is a subtype of , or vice versa.If we're ok with this behavior (we're ok with  deciding to inject arbitrary ints or floats into the input array), the fix is to manually annotate  with :That is, declare up-front that , despite only containing ints, is also meant to contain floats as well. This prevents us from incorrectly using the list after  is called, sidestepping the issue altogether.In some contexts, this may be what you want to do. For this method though, probably not.If we're not ok with this behavior, and want  to preserve whatever types were originally in the list, two solutions come to mind:The first is to use a covariant type instead of list -- for example, :It turns out Sequence is more or less like List, except that it's immutable (or more precisely, Sequence's API doesn't contain any way of letting you mutate the list). This lets us safely sidestep the bug we had up above.The second solution is to type your array more precisely, and insist that it must contain either all ints or all floats, disallowing a mixture of the two. We can do so using TypeVars with value restrictions:This will also prevent us from accidentally "mixing" types like we had up above.I would recommend using the second approach -- it's a bit more precise, and will prevent you from losing information about the exact type a list contains as you pass it through your quicksort function.
From PEP 484, which proposed type hints:Rather than requiring that users write import numbers and then use  etc., this PEP proposes a straightforward shortcut that is almost as effective: when an argument is annotated as having type , an argument of type  is acceptable...Don't bother with the s. Just stick to .Edit: Thanks to Michael for catching the difference between  and .


Answer URL
https://docs.python.org/3/library/typing.html#typing.Sequence
