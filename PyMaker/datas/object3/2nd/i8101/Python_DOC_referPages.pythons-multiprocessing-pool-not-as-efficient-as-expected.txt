Natural Text
I have a list of dictionaries and I use each dictionary to do some process on a graph. This processing is done within a function that returns nothing.There's no I/O operations nor networking, it's merely computational; basically, each dictionary represents a path in the graph and I need to update that path's edges weight.For the moment I'm not concerned with the graph's stored data consistency, I'm just trying to get the processing time improved.I've first did it serially, processing each item inside a for loop:Then I decided to give a try and parallelize it, as the list of dicts may contain up to tens of thousands dictionaries and I can get access on a computer with quite a lot CPU's. My first try was using the threading module but results were much worse than the serial version.Reading some questions here in SO and the network, I've came across several suggestions to use the multiprocessing.Pool class instead of threads due to the GIL.Results were better than just using threads, but still the serial version outperforms it (it takes approximately half of time on a quadcore PC!). Here's what I've tried for this parallel version:I feel I'm getting something wrong in this approach. Can the poor performance be related to the fact that the function passed to map is a "void" kind of function? Should I be using some other library or class?EDIT: I'm running this on Linux.
I feel I'm getting something wrong in this approach. The likely cause is that too much data is being passed in.Processes don't share memory, so any data you pass in has to be serialized on one side, transmitted over a channel (like a raw socket), and deserialized on the other.  If the time that takes is more than the time saved by the parallel processing, the result is a net loss.One technique for dealing with this is to have the graph in memory as a global variable before you create the pool (that lets the data be shared by copy-on-write).  Then just pass in an index (a single number) to the process and let it work on its own section of the graph.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
