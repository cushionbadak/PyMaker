Natural Text
i have created a tkinter gui that does some time consuming operations when clicking on some buttons. There are 2 main problems in my case that i think cause tkinter to crash in an unconssistent way.1) I want to log some output from the new threads into a scrolled text widget that runs on the main thread, which i Think is not a good idea. Right now i do that by having a TextHandler object send to the threads (see my code)2) In order to avoid logging from the new thread to the main thread, i want to know when the thread is done and then log from the main thread into the text widget but how does the main loop knows, when the thread is created in the function called from the Button press?So after pressing the button, the _startComputations function will be called, and there the thread will be created. I send the _logger object so that i can log to the ScrolledText widget while i am on the new thread. But most of the times i get crashes like "python.exe stopped working" or tcl_appendlimitedtoobj called with shared object.In the case i do not want to log from the new thread, how can the main loop know if the new thread is done, since the new thread is created withid the function called after the button press?Thank you
As I said in comments - your error occures because you passing your  widget alongside with instance of  to a separate thread. And some methods of  casts methods of your  widget (e.g. ), whom need to be casted from main thread.The simpliest solution to overcome your problem is a  object. You can't cast  methods (e.g. write something to a widget) from other threads, but you can populate a ! The main idea here - continiously check a  while anyone of a task's threads exists. To continiously check the  we need an  "loop" and  of tasks:Inside whom we trying to pull something from a :Of course you can start to listen a  right from the start of your application and, in general, your loop would look like this:But again, if you want more control over threads -  with them is a good idea! I think that now you got the pattern, so here's a complete example:


Answer URL
https://docs.python.org/3/library/asyncio-queue.html
https://docs.python.org/3/library/asyncio-queue.html
