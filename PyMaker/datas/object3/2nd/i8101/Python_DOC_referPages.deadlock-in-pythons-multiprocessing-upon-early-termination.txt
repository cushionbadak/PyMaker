Natural Text
I'm creating a  in Python and adding  instances to this .I would like to add a function call that is executed after every , which checks if a specific task has succeeded. If so, I would like to empty the  and terminate execution.My  class is:And my  is setup here:The function call  is a wrapper around  and returns .In the  class, I've written the conditional to check if a job succeeded, and tried emptying the remaining jobs in the  using a  loop, i.e. my  function looked like this:Although this works sometimes, it usually deadlocks and my only option is to . I am aware that  is unreliable, thus my question.Any advice on how I can implement such an early termination functionality?
You do not have a deadlock here. It is just linked to the behavior of , as the  method is blocking by default. Thus when you call  on an empty queue, the call stall, waiting for the next element to be ready. You can see that some of your workers will stall because when you use your loop  to empty it, you remove all the  sentinel and some of your workers will block on the empty , like in this code:To be notified when the queue is empty, you need to use non blocking call. You can for instance use , or use a timeout in . Both throw a  exception when the queue is empty. So you should replace your   loop by something like:If you do not want to be stuck at any point.For the synchronization part, I would recommend using a synchronization primitive such as  or an . This is cleaner than the Value are they are design for this purpose. Something like this should helpwith .Note that it is also possible to use a  to get avoid dealing with the queue and the workers. But as you need some synchronization primitive, it might be a bit more complicated to set up. Something like this should work:Note here that I use a Manager as you cannot pass  directly as arguments. You could also use the arguments  and  of the  to initiate global  event in each worker and avoid relying on the  but it is slightly more complicated.
This might not be the optimal solution, and any other suggestion is much appreciated, but I managed to solve the problem as such:Basically I'm creating a  and providing that to each . Once a job is marked as successful, this variable gets updated. Each  checks in  whether we have a success and if so, just iterates over the remaining jobs in the  until empty.The  call is required to account for potential syncing delays amongst the processes. This is certainly not the most efficient approach but it works.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
