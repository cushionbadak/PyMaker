Natural Text
I'm new to Python and XML and trying to parse through the file below in order to extract several elements. The issue is that some elements are empty (example customer xyz1 does not have any address information). I'm looping through the following elements (Id_Customer, Segment, Extrainfo, zipcode, street) in order to build up a list that I will then export to a .csv file.My code below generates the following output : [xyz1,abc1,info2,zzwy,c2 ..] while I would like elements not found to be input in the list as "empty" so that my list would contain : [xyz1,abc1,info2,empty,empty, zzwy,c2 ..]Here is a sample of my code : I would very much appreciate some help. (I can only use standard python library.)
Have a look at method findtext of xml.etree (https://docs.python.org/3.6/library/xml.etree.elementtree.html), default value.I guess something like the following might work (not tested), with each customer in a separate list (as line in csv file), that then gets inserted into the general list_prn list. Of course, you would have to iterate over the lists when building the csv file.If you really wanted all the elements values in one list, you could skip the creation of cust list and insert the values directly into list_prn.It all suposes that all the subelements of Customer are there only once.
Your main problem is that you're literally just plopping data from the XML into the CSV in pretty much the same state you found it. The elements you are referring to as being "empty" are not empty, they are not present in the XML.I can think of two approaches you might use to make this work better. The first would be to change your XML such that every  element contains all the elements in the same order, even if the elements are completely empty. In other words your XML might look like this:If you want you could add a condition in your Python code that would replace the empty string () with the word "empty" since you indicated that's what you wanted it to say.The other approach would make for a lot more complicated Python code but is honestly probably the better approach. That would be to use either a class or a dict to sort the data: one dict or object per  tag. With what you're doing I'd say creating a class might be overkill, so a dict should be enough. (Using a defaultdict rather than an ordinary dict would allow you to automatically supply the word "empty" when no value was found, so I'd look into that.)Basically the flow of the program would go like this:Create an empty list to store your dicts. Loop through the  elements in the XML tree. For each customer:Create a new dict and add it to the list.  or , then Loop through that element's child elements, and for each one populate the the dict with it's info. Something like  may be what you're looking for.Create a list of all the dict keys you want to grab from, in the same order as the headers in your CSV. For example Loop through the list you created in Steps 1 and 2. e.g.  For each iteration:Loop through the list you created in Step 3. e.g. For each key, get the corresponding value from the dict, and add that value to your CSV output. Assuming you have an open file object called "csv", something like this would work:  (Of course you'll want to write the comma to the file as well at this point, unless it's the last iteration of the  loop, then write a newline instead. You can test that with )


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
