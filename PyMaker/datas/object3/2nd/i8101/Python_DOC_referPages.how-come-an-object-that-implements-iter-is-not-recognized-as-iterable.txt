Natural Text
Let's say you work with a wrapper object:This object implements , because it passes any call to it to its member , which implements it. Case in point:According to the documentation (https://docs.python.org/3/library/stdtypes.html#iterator-types), IterOrNotIter should thus be iterable.However, the Python interpreter does not recognize an  object as actually being iterable:Whereas this works:I don't understand why.
Basically because your class just doesn't have a real  method:So it doesn't qualify as iterator because the actual check for  checks for the existence instead of assuming it's implemented. So workarounds with  or  (unfortunatly) don't work.This is actually mentioned in the documentation for :NoteThis method may still be bypassed when looking up special methods as the result of implicit invocation via language syntax or built-in functions. See Special method lookup. The latter section also explains the why:Bypassing the  machinery in this fashion provides significant scope for speed optimisations within the interpreter, at the cost of some flexibility in the handling of special methods (the special method must be set on the class object itself in order to be consistently invoked by the interpreter).Emphasis mine.


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
