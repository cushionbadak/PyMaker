Natural Text
In my program, I wanted a variable global only under some circumstances. Say it looks like this:I was expecting the result to be:However it turned out to be:So, I was thinking, "Okay maybe the Python compiler makes the variable global whenever it sees the 'global' keyword no matter where it is located". Is this how Python works with global vars? Am I misunderstanding?
Yes, you're understanding things correctly. The  statement isn't something that's evaluated at runtime. It's really a directive to the parser that essentially tells it to treat all listed identifiers ( here) as referring to the global scope. From the docs on the  statement:The global statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals.It then continues to state how  is really is a directive:Programmerâ€™s note:  is a directive to the parser.Using it conditionally doesn't make any difference: its presence has already been detected in the parsing stage and, as a result, the byte-code generated for grabbing the names has already been set to look in the global scope (with ).This is why, if you  a function containing a  statement, you won't see any relevant byte-code for . Using a silly function:Nothing is generated for  because the information it provides has already been used!


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
