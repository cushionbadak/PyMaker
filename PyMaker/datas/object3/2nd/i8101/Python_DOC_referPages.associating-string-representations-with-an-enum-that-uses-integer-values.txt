Natural Text
I'm trying to create an enum that has integer values, but which can also return a display-friendly string for each value. I was thinking that I could just define a dict mapping values to strings and then implement  and a static constructor with a string argument, but there's a problem with that...(Under different circumstances I could have just made the underlying data type for this Enum a string rather than an integer, but this is being used as a mapping for an enum database table, so both the integer value and the string are meaningful, the former being a primary key.)When converting to string, I get the following error:It seems that the issue is that an Enum will use all class variables as the enum values, which causes them to return objects of the Enum type, rather than their underlying type.A few workarounds I can think of include:Referring to the dict as . (However then  becomes a valid enum value!)Making the dict a module variable instead of a class variable.Duplicating the dict (possibly also breaking it down into a series of  statements) in the  and  functions.Rather than make the dict a class variable, define a static method  to return the dict, so it doesn't become an enum value.Note that the initial code above and workaround  uses the underlying integer values as the dict keys. The other options all require that the dict (or  tests) are defined somewhere other than directly in the class itself, and so it must qualify these values with the class name. So you could only use, e.g.,  to get an enum object, or  to get the underlying integer value, but not just . If using the underlying integer value as the dict key, then you must also use it to look up the dict, indexing it with, e.g.,  rather than just .So, the question is, what is the best or most Pythonic way to implement a string mapping for an Enum, while preserving an underlying integer value?
This can be done with the stdlib , but is much easier with 1:If you want to be able to do look-ups via the string value then implement the new class method   (just  in the stdlib):1 Disclosure:  I am the author of the Python stdlib , the  backport, and the Advanced Enumeration ()  library.
Maybe I am missing the point here, but if you define then in Python 3.6 you can do which I think is what you want.
Another solution I came up with is, since both the integers and the strings are meaningful, was to make the Enum values  tuples, as follows.However, this means that a  object's repr will display the tuple rather than just the int, and the complete tuple must be used to create  objects, not just the int. I.e. You can do , but not .An even more complex workaround for that involves subclassing 's metaclass to implement a custom . (At least overriding  is much simpler!)One difference between this implementation and a plain int Enum is that values with the same integer value but a different string (e.g.  and ) would not evaluate as the same  object, whereas with a plain int Enum,  would evaluate to .
good question However, this means that a Fingers object's repr will display the tuple rather than just the int, and the complete tuple must be used to create Fingers objects, not just the int. I.e. You can do but not 
I had same issue where I wanted display strings for a GUI ComboBox (in PyGTK).I dun't know about the Pythonicity (is that even a word?) of the solution but I used this:Using them from your code:


Answer URL
https://docs.python.org/3/library/enum.html
