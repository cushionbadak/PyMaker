Natural Text
What's the best way to find the count of occurrences of strings from a list in a target string? Specifically, I have a list :I'd like to optimize to minimize speed and memory usage, if that makes a difference. In terms of size, I would expect that  may end up containing several hundred substrings.
This works!The string gets split into tokens, then each token gets transformed into a 1 if it is in the list, a 0 otherwise. The sum function, at last, sums those values.EDIT: also:
Another way using collelctions.Counter:
This Python3 should work:
You could use a variable to store a running count is you iterate through the list like so:
Another solution:
Combo of  and :This will not count overlapping occurrences of the same pattern.
You could use a Trie to convert your substrings to a regex pattern (e.g. ) and parse your :The required library is here : It should be much faster than parsing the whole  for each , but it might not return the desired result for overlapping substrings. It returns  for  and .A related question was : "Speed up millions of regex replacements in Python 3" : here's an answer with sets and one with a trie regex.
I am not sure this is the most pythonic way, but you can try it:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
