Natural Text
I have a app that uses win32evtlog to get and display different events and I would like to limit the display to events of a specific level but win32evtlog doesn't return this.  It seems that you can convert an event to XML and then pull this info but I can't work out how you get the event from a loop to XML.I can get up to the following and use it to display data the LogObject has such as LogObject.TimeGeneratedI tried the convert using This unfortunately returnsSo I know I need to get some sort of handle object that I can use to point the EvtRender at the correct event but can't work out how I do that.This question is quite similar to How retrieve from Python win32evtlog rest of info? but the solution there didn't answer the critical bit of how we convert the object to XML.--== Edited with information about the XML for CristiFati ==--Below is an example of an Application event where the event message reads:-The XML as per event viewer is as below
ReadEventLog returns PyEventLogRecords (wrapper over [MS.Docs]: _EVENTLOGRECORD structure), while EvtRender expects (you need to work with) PyHANDLEs (PyEVT_HANDLEs (wrapper over EVT_HANDLE ([MS.Docs]: Windows Event Log Data Types) to be more precise)).So, for getting XML data, you need to use the functions family that works with this type: e.g. EvtQuery, EvtNext:Notes:The 2 lists should have the same length. The nth entry in each of them should reference the same event (as long as both functions are called with same value for backwards argument (read below))get_events_xmls:Returns a list of XML blobs associated to the eventsThe error handling is not the best, you could wrap all API calls in  /  clauses (I didn't run into errors, so I'm not sure what are the situations where exception could be raised)You can play a little bit with [MS.Docs]: EvtNext function's arguments (Timeout and EventsSize for performance fine tuning; for me, ~20k events were processed in a matter of <10 seconds - out of which text printing and conversions took the most)In Python 3, the XMLs are bytes ([Python 3]: class bytes([source[, encoding[, errors]]])) rather than normal strings (I had to encode them because some contain some non-ASCII chars, and attempting to print them would raise UnicodeEncodeError)Event filtering is possible, check [MS.Docs]: EvtQuery function's args (Flags and Query)Note the backwards argument which allows traversing the events in reversed (chronological) order (default set to True).get_record_data:It's just a convenience function, it converts a PyEventLogRecord object into a Python dictionaryThe conversion is based on the fact that fields that we care about start with a capital letter (EventID


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes
