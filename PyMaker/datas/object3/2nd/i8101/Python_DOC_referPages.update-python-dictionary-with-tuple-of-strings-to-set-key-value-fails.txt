Natural Text
 saysUpdate the dictionary with the key/value pairs from other, overwriting existing keys. Return None.update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two). If keyword arguments are specified, the dictionary is then updated with those key/value pairs: d.update(red=1, blue=2).But So why does Python apparently try to use the first string of the tuple?
The immediate solution is this: the only argument  is optional and an iterable of tuples (or other iterables of length two).No argument (it's optional, for when you don't need it :-):List with the tuple (don't confuse this with the square brackets enclosing optional arguments!):According to the Python glossary on iterables, a tuple (as all sequence types) is also an iterable, however this fails:The Python documentation on  again solves this mystery:Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity.I.e.  is not a tuple at all, but  is:So this works:but this doesn't because of said syntactic ambiguity (comma is function argument separator).


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.update
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/library/stdtypes.html#tuple
