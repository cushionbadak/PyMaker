Natural Text
From What’s New In Python 3.7 we can see that there is new . It says Return the IEEE 754-style remainder of x with respect to y. For finite x and finite nonzero y, this is the difference , where n is the closest integer to the exact value of the quotient . If  is exactly halfway between two consecutive integers, the nearest even integer is used for . The remainder  thus always satisfies .Special cases follow IEEE 754: in particular,  is x for any finite x, and  and  raise  for any non-NaN x. If the result of the remainder operation is zero, that zero will have the same sign as x.On platforms using IEEE 754 binary floating-point, the result of this operation is always exactly representable: no rounding error is introduced.But we also remember that there is  symbol which is remainder of We also see that there is a note to operator:Not for complex numbers. Instead convert to floats using  if appropriate.I haven't tried to run Python 3.7 if it's even possible.But i tried So difference would be, instead of  and  we would get  as it says in docs.So the question is what is the difference between  and ? Would  also work with complex numbers( lacks from it)? What is the main advantage?Here is the source of  from official CPython github repo.
Return the IEEE 754-style remainder of x with respect to y. For finite  x and finite nonzero y, this is the difference , where n is the  closest integer to the exact value of the quotient . If  is  exactly halfway between two consecutive integers, the nearest even  integer is used for n. The remainder  thus always  satisfies .for the modulo this is  where  is the , so  instead of  for the remainder.so
Thanks to @MaartenFabré, I wasn't being attentive to details:  is the difference , where  is the closest integer to the exact value of the quotient I built Python 3.7:And here are differences:Zero as divisor:Basic numbers, where Complex numbers:Infinity()


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
