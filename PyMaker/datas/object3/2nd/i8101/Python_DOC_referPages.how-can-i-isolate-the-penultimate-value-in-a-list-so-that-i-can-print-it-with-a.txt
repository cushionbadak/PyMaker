Natural Text
(this is Python 3)I'm trying to write a simple function to return the average of a list of numbers. I'm using a  loop to print out the values in the list before printing out the average. I'm having problems setting the second-to-last value in the list to print out in a different way than the other values. I want a comma between all the list values up until the second-to-last value, where I just want a space, and a fullstop after the last value. If I define my list asThen I would like to return a string:Unfortunately what I've managed to get is this:In other words I haven't been able to differentiate the second-to-last list value from the others (I haven't been able to remove the comma after 5); although I have been able to differentiate the last value in the list (i.e. 7).To separate the last and second-to-last values in the list (i.e. 5 and 7), I define them as variables:Then I use the  and  statements to exclude those two values. The code that I have so far is this:And like I mentioned before, calling average1(list1) returns I would have thought that the following two lines would mean that the list value 5 (i.e. penultElem, i.e. the second-to-last list value) doesn't get printed with a comma on the end, but that doesn't seem to be the case. This is what I thought I'd add, if the penultElem wasn't being printed... that would print '5' without a comma after it.Am I missing something really obvious here? Apologies if I am, I'm very new to this. Thanks for any help!
This statement can't apply to if i == penultElem because that would result in a trailing comma:update that section to:Here's the full updated code:this prints:
There is a much easier way. You can 'unpack' your list in place. This will work:-Although it's not so good if you have a varying number of elements in your list. I just wanted to let you see this method.
I would recommend this way:The main improvement here is using a single  block to more efficiently filter for the result you want. If you think in terms of which characters follow the numbers in the list: some end with  one ends with , and the other ends with  So this is a good reason to use a single  block to handle these scenarios.You could also make use of  to return elements from the end of the list twice:
Here's a simple way which uses  to handle the comma part and then just adds on the 'and' part afterwards. The trick is to do the string conversion first so that you can use .


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
