Natural Text
I'm looking for a Python solution that will allow me to save the output of a command in a file without hiding it from the console.FYI: I'm asking about tee (as the Unix command line utility) and not the function with the same name from Python intertools module.DetailsPython solution (not calling , it is not available under Windows)I do not need to provide any input to stdin for called processI have no control over the called program. All I know is that it will output something to stdout and stderr and return with an exit code.To work when calling external programs (subprocess)To work for both  and Being able to differentiate between stdout and stderr because I may want to display only one of the to the console or I could try to output stderr using a different color - this means that  will not work.Live output (progressive) - the process can run for a long time, and I'm not able to wait for it to finish.Python 3 compatible code (important)ReferencesHere are some incomplete solutions I found so far:http://devlishgenius.blogspot.com/2008/10/logging-in-real-time-in-python.html (mkfifo works only on Unix)http://blog.kagesenshi.org/2008/02/teeing-python-subprocesspopen-output.html (doesn't work at all)Diagram http://blog.i18n.ro/wp-content/uploads/2010/06/Drawing_tee_py.pngCurrent code (second try)Real outputExpected output was to have the lines ordered. Remark, modifying the Popen to use only one PIPE is not allowed because in the real life I will want to do different things with stderr and stdout.Also even in the second case I was not able to obtain real-time like out, in fact all the results were received when the process finished. By default, Popen should use no buffers (bufsize=0).
I see that this is a rather old post but just in case someone is still searching for a way to do this:
Finally I had to implement  command in Python myself. You can get it from here http://github.com/pycontribs/tendo/blob/master/tendo/tee.pyCurrently it does allow you to do things like:The only current limitation is that it is not able to differentiate between  and , meaning that it will merge both of them.
This is a straightforward port of  to Python.I'm running on Linux right now but this ought to work on most platforms.Now for the  part, I don't know how you want to 'wire' the subprocess's ,  and  to your , ,  and file sinks, but I know you can do this:Now you can access ,  and  like normal files, enabling the above "solution" to work. If you want to get the , you'll need to make an extra call to .Be careful with writing to : if the process has exited when you do that, an error may be rised (on Linux, I get ).
If you don't want to interact with the process you can use the subprocess module just fine.Example:tester.pytesting.pyIn your situation you can simply write stdout/stderr to a file first. You can send arguments to your process with communicate as well, though I wasn't able to figure out how to continually interact with the subprocess.
There are subtle problems/bugs in python related to subprocess.PIPE:http://bugs.python.org/issue1652Apparently this was fixed in python3+, but not in python 2.7 and older. For that you need to use:code.google.com/p/python-subprocess32/
Try this :
I wrote a thing that wraps shell commands in Python. Key advantages:This util captures stdout/stderr alwaysThis util provides an option to echo stdout/stderr to stdout/stderr for the processWhen echoing stdout/stderr the out/err there is no delayKey disadvantage:Only works on bash/unixsource: https://gist.github.com/AndrewHoos/9f03c74988469b517a7a 


Answer URL
https://docs.python.org/3/library/io.html#io.TextIOBase.readline
