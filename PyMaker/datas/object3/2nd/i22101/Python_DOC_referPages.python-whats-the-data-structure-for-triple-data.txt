Natural Text
I've got a set of data that has three attributes, say A, B, and C, where A is kind of the index (i.e., A is used to look up the other two attributes.)  What would be the best data structure for such data? I used two dictionaries, with A as the index of each. However, there's key errors when the query to the data doesn't match any instance of A.

Could you use a dictionary with A as the key, and the item in the dictionary as a 2-item tuple or list? If you're working with any of that data in a consistent way, you could also consider storing a class that has 2 properties in the dictionary.
As an alternative to a dict of tuples, you could use an object to store B and C:While it's a tiny bit wasteful, you could store A in the object too so that each instance represents a complete triple.  Then you can pass those around more effectively than the sample above.
I would suggest using a dictionary with A keyed to (B, C), so .Your problem of nonexistent keys resulting in errors can be solved in the following manner (thanks to intuited for the has_key function I forgot about):Another option is the to do it in a  block, but I tend to agree with intuited that if keys will be missing at a rate that isn't completely unusual,  will show better performance and (arguably) make better conceptual sense.


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
