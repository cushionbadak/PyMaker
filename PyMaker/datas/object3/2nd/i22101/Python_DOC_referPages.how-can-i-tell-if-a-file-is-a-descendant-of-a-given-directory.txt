Natural Text
On the surface, this is pretty simple, and I could implement it myself easily.  Just successively call dirname() to go up each level in the file's path and check each one to see if it's the directory we're checking for.But symlinks throw the whole thing into chaos.  Any directory along the path of either the file or directory being checked could be a symlink, and any symlink could have an arbitrary chain of symlinks to other symlinks.  At this point my brain melts and I'm not sure what to do.  I've tried writing the code to handle these special cases, but it soon gets too complicated and I assume I'm doing it wrong.  Is there a reasonably elegant way to do this?I'm using Python, so any mention of a library that does this would be cool.  Otherwise, this is a pretty language-neutral problem.
Use  and : will expand any symlinks as well as  in the filename.  is a bit fickle -- it doesn't really test for paths, just plain string prefixes, so you should make sure your directory ends in a directory separator. If you don't, it will claim  is also in 
Python 3.5 has the useful function :Return the longest common sub-path of each pathname in the sequence paths. Raise ValueError if paths contains both absolute and relative pathnames, or if paths is empty. Unlike , this returns a valid path.So to check if a file is a descendant of a directory, you could do this:Unlike , you don't need to worry if the inputs have trailing slashes or not. The return value of  always lacks a trailing slash.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.realpath
https://docs.python.org/3/library/os.path.html#os.path.commonprefix
https://docs.python.org/3/library/os.path.html#os.path.commonpath
