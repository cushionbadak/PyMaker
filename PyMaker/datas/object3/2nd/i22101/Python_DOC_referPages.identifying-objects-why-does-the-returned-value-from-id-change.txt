Natural Text
id(object)This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Can you explain this output? Why does 's id change?
Because integers are immutable, each integer value is a distinct object with a unique id. The integer  has a different id from . Doing  doesn't change the value of an existing integer object, rather it changes  to point to the object for .Check out what happens when we independently create a new variable  and assign it the value :Note that it is not always the case that every integer has one and only one corresponding object. This only happens for small integers that Python decides to cache. It does not happen for large integers:See https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong:The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.
This is why , and .Values between -5 and 256 are preallocated. 
The same  for different variables is a product of how Python creates variables.  is a hash of the the location of an object in memory. Python variables are references to an object, not new objects. If several variables reference the same object, they have the same `id.
In CPython,  is generally derived from the 's pointer value, that is its location in memory.
Python caches immutable objects(read integers and tuples..) - which is why they are immutableand saves memory if u reference the same immutable in manyplaces. So  integers, empty tuples and such are actuallycached in Python runtime, so you keep getting back the same objectand hence the same id.Try this for the list, you don't get the same id.
These are primitive types, so I'm guessing each value gets its own ID.  Try creating a true object and I think you'll see the functionality you expect.If you need an id for a primitive, you could create an object with just one member of that type.
's id changes because the object named by  changes. First you initialize  to 10, so when you call  you get the id of . Then you set  to 11, so after that when you call  you get the id of .


Answer URL
https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong
