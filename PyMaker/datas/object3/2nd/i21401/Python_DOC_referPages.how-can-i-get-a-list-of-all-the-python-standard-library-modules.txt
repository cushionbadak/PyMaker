Natural Text
I want something like  except for the standard library. Other things that didn't work: - only shows modules that have already been loaded - a path that would include non-standard library modules EDIT: and doesn't seem to work inside a virtualenv.The reason I want this list is so that I can pass it to the  or  command line options of  http://docs.python.org/library/trace.htmlSo ultimately, I want to know how to ignore all the standard library modules when using  or .EDIT: I want it to work inside a virtualenv. http://pypi.python.org/pypi/virtualenvEDIT2: I want it to work for all environments (i.e. across operating systems, inside and outside of a virtualenv.)
Why not work out what's part of the standard library yourself?givesEdit: You'll probably want to add a check to avoid  if you need to avoid non-standard library modules.
If anyone's still reading this in 2015, I came across the same issue, and didn't like any of the existing solutions. So, I brute forced it by writing some code to scrape the TOC of the Standard Library page in the official Python docs. I also built a simple API for getting a list of standard libraries (for Python version 2.6, 2.7, 3.2, 3.3, and 3.4).The package is here, and its usage is fairly simple:
Take a look at this,https://docs.python.org/3/py-modindex.htmlThey made an index page for the standard modules.
Here's an improvement on Caspar's answer, which is not cross-platform, and misses out top-level modules (e.g. ), dynamically loaded modules (e.g. ), and core built-in modules (e.g. ):This is still not perfect because it will miss things like  which is defined from within  in a platform-dependent manner via code such as , but it's probably as good as you'll get, bearing in mind that Python is a dynamic language and you can't ever really know which modules are defined until they're actually defined at runtime.
Here's a 2014 answer to a 2011 question - The author of isort, a tool which cleans up imports, had to grapple this same problem in order to satisfy the pep8 requirement that core library imports should be ordered before third party imports.  I have been using this tool and it seems to be working well.  You can use the method  in the file , since it's open source I hope the author would not mind me reproducing the logic here:Obviously you need to use this method in the context of the class and the settings file.  That is basically a fallback on a static list of known core lib imports.  ---snip--- I was already an hour into writing this tool for myself before I stumbled the isort module, so I hope this can also help somebody else to avoid re-inventing the wheel!
This will get you close:Another possibility for the  option:
I would consult the standard library reference in the official documentation, which goes through the whole library with a section for each module. :)


Answer URL
https://docs.python.org/3/py-modindex.html
