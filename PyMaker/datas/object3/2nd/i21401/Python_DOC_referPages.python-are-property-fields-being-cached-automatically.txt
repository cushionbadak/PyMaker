Natural Text
My question is are the following two pieces of code run the same by the interpreter:and the much simpler:I.e., is the interpreter smart enough to cache the property ?My assumption is that  does not change - finding it is hard, but once you find it once there is no reason to find it again. 
No, the getter will be called every time you access the property.
No you need to add a memoize decorator:
Properties do not automatically cache their return values. The getter (and setters) are intended to be called each time the property is accessed. However, Denis Otkidach has written a wonderful cached attribute decorator (published in the Python Cookbook, 2nd edition and also originally on ActiveState under the PSF license) for just this purpose:Here is an example demonstrating its use:
Python 3.2 onwards offers a built-in decorator that you can use to create a LRU cache:Alternatively, if you're using Flask / Werkzeug, there's the  decorator.For Django, try 
The decorator from Denis Otkidach mentioned in @unutbu's answer was published in O'Reilly's Python Cookbook. Unfortunately O'Reilly doesn't specify any license for code examples â€“ just as informal permission to reuse the code.If you need a cached property decorator with a liberal license, you can use Ken Seehof's  from ActiveState code recipes. It's explicitly published under the MIT license.
I've had to look it up, since I had this same question.The functools package from the standard library will be getting a cached_property decorator as well. Unfortunately, it's only available from Python 3.8 (as of time of this post, it's 3.8a0). The alternative to waiting is to use a custom one, such as this one as mentioned by 0xc0de) or Django's, for now, then switch later:
Note: Adding for the sake of completeness of available options.No,  is not cached by default. However there are several options to get that behaviour, I would like to add one more to that:https://github.com/pydanny/cached-property


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
