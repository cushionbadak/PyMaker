Natural Text
Does a Python equivalent to the Ruby  operator ("set the variable if the variable is not set") exist?Example in Ruby :
No, the replacement is:However, wanting to use this construct is a sign of overly complicated code flow. Usually, you'd do the following:and never be unsure whether  is set or not. If it's one of many options that can either be set or not, use a dictionary and its  method which allows a default value.
I'm surprised no one offered this answer. It's not as "built-in" as Ruby's  but it's basically equivalent and still a one-liner:Of course,  is just a dictionary, so you can do:
I would use Much shorter than all of your alternatives suggested here, and straight to the point. Read, "set x to 'default' if x is not set otherwise keep it as x." If you need , , , or  to be valid values however, you will need to change this behavior, for instance: This sort of thing is also just begging to be turned into a function you can use everywhere easily: at which point, you can use it as:Finally, if you are really missing your Ruby infix notation, you could overload  (or something similar) by following this guy's hack: http://code.activestate.com/recipes/384122-infix-operators/
No, not knowing which variables are defined is a bug, not a feature in Python. Use dicts instead:
(can't comment or I would just do that) I believe the suggestion to check locals above is not quite right.  It should be:to be correct in all contexts.  However, despite its upvotes, I don't think even that is a good analog to the Ruby operator.  Since the Ruby operator allows more than just a simple name on the left:The exception method is probably closest analog.
I usually do this the following way:
There is conditional assignment in Python 2.5 and later - the syntax is not very obvious hence it's easy to miss. Here's how you do it:For further reference, check out the Python 2.5 docs.
I think what you are looking for, if you are looking for something in a dictionary, is the  method:*** KeyError: 'q2'    (Pdb)The important thing to note in my example is that the  method changes the dictionary if and only if the key that the  method refers to is not present.
I am not sure I understand the question properly here ... Trying to "read" the value of an "undefined" variable name will trigger a . (see here, that Python has "names", not variables...).== EDIT ==As pointed out in the comments by delnan, the code below is not robust and will break in numerous situations ...Nevertheless, if your variable "exists", but has some sort of dummy value, like , the following would work :(see this paragraph about Truth Values)
No, there is no nonsense like that. Something we have not missed in Python for 20 years.


Answer URL
https://docs.python.org/3/library/functions.html#locals
