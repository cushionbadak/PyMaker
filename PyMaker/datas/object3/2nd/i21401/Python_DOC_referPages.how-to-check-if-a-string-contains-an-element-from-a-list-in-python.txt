Natural Text
I have something like this:I am wondering what would be the more elegant way to do this in python (without using the for loop)? I was thinking of something like this (like from c/c++), but it didn't work:Edit: I'm kinda forced to explain how is this different from the question below which is marked as potential duplicate (so it doesn't get closed I guess). The difference is, I wanted to check if a string is part of some list of strings whereas the other question is checking whether a string from a list of strings is a substring of another string. Similar, but not quite the same thing and semantics matter when you're looking for an answer online imho. These two questions are actually looking to solve the opposite problem of one another. The solution for both turns out to be the same though. 
Use a generator together with , which short-circuits on the first True:EDIT: I see this answer has been accepted by OP. Though my solution may be "good enough" solution to his particular problem, and is a good general way to check if any strings in a list are found in another string, keep in mind that this is all that this solution does. It does not care WHERE the string is found e.g. in the ending of the string. If this is important, as is often the case with urls, you should look to the answer of @Wladimir Palant, or you risk getting false positives.

It is better to parse the URL properly - this way you can handle  and  correctly.
Check if it matches this regex:Note: if you extensions are not at the end of the url, remove the  characters, but it does weaken it slightly
Use list comprehensions if you want a single line solution. The following code returns a list containing the url_string when it has the extensions .doc, .pdf and .xls or returns empty list when it doesn't contain the extension. NOTE: This is only to check if it contains or not and is not useful when one wants to extract the exact word matching the extensions. 
This is a variant of the list comprehension answer given by @psun.By switching the output value, you can actually extract the matching pattern from the list comprehension (something not possible with the  approach by @Lauritz-v-Thaulow)['.doc']`You can furthermore insert a regular expression if you want to collect additional information once the matched pattern is known (this could be useful when the list of allowed patterns is too long to write into a single regex pattern)


Answer URL
https://docs.python.org/3/library/functions.html#any
