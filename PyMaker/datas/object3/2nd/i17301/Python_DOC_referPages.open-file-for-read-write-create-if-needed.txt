Natural Text
What is the most elegant way to open a file such thatthe file gets created if it does not exist,the file won't be truncated if it does exist andit is possible to write any part of the file (after seeking), not just the end?As far as I can tell, the  builtin doesn't seem up to the task: it provides various modes, but every one I tried fails to satisfy at least one of my requirements: fails if the file does not exist. will truncate the file, losing any existing content. will force all writes to go to the end of the file, at least on my OS X.Checking for the existence prior to opening the file feels bad since it leaves room for race conditions. The same holds for retrying the open with a different mode from within an exception handler. I hope there is a better way.
You need to use  to open it at a lower level in the OS than  allows. In particular, passing  as  should do what you want. See the  man page for details. You can then pass the returned FD to  to get a file object from it.
If you are using Python 3.3+, you can use  mode (exclusive creation mode):It raises  if the file already exists.
I might be wrong, but I don't suppose there is going to be a race condition if there are not multiple threads, and the  and  blocks are the same thread? (Is it actually possible to do multiple threads?)This should be up to the task.
I was having a similar problem when trying to dump items to a file as a dictionary. However, I imported json, http://docs.python.org/2/library/json.html check this out, maybe very helpful. Remember to import json. This will provide the foundation to dump and load data whenever you need to. In this case I am dumping and loading information into an empty dictionary. The try and except method is very useful when you want to use an empty dictionary. I find "r+" most useful since it will read and write the file. 


Answer URL
