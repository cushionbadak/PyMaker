Natural Text
Under the hood, any Python object is implemented as a C struct with some fields. A 16 bytes header containing the reference count and a pointer to the object's type is always present on this struct. This is at least the case for 64bit stock CPython 3.x, for which my question is restricted.For academic purposes and the fun of it, I'm in search of a function  which prints out this underlying  of the passed object .In terms of implementation, the simplest Python object is perhaps the , which is just a C  appended to the previously mentioned header. In this simple case I've been able to write my own such function using the  and  modules:In essence, this function reads the underlying memory of the object and builds a copy of the C  as a Python , effectively re-representing a piece of Python in itself. The code should run on Python 3.5 and up. It printsFloat(refcount=5, typeptr=140429307606720, value=1.23)   The typeptr should be equal to 140429307606720Now the refcount should have increased by 1:  Float(refcount=6, typeptr=140429307606720, value=1.23)The above  function works great for s, and the same method could be extended to (I suppose?) all other types. Does any library out there (or perhaps even the Python stadard library) contain such functionality?
The problem with trying to do this automatically is that there's no general way to get the layout of a Python type. Heck, there isn't even a general way to tell how big the structure is. Also, types created with the  statement don't quite use s for their instances, though they mostly work like structs.You'd need to provide struct definitions yourself for any type you want to work with, and you'd still need custom handling for types like  and  with particularly weird representations.


Answer URL
https://docs.python.org/3/c-api/structures.html#c.PyObject
