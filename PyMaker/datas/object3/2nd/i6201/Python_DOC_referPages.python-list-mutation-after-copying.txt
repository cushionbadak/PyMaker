Natural Text
In the top snippet of code, I've made a copy of a list and modified it. I then set the original to the copy and then it works. What confuses me is why doing this process outside of a function works but if I were to do it inside a function (the 2nd snippet of code), it fails?For reference, the code returns:EDIT: I know that calling  works. I just want to know what makes this different from what I showed above all in memory? 
In ,  starts out pointing at the same object as , but later you make it point at . is not modified. It is still pointing at the original object.When you do it outside of the function you change  to point to the new object before printing it.
I think that using the built-in function  to show the object ID will help here. If the ID of two variable names gives the same result then they refer to the same object; otherwise the objects are different.In the above, we see that after , the name  refers to identically the same object in memory as , which means it no longer refers to the list given as the function argument. This is why the mutation you expect does not work - you are modifying an entirely different object.
That's because you sets new value for  which is local variable of  function.The simplest solution is changing value of first element of list passed as argument:Otherwise you can write function which changes value of global variable called 


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference
