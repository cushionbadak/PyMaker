Natural Text
I have two lists:I want to merge those two lists into a dictionary like:     A solution might be using  loop, which does not look good and elegant, like:Though this does work, itâ€™s an inefficient and would take too much time when the list is extremely large. I want to know more elegant ways to construct such a dictionary? Thanks in advance!
You can use a defaultdict:Output:
Alternative  solution:The output:
No fancy structures, just a plain ol' dictionary.
You can do this with a dict comprehension:Oddly enough, you cannot seem to make this work using  as this will set the value of all keys equal to the same empty array:
A  solution:Setup:Solution:Walkthrough:create a  from the input lists,  is called  and  called  creates groups based on  gets the values for each group and cast it to  converts the resulting  to Timing:To get an idea of timings for a test set of 1,000,000 values in 100,000 groups:But to be honest it is likely less efficient than  suggested by @RomanPerekhrest, or  suggested by @Ajax1234.
Maybe I miss the point, but at least I will try to help. If you have to lists and want to put them in the dict do the followinghope it helps
Or do dictionary comprehension beforehand, then since all keys are there with values of empty lists, iterate trough the  of the two lists, then add the second list's value to the dictionary's key naming first list's value, no need for try-except clause (or if statements), to see if the key exists or not, because of the beforehand dictionary comprehension:Now:Is:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/itertools.html#itertools.groupby
