Natural Text
While solving a problem on matrix rotation I came across a solution .The question asks to rotate the matrix by 90 degrees in place.Can someone help me in breaking down this list comprehension to regular for-loop and understand the flow of the program
You have a nested list comprehension, an outer list comprehension creating a new list for every iteration.You can deconstruct any list comprehension by reading the  and  components from left to right as nested blocks. Everything before the first  is the expression that produces the elements of the list.So the basic structure is:which can always be converted to a regular loop with:I added in  as an explicit name for the list that is produced; note that the result of  is appended to it each iteration.Your example breaks down to two list comprehensions. The outer loop is this:So the  is the expression here! Writing this out that becomes:The inner list comprehension is straightforward:If you put these two together you get:Now you can see that the  target from the outer loop, is used each time in the inner loop. Because  loops over the number of columns, but  is a row, this produces first a list with all the values from the very first column, then the second column, and then the third, etc.The line before the list comprehension reversed the rows:This takes all rows, and goes from the last to the first (stepping backwards, with a  step size). This makes it so that the list comprehension loops over the rows in reverse order.The code can be cleaned up and improved a little. The  variable is never used, for example, and we can use the  function to loop over a list in reverse order without creating a copy:Another method of transposing a matrix (moving columns to rows) is using the  function with all the rows applied as separate arguments, with the  call syntax:This still uses a list comprehension, because  produces an iterable object, not a list, and each time you iterate you get a tuple. The above list comprehension converts the whole result back to a list of lists.If you want to do this in place, I suggest you read the very excellent answer Jack wrote on rotating a matrix with Python; their explanation of how to code this is second to none: How do you rotate a two dimensional array?
The  is simply a in reverse. The list comprehension is:****EDIT****What is basically happening here is the for each column index  the algorithm goes through all the rows  (form last to first) and appends the  (the i'th value in the m'th row) to , which is then appended as a row, to . So each reversed column is added as a row to .So for a matrix like:The first inner loop iteration will result in 


Answer URL
https://docs.python.org/3/library/functions.html#reversed
https://docs.python.org/3/library/functions.html#zip
