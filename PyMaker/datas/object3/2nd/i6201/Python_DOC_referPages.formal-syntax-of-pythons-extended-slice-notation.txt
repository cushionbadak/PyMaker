Natural Text
Numpy, for example, allows multi-dimensional slices:This raises the question: what else is possible? (Imagine the possibilities!)According to this answer and some experimentation (see below), if there is a comma, Python builds a tuple of objects, some of which may be slice objects, and passes it (as ) to  of .The documentation for  doesn't specify this behaviour. Is there any official documentation that I missed? In particular, how backwards-compatible is this syntax? (Searching the web for "python extended slice notation" gives "What's new in Python 2.3", which doesn't mention it.)ExperimentationFirst, things that Python finds recognisable for multi-slicing:Some things that are NOT allowed (SyntaxError):
Anything is possible, as long as it is a valid Python expression. The object produced by the expression between  is passed to the  method. That's it.Commas produce a tuple,  colons in an expression produce a  object. Beyond that, use whatever you want.That's because the grammar allows for any  in the notation. See the reference documentation:Slicing is further specified in the Slicings section:So again arbitrary s are allowed, and  triggers the  grammar rule.Note that the ,  and  expression results are used to construct a  object, which can only handle integer values. Anything that can't be converted to an integer will result in a  being raised. That's not the same thing as a syntax error;  is syntactically just fine, but  is not convertable to an integer so you get a runtime  exception. Your two examples using non-integer slice values are not possible on Python versions 2.4 and up at the very least.Your actual syntax errors all stem from invalid expressions. Apart from the   notation, if you can't put the part between  on the right-hand side of an assignment, you can't use it in a slice either.For example,  can only be used to put multiple simple statements on a single logical line. Statements can contain expressions, but expressions can never contain statements, excluding  from expressions.  is not a valid expression (nowhere else in Python could you use a  in parentheses, the  rule doesn't allow for any such options).The Python 2 grammar for slicings is a little more elaborate in that  is a specific notation in the grammar there, and you can't actually use the  outside of slicings (in Python 3 you can use  anywhere an expression is valid), which is why  is a syntax error in Python 2 but not in Python 3.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/expressions.html#subscriptions
https://docs.python.org/3/reference/expressions.html#slicings
https://docs.python.org/3/reference/simple_stmts.html
https://docs.python.org/3/reference/expressions.html#parenthesized-forms
