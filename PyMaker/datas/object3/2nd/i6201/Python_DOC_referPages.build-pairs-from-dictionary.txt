Natural Text
My data is a nested dicitionary of people in countries. Here's what it looks like with unimportant stuff removed:It has previously been sorted by country already. I now need to build sender/receiver pairs and everyone needs to be in two pairs - once as the sender, once as the receiver. Both sides need to be from the same country. So with the sample data from above there will be 3 pairs per country at the end.All that matters on the output is the id. Basically I thought a list would work at the output but I'm not sure if those are reliable when it comes to the order of elements within the list. Apart from that this is what the result could look like:Everything that came to my mind to solve this involves several levels of for loops but I still didn't manage to get it done. I'm very sure there must be a pythonic way to solve this. Any ideas?
There's not just one way to produce the pairs you want, at least, not if the number of people in a country is greater than 2. So you'll need to pick a way to select pairs so that each person is on each end exactly once.One simple approach is to have each person send to the person after them in the country list. Wrap around so that the last person sends to the first, and you have a working algorithm.Here's a list comprehension that I think does what you want:In the comprehension,  is a list of dictionaries representing people from a single country and  is an index into . We allow  to be  at the start, as that handles the "wrap around" case we need to make the pairs work the way you want.
gives us Edit:Would give us something more like


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
