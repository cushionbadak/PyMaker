Natural Text
Is the above expression copying the whole code inside of the working module, or does it just know its name (or its path)?If it copies the whole code inside of the working library, then why do we have to use a  kind of system to work with that module?If it does not copy any code, then after the amendment of that , why does it still work?
Modules are objects just like everything else in Python. When you write , Python executes the module's contents in its own namespace and stores that namespace/object in . In the module where the import was run, that namespace/object is bound to the name of the module. The simple import statement you are asking about is roughly equivalent to .As Treyten Carey mentioned in a comment, you can also write  instead. From that point on during execution, all public names within  are freely available for use within the calling module without the need to refer to the namespace they came from. If you are familiar with other languages, you might think this is similar to  in C# or  from C. However, it is not entirely the same.In case you dislike having to refer to a module's namespace each time you want to access something from within it and you want to write Pythonic code that would be seen most favorably among other Python programmers, may I suggest that you  during an interactive session with the interpreter? You will see "The Zen of Python, by Tim Peters," and there a few points people might argue support the idea of namespaces:Explicit is better than implicit.Readability counts.In the face of ambiguity, refuse the temptation to guess.Namespaces are one honking great idea -- let's do more of those!


Answer URL
https://docs.python.org/3/reference/import.html
