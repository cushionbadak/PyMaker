Natural Text
I am making a script that gets the HTML of almost 20 000 pages and parses it to get just a portion of it. I managed to get the 20 000 pages' content in a dataframe with aynchronous requests using asyncio and aiohttp but this script still wait for all the pages to be fetched to parse them.  Once I have the content of each page I managed to use multiprocessing's Pool to parallelize the parsing.This code mixes asynchronously the fetching and the parsing but I would like to integrate multiprocessing into it:Is there any obvious way to do this? I thought about creating 4 processes that each run the asynchronous calls but the implementation looks a bit complex and I'm wondering if there is another way.I am very new to asyncio and aiohttp so if you have anything to advise me to read to get a better understanding, I will be very happy.
You can increase your parsing speed by changing your BeautifulSoup parser from html.parser to lxml which is by far the fastest, followed by html5lib. html.parser is the slowest of them all.Your bottleneck is not processing issue but IO. You might want multiple threads and not process:E.g. here is a template program that scraping and sleep to make it slow but ran in multiple threads and thus complete task faster. In your case, create a function that performs the task you want from starry to finish. This function would accept url and necessary parameters as arguments. After that create another function that calls the previous function in different threads, each thread having its our url. So instead of i in range(..), for url in urls. You can run 2000 threads at once, but I would prefer chunks of say 200 running parallel.
You can use ProcessPoolExecutor.With run_in_executor you can do IO in your main asyncio process.But your heavy CPU calculations in separate processes.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
