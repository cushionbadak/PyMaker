Natural Text
I used the multiprocessing lib to create multi-thread to process a list of files(20+ files). When I run the py file, I set the pool number as 4. But in cmd, it showed there are over 10 processes. And most of them have been running for a long time. Because it's large file and takes long time to process so I'm not sure if the process is hanging or still executing.So my question is:if it's executing, how to set the process number as exactly 4?if it's hanging, it means child process will not shut down after finished. Can I set it automatically shutting down after finished?
It won't, not until the  is -ed or -ed (IIRC s at least at present have a reference cycle involved, so even when the last live reference to the  goes away, the  is not deterministically collected, even on CPython, which uses reference counting and normally has deterministic behavior).Since you're using , your work is definitely done when  returns, so the simplest solution is just to use a  statement for guaranteed termination:As I commented, I used a  function with the standard guard against being invoked on , as Windows simulates forking by reimporting the main module (but not naming it ); without the guard, you can end up with the child process creating new processes automatically, which is problematic.Side-note: If you are dispatching a bunch of tasks but not waiting on them immediately (so you don't want to terminate the pool anywhere near when you create it, but want to ensure the workers are cleaned up promptly), you can still use context management to help out. Just use  to  the pool once all the tasks are dispatched; you must dispatch all the tasks before the end of the  block, but you can retrieve the results later, and when all results are computed, the child processes will close. For example:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.closing
