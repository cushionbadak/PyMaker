Natural Text
Here is an example:where  is non-commutative.In the code above,  will create a new list, but all I need is a view to . How can I optimize this?
To replicate your slicing but in O(1) time each iteration, you can use  with :Result:This should be more efficient than list slicing: see deque.popleft() and list.pop(0). Is there performance difference?. Note also list slicing works in O(k) time where k is the length of the slice.
Using , as suggested by @jpp's answer, is slightly faster sometimes. Both slice and  solutions perform similarly, and better than e.g. using  or just plain indexes on .I've tried to make the versions more or less equivalent overall, and used a dummy  that counts the loops:Results:


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
