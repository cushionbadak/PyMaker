Natural Text
I have a sample code:This code is expected to have the two functions run parallel. I mean the output of both should come at the same time. But it is not happening. The reason is that I have implemented an sleep function myself . If I use  instead of it, everything works fine.I also have looked up the signature of  function:What the  function has that my implemented  function does not have? They are both coroutines, Why are they behaving differently?
When you do asynchronous things, you do not have continiuous flow. There is an event loop, that has a pool of tasks and switches between them: when the current task s, the loop passes the control to one of the other tasks in the pool. time.sleep, as gracefully stated in comments by @user2357112, is synchronous, it just blocks the execution for some time, not giving the opportunity to proceed to a different coroutine.So, what  has and your  has not:It creates a new Future (a special object representing the result of a task that is not yet completed)That new task does nothing, but takes specified timeSo the new future will yield the  when the time comesThat task helps to block a flow in which the  was awaited but does not block the other tasks.Feel the difference.
Async is not threads.  Async code does not give up control until it hits an await or the function completes.  Your sleep function doesn't give up control so: The asyncio loop is running and do_one and do_two are scheduled.  The loop chooses to run do_one and because you don't yield or await your code doesn't return to the loop until the function completes.  


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#event-loop
https://docs.python.org/3/library/asyncio-task.html#task-object
https://docs.python.org/3/library/asyncio-future.html#asyncio.Future
https://docs.python.org/3/library/asyncio-future.html#asyncio.Future
