Natural Text
Merry christmas everybody,I'm implementing a custom dictionary that allows attribute access, e.g. . The dictionaries can be nested, so  should also be possible. This is working pretty well already, except for the star-star-unpacking. I think I'm able to express what I'm trying to do better using code than words. So here is the class I'm writing. The tests should explain pretty clearly what it does:As stated in the comment, the last test is failing. Does anybody know how to fix it?Following the answers from this question: star unpacking for own classes , I figured I need to inherit from  and . However, this didn't solve the issue. I was thinking this might be related to a MRO that's not entirely clear to me. But no matter if I change the class definition toormy tests won't become green.
The problem you are facing is that yu are trying to build upon a native   - and for this class,  is just one of several ways its values can be retrieved. Due to the way dicts are implemented in Python, for both historic and performance reasons, there are lots of ways that will simply bypass  altogether, and therefore, nested dictionaries will never be "wrapped" in a DotDict. (for example: , , and starmap will possibly bypass even these)What you really want there is to subclass collections.abc.MutableMapping - it is constructed in a way that ensure that any item retrieval will go through , (you will have to implement the methods indicated in the documentation though, including ,  and  - the recomendation is to keep the actual data as a plain dictioanry in a  attribute created in the  method).Perceive that this also gives you better control on your data, enabling you, for example, to wrap your data in your custom-class directly on setitem, and jsut don't care on attribute retrieval  - or, the other way around, store any mappings as plain dictionaries for memory-saving and efficiency and wrap it on retrieval. 
In  you are creating a  not a  so, refactoring to:Will make the test pass because you now you are creating a . Maybe you want to remove the part  so this version also works:
wow, try to run the following code with uncommented very, very strange


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping
