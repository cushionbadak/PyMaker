Natural Text
When writing Python asyncio programs, often there is an async function that have many invocations running concurrently. I want to add some logging to this function, but the logging output from different invocations will be interleaved, making it hard to follow. My current solution is to somehow create a unique name for each invocation, and log that name each time, like this:However, having to put  in every logging call gets tiring pretty quickly. To save those keystrokes, I came up with a different solution, creating a new logger with a unique name for each invocation:Are there any down sides to this approach? The only thing I can think of is that creating a new logger may be expensive, but is that actually the case? Are there any pitfalls I'm not seeing?
Are there any down sides to [creating a new logger for each coroutine]?Other than the possible price of creating a logger, another downside is that the logger you create stays associated with the unique name forever and is never destroyed, so you effectively have a  memory leak. This is explicitly promised by the documentation:Multiple calls to  with the same name will always return a reference to the same Logger object.I'd recommend just biting the bullet and creating a helper with the desired functionality. Building on Brad Solomon's answer, the wrapper might look like this (untested):
Instead of creating a new logger, you may want to consider taking advantage of using custom attributes in the log message, via the  parameter:For example:Then within the coroutine call logging a debug level message would look something like:One other thing to keep in mind:  could get expensive if you're making a lot of requests.  A common pattern when creating concurrency via multiprocessing is to log the calling process ID via .  With , perhaps a very rough cousin would be some identifier for the current , which you could get to via .  Each task has a  attribute that should be unique because it calls an incrementing :


Answer URL
https://docs.python.org/3/library/logging.html#logging.debug
https://docs.python.org/3/library/asyncio-task.html#task-object
https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output
