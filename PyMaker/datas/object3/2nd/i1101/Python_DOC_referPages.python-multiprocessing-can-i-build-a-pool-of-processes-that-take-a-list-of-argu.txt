Natural Text
So I have a script that builds a list of commands, which I then feed to Popen to launch in parallel.  This works as I expect it to - but I'm trying to write something that will run a constrained number of these at the same time rather than the whole lot.  I've gotten this far:I've been frantically googling and finding lots of examples using  and  and workers and  and frankly it all seems a little much - I think I have enough experience with python to know that there's got to be a simpler way to to this without re-mangling all of the command strings (which in my case can be several hundred characters long, but they are all formatted such that if you pass the list to Popen it will run  ;-)Another way to describe the behavior would be as functionally equivalent to using the  argument in the unix xargs command... EDIT: would like to extend this to allow a set of args (kwargs) to be passed into the pool process.  I now have the following code block that works:But I want to be able to pass other arguments into the spawn call, in this particular case I want to be able to pass things like priorities or std{in,out,err} redirection into the Popen call.  I got as far as trying a bunch of different combinations of **kwargs in the function signature, but couldn't get anything to work.  I started here, hopefully it expresses the behavior I'm after:Which would be equivalent to changing the definition of spawn to:But, obviously, I want to be able to pass an arbitrary set of arguments to the 'spwan' wrapper function depending on the exact behavior I'm after... 
You already have a list of commands, now create a function that executes a single command, and map it into your pool:This will map the members of your list to the function, 2 at a time.If you don't want to use 100's of processes (hypothetically, I know you're limiting to 2 right now), you can change the multiproc import to use  - this uses threads instead of processes, which might be more efficient, as the  takes care of actually spawning the new processes. 
OK, here's what I ended up with, which solves my immediate problem and I THINK is generic enough for me to use a little bit flexibly moving forward:The trick for me was finally comprehending that  is its own special operator and doesn't have ANY BEARING outside of it's very specific purpose of "representing an unpacked list of keyword arguments".  I was wrong in thinking of it as a string or a list or even a dictionary (although you use a dictionary to build the base kwargs) - it exists ONLY to unpack arguments.  I'm sure this is blindingly obvious to people who have used it, but for me the whole thing made no sense until I grokked this concept.  As Danielle shows above, the call for  allows me to keep the signature for  correct.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap
