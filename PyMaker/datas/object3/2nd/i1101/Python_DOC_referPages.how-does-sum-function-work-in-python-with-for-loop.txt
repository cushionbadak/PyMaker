Natural Text
I was using sum function in pyhton, and i am clear about it's general structure sum(iterable, start)  , but i am unable to get the logic behind the following codeoutput:  25Please can anyone describe what is happening here, basically here 5 is getting multiplied with 5, and same pattern is there for every sample input.
Your code is shorthand for:The removal of extra parentheses is syntactic sugar: it has no impact on your algorithm.The  component is a generator expression which, on each iteration, yields the value 5. Your generator expression has 5 iterations in total, as defined by . Therefore, the generator expression yields 5 exactly 5 times., as the docs indicate, accepts any iterable, even those not held entirely in memory. Generators, and by extension generator expressions, are memory efficient. Therefore, your logic will sum 5 exactly 5 times, which equals 25.A convention when you don't use a variable in a closed loop is to denote that variable by underscore (), so usually you'll see your code written as:
You can add a list to the  function so you can make something like this:And you get . So with your "for loop" you get a list and put that list to the  function and you get the sum of the list. The real  function uses yield insight and use every value and sum them up. 
Basically, it is summing 5 repeativily for every "i" on range(5). Meaning, this code is equivalent to n*5, being n the size of range(n).


Answer URL
https://docs.python.org/3/library/functions.html#sum
