Natural Text
For example:My solution is:It costs 0:00:00.234735 in my macbookpro2017.It there a more efficient method to make it in python?---edit1It is not's not necessary to use numpy.Here is another solution:It costs 0:00:00.225412---edit2Here is a bad solution:
There's no need to use numpy here, and generally list comprehension is good enough. I.e.  is totally fine.Conceptually, you must iterate over all objects and access attribute of every single one.Metrics on "why you should not overengineer":This is slowing because you first building list with comprehension, and then re-allocate memory for np array and copyBetter, but you have a lot of function calls for  and eventually you're re-allocating and copying list.This is more readable, pythonic, does exactly what it says, and its faster. Internally, its faster because of low-level optimizations of comprehension.Side note, CPython (that you're most probably using) starting from 3.5 (iirc) uses shared-key dictionaries to store object attributes, and starting from 3.6 it's merged with compact dict implementation. Both working great together â€” memory efficiency gives a huge boost to you raw performance.Not sure if VM actually leverages shared dict when running comprehensions (probably not) but this must be left to VM optimizations in 99% of cases. High-level abstracted languages (like python) is really not about microoptimizations.
You can use  to return the dictionary of attributes and their values in Python.


Answer URL
https://docs.python.org/3/library/timeit.html
