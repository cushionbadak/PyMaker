Natural Text
I have the following problem: I am writing a function that looks for a bunch of  files, uncompresses them, and stores the individually uncompressed files in a bigger  archive. So far, I managed to implement it with the following code, but manually computing the uncompressed file size and setting the  size seem rather hackish and I would like to know whether there is a more idiomatic solution to my problem:I tried to create a  object the following way instead of manually creating it:However, this functions retrieves the path of the original  file we opened as  to compute its size, and thus only provides a  parameter corresponding to the compressed  data and not to the uncompressed data, which is not what I want. Not setting the  parameter at all doesn't work either because  uses said size when passed a file descriptor.Is there a better, more idiomatic way to achieve this or am I stuck with my current solution?
Your approach is the only way to avoid decompressing the file completely to disk or RAM. After all, you need to know the size ahead of time to add to the tar file, and  files don't really know their own decompressed size. The  header field theoretically provides the decompressed size, but the field was defined back in the 32 bit days, so it's actually the size modulo ; a file originally 4 GB in size and one that was 0 B file would have the same . Regardless, Python doesn't expose , so even if it was useful, there would be no built-in way to do this (you can always muck about with manual parsing, but that's not exactly clean or idiomatic).If you want to avoid decompressing the file twice (once to  forward, once to actually add it to the tar file), at the expense of decompressing it to disk, you can use a  to avoid double decompression (without needing to store the original file in memory) with a slight tweak:


Answer URL
https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo
