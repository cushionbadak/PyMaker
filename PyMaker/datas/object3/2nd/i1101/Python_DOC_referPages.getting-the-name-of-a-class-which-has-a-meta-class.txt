Natural Text
Suppose I define a class  with a meta class like this:Then, when I try to access the name of class  I get the name of the meta class: However, shouldn't it give me , my defined class?Note: I tried to use  and it does give me , but I am still confused why  gives me the meta class name. Does anyone has an explanation of this?
The  dunder reports:the class to which a class instance belongs.Quote from The  belongs to the class of it's metaclass - only instances of  belong to the class  itself.To get the name of the class itself simply useif you really need it.I am still a way to groke all of answer to What are metaclasses in Python? - maybe it helps you out.
 is already the class - its name is under . If you try  you will get to the class of which  is instance (that is, its metaclass), name. will follow the "method resolution order" for the class A - the  object is a tuple with all the class hyerarchy that starts in the defined class itself and ends in . So,  will always be  itself - and  is the same as .The  and  attributes are writable attributes: changing {  after the class is created will change the default  for instances of that class, for example. Although they are in the language definition and "live" in slots in the class (not on it's dictionary), it is possible to create a  property (I mean, the built-in  object, or any other descriptor) on the metaclass that will dynamically change the  attribute of a class (but not  - this must be an attribute of the class, and must be a string)


Answer URL
https://docs.python.org/3/library/stdtypes.html#instance.__class__
