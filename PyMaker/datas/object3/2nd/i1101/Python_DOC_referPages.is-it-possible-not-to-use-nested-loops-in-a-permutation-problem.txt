Natural Text
I am writing a code which prints all the permutations of [a,b,c,d].I don't want to use recursive function and instead I have used 4 for loops, but the disadvantage of my code is that the loops have to be the same amount as the elements of the list.My question is that wether it is possible to write a code which is independent from the number of the elements.   
The code is hard to understand, but yes it is possible, you can look at it inside the Python documentation:https://docs.python.org/2/library/itertools.html#itertools.permutationsRelevant sections extracted from the link for reader confort (I invoke fair use):The code for permutations() can be also expressed as a subsequence of product(), filtered to exclude entries with repeated elements (those from the same position in the input pool):
Here is a non-recursive attempt that relies on there being no duplicates in the initial pool:
This is one basic way (quite easy to come up with). Start easy first. To start, let . First find all permutations that start with :Now our  consists all permutations that start with . The automated version is        Then the final  is all the permutations that start with the first element of .SolutionSo, for all letters, we can automate as below


Answer URL
https://docs.python.org/3/library/itertools.html
