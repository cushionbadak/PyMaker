Natural Text
I want to create a list, which does not already exist. So, i want to use the insert function to insert "0" as the new element in that list.The problem ist that I don't know how to access the index of the element position which is in a  nested list.I have tried to resolve my problem using : but it does not help me and the programm gives an error because of this line.Full code:Expected result: the matrix_result has exact many elements as there are in matrix1 but all with the value 0actual result: error because of the statement : 
I want to create a list, which does not already exist. So, i want to use the insert function to insert "0" as the new element in that list.You cannot insert to a non-existent list. You have to use  to first create the list, then you can insert things into it.Solution: On the line where you say , you insert an  instead of a . To insert an empty , you have to say .EDIT: As Jondiedoop has said, it is usually recommended to use the  library for matrix operations because it is highly optimized and easy to use. Go here for more information: NumPy.org
For all matrix manipulations, use the -library:Output:Apart from being much easier and much more flexible, it will also be much faster.
I don't think you need to use  here. An easier way would be to use :You can also use a list comprehension:
Your empty list  presented a few challenges to the interpreter. I made a few changes to your code and the matrices add.I hope this helps you!
Change the matrix_result to contain list of lists. Also problem in your solution is you are accessing the int type saved in the list             and trying to insert in the int type which is not possible using Although you do not necessarily need  here but if you really want to then below is the updated version of your code
If you're trying to implement matrix addition, I assume that you want the following behaviour: If you can't use any libraries, you could use zip and map, where we also assume that the dimensions of the matrices are the same of course: The simplest and fastest would be to use numpy: 


Answer URL
https://docs.python.org/3/library/functions.html#zip
