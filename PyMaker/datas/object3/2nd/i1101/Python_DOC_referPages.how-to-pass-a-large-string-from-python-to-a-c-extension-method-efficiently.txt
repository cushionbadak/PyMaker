Natural Text
IntroductionI am working on project where a lot of textual data needs to be processed. Many quite big (hundreds of MB) text files. The python is the requirement (don't ask why). I want to use C++ extensions to increase the performance. I decided to go with SWIG. I have an pattern matching algorithm that is much faster than usual python "string".find("pattern"). I was surprised when I saw it's much slower when used as python extension. It shouldn't happen. I think I am quite close to find the reason of this but need your help.ProblemNow, I wrote a simple extension with class containing method that do NOTHING (simply take a string as parameter and returns numeric value (no processing is happening in the function):nothing.h:nothing.cppnothing.itest.pyCompilation steps:Output:As you can see, despite the nothing should be much faster than find() it is a lot slower!Any idea if this can be somehow solved? For me it looks like the data is converted or copied.Why I think the whole data is copied? Because if a slightly change the function do_nothing() to (I am omitting headers):Then the result is as expected:
You'll probably want to pass the filename to C and open and search it there.  You are reading bytes, converting those bytes to unicode then converting back to bytes inside the timed portion. You can read the documentation here to understand the internals.https://docs.python.org/3/c-api/unicode.htmlIf the file is utf-8 then leave it in bytes by removing the decode or just pass the filename and load it in C.


Answer URL
https://docs.python.org/3/c-api/unicode.html
