Natural Text
If I create a class as below, and check the type of the object, I get the following output. My question is what does  mean here?There is another question, if I check the type of the Student class, I get the following output. What does  mean here?
My question is what does  mean here? there is the module in which  is defined; the module corresponding to the file that you start with the Python interpreter is automatically named . You may remember it from the usual idiomthat checks if the name of the current module is  to see if this is the script that has been run (as opposed to it being imported as a module).If you defined  inside another file, and imported it from your main module, it would have said the name of such module instead. For example:run.pystudent.pyif you run  you'll get where you'll see confirmation that the name before the dot is indeed the module where the given type is defined (useful, as in this case, to disambiguate and to get at a glance where some given type is defined).What does  mean here?It means that the  class, as all classes defined with , is in turn an instance of the builtin type . It may get a little circular, but classes themselves are instances of metaclasses; for all the gory detail about how this works under the hood, you may have a look at this question, but it isn't light reading.
The  in  is saying that the Student object (or class) was defined in the scope in which the top level code is being executed (the  scope). If the  class was defined in another module, call it , and imported into the  main scope, then the  would output . So basically, the type of an object always refers back to the scope in which it was defined.


Answer URL
https://docs.python.org/3/library/__main__.html
