Natural Text
I'm modifying some code to be compatible between  and , but have observed a warning in unit test output.A little research determined this was also happening from popular libraries like requests and boto3.I could ignore the warning or filter it completely.  If was my service, I could set the  header in my response (link).Here's an example that exhibits the warning in :app.pytest.pyIs there a better / correct way to manage the session so that it gets explicitly closed and not rely on  to result in this sort of warning.Thanks for any help.
Having the teardown logic in  can make your program incorrect or harder to reason about, because there is no guarantee on when that method will get called, potentially leading to the warning you got. There are a couple of ways to address this:1) Expose a method to close the session, and call it in the test 's  method allows you to define some code that will be run after each test. Using this hook to close the session will work even if the test fails or has an exception, which is nice.app.pytest.py2) Use a context managerA context manager is also a very useful way to explicitly define the scope of something. In the previous example, you have to make sure  is called correctly at every call site, otherwise your resources will leak. With a context manager, this is handled automatically even if there is an exception within the scope of the context manager.Building on top of solution 1), you can define extra magic methods ( and ) so that your class works with the  statement.Note: The nice thing here is that this code also supports the usage in solution 1), with explicit , which can be useful if a context manager was inconvenient for some reason.app.pytest.pyDepending on what you need, you can use either, or a combination of / and context manager, and get rid of that warning, plus having more explicit resource management in your code!
This is the best solution if you are not much concern about warningsJust import warnings and add this line where your driver is initiating -


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
https://docs.python.org/3/glossary.html#term-context-manager
