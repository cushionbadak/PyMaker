Natural Text
Writing test cases to handle successful and failed python subprocess calls, I need to capture  returning code.Using python , is it possible to patch the  function and capture its real system exit code?Consider an external library with the following code:I can't modify the function . It is not part of my code. But, the fact is that  is being called among other statements.Here we have a snippet of code returning a forced system exit error code 1:How can I improve this test to capture the expected real value for any  return code?For compatibility purposes, new  (3.5+) can't be used. This library is still broadly used by python 2.7+ environments.
About subprocess.call, the documentation says:Run the command described by args. Wait for command to complete, then return the returncode attribute.All you need to do is to modify your  function and return the exit code:This will simply your test code.My advice: use  instead EditIf you want to check the exit code of  you need to patch it with your own version, like this:Then, you use  as a side effect function for your patch:
A wrapper around  can handle the assertion verification.In this case, I declare this wrapper as the  argument in  definition.In this case, the following implementation worked well.After some tests with taking this approach, it seems possible to use for a more general purpose calls, like:This is not the best approach, but it seems reasonable.There is some best known lib with similar behavior that I can use in this project?


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.call
https://docs.python.org/3/library/sys.html#sys.executable
