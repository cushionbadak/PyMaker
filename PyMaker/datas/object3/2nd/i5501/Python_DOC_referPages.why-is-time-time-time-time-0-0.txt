Natural Text
Why is this the case? From my simple understanding, this function returns the system clock in seconds since the epoch at the exact time of the call. But shouldn't the two calls to time.time() return slightly different floats?
The resolution of the timer isn't unlimited; it goes up by small amounts periodically. If the two calls are close enough together, you will see a zero value. If you tried a large number of such calls, you would probably find that the difference is zero most of the time, and some number of microseconds the rest of the time, depending on your particular system's speed, hardware details, and kernel implementation.
Per the docs on :... even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second.(my emphasis). For Python3.3+ use  instead.Or for Python3.2 or older, or for backwards compatibility, use, which attempts to pick the most accurate clock for yoursystem.
Not Always, just depends on your cpu scheduling and the clock:
Python's time.time() generates the amount of time since the epoch, measured in thirds of a microsecond, a unit I like to call deltas. This means there are 3 million deltas in every second. Like a clock only reports time to the nearest second, python will only report time to the nearest delta. So if your code can complete before the time moves onto the next delta, it will report as 0.0!


Answer URL
https://docs.python.org/3/library/time.html#time.time
https://docs.python.org/3/library/time.html#time.perf_counter
