Natural Text
I'm new to Python and I'm having trouble with a very specific problem. I need to read data from various JSON files that have a similar structure. The procedure is: load the JSON file into a dictionary, save the relevant data from the dict in a list in order to insert it into a MySQL database. The problem is: some fields of the JSON files don't necessarily appear in EVERY JSON file. Some fields are missing in some of the files, and sometimes even inside the same file, as in:Here is a code snippet to illustrate what the relevant (to the question) part of my program does:As you can see, there is some consistency to the file. The problem is: whenever one of the fields is not present, I receive a  stating that there is no such data to append to the list. What I need to do is a way to handle this exception, like add some type of "null" data as default, so it doesn't return any errors (what would be null anyway when added to the database).
Firstly, I'd move code out of the  block. Secondly, if I HAD to do what you are asking, I'd use a function to get the value optionally / return None.Alternatively, you can check the keys of all the data, as a validation step, and then retrieve values.Additionally, you can use the  function on a  to get the  of  if it exists, and if not return some default value.If you want to safely return  just for the deepest nest, you can do the following
You can use  to specify a default value like:
You are mentioning it yourself. Using try-catch logic, you can catch specific errors and handle them without breaking the execution of the program, thereby filling in the empty data points.So with your snippet, surround the append method with a , then add an  afterwards. Here is the python documentation on try-catch logic. https://docs.python.org/3/tutorial/errors.html#handling-exceptionsThe exception you mention, keyerror, is documented here. Then for a  the first argument is the key that raised the exception. With that, you have the offending key stored in .With that, the missing values should be filled in. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
