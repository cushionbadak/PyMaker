Natural Text
What I am asking might not be possible in Python and probably stems from my being used to pointers, but this is how it goes: is the following achievable in python?My naive attempt to do this wasBut, of course, this is non-sense since self is just a local variable. EDIT: To be clear, this is not about simple variable assignment (i.e.  creates an alias but I don't care). This question came while I was trying to construct a loop with lots of objects of the same type:If  is another object of type A, then  is just a reference to that object.Now, there is a work-around for everything, but that's not what I am asking. I'd like to know if there is a solution to my original question.
You can achieve this with :that being said you probably want to rethink your architecture.
IF you want to do this it has to happen in the objects  method.  That's where you can affect the creation of new objects, as opposed to  which modifies them after their creation.  One way to do this would be
I think the best approach is actually to use a meta-class here, especially if you plan on using inheritance, although, meta-classes do add some complexity to that situation. If only, I would appeal to the fact that this is the common approach to creating a singleton class, which is very similar to what you are doing in principle. But here is a sketch:Note, from the docs is intended mainly to allow subclasses of immutable types  (like , , or ) to customize instance creation. It is  also commonly overridden in custom metaclasses in order to customize  class creation.Also, note that using this approach,  isn't called again, which may be what you want.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__init__
https://docs.python.org/3/reference/datamodel.html#object.__new__
