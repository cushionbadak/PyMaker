Natural Text
Is there a way in Python to silence stdout without wrapping a function call like following?Original Broken Code:Edit: Corrected code from Alex MartelliThat way works but appears to be terribly inefficient. There has to be a better way. Any ideas?
Assigning the  variable as you're doing has no effect whatsoever, assuming  contains  statements -- yet another example of why you should never import stuff from inside a module (as you're doing here), but always a module as a whole (then use qualified names).  The  is irrelevant, by the way.  The correct equivalent of your snippet is:Now, when the code is correct, is the time to make it more elegant or fast.  For example, you could use an in-memory file-like object instead of file 'trash':for elegance, a context is best, e.g:once you have defined this context, for any block in which you don't want a stdout,More optimization: you just need to replace sys.stdout with an object that has a no-op  method.  For example:to be used the same way as the previous implementation of .  I don't think it gets any cleaner or faster than this;-).
Just to add to what others already said, Python 3.4 introduced the  context manager. It accepts a file(-like) object to which the output is to be redirected.Redirecting to /dev/null will suppress the output:This solution can be adapted to be used as a decorator:Another possible and occasionally useful solution that will work in both Python 2 and 3 is to pass /dev/null as an argument to  and redirect the output using the  argument of the  function:You can even make  completely optional:Note, you'll need toin Python 2.
Why do you think this is inefficient? Did you test it? By the way, it does not work at all because you are using the  statement.Replacing  is fine, but don't make a copy and don't use a temporary file. Open the null device instead:
Chiming in very late to this with what I thought was a cleaner solution to this problem.Usage:
A slight modification to Alex Martelli's answer...This addresses the case where you always want to suppress  for a function instead of individual calls to the function.If  was called many times would it might be better/easier to wrap the function (decorate it).  This way you change the definition of  once instead of encasing every use of the function in a with-statement.
By generalizing even more, you can get a nice decorator that can capture the ouput and even return it:
I don't think it gets any cleaner or faster than this;-)Bah! I think I can do a little better :-DWhich gets to what I wanted originally, to suppress output normally but to show the suppressed output if an error was thrown.
redirect_stdout() has been added to contextlib since python 3.4For python >= 3.4, this should do it:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout
