Natural Text
For a  NumPy array, I am looking to get the combinations without the same elements being repeated in a combination. The order is important. So,  and  would be two distinct combinations. Since we don't want repeats,  and  aren't valid combinations. For simplicity, let's keep it to two elements per combination. Thus, the output would be a  NumPy array with  columns.The desired result would be essentially same as  output except that we need to mask out the combinations that are repeated.  As such, we can solve it for a sample case, like so -But, creating that huge array and then masking out and hence not using some elements, doesn't look too efficient to me.That got me thinking if  could be leveraged here. I have one solution with that idea in mind, which I will be posting as an answer post, but would love to see other efficient ones.In terms of usage - We come across these cases with adjacency matrices among others and I thought it would be good to solve such a problem. For easier and efficient plug-n-play into other problems, it would be nice to have the final output that's not a view of some intermediate array.
Seems like   could be used to maximize the efficiency of  and we delay the copying until the final stage, where we assign into an initialized array. The implementation would be in two steps, with some work needed for the second column (as shown in the sample case in the question), which we are calling as  (fancy name that denotes one element missing per sequence / is cold in a each interval of )To showcase,  with a sample case -To solve the original problem, we will use it like so -Sample run -Seems quite efficient for a  elements array of  -Would love to see others!
"It would be essentially same as  output, expect that we need to mask out the combinations that are repeated."  Actually, what you want is :
Benchmarking PostPosting the performance numbers/figures for the proposed approaches thus far in this wiki-post.System config :The benchmarking setup would be :The performance figure :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
