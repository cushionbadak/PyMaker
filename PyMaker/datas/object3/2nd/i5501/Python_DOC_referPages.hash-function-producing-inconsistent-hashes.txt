Natural Text
I have a function that produces a  with some data in it: is the list of blocks that the block is on. The  (the hash of the previous block), gets passed to the function, and a time stamp is created. Don't worry too much about the details of the actual data (well something could be wrong there, but it relates more to the  function than what is going on with the data)Next I hash the block, and add it to the block:The  function looks like this:This function creates a completely different hash than the next block in line says it has (the hash of the last block attached to the block in front, on the chain, does not match the  of the block in front. However, they are using the same function:This line:    and this line:    Are the important lines (and the ) function. A block gets created, gets hashed and the hash gets attached, then another block gets created and hashes the previous block and it doesn't match the hash created for that block when the block is created.Also, I started out with hashlib.sha256, and when I noticed this problem i decided to see if it was the hashing function, so I switched to the  hash, but I am still having the problem - ultimately I want this to work on , but I figure if I can get it to work with  first...I will have solved the problem for 
 is only suitable for producing mappings, hash tables. It uses a random seed to prevent attacks. It is not a cryptographic hash and should not be counted on to be stable across Python invocations.From the  function documentation:Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).and from the  hook method, which  calls if present:Note: By default, the  values of ,  and  objects are “salted” with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.Stick to the  module options; those are stable across calls.Apart from this, within a single Python process,  on objects with the same value, will also produce the exact same hash. Since your  dictionary changes between blocks (as it includes the hash for the preceding block in the chain), it will naturally not be the same string and so not the same hash value.The same applies to the  functions; they produce the same value for the same input only. If your hash values differ, then the input differs. And your inputs naturally differ because each  dictionary includes a reference to the preceding hash.
After printing the the object which would be 'd, I noticed that it was retaining the added  property (I thought it wasn't) - check your variables 


Answer URL
https://docs.python.org/3/library/functions.html#hash
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/library/hashlib.html
