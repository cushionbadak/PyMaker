Natural Text
There is a python code, which is supposed to support Python 3, but may or may not run in Python 2.7.For example, this snippet  can run in both Python 2.7 and Python 3.What is the standard way to enforce and recommend Python 3 compatibility in strict mode, even if the code runs fine on Python 2.7 ?Python 2.7 : https://ideone.com/bGnbvdPython 3.5 : https://ideone.com/yrTi3pThere can be multiple hacks and exceptions, which work in Python 3, and not in Python 2.7, which can be used to achieve this.I am looking for most recommended way of doing this in the beginning of files/modules/projects.
If it is a proper Python package with the , you can use several things: classifierIf your project only runs on certain Python versions, setting the  argument to the appropriate PEP 440 version specifier string will prevent pip from installing the project on other Python versions.Sample: Since the support for  classifier has been added relatively recently, you should account for users installing your package with older versions of  and . In this case you can check the  inside the  file like Django does: Python version classifiers:And, as a bonus, if the package is distributed through PyPI package index,  and other classifiers are going to be displayed on the package home page.
You could simply check the :


Answer URL
https://docs.python.org/3/library/sys.html#sys.version_info
