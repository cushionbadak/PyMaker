Natural Text
This is my code:If the input is just text ( for instance) you get an error.I'd like to evaluate if it is a  and give advice to the user based on that evaluation.
Output:
In python, a string is like a "instance of class str". To order to compare if the "content" within the input was a string, you can make something like...
 function does not really parse given string as number. It  evaluates string as a python expression. So try one of the two ways mentioned below :One wayCase 1 :Case 2 :Another wayCase 1 :Case 2 :The expression argument is parsed and evaluated as a Python expression  (technically speaking, a condition list) using the globals and locals  dictionaries as global and local namespace. If the globals dictionary  is present and lacks ‘builtins’, the current globals are copied  into globals before expression is parsed. This means that expression  normally has full access to the standard builtins module and  restricted environments are propagated. If the locals dictionary is  omitted it defaults to the globals dictionary. If both dictionaries  are omitted, the expression is executed in the environment where  eval() is called. The return value is the result of the evaluated  expression. Syntax errors are reported as exceptions. Example:Output : 
Instead of using  (which is rather dangerous - a user could enter any valid python code and it'll run), you should use , and use a try-catch statement something like the following:For more examples, see here: https://docs.python.org/3/tutorial/errors.html
 function does not really parse given string as number. It  evaluates string as a python expression.So the fact that  gives 2 is just a coincidence, because 2 is correct python expression that evaluates to number. So you shouldnt use  to parse strings as numbers. Instead simply try parsing (con verting) it as integer, float and Decimal (in this order) and if you don't get error in any of your tries it means this is correct number of specified type. Answer posted by @jose-a shows how could it be done. 
Why not simply encapsulate your Logic within a  Block like so:UPDATE:If you wish to handle Complex Number Inputs (like you mentioned in your comment)... you could just wrap the Code above in an  block like so:


Answer URL
https://docs.python.org/3/tutorial/errors.html
