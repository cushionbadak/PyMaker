Natural Text
I have a python list with each string being one of the following 4 possible options like this (of course the names would be different):I want these to be corrected to:Easy enough to do with 4 re.sub():While this is fine for the dataset I'm using, I want to be more efficient.Is there a single operation that can simplify this process?Please pardon if I forgot a quote or some such; I'm not at my workstation now and I'm aware I've stripped the newline ().Thank you, 
BriefInstead of running two loops, you can reduce it to just one line. Adapted from How to iterate over the file in Python (and using the code in my Code section):See Python - How to use regexp on file, line by line, in Python for other alternatives.CodeFor viewing sake I've changed your file to an array.See regex in use hereNote: You don't need all that in python, I do in order to show it on regex101, so your regex would actually just be UsageSee code in use hereExplanation Assert position at the start of the line Optionally match the following Capture any character except  one or more times into capture group 1 Match this literally Match any number of non-word characters (copied from OP's original code, I assume  can be used instead) Group any character except  one or more times into capture group 2 Optionally match the following Match this literally  Match any number of non-word characters (copied from OP's original code, I assume  can be used instead) Capture any character one or more times into capture group 3Given the above explanation of the regex part. The  works as follows: is a callback to the  function which returns: if it captured anything,  otherwise (it's supposedly always set - using OP's logic here again) if it captured anything,  otherwise
IMHO, RegEx are just too complex here, you can use classic string function to split your string item in chunks. For that, you can use  (or ).First, split your item string in "records", like that:Then, you can create a short function to normalize each "record".Here is an example:This function is easier to understand than a collection of RegEx. And, in most case, it is faster.For a better integration, you can define another function to handle each item:Demo:You get:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.partition
https://docs.python.org/3/library/stdtypes.html#str.rpartition
