Natural Text
I have a generic smoothing function, and based on a configuration file (yaml which will be loaded as a dictionary), different implementation (boxcar or gaussian) will be called. These implementations have different number of arguments, for example boxcar requires winsize, while gaussian require winsize and variance.Here is my current implementation:Would there be a better way to implement this?
I would consider two optionsUse a dictionary of functions:You can make it a bit more user-friendly Use multiple dispatch. It lets you dispatch on function signature and typesIn your case
I'd say that this question is primary opinion based, but I'm kinda... bored so here's my take:In these cases I always tend to give priority to readability by other users. We all know that code should be properly commented, explained, with lots of documentation around, right? But I also should go to the gym and yet, here I am, writing this from the coziness of my sofa (which I'm not planning to abandon until... mid-April, more or less, when the weather gets better).To me, if other people are going to read your code, I think it's very important to take advantage of the fact that Python, if properly written can be very, very clear (it's almost like pseudo-code that runs, right?)So in your case, I wouldn't even create this kind-of-wrapper function. I would have a module  containing all your smoothing functions. Not only that, I'd import the module () as opposed to ) so I can be very explicit on my calls:Something like that. Something that if someone receives an error, can quickly understand where and why is it happening.Otherwise, if you still want to keep your structure, I'd say that, since you're always going to need your 'method', don't put that into your kwargs. Make it positional:Another thing you could do, is instead of having the possibility of having bad arguments in the  dict, force it to include the proper arguments (what if someone passes in  the argument  but gives you  for ? Don't let that even be possible (make it crash as soon as possible):And always provide a proper message in your exceptions (give a proper explanation on your )There's a lot of "magic" you can do with Python. That doesn't mean you have to do it. For instance, you could get a fairly similar behavior to what your implementation of the  function is doing by writing something like this:But if someone else reads that... well... good luck to that person :-P
If  is a fairly important part of the call and the user is aware of the argument, you can write it as follows:However, there's a problem in the  dictionary:Its keys are function names and values are function objects, which requires us to have access to the functions.You want to get a dictionary where keys and values are strings (such as one you would get from a YAML file).The assumption I will make is that the functions exist in the current context, whether you have defined them or imported them.
Your algorithm functions are . You can store them in a dictionary for easy lookup.Use a  with a "not implemented" Strategy for missing algorithms:This means if you try and access a non-existent algorithm, it will return  and when you call it, it will raise :You can add your algorithms:And you can call them:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
