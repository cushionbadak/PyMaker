Natural Text
Most of my small-scale project worked fine using dictionaries, so changing it now would basically mean starting over.Let's say I have two different dictionaries(dict1 and dict2).One being: Second one being: I want to find wherever the first word of the first dictionary is equal to the word of the second one. These 2 dictionaries don't have the same length, like in the example. Then after I find them, divide their values.So what I want to do, sort of using a bit of Java is:What I've tried so far is trying to make 4 different lists. A list for  keys, a list for  values and the same for . Then I've realized I don't even know how to check if  has any similar elements to .I've tried making an extra value in the dictionary (a sort of index), so it would kind of get me somewhere, but as it turns out  isn't iterable either. Which would in turn have me believe using 4 different lists and trying to compare it somehow using that is very wrong. 
Dictionaries don't have any facilities at all to handle parts of keys. Keys are opaque objects. They are either there or not there.So yes, you would loop over all the keys in the first dictionary, extract the first word, and then test if the other dictionary has that first word as a key:So this takes every key in , splits off the first word, and tests if that word is a key in . If it is, get the values and print the result.If you need to test those first words more often, you could make this a bit more efficient by first building another structure to to create an index from first words to whole keys. Simply store the first words every key of the first dictionary, in a new dictionary:Now  is a dictionary of first words, pointing to sets of keys (so if the same first word appears more than once, you get all full keys, not just one of them). Build this index once (and update the values each time you add or remove keys from , so keep it up to date as you go).Now you can compare that mapping to the other dictionary:This uses the keys from two dictionaries as sets; the  object is a dictionary view that lets you apply set operations.  gives you the intersection of the two dictionary key sets, so all keys that are present in both.You only need to use this second option if you need to get at those first words more often. It gives you a quick path in the other direction, so you could loop over , and quickly go back to the first dictionary again.
Here's a solution using the  method of strings


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/library/stdtypes.html#str.startswith
