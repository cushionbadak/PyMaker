Natural Text
I am trying to load a large json object into memory and then perform some operations with the data. However, I am noticing a large increase in RAM after the json file is read -EVEN AFTER the object is out of scope.Here is the code I tried running this script in Windows with Python version 2.7.12 and Debian 9 with Python version 2.7.13, and I am seeing an issue with the Python in Linux.In Windows, when I run the script, it uses up a lot of RAM while the json object is being read and in scope (as expected), but it is released after the operation is done (as expected).However in the LINUX environment, over 500MB of RAM is still used even though all references to the JSON object has been deleted. The same script run in Debian 9 with Python 3.5.3 uses less RAM but leaks a proportionate amount of RAM.What is causing this issue?Both versions of Python are running 64bit versions.EDIT - calling that function several times in a row leads to even stranger data, the json.loads function uses less RAM each time it's called, after the 3rd try the RAM usage stabilizes, but the earlier leaked RAM does not get released..EDIT 2: Someone suggested this is a duplicate of Why does my program's memory not release? , but the amount of memory in question is far from the "small pages" discussed in the other question.
The linked duplicate likely hints at what your problem is, but let's go into a bit more detail.First, you should use  instead of loading the file entirely into memory and then doing  on that:This allows the decoder to read the file in at its own leisure and will most likely reduce memory usage. In your original version, you had to at least store the entire original file in memory before you could even start parsing the JSON. This allows the file to be streamed as the decoder needs it.
while python freed memory back to glibc, glibc will not release back to OS immediately every time, since the user may request memory later. you could call glibc's  to make an attempt to release memory back:result:


Answer URL
https://docs.python.org/3/library/json.html#json.load
