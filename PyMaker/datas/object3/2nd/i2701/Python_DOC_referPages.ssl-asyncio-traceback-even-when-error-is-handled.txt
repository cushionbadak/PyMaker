Natural Text
Trying to download and process jpegs from URLs. My issue isn't that certificate verification fails for some URLs, as these URLs are old and may no longer be trustworthy, but that when I  the , I still get the traceback.System:Linux 4.17.14-arch1-1-ARCH, python 3.7.0-3, aiohttp 3.3.2Minimal example:Output:
The traceback is generated by asyncio's implementation of the SSL protocol, which invokes the event loop's exception handler. Through a maze of interactions between the transport and the streaming interface, it happens that this exception is both logged by the event loop and propagated to the API user. The way it happens is as follows:An exception occurs during the SSL handshake. receives non-None  and treats it as a "fatal error" (in the handshake context), i.e. invokes  and returns. calls the event loop's exception handler to log the error. The handler is normally invoked for exceptions that occur in queued callbacks where there is no longer a caller to propagate them to, so it just logs the traceback to standard error to ensure that the exception doesn't pass silently. However... goes on to call , which calls  back on the protocol.The stream reader protocol's  implementation sets the exception as the result of the stream reader's future, thus propagating it to the users of the stream API that await it.It is not obvious if it is a bug or a feature that the same exception is both logged by the event loop and passed to . It might be a workaround for  being defined a no-op, so the extra log ensures that a protocol that simply inherits from  doesn't silence the possibly sensitive exceptions occurring during SSL handshake. Whichever the reason, the current behavior leads to the problem experienced by the OP: catching the exception is not enough to suppress it, a traceback will still be logged.To work around the issue, one can temporarily set the exception handler to one that doesn't report :Adding  around the code in  suppresses the unwanted traceback.The above works, but it strongly feels like a workaround for an underlying issue and not like correct API usage, so I filed a bug report in the tracker.
For unknown reason (bug?) aiohttp prints error output to console even before any exception thrown. You can avoid it temporary redirecting error output with contextlib.redirect_stderr:P.S. I think you can use more common exception type to catch client errors, for example:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr
