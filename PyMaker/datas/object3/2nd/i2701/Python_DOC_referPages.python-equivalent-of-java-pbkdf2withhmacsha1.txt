Natural Text
I'm tasked with building a consumer of an API that requires an encrypted token with a seed value that is the UNIX time. The example I was shown was implemented using Java which I'm unfamiliar with, and after reading through documentation and other stack articles have been unable to find a solution.Using the , , , and  protocols, I need to generate a token similar to the below:Should I be using the built-in library  to implement something like this? I can't really find documentation for implementing a  encryption with iterations/salt as inputs. Should I be using ? Sorry for the vague questions, I'm unfamiliar with the encryption process and feel like even just knowing what the correct constructor would be is a step in the right direction. 
Yes, the Python equivalent is . For example this code:  produces the same key as your Java code.  However, the problem with this code (as mentioned in memo's comment) is the use of salt. The salt should be random and unique for each password. You can create secure random bytes with , so a better example would be:  You may also want to increase the number of iterations (I think the recommended minimum number is 10,000).  The rest of the code is easy to 'translate'.  For the timestamp, use  to get the current time and multiply by 1000.  For encoding you can use  (it includes padding, but you could remove it with ).Now, for the encryption part, Python doesn't have a built-in encryption module, so you'll have to use a third party library. I recommend  or .At this point I must warn you that the AES mode you're using is very weak. Please consider using CBC or CTR, or better yet use an authenticated encryption algorithm. 


Answer URL
https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac
https://docs.python.org/3/library/base64.html#base64.urlsafe_b64encode
