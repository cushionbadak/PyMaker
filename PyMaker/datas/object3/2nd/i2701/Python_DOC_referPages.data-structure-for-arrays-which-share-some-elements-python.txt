Natural Text
I have a collection of arrays which "overlap" at certain elements. Here's a picture of an example involving 3 arrays of characters:The important thing is that changes to the arrays should respect this structure. So for example, if I change the 'B' in array0 to 'X', the 'B' in array1 should also change to 'X'.My question is what is a good, efficient way of implementing this in Python?There are two things I have thought of so far:One, I can make a bespoke class, instances of which contain a completely distinct list, along with information about any overlaps that it has, and implement update methods appropriately so that any change to the list is always duplicated for the other lists at the overlaps. This seems a little overwrought though, and involves duplicating the data.Two, I could do it by using singleton lists like this:But I feel this may be hacky and not the best way. Thanks for any suggestions.
Mine suggestion is variation of the one proposed by @a_guest. You could have a wrapper class that marks the elements as shared and a data structure for handling such elements:Output
You can create a wrapper class that can handle the updating of all elements of the same value:Output:
You could subclass  and use a dedicated wrapper class to proxy shared content. This involves no data duplication as it only stores the proxy for shared data which dispatches to the original data. It's a bit similar to your nested list approach but it maintains the normal list interface. Here is an example implementation:Now you can share the data among your lists as required:Which gives as output:
You could use a dedicated class that updates other intersecting instances appropriately as you indicated with your first idea. I wouldn't consider data duplication a problem as for mutable data you anyway store the references and in case your using large immutable data you can employ a dedicated wrapper class (e.g. Python 3.7 introduced the  decorator).Here is an example implementation:With that you can intersect the lists as in your example:       Which gives as output:
As you pointed out in your question, the relevant information is that (I am adding the suffix ptr because practically those elements are pointers).Here the list element are the pointer to the objects that shall be maintained in a separate listThe real arrays can be obtained at run time by member functions likeNow your point is : suppose that the object list becomes How do I automagically keep track of this in my arrays?? Those arrays should become:I think that the most simple answer is : keep the list fixed!, anddo not allow inserting or changing the order of items. Simply mantaina different hash with the object position. In the case above, you'll haveit is then possible to write member functions that dump the updated list of objects, the array would not change. What can be tricky is if you want to delete objects, but this is tricky in any case I fear.


Answer URL
https://docs.python.org/3/library/dataclasses.html
