Natural Text
Is there a way to add functions I create to the Python standard library on my local machine? I come from the matlab world where things aren't really efficient and fast but there are looooads of functions at my fingertips without having to import their files. My problem is that, if I make a function in Python and want to use it, then i will need to also remember the module its in. My memory is shite. I understand that Python is structured that way for efficiency but if I'm adding only a handful of functions to the standard library that I consider very important, I'd guess that the impact to the performance is practically negligible. 
Python has a namespace called  in which you can stick stuff that you want available all the time. You probably shouldn't, but you can. Be careful not to clobber anything. Python won't stop you from using the same name as a built-in function, and if you do that, it'll probably break a lot of things.Now the question is how to get Python to run that code for you each time you start up the interpreter. The answer is . Follow these instructions to find out where the correct directory is on your machine, then put a new file called  in that directory that defines all the stuff you want to have in .There's also an environment variable, , that you can set to have a Python script run whenever you start the interpreter in interactive mode (i.e. to a command prompt). I can see the benefit of e.g. having your favorite modules available when exploring in the REPL. More details here.
It sounds like you want to create your own packages & modules with tools you plan on using in the future on other projects. If that is the case, you want to look into the packaging your own project documentation:https://packaging.python.org/tutorials/packaging-projects/You may also find this useful:How to install a Python package system-wide on Linux?How to make my Python module available system wide on Linux?How can I create a simple system wide python library?


Answer URL
https://docs.python.org/3/library/functions.html
https://docs.python.org/3/tutorial/appendix.html#the-customization-modules
https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file
