Natural Text
In Python 3, it is standard procedure to make a class an iterable and iterator at the same time by defining both the  and  methods. But I have problems to wrap my head around this. Take this example which creates an iterator that produces only even numbers:To my knowledge (correct me if I'm wrong), when I create the loop, an iterator is created by calling something like  which internally calls the  method. This is expected to return an iterator object (which the instance is due to defining  and therefore I can just return self). To get an element from it,  is called until the exception is raised. My question here is now: if and how can  and  be separated, so that the content of the latter function is defined somewhere else? And when could this be useful? I know that I have to change  so that it returns an iterator.Btw the idea to do this comes from this site (LINK), which does not state how to implement this.
It sounds like you're confusing iterators and iterables. Iterables have an  method which returns an iterator. Iterators have a  method which returns either their next value or raise a . Now in python, it is stated that iterators are also iterables (but not visa versa) and that  so an iterator, , should return only itself from it's  method.Iterators are required to have an  method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are acceptedIn code:If you want to make a custom iterator class, the easiest way is to inherit from  which you can see defines  as above (it is also a subclass of ). Then all you need isThere is of course a much easier way to make an iterator, and thats with a generator functionJust for reference, this is (simplified) code for an abstract iterator and iterable
I think I have grasped the concept now, even if I do not fully understand the passage from the documentation by @FHTMitchell. I came across an example on how to separate the two methods and wanted to document this.What I found is a very basic tutorial that clearly distinguishes between the iterable and the iterator (which is the cause of my confusion).Basically, you define your iterable first as a separate class:The  method only requires an object that has a  method defined. Therefore, you can do this:This separates the iterator part from the iterable class. It now makes sense that if I define  within the iterable class, I have to return the reference to the instance itself as it basically does 2 jobs at once.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
