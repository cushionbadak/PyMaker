Natural Text
Can the following be coded more compactly using list comprehension?
Here is the code you are looking for    
Here's one way to break this down.If you look at the main body of your loop, you can restructure it as generating a sublist for each number, and then combining the sublists together.The first part of this takes a list of numbers, calls the same function on each of them, and produces a list of results.  This operation is map (and indeed has this name in many languages).  The second part takes a list of lists and flattens them into one big list; many languages have a "concat" or "flatten" operation, but in Python it can be a little clunky.The  call in particular easily transforms into a list comprehension (or a generator comprehension)and so if you want to turn this into a one-liner you can haveFor something completely different, you could potentially use a generator function to make it clearer what you're doing.  Really, for each item in the input, you're emitting the item, and if it's not the last item, emitting nine lists containing empty strings.  You can then take the sequence produced by the generator function and convert it to a list.This is definitely longer and slower (in a way that shouldn't matter in practice) but it could be easier to reason about what it's doing than the one-liner, especially if you come back to it six months later and are trying to remember what exactly the code does.
It is convoluted, but if you want a list comprehension, this is one way to do it:Demo:By way of comparison:
This reads to me like "create an array 101 elements in length, where each item is an empty string if its index is a non-integer multiple of 10, otherwise it's the index-divided-by-10". As a list comprehension:That said, if the list comprehension isn't an absolute requirement, I find something like this quite a bit easier to grok:(which is almost identical to your original approach)


Answer URL
https://docs.python.org/3/library/functions.html#map
