Natural Text
Let's say I have a large list of data that I want to perform some operation on, and I would like to have multiple iterators performing this operation independently.I would expect these iterators to be different code objects, but  returns ... More confusingly, this is true for the following generators as well:This means in practice that when I call ,  is incremented as well, which is not the behavior I want.What is going on here, and is there any way to do what I'm trying to do? I am using python 2.7 on Ubuntu 14.04.Edit:I just tried out the following as well:Which prints ... Apparently generators are just a more constrained concept that I had imagined.
Generators are iterators. All well-behaved iterators have an  method that should simplyFrom the docsThe iterator objects themselves are required to support the following  two methods, which together form the iterator protocol: Return the iterator object itself. This is  required to allow both containers and iterators to be used with the  for and in statements. This method corresponds to the tp_iter slot of  the type structure for Python objects in the Python/C API. Return the next item from the container. If there  are no further items, raise the StopIteration exception. This method  corresponds to the tp_iternext slot of the type structure for Python  objects in the Python/C API.So, consider another example of an iterator:So, again, a list is iterable because it has an  method that returns an iterator. This iterator also has an  method, which should always return itself, but it also has a  method.So, consider:And for a generator:Now, you are using generator expressions. But you can just use a generator function. The most straightforward way to accomplish what you are doing is just to use:Then use:Which in this case,  and  will be two separate iterator objects.
You are using the same generator for both iters. Calling  returns the thing's  if it has one, so, iter(generator) returns the same thing both times you call it. https://docs.python.org/3/library/stdtypes.html#generator-typesHere's two ways of getting a unique generators:or:both solutions produce this:


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/stdtypes.html#generator-types
https://docs.python.org/3/library/itertools.html#itertools.tee
