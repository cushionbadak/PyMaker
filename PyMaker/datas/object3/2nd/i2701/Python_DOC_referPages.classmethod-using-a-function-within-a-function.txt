Natural Text
I have a situation where I'm using  to create a constructor for a class. Within this constructor, a function gets called, which then in turn calls another function. But either this doesn't work or (more probably) I'm doing something to make it not work. Here's an example in miniature:This produces an error message:I can make it work by explicitly passing self to , egBut this then means that the  method can't be used outside of the , which is not what I want.Any assistance gratefully received.Here's a more detailed example, with two constructors shown. I'm trying to follow the approach to constructors described inWhat is a clean, pythonic way to have multiple constructors in Python?Which is essentially that the constructors do some processing to figure out what variables they should pass to init when instantiating the class.Both constructors give the same error:As before, I need to be able to use the if_char_is_make_it_a function outside of the constructor (ie, when using the class normally).
When you call  from  you are calling the unbound  method.Thus, you pass the class itself as  and not an instance to a method that expects to receive an instance as argument.Although, there is no real reason to have a  method. This is exactly what  is for.If you absolutely need the transformation on  to be done before the instantiation, then use  instead. Although, this is generally not necessary.Multiple constructorsIf for some reason you still need to have a  method, by example if you want multiple constructors. Then keep in mind that  and  are instance methods, this means they must be called after you have created an instance.As a sidenote, notice how I did not need to call , but simply called  in the constructor methods. Since this is a class method, we do not need to explicitly name the class. This is better, especially if you are to use inheritance.
Basically what you are doing here shall be done via the __new__ which serve as constructor.
You are abusing . The point of the class method is to use the  argument as constructor, instead of explicitly naming the class by . Also, during the  call, you are passing the class instead of the instance, which happens to work because you are not using any instance attributes. As to your questions, there's no way to avoid the  argument.  increases some value by , so you must give it something to increase. The idea would be to haveand then do something like


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
