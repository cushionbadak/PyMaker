Natural Text
I attempt to document a syntax I use in , which is a configuration file for menu entries, by describing the syntax / grammar using the notation known as extended Backus-Naur-Form EBNF(BNF) This menuentries.conf uses indenting levels as syntactical component as should be displayed in this example:In the above example each entry is represented by a string, which for the sake of the example implies/indicates its position. In addition the example should follow these ruleseach menu item is represented by single line (hence the menu entries are delimited by NEWLINE)menu entries without any indenting are "top level" menu entriesmenu entries with an indenting are not "top level" but child entries to the respective higher/upper level menu entry.My attempt at providing a BNF is the following:My question hence is with regards to my disatisfaction of the recursively declared notion  and its redundancy with  and .Knowing that python uses indenting as well to create the notion of blocks, I thought to look up the BNF/definition of pythons grammar (as found here: https://docs.python.org/3/reference/grammar.html) but it leaves the relevant notions of  and  out of is grammar. My question is hence:How to correctly use EBNF to describe a grammar/syntax in which indenting is employed as a grouping block?Ideally a small example (or if possible correction of my attempt) would be appreciated.In the best case scenario the EBNF would define the notion of  of the  which would be: 1 for submenu_entry and 2 for subsubmenu_entry ....
You might be thinking with a mind of a programmer when you need the mind of a language creator.  There are traditionally two parts to creating a language:Lexeme specification: defines groups of characters that represent a single syntactic construct (i.e. a token or terminal value)Grammar specification: defines the valid combinations of syntactic constructs/tokens/terminal values that make up non-terminal values that express how the language can be usedSome languages are able to combine the lexical and syntactic parts of language creation, but doing so in your case is not a good idea because grammars by themselves cannot express the idea of specific indentation alone.  That's something you'd leave for a lexer to handle.Below is the BNF grammar, where , , , and  are all terminal values generated by your lexer:Simple enough, right?  I included the  rule to ensure that any file ending with a   or  token is valid.  Without it, a file ending in a  token that wasn't preceded by a  token would be invalid.I used BNF, but you can just as easily use EBNF if you wish.  The point is that a lexer can understand how many spaces of indentation are used to generate an  or  token (or an error if necessary), and your grammar should simply specify how to work with the tokens generated.


Answer URL
https://docs.python.org/3/reference/grammar.html
