Natural Text
Let's say I have a class, members of which I want to compare with the usual operators , , , , and .As I understand, this could be accomplished by initializing defining magic method  which returns -1 (), 0 (), or 1 ().It seems like  was deprecated since Python 3 in favor of defining , , , , and  methods separately.I defined  and  assuming that the default values for  would look something like . It seems to be not the case with the following class:And I get this outcome:This has left me to conclude that I'll have to define all the comparison magic methods manually to make a class comparable. Is there any better way?Why has  been deprecated? That seems like a much nicer way to deal with it
For two objects  and ,  requires that one of , , and  is true.  But that might not be the case: consider sets, where it's very common that none of those are true, e.g.  vs .So  and the likes were introduced.  But that left Python with two separate ordering mechanisms, which is kind of ridiculous, so the less flexible one was removed in Python 3.You don't actually have to implement all six comparison methods. You can use the  class decorator to help define the rest of the magic comparison methods:


Answer URL
https://docs.python.org/3/library/functools.html#functools.total_ordering
