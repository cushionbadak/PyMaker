Natural Text
I'm creating an app. that will generate math problems. They're specific problems where some parameters can be altered. Each problem will be different, and require a different method to solve (all of which will be programatically implemented).For example:models.pyviews.pyWhen I try this, the function isn't actually saved. Django just saves the integer . When I initiate an instance of the model, the function is there as intended, but apparently only  is saved to the database.Bonus question: I'm actually beginning to question whether or not I even need Django models for this. I'm using Django because it's super easy to get everything onto a webpage. Is there a better way to do this? (Maybe store the text of each problem in a JSON file and the generating functions in some separate script.)
The persistence layer for a Django application is the database, and the database schema is specified by your model definitions. In this case you've only defined a single field in your model, ; you haven't specified any storage for the corresponding function. Your  is just creating an attribute on an object in memory; it won't be persisted.There are various possible ways to store the function. You could store it as raw text; you could store it as a  blob; you could store the function path and name (e.g. ); or do something else. In any case, you'll need to create a database field for that information.Here is a rough outline of an example solution using the function path:models.pyviews.pyOnly you can determine if you need to use a database at all. If you only have a few fixed questions then you could just stuff everything into a Python file and be done with it. But there are advantages to using Django's models, including the ability to use the admin.
There are a couple of options, depending on the actual task. I ranged them starting with the most safe option to the most dangerous (but flexible):1. Store function identifiers:You can store  and  as  and  - i.e. by name (or you can use any other unique identifier). Pros:You can validate user input and execute trusted code only, because in this case you control almost everything.You can easily debug your functions, because they are part of your system.Cons:You need to define all your functions in the code. That means if you want to add new function, you need to redeploy your application.If you are storing function names, you need to manually import module (or package) with the functions and call them.If you are storing identifiers, you need to define a mapping .2. Use DSLYou can write your own DSL (or use existing)Pros:You can add new functions at runtime without redeploying application.You can control which code can user execute.You can see source code for your functions.Cons:It is hard to write safe and flexible DSL, especially if you want to call some python code from it. It is hard to debug huge functions.3. Serialize themYou can serialize functions using picklePros:You can add new functions at runtime without redeploying application.Easier than writing own DSL.Cons:Unsafe - you must not execute untrusted code. If you allow users to create their own functions, serialization is not your way - define (or use existing) safe DSL instead.It might be impossible to show source python code for the serialized function. For more information: How can I get the source code of a Python function?It is hard to debug huge functions.4. Just store actual Python codeJust store the python source code in the DB as a string.Pros:You can add new functions at runtime without redeploying application.You can see source code without any additional processing.Easier than writing own DSL.Cons:Unsafe - you must not execute untrusted code. If you allow users to create their own functions, storing source code is not your way - define (or use existing) safe DSL instead.It is hard to debug huge functions.


Answer URL
https://docs.python.org/3/library/pickle.html
