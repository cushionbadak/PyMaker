Natural Text
I'm benchmarking my server using following python code:When I run it multiple times I get different execution times from  seconds to  seconds.I know same code may have different execution time due to variation in CPU load  but as is said in  documentation it only considers current process clocks, so it should have same execution time using  even if it is different using . shouldn't be?Also is there anyway I can get exact  count for a piece of python code?EDIT: I use  and get same result.
First rule of timing code: use the  module. This takes care of picking the best timer for your OS automatically, minimises other influences, and takes multiple timing runs to give you the most accurate estimate of time taken.Next,  is not process specific. It's the clock time on the CPU, yes, but not the amount of time the current process has spent using the CPU. Other processes scheduled to run on the CPU will add fluctuation to the time taken. You'd want to use  instead.However, all code is subject to potential caching and to Python-specific periodic processes such as the garbage collector running. You can't expect to ever get repeatable  or  values, because that clock can't account for such background work in the Python process itself. You can disable the garbage collector processes ( does this for you) while timing code but this won't help with internal caches (which are implementation specific and most are not documented). uses  to include time spent on I/O and other processes that might be kicked off by the code under test. You can tell it to use  instead by using the  switch when using  as a command line script, or passing  when calling API functions.


Answer URL
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/time.html#time.process_time
https://docs.python.org/3/library/gc.html
https://docs.python.org/3/library/time.html#time.perf_counter
