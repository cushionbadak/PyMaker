Natural Text
I'm beginner to Python ... I'd like to format the characters in Python using basic concepts and operations of Tuples and Lists as below ... I enter 10 digit number and except last 4 digits remaining all the numbers should be replaced by 'X'. For e.g.number = 1234567890Expecting output as - number = XXXXXX7890How to mask entered characters / numbers in Python using Tuples/Lists concept not using by importing any modules or existing high functions. Is it possible ?For e.g. entered some characters , those should be masked using * (asterisk) or # (hashed) while entering. For e.g.password : pa55w0rdExpecting output while entering password as - password : ********ORpassword: ########
It is always better to use built-in modules for things sensitive like password. One way of doing is following:If you don't want to display typed password just print:It does not have to be of the same length you just have to print something.
Break down what's needed: you need to convert to a string, to figure out how many characters to replace, generate a replacement string of that length, then include the tail of the original string.  Also you need to be robust against, eg, strings too short to have any characters replaced.For the second part: use a library.Doing this directly is more complicated than it might seem to a beginner, because you're having to communicate with the systems which take text entry.  It's going to depend upon the operating system, Windows vs "roughly everything else".  For text entry outside of a web-browser or a GUI, most systems are emulating ancient text-only terminal devices because there's not yet enough reason to change that.  Those devices have modes of text input (character at a time, line at a time, raw, etc) and changing them to not immediately "echo" the character typed involves some intricate system calls, and then other programming to echo a different character instead.Thus you're going to want to use a library to take care of all those intricate details for you.  Something around password entry.  Given the security implications, using tested and hardened code instead of rolling your own is something I strongly encourage.  Be aware that there are all sorts of issues around password handling too (constant time comparisons, memory handling, etc) such that as much as possible, you should avoid doing it at all, or move it to another program, and when you do handle it, use the existing libraries.If you can, stick to the Python standard library and use getpass which won't echo anything for passwords, instead of printing stars.If you really want the stars, then search https://pypi.org/ for getpass and see all the variants people have produced. Most of the ones I saw in a quick look didn't inspire confidence; pysectools seemed better than the others, but I've not used it.


Answer URL
https://docs.python.org/3/library/index.html
https://docs.python.org/3/library/getpass.html
https://docs.python.org/3/library/getpass.html?highlight=getpass#getpass.getpass
