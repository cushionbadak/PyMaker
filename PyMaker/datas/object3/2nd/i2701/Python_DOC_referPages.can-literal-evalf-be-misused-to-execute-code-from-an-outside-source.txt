Natural Text
I am just curious if this is a risk at all, I can't think of a way a user might be able to cause this to happen... but it seems worrisome. will execute the file deletion. Is there any risk that this could be used against an application? What does "Safely evaluate an expression node"mean?
The reason  is defined in this way is that it's a specialized function in the  module, not a magic function designed to be used for all kinds of other purposes, so you're expected to have at least skimmed the  docs if you're using it. can take either an  representing a parsed expression, or a string that, when given to , produces such a node.Then, as long as the expression only uses "the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and ", it will evaluate the expression; otherwise, it will raise an error.So, if you pass it the string , well, when you parse that, you get a  expression, which is not one of the kinds of expression nodes that  accepts, so it immediately rejects it with a .And if you pass it the string , when you parse that, you get a  expression node with a bunch of nodes inside it that  also doesn't accept (it's worth doing an  to see exactly what those nodes are, if you don't understand how f-strings work), so it's going to reject it with a  again.But what if you pass it the string ? Well, that string gets evaluated by the interpreter before it even gets passed to .In most scenarios, that's going to raise an exception before  can even be called, so  is completely irrelevant. For example:If  is not imported, you get a .If the file doesn't exist, you get a .If  or  don't exist, you get a .If  exists but is any normal kind of value, because  returns , you get a  about trying to subtract whatever type  is from .In some of those scenarios, the file is removed, of course. But since  never even got called, it's hardly relevant here. You could do the same thing with  instead of , or just nothing at all.But what if  is imported, and the file exists, and  is an instance of some type with an  that accepts , and  is an instance of some type that can be passed to the  of whatever  returned? Then  will get called with whatever that  returns. If it's a string or an , it will even evaluate it. And maybe that would be some other dangerous string? But in that case,  will raise a  on that dangerous string, so no additional harm is done.


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
