Natural Text
I have a list/array of numpy arrays, representing objects split into subgroups.I would like to create a copy of this array where I can swap elements within the subgroups and leave the original groupings unchanged.The function I've written to do this is:Based on this question, I've been able to swap the elements. However, the elements in the original array are also swapped, as in this example.Which gives:Ideally, the array a should be unchanged and only a_swap show the swapped elements. I had hoped that making and working with a copy of the array within my function would do the trick but that hasn't worked.Could anyone help point out what I might be missing? I have a feeling it's something I'll kick myself for afterwards.ThanksPS: Oddly enough, it seems to work if the number of elements in each group is equal, but I'm not seeing why.
When the number of components in each element are not equal, you are having a list of arrays (nested object).When the number of components are equal, then you have a two dimensional array (one single object).The  you are using is called shallow copy which copies only the top level object (the 2d array in second case, but only the addresses to the arrays in the first case). So in the first case your original data also are changed.You should use the  module:https://docs.python.org/3/library/copy.html
From what I can tell,  takes a shallow copy of the array until some change is made to it. When you call in the variable to the method, it uses the shallow copy of the array, ignoring that it was meant to be changed. By changing the variable before passing it through the method, it changes the memory reference of b to a separate place than a. is there to cast from a list to a numpy array so that the  is a valid operation.There are probably a lot of different ways to do the same thing, this just seemed the easiest.


Answer URL
https://docs.python.org/3/library/copy.html
