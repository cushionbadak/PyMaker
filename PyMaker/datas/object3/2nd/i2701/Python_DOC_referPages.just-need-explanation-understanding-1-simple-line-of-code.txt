Natural Text
I was studying a coding challenge in which you need to write a function that counts duplicate occurrences of character patterns in a string and returns how many times it occurs. For example if string is s = 'catcatcat', output is 3. If string s = 'abcdabcd', output is 2. If s = 'catcatcatcatcat', output is 5.The answer ended up beingCan anyone help explain this code because im having trouble understanding. Btw just started learning python. 
If you just started learning python, it's rather early for such snippets. You need to read first aboutlist comprehensionslists/strings/iterables & slicingstrings & string operations (in this case, string-integer multiplication)Let's take it piece by piece   In the string , count how many times the substring of the  first characters appearstry this for all values of , from  to the total lenght of From all the above values, keep only the ones for which this condition holds. As said before, the left operand is a substring and the second a number. In python, multiplication of a string with integer repeats the string. eg In the end, you just take the  of all the above values.
Let's breakdown the expression bit by bit and highlight the Python concepts/features being used.when you have a python expression inside  invoked the way it is here it usually means a Python capability called List comprehension is being invoked. What does this mean? I like to think of it as comprehend this expression for the range of input specified and return all the answers as a list. This allows you to write powerful, albeit unpythonic(non idiomatic python), expressions.Now let's examine the expression inside the If I were to translate this expression into plain English I would say: Please return the count of the substring ending before x, for all x in the range 0 to len() of the original string, in the original string ()Finally the  is invoked on the returned list to get you the max value.That being said this method is somewhat inefficient because you perform a substring search and count for every substring.What I would do instead:Look at prefix trees, i.e Tries.They offer far more efficient ways for you to compute such things.
You need to break it down step by step.Hopefully, you know what this does: it evaluates  and exits the function, making the value the result of the function.The  function can be called two ways, but here, there's only one argument, so, whatever  is, it will be an iterable, and  will give you the biggest value in that iterable.This is a list comprehension. You can always convert a list comprehension into an equivalent nested statement:So, now let's look at the parts. The  and  are:So,  just takes all the values from 0 up to but not including .The  is:That  is just a slice of the first  characters of . So, if  is , when  is 2, it's ; when  is 4, it's .The  just tells you how many times that substring appears. So, when  is 2,  appears twice, so that's 2; when  is 4,  only appears once, so that's 1.So, if we ignore the condition for the moment, these are the values we're putting in the list for :  The  of that will of course be .Finally, the hairiest part is the :You already know  and .When you multiply a string (or any sequence) like  with a number like , it just repeats the string that many times, so  is .We're checking whether that's equal to the whole string. Which in this case, it isn't. But if we were using , then when  is 3, it would be.And that's everything.Now work through it with one of your examples, .For , you get , which occurs 16 times in , but  is still , which is not , so skip it.For , you get , which occurs 5 times, bug  is , which is not , so skip it.For , you get , which occurs 5 times, but  is , which is not , so skip it.For , you get , which occurs 5 times, and  is , which is equal to , so keep it.The value for  is , which is 5 again, so that's what goes in the list.For , you get , which occurs 2 times, and , skip.â€¦ and so on for 5-14; none of them will match.For , you get , which occurs 1 time, and obviously it equals .The value is 1 again, so that goes in the list.So the list ends up as just .And  is 5.


Answer URL
https://docs.python.org/3/library/functions.html#max
