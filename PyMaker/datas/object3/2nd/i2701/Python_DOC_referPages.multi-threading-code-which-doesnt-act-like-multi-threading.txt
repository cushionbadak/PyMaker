Natural Text
I have the following code (Python 2.7):The code runs and the action is executed as expected (Tough incredibly slow!).The thing is that when I look over my logs I see:I'm wondering why all threads prints the exact same time?Note that the action began at 1:00 the first batch of print is at 5:45 am.Shouldn't I see prints at different times as each thread my finish sooner or later? I'm wondering what is the best number for workers? Currently it starts from  which is 4.This is a code I inherited I'm trying to get the sense of it before I'm converting the script to Python 3.
When creating a thread pool in python, the threads are user level threads and are run on the same processor, due to Global Interpreter Lock(GIL) in python. As only one thread can control the python interpreter at a time. So, using (python)threads we don't get any real concurrency in data-intensive tasks.How to solve this? Easy. Spawn multiple python processes running on different processors(each with its own interpreter). This is where the multi processing(mp) module is used, to spawn multiple processes from the parent python process in which it is called.You can verify this by running htop(on linux, mac) and analysing the number of python processes. In case of mp module, they all will have the same name as the parent script where the pool.map function is called.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map
