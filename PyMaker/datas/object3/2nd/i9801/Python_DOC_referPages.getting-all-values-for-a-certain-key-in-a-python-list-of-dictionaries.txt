Natural Text
I have a list in Python which contains a "nested" dictionary in it. So my list looks like follows:I would like to return all the values of the key 'Name' from my list without using a loop. So if I use a loop it works since this works for single entries of the list. For example:  works and returns 'Smith'. However, I need something like  which should return a List with the entries 'Smith' and 'Mary' in it. Is this possible?
I had posted the  method as a curiosity, but since the answer was accepted, I'm posting the  results, to compare the performance with the other answers on this ticket.Results:Conclusion,  is the fastest method.  on python 3 returns a generator, though.
You may use lambda expression with  as:Even though you do not see loop over here, but internally  also iterates over the list. You can not skip iterating over the list in order to achieve what you want.Better way will be to use list comprehension as:OR, if there is a possibility of any key missing in the nested dict, you may add filter as:
You can use:Result: ['Smith', 'Mary']Note that it is still loop. You can't do such thing without loop.
Unfortunately this is not possible in python, although it would be a very useful feature. Similar features are often available only in domain-specific query languages (for example, I think the Django ORM supports similar indexing), but not in any general purpose language I can think of. Your best approach is
I'm not sure why you can't use loops but would list comprehension work?  Let me know as to the reason and perhaps I could recommend something else.result:b = ['Smith', 'Mary']


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
