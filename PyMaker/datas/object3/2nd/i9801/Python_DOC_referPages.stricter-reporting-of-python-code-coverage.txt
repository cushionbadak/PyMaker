Natural Text
Suppose I have two Python modules in my project: has some functions, but the important one is . Let's pretend it gives a number back while executing several internal functions.Now suppose that  uses , and then has further functionality implemented.  only has two functions -  and .Now I want to write a unit test for Class2 that covers .This unit test is the only one written for the project. We run the unit test and generate a Code Coverage report.After examining the Code Coverage report, we will see that  is well covered, as we have have our unit test and it is doing what it is supposed to. Fantastic!However, we also note that  is also well covered, as the unit test also covered  and any of it's underlying functions. Our report is showing fantastic coverage for the entire project! Send it to the PO and let's take an early weekend!This is misleading though. What I really want the report to show is  being covered, as we have written a unit test that covers the module reliably. I don't want it to show  as being covered, as we don't have any unit tests that check it's internal functionality. It simply assumes that  works correctly, and if the unit test fails, it's description will not be very helpful nor transparent if  is at fault.So, to simplify: is covered appropriately via Unit Testing has no direct coverage and puts the project at riskWhen Unit Tests are ran and the Code Coverage report is generated, it incorrectly shows both modules as well testedInstead, I'd like the report to show that  is covered, as  is explicitly called by the test, and  is not covered, as it's functions are called within This leads me to the following questions:Is there a way to prevent this from happening in the coverage report? What, if any, is the term to use to refer to this type of coverage?Is there a particular coding pattern that helps prevent this issue?Thanks!
You will need to  the data coming from . In your current implementation, the actual code inside that function is being run whenever you call the unittest for . Something like this will help you,Now you can write a separate  for  and get the correct coverage report!So answering your 3 questions,Is there a way to prevent this from happening in the coverage report?Is there a particular coding pattern that helps prevent this issue?Yes! Use .What, if any, is the term to use to refer to this type of coverage?In some sense, what you've done could refer to integration tests, where you test a number of functions together against a series of input combinations. In unit tests on the other hand, you test every function and try to see its working without caring about whether dependent functions work or not.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html
