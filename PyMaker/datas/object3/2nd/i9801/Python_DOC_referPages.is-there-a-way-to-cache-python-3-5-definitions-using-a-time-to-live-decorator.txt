Natural Text
Currently, I use '  to handle my caching for the function. The problem is that the size of the cache never grows large enough to make use of the  (due to the fact that the function never takes in a parameter). Instead, the function, when called, opens up a specific URL and return its contents.Is there a way in which I can specify the 'time to live' cache in which after a certain amount of time/certain amount of calls, it refreshes its cache?
I don't know of a decorator, but you can keep track of the last time you got the page and update as needed. If this is a single-threaded app, it can be simpleYou could also age the page with a timer in the background. You need to control access with a lock, but that makes the cache usable in a multithreaded program too.Finally, the server may include an  field in the http header. Depending on how well the service was written, this would be a good reflection of how long the page can be cached.
The  function accepts a  argument which saves the results up to the  most recent calls.You can check this by calling the  attribute of your decorated function.If you want to refresh your cache completely you should implement a cash object manually by counting the number of cache calls and resetting the cache whenever it hits the max size.Demo:output:


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
