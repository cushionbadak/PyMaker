Natural Text
This is somewhat of a follow on to Why are mutable values in Python Enums the same object?.If the values of an  are mutable (e.g. s, etc.), those values can be changed at any time. I think this poses something of an issue if  members are retrieved by value, especially if someone inadvertently changes the value of an  he looks up:I think given normal Python idioms this is okay, with the implication being that users can use mutables as their  values, but just to understand the can of worms they might be opening.However this brings up a second issue - since you can look up an  memeber by value, and the value can be mutable, it must be doing the lookup by a means other than a hashmap/, since the mutable cannot be a  in such a .Wouldn't it be more efficient (although, granted, less flexible) to limit  values to only mutable types so that lookup-by-value could be implemented with a ?
It appears the answer to my second question was hiding in plain sight in the soure code for .Each  does contain a  of  pairs for hashable (i.e. immutable) values, and when you look up an  by value, it attempts to retrieve the member from that .  If the value is not hashable, it then brute-force compares for equality against all existing  values, returning the member if finds a match.  The relevant code is in lines 468-476 in :So it appears as though the designers of  wanted to have a quick lookup when getting s by value, but still wanted to give the flexibility of having mutable values for  values (even though I still can't think of a reason why someone would want that in the first place).


Answer URL
https://docs.python.org/3/library/argparse.html
