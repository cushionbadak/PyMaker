Natural Text
I am trying to create a polygon class that returns the area and perimeter when given the sides and length from user input. However, it doesn't take the two variables I'm trying to pass into the  method. The sides and length must be private and must be received through user input.
Your problem is that you're not passing anything to , you're creating class level variables when you do this:These will only be called once per program* as well, so you'll never be able to provide different values, if that's something you need.If you want to pass arguments to a function, you do that when you create the instance of the class:As others have mentioned, private variables in Python aren't actually inaccessible, though there are ways to enforce that they are immutable, as jonrsharpe pointed out it his answer. You could also investigate  for other options.*Per import, which is usually once per program, but there are ways you can get around that, but that's even worse. Unless you're going for an obfuscated Python contest, don't do that.
You seem to have a fundamental misunderstanding of how OOP works in Python. When you instantiate a class, the  method is called, and usually you assign the arguments given to instance variables, like so:Then in whatever methods you'd like to make use of those, you can access them through the instance:Notice that all this method does is return  back to the caller. There's a common idiom for this situation using decorators:The advantage of this compared to   is twofold. First, you can call  the method without parentheses as if it was an instance variable:Secondly, if the user later tried to overwrite it with something else Python would raise an AttributeError:In regards to your  method, what I think you meant was this: is called when you do  or  so it should return a string.Finally, you may have noticed I have named the instance variables with one leading underscore rather than two. If you want the users of your class to know that a particular instance variable is "private" and they should not mess with it, it's better to prefix its name with only one underscore. The reason for that is that it allows you to have acessor methods and instance variables with the same name, while at the same time avoiding name mangling. Names with two leading underscores are mangled, and thus generally not recommended. Taking all of this into account, here's a rewrite of your code:
Here is a quick code review of your code (no math consideration):You can inherit from  (to be compatible with Python 2):Simplify the parameters names, don't use double underscores:Use the instance variable  and , drop the parameters:Replace  by In your  function:(With Python 2, use  instead of .)Convert string values to Use  function to print the result
Here is how I would write this:Why? Because:inheriting from a  makes the instance immutable, so you can't reassign  and  after initial creation, while giving you sensible equality comparison and  formatting for free:Using  means you can easily access the calculated attributes, again in a read-only way:Using  keeps the logic for creating an object from user input within the class, where it belongs:In your current implementation, your input runs once when the class is defined, not when the user actually wants to create an instance.Note: I've assumed you're using Python 3.x - if not you should use . Also your classes should inherit from , when  you're not using e.g. .


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/library/functions.html#classmethod
