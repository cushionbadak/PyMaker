Natural Text
I want to check my environment for the existence of a variable, say , in Python. For this purpose, I am using the  standard library. After reading the library's documentation, I have figured out 2 ways to achieve my goal:Method 1:  Method 2:I would like to know which method, if either, is a good/preferred conditional and why.
Use the first; it directly tries to check if something is defined in . Though the second form works equally well, it's lacking semantically since you get a value back if it exists and only use it for a comparison. You're trying to see if something is present in , why would you get just to compare it and then toss it away?  That's exactly what  does:Get an environment variable, return  if it doesn't exist. The  optional second argument can specify an alternate default.(this also means your check could just be )you don't want to get it, you want to check for it's existence. Either way,  is just a wrapper around  but you don't see people checking for membership in mappings with:To summarize, use: if you just want to check for existence, while, use  if you actually want to do something with the value you might get.
There is a case for either solution, depending on what you want to do conditional on the existence of the environment variable.Case 1When you want to take different actions purely based on the existence of the environment variable, without caring for its value, the first solution is the best practice. It succinctly describes what you test for: is 'FOO' in the list of environment variables.Case 2When you want to set a default value if the value is not defined in the environment variables the second solution is actually useful, though not in the form you wrote it:or perhapsNote that if you have several options for your application you might want to look into , which allows to merge multiple dicts based on keys. There is an example of this in the  documentation:
To be on the safe side useA corner case with the above answers is when the environment variable is set but is emptyFor this special case you getor To avoid this just use Then you getWhen do we have empty environment variables?You forgot to set the value in the  fileor exported asor forgot to set it in  


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
