Natural Text
Given the following class:When all the threads are done, there's still one active thread -  on the last line gets me that number.The active thread is  - as printed with .Can I assume that all my threads are done when ?Or can, for instance, imported modules start additional threads so that my threads are actually done when  - also the condition for the loop I'm using in the run method.
You can assume that your threads are done when  reaches 1. The problem is, if any other module creates a thread, you'll never get to 1. You should manage your threads explicitly.Example: You can put the threads in a list and join them one at a time. The relevant changes to your code are:
according to docs  includes the main thread, so if you're at 1 then you're most likely done, but if you have another source of new threads in your program then you may be done before  hits 1. I would recommend implementing explicit  method on your  and keeping track of your workers and explicitly joining them to main thread when needed instead of checking that you're done with  calls.Also remember about GIL...


Answer URL
https://docs.python.org/3/library/threading.html#threading.enumerate
