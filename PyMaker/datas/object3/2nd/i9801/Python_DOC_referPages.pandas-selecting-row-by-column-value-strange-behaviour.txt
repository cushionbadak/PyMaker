Natural Text
Ok, I have a pandas dataframe like this:The reason of the strange number of the index is because it comes from a csv converted to pandas dataframe with some values filtered. Columns , ,  are not really relevant.I am trying, in , to see the some rows filtering by latitude, so I do (if the dataframe is ):orand I can see if the value is present or not, but sometimes it outputs nothing for latitude values that I am seeing in the dataframe !?! (For instance, I can see in the dataframe the value of latitude 27.702 and when I do  or  I get an empty dataframe and I am seeing the value for such latitude). What is happening here?Thank you.   
This is probably because you are asking for an exact match against floating point values, which is very, very dangerous. They are approximations, often printed to less precision than actually stored. It's very easy to see  printed, say, and think that's all there is, when in fact the value is really ; the display function has simply truncated the result. But when you try a strict equality test on the attractively short value, boom. Doesn't work.Instead of Try:Now you'll get values that are within a certain range of the value you specified. You can set the tolerance. 
It is a bit difficult to give a precise answer, as the question does not contain reproducible example, but let me try. Most probably, this is due floating point issues. It is possible that the number you see (and try to compare with) is not the same number that is stored in the memory due to rounding. For example:You can overcome this issue using  instead of :
In addition to the answers addressing comparison on floating point values, some of the values in your  column may be string type instead of numeric.EDIT: You indicated that this is not the problem, but I'll leave this response here in case it helps someone else. :)Use the to_numeric() function from pandas to convert them to numeric.


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
