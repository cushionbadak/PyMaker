Natural Text
In both Python2 and Python3, in the stack trace the  of a function is not used, the original name (the one that is specified after ) is used instead.Consider the example:The output is:Why so? How do I change the name that is used in the stack trace? Where is the  attribute used then?
So, basically every function has three things that can be considered being name of the function:The original name of the code blockIt's stored in the  (where  is the function object). If you use  to create function,  is that name. For lambas it's .This attribute is readonly and can't be changed. So the only way to create function with the custom name in runtime I'm aware of is :(There is also more low-level way to do this that was mentioned in a comment to the question.)The immutability of  actually makes sense: with that you can be sure that the name you see in the debugger (or just stack trace) is exactly the same you see in the source code (along with the filename and line number).The  attribute of the function objectIt's also aliased to .You can modify it () and you surely do on a daily basis:  copies the  of the decorated function to the new one. is used by tools like , that's why you need : so you don't see the technical details of every decorator in your documentation. Look at the example:Here is the  output:With  there is no sign of  in the documentation.Name of the referenceOne more thing that can be called function name (though it hardly is) is the name of a variable or an attribute where reference to that function is stored.If you create function with , the  attribute will be added to the current scope. In case of  you should assign the result to some variable: .Obviously you can create more than one reference to the same function and all that references can have different names.The only way all that three things are connected to each other is the  statement that creates function object with both  and  equal to  and assign it to the  attribute of the current scope. But they are not bound in any way and can be different from each other:Output:Pydoc:I thank other people for comments and answers, they helped me to organize my thoughts and knowledge.
Tried to explore the CPython implementation, definitely not an expert. As pointed out in the comments, when the stack entry of f is printed, the attribute  is used. Also,  is initially set to , but when you modify the former, the latter is not modified accordingly.Therefore, I tried to modify that directly, but it is not possible:Why are there two ways to say a function's name? Well, according to the documentation,  is defined for "class, function, method, descriptor, or generator instance", so in the case of functions it maps to that attribute, for other objects it will map to something else.


Answer URL
https://docs.python.org/3/library/stdtypes.html#definition.__name__
