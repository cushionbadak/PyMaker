Natural Text
I struggle to understand the  method in Python's regular expressions library. In this context, I try to do substitutions on a string depending on the matching object.That is, I want to replace the matched objects ( and  in this example) with a particular string in the  dictionary (with  and  respectively).As seen from this question and answer,I have tried this:But I get  for  followed by an  when computing .Any explanations and example code would be appreciated.
The  regex does not match a newline, so your  would not be used. Else, add  to the regex: .Next, you get  because your regex does not contain any named capturing groups, see  docs:  The name of the last matched capturing group, or  if the group didnâ€™t have a name, or if no group was matched at all.To replace using the match, you do not even need to use , use  with a lambda as the replacement:See the Python demoThe  gets the whole match (the whole match is stored in ). If you had a pair of unescaped parentheses in the pattern, it would create a capturing group and you could access the first one with , etc.
Despite of Wiktor's truly pythonic answer, there's still the question why the OP's orginal algorithm wouldn't work.Basically there are 2 issues:The call of  will substitute all matches of  with the replacement value of the very first match.The correct call has to be .As documented here,  gets invoked dynamically with the current match object! does some unnecessary exception handling, which can be simplified:This is equivalent to Wiktor's solution - he just got rid of the function definition itself by using a lambda expression.With this modification, the  loop has become superfluos, as it does the same calculation multiple times.Just for the sake of completeness here is a working solution using . It builds the result string from the matched slices of :


Answer URL
https://docs.python.org/3/library/re.html#re.match.lastgroup
