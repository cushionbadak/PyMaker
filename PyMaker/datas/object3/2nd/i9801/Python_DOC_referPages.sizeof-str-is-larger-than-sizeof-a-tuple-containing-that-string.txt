Natural Text
The following code produces the given output.Output:Why does  print a smaller result when a second element is considered? Shouldn't the output be larger? I realize from this answer that I should be using , but the behavior seems odd nonetheless. I'm using .Also, as @Herbert pointed out,  takes up more memory than , which is a . Why is this?
This is due to the fact that  objects (and I'm pretty sure all containers except from string) assess their size not by including the actual sizes of their respective contents but, rather, by calculating the size of pointers to s times the elements they contain. That is, they hold pointers to the (generic) s contained and that's what contributes to its overall size.This is hinted in the Data Model chapter of the Python Reference manual:Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a containerâ€™s value.(I'm emphasizing the word references.)In , a struct where the information on the  type is contained, we see that the  field has  as its value:bit builds and bit builds of Python have a  equal to 8 bytes.This is the value that is going to be multiplied by the number of items contained in the  instance. When we look at , the  method that s inherit from  (examine ), we see this clearly:see how  (obtained from ) is multiplied by , which, is another macro that grabs the  value indicating the number of elements inside the .This is why, even if we create a somewhat large string inside a tuple instance:with the element inside it having a size of:the size of the tuple instance: equals that of one with simply  inside:For strings, each individual character increases the value returned from . This, along with the fact that s only store pointers, gives a misleading impression that  has a larger size than the tuple containing it.Just for completeness,  is the one that computes this. It really just multiplies the length of the string with the character size (which depends on what kind the character is ,  and  byte chars).The only thing I'm not getting with tuples is why it's basic size (indicated by ) is listed as . This sheds  bytes from the overall size returned; I haven't found any explanation for this (yet).


Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_itemsize
