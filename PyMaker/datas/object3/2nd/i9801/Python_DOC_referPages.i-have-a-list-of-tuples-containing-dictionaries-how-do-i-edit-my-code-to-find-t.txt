Natural Text
I have a data structure L = [(int, dict{key: values}), (int,dict{key: values})...].Given an input list [0,1] I want to find any dictionary key where both/all values of the input list [0,1] exist.Currently, my bug is that if I use input_list = [0,1], the function will return a match where the dictionary values are just [0] and where values are [0,1]. Only this second result is desirable. I feel like this is a minute change, but I can't grasp it. What do I change to make this happen?CodeOutputThank you:)
You have the code checking if  contains all the items in  the wrong way around.  checks that all the items in  can be found from . If you change it the other way around it will work as you expected:Note that if you would convert  to  you could easily check if  is a subset of . That would be easier to understand and more efficient:Output:
You can use set subtraction to solve:And I would recommend you to avoid constructions like this  because it confuses, it makes your code hard to understand.
Please read:Check if two unordered lists are equaland How can I compare two ordered lists in python?Depending on the semantics you want to use when checking for equality you can use one solution or the other. If you are going for a simple ordered list comparison, I would go with:


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
