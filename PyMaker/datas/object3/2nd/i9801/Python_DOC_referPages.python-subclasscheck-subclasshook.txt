Natural Text
The methods  and  are used to determine if a class is regarded as subclass of another. However, their documentation is very limited, even in advanced python books. How are they meant to be used and what is their difference (higher priority, side of relationship they refer to etc...)
Both methods can be used to customize the result of the  built-in function.Return true if subclass should be considered a (direct or indirect) subclass of class. If defined, called to implement .Note that these methods are looked up on the type (metaclass) of a class. They cannot be defined as class methods in the actual class. This is consistent with the lookup of special methods that are called on instances, only in this case the instance is itself a class.This method is the special method that is responsible for the customization of the  check. Like the "Note" states it has to implemented on the metaclass!This implementation will return False even if you have genuine subclasses:There are actually more interesting uses for  implementations. For example:With this implementation any class that defines  and  will return  in a  check:In these examples I haven't called the superclasses  and thereby disabled the normal  behavior (which is implemented by ). But it's important to know that you can also choose to just extend the normal behavior instead of completely overriding it:(Must be defined as a class method.)Check whether subclass is considered a subclass of this ABC. This means that you can customize the behavior of  further without the need to call  on every class you want to consider a subclass of the ABC. (This class method is called from the  method of the ABC.)This method should return ,  or . If it returns , the subclass is considered a subclass of this ABC. If it returns , the subclass is not considered a subclass of this ABC, even if it would normally be one. If it returns , the subclass check is continued with the usual mechanism.The important bit here is that it's defined as  on the class and it's called by . So you can only use it if you're dealing with classes that have an  metaclass:This will only go into the  of the first:Note that subsequent  calls don't go into the  anymore because  caches the result:Note that you generally check if the first argument is the class itself. That's to avoid that subclasses "inherit" the  instead of using normal subclass-determination.For example (from the CPython  module):So if you check if something is a subclass of  it will use the custom  implementation that is guarded by the . However if you have an actual class implementing the  interface you don't want it to inherit the  mechanism but you want the normal subclass mechanism.For example:Even though  implements  and the  checks for an  implementation the result in this case is . It still enters the  of  but it immediately returns  which signals to  that it should proceed using the normal implementation. If it didn't have the  then  would return !When should you use  and when ?It really depends.  can be implemented on the class instead of the metaclass, but requires that you use  (or a subclass of ) as metaclass because the  method is actually just a convention introduced by Pythons  module. You can always use  but it has to be implemented on the metaclass.In practice you use  if you implement interfaces (because these normally use ) and want to customize the subclass mechanism. And you use  if you want to invent your own conventions (like  did). So in 99.99% of the normal (not fun) cases you only need .
 and  are used to customize the behavior of  function.A lot more information in abc source code. is looked up on the type (metaclass) of a class. It shouldn't be defined for an ordinary class. check whether subclass is considered a subclass of some ABC. This means that you can customize the behavior of  further without the need to call register() on every class you want to consider a subclass of the ABC.Which means you can define  in your ABC class with some condition and all classes that satisfy that condition will be considerate as a subclass.For example:


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__
https://docs.python.org/3/reference/datamodel.html?#class.__subclasscheck__
