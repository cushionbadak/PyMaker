Natural Text
Could anyone explain why single element tuple is interpreted as that element in Python?AndWhy don't they just print the tuple  as ?See the examples below:
A single element tuple is never treated as the contained element. Parentheses are mostly useful for grouping, not for creating tuples; a comma does that.Why don't they just print (1,) as (1)?Probably because printing a builtin container type gives a representation that can be used to recreate the container object via , say :The docs for  provides some clarity on this:If at all possible, this should look like a valid Python expression  that could be used to recreate an object with the same valueAnswering your question,  is just integer  with a grouping parenthesis. In order to recreate the singleton tuple via its representation, it has to be printed as  which is the valid syntax for creating the tuple.
Because only  in your examples is tuple. The rest are expressions.
It's because  is not a tuple.  is  with parentheses surrounding it. As the python documentation statesit is the comma, not the parentheses, that define the tuple.SourceThe only tuple without a comma is a 0-tuple, which is . Note, you can check this by running  and seeing that it returns  not .
 is not a tuple, it's just parentheses around a number.  This is because sometimes you want to use parentheses to indicate order of operations, for example: (x+y)*z.  This obviously doesn't refer to a tuple containing , it's just to show that the addition should happen before the multiplication. is not a tuple for the same reason, the parentheses are just saying "evaluate what's inside before moving on". is just calling the print function on the number 1.  When calling a function, a trailing comma is allowed. However, in python2, this will probably pring , because  isn't a function. is the only thing that prints a tuple, because we are now actually passing a tuple into the function.
This is very detailed answer from @Ray TotalSure, in general parentheses don't change the meaning of an expression. For example you can say 4+(1) and it will be 5, the same way 4*(2-1) would be 4. Because the convention is to use parentheses for grouping of subexpressions, the designer of Python thought it would be too confusing to overload the meaning to mean both grouping and single-element tuples. Also Python has a type function. In fact type((2)) is int and type((2,)) is tuple. We don't want there to be any ambiguity, which there would be if (2) were treated as a tuple


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
