Natural Text
I am using metamap in a project as an external program. Complete code in the project is written in Python. At one place in my code I have to pass input file as an argument to metamap and then read the output file metamap generates. I am calling metamap as follows:In above case, output file is generated by the name temp_input.out in current working directory. I then need to process the contents of this output file. Issue I am currently facing is that python code moves forward considering output file to be empty. How can I ensure that output file is completely written and only then python code moves forward. As of now, I am doing following which I feel is not the right way or cleanest way to achieve the above.
You could deadlock the child process using "subprocess.Popen.wait(timeout=None)".https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait
How can I ensure that output file is completely written and only then python code moves forward.In general, if you want the processing to be reliable, you need to have the process writing the file send some sort of signal that it has successfully written the input file.  For example, it can start with the file having a name such a , then when it's complete rely upon the fact that most systems implement  atomically and  the file to .  Your code won't process any file that has the  pattern of a name.  Or, after successfully writing the file, the writing process can create a flag file called  to signal that  is, well, done copying.In this case, since you spawn the child process, you need to not only (presumably) wait for the child process to finish, you also need to somehow determine that it ran successfully to completion.  Does the  process provide a return code that you can use?  Most utilities return  when they're successful and non-zero when they fail for some reason.There's no other way to do it reliably.  Because there's no way without additional information that the reading process can know that the input file has been fully copied.  The writing process can fail halfway through writing the file - network connections can fail, for example.Again - there's no other way to do this reliably.
In linux there is a set of events called inotify that you can use to detect if a file is being accessed by a process or not.There's a python lib for accessing this called pyinotify.This blog post explains how to check a file with pyinotify.http://www.saltycrane.com/blog/2010/04/monitoring-filesystem-python-and-pyinotify/Also,  might be an option, in which case you could use http://pythonhosted.org/psutil/index.html?highlight=lsof#psutil.Process.open_files.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait
