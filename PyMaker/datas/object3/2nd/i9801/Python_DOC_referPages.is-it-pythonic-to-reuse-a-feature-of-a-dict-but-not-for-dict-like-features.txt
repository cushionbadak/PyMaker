Natural Text
I would like to use the bracket expression used to access a value in a , but without any other  features.In the example below, I use the expression  to query  in the same way as a . There are no other functionalities of a  behind, what is returned is computed (it is either a color when  is , or  for anything else).This code works as expected.What I would like to understand is whether the reuse of a dict functionality (the bracket call) is pythonic, or at last acceptable.Note: I understand that this could be accomplished though other means (liek a function) but I am specifically instersted in reusing the brackets call. Reusing, not misusing (which is the core of my question)
If you don't need any functionality from dict, just provide read more about it
Yes, it is unpythonic. There's no need to inherit from a dictionary, as all you gain is slightly longer method names and attribute access syntax. Make an ordinary class with no explicit inheritance to return a random color. Since your class's  was returning a constant for every other value, make a class or instance variable with a constant that can be retrieved with a specific name instead of just "anything that isn't ." If you're worried about the user not being able to enter random attribute names to access that constant, remember that "There should be one – and preferably only one – obvious way to do it" (from PEP-20, The Zen of Python).If this is all the class does, I don't see much need for a class at all - you could simply define a function  and a string (or other constant) .


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
