Natural Text
So I have the following function : And I get the following output when I want to print the list : Why does this happen and how can I fix it?
 doesn't care that your class has a  method. When you print an object,  calls  on the object to get a suitable string. The  function attempts to call the object's  method, but if it doesn't have one then it calls the object's  method instead. And if their isn't a definition for  in that object's class definition then you'll get the one inherited from the parent class, typically that will be the default   from the base  type. and the other built-in collections like ,  and  don't have a  method, so when you try to convert them to strings (either explicitly using the  function, or implicitly via ) their  method is called. And those  methods in turn call  on each item in the collection. So when you pass any of those collection objects to  you will always see the  of the items. And explictly calling  on the collection will make no difference. If you want to see the  representation of the items in a  or collection you will need to iterate over the collection, calling  explicitly on each item.Here's a tiny code snippet (suitable for Python 2 & 3) that illustrates these points.outputSo if you want to be able to print a list of your objects as a single entity and have the object's strings be more human-friendly, you have a couple of choices:Change the name of your  method to . This is the simplest way, and as I said earlier, the  will be used if a  can't be found when the object gets passed to .Leave the existing  method alone and create a  that's more human-friendly. However, it's suggested that the  display useful info to a programmer who sees it, and if practical it's nice if the  string can be copy & pasted into the interpreter or script to recreate the object.Leave the existing  method alone and create a  that calls . While valid, this is a bit silly. A related strategy is to set  as a class attribute that references . See below for an example.
This is just the  of the object. The  is meant to be a machine readable representation of the object and you can change it by overiding it.


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
