Natural Text
I know that I can do:I can also do this:But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:Is there any way that I can do something like this (since the action to take in both exceptions is to ):Now this really won't work, as it matches the syntax for:So, my effort to catch the two distinct exceptions doesn't exactly come through.Is there a way to do this?
From Python Documentation:An except clause may name multiple exceptions as a parenthesized tuple, for exampleOr, for Python 2 only:Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using .
How do I catch multiple exceptions in one line (except block)Do this:The parentheses are required due to older syntax that used the commas to assign the error object to a name. The  keyword is used for the assignment. You can use any name for the error object, I prefer  personally.Best PracticeTo do this in a manner currently and forward compatible with Python, you need to separate the Exceptions with commas and wrap them with parentheses to differentiate from earlier syntax that assigned the exception instance to a variable name by following the Exception type to be caught with a comma. Here's an example of simple usage:I'm specifying only these exceptions to avoid hiding bugs, which if I encounter I expect the full stack trace from.This is documented here: https://docs.python.org/tutorial/errors.htmlYou can assign the exception to a variable, ( is common, but you might prefer a more verbose variable if you have long exception handling or your IDE only highlights selections larger than that, as mine does.) The instance has an args attribute. Here is an example:Note that in Python 3, the  object falls out of scope when the  block is concluded.DeprecatedYou may see code that assigns the error with a comma. This usage, the only form available in Python 2.5 and earlier, is deprecated, and if you wish your code to be forward compatible in Python 3, you should update the syntax to use the new form:If you see the comma name assignment in your codebase, and you're using Python 2.5 or higher, switch to the new way of doing it so your code remains compatible when you upgrade.The  context managerThe accepted answer is really 4 lines of code, minimum:The , ,  lines can be handled in a single line with the suppress context manager, available in Python 3.4:So when you want to  on certain exceptions, use .
For python 2.5 and earlier versions, the correct syntax is:Where  is the Exception instance.
From Python documentation -> 8.3 Handling Exceptions:A  statement may have more than one except clause, to specify  handlers for different exceptions. At most one handler will be  executed. Handlers only handle exceptions that occur in the  corresponding try clause, not in other handlers of the same try  statement. An except clause may name multiple exceptions as a  parenthesized tuple, for example:Note that the parentheses around this tuple are required, because  except  was the syntax used for what is normally  written as  in modern Python (described  below). The old syntax is still supported for backwards compatibility.  This means  is not equivalent to   but to  which is not what you want.
If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times. NOTES: If you, also, need to catch other exceptions than those in thepre-defined tuple, you will need to define another except block.  If you just cannot tolerate a global variable, define it in main()and pass it around where needed...
One of the way to do this is..and another way is to create method which performs task executed by  block and call it through all of the  block that you write..I know that second one is not the best way to do this, but i'm just showing number of ways to do this thing.
Python 2.7 Documentation states that:A try statement may have more than one except clause, to specify  handlers for different exceptions. At most one handler will be  executed. Handlers only handle exceptions that occur in the  corresponding try clause, not in other handlers of the same try  statement. An except clause may name multiple exceptions as a  parenthesized tuple, for example:Note  that the parentheses around this tuple are required, because except  ValueError, e: was the syntax used for what is normally written as  except ValueError as e: in modern Python (described below). The old  syntax is still supported for backwards compatibility. This means  except RuntimeError, TypeError is not equivalent to except  (RuntimeError, TypeError): but to except RuntimeError as TypeError:  which is not what you want.


Answer URL
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
