Natural Text
I'm a newbie to python. Currently i'm learning about list. I try to add every words from the "words.txt" file to a list. But when I tried every characters becomes an element of the list. I tried  and it worked. But I want to know why the first way makes every characters an element and not words?
 is a string, which is itself a collection of objects(characters), if you used , you will get the 1st element in the word, by default python lists maintain data types, so a collection of characters remains a collection of characters when you append it to the list and results in a list of characters, in the second case you are explicitly declaring that you want to append  to the list, and not it's characters, so it becomes a list of strings. If that is still not clear feel free to comment.
When you want to add word into list as an element.usually use .append() 
you only can add list to list, so when you add string to list you treat the string as list of characters so it adds the characters as elements, in second way you have declared that you have list and the word is element itself so it adds the whole word as element.
In python, a string itself is internally a list of 'unicode' characters, albeit considered a different datatype. So when you do it appends each new character to the empty list. But when you do  , [word] is considered a list of one single string, so it appends only one item to the empty list
The  operator on a  is equivalent to calling its extend method, which takes an iterable as an argument and appends each item to the list. With , the right hand operand of  is a string, which is an iterable, so would be equivalent  to writing .
Lets go through your code:Consider  consists of the following text:So, you first open this file with , then you initialize a list called :Suggestion: Here its advisable to use the  context manager to open the file. That way, you wouldn't have to close the file explicitly later. If you are just using  as above, you'd have to close the file in the end with .In the next line, you iterate over each . Lets print  which basically shows each line in the text:Then you are iterating over  which splits the above lines of text into individual lists of words. If we print :Suggestion: You could also make use of  to break each line(boundary) into a separate list. This is different from  as it does not break each line into words. This method also preserves whitespaces, so you will have to get rid of them with  if your text has any whitespaces in the end or beginning. This method has no side effects and you can still use it:In the next piece of code you are iterating over each (word? or rather letter) in  (as you know we received a list of words with this method before) and then incrementing  with the set of letters for each . So, basically you get a set of letters because you iterated over each word in the lists:But most likely you are expecting a list of words in a single list . We can achieve this with the  method as it takes each  in  and simply appends(or adds to the end of the list) to :And then when we look at the other variation :This has the same effect as . Why is that so? Lets print  which is nothing but a list of each word. This is expected because you are taking each  from  and then concatenating to  : is equivalent to . To see how this concatenation works, consider the following example which is equivalent to this statement:Lets try  on this example:This shows that concatenation is equivalent to appending but it is recommended practice to use  for lists:Returning back to the original question, let's make the whole code more compact using list comprehensions:You will notice I've used the  context manager to leave file open/close to Python after the job is done(exits the context). Next, I've created a list  with the same loops inside. This is also called a list comprehension and is one of the most powerful features in Python. This makes the code more compact, easy to read and faster than appending.Finally, initializing  is much more cleaner than . It is also much faster.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
