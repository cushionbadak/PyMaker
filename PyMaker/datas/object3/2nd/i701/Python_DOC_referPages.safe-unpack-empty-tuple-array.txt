Natural Text
The line  outputs , which can be unpacked like . However, in the event of a non-match ( returning ) this unpacking throws .What is the correct way to safely unpack this array of tuples, which would work in both match () and non-match () scenarios?
The generic answer is to look before you leap:or to ask for forgiveness:but you are actually overcomplicating things by using  to find a single result. Use  and extract your matched groups:or
There isn't one; you have to explicitly check the return value to see if there is, in fact, anything to unpack.In Python 3.8, you'll be able to compact this slightly:
Since  returns an empty list in the event of a non-match, you can use the  operator to assign default values to  and  instead:
This is terrible, so don't do it, but you could useto do what you want as a one-liner without using  (which could return multiple hits, and so still fail, or ignore spaces depending on whether you limit the  to ).Given your pattern current matches literally anything with a single space in it (capturing everything before the final space, and everything after it), avoid  doesn't gain you much, but if you want to actually exclude stuff with more than one space, or things that match only partially, you could switch the  to , and possibly  to :Either way, it abuses the fact that a non-match returns , which has no  method, so  can return a bound  method on a match, or a  that returns the defaults otherwise. Regardless, you immediately call it, and get the result of  or the  as appropriate.Again, don't do this. It's legal, it's just ugly (and likely slower than any reasonable method).


Answer URL
https://docs.python.org/3/library/re.html#re.search
https://docs.python.org/3/library/re.html#re.Match.groups
https://docs.python.org/3/library/re.html#re.Match.groups
