Natural Text
I have the following code to compare a base class' current (empty) implementation of required functions to its sub-classes, which must implement them in some different way in order to be considered acceptable at runtime. Without using a  and implementing  decorators on these base class methods, how do I go about doing this? For now, I'm writing the following  hook on my ad-hoc, metaclass-less abstract base classes in multiple places in my project, but it feels wrong.Is there a better way to do this? Bonus points if I can get typechecking errors in my editor while defining sub classes of this .
Indeed,  you should not rely on  for any code that should be used in serious contexts (i.e. outside experimentation realm, or tools to deal with the source-code itself) The plain and simple  operator is enough to check if the method in a given class is the same as in the base class. (In Python 3. Python 2 users have to take care that methods are retrieved as  instead of the raw-functions)Other than that, you are taking several unneeded turns to get to the base-class itself - the little documented and little used special variable  can help you with that: it is an automatic reference to the class body where it is written (do not mistake with  which is  a reference to the sub-class instead).From the documentation:This class object is the one that will be referenced by the zero-argument form of  is an implicit closure reference created by the compiler if any methods in a class body refer to either  or . This allows the zero argument form of  to correctly identify the class being defined based on lexical scoping, while the class or instance that was used to make the current call is identified based on the first argument passed to the method.So, while keeping your main approach, the whole thing can be quite simpler:If you have a complex hierarchy, and will have parent classes with other mandatory methods that the subclasses of those will have to implement - and therefore, can't hard code the needed methods in the , you can still use the  decorator from , without using the  metaclass. All the decorator does is to create an attribute on the method that is checked on the metaclass. Just make the same check  in a  method:Keep in mind this just checks for methods that show up in a class' .  But customizing  is used seldon enough for it to be reliable - just take care to document that. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#creating-the-class-object
https://docs.python.org/3/reference/datamodel.html#creating-the-class-object
