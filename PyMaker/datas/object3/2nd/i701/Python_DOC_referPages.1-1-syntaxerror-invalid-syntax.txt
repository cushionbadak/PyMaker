Natural Text
Why am I getting a ? The line in the console points to the comparison operator '=='. I was trying to compare 2 tuples. Yes,  works.Is this related to this ... ?I am finding it funny - Python 3.6.3, doesn't happen on 2.7 or 3.5...This is getting a bit ugly. Just tried new IDE - Pycharm with python 3.6.3. Console gives me syntax error on ",ord A" but Spyder 3.3.1 doesn't. Is this something to do with IPython? 7.2 gives same result on ",ord A" >> 65.Ok, 5 Feb 2019. I seem to have fallen into a black hole. An IPython black hole. Seems Like I was getting confused by another sub language IPython which is what the console uses. %Autocall in IPython 'Make functions callable without having to type parentheses'.  Although setting %Autocall to 0 still seems to enable this behaviour.
It's invalid syntax. Python sees a tuple with 2 values created from the expressions  and . The latter is an incomplete expression, so you get an error just for that part.See the Operator precedence table, tuple displays have the highest precedence, so the expressions between commas are executed before creating the tuple object from the results.So yes, you can create tuples with just commas, but then each constituent part has to be a complete expression. You can't create a tuple without using parentheses if you want the tuple to be part of a larger expression.That's because for any expression that doesn't use parentheses but which does contain a comma, the comma will result in a tuple being created from the sub-expressions that lie before and after the comma (with the part coming after being optional). Use parentheses to change what Python sees as a complete expression. So if you want to compare two distinct tuples, you must use parentheses to deliniate both tuples, so use . As soon as you drop either set of parentheses you are creating a single tuple containing larger expressions (e.g.  creates a single-element tuple from the  equality test, resulting in ).


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
