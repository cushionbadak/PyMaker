Natural Text
This question already has an answer here:What is the difference between `sorted(list)` vs `list.sort()`?                    6 answers                I'm beginning python and am a little confused about why the following outputs :I was expecting the output to be [1,2,3], but instead I get None. Please note: I am aware of how to get the correct output now but am still curious about what is happening here for the output to be none.In my mind, the second line evaluatesx.sort() as [1,2,3], and then this be assigned to variable y.
The documentation for list tells you that calling the sort method on a list will do an INPLACE sort. I.E it will sort the values inside the current object. Thus it doesnt return any value for you to store in y.However you may have a legitimate reason to want to sort the list of X without actually changing it and instead store the sorted output as a new object. You can do this by passing X to sorted function 
OP: I was expecting the output to be [1,2,3] but instead I get none.Ans: because it does not return a list, rather just sorts it.Hence:OUTPUT:EDIT:But if you must assign it to , you could create a new sorted list and then assign it:OUTPUT:
The code should beOutputThere is no need to assign  to yIf you want to assign to other variable use:Hope it helps
The reason why what you're doing is not working is that the method  does not return anything. Instead, it applies itself to the object which calls it (in this case ), but does not return any result.You can verify this with , which returns .To achieve what you'd like to do, you could first copy x: , then sort y: .Here you're able to check that  is still equal to , while  equals 
See  in the documentation:This method modifies the sequence in place for economy of space when  sorting a large sequence. To remind users that it operates by side  effect, it does not return the sorted sequence (use sorted() to  explicitly request a new sorted list instance).This is why your  ends up being .works, as  returns the sorted list and doesn't sort in-place.
Python lists have a built-in  method that modifies the list in-place. There is also a  built-in function that builds a new sorted list from an iterable.Source: Python3 sorting HOW TOTry this:
This has to do with mutability of python objects.  is mutable. The  method does an  change to the list  and does not   a copy of the object. Hence your  is . However if you inspect  itself it has  been modified and no longer holds the original list.


Answer URL
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/howto/sorting.html
