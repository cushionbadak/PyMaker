Natural Text
I understand that  (docs) returns the size of the container (list) itself, not considering the content, so I get that it returns the same size (72) for .However, why would a copy or a deep copy require more memory for holding the same data (96 instead of 72)?The docs state:getsizeof() calls the objectâ€™s __sizeof__ method and adds an additional garbage collector overhead if the object is managed by the garbage collector.So the only plausible reason for the difference is that a copy is handled differently by the garbage collector, right? But why would it?My environment: Win 10, Python 3.4.3 64 bit
Lists use a resize policy that involves sometimes keeping spare space on the end to accommodate more elements, to guarantee amortized constant time appends. Some of your lists have more spare space on the end than others. Python doesn't promise how much spare space any list will have.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython
