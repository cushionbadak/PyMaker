Natural Text
I need to add an attribute (holding a tuple or object) to python objects dynamically. This works for Python classes written by me, but not for built in classes. Consider the following program: This correctly prints . However the following program doesnt work.Both of the above line throws the following error Now, the reason found from these questions (i.e., Attribute assignment to built-in object, Can't set attributes of object class, python: dynamically adding attributes to a built-in class) is Python does not allow dynamically adding attributes to built_in objects. Excerpt from the answer: https://stackoverflow.com/a/22103924/8413477 This is prohibited intentionally to prevent accidental fatal changes to built-in types (fatal to parts of the code that you never though of). Also, it is done to prevent the changes to affect different interpreters residing in the address space, since built-in types (unlike user-defined classes) are shared between all such interpreters.However, all the answers are quite old, and I am badly in need of doing this for my research project. There is a module that allows to add methods to built in Class though: https://pypi.org/project/forbiddenfruit/However,it doesnt allow adding objects/attributes to each object. Any help ?
You probably want . From the doc,This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects.Like an attribute, and unlike a plain dict, this allows the objects to get garbage collected when there are no other references to it.You'd look up the field withinstead ofTwo caveats: First, since a weak key may be deleted at any time without warning, you shouldn't iterate over a . Looking up an object you have a reference to is fine though. And second, you can't make a weakref to an object type written in C that doesn't have a slot for it (true for many builtins), or a type written in Python that doesn't allow a  attribute (usually due to ).If this is a problem, you can just use a normal dict for those types, but you'll have to clean it up yourself.
Quick answerIs it possible to add attributes to built in python objects dynamically in Python?No, the reasons your read about in the links you posted, are the same now days. But I came out with a recipe I think might be the starting point of your tracer.Instrumenting using subclassing combined with ASTAfter reading a lot about this, I came out with a recipe that might not be the complete solution, but it sure looks like you can start from here.The good thing about this recipe is that it doesn't use third-party libraries, all is achieved with the standard (Python 3.5, 3.6, 3.7) libraries.The target code.This recipe will make code like this be instrumented (simple instrumentation is performed here, this is just a poof of concept) and executed.SubclassingFist we have to add the  to anything we want to (this recipe have been tested only with dictionaries).The following code receives a value, finds out its type/class and subclass it in order to add the mentioned .with that in place you are able to:At this point, we know already a way to "add instrumentation to a built-in dictionary" but there is no transparency here.Modify the AST.The next step is to "hide" the  call and we will do that using the ast Python module.The following is an AST node transformer that will take any dictionary it finds and wrap it in an  call:Putting all together.With thats tools you can the write a script that:Read the target code.Parse the program.Apply AST changes. Compile it.And execute it.This will take our target code, and wraps every dictionary with an  and execute the result of such change.The output of running this against our target code,is:Working exampleYou can clone a working example here.
Yes, it is possible, it is one of the coolest things of python, in Python, all the classes are created by the class You can read in detail here, but what you need to do is this*Edited because inheritance was missing, you need to pass the original class as a second argument (in tuple) so that it updates, otherwise it simply re-writes the class) 


Answer URL
https://docs.python.org/3/library/weakref.html#weakref.WeakKeyDictionary
