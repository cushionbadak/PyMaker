Natural Text
In python 3.3 and later, when we override , we don't have to pass arguments and keyword arguments to  or . But this call to  returns an instance of a class.  How does python pass the rest of the arguments to  then?Can someone please explain whats happening here?  
You passed cls as an argument to , so the interpreter can check whether instance is an instance of cls.The initializer (__init__) is  automatically called by the allocator (__new__) as [Python 3]: object.__new__(cls[, ...]) (emphases are mine) states:If __new__() returns an instance of cls, then the new instance’s __init__() method will be invoked like , where self is the new instance and the remaining arguments are the same as were passed to __new__().If __new__() does not return an instance of cls, then the new instance’s __init__() method will not be invoked.code.py:Output:Note that this isn't specific  to Python 3
What matters here is the initial call, say .Internally, Python calls  as a class method on class  with the passed parameters. What  actually does is not really important, it is just supposed to return an object.It does use  to build a  object. As the created object has the correct class, Python calls  on it with the initial parameters.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__init__
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__init__
