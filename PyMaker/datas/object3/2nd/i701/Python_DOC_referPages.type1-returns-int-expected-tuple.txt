Natural Text
I am using Python 3.6, and I am expecting type(1,) to return a tuple. According to this link:... a tuple with one item is constructed by following a value with a comma...What am I missing?
The issue lies in how python has to interpret function arguments, while allowing the "quality of life" trailing comma. Functions are called with parentheses with comma separated arguments. When you pass , There is ambiguity between a comma separated argument with a trailing comma, and an actual tuple. A simple example:To see how python is actually accepting the argument, you can use the  function.To specifically ensure you pass a tuple as the first argument, you should wrap it in parenthesis and resolve ambiguity.The reason why it works after assigning is because the ambiguity is resolved while storing the value as a tuple.Additional infoAs for when trailing commas can be useful, we can refer to the relevant PEP8 section.When trailing commas are redundant, they are often helpful when a  version control system is used, when a list of values, arguments or  imported items is expected to be extended over time. The pattern is to  put each value (etc.) on a line by itself, always adding a trailing  comma, and add the close parenthesis/bracket/brace on the next line.Which means, you should never be putting redundant trailing commas in a single line.I personally don't run into much issues with functions that change, but trailing commas are life-savers when maintaining lists or dictionaries that can change over time. For example:Adding or removing values from a list like that only requires changing a single line in isolation like following, making it really easy to track in version control commits.
From the docs:Tuples may be constructed in a number of ways:Using a pair of parentheses to denote the empty tuple: () Using a trailing comma for a singleton tuple: a, or (a,) Separating items with commas: a, b, c or (a, b, c) Using the tuple() built-in:tuple() or tuple(iterable)According to this, all of the following are tuples. You will notice explicit assignment to a variable removes all ambiguities:When we look at , we should keep in mind that  is a function and the trailing comma is an argument separator. The  is the first argument which is an integer and as trailing commas are allowed in Python, this is a valid statement but much less explicit. According to the official docs for , it is recommended to use the built-in isinstance function for type-checking which is more explicit:


Answer URL
https://docs.python.org/3/library/functions.html#repr
