Natural Text
I've been working on a performance critical application which requires frequently requires making copies of a 2D list of integers and modifying the copy (I'm implementing the minimax algorithm).I've noticed there is a huge difference in performance between a copy, and a deepcopy on lists with the same number of elements, and I'd like to understand if my thinking is correct.To reproduce my problem, run the following code: Now, timing the statements below, you should see timings similar to mine.Both  and  have a million elements, but reliably copying the former is 200x faster than a nested list with the same number of elements. I thought this would have to do with the fact that making deep copies of nested lists might require some recursive implementation that is slow, so I triedAnd the timings still show a massive slowdown. I've checked the docs  but not much explanation was offered. However, from the timings, I suspect that  is copying each int as well, creating new integers. But this seems like a wasteful thing to do. Am I right in my thinking here? What is deepcopy doing here that  and shallow copy don't?I've seen deepcopy() is extremely slow but it seems that question is asking for an alternative rather than an explanation (it wasn't clear to me). 
 isn't copying the ints. There's no way it could do that anyway. is slow because it needs to handle the full complexity of a deep copy, even if that turns out to be unnecessary. That includes dispatching to the appropriate copier for every object it finds, even if the copier turns out to basically just be . That includes maintaining a memo dict and keeping track of every object copied, to handle duplicate references to the same objects, even if there are none. That includes special copy handling for data structures like lists and dicts, so it doesn't go into an infinite recursion when trying to copy a data structure with recursive references.All of that has to be done no matter whether it pays off. All of it is expensive.Also,  is pure-Python. That doesn't help. Comparing  to , which performs a very similar job,  wins handily due to the C implementation. (On Python 2, replace  with .)  still loses hard to an implementation that takes advantage of the known structure of the input, though:
In programming, deep copy is equivalent to a physical copy of something. It is an actual copy of the original object. In most programming tools, you can play around with it, modify it without affecting the original object.However, on the other hand, a shallow copy is a reference to the original object. If you change it, it will affect the original object as well.In short, since the deep copy is the actual copy of the original object, it is heavier that the shallow copy which just points to the original object.Shallow copy: You can have a picture(s) of your new furniture, and get an idea of what it really looks like. You can easily carry around the picture.Deep copy: You can go to the furniture shop, and look at the real furniture. You probably can't carry around easily, and you may need some help to take it home.
https://docs.python.org/2/library/copy.htmlThe difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the originalSo effectively, the shallow copy will create a new list and populate it with a reference to every element in the original list. Because every element in the original list is itself a list, it's much faster to just store a reference to this than it is to create a new copy. Deepcopy does some clever stuff in how it copies each element in order to avoid errors. But in essence you don't need to understand that to know why one shallowcopy is faster than deepcopy....


Answer URL
https://docs.python.org/3/library/copy.html#copy.deepcopy
