Natural Text
I have a method which takes a list of edges, an edge has this form :  and returns a dictionary of this form: this  represent a graph I want to define this dico by the comprehension way but I'm really blocked and I'm not even sure that we can do that so can someone tell me if it is possible ?this is my function:
Your code can't take advantage of  comprehensions easily because it's effectively a multidict (where a key doesn't have one value, but many).You can simplify the code a bit with :Using  means when a key isn't in the dictionary, it's immediately created with a brand new , so you don't need to perform membership testing at all.Note that I also used unpacking to named variables instead of repeated indexing to make the code a bit more self-documenting.The only way to make this work with an actual  comprehension would be to either:Rescan the  once for every input to gather all / pairs for a given  (but that's , so it's a bad idea if  can be large)Pack all the values for each  together ahead of time, so each sub- can be constructed all at once.Since option #1 is generally pretty wasteful, the only practical way to do this as a  comprehension without rescanning  over and over is option #2, which you can do in  with sorting followed by :That requires  work to sort  (if  is already sorted, Python's TimSort means it's closer to  work), then  work to group the results. Faster than , but still slower than the non-comprehension approach with  (which is  under all circumstances).
This is a little convoluted, but it seems to work:Basically for each , it adds every key: value pair in  with that . The outer comprehension doesn't need  or , so it just uses underscores to ignore those values. The inner loop needs to compare its value of  with the outer loop's value, which is why it uses a different name.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/itertools.html#itertools.groupby
