Natural Text
I want to pass a default argument to an instance method using the value of an attribute of the instance:When trying that, I get the following error message:I want the method to behave like this:What is the problem here, why does this not work? And how could I make this work?
You can't really define this as the default value, since the default value is evaluated when the method is defined which is before any instances exist. An easy work-around is to do something like this: will only be used if  is .To demonstrate the point of how default values work, see this example:And the output here:Notice how  was called only once, and that happened before the function was ever called!
In Python, the name  is not special. It's just a convention for the parameter name, which is why there is a  parameter in . (Actually,  is not very special either, and in particular it does not actually create the object... that's a longer story) creates a  instance, looks up the  method in the  class, and calls that method with the  instance as the first parameter. So it will end up in the  parameter if you provided it.Even if you had that parameter, though, you would not be allowed to write something like , because  is not in scope yet at the point where you set the default value. In Python, the default value for a parameter is calculated when the function is compiled, and "stuck" to the function. (This is the same reason why, if you use a default like , that list will remember changes between calls to the function.)How could I make this work?The traditional way is to use  as a default, and check for that value and replace it inside the function. You may find it is a little safer to make a special value for the purpose (an  instance is all you need, as long as you hide it so that the calling code does not use the same instance) instead of . Either way, you should check for this value with , not .
Since you want to use  as a default argument this implies that the method needs to be instance specific (i.e. there is no way to define this at class level). Instead you can define the specific method during the class'  for example. This is where you have access to instance specific attributes.One approach is to use  in order to obtain an updated (specific) version of the method:Note that with this approach you can only pass the corresponding argument by keyword, since if you provided it by position, this would create a conflict in .Another approach is to define and set the method in :This allows also passing the argument by position, however the method resolution order becomes less apparent (which can affect the IDE inspection for example, but I suppose there are IDE specific workarounds for that).Another approach would be to create a custom type for these kind of "instance attribute defaults" together with a special decorator that performs the corresponding  argument filling:
"self" need to be pass as the first argument to any class functions if you want them to behave as non-static methods.it refers to the object itself. You could not pass "self" as default argument as it's position is fix as first argument.In your case instead of "formatting=self.format" use "formatting=None" and then assign value from code as below:[EDIT]Note : do not use "format" as variable name, 'cause it is built-in function in python
You can't access self in the method definition. My workaround is this -


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
