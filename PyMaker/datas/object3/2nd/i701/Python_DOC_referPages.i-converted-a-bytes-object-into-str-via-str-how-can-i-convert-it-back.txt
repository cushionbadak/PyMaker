Natural Text
I converted some Chinese characters into UTF-8 in a string object for some operations.  I now have a problem when I try to convert the string object back into a bytes object.I tried using :I want to convert it back to a bytes object, so I can use  to convert it back to the original Chinese characters.
You should not convert  objects to strings with . You created a printable representation of the object.The proper way to convert from  to  is to decode the bytes to Unicode. If you have UTF-8 bytes, decode with that codec with the  method:You can also specify the encoding if you want to use the  function, see the   form in the documentation:If you accidentally used  and can't now get the original value by fixing that error and re-running your code, you can recover the original value by using :This should only be used to recover data, not as a production-level serialisation mechanism.  is quite slow, and not safe from denial-of-service attacks when used on user-supplied input (it is possible to crash Python or significantly slow it down with bad input).If you are using an API that should really work on bytes but for some reason is only accepting strings (usually a warning sign of a incorrectly designed and implemented API), then either use a binary-to-ASCII encoding (including base64 / base16 / base32 / base85) or decode the binary data as Latin-1.This is even more important if you are doing this to encrypt data. The printable representation of a  object only ever uses ASCII characters, always starts with  or , and always ends in  or . Any non-printable bytes (more than half of all 256 possible byte values) are represented with a limited range of  and  escape sequences. All this makes it much easier for a determined attacker to break your encryption. A best-practices encryption library will let you encrypt  directly. In fact, it is usually preferred to encrypt bytes.


Answer URL
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/library/stdtypes.html#bytes.decode
https://docs.python.org/3/library/stdtypes.html#str
https://docs.python.org/3/library/ast.html#ast.literal_eval
https://docs.python.org/3/library/binascii.html
https://docs.python.org/3/library/base64.html
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
