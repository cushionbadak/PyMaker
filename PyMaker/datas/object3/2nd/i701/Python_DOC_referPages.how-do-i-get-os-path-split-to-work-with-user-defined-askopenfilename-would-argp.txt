Natural Text
I need some help on how to properly use  with tkinters .I tried using  with the (head/tail) parts in different ways, but I have no idea how to make it work. Mainly on how to output it into a string text that can change and update on the user input. That would be next on the list, but right now I need to get this  part to work.If tkinter is not the right thing to use for what I want, let me know.InputUser: select file → Outputscrolled text: $modelname ".mdl" ← takes input of askfilename and auto completes scrolled text, adds .mdl at the end$body "body" "" ← only selected file$cdmaterials "" ← assuming the textures are in the materials folder and not models$sequence "idle" "" loop fps 30 ← only selected fileEditsI found something called  which sounds promising. I don't know if this will help me with what I'm trying to do.Also is there a way to print a string on a specific line of ?
It seems to me that your problem arises from faulty use of os.path.dirname and os.path.split . They are complementary in the sense that basicallyFurther you seem to pass two arguments to os.path.split, while according to the python reference it takes only one argument. 
 takes only one argument:All it does is split apart the "containing directory" portion from the "file name" portion, so here the containing directory is  and the file name is .  There is no notion of a file-name-extension—file names can have any number of dots in them, and, e.g.,  is just the name :There's no containing directory part here, so that's empty.The result of Tkinter's  appears to always be a full path name of an existing file (this is based on a quick experiment, not any documentation; the documentation appears to be a bit thin), so that after  you should always have a non-empty directory portion and file-name portion.  However, if all you want is to replace the final  extension with , consider doing just that, without calling  at all:If you wish to limit the extensions matched, you can do that with an argument to .  The documentation implies that  returns an empty string if the user presses "cancel".  However, this appears to be true only after at least one successful selection: instead, it returns an empty tuple for the very first "cancel".  So it seems best to test for this with :Incidentally, pathlib is a bit heavyweight for what it seems you're doing, but it's a handy way to express all of the kinds of manipulations you might ever want to do with paths.


Answer URL
https://docs.python.org/3/library/pathlib.html
