Natural Text
I'm trying to write a function, , from scratch, that returns the words that occur an  number of times or more in a sorted list. For example:since  and  are the only words that occur two or more timesanother example:What I've tried so far with no luck:
This would iterate over the  items  present inside the  list generated after splitting and add the each item to the dictionary and it's count as  if the item is not exists already in that dictiornary. If the item is already exists, it would increase it's corresponding value by . word acts like a key and the count acts like a value.Output:
The problem in the function you provide is that you're actually checking the length of each word (by doing ) instead of checking is frequency in the string. You could simply use  and a  like that:Output:
This is a working solutionSince you mentioned 'from scratch', I will write this code without importing any modules. Logic:1.  Iterate through the list of words (only once) {O(n) complexity} and keep count of the number of occurrences using a dictionary. A dictionary is ideal because you can't have duplicates 2. Iterate through the dictionary once {O(n) complexity} and check to see if the value is greater than N -> If so, append it to the list that will be returned (if not already in the list).
Counter is your friend on this one. Try something like this:And then:
You can use string's count and set built-in functions to achieve this:
I do like the Answers supplied here, but i was tempted to test the result difference between the  and the  variant, so i implemented both functions so they return a sorted array with the word and the number of counts combined so i can compare results better:Now i fed both function with 500 Words of Lorem Ipsum text. And i was astonished, that there actually where differences.A bug, that both versions have in common, is that they don't take into considerations punctuation. So if i have  in the text, it is not the same word as  or  or , and so on. Where you could easily replace/remove all punctuation before counting words.Also  is not the same as  which could be as intended, but if not you would also have to  the string.But the biggest difference is the counting itself. Here actually the  version fails, because it counts words, if they appear within another word it seams. So function  counted  8 times, which was correct, but function  showed 38 counts - so obviously  returns not only words, but also sub matches. too bad, that makes the  version fail.Trying this with an awkward sentence gave following result:Here you can see the behavior, and that the  version actually counts is and like twice, because they are contained in This and likely.So the winner is:Now this still does not take into consideration upper/lower case and punctuation. If you want a result, as i would expect it, you could add the  module to give you the expected result:The  does all the magic here and the result is:Guys, i love one liner function :) But if python beginners are asking here, we should not so much pay attention to our preferences, but rather towards a code that gives a good insight into python and why things behave like they do, so regards to the chosen answer, readable for beginners!


Answer URL
https://docs.python.org/3/library/functions.html#len
