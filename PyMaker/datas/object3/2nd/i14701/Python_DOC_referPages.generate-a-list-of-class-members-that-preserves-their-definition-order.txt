Natural Text
I am trying to automatically create some SQL tables from the definition of some Python classes, I tried using  but since it returns a Python Dictionary, it's not ordered so the definition order of the class members is lost.Reading on the internet I found the following hereI successfuly implemented a copy of it, and it appears to be doing what it should except that it's only saving the  in the  variable, and I need to have also the  member variables.Question:How could I get a list of the member variables preserving their definition order?, I don't care about class methods, and I am actually ignoring them.Note: The reason why the order is important is because the tables will have constraints that reference some of the table columns, and they must go after defining the column, but they are appearing before.Edit: This is a sample class in my real programDoingOutputs:Variable names are in spanish because their names will be used as the table column names, and also as the labels for a web application that will be generated from the database structure.I know that Django does something like this, but I already have my database inspector which does the opposite thing, so know I need a Django like functionality to use my generator.
UpdatedAs I commented, I think you're probably confusing instance attributes with class attributes and really want to keep track of the latter. Instance attributes are dynamic and can be added, changed, or removed at any time, so trying to do this with a metaclass like shown in your question won't work (and different instances may have a different group of them defined).You may be able to keep track of their creation and deletion by overloading a couple of the class's special methods, namely  and  and storing their effects in a private data member which is an . Do so will keep track of what they are and preserve the order in which they were created.Both of these methods will need to be careful not to operate upon the private data member itself.That said, here's something illustrating such an implementation:Output:A final note: It would be possible to create a metaclass that added these two methods automatically to client classes, which would make it easier to modify existing classes.
Maybe, python enum would be enough for the task. Indeed it supports stable order.The basic implementation of DDL would look like this:then later you could do:this gives youif you need to construct a proper table definition you could use Table1.<field>.value:and so on. Using this technique you could even link some tables to others thus constructing a complete definition of a whole set of tables and their relationships.As for data objects (e.g. a row in a table, or a row of a query results), here I think you don't any own ordering, you just need to maintain a link to a corresponding table class (from which the order can be restored, however I don't think it's such a requested option). So these classes could look like this:or simplyprobably you need a factory which would build row classes based on the query results and/or table definitions.Edit probably the idea with  in *Row classes requires some more polish but this heavily depends on your actual needs.P.S. Perhaps 'Table1.sexo' also should be an enum in our complicated times ;)


Answer URL
https://docs.python.org/3/reference/datamodel.html#metaclass-example
https://docs.python.org/3/library/enum.html
