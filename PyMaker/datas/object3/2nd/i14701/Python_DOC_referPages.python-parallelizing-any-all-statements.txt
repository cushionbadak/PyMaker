Natural Text
I am running some Python program and I've noticed that the bottleneck is in the line doing the following what I am wondering is - what would be the best way to make this into a parallel computation? foo(s) is a thread safe method inspecting s and returning True/False with respect to some criteria. No data structure is changed by foo.So the question isHow to test in parallel if all elements of a list l have property foo  , exiting as soon as one element of l does not satisfy foo?Edit. Adding more context. I do not know what kind of context you are looking for but in my scenario s is a graph and foo(s) computes some graph theoretical invariant (for example average distance or perhaps something similar)
This will sort of depend on what  is doing.  If it is I/O bound, waiting on blocking calls, than just using threads will help.  The easiest way is to create a pool of threads and use :If, however, the function is cpu bound, using a lot of processor power, this will not help you.  Instead you need to use the multiprocessing pool: This will use separate processes instead of threads, allowing multiple cpu cores to be used.  If your function  is very quick, though, the overhead will eliminate any advantage of parallel processing, so you need to test to make sure you get the results you expectsee: https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workersEDIT:I've assumed you're using Python 2.7.x.  If you're using Python3 you have more advanced concurrency features in concurrent.futures.  Including  and .  I would recommend using those for parallel processing and the asyncio lib for I/O bound problems.
Python comes with the   module; there's an example implementing a classical  algorithm (which could be used to implement ). Generally, you might want to look at  functionality:The Pool class represents a pool of worker processes. It has methods which allows tasks to be offloaded to the worker processes in a few different ways.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
https://docs.python.org/3/library/asyncio.html
