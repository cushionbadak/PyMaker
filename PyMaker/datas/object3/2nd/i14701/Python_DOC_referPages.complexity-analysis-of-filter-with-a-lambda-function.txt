Natural Text
Given two lists,  and This returns the intersection of the two lists.How can I find the complexity of this algorithm? I have found out that the time complexity of  is O(n) where n is number of elements in the list, but how about the ?
Your code does  comparison operations for elements.Your lambda function is executed  times, once per each element filtered. See documentation for  in Python 3 (Python 2):Construct an  from those elements of  for which function returns true.  may be either a sequence, a container which supports iteration, or an iterator(emphasis mine)Clearly the function is called at least 1 time for each (distinct) element in iterable - knowing when not to need call it would mean also solving the Halting problem in general case, which not even the Python core developers are yet to solve ;-). In practice in CPython 3 the  builtin creates an iterator which when advanced, executes the function once for each element (distinct or not) in the iteration order.The  does  comparisons in average and worst case, as documented.To speed it up, use a ; also you do not need a lambda function at all (use  magic method)This builds a  of the  once in  time and runs the filter against it with  average complexity for If the ordering of elements of  does not matter then you can also dowhich should have lower constants than doing the  above; and for really fast code, you should order the lists so that the smaller is turned into a set (since both intersection and set building have documented average complexity of , but set building most probably will have larger constants due to resizing the , thus it will make sense to build the set from the smaller to decrease the weight of these constants):Notice that Python 2 and 3 differ from each other.  in Python 3 returns a generator, and the actual running time depends on the number of elements consumed from the resulting generator, whereas in Python 2 a list will be generated upfront, which might be more costly if you need only the first values.
The complexity could be  where  is the size of  and  is the size of . However this analysis although plausible depends on the underlying python implementation of intersection (which might use sorting so the complexity could be  or sth)In order to experimentaly test this and verify the result, use this:generate variious test lists with varying items and sizes (including duplicates)test the function with the test lists and measure the time takenplot the results of time vs list sizes to verify the (exprimental) complexity


Answer URL
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/library/functions.html#filter
