Natural Text
I'm looking to break down the reverse() function and write it out in code for practice. I eventually figured out how to do it (step thru the original list backwards and append to the new 'reversed' list) but wondering why this doesn't work.
In Python, you cannot access/update an element of a list, if the index is not in the range of 0 and length of the list - 1.In your case, you are trying to assign to element at 0, but the list is empty. So, it doesn't have index 0. That is why it fails with the error,IndexError: list assignment index out of rangeInstead, you can use  function, like thisApart from that, you can use  function to count backwards like thisyou don't even have to increment the  yourself,  loop takes care of it.As suggested by @abarnert, you can actually iterate the list and add the elements at the beginning every time, like thisIf you want to create a new reversed list, you may not have to write a function on your own, instead you can use the slicing notation to create a new reversed list, like thisbut this doesn't change the original object.if you want to change the original object, just assign the slice back to the slice of the original object, like thisNote:  actually returns a reverse iterator object, not a list. So, it doesn't build the entire list reversed. Instead it returns elements one by one when iterated with  protocol.So, you might want to make it a generator function, like thisSo the  function returns a generator object. If you want a list, then you can create one with  function, like thisif you are just going to process it one by one, then iterate it with a  loop, like this
First off don't override build-ins ( in your case) second  has a  of 0 therefore cannot be accessed by index.you can create a list with values of the same lenght as your input list like so
You need to use .  is a valid operation, if the list has atleast one element in it, but  is empty in this very  first iteration. Also,  is not a good name for a variable, as there is a python builtin container with the same name:
You can't assign to an arbitrary index for a 0-length list. Doing so raises an IndexError. Since you're assigning the elements in order, you can just do an append instead of an assignment to an index:Append modifies the list and increases its length automatically.Another way to get your original code to work would be to change the initialization of  so that it has sufficient length to support your index operations:I would also like to note that it's not a good idea to name things after built-in types and functions. Doing so shadows the functionality of the built-ins.
To write the function you're trying to write, see thefourtheye's answer.But that isn't how  works, or what it does. Instead of creating a new list, it modifies the existing list in-place.If you think about it, that's pretty easy: just go through half the indices, for each index N, swap the Nth from the left and the Nth from the right.*So, sticking with your existing framework:As a side note, using  loops like this is almost always a bad idea. If you want to loop over a range of numbers, just use . Besides reducing three lines of code to one and making it more obvious what you're doing, it removes multiple places where you could make a simple but painful-to-debug mistake.Also, note that in most cases, in Python, it's easier to use a negative index to mean "from the right edge" than to do the math yourself, and again it will usually remove a possible place you could easily make a painful mistake. But in this particular case, it might not actually be any less error-prone…* You do have to make sure you think through the edge cases. It doesn't matter whether for odd lists you swap the middle element with itself or not, but just make sure you don't round the wrong way and go one element too far or too short. Which is a great opportunity to learn about how to write good unit tests…
probably check this out:


Answer URL
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/functions.html#reversed
https://docs.python.org/3/reference/expressions.html#generator.__next__
https://docs.python.org/3/reference/expressions.html#yieldexpr
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
https://docs.python.org/3/library/functions.html#reversed
