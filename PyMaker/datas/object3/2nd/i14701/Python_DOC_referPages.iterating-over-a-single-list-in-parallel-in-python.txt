Natural Text
The objective is to do calculations on a single  in parallel using   functions concurrently.  Maybe using (something like)  instead of classic  to analyze (LARGE) data that arrives via an ...In one simple example case I want to calculate :But without converting the (large)  to a  (as with )n.b. Do this using  and without , maybe using the  and/or  modules? -- edit --Being VERY specific: I was taking a good look at  hoping that there was a dual function like  that could do it. For example: If I was to be very very specific:  I am looking for just one answer, python source code for the "" procedure.
You can use  to turn your single iterator into three iterators which you can pass to your three functions.That will work, but the builtin function  (and  in Python 2) is not implemented in a way that supports parallel iteration. The first function you call will consume its iterator completely, then the second one will consume the second iterator, then the third function will consume the third iterator. Since  has to store the values seen by one of its output iterators but not all of the others, this is essentially the same as creating a list from the iterator and passing it to each function.Now, if you use generator functions that consume only a single value from their input for each value they output, you might be able to make parallel iteration work using . In Python 3,  and  are both generators. The question is how to make  into a generator.I think you can get pretty much what you want by using  (which was added in Python 3.2). It is a generator that yields a running sum of its input. Here's how you could make it work for your problem (I'm assuming your  function was supposed to be an iterator-friendly version of ):If you're using Python 2, rather than 3, you'll have to write your own  generator function (there's a pure Python implementation in the docs I linked above), and use  and  rather than the builtin  and  functions.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
