Natural Text
For example in a Python class can I have two different add methods that can detect whether I am adding an object to an integer, or an object to another object, or an object and a string, etc?
Yes, you can use  to check if an object is of a particular type.
Take a look at the multipledispatch module.Here is a rough but simple example of its use. You can see that it can dispatch to different methods depending on the argument types. It can also handle different numbers of arguments.
Python objects have special methods. Special methods are just methods that come packaged with a . For example an  type has an  special method that takes one argument.  which will add 5 to that  (an actual number is a bad example for an object, but  is an object type which can work for this example). You often see this in code like this:which is kind of like Not the best example, I know.You can create your own class with a method and in that method you can check against what   is, usually with . If you check for all sorts of types in your  method you are kind of doing polymorphism. Polymorphism like this is typically frowned upon in Python world. Why?Well if you have a class called  and an instance of that class called , what does  mean? And if we add , what should  print?If you need to apply data of one type to an object and data of another type to the same object, then usually if is more clear to apply each data type to a specific attribute of that object. Like so:Also I'd recommend getting to know about ducktyping. If you are good at it, checking for object types in your code kind of goes away.


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
