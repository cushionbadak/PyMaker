Natural Text
Sample code that works without issue:If you change  to  or  then the pool will not work at all. If you add another arg to  and then just pass in a  it'll work like this  â€” but why?
The documentation for  says the following:Call  with arguments  and keyword arguments . It blocks until the result is ready. Given this blocks,  is better suited for performing work in parallel. Additionally,  is only executed in one of the workers of the pool.Thus instead of taking star and double star arguments, it takes positional arguments and keyword arguments to be passed to the target function as the 2nd and 3rd arguments to the function; the second must be an iterable and the 3rd one a mapping, respectively.Notice that since the apply works asynchronously, you won't see any exceptions, unless you  and  them from the results; You can try simply:In the code above, the  waits for the completion of the 100th thread and returns its returned value - or tries as it will fail, because the managed dictionary cannot be used as the positional arguments:Thus, looking at your original question: do note that  is a list of length 1;  is the same as ; to have a tuple of length 1 you need to type . From the Python 3 tutorial section 5.3:A special problem is the construction of tuples containing 0 or 1  items: the syntax has some extra quirks to accommodate these. Empty  tuples are constructed by an empty pair of parentheses; a tuple with  one item is constructed by following a value with a comma (it is not  sufficient to enclose a single value in parentheses). Ugly, but  effective. For example:, , , or even  or  would work just nicely as your positional arguments; all these as  would result in an Iterable whose iterator yields exactly 1 value - that of . On the other hand, if you had passed almost any other kind of value than that unfortunate managed dictionary, you would have gotten a much more usable error; say if the value was , you'd have got:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
