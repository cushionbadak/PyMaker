Natural Text
I have a dictionary in some code which maps a key to a word, the key is the result of an  hash.  I have code that essentially wants to get the  for a , and when it doesn't already exist, add it to the dictionaryHere was my first implementation:After profiling my code I found this to be EXTREMELY slow.  So then I tried this, which is functionally equivalentThis turned out to be incredibly faster.  While I'm certainly happy about the performance improvement, I was wondering if someone could explain to me why.  Is it bad practice to check for something in a  function from a dictionary like that?  Is it generating copies of that every time (wasting a lot of computation)?
 creates a new list, which is linearly searched, which is much slower than a hash lookup. Remove the .The fastest way would be:
 is much faster than  Dict Lookup  is  complexity so its very fastthat said its still (very marginally)slower in the case where the key is in the dict than just the real answer is there is no real measurable difference between these 2 methods and do whatever feels right to you
This is to be expected (in python2). The  method returns a list of keys. So using the  operator on the list takes linear time. Trying to access the item is constant time, which is much faster.Note: you can simply use  instead of the .Note that dictionaries have a  method that already does what you want. Moreover if you do that operation a lot of time you should consider using  instead of a plain dictionary.
Elaborating on my comments above:as you can see, using d.keys() is about 100 times slower.
As mentioned  solves your problem without an  or  block.But "Easier to Ask for Forgiveness than Permission" [EAFP] and duck-typing is a common idiom in Python, compared to the more defensive "Look Before You Leap" [LBYL] idiom common in other languages, e.g. Java, C++.Jeff Knuth has an interesting blog post on it Write Clean Python: Use Exceptions


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/collections.html#collections.defaultdict
