Natural Text
I'm writing a specialised unit testing tool that needs to save the results of tests to be compared against in the future. Thus I need to be able to consistently map parameters that were passed to each test to the test result from running the test function with those parameters for each version. I was hoping there was a way to just hash the tuple and use that hash to name the files where I store the test results.My first impulse was just to call  on the tuple of parameters, but of course that won't work since  is randomized between interpreter instances now.I'm having a hard time coming up with a way that works for whatever arbitrary elements that might be in the tuple (I guess restricting it to a mix of ints, floats, strings, and lists\tuples of those three would be okay). Any ideas?I've thought of using the  of the tuple or pickling it, but repr isn't guaranteed to produce byte-for-byte same output for same input, and I don't think pickling is either (is it?)I've seen this already, but the answers are all based on that same assumption that doesn't hold anymore and don't really translate to this problem anyway, a lot of the discussion was about making the hash not depend on the order items come up and I do want the hash to depend on order.
Not sure if I understand your question fully, but will just give it a try.Before you do the hash, just serialize the result to a JSON string, and do the hash computing on your JSON string.If your params is a dictionary, use sort_keys=True to ensure your keys are sorted. 
One approach for simple tests would be to disable the hash randomization entirely by setting  in the environment that launches your script, e.g., in , doing:


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
