Natural Text
Gnome desktop has 2 clipboards, the X.org (saves every selection) and the legacy one (CTRL+C). I am writing a simple python script to clear both clipboards, securely preferably, since it may be done after copy-pasting a password.The code that I have seen over here is this:Unfortunately this code creates a file named  for some reason, so we have to remove it:However the main problem is that by calling both of these scripts, it leaves the  process open, even after I close the terminal.So we have 2 problems with this option:1) It creates a blank file, which seems like a flawed method to me2) It leaves a process open, which could be a security hole.I also know about this method:However this one leaves a  newline character in the clipboard, so I would not call this method effective either.So how to do it properly then?
MisconceptionsGNOME doesn't "have clipboards"; X11 has selections and cut buffers.  There are more than 2 of them, but mostly we worry about the selections  and .  Neither of them is "legacy".You can't "securely" clear these (by writing something else into the memory they occupy), since they aren't stored in your process.  Cut buffers (which are obsolete) are stored in the X server, and selections are stored (if anywhere) in the process providing them.  (If there is a clipboard manager running, they may be stored in several places and be impossible to kill completely.) has to leave a background process running to serve the selection it sets to any processes requesting it.  It's mostly useless when the selection is empty, but it does go away as soon as anything else is selected/copied, and it is surely not a security risk.Never use  (or  in any language), except to run a shell command specified by the user (like  in ).  It uses the shell (specifically, ), which (because it is meant for interactive use) requires various kinds of quoting to avoid misinterpretation of generated input, it affects signal handling, it can't set up the child's open files directly, and it makes it all too easy to ignore the exit status of the child.ToolsThere of course exist Python bindings for Xlib, including manipulating selections.  Probably overkill if selection-clearing is your only use case.Tkinter, as mentioned, probably supports this (Tk certainly does), but I haven't found a reference for it. and , as mentioned, are widely available (both are in the Ubuntu repositories, for instance).  You run external programs in Python using ; in PythonÂ 3.5 or better it looks like one of(The choice between  and  matters more if you don't immediately wait on the program to exit.)   has an explicit  option, which avoids the need for input and a background process.With any of these, you'll need to treat each of the two common selection types.
I know three ways to clear the clipboard from Python. First using tkinter:Second with xclip, but I use xclip like this:Does it create a new line?Finally, it's possible to user xsel:
I have figured out:This one cleans both buffers, and leaves no zombie processes at all. Thanks for everyone who suggested some of them.


Answer URL
https://docs.python.org/3/library/subprocess.html
