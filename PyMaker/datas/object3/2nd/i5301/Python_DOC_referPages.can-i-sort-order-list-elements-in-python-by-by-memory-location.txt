Natural Text
This may actually be a nonsensical request, as I'll explain after I've asked it!I have a list loaded in a script like this:I use the set() function to avoid counting the same Property object twice (Property is a class I defined earlier, it's unrelated to python's own 'property' keyword).Now, because sets are unordered, when I cast it into a list the resulting PROPERTIES may come out in a different order each time I load it. When I access a object in the list, it will read something like "< ...object at 0x103098550>", where 0x103098550 is the internal memory of the object loaded. My question is the following: Is there a way to then sort the list into ascending order of memory locations, such that the order of PROPERTIES will be the same each time I load it?Note that the ordering of NETWORKS is always the same, there is no randomness there. The only possible randomness is when the set() function is called.This might be a dumb question if the locations are dynamically generated with this line of code itself.  Edit: note. I'm not asking for the memory locations to be the same each time I load it (I know that's to do with my whole computer and may as well be random), but perhaps the ordering of memory of the objects n.properties is the same each time I load it. After all, when I build/load NETWORKS, I always load each network inside it in the same order, and presumably the memory locations assigned will go monotonically down (or up? I can't remember how heaps work). 
The memory location of any object is retrieved via the  function. So you can do this:
Relying on memory location - which is not garanteed to be monotonic (the Python runtime handles it's own memory pool and quite often reuses already allocated memory) - is certainly not going to work in a reliable way (it can seem to work sometimes - specially in a quick test script - but you can consider this as an accident).A simpler solution (assuming your property objects are hashable) would be to use a  with dummy values:This solution is garanteed to work.


Answer URL
https://docs.python.org/3/library/functions.html#id
