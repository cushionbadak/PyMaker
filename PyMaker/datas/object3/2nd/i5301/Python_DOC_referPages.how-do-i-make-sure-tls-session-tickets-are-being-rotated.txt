Natural Text
I have established a simple TLS 1.2 session between a client and a server using Python's SSL module (running LibreSSL 2.2.7 under the hood) and am wondering if session tickets are automatically rotated.It looks like the server is hinting at the client that the session ticket should only be valid for 300 seconds ()But it's been almost an hour and a new session ticket hasn't been issued like I expected. Meanwhile I exchanged some application data between the two parties but that didn't seem to trigger anything.Per RFC 4507 I understand the 300 seconds hint is not strictly required to be followedThe ticket_lifetime_hint field contains a hint from the server  about how long the ticket should be stored. The value indicates  the lifetime in seconds as a 32-bit unsigned integer in network  byte order. A value of zero is reserved to indicate that the  lifetime of the ticket is unspecified. A client SHOULD delete the  ticket and associated state when the time expires. It MAY delete  the ticket earlier based on local policy. A server MAY treat a  ticket as valid for a shorter or longer period of time than what is  stated in the ticket_lifetime_hint.But then how do I know if ticket rotation is happening? How do I check how long my client waits before rotating tickets?
The session ticket is given by the server during the handshake. And to initiate a handshake you must either start with a new connection with an empty ticket (by playing with the HTTP keep alives for example), or force a rehandshake in an established connection. Unfortunately, keeping a connection opened for a long time and waiting to see anything happen like a ticket update is not likely to happen.If you want to restart with new connections, either program your client to close and reopen new connections from time to time, or try the HTTP Keep-Alive header on the server side which is supposed to inform the client on how it should behave.Unluckily we are unsure of this header behaviour because we know this header exists in RFC 2068 , but its use is described in an RFC draft which is now expired.An example of use :Keep-Alive: timeout=300The SSL rehandshake is possible if you have access to a low-level API. Then the server can send an HelloRequest forcing the client to start a rehandshake and at this moment it is supposed to ask for a new ticket if the previous is considered expired.In both cases, you should confirm with a network capture that it is behaving as expected. There is probably no way to see anything if you're not coding with a low level language (Java for example allows to code rehandshakes, but I'm not sure coding an entire server is worth).


Answer URL
https://docs.python.org/3/library/ssl.html#ssl.SSLSession
https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake
