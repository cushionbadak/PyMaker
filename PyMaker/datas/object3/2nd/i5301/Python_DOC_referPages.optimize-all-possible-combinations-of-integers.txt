Natural Text
Let's say I have a row vector composed of 5 integers, where the first integer is int1 and the second is int2and i want to create a list of all possible combinations assuming each one of the integers can be between 1 and 99.One possibility would be to write 5 nested loops:This would be pretty inefficient, and we would need 9,509,900,499 iterations.is there a more efficient way of adding all possible combinations to a list (i.e. an alternative to 5 nested loops)?i will write the code in python but the response needs not be python specific.
Taking this important comment into account, there is a simple solution:yep, i do not need to hold the list in memory, actually I can do  something with each combination and move on â€“ Alejandro SimkievichAll you have to do is:This executes in a fraction of a second and takes almost no memory. It does not actually create a list of 99^5 integers. Actually, it does not even create list of 99 integers. It fakes all of it.Even though there is no list in the memory,  can be iterated through as if it was such a list:
I just realized there may be a way to expedite this running things in parallel.Let's say you have a machine with 99 cores, you could run four nested loops on 99 cores in parallel. in each one of the 99 cores, the first integer is a constant. you would have an efficiency gain of 100x (a bit less in practice I guess).I actually have access to a machine with 128 cores, so this may be an option.


Answer URL
https://docs.python.org/3/library/itertools.html
