Natural Text
I am trying to install simstring python wrapper in windows by https://github.com/Georgetown-IR-Lab/simstring. For linux it works fine but for windows it is giving me error while installing.After this I included iconv.h in the project. But now it shows different error.Any help or guidance is appreciated.
Ground notes:I managed to go with the build process but I got stuck at one point. I created [SO]: Compile error for (char based) STL (stream) containers in Visual Studio (I spent quite some time on that issue). I got that working somehow, but there were other (similar?) errors when trying to build simstring, so I had to strip some (Nix based) code (that didn't compile) outsimstring is written in C++. When C++ (C) code is built, the result is PE or Portable Executable (.exe, .dll). Check [SO]: LNK2005 Error in CLR Windows Form (@CristiFati's answer) for more details regarding how code gets transformed. When dealing with an .exe that depends on (loads) .dlls, there are certain restrictions:The .exe (in this case python.exe)'s architecture (32 vs. 64 bit or (x86 vs. x64 (or AMD64))) must match the one of any .dll that it loads (and other .dll that a loaded .dll loads, and so on), so all the dlls in the dependency tree, otherwise the .dll won't loadThe platform (Debug vs. Release) should match in some cases. Here's what could happen if it didn't: [SO]: When using fstream in a library I get linker errors in the executable (@CristiFati's answer), but I don't think that we are in that situationThe build tools should also match in some (other) cases. Examples:Compiler type ([SO]: Python extensions with C: staticforward (@CristiFati's answer))The CRT runtime ([SO]: Errors when linking to protobuf 3 on MSVC 2013 (@CristiFati's answer))The CRT runtime version is important in our case. Check [Python.Wiki]: WindowsCompilers for compatibilities between Python and VStudio versions. Note that this only applies for Python versions downloaded and installed (if you built your Python from sources, then you should use the same build tool - but I guess it's not the case here)I see you are using VStudio 2017, so the compatible versions are Python 3.5 and Python 3.6 1. I have ~10 Python installations on my machine (some installed, some built by me - with different compiler; most of them are x64, I also have some VEnvs, but that shouldn't make any difference). I also have 5 VStudio versions installed, in my case, setup.py automatically selects VStudio 2015 (but it's ok, since as VStudio 2017 it has compiler v14.0)simstring depends on libiconv which also comes as a .dll (actually there are more, but we only care about one). Checking the .dll (see below) with Dependency Walker reveals that it's x86 2. That means that either:Python 32bit (x86) should be used. This is the variant that I'm going to go with. From 1 and 2, the only available version on my machine is Python 3.6 x86 (Python 3.5 is my version of choice, I also have it in 32bit format, but I messed it up and didn't reinstall it)Build libiconv from source, and get rid of restriction 2. But, that could take time, and it's outside the scope of the current question. If there will be a question about building it, I'll take some time and give it a shot, as I enjoy that kind of tasks ([SO]: How to build a DLL version of libjpeg 9b? (@CristiFati's answer))Walkthrough:Create a dir and cd to it (should be empty). This will be the %ROOT_DIR%, and all the paths that I'm going to use will be relative to it (except of course for absolute ones), and this will be the default dir (when unspecified)Download simstring sources ([GitHub]: Georgetown-IR-Lab/simstring - simstring-master.zip)Unzip the archive - it will do it in a dir simstring-master (will be automatically created)Create a dir libiconv. Inside it, download:[SourceForge]: gnuwin32/GnuWin - libiconv-1.9.2-1-lib.zip[SourceForge]: gnuwin32/GnuWin - libiconv-1.9.2-1-bin.zipExtract needed stuff from these files:From #1.:include dir - used at compile phaselib dir - used at link phaseBoth phases are performed by setup.py (below)From #2.:bin dir - used at runtime (when using (importing) the module)cd to the simstring-master dir. To build the extension, I'm using setup.py's build_ext command (invoked recursively by install - as seen in your output): [Python 3]: distutils.command.build_ext - Build any extensions in a packageRunning build_ext, will yield your error:That is because Python build system doesn't know what we did (in the libiconv dir). To let it know, pass the:-I (--include-dirs) - will be translated to [MS.Docs]: /I (Additional include directories)-L (--library-dirs) - will be translated to [MS.Docs]: /LIBPATH (Additional Libpath)-l (--libraries) - will be translated to [MS.Docs]: LINK Input Filesflags ( will display all of them). For now, don't pass #2. and #3. because we won't get to the link phase (where they are required):Things to do (found out fixing the errors one by one, only export.cpp required changes): (cl.exe doesn't automatically cast constness) (as  is 2)Strip out the code that doesn't compile (that I talked about at the beginning): STL containers with 4 byte chars don't compile on Win, wanted to fix the code, and when Win will support such chars, the code will compile OOTB, but I wasn't able to, so I had to do whatever was done for OSX. As a consequence,  should be replaced by  (5 occurences)Note that #1. and #2. could (should) be done either by cmdline (-D flag, but I wasn't able to specify a value for a defined flag), or in setup.py (so they are only defined once even if they need to be declared in lots of files), but I didn't spend too much time on it, so I'm replacing them directly in the source code.Either apply the changes manually, either save:as simstring_win.diff. That is a diff. See [SO]: Run/Debug a Django application's UnitTests from the mouse right click context menu in PyCharm Community Edition? (@CristiFati's answer) (Patching utrunner section) for how to apply patches on Win (basically, every line that starts with one "+" sign goes in, and every line that starts with one "-" sign goes out). I am using Cygwin, btw. I also submitted this patch to [GitHub]: Georgetown-IR-Lab/simstring - Support for Win, and it was merged today (180222).Finally, it built. the .pyd is just a .dll. This is how it looks like in Dependency Walker:Let's try to see if we can use it:That is because when importing simstring, which in turn imports _simstring (the .pyd), Python doesn't find it. To fix this:Add the .pyd path to %PYTHONPATH%As seen in the pic, the .pyd depends on libiconv2.dll, so the OS must know where to look for it. Simplest way is to add its path to %PATH% ([MS.Docs]: Dynamic-Link Library Search Order)Final notes:There is some output from the module, it's identical to the one on Lnx (Ubtu) (where I also built it - there I encountered no problem), I'm not sure whether it's semantically correct or notI didn't run setup.py's install command (and I'm not gonna), one thing that I can think of that could go wrong (although I'm not sure it will), is not copying/including libiconv2.dll into the pkg. If so, you'll probably need to modify setup.py (changes should be minor)
Besides my other response about building under Cygwin, I've made a few other changes to allow this to build and install seamlessly with Windows using Anaconda.  Turns out conda can install iconv very easily.  Much of this is based on the work that ChristiFati added in this thread, this change intends to simplify the steps and potential installation.This change currently exists in my own fork.  Steps are in the README here.  I have also submitted a Pull Request for this.UPDATE: This pull request has now been taken into the Georgetown repo so you can get it herre:https://github.com/Georgetown-IR-Lab/simstringAs a side note, one of the motivations for doing this is making this repo easier to set up: https://github.com/Georgetown-IR-Lab/QuickUMLS
I was able to build that repo under Cygwin.  The packages libiconv-devel and python3-devel both need to be installed.After that, I had one more change that I made to ensure that libiconv would be available for Windows build.  I made that single commit here:https://github.com/burgersmoke/simstring


Answer URL
https://docs.python.org/3/distutils/apiref.html#module-distutils.command.build_ext
