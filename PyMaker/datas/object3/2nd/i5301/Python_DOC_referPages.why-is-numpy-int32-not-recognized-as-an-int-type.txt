Natural Text
I just spent half an hour looking into a bug in statsmodels' SARIMAX functionality that I could finally trace back to the fact that numpy.int32 fails type checks for int.Is there a way to circumvent this kind of issue without explicit type conversions?Should proper code even test for types and not check if a variable can safely be cast to a type?Edit: My question is answered by an account of what technical limitations or design decisions are the cause of this behaviour and how to pythonically handle cases where both pure python's  and numpy  or  types might appear.
Why should  descend from ?  is a specific class. It is one way of representing integers. That doesn't mean that every class that represents integers should descend from .  has different semantics and different methods - for example, it has most of the functionality needed to operate like a 0-dimensional array - and inheriting from  isn't particularly useful for implementing .On some builds of Python 2 (Windows only?),  actually will descend from  (which is also 32-bit on those builds), but I believe this design decision dates back to a time when  performed wraparound arithmetic like  instead of promoting to  on overflow, and when  didn't exist. It was a more reasonable decision back then.As for how to treat  like ,  does a sort of okay job, but the implementation relies on people explicitly -ing their classes with , and people often don't think to do that. NumPy didn't add the  calls until 2014, 6 years after  was introduced. Similar libraries like SymPy still don't have the calls.I find  to be a better check: is the hook an int-like class has to implement to make its instances usable as a sequence index. It's a stricter check than , which would accept  and . Since there's a concrete, easily noticeable impact if this hook is missing, it's more likely to be present than  support.
 lists the inheritance stack of a class:For a basic array: of classes on this stack returns True: isn't on this stack: extracts a value from its  wrapper:@kazemakase suggests using the  module:


Answer URL
https://docs.python.org/3/library/numbers.html#module-numbers
