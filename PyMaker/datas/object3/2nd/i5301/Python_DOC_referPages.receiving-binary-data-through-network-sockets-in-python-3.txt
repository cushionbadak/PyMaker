Natural Text
In my networking class a lab i have is to make a client to receive 5 familiar 32-bit integers in big endian order and to intemperate them. I decided to use python and everything works well enough but i am receiving strange hex code.\x00\x00\x00o\x00\x00\x00\xe4\x00\x00\x01\xb3\x00\x00\x01\xdb\x00\x00\x01\xecI can convert most of it easily but the x00o is really confusing me, 228 435 475 492 where the 4 after that I believe. Can you help me intemperate the server message?  
code.py:Notes::Uses [Python]: struct.unpack(fmt, buffer) to perform the conversion (might also check [SO]: Python struct.pack() behavior for more details on how integers are being represented in memory - and also in the server response)Conversion is done to unsigned int ( format). Check the "Format Strings" section in on the (1st) above pageRelies on the fact that int is 4 bytes long (I didn't want to hardcode the , wanted to make it more general). If the string length is not a multiple of 4 (an integral number of ints), the incomplete int at the end (at most 3 bytes) is discarded (of course, a nicer way to pad the string and also convert the "incomplete" data, but that's outside the question scope)Returns a tuple containing the converted integers:Calls the above function on the data that you received from socketAs a bonus, it also converts it using little endian (but those values don't make much sense)The data is a [Python]: Bytes Objects instance (I think  returns it in this form). If (I'm wrong and) it returns the data as a string, just use [Python]: str.encode(encoding="utf-8", errors="strict")Output:


Answer URL
https://docs.python.org/3/library/struct.html#struct.unpack
https://docs.python.org/3/library/stdtypes.html#bytes-objects
https://docs.python.org/3/library/stdtypes.html#str.encode
