Natural Text
I have a class, , that I include as follows:Later on, in my code, I use this class to access caches:The parts relating to  are quite trivial:Now, everytime I start  in my project, I need to tell it  the  where it can read/write. I can't use the default value in the constructor, as that cannot be project-specific. One way to do so would be to carry along a reference to  in every function that I want to cache in, and then pass on . That appears messy. Is there something I can do on a file-level, perhaps during inclusion of the file?My dream solution would be something along the lines of, and then magically everytime I use an instance of , it already has that preset. Now, I know this doesn't work the way I wrote it - but is there anything that comes close?
Just write a helper function that calls the function for you with the right defaults:You could even replace the existing one with your new one:Put that into your own module and import the  from there, and you donâ€™t need to adjust anything in your code to use the correct folder.
How about inheritance:Output:Of course, you can change the names accordingly, so you can keep writing all over the place:
First of all, I recommend to think on this problem one more time; in most cases global state is not the thing you need.On high level, you want a singletonOn one way, you can implement this by hand within  method, but I'd not recommend this. Python import system machinery is heavily cached. Meaning, only one instance of every module (together with all classes inside) exists at time. So, if you feel that such functionality really needed, you can put your state in module scope, likeAnd once per app you just call `cache_module._path = '../other'Other dirty way is to put this path inside class, like class attributeAnd once per app you setup cache with . Cache class and cache module will be the same across all codebase per single python interpreter.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
