Natural Text
Is it possible to define a data object in python that behaves like a normal integer when used in mathematical operations or comparisons, but is also able to store instance variables?In other words, it should be possible to do the following things:
Yes, it is. You can create your own custom class. Python has many magic methods to help you archive that.Check the code:Or you can just inherit from int, after creating an instance, you are able to assign attributes to the inherited int object. You can't assign attributes to int directly, because int does not support item assignment :
You simply need a class for this:This prints out:You have to add the other operations (division, substraction, eq, ...) you need to the class on your own :)
So, all answers above is fine, but probably you don't want to re-define all existing methods.Normally, in python you can just subclass any built-in class (type). But with immutable types (and integers in python is immutable) is slightly tricky. TL;DR:Normally, you should reload  method, but with immutable bases you should use . You can read more about data model in corresponding docs sectionAll this is viable only if you need single signature for constructing your object. If its fine to have 1 call for creating, and dedicated calls to populate object with attributes - Kevin's answer is all you need
Look into implementing the __add__ and __eq__ methods for your  class


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__add__
https://docs.python.org/3/reference/datamodel.html#object.__eq__
