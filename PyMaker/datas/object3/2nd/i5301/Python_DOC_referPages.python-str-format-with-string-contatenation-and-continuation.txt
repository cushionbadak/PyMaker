Natural Text
I'd like to specify a string with both line continuation and catenation characters. this is really useful if I'm echoing a bunch of related values. Here is a simple example with only two parameters:here's what I get:And here is what I expect:What gives?
You can try something like this :Or like :vs. what you have:
 is called before your strings are concatenated. Think of it like , where the multiplication is evaluated before the addition.Just wrap the whole string in parentheses to indicate that you want the strings concatenated before calling :
Python in effect sees this:You have 3 separate string literals, and only the last one has the  method applied.Note that the Python interpreter is concatenating the strings at runtime.You should instead use implicit string literal concatenation. Whenever you place two string literals side by side in an expression with no other operators in between, you get a single string:This is stored with the bytecode as a single constant:From the String literal concatenation documentation:Multiple adjacent string or bytes literals (delimited by whitespace), possibly using different quoting conventions, are allowed, and their meaning is the same as their concatenation. Thus,  is equivalent to .When you use implicit string literal concatenation, any  call at the end is applied to that whole, single string.Next, you don't want to use  backslash line continuation. Use parentheses instead, it is cleaner:This is called implicit line joining.You might also want to learn about multiline string literals, where you use three quotes at the start and end. Newlines are allowed in such strings and remain part of the value:I used a  backslash after the opening  to escape the first newline.
The format function is only being applied to the last string.Is doing this:The key is that the  function is only happening to the last string:You can obtain the desired result using parentheses:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation
https://docs.python.org/3/reference/lexical_analysis.html#implicit-line-joining
