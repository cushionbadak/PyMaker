Natural Text
So here's the code:If I call :why does it not print out '0' ?and if I edit the code like this :and then call the same thing, it prints:Why is that ? And what is the right way to / when should I use raise?
Your  block is raising an exception itself, a divide-by-zero error (because your denominator is 0). If a  block executes as an exception is bubbling, and raises an exception of its own, it either:On Python 2, replaces the existing exceptionOn Python 3, it wraps the existing exception in the new exception (creating a chain of exceptions, where the outermost one is the one that is checked, but the inner exceptions exist for context)Your other code prints the traceback because you don't catch the second exception you raise at all (and it bypasses your ).I'd suggest reading the exception tutorial to understand more; your example code is so contrived/pointless it's impossible to say what misunderstandings you really have, and what is just to illustrate a specific behavior to support your question.
Notice the numbers1.This thing executes first triggering the  block outside the 2nd  and disregards other block.2.This will be triggered as there is an exception in the  block.Use raise inside the  block to avoid complicated things.I would rewrite your code as:


Answer URL
https://docs.python.org/3/tutorial/errors.html
