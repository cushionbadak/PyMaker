Natural Text
Apologies if this is a duplicate at all, but, I can't seem to get my head around some of the rules around mutability. I have a scenario which is similar to the one below:I have a class which has an instance field, and a method that updates that instance field, thereby updating the objects state.if I use the builtin  (I'm using a function declared at the top level as a wrapper - clearer later) the method call happens for each object and updates the state, as the  field in the class has a length of 1.When I use the  (which is why I used the wrapper, as I don't believe I can use a lambda, can I?), the method's effect doesn't seem to take hold, and I'm not sure as to why this is happening?
Using multiprocessing, you spawn different python processes.The main Python process however, does not share it's state with the newly spawned processes (neither they share it to one another).The objects that you passed through to map got serialized and sent to those processes but apart from map's results, they never got back to the main process. They did increase, but only on the other processes which later on died in vein :-(If you do wish to share state, there are many shared variables, memory, and managed processes that are at your disposal.For more information about that, please see multiprocessing's documentation.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
