Natural Text
I write python script that read JSON from file, transform it and at the end write modified JSON to file. JSON that I read doesn't have white characters, because I need minimal size. The problem is when I read JSON from file and call  I get  object and python adds spaces between key and values. JSON in file:My script:And the output of this piece of code is:Explanation:Python reads JSON from file as string that is the same in the file. Length of  is 206 and size is 255 because empty string in python has 49 bytes. Calling  returns  object that has size 240. JSON represented as  object has added spaces between key names and values. And this is the cause why after call  size of  is equal to 274 and length is equal to 224. Therefore I tried to remove white spaces from  using function , but I forget that some values have white spaces and after this operation JSON is not correct.I need to read JSON as dict object to convenient transformations and at the same time I have to keep minimal size of JSON.Is there any way to remove unnecessary white spaces from  object?
All you need to care about is the length of a string, so use  to compare results. If you care about generated JSON sizes, you can trivially tell  to not use any spaces:Demo:With  specified, the output length matches the original input. The  option is documented as:If specified, separators should be an  tuple. The default is  if indent is  and  otherwise. To get the most compact JSON representation, you should specify  to eliminate whitespace.(Bold emphasis mine). is the wrong tool to make comparisons here. The function gives you the memory footprint of an object (without recursing), and this memory footprint is a implementation detail of your current Python implementation and operating system specific data type sizes.The  object uses 240 bytes on your OS, but this is a over-allocated hash table of references. On a different OS with different size pointers, the memory size would be different, and either way, you didn't include the size of the referenced string objects. For string objects, the memory footprint depends heavily on the highest Unicode codepoint; the string  has a different footprint from , even both have length 1, because the latter contains a non-BMP codepoint so 4 bytes are needed to store just that one character, plus Python object overhead.Next, all you saved was 19 spaces. Compression would have saved you much more, and spaces don't matter much when compressing:Compression saved 50 bytes there, while using the compact JSON separators saved another single byte.
The  function accepts several arguments that let you specify how you want the data formatted when you write your dictionary back out to a JSON string. From it's docstring:If  is a non-negative integer, then JSON array elements and      object members will be pretty-printed with that indent level. An indent      level of 0 will only insert newlines.  is the most compact      representation.If specified,  should be an       tuple.  The default is  if indent is  and       otherwise.  To get the most compact JSON representation,      you should specify  to eliminate whitespace.So try  for the most compact representation.


Answer URL
https://docs.python.org/3/library/archiving.html
