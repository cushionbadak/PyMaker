Natural Text
I've written a simple Python script to copy a file from one place to another. (It's for class, so that's why I'm not using something simpler like . I have a check at the end that compares the hash of the two files, and it consistently tells me they're different, even though the copying is successful - both are text files that say "hello world".Here is my code:And the output:Plus the file is copied.I'm fairly sure the hash is checking the file itself, not the string. Is it maybe something to do with metadata? Any help would be greatly appreciated.
You are using the Python-specific  function, which calculates a hash for use on dictionary keys and  contents.For file objects, the  is based on the object identity; you can't base it on anything else because two distinct file objects are never equal, the  method returns  only if both objects are one and the same in memory (so  would be true too). The file contents, the name of the file, the mode or any of the other object attributes play no role in the hash value produced.From the function documentation:Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup.If you need to validate that the file copy contains the same data, you need to hash the â€¢file contents* using a cryptographic hash function, which is something completely different. Use the  module; for your usecase the simple and fast  algorithm will do:If the binary contents of the two files is exactly the same, then their cryptographic hash will also be the same.
You are getting the python hash of the  object. Not the contents of the file. As a minimum you should But since this still risks collisions, you should do as Martijn suggests and use a  function.


Answer URL
https://docs.python.org/3/library/functions.html#hash
https://docs.python.org/3/library/hashlib.html
