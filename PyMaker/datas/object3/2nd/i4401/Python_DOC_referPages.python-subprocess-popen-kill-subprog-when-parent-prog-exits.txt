Natural Text
In python 2.7 if program  uses subprocess.Popen to start  and then exits,  will continue to run. I think that this is consistent with process handling in general, at least for *nix. This seems to imply that if some of my  programs run forever and I kill  the subprocesses will continue to run. Is that correct? (I ask because of the possibility that killing a process behaves differently than simply having it exit of its own accord).In StackOverflow entries about command shells (not Python) there is mention of being able to create a subprocess that actually will terminate if its creator process dies. They seem to be called "daemonic" processes. Is there a similar way to make this happen automatically in Python? That is, is there a way I can use subprocess.Popen or another method to start a subprocess that will automatically die if the parent dies?The child processes are very different so threading is not an option.
The term "daemon" is probably more confusing than helpful here. It means something you don't have to wait/join. For a thread, that actually means a thread that will be implicitly killed on exit—but for a child process, it means one that will run in the background and continue to do so even if its parent, its session, its tty, etc. all die. The  docs don't even mention the term, possibly to avoid this confusion.At any rate, if you want children that automatically go away with the parent no matter what on all platforms, you need to do that explicitly.For a nice design where there's a top-level script that has access to all the  object, the easy way to do that is at the top level:You can of course get fancier by waiting with a timeout and then terminating, or just terminate them without trying to kill first, or send different signals, or… whatever you want. But this is the basic idea.In some cases, it's even nicer to use a  statement with an  that you add the children to as they're created.On the other hand, in some complex scripts, there's really no good way to access the children from the top level, and you have to use something cruftier like  handlers.But there's another simple design that often works. If you're not running too many children, you can spawn a thread just to  on each one, or even to just  them instead of creating a . If you are running lots of children, a single thread can loop through them waiting with a timeout, although this can be a lot more fiddly to get right (and waste resources if you don't). Then it's just a matter of managing your threads, and they automatically manage your children.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/atexit.html
