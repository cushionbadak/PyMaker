Natural Text
This is the lists that i want to inflate:Thats the sample run of the program that i want to make: Whenever i run this code it kinda works but it conflicts with other listsfor example this is the sample run of my code:Any ideas of how i can make this program works ?
Firstly, don't use a variable for each word. Use one big nested list, like this:(you can fill in the rest)Then you can loop through that list to do your replacements. This has been covered in other answers.To fix your problem, since  can be replaced by  and  can be replaced by  and so on, that means you need to replace all s before replacing s, and replace all s before replacing s... so you need to loop through the list and perform the replacements in a particular order. I don't want to give it away completely (although I pretty much have), take some time to think about it.
You should replace:With just:It just goes through each item in each list, and replaces it.
Rather than checking whether each input word is in one of your lists, you should check whether one of the words from your lists is in the input.  e.g. And rather than having a ton of lists with a lot of copy-pasting, you could structure your lists differently to be able to iterate over them.  Maybe something like:
If you structure your data carefully, you can do away with just two loops:
I had a lot of fun with this. Using  you can really take advantage of using the function parameter of  to accomplish this. This is super helpful since each captured group will be replaced only once (by finding non-overlapping patterns) so no repeated scans of the same string.This solution is not prone to replacement issues of different numbers, but only the order that you place your words in the list such that a word in the list isn't contained in a successive word in the same list. So make sure that "to" comes after "too" otherwise "tool" would be replaced with "threeol" instead of "threel".Results in the following printed itemsUltimately, your list can be scaled very easily while maintaining readability since you don't have to change any code if you decide to add to your list of substitutions.


Answer URL
https://docs.python.org/3/library/re.html#re.sub
