Natural Text
This question already has an answer here:List comprehension vs generator expression's weird timeit results?                    3 answers                I have below two functions:I was hoping that  will run faster then  but I have checked in ipython with  that  is taking slightly longer then  The difference increases as I increase value of n hence I tried to check function with  and  but it was identical.So what would be the cause of such time difference between both methods?
There are plenty of great answers about generators, so I won't elaborate on that.Generators keep state. They are slightly slower if you do very fast operations (like using , but if you use an I/O command there won't be much difference).The upside for generators is that they don't load all the items to memory in advance, where lists does.This is what happens when you iterate a list (in very high-level):You load all items of the list to memoryAsking for the next element just gives you the pointer to that objectCompare that to a generator:You don't have all the items on memory. Just one item at a time.Asking for the next element resumes the generator object, running the code until it reaches the yield statement.Then it yields the object's address in memory so you can access it.This extra step in the middle, is the diff in your tests.So, generators are used commonly where you deal with huge amount of data that needs to be loaded on to memory. (There are more use-cases for generators ofcourse, like coroutines)Do an expirement with huge files and a for loop printing the lines. At some point you will get out of memory exception when using lists. Then try using generators, they won't go out of memory..


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#changed-syntax
