Natural Text
We can add our own types to a parser's registry, for example:This works so far, i.e.    and then .  But when trying to add subparser(s):We get error here: .  I want all subparsers to automatically inherit the types already registered by parent.  Possible?
I demonstrated the use of  here, several years ago.Parsing boolean values with argparseIt isn't a hidden feature (i.e. no '_') but also not documented.  Each parser has a  that matches strings with classes and functions.  If , the parser looks up 'store_true' in the  and finds the corresponding  subclass.   strings are also looked up, though as default only 'None' is registered.  Other common type values such as  and  are Python functions, and don't need to be registered.Subparsers are new parsers, using the main parser class.  I don't think they use any of its  parameters, and certainly they don't use any attributes that might have been changed after creation.It might be possible to define a  subclass that adds these items to the registry.Some relevant parts of the  code:So the class of the main parser is recorded with the   object., and that is used when creating the subparser.  But parameters like , and  are taken from the  command, not inherited.  There was a bug/issue asking for inheritance of the , but no action.From your code:andor instead of , simply share the dictionary: does a lot of attribute sharing.  For example, the  list is shared between  and all of its .So if I were to add this to , or my own version, I'd probably modify the  class rather than the  class.   Either that, or just define a helper function:As best I can tell,  does not have any reference to the main parser.  That is,  is in the  list, but there's no link in the other direction.Changing subparsers Action class is another attribute that isn't passed from main parser to subparsers.  It is set with , which is documented:https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaultsSetting a different value in the subparsers is documented as a way of linking a function to the subparser:https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsersJudging from questions here about subparsers, it is clear that the feature is quite useful.  But it is also a bit tricky to use, and not to everyone's liking.  One of the last patches that the original author, Steven J. Bethard, wrote had to do with passing the  between main parser and subparsers.argparse set_defaults on subcommands should override top level set_defaultsBut that wasn't to everyone's liking.argparse - subparsers does not retain namespaceIn light of the current question, it interesting that I suggest using the  to use a customized .It uses a custom Action class (like your test case).  It subclasses ._SubParsersAction, and replaces the 9351 namespace use with the original one.  I use the registry to change the class that parser.add_subparsers() uses.That's required because as the  quote (above) shows,  uses the registry to determine what subclass to use.One might argue that this use of  needs to be documented.  But I don't see how it can be done without adding confusion to users who don't need the feature.


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaults
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser
https://docs.python.org/3/library/argparse.html#type
