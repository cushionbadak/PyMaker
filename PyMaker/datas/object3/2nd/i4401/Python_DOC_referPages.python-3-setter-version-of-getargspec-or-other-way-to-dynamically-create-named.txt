Natural Text
I happen to have some code which uses introspection to learn what the arguments of a function are, and then does some logic based on what these names are. So for example, I might create some functions likeand by using e.g.  I can get the list ["a","b"] returned. In this way the code I have can check if some functions have the same argument names.So now, I want to create a bunch of functions dynamically, with say another function. Schematically I want to do e.g.where, "x_i" should actually be x_1, x_2, etc. So that when I inspect these functions with  the result is "x_1", "x_2", etc. It would also be acceptable to somehow set the argument names after the function is created. So for example I could create the functions with a generic argument name and then change it later to the specific names needed.Is there some way to do either of these things?
What about using  as parameter, so parameter names are not set on function definition but can be retrieved from dict ?Btw, you should provide an example, because I don't clearly get the point of a function that could not rely on the name of its parameter to work ;)
If you only need to change how  reads the function's signature, you can hand-craft a  object and assign it to the function's  attribute:(See also the documentation of the  constructor.)Setting the signature like this interacts correctly with  (the not-deprecated version of ) and :However, it does not actually change the name of the parameter, so keyword arguments don't work correctly:If you need keyword arguments to work correctly, the easiest solution is to create the function dynamically with :


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#inspect.Parameter
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
https://docs.python.org/3/library/inspect.html#inspect.getargspec
https://docs.python.org/3/library/inspect.html#inspect.signature
https://docs.python.org/3/library/functions.html#exec
