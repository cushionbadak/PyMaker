Natural Text
I'm using the Autobahn asyncio system (to talk the Websocket WAMP protocol), which works fine and I can handle incoming RPC calls and pubsub.My problem is I now have to connect TCP sockets and send information over these sockets as soon as an RPC call comes in through the Autobahn part.The autobahn part works fine like this :However now I need to be able to connect to multiple regular TCP sockets :The problem is that, when I combine both and do this :It barks at me and tells me :StopIterationDuring handling of the above exception, another exception occurred:Traceback (most recent call last):   File  "/usr/lib/python3.5/site-packages/autobahn/wamp/websocket.py", line  95, in onMessage      self._session.onMessage(msg)   File "/usr/lib/python3.5/site-packages/autobahn/wamp/protocol.py", line  894, in onMessage      on_reply = txaio.as_future(endpoint.fn, *invoke_args, **invoke_kwargs)   File "/usr/lib/python3.5/site-packages/txaio/aio.py", line 400, in  as_future      return create_future_error(create_failure())   File "/usr/lib/python3.5/site-packages/txaio/aio.py", line 393, in  create_future_error      reject(f, error)   File "/usr/lib/python3.5/site-packages/txaio/aio.py", line 462, in reject      future.set_exception(error.value)   File "/usr/lib64/python3.5/asyncio/futures.py", line 365, in set_exception      raise TypeError("StopIteration interacts badly with generators " TypeError: StopIteration interacts badly with generators and cannot be  raised into a FutureDoes anyone have any idea on how to call the send function from within the RPC call function ?
In this code: is a coroutine function, so  contains a coroutine object. Such object does have a  method, but one that is entirely unrelated to sending things over the network. After calling , you probably want to get the resulting transport with something like:and then use , not .


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_connection
https://docs.python.org/3/library/asyncio-protocol.html#asyncio.WriteTransport.write
