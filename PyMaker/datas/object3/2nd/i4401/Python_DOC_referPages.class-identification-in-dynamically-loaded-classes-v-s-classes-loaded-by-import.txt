Natural Text
Here's the minimal reproduction for something I'm working on. This is using Python 3.6.5:sample.py:test.py (in the same directory):Running this code will give you the following output:So why is the object that we load using importlib, which is identified as 'test.Test', not an instance or subclass of the 'test.Test' class I created using import? Is there a way to programmatically check if they're the same class, or is it impossible because the context of their instantiation is different?
Why is the object that we load using , which is identified as , not an instance or subclass of the  class I created using import? A class is "just" an instance of a metaclass. The import system generally prevents class objects from being instantiated more than once: classes are usually defined at a module scope, and if a module has already been imported the existing module is just reused for subsequent import statements.  So, different references to the same class all end up pointing to an identical class object living at the same memory location.By using  you prevented this "cache hit" in sys.modules, forcing the class declaration to be executed again, and a new class object to be created in memory. is not doing anything clever like a deep inspection of the class source code, it's more or less just looking for identity (CPython's implementation here, with a fast-track for exact match and some complications for supporting ABCs) Is there a way to programmatically check if they're the same class, or is it impossible because the context of their instantiation is different?They are not the same class.  Although the source code is identical, they exist in different memory locations.  You don't need the complications of  to see this, by the way, there are simpler ways to force recreation of the "same" class:Or, define the class in a function block and return it from the function call.  Or, create classes from the same source code by using the three-argument version of .  The  check (CPython implementation here) is simple and will not detect these misdirections.


Answer URL
https://docs.python.org/3/library/abc.html
https://docs.python.org/3/library/functions.html#type
