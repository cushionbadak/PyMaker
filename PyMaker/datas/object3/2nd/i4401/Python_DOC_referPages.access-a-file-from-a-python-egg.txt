Natural Text
Hi I am working with python packaging. I have 3  files namely . These files exist in a folder structure  I have a  class at the path  I've written a code that pulls the current location of the  and then looks for a  called  and looks for the 3 files there.The problem is when I create an  out of the code, and then run it, My code gives me the error: Could not find the file at X:\1. Projects\Python\Wordproject\venv\lib\site-packages\Wordproject-1.0-py3.6.egg\Wordproject\Repository\DataBank\synonyms.csvIt's not able to fetch the file or read it from the path if the path is of an egg. Is there any way around it? These files have to be in an .
There are two different things you could be trying to do here:Treat the data files as part of your package, like the Python modules, and access them at runtime as if your package were a normal directory tree even if it isn't.Get the data files installed somewhere else at  time, to a location you can access normally.Both are explained in the section on data files in the PyPA/ docs. I think you want the first one here, which is covered in the subsection on Accessing Data Files at Runtime:Typically, existing programs manipulate a package’s  attribute in order to find the location of data files. However, this manipulation isn’t compatible with PEP 302-based import hooks, including importing from zip files and Python Eggs. It is strongly recommended that, if you are using data files, you should use the ResourceManager API of  to access them. The  module is distributed as part of , so if you’re using  to distribute your package, there is no reason not to use its resource management API. See also Accessing Package Resources for a quick example of converting code that uses  to use  instead.Follow that link, and you find what look like some crufty old PEAK docs, but that's only because they really are crufty old PEAK docs. There is a version buried inside the  docs that you may find easier to read and navigate once you manage to find it.As it says, you could  using  (which will work inside an egg/zip) and then fall back to accessing a file (which will work when running from source), but you're better off using the wrappers in . Basically, if your code was doing this:… you'll change it to this:Notice that  files are always opened in binary mode. So if you want to read them as text, you need to wrap a  around them, or decode each line.
 files are just renamed .zip files.You can use the  library to open the egg and extract or read the file you need.
Based on the documentation,  We can read the contents of file in multiple ways. Solution 1: Read the contents of file directly into the memory.Without extracting the file locally.Now  is your local temporary file handle. It's name is  and all file operations such as  etc. work as usual on this.  must be called at the end to close the handle.  Contents of file can be read by  itself but we lose myfile handle as soon as we exit the context. So contents of file are copied into a temporary file if it needs to be passed around for other operations.Solution 2 : Extract the member of egg locallyzipfile provides an API for extracting the specific memberSolution 3 : Extract the whole eggAnother solution is to extract the egg in temporary folder and then read the file. Egg can be extracted on command line as following


Answer URL
https://docs.python.org/3/library/zipfile.html
