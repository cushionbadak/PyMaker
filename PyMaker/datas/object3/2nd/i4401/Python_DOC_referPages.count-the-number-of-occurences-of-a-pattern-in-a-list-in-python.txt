Natural Text
Given a pattern , and a binary list of length 100, . I want to count the number of occurences of this pattern in this list. Is there a simple way to do this without the need to track the each item at every index with a variable? Note something like this,  can occur but this should be counted as 2 occurrences. 
Convert your list to string using join. Then do:If you need to count overlapping matches then you will have to use regex matching or define your own function.EditHere is the full code:

I think a simple regex would suffice:Hope this solves your problem.
outputthe loop can be written in one line like, for more "clean" but less understood code NOTE, I'm using tuple cause they are immutable objects and can be hashed you can also use the hash functionality and create your own hash method like multiple each var with 10 raised to his position e.g that way you can make a one pass on the list and check if it contains the pattern by simply check 
you can always use the naive way : for loop on slices of the list (as in the slice that starts at i-th index and ends at i+[length of pattern]).and you can improve it - notice that if you found an occurence in index i' you can skip i+1 and i+2 and check from i+3 and onwards (meaning - you can check if there is a sub-pattern that will ease your search ) it costs O(n*m)you can use backwards convolution (called pattern matching algorithem)this costs O(n*log(n)) which is better
You can divide the lookup list into chucks of size of the pattern you are looking. You can achieve this using simple recipe involving  to yield a sliding window iterator This will give you output like:Now you can use  to count the occurrence of each sublist in sequence likeTo fetch frequency of your desired sequence useNote I have used  everywhere as  keys since  is not a hashable type in python so cannot be used as  keys.
You can solve it using following two steps:Combine all elements of the list in a single stringUse python count function to match the pattern in the string
You can try range approach :output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
https://docs.python.org/3/library/collections.html#collections.Counter
