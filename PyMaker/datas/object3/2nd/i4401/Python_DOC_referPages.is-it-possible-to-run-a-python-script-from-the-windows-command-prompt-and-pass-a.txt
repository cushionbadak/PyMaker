Natural Text
I have a saved python script.  I run this python script from the command prompt in Windows 10.This is as simple as navigating to the directory where the script is located and then typing:and the script will run fine.However, sometimes, I want to run this script such that a variable within that script is set to one value and sometimes to another.  This variable tells the script which port to operate an API connection through (if this is relevant).At the moment, I go into the script each time and change the variable to the one that I want and then run the script after that.  Is there a way to set the variable at the time of running the script from the command prompt in Windows 10?Or are there potentially any other efficient solutions to achieve the same flexibility at the time of running?Thanks 
The usual way to do this is with command-line arguments. In fact, passing a port number is, after passing a list of filenames, almost the paradigm case for command-line arguments.For simple cases, you can handle this in your code with Or, if you want a default value:Then, to run the program:For more complicated cases—when you have multiple flags, some with values, etc.—you usually want to use something like . But you'll probably want to read up a bit on typical command-line interfaces, and maybe look at the arguments of tools you commonly, before designing your first one. Because just looking at all of the options in  without knowing what you want in advance can be pretty overwhelming.Another option is to use an environment variable. This is more tedious if you want to change it for each run, but if you want to set it once for an entire series of runs in a command-line session, or even set a computer-wide default, it's a lot easier.In the code, you'd look in :And then, to set a port:You can combine the two: use a command-line argument if present, otherwise fall back to the environment variable, otherwise fall back to a default. Or even add a config file and/or (if you only care about Windows) registry setting. Python itself does something like three-step fallback, as do many major servers, but it may be overkill for your simple use case.
You should look at argparse. Heres an example:Each argument you create is saved like a dictionary so you have to call it in your code like I did with my print statementhere was my input/output:More info on argparse:https://docs.python.org/3/library/argparse.html
You need the argparse library.https://docs.python.org/3/library/argparse.htmlhttps://docs.python.org/2/library/argparse.html


Answer URL
https://docs.python.org/3/library/sys.html#sys.argv
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/os.html#os.environ
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/argparse.html
