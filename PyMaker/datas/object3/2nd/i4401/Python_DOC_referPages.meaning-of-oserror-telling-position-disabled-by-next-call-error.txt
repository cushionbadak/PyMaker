Natural Text
This is almost the same question as How to solve "OSError: telling position disabled by next() call". While the older question has received a few answers with useful workarounds, the meaning of the error is not clear. I wonder if anybody can comment on this.I am learning Python and loosely following a tutorial. I entered the following interactively on Fedora 23: contains a few lines of text. The output:Googling for this error yields a whopping 6 results. The same happens with Python 3.6.4 on Cygwin on Windows 10.Edit:The  method for text files is documented as follows:Return the current stream position as an opaque number. The number  does not usually represent a number of bytes in the underlying binary  storage."Opaque number" seems to indicate that I can't just print it. So, I replaced the second  call with . Same result.
The message means exactly what it says: because you have called  on the file, the use of  on that file has been disabled.It might not look like you've called , but the  loop calls it implicitly. A  loop:is syntactical sugar forFor a file,  returns the file, and the loop calls  on the file.As for why calling  disables , this is for efficiency. It only happens for text files (specifically ), which have to do a bunch of extra work to support ; turning off  support lets them skip that work. The original commit message for the change that made  disable  is "Speed up next() by disabling snapshot updating then.", indicating it's for efficiency.For historical context, previous Python versions used a hidden buffer for  that  and other file methods didn't account for, causing  (and other file methods) to produce not-very-meaningful results during iteration over a file. The current IO implementation would be able to support  during iteration, but  prevents such calls anyway. The historical incompatibility between  and other methods likely contributed to why it was considered reasonable to disable parts of file functionality during iteration.You didn't ask for workarounds, but for the benefit of people who end up on this page looking for a workaround, I'll mention thatwill let you iterate over the lines of a file without disabling . (You can use  for binary files, but there's not much point, because the  disabling mechanism isn't there for binary files.)


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html
https://docs.python.org/3/library/io.html#io.TextIOBase.tell
