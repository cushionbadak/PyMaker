Natural Text
I understand that in Python variables point to objects so when you assign one to another they then both point to the same object. What I'd like to do is to make one variable change when the other one does. In the case I am working on a GUI. So I have a label with an attribute for its text. I'd like that attribute to be equal to an attribute in another class. At the moment I am doing it by using an intermediate function but it feels like there should be a more elegant way of doing it. So my way is effectively similar to the below:There will be lots of labels linked to lots of different classes. So what I would like to be able to do is just:However, when myclass.anattribute gets changed - myclass.gettext doesn't. I understand why but is there another way of writing it so that it does - without creating the function?Many thanksEDIT: - Both classes will be used in other applications where one or the other might not exist so I can't hard code the relationship between them within the classes themselves.
The first thing I would say is that it's somewhat of an antipattern to duplicate the storage of data in two places, since it violates the DRY principle of software development.Generally, with GUI designs like this, there's the concept of MVC, or Model, View, Controller. It's a pretty large topic, but the general idea is that you create a model object to store all your data, and then all the other parts of the GUI -- the many Views that display the data, and the Controllers that change the data -- all look at the model, so that the data is only stored and updated in one place.GUI elements are either designed to accept a model and refreshes are either manually triggered or there is some type of Listen/Callback/Event system to automatically trigger refreshes on the Views when the model changes.  The specific way to handle that depends on the GUI framework you are using.One simple way to implement this would be to create a model class that both classes share and use python properties and a callback registry to trigger updates.Then both other classes would need something like thisThen you would create them like this
Sounds like this might be a good use case for a property. Properties let you have getter/setters that work seamlessly like attributes. From the docs[a property is] a succinct way of building a data descriptor that triggers function calls upon access to an attribute  ...  The property() builtin helps whenever a user interface has granted attribute access and then subsequent changes require the intervention of a method.So...Storing  is not strictly necessary, either. You could have the getter/setter access/modify  directly, if applicable.
I guess ... this doesnt make much sense from a use case standpoint really ... there is almost guaranteed to be a better way to do whatever it is you are actually trying to do (probably involves notifying subscribers and updating variables)see it in action here https://repl.it/repls/TestyGruesomeNumbers
Sounds like you have some GUI element that you want to tie to an underlying model. Riffing on 0x5453's very good advice, what about the following:This does not let you change the attribute from within the label, but I'd prefer it that way.


Answer URL
https://docs.python.org/3/howto/descriptor.html#properties
