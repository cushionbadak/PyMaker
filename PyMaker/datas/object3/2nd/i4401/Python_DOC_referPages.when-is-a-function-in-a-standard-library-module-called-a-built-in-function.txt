Natural Text
I am confused about the term "built-in" function. I thought it meant only those functions built into the interpreter and documented in -2. Built-in FunctionsBut it appears that functions defined in standard library modules are also built-in functions (in some cases). For example -So when is a function in a standard library module called a built-in function and when is it not? 
There are two meanings of “built-in” here, although they both mean “part of the interpreter”.  The library reference uses it to indicate that a function is available without an  (it is “not part of a module”, although see ).  The interpreter itself uses it to indicate that a function is implemented natively rather than in Python (in CPython, it is at least nominally implemented in C).There is yet another meaning on the C side: an extension module (i.e., one written in C) is built-in if the Python binary incorporates it rather than loading it if and when needed.
A built-in function, as per the Reference manual is:Built-in functionsA built-in function object is a wrapper around a C function. Examples of built-in functions are  and  ( is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes:  is the function’s documentation string, or  if unavailable;  is the function’s name;  is set to None (but see the next item);  is the name of the module the function was defined in or None if unavailable.This refers to CPython, other implementations, such as Jython would use Java instead of C to implement their built-ins. The section on Built-in functions of the Standard library is talking about things that are always available. This along with Built-in constants and Built-in Types form the built-in namespace of identifiers that you can always access. Not everything in this built-in namespace is a built-in function or a built-in type. Notable cases are those use in interactive mode such as  and .
In the book "Fluent Python" by Luciano Ramalho, First Edition Third release 2016-03-18, published by O'Reilly, it reads on page 742:The term [i. e. "built-in function"] often refers only to the functions that don't need to be imported ... But built-in modules like sys, math, re, etc. also contain built-in functions.Overall, this term seems to be used inconsistently. But for all practical purposes, this should be of no significance."
Well, from this definition, a function is builtin when it says it is builtin ;) More seriously: Python is a language (let's call it the "legal" part), CPython is one (and not the only) implementation of the Python language (let's call it the "technical" part). From a legal POV, the language definition states that an implementation must make some functions (and classes and objects) available without any import (IOW there are "built in" the language itself). This is what the Python documentation defines as "builtin".Now from a technical POV this doesn't prevent an implementation from having some other functions / objects / classes "technically" builtin (in that they are technically part of the runtime) BUT exposed as parts of one of the stdlib's module or package. 


Answer URL
https://docs.python.org/3/library/functions.html
https://docs.python.org/3/library/builtins.html
https://docs.python.org/3/library/types.html#types.BuiltinMethodType
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/library/functions.html#built-in-functions
https://docs.python.org/3/library/constants.html#built-in-constants
https://docs.python.org/3/library/stdtypes.html
https://docs.python.org/3/library/functions.html#help
https://docs.python.org/3/library/constants.html#quit
https://docs.python.org/3/library/intro.html
