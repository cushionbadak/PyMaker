Natural Text
The Python docs about asyncio - Subprocess say:The  and  methods donâ€™t take a timeout parameter: use the  functionIt's pretty easy to impose a timeout on  using , however I can't find a way to retrieve the partial results from the interrupted  call, and subsequent calls to  doesn't return the lost part either.Example script:Output from the example script:Notice that only the last 2 packets are printed. Output about the first 2 packets are lost.So, how should I get the output from the subprocess before the timeout happened?Edit: To be more precise, ideally what I'm looking for something that:Does what  does, i.e. asynchronously write to a subprocess's STDIN and read its STDOUT and STDERR, without possibility of deadlocking (that the docs ominously warn about);has a configurable total timeout, so that when either the subprocess terminates or the timeout is reached, the received STDOUT and STDERR so far are returned.Looks like such a thing does not exist yet, and one would have to implement it.
You have to use process.stdout:See the example in the user documentation.
For the second part of your question, "how should I get the output from the subprocess before the timeout happened?" I would suggest using  which does not cancel the task () instead of  (which cancels the task):Regarding "retrieve the partial results" , I would suggest not to use  which calls  and use a different approach:Combining the two solutions (and using  instead of the much cooler async for) gives:Notice the timeout (1 second) is per line. See also: https://github.com/aio-libs/async-timeout
If killing subprocess after timeout was expected, you could get the partial output like this:


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.stderr
https://docs.python.org/3/library/asyncio-subprocess.html?highlight=subprocess#asyncio.asyncio.subprocess.Process.stdout
