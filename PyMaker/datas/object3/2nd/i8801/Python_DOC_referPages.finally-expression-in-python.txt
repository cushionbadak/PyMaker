Natural Text
Running the following code:click hereI got the next output:3 ok 6 ok oops ok ok BoomI don't understand why does he prints the bolded ok? he doesn't even enter the loop.I would like to get in-depth understanding of how exceptions and finally in particular works.Thanks in advance!
code in  block is always executed before leaving the  block. The code in  block is executed even if an exception is caught.For detailed explanation of  in python, see python 3 documentation
The official spec isIf finally is present, it specifies a ‘cleanup’ handler. The try clause is executed, including any except and else clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The finally clause is executed. If there is a saved exception it is re-raised at the end of the finally clause. If the finally clause raises another exception, the saved exception is set as the context of the new exception. If the finally clause executes a return or break statement, the saved exception is discarded:So what happens in the fourth iteration of your loop is  is set to  and when you try to convert it to  an exception is raised. Since there is no matching  in the inner  block the exception is saved, the  block is executed which gives the fourth  output and then the saved exception is reraised and caught by the outer  block.


Answer URL
https://docs.python.org/3/tutorial/errors.html
https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
