Natural Text
I have a very large dictionary with entries of the form . For example,  that cannot fit in memory. I'm only interested in the top K values in this dictionary sorted by the first element in each key's value. If there a data structure that would allow me to keep only the largest K key-value pairs? As an example, I only want 3 values in my dictionary. I can put in the following key-value pairs;  and my dictionary would be:  (in case of key-value pairs with the same first element, the second element will be checked and the largest key-value pair based on the second element will be kept) 
Output: {(5, 5): [5, 5], (6, 6): [6, 6], (4, 4): [4, 4], (7, 7): [7, 7],(9, 9): [9, 9], (8, 8): [8, 8], (2, 2): [2, 2], (3, 3): [3, 3]}You can see how only the top 8 values are stored here.Major stuff taken from heapq with custom compare predicate. What we do is create our custom heap class which takes a key parameter where we specify on what value to sort.The next is whenever this size is greater than 8 we pop the minimum item. This ensures we always have only the max 8 values.
If your data will not fit in memory, you need to be particularly mindful of how it's stored. Is it in a database, a flat file, a csv file, JSON, or what?If it is in a "rectangular" file format, you might do well to simply use a standard *nix sorting utility, and then just read in the first  lines.
Here is a customized OrderedDict which keeps the N largest keys for you :Demo:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
