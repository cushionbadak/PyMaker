Natural Text
Directory structureservice-dashboard uses webapp2 to respond to the user. service-session manages the session. What the unittest has to do:Insert valid session into datastoreSet session cookieRequest login page to perform an auto-login based on session cookieUnit TestThe issueDashboard makes a request to service-session, this fails because the session cannot be located. This is because the session has not been dispatched.In search for answers I came across this post where they use a  to bind the services to a certain location. However, this requires to dispatch the services with the devserver because it does not actually dispatch the services. Doing so causes the services to not use the datastore_v3_stub which is initialized in the unit test preventing me to insert a valid session into the datastore.How does one work around this issue? Is it possible to dispatch the services with the datastore stub? What tactics do you use when testing a microservice architecture on app engine?NoseGAE + WebTestUnittest remains about the same except the webtest.TestApp is used to perform requests to dashboard service.When the dashboard service attempts to locate the session service the application terminates with an InvalidModuleError. Trace:
I'm working also with an app deployed in App Engine that is microservices based and as I try to build this mServices to can run in any place (in spite of this is running of App Engine) my strategie is use  as few as possible Google tools. I preffer do unit tests based in raw request (also between mServices) to check everything, but of course it depends of each domain and each specific architecture implemented, but this is only my opinion.If you want talk with people with experience you can join to Slack group and vistit also community forum for users of Google App Engine in Google Groups.Anyway please tell us how have you solved your problem when you do this because there isn't  too much info about in the net. 
I believe you can do what you need with these three tools:NoseGAE -- "NoseGAE sets up the GAE development environment before your test run. This means that you can easily write functional tests for your application without having to actually start the dev server and test over http. "WebTest -- "With this you can test your web applications without starting an HTTP server, and without poking into the web framework shortcutting pieces of your application that need to be tested. The tests WebTest runs are entirely equivalent to how a WSGI HTTP server would call an application. "mock -- "It allows you to replace parts of your system under test with mock objects and make assertions about how they have been used."I'm not sure if you need mock.  I believe using NoseGAE and WebTest will allow your services to interact with each other in the testing environment.Even if you don't need mock, however, it is often useful to isolate your testing more effectively.  I use mock for mocking third-party services when testing my code, but you may also be able to use it to mock your session service when testing your dashboard service and vice versa.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
