Natural Text
This question already has an answer here:How can I decorate an instance method with a decorator class?                    3 answers                While there are plenty of resources about using classes as decorators, I haven't been able to find any that deal with the problem of decorating methods. The goal of this question is to fix that. I will post my own solution, but of course everyone else is invited to post theirs as well.Why the "standard" implementation doesn't workThe problem with the standard decorator class implementation is that python will not create a bound method of the decorated function:A method decorator needs to overcome this hurdle.RequirementsTaking the classes from the previous example, the following things are expected to work:Ideally, the function's  and signature and similar attributes are preserved as well.
Usually when a method is accessed as , python's descriptor protocol kicks in and calls , which returns a bound method. However, because the method has been replaced with an instance of the  class, that does not happen - because  is not a descriptor. In order to make  work as expected, it must implement a  method that returns a bound copy of itself.ImplementationHere's basic "do nothing" decorator class:To make the decorator do something, add your code in the  method.Here's one that takes parameters:An implementation like this lets us use the decorator on methods as well as functions, so I think it should be considered good practice.


Answer URL
https://docs.python.org/3/howto/descriptor.html
