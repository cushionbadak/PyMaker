Natural Text
Is it possible to create a dictionary comprehension in Python (for the keys)?Without list comprehensions, you can use something like this:We can shorten this to a list comprehension: .However, say I want to set a dictionary's keys to the same value.I can do:I've tried this:However, I get a  on the .In addition (I don't need this part, but just wondering), can you set a dictionary's keys to a bunch of different values, like this:Is this possible with a dictionary comprehension?This also raises a  on the .
There are dictionary comprehensions in Python 2.7+, but they don't work quite the way you're trying.  Like a list comprehension, they create a new dictionary; you can't use them to add keys to an existing dictionary.  Also, you have to specify the keys and values, although of course you can specify a dummy value if you like.If you want to set them all to True:What you seem to be asking for is a way to set multiple keys at once on an existing dictionary.  There's no direct shortcut for that.  You can either loop like you already showed, or you could use a dictionary comprehension to create a new dict with the new values, and then do  to merge the new values into the old dict.
You can use the  class method ...This is the fastest way to create a dictionary where all the keys map to the same value.But do not use this with mutable objects:If you don't actually need to initialize all the keys, a  might be useful as well:To answer the second part, a dict-comprehension is just what you need:You probably shouldn't do this but you could also create a subclass of  which works somewhat like a  if you override :

I really like the @mgilson comment, since if you have a two iterables, one that corresponds to the keys and the other the values, you can also do the following.giving d = {'a': 1, 'b': 2, 'c': 3}
Use dict() on a list of tuples, this solution will allow you to have arbitrary values in each list, so long as they are the same length
Consider this example of counting the occurrence of words in a list using dictionary comprehensionAnd the result is
The main purpose of a list comprehension is to create a new list based on another one without changing or destroying the original list.Instead of writing oryou should write onlyIn the two top code blocks you're creating a new list, iterating through it and just returning each element. It's just an expensive way of creating a list copy.To get a new dictionary with all keys set to the same value based on another dict, do this:You're receiving a SyntaxError because when you writeyou're basically saying: "Set my key 'i for i in range(1, 11)' to True" and "i for i in range(1, 11)" is not a valid key, it's just a syntax error. If dicts supported lists as keys, you would do something likeand notbut lists are not hashable, so you can't use them as dict keys.
you can't hash a list like that.try this instead, it uses tuples


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.fromkeys
https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects
