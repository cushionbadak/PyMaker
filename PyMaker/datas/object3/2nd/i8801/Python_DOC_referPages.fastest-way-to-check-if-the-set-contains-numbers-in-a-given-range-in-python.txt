Natural Text
What is the fastest way to check if a set contains at least one number within a given range? For example , , , will return True because of 7.Currently I am using:Then if filtered is not empty, returns a True.Assuming that setA can be a very large set, is this the optimal solution?  Or is this iterating through the entire setA?
Since the membership chick is approximately O(1) for sets you can use a generator expression within  built-in function:Note that for a short range you'll give a better performance with :But in this case for longer ranges you'd definitely go with :And note that the reason that  performs better is because it returns True right after it encounter an item that exist in your set (based on our membership condition) an since the number 8 is at the beginning of the range it makes the  per forms so fast. Also as mentioned in comment as a more pythonic way for checking the validity of the intersection of an iterable within a set you can use  method. Here is a benchmark with this method for small rage:And here is a benchmark that makes the  checks the membership for all the numbers which shows that  performs so better:
The fastest way is to work with a sorted list or tuple instead of a set.  That way you can do the range searches using the bisect module.
Unless you plan to use those values, using the  function is unnecessary, because it stores data that you won't end up using. It also keeps going even after it finds one that fits the criteria, slowing you down quite a bit.My solution would have been to write and use the following function.Like with @Kasramvd's answer, and your idea, this is the brute-force search (O(n) solution). That's impossible to beat unless there are some constraints on the data beforehand, like that it has to be sorted. 


Answer URL
https://docs.python.org/3/library/bisect.html#module-bisect
