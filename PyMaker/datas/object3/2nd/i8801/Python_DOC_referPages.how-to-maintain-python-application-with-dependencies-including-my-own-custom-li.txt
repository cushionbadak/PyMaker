Natural Text
I'm using Python to develop few company-specific applications. There is a custom shared module ("library") that describes some data and algorithms and there are dozens of Python scripts that work with this library. There's quite a lot of these files, so they are organized in subfoldersUsers want to run these scripts by simply going, say, to myproject\utils and launching "py util2.py some_params". Many of these users are developers, so quite often they want to edit a library and immediately re-run scripts with updated code. There are also some 3rd party libraries used by this project and I want to make sure that everyone is using the same versions of these libs. Now, there are two key problems I encountered:how to reference (library) from (apps)?how to manage 3rd party dependencies?The first problem is well-familiar to many Python developers and was asked on SO for many times: it's quite difficult to instruct Python to import package from "....\library". I tested several different approaches, but it seems that python is reluctant to search for packages anywhere, but in standard libraries locations or the folder of the script itself.Relative import doesn't work since script is not a part of a library (and even if it was, this still doesn't work when script is executed directly unless it's placed in the "root" project folder which I'd like to avoid)Placing .pth file (as one might think from reading this document) to script folder apparently doesn't have any effectOf course direct meddling with sys.path work, but boilerplate code like this one in each and every one of the script files looks quite terribleI realize that this happens because Python wants my library to be properly "installed" and that's indeed would be the only right way to go had this library was developed separately from the scripts that use it. But unfortunately it's not the case and I think that re-doing "installation" of library each time it's changed is going to be quite inconvenient and prone to errors. The second problem is straightforward. Someone adds a new 3rd party module to our app/lib and everyone else start seeing import problems once they update their apps. Several branches of development, different moments when user does pip install, few rollbacks - and everyone eventually ends using different versions of 3rd party modules. In my case things are additionally complicated by the fact that many devs work a lot with older Python 2.x code while I'd like to move on to Python 3.xWhile looking for a possible solution for my problems, I found a truly excellent virtual environments feature in Python. Things looked quite bright:Create a venv for myprojectDistribute a Requirements.txt file as part of app and provide a script that populates venv accordinglySymlink my own library to venv site_packages folder so it'll be always detected by PythonThis solution looked quite natural & robust. I'm explicitly setting my own environment for my project and place whatever I need into this venv, including my own lib that I can still edit on the fly. And it indeed work. But calling activate.bat to make this python environment active and another batch file to deactivate it is a mess, especially on Windows platform. Boilerplate code that is editing sys.path looks terrible, but at least it doesn't interfere with UX like this potential fix do.So there's a question that I want to ask. Is there a way to bind particular python venv to particular folders so python launcher will automatically use this venv for scripts from these folders?Is there a better alternative way to handle this situation that I'm missing?Environment for my project is Python 3.6 running on Windows 10.
I think that I finally found a reasonable answer. It's enough to just add shebang line pointing to python interpreter in venv, e.g.The full project structure will look like thisand things work like this:venv is a virtual python environment with everything that project needsinit_environment.bat is a script that populates venv according to requirements.txt and places a symlink to my library into venv site-modulesall scripts start with shebang line pointing (with relative path) to venv interpreterThere's a full custom environment with all the libs including my own and scripts that use it will all have very natural imports. Python launcher will also automatically pick Python 3.6 as interpreter & load the relevant modules whenever any user-facing script in my project is launched from console or windows explorer. Cons: Relative shebang won't work if a script is called from other folder User will still have to manually run init_environment.bat to update virtual environment according to requirements.txtinit_environment scrip on Windows require elevated privileges to make a symlink (but hopefully that strange MS decision will be fixed with upcoming Win10 update in April'17)However I can live with these limitations. Hope that this will help others looking for similar problems.Would be still nice to still hear other options (as answers) and critics (as comments) too.


Answer URL
https://docs.python.org/3/library/site.html
