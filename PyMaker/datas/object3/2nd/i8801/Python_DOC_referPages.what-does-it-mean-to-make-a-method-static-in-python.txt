Natural Text
What is the difference between a function decorated with  and one decorated with ?
Maybe a bit of example code will help: Notice the difference in the call signatures of ,  and :Below is the usual way an object instance calls a method. The object instance, , is implicitly passed as the first argument.With classmethods, the class of the object instance is implicitly passed as the first argument instead of .You can also call  using the class. In fact, if you define something to bea classmethod, it is probably because you intend to call it from the class rather than from a class instance.  would have raised a TypeError, but  works just fine:One use people have found for class methods is to create inheritable alternative constructors.With staticmethods, neither  (the object instance) nor   (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:Staticmethods are used to group functions which have some logical connection with a class to the class. is just a function, but when you call  you don't just get the function,you get a "partially applied" version of the function with the object instance  bound as the first argument to the function.  expects 2 arguments, while  only expects 1 argument. is bound to . That is what is meant by the term "bound" below:With ,  is not bound to , rather the class  is bound to .Here, with a staticmethod, even though it is a method,  just returnsa good 'ole function with no arguments bound.  expects 1 argument, and expects 1 argument too.And of course the same thing happens when you call  with the class  instead.
A staticmethod is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.A classmethod, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how , a classmethod, returns an instance of the subclass when called on a subclass:
Basically  makes a method whose first argument is the class it's called from (rather than the class instance),  does not have any implicit arguments.
Official python docs:@classmethodA class method receives the class as  implicit first argument, just like an  instance method receives the instance.  To declare a class method, use this  idiom:The  form is a function  decorator – see the description of  function definitions in Function  definitions for details.It can be called either on the class  (such as ) or on an instance  (such as ). The instance is  ignored except for its class. If a  class method is called for a derived  class, the derived class object is  passed as the implied first argument.Class methods are different than C++  or Java static methods. If you want  those, see  in this  section.@staticmethodA static method does not receive an  implicit first argument. To declare a  static method, use this idiom:The  form is a function  decorator – see the description of  function definitions in Function  definitions for details.It can be called either on the class  (such as ) or on an instance  (such as ). The instance is  ignored except for its class.Static methods in Python are similar  to those found in Java or C++. For a  more advanced concept, see   in this section.
Here is a short article on this question@staticmethod function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It’s definition is immutable via inheritance.@classmethod function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance. That’s because the first argument for @classmethod function must always be cls (class).
To decide whether to use @staticmethod or @classmethod you have to look inside your method. If your method accesses other variables/methods in your class then use @classmethod. On the other hand, if your method does not touches any other parts of the class then use @staticmethod.
What is the difference between @staticmethod and @classmethod in Python?You may have seen Python code like this pseudocode, which demonstrates the signatures of the various method types and provides a docstring to explain each:The Normal Instance MethodFirst I'll explain . This is precisely called an "instance method". When an instance method is used, it is used as a partial function (as opposed to a total function, defined for all values when viewed in source code) that is, when used, the first of the arguments is predefined as the instance of the object, with all of its given attributes. It has the instance of the object bound to it, and it must be called from an instance of the object. Typically, it will access various attributes of the instance.For example, this is an instance of a string:if we use the instance method,  on this string, to join another iterable,it quite obviously is a function of the instance, in addition to being a function of the iterable list, :Bound methodsInstance methods can be bound via a dotted lookup for use later.For example, this binds the  method to the  instance:And later we can use this as a function that already has the first argument bound to it. In this way, it works like a partial function on the instance:Static MethodThe static method does not take the instance as an argument. It is very similar to a module level function. However, a module level function must live in the module and be specially imported to other places where it is used. If it is attached to the object, however, it will follow the object conveniently through importing and inheritance as well.An example of a static method is , moved from the  module in Python 3.  It makes a translation table suitable for consumption by . It does seem rather silly when used from an instance of a string, as demonstrated below, but importing the function from the  module is rather clumsy, and it's nice to be able to call it from the class, as in In python 2, you have to import this function from the increasingly less useful string module:Class MethodA class method is a similar to an instance method in that it takes an implicit first argument, but instead of taking the instance, it takes the class. Frequently these are used as alternative constructors for better semantic usage and it will support inheritance.The most canonical example of a builtin classmethod is . It is used as an alternative constructor of dict, (well suited for when you know what your keys are and want a default value for them.)When we subclass dict, we can use the same constructor, which creates an instance of the subclass.See the pandas source code for other similar examples of alternative constructors, and see also the official Python documentation on  and .
@decorators were added in python 2.4 If you're using python < 2.4 you can use the classmethod() and staticmethod() function.For example, if you want to create a factory method (A function returning an instance of a different implementation of a class depending on what argument it gets) you can do something like:Also observe that this is a good example for using a classmethod and a static method,The static method clearly belongs to the class, since it uses the class Cluster internally.The classmethod only needs information about the class, and no instance of the object.Another benefit of making the  method a classmethod is so a subclass can decide to change it's implementation, maybe because it is pretty generic and can handle more than one type of cluster, so just checking the name of the class would not be enough.
I think a better question is "When would you use @classmethod vs @staticmethod?"@classmethod allows you easy access to private members that are associated to the class definition. this is a great way to do singletons, or factory classes that control the number of instances of the created objects exist.@staticmethod provides marginal performance gains, but I have yet to see a productive use of a static method within a class that couldn't be achieved as a standalone function outside the class.
Static Methods:Simple functions with no self argument. Work on class attributes; not on instance attributes.Can be called through both class and instance.The built-in function staticmethod()is used to create them.Benefits of Static Methods:It localizes the function name in the classscopeIt moves the function code closer to where it is usedMore convenient to import versus module-level functions since each method does not have to be specially importedClass Methods:Functions that have first argument as classname.Can be called through both class and instance.These are created with classmethod in-built function.
 just disables the default function as method descriptor.  classmethod wraps your function in a container callable that passes a reference to the owning class as first argument:As a matter of fact,  has a runtime overhead but makes it possible to access the owning class.  Alternatively I recommend using a metaclass and putting the class methods on that metaclass:
I started learning programming language with C++ and then Java and then Python and so this question bothered me a lot as well, until I understood the simple usage of each. Class Method: Python unlike Java and C++ doesn't have constructor overloading.  And so to achieve this you could use . Following example will explain this Let's consider we have a  class which takes two arguments  and  and creates the instance of Person. Now, if the requirement comes where you need to create a class using a single name only, just a , you can't do something like this in python. This will give you an error when you will try to create an object (instance).However, you could achieve the same thing using  as mentioned below Static Method:: This is rather simple, it's not bound to instance or class and you can simply call that using class name. So let's say in above example you need a validation that  should not exceed 20 characters, you can simply do this. and you could simply call using Class Name 
The definitive guide on how to use static, class or abstract methods in Python is one good link for this topic, and summary it as following. function is nothing more than a function defined inside a class. It is callable without instantiating the class first. It’s definition is immutable via inheritance.Python does not have to instantiate a bound-method for object.It eases the readability of the code, and it does not depend on the state of object itself; function also callable without instantiating the class, but its definition follows Sub class, not Parent class, via inheritance, can be overridden by subclass. That’s because the first argument for  function must always be cls (class).Factory methods, that are used to create an instance for a class using for example some sort of pre-processing.Static methods calling static methods: if you split a static methods in several static methods, you shouldn't hard-code the class name but use class methods
Let me tell the similarity between a method decorated with @classmethod vs @staticmethod first.Similarity: Both of them can be called on the Class itself, rather than just the instance of the class. So, both of them in a sense are Class's methods. Difference: A classmethod will receive the class itself as the first argument, while a staticmethod does not.So a static method is, in a sense, not bound to the Class itself and is just hanging in there just because it may have a related functionality. 
Another consideration with respect to staticmethod vs classmethod comes up with inheritance.  Say you have the following class:And you then want to override  in a child class:This works, but note that now the  implementation in the child class () can no longer take advantage of anything specific to that class.  For example, say  had a method called  that you want to use in the  implementation of :The workaround here would be to call  in , but then you're repeating yourself (if the name of  changes, you'll have to remember to update that  method).To me, this is a slight violation of the open/closed principle, since a decision made in  is impacting your ability to refactor common code in a derived class (ie it's less open to extension).  If  were a  we'd be fine:Gives: 
I will try to explain the basic difference using an example.1 - we can directly call static and classmethods without initializing2- Static method cannot call self method but can call other static and classmethod3- Static method belong to class and will not use object at all.4- Class method are not bound to an object but to a class.
@classmethod : can be used to create a shared global access to all the instances created of that class..... like updating a record by multiple users....I particulary found it use ful when creating singletons as well..:)@static method:  has nothing to do with the class or instance being associated with ...but for readability can use static method
My contribution demonstrates the difference amongst , , and instance methods, including how an instance can indirectly call a . But instead of indirectly calling a  from an instance, making it private may be more "pythonic." Getting something from a private method isn't demonstrated here but it's basically the same concept.
Class methods, as the name suggests, are used to make changes to classes and not the objects. To make changes to classes, they will modify the class attributes(not object attributes), since that is how you update classes.This is the reason that class methods take the class(conventionally denoted by 'cls') as the first argument.Static methods on the other hand, are used to perform functionalities that are not bound to the class i.e. they will not read or write class variables. Hence, static methods do not take classes as arguments. They are used so that classes can perform functionalities that are not directly related to the purpose of the class.
Analyze @staticmethod literally providing different insights.A normal method of a class is an implicit dynamic method which takes the instance as first argument.In contrast, a staticmethod does not take the instance as first argument, so is called 'static'.A staticmethod is indeed such a normal function the same as those outside a class definition.It is luckily grouped into the class just in order to stand closer where it is applied, or you might scroll around to find it.
You might want to consider the difference between:andThis has changed between python2 and python3:python2:python3:So using   for methods only called directly from the class has become optional in python3. If you want to call them from both class and instance, you still need to use the  decorator.The other cases have been well covered by unutbus answer.

A quick hack-up ofotherwise identical methods in iPython reveals that  yields marginal performance gains (in the nanoseconds), but otherwise it seems to serve no function. Also, any performance gains will probably be wiped out by the additional work of processing the method through  during compilation (which happens prior to any code execution when you run a script).For the sake of code readability I'd avoid  unless your method will be used for loads of work, where the nanoseconds count.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod
