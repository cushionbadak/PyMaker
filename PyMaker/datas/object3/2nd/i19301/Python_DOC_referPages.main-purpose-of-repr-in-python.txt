Natural Text
I just came across this question Difference between  and  in Python and its mentioned that the main purpose of the  is to be unambiguous. But I heard that the main purpose of the  is to generate a string such that  can reconstruct the python object later. Actually what is the main purpose of ? Do any built-in functions or any default modules in python inherently use  to reconstruct the object? Will it mess up the execution if we just overwrite  such that it returns a constant string (e.g. "foo") always?
For types that have a literal notation (, , , , etc.) the  returns a string that can be used to create the type again.That is nice, but not a requirement.The main purpose for  is to provide the developer with unambiguous information as to what object they have here, for debugging purposes.Quoting from the  documentation:Called by the  built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form  should be returned.but most of all:This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.Emphasis mine.Returning a constant string from your custom type would not break anything technically, but would make your life as a developer harder.
The convention is that you use  to get a string that represents the object, and  to describe it.  is used more for debugging,  for regular printing. The idea is that the output of repr is something that looks like code you could eval, and often it is. However, you can't rely on that. If you have to convert an object to a string and back, use  or .For example:If you are writing your own class, and it is very simple, you can make  return something that can be eval'd:Note how I use  to get the  of the title and artist. This takes care of escaping and quoting (for python) automatically, and allows me to eval the result of , although I wouldn't do that outside of debugging. Again,  returns something you would print to the user,  something that helps you debugging. If the class gets more complicated than this, you won't be able to return something complete or evalable from . The convention here is to return a concise string to identify you instance, usually with angular brackets:


Answer URL
