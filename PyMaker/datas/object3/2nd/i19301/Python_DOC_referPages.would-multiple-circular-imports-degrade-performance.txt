Natural Text
I have K python files that need to exist everywhere, previously I tried to seperate their logic and import them one by one at every python code, now I just want to circularly import every one of those K files inside each other.It seems that this could result in K^2 load, however I couldn't free enough brain space to actually think about it.Lets say K=4 and there are a.py,b.py,c.py,d.py: I'm thinking of importing everything from b.py,c.py,d.py at the end of a.py -and- b.py c.py and d.py will just import a.py at the top. And an any.py just imports a.py as everything is already inside it.The alternative is any.py imports a.py b.py c.py d.py, however it's hard too keep those 4 separate.
As all the comments have pointed out, this is a suspicious design that likely to mislead you and your collaborators/readers, make maintenance harder, etc.But it's not a performance issue.When you call import on the same thing multiple times, it takes constant (and almost no) time each time after the first. The (default) import mechanism looks it up in sys.modules, sees that it's already there, and returns it. So, there is no O(K^2) going on here; it's O(K). You can test this for yourself very easily. Create these files:Now, fire up a Python interpreter and do this:Each item appears exactly once, because the importer never gets to the  statement after the first time.
This is basically what packages are for. Put all the Python files in a directory, add an  that imports them all, and then you can just import the directory as a Python module.


Answer URL
