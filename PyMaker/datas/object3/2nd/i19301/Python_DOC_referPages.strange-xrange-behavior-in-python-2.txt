Natural Text
I am familiar with the difference between  and . I noticed something weird with :Functionally, it is correct:However, as you can see, the stop value in the returned  object is the next higher value after the last legal value. Any reason why? which now provides the same functionality in Python 3 as  in Python 2 behaves as expected:
 is equivalent to . To use your example: in Python 2 canonicalizes the  arguments. Internally, the  implementation stores the triple start, step and length (number of elements in the  object) instead of start, step and stop. Here is how  is implemented [1]:[1] https://github.com/replit/empythoned/blob/master/cpython/Objects/rangeobject.c
The stop value of a  or  is always exclusive.Quote from the docs (Python 2):If  is positive, the last element is the largest  less than ; if  is negative, the last element is the smallest  greater than .And for Python 3:For a positive , the contents of a range r are determined by the formula  where  and .For a negative , the contents of the range are still determined by the formula , but the constraints are  and .About the second part of your question regarding the  of the : and  are identical and  for native python objects usually returns valid python code to recreate the object. This does not need to be the exactly same python code that initially created the object.
Does it really matter?The effect is the same. Neither 10 nor 11 is included in the output of , and  is equivalent to .The Python 2 range type (the result of ) stores the range length, not the end value, so to create the  output it calculates that end value for you. And because you used a step value, the calculation shows the result of the formula . For the implementation, the length is the more important value, the  value can safely be discarded and recalculated as needed.So, when you create , it calculates the range length and stores that instead of the end value:The Python 3 Range object stores the end value in addition to the length, so you can query the object for it and display it in the  output.


Answer URL
