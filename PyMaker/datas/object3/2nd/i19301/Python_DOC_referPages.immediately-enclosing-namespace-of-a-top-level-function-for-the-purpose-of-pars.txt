Natural Text
What does the Python  statement do (in Python 3.0 and later)? There's no documentation on the official Python website and  does not work, either.
Compare this, without using :To this, using , where 's  is now also 's :If we were to use , it would bind  to the properly "global" value:
In short, it lets you assign values to a variable in an outer (but non-global) scope.  See PEP 3104 for all the gory details. 
A google search for "python nonlocal" turned up the Proposal, PEP 3104, which fully describes the syntax and reasoning behind the statement.  in short, it works in exactly the same way as the  statement, except that it is used to refer to variables that are neither global nor local to the function. Here's a brief example of what you can do with this.  The counter generator can be rewritten to use this so that it looks more like the idioms of languages with closures.Obviously, you could write this as a generator, like:But while this is perfectly idiomatic python, it seems that the first version would be a bit more obvious for beginners.  Properly using generators, by calling the returned function, is a common point of confusion.  The first version explicitly returns a function.
help('nonlocal')  The  statementThe  statement causes the listed identifiers to refer to  previously bound variables in the nearest enclosing scope.  This is  important because the default behavior for binding is to search the  local namespace first.  The statement allows encapsulated code to  rebind variables outside of the local scope besides the global  (module) scope.Names listed in a  statement, unlike to those listed in a   statement, must refer to pre-existing bindings in an  enclosing scope (the scope in which a new binding should be created  cannot be determined unambiguously).Names listed in a  statement must not collide with pre-  existing bindings in the local scope.See also:PEP 3104 - Access to Names in Outer Scopes        The specification for the  statement.Related help topics: global, NAMESPACESSource: Python Language Reference
@ooboo:It takes the one "closest" to the point of reference in the source code.This is called "Lexical Scoping" and is standard for >40 years now.Python's class members are really in a dictionary called  and will never be reached by lexical scoping.If you don't specify  but do , it will create a new local variable "x".If you do specify , it will find the "closest" "x" and assign to that.If you specify  and there is no "x", it will give you an error message.The keyword  has always seemed strange to me since it will happily ignore all the other "x" except for the outermost one. Weird.

My personal understanding of the "nonlocal" statement (and do excuse me as I am new to Python and Programming in general) is that the "nonlocal" is a way to use the Global functionality within iterated functions rather than the body of the code itself. A Global statement between functions if you will.
Quote from the Python 3 Reference:The nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals.As said in the reference, in case of several nested functions only variable in the nearest enclosing function is modified:The "nearest" variable can be several levels away:But it cannot be a global variable:
with 'nonlocal' inner functions(ie;nested inner functions) can get read & 'write' permission for that specific variable of the outer parent function. And nonlocal can be used only inside inner functionseg:


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
https://docs.python.org/3/reference/simple_stmts.html#nonlocal
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example
