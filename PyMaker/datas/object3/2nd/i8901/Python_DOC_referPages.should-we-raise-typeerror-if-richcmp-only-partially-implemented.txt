Natural Text
I implemented the method  for a Cython extension type (). Some comparison cases are undefined (for example ), so I used to raise an  for them, as follows.I want to  containers of instances of this Cython class.  attempts to compare them, except for a . My understanding is that as ,  anticipates the case of undefined , or the case of different types of objects (see also Python docs).However,  is implemented, so Python doesn't raise a . It calls , I raise an , and that isn't ignored by . Cython requires that  be implemented, so I don't have the option of defining only  and .I changed my code to raising a . It seems that if Python communicates the lack of  with a , then I should do the same, in order to signify that  is absent, despite the presence of an entire , which was a byproduct of using Cython, not the design intent.Does this reasoning make sense? Should I raise another kind of exception? Did I properly interpret the meaning of  in this context?
Yes. Cython is using your implementation as the C API . The documentation for that tells youIf you want to implement a type for which only a limited set of comparisons makes sense (e.g.  and , but not  and friends), directly raise  in the rich comparison function.That gives you a fairly strong hint that it's the right thing to do.
@DavidW provided a very precise and helpful answer, thank you. It points at how to approach similar future questions: by looking at the generated C code. I'm posting this answer as complimentary information for posterity.Searching within the generated  file, we find the class signature:(The dots abbreviate lines irrelevant to our discussion.) The  is defined by the CPython C API. The function  is defined laterThe way to find the first excerpt is by first searching the C file for the Python line of interest (here the signature of ), and then search for callers of the C function (though guided by this discussion, I found them by searching for ).To confirm, I believe that Cython generates the first excerpt from Cython/Compiler/TypeSlots.py:Interestingly, the comment there perhaps suggests that in the future users will be able to implement separate comparator methods, thus not encountering themselves directly this question.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/c-api/type.html#c.PyTypeObject
