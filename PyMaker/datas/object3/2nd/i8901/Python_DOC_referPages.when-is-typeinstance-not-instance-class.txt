Natural Text
Python has the built-in function  and each instance also has a  attribute. I generally believed they returned the same thing. Even the documentation of both sounds similar:The class to which a class instance belongs.and With one argument, return the type of an object.However in  there is a check if they are identical (slightly shortened):When will this not be the case? When is  not the same as ?
 and  may be different, even with new-style classes, as Guido mentioned in PEP 3119:Also,  is equivalent to . (It is possible  and  are not the same object, e.g. when  is a proxy object.)For instance:
This is the case for old style objects (inheriting from nothing). Such objects do not have the  property. I think they do it this way to prevent errors. Example for Python 2.7:See this for further information: Python type() or __class__, == or isNewClassVsClassicClassWhy does `type(myField)` return `<type 'instance'>` and not `<type 'Field'>`?Note: The given lines from cpython were changed in 2008 last time (commit), so it really seems to be a compatibility thing or they just forgot about it.


Answer URL
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/stdtypes.html#instance.__class__
