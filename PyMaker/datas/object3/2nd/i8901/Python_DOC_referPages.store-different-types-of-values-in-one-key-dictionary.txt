Natural Text
I want to make a "travel" summary that looks like:There are 4 starting points to reach Chicago. To access this  city, you can use: Highway X, Highway Z,Highway ZZ.The data that I currently have looks something like:Highway X, NY, ChicagoHighway Z, LA, ChicagoHighway X, Austin, ChicagoHighway ZZ, Miami, ChicagoMy question: What should I use to store these data properly?I tried to use a dictionary with a list inside of it. However, it didn't work because I couldn't store the list of Highway. I only managed to get something like {Chicago: [NY, LA, Austin]}UPDATE!!I just figured out that there's duplication in my data, and that's not a good news because I want the starting points to be distinct. Right now it looks like this:Highway X, NY, ChicagoHighway X, NY, ChicagoHighway Z, LA, ChicagoHighway X, Austin, ChicagoHighway ZZ, Miami, ChicagoHighway X, NY, Chicago
Use a list of tuples in your dictionary. The first item in each tuple would be the highway, the second the starting point.Then it's trivial to produce the summary:The first line uses a set comprehension to remove duplicate highways and then sorts and joins them to make a string. That string as well as the destination city and number of routes is then used to construct the final summary string. The output of the above code would be:An easy way to construct the  dict is to use a  of lists. Assuming that your data is coming from a CSV file:
The best way of organising your  data depends on what you want to do with them.Do you want to answer questions like "I'm in Austin, which Highway do I have to take to get to Chicago?"Then your keys should be the departure cities:Because then you can answer the question by simply looking up the asker's starting point:But if you want to answer different questions like "Someone travelling on Highway X which city are they more likely to come from?" then you'd organise your data differently.If you just want to print them, use a 'lil' (list of lists)Then you can easily format
Nest some dictionaries. This allows you to follow a "route."Alternatively:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
