Natural Text
Consider a special-purpose string of length 8, say "A00000XY". The string has following restrictions.Length = 8.Last two chars have special meaning and should remain as it is.A-Z and 0-9 are only valid characters. Thus the regular expression "^[A-Z0-9]{6}XY$" defines the string.How can I implement a function, say increment, that when called increments the string by one. Thus subsequent calls should look like following:
Temptation was too high. However, not very suitable as homework answer, I'm afraid :DUpdate: it's Python 2. In Python 3 division should be .
So what you really want is a base 36 number. You will need to build a class that works similar to how hex to decimal and decimal to hex conversions work. With your 8 character limit, you have values from 0 to 36^8 - 1 values, or 2821109907455. 9223372036854775807 is the max integer in python , so the good news is that you can represent your value as an integer. To convert from your string value to the integer:intValue = 0Loop through each of the first eight characters in the string.Pass the character to a function that returns an integer equivalent between 0 and 35. We'll call this charValueintValue += intValue*36 + charValueTo convert from the integer to your string value:stringValue = specialCharacterscurDigit = intValue % 36intValue = intValue / 36find string equivalent of intValue (0 to Z)Append to front of stringValueRepeat until intValue < 36. Any remaining characters would be 0Obviously you would build the increment and decrement methods as well.
Inspired from @avysk response.The @avysk reply has two issues.Handling for ZZZZZZXY. It should wrap around and return 000000XY. It shouldn't overflow. However I missed covering this part in my question itself.000000XY isn't handled properly to return 000001XY. It insteadreturns 1XY.Fixing these issue in following code that borrows most from @avysk's response.


Answer URL
https://docs.python.org/3/tutorial/index.html
