Natural Text
Suppose I build a class that basically represents a number plus some fancy stuff. Instances of that class should behave like numbers in any arithmetic/mathematical operation.I could overload all numeric operators in that class, but is there no shorter solution?The class basically looks like:
What about this?I guess based on the above, you can figure out what you need.
I don't endorse this as being particularly idiomatic, but...Assuming all of your function definitions behave identically, like "just invoke the base behavior of the  class and apply all the non-self arguments to it", then you can loop through all the function names you want to define, and create each one using . Example:Result:Edit: I wasn't sure whether you wanted the result of arithmetic to be a MyFancyNumber or a regular built-in numerical type, but either way, the implementation is pretty similar:Result:
No, you have to define all the arithmetic operators otherwise how would Python know what to do with them. Don't forget you also need the reverse operators like .Also the code you've written returns an  for . Did you mean that or did you want adding a fancy number to return another fancy number?You could just subclass  or . Then you don't have to reimplement the operators but you'll still lose the special nature whenever you operate on a value.A better solution would just be to have the numeric value in an attribute and convert to numbers explicitly when that's what you want. You can use  and  to implement the conversion.The documentation covers what you need to do if you really do want to emulate a numeric type: for Python 3.x https://docs.python.org/3/reference/datamodel.html?highlight=int#emulating-numeric-types or for Python 2.x https://docs.python.org/2/reference/datamodel.html?highlight=int#emulating-numeric-types
This works for me in python 2.7 as long as you pass just one argument in the init. Sadly have no idea why it works though.Usage


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__int__#emulating-numeric-types
https://docs.python.org/3/library/numbers.html
