Natural Text
If I run this by passing a string in for  I get an error when calling  on an instance of this class. Specifically I get .So does the  statement in  have to be an integer? I would think if I am overriding it, it should be able to output whatever I want, so why is this not possible?
TL;DRAt the C-level, Python inserts  into a special slot that catches the output of the call to  and does some validation on it to ensure it is correct.In order to answer this, we have to go a bit down the rabbit hole of what happens under the hood when  is called in Python.First, let's establish some behavior.When you call , the C function  gets called.  Let's take a look at this.You will notice that the  function is being called - this function will return the size of an arbitrary Python object. Let's move further down the rabbit hole.It checks if the type defines the  function (sequence length), and if so, calls it to get the length. It appears that at the C level, Python categorizes all objects that define  as either sequences or mappings (even if that's not how we would think of them at the Python level); in our case, Python thinks of this class a sequence, so it calls .Let's take a quick aside: for builtin types (such as , , etc.) Python does not actually call a function to calculate the length, but accesses a value stored in a C struct, making this very fast. Each of these builtin types defines how to access this by assigning an accessor method to .  Let's take a quick peek at how this is implemented for lists: stores the object's size (i.e. number of elements in the list). So, when  is called, it is sent to the  function to get the value of .OK, so that's how it is done for a builtin type... how does it work for a custom class like our ?  Since the "dunder methods" (such as ) are special, Python detects them in our classes and treats them specially (specifically, inserting them into special slots).Most of this is handled in typeobject.c. The  function is intercepted and assigned to the  slot (just like a builtin!) near the bottom of the file.The  function is where we can finally answer your question.Two things of note here:If a negative number is returned, a  is raised with the message . This is exactly the error received when I tried to call !Python tries to coerce the return value of  to a  before returning ( is a signed version of , which is like a special type of integer that is guaranteed to be able to index things in a container).OK, let's look at the implementation of .  It's a bit long so I will omit the non-relevant stuff.The relevant bit here is in , which Python uses to convert arbitrary objects to integers suitable for indexing.  Here is where the actual answer to your question lies.  I have annotated a bit.Based on the error that you received, we can see that  does not define .  We can verify that for ourselves:


Answer URL
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#list
https://docs.python.org/3/library/functions.html#set
https://docs.python.org/3/reference/datamodel.html#object.__len__
