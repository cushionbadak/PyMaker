Natural Text
Is there a difference between using  and using the parent class name directly? For example:Is there internally a difference between  and ?
Not in this case. But in general, and especially when you use multiple inheritance,  delegates to the next object in the Method Resolution Order (MRO) as is specified in the documentation:Return a proxy object that delegates method calls to a parent or  sibling class of type. This is useful for accessing inherited methods  that have been overridden in a class. The search order is same as that  used by  except that the type itself is skipped.The  attribute of the type lists the method resolution search order used by both  and . The attribute  is dynamic and can change whenever the inheritance hierarchy is  updated.(...)(copied, boldface added)Say for instance you define classes like (borrowed from this question, where the MRO is discussed in more detail):Then the  of  is:Now if we call , it prints:so it means that in the context of  and when trying to obtain  that: of  is ; of  is ; of  is ; of  is ; of  is ; of  is ; of  is ; and of  is .Note thus that  does not per se delegates to a parent. For instance the  of  is  and  is not a superclass of , so it really depends on the type of the object (not on the class).Now in case of , the  is:If we construct a  however we get:So in the context of  it holds that: of  is ; of  is ; of  is ; of  is ; and of  is .So here the  of  leads to  (for ) which is not the same in the context of .
Perceive you don't pass the "self" - it is inserted automatically. was first designed in Python 2 to allow classes to be reused as mixins in a class hierarchy in a way that their immediate superclass may change:Let's supose at some point in time your code is like:At this point, correct OOP code should execute    which should chain the call to : but when the superclass name is hardcoded that does not happen - 's  would always come next. And if you hardcode  in , you would prevent  from working without , defeating the purpose of multiple inheritance. When you use  instead, Python's perform the method search for the next parent class looking on the class's  attribute (mro = method resolution order.  is a concrete attribute attached to each Python class).  - So, if at some point in time class  above no longer inherits from , the calls to   in  will be automatically re-routed straight to .It is also worth noting that in Python 3 the parameterless form of  was introduced to ease its use - prior to that, one had to hardcode a reference to the own class and also insert  in the parameters. This form is one of the few exceptions in Python that is hardcoded in the compiler itself - it do change things internally on methods when  (or ) is seen inside a method body (namely, it creates a  variable pointing to the class itself which the  call uses)


Answer URL
https://docs.python.org/3/library/functions.html#super
