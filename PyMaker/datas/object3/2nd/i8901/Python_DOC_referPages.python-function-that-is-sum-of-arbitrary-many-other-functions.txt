Natural Text
Hej! I'm trying to write a function in Python for a polynomial p that is a linear combination of n basis functions phi_i. How can I define a function that is itself a sum of n other functions?I know that this works:But if I try a loop like this:where  is a list of my basis functions, I create an infinite loop.I checked Writing a function that is sum of functions, but unfortunately that's not in Python.
You can do this by passing a simple generator expression to :BTW, it's considered bad style to use  for named functions, it's supposed to be for anonymous functions. If you want a function that doesn't need  to be passed in each time you call it, there are a couple of ways to do that. The easiest way is to simply use  in the function. Eg,However, that has a couple of downsides. It won't work if  isn't in the scope where you call ; you can get around that by making  global, but that may not be convenient, and it's best to avoid globals when they aren't necessary. The other downside is that it uses the current contents of , not the contents it had when  was defined, so if you modify the contents of  those changes will be reflected in , which may or may not be desirable.Another option is to use a closure to create the function. Then we won't be affected by the scope issue: you can call the resulting summing function inside a scope where the original function list isn't visible. We can also create a copy of the function list, so it won't be affected by changes to the passed-in function list.Yet another option is to use my original  and pass it and the  functions to , eg
Straight answer to OPStore your phis in a :Further considerationsIf you want to achieve a polynomial, I would suggest something similar to this: function accepts a sequence as the only argument, where its elements need to be  or . The first element is assigned as the coeficient of x^0, the second to x^1 and so on. So your example (p(x) = x + x^2) would end up being constructed like this: Another option is to accept any number of arguments where each of them needs to be a  or  instead of the first being a sequence. This would only require to add one  to the function declaration.To construct your example with this function you would not require the list: .Any of those methods would create a polynomic function that can be called as you would expect:  would return ,  would return  and so on.Function explained


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
