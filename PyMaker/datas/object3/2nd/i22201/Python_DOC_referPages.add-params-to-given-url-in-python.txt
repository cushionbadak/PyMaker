Natural Text
Suppose I was given a URL.It might already have GET parameters (e.g. ) or it might not (e.g. ).And now I need to add some parameters to it like . In the first case I'm going to have  and in the second — .Is there any standard way to do this?
There are a couple of quirks with the  and  modules. Here's a working example:, the result of , is read-only and we need to convert it to a  before we can attempt to modify its data.
WhyI've been not satisfied with all the solutions on this page (come on, where is our favorite copy-paste thing?) so I wrote my own based on answers here. It tries to be complete and more Pythonic. I've added a handler for dict and bool values in arguments to be more consumer-side (JS) friendly, but they are yet optional, you can drop them.How it worksTest 1: Adding new arguments, handling Arrays and Bool values:Test 2: Rewriting existing args, handling DICT values:Talk is cheap. Show me the code.Code itself. I've tried to describe it in details:Please be aware that there may be some issues, if you'll find one please let me know and we will make this thing better
You want to use URL encoding if the strings can have arbitrary data (for example, characters such as ampersands, slashes, etc. will need to be encoded).Check out urllib.urlencode:
You can also use the furl module https://github.com/gruns/furl
Yes: use urllib.From the examples in the documentation:
Based on this answer, one-liner for simple cases (Python 3 code):or:
I liked Łukasz version, but since urllib and urllparse functions are somewhat awkward to use in this case, I think it's more straightforward to do something like this:
If you are using the requests lib:
Outsource it to the battle tested requests library.This is how I will do it:
Use the various  functions to tear apart the existing URL,  on the combined dictionary, then  to put it all back together again.Or just take the result of  and concatenate it to the URL appropriately.
Yet another answer:
I find this more elegant than the two top answers:The most important things I dislike in the top answers (they are nevertheless good):Łukasz: having to remember the index at which the  is in the URL componentsSapphire64: the very verbose way of creating the updated What's bad about my response is the magically looking  merge using unpacking, but I prefer that to updating an already existing dictionary because of my prejudice against mutability.
In python 2.5
Here is how I implemented it.Worked like a charm. However, I would have liked a more cleaner way to implement this.Another way of implementing the above is put it in a method.


Answer URL
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse
