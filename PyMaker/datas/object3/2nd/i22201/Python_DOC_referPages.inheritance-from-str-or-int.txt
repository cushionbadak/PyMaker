Natural Text
Why I have problem creating a class inheriting from str (or also from int)tha same happens if I try to use  instead of , but it works with custom classes. I need to use  instead of ? why?
Since  is called after the object is constructed, it is too late to modify the value   for immutable types. Note that  is a classmethod, so I have called the first parameter See here for more information
Inheriting built-in types is very seldom worth while. You have to deal with several issues and you don't really get much benefit. It is almost always better to use composition. Instead of inheriting , you would keep a  object as an attribute.you can defer any methods you want to work on the underlying   manually or automatically using .That being said, needing your own string type is something that should give you pause. There are many classes that should store a string as their main data, but you generally want to use  or  (the latter if you're representing text) for general representation of strings. (One common exception is if you have need to use a UI toolkit's string type.) If you want to add functionality to your strings, try if you can to use functions that operate on strings rather than new objects to serve as strings, which keeps your code simpler and more compatible with everyone else's programs.
When you instantiate a class, the arguments that you pass in, are passed to both the  (constructor) and then to the  (initializer) methods of the class. So if you inherit from a class that has restrictions on number of arguments that may be supplied during instantiation, you must guarantee that neither its , nor its  would get more arguments than they expect to get. So that is the problem that you have. You instantiate your class with . The interpreter looks for  method in .  doesn't have it, so python peeps into its base class . And as it has one, that one is used and supplied with the both arguments. But  expects to get only one argument (besides its class object as the first argument). So  is raised. That is why you must extend it in your child class similarly to what you do with . But bear in mind that it must return class instance and that it is a static method (irrespective of whether it is defined with  decorator or not) that counts if you use  function.
Use  in case of immutable types:print returns .Python strings are immutable types. The function  is called to create a new instance of object . The python  function is basically exists to allow inheritance from immutable types.
After carefully reading this, here is another attempt at subclassing str. The change from other answers is creating the instance in the correct class using  . This one seems to behave like a str whenever it's used, but has allowed me to override a method:This lets you do slicing and subscripting correctly. What's this for? For renaming the Django application in the admin index page.


Answer URL
https://docs.python.org/3/library/collections.html#collections.UserString
