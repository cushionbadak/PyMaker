Natural Text
I have code like this (simplified):But  causes an error:How can I fix this? I thought nested scopes would have allowed me to do this. I've tried with 'global', but it still doesn't work.
If you're using Python 3, you can use the  statement to enable rebinding of a nonlocal name:If you're using Python 2, which doesn't have , you need to perform your incrementing without barename rebinding (by keeping the counter as an item or attribute of some barename, not as a barename itself).  For example:and of course use  wherever you're using bare  now elsewhere.
From http://www.devshed.com/c/a/Python/Nested-Functions-in-Python/1/Code in a nested function's body may  access (but not rebind) local  variables of an outer function, also  known as free variables of the nested  function.So, you would need to pass  to  explicitly.
The ExplanationWhenever a value is assigned to a variable inside a function, python considers that variable a local variable of that function. Since the statement  includes an assignment to , python thinks that  is local to the  function. Consequently, it never even tries to look at the value of the  variable that's been defined in . What python sees is essentially this:And I think we can all agree that this code would cause an error, since  is being accessed before it has been defined.(See also this question for more details about how python decides the scope of a variable.)The Solution (in python 3)Python 3 has introduced the  statement, which works much like the  statement, but lets us access variables of the surrounding function (rather than global variables). Simply add  at the top of the function and the problem will go away:The Workaround (in python 2)Since the  statement doesn't exist in python 2, we have to be crafty. There are two easy workarounds:Removing all assignments to Since python only considers  a local variable because there's an assignment to that variable, the problem will go away if we remove all assignments to the name . But how can we change the value of the variable without assigning to it? Easy: We wrap the variable in a mutable object, like a list. Then we can modify that list without ever assigning a value to the name :Passing  as an argument to 
How about declaring  outside of  (i.e. in the global scope), or any other class/function? This will make the variable accessible and writable.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt
