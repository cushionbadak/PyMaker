Natural Text
In python is there an easy way to tell if something is not a sequence? I tried to just do: but python did not like that
 will raise a  if  cannot be iterated on -- but that check "accepts" sets and dictionaries, though it "rejects" other non-sequences such as  and numbers.On the other hands, strings (which most applications want to consider "single items" rather than sequences) are in fact sequences (so, any test, unless specialcased for strings, is going to confirm that they are).  So, such simple checks are often not sufficient.In Python 2.6 and better, abstract base classes were introduced, and among other powerful features they offer more good, systematic support for such "category checking".You'll note strings are still considered "a sequence" (since they are), but at least you get dicts and sets out of the way.  If you want to exclude strings from your concept of "being sequences", you could use  (but that also excludes tuples, which, like strings, are sequences, but are not mutable), or do it explicitly:Season to taste, and serve hot!-)
I think the below code snippet does what you want:
The Python 2.6.5 documentation describes the following sequence types: string, Unicode string, list, tuple, buffer, and xrange.
Since Python "adheres" duck typing, one of the approach is to check if an object has some member (method).A sequence has length, has sequence of items, and support slicing [doc]. So, it would be like this:They are all special methods,  should return number of items,  should return an item (in sequence it is i-th item, but not with mapping),  should return subsequence, and  and  like you expect. This is such a contract, but whether the object really do these or not depends on whether the object adheres the contract or not.Note that, the function above will also return  for mapping, e.g. , since mapping also has these methods. To overcome this, you can do a heavier work:But most of the time you don't need this, just do what you want as if the object is a sequence and catch an exception if you wish. This is more pythonic.
Why are you doing this? The normal way here is to require a certain type of thing (A sequence or a number or a file-like object, etc.) and then use it without checking anything. In Python, we don't typically use classes to carry semantic information but simply use the methods defined (this is called "duck typing"). We also prefer APIs where we know exactly what to expect; use keyword arguments, preprocessing, or defining another function if you want to change how a function works.
For Python 3 and 2.6+, you can check if it's a subclass of :In Python 3.7 you must use  ( will be removed in Python 3.8):However, this won't work for duck-typed sequences which implement  and  but do not (as they should) subclass . But it will work for all the built-in Python sequence types: lists, tuples, strings, etc.While all sequences are iterables, not all iterables are sequences (for example, sets and dictionaries are iterable but not sequences). Checking  will return  for dictionaries and sets.
why ask whytry getting a length and if exception return false


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
