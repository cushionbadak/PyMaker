Natural Text
I'm looking for a very quick way to generate an alphanumeric unique id for a primary key in a table.Would something like this work?What would be a good way to generate random numbers?If I base it on microtime, I have to account for the possibility of several calls of genKey() at the same time from different instances.Or is there a better way to do all this?
As none of the answers provide you with a random string consisting of characters 0-9, a-z, A-Z: Here is a working solution which will give you approx. 4.5231285e+74 keys:It is also very readable without knowing ASCII codes by heart.There is an even shorter version since :
You can use this:There is no guarantee that the keys generated will be unique so you should be ready to retry with a new key in the case the original insert fails. Also, you might want to consider using a deterministic algorithm to generate a string from an auto-incremented id instead of using random values, as this will guarantee you uniqueness (but it will also give predictable keys).
Have a look at the uuid module (Python 2.5+).A quick example:Note that the OP asked for a 16-character alphanumeric string, but UUID4 strings are 32 characters long. You should not truncate this string, instead, use the complete 32 characters.
For random numbers a good source is :

This value is incremented by 1 on each call (it wraps around).  Deciding where the best place to store the value will depend on how you are using it.  You may find this explanation of interest, as it discusses not only how Guids work but also how to make a smaller one.The short answer is this:Use some of those characters as a timestamp and the other characters as a "uniquifier," a value increments by 1 on each call to your uid generator.
simply use python inbuilt uuid : 
In Python 3.6, released in December 2016, the  module was introduced.You can now generate a random token this way : From the Python docs :The  module is used for generating cryptographically strong  random numbers suitable for managing data such as passwords, account  authentication, security tokens, and related secrets.In particularly,  should be used in preference to the default  pseudo-random number generator in the  module, which is designed  for modelling and simulation, not security or cryptography.https://docs.python.org/3/library/secrets.html
Simply use python builtin uuid:If UUIDs are okay for your purposes use the built in uuid package.One Line Solution:


Answer URL
https://docs.python.org/3/library/secrets.html
