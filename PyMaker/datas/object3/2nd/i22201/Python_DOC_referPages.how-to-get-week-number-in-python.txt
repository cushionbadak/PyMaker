Natural Text
How to find out what week number is current year on June 16th (wk24) with Python?  
 has a  method, which returns a tuple containing the calendar week:datetime.date.isocalendar() is an instance-method returning a tuple containing year, weeknumber and weekday in respective order for the given date instance.
You can get the week number directly from datetime as string.Also you can get diferent "types" of the week number of the year changing the strftime parameter for:%U - week number of the current year, starting with the first Sunday  as the first day of the first week.%V - The ISO 8601 week number of the current year (01 to 53), where  week 1 is the first week that has at least 4 days in the current year,  and with Monday as the first day of the week.%W - week number of the current year, starting with the first Monday  as the first day of the first week.I've got it from here. It worked for me in Python 2.7.6
I believe  is going to be the answer. This article explains the math behind ISO 8601 Calendar. Check out the date.isocalendar() portion of the datetime page of the Python documentation..isocalendar() return a 3-tuple with (year, wk num, wk day).  returns the year, returns the week number,  returns the week day. Simple as can be.
Here's another option:which prints .See: http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior
Generally to get the current week number (starts from Sunday):
The ISO week suggested by others is a good one, but it might not fit your needs. It assumes each week begins with a Monday, which leads to some interesting anomalies at the beginning and end of the year.If you'd rather use a definition that says week 1 is always January 1 through January 7, regardless of the day of the week, use a derivation like this:
For the integer value of the instantaneous week of the year try:
If you are only using the isocalendar week number across the board the following should be sufficient:This retrieves the second member of the tuple returned by isocalendar for our week number.However, if you are going to be using date functions that deal in the Gregorian calendar, isocalendar alone will not work!  Take the following example:The string here says to return the Monday of the first week in 2014 as our date.  When we use isocalendar to retrieve the week number here, we would expect to get the same week number back, but we don't.  Instead we get a week number of 2.  Why?Week 1 in the Gregorian calendar is the first week containing a Monday.  Week 1 in the isocalendar is the first week containing a Thursday.  The partial week at the beginning of 2014 contains a Thursday, so this is week 1 by the isocalendar, and making  week 2.If we want to get the Gregorian week, we will need to convert from the isocalendar to the Gregorian.  Here is a simple function that does the trick.
You can try %W directive as below:'%W': Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0. (00, 01, ..., 53)
Look at datetime.datetime.isocalendar.
isocalendar() returns incorrect year and weeknumber values for some dates:Compare with Mark Ransom's approach:
I summarize the discussion to two steps: Convert the raw format to a  object.Use the function of a  object or a  object to calculate the week number.Warm up```python```1st stepTo manually generate a  object, we can use  or .But in reality, we usually need to parse an existing string. we can use  function, such as  in which you have to specific the format. Detail of different format code can be found in the official documentation. Alternatively, a more convenient way is to use dateparse module. Examples are ,  or The above two approaches will return a  object. 2nd stepUse the obtained   object to call . For example,```python```It's very tricky to decide which format to use. A better way is to get a  object to call . For example,```python```In reality, you will be more likely to use  to prepare a weekly report, especially in the "Christmas-New Year" shopping season.  



Answer URL
https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
