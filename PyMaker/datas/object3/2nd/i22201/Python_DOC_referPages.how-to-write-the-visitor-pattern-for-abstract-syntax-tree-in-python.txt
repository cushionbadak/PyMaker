Natural Text
My collegue suggested me to write a visitor pattern to navigate the AST. Can anyone tell me more how would I start writing it?As far as I understand, each Node in AST would have  method (?) that would somehow get called (from where?). That about concludes my understanding.To simplify everything, suppose I have nodes , , ,  and the tree looks like this:Can anyone think of how the visitor pattern would visit this tree to produce output:Thanks, Boda Cydo.
Wikipedia has a great overview of how the Visitor pattern works, although the sample implementation that they use is in Java. You can easily port that to Python, though, no?Basically, you want to implement a mechanism for double dispatch. Each node in your AST would need to implement an  method (NOT a  method). The method takes, as an argument, a visitor object. In the implementation of this  method, you call a  method of the visitor object (there will be one for each AST node type; in Java, you'll use parameter overloading, in Python I suppose you can use different  methods). The correct visitor will then be dispatched with the correct Node type as argument.
See the docs for , e.g. a crude possibility might be:of course this doesn't emit parentheses even where needed, etc, so there's actually more work done, but, it's a start;-).
The two variants to implement the Visitor pattern in Python that I encountered on the Internet most often:One-to-one translation of the example from the Desigh Patterns book by Gamma et al.Using additional modules for double-dispatchTranslated Example from the Desigh Patterns BookThis variant uses  methods in the data structure classes and corresponding  methods in the visitors.The data structureInfix Print VisitorPrefix Print VisitorTestOutputUsing additional modulesThis variant uses  decorator (available in the Python Standard Library since Python v3.4).The data structureInfix Print VisitorPrefix Print VisitorTestOutputThe reason I prefer this variant is that it eliminates the  methods and completely separates the data structure from the operations implemented in the visitors. Extending the data structure with new elements does not require changing the visitors. The visitors ignore the unknown element types by default (see the definitions with the  keyword). A drawback of this method is that  decorator cannot be used with instance methods directly, although, there are ways to make it work.For Python before v3.4 multimethods module can be used similar to the singledispatch decorator. One drawback of the multimethods module is that the visitor method that is applied to a given data-structure element is selected not only based on the element's type but also on the order in which the methods are declared. Keeping the method definitions in the right order can be cumbersome and error prone for data structures with a complex inheritance hierarchy.


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
