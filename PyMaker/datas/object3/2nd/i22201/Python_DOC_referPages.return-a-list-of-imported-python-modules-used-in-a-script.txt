Natural Text
I am writing a program that categorizes a list of Python files by which modules they import. As such I need to scan the collection of .py files ad return a list of which modules they import. As an example, if one of the files I import has the following lines:I would like it to return:I played with modulefinder and wrote:but this returns more than just the modules used in the script. As an example in a script which merely has:The modules returned from the ModuleFinder script return:...whereas I just want it to return 'os', as that was the module used in the script.Can anyone help me achieve this?UPDATE: I just want to clarify that I would like to do this without running the Python file being analyzed, and just scanning the code.
IMO the best way todo this is to use the http://furius.ca/snakefood/ package.  The author has done all of the required work to get not only directly imported modules but it uses the AST to parse the code for runtime dependencies that a more static analysis would miss.Worked up a command example to demonstrate:That will generate a basic dependency file of each unique module.  For even more detail use:To walk a tree and find all imports, you can also do this in code:Please NOTE - The AST chunks of this routine were lifted from the snakefood source which has this copyright:  Copyright (C) 2001-2007 Martin Blais. All Rights Reserved.
It depends how thorough you want to be. Used modules is a turing complete problem: some python code uses lazy importing to only import things they actually use on a particular run, some generate things to import dynamically (e.g. plugin systems).python -v will trace import statements - its arguably the simplest thing to check.
You might want to try dis (pun intended): outputsYour imported modules are .
Well, you could always write a simple script that searches the file for  statements. This one finds all imported modules and files, including those imported in functions or classes:This doesn't do anything for  style imports, though that could easily be added, depending on how you want to deal with those. It also doesn't do any syntax checking, so if you have some funny business like  it will think you've imported all three modules even though the line is an error. It also doesn't deal with / type statements with regards to import - if it could be imported, this function will list it. It also doesn't deal well with multiple imports per line if you use the  keyword. The real issue here is that I'd have to write a full parser to really do this correctly. The given code works in many cases, as long as you understand there are definite corner cases.One issue is that relative imports will fail if this script isn't in the same directory as the given file. You may want to add the directory of the given script to .
This works - using importlib to actually import the module, and inspect to get the members :Output : 
I understand that this post is VERY old but I have found an ideal solution.I came up with this idea:it does from, as, commas and normal import statements.it requires no dependencies and works with other lines of code.The above code prints:Just put your code in the find_modules function.
For the majority of scripts which only import modules at the top level, it is quite sufficient to load the file as a module, and scan its members for modules:This simulates the module being run as a script, by setting the module's name to . It should therefore also capture funky dynamic module loading. The only modules it won't capture are those which are imported only into local scopes.
I was looking for something similar and I found a gem in a package called PyScons. The Scanner does just what you want (in 7 lines), using an import_hook. Here is an abbreviated example:
It's actually working quite good with
Thanks Tony Suffolk for inspect, importlib samples ... I built this wee module and you're all welcome to use it if it helps you.  Giving back, yaaaay!
I know this is old but I was also looking for such a solution like OP did.So I wrote this code to find imported modules by scripts in a folder.It works with  and  format. I hope it helps someone else.
I'm editing my original answer to say this. This is doable with a code snippet like the one below, but parsing the AST may be the best way to go.Further string parsing will be needed to grab just the module names. This does not catch cases where multi-line strings or doc strings contain the words 'import ' or 'from X import '. This is why I suggested parsing the AST.


Answer URL
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/library/ast.html
