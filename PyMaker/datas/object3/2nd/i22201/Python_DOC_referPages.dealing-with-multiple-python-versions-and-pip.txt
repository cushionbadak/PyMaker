Natural Text
Is there any way to make  play well with multiple versions of Python? For example, I want to use  to explicitly install things to either my site 2.5 installation or my site 2.6 installation.For example, with , I use .And, yes — I know about virtualenv, and no — it's not a solution to this particular problem.
The current recommendation is to use , where  is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:Previous answer, left for posterity:Since version 0.8, Pip supports . You can use it the same as :EDIT: pip changed its schema to use  instead of  in version 1.5. You should use the following if you have :Check https://github.com/pypa/pip/pull/1053 for more detailsReferences:https://github.com/pypa/pip/issues/200http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4
In Windows, you can execute the pip module by mentioning the python version ( You need to ensure that the launcher is on your path ) Alternatively, you can call the desired python executable directly like this:
 doesn't work?For this to work on any python version that doesn't have pip already installed you need to download pip and do . For example . This resolves the import error in the comments.  (As suggested by @hbdgaf)
I had python 2.6 installed by default (Amazon EC2 AMI), but needed python2.7 plus some external packages for my application. Assuming you already installed python2.7 alongside with default python (2.6 in my case). Here is how to install pip and packages for non-default python2.7Install pip for your python version:Use specific pip version to install packages:
It worked for me in windows this way:I changed the name of python files python.py and pythonw.exe to python3.py pythonw3.py Then I just ran this command in the prompt:
Other answers show how to use pip with both 2.X and 3.X Python, but does not show how to handle the case of multiple Python distributions (eg. original Python and Anaconda Python).I have a total of 3 Python versions: original Python 2.7 and Python 3.5 and Anaconda Python 3.5.Here is how I install a package into:Original Python 3.5:Original Python 2.7:Anaconda Python 3.5:orSimpler, as Anaconda overrides original Python binaries in user environment.Of course, installing in anaconda should be done with  command, this is just an example.Also, make sure that pip is installed for that specific python.You might need to manually install pip. This works in Ubuntu 16.04:or
I ran into this issue myself recently and found that I wasn't getting the right pip for Python 3, on my Linux system that also has Python 2.First you must ensure that you have installed pip for your python version:For Python 2:For Python 3:Then to install packages for one version of Python or the other, simply use the following for Python 2:or for Python 3:
pip is also a python package. So the easiest way to install modules to a specific python version would be belowor 
So apparently there are multiple versions of  and . It seems to be a big mess. Anyway, this is what I did to install Django for Python 2.7 on Ubuntu 12.10:
On Linux, Mac OS X and other POSIX systems, use the versioned Python commands in combination with the  switch to run the appropriate copy of :(appropriately versioned pip commands may also be available)On Windows, use the  Python launcher in combination with the  switch:if you get an error for  then try:
From here: https://docs.python.org/3/installing/Here is how to install packages for various versions that are installed at the same time linux, mac, posix:On Windows, use the py Python launcher in combination with the -m switch:
Most of the answers here address the issue but I want to add something what was continually confusing me with regard to creating an alternate installation of python in the  on CentOS 7. When I installed there, it appeared like pip was working since I could use  and it would install modules. However, what I couldn't figure out was why my newly installed version of python wasn't seeing what I was installing.It turns out in CentOS 7 that there is already a python2.7 and a pip2.7 in the  folder. To install pip for your new python distribution, you need to specifically tell sudo to go to This should get pip2.7 installed in your  folder along with your version of python. The trick is that when you want to install modules, you either need to modify the sudo  variable to include  or you need to executeif you want to install a new module. It took me forever to remember that  wasn't immediately seeing .
Context: Archlinux  Action:Install python2-pip: You now have pip2.7:Test (in my case I needed 'boto'):Run the following commands:  Success: No error.Exit: Ctrl+D 
for example, if you set other versions (e.g. 3.5) as default and want to install pip for python 2.7:download pip at https://pypi.python.org/pypi/pip (tar)unzip tar filecd to the file’s directorysudo python2.7 setup.py install
You can go to for example C:\Python2.7\Scripts and then run cmd from that path. After that you can run pip2.7 install yourpackage...That will install package for that version of Python.
Here is my take on the problem.  Works for Python3.  The main features are:Each Python version is compiled from sourceAll versions are installed locallyDoes not mangle your system's default Python installation in any wayEach Python version is isolated with virtualenv The steps are as follows:If you have several extra python versions installed in some other way, get rid of them, e.g., remove $HOME/.local/lib/python3.x, etc. (also the globally installed ones).  Don't touch your system's default python3 version though.Download source for different python versions under the following directory structure:At each "Python-3.x.y/" directory, do the following (do NOT use "sudo" in any of the steps!):At "python_versions/" create files like this:Now, anytime you wish to opt for python3.x, doto enter the virtualenvWhile in the virtualenv, install your favorite python packages withTo exit the virtualenv and python version just type "deactivate"
This is probably the completely wrong thing to do (I'm a python noob), but I just went in and edited the pip file
Installation of multiple versions of Python and respective Packages.Python version on the same windows machine : 2.7 , 3.4 and 3.6Installation of all 3 versions of Python :Installed the Python 2.7 , 3.4 and 3.6 with the below paths PATH for all 3 versions of Python :Made sure the PATH variable ( in System Variables ) has below paths included - C:\Python27\;C:\Python27\Scripts;C:\Python34\;C:\Python34\Scripts;C:\Python36\;C:\Python36\Scripts\; Renaming the executables for versions :Changed the python executable name in C:\Python36 and C:\Python34 to python36 and python34 respectively.Checked for the command prompt with all versions :Installing the packages separately for each version


Answer URL
https://docs.python.org/3/installing/
