Natural Text
Suppose code like this:Now I want to call methods start and stop (maybe also others) for each object in the list all. Is there any elegant way for doing this except of writing a bunch of functions like
The *_all() functions are so simple that for a few methods I'd just write the functions. If you have lots of identical functions, you can write a generic function:Or create a function factory:
This will worksimple exampleand in python3
It seems like there would be a more Pythonic way of doing this, but I haven't found it yet.I use "map" sometimes if I'm calling the same function (not a method) on a bunch of objects:This replaces a bunch of code that looks like this:But can also be achieved with a pedestrian "for" loop:The downside is that a) you're creating a list as a return value from "map" that's just being throw out and b) it might be more confusing that just the simple loop variant.You could also use a list comprehension, but that's a bit abusive as well (once again, creating a throw-away list):For methods, I suppose either of these would work (with the same reservations):orSo, in reality, I think the pedestrian (yet effective) "for" loop is probably your best bet.
The approachis simple, easy, readable, and concise. This is the main approach Python provides for this operation. You can certainly encapsulate it in a function if that helps something. Defining a special function for this for general use is likely to be less clear than just writing out the for loop.
maybe , but since you don't want to make a list, you can write your own...then you can do:by the way, all is a built in function, don't overwrite it ;-)
Taking @Ants Aasmas answer one step further, you can create a wrapper that takes any method call and forwards it to all elements of a given list:That class can then be used like this:Which produces the following output:With some work and ingenuity it could probably be enhanced to handle attributes as well (returning a list of attribute values).
Starting in Python 2.6 there is a operator.methodcaller function. So you can get something more elegant (and fast):


Answer URL
https://docs.python.org/3/library/operator.html#operator.methodcaller
