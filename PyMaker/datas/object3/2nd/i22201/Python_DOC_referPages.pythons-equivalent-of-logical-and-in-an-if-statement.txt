Natural Text
Here's my code:I'm getting an error in the IF conditional. What am I doing wrong?
You would want  instead of .
Python uses  and  conditionals.i.e.
Two comments:Use  and  for logical operations in Python.Use 4 spaces to indent instead of 2.  You will thank yourself later because your code will look pretty much the same as everyone else's code.  See PEP 8 for more details.
I'm getting an error in the IF conditional. What am I doing wrong?There reason that you get a  is that there is no  operator in Python. Likewise  and  are not valid Python operators. Some of the operators you may know from other languages have a different name in Python.The logical operators  and  are actually called  and .Likewise the logical negation operator  is called .So you could just write:or even:Some additional information (that might come in handy):I summarized the operator "equivalents" in this table:See also Python documentation: 6.11. Boolean operations.Besides the logical operators Python also has bitwise/binary operators:There is no bitwise negation in Python (just the bitwise inverse operator  - but that is not equivalent to ).See also 6.6. Unary arithmetic and bitwise/binary operations and 6.7. Binary arithmetic operations.The logical operators (like in many other languages) have the advantage that these are short-circuited.That means if the first operand already defines the result, then the second operator isn't evaluated at all.To show this I use a function that simply takes a value, prints it and returns it again. This is handy to see what is actuallyevaluated because of the print statements:As you can see only one print statement is executed, so Python really didn't even look at the right operand.This is not the case for the binary operators. Those always evaluate both operands:But if the first operand isn't enough then, of course, the second operator is evaluated:To summarize this here is another Table:The  and  represent what  returns, they don't have to be  or , they just need to return  or  when  is called on them (1).So in Pseudo-Code(!) the  and  functions work like these:Note that this is pseudo-code not Python code. In Python you cannot create functions called  or  because these are keywords. Also you should never use "evaluate" or .Customizing the behavior of your own classesThis implicit  call can be used to customize how your classes behave with ,  and .To show how this can be customized I use this class which again s something to track what is happening:So let's see what happens with that class in combination with these operators:If you don't have a  method then Python also checks if the object has a  method and if it returns a value greater than zero. That might be useful to know in case you create a sequence container.See also 4.1. Truth Value Testing.NumPy arrays and subclassesProbably a bit beyond the scope of the original question but in case you're dealing with NumPy arrays or subclasses (like Pandas Series or DataFrames) then the implicit  callwill raise the dreaded :In these cases you can use the logical and function from NumPy which performs an element-wise  (or ):If you're dealing just with boolean arrays you could also use the binary operators with NumPy, these do perform element-wise (but also binary) comparisons:(1)That the  call on the operands has to return  or  isn't completely correct. It's just the first operand that needs to return a boolean in it's  method:That's because  actually returns the first operand if the first operand evaluates to  and if it evaluates to  then it returns the second operand:Similarly for  but just the other way around:However if you use them in an  statement the  will also implicitly call  on the result. So these finer points may not be relevant for you.
I went with a purlely mathematical solution:
You use  and  to perform logical operations like in C, C++. Like literally  is  and  is . Take a look at this fun example,Say you want to build Logic Gates in Python: Now try calling them: This will output:Hope this helps!
Probably this is not best code for this task, but is working -
Use of "and" in conditional. I often use this when importing in Jupyter Notebook:
A single  (not double ) is enough or as the top answer suggests you can use 'and'.I also found this in pandas if we replace the "&" with "and", it won't work.
maybe with & instead % is more fast and mantain readibilityother tests even/oddx is even ?   x % 2 == 0x is odd  ?   not x % 2 == 0maybe is more clear with bitwise and 1x is odd  ?   x & 1x is even ?   not x & 1    (not odd)


Answer URL
https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations
