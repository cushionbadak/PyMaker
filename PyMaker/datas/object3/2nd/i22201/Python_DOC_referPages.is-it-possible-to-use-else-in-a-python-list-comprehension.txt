Natural Text
This question already has an answer here:if/else in Python's list comprehension?                    6 answers                Here is the code I was trying to turn into a list comprehension:Is there a way to add the else statement to this comprehension?
The syntax  is a ternary operator in Python that evaluates to  if the condition  is true - otherwise, it evaluates to . It can be used in comprehension statements:So for your example,
If you want an  you don't want to filter the list comprehension, you want it to iterate over every value. You can use  as the statement instead, and remove the filter from the end:
To use the  in list comprehensions in python programming you can try out the below snippet. This would resolve your problem, the snippet is tested on python 2.7 and python 3.5. 
Yes,  can be used in Python inside a  comprehension  with a Conditional Expression ("ternary operator"):Here, the parentheses "()" are just to emphasize the conditional expression, they are not necessarily required (Operator precedence). Additionaly, several expressions can be nested, resulting in more s and harder to read code:On a related note, a comprehension can also contain its own  condition(s) at the end:Conditions? Yes, multiple s are possible, and actually multiple s, too:(The single underscore  is a valid variable name (identifier) in Python, used here just to show it's not actually used. It has a special meaning in interactive mode)Using this for an additional conditional expression is possible, but of  no real use:Comprehensions can also be nested to create "multi-dimensional" lists ("arrays"):Last but not least, a comprehension is not limited to creating a , i.e.  and  can also be used the same way in a  comprehension:and a  comprehension:The same syntax is also used for Generator Expressions:which can be used to create a  (there is no tuple comprehension).Further reading:The Python Tutorial on Data StructuresList ComprehensionsSets Dictionaries
Great answers, but just wanted to mention a gotcha that "pass" keyword will not work in the if/else part of the list-comprehension (as posted in the examples mentioned above).This is tried and tested on python 3.4.Error is as below:So, try to avoid pass-es in list comprehensions
Also, would I be right in concluding that a list comprehension is the most efficient way to do this?Maybe. List comprehensions are not inherently computationally efficient. It is still running in linear time.From my personal experience:I have significantly reduced computation time when dealing with large data sets by replacing list comprehensions (specifically nested ones) with for-loop/list-appending type structures you have above. In this application I doubt you will notice a difference.


Answer URL
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/tutorial/datastructures.html
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator
