Natural Text
Is there a way to grab a list of attributes that exist on instances of a class?The desired result is that "multi, str" will be output.  I want this to see the current attributes from various parts of a script.
You may also find pprint helpful.
Then you can test what type is with  or if is a method with .
 returns the attributes of an object.
This of course will print any methods or attributes in the class definition. You can exclude "private" methods by changing  to 
The inspect module provides easy ways to inspect an object: The inspect module provides several useful functions to help get  information about live objects such as modules, classes, methods,  functions, tracebacks, frame objects, and code objects. Using  you can see all attributes of your class, along with their value. To exclude private or protected attributes use . To exclude methods or functions use  or . Note that  is used on the second element of  since the first is simply a string (its name). Offtopic: Use CamelCase for class names.
What do you want this for? It may be hard to get you the best answer without knowing your exact intent.It is almost always better to do this manually if you want to display an instance of your class in a specific way. This will include exactly what you want and not include what you don't want, and the order will be predictable. If you are looking for a way to display the content of a class, manually format the attributes you care about and provide this as the  or  method for your class.If you want to learn about what methods and such exist for an object to understand how it works, use .  will show you a formatted output about the object's class based on its docstrings. exists for programatically getting all the attributes of an object. (Accessing  does something I would group as the same but that I wouldn't use myself.) However, this may not include things you want and it may include things you do not want. It is unreliable and people think they want it a lot more often than they do.On a somewhat orthogonal note, there is very little support for Python 3 at the current time. If you are interested in writing real software you are going to want third-party stuff like numpy, lxml, Twisted, PIL, or any number of web frameworks that do not yet support Python 3 and do not have plans to any time too soon. The differences between 2.6 and the 3.x branch are small, but the difference in library support is huge.
It's often mentioned that to list a complete list of attributes you should use . Note however that contrary to popular belief  does not bring out all attributes. For example you might notice that  might be missing from a class's  listing even though you can access it from the class itself. From the doc on  (Python 2, Python 3):Because dir() is supplied primarily as a convenience for use at an  interactive prompt, it tries to supply an interesting set of names  more than it tries to supply a rigorously or consistently defined set  of names, and its detailed behavior may change across releases. For  example, metaclass attributes are not in the result list when the  argument is a class.A function like the following tends to be more complete, although there's no guarantee of completeness since the list returned by  can be affected by many factors including implementing the  method, or customizing  or  on the class or one of its parents. See provided links for more details.
Please see the python shell script which has been executed in sequence, here you will get the attributes of a class in string format separated by comma.I am using python 3.4
All previous answers are correct, you have three options for what you are asking 1.dir()2.vars()3.__dict__
There is more than one way to do it:When run, this code produces:
You can use  to get the attributes and  to get the valuesusage :This is particularly useful if your object have no __dict__. If that is not the case you can try var(your_object) also

Please see the following Python shell scripting execution in sequence, it will give the solution from creation of class to extracting the field names of instances.
As written before using  can handle common cases but some classes do not have the  attribute and use  (mostly for memory efficiency).example for a more resilient way of doing this:this code's output:Note1:Python is a dynamic language and it is always better knowing the classes you trying to get the attributes from as even this code can miss some cases.Note2:this code outputs only instance variables meaning class variables are not provided. for example:code outputs:This code does not print the  class attribute and might omit wanted class attributes.Sometimes we might think an attribute is an instance member but it is not and won't be shown using this example.
 gives the list of attributes of an instance.


Answer URL
https://docs.python.org/3/library/functions.html#dir
https://docs.python.org/3/library/functions.html#dir
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/stdtypes.html#object.__dict__
