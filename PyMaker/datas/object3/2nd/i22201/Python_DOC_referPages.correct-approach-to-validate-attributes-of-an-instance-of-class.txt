Natural Text
Having a simple Python class like this:I would like to check the following constraints:"description cannot be empty""value must be greater than zero"Should I:1. validate data before creating spam object ?2. check data on  method ?3. create an  method  on Spam class and call it with spam.isValid() ?4. create an  static method on Spam class and call it with Spam.isValid(description, value) ?5. check data on setters declaration ?6. etc. Could you recommend a well designed/Pythonic/not verbose (on class with many attributes)/elegant approach?
You can use Python properties to cleanly apply rules to each field separately, and enforce them even when client code tries to change the field:An exception will be thrown on any attempt to violate the rules, even in the  function, in which case object construction will fail.UPDATE: Sometime between 2010 and now, I learned about :
If you only want to validate the values when the object is created AND passing in invalid values is considered a programming error then I would use assertions:This is about as concise as you are going to get, and clearly documents that these are preconditions for creating the object.
Unless you're hellbent on rolling your own, you can simply use formencode. It really shines with many attributes and schemas (just subclass schemas) and has a lot of useful validators builtin. As you can see this is the "validate data before creating spam object" approach.You could do the checks during  too (and make them completely transparent with descriptors|decorators|metaclass), but I'm not a big fan of that. I like a clean barrier between user input and internal objects.
if you want to only validate those values passed to the constructor, you could do:This will of course will not prevent anyone from doing something like this:So, correct approach depends on what you're trying to accomplish.


Answer URL
