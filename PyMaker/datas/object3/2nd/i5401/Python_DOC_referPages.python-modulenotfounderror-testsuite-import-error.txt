Natural Text
When I run a file with some tests (ex. python test_website_loads.py) the test runs perfectly and there are no issues, but when I try the testsuite (ex. python test_suite.py), the next error occurs:My directory is as follows:In my special_module_file I have a class with name Special_Class and I am importing such directory in my test_website_loads.py as:My test_suite.py code is:And my test_website_loads.py code is:In summary there are 3 files (A, B, C). A calls B, B calls C. When I run B, it correctly imports C. But when running A, B throws the ModuleNotFoundError.
This is because it's located in the  directory, but you're running  from the parent directory of . The reason why it worked when you ran  is because you were running it from within the  directory. When resolving imports, the Python interpreter checks a series of locations for the module, starting with the current directory and then moving to other locations such as those in your PYTHONPATH environment variable, and the  directory in your Python install location.I duplicated this on my system but changed the import statement to  and it worked. If you don't like this solution, you will need to change the location of the  directory or add it to your PYTHONPATH or something similar.Edit: In response to your comment below, I assume your  file looks something like this:This still runs into the problem described above, because the Python interpreter is still being run in the top-level directory. When it searches for modules, it searches the current directory where it only finds  and . Then it checks your PYTHONPATH environment variable. If it still finds nothing, it will check then installation-dependent default location (such as the  directory), and if no such module is found, it throws an exception. I think the best solution would be to add  to the PYTHONPATH environment variable as described in the link I included above. Otherwise, you could create a symbolic link to the module in the top-level directory with , assuming that you're running on a UNIX-like system. However, this would not be considered best practice; the first method is preferred.


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
