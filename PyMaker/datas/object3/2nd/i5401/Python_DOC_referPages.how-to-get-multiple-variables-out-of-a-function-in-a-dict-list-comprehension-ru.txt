Natural Text
I have a dict comprehension that I wish to optimize, now it seems that it might be less efficient than the for-loop since it runs a function twice so as to get the index slice.I've written both the for-loop version and the dict comprehension version.Edit: The dict comprehension runs a function twice, which is wav.read on every iteration, once to get the first index, and then another time to get the second index. On the for loop, the wav.read function is only run twice, the results saved in memory as two different variables. I want to know a way to be able to do this via list/dict comprehension.
For this specific case, Stefan's answer of:is the most straightforward, reversing and then unpacking the results as positional arguments to .If you have a scenario where constructing a valid slice isn't possible though (say, you need the 0th, 3rd and 4th values, or attributes  and ) there are other ways to do this with a single call, while preserving the  comprehension. All of them boil down to making a cached of the result somehow, so it can have multiple items pulled from it before it disappears:Via  or :Via nested loops in comprehension to make cached item:Two-liner, with a lazy generator expression to pair values, then a dict comprehension to consume it:
runs a function twice:Run it once, by unpacking the arguments (in the needed order):


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
https://docs.python.org/3/library/operator.html#operator.attrgetter
https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
