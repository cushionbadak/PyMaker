Natural Text
I am currently making a top down racing game and need a way to detect when a vehicle has completed a full lap. I have chosen to do this by adding images around the circuit, acting as checkpoints, which match with the track surface. When driven over, they output true, all must have output true in order for a lap to count. However, I cannot find a way to detect a collision between my vehicles and an image. I have tried adding rects to the vehicles and checking if an output can be produced when the two vehicles collide but I just get this error:Is there any way I can do this? My code can be seen below.
The issue is that your code passes in two images into the  method in your  class. Then you are passing these two images into the  function which expects two s. As a result, you get an error telling you that the two objects passed in(s in this case), do not contain rects.To fix this problem:Use the superclass  for your  class.Simply pass in the other sprite into the  method.As a result, your  function should look something like this:And the call to it should look something like this:Also, your  class header should look like this:Some other issues in your code that should be fixed:You are receiving input from the keyboard. This is very weird in a game. Instead, you should look at handling this through keyboard input.You use brackets around choice1 and choice2. This is not needed. There is code in your main game loop that doesn't need to be ran every frame such as . This again is not needed and code like this should go before the main game loop.The order of you main game loop is different to how it is normally done. First, you should do event handling. Second, do your logic and lastly, do your rendering.Also, you are making 5 objects and loading many images where only two will be used. Instead, create and load the objects that will be used in the game after the user has decided which car they will play as.Never use  inside a pygame script. This function is evil when used with pygame and causes many errors and bugs. If you would like to use a framerate cap then use a .I highly recommend you follow these items.I hope this answer helped you and if you have any further questions please feel free to post a comment below!
To implement checkpoints in a game I would use a solution similar to this: Define a list, group, etc. which contains your checkpoints and set the start point and the active point to the first checkpoint in the list. You can use an  iterator to easily cycle through the points. When the player touches a checkpoint, you set the  to the next point in the iterator and check if it was the start point, if yes, increment your  counter.If you want pixel-perfect collision detection, you can give the sprites a  attribute and use .Here's a simplified example. I just swap out the images of the sprites here to show which one is active.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
