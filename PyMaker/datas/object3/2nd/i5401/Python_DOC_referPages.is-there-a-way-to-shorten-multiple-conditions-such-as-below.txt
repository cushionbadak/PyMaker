Natural Text
Sorry, don't really know how to phrase the question so it may seem ambiguous.What I'd like to do is essentially I have a code that reads the input from a user and compares it to certain letters but this process should be case non-sensitive. So I use the .lower() string method.(In this case, the values "A", "B", "C", "a", "b" and "c" should be accepted and all other values assigned to the name "letter" rejected.)Can this be shortened any further? Readability isn't that important unless it is truly gobbledygook that cannot be understood by human tongue haha.I tried:which doesn't work. Neither does:I appreciate any input. Thanks in advance :)
I think what you're looking for is the keyword . The following is probably the most "pythonic" way.That should do it for you. Although, if you're looking for speed, it would be better to create a dictionary or set and do lookups from that.As the complexity of the  operator is average  for arrays and strings but average  and worst case  for sets and dictionaries.For example,If you're interested in reading a little more about the differences in complexities, here's a Python Time Complexity document that's very useful to know!
You can also use any to check if  is matched with any character.Declare a set of letters to compare withCompare using Using  would be simpler and efficient since  have fast membership tests
There are two general approaches.One is that you can group the things you want to compare against (the "a", "b", and "c") into a single compound value. Commonly you use a list or a tuple. A string potentially works in this case as you're only dealing with single characters, but I wouldn't consider it a great choice1. Then you need to find a comparison between your input and the collection that implies the repeated tests of your input against each individual item.This particular example is a very common one; you want to check whether your input is equal to any one of a bunch of items. That's equivalent to checking whether it is in a collection of those items. So .The other general approach when you're testing an expression like  against a bunch of separate conditions and you don't want to write out the expression repeatedly (or compute it repeatedly if it's expensive) is to just save it into a variable on an earlier line. Something like:In this case the first method (using a collection) is easily applicable, so that is definitely the way to go. You may or may not want to also move the  out of the test for other reasons2, but on its own it doesn't give you much (if any) improvement. But when the several conditions you're using aren't as easily combined into one as they are here, then this can help.1 Personally I find using a string as a container of characters usually makes the code less intuitively obvious, and while it can be much more efficient for very large strings it isn't worth doing for any string small enough to write as a reasonable string literal. More importantly though, the  operator for strings tests whether the left string is a substring of the right one, not whether the left thing is a single element of the right one. Given your  comes from user input, they might have accidentally typed , in which case  comes out , but it wasn't equal to any of "a", "b", or "c".2 If you need to refer to the normalised input further down as well, if you want to label the lowercasing as a "normalisation" by giving it a name, if you consider it very important and want to highlight it on its own line rather than hide it within a line that's doing other things as well, etc.


Answer URL
https://docs.python.org/3/library/functions.html#any
