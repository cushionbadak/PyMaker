Natural Text
I have a dictionary in which i have to iterate through the first elements of all the at first and then the second element.I have written in below way, but the output in which it,iterates through list first and then .Any one help me out to modify the code, so that it can iterate all the list's first element's at first and the second elementOutput of above code:but want it in this below way :
Using the zipped-transpose idiom, zip upto the longest list with . Then iterate over each item in the sub-lists, filtering out  values.Here,  is your input dictionary. Don't use  to name variables, it shadows the builtin class with the same name.Note that this order is not guaranteed on python versions below python-3.6, since dictionaries are not ordered in these older versions of python.Final note, for python-2.x, the appropriate function to be used is . The output of  looks like this:These  values are inserted in place of missing values due to the "zip longest' behaviour of the function. These s are removed with .You can use this to get creative using  and a  statement, accomplishing this in one line:Re-written a little more clearly:One more option, for homework submission without . This just cycles over the keys, popping one element at a time from each list.This empties  of its contents, so you may want to make a copy of your data beforehand.
You could try converting each list in your dictionary to  objects, then popping off the first item in each queue until all queues are empty:Which Outputs:Having shown this possible approach, it does require more work to produce what you want, whereas @cᴏʟᴅsᴘᴇᴇᴅ's answer addresses how to do this very easily. Also note that you don't need to use  here, you can simply pop from lists instead with . I used it for convenience and the   function. The only efficiency issue you can run into here is that  is  for lists. One way around this is reversing the lists beforehand, and calling  instead, which results in  behavior. 
You can try this without any external library:output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
