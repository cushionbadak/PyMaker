Natural Text
Given a list, I can get the product of each item in a list as such:[out]:If I want to nest the output of  with the initial list, I could do:[out]:If I want to get to another level of nesting, I could hard code it: But is there some other way to achieve the same output without hard coding it?
The point lies in that a recursive procedure naturally forms a recursive pattern.To just illustrate the idea, the  is not replaced with  because of simplicity. In the further solution, it is done for the nested patterns.If in case, you need different data types to hold your result. A bit more generic solution allows more flexible choice of output data types:The general form is for any binary function , nest it to . A generic approach for not only product but arbitrary binary operation would be:A different idea is using number of arguments instead of explicit integer N to indicate the level of nesting. It looks weird, but it works.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement
