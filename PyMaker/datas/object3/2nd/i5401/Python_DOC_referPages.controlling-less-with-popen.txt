Natural Text
I'm trying to control  from a Python script on Mac OSX. Basically what I would like is to be able to forward control characters (up/down/left/right) but process other input within the Python program. I'm using Popen to start , but  reads user input from a source other than . Because of that, I'm unsure how to send any characters to less.The program opens less, waits one second, and then tries to send  to quit using two separate channels:  and  (since it was mentioned in the SO question I linked above). Neither works.How can I control  from a Python script?
It's a bit involved, but it's possible to use  to create a new TTY in which you have full control over , forwarding input and output to the original TTY so that it feels seamless.The code below uses Python 3 and its standard library. pexpect can do a lot of the heavy lifting but that doesn't ship with Python. Plus it's more educational this way.Assume the rest of the code is indented to run within this context manager.We need to grab the real TTY and set it to raw mode. This can confuse other users of the TTY (for example, the shell after this program exits), so make sure to put it back to the same state after.Then we can invoke , which is named  in Python. This does a couple things:Creates a pseudoterminal.Forks a new child.Attach the child to the slave end of the PTY.Return the child's PID and the master end of the PTY to the original process.The child should run . Note the use of  as it can be unsafe to continue executing other code after a .Then there's a bit of work involved to set up a few asynchronous signal handlers. is received when a child process changes state (such as exiting). We can use this to keep track of whether the child is still running. is received when the controlling terminal changes size. We forward this size to the PTY (which will automatically send another window change signal to the processes attached to it). We should set the PTY's window size to match to start, too.It may also make sense to forward signals such as , , etc.Now for the real meat: copying data between the real and fake TTY.It looks straightforward, although I'm glossing over a few things, such as proper short write and / handling (partly hidden by suppressing ).


Answer URL
https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen
