Natural Text
I have seen similar questions, but they did not answer why python  has higher priority than ?Quick example, let me give a superclass and a subclass:Here in superclass , I created a  method, to compare based on Person's . In sub class , I created a  method to compare based on the .What I found is that if I created a number of  instances in a list:What I found is that:if  is defined in superclass, then even if you define  in subclass, it will still sort by the  method in superclassBut if it is the other way around, define  in superclass and  in subclass, then it will then sort by  in subclassIf the two method names are the same (both  or both ), obviously, the subclass will override superclass, as it should be. But it seems when they are different, it follows a different rule: by whatever  defines. I've also noticed that even if in one class, if both  and  are defined (based on different things, it will still sort by  method)SO back to my question, is my observation true or not? and since I am a beginner, and I have not read through the whole python documents, can somebody point me out where in the documents that this rule is written.
 uses only  comparisons. This is documented.Binary operators like  will try the left-hand operand's method first unless the right-hand operand's class is a subclass of the left-hand operand's class. The other operand's method will only be considered if the first method is missing or returns . The left-hand operand's method for  is , and the right-hand operand's method is . This is also documented.Since all your list elements have the same class and  always succeeds, only the  methods end up getting called.


Answer URL
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/functools.html#functools.total_ordering
