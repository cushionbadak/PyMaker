Natural Text
I have found no reference for a short constructor call that would initialize variables of the caller's choice. I am looking forinstead of writing the heavieror the much heavierAm I missing something?
This is an excellent question and has been a puzzle also for me.In the modern Python world, there are three (excellent) shorthand initializers (this term is clever, I am adopting it), depending on your needs. None requires any footwork with  methods (which is what you wanted to avoid in the first place).Namespace objectIf you wish to assign arbitrary values to an instance (i.e. not enforced by the class), you should use a particular data structure called namespace. A namespace object is an object accessible with the dot notation, to which you can assign basically what you want.You can import the Namespace class from argparse (it is covered here: How do I create a Python namespace (argparse.parse_args value)?). Since Python 3.3. a SimpleNamespace class is available from the standard types package.You can also write:Let's say its the "quick and dirty way", which would work in a number of cases. In general there is not even the need to declare your class.If you want your instances to still have a few methods and properties you could still do:And then:That gives you maximum flexibility.Named tupleOn the other hand, if you want the class to enforce those attributes, then you have another, more solid option.A named tuple produces immutable instances, which are initialized once and for all. Think of them as ordinary tuples, but with each item also accessible with the dot notation. This class namedtuple is part of the standard distribution of Python. This how you generate your class:Note how cool and short the definition is and not  method required. You can actually complete your class after that.And to create an object:or Named listBut what if you want that instance to be mutable, i.e. to allow you update the properties of the instance? The answer is the named list (also known as RecordClass). Conceptually it is like a normal list, where the items are also accessible with the dot notation.There are various implementations. I personally use the aptly named namedlist.The syntax is identical:And to create an object:or:And you can then modify them:But you can't add an attribute that is not defined.UsageHere is my two-bit:Namespace object is for maximum flexibility and there is not even the need to declare a class; with the risk of having instances that don't behave properly (but Python is a language for consenting adults). If you have only one instance and/or you know what you're doing, that would be the way to go.namedtuple class generator is perfect to generate objects for returns from functions (see this brief explanation in a lecture from Raymond Hettinger). Rather than returning bland tuples that the user needs to look up in the documentation, the tuple returned is self-explanatory (a dir or help will do it). And it it's compatible with tuple usage anyway (e.g. ). Plus it's immutable, which has its own advantages.namedlist class generator is useful in a wide range of cases, including when you need to return multiple values from a function, which then need to be amended at a later stage (and you can still unpack them: ). If you need a mutable object from a proper class with enforced attributes, that might be the go-to solution. If you use them well, this might significantly cut down time spent on writing classes and handling instances!
You can update the  attribute of your object directly, which is where the attributes are stored
You can use the dictionary representation of the object's attributes, and update its elements with the keyword arguments given to the constructor:However, consider this question and its answers considering the style of this. Unless you know what you are doing, better explicitly set the arguments one by one. It will be better understandable for you and other people later - explicit is better than implicit. If you do it the  way, document it properly.
Try


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/stdtypes.html#object.__dict__
