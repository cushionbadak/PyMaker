Natural Text
I am using Python 3.6.1, and I have come across something very strange. I had a simple dictionary assignment typo that took me a long time to find.OutputWhat is the code  doing? It doesn't raise a  when it should IMO. At first I thought it was creating a slice. However, typing  raises a . I also typed  in the console and the console didn't print anything. I thought maybe it returned , but I'm not so sure.I've also thought it could be a single line if statement, but that shouldn't be the right syntax either.Additionally,  should raise a .I am perplexed. What is going on?
You have accidentally written a syntactically correct variable annotation. That feature was introduced in Python 3.6 (see PEP 526).Although a variable annotation is parsed as part of an annotated assignment, the assignment statement is optional:Thus, in  is the annotation target is the annotation itself is left uninitialisedThe PEP states that "the target of the annotation can be any valid single assignment target, at least syntactically (it is up to the type checker what to do with this)", which means that the key doesn't need to exist to be annotated (hence no ). Here's an example from the original PEP:Normally, the annotation expression should evaluate to a Python type -- after all the main use of annotations is type hinting, but it is not enforced. The annotation can be any valid Python expression, regardless of the type or value of the result.As you can see, at this time type hints are very permissive and rarely useful, unless you have a static type checker such as mypy.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#annotated-assignment-statements
