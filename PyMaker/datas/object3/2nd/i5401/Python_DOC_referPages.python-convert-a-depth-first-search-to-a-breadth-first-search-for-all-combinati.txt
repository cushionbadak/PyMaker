Natural Text
I have a simple recursive function that provides a depth first search of each possible combination of a list of options:The ouput (shortened due to length) looks as follows:And that is all well and good and works how i want it. But I am interested in converting this from depth first to breadth first so the output looks more like:I have been somewhat able (only a hard-coded fixed length list) to do it iteratively, but desire a recursive solution so it can work for any length of options. I am also purposely avoiding python libraries that provide the functionality i seek because i would like to understand how things work and build my own stuff as a learning exercise. I feel like there is a simple solution, but i am having trouble conceptualizing the breadth first algorithm into my code.UPDATEBefore attempting a recursive BFS solution i wanted to create an iterative BFS solution as it appears to be easier to implement. As it turns out, i am also having trouble doing that.This achieves my desired output (listed above), but only works for a set where i know the length. I want to expand it for a list of an arbitrary length, but am having trouble doing that. I imagine if I can get the iterative solution working, a recursive solution isn't far behind.
Edit: I did't notice from the example that all permutations was required. Follows a function that uses a list as a queue:Which works like this (64 lines, truncated):Also,this version returns a list instead of printing.Follows the previous answer, not considering permutations:As already said by others in the comments, it's not natural. Follows a "recursive" function:The  in the last line requires Python3, but you can remove that.The expected output is:Another version:
I am posting an answer for my own question to offer some clarity regarding depth first search and breadth first search. My initial goal was a recursive breadth first version of my recursive depth first function. This came from a lack of understanding of the fundamental difference between DFS and BFS: DFS uses a stack and BFS uses a queue. (Thanks to @Patrick Haugh for the insight as well as this post: Performing Breadth First Search recursively).The fact that DFS uses a stack lends itself well with a recursive function because you can use the call stack as your operating stack. But This doesn't work for the queue style of a BFS. Breadth First Search can be done recursively, but ends up resembling a bit of a mangled depth first search. It is much cleaner and intuitive to keep BF as an iterative function.Never a fan of copy/pasting code without understanding why it works, @Matteo T. correct answer guided me to the iterative BFS solution without enumeration which i am currently implementing:


Answer URL
https://docs.python.org/3/library/queue.html#queue.Queue
