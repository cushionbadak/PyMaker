Natural Text
I have a class A with three attributes a,b,c, where a is calculated from b and c (but this is expensive). Moreover, attributes b and c are likely to change over times. I want to make sure that:a is cached once it is calculated and then reproduced from cacheif b or c change then the next time a is needed it must be recomputed to reflect the changethe following code seems to work:however this approach does not seem very good for many reasons:the setters of b and c needs to know about ait becomes a mess to write and maintain if the dependency-tree grows largerit might not be apparent in the code of update_a what its dependencies areit leads to a lot of code duplicationIs there an abstract way to achieve this that does not require me to do all the bookkeeping myself?Ideally, I would like to have some sort of decorator which tells the property what its dependencies are so that all the bookkeeping happens under the hood.I would like to write:or something like that.EDIT: I would prefer solutions that do not require that the values assigned to a,b,c be immutable. I am mostly interested in np.arrays and lists but I would like the code to be reusable in many different situations without having to worry about mutability issues.
You could use :The idea is to retrieve the values of tracked attributes each time the property is accessed, pass them to the memoizing callable, but ignore them during the actual call.Given a minimal implementation of the class:outputs
Fortunately, a dependency management system like this is easy enough to implement - if you're familiar with descriptors and metaclasses.Our implementation needs 4 things:A new type of  that knows which other properties depend on it. When this property's value changes, it will notify all properties that depend on it that they have to re-calculate their value. We'll call this class .Another type of  that caches the value computed by its getter function. We'll call this .A metaclass  that connects all the DependentProperties to the correct DependencyProperties.A function decorator  that turns a getter function into a .This is the implementation:And finally, some proof that it actually works:


Answer URL
https://docs.python.org/3/howto/descriptor.html
