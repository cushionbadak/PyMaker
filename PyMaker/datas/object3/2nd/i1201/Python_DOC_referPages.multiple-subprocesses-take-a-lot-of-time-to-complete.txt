Natural Text
I have a single process that is run using  module's :Which results in: Here, a  call is made to process an image (attached) and output the OCR's result to .Now I want this to happen on multiple processes on behalf of this comment  (or see this directly), so the code is here:What this code does is make 4 calls to , save the process objects in a list , iterate through all of these objects until all of them are completed. Explanation for the implementation of the infinite loop is given at the bottom. The problem here is that the latter program is taking a hell lot of time to complete. It is continuously waiting for the processes to complete using  function, which is  until the process has not been completed. This should not have happened. It should have taken a little more than 0.44s only. Not something like 10 minutes! Why is this happening?I came to this specific error by digging into , which was taking a lot of time when run parallely using  or . So this is a scaled down version of a much bigger issue. My question on that can be found here.Explanation for the infinite loop: is 0 initially. It is ORed with the  when the ith process completes. So, if there are 3 processes, then if the first process(i=0) is completed then  is OR'ed with  making it 1. With second and third processes being completed,  becomes  |  |  = 7. And  is also 7. So the loop works until  equals .
Per the faq (with my emphasis):Tesseract 4 also uses up to four CPU threads while processing a page, so it will be faster than Tesseract 3 for a single page.If your computer has only two CPU cores, then running four threads will slow down things significantly and it would be better to use a single thread or maybe a maximum of two threads! Using a single thread eliminates the computation overhead of multithreading and is also the best solution for processing lots of images by running one Tesseract process per CPU core.Set the maximum number of threads using the environment variable OMP_THREAD_LIMIT.To disable multithreading, use OMP_THREAD_LIMIT=1.Therefore, if you wish to run multiple tesseract processes concurrently, you may wish to decrease (or experiment with) OMP_THREAD_LIMIT.The optimal value depends on how many threads your machine can support concurrently.For example, on my machine:completes in 0.220 seconds, whereas the same code without typically takes between 3.1 -- 5.1 seconds, with a lot of variation between runs.To get your code working, use the binary bitwise or operator,  instead of the logical or operator, :For example,prints output likeNotice the loop still iterates thousands of times, mainly while  returns ,but also because  can revisit the same value multiple times.If one iteration takes 0.001s, then 6121 iterations will take 6.121s. So the  loop is complicated and not very fast.


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations
https://docs.python.org/3/reference/expressions.html#boolean-operations
