Natural Text
I am trying to solve a problem in which I have to remove the zeroes (both  and ) from a list and add them to the end of the list (the zero that is appended can be a , doesn't have to be ). But the catch is that I must not remove . I thought I finally figured out my problem by using  instead of  but for some reason it's not working:I've tried putting parentheses at the  statement but the result is the same. It removes all the  but for some reason it won't remove . Result:I rewrote the function but outside of the function and for some reason it works:And here the result is how I would expect it:Why is the floating point zero being removed when executed outside of the function, but when the function  is called, the floating points are not recognized in the  statement?
You only handle  and  - so you can construct a new list from your input if the value is not 0:Output:If  is an integer  only  and  can lead to   - if  is a float, only  and  can lead to 0.0 - simply do not put them into the output.  is not needed because the list comprehension copies already for you.The check for intergers and  works because python caches integers from -5 to 256 or so - they all get the same  and hence  "seems" to work. Only use  for  checks or if you know what you do, never for numbers.If you want to leave non () untouched you can check for that too:Read more:What's with the Integer Cache inside Python?Is there a difference between `==` and `is` in Python?thruthyness: why  - Part 1why  - Part 2Small sanity check:Output:
use , not .  is for comparing identity (two "things" occupying the same space in memory, essentially),  is for equality (do two things have the same defining properties). Furthermore, with floats it is often useful to check whether things are "close enough", e.g. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/library/stdtypes.html#boolean-values
