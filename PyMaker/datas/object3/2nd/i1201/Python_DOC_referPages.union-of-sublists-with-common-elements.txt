Natural Text
Say I have for example the following nested list:How can I group these sublists, by getting the union of sublists which have a common element with at least another sublist within the group? So for the previous example the result should be:Thus the first two sublists are joined as they share .Could someone please share their valuable thoughts ?
You can use  for that. Generate a graph, and add your list as the graph edges using . Then use , which will precisely give you a list of sets of the connected components in the graph: Update In the case of having sublists with more than  elements, you can get all the length   from each sublist and use these as the network edges:Networkx also allows you to visualize the network with : Details More detailed explanation on connected components:In graph theory, a connected component (or just component) of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraphSo essentially, this code creates a graph, with edges from the list, where each edge is composed by two values  where  and  will be nodes connected by this edge. And hence, the union of sublists with at least one sublist with a common element can be translated into a Graph Theory problem as all nodes that are reachable between each other through the existing paths. 
If order is important and the list are large, you can use this two pronged method:To merge within the master list, you can just call the list by their rank and pop the original list:
To merge 2 lists:To be more efficient, create a  on ;
A simple approach See List Comprehensions Append vs Extend


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
