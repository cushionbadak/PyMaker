Natural Text
I have two lists:A is 3 times longer than B and so I'd like to match them together using that, as below:So the first 3 elements of A are matched with the first element of B, the next 3 elements of A are matched with the second element of B and so on.Futhermore, this is a very simplistic example. I'd also be interested in how to best fairly distribute the elements when the one list is bigger than the other by a number which is not a whole number. For example, my two lists are 10001 and 511 elements long, so the first is ~19.57 bigger than the second. Preferably I'd like to use every element in both lists.
I will assume here that first list is the longer.Here is is simple way:
Assuming the length of  is a multiple of , you can easily doHow it works:Determine the value of  such that Iterate over , and use  to determine which value of  to pick by dividing the current index by it, accordingly If the lengths are not multiples, then it will throw a You can circumvent this by computing  to beFor example,Here's a functional approach using   and .
You can use the  recipe from the  docs (or import it from ).Recipe:Application:
You can also try using  and repeat  with your own list comprehension:It's also recommended not to hardcode , and use  to get the proportional distribution, as shown in @coldspeed's answer
You can also group  into a list of sublists, each sublist the length of :Output:


Answer URL
https://docs.python.org/3/library/functions.html#zip
