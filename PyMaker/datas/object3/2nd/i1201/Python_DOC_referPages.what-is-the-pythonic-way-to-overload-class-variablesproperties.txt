Natural Text
Hello!I need each child class to has own set of constants. I've found a "proper" way with properties and overloading setter methods, but:I need to define constructor in child classes (which I don't need) and assign values in constructor;Every instance of class will have copy of this constants in memory (senseless resource consumption);It looks weird when you define setter, getter and property at all just to use it as constant.I've done something like this:This method also doesn't solve problems of method with properties (except last), just more compact. There's other way, which I find not good:In fact, it solve all problems and pretty compact, BUT it violates rule of inheritance (isn't it?).Question:What is the proper way to do this?P.S. Provided code is simplified example, base class contains methods which I use in child class, please don't write me that base class is useless here.
If you want your base class to indicate that it needs to be subclassed with certain attributes, you can make it an abstract base class.You will then not be allowed to instantiate  or its subclasses unless they override the abstract methods.  You can do eitherto assign class attributes with those names, or The benefit of the second approach is that it will raise an error if you try to assign to the property 
your second version looks fine to meâ€¦  each language has their own conventions around what a "class" or "object" means, and this looks reasonably "Pythonic"one minor comment about the first version, is that Python doesn't care about "overloading", you don't need to include:at all, i.e. it's fine to have:as well in your first version.another potentially useful tool here is the  decorator, e.g:would output ""
If the  remains same for  classes,  will take care of all your concerns (). A 'pythonic' solution would include, to remove duplication's, of any,  and  in  classes and let  handle these common-tasks.


Answer URL
https://docs.python.org/3/library/abc.html
