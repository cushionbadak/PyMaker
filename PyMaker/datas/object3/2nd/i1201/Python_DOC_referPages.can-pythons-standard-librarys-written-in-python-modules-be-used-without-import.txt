Natural Text
I've been having some difficulty with modules in Python. I understood that built-in modules, which are written in C, are like part of the Python interpreter, so they're made readily available for the programmer as belonging to the built-in namespace and, hence, do not need to be imported. Is that only limited to those modules, meaning all other non-built-in, written-in-Python standard library modules need importing in order to be used?Thank you.
TLDR: You have to import every module before usage, with the exception of .There are two different kinds of "builtin" as far as Python is concerned:Builtin objects that are compiled, such as  or .The  module containing a basic set of objects, such as  and .Things can be part of 1 without being part of 2 and vice versa. For example,  is a pure-Python function, and  is part of the  module. However, most of the stuff in 2 is also part of 1 for practical reasons:  are used a lot and compiled objects usually have better performance.Builtin objects can represent any kind of module, function or object. The language specification does not really define which objects are builtins and what builtins are. Details vary by implementation: CPython uses compiled C structs and functions, whereas PyPy uses compiled RPython objects, for example.As a rule of thumb, "everything not defined by Python code" is a builtin. However, this is not strictly true: a builtin object can access the interpreter to create regular Python objects.All builtins have in common that they appear like regular Python objects, but their internals can follow arbitrary rules.Note that a builtin is not necessarily built into the interpreter. CPython provides a C API and PyPy emulates it via cpyext, allowing shared libraries to be loaded and used by the interpreter.Many third-party libraries use compiled Cython objects and functions to provide custom builtins. However, any language that can produce shared libraries compatible to the C API can be used.The  module is an actual module named .All names of this module are always available in all other modules: is searched whenever a name is not found in the current scope, its containing scopes, or the current module.This is similar but not the same as if there were a  in every module: if  is changed, the builtin names reflect that.For example, the  in an interactive Python session is part of . It is changed whenever a command is run.Disclaimer: This is just for demonstration. It is a really, really bad idea to modify  yourself.While only names from  are available without importing, Python usually imports several modules when it starts.Some of these are part of high-level parts of the interpreter, e.g.  and . The  and  modules allow to prepare your environment - for example, changing the look of the interactive interpreter, setting search paths in , and similar.


Answer URL
https://docs.python.org/3/library/builtins.html
https://docs.python.org/3/c-api/intro.html
https://docs.python.org/3/library/builtins.html
https://docs.python.org/3/library/site.html
https://docs.python.org/3/library/functions.html
