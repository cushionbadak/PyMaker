Natural Text
This is sort of a ridiculous and weird use case but bear with me, I have this list comprehension:in a backend api call. It works great except that there will almost always be duplicates in the end result. How can I ensure that no duplicates are returned? This is actually happening inside another list comprehension, and I can't reference the list at any point to remove duplicates so I must do so within the list comprehension itself.I've tried using a :but this results in the error: 
the idea is to make your structures hashable without destroying them too much so you can restore them back as how they were.You could convert your dictionaries to  then to  (now we can put that in a  because data is hashable), apply a  on that, and convert back to dictionary:This works because values of the sub-dicts are hashable (strings). If they were dictionaries, we'd have to convert them too.result:another solution (by Jon Clements) that doesn't use a  but builds a dictionary (using a dictionary comprehension) & uses key unicity to clobber duplicates, then extract only values:
You can use a  instead of a dictionary inside the .  As immutable objects, s are hashable, which dictionaries are not. You can also use a set comprehension directly:
This isn't a list comprehension, but you can use the   recipe, also available in 3rd party libraries, e.g. :The trick is to make sure you can hash your dictionaries, which we perform by converting each dictionary to a tuple of sorted tuples. Internally, the algorithm works by maintaining a "seen"  of values and yielding only values which do not appear in the , adding them otherwise.
You can wrap your entire list in another comprehension to  each entry, and use  on that:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/typing.html#typing.NamedTuple
