Natural Text
Assume this string:I'd like to and up with a key, value pair like this:or a pandas DataFrame like thisI tried a regex like:  but this doesn't work.
Use , and extract regions of interest into columns. You can then strip out spaces as necessary. Since you mentioned you are open to reading this into a DataFrame, you can leave that job to pandas.Or (Re: edit),The pattern matches the text inside braces, followed by the text outside upto the next opening brace.
Try this regex which captures your key and value in named group captures.Explanation: --> Since  has a special meaning which defines character set, hence it needs to be escaped and it matches a literal  --> Consumes any preceding space before the intended key that doesn't need to part of key --> Forms a  named group capturing one or more word [a-zA-Z0-9_] characters. I have used  to keep it simple as the OP's string only contains alphanumeric characters, otherwise one should use  character set to capture everything within square bracket as key. --> Consumes any following space after the intended key capture that doesn't need to part of key --> Matches a literal  which doesn't need escaping --> Consumes any preceding space that doesn't need to be part of value --> Forms a  named group capturing any character exception  at which point it stops capturing and groups the captured value in named group .DemoPython code,Outputs,
You could minimize the regex needed by using  and output to a dictionary. For example:
Regex is not really needed here - simple string split does the job:Output:Doku for format'ing:custom string formatingstring format mini languageAs almost 1-liner: 
You could use finditer:Output
With a RegEx, you can find  pairs, store them in a dictionary, and print them out:The RegEx matches 2 groups:The first group is all the characters, numbers and spaces inside enclosed in squared brackets and the second is all the characters, numbers and spaces preceded by a closed square bracket and followed by an open square brackets or end of the lineFirst group: Second group: Note that in the second group we have a positive lookahead: . Without the positive lookahead, the character would be consumed, and the next group won't find the starting square bracket.findall returns then a list of tuple: .A list of tuple can be immediately converted into a dictionary: dict(my_tuple_list).Once you have your dict, you can do what you want with your key/value pairs :)


Answer URL
https://docs.python.org/3/library/string.html#custom-string-formatting
https://docs.python.org/3/library/string.html#formatspec
https://docs.python.org/3/library/re.html#re.finditer
