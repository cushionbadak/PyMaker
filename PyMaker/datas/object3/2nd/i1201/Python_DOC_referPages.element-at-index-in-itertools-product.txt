Natural Text
Can we get the element in a specific index from itertools.product result in Python 3? Like Below: UPDATE The whole question turned upsidedown! I found that generating all set and look for an index is a big mistake! I looked at the possible duplicate of my question, but I don't get the answer!
You do not have to iterate the generator until you get to the index, but you can generate that product immediately, in O(1) as described here. Adapting that to the  form:Example:
Assuming you refer to Python 3, you could use enumerate to filter to index the generator and then use next:Output
The result of  isn't a list, but rather an iterable - which is why this doesn't work, you can't access an iterable by index.You can make a list using  - but this means computing all the values, which could be very inefficient. In the example case, while we have to compute all the values leading up to the one we want, we don't need to store them all in memory, nor do we need to compute the rest after we get the one we want.If you only want one element, the better solution is to only consume the part you need - this can be done easily with .As the slice is another iterable, we use  to get the first item. functions very similarly to the list slice (as the name implies). Note that once you have consumed some of the iterable, working with it further will work from where you left off. You should either get what you need in a single iteration, or create a list (or other data structure if appropriate).The big advantage of  over other ways of throwing away the initial values you are not interested in is that it is implemented very efficiently within Python, and so is likely to be the fastest option, as well as being flexible if you later need more than just the one element.
The other solutions produce the correct result, but if you just want one element of the Cartesian product, iterating the generator returned by  is not the most efficient solution. You can directly build the item that you need without having to go through all the elements with a function like this:The complexity for this solution is O(1). A quick comparison:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/stdtypes.html#list
