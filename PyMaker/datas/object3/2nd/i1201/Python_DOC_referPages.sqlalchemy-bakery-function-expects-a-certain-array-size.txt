Natural Text
I have a strange issue in my Python project. It uses SQLAlchemy and Bakery to have prepared queries. I have a function that takes the connection (db), bakery, and an array of objects.This function is called several times by an other function in a for loop and here is my issue (at least what I understand):Let's assume that the first time it receives an array with two elements.The next time it is called the function will also expect an array with two elementsIf the next array is smaller than the previous, I get this kind of error (Pastebin):As you can see, the function is called three times, the first two times it works without any issue (3 elements each time), and the third time it has only two elements and it expect a third element according to the error.NB: The iterable can reach about 50 elements most of the time.
The problem stems from the observations 4. and 5. under "Synopsis" in the baked queries documentation:In the above code, even though our application may call upon  many times, and even though within each invocation we build up an entirely new  object, all of the lambdas are only called once. Each lambda is never called a second time for as long as this query is cached in the bakery.The caching is achieved by storing references to the lambda objects themselves in order to formulate a cache key; that is, the fact that the Python interpreter assigns an in-Python identity to these functions is what determines how to identify the query on successive runs. For those invocations of  where the  parameter is specified, the callable  will be part of the cache key thatâ€™s retrieved; when  is , this callable is not part of the cache key.If you inspect your  function using  you'll note that the lambda-functions are constants and so keep their identity between calls. As explained in the referenced documentation, SQLAlchemy caches queries based on those identities and callsonly once. In other words the placeholders will be set the first time you call , based on . They will be "reset" only when this query has been evicted from the cache.The solution depends on your DBMS in use. For example Postgresql has the  array comparison that could be used:and the parameter would be passed asOn MS SQL Server you could perhaps create a full-text index and use :The bind param  should pass the search condition, which must be formed from :This of course requires that the items in  are valid full-text search terms.


Answer URL
https://docs.python.org/3/library/dis.html
