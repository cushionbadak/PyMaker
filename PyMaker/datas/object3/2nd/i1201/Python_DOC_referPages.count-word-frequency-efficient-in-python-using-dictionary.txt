Natural Text
My task is to find the frequency of each word in a list. There are two ways to it. Method1Method2Why is Method 2 efficient? Isn't in both the cases, the number of hash functions calls is same in contradiction to this http://blackecho.github.io/blog/programming/2016/03/23/python-underlying-data-structures.html?
It depends on the input. If on average most words are already in the dict then you will not get many exceptions. If most words are unique then the overhead of the exceptions will make the second method slower.
Lets simulate few cases.Example: "A bird is flying"In your first method: for every word it will search in the dictionary 3 times so it will access total 3 *  or 3 * 4 = 12In second methodit will only search 2 times if not found; otherwise 1 time: so 2 * 4 = 8Theoretically both have same time complexity.Update:Thanks to Thierry Lathuille for pointing out. Indeed method 1 should be more efficient than method 2. Python dictionary use hashmap so accessing a key complexity would be O(n) but in average case it is O(1). and cpython implementation is quite efficient. On the other hand try/catch exception handling is slow. you can use defaultdict in your method 1 for more clean code.
There are two main differences: Method 1 will perform the  operation for every word, while method 2 will update directly whenever possible.  Whenever Method1 inserts a new word, the count is later updated. Method2 starts to count at 1.It ultimately depends on the input but if there are a sufficient amount of repetitions there will be less operations.Example:Let's just go through the code here to get the general idea (not actual operations).Method11 - 'a' not in wdict - True2 - assign 'a'3 - update 'a'4 - 'a' not in dict - False5 - update 'a'  Method21 - access 'a'2 - error3 - assign 'a'  directly to 14 - update 'a' (second 'a')  Although these steps are not precisely the amount of operations that go on when executing, they are indicative that Method2 is leaner and goes through less 'steps'.
There are several approaches to this answer. You can use the loop and still get the expected answer. I focus on two methods:List comprehensionOutput:Method two: standard libraryOutput:The method of choice depends on the size of text you are working with. The methods above are good for small text size.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
