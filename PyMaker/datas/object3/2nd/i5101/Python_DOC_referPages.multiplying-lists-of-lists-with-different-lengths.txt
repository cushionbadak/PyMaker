Natural Text
I have:I want to multiply (pairwise) every element of a with bHere's my code so far:so my plan of attack was to get all the lists in one list and then multiply everything together. I have seen that lambda work for multiplying lists pairwise but I can't get it to work for the one list. 
That kind of combination is called the Cartesian product. I'd use  for this, which can easily cope with more than 2 lists, if you want.Firstly, here's a short demo that shows how to get all of the pairs and how to use tuple assignment to grab the individual elements of the pairs of sublists.outputAnd here's how to find the  of products that you want.outputHere's an alternative approach, using the distributive property, as mentioned by Prune.Firstly, here's an unreadable list comprehension version. ;) outputHow it worksBy the distributive law, the sum you want from the given input data can be written asWe can re-arrange the data to produce that expression as follows.outputNow we modify that slightly to get the sums of those lists     outputNow we just need to multiply the corresponding items of those lists, and add those products together to get the final sum. Once again, we use  to perform the transposition.output
If your only need is to return that conglomerate sum, I suggest that you quit doing all of that complex work: apply the distributive property.  From your example, I'm not sure how thoroughly you are making your cross-products, but this collapses the example to do all elements of each.
I suggest stepping back from the code and breaking this down into smaller parts. First, multiply each element from two lists, pairwise.Second, given a list of lists  and a list of numbers , multiply each list of  pairwise by . This can reuse the solution to part 1.Finally, solve your original problem with two lists of lists by reusing part 2.Note how I am describing each of these pieces in words without worrying too much about Python syntax. Now that we have a description in words, it is easier to translate it into Python.
Using  will knock this out trivially:
You can use  with :
To make things easier, you can use  function. What it does is that it returns Cartesian product of iterables passed to it like arguments. After you have Cartesian product, you can iterate through them and do sum of pairs of coordinates.After explanation, this is something that you want:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
