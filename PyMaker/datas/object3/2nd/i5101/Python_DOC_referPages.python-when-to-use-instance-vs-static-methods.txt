Natural Text
I am struggling to understand when it makes sense to use an instance method versus a static method. Also, I don't know if my functions are static since there is not a @staticmethod decorator. Would I be able to access the class functions when I make a call to one of the methods?I am working on a webscraper that sends information to a database. It’s setup to run once a week. The structure of my code looks like thisThat is the basic structure. The code is functional but I don’t know if I am using the methods (functions?) correctly and potentially missing out on ways to use my code in the future. I may even be writing bad code that will cause errors down the line that are impossibly hard to debug only because I didn’t follow best practices. After reading about when class and instance methods are used. I cannot see why I would use them. If I want the url built or the data pulled from the website I call the build_url or get_web_data function. I don’t need an instance of the function to keep track of anything separate. I cannot imagine when I would need to keep something separate either which I think is part of the problem. The reason I think my question is different than the previous questions is: the conceptual examples to explain the differences don't seem to help me when I am sitting down and writing code. I have not run into real world problems that are solved with the different methods that show when I should even use an instance method, yet instance methods seem to be mandatory when looking at conceptual examples of code.Thank you!
The functions you have wrote in your code are instance methods but they were written incorrectly.An instance method must have  as first parameteri.e Then you call it like thatThis  parameter is provided by python and it allow you to access all properties and functions - static or not - of your  class.If you don't need to access other functions or properties in your function then you add  decorator and remove  parameterAnd then you can call it directlyor call from from class instanceBut what is the problem with your current code you might ask?Try calling it from an instance like this and u will see the problemExample where creating an instance is useful:Let's say you want to make a chat client.You could write code like thisBut a much cleaner and better way to do it:To use that last class you do
This code doesn't need to be a class at all.  It should just be a pair of functions.  You can't see why you would need an instance method because you don't have a reason to instantiate the object in the first place.
From given example, there is no need to have  class after all, since you are using it just like a additional namespace. You do not have any 'state' that you want to preserve, in either class or class instance.What seems like a good thing is to have separate module and define these functions in it. This way, when importing this module, you get to have this namespace that you want.
Classes can be used to represent objects, and also to group functions under a common namespace.When a class represents an object, like a cat, anything that this object 'can do', logically, should be an instance method, such as meowing.But when you have a group of static functions that are all related to each other or are usually used together to achieve a common goal, like  and , you can make your code clearer and more organized by putting them under a static class, which provides a common namespace, like you did.Therefore in my opinion the structure you chose is legitimate. It is worth considering though, that you'd find static classes more in more definitively OOP languages, like Java, while in python it is more common to use modules for namespace separation.


Answer URL
https://docs.python.org/3/reference/datamodel.html#customization
