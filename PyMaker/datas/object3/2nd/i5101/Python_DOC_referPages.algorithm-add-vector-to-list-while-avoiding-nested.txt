Natural Text
I have a list of elements like this:Now, I want to append it to a list only if there's no other element that  already contains this new element (checking by start, end and category).Also, if this element contains an element that is already in the list, I want to add it and delete the old one.To sum up, I don't want nested elements and I only want to keep the larger one.What I have so far (id is category):This works, I think it's O(n*n). Maybe there's another way to do it more efficient by using dicts or pandas.Some thoughts:Should I do it before appending or append all and then check?UPDATE 1:There is an implementation of interval tree in this lib, the only issue is that it is not possible to delete intervales once added.http://bx-python.readthedocs.io/en/latest/lib/bx.intervals.intersection.html#bx.intervals.intersection.IntervalTreeUPDATE 2:https://github.com/chaimleib/intervaltree is interesting, the thing is that I cannot recover while discading partial overlaps. So I only need full overlaps / nest
rough draft:define a class for your "ir" items, with __lt__ using 'start'have a master dict with category as the keystore a sorted list of items with that category (bisect)when you find the insert position based on start time, you can start comparing end times until you find an "ir" item which should not be deleted.
By using pandas library and some coding I was able to get a decent solutionInitialize...Add...Delete dups...As suggested in some comments, interval tree was also a possible solution but I could not get it work 


Answer URL
https://docs.python.org/3/reference/datamodel.html
