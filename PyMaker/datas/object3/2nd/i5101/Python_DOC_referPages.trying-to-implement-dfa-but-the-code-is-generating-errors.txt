Natural Text
Code:-Input:- Input is a triple of string S, a delta function D, and final state mask F. I number each state with a power of 2, so F is just the OR of each accepting state.  D is a map from (state,input char) -> state.Example input (accepts all strings ending in b):Output:-Similarly, the following code is for implementing an NFA. But it is throwing a different kind of error, even after adding the eval(). The code is as follows:-Input:-We number states as powers of 2 as before.  D is a map from input character to a list of transitions labelled by that character.example input (accepts all strings ending in b):The output obtained is:-Please tell me the necessary but minimal modifications required in the above codes for it to execute successfully and produce the desired output. 
This code is valid in Python 2, not in Python 3.  I suspect the code is actually designed for Python 2 when you are using Python 3.   in Python 2 not only reads in a string from the input, but it also performs an  statement which means that it will take the string and convert it into Python syntax.   in Python 3 returns a string of what you put in.  The  is not performed anymore as you see in Python 2.  To mimic what you see in Python 2, you need to run  on top of :EditWith your new code that you're running, the culprit is the division operation in the loop: .  This returns a floating-point number by default whereas in Python 2, if  and  are both integers, it will return an integer.  You have to be careful running Python 2 code in a Python 3 environment.  Simply wrap  in an  call: .My final note to you is to be exceptionally careful running Python 2 code in a Python 3 environment.  If possible, run the code in the environment it's designed for.  If not, this useful comparison guide of idioms from Python 2 to Python 3 should help: http://python-future.org/compatible_idioms.html.  In particular:: http://python-future.org/compatible_idioms.html#input... and finally the division operator: http://python-future.org/compatible_idioms.html#division


Answer URL
https://docs.python.org/3/library/functions.html#input
