Natural Text
While I was learning LEGB scope rule of python, I wanted a deeper understanding of how global works in python. It seems that even if I refer to an undefined variable(Which is also not in builtins), The code doesn't give me an error. Please help me figure out what actually is happening.
The keyword  is used to create or update a global variable locally will give you a dictionary of all objects the global scope containsyou can see in the second dictionary  is present, which was not present in the first dictionary 
Yes, the  statement can apply to a name that is not bound (an undefined variable) or even never used. It doesn't create the name, but informs the compiler that this name should be looked up only in a global scope, not in the local scope. The difference shows up in the compiled code as distinct operations:We see that  was used for a local variable, while  was used for the global variable. There isn't any output for the  statement itself; it only changed how references to  operate. 
Simple example  of global variabl in two functions    def hey():        global x        x = 1        print x    hey() # prints 1    def hey2():        global x        x += 2        print x    hey2() #prints 3


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
