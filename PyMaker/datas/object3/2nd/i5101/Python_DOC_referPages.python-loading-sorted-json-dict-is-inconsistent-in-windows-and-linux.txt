Natural Text
I am using Python 3.6 to process the data I receive in a text file containing a Dict having sorted keys. An example of such file can be:{"0.1":"A","0.2":"B","0.3":"C","0.4":"D","0.5":"E","0.6":"F","0.7":"G","0.8":"H","0.9":"I","1.0":"J"}My data load and transform is simple - I load the file, and then transform the dict into a list of tuples. Simplified it looks like this:The list is always sorted in Windows and never in Linux. I know that I can sort the list manually, but since the data file is always sorted already and rather big, I'm looking for a different approach. Is there a way to somehow force json package to load the data to my dict sorted in both Windows and Linux?For the clarification: I have no control over the structure of data I receive. My goal is to find the most efficient method to load the data into the list of tuples for further processing from what I get.
A dictionary is just a mapping between its keys and corresponding values. It doesn't have any order. It doesn't make sense to say you always find them sorted. In addition, any dictionary member access is  so it's probably fast enough for your need. In case you think you still need some order, ordered dictionary may be useful. 
Dicts are unordered objects in Python, so the problem you're running into is actually by design.If you want to get a sorted list of tuples, you can do something like:orThe dict method  converts the dict to a list of tuples and  sorts that list. The  parameter to sorted explains how to sort the list. Both  and  select the first element of the tuple (the key from the original dict), and sort on that element.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/collections.html#collections.OrderedDict
