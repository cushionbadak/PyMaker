Natural Text
so I have a huge amount of data to process, to do it I'm using everything I can get, my parents computers, my girlfriend computer, my computers, my brothers computers.They are ok with lending me some of their processing power, and the processing programs only uses 1 of the 4 cores of their computer.I'll set up something that will launch the slaves at their computer startupI coded this "distributed computing program" by myself, I just learned about sockets with google and I want to make sure that I'm not making a big mistakeFrom what I understand a socket is one way only, A can only send data to B, if B needs to send data to A then an other socket on an other port need to be opened. from this point a slave can receive data to process from a connection on 'data_reception_port'and it can ask for new data to crunch from a connection on 'data_request_port'The only problem I can see here is if 2 slaves try to connect at the same time, but that is easilyfixed using a while loop on each slave with a 5 second sleep for reattempting a connection.What do you think?Thanks.ps : yes the slaves do not send back the result, I will get them manually, or implement that later.pps : will be uploaded to my github later, the code is a mess right now, I am testing various things.
From what I understand a socket is one way only, A can only send data  to B, if B needs to send data to A then an other socket on an other  port need to be opened.As already mentioned by several people in the comments, a TCP socket is bi-directional, and you can use the same for two way communication. The application has to be coded in such a way that both side understand each other.from this point a slave can receive data to process from a connection  on 'data_reception_port' and it can ask for new data to crunch from a  connection on 'data_request_port'Once you change your application model to the way as explained above, you'd no longer require to communicate using two separate ports/connections each side.The only problem I can see here is if 2 slaves try to connect at the  same time, but that is easily fixed using a while loop on each slave  with a 5 second sleep for reattempting a connection.Please read about the backlog in Socket communications. If the count of incoming requests are more than which can be served at the moment, the requests would be  queued (the exact number of requests waiting in the queue depends on the backlog parameter). Check documentation of  function for more information.I hope this answers your questions. Please feel free to query further in case of any confusion.


Answer URL
https://docs.python.org/3/library/socket.html#socket.socket.listen
