Natural Text
My thought was to get rid of how users are constantly using  to reset the text file reading. So instead I've tried to create a  that's an  and then using  to replace  and then it continues from where it last yielded by retaining a  object. The usage would be something like:My question is does this already exist in Python-verse somewhere? Esp. if there's already a native object that does something like this, I would like to avoid reinventing the wheel =)If it doesn't exist? Does the object look a little unpythonic? Since it says it's an iterator but the true Iterator is actually the  and the other functions are wrapping around it to do "resets". 
I think it depends on what is your real situation. Let's say if you just want to get rid of , it can be simple:You can even use it like a normal context manager:output:
I have a couple of criticisms of your  class. I was going to post an alternative that's a context manager but Sraw beat me to it. ;)You shouldn't use names that start and end with double underscores like . Such names are essentially reserved for the language implementors, and if an official  magic method is added to the language your code will break. If you want a private method, you could name it . There is a little problem with that  method: its  block is only exited when the file has been completely read for the current , so if the  instance gets reset then you have an old open file sitting around, consuming a file descriptor. Sure, it'll get closed eventually, when the program exits (or you delete the  instance), but it's messy IMHO.Also, I'm not totally happy with the . Sure, it's convenient most of the time when you're reading a text file, but in some cases the caller may want to look at any leading or trailing white space, and you've taken that option away from them.BTW, that  method is redundant: your class still does what its supposed to do if you eliminate that method.


Answer URL
https://docs.python.org/3/reference/datamodel.html#context-managers
