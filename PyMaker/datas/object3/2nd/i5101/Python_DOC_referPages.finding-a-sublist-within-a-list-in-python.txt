Natural Text
I thought this would be fairly easy to find but no luck.   Basically if I have two lists, I want to test that one list is the subset of another: should be  because  is a subset of .  My solution is way too complex.  My question is - is there a simple function to do this with lists?  More importantly, to test for subsets, is list even the right way to go or is there a better data structure I should study to solve this.  Trying to implement my own version of an apriori algorithm. Many thanks in advance.  
Convert  to a  and use the  method:
You want a multiset.   is the standard library multiset, but it lacks the subset operator , so if you want to stick to standard library you will have to write the loop yourself rather than use set operations.
Using list suggests not only that you are interested in the presence of the members but also their order. If order isn't important you should go for a set instead.On the other hand you have to consider that you cannot have copies of the same member in a set which you can have in lists. Perhaps your after a third kind of data structure.The biggest uncertainties for me with the question comes down to if the 'is subset' question takes order into account and possibly how duplicate entries are to be handled.Could you please elaborate? 
You can use the  function that returns  if all elements in the iterable passed into it are . So in our case, we can use a  which yields boolean values for whether each value in  is in :
The following solution assumes your input lists contain unique elements.It won't work, for example, with  and .If you want to check if it is a proper subset, in other words the two lists cannot be identical, you can use this:


Answer URL
https://docs.python.org/3/library/functions.html#all
