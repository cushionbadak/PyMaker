Natural Text
I have a list of names assigned to ranks, often with ranks duplicated. I want to generate all permutations of the list with keeping the ranks in sorted order. For example:would generateEssentially, for every distinct group of ranks, there are n! combinations. In this case it would be 2! * 2!. I'm having trouble finding an efficient way to do permutations for a list with 34 names across 8 ranks. I'm running out of memory trying to find 2! * 2! * 4! * 2! * 2! *8! * 4! * 10! different lists.Is there any efficient way to generate this list? How much memory would python need?
Here is an  solution using ,  and . As it mostly uses generators it should be not too heavy on memory. If you don't need the result as a list, but for example just want to iterate over it memory requirements should in fact be rather modest.If you need the list, you'll need the memory for the list but not much more.But I'm afraid with your numbers the final list alone will just be too large to fit in memory. And the loop will take forever.


Answer URL
https://docs.python.org/3/library/itertools.html
