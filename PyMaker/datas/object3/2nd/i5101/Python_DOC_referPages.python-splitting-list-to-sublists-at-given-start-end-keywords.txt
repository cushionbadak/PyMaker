Natural Text
If I were to have a list, say I'd like to split it into a sublist with  and  as start and end keywords, so that I would getThe way I am currently doing this is as follows.This looks a bit messy, but it works very well for nested start/end keywords, so sublists can be formed inside of sublists, but it does not work for multiple start/end keywords not being inside eachother. Being nested is not important yet, so any help would be appreciated.
One creative way would be to dump your list to a JSON string, add  and  where needed, and parse your JSON string back to a Python nested list:The advantage is that it's easy to follow, it works fine for arbitrary nested lists and it detects if the structure isn't correct. You need to make sure your words don't contain , though.
One way using slicing:
multiple start,ends (based on Mark Tolonen's answer)Returns:
Using slicing, without support for nested lists:
To get your code to achieve the desired results, you need to make the following changes:Slice indices must be integers. Your findLoop function fails on the second line if your test list has an odd length. Coerce the type of the slice indices to int to round down (as is required here) is case sensitive.In getLoops, you only need to search for the first element in your pair, as findLoops sublists from a pair of words on each call.Try it online!However, as you've noticed, your code is quite messy, and the other answers show how you can use  to better effect.If you'd like to further this to find nested sublists, that will require some more clarification on how you'd like this to behave. Consider the following problems:sublisting , then Should sublisting occur only on the initial list, or inside sublists too?sublisting , then How should matches on different levels of the list behave?


Answer URL
https://docs.python.org/3/library/json.html
