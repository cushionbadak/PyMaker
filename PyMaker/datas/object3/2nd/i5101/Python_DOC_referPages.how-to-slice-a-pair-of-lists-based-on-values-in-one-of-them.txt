Natural Text
I have two lists of equal length, one containing  and the other . For example:How can I extract sub-lists of both lists in parallel based on a particular label in the  list? For example, using  as a selection criteria, I want to generate:My best guess sounds cumbersome - make a list of element-wise tuples, extract a list of relevant tuples from that list, then de-tuple that list of tuples back into two lists of single elements. Even if that's the way to approach it, I'm too new to Python to stumble on the syntax for that. 
Using  and a generator expression this can be done like:Code:How does this work?The  line builds a generator expression which zips the two lists together and drops any thing that is uninteresting.  The second line uses zip again and then s the resulting tuples into s as desired.This has the advantage of building no intermediate data structures so should be fairly fast and memory efficient.Test Code:Results:
This might be a good place to apply , which is slightly faster than , at least for the size of data structures you're working with.Usage:Timing: is a generator of  and .   filters down  element-wise to cases where  occurs.From the docstring:Roughly equivalent to:
You can  the lists together, filter them based on the keyword you are looking for and then Then your  and  would be:Another alternative is to use  function to get the desired format:
The simplest approach is totally fine here, and likely very performant:Some more timings, didn't have time to include every approach so far, but here's a few:I would say, relying on  is doing just fine. I was worried that having to do  would slow it down, but it is an expression that could be highly optimized in Python (size of the list known ahead of time, and simply repeating the same pointer). Finally, note, the simple, naive approach I gave can be optimized by "caching" the  method:
As an alternative to the  answer, you might consider using a different data structure.  I would put that in a Then to access, just  will give  You can load the data you have into such a by doing this one time onlyThen just do this for each query


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.compress
https://docs.python.org/3/library/functions.html#map
