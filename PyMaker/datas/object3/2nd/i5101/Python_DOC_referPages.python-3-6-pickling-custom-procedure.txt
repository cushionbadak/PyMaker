Natural Text
I have some objects of class  which has its own method to be pickled, call it  which takes an instance of  and returns a serialization string.I also have list of objects each of class  that contains .I need to pickle the list, but pickling  gives some error difficult to solve. However,  has its own method to be pickled.I can implement the  method in class  so that it calls . But how can I do this so that  is able to serialize  efficiently?Object  is a  and object  is a custom object. The custom serialization function is  and the unpickle function should be 
You can use the  module to register custom functions for pickling and unpickling; the function you register acts like a  method on the class.If you return a tuple of , then the registered  callable will be called to unpickle it again, with state as the argument, so you can use your  function there:(the  argument to  is ignored in recent Python versions)This registers a global handler for those objects. You can also use a dispatch table per pickler, see [*Dispatch Tables on how you'd register one.Now, when pickling, when encountering any instances of  the  function is used to produce a serialisation, and the  function will be used to unpickle that data again.However, the  functions use pickle themselves. They effectively pack and clean up the stream, and then pickle the resulting  instance. This will then call the custom handler, and you have an infinite loop.The work-around is to use a custom dispatch table to handle pickling and unpickling. Avoid using  in this case, as it sets a global hook that'll be called recursively each time a  object is being pickled.Your own pickle infrastructure needs to use a custom pickler:Here the custom function is only called when a  instance is found in your own data structure. The  routines use the global  and  functions and won't use the same hook.


Answer URL
https://docs.python.org/3/library/copyreg.html
https://docs.python.org/3/library/pickle.html#object.__reduce__
https://docs.python.org/3/library/pickle.html#dispatch-tables
https://docs.python.org/3/library/pickle.html#pickling-class-instances
