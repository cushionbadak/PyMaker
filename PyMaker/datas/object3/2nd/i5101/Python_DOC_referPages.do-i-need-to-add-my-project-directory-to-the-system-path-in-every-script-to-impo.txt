Natural Text
I'm trying to keep a data science project well-organized so I've created a directory inside my  directory called  that contains a file called , which contains some helper functions that will be used in many scripts. What is the best practice for how I should import  from  into a file in a totally different directory, such as ?I see answers to this question, and I've implemented a solution that works, but this feels ugly:Am I doing this right? Do I need to add this to every script that wants to import , like ?My current project folder structure:Example files:
The correct way to do it is to use ,  and the  Python package:This link has all the steps.
First of all, let me describe you the differences between a Python module & a Python package so that both of us are on the same page. ‚úå A module is a single .py file (or files) that are imported under one import and used. ‚úîWhereas, a package is a collection of modules in directories that give a package hierarchy. A package contains a distinct  file. ‚úîTherefore, when we have a project directory named proj-dir of the following structure  ‚§µüîé Notice that I've also added an empty  into the proj-dir itself which makes it a package too.  üëç Now, if you want to import any python object from module2 of package2 into module1 of package1, then the import statement in the file module1.py would beI hope this simple explanation clarifies your doubts on Python imports' mechanism and solves the problem. If not then do comment here. üòä
On Linux, you can just add the path to the parent folder of your  directory to . See Using .pth files. You can then import modules in  from anywhere on your system.NB1: Replace  by any version of Python you want to use.NB2: If you use Python2.7 (don't know for other versions), you will need to create  (empty) files in  and .NB3: Any name file is ok for .
First of all let me clarify you that importing an entire module, if you are going to use a part of it, then is not a good idea. Instead of that you can use  to import specific function under a library/package. By doing this, you make your program efficient in terms of memory and performance. To know more refer these:'import module' or 'from module import'difference between import and fromNet let us look into the solution.Before starting off with the solution, let me clarify you the use of  file. It just tells the python interpreter that the *.py files present there are importable which means they are modules and are/maybe a part of a package. So, If you have N no of sub directories you have to put  file in all those sub directories such that they can also be imported. Inside  file you can also add some additional information like which path should be included, default functions,variables,scope,..etc. To know about these just google about  file or take some python library and go through the same  file to know about it. (Here lies the solution) More Info:modulesBe pythonicSo as stated by @Sushant Chaudhary your project structure should be likeSo now, If I put  file under my directory like above, Will  it be importable and work fine? yes and no.Yes :If you are importing the modules within that project/package directory. for example in your case you are importing package1.module1 in pakage2.module2 as .Here you have to import the base dir inside the sub modules, Why? the project will run fine if you are running the module from the same place. i.e: inside package2 as python module2.py, But will throw  If you run the module from some other directory. i.e: any other path except under package2 for example under proj-dir as . This is what happening in your case. You are running the module from project-dir. So How to fix this?1- You have to append basedir path to system path in module2.py as So that module2 will be able to find package1 (and module1 inside it).2- You have to add all the sub module paths in  file under proj-dir.For example:This is the  file of lxml (a python library for parsing html,xml data). You can refer any  file under any python libraries having sub modules.ex (os,sys). Here I've mentioned lxml because I thought it will be easy for you to understand. You can even check  file under other libraries/packages. Each will have it's own way of defining the path for submodules.NoIf you are trying to import modules outside the directory. Then you have to export the module path such that other modules can find them into environment variables. This can be done directly by appending absolute path of the base dir to PYTHONPATH or to PATH. To know more:PATH variables in OSPYTHONPATH variableSo to solve your problem, include the paths to all the sub modules in  file under proj-dir and add the /absolute/path/to/proj-dir either to  or .Hope the answer explains you about usage of  and solves your problem.
Yes, you can only import code from installed packages or from files in you working directory or subdirectories.
the way I see it, your problem would be solved if you would have your module or package installed, like an yother package one installs and then imports (numpy, xml, json etc.)I also have a package I constantly use in all my projects, ulitilies, and I know it's a pain with the importing.here is a description on how to How to package a python application to make it pip-installable:https://marthall.github.io/blog/how-to-package-a-python-app/
Navigate to your python installation folderNavigate to libNavigate to site-packagesMake a new file called Type  inside that file with your favorite text editorNote: the ellipsis before  will look something like:  <- YOU DO NEED THIS!This is a cheap way out but it keeps code clean, and is the least complicated. The downside is, for every folder your modules are in, example.pth will need them. Upside: works with Windows all the way up to Windows 10


Answer URL
https://docs.python.org/3/tutorial/modules.html#modules
https://docs.python.org/3/using/cmdline.html#environment-variables
