Natural Text
My two list of lists are:What is the most efficient way of sorting  based on the second value in the sublist of  ()?Preferred output:It doesn't matter if there are duplicates of the same name (Coco in this case). Also, the lists will always contain the same names like here.
Edit: I think I have an  solution!Originally, I thought we could create a  of the names and the indexes they should appear in the final list based on . Then we could create the final list by sorting  - giving an  solution.However, the problem with that method is that there are duplicate names in ! Also, this new method even has a better time complexity!First we create a dictionary based on  where each  is a name and each value is a   (thanks RoadRunner) of the numbers which correspond to that name.By using a , we maintain the ordering of those elements in  with the same names. Also, we have the ability to call  on a  in  time.This then allows us to iterate over  (removing the need for any sorting as it is already in order) and append to a new list the name followed by the first entry of values in the dictionary we created.If we use  to get the first element, we also remove it meaning that when that name next comes up in , we get the next value in .So, here's the code:giving  (for result) as:
If both your lists have the same amount of names, you could store the indices of each element in a , then pop off each index and use it as the sort key when an item is found during sorting. Demo:Output:Note: You can use  to pop off elements from the beginning in constant time, as shown above. This minor improvement allows the above solution to remain at overall O(NlogN), which is the cost of sorting. 
Very not pythonish but still easy to understand and working:Output:
Given two lists:the following line sorts the list  by the order of items in :Result:
Try this:Explanation: We're sorting with the key being the 3rd value (i[2]) from lst_2 only if the 2nd value matches the argument (i[1] == x[1]).Note that if a value that exist in lst_1 is missing from lst_2 an error will result (perhaps justifiably, since a key is missing).


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
