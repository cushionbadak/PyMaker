Natural Text
I searched all over and could not come up with a reasonable search query to produce helpful results. I'll try to explain this with a simple example (that is tested).Suppose I have some small custom Python library that contains just the following private class and public instance of it:Now, I also have two other python files ('file_a' and 'file_b') that will end up importing this instance from my library as seen below.The full code in 'file_a':The full code in 'file_b':The resulting output, if I only execute 'file_a' within a directory that also contains 'file_b' and 'my_lib', is this:Can someone explain to me how 'file_b' is able to access the same exact instance as 'file_a' in my example? Does this have to do with how the value being set in 'file_a' is global?By the way, I do know I can just make 'MyClass' public again and instantiate it whenever a unique instance is needed in either 'file_a' or 'file_b', but the main reason I am posting this question is to wrap my head around this specific concept.
There are two things you need to understand here:1. Module cachingPython caches module imports to improve performance, this happens even when you do . The module object gets stored in .Hence, in your case both  and  are accessing same module object  and same instance .2. ReferencesIn Python variable assignment is basically adding a new reference to the same object, this is true for imports as well. is basicallyNow as we modify this instance in , we have basically modified the instance in , and  will also see this change.You can modify  and  to verify this.::Output(check the object IDs):
If you  in each file and then , you'll see that the only a single module object is created. Reading The  system from the python docs may help you understand what's going on here. Of particular relevance is the section on The module cache. In part:The first place checked during  search is . This  mapping serves as a cache of all modules that have been previously  imported, including the intermediate paths. So if  was  previously imported,  will contain entries for ,  , and . Each key will have as its value the  corresponding module object.During import, the module name is looked up in  and if  present, the associated value is the module satisfying the import, and  the process completes.


Answer URL
https://docs.python.org/3/reference/import.html
https://docs.python.org/3/reference/import.html#the-module-cache
