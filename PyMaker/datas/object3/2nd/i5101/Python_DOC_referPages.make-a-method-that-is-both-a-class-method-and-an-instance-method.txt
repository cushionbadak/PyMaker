Natural Text
Is there a way in Python to define a method that is both a class method and an instance method, such that both  and  are receivers. In particular, I am looking to make a method that (1) knows which class it was called on when called on the class () and (2) knows which instance it was called on when called on an instance ().For example, I would envision something working like this:Note that I am aware that undecorated methods can be called like , but this is not what I want because it doesn't get the  variable. And without the  variable, the method has no idea which class it was just called on. It may have been called as , and there would be now way to know that if  was an instance of . An undecorated method is more like both a static method and an instance method, not both a class method and an instance method.
This can be solved by implementing  as a custom descriptor.In a nutshell, the descriptor must define a  method that will be called when it's accessed as an attribute (like  or ). This method will be passed the instance and the class as arguments and returns a bound method (i.e. it returns a method with the  and  arguments baked in). When this bound method is called, it forwards the baked-in  and  parameters to the actual method.Results:
You don't need a decorator for this. This is how methods already work; the instance is passed as first argument – implicitly when method is called from instance and explicitly from the class – with the instance available, you can retrieve the class by calling  on the instance:On another note, in the  (or ) special methods, you should return a string, not print.I have used  since  is not called for printing the instance when inside a container object (tuple here).Update:Considering the issues with class/instance printing in the above approach, you can use a descriptor instead to properly manage correct class and instance selection within the method:


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#object.__get__
