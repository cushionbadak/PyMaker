Natural Text
Is it possible to force a rename os.rename to overwrite another file if it already exists?  For example in the code below if the file Tests.csv already exists it would be replaced by the Tests.txt file (that was also renamed to Tests.csv).
You could try :Or  and then :
Since Python 3.3, there is now a standard cross-platform solution, :Rename the  file or directory src to dst. If dst is a directory,  will be  raised. If dst exists and is a file, it will be replaced silently if  the user has permission. The operation may fail if src and dst are on  different filesystems. If successful, the renaming will be an atomic  operation (this is a POSIX requirement).Availability: Unix, Windows.New in version 3.3.However, contrary to the documentation, on Windows it's not guaranteed to be atomic (in Python 3.4.4). That's because internally it uses  on Windows, which doesn't make such a guarantee.
As the documentation says it's impossible to guarantee an atomic renaming operation on Windows if the file exists so what Python does is asking to do the double step  +  yourself, handling potential errors.On unix systems  overwrites the destination if exists (because the operation is guaranteed to be atomic).Note that on windows it's also possible that deleting the destination file will fail even if you have permission because the file may be in use. This is another essential limitation of the windows file system and you have to handle it yourself in the code.
On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file.  http://docs.python.org/library/os.html#os.rename
Funny enough, the documentation for  says it does replace the target on Unix systems, but on Windows it does not.  They mention something vague about it being impossible to implement atomic renaming if the destination exists on Windows, which IMO is hardly enough reason not to support it.You should catch OSError (destination exists on Windows) and remove the destination and try again, I suppose.
From the Standard Library documentation, “On Windows, if dst already exists, OSError will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file.”http://docs.python.org/library/os.html#os.renameSo the only solution, unfortunately, would be to change operating systems; Windows simply disallows a  atop an existing file.


Answer URL
https://docs.python.org/3/library/os.html#os.replace
