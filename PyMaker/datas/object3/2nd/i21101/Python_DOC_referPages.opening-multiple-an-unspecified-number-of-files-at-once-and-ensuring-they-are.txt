Natural Text
I am aware that I can open multiple files with something like,But I have a situation where I have a list of files to open and am wondering what the preferred method is of doing the same when the number of files is unknown in advance. Something like,(but this fails with an  since list doesn't implement )I don't mind using something like,But am not sure what will happen if some files throw when trying to open them. Will  be properly defined, with the files that did manage to open, in the  block?
No, your code wouldn't initialise  unless all  calls completed successfully. This should work though:Note also that f.close() could fail so you may want to catch and ignore (or otherwise handle) any failures there.
Sure, why not,  Here's a recipe that should do it.  Create a context manager 'pool' that can enter an arbitrary number of contexts (by calling it's  method) and they will be cleaned up at the end of the end of the suite.For example:Caveats: context managers aren't supposed to raise exceptions in their  methods, but if they do, this recipe doesn't do the cleanup for all the context managers.  Similarly, even if every context manager indicates that an exception should be ignored (by returning  from their exit methods), this will still allow the exception to be raised.  
Errors can occur when attempting to open a file, when attempting to read from a file, and (very rarely) when attempting to close a file.So a basic error handling structure might look like:This ensures that  will always be called if the  variable exists. If  doesn't exist, then  must have failed, and so there is no file to close (in which case, the except block will be executed immediately).Do you really need to have the files open in parallel, or can they be processed sequentially? If the latter, then something like the above file-processing code should be put in a function, which is then called for each path in the list.
Thanks for all your answers. Taking inspiration from all of you, I have come up with the following. I think (hope) it works as I intended. I wasn't sure whether to post it as an answer or an addition to the question, but thought an answer was more appropriate as then if it fails to do what I'd asked it can be commented on appropriately.It can be used for example like this ..or like this ..And here it is,
The class  from the  module provides the functionality you are looking for.The canonical use-case that is mentioned in the documentation is managing a dynamic number of files.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/contextlib.html#module-contextlib
