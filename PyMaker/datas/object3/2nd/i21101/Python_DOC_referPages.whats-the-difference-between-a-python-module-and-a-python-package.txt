Natural Text
What's the difference between a Python module and a Python package?See also: What's the difference between "package" and "module" (for other languages)
A module is a single file (or files) that are imported under one import and used. e.g.A package is a collection of modules in directories that give a package hierarchy.Documentation for modulesIntroduction to packages
Any Python file is a module, its name being the file's base name without the  extension. A package is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional  file, to distinguish a package from a directory that just happens to contain a bunch of Python scripts. Packages can be nested to any depth, provided that the corresponding directories contain their own  file.The distinction between module and package seems to hold just at the file system level. When you import a module or a package, the corresponding object created by Python is always of type . Note, however, when you import a package, only variables/functions/classes in the  file of that package are directly visible, not sub-packages or modules. As an example, consider the  package in the Python standard library: its  directory contains an  file and four sub-directories; the sub-directory  contains an  file and, among others, an  file. See what happens when you try to interactively import package/modules:In Python there also are built-in modules, such as , that are written in C, but I don't think you meant to consider those in your question.
From the Python glossary: Itâ€™s important to keep in mind that all packages are modules, but not all modules are packages. Or put another way, packages are just a special kind of module. Specifically, any module that contains a  attribute is considered a package. Python files with a dash in the name, like , cannot be imported with a simple  statement. Code-wise,  is the same as  which will raise an exception. Such files are better characterized as scripts whereas importable files are modules. 
First, keep in mind that, in its precise definition, a module is an object in the memory of a Python interpreter, often created by reading one or more files from disk. While we may informally call a disk file such as  a "module," it doesn't actually become one until it's combined with information from several other sources (such as ) to create the module object. (Note, for example, that two modules with different names can be loaded from the same file, depending on  and other settings.)A package is a module that may have submodules (including subpackages). Not all modules can do this. As an example, create a small module hierarchy:Ensure that there are no other files under . Start a Python 3.4 or later interpreter (e.g., with ) and examine the results of the following statements:Modules  and  are packages (in fact, a certain kind of package called a "namespace package," though we wont' worry about that here). However, module  is not a package. We can demonstrate this by adding another file,  to the directory structure above and starting a fresh interpreter:Python ensures that all parent modules are loaded before a child module is loaded. Above it finds that  is a directory, and so creates a namespace package , and that  is a Python source file which it loads and uses to create a (non-package) module . At this point you cannot have a module  because  is not a package, and thus cannot have submodules.You can also see here that the package module  has a  attribute (packages must have this) but the non-package module  does not.
A late answer, yet another definition:A package is represented by an imported top-entity which could either  be a self-contained module, or the  special module as the  top-entity from a set of modules within a sub directory structure.So physically a package is a distribution unit, which provides one or more modules.
So you remember back on your text books where on the content page the chapters were divided in modules.So there lies the concept different chapters which have the same objective or the part of same theory then these parts are clustered together and know as module.Similarly, in programming, when different functions are clustered together they are seperated and named as module.


Answer URL
https://docs.python.org/3/glossary.html#term-package
https://docs.python.org/3/reference/import.html#namespace-packages
https://docs.python.org/3/reference/import.html#packages
