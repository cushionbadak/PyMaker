Natural Text
Memory mapped file is an efficient way for using regex or doing manipulation on large binary files.In case I have a large text file (~1GB), is it possible to work with an encoding-aware mapped file?Regex like  won't work on  objects and converting the pattern to unicode will not work either (as   for example will not understand the range correctly).Searching might work if I convert the search pattern from  to  using  but it's still somewhat limited and there should be a simpler way instead of decoding and encoding all day.I have tried wrapping it with  inside an  but to no avail:Creating a wrapper (using inheritance) and setting the methods ,  and  to return  did not work either.Regarding encoding, a fixed length encoding like , code-points or the lower BMP of  (if it's even possible referring just to that part) might be assumed.Solution is welcome for any python version.
You can't do this without essentially reinventing the wheel from scratch (writing all new versions of the  module, the  module, etc.), or writing extraordinarily complex regexes that can't use the niceties of stuff like true Unicode character ranges (you'd have an alternation between three different patterns to make , something like ).Basically,  patterns only work with , or work with -like objects (and you can't try to work around it with s and casts, because  still treats it as bytes, not larger types).For simple searches, you could try using  after encoding the string to use for searching, but that's still prone to subtle bugs; for UCS-2 or UTF-32, you'd need to check that the return value from  was aligned on a two or four byte boundary respectively to ensure you didn't mistake the end of one character and the beginning of the next for a completely different character. If the alignment test failed, you'd have to repeat the search with a  offset of the last return value + 1 until you either got a hit or  returned . It's just not a reasonable thing to do in the general case.


Answer URL
https://docs.python.org/3/library/mmap.html#module-mmap
https://docs.python.org/3/library/mmap.html
