Natural Text
Which test is faster : equality or inequality ?For example, in a big  loop, should the condition be  rather than  ?
When asking yourself a question about speed differences between different operators, use the  module to measure. They are equally fast:That's the comparisons repeated 10 million times, and if you re-run the above tests you'll find the timings can vary somewhat and none are clear winners.You should be focusing on readability here, not speed. A simple integer comparison is going to be an infinitesimal part of your overall execution speed, even in a loop.
If we’re talking about  being an , then on my machine at this very moment, an equality check is very slightly faster than a greater-than check. You can quickly check that yourself using the  module:However, those numbers are super close to another. So you should only take one thing out of this answer: It does not matter.These kind of things are micro optimizations. And micro optimizations very rarely have any impact on the real performance of an application. It is a lot more likely that there are thousand other parts in your application that have more impact on the performance to make this difference negligible. You should only care about such things if you actually profiled your application and confirmed that this part of your code is a bottleneck that is taking down the performance of your application. But for this particular code, I doubt that will ever be the case.So please, don’t bother about these minor difference but just use whatever makes more sense: Considering that these two checks have a different semantic meaning (a number being unequal to zero, or a number being larger than zero), choose the one that you actually meant to check for.
For me,  doesn't show any consistently noticeable difference (assuming you're working with integers)...As stated in the comments on this question, rather than focusing on what operator is the fastest, you should focus on the one that makes the most sense.  If you really mean "do this while  is greater than " than use .  The amount of time spent doing this comparison is going to be a very minor contributor to your overall runtime, so it probably isn't worth worrying which operator is faster...
Is it the bottleneck of your program? Only if the answer is yes, you should be worried about it. Moreover, there is not something that says this will be sure faster in any OS, or with any type.For fun, I timed the while loop:and: gives:0.12652015686 gives:0.111998081207For timing, check this: How can I time a code segment for testing performance with Pythons timeit?But, use timeit, as Martijn Pieters suggested (Get time of execution of a block of code in Python 2.7), like this:which gave for :0.10852098465and for :0.108459949493See the difference in the two timing approaches!
I think this somewhat leaden test program shows in the case of character and integer compares there is basically no difference


Answer URL
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/profile.html
