Natural Text
 is returning different size for a unicode string on different versions of python. return  on  and returns  on  
 is giving you implementation details by definition, and none of those details are guaranteed to remain stable between versions or even builds.It's unlikely that anything significant changed between 2.7.3 and 2.7.11 though; YOU's comment on character width likely explains the discrepancy; including the internally stored NUL terminator, there are 12 characters in , and UCS4 encoding would require 24 more bytes to store them than UCS2 encoding (but in exchange, it could handle non-BMP characters).Other things that could change size (in other circumstances) would be 32 vs. 64 bit builds (all pointers and s double in size on 64 bit builds, as do s on non-Windows machines), Python 2 vs. Python 3 (Python 3 removed a single pointer width field from the common object header), and for , Python 3.2 (which uses build option specified fixed width UCS2 or UCS4 , same as Py2 ) vs. Python 3.3+ (which uses one of three different fixed widths depending on the largest ordinal in the , so an ASCII/latin-1  uses one byte per character, a BMP  uses two, and a non-BMP  uses four, but can also cache alternate representations, so the same  can grow or shrink in "real" size based on usage).
sys.getsizeof  Can differ on different computers. However I think this can solve your issues. Take the size of a string for example and subtract the size of an empty string.


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-393-flexible-string-representation
