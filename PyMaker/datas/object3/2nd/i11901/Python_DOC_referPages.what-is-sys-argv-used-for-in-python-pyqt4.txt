Natural Text
I'm still a beginner when it comes to programming, and I'm especially new when it comes GUI programming. I'm using python with PyQt4 and im following a tutorial guide. The following code block is relatively easy to follow:I can follow whats going on here quite well, but could someone explain to me what the sys.argv is actually doing? I don't want to just blindly put this in every time in the hope that it will make my code work!
The  (argument count = number of arguments) and  (an array, or list of argument values, depending on the language) is what the operating system gives to the program as parameters. In other worlds: "how it was called".As clearly stated by cptPH's answer, this is not specific to  or . Have a look here:https://en.wikipedia.org/wiki/Entry_pointFor C and C++:https://en.wikipedia.org/wiki/Entry_point#C_and_C.2B.2BFor Python:https://en.wikipedia.org/wiki/Entry_point#PythonEven shell scripting have these, called "Positional parameters":http://www.tldp.org/LDP/abs/html/othertypesv.htmlEven if your program takes no command line options at all, whatever the language or OS (unless very, very exotic ones), you will always have to a bare minimum:a  of 1, because, number 0 will be the name under which your program is called(this may vary, for example if you call it via a symlink, orsimply because you changed the target binary of the build process,and your program "foo" is now "bar" - ex use: don't use hardcoded program name when printing output, rather use  number 0).Sooner or later, you'll be writing programs which use options/parameters. So you'll use these. Example: you may want to add a "--verbose" or "--debug" option. Or a "--input-file" if it's about file processing. Whatever. Your program will parse these argv at startup, and through your wise coding, will change its runtime behavior accordingly.Example: even the Python can takes quite of lot of optional options, and processes them using /. From Python 3 man page:...these are all possible  for the Python interpreter.EDIT:Real life example for a Qt application:I take part in the developed a Qt networking application. It can run under 2 mutually exclusive modes:"normal" mode,or "spy mode": this is special because it will required networkadministrator privileges for some low-level operations.So I added a CLI  CLI options to it. These is an optional .At the beginning of the application code, I check for this   CLI optionsIf run in "normal" mode without this option, the GUI elements relatedto "spy" mode are simply not even displayed to the user, nor any ofits class instanciated. That is clean, because otherwise it wouldfail miserably anyway in many object instanciation/methods, witherrors all over the place, since the low-level calls would failanyway, and then I'd exit with a non-zero return code. That is notgood. If you might fail, fail ASAP.If launched in "spy" mode using this  options, the first thingsI do in my code is check that the calling user do actually have such"network administrator" privileges, and then 1/ if he does not, issuean explicit error message/popup window explaining the "you shouldhave blablabla privilege, blablabal try sudo blablabla", and thenexit with a non-zero return code, or 2/ if the user does indeed havethe required privilege, offer the special "spy mode" GUI elements andput them to use, no problem (and hide most of the GUI "normal mode"elements, meaningless in this mode of operation).This is what  are good for.
You don't need to use sys.argv in a PyQt application.It's only really useful if you want to use command-line arguments. If you don't, you can just pass in an empty list:When you do use , the first argument is automatically set to the script name, and Qt will use this to set the applicationName(). The list of arguments can be accessed later via the arguments() method:Output:But note that some pre-defined arguments are handled internally by Qt, and will be automatically removed from the arguments:
 is not PyQt4 specific. It contains all the command line arguments that were used to start the program in the form of a list.For example when you start ./test.py arg1 arg2  would contain:And with this you could count the number of arguments, this will include the name of the program itself as shown above:
 contains all the command-line arguments that were passed to the program when it was launched. The constructor of  needs these launch options in some circumstances, such as debugging. 
QApplication can optionally accept additional command line arguments, say you have a PyQT or PySide program with CheckBox and Slider, and you run it with the following command:you'll find the style is different, that mean sys.argv has its practical use in some cases. see more argument options from official website


Answer URL
