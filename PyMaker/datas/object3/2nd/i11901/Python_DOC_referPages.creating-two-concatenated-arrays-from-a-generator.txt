Natural Text
Consider the following example in Python 2.7. We have an arbitrary function  that returns two 1-dimensional numpy arrays. Note that in general  may returns arrays of different size and that the size may depend on the input. Now we would like to call  on  and concatenate the results into two separate new arrays. This gives the intended result. However, since result may take up much memory, it may be preferable to use a generator by calling  instead of .    However, this gives an error because the generator is empty at the point where we calculate . Is there a way to use the generator only once and still create these two concatenated arrays? I'm looking for a solution without a for loop, since it is rather inefficient to repeatedly concatenate/append arrays. Thanks in advance.
Is there a way to use the generator only once and still create these two concatenated arrays?Yes, a generator can be cloned with :However, using  does not help with the memory usage in your case. The above solution would require 5 N memory to run: N for caching the generator inside ,2 N for the list comprehensions inside  calls,2 N for the concatenated arrays. Clearly, we could do better by dropping the :This shaved off one more N, leaving 4 N. Going further means dropping the intermediate lists and preallocating  and . Note, that you needn't know the exact sizes of the arrays, only the upper bounds:In fact, you don't even need an upper bound. Just ensure that  and  are big enough to accommodate the new item:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
