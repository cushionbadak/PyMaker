Natural Text
I've played around with threading before in Python, but decided to give the  module a try, especially since you can cancel a running task, which seemed like a nice detail. However, for some reason, I can't wrap my head around it.Here's what I wanted to implement (sorry if I'm using incorrect terminology):a  thread that downloads the same file every x seconds, checks its hash against the previous download and saves it if it's different.a  thread that runs in the background, allowing control (pause, list, stop) of the  thread.I used  for the webserver.This is what I have so far:This class is called by:This doesn't work of course, and I feel that this is a horrible piece of code.What's unclear to me:I stop the  in the  method, but how would I go about stopping the webserver (e.g. in a  method)?Does the  need a new event loop, or can I use the loop returned by ?Do I really need something like the  for what I'm trying to implement? This seems so clunky. And how do I get  to keep running instead of ending after a single execution as it does now?One last, more general question: is  supposed to replace the  module (in the future)? Or does each have its own application?I appreciate all the pointers, remarks and clarifications!
Why current code is not working:You're running event loop until  is complete.  creates task (it happens immediately) and finishes immediately.You're trying to run event loop until  complete, but how and when are you going start server? I think event loop should be running until server stopped.  or other stuff can be added as task (to same event loop).  already has function to start server and event loop - , but we can do it manually.Your questions:Your server will run until you stop it. You can start/stop differentcoroutines while your server working.You need only one event loop for different coroutines.I think you don't need .More general question:  helps you to run differentfunctions parallel in single thread in single process. That's whyasyncio is so cool and fast. Some of your sync code with threads youcan rewrite using asyncio and it's coroutines. Moreover: asyncio caninteract with threads and processes.It can be useful in case you still need threads and processes: here's example.Useful notes:It's better to use term  instead of  while we talk about asyncio coroutines that are not threadsIf you use Python 3.5, you can use / syntaxinstead of /I rewrote your code to show you idea. How to check it: run program, see console, open , see console, open , see console, type CTRL+C.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-and-threads
