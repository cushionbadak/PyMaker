Natural Text
I wrote a unittest to test timeout with the requests packagemy_module.py:Unittest:But when it runs, the try block in  never catches the 
There are two problems I see here. One that directly fixes your problem, and the second is a slight misuse of the Mocking framework that further simplifies your implementation. First, to directly address your issue, based on how you are looking to test your assertion, what you are actually looking to do here: You should be using a  here to help raise your exception. Per the documentation:side_effect allows you to perform side effects, including raising an  exception when a mock is calledWith that in mind, all you really need to do is this: That should get your exception to raise. However, chances are you might face this error: This can be best explained by actually reading this great answer about why that is happening. With that answer, taking that suggestion to actually only mock out what you need will help fully resolve your issue. So, in the end, your code will actually look something like this, with the mocked  instead of mocked  module:You can now actually further simplify this by making better use of what is in unittest with  instead of the try/except. This will ultimately just assert that the exception was raised when the method is called. Furthermore, you do not need to create a new method that will raise a timeout, you can actually simply state that your mocked get will have a  that raises an exception. So you can replace that entire  with simply this: However, you can actually directly put this in to your patch decorator, so, now your final code will look like this: I hope this helps!
 will replace  with a new mock object, but in your test method you replace the  method of the directly imported and therefore on the original requests module, which means that change is not reflected within your module.It should work if in your test method you replace it on the requests mock within your  instead:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#quick-guide
