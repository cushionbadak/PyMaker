Natural Text
Could there be a Python implementation where the assertion fails:POSIX specifies explicitly that  (8 bits per byte). Is there a similar guarantee in Python? Is it documented somewhere?Python 2 reference says: "Characters represent (at least) 8-bit bytes."If  name is not defined (on old Python versions) e.g., on Jython 2.5 then the question is about  type (bytestrings) i.e.,  on Python 2.
The bytes object Python 3 documentation saysbytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that 0 <= x < 256And the  type is documented in both Python 3 and Python 2 asa mutable sequence of integers in the range 0 <= x < 256so the language is designed under the assumption of 8-bit bytes.The Python 2 data model section saying "at least" 8 bits seems to just be one of the places where the Python 2 documentation hasn't been kept up to date very well compared to the Python 3 documentation. It dates back to at least Python 1.4, back in the really early days when they weren't sure whether they might want to support weird byte sizes.Since at least the introduction of unicode support in the 2.0 release, the documentation has been full of places referring to the bytestring type as "8-bit strings". Python isn't as rigorously specified as something like C, but I'd say any "conforming" implementation of Python 2.0 or up would have to have 8-bit bytes.
Additionally to the official documentation cited by user2357112, we can consult the Python enhancement proposals that introduced the bytes object.PEP 358 -- The "bytes" Object specified:A bytes object stores a mutable sequence of integers that are in the range 0 to 255.As we know that bytes objects ended up immutable, this specification can not be fully applicable and the 'range' part of it might be moot, too.Interestingly, PEP 3137 -- Immutable Bytes and Mutable Buffer, which partially superseded PEP 358 (and specifies bytes as immutable and introduces bytearrays as the mutable equivalent) only specifies what you can put into bytes objects and into bytearrays ("int[eger]s in range(256)"), but not what may come out of them.Neither PEP mentions "bit" or "bits" at all. (Though we know from bitwise boolean operations how Python integers map to bit patterns, so there shouldn't be any surprises there, I hope.)
Python 3Since Python 3.0, the Python language reference specifies:A bytes object is an immutable array. The items are 8-bit bytes, represented by integers in the range 0 <= x < 256.Python 2Before that (i.e., up to Python 2.7), it specified (as already mentioned in the question):The items of a string are characters. [â€¦] Characters represent (at least) 8-bit bytes.(Emphasis added.)Note that Python 2 did not have a  object. To hold immutable sequences of byte-chunked binary data in Python 2, strings were/are usually used. (Python 3 strings in contrast are meant for textual data only and are more equivalent to Python 2's  objects than to Python 2 strings.)but ...Python 2 documentation of the  function mentions "8-bit strings" and contrasts them to unicode objects. It might be implied that all non-unicode Python-2 strings are 8-bit strings, but I wouldn't count on that.ConclusionA Python implementation that provides Python-3-compliant  objects would be restricted to only hold 8-bit bytes in them. A Python implementation compliant to Python 2 would not be bound by this (as a  object, if it features one, would be unspecified) and if you'd use its Python-2-compliant strings as a substitute, there wouldn't be any guarantees about maximum byte size (actually, character size), either, unless the implementation states some guarantees of its own.


Answer URL
https://docs.python.org/3/library/stdtypes.html#binaryseq
https://docs.python.org/3/library/functions.html#bytearray
