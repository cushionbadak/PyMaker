Natural Text
In python, is there a difference between  and  in an except block? is showing me different results, but I don't know what it means.What's the end behavior of both?
There is no difference in this case.  without arguments will always raise the last exception thrown (which is also accessible with ).The reason the bytecode is different is because Python is a dynamic language and the interpreter doesn't really "know" that  refers to the (unmodified) exception that is currently being handled. But this may not always be the case, consider:What is  now? There is no way to tell when compiling the bytecode (only when actually running the program).In simple examples like yours, it might be possible for the Python interpreter to "optimize" the bytecode, but so far no one has done this. And why should they? It's a micro-optimization at best and may still break in subtle ways in obscure conditions. There is a lot of other fruit that is hanging a lot lower than this and is more nutritious to boot ;-)
There is a difference in the backtraces that the two forms generate.Using , this code:Gives the following backtrace:Using  as follows:Gives the following backtraceThe difference is that in the  case, the correct line referencing the original source of the exception is quoted in the backtrace, but in the  case the traceback references the  line not the original cause.Therefore, I recommend always using  rather than .
It is possible to clear the "last exception" (i.e. the result of ) info with . For instance, this would happen if the catch block called a function , which itself has special error handling.In that case,  with and without an argument would mean diffent things.  would still have a reference to the exception caught a few lines above, while the  shorthand would try to raise , which is an error.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement
