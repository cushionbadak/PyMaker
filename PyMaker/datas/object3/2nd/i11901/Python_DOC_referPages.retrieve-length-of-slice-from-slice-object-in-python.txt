Natural Text
The title explains itself, how to get 2 out of the objectThe documentation is somewhat confusing, or it is the wrong onehttps://docs.python.org/2/c-api/slice.htmlIn particular I don't understand what is the meaning of the output ofOne possible workaround is to slice a list with the slice objectBut this will fail for an arbitrary large slice.Thanks, I couldn't find an answer In other posts. 
There is no complete answer for this.  doesn't give you a length because the length of the result is always dependent on the size of the sequence being sliced, a short sequence (including an empty sequence) will produce fewer items, and if the  is unbounded, then the length will grow in tandem with the length of the sequence; a  might just go "to end of sequence" by having a  or  of .For a quick and easy way to compute the length for a sequence of a known length, you just combine  with Py3's  (or  in Py2, though  has limitations on values that Py3  does not).  gives you the concrete ,  and  values derived when a  applies to a sequence of a given length, it's basically the values you'd fill in in a C-style  loop that traverses the same indices as the :So to calculate the length of a  when applied to a sequence with 1000 elements, you'd do:If you're on Python 2, and your values might exceed what  can handle (it's limited to bounds and total length equal to what a  can hold), you can just do the calculation by hand:Update: Unfortunately,  itself won't accept a  for the sequence beyond what a  can hold, so this doesn't gain you anything over using  in Py2. Left in place for those interested, but the workaround doesn't workaround anything unless you also perform the work  does to convert negative values and  to concrete values based on the sequence length. Sigh.
So it looks like  returns the arguments to be given to , to get the item indices which should be reflected in the slice of a sequence of length  (although it's not documented edit: as @ShadowRanger pointed out, it is indeed documented). So the following lines evaluate to the same values:As you see, the resulting list's length is the same as the length of , which depends on the  object itself, and the length of the sequence to be sliced. That's why  will give you the right answer in Python 3. (the range object is a generator, which fortunately has the  function defined, so it can give you the item count, without the need to enumerate and count them.)If you work with large numbers in python 2, you can replicate the calculation as @ShadowRanger suggests.The original implementation of  is the following:And :The sources are from svn



Answer URL
https://docs.python.org/3/reference/datamodel.html#slice.indices
https://docs.python.org/3/reference/datamodel.html#slice.indices
https://docs.python.org/3/reference/datamodel.html#slice.indices
