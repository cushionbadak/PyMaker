Natural Text
I have a sorted array with some repeated values.  How can this array be turned into an array of arrays with the subarrays grouped by value (see below)? In actuality, my_first_array has ~8 million entries, so the solution would preferably be as time efficient as possible.
 makes this trivial:With no  function, it just s groups consisting of runs of identical values, so you -ify each one in a list comprehension; easy-peasy. You can think of it as basically a within-Python API for doing the work of the GNU toolkit program, , and related operations.In CPython (the reference interpreter),  is implemented in C, and it operates lazily and linearly; the data must already appear in runs matching the  function, so sorting might make it too expensive, but for already sorted data like you have, there is nothing that will be more efficient.Note: If the inputs might be value identical, but different objects, it may make sense for memory reasons to change  to . The former would retain the original (possibly value but not identity duplicate) objects in the final result, the latter would replicate the first object from each group instead, reducing the final cost per group to the cost of  references to a single object, instead of  references to between  and  objects.
I am assuming that the input is a NumPy array and you are looking for a list of arrays as output. Now, you can split the input array at indices where those shifts (groups of repeats have boundaries) with . To find such indices, there are two ways - Using  with its optional argument  set as , and another with a combination of  and . Thus, we would have two approaches as listed next.With  -With  and  -Sample run -
Here is a solution, although it might not be very efficient:
This is O(n):


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
