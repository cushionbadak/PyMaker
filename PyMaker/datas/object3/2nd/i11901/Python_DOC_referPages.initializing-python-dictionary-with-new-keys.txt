Natural Text
How can I initialise a python dictionary with keys that are not pre-determined? If I just initialise the dictionary with , it gives me a Key Error once I try to populate it with new key-value pairs.A workaround would be to do a try-except so that it tries to access existing keys first or initialises the dictionary for a new key if the former fails. A concrete example would be counting words in a text (this code example would lead to a ): 
No need to initialize your dict with predefined values.You also don't need any try/except, but just use Python's  with the default type set to :However, if you just need to count the words in a list, Python also had a helper class called , in collections as well.
With the approach that you are doing, the way you should be doing this is checking to see if the key exists already by using the  keyword. If it does then do your increment, otherwise just assign 1. like this: Per your comments, you can avoid this condition if you actually use  from the  module (documentation). You simply set what the  value is to your dictionary entries and proceed with your . Example:Now, if you are simply trying to count words in text, then there is something built-in to do this already for you called  from the  module (documentation). This will keep a count of all like elements. Observe the example: Pay attention to the output as it is in order of most frequent. If you need to get the most common word, call  on it: 
You need to make sure to initialize the keys before you try to increment them (). Try this:
You need firstly to add key-value pair to your dict.
If I've understood your objective here which is to get a  of word:count mapping, then you could do it also with dictionary comprehension(taking example of ):Or also  from  module would also do the job:



Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.Counter
