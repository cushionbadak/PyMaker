Natural Text
What is the difference between the following two code snippets:andWhy can I iterate over  which is type ? For example: I can do something like this with :But not with ?
In , you're iterating over a  and converting each of its characters into an , the result is an iterator of s, check the documentation for :In , you're converting a  into an , the result is an . They're very different things!That's why you can iterate over , because it's an iterator, not an . And that's why you can't iterate over , it's just an .
I think the best thing to do in situations like these is to check the actual values in the REPL.So  is a special map object which turns out to be iterable. It stores each character of , individually converted to an integer. Meanwhile,  simply converts the whole string to a simple integer. It would be an error to iterate over , but it would also be an error to do integer arithmetic on .
in python 3.6 ,the map function returns a generator , Note:these are are not loaded into the memory as a whole This is the implementation of map in python3when u call the map as  the value is produced onspot as opposed to loading the entire thing, which could crash the memory in some cases. does is load the entire list into the memory which is what python2 versions of map doesgives  an integer value thats it its not an iterable returns an iterable generator object it is an iterable  which converts each character in the string to int and yields the result one by one so would printcalling the stored  object second time yields no result as the function has run out of values in the first run if you want to get the values in the second run convert it to a list so that it resides in the main memory   or if it is really long store the result of the map object in a separate file and read from there   
In Python 3,  return an iterator that you can use in a for loop.  takes at least two parameters, a function and an iterable argument. Here  is the function and , a string, is the iterable object.  applies the function to each value of the iterable. Here,  will be applied to "2", "2", "2", ... "2", "1", "1" individually and make them all to be integers.  will return an iterator that allows you to loop over the results yielding from the previous step: (2, 2, 2, ..., 1, 1)For  ,  you are creating an integer out of the  function, and an integer is not iterable. Thus, you cannot loop of it.Below is the description of  cited from Python 3 documentation.map(function, iterable, ...)   : Return an iterator that applies function to every item of iterable, yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap().One thing worth noting is that in Python 2,  returns a list rather than an iterator. In Python 3, you have to explicitly make it a list like . 


Answer URL
https://docs.python.org/3/library/functions.html#map
