Natural Text
I am coming from C languageIn book of Python it is givenamong escape sequence\ - New line in a multi-line string\n - Line breakI am confused and unable to differentiate between the two.
The book is confusing you by mixing two entirely different concepts. is an escape sequence in a string literal. Like other  and  or  escape sequences these work exactly like those in C; they define a character in the string that would otherwise be difficult to spell out when writing code. at the end of a physical line of code extends the logical line. That is, Python will see text on the next line as part of the current line, making it one long line of code. This applies anywhere in Python code.You can trivially see the difference when you print the results of strings that use either technique:This outputsNote that the line breaks have swapped! The  escape sequence in the string value caused the output to be broken across two lines (the terminal or console or whatever is displaying the printed data, knows how to interpret a newline character), while the newline in the  string literal definition is gone; it was never part of the string value being defined, it was a newline in the source code only.Python lets you extend a line of code like this because Python defines how you delimit logical lines very differently from C. In C, you end statements with , and group blocks of lines with  curly braces. Newlines are not part of how C reads your code.So, the following C code:is the same thing asC knows where each statement starts and ends because the programmer has to use  and  to delimit lines and blocks, the language doesn't care about indentation or newlines at all here. In Python however, you explicitly use newlines and indentation to define the same structure. So Python uses whitespace instead of ,  and .This means you could end up with long lines of code to hold a complex expression:The point of  is to allow you to break up such a long expression across multiple logical lines by extending the current line with  at the end:So the  as the last character on a line, tells Python to ignore the newline that's there and continue treating the following line as part of the same logical line.Python also extends the logical line when it has seen an opening ,  or  brace, until the matching ,  or  brace is found to close the expression. This is the preferred method of extending lines. So the above expression could be broken up across multiple logical lines with:You can do the same with strings:This uses another C string literal trick Python borrowed: multiple consecutive string literals form one long string object once parsed and compiled. See the Lexical analysis reference documentation:2.1.5. Explicit line joiningTwo or more physical lines may be joined into logical lines using backslash characters ()[.][...]2.1.6. Implicit line joiningExpressions in parentheses, square brackets or curly braces can be split over more than one physical line without using backslashes.The same documentation lists all the permitted Python string escape sequences.
You have completely misread the book. is not an escape sequence, and is not used on its own in strings. It is used in multi-line code. is a newline character in strings.
\ - New line in a multi-line stringIt is used for splitting a string which has a vast number of characters into multi lines as it is inconvenient to write in a single line.This is something that has effect in the code only.\n - Line breakThis one on the other hand is a typical line break statement for printing something in a new line. The same thing we use in C and C++ languages.this is something that has effect in the output.
Here is the response to your question:Purpose of \n is basically used to give a line break as you mention too.Example:print("Hello\n")print("Hi")The output of the above would be like:HelloHiPurpose of \ is basically used to escape characters which have special meaningExample: I have to print Hello\ in the output then the code will be likeprint("Hello\\")The output of the above code will be like:Hello\So bascially in order to print Hello\ in your output, you have to put two "\\" and this is the purpose of \ character (to escape special characters).I hope this helps.
With "\" you can change line as you write your code. What I mean is that if you write a long line of code and you want to change line to see what you type.For example : is the same as writing :On the other hand with "\n" you can change line in what you want to print. For example, when you write:, it will print "this is an"(changes line) "example".
Use \n  to have your output go to the next line.Helloworld!Use the back slash with a character that has a meaning to Python when you want that character to appear in the printed output.It's cold outsideI hope this helps. ðŸ˜€
As excellently answered by @Jimmy I further give the following examples to make the matter more clear.Case 1:Case 2:Case 3:Case 4:There is also another point which @Jimmy has not mentioned. I have illustrated it by the following two examples -Example 1:Example 2:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/reference/lexical_analysis.html
