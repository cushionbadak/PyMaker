Natural Text
This question already has an answer here:How to zip two differently sized lists?                    8 answers                If I have two iterables of different lengths, how can I most cleanly pair them, re-using values from the shorter one until all values from the longer are consumed?For example, given two listsIt would be desirable to have a function  resulting in pairs: I found I could write a function to perform this as suchHowever, I'm greedy and was curious what other methods exist? so that I may select the most obvious and elegant and be wary of others. as suggested in many similar questions is very close to my desired use case as it has a  argument which will pad the longer pairs. However, this only takes a single value, instead of wrapping back to the first value in the shorter list.As a note: in my use case one list will always be much shorter than the other and this may allow a short-cut, but a generic solution would be exciting too!
You may use  with  to get the desired behavior. As the  document says, it:Make an iterator returning elements from the iterable and saving a copy of each. When the iterable is exhausted, return elements from the saved copy. For example:Since in your case, length of  and  could vary, your generic  should be like:Sample Run:
If you're not sure which one is the shortest,   the longest  of the two lists: will repeat the list infinitely. Then,  the two infinite lists together to get the cycle that you want, but repeated infinitely. So now, we need to trim it to the right size.  will find the longest length of the two lists, then  the infinite iterable until you get to the right length. Note that this returns a generator, so to get the output you want use  to eat the function.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#itertools.cycle
