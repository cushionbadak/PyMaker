Natural Text
Can someone please explain the groupby operation and the lambda function being used on this SO post? Edit: It took me a while to wrap my head around the lambda function used with groupby. I don't think I understood either of them very well. Martijn explained it really well, however I have a follow up question. Why is  passed as an argument to the lambda function every time? I tried assigning the variable  to  just once, outside the function.and it resulted in Also, calling  on  directly within the lambda expression, resulted in all the lines in the input file getting bunched together i.e a single key was generated by the  function.I'm learning Python on my own, so any help or pointers to reference materials /PyCon talks are much appreciated. Anything really!
 is an infinite iterator of increasing integer numbers.The  stores an instance as a keyword argument, so every time the lambda is called the local variable  references that object.  advances an iterator, retrieving the next value:So  retrieves the next count in the sequence, and divides that value by  (taking only the integer portion of the division). The  argument is ignored.Because integer division is used, the result of the  is going to be  repeats of an increasing integer; if  is 3, then you get  three times, then  three times, then  three times, etc:It is this resulting value that  groups the  iterable by, producing groups of  lines.When looping over the  results with ,  is the number that the  produced and the results are grouped by; the  loop in the code ignores this.  is an iterable of lines from , and will always contain  lines.
In response to the updated OP...The  iterator offers ways to group items together, giving more control when a key function is defined.  See more on how  works.The  function, is a functional, shorthand way of writing a regular function.  For example:Is equivalent to this regular function:Keywords: iterator, functional programming, anonymous functionsDetailsWhy is  passed as an argument to the lambda function every time?The reason is the same for normal functions.  The  parameter by itself is a positional argument.  When a value is assigned, it becomes a default keyword argument.  See more on positional vs. keyword arguments.You can still define  outside the function by assigning the result to a keyword argument:... calling next on  directly within the lambda expression, resulted in all the lines in the input file getting bunched together i.e a single key was generated by the  function ...Try the following experiment with :As expected, you will notice  is yielding the next item from the  iterator.  (A similar function is called iterating an iterator with a  loop).  What is unique here is that generators do not reset -  simply gives the next item in the line (as seen in the former example).  @Martijn Pieters pointed out  computes a floored integer that is used by  to identify each line (bunching similar lines with similar ids together), which is also expected.  See the references for more on how  works.References Docs for Docs for Beazley, D. and Jones, B.  "7.7 Capturing Variables in Anonymous Functions," Python Cookbook, 3rd ed. O'Reilly. 2013.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
https://docs.python.org/3/library/itertools.html#itertools.groupby
