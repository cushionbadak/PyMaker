Natural Text
(Python 3.6)I have this folder structure:submodule.py:__ init __.py:start.py:I understand how and whyworks.But I don't understand why:also works, if I have not done:Nor:Neither in __ init __.py nor in start.pyThank you very much if anyone may clear my doubt.
When issuing , python does two things for you: one, search and evaluate the module named , put it into  cache; two, populate  object and bind name "subfunc" to the namespace of the current module:The import statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope.When importing , parent of  also got imported:While certain side-effects may occur, such as the importing of parent packages, and the updating of various caches (including sys.modules) ...On the last stage of importing , python would set the module as an attribute on its parent , this behavior is documented:When a submodule is loaded using any mechanism (e.g. importlib APIs, the import or import-from statements, or built-in __import__()) a binding is placed in the parent moduleâ€™s namespace to the submodule object.
If I'm getting this right, you have a folder called "package" in which there are 2 things: a .py file and another folder called "subpackage".Inside "subpackage" you have  and  which the latter contains a function that just prints "This is submodule".Now, when you call , you call and "pull" everything that's inside "subpackage", including submodule and therefore, the  function.When you write  there's really nothing amazing going there, you just call the mainfolder/container (subpackage.), then the .py file (submodule.) and finally the function itself (subfunc() ).


Answer URL
https://docs.python.org/3/reference/import.html#the-import-system
https://docs.python.org/3/reference/import.html#submodules
