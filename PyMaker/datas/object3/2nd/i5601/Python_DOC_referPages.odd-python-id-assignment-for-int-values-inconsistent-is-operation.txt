Natural Text
This question already has an answer here:“is” operator behaves unexpectedly with integers                    11 answers                'is' operator behaves unexpectedly with non-cached integers                    2 answers                So Python 3.6.2 has some weird behavior with their assignment of id's for integer values. For any integer value in the range [-5, 256], any variable assigned a given value will also be assigned the same ID as any other variable with the same value. This effect can be seen below. In fact, to see the ID pairs in action, you can just run this simple program that prints out the number and id in the range that I'm talking about...If you add some other variables with values outside this range, you will see the boundary condition (i.e. -6 and 257) values id's change within the python interpreter, but never the values here. This means (at least to me) that Python has taken the liberty to hardcode the addresses of variables that hold values in a seemingly arbitrary range of numbers. In practice, this can be a little dangerous for a beginning Python learner: since the ID's assigned are the same within what is a a normal range of operation for beginners, they may be inclined to use logic that might get them in trouble, even though it seemingly works, and makes sense...One possible (though a bit odd) problem might be printing an incrementing number:This logic, though not in the standard Pythonic way, works and is fine as long as b is in the range of statically defined numbers [-5. 256]However, as soon as b is raised out of this range, we see the same strange behavior. In this case, it actually throws the code into an infinite loop.I know that using 'is' to compare values is really not a good idea, but this produces inconsistent results when using the 'is' operator, and it is not immediately obvious to someone new to the language, and it would be especially confusing for new programmers that mistakenly used this method.So my question is... a) Why (was Python written to behave this way), and b) Should it be changed?p.s. In order to properly demonstrate the range in a usable script, I had to do some odd tweaks that really are improper code. However, I still hold my argument, since my method would not show any results if this odd glitch didn't exist.The  is necessary to force Python to give each value a new address/id rather than the pointer to the object that it is accessing. 
This is documented behavior of Python:The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you actually just get back a reference to the existing object.   sourceIt helps to save memory and to make operations a bit faster.It is implementation-specific. For example, IronPython has a range between -1000 and 1000 in which it it re-uses integers.


Answer URL
https://docs.python.org/3/c-api/long.html
