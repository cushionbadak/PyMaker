Natural Text
I was trying to connect SMTP server to domain nameThis throws me error But when I change mxrecords to string it worksCan anyone explain me why it accept string?
From https://docs.python.org/3/library/smtplib.htmlYou can know the  needs a string param .An SMTP instance encapsulates an SMTP connection. It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP connect() method is called with those parameters during initialization. The  can click then redirect to a link, then you can see:SMTP.connect(host='localhost', port=0)  Connect to a host on a given port. The defaults are to connect to the local host at the standard SMTP port (25). If the hostname ends with a colon (':') followed by a number, that suffix will be stripped off and the number interpreted as the port number to use. This method is automatically invoked by the constructor if a host is specified during instantiation. Returns a 2-tuple of the response code and message sent by the server in its connection response. There you can know the param  default is a string. EDITI checked your code, the prints which states that the  object is a  object, not a string.If you click the  method's source code, you will find the  should be a string:and in the code you can find , which matches your error. Check the  source code, you will find the  class has a  method:So you should use  to get the MX server name.
The object returned by the third-party  package is not a type (or class, if that helps) which the standard library  knows anything about.Many times, when interfacing library APIs, your task as a programmer is to convert from a custom representation which one API returns as output, to a different representation which is suitable as input for another API call.System libraries need to pay special attention to this. If  (or even ) knew about your particular resolver, it would be harder to use with other resolvers. Even if your resolver was also part of the Python standard library, such an internal dependency would introduce unwelcome rigidity, internal coupling, and potentially some nasty internal versioning issues.


Answer URL
https://docs.python.org/3/library/smtplib.html
