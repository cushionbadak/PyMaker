Natural Text
Consider two list comprehensions  and  with nearly redundant code. The difference being the sliced lists  and , namely Is there a pythonic way to write this as a one liner (say  )? I have a few other pieces of code that are similar in nature, and I'd like to simplify the code's seeming redundancy. 
As far as your question related to combining both the list comprehension expression above is concerned, you can get  and  by using  with single list comprehension as:Sample example to show how  works:Here our list comprehension will return the list of tuples:Then we are unpacking this list using  and using zip we are aggregating the element from each of the iterables:As an alternative, for dividing the list into evenly sized chunks, please take a look at "How do you split a list into evenly sized chunks?"
Although one-line  are really useful, they aren't always the best choice. So here since you're doing the same chunking to both , if you wanted to change the chunking, you would have to modify both lines.Instead, we could use a  that would chunk any given  and then use a one-line assignment to chunk  and .
Just another way...It's a bit faster than the accepted zip solution:Code:
You can you lambda expression:


Answer URL
https://docs.python.org/3/library/functions.html#zip
