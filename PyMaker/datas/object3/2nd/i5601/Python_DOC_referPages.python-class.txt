Natural Text
In Python's documentation  is described as an attribute. In the object  (the metaclass),  appears to be a method.If we do:So, my questions are:When we call , are we really calling the method ?Is this the reason why  is not a member of the  attribute of ?
 is a descriptor object. Many attributes on Python core objects are implemented as descriptors. You should see that as an implementation detail, nothing more. is a descriptor because Python needs to be able to validate new values you assign to it; there are certain limitations to assigning to  that need to be honoured, and making  a descriptor is the most efficient method of doing so.Descriptor objects are automatically found and invoked on the type when you try to access the attribute on an object.  will find and execute the  descriptor on the class (by searching through all classes in the inheritance graph), typically ending up with  (where  is usually the first class on which the  attribute is found in the  sequence); This happens because Python will always use the type's  method to find attributes, and that method knows how to handle descriptors found on the class and bases, as well as look at the  attributes. So they don't live on the object  itself, they live on the object type, by design.Now, class objects are also callable objects. That's how you create an instance; for a given class , you create an instance by calling it, so .  is just a reference to the class object, just like  would create a reference to a class. Calling the class object produces a new instance, whatever reference you used to get to it.Finally,  is just a reference to  itself:That's because  is it's own type. The parent-child relationships of the Python type system must stop somewhere, and  is that point.In your example,  is a reference to the  class. And  is the same object as , so you essentially did this:which is indeed true, the type of  is .


Answer URL
https://docs.python.org/3/howto/descriptor.html
