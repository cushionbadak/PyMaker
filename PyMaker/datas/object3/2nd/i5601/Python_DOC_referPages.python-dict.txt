Natural Text
The attribute  is supposed to contain user defined attributes. But if we print the  of an empty class, I would also get: Which are prepopulated by Python in the  attribute accordingly to the class object type.Now,  and  are also Python defined attributes of a class object type, but not included in .Is there any rule that specifies which dunder attribute is included in an object  and which are not?
The attribute  is supposed to contain user defined attributes.No, the  contains the dynamic attributes of an object. Those are not the only attributes an object can have however, the type of the object is usually also consulted to find attributes.For example, the methods on a class can be found as attributes on an instance too. Many such attributes are descriptor objects and are bound to the object when looked up. This is the job of the  method all classes inherit from ; attributes on an object are resolved via , at which point the descriptors on the type as well as attributes directly set on the object (in the  mapping) are considered.The  attribute of a class is provided by the class metatype, which is  by default; it is a descriptor: just happens to be a place to store attributes that can have any valid string name. For classes that includes several standard attributes set when the class is created ( and ), and others that are there as descriptors for instances of a class ( and ). The latter must be added to the class, because a class itself also has those attributes, taken from , again as descriptors.So why is  a descriptor, but  is not? You can't set  to just anything, so the descriptor setter checks for specific conditions and is an opportunity to rebuild internal caches. The Python core developers use descriptors to restrict what can be set, or when setting a value requires additional work (like validation and updating internal structures).


Answer URL
https://docs.python.org/3/howto/descriptor.html
