Natural Text
QuestionIn , what is the shortest/easiest way to create a function which allows me to access a variable by concatenating two string literals to generate the variable's name?BackgroundIn , I can do something like so:Then, later in my code, I could do something like:Assuming a macro exists with the name PRODUCT_BANANA, its value is now assigned to . I can accomplish something similar in shell scripts via indirection.Question - ReduxHow can I accomplish this same functionality in ? I'm doing this because I have a  class with thousands of variables for dozens of different products, i.e.I'd like to be able to have a function that can be, for example, executed via , resolve the value as , and return the associated value (, in this case).ExtraAssuming the above is possible, is it possible to have the function always interpret the supplied function arguments as string literals, so function calls don't need the arguments wrapped in single/double quotes? i.e. so it can be called via , rather than ?
The first part is easy:But the second part is not possible unless you have a limited set of names, in which case you would also have to haveetc
If you just want to do this for class/instance attributes, you want . It takes a string argument, which you can construct any way you like:You could of course write a simple wrapper if you wanted, but in my opinion that would be obfuscatory for no benefit.Building the string passed to  any way you want includes using other constructs like  loops if appropriate. For instance, suppose you have iterables of elements of the attribute names and want to get them all:For your "extra" block - well,  means a variable named , not the literal string. You could define such a string constant if you really wanted, but I wouldn't. There is no good way to tell Python to always assume an unresolved variable name actually means a string literal, and I think it would be a bad idea to do so if you could.
Just use a dict. i.e.And then you can do something like this:


Answer URL
https://docs.python.org/3/library/functions.html#func-dict
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/functions.html#vars
