Natural Text
I have this string:And this regex that searches for parens, commas, and simple operators. I need exclude any matches inside double quotes and be able to split on the matches. Note that the solution must still search for parens, commas and operators in the rest of the string. Current version of the regex is:Matches for  are:And when I do:It returns:But I need it to exclude the quantity in quotes, so matches should be:And tokens should be:
 is not a clean way to do tokenizing. There is a recipe in the documentation of  which will serve you better. Basically, you first write a regex for each lexical type. For example:Then you make a master regex out of these:Then you pass the string you want to tokenize to :Now if you iterate over , you will get a stream of match objects which contain everything you could possibly want to know about the string (lexical-wise, that is). What you probably want to do is to process each match object based on its lexical type. For demo, let's print out the lexical type, the string matched, and the position of the string matched:OutputNB: when compiling the master regex, you must make sure that higher-precedence patterns come before lower-precedence ones. So quotes should come before everything else. And operators made up of two characters (like ) should come before those made up of one characters.And this pattern will deal with single quotes as well as double quotes:


Answer URL
https://docs.python.org/3/library/re.html#writing-a-tokenizer
