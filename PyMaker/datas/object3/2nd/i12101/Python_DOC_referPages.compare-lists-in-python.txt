Natural Text
I have a text file, which looks like:I want to import them in python as list and then compare each element of the list to corresponding element in other list and do it for all combination of lists. If both of elements are 1, increase counter by 1 and in the end divide by the length of the list. I tried to write code, but it does not work as it should:Edit: When creating text file with python, it moved every entry with \n on a new line, but I have no idea how to delete it.Expected output:
Just make sure that the two strings are not equals before proceeding. Here is a basic solution for your problem in order to get the expected output :This works fine with Python 3 and here is the result :Edit : You are not obliged to use two lists. You can just use the l1 list and iterate over it two times. If you want to use index, you can avoid iteration and move through the list with indexes by using :If you want to access one string element with indexes you can then do :The final instruction would then be :To get rid of annoying string process, you can then visit this pageEDIT :To answer your efficiency problem asked in the comments, here is a solution involving threading and less complexity while we faced pure quadratic complexity before. This solution assumes that all strings contained in a file have the same length and that the files are not going to be compared to each other. If this is not the case, I'm sure you will be able to find a solution with this basic approach.Each comparison is then stored into a file named like sourcefile_compared.txt and each word in a row is comma separated. Because we use the files and launch several thread, the algorithm uses exceptions intensively. Cause I don't know your server, I would suggest that you try this on your own machine and set up yourself the files path.If you want something approaching linear complexity, you have to make a choice cause you actually want a computation for each string against each other.Here is the output coming out from the console :Here are the datas written into vector_compared.txt:
Use the  method to remove whitespace from a string.If you have multiple sequences and you want to do something with the corresponding elements of each sequence you can use  to aggregate those elements together. (note  returns an iterator so in the example  is used to show its result)If the sequences are in a container, you need to unpack them for use with :Once you have the arguments all grouped together, it makes it easy to do stuff with them - you can pass them to a function or in your case just compare them: will consume an iterator/iterable and count all the 's -  has a value of one and  has a value of zero.As an aside: you can assign the result of  to a name and use it.  It could make things easier to read:If you have a few things and you want to compare each with the other,  can make it easy to get the combinations/permutations.Using , , and  you can write something that does what you wantI like to use format strings to format my print statements:I have been using list comprehensions and generator expressions which are a compact way of writing a  loop - many people prefer them once they get used to them (as long as they are not too complicated):This can be written in the shorthand format as a list comprehension:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/string.html#format-examples
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
