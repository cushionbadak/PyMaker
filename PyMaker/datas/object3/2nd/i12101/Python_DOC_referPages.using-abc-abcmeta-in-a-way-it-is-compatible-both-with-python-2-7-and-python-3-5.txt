Natural Text
I'd like to create a class which has  as a metaclass and is compatible both with Python 2.7 and Python 3.5. Until now, I only succeeded doing this either on 2.7 or on 3.5 - but never on both versions simultaneously. Could someone give me a hand?Python 2.7:Python 3.5:TestingIf we run the following test using the suitable version of the Python interpreter (Python 2.7 -> Example 1, Python 3.5 -> Example 2), it succeeds in both scenarios:ProblemWhile running the test using Python 3.5, the expected behavior doesn't happen ( is not raised while instantiating ):Whereas running the test using Python 2.7 raises a :
You could use  or : is a Python 2 and 3 compatibility library. You can install it by running  or by downloading the latest version of  to your project directory.For those of you who prefer  over , the relevant function is .
Using abc.ABCMeta in a way it is compatible both with Python 2.7 and Python 3.5If we were only using Python 3 (this is new in 3.4) we could do:and inherit from  instead of . That is:You still don't need an extra dependence (the six module) - you can use the metaclass to create a parent (this is essentially what the six module does in with_metaclass):Or you could just do it in-place (but this is more messy, and doesn't contribute as much to reuse):Note that the signature looks a little messier than  but it is substantially the same semantics, without the extra dependence.Either solutionand now, when we try to instantiate without implementing the abstraction, we get precisely what we expect:Note on We just added empty  to the ABC convenience class in Python 3's standard library, and my answer is updated to include it.Not having  and  available in the  parent allows users to deny their creation for child classes and save memory - there are no downsides, unless you were using  in child classes already and relying on implicit  or  creation from the  parent. The fast fix would be to declare  or  in your child class as appropriate. Better (for ) might be to declare all your members explicitly.
I prefer Aaron Hall's answer, but it's important to note that in this case the comment that is part of the line: ...is every bit as important as the code itself. Without the comment, there is nothing to prevent some future cowboy down the road deleting the line and changing the class inheritance to: ...thus breaking everything pre Python 3.4. One tweak that may be a little more explicit/clear to someone else- in that it is self documenting- regarding what it is you are trying to accomplish: Strictly speaking, this isn't necessary to do, but it is absolutely clear, even without commentary, what is going on. 
Just to say that you must explicitly pass  to  in Python 2 if you use .Otherwise Python raises .See corrected code below.This would not require a separate answer but sadly I cannot comment yours (need more rep).


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABC
