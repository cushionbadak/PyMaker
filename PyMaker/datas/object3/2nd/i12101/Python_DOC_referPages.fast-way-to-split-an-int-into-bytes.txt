Natural Text
If I have an int that fits into 32 bits, what is the fastest way to split it up into four 8-bit values in python? My simple timing test suggests that bit masking and shifting is moderately faster than , but I'm pretty sure I haven't thought of everything.Before you ask: this operation will be used a lot. I'm using python 3.4. 
If you're doing it a lot, the fastest approach is to create specialized a specialized  instance and pre-bind the  method:Using  directly would use a cached  object after the first use, but you'd pay cache lookup costs to go from format string to cached  every time, which is suboptimal. By creating and prebinding the  of a  object (which is implemented in C in CPython), you bypass all Python byte code execution beyond the actual function call, and spend no time on cache lookups. On my machine, this runs in about 205 ns, vs. 267 ns for shift and mask (without reassigning ).An alternate approach (for more general, not  compatible sizes) is using ; for example, in this case:which takes about the same amount of time as the manually shifting and masking approach (it took 268 ns per loop), but scales to larger numbers of bytes better.
If you need something very fast, you should look into writing a C extension (see this). You can do this with or without cython.If you write a lot of these, I definitely recommend looking into cython.This type of things is exactly what Python is awesome for: you can write your speed critical components in C directly, and it will interact (almost) seamlessly with your python code.


Answer URL
https://docs.python.org/3/library/struct.html#struct.Struct
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
