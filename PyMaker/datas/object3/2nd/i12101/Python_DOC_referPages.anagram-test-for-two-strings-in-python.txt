Natural Text
This is the question:Write a function named test_for_anagrams that receives two strings as  parameters, both of which consist of alphabetic characters and returns  True if the two strings are anagrams, False otherwise. Two strings are  anagrams if one string can be constructed by rearranging the  characters in the other string using all the characters in the  original string exactly once. For example, the strings "Orchestra" and  "Carthorse" are anagrams because each one can be constructed by  rearranging the characters in the other one using all the characters  in one of them exactly once. Note that capitalization does not matter  here i.e. a lower case character can be considered the same as an  upper case character.My code:The problem here is when I enter strings as  and , it gives me result as . Same for the strings  and . Any help would be appreciated.
I'm new to python, so excuse me if I'm wrong    I believe this can be done in a different approach: sort the given strings and then compare them.  
The problem is that you just check whether any character matches exist in the strings and increment the counter then. You do not account for characters you already matched with another one. Thatâ€™s why the following will also fail:Even if the string is equal (and as such also an anagram), you are matching the each  of the first string with each  of the other string, so you have a count of  resulting in a result of .What you should do in general is count every character occurrence and make sure that every character occurs as often in each string. You can count characters by using a  object. You then just need to check whether the counts for each string are the same, which you can easily do by comparing the counter objects (which are just dictionaries):
For completeness: If just importing  and be done with the exercise is not in the spirit of the exercise, you can just use plain dictionaries to count the letters.Demo:Output:
Traverse through string test and validate weather character present in string test1 if present store the data in string value.compare the length of value and length of test1 if equals return True Else False.   
I have done Anagram Program in basic way and easy to understandable .
A more concise and pythonic way to do it is using sorted & lower/upper keys.You can first sort the strings and then use lower/ upper to make the case consistent for proper comparison as follows:
def anagram(test,test1):    test_value = []    if len(test) == len(test1):        for i in test:            value = test.count(i) == test1.count(i)            test_value.append(value)    else:        test_value.append(False)check for length of test and test1 , if length matches traverse through string test and compare the character count in both test and test1 strings if matches store the value in string.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
