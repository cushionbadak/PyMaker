Natural Text
I've been writing some command line python programs and using  to do it. I've been structuring my code somewhat as follows.It's really super irritating to have to call out  and  3 times. I understand having to do it twice. Is there some way to treat the namespace returned by the  function as a tuple? Or better yet as a tuple and a dict for optional args and do unpacking? 
https://docs.python.org/3/library/argparse.html#the-namespace-objectThis class is deliberately simple, just an object subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the standard Python idiom, vars():Note that one of the big advances, or changes at least, from  to   is that positional arguments, such as yours, are treated the same as optionals.  They both appear in the   object.  In , positionals are just the left overs from parsing defined options.  You could get the same effect in  by omiting your arguments and using : is now a Namespace, and  a list.  You could then call your function as:For example:That same  paragraph shows that you can define your own  class.  It wouldn't be hard to define one that behaves like a dictionary (for use as ) and as namespace.  All  requires is that it works with  and .another standard Python feature lets me pass  as a tuple:For a similar answer from last January: https://stackoverflow.com/a/34932478/901925Neatly pass positional arguments as args and optional arguments as kwargs from argpase to a functionThere I give ideas on how to separate out 'positionals' from 'optionals' after parsing.Here's a custom namespace class that includes, in its API, a means of returning itself as a dictionary:Another idea - use one of the multiple  (2,'*','+') for the positional argument.  Then you have only one name to type when passing it to your function.
You can see a similar question asked here.Edit: Looking for a way that would not use an internal method, I found this discussion which suggested using . This works quite well:
What is wrong with doing That is, why are you so hung up about giving  positional arguments?To be honest, I usually do the argument parsing either a) [for small scripts etc.] at the beginning of the module, which provides me with a variable that's in the scope of all functions or b) [usually] inside  if I use your idiom:


Answer URL
https://docs.python.org/3/library/argparse.html#the-namespace-object
