Natural Text
I wanted to do a kind of dictionary class, for sparse data. The idea is that if the key is not in the dictionary find the closest key with a lower value (the keys of my dictionary are always positive integers, with the lowest being always zero)Here is my prototypeAnd this works, but only up to 338I guess it has to do with the recursion, but I though the number of recursion in python was higher. I also need the lookups to be very fast...Am I doning something wrong, is there a better way to do this?thanksEDIT:an example:if I only have the keys "0", "10" and "15", and search for the key "13", I want the getitem function to give me the value corresponding to getitem(10)And if I want the key "100" should get the value of getitem(15)).EDIT 2There is no particular reason why I need it to be a dictionary, or the getitem function to be recursive. But I had the feeling that this would be the fastest way. EDIT 3I tried all the 3 solutions proposed by @gilland @thomas-lotze:and here the result of the benchmark:so it's true that the recursion does not improve anything, and as @gill said, it's dangerous.But at the end the solution I am going to use is the one from @thomas-lotze . thanks a lot for the answers!
For speed, use the  module to work on a list of (key, value) pairs instead of a dict:
This will achieve your narrow goal (given that keys are s and will not be smaller than ), but like @JustinR said in comments, there may be a better solution to the larger problem.EDITJust to show how to do the same thing recursively (since OP asked), but it's highly unrecommended. There is the recursion limit. And as others said, binary search is more efficient.EDIT 2Improving on @ThomasLotze's answer, here is how to wrap  while maintaining the  interface:


Answer URL
https://docs.python.org/3/library/bisect.html
