Natural Text
I have a console program written in Python. It asks the user questions using the command:How would I test a function containing a call to  using ? I wouldn't want to force a tester to input text many many times only to finish one test run.
You should probably mock the built-in  function, you can use the  functionality provided by  to revert back to the original  function after each test.A more elegant solution would be to use the  module together with a . This way you don't need to use teardown and the patched method will only live within the  scope.
As The Compiler suggested, pytest has a new monkeypatch fixture for this.  A monkeypatch object can alter an attribute in a class or a value in a dictionary, and then restore its original value at the end of the test.In this case, the built-in  function is a value of python's  dictionary, so we can alter it like so:Edit: Changed  to 
You can replace  with some custom Text IO, like input from a file or an in-memory StringIO buffer:this is more robust than only patching , as that won't be sufficient if the module uses any other methods of consuming text from stdin.This can also be done quite elegantly with a custom context managerAnd then just use it like this for example:
You can do it with  as follows.First, in your code, create a dummy function for the calls to :In your test functions:For example if you have a loop checking that the only valid answers are in ['y', 'Y', 'n', 'N'] you can test that nothing happens when entering a different value instead.In this case we assume a  is raised when answering 'N':
This can be done with  and  blocks in python3.The line to note is , which overrides the  with the lambda function. Our lambda function takes in a throw-away variable  because  takes in an argument.Here's how you could test the fail case, where user_input calls . The trick here is to get pytest to look for that exception with .You should be able to get this test running by copy and pasting the above code into a file  and running  from the parent dir.


Answer URL
https://docs.python.org/3/library/sys.html?highlight=stdin#sys.stdin
