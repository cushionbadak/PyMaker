Natural Text
Presumably dict_keys are supposed to behave as a set-like object, but they are lacking the  method and the subtraction behaviour seems to diverge.Why does dict_keys class try to iterate an integer here?  Doesn't that violate duck-typing? 
This looks to be a bug. The implementation is to convert the  to a , then call  on it.It looks like they misused  (an optimized variant of ), by passing a format string of just . Thing is,  and friends are documented to require a  format string that "should produce a ". With more than one format code, it wraps the values in a  automatically, but with only one format code, it doesn't , it just creates the value (in this case, because it's already , all it does is increment the reference count).While I haven't tracked down where it might be doing this, I suspect somewhere in the internals it's identifying  calls that don't produce a  and wrapping them to make a one element  so the called function can actually receive the arguments in the expected format. When subtracting a , it's already a , and this fix up code never activates; when passing a , it does, becoming a one element  containing the . takes varargs (as if it were declared ). So when it receives the unwrapped , it thinks it's supposed to subtract away the elements from each entry in the , not treat said entries as values to subtract away themselves. To illustrate, when you do:the bug is causing it to do (roughly):While:does:That's why a  of  works (incorrectly),  is performing a call equivalent to:and since s are iterables of their characters, it just blithely removes entries for , , , etc. instead of  and  like you expected.Basically, this is a bug and (when I get a chance), I'll file it against the CPython folks.The correct behavior probably should have been to call (assuming this  variant exists for this API):which wouldn't have the packing issues at all, and would run faster to boot; the smallest change would be to change the format string to  to force  creation even for a single item, but since the format string gains nothing,  is better.


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_CallMethod
