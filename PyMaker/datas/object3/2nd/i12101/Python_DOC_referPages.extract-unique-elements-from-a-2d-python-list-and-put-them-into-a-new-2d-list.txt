Natural Text
Right now I have a 2D list with three columns and numerous rows, each column contains a unique type of stuff. The first column is UserID, the second column is timestamp, the third column is URL. The list looks like this:As you can see, there are some duplicate URLs, regardless of userID and timestamp. I need to extract those rows which contain unique URLs and put them into a new 2D list. For example, the second row, third row, forth row and fifth row all have the same URL regardless of userID and timestamp. I only need the second row (first one appears) and put it into my new 2D list. That being said, the first row has a unique URL and I will also put it into my new list. The last two rows ( sixth and seventh ) have the same URL, and I only need the sixth row. Therefore, my new list should look like this:I thought about using something like this:but obviously this one does not work, becuase  is an element,  is checking the entire 2D list, ie, checking every row. Codes like this will just create an exact copy of . OR, I could just eliminate those rows having duplicate URLs, because using a for loop plus append operator on a 2D list with one million rows really would take a while.  
A good way of going about this would be to use a set. Go through your list of lists one at a time, adding the URL to the set if it's not already there, and adding the full list containing that URL to your new list. If a URL is already in the set, discard the current list and move to the next one. 
Note: I am assuming that the order of different URLs in the list doesn't matter. In case it does matter, use  instead of default . 
Pull out all of the urls from the original list.  Create a set from this list to generate unique values for the urls.  Use a list comprehension to iterate through this set and use  on the url list generated () to locate the first occurrence of that url.Lastly, use another list comprehension together with  to select rows that have matching index values.
You need to create a function which searches the list for item with the url.Then your new list creation algorithm should look like this.Also, there is no need to create a range. Python  loop iterates by values, so you can write just


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
