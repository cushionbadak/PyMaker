Natural Text
The code I'm running is:I understand what  does, but I'm not sure what  does from ? It seems like the line  is being used to check that  is a dictionary? Wouldn't it just be easier to do?I did some searching and found related comments in this thread: What is the best (idiomatic) way to check the type of a Python variable?, but I'm still having trouble figuring out why using  is preferable here than just using .
collections.abc provide a serie of Abstract Base Classes for containerThis module provides abstract base classes that can be used to test whether a class provides a particular interface; for example, whether it is hashable or whether it is a mapping.they allow you to check if a certain object have a behavior similar to that of the ABC you are checking without care for the actual implementation.For example, say that you have a function F that do something according to the type of the argument, you can check if is a instance of list or tuple or dict or etc directly, and do your job, but that limit you to only have to use those, if you then make your own class that have a similar behavior to say a list, in some case you care about, and want to use it with F, you find it don't work, then you have to modify F to accept your class, but if instead you check against an ABC such modification is unneeded Now a working example: say that you want a function that give all the elements in even position from a list, then you can doand use asno problem there, but then you realize that a tuple is the same that a list in what a this function concern, you can add that check to the function too, and everything is fine, but then your friend told you he want to use your function but he is using a  and then your other friend told... see the pattern here? all the object that I mention (list, tuple, deque) have in common the same thing, and can be used in the same way by that example function, and all that behavior is compress in the ABC, so instead of  you only need  and the function looks likeNow you don't need to know the actual implementation that is in use, only that it have the behavior that you want
The  module provides several abstract base classes that can be used to generically describe the various kinds of data structures in Python. In your example, you test if an object is an instance of the  abstract class, which will be true for many classes that "work like a dictionary" (e.g. they have a  method that takes hashable keys and return values, have ,  and  methods, etc.). Such -like objects might inherit from  but they don't need to.The abstract types in  are implemented using the top level  module.  is ed as a  (which is a subclass of ) and so the  check will accept a dictionary as a  even though  isn't an actual base class for .
 is preferred because it defines abstract api for this type of containers, since  is only an implementation of such a container. Is a bit oversimplified, but this is the key -  is not an interface/abstract/api/... The example of objects that are not a dict instances are MultiDict, widely used in web frameworks (e.g. aiohttp).


Answer URL
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/library/abc.html
