Natural Text
I have a python program with one main thread and let's say 2 other threads (or maybe even more, probably doesn't matter). I would like to let the main thread sleep until ONE of the other threads is finished. It's easy to do with polling (by calling t.join(1) and waiting for one second for every thread t). Is it possible to do it without polling, just bywhere t1 and t2 are threading.Thread objects? The call must do the following: sleep 1 second, but wake up as soon as one of t1,t2 is finished. Quite similar to POSIX select(2) call with two file descriptors.
One solution is to use a ;  provides an API almost identical to , but backed by threads, so it gets you a thread pool for free.For example, you can do: returns results as they become available, regardless of which task finishes first.If you can use Python 3.2 or higher (or install the  PyPI module for older Python) you can generalize to disparate task functions by creating one or more s from a , then using  with , or using  for similar effect.
Here is an example of using condition object. I don't think there is race condition as you described in comment. The condition object contains a Lock. When the main thread is working(sleep(1) in the example), it holds the lock and no thread can notify it until it finishes its work and release the lock.I just realize that there is a race condition in the previous example. I added a global _lock to ensure the condition never notifies the main thread until the main thread starts waiting. I don't like how it works, but I haven't figured out a better solution...
You can create a Thread Class and the main thread keeps a reference to it. So you can check whether the thread has finished and make your main thread continue again easily.If that doesn't helped you, I suggest you to look at the Queue library!


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.imap_unordered
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait
https://docs.python.org/3/library/threading.html#condition-objects
