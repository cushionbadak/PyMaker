Natural Text
So i made a functionso, what this does is that it takes a string, splits it, and produces a dictionary with the key being the word, and the value being how many times it appears.Okay, so what im trying to do now, is to make a function that takes the output of that function, and produces a list in the following format-((list of words longer than 1 letter),(list of most frequent words), (list of words with the longest length))also, for example lets say two words have appeared 3 times, and both words are 6 letters long, it should include both words in both the (most frequent) and (longest length) lists.So, this has been my attempt thus far at tackling this problemso what i was trying to do here, is make a series of for and if loops, that append to the lists depending on whether or not the items meet the criteria, however i have run into the following problems:-1- how do i iterate over a dictionary without getting an error?2- I cant figure out a way to count the most frequent words (i was thinking to append the keys with the highest values)3- I cant figure out a way to only append the words that are the longest in the dictionary (i was thinking of using len(key) but it said error)If it's any help, im working in Anaconda's Spyder using Python 3.5.1 ,any tips would be appreciated!
You really are trying to re-invent the wheel.Imagine you have  which is, well, a list of strings.To get the most frequent word, use :To sort the list by the length:To get the list of words longer than one letter you can simply use your sorted list, or create a new list with only these:To get your output on your required format, simply use all of the above.
Most of your problems are solved or get easier when you use a .Writing  with a :Demo:The  method of a  helps with getting the most frequent words:You can get the words themselves with and a list of words with the longest length this way:
1)To iterate over dictionary you can either use:or if you want to get key and value at the same time use:2)To find most frequent words you have to assume that first word is most frequent, then you look at next word used count and if it's the same you append it to your list, if it's less just skip it, if it's more - clear you list and assume that this one is most frequent3) Pretty much the same as 2. Assume that your first is longest the compare if next one, if it's lenght equals to your current max just append to a list, if it's less skip it, if it's more clear your list and assume that this is your max.I didn't add any code since it's better if you write it your own in order to learn something
There are other nice answers for your question, But I would like to help you in your attempt, I have done few modification in your code to make it working- It seems you haven't attempted for 2nd and 3rd use case.
At first, check :Given that, you can use its  method for the most common words. It produces a list of (word, its_count) tuples.To discover the longest words in the dictionary, you can do:N being the count of largest words you want. This works because by default the iteration over a  produces only the keys, so it sorts them according to the word length () and returns only the N largest ones.But you seem to have fallen deep into Python without going over the tutorial. Is it homework?


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
