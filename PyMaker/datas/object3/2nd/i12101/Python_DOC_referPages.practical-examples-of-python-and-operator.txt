Natural Text
Python has the Truth Value Testing feature for all the objects. Which enables the Boolean Operators a more generic definition that suits for all objects:: if x is false, then y, else x: if x is false, then x, else yI've seen practical use cases for the OR-operator, for example:However, not have I seen any practical example of using the Python AND operator. Here I'm looking for examples of AND operator that takes advantage of the truth value testing like the OR operator example above.
By far the most common use of  in python is just to check multiple conditions:Use cases for  which take advantage of the arguably surprising fact that  returns one of the operands, rather than returning a boolean, are few and far between.  There is almost always a clearer and more readable way to implement the same logic.  In older python code, you can often find the construct below, which is a buggy attempt to replicate the behaviour of C's ternary operator ().It has a flaw: if  is , , , or any kind of falsey value then  would be selected instead, so it is not quite equivalent to the C version.  Below is a "fixed" version:These kind of and/or hacks are mostly obsolete now since python introduced the conditional expression.
The feature used in your exampleis called short circuit evaluation. If this aspect of AND and OR is the subject of your question, you may find this Wikipedia article useful:https://en.wikipedia.org/wiki/Short-circuit_evaluation
I found great examples for both  and  operator in this answer: https://stackoverflow.com/a/28321263/5050657Direct quote from the answer:Python's  operator returns the first Truth-y value, or the last value, and stops. This is very useful for common programming assignments that need fallback values.Like this simple one:...The compliment by using , which returns the first False-y value, or the last value, and stops, is used when you want a guard rather than a fallback.Like this one:
I am sometimes using  when I need to get an attribute of an object if it's not , otherwise get :
Any time you need a statement where two things should be true. For example:Boolean operators, particularly the and, can generally be omitted at the expense of readability. The builtin function  will return true if, and only if, all of its members are true. Similarly, the function  will return true if any of its members are true.Perhaps an easier way of thinking about it is that  would be used in place of successive if-statements whereas  would be used in place of nested if-statements.is functionally identical to:And:is functionally identical to:This can be demonstrated with a simple test.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
