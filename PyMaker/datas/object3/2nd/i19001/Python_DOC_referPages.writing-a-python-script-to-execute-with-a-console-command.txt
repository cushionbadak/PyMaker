Natural Text
Research is at the bottom, read before -1'ing... Thanks.I have to write a Python script that runs SQL queries. I made a main class and called SQLQuery. Each SQLQuery instance represents a query. The script must be structured like this:As a user requirement, the instances must be in the same file as the class (so I can't just make each instance a main and execute that file separately), and each instance must be executed with Linux console commands. I can execute the entire script with a simple python SQLQuery.py but I need to execute each instance separately. The queries will be executed every day, automatically, so I don't need a terminal UI tree. It should be executed with a command similar to this:will execute instance1.will execute instance2.I have researched how to execute Python scripts with Linux commands and most of the articles are about calling commands from the Python script. However, I found this article from the Python documentation. It suggests adding -m, so:This would let me set my main with a console command, but it doesn't work since the instances aren't modules. And since the instances must be in the same file as the class, I can't just import them as a module when I execute SQLQuery.py with a console command.
Ignoring all the irrelevancies, it sounds like your problem is that you have a bunch of global objects named , , , etc., and you want to call some method on one of them based on a command-line parameter whose value will be similar to, but not identical to, the instance names.That's probably not a good idea… but it's not that hard:A much better way to do the same thing is to put the  globals into a list or dict that you can index.For example, let's say instead of , , etc., you've got an  dict, with , , etc. Now instead of this:… you just do this:Also, instead of coming up with a command-line parameter that has extra stuff in it that you have to parse and throw away, and has no more meaning for a human reader than for your code, why not just take a number?Or, alternatively, use  to create an argument that can be used in all of the obvious ways:Either way, your code gets the string , which it can then use to look up the function, as above.
You have the wrong syntax for the  option.  Suppose you have the following file named :Then you would call it like this:Note that the ".py" extension is omitted.  You can then use the command line argument to decide which object to use or use the  or  module to handle the argument.


Answer URL
