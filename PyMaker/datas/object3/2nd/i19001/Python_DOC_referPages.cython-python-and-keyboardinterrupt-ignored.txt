Natural Text
Is there a way to interrupt () a Python script based on a loop that is embedded in a Cython extension?I have the following python script:This runs a loop that is part of a C++ Cython extension.Then, while pressing , the  is thrown but ignored, and the program keeps going until the end of the simulation.The work around I found, is to handle the exception from within the extension by catching the  signal :Then :Can't I make this work from Python, or at least from Cython instead ? As I am about to port my extension under Windows/MinGW, I would appreciate to have something less Linux specific.
You have to periodically check for pending signals, for example, on every Nth iteration of the simulation loop: will run signal handlers installed with signal module (this includes raising  if necessary). is pretty fast, it's OK to call it often. Note that it should be called from the main thread, because Python runs signal handlers in the main thread. Calling it from worker threads has no effect.ExplanationSince signals are delivered asynchronously at unpredictable times, it is problematic to run any meaningful code directly from the signal handler. Therefore, Python queues incoming signals. The queue is processed later as part of the interpreter loop.If your code is fully compiled, interpreter loop is never executed and Python has no chance to check and run queued signal handlers.
If you are trying to handle  in code that releases the GIL (for example, because it uses ), you will need to re-acquire the GIL to call . The following snippet (adapted from @nikita-nemkin's answer above) illustrates what you need to do:
Release GIL when Cython runs parts that do not interface with Python, run loop in the main thread (sleep or check the simulation status), and call  (that can set some flag that your simulation can check periodically) in the  close.
Yes, using the macros  and  from the package :The macros  and  are declared as functions in , and defined as macros in  in terms of the macro  (defined in terms of the functions  and ) and the function . The signal handler for keyboard interrupts () is installed here, and the implementation rationale is outlined here.As of , only POSIX systems are supported. Cython's conditional compilation can be used in order to follow this approach wherever  is available, and allow compiling on non-POSIX systems too (without Ctrl-C working on those systems).In the script :and in the relevant  file:See also this answer.


Answer URL
https://docs.python.org/3/library/signal.html#general-rules
