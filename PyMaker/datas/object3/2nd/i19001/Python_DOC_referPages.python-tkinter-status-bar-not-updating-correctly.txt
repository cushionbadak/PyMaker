Natural Text
I have developed a simple app in Python (2.7) with Tkinter. But my status bar is only sort of working. Here's the stripped down code:Currently what's happening is that the status bar reads "Status: Press 'Fix Files!'" until the program is finished looping through the files, at which point it reads "Status: Working on file: XXXXX.txt" (which is the name of the last file to be opened and closed by the program.I would like the status bar to update with the file name each time the program opens a new file. Any help is appreciated!
The goofy way is to use :To its credit, it is simple, but it does not really work -- although the  gets updated, the Quit button is frozen until  is completed. That's not very GUI-friendly. Here are some more reasons why  and  are considered harmful.So how should we run a long-running task without freezing the GUI?The key is to make your callback functions end quickly. Instead of having a long-running , make a function that runs through the innards of the  once. Hopefully that ends quickly enough for the user to not feel the GUI has been frozen. Then, to replace the , you could use calls to  to call your quick-running function multiple times. The above begs the question, What should we do if our long-running task has no loop? or if even one pass through the loop requires a long time?Here is a way to run the long-running task in a separate process (or thread), and have it communicate information through a queue which the main process can periodically poll (using ) to update the GUI status bar. I think this design is more easily applicable to this problem in general since it does not require you to break apart the .Note carefully that all Tkinter GUI-related function calls must occur from a single thread. That is why the long-running process simply sends strings through the queue instead of trying to call  directly.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
