Natural Text
There is this code:Why  returns  when there is return generator statement? I guess that  and generator expression both returns generators (at least when the statement  is removed) but are there some other rules of function compilation when there is once generator expression returned and second time when there is  keyword inside?This was tested in Python 3.3
As soon as you use a  statement in a function body, it becomes a generator. Calling a generator function just returns that generator object. It is no longer a normal function; the generator object has taken over control instead.From the  expression documentation:Using a  expression in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.When a generator function is called, it returns an iterator known as a generator. That generator then controls the execution of a generator function. The execution starts when one of the generatorâ€™s methods is called.In a regular function, calling that function immediately switches control to that function body, and you are simply testing the result of the function, set by it's  statement. In a generator function,  still signals the end of the generator function, but that results in a  exception being raised instead. But until you call one of the 4 generator methods (, ,  or ), the generator function body is not executed at all.For your specific function , you have a regular function, that contains a generator. The function itself is nothing special, other that that it exits early when  is executed. The generator expression on the next line stands on its own, it does not influence the function in which it is defined. You can define it without the function:Using a generator expression produces a generator object, just like using  in a function, then calling that function produces a generator object. So you could have called  in  with the same result as using the generator expression: is still a generator function, but using it in  does not make  a generator function too. Only  can do that.
is the same as The second return statement never gets executed, just by having a generator expression within  does not make it a generator.
I believe what you meant is:
Returning a generator doesn't make  a generator function.  A generator is just an object, and generator objects can be returned by any function.  If you want  to be a generator function, you have to use  inside the function, as you did with .


Answer URL
