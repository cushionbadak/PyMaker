Natural Text
At present(May 2013), there are three release versions, all released on may 15python 3.3.2python 3.2.5python 2.7.5I can understand the need for 2.x and 3.x branches but why are there seperate 3.3.x and 3.2.x versions?
In this link is says .And if you look here it says:Python 3.2.5 was released on May 15th, 2013. This release fixes a few regressions found in Python 3.2.4, and is planned to be the final 3.2 series bug-fix release.So you should use 2.7.5 or 3.3.2, but if you need (I don't know why) 3.2.* you have a bug-fixed version.
As wim points out, 3.2.5 is not a current production version, but I assume you're wondering why there were three versions released on 15 May 2013? That is why is the 3.2.x branch still being maintained? Remember that each 3.n step introduces new features while 3.n.x releases are fixes to existing versions. 3.2.5 is thus a set of bugfixes to 3.2.4 while the 3.3.x branch includes new features not present in 3.2.4. Because new features are, inherently, more likely to introduce new bugs, the maintenance of the older branch allows you a higher stability choice if, for example, you're just putting together a new public release of your webserver and don't want to risk new bugs being introduced by the current branch.
This is a question of python's versioning strategy. Quote from python's wikipedia article:CPython's public releases come in three types, distinguished by which  part of the version number is incremented:Backwards-incompatible versions, where code is expected to break  and must be manually ported. The first part of the version number is  incremented. These releases happen infrequentlyâ€”for example, version  3.0 was released 8 years after 2.0.  Major or "feature" releases, which are largely compatible but introduce new features. The second  part of the version number is incremented. These releases are  scheduled to occur roughly every 18 months, and each major version is  supported by bugfixes for several years after its release.Bugfix releases, which introduce no new features but fix bugs. The  third and final part of the version number is incremented. These  releases are made whenever a sufficient number of bugs have been fixed  upstream since the last release, or roughly every 3 months. Security  vulnerabilities are also patched in bugfix releases.So, 3.3 compared to 3.2 introduced new major features, that's why it's in a separate "branch".Also see:Python 3.2 Release SchedulePython 3.3 Release SchedulePython 3.4 Release Schedule
You should read bit about version numbers. The last digit means, simplified, no new features only bug fixes. So folks who use Python 3.2 can installed a newer revision without changing anything in the behavior of Python.


Answer URL
