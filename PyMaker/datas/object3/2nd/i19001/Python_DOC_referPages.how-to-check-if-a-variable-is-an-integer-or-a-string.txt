Natural Text
This question already has an answer here:How can I check if a string represents an int, without using try/except?                    15 answers                I have an application that has a couple of commands.When you type a certain command, you have to type in additional info about something/someone.Now that info has to be strictly an integer or a string, depending on the situation.However, whatever you type into Python using raw_input() actually is a string, no matter what, so more specifically, how would I shortly and without try...except see if a variable is made of digits or characters?
In my opinion you have two options:Just try to convert it to an , but catch the exception:This is the Ask Forgiveness approach.Explicitly test if there are only digits in the string: returns  only if all characters in the string are digits (-).The  / Python 3  type equivalent is  / ; only Unicode decimals can be converted to integers, as not all digits have an actual integer value (U+00B2 SUPERSCRIPT 2 is a digit, but not a decimal, for example).This is often called the Ask Permission approach, or Look Before You Leap. The latter will not detect all valid  values, as whitespace and  and  are also allowed in  values. The first form will happily accept  as a number, the latter won't.If your expect that the user normally will input an integer, use the first form. It is easier (and faster) to ask for forgiveness rather than for permission in that case.
if you want to check what it is:if you want to get ints from raw_input
The  method of the  type returns  iff the given string is nothing but one or more digits.  If it's not, you know the string should be treated as just a string.
Depending on your definition of shortly, you could use one of the following options:use a regexuse  which is kind of the opposite of 
Don't check. Go ahead and assume that it is the right input, and catch an exception if it isn't.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdecimal
