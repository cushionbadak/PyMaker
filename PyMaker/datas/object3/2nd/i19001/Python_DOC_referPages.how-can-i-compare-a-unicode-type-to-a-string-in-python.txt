Natural Text
I am trying to use a list comprehension that compares string objects, but one of the strings is utf-8, the byproduct of json.loads.  Scenario:Part one of my question, is why does this return False? :Part two - how can I compare within a list comprehension?EDIT:  I'm using Google App Engine, which uses Python 2.7Here's a more complete example of the problem:
You must be looping over the wrong data set; just loop directly over the JSON-loaded dictionary, there is no need to call  first:You may want to use  to avoid implicit conversions between Unicode and byte strings:Both versions work fine:Note that in your first example,  is not a UTF-8 string; it is unicode data, the  library has already decoded it for you. A UTF-8 string on the other hand, is a sequence encoded bytes. You may want to read up on Unicode and Python to understand the difference:The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) by Joel SpolskyThe Python Unicode HOWTOPragmatic Unicode by Ned BatchelderOn Python 2, your expectation that your test returns  would be correct, you are doing something else wrong:There is no need to encode the strings to UTF-8 to make comparisons; use unicode literals instead:
You are trying to compare a string of bytes () with a string of Unicode code points ().  This is an "apples and oranges" comparison.  Unfortunately, Python 2 pretends in some cases that this comparison is valid, instead of always returning :It's up to you as the designer/developer to decide what the correct comparison should be.  Here is one possible way:I recommend the above instead of  because all  style strings can be encoded into bytes with UTF-8, except possibly in some bizarre cases, but not all byte-strings can be decoded to Unicode that way.But if you choose to do a UTF-8 encode of the Unicode strings before comparing, that will fail for something like this on a Windows system: .  But if you  instead it would succeed.  That's why it's an apples and oranges comparison.
I'm assuming you're using Python 3.  returns  because the  function is returning a bytes object:In Python 3, strings are already Unicode, so the  is superfluous.


Answer URL
