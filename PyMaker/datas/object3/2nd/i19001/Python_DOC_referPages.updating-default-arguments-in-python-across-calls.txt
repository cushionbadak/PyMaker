Natural Text
This question already has an answer here:“Least Astonishment” and the Mutable Default Argument                    32 answers                In the following function L stores the values during every call.For example, if I call , L is now . When I call it again the previous L is appended with the new value. So now L is .But in this function:No matter how many times I call this function, the argument is still  - it does not remain updated between calls.What is the reason why this does not get updated but the list does?
This is a good question. The reason why this happens is because the default arguments to functions are stored as single objects in memory, not recreated every time you call the function.So when you have a list  as a default argument, there will only be one list forever for the duration of that program. So when you add to the list you are adding to that one copy of the list. This is still true for numbers like . However, numbers are immutable in Python, and so when you alter a default argument that starts at a number, you're really making it point to a new number and not editing that  object, whereas many operations on lists mutate the list in place rather than returning a new list.http://docs.python.org/3/tutorial/controlflow.html#default-argument-valuesImportant warning: The default value is evaluated only once. This  makes a difference when the default is a mutable object such as a  list, dictionary, or instances of most classes.The recommended solution, if you need the behaviour of an empty list default argument without having the same empty list default argument every call to the function, is to do this:The creation of an empty list is now evaluated on individual calls to the function - not once.
 is different from .  The first changes the array but the array stays the same object (the same but not equal).  The latter on the other hand assigns a totally new value to a variable.  It does not change any object (ints aren't mutable anyway).


Answer URL
