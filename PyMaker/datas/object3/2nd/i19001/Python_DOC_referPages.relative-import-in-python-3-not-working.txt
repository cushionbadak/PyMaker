Natural Text
I have the following directory:I have a function f defined in file1.py.If, in file2.py, I doI get the following error:SystemError: Parent module '' not loaded, cannot perform relative  importWhy? And how to make it work?
since  and  are in the same directory, you don't even need to have an  file.  If you're going to be scaling up, then leave it there.To import something in a file in the same directory, just do like thisi.e., you don't need to do the relative path  because they are in the same directory.If your main function, script, or whatever, that will be running the whole application is in another directory, then you will have to make everything relative to wherever that is being executed.
Launching modules inside a package as executables is a bad practice.When you develop something you either build a library, which is intended to be imported by other programs and thus it doesn't make much sense to allow executing its submodules directly, or you build an executable in which case there's no reason to make it part of a package.This is why in  you distinguish between packages and scripts. The packages will go under  while the scripts will be installed under  (or similar location depending on the OS).My recommendation is thus to use the following layout:Where  imports  as any other code that wants to use the library , with an absolute import:When you write a  script for the project you simply list  as a package and  as a script and everything will work. No need to fiddle with .If you ever, for some reason, really want to actually run a submodule of a package, the proper way to do it is to use the  switch:This loads the whole package and then executes the module as a script, allowing the relative import to succeed.I'd personally avoid doing this. Also because a lot of people don't even know you can do this and will end up getting the same error as you and think that the package is broken.Regarding the currently accepted answer, which says that you should just use an implicit relative import  because it will work since they are in the same directory:This is wrong! It will not work in python3 where implicit relative imports are disallowed and will surely break if you happen to have installed a  module (since it will be imported instead of your module!).Even if it works the  will not be seen as part of the  package. This can matter. For example if  uses , the name of the package is important for proper loading/unloading of data.
When launching a python source file, it is forbidden to import another file, that is in the current package, using relative import. In documentation it is said:Note that relative imports are based on the name of the current module. Since the name of the main module is always "__main__", modules intended for use as the main module of a Python application must always use absolute imports.So, as @mrKelley said, you need to use absolute import in such situation.
Example to import from one file to anotherImport the package example to the mainscripthttps://docs.python.org/3/tutorial/modules.html#packageshttps://docs.python.org/3/reference/import.html#regular-packageshttps://docs.python.org/3/reference/simple_stmts.html#the-import-statementhttps://docs.python.org/3/glossary.html#term-import-pathThe variable sys.path is a list of strings that determines the interpreterâ€™s search path for modules. It is initialized to a default path taken from the environment variable PYTHONPATH, or from a built-in default if PYTHONPATH is not set. You can modify it using standard list operations:Inserting it at the beginning has the benefit of guaranteeing that the path is searched before others (even built-in ones) in the case of naming conflicts.


Answer URL
https://docs.python.org/3/tutorial/modules.html#packages
https://docs.python.org/3/reference/import.html#regular-packages
https://docs.python.org/3/reference/simple_stmts.html#the-import-statement
https://docs.python.org/3/glossary.html#term-import-path
