Natural Text
I would like to generate uniformly distributed random numbers between 0 and 0.5, but truncated to 2 decimal places.without the truncation, I know this is done bycould anyone help me with suggestions on how to generate random numbers up to 2 d.p. only? Thanks!
A  cannot be truncated (or rounded) to 2 decimal digits, because there are many values with 2 decimal digits that just cannot be represented exactly as an IEEE double.If you really want what you say you want, you need to use a type with exact precision, like .Of course there are downsides to doing that—the most obvious one for  users being that you will have to use , with all of the compactness and performance implications. But it's the only way to actually do what you asked for.Most likely, what you actually want to do is either Joran Beasley's answer (leave them untruncated, and just round at print-out time) or something similar to Lauritz V. Thaulow's answer (get the closest approximation you can, then use explicit epsilon checks everywhere).Alternatively, you can do implicitly fixed-point arithmetic, as David Heffernan suggests in a comment: Generate random integers between 0 and 50, keep them as integers within , and just format them as fixed point decimals and/or convert to  when necessary (e.g., for printing results). This gives you all of the advantages of  without the costs… although it does open an obvious window to create new bugs by forgetting to shift 2 places somewhere.
decimals are not truncated to 2 decimal places ever ... however their string representation maybe
How about this?That is, create random integers between 0 and 50, and divide by 100.EDIT:As made clear in the comments, this will not give you exact two-digit decimals to work with, due to the nature of float representations in memory. It may look like you have the exact float  in your array, but it definitely isn't exactly . But it is very very close, and you can get it closer by using a "double" datatype instead.You can postpone this problem by just keeping the numbers as integers, and remember that they're to be divided by 100 when you use them.Then at least the roundoff won't happen until at the last minute (or maybe not at all, if the numerator of the equation is a multiple of the denominator).
I managed to find another alternative:


Answer URL
