Natural Text
Why does my python OrderedDict get initialized 'out of order'?The solution here is less intriguing than the explanation.   There's something here I just don't get, and perhaps an expanation would help others as well as me.
From the docs:The OrderedDict constructor and  method both accept keyword arguments, but their order is lost because Python’s function call semantics pass-in keyword arguments using a regular unordered dictionary.So initialization loses the ordering, because it's basically calling a constructor with .Edit: In terms of a solution (not just an explanation)—as pointed out in a comment by the OP, passing in a single list of tuples will work:This is because it's only getting a single argument, a list.
@Chris Krycho gave a good explanation of why things fail. If you look at the repr() of an OrderedDict you get a hint at how to impart order from the beginning: You need to use a list of (key, value) pairs to preserve the order of the keys given by the list.Here's one I did earlier:(It just so happened that in Python v3.3.0 your original example of  kept the keys in their original order from the outset. I changed to  to get arounf this).
As the other answers have mentioned, trying to pass a dict to OrderedDict or using keyword arguments doesn't preserve the order.  Passing in tuples is kinda ugly, though, and this is Python.  It should be beautiful.You can abuse  on a class in order to have dict-like syntax for creating OrderedDict "literals":Now you can use dict-like syntax to create an OrderedDict:This works because inside the square brackets, Python creates slice literals, which happen to look like dict syntax if you squint a little.The  class could benefit from error checking, but this demonstrates how it can work.


Answer URL
https://docs.python.org/3/library/functions.html#slice
