Natural Text
I would like to get a python list, say, , from a C++ script. I wrote the C++ script, which returns a vector.How to connect the ends without SWIG/SIP/Cython/and others?Could it be easier to just compile the C++ to an .exe or elf file and then call from command line, have the .exe create a .txt containing a vector and read it in with python?My point is, I only need a really small function from C++ to do the heavy calculations on huge data. What would be the least painful and shortest method to do just this? EDIT:To give an example. Python will give a filename string to C++ ("foo.txt"), which will then read the context of the file (200,000 rows by 300 columns), count the missings and then return to Python the amount of missings per row. This yields a list of 200,000 numbers. How to have this communication between both of them? Just for completeness, this is what I am still wondering about how to go about:Pass python filename string to C++Receive python string in C++DONE Create vector in C++                    Return vector to PythonReceive vector in Python
This is probably moot now, and I posted something similar on your other question, but I've adapted this version for Python 3.3 and C++ rather than Python 2.7 and C.If you want to get back a Python list object, and since you're building a list which could potentially be very long (200,000 items), it's probably more efficient to build the Python list in the C++ code, rather than building a  and then converting that to a Python list later on.Based on the code in your other question, I'd suggest using something like this......compiled with......and an example of usage......although if you need to convert an existing  to a Python list, you can pre-allocate the memory needed by the Python list by passing the length of the vector into , and then use  instead of .The only other methods I can think of would be...To pre-allocate a block of RAM in Python, and have the C++ function fill in the values, like in qarma's answer, but you'd have to know in advance how much RAM to allocate. You could just pick an arbitrary value, but given that the number of lines in the file isn't known in advance, this number may be way too large or way too small.To heap-allocate the  in C++, and return a pointer to the first element, and the number of elements, but you'd have to write a second function to free the RAM once you were done with it.Either way, you still have the overhead of converting the 'returned' array into a Python list, so you may as well do it yourself.
Define your entry point  and use .Here's an example to get you started, data is passed from Python, C++ code sorts the data, and Python gets back the result:Compile your code into a shared object (libxxx.so on linux, libxxx.dll on win, libxxx.dylib on osx), then load it dynamically and pass data in/out via ctypes:Great thing about  is that it's bundled with Python since 2.5, you don't need any additional libraries.If you want to use something more advanced, have a look at .
You're on the right track.Do you have two executables going?Better would be to save it to an intermediate file. Lock the file, write to it from your C++ code. Unlock and read it from Python.If you just want to run from python, you can always look into extending python:Extending Python with C++There's also the option of doing it through sockets, though this may be a bit of overkill if all you want to do is pass lists.
You can use the subprocess module in python to read the output from your c++ exe file.For example:c++ file:then your python script will be:
You can work with strings in the interprocess communication:use the subprocess.check_output() function in Python to check the C++ program's output, and pass the filename as an argument:Python's code:C++ code:EDIT: to add the timers and to replace "ast.literal_eval()" with "eval()", because in fact eval() in this case is faster and it is compatible with python 3.3.


Answer URL
