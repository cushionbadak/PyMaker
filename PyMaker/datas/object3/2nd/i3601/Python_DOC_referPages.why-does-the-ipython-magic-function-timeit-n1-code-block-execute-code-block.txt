Natural Text
I am trying to run a particular test multiple times in  using the magic function. For demonstration purposes, I will just use  instead of here, and use a simple  function. The  and the  help says the following: However, if I do the following:orit actually prints  7 times in a row as followsI was expecting that because of the definition of / it wouldrun the  or  just once.I have read this post: https://stackoverflow.com/a/45375047/4752883which gives some examples of how  runs and the actual source code of  magic function here: https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L944where they define 2 types of loops: 1)  and 2) . If I just use , it seems that it also assumes that I have used , i.e. defaults to . This means that even though I want it to run forexactly 1 run, it will still run the  7 times as perhttps://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L1021unless I also specify .Questions:Why are there 2 different ways to running the  using  and?What is the difference between  and  and why is thisnecessary?
These parameters are also in the timeit module. determines how many times you run the function (or block, or whatever) inside the timing window.  So the stopwatch starts, the code is run  times, then the stopwatch ends.  You should run it enough times that the results are meaningful ( defaults to powers of 10 until 0.2 seconds have elapsed). determines how many of these repetitions (where repetition is "start timer, run n times, stop timer") you should do.  There is always some error due to your CPU scheduling other processes, etc., so usually you want to run it a few times and the best value of these  times is taken.  ( defaults to 3, and the comments in the source you link indicate that ipython does the same -- but the actual code may disagree).In pseudo-python, you can see how  and  affect the timing process:


Answer URL
https://docs.python.org/3/library/timeit.html
