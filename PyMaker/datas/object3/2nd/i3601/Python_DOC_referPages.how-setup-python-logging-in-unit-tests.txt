Natural Text
How do I set up logging in a Python package and the supporting unit tests so that I get a logging file out that I can look at when things go wrong?Currently package logging seems to be getting captured by nose/unittest and is thrown to the console if there is a failed test; only unit test logging makes it into file.In both the package and unit test source files, I'm currently getting a logger using:In the unit test script I have been trying to set up log handlers using the basic FileHandler, either directly in-line or via the setUp()/setUpClass() TestCase methodsAnd the logging config, currently set in the Unit test script setUp() method.The log in the last line does end up in the file but this configuration clearly doesn't filter back into the imported package being tested.
Logging objects operate in a hierarchy, and log messages 'bubble up' the hierarchy chain and are passed to any handlers along the way (provided the log level of the message is at or exceeds the minimal threshold of the logger object you are logging on). Ignoring filtering and global log-level configurations, in pseudo code this is what happens:Where handlers are actually responsible for putting a log message into a file or write it to the console, etc.The problem you have is that you added your log handlers to the  logger, where  is the current package identifier. The  separator in the package name are hierarchy separators, so if you run this in, say,  then only the loggers in  and contained modules are being sent to this handler. Any code outside of  will never reach these handlers.Your log object hierarchy is something akin to this:then only log objects in  and  will see the same handlers.You can move your logger to the root logger instead, with  or  (no name argument or the name set to ). All loggers are child nodes of the root logger, and as long as they don't set the  attribute to , log messages will reach the root handlers.The other options are to get the  logger object explicitly, with , or always use a single, explicit logger name throughout your code that is the same in your tests and in your library.Do take into account that Nose also configures handlers on the root logger.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Logger.propagate
