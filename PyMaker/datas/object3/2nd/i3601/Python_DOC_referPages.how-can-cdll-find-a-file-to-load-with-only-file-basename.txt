Natural Text
On Lubuntu 18.04I didn't specify path for libc.so.6, so how can  find its file to load?Originated from Why does loading the libc shared library have "'LibraryLoader' object is not callable" error?
That is because  (or  or anything else from from [Python]: ctypes - A foreign function library for Python - and things can be expanded even more) uses the "native library loading system" in order to deal with library (searching and) loading (including dependencies). On Ux systems, that is typically accomplished by the dynamic linker/loader.Now, I assume that you're wondering why e.g. "/lib/x86_64-linux-gnu/libc.so.6" is found, even though "/lib/x86_64-linux-gnu" is not in ${LD_LIBRARY_PATH}.From [man7]: LD.SO(8):The program ld.so handles a.out binaries, a format used long ago; ld-linux.so* (/lib/ld-linux.so.1 for libc5, /lib/ld-linux.so.2 for glibc2) handles ELF, which everybody has been using for years now. Otherwise, both have the same behavior, and use the same support files and programs as ldd(1), ldconfig(8), and /etc/ld.so.conf.From [man7]: LD(1):The linker uses the following search paths to locate required shared libraries:       ...      8. For a native linker on an ELF system, if the file /etc/ld.so.conf exists, the list of directories found in that file.Example on my VM:Since it's libc related, also check [SO]: How does ctypes.cdll.LoadLibrary(None) work? (@CristiFati's answer) in order to use the already loaded libc version (and avoid possible conflicts), if libc isn't linked statically.


Answer URL
https://docs.python.org/3/library/ctypes.html#module-ctypes
