Natural Text
When I share a global List variable between processes, I find that the variable IDs are the same (Not like string variable, the ID is different). I'm curious if the ID are the same, how each process can set the value separately? When the child process sets the value to , how can the parent process still keep the value  unchanged? Here is the output:
Simply because they are different processes!C Python says that the id of a variable is the address where the variable is located (but even this is an implementation detail). But modern systems use virtual memory: the OS gives memory pages to each process and uses a mapping between virtual addresses used by the processes and the physical memory addresses. As all your processes are clones of each other (I assume fork on Linux or other Unix-like) the virtual memory addresses are the same for all the processes while each point to a distinct set of physical pages.So every process sees its own copy of the list at the same (virtual) address but they are still different copies stored at different physical addresses.If you want to share state between different processes using the  module, you can use shared memory with  or , or a  to hold a list and  to access it. More details in the reference doc.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
