Natural Text
I am using Python to build a parser for a file format that has many types of small chunks. Although I expect my own parsing to be sufficient, I'd like to let clients subclass the parser class to provide custom behavior if they need to.In C++, I could write something like this:As this might not be familiar to people who don't write a lot of C++: , in this example, is a "pointer-to-member" to a  method which accepts a  argument.  applies the method  to  and passes it the  parameter. Note that this respects virtual dispatch: with a subclass of  that overrides ,  (when  is ), the subclass's implementation will be called.In Python, I can write something like this:However,  is a reference to 's implementation of , specifically. Even if I call it on a subclass of  that overrides it, what is called is still the original implementation.Is there a way, in Python, to get a "method reference" that respects virtual dispatch? I can make per-instance tables that use , but that seems wasteful.
The closest thing to a method reference is basically just a string containing the method's name. You can use that name to look up the method on the parser object with  and then call it:Alternatively, you can use proxy functions that call the corresponding methods:
It's not a bound method, but the performance overhead is pretty minimal:If you don't want to be tied to a specific argument signature, you can write:Better yet, if  returns a string such as , you can just write:without the list of methods at all.
So you would use pointer to members in C++. The closest in Python would be to have an instance attribute that will receive a bound method. Here is some code demonstrating it:prints as expected:This allows different instances of A to have  invoke different methods.Anyway, as you are asking for an idiomatic way, this is not very Pythonic. But what is not Pythonic is a dispatcher on an integer (the enum or index array) while Python natively allows to dispatch by names:outputs


Answer URL
https://docs.python.org/3/library/functions.html#getattr
