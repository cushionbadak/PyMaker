Natural Text
I'm trying to read in a PDF source file, and append each individual byte to an array of 8-bit integers. This is the slowest function in my program, and I was wondering if there was a more efficient method to do so, or if my process is completely wrong and I should go about it another way. Thanks in advance!
A  object is already a sequence of 8-bit integers:If you want to convert it to a different kind of sequence, like a , just call the constructor:Or, if you need to do it a chunk at a time for some reason, just pass the whole chunk to :However, the most efficient thing to do is just leave it in a :… or, if you need it to be mutable, use :1… or, if there's any chance you could benefit from speeding up elementwise operations over the whole array, use NumPy:Or, don't even  the file in the first place and instead  it, then use the  as your sequence of integers.2For comparison, under the covers (at least in CPython):A  (or , or , or , etc.) is stored as an array of 8-bit integers. So, 1M bytes takes 1MB.A  will have a bit of extra slack at the end, increasing the size by about 6%. So, 1M bytes takes 1.06MB.A general-purpose sequence like a  or  is stored as an array of pointers to objects wrapping the 8-bit integers. The objects don't matter (there's only going to be one copy for each of the 256 values, no matter how many references there are to each), but the pointers are 8 bytes (4 bytes in 32-bit builds). So, 1M bytes takes 8MB.A  has the same extra slack as , so it's 8.48MB.A  is like a  or  as far as virtual memory goes, but any pages that you haven't read or written may not be mapped into physical memory at all. So, 1M bytes takes at most 1MB, but could take as little as 8KB.1. You can speed this up. If you pre-extend the  4K at a time—or, even better, pre-allocate the whole thing, if you know the length of the file—you can  a  over a slice of the . But this is more complicated, and probably not worth it—if you need this, you should probably have been using either numpy or an .2. This does mean that you have to move all your -using code inside the , or otherwise keep the file open as long as you need the data. Because the file itself is the storage for your "array"; you haven't copied the bytes into different storage in memory.


Answer URL
https://docs.python.org/3/library/stdtypes.html#binaryseq
https://docs.python.org/3/library/mmap.html
https://docs.python.org/3/library/io.html#io.RawIOBase.readinto
https://docs.python.org/3/library/stdtypes.html#binaryseq
