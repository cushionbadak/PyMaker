Natural Text
I need to be able to open a document using its default application in Windows and Mac OS. Basically, I want to do the same thing that happens when you double click on the document icon in Explorer or Finder. What is the best way to do this in Python?
In Mac OS, you can use the "open" command.  There is a Windows API call that does something similar, but I don't remember it offhand.UpdateOkay, the "start" command will do it, so this should work.Mac OS/X:Windows:Much later update by Edward: os.system works, but it only works with filenames that don't have any spaces in folders and files in the filename (e.g. A:\abc\def\a.txt).Later UpdateOkay, clearly this silly-ass controversy continues, so let's just look at doing this with subprocess. and  are command interpreter things for Mac OS/X and Windows respectively.  Now, let's say we use subprocess.  Canonically, you'd use:Now, what are the advantages of this?  In theory, this is more secure -- but in fact we're needing to execute a command line one way or the other; in either environment, we need the environment and services to interpet, get paths, and so forth.  In neither case are we executing arbitrary text, so it doesn't have an inherent "but you can type " problem, and IF the file name can be corrupted, using  gives us no protection.It doesn't actually give us any more error detection, we're still depending on the  in either case.  We don't need to wait for the child process, since we're by problem statement starting a separate process."But  is preferred."  However,  is not deprecated, and it's the simplest tool for this particular job.Conclusion: using  is the simplest, most straightforward way to do this, and is therefore a correct answer.
Use the  module available on Python 2.4+, not , so you don't have to deal with shell escaping.The double parentheses are because  wants a sequence as its first argument, so we're using a tuple here. On Linux systems with Gnome there is also a  command that does the same thing, but  is the Free Desktop Foundation standard and works across Linux desktop environments.
I prefer:Note that this module supports filenames that have spaces in their folders and files e.g. (python docs) 'open' does not have to be added (it is the default).  The docs specifically mention that this is like double-clicking on a file's icon in Windows Explorer.This solution is windows only.
Just for completeness (it wasn't in the question), xdg-open will do the same on Linux.

If you have to use an heuristic method, you may consider .It's standard library and despite of its name it would also try to open files:Note that on some platforms, trying to open a filename using this  function, may work and start the operating systemâ€™s associated  program. However, this is neither supported nor portable.  (Reference)I tried this code and it worked fine in Windows 7 and Ubuntu Natty:This code also works fine in Windows XP Professional, using Internet Explorer 8.
Start does not support long path names and white spaces. You have to convert it to 8.3 compatible paths.The file has to exist in order to work with the API call.
If you want to go the  way, it should look like this on Windows:You can't just use:because  is not an executable but a command of the  program. This works:but only if there are no spaces in the FILE_NAME.While  method enquotes the parameters properly, the  command has a rather strange syntax, where:does something else than:The first quoted string should set the title of the window. To make it work with spaces, we have to do:which is what the code on top does.
I am pretty late to the lot, but here is a solution using the windows api. This always opens the associated application.A lot of magic constants. The first zero is the hwnd of the current program. Can be zero. The other two zeros are optional parameters (parameters and directory). 5 == SW_SHOW, it specifies how to execute the app.Read the ShellExecute API docs for more info.
os.startfile(path, 'open') under windows is good because when spaces exist in the directory, os.system('start', path_name) can't open the app correct and when the i18n exist in the directory, os.system needs to change the unicode to the codec of the console in Windows.
on mac os you can call 'open'this would open the file with TextEdit, or whatever app is set as default for this filetype
If you want to specify the app to open the file with on Mac OS X, use this:
On windows 8.1, below have worked while other given ways with  fails with path has spaces in it.By utilizing this and other's answers before, here's an inline code which works on multiple platforms.


Answer URL
https://docs.python.org/3/library/webbrowser.html#webbrowser.open
