Natural Text
I'm currently creating a TCP based reverse shell(client is on remote computer, connects to local server) that can both send and receive files, and also send shell commands through TCP. The programs works fine in every other aspect(eg, receive and send commands, server receive files)most of the time until when I try to send large files(larger than 1 kb I remember)from the server to the client. What happens is when I try to send the large files, after the server is done sending it, the client side crashes for some reason. I cannot even see the error message. I have tried to debug it by displaying the received content on the client side but it seems to receive fine but crashes immediately. I will attach both the client code and the server code for those of you who wants to help. The code is a bit weird because I added some "flags" during my first debugs. Thank You.Server code:Client Code:The problem is just the file transfer.
Python Socket TCP connection size limit?Your are actually asking the wrong question. The real problem is that TCP is a streaming protocol and you are treating it as a message protocol, i.e. you assume in your code that each  on one side will be handled by exactly one  at the peer. Apart from that you assume that  will write the complete buffer given as argument but the documentation clearly states that it does not:Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. Ignoring this means that you might face incomplete "messages" when reading or that you get multiple "messages" (or one fill and one partial or similar) when reading the data. This might for example lead to crashes when trying to unpickle data.But to get to the size limit: it is limited how many data you can actually write within a single . This limit depends on the size of the socket buffer and also on the current state of the socket, i.e. if the socket is already filled or not. If you use ssl sockets it is further limited by the maximum size of a SSL frame. But by itself TCP has no limits on how much data can be transmitted, but you need multiple writes to the socket if you deliver many data.The client program contains a keylogger, which is for now useless because I haven't created a command to activate it yet, so you can just ignore that.It helps a lot when debugging a problem yourself or asking others to help you debugging it, if you throw everything away which is not actually needed to reproduce the problem. See How to create a Minimal, Complete, and Verifiable example.
You generally can't assume that socket reads fill the buffer, or that socket writes send the entire amount of data specified.In general you should not load entire files into memory: you should employ a copy-loop with a reasonable buffer size, say 8K. 


Answer URL
https://docs.python.org/3/library/socket.html#socket.socket.send
