Natural Text
Sometimes when writing python software I end up in a situation in which I am not sure whether to use a function with sub functions, or just a class. In these cases, I have a series of distinct inputs, I want to apply some transform to them and then produce a distinct output. And I don't much care about any of the variables that are created in the process of going from inputs to outputs. So it feels like it should be a simple function in this sense rather than a Class. But for these cases, its also quite a complex series of operations that are involved, often with a need for sub functions that are only useful in the process of transforming the inputs to outputs and not in any more general sense.And at the end of the day, I usually just want to call it using:So I can do something likeBut then co-worker X might come along and say, wow that looks like a pretty complex function, you should use a class! OR I could do this But, this seems to be like an odd use for a class because I don't really care about creating and maintaining instances of the class. A major advantage of using classes here though is that you can more easily test subfunc1 and  and this alone might be sufficient reason to use one.However, as I'm still new to programming can someone suggest the best possible solution for a production environment and/or the solution that is generally most pythonic? 
@wwii's comment is the right answer.To elaborate, you are correct in your intuition that it might not be pythonic to create a class that will function as a singleton - modules are the preferred way to do this (here's an oblique reference in the programming faq).You are also correct that it is good to be able to test your subfunctions. One other reason to pull them out of the function body is because Python, as an interpreted language, will otherwise rebuild the subfunction inside every time that your outer function is called.Benjamin Gleitzman's glorious howdoi module (the link is to his github repo) is a beautiful example of how to break out a complex problem into small, very readable pieces -- following the PEP 8 philosophies that "flat is better than nested" and "simple is better than complex"editHere's an example of a simple module (python tutorial on modules) that can mask your internal functions. The structure is:in :in :And to use it:


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules
https://docs.python.org/3/tutorial/modules.html
