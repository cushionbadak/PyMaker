Natural Text
In Python 3.x, say a variable contains a very long list. Once I know I no longer need this list, does setting the variable to None free up the memory?This is what I mean:I know that the example above could use an iterator instead, but let's assume the list actually contains relevant data.
It decrements the list's reference count, and if it becomes zero, GC will eventually collect the list.
In CPython (the standard Python interpreter), reference counting is the primary means of automatic memory management. Which means that the memory used by an object is immediately freed when there are no references to it. In your example, if the list has only the name , then the memory it uses is freed immediately when  is set to  (or any other value, in fact). You can also  to remove the name entirely, to similar effect. Not only the list but all its contents (assuming there are no other references to individual items) are freed.There are a couple of caveats. First, if an object contains a reference to itself, or to another object that refers back to the first object (etc.) its reference count never reaches zero even when all its names are deleted, so it won't be freed automatically by this process.In this case, the list named  contains a reference to itself, so the last line does not free the memory used by the list, because its reference count does not reach zero when that happens. Python has a garbage collector that is run periodically to find and free such structures that refer only to themselves (or cyclic structures that mutually refer to each other) and that cannot be reached from any namespace.The other caveat is that freed memory is made available again for use by your Python script, but it may not be released back to the operating system immediately, or ever.Finally, some objects are never freed: small integers (range -5 to 255), interned strings, empty tuples. These objects are the same instance any time you use them (instead of creating new instances) so they are kept around.Other Python implementations may use other memory management strategies. Jython runs on the Java virtual machine and uses the JVM's memory management; ditto for IronPython and the Microsoft .NET CLR.


Answer URL
https://docs.python.org/3/library/gc.html#gc.collect
