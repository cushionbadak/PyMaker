Natural Text
I started off learning programming/OOP in PHP. To the best of my knowledge of best practices in PHP, you can instantiate a class without parenthesis if it does not take any arguments.Such as As opposed to:I am starting to expand my skills into python and wasted about 5 hours yesterday trying to figure out why a function wouldn't pass an argument even though it was ridiculously simple. My Code:Can someone please help me understand why in Python you need to instantiate a class with parenthesis even if there are no constructor arguments other than . Also, why did the  still kind of work, but it did not behave as I wanted it to? As in it was loaded, and the functions "did things", but it would not seem to accept arguments. Is there any advantages of instantiating a class without its parenthesis?Please note, I do not need help getting this code to work, I just want to understand why this happens.
Can someone please help me understand why in Python you need to instantiate a class with parenthesis even if there are no constructor arguments other than self.The reason is simple: when you instantiate an object, you are actually calling its class (which is itself an object), and you call objects using . In python, everything is a first-class object, even classes (and functions!) themselves. In order for a class to be a first class object, it follows that the class needs its own class (metaclass) to define its behavior. We call the class of a class "metaclass" so as to avoid confusion when talking about classes and classes of classes. To answer the second part of your question: "things" were happening when you used  instead of  because  is a full-fledged object, just like any other object. So you might ask: what is the class - actually the metaclass - of the  object? As you know, you can create a class like this: When you do this, you are in actuality creating a new instance of the metaclass known as . Note that you can create the same class this way; there is literally no difference between the below and the above: The  metaclass is the base metaclass of all classes. All python "new style classes" (not so "new" anymore since they were implemented in python 2.1, I believe) are of the class :Interestingly enough,  is even its own metaclass:So to reiterate: the class  is actually an instantiation of . It follows, then, that calling the class results in running the  method of its metaclass. When you do: ...you are calling , which results (in the background) in running the method . This is the case with all user defined classes, btw; if you include the  method in your class, your class is callable, and the  method is executed when you call class instances: You can see this in action. If you create your own metaclass by subclassing , you can cause things to happen when an instance of the class based on your custom metaclass is created. For example: Now when you do , you can see that the  method of  happens before anything else (including before  AND before ). 
Because function calls require . When you do , you are calling . The expression  evaluates to the class itself, which is an object.


Answer URL
https://docs.python.org/3/library/functions.html#type
