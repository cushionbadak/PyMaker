Natural Text
I am developing an application where I need to search and substitute strings in a body of text.I came across this SO post and have been using the 3rd answer as the basis of my function.My code looks like:However, this gets tripped up by text such as  which fails with a  for .The problem is that in the comparison "INT." gets interpreted as "INT" and any other character as the period is special.I have temporarily fixed the issue using this modified code:Which allows the period to be evaluated literally but maintains the integrity of the dict keys (as opposed to using "INT[.]" as the key which will fail.However, this has a bad smell to it and of course only takes care of the period, and not any other special characters.So, I guess my question would be if there is a better way which works and evaluates any special characters literally.
The cleaner way would be to escape the actual strings, with  before you join them, like thisFor example,


Answer URL
https://docs.python.org/3/library/re.html#re.escape
