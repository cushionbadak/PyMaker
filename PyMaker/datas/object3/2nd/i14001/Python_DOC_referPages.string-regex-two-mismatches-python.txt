Natural Text
How can I extend the code below to allow me to explore all instances where I have 2 mismatches or less between my substring and the parent string?Substring: String-to-match-to: Here is an example where only one possible mismatch is incorporated:Obviously, incorporating the possibility of two mismatches in the code above would require a lot of brute-force typing of all the possible combinations.How can I extend this code (or refactor this code) to explore the possibility of two mismatches?  Furthermore, I want to modify my output so that I get the numeric index returned (not  or ) of the exact position the substring matched the string.  
You don't have to use  here you can use  module instead and save a lot of memory.You can first extract all sub-strings with length 4 then compare them with your  and just select those that have less that 2 difference with your  :Demo:    If you want to return the indices you need to put the indices in  which you can use  to repeat the index with the length of  :Demo:
The combinatorial explosion is not that bad for two mismatches out of four.First, observe that you can omit  itself, since it's covered by all of the more lenient cases.So, the number of cases isFor up to two mismatches, the number of cases isNamely,(To simplify the illustration, I've taken the liberty of writing  instead of .)To get the positions of the matches instead of the text of the matches:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
