Natural Text
I want to be able to set environment variables in my Django app for tests to be able to run. For instance, my views rely on several API keys.There are ways to override settings during testing, but I don't want them defined in  as that is a security issue. I've tried in my setup function to set these environment variables, but that doesn't work to give the Django application the values.When I test locally, I simply have an  file I run with which supplies  with values. But in Django's  it does not have a way (that I know) to set that. How can I get around this?
The  is an internal API that might be changed from version to version with breaking (backward incompatible) changes. In fact, the entire  package is internal use only. It was explicitly stated on the test package documentation page that it's for internal testing of core libraries and NOT a public API. (see links below)You should use  in python's standard lib . It can be used as a context manager, decorator or class decorator.  See example code below copied from the official Python documentation.Update: for those who doesn't read the documentation thoroughly and might have missed the note, read more  package notes athttps://docs.python.org/2/library/test.html or https://docs.python.org/3/library/test.html
As @schillingt noted in the comments, EnvironmentVarGuard was the correct way. This correctly sets environment variables for the duration of the context object  statement. 
Using  is not a good solution as it fails in some environments and works in others. see example below.A better solution is what was suggested by erewok that requires making use of the  in python3.Assuming using unittest```
If you are loading your environment variables in Django's  file like this: You could use this:  
I use  as my test runner, and it allows you to create a  file in which you can specify a particular settings file to use while running tests.See documentation on this here:http://pytest-django.readthedocs.org/en/latest/configuring_django.html#pytest-ini-settingsI recommend py.test in general as a test runner, because it supports different types of test classes and even simple functions, and it's pretty easy to set up fixtures or other code that runs before and after tests.
Old question, but it turned up in a Google search and neither of the existing answers are suitable. If you're using pytest, env vars can be set/restored using pytest's monkeypatching functionality.
Initially, my env variable  was set to .I could able to change the env variable using the following:Now my env variable  says .


Answer URL
https://docs.python.org/3/library/test.html
