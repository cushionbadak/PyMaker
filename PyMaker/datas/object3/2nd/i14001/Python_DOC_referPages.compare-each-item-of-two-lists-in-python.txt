Natural Text
For example, suppose  and . I want to compare each item from one list to the other, for example, create an output list such that For simplicity I'm using the  operation but this could also be a summation, e.g. I know how I could do this with two loops, but I'm wondering a lambda function with  or list comprehensions could be used? I've searched online but only found one-to-one comparisons of list items, e.g. .
itertools.product() can generate all combinations for you:
To get all the permutations of elements with a list comprehension:Functionality is the same as the nested for loops:Functional implementation is a bit more confusing:This creates a list of lists, however, so you'd want to flatten it with any of the techniques described hereOr use  as suggested by @bereal.
For python 3.x - Yes you can do this with  function and  function and  expression -For Python 2.x you can use same expression, just  function in Python 2.x returns a list so the  is not required.
You want to apply an operator on pairs from the cartesian product of two lists. Let's say op defines the operation you want to apply to the two items, e.g:and have two listsYou can apply op on all pairs as a list comprehension as follows:To use the map function you first need to create the cartesian product using itertools.product. This effectively creates a double loop over the elements of both list just like the list comprehension. You will need to adjust the op definition slightly for this since it will only receive one argument consisting of the tuple (x, y). For example:
You can do this:It will return:
If we like the idea of vectorization, we could try numpy:


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=product#itertools.product
