Natural Text
why there is no  'BBB' output?if I del zhe #1 , the output is okif I use #2 or #4, the output is okif I use #3, the output has no  'BBB'? 
Because your  is printed with the finalizer of your class ( function). And finalizers are run when the garbage collector collects your object.Python uses a double strategy for garbage collection: reference counting and cycle detection. Objects whose reference count reaches 0 are collected immediately, but if they participate in a cycle, then their count will never reach 0. Then the GC cycle detection routine, that is called periodically, will eventually detect it and release all the dangling objects.In your particular code, case #3 creates a reference cycle:  is a reference to . But the GC cycle detection is never run because the program ends before it has any chance.But even if the GC is run, objects with finalizers have special rules. From the documentation:Objects that have  methods and are part of a reference cycle cause the entire reference cycle to be uncollectable, including objects not necessarily in the cycle but reachable only from it. Python doesn’t collect such cycles automatically because, in general, it isn’t possible for Python to guess a safe order in which to run the  methods.Also, from hereChanged in version 3.4: Following PEP 442, objects with a  method don’t end up in  anymore.So, it looks like, in Python before 3.4, in classes with finalizers, you have to break the  cycles manually:If you know a safe order, you can force the issue by examining the garbage list, and explicitly breaking cycles due to your objects within the list. Note that these objects are kept alive even so by virtue of being in the garbage list, so they should be removed from garbage too. For example, after breaking cycles, do  to empty the list.
Because  is a bound method and as such indirectly references the object it is bound to, which means you're creating a reference cycle.You can verify this by doing:which should print  in your cases #2 and #4, and  in case #3.The documentation of  has a note about reference cycles:[...] Some common situations that may prevent the reference count of an object from going to zero include: circular references between objects (e.g., a doubly-linked list or a tree data structure with parent and child pointers); a reference to the object on the stack frame of a function that caught an exception (the traceback stored in sys.exc_traceback keeps the stack frame alive); or a reference to the object on the stack frame that raised an unhandled exception in interactive mode (the traceback stored in sys.last_traceback keeps the stack frame alive)  [...]  Circular references which are garbage are detected when the option cycle detector is enabled (it’s on by default), but can only be cleaned up if there are no Python-level  methods involved.Basically, this means that if you have a  method, it prevents objects containing a reference cycle to be cleanded up.


Answer URL
https://docs.python.org/3/library/gc.html
