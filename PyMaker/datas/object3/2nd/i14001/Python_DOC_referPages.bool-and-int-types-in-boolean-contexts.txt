Natural Text
I have this code in a boolean context:  Output: 2The type check for this expression resulted in .Next, I modified the code to:Output : And the type check for this expression resulted in Why is the output in the 1st code ?  Shouldn't the expression evaluate to a boolean value ?If not so, Why?
In Python, when using 'and' and 'or', the expression evaluates using the objects involved, instead of using Booleans as in many other languages.So: ... and so onIf you want the Boolean, just surround the whole expression with bool(..)Further reading:http://www.diveintopython.net/power_of_introspection/and_or.htmlhttps://docs.python.org/2/reference/expressions.html#boolean-operations
All you need to know here is the definition of  operand.Based on python documentation :The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned. So since the precedence of  is lower than  your expression evaluated as following :Which is equal to following :Thus based on preceding documentation the result would be the value of right object which is 2.
When you said  it is evaluate to .Then you have  which will evaluate to Now  will evaluate to  but the last  in your expression. This is due to operator precedenceThe output is  not  because  is likewhich yieldsbecause  will always evaluate to 
I think you are clear with the operator precedence between  and According to Python documentation, the object is returned.will return  according to the shorcut evaluation.and so on.


Answer URL
https://docs.python.org/3/reference/expressions.html#or
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#operator-precedence
