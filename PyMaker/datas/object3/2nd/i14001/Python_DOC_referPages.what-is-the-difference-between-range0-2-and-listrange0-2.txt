Natural Text
Need to understand the difference between  and , using python2.7Both return a list so what exactly is the difference?
In Python 3.x , returns a class of immutable iterable objects that lets you iterate over them, it does not produce lists, and they do not store all the elements in the range in memory, instead they produce the elements on the fly (as you are iterating over them) , whereas  produces a list (by iterating over all the elements and appending to the list internally) .Example -Ideally, if you only want to iterate over that range of values ,  would be faster than  because the latter has the overhead of producing a list before you start iterating over it.In Python 2.x ,  produces an list, instead we also had an  function that has similar behavior of  function from Python 3.x (xrange was renamed to range in Python 3.x)For Python 3.5, From the documentation - Range objects implement the collections.abc.Sequence ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indicesSo you can do things like -And all of these are constant time operations , as can be seen from this test -
It depends on what version of Python you are using.In Python 2.x,  returns a list, so they are equivalent.In Python 3.x,  returns an immutable sequence type, you need  to get a list.
Both commands return list in Python2.x . But in Python3.x range is an immutable sequence and doesnot return list. It is used for iterations ad loops
In python3.x, range has its own typeSo if you want to use range() in a for loop, its fine. However you can't use it  as a list object. You need to convert it to list to do that.Python2 Example:Python3 Example:
Basically, the difference is that  is a generator function and  is an actual list. A generator function is used in loops. For example, a generator function of a file will read a very large file line by line. This will print every line without overloading the RAM of the computer because you are only reading one by one in both functions. However, if we do something like The second part looks the same, but it is not. Originally, we were looping over every line in the file and moving on to the next line once we were done with it. Over here, Python has a list of ALL the lines :/, imagine doing that with a 10GB file! Your code would crash. Now, let's go back to range() and list(range())Doing  makes us go to the next number in the range and completely forget about the previous (Screw grammar). However, doing  keeps the entire list of numbers in the memory and is the same as doing When you need the entire list of data in your code, use the list method. But, when you only need one piece of data at a time (easiest example, copying a file in chunks), use a generator function to save space. You could copy every 1 million lines of a file using only 54 mb (assuming you don't have insanely long lines). However, if we have a tiny 2kb file, we can just copy that thing without a generator. It's not worth the time and is slower in this case. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#ranges
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
