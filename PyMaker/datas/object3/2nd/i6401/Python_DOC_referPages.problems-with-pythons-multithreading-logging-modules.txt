Natural Text
I have a concurrently-run program where I want to create a log for each child process. I'll first describe my setup and then the issue I'm facing. Here are my primary modules: mp_handler.py: mp_worker.py:deco_module.py: this module does some exception handling and I have no idea why it might interfere but I figure I'd include it just in case. Now, on to my issue. I was getting the error described in this post: https://github.com/opencv/opencv/issues/5150. Hence, I wrote the  line in . After debugging, however, I found that that line was causing the  line  to create a NEW logger as opposed to getting the one created in the parent, i.e. . I was able to see this by printing  in both the parent and the child modules and see that the locations in memory are different. Indeed, as I said, writing  avoids this issue (this makes very rough sense to me as my understanding is that spawn will create a new space for the logger). main problem: So, the problem is, how do I work around the fact that I need the start method to be set to 'spawn' for the sake of OpenCV but need to toggle it off in order for log communication between modules (i.e. in order for mp_worker to recognize its correct logger_id in order to log to the correct file)? As part of good practice, I want to keep all logging configs out of the children and submodules alike. secondary problem: supposing I ignore the fact that I need OpenCV and set the method to 'fork.' In this case I noticed that none of the logging.info() statements in the  function never get to the log! So, supposing your recommendation does involve setting it to fork, what is the work around here? EDIT: FIXED! This is also being caused by OpenCV. So the problem still stands... how do I use a spawn process and not lose my logger ID?Thank you so much!
You shouldn't configure logging before a process is spawned, but after. See the documentation for an example of how to do it correctly. This applies to Python 3, but if you need to run it under Python 2, you can use the logutils package, which provides  and  classes.The logging cookbook contains more example code relating to using logging with .


Answer URL
https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes
