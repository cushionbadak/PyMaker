Natural Text
I found a Python script called transpose_file.py which can transpose space-delimited files. It looks like so:I want to make sure I understand what each line does, as I am very new to Python.1) First, we import a module called fileinput which allows you to read files and parse through them? Not sure why using a simple with open(sys.argv[1],'r') as f etc would not work2) Make an empty list called m3) For each line in your input file, strip any space, tab or newline at the end of the line, and make space the delimiter (i.e. your input file is delimited)4) For each row ... not sure what the rest means. What does zip(*m) mean? Once this is done, we print a space and we join the row? I just don't see how this results in a transposition.Any explanation would be deeply appreciated.
 supports other methods of file input as well. It can effectively do , but also supports other possibilities - see the Python documentation for this.Your understanding of 2 and 3 is broadly correctFor each line, the line is stripped of whitespace and then split by spaces. This results in a grid representing each space-delimited part of the file. is effectively Python's transposition operator. For example:You have to coerce it to a  as  returns an iterable.  is perhaps more commonly used to "zip" together two lists, so you can iterate over them together:This is also well documented.The  operator separates each sublist of the grid into a separate argument to . joins together each string in an iterable with a space - egThis just puts the space delimiters back into your newly transposed series of strings. It is again, documented.
Your analysis is basically correct.Note that is a little fragile. It strips all leading & trailing whitespace from the line, and then splits the line into a list of strings, using a single space as the delimiter. This may not do what you want if the line contains runs of more than one space, or if it contains tabs.The  function iterates over its arguments in parallel, building tuples from the corresponding items in each arg. So first it generates a tuple of all the first items, then all the second items, etc. Eg:outputAs you can see, this results in a transposition.We can use the  "splat" operator to pass a list of sequences to , the "splat" operator unpacks the list so that  sees each of those sequences as a separate arg.This gives the same output as before.The "splat" operator isn't just a special feature of : you can use it on any function that takes multiple arguments. There's also the "double-splat" operator , which unpacks dictionaries into keyword=value pairs.If the sequences differ in length then  stops when there are no more items left in the shortest sequence. However, there's a related function in the standard  module: , which takes an optional . It keeps going until the longest sequence is exhausted, using  to fill the gaps. The default  is .In regard to , some people just find it convenient, I prefer ...


Answer URL
https://docs.python.org/3/library/fileinput.html
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
