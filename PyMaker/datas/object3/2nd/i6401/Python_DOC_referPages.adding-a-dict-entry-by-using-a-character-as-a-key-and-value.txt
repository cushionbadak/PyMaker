Natural Text
I have an empty dictionary that I want to add to by using a while loop, and a string that I want to iterate over using the same loop. What I want to do is add to the dictionary by using a character, at, as the key, and at+1 as the value. While reading from the string, if the loop comes across a key already in the dictionary, it would add the value at at to the value already in the dictionary. It stops once it reaches the length of the string - 1.Suppose I was given the string, "Hello" to make the dictionary with. My loop would ideally read 'H' as the first letter, then create a entry using 'H' as a key and 'e' as the value. When it comes to 'l', it creates an entry with 'l' as the key and 'l' as the value. Then, an entry with 'l' as the key, and 'o' as the value.Here is my function so far. Instead of starting at the 0th index, it starts at the first:What is the correct syntax for the line:
Strings can be used as dictionary keys, so you should just be able to do . However, you also need to provide a default value using a  (docs):If you don't do this, the first time you try to append to  on a key that doesn't exist will fail with a . With a , if you access a key that doesn't exist yet, you'll get (in this case) an empty string.Incidentally, it looks like you're in a class method. If so, it seems like  and  should be probably be instance attributes if you want them to be persistent.
You could also construct  with the dictionary constructor in a single line:I will walk through this for the example string "Hello". will give you a string up to but not including the last letter.  will give you a string starting at the second letter and going to the end. This gives you two strings 'Hell' and 'ello'. is a python built-in function that takes two iterable items and returns a list of tuples pairing each consecutive element, so  gives:Calling the dictionary constructor directly using  allows you to pass in a list of tuples like the one provided by , and yields a dictionary with the first element of each tuple as a key, and the second element as the value.Putting that all together,  will give you a dictionary that looks likeNote this isn't exactly what you want because "Hello" has two 'l' characters but keys in a dictionary have to be unique. You can't have two 'l' keys pointing to different values. This means that whatever implementation you choose, setting  will overwrite the previous occurrence of  when  is "Hello".


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables
