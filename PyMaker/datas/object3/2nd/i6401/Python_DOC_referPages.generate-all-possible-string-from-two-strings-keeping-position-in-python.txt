Natural Text
Given two words:I want to generate all possible combinations (not sure if combination applies here) that can be produced by replacing one by one character of those two strings, as a result:Edit:I've tried:but the result is:Not what I'm looking for. I'm expecting something like (each result should be same lenght as input):
You are looking for the  which you may use like:To get these values as string, you may use a list comprehension as:Edit (Based on the edit in the question)For the new example you shared , you should be using  with the above list comprehension expression and  as:
The following should solve your use case
Consider the case where there are two strings each of length four.  Imagine a bit mask of that same length (four).  Every possible bit mask should correspond to a valid selection from one of the strings.So given:then here are the results:To generalize consider that n-strings generates all the numbers in base n up to the order of these string lengths.  (Not sure how you want to handle non-uniform string lengths; but the principle is the same, even if you add some sort of "NULL" padding which gets filtered out of the results; akin to how we conventionally filter leading zeroes from our normal decimal number representations).I don't have time to write code for this right now.  But the approach would be to map each of these strings to a symbol (digit or character) and  iterate over the integer range as appropriate to your number strings and their lengths.  For example two strings of eight characters each is 28 (256) while three strings of seven characters each would be 37 (2187) and so on.Convert each integer to its representation in your base and lookup the mapping to extract the character for that location from the value (string) stored at that key.  That's the same as you would use to convert integers into any base, take modulo n and shift until zero.
This should produce your desired output, where the characters from both strings are fixed in their positions:You  the two sequences and iterate the cartesian product of the zipped pairs.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
