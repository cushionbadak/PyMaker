Natural Text
I am attempting to copy a csv (which has a header and quote character ") with python 3.6 to a table on a remote postgres 10 server. It is a large CSV (2.5M rows, 800MB) and while I previously imported it into a dataframe and then used dataframe.to_sql, this was very memory intensive so I switched to using COPY.Using COPY with psycopg2 or sqlalchemy would work fine but the remote server does not have access to the local file system.Using psql in the terminal I have successfully run the query below to populate the table. I don't think using \copy is possible with psycopg2 or sqlalchemy.However when I try to use a one line psql -c command like below, it does not work and I get the error: ERROR: COPY quote must be a single one-byte character.Could you tell me why this is the case? This one-line -c psql statement would be easier to implement with the subprocess module in python than having to open a terminal and execute a command which I'm not sure how to do. If you could suggest a workaround or different methodology that would be great.======Per Andrew's suggestion to escape the quote character this worked on the command line. However when implementing it in python like below, a new error comes up:/bin/sh: -c: line 0: unexpected EOF while looking for matching `''/bin/sh: -c: line 1: syntax error: unexpected end of file
Try not to use  if you can avoid it. better to tokenize the command yourself to help sh.In this case then your copy statement could be as it is passed to psql verbatim, because there are no shell quoting issues to take into account. (N.B. still have to quote this for python, so the string would remain as is).If you still want to use  then you have to escape the string literal for both python and shellwill create a string in python which will beWhich is what we found out we needed on our shell in the first place!Edit (clarifying something from the comments):, when not using , takes an iterable of arguments. So you could haveSee https://docs.python.org/2/library/subprocess.html#subprocess.call or https://docs.python.org/3/library/subprocess.html#subprocess.callextra edit :- Please note that to avoid shell injection, you should be using the method described here. See the warning section of https://docs.python.org/2/library/subprocess.html#frequently-used-arguments


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.call
