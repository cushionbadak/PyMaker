Natural Text
I am trying to write a program that takes a file that has a list of numbers and use each of these numbers to subset a part of a string. When I try to call my function (below) I get the error:I tried changing the  in the for loop to  in case, for some reason,  wasn't an integer but that resulted in the following error:Code:Sample input files:212_index.txt212_seq.txt
The errors in your code are caused by the fact that  does not do quite what you seem to expect. Called without parameters, it reads the entire file into a string. You then iterate over the characters in the string instead of the numbers in the file. The  happens when you do  in the index to the sequence.Your intuition to convert the iterated values to  is basically correct. However, since you are still iterating over characters, you get , , , , followed by a  from .  reads in the entire file as-is, newlines and all.Fortunately, the file object is iterable over the lines in the file. This means that you can do something like , and  will take on the string value of each index you want to parse. It has the added bonus that line endings are stripped from the line, meaning that you could pass it directly into  with no further modification, for example.There are a number of additional improvements you can make to your code, including the corrections that would make it work properly.As per @Acccumulation's advice, open files in a  block to ensure that they get cleaned up properly if the program crashes, e.g. from an I/O error. It will also close the file automatically when the block ends, which is something you are currently not doing at all (but should be)Conceptually, there is no need for you to pass around file objects at all. You only use each one in one place for one purpose. I would even extend this to recommend that you write a small function to parse each file type into a usable format and pass that around instead.Files are iterable by line in Python. This is especially handy for your index files, which are a very line-oriented format. You do not need to do a full  at all, and can save a couple of steps from @MaximTitarenko's comment.You can use  directly on a file to combine any sequences that have line breaks in them.Combining all that advice, you could do the following:Since files are iterables of strings, you can use them in list comprehensions and string join operations like that. The rest of your code will now look much cleaner:Your main function is now easier to understand because it focuses only on the sequences and not on things like I/O and parsing. You also don't have a bunch of open file handles floating around, waiting for an error. In fact, the file operations are all self contained, away from the real task.If you had sequences (in the Python sense) of file IDs and gene names, you could further simplify the call to your function with a loop:PS. The I/O section in the Python tutorial is really nice. The section on files may be of especial interest to you.
Try inputting  with double quotes, . Or, use str(gene) in your function.OK, I just realized it's python so quotes thing shouldn't matter, I thinkOr If it's at the write, change to 


Answer URL
https://docs.python.org/3/library/io.html#io.TextIOBase.read
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
https://docs.python.org/3/library/exceptions.html#TypeError
https://docs.python.org/3/library/functions.html#int
https://docs.python.org/3/library/exceptions.html#ValueError
https://docs.python.org/3/glossary.html#term-file-object
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/reference/compound_stmts.html#the-with-statement
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/tutorial/inputoutput.html#input-and-output
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
