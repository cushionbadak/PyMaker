Natural Text
I am currently redesigning a program to use Python's multiprocessing pools. My first impression was that the execution time increased instead of decreased. Therefore, I got curious and wrote a little test script:I get the following results:without multiprocessing:2.384185791015625e-06with multiprocessing:1 processes: 0.350682258605957032 processes: 0.212972402572631843 processes: 0.218879461288452154 processes: 0.3474385738372803When I replace simple with less_simple in lines 21 and 31, I get the following results:without multiprocessing:2.6226043701171875e-06with multiprocessing:1 processes: 3.14538168907165532 processes: 1.6153516769409183 processes: 1.61254382133483894 processes: 1.5159809589385986Honestly, I am a bit confused because the non-multiprocessing version is always some orders of magnitudes faster. Additionally, an increase of the process number seems to have little to no influence on the runtime. Therefore, I have a few questions:Do I make some mistake in the usage of multiprocessing?Are my test functions to simple to get a positive impact from multiprocessing?Is there a chance to estimate at which point multiprocessing has an advantage or do I have to test it?
I did some more research and basically, you are right. Both functions are rather small and somewhat artificial. However, there is a measurable time difference between non-multiprocessing and multiprocessing even for those functions, when you take into consideration how map works. The map function only returns an iterator yielding the results [1], i.e., in the above example, it only creates the iterator which is of course very fast.Therefore, I replaced the map function with a traditional for loop:For the simple function, the execution is still faster without multiprocessing because the overhead is too big for such a small function:without multiprocessing:0.1392803192138672with multiprocessing:1 processes: 0.380807876586914062 processes: 0.225073099136352543 processes: 0.213079452514648444 processes: 0.2152390480041504However, in case of the function less_simple, you can see an actual advantage of multiprocessing:without multiprocessing:3.2029929161071777with multiprocessing:1 processes: 3.49342083930969242 processes: 1.82594609260559083 processes: 1.91968750953674324 processes: 1.716357946395874[1] https://docs.python.org/3/library/functions.html#map


Answer URL
https://docs.python.org/3/library/functions.html#map
