Natural Text
I am writing an Unit-Test for a Django class-based view.The key issue is that  in .When I am writing Unit-test, I don't really want to call external API to get data. First, that will cost my money; second, I can easily test that API in another test file.I also can easily test this  method by having an unit-test only for it and mock the output of .However, when I test this whole class-based view, I simply will doand check the status code and context data to verify it.In this case, how do I mock this  when I am testing the whole class-based view?
What your are looking for is  from . You can patch  by a  object. Maybe you want to patch  for all your tests in class.  give to you essentialy two way to do itdecorate the test classuse  and  in  and  respectivelyDecorate a class by  decorator is like decorate all test methods (see documentation for details) and the implementation will be very neat. Follow example assume that your view is in  module.More sophisticate examples can be build and you can check how you call  and set return value or side effects for your API.I don't give any example about start and stop way to do it (I don't really like it) but I would like to spend some time on two details:I assumed that in your  module you define  or you import it by  otherwise you should pay some attention on Where to patchI used : IMHO it should be used in every patch call and documentation explain why very well
You can mock the  method when testing the classed based view with something like this:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#autospeccing
