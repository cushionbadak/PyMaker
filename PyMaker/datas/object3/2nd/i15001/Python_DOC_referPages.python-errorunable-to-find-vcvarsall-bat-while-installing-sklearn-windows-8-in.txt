Natural Text
I tried to install the Python package dulwich:But I get a cryptic error message:The same happens if I try installing the package manually:
Update: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built Microsoft Visual C++ Compiler for Python (details) and NOT using the original answer below. Original error message means the required version of Visual C++ is not installed.
I found the solution. I had the exact same problem, and error, installing 'amara'. I had mingw32 installed, but distutils needed to be configured.I have Python 2.6 that was already installed.I installed mingw32 to Add mingw32's bin directory to your environment variable: append  to the PATHEdit (create if not existing) distutils.cfg file located at  to be:  Now run .Make sure environment is set by opening a new .
You can install compiled version from http://www.lfd.uci.edu/~gohlke/pythonlibs/
If you want to compile with Visual Studio C++ instead of mingw...Run  to display which version of VC++ it was compiled with (example shown below).It is important to use the corresponding version of the Visual C++ compiler that Python was compiled with since distilutils's  prevents mixing versions (per Piotr's warning).Yellow (top) is Python 2.7, compiled with MSC v.1500 (Visual Studio C++ 2008)Red (bottom) is Python 3.4.1, compiled with MSC v.1600 (Visual Studio C++ 2010)Use the table below[1] to match the internal VC++ version with the corresponding Visual Studio release:Download and install the corresponding version of Visual Studio C++ from the previous step.Additional notes for specific versions of VC++ are listed below.  Notes for Visual Studio C++ 2008For only the 32-bit compilers, download Visual Studio C++ 2008 Express Edition.For the 64-bit compilers[2][3], download Windows SDK for Windows 7 and .NET Framework 3.5 SP1.    Uncheck everything except  to save time and disk space from installing SDK tools you otherwise don't need.  Notes for Visual Studio C++ 2010According to Microsoft, if you installed Visual Studio 2010 SP1, it may have removed the compilers and libraries for VC++.If that is the case, download Visual C++ 2010 SP1 Compiler Update.Notes for Visual Studio C++ 2015If you don't need the Visual Studio IDE, download Visual Studio C++ 2015 Build Tools.Notes for Visual Studio C++ 2017If you don't need the Visual Studio IDE, download Build Tools for Visual Studio 2017.Suggestion: If you have both a 32- and 64-bit Python installation, you may also want to use virtualenv to create separate Python environments so you can use one or the other at a time without messing with your path to choose which Python version to use.According to @srodriguex, you may be able to skip manually loading the   batch file (Steps 4-6) by instead copying a few batch files to where Python is searching by following this answer. If that doesn't work, here are the following steps that originally worked for me.Open up a Before you try installing something which requires C extensions, run the following batch file to load the VC++ compiler's environment into the session (i.e. environment variables, the path to the compiler, etc).  Execute: 32-bit Compilers:Note: 32-bit Windows installs will only have  as expected64-bit Compilers:Note: Yes, the native 64-bit compilers are in . Don't ask me why.  Additionally, if you are wondering what the difference between  and  or more importantly the difference between  and , the former are for the native 64-bit compiler tools and the latter are the 64-bit cross compilers that can run on a 32-bit Windows installation.Update:If for some reason you are getting  where the  is some series of characters, then you need to check that you path variable does not have any extraneous characters like extra quotations or stray characters. The batch file is not going to be able to update your session path if it can't make sense of it in the first place.If that went well, you should get one of the following messages depending on which version of VC++ and which command you ran:  For the 32-bit compiler tools: For the 64-bit compiler tools:Now, run the setup via  or Hope and cross your fingers that the planets are aligned correctly for VC++ to cooperate.
What's going on? Python modules can be part written in C or C++ (typically for speed). If you try to install such a package with Pip (or ), it has to compile that C/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don't have it, you'll see this cryptic error message "Error: Unable to find vcvarsall.bat".The prescribed solution is to install a C/C++ compiler, either Microsoft Visual C++, or MinGW (an open-source project). However, installing and configuring either is prohibitively difficult. (Edit 2014: Microsoft have published a special C++ compiler for Python 2.7)The easiest solution is to use Christoph Gohlke's Windows installers (.msi) for popular Python packages. He builds installers for Python 2.x and 3.x, 32 bit and 64 bit. You can download them from http://www.lfd.uci.edu/~gohlke/pythonlibs/If you too think "Error: Unable to find vcvarsall.bat" is a ludicrously cryptic and unhelpful message, then please comment on the bug at http://bugs.python.org/issue2943 to replace it with a more helpful and user-friendly message. For comparison, Ruby ships with a package manager Gem and offers a quasi-official C/C++ compiler, DevKit. If you try to install a package without it, you see this helpful friendly useful message:Please update your PATH to include build tools or download the DevKit from http://rubyinstaller.org/downloads and follow the instructions at http://github.com/oneclick/rubyinstaller/wiki/Development-KitYou can read a longer rant about Python packaging at https://stackoverflow.com/a/13445719/284795
You'll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with some tweaking).Microsoft now supplies a bundled compiler and headers just to be able to compile Python extensions, at the memorable URL: Microsoft Visual C++ Compiler for Python 2.7http://aka.ms/vcpython27This is a relatively small package; 85MB to download, installable without admin privileges, no reboot required. The name is a little misleading, the compiler will work for any Python version originally compiled with Visual C++ 2008, not just Python 2.7.If you start a Python interactive prompt or print , look for the  version string; if it is  you can use this tool.From the original announcement to the distutils list:Microsoft has released a compiler package for Python 2.7 to make it easier for people to build and distribute their C extension modules on Windows. The Microsoft Visual C++ Compiler for Python 2.7 (a.k.a. VC9) is available from: http://aka.ms/vcpython27 This package contains all the tools and headers required to build C extension modules for Python 2.7 32-bit and 64-bit (note that some extension modules require 3rd party dependencies such as OpenSSL or libxml2 that are not included). Other versions of Python built with Visual C++ 2008 are also supported, so "Python 2.7" is just advertising - it'll work fine with 2.6 and 3.2.Note that you need to have  6.0 or newer installed (listed in the system requirements on the download page). The project you are installing must use , not  or the auto-detection won't work.Microsoft has stated that they want to keep the URL stable, so that automated scripts can reference it easily.
I just had this same problem, so I'll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:I have mingw (g++ (GCC) 4.6.1) and python 2.7.3 in a windows 7 box and I'm trying to install PyCrypto.It all started with this error when running setup.py install: Easily solved after googling the error by specifying mingw as the compiler of choice: The problem is that then I got a different error: It turns out that my anti-virus was blocking the execution of a freshly compiled .exe. I just disabled the anti-virus "resident shield" and went to the next error:This solved it: "Either install a slightly older version of MinGW, or edit distutils\cygwinccompiler.py in your Python directory to remove all instances of -mno-cygwin." (from here)Now, I can finally start working.
Looks like its looking for VC compilers, so you could try to mention compiler type with , since you have msys
I have python 2.73 and windows 7 .The solution that worked for me was:Added mingw32's bin directory to environment variable: append PATH with Created distutils.cfg located at  containing:  To deal with MinGW not recognizing the -mno-cygwin flag anymore, remove the flag in C:\Python27\Lib\distutils\cygwincompiler.py line 322 to 326, so it looks like this:
Look in the  file of the package you are trying to install. If it is an older package it may be importing  rather than .I ran in to this (in 2015) with a combination of these factors:The Microsoft Visual C++ Compiler for Python 2.7 from http://aka.ms/vcpython27An older package that uses Trying to do  rather than using .If you use a recent version of pip, it will force (monkeypatch) the package to use setuptools, even if its  calls for distutils. However, if you are not using pip, and instead are just doing , the build process will use , which does not know about the compiler install location.SolutionStep 1: Open the appropriate Visual C++ 2008 Command PromptOpen the Start menu or Start screen, and search for "Visual C++ 2008 32-bit Command Prompt" (if your python is 32-bit) or "Visual C++ 2008 64-bit Command Prompt" (if your python is 64-bit). Run it. The command prompt should say Visual C++ 2008 ... in the title bar.Step 2: Set environment variablesSet these environment variables in the command prompt you just opened.Reference http://bugs.python.org/issue23246Step 3: Build and install to the package you want to build, and run , then . If you want to install in to a virtualenv, activate it before you build. 
Maybe somebody can be interested, the following worked for me for the py2exe package.(I have windows 7 64 bit and portable python 2.7, Visual Studio 2005 Express with Windows SDK for Windows 7 and .NET Framework 4)then:
I spent almost 2 days figuring out how to fix this problem in my python 3.4 64 bit version: Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32Solution 1, hard: (before reading this, read first Solution 2 below)Finally, this is what helped me:install Visual C++ 2010 Expressinstall Microsoft Windows SDK v7.1 for Windows 7create manually file  in  which contains  or other path depending on where you have yours installed(this seems to be optional) install Microsoft Visual Studio 2010 Service Pack 1 together with Microsoft Visual C++ 2010 Service Pack 1 Compiler Update for the Windows SDK 7.1after that I tried to  but received the following error:I changed  to  in  per this https://stackoverflow.com/a/23099820/4383472finally after  command my avast antivirus tried to interfere into the installation process, but i quickly disabled itIt took very long - several minutes for numpy to compile, I even thought that there was an error, but finally everything was ok.Solution 2, easy:(I know this approach has already been mentioned in a highly voted answer, but let me repeat since it really is easier)After going through all of this work I understood that the best way for me is just to use already precompiled binaries from http://www.lfd.uci.edu/~gohlke/pythonlibs/ in future. There is very small chance that I will ever need some package (or a version of a package) which this site doesn't contain. The installation process is also much quicker this way. For example, to install :donwload  (if you have Python 3.4 64-bit) from that sitein command prompt or powershell install it with pip  (or full path to the file depending how command prompt is opened)
I wanted to run pysph on Windows 10 under Python 2.7 and got vcvarsall.bat was not found (from distutils)My solution was the following:Install Microsoft Visual C++ for Python 2.7 (like @Michael suggested)On Windows 10 it was installed into (my username is Andreas):Set environment variable VS90COMNTOOLS to the installation path of Visual C++ for Python 2.7 (see above path).If it still doesn't work, then modifiy in the modulethe file msvc9compiler.py. Find in it the function find_vcvarsall and do following modification.Replace the line:withThis is where vcvarsall.bat resides in my case (check, where vcvarsall.bat is in your installation).
I encountered this issue when I tried to install numpy library on my python 3.5. The solution is to install VS2015. I had VS2008, 2012, 2013, none of which is compatible with python 3.5. Apparently newer version of python has dependency on newer versions of VS.Also make sure C++ Common Tools are installed with Visual Studio.
I tried all the above answers, and found all of them not to work, this was perhaps I was using Windows 8 and had installed Visual Studio 2012. In this case, this is what you do.The  file is located here:Simply select the file, and copy it.Then go to this directory:and paste the file. And then, all should be well.
You can download the free Visual C++ 2008 Express Edition from http://go.microsoft.com/?linkid=7729279, which will set the VS90COMNTOOLS environment variable during installation and therefore build with a compatible compiler.As @PiotrDobrogost mentioned in a comment, his answer to this other question goes into details about why Visual C++ 2008 is the right thing to build with, but this can change as the Windows build of Python moves to newer versions of Visual Studio: Building lxml for Python 2.7 on Windows
I had this problem using Python 3.4.1 on Windows 7 x64, and unfortunately the packages I needed didn't have suitable exe or wheels that I could use. This system requires a few 'workarounds', which are detailed below (and TLDR at bottom).Using the info in Jaxrtech's answer above, I determined I needed Visual Studio C++ 2010 (sys.version return MSC v.1600), so I installed Visual C++ 2010 Express from the link in his answer, which is http://go.microsoft.com/?linkid=9709949. I installed everything with updates, but as you can read below, this was a mistake. Only the original version of Express should be installed at this time (no updated anything).vcvarsall.bat was now present, but there was a new error when installing the package, . There are other stackoverflow questions with this error, such as Errors while building/installing C module for Python 2.7I determined from that answer that 2010 Express only installs 32-bit compilers. To get 64-bit (and other) compilers, you need to install Windows 7.1 SDK. See http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspxThis would not install for me though, and the installer returned the error . I found the solution at the following link: http://support.microsoft.com/kb/2717426. In short, if newer versions of x86 and x64 Microsoft Visual C++ 2010 Redistributable's are installed, they conflict with the ones in SDK installer, and need uninstalling first.The SDK then installed, but I noticed vcvars64.bat still did not exist in , nor its subfolders. vcvarsall.bat runs the vcvars64 batch file, so without it, the python package still wouldn't install (I forgot the error that was shown at this time).I then found some instructions here: http://www.cryptohaze.com/wiki/index.php/Windows_7_Build_Setup#Download_VS_2010_and_Windows_SDK_7.1Following the instructions, I had already installed Express and 7.1 SDK, so installed SDK 7.1 SP1, and did the missing header file fix. I then manually created vcvars64.bat with the content . I will paste all those instructions here, so they don't get lost.Step 1 is to download Visual Studio Express 2010.http://www.microsoft.com/visualstudio/en-us/products/2010-editions/express  is a good place to start. Download the installer, and run it  (vc_web.exe). You don't need the SQL 2008 additional download.You'll also need the Windows SDK (currently 7.1) for the 64-bit  compilers - unless you want to do 32-bit only builds, which are not  fully supported...http://www.microsoft.com/en-us/download/details.aspx?id=8279 is a good  starting point to download this - you'll want to run winsdk_web.exe  when downloaded!The default install here is just fine.Finally, download and install the Windows SDK 7.1 SP1 update:  http://www.microsoft.com/en-us/download/details.aspx?id=4422And, to fix missing header file, VS2010 SP1.  http://www.microsoft.com/downloads/en/confirmation.aspx?FamilyID=75568aa6-8107-475d-948a-ef22627e57a5And, bloody hell, fix the missing batch file for VS2010 Express. This  is getting downright absurd.In C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64,  create "vcvars64.bat" with the following (you will need to be running  as administrator):CALL setenv /x64My python package still did not install (can't recall error). I then found some instructions (copied below) to use the special SDK 7.1 Command Prompt, see: https://mail.python.org/pipermail/distutils-sig/2012-February/018300.htmlNever mind this question.  Somebody here noticed this item on the menu:  Start->All Programs->Microsoft Windows SDK v7.1 ->Windows SDK 7.1 Command PromptThis runs a batch job that appears to set up a working environment for the compiler.  From that prompt, you can type "setup.py build" or "setup.py install".I opened the Windows SDK 7.1 Command Prompt as instructed, and used it to run easy_install on the python package. And at last, success!TLDR;Install Visual Studio Express 2010 (preferably without updated redistributables or SQL server).Install Windows 7.1 SDKInstal SDK 7.1 SP1 update, and VS2010 SP1 header file fix (this step may not be required).Manually create  with content Start->All Programs->Microsoft Windows SDK v7.1 ->Windows SDK 7.1 Command Prompt to open special x64 command prompt, which can then be used with python/easy_install/pip/etc (including those in virtual_envs).
I tried many solutions but only one worked for me, the install of Microsoft Visual Studio 2008 Express C++.I got this issue with a Python 2.7 module written in C (yEnc, which has other issues with MS VS). Note that Python 2.7 is built with MS VS 2008 version, not 2010!Despite the fact it's free, it is quite hard to find since MS is promoting VS 2010.Still, the MSDN official very direct links are still working: check https://stackoverflow.com/a/15319069/2227298 for download links.
If you have mingw installedworks, forcing pip to build using the mingw compiler instead of Microsoft's. See here https://github.com/pypa/pip/issues/18 for details (last post).
Is Microsoft Visual C++ Compiler for Python 2.7 at http://www.microsoft.com/en-us/download/details.aspx?id=44266 not a solution? 
The easiest way to solve this in 2016 is to install Chocolatey and then the   package. Open Powershell:
Below steps fixed this issue for me, I was trying to create setup with cython extension.Install Microsoft Visual C++ Compiler for Python 2.7 The default install location would be @C:\Users\PC-user\AppData\Local\Programs\Common\Microsoft\Visual C++for Python This might actually fix the issue, test once before proceeding. If it fails, Check where in VC++for python vcvarsall.bat file is locatedOpen the msvc9compiler.pyfile of distutils package in notepad. In my box this was @C:\Anaconda2\Lib\distutils\msvc9compiler.py find_vcvarsall functionin this file, determine the version of VC by printing out versionargument. For Python 2.7 it's likely to be 9.0Now create anenvironment variable VS90COMNTOOLS, Pointing toC:\Users\PC-user\AppData\Local\Programs\Common\Microsoft\Visual C++for Python\9.0\VC\binFor some reason distutils expects thevcvarsall.bat file to be within VC dir, but VC++ for python toolshas it in the root of 9.0 To fix this, remove "VC" from thepath.join (roughly around line 247)The above steps fixed the issue for me.
I don't know if it is too late, but I found Microsoft Visual C++ Compiler for Python 2.7 which readsThe typical error message you will receive if you need this compiler package is Unable to find vcvarsall.batHope this helps!
I got the same problem and have solved it at the moment."Google" told me that I need to install "Microsoft Visual C++ Compiler for Python 2.7". I install not only the tool, but also Visual C++ 2008 Reditributable, but it didn't help. I then tried to install Visual C++ 2008 Express Edition. And the problem has gone!Just try to install Visual C++ 2008 Express Edition!
If you're looking to install pyodbc on a Windows box that doesn't have Visual Studio installed another option is to manually install pyodbc using the binary distribution.This is particularly useful if you do not have administrator privileges on the machine you're working with and are trying to set up a virtualenv.Steps:Download the latest Windows installer from here (pyodbc-X.X.X.win-Y-py2.7.exe)Open the installer executable using 7-Zip (or WinRAR or whatever)Extract pyodbc.pyd and pyodbc-X.X.X-py2.7.egg-info and place them in There is no step 4 :)
With Python 3.4, the dependency is on Visual Studio 2010. Installing Visual C++ 2010 Express fixed the problem for me. Tricking it into using the VS 2008 or 2013 installs that I happened to have didn't work.
You can use easy_install instead of pip it works for me.
The answer given by @monkey is one of the correct ones, but it is incomplete.In case you'd like to use MinGW, you should select the C, C++ and also other development tools suggested during the MinGW installation process to also get "make.exe."You must also have the path set to make.exe in the env.To complete his answer, here are the steps:Add mingw32's bin directory to your environment variablesAppend  to the PATH Edit (create if it doesn't exist) the  file located at  to be:Make sure the environment variables is set by opening a new cmd.exe.
I had the same error (which I find silly and not really helpful whatsoever as error messages go) and continued having problems, despite having a C compiler available. Surprising, what ended up working for me was simply upgrading pip and setuptools to the most recent version. Hope this helps someone else out there.
fastest solution:If you have python 3.4.x, the solution is simply to install VC++ 2010 since it is used to compile itself into.https://www.visualstudio.com/en-us/downloads#d-2010-expressmy python version isMSC v.1600 32 bit (intel)] on win32worked fine on Windows8


Answer URL
https://docs.python.org/3/extending/extending.html
