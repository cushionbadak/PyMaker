Natural Text
I don't understand why this code prints  in :When  is called, printing  results in  being printed. Why?
 is  in  because you have defined it as a global variable with a value of  and have not defined a local variable of the same name in that function. In  you defined  with a value of  and when you printed that variable, that's what you got. But that value of  went away when the function finished, because it is local to the function, and that's what local variables do.Now you might ask why  was changed in  when  was not. But in fact,  was not changed. You did not assign to the name  in , so the global variable  was used. The contents of  were changed (you added a new key/value pair) but  itself is still the same dictionary object it was when you first defined it. And that's why when you print it in  you get the changed dictionary. Both functions are using the global variable  because there is no local variable of the same name "hiding" it.
In , you are re-declaring  locally, and so it references a local variable and not the global that you declared in the beginning of your code. See this documentation for more information. The solution is to declare  global at the beginning of :
Try this in :See this post for a similar question. Basically, if you don't specify that  is global, it'll be interpreted as local to the function. We don't have to do the same for  because we're not actually reassigning it, only modifying its contents.
Check my comments in the code.OUTPUT:
saber and rider are global, but in a() you have:


Answer URL
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
