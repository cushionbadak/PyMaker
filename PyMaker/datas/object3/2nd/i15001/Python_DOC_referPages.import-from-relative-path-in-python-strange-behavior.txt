Natural Text
As far as I understand from the python docs,  statement should bind only , but not , into the current namespace.But in practice, if  is a relative name, it is also bound sometimes!Let me provide an example. Consider the following file hierarchy:subpackage/__init__.py:package/__init__.py:Now let's run python (either v2 or v3) interpreter from the  directory and executeThe first three output lines are predictable:But the last one is  rather than , and this confuses me somewhat.Have I missed something? Is it expected behavior? What is the reason?The situation seems even more weird to me in this case:another_package/__init__.py:package/__init__.py:Now I run this outside the root:Why did  appear in ?
It's important to realize modules are loaded once at most (unless they are explicitly reloaded). If a module is imported in multiple modules, the same module object is referenced by them all. E.g.:Module M.pyModule A.pyModule B.pySo:Now, when the statement  is executed it is basically equivalent to executing . Since  is indeed a module inside the  package, the statement succeeds which results with the following effects (there may be more, but for this purposes let's focus on these 3): is loaded if not previously loaded (its'  is run) is imported into the current namespace is added as an attribute to  module objectSome developers are not completely aware of items 1 and 3.Back to your question: Let's see what happens when  is executed, in this order:'s  is run (because  wasn't loaded yet)'s  is run (because  wasn't loaded yet) is executed which has the side effects mentioned above, most notably, the (Yes. THE object. There is only one per each module, remember?) module object of  has the attribute  added to it.This explains why  appears in 's . 


Answer URL
https://docs.python.org/3/reference/import.html#submodules
