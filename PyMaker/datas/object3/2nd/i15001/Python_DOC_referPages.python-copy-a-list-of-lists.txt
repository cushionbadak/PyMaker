Natural Text
This question already has an answer here:How to clone or copy a list?                    20 answers                Copying nested lists in Python                    2 answers                I'm using python 3.4.1.For a single list , if I make a copy of it,  when I change items in , it won't change items in .However, when I define a list of lists (actually a matrix) , when I assign . What I do to list  actually affects .I checked their addresses, they are different.Can anyone tell me why?ps: What I did is , and the item in a was also changed.
From the docs for the  module:The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.When you call regular  you are performing a shallow copy. This means that in a case of a list-of-lists, you will get a new copy of the outer list, but it will contain the original inner lists as its elements. Instead you should use , which will create a new copy of both the outer and inner lists.The reason that you didn't notice this with your first example of using  is that the primitives like  are immutable, and thus it is impossible to change their value without creating a new instance. If the contents of the list had instead been mutable objects (like lists, or any user-defined object with mutable members), any mutation of those objects would have been seen in both copies of the list.
Perhaps a list comprehension as such:...though if your matrices are deeper than one layer, list comprehension is probably less elegant than just using .edit - a shallow copy, as stated, will still contain references to the objects inside the list. So for example...
It's very simply, just do that:Exemple:


Answer URL
https://docs.python.org/3/library/copy.html
