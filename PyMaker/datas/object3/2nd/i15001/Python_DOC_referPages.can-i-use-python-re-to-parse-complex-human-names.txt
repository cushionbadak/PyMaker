Natural Text
So one of my major pain points is name comprehension and piecing together household names & titles. I have a 80% solution with a pretty massive regex I put together this morning that I probably shouldn't be proud of (but am anyway in a kind of sick way) that matches the following examples correctly:The regex matcher looks like this:(wtf right?) For convenience: http://www.pyregex.com/So, for the example:the regex results in a group dict that looks like:I need help with the final step that has been tripping me up, comprehending possible middle names. Examples include:Is this possible and is there a better way to do this without machine learning? Maybe I can use nameparser (discovered after I went down the regex rabbit hole) instead with some way to determine whether or not there are multiple names? The above matches 99.9% of my cases so I feel like it's worth finishing.TLDR: I can't figure out if I can use some sort of lookahead or lookbehind to make sure that the possible middle name only matches if  there is a last name after it.Note: I don't need to parse titles like Mr. Mrs. Ms., etc., but I suppose that can be added in the same manner as middle names.Solution Notes: First, follow Richard's advice and don't do this. Second, investigate NLTK or use/contribute to nameparser for a more robust solution if necessary.
Regular expressions like this are the work of the Dark One.Who, looking at your code later, will be able to understand what is going on? Will you even?How will you test all of the possible edge cases?Why have you chosen to use a regular expression at all? If the tool you are using is so difficult to work with, it suggests that maybe another tool would be better.Try this:Output:This took less than fifteen minutes and, at each stage, the logic is clear and the program can be debugged in pieces. While one-liners are cute, clarity and testability should take precedence.


Answer URL
https://docs.python.org/3/library/re.html#re.VERBOSE
