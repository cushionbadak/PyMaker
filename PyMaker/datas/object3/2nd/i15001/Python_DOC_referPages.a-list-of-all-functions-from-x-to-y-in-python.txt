Natural Text
I have two finite sets X and Y, and I want to generate a list containing all of the functions from X to Y (that is, all mappings from X to Y, where each mapping is represented as a dictionary whose keys are elements of X, and whose values are elements of Y; note that a mapping from X to Y must have a key for every element of X). For example, if X = {1,2} and Y = {'a','b'}, I want to obtain the following list of dictionaries.I think the following code satisfies my needs, but I am trying to get better at being Pythonic, so I was wondering if there is a one-liner that does not need the recursive helper function.
Chasing one-liners is the opposite of pythonic, but avoiding recursion is often a good idea. In this case, we can use  to take care of the hard part, and then wrap that in a listcomp:(I'm assuming you don't care too much about whether you see  or  first in the list.)And remember that if there's no need to materialize the list at all once, you could replace  and  with  and  to use a generator expression instead of a listcomp, which you could iterate over.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
