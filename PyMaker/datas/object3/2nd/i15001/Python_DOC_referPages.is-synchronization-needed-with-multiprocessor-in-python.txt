Natural Text
when using a code like this assuming the threads modify list_out, do they do that in a synchronous manner?
If your goal is calculate something in multiprocessing way, it's better do not share state.I propose you to use simple  from multiprocessing if it's possible: works like for-loop:So, if you want to use function that is accepting several arguments, you can use lambda function for unpacking tuple.
 thread pools are just threads and don't have any magic to generally synchronize shared objects. You need to protect shared objects with a lock.
The answer is that each process receives a copy of the list, and so won't see changes made by the other processes.To achieve what you want you will have to use a  to create a list proxy. Note that the manager proxy classes do not know when a member is mutated. For example, if an element of a list proxy is mutated somehow, the list proxy has no way of knowing this. You must reassign the member to flush the changes. An example from the documentation:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#managers
