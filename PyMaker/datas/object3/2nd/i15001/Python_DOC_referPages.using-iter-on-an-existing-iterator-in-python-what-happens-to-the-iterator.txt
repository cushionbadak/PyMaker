Natural Text
The iter function wraps objects like lists or tuples in order to use them as iterators, i.e. one is able to use , for example. For instance,returns 1.What happens internally if the object we pass to  is already an iterator? Does it simply return the original object, i.e. no-op? Or does it produce a new iterator wrapping the original one? And by wrapping I don't mean copying the original iterator, of course.
TLDNR:  returns . It doesn't return  "as is".The Cpython implementation of  is pretty straightforward:So when you call  and  exists it just returns that. Most (all?) built-in iterators have , e.g.but that's not necessary true for userland objects:
Empirical evidence is nice, but the docs are pretty explicit.Iterators are required to have an  method that returns the iterator object itselfIf you implement an object with a , you should have an  method that returns . Breaking this rule means you have an object that isn't an iterator but looks like one, which is a recipie for disaster.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/reference/datamodel.html#object.__iter__
