Natural Text
So how can I append the outcome to "list" for each new prime?Forgot to mention the function to check if num is prime:
Few points:Once you  is executed, the value it is applied to is returned to whoever called the function and the code after return never executes.You're shadowing the built-in function  which returns a new list by calling a local variable .The list is constantly reconstructed by calling  which is a shorthand for creating a new list containing only . What you want to do is update it using .Fixing the code, it may look something like:You can test this by calling .Tip: you could use  to do the same thing  does:A minor note about the difference between  and  is that you can change 's behaviour, which gives finer control, while 's generated code calls  directly (harder to change):It really does not matter in this case, but @Thrustmaster suggested using  in the comments since it some may see it as cleaner.
Oh, lot of minor syntax errors. Let me  them down..Python comments do not start with , but with . Ref. code line no: 2list is a keyword in python, you should not use that in your variable declaration. Line ref: 8.After you do a return, the code after that line will not be executed. Line Ref: 7.You should not initialize list inside the  loop. It is getting initialized in every iteration.Instead of , you can simply write .That said, the correct code should look as follows:Hope it helps .. :)
Your code looks to be a mix of C and Python (don't use // as comments).I assume your program is looking for prime numbers up to n. Here is how one might go about implementing this:
You're almost there. The strange thing about your code is where you've placed the  statement. Try this:Notice that your original return statement would have ended your function early, in fact even before your list would have had the chance to append any prime number at all. The other important point here is that you should never shadow a built-in type ( in this case), or other built-in functions (like , , etc.).It's also enough to simply initialize the  once and append the  integers inside the .
The other answers are good and address the main issue that you had with rebinding your list variable and failing to return the primes list from function .I think it's worth mentioning that a list comprehension can be used to succinctly code the prime list generation:Notes:Passing the "up to" value into the function is more flexible thanprompting for it in the function."Up to" should be inclusive, e.g. get_primes(0, 11) should include 11 in the result. Therefore you need to add one to the upper value when calling .Passing  and  allows you to generate primes for arbitrary ranges.You can wrap the list comprehension with  to have the result returned as a set.


Answer URL
https://docs.python.org/3/library/functions.html#func-list
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/tutorial/datastructures.html#sets
