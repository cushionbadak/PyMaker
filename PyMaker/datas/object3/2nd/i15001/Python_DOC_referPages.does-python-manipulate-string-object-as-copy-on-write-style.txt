Natural Text
I noticed that in python, string object keeps only one copy. Like below code:s1 and s2 point to the same object.When I edit s1, s2 still keeps the object ('abcde'), but the s1 points to a new copy. This behavior likes copy on write.So does python really use the copy on write mechanisim on string object?
No copying is taking place in any relevant sense.  Your new string is an entirely new string object.  It is no different than if you had done .  Some kinds of objects in Python allow you to modify them "in-place", but not strings.  (In Python parlance, strings are immutable.)Note that the fact that your two original strings are the same object is due to an implementation-specific optimization and will not always be true:
yes; both  and  will point to same object; because they are interned(based on some );like one rule is; you are only allowed ascii letters, digits or underscores;also; interesting thing is by default all 0 and length 1 strings are interned;if i will produce my string at runtime; it won't be interned;(from this link) and these expression based on above rules will be internedand that with the length less than equal to 20;and its all because python strings are immutable; you can't edit them;Python provides  Built-in Function; in python 3.x it is in  module;  You can read more at below given links:http://guilload.com/python-string-interning/Does Python intern strings?
It is creating a new string object in and of itself!is no different to:Note that this can slow down your program significantly if you're appending multiple times to a string (because you are really creating multiple strings). This is a known anti-pattern since every concatenation creates a new string. This results in O(N^2) running time
String are immutable. Thus you cant "edit" a string. You get a new copy, i.e. new string object,  in a place where you think you "edit" it.


Answer URL
https://docs.python.org/3/library/sys.html?highlight=sys.intern#sys.intern
