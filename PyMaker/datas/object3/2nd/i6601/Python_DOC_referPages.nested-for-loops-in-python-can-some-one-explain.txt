Natural Text
I'm studying how to use for loops and so on and I'm trying to come up with a way to make a string of similar characters sort itself so that no characters are repeatedI know that the first loop iterates through all the values in charsnum, but what are the second, third, and so on for loops iterating through? Also, what could be a good solution to making my string 'babbbaba' in to a string like 'bababababa' or 'ababababa' where no values repeat. 
You are asking several  loops to all iterate over the same, single iterator. You did not create copies, they share one object. The outer loop advances the  object by one step, then the next  loop advances it once to start its iteration, and so on. The innermost  loop takes the remaining items to iterate over, and by the time you go back up to the  loop there is nothing left to iterate over.You can do the same thing, advancing the iterator like  does, with the  function:You could create separate  objects for each  loop:but that's just more work than you need. For nested loops repeating the same iterable, use  and tell it to repeat; it'll keep copies as needed:This won't eliminate repeated characters, however; this produces the cartesian product of 4  tuples out of all possible such tuples from your  string.You probably want to create permutations form the unique letters, and string out the patterns those make into something the same length:This produces
The "problem" is not at the  loops, but at . The object  is a generator that yelds the next value everytime it is called.In the first  loop () it yelds the first item in  but in the inner loop ()  will yeld the next item in . So this inner loop will never access the first item in .
Your question and example are really confusing, I think this is what you are looking for.A way easier way to do this is to use a list comprehension, which will iterate through your set of characters in a more compact, pythonic manner.Result:Now you can iterate over your indices to check if they are equal to the previous.Result:Or if you want to print them out in a single string...Result


Answer URL
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/itertools.html#itertools.product
