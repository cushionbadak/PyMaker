Natural Text
I am struggling with the following, is my code correct and how to test if it works?Task: Take a string as a single input argument. You may assume the string consists of distinct lower case letters (in alphabetical order). You may assume the input is a string of letters in alphabetical order.Return a list of strings where each string represents a permutation of the input string. The list of permutations must be in lexicographic order. (This is basically the ordering that dictionaries use. Order by the first letter (alphabetically), if tie then use the second letter, etc.If the string contains a single character return a list containing that stringLoop through all character positions of the string containing the characters to be permuted, for each character:Form a simpler string by removing the characterGenerate all permutations of the simpler string recursivelyAdd the removed character to the front of each permutation of the simplerword, and add the resulting permutation to a listReturn all these newly constructed permutations[My code]
Some variation on this will get you moving:See https://docs.python.org/3/library/itertools.html#itertools.product


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/itertools.html#itertools.permutations
