Natural Text
I am reading the itertools recipe for unique_everseen:What is the point of defining  in the code above?
Performance. Using a local name to dereference the method is much faster than an attribute lookup (which has to bind a new method object each time):Using a local reference is almost 3 times as fast. Because the  is used in a loop, it is worth optimising away the attribute lookup.
That's a technique called "hoisting" or "Loop-invariant code motion". In essence you do an operation that is executed multiple times but always returns the same value outside the loop instead of in the loop body.In this case the loop would repeatedly lookup the  attribute of your  set and create a "bound method". That's actually pretty fast but still an operation that is performed several times inside a loop and always gives the same result. So you can look up the attribute (in this case the bound method) once and store it in a variable to gain some performance.Note that while this provides a speed-up it's by no means "much". I removed the second branch for this timing to make the code shorter:Some exemplaric timings:So while you get ~10% speedup in the no duplicates case it's actually almost useless in case you got lots of duplicates.Actually this recipe shows another example of "hoisting", more specifically the . This looks up the  method of your  set once and repeatedly calls it inside the . Maybe the take-away should be: Hoisting method lookups is a micro-optimization. It reduces the constant factor of your loop. The speedup may be worth it in certain operations but personally I think it should be used sparingly and only in combination with profiling/benchmarking.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
