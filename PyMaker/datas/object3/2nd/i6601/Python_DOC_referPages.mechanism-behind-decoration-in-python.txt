Natural Text
Below is an example of decorator in python. I don't quite get how it actually works for the doubly decorated decorator.It seems that the flow should be (I am not sure about it): is decorated, so it returns ., then  is now updated due to the function of The third part should be the update of seq, but I don't understand when is the  function used.
Decoration is just syntactic sugar for calling another function, and replacing the current function object with the result. The  dance you are trying to understand is over-using that fact. Even though it tries to make it easier to produce decorators, I find it doesn't actually add anything and is only creating confusion by not following standard practice.To understand what is going on, you can substitute the function calls (including decorators being applied) with their return values, and tracking the  references by imagining saved references to the original decorated function object: replaces the original  function with a call to itself. We'll just ignore the  call here to make substitution easier. The  call returns , where  is bound to the original, so now we haveso  is not actually called yet. It'll only be called when this new  lambda is called. then calls the above  (the one calling  and passing the result to ) and applies that lambda to the  function:which expands to:which is:Now,  just copies metadata from the second argument to the first returning the first argument, so that then leaves:with the right  and such set on the  function object. is again a decorator being applied, this time to , so we get:which can be expanded to:which if we take the return value of  iswith the metadata copied over from the original  to whatever the original  function returns.So in the end, all this dance gets you is  being applied to the return value from a decorator, which is the contained wrapper function.This is all way, way too complicated. The  function has a far more readable helper decorator already provided: . Your piece of code could be rewritten to:I simply replaced the  decorator on the  function definition with a  decorator on the contained wrapper function that is returned.


Answer URL
https://docs.python.org/3/library/functools.html#functools.update_wrapper
https://docs.python.org/3/library/functools.html#functools.wraps
