Natural Text
Below is an iterative calculation of Fibonacci Sequence. Code Source: brilliant.orgAs it is, the list  is a local variable inside the function and will be recreated and repopulated each time the  function is called. How could this code snippet be rewritten so that Python would not need to recalculate  once it was called and could use it the next time  or above was called? I know global variable is one option but what would be the most "Pythonic" way of doing this?
You can store the  in a variable outside the scope of the function. For instance:So each time we inspect the length of . In case we have not generated the requested index yet, we generate until we obtain the index. Regardless whether we extend the list, we eventually can return .Now we can extract the  function, with:If we now query twice for the 200'000th element, the second time it is faster.
You can memoize the results using a closure: In this case, the memo dict is created when the function is first executed (usually, when the module is loaded); it is persistent, and is populated as the function is called. 
Use  if you're using Python 3.2+.https://docs.python.org/3/library/functools.html#functools.lru_cache
Use a python dictionary and check if the key is present and return the result from dictionary or calculate and add the result to the dictionary before returning.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
