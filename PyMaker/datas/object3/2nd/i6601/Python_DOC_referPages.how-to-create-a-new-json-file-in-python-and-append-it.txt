Natural Text
Noticed an odd behavior when attempting to call  on a file opened in  mode (Python 3.4.1) As seen hereFile mode for creating+reading+appending+binaryIt's possible to open a file in read/append mode supposedly. HoweverThis code:returns . Which is unexpected based upon the answer posted above. Now, the following code returns , which is expected, but doesn't give us the option to append to the file.According to the specshttps://docs.python.org/2/library/functions.html#open   Which means When we open a file in  mode, we should be able to call  on it and get the contents of the file back, correct?Thoughts? Opinions? Etc??
 opens the file at the end for appending. You need to call  on it if you want to then read in its contents, but at that point you might as well just use , because that opens the file at the start.
This is a Python 2 vs. Python 3 issue. with  behaves differently in the two Python versions. (Note: You reveal you're using Python 3.4.1, but you're quoting the documentation for Python 2!)(In fact, the behavior you're looking for (in "Which means") works as intended with Python 2. I think they changed the behavior, because "appending" means "file pointer at end of file" to many folks.)Let's test this with Python3 ...Same thing with Python2 ...Conclusion: You're safe using the  always after opening a file with , regardless to which Python version you use. This seems to be specific to the  mode.Why does a system call behave differently across two Python versions?One would think file manipulation is a system call, hence it's handled by the operating system. This is different with Python, as it looks according to the Python documentation:Note: Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent.BTW, this behavior has been reported as a bug on the Python bug tracker.


Answer URL
https://docs.python.org/3/library/functions.html#open
