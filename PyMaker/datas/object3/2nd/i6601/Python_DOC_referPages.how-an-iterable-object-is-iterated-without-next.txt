Natural Text
I've done a research over similar questions on this subject, but didn't find a duplicate.It is stated that an object is iterable if it implements  protocol.:  Return the iterator object itself. This is required to allow both containers and iterators to be used with the for and in statements.:  Return the next item from the container. If there are no further items, raise the StopIteration exception.From my understanding this applies to all iterator objects. I've encountered a code that implements a binary-tree container. The container only has  and so does the node objects resides in it.The  implementation of the Node objects returns a generator. It yields objects and seems to do all the logic, without an implementation of .How this code actually works? It seems to function just as a regular iterator, but this one has no . Ofcourse if I manually do  and then  it works. Here is the code snippet:An example of running code
Your  method is a generator function, because it uses  in the function body. A generator function, when called, returns a generator object. It is that object that has a  method. Your  is not an iterator itself. It is merely an iterable object; an iterable object returns a new iterator instance when you call it's  method, which is what happens here.
A generator very much does have a  method. You just don't implement it yourself. A "function" with a  statement does not run your code. It returns an object that runs your code. That object has a  method.You may also want to note that there is one other mechanism for making an object iterable: providing  and  methods. In that case, iteration will occur over the indices from zero to len-1.


Answer URL
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement
