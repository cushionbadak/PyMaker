Natural Text
In Python, I have a decorator that has to skip any real work if a function is defined locally in the one that calls it. I made a simple testing script:It prints this:As I see, Python sees that the function is defined in a local space ( in the printed text), but I can't see how I can find that bit of data. I walked through the  module, and don't see anything similar.I can't rely on whether the function is in globals or not.What do I use?
First off, the direct approach is to check if the  flag is set on the function's code object:That said, there is another approach if what you care about is whether you've actually closed over anything. A function that doesn't use anything from the enclosing scope is nested, but not a closure, and that distinction is often important. So for example:is not making a closure because  makes use of no variables from the scope of the  call. By contrast, even though it's a garbage reference, this is making a closure simply by reading the value of  from the enclosing scope:You can tell the difference between  and  by testing the  attribute (which is  if no nested variables have been closed over) or by checking the  attribute of the  object (which is a tuple of names closed on, so if it's empty, then it's not a closure, though it may still be a nested function):
Well, here's a hacky approach:It seems brittle to me, though.Another approach is to play with the , but I like that even less, I think:


Answer URL
https://docs.python.org/3/library/inspect.html#code-objects-bit-flags
