Natural Text
I want to create my own parameterized type in Python for use in type hinting:Never mind the contrived example; how can I implement this? I looked at the source for Union and Optional, but it looks like some fairly low-level hackery that I'd like to avoid.The only suggestion in the documentation comes from an example re-implementation of  that inherits from Generic. But that example is more about the  method than about the class itself.
If you're just trying to create generic classes or functions, try taking a look at the documentation on mypy-lang.org about generic types -- it's fairly comprehensive, and more detailed then the standard library typing docs.If you're trying to implement your specific example, it's worth pointing out that type aliases work with typevars -- you can simply do:However, if you're trying to construct a generic type with genuinely new semantics, you're very likely out of luck. Your remaining options are to:Construct some kind of custom class/metaclass thing that PEP 484-compliant type checkers can understand and use that.Modify the type checker you're using somehow (mypy has an experimental "plugin" system, for example)Petition to modify PEP 484 to include your new, custom type (you can do this by opening an issue in the typing module repo).
It is exactly the  method that does all the magic. That is the method called in when you subscribe one name with  and  brackets.So, you need an   method in the class of your class - that is, its metaclass, that will get as parameters whatever is within the brackets. That method is responsible for dynamically creating (or retrieving a cached copy)  of whatever you want to generate, and return it.I just can't possibly imagin how you want this for type hinting, since the typing library seems to cover all reasonable cases (I can't think of an example they don't cover already). But let's suppose you want a class to return a copy of itself, but with the parameter anotated as its  attribute:And on trying this in interactive mode, one can do:


Answer URL
https://docs.python.org/3/library/typing.html#typing.Generic
