Natural Text
This question already has an answer here:How to make a list of integers that is the sum of all the integers from a set of lists in a dict?                    2 answers                I am having trouble iterating across an entire dictionary to do simple summary statistics (an average) for each element of a value across keys. My dictionary consists of keys and values that are lists of numbers:I know that I can access the first value of each key, for instance, by doing the below, but I am having trouble with the obvious next step of adding another for loop to iterate across all elements in the values. My ultimate goal is to have a dictionary with labels as keys (Location 1...i) and the average value across states for that location. So the first key-value would be Location1: 40, and so on. I have the below attempt, but the error message is 'list index out of range' and i do not know how to iterate properly in this case. Adding desired output per requestsThank you for your help!
Just do :This will print :Edit : As per change in OP requirements :Note : the average you have put in question for loaction4 is wrong.
You can do this:And for a dictionary:Answer to the edited question:If the arrays always have a length of 5, use this:Output:
Not sure where your error lies but the  is a dead giveaway for "using indices where it's not useful / harmful".Your problem has a straight input/output data stream, and is a perfect match for using dictionary comprehension, iterating on the key, values and rebuilding the dict with the mean as value:gives:EDIT: you seem to want a "transposed" version with anonymized keys, in that case, just use the zipped version of the values:gives:
To keep it as simple as possible, I would I suggest:Which gives:I divided to conquer: I turned this dictionary into a list of lists, and then used zip to put the "columns" together. Since zip expects arguments separated by a comma and not a list, I used the star operator () to do the conversion.I am not sure were one should get the list of places from? Is it just  + the index no? (If yes, why not leaving it in a list?)For the mean function, see the statistics package (for Python > 3.4). Otherwise you can write your own:I took inspiration from Finding the average of a list. That is perhaps a a little cryptic and it might have been clearer to write a function without , but a one-liner makes it much easier to copy and paste.If you are in Python 3, import  from .


Answer URL
https://docs.python.org/3/library/statistics.html
