Natural Text
I need to parse a huge text file (100s of GB) and do some analysis. I though of splitting the text file and parse through that block and append values in dictionary similar to belowI use if condition inside for loop. Will it affect the performance.Is there any other efficient way to do this with less time 
According to Python docs all you need to do is use context manager:The  construct is suggested because is handling all the  file operations even if there is an exception, so ti avoids you to use a  block. Moreover the  is also suggested in the same doc page for memory efficency. I quote from documentation:For reading lines from a file, you can loop over the file object. This  is memory efficient, fast, and leads to simple code: 
The best way is to read the file line by line and process each line accordingly (as @rakwaht suggested)But, cpu performance is going to be high when you read the file line by line. It reaches  whenever the program is running.Now, if you want to avoid that cpu performance hike, introduce a sleep counter (this doesn't need to be in seconds just  would do)Experiment with the sleep timer. For me, when I used , the cpu performance fell down to . If you need much below than that, you can increase it to . Just try to keep it below , other wise your program will be slow as well.Note 1: Always try to reduce the cpu performance. Because, when you are trying to read a 1GB file, it takes quite a bit of time. You don't want the cpu hike for the whole time. Other processes wouldn't work. Now imagine if you have a 4GB file or more than that. CPU is going to be stacked up - by the time you complete your program's execution you will hear that high revolving speed of the system cooling fan - this makes you to not even open another application.Note 2: Also, never try to store anything in memory when you are processing such huge files. Memory usage exponentially increases in these kind of programs. Try to use more of generators


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
