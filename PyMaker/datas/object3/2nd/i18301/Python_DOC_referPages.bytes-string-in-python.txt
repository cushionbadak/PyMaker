Natural Text
Would you know by any chance how to get rid on the bytes identifier in front of a string in a Python's list, perhaps there is some global setting that can be amended?I retrieve a query from the Postgres 9.3, and create a list form that query. It looks like Python 3.3 interprets records in columns that are of type  as if the they are bytes strings, for example: So the implication is:I have some control over that database so I could change the column type to , and it works well:But this is only a temporary solution. The little b  makes my life a nightmare for the last two days ;), and I would appreciate your help with that problem.Thanks and RegardsPeter
You have to either manually implement / or, if you're willing to take the risk, do some sort of Regex-replace over the string.Example :
The  isn't part of the string, any more than the quotes around it are; they're just part of the representation when you print the string out. So, you're chasing the wrong problem, one that doesn't exist.The problem is that the byte string  is not the same thing as the string . In this particular example, that may seem silly, but if you might ever have any non-ASCII characters anywhere, it stops being silly.For example, the string  is the same as the byte string  in Latin-1, and it's also the same as the byte string  in UTF-8. And of course  is the same as the string  in Latin-1.So, you have to be explicit about what encoding you're using:But why is PostgreSQL returning you byte strings? Well, that's what a char column is. It's up to the Python bindings to decide what to do with them. And without knowing which of the multiple PostgreSQL bindings you're using, and which version, it's impossible to tell you what to do. But, for example, in recent-ish psycopg, you just have to set an  in the connection (e.g., ; in older versions you had to register a standard typecaster and do some more stuff; etc.; in py-postgresql you have to register ; etc.


Answer URL
