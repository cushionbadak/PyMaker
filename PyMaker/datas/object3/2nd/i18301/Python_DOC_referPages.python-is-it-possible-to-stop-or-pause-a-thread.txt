Natural Text
I have two threads, and, I want one thread to run for 10 seconds, and then have this thread stop, whilst another thread executes and then the first thread starts up again; this process is repeated. So e.g. (P.S. I have indented correctly, however, SO seems to have messed it up a bit)Basically, what I want is:The worker thread works for 10 seconds (or so) and then stops, the "processor" starts up and, once the processor has processed the data from the last run of the "Worker" thread, it then re-starts the "worker" thread up. I don't specifically have to re-start the "worker" thread from that current position, it can start from the beginning.Does anyone have any ideas? 
You can use a counting semaphore to block a thread, and then wake-it-up later.A counting semaphore is an object that has a non-negative integer count. If a thread calls  on the semaphore when the count is 0, the thead will block until the semaphore's count becomes greater than zero. To unblock the thread, another thread must increase the count of the semaphore by calling  on the semaphore.Create two semaphores, one to block the worker, and one to block the processor. Start the worker semaphore's count a 1 since we want it to run right away. Start the processor's semaphore's count to 0 since we want it to block until the worker is done.Pass the semaphores to the worker and processor classes. After the worker has run for 10 seconds, it should wake-up the processor by calling , then it should sleep on its semaphore by calling . The processor does the same.
See Alvaro's answer. But if you must really use threads then you can do something like below. However you can call  on a  object only once. So either your data should preserve state as to where the next  thread should start from and you create a new worker thread in  every time or try to use a critical section so that the  and  threads can take turns to access it.


Answer URL
