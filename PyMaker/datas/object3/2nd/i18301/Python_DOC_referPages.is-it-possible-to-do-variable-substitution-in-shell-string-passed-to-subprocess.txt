Natural Text
Let's say I have this:How can I substitute  to  in the  call ?
The right thing to do here, if possible, is to not do variable substitution. And, in fact, to not use the shell in the first place. What you really want is to pass  an argument; the only reason you need to do that through variable substitution is that you're not running , you're running a shell and trying to figure out how to get it to run  for you the way you want.If you just want to do the equivalent of a shell , you do that with Python's string-processing commandsâ€”ideally , as Martijn Pieters suggests. But that this won't work if, say,  has a space in it. Or special shell characters. Or, worse, it will work, but not the way you want it to (e.g., if  is .You can try to write code to sanitize, and then properly quote, all of your strings, but it's a fool's errand. The simple solution is to just not use the shell for anything but the simplest cases (like a literal shell pipeline string). The  docs have a whole section on replacing older functions and shell functions, which includes Replacing shell pipeline.So:Now, you've got a  that acts the same as in your original example, except that  is just a normal argument to , not a string that you have to quote and sanitize and cram into a shell string.If you're doing a lot of this, you can wrap this up pretty easily, or use any of the 69105 libraries on PyPI that do that for you (ranging anywhere from libraries that keep it simple to those that use clever tricks to make your Python pipelines look like bash).
Use string interpolation, like :But do heed the warnings on the  documentation about executing untrusted commands in your shell.


Answer URL
