Natural Text
This question already has an answer here:Why is Python 3 not backwards compatible? [closed]                    1 answer                I am missing the point why Python3 has commands that are not compatible with Python2.For example the command print 'hello'does work in Python2 and not in Python3. Why?I would expect Python3 to be compatible with Python2, the same as C#4 is compatible with C#2 for example.
I am missing the point why Python3 has commands are not compatible with Python2.Because Python 3 is not the same language as Python 2.Python releases normally are mostly backwards compatible with previous versions; Python 2.7 is largely backwards compatible with Python 2.6.However, from the start, Python 3 (or 3000 as its design project originally codenamed) was specifically different. Quoting from one of the design documents:Python 3000 will introduce a number of backwards-incompatible changes to Python, mainly to streamline the language and to remove some previous design mistakes.)So, Python 3 is not backwards compatible to correct specific errors in the language that could not be corrected with backwards compatible changes. The use of a statement to write to  instead of a function is one of those changes;  has been replaced by a function .Different language and software projects use different standards for what their version numbers mean. Python sticks to the major-minor-micro scheme; releases within the same major number are largely backwards compatible, releases within the same minor number only contain bug fixes. See the Python version number FAQ:Python versions are numbered  or .  is the major version number – it is only incremented for really major changes in the language.  is the minor version number, incremented for less earth-shattering changes.  is the micro-level – it is incremented for each bugfix release. See PEP 6 for more information about bugfix releases.Python is also quite a bit older than C#. Python development started in 1989, and version 2.0 came out in 2000. C# on the other hand has only been around since 2002; perhaps in another decade or so it too will see a backwards-incompatible change.
Because in Python 2,  is a statement. But  is now a function in Python 3. However,  is still valid syntax in Python 2, and you can also do  to get Python 3's print function in Python 2.Don't expect python 3 to be compatible with 2; there are many other changes. For example,  was removed, and most built-in functions now return generators that once returned lists (eg , , and ).
python3 has a tool named "2to3". This tool will help you to convert python2.x source code to python3.x source code.Read the manual http://docs.python.org/2/library/2to3.html 


Answer URL
