Natural Text
How do I get my decimals to stay at 2 places for representing money using the  module?I've setting the precision, and damn near everything else, and met with failure.
When working with money you usually want to limit precision as late as possible so things like multiplication don't aggregate rounding errors. In python 2 and 3 you can  a  to any precision you want:
The accepted answer is mostly correct, except for the constant to use for the rounding operation. You should use  instead of  for currency operations. According to the docs:decimal.ROUND_HALF_UP    Round to nearest with ties going away from zero.decimal.ROUND_05UP    Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.Using  would only round up (for positive numbers) if the number in the hundredths place was a 5 or 0, which isn't correct for currency math.Here are some examples:
Falsehoods programmers believe about money:Monetary values can be stored or represented as a floating point.All currencies have a decimal precision of 2.All ISO 4217 defined currencies have a decimal precision.All currencies are defined in ISO 4217.Gold is not a currency.My system will never have to handle obscure currencies with more than 2 decimal places.Floating point values are OK if the monetary value of transactions is "small".A system will always handle the same currency (therefore we do not persist the currency, only the monetary value).Storing monetary values as signed long integers will make them easier to work with, just multiply them by 100 after all arithmetic is done.Customers will never complain about my rounding methods.When I convert my application from language X to language Y, I don't have to verify if the rounding behavior is the same.On exchanging currency A for currency B, the exchange rate becomes irrelevant after the transaction.
One way to solve this is to store money values in cents as integers, and only convert to decimal representation when printing values. This is called fixed point arithmetic.
You just have to set the precision to 2 (the first line) and them everything will use no more than 2 decimal placesJust for comparison:


Answer URL
https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_UP
