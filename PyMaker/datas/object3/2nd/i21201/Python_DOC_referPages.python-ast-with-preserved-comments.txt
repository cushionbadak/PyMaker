Natural Text
I can get AST without comments usingCould you show an example of getting AST with preserved comments (and whitespace)?
The  module doesn't include comments.  The  module can give you comments, but doesn't provide other program structure.
An AST that keeps information about formating, comments etc. is called a Full Syntax Tree.redbaron is able to do this. Install with  and try the following code.
This question naturally arises when writing any kind of Python code beautifier, pep-8 checker, etc. In such cases, you are doing a source-to-source transformations, you do expect the input to be written by human and not only want the output to be human-readable, but in addition expect it to:include all comments, exactly where they appear in the original.output the exact spelling of strings, including docstrings as in the original.This is far from easy to do with the ast module. You could call it a hole in the api, but there seems to be no easy way to extend the api to do 1 and 2 easily.Andrei's suggestion to use both ast and tokenize together is a brilliant workaround. The idea came to me also when writing a Python to Coffeescript converter, but the code is far from trivial.The  (ts) class starting at line 1305 in py2cs.py coordinates communication between the token-based data and the ast traversal. Given the source string s, the  class tokenizes s and inits internal data structures that support several interface methods:: Returns a list of the preceding comment and blank lines.: Return a string containing the trailing comment for the node, if any.: Return the spelling of the string at the given node.It is straightforward, but just a bit clumsy, for the ast visitors to use these methods.  Here are some examples from the  (cst) class in py2cs.py:This works provided that ast.Str nodes are visited in the order they appear in the sources.  This happens naturally in most traversals.Here is the ast.If visitor.  It shows how to use  and :The  method compensates for the fact that there are no ast nodes representing 'else' clauses. It's not rocket science, but it isn't pretty:Note that  just calls .SummaryThe TokenSync class encapsulates most of the complexities involved in making token-oriented data available to ast traversal code. Using the TokenSync class is straightforward, but the ast visitors for all Python statements (and ast.Str) must include calls to ,  and . Furthermore, the  hack is needed to handle "missing" ast nodes.In short, the code works well, but is just a bit clumsy.@Andrei: your short answer might suggest that you know of a more elegant way. If so, I would love to see it.Edward K. Ream
A few people have already mentioned lib2to3 but I wanted to create a more complete answer, because this tool is an under-appreciated gem. Don't bother with . is comprised of a few parts:the parser: tokens, grammar, etcfixers: library of transformationsrefactor tools: applies fixers to a parsed astthe command line: choose fixes to apply and run them in parallel using multiprocessingBelow is a brief introduction to using  for transformations and scraping data (i.e. extraction).TransformationsIf you'd like to transform python files (i.e. complex find/replace), the CLI provided by  is fully featured, and can transform files in parallel.To use it, create a python package where each sub-module within it contains a single sub-class of .  See  for lots of examples.Then create your executable script (replacing "myfixes" with the name of your package):Run  to see the options.ScrapingIf your goal is to gather data, but not transform it, then you need to do a little more work.  Here's a recipe I whipped up to use  for data scraping:And here's a simple scraper that finds the first comment after a function def:
Other experts seem to think the Python AST module strips comments, so that means that route simply won't work for you.Our DMS Software Reengineering Toolkit with its Python front end will parse Python and build ASTs that capture all the comments (see this SO example).  The Python front end includes a prettyprinter that can regenerate Python code (with the comments!) directly from the AST.  DMS itself provides the low-level parsing machinery, and a source-to-source transformation capability that operate on patterns written using the target language (e.g., Python) surface syntax.
If you're using python 3, you can use , which is based on lib2to3, but provides a much nicer API and CLI for creating transformation scripts. https://pybowler.io/


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/tokenize.html
