Natural Text
I'm debugging a python script, and I want to watch a variable for a change (much like you can watch a memory adress in gdb).  Is there a way to do this?
Here is a really hacky way to do this with . These commands can be put in your  for automatic loading every time you use .This adds two commands,  and  which each take a variable name varname as an argument. They will make a shallow copy of the current frame's local variable for varname if possible, and keep executing  or  respectively until what that name points to changes.This works in CPython 2.7.2 but relies on some  internals so it will probably break elsewhere.
For watching a variable when you are hitting a breakpoint, you can use the  command. E.g. printing  when hitting breakpoint #1 (canonical example from  doc).Update for Python 3Additionally, you can use the  command to ensure the breakpoint is only hit whenever the variable takes a certain value.eg:
For Python 3:you can use display functionality of pdbOnce you hit the breakpoint just type ipdb> display expressionexample:as you can see, each time you type display - it will print all of your watches (expressions). You can use builtin function  to remove certain watch.You can also use pp expression to prettyprint the expression (very useful)
A possible solution is to use pdb++:Then "mark" the object you want to watch with the decorator :Here  will break on any change of the attribute  on any Foo-object.CaveatsOnly invocations of the underlying -method will trigger the breakpoint. This means that  and  will work, but manipulating the -object will not trigger the breakpoint:Note:  is not part of the standard -module.  is overridden/monkey-patched by the -package.You can also wrap an existing object (via its class) after :


Answer URL
https://docs.python.org/3/library/pdb.html#pdbcommand-display
