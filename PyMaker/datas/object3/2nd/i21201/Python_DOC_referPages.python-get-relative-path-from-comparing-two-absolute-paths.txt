Natural Text
Say, I have two absolute paths. I need to check if the location referring to by one of the paths is a descendant of the other. If true, I need to find out the relative path of the descendant from the ancestor. What's a good way to implement this in Python? Any library that I can benefit from?
os.path.commonprefix() and os.path.relpath() are your friends:You can thus test whether the common prefix is one of the paths, i.e. if one of the paths is a common ancestor:You can then find the relative paths:You can even handle more than two paths, with this method, and test whether all the paths are all below one of them.PS: depending on how your paths look like, you might want to perform some normalization first (this is useful in situations where one does not know whether they always end with '/' or not, or if some of the paths are relative).  Relevant functions include os.path.abspath() and os.path.normpath().PPS: as Peter Briggs mentioned in the comments, the simple approach described above can fail:even though  is not a common prefix of the paths.  Forcing all paths to end with '/' before calling  solves this (specific) problem.PPPS: as bluenote10 mentioned, adding a slash does not solve the general problem. Here is his followup question: How to circumvent the fallacy of Python's os.path.commonprefix?PPPPS: starting with Python 3.4, we have pathlib, a module that provides a saner path manipulation environment. I guess that the common prefix of a set of paths can be obtained by getting all the prefixes of each path (with ), taking the intersection of all these parent sets, and selecting the longest common prefix.PPPPPS: Python 3.5 introduced a proper solution to this question: , which returns a valid path.
:Return a relative filepath to path either from the current directory or from an optional start point.So, if relative path starts with  - it means that the second path is not descendant of the first path.In Python3 you can use :
Another option is
I looked for a solution with python2 and w/o any external dependency. Didn't find anything matching my needs. And while commonprefix, does only compare strings and not path elems, I wrote this: Any comments welcome!
Edit : See jme's answer for the best way with Python3.Using pathlib, you have the following solution :Let's say we want to check if  is a descendant of , and both are  objects.We can get a list of the parts in the path with .Then, we just check that the begining of the son is equal to the list of segments of the parent.If you want to get the remaining part, you can just doIt's a string, but you can of course use it as a constructor of an other Path object.


Answer URL
https://docs.python.org/3/library/pathlib.html#
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parents
https://docs.python.org/3/library/os.path.html#os.path.commonpath
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to
