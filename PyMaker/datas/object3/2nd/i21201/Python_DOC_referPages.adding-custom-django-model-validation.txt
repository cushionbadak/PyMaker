Natural Text
I have a Django model with a start and end date range. I want to enforce validation so that no two records have overlapping date ranges. What's the simplest way to implement this so that I don't have to repeat myself writing this logic?e.g. I don't want to re-implement this logic in a Form and a  and an admin form and the model's overridden .As far as I know, Django doesn't make it easy to globally enforce these types of criteria. Googling hasn't been very helpful, since "model validation" typically refers to validating specific model fields, and not the entire model contents, or relations between fields.
The basic pattern I've found useful is to put all my custom validation in  and then simply call  (which calls  and a few other methods) from inside , e.g.:This isn't done by default, as explained here, because it interferes with certain features, but those aren't a problem for my application.
I would override the  method on the model. To make sure you ignore the current object when validating, you can use the following: will automatically call this for you through a , which you can use manually too.PPR has a nice discussion of a simple, correct range overlap condition.
I think you should use this:https://docs.djangoproject.com/en/dev/ref/models/instances/#validating-objectsJust define clean() method in your model like this: (example from the docs link)


Answer URL
https://docs.python.org/3/library/functions.html#super
