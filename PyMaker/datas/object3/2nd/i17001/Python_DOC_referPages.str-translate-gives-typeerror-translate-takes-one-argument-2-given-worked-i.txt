Natural Text
I have the following code I've tested lines 2-4 in a separate testing.py file when I wroteand the command prompt returns ['the','the','the'], which is what I wanted (removing punctuation).However, when I put the exact same code in a different file, python returns a TypeError stating thatjson_list is a list of all the file paths (I printed and check that this list is valid). I'm confused on this TypeError because everything works perfectly fine when I'm just testing it in a different file.
If all you are looking to accomplish is to do the same thing you were doing in Python 2 in Python 3, here is what I was doing in Python 2.0  to throw away punctuation and numbers:Here is my Python 3.0 equivalent:Basically it says 'translate nothing to nothing' (first two parameters) and translate any punctuation or numbers to  (i.e. remove them).
I suspect your issue has to do with the differences between  and  (these are also the differences between  on Python 2 versus Python 3). I suspect your original code is being sent  instances while your test code is using regular 8-bit  instances.I don't suggest converting Unicode strings back to regular  instances, since  is a much better type for handling text data (and it is the future!). Instead, you should just adapt to the new  syntax. With regular  (on Python 2), you can pass an optional  argument and the characters in it would be removed from the string. For  (and  on Python 3), the extra argument is no longer allowed, but translation table entries with  as their value will be deleted from the output.To solve the problem you'll need to create an appropriate translation table. A translation table is a dictionary mapping from Unicode ordinals (that is, s) to ordinals, strings or . A helper function for making them exists in Python 2 as  (and Python 3 as a method of the  type), but the Python 2 version of it doesn't handle the case we care about (putting  values into the table). You can  build an appropriate dictionary yourself with something like .
This is how translate works:Replace the characters in  with the character in the same position in and delete all characters that are in . The  and  can beempty strings and the  parameter can be omitted.example:output:    here:
Python 3.0:static str.maketrans(x[, y[, z]]) This static method returns a  translation table usable for .If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or . Character keys will then be converted to ordinals.If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in  will be mapped to the character at the same position in . If there is a third argument, it must be a string, whose characters will be mapped to  in the result.https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans
