Natural Text
I am pretty new to programming, I just recently finished the Python course in Codecademy, so I am sorry if this is a dumb question. I am working on a game so I can get more practice with what I already know. What I am trying to do is be able to read and write lists as well as mixed in variables in the .txt file. Here is what I have.save_list is just the list I am extracting the variables and list from, I know it is probably not needed. On my fifth part of the list is where I want my other list to be, but I do not know how to get it out of its string form and turn it into a list. I know if this whole file was just one list I could iterate through it to make a list, but since I have other things around it, it's not that simple.This is an example of what my save file(.txt) might look like. I need to figure out how to load the ["This part is supposed to be a list"] line as a list.Also, it may be important to know my list will not stay the same size.Any help is much appreciated, thank you.
Although this does not answer your original question I think it would be better if you used JSON rather than a plain-text file. Using JSON, you won't have to deal with difficulties like parsing a list from a text file. To do this create a json file (mine is called "player.json") that has a structure something like this:{ "player": "GoofyBall", "level": 2000, "items": [ "dagger",  "sword",  "wand of doom" ] }You can then parse the file for the desired attributes. Here I have reduced the json file to just a few attributes for demonstration purposes but you can add to it as required:I hope this helps your game. 
The piece of info that we need to set here is how the data in the file is formatted. For example we could put an element on each line:and I would call this "line delimited". What I would suggest is storing and loading the data in the JSON format.more documentation can be found here.
I do not understand quite what you mean. Should be clearer.But from what I saw you are going to work manipulating data of different types.It would be easier if you post the contents of the file: savegame.txt.For example. If this file has the following line in 5 Content: Item 1, Item 2, Item 3.You can get a new list using the split.As follows:player_items = save_list.[5].split (",")The split works with a key character. In the example above I have used ','This will return you to a new list: ["Item 1", "Item 2", "Item 3"]
Something likeA list can be converted to a string using , as in . This assumes that the elements of mylist are already strings. The string can then be converted back to a list of string using , as in .Using global variables is usually a bad idea because (a) it ties your function to a single set of variables - if you want to load a second character, you have to write another function; (b) it makes debugging harder because it is not obvious where data-changes are coming from; and (c) it clutters your global scope with lots of extraneous variables.Making your function return a set of values or data structure is an improvement, in that it allows you to reuse code and reduces clutter; but it tends to lead to a whole bunch of functions that do various things to a data structure and often a bunch of similar-but-not-identical structures, with related almost-the-same functions and clutter and confusion.The next step is make the various functions "belong to" their associated data structure - this is known as "object orientation" and is implemented in Python as a class. My code above creates a Player class which holds all related data for a single player and has member functions which can initialize a player, load one from file, or save back to file. I then have a main() function which demonstrates loading a player's data.Several people have suggested using JSON as a storage type. This can be convenient, as it automatically converts strings and integers, lists and dictionaries; it is also easily edited by text editor or in other programs. On the other hand, it can be a bit of a trap, in that you end up dealing with a "bag of data" with associated clutter; it is unable to handle arbitrary data types ie classes.


Answer URL
https://docs.python.org/3/library/json.html?highlight=json#module-json
