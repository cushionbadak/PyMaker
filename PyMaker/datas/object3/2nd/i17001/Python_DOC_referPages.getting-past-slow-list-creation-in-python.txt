Natural Text
Good evening!I was running some tests on lists and list creation vs iterator creation and I came across some staggering time differences. Observe the following:The iterator version returned by the first test runs more than 6x as fast as converting to a list. I understand basically why this might be occurring, but what I'm more interested in is a solution. Does anyone know of a data structure similar to a list that offers fast creation time? (Basically, I want to know if there is a way to go straight from iterator (i.e.  or  function, etc.), to a list without any major performance hits)Things I can sacrifice for speed:Appending, inserting, popping and deleting elements.Slicing of elements.Reversing the list or any inplace operators like sort.Contains () operator.Concatenation and multiplication.All suggestions are welcome thanks!EDIT: Indeed this is for python 3.
To further extend the answers of the other two guys:You had a misconception about the iterator. But you refer to as "slow creation time", and then you look for a "faster container", because of your misinterpretation.Note that the creation of a list object in python is fast:What you experience as slow is the actual loop that you need to do calculate the values that need to go into the list.see a very unoptimized example of slowly "creating" a new list of another list:the time that is spent is actually on the loop, that is "slow" in python.This is actually what you are doing here technically if you compare:There is a way to speed this up though:although not by much given this kind of function. The thing is: the slow part here is the math, not the list and not the container. You can prove this by using numpyWoah... crazy speedup.With the benchmarking - I find myself guilty of this quite often as well - people doubt the system too often but themselves not often enough. So it's not like python is very unoptimized or "slow" it's just that you're doing it wrong. Don't doubt the python list efficiency. Doubt your slow, inefficient code. You will probably get it right quicker...It seems here the pure python ** operator is very slow, as a simple multiplication is much quicker:
In Python 3.x,  doesn't create a list, but just an iterator, unlike Python 2.x.To really get a list, iterate it with the  function, like thisSo, you are really not comparing two similar things.
Expanding on thefourtheye's answer; The expressions inside the map function will not be evaluated before you iterate over it. This example should be pretty clear:


Answer URL
https://docs.python.org/3/library/functions.html#map
