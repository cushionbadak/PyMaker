Natural Text
I am new to Python and am trying to create a program for a project- firstly, I need to generate a point between the numbers 0-1.0, including 0 and 1.0 ([0, 1.0]). I searched the python library for functions (https://docs.python.org/2/library/random.html) and I found this function: This will return the next random floating point number in the range [0.0, 1.0). This is a problem, since it does not include 1. Although the chances of actually generating a 1 are very slim anyway, it is still important because this is a scientific program that will be used in a larger data collection.I also found this function:This will return an integer, which is also a problem. I researched on the website and previously asked questions and found that this function:will only return a number that is greater than or equal to a and less than b.Does anyone know how to create a random function on python that will include [0, 1.0]?Please correct me if I was mistaken on any of this information. Thank you.*The random numbers represent the x value of a three dimensional point on a sphere.
Consider the following function built on top of . I believe that the re-sampling approach should cause all numbers in the desired interval to appear with equal probability, because the probability of returning  is , and originally all numbers should be equally likely.As gnibbler mentioned below, for the general case, it may make more sense to change both the calls to the following. Note that this will only work correctly if .
Could you make do with something like this?Or more formally:
Try this:Which will, according to the documentation [Python 3.x]:Return a random floating point number N such that  for  and  for .Notice that the above paragraph states that  is in fact included in the range of possible values returned by the function. However, beware of the second part (emphasis mine):The end-point value b may or may not be included in the range depending on floating-point rounding in the equation .
Would it be just:Generate a list of random numbers and divide it by its max value. The resulting list still flows uniform distribution.
For floating point numbers you can use numpy's machine limits for floats class to get the smallest possible value for 64bit or 32bit floating point numbers. In theory, you should be able to add this value to b in  making 1 inclusive in your generator:This assumes that you are using full precision floating point numbers for your number generator. For more info read this Wikipedia article.   


Answer URL
https://docs.python.org/3/library/random.html#random.uniform
https://docs.python.org/3/library/random.html#random.uniform
