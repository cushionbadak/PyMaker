Natural Text
I've seen this SO question (this is not a duplicate): Python bare asterisk in function argumentIn python-3.x you can add a bare  to the function arguments, this means that (quote from docs):Parameters after “*” or “*identifier” are keyword-only parameters and  may only be passed used keyword arguments.Ok, so, I've defined a function:I can pass ,  and  variable values only by specifying keywords:Questions are:What is the motivation for this kind of restriction/syntax sugar? What use cases does it cover?Is it really used in third-party libraries that switched to python3?Some "real-world" examples would help a lot. Thanks in advance.
PEP 3102 explains the rationale pretty clearly: the point is to allow functions to accept various "options" that are essentially orthogonal in nature.  Specifying these positionally is awkward both on the defining and calling side, since they don't have any obvious "priority" that would translate into a positional order.There are lots of example of functions that would benefit from this in various libraries.  For instance, the call signature of  is:Except for the filepath, most of these are orthogonal options that specify different aspects of how a CSV file is to be parsed.  There's no particular reason why they would be passed in any particular order.  You'd go nuts keeping track of any positional order for these.  It makes more sense to pass them as keywords.Now, you can see that pandas doesn't actually define them as keyword-only arguments, presumably to maintain compatibility with Python 2.  I would imagine that many libraries have refrained from using the syntax for the same reason.  I don't know offhand which libraries (if any) have started using it.
For those who are coming from or/and used Below expression in pythonis similar to in ruby. Since, python is explicit is better than implicit  langauge, it requires  (splat) operator in parameters. PS: I never used python, if i am mistaken please correct me.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
