Natural Text
Given a list consisting of 1 to 50 integers in the range of -1000 to 1000, calculate the maximum product of one or any number of integers within the list given.My approach:The results timed out. I want to optimize the structure of the procedure to be as efficient as possible. 
Going through all the combinations is a bad idea unless you have months for the calculation. If all numbers were positive, You would just multiply them all. If all were negative You would take even number of them. If You have to skip one, skip the biggest (-2 is bigger than -5). Adding zero to the mix returns always zero, which is worse than any of the previous cases. If there is no positive number and there are zero or one negative numbers, just take the biggest number You have. It can be zero or the only negative number You have. and here are some test cases:
maximum product can be achieved by multiplying all integers if count of negative is even else maximum product will be leaving the negative (closest to zero) and multiply all others. for n=1 print the number as it is.EDITED :and then return ans from your function.this is a O(n) solution. 
You could use a two-phase algorithm for O(n) time complexity. First multiply all the positive numbers with each other and in case there are no positive numbers pick the largest one. With  this can be easily done with one line.On the following step filter out all negative numbers. If there's more than one multiply them all together. In case the multiplication results to negative number (= there's odd amount of negative numbers) divide the result with maximum of the negative numbers. Then multiply the product you got in step one with product of step 2 for the final result. In case product of step 1 was non-positive number then product of step 2 is the result.Output:If you're using Python 2 there's no need to import  since it's a built-in and instead of floordiv just use regular one.
This can be optimized in a few ways. First, instead of hosting everything in an array, have a variable  which is initialized to  and each product is checked against. Additionally, instead of doing the multiplication yourself, you can use mul from the  module with reduce. Finally, I would use  as in Python 2 it does not create an array making it more efficient than  This would make your code look like thisI left the return as , but you can return it as  which is an integer if you want.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
