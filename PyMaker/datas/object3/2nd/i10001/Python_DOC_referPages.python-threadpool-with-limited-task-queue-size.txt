Natural Text
My problem is the following: I have a  object with  workers and a main  from which I feed tasks to the pool. The flow is as follows: There is a main loop that gets an item of  level from  and submits it tot the pool using . When the item is processed, it generates items of . The problem is that the pool accepts all tasks and processes them in the order they were submitted. More precisely, what is happening is that the  items are processed and each generates 100  items that are retrieved immediately from  and added to the pool, each  item produces 100  items that are submitted to the pool, and so on, and the items are processed in an BFS manner. I need to tell the pool to not accept more than  items in order to give a chance of higher level to be retrieved from  in order to process items in a DFS manner. The current solution I came with is: for each submitted task, save the  object in a  list, and before retrieving items from  I remove the items that were processed (if any), check if the length of the  is lower than the number of threads in the pool every 0.5 seconds, and like that only  items will be processed at the same time.I am wondering if there is a cleaner way to achieve this behaviour and I can't seem to find in the documentation some parameters to limit the maximum number of tasks that can be submitted to a pool.
 is a simple tool for a common task. If you want to manage the queue yourself, to get DFS behavior; you could implement the necessary functionality on top  and  modules directly.To prevent scheduling the next root task until all tasks spawned by the current task are done ("DFS"-like order), you could use :The code example is derived from the example in the  module documentation.The task at each level spawns  direct child tasks that spawn their own subtasks until  is reached. is used to signal the workers that they should quit.  is used to wait until threads exit gracefully. If the main thread is interrupted for any reason then the daemon threads are killed unless there are other non-daemon threads (you might want to provide SIGINT hanlder, to signal the workers to exit gracefully on  instead of just dying). is used, to get "Last In First Out" order (it is approximate due to multiple threads).The  is not set because otherwise the workers may deadlock--you have to put the task somewhere anyway.  background threads are running regardless of the task queue.


Answer URL
https://docs.python.org/3/library/queue.html#queue.Queue.join
https://docs.python.org/3/library/queue.html#queue.Queue.join
