Natural Text
I'd like to do:which is easy enough to do (see code below) for any x and any y except in the case that x is a str.Is there any way (e.g. adding a special method or raising a specific error) to cause old style string formatting to fail (similarly to how 1 %doSomthing fails with a TypeError) and revert to the __rmod__ method defined in the doSomething object?
Note: I submitted patches for Python 2.7, and 3.5 and up. These have landed and are part of 2.7.14, 3.5.4, 3.6.1 and 3.7, where the OP example now works as expected. For older versions, see below.Unfortunately, this is not currently possible in Python. The behaviour is hardcoded in the evaluation loop:(From the Python 3.5 source code, where  is the Python  type).This is unfortunate, because for every other type you can prevent the  method to be invoked by using a subclass for the right-hand operand; from the documentation:Note: If the right operand’s type is a subclass of the left operand’s type and that subclass provides the reflected method for the operation, this method will be called before the left operand’s non-reflected method. This behavior allows subclasses to override their ancestors’ operations.This would have been the only option here,  never returns , all RHS types are accepted (the actual  method only accepts  objects for the RHS, but is not called in this case).I consider this a bug in Python, filed as issue #28598.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__ror__
