Natural Text
I have an abstract class with three methods that are is a sense equivalent - they could all be defined in terms of each other using some expensive conversion functions. I want to be able to write a derived class which would only need to override one of the methods and automatically get the other two. ExampleI know I could explicitly tell each derived class which conversions to use. I want to know if there is a way for the parent class to figure this out on its own, without modifying the children.
You could resort to metaprogramming techniques like writing a metaclass that fills in the remaining methods automatically, or use introspection to look at the classes in  in turn to find out which methods have been overridden.  However, these options firmly fall into the "too much magic" category for me, so I'd go with something simpler.Simply split each method up into two:  One generic one, and the actual implementation.  Derived classes override the actual implementation:The common logic can also be factored out in a decorator:
I suggest to define the conversions in a clean circle, such that redefining one method will break that circle. That is:Edited simultaneously with comment on the same issue being raised:That should work, but of course, sometimes you'll need to convert twice. To avoid that, you could implement some kind of lazy evaluation, i.e. the functions first generate an object that knows how to evaluate itself, but first when you ask it for its value, the operation is performed. That way, the chain of conversion can be simplified before evaluation, if it is expensive.
A decorator could also do the trick. Something along these lines:Then use it like so:This is inspired by the  decorator.
I am actually duplicating Dr. V's answer. I am posting my answer to justify the effort that I spent writing the code:Output:


Answer URL
https://docs.python.org/3/library/functools.html#functools.total_ordering
