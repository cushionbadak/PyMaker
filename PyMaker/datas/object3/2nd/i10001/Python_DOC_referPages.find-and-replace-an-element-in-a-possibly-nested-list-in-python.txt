Natural Text
I have a list of items they may or may not be arbitrarily nested. I would like to replace one of the lists' elements. Either way (nested or not), I have the element's index location stored in another list. Here's a nested list example where I would like to replace  with something else, say . I have the location of  stored in :Using  how can I substitute  for ?Here is an unnested example where I would like to do the same substitution:If  only has one element then you can simply do:Is there something flexible enough to handle both cases? 
This does the same as the other answer, just walks the path in a functional fashion:In Python 3 you'll need to import  from . And  is from the  module. If you just have lists, you could use  instead.Explanation:  starts with  and replaces it with  for each value  in . So for example if  is  then you get . Which is the same as .
ok so given  you would want to preform the operation:or given  you would preformor if we had overly complicated data and  you would want:In any case we first need to look up each layer before the last element which we can do in a for loop like this:This also works when there is only one item in  since in that case the for loop is iterating over an empty sequence so there is no need to treat that case seperately
if you just have lists that has tuple or single element, we can  first detect if a list has tuples and apply lambda function to replace elements as desired.If the list has different types of tuples, we will need to add additional logic to recognize that.output: 


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/operator.html#operator.getitem
https://docs.python.org/3/library/functools.html#functools.reduce
