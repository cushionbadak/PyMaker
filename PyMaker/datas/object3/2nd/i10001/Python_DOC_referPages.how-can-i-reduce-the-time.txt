Natural Text
I'm trying to reduce the time when I compress a file from a string, and after I descompress. Dic is the dictionary obtained from the Huffman algorithm. The input for the compress function is a .txt, for the descompress function the input file, is the output file from the compress function.Well, I start reading with k=3 at the code in the function descompress because it starts with '0b1' and this is nothing. Sorry for my bad english.
the main performance problem you're encountering is with string concatenation. Example:allocates a temp string, assigns it to the old  which is garbage collected. Highly unefficient. strings are not optimized for reallocation so  wouldn't be much faster.Correct ways:create a  called , and use  in the loop. In the end just do or use a  pseudo-file object and write data in it. In the end, retrieve the contents with example:
List comprehension can save a lot of time:And you don't need to compare boolean statement to a boolean value,  is enough. You can also get rid of , it is useless  in your functions.Lastly, use  so you don't have to type  every time you open it.  


Answer URL
https://docs.python.org/3/library/struct.html
