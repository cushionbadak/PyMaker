Natural Text
I'm building my own interpreter in C# using Ruslan Pavik's Guide. I am at part 7 where we are creating an Abstract Syntax Tree. I was able to get by the first parts and was able to translate the Python code in the guide into C#. But in Part 7, it became entirely difficult for a guy with no Python experience.I am having difficulty figuring out what the datatypes and the return types are, with Python being a dynamic programming language.I am confused on this part:I don't know the datatype for  but I think it's a string. gets assigned  although I don't know what object it tries to get the attribute from.I don't know what datatype does  have.Later on in the guide, he declares this class:But I know that in C# it's just a class with nothing inside the braces: .The next class after  is the  that inherits :Basically I'm really confused right now. But my main confusion is the  since I don't know what datatype it has. Since a lot of classes in the parser and interpreter use , I really can't go forward in my interpreter without knowing what datatype it has.
Regarding your question about : This is just a function which returns an attribute with a given name (in the 2nd parameter) of an object (in the 1st parameter) and with a fall back (in the 3rd parameter) if there is no attribute.So in your case  it tries to get an attribute with the name  from itself. And if it doesn't exist it uses . Now if  is , it'll try to get , and if that doesn't exist it'll instead get .In the end, without running the code, it cannot be determined what it'll return or what type  is going to be. It could be anything in theory, but usually it is a method. But that is a difference from Python and C#, that the type of a variables in Python depends on what is assigned to it. You can do the following without an issue:And the same is with , in theory it can be anything, but if used correctly it'll be a subclass of .
 is an instance of a subclass of  here.  is a method on a subclass (which you are supposed to write yourself) of the  class. It is looked up dynamically because the passed in  is going to be any one of the possible subclasses of , and you are expected to implement specific  methods for specific nodes on your custom subclass. The fallback is to use the  method. is the base class for nodes.  is a specific node class; the different classes are documented in the Abstract Grammar section; each camel-cased name is also an  subclass.By looking up methods dynamically by the name of the specific node, the developers avoided having to create specific concrete methods for every node type that the grammar defines.To make this a little more concrete: say you are interested in specific  operator nodes; perhaps because you want to analyse how  is used in a piece of code.You can then implement a  subclass, and add a  method on that subclass, and it'll be called automatically when you pass in a tree of nodes to ; for any nodes for which there is no specific  method present, the  method will make sure the child nodes of the tree are visited (through the  function).Demo:In the above demo, the  method found the  method and called it for us, but since there are no  or , etc. methods, those nodes were passed to the  method instead, which processes each field and calls  for any further nodes.


Answer URL
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/ast.html#abstract-grammar
