Natural Text
I’m looking into implementing a new event loop to plug into  based on existing run loop implementations, such as Cocoa’s  and Qt’s . but find it difficult to to pick a place to start.The documentation says that the system is designed to be pluggable, but nowhere does it say exactly how this can be done. Should I start with , or ? What method does what, and what components do I need to provide? The only alternative implementation I find useful is uvloop, but find it difficult to understand because it relies heavily on Cython and libuv, which I am not familiar with.Is there some kind of a write-up on how the event loop implementation is done, and how a custom one can be made? Or a less involved implementation I can wrap my head around more quickly? Thanks for any pointers.
The documentation says to inherit from .For the rest of your question, I didn't find the documentation very clear, but the source code for the concrete event loop in  was helpful. I've written up apretty minimal example of inheriting from  to create an event driven simulator.The main things that I'd have liked to be told areImplement . The end-user schedules a coroutine using , but that just calls your loop's  method. It doesn't need to be anything more than .Implement ,  and . These are invoked by the end-user to schedule a plain callback function. They are also invoked by the async/await system automatically, whenever the end-user schedules a coroutine.If a regular callback raises an exception, it goes to your loop's  method. If a coroutine raises an exception, the exception lives in some asynchronous never-never land, and you have to catch it there.Look up the source code for  to see all the other methods that you should be overriding. Bonus: somewhat helpful comments.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#base-event-loop
https://docs.python.org/3/library/asyncio-dev.html#detect-exceptions-never-consumed
