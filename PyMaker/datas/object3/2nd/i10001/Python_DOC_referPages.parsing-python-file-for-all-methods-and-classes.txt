Natural Text
I am trying to build a program which allows the user to browse to a folder which contains python modules. Once the folder has been selected it will list all python files within that folder as well as all the classes and methods for each module. My question is, are there any way I can do this without opening each file and parsing for "def" or "class"? I noticed that there's a function called mro which returns the attribute of a class but that requires me to have access to that class through an import. So is there any way I can get the same result? Thank you in advance!
This is what I came up with using the AST module, it has exactly what I was looking for.
Most of Python's implementation (parser included) is available in the stdlib, so by carefully reading the modules index you should find what you need. The first modules / packages that come to mind are importlib, inspect and ast but there surely other modules of interest.
I had to replace a lot of code in one of my modules, here is my way of getting classes and methods:Sample pprint output:
Thanks, useful example for this first time ast user. Code above with the  import, printed output, and without the 1 spelling error ;-)
If you want to know the contents of the file, there's no way around looking into the file :)  Your choice comes down to whether you want to parse out the content-of-interest yourself, or if you want to let Python load the file and then ask it about what it found. For a very simple Python file like testme.py below you can do something like this (warning: not for those with weak stomachs): testme.py: analyze.py:Output:However, that's going to start to get pretty grotty when you expand it to deal with nested packages and modules and broken code and blah blah blah.  Might be easier just to  for  and/or  and go from there.Have fun with it!  I :heart: metaprogramming


Answer URL
https://docs.python.org/3/library/pprint.html
