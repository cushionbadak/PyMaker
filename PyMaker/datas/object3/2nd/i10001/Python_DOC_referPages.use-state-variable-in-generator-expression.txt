Natural Text
Well in my application I basically need to use the "sum of all previous terms in list", however the list isn't just a list but rather a generator of tupples (where the third index is the "offending" one.As an example (non working code obviously but it should show the idea):Or a minimal working example (note that this is silly as another function from itertools could just solve this for me)Now the obvious "solution" is the use of a for loop:But isn't that way too verbose for such a simple "thing"? Oh for completeness sake, here is :
Since you are trying to accumulate state in your generator expression, you will need a separate object to maintain it for you. Your current  loop solution is probably the easiest way to do this in terms of maintenance and readability. Another option would be to write your own generator that would maintain the state you need and pass it to . Thanks to @patrick-haugh for suggesting this solution:Hopefully looking at this code will convince you that there is no good reason to use it. The only advantage is that you are basically passing most of your  loop to  via the generator rather than implementing the logic of  yourself. Your case is specialized enough where you are not likely to get any extra mileage from obfuscating things like this.UPDATEI eliminated the need to pass arguments to the generator by moving it into the function that uses it. This arguably puts the implementation on par with the  loop since it does not introduce any new code, but does remove the  logic.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
