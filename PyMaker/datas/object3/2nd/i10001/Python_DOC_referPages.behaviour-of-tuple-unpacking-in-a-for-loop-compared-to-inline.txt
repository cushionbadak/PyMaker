Natural Text
I have a very simple text file which, for the purposes of this example, consists of a list of stores with corresponding amounts of money spend in them.  The (tab-spaced) file looks like this:My goal is to sum the amounts of money for all but the 7-Eleven.  My code looks like this:There is probably some simplifications that can be made to clean up the middle part of the code, but I'm having trouble with the "for shop, priceStr in line:" bit.  My understanding is that doing "shop, priceStr" should unpack the contents of the current line as a tuple and assign them to the variables shop and priceStr.  However, I get the error:Yet if I take the current line and unpack it outside the loops I getI don't understand what is different between the nested for loops and the inline code.  Can someone please advise me?  This code runs identically in python2.7 and python3.4Thanks
jasonharper's answer is correct for your immediate problem, but you might also have a stray  in some of the lines, which would make the naive splitting method split the string into more than two items.Either limit the split using the  argument, which will ignore all other  characters:Or unpack the line by binding excess items (if any) to a separate variable, like this:The  variable will be an empty list in case there are no excess items. This will make your code more robust in case of accidental format errors which you can then handle and/or report.
You can tell split to make only one split and then it will ignore any possible extra If you do this you should probably also  each of the unpacked values to be safe. Although it might work without that if  ignores whitespaces.
After doing , line is a tuple with two elements (assuming no extraneous tabs, as other posters have pointed out).  If you iterate over this, you will get first the shop name, then the price.  So, when you do , it first attempts to unpack the shop name into your two variables, and then attempts to unpack the price into your two variables; of course both attempts fail.  There is no iteration necessary here; you could do  to break the tuple into its two elements, or save a line of code and directly do 


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
