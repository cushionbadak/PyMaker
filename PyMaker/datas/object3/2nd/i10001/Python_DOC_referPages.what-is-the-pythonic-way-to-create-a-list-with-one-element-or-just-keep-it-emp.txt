Natural Text
Let's say a have  instance .  may have an attribute .I want to write a function that gets me either an empty list  when the attribute is  or missing or the list  when the attribute  is 12.This works perfectly but is there a "pythonic" way of doing this without the try-except block and maybe in one line?
Your approach is pythonic, just do some few tweaking.First off, don't return inside the  block. You can preserve the  value in a variable and return it properly within  clause. The reason is that you are doing multiple operation like getting attribute and converting to list (and maybe more(in other cases)) while you are just catching the . And when you use  you can handle other exceptions easily, also it's more elegant from coding style's perspective.Secondly you don't need to use  in this case, you can simply use direct attribute access.Also instead of using the  you might want to check if the object has the attribute then return its value but due to It's easier to ask forgiveness than it is to get permission. principal the  is better.
I would go forHowever, it is good practice to make sure that attributes are always defined so you don't have to use  with a default or use  to check for existence.
You may use  to check for attribute as:which could be written in one line as:
There are two basic ways of going about this:EAFP (It's Easier to Ask Forgiveness than Permission)- which is what you have:LBYL (Look Before You Leap) Generally, EAFP is "pythonic", but really, it depends on the specifics of your use-case. If you know that  will usually have the  attribute, then you should use EAFP. That is to say, if it is an exceptional case for  not to have , use exceptions! If, on the other hand, it is common for  to lack , then LBYL will be more efficient.If you simply want a one-liner, you could use a conditional expression:
according to the Python documentation:EAFP:   Easier to ask for forgiveness than permission. This common Python  coding style assumes the existence of valid keys or attributes and  catches exceptions if the assumption proves false. This clean and fast  style is characterized by the presence of many try and except  statements. The technique contrasts with the LBYL style common to many  other languages such as C.That means that your code follows the "official" pythonic way, checking if the attribute exists would be less pythonic.However, performance needs could eventually override pythonic consideration according to the frequence where person object will not have an  attribute, because raising an exception takes more time than evaluating a simple condition.Consider following code:It tests the performance of the try/catch and the if/else methods with and without an id. It prints this:As you can see, the try/catch method is a bit faster when an id exists; but when the id does not exists the if/else method is 3 times faster than try/catch method.
getattr() allows you to specify a default if the attribute isn't there so you could use that if you want to avoid a try/catch block.If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised.
You can provide a default value (a third argument) to getattr() function to be returned if an attribute does not exist:(assuming here that  is not a valid value for the  attribute)


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/library/functions.html#getattr
