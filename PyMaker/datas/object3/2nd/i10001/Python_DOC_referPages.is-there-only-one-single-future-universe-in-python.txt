Natural Text
As explained in another post(https://stackoverflow.com/a/7075121/2706606), in python you can import stuff from the future. For example 2/4 evaluates to 0 (as it is an integer division). But if you import "division" from the future, it evaluates to 0.5What I understand from the linked post is that the parser parses the code differently when you use future imports.And my question is, is there only one single, unique "future" environment where all this future imports are fetched from? How do we guarantee that the future imports will be forward-compatible with future versions of the python compiler? Is it possible that maybe in the "more distant future" 2/4 will evaluate to some other value?
The features from the future are not going to change meaning. It is guaranteed that  has one of three behaviors:On a version of Python before the future behavior was defined, an exception is thrown indicating the code is incompatibleOn a version of Python before the behavior becomes the default, it enables the behaviorOn a version of Python after the behavior becomes the default, the import is recognized, but ignoredThey will not reuse a name to mean something else later on (since that would violate the "recognized but ignored" rule for #3). If they decided to change, say,  again, they'd need to use a new name, e.g. to make it truncate towards zero division instead of floor division, they might make a  import named . But they won't delete , ever, as long as Python exists, nor will they change the meaning, per the  docs:No feature description will ever be deleted from .
If you look at the import  there is a list called  that you can use to see what features are available for your python interpreter. Which on my machine would return the following on Python 2.7.12.And with Python 3.5.2.There is however no guarantee that the Python interpreter you are running will have the same features available, the import may not even exist on some implementations, but assuming that the feature is available the implementation should remain the same, as long as it was implemented according to the PEP (e.g. PEP-0238), which should be the case for most Python interpreters.


Answer URL
https://docs.python.org/3/library/__future__.html
https://docs.python.org/3/library/__future__.html
