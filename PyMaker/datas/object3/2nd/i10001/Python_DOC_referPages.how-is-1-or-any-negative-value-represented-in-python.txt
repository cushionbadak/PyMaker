Natural Text
I learned that in Python, integer precision is only limited to the constraints of your hardware. If you were to represent signed ints with 2's complement, the sign extension would go on forever. Does Python use a sign bit to represent them instead? Or something else?
CPython (the most common implementation) stores integral numbers as a  type which contains an arbitrary amount of "pieces" which are unsigned numbers.  The count of how many pieces there are is stored in the generic field  which exists in every .  This field is described as:For statically allocated type objects, this should be initialized to zero. For dynamically allocated type objects, this field has a special internal meaning.And indeed for , its meaning is quite special: it is the count of pieces in the number, but when the number is negative,  is negative.You can see it in action in , here: https://github.com/python/cpython/blob/master/Objects/longobject.c#L73 or perhaps even more clearly in , here: https://github.com/python/cpython/blob/master/Objects/longobject.c#L328 - note that  is just an accessor for the  field.
Here is an blog post from Laurent Luce on Python integers.  It looks like (in the most common Python implementation, CPython), integers are stored as signed  values, except for very small values which are managed for faster access. \


Answer URL
https://docs.python.org/3/c-api/typeobj.html
