Natural Text
I am writing tests for some legacy code that is littered with catch-all constructs likeand I want to tell whether an exception was thrown inside the try block.I want to avoid introducing changes into the codebase just to support a few tests and I don't want to make the  cases more specific for fear of unintentionally introducing regressions. Is there a way of extracting information about exceptions that were raised and subsequently handled from the runtime? Or some function with a similar API to /// that either records information on every raised exception, lets the user supply an exception handler that gets run first, or lets the user register a callback that gets run on events like an exception being raised or caught.If there isn't a way to detect whether an exception was thrown without getting under the (C)Python runtime in a really nasty way, what are some good strategies for testing code with catch-all exceptions inside the units you're testing?
Your only realistic option is to instrument the  handlers.Python does record exception information, which is retrievable with , but this information is cleared when a function exits (Python 2) or the  statement is done (Python 3).
A good strategy would be testing observable behaviour. Since exceptions were explicitly excluded from the observable behaviour I do not think you should be testing whether an exception was raised or not.


Answer URL
https://docs.python.org/3/library/sys.html#sys.exc_info
https://docs.python.org/3/library/sys.html#sys.settrace
