Natural Text
I have the following situation ( all 3 are functions in a python class ) where I have to send a message to a remote device with 2 callbacks that give detail about the state of the remote device.My situation is 1) call sendMessage when handleAppDownloadComplete callback is called 2) At any point during sendMessage(), if handleAppRestart() is called, stop execution of sendMessage(),  wait for handleAppDownloadComplete() to be called back and call sendMessage() again. I have tried to use threading.events(), but this seems very cyclical for me. And to add, both the call backs are provided by third party libraries and I can't change them. Any better way/design to handle this situation?  
https://docs.python.org/3/library/asyncio-task.html#future (look at the example)You could model the call to sendMessage() as a task which could be cancelled by handleAppRestart(). So you'd have a class variable task which would bind to a task.Btw what you gave in your question isn't Python code, and neither is my answer (Python doesn't use {} and I didn't indent correctly).Anyway, answer is: Use asynchronous abstractions to do what you want.EDIT: Wait, you can't change handleAppDownloadComplete(), handleAppRestart() or sendMessage(message)?


Answer URL
https://docs.python.org/3/library/asyncio-task.html#future
