Natural Text
I need to know if a python module exists, without importing it.Importing something that might not exist (not what I want):
Python2To check if import can find something in python2, using To find dotted imports, you need to do more:You can also use  (more or less the same as the python3 partPython3Python3 ≤ 3.3You should use , How I went about doing this was:My expectation being, if you can find a loader for it, then it exists.  You can also be a bit more smart about it, like filtering out what loaders you will accept.  For example:Python3 ≥ 3.4In Python3.4  python docs was deprecated in favour of .  The recommended method is the . There are others like , which is useful if you're after a specific file to load.  Figuring out how to use them is beyond the scope of this.This also works with relative imports but you must supply the startingpackage, so you could also do:While I'm sure there exists a reason for doing this - I'm not sure what it would be.WARNINGWhen trying to find a submodule, it will import the parent module (for all of the above methods)!comments welcome on getting around thisAcknowledgements@rvighne for importlib@lucas-guido for python3.3+ depricating @enpenax for pkgutils.find_loader behaviour in python2.7
After use yarbelk's response, I've made this for don't have to import .Useful in Django's for example.
Python 2, without relying ImportErrorUntil the current answer is updated, here is the way for Python 2Why another answer?A lot of answers make use of catching an . The problem with that is, that we cannot know what throws the .If you import your existant module and there happens to be an  in your module (e.g. typo on line 1), the result will be that your module does not exist. It will take you quite the amount of backtracking to figure out that your module exists and the  is caught and makes things fail silently.
go_as's answer as a one liner
I came across this question while searching for a way to check if a module is loaded from the command line  and would like to share my thoughts for the ones coming after me and looking for the same:  Linux/UNIX script file method: make a file :  Then make sure it's executable:  And call it with a  to :Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.Interactive method: in the console load  If found quit reading by typing To exit the python interactive session press Ctrl + D Windows script file method also Linux/UNIX compatible, and better overall:  Calling it from the command like:  Would output:  Help on module site:       site - Append module search paths for third-party packages to sys.path.     /usr/lib/python2.7/site.pyhttp://docs.python.org/library/site  ...  :and you'd have to press  to exit interactive mode.  Using it unknown module:  Would output:  no Python documentation found for 'lkajshdflkahsodf'and exit.
Use one of the functions from pkgutil, for example:
You could just write a little script that would try to import all the modules and tell you which ones are failing and which ones are working:Output:Word of warning this will try to import everything so you'll see things like  because the actual import name is just yaml. So as long as you know your imports this should do the trick for you.
Python 3 >= 3.6: ModuleNotFoundErrorThe  has been introduced in python 3.6 and can be used for this purposeThe error is raised when a module or one of its parents cannot be found. Sowould print a message that looks like  if the  module cannot be found; but would print something like  if only the  module couldn't be found but the  package could be found.See the documentation of the import system for more info on the 
You can also use  directly 
A simpler if statement from AskUbuntu: How do I check whether a module is installed in Python?
in django.utils.module_loading.module_has_submodule
There is no way to reliably check if "dotted module" is importable without importing its parent package. Saying this, there are many solutions to problem "how to check if Python module exists".Below solution address the problem that imported module can raise ImportError even it exists. We want to distinguish that situation from such in which module does not exist.Python 2:Python 3:


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.find_loader
https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError
https://docs.python.org/3/reference/import.html
https://docs.python.org/3/library/imp.html
https://docs.python.org/3/library/importlib.html
