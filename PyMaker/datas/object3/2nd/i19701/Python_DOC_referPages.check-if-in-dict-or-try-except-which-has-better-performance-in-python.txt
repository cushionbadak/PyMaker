Natural Text
I have a few dictionaries containing similar data.Most queries would be resolved in a single search of one dictionary.So is it better performance wise to leave out preliminary checks for existence of a key in a dict and have a try at the next dict in an except clause catching key error?Or maybe something like ?
Depends on the keys in the dictionaries.If you predict with confidence that it is more common for keys to be missing use then use get.If you predict with confidence that it is more common for keys to be there use try except.
It seems in almost all cases, using  would be faster. Here is my test run using  and get
Since you say that most of the queries will be resolved by looking at the first dict, your fastest solution would be to do something like:However, that is certainly not the most maintainable of solutions and I don't recommend using it.  You could create a function:which you would call like:(this is a simplified, slightly less clean, version of the already very simple Chained map recipe suggested by @MartijnPieters in the comments on the original question -- I would advocate using that over this code posted here.  This code is only to demonstrate the concept in a more simplified way.)Finally, perhaps a hybrid solution would work best in practice.  Factor the first  out of the loop -- This is a little ugly, but it avoids the overhead of the  most of the time.  Only if the first  raises a  do you enter the loop type solution I suggested above on the remaining dicts.  e.g.:again, only do this if you can reliably demonstrate (think ) that it makes a measureable differenceThe important thing to know is that in python,  is cheap, but  costs a decent amount of time.  If your code is expected to succeed, use -.  If it isn't expected to succeed, often it's best to use  anyway, but in that case, you should evaluate whether performance is really an issue and only if you can demonstrate that it is an issue should you resort to "looking before you leap".One final note, If the dictionaries are relatively static, it might be worth combining them into 1 :Now you can just use  -- It has all the information from  and .  (of course, the order of the updates matters if the dicts have keys that are the same but have different values).
 usually takes longer than using  but it depends on a few things...Try making use of the timeit module to test performance in your particular situation like so:
You could as well doIf none of the dicts contain the key, this raises a  rather than a .
The difference between checking the conditional or similarly, and handling the  thrown when  is generally considered trivial, and likely to depend upon the implementation of python you are using. Using the conditional form is undoubtedly more pythonic, and is generally considered more expressive than catching the exception, often leading to cleaner code. However, if your dictionary may contain arbitrary data, and you cannot know that a value of , or some other magic value indicates that your key is not found, using the conditional form will require two lookups, as you first check if the key is in the dictionary, and then retrieve the value. I.E.:Given the situation you describe, the code you have provided is the slowest possible option, as the  will be looked up in each of the dictionaries. A faster option is to guess the dictionary it will be in, and sequentially search through the other dictionaries:However, your particular use case sounds interesting and strange. Why are there multiple dictionaries with similar data? How are these dictionaries stored? If you already have a list or some other data structure holding these dictionaries, it would be even more expressive to loop through the dictionaries. 


Answer URL
