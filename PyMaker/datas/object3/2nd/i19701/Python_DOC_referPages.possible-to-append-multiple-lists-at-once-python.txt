Natural Text
I have a bunch of lists I want to append to a single list that is sort of the "main" list in a program I'm trying to write. Is there a way to do this in one line of code rather than like 10? I'm a beginner so I have no idea...For a better picture of my question, what if I had these lists:And want to append y and z to x. Instead of doing:Is there a way to do this in one line of code? I already tried:And it wont work.
should do what you wantor or even
Extending my comment
You can use  function with start value (empty list) indicated:This is especially more suitable if you want to append an arbitrary number of lists.
equivalent to above answer, but sufficiently different to be worth a mention:in the above expression, * is important for groking result as args to chain, this is same as prior chain(x,y,z). Also, note the result is hash-ordered.
If you prefer a slightly more functional approach, you could try:This will enable you to concatenate any number of lists onto list .If you would just like to concatenate any number of lists together (i.e. not onto some base list), you can simplify to:Take note that our BFDL has his reservations with regard to lambdas, reduce, and friends: https://www.artima.com/weblogs/viewpost.jsp?thread=98196To complete this answer, you can read more about reduce in the documentation: https://docs.python.org/3/library/functools.html#functools.reduceI quote: "Apply function of two arguments cumulatively to the items of sequence, from left to right, so as to reduce the sequence to a single value."P.S. Using  as described in https://stackoverflow.com/a/41752487/532513 is super compact, it does seem to work with lists, and is really fast (see https://stackoverflow.com/a/33277438/532513 ) but  in Python 3.6 has the following to say:This function is intended specifically for use with numeric values and may reject non-numeric types.Although this is slightly worrying, I will probably keep it as my first option for concatenating lists.
In one line , it can be done in following ways or 
To exactly replicate the effect of append, try the following function, simple and effective:


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
