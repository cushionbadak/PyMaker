Natural Text
I have two lists of dictionaries (returned as Django querysets). Each dictionary has an ID value. I'd like to merge the two into a single list of dictionaries, based on the ID value.For example:and I want a function to yield:Additional points to note:The IDs in the lists may not be in the same order (as with the example above).The lists will probably have the same number of elements, but I want to account for the option if they're not but keeping all the values from list_a (essentially ).I've tried doing this in SQL but it's not possible since some of the values are aggregates based on some exclusions.It's safe to assume there will only be at most one dictionary with the same  in each list due to the database queries used.Many thanks for your time.
I'd use  to group the elements:If you have an aversion to  functions, you can always use  instead.  (it's probably slightly more efficient too)To demystify lambda/itemgetter a little bit, Note that:is the same thing* as either of the following:*There are a few differences, but they're not important for this problem
As you can see, this just uses another dict to merge the existing dicts. The trick with defaultdict is that it takes out the drudgery of creating a dict for a new entry.There is no need to group or sort these inputs. The dict takes care of all of that.A truly bulletproof solution would catch the potential key error in case the input does not have a 'user__id' key, or use a default value to collect up all of the dicts without such a key.


Answer URL
