Natural Text
Consider this (Python 3.3):Do you really expect two print calls to print different things?Neither did I.The same thing happens if you replace list with ,  or . It also happens if you replace  object with  or , but curiously, not if you replace it with .Maybe it is a feature. But it's very surprising, not documented (at least I haven't been able to find anything about it), and not consistent (range works differently). What do you think?
The behaviour is documented at http://docs.python.org/3/glossary.html#term-iteratorOne notable exception is code which attempts multiple iteration  passes. ... Attempting this with an iterator will just return the same  exhausted iterator object used in the previous iteration pass, making  it appear like an empty container.
 returns an iterator, as do the other calls.. You can only loop through an iterator once; it is then exhausted.You can create such an iterator yourself with a generator function:If you were to loop over , the list  would be emptied. You can only do that once, since  removes elements:The  call tries to get another value from the  iterator; it is already empty so the  exception is raised. That exception signals there are no more elements to be gotten, and that's why you end up with an empty list the second time you try and get anything from an iterator: does not return an iterator. It returns a range object instead, which represents a memory-efficient series of numbers; only the start, end and stride need to be stored and everything else can be derived from those 3 points.


Answer URL
