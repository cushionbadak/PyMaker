Natural Text
I have a string  in python. I need to convert it to date object and then get an integer value of day of year and also Julian day. Is it possible?
First, you can convert it to a  object like this:Then you can use the methods on  to get what you want… except that  doesn't have the function you want directly, so you need to convert to a time tupleThe term "Julian day" has a few different meanings. If you're looking for , you have to do that indirectly, e.g., one of the following.If you're looking for a different meaning, you should be able to figure it out from here. For example, if you want the "days since 1 Jan 4713 BC" meaning, and you have a formula that requires Gregorian year and day in year, you've got those two values above to plug in. (If you have a formula that takes Gregorian year, month, and day, you don't even need the  step.) If you can't work out where to go from there, ask for further details.If you don't have a formula—and maybe even if you already do—your best bet is probably to look around PyPI and ActiveState for pre-existing modules. For example, a quick search turned up something called . I'd never seen it before, but a quick  and a brief skim of the readme, and I was able to do this:That's the same result that the USN Julian date converter gave me.If you want integral Julian day, instead of fractional Julian date, you have to decide which direction you want to round—toward 0, toward negative infinity, rounding noon up to the next day, rounding noon toward even days, etc. (Note that Julian date is defined as starting since noon on 1 Jan 4713BC, so half of 7 Nov 2012 is 2456238, the other half is 2456239, and only you know which one of those you want…) For example, to round toward 0:
To simplify the initial steps of abarnert's answer:then apply the rest of abanert's answer.
This functionality (conversion of date strings to Julian date/time) is also present in the astropy module. Please refer to their documentation for complete details. The astropy implementation is especially handy for easy conversions to Julian time, as opposed to just the Julian date.Example solution for the original question:
For quick computations, you could find day of year and Julian day number using only stdlib  module:Another way to get : in the code above is "the Julian day number associated with the solar day -- the number assigned to a day in a continuous count of days beginning with the Julian day number 0 assigned to the day starting at Greenwich mean noon on 1 January 4713 BC, Julian proleptic calendar -4712".The  module documentation uses the term "Julian day" differently: The Julian day n (1 <= n <= 365). Leap days are not counted, so in  all years February 28 is day 59 and March 1 is day 60. The  zero-based Julian day (0 <= n <= 365). Leap days are counted, and it  is possible to refer to February 29.i.e., the zero-based Julian day is  here. And the first one () is  -- the days starting with March 1 are shifted to exclude the leap day.There is also a related term: Julian date.Julian day number is an integer. Julian date is inherently fractional: "The Julian Date (JD) of any instant is the Julian day number for the preceding noon plus the fraction of the day since that instant."In general, to avoid handling edge cases yourself, use a library to compute Julian day as suggested by @abarnert.
To get the Julian day, use the  method and add a fixed offset.The Julian day is the number of days since January 1, 4713 BC at 12:00 in the proleptic Julian calendar, or November 24, 4714 BC at 12:00 in the proleptic Gregorian calendar. Note that each Julian day starts at noon, not midnight.The  function returns the number of days since December 31, 1 BC at 00:00 in the proleptic Gregorian calendar (in other words, January 1, 1 AD at 00:00 is the start of day 1, not day 0). Note that 1 BC directly precedes 1 AD, there was no year 0 since the number zero wasn't invented until many centuries later.Simply add 1721424.5 to the result of  to get the Julian day.Another answer already explained how to parse the string you started with and turn it into a  object. So you can find the Julian day as follows:
From the above examples, here is the one liner (non-Julian):

According to this article there is an unpublished one-line formula created by Fliegel and Van Flandern to calculate an Gregorian Date to an Julian Date:This was compacted by P. M. Muller and R. N. Wimberly of the Jet Propulsion Laboratory, Pasadena, California for dates after March of 1900 to:These formulas are off by 0.5, so just subtract 0.5 from the formulas.Use some string manupulation to actually extract the data and you will be good


Answer URL
https://docs.python.org/3/library/time.html
