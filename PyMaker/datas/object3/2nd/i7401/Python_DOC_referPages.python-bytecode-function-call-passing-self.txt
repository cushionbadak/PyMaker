Natural Text
I'm trying to understand how bytecode works. is a function call. The corresponding bytecode is roughly ,  and then  with 0 arguments.This is totally fine if  is a module. But if  is an object, it has to pass the object instance itself. Since Python could NOT know whether  is a module or an object at compile time, naturally the bytecode is same regardless of the type of . But how does the runtime system handle  as the first argument to  if  is an object? Is there some special handling below bytecode level that says "if it is called on an object prepend the object as the first argument"?
The bytecode doesn't have to vary for different object types. It is the responsibility of the object type itself to manage binding behaviour. This is covered in the descriptor protocol.In short,  delegates attribute access to the object, via the  hook:Called unconditionally to implement attribute accesses for instances of the class. For modules,  simply looks up the name in the  namespace and returns it. But for classes and metaclasses, the implementation will invoke the descriptor protocol if the attribute supports this. Functions support the descriptor protocol and return a bound method when so asked:This binding behaviour also underlies how ,  and  objects work (the latter neuters the binding behaviour of a function by returning the function itself).
LOAD_ATTR does the magic via descriptors ( https://docs.python.org/2/howto/descriptor.html ).Assuming a is object of class A: In python functions are descriptors. When you do a.func, in reality it returns , which is descriptor object (unbound function). It then "upgrades" itself to bound function ( is called). Unbound function must be given self argument as first explicitly. Bound function already has self argument remembered "inside" itself.In python module is an object and uses exactly the same mechanism.
In a nutshell,  already knows which object it is bound to, and so does not require an explicit  (it already knows what  is):Contrast this with  (where  is the class):Calling  does require an explicit :Or, in bytecodes:(Note the extra .)The mechanics of bound vs unbound methods is explained in the Python Language Reference (search for  or ).


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#staticmethod
