Natural Text
I have a project depending on a shared library. To make it clear from the beginning: the shared library is a pure C library and not a Python library. For reasons of simplicity I created a small demo project called pkgtest which I will refer to. So what needs to be done is: Run a Makefile to compile the library and place the compiled shared library (called  here) file somewhere it can be accessed from within the depending Python package. My best guess so far was to run the makefile as a preinstallation routine, copy the  file in the packages directory and add it to the  parameter of the setup script. When installed the shared library then gets placed in the  directory and can be accessed from the module.The package directory is structure is as simple as this:My setup.py looks like this:setup.pyThe Makefile actually builds the library and copies it into the directory of my python package.src/MakefileSo all  is actually doing is load the library and call the  function that prints some text. But for completeness I will show the code here:pkgtest/hello.pySo this actually works but what I don't like about this approach is that the shared library lives in the directory of the Python package. I figure it would be better to put it in some sort of central library directory such as /usr/lib/. But for this one would need root privileges on installation. Has somebody got some experience with this kind of problem and would like to share a solution or helpful idea. Would be great.
You can create a Python package which includes shared libraries and works on (almost) any linux distro using manylinux.The goal of the manylinux project is to provide a convenient way to distribute binary Python extensions as wheels on Linux. This effort has produced PEP 513 which defines the  and  platform tags.The general procedure is:Build the external library and the Python package inside one of the docker containers provided by the manylinux team(see python-manylinux-demo) Run  to copy the external shared libraries that your package depends on into the Python wheel, setting the RPATH accordingly.See  and  in the  repo for an example.


Answer URL
https://docs.python.org/3/extending/building.html
https://docs.python.org/3/extending/building.html](here)
