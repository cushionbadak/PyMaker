Natural Text
I'm running into a very peculiar issue with using multiprocessing pools in Python 3... See the code below:If I execute this code as is, this is my extremely slow result:However, if i removed the line , then I get much faster execution time:My environment has plenty of power, and I've made sure I'm not running into any memory limits. I also tested it with a smaller file, and execution time is much more acceptable. Any insight?EDIT: I removed the disk IO part, and just created a list instead. I can prove the disk IO has nothing to do with the problem...
Under the hood,  uses a  to transfer the data from the parent process to the Pool workers.This adds a hidden cost to the scheduling of tasks as the entire  object gets serialised into a  object and transferred via an OS pipe.This is done for each and every task you are scheduling (10 times in your example). If your file is 10 Mb in size, you are shifting 100Mb of data.According to the multiprocessing Programming Guidelines:As far as possible one should try to avoid shifting large amounts of data between processes.A simple way to speed up your logic would be calculating the amount of lines in your file, splitting them in equal chunks, sending only the line indexes to the worker processes and let them  the file,  the right line and process the data.


Answer URL
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#programming-guidelines
https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor
