Natural Text
I wrote the function in python:is there any difference if I write  or ? Or could  part be useful in some case?EDIT:  will return  when string is passed - that is what I don't want to be. I would like a function which will return  anytime a text-like value is passed as an argument. Is there a method for this?maybe:will be better?or maybe:I want to write a module which would accept any well-behaved number type which represents one dimensional real number (for example  number type or  and so on...).I'm afraid that there could be libraries, which will not throw an error in casting to int or float. For example I can imagine situation like this:is this possible, should I worry about such situation?And do all well designed real number types will cast to  without an error?ps. i have read this already:How do I check if a string is a number (float)?
If I understand correctly, what you're actually trying to do is find out whether an object behaves in "number"-like ways (e.g. can you append  to it). If so, there's an easier way:
There is a difference between  and . will try to parse a ing or any object that has a  method. For example ,  and  have a  method. You can define such method for a custom class as well.If you aim to convert a complex number to a , it will error:The result of a  function is guaranteed to be a : if the  method returns a non-float value, it will raise a :So a simply  try is sufficient:Most numeric-like types in Python (like the ) **support such  method. on the other hand works with a ing and with the  method. Again if you call , the result is guaranteed to be an .So in python-3.x, you could use two checks: one for  and one for :Or if you want to return the number-like object:(this will return  if both attempts fail).Mind that in python-2.x, there is also a  type (and guess what, it works with ).
In python complex numbers can't be directly converted to int nor float this would raise a . Any other object than an "int or float convertible" one will raise a  . To make an object from a custom class "convertible" one will have to define the appropriate "dunders"  and , see docSo a function that check if a object can be cast as a real number you can do this:
Why not just useYou can modify the list of types to be whatever you need it to be.


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/library/functions.html#isinstance
