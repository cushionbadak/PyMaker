Natural Text
First of all I would like to mention that this question is not a duplicate of:Python Rounding InconsistentlyPython 3.x rounding behaviorI know about IEEE 754 and I know that:The simple "always round 0.5 up" technique results in a slight bias toward the higher number. With large numbers of calculations, this can be significant. The Python 3.0 approach eliminates this issue.I agree that ROUND_HALF_UP is inferior method to the one implemented by default in Python. Nevertheless there are people who do not know that and one needs to use that method if the specs require that. Easy way to make this work is:But my consideration is that this is not Pythonic... According to the docs I should use something like:The problem is that this would not pass all test cases:Because of the nature of conversion between float and decimal and because quantize does not seem to be working for exponents like 10 or 100. Is there a Pythonic way to do this?And I know that I could just add infinitesimally small number and  would work but this is so wrong that "the puppies would die"...
As you said that doesn't work if you try to  with numbers greater than :But you can simply divide, quantize and multiply:However that only passes the tests if you input  and compare to :As noted in the comments it's possible to use scientific notation decimals as "working" quantize arguments, which simplifies the function:This also passes the test cases mentioned above.


Answer URL
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize
