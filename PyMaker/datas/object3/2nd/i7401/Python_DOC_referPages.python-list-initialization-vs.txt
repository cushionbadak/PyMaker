Natural Text
I came across following snippet (and could trace its origin to https://docs.python.org/3/library/itertools.html#itertools.product):If we change the following line:to this:then code doesn't work.Now consider the following piece of code where the variable  in initialized as  and not  but still we get the expected results:So in the function  I mentioned above, what is the significance of having  and not  ?
The list comprehension inside the loop is:This contains the expression , where  is an element of .  This tries to add an element of  to a list.  So each element of result needs to be a list.  That is why  is initialized to , which a list with one element, which is a list (an empty list).  If you do , there are no elements in , so the loop will end immediately and do nothing.Your second example is different because you don't do anything with the elements of .  You just add new elements.  Also, you don't iterate over the list, so there's no requirement that it contain anything.There's nothing special about .  It's just that the particular operations that  is doing require it to operate on a list of lists.  Similarly if you were to write a function that takes, say, the mean of the elements in a list, you'd need to ensure the list has numbers in it (so it makes sense to add them) and is nonempty (since otherwise you'd be dividing by zero when trying to find the mean).


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
