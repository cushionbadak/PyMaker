Natural Text
In several of my classes, I want to implement both  and  and usually end up with code like this:Which does what I'd expect:However the code violates DRY and as the number of arguments starts to grow maintaining this becomes cumbersome and I've often found that either of  or  has come "out of sync" with the other.Is there a better way to simultaneously implement both  and  without duplication?
Since your  and  follow the same pattern, you could write a function to create the object's string representation for you. It would take an object, a list of attributes and  or  as arguments:I would recommend putting this function in a class which you then inherit from:And you can even get it done completely automatically by grabbing the attributes directly from the  function's signature:
There are no rules nor clear guidelines for implementing  and —at least none that are consistently followed anywhere (not even in the stdlib). So there wouldn’t be a way to get the “standard behavior” automatically, simply because there isn’t a standard behavior. It’s up to you, so if you set up guidelines for yourself, maybe you can also come up with a utility to make it easier for you to follow them.In your case, you could for example create a base class which provides the  and  implementations:You could then use that on a number of different types:
No need for duplication, just don't implement .That way, the object will behave like .I think you should also read this answer.
Neither the official Python documentation nor the Index of Python Enhancement Proposal seem to specify clear guidelines on how to override these methods, except for the 3.3 Special method names which, among other things, says of :If at all possible, this should look like a valid Python expression  that could be used to recreate an object with the same value [...]  This is typically used for debugging, so it is important that the  representation is information-rich and  unambiguous.I like to take inspiration from how  is implemented in some of the standard library modules, take e.g. :So the pattern here is .While  is preferred for debug/testing purposes, the scope of  is much more informal and I'd deduce that even looser rules apply. Note that if  is overridden but  is not,  calls .Here again, if I have to pick some rules I prefer to have  resemble , but modifying:The number of items displayed. I don't need to be verbose as  mandates.The type of values displayed. I include the most "important" ones, and even values that do not reflect the arguments initially passed to .Another few examples come from a PDF library I've been working on. There are two  and  classes, and their  and  methods have the following output:See also 2. Built-in Functions for :[...] For many types, this function makes an attempt to return a string that  would yield an object with the same value when passed to eval(),  otherwise the representation is a string enclosed in angle brackets  that contains the name of the type of the object together with  additional information often including the name and address of the  object. [...]


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/functions.html#repr
