Natural Text
Consider two lists, for example:Let's say we are given one pair of elements which must match - for example, . Is it possible to "align" the lists at those elements, and then to join the lists where there are still elements in both lists - sort of like a cross between a zip and an inner join?This is probably best illustrated by example. Using  and  as above: would lead to  would lead to  would lead to My context: I'm currently attempting to build a neural network capable of learning to play chess by reading chess notation. This question is to do with checking diagonals on the board in order to update piece positions. For example, if a white bishop has just moved to b7 (one square in from the lower-right corner of the board) then it must have come from a square on the h1-a8 long diagonal or from a square on the a6-c8 short diagonal.So in my case,  and  are the same length, since they correspond to the ranks and files on an 8-by-8 chessboard. But in general I suppose the lists could be of different lengths.
You could do something along the lines ofPS you could probably make the m, n index generation more compact but it is clearer what's supposed to happen with this structure.
Here's an approach that uses  on both lists first in forward order, then reversed taking items before and after the join items from both lists. The two resulting iterables are then chained, but not after dropping the join points from one of the iterables using :Making two passes on both lists may not be very efficient, but the lazy evaluation(s) could come handle with large lists.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.dropwhile
https://docs.python.org/3/library/itertools.html#itertools.islice
