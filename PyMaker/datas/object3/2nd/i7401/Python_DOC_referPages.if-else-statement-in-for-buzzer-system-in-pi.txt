Natural Text
I made a buzzer program for my raspberry pi. I want the program to be for security: If my door is open for too long (my door has a magnetic sensor), the buzzer will buzz. As soon as the door is closed, the buzzer will stop. However, I noticed that the buzzer has a delay for as long as it takes (time.sleep(10)) before the buzzer rings. It seems like my code loops the if statement before it stops. I want my buzzer to stop as soon as the door closes. Can someone help me with my code?
If you want a fairly simple answer, it would be best to have some tracker that updates every second.Note: when you close the door, the buzzer will shut off at the second marks, so it might delay slightly. You could always increase the accuracy by changing the increment and duration of sleep. Or you could use the Gyppo's answer using threading. EDIT: Gyppo pointed out that if you do decide to use floating point sleep/counters, you need to change the if statement to:
I don't think that  statement is doing what you want it to. At the moment, as soon as you open the door the  timer begins, and after 10s the buzzer fires (even if you've since closed the door). Python steps through your code line-by-line, and doesn't progress to  (and then back to the start of the loop) until after it's waited 10s. During that 10s Python isn't doing anything else,  is a 'blocking' function.It might be worth looking into threading, which has a 'non-blocking' sleep called . You could have something likewhere you've also got:Using 's , Python will continue to happily continue around that main  loop, and the function  will run after 10 seconds.(This code will still buzz if you quickly shut the door and then open it, fixing that is left as an exercise for the reader :P )
You could try using multiple  loops:This works by testing if the door is open, waiting 10 seconds. If its still open the buzzer goes off and then it goes into a loop till the door is closed where it breaks out of the loop.Edit:added  statement as possible fix


Answer URL
https://docs.python.org/3/library/threading.html
