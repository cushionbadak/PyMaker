Natural Text
When using the  function in Python to find the maximum value in a list (or tuple, dict etc.) and there is a tie for maximum value, which one does Python pick? Is it random?This is relevant if, for instance, one has a list of tuples and one selects a maximum (using a ) based on the first element of the tuple but there are different second elements. How does Python pick which one to pick as the maximum?I'm working in Python v2.6.
On Python 2, this isn't specified in the documentation and isn't in the portable in-Python section of the standard library, so this behaviour may vary between implementations. In the source to CPython 2.7 this is implemented in  by  [source], which wraps the more general  function  [source]. will iterate through the values and use  [docs] to see if they are greater than the current value. If so, the greater value replaces it. Equal values will be skipped over.The result is that the first maximum will be chosen in the case of a tie.
From empirical testing, it appears that  and  on a list will return the first in the list that matches the / in the event of a tie:And Jeremy's excellent sleuthing confirms that this is indeed the case.
For Python 3, the behavior of  in the case of ties is no longer just an implementation detail as detailed in the other answers. The feature is now guaranteed, as the Python 3 docs explicitly state:If multiple items are maximal, the function returns the first one  encountered. This is consistent with other sort-stability preserving  tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and  heapq.nlargest(1, iterable, key=keyfunc).
Your question somewhat leads to a note. When sorting a data structure, there is often a desire to keep relative order of objects that are considered equal for the purposes of comparison. This would be known as a stable sort.If you absolutely needed this feature, you could do a , which will be stable and then have knowledge of the order relative to the original list.As per python itself, I don't believe that you get any guarantee of which element you will get when you call . Other answers are giving the cpython answer, but other implementations (IronPython, Jython) could function differently.
For Python 2 versions, IMO, I believe you cannot assume that  returns the first maximal element in the list in the case of ties. I have this belief because  is supposed to implement the true mathematical function , which is used on sets that have a total order, and where elements do not have any "hidden information".(I will assume that others have researched correctly and the Python documentation does not give any guarantees for .)(In general, there are an endless number of questions you can ask about the behavior of a library function, and almost all of them can't be answered. For example: How much stack space will  use? Will it use SSE? How much temporary memory? Can it compare the same pair of objects more than once (if comparison has a side effect)? Can it run faster than O(n) time for "special" known data structures? etc. etc.)


Answer URL
https://docs.python.org/3/library/functions.html#max
