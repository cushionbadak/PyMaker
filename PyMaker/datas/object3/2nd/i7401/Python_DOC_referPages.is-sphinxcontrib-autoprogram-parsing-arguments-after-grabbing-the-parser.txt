Natural Text
I am creating a Python package with a command-line interface that uses the subcommand pattern: , , and so on. The CLI works wonderfully as it is, and now I'm trying to add the CLI to my Sphinx documentation. In searching for a solution, I came across sphinxcontrib-autoprogram which seems to do exactly what I want, even explicitly handling subcommands. But when I execute the sphinx build, I get the following error.It seems like the sphinx extension is not only creating the argparse object (expected), but is also calling  on it (unexpected). The "invalid"  argument comes from the sphinx command-line build invocation, but is being mistaken somewhere as one of the subcommands from my library's CLI.My syntax seems to match the sphinxcontrib-autoprogram documentation.What could be causing this behavior?I'm not sure if these details are relevant to the issue, but in case they are:the parser is defined in the subparsers for each command are defined in dedicated files in kevlar/cli/ (for example kevlar/cli/count.py)
First, ensure your program uses argparse, which is a requirement for :scans  object, and then expands it into a set of  and  directives.Second, the syntax you used might not be correct.  It looks like you copy-pastad from the first example instead of reading its usage.  Specifically: is the dotted import name of the module, and  is a variable that refers to an  object or a Python expression that creates and returns one.Thus in your case, assuming that your  creates and returns an , your syntax would be something like this or close to it:The hard part is figuring out the exact, correct  substitution.For comparing against another example, see the source program, source reST file, and rendered HTML of the Pyramid documentation of .
You should load the  instance in a separate module that create the same  instance but doesn't execute the parser itself. Or your module could detect that it was loaded within autoprogram and exit after the  instance was constructed.For example the PoC-Library uses a very huge  command line parser with lots of sub-parsers. The front-end script is this: py/PoC.pyThe docs directory contains a dummy front-end, that triggers an instantiation of , but aborts after its construction.Code to dummy load PoC:Source: docs/PoCSphinx.pyCode to load and abort if loaded by Sphinx:Source: py/PoC.pyThe class PileOfCores implements a property to return the main-parser object , which is stored in the variable  expected by .


Answer URL
https://docs.python.org/3/library/argparse.html
