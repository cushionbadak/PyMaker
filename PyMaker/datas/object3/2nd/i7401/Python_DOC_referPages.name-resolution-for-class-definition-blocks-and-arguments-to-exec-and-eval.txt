Natural Text
From https://docs.python.org/3/reference/executionmodel.html#resolution-of-namesA class deﬁnition is an executable statement that may use and deﬁne  names. These references follow the normal rules for name  resolution with an exception that unbound local variables are  looked up in the global namespace.What does "unbound local variables are looked up in the global namespace" mean here?  Can a class definition be inside another class definition or a function definition, so that the lookup of an unbound local variable is not in the global namespace but in a local nesting scope?What are "the normal rules"?Thanks.
Take this example:When  is called,  is local (because it's assigned in the next line), but still unbound because it's used before it's assigned a value.You might expect that the unbound  is looked up in the closest namespace (which would be ), but in class blocks, "unbound local variables are looked up in the global namespace", so the global  is looked up and  is printed.Let's remove the assignment inside :Now we're following the "normal rules of name resolution" and get the output , because the  inside  is not local anymore (it's a free variable) and looked up in the nearest enclosing scope.Also, the rule to look up unbound locals in the local namespace is for classes, but not for functions. Let's try it with a function:As you can see, in a function you can't use a local before assigning a value to it.


Answer URL
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
