Natural Text
How is the Python list initialization with square brackets implemented? Does it call some preexisting function, such as , one by one until the list is created or is there a separate function that takes in a variable number of arguments and creates a list?For example, how is the above list created? I am interested in the process by which the list is constructed in the source code. Either the actual code itself, or the steps that are carried out to store the list into memory.
You can compile that particular code snippet and examine the byte code with :Particularly line 15, , where the list is actually built. No constructor or function is actually called, as is in this case:Where you see in line 3, , the call is made to the  class' constructor.The grammar of the language parses the source code to build the parse tree such that, the list is created and ready to use at runtime.For details on the implementation of list objects, have a look here.Edit: Found the implementation detail for the bytecode. Here it is. :Contrast with :The latter makes an actual function call while the former allocates the object with .
As far as the language spec is concerned, it builds a list, and there are no promises about how it does that. If you were hoping for a public hook to customize the process or something, nope. You can't do that.If you want to see how the implementation happens to work for the Python version you're on, you can dig down. For example, on CPython 3.6, with , the Python disassembler:You can see a  opcode with argument . This pops 5 values off the Python bytecode argument stack and builds a list out of them.Looking at the 3.6 source for :we can see that it allocates the list object with  and sets items with , routines that are part of the C API for lists. No Python-side APIs are involved - no lookup of the  name, no  or .


Answer URL
https://docs.python.org/3/c-api/list.html
