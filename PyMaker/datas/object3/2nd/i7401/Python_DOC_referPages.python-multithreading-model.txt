Natural Text
ı have studying multithreading in python for a while, however I was confused on a few issuesFirstly ,created threads by python threading modules ,is  a user level thread.Books says the user threads must be mapped to kernel threads and  Operating system runs threads via kernel threads.in python threading module  Which thread model is used? besides Who decides  this choice ? is it operating  system ?İf many-to-one model used,ı think ,it is never real multithread,it always belongs only one kernel threadis there anyway directing  operating system to must use this model for my program in python ?Another point,How to shows all threads on running state separately kernel or user level  and mapping between the two levels ?
Usually, you never create 'kernel level threads' directly - everything you do in user space executes in user space, otherwise even a random browser JavaScript would be executing at the kernel level guaranteeing that within seconds the whole internet would go dark.Thus, in most languages, a threading interface (if supported) is far removed from the actual 'kernel threads' and depending on implementation it will either link to a lower-level threading interface ( for example) or just simulate threading unbeknownst to the user. Going down that chain,  may or may not link to actual 'kernel' threads (it happens to be true on Linux, but on Windows there is another level of separation) but even then, the code executes in the user space - the 'supporting' kernel thread is there to control the scheduling the code runs separately.When it comes to CPython, its  interface links to  so, technically, there is a chain from a Python thread all the way down to the kernel threads. However, Python also has the dreaded GIL pretty much guaranteeing that, with some rare exceptions mostly related to I/O, no two threads ever execute at the same time, pretty much making its threads operate in a cooperative multitasking mode. However, since on most systems processes are also backed by kernel threads, you can still utilize them in all their glory by using the  interface.Also, until you have multiple cores/CPUs on your system even kernel threads execute in a cooperative multitasking mode so, technically, kernel threads don't guarantee actual multi-threading as you're describing it.As for how to list threads and their dependencies, you can use  to show the thread tree of a process.


Answer URL
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html
