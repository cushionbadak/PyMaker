Natural Text
I can't understand the recursion.The  function aligns the turtle. The  function is called with . So, it passes the "if" condition and goes up. According to my understanding, the turtle should take 5 consecutive right turns with its length decreasing as 75, 60, 45, 30, 15. After this, it won't satisfy the "if " condition anymore. The code would run only till line 5 (first recursive call). So, a single line leaning toward RHS should be displayed. There shouldn't be any left turns. But this does not happen, a full symmetrical tree is made. Please explain how.See the link for more clarity on the question.Thanks!https://interactivepython.org/runestone/static/pythonds/Recursion/pythondsintro-VisualizingRecursion.html
It's not true it is not rotating left. Notice how the same instance of the turtle is always used to draw, so the turtle always continues from the position it is in before each call.so what essentially happens is:it goes all the way to the right as you expect - that is because it rotates to the right, and then it enters in the first branch of the recursionIt starts to surface from this branch, which means going backwards to each level, and then calling the second branch (which will make it go 'forward' again before resurfacing thus repeating steps 1 and 2)You have to note that when it surfaces it starts using the  value of the function that called this branch, while t remains the same. Here's the result of the debug info:
Your best bet towards understanding is to manually trace the code given that you call .You should find that the first time you enter  the condition is satisfied, but during the two recursive calls the condition is unsatisfied and the recursive calls return immediately to their call sites and carry on with the rest of the the  function.To manually trace the code, you should write down, using pen and paper, each statement executed, but when you arrive at a recursive call to  you should keep writing down statements, but indent them:
Each call to  remembers where it is.  You are correct that the first thing to happen is a chain of forward and right turns until  is called.  That call doesn't satisfy the  test, so does nothing.  However, that does not affect any other  call.  So, back in , execution continues with line 6, and similarly for all the other  calls.As an exercise, you might try pasting a copy of  each place it is called, and filling in the numbers for .  Each time  is called, that is effectively what happens.Try 2Imagine  were part of the function name, rather than a parameter.  You would have a family of functions , , ... .   would be:and similarly for all the ones except , which does nothing (the equivalent of failing the  statement in ).  So just like any function,  calls .   runs from the beginning to the end of its code.  Then  keeps going from the point where it called : it turns right and calls  again.Each call to a recursive function is just like a call to any other function, in terms of how the call and return behave.  The difference is that you write recursive functions in a particular style so they make sense when calling themselves.  


Answer URL
https://docs.python.org/3/library/pdb.html
