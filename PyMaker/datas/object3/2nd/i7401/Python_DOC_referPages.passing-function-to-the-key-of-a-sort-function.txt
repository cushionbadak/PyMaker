Natural Text
I have a listI want to sort it according to a particular condition. I want to use a logic that whenever  is equal to , swap the elements. Something likeIn the above list,the second and third elements are  and  where  == . So I will swap it such that my new list becomesThis is my function:I want to pass this function to the  method of the list such that it sorts according to this logic:I tried doing this but doesn't work:How can I make this function work in the  method?
As already said in the other answers it's not possible (or at least non-trivial) to make it work with . However you can do it without any sorting, just by collecting the indices based on the first element:Then create a "result" list and just reverse the indices of all elements that have the same first element:Which gives a  of:Note: It may not be the desired behavior to "reverse" the elements with the same first element. Because as @hiro protagonist noted in the comments:the problem is not really well defined... : what is the result? how and how many times do your iterate over the list? when are you done?in case you need a different behavior which elements should be assigned to which position you (probably) only need to change the  line and apply your desired operation there.A further advantage is that this approach only has  runtime behavior whereas  has  (average) runtime. So it could be faster.
You cannot make it work reliably with  or . The problem is that the sorting algorithm behind these functions doesn't make guarantees which elements are compared or not (it just says that the result will be sorted). For  or  to work reliably you need a total ordering relation of the , which your function doesn't provide.Also the  should be a function that converts one element to "the property that should be compared", it does pass each element of the list to the  function not the total list (in fact in CPython the list is empty while you  it, so it couldn't work at all).
One way to perform this sorting is to use the  parameter for  (use  for Python 3) and return -1 when the items at index 0 of two sublists compare equal or zero otherwise. This assumes the items are in pairs and are successive, so it isn't really an exhaustive sort, only an hackish way to swap your items:However, the sorting becomes ambiguous when more than two items have the same value at index 0 or the items are not successive.OTOH, you could just loop through your list and swap pair-wise successive items that match your condition. No need to apply sorting!
The python sort method will sort a list in place, using only < comparisons between items. You have to pass it a function which maps each element to something which may be compares to other mapped elements so that the 'less than' relation gives the desired result.Your rule however isn't defining any kind of relationship that can be described in terms of  for elements a, b. It is defining a relationship between adjacent elements only, and it isn't even a stable relationship: if  so you swap those two items then it immediately becomes the case that .Or in short,  is completely inappropriate for this task.


Answer URL
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
