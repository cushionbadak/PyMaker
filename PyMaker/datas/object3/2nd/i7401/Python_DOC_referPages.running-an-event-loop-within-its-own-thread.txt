Natural Text
I'm playing with Python's new(ish)  stuff, trying to combine its event loop with traditional threading. I have written a class that runs the event loop in its own thread, to isolate it, and then provide a (synchronous) method that runs a coroutine on that loop and returns the result. (I realise this makes it a somewhat pointless example, because it necessarily serialises everything, but it's just as a proof-of-concept).To avoid this sounding too much like a "Code Review" question, what is the purpose of  and do I need it in the above? It works fine with and without. Moreover, is there a loop-level method to invoke a coroutine and return a future? It seems a bit odd to do this with a module level function.
You would need to use  if you called  anywhere and wanted it to return the loop created when you called .From the docsIf thereâ€™s need to set this loop as the event loop for the current context,  must be called explicitly.Since you do not call  anywhere in your example, you can omit the call to .


Answer URL
https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.AbstractEventLoopPolicy.new_event_loop
https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-policies-and-the-default-policy
