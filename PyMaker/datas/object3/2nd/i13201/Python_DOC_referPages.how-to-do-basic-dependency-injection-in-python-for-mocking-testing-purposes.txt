Natural Text
Python is a relatively new language for me. Unit Testing and Dependency Injection are something that I've been doing for a little while now, so I'm familiar with it from a C# perspective.Recently, I wrote this piece of Python code:And then I realized that I had just created a hard-coded dependency. Bleh.I had considered changing my code to do "Constructor" Dependency Injection:This now allows me to inject a fake/mock dependency for the sake of Unit Testing, but wasn't sure if this was considered Python-ic. So I'm appealing to the Python community for guidance. What are some examples of Python-ic ways to do basic DI (mostly for the sake of writing Unit Tests that utilize Mocks/Fakes)?ADDENDUM For anyone curious about the Mock answer, I decided to ask a separate question here: How does @mock.patch know which parameter to use for each mock object? 
Don't do that. Just import requests as normal and use them as normal. Passing libraries as arguments to your constructors is a fun thing to do, but not very pythonic and unnecessary for your purposes. To mock things in unit tests, use mock library. In python 3 it is built into the standard libraryhttps://docs.python.org/3.4/library/unittest.mock.htmlAnd in python 2 you need to install it separately https://pypi.python.org/pypi/mockYour test code would look something like this (using python 3 version)
While injecting the requests module can be a bit too much, it is a very good practice to have some dependencies as injectable.It may be the case that a full-fledged framework is just what you need. For that there are excellent modules out there such as Injector.A more minimalist and straight forward approach would be to use a decorator to do the job for you. There are a handful of modules for that out there.I maintain one such module: Injectable, which provides a Python 3  decorator to enable easy and clean dependency injection.The main points of this decorator are that:the function does not have to be aware of the autowiring at alldependencies can be lazy initializedthe caller is able to explicitly pass the dependency instances if desiredBasically you turn code like this:into this:No complex stuff, no setup, no workflows enforced.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
