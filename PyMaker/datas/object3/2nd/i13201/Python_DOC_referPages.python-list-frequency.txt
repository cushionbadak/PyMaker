Natural Text
I have to figure out how to print a frequency set. So far this is my code, but it keeps skipping the first number in the list. I assume that's because I have previous starting at  but I don't know how else to fix that 
Python comes with a built in Counter type for counting frequencies for you. This doesn't solve the original problem with the code, but it does what you want it to do.
Your diagnosis is correct.  The first time through the loop,  will always be , so the first group never gets printed.  (Or, even worse, if the list is empty, then  crashes.)The simple way to get the job done is to use .  Look at the linked documentation to see how it could be implemented.In addition, I am suggesting:changing  to , so as to avoid having the caller see the side-effect of altering the list order.Using  instead of concatenation with two explicit  type conversions.If you wanted to salvage your existing implementation, the quick fix would be to add an exception for the first pass:You wouldn't even have to initialize  and .
Are you sure it's skipping the first one and not the last one? Right now it looks like it's ONLY printing information when you cross over from one data value to another. So if the entire file is one data value (e.g. a bunch of 1s), you'll never hit the "else" statement and never print. You can get around this simply by printing the previous value and count one final time after the loop has completed. Your first value should still be counted because you're initializing "previous" to the first value in data, so when you enter the loop, d == previous and you increment the count. That part looks like it'll do what you expect it to do. If this isn't right, could you provide a simple input/output? 
Source for skipping first itemFor counting consecutive values, itertools.groupby() suggested by 200_success doesn't do the trick (Count() doesn't either) since these don't count adjacency but overall count. However, the presented question says 'frequency', and that CAN be counted with Count() or groupby().A third alternative would be using a dict (better value-get time with keys as input):


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.groupby
