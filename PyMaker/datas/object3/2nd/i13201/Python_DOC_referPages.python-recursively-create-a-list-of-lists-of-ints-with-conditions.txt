Natural Text
I want to create all possible distributions of n items. This refers to the commonly known pigeonhole principle.The following values are the result of Microsoft Excel:I already have some code, but there are some issues with deleting the temporary lists.With this I get good results printed out after "end: ", but some values like [1, 2] (calling with n = 3) are missing. Additionally to this the values are not appended to my all_distributions.I'm interested in the way I tried to solve this problem. Is this a good approach or am I absolutely wrong?
The main problem with your code is that the list  ends up containing many references to the same input list . When you call , the list  is not copied into the list , but merely a reference to the list is appended. You can fix this by explicitly inserting a copy: A minimal fix to your code is to insert copies, remove  in the base case, and adding  after the recursive call:Outputs: A better way is to avoid using , and instead using the plus operator on lists, like so:The plus operator on lists creates a new list by concatenating the two given lists. In this case, we are concatenating a single element  on the right side of  to get a new copy containing the elements in  followed by .Another improvement is to avoid the global variable , and instead return the list of distributions:Outputs: 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
