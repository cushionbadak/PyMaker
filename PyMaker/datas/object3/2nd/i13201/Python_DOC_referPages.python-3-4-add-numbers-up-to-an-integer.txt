Natural Text
This question already has an answer here:Is there a faster way to sum up an arithmetic sequence of numbers in Python?                    3 answers                What I need to do is create a function where a previously entered input (in this case y) gets all the numbers up to it added up. Or, as my teacher put it: It should then find the sum of all the numbers starting at 1 up to the number typed in.For example, if I type in a 10 the function should return 55.Because: If I type in a 12 the function should return 78.Because:Here is what I have tried so far:
About your code:First, why are you using  in  part but using  in  part?Then, simply do something like this:Demo:For example, the number is :Output: will give a generator like  here. And  can do something like  that you want.
This looks like an assignment, so it's better that you try it for yourself instead of getting a complete answer from the internet.However I can point you in the right direction.In your code:Ask yourself if the first line makes sense. If y is smaller than one, than surely it is also smaller than 9999....Try to think of the correct operator here.What you're looking to do (assuming this is an assignment to learn loops) is a simple loop that starts at 1, and ends at y, in which you have an addition.
you need to know about range:range(start, stop[, step])This is a versatile function to create lists containing arithmetic progressions. It is most often used in for loops. The arguments must be plain integers. If the step argument is omitted, it defaults to 1. If the start argument is omitted, it defaults to 0. The full form returns a list of plain integers [start, start + step, start + 2 * step, ...]. If step is positive, the last element is the largest start + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero (or else ValueError is raised).sum(iterable[, start])Sums start and the items of an iterable from left to right and returns the total. start defaults to 0. The iterableâ€˜s items are normally numbers, and the start value is not allowed to be a string.


Answer URL
https://docs.python.org/3/tutorial/
