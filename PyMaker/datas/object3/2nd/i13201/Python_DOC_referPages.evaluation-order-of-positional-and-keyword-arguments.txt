Natural Text
Consider this contrived* example:Three shall be the number thou shalt count, and the number of the countingshall be three.Four shalt thou not count,neither count thou two, excepting that thou then proceed to three.Five is right out.After having read this question,I would actually have thought that  is the only one that works, becausefirst,  would be evaluated,  set to  and  set to then,  still ,  would be evaluated and  set to , too.My expectation for  was to get the error that I actually sawfor .What is going on here? Why are the arguments seemingly not evaluated from left to right? Are keyword arguments evaluated first?*actually my real code corresponds to , which works, but I wasn't sure it was safe, and after reading the other question I thought it shouldn't actually work.I'm using Python 2.7, if that matters.
Python 2.7If we look at the CPython source related to creating the AST() for a function call the order of argument evaluation turns out to be:ie. args --> keywords --> vararg --> kwargSo, in your case the keyword argument is evaluated first and then the star based expression() is evaluated.Byte code:Hence in your case the  call will happen first followed by the  evaluation.So, if  is a part of  then we will get an error with :It will work if we do it *lazily:*The reason why generator works and  or list comprehension fails is explained at the end.Python 3.5The  function here only maintains two lists:  and . Here the  are inserted into the args list and  go to the  list. So, in the end the call looks like:Byte code:Now things can get a little exciting if the expression yielding the  is lazy:Byte code:The lazy call works because unpacking(aka actual evaluation of the generator) doesn't happen until the function is actually called, hence in this case  call will remove the 3 first and then later on map will only pass 1, 2.But, in the case of list comprehension the list object already contains 3 items and then even though  removed 3 later on we are still passing two values for the third argument.


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
