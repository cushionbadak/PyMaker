Natural Text
I'm running a simple PID control program in python. Basically an infinite while loop, which reads from sensors then calculates the appropriate control signal, as well as outputs diagnostic info to the terminal. However, sometimes while watching the diagnostic info, I'd like to change the PID coefficients - which are essentially some constants used by the loop - by breaking from the loop, accepting user input, then returning to the very same loop. I'd like to do this an arbitrary number of times.With 'goto' this would be simple and easy and just what I want. Can someone give me some python pseudo-code to do this? I can't really think of how to do it. I can interrupt the loop with a CTRL+C exception handler, but then I can't get back to the main loop. There must be some very simple way to do this but I can't think of it. Thoughts?Snippets from my code:
As long as you're okay with restarting "from the top" after each interrupt (as opposed to returning to the exact point in the loop when the signal was raised, which is a much harder problem):
In case you don't want a separate thread for IO, generators may be used to preserve the state of your loop across KeyboardInterrupts.So the main loop will continue with new parameters from the last executed . This however would require to rewrite your loop. Probably, it should be splitted into a generator that will give you sensor data and into a function that will actually do stuff based on the sensor values.
You already have a few ways to interact with your loop, I'd like to point out another one: . Using , you can wait for either user input. If you add a timeout, you can then break into the normal loop if no user input is available and interact with your hardware there.Notes:Here's the documentation for select , but consider the warning on top and look at the selectors module instead.This solution, like the one using a keyboard interrupt, will stop interacting with the hardware while parameters are being changed. If that isn't acceptable, using a background thread is necessary.Using  is more generally applicable, you could also wait for network traffic.Your hardware will not be serviced as often as possible but with a fixed pause in between. On the upside, you also don't use a full CPU then.


Answer URL
https://docs.python.org/3/library/select.htmlselect
https://docs.python.org/3/library/selectors.html
