Natural Text
I am working on a Python script to compare two files. Therefore I have chosen to work with  as an external program, launching the following two commands:From the results of those commands gives me the differences, I can extract the amount of differences by counting the amount of lines.In order to execute this in a Python script, I have embedded those  commands in  functions:I have put the two problematic lines in comment (the ones who end with ). As you can see the problem is the following:When I launch the command in a command prompt, the result which I get is a bunch of strings. By counting the amount of those strings I can get the result that I want (e.g. using a ).When I launch the command in a Python script, the result which I get ( and ) are bytes instead of strings. I had hoped that a simple typecast to a string would give me the opportunity to count for the number of newline characters and hence, count the number of differences, but this would have been too easy.I have tried using the  but pipes inside of  seem not to be a good idea.How I can handle the  and  results in order to search for the number of differences?
I'm guessing you're using python 3.x (you don't specify 2.7 vs 3.x but in 2.7,  returns a tuple of two strings-or-None values, while in 3.x it returns a tuple of two bytes-or-None values, and you said specifically "bytes"):vs:This is because python3 uses Unicode for all its strings (instead of trying to use strings for both byte-sequences and "stringy" things).There are two obvious ways to deal with this.Work with the bytes as bytes:(This method also works in Python 2.7, the b'\n' is just '\n'.)Convert the input to Unicode.  I'm not very up on Python3 and am not sure of the Best Way to do this, but this seems pretty good:Or, you can have Python convert the piped output to Unicode strings by setting ; see the documentation.Or, of course, you can use Python 2 :-) (I still do for various compatibility reasons)
Don't call  on bytes. It is almost always an error.To enable text mode, pass  to .Or you could work with bytes directly e.g., use  instead of .
Why don't you pipe it to the unix tool  : You can call this in your  command.


Answer URL
https://docs.python.org/3/library/subprocess.html
