Natural Text
I have a very hard time handling bitswapping in python3.So far I found fast bitswapping algorithms in C here and here, but I wasn't able to properly translate that into python3, because handling the data, using the correct data types and not getting confused by different encodings was impossible for me.The only solution, that worked for me was using BitArray to do the swapping like this:However this algorithm takes more than 2 Minutes to process the data that needs to be bitswapped. Profiling of this algorithm showed, that the creation of an BitArray takes most of the total time.Every attempt to convert the binary input data to strings of '0' and '1' or integers, to do the "swapping"-part manually, failed, because the data has no specific encoding (utf-8 / utf-16 didn't work)Here is an example of my Input DataDoes anyone know a fast way, to do the task described above?
You could try something like the following approach. This uses Python's  and  functions.This first creates a translate table and then applies it at once to the contents of the whole input file.
Do you really want do this in Python? Just use the efficient C solution and :
I suggest you prepare an array with 256 entries specifying how to swap each byte, and then use string.translate to convert the input.You can then use this to operate on the entire file in a single call rather than operating byte by byte so I suspect it will be a lot faster than your current method.
As you only need to reverse single bytes in Python 2, you could just use the lookup table from the referenced answer:
Use a lookup table array() to map a byte value to it's bit reversed version.This should be more than efficient enough, using C for a simple task like this is silly.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.check_call
