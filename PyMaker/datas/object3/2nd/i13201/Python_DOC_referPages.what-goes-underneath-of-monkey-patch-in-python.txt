Natural Text
I'm a bit confused and trying to understand what goes underneath in the hope that I would understand Monkey Patch better. I've read Where to patch and I understand that I have to patch from where you use the module. But in the documentation. If I do this  Then I have to patch like this.However, why if I import the module like this. I instead have to use the patch like this.I only understand how to use the patch but I don't understand why is this the case? Is it the way Python import module?
The goal is to intercept, and modify, the reference that will be used by functions whose behavior you want to affect. Initially,  and  point to the same object; but the patch will replace one of these references with something else.In the documentation, the example is that you want to modify the  that is seen and used by . So what matters is how  refers to :If  contains a reference to plain , it will be resolved to a variable in its own module:  in this example (and incidentally  created this variable by importing it). Hence  is what needs to be patched.If  explicitly refers to , then that's the reference that needs to be patched.Suppose module  contains both of these lines:Which reference should be patched? Why, the one that is used by ! What matters is not how it's imported into , but how it's accessed by the code that uses it.
This all has to do with namespaces.Inside of , when the command  executes,  is added to the namespace of module . Thus, you have .In the other case, when still inside of  and you execute the command , all that happens is that the module  now has access to the namespace of module . So from a global point of view, the class being used inside of  is still .


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
