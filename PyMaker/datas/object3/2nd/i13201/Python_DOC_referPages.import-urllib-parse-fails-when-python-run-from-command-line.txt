Natural Text
I have observed the following behavior in python 3.4.2, and I am unableto explain it. Hopefully someone could shed some light on the matter:In IPython:I've imported a module, and printed one of its attributes. Everything works as expected. So far, life is good.Now, I do the same thing from the command line:Say what?! that's not how that's supposed to work.Ok, maybe this is a python-wide behavior; maybe modules are not immediately imported when using the  flag. Let's try another module:What?! How does it work for  and not for ? I'm using the same version of python in both places (3.4.2)Does anyone have any thoughts on this?EDIT:Per one of the comments:And
When you run , it creates the module object of the  module (which is actually a package) without importing its submodules (parse, request etc.). You need the parent module object () to be in your namespace if you want to access its submodule using attribute access. In addition to that, that submodule must already be loaded (imported). From the documentation:if package  has a submodule , after importing  ,  will have an attribute  which is bound to the  submodule. [...] The invariant holding is that if you have   and  (as you would  after the above import), the latter must appear as the  attribute  of the former.There is only one instance of each module, thus any changes made to the  module object (stored in ) get reflected everywhere.You don't import , but IPython does. To prove this I'm going to create a startup file:and launch It is the side effect of importing  during the startup of IPython ( is /usr/local/bin/ipython):This explains why the below code fails - you only import  and nothing seems to import :On the other hand, the following command works because  is not a module. It's a class that gets imported during .
 is available from Python 3 onwards. I think you might need to , not . Not sure if (when) submodule import is implicit.I would guess IPython imports  on startup and that is why it is available. is a module not an attribute:


Answer URL
https://docs.python.org/3/glossary.html#term-package
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/library/sys.html#sys.modules
