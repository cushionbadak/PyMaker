Natural Text
I want to create a dictionary where the keys are regular expressions:Then, when I look into the dictionary:I want apple  to be matched against the keys which are regular expressions. If there is a complete match with a key/regular-expression then the corresponding value should be returned.For example  matches with the regular expression  completely, and so,  should be returned.Of course, all of this assumes that the regular expression keys do not conflict (i.e. two keys should not both match the same string exactly). Let's say I can manually take care of this requirement when building my keys.Is this possible in Python? If so, it would be quite an elegant and powerful construct!
Python dictionaries are implemented as hash tables - which means any  lookup is very fast by internally hashing .  Using regular expressions as keys will cancel this functionality.  Instead of using a dictionary, you should use a simple list or tuple where each item is a tuple in the format:  and scan them until a regular expression passes.  This will also give you the ability to play with the order of regular expressions (from specific to general, for example):See also Django's url resolver for a (very) advanced implementation of your idea.
You can use a d pattern object as a dictionary key:Note that recompiling the same regex gives you an equal key (the same object, in fact: ), so you can get back whatever you stored against it. However:As pointed out in the comments, multiple regular expressions can match the same string; Dictionaries aren't ordered, so you might get a different matching regex first each time you run the program; and There's no  way to ask a dictionary  for a  value given a string that might match one or more  keys. It's therefore difficult to see what utility you'd find for this.If you can come up with a way to ensure that no two keys can match the same string, you could create a  subclass that applies this check when you add new keys and implements  to scan through the key-value pairs and return the first value where the argument matches the key regex. Again, though, this would be .
Sure. Just look them up as normal and check for matches.Result:Note that  only produces a match if the expression is found at the beginning of the string. Use  if it's okay for the expression to be anywhere in the string.
Possible solution:Output:


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping
