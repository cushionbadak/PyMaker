Natural Text
I would like to play around in the python interpreter but with a bunch of imports and object setup completed. Right now I'm launching the interpreter on the command line and doing the setup work every time.  Is there any way to launch the command line interpreter with all the initialization work done?Ex:
You can create a script with the code you wish to run automatically, then use  to run it. For example, create a script (let's call it script.py) with this:Then run the scriptAfter the script has completed running, python leaves you in an interactive session with the results of the script still around.If you really want some things done every time you run python, you can set the environment variable  to a script which will be run every time you start python. See the documentation on the interactive startup file.
I came across this question when trying to configure a new desk for my research and found that the answers above didn't quite suit my desire: to contain the entire desk configuration within one file (meaning I wouldn't create a separate  as suggested by @srgerg).This is how I ended up achieving my goal:In this case  is in the CWD (so no path extension is required there), whereas  is in an arbitrary directory on my system, which is specified via .You could do this in a single line if necessary: .
I use .My  has a path to my home folder , which as the import statements in it.https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP
You can use the -s option while starting the command line. The details are given in the documentation here
I think I know what you want to do. You might want to check IPython, because you cannot start the python interpreter without giving the  option (at least not directly).This is what I did in my project:You need to be careful, though, because the shell will have the namespace of the module that the function  is defined. If you put the definition  in the file you run, then you will be able to access the  you want. There could be other workarounds to inject the namespace you want, b̶u̶t̶ ̶y̶o̶u̶ ̶w̶o̶u̶l̶d̶ ̶h̶a̶v̶e̶ ̶t̶o̶ ̶g̶i̶v̶e̶ ̶a̶r̶g̶u̶m̶e̶n̶t̶s̶ ̶t̶o̶ ̶t̶h̶e̶ ̶f̶u̶n̶c̶t̶i̶o̶n̶ ̶i̶n̶ ̶t̶h̶a̶t̶ ̶c̶a̶s̶e̶.EDITThe following function defaults to caller's namespace ().without any extra arguments.


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP
https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file
