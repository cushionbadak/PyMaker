Natural Text
I have come across this:but sometimes it does not work with all my items, as if they weren't recognized in the list (when it's a list of string).Is this the most 'pythonic' way of finding an item in a list: ?
As for your first question: that code is perfectly fine and should work if  equals one of the elements inside . Maybe you try to find a string that does not exactly match one of the items or maybe you are using a float value which suffers from inaccuracy.As for your second question: There's actually several possible ways if "finding" things in lists.Checking if something is insideThis is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the  operator for that:Filtering a collectionThat is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that:The latter will return a generator which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent toin Python 2. Here you can see higher-order functions at work. In Python 3,  doesn't return a list, but a generator-like object.Finding the first occurrenceIf you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the  clause as well, which is not really well-known). You can also usewhich will return the first match or raise a  if none is found. Alternatively, you can useFinding the location of an itemFor lists, there's also the  method that can sometimes be useful if you want to know where a certain element is in the list:However, note that if you have duplicates,  always returns the lowest index:......If there are duplicates and you want all the indexes then you can use  instead:
If you want to find one element or  use default in , it won't raise  if the item was not found in the list:
While the answer from Niklas B. is pretty comprehensive, when we want to find an item in a list it is sometimes useful to get its index:
Finding the first occurrenceThere's a recipe for that in :For example, the following code finds the first odd number in a list:
Another alternative: you can check if an item is in a list with , but this is order O(n). If you are dealing with big lists of items and all you need to know is whether something is a member of your list, you can convert the list to a set first and take advantage of constant time set lookup:Not going to be the correct solution in every case, but for some cases this might give you better performance.Note that creating the set with  is also O(n), so if you only need to do this once then it isn't any faster to do it this way. If you need to repeatedly check membership though, then this will be O(1) for every lookup after that initial set creation.

Check there are no additional/unwanted whites space in the items of the list of strings.That's a reason that can be interfering explaining the items cannot be found.
You may want to use one of two possible searches while working with list of strings:if list element is equal to an item ('example' is in['one','example','two']):'ex'   in ['one','ex','two'] => True'ex_1' in ['one','ex','two'] => Falseif list element is like an item ('ex' is in['one,'example','two'] or 'example_1' is in['one','example','two']):orthen just check  or read them if needed.  
Instead of using  which returns the index of x if it is found in list or returns a  message if x is not found, you could use  which returns the number of occurrences of x in list (validation that x is indeed in the list) or it returns 0 otherwise (in the absence of x). The cool thing about  is that it doesn't break your code or require you to throw an exception for when x is not found
Definition and Usagethe  method returns the number of elements with the specified value.Syntaxexample:Question's example:
For example, if you want to find the index of all elements bigger than 30:


Answer URL
https://docs.python.org/3/library/functions.html#next
