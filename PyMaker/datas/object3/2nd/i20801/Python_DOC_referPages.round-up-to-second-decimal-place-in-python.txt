Natural Text
How can I round up a number to the second decimal place in python?  For example:Should round up to Should round up to If there is any value in the third decimal place, I want it to always round up leaving me 2 values behind the decimal point.
Python includes the  function which lets you specify the number of digits you want. From the documentation: Return the floating point value x rounded to n digits after the decimal point. If n is omitted, it defaults to zero. The result is a floating point number. Values are rounded to the closest multiple of 10 to the power minus n; if two multiples are equally close, rounding is done away from 0 (so. for example, round(0.5) is 1.0 and round(-0.5) is -1.0).So you would want to use  to do normal rounding. To ensure that the number is always rounded up you would need to use the  function. Similarly, to round down use .
See: documentation documentation - You'll probably want to check this out anyway for future reference
Extrapolating from Edwin's answer:To use:

This depends on the behavior you want when considering positive and negative numbers, but if you want something that always rounds to a larger value (e.g. 2.0449 -> 2.05, -2.0449 -> -2.04) then you can do:or a little fancier:This also seems to work as follows:
Note that the  trick will crash on some degenerate inputs, like 1e308.  This may not come up often but I can tell you it just cost me a couple of days.  To avoid this, "it would be nice if"  and  took a decimal places argument, like  does...  Meanwhile, anyone know a clean alternative that won't crash on inputs like this?  I had some hopes for the  package but it seems to die too:Of course one might say that crashing is the only sane behavior on such inputs, but I would argue that it's not the rounding but the multiplication that's causing the problem (that's why, eg, 1e306 doesn't crash), and a cleaner implementation of the round-up-nth-place fn would avoid the multiplication hack.

The round funtion stated does not works for definate integers like :a=8  round(a,3)  8.0  a=8.00  round(a,3)  8.0  a=8.000000000000000000000000  round(a,3)  8.0but , works for :r=400/3.0  r      133.33333333333334  round(r,3)      133.333Morever the decimals like 2.675 are rounded as 2.67 not 2.68.Better use the other method provided above.
The python  function could be rounding the way not you expected.You can be more specific about the rounding method by using eg.More reference:https://gist.github.com/jackiekazil/6201722


Answer URL
https://docs.python.org/3/library/decimal.html
