Natural Text
Does anyone know why these two return different ratios.
This gives some ideas of how matching works.It looks as if it matches as much as it can on the first sequence against the second and continues from the matches. In this case ('01017', '14260'), the righthand match is on the 0, the last character, so no further matches on the right are possible. In this case ('14260', '01017'), the 1s match and the 0 still is available to match on the right, so two matches are found.I think the matching algorithm is commutative against sorted sequences.
I was working with  lately, and though this answer is late, I thought it might add a little spice to the answer provided by hughdbrown as it shows what's happening visually.Before I go to the code snippet, let me quote the documentationThe idea is to find the longest contiguous matching subsequence that  contains no "junk" elements; these "junk" elements are ones that are  uninteresting in some sense, such as blank lines or whitespace.  (Handling junk is an extension to the Ratcliff and Obershelp  algorithm.) The same idea is then applied recursively to the pieces of  the sequences to the left and to the right of the matching  subsequence. This does not yield minimal edit sequences, but does tend  to yield matches that “look right” to people.I think comparing the first string against the second one and then finding matches looks right enough to people. This is explained nicely in the answer by hughdbrown.Now try and run this code snippet:Output:The parts inside braces () are the matching parts. I just used  to put the matching blocks within braces for better visibility. You can clearly see the difference when the order is reversed. With the first order, there are 4 matches, so the ratio is . But when the order is reversed, there are now 5 matches, so the ratio becomes . The ratio is calculated as given here in the documentation


Answer URL
https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.get_matching_blocks
