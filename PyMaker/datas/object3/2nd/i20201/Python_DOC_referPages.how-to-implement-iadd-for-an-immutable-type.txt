Natural Text
I would like to subclass an immutable type or implement one of my own which behaves like an  does as shown in the following console session:Not surprisingly,  objects have no  method, yet applying  to one doesn't result in an error, instead it apparently creates a new  and also somehow magically reassigns it to the name given in the augmented assignment statement.Is it possible to create a user-defined class or subclass of a built-in immutable one that does this, and if so, how?
The return value of  is used. You don't need to return the object that's being added to; you can create a new one and return that instead. In fact, if the object is immutable, you have to.
Simply don't implement , but only :If there's no , Python simply calculates  as  doc.
When it sees , Python will try to call . If that fails, it'll try to call .In both cases, the result of the call will be bound to the name, i.e. it'll attempt  and then .



Answer URL
