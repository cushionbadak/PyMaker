Natural Text
I'm trying to create a Python property where in-place adding is handled by a different method than retrieving the value, adding another value and reassigning. So, for a property  on an object ,should work differently thanThe value of  should be the same in the end, so as not to confuse people's expectations, but I want to make the in-place add more efficient. (In reality the operation takes a lot more time than simple addition.)My first idea was to define, in the class,But this raises an AttributeError, presumably because  implements ?My next attempt uses a descriptor object:As you can see, the special  method is not called. I'm having trouble understanding why this is, although I surmise that the object's  is somehow bypassing it.How can I do this? Am I not getting the point of descriptors? Do I need a metaclass?
 will only be looked for on the value returned from .  You need to make  (or the property getter) return an object (or a proxy object) with .
The  operator in the lineis translated toThe attribute lookup on the right-hand side is translated toAs you can see,  is called on the return value of the attribute lookup, so you need to implement  on the returned object.
To inspire you, here's a less-than-ideal solution which is the best I've managed to come up with so far:The big disadvantage being, that you have to implement the full complement of numerical magic methods on  if you want the property to behave anything like a number. Having  inherit from  doesn't seem to let it inherit the operators, either.
Why not something like the following example. Basically the idea is to let the Bar class ensure the stored value for property x is always a Foo object.EDIT: Extended example to show how to use it as a property. I first misunderstood the problem slightly. 


Answer URL
