Natural Text
It seemed very natural to me to assume the latter. I'm sure there is a good reason for this. What is it? 
You can't put a period in the getattr function because getattr is like accessing the dictionary lookup of the object (but is a little bit more complex than that, due to subclassing and other Python implementation details).If you use the 'dir' function on a, you'll see the dictionary keys that correspond to your object's attributes. In this case, the string "b.c" isn't in the set of dictionary keys.The only way to do this with  is to nest calls:Luckily, the standard library has a better solution!
Python's built-in  function enables the functionality you're looking for. Here's a simple little helper function that will get the job done:Test proof;
I think your confusion arises from the fact that straight dot notation (ex ) accesses the same parameters as , but the parsing logic is different.  While they both essentially key in to an object's  attribute,  is not bound to the more stringent requirements on dot-accessible attributes.  For instanceIs valid, since that string just becomes a hash key in , butandare syntax errors because now you are asking the interpreter to parse these things as raw code, and that doesn't work.The flip side of this is that while  is equivalent to ,  is equivalent to .  That's why  doesn't work as you are expecting.
Because  doesn't work that way.  gets attribute of a given object (first argument) with a given name (second argument). So your code:means: Access "b.c" attribute of object referenced by "a". Obviously your object doesn't have attribute called "".To get "c" attribute you must use two  calls:Let's unwrap it for better understanding:
I think the most straight forward way to achieve what you want is to use .If the attribute doesn't exist then you'll get an 
What should return ? Should it raise  or just return ? That's why complex keys if introduced in  would make it obscure to use.So, it's more natural to view  function as  method of dictionary of object attributes.
You can call the multiple getattr without calling a function within function by splitting the dot operators and performing a getattr() for each dot operatorIf suppose you wish to call a.b.c.d you can do it via a.multi_getattr('b.c.d'). This will generalise the operation without worrying about the count of dot operation one has in the string.


Answer URL
https://docs.python.org/3/howto/descriptor.html
