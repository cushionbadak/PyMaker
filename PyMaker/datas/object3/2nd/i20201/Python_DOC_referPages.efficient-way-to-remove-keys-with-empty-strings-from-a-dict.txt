Natural Text
I have a dict and would like to remove all the keys for which there are empty value strings.What is the best way to do this?
Python 2.XPython 2.7 - 3.XNote that all of your keys have values.  It's just that some of those values are the empty string.  There's no such thing as a key in a dict without a value; if it didn't have a value, it wouldn't be in the dict.
It can get even shorter than BrenBarn's solution (and more readable I think)Tested with Python 2.7.3.
If you really need to modify the original dictionary:Note that we have to make a list of the empty keys because we can't modify a dictionary while iterating through it (as you may have noticed). This is less expensive (memory-wise) than creating a brand-new dictionary, though, unless there are a lot of entries with empty values.
If you want a full-featured, yet succinct approach to handling real-world data structures which are often nested, and can even contain cycles, I recommend looking at the remap utility from the boltons utility package. After  or copying iterutils.py into your project, just do:This page has many more examples, including ones working with much larger objects from Github's API.It's pure-Python, so it works everywhere, and is fully tested in Python 2.7 and 3.3+. Best of all, I wrote it for exactly cases like this, so if you find a case it doesn't handle, you can bug me to fix it right here.
BrenBarn's solution is ideal (and pythonic, I might add). Here is another (fp) solution, however:
Based on Ryan's solution, if you also have lists and nested dictionaries:For Python 2:For Python 3:
If you have a nested dictionary, and you want this to work even for empty sub-elements, you can use a recursive variant of BrenBarn's suggestion:
Building on the answers from patriciasz and nneonneo, and accounting for the possibility that you might want to delete keys that have only certain falsy things (e.g. ) but not others (e.g. ), or perhaps you even want to include some truthy things (e.g. ), then you could make a highly specific hitlist:Unfortunately, this doesn't quite work, because for example  evaluates to . We need to discriminate between  and other falsy things, so we have to use :...evaluates to .Now use it to  the unwanted things:If you want a new dictionary, instead of modifying  in place:
Quick Answer (TL;DR)Example01Detailed AnswerProblemContext:  Python 2.xScenario: Developer wishes modify a dictionary to exclude blank valuesaka remove empty values from a dictionaryaka delete keys with blank valuesaka filter dictionary for non-blank values over each key-value pairSolutionexample01 use python list-comprehension syntax with simple conditional to remove "empty" valuesPitfallsexample01 only operates on a copy of the original dictionary (does not modify in place)example01 may produce unexpected results depending on what developer means by "empty"Does developer mean to keep values that are falsy?If the values in the dictionary are not gauranteed to be strings, developer may have unexpected data loss.result01 shows that only three key-value pairs were preserved from the original setAlternate exampleexample02 helps deal with potential pitfallsThe approach is to use a more precise definition of "empty" by changing the conditional.Here we only want to filter out values that evaluate to blank strings.Here we also use .strip() to filter out values that consist of only whitespace.      Example02See alsolist-comprehensionfalsychecking for empty stringmodifying original dictionary in placedictionary comprehensionspitfalls of checking for empty string
For python 3
I read all replies in this thread and some referred also to this thread:Remove empty dicts in nested dictionary with recursive functionI originally used solution here and it worked great:Attempt 1: Too Hot (not performant or future-proof):But some performance and compatibility concerns were raised in Python 2.7 world:use  instead of unroll the list comp into  loop for efficiencyuse python3 safe  instead of Attempt 2: Too Cold (Lacks Memoization):DOH! This is not recursive and not at all memoizant.Attempt 3: Just Right (so far):
An alternative way you can do this, is using dictionary comprehension. This should be compatible with 
Here is an option if you are using :
Some of Methods mentioned above ignores if there are any integers and float with values 0 & 0.0If someone wants to avoid the above can use below code(removes empty strings and None values from nested dictionary and nested list):
Some benchmarking:1. List comprehension recreate dict2. List comprehension recreate dict using dict()3. Loop and delete key if v is Noneso loop and delete is the fastest at 160ns, list comprehension is half as slow at ~375ns and with a call to  is half as slow again ~680ns.Wrapping 3 into a function brings it back down again to about 275ns. Also for me PyPy was about twice as fast as neet python.


Answer URL
https://docs.python.org/3/library/stdtypes.html
