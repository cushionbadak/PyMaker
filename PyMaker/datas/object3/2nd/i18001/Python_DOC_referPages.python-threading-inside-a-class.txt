Natural Text
I recently started with python's threading module. After some trial and error I managed to get basic threading working using the following sample code given in most tutorials.My problem is: I have a Class that has class variables and a function that I want to be run in a separate thread. However the function uses class variables and also writes to class variables. Like so:So how would I essentially 'put the thread class in MyClass'. So that if MyClass().func_to_threaded() is called it would run in a thread.
If I understand correctly you want to run a function in a separate thread? There are several ways to do that. But basically you wrap your function like this:It can be shortened with a decorator:Edit Updated version with a handle:This can be used as follows:Now it is possible to extend it even more if you wish to return a value from the function. Consider this:If you don't have concurrent.futures.Future class (because for example you are using Python2.7 or older) then you can use this simplified implementation:I advice reading through concurrent.futures module since it has a lot of neat tools. For example  class should be replaced with a  instance to limit concurrency (e.g. you don't want to spam 10k threads). Also with  the code is even simplier (and less error prone):Just remember you have to  after you're done with all parallel work.
You can pass class instance to the thread:
I'm fairly certain that you can't make a single function threaded.The whole class will be threaded (sort of). When you instantiate the object, its  will be called on another thread, and then when you call  on that object, its  will be called once, on another thread. So, if you have a TASK that needs to be on its own thread (disc IO, socket listening, etc), then you need a class to handle that task.@ndpu's answer solves your scope/access problems.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/concurrent.futures.html
