Natural Text
This question already has an answer here:How do I ensure that a Python while-loop takes a particular amount of time to run?                    3 answers                I have the following problem: I need a program that runs every minute. I have managed to do this with python's time-module and an infinite while-loop. It looks like this:The loop runs about 150.000 times a second and while I don't think that the general performance is harmed worthy of mention, I wonder if there are alternatives. Can I modify the number of reruns of a while loop? Or does the algorithm (in assembler, machine code etc.) just jump back to the beginning when finished? Can I use something like a 'wait'-command and will that help?Thanks for listening (and answering ;) ),best wishes,MaxEDIT:A -command indeed solved my problems. I forget to mention that the rerun must take place every full clock-minute. A sleep for 60 seconds wouldn't be satisfying, however, I used a way that Xi Huan's link mentioned: After the execution of a loop, I use . That reduces the CPU usage to 1%. Excellent.And: Thank you all for your help! I'd like to upvote you, but I don't have enough reputation :D srybye!
An easy way would be to sleep in the loop, e.g.EDIT:Also be aware that you will need to 'import time' for this to work.  Also, if you wish to limit the number of times it loops, this could be useful.  The example below will loop once per minute and will loop 10 times in total.
A common way to do this is by calling , which is essentially the 'wait' command you ask about. If you do:The loop will end up running approximately once every minute, plus however long the  takes. There are caveats mentioned in the docs that this isn't guaranteed to be an exact wait time, so you probably still want to check the time at each iteration (depending how strict the 'once per minute' is).
use a  method:


Answer URL
