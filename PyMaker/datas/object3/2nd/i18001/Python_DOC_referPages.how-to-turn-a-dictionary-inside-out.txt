Natural Text
Disclaimer: I am just getting started learning PythonI have a function that counts the number of times a word appears in a text file and sets the word as the key and the count as the value, and stores it in a dictionary "book_index". Here is my code:I need to turn that dictionary "inside out" and use the count as the key, and any word that appears x amount of times as the value. For instance: [2, 'hello', 'hi'] where 'hello' and 'hi' appear twice in the text file.Do I need to loop through my existing dictionary or loop through the text file again?
As a dictionary is a key to value mapping, you cannot efficiently filter by the values. So you will have to loop through all elements in the dictionary to get the keys which values have some specific value.This will print out all keys in the dictionary  where the value is equal to :Regarding your  function, note that you can use the built-in  for counting things. Counter is essentially a dictionary that works with counts as its values and automatically takes care of nonexistant keys. Using a counter, your code would look like this:Or, as roippi suggested as a comment to another answer, just .
Personally I would suggest the use of a Counter object here, which is specifically made for this kind of application. For instance:This will give you the relevant dictionary, and if you then read the Counter docsYou can just retrieve the most common results.This might not work in every case in your proposed problem, but it's slightly nicer than manually iterating through even the first time around.If you really want to "flip" this dictionary you could do something along these lines:The above solution has some advantages over other solutions in that the lazy execution means that for very sparse cases where you're not looking to make a lot of calls to this function, or just discover which value actually have corresponding entries, this will be faster as it won't actually iterate through the dictionary.That said, this solution will usually be worse than the vanilla iteration solution since it actively iterates through the dictionary every time you need a new number.Not radically different, but I didn't want to just copy the other answers here.
Loop through your existing dictionary, here is an example using :Or with :Personally I prefer the  method because the result is a regular dictionary.Example:As noted in some of the other answers, you can significantly shorten your  function by using .
Without duplicates:See PEP 274 to understand dictionary comprehension with Python: http://www.python.org/dev/peps/pep-0274/With duplicates:This way:


Answer URL
