Natural Text
This question already has an answer here:When is “i += x” different from “i = i + x” in Python?                    4 answers                what is the difference between these two assignments in python? 1.d -= set([2])2 d = d - set([2])
With immutable types like integers,  is the same thing as : It creates a new value, , and re-binds the name  to refer to that new value instead of the old one.But with mutable types like sets,  changes the value that  is pointing to in-place. (It also re-binds  to the same value it's already referring to, but that's not important.)The best way to see this is by looking at the object's identity:Notice that the  leaves  still referring to the same set as , and changes that set; the  leaves  referring to a brand-new set with a different , and doesn't affect .Under the covers,  is roughly* equivalent to , while  is equivalent to . Except that if there is no  method,  just uses  instead.The fact that  changes the value, while  returns a new value, isn't really enforced by the language, but it's something that's true of all built-in and stdlib types, and expected to be true of any custom types. It's described in Emulating numeric types in the docs:These [] methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If a specific method is not defined, the augmented assignment falls back to the normal methods. For instance, to execute the statement , where x is an instance of a class that has an  method,  is called. If x is an instance of a class that does not define a  method,  and  are considered, as with the evaluation of .* It's not exactly equivalent because of (a) , (b) types implemented in C (like ), and (c) rules for looking up certain special methods being different from normal methods.


Answer URL
