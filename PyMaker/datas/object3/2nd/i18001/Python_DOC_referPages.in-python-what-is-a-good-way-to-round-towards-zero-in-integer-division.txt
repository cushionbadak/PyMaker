Natural Text
givesas it should. However,gives, but I want it to round towards 0 (i.e. I want -1/2 to be 0), regardless of whether it's positive or negative. What is the best way to do that?
Do floating point division then convert to an int. No extra modules needed.
Python's default division of integers is return the floor (towards negative infinity) with no ability to change that. You can read the BDFL's reason why.To do 'round up' division, you would use:To do truncation towards zero, and maintain integer division, you use  if either a or b are negative and the default division if both are positive.This will do integer division and always round towards zero:footnoteInterestingly enough, C99 declares that round towards zero is the default:Prints:
For what it's worth, my own favourite solution is this one.  Integer arithmetic only, a single division, and everything else linear time:That assumes that  is positive, but in most of the applications I've seen that's true.  If you need to deal with negative  too, then the function becomes marginally more complicated:Some sample outputs:
Try this.  Only works for numbers greater than -1
Correct code to do this is, in my opinion, too obscure to write as a 1-liner.  So I'd put it in a function, like:Good features:  it works for any size of int, doesn't make any adjustment to the raw () result unless necessary, only does one division ( also does a division under the covers), and doesn't create any integers larger than the inputs.  Those may or may not matter in your application; they become more important (for speed) if you use "big" integers.
Throwing my hat in with a few alternate ideas:Multiple the sign of the number [abs(x)/x] by the abs(x)/2Perform the addition, but if the number is less than zero add one to shift it closer to 0.
You can also use the Decimal module as part of the standard python libraries.Specifically, " The integer division operator // behaves analogously, returning the integer part of the true quotient (truncating towards zero) rather than its floor, so as to preserve the usual identity x == (x // y) * y + x % y:"Also, have a look at Rounding Modes as they've got quite a few ways to view/round your information - Ceiling, down, floor, half-down, half-even, half-up, up and 05up rounding. Decimal was written as a solution to the traditional problem of binary mathematics in a world expecting decimals solutions


Answer URL
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/decimal.html#rounding-modes
