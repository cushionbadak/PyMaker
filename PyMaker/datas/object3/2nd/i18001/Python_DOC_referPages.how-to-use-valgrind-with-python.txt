Natural Text
I am trying to memcheck a C python extension I am writing, but I'm having trouble setting up valgrind to work with python. I would really appreciate some advice. Just for context, this is Ubuntu 13.10, python 2.7.5+, and valgrind 3.8.1.As per recommendation from  I did the following.1) Downloaded the python source with2) Applied the code patch, i.e. "Uncomment Py_USING_MEMORY_DEBUGGER in Objects/obmalloc.c".3) Applied the suppression patch, i.e. "Uncomment the lines in Misc/valgrind-python.supp that suppress the warnings for PyObject_Free and PyObject_Realloc"4) Compiled python with Note that I did both 2 and 3, while README.valgrind says to do 2 or 3... more can't hurt. Now, let's test this on some sample python code in Let's run valgrind on python with this scriptUnexpectedly, there is still loads of reports from valgrind, with the first one being (and many more following) Am I doing something wrong? Is there a way to valgrind a python script that doesn't leak and get clean valgrind output? 
I found the answer here.Python also needs to be compiled in debug mode, i.e. In addition, numpy has a suppresion file that gets rid of the extra valgrind warnings.
Since python 3.6, there's a  environment variable which is available in release builds, without needing to recompile.This will disable pymalloc and just use the libc malloc directly, making it valgrind-friendly. This is equivalent to  (and it is just as slow)If valgrind is too slow, other values can be helpful.  and  add debug hooks on top of the default and the libc allocators respectively. Their effects, from the docs:Newly allocated memory is filled with the byte 0xCBFreed memory is filled with the byte 0xDBDetect violations of the Python memory allocator API. For example, PyObject_Free() called on a memory block allocated by PyMem_Malloc().Detect writes before the start of a buffer (buffer underflows)Detect writes after the end of a buffer (buffer overflows)Check that the GIL is held when allocator functions of PYMEM_DOMAIN_OBJ (ex: PyObject_Malloc()) and PYMEM_DOMAIN_MEM (ex: PyMem_Malloc()) domains are called.This will catch some uninitialized reads, some use after free, some buffer under/overflows, etc, but won't report leaks and won't touch memory that isn't allocated through python (When using glibc, the  and  environment variables might help there)See also:Details of the available values3.6 release notes with usage notesCurrent location of README.valgrind


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pythonmalloc
