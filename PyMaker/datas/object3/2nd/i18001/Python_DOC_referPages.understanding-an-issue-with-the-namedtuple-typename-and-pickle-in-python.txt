Natural Text
Earlier today I was having trouble trying to pickle a namedtuple instance. As a sanity check, I tried running some code that was posted in another answer. Here it is, simplified a little more:I then changed two lines of this to use my named tuple:However this gave me the errori.e. the Pickle module is looking for . I changed the line  to  and it worked.I looked at the source of  and at the end we have something that looks relevant, but I don't fully understand what is happening:So my question is what exactly is going on? Why does the  argument need to match the name of the factory for this to work?
In the section titled What can be pickled and unpickled? of the Python documentation it indicates that only "classes that are defined at the top level of a module" can be pickled. However  is a factory function which is effectively defining a class ( in your second example), however it's not assigning the manufactured type to a variable named  at the top level of the module.This is because  saves only the “fully qualified” name of such things, not their code, and they must be able from the module they're in using this name in order to be able to unpickled later (hence the requirement that the module must contain the named object at the top level).This can be illustrated by seeing one workaround for the problem—which would be to change one line of the code so that the type named  is defined at the top level:Alternatively, you could just give the  the name  instead of :As for what that  source code you were looking at does: It's trying to determine the name of module the caller (the creator of the ) is in because the author knows that  might try to use it to  the definition to do unpickling and that folks commonly assign the result to variable with the same name that they passed to the factory function (but you didn't in the second example).


Answer URL
https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled
https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields
