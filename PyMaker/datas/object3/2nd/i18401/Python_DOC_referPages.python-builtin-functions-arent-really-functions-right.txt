Natural Text
Was just thinking about Python's  "function" and starting to realize that  isn't really a function at all. For example, if we do , we get all sorts of methods that aren't include in the usual namespace of an user defined function. Extending that thought, its similar to  and . They aren't function, but really s. But then I'm confused about the documentation page, http://docs.python.org/2/library/functions.html, which clearly says functions. (I guess it should really just says builtin callables)So what gives? (Starting to seem that making the distinction of classes and functions is trivial)
One way that  is special, compared to, say, , is that though both are , and both are implemented in C (in cpython, anyway),  is a ; that is, .  This means that you can use  as the base class for other types, you can write:but notThis can be useful to make classes that behave almost like a builtin object, but with some enhancements.  For instance, you can define a subclass of  that implements  as vector addition instead of concatenation:Which brings up another interesting point.   is also implemented in C.  It's also callable.  Like  (and unlike ) it's an instance of ; .  Because of this weird, seemingly impossible cycle,  can be used to make new classes of classes, (called metaclasses).  You can write:or, in Python 3:Which give the interesting result that .  How this is useful is a bit beyond the scope of this answer, though.
It's a callable, as are classes in general. Calling  is effectively to call the dict constructor. It is like when you define your own class (, say) and you call  to instantiate it.
 is a constructor for a  instance.  When you do  you're looking at the attributes of class .  When you write  you're setting  to a new instance of type .I'm assuming here that  is what you're referring to as the "dict function".  Or are you calling an indexed instance of , e.g.  a function?
Note that calling  on the constructor gives you what you would expect, including the same stuff as you'd get for any other function.  Since a call to the  constructor results in a call to , that explains where those function attributes went.  (Of course there's a little extra behind-the-scenes work in any constructor, but that's the same for dicts as for any object.)


Answer URL
