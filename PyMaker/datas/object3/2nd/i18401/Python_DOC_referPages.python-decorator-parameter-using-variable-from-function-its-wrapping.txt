Natural Text
I'm looking for a way to create a decorator to have a function parameter that actually uses a variable passed into the function its wrapping.for example, lets say I haveThe goal is to write a caching wrapper.  the decorator will need the cache key, but the key is going to include variables passed into the function, and be different for each function it wraps.Ideally, this lets the decorator do a check for a cached value for a given key, and if its not found execute the function to get the value and cache it.  That way if the value is in the cache, its not executing the code that creates the value (i.e. my_function).  if its not found, it executes my_function and stores the result in the cache and also returns it.Another alternative would be something akin to blocks:in Objective-C or js, this would be a block so i can keep the value generation both locally defined and changeable, but only executed if necessary.  I'm too new to python to fully grasp how to do this with its verison of closures.Thanks!UpdateWhile the solution below worked for decorators, I ended up going the block-like route because of the extra metadata required to attach to each cache entry to ensure it can be properly invalidated.  Having this metadata defined with the value generation (as opposed to inside the caching function) is easier to maintain.  This looks like:
You could have your wrapper get a key building function:The key builder should return things which are hashable, such as a tuple of strings. If they aren't hashable, such as lists, maybe transform  them into strings.This key building function gets the same arguments as the function itself and returns the key to be used.
Have you seen  ?  https://bitbucket.org/zzzeek/dogpile.cache/It's a caching system that does exactly this.  You might be able to just use dogpile.  If not, you can look at it's source to see exactly how  it works.incidentally, dogpile.cache handles all of the little details that you should worry about:keeping keys separateserialize/deserializevalue expiry and revalidationhandling cache hits and missesetc
You could pass two lists when creating the decorator. First one would contain the list of positions for the positional arguments and the second one would contain the list of parameter names for keyword arguments.and you would use it like thisThe problem is that you should also serialize the answer of the function and deserialize when retrieving from cache. Another problem is two different call function can give the same key ( and ). The solution to this would be to create a serialization of args and kwargs using json or msgpack so you can be sure that the keys would be unique. If you are using Python 3.3 and you don't need to select the parameters on which to cache on you can use functools.lru_cache


Answer URL
