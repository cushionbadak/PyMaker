Natural Text
I'm working with a string of bytes (which can be anywhere between 10kb and 3MB) and I need to filter out approximately 16 bytes (replacing them with other bytes)At the moment I have a function a bit like this..(Byte list paraphrased for the sake of this question)Using map resulted in an execution time of ~.33s, while this results in a 10x faster time of ~.03s (Both performed on a HUGE string, larger than 1.5MB compressed).While any performance gains would be considerably negligible, is there a better way of doing this?(I am aware that it would be much more optimal to store the filtered string. This isn't an option, though. I'm fooling with a Minecraft Classic server's level format and have to filter out bytes that certain clients don't support)
Use :Python 3.xExample usage:Python 2.x (Python 2)
Look up the  method on strings.  That allows you to do any number of 1-byte transformations in a single pass over the string.  Use the  function to build the translation table.  If you usually have 16 pairs, this should run about 16 times faster than doing 1-byte replacements 16 times.
In your current design,  is being called on the string  times, for each pair. While its most likely an efficient algorithm, on a 3MB string it might slow down.If the string is already contained in memory by the time this function is called, I'd wager that the most efficient way would be:There is a large operation to create a new list at the start, and another to convert back to a string, but since python strings are immutable in your design a new string is made for each replacement.This is all based on conjecture, and could be wrong. You'd want to test it with your actual data.


Answer URL
