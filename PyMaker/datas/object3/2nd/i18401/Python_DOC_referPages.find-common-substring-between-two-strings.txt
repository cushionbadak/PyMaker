Natural Text
I'd like to compare 2 strings and keep the matched, splitting off where the comparison fails.So if I have 2 strings -Another example, as the string could have more than one word. I'm sure there is a simple Python way of doing this but I can't work it out, any help and explanation appreciated.
Its called Longest Common Substring problem. Here I present a simple, easy to understand but inefficient solution. It will take a long time to produce correct output for large strings, as the complexity of this algorithm is O(N^2).Output
For completeness,  in the standard-library provides loads of sequence-comparison utilities. For instance  which finds the longest common substring when used on strings. Example use:
Or a slightly stranger way:Which might be more readable as
One might also consider  that works on characters and thus can be used for any strings.
The same as Evo's, but with arbitrary number of strings to compare:
Fix bugs with the first's answer:
Try:It does the comparison from the beginning of both strings.
This isn't the most efficient way to do it but it's what I could come up with and it works. If anyone can improve it, please do. What it does is it makes a matrix and puts 1 where the characters match. Then it scans the matrix to find the longest diagonal of 1s, keeping track of where it starts and ends. Then it returns the substring of the input string with the start and end positions as arguments.Note: This only finds one longest common substring. If there's more than one, you could make an array to store the results in and return that Also, it's case sensitive so (Apple pie, apple pie) will return pple pie.

Returns the first longest common substring:
First a helper function adapted from the itertools pairwise recipe to produce substrings.Then a function the iterates over substrings, longest first, and tests for membership.  (efficiency not considered)
This is the classroom problem called 'Longest sequence finder'. I have given some simple code that worked for me, also my inputs are a lists of a sequence which can also be a string, might help you:



Answer URL
https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.find_longest_match
https://docs.python.org/3/library/os.path.html#os.path.commonprefix
https://docs.python.org/3/whatsnew/3.6.html#deprecated-python-behavior
