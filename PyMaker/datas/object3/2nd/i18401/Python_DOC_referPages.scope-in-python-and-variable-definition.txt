Natural Text
I'm reading a wiki book Python_Programming and I'm a little confused about the piece of code below:well, I notice that  is defined outside of bar() and it's used in , which is "before"  is defined. I think similar code will cause a compiling error in C and we have to write something like:Without defining  as a formal parameter in , I don't think the compiler is OK with it.But I guess it's totally fine in Python, which is an interpreted language, right?Is this something different in interpreted language compared to compiled language? What's the actual process Python uses when interpreting the code at top?EDIT 1:I think the answer below has made this point very clear, it's about free variable and closure. Here are some links which I think help this question a lot:SO:python-free-variables-why-does-this-failSO:closures-in-python
You are looking at a closure; the Python compiler marks  in  as a free variable because  is not assigned to. is a local in  and because there is a nested scope that uses that name as a free variable,  is marked as a closure.When the code runs, Python creates a closure for  immediately when creating the  function (it is recreated every time you call ; only the bytecode for the function remains unchanged, a constant attached to the  function code).Only when  is invoked does Python need to look up , which means dereferencing the closure, and from there dereferencing the current value of .You can see all this in action with some introspection and disassembly of the bytecode:This builds a function with a closure and returns it without calling. This allows us to introspect the  function created by .Note how the Python compiler has inserted a  for  at the top there.  creates the function object with attached closure, for .All  has to do is dereference the attached closure.The closure points to , and looking up the contents gives you , as expected.Compiled languages could do this as well; someone managed to compile Scheme to C, with preserving the closures: Compiling Scheme to C, for example.


Answer URL
