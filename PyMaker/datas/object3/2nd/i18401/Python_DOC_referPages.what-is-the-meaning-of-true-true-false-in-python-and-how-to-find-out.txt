Natural Text
I actually needed  for my solution, but while thinking on it, I started wondering about the question above. What is the meaning of ? Looking at the documentation I suppose it's , but I'd like a more general and certain approach. How do I quickly get readable form of bytecode for such code. Is there an easier way to find out than both bytecode and documentation?
It's called operator chaining. Whenever you have an expression like  with  and  comparisons it is "translated" to .(Actually it does evaluate  only once).Note: comparisons operator include , , , ! (e.g.  means ).If you want to look at bytecode you can use the  module:If you read at the bytecode you can understand that it performs operator chaining.Given that the expression is , which is "interpreted" as  it first loads the two  constants for the first operator via the  bytecode. The  duplicates the top of the stack(this avoids re-evaluating  for the second comparison).It performs the first comparison() if it is false it just to the bytecode 21, otherwise it pops the top of the stack(). It then performs the second comparison.To answer your general question the fastest way to find out about some feature of python is to use the quicksearch page of the documentation.I'd also suggest to read Python's tutorial for a general introduction to the language.I'd like to add that, since python provides an interactive environment, it is often easier to understand how some code works writing it in the interpreter and watching the results. Almost all buil-in types have the documentation available via docstrings, so doing  should give you a lot of information.In particular  provides an enhanced interactive interpreter with more user-friendly help messages/error formatting etc.)
In most languages,  parses as .Therefore, what you would expect is that  would be the same as , which evaluates to , which evaluates to .Python has a different meaning, as can be witnessed here:In Python,  is equivalent to .This means that  is equivalent to , which evaluates to , which evaluates to .Coincidentally, both meanings (Python's and that of other languages) give the same result here, but one should be cautious.


Answer URL
