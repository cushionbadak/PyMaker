Natural Text
This question already has an answer here:How does the right-shift operator work in a python print statement?                    1 answer                I searched around and couldn't find an answer to this either on this site or elsewhere (always a challenge searching for topics involving punctuation chars).I was looking up the  in the Python standard library (here) and one of the examples is this (excerpt):How or why does the  operator work here? As far as I can tell (and I'm no Python expert), this is the right shift operator. I thought perhaps  overrides  or something, but the source for StringIO does not betray any such thing.I haven't poked around to see how the  built-in is implemented yet, but with initial searching I'm unable to figure out how this works. Anyone?
This is really a few questions in one.First, the "how" question:The  token is not actually an operator here; it's part of the syntax of the  statement, as documented here. The grammar is:… and the semantics are:This form is sometimes referred to as “print chevron.” In this form, the first expression after the  must evaluate to a “file-like” object, specifically an object that has a  method as described above. With this extended form, the subsequent expressions are printed to this file object.Second, the "why" question:Early on, the Python developers thought this was a convenient way to write to files.Since then, they've added stdout redirection, and more powerful file and string-formatting APIs, so it's not as useful anymore. And, thanks to other modern features like keyword arguments, and a few decades to think about it, they've come up with a more flexible way to design  as a regular function that doesn't require any special syntax at all. But removing it would break backward compatibility, so it couldn't be removed until 3.0.And it was removed in 3.0; you're only still seeing it because you're using an older version.If you want the new  function in 2.7, however, you can use a future statement: . But that will of course break ; you'll have to rewrite it as .
In Python 2,  is a statement (not a function), and statements can make up any goofy syntax they like ;-)  The  here has nothing to do with the right shift operator - it's a gimmick specific to the  statement.This is widely viewed as ugly, and in Python 3  is a builtin function (instead of a statement), and to specify a file to which to print Python 3 adds an optional  argument to the  function.
It is additional syntax; the compiler looks for  after a  statement:The  results in different bytecode;  instead of .This is the result of the Python grammar explicitly allowing for the extended syntax:At no point does the compiler interpret the  as a right-shift operator.Redirecting print output with this syntax is little used; you can just write directly to the file, or reassign to  instead. The simple formatting options the  statement offers can easily be replicated using (much more powerful) string formatting in any case.Python 3's  function accepts a  keyword argument to achieve the same functionality.
Your question is answered in a duplicate post.Quoted:print also has an extended form, defined by the second portion of the  syntax described above. This form is sometimes referred to as “print  chevron.” In this form, the first expression after the >> must  evaluate to a “file-like” object, specifically an object that has a  write() method as described above. With this extended form, the  subsequent expressions are printed to this file object. If the first  expression evaluates to None, then sys.stdout is used as the file for  output.


Answer URL
