Natural Text
In studying this answer, I discoved, much to my surprise, that  has a strange behavior;Obviously, both return some global value ; but not so if  is changed slightly:f2 returns its own special copy of , even though there's nothing in the body of f2 that would seem to cause that (no assignment to x).I can easy see how this is happening, the presence of the  statement changes the  bytecode into a , in a similar vein as the presence of  turns a function into a generator.But what I don't understand is why.  Is this documented behavior?  is this an implementation detail of cpython? (it works in the same way in IronPython, although the  module is non functional)
Imagine a more general case:Python obviously has to use  here, because it doesn't know whether the code in  will mess with . The same case goes for any use of , even if the argument is a constant â€” Python simply doesn't do a deep enough analysis to determine that any  happens to be safe.(There's a perfectly good reason why it shouldn't do that analysis, too: the only case that it could even analyze with any degree of success would be  on a constant argument, which is pointless. If the argument is fully known ahead of time, it should just be normal code!)


Answer URL
