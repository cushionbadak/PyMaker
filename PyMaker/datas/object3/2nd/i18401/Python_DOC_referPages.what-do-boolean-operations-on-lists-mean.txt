Natural Text
I was going through the source of  and I found this:   and  are lists.What's confusing me is how the  operator operates on two lists. I'd appreciate it if someone helped me out.  
All objects in Python have a boolean 'value'; they are either true or false in a boolean context.Empty lists are false. This applies to all sequences and containers, including tuples, sets, dictionaries and strings.Numeric 0 is false too, so 0, 0.0, 0j are all false as well, as are  and of course  itself:Everything else is considered true in a boolean context; so a list that is not empty is true, and two non-empty lists together with  is considered true as well.You can make custom types  look like empty containers by implementing  and returning , or look like a number by implementing * and returning  when the instance is to be the boolean equivalent of numeric zero.Just remember that  and  shortcircuit; if the first expression locks in the result then that value is returned and the second expression is ignored altogether. For , that means that in the expression ,  is ignored if  is a false value (like an empty list), because the whole expression can never be true in that case. For ,  is ignored if  is a true value.These rules are all covered by the Boolean operations reference documentation.*In Python 3, use  instead.
Empty list evaluates to  and non-empty list evaluates to .is equivalent to::List of falsy values in python:NoneFalsezero of any numeric type, for example, , , , .any empty sequence, for example, , , .any empty mapping, for example, .instances of user-defined classes, if the class defines a or  method, when that method returns the integer zero or bool value False. All other values are considered true â€” so objects of many types are always true.
If  is empty, then  will evaluate to , otherwise it will evaluate to . For example:
In addition to @Ashwini answer, you can use  inbuilt function to check what a given object will evaluate to.
It looks to me as though it's a logical boolean statement. In Python, when building an If statement, boolean statements have an interesting logical shorthand:Is the same as:The statement  is a cooler way of saying . In that same way, the statement  is a cooler way of saying , because  is the logical  operator.It takes a little time to acclimate to this logic but once you do, it makes your code a lot nicer looking.So why do the lists do this like a boolean value should?Since Python doesn't have explicit type declaration, every data type has a boolean representation. For lists like  and , if the lists are empty 's, it returns  and if NOT empty, it returns . Thus, the english translation ofshould read:I hope this helps.


Answer URL
