Natural Text
I would like to understand if there is a difference between assigning an empty value and an empty output, as follows:1> Assigning a value like this2> An empty value returned as outputIn other words, is there a difference in values of 'string' in 1> and 'str2' in 2>? And how would a method see the value of 'str2' if it is passed as an argument?
Checking equality with Maybe you were trying to compare with . This is for testing identity:  is equivalent to .Or check both strings for emptiness:So that both are empty ... 
In other words, is there a difference in values of 'string' in 1> and 'str2' in 2>?No, there is no difference, both are empty strings .And how would a method see the value of 'str2' if it is passed as an argument?The method would see it as a string of length 0, in other words, an empty string.
If you will check  in case-1 and  in case2, it will give u the same value, both the string objects are same.see the above method you can call  it will pass the  as str1 = 'abcd' and  str2 = ''.
No. There is no difference between the two empty strings. They would behave the same in all cases.
You can see for yourself.
No there is no difference 
Empty string is a literal, in Python literals are immutable objects and there value never changes. However, in some cases two literal objects having same value can have different identities (Identity of an object is an address of the memory location in CPython and you can get it by using id(obj)) so to answer your questionNote that most of the time id(string) should be equal to id(str2) :).You can read about the Data Model in the Python Language Reference for further details. I am quoting the text which is pertinent to the question:Types affect almost all aspects of object behavior. Even the  importance of object identity is affected in some sense: for immutable  types, operations that compute new values may actually return a  reference to any existing object with the same type and value, while  for mutable objects this is not allowed. E.g., after a = 1; b = 1, a  and b may or may not refer to the same object with the value one,  depending on the implementation, but after c = []; d = [], c and d are  guaranteed to refer to two different, unique, newly created empty  lists. (Note that c = d = [] assigns the same object to both c and d.)


Answer URL
