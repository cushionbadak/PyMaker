Natural Text
I am currently working through a few sections of "Think Python" by Allen B. Downey and I am having trouble understanding the solution to the question in Section 16.1:Write a boolean function called is_after that takes two Time objects,  t1 and t2, and returns True if t1 follows t2 chronologically and False  otherwise. Challenge: donâ€™t use an if statement.His solution is the following: Full solution code shown here.Questions: Is this operator comparing on multiple values at once?  How this this working?  Where can I read more about this?
Read the docs here for an explanationSequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.To your specific case:  is compared against . If they are equal,  is compared against . If those are equal,  is compared against . As soon as there's an inequality, that is returned.
 and  are tuples.  From the docs:Tuples and lists are compared lexicographically using comparison of corresponding elements.Meaning that first  and  are compared, then the minutes and then the seconds.
From the Python documentation:Sequence types also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements.
Its just comparing tuples. Do a  on the terminal and youll understand. Play around with the tuple comparisons and the rules of tuple comparisons will become pretty evident. 


Answer URL
