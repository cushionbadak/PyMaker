Natural Text
A question of semantics, really.Up until recently, if I had to do any typechecking on a structure, I would use  et. al. However since joining SO I've noticed everyone (and I mean EVERYONE) uses  instead. It seems they are synonymous, and  reveals almost IDENTICAL speed between them.Indeed even  agrees they're synonymous, with the exception of 's I frankly find it more readable to say  than , the first is basically just pseudo-code and the second calls some function (which I have to look up every time to be  or ) with some arguments. It doesn't look like a type cast, and there's no explicit way of knowing whether  is checking if  is an instance of  or vice-versa.I understand from this question that we use  because it's nicer about inheritance.  will fail while  will succeed. But if I'm checking what should ALWAYS BE A BASE OBJECT, what do I really lose from doing ?
if I'm checking what should ALWAYS BE A BASE OBJECT, what do I really lose from doing type is?well, it's nice you give the full documented answer in your question, so your answer is you lose nothing! The only times where  is necessary is when checking inheritance of a given class compared to another, as you well said and referenced.  shall be only used to check whether an instance is exactly of a given base type. 
Other than the inheritance issue, you also lose the ability to test multiple types when using . For example:
The Python Docs for the built-in type function provide clear guidance on the difference between type (with one arg) and isinstance.With one argument, return the type of an object. The return value is a type object and generally the same object as returned by object.class.The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses into account.To illustrate, take a look at the inheritance hierarchy below in module diamond:Then take a look at the python console output below based on module diamond:As per the documentation, it is more versatile and can cover a wider range of scenarios. With respect to the OP's original question - the performance characteristics were not stated as a valid reason to favour one over the other. Neither was readability.For a more in-depth discussion, which includes an explanation on (in the words of the answerer) "why checking type equality is an even worse practice in recent Python versions than it already used to be", please see this highly voted answer
The answer to your question is:No, given that you're checking for a definite base class, as you loose the ability to test for inherited classes.And IMO  is nicer to read and in Python: Readability counts.PS: I'm getting a significant difference in timings (on Python 3.3)


Answer URL
https://docs.python.org/3/library/functions.html#type
