Natural Text
So I have some csv data all I need from this data is two fields then I will do some calculations using the close price and have two more fields and print those four fields in a certain format.             I was thinking of creating namedtuples with the two fields and then adding the values of the other two fields once I calculate it. Would namedtuples be best to format it to this format, is another option better like dicts or lists?If using namedtuples is the right way how do I create them with only the two fields from the data and two fields that can have the values added, I was able to create namedtuples but with all the fields by using splitlines() on the data and then creating the namedtuples.
I would use a list of dictionaries. "named tuple" is like a struct or class, thus, you need to what the attributes are when you create a named tuple. Also, because there is no getter/setter method for this special struct, named tuple is immutable. This makes it not flexible for your code. What are you going to do when you want to add or remove an attribute from the named tuple? In my view, named tuple is just like tuple with the extra merit that making code more readable. Therefore, if tuple is not the data structure for your task, there is no meaning for using named tuple.
I was thinking of creating namedtuples with 'date' and 'close' fields with the data and then adding the values of 'indicator' and 'signal' once I calculate it. You can't.If you really want attribute-style access, with arbitrary attributes added dynamically, the way to do that is with a plain-old class derived from . That's exactly what class instances do by default.What  adds on top of that is a fixed set of fields, as part of each  class, where the fields can be accessed by index as well as by name. If you want to add new fields later, you don't want them fixed. So, don't use .However, I don't think you want either attribute access or indexed access; what you really want is keyed access. In other words, a .If you use the  module in the stdlib instead of trying to use  and parse things manually, this is not just easy, but trivial. For example:
Use a class... KISS.
It would be awkward to usebecause you want to add fields. Dictionaries are very flexible in that regard and the following subclass of one would allow you to access its contents attributes or with the usual indexingnotation. I got the idea from this SO answer, but it's been around for a while in slightly different forms. Themodule is the easiest way to read (and write) csv data, so I'd suggest using it rather than parsing the file format yourself.Output:


Answer URL
