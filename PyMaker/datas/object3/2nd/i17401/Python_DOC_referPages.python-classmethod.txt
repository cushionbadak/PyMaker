Natural Text
Reading Python Standard Library.  Trying to understanding classmethod.When I type: It returns:How would see what the classmethod returns instead of a generator of the classmethod?
You are producing a  descriptor object:returns the class  wrapped in a new  object. This is not a generator, this is what Python actually stores in your class when you decorate a method with it.Remember that a  line above a function or class is just syntactic sugar for an extra function call replacing that object;  above  just means that Python will replace  with .You can see the same type of object when looking at the  value; that's same type of object:It is the  method on the descriptor object that is invoked when you try and access the  attribute.Functions themselves are descriptors too; a  bypasses the function's  method to provide a binding to the class instead of the normal binding to an instance.See the descriptor HOWTO to understand what a descriptor is, and how a  object works.To see what an the method itself returns, just call it on the class or on an instance:Instead of the usual  instance object, the method is instead passed a reference to the class. For both the  call (directly on the class) and the  (on an instance of ), the first argument to  is  itself.Compare this to the  method; this is a normal method and when called directly on the class with  no arguments were passed in, when called on an instance with  a first argument, the instance, was passed in. This is what you normally would  use  for in the method signature.For class methods, then the first argument is usually named  when declaring your method.
If you want to call the   you have created on , you should do: is the decorator function, it will wrap whatever you pass to it and return a :Note that the first to a  is the class itself, called  by convention:This gives:Alternatively  the value and  it outside the function:
Change to:Unlike traditional class methods where the first argument is a  reference, a class method receives the  as implicit first argument, just like an instance method receives the instance. Also, you need to return a value to print it.
classmethod is useful when sharing the value across all different objects being created.Here the value of variable a is shared across all different objects that are being created and not just limited to one instance


Answer URL
