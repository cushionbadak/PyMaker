Natural Text
I was trying to have my class-based decorator keeping the  behavior of the original wrapped function (to match the way the  decorator works on functions). I am using python 3.3.First I tried functools:But when I call  on the decorated function, I get:Very well, so I tried to customize the  method of my decorator, which is supposed to be called by .Using functools again:Doesn't change the output, but something interesting happens:Explicitly setting the  method of the decorator instance has the same effect.After a little more tests I deduced  actually calls . Thus the overriden  method of the instance is never called.So here are my questions:Why does  call the  instead of ? Or have I missed something else?How would you fully reproduce what  does with function-based decorators to class-based decorators (including altering the result of  calls on the decorated function)?
Special methods are always looked up on the type of the instance (here the class object), not on the instance.  Otherwise a  on a class would be used when you tried to print the representation of the class itself;  would use the correct magic method, while  would raise an exception because  was not provided.Implement your own  hooks:e.g. still copy over the ,  and  attributes, and copy over the attributes from the function , but make any special methods a proxy.


Answer URL
