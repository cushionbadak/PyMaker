Natural Text
I'm trying to understand Python scopes. See this example:This code results the following error:Now if I remove the  line, then it runs as expected.How come I cannot use the global  from the  in  until I rebind it to ?
Any time you have an assignment in a function, that variable is considered local for the entirety of the function. You can't just reference the global "until the local assignment"What are the rules for local and global variables in Python (emphasis mine)In Python, variables that are only referenced inside a function are  implicitly global. If a variable is assigned a new value anywhere  within the function’s body, it’s assumed to be a local. If a variable  is ever assigned a new value inside the function, the variable is  implicitly local, and you need to explicitly declare it as ‘global’.Though a bit surprising at first, a moment’s consideration explains  this. On one hand, requiring global for assigned variables provides a  bar against unintended side-effects. On the other hand, if global was  required for all global references, you’d be using global all the  time. You’d have to declare as global every reference to a built-in  function or to a component of an imported module. This clutter would  defeat the usefulness of the global declaration for identifying  side-effects.
To refer to the the global  from the function, useNote that the assignment to  would rebind the global  too. If you don't want to happen, rename one of the variables (or, better still, don't use global variables).


Answer URL
