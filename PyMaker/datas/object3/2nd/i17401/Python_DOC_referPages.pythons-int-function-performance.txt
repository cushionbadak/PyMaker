Natural Text
Does Python's built-in function int still try to convert the submitted value even if the value is already an integer?More concisely: is there any performance difference between  and  caused by conversion algorithm?
As per the comments in the source code,Convert a number or string to an integer, or return 0 if no arguments  are given.  If x is a number, return ().  For floating point  numbers, this truncates towards zero.If x is not a number or if base is given, then x must be a string,  bytes, or bytearray instance representing an integer literal in the  given baseSo, if the input is a number,  function will be called on that object and the result will be returned. Internally  is an item in PyNumberMethods structure, which corresponds to the  function. As per the latest source code at the time of this writing,  is the function which corresponds to the  function, which is defined like thisHere  is a Macro, which just checks if the current object is really of type long. If it is true, it simply increases the reference count and returns the object as it is, nothing extra is done.If the input is in the form of a string, the string has to be converted to a number with  function.
This is handled in function  in , as explained in more detail by thefourtheye:So, when the argument is already an , the reference count is incremented and the same object returned.You can assume similar behavior for immutable types in general,. For example,  returns a new reference to , while, by contrast,  creates a copy of .
If you pass an  object to , you get the same object back (CPython 3.3.2):I don't know what you mean by "algorithmic performance difference", but it doesn't create a new object.
Why don't you just compare both?


Answer URL
https://docs.python.org/3/library/functions.html#int
