Natural Text
There are three questions as possible duplicates (but too specific):  How to properly set up multiprocessing proxy objects for objects that already existShare object with process (multiprocess)Can I use a ProcessPoolExecutor from within a Future?By answering this question all three other questions can be answered.Hopefully I make myself clear:Once I created an object in some process created by multiprocessing:How do I pass a reference to that object to an other process?(not so important) How do I make sure that this process does not die while I hold a reference?Example 1 (solved)Example 2Suppose  returns an object with mutable state. This identical object should be accessible from other processes. Example 3I have an object which has an open file and a lock - how do I grant access to other processes?ReminderI do not want this specific error to not appear. Or a solution to this specific usecase. The solution should be general enough to just share unmovable objects between processes. The objects can potentially be created in any process. A solution that makes all objects movable and preserves identity can be good, too.Any hints are welcome, any partial solution or code fragments that point at how to implement a solution are worth something. So we can create a solution together.Here is an attempt to solve this but without multiprocessing: https://github.com/niccokunzmann/pynet/blob/master/documentation/done/tools.rstQuestionsWhat you want the other processes to do with the references?The references can be passed to any other process created with multiprocessing(duplicate 3). One can access attributes, call the reference. Accessed attibutes may or may not be proxies.What's the problem with just using a proxy?Maybe there is no problem but a challenge. My impression was that a proxy has a manager and that a manager has its own process and so the unserializable object must be serialized and transfered (partially solved with StacklessPython/fork).Also there exist proxies for special objects - it is hard but not impossible to build a proxy for all objects (solvable).Solution? - Proxy + Manager?Eric Urban showed that serialization is not the problem. The real challenge is in Example2&3: the synchronization of state. My idea of a solution would be to create a special proxy class for a manager. This proxy classtakes a constuctor for unserializable objectstakes a serializable object and transfers it to the manager process.(problem) according to 1. the unserializable object must be created in the manager process.
Most of the time it's not really desirable to pass the reference of an existing object to another process. Instead you create your class you want to share between processes:Then you make a proxy manager like this:Then you register your class on that Manager, like this:Then once the manager is instanciated and started, with  you can create shared instances of your class with . This should work for all needs. The returned proxy works exactly like the original objects, except for some exceptions described in the documentation.
Before reading this answer, please note that the solution explained in it is terrible. Please note the warning at the end of the answer.I found a way to share the state of an object through .So I made this class that transparently shares it's state through all processes:You can pass instances of this class (and it's subclasses) to any other process and it will synchronize it's state through all processes.This was tested with this code:The "magic" of this class is that it stores all of it attributes in another instance of the class . This class isn't very special. It's just some class that can have arbitrary attributes. (A dict would have done as well.)However, this class has some really nasty quirks. I found two.The first quirk is that you have to specify how much space the  instance will take at most. This is because  has a static size. So the object that can be pickled in it can only be as large as the array.The second quirk is that you can't use this class with ProcessPoolExecutors or simple Pools. If you try to do this, you get an error:warningYou should probably not use this approach, as it uses an uncontrollable amount of memory, is overly complicated compared to using a proxy (see my other answer) and might crash in spectacular ways.
Just use stackless python. You can serialize almost anything with , including functions. Here I serialize and deserialize a  using the  module. This is similar to what you are trying to do in your example.Here is the download link for Stackless Python http://www.stackless.com/wiki/Download


Answer URL
