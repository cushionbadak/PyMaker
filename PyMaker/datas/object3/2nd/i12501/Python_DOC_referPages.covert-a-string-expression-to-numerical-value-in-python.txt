Natural Text
Recently, I got an interview question which says to convert string expressions like "1+2-3" and "-2+4" to 0 and 2 respectively. Assuming the inputs are single digits numbers followed by signs and no NULL input. I tried this output but the interviewer said I am close but not perfect solution. Please help me here. Thanks.I am making some silly mistake but I am learning. Thanks in advance.
Two things need fixing to work at all:You need to handle the initial value properly; when the initial value is non-negative, this fails. Before the loop, set  so a non-sign prefixed value is added (also, for style points,  is a terrible name, could you use  or something?).You can't use variables as operators.Replace:with:Note: If modules are allowed, a generalization can be used to handle operators the "nice" way (though more work would be needed to obey operator precedence). You'd define:then make the initial value of   and change the test for operators to:which scales to many more operators, dynamically selecting the operation to perform without cascading / checks.Side-note: While violating the spirit of the challenge,  (at least as of Python 3.5, and this may change, see bug #22525) will actually safely parse strings like this ( is unsafe, since it can execute arbitrary code, but  can only parse Python literals and apparently some basic compile-time math). So you could just do:Sure, it handles many other literals too, but we never defined the failure case behavior anyway. :-)
Using eval() is the simplest solution. LikeThe following code give another solution without using built-in evalFor testing
I think the most flexible solution (not using  and able to handle any operations) is to parse the string into a binary (red-black) tree, where leafs are numbers and branches operators (+,-,/,*,etc).For example,  would be parsed into following structure:Once you've parsed a string into this structure, it's easy to compute by traversing branches depth-first, right to left.If you need to handle variables, then you'd have to get  and replace accordingly, either as you parse the string, or as you traverse the tree.EDIT:I created a working example to illustrate this, you can find the source on github: https://github.com/MJWunderlich/py-math-expression-evaluator
what about:? Doesn't work with parenthesis


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
