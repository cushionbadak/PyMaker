Natural Text
Is there a way to show the errors that occurred on the server during a StaticLiveServerTestCase directly in the test feedback? That being, when some server function call errors and page just doesn't show up, the test execution by default has no knowledge of the server error. Is there someway to pass that output onto the testing thread?Preferably the these errors would show up in the same place that errors directly in the test code execution show up. If this isn't (easily) possible though, what's the next best way to quickly see those server errors?Thanks!Code (as requested):This has been significantly altered to make it simple and short. But when  is  and tries to call  the server has a server 500 error, but all I get is the  error from the test output, when I'd like to see the  error in the test output.
This is exactly why it is recommended to have much more unit tests than integration and UI/end-to-end. Aside from other things, the latter don't provide you with a specific feedback and you often need more time debugging and investigating why a UI test failed. On the other hand, when a unit test fails, it is usually a failure or an exception pointing you to a specific line in the code - you get the "What went wrong" answer right away.In other words, the point is: Cover this particular problem with unit tests leaving your UI test as is.To help you gather more information about the  failure, turn the logging on and log as much details as possible. You may also use the built-in Error Reporting and, for instance, let Django send you an email on 500 error. In other words, collect all the details and troubleshoot the failure manually.
To see the errors immediately, run the test in DEBUG mode:But one should also configure logging of server-side errors, either via custom  class  method implementation or via sentry.
I use to override the default logger using:This will display stderr on your terminal. You can even do:I only do this for debugging, if you want to use logging for non-debugging things I'd suggest to create custom loggers.More details about logging:https://docs.djangoproject.com/en/1.10/topics/logging/https://docs.python.org/3/library/logging.html


Answer URL
https://docs.python.org/3/library/logging.html
