Natural Text
I have a python Presenter class that has a method which creates an instance of a different Presenter class:my intent was to write a separate Presenter class for each window in my application, in order to keep things orderly. Unfortunately, I find it difficult to test the  method, particularly to test that  was called, because the instance is created within the method call. So, even if I patch  using python's mock framework, it still doesn't catch the call to the local  instance.So, I have a two questions:How can I change my approach in order to make this code more testable?Is it considered good practice to test simple code blocks such as this?
Is it possible to patch  and check both how you call it and  if your code call  too.By use  framework and  you should replace  class instance by a  object. Take care the  instance will be the return value of the mock used to replace the original class instance. Moreover you should take care of where to patch, now I can just guess how to do it but it will not far from the final test version:I used  just because I consider it a best practice, take a look to Autospeccing for more details.You can also patch  and  to test how your code call 's constructor... but you should use mock and not abuse of it, more things you mock and patch and more your tests will be tangled to the code.For the second question I think it is a good practice test these kind of block also, but try to patch and mock too far as possible and just what you can not use in testing environment: you will have a more flexible tests and you'll can refactor your code by rewriting less test code.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#autospeccing
