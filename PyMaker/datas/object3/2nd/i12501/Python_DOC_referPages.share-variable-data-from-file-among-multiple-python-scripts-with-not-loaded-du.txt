Natural Text
I would like to load a big matrix contained in the . This load must be made once. Once the variable  is loaded into the memory, I would like many python scripts to share it with not duplicates in order to have a memory efficient multiscript program in bash (or python itself). I can imagine some pseudocode like this:The idea is  to point to  in RAM, which is only once loaded by the n scripts (not n times). They are separately called from a bash script (or if possible form a python main):I'd also be interested in solutions via hard disk, i.e.  could be stored at disk while the  object access to it as being required. Nonetheless, the object (a kind of pointer) in RAM can be seen as the whole matrix.Thank you for your help.
Between the  module and , this is fairly easy:Each process would perform this work separately, and get a read only view of the same memory. You'd change the  to something other than  as needed. Switching to  would allow modifications to shared data, though it would require synchronization and possibly explicit calls to  to actually ensure the data was reflected in other processes.A more complex solution that follows your initial design more closely might be to uses  to create a connectable shared "server" for data, allowing a single common store of data to be registered with the manager and returned to as many users as desired; creating an  (based on  types) with the correct type on the manager, then -ing a function that returns the same shared  to all callers would work too (each caller would then convert the returned  via  as before). It's much more involved (it would be easier to have a single Python process initialize an , then launch es that would share it automatically thanks to  semantics), but it's the closest to the concept you describe.


Answer URL
https://docs.python.org/3/library/mmap.html
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager
