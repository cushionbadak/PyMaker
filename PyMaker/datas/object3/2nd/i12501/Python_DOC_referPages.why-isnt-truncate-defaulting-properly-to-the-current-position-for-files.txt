Natural Text
In an answer to another question, an odd behavior was observed, specific to Python 3. The documentation for the  command states (emphasis mine):Resize the stream to the given size in bytes (or the current position if size is not specified). The current stream position isnâ€™t changed. This resizing can extend or reduce the current file size. In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled). The new file size is returned.However...Instead of truncating at the current position (6), it truncated at the end of the file (i.e. not at all). This was verified by checking the file on disk.This process works as expected (file truncated to 6 bytes) in Python 2, and also in Python 3 using a  instead of a file. Why is it not working as expected with files in Python 3? Is this a bug?(Edit: it also works properly if an explicit  is given right before the .)
This fixes the issue if nothing else, as to why this happens I have no idea but it would be a good thing to report this up-stream if it isn't already.These are the only textural differences to the  functions between Python3 and Python2 that I could find (except for related function calls within the truncate function itself obviously):I'm sure someone will slap my fingers on the subject, but I think it's more related to the  calls and how the buffer is handled once you call flush. Almost as if it doesn't reset to it's previous position after flushing all the I/O. it's a wild assumption with no technical stuff to back it up yet, but it would be my first guess.Checked into the  situation, here's the only difference between the two, of which Python2 performs the following operation that Python3 does not (even lacks the source code for it):It's a function of  which appears to be used in this I/O operation.Now I'm late for a date so gotta dash, will be interesting to see what you guys find in the mean time! 
I opened an issue on the Python issue tracker for this, and the answer appears to be related to buffering:For some reason,  works with the buffer position, rather than the high-level stream position. This isn't actually limited to , and creates other unexpected results, such as:A developer has stated that there is an issue here, although I'm not entirely sure from his statement what the issue is. It looks to be marked for patching, though.


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.truncate
