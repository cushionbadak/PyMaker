Natural Text
I'm trying to create object dynamically using . Specifically, I want to create a float which has a .This is what I tried:Another file, where's the instance created using function (constructor) reference:This code is in loop, and when it's done, I run following (for testing where's the bug):The basic idea is that the user imports my module, gives it a  value and a function. My module's object then applies that function to the  value and returns a resulting object. However, it must keep the original value or at least its .
This is one of the differences between python 3 and python 2.  This would work in python 2 (using "old style" classes), but fails in python 3.For example, in python 2 the following works:but this doesn'tand it doesn't work in python 3 as all classes are "new style".Essentially, in new style classes anything that uses a built in overloaded method (methods with double underscores on both sides) will bypass the instance altogether, and go straight to the class.As long as you define the method on the class, it works fine.  For example (python 3)In fact, you can even create the method after instance creationA search for "python new style classes method lookup" should give you more information than you could ever want on this.  Additionally, chapters 32 and 38 of Learning Python, 5th edition (Oreilly, 2013) discusses these differences in depth.
The reason why it does not work is explained hereTL;DR You are adding the  method to the instance dict and not to the class itself.Try this:Then this works:But as the comments suggest subclassing float by defining a class the normal way is somewhat less hacky.Edit:If you want your  method to return the length of the  attribute  you can do it like this:This might fail if  is called on an object without an  attribute
Maybe this is enough:Doesn't use dynamic type.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
