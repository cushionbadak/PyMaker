Natural Text
This question already has an answer here:Why is the order in dictionaries and sets arbitrary?                    6 answers                First of all, I know how to deal with this situation. I am not asking how I can make an . I am asking why the same dictionary created same way can have different order of keys? What is the logic behind this? Isn't it the exact same code running time-independent and environment-independent? What changes and makes python create a different result?
This behavior is detailed in 's specification; it's to prevent certain types of malicious input from breaking applications:Note By default, the  values of str, bytes and datetime objects are “salted” with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.This is intended to provide protection against a denial-of-service caused by carefully-chosen inputs that exploit the worst case performance of a dict insertion, O(n^2) complexity. See http://www.ocert.org/advisories/ocert-2011-003.html for details.Before Python 3.3 this wasn't the case, and a dictionary would have the same order between different runs of the same application. I answered a related question about disabling this behavior, which links to some of the relevant source code.
Since Python 3.3, hash randomization is enabled by default for security reasons. The concern is that an attacker can feed a specially crafted program input that led to many hash collisions. This will cause the dictionary to perform at worse case scenario and may effectively cause a denial of service on a system.Many other languages that are often used for web programming also implemented hash randomization in roughly the same timeframe with their respective hash maps.Prior to hash randomization being implemented, due to collision resolution and internal hash table resizing you may not end always up with the same order if you use different sequence of inserts and removes that produces the same set of final keys, but you'd usually get the same ordering in a dictionary when you insert and remove keys in the same sequence. However, this was an accident of implementation, which was never guaranteed by the language specification.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/whatsnew/3.3.html
