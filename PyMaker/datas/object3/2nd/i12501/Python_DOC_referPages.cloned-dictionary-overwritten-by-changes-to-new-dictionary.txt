Natural Text
I feel like this must have asked before but I have been unable to find the solution I'm looking for:I have a simple dictionary  that contains one key and a list. I wanted to copy that dictionary for future use, but any changes I make to  effect my copy, .:
Yup,  returns a shallow copy of the dictionary:A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.Instead, use  which performs a deep copy:A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.
That's because you're not making a deep copy of the dictionary.This should point you in the right direction: https://docs.python.org/2/library/copy.htmlIn short, when you  a dictionary, you're only copying the pointers to the items in the dictionary. Thus when you change the values in one dictionary, since the pointers are the same in both, the change shows up immediately in the other.By performing a , you're copying the values from one dictionary to another. Now you have two separate copies.
If I understand correctly, .copy() does a shallow copy, so the list inside your dictionary is still passed as a reference. You need to use deep copy.
You have used the shallow version of .copy(), i.e. you have created two copies to the dictionary, but both of them still contain the same reference of list. You need to use copy.deepcopy() as described here, the difference is:A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.A deep copy constructs a new compound object and then, recursively, inserts copies into it of the objects found in the original.


Answer URL
https://docs.python.org/3/library/copy.html#copy.deepcopy
