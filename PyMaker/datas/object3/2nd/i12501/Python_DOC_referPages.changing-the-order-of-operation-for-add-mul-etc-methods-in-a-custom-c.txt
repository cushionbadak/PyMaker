Natural Text
I have a vector class:which works fine, i.e. I can write:However if the order of operation is reversed, then it fails:I understand the error: the addition of an  object to an  object is undefined because I haven't defined it in the  class. Is there a way to work around this without defining it in the  (or parent of ) class?
You need to also define Some operations do not necessarily evaluate like this a + b == b + a and that's why Python defines the add and radd methods.Explaining myself better: it supports the fact that "int" does not define a  operation with  instances as part of the operation. Therefore vector + 1 is not the same as 1 + vector.When Python tries to see what the  method can do, an exception is raised. And Python goes and looks for  operation to try to complete it.In the OP's case the evaluation is true and suffices with Which outputs:The same applies to all number-like operations.
When you say , Python calls . If x does not implement  (or that method returns ), Python tries to call  as a fallback.Thus all you have to do is to define the  method in your Vector class and  will work as you would expect.Note: you would have to do similar for other operations too, e.g. implement  and  pair, etc.You might also want to look at this question, it explains the same principle in more details.Update:Depending on your use case, you might also want to implement the  method (and its cousins) to override the  operator.For example, if you say  ( being an instance of  here), you might want to modify the  instance itself, and not return a new  instance as a result, which what your  method currently does.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
