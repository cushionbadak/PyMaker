Natural Text
This question already has an answer here:What is the time complexity of popping elements from list in Python?                    4 answers                Shouldn't they both be , as popping an element from any location in a Python list involves destroying that list and creating one at a new memory location? 
Python's  implementation uses a dynamically resized C  under the hood, removing elements usually requires you to move elements following after up to prevent gaps. with no arguments removes the last element. Accessing that element can be done in constant time. There are no elements following so nothing needs to be shifted. removes the first element. All remaining elements have to be shifted up one step, so that takes O(n) linear time.
To add to Martijn's answer, if you want a datastructure that has constant time pops at both ends, look at .


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
