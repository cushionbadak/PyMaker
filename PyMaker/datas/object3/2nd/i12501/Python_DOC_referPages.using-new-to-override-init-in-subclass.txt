Natural Text
I'm interested in using the  functionality to inject code into the  function of subclasses. My understanding from the documentation is that python will call  on the instance returned by . However, my efforts to change the value of  in the instance before returning it from  don't seem to work.The above code prints:but I would expect it to printWhy not?I feel like Python is calling the original value of , regardless of what I set it to in . Running introspection on  shows that the new version is in place, but it hasn't been called as part of the object creation.
Well, the new object is expected to be empty before the  is called. So probably python, as optimization, does not bother to query the object and goes to fetch  straight from the class.Therefore you'll have to modify  of the subclasses themselves. Fortunately Python has a tool for that, metaclasses.In Python 2, you set metaclass by setting special member:See Python2 documentationIn Python 3, you set metaclass via keyword attribute in the parent list, soSee Python3 documentationThe metaclass is a base class for the class instance. It has to be derived from  and in it's  it can modify the class being created (I believe the  should be called too, but the examples override , so I'll go with it). The  will be similar to what you have:(using the Python 3 example, but the signature in Python 2 seems to be the same except there are no , but adding them shouldn't hurt; I didn't test it).
I suspect the answer is that  is a special function, internally it is defined as a class method, and as a result cannot be replaced by reassigning it in an instance of the object.In Python, all objects are represented by the  in C, which has a pointer to a . This contains a member called  that I believe contains a pointer to the  function.The other solution works, because we are modifying the class, not an instance of the object.


Answer URL
https://docs.python.org/3/reference/datamodel.html#customizing-class-creation
