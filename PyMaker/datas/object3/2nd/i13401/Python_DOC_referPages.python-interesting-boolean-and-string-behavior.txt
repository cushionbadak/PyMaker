Natural Text
This question already has an answer here:Is short-circuiting in assignment statements considered good style?                    2 answers                I was reading through an API's documentation when I came across a curious little set of statements:After doing some personal testing, I found that if  was set to ,  would be set to use HTTPS, and HTTP if  was . Awesomely pythonic, and I'll definitely be stealing this.Can somebody explain exactly how this works? 
In python, an empty string is equivalent to False, a non empty string is equivalent to TrueThe behavior of a boolean expression is described in the python 2 documentation, and is the same for python 3. The expression x and y first evaluates x; if x is false, its value is returned; otherwise, y is evaluated and the resulting value is returned.The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.That's why you get the string 'https://' or 'http://' depending on the value of 'self.use_ssl'Some examples, from the python console:You can always convert a boolean expression to a real boolean value using bool()
This trick, , only works when  itself is a "truthy" value. Consider . You might expect it to produce the empty string, but it will produce , because  results in the empty string, which is considered  when evaluating . The correct way would be to wrap  and  in a list to guarantee that the second argument to  is truthy (and that the overall result is a list in either case), then extract the first value of that list:To avoid the clunkiness (and inefficiency) of creating and indexing a temporary list, Python introduced the conditional expression:which does not rely on  having any particular boolean value.
it works like this:when python interapt this it first checks the  if it is Trueit continues in the  chain to see if the next statement is True.since the next statement is a string (and not an empty one) it is Trueso there is no need to continue to the or since this statement is definetly True already, so the last value is used witch was 'https'if use_ssl was false then there is no need to evaluate the and part of the condition since the first part is already false so python "skip" it and continue to the  part to check if that is True, since it is again a non empty string it is true, and again the last value used is "returned"


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
