Natural Text
So, let's say I have an arbitrarily long list of numbers. I'd like to get a list of every number in that list multiplied by every number in that list. I'd do that by nesting  loops like this:Now if I'd like to multiply every number in that list times every number in that list times every number in that list again, I'd do this:My issue is that I'm searching a graph for a subgraph, and I need to allow for arbitrarily large subgraphs. To do this I have to construct every subgraph with n edges from the edges in the main graph - and I have to allow for arbitrary values of n. How?
 with an iterative product computing function (I favor ). If you need -way products (in both senses of the word "product"):The above is simple, but it will needlessly recompute partial products when the set of values is large and . A recursive function could be used to avoid that:
I think a recursive function of some kind would probably help you. This is just untested pseudocode typed into the Stack Overflow editor, so beware of using this verbatim, but something like this:The basic idea is that each "level" of the function calls the next one, and then deals with what the next one produces. I don't know how familiar you are with Python's  keyword, but if you know what it does, then you should be able to adapt the code above.Update: Or just use  like ShadowRanger suggested in his answer; that's probably a better solution to your problem.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
