Natural Text
I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a  operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:I tried doing something similar in Python, but it didn't work, so I used  to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. Actual code:
Are you talking about multi-line strings? Easy, use triple quotes to start and end them.You can use single quotes too (3 of them of course at start and end) and treat the resulting string  just like any other string.NOTE: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.I.e.,:Finally, one can also construct long lines in Python like this:which will not include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.
If you don't want a multiline string but just have a long single line string, you can use parentheses, just make sure you don't include commas between the string segments, then it will be a tuple.In a SQL statement like what you're constructing, multiline strings would also be fine.  But if the extra whitespace a multiline string would contain would be a problem, then this would be a good way to achieve what you want.
Breaking lines by  works for me.  Here is an example:
I found myself happy with this one:
I find that when building long strings, you are usually doing something like building an SQL query, in which case this is best:What Levon suggested is good, but might be vulnerable to mistakes:
You can also concatenate variables in when using """ notation:EDIT: Found a better way, with named params and .format():
In Python >= 3.6 you can use Formatted string literals (f string)
This approach uses:just one backslash to avoid an initial linefeedalmost no internal punctuation by using a triple quoted stringstrips away local indentation using the textwrap  moduleuses python 3.6 formatted string interpolation ('f') for the  and  variables. This way looks the most pythonic to me.Update: 1/29/2019 Incorporate @ShadowRanger's suggestion to use  instead of 
For example:if the value of condition should be a string, you can do like this:
I find  the best for long strings as described here:
I personally find the following to be the best (simple, safe and Pythonic) way to write raw SQL queries in Python, especially when using Python's sqlite3 module:ProsNeat and simple code (Pythonic!)Safe from SQL injectionCompatible with both Python 2 and Python 3 (it's Pythonic after all)No string concatenation requiredNo need to ensure that the right-most character of each line is a spaceConsSince variables in the query are replaced by the  placeholder, it may become a little difficult to keep track of which  is to be substituted by which Python variable when there are lots of them in the query.
Your actual code shouldn't work, you are missing whitespaces at the end of "lines" (eg: )There is triplequotes for multiline string:It will contain the line breaks and extra spaces, but for SQL that's not a problem.
I usually use something like this:If you want to remove annoying blank spaces in each line, you could do as follows:
You can also place the sql-statement in a seperate file  and load it in the py file withSo the sql-statements will be separated from the python code. If there are parameters in the sql statement which needs to be filled from python, you can use string formating (like %s or {field})
"Ã€ la" Scala way (but I think is the most pythonic way as OQ demands):If you want final str without jump lines, just put  at the start of the first argument of the second replace:Note: the white line between "...templates." and "Also, ..." requires a whitespace after the .
I use a recursive function to build complex SQL Queries. This technique can generally be used to build large strings while maintaining code readability.P.S: Have a look at the awesome python-sqlparse library to pretty print SQL queries if needed.http://sqlparse.readthedocs.org/en/latest/api/#sqlparse.format
Another option that I think is more readable when the code (e.g variable) is indented and the output string should be a one liner (no newlines):
I like this approach because it privileges reading. In cases where we have long strings there is no way! Depending on the level of indentation you are in and still limited to 80 characters per line... Well... No need to say anything else. In my view the python style guides are still very vague. I took the @Eero Aaltonen approach because it privileges reading and common sense. I understand that style guides should help us and not make our lives a mess. Thanks! 
Generally, I use  and  for multi-line comments/string.you can use any string to join all this list element like ''(newline) or ''(comma) or ''(space)Cheers..!!


Answer URL
https://docs.python.org/3/library/sqlite3.html
https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation
https://docs.python.org/3/library/inspect.html#inspect.cleandoc
