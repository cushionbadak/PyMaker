Natural Text
This question already has an answer here:Why is the id of a Python class not unique when called quickly?                    6 answers                till now I belived that Python strings are immutable but when I tried this I got confusedif I use  operator, it doesn't change the object id although string has changed.  what is happening in this case?now this is bit different? https://ideone.com/eg1SINcan somebody explain what is happening here?
 returns an integer value that is unique to the object you pass it. If  is the only reference to the string , then doing  may end the lifetime of the string  before the string  is created, so the ID of the old string is reused (which is perfectly valid behavior).Adding another reference to the string  (for example, by doing  before modifying ) should cause the IDs to diverge.
The string objects themselves are immutable, however, according to the Python documentation objects with non-overlapping lifetimes may have the same id() value.


Answer URL
https://docs.python.org/3/library/functions.html#id
