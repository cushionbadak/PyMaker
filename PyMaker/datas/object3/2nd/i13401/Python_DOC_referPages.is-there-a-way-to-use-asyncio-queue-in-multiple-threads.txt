Natural Text
Let's assume I have the following code:The problem with this code is that the loop inside  coroutine is never finishing the first iteration, while  size is increasing.Why is this happening this way and what can I do to fix it?I can't get rid of separate thread, because in my real code I use a separate thread to communicate with a serial device, and I haven't find a way to do that using .
 is not thread-safe, so you can't use it directly from more than one thread. Instead, you can use , which is a third-party library that provides a thread-aware  queue:There is also  (full-disclosure: I wrote it), which provides process-safe (and as a side-effect, thread-safe) queues as well, but that's overkill if you're not trying to use .
If you do not want to use another library you can schedule a coroutine from the thread. Replacing the  with the following works fine.The variable  represents the event loop in the main thread. EDIT:The reason why your  coroutine is not doing anything is thatthe event loop never gives it a chance to do so. The queue object isnot threadsafe and if you dig through the cpython code you find thatthis means that  wakes up consumers of the queue throughthe use of a future with the  method of the event loop. Ifwe could make it use  it should work. The majordifference between  and , however, isthat  wakes up the event loop by calling  . So let's call it ourselves:Then, everything works as expected. As for the threadsafe aspect ofaccessing shared objects, uses under the hood which has threadsafe  and .Maybe checking for queue not empty and popleft is not atomic, but ifyou consume the queue only in one thread (the one of the event loop)it could be fine.The other proposed solutions,  from HuazuoGao's answer and my  are just doingthis, waking up the event loop.
 is at hand. See  doc for detail.Simply change your  like this:Here's a sample output:
What about just using threading.Lock with asyncio.Queue?See also - asyncio: Wait for event from other thread


Answer URL
https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue
https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading
