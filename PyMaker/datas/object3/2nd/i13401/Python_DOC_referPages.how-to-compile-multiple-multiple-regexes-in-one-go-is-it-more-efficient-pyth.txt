Natural Text
Let's say I have a code as such:I could also do this:But is there any real gain in speed or memory when I use the ?
Do not listen anybody - just measure it! You can use timeit module for it. But remember, that "premature optimization is the root of all evil" (c) Donald Knuth.Btw, answer on your question "No, it doesn't help at all".
If you were compiling a lot of regexes,  might help by avoiding lookup costs involved in finding , then getting its  attribute each call; with , you look up  once and  once, and then it gets used over and over without further lookups. Of course, when you need to construct a  to use it, you eat into that savings. Practically speaking, you'd need an awful lot of regexes to reach the point where  would be worth your while; for three, it's probably a loss.Even when it did help, it would be the tiniest of microoptimizations. I would do it if it made the code cleaner, performance is a tertiary concern here at best. There are cases (say, parsing a huge text file of integers into s) where  can be a big win because the overhead of starting it up is compensated for by the reduced lookup and Python byte code execution overhead. But this is not one of those cases, and those cases are so rare as to not be worth worrying about 99.99% of the time.


Answer URL
https://docs.python.org/3/library/re.html#re.compile
