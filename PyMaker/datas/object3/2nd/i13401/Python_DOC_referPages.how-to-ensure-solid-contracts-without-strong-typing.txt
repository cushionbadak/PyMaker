Natural Text
 takes an argument that must match the possible return values of :How do I ensure that, if a programmer adds a new packet type return value to , that he also doesn't forget to add the value to . In a strong-typed language  would be a defined type that is returned and passed, so I would have safety that way.
Generally, in Python, if you have an extensible set of values, it makes sense to make a shallow inheritance hierarchy instead. This is less prone to forgetfulness. Enums are better for fixed sets of values.That said, the first thing you should be doing is trailingto your functions.Another thing you might consider is using dictionaries to represent such mappings:You can then add a simple testIf you're doing this a lot, build a function:which lets you doand get checks at startup.Also, consider using a proper .
You shouldn't do it, even if you could. Python is a  language, in  language we don't restrict variables on the basis of their type. Consider as case that I define an custom  as follows:-That is the beauty of , you added a new packet and you didn't have to change your code at all.Answer to your question - Write testsThat is why testing is considered very important in dynamic and weakly-typed languages. We don't rely on strong-typing and ended up writing much more code  than we need to, but instead we heavily test our code at all stages. The individual who adds a new packet is responsible to ensure that his code works, and he doesn't ends up breaking yours.
You can actually create your own types in python - types are just classes.Sometimes, this may seem somewhat heavy. A simpler alternative is dumping attributes into a primitive data structure, as in Veedrac's answer.A very nice middle ground if you just want a struct-like container are namedtuples.All of these options have the advantage that parameters are defined on the objects directly, where they actually belong. This means there is only a single point where new parameters need to be defined (on the new instance), not several as in your setup. It also plays much better with duck-typing, as any class with  and , regardless of extensions, can be used.
There is no way to ensure that a programmer does not forget anything. Programmers are human and human tend to forget things. However you can add some code to your  and thus remind a programmer to add the new value to this function.Or you can even raise an exception, so the programmer immedaately sees an error.PS. In Python you have to define your function before calling them. 


Answer URL
https://docs.python.org/3/library/enum.html
