Natural Text
I have scripts calling other script files but I need to get the filepath of the file that is currently running within the process. For example, let's say I have three files. Using execfile: calls . In turn,  calls . How can I get the file name and path of , from code within , without having to pass that information as arguments from ?(Executing  returns the original starting script's filepath not the current file's.)
p1.py:p2.py:
as others have said. You may also want to use os.path.realpath to eliminate symlinks:
Update 2018-11-28:Here is a summary of experiments with Python 2 and 3. With main.py - runs foo.pyfoo.py - runs lib/bar.pylib/bar.py - prints filepath expressions  For Python 2, it might be clearer to switch to packages so can use  - just add empty  files to the two folders.For Python 3,  doesn't exist - the nearest alternative is , though this affects the stack frames. It's simplest to just use  and  - no  files needed.See also Difference between import and execfileOriginal Answer:Here is an experiment based on the answers in this thread - with Python 2.7.10 on Windows.The stack-based ones are the only ones that seem to give reliable results. The last two have the shortest syntax, i.e. -Here's to these being added to sys as functions! Credit to @Usagi and @pablogBased on the following three files, and running main.py from its folder with  (also tried execfiles with absolute paths and calling from a separate folder). C:\filepaths\main.py: C:\filepaths\foo.py: C:\filepaths\lib\bar.py:
I think this is cleaner:and gets the same information as:Where [0] is the current frame in the stack (top of stack) and [1] is for the file name, increase to go backwards in the stack i.e.would be the file name of the script that called the current frame. Also, using [-1] will get you to the bottom of the stack, the original calling script.

The suggestions marked as best are all true if your script consists of only one file. If you want to find out the name of the executable (i.e. the root file passed to the python interpreter for the current program) from a file that may be imported as a module, you need to do this (let's assume this is in a file named foo.py):Because the last thing () on the stack is the first thing that went into it (stacks are LIFO/FILO data structures).Then in file bar.py if you  it'll print bar.py, rather than foo.py, which would be the value of all of these:
this will give us the filename only. i.e. if abspath of file is c:\abcd\abc.py then 2nd line will print abc.py
It's not entirely clear what you mean by "the filepath of the file that is currently running within the process". usually contains the location of the script that was invoked by the Python interpreter.Check the sys documentation for more details.As @Tim and @Pat Notz have pointed out, the __file__ attribute provides access tothe file from which the module was  loaded, if it was loaded from a file
I have a script that must work under windows environment.This code snipped is what I've finished with:it's quite a hacky decision. But it requires no external libraries and it's the most important thing in my case.
No need for inspect or any other library.This worked for me when I had to import a script (from a different directory then the executed script), that used a configuration file residing in the same folder as the imported script.
The  attribute works for both the file containing the main execution code as well as imported modules.See https://web.archive.org/web/20090918095828/http://pyref.infogami.com/__file__
this would print the path of the currently executing script
I think it's just    Sounds like you may also want to checkout the inspect module.
You can use 

This should work:
To get directory of executing script  
To keep the migration consistency across platforms (macOS/Windows/Linux), try:
Try this,
I used the approach with __file__but there is a little trick, it returns the .py file when the code is run the first time, next runs give the name of *.pyc fileso I stayed with:or 
I wrote a function which take into account eclipse debugger and unittest.It return the folder of the first script you launch. You can optionally specify the __file__ var, but the main thing is that you don't have to share this variable across all your calling hierarchy.Maybe you can handle others stack particular cases I didn't see, but for me it's ok.
Simplest way is:in script_1.py:in script_2.py:P.S.: I've tried , but since it reads script_2.py as a string,  returned .
I have always just used the os feature of Current Working Directory, or CWD.  This is part of the standard library, and is very easy to implement.Here is an example: 
Most of these answers were written in Python version 2.x or earlier. In Python 3.x the syntax for the print function has changed to require parentheses, i.e. print().So, this earlier high score answer from user13993 in Python 2.x:Becomes in Python 3.x:
if you want just the filename without  or  you can try this will print testscriptyou can generate whatever you want by changing the index inside []



Answer URL
https://docs.python.org/3/library/os.path.html#os.path.realpath
