Natural Text
Let us say from function perspective. Thanks.Here are cases where I tested,thanks in advance,Lin
Well, the first thing "wrong" with it (if this is production code rather than a class assignment or personal exercise) is that you're reinventing the wheel. Python already provides binary search as part of the included batteries through the  module (and yes, it's on Python 2 as well).Beyond that, it definitely doesn't work for all cases. For example, I just tried:and got no hit. This is because your loop never actually loops; presumably you need to dedent the final  so it's not part of the  loop, because as is, you never make it more than one (and a half, counting the ) set of tests in before succeeding or giving up.Fixing that indent issue (and if you're on Python 3 or using the   import on Python 2, changing  to ) makes it work, and it seems to be a fairly standard implementation of the algorithm.A couple suggestions:Python tends to use half-open ranges; you accept  and  as inclusive values, where typically Python functions accept  and , where  is inclusive, and  is exclusive (the way  behaves).Moving the endIndex` arguments to the end of the profile would allow you to give them useful defaults, so in the common case (searching the whole sequence), users wouldn't have to manually specify the bounds. For example:def binarySearch(array, value, beginIndex=0, endIndex=None):    if endIndex is None:        endIndex = len(array) - 1  # Or just len(array) if you rewrite as half-open    ...would make it much simpler to call in the standard case (and not coincidentally, that's the profile used by ).On fixing the indent issue (per your request in the comments), I'm saying that the following four lines (which are currently indented to the level of the  loop's body), should be dedented a level, so they're only run when the  loop exits without -ing, instead of every execution of the  loop (which, since there is a return on either path, means the  loop never actually loops):


Answer URL
https://docs.python.org/3/library/bisect.html
https://docs.python.org/3/library/bisect.html#bisect.bisect
