Natural Text
I was playing around a bit with the new type hinting / typing module with python3.5 trying to find a way to confirm if the hinted type is equal to the actual type of the variable and came across something that rather surprised me.Continuing my search for finding a way to compare a variable to it's hinted type I've also tried this:Would anyone be able to explain why exactly the former evaluates to True?And continuing onwards, is there a sound way to check if a variable's type is equal to a type coming from the typing module?
 does not do real PEP 484 type checking. The documentation notes this in passing:In general,  and  should not be used with types.The  module, as well as the  and  modules it’s based on, use extensive  and  magic to make  and  behave reasonably. But they’re not doing enough to support your case. Nor is it their goal to support it.is there a sound way to check if a variable's type is equal to a type coming from the typing module?You’re not looking for type equality. As you have noted yourself, the type of  is , which is not equal to , nor to . You’re looking for type checking, which is much more complicated.Consider this:What would you expect this program to print? You can’t expect  to dig into  at runtime and infer that it always returns . This is not feasible in Python. You need either a “compile” time type checker that has access to the structure of , or explicit type annotations, or—most likely—both.


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
https://docs.python.org/3/library/typing.html#typing.TypeVar
https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks
