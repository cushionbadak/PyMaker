Natural Text
I am new to python and to coding in general, so I'm very lost. I have coded a "Node" class (shown below at the very bottom) that instantiates a binary search tree and a couple of methods like insert(), and elements() (which returns a list of the elements by inorder transversing the tree). I am supposed to make this class iterable: "iter__(self) should return a NodeIterator, which returns elements from the tree in sorted order. Modifying the tree should not modify existing iterators." I'm trying to do this by inserting this code into the class right now:I defined x=self.copy() to try to cover the fact that modifying the tree shouldn't modify the iterator, but I don't know if that is the right idea.Here is my Node class with a decorator used in one of my methods:
Don't define  on the class; that makes the instances iterators (which necessarily iterate the object directly) when what you want is to have an iterable that is not an iterator. To do that, you define  and have it return a whole new iterator over a copy of your object.Since you've already got an  method that effectively snapshots your , it's not hard to use that to make a snapshotting iterator; there's is no point in copying the structure because you're just iterating in order anyway, and  can do the work for you (and use less memory on the snapshot to boot). Normally, I'd just make  a generator function, e.g.:But since your assignment calls for a special  class, that won't do. For that, you need to make a new class (possibly defined inside your existing  class to namespace it):You can see why I wouldn't normally bother with a special class when generator functions for  (functions using the  magic) are so much simpler, but that's the basic structure. You can read more about iterators on the Python wiki, or about the basic interfaces on the Python  ABC documentation.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
