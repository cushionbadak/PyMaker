Natural Text
This question already has an answer here:Understanding slice notation                    31 answers                This is the Code I am looking at https://github.com/Katee/quietnetIn this project, there is a file named quitenet.pyIn this file, there it is.I have no idea how I can understand the meaning  .
Easiest way is to try it on some data. For example, let's make a list:I shortened the list, but it's all the letters you expect. Now try it:So what's happening here is that as  increments through the loop (skipping  elements at a time), the routine yields out the next  elements of the original list. This return strategy is called a "generator," and it's signaled by the  statement. Yield is like , but if the routine is called again, it will "keep going from where it last left off."Another way to exercise this is in a loop:Every time through the loop,  becomes the next "chunk" of the original iterable. What's yielded from  to the loop is a slice of the original list . In this case, I asked for  so you can see the difference.As you learn how to use , , and similar generators, you'll find them enormously helpful. See e.g. the itertools module.
It's slicing. So, in that part, it slices the list  from  to  (includes element in index , until index , but exclude element in index )
 is slicing syntax, and it gets a subsequence from index  (inclusive) to index  (exclusive). Unlike indexing, it never raises exceptions; if the slice goes outside the sequence, the slice is just shorter than you'd expect.
The expression  returns a slice of array , specifically the elements from  to .  This is a generator expression and each call will return the next  elements from the array since the last time it was called.
This is a form of string formatting called . It involves sectioning a part of the string using slicing notation, . Here is how it works:Once you know this the code becomes easy to read. You are slicing the string from the section  to whatever  is supposed to be.  is also apparently the interval that the range jumps with each iteration. You can read more on slicing here: https://pythonhosted.org/bitstring/slicing.html
 is a slicing operator for lists.From this answerSo, there is an example
The function is a generator that returns incremental slices of  that are  elements long.Consider the following:Produces:Which are non-overlapping slices. The trick to this is that the slice notation extracts elements from the starting index to the (ending index -1).


Answer URL
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
