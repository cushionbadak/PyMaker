Natural Text
What do the following expression actually does?More specifically:What does  mean?What will be the content of ?What will be the output of  and and why?
What does  mean? lets you define functions that take parameters, just like . And those parameters can have default argument values. So,  is the same as .In fact, when faced with an expression that's too complicated for you to read, it's often worth unpacking into simple statements:Now, why would you want to create a parameter named  with default value ? Why not just ? The official FAQ explains this, but let's try to summarize.If you just write this:… what you get is 10 functions of no parameters, that are all closures over the same variable, . Because  has the value 9 at the end of the loop, when called, they're all going to return 9. But if you do this:… what you get is 10 functions of one optional parameter  (which hides the closure  from view), whose default value is the value of  at the time each function was defined. So, when called with no arguments, the first one will return 0, the second 1, and so on.In your case, of course, the functions aren't just returning , they're returning a function that takes a parameter, adds  to it, and returns the result. But the idea is the same; you want them to return different functions, which add 0, 1, … 9 to their arguments, not all return equal functions that all add 9.What will be the content of ? will be 10 functions of one optional parameter whose default values range from 0 to 9, each of which returns a function of one parameter. That returned function is a closure over the value of  from the outer function. So, when it's called, it returns its argument, , plus the  variable that ranges from 0 through 9.What will be the output ofHere, you're calling the first outer function, , with the argument 14. So, instead of its default value 0 for , it's going to have 14. So, what you'll get is a function that takes one argument and adds 14 to it. But it will print out as something like:That long mess is Python 3.4+ trying to be helpful by telling you where to find the function definition. Usually, when a function is nested this deeply, most of the steps along the way have names. In this case, you've got three layers of anonymous functions, so none of the names are very useful…In order to see it do anything useful, you'll have to call it:And this will give you .You could also use the  module, or just , to poke around inside the function. For example,  will tell you that it's stashed the number 14 under the name  for use by its internal function.…Here, you're again calling , but this time with no argument, so its  gets the default value of . So, it returns a function that adds  to its argument. You then call that function with , so you get .
To answer the last part first:Obtained by running the code.  bad name by the way as list is a python builtin gives you 10 lambda functions that don't do much - the first will return the original argument x, the second the argument + 1, ect. as n is stored as the index of the lambda by n=n local to that lambda.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/tutorial/controlflow.html#default-argument-values
https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result
