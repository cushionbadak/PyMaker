Natural Text
How do I sort a multidimensional list to alphabetical order based on its first row of data without using numpy nor other modulesFor example I have a list:I want it to be like:Thanks!
I think there should be a better way; anyway, this would do the trick:Edit: gives you an iterator (in Python 3), if you do , you'll find it looks like  sorts the list above (becomes  under the hood), I didn't specify the key, so it compares the elements directlythen, you zip again, and you get an iterator of what you wants (elements in  are  if you print them out); however, you have to do  so you can get  instead of finally,  also returns an iterator in Python3, to get a list, you simply use  to construct the final list.Documentations: zip, sorted, and map
Once you know the new "order" (or mapping) of the sorted indexes, you should be able to use operator.itemgetter to basically walk all the rows and get the items in the order that you just found.In your case, you have . In order to get those letters sorted, you should first get index , then index , then index  and finally index : . Once you find that mapping, you can just call  to get you the items on each row in that order.Which ouputs:EDIT:rpatisso made me see (in comments to this answer) that there's more effective way to calculate the  variable than using list.index which is O(n2):
Try it with numpy.Without numpy:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/library/functions.html#map
